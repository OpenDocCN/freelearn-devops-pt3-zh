["```\nAWSTemplateFormatVersion: '2010-09-09'\nParameters:\n  KeyName:\n    Type: AWS::EC2::KeyPair::KeyName\n    Default: admin-key\n  InstanceType:\n    Type: String\n    Default: t4g.small\n  SSHCIDR:\n    Type: String\n    MinLength: 9\n    MaxLength: 18\n    Default: 0.0.0.0/0\n    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n  LatestAmiId:\n    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'\n    Default: '/aws/service/canonical/ubuntu/server/jammy/stable/current/amd6/hvm/ebs-gp2/ami-id'\nResources:\n  EC2Instance:\n    Type: AWS::EC2::Instance\n    Properties:\n      InstanceType: !Ref 'InstanceType'\n      SecurityGroups: [!Ref 'InstanceSecurityGroup']\n      KeyName: !Ref 'KeyName'\n      ImageId: !Ref 'LatestAmiId'\n  InstanceSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Enable SSH access\n      SecurityGroupIngress:\n      - IpProtocol: tcp\n        FromPort: 22\n        ToPort: 22\n        CidrIp: !Ref 'SSHCIDR'\nOutputs:\n  InstanceId:\n    Description: InstanceId of the newly created EC2 instance\n    Value: !Ref 'EC2Instance'\n  PublicDNS:\n    Description: Public DNSName of the newly created EC2 instance\n    Value: !GetAtt [EC2Instance, PublicDnsName]\n  PublicIP:\n    Description: Public IP address of the newly created EC2 instance\n    Value: !GetAtt [EC2Instance, PublicIp]\n```", "```\nfrom aws_cdk import core\nimport aws_cdk.aws_ec2 as ec2\nclass MyStack(core.Stack):\n    def __init__(self, scope: core.Construct, id: str, **kwargs) -> None:\n        super().__init__(scope, id, **kwargs)\n        # VPC\n        vpc = ec2.Vpc(self, \"VPC\",\n            nat_gateways=0,\n            subnet_configuration=[ec2.SubnetConfiguration(name=\"public\",subnet_type=ec2.SubnetType.PUBLIC)]\n            )\n        # Get AMI\n        amzn_linux = ec2.MachineImage.latest_amazon_linux(\n            generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n            edition=ec2.AmazonLinuxEdition.STANDARD,\n            virtualization=ec2.AmazonLinuxVirt.HVM,\n            storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE\n            )\n        # Create an EC2 instance\n        instance = ec2.Instance(self, \"Instance\",\n            instance_type=ec2.InstanceType(\"t4g.small\"),\n            machine_image=amzn_linux,\n            vpc = vpc\n        )\n```", "```\nfrom constructs import Construct\nfrom cdktf import App, TerraformStack\nfrom imports.aws import AwsProvider, Instance, SecurityGroup\nclass MyStack(TerraformStack):\n    def __init__(self, scope: Construct, ns: str):\n        super().__init__(scope, ns)\n        # Configure AWS provider\n        aws_provider = AwsProvider(self, 'aws', region='us-east-1')\n        # Create a security group\n        security_group = SecurityGroup(self, 'web-server-sg',\n            name='web-server-sg',\n            ingress=[\n                {\n                    'from_port': 22,\n                    'to_port': 22,\n                    'protocol': 'tcp',\n                    'cidr_blocks': ['0.0.0.0/0'],\n                },\n                {\n                    'from_port': 80,\n                    'to_port': 80,\n                    'protocol': 'tcp',\n                    'cidr_blocks': ['0.0.0.0/0'],\n                },\n            ],\n        )\n        # Create an EC2 instance\n        Instance(self, 'web-server',\n            ami='ami-0c55b159cbfafe1f0',\n            instance_type='t4g.small',\n            security_groups=[security_group.id],\n            user_data=\"\"\"\n                #!/bin/bash\n                echo \"Hello, DevOps People!\" > index.xhtml\n                nohup python -m SimpleHTTPServer 80 &\n            \"\"\"\n        )\napp = App()\nMyStack(app, \"my-stack\")\napp.synth()\n```", "```\nimport pulumi\nfrom pulumi_aws import ec2\n# Create a new security group for the EC2 instance\nweb_server_sg = ec2.SecurityGroup('web-server-sg',\n    ingress=[\n        ec2.SecurityGroupIngressArgs(\n            protocol='tcp',\n            from_port=22,\n            to_port=22,\n            cidr_blocks=['0.0.0.0/0'],\n        ),\n    ],\n)\n# Create the EC2 instance\nweb_server = ec2.Instance('web-server',\n    instance_type='t4g.small',\n    ami='ami-06dd92ecc74fdfb36', # Ubuntu 22.04 LTS\n    security_groups=[web_server_sg.name],\n    tags={\n        'Name': 'web-server',\n        'Environment': 'production',\n    },\n)\n# Export the instance public IP address\npulumi.export('public_ip', web_server.public_ip)\n```", "```\nterraform {\n  required_providers {\n    aws = {\n      source = \"hashicorp/aws\" version = \"~> 4.0\"\n    }\n  }\n}\n# Configure the AWS Provider\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n# Create a VPC\nresource \"aws_vpc\" \"example\" {\n  cidr_block = \"10.0.0.0/16\"\n}\n```", "```\nterraform {\n  required_providers {\n    aws = \">= 3.0.0\"\n  }\n  required_version = \">= 1.0.0\"\n}\n```", "```\nmodule \"aws_ec2_instance\" {\n  source = \"./modules/aws_ec2\"\n  ami            = \"ami-06dd92ecc74fdfb36\"\n  subnet_id      = \"subnet-12345678\"\n  vpc_id         = \"vpc-12345678\"\n  security_group = \"sg-12345678\"\n}\n```", "```\n    module \"example\" {\n    ```", "```\n      source = \"git::https://github.com/example-org/example-module.git\"\n    ```", "```\n    }\n    ```", "```\n    module \"example\" {\n    ```", "```\n      source = \"git::https://github.com/example-org/example-module.git?ref=branch_name\"\n    ```", "```\n    }\n    ```", "```\n    module \"example\" {\n    ```", "```\n      source = \"git::ssh://github.com/example-org/example-module.git?ref=branch_name\"\n    ```", "```\n    }\n    ```", "```\n    module \"example\" {\n    ```", "```\n      source = \"hashicorp/example-module/aws\"\n    ```", "```\n    }\n    ```", "```\n    module \"example\" {\n    ```", "```\n      source = \"hashicorp/example-module/aws\"\n    ```", "```\n      version = \"1.0.0\"\n    ```", "```\n    }\n    ```", "```\n    module \"example\" {\n    ```", "```\n      source = \"s3::https://s3-eu-cental-1.amazonaws.com/example-bucket/example-module.zip\"\n    ```", "```\n    }\n    ```", "```\nterraform {\n  backend \"s3\" {\n    bucket         = \"state-files\"\n    key            = \"terraform.tfstate\"\n    region         = \"eu-central-1\"\n    dynamodb_table = \"terraform\"\n  }\n}\n```", "```\n{\n    \"version\": 3,\n    \"serial\": 1,\n    \"lineage\": \"f763e45d-ba6f-9951-3498-cf5927bc35c7\",\n    \"backend\": {\n        \"type\": \"s3\",\n        \"config\": {\n            \"access_key\": null,\n            \"acl\": null,\n            \"assume_role_policy\": null,\n            \"bucket\": \"terraform-states\",\n            \"dynamodb_endpoint\": null,\n            \"dynamodb_table\": \"terraform-state-lock\",\n            \"encrypt\": true,\n            \"endpoint\": null,\n            \"external_id\": null,\n            \"force_path_style\": null,\n            \"iam_endpoint\": null,\n            \"key\": \"staging/terraform.tfstate\",\n            \"kms_key_id\": null,\n            \"lock_table\": null,\n            \"max_retries\": null,\n            \"profile\": null,\n            \"region\": \"eu-central-1\",\n            \"role_arn\": null,\n            \"secret_key\": null,\n            \"session_name\": null,\n            \"shared_credentials_file\": null,\n            \"skip_credentials_validation\": null,\n            \"skip_get_ec2_platforms\": null,\n            \"skip_metadata_api_check\": null,\n            \"skip_region_validation\": null,\n            \"skip_requesting_account_id\": null,\n            \"sse_customer_key\": null,\n            \"sts_endpoint\": null,\n            \"token\": null,\n            \"workspace_key_prefix\": null\n        },\n        \"hash\": 1619020936\n    },\n    \"modules\": [\n        {\n            \"path\": [\n                \"root\"\n            ],\n            \"outputs\": {},\n            \"resources\": {},\n            \"depends_on\": []\n        }\n    ]\n}\n```", "```\nterraform {\n  required_providers {\n    aws = {\n      source = \"hashicorp/aws\" version = \"~> 4.0\"\n    }\n  }\n}\n```", "```\nadmin@myhome:~$ terraform init\nInitializing the backend...\nInitializing provider plugins...\n- Finding latest version of hashicorp/aws...\n- Installing hashicorp/aws v4.58.0...\n- Installed hashicorp/aws v4.58.0 (signed by HashiCorp)\nTerraform has been successfully initialized!\n```", "```\nadmin@myhome:~$ terraform fmt\n│ Error: Missing attribute separator\n│\n│   on main.tf line 4, in terraform:\n│    3:     aws = {\n│    4:       source = \"hashicorp/aws\" version = \"~> 4.0\"\n│\n│ Expected a newline or comma to mark the beginning of the next attribute.\n```", "```\nterraform {\n  required_providers {\n    aws = {\n      source = \"hashicorp/aws\"\n      version = \"~> 4.0\"\n    }\n  }\n}\n```", "```\nadmin@myhome:~$ terraform plan\nNo changes. Your infrastructure matches the configuration.\nTerraform has compared your real infrastructure against your configuration and found no differences, so no changes are needed.\n```", "```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 4.0\"\n    }\n  }\n}\nprovider \"aws\" {\n  region = \"us-west-2\"\n}\n```", "```\nresource \"aws_instance\" \"vm_example\" {\n  ami           = \"ami-830c94e3\"\n  instance_type = \"t2.micro\"\n  tags = {\n    Name = \"DevOpsGuideTerraformExample\"\n}\n```", "```\nadmin@myhome:~$ terraform plan\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\nTerraform will perform the following actions:\n  # aws_instance.vm_example will be created\n  + resource \"aws_instance\" \"vm_example\" {\n      + ami                                  = \"ami-830c94e3\"\n[...]\n      + tags                                 = {\n          + \"Name\" = \"DevOpsGuideTerraformExample\"\n        }\n      + tags_all                             = {\n          + \"Name\" = \"DevOpsGuideTerraformExample\"\n        }\n      + tenancy                              = (known after apply)\n[...]\n      + vpc_security_group_ids               = (known after apply)\n    }\nPlan: 1 to add, 0 to change, 0 to destroy.\n────────────────────────────────────────────────────────────────────\n```", "```\nadmin@myhome:~$ terraform apply\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\nTerraform will perform the following actions:\n  # aws_instance.vm_example will be created\n  + resource \"aws_instance\" \"vm_example\" {\n      + ami                                  = \"ami-830c94e3\"\n[...]\n      + subnet_id                            = (known after apply)\n      + tags                                 = {\n          + \"Name\" = \"DevOpsGuideTerraformExample\"\n        }\n      + tags_all                             = {\n          + \"Name\" = \"DevOpsGuideTerraformExample\"\n        }\n      + tenancy                              = (known after apply)\n[...]\n      + vpc_security_group_ids               = (known after apply)\n    }\nPlan: 1 to add, 0 to change, 0 to destroy.\nDo you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n  Enter a value: yes\naws_instance.vm_example: Creating...\naws_instance.vm_example: Still creating... [10s elapsed]\naws_instance.vm_example: Still creating... [20s elapsed]\naws_instance.vm_example: Still creating... [30s elapsed]\naws_instance.vm_example: Still creating... [40s elapsed]\n[...]\naws_instance.vm_example: Still creating... [1m20s elapsed]\naws_instance.vm_example: Creation complete after 1m29s [id=i-0a8bee7070b7129e5]\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\n```", "```\nadmin@myhome:~$ terraform graph\ndigraph {\n     compound = \"true\"\n     newrank = \"true\"\n     subgraph \"root\" {\n          \"[root] aws_instance.vm_example (expand)\" [label = \"aws_instance.vm_example\", shape = \"box\"]\n          \"[root] provider[\\\"registry.terraform.io/hashicorp/aws\\\"]\" [label = \"provider[\\\"registry.terraform.io/hashicorp/aws\\\"]\", shape = \"diamond\"]\n          \"[root] aws_instance.vm_example (expand)\" -> \"[root] provider[\\\"registry.terraform.io/hashicorp/aws\\\"]\"\n          \"[root] provider[\\\"registry.terraform.io/hashicorp/aws\\\"] (close)\" -> \"[root] aws_instance.vm_example (expand)\"\n          \"[root] root\" -> \"[root] provider[\\\"registry.terraform.io/hashicorp/aws\\\"] (close)\"\n     }\n}\n```", "```\nterraform import [options] resource_in_code resource_identifier\n```", "```\nterraform import aws_s3_bucket.devopsy_bucket arn:aws:s3:::devopsy-bucket\n```", "```\nadmin@myhome:~$ terraform workspace list\n* default\n```", "```\nadmin@myhome:~$ terraform workspace show\ndefault\n```", "```\nadmin@myhome:~$ terraform workspace new testing\nCreated and switched to workspace \"testing\"!\nYou're now on a new, empty workspace. Workspaces isolate their state,\nso if you run \"terraform plan\" Terraform will not see any existing state\nfor this configuration.\n```", "```\nadmin@myhome:~$ terraform apply\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\nTerraform will perform the following actions:\n  # aws_instance.vm_example will be created\n  + resource \"aws_instance\" \"vm_example\" {\n      + ami                                  = \"ami-830c94e3\"\n[...]\nPlan: 1 to add, 0 to change, 0 to destroy.\nDo you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n  Enter a value: yes\naws_instance.vm_example: Creating...\naws_instance.vm_example: Still creating... [10s elapsed]\naws_instance.vm_example: Still creating... [20s elapsed]\naws_instance.vm_example: Still creating... [30s elapsed]\naws_instance.vm_example: Still creating... [40s elapsed]\naws_instance.vm_example: Still creating... [50s elapsed]\naws_instance.vm_example: Creation complete after 57s [id=i-06cf29fde369218e2]\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\n```", "```\nadmin@myhome:~$ terraform workspace switch default\nSwitched to workspace \"default\".\nadmin@myhome:~$ terraform apply\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\nTerraform will perform the following actions:\n  # aws_instance.vm_example will be created\n  + resource \"aws_instance\" \"vm_example\" {\n[...]\n```", "```\nadmin@myhome:~$ ll\ntotal 40\n-rw-r--r--  1 trochej  staff   159B Mar 21 13:11 main.tf\n-rw-r--r--  1 trochej  staff   158B Mar 21 12:27 providers.tf\n-rw-r--r--  1 trochej  staff   4.4K Mar 21 21:17 terraform.tfstate\n-rw-r--r--  1 trochej  staff   180B Mar 21 21:15 terraform.tfstate.backup\ndrwxr-xr-x  3 trochej  staff    96B Mar 21 21:07 terraform.tfstate.d\nadmin@myhome:~$ ll terraform.tfstate.d\ntotal 0\ndrwxr-xr-x  3 trochej  staff    96B Mar 21 21:20 testing\nadmin@myhome:~$ ll terraform.tfstate.d/testing\ntotal 8\n-rw-r--r--  1 trochej  staff   180B Mar 21 21:18 terraform.tfstate\n```", "```\nresource \"aws_instance\" \"vm_example\" {\n  ami           = \"ami-830c94e3\"\n  instance_type = terraform.workspace == \"default\" ? \"t2.micro\" : \"t2.nano\"\n  tags = {\n    Name = \"DevOpsGuideTerraformExample\"\n}\n```", "```\nadmin@myhome:~$ terraform workspace show\ndefault\nadmin@myhome:~$ terraform plan | grep instance_type\n      + instance_type                        = \"t2.micro\"\nadmin@myhome:~$ terraform workspace select testing\nSwitched to workspace \"testing\".\nadmin@myhome:~$ terraform plan | grep instance_type\n      + instance_type                        = \"t2.nano\"\n```", "```\nvariable \"region\" {\n  type = string\n  default = \"eu-central-1\"\n}\n```", "```\nlocals {\n  azs         = [\"eu-central-1a\", \"eu-central-1b\", \"eu-central-1c\"]\n  cidr_block  = \"10.0.0.0/16\"\n  subnet_bits = 8\n  subnets     = {\n    for idx, az in local.azs : az => {\n      name       = \"${var.environment}-subnet-${idx}\"\n      cidr_block = cidrsubnet(local.cidr_block, local.subnet_bits, idx)\n      availability_zone = az\n    }\n  }\n}\n```", "```\n# This is a single-line comment in HCL\n```", "```\n/*\nThis is a multi-line comment in HCL\nIt can span multiple lines and is often used\nto provide longer explanations or to temporarily disable sections of code.\n*/\n```", "```\nresource \"aws_ec2_instance\" \"example\" {\n  ami           = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t2.micro\"\n  count         = 3\n}\n```", "```\nvariable \"security_groups\" {\n  type = map(object({\n    name        = string\n    description = string\n    ingress     = list(object({\n      from_port   = number\n      to_port     = number\n      protocol    = string\n      cidr_blocks = list(string)\n    }))\n  }))\n}\nresource \"aws_security_group\" \"example\" {\n  for_each = var.security_groups\n  name_prefix = each.value.name\n  description = each.value.description\n  ingress {\n    from_port   = each.value.ingress[0].from_port\n    to_port     = each.value.ingress[0].to_port\n    protocol    = each.value.ingress[0].protocol\n    cidr_blocks = each.value.ingress[0].cidr_blocks\n  }\n}\n```", "```\nresource \"aws_s3_bucket\" \"example\" {\n  bucket = \"example-bucket\"\n  acl    = \"private\"\n  lifecycle {\n    prevent_destroy = true\n  }\n}\n```", "```\nresource \"aws_security_group\" \"example\" {\n  name_prefix = \"example\"\n  ingress {\n    from_port = 22\n    to_port   = 22\n    protocol  = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\nresource \"aws_instance\" \"example\" {\n  ami           = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t2.micro\"\n  depends_on = [aws_security_group.example]\n}\n```", "```\n├── aws\n│   └── eu-central-1\n└── modules\n```", "```\nadmin@myhome:~$ cd modules\nadmin@myhome:~/modules$ mkdir aws_ec2\nadmin@myhome:~/modules$ cd aws_ec2\nadmin@myhome:~/modules/aws_ec2$ touch versions.tf main.tf variables.tf outputs.tf providers.tf\nadmin@myhome:~/modules/aws_ec2$ ls -l\ntotal 0\n-rw-r--r--  1 admin  admin  0 Mar 16 13:02 main.tf\n-rw-r--r--  1 admin  admin  0 Mar 16 13:02 outputs.tf\n-rw-r--r--  1 admin  admin  0 Mar 16 13:02 providers.tf\n-rw-r--r--  1 admin  admin  0 Mar 16 13:02 variables.tf\n-rw-r--r--  1 admin  admin  0 Mar 16 13:02 versions.tf\nadmin@myhome:~/modules/aws_ec2$\n```", "```\nprovider \"aws\" {\n  region = \"eu-central-1\"\n}\n```", "```\nterraform {\n  required_version = \">= 1.0.0\"\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \">= 3.0.0\"\n    }\n  }\n}\n```", "```\nresource \"aws_instance\" \"test_instance\" {\n  ami           = \"ami-1234567890\"\n  instance_type = \"t3.micro\"\n  tags = {\n    Name = \"TestInstance\"\n  }\n}\n```", "```\nadmin@myhome:~/modules/aws_ec2$ cd ../../aws/eu-central-1\nadmin@myhome:~/aws/eu-central-1$ touch versions.tf main.tf variables.tf providers.tf\nadmin@myhome:~/aws/eu-central-1$ ls -l\ntotal 0\n-rw-r--r--  1 admin  admin  0 Mar 16 13:02 main.tf\n-rw-r--r--  1 admin  admin  0 Mar 16 13:02 providers.tf\n-rw-r--r--  1 admin  admin  0 Mar 16 13:02 variables.tf\n-rw-r--r--  1 admin  admin  0 Mar 16 13:02 versions.tf\nadmin@myhome:~/aws/eu-central-1$\n```", "```\nadmin@myhome:~/aws/eu-central-1$ cp ../../modules/aws_ec2/providers.tf .\nadmin@myhome:~/aws/eu-central-1$ cp ../../modules/aws_ec2/versions.tf .\n```", "```\nmodule \"test_instance\" {\n  source = \"../../modules/aws_ec2\"\n}\n```", "```\nadmin@myhome:~/aws/eu-central-1$ terraform init\nInitializing modules...\n- test_instance in ../../modules/aws_ec2\nInitializing the backend...\nTerraform has been successfully initialized!\nYou may now begin working with Terraform. Try running \"terraform plan\" to see\nany changes that are required for your infrastructure. All Terraform commands\nshould now work.\nIf you ever set or change modules or backend configuration for Terraform,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n```", "```\nadmin@myhome:~/aws/eu-central-1$ terraform plan\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\nTerraform will perform the following actions:\n  # module.test_instance.aws_instance.test_instance will be created\n  + resource \"aws_instance\" \"test_instance\" {\n      + ami                                  = \"ami-1234567890\"\n# Some of the output removed for readability\nPlan: 1 to add, 0 to change, 0 to destroy.\n─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n```", "```\ndata \"aws_ami\" \"ubuntu\" {\n  most_recent = true\n  owners = [\"099720109477\"] # Canonical\n  filter {\n    name   = \"name\"\n    values = [\"ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*\"]\n  }\n}\nresource \"aws_instance\" \"test_instance\" {\n  ami           = data.aws_ami.ubuntu.id\n  instance_type = \"t3.micro\"\n  tags = {\n    Name = \"TestInstance\"\n  }\n}\n```", "```\nadmin@myhome:~/aws/eu-central-1$ terraform plan\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\nTerraform will perform the following actions:\n  # module.test_instance.aws_instance.test_instance will be created\n  + resource \"aws_instance\" \"test_instance\" {\n      + ami                                  = \"ami-050096f31d010b533\"\n# Rest of the output removed for readability\n```", "```\ndata \"aws_vpc\" \"default\" {\n  filter {\n    name   = \"isDefault\"\n    values = [\"true\"]\n  }\n}\ndata \"aws_subnets\" \"public\" {\n  filter {\n    name   = \"vpc-id\"\n    values = [data.aws_vpc.default.id]\n  }\n  filter {\n    name   = \"map-public-ip-on-launch\"\n    values = [\"true\"]\n  }\n}\n```", "```\nvariable \"public_subnet_id\" {\n  description = \"Subnet ID we will run our EC2 instance\"\n  type        = string\n}\n```", "```\n│ Error: Missing required argument\n│\n│   on main.tf line 1, in module \"test_instance\":\n│    1: module \"test_instance\" {\n│\n│ The argument \"public_subnet_id\" is required, but no definition was found.\n```", "```\nmodule \"test_instance\" {\n  source = \"../../modules/aws_ec2\"\n  public_subnet_id = data.aws_subnets.public.ids[0]\n}\n```", "```\ndata \"aws_subnet\" \"current\" {\n  id = var.public_subnet_id\n}\n```", "```\nresource \"aws_security_group\" \"allow_ssh\" {\n  name        = \"TestInstanceSG\"\n  description = \"Allow SSH traffic\"\n  vpc_id      = data.aws_subnet.current.vpc_id\n  ingress {\n    description      = \"SSH from the Internet\"\n    from_port        = 22\n    to_port          = 22\n    protocol         = \"tcp\"\n    cidr_blocks      = [\"0.0.0.0/0\"]\n  }\n  egress {\n    from_port        = 0\n    to_port          = 0\n    protocol         = \"-1\"\n    cidr_blocks      = [\"0.0.0.0/0\"]\n    ipv6_cidr_blocks = [\"::/0\"]\n  }\n  tags = {\n    Name = \"TestInstanceSG\"\n  }\n}\n```", "```\nresource \"aws_instance\" \"test_instance\" {\n  ami           = data.aws_ami.ubuntu.id\n  instance_type = \"t3.micro\"\n  security_groups = [aws_security_group.allow_ssh.id]\n  tags = {\n    Name = \"TestInstance\"\n  }\n}\n```", "```\nPlan: 2 to add, 0 to change, 0 to destroy.\n```", "```\nvariable \"ssh_key\" {\n  description = \"SSH key attached to the instance\"\n  type = string\n  default = \"ssh-rsa AAASomeRSAKEY\"\"\n}\n```", "```\nvariable \"ssh_key\" {\n  description = \"SSH key attached to the instance\"\n  type = string\n}\n```", "```\nresource \"aws_key_pair\" \"deployer\" {\n  key_name   = \"ssh_deployer_key\"\n  public_key = var.ssh_key\n}\n```", "```\nresource \"aws_instance\" \"test_instance\" {\n  ami           = data.aws_ami.ubuntu.id\n  instance_type = \"t3.micro\"\n  security_groups = [aws_security_group.allow_ssh.id]\n  key_name = aws_key_pair.deployer.key_name\n  tags = {\n    Name = \"TestInstance\"\n  }\n}\n```", "```\nmodule \"test_instance\" {\n  source = \"../../modules/aws_ec2\"\n  public_subnet_id = data.aws_subnets.public.ids[0]\n  ssh_key          = var.ssh_key\n}\n```", "```\nPlan: 3 to add, 0 to change, 0 to destroy.\n```", "```\noutput \"instance_public_ip\" {\n  value       = aws_instance.test_instance.public_ip\n  description = \"Public IP address of the EC2 instance\"\n}\n```", "```\noutput \"instance_public_ip\" {\n  value       = module.test_instance.instance_public_ip\n  description = \"Public IP address of the instance\"\n}\n```", "```\nPlan: 3 to add, 0 to change, 0 to destroy.\nChanges to Outputs:\n  + instance_public_ip = (known after apply)\n```"]