- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How to Keep Your System Architecture Clean
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will start by exploring how you can muddle up your system landscape
    by not retaining a disciplined approach to implementation and governance. We’ll
    examine the classic Stovepipe anti-pattern, where systems are built in isolation
    with little regard for standards or common abstractions, leading to a fragmented
    and hard-to-maintain architecture. We’ll also look at the Big Ball of Mud anti-pattern,
    characterized by a lack of structure and organization, resulting in an unmaintainable
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll introduce the Architecture as Requirements anti-pattern, a common
    pitfall where architectural decisions are treated as mere requirements without
    considering the broader system context and long-term implications. We’ll delve
    into the consequences of this approach, such as increased technical debt, scalability
    issues, and limited adaptability.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll then discuss how excessive coupling between systems can make them fragile
    and difficult to modify, emphasizing the importance of defining clear boundaries
    and favoring looser integration patterns. We’ll also touch on the challenges of
    org proliferation in Salesforce environments and the need for a well-defined org
    strategy to prevent sprawl and ensure consistency.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the chapter, we’ll highlight the critical role of architectural governance,
    technical standards, and best practices in avoiding these anti-patterns and creating
    robust, maintainable Salesforce systems. We’ll provide insights on how to navigate
    organizational silos, secure stakeholder buy-in, and balance individual requirements
    with long-term architectural sustainability.
  prefs: []
  type: TYPE_NORMAL
- en: In today’s rapidly evolving technological landscape, **artificial intelligence**
    ( **AI** ) and automation play increasingly critical roles in Salesforce architectures.
    As we explore various anti-patterns, we’ll also consider how AI-driven features
    and automated processes can either exacerbate these issues or, when properly implemented,
    help mitigate them. Understanding the interplay between traditional architectural
    concerns and emerging AI capabilities is crucial for creating robust, future-proof
    Salesforce solutions.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have a deep understanding of key architectural
    pitfalls to avoid and strategies to employ when designing and implementing Salesforce
    solutions. You’ll be equipped with the knowledge and skills needed to create systems
    that are scalable, adaptable, and aligned with your organization’s evolving needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How the Stovepipe anti-pattern can leave us with systems that can only work
    in isolation and what you can do to avoid building stovepipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What a Big Ball of Mud is, why a system can deteriorate into a state that fits
    this description, and how you can prevent it from happening to your system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the Architecture as Requirements anti-pattern and its implications
    for Salesforce implementations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How intense coupling makes systems fragile and potentially unusable, and how
    to draw clearer system boundaries that avoid this issue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The challenges of ungoverned org proliferation in Salesforce environments and
    the importance of a well-defined org strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The critical role of architectural governance, standards, and best practices
    in creating maintainable and evolvable Salesforce systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After completing this chapter, you will have a solid grasp of common architectural
    anti-patterns that can afflict Salesforce implementations and strategies to mitigate
    them. You’ll be prepared to lead the charge in establishing a strong architectural
    foundation for your organization’s Salesforce initiatives, ensuring they deliver
    lasting value and support your business objectives.
  prefs: []
  type: TYPE_NORMAL
- en: Muddling up the systems landscape
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The easiest way to muddle up your systems landscape, as we will see, is to go
    ahead with implementation in a local, unstructured, and badly governed way. While
    there are many attractions to small local projects, they very easily deteriorate
    into anti-patterns that have serious negative consequences for your overall enterprise
    architecture. We will start by looking at the classic Stovepipe anti-pattern,
    which is a common outgrowth of such projects, and then look at its organizational
    cousin, *Stovepipe Enterprise* .
  prefs: []
  type: TYPE_NORMAL
- en: Stovepipe
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A stovepipe is a system that is built with no attention to standards or common
    abstractions, leading to a system that may work but is hard to maintain, extend,
    or interoperate with.
  prefs: []
  type: TYPE_NORMAL
- en: An example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: John is the CRM manager at DreamCo, a provider of bespoke travel accessories.
    The company has decided to invest in a small implementation of Salesforce Sales
    Cloud, replacing an old Siebel system that’s been in operation for more than a
    decade. While initially fearful, John has come to be quite excited about the project
    as it promises to fix a number of thorny issues that they’ve been unable to address
    with the old CRM.
  prefs: []
  type: TYPE_NORMAL
- en: DreamCo hires a small local Salesforce consultancy to do the implementation.
    Initially, it is a great success; the sales teams love the new tool, and many
    of the features requested by John are readily implemented. However, after a while,
    progress seems to slow, and the price of changes goes up. DreamCo’s CIO makes
    the assessment that their business requirements are now too complex for the small
    local consultancy to manage and hires a leading Salesforce Summit partner to take
    over.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, DreamCo’s head of customer service decides to commission a
    third Salesforce partner to implement Salesforce Service Cloud for the company’s
    call center. John has been learning a lot about Salesforce during the initial
    period and is starting to get worried that there are no common conventions, standards,
    methodologies, or tools across the different partners or implementations. The
    sales department and the customer service department also seem to use very different
    data models to represent fundamentally the same things.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – DreamCo’s org after the initial implementations](img/B30991_02_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – DreamCo’s org after the initial implementations
  prefs: []
  type: TYPE_NORMAL
- en: John raises these points to the CIO and asks for a budget to hire an architect
    and to do some refactoring on the existing systems to bring them more in line.
    He is told that while his idea is good, it isn’t affordable right now, but he
    should put in a budget request for next year’s budget.
  prefs: []
  type: TYPE_NORMAL
- en: At this time, DreamCo purchases a smaller company that sells travel accessories
    via vending machines in airports. They reportedly have a very strong Salesforce
    implementation, much more advanced than DreamCo’s, including sales, service, and
    field service modules. John is given the task of finding a way to consolidate
    the two Salesforce orgs into one without requiring the two organizations to fundamentally
    change their processes.
  prefs: []
  type: TYPE_NORMAL
- en: John engages with the Summit partner to explore options for the consolidation.
    They come back with a proposal that meets the basic requirement but at a cost
    that is much higher than expected. The partner explains that the excessive technical
    complexity in the DreamCo org makes it very difficult to integrate with the new
    org. Furthermore, they advise against going down the consolidation route and instead
    advise DreamCo to move everyone to the org from the company that has been recently
    acquired and change the processes to make this work without changing the technology.
  prefs: []
  type: TYPE_NORMAL
- en: 'After some internal discussion, DreamCo decides to go ahead with the consolidation
    anyway. Problems start appearing almost right away:'
  prefs: []
  type: TYPE_NORMAL
- en: First, it proves very difficult for the different vendors that need to be involved
    to collaborate effectively, leading to a situation where the lead partner is effectively
    required to reverse-engineer a number of features in order to understand them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, the implementation progress is very slow, and John realistically can
    see no way for the project to complete on time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third, the error rate is very high, and there are many recurring errors on each
    test cycle. All of this is leading toward a project that will be significantly
    over budget, behind schedule, and below expectation on quality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: John starts digging into the detail, and from the various technical people involved
    in the project, he learns a number of disturbing facts. First, basic things such
    as naming conventions are completely different, not only between the DreamCo and
    the NewCo org but also within the DreamCo org; at least three completely different
    sets of conventions exist. In addition, features are implemented using completely
    different methodologies and toolsets, and sometimes the same feature is reimplemented
    in different ways in different parts of the system.
  prefs: []
  type: TYPE_NORMAL
- en: There are also a number of custom fields and objects that exist in subtly different
    duplicated variants in different parts of the system. Finally, a number of third-party
    tools have been used to provide functionality. However, these tools and their
    functions were never properly documented, and no one in the organization knows
    how to use them after the change of vendors. Adding this to the inherent complexity
    involved in finding a common language between the DreamCo and the NewCo orgs,
    most of the technical teams are starting to throw their hands up in despair.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figu\uFEFFre 2.2 – The DreamCo consolidation scenario](img/B30991_02_2.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figu re 2.2 – The DreamCo consolidation scenario
  prefs: []
  type: TYPE_NORMAL
- en: John reports this back to senior management, and the situation escalates into
    a major crisis. Eventually, after much wrangling, DreamCo gives up on consolidating
    the two orgs and decides to leave them in place separately instead for the time
    being, with data consolidated elsewhere for reporting.
  prefs: []
  type: TYPE_NORMAL
- en: The problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: How do you implement an IT system in an organization where departments are siloed,
    power is distributed into individual fiefdoms, technical teams work independently
    of each other, and there is no strong central authority on architecture or technical
    standards? The answer, in general, is the *Stovepipe anti-pattern* . Given the
    prevalence of these organizational characteristics, Stovepipe is one of the most
    common anti-patterns you are likely to encounter as an architect.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s not disregard how hard it is to get around some of these issues. Changing
    organizational structures or cultures can require years of transformation, even
    with senior management support, and even then, many unfortunate practices may
    still linger.
  prefs: []
  type: TYPE_NORMAL
- en: So, when you are an ambitious manager with the need for a new IT system in the
    kind of organization just described, it is very tempting to simply go ahead within
    your own little kingdom and implement something, working with people that you
    personally trust, in a way that works for you, without much consideration for
    the rest of the business. Without strong corporate IT governance and enterprise
    architecture support, there is little most IT departments can do about this.
  prefs: []
  type: TYPE_NORMAL
- en: The Stovepipe anti-pattern, then, does provide a real answer to a real problem,
    as we will discuss in the next section. However, it is an answer that reliably
    leads to unfortunate results.
  prefs: []
  type: TYPE_NORMAL
- en: The proposed solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fundamentally, a stovepipe proposes to solve coordination problems inherent
    in many organizations by building a solution in splendid isolation, not taking
    into account any wider concerns or requirements, using whatever tooling and standards
    the implementing team prefers. That way, you can simply go ahead while short-circuiting
    corporate bureaucracy in the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an attractive solution in a number of ways:'
  prefs: []
  type: TYPE_NORMAL
- en: You do not have to engage in cross-silo collaboration or resolve thorny internal
    political issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your technical teams often love it because they can use whatever tools they
    prefer to get the job done
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It tends to work very well in the short term, quickly delivering on requirements
    and generating local value, often at a very reasonable price point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For organizations without strong central IT leadership, it can be the default
    way to operate, and it may simply become “the way things get done”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we were living in a simpler world, where organizations could compartmentalize
    their operations between discrete groups that didn’t have to collaborate much
    to get things done, and consequently, systems didn’t have to support cross-cutting
    workflows or cross-system integrations, then a stovepipe would actually be a perfectly
    reasonable approach to software development.
  prefs: []
  type: TYPE_NORMAL
- en: However, in practice, most organizations do need most of their systems to work
    across a wide range of departments and use cases, which is when we start to get
    into trouble, as we’ll see in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As previously pointed out, and as we saw in our example, a stovepipe often initially
    works well. For a point solution used by a single team, there isn’t any inherent
    downside to building in this local way. As we saw, issues start to accumulate
    when we have multiple players on the same underlying platform (for example, the
    sales and service organizations we mentioned), when we try to extend the system
    to use cases it wasn’t designed for, and when we need it to play well with other
    external systems.
  prefs: []
  type: TYPE_NORMAL
- en: On Salesforce, it is normal to have many different modules in simultaneous operation
    in the same org that leverage a common data model, user interface, and technical
    configuration. Unfortunately, this makes it particularly easy to end up with stovepipe-type
    problems if you do not implement these modules consistently.
  prefs: []
  type: TYPE_NORMAL
- en: 'Over time, the indicators of a Stovepipe anti-pattern tend to be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An increasing difficulty in understanding the code base, especially for new
    parties working with the system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inconsistent architectural design and implementation patterns in different areas
    of the system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A diminishing user experience and user value due to the increasing inconsistency
    and inflexibility of the system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Great difficulty whenever new requirements have to be implemented
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The system is hard to integrate with other systems in the landscape
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The system is hard to incorporate into global processes; for example, a consolidated
    DevOps pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increasing error rates, both during development and in production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A higher and higher cost of change due to all these factors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fundamental reason a stovepipe tends to deteriorate in this way is due to
    a lack of common standards, practices, patterns, and tooling. Inconsistency increases
    the cognitive load on the technical team, making everything harder and more error-prone,
    as well as raising the learning curve across the board. The original team might
    have understood it, but over time, this understanding will be lost, and the result
    tends to be more inconsistent rather than a concerted effort being made to refactor
    it into a more comprehensible state.
  prefs: []
  type: TYPE_NORMAL
- en: You can profitably compare a team building a stovepipe to a well-functioning
    agile team to understand what goes wrong. An agile team may also work in relative
    isolation with empowered product owners calling the shots. However, they will
    work with standards, practices, patterns, and tools that are accepted and well
    understood in the organization, and they will work with stable interfaces for
    key integrations and common abstractions for crucial system components. That way,
    coordination happens implicitly via that common baseline and you do not end up
    with a stovepipe but, rather, a well-adjusted member of the system landscape.
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The fact is that many organizations are quite siloed, and it therefore becomes
    hard to solve the business-level coordination problems that arise when building,
    implementing, or changing systems. As architects, dealing with these issues should
    be part of our bread-and-butter activities in order to avoid building stovepipe
    systems and ensure that our platforms, such as Salesforce, continue to deliver
    value over the long term.
  prefs: []
  type: TYPE_NORMAL
- en: 'While some of the more transformative things that can be done organizationally
    to break down silos and improve collaboration are often beyond our power, there
    are many things that we can reliably do to improve the situation:'
  prefs: []
  type: TYPE_NORMAL
- en: Define clear architectural patterns and practices that can be used between teams
    to create common abstractions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Put in place conventions for how different things are to be implemented, both
    at the macro level (for example, when to use flows and when to use triggers) and
    micro level, such as a coding guideline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adopt standards for all technical areas, such as reporting and BI or data governance,
    in order to ensure consistency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have strong guidance for creating stable interfaces for cross-system integration,
    as well as integration patterns for different use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Put in place a common methodology for implementation across Salesforce projects
    to ensure consistency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adopt consistent tooling for all elements of the development life cycle to enable
    cross-team and cross-system understanding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enforce these standards and practices vigorously
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We are in a fortunate position as Salesforce architects in that much of this
    work can be taken from good practices already in existence, either established
    by Salesforce themselves or the wider Salesforce community. You can find many
    good resources on the Salesforce Architects website, and Salesforce has also recently
    introduced the **Salesforce Operating, Governance, and Architecture Framework**
    ( **SOGAF** ) to help us understand the best practices for Salesforce governance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – SOGAF elements](img/B30991_02_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – SOGAF elements
  prefs: []
  type: TYPE_NORMAL
- en: However, we always have the responsibility to adopt, adapt, and implement it
    within our own organizations ourselves. This also includes adding business-specific
    standards and practices that are unique to our situation and finding ways of communicating
    the standards and practices in a way that resonates across our organization.
  prefs: []
  type: TYPE_NORMAL
- en: When implementing AI capabilities in Salesforce, be wary of creating AI stovepipes.
    Isolated AI models or predictive analytics tools that don’t integrate well with
    the broader Salesforce ecosystem can lead to fragmented insights and inconsistent
    user experiences. Instead, aim for a cohesive AI strategy that aligns with your
    overall Salesforce architecture, ensuring AI-driven features complement and enhance
    existing processes across the platform.
  prefs: []
  type: TYPE_NORMAL
- en: It should be noted that sometimes standards should be broken. There are cases
    where you need different tools, methods, or patterns to get the job done, but
    you should have a standard to deviate from if you want to avoid ending up building
    stovepipes.
  prefs: []
  type: TYPE_NORMAL
- en: A note on Stovepipe Enterprise
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The material we have discussed on this pattern so far has focused primarily
    on the system level. However, it will not have escaped a more perceptive reader
    that many of the issues that appear on the system level are related to organizational
    issues, particularly the tendency for some organizations to work in silos and
    be unproductively political.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – A landscape of stovepipes making up a stovepipe enterprise](img/B30991_02_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – A landscape of stovepipes making up a stovepipe enterprise
  prefs: []
  type: TYPE_NORMAL
- en: As a result, there’s an organizational-level version of the Stovepipe anti-pattern
    called Stovepipe Enterprise, which focuses on this tendency of organizations to
    produce stovepipe systems due to their structural problems. While we can readily
    acknowledge this anti-pattern, as Salesforce architects, our remit does not usually
    extend to this level of problem, and we have therefore mostly focused on the system
    level in our discussion.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture as Requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The Architecture as* *Requirements* *anti-pattern occurs when organizations
    treat architectural decisions as just another set of requirements to be gathered
    and implemented rather than as a fundamental framework that guides the system’s
    design* *and evolution.*'
  prefs: []
  type: TYPE_NORMAL
- en: An example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sarah Chen, the newly appointed Enterprise Architect at GlobeTech Industries,
    leaned back in her chair and sighed. She had been brought in to help modernize
    the company’s aging CRM system, and the Salesforce implementation project seemed
    like the perfect opportunity to establish a robust, scalable architecture. With
    15 years of experience under her belt, Sarah was known for her meticulous planning
    and ability to see the big picture. However, as she stared at the project timeline
    pinned to her office wall, she couldn’t shake the feeling that things were already
    veering off course.
  prefs: []
  type: TYPE_NORMAL
- en: The kick-off meeting for the Salesforce implementation had been a whirlwind
    of excitement and ambitious goals. Department heads from Sales, Marketing, and
    Customer Service had all presented their wish lists, each more elaborate than
    the last. Sarah had tried to steer the conversation toward establishing overarching
    architectural principles, but her suggestions were met with blank stares and impatient
    nods.
  prefs: []
  type: TYPE_NORMAL
- en: “We don’t have time for all that high-level stuff,” Jack, the Sales Director,
    had said dismissively. “We need to get this system up and running ASAP. Our competitors
    are eating our lunch with their fancy AI-powered sales forecasting.”
  prefs: []
  type: TYPE_NORMAL
- en: Sarah had attempted to explain the importance of a solid architectural foundation,
    but her words seemed to fall on deaf ears. The project manager, Tom, was more
    concerned with ticking off requirements and meeting deadlines than considering
    the long-term implications of their decisions.
  prefs: []
  type: TYPE_NORMAL
- en: As the weeks progressed, Sarah found herself fighting an uphill battle. She
    had drafted a comprehensive architectural vision document, outlining key principles
    for data governance, integration patterns, and scalability considerations. But
    when she presented it to the steering committee, she was met with a mix of confusion
    and indifference.
  prefs: []
  type: TYPE_NORMAL
- en: “This all sounds great, Sarah,” the CIO had said, glancing at his watch, “but
    can you distill this down into a list of requirements we can actually implement?
    We need concrete deliverables, not abstract concepts.”
  prefs: []
  type: TYPE_NORMAL
- en: Frustrated but undeterred, Sarah had tried to work within the confines of the
    project’s requirement-driven approach. She attended sprint planning meetings,
    hoping to inject architectural considerations into the development process. But
    more often than not, she found herself watching helplessly as the team made decisions
    that would have far-reaching consequences for the system’s future flexibility
    and maintainability.
  prefs: []
  type: TYPE_NORMAL
- en: One particularly contentious issue arose around the implementation of an AI-powered
    lead scoring system. The sales team was adamant about having this feature, insisting
    it was crucial for their competitive edge. Sarah recognized the potential value
    but was concerned about how it would be integrated into the overall Salesforce
    architecture.
  prefs: []
  type: TYPE_NORMAL
- en: “We need to carefully consider how this AI system will interact with our existing
    data models,” Sarah had argued during a project meeting. “We should also think
    about the long-term governance of the AI models and how we’ll manage potential
    bias in the algorithms.”
  prefs: []
  type: TYPE_NORMAL
- en: But her concerns were brushed aside. Jack from Sales had already been in talks
    with a third-party vendor, and they were eager to move forward.
  prefs: []
  type: TYPE_NORMAL
- en: “Look, Sarah,” Tom had said, trying to be diplomatic, “I understand your concerns,
    but we’ve got a tight deadline to meet. Let’s just get the system implemented,
    and we can worry about the architectural stuff later.”
  prefs: []
  type: TYPE_NORMAL
- en: Sarah had left the meeting feeling deflated. She knew that treating the AI implementation
    as just another requirement to be checked off would likely lead to problems down
    the line. But without buy-in from the rest of the team, her hands were tied.
  prefs: []
  type: TYPE_NORMAL
- en: As the project progressed, Sarah’s fears began to materialize. The hastily implemented
    lead scoring system was causing performance issues, bogging down the entire Salesforce
    instance during peak usage times. The data model had become a tangled mess, with
    redundant fields and inconsistent naming conventions making it difficult to generate
    accurate reports.
  prefs: []
  type: TYPE_NORMAL
- en: Integration with other systems was becoming a nightmare. The team had opted
    for quick, point-to-point integrations rather than following Sarah’s proposed
    API-first approach. As a result, data inconsistencies were cropping up across
    different departments, and any changes to one system had a ripple effect that
    was hard to predict or control.
  prefs: []
  type: TYPE_NORMAL
- en: User adoption was also suffering. The lack of a coherent architectural vision
    had resulted in a disjointed user experience, with different modules feeling like
    separate applications rather than parts of a unified whole. Sarah had lost count
    of the number of complaints she’d received about inconsistent navigation and confusing
    workflows.
  prefs: []
  type: TYPE_NORMAL
- en: 6 months into the project, things came to a head. The CEO called an emergency
    meeting to address the mounting issues with the Salesforce implementation. Sarah
    sat in the conference room, surrounded by frustrated executives and a demoralized
    project team.
  prefs: []
  type: TYPE_NORMAL
- en: “I thought this new system was supposed to make our lives easier,” the CEO said,
    his voice tinged with disappointment. “Instead, it seems like we’ve just created
    a bigger mess. Can someone please explain how we got here?”
  prefs: []
  type: TYPE_NORMAL
- en: All eyes turned to Sarah. She took a deep breath, knowing that this was her
    chance to finally make her case for the importance of architecture.
  prefs: []
  type: TYPE_NORMAL
- en: “The root of our problems,” Sarah began, “is that we’ve been treating architecture
    as just another set of requirements rather than as the foundational framework
    it should be. We’ve been so focused on delivering individual features that we’ve
    lost sight of the bigger picture.”
  prefs: []
  type: TYPE_NORMAL
- en: 'She went on to explain how the lack of architectural governance had led to
    the current situation: a fragmented system that was difficult to maintain, scale,
    or adapt to changing business needs. She outlined how a proper architectural approach
    could have prevented many of the issues they were facing and could still help
    them course-correct.'
  prefs: []
  type: TYPE_NORMAL
- en: To her surprise, she saw nods of understanding around the room. Even Jack, who
    had been one of the most vocal opponents of her architectural suggestions, looked
    sheepish.
  prefs: []
  type: TYPE_NORMAL
- en: “I guess I was so focused on getting those fancy AI features that I didn’t think
    about how it would all fit together,” he admitted.
  prefs: []
  type: TYPE_NORMAL
- en: The CEO leaned forward, his interest piqued. “So, what do you propose we do
    now, Sarah? Can we salvage this project?”
  prefs: []
  type: TYPE_NORMAL
- en: Sarah felt a glimmer of hope. She quickly outlined a plan to pause new feature
    development and focus on refactoring the existing implementation to align with
    proper architectural principles. She proposed establishing an Architecture Review
    Board to ensure future decisions were made with the overall system architecture
    in mind.
  prefs: []
  type: TYPE_NORMAL
- en: “It won’t be easy,” she cautioned, “and it might mean some short-term pain.
    But if we don’t address these architectural issues now, they’ll only become more
    expensive and difficult to fix down the line.”
  prefs: []
  type: TYPE_NORMAL
- en: To her relief, the room was receptive. The CEO gave his approval for Sarah’s
    plan, and she left the meeting feeling a mix of vindication and renewed determination.
  prefs: []
  type: TYPE_NORMAL
- en: Over the next few months, Sarah led the charge in restructuring the Salesforce
    implementation. It was challenging work, requiring long hours and difficult conversations.
    But gradually, she saw the system transform into something more cohesive and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: The AI-powered lead scoring system was re-implemented, this time with proper
    consideration for data flows and model governance. The team adopted a more standardized
    approach to integrations, creating a flexible API layer that could accommodate
    future changes more easily. Data models were refactored to eliminate redundancies
    and improve consistency.
  prefs: []
  type: TYPE_NORMAL
- en: As the architecture solidified, Sarah noticed a change in the team’s dynamics.
    Developers began to appreciate the clarity that came with a well-defined architectural
    framework. Project managers found it easier to plan and estimate work. Even the
    business stakeholders, who had initially been skeptical of the “architectural
    stuff,” started to see the benefits in terms of improved system performance and
    adaptability.
  prefs: []
  type: TYPE_NORMAL
- en: A year after that pivotal meeting, Sarah stood in front of the company’s annual
    all-hands meeting, presenting the success story of the Salesforce implementation.
    The system was now a point of pride for GlobeTech, with high user adoption rates
    and a newfound ability to quickly roll out new features and adapt to changing
    market conditions.
  prefs: []
  type: TYPE_NORMAL
- en: “The lesson we learned,” Sarah said as she concluded her presentation, “is that
    architecture isn’t just a set of abstract principles or another box to tick off
    in our project plans. It’s the foundation that allows us to build systems that
    truly serve our business needs, both now and in the future.”
  prefs: []
  type: TYPE_NORMAL
- en: The problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The core problem the Architecture as Requirements anti-pattern tries to address
    is the challenge of designing a system architecture that meets diverse and sometimes
    conflicting stakeholder requirements.
  prefs: []
  type: TYPE_NORMAL
- en: In complex projects with multiple stakeholders, each group often has its own
    priorities, technology preferences, and functional demands. Balancing these competing
    needs while ensuring overall system coherence and long-term viability is a significant
    architectural challenge.
  prefs: []
  type: TYPE_NORMAL
- en: Without a clear architectural vision and guiding principles, project teams may
    fall into the trap of treating architecture as just another set of requirements
    to be gathered and implemented piecemeal. They focus on fulfilling individual
    stakeholder demands without considering the bigger picture and the long-term implications
    of their design decisions.
  prefs: []
  type: TYPE_NORMAL
- en: 'This approach can lead to several issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lack of system-level thinking** : By treating architecture as a collection
    of discrete requirements, teams lose sight of the overall system context and fail
    to consider critical aspects such as performance, scalability, maintainability,
    and interoperability'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Short-term focus** : Prioritizing immediate stakeholder needs over long-term
    architectural sustainability can result in quick fixes and band-aid solutions
    that accumulate technical debt and hinder future growth'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inconsistent user experience** : When each module or feature is designed
    in isolation without a cohesive architectural vision, users may encounter inconsistent
    interfaces, navigation, and functionality across the system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration challenges** : Piecemeal architecture often leads to a proliferation
    of point-to-point integrations and custom interfaces, making the system brittle
    and difficult to maintain over time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Limited adaptability** : A fragmented architecture lacking clear abstractions
    and **separation of concerns** ( **SoC** ) makes it harder to accommodate changes
    and add new features as business requirements evolve'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall, issues leading to Architecture as Requirements are common, and therefore,
    it occurs with some frequency.
  prefs: []
  type: TYPE_NORMAL
- en: The proposed solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The flawed solution proposed by the Architecture as Requirements anti-pattern
    is to treat architectural decisions as just another set of requirements to be
    gathered and implemented incrementally, without a cohesive overarching vision.
  prefs: []
  type: TYPE_NORMAL
- en: Under this approach, project teams engage with stakeholders to collect their
    specific functional and technical requirements, often prioritizing them based
    on individual needs and preferences. They then attempt to design and build the
    system incrementally, addressing each requirement as it arises without much consideration
    for the broader architectural implications.
  prefs: []
  type: TYPE_NORMAL
- en: This solution may seem appealing initially, as it appears to be responsive to
    stakeholder needs and allows for quick progress on individual features. Stakeholders
    feel heard and see their specific demands being met, creating a sense of satisfaction
    and buy-in.
  prefs: []
  type: TYPE_NORMAL
- en: However, this approach fails to recognize that architecture is more than just
    a sum of its parts. It is a foundational framework that shapes the system’s structure,
    behavior, and evolution. Treating architecture as a collection of isolated requirements
    ignores the critical role it plays in ensuring system-wide quality attributes,
    such as performance, scalability, security, and maintainability.
  prefs: []
  type: TYPE_NORMAL
- en: The proposed solution also tends to favor short-term gains over long-term sustainability.
    By prioritizing immediate stakeholder needs and rushing to implement features
    without a well-thought-out architectural plan, teams accrue technical debt and
    create a fragmented, inconsistent system that becomes increasingly difficult to
    maintain and extend over time.
  prefs: []
  type: TYPE_NORMAL
- en: The results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The consequences of falling into the Architecture as Requirements anti-pattern
    can be severe and far-reaching. Over time, the system becomes a complex web of
    tightly coupled components, custom integrations, and inconsistent design patterns,
    making it fragile, inflexible, and expensive to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some common results include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Technical debt accumulation** : As the system grows without a coherent architectural
    vision, quick fixes and ad hoc solutions pile up, leading to an accumulation of
    technical debt. This debt manifests as convoluted code, performance bottlenecks,
    and increased maintenance efforts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability and performance issues** : The lack of a well-designed architecture
    often leads to scalability and performance problems as the system struggles to
    handle increasing loads and data volumes. Inefficient resource utilization, excessive
    database queries, and poorly optimized code contribute to sluggish system performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration complexity** : Without clear architectural boundaries and standardized
    interfaces, integrations between different modules or external systems become
    a tangled mess of custom code and brittle connections. Changes in one part of
    the system can have unpredictable ripple effects, making integrations fragile
    and error-prone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Limited reusability and maintainability** : The absence of a modular, loosely
    coupled architecture hinders code reusability and maintainability. Developers
    struggle to understand and navigate the code base, leading to increased development
    time and a higher risk of introducing bugs when making changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resistance to change** : As the system becomes more complex and entangled,
    it becomes increasingly difficult to introduce new features or adapt to changing
    business requirements. The architecture’s rigidity and lack of clear SoC make
    modifications time-consuming, costly, and prone to unintended side effects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User frustration and workarounds** : Inconsistent user experiences, performance
    issues, and limited functionality can lead to user frustration and dissatisfaction.
    Users may resort to manual workarounds or alternative tools to circumvent the
    system’s limitations, undermining the intended benefits and efficiency gains.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Increased costs and delayed time-to-market (TTM)** : The cumulative effect
    of technical debt, maintenance challenges, and development inefficiencies can
    significantly increase costs and delay the delivery of new features and enhancements.
    The organization may find itself investing more resources in firefighting and
    system overhauls rather than focusing on innovation and business value delivery.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The allure of AI can sometimes lead organizations to treat AI capabilities as
    simple feature requirements rather than architectural considerations. This approach
    can result in haphazard AI implementations that fail to leverage Salesforce’s
    native AI capabilities or integrate poorly with existing data models and business
    processes. To avoid this, approach AI initiatives with a holistic architectural
    mindset, considering data flows, model governance, and the long-term implications
    of AI-driven decision-making within your Salesforce ecosystem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ultimately, the Architecture as Requirements anti-pattern can lead to a system
    that fails to meet its intended goals, hinders organizational agility, and becomes
    a burden rather than an enabler for the business.
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To avoid falling prey to the Architecture as Requirements anti-pattern and
    establish a solid foundation for a successful Salesforce implementation, consider
    the following better approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Start with a clear architectural vision** : Begin by defining a clear architectural
    vision and guiding principles that align with the organization’s goals, values,
    and long-term objectives. This vision should articulate key quality attributes
    and design principles that will shape the system’s structure and behavior.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Engage architects early** : Involve experienced architects from the outset
    of the project to provide strategic guidance and ensure that architectural considerations
    are factored into requirements gathering and design decisions. Architects should
    collaborate closely with stakeholders to understand their needs while keeping
    the bigger picture in mind.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Establish architecture as a foundation** : Treat architecture as a key enabler
    and foundation for the system, not just another set of requirements. Define clear
    architectural patterns, principles, and guidelines upfront to inform design decisions
    throughout the project. Communicate the rationale behind these architectural choices
    to stakeholders and development teams.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use reference architectures and best practices** : Leverage established reference
    architectures, design patterns, and best practices specific to Salesforce. These
    proven approaches can provide a solid starting point and help ensure that the
    system follows recommended architectural principles and guidelines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Balance requirements and architecture** : Strike a balance between fulfilling
    individual requirements and maintaining a coherent, sustainable architecture.
    Be prepared to make trade-offs and prioritize requirements based on their alignment
    with the overall architectural goals. Continuously assess the impact of requirements
    on the system’s architecture and make informed decisions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Embrace modularity and loose coupling** : Design the system with modularity
    and loose coupling in mind. Break down complex requirements into smaller, self-contained
    components with well-defined interfaces. This approach promotes reusability, maintainability,
    and easier integration between different parts of the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Invest in architectural documentation** : Create and maintain clear, concise
    architectural documentation that communicates the system’s structure, key components,
    and design decisions. This documentation serves as a reference for development
    teams, stakeholders, and future maintainers, ensuring a shared understanding of
    the system’s architecture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuously evaluate and refine the architecture** : Treat architecture
    as a living asset that evolves alongside the system. Regularly review and assess
    the architecture to identify areas for improvement, address emerging challenges,
    and align with changing business needs. Be proactive in refactoring and updating
    the architecture as necessary to keep it relevant and effective.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Foster collaboration and communication** : Encourage open communication and
    collaboration among architects, development teams, and stakeholders. Create forums
    for discussing architectural concerns, sharing knowledge, and making collective
    decisions. Foster a culture of continuous learning and improvement where team
    members can contribute ideas and insights to enhance the system’s architecture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Align architecture with organizational goals** : Ensure that the system’s
    architecture aligns with the organization’s broader goals and strategies. Consider
    factors such as scalability, performance, security, and future growth when making
    architectural decisions. Regularly communicate the value and benefits of a well-designed
    architecture to stakeholders and decision-makers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By adopting these better solutions and embracing a proactive, holistic approach
    to architecture, organizations can lay the groundwork for a robust, scalable,
    and maintainable Salesforce implementation that delivers long-term value and supports
    the business’s evolving needs.
  prefs: []
  type: TYPE_NORMAL
- en: A Big Ball of Mud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Big Ball of Mud is a system that has lost all internal structure and coherence
    and can only be partially understood by its original creator(s) and not at all
    by anyone else.
  prefs: []
  type: TYPE_NORMAL
- en: An example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: DreamCo has put adding more functionality to their Salesforce implementation
    on hold for a few months. During this time, John has been working on a plan to
    refactor key parts of the system to make it more maintainable. He’s been consulting
    a lot of technical people from the different teams that have been involved since
    day one, and he finally thinks he has found a way forward.
  prefs: []
  type: TYPE_NORMAL
- en: However, shortly before John has a meeting to pitch his ideas to the CIO, things
    change rapidly on the ground. DreamCo has recently hired Ricky, an experienced
    architect from one of the big consultancies, to help figure out how to integrate
    the DreamCo and NewCo orgs. While he has generally been supportive of John’s effort
    to get refactoring started, it clearly hasn’t been at the top of his agenda.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, he proposes to focus DreamCo’s efforts on the Salesforce side into
    an integration project to combine the two orgs. He proposes to do much of the
    technical work himself, using a third-party tool that he has previously used on
    other projects. The integration will be point-to-point, but it will reliably ferry
    the data needed back and forth between the two environments and end the complex
    manual processes that the business has had to use to bridge the gap in the interim.
  prefs: []
  type: TYPE_NORMAL
- en: Given the pressure on the business, the CIO decides to go ahead with Ricky’s
    plan, and he implements the solution over a 2-month period more or less single-handedly.
    John is told that his refactoring project will get the go-ahead after the integration
    is complete. However, once it’s done, the CIO gives the go-ahead to a new set
    of feature upgrades on the existing platform for both the Sales and Service teams.
    John is told that the business can’t wait for any new features and that instead,
    he will need to lead the development of a new logistics app that the business
    wants to build in a separate Salesforce org, with Ricky acting as the technical
    lead.
  prefs: []
  type: TYPE_NORMAL
- en: The new app is built quickly in the new environment but John remains concerned
    that it is being built with very little structure or discipline. The business
    seems to love what they’re seeing, so John relents and lets things go ahead, supporting
    where he can. While the app was meant to be an experimental prototype, the business
    decides it wants to put it into production as is. The upgrade to the main org
    takes a long time to get done, but the day for the production deployment finally
    approaches.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – The DreamCo Big Ball of Mud architecture](img/B30991_02_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – The DreamCo Big Ball of Mud architecture
  prefs: []
  type: TYPE_NORMAL
- en: DreamCo will deploy the new upgrades as well as the new logistics app into the
    production org in a single deployment over a weekend. All hands are on deck, and
    there is a positive buzz around the release as many of these features, as well
    as the new app, are avidly anticipated. The last weeks are slightly marred by
    Ricky handing in his notice, as he has decided to take an offer from another consultancy.
    However, he promises to document and hand over everything before he leaves, so
    no one is overly concerned.
  prefs: []
  type: TYPE_NORMAL
- en: On the weekend it is going live, John is on call and avidly awaiting the results.
    The initial deployment runs into some issues and the full deployment doesn’t actually
    make it into production before Sunday afternoon. The test team start their smoke
    test, and it is obvious that there are major problems with the release. Major
    functional areas don’t seem to be working, the integration between the DreamCo
    and the NewCo org starts experiencing errors, and many test scripts that were
    working in the main org or the logistics org fail completely. Questions are raised
    about the quality of UAT testing, but the fact is that the release has failed.
  prefs: []
  type: TYPE_NORMAL
- en: The team works frantically overnight to get the system back to a reasonable
    state before the business starts using it in the morning. Communications go out
    stating that the release had to be pulled back. DreamCo’s board calls the CIO
    for a consultation on what went wrong. However, no one can work it out, and for
    both the logistics app and the DreamCo-to-NewCo integration, it seems to be impossible
    to fix any issues now that Ricky has gone, despite knowledge transfer sessions
    having taken place.
  prefs: []
  type: TYPE_NORMAL
- en: After a week of finger-pointing back and forth, the CIO is fired and a replacement
    comes in. He commissions a detailed technical audit of the current system from
    a consultancy that he personally trusts. After consultation with John and many
    other DreamCo stakeholders, they conclude that the architecture and code quality
    on many components is so weak and the structure so incomprehensible that the only
    option is to rebuild significant parts of the system.
  prefs: []
  type: TYPE_NORMAL
- en: The problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A Big Ball of Mud is what happens when all internal structure within a system
    collapses and what you are left with is a big ball of undifferentiated mud that
    is impossible to understand or change. In contrast to a stovepipe, which can work
    quite well within its own limited sphere, a Big Ball of Mud is effectively a throwaway
    system. You might be able to keep it running with enough firefighting, but you’ll
    never make it work well or significantly change it. It is a response to a system
    that has such great pressure to deliver functionality in several areas that going
    along with any idea that seems to deliver the functionality in question seems
    to be a good idea.
  prefs: []
  type: TYPE_NORMAL
- en: It happens usually either as a result of ignorance or desperation, as no one
    intentionally sets out to create a big mess. You do, however, frequently get Big
    Balls of Mud from systems that have been created due to one person or a couple
    of people working independently without supervision, clear documentation, or good
    decision-making processes, as with Ricky in our example.
  prefs: []
  type: TYPE_NORMAL
- en: You could say that a Big Ball of Mud shares the Nike approach to implementation,
    “ *Just Do It.* ” While this may be a good principle in athletics, it rarely works
    out well in enterprise IT.
  prefs: []
  type: TYPE_NORMAL
- en: The proposed solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The solution proposed by a Big Ball of Mud, in general, is to put your trust
    in some team or person to just get something done with no regard for the consequences.
    It is often attractive in pressured situations because it gives you a seemingly
    good way out of your predicament without having to pay the costs of disciplined
    development or implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Big Balls of Mud often evolve from systems such as stovepipes, when all discipline
    and control are lost. A stovepipe, if it is true to its own internal structure,
    can work well on its own for a long period of time, but once you give up on this
    internal discipline, it quickly devolves into a Big Ball of Mud.
  prefs: []
  type: TYPE_NORMAL
- en: Big Balls of Mud are also often created from experimental or prototype systems
    that are elevated to production status, as with the logistics app in our previous
    example. The results of a system reaching the Big Ball of Mud stage are usually
    catastrophic, as we’ll discuss in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: The results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A Big Ball of Mud is an end state for a system. Once the system reaches a state
    of total internal disorganization, the only way to keep it running is to have
    one or two people who still partially understand how it works continuously firefighting
    to keep it going. You won’t be able to make changes that are anything other than
    trivial, nor will it be realistic to refactor the system into a reasonable state.
    It would be cheaper to rebuild the key modules, which is what tends to eventually
    happen with these kinds of systems.
  prefs: []
  type: TYPE_NORMAL
- en: As noted in the introduction, some people like to be heroes and also like the
    job security that comes from being indispensable, so the period during which a
    Big Ball of Mud can remain operational is surprisingly long in some cases.
  prefs: []
  type: TYPE_NORMAL
- en: The fundamental solution to the Big Ball of Mud scenario is technical discipline
    in various forms, which we’ll discuss next.
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In many ways, the better solution to the Big Ball of Mud anti-pattern is similar
    to those we listed for the Stovepipe anti-pattern. If you have good technical
    standards and practices in place and they are followed in practice, then you will
    not end up with a Big Ball of Mud.
  prefs: []
  type: TYPE_NORMAL
- en: More fundamentally, though, the Big Ball of Mud scenario reveals a profound
    lack of technical discipline and respect for craftsmanship within the executing
    organization. If your technical culture does not value good practice, architecture,
    well-structured code, and abstractions, but instead values cowboys just getting
    something up and running, no matter how quick and dirty, then you will be prone
    to end up with Big Balls of Mud.
  prefs: []
  type: TYPE_NORMAL
- en: To be sure, there are situations where quick and dirty is good enough. If you’re
    writing code for an ephemeral marketing campaign, a research project, or a throwaway
    prototype, then you don’t have to care so much about whether the system you create
    can evolve. However, for most of us, most of the time, this is not the case.
  prefs: []
  type: TYPE_NORMAL
- en: Too much coupling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Designing systems with low coupling and high coherence is one of the foundational
    aims of software architects of any stripe. Coupling, however, can be difficult
    to avoid, and in many cases, a level of coupling can be justified as a trade-off
    with other concerns. In this section, however, we will see how intense coupling
    can become an anti-pattern that seriously affects your system architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Intense coupling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Intense coupling is an anti-pattern where one or more systems in the system
    landscape fail to maintain clear boundaries with other coupled systems, leading
    to a fragile and unmaintainable state.
  prefs: []
  type: TYPE_NORMAL
- en: An example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: BigCo has a mid-size Sales Cloud implementation that they use for managing their
    opportunity pipeline. However, all financial processes, quoting, and order management
    are done in their main SAP system, which has served as the source of truth for
    the business for a number of years.
  prefs: []
  type: TYPE_NORMAL
- en: The sales department love their Salesforce system and would like to carry out
    the entire ordering and fulfillment process through Salesforce, leaving the SAP
    system to purely financial processes. The finance and supply chain teams think
    this idea is not only misguided but risks compromising the strong grip BigCo has
    had on its data for years.
  prefs: []
  type: TYPE_NORMAL
- en: After some internal political battles, the CFO and VP of Sales reach a compromise.
    The order and fulfillment process will stay in SAP, along with the financial processes,
    but quoting will move end-to-end to Salesforce using Salesforce CPQ. That way,
    the sales team will rarely need to go into SAP and can stay primarily in the Salesforce
    interface that they love, but the other teams still keep control of all master
    data. Anitha, a Salesforce architect, is tasked with making this compromise into
    reality.
  prefs: []
  type: TYPE_NORMAL
- en: 'She quickly discovers some major issues with this approach:'
  prefs: []
  type: TYPE_NORMAL
- en: First, all products and prices are kept directly in SAP, and there is no appetite
    for moving this to Salesforce; therefore, it will need to be accessed from SAP
    as part of the quoting process, and only stub data can be replicated to Salesforce.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, a number of business logic checks happen for quotes during the business
    process to check that they fall within acceptable corporate parameters. Anitha
    looks into moving these checks to Salesforce as part of the implementation. While
    it is possible for many, some of these checks require access to data in SAP’s
    financial module and can’t be done on Salesforce. These will need to be accessed
    via an integration to SAP too.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third, a number of additional services need to be called as part of the quoting
    process to get current product availability and possible delivery dates for inclusion
    on the quote. These will have to be called via SAP, as they are already exposed
    via web services on this platform, and BigCo does not have the integration resources
    to make a direct connection to Salesforce or to connect via other middleware.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.6 – The BigCo integration scenario](img/B30991_02_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – The BigCo integration scenario
  prefs: []
  type: TYPE_NORMAL
- en: Anitha sounds the alarm and says that the degree to which Salesforce depends
    on SAP makes her doubt that the new system will perform to the high expectations
    of the sales team. She recommends looking into a different approach where there
    is a cleaner division between what is on SAP and what is on Salesforce. However,
    the Finance and Supply Chain teams rule out any process changes as part of the
    implementation, and therefore she has to go ahead despite her doubts.
  prefs: []
  type: TYPE_NORMAL
- en: The initial workshops with users go well, and the functional requirements of
    the sales team seem to be a good fit for what Salesforce has to offer. However,
    Anitha is still concerned that the final product will underperform due to the
    coupling to SAP.
  prefs: []
  type: TYPE_NORMAL
- en: During the UAT testing of the solution, some concerns are raised about the performance
    and responsiveness of the user interface, and there are also complaints that testing
    had to be interrupted several times due to maintenance or outages on SAP.
  prefs: []
  type: TYPE_NORMAL
- en: These concerns are not enough to hold back the go-live, however, as the team
    expects a boost in performance from moving to the production environment, and
    the basic functional aspects of the solution are acceptable.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, the problems are exacerbated and not alleviated by the move to
    production. Performance decreases significantly, and sales users frequently have
    to wait for minutes to see a response from SAP. In addition, there are numerous
    periods during the day when SAP runs large scheduled jobs that stop sales users
    from doing anything.
  prefs: []
  type: TYPE_NORMAL
- en: The team works frantically to try to improve the situation. However, after a
    couple of weeks, the team has to throw in the towel, and the sales team goes back
    to producing their quotes in SAP.
  prefs: []
  type: TYPE_NORMAL
- en: The problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Intense coupling happens when the boundaries between systems or modules are
    blurred to such an extent that one depends entirely on the other for its operation.
    In general, as architects, we strive to reduce coupling while maintaining coherence.
    However, coupling – even tight coupling – can be a necessary trade-off with other
    requirements in some situations.
  prefs: []
  type: TYPE_NORMAL
- en: Intense coupling, however, is the most extreme version of this trade-off. At
    the system level, it happens when system boundaries are not respected, and you
    try to design a solution that incorporates and replicates significant parts of
    another system, using the other system as a synchronous backend.
  prefs: []
  type: TYPE_NORMAL
- en: The same pattern can repeat at the module level, where you have one module replicating
    all the functionality of another in a different context, calling intensely on
    functionality from the original module to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Intense coupling is often done for good reason. There are usually real problems
    with the functionality of legacy systems or modules that are proving hard to address
    and that would seemingly be much simpler to solve in a different system or module
    context.
  prefs: []
  type: TYPE_NORMAL
- en: As we’ll see in the following section, the proposal that intense coupling makes
    to address such issues can be very compelling, which is what makes it a classic
    anti-pattern.
  prefs: []
  type: TYPE_NORMAL
- en: The proposed solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Intense coupling is a proposition that promises that you can have your cake
    and eat it too. By using APIs or SDKs, or using some other similar mechanism,
    you can get all the functionality and business logic that you are used to. Additionally,
    you can have it work within a new user experience that will address your changing
    requirements, and you won’t have to go through the pain of introducing a new system
    or making substantial changes to your legacy ones. As with all cake-related propositions
    of this kind, you should be quite skeptical about the truth of these surface claims.
  prefs: []
  type: TYPE_NORMAL
- en: Salesforce is particularly prone to this anti-pattern because it has a user
    interface that many users love, and the business is used to things being fairly
    easy to implement on the platform. It is, therefore, common for a request to be
    made for parts of other systems to be incorporated into the Salesforce platform.
  prefs: []
  type: TYPE_NORMAL
- en: This can be done successfully if you are careful about the boundaries, are open
    to making the necessary process changes, and have a strong integration capability
    in place. However, it is also quite easy to end up in an intensely coupled scenario.
  prefs: []
  type: TYPE_NORMAL
- en: The results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Intense coupling tends to result in an end-to-end user experience that is characterized
    by fragility, instability, and low performance. This happens for the fairly obvious
    reason that an intensely coupled system is, for all intents and purposes, a single-user-facing
    system encompassing two underlying technical systems. It is a distributed system
    that has not been built with the awareness that it is a distributed system.
  prefs: []
  type: TYPE_NORMAL
- en: The more you need to rely on the other system, the more frequently you need
    to call out and access its functionality. This means you have an issue whenever
    either system has an issue in any of the areas that are part of the solution.
  prefs: []
  type: TYPE_NORMAL
- en: You also get the brittleness that comes from any changes to relevant functionality
    on either side of the system being likely to result in required changes to your
    intensely coupled system. This means that you will likely see more errors and
    issues over time than you’d expect.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, the cumulative wait for the functionality going back and forth
    between the two sides of the intensely coupled system leads to reduced performance,
    sometimes to the extent that the system becomes unusable.
  prefs: []
  type: TYPE_NORMAL
- en: On the module level, the consequences tend to be more about reduced maintainability,
    lower flexibility, and higher cost of change, but performance issues will also
    occasionally creep in.
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While the problems that lead to intense coupling are often legitimate, there
    are many things you as an architect can do to avoid a situation resulting in an
    anti-pattern. The following list provides a starting point:'
  prefs: []
  type: TYPE_NORMAL
- en: Keep a keen eye on system and module boundaries, and ensure that if they shift,
    the cut is made at a maintainable point.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When designing a cross-boundary process, be very clear on system responsibilities
    and the integration architecture that will support those processes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adapt processes so that they work seamlessly with the revised system boundaries.
    Don’t try to compensate with extra technical work if the processes don’t fit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid redundant functionality in multiple systems. Be clear on where an engagement
    with a given set of functionalities is done.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If what you are building is, in fact, a distributed system, be mindful of that
    fact and use low-coupling integration patterns, such as event-based integration,
    to achieve your goals. Resist calls for large amounts of synchronous integration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As AI becomes more prevalent in Salesforce implementations, be cautious of creating
    intense coupling between AI models and core Salesforce functionality. While tight
    integration can provide powerful capabilities, it can also lead to brittle systems
    that are difficult to maintain or evolve. Strive for a modular approach to AI
    integration, using well-defined interfaces and data contracts to allow for flexibility
    and easier updates to AI models without disrupting core Salesforce operations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having now discussed a number of patterns that are applicable to Salesforce,
    as well as many other technologies, we will now move on to our first unique Salesforce
    anti-pattern, Ungoverned Org Proliferation.
  prefs: []
  type: TYPE_NORMAL
- en: Org complications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the Salesforce world, you don’t have to manage your underlying infrastructure,
    which frees you from a good number of potential temptations that can lead to anti-patterns.
    However, the way that you structure environments with different orgs in the Salesforce
    world is subject to a number of anti-patterns in its own right.
  prefs: []
  type: TYPE_NORMAL
- en: Ungoverned Org Proliferation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ungoverned Org Proliferation is a Salesforce-specific anti-pattern due to a
    lack of defined org strategy, which leaves you with an ever-increasing number
    of unaligned orgs, eventually becoming architecturally unmanageable.
  prefs: []
  type: TYPE_NORMAL
- en: An example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Miranda has been hired as BigCo’s new CRM Migration Manager. The company has
    had a business unit approach to IT and does not have any centralized CRM capabilities
    at this point. Instead, three units use Salesforce mainly for opportunity management,
    and there are at least 15 other systems in use from a variety of vendors, as well
    as in-house developed systems in play across departments and geographies.
  prefs: []
  type: TYPE_NORMAL
- en: Miranda has been tasked with consolidating this landscape, using Salesforce
    as the primary platform. There is a general aim to consolidate systems and standardize
    processes, but there are few central resources to drive this transformation.
  prefs: []
  type: TYPE_NORMAL
- en: Miranda plans a strategy to consolidate the three existing Salesforce orgs.
    She has previously been through org consolidation projects in Salesforce and doesn’t
    think there is enough value to go through that pain in this case.
  prefs: []
  type: TYPE_NORMAL
- en: She will therefore create three variants of a core Salesforce implementation,
    dispersed across three geographies, and map the other CRM systems to whichever
    of these three is the best fit. She will implement reporting processes across
    these three orgs using the corporate data warehouse that already imports Salesforce
    data from two of the orgs.
  prefs: []
  type: TYPE_NORMAL
- en: However, as she starts to plan for migrations, she faces massive pushback from
    business users on her plans. While most teams are quite willing to move to Salesforce,
    users in France and China, two of BigCo’s largest markets, demand their own unique
    and segregated environments.
  prefs: []
  type: TYPE_NORMAL
- en: According to the country leads, this is a legal requirement and not up for discussion.
    Miranda escalates the question to the Legal department but is unable to get an
    answer out of them quickly. She therefore has to accept the separate orgs for
    France and China.
  prefs: []
  type: TYPE_NORMAL
- en: BigCo’s largest market is the UK, and the country lead there, once he understands
    that having a separate environment is a possibility, demands that they are also
    given a unique Salesforce org that can be customized specifically to their requirements.
    The UK operation is highly efficient but also unique, and there is no way it would
    work with the same processes as the rest of the business, the argument goes.
  prefs: []
  type: TYPE_NORMAL
- en: Once again, Miranda finds herself politically outgunned and has to assent to
    these demands. However, this leads to a new opening of the floodgates. Product
    development argue that their process is distinct enough to merit a separate environment,
    and similar requests from other departments and geographical units follow.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the day, Miranda will be looking at a dozen different Salesforce
    orgs, with many having quite distinctive processes implemented. This is still
    preferable to the 15 totally different systems in play before Salesforce, but
    far from the original goals. At least, she finally has a way forward.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – The BigCo org overview](img/B30991_02_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – The BigCo org overview
  prefs: []
  type: TYPE_NORMAL
- en: Now, a long-awaited report comes in from a leading management consultancy on
    how to optimize BigCo’s global sales process. This promises major global efficiency
    in sales and sales operations by moving to a globally standardized process for
    all field sales. It is implicitly assumed that this global process will be implemented
    on Salesforce.
  prefs: []
  type: TYPE_NORMAL
- en: Miranda asks around to see whether anyone is willing to change their position
    on the implementation plans in light of the new objectives. The answer is a resounding
    no. She decides that enough is enough and hands in her notice the following day.
  prefs: []
  type: TYPE_NORMAL
- en: The problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ungoverned Org Proliferation happens in organizations that like Salesforce but
    don’t like standardizing processes, user interfaces, or other similar requirements
    and don’t have any strong architectural governance around their Salesforce platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Problems that lead to Ungoverned Org Proliferation tend to be found within
    the following scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: Different business units or geographies have different processes and can’t agree
    to a compromise that can be implemented
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different stakeholders have radically different views of how the user experience
    should be structured and can’t agree on a reasonable compromise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different stakeholders have radically different views on the data model to be
    implemented and can’t agree on a reasonable compromise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are certain critical features that are needed in some business units but
    can’t be used in others – different integration backends, for example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different parts of the business are working with different Salesforce partners
    that are pushing them in different directions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are perceived or real security differences between different parts of
    the business that strongly impact the Salesforce implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are perceived or real legal compliance regime differences between different
    parts of the business that strongly impact the Salesforce implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It’s worth noting that in the old days, Salesforce actively encouraged organizations
    to try out the software in a number of different places, the so-called *seed and
    grow* strategy, which worked very well for many years. In large organizations
    with a long history with Salesforce, you can sometimes still see this legacy living
    on within rather unstructured org landscapes.
  prefs: []
  type: TYPE_NORMAL
- en: The proposed solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The proposed solution to the problems leading to Ungoverned Org Proliferation
    is to give everyone who wants it their own Salesforce org and let them get on
    with it. This is attractive because it reduces coordination issues and alignment
    problems and allows easier resolution of thorny compliance issues. It also lets
    powerful stakeholders get things in their own way.
  prefs: []
  type: TYPE_NORMAL
- en: There are different variants and degrees of this anti-pattern, some of which
    are relatively benign or even beneficial. In our previous example, some of the
    asks are probably entirely legitimate and should have been part of a systematically
    evaluated org strategy. Product development processes, for instance, are often
    configured in a separate org from the one used for Sales and Service, and sometimes
    there are real compliance headaches that necessitate multiple orgs.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s be clear. There’s nothing wrong with a multi-org strategy; it can both
    be the right architectural choice and work well in practice. However, with Ungoverned
    Org Proliferation, we are talking about a multi-org operation without any strategy
    or architecture supporting it, and that tends to result in serious negative consequences,
    as we’ll discuss in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: The results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The result of Ungoverned Org Proliferation is a sprawl of orgs that cannot be
    controlled from the organization’s center. How serious a problem that is will
    depend on the nature of the organizational culture and how much central control
    it requires.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, you will find some or all of these disadvantages present in an
    ungoverned org landscape:'
  prefs: []
  type: TYPE_NORMAL
- en: Difficulties in implementing processes that cut across business units or geographical
    divisions, as the Salesforce implementations vary by data model and components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Difficulty aligning data for reporting, as the data model and the meaning of
    fields will be locally defined
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complexity developing reports, even when data is brought together, due to the
    semantic gap between different uses of data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrations often have to be replicated in several different places and can
    be hard to control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Licensing can get expensive, as some users need multiple licenses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowledge of the systems is heavily distributed, and getting an overview of
    any particular aspect can be hard to find, as technical teams also mostly work
    in a local context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instituting any kind of global governance can be near impossible due to a combination
    of the aforementioned factors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As org consolidation is hard, once you find yourself in this situation, it can
    be difficult to undo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This list is, to a large extent, simply a more extreme version of the downsides
    of a multi-org strategy, which makes sense, of course. As we will cover in the
    following section, the key takeaway to avoid this anti-pattern is to clearly define
    your org strategy upfront, along with mitigations for the inevitable downsides.
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It will come as no surprise at this point to anyone familiar with Salesforce
    architecture that the most important element for avoiding this anti-pattern is
    to have a clearly defined org strategy. This org strategy should clearly define
    when, if ever, it is permissible to spin up a new Salesforce org, as well as provide
    clear patterns to use for integration and data consolidation between orgs.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of good resources you can use to learn about org strategy.
    I recommend you start with SOGAF, which can be found on the Salesforce Architects
    site: [https://architect.salesforce.com/well-architected/overview](https://architect.salesforce.com/well-architected/overview)
    . This is a comprehensive view from the horse’s mouth, although it won’t cover
    all the details that may be required.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – SOGAF models](img/B30991_02_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – SOGAF models
  prefs: []
  type: TYPE_NORMAL
- en: In addition, in what is becoming a refrain within this book, you should define
    a common framework for governance, ideally rooted in a **Center of Excellence**
    ( **CoE** ) that has a global oversight of all things Salesforce and that is followed
    by all orgs. This framework should also include common standards and practices
    and, ideally, a level of common tooling that must be used in every environment.
  prefs: []
  type: TYPE_NORMAL
- en: When developing your org strategy, consider the implications of AI and **machine
    learning** ( **ML** ) capabilities across different orgs. Inconsistent AI implementations
    or siloed predictive models can lead to conflicting insights and decision-making
    processes across the organization. Aim for a unified AI governance model that
    ensures consistent data quality, model performance, and ethical considerations
    across all Salesforce orgs, while still allowing for necessary customizations
    to meet specific business unit needs.
  prefs: []
  type: TYPE_NORMAL
- en: The opposite of this pattern
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is worth noting that this anti-pattern has an exact opposite, which I like
    to call a Procrustean Bed, in honor of the Greek mythological figure Procrustes.
  prefs: []
  type: TYPE_NORMAL
- en: This anti-pattern tries to fit all the requirements into a single org across
    geographies, business functions, and business units. While many organizations
    do well with a single global org, there are times when multiple orgs are needed
    to avoid creating a subpar user experience for key stakeholders, make genuinely
    diverse and business-critical processes work, or solve real legal issues.
  prefs: []
  type: TYPE_NORMAL
- en: That is to say, org strategy is a balancing act, and you can go too far in either
    direction, turning it into an anti-pattern. You should refer to the SOGAF models
    mentioned previously to find the right way forward in your scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing the takeaways
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will abstract a bit from the specific patterns and, instead,
    try to pull out the wider learning points that you can use in your day-to-day
    work as a Salesforce architect or when preparing for the CTA Review Board.
  prefs: []
  type: TYPE_NORMAL
- en: 'When architecting Salesforce solutions, you should be mindful of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Many organizations are internally siloed and political, and, in these kinds
    of organizations, the default mode of operation may be to develop stovepipes or
    Big Balls of Mud.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To avoid this, you as a Salesforce architect need to push strongly for countermeasures.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will include pushing for strong architecture governance and coordination
    on Salesforce projects, including establishing relevant governance forums to coordinate
    activities and the right technical standards and practices to ensure everyone
    is building in a consistent way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to secure enough business support for these initiatives to make them
    enforceable when things get hectic; this will require careful cultivation and
    management of relevant stakeholders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design your systems with common abstractions – for instance, by basing different
    modules on a common package of shared functionality. This will encourage technical
    consistency between projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having strong governance about common elements shared between different Salesforce
    projects, such as Hero objects that are used by nearly any Salesforce solution,
    is necessary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These must be used consistently and have clear ownership, or you will end up
    with a mess in your data model and, most likely, also in your automations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t have fuzzy boundaries between systems. Make it clear what processing needs
    to happen where, and if the boundaries have to change, make sure it is accompanied
    by process change to avoid intense-coupling scenarios.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Favor simpler integration patterns where possible. Favor asynchronous integration
    patterns over synchronous ones where possible. This helps limit coupling.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a clearly defined org strategy that defines when, if ever, it is appropriate
    to create a new production org.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that relevant stakeholders are consulted before any new org is created.
    For instance, you can make it subject to approval by a Design Authority or an
    Architecture Governance board.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that common abstractions, standards, practices, and tools are also used
    in any new orgs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be mindful of the Architecture as Requirements anti-pattern and ensure that
    architecture is treated as a guiding framework, not just a set of requirements
    to be implemented.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuously evaluate and refine the architecture to keep it aligned with evolving
    business needs and technology trends.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Foster a culture of collaboration and knowledge sharing among architects, developers,
    and stakeholders to ensure architectural best practices are widely understood
    and followed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In preparing for the CTA Review Board, you should be mindful of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Always include appropriate governance structures to ensure that you have a structured
    approach to implementation. These may include a CoE, an **Architecture Governance
    Forum** , and a **Project Management** **Office** ( **PMO** ).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also worth mentioning the importance of common patterns, practices, and
    tools as a way to coordinate implementation activities between teams and ensure
    maintainability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is often risk associated with stakeholder management if there are multiple
    different departments or business units involved. As we have seen, bad stakeholder
    management can be a major contributing factor in selecting an anti-pattern.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design a clear system landscape with easy-to-understand roles between the different
    systems. Avoid having lots of overlap between systems when it comes to core functionality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider carefully how the different elements in your solution, both on- and
    off-platform, should interact in a way that doesn’t introduce a stovepipe such
    as isolation for some elements. Your solution should present itself as a coherent
    whole.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid unnecessary coupling between systems, and avoid especially strong dependencies
    between systems where it isn’t absolutely critical to the functional experience.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Favor asynchronous integration patterns that reduce coupling if there isn’t
    a direct need for synchronous communication.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should always have an org strategy, you should state it upfront, and you
    should be able to defend it from questioning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be careful not to veer into having either too many orgs that will be extremely
    difficult to govern effectively or a single org in a scenario that has a strong
    impetus toward splitting, such as highly variable processes or definite legal
    and compliance requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In any case, be prepared to say how you will mitigate issues associated with
    your org strategy, as no scenario is ever clear-cut, and there will be trade-offs
    to consider.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlight the importance of defining a clear architectural vision and principles
    early on to guide design decisions throughout the project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discuss the role of architects in balancing individual requirements with overall
    architectural coherence and sustainability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain how embracing modularity, loose coupling, and clear abstractions can
    help create more adaptable and maintainable Salesforce systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emphasize the value of continuous architectural evaluation and refinement to
    keep the system aligned with changing business needs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discuss strategies for fostering collaboration and knowledge sharing among team
    members to promote architectural best practices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have now covered the material for this chapter and are ready to proceed.
    First, however, we will summarize our learning.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored several anti-patterns that can arise when organizations
    fail to take a disciplined, architecture-driven approach to Salesforce implementations.
  prefs: []
  type: TYPE_NORMAL
- en: We started by examining the Stovepipe anti-pattern, where systems are built
    in isolation with little regard for standards or common abstractions, leading
    to a landscape of disconnected, hard-to-maintain applications. We then looked
    at the Big Ball of Mud anti-pattern, characterized by a lack of structure and
    organization, resulting in an unmaintainable system.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we introduced the Architecture as Requirements anti-pattern, a common
    pitfall where architectural decisions are treated as mere requirements without
    considering the broader system context and long-term implications. We explored
    the consequences of this approach, such as increased technical debt, scalability
    issues, and limited adaptability.
  prefs: []
  type: TYPE_NORMAL
- en: We also discussed the dangers of intense coupling between systems and modules,
    highlighting the importance of clear boundaries and favoring looser integration
    patterns to maintain system stability and flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we touched on the challenges of org proliferation in Salesforce environments
    and the need for a well-defined org strategy and governance model to prevent sprawl
    and ensure consistency across implementations.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the chapter, we emphasized the critical role of architecture governance,
    technical standards, and best practices in avoiding these anti-patterns. We stressed
    the importance of securing business support, fostering collaboration, and striking
    a balance between individual requirements and long-term architectural sustainability.
  prefs: []
  type: TYPE_NORMAL
- en: By understanding these anti-patterns and following the guidance provided, Salesforce
    architects can create more robust, maintainable, and evolvable systems that deliver
    lasting value to their organizations. The key is to approach architecture proactively,
    think holistically, and continuously refine and adapt the system to meet changing
    business needs.
  prefs: []
  type: TYPE_NORMAL
