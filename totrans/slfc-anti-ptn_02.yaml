- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: How to Keep Your System Architecture Clean
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何保持系统架构的整洁
- en: This chapter will start by exploring how you can muddle up your system landscape
    by not retaining a disciplined approach to implementation and governance. We’ll
    examine the classic Stovepipe anti-pattern, where systems are built in isolation
    with little regard for standards or common abstractions, leading to a fragmented
    and hard-to-maintain architecture. We’ll also look at the Big Ball of Mud anti-pattern,
    characterized by a lack of structure and organization, resulting in an unmaintainable
    system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将从探讨如何通过缺乏实施和治理的规范性方法来混乱你的系统架构开始。我们将审视经典的“烟囱”反模式，在这种模式中，系统是孤立建设的，几乎不考虑标准或共同的抽象，导致架构碎片化且难以维护。我们还将讨论“大泥球”反模式，它的特点是缺乏结构和组织，最终导致无法维护的系统。
- en: Next, we’ll introduce the Architecture as Requirements anti-pattern, a common
    pitfall where architectural decisions are treated as mere requirements without
    considering the broader system context and long-term implications. We’ll delve
    into the consequences of this approach, such as increased technical debt, scalability
    issues, and limited adaptability.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍“架构即需求”反模式，这是一种常见的陷阱，即将架构决策仅仅视为需求，而没有考虑更广泛的系统背景和长期影响。我们将深入探讨这种方法的后果，如技术债务增加、可扩展性问题和适应性有限等。
- en: We’ll then discuss how excessive coupling between systems can make them fragile
    and difficult to modify, emphasizing the importance of defining clear boundaries
    and favoring looser integration patterns. We’ll also touch on the challenges of
    org proliferation in Salesforce environments and the need for a well-defined org
    strategy to prevent sprawl and ensure consistency.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论系统之间过度耦合如何使系统变得脆弱且难以修改，并强调定义清晰边界和倾向于采用更松散集成模式的重要性。我们还将涉及Salesforce环境中组织繁殖的挑战，以及为了防止蔓延并确保一致性，制定明确的组织战略的必要性。
- en: Throughout the chapter, we’ll highlight the critical role of architectural governance,
    technical standards, and best practices in avoiding these anti-patterns and creating
    robust, maintainable Salesforce systems. We’ll provide insights on how to navigate
    organizational silos, secure stakeholder buy-in, and balance individual requirements
    with long-term architectural sustainability.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将强调架构治理、技术标准和最佳实践在避免这些反模式和创建强大、可维护的Salesforce系统中的关键作用。我们将提供关于如何应对组织孤岛、确保利益相关者的支持，以及如何平衡个别需求与长期架构可持续性之间的见解。
- en: In today’s rapidly evolving technological landscape, **artificial intelligence**
    ( **AI** ) and automation play increasingly critical roles in Salesforce architectures.
    As we explore various anti-patterns, we’ll also consider how AI-driven features
    and automated processes can either exacerbate these issues or, when properly implemented,
    help mitigate them. Understanding the interplay between traditional architectural
    concerns and emerging AI capabilities is crucial for creating robust, future-proof
    Salesforce solutions.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今快速发展的技术环境中，**人工智能** (**AI**) 和自动化在Salesforce架构中扮演着越来越关键的角色。在我们探索各种反模式的过程中，我们还将考虑AI驱动的功能和自动化流程如何加剧这些问题，或者在正确实施的情况下，如何帮助缓解这些问题。理解传统架构问题和新兴AI能力之间的相互作用，对于创建强大、未来-proof的Salesforce解决方案至关重要。
- en: By the end of this chapter, you’ll have a deep understanding of key architectural
    pitfalls to avoid and strategies to employ when designing and implementing Salesforce
    solutions. You’ll be equipped with the knowledge and skills needed to create systems
    that are scalable, adaptable, and aligned with your organization’s evolving needs.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将深刻理解需要避免的关键架构陷阱，并了解在设计和实施Salesforce解决方案时可以采用的策略。你将掌握创建可扩展、可适应、并与组织不断变化的需求对接的系统所需的知识和技能。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: How the Stovepipe anti-pattern can leave us with systems that can only work
    in isolation and what you can do to avoid building stovepipes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 烟囱反模式如何让系统只能在孤立环境中工作，以及你可以做些什么来避免构建烟囱
- en: What a Big Ball of Mud is, why a system can deteriorate into a state that fits
    this description, and how you can prevent it from happening to your system
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大泥球反模式是什么，为什么系统会退化到这种状态，以及如何防止你的系统陷入这种境地
- en: Exploring the Architecture as Requirements anti-pattern and its implications
    for Salesforce implementations
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索“架构即需求”反模式及其对Salesforce实施的影响
- en: How intense coupling makes systems fragile and potentially unusable, and how
    to draw clearer system boundaries that avoid this issue
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强耦合如何使系统脆弱且可能无法使用，以及如何划定更清晰的系统边界以避免此问题
- en: The challenges of ungoverned org proliferation in Salesforce environments and
    the importance of a well-defined org strategy
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Salesforce环境中没有治理的组织增长问题以及制定清晰组织策略的重要性
- en: The critical role of architectural governance, standards, and best practices
    in creating maintainable and evolvable Salesforce systems
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构治理、标准和最佳实践在创建可维护、可演进的Salesforce系统中的关键作用
- en: After completing this chapter, you will have a solid grasp of common architectural
    anti-patterns that can afflict Salesforce implementations and strategies to mitigate
    them. You’ll be prepared to lead the charge in establishing a strong architectural
    foundation for your organization’s Salesforce initiatives, ensuring they deliver
    lasting value and support your business objectives.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，你将牢牢掌握常见的架构反模式，这些反模式可能会影响Salesforce实施，并了解应对这些问题的策略。你将准备好领导团队为组织的Salesforce项目建立强大的架构基础，确保这些项目提供持久的价值并支持你的业务目标。
- en: Muddling up the systems landscape
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混乱的系统景观
- en: The easiest way to muddle up your systems landscape, as we will see, is to go
    ahead with implementation in a local, unstructured, and badly governed way. While
    there are many attractions to small local projects, they very easily deteriorate
    into anti-patterns that have serious negative consequences for your overall enterprise
    architecture. We will start by looking at the classic Stovepipe anti-pattern,
    which is a common outgrowth of such projects, and then look at its organizational
    cousin, *Stovepipe Enterprise* .
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 混乱系统景观的最简单方式，正如我们将看到的，是以本地、无结构、治理不善的方式进行实施。虽然小型本地项目有许多吸引力，但它们很容易变成反模式，对整体企业架构产生严重的负面影响。我们将首先讨论经典的垂直烟囱反模式，这是这类项目的常见后果，然后看它的组织对等物——*垂直烟囱企业*。
- en: Stovepipe
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 垂直烟囱
- en: A stovepipe is a system that is built with no attention to standards or common
    abstractions, leading to a system that may work but is hard to maintain, extend,
    or interoperate with.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直烟囱是一个系统，它的构建没有考虑标准或共同的抽象，导致系统可能能够运行，但难以维护、扩展或与其他系统互操作。
- en: An example
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个例子
- en: John is the CRM manager at DreamCo, a provider of bespoke travel accessories.
    The company has decided to invest in a small implementation of Salesforce Sales
    Cloud, replacing an old Siebel system that’s been in operation for more than a
    decade. While initially fearful, John has come to be quite excited about the project
    as it promises to fix a number of thorny issues that they’ve been unable to address
    with the old CRM.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: John是DreamCo的CRM经理，这是一家定制旅行配件的供应商。公司决定投资实施一个小型Salesforce Sales Cloud系统，取代已经运行超过十年的旧Siebel系统。虽然最初有些担心，但John对于这个项目变得相当兴奋，因为它承诺解决一些他们用旧CRM系统无法解决的棘手问题。
- en: DreamCo hires a small local Salesforce consultancy to do the implementation.
    Initially, it is a great success; the sales teams love the new tool, and many
    of the features requested by John are readily implemented. However, after a while,
    progress seems to slow, and the price of changes goes up. DreamCo’s CIO makes
    the assessment that their business requirements are now too complex for the small
    local consultancy to manage and hires a leading Salesforce Summit partner to take
    over.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: DreamCo雇佣了一家小型本地Salesforce咨询公司来进行实施。最初，这项工作取得了巨大成功；销售团队喜欢这个新工具，John要求的许多功能也得到了迅速实现。然而，过了一段时间，进展似乎变得缓慢，变更的成本也上涨了。DreamCo的CIO评估认为，他们的业务需求现在已经过于复杂，本地小型咨询公司无法管理，于是聘请了一家领先的Salesforce
    Summit合作伙伴来接管。
- en: At the same time, DreamCo’s head of customer service decides to commission a
    third Salesforce partner to implement Salesforce Service Cloud for the company’s
    call center. John has been learning a lot about Salesforce during the initial
    period and is starting to get worried that there are no common conventions, standards,
    methodologies, or tools across the different partners or implementations. The
    sales department and the customer service department also seem to use very different
    data models to represent fundamentally the same things.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，DreamCo的客户服务负责人决定委托第三家Salesforce合作伙伴为公司呼叫中心实施Salesforce Service Cloud。在最初的阶段，John已经学到了很多Salesforce知识，并开始担心不同合作伙伴或实施之间没有共同的约定、标准、方法论或工具。销售部门和客户服务部门似乎也使用了非常不同的数据模型来表示基本相同的内容。
- en: '![Figure 2.1 – DreamCo’s org after the initial implementations](img/B30991_02_1.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1 – 初步实施后的DreamCo组织结构](img/B30991_02_1.jpg)'
- en: Figure 2.1 – DreamCo’s org after the initial implementations
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – 初步实施后的DreamCo组织结构
- en: John raises these points to the CIO and asks for a budget to hire an architect
    and to do some refactoring on the existing systems to bring them more in line.
    He is told that while his idea is good, it isn’t affordable right now, but he
    should put in a budget request for next year’s budget.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: John 将这些问题提给了首席信息官，并请求预算来雇佣一名架构师，并对现有系统进行一些重构，以使它们更加一致。他被告知，虽然他的想法很好，但目前无法承担，但他应该为明年的预算提出预算请求。
- en: At this time, DreamCo purchases a smaller company that sells travel accessories
    via vending machines in airports. They reportedly have a very strong Salesforce
    implementation, much more advanced than DreamCo’s, including sales, service, and
    field service modules. John is given the task of finding a way to consolidate
    the two Salesforce orgs into one without requiring the two organizations to fundamentally
    change their processes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，DreamCo 收购了一家较小的公司，该公司通过机场自动售货机销售旅游配件。该公司 reportedly 拥有非常强大的 Salesforce 实施，比
    DreamCo 更为先进，包括销售、服务和现场服务模块。John 的任务是找到一种方法，将这两个 Salesforce 组织合并成一个，而不要求两个组织从根本上改变他们的流程。
- en: John engages with the Summit partner to explore options for the consolidation.
    They come back with a proposal that meets the basic requirement but at a cost
    that is much higher than expected. The partner explains that the excessive technical
    complexity in the DreamCo org makes it very difficult to integrate with the new
    org. Furthermore, they advise against going down the consolidation route and instead
    advise DreamCo to move everyone to the org from the company that has been recently
    acquired and change the processes to make this work without changing the technology.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: John 与 Summit 合作伙伴进行沟通，探讨合并的选项。他们提出了一个满足基本要求的方案，但成本远高于预期。合作伙伴解释说，DreamCo 组织中的技术复杂性过高，导致与新组织的整合非常困难。此外，他们建议不要走合并的路线，而是建议
    DreamCo 将所有人转移到最近收购的公司的组织中，并调整流程以使其正常运作，而不改变技术。
- en: 'After some internal discussion, DreamCo decides to go ahead with the consolidation
    anyway. Problems start appearing almost right away:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一些内部讨论，DreamCo 决定还是继续进行合并。然而，问题几乎立刻就开始出现：
- en: First, it proves very difficult for the different vendors that need to be involved
    to collaborate effectively, leading to a situation where the lead partner is effectively
    required to reverse-engineer a number of features in order to understand them.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，涉及的不同供应商之间的协作非常困难，导致了一个局面：主导合作伙伴实际上需要逆向工程许多功能，以便理解它们。
- en: Second, the implementation progress is very slow, and John realistically can
    see no way for the project to complete on time.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，实施进展非常缓慢，John 现实地认为项目无法按时完成。
- en: Third, the error rate is very high, and there are many recurring errors on each
    test cycle. All of this is leading toward a project that will be significantly
    over budget, behind schedule, and below expectation on quality.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三，错误率非常高，每个测试周期都会出现许多重复的错误。所有这些都在朝着一个项目发展，这个项目将显著超出预算，延迟进度，并且质量远低于预期。
- en: John starts digging into the detail, and from the various technical people involved
    in the project, he learns a number of disturbing facts. First, basic things such
    as naming conventions are completely different, not only between the DreamCo and
    the NewCo org but also within the DreamCo org; at least three completely different
    sets of conventions exist. In addition, features are implemented using completely
    different methodologies and toolsets, and sometimes the same feature is reimplemented
    in different ways in different parts of the system.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: John 开始深入调查细节，从项目中涉及的各种技术人员那里，他得知了一些令人担忧的事实。首先，基本的命名约定完全不同，不仅在 DreamCo 和 NewCo
    组织之间不同，甚至在 DreamCo 组织内部也存在至少三种完全不同的约定。此外，功能的实现使用了完全不同的方法和工具集，有时相同的功能在系统的不同部分以不同的方式重新实现。
- en: There are also a number of custom fields and objects that exist in subtly different
    duplicated variants in different parts of the system. Finally, a number of third-party
    tools have been used to provide functionality. However, these tools and their
    functions were never properly documented, and no one in the organization knows
    how to use them after the change of vendors. Adding this to the inherent complexity
    involved in finding a common language between the DreamCo and the NewCo orgs,
    most of the technical teams are starting to throw their hands up in despair.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的不同部分还存在一些自定义字段和对象，它们在不同的地方以细微不同的重复形式存在。最后，许多第三方工具被用来提供功能。然而，这些工具及其功能从未得到适当的文档化，在供应商更换后，组织中没有人知道如何使用它们。再加上DreamCo和NewCo两个组织之间找到共同语言所带来的内在复杂性，大多数技术团队开始绝望地举起双手。
- en: "![Figu\uFEFFre 2.2 – The DreamCo consolidation scenario](img/B30991_02_2.jpg)"
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2 – DreamCo 合并场景](img/B30991_02_2.jpg)'
- en: Figu re 2.2 – The DreamCo consolidation scenario
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – DreamCo 合并场景
- en: John reports this back to senior management, and the situation escalates into
    a major crisis. Eventually, after much wrangling, DreamCo gives up on consolidating
    the two orgs and decides to leave them in place separately instead for the time
    being, with data consolidated elsewhere for reporting.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰将此报告给高级管理层，情况升级成一场重大危机。最终，在经过长时间的争执后，DreamCo 放弃了合并两个组织的计划，决定暂时将它们分别保留，并将数据在其他地方合并用于报告。
- en: The problem
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题
- en: How do you implement an IT system in an organization where departments are siloed,
    power is distributed into individual fiefdoms, technical teams work independently
    of each other, and there is no strong central authority on architecture or technical
    standards? The answer, in general, is the *Stovepipe anti-pattern* . Given the
    prevalence of these organizational characteristics, Stovepipe is one of the most
    common anti-patterns you are likely to encounter as an architect.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如何在一个部门独立、权力分散到各个封建领地、技术团队彼此独立且没有强有力的架构或技术标准中央权威的组织中实施IT系统？通常的答案是*烟囱式反模式*。鉴于这些组织特征的普遍存在，"烟囱式"反模式是你作为架构师最常遇到的反模式之一。
- en: Let’s not disregard how hard it is to get around some of these issues. Changing
    organizational structures or cultures can require years of transformation, even
    with senior management support, and even then, many unfortunate practices may
    still linger.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们不要忽视解决这些问题的困难。即使有高级管理层的支持，改变组织结构或文化可能需要数年的转型，即便如此，许多不幸的做法仍可能存在。
- en: So, when you are an ambitious manager with the need for a new IT system in the
    kind of organization just described, it is very tempting to simply go ahead within
    your own little kingdom and implement something, working with people that you
    personally trust, in a way that works for you, without much consideration for
    the rest of the business. Without strong corporate IT governance and enterprise
    architecture support, there is little most IT departments can do about this.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当你是一个雄心勃勃的经理，在这样的组织中需要一个新的IT系统时，直接在你自己小小的王国里推进并实施某些东西，与那些你个人信任的人一起工作，以符合你需求的方式进行，而不太考虑其他部门，确实很有诱惑力。没有强有力的公司IT治理和企业架构支持，大多数IT部门对此无能为力。
- en: The Stovepipe anti-pattern, then, does provide a real answer to a real problem,
    as we will discuss in the next section. However, it is an answer that reliably
    leads to unfortunate results.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，"烟囱式"反模式确实为一个真实的问题提供了答案，我们将在下一节中讨论。但它是一个可靠地导致不幸结果的答案。
- en: The proposed solution
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提议的解决方案
- en: Fundamentally, a stovepipe proposes to solve coordination problems inherent
    in many organizations by building a solution in splendid isolation, not taking
    into account any wider concerns or requirements, using whatever tooling and standards
    the implementing team prefers. That way, you can simply go ahead while short-circuiting
    corporate bureaucracy in the process.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从根本上讲，"烟囱式"解决方案试图通过在孤立的环境中构建解决方案来解决许多组织中固有的协调问题，而不考虑更广泛的关注点或需求，使用实施团队偏好的任何工具和标准。这样，你可以直接进行操作，同时绕过公司内部的官僚主义。
- en: 'This is an attractive solution in a number of ways:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个在许多方面都很有吸引力的解决方案：
- en: You do not have to engage in cross-silo collaboration or resolve thorny internal
    political issues
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不必参与跨部门合作或解决棘手的内部政治问题。
- en: Your technical teams often love it because they can use whatever tools they
    prefer to get the job done
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的技术团队通常很喜欢它，因为他们可以使用任何他们偏好的工具来完成工作
- en: It tends to work very well in the short term, quickly delivering on requirements
    and generating local value, often at a very reasonable price point
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在短期内通常效果很好，能够迅速满足需求并创造局部价值，通常价格也非常合理
- en: For organizations without strong central IT leadership, it can be the default
    way to operate, and it may simply become “the way things get done”
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于没有强大中央IT领导力的组织来说，它可能是默认的操作方式，并且可能会变成“事情的做法”
- en: If we were living in a simpler world, where organizations could compartmentalize
    their operations between discrete groups that didn’t have to collaborate much
    to get things done, and consequently, systems didn’t have to support cross-cutting
    workflows or cross-system integrations, then a stovepipe would actually be a perfectly
    reasonable approach to software development.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们生活在一个更简单的世界里，组织能够将其操作划分为彼此独立、不需要太多协作即可完成任务的不同小组，系统也不需要支持跨工作流或跨系统集成，那么烟囱式模式实际上是一个完全合理的软件开发方法。
- en: However, in practice, most organizations do need most of their systems to work
    across a wide range of departments and use cases, which is when we start to get
    into trouble, as we’ll see in the next section.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，实际上，大多数组织确实需要让他们的系统跨多个部门和用例协同工作，这时问题就开始显现，正如我们在下一节中将看到的那样。
- en: The results
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结果
- en: As previously pointed out, and as we saw in our example, a stovepipe often initially
    works well. For a point solution used by a single team, there isn’t any inherent
    downside to building in this local way. As we saw, issues start to accumulate
    when we have multiple players on the same underlying platform (for example, the
    sales and service organizations we mentioned), when we try to extend the system
    to use cases it wasn’t designed for, and when we need it to play well with other
    external systems.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，正如我们在示例中看到的，烟囱模式通常最初运行良好。对于一个由单一团队使用的特定解决方案，以这种本地方式构建并没有什么固有的缺点。正如我们所看到的，当我们有多个不同的参与者使用同一基础平台（例如我们提到的销售和服务部门）、尝试将系统扩展到它并未设计过的用例时，问题开始积累，而且当我们需要系统与其他外部系统良好协作时，问题更加明显。
- en: On Salesforce, it is normal to have many different modules in simultaneous operation
    in the same org that leverage a common data model, user interface, and technical
    configuration. Unfortunately, this makes it particularly easy to end up with stovepipe-type
    problems if you do not implement these modules consistently.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在Salesforce上，多个不同的模块在同一个组织中同时运行并利用共享数据模型、用户界面和技术配置是很常见的情况。不幸的是，如果没有一致地实现这些模块，特别容易出现类似“烟囱”问题。
- en: 'Over time, the indicators of a Stovepipe anti-pattern tend to be the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，烟囱反模式的指示器通常包括以下几点：
- en: An increasing difficulty in understanding the code base, especially for new
    parties working with the system
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解代码库的难度增加，尤其是对于与系统合作的新团队
- en: Inconsistent architectural design and implementation patterns in different areas
    of the system
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统不同领域中的架构设计和实现模式不一致
- en: A diminishing user experience and user value due to the increasing inconsistency
    and inflexibility of the system
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于系统的一致性和灵活性日益下降，用户体验和用户价值逐渐降低
- en: Great difficulty whenever new requirements have to be implemented
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每当需要实施新需求时，都会遇到极大的困难
- en: The system is hard to integrate with other systems in the landscape
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统与其他系统集成的难度很大
- en: The system is hard to incorporate into global processes; for example, a consolidated
    DevOps pipeline
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统很难融入全球流程；例如，一个整合的DevOps管道
- en: Increasing error rates, both during development and in production
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误率不断增加，既包括开发过程中的错误，也包括生产环境中的错误
- en: A higher and higher cost of change due to all these factors
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于所有这些因素，变更的成本越来越高
- en: The fundamental reason a stovepipe tends to deteriorate in this way is due to
    a lack of common standards, practices, patterns, and tooling. Inconsistency increases
    the cognitive load on the technical team, making everything harder and more error-prone,
    as well as raising the learning curve across the board. The original team might
    have understood it, but over time, this understanding will be lost, and the result
    tends to be more inconsistent rather than a concerted effort being made to refactor
    it into a more comprehensible state.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 炉膛管（stovepipe）往往会恶化的根本原因是缺乏共同的标准、实践、模式和工具。无一致性增加了技术团队的认知负担，使得一切变得更加困难且容易出错，同时也提高了整体的学习曲线。原本的团队可能理解它，但随着时间的推移，这种理解会丧失，结果往往是变得更加不一致，而不是为了将其重构成更易理解的状态而做出集中的努力。
- en: You can profitably compare a team building a stovepipe to a well-functioning
    agile team to understand what goes wrong. An agile team may also work in relative
    isolation with empowered product owners calling the shots. However, they will
    work with standards, practices, patterns, and tools that are accepted and well
    understood in the organization, and they will work with stable interfaces for
    key integrations and common abstractions for crucial system components. That way,
    coordination happens implicitly via that common baseline and you do not end up
    with a stovepipe but, rather, a well-adjusted member of the system landscape.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将构建孤岛的团队与运作良好的敏捷团队进行比较，可以有效地理解出错的原因。一个敏捷团队也可能在相对孤立的环境中工作，由赋权的产品负责人做决策。然而，他们将遵循组织内已被接受和深刻理解的标准、实践、模式和工具，并且会使用稳定的接口进行关键集成和对关键系统组件的共同抽象。这样，协调会通过这些共同的基础标准自然而然地进行，而你最终不会构建出一个孤岛系统，而是一个良好调整的系统成员。
- en: Better solutions
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好的解决方案
- en: The fact is that many organizations are quite siloed, and it therefore becomes
    hard to solve the business-level coordination problems that arise when building,
    implementing, or changing systems. As architects, dealing with these issues should
    be part of our bread-and-butter activities in order to avoid building stovepipe
    systems and ensure that our platforms, such as Salesforce, continue to deliver
    value over the long term.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，许多组织存在较强的孤岛现象，因此在构建、实施或变更系统时，解决业务层面的协调问题变得非常困难。作为架构师，处理这些问题应该是我们的日常工作的一部分，以避免构建孤岛系统，并确保我们的平台（如Salesforce）在长期内继续发挥价值。
- en: 'While some of the more transformative things that can be done organizationally
    to break down silos and improve collaboration are often beyond our power, there
    are many things that we can reliably do to improve the situation:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管一些能够组织上打破孤岛、提高协作的变革性举措通常超出了我们的能力范围，但我们可以可靠地做很多事情来改善这种状况：
- en: Define clear architectural patterns and practices that can be used between teams
    to create common abstractions
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义清晰的架构模式和实践，以便不同团队之间使用，并创建共同的抽象层次
- en: Put in place conventions for how different things are to be implemented, both
    at the macro level (for example, when to use flows and when to use triggers) and
    micro level, such as a coding guideline
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制定关于如何实现不同内容的约定，既包括宏观层面的（例如，何时使用流程，何时使用触发器），也包括微观层面的，例如编码规范
- en: Adopt standards for all technical areas, such as reporting and BI or data governance,
    in order to ensure consistency
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为所有技术领域（如报告、BI或数据治理）采用标准，以确保一致性
- en: Have strong guidance for creating stable interfaces for cross-system integration,
    as well as integration patterns for different use cases
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为跨系统集成创建稳定接口提供强有力的指导，并为不同的使用场景提供集成模式
- en: Put in place a common methodology for implementation across Salesforce projects
    to ensure consistency
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Salesforce项目的实施制定共同的方法论，以确保一致性
- en: Adopt consistent tooling for all elements of the development life cycle to enable
    cross-team and cross-system understanding
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为整个开发生命周期的所有元素采用一致的工具，以促进跨团队和跨系统的理解
- en: Enforce these standards and practices vigorously
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强力执行这些标准和实践
- en: 'We are in a fortunate position as Salesforce architects in that much of this
    work can be taken from good practices already in existence, either established
    by Salesforce themselves or the wider Salesforce community. You can find many
    good resources on the Salesforce Architects website, and Salesforce has also recently
    introduced the **Salesforce Operating, Governance, and Architecture Framework**
    ( **SOGAF** ) to help us understand the best practices for Salesforce governance:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 Salesforce 架构师，我们处于一个有利的地位，因为很多工作可以从已经存在的良好实践中获得，这些实践要么是 Salesforce 自己建立的，要么是更广泛的
    Salesforce 社区所共享的。你可以在 Salesforce 架构师网站上找到许多优秀的资源，Salesforce 也最近推出了 **Salesforce
    操作、治理和架构框架**（**SOGAF**），以帮助我们理解 Salesforce 治理的最佳实践：
- en: '![Figure 2.3 – SOGAF elements](img/B30991_02_3.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3 – SOGAF 元素](img/B30991_02_3.jpg)'
- en: Figure 2.3 – SOGAF elements
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – SOGAF 元素
- en: However, we always have the responsibility to adopt, adapt, and implement it
    within our own organizations ourselves. This also includes adding business-specific
    standards and practices that are unique to our situation and finding ways of communicating
    the standards and practices in a way that resonates across our organization.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们始终有责任在我们自己的组织中采纳、适应并实施这些方法。这也包括添加与我们特定情况相关的业务标准和实践，并以一种能够在整个组织中产生共鸣的方式传播这些标准和实践。
- en: When implementing AI capabilities in Salesforce, be wary of creating AI stovepipes.
    Isolated AI models or predictive analytics tools that don’t integrate well with
    the broader Salesforce ecosystem can lead to fragmented insights and inconsistent
    user experiences. Instead, aim for a cohesive AI strategy that aligns with your
    overall Salesforce architecture, ensuring AI-driven features complement and enhance
    existing processes across the platform.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Salesforce 中实施 AI 能力时，要小心避免创建 AI 筒仓。与更广泛的 Salesforce 生态系统集成不良的孤立 AI 模型或预测分析工具，可能导致碎片化的洞察和不一致的用户体验。相反，应该制定一个与整体
    Salesforce 架构相一致的统一 AI 战略，确保 AI 驱动的功能能补充并提升平台上的现有流程。
- en: It should be noted that sometimes standards should be broken. There are cases
    where you need different tools, methods, or patterns to get the job done, but
    you should have a standard to deviate from if you want to avoid ending up building
    stovepipes.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，有时候标准需要被打破。在某些情况下，你需要不同的工具、方法或模式来完成任务，但如果你希望避免最终建造出筒仓式系统，你应该有一个标准作为偏离的依据。
- en: A note on Stovepipe Enterprise
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于筒仓企业的说明
- en: The material we have discussed on this pattern so far has focused primarily
    on the system level. However, it will not have escaped a more perceptive reader
    that many of the issues that appear on the system level are related to organizational
    issues, particularly the tendency for some organizations to work in silos and
    be unproductively political.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论的这个模式主要集中在系统层面。然而，敏锐的读者不会忽视，许多在系统层面出现的问题实际上与组织层面的问题相关，尤其是某些组织倾向于在孤立的环境中工作，并且存在低效的政治行为。
- en: '![Figure 2.4 – A landscape of stovepipes making up a stovepipe enterprise](img/B30991_02_4.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4 – 组成筒仓企业的筒仓景观](img/B30991_02_4.jpg)'
- en: Figure 2.4 – A landscape of stovepipes making up a stovepipe enterprise
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – 组成筒仓企业的筒仓景观
- en: As a result, there’s an organizational-level version of the Stovepipe anti-pattern
    called Stovepipe Enterprise, which focuses on this tendency of organizations to
    produce stovepipe systems due to their structural problems. While we can readily
    acknowledge this anti-pattern, as Salesforce architects, our remit does not usually
    extend to this level of problem, and we have therefore mostly focused on the system
    level in our discussion.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，存在一种组织层面的筒仓反模式，称为筒仓企业，重点关注组织因其结构性问题而倾向于产生筒仓式系统。虽然我们可以轻松认识到这种反模式，但作为 Salesforce
    架构师，我们的职责通常不包括解决这种层面的问题，因此我们在讨论中主要关注系统层面。
- en: Architecture as Requirements
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 架构即需求
- en: '*The Architecture as* *Requirements* *anti-pattern occurs when organizations
    treat architectural decisions as just another set of requirements to be gathered
    and implemented rather than as a fundamental framework that guides the system’s
    design* *and evolution.*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*架构即需求* *反模式* *发生在组织将架构决策视为仅仅是另一组需要收集和实施的需求，而不是作为指导系统设计和演进的基础框架时。*'
- en: An example
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个示例
- en: Sarah Chen, the newly appointed Enterprise Architect at GlobeTech Industries,
    leaned back in her chair and sighed. She had been brought in to help modernize
    the company’s aging CRM system, and the Salesforce implementation project seemed
    like the perfect opportunity to establish a robust, scalable architecture. With
    15 years of experience under her belt, Sarah was known for her meticulous planning
    and ability to see the big picture. However, as she stared at the project timeline
    pinned to her office wall, she couldn’t shake the feeling that things were already
    veering off course.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Sarah Chen，GlobeTech Industries 新任命的企业架构师，靠在椅背上叹了口气。她被邀请来帮助公司现代化老旧的 CRM 系统，而
    Salesforce 实施项目似乎是建立一个强大、可扩展架构的完美机会。拥有 15 年经验的她，以精密的规划和看大局的能力闻名。然而，当她凝视着挂在办公室墙上的项目时间表时，她不禁感到事情已经偏离了轨道。
- en: The kick-off meeting for the Salesforce implementation had been a whirlwind
    of excitement and ambitious goals. Department heads from Sales, Marketing, and
    Customer Service had all presented their wish lists, each more elaborate than
    the last. Sarah had tried to steer the conversation toward establishing overarching
    architectural principles, but her suggestions were met with blank stares and impatient
    nods.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce 实施的启动会议充满了兴奋和雄心勃勃的目标。销售、市场和客户服务的部门负责人都提出了他们的愿望清单，每一项都比上一项更复杂。Sarah
    曾试图引导讨论，聚焦于建立整体架构原则，但她的建议只收获了空洞的目光和不耐烦的点头。
- en: “We don’t have time for all that high-level stuff,” Jack, the Sales Director,
    had said dismissively. “We need to get this system up and running ASAP. Our competitors
    are eating our lunch with their fancy AI-powered sales forecasting.”
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: “我们没有时间做这些高层次的东西，”销售总监 Jack 不以为然地说，“我们需要尽快让这个系统上线。我们的竞争对手凭借他们花哨的 AI 驱动销售预测已经在抢占我们的市场。”
- en: Sarah had attempted to explain the importance of a solid architectural foundation,
    but her words seemed to fall on deaf ears. The project manager, Tom, was more
    concerned with ticking off requirements and meeting deadlines than considering
    the long-term implications of their decisions.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Sarah 曾尝试解释一个稳固架构基础的重要性，但她的话似乎没能引起任何反响。项目经理 Tom 更关心的是完成需求和按时交付，而不是考虑决策的长期影响。
- en: As the weeks progressed, Sarah found herself fighting an uphill battle. She
    had drafted a comprehensive architectural vision document, outlining key principles
    for data governance, integration patterns, and scalability considerations. But
    when she presented it to the steering committee, she was met with a mix of confusion
    and indifference.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，Sarah 发现自己在进行一场艰难的战斗。她起草了一份全面的架构愿景文档，概述了数据治理、集成模式和可扩展性等关键原则。但当她将其呈交给指导委员会时，她遭遇了困惑和冷漠的反应。
- en: “This all sounds great, Sarah,” the CIO had said, glancing at his watch, “but
    can you distill this down into a list of requirements we can actually implement?
    We need concrete deliverables, not abstract concepts.”
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: “听起来很不错，Sarah，”CIO 看了看手表说，“但你能把这些内容提炼成我们能实际执行的需求清单吗？我们需要的是具体的交付物，而不是抽象的概念。”
- en: Frustrated but undeterred, Sarah had tried to work within the confines of the
    project’s requirement-driven approach. She attended sprint planning meetings,
    hoping to inject architectural considerations into the development process. But
    more often than not, she found herself watching helplessly as the team made decisions
    that would have far-reaching consequences for the system’s future flexibility
    and maintainability.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管感到沮丧但不屈不挠，Sarah 尝试在项目的需求驱动方法框架内进行工作。她参加了冲刺规划会议，希望能将架构考虑因素融入开发过程中。但往往，她发现自己无能为力地看着团队做出一些决定，这些决定将对系统未来的灵活性和可维护性产生深远的影响。
- en: One particularly contentious issue arose around the implementation of an AI-powered
    lead scoring system. The sales team was adamant about having this feature, insisting
    it was crucial for their competitive edge. Sarah recognized the potential value
    but was concerned about how it would be integrated into the overall Salesforce
    architecture.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一个特别具争议的问题出现在 AI 驱动的潜在客户评分系统的实施上。销售团队坚持认为这个功能至关重要，认为它是他们保持竞争优势的关键。Sarah 认识到其潜在价值，但对它如何与整体
    Salesforce 架构进行集成感到担忧。
- en: “We need to carefully consider how this AI system will interact with our existing
    data models,” Sarah had argued during a project meeting. “We should also think
    about the long-term governance of the AI models and how we’ll manage potential
    bias in the algorithms.”
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: “我们需要仔细考虑这个 AI 系统如何与我们现有的数据模型进行交互，”Sarah 在项目会议中曾提出过这个观点。“我们还应该思考 AI 模型的长期治理，以及如何管理算法中的潜在偏见。”
- en: But her concerns were brushed aside. Jack from Sales had already been in talks
    with a third-party vendor, and they were eager to move forward.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 但她的担忧被一旁忽视了。Sales 部门的 Jack 已经与第三方供应商进行了谈判，他们急于推进项目。
- en: “Look, Sarah,” Tom had said, trying to be diplomatic, “I understand your concerns,
    but we’ve got a tight deadline to meet. Let’s just get the system implemented,
    and we can worry about the architectural stuff later.”
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: “听着，Sarah，”Tom 尝试保持外交辞令地说道，“我理解你的担忧，但我们有一个紧迫的截止日期要赶。我们先实施系统，架构方面的问题可以稍后再考虑。”
- en: Sarah had left the meeting feeling deflated. She knew that treating the AI implementation
    as just another requirement to be checked off would likely lead to problems down
    the line. But without buy-in from the rest of the team, her hands were tied.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Sarah 离开会议时感到沮丧。她知道将 AI 实施视为只是另一个需要勾选的要求，很可能会导致后续问题。但在没有得到其他团队成员支持的情况下，她束手无策。
- en: As the project progressed, Sarah’s fears began to materialize. The hastily implemented
    lead scoring system was causing performance issues, bogging down the entire Salesforce
    instance during peak usage times. The data model had become a tangled mess, with
    redundant fields and inconsistent naming conventions making it difficult to generate
    accurate reports.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 随着项目的推进，Sarah 的担忧开始变成现实。匆忙实施的潜在客户评分系统造成了性能问题，在高峰使用时段，整个 Salesforce 实例的运行速度大幅下降。数据模型变得错综复杂，冗余字段和不一致的命名规范使得生成准确报告变得困难。
- en: Integration with other systems was becoming a nightmare. The team had opted
    for quick, point-to-point integrations rather than following Sarah’s proposed
    API-first approach. As a result, data inconsistencies were cropping up across
    different departments, and any changes to one system had a ripple effect that
    was hard to predict or control.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他系统的集成变成了一场噩梦。团队选择了快速的点对点集成，而不是采纳 Sarah 提出的 API 优先方法。因此，各部门之间的数据不一致问题开始显现，而且任何一个系统的变动都会产生难以预测或控制的连锁反应。
- en: User adoption was also suffering. The lack of a coherent architectural vision
    had resulted in a disjointed user experience, with different modules feeling like
    separate applications rather than parts of a unified whole. Sarah had lost count
    of the number of complaints she’d received about inconsistent navigation and confusing
    workflows.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 用户采用率也在下降。缺乏连贯的架构愿景导致了支离破碎的用户体验，各个模块更像是独立的应用程序，而不是统一整体的一部分。Sarah 已经记不清她收到多少关于导航不一致和工作流程混乱的投诉。
- en: 6 months into the project, things came to a head. The CEO called an emergency
    meeting to address the mounting issues with the Salesforce implementation. Sarah
    sat in the conference room, surrounded by frustrated executives and a demoralized
    project team.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 项目进行到第六个月时，问题达到了顶点。首席执行官召开了一次紧急会议，讨论 Salesforce 实施中日益严重的问题。Sarah 坐在会议室里，周围是沮丧的高管和士气低落的项目团队成员。
- en: “I thought this new system was supposed to make our lives easier,” the CEO said,
    his voice tinged with disappointment. “Instead, it seems like we’ve just created
    a bigger mess. Can someone please explain how we got here?”
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: “我以为这个新系统应该让我们的生活更轻松，”首席执行官说道，声音中带着失望。“结果，似乎我们只是制造了更大的混乱。有人能解释一下我们是怎么走到这一步的吗？”
- en: All eyes turned to Sarah. She took a deep breath, knowing that this was her
    chance to finally make her case for the importance of architecture.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 所有人的目光都转向了 Sarah。她深吸了一口气，知道这是她终于可以为架构的重要性辩护的机会。
- en: “The root of our problems,” Sarah began, “is that we’ve been treating architecture
    as just another set of requirements rather than as the foundational framework
    it should be. We’ve been so focused on delivering individual features that we’ve
    lost sight of the bigger picture.”
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: “我们问题的根源，”Sarah 开始说道，“是我们一直将架构视为仅仅是另一个需求，而不是它本应具备的基础框架。我们过于专注于交付单独的功能，以至于忽视了大局。”
- en: 'She went on to explain how the lack of architectural governance had led to
    the current situation: a fragmented system that was difficult to maintain, scale,
    or adapt to changing business needs. She outlined how a proper architectural approach
    could have prevented many of the issues they were facing and could still help
    them course-correct.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 她接着解释了缺乏架构治理如何导致当前的局面：一个支离破碎的系统，难以维护、扩展或适应变化的业务需求。她详细说明了一个正确的架构方法如何避免他们所面临的许多问题，并且仍然可以帮助他们纠正方向。
- en: To her surprise, she saw nods of understanding around the room. Even Jack, who
    had been one of the most vocal opponents of her architectural suggestions, looked
    sheepish.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 令她惊讶的是，她看到会议室里的人纷纷点头表示理解。即使是Jack，他曾是最强烈反对她架构建议的人之一，此时也显得有些不好意思。
- en: “I guess I was so focused on getting those fancy AI features that I didn’t think
    about how it would all fit together,” he admitted.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: “我想我一直专注于那些炫酷的AI功能，没考虑到这些东西是如何结合在一起的，”他承认道。
- en: The CEO leaned forward, his interest piqued. “So, what do you propose we do
    now, Sarah? Can we salvage this project?”
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: CEO向前靠了靠，显得很感兴趣。“那么，Sarah，你现在建议我们做什么？我们还能挽救这个项目吗？”
- en: Sarah felt a glimmer of hope. She quickly outlined a plan to pause new feature
    development and focus on refactoring the existing implementation to align with
    proper architectural principles. She proposed establishing an Architecture Review
    Board to ensure future decisions were made with the overall system architecture
    in mind.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Sarah感到了一线希望。她迅速制定了一个计划，暂停新功能的开发，专注于重构现有的实施，以使其符合正确的架构原则。她提议成立一个架构审查委员会，以确保未来的决策能从整体系统架构的角度出发。
- en: “It won’t be easy,” she cautioned, “and it might mean some short-term pain.
    But if we don’t address these architectural issues now, they’ll only become more
    expensive and difficult to fix down the line.”
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: “这不会容易的，”她提醒道，“这可能意味着一些短期的痛苦。但如果我们现在不解决这些架构问题，它们只会变得更加昂贵和难以修复。”
- en: To her relief, the room was receptive. The CEO gave his approval for Sarah’s
    plan, and she left the meeting feeling a mix of vindication and renewed determination.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 令她松了一口气的是，房间里的反应是积极的。CEO批准了Sarah的计划，她离开会议时感到既被证明了自己的正确，也充满了重新振作的决心。
- en: Over the next few months, Sarah led the charge in restructuring the Salesforce
    implementation. It was challenging work, requiring long hours and difficult conversations.
    But gradually, she saw the system transform into something more cohesive and maintainable.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几个月里，Sarah领导了重新结构化Salesforce实施的工作。这是一项具有挑战性的工作，需要长时间的工作和艰难的对话。但渐渐地，她看到系统变得更加协调和可维护。
- en: The AI-powered lead scoring system was re-implemented, this time with proper
    consideration for data flows and model governance. The team adopted a more standardized
    approach to integrations, creating a flexible API layer that could accommodate
    future changes more easily. Data models were refactored to eliminate redundancies
    and improve consistency.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 那个AI驱动的潜在客户评分系统被重新实现，这一次充分考虑了数据流和模型治理。团队采纳了更标准化的集成方法，创建了一个灵活的API层，能够更轻松地适应未来的变化。数据模型被重构，以消除冗余并提高一致性。
- en: As the architecture solidified, Sarah noticed a change in the team’s dynamics.
    Developers began to appreciate the clarity that came with a well-defined architectural
    framework. Project managers found it easier to plan and estimate work. Even the
    business stakeholders, who had initially been skeptical of the “architectural
    stuff,” started to see the benefits in terms of improved system performance and
    adaptability.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 随着架构的逐渐稳固，Sarah注意到团队的动态发生了变化。开发人员开始欣赏清晰的架构框架带来的好处。项目经理们发现规划和估算工作变得更容易了。即使是那些最初对“架构问题”持怀疑态度的业务利益相关者，也开始看到系统性能和适应性提升所带来的好处。
- en: A year after that pivotal meeting, Sarah stood in front of the company’s annual
    all-hands meeting, presenting the success story of the Salesforce implementation.
    The system was now a point of pride for GlobeTech, with high user adoption rates
    and a newfound ability to quickly roll out new features and adapt to changing
    market conditions.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一年后，在那次关键会议之后，Sarah站在公司年度全体员工大会的讲台上，讲述Salesforce实施的成功故事。这个系统现在已经成为GlobeTech的骄傲，拥有很高的用户采纳率，并具备了迅速推出新功能和适应市场变化的能力。
- en: “The lesson we learned,” Sarah said as she concluded her presentation, “is that
    architecture isn’t just a set of abstract principles or another box to tick off
    in our project plans. It’s the foundation that allows us to build systems that
    truly serve our business needs, both now and in the future.”
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: “我们学到的教训，”莎拉在总结她的演讲时说道，“是架构不仅仅是一组抽象的原则，或者在项目计划中要勾选的另一个框。它是构建系统的基础，使我们能够真正满足现在和未来的业务需求。”
- en: The problem
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题
- en: The core problem the Architecture as Requirements anti-pattern tries to address
    is the challenge of designing a system architecture that meets diverse and sometimes
    conflicting stakeholder requirements.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 架构作为需求反模式试图解决的核心问题是如何设计一个满足多样化且有时相互冲突的利益相关者需求的系统架构。
- en: In complex projects with multiple stakeholders, each group often has its own
    priorities, technology preferences, and functional demands. Balancing these competing
    needs while ensuring overall system coherence and long-term viability is a significant
    architectural challenge.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在多个利益相关者参与的复杂项目中，每个小组通常都有自己的优先事项、技术偏好和功能需求。平衡这些相互竞争的需求，同时确保整体系统的一致性和长期可行性，是一个重要的架构挑战。
- en: Without a clear architectural vision and guiding principles, project teams may
    fall into the trap of treating architecture as just another set of requirements
    to be gathered and implemented piecemeal. They focus on fulfilling individual
    stakeholder demands without considering the bigger picture and the long-term implications
    of their design decisions.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 没有清晰的架构愿景和指导原则，项目团队可能会陷入将架构仅仅视为一组需要收集和逐步实现的需求的陷阱。他们专注于满足个别利益相关者的需求，而没有考虑整体视角以及设计决策的长期影响。
- en: 'This approach can lead to several issues:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法可能导致多个问题：
- en: '**Lack of system-level thinking** : By treating architecture as a collection
    of discrete requirements, teams lose sight of the overall system context and fail
    to consider critical aspects such as performance, scalability, maintainability,
    and interoperability'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏系统级思维**：通过将架构视为一组离散的需求，团队失去了对整体系统环境的把握，未能考虑诸如性能、可扩展性、可维护性和互操作性等关键因素。'
- en: '**Short-term focus** : Prioritizing immediate stakeholder needs over long-term
    architectural sustainability can result in quick fixes and band-aid solutions
    that accumulate technical debt and hinder future growth'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**短期关注**：将即时的利益相关者需求优先于长期架构可持续性，可能导致快速修复和临时解决方案，积累技术债务并妨碍未来增长。'
- en: '**Inconsistent user experience** : When each module or feature is designed
    in isolation without a cohesive architectural vision, users may encounter inconsistent
    interfaces, navigation, and functionality across the system'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不一致的用户体验**：当每个模块或功能都是孤立设计时，缺乏统一的架构愿景，用户可能会在系统中遇到不一致的界面、导航和功能。'
- en: '**Integration challenges** : Piecemeal architecture often leads to a proliferation
    of point-to-point integrations and custom interfaces, making the system brittle
    and difficult to maintain over time'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成挑战**：支离破碎的架构通常会导致点对点集成和定制接口的激增，使得系统脆弱，且随着时间推移，维护变得更加困难。'
- en: '**Limited adaptability** : A fragmented architecture lacking clear abstractions
    and **separation of concerns** ( **SoC** ) makes it harder to accommodate changes
    and add new features as business requirements evolve'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有限的适应性**：缺乏明确抽象和**关注点分离**（**SoC**）的支离破碎架构使得随着业务需求变化，更难适应变动并增加新功能。'
- en: Overall, issues leading to Architecture as Requirements are common, and therefore,
    it occurs with some frequency.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，导致架构作为需求的相关问题是常见的，因此，这种情况会时常发生。
- en: The proposed solution
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提出的解决方案
- en: The flawed solution proposed by the Architecture as Requirements anti-pattern
    is to treat architectural decisions as just another set of requirements to be
    gathered and implemented incrementally, without a cohesive overarching vision.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 架构作为需求反模式提出的错误解决方案是将架构决策视为仅仅是另一组需求，逐步收集并实现，而没有一个统一的整体愿景。
- en: Under this approach, project teams engage with stakeholders to collect their
    specific functional and technical requirements, often prioritizing them based
    on individual needs and preferences. They then attempt to design and build the
    system incrementally, addressing each requirement as it arises without much consideration
    for the broader architectural implications.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法下，项目团队与利益相关者进行沟通，收集他们的具体功能和技术需求，通常根据个人需求和偏好来优先考虑这些需求。然后，他们尝试逐步设计和构建系统，解决每个需求，而没有太多考虑更广泛的架构影响。
- en: This solution may seem appealing initially, as it appears to be responsive to
    stakeholder needs and allows for quick progress on individual features. Stakeholders
    feel heard and see their specific demands being met, creating a sense of satisfaction
    and buy-in.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案起初看起来很有吸引力，因为它似乎能够响应利益相关者的需求，并允许在各个功能上快速推进。利益相关者感到自己的声音被听到，并看到他们的具体需求得到了满足，从而产生了满足感和认同感。
- en: However, this approach fails to recognize that architecture is more than just
    a sum of its parts. It is a foundational framework that shapes the system’s structure,
    behavior, and evolution. Treating architecture as a collection of isolated requirements
    ignores the critical role it plays in ensuring system-wide quality attributes,
    such as performance, scalability, security, and maintainability.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法忽视了架构不仅仅是各个部分的总和。它是塑造系统结构、行为和演化的基础框架。将架构视为孤立需求的集合，忽略了它在确保系统级质量属性（如性能、可扩展性、安全性和可维护性）中的关键作用。
- en: The proposed solution also tends to favor short-term gains over long-term sustainability.
    By prioritizing immediate stakeholder needs and rushing to implement features
    without a well-thought-out architectural plan, teams accrue technical debt and
    create a fragmented, inconsistent system that becomes increasingly difficult to
    maintain and extend over time.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 提出的解决方案往往更倾向于追求短期收益而非长期可持续性。通过优先满足利益相关者的即时需求，急于实施功能而没有深思熟虑的架构计划，团队积累了技术债务，导致了一个支离破碎、不一致的系统，随着时间的推移，维护和扩展变得越来越困难。
- en: The results
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结果
- en: The consequences of falling into the Architecture as Requirements anti-pattern
    can be severe and far-reaching. Over time, the system becomes a complex web of
    tightly coupled components, custom integrations, and inconsistent design patterns,
    making it fragile, inflexible, and expensive to maintain.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 陷入“将架构视为需求”反模式的后果可能是严重且深远的。随着时间的推移，系统会变成一个由紧密耦合的组件、定制集成和不一致的设计模式构成的复杂网络，使其变得脆弱、不灵活，并且维护成本高昂。
- en: 'Some common results include the following:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的结果包括以下几点：
- en: '**Technical debt accumulation** : As the system grows without a coherent architectural
    vision, quick fixes and ad hoc solutions pile up, leading to an accumulation of
    technical debt. This debt manifests as convoluted code, performance bottlenecks,
    and increased maintenance efforts.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术债务积累**：随着系统在没有统一架构愿景的情况下发展，快速修复和临时解决方案层出不穷，导致技术债务的积累。这些债务表现为复杂的代码、性能瓶颈以及增加的维护工作。'
- en: '**Scalability and performance issues** : The lack of a well-designed architecture
    often leads to scalability and performance problems as the system struggles to
    handle increasing loads and data volumes. Inefficient resource utilization, excessive
    database queries, and poorly optimized code contribute to sluggish system performance.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性和性能问题**：缺乏精心设计的架构通常会导致可扩展性和性能问题，因为系统难以处理越来越大的负载和数据量。资源利用效率低、过多的数据库查询和未优化的代码都会导致系统性能缓慢。'
- en: '**Integration complexity** : Without clear architectural boundaries and standardized
    interfaces, integrations between different modules or external systems become
    a tangled mess of custom code and brittle connections. Changes in one part of
    the system can have unpredictable ripple effects, making integrations fragile
    and error-prone.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成复杂性**：没有明确的架构边界和标准化的接口，不同模块或外部系统之间的集成变得混乱不堪，充斥着定制代码和脆弱的连接。系统中的一部分发生变化可能会引发不可预测的连锁反应，使集成变得脆弱且容易出错。'
- en: '**Limited reusability and maintainability** : The absence of a modular, loosely
    coupled architecture hinders code reusability and maintainability. Developers
    struggle to understand and navigate the code base, leading to increased development
    time and a higher risk of introducing bugs when making changes.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有限的可重用性和可维护性**：缺乏模块化、松耦合的架构妨碍了代码的可重用性和可维护性。开发人员难以理解和导航代码库，导致开发时间增加，并且在做出修改时引入错误的风险也更高。'
- en: '**Resistance to change** : As the system becomes more complex and entangled,
    it becomes increasingly difficult to introduce new features or adapt to changing
    business requirements. The architecture’s rigidity and lack of clear SoC make
    modifications time-consuming, costly, and prone to unintended side effects.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**抗拒变革**：随着系统的复杂化和纠缠，越来越难以引入新特性或适应不断变化的业务需求。架构的僵化和缺乏明确的SoC（系统间隔分离）使得修改变得耗时、昂贵且容易产生意外副作用。'
- en: '**User frustration and workarounds** : Inconsistent user experiences, performance
    issues, and limited functionality can lead to user frustration and dissatisfaction.
    Users may resort to manual workarounds or alternative tools to circumvent the
    system’s limitations, undermining the intended benefits and efficiency gains.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户的挫败感和应急处理**：不一致的用户体验、性能问题和有限的功能可能导致用户挫败感和不满。用户可能会诉诸于手动的应急处理或替代工具，以绕过系统的限制，这破坏了预期的好处和效率提升。'
- en: '**Increased costs and delayed time-to-market (TTM)** : The cumulative effect
    of technical debt, maintenance challenges, and development inefficiencies can
    significantly increase costs and delay the delivery of new features and enhancements.
    The organization may find itself investing more resources in firefighting and
    system overhauls rather than focusing on innovation and business value delivery.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本增加和市场推向时间（TTM）延迟**：技术债务、维护挑战和开发低效的累积效应可能显著增加成本，并延迟新功能和增强的交付。组织可能会发现自己将更多资源投入到应急处理和系统大规模重构中，而非专注于创新和业务价值交付。'
- en: The allure of AI can sometimes lead organizations to treat AI capabilities as
    simple feature requirements rather than architectural considerations. This approach
    can result in haphazard AI implementations that fail to leverage Salesforce’s
    native AI capabilities or integrate poorly with existing data models and business
    processes. To avoid this, approach AI initiatives with a holistic architectural
    mindset, considering data flows, model governance, and the long-term implications
    of AI-driven decision-making within your Salesforce ecosystem.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AI的诱惑有时会导致组织将AI能力视为简单的功能需求，而非架构考量。这种做法可能导致草率的AI实现，无法充分利用Salesforce的本地AI能力，或与现有的数据模型和业务流程集成不良。为了避免这种情况，应以全局架构的思维方式来看待AI项目，考虑数据流、模型治理以及AI驱动的决策在Salesforce生态系统中的长期影响。
- en: Ultimately, the Architecture as Requirements anti-pattern can lead to a system
    that fails to meet its intended goals, hinders organizational agility, and becomes
    a burden rather than an enabler for the business.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，作为需求的架构反模式可能导致系统未能实现其预期目标，阻碍组织的敏捷性，且成为企业的负担，而非推动者。
- en: Better solutions
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好的解决方案
- en: 'To avoid falling prey to the Architecture as Requirements anti-pattern and
    establish a solid foundation for a successful Salesforce implementation, consider
    the following better approaches:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免陷入“作为需求的架构”反模式，并为成功实施Salesforce奠定坚实基础，请考虑以下更好的方法：
- en: '**Start with a clear architectural vision** : Begin by defining a clear architectural
    vision and guiding principles that align with the organization’s goals, values,
    and long-term objectives. This vision should articulate key quality attributes
    and design principles that will shape the system’s structure and behavior.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从清晰的架构愿景开始**：首先定义一个清晰的架构愿景和指导原则，使其与组织的目标、价值观和长期目标保持一致。该愿景应阐明关键的质量属性和设计原则，这些将决定系统的结构和行为。'
- en: '**Engage architects early** : Involve experienced architects from the outset
    of the project to provide strategic guidance and ensure that architectural considerations
    are factored into requirements gathering and design decisions. Architects should
    collaborate closely with stakeholders to understand their needs while keeping
    the bigger picture in mind.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**早期参与架构师**：从项目开始时就应聘请经验丰富的架构师提供战略指导，确保架构考量纳入需求收集和设计决策。架构师应与利益相关者紧密合作，了解他们的需求，同时保持全局视野。'
- en: '**Establish architecture as a foundation** : Treat architecture as a key enabler
    and foundation for the system, not just another set of requirements. Define clear
    architectural patterns, principles, and guidelines upfront to inform design decisions
    throughout the project. Communicate the rationale behind these architectural choices
    to stakeholders and development teams.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将架构视为基础**：将架构视为系统的关键推动力和基础，而不仅仅是另一组需求。在项目开始时定义清晰的架构模式、原则和指南，为设计决策提供指导。向利益相关者和开发团队传达这些架构选择背后的理由。'
- en: '**Use reference architectures and best practices** : Leverage established reference
    architectures, design patterns, and best practices specific to Salesforce. These
    proven approaches can provide a solid starting point and help ensure that the
    system follows recommended architectural principles and guidelines.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用参考架构和最佳实践**：利用已建立的参考架构、设计模式和针对 Salesforce 的最佳实践。这些经过验证的方法能够提供坚实的起点，并帮助确保系统遵循推荐的架构原则和指南。'
- en: '**Balance requirements and architecture** : Strike a balance between fulfilling
    individual requirements and maintaining a coherent, sustainable architecture.
    Be prepared to make trade-offs and prioritize requirements based on their alignment
    with the overall architectural goals. Continuously assess the impact of requirements
    on the system’s architecture and make informed decisions.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平衡需求与架构**：在满足个别需求和保持一致、可持续的架构之间找到平衡。做好权衡准备，并根据需求与整体架构目标的对齐程度优先考虑需求。持续评估需求对系统架构的影响，并做出明智的决策。'
- en: '**Embrace modularity and loose coupling** : Design the system with modularity
    and loose coupling in mind. Break down complex requirements into smaller, self-contained
    components with well-defined interfaces. This approach promotes reusability, maintainability,
    and easier integration between different parts of the system.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拥抱模块化和松耦合**：设计系统时要考虑模块化和松耦合。将复杂的需求拆分为更小的、独立的组件，并定义清晰的接口。这种方法有助于提高可重用性、可维护性，并促进系统不同部分之间的更容易集成。'
- en: '**Invest in architectural documentation** : Create and maintain clear, concise
    architectural documentation that communicates the system’s structure, key components,
    and design decisions. This documentation serves as a reference for development
    teams, stakeholders, and future maintainers, ensuring a shared understanding of
    the system’s architecture.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**投资架构文档**：创建并维护清晰简洁的架构文档，传达系统的结构、关键组件和设计决策。这些文档为开发团队、利益相关者和未来的维护人员提供参考，确保对系统架构的共同理解。'
- en: '**Continuously evaluate and refine the architecture** : Treat architecture
    as a living asset that evolves alongside the system. Regularly review and assess
    the architecture to identify areas for improvement, address emerging challenges,
    and align with changing business needs. Be proactive in refactoring and updating
    the architecture as necessary to keep it relevant and effective.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续评估和优化架构**：将架构视为一个与系统一起发展的活资产。定期审查和评估架构，发现改进的空间，解决新出现的问题，并与不断变化的业务需求对齐。积极进行架构重构和更新，以保持其相关性和有效性。'
- en: '**Foster collaboration and communication** : Encourage open communication and
    collaboration among architects, development teams, and stakeholders. Create forums
    for discussing architectural concerns, sharing knowledge, and making collective
    decisions. Foster a culture of continuous learning and improvement where team
    members can contribute ideas and insights to enhance the system’s architecture.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**促进协作和沟通**：鼓励架构师、开发团队和利益相关者之间的开放沟通与协作。创建讨论架构问题、分享知识和做出集体决策的论坛。培养一种持续学习和改进的文化，让团队成员可以贡献想法和见解，从而提升系统架构。'
- en: '**Align architecture with organizational goals** : Ensure that the system’s
    architecture aligns with the organization’s broader goals and strategies. Consider
    factors such as scalability, performance, security, and future growth when making
    architectural decisions. Regularly communicate the value and benefits of a well-designed
    architecture to stakeholders and decision-makers.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使架构与组织目标对齐**：确保系统的架构与组织的更大目标和战略对齐。在做出架构决策时，要考虑可扩展性、性能、安全性和未来增长等因素。定期向利益相关者和决策者传达良好设计的架构所带来的价值和益处。'
- en: By adopting these better solutions and embracing a proactive, holistic approach
    to architecture, organizations can lay the groundwork for a robust, scalable,
    and maintainable Salesforce implementation that delivers long-term value and supports
    the business’s evolving needs.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 通过采用这些更好的解决方案，并采取积极的、全面的架构方法，组织可以为强大、可扩展且易维护的Salesforce实施奠定基础，从而提供长期价值，并支持业务不断变化的需求。
- en: A Big Ball of Mud
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大泥球
- en: A Big Ball of Mud is a system that has lost all internal structure and coherence
    and can only be partially understood by its original creator(s) and not at all
    by anyone else.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: “大泥球”是一个系统，它已经失去了所有内部结构和一致性，只有最初的创建者能够部分理解它，而其他人根本无法理解。
- en: An example
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个例子
- en: DreamCo has put adding more functionality to their Salesforce implementation
    on hold for a few months. During this time, John has been working on a plan to
    refactor key parts of the system to make it more maintainable. He’s been consulting
    a lot of technical people from the different teams that have been involved since
    day one, and he finally thinks he has found a way forward.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: DreamCo已暂停对Salesforce实施的更多功能开发几个月。在此期间，约翰一直在制定一个计划，重构系统中的关键部分，使其更易维护。他与从第一天起就参与的不同团队中的大量技术人员进行了咨询，最终他认为找到了前进的道路。
- en: However, shortly before John has a meeting to pitch his ideas to the CIO, things
    change rapidly on the ground. DreamCo has recently hired Ricky, an experienced
    architect from one of the big consultancies, to help figure out how to integrate
    the DreamCo and NewCo orgs. While he has generally been supportive of John’s effort
    to get refactoring started, it clearly hasn’t been at the top of his agenda.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，就在约翰准备与首席信息官（CIO）开会，推销他的想法时，地面上的情况发生了快速变化。DreamCo最近聘请了Ricky，一位来自大咨询公司的经验丰富的架构师，帮助理清如何整合DreamCo和NewCo的组织。虽然他通常支持约翰启动重构的努力，但显然这并不是他的工作重点。
- en: Instead, he proposes to focus DreamCo’s efforts on the Salesforce side into
    an integration project to combine the two orgs. He proposes to do much of the
    technical work himself, using a third-party tool that he has previously used on
    other projects. The integration will be point-to-point, but it will reliably ferry
    the data needed back and forth between the two environments and end the complex
    manual processes that the business has had to use to bridge the gap in the interim.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 反而，他提议将DreamCo的精力集中在Salesforce方面，开展一个整合项目，将两个组织合并。他建议亲自完成大部分技术工作，使用一个他之前在其他项目中使用过的第三方工具。这个整合将是点对点的，但它将可靠地在两个环境之间来回传输所需的数据，并终结业务方面不得不使用的复杂手动流程，这些流程是为了弥补过渡期间的差距。
- en: Given the pressure on the business, the CIO decides to go ahead with Ricky’s
    plan, and he implements the solution over a 2-month period more or less single-handedly.
    John is told that his refactoring project will get the go-ahead after the integration
    is complete. However, once it’s done, the CIO gives the go-ahead to a new set
    of feature upgrades on the existing platform for both the Sales and Service teams.
    John is told that the business can’t wait for any new features and that instead,
    he will need to lead the development of a new logistics app that the business
    wants to build in a separate Salesforce org, with Ricky acting as the technical
    lead.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于业务的压力，CIO决定按照Ricky的计划继续推进，并且在大约2个月的时间里几乎是单独实施了这个解决方案。约翰被告知，等整合完成后，他的重构项目将会获得批准。然而，一旦完成，CIO批准了一套新的功能升级方案，涉及销售和服务团队的现有平台。约翰被告知，业务方面无法等待任何新功能，而是需要他领导开发一个新物流应用，该应用将被构建在一个单独的Salesforce组织中，由Ricky担任技术负责人。
- en: The new app is built quickly in the new environment but John remains concerned
    that it is being built with very little structure or discipline. The business
    seems to love what they’re seeing, so John relents and lets things go ahead, supporting
    where he can. While the app was meant to be an experimental prototype, the business
    decides it wants to put it into production as is. The upgrade to the main org
    takes a long time to get done, but the day for the production deployment finally
    approaches.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 新的应用程序在新环境中迅速构建，但约翰仍然担心它的构建缺乏结构或纪律。尽管业务方面似乎喜欢他们所看到的内容，约翰最终让步并允许事情继续推进，尽可能提供支持。虽然该应用程序本应是一个实验性原型，但业务决定按现有状态投入生产。主组织的升级需要很长时间才能完成，但生产部署的日子终于临近。
- en: '![Figure 2.5 – The DreamCo Big Ball of Mud architecture](img/B30991_02_5.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图2.5 – DreamCo大泥球架构](img/B30991_02_5.jpg)'
- en: Figure 2.5 – The DreamCo Big Ball of Mud architecture
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: DreamCo will deploy the new upgrades as well as the new logistics app into the
    production org in a single deployment over a weekend. All hands are on deck, and
    there is a positive buzz around the release as many of these features, as well
    as the new app, are avidly anticipated. The last weeks are slightly marred by
    Ricky handing in his notice, as he has decided to take an offer from another consultancy.
    However, he promises to document and hand over everything before he leaves, so
    no one is overly concerned.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: On the weekend it is going live, John is on call and avidly awaiting the results.
    The initial deployment runs into some issues and the full deployment doesn’t actually
    make it into production before Sunday afternoon. The test team start their smoke
    test, and it is obvious that there are major problems with the release. Major
    functional areas don’t seem to be working, the integration between the DreamCo
    and the NewCo org starts experiencing errors, and many test scripts that were
    working in the main org or the logistics org fail completely. Questions are raised
    about the quality of UAT testing, but the fact is that the release has failed.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: The team works frantically overnight to get the system back to a reasonable
    state before the business starts using it in the morning. Communications go out
    stating that the release had to be pulled back. DreamCo’s board calls the CIO
    for a consultation on what went wrong. However, no one can work it out, and for
    both the logistics app and the DreamCo-to-NewCo integration, it seems to be impossible
    to fix any issues now that Ricky has gone, despite knowledge transfer sessions
    having taken place.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: After a week of finger-pointing back and forth, the CIO is fired and a replacement
    comes in. He commissions a detailed technical audit of the current system from
    a consultancy that he personally trusts. After consultation with John and many
    other DreamCo stakeholders, they conclude that the architecture and code quality
    on many components is so weak and the structure so incomprehensible that the only
    option is to rebuild significant parts of the system.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: The problem
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A Big Ball of Mud is what happens when all internal structure within a system
    collapses and what you are left with is a big ball of undifferentiated mud that
    is impossible to understand or change. In contrast to a stovepipe, which can work
    quite well within its own limited sphere, a Big Ball of Mud is effectively a throwaway
    system. You might be able to keep it running with enough firefighting, but you’ll
    never make it work well or significantly change it. It is a response to a system
    that has such great pressure to deliver functionality in several areas that going
    along with any idea that seems to deliver the functionality in question seems
    to be a good idea.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: It happens usually either as a result of ignorance or desperation, as no one
    intentionally sets out to create a big mess. You do, however, frequently get Big
    Balls of Mud from systems that have been created due to one person or a couple
    of people working independently without supervision, clear documentation, or good
    decision-making processes, as with Ricky in our example.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: You could say that a Big Ball of Mud shares the Nike approach to implementation,
    “ *Just Do It.* ” While this may be a good principle in athletics, it rarely works
    out well in enterprise IT.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: The proposed solution
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The solution proposed by a Big Ball of Mud, in general, is to put your trust
    in some team or person to just get something done with no regard for the consequences.
    It is often attractive in pressured situations because it gives you a seemingly
    good way out of your predicament without having to pay the costs of disciplined
    development or implementation.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Big Balls of Mud often evolve from systems such as stovepipes, when all discipline
    and control are lost. A stovepipe, if it is true to its own internal structure,
    can work well on its own for a long period of time, but once you give up on this
    internal discipline, it quickly devolves into a Big Ball of Mud.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Big Balls of Mud are also often created from experimental or prototype systems
    that are elevated to production status, as with the logistics app in our previous
    example. The results of a system reaching the Big Ball of Mud stage are usually
    catastrophic, as we’ll discuss in the following section.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: The results
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A Big Ball of Mud is an end state for a system. Once the system reaches a state
    of total internal disorganization, the only way to keep it running is to have
    one or two people who still partially understand how it works continuously firefighting
    to keep it going. You won’t be able to make changes that are anything other than
    trivial, nor will it be realistic to refactor the system into a reasonable state.
    It would be cheaper to rebuild the key modules, which is what tends to eventually
    happen with these kinds of systems.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: As noted in the introduction, some people like to be heroes and also like the
    job security that comes from being indispensable, so the period during which a
    Big Ball of Mud can remain operational is surprisingly long in some cases.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: The fundamental solution to the Big Ball of Mud scenario is technical discipline
    in various forms, which we’ll discuss next.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In many ways, the better solution to the Big Ball of Mud anti-pattern is similar
    to those we listed for the Stovepipe anti-pattern. If you have good technical
    standards and practices in place and they are followed in practice, then you will
    not end up with a Big Ball of Mud.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: More fundamentally, though, the Big Ball of Mud scenario reveals a profound
    lack of technical discipline and respect for craftsmanship within the executing
    organization. If your technical culture does not value good practice, architecture,
    well-structured code, and abstractions, but instead values cowboys just getting
    something up and running, no matter how quick and dirty, then you will be prone
    to end up with Big Balls of Mud.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: To be sure, there are situations where quick and dirty is good enough. If you’re
    writing code for an ephemeral marketing campaign, a research project, or a throwaway
    prototype, then you don’t have to care so much about whether the system you create
    can evolve. However, for most of us, most of the time, this is not the case.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Too much coupling
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Designing systems with low coupling and high coherence is one of the foundational
    aims of software architects of any stripe. Coupling, however, can be difficult
    to avoid, and in many cases, a level of coupling can be justified as a trade-off
    with other concerns. In this section, however, we will see how intense coupling
    can become an anti-pattern that seriously affects your system architecture.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Intense coupling
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Intense coupling is an anti-pattern where one or more systems in the system
    landscape fail to maintain clear boundaries with other coupled systems, leading
    to a fragile and unmaintainable state.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: An example
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: BigCo has a mid-size Sales Cloud implementation that they use for managing their
    opportunity pipeline. However, all financial processes, quoting, and order management
    are done in their main SAP system, which has served as the source of truth for
    the business for a number of years.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: The sales department love their Salesforce system and would like to carry out
    the entire ordering and fulfillment process through Salesforce, leaving the SAP
    system to purely financial processes. The finance and supply chain teams think
    this idea is not only misguided but risks compromising the strong grip BigCo has
    had on its data for years.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: After some internal political battles, the CFO and VP of Sales reach a compromise.
    The order and fulfillment process will stay in SAP, along with the financial processes,
    but quoting will move end-to-end to Salesforce using Salesforce CPQ. That way,
    the sales team will rarely need to go into SAP and can stay primarily in the Salesforce
    interface that they love, but the other teams still keep control of all master
    data. Anitha, a Salesforce architect, is tasked with making this compromise into
    reality.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'She quickly discovers some major issues with this approach:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: First, all products and prices are kept directly in SAP, and there is no appetite
    for moving this to Salesforce; therefore, it will need to be accessed from SAP
    as part of the quoting process, and only stub data can be replicated to Salesforce.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, a number of business logic checks happen for quotes during the business
    process to check that they fall within acceptable corporate parameters. Anitha
    looks into moving these checks to Salesforce as part of the implementation. While
    it is possible for many, some of these checks require access to data in SAP’s
    financial module and can’t be done on Salesforce. These will need to be accessed
    via an integration to SAP too.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third, a number of additional services need to be called as part of the quoting
    process to get current product availability and possible delivery dates for inclusion
    on the quote. These will have to be called via SAP, as they are already exposed
    via web services on this platform, and BigCo does not have the integration resources
    to make a direct connection to Salesforce or to connect via other middleware.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.6 – The BigCo integration scenario](img/B30991_02_6.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – The BigCo integration scenario
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: Anitha sounds the alarm and says that the degree to which Salesforce depends
    on SAP makes her doubt that the new system will perform to the high expectations
    of the sales team. She recommends looking into a different approach where there
    is a cleaner division between what is on SAP and what is on Salesforce. However,
    the Finance and Supply Chain teams rule out any process changes as part of the
    implementation, and therefore she has to go ahead despite her doubts.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: The initial workshops with users go well, and the functional requirements of
    the sales team seem to be a good fit for what Salesforce has to offer. However,
    Anitha is still concerned that the final product will underperform due to the
    coupling to SAP.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: During the UAT testing of the solution, some concerns are raised about the performance
    and responsiveness of the user interface, and there are also complaints that testing
    had to be interrupted several times due to maintenance or outages on SAP.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: These concerns are not enough to hold back the go-live, however, as the team
    expects a boost in performance from moving to the production environment, and
    the basic functional aspects of the solution are acceptable.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, the problems are exacerbated and not alleviated by the move to
    production. Performance decreases significantly, and sales users frequently have
    to wait for minutes to see a response from SAP. In addition, there are numerous
    periods during the day when SAP runs large scheduled jobs that stop sales users
    from doing anything.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: The team works frantically to try to improve the situation. However, after a
    couple of weeks, the team has to throw in the towel, and the sales team goes back
    to producing their quotes in SAP.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: The problem
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Intense coupling happens when the boundaries between systems or modules are
    blurred to such an extent that one depends entirely on the other for its operation.
    In general, as architects, we strive to reduce coupling while maintaining coherence.
    However, coupling – even tight coupling – can be a necessary trade-off with other
    requirements in some situations.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Intense coupling, however, is the most extreme version of this trade-off. At
    the system level, it happens when system boundaries are not respected, and you
    try to design a solution that incorporates and replicates significant parts of
    another system, using the other system as a synchronous backend.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: The same pattern can repeat at the module level, where you have one module replicating
    all the functionality of another in a different context, calling intensely on
    functionality from the original module to do so.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Intense coupling is often done for good reason. There are usually real problems
    with the functionality of legacy systems or modules that are proving hard to address
    and that would seemingly be much simpler to solve in a different system or module
    context.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: As we’ll see in the following section, the proposal that intense coupling makes
    to address such issues can be very compelling, which is what makes it a classic
    anti-pattern.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: The proposed solution
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Intense coupling is a proposition that promises that you can have your cake
    and eat it too. By using APIs or SDKs, or using some other similar mechanism,
    you can get all the functionality and business logic that you are used to. Additionally,
    you can have it work within a new user experience that will address your changing
    requirements, and you won’t have to go through the pain of introducing a new system
    or making substantial changes to your legacy ones. As with all cake-related propositions
    of this kind, you should be quite skeptical about the truth of these surface claims.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Salesforce is particularly prone to this anti-pattern because it has a user
    interface that many users love, and the business is used to things being fairly
    easy to implement on the platform. It is, therefore, common for a request to be
    made for parts of other systems to be incorporated into the Salesforce platform.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: This can be done successfully if you are careful about the boundaries, are open
    to making the necessary process changes, and have a strong integration capability
    in place. However, it is also quite easy to end up in an intensely coupled scenario.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: The results
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Intense coupling tends to result in an end-to-end user experience that is characterized
    by fragility, instability, and low performance. This happens for the fairly obvious
    reason that an intensely coupled system is, for all intents and purposes, a single-user-facing
    system encompassing two underlying technical systems. It is a distributed system
    that has not been built with the awareness that it is a distributed system.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: The more you need to rely on the other system, the more frequently you need
    to call out and access its functionality. This means you have an issue whenever
    either system has an issue in any of the areas that are part of the solution.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: You also get the brittleness that comes from any changes to relevant functionality
    on either side of the system being likely to result in required changes to your
    intensely coupled system. This means that you will likely see more errors and
    issues over time than you’d expect.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: In addition, the cumulative wait for the functionality going back and forth
    between the two sides of the intensely coupled system leads to reduced performance,
    sometimes to the extent that the system becomes unusable.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: On the module level, the consequences tend to be more about reduced maintainability,
    lower flexibility, and higher cost of change, but performance issues will also
    occasionally creep in.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While the problems that lead to intense coupling are often legitimate, there
    are many things you as an architect can do to avoid a situation resulting in an
    anti-pattern. The following list provides a starting point:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: Keep a keen eye on system and module boundaries, and ensure that if they shift,
    the cut is made at a maintainable point.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When designing a cross-boundary process, be very clear on system responsibilities
    and the integration architecture that will support those processes.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adapt processes so that they work seamlessly with the revised system boundaries.
    Don’t try to compensate with extra technical work if the processes don’t fit.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid redundant functionality in multiple systems. Be clear on where an engagement
    with a given set of functionalities is done.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If what you are building is, in fact, a distributed system, be mindful of that
    fact and use low-coupling integration patterns, such as event-based integration,
    to achieve your goals. Resist calls for large amounts of synchronous integration.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As AI becomes more prevalent in Salesforce implementations, be cautious of creating
    intense coupling between AI models and core Salesforce functionality. While tight
    integration can provide powerful capabilities, it can also lead to brittle systems
    that are difficult to maintain or evolve. Strive for a modular approach to AI
    integration, using well-defined interfaces and data contracts to allow for flexibility
    and easier updates to AI models without disrupting core Salesforce operations.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having now discussed a number of patterns that are applicable to Salesforce,
    as well as many other technologies, we will now move on to our first unique Salesforce
    anti-pattern, Ungoverned Org Proliferation.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Org complications
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the Salesforce world, you don’t have to manage your underlying infrastructure,
    which frees you from a good number of potential temptations that can lead to anti-patterns.
    However, the way that you structure environments with different orgs in the Salesforce
    world is subject to a number of anti-patterns in its own right.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Ungoverned Org Proliferation
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ungoverned Org Proliferation is a Salesforce-specific anti-pattern due to a
    lack of defined org strategy, which leaves you with an ever-increasing number
    of unaligned orgs, eventually becoming architecturally unmanageable.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: An example
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Miranda has been hired as BigCo’s new CRM Migration Manager. The company has
    had a business unit approach to IT and does not have any centralized CRM capabilities
    at this point. Instead, three units use Salesforce mainly for opportunity management,
    and there are at least 15 other systems in use from a variety of vendors, as well
    as in-house developed systems in play across departments and geographies.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Miranda has been tasked with consolidating this landscape, using Salesforce
    as the primary platform. There is a general aim to consolidate systems and standardize
    processes, but there are few central resources to drive this transformation.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Miranda plans a strategy to consolidate the three existing Salesforce orgs.
    She has previously been through org consolidation projects in Salesforce and doesn’t
    think there is enough value to go through that pain in this case.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: She will therefore create three variants of a core Salesforce implementation,
    dispersed across three geographies, and map the other CRM systems to whichever
    of these three is the best fit. She will implement reporting processes across
    these three orgs using the corporate data warehouse that already imports Salesforce
    data from two of the orgs.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: However, as she starts to plan for migrations, she faces massive pushback from
    business users on her plans. While most teams are quite willing to move to Salesforce,
    users in France and China, two of BigCo’s largest markets, demand their own unique
    and segregated environments.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: According to the country leads, this is a legal requirement and not up for discussion.
    Miranda escalates the question to the Legal department but is unable to get an
    answer out of them quickly. She therefore has to accept the separate orgs for
    France and China.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: BigCo’s largest market is the UK, and the country lead there, once he understands
    that having a separate environment is a possibility, demands that they are also
    given a unique Salesforce org that can be customized specifically to their requirements.
    The UK operation is highly efficient but also unique, and there is no way it would
    work with the same processes as the rest of the business, the argument goes.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Once again, Miranda finds herself politically outgunned and has to assent to
    these demands. However, this leads to a new opening of the floodgates. Product
    development argue that their process is distinct enough to merit a separate environment,
    and similar requests from other departments and geographical units follow.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the day, Miranda will be looking at a dozen different Salesforce
    orgs, with many having quite distinctive processes implemented. This is still
    preferable to the 15 totally different systems in play before Salesforce, but
    far from the original goals. At least, she finally has a way forward.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – The BigCo org overview](img/B30991_02_7.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – The BigCo org overview
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Now, a long-awaited report comes in from a leading management consultancy on
    how to optimize BigCo’s global sales process. This promises major global efficiency
    in sales and sales operations by moving to a globally standardized process for
    all field sales. It is implicitly assumed that this global process will be implemented
    on Salesforce.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Miranda asks around to see whether anyone is willing to change their position
    on the implementation plans in light of the new objectives. The answer is a resounding
    no. She decides that enough is enough and hands in her notice the following day.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: The problem
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ungoverned Org Proliferation happens in organizations that like Salesforce but
    don’t like standardizing processes, user interfaces, or other similar requirements
    and don’t have any strong architectural governance around their Salesforce platform.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: 'Problems that lead to Ungoverned Org Proliferation tend to be found within
    the following scenarios:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: Different business units or geographies have different processes and can’t agree
    to a compromise that can be implemented
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different stakeholders have radically different views of how the user experience
    should be structured and can’t agree on a reasonable compromise
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different stakeholders have radically different views on the data model to be
    implemented and can’t agree on a reasonable compromise
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are certain critical features that are needed in some business units but
    can’t be used in others – different integration backends, for example
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different parts of the business are working with different Salesforce partners
    that are pushing them in different directions
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are perceived or real security differences between different parts of
    the business that strongly impact the Salesforce implementation
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are perceived or real legal compliance regime differences between different
    parts of the business that strongly impact the Salesforce implementation
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: It’s worth noting that in the old days, Salesforce actively encouraged organizations
    to try out the software in a number of different places, the so-called *seed and
    grow* strategy, which worked very well for many years. In large organizations
    with a long history with Salesforce, you can sometimes still see this legacy living
    on within rather unstructured org landscapes.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: The proposed solution
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The proposed solution to the problems leading to Ungoverned Org Proliferation
    is to give everyone who wants it their own Salesforce org and let them get on
    with it. This is attractive because it reduces coordination issues and alignment
    problems and allows easier resolution of thorny compliance issues. It also lets
    powerful stakeholders get things in their own way.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: There are different variants and degrees of this anti-pattern, some of which
    are relatively benign or even beneficial. In our previous example, some of the
    asks are probably entirely legitimate and should have been part of a systematically
    evaluated org strategy. Product development processes, for instance, are often
    configured in a separate org from the one used for Sales and Service, and sometimes
    there are real compliance headaches that necessitate multiple orgs.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: Let’s be clear. There’s nothing wrong with a multi-org strategy; it can both
    be the right architectural choice and work well in practice. However, with Ungoverned
    Org Proliferation, we are talking about a multi-org operation without any strategy
    or architecture supporting it, and that tends to result in serious negative consequences,
    as we’ll discuss in the following section.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: The results
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The result of Ungoverned Org Proliferation is a sprawl of orgs that cannot be
    controlled from the organization’s center. How serious a problem that is will
    depend on the nature of the organizational culture and how much central control
    it requires.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, you will find some or all of these disadvantages present in an
    ungoverned org landscape:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: Difficulties in implementing processes that cut across business units or geographical
    divisions, as the Salesforce implementations vary by data model and components
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Difficulty aligning data for reporting, as the data model and the meaning of
    fields will be locally defined
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complexity developing reports, even when data is brought together, due to the
    semantic gap between different uses of data
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrations often have to be replicated in several different places and can
    be hard to control
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Licensing can get expensive, as some users need multiple licenses
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowledge of the systems is heavily distributed, and getting an overview of
    any particular aspect can be hard to find, as technical teams also mostly work
    in a local context
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instituting any kind of global governance can be near impossible due to a combination
    of the aforementioned factors
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As org consolidation is hard, once you find yourself in this situation, it can
    be difficult to undo
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This list is, to a large extent, simply a more extreme version of the downsides
    of a multi-org strategy, which makes sense, of course. As we will cover in the
    following section, the key takeaway to avoid this anti-pattern is to clearly define
    your org strategy upfront, along with mitigations for the inevitable downsides.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It will come as no surprise at this point to anyone familiar with Salesforce
    architecture that the most important element for avoiding this anti-pattern is
    to have a clearly defined org strategy. This org strategy should clearly define
    when, if ever, it is permissible to spin up a new Salesforce org, as well as provide
    clear patterns to use for integration and data consolidation between orgs.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of good resources you can use to learn about org strategy.
    I recommend you start with SOGAF, which can be found on the Salesforce Architects
    site: [https://architect.salesforce.com/well-architected/overview](https://architect.salesforce.com/well-architected/overview)
    . This is a comprehensive view from the horse’s mouth, although it won’t cover
    all the details that may be required.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – SOGAF models](img/B30991_02_8.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – SOGAF models
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: In addition, in what is becoming a refrain within this book, you should define
    a common framework for governance, ideally rooted in a **Center of Excellence**
    ( **CoE** ) that has a global oversight of all things Salesforce and that is followed
    by all orgs. This framework should also include common standards and practices
    and, ideally, a level of common tooling that must be used in every environment.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: When developing your org strategy, consider the implications of AI and **machine
    learning** ( **ML** ) capabilities across different orgs. Inconsistent AI implementations
    or siloed predictive models can lead to conflicting insights and decision-making
    processes across the organization. Aim for a unified AI governance model that
    ensures consistent data quality, model performance, and ethical considerations
    across all Salesforce orgs, while still allowing for necessary customizations
    to meet specific business unit needs.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: The opposite of this pattern
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is worth noting that this anti-pattern has an exact opposite, which I like
    to call a Procrustean Bed, in honor of the Greek mythological figure Procrustes.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: This anti-pattern tries to fit all the requirements into a single org across
    geographies, business functions, and business units. While many organizations
    do well with a single global org, there are times when multiple orgs are needed
    to avoid creating a subpar user experience for key stakeholders, make genuinely
    diverse and business-critical processes work, or solve real legal issues.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: That is to say, org strategy is a balancing act, and you can go too far in either
    direction, turning it into an anti-pattern. You should refer to the SOGAF models
    mentioned previously to find the right way forward in your scenario.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: Knowing the takeaways
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will abstract a bit from the specific patterns and, instead,
    try to pull out the wider learning points that you can use in your day-to-day
    work as a Salesforce architect or when preparing for the CTA Review Board.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: 'When architecting Salesforce solutions, you should be mindful of the following:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: Many organizations are internally siloed and political, and, in these kinds
    of organizations, the default mode of operation may be to develop stovepipes or
    Big Balls of Mud.
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To avoid this, you as a Salesforce architect need to push strongly for countermeasures.
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will include pushing for strong architecture governance and coordination
    on Salesforce projects, including establishing relevant governance forums to coordinate
    activities and the right technical standards and practices to ensure everyone
    is building in a consistent way.
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to secure enough business support for these initiatives to make them
    enforceable when things get hectic; this will require careful cultivation and
    management of relevant stakeholders.
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design your systems with common abstractions – for instance, by basing different
    modules on a common package of shared functionality. This will encourage technical
    consistency between projects.
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having strong governance about common elements shared between different Salesforce
    projects, such as Hero objects that are used by nearly any Salesforce solution,
    is necessary.
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These must be used consistently and have clear ownership, or you will end up
    with a mess in your data model and, most likely, also in your automations.
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t have fuzzy boundaries between systems. Make it clear what processing needs
    to happen where, and if the boundaries have to change, make sure it is accompanied
    by process change to avoid intense-coupling scenarios.
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Favor simpler integration patterns where possible. Favor asynchronous integration
    patterns over synchronous ones where possible. This helps limit coupling.
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a clearly defined org strategy that defines when, if ever, it is appropriate
    to create a new production org.
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that relevant stakeholders are consulted before any new org is created.
    For instance, you can make it subject to approval by a Design Authority or an
    Architecture Governance board.
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that common abstractions, standards, practices, and tools are also used
    in any new orgs.
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be mindful of the Architecture as Requirements anti-pattern and ensure that
    architecture is treated as a guiding framework, not just a set of requirements
    to be implemented.
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuously evaluate and refine the architecture to keep it aligned with evolving
    business needs and technology trends.
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Foster a culture of collaboration and knowledge sharing among architects, developers,
    and stakeholders to ensure architectural best practices are widely understood
    and followed.
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In preparing for the CTA Review Board, you should be mindful of the following:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: Always include appropriate governance structures to ensure that you have a structured
    approach to implementation. These may include a CoE, an **Architecture Governance
    Forum** , and a **Project Management** **Office** ( **PMO** ).
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also worth mentioning the importance of common patterns, practices, and
    tools as a way to coordinate implementation activities between teams and ensure
    maintainability.
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is often risk associated with stakeholder management if there are multiple
    different departments or business units involved. As we have seen, bad stakeholder
    management can be a major contributing factor in selecting an anti-pattern.
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design a clear system landscape with easy-to-understand roles between the different
    systems. Avoid having lots of overlap between systems when it comes to core functionality.
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider carefully how the different elements in your solution, both on- and
    off-platform, should interact in a way that doesn’t introduce a stovepipe such
    as isolation for some elements. Your solution should present itself as a coherent
    whole.
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid unnecessary coupling between systems, and avoid especially strong dependencies
    between systems where it isn’t absolutely critical to the functional experience.
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Favor asynchronous integration patterns that reduce coupling if there isn’t
    a direct need for synchronous communication.
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should always have an org strategy, you should state it upfront, and you
    should be able to defend it from questioning.
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be careful not to veer into having either too many orgs that will be extremely
    difficult to govern effectively or a single org in a scenario that has a strong
    impetus toward splitting, such as highly variable processes or definite legal
    and compliance requirements.
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In any case, be prepared to say how you will mitigate issues associated with
    your org strategy, as no scenario is ever clear-cut, and there will be trade-offs
    to consider.
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlight the importance of defining a clear architectural vision and principles
    early on to guide design decisions throughout the project.
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discuss the role of architects in balancing individual requirements with overall
    architectural coherence and sustainability.
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain how embracing modularity, loose coupling, and clear abstractions can
    help create more adaptable and maintainable Salesforce systems.
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emphasize the value of continuous architectural evaluation and refinement to
    keep the system aligned with changing business needs.
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discuss strategies for fostering collaboration and knowledge sharing among team
    members to promote architectural best practices.
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have now covered the material for this chapter and are ready to proceed.
    First, however, we will summarize our learning.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored several anti-patterns that can arise when organizations
    fail to take a disciplined, architecture-driven approach to Salesforce implementations.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: We started by examining the Stovepipe anti-pattern, where systems are built
    in isolation with little regard for standards or common abstractions, leading
    to a landscape of disconnected, hard-to-maintain applications. We then looked
    at the Big Ball of Mud anti-pattern, characterized by a lack of structure and
    organization, resulting in an unmaintainable system.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: Next, we introduced the Architecture as Requirements anti-pattern, a common
    pitfall where architectural decisions are treated as mere requirements without
    considering the broader system context and long-term implications. We explored
    the consequences of this approach, such as increased technical debt, scalability
    issues, and limited adaptability.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: We also discussed the dangers of intense coupling between systems and modules,
    highlighting the importance of clear boundaries and favoring looser integration
    patterns to maintain system stability and flexibility.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we touched on the challenges of org proliferation in Salesforce environments
    and the need for a well-defined org strategy and governance model to prevent sprawl
    and ensure consistency across implementations.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the chapter, we emphasized the critical role of architecture governance,
    technical standards, and best practices in avoiding these anti-patterns. We stressed
    the importance of securing business support, fostering collaboration, and striking
    a balance between individual requirements and long-term architectural sustainability.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: By understanding these anti-patterns and following the guidance provided, Salesforce
    architects can create more robust, maintainable, and evolvable systems that deliver
    lasting value to their organizations. The key is to approach architecture proactively,
    think holistically, and continuously refine and adapt the system to meet changing
    business needs.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
