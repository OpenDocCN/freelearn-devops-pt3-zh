- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What Problems Does DevOps Release Management Try to Solve?
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A conventional IT organization has extremely long development cycles by today’s
    standards. In these antiquated companies, capacious amounts of manual testing
    must usually occur prior to a software product being released to production. What’s
    more, any time there’s a code change, it can cause a remarkable amount of stress
    on the stakeholders involved. While working in organizations such as these, development
    teams typically wait for clean environments to be provisioned or they must wait
    for approval prior to making any changes at all. Additionally, **quality assurance**
    (**QA**) teams might be waiting for developers to finish their work before it
    is ready for testing. All of this waiting results in low **deployment frequency**
    (**DF**) and high **lead time for** **changes** (**LTFC**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, in traditional IT organizations, many team members drop off after
    a project is finished, leaving little documentation behind and zero knowledge
    transfer. This makes things challenging when new engineers join the team and attempt
    to support the systems. Usually, this leads to a higher **mean time to recovery**
    (**MTTR**) when critical issues occur. Many organizations such as these manage
    the configuration of their environments with a dedicated operations team, whose
    sole focus is on infrastructure. They will commonly pursue manual changes to their
    servers, resulting in configuration drift, even if **Infrastructure-as-Code**
    (**IaC**) is the standard company procedure. Servers across environments may end
    up with different artifacts, such as required libraries needed for applications
    or different patch levels of the same product. All of this manual work results
    in low DF, with high lead times.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will discern how DevOps release management addresses these
    concerns by incorporating automation, minimizing risk, streamlining releases,
    and measuring success by tracking metrics and analyzing **key performance indicators**
    (**KPIs**). We are making a case for why the qualities of DevOps differentiate
    it as a superior release management methodology, particularly in the context of
    cloud-based microservice deployments.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'As such, the following topics will be covered in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Exploring automated testing, deployment, and change management
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducing potential risks and accelerating the release of software products
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streamlining the release process so that it becomes standardized
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving metrics and KPIs for successful releases
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring automated testing, deployment, and change management
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When it comes to the creation of software, most modern organizations must contend
    with a couple of significant obstacles: *deploying software quickly* and *innovating
    at scale*. The DevOps approach aims to address these challenges by implementing
    automation across the whole **software development life cycle** (**SDLC**), with
    the goal of expediting the delivery of software that is both dependable and secure.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: By merging automated testing, automated deployment, and automated change management,
    DevOps release management paves the way for operations teams to automate release
    planning. It is considerably simpler to manage and deliver successful releases
    when using automation since it makes release management an easily reproducible,
    repeatable process. This is achieved by implementing well-crafted **continuous
    integration/continuous deployment** (**CI/CD**) pipelines that are interoperable
    throughout your organization, but it is just as important that they are dependable.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: There is no denying how complex it can be to automate a DevOps framework that
    features continuous release and CD. Throughout the whole application development
    process, it is necessary to use a combination of thorough testing, extensive cross-team
    communication, cutting-edge tooling, and workflow procedures to make continuous
    releases a reality in your organization.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: In the following subsection, we will discuss the all-important topic of automated
    testing, which is the lifeblood of the DevOps philosophy.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Automated testing
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deploying automated tests as early and often as possible within a CI/CD pipeline
    has been a founding feature of DevOps from its very inception. This includes proactively
    monitoring the production environment for potential issues that would negatively
    impact users if left unchecked. The reality is that contemporary applications
    rely on numerous artifacts and services with multiple points of failure. In addition
    to using static and dynamic application analysis tools in pipelines, it is pertinent
    that you perform transactional monitoring in all development environments, not
    just production. Do this by running tests with mock data and continuous monitoring;
    this way, you can detect issues that affect any component of your application,
    including third-party **Software-as-a-Service** (**SaaS**) integrations. Some
    effective SaaS tools that facilitate this include Datadog, Dynatrace, New Relic,
    Snyk, and Prisma Cloud.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: As your development teams refine their DevOps practices, they’ll want to implement
    test automation across the entire SDLC, as this is key to unlocking the full benefits
    of DevOps. These benefits include the ability to build, test, and release faster
    and more consistently. To improve **incident response** (**IR**) encourage cooperation,
    and communicate effectively across teams, it is no longer viable to subject new
    code to hours or even days of manual QA testing before the software developers
    receive feedback about their work. QA teams must align their efforts around the
    DevOps release management life cycle by ensuring that test cases are automated
    and that they feature complete code coverage, where attainable. The configuration
    of environments needs to be standardized through the use of IaC and deployments
    should be provisioned automatically and immutably. Put another way, any pre-testing
    duties, such as infrastructure provisioning, environment configuration, post-testing
    tasks, cleanups, or related, repeatable, and mundane items should all be automated,
    aligning with the philosophy of CI.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Automated testing is the key advantage of CI, which conserves your resources
    so that you can attain economies of scale. To begin with, automated testing maximizes
    the likelihood that errors will be caught before they make it into production.
    It also speeds up the release process by notifying you of bugs and defects as
    soon as they are detected. Furthermore, a significant advantage of implementing
    CI is the potential for smaller teams to successfully perform heavier lifts. Concurrent
    integration allows you to execute multiple automated tests in rapid succession,
    commonly finished within only a few minutes each, which further reduces your testing
    expenditures. It may seem overwhelming to automate your entire development process,
    but you can start small by automating a single end-to-end process and running
    it on a regular basis. New tools and resources make automated testing more approachable
    than ever, and the benefits justify the expense. Automated testing empowers you
    to eliminate bottlenecks and boost productivity, which usually increases employee
    and customer happiness, as well as the revenue being deposited in your company’s
    bank account.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: One significant tailwind that results from automated testing is the ability
    to scale operations at the speed of today’s contemporary digital marketplace.
    DevOps techniques have a track record of producing consistent quality with reduced
    risk. This is accomplished, in part, by distributing work across multiple small
    teams that operate in a self-sufficient manner yet will socialize as a cohesive
    tribe. This communal development style encourages sharing individual techniques
    and ideas among team members while instilling a common philosophy as a **business
    unit** (**BU**). Because of the massive gains in productivity that result from
    automated testing, you will experience far better team collaboration. Your colleagues
    will not have to devote as much of their time and effort toiling over manual testing
    protocols. Instead, teams will have more opportunities for discussing optimization
    strategies or going out for fraternal lunches. Because you chose to adopt the
    DevOps culture, you have chosen shared responsibility for quality that instills
    a sense of pride among team members. By now, you can see that automated testing
    is a DevOps mainstay.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: DevOps release management can help you gain greater reliability with your infrastructure
    and business processes. What’s more, when you improve the reliability of releases
    by increasing test automation coverage, issues in production will become a rare
    occurrence. The sum of these attributes results in an empowering working environment
    that colleagues enjoy. All of these hallmarks of the DevOps release management
    methodology result in increased customer happiness. It is a proven fact that better
    reliability and prompt responses to customer feedback boost satisfaction and encourage
    more people to recommend your company’s products to others.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Automating deployment
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At its core, CD is a unified release process that incorporates automated build,
    test, and deployment steps. The objective is to streamline operations involved
    with pushing new software into production. Each business must figure out what
    mix of unit, functional, and stress tests make up its own unique suite of tests.
    To successfully stage and test builds and release candidates, it is essential
    that you simulate production environment conditions in pre-production test infrastructure
    prior to launch.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Code changes can be pushed to production automatically with the use of a CD
    pipeline, which is just an automated workflow combining builds, tests, and deployments.
    An output from one workflow phase becomes an input for the following workflow
    phase, and so on. With a DevOps approach, errors, functional difficulties, and
    defects can be prevented with CD, thanks to automated testing and monitoring performed
    at every stage of the process. By working in this way, any problems that might
    otherwise land in the main branch are caught before they ever reach production.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: The final outcome is that engineering teams have the ability to implement code
    modifications to the primary branch and promptly see their deployment in the production
    environment, typically within a matter of minutes. This particular philosophy
    of software development emphasizes the fundamental objective of DevOps, which
    is to continuously deliver value to end users. This factor also serves as a primary
    catalyst for the introduction of new features and system modifications in numerous
    applications and web-based services.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果是，工程团队能够将代码修改实施到主分支，并迅速在生产环境中看到其部署，通常在几分钟内完成。这种软件开发的哲学强调DevOps的根本目标，即持续为最终用户交付价值。这一因素也成为许多应用程序和基于网络服务中新特性和系统修改引入的主要催化剂。
- en: 'Once in place, CD enables enterprises to more easily meet customer expectations
    and release software upgrades quickly, typically within minutes after submitting
    code changes. However, adopting CD can be a huge change from the traditional method
    of spending days or even weeks getting ready to distribute software. Nevertheless,
    companies who put in the necessary effort, money, and equipment reap tangible
    benefits. The following are examples of some widely recognized benefits of adopting
    CD:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦实施，CD（持续交付）使企业能够更容易地满足客户期望，并迅速发布软件升级，通常在提交代码更改后的几分钟内完成。然而，采用CD可能会与传统的需要花费几天甚至几周时间准备发布软件的方法相比发生巨大的变化。尽管如此，那些投入必要的努力、资金和设备的公司将获得实实在在的好处。以下是一些广泛认可的采用CD的好处：
- en: '**The implementation of entirely automated product rollouts**: This empowers
    enterprises to allocate additional time toward software development rather than
    interrupting development activities in anticipation of a release day.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完全自动化产品发布的实施**：这使企业能够将更多时间分配给软件开发，而不是在发布日之前中断开发活动。'
- en: '**There should be more frequent, smaller releases**: This not only makes product
    development work go more quickly but also helps support a paradigm of continuous
    improvement.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应当有更频繁、更小规模的发布**：这不仅能使产品开发工作进展得更快，还有助于支持持续改进的范式。'
- en: '**There are rapid feedback loops related to newly implemented functionality**:
    Organizations have the ability to promptly receive real-time feedback regarding
    novel features, upgrades, and modifications to code.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与新实现的功能相关的快速反馈循环**：组织能够迅速收到关于新特性、升级和代码修改的实时反馈。'
- en: Automating change management
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化变更管理
- en: One legacy process that greatly benefits from the special touch of DevOps methods
    is change management. Many existing approaches to change management directly contradict
    the foundational tenets of the DevOps philosophy. Longer release cycles and delays
    in providing value to the client are virtually guaranteed by the bureaucracy and
    gates introduced by traditional strategies, which require numerous levels of permission
    for every change. This runs counter to the DevOps philosophy, which emphasizes
    fast iteration and frequent customer benefit. To effectively implement a DevOps
    strategy for managing changes, we must abandon our traditional, insular focus
    on maintaining stability. To fully grasp how change management can facilitate
    rapid response and adaptability while maintaining consistency, we must extend
    our lens. We don’t utilize the change approval process as roadblocks to slow down
    innovation, but rather as part of a process to speed up the delivery of new features
    to our customers.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一个从DevOps方法的特别应用中获益匪浅的传统流程是变更管理。许多现有的变更管理方法直接与DevOps哲学的基本原则相悖。传统策略引入的官僚主义和审批关卡，要求每次变更都经过多个级别的审批，这几乎确保了更长的发布周期和延迟向客户交付价值。这与DevOps哲学相悖，后者强调快速迭代和频繁的客户获益。为了有效实施DevOps策略来管理变更，我们必须放弃传统的、封闭的稳定性维护观念。要充分理解变更管理如何在保持一致性的同时促进快速响应和适应性，我们必须扩展我们的视野。我们不会将变更审批过程作为阻碍创新的障碍，而是将其作为加速向客户交付新特性的过程的一部分。
- en: Commonly, you will engage with organizations that employ CI/CD methodologies,
    enabling them to conduct numerous releases on a daily basis, sometimes reaching
    double-digit or even triple-digit figures. To effectively implement change management
    at a rapid speed, it is imperative to incorporate it into CI/CD processes. There
    are several **IT service management** (**ITSM**) tools, such as ServiceNow, Jira,
    Freshservice, and Zendesk, that provide an **application programming interface**
    (**API**), enabling seamless integration between your CD pipeline and your change
    management system. By utilizing these APIs, organizations have the capability
    to automatically generate change tickets and notify relevant parties involved.
    This practice guarantees the availability of a ticket for each modification without
    imposing any additional strain or impeding the deployment process. Numerous businesses
    have successfully facilitated the convergence of process structure, collaborative
    culture, and change management tooling, paving the way to achieving stable operating
    environments.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Adding audit trails to a pipeline is a simple thing to do and results in significant
    advantages. After implementing audit trails, anyone who is interested can find
    out how much time was spent for a recent modification to go live, why it was necessary,
    who gave their approval for it, and whether or not all checkmarks in the preceding
    phases were marked off. For instance, when an auditor demands documentation that
    a change followed your procedure in the future, all that will be required of you
    is to trace the log trails backward. You can configure fine-grained access to
    all of the information. However, along with these advantages come significant
    challenges. This is especially true in situations that require bypassing change
    management gates in order to commit manual changes in a production environment
    during an emergency situation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: This concludes our exploration of how automated testing, deployment, and change
    management greatly improve traditional software development practices. In the
    next section, we will discuss the ways that DevOps can reduce risk and improve
    velocity.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Reducing potential risks and accelerating the release of software products
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The software delivery process is facilitated by excellent communication, coordination,
    and productivity thanks to DevOps release management. Collaboration tools such
    as **Slack**, **MS Teams**, **Jira**, **Confluence**, **ClickUp**, **Asana**,
    and many other technologies facilitate superior communication, and this is important
    because collaboration between groups occurs across vast distances and time zones
    in our contemporary global economy.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: The typical implementation of the DevOps release management approach involves
    established methodologies such as CI/CD and deployment automation, substantially
    expediting the development of high-quality software while mitigating potential
    risks. Consequently, these factors enable enterprises to promptly adapt to market
    fluctuations and meet consumer demands with greater efficiency.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Among the several areas where DevOps practices have proven to be particularly
    useful is **disaster recovery** (**DR**). Automating processes, implementing CI/CD,
    and taking advantage of cloud computing are crucial to guaranteeing 99.999% uptime,
    and with no data loss. When DR planning becomes part of an organization’s DevOps
    pipeline strategy, it is often managed alongside the application itself, such
    that the changes to both get vetted on a regular basis. By including DR planning
    in the DevOps workflow, the recovery process is effectively transformed into a
    process similar to deploying an application. In addition to reducing the likelihood
    of mistakes, this also helps expedite the release of new software applications.
    In the event of a crisis, your team can leverage their expertise in deployment
    to facilitate the recovery process.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, DR environments that replicate data can contribute to recovery
    efforts. Without a doubt, the tools and procedures used to move applications from
    development, to QA, and onto production can also be applied to failing over and
    recovering from disasters or service interruptions. This ensures that by choosing
    to adopt DevOps, you will have made a worthwhile investment from a DR perspective
    as well. The bottom line: the same automated technologies employed for transitioning
    applications between development/testing and production environments can be utilized
    for failover and recovery purposes.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: This concludes our look at how DevOps release management reduces the potential
    for risks and accelerates the release of software products. In the next section,
    we’ll explore how DevOps makes the most of automation by standardizing the release
    process. It is one thing to automate things, but without optimizing them, you’ll
    be losing the peak benefits that pipelines offer you.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Streamlining the release process so that it becomes standardized
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By incorporating release management into existing DevOps workflows, the release
    process can be simplified and eventually standardized. It establishes a precedent
    for company procedures to be repeated in a uniform way. It is advised that you
    record your CI/CD pipeline results in a release log and aggregate them into your
    release management issue tracking products, source control management, and related
    tooling. After a system has been deployed, this documentation is essential for
    tracing the origins of issues and applying appropriate solutions.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: The term *release pipeline* refers to the collection of automated and manual
    processes used to guarantee that customers have access to a stable and safe build
    of a company’s software product. The duties and responsibilities of a release
    pipeline are to ensure that product enhancements are quickly and safely delivered
    to end users, beginning with changes to source code that are driven through development,
    testing, and release. **Continuous delivery** (**CD**), the process of making
    sure your code base can be safely deployed at any moment, works hand in hand with
    release pipelines. The reason for this is that they lessen the amount of time
    that developers must spend on tedious work or correcting inevitable bugs that
    crop up.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: The most significant advantage of a release pipeline is that it will shorten
    the time required to deliver a new release while still guaranteeing stability.
    In case something goes wrong, you’ll have automatic rollback procedures and fail-safes
    in place. Overall, your users will have access to new features (or bug fixes)
    sooner. Predictability and dependability are both improved through release pipelines,
    and increased developer productivity is another advantage. Developers can avoid
    wasting time justifying their actions or refactoring releases after the fact due
    to built-in audit features. They will have more time to devote to writing code
    (the activity that provides value to the business) and less time to worry about
    peripheral details.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: A release pipeline acts as the orchestrator of your company’s software distribution.
    This implies that the system will automatically make decisions using inputs and
    data obtained from the release. Further, it will address frequent problems in
    real time or, in some cases, instantly revert the deployment if it identifies
    any adverse effects on customers. The release pipeline is tailored to the unique
    requirements and administrative framework of your business’s operations. The tool
    has the capability to offer comprehensive feedback and valuable metrics, enhancing
    the overall awareness of the entire release process; this type of visibility is
    not attainable by any alternative means.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: The implementation of orchestrated release pipelines facilitates the ability
    to accurately forecast the results of projects and ultimately validate their achievements
    or shortcomings. Operations teams, which are frequently evaluated based on release
    velocity, efficiency, and effectiveness, can also benefit from release pipelines.
    Quicker than scripted deployments and less taxing on resources, release pipelines
    are becoming increasingly popular. This is because they reduce risk and incorporate
    automatic corrective procedures for when things go wrong, relieving operations
    teams of the most intractable and mundane vexations.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: This ends our glimpse at how DevOps release management can streamline the release
    process. In the following section, you’ll see how to quantitatively measure your
    success. This can be used to verify that your processes are improving and to demonstrate
    value to senior executives.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Improving metrics and KPIs for successful releases
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By setting standards, DevOps release management aids in the development of superior
    software releases. With the use of automation, version control, and **quality
    control** (**QC**), development teams can gain insight into metrics that are needed
    to produce more frequent releases with a lower failure rate.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: It is just as true with DevOps as it is with anything else that you cannot improve
    what you cannot measure. DevOps performs best when teams collect, analyze, and
    measure a wide variety of data in order to deliver on the promise of faster, higher-quality
    product delivery. These DevOps metrics supply the critical information needed
    for DevOps teams to gain command of the SDLC. Metrics used in DevOps software
    development highlight the pipeline’s efficiency and allow for the prompt elimination
    of any obstacles that prevent progress. These metrics can be used to monitor technical
    competency as well as operational efficiency.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: The primary objective of DevOps is to eliminate the distinction between development
    and operations teams, which in turn fosters a closer working relationship between
    software programmers and computer system administrators. Metrics enable DevOps
    teams to measure and evaluate collaborative workflows objectively and track progress
    toward reaching high-level goals such as enhanced application performance, accelerated
    release cycles, and increased quality.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Four critical DevOps metrics
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Effective software development, delivery, and maintenance can be measured with
    the help of the **DevOps Research and Assessment** (**DORA**) metrics framework.
    Organizations can use these metrics as a starting point for continual improvement
    of their DevOps performance and the realization of better business outcomes, as
    they reveal which teams are elite-performing and those that are low-performing.
    DevOps and engineering managers have a good idea of how their teams are doing,
    but they have a harder time putting a number on the value they bring to the company
    and figuring out where they can make improvements. With the use of DORA metrics,
    software delivery performance can be objectively measured and optimized, and the
    value to the business can be substantiated:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 4.1: Example DORA metrics dashboard](img/B21803_04_1.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.1: Example DORA metrics dashboard'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'The DORA method includes four key metrics, as detailed next, to assess two
    fundamental dimensions of DevOps: namely, velocity and reliability. The measurement
    of a DevOps team’s velocity is determined by their DF and mean LTFC, whereas the
    measurement of a DevOps team’s reliability is determined by their **change failure
    rate** (**CFR**) and **time to restore service** (**TTRS**) metrics. When analyzed
    collectively, these four DORA metrics establish a fundamental measure of a DevOps
    team’s success and offer inclinations on areas that may require improvement.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: LTFC
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: LTFC is considered to be one of the crucial metrics that DevOps teams are required
    to monitor. The concept of LTFC should not be mistaken for cycle time. LTFC refers
    to the duration between the moment a code change is committed to the main branch
    and the point at which it becomes deployable, for instance, when the fresh code
    successfully completes all required pre-release tests.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: In general, teams that demonstrate elite levels of performance tend to quantify
    lead times in terms of hours, whereas teams with poor levels of performance tend
    to quantify lead times in terms of days, weeks, or even months. Improving turnaround
    time requires a combination of test automation, trunk-based development, well-designed
    feedback loops, and iterative, incremental work. Only after adhering to these
    principles will developers quickly assess how well their code has been written
    and fix any flaws they find before they are released. When multiple developers
    make substantial changes in parallel, on different branches, and then rely on
    manual testing to ensure quality, lead times inevitably balloon.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: CFR
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The percentage of changes to the code that cause problems after being released
    to consumers and need to be fixed is known as the CFR. This does not account for
    bugs that were discovered in testing and repaired before the code was released.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Highly effective teams exhibit CFRs that typically fall within the range of
    0 to 15%. Reduced CFRs are correlated with the use of the same approaches (test
    automation, trunk-based development, and working in small batches) that shorten
    lead times. As an outcome of implementing these procedures, finding and fixing
    bugs becomes far less of a burden. Monitoring and reporting on CFRs are essential
    not only for locating and correcting problems but also for making certain that
    newly released code satisfies all necessary security standards.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: DF
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: DevOps success can be gauged in large part by how often new code is pushed into
    production. Many professionals use the phrase *delivery* to refer to the release
    of code changes into a pre-production staging environment, and the term *deployment*
    to refer to the release of code changes into production.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: The best teams can roll out updates whenever they need to, which can be several
    times a day. Teams with lower performance levels typically can only deploy once
    a week or once a month. The capability to deploy on-demand necessitates being
    equipped with an automated deployment pipeline that not only incorporates the
    automated testing and feedback mechanisms that have been covered in preceding
    sections but also reduces the amount of manual intervention that is required.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: MTTR
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The metric known as MTTR quantifies the duration required to restore operations
    following either a partial disruption or a complete breakdown of service. Tracking
    this metric is crucial, irrespective of whether the interruption results from
    a recent deployment, an individual server failure, or anything in between. Highly
    effective teams demonstrate a rapid recovery from system failures, typically within
    a time frame of less than 1 hour. Conversely, less proficient teams may require
    up to a week to fully recover from such failures.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: The emphasis on MTTR is a departure from the customary emphasis on **mean time
    between failures** (**MTBF**). It’s a reflection of how complicated current programs
    have become and how likely they are to break. In addition, this encourages the
    habit of always trying to do better. Teams now continually deploy instead of waiting
    for the release to be *perfect* to avoid any failure. Instead of looking for scapegoats
    for the disruption of an ostensibly flawless MTBF record, MTTR promotes blameless
    retrospectives as a means for teams to enhance their upstream processes and tooling.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Cycle time, or the amount of time it takes for a product to go from being worked
    on by a team to being shipped, is another relevant statistic to keep track of.
    The time it takes from when a developer makes a commit to when it is pushed to
    production is known as the “development cycle time.” This essential DevOps indicator
    is useful for project managers and engineering managers to gain insight into the
    development pipeline’s success factors. Consequently, they will be able to ensure
    that their team’s work is more aligned with the expectations of stakeholders and
    customers, allowing them to ship products sooner.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Project managers can use cycle-time reports to define a fundamental baseline
    for their CI/CD pipelines, which could then be used for evaluating future operations.
    When teams prioritize the optimization of cycle time, developers generally experience
    a reduction in their **work-in-progress** (**WIP**) and a decrease in the incidence
    of wasteful activities.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding what problems DevOps release management was designed to solve
    is crucial before you can expect to wield it effectively. After reading this chapter,
    you should have a baseline knowledge of many key aspects of the DevOps life cycle.
    You now understand the importance of incorporating automation techniques for testing,
    deployment, and change management. Further, you learned about strategies that
    reduce potential risks and accelerate the release of software products, using
    release pipelines. Also, you now understand what steps are needed to streamline
    the release process in a standardized way. Finally, you have the foundational
    knowledge that is needed to improve metrics and KPIs for successful releases and
    customer happiness.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll learn about the essence of what makes DevOps release
    management unique compared to other release management models. By learning the
    DevOps release management philosophy, you’ll understand the key differences that
    set it apart. You’ll learn why DevOps is holistic and requires cultural significance
    in your organization. Also, you’ll understand the game-changing strategy that
    DevOps uses to integrate CI/CD, QA, security, and feedback loops. You will also
    learn the significance of how DevOps incorporates business teams into the development
    process. Further, you will be exposed to Gene Kim’s *The Three Ways* DevOps principles.
    Finally, you’ll be shown the differences between traditional release management
    methodologies and DevOps.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: What is the distinction between continuous deployment and continuous release?
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are audit trials, and what are their benefit?
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the most appropriate stage for automated testing within the context
    of a DevOps release management life cycle?
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should the change approval process be handled within the context of a DevOps
    release management approach?
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does a release pipeline do?
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you incorporate a DR strategy within the context of a DevOps release
    management approach?
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do ITSM tools automate change management?
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the four DORA metrics?
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the best way to incorporate data from release logs within the context
    of a DevOps release management approach?
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there were one DevOps metric that was most important, which one would that
    be?
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
