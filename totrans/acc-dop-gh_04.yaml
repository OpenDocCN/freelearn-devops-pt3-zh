- en: '*Chapter 3*: Teamwork and Collaborative Development'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A high-performing team is more than the sum of its members, and it takes a high-performing
    team to build products that people love.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you'll learn how to set up your team for high collaborative
    development using pull requests. You'll learn what a pull request is and which
    features can help you to get a good code review workflow for your team.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following core topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Software development is a team sport
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The heart of collaboration: the pull request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hands-on: Creating a pull request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proposing changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pull request reviews
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hands-on: Making suggestions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices for code reviews
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software development is a team sport
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The designer and engineer Peter Skillman created an experiment: he challenged
    teams of four persons to compete against each other in the marshmallow challenge.
    The rules are simple—build the highest possible structure that can support a marshmallow
    using the following material:'
  prefs: []
  type: TYPE_NORMAL
- en: 20 pieces of uncooked spaghetti
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 yard of transparent tape
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 yard of string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 marshmallow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The experiment was not about the problem itself—it was about how the teams would
    work together to solve the problem. In the experiment, teams of business students
    from Stanford and the University of Tokyo competed against kindergartners. And
    guess who was the winner?
  prefs: []
  type: TYPE_NORMAL
- en: 'The business students examined the materials, discussed the best strategy,
    and carefully picked the most promising ideas. They acted professionally and in
    a rational and intelligent way, and yet the kindergartners always won. They did
    not decide on the best strategy—they just got to work and started experimenting.
    They stood close together and communicated in short bursts: *Here, no, here!*'
  prefs: []
  type: TYPE_NORMAL
- en: The kindergartners did not win because they were more intelligent or skilled.
    They won because they worked better together as a team (*Coyle D.(2018)*).
  prefs: []
  type: TYPE_NORMAL
- en: 'And you can observe the same in sports: you can put the best players in one
    team, and yet if they don''t form a good team, they will lose to a team with less
    skilled individuals who work perfectly together.'
  prefs: []
  type: TYPE_NORMAL
- en: In software engineering, we want teams with high cohesion, not just individual
    experts that work together but team members that experiment together like the
    kindergartners in the marshmallow experiment. We do this by looking for so-called
    **E-shaped** team members as the evolution of **T-shaped** team members. **I-shaped**
    specialists have deep experience in one area but very little skills or experience
    in other areas. T-shaped people are generalists with deep experience in one area
    but also a broad set of skills across many areas. The evolution is E-shaped people—**E**
    for **experience**, **expertise**, **exploration**, and **execution**. They have
    deep experience in multiple areas with proven execution skills. They are always
    innovating and eager to learn new skills. E-shaped people are the best way to
    combine different areas of expertise into one high-collaborative team (*Kim G.,
    Humble J., Debois P. and Willis J.*).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see very quickly how your team is collaborating by looking at some
    of the **pull requests**. Who does the code reviews, and on which topics? What
    are the issues people are discussing about? How is the tone? If you have ever
    seen pull requests of high-performing teams, you''ll know that you can easily
    spot things that are not going well. Here are some pull request anti-patterns
    that you can easily spot:'
  prefs: []
  type: TYPE_NORMAL
- en: Pull requests are too big and contain many changes (**batch size**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pull requests are only created when a feature is already finished or on the
    last day of the sprint (**last-minute approvals**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pull requests are approved without any comments. This is normally because people
    just approve to not mess with the other team members (**auto-approvals**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comments rarely contain questions. This normally means the discussions are about
    **irrelevant details**—such as formatting and style—and not about architectural
    design issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I'll show you later *the best practices for code reviews* and how you can avoid
    these anti-patterns. Let's first have a closer look at what a pull request is.
  prefs: []
  type: TYPE_NORMAL
- en: The heart of collaboration – the pull request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A **pull request** is more than just a classical code review. It''s a way to
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Collaborate on code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Share knowledge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create shared ownership of the code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaborate across team boundaries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But what exactly is a pull request? A **pull request**—also known as a **merge
    request**— is a process of integrating changes from other branches into a target
    branch in your **Git** repository. The changes can come from a branch within your
    repository or from a **fork**—a copy of your repository. Pull request is often
    abbreviated to **PR**. People without write permissions can fork your repository
    and create pull requests. This allows owners of open source repositories to allow
    contributions without giving everyone write access to the repository. That's why
    in the open source world, pull requests are the default for integrating changes
    into the repository.
  prefs: []
  type: TYPE_NORMAL
- en: Pull requests can also be used to collaborate cross-team in an open source style
    called inner source (see [*Chapter 5*](B17827_05_Epub.xhtml#_idTextAnchor130),
    *Influence of Open and Inner Source on Software Delivery Performance*).
  prefs: []
  type: TYPE_NORMAL
- en: About Git
  prefs: []
  type: TYPE_NORMAL
- en: '`git – the stupid content tracker` (see Git man page in *Figure 3.1*).'
  prefs: []
  type: TYPE_NORMAL
- en: Git was created in 2005 by Linus Torvalds as the RCS for the Linux kernel. Until
    2005, BitKeeper was used for that purpose, but due to a license change, BitKeeper
    could not be used any longer without costs for open source.
  prefs: []
  type: TYPE_NORMAL
- en: Git is the most popular RCS today and there are many books on Git alone (see
    Chacon S. and Straub B., 2014; Kaufmann M., 2021; and many more). Git is at the
    heart of GitHub, but in this book, I focus on GitHub as a **DevOps** platform
    and not as an RCS.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 11*](B17827_11_Epub.xhtml#_idTextAnchor249), *Trunk-Based Development*,
    I'll talk about branching workflows as this is related to engineering velocity,
    but I'll not dive deeper into branching and merging. Please refer to the *Further
    readings and references* section for that.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3.1* shows the `man` page for Git:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – The man page for Git – the stupid content tracker'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 – The man page for Git – the stupid content tracker
  prefs: []
  type: TYPE_NORMAL
- en: 'Git versions text files on a per-line basis. This means the pull request focuses
    on lines changed: a line can be added, removed, or both—in this case, you can
    see the differences between the old and the new line. Before merging, the pull
    request allows you to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Review changes and comment on them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build and test the changes together with new code in the source repository without
    merging it first
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only if the changes pass all checks do they get merged back automatically by
    the pull request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since everything is code in modern software engineering, it is not only about
    source code. You can collaborate on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Architecture, design, and concept documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infrastructure (as code)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration (as code)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Everything can be done in a text file. In the previous chapter, I already talked
    about **markdown** as the standard for human-readable files. It is perfect for
    collaborating on concept documents and documentation. You can also render markdown
    to **Portable Document Format** (**PDF**) documents if you require physical documents
    that can be archived or sent to customers. You can extend markdown with diagrams—for
    example, with *Mermaid* (see [https://mermaid-js.github.io/mermaid/](https://mermaid-js.github.io/mermaid/)).
    While **markdown** is for human-readable files, **YAML Ain't Markup Language**
    (**YAML**) is for machine-readable files. So, with a combination of source code,
    markdown, and YAML, you can automate the creation of all artifacts of your development
    life cycle and collaborate on changes just as you collaborate on the source code!
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: 'At GitHub, everything is basically handled as markdown. Even the legal team
    and **human resources** (**HR**) use markdown, issues, and pull requests to collaborate
    on contracts. One example is the hiring process: job descriptions are stored as
    markdown and the complete hiring process is tracked using issues. Other examples
    are the GitHub site policies (such as *Terms of Service* or *Community Guidelines*).
    They are all in markdown and are open source ([https://github.com/github/site-policy](https://github.com/github/site-policy)).'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn more about GitHub team collaboration, see [https://youtu.be/HyvZO5vvOas?t=3189](https://youtu.be/HyvZO5vvOas?t=3189).
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on – Creating a pull request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are new to pull requests, it''s best to create one to experience what
    it is about. If you are already familiar with pull requests, you can skip this
    part and continue reading about the *pull request features*. Proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the following repository and create a fork by clicking **Fork** in the
    top-right corner of the repository: [https://github.com/wulfland/AccelerateDevOps](https://github.com/wulfland/AccelerateDevOps).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the fork, navigate to `Chapter 3` | `ch3_pull-request/Create-PullRequest.md`).
    The file also contains instructions so that you don't have to switch between your
    browser and the book all the time.
  prefs: []
  type: TYPE_NORMAL
- en: Edit the file by clicking the **Edit** pencil icon above the file content.
  prefs: []
  type: TYPE_NORMAL
- en: Delete the row that is marked in the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a few rows of random text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify one line by removing letters that exceed the permitted length.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Commit your changes, but not directly to the `main` branch. Commit them to
    a new **branch** like in Figure 3.2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Committing the changes to a new branch'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 – Committing the changes to a new branch
  prefs: []
  type: TYPE_NORMAL
- en: 'You automatically get redirected to a page where you can create a pull request.
    Enter a title and a description. Note that you have full markdown support with
    all the features you know from the issues in [*Chapter 2*](B17827_02_Epub.xhtml#_idTextAnchor047),
    *Planning, Tracking, and Visualizing your Work*: emoticons (`:+1:`), mentions
    (`@`), references (`#`), task lists (`– [ ]`), and source code with syntax highlighting
    ([PRE0]). You also can assign assignees, labels, projects, and milestones.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top of the page, you see that the target branch (`base`) is `main` and
    that the source branch to integrate is the one you just created. The **Create
    pull request** button is a dropdown. You could also choose to create a draft pull
    request. For now, we skip this and create a pull request by clicking the **Create
    pull request** button, (see *Figure 3.3*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Creating a pull request for the changes you made to the file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 – Creating a pull request for the changes you made to the file
  prefs: []
  type: TYPE_NORMAL
- en: 'In the pull request, navigate to **Files changed** and note the changes you
    made to the file: deleted lines are red, added lines are green, and modified lines
    are a deleted line followed by an added line. If you hover with your mouse over
    the lines, you get a plus **+** icon on the left side. If you click the icon,
    you can add a single-line comment. If you hold the icon and pull it, you can add
    a comment for multiple lines. The comment has, again, the same markup support
    as issues with all the rich features! Add a comment and click **Add single comment**
    (see *Figure 3.4*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Adding a comment to a changed line'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.4 – Adding a comment to a changed line
  prefs: []
  type: TYPE_NORMAL
- en: The important difference between a classical code review and a pull request
    is that you can update a pull request. This allows you to address comments and
    work together on issues until they are closed. To show this, you'll edit the file
    and commit to the new branch to see that the pull request will reflect the changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can edit the file directly from the pull request by opening the menu in
    the top-right corner and selecting **Edit file** (see *Figure 3.5*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Editing file from within the pull request'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.5 – Editing file from within the pull request
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the file by adding a new line of text to it. Commit the changes to the
    branch you created before creating the pull request (see *Figure 3.6)*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Committing the changes to your branch'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.6 – Committing the changes to your branch
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate back to the pull request and note that your changes are automatically
    displayed. You can see all changes in a file under **Files changed** or you can
    see changes in individual commits under **Commits** (see *Figure 3.7*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Committing the changes to your branch'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_007.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.7 – Commenting on changes in individual commits
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are new to pull requests on GitHub, the important takeaways are these:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A pull request is about the **changes** in a branch to a base branch. If you
    update the branch, the pull request gets automatically updated.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can **collaborate** on all changes using the rich features you already
    know from GitHub issues: task lists, mentions, references, source code, and so
    on.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can look at changes on a **per-file** base or a **per-commit** base. This
    helps separate important changes from unimportant ones (for example, refactoring).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Proposing changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub pull requests have a rich feature set that helps you to improve your
    collaboration flow.
  prefs: []
  type: TYPE_NORMAL
- en: Draft pull requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When is the best time to create a pull request? You can argue about this, but
    I''d say: the earlier the better! Ideally, you create a pull request the moment
    you start working on something. This way, your team always knows what everybody
    is working on by just looking at the open pull requests. But if you open a pull
    request too early, the reviewers don''t know when to give feedback. That''s where
    **draft pull requests** come in handy. You can create your pull request early,
    but everyone knows that the work is still in progress and reviewers do not get
    notified yet, but you still can mention people in comments to get early feedback
    on code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating a pull request, you can directly create it in a draft state (see
    *Figure 3.8*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Creating a pull request as a draft'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_008.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.8 – Creating a pull request as a draft
  prefs: []
  type: TYPE_NORMAL
- en: 'Draft pull requests are clearly marked as `draft:true` or `draft:false` as
    a search parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Draft pull requests are marked with their own symbol'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_009.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.9 – Draft pull requests are marked with their own symbol
  prefs: []
  type: TYPE_NORMAL
- en: If your pull request is already in a review state, you can still change the
    state back at any time by clicking the link under **Reviewers** | **Still in progress?**
    | **Convert to draft**.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your pull request is ready to be reviewed, just click on **Ready for review**
    (see *Figure 3.10*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – Removing the draft state of a pull request'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_010.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.10 – Removing the draft state of a pull request
  prefs: []
  type: TYPE_NORMAL
- en: Draft pull requests are a great feature to collaborate early on changes using
    pull requests in a way that is transparent for the team.
  prefs: []
  type: TYPE_NORMAL
- en: Code owners
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Code owners** are a good way to automatically add reviewers to a pull request
    if certain files in your repository are changed. This feature can also be used
    to collaborate across team boundaries or add approvals in early development stages
    instead of requiring them in the release pipeline. Let''s say you have infrastructure
    defined as code in your repository. You can use code owners to require a review
    from a person in the shared operations team, or you have files that define the
    look and feel of your application. Every time you change them, you might want
    to have approval from the design team. Code owners are not just about the approval;
    they can also be used to spread knowledge in communities of practice across team
    boundaries.'
  prefs: []
  type: TYPE_NORMAL
- en: Code owners can be teams or individuals. They need write permissions in order
    to become a code owner. Code owners get added as a reviewer if a pull request
    moves out of the draft state.
  prefs: []
  type: TYPE_NORMAL
- en: 'To define code owners, you create a file with the name `CODEOWNERS` either
    in the root of the repository, a `docs/` folder, or a `.github/` folder. The syntax
    of the file is simple, as outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: Use `@username` or `@org/team-name` to define the code owners. You can also
    use the email addresses of users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use patterns to match files to assign code owners. The order is important:
    the last matching pattern takes precedence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `#` for comments, `!` to negate a pattern, and `[` `]` to define character
    ranges.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example of a code owner file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'See the following page, *About code owners*, for more details: [https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-code-owners.](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-code-owners
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Code owners are a great way to get shared knowledge across team boundaries and
    to shift approvals from change boards in release pipelines to early approvals
    when changes happen.
  prefs: []
  type: TYPE_NORMAL
- en: Required reviews
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can require a given number of approvals before merging a pull request.
    This is set on a **branch protection rule** that can apply to one of many branches.
    You create branch protection rules under **Settings** | **Branches** | **Add rule**.
    In the rule, you can set the number of **required reviews** before merging, choose
    whether you want to dismiss approvals when changes are made to the code, and enforce
    approvals from code owners (see *Figure 3.11*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Required reviews for a specific branch'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_011.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.11 – Required reviews for a specific branch
  prefs: []
  type: TYPE_NORMAL
- en: For more information on branch protection, see https://docs.github.com/en/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-rules.
    I will cover this topic in more detail in [*Chapter 7*](B17827_07_Epub.xhtml#_idTextAnchor175),
    *Trunk-Based Development*.
  prefs: []
  type: TYPE_NORMAL
- en: Requesting a pull request review
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If your code is ready to be reviewed, you can manually add the required number
    of reviewers. GitHub provides you with **reviewers'' suggestions** based on the
    author of the code that you have changed (see *Figure 3.12*). You can just click
    on **Request** or you can manually search for people to perform the review:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12 – Suggested reviewers'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_012.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.12 – Suggested reviewers
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also have GitHub automatically assign reviewers to your team. You configure
    this per team under **Settings** | **Code review assignment**. You can select
    the number of reviewers that automatically get assigned and select one of the
    following two algorithms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Round robin**: Chooses reviewers based on who received the least recent requests
    so far'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Load balance**: Chooses reviewers based upon each member''s total number
    of review requests considering outstanding reviews'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can exclude certain members from reviews, and you can select to not notify
    the entire team when reviewers are assigned. See Figure 3.13 for how to configure
    code review assignments for your team:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13 – Managing code review assignments for your team'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_013.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.13 – Managing code review assignments for your team
  prefs: []
  type: TYPE_NORMAL
- en: Auto-merge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of my favorite features from pull requests is **auto-merge**. This allows
    you to increase your velocity when working on small changes, especially if you
    have **continuous deployment** (**CD**) enabled. Auto-merge automatically merges
    your changes if all policies are met. If you have done your changes, you enable
    auto-merge and can work on other changes. If your pull request has the required
    number of approvals and all automatic checks pass, the pull request gets automatically
    merged and deployed to production.
  prefs: []
  type: TYPE_NORMAL
- en: Pull request reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have been selected for a review, you can comment on many changes, make
    suggestions, and in the end submit your review with one of the following notations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Comment**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Approve**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Request changes**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the previous section, I focused on pull request features relevant to the
    author of a pull request. In this section, I describe a feature that helps reviewers
    to perform a review and give proper feedback to the author.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing proposed changes in a pull request
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can start your review by looking at the changes one file at a time. If you
    hover over lines, you see the **+** icon on the left. It can be used to add a
    single-line comment, or by dragging it over multiple lines, you can create a multiline
    comment. If you have a comment, you select **Start review** to start the review
    process without submitting the comment yet. If you add more comments, the button
    changes to **Add review comment**; you can add as many comments to a review as
    you want. Comments are only visible to you until you submit the review! You can
    cancel a review at any time.
  prefs: []
  type: TYPE_NORMAL
- en: Marking files as viewed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When reviewing, you see a progress bar at the top of the file. When you''re
    done with one file, you can select the **Viewed** checkbox. The file will be collapsed
    and the progress bar will show the progress (see *Figure 3.14*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Marking files as viewed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_014.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.14 – Marking files as viewed
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on – Making suggestions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The best way to give feedback is by making **suggestions** that the author
    of the pull request can easily integrate into their branch. This feature is so
    important that it is worth trying it out if you''ve never tried it. Here''s how
    you''d go about this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the fork from the repository you created in the previous hands-on exercise:
    https://github.com/<your user name>/AccelerateDevOps.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the fork, navigate to `Chapter 3` | `ch3_pull-request/Review-Changes.md`).
    The file also contains instructions so that you don't have to switch between your
    browser and the book all the time.
  prefs: []
  type: TYPE_NORMAL
- en: Copy the sample source code by clicking the **Copy** icon in the top-right corner
    of the source code block.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to `src/app.js` (use the link in markdown). Select the branch you
    created in the previous hands-on exercise and edit the file by clicking the **Edit**
    icon (pencil) in the top-right corner (see *Figure 3.15*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Editing code file to add sample code'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_015.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.15 – Editing code file to add sample code
  prefs: []
  type: TYPE_NORMAL
- en: Delete *line 2* and insert the code by pressing *Ctrl* + *V*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit directly to the source branch of your pull request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate back to the pull request and look for `src/app.js` under **Files changed**.
    Note that the nested loop in *lines 6* to *9* is not correctly indented. Mark
    *lines 6* to *9* and create a multiline comment. Click the **Suggestion** button
    and you''ll see that the code is in the suggestion block, including whitespaces
    (see *Figure 3.16*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.16 – Creating a suggestion for a multiline comment'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_016.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.16 – Creating a suggestion for a multiline comment
  prefs: []
  type: TYPE_NORMAL
- en: Note that the `suggestion` code block contains the complete code, including
    whitespaces. Add four blanks at the beginning of each line to fix the indentation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can make the suggestion part of a review (**Start a review**) or submit
    the suggestion directly to the author (**Add single comment**). For this hands-on
    exercise, we add the suggestion as a single comment.
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating feedback into your pull request
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since you are the reviewer and author, you can directly switch roles. As the
    author, you see all suggestions for your pull request.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can commit a suggestion directly to your branch, or you can batch multiple
    suggestions to one commit and then commit all the changes at once. Add the change
    to the batch and apply the batch at the top of the file (see *Figure 3.17*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.17 – Incorporating suggestions into your code'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_017.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.17 – Incorporating suggestions into your code
  prefs: []
  type: TYPE_NORMAL
- en: Suggestions are a great way to provide feedback and suggest code changes. They
    are really easy for an author to incorporate into their code.
  prefs: []
  type: TYPE_NORMAL
- en: Submitting a review
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have finished your review and added all your comments and suggestions,
    you can submit it. The author will be informed about the outcome and can answer
    your comments. You can leave a final comment and select one of these three options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Approve**: Approves the changes. This is the only option that counts to the
    required reviewer count!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Comment**: Submit feedback without approval or denial.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Request changes**: Indicate that changes are needed for approval from your
    side.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finish the review by clicking **Submit review** (see *Figure 3.18*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18 – Finishing your review'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_018.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.18 – Finishing your review
  prefs: []
  type: TYPE_NORMAL
- en: Finishing your pull request
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to abandon the changes in your branch, you can close a pull request
    without merging. To incorporate your changes into the base branch you have three
    **merge** options, outlined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create a merge commit**: This is the default option. It creates a merge commit
    and displays all commits from your branch as a separate branch in the history.
    If you have many long-running branches, this can clutter the history. You can
    see a representation of this merge option here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.19 – Git history if you do a merge commit'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_019.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.19 – Git history if you do a merge commit
  prefs: []
  type: TYPE_NORMAL
- en: '**Squash and merge**: All the commits from the branch will be combined into
    a single commit. This creates a clean, linear history and is a good merge method
    if you delete the branch after merging. It is not recommended if you keep working
    on the branch. You can see a representation of this merge option here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.20 – Git history if you do a squash and merge'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_020.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.20 – Git history if you do a squash and merge
  prefs: []
  type: TYPE_NORMAL
- en: '**Rebase and merge**: Applies all the commits of the branch to the head of
    the base branch. This also creates a linear history but keeps the individual commits.
    It''s also not recommended if you keep working on the branch. You can see a representation
    of this merge option here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.21 – Git history seems linear if you do a rebase and merge'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_021.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.21 – Git history seems linear if you do a rebase and merge
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the merge method you want and click **Merge pull request** (see *Figure
    3.22*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.22 – Finishing a pull request'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03_022.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.22 – Finishing a pull request
  prefs: []
  type: TYPE_NORMAL
- en: Modify the merge message and click **Confirm merge**. After the merge, you can
    delete the branch if you want.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices for code reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pull requests are a great way to collaborate on any kind of code. This chapter
    only scratches the surface of the possibilities you have for your collaboration
    workflow, but to get your teams to effectively collaborate, you should consider
    some best practices for effective code reviews.
  prefs: []
  type: TYPE_NORMAL
- en: Teach Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This one might look obvious, but make sure your teams are well trained in Git.
    Well-crafted commits with a **good commit message** that only serve **one purpose**
    are much easier to review than many changes spread randomly across multiple commits.
    In particular, mixing refactoring and business logic makes reviews a nightmare.
    If team members know how to fix up commits, patch changes they made in different
    commits, and how to craft good commit messages, the resulting pull request will
    be much easier to review.
  prefs: []
  type: TYPE_NORMAL
- en: Link pull request to issue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Link the pull request to the corresponding issue that initiated the work. This
    helps to give context to the pull request. If you use third-party integration,
    link the pull request to the Jira ticket, Azure Boards work item, or any other
    source you have connected to GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Use draft pull requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Have the team members create a **draft pull request** right when they **start
    working** on something. This way, the team knows who is working on what. This
    also encourages people to use comments with mentions to ask people for feedback
    before the review starts. Early feedback on changes helps to get faster reviews
    at the end.
  prefs: []
  type: TYPE_NORMAL
- en: Have a minimum number of two approvers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should have a **minimum number** of two **required approvers**. The more
    the better, depending on team size. But one is not enough. Having multiple reviewers
    gives reviews some kind of dynamic. I noticed big changes in the review practice
    of some teams by just changing this from one to two!
  prefs: []
  type: TYPE_NORMAL
- en: Do peer reviews
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Consider reviews to be **peer reviews**. Do not have senior architects review
    the code of others! Younger colleagues should also do reviews of peers to learn.
    A good practice is to add the entire team as reviewers and require a certain percentage
    of approvals (for example, 50%), and then people pick the pull requests they want.
    Or, you could use **automatic review assignments** to distribute reviews randomly
    in your team.
  prefs: []
  type: TYPE_NORMAL
- en: Automate review steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many review steps can be automated, especially formatting. Have a good linter
    **check the formatting** of code (for example, [https://github.com/github/super-linter](https://github.com/github/super-linter)),
    or write some tests to check if the documentation is complete. Use static and
    dynamic code analysis to find issues automatically. The more you automate banal
    checks, the more the reviews can concentrate on important things.
  prefs: []
  type: TYPE_NORMAL
- en: Deploy and test changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Build and test your changes automatically before merging. Install the code to
    test if necessary. The more confident people are that the changes will not break
    anything, the more they will trust in the process. Use **auto-merge** to automatically
    merge and release your changes if all approvals and validation pass. The high
    automation makes people work in smaller batch sizes, which makes reviews much
    easier.
  prefs: []
  type: TYPE_NORMAL
- en: Review guidelines/code of conduct
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some engineers have a strong opinion on what is the right way to do something,
    and debates can run out of hand quickly. You want to have intense discussions
    to get the best solutions, but you want these to happen in an inclusive way so
    that everyone in the team can participate equally. Having **review guidelines**
    and a **code of conduct** in place helps as a gatekeeper. If people do not behave
    appropriately, you can point to the rules.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Software development is a team sport, and it is important to have a team with
    shared ownership for the code that collaborates tightly on new changes. A GitHub
    pull request can help to achieve this if it is used in the right way.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will about asynchronous and synchronous work, and how
    asynchronous workflows can help you to collaborate from anywhere at any time.
  prefs: []
  type: TYPE_NORMAL
- en: Further readings and references
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the references from this chapter that you can also use to get more
    information on the topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Coyle D*. (2018). *The Culture Code: The Secrets of Highly Successful Groups*
    (1st ed.). *Cornerstone Digital*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Kim G*., *Humble J.*, *Debois P.* and *Willis J.* (2016). *The DevOps Handbook:
    How to Create World-Class Agility, Reliability, and Security in Technology Organizations*
    (1st ed.). *IT Revolution Press*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scott Prugh (2014). *Continuous Delivery*. [https://www.scaledagileframework.com/guidance-continuous-delivery/](https://www.scaledagileframework.com/guidance-continuous-delivery/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Chacon S.* and *Straub B.* (2014). *Pro Git* (2nd ed.). *Apress*. [https://git-scm.com/book/de/v2](https://git-scm.com/book/de/v2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Kaufmann M.* (2021). *Git für Dummies* (1st ed., German). *Wiley-VCH*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Git: [https://en.wikipedia.org/wiki/Git](https://en.wikipedia.org/wiki/Git)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pull requests: [https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests](https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Code owners: https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-code-owners'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Branch protection: https://docs.github.com/en/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-rules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Code review assignments: https://docs.github.com/en/organizations/organizing-members-into-teams/managing-code-review-assignment-for-your-team'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Auto-merge: [https://docs.github.com/en/github/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request](https://docs.github.com/en/github/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pull request reviews: [https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews](https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
