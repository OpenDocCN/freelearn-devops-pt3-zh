- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Using Python for CI/CD Pipelines
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 进行 CI/CD 流水线
- en: I’ve missed over 9,000 shots in my career. I’ve lost almost 300 games. 26 times
    I’ve been trusted to take the game-winning shot and missed. I’ve failed over and
    over and over again in my life. And that is why I succeed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我在职业生涯中错过了超过 9,000 次投篮。我输掉了将近 300 场比赛。有 26 次我被信任去投决胜球，但未中。我在生活中屡战屡败。这就是为什么我成功的原因。
- en: – Michael Jordan
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: – 迈克尔·乔丹
- en: In the past, when I was but a young college graduate (some two years ago), the
    term that kept coming up, right after being taught how to make a website, was
    **Continuous Integration/Continuous Delivery** (**CI/CD**). CI/CD was something
    that my college course did not teach. Most college courses do not; it is not enough
    of an academic exercise. However, if you’re a DevOps engineer, this is all you’ll
    do. This is your job. And Python is a great tool for doing your job better.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，当我还是个年轻的大学毕业生（大约两年前），在被教如何制作网站之后，最经常提到的术语是**持续集成/持续交付**（**CI/CD**）。CI/CD
    是我大学课程中没有教授的内容。大多数大学课程都没有；这不足以成为一个学术练习。但是，如果你是一名 DevOps 工程师，这就是你的全部工作。这是你的职责。而
    Python 是提升工作效率的绝佳工具。
- en: I have often described Python as a great facilitator, that is, as a tool that
    makes all other tools better. And that is the concept that we will explore further
    in this chapter. Python is a language that is very kind toward people who make
    mistakes; trust me, I’ve made plenty. It has a lot of features that reduce the
    impact of your mistakes. It also has error messages, which allow the tracing of
    errors to be simple and effective. If we’re talking about actual application development
    from the perspective of a developer, everyone has their own opinion, which is,
    to an extent, valid. But as I have talked about throughout this book, Python is
    significantly ahead in terms of what it can offer DevOps engineers.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常将 Python 描述为一个伟大的促进者，即一种使所有其他工具更好的工具。这是我们将在本章进一步探讨的概念。Python 是一种非常善待犯错者的语言；相信我，我犯过很多错误。它具有许多功能，可以减少您错误的影响。它还有错误消息，可以简化和有效地追踪错误。如果我们从开发者的角度来讨论实际应用程序开发，每个人都有自己的观点，这在一定程度上是有效的。但正如我在本书中所说的那样，Python
    在能够为 DevOps 工程师提供的功能方面显著领先。
- en: 'So, as we explore how to deliver a journey to our customers, this is what we
    are going to learn:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们探索如何为客户提供旅程时，这就是我们将要学习的内容：
- en: The philosophy and the concepts behind CI/CD and how it has evolved during the
    course of its creation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI/CD 的哲学和概念及其在创造过程中的演变
- en: A basic CI/CD task using Python that can help you understand CI/CD, what it
    brings to the table, and how important its implementation is
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Python 进行的基本 CI/CD 任务，可以帮助您理解 CI/CD，它为项目带来了什么，以及其实施的重要性
- en: How Python can be used to develop and enhance collaboration within a development
    team using its flexible nature
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Python 开发和增强开发团队内部的协作能力，利用其灵活的特性
- en: 'How Python can be used to enhance and automate the most sacred of DevOps traditions:
    the rollback'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Python 增强和自动化最神圣的 DevOps 传统：回滚
- en: To accomplish these tasks, you will require a few tools in your bag. There are
    a few things that you need to set up before we begin.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这些任务，您需要准备好一些工具。在我们开始之前，有一些事情是必须设置的。
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'We have a short checklist here of things that you will need in order to follow
    along with this chapter:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们有一个简短的清单，列出了您需要的一切：
- en: A GitHub account for use of the book repository
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于书籍库的 GitHub 账户
- en: A Todoist account
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Todoist 账户
- en: A Microsoft account
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Microsoft 账户
- en: An AWS account
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 AWS 账户
- en: The ability to tolerate a large amount of sarcasm and bad humor
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够容忍大量的讽刺和糟糕的幽默感
- en: 'We also, of course, have an accompanying GitHub repository where you can reference
    the coding content in this book: [https://github.com/PacktPublishing/Hands-On-Python-for-DevOps/.](https://github.com/PacktPublishing/Hands-On-Python-for-DevOps/)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当然也有一个相应的 GitHub 代码库，在这里您可以参考本书中的编码内容：[https://github.com/PacktPublishing/Hands-On-Python-for-DevOps/.](https://github.com/PacktPublishing/Hands-On-Python-for-DevOps/)
- en: The origins and philosophy of CI/CD
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI/CD 的起源和哲学
- en: A question that people often ask me is, “You started as a developer; how did
    you end up where you are?” I’ve answered this to an extent over several of the
    sections in this book, but in short, I had to make my way there because of necessity.
    These days, the people who develop applications are taught how to do so from the
    start and do not know about all of the rationale behind it, just how to use it.
    This is fine; there is no need to dive deeper than you want, but know that this
    was not always the case. Someone had to figure all of this stuff out (several
    someones, in fact). And I think my personal journey is more reflective of the
    people who figured this stuff out than your typical modern DevOps trainee. So,
    I’ll start recapping this journey as a short dialog of three scenes of me screaming
    into the void (let’s call it DevOps Doug, that sounds fun). We’ll start with CI.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 人们常问我一个问题：“你是从开发者做起的，怎么会走到今天这一步？”我在本书的几个章节中已经在一定程度上回答过这个问题，但简而言之，我是因为必要性才走到了这里。如今，开发应用程序的人从一开始就被教会如何做，而不清楚背后的所有理论，只知道如何使用它。这样做没问题；你不需要深入了解，除非你愿意，但请知道，过去并非如此。曾经有人必须弄明白所有这些事情（事实上，是几个不同的人）。我认为我的个人经历更能反映出那些弄清楚这些事情的人，而不是你典型的现代
    DevOps 学员。所以，我将以三个场景的简短对话回顾这段旅程，场景里我将对着虚空大喊（我们可以称之为 DevOps Doug，听起来很有趣）。我们从持续集成（CI）开始。
- en: Scene 1 – continuous integration
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景 1 – 持续集成
- en: It was a late night at my home. I was doing my usual 200 push-up, 300 sit-up
    routine when it dawned on me that I am really good at writing code. This shouldn’t
    have been a revelation, it was pretty obvious in hindsight, but upon making this
    discovery, I decided – being the generous man that I am – that I wanted to share
    my coding gift with the world, and so I called my old pal Doug for a little help.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 那是一个深夜，我正在家里做我常规的 200 个俯卧撑和 300 个仰卧起坐时，突然意识到我真的很擅长写代码。这本不应该是一个启示，回想起来其实很明显，但在做出这个发现之后，我决定——作为一个慷慨的人——我想将我的编码天赋与世界分享，于是我打电话给我的老朋友
    Doug，请他帮忙。
- en: '*Me*: Hello, I’d like some help. I have all of this code and I want to share
    it with my friends.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*Me*: 你好，我需要帮助。我有这么多代码，我想和我的朋友们分享。'
- en: '*Doug*: That’s easy enough. All you have to do is create, clone, initialize,
    pull, modify, then push the Git repository. That sounds simple, right?'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*Doug*: 这个很简单。你只需创建、克隆、初始化、拉取、修改，然后推送 Git 仓库。听起来很简单，对吧？'
- en: '*Me*: What’s a repository? Why can’t I just email my code to them, then they
    can make the changes and email it back to me?'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*Me*: 什么是仓库？为什么我不能直接把代码发给他们，然后他们修改后再发回给我？'
- en: '*Doug*: Well…..'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*Doug*: 嗯……'
- en: Thus started a long back and forth and a lot of exposition about what version
    control is, how repositories work, why you have branches, and what pull requests
    are. If I started going through all of this, I’d have to write another book.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 于是开始了长时间的讨论和大量的阐述，关于什么是版本控制、仓库如何工作、为什么要使用分支以及什么是拉取请求。如果我开始详细讲解这些内容，我得再写一本书。
- en: '*Doug*: Did that answer all your questions?'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*Doug*: 这样回答了你所有的问题吗？'
- en: '*Me*: Yeah, I understand it and I understand why it’d be useful, but why is
    it the way it is?'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*Me*: 是的，我理解它，我也明白它为什么有用，但为什么它是现在这种方式？'
- en: '*Doug*: Do more and you’ll learn more.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*Doug*: 做得更多，你就能学得更多。'
- en: And the journey continued, just like the integration, but much longer and sometimes
    very boring. We’ll skip the boring parts.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 旅程继续，就像集成一样，但要长得多，有时也非常无聊。我们跳过那些无聊的部分。
- en: So, I started learning more and realized how important version control is. I
    also realized that there are very few younger developers who actually take the
    time to completely understand it. Some quit over the fact that they can’t. But
    the purpose of CI is clear. It gives a clear history of the modification of code,
    and it gives you small increments of improvement, which are added on top of other
    improvements, creating a history of smaller changes that can be looked at, versioned,
    and understood. It increases organization and understanding more than anything,
    but those are the things you need first before increasing your speed.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我开始学得更多，并意识到版本控制有多么重要。我还意识到，实际上很少有年轻开发者能真正花时间去完全理解它。有些人甚至因此放弃了。但持续集成（CI）的目的很明确。它清楚地记录了代码修改的历史，并提供了小幅度的改进，这些改进在其他改进的基础上逐步叠加，形成了一系列可以查看、版本化并理解的小改动历史。它增加了组织性和理解，这些都是在提高速度之前你需要首先具备的东西。
- en: Now, as I evolved, and my skill sets evolved, so did my curiosity. I started
    thinking, “Is this actually helping the other people on the project?” So I asked
    them, and they confirmed that it did. I felt it impolite to ask further (also
    they probably hadn’t looked into it much further either), so I started looking
    for more advanced material on the internet. This next conversation, about continuous
    delivery, was rather interesting.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我不断发展，我的技能也在发展，我的好奇心也在进化。我开始想，“这真的对项目中的其他人有帮助吗？”于是我问了他们，他们确认了确实有帮助。我觉得继续问下去不太礼貌（而且他们可能也没有进一步研究），于是我开始在网上寻找更高级的资料。接下来的这段关于持续交付的对话，倒是挺有意思的。
- en: Scene 2 – continuous delivery
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景 2 – 持续交付
- en: A while after I was pushed down the DevOps river by Doug, I found myself facing
    a roadblock. If it were a physical roadblock, I would have no problem given the
    400 crunches and 649 (yes, exactly that much) pull-ups I did every day. But this
    roadblock existed in the realm of computers, and it had a toll booth that rejected
    any code that didn’t meet its requirements. Tired of the automatic rejection of
    my code, I decided to speak to the toll booth attendant, and lo and behold, I
    found that it was my old friend Doug.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在Doug把我推下DevOps的河流一段时间后，我发现自己遇到了一个障碍。如果这是个实际的障碍，我完全不在乎，每天做400个仰卧起坐和649个（没错，正好是这么多）引体向上，我完全能应对。但这个障碍存在于计算机的世界中，它有一个收费站，拒绝任何不符合要求的代码。厌倦了我的代码被自动拒绝，我决定去和收费站的工作人员谈谈，结果，我发现那竟然是我的老朋友Doug。
- en: '*Me*: How’d you get here Doug?'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*我*： Doug，你是怎么到这儿的？'
- en: '*Doug*: I was always here.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*Doug*： 我一直都在这里。'
- en: '*Me*: (Visibly confused) Okay... So, whenever I push my code, it updates the
    test version of the application?'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*我*： (显得有些困惑) 好吧... 那么，每次我推送我的代码时，它就会更新应用程序的测试版本吗？'
- en: '*Doug*: That is correct, but only if your code passes testing and deploys successfully.
    Otherwise, it reverts to the older version of the project and tells you what went
    wrong.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*Doug*： 没错，前提是你的代码通过了测试并成功部署。否则，它会恢复到项目的旧版本，并告诉你出了什么问题。'
- en: '*Me*: Okay, can’t you just take my word for it?'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*我*： 好吧，你不能只相信我说的嘛？'
- en: '*Doug*: I’d love to, but the last time we did that, a zebra came flying out
    of the server room and started biting people. Zebras are mean.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*Doug*： 我很乐意，但上次我们这么做的时候，一只斑马从服务器房间里飞出来，开始咬人。斑马可凶了。'
- en: '*Me*: How did a Zebra…'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*我*： 怎么会有一只斑马……'
- en: '*Doug*: That’s not the point. The point is that this system doesn’t just exist
    to launch stuff, alright? It’s there because it simplifies and secures things
    for everybody. Once a dev pushes the code, it’s over for them. If that code gives
    out an error, they resume work on it. DevOps people just exist to make that process
    as easy as possible.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*Doug*： 这不是重点。重点是，这个系统不仅仅是为了启动东西，好吗？它存在是因为它为每个人简化并确保了流程。一旦开发者推送了代码，对他们来说就结束了。如果这段代码出错，他们会继续处理。DevOps的人只是为了让这个过程尽可能简单。'
- en: '*Me*: Alright, is that easy to set up?'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*我*： 好的，这个设置简单吗？'
- en: '*Doug*: Nope.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*Doug*： 不行。'
- en: This is the part with a montage of me learning all of the testing and security
    principles and how to push code, create approval workflows, and a lot of other
    things that you’ve seen in this book. It’s not an easy journey by any means, but
    a rewarding one.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我学习所有测试和安全原则、如何推送代码、创建审批工作流等一系列内容的蒙太奇部分，这些内容你在本书中已经看到过了。这绝对不是一段容易的旅程，但它是值得的。
- en: '*Me*: Okay, that’s all right. Right?'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*我*： 好吧，这没关系，对吧？'
- en: '*Doug*: Define *all*.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*Doug*： 定义 *全部*。'
- en: '*Me*: (Sighs) Alright, what’s left?'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*我*： (叹气) 好的，还有什么剩下的吗？'
- en: '*Doug*: Do more and you’ll learn more.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*Doug*： 多做一点，你就会学得更多。'
- en: Thus, the journey continued in earnest, revealing even more questions each time.
    It was honestly pretty boring. But I soon realized that there was a reason for
    that...
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这段旅程继续着，每次都揭示出更多的问题。说实话，挺无聊的。但我很快意识到，这样其实是有原因的……
- en: Well, after the truth was revealed to me, I realized that this actually was
    the way. A way created through trial and error to find out what works and what
    doesn’t. A way based on real-life problems and their solutions. A more pragmatic
    way that brought order from chaos. But I also realized that there is such a thing
    as too much order (we call it bureaucracy if a government does it). There were
    a lot of necessary steps, but they generated a few unnecessary ones every time
    something was changed. The process needed to adapt to itself. An interesting concept.
    And it needed to do so while also delivering value. But to innovate, you must
    automate. And that is the story of continuous deployment.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，当真相揭示给我时，我意识到这实际上就是正确的方式。通过反复试验找到什么有效，什么无效的方式。一个基于现实问题及其解决方案的方法。一个更加务实的方式，它让混乱中有了秩序。但我也意识到，过度的秩序也是问题（如果是政府做的，我们叫它官僚主义）。有很多必要的步骤，但每当有变动时，总会产生一些不必要的步骤。这个过程需要自我适应。一个有趣的概念。而且它需要在创造价值的同时进行自我调整。但要创新，你必须自动化。而这就是持续部署的故事。
- en: Scene 3 – continuous deployment
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景 3 – 持续部署
- en: One fine day, I was sitting in my office, going through my regular routine,
    drinking some coffee, answering a few emails, and pushing a little bit of code,
    when I suddenly felt a chill down my spine, like someone was about to come in
    and turn my life upside down...
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有一天，我坐在办公室里，按照平常的流程喝着咖啡，回复着几封邮件，推送着一些代码，突然间我感到脊背一凉，仿佛有人要进来颠覆我的生活...
- en: '*Doug*: Hey!'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*道格*: 嘿！'
- en: '*Me*: Doug! How’d you get in here? That door was locked.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*我*: 道格！你怎么进来的？那扇门锁着呢。'
- en: '*Doug*: I am a figment of your imagination; you’ll never get away from me.
    What’re you up to?'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*道格*: 我是你想象中的人物，你永远逃不掉。我在这，你在干什么？'
- en: '*Me*: (Pushing aside that disturbing thought) Well, alright. I have created
    this lovely pipeline that I am pushing code into. I’ve worked on it for the past
    three months. Now I’m going to release it into production.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*我*: （把那个令人不安的想法推到一边）好吧，算了。我已经创建了这个可爱的流水线，把代码推送进去。我已经为此工作了三个月。现在我要把它发布到生产环境中。'
- en: '*Doug*: You haven’t made a release in a full week? What do you think you’re
    doing?'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*道格*: 你一整周都没发布版本？你到底在干什么？'
- en: '*Me*: My job...?'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*我*: 我的工作...？'
- en: '*Doug*: Well, I thought so. That’s bad. Get this through your thick skull,
    kid. If you’re doing your job, then you’re doing a bad job.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*道格*: 哦，我明白了。那就糟糕了。孩子，听清楚了。如果你做的工作是“做工作”，那就说明你做得不好。'
- en: '*Me*: Whose job should I be doing then?'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*我*: 那我该做什么工作呢？'
- en: '*Doug*: Not yours.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*道格*: 不是你的。'
- en: '*Me*: 😐'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*我*: 😐'
- en: '*Doug*: Your job is to automate your job, to make sure that as little is left
    to human judgment as possible. You must become an artist, striving to paint your
    masterpiece with as few strokes of the brush as possible. You have now entered
    the realm of continuous deployment.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*道格*: 你的工作是自动化你的工作，确保尽可能少地依赖人工判断。你必须成为一个艺术家，努力用尽可能少的笔触画出你的杰作。你现在已经进入了持续部署的领域。'
- en: '*Me*: If I deploy continuously, when do I develop?'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*我*: 如果我不断部署，那什么时候才算是开发？'
- en: '*Doug*: That’s the trick: you don’t deploy your app. You create a deployment
    that constantly deploys it for you.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*道格*: 诀窍是：你不部署你的应用。你需要创建一个持续部署它的部署。'
- en: '*Me*: What? What if I get it wrong?'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*我*: 什么？那我要是弄错了怎么办？'
- en: '*Doug*: That is the other trick: don’t be afraid of getting it wrong. That’s
    the success behind DevOps and the CI/CD process; you can quickly identify mistakes,
    roll back, and refactor. You’re not tied down by your failures.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*道格*: 这就是另一个诀窍：不要害怕犯错。这就是DevOps和CI/CD流程成功的原因；你可以快速识别错误，回滚并重构。你不会因为失败而被束缚。'
- en: '*Me*: I see, but these are real users we’re talking about...'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*我*: 我明白了，但这些是我们真正的用户啊...'
- en: '*Doug*: There is no better teacher than experience. You must get your product
    to the users if you ever want to learn anything significant. Will they go through
    a few hitches? Sure, but that happens with practically every application, right?
    When you are deploying continuously, when you have that pipeline, you have the
    power to change it and help that user. Not tomorrow, not next week, now. And that’s
    all that differentiates CD from CD (yes, I know it’s confusing). Delivering something
    constantly and delivering it to the customer are two different things, and one
    of them is much more valuable than the other.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*道格*：没有比经验更好的老师了。如果你想学到任何有意义的东西，就必须将你的产品交给用户。他们会遇到一些小问题吗？当然，但几乎每个应用程序都会有这种情况，对吧？当你持续部署时，当你拥有了那条流水线，你就有了改变它并帮助用户的能力。不是明天，不是下周，而是现在。这就是
    CD 和 CD 之间的区别（是的，我知道这很混乱）。持续交付某物和交付给客户是两件不同的事，其中一件远比另一件更有价值。'
- en: '*Me*: It makes no sense, but I’ll give it a go, sure.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*我*：这没道理，但我会试试的，没问题。'
- en: '*Doug*: Do more and you’ll learn more.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*道格*：做得更多，你就能学到更多。'
- en: And so concluded this encounter with Doug. It was insightful but, as always,
    left me with more questions than answers. He hasn’t shown up again since, but
    I know he’s there and will appear when I need him the least, taking me on another
    mad journey through the *Dougverse*...
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，和道格的这次交流结束了。虽然很有启发性，但像往常一样，给我留下了比答案更多的问题。从那以后他再也没出现过，但我知道他在那儿，什么时候我最不需要他时，他就会出现，带我穿越
    *道格宇宙*，踏上另一段疯狂的旅程...
- en: That was quite the diatribe ol’ DevOps Doug went on, huh? But that is essentially
    the difference between the two CDs – the philosophical difference between a semi-automatic
    and an automatic rifle. Each of them has its own uses. One can be seen as an extension
    of the other, and they both have a place.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 那真是道格关于 DevOps 的一番长篇大论，不是吗？但这本质上就是两种 CD 的区别——它们之间的哲学差异，就像半自动步枪和自动步枪的区别。每一种都有其用途。它们可以被看作是彼此的延伸，而且它们都有自己的位置。
- en: Now that we have all of this theorizing out of the way (which is good, because
    this field is still growing and evolving), we can get to the fun part. Let’s do
    a few tasks that will give us a clearer idea of how to use Python to accomplish
    these rather ambitious goals. Let’s just do a simple one that you can perform
    with very little setup. Because as someone told me (I can’t remember who), “*Do
    more and you’ll* *learn more*.”
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经把所有这些理论搞清楚了（这很好，因为这个领域仍在发展和演变），我们可以进入有趣的部分了。让我们做一些任务，帮助我们更清晰地了解如何使用 Python
    来实现这些雄心勃勃的目标。我们就做一个简单的，几乎不需要任何设置就能完成的任务。因为就像某人曾告诉我（我记不清是谁了）：“*做得更多，你就能* *学到更多*。”
- en: Python CI/CD essentials – automating a basic task
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python CI/CD 基础 – 自动化一个基本任务
- en: A big yet understated part of DevOps is the thoroughness of the documentation
    that the process forces you to produce. The documentation does not have to be
    large; it does not have to be so comprehensive that it confuses people and makes
    them think twice about ever reading or writing documentation. It must be clear,
    concise, and to the point. And most of all, it must exist. Seriously, that last
    part is rarer than you think.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 的一个重要但常被忽视的部分是，整个过程强迫你生产的文档的彻底性。这些文档不必庞大；它们不必详细到让人困惑，使人们在阅读或编写文档时三思而后行。它必须清晰、简洁且直截了当。最重要的是，它必须存在。说真的，最后这一点比你想象的还要稀缺。
- en: 'So, how do we use Python to facilitate the documentation process? Well, for
    this we can use a little library called `pip`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何使用 Python 来促进文档生成过程呢？好吧，我们可以使用一个叫做 `pip` 的小库：
- en: '[PRE0]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once you have done this, go to the root directory of your project and initialize
    Sphinx using the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，进入项目的根目录并使用以下命令初始化 Sphinx：
- en: '[PRE1]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You’ll be given a few settings for the setup. You can leave these as the default
    for now to get the sample document. You can later change this in the `conf.py`
    file.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 系统会为你提供一些设置选项。你现在可以将这些设置保留为默认值，以便获取示例文档。稍后你可以在 `conf.py` 文件中更改这些设置。
- en: '![Figure 9.1 – Quickstart menu for Sphinx](img/B21320_09_1.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.1 – Sphinx 快速启动菜单](img/B21320_09_1.jpg)'
- en: Figure 9.1 – Quickstart menu for Sphinx
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1 – Sphinx 快速启动菜单
- en: This will create an initial directory structure that can be built in HTML or
    LaTeX, among many other documentation formats.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个初始的目录结构，可以以 HTML 或 LaTeX 等多种文档格式构建。
- en: '![Figure 9.2 – Completion of Sphinx setup](img/B21320_09_2.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.2 – 完成 Sphinx 设置](img/B21320_09_2.jpg)'
- en: Figure 9.2 – Completion of Sphinx setup
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2 – 完成 Sphinx 设置
- en: Now, let’s write a bit of Python code to use with our Sphinx generator.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们写一点 Python 代码，和 Sphinx 生成器一起使用。
- en: '![Figure 9.3 – Initial code to be documented](img/B21320_09_3.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.3 – 待文档化的初始代码](img/B21320_09_3.jpg)'
- en: Figure 9.3 – Initial code to be documented
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3 – 待文档化的初始代码
- en: 'You’ll notice the details in the code comments. These details are what Sphinx
    references when it creates the documentation. This is why open source projects
    emphasize code commenting on projects so much. If you ever encounter these comments
    in libraries, you now know why. Now, run a command to build an HTML file for documentation
    using the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到代码注释中的细节。这些细节是 Sphinx 在创建文档时参考的内容。这就是开源项目如此重视代码注释的原因。如果你在库中遇到这些注释，你现在知道为什么了。接下来，运行以下命令来构建
    HTML 文件作为文档：
- en: '[PRE2]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will give you a documentation HTML file that you can host that looks something
    like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个文档 HTML 文件，你可以托管它，它看起来大致是这样的：
- en: '![Figure 9.4 – Documentation HTML page](img/B21320_09_4.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.4 – 文档 HTML 页面](img/B21320_09_4.jpg)'
- en: Figure 9.4 – Documentation HTML page
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4 – 文档 HTML 页面
- en: This was, of course, done manually. But with the correct documentation practices,
    it can be automated with a workflow that runs the preceding commands.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个过程是手动完成的。但通过正确的文档化实践，它可以通过运行上述命令的工作流来实现自动化。
- en: Now, whether you are an experienced DevOps engineer or a novice, you know that
    one of the main things that a DevOps person has to do (as experienced in this
    section) is work with developers and ask them to do things that will make the
    automation process and other DevOps processes smoother. One of the ways to gain
    a developer’s trust in this process is to make their lives easier in some way
    to prove your worth, and to just be a good co-worker in general. You can do that
    by being polite, always making a new cup of coffee if it finishes on your pour,
    holding the door for them… and also, as described in the next section, making
    their lives a little easier.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是经验丰富的 DevOps 工程师，还是新手，你都知道，DevOps 工程师必须做的一件事（在这一部分中已经介绍过）就是与开发人员合作，要求他们做一些能够让自动化流程和其他
    DevOps 流程更加顺畅的事情。获得开发人员信任的一个方法是通过某种方式让他们的工作变得更轻松，以此证明你的价值，同时，做一个好同事。你可以通过礼貌待人，咖啡喝完后再做一杯，为他们开门……以及在下一部分中提到的，帮他们简化生活的方式来做到这一点。
- en: Working with devs and infrastructure to deliver your product
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与开发人员和基础设施团队合作交付你的产品
- en: Being a DevOps engineer means being the ultimate team player. It also means
    you have to socialize with and be somewhat liked by practically everyone on your
    team. And honestly, it’s not that hard; laugh at their awkward jokes and make
    a little small talk and suddenly you’re everyone’s friend. It’s not that hard
    to get people to work together if you want to. It is, however, quite difficult,
    some of the time, to get their efforts to coordinate with yours. This is why we
    have collaboration tools. Besides ordinary GitHub, we have all sorts of tools
    for whatever development model you are using. Jira, Slack, Zoom, Google Chat,
    Teams… I could go on forever. What happens quite often is that a lot of teams
    use multiple collaboration tools. So, the question then becomes, how do we get
    these collaboration tools to collaborate with each other?
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个 DevOps 工程师意味着你需要成为团队中的终极合作者。这也意味着你必须与团队中的几乎每个人保持社交关系，并且让他们对你有好感。老实说，这并不难；只要笑一笑他们尴尬的笑话，聊上几句闲话，你就会突然成为大家的朋友。如果你愿意，带领大家一起合作并不难。然而，有时确实很难让他们的努力与自己的协调一致。这就是我们为什么需要协作工具的原因。除了普通的
    GitHub，我们还有各种各样的工具来支持你使用的开发模式。Jira、Slack、Zoom、Google Chat、Teams……我可以一直说下去。经常发生的情况是，很多团队使用多个协作工具。所以，问题就变成了，如何让这些协作工具彼此协作呢？
- en: 'There are a lot of connectors that the tools themselves provide, but sometimes
    their functionality needs to be facilitated with some code and making a few API
    calls. We will try this now using Python to connect two very common productivity
    tools: Todoist and Microsoft To Do. You may have heard about or used either one
    or both of these tools.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 工具本身提供了许多连接器，但有时它们的功能需要通过一些代码和 API 调用来实现。我们现在将使用 Python 来连接两个非常常见的生产力工具：Todoist
    和 Microsoft To Do。你可能听说过或者使用过其中一个或两个工具。
- en: Todoist is a simple to-do list application. There’s nothing much to it; it is
    very similar to other such applications, such as Jira or Trello. Microsoft To
    Do is the same, except it is integrated into Microsoft 365.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Todoist 是一个简单的待办事项应用程序。它没有什么特别的，它与其他类似的应用程序（如 Jira 或 Trello）非常相似。Microsoft To
    Do 也是如此，只不过它集成到了 Microsoft 365 中。
- en: 'Let’s start by extracting a list of tasks from the Todoist API. To do that,
    let’s create a Todoist account and add a few tasks from the UI:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从 Todoist API 中提取任务列表。为此，我们需要创建一个 Todoist 账户，并通过 UI 添加一些任务：
- en: '![Figure 9.5 – Todoist dashboard](img/B21320_09_5.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.5 – Todoist 仪表板](img/B21320_09_5.jpg)'
- en: Figure 9.5 – Todoist dashboard
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5 – Todoist 仪表板
- en: 'Just a couple of tasks with deadlines there. Now, let’s get the API token to
    call this API. Under your account’s `todoist` library:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这里只是一些带有截止日期的任务。现在，让我们获取 API 令牌来调用这个 API。在你的账户的 `todoist` 库下：
- en: '[PRE3]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, write a script that integrates your API token and lists out all the tasks.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，编写一个脚本，将你的 API 令牌集成并列出所有任务。
- en: '![Figure 9.6 – Code to get Todoist tasks](img/B21320_09_6.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.6 – 获取 Todoist 任务的代码](img/B21320_09_6.jpg)'
- en: Figure 9.6 – Code to get Todoist tasks
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6 – 获取 Todoist 任务的代码
- en: 'Simple enough, with a little bit of syntactic sugar, it will get you a list
    of tasks like this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 很简单，稍微加点语法糖，你就能得到如下的任务列表：
- en: '![Figure 9.7 – Data extracted from the Todoist API](img/B21320_09_7.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.7 – 从 Todoist API 提取的数据](img/B21320_09_7.jpg)'
- en: Figure 9.7 – Data extracted from the Todoist API
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.7 – 从 Todoist API 提取的数据
- en: That’s just a small sample, but you can see the content, the description, and
    the due date, which are the things that we are interested in. Now, we are going
    to attempt to do the same thing with Microsoft To Do. For this, we are simply
    going to call the API endpoint. There is a library for Microsoft To Do in Python
    as well, but it is still in the experimental stage.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个小示例，但你可以看到内容、描述和到期日期，这些正是我们关注的重点。现在，我们将尝试用 Microsoft To Do 做同样的事情。为此，我们只需要调用
    API 端点。Python 中也有一个用于 Microsoft To Do 的库，但它仍处于实验阶段。
- en: 'You will need to get an authorization token from Microsoft, which you can get
    by calling the API for it, as shown here: [https://learn.microsoft.com/en-us/graph/auth-v2-user?context=graph%2Fapi%2F1.0&view=graph-rest-1.0&tabs=curl](https://learn.microsoft.com/en-us/graph/auth-v2-user?context=graph%2Fapi%2F1.0&view=graph-rest-1.0&tabs=curl).
    I’m not including the process for this because it is quite clearly laid out here.
    You can integrate it into the code later if you want to automatically generate
    the token. Now, let’s modify our code in order to use the content, description,
    and due date that we have taken from Todoist:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要从 Microsoft 获取一个授权令牌，可以通过调用 API 来获得，示例如下：[https://learn.microsoft.com/en-us/graph/auth-v2-user?context=graph%2Fapi%2F1.0&view=graph-rest-1.0&tabs=curl](https://learn.microsoft.com/en-us/graph/auth-v2-user?context=graph%2Fapi%2F1.0&view=graph-rest-1.0&tabs=curl)。我没有包括这个过程，因为它已经很清晰地在这里描述了。如果你希望自动生成令牌，可以稍后将其集成到代码中。现在，让我们修改代码，使用我们从
    Todoist 获取的内容、描述和到期日期：
- en: '[PRE4]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: And it’s as simple as that. We can use this code to take tasks from Todoist
    and put them in Microsoft To Do. We can even use the **microservices-based architecture**
    in our previous chapters (like in [*Chapter 8*](B21320_08.xhtml#_idTextAnchor155),
    *Understanding Event-Driven Architecture*) to make this even more efficient using
    webhooks and events. Speaking of events, in a lot of servers, one of the most
    common events is a failure. In the event of a failure, a rollback strategy is
    needed. Let’s see how Python can facilitate that.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 就这么简单。我们可以使用这段代码将任务从 Todoist 转移到 Microsoft To Do。我们甚至可以利用我们前几章中的**基于微服务的架构**（例如在[*第8章*](B21320_08.xhtml#_idTextAnchor155)，*理解事件驱动架构*中）来使用
    Webhook 和事件，使这个过程更加高效。说到事件，在很多服务器中，最常见的事件之一就是故障发生。在故障发生时，需要一个回滚策略。我们来看看 Python
    如何帮助实现这一点。
- en: Performing rollback
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行回滚
- en: 'I have said this many times during the course of this book: making mistakes
    is okay. That is because most mistakes are reversible. Some are not, but those
    are actually quite easy to recognize if you have your wits about you. In DevOps,
    this stands true as well. You can reverse your mistakes. Often, the question becomes
    how quickly, quietly, and effectively you can do this. That is exactly what **rollbacks**
    do. They aid in the identification and correction of problems.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我在本书中多次提到：犯错误是可以的。因为大多数错误都是可以恢复的。有些错误不能恢复，但如果你保持清醒，它们其实很容易被识别。在 DevOps 中，这同样适用。你可以撤销你的错误。通常，问题变成了你能多快、多安静、多有效地做到这一点。这正是**回滚**所做的。它们有助于识别和修正问题。
- en: Rollbacks can be performed manually, or they can be automated. Having a manual
    rollback at times is too slow and requires people to actually be aware of an incident
    or an error, something that can take a long time if the team is off on a weekend,
    for example. In such cases – and in a lot of others – an automatic rollback based
    on a metric is necessary. And as we all know, Python is good at that stuff.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚可以手动执行，也可以自动执行。有时手动回滚太慢，且需要人们实际上意识到某个事件或错误，这在团队比如休假时可能需要很长时间才能发现。在这种情况下——以及许多其他情况——基于指标的自动回滚是必要的。正如我们所知道的，Python
    在这方面做得非常好。
- en: 'There are many ways to roll back on a deployment: Blue/Green (50% on the old
    instance, 50% on the new), canary deployment (a minuscule percentage of users
    get new features to test them in production), and a whole host of other methods.
    One of my favorites is the **Red/Black deployment**. In this kind of deployment,
    there are two instances of an application: the current instance (red) and the
    future instance (black). You move your endpoint from red to black. If that doesn’t
    work out, you move it back to red. Simple enough, right? Well, here’s an illustration,
    anyway:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 部署回滚有很多种方式：蓝绿部署（50% 的流量在旧实例上，50% 在新实例上），金丝雀部署（极少数用户会获得新特性以便在生产环境中进行测试），以及其他各种方法。我的一个最喜欢的方式是**红黑部署**。在这种部署方式中，应用程序有两个实例：当前实例（红色）和未来实例（黑色）。你将终端从红色切换到黑色。如果这样不行，你可以将其切回到红色。听起来简单吧？无论如何，这里有一个示意图：
- en: '![ Figure 9.8 – Illustration of red/black deployment](img/B21320_9_8.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![ 图 9.8 – 红黑部署示意图](img/B21320_9_8.jpg)'
- en: Figure 9.8 – Illustration of red/black deployment
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.8 – 红黑部署示意图
- en: 'So, remember, *red on black, you’re okay Jack, black on red, you’re dead*.
    Oh, no wait, that’s coral snakes. But the concept here is simple enough. It’s
    a type of failover that can be handled pretty easily. Most DNS services have this
    functionality built in. But that doesn’t mean it cannot be handled from a coding
    perspective. The reason we try to handle it like that is to give ourselves a little
    bit more control and to make room for possible future changes (such as failing
    over multiple sites at once). So, let’s try this from a coding perspective and
    perform failover using a Lambda microservice on AWS Route 53:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，记住，*红对黑，你没事，黑对红，你完蛋*。哦，等一下，那是珊瑚蛇的说法。但这里的概念其实很简单。这是一种可以很容易处理的故障转移类型。大多数 DNS
    服务都内建了这种功能。但这并不意味着它不能从编码的角度来处理。我们尝试以这种方式处理它的原因，是为了给自己更多的控制权，并为未来可能的变更（比如一次性故障转移多个站点）留出空间。那么，让我们从编码角度尝试一下，使用
    AWS Route 53 上的 Lambda 微服务执行故障转移：
- en: '[PRE5]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Well, that’s the code. Stick it in a Lambda function and have the proper conditions
    to trigger that Lambda function and you can reset back to a set default whenever
    you want. Of course, you can do this with regular Route 53 as well, but this gives
    a whole host of options for modifications. Modifications are a very important
    part of the CI/CD process, where nothing is solid forever.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这就是代码。将它放到一个 Lambda 函数中，并设置适当的触发条件，当你需要时就可以随时重置为默认值。当然，你也可以使用常规的 Route 53
    来做这件事，但这种方法提供了更多修改的选项。修改是 CI/CD 过程中的一个非常重要的部分，因为没有什么是永恒不变的。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: So, let’s summarize what you’ve learned in this chapter. You have learned that
    the philosophy and methodology of DevOps is an ever-flowing river, constantly
    in flux. You have also learned that you must adopt a similar philosophy while
    working with CI/CD. In the next section, you learned about a basic CI/CD task
    that can be performed in Python. We followed this up with the next section, where
    you learned how to help out your developers by making their day-to-day tasks easier
    and making sure that they have all the convenience and productivity tools they
    need. This was followed up with a lesson on performing rollbacks and a rather
    unique technique for a simple rollback.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们总结一下你在本章中学到的内容。你已经了解了 DevOps 的哲学和方法论，它就像一条源源不断的河流，始终在变化之中。你还学到了在进行 CI/CD
    工作时，你必须采用类似的哲学。在下一节中，你学习了一个可以在 Python 中执行的基本 CI/CD 任务。接下来的部分，你学会了如何通过简化开发人员的日常任务并确保他们拥有所有必要的便利和生产力工具，来帮助开发人员。随后，我们还学习了如何执行回滚，并介绍了一种非常独特的简单回滚技术。
- en: If you have tolerated all of that, thank you. You’re nine chapters into this
    book and I still somehow have your attention. I must be doing something well,
    right? Maybe? Well, let’s look ahead to the next chapter – the next section, actually
    – because we’re about to get even more ambitious with our ideas. We are going
    to look at how some large companies use Python in their everyday work. Sounds
    exciting!
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能坚持看到现在，感谢你。你已经阅读了本书的九章，而我依然能够吸引你的注意力。我想我一定做得还不错，对吧？也许？好吧，我们来展望下一章——其实是下一节——因为我们将变得更加雄心勃勃。我们将探讨一些大公司如何在日常工作中使用
    Python。听起来很刺激吧！
- en: 'Part 3: Let’s Go Further, Let’s Build Bigger'
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三部分：让我们更进一步，构建更大
- en: In this part, we will take our DevOps and Python skills and knowledge to the
    next level and look at some advanced concepts regarding the subject.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分中，我们将提升我们的 DevOps 和 Python 技能与知识，探索一些关于该主题的高级概念。
- en: 'This part has the following chapters:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 10*](B21320_10.xhtml#_idTextAnchor189), *Common DevOps Use Cases
    in Some of the Biggest Companies in the World*'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B21320_10.xhtml#_idTextAnchor189)，*全球一些最大公司的常见 DevOps 使用案例*'
- en: '[*Chapter 11*](B21320_11.xhtml#_idTextAnchor204), *MLOps and DataOps*'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B21320_11.xhtml#_idTextAnchor204)，*MLOps 和 DataOps*'
- en: '[*Chapter 12*](B21320_12.xhtml#_idTextAnchor218), *How Python Integrates with
    IaC Concepts*'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B21320_12.xhtml#_idTextAnchor218)，*Python 如何与 IaC 概念集成*'
- en: '[*Chapter 13*](B21320_13.xhtml#_idTextAnchor226), *The Tools to Take Your DevOps
    to the Next Level*'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B21320_13.xhtml#_idTextAnchor226)，*提升 DevOps 技能的工具*'
