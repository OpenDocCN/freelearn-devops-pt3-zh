- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Python for CI/CD Pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I’ve missed over 9,000 shots in my career. I’ve lost almost 300 games. 26 times
    I’ve been trusted to take the game-winning shot and missed. I’ve failed over and
    over and over again in my life. And that is why I succeed.
  prefs: []
  type: TYPE_NORMAL
- en: – Michael Jordan
  prefs: []
  type: TYPE_NORMAL
- en: In the past, when I was but a young college graduate (some two years ago), the
    term that kept coming up, right after being taught how to make a website, was
    **Continuous Integration/Continuous Delivery** (**CI/CD**). CI/CD was something
    that my college course did not teach. Most college courses do not; it is not enough
    of an academic exercise. However, if you’re a DevOps engineer, this is all you’ll
    do. This is your job. And Python is a great tool for doing your job better.
  prefs: []
  type: TYPE_NORMAL
- en: I have often described Python as a great facilitator, that is, as a tool that
    makes all other tools better. And that is the concept that we will explore further
    in this chapter. Python is a language that is very kind toward people who make
    mistakes; trust me, I’ve made plenty. It has a lot of features that reduce the
    impact of your mistakes. It also has error messages, which allow the tracing of
    errors to be simple and effective. If we’re talking about actual application development
    from the perspective of a developer, everyone has their own opinion, which is,
    to an extent, valid. But as I have talked about throughout this book, Python is
    significantly ahead in terms of what it can offer DevOps engineers.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, as we explore how to deliver a journey to our customers, this is what we
    are going to learn:'
  prefs: []
  type: TYPE_NORMAL
- en: The philosophy and the concepts behind CI/CD and how it has evolved during the
    course of its creation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A basic CI/CD task using Python that can help you understand CI/CD, what it
    brings to the table, and how important its implementation is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Python can be used to develop and enhance collaboration within a development
    team using its flexible nature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How Python can be used to enhance and automate the most sacred of DevOps traditions:
    the rollback'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To accomplish these tasks, you will require a few tools in your bag. There are
    a few things that you need to set up before we begin.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have a short checklist here of things that you will need in order to follow
    along with this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A GitHub account for use of the book repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Todoist account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Microsoft account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An AWS account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to tolerate a large amount of sarcasm and bad humor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We also, of course, have an accompanying GitHub repository where you can reference
    the coding content in this book: [https://github.com/PacktPublishing/Hands-On-Python-for-DevOps/.](https://github.com/PacktPublishing/Hands-On-Python-for-DevOps/)'
  prefs: []
  type: TYPE_NORMAL
- en: The origins and philosophy of CI/CD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A question that people often ask me is, “You started as a developer; how did
    you end up where you are?” I’ve answered this to an extent over several of the
    sections in this book, but in short, I had to make my way there because of necessity.
    These days, the people who develop applications are taught how to do so from the
    start and do not know about all of the rationale behind it, just how to use it.
    This is fine; there is no need to dive deeper than you want, but know that this
    was not always the case. Someone had to figure all of this stuff out (several
    someones, in fact). And I think my personal journey is more reflective of the
    people who figured this stuff out than your typical modern DevOps trainee. So,
    I’ll start recapping this journey as a short dialog of three scenes of me screaming
    into the void (let’s call it DevOps Doug, that sounds fun). We’ll start with CI.
  prefs: []
  type: TYPE_NORMAL
- en: Scene 1 – continuous integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It was a late night at my home. I was doing my usual 200 push-up, 300 sit-up
    routine when it dawned on me that I am really good at writing code. This shouldn’t
    have been a revelation, it was pretty obvious in hindsight, but upon making this
    discovery, I decided – being the generous man that I am – that I wanted to share
    my coding gift with the world, and so I called my old pal Doug for a little help.
  prefs: []
  type: TYPE_NORMAL
- en: '*Me*: Hello, I’d like some help. I have all of this code and I want to share
    it with my friends.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: That’s easy enough. All you have to do is create, clone, initialize,
    pull, modify, then push the Git repository. That sounds simple, right?'
  prefs: []
  type: TYPE_NORMAL
- en: '*Me*: What’s a repository? Why can’t I just email my code to them, then they
    can make the changes and email it back to me?'
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: Well…..'
  prefs: []
  type: TYPE_NORMAL
- en: Thus started a long back and forth and a lot of exposition about what version
    control is, how repositories work, why you have branches, and what pull requests
    are. If I started going through all of this, I’d have to write another book.
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: Did that answer all your questions?'
  prefs: []
  type: TYPE_NORMAL
- en: '*Me*: Yeah, I understand it and I understand why it’d be useful, but why is
    it the way it is?'
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: Do more and you’ll learn more.'
  prefs: []
  type: TYPE_NORMAL
- en: And the journey continued, just like the integration, but much longer and sometimes
    very boring. We’ll skip the boring parts.
  prefs: []
  type: TYPE_NORMAL
- en: So, I started learning more and realized how important version control is. I
    also realized that there are very few younger developers who actually take the
    time to completely understand it. Some quit over the fact that they can’t. But
    the purpose of CI is clear. It gives a clear history of the modification of code,
    and it gives you small increments of improvement, which are added on top of other
    improvements, creating a history of smaller changes that can be looked at, versioned,
    and understood. It increases organization and understanding more than anything,
    but those are the things you need first before increasing your speed.
  prefs: []
  type: TYPE_NORMAL
- en: Now, as I evolved, and my skill sets evolved, so did my curiosity. I started
    thinking, “Is this actually helping the other people on the project?” So I asked
    them, and they confirmed that it did. I felt it impolite to ask further (also
    they probably hadn’t looked into it much further either), so I started looking
    for more advanced material on the internet. This next conversation, about continuous
    delivery, was rather interesting.
  prefs: []
  type: TYPE_NORMAL
- en: Scene 2 – continuous delivery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A while after I was pushed down the DevOps river by Doug, I found myself facing
    a roadblock. If it were a physical roadblock, I would have no problem given the
    400 crunches and 649 (yes, exactly that much) pull-ups I did every day. But this
    roadblock existed in the realm of computers, and it had a toll booth that rejected
    any code that didn’t meet its requirements. Tired of the automatic rejection of
    my code, I decided to speak to the toll booth attendant, and lo and behold, I
    found that it was my old friend Doug.
  prefs: []
  type: TYPE_NORMAL
- en: '*Me*: How’d you get here Doug?'
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: I was always here.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Me*: (Visibly confused) Okay... So, whenever I push my code, it updates the
    test version of the application?'
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: That is correct, but only if your code passes testing and deploys successfully.
    Otherwise, it reverts to the older version of the project and tells you what went
    wrong.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Me*: Okay, can’t you just take my word for it?'
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: I’d love to, but the last time we did that, a zebra came flying out
    of the server room and started biting people. Zebras are mean.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Me*: How did a Zebra…'
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: That’s not the point. The point is that this system doesn’t just exist
    to launch stuff, alright? It’s there because it simplifies and secures things
    for everybody. Once a dev pushes the code, it’s over for them. If that code gives
    out an error, they resume work on it. DevOps people just exist to make that process
    as easy as possible.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Me*: Alright, is that easy to set up?'
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: Nope.'
  prefs: []
  type: TYPE_NORMAL
- en: This is the part with a montage of me learning all of the testing and security
    principles and how to push code, create approval workflows, and a lot of other
    things that you’ve seen in this book. It’s not an easy journey by any means, but
    a rewarding one.
  prefs: []
  type: TYPE_NORMAL
- en: '*Me*: Okay, that’s all right. Right?'
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: Define *all*.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Me*: (Sighs) Alright, what’s left?'
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: Do more and you’ll learn more.'
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the journey continued in earnest, revealing even more questions each time.
    It was honestly pretty boring. But I soon realized that there was a reason for
    that...
  prefs: []
  type: TYPE_NORMAL
- en: Well, after the truth was revealed to me, I realized that this actually was
    the way. A way created through trial and error to find out what works and what
    doesn’t. A way based on real-life problems and their solutions. A more pragmatic
    way that brought order from chaos. But I also realized that there is such a thing
    as too much order (we call it bureaucracy if a government does it). There were
    a lot of necessary steps, but they generated a few unnecessary ones every time
    something was changed. The process needed to adapt to itself. An interesting concept.
    And it needed to do so while also delivering value. But to innovate, you must
    automate. And that is the story of continuous deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Scene 3 – continuous deployment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One fine day, I was sitting in my office, going through my regular routine,
    drinking some coffee, answering a few emails, and pushing a little bit of code,
    when I suddenly felt a chill down my spine, like someone was about to come in
    and turn my life upside down...
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: Hey!'
  prefs: []
  type: TYPE_NORMAL
- en: '*Me*: Doug! How’d you get in here? That door was locked.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: I am a figment of your imagination; you’ll never get away from me.
    What’re you up to?'
  prefs: []
  type: TYPE_NORMAL
- en: '*Me*: (Pushing aside that disturbing thought) Well, alright. I have created
    this lovely pipeline that I am pushing code into. I’ve worked on it for the past
    three months. Now I’m going to release it into production.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: You haven’t made a release in a full week? What do you think you’re
    doing?'
  prefs: []
  type: TYPE_NORMAL
- en: '*Me*: My job...?'
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: Well, I thought so. That’s bad. Get this through your thick skull,
    kid. If you’re doing your job, then you’re doing a bad job.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Me*: Whose job should I be doing then?'
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: Not yours.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Me*: 😐'
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: Your job is to automate your job, to make sure that as little is left
    to human judgment as possible. You must become an artist, striving to paint your
    masterpiece with as few strokes of the brush as possible. You have now entered
    the realm of continuous deployment.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Me*: If I deploy continuously, when do I develop?'
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: That’s the trick: you don’t deploy your app. You create a deployment
    that constantly deploys it for you.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Me*: What? What if I get it wrong?'
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: That is the other trick: don’t be afraid of getting it wrong. That’s
    the success behind DevOps and the CI/CD process; you can quickly identify mistakes,
    roll back, and refactor. You’re not tied down by your failures.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Me*: I see, but these are real users we’re talking about...'
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: There is no better teacher than experience. You must get your product
    to the users if you ever want to learn anything significant. Will they go through
    a few hitches? Sure, but that happens with practically every application, right?
    When you are deploying continuously, when you have that pipeline, you have the
    power to change it and help that user. Not tomorrow, not next week, now. And that’s
    all that differentiates CD from CD (yes, I know it’s confusing). Delivering something
    constantly and delivering it to the customer are two different things, and one
    of them is much more valuable than the other.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Me*: It makes no sense, but I’ll give it a go, sure.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Doug*: Do more and you’ll learn more.'
  prefs: []
  type: TYPE_NORMAL
- en: And so concluded this encounter with Doug. It was insightful but, as always,
    left me with more questions than answers. He hasn’t shown up again since, but
    I know he’s there and will appear when I need him the least, taking me on another
    mad journey through the *Dougverse*...
  prefs: []
  type: TYPE_NORMAL
- en: That was quite the diatribe ol’ DevOps Doug went on, huh? But that is essentially
    the difference between the two CDs – the philosophical difference between a semi-automatic
    and an automatic rifle. Each of them has its own uses. One can be seen as an extension
    of the other, and they both have a place.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have all of this theorizing out of the way (which is good, because
    this field is still growing and evolving), we can get to the fun part. Let’s do
    a few tasks that will give us a clearer idea of how to use Python to accomplish
    these rather ambitious goals. Let’s just do a simple one that you can perform
    with very little setup. Because as someone told me (I can’t remember who), “*Do
    more and you’ll* *learn more*.”
  prefs: []
  type: TYPE_NORMAL
- en: Python CI/CD essentials – automating a basic task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A big yet understated part of DevOps is the thoroughness of the documentation
    that the process forces you to produce. The documentation does not have to be
    large; it does not have to be so comprehensive that it confuses people and makes
    them think twice about ever reading or writing documentation. It must be clear,
    concise, and to the point. And most of all, it must exist. Seriously, that last
    part is rarer than you think.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, how do we use Python to facilitate the documentation process? Well, for
    this we can use a little library called `pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have done this, go to the root directory of your project and initialize
    Sphinx using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You’ll be given a few settings for the setup. You can leave these as the default
    for now to get the sample document. You can later change this in the `conf.py`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Quickstart menu for Sphinx](img/B21320_09_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – Quickstart menu for Sphinx
  prefs: []
  type: TYPE_NORMAL
- en: This will create an initial directory structure that can be built in HTML or
    LaTeX, among many other documentation formats.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Completion of Sphinx setup](img/B21320_09_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – Completion of Sphinx setup
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s write a bit of Python code to use with our Sphinx generator.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – Initial code to be documented](img/B21320_09_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 – Initial code to be documented
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll notice the details in the code comments. These details are what Sphinx
    references when it creates the documentation. This is why open source projects
    emphasize code commenting on projects so much. If you ever encounter these comments
    in libraries, you now know why. Now, run a command to build an HTML file for documentation
    using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give you a documentation HTML file that you can host that looks something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Documentation HTML page](img/B21320_09_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 – Documentation HTML page
  prefs: []
  type: TYPE_NORMAL
- en: This was, of course, done manually. But with the correct documentation practices,
    it can be automated with a workflow that runs the preceding commands.
  prefs: []
  type: TYPE_NORMAL
- en: Now, whether you are an experienced DevOps engineer or a novice, you know that
    one of the main things that a DevOps person has to do (as experienced in this
    section) is work with developers and ask them to do things that will make the
    automation process and other DevOps processes smoother. One of the ways to gain
    a developer’s trust in this process is to make their lives easier in some way
    to prove your worth, and to just be a good co-worker in general. You can do that
    by being polite, always making a new cup of coffee if it finishes on your pour,
    holding the door for them… and also, as described in the next section, making
    their lives a little easier.
  prefs: []
  type: TYPE_NORMAL
- en: Working with devs and infrastructure to deliver your product
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being a DevOps engineer means being the ultimate team player. It also means
    you have to socialize with and be somewhat liked by practically everyone on your
    team. And honestly, it’s not that hard; laugh at their awkward jokes and make
    a little small talk and suddenly you’re everyone’s friend. It’s not that hard
    to get people to work together if you want to. It is, however, quite difficult,
    some of the time, to get their efforts to coordinate with yours. This is why we
    have collaboration tools. Besides ordinary GitHub, we have all sorts of tools
    for whatever development model you are using. Jira, Slack, Zoom, Google Chat,
    Teams… I could go on forever. What happens quite often is that a lot of teams
    use multiple collaboration tools. So, the question then becomes, how do we get
    these collaboration tools to collaborate with each other?
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a lot of connectors that the tools themselves provide, but sometimes
    their functionality needs to be facilitated with some code and making a few API
    calls. We will try this now using Python to connect two very common productivity
    tools: Todoist and Microsoft To Do. You may have heard about or used either one
    or both of these tools.'
  prefs: []
  type: TYPE_NORMAL
- en: Todoist is a simple to-do list application. There’s nothing much to it; it is
    very similar to other such applications, such as Jira or Trello. Microsoft To
    Do is the same, except it is integrated into Microsoft 365.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by extracting a list of tasks from the Todoist API. To do that,
    let’s create a Todoist account and add a few tasks from the UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – Todoist dashboard](img/B21320_09_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.5 – Todoist dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'Just a couple of tasks with deadlines there. Now, let’s get the API token to
    call this API. Under your account’s `todoist` library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Next, write a script that integrates your API token and lists out all the tasks.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 – Code to get Todoist tasks](img/B21320_09_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.6 – Code to get Todoist tasks
  prefs: []
  type: TYPE_NORMAL
- en: 'Simple enough, with a little bit of syntactic sugar, it will get you a list
    of tasks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Data extracted from the Todoist API](img/B21320_09_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7 – Data extracted from the Todoist API
  prefs: []
  type: TYPE_NORMAL
- en: That’s just a small sample, but you can see the content, the description, and
    the due date, which are the things that we are interested in. Now, we are going
    to attempt to do the same thing with Microsoft To Do. For this, we are simply
    going to call the API endpoint. There is a library for Microsoft To Do in Python
    as well, but it is still in the experimental stage.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to get an authorization token from Microsoft, which you can get
    by calling the API for it, as shown here: [https://learn.microsoft.com/en-us/graph/auth-v2-user?context=graph%2Fapi%2F1.0&view=graph-rest-1.0&tabs=curl](https://learn.microsoft.com/en-us/graph/auth-v2-user?context=graph%2Fapi%2F1.0&view=graph-rest-1.0&tabs=curl).
    I’m not including the process for this because it is quite clearly laid out here.
    You can integrate it into the code later if you want to automatically generate
    the token. Now, let’s modify our code in order to use the content, description,
    and due date that we have taken from Todoist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: And it’s as simple as that. We can use this code to take tasks from Todoist
    and put them in Microsoft To Do. We can even use the **microservices-based architecture**
    in our previous chapters (like in [*Chapter 8*](B21320_08.xhtml#_idTextAnchor155),
    *Understanding Event-Driven Architecture*) to make this even more efficient using
    webhooks and events. Speaking of events, in a lot of servers, one of the most
    common events is a failure. In the event of a failure, a rollback strategy is
    needed. Let’s see how Python can facilitate that.
  prefs: []
  type: TYPE_NORMAL
- en: Performing rollback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I have said this many times during the course of this book: making mistakes
    is okay. That is because most mistakes are reversible. Some are not, but those
    are actually quite easy to recognize if you have your wits about you. In DevOps,
    this stands true as well. You can reverse your mistakes. Often, the question becomes
    how quickly, quietly, and effectively you can do this. That is exactly what **rollbacks**
    do. They aid in the identification and correction of problems.'
  prefs: []
  type: TYPE_NORMAL
- en: Rollbacks can be performed manually, or they can be automated. Having a manual
    rollback at times is too slow and requires people to actually be aware of an incident
    or an error, something that can take a long time if the team is off on a weekend,
    for example. In such cases – and in a lot of others – an automatic rollback based
    on a metric is necessary. And as we all know, Python is good at that stuff.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many ways to roll back on a deployment: Blue/Green (50% on the old
    instance, 50% on the new), canary deployment (a minuscule percentage of users
    get new features to test them in production), and a whole host of other methods.
    One of my favorites is the **Red/Black deployment**. In this kind of deployment,
    there are two instances of an application: the current instance (red) and the
    future instance (black). You move your endpoint from red to black. If that doesn’t
    work out, you move it back to red. Simple enough, right? Well, here’s an illustration,
    anyway:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 9.8 – Illustration of red/black deployment](img/B21320_9_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.8 – Illustration of red/black deployment
  prefs: []
  type: TYPE_NORMAL
- en: 'So, remember, *red on black, you’re okay Jack, black on red, you’re dead*.
    Oh, no wait, that’s coral snakes. But the concept here is simple enough. It’s
    a type of failover that can be handled pretty easily. Most DNS services have this
    functionality built in. But that doesn’t mean it cannot be handled from a coding
    perspective. The reason we try to handle it like that is to give ourselves a little
    bit more control and to make room for possible future changes (such as failing
    over multiple sites at once). So, let’s try this from a coding perspective and
    perform failover using a Lambda microservice on AWS Route 53:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Well, that’s the code. Stick it in a Lambda function and have the proper conditions
    to trigger that Lambda function and you can reset back to a set default whenever
    you want. Of course, you can do this with regular Route 53 as well, but this gives
    a whole host of options for modifications. Modifications are a very important
    part of the CI/CD process, where nothing is solid forever.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, let’s summarize what you’ve learned in this chapter. You have learned that
    the philosophy and methodology of DevOps is an ever-flowing river, constantly
    in flux. You have also learned that you must adopt a similar philosophy while
    working with CI/CD. In the next section, you learned about a basic CI/CD task
    that can be performed in Python. We followed this up with the next section, where
    you learned how to help out your developers by making their day-to-day tasks easier
    and making sure that they have all the convenience and productivity tools they
    need. This was followed up with a lesson on performing rollbacks and a rather
    unique technique for a simple rollback.
  prefs: []
  type: TYPE_NORMAL
- en: If you have tolerated all of that, thank you. You’re nine chapters into this
    book and I still somehow have your attention. I must be doing something well,
    right? Maybe? Well, let’s look ahead to the next chapter – the next section, actually
    – because we’re about to get even more ambitious with our ideas. We are going
    to look at how some large companies use Python in their everyday work. Sounds
    exciting!
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 3: Let’s Go Further, Let’s Build Bigger'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, we will take our DevOps and Python skills and knowledge to the
    next level and look at some advanced concepts regarding the subject.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B21320_10.xhtml#_idTextAnchor189), *Common DevOps Use Cases
    in Some of the Biggest Companies in the World*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B21320_11.xhtml#_idTextAnchor204), *MLOps and DataOps*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B21320_12.xhtml#_idTextAnchor218), *How Python Integrates with
    IaC Concepts*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B21320_13.xhtml#_idTextAnchor226), *The Tools to Take Your DevOps
    to the Next Level*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
