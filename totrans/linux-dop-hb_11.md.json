["```\nnginx:\n  pkg.installed\n/etc/nginx/sites-available/yourdomain.tld.conf:\n  file.managed:\n    - source: salt://nginx/yourdomain.tld.conf\n    - user: root\n    - group: root\n    - mode: 644\n```", "```\nadmin@myhome:~$ salt 'webserver' state.apply nginx\n```", "```\n# Install Nginx package\npackage 'nginx'\n# Configure Nginx service\nservice 'nginx' do\n  action [:enable, :start]\nend\n# Configure Nginx site\ntemplate '/etc/nginx/sites-available/yourdomain.tld.conf' do\n  source 'nginx-site.erb'\n  owner 'root'\n  group 'root'\n  mode '0644'\n  notifies :restart, 'service[nginx]'\nend\n```", "```\n# Install Nginx\npackage { 'nginx':\n  ensure => installed,\n}\n# Define the configuration template for the domain\nfile { '/etc/nginx/sites-available/yourdomain.tld.conf':\n  content => template('nginx/yourdomain.tld.conf.erb'),\n  owner   => 'root',\n  group   => 'root',\n  mode    => '0644',\n  notify  => Service['nginx'],\n}\n# Enable the site by creating a symbolic link from sites-available to sites-enabled\nfile { '/etc/nginx/sites-enabled/yourdomain.tld.conf':\n  ensure  => 'link',\n  target  => '/etc/nginx/sites-available/yourdomain.tld.conf',\n  require => File['/etc/nginx/sites-available/yourdomain.tld.conf'],\n}\n# Restart Nginx when the configuration changes\nservice { 'nginx':\n  ensure     => running,\n  enable     => true,\n  subscribe  => File['/etc/nginx/sites-enabled/yourdomain.tld.conf'],\n}\n```", "```\n##############################################################\n# cf.main - for master infrastructure server\n##################################################################\n###\n# BEGIN cf.main\n###\ncontrol:\n   access    = ( root )        # Only root should run this\n   site      = ( main )\n   domain    = ( example.com )\n   sysadm    = ( admin@example.com )\n   repository = ( /var/spool/cfengine )\n   netmask   = ( 255.255.255.0 )\n   timezone  = ( CET )\n#################################################################\nfiles:\n  Prepare::\n      /etc/motd              m=0644 r=0 o=root act=touch\n```", "```\n    - name: install nginx\n    ```", "```\n      package:\n    ```", "```\n        name: nginx\n    ```", "```\n        state: present\n    ```", "```\n$ sudo apt-get install ansible\n```", "```\n$ sudo dnf install ansible\n```", "```\n$ python3 -m venv venv\n```", "```\n$ source venv/bin/activate\n```", "```\n$ pip install -U pip\nRequirement already satisfied: pip in ./venv/lib/python3.11/site-packages (22.3.1)\nCollecting pip\n  Using cached pip-23.0.1-py3-none-any.whl (2.1 MB)\nInstalling collected packages: pip\n  Attempting uninstall: pip\n    Found existing installation: pip 22.3.1\n    Uninstalling pip-22.3.1:\n      Successfully uninstalled pip-22.3.1\nSuccessfully installed pip-23.0.1\n```", "```\n$ pip install ansible\nCollecting ansible\n  Using cached ansible-7.3.0-py3-none-any.whl (43.1 MB)\nCollecting ansible-core~=2.14.3\nInstalling collected packages: resolvelib, PyYAML, pycparser, packaging, MarkupSafe, jinja2, cffi, cryptography, ansible-core, ansible\nSuccessfully installed MarkupSafe-2.1.2 PyYAML-6.0 ansible-7.3.0 ansible-core-2.14.3 cffi-1.15.1 cryptography-39.0.2 jinja2-3.1.2 packaging-23.0 pycparser-2.21 resolvelib-0.8.1\n```", "```\n$ ansible all -m ping -i inventory\nhostone | SUCCESS => {\n    \"ansible_facts\": {\n        \"discovered_interpreter_python\": \"/usr/bin/python3\"\n    },\n    \"changed\": false,\n    \"ping\": \"pong\"\n}\n```", "```\n[www]\nhostone ansible_host=192.168.1.2  ansible_ssh_private_key_file=~/.ssh/hostone.pem  ansible_user=admin\n```", "```\n---\n- name: Install nginx  and php\n  hosts: www\n  become: yes\n  tasks:\n  - name: Install nginx\n    package:\n      name: nginx\n      state: present\n  - name: Install php\n    package:\n      name: php8\n      state: present\n  - name: Start nginx\n    service:\n      name: nginx\n      state: started\n```", "```\n$ ansible-lint install.yaml\nWARNING: PATH altered to expand ~ in it. Read https://stackoverflow.com/a/44704799/99834 and correct your system configuration.\nWARNING  Listing 9 violation(s) that are fatal\nyaml[trailing-spaces]: Trailing spaces\ninstall.yaml:1\nyaml[truthy]: Truthy value should be one of [false, true]\ninstall.yaml:4\nfqcn[action-core]: Use FQCN for builtin module actions (package).\ninstall.yaml:6 Use `ansible.builtin.package` or `ansible.legacy.package` instead.\n[...]\nyaml[empty-lines]: Too many blank lines (1 > 0)\ninstall.yaml:18\nRead documentation for instructions on how to ignore specific rule violations.\n                   Rule Violation Summary\n count tag                   profile    rule associated tags\n     1 yaml[empty-lines]     basic      formatting, yaml\n     1 yaml[indentation]     basic      formatting, yaml\n     3 yaml[trailing-spaces] basic      formatting, yaml\n     1 yaml[truthy]          basic      formatting, yaml\n     3 fqcn[action-core]     production formatting\nFailed after min profile: 9 failure(s), 0 warning(s) on 1 files.\n```", "```\n---\n- name: Install nginx  and php\n  hosts: www\n  become: true\n  tasks:\n    - name: Install nginx\n      ansible.builtin.package:\n        name: nginx\n        state: present\n    - name: Install php\n      ansible.builtin.package:\n        name: php8\n        state: present\n    - name: Start nginx\n      ansible.builtin.service:\n        name: nginx\n        state: started\n```", "```\n$ ansible-playbook -i inventory install.yaml\nPLAY [Install nginx  and php] ********************************************************************\nTASK [Gathering Facts] ********************************************************************\nok: [hostone]\nTASK [Install nginx] ********************************************************************\nchanged: [hostone]\nTASK [Install php] ********************************************************************\nfatal: [hostone]: FAILED! => {\"changed\": false, \"msg\": \"No package matching 'php8' is available\"}\nPLAY RECAP ********************************************************************\nhostone     : ok=2    changed=1   reachable=0    failed=1    skipped=0    rescued=0    ignored=0\n```", "```\n$ ansible-playbook -i inventory install.yaml\nPLAY [Install nginx  and php] ********************************************************************\nTASK [Gathering Facts] ********************************************************************\nok: [hostone]\nTASK [Install nginx] ********************************************************************\nok: [hostone]\nTASK [Install php] ********************************************************************\nchanged: [hostone]\nTASK [Start nginx] ********************************************************************\nok: [hostone]\nPLAY RECAP ********************************************************************\nhostone                    : ok=4    changed=1    unreachable=0   failed=0    skipped=0    rescued=0    ignored=0\n```", "```\n  tasks:\n    - name: Install nginx\n      ansible.builtin.package:\n        name: '{{ item }}'\n        state: present\n      with_items:\n        - nginx\n        - php7.4\n       - gcc\n       - g++\n    - name: Start nginx\n      ansible.builtin.service:\n        name: nginx\n        state: started\n```", "```\n$ ansible-lint install.yaml\nPassed with production profile: 0 failure(s), 0 warning(s) on 1 files.\n```", "```\n$ ansible-playbook -i inventory install.yaml\nPLAY [Install nginx  and php] ********************************************************************\nTASK [Gathering Facts] ********************************************************************\nok: [hostone]\nTASK [Install nginx] ********************************************************************\nok: [hostone] => (item=nginx)\nok: [hostone] => (item=php7.4)\nchanged: [hostone] => (item=gcc)\nchanged: [hostone] => (item=g++)\nTASK [Start nginx] ********************************************************************\nok: [hostone]\nPLAY RECAP ********************************************************************\nhostone            : ok=3    changed=1    unreachable=0   failed=0    skipped=0    rescued=0    ignored=0\n```", "```\n---\n- name: Install nginx  and php\n  hosts: www\n  become: true\n  tasks:\n    - name: Install nginx\n      ansible.builtin.package:\n        name: '{{ item }}'\n        state: present\n      with_items:\n        - nginx\n        - php7.4\n        - gcc\n        - g++\n      notify:\n        - Start nginx\n    - name: Copy service configuration\n      ansible.builtin.copy:\n        src: \"files/service.cfg\"\n        dest: \"/etc/nginx/sites-available/service.cfg\"\n        owner: root\n        group: root\n        mode: '0640'\n    - name: Enable site\n      ansible.builtin.file:\n        src: \"/etc/nginx/sites-available/service.cfg\"\n        dest: \"/etc/nginx/sites-enabled/default\"\n        state: link\n      notify:\n        - Restart nginx\n  handlers:\n    - name: Start nginx\n      ansible.builtin.service:\n        name: nginx\n        state: started\n    - name: Restart nginx\n      ansible.builtin.service:\n        name: nginx\n        state: restarted\n```", "```\n$ ansible-playbook -i inventory install.yaml\nPLAY [Install nginx  and php] ********************************************************************\nTASK [Gathering Facts] ********************************************************************\nok: [hostone]\nTASK [Install nginx] ********************************************************************\nok: [hostone] => (item=nginx)\nok: [hostone] => (item=php7.4)\nok: [hostone] => (item=gcc)\nok: [hostone] => (item=g++)\nTASK [Copy service configuration] ********************************************************************\nok: [hostone]\nTASK [Enable site] ********************************************************************\nok: [hostone]\nPLAY RECAP ********************************************************************\nhostone                     ok=4    changed=0    unreachable=0   failed=0    skipped=0    rescued=0    ignored=0\n```", "```\nroles/\n    common/               # this hierarchy represents a \"role\"\n        tasks/            #\n            main.yml      #  <-- tasks file can include smaller files if warranted\n        handlers/         #\n            main.yml      #  <-- handlers file\n        templates/        #  <-- files for use with the template resource\n            ntp.conf.j2   #  <------- templates end in .j2\n        files/            #\n            bar.txt       #  <-- files for use with the copy resource\n            foo.sh        #  <-- script files for use with the script resource\n        vars/             #\n            main.yml      #  <-- variables associated with this role\n        defaults/         #\n            main.yml      #  <-- default lower priority variables for this role\n        meta/             #\n            main.yml      #  <-- role dependencies\n        library/          # roles can also include custom modules\n        module_utils/     # roles can also include custom module_utils\n        lookup_plugins/   # or other types of plugins, like lookup in this case\n```", "```\nroles/\n    www/               # this hierarchy represents a \"role\"\n        tasks/            #\n            main.yml      #  <-- tasks file can include smaller files if warranted\n        handlers/         #\n            main.yml      #  <-- handlers file\n        files/            #\n            service.cfg       #  <-- files for use with the copy resource\n    development/               # this hierarchy represents a \"role\"\n        tasks/            #\n            main.yml      #  <-- tasks file can include smaller files if warranted\n```", "```\n[www]\nhostone ansible_host=192.168.1.2  ansible_ssh_private_key_file=~/.ssh/hostone.pem  ansible_user=admin\n[development]\nhostone ansible_host=192.168.1.3  ansible_ssh_private_key_file=~/.ssh/hostone.pem  ansible_user=admin\n```", "```\n---\n- name: Install nginx and php\n  hosts: www\n  roles:\n    - www\n  become: true\n- name: Install development packages\n  hosts: development\n  roles:\n    - development\n  become: true\n```", "```\n---\n- name: Install nginx\n  ansible.builtin.package:\n    name: '{{ item }}'\n    state: present\n  with_items:\n    - nginx\n    - php7.4\n  notify:\n    - Start nginx\n- name: Copy service configuration\n  ansible.builtin.copy:\n    src: \"files/service.cfg\"\n    dest: \"/etc/nginx/sites-available/service.cfg\"\n    owner: root\n    group: root\n    mode: '0640'\n- name: Enable site\n  ansible.builtin.file:\n    src: \"/etc/nginx/sites-available/service.cfg\"\n    dest: \"/etc/nginx/sites-enabled/default\"\n    state: link\n  notify:\n    - Restart nginx\n```", "```\n---\n- name: Start nginx\n  ansible.builtin.service:\n    name: nginx\n    state: started\n  listen: \"Start nginx\"\n- name: Restart nginx\n  ansible.builtin.service:\n    name: nginx\n    state: restarted\n  listen: \"Restart nginx\"\n```", "```\n---\n- name: Install compilers\n  ansible.builtin.package:\n    name: '{{ item }}'\n    state: present\n  with_items:\n    - gcc\n    - g++\n```", "```\nadmin@myhome:~$ ansible-galaxy install nginxinc.nginx\n```", "```\n[defaults]\nroles_path = /home/admin/myansibleroles\n```", "```\n---\n- src: nginxinc.nginx\n  version: 0.24.0\n```", "```\nadmin@myhome:~$ ansible-galaxy install -r ansible_requirements.yml\n```", "```\nroles:\n    - nginxinc.nginx\n```", "```\n---\n- name: Install and configure Nginx\n  hosts: webservers\n  become: true\n  roles:\n    - nginxinc.nginx\n  vars:\n    nginx_sites:\n      myapp:\n        template: \"{{ playbook_dir }}/templates/myapp.conf.j2\"\n```", "```\nadmin@myhome:~$ ansible-vault create secrets.yml\nNew Vault password:\nConfirm New Vault password:\n```", "```\nsomesecret: pleaseEncryptMe\nsecret_pgsql_password: veryPasswordyPassword\n```", "```\n- name: Read pgsql_password from Ansible Vault\n  include_vars:\n    file: secrets.yml\n    vault_password_file: /path/to/vault/password/file\n  vars:\n    pgsql_password: \"{{ secret_pgsql_password }}\"\n```", "```\npostgresql_password: So.VerySecret\n```", "```\nadmin@myhome:~$ sops secrets.yaml > secrets.sops.yaml\n```", "```\n---\n- hosts: dbserver\n  become: true\n  vars:\n    postgresql_password: \"{{ lookup('community.sops.load_vars', 'secrets.sops.yaml')['postgresql_password'] }}\"\n  tasks:\n    - name: Install PostgreSQL\n      apt:\n        name: postgresql\n        state: present\n    - name: Create PostgreSQL user and database\n      postgresql_user:\n        db: mydatabase\n        login_user: postgres\n        login_password: \"{{ postgresql_password }}\"\n        name: myuser\n        password: \"{{ postgresql_password }}\"\n        state: present\n```", "```\nadmin@myhome:~$ ansible-playbook playbook.yml -vv\n```", "```\nadmin@myhome:~$ ansible-playbook playbook.yml -vvv\n```", "```\n[defaults]\nverbosity = 2\n```", "```\n---\n- hosts: all\n  gather_facts: true\n  vars:\n    my_variable: \"Hello, World!\"\n  tasks:\n    - name: Print variable in debug mode\n      debug:\n        msg: \"{{ my_variable }}\"\n      verbosity: 2\n```", "```\nadmin@myhome:~$ ansible-lint sample-playbook.yml\n```", "```\n---\n- name: (Debian/Ubuntu) {{ (nginx_setup == 'uninstall') | ternary('Remove', 'Configure') }} NGINX repository\n  ansible.builtin.apt_repository:\n    filename: nginx\n    repo: \"{{ item }}\"\n    update_cache: true\n    mode: \"0644\"\n    state: \"{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}\"\n  loop: \"{{ nginx_repository | default(nginx_default_repository_debian) }}\"\n  when: nginx_manage_repo | bool\n- name: (Debian/Ubuntu) {{ (nginx_setup == 'uninstall') | ternary('Unpin', 'Pin') }} NGINX repository\n  ansible.builtin.blockinfile:\n    path: /etc/apt/preferences.d/99nginx\n    create: true\n    block: |\n      Package: *\n      Pin: origin nginx.org\n      Pin: release o=nginx\n      Pin-Priority: 900\n    mode: \"0644\"\n    state: \"{{ (nginx_state == 'uninstall') | ternary('absent', 'present') }}\"\n  when: nginx_repository is not defined\n- name: (Debian/Ubuntu) {{ nginx_setup | capitalize }} NGINX\n  ansible.builtin.apt:\n    name: nginx{{ nginx_version | default('') }}\n    state: \"{{ nginx_state }}\"\n    update_cache: true\n    allow_downgrade: \"{{ omit if ansible_version['full'] is version('2.12', '<') else true }}\"\n  ignore_errors: \"{{ ansible_check_mode }}\"\n  notify: (Handler) Run NGINX\n```", "```\n[WARNING]: empty path for ansible.builtin.blockinfile, path set to ''\n[WARNING]: error loading version info from /usr/lib/python3.10/site-packages/ansible/modules/system/setup.py: __version__ = '2.10.7'\n[WARNING]: 3.0.0 includes an experimental document syntax parser that could result in parsing errors for documents that used the previous parser. Use `--syntax-check` to verify new documents before use or consider setting `document_start_marker` to avoid using the experimental parser.\nsample-playbook.yml:1:1: ELL0011: Trailing whitespace\nsample-playbook.yml:7:1: ELL0011: Trailing whitespace\nsample-playbook.yml:9:1: ELL0011: Trailing whitespace\nsample-playbook.yml:17:1: ELL0011: Trailing whitespace\nsample-playbook.yml:22:1: ELL0011: Trailing whitespace\nsample-playbook.yml:26:1: ELL0011: Trailing whitespace\nsample-playbook.yml:29:1: ELL0011: Trailing whitespace\nsample-playbook.yml:35:1: ELL0011: Trailing whitespace\nsample-playbook.yml:38:1: ELL0011: Trailing whitespace\nsample-playbook.yml:41:1: ELL0011: Trailing whitespace\nsample-playbook.yml:44:1: ELL0011: Trailing whitespace\nsample-playbook.yml:47:1: ELL0011: Trailing whitespace\nsample-playbook.yml:50:1: ELL0011: Trailing whitespace\nsample-playbook.yml:53:1: ELL0011: Trailing whitespace\n```", "```\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=3600\ncontrol_path = ~/.ssh/multiplexing/ansible-ssh-%%r@%%h:%%p\n```", "```\nadmin@myhome:~$ ansible-galaxy collection install amazon.aws\n```", "```\nadmin@myhome:~$ pip install boto3 botocore\n```", "```\n[default]\naws_access_key_id = YOUR_ACCESS_KEY\naws_secret_access_key = YOUR_SECRET_KEY\n```", "```\nplugin: amazon.aws.aws_ec2\nregions:\n  - eu-central-1\nfilters:\n  tag:Environment:\n    - webserver\n    - frontend\n```", "```\nadmin@myhome:~$ ansible-inventory -i inventory.yml --list\n```"]