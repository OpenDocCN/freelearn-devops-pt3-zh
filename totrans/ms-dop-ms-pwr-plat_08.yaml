- en: <st c="0">8</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Demonstrating ALM and DevOps Implementation</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="45">In this chapter, we will go through a hands-on exercise involving
    a real-world example, with code snippets and step-by-step instructions.</st> <st
    c="184">We will use one</st> <st c="199">of the templates available in the</st>
    **<st c="234">Power Platform Enterprise template</st>** <st c="268">to demonstrate
    the end-to-end scenario of DevOps processes.</st> <st c="329">This template is
    the</st> **<st c="350">Employee Kudos template</st>**<st c="373">, which we can
    use to praise</st> <st c="401">others for their outstanding achievements.</st>
    <st c="445">The available solution</st> <st c="467">provides a model-driven application
    (</st>**<st c="505">Kudos Administration App</st>**<st c="530">) to administer
    the kudos, opt out users, and create badges that can be used in the canvas app
    to fill out the kudos.</st> <st c="649">This latter canvas app, called the</st>
    **<st c="684">Kudos App</st>** <st c="693">in the solution, provides a user interface</st>
    <st c="736">for users in an organization.</st> <st c="767">Since the Kudos</st>
    <st c="782">solution depends on the</st> **<st c="807">Employee Experience Base</st>**
    <st c="831">solution, we will learn how we can manage two solutions</st> <st c="887">simultaneously
    by introducing multiple</st> **<st c="927">GitHub workflows</st>** <st c="943">in
    the release train and leveraging the deployment package.</st> <st c="1004">We
    will define the branch strategy for this application, and we will delve into the
    different GitHub workflows with</st> **<st c="1120">DevSecOps</st>** <st c="1129">tasks
    to manage the development</st> <st c="1161">of these solutions.</st> <st c="1182">We
    will introduce backlog management and use the branch policies to protect our main
    branch from accidental changes.</st> <st c="1299">We will create tests for the
    Kudos app and introduce</st> **<st c="1352">monitoring</st>** <st c="1362">to
    our app and flows.</st> <st c="1385">Finally, we will learn about</st> **<st c="1414">feature
    flags</st>** <st c="1427">and how we can use them to enable</st> <st c="1461">or
    disable certain features in</st> <st c="1493">our applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1510">In this chapter, we are going to cover the following</st> <st c="1564">main
    topics:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1576">Exercise – repository management and branch strategies for</st>
    <st c="1636">the applications</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1652">Exercise – building CD pipelines and a</st> <st c="1692">release
    train</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1705">Exercise – backlog management</st> <st c="1736">in GitHub</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1745">Exercise –</st> <st c="1757">testing solutions</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1774">Exercise –</st> <st c="1786">monitoring applications</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1809">Exercise – introducing</st> <st c="1833">feature flags</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1846">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1869">To delve into the details of DevSecOps approaches and tools, we
    need to have</st> <st c="1947">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="1961">A Microsoft Azure subscription</st>**<st c="1992">: We can sign
    up for a Microsoft Azure subscription through</st> [<st c="2053">https://azure.microsoft.com/en-us/free</st>](https://azure.microsoft.com/en-us/free)<st
    c="2091">. If we have a Visual Studio subscription or are Microsoft Certified
    Trainers, we can enroll in an MSDN-based subscription with a 150 USD</st> <st
    c="2229">monthly credit.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2244">A Power Platform subscription</st>**<st c="2274">: We can sign
    up for a Power Apps Developer Plan (</st>[<st c="2325">https://www.microsoft.com/en-us/power-platform/products/power-apps/free</st>](https://www.microsoft.com/en-us/power-platform/products/power-apps/free)<st
    c="2397">), if we already have a Microsoft Entra ID work account, or we can join
    the Microsoft 365 Developer</st> <st c="2498">Program (</st>[<st c="2507">https://developer.microsoft.com/en-us/microsoft-365/dev-program</st>](https://developer.microsoft.com/en-us/microsoft-365/dev-program)<st
    c="2571">).</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2574">A GitHub handle and a public</st>** **<st c="2604">repository</st>**<st
    c="2614">: (</st>[<st c="2618">https://github.com/signup</st>](https://github.com/signup)<st
    c="2644">)</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2646">GitHub Advanced Security features</st>** <st c="2679">are available
    for free for public</st> <st c="2714">repositories:</st> [<st c="2728">https://docs.github.com/en/get-started/learning-about-github/about-github-advanced-security#about-advanced-security-features</st>](https://docs.github.com/en/get-started/learning-about-github/about-github-advanced-security#about-advanced-security-features)<st
    c="2852">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2853">Samples and walkthroughs</st>** <st c="2878">are discussed in
    this chapter and are located</st> <st c="2925">at</st> [<st c="2928">https://github.com/PacktPublishing/Mastering-DevOps-on-Microsoft-Power-Platform/tree/main/Chapter08</st>](https://github.com/PacktPublishing/Mastering-DevOps-on-Microsoft-Power-Platform/tree/main/Chapter08)<st
    c="3027">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="3028">The Azure CLI</st>**<st c="3042">: We can install the Azure
    CLI directly on our machine by following the installation guide (</st>[<st c="3135">https://learn.microsoft.com/en-us/cli/azure/install-azure-cli#install</st>](https://learn.microsoft.com/en-us/cli/azure/install-azure-cli#install)<st
    c="3205">), or we can use</st> **<st c="3223">Azure Cloud Shell</st>** <st c="3240">from
    the Azure portal to get an interactive Bash or</st> <st c="3293">PowerShell session.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="3312">GitHub Codespaces</st>**<st c="3330">: GitHub provides 60-hour
    computing resources each month to individuals for free.</st> <st c="3413">To create
    and start GitHub Codespaces, it is enough to have a</st> **<st c="3475">GitHub
    handle</st>**<st c="3488">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="3683">.devcontainer/devcontaine</st><st c="3708">r.json</st>`<st c="3715">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="3716">Exercise – repository management and branch strategies for the
    applications</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="3792">Before we delve into the hands-on</st> <st c="3826">exercises,
    it is worth getting</st> <st c="3857">familiar with the Kudos app of the Power
    Platform Enterprise template.</st> <st c="3929">We can learn more about this solution
    by visiting the official documentation</st> <st c="4005">of the enterprise template:</st>
    [<st c="4034">https://learn.microsoft.com/en-us/power-platform/enterprise-templates/hr/employee-kudos/install-and-set-up</st>](https://learn.microsoft.com/en-us/power-platform/enterprise-templates/hr/employee-kudos/install-and-set-up)<st
    c="4140">. The source code of this solution we have prepared in the repository
    provided with the book contains the additional extensions and workflows we will
    use throughout</st> <st c="4305">the exercises.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4319">In this exercise, we</st> <st c="4340">are going to create a public</st>
    **<st c="4370">GitHub repository</st>** <st c="4387">that will host our applications
    available in the chapter’s own GitHub repository, and we are going</st> <st c="4486">to
    set up our branch strategy and create</st> <st c="4527">the prerequisites to be
    able to deploy the Kudos app in our Power Platform production environment.</st>
    <st c="4627">We will take the</st> <st c="4644">following steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '| **<st c="4660">Step</st>** | **<st c="4665">Description</st>** |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="4677">1.</st> | <st c="4680">Clone the sample repository in our own
    GitHub</st> <st c="4727">public repository.</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="4745">2.</st> | <st c="4748">Create our Power Platform production
    environment that will host the Kudos app and the service principal that we will
    use in GitHub workflows.</st> <st c="4891">The credentials of the service principal
    are stored in</st> <st c="4946">GitHub secrets.</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="4961">3.</st> | <st c="4964">Create a Microsoft Entra ID Group (Azure
    AD group) that will contain the users who can use</st> <st c="5056">the application.</st>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="5072">4.</st> | <st c="5075">Create the connections of the Kudos app
    in the</st> <st c="5123">production environment.</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="5146">5.</st> | <st c="5149">Create the deployment setting file to
    manage the connection references in the CI/CD workflows, and execute the</st>
    `<st c="5261">Release to Production</st>` <st c="5282">flow to deploy Kudos app
    in the</st> <st c="5315">production environment.</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="5338">6.</st> | <st c="5341">Define our branch strategy based on the</st>
    <st c="5382">GitHub flow.</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="5394">7.</st> | <st c="5397">Create our first branch protection rule
    to enforce pull requests</st> <st c="5463">on main.</st> |'
  prefs: []
  type: TYPE_TB
- en: <st c="5471">Table 8.1 – Steps for the exercise</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5506">To simplify the</st> <st c="5522">script executions</st> <st c="5540">in
    the</st> <st c="5547">upcoming steps</st> <st c="5562">and sections, we will use</st>
    **<st c="5589">GitHub Codespaces</st>**<st c="5606">. GitHub Codespaces provides
    computing resources</st> <st c="5654">and developer containers that are hosted
    in the GitHub cloud.</st> <st c="5717">We have prepared such a container with
    various tools, such</st> <st c="5775">as the GitHub CLI,</st> **<st c="5795">Git
    CLI</st>**<st c="5802">,</st> **<st c="5804">PAC CLI</st>**<st c="5811">, and
    Azure CLI, which are already</st> <st c="5845">pre-installed on it.</st> <st c="5867">Its
    configuration is located directly</st> <st c="5905">at</st> [<st c="5908">https://github.com/PacktPublishing/Mastering-DevOps-on-Microsoft-Power-Platform/blob/main/.devcontainer/devcontainer.json</st>](https://github.com/PacktPublishing/Mastering-DevOps-on-Microsoft-Power-Platform/blob/main/.devcontainer/devcontainer.json)<st
    c="6029">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6030">To start the container, we need to navigate to the book’s GitHub
    repository in the web browser (</st>[<st c="6127">https://github.com/PacktPublishing/Mastering-DevOps-on-Microsoft-Power-Platform</st>](https://github.com/PacktPublishing/Mastering-DevOps-on-Microsoft-Power-Platform)<st
    c="6207">) and click on the</st> **<st c="6227">Code</st>** <st c="6231">button
    and then the</st> **<st c="6252">Create codespace on main</st>** <st c="6276">button,
    as shown in the</st> <st c="6301">following figure:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Creating a codespace in GitHub](img/B22208_08_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="7233">Figure 8.1 – Creating a codespace in GitHub</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7276">After clicking</st> <st c="7291">the button, the</st> `<st c="7308">devcontainer.json</st>`
    <st c="7325">file</st> <st c="7331">available under the</st> `<st c="7351">.devcontainer</st>`
    <st c="7364">folder is parsed, and</st> <st c="7386">based</st> <st c="7392">on
    that</st> <st c="7400">configuration, a new</st> **<st c="7422">Docker image</st>**
    <st c="7434">is created in the background.</st> <st c="7465">This image will run
    as a container, and in a new browser, Visual Studio Code will soon appear, having
    pre-installed the features described in the</st> <st c="7611">JSON file:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – A codespace in a browser](img/B22208_08_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="8188">Figure 8.2 – A codespace in a browser</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8225">In the</st> <st c="8232">terminal</st> <st c="8242">window (usually</st>
    **<st c="8258">Bash</st>**<st c="8262">, but</st> **<st c="8268">PowerShell</st>**
    <st c="8278">is also available) on the screen, we</st> <st c="8315">will start
    the tasks to create our own</st> <st c="8354">repository, step</st> <st c="8372">by
    step:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="8801">copilot suggest</st>` <st c="8816">or</st> `<st c="8820">copilot
    explain</st>` <st c="8835">parameters to interact with GitHub Copilot without
    switching context.</st> `<st c="8906">Gh copilot suggest</st>` <st c="8924">translates
    our natural language prompt to the correct GitHub CLI command with appropriate
    parameters, whereas</st> `<st c="9035">gh copilot explain</st>` <st c="9053">describes
    the command we are interested in by using natural language.</st> <st c="9124">We
    can use the following script to create a repository called</st> `<st c="9186">Kudos</st>`
    <st c="9191">in our own GitHub Enterprise organization, if available, or using
    our own GitHub handle after logging in (GitHub Codespaces provides, by default,
    limited access to GitHub</st> <st c="9363">administrative endpoints):</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="10110">After cloning, we can copy the files and folder from</st> `<st
    c="10164">Chapter08</st>` <st c="10173">folder to our</st> `<st c="10188">Kudos</st>`
    <st c="10193">folder (the</st> <st c="10206">git repo):</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="10289">Then, we can use the following scripts to add, commit, and push
    the files to the</st> <st c="10371">new repository:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="10635">With</st> <st c="10640">that, we</st> <st c="10650">have everything
    in our new</st> <st c="10676">repository that we will use in</st> <st c="10707">our</st>
    <st c="10712">hands-on exercises:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Our own repository with the Kudos app](img/B22208_08_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="11338">Figure 8.3 – Our own repository with the Kudos app</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11388">In our new repository, there</st> <st c="11417">is also a</st>
    `<st c="11428">.devcontainer</st>` <st c="11441">folder containing a GitHub Codespace
    definition.</st> <st c="11491">Here, let’s create our own codespace on the main
    branch and authenticate against GitHub once again to get write access to</st>
    <st c="11613">the repository:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <st c="11678">In addition, if</st> <st c="11695">we have done every preparation</st>
    <st c="11725">step right and if we open up the</st> **<st c="11759">Actions</st>**
    <st c="11766">tab</st> <st c="11770">now, we should see the available GitHub workflows,
    as shown in the</st> <st c="11838">following figure:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – GitHub workflows for the Kudos app](img/B22208_08_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="12492">Figure 8.4 – GitHub workflows for the Kudos app</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12539">We will use these workflows soon to deploy our Kudos app to a
    Power Platform</st> <st c="12617">production environment.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="13033">pac admin create</st>` <st c="13049">command, whereas to create
    a service</st> <st c="13086">principal, we apply the</st> `<st c="13111">pac admin
    create-service-principal</st>` <st c="13145">command.</st> <st c="13155">So, let’s
    create the production environment for our Kudos application, using an interactive
    login to our Power Platform tenant in GitHub Codespaces</st> <st c="13303">or
    locally:</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**<st c="14974">Create an AAD group</st>**<st c="14994">: If we use the service
    principal to deploy a solution to our target environment, then the applications
    within the solution are owned by the service principal.</st> <st c="15155">To
    give others access to the applications, we need</st> <st c="15205">to create a</st>
    **<st c="15218">Microsoft Entra ID security group</st>** <st c="15251">(which
    we learned how to do in</st> [*<st c="15283">Chapter 7</st>*](B22208_07.xhtml#_idTextAnchor115)<st
    c="15292">).</st> <st c="15296">We need to be assigned the</st> *<st c="15323">Groups
    Administrator</st>* <st c="15343">Microsoft Entra built-in role to manage group
    creation and member assignment.</st> <st c="15422">Let’s execute the following</st>
    <st c="15449">script to create a Microsoft Entra</st> <st c="15485">ID group:</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**<st c="16422">Prepare the Power Platform production environment</st>**<st
    c="16472">: The Kudos app contains four Power Automate cloud flows and Power Apps
    canvas apps that use connection references and their corresponding connections,
    created for</st> *<st c="16637">Dataverse</st>*<st c="16646">,</st> *<st c="16648">Office
    365 Outlook</st>*<st c="16666">, and</st> *<st c="16672">Office 365 Users</st>*
    <st c="16688">connectors.</st> <st c="16701">The</st> **<st c="16705">connection
    references</st>** <st c="16726">are used to make the connections</st> <st c="16759">adjustable
    in other environments.</st> <st c="16794">The</st> **<st c="16798">connectors</st>**
    <st c="16808">are the definitions</st> <st c="16828">of the</st> <st c="16836">connections;
    like classes in</st> **<st c="16865">object-oriented programming</st>** <st c="16892">(</st>**<st
    c="16894">OOP</st>**<st c="16897">), they are</st> **<st c="16910">OpenAPI-based</st>**
    **<st c="16923">REST API</st>** <st c="16932">specifications that</st> <st c="16952">are
    instantiated as</st> **<st c="16973">connections</st>** <st c="16984">(i.e., objects
    in OOP) in the environment.</st> <st c="17028">When we use solutions to create
    our flows, apps, and other Power Platform assets, then every time we initiate
    a new connection in a flow or an app, a</st> **<st c="17178">connection reference</st>**
    <st c="17198">is automatically created in the solution.</st> <st c="17241">If
    we work outside of the solution and create a flow under</st> **<st c="17300">My
    flows</st>**<st c="17308">, then direct connections are created instead of connection
    references.</st> <st c="17380">However, a Dataverse connection can be created
    by the PAC CLI on behalf of a service principal in our production environment
    with the</st> <st c="17514">following script:</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="17621">The</st> <st c="17626">Office 365 Outlook and Office 365 Users</st>
    <st c="17665">connectors require service accounts</st> <st c="17702">and real
    user accounts, not service principals, to authenticate in Outlook and Office 365
    APIs.</st> <st c="17798">We cannot assign O365 or M365 licenses to service principals.</st>
    <st c="17860">That’s why we need to create those</st> <st c="17895">connections
    in the target environment before deploying our solutions.</st> <st c="17965">We
    can create</st> <st c="17978">these connections in the</st> **<st c="18004">PowerApps
    maker portal</st>** <st c="18026">under the</st> **<st c="18037">Connections</st>**
    <st c="18048">blade by clicking the</st> **<st c="18071">+ New connection</st>**
    <st c="18087">button, as shown in the</st> <st c="18112">following figure:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.5 – Connections for the Kudos application](img/B22208_08_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="18589">Figure 8.5 – Connections for the Kudos application</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18639">After creating the three</st> <st c="18665">connections, we should
    see the same result as displayed in the figure.</st> <st c="18736">Finally, we
    need to share these connections with the service principal and the application
    user that was created earlier in</st> *<st c="18860">step 2</st>*<st c="18866">,
    by clicking the three dots and selecting the</st> **<st c="18913">Share</st>**
    <st c="18918">menu element</st> <st c="18932">in</st> **<st c="18935">Connections</st>**<st
    c="18946">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6 – Sharing the connection with the service principal](img/B22208_08_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="19269">Figure 8.6 – Sharing the connection with the service principal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19331">Let’s</st> <st c="19338">use these connections in our deployment
    by</st> <st c="19380">introducing the deployment</st> <st c="19408">settings</st>
    <st c="19417">file.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19422">Deployment settings file</st>**<st c="19447">: To use</st>
    <st c="19457">these connections during the deployment of the solution, we need
    to use a so-called</st> **<st c="19541">deployment setting file</st>**<st c="19564">.
    This file has been already</st> <st c="19592">generated for the solution with
    the</st> <st c="19629">following script:</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="19715">This command takes out the</st> `<st c="19842">\src\mpa_Kudos\deploymentSettings.json</st>`
    <st c="19880">file in the</st> <st c="19893">GitHub repository:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="20403">The missing</st> `<st c="20416">ConnectionId</st>` <st c="20428">values
    are set</st> <st c="20443">during</st> <st c="20450">the GitHub workflow runs.</st>
    <st c="20477">These values</st> <st c="20490">are the incoming parameters of our
    workflows.</st> <st c="20536">To get these values from our Power Platform environment,
    we</st> <st c="20595">need to click on the connections in the</st> **<st c="20636">Power
    Apps maker portal</st>** <st c="20659">and copy the IDs of the connections</st>
    <st c="20695">from the corresponding URLs.</st> <st c="20725">The following figure
    shows the connection ID of the Dataverse connection, highlighted in</st> <st c="20814">the
    URL:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.7 – The connection ID in the URL](img/B22208_08_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="21339">Figure 8.7 – The connection ID in the URL</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21380">The first</st> <st c="21390">GUID in the URL is the environment
    ID, whereas</st> <st c="21438">the second GUID is the connection</st> <st c="21472">ID.</st>
    <st c="21476">The following example highlights</st> <st c="21509">the</st> <st
    c="21513">second GUID:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: export GH_DEBUG=<st c="28488">gh</st> command executed will print the detailed
    trace in the standard output.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: az login <st c="28712">--debug</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="28967">%userprofile%\.dotnet\tools\.store\microsoft.powerapps.cli.tool\1.30.7\microsoft.powerapps.cli.tool\1.30.7\tools\net6.0\any\logs\pac-log.txt</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ref=${{ github.ref }}
  prefs: []
  type: TYPE_NORMAL
- en: branch="${ref#refs/heads/dev/}"
  prefs: []
  type: TYPE_NORMAL
- en: echo "$branch"
  prefs: []
  type: TYPE_NORMAL
- en: Workflow is executed on the dev branch so we need to get the environment URL
    from the dev branch <st c="37439">rawOutput=$(pac admin list --name $branch |
    tail -n 2)</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '<st c="37493">environmentURL=$(echo $rawOutput | cut -d '' '' -f 3)</st> echo
    "Environment URL: $environmentURL"'
  prefs: []
  type: TYPE_NORMAL
- en: setting the env.devEnvironmentURL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: echo "devEnvironmentURL=$environmentURL" >> "$GITHUB_ENV"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '- shell: bash'
  prefs: []
  type: TYPE_NORMAL
- en: 'run: |'
  prefs: []
  type: TYPE_NORMAL
- en: '# Find all Solution.xml files in the solution directory and its subdirectories
    <st c="40321">find</st> ${{ inputs.source_folder }} -type f -name "Solution.xml"
    | while read -r file; do'
  prefs: []
  type: TYPE_NORMAL
- en: '# Replace the content of the <Version> tag with version number provided in
    the input <st c="40493">sed</st> -i ''s|<Version>.*</Version>|<Version>${{ inputs.version_number
    }}</Version>|g'' "$file"'
  prefs: []
  type: TYPE_NORMAL
- en: done
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'set-version-number:'
  prefs: []
  type: TYPE_NORMAL
- en: 'needs: [ commit-to-dev-kudos ]'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'name: Set the version numbers to 0.0.0.0'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'uses: jovadker/ppdemo/.github/workflows/set-version-number.yml@main'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'with:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'source_folder: src/'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'version_number: "0.0.0.0"'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: pac solution init --publisher-name developer --publisher-prefix dev
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: pac package init --outputDirectory DeploymentPackage
  prefs: []
  type: TYPE_NORMAL
- en: cd .\DeploymentPackage <st c="47048">pac package add-solution --path <<PATHTORELEASE>>\mpa_EmployeeExperienceBase_managed.zip</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="47252">pac package add-solution</st> command adds the managed solutions
    that were previously built by <st c="47342">MSBuild</st> to this <st c="47358">.csproj</st>
    file as references. After setting up the deployment package, we can use the <st
    c="47442">dotnet publish -c Release</st> command to build the release version
    of the deployment package.
  prefs: []
  type: TYPE_NORMAL
- en: <st c="47531">The deployment package</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="47554">We have created a folder structure in the GitHub repository where
    the two solutions and the</st> `<st c="47647">DeploymentPackage</st>` <st c="47664">folder
    are placed under the</st> `<st c="47693">src</st>` <st c="47696">folder.</st>
    <st c="47705">The</st> `<st c="47709">csproj</st>` <st c="47715">file in the</st>
    `<st c="47728">DeploymentPackage</st>` <st c="47745">folder references the release
    builds of the two solutions, Employee Experience Base</st> <st c="47830">and Kudos.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="47840">Finally, we can create our GitHub release</st> <st c="47882">by
    using the</st> *<st c="47896">GitHub Release</st>* <st c="47910">workflow, located
    under</st> `<st c="47935">/.github/workflows/create-release.yml</st>`<st c="47972">.
    The high-level steps and the key takeaways of the workflow are</st> <st c="48037">as
    follows:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="48376">/.github/actions/set-version-number-action/action.yml</st>`<st
    c="48429">, and it sets the version number of Power Platform solutions.</st> <st
    c="48491">As we saw earlier, reusable workflows need to be run as jobs, which
    means the GitHub runner will clean up the local repository after finishing the
    reusable workflow job and moving on to the next job.</st> <st c="48691">If we
    don’t want to commit our version numbers, we need to run all actions within the
    same job.</st> <st c="48787">That’s why we have created this</st> <st c="48819">composite
    action.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<st c="48932">MSBuild</st>` <st c="48939">and</st> `<st c="48944">dotnet</st>`
    <st c="48950">CLIs available</st> <st c="48965">for our build actions.</st> <st
    c="48989">We build the solutions with the</st> <st c="49021">following command:</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`<st c="49610">gh cli</st>` <st c="49616">command to create a</st> <st c="49637">GitHub
    release:</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="49789">By using the</st> `<st c="49803">generate-notes</st>` <st c="49817">argument,
    the GitHub release notes will be automatically generated.</st> <st c="49886">We
    also attach our binaries to the created release by referring to the folder and
    its content,</st> `<st c="49981">${{</st>` `<st c="49985">env.solution_release_folder}}/*.*</st>`<st
    c="50018">.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="50019">Let’s now execute this flow with its default parameters and, upon
    completion, check whether we can see on the main page of our GitHub repository,
    under</st> **<st c="50172">Releases</st>**<st c="50180">, a release called</st>
    **<st c="50199">Initial release</st>**<st c="50214">. By opening it, we should
    discover more details about our first release – for example, the</st> <st c="50306">attached
    assets:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.22 – The GitHub release with the Power Platform package](img/B22208_08_22.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="50590">Figure 8.22 – The GitHub release with the Power Platform package</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="50654">The package deployer</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="50675">The</st> `<st c="50680">.pdpkg</st>` <st c="50686">(</st> `<st
    c="50899">pac package deploy --package</st>` `<st c="50928">.\bin\Release\mpa_Kudos_DeploymentPackage.1.0.0.pdpkg.zip</st>`
    <st c="50985">on the other tenant.</st> <st c="51007">These packages</st> <st
    c="51021">can also upload data and prepare the target environment for</st> <st
    c="51082">the solutions.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="51096">With GitHub releases, we can</st> <st c="51125">distribute our
    development project results to IT ops teams responsible for the production tenant,
    without directly connecting our developer tenant and workflows with the</st> <st
    c="51296">production one.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="51311">If you encounter issues when attempting to run</st> <st c="51358">the
    workflows, consider the following</st> <st c="51397">troubleshooting options:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**<st c="51421">Check the run logs</st>**<st c="51440">: The first step is
    to check the logs of the workflow run.</st> <st c="51500">GitHub provides detailed
    logs for each step of the workflow, which can help us identify where an</st> <st
    c="51597">error occurred.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="51699">ACTIONS_STEP_DEBUG</st>` <st c="51717">secret to enable step
    debug logs, which provide more detailed output for</st> <st c="51791">each step.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="51801">Run the workflow locally</st>**<st c="51826">: We can use tools
    such as</st> **<st c="51854">act</st>** <st c="51857">(</st>[<st c="51859">https://github.com/nektos/act</st>](https://github.com/nektos/act)<st
    c="51888">) to run our workflows locally on our machine.</st> <st c="51936">This
    can help us debug the workflow in an environment</st> <st c="51990">we control.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="52045">.yml</st>` <st c="52049">workflow file is correctly formatted
    and that all required fields are present.</st> <st c="52129">Syntax errors or
    missing fields can cause workflows to fail.</st> <st c="52190">We should very
    carefully change the indent of the lines in YML files because only one additional
    space can lead to a</st> <st c="52307">syntax error.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="52320">Check for external changes</st>**<st c="52347">: Sometimes,
    changes in external dependencies or an environment can cause workflows to fail.</st>
    <st c="52441">We need to ensure that all external services and dependencies</st>
    <st c="52503">are operational.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="52519">Now, let’s move on to the next topic and delve into</st> <st c="52572">backlog
    management.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="52591">Exercise – backlog management in GitHub</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="52631">In</st> [*<st c="52635">Chapter 1</st>*](B22208_01.xhtml#_idTextAnchor014)<st
    c="52644">, we learned about why it is essential to track our activities, user
    stories, change requests, and bug fixes on any code base.</st> <st c="52771">Let’s
    recall the</st> <st c="52788">key takeaways:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="52802">We want to plan our developer work in every sprint ahead</st>
    <st c="52859">to laser-focus</st> <st c="52874">on the</st> <st c="52881">most
    critical</st> **<st c="52896">features</st>**<st c="52904">,</st> **<st c="52906">bugs</st>**<st
    c="52910">, and</st> **<st c="52916">defects</st>**<st c="52923">. The entire</st>
    **<st c="52936">sprint planning process</st>** <st c="52959">is based on a healthy</st>
    **<st c="52982">product backlog</st>** <st c="52997">that every developer</st>
    <st c="53018">and product owner</st> <st c="53036">needs</st> <st c="53043">to
    maintain.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="53055">Healthy backlog management allows only source code changes</st>
    <st c="53114">that are planned to avoid</st> **<st c="53141">gold plating</st>**
    <st c="53153">(developers adding extra features that are not part of the activity)
    and</st> **<st c="53227">scope creeping</st>** <st c="53241">(when a project team
    works on features</st> <st c="53280">that are requested by the customer without
    adjusting the project’s cost</st> <st c="53353">or timeline).</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="53366">Backlog management</st>** <st c="53385">provides</st> **<st
    c="53395">backward traceability</st>** <st c="53416">as well as the ability to
    trace</st> <st c="53448">back from the application running in production to the
    source</st> <st c="53510">code that produced the</st> **<st c="53534">binaries</st>**
    <st c="53542">of the application.</st> <st c="53563">We can use this information
    for root-cause analysis to discover which change, tracked by a work item, led
    to issues</st> <st c="53679">in production.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="53693">Both Azure DevOps Services</st> <st c="53720">and GitHub provide
    these requirement engineering</st> <st c="53769">and issue management capabilities,
    with advanced project management features, such as scheduling our activities and
    assigning them to team members</st> <st c="53917">in sprints.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="53928">To maintain healthy backlog management in GitHub, we can</st>
    <st c="53985">improve the minimum</st> `<st c="54251">pull_request</st>` <st c="54263">action
    targeting the branch main and executes the</st> <st c="54314">following actions:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.23 – A pull request-triggered workflow for branch protection](img/B22208_08_23.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="54475">Figure 8.23 – A pull request-triggered workflow for branch protection</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="54544">The key part</st> <st c="54557">of our workflow</st> <st c="54573">looks
    as follows (located</st> <st c="54600">under</st> `<st c="54606">/.github/workflows/pr-check.yml</st>`<st
    c="54637">):</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: <st c="55574">We use</st> `<st c="55582">curl</st>` <st c="55586">to query the
    comments</st> <st c="55608">belonging to the issue</st> <st c="55631">via the
    REST API endpoint (</st>`<st c="55659">https://api.github.com/repos/${{ github.repository
    }}/issues/${{ github.event.pull_request.number }}/comments</st>`<st c="55769">),
    since every pull request is also modeled as an</st> `<st c="55910">no_comments</st>`<st
    c="55921">, accordingly.</st> <st c="55936">The next action consumes the output
    of the previous action and passes or fails the build.</st> <st c="56026">If the
    workflow fails, the pull request is blocked, and the merge is not allowed.</st>
    <st c="56108">The workflow also checks at the beginning whether there is a description
    added to the pull request with the same approach.</st> <st c="56231">We can correct
    our pull request by writing descriptions and adding comments in hindsight.</st>
    <st c="56321">Also, we can use GitHub Copilot to generate our pull request description,
    based on the changes between the child and</st> <st c="56438">parent branches:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.24 – Using GitHub Copilot to generate PR descriptions](img/B22208_08_24.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="57005">Figure 8.24 – Using GitHub Copilot to generate PR descriptions</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="57067">We just need to click</st> <st c="57089">on the Copilot</st> <st
    c="57104">icon, and then the underlying</st> **<st c="57135">GPT-4 model</st>**
    <st c="57146">generates the summary</st> <st c="57168">for the pull request –
    in our case,</st> **<st c="57205">The pull request includes a minor change to
    the</st>** **<st c="57253">Readme.md file…</st>**<st c="57268">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="57269">If we want to introduce more complex checks during the pull request
    in conjunction with backlog</st> <st c="57365">management, we can visit the</st>
    `<st c="57439">verify-linked-issue</st>` <st c="57458">(</st>[<st c="57460">https://github.com/marketplace/actions/verify-linked-issue</st>](https://github.com/marketplace/actions/verify-linked-issue)<st
    c="57518">), which checks whether pull requests have at least one linked</st>
    <st c="57582">issue attached.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="57597">Now that we have established strict control of our repository
    and work management, let’s move on to the next topic,</st> **<st c="57714">quality
    assurance</st>**<st c="57731">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="57732">Exercise – testing solutions</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="57761">In</st> [*<st c="57765">Chapter 6</st>*](B22208_06.xhtml#_idTextAnchor103)<st
    c="57774">, we delved into the</st> **<st c="57795">quality assurance</st>** <st
    c="57812">(</st>**<st c="57814">QA</st>**<st c="57816">) topics and learned</st>
    <st c="57837">about the tools and frameworks</st> <st c="57868">that are available
    for end-to-end UI testing</st> <st c="57913">in PowerApps, such as</st> **<st
    c="57936">Power Apps Test Engine</st>**<st c="57958">, or open</st> <st c="57968">source</st>
    <st c="57974">web</st> <st c="57978">testing</st> <st c="57987">frameworks, such
    as</st> **<st c="58007">Selenium</st>**<st c="58015">,</st> **<st c="58017">Playwright</st>**<st
    c="58027">,</st> **<st c="58029">Appium</st>** <st c="58035">or</st> **<st c="58039">Cypress</st>**<st
    c="58046">. We also concluded that Power Automate cloud flows and</st> **<st c="58102">desktop
    flows</st>** <st c="58115">are considered</st> <st c="58130">our business logic
    layer, and we can test them through the UI components, as end-to-end tests.</st>
    <st c="58226">In this section, we are going to do</st> <st c="58262">the following:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="58276">Create a test in Power Apps Test Studio for the Kudos app in our
    Power Platform developer</st> <st c="58367">environment (</st>`<st c="58380">DEV-US_XXX_Z</st>`<st
    c="58393">).</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="58396">Download it as a test suite</st> **<st c="58425">YAML file</st>**
    <st c="58434">and commit it to our developer</st> <st c="58465">branch (remember
    that this branch is</st> <st c="58503">still alive).</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="58516">Run it locally with the help of the</st> <st c="58553">PAC CLI.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="58561">Introduce this step to our</st> *<st c="58589">Commit to dev branch</st>*
    <st c="58609">GitHub workflow.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="58626">We also have some prerequisites</st> <st c="58658">for this test</st>
    <st c="58673">automation scenario:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="58693">To be able to execute our test during the CI/CD process, we also</st>
    <st c="58758">need to have a user without</st> **<st c="58787">Multifactor Authentication</st>**
    <st c="58813">(</st>**<st c="58815">MFA</st>**<st c="58818">) in our development
    tenant; learn more about it in the link in the</st> *<st c="58887">Further reading</st>*
    <st c="58902">section (Power Apps</st> <st c="58923">Test Engine).</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="58936">We also need to share the Kudos app</st> <st c="58972">under the</st>
    **<st c="58983">Solutions</st>** <st c="58992">blade with this</st> **<st c="59009">Microsoft
    Entra</st>** **<st c="59025">ID user</st>**<st c="59032">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="59033">We must add this user</st> <st c="59055">to the developer environment
    (</st>`<st c="59086">DEV-US_XXX_Z</st>`<st c="59099">) in the</st> **<st c="59109">Power
    Platform Admin Center</st>**<st c="59136">, and we need</st> <st c="59149">to</st>
    <st c="59153">assign the built-in</st> **<st c="59173">Security Role</st>**<st
    c="59186">,</st> **<st c="59188">Basic User</st>**<st c="59198">, and the custom
    one,</st> **<st c="59220">Kudos Employee</st>**<st c="59234">, to this</st> <st
    c="59244">user.</st> <st c="59250">This latter one gives access to the custom
    tables created by the Kudos solution and contains the badges, as well as the already</st>
    <st c="59378">shared Kudos.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="59391">We need to start the app interactively once on behalf of our test
    user without MFA, granting them access to the connections used in the Kudos app,
    Office 365 Users, and Office</st> <st c="59568">365 Outlook.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="59580">Finally, we need to share the</st> *<st c="59611">Kudo App – Share
    Kudo with Sender</st>*<st c="59644">,</st> *<st c="59646">Assign to Recipient</st>*<st
    c="59665">, and</st> *<st c="59671">Kudos App - Notification email</st>* <st c="59701">cloud
    flows with this user as</st> *<st c="59732">Run only users</st>* <st c="59746">in
    the Power</st> <st c="59759">Automate cloud</st> <st c="59775">flow UI.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="59783">We can easily record</st> <st c="59804">our tests by using the</st>
    `<st c="60514">/test/SmokeTestSuite.yaml</st>` <st c="60539">file to continue</st>
    <st c="60557">this exercise.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="60571">Once we have our YAML file, we need to make some</st> <st c="60620">changes
    to be able to run in</st> `<st c="60924">0x0</st>`<st c="60927">, such as</st>
    `<st c="60937">102x768</st>` <st c="60944">pixels (</st>`<st c="60953">screenWidth</st>`
    `<st c="60966">X screenHeight</st>`<st c="60980">):</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: <st c="61184">Besides these updates, we can set</st> `<st c="61219">headless</st>`
    <st c="61227">parameter to</st> `<st c="61241">false</st>` <st c="61246">for local
    testing purposes to follow the UI actions in a Chromium-based browser.</st> <st
    c="61328">To execute this test YAML file locally, we can use the following script</st>
    <st c="61400">in Bash:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: <st c="61615">We need to set the test user</st> <st c="61644">email address
    and password as environment variables, and we also need to provide the test file
    location, the environment ID, and tenant ID.</st> <st c="61785">After successful
    execution, we will find the test results in the</st> `<st c="61850">TestOutput</st>`
    <st c="61860">folder with the video recording, as well in the</st> `<st c="61909">.</st>``<st
    c="61910">webm</st>` <st c="61915">format.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="61923">To execute this test in GitHub, we need</st> <st c="61963">to
    create two additional</st> `<st c="62092">TESTUSER</st>` <st c="62100">and</st>
    `<st c="62105">TESTUSERPSW</st>`<st c="62116">, and – similar to the other three
    ones (</st>`<st c="62157">PPAPPID</st>`<st c="62165">,</st> `<st c="62167">PPAPPSECRET</st>`<st
    c="62178">, and</st> `<st c="62184">PPTENANTID</st>`<st c="62194">) that we created
    at the beginning of</st> <st c="62233">this chapter.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="62246">We have crafted a GitHub workflow in advance to execute our</st>
    `<st c="62307">SmokeTestSuite.yaml</st>` <st c="62326">file easily on the dev
    branch.</st> <st c="62358">This workflow is available under</st> `<st c="62391">/.github/workflows/run-test.yml</st>`
    <st c="62422">and uses the following Bash script to run</st> <st c="62465">the
    test:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '# Login interactively'
  prefs: []
  type: TYPE_NORMAL
- en: az login
  prefs: []
  type: TYPE_NORMAL
- en: Select the right subscription
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: az account set --subscription baa70448-593c-4dc7-8a91-c92cf7eaf66e
  prefs: []
  type: TYPE_NORMAL
- en: az group create --location westeurope --resource-group KudosApp.AI.RG <st c="69077">workspace=$(az
    monitor log-analytics workspace create \</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="69132">--resource-group KudosApp.AI.RG \</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="69166">--workspace-name KudosWorkspace \</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="69200">--location westeurope --query id --output tsv)</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="69247">az monitor app-insights component create \</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="69290">--app KudosAppInsights \</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="69315">--location westeurope \</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="69339">--workspace $workspace \</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="69450">instrumentationKey</st> key as well. We can now add the key to
    the Kudos app and try it out to see how data is ingested into the <st c="69574">Application</st>
    <st c="69586">Insights</st> dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: <st c="69605">Canvas app insights</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="69625">To view telemetry</st> <st c="69643">information, we need to enable
    canvas app insights in the Power Platform admin center.</st> <st c="69731">Go
    to</st> **<st c="69737">Settings</st>**<st c="69745">, which lists all the tenant
    settings, and select the</st> **<st c="69799">Canvas app insights</st>** <st c="69818">item.</st>
    <st c="69825">In the</st> **<st c="69832">Canvas app insights</st>** <st c="69851">pane
    on the right side, we can turn this</st> <st c="69893">feature on.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="69904">Of course, we don’t want to store directly the instrumentation
    key in the canvas app.</st> <st c="69991">The simplest way to make the instrumentation
    key independent from the app would be to introduce a new environment variable,
    but at the time of writing, it is not supported for the instrumentation key property.</st>
    <st c="70201">What we can do is update our deployment pipeline and replace the
    instrumentation</st> <st c="70281">key with the correct value, stored as a</st>
    `<st c="70580">json file</st>` <st c="70589">in our solution folder –</st> `<st
    c="70615">/src/mpa_Kudos/src/CanvasApps/src/mpa_KudosApp/AppInsightsKey.json</st>`<st
    c="70681">. This contains the instrumentation key that we can replace with the
    correct one inside our</st> <st c="70773">GitHub workflow.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="70789">Although we don’t have a custom chatbot in this solution,</st>
    **<st c="70848">Microsoft Copilot Studio</st>** <st c="70872">also supports this
    kind of integration</st> <st c="70911">with Azure Application Insights.</st> <st
    c="70945">We can configure the connection string of our Azure Application Insights
    instance under</st> **<st c="71033">Settings</st>** <st c="71041">in the</st>
    **<st c="71049">Copilot details</st>** <st c="71064">menu, under the</st> **<st
    c="71081">Advanced</st>** <st c="71089">tab, as shown in the</st> <st c="71111">following
    figure:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.27 – Application Insights in Microsoft Copilot Studio](img/B22208_08_27.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="72035">Figure 8.27 – Application Insights in Microsoft Copilot Studio</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="72097">Here, we should provide</st> <st c="72121">the entire connection
    string in the</st> <st c="72158">following format:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: <st c="72422">We can find this string in the</st> **<st c="72454">Overview</st>**
    <st c="72462">blade of our Azure Application</st> <st c="72494">Insights instance.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="72512">In the case of</st> **<st c="72528">Power Pages websites</st>**<st
    c="72548">, we need to infuse the code snippet</st> <st c="72584">that tracks
    the user actions on the website and ingests the telemetry data into the Azure
    Application Insights endpoint.</st> <st c="72706">We just need to get the client-side
    JavaScript snippet available in the documentation</st> <st c="72791">and add it
    as a content snippet in our</st> **<st c="72831">Power Pages</st>** **<st c="72843">management</st>**
    <st c="72853">app:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.28 – Application Insights in Power Pages](img/B22208_08_28.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="73599">Figure 8.28 – Application Insights in Power Pages</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="73648">The snippet itself</st> <st c="73667">is available here at</st>
    [<st c="73689">https://learn.microsoft.com/en-us/azure/azure-monitor/app/javascript-sdk?tabs=javascriptwebsdkloaderscript</st>](https://learn.microsoft.com/en-us/azure/azure-monitor/app/javascript-sdk?tabs=javascriptwebsdkloaderscript)<st
    c="73795">, and only the connection string should be updated with</st> <st c="73851">our
    one.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="73859">Besides canvas apps, custom</st> <st c="73887">chatbots, and Power
    Pages websites, Azure Application Insights as the common APM framework</st> <st
    c="73978">for Power Platform</st> <st c="73997">can be used to monitor</st> **<st
    c="74021">model-driven applications</st>**<st c="74046">, Power Automate cloud
    flows, and</st> **<st c="74080">Dataverse diagnostics and performance events</st>**<st
    c="74124">. This can be done using the</st> **<st c="74153">Export data to Application
    Insights</st>** <st c="74188">feature, which is available in the</st> <st c="74223">Power
    Platform admin center if we own paid/premium Dataverse licenses.</st> <st c="74295">For
    us, it means we can create export packages that push the telemetry data from the
    selected environment to our Application Insights service, without infusing the
    endpoint or the connection string to our Power Platform assets.</st> <st c="74523">We
    don’t need to prepare or create anything in our solutions; the environment and
    this export job will take care of the telemetry ingestion.</st> <st c="74664">It
    is recommended to use one Application Insights instance per environment, and note
    that this feature is turned on and supported in managed</st> <st c="74805">environments
    only.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="74823">Delayed ingestion of telemetry data</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="74859">The timeframe set out in the</st> **<st c="74889">service level
    agreement</st>** <st c="74912">(</st>**<st c="74914">SLA</st>**<st c="74917">)
    for the delivery of telemetry data streams</st> <st c="74962">from Power Platform
    products supported by this feature to Application Insights is</st> <st c="75045">24
    hours.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="75054">If we want to collect</st> <st c="75076">real-time telemetry from
    these Power Platform assets, we can create our own extensions, such as</st> <st
    c="75173">the following:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="75187">In model-driven apps, we can create a</st> **<st c="75226">Power
    Platform Component Framework</st>** <st c="75260">(</st>**<st c="75262">PCF</st>**<st
    c="75265">) control that is displayed</st> <st c="75293">in the UI and connects
    to the Application Insights endpoint</st> <st c="75353">with</st> <st c="75359">client-side
    JavaScript.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="75382">With Power Automate cloud flows, we can use the information that
    is logged in Dataverse about the start time, durations, end time, status (e.g.,
    failing, canceling, or succeeding), and executed actions</st> <st c="75584">of
    cloud flows and send it, with the help of the</st> **<st c="75634">Dataverse plugin</st>**<st
    c="75650">, to the Application Insights endpoint.</st> <st c="75690">The other
    option to monitor these flows is to use the new built-in</st> **<st c="75757">Automation
    center</st>** <st c="75774">blade in</st> <st c="75784">Power Automate:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.29 – The Power Automate Automation center](img/B22208_08_29.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="76747">Figure 8.29 – The Power Automate Automation center</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="76797">Here, we can visualize the data logged in Dataverse, and we can
    use Copilot on the right-hand side to get help</st> <st c="76909">with troubleshooting.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="76930">With Dataverse, we can develop a</st> **<st c="76964">custom Dataverse
    plugin</st>** <st c="76987">that sends this information</st> <st c="77015">to
    the Application  Insights</st> <st c="77043">endpoint, with the help of the</st>
    **<st c="77075">C# SDK</st>**<st c="77081">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="77082">As we have seen, Azure Application</st> <st c="77117">Insights
    is an enterprise-ready application performance management PaaS solution that we
    can easily integrate into our Power Platform</st> <st c="77252">product portfolio.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="77270">Now, we will delve into our final topic, the world of feature
    flags, and what they can bring to our Power</st> <st c="77377">Platform solutions.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="77396">Exercise – introducing feature flags</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="77433">In custom development projects,</st> **<st c="77466">feature flags</st>**
    <st c="77479">are used to turn on or off features</st> <st c="77515">of applications.</st>
    <st c="77533">Agile teams benefit from this concept very much because features
    with great impact and long development time, which span over multiple sprints,
    can be kept hidden from end users until they are fully developed.</st> <st c="77743">Consider
    features such as enabling the Copilot feature in Microsoft Azure or making GitHub
    Copilot available in public repositories.</st> <st c="77876">These features were
    developed behind feature flags before they were released to the public audience.</st>
    <st c="77977">We also very often use feature flags to turn on new features for
    a group of users (e.g., users who participate in beta-testing activities).</st>
    <st c="78117">The aforementioned Copilots were first available as a private preview
    for dedicated customers, then they went to the public preview stage, and finally,
    they became</st> <st c="78281">generally available.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="78301">The solution-specific</st> **<st c="78324">environment variables</st>**
    <st c="78345">in Power Platform can provide this feature flag capability, if we</st>
    <st c="78411">use it in front of new features.</st> <st c="78445">To use environment
    variables in Power Platform solutions as feature flags, we can follow</st> <st
    c="78534">these steps:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="78546">Create an environment variable within our solution.</st> <st c="78599">This
    can be done by selecting</st> **<st c="78629">New</st>** <st c="78632">|</st>
    **<st c="78635">More</st>** <st c="78639">| the</st> **<st c="78646">Environment</st>**
    <st c="78657">variable in the solution we are</st> <st c="78690">working on.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="78701">Set the data type for the environment variable, which can be</st>
    `<st c="78763">Boolean</st>`<st c="78770">,</st> `<st c="78772">Option Set</st>`<st
    c="78782">, or</st> `<st c="78787">Text</st>`<st c="78791">, depending on what
    we need for the</st> <st c="78827">feature flag.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="78840">Use the environment variable in our solution components, such
    as Power Automate flows, Power Apps canvas apps, or custom connectors.</st> <st
    c="78974">For Power Apps, we can access the environment variable value using the</st>
    `<st c="79045">LookUp()</st>` <st c="79053">PowerFX function, and for Power Automate,
    we can use Dataverse’s</st> `<st c="79119">Perform an outbound action</st>` <st
    c="79145">with the action</st> <st c="79162">name</st> `<st c="79167">RetrieveEnvironmentVariableSecretValue</st>`<st
    c="79205">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="79206">Deploy our solution to different environments, and change the
    environment variable value according to our feature flag settings.</st> <st c="79336">This
    allows us to enable or disable certain features or functionalities based on the</st>
    <st c="79421">environment settings.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="79442">Let’s introduce a feature flag</st> <st c="79473">to our Kudos
    app solution to control which label needs to be displayed on the landing page
    – the original one, or the one that we created in the</st> *<st c="79619">Exercise
    – building CD pipelines and a release train</st>* <st c="79671">section earlier
    in</st> <st c="79691">this chapter:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.30 – An environment variable as a feature flag](img/B22208_08_30.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="80127">Figure 8.30 – An environment variable as a feature flag</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="80182">We define this</st> <st c="80198">environment variable with the</st>
    `<st c="80228">Boolean</st>` <st c="80235">data type and its default value is
    set to</st> `<st c="80427">featureFlagLabel</st>`<st c="80443">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="80444">To read the value of an environment variable in a canvas app using
    PowerFX, we can use the</st> <st c="80536">following method:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="80553">Make sure we have added the</st> `<st c="80582">Environment Variable
    Values</st>` <st c="80609">table to our canvas app’s</st> <st c="80636">data sources.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="80649">Use the</st> `<st c="80658">LookUp()</st>` <st c="80666">function
    with the schema name of our environment variable – for example,</st> `<st c="80740">LookUp('Environment
    Variable Values', 'Environment Variable Definition'.'Schema Name' = "</st>``<st
    c="80829">YourEnvironmentVariableSchemaName").Value</st>`<st c="80871">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="80872">This will retrieve the current value of the environment variable</st>
    <st c="80938">we specified.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="80951">Let’s open our Kudos app to edit</st> <st c="80984">from our solution,
    and then introduce the new data source,</st> `<st c="81044">Environment Variable
    Values</st>`<st c="81071">. After that, we need to change the</st> `<st c="81107">Text</st>`
    <st c="81111">property of</st> `<st c="81124">lblTitle_LandingScreen</st>` <st
    c="81146">from static text to</st> <st c="81167">the following:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: <st c="81513">As we learned in the first section of this chapter, deployment
    settings files do not only contain connection references but also environment
    variables.</st> <st c="81666">Our</st> `<st c="81670">deploymentSettings.json</st>`
    <st c="81693">file is located under</st> `<st c="81716">\src\mpa_Kudos\deploymentSettings.json</st>`<st
    c="81754">. With the help of the</st> `<st c="81777">cat</st>` <st c="81780">command,
    we have already updated this file in our GitHub workflows (</st>*<st c="81849">Release
    to Production</st>* <st c="81871">and</st> *<st c="81876">Import to dev</st>*<st
    c="81889">) regarding</st> <st c="81902">connection references:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: <st c="82653">Similarly, we can update the values of environment variables in
    this JSON file to fully automate them in our deployment pipelines.</st> <st c="82785">We
    just need</st> <st c="82797">to replace the</st> `<st c="82813">.ConnectionReferences[]</st>`
    <st c="82836">array with the</st> `<st c="82852">.EnvironmentVariables[]</st>`
    <st c="82875">one to adjust</st> <st c="82890">our variables.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="82904">In this section, we learned how we can use environment variables
    to add feature flags to our applications and</st> <st c="83015">cloud flows.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="83027">Summary</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="83035">In this chapter, we embarked on an exciting journey, diving into
    the practical application of DevOps and ALM principles.</st> <st c="83157">We
    explored a variety of hands-on exercises, from mastering repository branch strategies
    to constructing robust CD pipelines, managing backlogs effectively, and enforcing
    branch protection rules.</st> <st c="83353">We also delved into automated testing
    of our solutions, monitored our application’s performance in runtime with APM,
    and harnessed the power of feature flags.</st> <st c="83512">These exercises were
    not just theoretical; we also applied them to a real-world example, utilizing
    GitHub as our DevOps tool of choice.</st> <st c="83648">Through these practical
    walkthroughs, we’ve woven every thread of DevOps and ALM into a</st> [<st c="83735">hands-on</st>
    <st c="83745">experience tapestry.</st>](https://learn.microsoft.com/en-us/power-platform/enterprise-templates/overview)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[<st c="83765">In the forthcoming chapter, we will delve into</st>](https://learn.microsoft.com/en-us/power-platform/enterprise-templates/overview)
    <st c="83813">fusion architecture and see how we can leverage Azure PaaS services
    in our Power</st> <st c="83894">Platform solutions.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="83913">Further reading</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="83929">Power Platform Enterprise</st> <st c="83956">template:</st> [<st
    c="83966">https://learn.microsoft.com/en-us/power-platform/enterprise-templates/overview</st>](https://learn.microsoft.com/en-us/power-platform/enterprise-templates/overview)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="84044">Kudos</st> <st c="84051">application:</st> [<st c="84064">https://learn.microsoft.com/en-us/power-platform/enterprise-templates/hr/employee-kudos/install-and-set-up</st>](https://learn.microsoft.com/en-us/power-platform/enterprise-templates/hr/employee-kudos/install-and-set-up)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="84170">The GitHub</st> <st c="84182">CLI:</st> <st c="84187">https://github.com/cli/cli</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="84213">The GitHub CLI with GitHub</st> <st c="84241">Copilot:</st> [<st
    c="84250">https://docs.github.com/en/copilot/github-copilot-in-the-cli/using-github-copilot-in-the-cli</st>](https://docs.github.com/en/copilot/github-copilot-in-the-cli/using-github-copilot-in-the-cli)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="84342">Pre-populate connection</st> <st c="84367">references:</st> [<st
    c="84379">https://learn.microsoft.com/en-us/power-platform/alm/conn-ref-env-variables-build-tools#get-the-connection-reference-information</st>](https://learn.microsoft.com/en-us/power-platform/alm/conn-ref-env-variables-build-tools#get-the-connection-reference-information)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="84507">GitHub</st> <st c="84515">environments:</st> [<st c="84529">https://docs.github.com/en/actions/learn-github-actions/variables#using-the-vars-context-to-access-configuration-variable-values</st>](https://docs.github.com/en/actions/learn-github-actions/variables#using-the-vars-context-to-access-configuration-variable-values)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="84657">GitHub</st> <st c="84665">outputs:</st> [<st c="84674">https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs</st>](https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="84745">GitHub jobs and</st> <st c="84762">needs:</st> [<st c="84769">https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow</st>](https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="84839">GitHub composite</st> <st c="84857">actions:</st> [<st c="84866">https://docs.github.com/en/actions/creating-actions/creating-a-composite-action</st>](https://docs.github.com/en/actions/creating-actions/creating-a-composite-action)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="84945">GitHub pull</st> <st c="84958">requests:</st> [<st c="84968">https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests</st>](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="85111">GitHub</st> <st c="85119">Marketplace:</st> [<st c="85132">https://github.com/marketplace</st>](https://github.com/marketplace)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="85162">Power Apps Test</st> <st c="85179">Engine:</st> [<st c="85187">https://learn.microsoft.com/en-us/power-apps/developer/test-engine/overview</st>](https://learn.microsoft.com/en-us/power-apps/developer/test-engine/overview)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="85262">Working with Power Apps Test</st> <st c="85292">Studio:</st> [<st
    c="85300">https://learn.microsoft.com/en-us/power-apps/maker/canvas-apps/working-with-test-studio</st>](https://learn.microsoft.com/en-us/power-apps/maker/canvas-apps/working-with-test-studio)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="85387">Azure Application Insights</st> <st c="85415">overview:</st> [<st
    c="85425">https://learn.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview</st>](https://learn.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="85504">Metric</st> <st c="85512">alerts:</st> [<st c="85520">https://learn.microsoft.com/en-us/azure/azure-monitor/alerts/tutorial-metric-alert</st>](https://learn.microsoft.com/en-us/azure/azure-monitor/alerts/tutorial-metric-alert)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="85602">Action</st> <st c="85610">groups:</st> [<st c="85618">https://learn.microsoft.com/en-us/azure/azure-monitor/alerts/action-groups</st>](https://learn.microsoft.com/en-us/azure/azure-monitor/alerts/action-groups)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="85692">Power Apps with Application</st> <st c="85721">Insights:</st>
    [<st c="85731">https://learn.microsoft.com/en-us/power-apps/maker/canvas-apps/application-insights</st>](https://learn.microsoft.com/en-us/power-apps/maker/canvas-apps/application-insights)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="85814">An overview of Application Insights</st> <st c="85851">integration:</st>
    [<st c="85864">https://learn.microsoft.com/en-us/power-platform/admin/overview-integration-application-insights</st>](https://learn.microsoft.com/en-us/power-platform/admin/overview-integration-application-insights)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="85960">Export data to Application</st> <st c="85988">Insights:</st> [<st
    c="85998">https://learn.microsoft.com/en-us/power-platform/admin/set-up-export-application-insights</st>](https://learn.microsoft.com/en-us/power-platform/admin/set-up-export-application-insights)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="86087">Power Pages and Application</st> <st c="86116">Insights:</st>
    [<st c="86126">https://learn.microsoft.com/en-us/power-pages/go-live/telemetry-monitoring</st>](https://learn.microsoft.com/en-us/power-pages/go-live/telemetry-monitoring)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="86200">Environment</st> <st c="86213">variables:</st> [<st c="86224">https://learn.microsoft.com/en-us/power-apps/maker/data-platform/environmentvariables</st>](https://learn.microsoft.com/en-us/power-apps/maker/data-platform/environmentvariables)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="86309">Power Automate automation</st> <st c="86336">center:</st> [<st
    c="86344">https://learn.microsoft.com/en-us/power-automate/automation-center-overview</st>](https://learn.microsoft.com/en-us/power-automate/automation-center-overview)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: <st c="0">Part 3:Exploring DevOps Best Practices and the Road Ahead</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="58">In this part, we will be exploring the possibilities of building
    fusion teams, where pro developers and DevOps engineers can help with the low-code/no-code
    development approach.</st> <st c="237">We will understand how culture plays a
    significant role in faster development cycles and the importance of building reusable
    components.</st> <st c="374">We will look at how Microsoft Azure cloud services
    can integrate with Power Platform solutions.</st> <st c="470">Pro developers will
    understand how extensible Power Platform is with the ability to utilize custom
    code components that can extend the capabilities of Power Platform.</st> <st c="637">We
    will conclude this chapter by investigating how artificial intelligence has changed
    the way we develop our business applications and how it enables us to build custom
    copilots that not only support our DevOps process but also enrich our</st> <st
    c="877">business solutions.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="896">This part has the</st> <st c="915">following chapters:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[*<st c="934">Chapter 9</st>*](B22208_09.xhtml#_idTextAnchor149)<st c="944">,</st>
    *<st c="946">Implementing the Fusion Development Approach</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*<st c="990">Chapter 10</st>*](B22208_10.xhtml#_idTextAnchor172)<st c="1001">,</st>
    *<st c="1003">Enabling Pro-Dev Extensibility in Power Platform</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*<st c="1051">Chapter 11</st>*](B22208_11.xhtml#_idTextAnchor208)<st c="1062">,</st>
    *<st c="1064">Managing the Environment Life Cycle with Design Best Practices</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*<st c="1126">Chapter 12</st>*](B22208_12.xhtml#_idTextAnchor231)<st c="1137">,</st>
    *<st c="1139">Looking Ahead with Copilots, ChatOps, and AI-Infused Applications</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
