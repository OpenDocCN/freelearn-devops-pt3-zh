- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Tools to Take Your DevOps to the Next Level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I do nothing but go about persuading you all, old and young alike, not to take
    thought for your persons or your properties, but and chiefly to care about the
    greatest improvement of the soul.
  prefs: []
  type: TYPE_NORMAL
- en: – Socrates
  prefs: []
  type: TYPE_NORMAL
- en: Alright, here we are, the final chapter, the final stop on our journey together
    in this book. It has been fun; I hope you’ve learned a few things – I certainly
    have experienced a lot of joy in teaching you and trying to help you in your journey.
    This whole book has been a journey for me as well. We will now conclude with a
    few tools that will help you further your journey into DevOps and Python on your
    own.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider this chapter to be an epilogue: a quick perusal of everything that
    has happened over the course of this book and a recap of all your learnings put
    into a functional context. In *The Lord of the Rings*, when the war is over, we
    see all of the characters have their individual endings of how their lives continued.
    That is my aim with this chapter, to leave you with something that rouses your
    curiosity and encourages you to walk even further down this path of DevOps and
    learn for yourselves what you can achieve.'
  prefs: []
  type: TYPE_NORMAL
- en: On a personal note, I can say that over the course of writing this book, I have
    changed in many ways as well. The concepts of collaboration that I have preached
    throughout this book have come to help me greatly in collaborating with all of
    the wonderful people who have made this book possible. It has helped me level
    up in a way, and has pushed the boundaries of my ability and made me understand
    the responsibility of being an author.
  prefs: []
  type: TYPE_NORMAL
- en: The journeys that we undertake change us, mostly for the better. They make us
    confront who we are and what we want to do. The journey that I undertook writing
    this book has made me appreciative of the knowledge I had beforehand and the knowledge
    that I gained during the research of this book. It has made me a professional
    writer, and while this book won’t be as big a part of your life as it was mine,
    I hope it has helped facilitate your journey as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, for the final time, in this chapter, you will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Advanced automation tools that will allow you to make even more complex automation
    into a reality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced monitoring tools to combine your monitoring and data analysis workloads
    and use both skills
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced event response strategies for when those events and alerts really get
    out of hand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with this chapter, you will require the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A Grafana account at [grafana.com](http://grafana.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An AWS account with the ability to use AWS Step Functions and Compute Engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GitHub account to use the code in this book’s repository ([https://github.com/PacktPublishing/Hands-On-Python-for-DevOps](https://github.com/PacktPublishing/Hands-On-Python-for-DevOps))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Google Cloud Platform project with Google Kubernetes API enabled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A sense of achievement that you have reached this far in your learning process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced automation tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, I have emphasized the value of automation and how important
    it is to the DevOps realm and the increase of your productivity in general. It
    is very hard to go overboard with automation as long as you’re careful with it
    and understand your use case. We have expanded our toolbelts throughout this book
    to allow us to automate tasks in a number of scenarios. We even figured out how
    to automate those automations. But now, let’s look into a tool that may take this
    process a step further. It also happens to be a personal favorite of mine.
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS Step Functions** is something that I am always excited to talk about
    and use. Whenever I look for the gold standard of automation workflow tools, it
    is this that I think of. Any other automation tool that I have seen that works
    well has had very similar functionality and usability to Step Functions. There
    are, of course, equivalent services in the other major clouds that can be used
    as a replacement and that work well in those environments, but the UX on Step
    Functions is the one that I prefer and is the one that will be the easiest to
    explain in this workflow.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go into a few steps (and steps inside of steps) in Step Functions:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your AWS account, and on the console, search for `Step Functions`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Step Functions** page, and at the top right, click on **Create**
    **state machine**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.1 – Creating a state machine](img/B21320_13_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – Creating a state machine
  prefs: []
  type: TYPE_NORMAL
- en: The Step Functions workflow consists of actions, which are the invocation of
    services, completely based on the parameters that their APIs take, and flows,
    which direct the flow of the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example function that we will demonstrate consists entirely of flows since
    using actions simply requires calling APIs, and you can apply them wherever you
    see fit. Here is a diagram of this flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.2 – State machine diagram](img/B21320_13_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – State machine diagram
  prefs: []
  type: TYPE_NORMAL
- en: 'This was exported directly from the Step Functions console, which you can see
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.3 – State machine console](img/B21320_13_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.3 – State machine console
  prefs: []
  type: TYPE_NORMAL
- en: It has also been exported in code format and placed in the GitHub repository
    of this book for use.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can break down the diagram in *Figure 13**.2* like this:'
  prefs: []
  type: TYPE_NORMAL
- en: The parallel state runs two different functions, **Ping** and **Pong**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both of them produce random numbers between a start and end value that the user
    inputs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once this is done, both numbers are compared to see which one is greater than
    the other.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If **Ping** is greater than **Pong**, the state machine stops its execution;
    otherwise, it executes the parallel state instead.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have saved your state machine, you can access it and run it using the
    **Start** **execution** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.4 – Starting an execution on a state machine](img/B21320_13_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.4 – Starting an execution on a state machine
  prefs: []
  type: TYPE_NORMAL
- en: You will be asked what you would want to input in this state machine. In this
    case, we will choose the starting number as `5` and the ending number as `100`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.5 – Parameters given to start the state machine](img/B21320_13_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.5 – Parameters given to start the state machine
  prefs: []
  type: TYPE_NORMAL
- en: The machine will go until **Ping** and **Pong** give us equal values, which
    takes about two seconds for numbers as small as this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Step Functions logs all of the states that it passes, along with the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.6 – Events that occurred during the state machine](img/B21320_13_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.6 – Events that occurred during the state machine
  prefs: []
  type: TYPE_NORMAL
- en: 'This particular application seems rather mundane, but it is a great proof of
    concept for how Step Functions can be used to make workflows. An example of a
    real-world application for this could be a simple one that we have used before:
    deleting all the objects in an S3 bucket. There is no clear way in the user interface
    of AWS to delete all your objects at once; you need to do it one by one. But with
    Step Functions (which is integrated with every AWS service), you can list out
    and delete all the objects in an S3 bucket in parallel if you want to. Now, we
    will pivot to the monitoring of such applications to learn some insights into
    how to make them even better.'
  prefs: []
  type: TYPE_NORMAL
- en: Advanced monitoring tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The purpose behind monitoring has always been to make sure that the things you
    said were working are still working. And it is often the case that they won’t
    be. It could be your fault or not; the concept of fault gets in the way of solving
    the problem. The proper monitoring of your workloads provides the path to more
    easily solving your problems.
  prefs: []
  type: TYPE_NORMAL
- en: The simplest workloads can be monitored and the reactions to the information
    received can be automated so that you don’t even have to be involved most of the
    time when it comes to dealing with something going wrong. In more complex workloads,
    it is still important to keep up monitoring for faster reaction times to any situation,
    as well as to get more information on the situation in real time.
  prefs: []
  type: TYPE_NORMAL
- en: Often, your solution, as it gets more complex, starts using more tools. More
    tools and services means the requirement for more monitoring and also more complex
    monitoring. If your monitoring comes from multiple places at the same time, it
    can become quite a hassle to deal with. So, a good solution in this case would
    be to centralize the monitoring in a central location that can hold and manage
    all of that data.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where **Grafana** comes in, and it is the tool I want to talk about
    because it provides not only a ridiculously wide range of monitoring options but
    also an incredible range of deployment options with which you can make your Grafana
    instance managed or customized, meaning that it is a solution for both kinds of
    people: those who prefer self-made solutions and those who prefer ready-made.'
  prefs: []
  type: TYPE_NORMAL
- en: When I first started looking into Grafana, I was writing a blog on how to monitor
    multiple compute instances over several different clouds using the monitoring
    services of one cloud, and I found that while that is pretty simple, there are
    still a few awkward hitches to the solution. Most of the time, choosing one cloud
    over the other resulted in complications arising in other services on the platform.
    A lot of these problems were solved by Grafana and all the love and work that
    has gone into making it.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s dive into the use of Grafana with its free account tier:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, create a Grafana account. It is completely free and has a lot of SSO
    options, which I appreciate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.7 – Grafana signup](img/B21320_13_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.7 – Grafana signup
  prefs: []
  type: TYPE_NORMAL
- en: It will then ask you for your own personal monitoring subdomain URL and the
    region for deploying your instance. Once you set those, you are good to go.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Alternatively, you can download and install Grafana on a custom server from
    here: [https://grafana.com/grafana/download?edition=oss](https://grafana.com/grafana/download?edition=oss).
    It has installation instructions for practically every OS that you can think of.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s take a look at our dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.8 – Grafana dashboard](img/B21320_13_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.8 – Grafana dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, Grafana offers us a lot of monitoring options, integrations,
    and data sources. For this exercise, we will use a data source that is very ubiquitous
    that just about anyone can access: Google Sheets.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your console’s search tab, search for `Google Sheets`. You will then have
    to install the plugin. It is the blue button at the far right:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.9 – Google Sheets connector](img/B21320_13_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.9 – Google Sheets connector
  prefs: []
  type: TYPE_NORMAL
- en: Then, wait a minute for the plugin to install, and add a new data source from
    that same page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.10 – Google Sheets connector activated](img/B21320_13_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.10 – Google Sheets connector activated
  prefs: []
  type: TYPE_NORMAL
- en: Grafana will then ask you to create authentication credentials for your Google
    Sheets instance that you want to access, and it will even give you the proper
    instructions to do so.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.11 – Instructions provided by Grafana on its dashboard](img/B21320_13_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.11 – Instructions provided by Grafana on its dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, security-wise, the JWT token option is probably the best. You
    do not want to keep stray API keys lying around; therefore, please do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow the steps given to create a service account and give that service account’s
    email address access to your sample Google Sheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have uploaded your JWT key, you will have access to anything that the
    service account we used has access to. I used a Google Sheet that contained some
    sample web traffic data, but you can use any sheet that you want for this operation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The cache time for this dashboard has been set to zero seconds, meaning that
    it will refresh as the information on the Google Sheet changes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.12 – Sample exploration with the option to add to a dashboard](img/B21320_13_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.12 – Sample exploration with the option to add to a dashboard
  prefs: []
  type: TYPE_NORMAL
- en: You can then add this exploration to a new monitoring dashboard. As seen in
    *Figure 13**.12*, you can select the **Add** button and then the **Add to** **dashboard**
    option.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.13 – Creating a new dashboard with a panel](img/B21320_13_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.13 – Creating a new dashboard with a panel
  prefs: []
  type: TYPE_NORMAL
- en: 'This will create a new dashboard with your data table. We can now add some
    visualizations for our data on top of it. In the new dashboard, click on **Add**
    and then **Visualization**. You’ll get a panel similar to the one for the Google
    Sheets table where you can add a chart like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.14 – Bar graph produced by visualization](img/B21320_13_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.14 – Bar graph produced by visualization
  prefs: []
  type: TYPE_NORMAL
- en: You can see we have a highly customizable chart containing all of the information
    in a visualized form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have made your visualization, go back to your newly created dashboard.
    Your final visualization will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.15 – Final Grafana dashboard](img/B21320_13_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.15 – Final Grafana dashboard
  prefs: []
  type: TYPE_NORMAL
- en: Again, this changes according to changes in data.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have seen events and automations that deal with events. But what
    happens when an event occurs that you can’t just reset your way out of? What happens
    when you are on the back foot and are forced to run damage control? Well, we are
    going to find out in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced event response strategies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An event response should be simple and organized, and it should bring about
    the solution to whatever caused the event in the first place. But, once again,
    no matter how hard we try, it is never that simple. Sometimes you’re working with
    a system you haven’t had the chance to work with much. Sometimes the team that
    you work with is not experienced enough to help out in any meaningful way. These
    circumstances cannot be helped because of time and personnel constraints, and
    they are largely out of our control. In such situations, we simply have to make
    do with what we have.
  prefs: []
  type: TYPE_NORMAL
- en: But there is one scenario that happens very often and causes widespread damage
    to the point where the response to the event stops being about damage recovery
    and starts being about what you can recover from the damage already done. This
    will occur if any sort of incident goes unreported or unmonitored for a long period
    of time. These situations often occur when there is some sort of data breach,
    or an unknown/undiscovered error is present in the system.
  prefs: []
  type: TYPE_NORMAL
- en: So, what do you do when you suffer such a scenario? Well, the first thing to
    do is not to panic. But don’t think *don’t panic* – that’ll make you panic more!
    Approach the situation logically. I will now give you insight into how I would
    approach such a situation. It is based on situations that I have faced in the
    past, as well as everything I have learned about problem-solving from all sorts
    of places. I think it’s a good way to solve a lot of problems, IT or otherwise.
    So let’s get into it.
  prefs: []
  type: TYPE_NORMAL
- en: '*Step* *0: Read*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Because: You don’t do* *that enough*'
  prefs: []
  type: TYPE_NORMAL
- en: Seriously, a lot of errors can be solved just by reading the outputs of those
    errors or glitches. Trust the thing you see and you will be rewarded; the solutions
    to your problems lie right in front of you. Well, the first steps to the solutions,
    anyway. But if you want to get there, you need to read and understand the process
    of getting there. You cannot get to step 1 without knowing all of the details
    in front of you.
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 1: If it is a single problem,* *google it*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Because: You are* *not alone.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is serious advice. 90% of any sort of error that you encounter can be
    solved by Googling the error. This is because someone else has probably encountered
    your problem before. They have probably had the correct solution given to them
    before too. Chances are really high that you will find the solution to your problem
    on a *Stack Overflow* forum, a GitHub repository comment, an obscure YouTube video,
    or somewhere like that. You might be thinking to yourself: “It’s not that easy
    – no way can I solve my biggest problems just by googling them.” Stop thinking
    that right now! I once saw someone spend a full two hours trying a migration bridge,
    which we managed in about five minutes after looking at a YouTube tutorial. It
    happens – stop wasting your time and look for quick, informed results. They’ll
    handle the minor problems, and believe me, most problems are minor.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 2: If it is several problems, google it several times (or, now,* *ChatGPT
    it)*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Because: One big problem is several small problems combined* *into one*'
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s true: any problem can be broken down into its smallest components and
    solved at that level. It is basic logic; if you have a big problem, turn it into
    smaller problems and google those. If it is a really big problem or breaking down
    the problem will be mundane and take a lot of your time, you can use ChatGPT for
    that now; it is fairly good at that. Digesting a large amount of useless text
    into smaller, useful versions is probably what ChatGPT is best at. Use it. Use
    these great tools that you have at your disposal.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 3: Follow the methods of induction* *and deduction*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Because: It will solve any everyday problem* *you have*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Solutions and solving problems are very different from having ideas. Ideas
    are like lightning bolts from God; they are ghosts in our system, appearing out
    of the oddest of places. Grabbing an idea and bringing it to fruition is an ethereal
    experience, like having a religious revelation. Solutions are not that. They are
    simple, fundamental, and – if you know how to solve a problem – much easier to
    approach. The logic can be summarized in two words: induction and deduction.'
  prefs: []
  type: TYPE_NORMAL
- en: Every major problem that I have ever solved where I had access to a sample environment,
    I have solved with this logic. It’s something I found in *Zen and the Art of Motorcycle
    Maintenance*, where the narrator solves the most mundane problems through these
    two methods and connects these concepts to those of quantum physics and Zen Buddhism.
    These are not complex concepts, but all problem-solving can be defined within
    their parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Induction is recreating the elements that cause the problem in a system to know
    exactly where the problem has occurred. This is useful in incident management
    when an incident needs to be recreated in a sample application and then breaking
    down those steps to find out where it all went wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Deduction is starting at the end and going back to the beginning. This is used
    when the logic of the error is not recreatable or an incident has occurred already
    with no idea of how it occurred. In this case, you work back from the end result
    and figure out what could possibly have caused these results.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, summarizing these results in a diagram, you can look at them like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.16 – The steps to solving any IT problem you want](img/B21320_13_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.16 – The steps to solving any IT problem you want
  prefs: []
  type: TYPE_NORMAL
- en: And that is how you solve all of your problems. Try it out on a few of them
    and see how far you get. If you want to know about the formation of ideas, well,
    they are quite random, but they can be specified and turned into action points
    based on methods similar to these. So, now you have learned everything. Use your
    knowledge wisely.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Alright, this is the end, not just of the chapter but of the book. The end
    of your journey as a reader of this book and of mine as a first-time author. It
    has been quite the journey. Talking about this chapter in general, it was a lot
    more abstract and a lot less code-focused than a lot of the other chapters, but
    that is because I’ve come to understand one thing when it comes to all of these
    systems: everything is code. Everything you touch will have been coded in some
    way; it is just up to you to understand and manipulate the logic behind it.'
  prefs: []
  type: TYPE_NORMAL
- en: In the section regarding Step Functions, you learned about a very useful automation
    tool, but you also learned that it is a way to use coding logic visually while
    integrating that way into a lot of powerful tools and services.
  prefs: []
  type: TYPE_NORMAL
- en: In the section on advanced monitoring, we learned about a powerful monitoring
    and visualization tool in Grafana and the importance of centralized monitoring
    in preserving your sanity by not having to look through data from multiple locations
    and then parsing through them, and instead having one location that will work
    for all your workloads.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you learned about how I approach problem-solving, an effective method
    if I do say so myself. I hope you get the chance to use it on your own workloads.
    This is a sort of meta code, an algorithm that is not beholden to any platform
    or technology but will work effectively on all of them.
  prefs: []
  type: TYPE_NORMAL
- en: 'And so, I must bid you adieu. We have come to the end, but look at it only
    as the end of the beginning, because what happens after is the most important
    part. This is what will define the person you are and the things that you will
    do. Now comes the part where you apply all of this knowledge in your own daily
    dealings. *Remember: the power is with you; it is time to* *use it*.'
  prefs: []
  type: TYPE_NORMAL
