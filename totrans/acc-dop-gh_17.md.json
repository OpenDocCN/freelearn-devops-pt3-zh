["```\nmodule.exports = leftpad;\n```", "```\nfunction leftpad (str, len, ch) {\n```", "```\n  str = String(str);\n```", "```\n  var i = -1;\n```", "```\n  if (!ch && ch !== 0) ch = ' ';\n```", "```\n  len = len - str.length;\n```", "```\n  while (++i < len) {\n```", "```\n    str = ch + str;\n```", "```\n  }\n```", "```\n  return str;\n```", "```\n}\n```", "```\nversion: 2\n```", "```\nupdates:\n```", "```\n  - package-ecosystem: \"npm\"\n```", "```\n    directory: \"/\"\n```", "```\n    schedule:\n```", "```\n      interval: \"daily\"\n```", "```\nversion: 2\n```", "```\nregistries:\n```", "```\n  my-npm-pkg:\n```", "```\n    type: npm-registry\n```", "```\n    url: https://npm.pkg.github.com\n```", "```\n    token: ${{secrets.PAT}}\n```", "```\nupdates:\n```", "```\n  - package-ecosystem: \"npm\"\n```", "```\n    directory: \"/\"\n```", "```\n    registries: \n```", "```\n      - my-npm-pkg\n```", "```\n    schedule:\n```", "```\n      interval: \"daily\"\n```", "```\nname: Dependabot automation\n```", "```\non: pull_request\n```", "```\npermissions:\n```", "```\n  pull-requests: write\n```", "```\n  issues: write\n```", "```\n  repository-projects: write\n```", "```\njobs:\n```", "```\n  Dependabot:\n```", "```\n    runs-on: ubuntu-latest\n```", "```\n    if: ${{ github.actor == 'Dependabot[bot]' }}\n```", "```\nsteps:\n```", "```\n  - name: Dependabot metadata\n```", "```\n    id: md\n```", "```\n    uses: Dependabot/fetch-metadata@v1.1.1\n```", "```\n    with:\n```", "```\n      github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "```\n  - name: Add label for production dependencies\n```", "```\n    if: ${{ steps.md.outputs.dependency-type == 'direct:production' }}\n```", "```\n    run: gh pr edit \"$PR_URL\" --add-label \"production\"\n```", "```\n    env:\n```", "```\n      PR_URL: ${{ github.event.pull_request.html_url }}\n```", "```\n- name: Enable auto-merge for Dependabot PRs\n```", "```\n  if: ${{ steps.md.outputs.update-type == 'version-update:semver-patch' }}\n```", "```\n  run: |\n```", "```\n    gh pr review --approve \"$PR_URL\"\n```", "```\n    gh pr merge --auto --merge \"$PR_URL\"\n```", "```\n  env:\n```", "```\n    PR_URL: ${{github.event.pull_request.html_url}}\n```", "```\n    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "```\nversion: 2\n```", "```\nupdates:\n```", "```\n  - package-ecosystem: \"github-actions\"\n```", "```\n    directory: \"/\"\n```", "```\n    schedule:\n```", "```\n      interval: \"daily\"\n```", "```\npaths-ignore:\n```", "```\n  - \"tests/data/**/*.secret\"\n```", "```\n- name: Upload SARIF file\n```", "```\n  uses: github/codeql-action/upload-sarif@v1\n```", "```\n  with:\n```", "```\n    sarif_file: results.sarif\n```", "```\njobs:\n```", "```\n  build:\n```", "```\n    runs-on: ubuntu-latest\n```", "```\n    permissions:\n```", "```\n      security-events: write\n```", "```\n    steps:\n```", "```\n      - uses: actions/checkout@v2\n```", "```\n      - name: Run npm install\n```", "```\n        run: npm install\n```", "```\n      - name: Run ESLint\n```", "```\n        run: node_modules/.bin/eslint build docs lib script spec-main -f node_modules/@microsoft/eslint-formatter-sarif/sarif.js -o results.sarif || true\n```", "```\n      - uses: github/codeql-action/upload-sarif@v1\n```", "```\n        with:\n```", "```\n          sarif_file: results.sarif\n```", "```\non:\n```", "```\n  push:\n```", "```\n    branches: [ main ]\n```", "```\n  pull_request:\n```", "```\n    branches: [ main ]\n```", "```\n  schedule:\n```", "```\n    - cron: '42 16 * * 2'\n```", "```\njobs:\n```", "```\n  analyze:\n```", "```\n    name: Analyze\n```", "```\n    runs-on: ubuntu-latest\n```", "```\n    permissions:\n```", "```\n      actions: read\n```", "```\n      contents: read\n```", "```\n      security-events: write\n```", "```\nstrategy:\n```", "```\n  fail-fast: false\n```", "```\n  matrix:\n```", "```\n    language: [ 'csharp', 'javascript' ]\n```", "```\nsteps:\n```", "```\n- name: Checkout repository\n```", "```\n  uses: actions/checkout@v2\n```", "```\n- name: Initialize CodeQL\n```", "```\n  uses: github/codeql-action/init@v1\n```", "```\n  with:\n```", "```\n    languages: ${{ matrix.language }}\n```", "```\n- name: Autobuild\n```", "```\n  uses: github/codeql-action/autobuild@v1\n```", "```\n- name: Perform CodeQL Analysis\n```", "```\n  uses: github/codeql-action/analyze@v1\n```", "```\n- name: Setup Node\n```", "```\n  uses: actions/setup-node@v2.5.0\n```", "```\n  with:\n```", "```\n    node-version: 10.16.3  \n```", "```\n- name: Initialize CodeQL\n```", "```\n  uses: github/codeql-action/init@v1\n```", "```\n  with:\n```", "```\n    languages: ${{ matrix.language }}\n```", "```\n    queries:  security-and-quality\n```", "```\n  with:\n```", "```\n    queries: +.github/codeql/custom.ql,org/repo/query.ql@v1\n```", "```\n  with:\n```", "```\n    packs: +.github/codeql/pack1.yml,org/repo/pack2.yml@v1\n```", "```\n- uses: github/codeql-action/init@v1\n```", "```\n  with:\n```", "```\n    config-file: ./.github/codeql/codeql-config.yml\n```", "```\n    external-repository-token: ${{ secrets.ACCESS_TOKEN }}\n```", "```\nname: \"Custom CodeQL Configuration\"\n```", "```\ndisable-default-queries: true\n```", "```\nqueries:\n```", "```\n  - uses: ./.github/codeql/custom-javascript.qls\n```", "```\npaths-ignore:\n```", "```\n  - '**/node_modules'\n```", "```\n  - '**/test'\n```", "```\n- description: \"Custom JavaScript Suite\"\n```", "```\n- import: codeql-suites/javascript-security-extended.qls\n```", "```\n  from: codeql-javascript\n```", "```\n- exclude:\n```", "```\n    id:\n```", "```\n      - js/missing-rate-limiting\n```", "```\n$ git clone --recursive https://github.com/github/vscode-codeql-starter.git\n```", "```\n$ git submodule update --remote\n```", "```\n$ brew install codeql\n```", "```\n$ codeql database create <database name> \\\n  --language=<language> \\\n  --source-root=<path to source code>\n```", "```\n/**\n```", "```\n * @name Empty block\n```", "```\n * @kind problem\n```", "```\n * @problem.severity warning\n```", "```\n * @id javascript/example/empty-block\n```", "```\n */ \n```", "```\nimport javascript\n```", "```\nfrom BlockStmt b\n```", "```\nwhere \n```", "```\n  b.getNumStmt() = 0\n```", "```\nselect b, \"This is an empty block.\"\n```", "```\nimport csharp\n```", "```\nfrom CatchClause cc\n```", "```\nwhere\n```", "```\n  cc.getBlock().isEmpty()\n```", "```\nselect cc, \"Poor error handling: empty catch block.\"\n```"]