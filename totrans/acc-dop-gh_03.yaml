- en: '*Chapter 2*: Plan, Track, and Visualize Your Work'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to measure engineering velocity and
    performance to make your acceleration visible and change the conversation with
    management.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will focus on organizing your work inside your team and
    applying **Lean principles**. You’ll learn how GitHub issues and projects can
    help you simplify the flow of your work.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Work is work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unplanned work and rework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing your work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limiting WIP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub issues, labels, and milestones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Work is work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Work is an activity done in order to achieve a purpose or result. This not only
    includes the product or project you are working on but also all activities you
    have to perform for your company. In some teams I work with, there are people
    that spend up to 50% of their work time on tasks outside their project/product
    team. Some are team leads and have meetings and responsibilities with their organizational
    team members. Some are part of the working council. Some have training for personal
    development paths. Some just have to fix bugs and live-site issues for projects
    they had worked on in the past.
  prefs: []
  type: TYPE_NORMAL
- en: Many of these tasks cannot be taken away from the team members. The team member
    may like them or not – but often they are an important part of their personal
    development.
  prefs: []
  type: TYPE_NORMAL
- en: The problem with this kind of work is that the prioritization and coordination
    of these tasks are done by the individuals and outside their team context. Who
    decides whether working on a bug of a previous system the developer worked on
    should be prioritized over a bug in the current project? Normally, the individuals
    plan and prioritize the work on their own. This often leads to more planning upfront.
    When team members report their available times at the beginning of a sprint, the
    team starts to plan their current tasks *around* these events. This can prevent
    the entire team from establishing **pull** and forces them to plan the dependent
    tasks and assign them to individual team members (**push**).
  prefs: []
  type: TYPE_NORMAL
- en: To address this, you should make all work visible to the team and add it to
    the team backlog. Are you in a working council? Add it to the backlog. Do you
    have training? Add it to the backlog.
  prefs: []
  type: TYPE_NORMAL
- en: So, the first step is to figure out *what kind of work is performed by your
    team* and gather everything in **one backlog**.
  prefs: []
  type: TYPE_NORMAL
- en: The second step is to **simplify**. Everyone can make things more complicated
    – but it takes a touch of genius to make things simpler. That’s why in most companies,
    processes and forms get more complicated over the years. I’ve seen forms with
    300 fields on them and complicated routing rules based on these fields – just
    to handle live-site incidents. Don’t transfer this to your backlog. Independent
    of the process in the background – the work has a clear trigger for your team,
    is processed by your team, and then leaves your responsibility – so from your
    perspective it is done. One process or ticket could lead to multiple small work
    items in your backlog. Every work item should be simplified to **To Do**, **Doing**,
    and **Done**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 18*](B17827_18_Epub.xhtml#_idTextAnchor356), *Lean Product Development
    and Lean Startup*, we’ll focus more on value streams, the theory of constraints,
    and how to optimize the flow of work. In this chapter, we’ll focus on the team
    level and how you get started to optimize later across team boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: Unplanned work and rework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All developers know that frequent **context switching** leads to less productivity.
    If we are disturbed while coding, it takes us some time to get back into the code
    and continue with the same productivity we had when the disturbance occurred.
    So, working on multiple projects or tasks also reduces productivity. In his book
    *Quality Software Management: Systems Thinking*, Gerald M. Weinberg presents the
    result of a study that concludes that when only working on two projects simultaneously,
    the performance drops by about 20% (Weinberg G.M. 1991). For each project you
    add, the performance drops 20% further (see *Figure 2.1*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Loss of productivity when context switching'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – Loss of productivity when context switching
  prefs: []
  type: TYPE_NORMAL
- en: Another study from 2017 shows that developers who work on two or three projects
    spend on average 17% of their effort on context switching (Tregubov A., Rodchenko
    N., Boehm B., & Lane J.A., 2017). I think the actual percentage may vary a lot
    from product to product and from team to team. Developers who work in small batch
    sizes can switch context easier than others that work in bigger batch sizes. The
    more complex the matter is, the more effort it requires to pick up work where
    you left it. Practices such as **Test-Driven Development** (**TDD**) help you
    to pick up work easier after context switching.
  prefs: []
  type: TYPE_NORMAL
- en: 'But independent of the actual percentage: context switching kills productivity
    and the more focus time developers spend on one task, the more efficient they
    are. This means you should reduce the **Work in Progress** (**WIP**) for the team
    – especially unplanned work and rework.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To help you optimize later, you should label your work items correctly from
    the beginning. Unplanned work can originate from within your project or outside.
    Rework can occur if there is a bug, technical debt, or a misunderstood requirement.
    Make sure you can analyze your work later by applying the correct labels from
    the beginning. This should not be a complicated governance framework – just pick
    some labels that will help you later to optimize your work. *Table 2.1* is just
    an example of how you could classify your work items:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 2.1 – Example taxonomy for your work items'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Table_011.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 2.1 – Example taxonomy for your work items
  prefs: []
  type: TYPE_NORMAL
- en: Keep it simple and select a taxonomy with simple wording that is clear to your
    team.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing your work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To focus on the important work and reduce multitasking and task switching, you
    should visualize your work – typically in the form of a **Kanban** board. Kanban
    has its roots in **Lean manufacturing** but is now considered an important part
    of **Lean software development**. Kanban can help you improve the efficiency of
    the flow of work through your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The visualization will help you to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify bottlenecks, wait times, and hand-offs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prioritize work and work on the most important tasks first.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Break down work into small batch sizes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get things done.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establish pull
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'No plan is perfect. If you have ever planned a project, you know the project
    plan only works with a lot of buffer time – and yet you must always adjust the
    plan. So, even if you only plan your work for the upcoming 2 or 3 weeks, planning
    will lead to wait time and context switching. The solution is to stop planning
    and establish a pull system; team members pull the work with the highest priority
    from the queue and work on it. Ideally, the task is finished and moved to Done
    (see *Figure 2.2*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Pulling work from the backlog to indicate a status change'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_002.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – Pulling work from the backlog to indicate a status change
  prefs: []
  type: TYPE_NORMAL
- en: If your task cannot be finished with just you working on it, this might be an
    indicator that the task is too big and needs to be split into smaller tasks. If
    you must work on many tasks simultaneously to get anything done, the tasks might
    be too small. This will adjust over time as the visual representation helps you
    to spot bottlenecks and wait time.
  prefs: []
  type: TYPE_NORMAL
- en: Prioritize
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The benefit of working with visual boards is that it is easy to prioritize
    your work. Just move work items with the highest priority to the top. If you have
    different kinds of work on the board, you might want an additional visual separation.
    This can be done with **swimlanes**. A swimlane is a horizontal grouping of work
    on the Kanban board (see *Figure 2.3*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Using swimlanes to organize your work on the board'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_003.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – Using swimlanes to organize your work on the board
  prefs: []
  type: TYPE_NORMAL
- en: If your team has to work on live site issues, you might want a priority swimlane
    that signals to all team members that a current issue has priority over normal
    work. Or if your team members have responsibilities outside the team, you also
    want to separate this from your normal work.
  prefs: []
  type: TYPE_NORMAL
- en: Many Kanban boards also allow you to set a different color for each card – normally
    by applying a label or tag to the card. This can also help you to visually distinguish
    different kinds of work on the board. Especially when combined with swimlanes,
    colored cards can help you to see at a first glance how the team is doing and
    what the most important tasks are that need attention.
  prefs: []
  type: TYPE_NORMAL
- en: Keep it simple!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start small with three columns (To Do, Doing, and Done) and add more columns
    and swimlanes if needed to optimize the flow for your team. But be careful to
    keep it simple! Ask yourself before every customization: is this necessary? Does
    this bring value? Is there a simpler way?'
  prefs: []
  type: TYPE_NORMAL
- en: Complicated things have the tendency to stick – when moving to Kanban boards,
    I’ve seen teams grow their board to a monster with 10 columns, 8 swimlanes (most
    of them collapsed all the time), and many fields and information on the cards.
  prefs: []
  type: TYPE_NORMAL
- en: Kanban is about simplification – try to keep it as simple as possible!
  prefs: []
  type: TYPE_NORMAL
- en: Limiting WIP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the goals of Kanban is to limit WIP. With less WIP, you have less context
    switching and more focus. This helps you to get things done! Stop starting and
    start finishing!
  prefs: []
  type: TYPE_NORMAL
- en: Even when coaching Scrum teams, I’ve seen teams that start to work on all the
    user stories they had planned during the first days of the sprint. Every time
    a developer was blocked, they just started to work on another story. At the end
    of the sprint, all stories had been worked on, but none was finished.
  prefs: []
  type: TYPE_NORMAL
- en: In Kanban, you work on a small number of items – and in a constant pace.
  prefs: []
  type: TYPE_NORMAL
- en: Set WIP limits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most Kanban boards support WIP limits. A WIP limit is an indicator of the maximum
    number of items you want to have in one column at the same time. Let’s say the
    WIP limit for Doing is five, and you have three items you are working on. The
    column would display 3/5 – normally in green as the limit is not yet reached.
    If you start to work on three more items, it will display 6/5 in red as the limit
    has been reached.
  prefs: []
  type: TYPE_NORMAL
- en: WIP limits can help you to focus on a small number of items and not start too
    much work. Start with small ones and only increase if absolutely necessary. A
    good default to start with is five.
  prefs: []
  type: TYPE_NORMAL
- en: Reduce batch size
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Limiting your WIP will give you a good indication of whether your work items
    are the right size. If it’s hard to stay within the WIP limit, your work items
    are probably still too big. Try to split them into smaller tasks before increasing
    the limit.
  prefs: []
  type: TYPE_NORMAL
- en: Reduce hand-offs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The same is true for hand-offs. If your work items need input from many team
    members – or worse, input from outside the team – it generates wait times and
    reduces your **flow efficiency**. Flow efficiency is the time you work on a work
    item divided by the total time you need to get it done – including the wait time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17827_02_001.png)'
  prefs: []
  type: TYPE_IMG
- en: Flow efficiency is a very theoretical metric in software engineering as you
    normally don’t measure exact work and wait times. But if you experience many hand-offs
    and blocked items, the metric might help to see how your work is flowing through
    the system. You can start the timer for work if you move your item to Doing and
    start the timer for wait time if you move it back.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub issues, labels, and milestones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**GitHub issues** let you keep track of tasks, enhancements, and bugs. They
    are highly cooperative and have a timeline that shows their history. Issues can
    be linked to commits, pull requests, and other issues. GitHub issues are part
    of the experience that developers love on GitHub. That’s why they are a good solution
    to manage your work for your engineering teams.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new issue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can create a new issue in your repository under **Issues** | **New Issue**.
    The issue has a title and a body that supports Markdown (see *Figure 2.4*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Creating a new issue'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – Creating a new issue
  prefs: []
  type: TYPE_NORMAL
- en: 'A toolbar helps you format the text. Besides normal formatting – such as headings,
    bold and italic text, lists, links, and images – it has some features that are
    worth highlighting:'
  prefs: []
  type: TYPE_NORMAL
- en: '`:+1:` (👍) and `:100:` (💯) and the `:shipit:` squirrel, which is typical for
    GitHub. You can find a complete list here: [https://gist.github.com/rxaviers/7360908#file-gistfile1-md](https://gist.github.com/rxaviers/7360908#file-gistfile1-md).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mentions**: You can mention individual members by their GitHub handle or
    mention entire teams. Just press *@* and start typing. Pick the person or team
    from the list. They’ll get notified and the mention is displayed as a link to
    the profile of the person or team that was mentioned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**References**: Reference other issues, pull requests, or discussions by pressing
    the *#* key and selecting the item from the list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`– [ ]`. If it is completed, you add `x` in the center: `- [x]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0] to open and close the code block. The syntax highlighting is done by
    linguist ([https://github.com/github/linguist](https://github.com/github/linguist))
    and most languages are supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Markdown
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Markdown** is a very popular, lightweight markup language. Unlike JSON or
    HTML, it formats text on a single-line basis and does not have opening and closing
    tags or brackets. That’s why it is very good for versioning with Git and collaborating
    on changes with pull requests. That’s the same reason why YAML is the de facto
    standard for machine-readable files. Markdown is the equivalent of human-readable
    files. In DevOps teams, everything is code: diagrams, architecture, design and
    concept documents, config files, and infrastructure. This means YAML, Markdown,
    or a mix of both is used.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you have not learned Markdown yet, it’s time to start now. Many teams use
    Markdown extensively with pull requests to collaborate on human-readable content.
    Since most work management solutions also support Markdown, it’s basically everywhere.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Markdown has a very simple syntax and is easy to learn. After a few uses, it
    should not be a burden to use it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can switch to preview at any time to see the output of your Markdown (see
    *Figure 2.5*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Previewing the Markdown in a new issue'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.5 – Previewing the Markdown in a new issue
  prefs: []
  type: TYPE_NORMAL
- en: 'A good introduction to Markdown on GitHub can be found here: [https://guides.github.com/features/mastering-markdown/](https://guides.github.com/features/mastering-markdown/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tip:'
  prefs: []
  type: TYPE_NORMAL
- en: You can also save replies if you often use similar text blocks. Hit *Ctrl* +
    *.* (Windows/Linux) or *Cmd* + *.* (Mac) and select the reply from the list or
    create a new saved reply. To learn more, see [https://docs.github.com/en/github/writing-on-github/working-with-saved-replies](https://docs.github.com/en/github/writing-on-github/working-with-saved-replies).
  prefs: []
  type: TYPE_NORMAL
- en: Collaborating on issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the issue is created, you can add comments at any time. You can assign
    up to 10 people to the issue and apply labels to it to categorize it. All changes
    are displayed as events in the history of the issue (see *Figure 2.6*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Editing issues'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.6 – Editing issues
  prefs: []
  type: TYPE_NORMAL
- en: 'If your issue contains a task list, it is used to display the progress of the
    issue. You can convert every task into an issue itself that then gets linked to
    the current issue. If you click the **Open convert to issue** button (note the
    mouseover visible in *Figure 2.6*), the task gets converted into a new issue and
    is displayed as a link. If you click the link and open the issue, you can see
    that the issue is tracked in another issue (see *Figure 2.7*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Creating hierarchies of issues'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_007.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.7 – Creating hierarchies of issues
  prefs: []
  type: TYPE_NORMAL
- en: This way, you can create flexible hierarchies of work and split your work into
    smaller tasks.
  prefs: []
  type: TYPE_NORMAL
- en: The issue backlog
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The issues overview is not a real backlog as it cannot be sorted easily by
    drag and drop. But it has a very advanced syntax for filtering and sorting. Every
    filter you apply gets added as text to the search field (see *Figure 2.8*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Filtering and sorting the list of issues'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_008.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.8 – Filtering and sorting the list of issues
  prefs: []
  type: TYPE_NORMAL
- en: In the overview, you see the progress of the tasks and the labels. You also
    can see pull requests that are linked to the issues.
  prefs: []
  type: TYPE_NORMAL
- en: Milestones
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Milestones are a way to group your issues. An issue can only be assigned to
    exactly one milestone. Milestones measure their progress by the number of closed
    issues relative to the total issue count. Milestones have a title, an optional
    due date, and an optional description (see *Figure 2.9*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Planning your issues with milestones'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_009.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.9 – Planning your issues with milestones
  prefs: []
  type: TYPE_NORMAL
- en: Milestones are a good way to group issues to release versions with a specific
    target date. They can also be used to group issues that do not belong to a release
    version together.
  prefs: []
  type: TYPE_NORMAL
- en: Pinning issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can pin up to three issues to your repository. These issues are displayed
    at the top of the issues overview (see *Figure 2.10*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10 – Pinned issues'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_010.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.10 – Pinned issues
  prefs: []
  type: TYPE_NORMAL
- en: Pinned issues are a good way to communicate important things to other contributors
    or new team members.
  prefs: []
  type: TYPE_NORMAL
- en: Issue templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can configure different templates for issues that give predefined content.
    If a user creates a new issue, they can pick the template from a list (see *Figure
    2.11*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Issue templates'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_011.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.11 – Issue templates
  prefs: []
  type: TYPE_NORMAL
- en: You can activate `.github/ISSUE_TEMPLATE`. Click **Propose changes** and commit
    the files to your repository. Once the template files are in your repository,
    you can edit or delete them directly there. Or you can also add new template files.
    There is no need to do this (adding new template files) from the settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Templates can be a Markdown (`.md`) or a YAML file (`.yml`). Markdown contains
    a header that specifies the name and a description. It also can set defaults for
    the title, labels, and assignees. Here is an example of a Markdown template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If you click on **Issues** | **New Issue**, you can select the template and
    click **Get started**. A new issue will be filled with the template values. The
    result looks as in *Figure 2.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – A Markdown issue template'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_012.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.12 – A Markdown issue template
  prefs: []
  type: TYPE_NORMAL
- en: 'With YAML templates, you can define complete forms with text boxes, dropdowns,
    and checkboxes. You can configure the controls and mark fields as required. A
    sample form could be defined like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The result looks as in *Figure 2.13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13 – A YAML issue template'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_013.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.13 – A YAML issue template
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find more information on **YAML issue templates** here: [https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-issue-forms](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-issue-forms).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can customize the dialog to choose the issue template by adding a `config.yml`
    file to `.github/ISSUE_TEMPLATE`. You can choose to set whether blank issues should
    be supported and add additional lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: The result looks as in *Figure 2.11* – the additional link is displayed as an
    **Open** button.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this book, YAML issue templates are still in beta and
    therefore subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub issues are a great way to collaborate – but with the repository scope
    and the lack of a drag-and-drop backlog and a visual Kanban board, they are not
    the perfect place to visualize and track your work.
  prefs: []
  type: TYPE_NORMAL
- en: The central hub in GitHub to manage your work across different repositories
    is **GitHub Projects**. It is built on top of GitHub issues and supports issues
    from up to 50 repositories.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub projects is a flexible collaboration platform. You can customize the
    backlog and boards and share them with other teams or the community.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: The New GitHub Issues or GitHub Projects (Beta)'
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, Git Projects is being completely reworked. The new part
    is currently called **GitHub Projects (beta)** or the **New GitHub Issues** and
    will replace GitHub Projects when it is ready. It is not yet 100% clear what the
    final name will be. Since the new experience is the future, I’ll only focus on
    that one in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Right now, the new experience is not as mature as Jira or Azure Boards. But
    there is a great team working on it, and I’m convinced it will be one of the best
    solutions on the market if it is ready!
  prefs: []
  type: TYPE_NORMAL
- en: Note that there are so many new features coming out every month that all screenshots
    will probably be outdated in no time. Keep an eye on the *changelog* ([https://github.blog/changelog/](https://github.blog/changelog/))
    to stay up to date on all the things that are released multiple times a month.
  prefs: []
  type: TYPE_NORMAL
- en: Get started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GitHub projects can contain issues and pull requests from multiple repos. Therefore,
    they have to be created at an organization level or in your profile for your personal
    repos.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new project, navigate to **Projects** on the main page of your
    organization or on your GitHub profile and click **New Project** (see *Figure
    2.14*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.14 – Creating a new project in your profile or organization'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_014.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.14 – Creating a new project in your profile or organization
  prefs: []
  type: TYPE_NORMAL
- en: Adding work items to projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The default view in projects is the table view. It is optimized for entering
    data. Press *Ctrl* + *space* or click in the last row of the table. You can enter
    the name of a new work item directly and later convert the item into an issue.
    Or you can type *#* and select a repository. You can then select available issues
    and pull requests (see *Figure 2.15*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Adding issues, pull requests, or draft work items to the backlog'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_015.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.15 – Adding issues, pull requests, or draft work items to the backlog
  prefs: []
  type: TYPE_NORMAL
- en: Adding metadata to your work
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can easily add different metadata fields to your project. Right now, these
    types are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Date fields**: The value must be a valid date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number fields**: The value must be a number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Single select**: The value must be selected from a list of values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text field**: The value can be any text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Iteration**: The value must be selected from a set of date ranges. Date ranges
    in the past are automatically marked as completed. A date range including the
    current date is marked as current.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To add a new field, press *Cmd* + *K* (Mac) or *Ctrl* + *K* (Windows/Linux)
    to open the command palette and start typing `Create new field`. You can also
    click the plus sign in the top-right corner and select **+ New field**. Enter
    a name for the field and select the field type.
  prefs: []
  type: TYPE_NORMAL
- en: Working with table views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The default view for the project is the highly flexible **table view**, which
    you can use to enter data and prioritize it by using drag and drop to order the
    rows. You can sort, filter, and group the data in your rows by opening the menu
    in the header of the columns or by opening the command palette (*Cmd* + *K* or
    *Ctrl* + *K*) and selecting one of the commands. If you group the table view,
    you can directly add items to a group or change the value of an item by dragging
    it to another group (see *Figure 2.16*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.16 – The table view supports grouping, filtering, and sorting'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_016.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.16 – The table view supports grouping, filtering, and sorting
  prefs: []
  type: TYPE_NORMAL
- en: Working with the board view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can switch your view to a **board view** that displays your work as a configurable
    Kanban board. The board can display one column for each value in any field! You
    can set this using the **column field** property of the view. You can drag an
    item to another column to change the status. You cannot group boards yet or have
    swimlanes, but you can filter the board to have individual boards for different
    kinds of work items (see *Figure 2.17*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.17 – The board view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_017.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.17 – The board view
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add a new column by clicking the plus sign to the right of the board
    for any field you choose as the column field. This gives you a very flexible way
    to visualize your work (see *Figure 2.18*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.18 – Choose any field as the column field for your boards'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_018.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.18 – Choose any field as the column field for your boards
  prefs: []
  type: TYPE_NORMAL
- en: The board view is optimized to visualize your work, optimize the flow, and limit
    WIP.
  prefs: []
  type: TYPE_NORMAL
- en: Working with views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Every time you sort, filter, or group the data in a view, or switch between
    table and board view, a blue icon in the tab header indicates that the view has
    unsaved changes. You can see the changes in the menu and save or discard them.
    You can also save them as a new view (see *Figure 2.19*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.19 – Working with view modifications'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_019.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.19 – Working with view modifications
  prefs: []
  type: TYPE_NORMAL
- en: It is simple to create new customized views, rename them, and arrange them using
    drag and drop.
  prefs: []
  type: TYPE_NORMAL
- en: Workflows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use **workflows** to define what happens when issues or pull requests
    transition to another status. Currently, you can only enable or disable default
    workflows – but in the future, you will be able to write your own workflows (see
    *Figure 2.20*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.20 – Workflows define what happens when items change'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_020.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.20 – Workflows define what happens when items change
  prefs: []
  type: TYPE_NORMAL
- en: Insights
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can gain `@current` or `@next` for an iteration field or `@me` for the
    assignee field. You can disable states in the chart by clicking on them and you
    can hover with the mouse over dates to see details (see *Figure 2.21*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.21 – Getting insights with flexible charts on real-time data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_021.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.21 – Getting insights with flexible charts on real-time data
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, insights only support one type of chart – the burn-up
    chart – and only by a number of items and statuses. But this will change soon,
    and you will be able to create a variety of flexible charts that you can change
    to all kinds of columns.
  prefs: []
  type: TYPE_NORMAL
- en: Managing access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since projects can be shared across multiple repositories, you can configure
    the visibility and access permissions in the settings. Projects can have a visibility
    of public or private. This allows you to create roadmaps that you can share with
    the public. In organizations, you can set the base permissions for organization
    members to **No Access**, **Read**, **Write**, or **Admin**. This is not possible
    in personal projects. But you can invite explicit collaborators and grant them
    **Read**, **Write**, or **Admin** permissions.
  prefs: []
  type: TYPE_NORMAL
- en: 'For better discoverability, you can add projects to repositories (see *Figure
    2.22*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.22 – Adding projects to repositories'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_022.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.22 – Adding projects to repositories
  prefs: []
  type: TYPE_NORMAL
- en: GitHub projects are a very flexible solution to manage your work and adjust
    it to your needs. To learn more about GitHub projects, see [https://docs.github.com/en/issues/trying-out-the-new-projects-experience/about-projects](https://docs.github.com/en/issues/trying-out-the-new-projects-experience/about-projects).
  prefs: []
  type: TYPE_NORMAL
- en: Projects are still in beta. But the features that have come out are impressive
    and in the near future, this will be the most flexible solution that allows the
    easy sharing of your configuration with the community. Follow the updates in the
    changelog at [https://github.blog/changelog/label/issues/](https://github.blog/changelog/label/issues/).
  prefs: []
  type: TYPE_NORMAL
- en: Third-party integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are already comfortable with a mature solution such as **Jira** or **Azure
    Boards**, you can also keep using this solution. GitHub has great integration
    for nearly all available products. I will show you here how to integrate with
    Jira and Azure Boards – but there are many more solutions in the GitHub marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: Is It Simple?
  prefs: []
  type: TYPE_NORMAL
- en: Jira and Azure Boards are great products that can be highly customized. If you
    want to stick with your current tool, make sure that everything applies that I
    described in this chapter. Is it simple? Can you put all your work into it? Do
    you pull work from a queue? Do you have WIP limits in place? How is the flow efficiency?
  prefs: []
  type: TYPE_NORMAL
- en: You might want to consider adjusting your process and item templates to a leaner
    way of working. Moving to a new platform is always a good opportunity to reduce
    ballast. If you integrate, make sure you don’t inherit debts that slow you down.
  prefs: []
  type: TYPE_NORMAL
- en: Jira
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GitHub and Jira both have an application in their marketplace to connect both
    applications. If you create a new Jira project, you can directly add GitHub in
    the process (see *Figure 2.23)*. You can also add it later under **Apps** | **Find
    new Apps** in Jira.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.23 – Adding GitHub for Jira to your Jira project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_023.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.23 – Adding GitHub for Jira to your Jira project
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation is straightforward and is explained here: [https://github.com/marketplace/jira-software-github](https://github.com/marketplace/jira-software-github).'
  prefs: []
  type: TYPE_NORMAL
- en: You install both apps and connect to the GitHub organization in Jira. In GitHub,
    you can specify to select all repositories in your organization or just specific
    ones. If your organization has many repos, the sync can take some time!
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check your configuration and sync status in Jira under **Apps** | **Manage
    your apps** | **GitHub** | **Get started** (see *Figure 2.24*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.24 – GitHub configuration and sync status in Jira'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_024.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.24 – GitHub configuration and sync status in Jira
  prefs: []
  type: TYPE_NORMAL
- en: Once the synchronization is active, you link issues, pull requests, and commits
    to Jira issues by mentioning the ID of the Jira issue. The ID always consists
    of the project key and an integer representing the item (for example, `GI-666`).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you specify a Jira issue `[GI-1]` and `[GI-2]` in a GitHub issue, the text
    is automatically linked to the corresponding Jira issue (see *Figure 2.25*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.25 – Linking GitHub issues to Jira issues'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_025.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.25 – Linking GitHub issues to Jira issues
  prefs: []
  type: TYPE_NORMAL
- en: If you mention Jira issues in your commit messages, they are automatically linked
    to your Jira issues under **Development** (see *Figure 2.26*). You can also drill
    into the commits and see the files with the number of changes that are part of
    the commit.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.26 – Linking GitHub artifacts in Jira'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_026.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.26 – Linking GitHub artifacts in Jira
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use **smart commits** to perform actions with the Jira issues
    from within your commit message. Smart commits have the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Currently, there are three commands supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '`comment`: Add a comment to the Jira issue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`time`: Add the time to the Jira issue you worked on it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transition`: Change the state of the Jira issue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are a few examples of how smart commits work:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following commit message adds the comment `corrected indent issue` to issue
    `GI-34`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This commit message adds time to `GI.34`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This commit message adds a comment to `GI-66` and closes the issue:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For more information on smart commits, see [https://support.atlassian.com/jira-software-cloud/docs/process-issues-with-smart-commits](https://support.atlassian.com/jira-software-cloud/docs/process-issues-with-smart-commits).
  prefs: []
  type: TYPE_NORMAL
- en: Caution!
  prefs: []
  type: TYPE_NORMAL
- en: Smart commits only work if your email address used in the commit message has
    sufficient rights in Jira!
  prefs: []
  type: TYPE_NORMAL
- en: Jira and GitHub have a tight integration. If your teams are already comfortable
    with Jira, it’s best to stay with it and use the integration into GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Boards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Azure Boards** also has very tight integration with GitHub. It’s very easy
    to set it up. You just have to install the Azure Boards app from the GitHub marketplace
    (see [https://github.com/marketplace/azure-boards](https://github.com/marketplace/azure-boards))
    and follow the instructions.'
  prefs: []
  type: TYPE_NORMAL
- en: You can link GitHub commits and GitHub pull requests directly from the Azure
    Boards issue (or any other work item type you have) in the `AB#<id of Azure Board
    Issue>` (for example, `AB#26`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The GitHub links get displayed on the cards with the GitHub icon (see *Figure
    2.27*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.27 – Linking GitHub artifacts in Azure Boards'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_027.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.27 – Linking GitHub artifacts in Azure Boards
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add one of the `fix`, `fixes`, or `fixed` keywords before the `AB` reference,
    the Azure Boards issue will automatically transition to the `Done` state. See
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following commit message will link to issue 666 and transition the issue
    to done if the commit is merged:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following commit message will link issues 42 and 666 but only transition
    666 to done:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The keyword only works with one reference. The following commit message will
    link all three issues – but only 666 will be moved to done:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the keyword is not directly before the reference, no issue will be transitioned!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can add a badge to the README file in GitHub that shows the number of Azure
    Boards issues. You can get the badge URL from the settings of your Azure Boards
    (the small gear icon on the right above the board) in the **Status badge** section.
    You can only show the number of icons that are in progress or the number of all
    items (see *Figure 2.28*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.28 – Adding a badge to your GitHub README file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02_028.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.28 – Adding a badge to your GitHub README file
  prefs: []
  type: TYPE_NORMAL
- en: The Azure Boards integration is simple to set up and feels very natural. If
    your teams are already comfortable with Azure Boards, it’s a good option to stay
    in Azure Boards and use the tight integration with GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Case study
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start with their DevOps transformation, **Tailwind Gears** has selected two
    teams that will be moved to GitHub as the new DevOps platform.
  prefs: []
  type: TYPE_NORMAL
- en: The strategic decision is to move everything to GitHub and use **GitHub projects**
    and **GitHub issues** to manage the work. This also enables the end-to-end traceability
    that is needed for some teams that work in a regulated environment. Also, the
    development processes should be aligned during the move to the new platform.
  prefs: []
  type: TYPE_NORMAL
- en: One of the pilot teams has already worked with **Scrum** for over a year. They
    use **Jira** to manage their backlog and work in 3-week sprints. A closer look
    at the sprints shows that in every sprint, there are a lot of issues that could
    not be closed. Also, most of the issues are worked on simultaneously from the
    beginning of the sprint. When asked, the team reports that they plan all the work
    at the beginning of the sprint. But some of the work is blocked due to dependencies
    on the company ERP system. When blocked, the developers start to work on another
    task. In addition, some of the developers still have duties for some of their
    old projects. They receive tickets from the ticketing system of the help desk
    and must provide third-level support. These tickets are hard to plan and lead
    to a wait time for other developers in the team that depend on work from these
    developers.
  prefs: []
  type: TYPE_NORMAL
- en: To start on the new platform, we import all open requirements from Jira and
    label them as `requirement`, `planned`, and `business`. If a ticket comes in,
    we agree to manually add a new issue and label it as `bug`, `unplanned`, and `IT`.
    We create a separate `infrastructure`, `planned`, and `team` and move it high
    on the backlog.
  prefs: []
  type: TYPE_NORMAL
- en: To reduce planning and wait times and establish a more pull-based flow of work,
    we agree to not plan the entire sprint, but to focus on the top three requirements
    in the backlog. The team breaks down the work for these three items and we establish
    a **WIP limit** of 5 for tasks that are ongoing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second team still works in classical waterfall; their requirements are
    in IBM Rational DOORS and they are used to working based on the specification
    documents. To move to a more agile way, the team gets some new team members:'
  prefs: []
  type: TYPE_NORMAL
- en: An **Agile Coach** that acts as a **Scrum Master**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **Requirements Engineer** that acts as the **Product Owner**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **architect** from the architecture team that is responsible for updating
    the software architecture before development starts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **quality engineer** that is responsible for testing the application before
    it is released
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start work, we export the requirements from DOORS and import them into GitHub
    projects. We keep the DOORS ID to be able to track back our backlog to the original
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: When breaking down the work for the first requirement, we find that the work
    is too much for the sprint. The product owner splits the requirement into multiple
    small items to reduce the **batch size**. The breakdown for the most important
    two items shows that the items can each be done in about 1 week. There will still
    be some wait time for the architect and the quality engineer – but the team is
    confident that they have tasks that these two can help get done. For the team,
    it is still faster than the wait time if the work is handed over to another team.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Context switching and unplanned work kill productivity. In this chapter, you
    learned how to increase your productivity by moving to a lean way of working.
    You achieve this by establishing pull instead of push on a Kanban board, limiting
    your WIP and focusing on getting things done, and reducing your batch size and
    hand-offs.
  prefs: []
  type: TYPE_NORMAL
- en: You learned how to use GitHub issues and GitHub projects to achieve this and
    how you can integrate Jira and Azure Boards if you prefer to stay in your existing
    work management system.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will have a closer look at teamwork and collaborative
    development.
  prefs: []
  type: TYPE_NORMAL
- en: Further readings and references
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tregubov A., Rodchenko N., Boehm B., & Lane J.A. (2017). *Impact of Task Switching
    and Work Interruptions on Software Development Processes*: [https://www.researchgate.net/publication/317989659_Impact_of_task_switching_and_work_interruptions_on_software_development_processes](https://www.researchgate.net/publication/317989659_Impact_of_task_switching_and_work_interruptions_on_software_development_processes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Weinberg G.M. (1991), *Quality Software Management: Systems Thinking* (1st
    ed.). Dorset House'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub issues: [https://guides.github.com/features/issues/](https://guides.github.com/features/issues/)
    and [https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues](https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Markdown: [https://guides.github.com/features/mastering-markdown/](https://guides.github.com/features/mastering-markdown/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Issue templates: [https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/about-issue-and-pull-request-templates](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/about-issue-and-pull-request-templates)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub projects: [https://docs.github.com/en/issues/trying-out-the-new-projects-experience/about-projects](https://docs.github.com/en/issues/trying-out-the-new-projects-experience/about-projects)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub Jira integration: [https://github.com/atlassian/github-for-jira](https://github.com/atlassian/github-for-jira)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub Azure Boards integration: [https://docs.microsoft.com/en-us/azure/devops/boards/github](https://docs.microsoft.com/en-us/azure/devops/boards/github)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
