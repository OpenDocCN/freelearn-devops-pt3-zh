["```\n    pipelines:\n      default:\n        - step:\n            name: Deploy to staging\n            deployment: staging\n            script:\n              - python deploy.py staging_1\n    ```", "```\n    pipelines:\n       default:\n          - stage:\n                name: Deploy to Production\n                deployment: production\n                steps:\n                    - step:\n                       name: Basic deploy first step\n                       script:\n                             - sh ./deploy1.sh\n                    - step:\n                        name: Basic deploy second step\n                        script:\n                           - sh ./deploy2.sh\n    ```", "```\n    - step:\n          name: Deploy to staging\n          deployment: staging\n          trigger: manual\n          script:\n             - python stage_deploy.py staging\n    ```", "```\n    pipelines:\n       default:\n         - step:\n             script:\n               - echo \"We do this on all branches except staging\"\n       branches:\n         staging:\n           - step:\n               deployment: staging\n               script:\n                 - echo \"Done on the staging branch\"\n                 - python deploy.py\n    ```", "```\n    pipelines:\n       pull-requests:\n         staging/*:\n            - step:\n                deployment: staging\n                script:\n                  - echo \"Test and deploy pre-merge\"\n                  - python deploy.py\n    ```", "```\n    - >\n      export access_token=$(curl -s -X POST -u \"${CLIENT_ID}:${CLIENT_SECRET}\" \\\n        https://bitbucket.org/site/oauth2/access_token \\\n        -d grant_type=client_credentials -d scopes=\"repository\"| jq --raw-output '.access_token')\n    # Configure git to use the oauth token.\n    - git remote set-url origin https://x-token-auth:${access_token}@bitbucket.org/${BITBUCKET_REPO_OWNER}/${BITBUCKET_REPO_SLUG}\n    ```", "```\n    git remote set-url origin ${BITBUCKET_GIT_SSH_ORIGIN}\n    ```", "```\n    git remote set-url origin https://<your username>:${APP_SECRET}@bitbucket.org/${BITBUCKET_REPO_OWNER}/${BITBUCKET_REPO_SLUG}\n    ```", "```\n    pipelines:\n       default:\n          - step:\n              script:\n                 - git add <changed files>\n                 - git commit -m \"[skip ci] Updates added via Bitbucket Pipelines deploy\"\n                 - git push\n    ```", "```\n    pipelines:\n       default:\n          - step:\n              script:\n                 - git add <changed files>\n                 - git commit -m \"[skip ci] Updates added via Bitbucket Pipelines deploy\"\n                 - git tag -am \"Tag for release ${BITBUCKET_BUILD_NUMBER}\" release-${BITBUCKET_BUILD_NUMBER}\n                 - git push\n    ```", "```\n    curl -fL \"https://getcli.jfrog.io?setup\" | sh\n    ```", "```\n    powershell \"Start-Process -Wait -Verb RunAs powershell '-NoProfile iwr https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/[RELEASE]/jfrog-cli-windows-amd64/jf.exe -OutFile $env:SYSTEMROOT\\system32\\jf.exe'\" ; jf setup\n    ```", "```\n    JFROG_CLI_SERVER_ID.\n    ```", "```\n    jf c export <server ID from previous instruction>\n    ```", "```\n    script:\n       - pipe: jfrog/jfrog-setup-cli:2.0.0\n       - source ./jfrog-setup-cli.sh\n    ```", "```\n    script:\n       - pipe: jfrog/jfrog-setup-cli:2.0.0\n       - source ./jfrog-setup-cli.sh\n       # Upload artifacts to Artifactory\n       - jf rt u file artifacts/\n       # Collect environment variables\n       - jf rt bce\n       # Publish build info\n       - jf rt bp\n    ```", "```\n    - pipe: sonatype/nexus-repository-publish:0.0.1\n      variables:\n        FILENAME: '<string>'\n        ATTRIBUTES: '<string>'\n        USERNAME: '<string>'\n        PASSWORD: '<string>'\n        SERVER_URL: '<string>'\n        # REPOSITORY: '<string>' # Optional.\n        # FORMAT: '<string>' # Optional.\n    ```", "```\n        - step:\n            # set NEXUS_USERNAME and NEXUS_PASSWORD as environment variables\n            name: Deploy to Nexus Repository Manager\n            deployment: test   # set to test, staging or production\n            # trigger: manual  # uncomment to have a manual step\n            script:\n              - pipe: sonatype/nexus-repository-publish:0.0.1\n                variables:\n                  FILENAME: 'target/myapp-1.0-SNAPSHOT.jar'\n                  ATTRIBUTES: '-CgroupId=com.example -CartifactId=myapp -Cversion=1.0 -Aextension=jar'\n                  USERNAME: '$NEXUS_USERNAME'\n                  PASSWORD: '$NEXUS_PASSWORD'\n                  SERVER_URL: 'https://nexus.example.com/'\n    ```", "```\n    script:\n      - pipe: atlassian/bitbucket-upload-file:0.7.1\n        variables:\n          BITBUCKET_USERNAME: $BITBUCKET_USERNAME\n          BITBUCKET_APP_PASSWORD: $BITBUCKET_APP_PASSWORD\n          FILENAME: 'package.json'\n    ```", "```\n    script:\n      - pipe: atlassian/bitbucket-upload-file:0.7.1\n        variables:\n          BITBUCKET_ACCESS_TOKEN: $BITBUCKET_ACCESS_TOKEN\n          FILENAME: 'package.json'\n    ```", "```\n    script:\n      - pipe: atlassian/bitbucket-upload-file:0.7.1\n        variables:\n          BITBUCKET_USERNAME: $BITBUCKET_USERNAME\n          BITBUCKET_APP_PASSWORD: $BITBUCKET_APP_PASSWORD\n          FILENAME: '*.txt'\n    ```", "```\n    script:\n      - pipe: atlassian/bitbucket-upload-file:0.7.1\n        variables:\n          BITBUCKET_USERNAME: $BITBUCKET_USERNAME\n          BITBUCKET_APP_PASSWORD: $BITBUCKET_APP_PASSWORD\n          FILENAME: 'package.json'\n          ACCOUNT: $PROJECT_ACCOUNT\n          REPOSITORY: $ALTERNATE_REPO\n    ```", "```\n    ssh-copy-id -i <public key file to copy> user@host\n    ```", "```\n    - pipe: atlassian/scp-deploy:1.5.0\n      variables:\n        USER: '<string>'\n        SERVER: '<string>'\n        REMOTE_PATH: '<string>'\n        LOCAL_PATH: '<string>'\n        # SSH_KEY: '<string>' # Optional.\n        # EXTRA_ARGS: '<string>' # Optional.\n        # DEBUG: '<boolean>' # Optional.\n    ```", "```\n    script:\n      - pipe: atlassian/scp-deploy:1.5.0\n        variables:\n          USER: 'ec2-user'\n          SERVER: '127.0.0.1'\n          REMOTE_PATH: '/var/www/build/'\n          LOCAL_PATH: 'build/'\n          DEBUG: 'false'\n          EXTRA_ARGS: [\"-P\", \"8022\"]\n    ```", "```\n    script:\n      - pipe: atlassian/scp-deploy:1.5.0\n        variables:\n          USER: 'ec2-user'\n          SERVER: '127.0.0.1'\n          REMOTE_PATH: '/var/www/build/'\n          LOCAL_PATH: 'build'\n          SSH_KEY: $MY_SSH_KEY\n          DEBUG: 'true'\n          EXTRA_ARGS: ['-o', 'ServerAliveInterval=10']\n    ```", "```\n    script:\n      - pipe: atlassian/aws-s3-deploy:1.6.0\n        variables:\n          AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID\n          AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY\n          AWS_DEFAULT_REGION: 'us-east-1'\n          S3_BUCKET: 'my-bucket-name'\n          LOCAL_PATH: 'build'\n    ```", "```\n    script:\n      - pipe: atlassian/aws-s3-deploy:1.6.0\n        variables:\n          AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID\n          AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY\n          AWS_DEFAULT_REGION: 'us-east-1'\n          S3_BUCKET: 'my-bucket-name/logs'\n          LOCAL_PATH: '$(pwd)'\n    ```", "```\n    - pipe: atlassian/google-cloud-storage-deploy:2.0.0\n      variables:\n        KEY_FILE: '<string>'\n        BUCKET: '<string>'\n        SOURCE: '<string>'\n        # GOOGLE_OIDC_CONFIG_FILE: \"<string>\" # Optional by default. Required for OpenID Connect (OIDC) authentication.\n        # PROJECT: \"<string>\" # Optional by default. Required with GOOGLE_OIDC_CONFIG_FILE.\n        # CACHE_CONTROL: '<string>' # Optional. options include no-cache,no-store,max-age=<seconds>, s-maxage=<seconds>, no-transform, public, private\n        # CONTENT_DISPOSITION: '<string>' # Optional.\n        # CONTENT_ENCODING: '<string>' # Optional.\n        # CONTENT_LANGUAGE: '<string>' # Optional.\n        # CONTENT_TYPE: '<string>' # Optional.\n        # ACL: '<string>' # Optional.  Options include project-private, private, public-read, public-read-write, authenticated-read, bucket-owner-read, bucket-owner-full control\n        # STORAGE_CLASS: '<string>' # Optional.  Options include multi-regional, regional, nearline, coldline\n        # DEBUG: '<boolean>' # Optional.\n    ```", "```\n    script:\n      - pipe: atlassian/google-cloud-storage-deploy:2.0.0\n        variables:\n          KEY_FILE: $KEY_FILE\n          BUCKET: 'my-bucket'\n          SOURCE: 'myApp.jar'\n    ```", "```\n    script:\n      - pipe: atlassian/google-cloud-storage-deploy:2.0.0\n        variables:\n          KEY_FILE: $KEY_FILE\n          BUCKET: 'my-bucket'\n          SOURCE: 'myAppFile.jar'\n          CACHE_CONTROL: 'max-age=60'\n          CONTENT_DISPOSITION: 'attachment'\n          ACL: 'public-read'\n          STORAGE_CLASS: 'nearline'\n    ```", "```\n    az ad sp create-for-rbac --name <name of your service principal>\n    ```", "```\n    {\n      \"appId\": \"myAppId\",\n      \"displayName\": \"myServicePrincipalName\",\n      \"password\": \"myServicePrincipalPassword\",\n      \"tenant\": \"myTentantId\"\n    }\n    ```", "```\n    script:\n      - pipe: atlassian/azure-functions-deploy:2.0.0\n        variables:\n          AZURE_APP_ID: $AZURE_APP_ID\n          AZURE_PASSWORD: $AZURE_PASSWORD\n          AZURE_TENANT_ID: $AZURE_TENANT_ID\n          FUNCTION_APP_NAME: '<string>'\n          ZIP_FILE: '<string>'\n          # DEBUG: '<boolean>' # Optional\n    ```", "```\n    script:\n      - pipe: atlassian/azure-functions-deploy:2.0.0\n        variables:\n          AZURE_APP_ID: $AZURE_APP_ID\n          AZURE_PASSWORD: $AZURE_PASSWORD\n          AZURE_TENANT_ID: $AZURE_TENANT_ID\n          FUNCTION_APP_NAME: 'my-function'\n          ZIP_FILE: 'application.zip'\n    ```", "```\n    - pip install ansible==2.17\n    ```", "```\n    -i flag to denote the inventory file:\n\n    ```", "```\n\n    ```", "```\n    script:\n       - pip install ansible==2.17\n       - cd deployment\n       - ansible-playbook -i inventory playbook.yaml\n    ```", "```\n    image: python:2.7\n      pipelines:\n       default:\n        - step:\n            script: # Modify the commands below to build your repository.\n                - pip install ansible-tower-cli\n    ```", "```\n     - hostval=$(tower-cli config host $host)\n     - userval=$(tower-cli config username $username)\n     - passwordval=$(tower-cli config password $password)\n     - tower-cli config verify_ssl false\n     - tower-cli job launch --job-template $ID --monitor\n    ```", "```\n     - step:\n        image: hashicorp/terraform:full\n    ```", "```\n     - terraform init\n    ```", "```\n    -out flag:\n\n    ```", "```\n\n    ```", "```\n    step should now look as follows:\n\n    ```", "```\n\n    ```"]