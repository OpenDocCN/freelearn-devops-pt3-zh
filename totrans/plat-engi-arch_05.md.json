["```\n resource \"aws_instance\" \"finoneacme_demoserver\" {\n  ami           = \"ami-01e815680a0bbe597\"\n  instance_type = \"c5.large\"\n  tags = {\n    Name = \"IaCTFExample\"\n  }\n}\n```", "```\n - name: provisioning S3 Bucket using Ansible playbook\n   hosts: localhost\n   connection: local\n   gather_facts: false\n   tags: provisioning\n   tasks:\n     - name: create S3 bucket\n       S3_bucket:\n         name: finoneacme_bucket_dev\n         region: us-east-1\n         versioning: yes\n         tags:\n           name: bucketenv\n           type: dev\n```", "```\n apiVersion: composites.financialone.acme/v1alpha1\nkind: PerformanceTestCluster\nmetadata:\n  name: ptest-devteam1\nspec:\n  clusterSize: \"medium\"\n  targetApp:\n    repoUrl: \"https://financialone.acme/our-app-repo\"\n    targetRevision: \"2.5.1\"\n    chart: \"ourapp\"\n  loadProfile: \"spike-load\"\n  observability: true\n  notifySlackOnReady: \"#devteam1\"\n  leaseTime: \"12h\"\n```", "```\n apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: fund-transfer-service\nspec:\n  …\n  template:\n    metadata:\n      annotations:\n        # team ownership\n        owner.team: dev-team-backend\n        app.kubernetes.io/name: fund-transfer-service\n        # app-context\n        app.kubernetes.io/part-of: backend-services\n        app.kubernetes.io/version: d85aaef\n        # log level\n        observability.logs.level: info\n        # log source\n        observability.logs.location: stdout\n    …\n    spec:\n      containers:\n      - name: fund-transfer\n        image: \"financeoneacme/fund-transfer:d85aaef\"\n        imagePullPolicy: IfNotPresent\n        resources:\n          # specify limits\n          limits:\n            memory: \"200Mi\"\n            cpu: \"2\"\n          requests:\n            memory: \"100Mi\"\n            cpu: \"2\"\n    …\n```", "```\n apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: fund-transfer-service\nspec:\n  …\n  template:\n    metadata:\n      annotations:\n        owner.team: dev-team-backend\n        app.kubernetes.io/name: fund-transfer-service\n        app.kubernetes.io/part-of: backend-services\n        app.kubernetes.io/version: a3456bc\n        observability.logs.level: info\n        observability.logs.location: stdout\n    …\n    spec:\n      containers:\n      - name: fund-transfer\n        image: \"financeoneacme/fund-transfer:a3456bc\"\n    …\n```", "```\n export REGISTRY=registry.finone.acme\n# Authenticate\ndocker login -u YOURUSER -p YOURPASSWORD $REGISTRY\n# Build an image\ndocker build -t $REGISTRY/financeoneacme/fund-transfer:1.2.3 . # Push an image\ndocker push $REGISTRY/financeoneacme/fund-transfer:1.2.3\n# Pull an image\ndocker pull $REGISTRY/financeoneacme/fund-transfer:1.2.3\n```", "```\n apiVersion: composites.financialone.acme/v1alpha1\nkind: FinancialBackend\nmetadata:\n  name: tenantABC-eu-west\nspec:\n  service-versions:\n    fund-transfer: 2.34.3\n    account-info: 1.17.0\n  redis-cache:\n    version: 7.4.2\n    name: transfer-cache\n    size: medium\n  database:\n    size: large\n    name: accounts-db\n  region: \"eu-west\"\n  ingress:\n    url: \"https://tenantABC-eu-west.financialone.acme\"\n```", "```\n apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: fund-transfer-service\nspec:\n  …\n  template:\n    metadata:\n      annotations:\n        owner.team: team-us\n        app.kubernetes.io/name: fund-transfer\n        app.kubernetes.io/part-of: backend-tenant-2\n        app.kubernetes.io/version: 1.5.1\n```", "```\n import cdevents\nevent = cdevents.new_pipelinerun_finished_event(\n  context_id=\"git-abcdef1231\",\n  context_source=\"jenkins\",\n  context_timestamp=datetime.datetime.now(),\n  subject_id=\"pipeline_job123\",\n  custom_data={\n    \"owner\": \"dev-team-backend\",\n    \"part-of\": \"backend-services\",\n    \"name\" : \"fund-transfer-service\"\n  },\n  subject_source=\"build\",\n  custom_data_content_type=\"application/json\",\n  pipeline_name=\"backendBuildPipeline\",\n  url=\"https://finone.acme/ci/job123\",\n)\n# Create a CloudEvent from the CDEvent\ncloudevent = cdevents.to_cloudevent(event)\n# Creates the HTTP request representation of the CloudEvent in structured content mode\nheaders, body = to_structured(event)\n# POST it to the event bus, data store\nrequests.post(\"<some-url>\", data=body, headers=headers)\n```", "```\n apiVersion: composites.financialone.acme/v1alpha1\nkind: FinancialBackend\n```"]