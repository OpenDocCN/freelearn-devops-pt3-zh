["```\nclass Event:\n    def __init__(self, event_id, timestamp, data):\n        self.event_id = event_id\n        self.timestamp = timestamp\n        self.data = data\nclass EventStore:\n    def __init__(self):\n        self.events = []\n    def append_event(self, event):\n        self.events.append(event)\n    def get_events(self):\n        return self.events\n# Usage\nevent_store = EventStore()\nevent_store.append_event(Event(1, \"2023-07-15T10:00:00\", {\"data\": \"example\"}))\nevents = event_store.get_events()\n```", "```\ndef write_to_log(log_file, data):\n    with open(log_file, \"a\") as file:\n        file.write(data + \"\\n\")\n# Usage\nwrite_to_log(\"app.log\", \"Log entry 1\")\nwrite_to_log(\"app.log\", \"Log entry 2\")\n```", "```\nCREATE TABLE employee (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```", "```\nclass VersionedData:\n    def __init__(self, data, version, timestamp):\n        self.data = data\n        self.version = version\n        self.timestamp = timestamp\ndata = VersionedData({\"name\": \"John Doe\"}, 1, \"2023-07-15T10:00:00\")\n```", "```\nfrom immutables import Map\ndata = Map({\"name\": \"John\", \"age\": 30})\nupdated_data = data.set(\"age\", 31)\n```"]