- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Git, Your Doorway to DevOps
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git，您的 DevOps 之门
- en: Git is a free and open source **version control system** (**VCS**) that is widely
    used by software developers and teams to track changes to their code base and
    collaborate on projects. It allows multiple people to work on the same code base
    without overwriting each other’s changes, and it keeps a record of every change
    made to the code, making it easy to roll back to a previous version if necessary.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是一个免费的开源**版本控制系统**（**VCS**），被软件开发者和团队广泛使用，用于跟踪代码库的更改并进行协作。它允许多人在同一个代码库上工作而不会覆盖彼此的更改，并记录每次对代码所做的更改，使得在必要时可以轻松回滚到以前的版本。
- en: Git was created by Linus Torvalds in 2005 for the development of the Linux kernel,
    and it has since become the de facto standard for version control in the software
    industry. It is used by millions of developers worldwide and is supported by a
    large and active open source community.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是由 Linus Torvalds 于 2005 年为 Linux 内核的开发而创建的，后来它成为了软件行业版本控制的事实标准。全球数百万开发者使用
    Git，且它得到了一个庞大且活跃的开源社区的支持。
- en: In this chapter, we will cover the most commonly used Git commands and how to
    use them. We will start with the basics of setting up a Git repository and making
    your first commit, and then move on to more advanced topics such as branching
    and merging.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍最常用的 Git 命令以及如何使用它们。我们将从设置 Git 仓库并进行首次提交的基础开始，然后继续讲解更高级的话题，如分支和合并。
- en: 'The chapter will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Basic Git commands
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本的 Git 命令
- en: Local versus remote Git repositories
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地与远程 Git 仓库
- en: GitFlow and GitHub Flow
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitFlow 和 GitHub Flow
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, you will need a system with a Bash shell. You will have to
    have the Git command available or be able to install it in this system. We prefer
    Linux or macOS systems, but it is possible to set up Windows to have functional
    Bash and Git. The installation of this environment is beyond the scope of this
    book.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您需要一台具有 Bash shell 的系统。您需要确保该系统已安装 Git 命令或能够安装它。我们推荐使用 Linux 或 macOS 系统，但也可以在
    Windows 上设置功能齐全的 Bash 和 Git。本书并不涉及该环境的安装。
- en: Basic Git commands
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本的 Git 命令
- en: 'There are many commands that you can use with Git, but some of the most commonly
    used ones include the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用很多 Git 命令，但最常用的一些命令包括：
- en: '`git config`: This is the command used to configure your local Git environment.
    The configuration can be global; the values will then be kept in your home directory
    in the `.gitconfig` file. The values can only be set per repository, and then
    they will be kept within the repository.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git config`：此命令用于配置本地 Git 环境。配置可以是全局性的，这时配置值会保存在 `.gitconfig` 文件中，位于您的家目录下。值也可以仅在某个仓库中设置，并保存在该仓库内。'
- en: '`git init`: This initializes a new Git repository. When you run this command
    in a directory, it creates a new `.git` directory in the root of the project,
    which is used to track changes made to the project’s files.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git init`：此命令初始化一个新的 Git 仓库。当您在某个目录中运行此命令时，它会在项目根目录下创建一个新的 `.git` 目录，用于跟踪项目文件所做的更改。'
- en: '`git clone`: This creates a local copy of a remote Git repository. When you
    run this command, it creates a new directory with the same name as the repository
    and clones all of the files and their history into that directory.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git clone`：此命令创建一个远程 Git 仓库的本地副本。当您运行此命令时，它会创建一个与仓库同名的新目录，并将所有文件及其历史记录克隆到该目录中。'
- en: '`git add`: This stages files for commit. When you make changes to a file in
    a Git repository, those changes are not automatically tracked. You must use the
    `git add` command to tell Git to track changes you have made.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git add`：此命令用于暂存文件以供提交。当您在 Git 仓库中修改文件时，这些更改不会被自动跟踪。您必须使用 `git add` 命令告诉 Git
    跟踪您所做的更改。'
- en: '`git commit`: This saves your changes to the Git repository. When you run this
    command, it opens a text editor for you to write a commit message, which is a
    short description of the changes you have made. After you write the commit message
    and save it, the changes you have made are saved to the repository, and a new
    commit is created.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git commit`：此命令将您的更改保存到 Git 仓库中。当您运行此命令时，它会打开一个文本编辑器，让您编写提交信息，即您所做更改的简短描述。在编写并保存提交信息后，您所做的更改将被保存到仓库中，并创建一个新的提交。'
- en: '`git push`: This sends your local commits to a remote repository. When you
    run this command, it pushes all of your local commits to the remote repository,
    updating the project’s history and making your changes visible to other developers
    working on the project.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git push`：此命令将本地提交推送到远程仓库。当你运行此命令时，它会将所有本地提交推送到远程仓库，更新项目历史，并使你的更改对其他开发者可见。'
- en: '`git pull`: This retrieves updates from a remote repository and merges them
    into your local repository. When you run this command, it fetches the latest changes
    from the remote repository and merges them into your local repository, bringing
    your copy of the project up to date.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git pull`：此命令从远程仓库获取更新并将其合并到本地仓库。当你运行此命令时，它会从远程仓库获取最新的更改，并将它们合并到本地仓库中，使你的项目副本保持最新。'
- en: '`git branch`: This creates, lists, or deletes branches in a Git repository.
    Branches allow you to work on multiple versions of a project simultaneously and
    are often used for feature development or bug fixes.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git branch`：此命令用于在 Git 仓库中创建、列出或删除分支。分支允许你同时处理项目的多个版本，通常用于功能开发或修复 bug。'
- en: '`git checkout` or `git switch`: This switches between branches or restores
    files in your working directory. When you run this command, it switches your working
    directory to the branch you specify or restores the specified files to their state
    at a previous commit.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git checkout`或`git switch`：此命令用于在分支之间切换或恢复工作目录中的文件。当你运行此命令时，它会将工作目录切换到你指定的分支，或将指定的文件恢复到先前提交的状态。'
- en: '`git merge`: This merges one branch into another. When you run this command,
    it combines the changes made in the specified branch into the current branch,
    creating a new commit that represents the combined changes.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git merge`：此命令将一个分支合并到另一个分支。当你运行此命令时，它会将指定分支中的更改合并到当前分支，并创建一个新的提交，表示合并后的更改。'
- en: '`git stash`: This temporarily stores changes that you are not ready to commit.
    When you run this command, it saves your changes to a temporary area and restores
    your working directory to the state it was in at the last commit. You can later
    use the `git stash apply` command to restore the stashed changes to your working
    directory.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git stash`：此命令用于暂时存储你还未准备好提交的更改。当你运行此命令时，它会将你的更改保存到一个临时区域，并将工作目录恢复到上一次提交的状态。稍后，你可以使用`git
    stash apply`命令将存储的更改恢复到工作目录。'
- en: Configuring the local Git environment
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置本地 Git 环境
- en: 'Before using the Git command, there are at least two options you should set.
    They are your name and your email address. This is done using the `git config`
    command. Ahead, I am going to demonstrate setting up the name of the Git user
    and their email address. We are going to set up the global variables. They will
    be used by default for every repository cloned locally unless set up specifically
    for a repository:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Git 命令之前，至少有两个选项需要设置。它们是你的姓名和电子邮件地址。可以通过`git config`命令来完成此操作。接下来，我将演示如何设置
    Git 用户的姓名和电子邮件地址。我们将设置全局变量。除非专门为某个仓库单独设置，否则这些全局变量将在每个本地克隆的仓库中默认使用：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, when we take a look at the `~/.gitconfig` file, we will see this section:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们查看`~/.gitconfig`文件时，会看到以下部分：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There are more configuration options, such as default editor, and so on, but
    they are out of scope for this section.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多配置选项，如默认编辑器等，但它们超出了本节内容的范围。
- en: Setting up a local Git repository
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置本地 Git 仓库
- en: Before you can start using Git, you need to create a **repository** (also known
    as a **repo**). A repository is a directory where Git stores all the files and
    metadata for a project.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始使用 Git 之前，需要创建一个**仓库**（也称为**repo**）。仓库是 Git 存储项目所有文件和元数据的目录。
- en: To create a new repository, you can use the `git init` command. This creates
    a new directory with a `.git` subdirectory, which contains all the necessary files
    for the repository.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的仓库，你可以使用`git init`命令。此命令会创建一个新的目录，并在其中生成一个`.git`子目录，包含仓库所需的所有文件。
- en: 'For example, to create a new repository in the current directory, you can run
    the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要在当前目录中创建一个新的仓库，你可以运行以下命令：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This creates a new repository in the current directory and sets up the necessary
    files and metadata. Once you have a Git repository set up, you can start adding
    and committing files to it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这会在当前目录中创建一个新的仓库，并设置必要的文件和元数据。一旦你设置了 Git 仓库，就可以开始向其中添加和提交文件。
- en: To add a file to the repository, you can use the `git add` command. This adds
    the file to the staging area, which is a list of changes that will be included
    in the next commit.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要将一个文件添加到代码库中，你可以使用`git add`命令。这个命令会将文件添加到暂存区，暂存区是一个包含下次提交将包括的更改的列表。
- en: 'To add a file called `main.c` to the staging area, you can run the following
    command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要将一个名为`main.c`的文件添加到暂存区，你可以运行以下命令：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also add multiple files or directories by separating their names with
    a space:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过用空格分隔文件或目录的名称来一次性添加多个文件：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To commit changes in the staging area, you can use the `git commit` command.
    This creates a new commit that includes all changes in the staging area.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要提交暂存区中的更改，你可以使用`git commit`命令。这会创建一个新的提交，其中包括暂存区中的所有更改。
- en: 'Every commit needs to have a commit message. This is a short description of
    the changes you’re making. To specify a commit message, you can use the `-m` option
    followed by the message:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 每个提交都需要有提交信息。这是对你所做更改的简短描述。要指定提交信息，你可以使用`-m`选项，后跟消息内容：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can also use the `git commit` command without the `-m` option to open a
    text editor where you can write a more detailed commit message.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`git commit`命令而不加`-m`选项，这样会打开一个文本编辑器，你可以在其中编写更详细的提交信息。
- en: On every step while working in your Git repository, you can use the `git status`
    command. This is used to view the current state of a Git repository. It shows
    which files have been modified, added, or deleted, and whether they have been
    staged for commit.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在你进行Git操作的每个步骤中，你都可以使用`git status`命令。这用于查看Git代码库的当前状态。它显示哪些文件已被修改、添加或删除，以及它们是否已准备好提交。
- en: 'There are numerous ways to format a commit message, and almost every project
    has its own convention. In general, a good practice is to add an ID of `issue`
    from the ticketing system, followed by a short description that has 72 characters
    or fewer. The second line should be left empty, and a more detailed description
    follows on line three. Here’s an example of such a commit message:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多种格式化提交信息的方法，几乎每个项目都有自己的约定。一般来说，一个好的做法是添加一个来自问题跟踪系统的`issue` ID，然后是一个简短的描述，描述字符数不超过72个。第二行应留空，第三行跟随更详细的描述。以下是这样的提交信息示例：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When you run `git status`, it will display a list of modified files, as well
    as any untracked files that are present in the repository. It will also show the
    current branch and the status of the staging area.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行`git status`时，它将显示已修改的文件列表，以及代码库中任何未跟踪的文件。它还会显示当前分支和暂存区的状态。
- en: 'Here is an example of the output of the `git` `status` command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`git status`命令输出的示例：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, `git status` shows that two files have been modified (`main.py`
    and `__init__.py`) and one file is untracked (`main.py`). It also indicates that
    the current branch is `main` and that the branch is up to date with the `origin/main`
    branch.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`git status`显示了两个已修改的文件（`main.py`和`__init__.py`）以及一个未跟踪的文件（`main.py`）。它还指出当前分支是`main`，并且该分支与`origin/main`分支保持同步。
- en: '`git status` is a useful tool to understand the current state of your repository
    and to identify which files have been modified and need to be committed. You can
    use it to get a quick overview of changes that have been made and to see which
    files are ready to be committed. You can also use it to see which branch you are
    currently on, and whether you are up to date with the remote repository.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`git status`是一个有用的工具，可以帮助你了解当前代码库的状态，并识别哪些文件已经被修改并需要提交。你可以使用它快速查看已做的更改，并看到哪些文件已经准备好提交。它还可以显示你当前所在的分支，以及你是否与远程代码库保持同步。'
- en: The `git revert` command is used to undo changes that have been made to a repository.
    It does this by creating a new commit that undoes the changes introduced by a
    previous commit.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`git revert`命令用于撤销已经对代码库所做的更改。它通过创建一个新的提交来撤销之前提交所引入的更改。'
- en: 'For example, imagine that you have made several commits to your repository,
    and you want to undo the changes introduced by the last commit. You can use the
    `git revert` command to do this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你已经向你的代码库提交了几次更改，现在你想撤销上次提交所引入的更改。你可以使用`git revert`命令来实现：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will create a new commit that undoes the changes introduced by the last
    commit. The commit history of your repository will now look as if the last commit
    never happened.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个新的提交，撤销上次提交所引入的更改。你的代码库的提交历史现在看起来就像是上次提交从未发生过一样。
- en: 'You can also use the `git revert` command to undo the changes introduced by
    a specific commit. To do this, you need to specify the commit hash of the commit
    that you want to revert:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 `git revert` 命令撤销特定提交所引入的更改。为此，你需要指定你想撤销的提交的哈希值：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will create a new commit that undoes the changes introduced by the commit
    with the `abc123` hash.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个新的提交，撤销由 `abc123` 哈希值的提交所引入的更改。
- en: It is important to note that `git revert` does not delete commits or destroy
    history. Instead, it creates a new commit that undoes the changes introduced by
    a previous commit. This means that the changes are still present in the repository,
    but they are no longer visible in the current state of the branch.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，`git revert` 并不会删除提交或销毁历史记录。相反，它会创建一个新的提交，撤销之前提交所引入的更改。这意味着更改仍然存在于仓库中，但在当前分支的状态下不可见。
- en: If you need to permanently delete commits, you can use the `git reset` command
    or the `git filter-branch` command. However, these commands can permanently destroy
    history, so you should use them with extreme caution.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要永久删除提交，可以使用 `git reset` 命令或 `git filter-branch` 命令。然而，这些命令可能会永久销毁历史，因此使用时需要非常小心。
- en: Now that we know how to work on our local repository, we can talk about remote
    and local copies of the repository.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解如何在本地仓库上工作，接下来我们可以讨论远程和本地仓库的副本。
- en: Local versus remote Git repositories
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地与远程 Git 仓库
- en: In Git, a **repository** is a collection of files and their history, as well
    as configuration files that are used to manage the repository. A repository can
    be either local or remote.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Git 中，**仓库**是文件及其历史的集合，以及用于管理仓库的配置文件。仓库可以是本地的，也可以是远程的。
- en: A `git init` command or when you clone an existing repository using the `git
    clone` command, you are creating a local repository. Local repositories are useful
    for working on projects when you don’t have an internet connection or when you
    want to keep a copy of the project on your own machine.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 `git init` 命令或使用 `git clone` 命令克隆一个现有仓库时，你正在创建一个本地仓库。本地仓库对于在没有互联网连接时或当你希望将项目的副本保存在自己机器上时非常有用。
- en: A `git push` command, you are updating the remote repository with your local
    changes. Remote repositories are useful for collaborating with other developers,
    as they allow multiple people to work on the same project and share their changes
    with each other.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当你执行 `git push` 命令时，你正在用本地更改更新远程仓库。远程仓库对于与其他开发者合作非常有用，因为它们允许多人共同工作并互相共享更改。
- en: Git uses a distributed VCS, which means that each developer has a complete copy
    of the repository on their local machine. This allows developers to work on the
    project locally and push their changes to a remote repository when they are ready
    to share them with others. It also allows developers to collaborate on a project
    even when they are not connected to the internet.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Git 使用分布式版本控制系统（VCS），这意味着每个开发者的本地机器上都有仓库的完整副本。这允许开发者在本地工作，完成后将更改推送到远程仓库，与他人共享。此外，即使开发者没有连接到互联网，也可以在项目上进行协作。
- en: The `git clone` command is used to create a local copy of a remote Git repository.
    When you run this command, it creates a new directory with the same name as the
    repository and clones all of the files and their history into that directory.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`git clone` 命令用于创建一个远程 Git 仓库的本地副本。当你运行此命令时，它会创建一个与仓库同名的新目录，并将所有文件及其历史克隆到该目录中。'
- en: 'Here is an example of how you might use the `git` `clone` command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你可能如何使用 `git` `clone` 命令的示例：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will create a new directory called `repo` and clone the repository located
    at [https://github.com/user/repo.git](https://github.com/user/repo.git) into that
    directory.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为 `repo` 的新目录，并将位于 [https://github.com/user/repo.git](https://github.com/user/repo.git)
    的仓库克隆到该目录中。
- en: 'You can also specify a different name for the local directory by adding it
    as an argument:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过将目录名作为参数添加，来指定本地目录的不同名称：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will create a new directory called `my-local-repo` and clone the repository
    into it.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为 `my-local-repo` 的新目录，并将仓库克隆到其中。
- en: 'If you are using a Git hosting service such as GitHub, you can also use a shorthand
    version of the repository URL:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用像 GitHub 这样的 Git 托管服务，你也可以使用仓库 URL 的简写版本：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will clone the repository using the SSH protocol, which requires you to
    have an SSH key configured for your account.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用 SSH 协议克隆该仓库，这要求你为你的账户配置了一个 SSH 密钥。
- en: The `git clone` command is a useful way to create a local copy of a remote repository,
    whether you are starting a new project or contributing to an existing one. It
    allows you to work on a project locally and push your changes back to the remote
    repository when you are ready.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`git clone`命令是创建远程仓库本地副本的有用方法，无论是开始一个新项目还是为现有项目做贡献。它允许你在本地工作，准备好后将更改推送回远程仓库。'
- en: Interacting with remote repositories
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与远程仓库交互
- en: The `git pull` command is used to retrieve updates from a remote repository
    and merge them into your local repository. It is a combination of the `git fetch`
    command, which downloads updates from the remote repository, and the `git merge`
    command, which merges updates into your local repository.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`git pull`命令用于从远程仓库获取更新，并将其合并到你的本地仓库中。它是`git fetch`命令（用于从远程仓库下载更新）和`git merge`命令（用于将更新合并到本地仓库）的一种组合。'
- en: The `git fetch` command downloads updates from the remote repository but does
    not merge them into your local repository. Instead, it stores the updates in a
    temporary area called *remote-tracking branches*. You can use the `git fetch`
    command to update your remote-tracking branches and see which changes are available,
    but you will need to use the `git merge` command to actually incorporate those
    changes into your local repository.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`git fetch`命令从远程仓库下载更新，但不会将其合并到本地仓库中。相反，它将更新存储在一个名为*remote-tracking branches*的临时区域中。你可以使用`git
    fetch`命令更新你的远程跟踪分支，查看有哪些更改可用，但你需要使用`git merge`命令将这些更改实际合并到本地仓库中。'
- en: 'Here are some common keywords that you might use when working with `git fetch`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些你在使用`git fetch`时可能会用到的常见关键字：
- en: '`origin`: This is the default name for the remote repository that you cloned
    from. You can use `origin` to specify the remote repository that you want to fetch
    updates from. It’s also possible to change the default name and add multiple remote
    repositories.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`origin`：这是你从中克隆的远程仓库的默认名称。你可以使用`origin`来指定你想要从中获取更新的远程仓库。也可以更改默认名称并添加多个远程仓库。'
- en: '`main` or `master`: `master` is the name of the default branch in a Git repository.
    `main` is the new default name introduced in the GitHub platform.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main`或`master`：`master`是Git仓库中默认分支的名称。`main`是GitHub平台引入的新默认名称。'
- en: '`REMOTE_HEAD`: This is a special reference that points to the `head` commit
    of the branch on the remote repository. You can use `REMOTE_HEAD` to fetch updates
    for the branch that is currently checked out on the remote repository.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REMOTE_HEAD`：这是一个特殊的引用，指向远程仓库中分支的`head`提交。你可以使用`REMOTE_HEAD`来获取远程仓库当前检出的分支的更新。'
- en: '`HEAD`: This is a special reference that points to the `head` commit of the
    current branch in your local repository.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HEAD`：这是一个特殊的引用，指向当前分支在本地仓库中的`head`提交。'
- en: 'Here is an example of using `git fetch` to update the main branch on the `origin`
    repository:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用`git fetch`更新`origin`仓库中`main`分支的一个示例：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will download updates for the `master` branch on the `origin` repository
    and store them in the `origin/master` remote-tracking branch.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为`origin`仓库中的`master`分支下载更新，并将其存储在`origin/master`远程跟踪分支中。
- en: 'You can then use the `git merge` command to merge the updates into your local
    repository:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以使用`git merge`命令将更新合并到本地仓库中：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will incorporate the updates from the `origin/master` remote-tracking branch
    into your local `master` branch. In this case, we do not have anything to be merged.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把`origin/master`远程跟踪分支的更新合并到你的本地`master`分支中。在这种情况下，我们没有需要合并的内容。
- en: 'Alternatively, you can use the `git pull` command to accomplish both steps
    in a single command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以使用`git pull`命令将这两个步骤合并为一个命令来执行：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will fetch the updates from the `origin` repository and merge them into
    your local repository unless you’ve configured your Git client, as we suggested
    at the beginning of this chapter—in this case, Git will try to rebase against
    the `main` branch in a remote repository.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从`origin`仓库获取更新，并将它们合并到本地仓库中，除非你已经按照本章开头的建议配置了Git客户端——在这种情况下，Git将尝试在远程仓库的`main`分支上进行变基。
- en: '`git rebase` and `git merge` are commands that are both used to integrate changes
    from one branch into another branch. However, they work in slightly different
    ways and have different implications for your repository.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`git rebase`和`git merge`是用于将一个分支的更改合并到另一个分支中的命令。然而，它们的工作方式略有不同，对你的仓库也有不同的影响。'
- en: '`git rebase` is a command that is used to apply a series of commits from one
    branch into another branch. When you run `git rebase`, it looks at commits that
    are present in the target branch but not in the source branch, and applies them
    one by one to the source branch. This has the effect of *replaying* the commits
    from the source branch on top of the target branch.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`git rebase`是一个用于将一个分支的一系列提交应用到另一个分支的命令。当你运行`git rebase`时，它会查看目标分支中有而源分支中没有的提交，并将它们逐个应用到源分支。这种操作的效果是*重新播放*源分支上的提交，并将其应用到目标分支之上。'
- en: 'For example, imagine that you have two branches in your repository: `main`
    and `develop`. `main` represents the main development branch, and `develop` represents
    a feature that you are working on. If you make several commits to the `develop`
    branch and then run `git rebase main`, Git will apply those commits to the `main`
    branch one by one, as if you had made them directly on the `main` branch.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你在代码库中有两个分支：`main`和`develop`。`main`代表主开发分支，`develop`代表你正在处理的某个功能。如果你对`develop`分支进行几次提交，然后运行`git
    rebase main`，Git会将这些提交一个接一个地应用到`main`分支，就好像你直接在`main`分支上做了这些提交一样。
- en: '`git merge`, however, is a command that is used to combine changes from one
    branch into another branch. When you run `git merge`, it looks at changes that
    are present in the source branch and applies them to the target branch in a single
    commit. This has the effect of creating a new commit on the target branch that
    incorporates all changes from the source branch.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`git merge`是一个用于将一个分支的更改合并到另一个分支的命令。当你运行`git merge`时，它会查看源分支中的更改，并将它们以单个提交的形式应用到目标分支。这种操作的效果是，在目标分支上创建一个新的提交，将源分支中的所有更改合并进来。
- en: 'For example, you have the same two branches as in the rebase example: `main`
    and `develop`. If you make several commits to the `develop` branch and then run
    `git merge develop`, Git will create a new commit on the `main` branch that incorporates
    all of the changes from the `develop` branch.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你有与rebase示例中相同的两个分支：`main`和`develop`。如果你对`develop`分支进行几次提交，然后运行`git merge
    develop`，Git会在`main`分支上创建一个新的提交，将`develop`分支中的所有更改合并进来。
- en: Both `git rebase` and `git merge` are useful tools for integrating changes from
    one branch into another, but they have different implications for your repository.
    `git rebase` keeps a linear history and avoids unnecessary additional (merge)
    commits, but it can also cause conflicts if the target branch has been modified
    since the source branch was created.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`git rebase`和`git merge`都是将一个分支的更改合并到另一个分支的有用工具，但它们对代码库有不同的影响。`git rebase`保持线性历史，并避免不必要的额外（合并）提交，但如果目标分支自源分支创建以来已有修改，它也可能会引发冲突。'
- en: '`git merge` is a more straightforward way to combine changes, but it can create
    a lot of merge commits, which can make the history of the repository more difficult
    to read, even with graphical tools.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`git merge`是合并更改的更直接方式，但它可能会创建许多合并提交，这会使得代码库的历史记录变得更加难以阅读，即使使用图形化工具也一样。'
- en: Before merging or rebasing our local repository against a remote version of
    it, it’s useful to check what the differences are between the two. For that purpose,
    we have the `git` `diff` command.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在合并或将本地代码库与远程版本进行rebase之前，检查两者之间的差异是很有用的。为此，我们可以使用`git` `diff`命令。
- en: What’s the git diff command?
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是git diff命令？
- en: The `git diff` command is used to compare changes that have been made to a repository.
    It shows the differences between two versions of a file or between two branches
    in the repository (local or remote).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`git diff`命令用于比较对代码库所做的更改。它显示文件的两个版本或代码库中两个分支（本地或远程）之间的差异。'
- en: Here are some common uses of the `git` `diff` command.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`git` `diff`命令的一些常见用法。
- en: 'Compare the differences between the current state of a file and the most recent
    commit:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 比较文件当前状态和最新提交之间的差异：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This will show the differences between the current state of the file and the
    version that was last committed.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示文件当前状态与最后一次提交的版本之间的差异。
- en: 'Compare the differences between two commits:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 比较两个提交之间的差异：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will show the differences between the two commits you’ve provided.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示你提供的两个提交之间的差异。
- en: 'Compare the differences between a branch and its upstream branch:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 比较一个分支和其上游分支之间的差异：
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This will show the differences between the specified branch and its upstream
    counterpart branch.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示指定分支与其上游对应分支之间的差异。
- en: 'Compare the differences between the staging area and the most recent commit:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 比较暂存区与最新提交之间的差异：
- en: '[PRE19]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This will show the differences between changes that have been added to the staging
    area and the most recent commit.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示已添加到暂存区与最新提交之间的差异。
- en: 'If you’ve already added some files to be committed but want to double-check
    before creating a commit, you can use the following command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经添加了一些文件准备提交，但在创建提交之前想再次确认，可以使用以下命令：
- en: '[PRE20]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will show you all the changes to files you’ve performed the `git add` command
    on.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示你执行了`git add`命令的所有文件的更改。
- en: 'To compare local and remote branches of the same repository, you will need
    to refer to the remote branch, which can be done by executing `git diff`:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要比较同一仓库的本地和远程分支，你需要引用远程分支，可以通过执行`git diff`来实现：
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`origin/main` refers to a remote branch where the remote repository is named
    as an “origin.”'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`origin/main`指的是一个远程分支，其中远程仓库被命名为“origin”。'
- en: '`git diff` is useful for understanding what changed in the Git repository and
    how those changes will be incorporated when you commit them. You can use the various
    options and arguments of the `git diff` command to specify versions of the files
    or branches you want to compare.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`git diff`对于理解Git仓库中的变化以及这些变化如何在提交时被合并非常有用。你可以使用`git diff`命令的各种选项和参数来指定要比较的文件版本或分支。'
- en: 'Since we’ve covered comparing changes in your repository, there’s one particular
    case where this is a highly useful skill to have: solving conflicts in your repository
    while rebasing or merging your changes.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经讨论了如何比较仓库中的更改，这里有一个特别的场景，这项技能非常有用：在重新基准（rebase）或合并（merge）更改时解决仓库中的冲突。
- en: Viewing the commit history
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看提交历史
- en: Git keeps a record of every commit made to a repository, and you can view the
    commit history using the `git log` command. This displays a list of all commits
    in the repository, along with their commit messages and the date they were made.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Git会记录每一次对仓库进行的提交，你可以使用`git log`命令查看提交历史。这将显示仓库中所有提交的列表，包括提交信息和提交日期。
- en: 'Some common use cases for the `git log` command include the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`git log`命令的常见用法包括以下几种：'
- en: '`git log` to view the entire commit history of a repository, including changes
    that have been made and the reasons for those changes. This can be helpful when
    you are working on a project and need to understand how it has evolved over time.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`git log`查看仓库的完整提交历史，包括已做的更改及这些更改的原因。当你在一个项目中工作并且需要理解它是如何随着时间演变时，这非常有帮助。
- en: '`git log` to view the commit history of the affected files and see which commit
    introduced the bug.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`git log`查看受影响文件的提交历史，并查看哪个提交引入了这个bug。
- en: '`git log` to view the history of the affected files and see what changes might
    have caused the issue.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`git log`查看受影响文件的历史，并查看哪些更改可能导致了问题。
- en: You can use a variety of options with `git log` to customize its output and
    filter commits that are displayed. For example, you can use the `--author` option
    to display only commits made by a specific person or the `--since` option to display
    only commits made in the last month.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用多种选项配合`git log`来定制其输出并筛选显示的提交。例如，你可以使用`--author`选项仅显示由特定人员提交的内容，或者使用`--since`选项仅显示过去一个月内的提交。
- en: Here are some examples of using the `git` `log` command.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些使用`git log`命令的示例。
- en: 'To display the commit history for the current repository, invoke a `git` `log`
    command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示当前仓库的提交历史，请调用`git log`命令：
- en: '[PRE22]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You can check the commit history for a specific file by running the following
    command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令查看特定文件的提交历史：
- en: '[PRE23]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'With this command, you can display the commit history for a specific branch:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此命令，你可以显示特定分支的提交历史：
- en: '[PRE24]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This will display the commit history for the specified branch, showing only
    the commits that were made on that branch.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示指定分支的提交历史，仅显示该分支上的提交。
- en: 'You can display the commit history for a range of commits with this command:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用此命令显示一段提交范围内的提交历史：
- en: '[PRE25]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This will display the commit history for a range of commits between the `hash1`
    commit ID and the `hash2` commit ID, showing only the commits that occurred in
    that range.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示`hash1`提交ID和`hash2`提交ID之间的提交历史，仅显示发生在该范围内的提交。
- en: '`git log --oneline` will display the commit history in a compact format, showing
    only the commit hash and a message for each commit:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`git log --oneline`将以紧凑的格式显示提交历史，仅显示每个提交的提交哈希值和消息：'
- en: '[PRE26]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'With this command, you can display the commit history with diffs:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此命令，你可以显示包含差异的提交历史：
- en: '[PRE27]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This will display the commit history, along with the diffs for each commit,
    showing the changes that were made in each commit.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示提交历史，并展示每个提交的差异，显示每个提交中所做的更改。
- en: These are just a few examples of how you can use the `git log` command. You
    can find more information about the available options in the Git documentation.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是你可以使用`git log`命令的一些示例。你可以在 Git 文档中找到更多关于可用选项的信息。
- en: In the next section, we are going to look into shortening our Git history before
    merging our changes back to the `main` branch. This is useful if we have a very
    long commit history in our local development branch.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将探讨在将更改合并回`main`分支之前如何缩短我们的 Git 历史记录。如果我们在本地开发分支中有很长的提交历史，这会非常有用。
- en: Branching
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分支管理
- en: '`git branch` and `git switch` are two commands that are used to manage branches
    in a Git repository.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`git branch`和`git switch`是两个用于管理 Git 仓库中分支的命令。'
- en: '`git branch` is a command that is used to create, list, or delete branches
    in a repository. You can use it to create a new branch by specifying the name
    of the branch as an argument, like so:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`git branch`是一个用于创建、列出或删除仓库中分支的命令。你可以通过指定分支名称作为参数来创建一个新的分支，像这样：'
- en: '[PRE28]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This will create a new branch called `new-branch` that is based on the current
    branch.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`new-branch`的新分支，该分支基于当前分支。
- en: 'You can use the `git branch` command with the `-a` option to list all branches
    in the repository, including both local branches and remote-tracking branches:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`git branch`命令配合`-a`选项列出仓库中的所有分支，包括本地分支和远程跟踪分支：
- en: '[PRE29]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You can use the `git branch` command with the `-d` option to delete a branch,
    as in the following example:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`git branch`命令配合`-d`选项删除一个分支，示例如下：
- en: '[PRE30]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This will delete the `old branch` but only if it has been already fully merged
    into the upstream branch. If you wish to remove this branch, you can add a `--force`
    option or use the `-D` option, which is an alias to the `--delete --force` Git
    branch.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这将删除`old branch`，但仅在它已经完全合并到上游分支的情况下。如果你希望删除此分支，可以添加`--force`选项，或使用`-D`选项，它是`--delete
    --force` Git 分支的别名。
- en: 'Finally, to remove a remote branch, we will need to use the `git push` command
    instead:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要删除一个远程分支，我们需要使用`git push`命令：
- en: '[PRE31]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This is a destructive command and can’t be undone, so you should act with caution
    when using it.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个具有破坏性的命令，无法撤销，因此在使用时应该谨慎操作。
- en: '`git switch` is a command that is used to switch between branches in a repository.
    You can use it to switch to a different branch by specifying the name of the branch
    as an argument, like so:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`git switch`是一个用于在仓库中切换分支的命令。你可以通过指定分支名称作为参数来切换到不同的分支，像这样：'
- en: '[PRE32]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This will switch to the `new-branch` branch and make it the current branch.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这将切换到`new-branch`分支，并将其设置为当前分支。
- en: 'Both `git branch` and `git switch` commands allow you to create new branches,
    list available branches, and switch between branches as needed. In the next section,
    we are going to introduce ways of working with Git, called workflows: `git workflow`
    and `github workflow`.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`git branch`和`git switch`命令都允许你创建新分支、列出可用分支，并根据需要在分支之间切换。在接下来的部分，我们将介绍两种与 Git
    工作相关的方法，称为工作流：`git workflow`和`github workflow`。'
- en: Squashing commits using an interactive rebase
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用交互式变基合并提交
- en: 'To squash commits using `git rebase`, you first need to determine the range
    of commits that you want to squash. This is typically done by specifying the commit
    hash of the first commit in the range and the commit hash of the last commit in
    the range. For example, if you want to squash the last three commits in your repository,
    you could use the following command:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`git rebase`压缩提交，你首先需要确定你想要压缩的提交范围。通常通过指定范围内第一个提交的哈希值和最后一个提交的哈希值来完成此操作。例如，如果你想压缩仓库中的最后三个提交，可以使用以下命令：
- en: '[PRE33]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This will open an editor window showing a list of the last three commits, along
    with some instructions. Each commit is represented by a line in the file, and
    the line begins with the word `pick`. To squash a commit, you need to change the
    word `pick` to `squash` or `s`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个编辑器窗口，显示最近三次提交的列表，并附带一些说明。每个提交在文件中占据一行，行首是`pick`。要压缩某个提交，你需要将`pick`改为`squash`或`s`。
- en: 'Here is an example of what the file might look like:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是文件可能的示例：
- en: '[PRE34]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'To squash the second and third commits into the first commit, you would change
    the file to look like this:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 若要将第二个和第三个提交压缩到第一个提交中，你需要将文件更改为如下所示：
- en: '[PRE35]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: After making the changes, you can save and close the file. Git will then apply
    the changes and present you with another editor window, where you can enter a
    new commit message for the combined commit.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在做出更改后，你可以保存并关闭文件。Git将应用这些更改，并向你展示另一个编辑器窗口，你可以在此输入合并提交的新提交消息。
- en: It is important to note that squashing commits using `git rebase` can be a destructive
    operation, as it permanently alters the commit history of the repository. It is
    generally recommended to use `git rebase` with caution and to make sure that you
    have a backup of your repository before using it.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，使用`git rebase`压缩提交可能是一个具有破坏性的操作，因为它会永久改变仓库的提交历史。一般建议在使用`git rebase`时小心，并确保在使用前有仓库的备份。
- en: If you want to undo changes made by a `git rebase` operation, you can use the
    `git rebase --abort` command to discard the changes and restore the repository
    to its previous state.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想撤销`git rebase`操作所做的更改，可以使用`git rebase --abort`命令来丢弃这些更改，并将仓库恢复到先前的状态。
- en: After successfully squashing commits, you will be able to push it back to a
    remote repository, but only by using the `git push --force` command, which will
    ignore the fact that you just rewrote a commit history of this branch. This is
    a destructive operation and can’t be undone, so again, please double- and triple-check
    before pushing changes with the `--``force` option.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功压缩提交后，你可以将其推送到远程仓库，但必须使用`git push --force`命令，这将忽略你刚才重写的提交历史。这是一个破坏性操作，无法撤销，因此在使用`--force`选项推送更改前，请务必进行多次确认。
- en: Solving Git conflicts
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决Git冲突
- en: Conflicts can occur when you are trying to merge or rebase branches that have
    conflicting changes. This can happen when the same lines of code have been modified
    in both branches, and Git is unable to automatically resolve the conflicts.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 当你尝试合并或变基（rebase）存在冲突更改的分支时，可能会发生冲突。这通常是因为两个分支中相同的代码行都有修改，而Git无法自动解决这些冲突。
- en: When a conflict occurs during a merge or rebase, Git will mark the conflicting
    lines in the affected files, and you will need to manually resolve the conflicts
    before you can continue.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当在合并或变基过程中发生冲突时，Git会在受影响的文件中标记冲突的行，你需要手动解决这些冲突才能继续操作。
- en: Here is an example of how you might resolve a conflict during a merge.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个在合并过程中解决冲突的示例。
- en: 'Run `git merge` to merge the two branches:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`git merge`来合并两个分支：
- en: '[PRE36]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Git will detect any conflicts and mark the affected lines in the affected files.
    The conflicting lines will be surrounded by `<<<<<<<`, `=======`, and `>>>>>>>`
    markers:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Git将检测到任何冲突，并标记受影响文件中的冲突行。冲突的行将被`<<<<<<<`、`=======`和`>>>>>>>`标记包围：
- en: '[PRE37]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Open the affected files and resolve the conflicts by choosing which version
    of the code you want to keep. You can keep either the version from the current
    branch (`HEAD`) or the version from the branch that you are merging (`branch-to-merge`):'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 打开受影响的文件并解决冲突，选择你想保留的代码版本。你可以保留当前分支（`HEAD`）的版本，或是你正在合并的分支（`branch-to-merge`）的版本：
- en: '[PRE38]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Stage the resolved files using `git add`:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`git add`暂存已解决的文件：
- en: '[PRE39]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Continue the merge or rebase by running `git rebase --continue` or `git` `merge
    --continue`:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 继续合并或变基操作，运行`git rebase --continue`或`git merge --continue`：
- en: '[PRE40]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Resolving conflicts during a merge or rebase can be a tedious process, but it
    is an important part of working with Git. By carefully reviewing conflicting changes
    and choosing the correct version of the code, you can ensure that your repository
    remains consistent and free of errors.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在合并或变基过程中解决冲突可能是一个繁琐的过程，但它是使用Git时非常重要的一部分。通过仔细审查冲突的更改并选择正确的代码版本，你可以确保仓库的一致性并避免错误。
- en: It is also a good idea to regularly synchronize your local copy of the repository
    with the source branch before merging or rebasing, in case you encounter conflicts
    or other issues that you are unable to resolve. This can help you recover from
    any mistakes or accidents that might occur during the process.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，定期将本地仓库与源分支同步，在合并或变基之前是一个好主意，以防您遇到无法解决的冲突或其他问题。这有助于您在过程中恢复任何可能发生的错误或意外。
- en: There are also amazing graphical tools to solve conflicts in a bit more interactive
    manner. If you’re using an `KDiff3`, `WinMerge`, `Meld`, or one of the other options
    out there.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些非常棒的图形化工具，可以以更互动的方式解决冲突。如果您使用的是`KDiff3`、`WinMerge`、`Meld`或其他类似工具。
- en: In this section, we have explained branches, repositories, local and remote
    repositories, merging, and rebasing. Next, we will look into browsing your repository’s
    historical changes and modifying it.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已解释了分支、仓库、本地和远程仓库、合并和变基的概念。接下来，我们将研究浏览仓库的历史更改并进行修改。
- en: GitFlow and GitHub Flow
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitFlow 和 GitHub Flow
- en: '`develop` and `master`. The `develop` branch is used to develop new features,
    while the `master` branch represents the current production-ready state of the
    code base. There are also several supporting branches, such as `feature`, `release`,
    and `hotfix`, which are used to manage the process of developing, releasing, and
    maintaining software.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`develop`和`master`。`develop`分支用于开发新特性，而`master`分支表示当前的生产就绪状态。还有几个支持分支，如`feature`、`release`和`hotfix`，用于管理软件的开发、发布和维护过程。'
- en: '`master` branch using pull requests. There is no separate `develop` branch,
    and the `master` branch is always considered to be the current production-ready
    version of the code base.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 使用拉取请求（pull requests）向`master`分支进行合并。没有单独的`develop`分支，`master`分支始终被认为是当前的生产就绪版本。
- en: Another branching model that is very similar is **GitLab Flow**. It’s used to
    manage the development and maintenance of software projects, and it is specifically
    designed to be used with GitLab, a web-based Git repository manager that provides
    **source code management** (**SCM**), **continuous integration** (**CI**), and
    more.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种非常相似的分支模型是**GitLab Flow**。它用于管理软件项目的开发和维护，专门设计用于与 GitLab 一起使用，GitLab 是一个基于
    Web 的 Git 仓库管理工具，提供**源代码管理**（**SCM**）、**持续集成**（**CI**）等功能。
- en: In the GitLab Flow model, all development is done in branches, and new features
    are merged into the `master` branch using merge requests. There is no separate
    `develop` branch, and the `master` branch is always considered to be the current
    production-ready version of the code base. However, GitLab Flow does include some
    additional features and tools, such as the ability to use protected branches and
    merge request approvals, which can help teams enforce development best practices
    and maintain a high level of code quality.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitLab Flow 模型中，所有开发都在分支中进行，新特性通过合并请求合并到`master`分支。没有单独的`develop`分支，`master`分支始终被认为是当前的生产就绪版本。然而，GitLab
    Flow 确实包含一些附加功能和工具，如使用受保护分支和合并请求审批的功能，这可以帮助团队执行开发最佳实践并保持高水平的代码质量。
- en: In the next section, we’ll look into configuring Git to our needs using configuration
    files.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将深入研究如何使用配置文件根据我们的需求来配置 Git。
- en: Global git configuration – .gitconfig
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全局 Git 配置 - .gitconfig
- en: The `.gitconfig` file is a configuration file that is used to set global options
    for Git. It is typically located in the user’s `home` directory and can be edited
    using any text editor.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`.gitconfig`文件是一个用于设置 Git 全局选项的配置文件。它通常位于用户的`home`目录中，可以使用任何文本编辑器进行编辑。'
- en: 'Some common options that you may want to include in your `.gitconfig` are as
    follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想在`.gitconfig`中包含的一些常见选项如下：
- en: '`user.name` and `user.email`: These options specify the name and email address
    that will be associated with your Git commits. It is important to set these options
    correctly, as they will be used to identify you as the author of the commits.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user.name` 和 `user.email`：这些选项指定将与您的 Git 提交关联的用户名和电子邮件地址。正确设置这些选项非常重要，因为它们将用于识别您作为提交的作者。'
- en: '`color.ui`: This option enables or disables colored output in Git. You can
    set this option to `auto` to enable colored output when Git is run in a terminal
    that supports it or to `true` or `false` to always enable or disable colored output,
    respectively.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color.ui`：此选项启用或禁用 Git 中的彩色输出。您可以将此选项设置为`auto`，以便在 Git 在支持彩色输出的终端中运行时启用彩色输出，或者将其设置为`true`或`false`，分别表示始终启用或禁用彩色输出。'
- en: '`core.editor`: This option specifies the text editor that Git will use when
    it needs you to enter a commit message or other input. You can set this option
    to the command for your preferred text editor, such as `nano`, `vi`, or `emacs`.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core.editor`：此选项指定Git在需要你输入提交信息或其他输入时使用的文本编辑器。你可以将此选项设置为你喜欢的文本编辑器命令，如`nano`、`vi`或`emacs`。'
- en: '`merge.tool`: This option specifies the tool that Git will use to resolve conflicts
    when merging branches. You can set this option to the command for a visual merge
    tool, such as `kdiff3`, `meld`, or `tkdiff`.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`merge.tool`：此选项指定Git在合并分支时解决冲突的工具。你可以将此选项设置为可视化合并工具的命令，如`kdiff3`、`meld`或`tkdiff`。'
- en: '`push.default`: This option specifies the behavior of the `git push` command
    when you do not specify a branch. You can set this option to `simple`, which pushes
    the current branch to the same name on the remote, or upstream, branch, which
    pushes the current branch to the remote branch that it is tracking.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`push.default`：此选项指定当你没有指定分支时，`git push`命令的行为。你可以将此选项设置为`simple`，它会将当前分支推送到远程的同名分支，或者设置为`upstream`，它会将当前分支推送到它正在跟踪的远程分支。'
- en: '`alias.*`: These options allow you to create aliases for Git commands. For
    example, you could set `alias.st` to `status`, which would allow you to use the
    `git st` command instead of `git status`.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alias.*`：这些选项允许你为Git命令创建别名。例如，你可以将`alias.st`设置为`status`，这将允许你使用`git st`命令代替`git
    status`。'
- en: 'The following is an example `.gitconfig` file making use of the preceding options,
    with some comments after every section:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例`.gitconfig`文件，使用了前面提到的选项，并在每个部分后面添加了注释：
- en: '[PRE41]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `user` section defines the user and email that will be used as the author
    for every commit. The `color` section enables colors for readability purposes.
    `ui = always` will enable colors always for all output types (machine consumption
    intended or not). Other possible options are `true`, `auto`, `false`, and `never`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`user`部分定义了每个提交的作者用户名和电子邮件。`color`部分启用颜色，以便提高可读性。`ui = always`将始终启用颜色，适用于所有输出类型（无论是机器消费还是其他）。其他可能的选项有`true`、`auto`、`false`和`never`。'
- en: The `alias` section lets you simplify some long commands while working with
    Git. It will create an alias defined on the left-hand side for a Git command,
    which you can add after the equals sign.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`alias`部分允许你在使用Git时简化一些长命令。它将在左侧定义一个别名，用于Git命令，你可以将它添加到等号后面。'
- en: 'Here’s an example:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例：
- en: '[PRE42]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We’re defining the `ci` command as `commit`. After adding this to your `.gitconfig`
    file in your home directory, you will get another Git command: `git ci`, which
    will effectively run the `git commit` command. You can add aliases for all common
    Git commands you use daily. The following command is telling Git where to find
    a default `.``gitignore` file:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`ci`命令定义为`commit`。在将此内容添加到你的`.gitconfig`文件中后，你将获得另一个Git命令：`git ci`，它实际上会执行`git
    commit`命令。你可以为日常使用的常见Git命令添加别名。以下命令告诉Git去哪里查找默认的`.gitignore`文件：
- en: '[PRE43]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The following `push` setting is changing the default push behavior, which will
    require you to specify to which remote branch you’re going to push your local
    branch:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的`push`设置更改了默认的推送行为，这将要求你指定要将本地分支推送到哪个远程分支：
- en: '[PRE44]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'By specifying the `current` option, we instruct Git to try to push the local
    branch to a remote branch with exactly the same name as the local branch. Other
    options are set out here:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定`current`选项，我们指示Git尝试将本地分支推送到一个与本地分支名称完全相同的远程分支。其他选项在这里列出：
- en: '`nothing`: Don’t try to push anything.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nothing`：不尝试推送任何内容。'
- en: '`matching`: Consider all branches remote and local with the same name to be
    a match and push all matches.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`matching`：将所有本地和远程名称相同的分支视为匹配并推送所有匹配的分支。'
- en: '`upstream`: Push the current branch to an upstream branch.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`upstream`：将当前分支推送到上游分支。'
- en: '`simple`: This is the default option. It will refuse to push to the upstream
    if the name of the local branch differs from the name of the remote upstream branch.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`simple`：这是默认选项。如果本地分支的名称与远程上游分支的名称不同，它将拒绝推送到上游。'
- en: 'When running the `git pull` command, Git will try to integrate remote commits
    into your local branch. By default, it will try to merge upstream, which will
    result in possibly unwanted merge commits. This will change the default behavior
    to `rebase`:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行`git pull`命令时，Git会尝试将远程提交合并到你的本地分支。默认情况下，它会尝试进行上游合并，这可能会导致不必要的合并提交。这将改变默认行为为`rebase`：
- en: '[PRE45]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: See the *Local versus remote Git repositories* section for more information.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参见 *本地与远程 Git 仓库* 部分。
- en: Ignoring some files using a .gitignore configuration file
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `.gitignore` 配置文件忽略某些文件
- en: A `.gitignore` file is a configuration file that is used to tell Git which files
    or directories to ignore when tracking changes in a repository. This can be useful
    if you have files that are generated by your build process, are specific to your
    local environment, or are otherwise not relevant to the project and do not need
    to be tracked by Git.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`.gitignore` 文件是一个配置文件，用来告诉 Git 在跟踪仓库中的更改时，哪些文件或目录需要被忽略。如果你有一些由构建过程生成的文件，或者是特定于本地环境的文件，或者是与项目无关且不需要被
    Git 跟踪的文件，这个功能会非常有用。'
- en: 'Here are some examples of the types of files and directories that you might
    include in your `.``gitignore` file:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些你可能会在 `.gitignore` 文件中包含的文件和目录类型的示例：
- en: '`*.tmp`, `*.bak`, or `*.``swp` files.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*.tmp`、`*.bak` 或 `*.swp` 文件。'
- en: '`*.exe`, `*.jar`, `*.war` files and `bin/`, `obj/`, or `dist/` directories.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*.exe`、`*.jar`、`*.war` 文件，以及 `bin/`、`obj/` 或 `dist/` 目录。'
- en: '`node_modules/` directory if you are using `npm`, or the `vendor/` directory
    if you are using Composer.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你使用 `npm`，则为 `node_modules/` 目录；如果你使用 Composer，则为 `vendor/` 目录。
- en: '`idea/` directory if you are using JetBrains IDEs, or the `.vscode/` directory
    if you are using Visual Studio Code.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你使用的是 JetBrains IDEs，则为 `idea/` 目录；如果你使用的是 Visual Studio Code，则为 `.vscode/`
    目录。
- en: '**Sensitive information**: Files containing passwords or API keys. We strongly
    advise taking special care to ignore those files to prevent them from being committed
    to the repository. This will save you a lot of headaches and unnecessary risk.
    These days, bots such as GitHub’s *Dependabot* will raise an alert (or even block
    the commit) if some of those sensitive files get into your repositories, but it’s
    better to catch these earlier in the development process.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**敏感信息**：包含密码或 API 密钥的文件。我们强烈建议特别小心忽略这些文件，以防它们被提交到仓库中。这将为你避免许多麻烦和不必要的风险。现在，像
    GitHub 的 *Dependabot* 这样的机器人会在这些敏感文件进入你的仓库时发出警报（甚至阻止提交），但最好还是在开发过程早期就避免这些问题。'
- en: 'Here is an example `.gitignore` file that ignores some common types of files:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例 `.gitignore` 文件，它会忽略一些常见类型的文件：
- en: '[PRE46]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: It’s also possible to use wildcards and `.gitignore` files inside directories
    where you need a special rule that it is not desired to be there globally.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用通配符和 `.gitignore` 文件来处理某些目录中需要特殊规则的情况，而这些规则不希望在全局范围内生效。
- en: Finally, you can put your site-wide `.gitignore` file inside your home directory
    to make sure you won’t commit any files needed for your local development.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以将你全站范围的 `.gitignore` 文件放入你的主目录，以确保不会提交任何本地开发所需的文件。
- en: Summary
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Git is such a powerful tool that it’s hard to fit all its features into a single
    book. In this chapter, we’ve learned the most basic tasks you will need to know
    in your day-to-day work as a DevOps engineer, and you are well equipped to handle
    most of the issues you will encounter.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是一个非常强大的工具，很难将其所有功能浓缩到一本书中。在这一章中，我们学习了作为 DevOps 工程师在日常工作中最基本的任务，掌握了处理大多数问题所需的技能。
- en: In the next chapter, we will focus on Docker and containerization, where we
    will put all the skills you’ve gained so far to the test.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将重点介绍 Docker 和容器化，并将在那里将你迄今为止获得的所有技能付诸实践。
