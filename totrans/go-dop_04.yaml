- en: 'Chapter 3: Setting Up Your Environment'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章：设置你的开发环境
- en: In this chapter, we are going to talk about setting up your **Go** environment
    for use in *our future chapters* and for developing your own Go software in the
    future.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将讨论如何设置**Go**开发环境，以便在*我们未来的章节*中使用，并为未来开发你自己的 Go 软件做准备。
- en: 'We''re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将覆盖以下主要内容：
- en: Installing Go on your machine
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的计算机上安装 Go
- en: Building code locally
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地构建代码
- en: Before we begin, let's have a brief walk-through of the technical requirements
    you need to be aware of before reading on.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，先简要介绍一下你需要了解的技术要求，然后再继续阅读。
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The only technical requirements for this chapter are as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节的唯一技术要求如下：
- en: A computer with an OS supported by the Go tools
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台 Go 工具支持的操作系统的计算机
- en: An internet connection and web browser to download the Go tools
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要互联网连接和网页浏览器来下载 Go 工具
- en: Installing Go on your machine
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的计算机上安装 Go
- en: The **Go compiler** and toolset can be found at [https://golang.org/dl/](https://golang.org/dl/).
    Here, you will find releases for the macOS, Windows, and Linux platforms for a
    multitude of computing platforms.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**Go 编译器**和工具集可以在 [https://golang.org/dl/](https://golang.org/dl/) 上找到。在这里，你可以找到适用于
    macOS、Windows 和 Linux 平台的多个计算平台的版本。'
- en: The most common platform is the **AMD64** architecture, which should be used
    for any x86 system. For macOS, it is important to note that if you are using a
    machine with a non-Intel-based CPU, such as an Apple M1, you will want to use
    the **arm64 builds**.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的平台是**AMD64**架构，适用于任何 x86 系统。对于 macOS，重要的是要注意，如果你使用的是非 Intel CPU 的机器，如 Apple
    M1，你需要使用**arm64 版本**。
- en: In the next sections, we will describe methods of installing Go for the major
    OSs. You should skip to the OS you plan to install on.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将描述如何为主要操作系统安装 Go。你应该跳到你打算安装的操作系统部分。
- en: macOS installation using the package installer
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用安装包安装 macOS
- en: The easiest way to install the Go tooling for macOS is to use a `.pkg` installer.
    The download page offers `.tar.gz` builds and `.pkg`. With the tarballs, you must
    unpack the files in a location and add that location to your path. It also means
    you will have to manually handle upgrades. You should only do this if you have
    advanced needs.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Go 工具集的最简单方法是使用 `.pkg` 安装包。下载页面提供了 `.tar.gz` 构建包和 `.pkg` 安装包。使用 tar 包时，你必须将文件解压到一个位置，并将该位置添加到路径中。这样也意味着你需要手动处理升级。只有在有高级需求时，你才应该选择这种方式。
- en: The `.pkg` file makes installation and upgrading simple. Simply double-click
    the `.pkg` file and follow the onscreen prompts to install. This may require entering
    in your credentials at a prompt.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`.pkg` 文件使得安装和升级变得简单。只需双击 `.pkg` 文件并按照屏幕上的提示进行安装。安装过程中可能需要你输入凭据。'
- en: 'Once installation is finished, open the `Applications/Utilities/terminal.app`
    terminal and type `go version`, which should yield something similar to the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，打开 `Applications/Utilities/terminal.app` 终端，并输入 `go version`，应该会显示类似以下内容：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that the **version output** will depend on the version of Go that you have
    downloaded and the platform you are running on.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，**版本输出**将取决于你下载的 Go 版本和你所运行的平台。
- en: macOS installation via Homebrew
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过 Homebrew 安装 macOS
- en: Many developers on macOS prefer to use the popular **Homebrew** ([https://brew.sh](https://brew.sh))
    to install Go. If you are a Homebrew user, there is a simple two-step process
    for installing Go, as explained in the following sections.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 macOS 开发者更喜欢使用流行的**Homebrew** ([https://brew.sh](https://brew.sh)) 来安装 Go。如果你是
    Homebrew 用户，安装 Go 只需要简单的两步过程，具体内容将在以下章节中进行说明。
- en: Installing Xcode
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Xcode
- en: 'Go has some reliance on Apple''s **Xcode**, and it needs to be installed in
    order to work correctly. To see whether you have Xcode installed, type the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Go 依赖于 Apple 的**Xcode**，需要安装 Xcode 才能正常工作。要查看是否已经安装 Xcode，请输入以下命令：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This should output something like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于以下内容：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If it gives an error, you need to install Xcode by following this link on the
    App Store: [https://itunes.apple.com/us/app/xcode/id497799835?mt=12&ign-mpt=uo%3D2](https://itunes.apple.com/us/app/xcode/id497799835?mt=12&ign-mpt=uo%3D2).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现错误，你需要通过访问此链接在 App Store 中安装 Xcode：[https://itunes.apple.com/us/app/xcode/id497799835?mt=12&ign-mpt=uo%3D2](https://itunes.apple.com/us/app/xcode/id497799835?mt=12&ign-mpt=uo%3D2)。
- en: 'Once installed, you can install the separate command-line tools with the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你可以通过以下命令安装单独的命令行工具：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, let's look at the next step.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下下一步。
- en: Homebrew update and Go installation
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Update Homebrew and install the latest Go tools with the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can verify the Go version with `$ go version`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at installation on Windows.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Windows installation using MSI
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Windows installation is similar to other Windows application installations using
    a **Microsoft Installer** (**MSI**) file. Simply download the MSI file and follow
    the onscreen instructions. By default, this will install the Go tooling at **Program
    Files** or **Program Files (x86)**.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: To verify that Go was installed correctly, click the *Start* menu, type `cmd`
    into the search box, and the Command Prompt shell should appear. Type `go version`,
    and it should display the installed version of Go.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at installation on Linux.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linux package management could be the subject of its own series of books and,
    as Linus points out, it is one of the reasons why Linux as a desktop system has
    failed so spectacularly.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Linux for development, chances are you have some knowledge
    on how to install packages for your distribution. As we can't cover all possible
    methods of installation on Linux, we are going to cover installation using `apt`,
    Snap, and via `tarball`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Linux installation via APT on Ubuntu
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**APT** is a package installation manager used in various distributions. Installing
    Go via APT is pretty straightforward.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'Update and upgrade APT to the latest version, as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Install the Go package as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, type `go version` into the terminal, and it should display the installed
    version of Go.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Linux installation via Snap on Ubuntu
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Snap** is a universal package manager meant to make the installation of a
    package easy across multiple distributions or versions by including all the necessary
    files in the package.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have Snap installed, you can simply use `snap info go` to locate a version
    of Go to install:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Screenshot showing the snap info go command output'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17626_03_001.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 – Screenshot showing the snap info go command output
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'You can choose to install the latest stable version of Go by typing the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, type `go version` into the terminal, and it should display the installed
    version of Go.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that you may receive a warning about the Go package being built on a revision
    of Snap with classic confinement. In that case, to install using Snap, you may
    need to append `–-classic` as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Linux installation via tarball
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to do this, you need to download the package for Linux and your platform.
    Our example will use `go1.16.5.linux-amd64.tar.gz`. You will notice that the name
    gives the Go version (*1.16.5*), the OS (Linux), and the architecture (*AMD64*).
    You will need to download the current version of Go and your architecture into
    a directory.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: The rest of these instructions will use the terminal.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to install our version into `/usr/local/go` and remove any previous
    installation. This can be achieved with the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, let''s add our directory to our `PATH` so that we can find our Go tools.
    This can be accomplished with the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将目录添加到 `PATH` 中，以便可以找到 Go 工具。这可以通过以下方式实现：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: With most shells, this change will not happen immediately. The easiest way to
    cause `PATH` to update is simply to open a new shell. You may also use the `source`
    command to reload your shell's profile if you know the name/location of your shell's
    profile – `source $HOME/.profile`, for example.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数 shell，变化不会立即生效。最简单的方式是打开一个新的 shell 来使 `PATH` 更新。你也可以使用 `source` 命令重新加载
    shell 的配置文件，前提是你知道配置文件的名称/路径——例如 `source $HOME/.profile`。
- en: 'To test if your `PATH` was updated correctly, type `go version`, which should
    yield the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试你的 `PATH` 是否已正确更新，请输入 `go version`，应返回如下信息：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: What about installing Go on other platforms?
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 那么在其他平台上安装 Go 呢？
- en: Other platforms
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他平台
- en: Go can certainly be installed on other platforms, such as **FreeBSD**, but those
    are not covered here. See the Go *installation documentation* for these other
    platforms.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Go 确实可以安装在其他平台上，比如**FreeBSD**，但这些内容不在本书范围内。请参阅 Go 的*安装文档*了解其他平台的安装方式。
- en: A note on Go compiler version compatibility
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于 Go 编译器版本兼容性的说明
- en: 'The Go project is governed by the Go compatibility promise: [https://golang.org/doc/go1compat](https://golang.org/doc/go1compat).
    The gist is that Go will be backward compatible unless there is a major semantic
    version number change (**1.x.x** to **2.x.x**). While you might hear people talk
    about Go 2.0, the authors have been very clear that they have no plans to leave
    version 1.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Go 项目由 Go 兼容性承诺管理：[https://golang.org/doc/go1compat](https://golang.org/doc/go1compat)。其核心是，除非有重大语义版本号变更（**1.x.x**
    到 **2.x.x**），否则 Go 将保持向后兼容。虽然你可能会听到人们谈论 Go 2.0，但作者们已经明确表示，他们没有计划跳过版本 1。
- en: This means software written for **Go 1.0.0** works in the latest **Go 1.17.5**
    version. This has been a major win for the Go community in stability. This book
    will be using Go 1.17.5 for its revision.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着为**Go 1.0.0**编写的软件在最新的**Go 1.17.5**版本中可以运行。这对于 Go 社区的稳定性来说是一个重大胜利。本书将使用
    Go 1.17.5 版本进行修订。
- en: By the end of this section, you should have installed the Go tooling and tested
    that the tooling is working for your OS of choice. In the next section, we will
    discuss how to build code on your machine.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节结束时，你应该已经安装了 Go 工具并测试了该工具是否适用于你选择的操作系统。接下来，我们将讨论如何在你的计算机上构建代码。
- en: Building code locally
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地构建代码
- en: The current Go ecosystem (Go 1.13 onward) and toolchain allow you to write Go
    code from any location in the filesystem. Most users choose to set up a local
    Git repository for their package(s) and develop within that directory.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的 Go 生态系统（Go 1.13 及以后的版本）和工具链允许你在文件系统的任何位置编写 Go 代码。大多数用户选择为其包设置本地 Git 仓库，并在该目录中进行开发。
- en: This is accomplished using Go modules that the Go team describes as *"a collection
    of Go packages stored in a file tree with a go.mod file at its root."* A Go module
    most often represents a GitHub repository, such as `github.com/user/repository`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过 Go 模块实现的，Go 团队将其描述为*“存储在文件树中的 Go 包集合，根目录有一个 go.mod 文件。”* Go 模块通常代表一个 GitHub
    仓库，例如 `github.com/user/repository`。
- en: Most Go developers will use the command line to move around the filesystem environment
    and for interacting with the Go toolchain. In this section, we will concentrate
    on using Unix commands for accessing the filesystem and using Go compiler tools.
    The Go compiler commands will be the same between each OS, but filesystem commands
    may not be, and the file paths may also differ, such as Windows using `\` instead
    of `/` as path separators.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Go 开发者会使用命令行在文件系统环境中移动，并与 Go 工具链进行交互。在本节中，我们将集中讨论如何使用 Unix 命令来访问文件系统以及使用
    Go 编译器工具。Go 编译器命令在各操作系统间是相同的，但文件系统命令可能不同，文件路径也可能不同，例如 Windows 使用 `\` 作为路径分隔符，而不是
    `/`。
- en: Creating a module directory and go.mod file
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模块目录和 go.mod 文件
- en: The directory can be anywhere on the filesystem you have access. `godev/` is
    a good directory name to use, and putting it in your home directory, which is
    OS-dependent, is a logical place to make it easy to find.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 该目录可以是文件系统中任何你可以访问的地方。`godev/` 是一个不错的目录名，并且将其放在你的主目录中（主目录因操作系统而异）是一个合理的选择，这样便于查找。
- en: 'Within that directory, I will create a new directory for my package. For this
    example, I will create a directory called `hello/` that will represent my Go module:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在该目录中，我将为我的包创建一个新目录。以这个示例为例，我将创建一个名为 `hello/` 的目录，表示我的 Go 模块：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To create our module, we simply need to create a `go.mod` file that contains
    our module name. Module names are typically the Git path, such as `github.com/johnsiilver/fs`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 创建我们的模块，我们只需要创建一个包含模块名的 `go.mod` 文件。模块名通常是 Git 路径，比如 `github.com/johnsiilver/fs`。
- en: 'If you have a GitHub repository that you wish to store this example in, you
    can substitute it in our command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个 GitHub 仓库，想把这个示例存储在其中，你可以在我们的命令中替换成你的仓库地址：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This `go.mod` file will contain a few key sections worth noting:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `go.mod` 文件将包含几个值得注意的关键部分：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The first line defines our module, which is the path to the root of the Git
    repository. The second defines the minimum version of Go that can be used to compile
    this module. Depending on what features you use, your module may be compatible
    with previous versions of Go, and you can modify this to have a lower version
    number.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行定义了我们的模块，这是指向 Git 仓库根目录的路径。第二行定义了可以用来编译此模块的 Go 最低版本。根据你使用的功能，模块可能兼容较早版本的
    Go，你可以修改此设置来使用较低版本的 Go。
- en: While this example will not have any third-party packages, it is worth noting
    that most `go.mod` files will have a *require* section that lists packages and
    their versions that your module imports.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个示例中没有任何第三方包，但值得注意的是，大多数 `go.mod` 文件都会有一个 *require* 部分，列出你模块所导入的包及其版本。
- en: Updating a module when adding dependencies
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加依赖时更新模块
- en: When adding a third-party package, your `go.mod` file will need to be modified
    to contain the dependency information. This would be a tedious task, but Go has
    you covered with the `go mod tidy` command.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当添加第三方包时，你的 `go.mod` 文件需要修改以包含依赖信息。虽然这会是一个繁琐的任务，但 Go 提供了 `go mod tidy` 命令来帮助你自动处理。
- en: Running `go mod tidy` will look at all your package imports and add them to
    your `go.mod` file automatically. Remember to run this after adding any external
    dependencies.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `go mod tidy` 会自动检查所有的包导入，并将它们添加到你的 `go.mod` 文件中。记得在添加任何外部依赖后运行此命令。
- en: Adding a hello world
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 hello world
- en: To learn how to compile and run Go code, we are going to create a *hello world*
    application. In Go, all Go source files end with the `.go` extension.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习如何编译和运行 Go 代码，我们将创建一个 *hello world* 应用程序。在 Go 中，所有的 Go 源文件都以 `.go` 后缀结尾。
- en: 'Create a file in the directory called `hello.go` using your favorite text editor
    and insert the following code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在目录中使用你喜欢的文本编辑器创建一个名为 `hello.go` 的文件，并插入以下代码：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Next, let's run our first program.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们运行我们的第一个程序。
- en: Running our first program
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行我们的第一个程序
- en: 'Once you have that file saved, let''s try compiling and running that code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你保存了这个文件，接下来我们来尝试编译并运行这段代码：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This compiled our source file and ran it as a binary. You may only use `go run`
    for a package called `main`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译我们的源文件并作为二进制运行。你只能在名为 `main` 的包中使用 `go run`。
- en: 'If we want to create a binary for this OS and architecture , we can simply
    run the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想为这个操作系统和架构创建一个二进制文件，我们只需运行以下命令：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: There is now a binary called `hello` that can be run on any OS/architecture
    of the same type. If our package was not called `main`, this would compile the
    package and emit any errors encountered, but it would not create a binary.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有一个名为 `hello` 的二进制文件，可以在相同类型的任何操作系统/架构上运行。如果我们的包不是叫做 `main`，这将编译该包并报告遇到的任何错误，但不会创建二进制文件。
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: You have now created your first Go module, initialized your first `go.mod` file,
    created a Go program, run the Go program with `go run`, and built a Go executable
    for your OS. This chapter has left you with the necessary skills to create a basic
    Go module and the basic knowledge of the Go command-line tool required to both
    run a Go package and build a Go program. These are used every day in the life
    of a Go developer.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经创建了你的第一个 Go 模块，初始化了第一个 `go.mod` 文件，创建了一个 Go 程序，使用 `go run` 运行了这个程序，并为你的操作系统构建了
    Go 可执行文件。本章让你掌握了创建基础 Go 模块所需的技能，以及使用 Go 命令行工具的基本知识，这些工具用于运行 Go 包和构建 Go 程序。Go 开发者在日常工作中都会用到这些技能。
- en: In the next chapter, we're going to cover the basics of the Go language, including
    how packages work, testing, and many more essentials.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将介绍 Go 语言的基础知识，包括包的工作方式、测试以及更多的基本内容。
