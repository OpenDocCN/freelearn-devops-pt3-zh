- en: 'Chapter 3: Setting Up Your Environment'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to talk about setting up your **Go** environment
    for use in *our future chapters* and for developing your own Go software in the
    future.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Go on your machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building code locally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we begin, let's have a brief walk-through of the technical requirements
    you need to be aware of before reading on.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The only technical requirements for this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A computer with an OS supported by the Go tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An internet connection and web browser to download the Go tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Go on your machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Go compiler** and toolset can be found at [https://golang.org/dl/](https://golang.org/dl/).
    Here, you will find releases for the macOS, Windows, and Linux platforms for a
    multitude of computing platforms.
  prefs: []
  type: TYPE_NORMAL
- en: The most common platform is the **AMD64** architecture, which should be used
    for any x86 system. For macOS, it is important to note that if you are using a
    machine with a non-Intel-based CPU, such as an Apple M1, you will want to use
    the **arm64 builds**.
  prefs: []
  type: TYPE_NORMAL
- en: In the next sections, we will describe methods of installing Go for the major
    OSs. You should skip to the OS you plan to install on.
  prefs: []
  type: TYPE_NORMAL
- en: macOS installation using the package installer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The easiest way to install the Go tooling for macOS is to use a `.pkg` installer.
    The download page offers `.tar.gz` builds and `.pkg`. With the tarballs, you must
    unpack the files in a location and add that location to your path. It also means
    you will have to manually handle upgrades. You should only do this if you have
    advanced needs.
  prefs: []
  type: TYPE_NORMAL
- en: The `.pkg` file makes installation and upgrading simple. Simply double-click
    the `.pkg` file and follow the onscreen prompts to install. This may require entering
    in your credentials at a prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once installation is finished, open the `Applications/Utilities/terminal.app`
    terminal and type `go version`, which should yield something similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note that the **version output** will depend on the version of Go that you have
    downloaded and the platform you are running on.
  prefs: []
  type: TYPE_NORMAL
- en: macOS installation via Homebrew
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many developers on macOS prefer to use the popular **Homebrew** ([https://brew.sh](https://brew.sh))
    to install Go. If you are a Homebrew user, there is a simple two-step process
    for installing Go, as explained in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Xcode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Go has some reliance on Apple''s **Xcode**, and it needs to be installed in
    order to work correctly. To see whether you have Xcode installed, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This should output something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If it gives an error, you need to install Xcode by following this link on the
    App Store: [https://itunes.apple.com/us/app/xcode/id497799835?mt=12&ign-mpt=uo%3D2](https://itunes.apple.com/us/app/xcode/id497799835?mt=12&ign-mpt=uo%3D2).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once installed, you can install the separate command-line tools with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's look at the next step.
  prefs: []
  type: TYPE_NORMAL
- en: Homebrew update and Go installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Update Homebrew and install the latest Go tools with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can verify the Go version with `$ go version`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at installation on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Windows installation using MSI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Windows installation is similar to other Windows application installations using
    a **Microsoft Installer** (**MSI**) file. Simply download the MSI file and follow
    the onscreen instructions. By default, this will install the Go tooling at **Program
    Files** or **Program Files (x86)**.
  prefs: []
  type: TYPE_NORMAL
- en: To verify that Go was installed correctly, click the *Start* menu, type `cmd`
    into the search box, and the Command Prompt shell should appear. Type `go version`,
    and it should display the installed version of Go.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at installation on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linux package management could be the subject of its own series of books and,
    as Linus points out, it is one of the reasons why Linux as a desktop system has
    failed so spectacularly.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Linux for development, chances are you have some knowledge
    on how to install packages for your distribution. As we can't cover all possible
    methods of installation on Linux, we are going to cover installation using `apt`,
    Snap, and via `tarball`.
  prefs: []
  type: TYPE_NORMAL
- en: Linux installation via APT on Ubuntu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**APT** is a package installation manager used in various distributions. Installing
    Go via APT is pretty straightforward.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update and upgrade APT to the latest version, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the Go package as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, type `go version` into the terminal, and it should display the installed
    version of Go.
  prefs: []
  type: TYPE_NORMAL
- en: Linux installation via Snap on Ubuntu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Snap** is a universal package manager meant to make the installation of a
    package easy across multiple distributions or versions by including all the necessary
    files in the package.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have Snap installed, you can simply use `snap info go` to locate a version
    of Go to install:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Screenshot showing the snap info go command output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17626_03_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 – Screenshot showing the snap info go command output
  prefs: []
  type: TYPE_NORMAL
- en: 'You can choose to install the latest stable version of Go by typing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, type `go version` into the terminal, and it should display the installed
    version of Go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that you may receive a warning about the Go package being built on a revision
    of Snap with classic confinement. In that case, to install using Snap, you may
    need to append `–-classic` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Linux installation via tarball
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to do this, you need to download the package for Linux and your platform.
    Our example will use `go1.16.5.linux-amd64.tar.gz`. You will notice that the name
    gives the Go version (*1.16.5*), the OS (Linux), and the architecture (*AMD64*).
    You will need to download the current version of Go and your architecture into
    a directory.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of these instructions will use the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to install our version into `/usr/local/go` and remove any previous
    installation. This can be achieved with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add our directory to our `PATH` so that we can find our Go tools.
    This can be accomplished with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: With most shells, this change will not happen immediately. The easiest way to
    cause `PATH` to update is simply to open a new shell. You may also use the `source`
    command to reload your shell's profile if you know the name/location of your shell's
    profile – `source $HOME/.profile`, for example.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test if your `PATH` was updated correctly, type `go version`, which should
    yield the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: What about installing Go on other platforms?
  prefs: []
  type: TYPE_NORMAL
- en: Other platforms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go can certainly be installed on other platforms, such as **FreeBSD**, but those
    are not covered here. See the Go *installation documentation* for these other
    platforms.
  prefs: []
  type: TYPE_NORMAL
- en: A note on Go compiler version compatibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Go project is governed by the Go compatibility promise: [https://golang.org/doc/go1compat](https://golang.org/doc/go1compat).
    The gist is that Go will be backward compatible unless there is a major semantic
    version number change (**1.x.x** to **2.x.x**). While you might hear people talk
    about Go 2.0, the authors have been very clear that they have no plans to leave
    version 1.'
  prefs: []
  type: TYPE_NORMAL
- en: This means software written for **Go 1.0.0** works in the latest **Go 1.17.5**
    version. This has been a major win for the Go community in stability. This book
    will be using Go 1.17.5 for its revision.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this section, you should have installed the Go tooling and tested
    that the tooling is working for your OS of choice. In the next section, we will
    discuss how to build code on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: Building code locally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The current Go ecosystem (Go 1.13 onward) and toolchain allow you to write Go
    code from any location in the filesystem. Most users choose to set up a local
    Git repository for their package(s) and develop within that directory.
  prefs: []
  type: TYPE_NORMAL
- en: This is accomplished using Go modules that the Go team describes as *"a collection
    of Go packages stored in a file tree with a go.mod file at its root."* A Go module
    most often represents a GitHub repository, such as `github.com/user/repository`.
  prefs: []
  type: TYPE_NORMAL
- en: Most Go developers will use the command line to move around the filesystem environment
    and for interacting with the Go toolchain. In this section, we will concentrate
    on using Unix commands for accessing the filesystem and using Go compiler tools.
    The Go compiler commands will be the same between each OS, but filesystem commands
    may not be, and the file paths may also differ, such as Windows using `\` instead
    of `/` as path separators.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a module directory and go.mod file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The directory can be anywhere on the filesystem you have access. `godev/` is
    a good directory name to use, and putting it in your home directory, which is
    OS-dependent, is a logical place to make it easy to find.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within that directory, I will create a new directory for my package. For this
    example, I will create a directory called `hello/` that will represent my Go module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: To create our module, we simply need to create a `go.mod` file that contains
    our module name. Module names are typically the Git path, such as `github.com/johnsiilver/fs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have a GitHub repository that you wish to store this example in, you
    can substitute it in our command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This `go.mod` file will contain a few key sections worth noting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The first line defines our module, which is the path to the root of the Git
    repository. The second defines the minimum version of Go that can be used to compile
    this module. Depending on what features you use, your module may be compatible
    with previous versions of Go, and you can modify this to have a lower version
    number.
  prefs: []
  type: TYPE_NORMAL
- en: While this example will not have any third-party packages, it is worth noting
    that most `go.mod` files will have a *require* section that lists packages and
    their versions that your module imports.
  prefs: []
  type: TYPE_NORMAL
- en: Updating a module when adding dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When adding a third-party package, your `go.mod` file will need to be modified
    to contain the dependency information. This would be a tedious task, but Go has
    you covered with the `go mod tidy` command.
  prefs: []
  type: TYPE_NORMAL
- en: Running `go mod tidy` will look at all your package imports and add them to
    your `go.mod` file automatically. Remember to run this after adding any external
    dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a hello world
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To learn how to compile and run Go code, we are going to create a *hello world*
    application. In Go, all Go source files end with the `.go` extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file in the directory called `hello.go` using your favorite text editor
    and insert the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's run our first program.
  prefs: []
  type: TYPE_NORMAL
- en: Running our first program
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have that file saved, let''s try compiling and running that code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This compiled our source file and ran it as a binary. You may only use `go run`
    for a package called `main`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to create a binary for this OS and architecture , we can simply
    run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: There is now a binary called `hello` that can be run on any OS/architecture
    of the same type. If our package was not called `main`, this would compile the
    package and emit any errors encountered, but it would not create a binary.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have now created your first Go module, initialized your first `go.mod` file,
    created a Go program, run the Go program with `go run`, and built a Go executable
    for your OS. This chapter has left you with the necessary skills to create a basic
    Go module and the basic knowledge of the Go command-line tool required to both
    run a Go package and build a Go program. These are used every day in the life
    of a Go developer.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we're going to cover the basics of the Go language, including
    how packages work, testing, and many more essentials.
  prefs: []
  type: TYPE_NORMAL
