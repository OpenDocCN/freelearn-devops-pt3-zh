["```\n$ git clone https://github.com/PacktPublishing/Modern-DevOps-Practices-2e.git \\\n  modern-devops\n$ cd modern-devops/ch5\n```", "```\n$ grep -rl '<your_dockerhub_user>' . | xargs sed -i -e \\\n 's/<your_dockerhub_user>/<your actual docker hub user>/g'\n```", "```\n$ curl -LO \"https://storage.googleapis.com/kubernetes-release/release\\\n/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)\\\n/bin/linux/amd64/kubectl\"\n```", "```\n$ curl -LO https://storage.googleapis.com/kubernetes-release/release\\\n/v<kubectl_version>/bin/linux/amd64/kubectl\n```", "```\n$ chmod +x ./kubectl\n$ sudo mv kubectl /usr/local/bin/\n```", "```\n$ kubectl version --client\nClient Version: version.Info{Major:\"1\", Minor:\"27\", GitVersion:\"v1.27.3\"}\n```", "```\n$ curl -Lo minikube \\\nhttps://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\n$ chmod +x minikube\n$ sudo mv minikube /usr/local/bin/\n```", "```\n$ sudo apt-get install -y conntrack\n```", "```\n$ minikube start --driver=docker\nDone! kubectl is now configured to use \"minikube\" cluster and \"default\" namespace by \ndefault\n```", "```\nkubectl <verb> <resource type> <resource name> [--flags]\n```", "```\n$ kubectl get nodes\nNAME       STATUS   ROLES           AGE     VERSION\nminikube   Ready    control-plane   2m25s   v1.26.3\n```", "```\n$ minikube stop\n```", "```\n$ curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64\n$ chmod +x kind\n$ sudo mv kind /usr/local/bin/\n```", "```\n$ kind version\nkind v0.20.0 go1.20.4 linux/amd64\n```", "```\n$ vim kind-config.yaml\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n- role: worker\n- role: worker\n- role: worker\n```", "```\n$ kind create cluster --config kind-config.yaml\n```", "```\n$ kubectl get nodes\nNAME                 STATUS   ROLES           AGE   VERSION\nkind-control-plane   Ready    control-plane   72s   v1.27.3\nkind-worker          Ready    <none>          47s   v1.27.3\nkind-worker2         Ready    <none>          47s   v1.27.3\nkind-worker3         Ready    <none>          47s   v1.27.3\n```", "```\n$ cd ~/modern-devops/ch5/pod/\n```", "```\n$ kubectl run nginx --image=nginx\n```", "```\n$ kubectl get pod\nNAME    READY   STATUS    RESTARTS   AGE\nnginx   1/1     Running   0          26s\n```", "```\n$ kubectl delete pod nginx\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  labels:\n    run: nginx\n  name: nginx\nspec:\n  containers:\n  - image: nginx\n    imagePullPolicy: Always\n    name: nginx\n    resources:\n      limits:\n        memory: \"200Mi\"\n        cpu: \"200m\"\n      requests:\n        memory: \"100Mi\"\n        cpu: \"100m\"\n  restartPolicy: Always\n```", "```\n$ kubectl apply -f nginx-pod.yaml\n```", "```\n$ kubectl port-forward nginx 8080:80\nForwarding from 127.0.0.1:8080 -> 80\nForwarding from [::1]:8080 -> 80\n```", "```\n$ curl 127.0.0.1:8080\n...\n<title>Welcome to nginx!</title>\n...\n```", "```\n$ kubectl logs nginx -c nginx\n...\n127.0.0.1 - - [18/Jun/2023:14:08:01 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"curl/7.47.0\" \"-\"\n```", "```\n$ kubectl logs nginx\n```", "```\n$ kubectl exec -it nginx -- /bin/bash\nroot@nginx:/# cd /etc/nginx/ && ls\nconf.d fastcgi_params mime.types modules nginx.conf scgi_params uwsgi_params\nroot@nginx:/etc/nginx# exit\n```", "```\n$ kubectl exec nginx -- ls /etc/nginx\nconf.d fastcgi_params mime.types modules nginx.conf scgi_params uwsgi_params\n```", "```\n$ kubectl run nginx-1 --image=nginx-1\n```", "```\n$ kubectl get pod nginx-1\nNAME      READY   STATUS             RESTARTS   AGE\nnginx-1   0/1     ImagePullBackOff   0          25s\n```", "```\n$ kubectl describe pod nginx-1\n```", "```\nWarning  Failed     60s (x4 over 2m43s)  kubelet            Failed to pull image \"nginx-\n1\": rpc error: code = Unknown desc = failed to pull and unpack image \"docker.io/library/\nnginx-1:latest\": failed to resolve reference \"docker.io/library/nginx-1:latest\": pull \naccess denied, repository does not exist or may require authorization: server message: \ninsufficient_scope: authorization failed\n```", "```\n$ kubectl delete pod nginx-1\n```", "```\n$ kubectl run nginx-1 --image=nginx\n```", "```\n$ kubectl get pod nginx-1\nNAME      READY   STATUS    RESTARTS   AGE\nnginx-1   1/1     Running   0          42s\n```", "```\n    ...\n    startupProbe:\n      exec:\n        command:\n        - cat\n        - /usr/share/nginx/html/index.html\n      failureThreshold: 30\n      periodSeconds: 10\n    readinessProbe:\n      httpGet:\n        path: /\n        port: 80\n      initialDelaySeconds: 5\n      periodSeconds: 5\n    livenessProbe:\n      httpGet:\n        path: /\n        port: 80\n      initialDelaySeconds: 5\n      periodSeconds: 3\n  restartPolicy: Always\n```", "```\n$ kubectl delete pod nginx && kubectl apply -f nginx-probe.yaml && \\\n kubectl get pod -w\nNAME    READY   STATUS              RESTARTS   AGE\nnginx   0/1     Running             0          4s\nnginx   0/1     Running             0          11s\nnginx   1/1     Running             0          12s\n```", "```\n$ kubectl exec -it nginx -- rm -rf /usr/share/nginx/html/index.html && \\\n kubectl get pod nginx -w\nNAME    READY   STATUS    RESTARTS     AGE\nnginx   1/1     Running   0            2m5s\nnginx   0/1     Running   1 (2s ago)   2m17s\nnginx   1/1     Running   1 (8s ago)   2m22s\n```", "```\n$ cd ~/modern-devops/ch5/multi-container-pod/init/\n```", "```\n…\nspec:\n  containers:\n  - name: nginx-container\n    image: nginx\n    volumeMounts:\n    - mountPath: /usr/share/nginx/html\n      name: html-volume\n  initContainers:\n  - name: init-nginx\n    image: busybox:1.28\n    command: ['sh', '-c', 'mkdir -p /usr/share/nginx/html && wget -O /usr/share/nginx/html/index.html http://example.com']\n    volumeMounts:\n    - mountPath: /usr/share/nginx/html\n      name: html-volume\n  volumes:\n  - name: html-volume\n    emptyDir: {}\n```", "```\n$ kubectl delete pod nginx && kubectl apply -f nginx-init.yaml && \\\n kubectl get pod nginx -w\nNAME    READY   STATUS            RESTARTS   AGE\nnginx   0/1     Init:0/1          0          0s\nnginx   0/1     PodInitializing   0          1s\nnginx   1/1     Running           0          3s\n```", "```\n$ kubectl port-forward nginx 8080:80\n```", "```\n$ curl localhost:8080\n    <title>Example Domain</title>\n```", "```\n$ cd ~/modern-devops/ch5/multi-container-pod/ambassador\n```", "```\n$ docker build -t <your_dockerhub_user>/flask-redis .\n```", "```\n$ docker push <your_dockerhub_user>/flask-redis\n```", "```\n$ kubectl run redis --image=redis\n```", "```\n$ kubectl expose pod redis --port 6379\n```", "```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: redis-config\ndata:\n  host: \"redis\"\n  port: \"6379\"\n```", "```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: nginx-config\ndata:\n  nginx.conf: |\n    ...\n    stream {\n        server {\n            listen     6379;\n            proxy_pass stream_redis_backend;\n        }\n        upstream stream_redis_backend {\n            server REDIS_HOST:REDIS_PORT;\n        }\n    }\n```", "```\n...\nspec:\n  containers:\n  - name: flask-app\n    image: <your_dockerhub_user>/flask-redis\n  - name: nginx-ambassador\n    image: nginx\n    volumeMounts:\n    - mountPath: /etc/nginx\n      name: nginx-volume\n  ...\n```", "```\n  initContainers:\n  - name: init-nginx\n    image: busybox:1.28\n    command: ['sh', '-c', 'cp -L /config/nginx.conf /etc/nginx/nginx.conf && sed -i \"s/\nREDIS_HOST/${REDIS_HOST}/g\" /etc/nginx/nginx.conf']\n    env:\n      - name: REDIS_HOST\n        valueFrom:\n          configMapKeyRef:\n            name: redis-config\n            key: host\n      - name: REDIS_PORT\n        valueFrom:\n          configMapKeyRef:\n            name: redis-config\n            key: port\n    volumeMounts:\n    - mountPath: /etc/nginx\n      name: nginx-volume\n    - mountPath: /config\n      name: config\n```", "```\n  volumes:\n  - name: nginx-volume\n    emptyDir: {}\n  - name: config\n    configMap:\n      name: nginx-config\n      items:\n      - key: \"nginx.conf\"\n        path: \"nginx.conf\"\n```", "```\n$ kubectl apply -f redis-config-map.yaml\n$ kubectl apply -f nginx-config-map.yaml\n```", "```\n$ kubectl apply -f flask-ambassador.yaml\n```", "```\n$ kubectl get pod/flask-ambassador\nNAME               READY   STATUS    RESTARTS   AGE\nflask-ambassador   2/2     Running   0          10s\n```", "```\n$ kubectl port-forward flask-ambassador 5000:5000\n```", "```\n$ curl localhost:5000\nHi there! This page was last visited on 2023-06-18, 16:52:28.\n$ curl localhost:5000\nHi there! This page was last visited on 2023-06-18, 16:52:28.\n$ curl localhost:5000\nHi there! This page was last visited on 2023-16-28, 16:52:32.\n```", "```\n$ cd ~/modern-devops/ch5/multi-container-pod/sidecar\n```", "```\n$ echo 'SET secret foobar' | base64\nU0VUIHNlY3JldCBmb29iYXIK\n```", "```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: redis-secret\ndata:\n  redis-secret: U0VUIHNlY3JldCBmb29iYXIK\n```", "```\n$ cd ~/modern-devops/ch5/multi-container-pod/sidecar/redis/\n```", "```\nredis-server --daemonize yes && sleep 5\nredis-cli < /redis-master/init.redis\nredis-cli save\nredis-cli shutdown\nredis-server\n```", "```\nFROM redis\nCOPY entrypoint.sh /tmp/\nCMD [\"sh\", \"/tmp/entrypoint.sh\"]\n```", "```\n$ docker build -t <your_dockerhub_user>/redis-secret .\n$ docker push <your_dockerhub_user>/redis-secret\n```", "```\n$ cd ~/modern-devops/ch5/multi-container-pod/sidecar/flask\n```", "```\n...\ncache = redis.Redis(host='localhost', port=6379)\ndef get_secret():\n    try:\n        secret = cache.get('secret')\n        return secret\n...\ndef index():\n    secret = str(get_secret().decode('utf-8'))\n    return 'Hi there! The secret is {}.\\n'.format(secret)\n```", "```\n$ docker build -t <your_dockerhub_user>/flask-redis-secret .\n$ docker push <your_dockerhub_user>/flask-redis-secret\n```", "```\n...\nspec:\n  containers:\n  - name: flask-app\n    image: <your_dockerhub_user>/flask-redis-secret\n  - name: redis-sidecar\n    image: <your_dockerhub_user>/redis-secret\n    volumeMounts:\n    - mountPath: /redis-master\n      name: secret\n  volumes:\n  - name: secret\n    secret:\n      secretName: redis-secret\n      items:\n      - key: redis-secret\n        path: init.redis\n```", "```\n$ kubectl apply -f redis-secret.yaml\n```", "```\n$ kubectl apply -f flask-sidecar.yaml\n```", "```\n$ kubectl get pod flask-sidecar\nNAME            READY   STATUS              RESTARTS   AGE\nflask-sidecar   2/2     Running             0          11s\n```", "```\n$ kubectl port-forward flask-sidecar 5000:5000\n```", "```\n$ curl localhost:5000\nHi there! The secret is foobar.\n```", "```\n...\nspec:\n  volumes:\n  - name: logs\n    emptyDir: {}\n  containers:\n  - name: app-container\n    image: ubuntu\n    command: [\"/bin/bash\"]\n    args: [\"-c\", \"while true; do echo 'This is a log line' >> /var/log/app.log; sleep \n2;done\"]\n    volumeMounts:\n    - name: logs\n      mountPath: /var/log\n  - name: log-adapter\n    image: ubuntu\n    command: [\"/bin/bash\"]\n    args: [\"-c\", \"apt update -y && apt install -y moreutils && tail -f /var/log/app.log | \nts '[%Y-%m-%d %H:%M:%S]' > /var/log/out.log\"]\n    volumeMounts:\n    - name: logs\n      mountPath: /var/log\n```", "```\n$ kubectl apply -f app-adapter.yaml\n```", "```\n$ kubectl get pod app-adapter\nNAME          READY   STATUS    RESTARTS   AGE\napp-adapter   2/2     Running   0          8s\n```", "```\n$ kubectl exec -it app-adapter -c log-adapter -- bash\n```", "```\nroot@app-adapter:/# cd /var/log/ && ls\napp.log apt/ dpkg.log out.log\n```", "```\nroot@app-adapter:/var/log# cat app.log\nThis is a log line\nThis is a log line\nThis is a log line\n```", "```\nroot@app-adapter:/var/log# cat out.log\n[2023-06-18 16:35:25] This is a log line\n[2023-06-18 16:35:27] This is a log line\n[2023-06-18 16:35:29] This is a log line\n```"]