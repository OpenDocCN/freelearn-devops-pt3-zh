- en: <st c="0">9</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">9</st>
- en: <st c="2">Choosing Technical Debt to Unbreak Platforms</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">选择技术债务以避免平台崩溃</st>
- en: <st c="47">What is</st> **<st c="56">technical debt</st>** <st c="70">and</st>
    <st c="75">how does it unbreak a platform?</st> <st c="107">Technical debt is
    the ongoing cost of maintenance for a piece of software.</st> <st c="182">This
    is the literal money that’s spent on the runtime environment, the time spent operating
    and updating it, and customer satisfaction.</st> <st c="318">Just like monetary
    debt, technical debt can pile up.</st> <st c="371">As the amount snowballs, the
    team can’t incur new debt or deliver new features as all their working hours are
    spent on mitigating the</st> <st c="505">current issues.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="47">什么是</st> **<st c="56">技术债务</st>** <st c="70">以及它是如何避免平台崩溃的？</st>
    <st c="107">技术债务是对一项软件的持续维护成本。</st> <st c="182">这包括在运行环境上的实际支出、用于操作和更新的时间以及客户满意度。</st>
    <st c="318">就像货币债务一样，技术债务也会不断积累。</st> <st c="371">随着债务的滚雪球效应，团队无法再承受新的债务或交付新的功能，因为他们的所有工作时间都花费在缓解</st>
    <st c="505">当前的问题上。</st>
- en: '<st c="520">Indicators that a team is inundated with technical debt are easy
    to spot: are your teams attempting to maintain extremely outdated software?</st>
    <st c="662">Do you have systems that are operationally fragile and/or prone to
    crashing?</st> <st c="739">Do you use unnecessarily</st> <st c="764">complex software?</st>'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="520">一个团队被技术债务淹没的迹象很容易发现：你的团队是否在试图维护极其过时的软件？</st> <st c="662">你是否有操作脆弱且/或容易崩溃的系统？</st>
    <st c="739">你是否在使用不必要的</st> <st c="764">复杂软件？</st>
- en: <st c="781">If you answer any of those questions with yes, there’s a corresponding
    cost.</st> <st c="859">For instance, updating, securing, and operating outdated
    software ranges from very costly to impractical.</st> <st c="965">Operationally
    fragile software requires frequent manual intervention, so it will eat up your
    operations team’s time and increase the chance of burnout.</st> <st c="1117">Last
    but not least, overcomplicated software is usually just plain hard to understand.</st>
    <st c="1204">It’s hard to read and maintain, and this means ongoing development
    and</st> <st c="1275">maintenance costs.</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="781">如果你对这些问题的回答是肯定的，那么就有相应的成本。</st> <st c="859">例如，更新、安全性和操作过时的软件从非常昂贵到不切实际不等。</st>
    <st c="965">操作上脆弱的软件需要频繁的人工干预，因此会消耗你的运维团队的时间，并增加团队倦怠的风险。</st> <st c="1117">最后但同样重要的是，过于复杂的软件通常很难理解。</st>
    <st c="1204">它很难阅读和维护，这意味着持续的开发和</st> <st c="1275">维护成本。</st>
- en: <st c="1293">No software can be built or adopted that is debt-free, but when
    that is evaluated alongside its features, it can help guarantee a more successful
    running state for the platform.</st> <st c="1472">In this chapter, we’ll cover
    the</st> <st c="1505">following topics:</st>
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1293">没有任何软件能够做到完全没有债务，但当将其与功能进行评估时，可以帮助保证平台更加成功的运行状态。</st> <st c="1472">在这一章中，我们将涵盖以下主题：</st>
- en: <st c="1522">Taking technical</st> <st c="1540">debts consciously</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1522">有意识地承担技术</st> <st c="1540">债务</st>
- en: <st c="1557">Using data to drive</st> <st c="1578">design decisions</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1557">利用数据驱动</st> <st c="1578">设计决策</st>
- en: <st c="1594">Maintaining and reworking</st> <st c="1621">technical debts</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1594">维护和重构</st> <st c="1621">技术债务</st>
- en: <st c="1636">Rewriting versus refactoring – a</st> <st c="1670">practical guide</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1636">重写与重构 – 一份</st> <st c="1670">实用指南</st>
- en: <st c="1685">Architectural decision records – document for</st> <st c="1732">the
    Afterworld</st>
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1685">架构决策记录 – 为</st> <st c="1732">后世文档化</st>
- en: <st c="1746">Taking technical debts consciously</st>
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1746">有意识地承担技术债务</st>
- en: <st c="1781">“</st>*<st c="1783">Choose your technical debt wisely</st>*<st
    c="1816">,” your author, Hilliary, says all the time.</st> <st c="1861">But what
    does it mean to choose your technical debt?</st> <st c="1914">Aren’t we supposed
    to be solving problems and</st> <st c="1960">identifying solutions?</st>
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1781">“</st>*<st c="1783">明智地选择你的技术债务</st>*<st c="1816">，”你的作者Hilliary总是这么说。</st>
    <st c="1861">但是，选择你的技术债务意味着什么呢？</st> <st c="1914">难道我们不是应该解决问题并</st> <st c="1960">识别解决方案吗？</st>
- en: <st c="1982">Yes.</st> <st c="1988">But these two</st> <st c="2001">things are
    not mutually exclusive.</st> <st c="2037">There’s not likely to be a perfect solution
    readymade off the shelf.</st> <st c="2106">Typically, products are designed with
    specific use cases in mind, but those use cases are not all-encompassing.</st>
    <st c="2218">No product can cover every permutation of every user’s potential
    needs and workflows.</st> <st c="2304">Indeed, it will be the same for your platform
    as you progress through its life cycle.</st> <st c="2390">When we commit to accepting
    the shortcomings of a solution or technology, that means we’re committing to compensating
    for that in another way.</st> <st c="2533">Such compensation should be managed
    so that we don’t create additional overhead or manual workflows that result in
    unsustainable toil for the platform team or the developers.</st> <st c="2708">Too
    much technical debt takes away from the return on investment in</st> <st c="2776">the
    platform.</st>
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1982">是的。</st> <st c="1988">但是这两者</st> <st c="2001">并不互相排斥。</st> <st
    c="2037">很可能没有一个现成的完美解决方案。</st> <st c="2106">通常，产品是根据特定的使用场景设计的，但这些场景并不涵盖所有情况。</st>
    <st c="2218">没有任何产品能够覆盖每个用户潜在需求和工作流的每种组合。</st> <st c="2304">事实上，在你的平台生命周期的过程中，情况也将是一样的。</st>
    <st c="2390">当我们承诺接受一个解决方案或技术的不足时，意味着我们承诺以另一种方式来弥补这些不足。</st> <st c="2533">这种补偿应该被管理，以避免我们为平台团队或开发者创造额外的工作负担或手动工作流，进而导致无法持续的辛苦劳动。</st>
    <st c="2708">过多的技术债务会削弱平台的投资回报率。</st>
- en: <st c="2789">Technical decisions should be made collaboratively.</st> <st c="2842">It’s
    important to try to arrive at a consensus as a team to ensure that the path forward
    is one at least the majority feel comfortable with.</st> <st c="2983">To take
    on technical debt consciously, you must be able to assess it and understand the
    answers to</st> <st c="3082">important questions.</st>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2789">技术决策应该是协作进行的。</st> <st c="2842">团队达成共识是很重要的，这样可以确保前进的方向至少是大多数人都感到舒适的。</st>
    <st c="2983">要有意识地承担技术债务，必须能够评估它并理解以下</st> <st c="3082">重要问题的答案。</st>
- en: <st c="3102">The following is a</st> <st c="3121">technical debt assessment
    for you to</st> <st c="3159">try out:</st>
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3102">以下是一个</st> <st c="3121">技术债务评估，供你</st> <st c="3159">试用：</st>
- en: <st c="3167">What problems are you</st> <st c="3190">solving today?</st>
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3167">你今天解决了哪些问题？</st> <st c="3190">正在解决什么问题？</st>
- en: <st c="3204">What problems do you not</st> <st c="3230">have (yet)?</st>
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3204">你目前没有（还没有）</st> <st c="3230">什么问题？</st>
- en: <st c="3241">What will this cost us in time to build</st> <st c="3282">or adopt?</st>
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3241">这将需要我们多少时间来构建</st> <st c="3282">或采用？</st>
- en: <st c="3291">What will this cost us</st> <st c="3315">to run?</st>
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3291">这将花费我们多少</st> <st c="3315">来运行？</st>
- en: <st c="3322">What is necessary to</st> <st c="3344">maintain it?</st>
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3322">我们需要什么来</st> <st c="3344">维持它？</st>
- en: <st c="3356">What is our</st> <st c="3369">expected return?</st>
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3356">我们的</st> <st c="3369">预期回报是什么？</st>
- en: <st c="3385">Can the team sustain</st> <st c="3407">it</st> *<st c="3410">as-is</st>*<st
    c="3415">?</st>
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3385">团队能否维持</st> <st c="3407">它</st> *<st c="3410">按原样</st>*<st c="3415">？</st>
- en: <st c="3416">If not, is the team prepared to upskill and do they</st> <st c="3468">have
    time?</st>
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="3416">如果不是，团队是否准备好提升技能，</st> <st c="3468">并且有足够时间？</st>
- en: <st c="3478">If it’s open source software, how strong is the community?</st>
    <st c="3538">How does the team join</st> <st c="3561">that community?</st>
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="3478">如果是开源软件，社区有多强大？</st> <st c="3538">团队如何加入</st> <st c="3561">这个社区？</st>
- en: <st c="3576">What will it take for any new team members to get up</st> <st c="3630">to
    speed?</st>
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3576">任何新加入的团队成员需要什么才能尽快上手？</st> <st c="3630">快速上手需要什么？</st>
- en: <st c="3639">When will we know if it’s time</st> <st c="3671">to scale?</st>
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3639">我们什么时候能知道是时候</st> <st c="3671">扩展了？</st>
- en: <st c="3680">How will</st> <st c="3690">we scale?</st>
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3680">我们将如何</st> <st c="3690">扩展？</st>
- en: <st c="3699">What are our deprecation criteria for</st> <st c="3738">this solution?</st>
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3699">我们的弃用标准是什么</st> <st c="3738">对于这个解决方案？</st>
- en: <st c="3752">Visualize the answers to these questions as an accounting ledger.</st>
    <st c="3819">After you total everything up, are you coming out ahead or behind?</st>
    <st c="3886">Like your books, these values must be balanced.</st> <st c="3934">The
    balance of technical debt for a team or an organization is more socio-technical
    than technical.</st> <st c="4034">The artistry of engineering can lead to an emotional
    connection that may create blind spots and flaws that impact the long-term sustainability
    of a solution.</st> <st c="4192">For example, tools written by passionate engineers
    on the cutting edge more often fall into disuse and disrepair if they weren’t
    written in a way that invited collaboration from the team, and if the technical
    pieces exclude a number of the team without the skills necessary to maintain</st>
    <st c="4478">those tools.</st>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3752">将这些问题的答案可视化为一个会计账簿。</st> <st c="3819">在你将所有内容加总后，你是领先还是落后？</st>
    <st c="3886">像你的账本一样，这些数值必须平衡。</st> <st c="3934">团队或组织的技术债务平衡更多的是社会技术层面的，而非单纯的技术层面。</st>
    <st c="4034">工程的艺术性可能会导致一种情感上的联系，从而产生盲点和缺陷，影响解决方案的长期可持续性。</st> <st c="4192">例如，由充满激情的工程师编写的前沿工具，如果没有以邀请团队协作的方式编写，且技术部分排除了不少没有必要技能来维护这些工具的团队成员，它们更可能会被弃用或遭到破坏。</st>
    <st c="4478">这些工具。</st>
- en: <st c="4490">A solution can be as</st> <st c="4512">clever, elegant, and simple
    as possible and still be unsustainable if it’s not suited for the team or the
    environment in which the problem being solved exists.</st> <st c="4672">For example,
    if the solution is written in Rust, and the team to date has been using Ruby,
    then it’s unlikely the team will be able to sustain the solution if the person
    who designed and implemented</st> <st c="4871">it leaves.</st>
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4490">一个解决方案可以尽可能聪明、优雅且简单，但如果不适合团队或问题所在的环境，它仍然可能是不可持续的。</st> <st c="4512">例如，如果解决方案是用Rust编写的，而团队至今一直在使用Ruby，那么如果设计和实现该解决方案的人离开，团队不太可能能够维持该解决方案。</st>
    <st c="4672">例如，解决方案是用Rust编写的，而团队至今一直在使用Ruby，那么如果设计和实现</st> <st c="4871">该解决方案的人离开，团队不太可能能够维持该解决方案。</st>
- en: <st c="4881">That’s why of all the questions, the last becomes the most important.</st>
    <st c="4952">Deprecation criteria tell us when it’s time to retire or replace
    a tool, a system, or any piece of code.</st> <st c="5057">All things eventually
    become legacy software, so a deprecation plan or criteria against which you evaluate
    the notion of deprecating is an important aspect of sustaining</st> <st c="5227">technical
    debt.</st>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4881">这就是为什么在所有问题中，最后一个问题变得最为重要。</st> <st c="4952">弃用标准告诉我们何时该退役或替换一个工具、一个系统或任何一段代码。</st>
    <st c="5057">所有事物最终都会变成遗留软件，因此弃用计划或评估弃用标准是维持</st> <st c="5227">技术债务的重要方面。</st>
- en: <st c="5242">Moving beyond the thinnest viable platform (TVP) sustainably</st>
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="5242">可持续地超越最薄可行平台（TVP）</st>
- en: <st c="5303">When we build a TVP, we</st> <st c="5328">commit to the notion
    of</st> *<st c="5352">good enough</st>*<st c="5363">, but as we evolve, what was
    good enough at one point may start becoming not right.</st> <st c="5447">This
    is the first iteration of the platform’s technical debt.</st> <st c="5509">Technical
    debt is a sign of growth and evolution.</st> <st c="5559">It may sometimes be
    the result of having taken what in retrospect was the wrong decision, but it is
    just as often the result of moving beyond the point you were at when the decision
    made sense.</st> <st c="5753">To some degree, technical debt is the cost of doing
    business, while in other respects, it can be considered growing pains.</st> <st
    c="5876">However you look at it, it’s a symptom that needs to be managed</st>
    <st c="5940">or mitigated.</st>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5303">当我们构建一个TVP时，我们</st> <st c="5328">承诺于</st> *<st c="5352">足够好</st>*<st
    c="5363">的概念，但随着发展的推进，曾经足够好的东西可能会开始变得不合适。</st> <st c="5447">这是平台技术债务的第一次迭代。</st>
    <st c="5509">技术债务是增长和演化的标志。</st> <st c="5559">它有时可能是回顾起来犯了错误决策的结果，但同样也常常是超越当初决策合理性时的结果。</st>
    <st c="5753">在某种程度上，技术债务是做生意的成本，而在其他方面，它可以看作是成长的痛苦。</st> <st c="5876">无论你怎么看，它都是一种需要管理</st>
    <st c="5940">或减轻的症状。</st>
- en: <st c="5953">When it’s time for the platform to move beyond its thinnest and
    start on its path toward being the robust solution expected to sustain an organization
    at scale, we start to reevaluate our past decisions.</st> <st c="6158">Do we expand
    our existing features?</st> <st c="6194">Do we replace any components?</st> <st
    c="6224">Do we retire anything that didn’t perform how we expected?</st> <st c="6283">This
    transition into the next generation of the IDP is led by the same data used to
    define</st> <st c="6374">the TVP.</st>
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5953">当平台需要超越最初的薄弱阶段，并开始朝着成为一个强大的解决方案的方向前进，支持一个规模化的组织时，我们开始重新评估过去的决策。</st>
    <st c="6158">我们是否扩展现有功能？</st> <st c="6194">我们是否替换任何组件？</st> <st c="6224">我们是否淘汰那些未能按预期表现的功能？</st>
    <st c="6283">这次过渡到下一代IDP是由与定义</st> <st c="6374">TVP相同的数据推动的。</st>
- en: <st c="6382">Critical user journeys</st>
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="6382">关键用户旅程</st>
- en: <st c="6405">Initially defined in</st> <st c="6427">the discovery or planning
    phase for your IDP, the</st> **<st c="6477">critical user journey</st>** <st c="6498">defines
    the expected workflow of interactions between a user and the IDP and where and
    how they expect to</st> <st c="6605">be successful.</st>
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6405">最初在</st> <st c="6427">IDP的发现或规划阶段定义，</st> **<st c="6477">关键用户旅程</st>**
    <st c="6498">定义了用户与IDP之间交互的预期工作流，以及他们如何期望在其中</st> <st c="6605">获得成功。</st>
- en: <st c="6619">However, as organizations evolve, so do these critical user journeys.</st>
    <st c="6690">It’s possible for things that used to be very important to an organization
    to cease to be as important or to become of lesser importance to something else
    that has emerged</st> <st c="6862">over time.</st>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6619">然而，随着组织的发展，这些关键用户旅程也在不断变化。</st> <st c="6690">过去对组织至关重要的事物，可能不再重要，或随着时间的推移变得不如其他新兴事物重要。</st>
- en: <st c="6872">Additionally, if you followed the TVP pattern, then it’s likely
    that the initial phase of building out the platform excluded some use cases and
    potential critical user journeys.</st> <st c="7051">A regular review of these
    journeys and consciously deciding to add another or expand on an existing one
    will shape how your platform grows and how your</st> <st c="7203">team innovates.</st>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6872">此外，如果你遵循了TVP模式，那么初始阶段构建平台时可能排除了一些用例和潜在的关键用户旅程。</st> <st c="7051">定期审查这些旅程，并有意识地决定添加新的旅程或扩展现有的旅程，将影响你的平台如何成长，以及你的</st>
    <st c="7203">团队如何创新。</st>
- en: '<st c="7218">A critical user journey is built around a user story.</st> <st
    c="7273">For</st> *<st c="7277">Financial One ACME</st>*<st c="7295">, there will
    be a need to cater to a certain geographical region, so a user journey would be
    phrased in the following way: “</st>*<st c="7419">As a user of the platform, I
    want to deploy an application only accessible from North America.</st>*<st c="7514">”
    Once a user story has been accepted by the platform team, the user journey should
    be created.</st> <st c="7611">Not every proposed user story should be accepted
    right away.</st> <st c="7672">For example, in the preceding story, the regional
    boundary to access requires supporting infrastructure.</st> <st c="7777">If that
    use case is not business-critical, could be satisfied without additional work,
    even if sub-optimally, or can be supported outside of the platform, then a different
    user story may be more important to</st> <st c="7985">tackle first.</st>'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7218">关键用户旅程是围绕用户故事构建的。</st> <st c="7273">对于</st> *<st c="7277">Financial
    One ACME</st>*<st c="7295">，将需要满足某个特定的地理区域，因此一个用户旅程将这样描述：“</st>*<st c="7419">作为平台的用户，我希望部署一个仅能在北美访问的应用程序。</st>*<st
    c="7514">” 一旦平台团队接受了用户故事，应该创建相应的用户旅程。</st> <st c="7611">并不是每个提议的用户故事都应该立即被接受。</st>
    <st c="7672">例如，在前述的故事中，访问的区域边界需要支持基础设施。</st> <st c="7777">如果这个用例不是业务关键性的，且可以在不增加额外工作的情况下满足，即使是次优的，或者可以在平台外支持，那么可能应该先处理一个更重要的用户故事。</st>
- en: <st c="7998">Assuming the user journey “</st>*<st c="8026">Deploy an application
    only accessible from North America</st>*<st c="8083">” is accepted, we could implement
    it using tools such as Crossplane and the composite feature, which allows the
    platform engineering team to define a template to deploy an application in a certain
    region.</st> <st c="8289">The user in their journey then simply needs to create
    an instance of that template, specify all the values, and commit it to Git.</st>
    <st c="8419">The rest is taken care of by the platform’s core delivery tools.</st>
    <st c="8484">The result will be the application that gets deployed, which is only
    accessible from the specified region.</st> <st c="8591">Technically, this can
    be done through specific ingress routing rules for regional-specific domain names,
    as shown in the following</st> <st c="8722">example definition:</st>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7998">假设用户旅程“</st>*<st c="8026">仅在北美可访问的应用程序部署</st>*<st c="8083">”被接受，我们可以使用诸如
    Crossplane 和复合特性等工具来实现，它允许平台工程团队定义一个模板，以便在特定地区部署应用程序。</st> <st c="8289">然后，用户在他们的旅程中只需创建该模板的一个实例，指定所有值，并提交到
    Git。</st> <st c="8419">其余的由平台的核心交付工具处理。</st> <st c="8484">最终结果将是仅能从指定地区访问的已部署应用程序。</st>
    <st c="8591">从技术角度来看，这可以通过特定的入口路由规则来实现，针对区域特定的域名，如下所示</st> <st c="8722">示例定义：</st>
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="9085">For more details on</st> <st c="9106">Crossplane, please revisit
    the</st> *<st c="9137">Workload and application life cycle orchestration</st>*
    <st c="9186">section of</st> [*<st c="9198">Chapter 4</st>*](B31164_04.xhtml#_idTextAnchor201)<st
    c="9207">.</st>
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9085">有关</st> <st c="9106">Crossplane 的更多详细信息，请参阅</st> *<st c="9137">工作负载和应用生命周期编排</st>*
    <st c="9186">部分中的</st> [*<st c="9198">第4章</st>*](B31164_04.xhtml#_idTextAnchor201)<st
    c="9207">。</st>
- en: <st c="9208">Evaluating the importance and the value of each user story helps
    to grow the platform sustainably.</st> <st c="9308">The team won’t be able to
    do everything all at once, so it’s important to keep the scope from creeping up
    at a rate the team</st> <st c="9433">cannot sustain.</st>
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9208">评估每个用户故事的重要性和价值有助于平台的可持续增长。</st> <st c="9308">团队不可能一蹴而就地做完所有事情，因此，保持项目范围不会以团队无法承受的速度扩展是很重要的。</st>
    <st c="9433">不能承受的。</st>
- en: <st c="9448">This is the same principle that should be applied to all software
    engineering, and in this way, the platform and an end-user-facing application
    are</st> <st c="9597">no different.</st>
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9448">这同样是所有软件工程中应遵循的原则，以这种方式，平台和面向最终用户的应用程序</st> <st c="9597">没有什么不同。</st>
- en: <st c="9610">Avoid over-engineering</st>
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="9610">避免过度工程化</st>
- en: <st c="9633">What is</st> <st c="9642">over-engineering?</st> **<st c="9660">Over-engineering</st>**
    <st c="9676">is typically characterized by making a very robust and fully featured
    system that tries to solve every conceivable problem, even before the problem
    exists.</st> <st c="9833">Over-engineering is an</st> <st c="9856">easy but dangerous
    trap to fall into.</st> <st c="9894">The first two questions in our assessment
    help us to avoid over-engineering solutions.</st> <st c="9981">Essentially, we’re
    using those questions to define our goals and our non-goals for each decision.</st>
    <st c="10079">Understanding what problems and use cases we’re solving for and
    defining what we’re not solving for – or at least not yet – can help guide our
    decisions and keep our project</st> <st c="10253">scope sane.</st>
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9633">什么是</st> <st c="9642">过度工程化？</st> **<st c="9660">过度工程化</st>** <st
    c="9676">通常表现为创建一个非常强大且功能完备的系统，试图解决每一个可能出现的问题，即使这些问题还不存在。</st> <st c="9833">过度工程化是一个</st>
    <st c="9856">容易但危险的陷阱。</st> <st c="9894">我们评估中的前两个问题帮助我们避免陷入过度工程化的解决方案。</st> <st
    c="9981">本质上，我们通过这些问题来定义每个决策的目标和非目标。</st> <st c="10079">理解我们解决的是什么问题和用例，并明确我们不解决的是什么——或者至少暂时不解决——有助于指导我们的决策，并保持项目</st>
    <st c="10253">范围的合理性。</st>
- en: <st c="10264">For example, in an observability solution, it’s reasonable to
    expect a lot of data over time.</st> <st c="10359">It’s easy to fall into the
    antipattern of planning for infinite data and building infrastructure accordingly.</st>
    <st c="10469">Instead, ask</st> <st c="10482">targeted questions:</st>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10264">例如，在一个可观察性解决方案中，随着时间的推移，预期会有大量数据。</st> <st c="10359">很容易陷入规划无限数据并相应构建基础设施的反模式。</st>
    <st c="10469">相反，应该提问</st> <st c="10482">有针对性的问题：</st>
- en: <st c="10501">How much data is</st> <st c="10519">really useful?</st>
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10501">多少数据是</st> <st c="10519">真正有用的？</st>
- en: <st c="10533">For how long is it worth it for us to keep</st> <st c="10577">this
    data?</st>
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10533">我们值得保存</st> <st c="10577">这些数据多久呢？</st>
- en: <st c="10587">How long</st> *<st c="10597">must</st>* <st c="10601">we keep</st>
    <st c="10610">the data?</st>
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10587">我们需要保留</st> *<st c="10597">多久</st>* <st c="10601">数据？</st>
- en: <st c="10619">Who needs access to</st> <st c="10640">the data?</st>
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10619">谁需要访问</st> <st c="10640">数据？</st>
- en: <st c="10649">By defining parameters based on your answers, you will allow the
    data to remain manageable.</st> <st c="10742">If there isn’t a use case for keeping
    data beyond a month or a year, then the solution shouldn’t be to write a system
    that can handle huge amounts of data.</st> <st c="10898">A better solution is
    a system that handles small amounts of data and regularly purges what it doesn’t
    need.</st> <st c="11006">Alternatively, if full purges don’t meet your use cases
    or feel too extreme, then data aggregation may be the correct approach.</st> <st
    c="11134">For example, telemetry data that’s collected over several seconds can
    be rolled up into days, weeks, months, or even years.</st> <st c="11258">Data
    aggregation can allow for data that covers a long period to still exist but without
    the same need to engineer storage and retrieval mechanisms for vast amounts of
    data.</st> <st c="11432">If you’re feeling like you’re having flashbacks to</st>
    [*<st c="11483">Chapter 7</st>*](B31164_07.xhtml#_idTextAnchor381)<st c="11492">,
    well spotted.</st> <st c="11508">The same questions that help prevent over-engineering
    also help us to understand our security posture in</st> <st c="11613">many cases.</st>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10649">通过根据你的答案定义参数，你将使数据保持可管理的状态。</st> <st c="10742">如果没有必要将数据保留超过一个月或一年，那么解决方案就不应该是编写一个能够处理大量数据的系统。</st>
    <st c="10898">更好的解决方案是一个处理小量数据的系统，并定期清除不需要的数据。</st> <st c="11006">或者，如果完全清除不符合你的用例，或者觉得过于极端，那么数据聚合可能是正确的方法。</st>
    <st c="11134">例如，几秒钟内收集的遥测数据可以汇总成天、周、月甚至年。</st> <st c="11258">数据聚合可以让覆盖长时间段的数据依然存在，但无需为大量数据设计存储和检索机制。</st>
    <st c="11432">如果你觉得自己正经历回忆</st> [*<st c="11483">第七章</st>*](B31164_07.xhtml#_idTextAnchor381)<st
    c="11492">，观察得很敏锐。</st> <st c="11508">帮助我们防止过度工程化的相同问题，也帮助我们在许多情况下理解我们的安全态势。</st>
- en: <st c="11624">Avoiding over-engineering doesn’t mean never planning for the
    problems you don’t have yet.</st> <st c="11716">Failure to plan for the future
    can also lead to creating solutions that may need to be replaced entirely down
    the line.</st> <st c="11836">Now, this can be good when we look at composable
    system</st> <st c="11892">architectures and the power of microservices.</st> <st
    c="11938">Sometimes, a complete swap of a component is the best way to get the
    best results.</st> <st c="12021">However, it’s not usually an easy or quick thing
    to do, so if that’s what’s desired, it still needs to be carefully planned and
    executed along that plan.</st> <st c="12175">A general recommendation to avoid
    overengineering is to solve today’s problems and roadmap tomorrow’s.</st> <st
    c="12278">Keeping systems simpler allows them to be more easily maintained and
    can help ensure more flexibility as the</st> <st c="12387">product evolves.</st>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11624">避免过度工程化并不意味着从不为你还没有遇到的问题进行规划。</st> <st c="11716">未能为未来做好规划也可能导致创建需要完全替换的解决方案。</st>
    <st c="11836">现在，当我们考虑可组合系统</st> <st c="11892">架构和微服务的力量时，这可能是有益的。</st> <st c="11938">有时，完全更换一个组件是获得最佳结果的最佳方式。</st>
    <st c="12021">然而，这通常不是一件容易或快速的事情，所以如果这是所需的，它仍然需要谨慎地规划并按照计划执行。</st> <st c="12175">避免过度工程化的普遍建议是解决今天的问题，并为明天的问题制定路线图。</st>
    <st c="12278">保持系统简洁可以让它们更容易维护，并帮助确保产品在发展过程中更加灵活。</st> <st c="12387">产品不断发展。</st>
- en: <st c="12403">Build versus buy – building a decision tree</st>
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="12403">构建与购买——构建决策树</st>
- en: <st c="12447">In the</st> <st c="12455">process of adding a new component and
    evaluating technical debt, one of the most important questions is whether we should
    build it or buy it.</st> <st c="12597">This tends to be more sociotechnical than
    technical as it involves balancing the innate desire to build with the need to
    buy if that’s what’s right for</st> <st c="12749">the team.</st>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12447">在</st> <st c="12455">添加新组件并评估技术债务的过程中，最重要的问题之一是我们应该构建它还是购买它。</st>
    <st c="12597">这通常是社会技术性问题多于技术性问题，因为它涉及平衡内在的构建欲望与如果购买更合适时的需求。</st> <st c="12749">对于团队来说。</st>
- en: <st c="12758">It’s natural for engineers to want to engineer things.</st> <st
    c="12814">Our identities, strengths, experiences, and interests bias us toward
    decisions that align with them.</st> <st c="12915">However, it’s critical to take
    a step back from the emotional and intellectual attachment to solving the problem
    and look at the options with as unbiased an eye as</st> <st c="13079">we can.</st>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12758">工程师希望自己设计事物是很自然的。</st> <st c="12814">我们的身份、优势、经验和兴趣使我们偏向于做出与这些因素一致的决策。</st>
    <st c="12915">然而，关键在于从情感和智力上脱离对问题解决的执着，以尽可能不带偏见的眼光看待这些选项。</st>
- en: <st c="13086">The following figure is of a decision tree on whether or not to
    build or buy a solution.</st> <st c="13176">Please note that</st> *<st c="13193">buy</st>*
    <st c="13196">doesn’t always mean spending money; it may also refer to the adoption
    of a free or open</st> <st c="13285">source tool:</st>
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13086">以下是一个关于是否自建或购买解决方案的决策树图。</st> <st c="13176">请注意，</st> *<st c="13193">购买</st>*
    <st c="13196">并不总是意味着花费金钱；它也可能指的是采用一个免费的或开源的</st> <st c="13285">工具：</st>
- en: '![Figure 9.1: Build versus buy decision tree](img/B31164_09_01.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.1：自建与购买决策树](img/B31164_09_01.jpg)'
- en: '<st c="13538">Figure 9.1: Build versus buy decision tree</st>'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13538">图 9.1：自建与购买决策树</st>
- en: <st c="13580">Following this</st> <st c="13596">decision tree should be done
    as a group.</st> <st c="13637">Some of the questions may have answers that are
    more subjective or that different team members have differing opinions on.</st>
    <st c="13760">Collaboration is key for moving these</st> <st c="13798">decisions
    sustainably.</st>
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13580">遵循这个</st> <st c="13596">决策树应当由团队共同完成。</st> <st c="13637">一些问题可能有更主观的答案，或者不同团队成员对此有不同的看法。</st>
    <st c="13760">协作是推动这些</st> <st c="13798">决策可持续发展的关键。</st>
- en: <st c="13820">Let’s work out an example decision tree together.</st> <st c="13871">In
    this case, our fictitious company</st> *<st c="13908">Financial One ACME</st>*
    <st c="13926">is looking to modernize an older technology stack.</st> <st c="13978">As
    they aim to do this, they’ll likely need to address technical challenges that
    didn’t exist for them previously, or look to integrate new functionality that
    wouldn’t have been possible in a system that didn’t use more</st> <st c="14198">modern
    architectures.</st>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13820">让我们一起分析一个决策树的例子。</st> <st c="13871">在这个例子中，我们虚构的公司</st> *<st c="13908">Financial
    One ACME</st>* <st c="13926">希望现代化其旧有的技术栈。</st> <st c="13978">在他们的目标下，他们可能需要解决以前没有遇到过的技术挑战，或者考虑整合一些新的功能，而这些功能在没有使用更</st>
    <st c="14198">现代架构的系统中是无法实现的。</st>
- en: <st c="14219">One such example of new or different functionality might be assessing
    the adoption of data transformation tools.</st> <st c="14333">With more data capabilities
    existing in a cloud-native architecture, either the product team, the platform
    team, or both might consider utilizing such a tool to make raw data</st> <st c="14508">more
    useful.</st>
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14219">一个新功能或不同功能的例子可能是评估数据转换工具的采用。</st> <st c="14333">随着更多数据能力在云原生架构中得到实现，产品团队、平台团队或两者可能会考虑利用这样的工具来使原始数据</st>
    <st c="14508">更加有用。</st>
- en: <st c="14520">For example, if the platform team wanted to collect usage metrics
    for the platform with Prometheus and help turn that into DORA metrics, a data
    transformation would be useful in that workflow.</st> <st c="14714">Similarly,
    other use cases for data transformation could be useful across the company, so
    the implementation would need to take several user needs</st> <st c="14861">into
    account.</st>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14520">例如，如果平台团队想要使用 Prometheus 收集平台的使用指标，并帮助将其转化为 DORA 指标，那么在这个工作流中，数据转换将会很有用。</st>
    <st c="14714">同样，数据转换的其他使用场景在公司内也可能有用，因此实施时需要考虑多个用户需求。</st> <st c="14861">。</st>
- en: <st c="14874">If we oversimplify this example, we would follow the decision
    tree</st> <st c="14942">as such:</st>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14874">如果我们对这个例子进行过度简化，我们将按照决策树进行操作</st> <st c="14942">如下：</st>
- en: '*<st c="14950">Q: What problem are we trying</st>* *<st c="14981">to solve?</st>*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="14950">Q：我们想解决的是什么问题</st>* *<st c="14981">？</st>*'
- en: '*<st c="14990">A: We need to enable automated</st>* *<st c="15022">data transformations.</st>*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="14990">A：我们需要启用自动化</st>* *<st c="15022">数据转换。</st>*'
- en: '*<st c="15043">Q: Is there an</st>* *<st c="15059">existing solution?</st>*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="15043">Q：是否有现有的</st>* *<st c="15059">解决方案？</st>*'
- en: '*<st c="15077">A: Yes – Apache Airflow and</st>* *<st c="15106">Argo Workflows.</st>*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="15077">A：是的 – Apache Airflow 和</st>* *<st c="15106">Argo Workflows。</st>*'
- en: <st c="15121">Note that in this case, the team has identified two potential
    solutions.</st> <st c="15195">From there, the next set of questions should be
    conducted for both solutions.</st> <st c="15273">Does it meet the requirements?</st>
    <st c="15304">Can the team maintain it?</st> <st c="15330">And can we afford it?</st>
    <st c="15352">Since both solutions are open source, the affordability question
    would be more about comparative costs to run, which may not be easily discernable
    up front.</st> <st c="15509">In assessing open source, the most important question
    when a tool meets the requirements is the team’s ability to maintain the solution.</st>
    <st c="15646">The capabilities of the team can’t be answered in a vacuum and require
    the team</st> <st c="15725">to weigh in on their capabilities and comfort for
    a new integration.</st> <st c="15795">If upskilling is required, that doesn’t
    mean that the technical debt isn’t reasonable to take on, but that time must be
    added to the schedule for everyone to get up to speed so that an answer of</st>
    *<st c="15990">This is potentially sustainable</st>* <st c="16021">doesn’t become</st>
    *<st c="16037">This</st>* *<st c="16042">is unsustainable</st>*<st c="16058">.</st>
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15121">请注意，在这种情况下，团队已经识别出了两个潜在的解决方案。</st> <st c="15195">从这里开始，接下来的问题应当针对这两个解决方案进行。</st>
    <st c="15273">它符合要求吗？</st> <st c="15304">团队能维持它吗？</st> <st c="15330">我们能负担得起吗？</st>
    <st c="15352">由于这两个解决方案都是开源的，负担得起的问题更可能是关于运行的相对成本，而这可能并不容易直接判断。</st> <st c="15509">在评估开源时，最重要的问题是，当一个工具符合要求时，团队是否有能力维护该解决方案。</st>
    <st c="15646">团队的能力不能在空白中回答，需要团队</st> <st c="15725">权衡他们的能力和对新集成的舒适度。</st> <st
    c="15795">如果需要提升技能，并不意味着技术债务不可接受，而是必须在时间表中添加时间，让每个人都能跟上进度，以便得出一个结论</st> *<st c="15990">这在潜力上是可持续的</st>*
    <st c="16021">，而不是</st> *<st c="16037">这</st>* *<st c="16042">是不可持续的</st>*<st
    c="16058">。</st>
- en: <st c="16059">The criticality of team buy-in</st>
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="16059">团队认同的重要性</st>
- en: <st c="16090">While many</st> <st c="16102">platform architects will be involved
    in the day-to-day running of an IDP, it’s equally likely that they will not be.</st>
    <st c="16219">As such, the folks who will be hands-on keyboard managing and maintaining
    the day-to-day need to be fully invested in the direction of the IDP and its offerings.</st>
    <st c="16381">This will often be the platform team, but if you’ve been building
    a platform that encourages self-service and collaboration with the entire engineering
    organization at large, the team will be much larger</st> <st c="16585">in scope.</st>
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16090">虽然许多</st> <st c="16102">平台架构师会参与IDP的日常运行，但同样有可能他们不会。</st> <st
    c="16219">因此，负责日常管理和维护的人需要充分投入IDP的方向及其产品。</st> <st c="16381">这通常是平台团队，但如果你构建的是一个鼓励自服务并与整个工程组织广泛合作的平台，那么团队的范围将会更大</st>
    <st c="16585">。</st>
- en: <st c="16594">There may be cases where it’s impossible to gain 100% consensus,
    at which stage it will be necessary to</st> *<st c="16699">disagree</st>* <st
    c="16707">and</st> *<st c="16712">commit</st>*<st c="16718">. Team consensus can
    reduce burnout, but that must be balanced with the need to ensure the IDP continues
    to evolve along</st> <st c="16839">its roadmap.</st>
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16594">可能会出现无法达成100%共识的情况，在这种情况下，就必须</st> *<st c="16699">不同意</st>* <st
    c="16707">并且</st> *<st c="16712">承诺</st>*<st c="16718">。团队共识可以减少倦怠，但必须与确保IDP沿着</st>
    <st c="16839">路线图继续发展的需求相平衡。</st>
- en: <st c="16851">Team buy-in is incredibly important in decisions that will require
    the team to upskill in some way, such as learning the tool itself or a new programming
    language.</st> <st c="17016">If the team is unwilling or unable to adapt to the
    technological solution, the solution will not provide value in the end, regardless
    of its other</st> <st c="17163">redeeming qualities.</st>
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16851">在需要团队提升某种技能的决策中，团队认同至关重要，例如学习工具本身或新的编程语言。</st> <st c="17016">如果团队不愿意或无法适应技术解决方案，那么无论它有多少其他</st>
    <st c="17163">可取之处，最终该解决方案都不会提供价值。</st>
- en: <st c="17183">Now that we’re familiar with the concept of technical debt, we
    can investigate mitigation strategies for that debt by</st> <st c="17302">leveraging
    data.</st>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17183">现在我们已经熟悉了技术债务的概念，我们可以通过</st> <st c="17302">利用数据</st>来研究缓解该债务的策略。</st>
- en: <st c="17318">Using data to drive design decisions</st>
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="17318">使用数据驱动设计决策</st>
- en: <st c="17355">So far, we’ve</st> <st c="17370">discussed the importance of observability
    data for self-service and developer satisfaction, but not all other use cases
    for the telemetry data an IDP can collect.</st> <st c="17533">Data is a powerful
    asset that can be used to aid decision-making and help in cost and time savings.</st>
    <st c="17633">For example, when looking at two solutions</st> <st c="17676">that
    seem to split the middle on solution fit and technical debt, it can be hard to
    know which direction to go.</st> <st c="17788">This is where you can leverage
    data to make your decisions, and to keep track of your</st> <st c="17874">technical
    debt.</st>
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17355">到目前为止，我们已经</st> <st c="17370">讨论了可观察性数据对自服务和开发者满意度的重要性，但并没有涉及IDP所收集的遥测数据的其他应用场景。</st>
    <st c="17533">数据是一个强大的资产，可以帮助决策，并在成本和时间节约方面发挥作用。</st> <st c="17633">例如，当你面对两个解决方案</st>
    <st c="17676">，它们在解决方案契合度和技术债务方面似乎各占一半时，很难知道该如何选择。</st> <st c="17788">这时，你可以利用数据来做出决策，并跟踪你的</st>
    <st c="17874">技术债务。</st>
- en: <st c="17889">Nearly all the data your team will need to leverage for decisions
    will either already be in your observability solution or be an easy addition</st>
    <st c="18033">to it.</st>
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17889">你团队需要用于决策的几乎所有数据，要么已经存在于你的可观察性解决方案中，要么可以轻松添加到其中。</st> <st c="18033">这些数据将非常容易获得。</st>
- en: <st c="18039">Observability is key</st>
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="18039">可观察性至关重要</st>
- en: <st c="18060">After spending</st> <st c="18076">all the time and effort to set
    up an observability stack and collect and retain data, it would be almost irresponsible
    to only use that data for incident management and response.</st> <st c="18255">Fortunately,
    platform teams are rarely accused of being irresponsible, so it’s likely you already
    know that this data can be used in more meaningful ways.</st> <st c="18410">Applying
    observability data to decision-making and using it to identify and manage technical
    debt are key use cases for your observability stack that are sometimes overlooked
    or under-emphasized.</st> <st c="18606">In</st> [*<st c="18609">Chapter 6</st>*](B31164_06.xhtml#_idTextAnchor341)<st
    c="18618">, we talked about where and how that observability will be applied,
    but let’s look at those same aspects now for</st> <st c="18731">technical debt.</st>
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18060">经过</st> <st c="18076">花费大量时间和精力搭建可观察性堆栈、收集和保存数据之后，如果仅将这些数据用于事件管理和响应，那几乎是不负责任的做法。</st>
    <st c="18255">幸运的是，平台团队很少被指责为不负责任，因此你很可能已经知道，这些数据可以以更有意义的方式使用。</st> <st c="18410">将可观察性数据应用于决策，并利用它来识别和管理技术债务，是你的可观察性堆栈的关键应用场景，虽然有时这些场景会被忽视或强调不足。</st>
    <st c="18606">在</st> [*<st c="18609">第六章</st>*](B31164_06.xhtml#_idTextAnchor341)<st
    c="18618">中，我们讨论了可观察性如何以及在哪里应用，但现在让我们来看一下同样的方面，应用于</st> <st c="18731">技术债务。</st>
- en: <st c="18746">Operational data and toil</st>
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="18746">操作数据和繁琐工作</st>
- en: <st c="18772">We briefly</st> <st c="18783">introduced the concept of a</st>
    **<st c="18812">service-level objective</st>** <st c="18835">(</st>**<st c="18837">SLO</st>**<st
    c="18840">) in</st> [*<st c="18846">Chapter 3</st>*](B31164_03.xhtml#_idTextAnchor133)<st
    c="18855">. We looked at it again in</st> [*<st c="18882">Chapter 6</st>*](B31164_06.xhtml#_idTextAnchor341)<st
    c="18891">, as a</st> <st c="18898">key factor in ensuring customer happiness.</st>
    <st c="18941">However, SLO data can also be used to examine and identify</st>
    <st c="19000">technical debt.</st>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18772">我们简要</st> <st c="18783">介绍了</st> **<st c="18812">服务级别目标</st>**
    <st c="18835">（</st>**<st c="18837">SLO</st>**<st c="18840">）的概念，在</st> [*<st
    c="18846">第三章</st>*](B31164_03.xhtml#_idTextAnchor133)<st c="18855">中我们曾提到过它。我们在</st>
    [*<st c="18882">第六章</st>*](B31164_06.xhtml#_idTextAnchor341)<st c="18891">中再次讨论了它，作为确保客户满意度的关键因素。</st>
    <st c="18941">然而，SLO 数据也可以用来检查和识别</st> <st c="19000">技术债务。</st>
- en: <st c="19015">A SLO is a target.</st> <st c="19035">Rarely is that target defined
    in the first round at the most ideal state since it can be impossible to achieve
    that out of the gate on a new project.</st> <st c="19185">A good SLO definition
    for a new project will be far more conservative but have a roadmap to the final
    desired target.</st> <st c="19303">Good SLOs are SLOs that evolve with the system</st>
    <st c="19350">they measure.</st>
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19015">SLO 是一个目标。</st> <st c="19035">通常，这个目标在初期并不会被定义为最理想的状态，因为在新项目启动时很难立刻实现这一点。</st>
    <st c="19185">对于新项目来说，一个好的 SLO 定义会更加保守，但会有一条通向最终目标的路线图。</st> <st c="19303">好的
    SLO 是那些随着系统</st> <st c="19350">演变而不断变化的 SLO。</st>
- en: <st c="19363">For example, if the ideal SLO is that 99% of application deployments
    over 28 days will be successful, then an initial target may be as low as 60%.</st>
    <st c="19511">In a situation where everything is greenfield, it’s reasonable to
    start at a much higher target, but if we look at</st> *<st c="19626">Financial
    One ACME</st>*<st c="19644">, which</st> <st c="19651">is a company that is migrating
    a significant legacy offering, you know that the team there is starting in a disadvantaged
    position.</st> <st c="19784">Therefore, setting reasonably achievable targets
    and defining the next after those have been met is a more sustainable approach.</st>
    <st c="19913">This allows the team to stack rank the issues that are impeding
    success and demonstrate wins.</st> <st c="20007">You may be asking yourself, “</st>*<st
    c="20036">Is this gamification?</st>*<st c="20058">”</st> *<st c="20061">Yes.</st>
    <st c="20066">Yes, it is</st>*<st c="20076">. However, positive feedback loops
    are proven effective for reducing burnout and increasing developer happiness.</st>
    <st c="20189">Teams should be set up to win,</st> <st c="20220">not fail.</st>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果理想的SLO是28天内99%的应用部署将成功，那么最初的目标可能低至60%。<st c="19363">在一切都是绿地（从零开始）的情况下，设置一个更高的目标是合理的</st>，但如果我们看看*<st
    c="19626">Financial One ACME</st>*<st c="19644">，这是一个正在迁移大量遗留产品的公司，你会知道那里团队的起点处于不利位置。</st>
    <st c="19651">因此，设定合理可实现的目标，并在达成这些目标后定义下一个目标，是一种更可持续的方法。</st> <st c="19784">这样可以让团队优先处理阻碍成功的问题，并展示成果。</st>
    <st c="19913">你可能会问自己，“</st>*<st c="20036">这就是游戏化吗？</st>*<st c="20058">”</st>
    *<st c="20061">是的。</st> <st c="20066">是的，就是游戏化</st>*<st c="20076">。然而，正向反馈循环已被证明能有效减少倦怠并提高开发人员的幸福感。</st>
    <st c="20189">团队应该被设置为成功，而不是失败。</st>
- en: <st c="20229">SLOs are not the only operational data that matters, however.</st>
    <st c="20292">It’s entirely possible to maintain an SLO through manual intervention
    and not automation.</st> <st c="20382">This is where reliability engineers typically
    start discussing th</st><st c="20447">e concept of toil.</st> <st c="20467">Toil
    is a boring, repetitive task that must be done regularly or manually.</st> <st
    c="20542">Even a partially automated process is still toil if it requires a human
    to push the button to get</st> <st c="20640">it started.</st>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，SLO并不是唯一重要的操作数据。</st> <st c="20292">完全有可能通过手动干预而不是自动化来维持SLO。</st> <st c="20382">这正是可靠性工程师通常开始讨论辛劳概念的地方。</st>
    <st c="20447">辛劳是必须定期或手动完成的无聊、重复的任务。</st> <st c="20467">即使是部分自动化的过程，如果它仍然需要人类按下按钮启动，那么它仍然是辛劳。</st>
- en: <st c="20651">Some toil is</st> <st c="20664">acceptable, such as manually starting
    a release pipeline for an organization that’s not ready for a full CI/CD implementation.</st>
    <st c="20792">But other toil is not, such as an engineer executing the release
    for each component of the software every time an upgrade is necessary.</st> <st
    c="20928">Since toil is done by humans, it can be harder to track since tracking
    toil is toil itself.</st> <st c="21020">However, to manage technical debt, maintaining
    an awareness of toil and creating an action plan to reduce it is critical for
    ensuring the team has an acceptable level of cognitive load and a continued ability</st>
    <st c="21229">to innovate.</st>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有些辛劳是<st c="20651">可以接受的</st>，比如为一个还没有准备好全面实施CI/CD的组织手动启动发布流水线。<st c="20664">但有些辛劳是不可接受的</st>，比如每当需要升级时，工程师手动执行软件每个组件的发布。<st
    c="20792">由于辛劳是由人类完成的，因此它更难追踪，因为追踪辛劳本身就是辛劳。</st> <st c="20928">然而，为了管理技术债务，保持对辛劳的意识并制定减少辛劳的行动计划对确保团队有可接受的认知负载水平和持续创新能力至关重要。</st>
- en: <st c="21241">Toil for the team and the developers must be looked at both on
    a case-by-case basis and holistically to avoid death by a thousand papercuts.</st>
    <st c="21383">Just as we interrogate each piece of data we store or each new component
    we add, every manual task must meet the</st> <st c="21496">same scrutiny:</st>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21241">团队和开发人员的辛劳必须根据具体情况和整体情况进行审视，以避免千刀万剐的折磨。</st> <st c="21383">就像我们审查每个存储的数据或每个新增的组件一样，每一项手动任务都必须接受相同的审查：</st>
- en: <st c="21510">Why do we need to</st> <st c="21529">do this?</st>
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么我们需要<st c="21510">做这件事</st>？
- en: <st c="21537">How long does</st> <st c="21552">it take?</st>
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它需要多长时间？
- en: <st c="21560">How long do we need to</st> <st c="21584">do it?</st>
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要做这个多久？
- en: <st c="21590">Can we</st> <st c="21598">automate it?</st>
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们能否<st c="21590">自动化</st>它？
- en: <st c="21610">If the answer to “</st>*<st c="21629">Can we automate it?</st>*<st
    c="21649">” is “</st>*<st c="21656">Yes,</st>*<st c="21661">” then that must be
    immediately prioritized and ranked in the backlog of team items, preferably highly
    since developer time is one of the most valuable assets of the organization aside
    from data.</st> <st c="21858">Each team’s tolerance for toil will vary as it can
    depend on the composition of the team and their skills.</st> <st c="21965">The</st>
    *<st c="21969">Google SRE</st>* <st c="21979">(</st>[<st c="21981">https://sre.google/sre-book/table-of-contents/</st>](https://sre.google/sre-book/table-of-contents/)<st
    c="22027">) book defines a target maximum for toil at 50%, but teams are going
    to have their own tolerances based on team personality and other</st> <st c="22162">organizational
    factors.</st>
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21610">如果“</st>*<st c="21629">我们能自动化吗？</st>*<st c="21649">”的回答是“</st>*<st
    c="21656">是的，</st>*<st c="21661">”那么必须立即将其优先级排序，并加入团队待办事项的积压中，最好是高优先级，因为开发者的时间是组织中最宝贵的资产之一，仅次于数据。</st>
    <st c="21858">每个团队对劳作的容忍度会有所不同，这取决于团队的组成和他们的技能。</st> <st c="21965">*Google SRE*</st>
    <st c="21979">(</st>[<st c="21981">https://sre.google/sre-book/table-of-contents/</st>](https://sre.google/sre-book/table-of-contents/)<st
    c="22027">)一书将劳作的最大目标定义为50%，但团队会根据团队的性格和其他</st> <st c="22162">组织因素，拥有自己的容忍度。</st>
- en: <st c="22185">Let’s look at an extremely time-consuming task that needs to be
    done only once.</st> <st c="22266">Imagine one you’ve done before; it doesn’t
    have to be anything in particular.</st> <st c="22344">Some engineers will see
    the manual task and will just get it out of the way.</st> <st c="22421">Others
    will assess the task, and they’ll automate it even if it’s a one-off and even
    if that makes the process</st> <st c="22532">take longer.</st>
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22185">让我们看一个非常耗时但只需要做一次的任务。</st> <st c="22266">假设是你之前做过的任务；它不一定是某个特定任务。</st>
    <st c="22344">一些工程师看到手动任务后会直接把它做掉。</st> <st c="22421">其他人则会评估任务，并将其自动化，即使这是一个一次性任务，哪怕这样会让过程</st>
    <st c="22532">变得更长。</st>
- en: <st c="22544">This might be because automation that’s been peer-reviewed feels
    safer to use than steps that can risk human error or because they want to never
    have to do it again and they’d rather not risk being wrong about the task being
    a one-off task.</st> <st c="22786">This may also be simply because codifying what
    was done ensures it’s not lost to time and tribal knowledge.</st> <st c="22894">Both
    doing the task and creating the automation for it were examples of toil, but despite
    taking longer, the process of automation handles technical</st> <st c="23043">debt
    better.</st>
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22544">这可能是因为经过同行评审的自动化使用起来比那些可能导致人为错误的步骤更安全，或者因为他们希望永远不再做这件事，他们宁愿不冒着任务是一次性任务的错误风险。</st>
    <st c="22786">这也可能仅仅是因为对所做的事情进行编码化可以确保它不会随着时间流逝而被遗忘，或被部落知识所遗弃。</st> <st c="22894">无论是执行任务还是为其创建自动化，都是劳作的例子，但尽管花费的时间更长，自动化过程更好地处理了技术</st>
    <st c="23043">债务。</st>
- en: <st c="23055">Finding your actual tolerance for toil will be a case of trial
    and error, but one tactic for keeping on top of toil is to set a SLO against it.</st>
    <st c="23200">By treating time spent on toil as a SLO, when that SLO is breached
    because, say, no more than 50% of our time is spent on toil, then a root cause
    should be conducted to determine why more time is/was spent and identify the corrective
    actions to get toil back within expected boundaries.</st> <st c="23487">However,
    teams should feel safe in doing things correctly, even if that means the error
    budget for toil is burned for one</st> <st c="23609">reporting period.</st>
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23055">找到你对劳作的实际容忍度将是一个反复试探的过程，但保持对劳作掌控的一个策略是为其设定服务水平目标（SLO）。</st> <st
    c="23200">通过将花费在劳作上的时间视为SLO，当该SLO被突破时，比如说我们花费在劳作上的时间不超过50%，那么就应该进行根本原因分析，找出为什么花费更多时间，识别出纠正措施，以将劳作恢复到预期范围内。</st>
    <st c="23487">然而，团队应该感到在正确地做事时是安全的，即使这意味着劳作的错误预算在一个</st> <st c="23609">报告期内已被消耗。</st>
- en: <st c="23626">DORA metrics</st>
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="23626">DORA 指标</st>
- en: <st c="23639">If we look back</st> <st c="23655">on the DORA metrics and ratings
    we defined in</st> [*<st c="23702">Chapter 2</st>*](B31164_02.xhtml#_idTextAnchor055)<st
    c="23711">, it’s easy to see how these metrics can help you remain aware of your</st>
    <st c="23782">technical debt:</st>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23639">如果我们回顾</st> <st c="23655">我们在</st> [*<st c="23702">第二章</st>*](B31164_02.xhtml#_idTextAnchor055)<st
    c="23711">中定义的DORA指标和评级，就很容易看出这些指标如何帮助你保持对技术债务的关注：</st>
- en: '|  | **<st c="23797">Elite</st>** | **<st c="23803">High</st>** | **<st c="23808">Medium</st>**
    | **<st c="23815">Low</st>** |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '|  | **<st c="23797">精英</st>** | **<st c="23803">高</st>** | **<st c="23808">中</st>**
    | **<st c="23815">低</st>** |'
- en: '| **<st c="23819">Deployment</st>** **<st c="23831">Frequency</st>** | <st
    c="23840">On-demand</st> | <st c="23850">Between once a day and once</st> <st
    c="23879">a week</st> | <st c="23885">Between once a week and once</st> <st c="23915">per
    month</st> | <st c="23924">Between once per week and once</st> <st c="23956">per
    month</st> |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="23819">部署</st>** **<st c="23831">频率</st>** | <st c="23840">按需</st>
    | <st c="23850">每天一次到每周一次之间</st> | <st c="23885">每周一次到每月一次之间</st> | <st c="23924">每周一次到每月一次之间</st>
    |'
- en: '| **<st c="23965">Change</st>** **<st c="23973">Lead Time</st>** | <st c="23982">Less
    than</st> <st c="23993">1 day</st> | <st c="23998">Between 1 day and</st> <st
    c="24017">1 week</st> | <st c="24023">Between 1 week and</st> <st c="24043">1
    month</st> | <st c="24050">Between 1 week and</st> <st c="24070">1 month</st>
    |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="23965">变更</st>** **<st c="23973">交付时间</st>** | <st c="23982">少于</st>
    <st c="23993">1天</st> | <st c="23998">1天到</st> <st c="24017">1周之间</st> | <st c="24023">1周到</st>
    <st c="24043">1个月之间</st> | <st c="24050">1周到</st> <st c="24070">1个月之间</st> |'
- en: '| **<st c="24077">Change</st>** **<st c="24085">Failure Rate</st>** | <st c="24097">5%</st>
    | <st c="24100">10%</st> | <st c="24104">15%</st> | <st c="24108">64%</st> |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="24077">变更</st>** **<st c="24085">失败率</st>** | <st c="24097">5%</st>
    | <st c="24100">10%</st> | <st c="24104">15%</st> | <st c="24108">64%</st> |'
- en: '| **<st c="24112">Failed Deployment</st>** **<st c="24131">Recovery Time</st>**
    | <st c="24144">Less than</st> <st c="24155">1 hour</st> | <st c="24161">Less
    than</st> <st c="24172">1 day</st> | <st c="24177">Between 1 day and</st> <st
    c="24196">1 week</st> | <st c="24202">Between 1 month and</st> <st c="24223">6
    months</st> |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="24112">失败部署</st>** **<st c="24131">恢复时间</st>** | <st c="24144">少于</st>
    <st c="24155">1小时</st> | <st c="24161">少于</st> <st c="24172">1天</st> | <st c="24177">1天到</st>
    <st c="24196">1周之间</st> | <st c="24202">1个月到</st> <st c="24223">6个月之间</st> |'
- en: '<st c="24231">Table 9.1: DORA metrics competencies</st>'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24231">表9.1：DORA指标能力</st>
- en: <st c="24268">If you’ve implemented</st> <st c="24291">something such</st> <st
    c="24306">as</st> **<st c="24309">Keptn</st>** <st c="24314">or another DORA metrics
    gathering solution within your IDP, then you’ve likely started tracking these
    metrics on every component within your IDP.</st> <st c="24461">As you track these
    metrics over time, you may notice</st> <st c="24514">certain trends.</st>
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在你的IDP中实施了诸如**Keptn**之类的DORA指标收集解决方案，那么你可能已经开始在IDP中的每个组件上跟踪这些指标。随着你随着时间的推移跟踪这些指标，你可能会注意到某些趋势。
- en: <st c="24529">For example, if lead time to change or deployment failure rates
    are still in the low to medium range after 6 months, then it would be worth investigating
    the reasons behind that to see if there’s unaddressed</st> <st c="24738">technical
    debt.</st>
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果在6个月后更改的交付时间或部署失败率仍处于低到中等范围内，那么值得调查背后的原因，看看是否有未解决的**技术债务**。
- en: <st c="24753">Application performance data</st>
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="24753">应用程序性能数据</st>
- en: <st c="24782">Relevant to</st> <st c="24795">DORA metrics but adjacent in other
    ways is the performance data for the applications and components within an IDP.</st>
    <st c="24910">While the platform team isn’t responsible for end user applications,
    the platform knows the state of the pods and containers the application uses.</st>
    <st c="25057">It can also know the success of API calls and response times.</st>
    <st c="25119">The platform team must enable the developers they serve to understand
    that state as well so that they can evaluate those metrics and determine if something
    is amiss.</st> <st c="25285">This will allow developers to manage their technical
    debt.</st> <st c="25344">This is a key aspect of the serviceability and self-service
    of the platform for the ongoing success of the company.</st> <st c="25460">Remember
    that the platform, once in use, is the most critical application within the company;
    it needs to support the success of itself and the end-user-facing</st> <st c="25620">application
    equally.</st>
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与DORA指标相关，但在其他方面相邻的是IDP中应用程序和组件的性能数据。尽管平台团队不负责最终用户应用程序，但平台知道应用程序使用的Pods和容器的状态。它还可以了解API调用的成功与响应时间。平台团队必须使他们服务的开发人员也能理解这些状态，以便他们能够评估这些指标，并确定是否存在问题。这将使开发人员能够管理他们的技术债务。这是平台的可服务性和自助服务的关键方面，对公司持续的成功至关重要。记住，一旦平台投入使用，它是公司中最关键的应用程序；它需要支持自己的成功以及面向最终用户的应用程序的成功。
- en: <st c="25640">An application may be architected in a highly available way, fully
    leveraging the power of the K8s platform, but this could also allow it to unintentionally
    disguise problems or patterns that may be concerning.</st> <st c="25852">As such,
    application performance should be measured and surfaced regularly.</st> <st c="25928">As
    an example, in a system designed for high availability, a pod with three</st>
    *<st c="26004">ReplicaSets</st>* <st c="26015">may allow the application to run
    uninterrupted or with the appearance of no interruptions, even if there’s an occasional
    OOM or other crash.</st> <st c="26157">However, the platform would know about
    those crashes and observability can be used to ensure that the developers who
    own the application are aware</st> <st c="26304">as well.</st>
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25640">一个应用程序可以以高度可用的方式架构，充分利用K8s平台的强大功能，但这也可能使其无意中掩盖一些可能令人担忧的问题或模式。</st>
    <st c="25852">因此，应用程序的性能应定期进行衡量和展示。</st> <st c="25928">例如，在一个为高可用性设计的系统中，一个拥有三个</st>
    *<st c="26004">ReplicaSets</st>* <st c="26015">的Pod可能允许应用程序在没有中断的情况下运行，或者看起来像没有中断，即使偶尔发生OOM或其他崩溃。</st>
    <st c="26157">然而，平台会知道这些崩溃，并且可观察性可以用来确保拥有该应用程序的开发人员也能意识到这些问题</st> <st c="26304">。</st>
- en: <st c="26312">In</st> [*<st c="26316">Chapter 6</st>*](B31164_06.xhtml#_idTextAnchor341)<st
    c="26325">, we discussed ways for the platform to support observability, be a
    little prescriptive where necessary, and allow developer self-service.</st> <st
    c="26464">Let’s look at an example of where the IDP can be prescriptive about
    what’s being measured since the state of the application is visible most easily
    to</st> <st c="26615">the platform.</st>
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26312">在</st> [*<st c="26316">第6章</st>*](B31164_06.xhtml#_idTextAnchor341)<st
    c="26325">中，我们讨论了平台如何支持可观察性，在必要时提供一些规范，并允许开发人员自助服务。</st> <st c="26464">让我们来看一个例子，看看IDP如何在测量内容时提供一些规范，因为应用程序的状态对平台来说最容易看到。</st>
- en: <st c="26628">Identifying other critical data</st>
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="26628">识别其他关键数据</st>
- en: <st c="26660">In</st> [*<st c="26664">Chapter 2</st>*](B31164_02.xhtml#_idTextAnchor055)<st
    c="26673">, we</st> <st c="26678">defined KPIs to help advance the adoption of
    the IDP.</st> <st c="26732">Those same data points and metrics that drive adoption
    can be leveraged to help drive innovation and manage technical debt as well.</st>
    <st c="26864">Additionally, when measuring adoption, a natural consequence is
    that you’ve measured any failures around adoption.</st> <st c="26979">Those failures
    are a key data point that can help your team understand how developers are relating
    to</st> <st c="27081">the platform.</st>
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26660">在</st> [*<st c="26664">第2章</st>*](B31164_02.xhtml#_idTextAnchor055)<st
    c="26673">中，我们</st> <st c="26678">定义了KPIs，以帮助推进IDP的采用。</st> <st c="26732">那些推动采用的相同数据点和指标，也可以被用来推动创新并管理技术债务。</st>
    <st c="26864">此外，在衡量采用时，自然的结果是，你已经衡量了围绕采用的任何失败。</st> <st c="26979">这些失败是一个关键数据点，可以帮助你的团队了解开发人员如何与</st>
    <st c="27081">平台进行互动。</st>
- en: <st c="27094">In</st> [*<st c="27098">Chapter 6</st>*](B31164_06.xhtml#_idTextAnchor341)<st
    c="27107">, how to integrate the platform into the company’s way of working was
    highlighted and we gave the example of a failure to adopt Tekton in favor of GitHub
    Workflows.</st> <st c="27272">This is an example of managing technical debt, as
    well as an underutilized component that may not be providing</st> <st c="27382">sufficient</st>
    **<st c="27394">return on investment</st>** <st c="27414">(</st>**<st c="27416">ROI</st>**<st
    c="27419">) to justify the ongoing cost of maintenance.</st> <st c="27466">Usage
    metrics such as the number of logins or – in the case of Tekton – jobs scheduled
    per day, week, and month constitute important metrics.</st> <st c="27608">If the
    platform or a component of the platform is failing to see an increase in utilization
    over time, especially compared to the platform holistically, then it’s time to
    evaluate</st> <st c="27788">that component.</st>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27094">在</st> [*<st c="27098">第6章</st>*](B31164_06.xhtml#_idTextAnchor341)<st
    c="27107">中，重点介绍了如何将平台整合到公司工作的方式，并举例说明未能采用Tekton而选择GitHub Workflows。</st> <st
    c="27272">这是一个管理技术债务的例子，同时也是一个未充分利用的组件，可能没有提供</st> <st c="27382">足够的</st> **<st
    c="27394">投资回报率</st>** <st c="27414">(</st>**<st c="27416">ROI</st>**<st c="27419">)来证明持续的维护成本是合理的。</st>
    <st c="27466">例如登录次数、或在Tekton的案例中，每天、每周、每月计划的作业数等使用指标是重要的衡量标准。</st> <st c="27608">如果平台或平台的某个组件未能随着时间的推移看到利用率的增长，特别是与整体平台的比较，则是时候评估</st>
    <st c="27788">该组件了。</st>
- en: <st c="27803">Is the component providing ROI, is it reducing cognitive load,
    is it meeting SLO targets, and are developers happy with it?</st> <st c="27928">If
    the platform or a component is failing along these lines, then it has more marks
    on the technical debt side of the ledger compared to</st> <st c="28065">the returns.</st>
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27803">组件是否提供投资回报，是否减少认知负荷，是否达到 SLO 目标，开发人员是否满意？</st> <st c="27928">如果平台或组件在这些方面出现问题，那么它在技术债务方面的负担比回报更重。</st>
- en: <st c="28077">Data retention is technical debt</st>
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="28077">数据保留是技术债务</st>
- en: <st c="28110">While</st> <st c="28116">observability data is incredibly useful
    to decisions for the future of the platform, it’s important to keep only as much
    data as you need.</st> <st c="28256">As the amount of stored data increases, you’re
    likely to find that keeping it has diminishing returns and upkeep is a large effort.</st>
    <st c="28388">The more data storage a system requires, the more critical the design
    of that data storage becomes as it can start to negatively impact system performance
    as the amount of stored data grows.</st> <st c="28579">Additionally, since data
    is the most critical asset and the most at risk in the event of a security incident,
    keeping only what is strictly necessary helps manage the surface level of risk
    and effort involved in measuring the impact of any data leak event.</st> <st c="28836">While
    we authors can’t guarantee how much or how little data you need to keep application
    performance metrics while carefully deciding to keep the data and following the
    best practices, what we’ve laid out here and in</st> [*<st c="29054">Chapter 7</st>*](B31164_07.xhtml#_idTextAnchor381)
    <st c="29063">should help ensure the data that is kept is manageable.</st> <st
    c="29120">Something to keep in mind is that the platform, the users, and the technology
    will</st> <st c="29203">all be very different year over year, so data that’s retained
    for longer periods becomes less and less applicable as the platform continues
    to modernize with the industry.</st> <st c="29375">It’s best to ensure that any
    data that’s kept has a compelling reason to be there; otherwise, it’s just another
    tick on the debt side of</st> <st c="29512">the ledger.</st>
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28110">虽然</st> <st c="28116">可观察性数据对未来平台的决策非常有用，但保留的数据量只需保持所需的最低限度。</st>
    <st c="28256">随着存储数据量的增加，您可能会发现保留数据的回报递减，而维护成本却很大。</st> <st c="28388">系统所需的数据存储越多，数据存储设计就越关键，因为存储数据量的增加可能开始对系统性能产生负面影响。</st>
    <st c="28579">此外，由于数据是最关键的资产，在安全事件发生时最容易受到威胁，因此仅保留必要的数据有助于管理任何数据泄漏事件的风险表面和相关工作。</st>
    <st c="28836">虽然我们不能保证您需要保留多少数据来保持应用程序性能指标，但谨慎地决定保留数据并遵循最佳实践，我们在</st> [*<st c="29054">第
    7 章</st>*](B31164_07.xhtml#_idTextAnchor381) <st c="29063">中所阐述的内容应有助于确保保留的数据是可管理的。</st>
    <st c="29120">需要记住的是，平台、用户和技术每年都会有很大变化，因此保留时间较长的数据在平台随行业现代化的同时会变得越来越不适用。</st>
    <st c="29375">最好确保任何保留的数据都有充分的理由存在；否则，它只是债务表上的另一个标记。</st>
- en: <st c="29523">Now that we know more about how we can use data to identify and
    manage technical debt, let’s apply it more practically to</st> <st c="29646">our
    platform.</st>
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="29523">现在我们更了解如何利用数据来识别和管理技术债务，让我们更实际地应用它到</st> <st c="29646">我们的平台。</st>
- en: <st c="29659">Maintaining and reworking technical debt</st>
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="29659">维护和重构技术债务</st>
- en: <st c="29700">Every</st> <st c="29707">aspect of creating an IDP up to now represents
    a technical debt.</st> <st c="29772">Idealists</st> <st c="29782">would tell you
    that if you’ve made smart decisions, there is no technical debt, but frankly,
    that’s not accurate.</st> <st c="29896">A once-thriving open source project can
    be shuttered with no notice or an unexpected CVE can appear.</st> <st c="29997">There
    will always be debt, regardless of best efforts.</st> <st c="30052">What’s critical
    for organizational health is the ability to manage the fallout from such events
    and maintain a reasonable pace</st> <st c="30179">for innovation.</st>
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="29700">创建 IDP 的每一个方面到目前为止都代表着技术债务。</st> <st c="29772">理想主义者</st> <st
    c="29782">会告诉你，如果你做出了明智的决策，就不会有技术债务，但坦率地说，这并不准确。</st> <st c="29896">曾经繁荣的开源项目可能会毫无预警地关闭，或者意外的
    CVE 可能会出现。</st> <st c="29997">无论如何，尽管做出了最大努力，总会存在债务。</st> <st c="30052">对于组织健康而言，关键在于能够应对这类事件的后果，并保持合理的创新步伐。</st>
- en: <st c="30194">Own your technical debt</st>
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="30194">拥有你的技术债务</st>
- en: <st c="30218">Owning your</st> <st c="30231">architecture means owning the technical
    debt that it incurs.</st> <st c="30292">While this sounds like an abstract concept,
    it’s very easy to realize the breadth of impact when we start assessing the components
    of our architecture.</st> <st c="30444">Remember this important note from</st>
    [*<st c="30478">Chapter 2</st>*](B31164_02.xhtml#_idTextAnchor055)<st c="30487">?</st>
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="30218">拥有你的</st> <st c="30231">架构意味着要承担它所产生的技术债务。</st> <st c="30292">虽然这听起来像是一个抽象的概念，但当我们开始评估架构的各个组件时，很容易意识到其影响的广度。</st>
    <st c="30444">记住来自</st> [*<st c="30478">第2章</st>*](B31164_02.xhtml#_idTextAnchor055)<st
    c="30487">的重要提示?</st>
- en: <st c="30488">Important note</st>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="30488">重要提示</st>
- en: <st c="30502">The environment you choose for your platform automatically prescribes
    some parts of your platform, whether you like it or not!</st> <st c="30630">Increasing
    the number of cloud and infrastructure providers exponentially increases the challenges
    for your</st> <st c="30738">platform design.</st>
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="30502">你为平台选择的环境会自动规定平台的一些部分，无论你是否喜欢！</st> <st c="30630">增加云和基础设施提供商的数量会成倍增加平台设计的挑战。</st>
- en: <st c="30754">The infrastructure</st> <st c="30773">required to support the
    IDP can be one of the most sprawling items on the technical ledger.</st> <st c="30866">Ownership
    means that the debt and the surface area of risks associated with it are well-defined
    and understood.</st> <st c="30978">Sometimes, that risk may mean security or compliance-related
    risks, but usually, in the context of technical debt, we mean risk to the team’s
    ability to maintain and deliver a product without burning out.</st> <st c="31183">It’s
    on the platform architect to embody that ownership, but they can’t be a superhero
    here.</st> <st c="31276">Ownership of technical debt, including reacting to unexpected
    situations, is a</st> <st c="31355">team effort.</st>
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="30754">支持IDP所需的基础设施</st> <st c="30773">可能是技术账本上最庞大的项目之一。</st> <st c="30866">拥有意味着债务及与之相关的风险表面面积是明确定义和理解的。</st>
    <st c="30978">有时候，这种风险可能意味着安全或合规相关的风险，但通常在技术债务的背景下，我们指的是影响团队维护和交付产品能力的风险，而不是使团队陷入过度劳累的风险。</st>
    <st c="31183">平台架构师负责体现这种所有权，但他们不能在这里成为超级英雄。</st> <st c="31276">技术债务的所有权，包括应对意外情况，是一项</st>
    <st c="31355">团队共同努力的任务。</st>
- en: <st c="31367">Technical debt and team ceremonies</st>
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="31367">技术债务与团队仪式</st>
- en: <st c="31402">The most straightforward</st> <st c="31427">way to engage the
    entire team in the ownership of technical debt is to bake it into the ceremonies
    the team participates in.</st> <st c="31553">The final look of this should be
    designed by the team.</st> <st c="31608">In an agile working environment, this
    can include a dedicated review of technical debt during the planning phase of
    each sprint or project, and it can also look like dedicated time per sprint spent
    on reducing technical debt, such as toil reductions or tackling identified opportunities</st>
    <st c="31895">for improvement.</st>
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="31402">让整个团队共同承担技术债务的最直接方法是将其融入团队参与的仪式中。</st> <st c="31427">这一点的最终形式应该由团队设计。</st>
    <st c="31553">在敏捷工作环境中，这可以包括在每个迭代或项目的规划阶段专门评审技术债务，也可以表现为每个迭代中专门用于减少技术债务的时间，如减少重复性劳动或处理已识别的改进机会</st>
    <st c="31895">。</st>
- en: <st c="31911">If your platform team is working in a Kanban fashion, ensuring
    the backlog is stack-ranked so that technical debt items get picked up among the
    rest of the work can also be a</st> <st c="32087">good strategy.</st>
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="31911">如果你的平台团队采用看板（Kanban）方式工作，确保将待办事项按优先级堆叠，以便技术债务项目能在其他工作中被拾取，这也是一个</st>
    <st c="32087">不错的策略。</st>
- en: <st c="32101">Important note</st>
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32101">重要提示</st>
- en: '<st c="32116">There’s a very real and very serious risk of these items being
    constantly de-prioritized in favor of something else.</st> <st c="32234">However,
    this has a snowball effect: the level of effort required to address technical
    debt will become greater the longer work</st> <st c="32362">is deferred.</st>'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32116">这些项目可能会因其他事项的优先级更高而被不断地降级，这是一个非常现实且严重的风险。</st> <st c="32234">然而，这会产生滚雪球效应：解决技术债务所需的努力程度会随着工作</st>
    <st c="32362">推迟的时间越长而变得更大。</st>
- en: <st c="32374">It’s important to develop immutable ways of keeping technical
    debt under control.</st> <st c="32457">Many organizations have different strategies
    for solving unexpected problems.</st> <st c="32535">What’s important is to master
    the sociotechnical aspects of your organization to ensure the scales do not tip
    out</st> <st c="32649">of balance.</st>
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32374">制定不可变的方式以控制技术债务非常重要。</st> <st c="32457">许多组织采用不同的策略来解决意外问题。</st>
    <st c="32535">重要的是掌握组织的社会技术方面，确保平衡不被打破。</st> <st c="32649">不偏离平衡。</st>
- en: <st c="32660">Platform composability</st>
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="32660">平台可组合性</st>
- en: <st c="32683">The</st> <st c="32688">composable nature of the platform lends
    itself well to being reworked.</st> <st c="32759">The components of the IDP should
    be fairly standalone with few – if any – interdependencies.</st> <st c="32852">Thus,
    the team should feel empowered to decide to leverage this aspect of the platform
    and deprecate and replace components</st> <st c="32976">where appropriate.</st>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32683">平台的可组合性使其非常适合进行重新设计。</st> <st c="32688">IDP 的组件应该是相对独立的，几乎没有（如果有的话）相互依赖。</st>
    <st c="32759">因此，团队应该有权决定利用平台的这一特性，并在适当的情况下弃用并替换组件。</st> <st c="32976">适当时进行替换。</st>
- en: <st c="32994">The team would need to take this decision carefully as replacing
    an existing component is a little more complicated than just adding a new one.</st>
    <st c="33139">In addition to answering the questions for evaluating new technical
    debt, another set of questions must be answered for retiring</st> <st c="33268">the
    old.</st>
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32994">团队需要谨慎做出这一决策，因为替换现有组件比仅仅添加一个新组件要复杂一些。</st> <st c="33139">除了回答评估新技术债务的问题外，还需要回答另一组关于退役</st>
    <st c="33268">旧技术债务的问题。</st>
- en: <st c="33276">Here are some deprecation criteria</st> <st c="33312">to consider:</st>
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="33276">以下是一些需要考虑的弃用标准：</st>
- en: <st c="33324">Do we permanently lose the functionality we need or</st> <st c="33377">care
    about?</st>
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="33324">我们是否会永久失去我们需要或</st> <st c="33377">关心的功能？</st>
- en: <st c="33388">How will this impact</st> <st c="33410">the users?</st>
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="33388">这将如何影响</st> <st c="33410">用户？</st>
- en: <st c="33420">What would the transition</st> <st c="33447">plan be?</st>
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="33420">过渡计划是什么？</st> <st c="33447">过渡计划是什么？</st>
- en: <st c="33455">What is</st> <st c="33464">the timeline?</st>
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="33455">时间线是什么？</st> <st c="33464">有成本差异吗？</st>
- en: <st c="33477">Are we replacing it or just</st> <st c="33506">removing it?</st>
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="33477">我们是要替换它还是仅仅</st> <st c="33506">移除它？</st>
- en: <st c="33518">How long would the original and</st> <st c="33551">replacement
    overlap?</st>
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="33518">原组件和</st> <st c="33551">替代组件的重叠时间是多少？</st>
- en: <st c="33571">Is there a cost difference?</st> <st c="33600">If</st> <st c="33603">so,
    what?</st>
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="33571">如果有，是什么？</st> <st c="33600">如果是，具体是什么？</st>
- en: <st c="33612">What are the new</st> <st c="33630">maintenance requirements?</st>
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="33612">新的维护要求是什么？</st>
- en: <st c="33655">Dependencies</st>
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="33655">依赖关系</st>
- en: <st c="33668">Managing dependencies</st> <st c="33690">is one of the key areas
    of managing technical debt.</st> <st c="33743">While taking on several solutions
    that the team doesn’t control might initially feel like an anti-pattern for some,
    the reality is it’s typically easier to manage the state of your dependencies
    than it is to try to write a fully functional bespoke IDP in a reasonable amount</st>
    <st c="34018">of time.</st>
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="33668">管理依赖关系</st> <st c="33690">是管理技术债务的关键领域之一。</st> <st c="33743">虽然接纳一些团队无法控制的解决方案可能在最初对某些人来说是反模式，但现实是，管理依赖关系的状态通常比尝试在合理的时间内编写一个完全功能的定制
    IDP 更容易。</st> <st c="34018">的时间。</st>
- en: <st c="34026">If we look at our dependency matrix from</st> [*<st c="34068">Chapter
    2</st>*](B31164_02.xhtml#_idTextAnchor055)<st c="34077">, we can apply it to discussions
    around maintaining the platform and</st> <st c="34146">its debt:</st>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="34026">如果我们查看我们在[*第 2 章*](B31164_02.xhtml#_idTextAnchor055)的依赖关系矩阵，</st>
    <st c="34077">我们可以将其应用于平台维护及其债务的讨论：</st>
- en: '![Figure 9.2: Dependency matrix](img/B31164_09_02.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.2: 依赖关系矩阵](img/B31164_09_02.jpg)'
- en: '<st c="34286">Figure 9.2: Dependency matrix</st>'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="34286">图 9.2: 依赖关系矩阵</st>'
- en: <st c="34315">Your platform may have a few different types of dependencies.</st>
    <st c="34378">Here are some</st> <st c="34392">obvious examples:</st>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="34315">你的平台可能有几种不同类型的依赖关系。</st> <st c="34378">以下是一些</st> <st c="34392">明显的例子：</st>
- en: <st c="34409">Open</st> <st c="34415">source components</st>
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="34409">开源</st> <st c="34415">组件</st>
- en: <st c="34432">Networking and</st> <st c="34448">network appliances</st>
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="34432">网络和</st> <st c="34448">网络设备</st>
- en: <st c="34466">Databases</st>
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="34466">数据库</st>
- en: <st c="34476">Paid components</st>
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="34476">付费组件</st>
- en: <st c="34492">Internal or</st> <st c="34505">bespoke services</st>
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="34492">内部或</st> <st c="34505">定制服务</st>
- en: <st c="34521">In a perfect world, an IDP would always be perfectly uniform,
    regardless of where it was deployed.</st> <st c="34621">However, in multi-cloud
    or multi-architecture deployments, the infrastructure dependencies are likely</st>
    <st c="34722">to be similar but different.</st> <st c="34752">As such, you may
    need to build and maintain a couple of different versions of this matrix to be
    accurate to the environment.</st> <st c="34877">Whatever you decide to do, you
    will need to ensure these documents are kept up to date to prevent mistakes or
    security-related issues in</st> <st c="35014">the future.</st>
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="34521">在一个理想的世界里，IDP（身份提供者）在任何部署环境中都会是完美统一的。</st> <st c="34621">然而，在多云或多架构的部署环境中，基础设施的依赖关系很可能是</st>
    <st c="34722">相似但又有所不同的。</st> <st c="34752">因此，你可能需要构建并维护几个不同版本的矩阵，以便准确反映环境。</st>
    <st c="34877">无论你决定做什么，都需要确保这些文档保持最新，以避免未来出现错误或安全相关的问题。</st>
- en: <st c="35025">Security</st>
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="35025">安全性</st>
- en: <st c="35034">Often</st> <st c="35041">referred to as a moving target, security
    best practices evolve and change with the industry.</st> <st c="35134">When those
    changes occur, your software has fallen behind, and needing to catch up becomes
    a tick on your technical debt ledger.</st> <st c="35263">For example, if we look
    at workload identities on the major cloud providers, we see a somewhat real-time
    example of the industry transforming and a new wave of technical debt</st> <st
    c="35438">being identified.</st>
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="35034">通常</st> <st c="35041">被称为一个动态目标，安全最佳实践会随着行业的发展而演变和变化。</st> <st
    c="35134">当这些变化发生时，你的软件就会落后，需要赶上时，这将成为你技术债务账单上的一项。</st> <st c="35263">例如，如果我们观察主要云服务提供商的工作负载身份，我们可以看到一个行业转型的实时例子，以及一波新的技术债务</st>
    <st c="35438">的出现。</st>
- en: <st c="35455">Before, the use of secrets by applications was the norm, and the
    risks with those secrets were accepted.</st> <st c="35561">While mitigating those
    risks constituted technical debt, there was no better alternative at the time.</st>
    <st c="35663">However, the invention of workload identities removed the need for
    applications to use secrets to interact with the cloud providers.</st> <st c="35796">Instead,
    they have a role-based identity that they can use to get short</st><st c="35867">-lived
    tokens, similar to what a human user</st> <st c="35912">would have.</st>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="35455">过去，应用程序使用密钥是常态，而这些密钥的风险则被接受。</st> <st c="35561">虽然缓解这些风险属于技术债务的一部分，但当时并没有更好的替代方案。</st>
    <st c="35663">然而，工作负载身份的发明消除了应用程序与云服务提供商交互时需要使用密钥的需求。</st> <st c="35796">取而代之的是，它们拥有基于角色的身份，可以使用短期</st><st
    c="35867">令牌，这类似于人类用户</st> <st c="35912">所使用的。</st>
- en: <st c="35923">Now that this technology has hit all three big cloud providers,
    there are ongoing efforts across the industry to modernize applications and leverage
    workload identities instead of secrets.</st> <st c="36113">For some applications,
    this will be possible with a refactor, but for others, this may mean a new component
    will be added or a full-scale rewrite</st> <st c="36259">is required.</st>
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="35923">现在，随着这一技术被所有三大云服务提供商采纳，整个行业正在持续努力现代化应用程序，并利用工作负载身份替代密钥。</st> <st
    c="36113">对于某些应用程序，通过重构就可以实现这一目标，但对于其他应用程序，这可能意味着需要添加新的组件或进行全面的重写</st> <st c="36259">。</st>
- en: <st c="36271">Not all technical debt has equal weight</st>
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="36271">并非所有技术债务的严重性相同</st>
- en: <st c="36311">The previous subheading of security is probably the most obvious
    case of this, but not all technical debt is of equal weight.</st> <st c="36438">Anything
    that compromises the integrity of the system, such as security and compliance,
    will be very heavily weighted, though other items that may come with a high time
    cost may find themselves also at the top of</st> <st c="36651">the list.</st>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="36311">之前提到的安全性子标题可能是最明显的例子，但并非所有技术债务的严重性都相同。</st> <st c="36438">任何妥协系统完整性的因素，如安全性和合规性，都会被赋予较高的优先级，尽管其他可能伴随高时间成本的项目也可能会排在</st>
    <st c="36651">清单的顶部。</st>
- en: <st c="36660">For example, while the release of a new application may be done
    by hand the first time or two, that quickly gets automated away.</st> <st c="36790">From
    there, automation, which is less timely to kick off and less difficult to maintain,
    takes over.</st> <st c="36891">This is a quick and obvious reduction of the effort
    required to manage the software, but automation still needs maintenance and that
    would be considered technical debt.</st> <st c="37060">However, since it’s unlikely
    to change often, that debt is less weighty than the release process would have
    been if left as a</st> <st c="37186">manual process.</st>
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="36660">例如，虽然一个新应用程序的发布可能是手动完成的，第一次或第二次发布时可能如此，但很快就会自动化。</st> <st c="36790">从那里开始，自动化接管了，它启动的时间更短，维护也更容易。</st>
    <st c="36891">这是减少管理软件所需工作量的一个快速且显而易见的方式，但自动化仍然需要维护，这也被视为技术债务。</st> <st c="37060">然而，由于它不太可能频繁更改，因此与如果将发布过程保持为手动过程相比，这项债务的重量要轻得多。</st>
- en: <st c="37201">This is why it’s important to regularly review and understand
    where your team’s time is spent when they’re not innovating, or what gaps have
    been identified in the</st> <st c="37366">platform’s offering.</st>
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37201">这就是为什么定期回顾并了解团队在非创新时间都花在哪里，或者平台中已识别的差距，变得如此重要。</st> <st c="37366">平台的提供内容。</st>
- en: <st c="37386">Now that we’ve discussed how to get a handle on your technical
    debt, let’s expand on this to understand when that debt should be refactored</st>
    <st c="37527">or rewritten.</st>
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37386">现在我们已经讨论了如何应对技术债务，让我们进一步扩展，了解何时该对这些债务进行重构</st> <st c="37527">或重写。</st>
- en: <st c="37540">Rewriting versus refactoring data – a practical guide</st>
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="37540">重写与重构数据 – 一份实用指南</st>
- en: <st c="37594">When technical</st> <st c="37610">debt snowballs, the team will
    spend more and more time addressing that debt or the fallout from it, and less
    time innovating.</st> <st c="37736">This looks functionally like higher degrees
    of operational toil, longer ramp-up and onboarding periods for newer team members
    and users, and team burnout.</st> <st c="37891">It’s important to stay on top
    of technical debt to ensure developer happiness and innovation are both front
    and center for the</st> <st c="38018">platform team.</st>
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37594">当技术债务</st> <st c="37610">不断积累时，团队将花费越来越多的时间来解决这些债务或由此带来的后果，而减少了创新的时间。</st>
    <st c="37736">这在功能上看起来像是更高程度的操作性繁琐、更长的新人加入和培训周期，以及团队的疲惫。</st> <st c="37891">保持对技术债务的管理对于确保开发者的幸福感和创新的持续至关重要，它们应该是平台团队的核心关注。</st>
    <st c="38018">平台团队。</st>
- en: <st c="38032">Sometimes, this snowball can be that things have stopped behaving
    as expected or took more time than expected.</st> <st c="38144">Alternatively,
    it could be that what was once seen as an acceptable amount of work to run the
    platform prevents the platform and the team from scaling as the user base grows.</st>
    <st c="38319">Regardless of which exactly it is, as those technical debt items
    begin to exceed the predefined expectations for normal, the team needs to look
    at what it would take to return to normal or to find a new</st> <st c="38522">good
    state.</st>
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38032">有时，这种雪球效应可能表现为事物不再按预期工作，或者所需时间超过了预期。</st> <st c="38144">另外，也可能是曾经被认为是可以接受的工作量，运行平台的工作量，阻碍了平台和团队在用户基础增长时的扩展。</st>
    <st c="38319">无论是哪种情况，当这些技术债务项目超出了正常预期时，团队需要考虑如何回到正常状态，或者找到一个新的</st> <st c="38522">良性状态。</st>
- en: <st c="38533">The options for this may be to refactor some of the platforms.</st>
    <st c="38597">A refactor could allow for a fairly quick change for long-term gain.</st>
    <st c="38666">For example, when Golang changed how it did version addressing for
    dependencies, many teams had to go in and adjust their imports to match the new,
    better, method.</st> <st c="38830">Here are some other reasons</st> <st c="38858">to
    refactor:</st>
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38533">对此的选项可能是重构一些平台。</st> <st c="38597">重构可能允许进行一个相对快速的变化，以获得长期的收益。</st>
    <st c="38666">例如，当Golang改变了其依赖关系的版本处理方式时，许多团队不得不进入并调整他们的导入，以匹配新的、更好的方法。</st> <st
    c="38830">这里有一些其他重构的理由</st> <st c="38858">：</st>
- en: <st c="38870">Improve efficiency</st>
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="38870">提高效率</st>
- en: <st c="38889">Improve security</st>
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="38889">提高安全性</st>
- en: <st c="38906">Add or change</st> <st c="38921">an interface</st>
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="38906">添加或更改</st> <st c="38921">接口</st>
- en: <st c="38933">However, when</st> <st c="38948">there’s no way to take the current
    code base or components list and get to a desired state with it, a rewrite may
    be considered.</st> <st c="39077">We’ve already established that at its baseline,
    the system should be composable, meaning few – if any – serverless functions or
    scripts acting as helpers.</st> <st c="39232">One reason to approach a rewrite
    of a service would be if the continued use of the service would result in the
    need to add that</st> <st c="39359">type of helper workload.</st> **<st c="39385">Envoy
    Proxy</st>** <st c="39396">is an example of such a helper workload.</st> <st c="39438">Their
    documentation describes it as “</st>*<st c="39475">a high-performance C++ distributed
    proxy designed for single services and applications, as well as a communication
    bus and “universal data plane” designed for large microservice “service mesh”
    architectures” that “runs alongside every application and abstracts the network
    by providing common features in a platform-agnostic manner.</st>*<st c="39808">”
    (Source:</st> [<st c="39820">https://www.envoyproxy.io/</st>](https://www.envoyproxy.io/)<st
    c="39846">).</st> <st c="39850">However, for</st> <st c="39862">this example,
    as powerful as Envoy Proxy is, if the only reason to implement it is to support
    a singular service that is written in another language to the rest of the services,
    then it may be more worthwhile to rewrite the outlier compared to adding the Envoy</st>
    <st c="40124">Proxy layer.</st>
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38933">然而，当</st> <st c="38948">无法利用当前的代码库或组件列表达到期望的状态时，可能会考虑进行重写。</st>
    <st c="39077">我们已经确定，在其基础层面，系统应该是可组合的，意味着很少—如果有的话—是作为辅助功能的无服务器函数或脚本。</st> <st
    c="39232">重写服务的一个原因是，如果继续使用该服务会导致需要增加那种</st> <st c="39359">类型的辅助工作负载。</st> **<st
    c="39385">Envoy Proxy</st>** <st c="39396">就是这种辅助工作负载的一个例子。</st> <st c="39438">它的文档将其描述为“</st>*<st
    c="39475">一款高性能的C++分布式代理，专为单一服务和应用程序设计，也是为大型微服务‘服务网格’架构设计的通信总线和‘通用数据平面’，它与每个应用程序并行运行，并通过以平台无关的方式提供常见功能来抽象网络。</st>*<st
    c="39808">”（来源：</st> [<st c="39820">https://www.envoyproxy.io/</st>](https://www.envoyproxy.io/)<st
    c="39846">）。</st> <st c="39850">然而，作为</st> <st c="39862">这个例子，尽管Envoy Proxy功能强大，如果实施它的唯一原因是为了支持一个与其他服务使用不同语言编写的单一服务，那么与其增加Envoy</st>
    <st c="40124">Proxy层，不如重写那个异类服务可能更有意义。</st>
- en: <st c="40136">While adding Envoy Proxy would be an elegant and ready-to-go solution,
    it’s a fairly complex layer to add to the Kubernetes platform, and doing so for
    only one service would need to be justified compared to that service</st> <st
    c="40357">being rewritten.</st>
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="40136">虽然增加Envoy Proxy是一个优雅且现成的解决方案，但它是一个相对复杂的层，添加到Kubernetes平台中，而仅为一个服务添加这个层需要相较于重写该服务的情况进行合理化。</st>
- en: <st c="40373">Determining whether a rewrite is necessary</st>
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="40373">判断是否需要重写</st>
- en: <st c="40416">Imagine</st> <st c="40425">you’re on a platform team and you’re
    looking at a component and trying to decide on its future.</st> <st c="40521">What
    would lead you to determine it was time to say goodbye to the component in its
    current state?</st> <st c="40620">One reason could be licensing changes.</st>
    <st c="40659">If the tool you were using used to be open source but has now changed
    license types, then it might be time to replace it.</st> <st c="40781">After all,
    the open source version may not see any security-related updates, and your team
    may not have the skills needed to maintain the</st> <st c="40919">tool as-is.</st>
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="40416">假设</st> <st c="40425">你在一个平台团队中，正在审视一个组件并试图决定它的未来。</st> <st c="40521">是什么因素让你决定是时候告别这个当前状态的组件了？</st>
    <st c="40620">其中一个原因可能是许可证的变化。</st> <st c="40659">如果你使用的工具曾经是开源的，但现在更改了许可证类型，那么可能是时候替换它了。</st>
    <st c="40781">毕竟，开源版本可能不会收到任何安全相关的更新，而你的团队可能没有足够的技能来维持这个</st> <st c="40919">工具的现状。</st>
- en: <st c="40930">The decision</st> <st c="40943">tree for rewriting a component
    should look nearly identical to the decision tree for build versus buy.</st> <st
    c="41047">When you’re at the point where a rewrite feels required, the build versus
    buy conversation needs to be navigated once again.</st> <st c="41172">Where an
    open source solution or an affordable solution for sale exists, your rewrite could
    be reduced to implementing a new integration.</st> <st c="41310">But if that’s
    not the case, then a bespoke service may need to</st> <st c="41373">be created.</st>
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="40930">重写组件的决策</st> <st c="40943">树应该与选择构建还是购买的决策树几乎相同。</st> <st c="41047">当你觉得必须重写时，构建还是购买的对话需要再次进行。</st>
    <st c="41172">如果存在开源解决方案或可购买的廉价解决方案，你的重写可能只需要实施一个新的集成。</st> <st c="41310">但如果情况并非如此，那么可能需要创建一个定制的服务。</st>
- en: <st c="41384">However, if you’re looking to expand functionality or achieve
    some performance gains, this is very unlikely and an entire rewrite is necessary.</st>
    <st c="41529">Unless the component is super old or hasn’t been maintained at all
    since being written, you’re likely going to be better off refactoring your</st>
    <st c="41671">code base.</st>
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="41384">然而，如果你希望扩展功能或实现某些性能提升，这种情况非常不可能，并且需要完全重写。</st> <st c="41529">除非组件非常旧或自编写以来一直没有得到维护，否则你很可能最好重构你的</st>
    <st c="41671">代码库。</st>
- en: <st c="41681">Examining the external influences on refactoring with an example</st>
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="41681">以一个例子来检查外部因素对重构的影响</st>
- en: <st c="41746">Sometimes, the</st> <st c="41761">need to refactor doesn’t come
    from within but is a result of a change in a tool or technology within your ecosystem.</st>
    <st c="41879">Unfortunately, the decisions that are made by the maintainers of
    these dependencies directly influence your team’s technical debt and can result
    in a need to refactor the implementation of</st> <st c="42068">that tool.</st>
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="41746">有时，</st> <st c="41761">重构的需求并不是来自内部，而是由于生态系统中工具或技术的变化。</st> <st
    c="41879">不幸的是，这些依赖项的维护者做出的决策直接影响你的团队的技术债务，并可能导致需要重构该工具的实现。</st>
- en: <st c="42078">A good example of a time to refactor would be when transitioning
    from using Helm (</st>[<st c="42161">https://helm.sh/</st>](https://helm.sh/)<st
    c="42178">) version</st> `<st c="42189">2</st>` <st c="42190">to Helm version</st>
    `<st c="42207">3</st>` <st c="42208">for Kubernetes package management.</st> <st
    c="42244">Helm is a package manager for Kubernetes deployments.</st> <st c="42298">It’s
    an open source tool that uses a packaging format known as</st> **<st c="42361">charts</st>**
    <st c="42367">to orchestrate the process of installing and upgrading applications
    on a cluster.</st> <st c="42450">A chart is not one file, but rather a collection
    of files that define the Kubernetes resources required to run an application.</st>
    <st c="42577">For example, Argo CD can be installed on a Kubernetes cluster with</st>
    <st c="42644">Helm charts.</st>
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="42078">重构的一个好例子是在从使用 Helm (</st>[<st c="42161">https://helm.sh/</st>](https://helm.sh/)<st
    c="42178">)版本</st> `<st c="42189">2</st>` <st c="42190">过渡到 Helm 版本</st> `<st
    c="42207">3</st>` <st c="42208">进行 Kubernetes 包管理时。</st> <st c="42244">Helm 是一个
    Kubernetes 部署的包管理工具。</st> <st c="42298">它是一个开源工具，使用一种名为</st> **<st c="42361">charts</st>**
    <st c="42367">的打包格式来协调在集群上安装和升级应用程序的过程。</st> <st c="42450">Chart 不是一个文件，而是定义运行应用程序所需
    Kubernetes 资源的文件集合。</st> <st c="42577">例如，Argo CD 可以通过</st> <st c="42644">Helm
    charts 安装到 Kubernetes 集群中。</st>
- en: <st c="42656">Helm 2 was a popular version of Helm until Helm 3 was released
    in November 2019, but it had some downsides in</st> <st c="42767">how it handled</st>
    **<st c="42782">customer resource definitions</st>** <st c="42811">(</st>**<st
    c="42813">CRDs</st>**<st c="42817">).</st> <st c="42821">While Helm today still
    doesn’t support upgrading or deleting CRDs, the new method helps Helm to work
    better for users</st> <st c="42939">leveraging CRDs.</st>
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="42656">Helm 2 是 Helm 的一个受欢迎版本，直到 2019 年 11 月发布 Helm 3，但它在</st> <st c="42767">处理</st>
    **<st c="42782">客户资源定义</st>** <st c="42811">(</st>**<st c="42813">CRDs</st>**<st
    c="42817">)</st> <st c="42821">方面存在一些缺点。</st> <st c="42821">虽然今天的 Helm 仍然不支持升级或删除
    CRD，但新方法帮助 Helm 更好地为使用 CRD 的用户服务。</st>
- en: <st c="42955">So, what was</st> <st c="42968">the problem that Helm 3 solved?</st>
    <st c="43001">First, let’s look at what a CRD is.</st> <st c="43037">This was
    explained in greater detail in</st> [*<st c="43077">Chapter 4</st>*](B31164_04.xhtml#_idTextAnchor201)<st
    c="43086">, but if you’ve forgotten, a CRD extends the Kubernetes API.</st> <st
    c="43147">Functionally, what this means is that your Kubernetes cluster now has
    a concept of your custom resource.</st> <st c="43252">In Helm 2, the handling
    for CRDs was done via the</st> `<st c="43302">crd-install hook</st>` <st c="43318">method.</st>
    <st c="43327">The hook mechanism in Helm allows a chart to reach out to another
    dependency and leverage it before the chart is run.</st> <st c="43445">While this
    should have worked in theory, this still resulted in situations where Helm didn’t
    know about a CRD, so the API extension wasn’t understood by Helm to validate a
    chart.</st> <st c="43624">If a new CRD was added after an installation, upgrades
    would fail because the</st> `<st c="43702">crd-install hook</st>` <st c="43718">method
    wouldn’t be run.</st> <st c="43743">This meant previous versions of the charts
    would have to be completely blown away and replaced if a CRD changed.</st> <st
    c="43856">This was quite disruptive for users of Helm and many teams had to implement
    workarounds for this in their</st> <st c="43962">CI/CD pipelines.</st>
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="42955">那么，Helm 3 解决了什么问题呢？</st> <st c="42968">首先，让我们来看一下 CRD 是什么。</st>
    <st c="43001">这在</st> [*<st c="43077">第 4 章</st>*](B31164_04.xhtml#_idTextAnchor201)<st
    c="43086">中有更详细的解释，但如果你忘记了，CRD 是扩展 Kubernetes API 的。</st> <st c="43147">从功能上讲，这意味着你的
    Kubernetes 集群现在具有了自定义资源的概念。</st> <st c="43252">在 Helm 2 中，CRD 的处理是通过</st> `<st
    c="43302">crd-install hook</st>` <st c="43318">方法完成的。</st> <st c="43327">Helm
    中的 hook 机制允许一个 chart 在运行之前与其他依赖项进行交互并利用它。</st> <st c="43445">虽然理论上这个方法应该是有效的，但它仍然导致了
    Helm 无法识别 CRD 的情况，因此 Helm 无法验证 chart 中的 API 扩展。</st> <st c="43624">如果安装后添加了新的
    CRD，升级将失败，因为</st> `<st c="43702">crd-install hook</st>` <st c="43718">方法不会被执行。</st>
    <st c="43743">这意味着如果 CRD 发生变化，之前版本的 chart 必须被完全删除并替换。</st> <st c="43856">这对于 Helm
    用户来说是非常具有破坏性的，许多团队不得不在其</st> <st c="43962">CI/CD 管道中实现临时解决方案。</st>
- en: <st c="43978">Helm 3 changed this user experience by deprecating the previous</st>
    `<st c="44043">crd-install hook</st>` <st c="44059">method and removing the underlying
    functionality that supported it.</st> <st c="44128">Now, a CRD directory is needed.</st>
    <st c="44160">The directory path is nested within the chart, and the use of this
    directory, called</st> `<st c="44245">crds/</st>`<st c="44250">, allows Helm to
    pause while the CRDs are added to a cluster before continuing with the chart’s
    execution.</st> <st c="44357">Helm upgrades do allow for CRD installation, whereas
    they didn’t before.</st> <st c="44430">Essentially, Helm now knows about new API
    functionality when it does its chart validation, ensuring a smoother operations
    experience</st> <st c="44563">for users.</st>
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="43978">Helm 3 通过弃用以前的</st> `<st c="44043">crd-install hook</st>` <st
    c="44059">方法，并移除了支持该功能的底层功能，改变了用户体验。</st> <st c="44128">现在，需要一个 CRD 目录。</st> <st
    c="44160">该目录路径嵌套在 chart 中，使用这个名为</st> `<st c="44245">crds/</st>`<st c="44250">的目录，允许
    Helm 在将 CRD 添加到集群后暂停，之后再继续执行 chart。</st> <st c="44357">Helm 现在允许进行 CRD 安装，而以前是无法做到的。</st>
    <st c="44430">本质上，Helm 现在在进行 chart 验证时了解新的 API 功能，确保用户能够享受到更流畅的操作体验。</st>
- en: <st c="44573">While the underlying Helm changes were pretty significant, for
    users of Helm, this equated to refactoring existing charts and upgrading the version
    of Helm in use.</st> <st c="44738">However, this also allowed many users to remove
    whatever workarounds they had implemented and instead allowed them to leverage
    Helm’s built-in upgrade functionality.</st> <st c="44904">Depending on the size
    and complexity of the charts being used, these refactors could have been a somewhat
    significant effort, but nowhere near as much as migrating to a different way of
    handling software installations and</st> <st c="45126">upgrades altogether.</st>
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44573">虽然底层的 Helm 变化相当重大，但对于 Helm 用户来说，这意味着需要重构现有的 chart 并升级正在使用的 Helm
    版本。</st> <st c="44738">然而，这也使得许多用户能够去除他们实现的任何临时解决方法，转而利用 Helm 内建的升级功能。</st> <st
    c="44904">根据所使用 chart 的大小和复杂性，这些重构可能需要相当大的努力，但远不及迁移到另一种处理软件安装和</st> <st c="45126">升级方式的工作量。</st>
- en: <st c="45146">To understand the rough scope of the refactoring changes, let’s
    look at today’s Argo CD Helm Charts</st> <st c="45246">using Helm 3 (</st>[<st
    c="45261">https://github.com/argoproj/argo-helm/tree/main/charts</st>](https://github.com/argoproj/argo-helm/tree/main/charts)<st
    c="45316">).</st> <st c="45320">Within the repository, there’s a collection of
    charts that are each installed as part of the overall</st> <st c="45421">Argo
    CD project.</st> <st c="45438">With Helm, directory structure is very important;
    without the correct structure, a chart</st> <st c="45527">can’t function.</st>
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="45146">要了解重构变化的大致范围，我们来看一下今天使用 Helm 3 的 Argo CD Helm Charts</st> <st
    c="45246">（</st>[<st c="45261">https://github.com/argoproj/argo-helm/tree/main/charts</st>](https://github.com/argoproj/argo-helm/tree/main/charts)<st
    c="45316">）</st>。<st c="45320">在该仓库中，有一系列图表，每个图表作为整体</st> <st c="45421">Argo CD
    项目的一部分被安装。</st> <st c="45438">在 Helm 中，目录结构非常重要；没有正确的结构，图表</st> <st c="45527">无法正常工作。</st>
- en: <st c="45542">If we look at one of the charts, we’ll see that the new CRD directory</st>
    <st c="45613">is present:</st>
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="45542">如果我们查看其中一个图表，我们会看到新的 CRD 目录</st> <st c="45613">已经存在：</st>
- en: '![Figure 9.3: Argo CD Helm Chart directory structure](img/B31164_09_03.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.3：Argo CD Helm Chart 目录结构](img/B31164_09_03.jpg)'
- en: '<st c="45804">Figure 9.3: Argo CD Helm Chart directory structure</st>'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="45804">图 9.3：Argo CD Helm Chart 目录结构</st>
- en: <st c="45854">If we take a look at the</st> `<st c="45880">values.yaml</st>`
    <st c="45891">file within one of these charts, we’ll see that the CRD usage is</st>
    <st c="45957">very straightforward:</st>
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="45854">如果我们查看其中一个图表的</st> `<st c="45880">values.yaml</st>` <st c="45891">文件，我们会发现
    CRD 的使用</st> <st c="45957">非常简单：</st>
- en: '![Figure 9.4: CRD configuration in a Helm Chart values.yaml file](img/B31164_09_04.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.4：Helm Chart values.yaml 文件中的 CRD 配置](img/B31164_09_04.jpg)'
- en: '<st c="46458">Figure 9.4: CRD configuration in a Helm Chart values.yaml file</st>'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="46458">图 9.4：Helm Chart values.yaml 文件中的 CRD 配置</st>
- en: <st c="46520">The real bulk of the</st> <st c="46541">work to leverage CRDs
    from a development perspective is within the CRD definitions themselves.</st>
    <st c="46637">Here, the CRD annotations are defined and any other logic that’s
    required, such as the resource policy,</st> <st c="46741">is stated:</st>
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="46520">从开发的角度来看，利用 CRD 的主要工作在于 CRD 定义本身。</st> <st c="46541">在这里，定义了 CRD
    注释以及任何其他所需的逻辑，如资源策略，</st> <st c="46637">也都在此声明：</st>
- en: '![Figure 9.5: A CRD from the Argo CD project](img/B31164_09_05.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.5：来自 Argo CD 项目的 CRD](img/B31164_09_05.jpg)'
- en: '<st c="47654">Figure 9.5: A CRD from the Argo CD project</st>'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="47654">图 9.5：来自 Argo CD 项目的 CRD</st>
- en: <st c="47696">After seeing how CRDs are used with Helm charts today, a natural
    question would be, “</st>*<st c="47782">What did it look like before?</st>*<st
    c="47812">” The answer is “</st>*<st c="47830">It depends.</st>*<st c="47842">”
    Before the</st> `<st c="47856">crd-intall</st>` <st c="47866">hook was added to
    Helm, a common way of working around this issue was to actually break out CRDs
    into separate charts and then use a bash script to ensure charts were installed
    in a specific order.</st> <st c="48065">The</st> `<st c="48069">Istio</st>` <st
    c="48074">project is an example of where this was done.</st> <st c="48121">This
    worked but created more overhead to maintain since the scripts for ensuring proper
    installations were yet another thing for Helm Chart maintainers to keep up</st>
    <st c="48284">to date.</st>
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="47696">在看到 CRD 如何与 Helm 图表一起使用后，产生的一个自然问题是：“</st>*<st c="47782">之前是怎样的？</st>*<st
    c="47812">” 答案是“</st>*<st c="47830">这取决于。</st>*<st c="47842">” 在</st> `<st c="47856">crd-intall</st>`
    <st c="47866">钩子被添加到 Helm 之前，解决这个问题的常见方法是将 CRD 分解成单独的图表，然后使用 bash 脚本确保图表按特定顺序安装。</st>
    <st c="48065">例如</st> `<st c="48069">Istio</st>` <st c="48074">项目就是采用这种方式的例子。</st>
    <st c="48121">这种方法有效，但增加了维护负担，因为确保正确安装的脚本成了 Helm Chart 维护者需要持续更新的另一项任务</st> <st
    c="48284">。</st>
- en: <st c="48292">After Helm</st> <st c="48304">added the install hook, the ability
    to deprecate such scripts became possible.</st> <st c="48383">While keeping the
    same CRD files, a user could add the</st> `<st c="48438">crd-install</st>` <st
    c="48449">hook annotation.</st> <st c="48467">Then, Helm’s underlying component
    tiller would ensure that the CRD creation was triggered before the rest of the
    chart</st> <st c="48586">was actioned.</st>
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="48292">在 Helm</st> <st c="48304">添加安装钩子后，废弃此类脚本的功能变得可能。</st> <st c="48383">在保持相同
    CRD 文件的同时，用户可以添加</st> `<st c="48438">crd-install</st>` <st c="48449">钩子注释。</st>
    <st c="48467">然后，Helm 的底层组件 tiller 会确保在其余图表</st> <st c="48586">被执行之前，触发 CRD 的创建。</st>
- en: <st c="48599">The</st> <st c="48603">Helm 2 docs explain this further (</st>[<st
    c="48638">https://v2.helm.sh/docs/charts_hooks/#hooks</st>](https://v2.helm.sh/docs/charts_hooks/#hooks)<st
    c="48682">).</st> <st c="48686">The essential thing to know is that a YAML file
    containing the</st> `<st c="48749">crd</st>` <st c="48752">hook would look like</st>
    <st c="48774">this initially:</st>
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="48599">Helm 2 文档进一步解释了这一点（</st>[<st c="48638">https://v2.helm.sh/docs/charts_hooks/#hooks</st>](https://v2.helm.sh/docs/charts_hooks/#hooks)<st
    c="48682">）。</st> <st c="48686">需要了解的关键点是，包含</st> `<st c="48749">crd</st>` <st
    c="48752">钩子的 YAML 文件最初看起来</st> <st c="48774">是这样的：</st>
- en: '[PRE1]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="49040">After, it would</st> <st c="49056">look</st> <st c="49062">like
    this:</st>
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="49040">重写后，它会</st> <st c="49056">看起来</st> <st c="49062">像这样：</st>
- en: '[PRE2]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="49364">In itself, this is a very small change.</st> <st c="49405">The
    Helm version in use needed to be updated as well, but overall, this was a very
    small amount of work that allowed many custom bash scripts to be</st> <st c="49552">taken
    off the plate of people maintaining Helm Charts for</st> <st c="49611">their applications.</st>
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="49364">从本身来看，这是一个非常小的变化。</st> <st c="49405">正在使用的 Helm 版本也需要更新，但总体来说，这是一个非常小的工作量，允许许多自定义的
    bash 脚本</st> <st c="49552">从维护 Helm Charts 的人员的工作中解脱出来</st> <st c="49611">，这些人员为他们的应用程序维护
    Helm Charts。</st>
- en: <st c="49630">Sometimes, the process of refactoring is pretty small.</st> <st
    c="49686">It can be as simple as identifying a few areas of inefficiencies or
    a place where the code could encounter race conditions and making changes to the
    code so that those situations are improved.</st> <st c="49879">Other times, the
    refactoring could be more sweeping, such as replacing a library or updating the
    language version to a version with some breaking changes.</st> <st c="50034">Whatever
    the reason for refactoring, it’s typically less effort with a higher return on
    investment than</st> <st c="50138">a rewrite.</st>
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="49630">有时，重构的过程非常简单。</st> <st c="49686">它可能只是识别一些低效的区域，或者是发现代码可能遇到竞争条件的地方，并对代码进行修改，以改进这些情况。</st>
    <st c="49879">其他时候，重构可能更加全面，例如替换一个库，或者将语言版本更新为带有一些破坏性更改的版本。</st> <st c="50034">无论重构的原因是什么，它通常比</st>
    <st c="50138">重写投入的努力要少，但回报更高。</st>
- en: <st c="50148">Examining a famous rewrite</st>
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="50148">审视一次著名的重写</st>
- en: <st c="50175">If it’s still</st> <st c="50190">unclear when a rewrite may be
    the appropriate choice, we can look to open source software projects for some
    famous rewrite scenarios.</st> <st c="50324">Within the Linux kernel, as well
    as container technology itself and therefore Kubernetes, we can find a perfect
    example in cgroups.</st> <st c="50456">Cgroups, also known as control groups,
    are the technology that exists within the Linux kernel to manage computational
    processes.</st> <st c="50585">Cgroups manage resource allocation and generally
    control processes.</st> <st c="50653">Recently, however, in response to community
    calls for performance improvements, there was a rewrite, and cgroupsv2</st> <st
    c="50768">was born.</st>
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="50175">如果仍然</st> <st c="50190">不清楚何时重写可能是合适的选择，我们可以通过开源软件项目来看一些著名的重写案例。</st>
    <st c="50324">在 Linux 内核中，以及容器技术本身，因此也包括 Kubernetes，我们可以在 cgroups 中找到一个完美的例子。</st>
    <st c="50456">Cgroups，也被称为控制组，是存在于 Linux 内核中的一种技术，用于管理计算进程。</st> <st c="50585">Cgroups
    管理资源分配并通常控制进程。</st> <st c="50653">然而，最近为了响应社区对性能提升的呼声，进行了一次重写，cgroupsv2</st> <st
    c="50768">应运而生。</st>
- en: <st c="50777">This example is particularly interesting because of the pile-on
    effect.</st> <st c="50850">While cgroupsv2 is generally considered superior to
    v1, and most applications will see performance gains, legacy applications may
    suffer.</st> <st c="50988">In Kubernetes, where one cgroups version or the other
    must be specified, the issue with legacy applications is apparent.</st> <st c="51109">In
    particular, older Java and Node.js applications will have compatibility issues
    with the memory querying functions of cgroupsv2 and are likely to</st> <st c="51257">experience</st>
    **<st c="51268">out-of-memory</st>** <st c="51281">(</st>**<st c="51283">OOM</st>**<st
    c="51286">) errors crashing the workload.</st> <st c="51319">For companies using
    more dated applications, an upgrade of the stack is indicated.</st> <st c="51402">This
    could mean either a rewrite or a refactor, depending on how far behind the legacy
    code is and what’s needed to bring it up to a compatible version with the</st>
    <st c="51563">new cgroupsv2.</st>
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="50777">这个例子特别有趣，因为它产生了连锁反应。</st> <st c="50850">虽然cgroupsv2通常被认为优于v1，并且大多数应用会看到性能提升，但遗留应用可能会受到影响。</st>
    <st c="50988">在Kubernetes中，必须指定一个cgroups版本，而遗留应用的问题就显而易见。</st> <st c="51109">特别是，旧版的Java和Node.js应用将与cgroupsv2的内存查询功能不兼容，并且可能会</st>
    <st c="51257">遭遇</st> **<st c="51268">内存溢出</st>** <st c="51281">(</st>**<st c="51283">OOM</st>**<st
    c="51286">) 错误，导致工作负载崩溃。</st> <st c="51319">对于使用较旧应用的公司，建议升级技术栈。</st> <st c="51402">这可能意味着需要重写或重构，具体取决于遗留代码的滞后程度以及需要做什么才能将其更新为与</st>
    <st c="51563">新的cgroupsv2兼容的版本。</st>
- en: <st c="51577">Those with</st> <st c="51588">more knowledge of Kubernetes might
    note that as of current version 1.30 of K8s, Kubernetes still contains the capabilities
    of using cgroups v1\.</st> <st c="51733">This is true, and any organization that
    doesn’t wish to modernize can leverage that capability.</st> <st c="51829">However,
    counting on the continuation of cgroupsv1 over the rewritten version would be
    remiss as it’s more likely that v1 will be deprecated instead of two versions
    being maintained.</st> <st c="52012">If a modernization wasn’t desired, then instead
    of a new piece of technical debt, the cluster configurations that specify cgroupsv1
    would be added to the team ledger.</st> <st c="52179">All new clusters must be
    created using the cgroupsv1 specifications for as long as it’s supported or for
    as long as the legacy applications aren’t modernized.</st> <st c="52338">If there’s
    any automation in creating the clusters, then that would need to be refactored
    and added to the additional configuration.</st> <st c="52471">Additionally, while
    more modern applications will be able to run with cgroupsv1, they may not be as
    performant as they might have been with cgroupsv2\.</st> <st c="52622">Regardless
    of whether the decision was to refactor cluster creation or to modernize workloads
    that were running on older language versions, the effects of this rewrite rippled
    across</st> <st c="52805">the industry.</st>
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="51577">那些对</st> <st c="51588">Kubernetes有更多了解的人可能会注意到，截至当前版本1.30的K8s，Kubernetes仍然包含使用cgroups
    v1的功能。</st> <st c="51733">这是事实，任何不希望进行现代化的组织可以利用这一功能。</st> <st c="51829">然而，依赖cgroupsv1继续存在而非采用重写版本是不明智的，因为更可能的情况是v1会被弃用，而不是同时维护两个版本。</st>
    <st c="52012">如果不希望进行现代化，那么与其新增技术负担，不如将指定cgroupsv1的集群配置添加到团队账簿中。</st> <st c="52179">所有新的集群必须在支持cgroupsv1的期间内创建，或者在遗留应用没有现代化之前，使用cgroupsv1的规范。</st>
    <st c="52338">如果创建集群有自动化过程，那么也需要对其进行重构，并将其添加到额外的配置中。</st> <st c="52471">此外，虽然现代化的应用能够在cgroupsv1下运行，但它们的性能可能不如在cgroupsv2下的表现。</st>
    <st c="52622">无论是决定重构集群创建，还是对运行在旧版语言上的工作负载进行现代化，这次重写的影响波及到了</st> <st c="52805">整个行业。</st>
- en: <st c="52818">A final consequence of the rewrite and subsequent adoption of
    cgroupsv2 as the default is that some new innate Kubernetes features are only
    compatible with the newer version.</st> <st c="52994">In other words, you limit
    your capabilities by sticking to cgroupsv1 and miss out on leveraging some of
    the Kubernetes enhancements for</st> <st c="53130">workload management.</st>
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="52818">重写及随之而来的cgroupsv2成为默认设置的一个最终后果是，一些新的原生Kubernetes特性仅与更新的版本兼容。</st>
    <st c="52994">换句话说，坚持使用cgroupsv1会限制你的能力，错过一些Kubernetes增强功能，特别是在</st> <st c="53130">工作负载管理方面。</st>
- en: <st c="53150">Transitioning after rewrite</st>
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="53150">重写后的过渡</st>
- en: <st c="53178">You’ve</st> <st c="53185">done the rewrite (or maybe replacement)
    and it’s time to switch things over.</st> <st c="53263">Unfortunately, these types
    of transitions are rarely – if ever – clean and typically require precise planning
    and execution.</st> <st c="53388">The messier the process, the longer the original
    component must stick around, and the longer the team must balance the operational
    costs associated with both.</st> <st c="53547">To help foster a healthier transition,
    define a transition plan early and test your transition plan, if possible, to
    ensure nothing was missed.</st> <st c="53691">Additionally, there’s another benefit
    to writing out and testing a transition plan.</st> <st c="53775">The completed
    plan and tests become a record of the events and a blueprint for future migrations
    that may need to occur.</st> <st c="53896">While we always hope a rewrite is something
    that only happens once, the reality is that in any business that survives for
    long periods, multiple rewrites will occur.</st> <st c="54062">By documenting
    this</st> <st c="54082">process, you help curb the technical debt of the rewrite.</st>
    <st c="54140">This will help future engineers untangle the history of the system
    and save them time generating transition plans in</st> <st c="54257">the future.</st>
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="53178">你已经完成了重写（或可能是替换），现在是时候进行切换了。</st> <st c="53185">不幸的是，这类过渡很少是干净的——如果不是永远——通常需要精确的规划和执行。</st>
    <st c="53263">过程越混乱，原始组件必须存在的时间越长，团队就需要平衡与两者相关的运营成本。</st> <st c="53388">为了促进更健康的过渡，尽早定义过渡计划，并尽可能测试过渡计划，确保没有遗漏。</st>
    <st c="53547">此外，编写和测试过渡计划还有另一个好处。</st> <st c="53691">完成的计划和测试成为事件记录和未来可能需要发生的迁移蓝图。</st>
    <st c="53775">虽然我们总是希望重写只是发生一次，但现实是，任何长期存活的企业都会经历多次重写。</st> <st c="53896">通过记录这个</st>
    <st c="54062">过程，你有助于减少重写的技术债务。</st> <st c="54082">这将帮助未来的工程师理清系统的历史，并节省他们在</st>
    <st c="54257">未来生成过渡计划的时间。</st>
- en: <st c="54268">Architectural decision records – document for the Afterworld</st>
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="54268">架构决策记录 – 为未来的世界而写</st>
- en: <st c="54329">An</st> **<st c="54333">architectural decision record</st>** <st
    c="54362">helps</st> <st c="54369">future owners of the platform to understand
    not just what was done, but why it was done.</st> <st c="54458">Maintaining accurate
    architectural diagrams and documentation is critical to understanding any software
    system, but the reasoning behind those decisions and final states help future
    leaders know what to do with the platform in</st> <st c="54685">the future.</st>
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="54329">一个</st> **<st c="54333">架构决策记录</st>** <st c="54362">帮助</st> <st
    c="54369">平台的未来拥有者了解不仅仅是什么做了，而且为什么这么做。</st> <st c="54458">维护准确的架构图和文档对理解任何软件系统至关重要，但这些决策和最终状态背后的推理帮助未来的领导者知道如何在</st>
    <st c="54685">未来使用该平台。</st>
- en: <st c="54696">Why document software architecture?</st>
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="54696">为什么要记录软件架构？</st>
- en: <st c="54732">Software architecture should be</st> <st c="54765">documented
    for several reasons.</st> <st c="54797">First, it can help onboard new team members
    and users to the project.</st> <st c="54867">A good architecture document helps
    these people understand how the system is used and how data flows</st> <st c="54968">through
    it.</st>
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="54732">软件架构应该</st> <st c="54765">出于几个原因进行记录。</st> <st c="54797">首先，它有助于新团队成员和用户了解项目。</st>
    <st c="54867">一份好的架构文档帮助这些人理解系统如何使用，以及数据是如何流动</st> <st c="54968">的。</st>
- en: <st c="54979">Second, it can aid with security and compliance as all security
    and compliance audits require thorough software architecture documents</st> <st
    c="55115">and diagrams.</st>
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="54979">其次，它有助于安全性和合规性，因为所有安全性和合规性审计都需要详尽的软件架构文档</st> <st c="55115">和图表。</st>
- en: <st c="55128">Finally, it gives you a starting point from which to grow.</st>
    <st c="55188">By documenting the current state, you provide a reference document
    to plan against.</st> <st c="55272">How could a future architect figure out where
    the platform should go without a good understanding of where</st> <st c="55379">it
    is?</st>
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="55128">最后，它为你提供了一个起点，从这里开始成长。</st> <st c="55188">通过记录当前状态，你为规划提供了一个参考文档。</st>
    <st c="55272">如果未来的架构师没有很好地理解平台的现状，怎么能知道平台应该走向哪里呢？</st> <st c="55379">它在哪里？</st>
- en: <st c="55385">What does good technical documentation look like?</st>
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="55385">良好的技术文档应该是什么样的？</st>
- en: <st c="55435">A</st> <st c="55438">good architecture document will have a mixture
    of images and descriptions.</st> <st c="55513">Depending on the granularity of
    the document, it should show how the users interact with the system, the dependencies
    of the system, how data moves, how data is stored, where data is changed (if at
    all), and what the expected outcomes of interactions are.</st> <st c="55769">In
    other words, the documentation should capture what the system does and how it</st>
    <st c="55850">does it.</st>
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="55435">一个</st> <st c="55438">好的架构文档将包含图像和描述的结合。</st> <st c="55513">根据文档的粒度，它应当展示用户如何与系统互动、系统的依赖关系、数据如何流动、数据如何存储、数据在哪里被更改（如果有的话），以及交互的预期结果。</st>
    <st c="55769">换句话说，文档应当捕捉系统的功能以及它是如何</st> <st c="55850">实现这些功能的。</st>
- en: <st c="55858">An additional function of the documentation is to record not just
    the what and how but also the why.</st> <st c="55960">Possibly more important
    than the what and how, the why behind each decision helps guide future decision-making
    processes.</st> <st c="56082">For example, the architect of tomorrow will need
    to know key information about the</st> <st c="56165">decisions made:</st>
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="55858">文档的另一个功能是记录的不仅仅是“做了什么”和“怎么做”，还要记录“为什么”。</st> <st c="55960">比做什么和怎么做可能更为重要的是，每个决策背后的“为什么”帮助指导未来的决策过程。</st>
    <st c="56082">例如，未来的架构师需要了解有关</st> <st c="56165">所做决策的关键信息：</st>
- en: <st c="56180">Was there a limiting factor that caused a</st> <st c="56223">less-than-optimal
    solution?</st>
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="56180">是否存在某种限制因素导致了</st> <st c="56223">次优的解决方案？</st>
- en: <st c="56250">What bar would a replacement solution need to reach to</st> <st
    c="56306">be considered?</st>
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="56250">替代解决方案需要达到什么标准才能</st> <st c="56306">被考虑？</st>
- en: <st c="56320">What were the known risks and mitigations at</st> <st c="56366">the
    time?</st>
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="56320">当时已知的风险和缓解措施是什么？</st> <st c="56366">？</st>
- en: <st c="56375">What were the goals and non-goals</st> <st c="56410">and why?</st>
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="56375">目标和非目标是什么</st> <st c="56410">以及为什么？</st>
- en: <st c="56418">What impact does each component have</st> <st c="56456">on another?</st>
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="56418">每个组件对</st> <st c="56456">另一个组件有何影响？</st>
- en: <st c="56467">By ensuring you record these aspects of a decision, you’re building
    a legacy, not</st> <st c="56550">legacy software.</st>
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="56467">通过确保记录决策的这些方面，你是在构建遗产，而不是</st> <st c="56550">遗留软件。</st>
- en: <st c="56566">However, as critical as architectural decision records are, they
    are not the only important document for your platform.</st> <st c="56687">Other
    types of documentation mentioned in the chapter and book should be compiled and
    maintained so that you stay on top of the technical debt the system incurs.</st>
    <st c="56849">While managing the documentation’s organization and keeping the
    documentation updated can feel like toil, and is indeed debt, the time savings
    gained by doing so pays dividends over time.</st> <st c="57037">Searchable, well-organized
    documentation is the key to a system that stands the test</st> <st c="57122">of
    time.</st>
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="56566">然而，尽管架构决策记录非常重要，它们并不是你平台上唯一重要的文档。</st> <st c="56687">本章和书中提到的其他类型的文档也应当编写并维护，以便你能跟踪系统所带来的技术债务。</st>
    <st c="56849">虽然管理文档的组织结构和保持文档更新可能会感觉像是苦差事，确实是一种债务，但通过这样做所节省的时间随着时间的推移会带来回报。</st>
    <st c="57037">可搜索、结构良好的文档是使系统经得起时间考验的关键。</st> <st c="57122">时间考验。</st>
- en: <st c="57130">Our fictitious company – a final look</st>
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="57130">我们虚构的公司——最后一瞥</st>
- en: '*<st c="57168">ACME Financial One</st>* <st c="57187">is a</st> <st c="57192">company
    that’s designed for our purposes – to feel like many real companies modernizing
    their technical stacks.</st> <st c="57305">In our example, they’re dealing with
    both legacy systems and new or greenfield systems.</st> <st c="57393">As with
    any real company, this would result in an initial duplication of technical debt.</st>
    <st c="57482">To support engineers during this transition period where two systems
    exist, a well-designed platform will provide the flexibility required for smooth
    transitions between the</st> <st c="57656">two environments.</st>'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="57168">ACME Financial One</st>* <st c="57187">是一个</st> <st c="57192">专为我们的目的设计的公司——旨在让其看起来像许多正在现代化技术栈的真实公司。</st>
    <st c="57305">在我们的示例中，他们正在处理遗留系统以及新的或绿色场地系统。</st> <st c="57393">像任何真实的公司一样，这将导致初期技术债务的重复。</st>
    <st c="57482">为了支持工程师度过这段两套系统并存的过渡期，一个设计良好的平台将提供所需的灵活性，以便在这</st> <st c="57656">两个环境之间实现平稳过渡。</st>'
- en: '*<st c="57673">ACME Financial One</st>* <st c="57692">would need to support
    this with the thinnest viable platform that scales and grows to meet users where
    they are.</st> <st c="57806">Clear documentation of the platform and the processes
    for leveraging the platform will support the developers in their transition and
    their adoption of the</st> <st c="57962">new environment.</st>'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="57673">ACME Financial One</st>* <st c="57692">需要通过最精简的可行平台来支持这一点，该平台能够扩展并发展，以便在用户所在的地方为他们提供支持。</st>
    <st c="57806">清晰的平台文档和利用平台的流程将帮助开发人员在过渡过程中顺利过渡并采纳新的</st> <st c="57962">环境。</st>'
- en: <st c="57978">Summary</st>
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="57978">总结</st>
- en: <st c="57986">If there’s one lesson to take away from this chapter on technical
    debt, it’s that asking the correct questions at the correct time can help your
    team build a platform that’s designed to last.</st> <st c="58179">The platform
    may never be</st> *<st c="58205">finished</st>*<st c="58213">. There will always
    be improvements to be found and gains to be made.</st> <st c="58283">However,
    a polished process for managing the platform and its corresponding documentation
    will allow the team to sustain it while maintaining the</st> <st c="58429">team’s
    health.</st>
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="57986">如果从这一章关于技术债务的内容中能学到一课，那就是在正确的时间提出正确的问题，能够帮助你的团队构建一个旨在持久的平台。</st>
    <st c="58179">这个平台可能永远不会</st> *<st c="58205">完成</st>*<st c="58213">。总会有需要改进的地方，也总能取得进展。</st>
    <st c="58283">然而，一个精细的管理平台的流程和相应的文档，将使团队能够在保持</st> <st c="58429">团队健康的同时持续维护平台。</st>
- en: <st c="58443">As you’re tackling technical debt, remember the example indicators
    and questions we discussed in the introduction to this chapter.</st> <st c="58575">Spotting
    technical debt and knowing the corresponding costs will allow you to better communicate
    and prioritize addressing those items with those teams that need to address them.</st>
    <st c="58754">While addressing technical debt is time-consuming and costly on
    its own, it will help you set the foundation for a platform that can last and
    is ready for</st> <st c="58909">future changes.</st>
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="58443">在处理技术债务时，请记住我们在本章开头讨论的示例指标和问题。</st> <st c="58575">识别技术债务并了解相关成本，将帮助你与需要处理这些问题的团队更好地沟通并优先解决这些问题。</st>
    <st c="58754">虽然解决技术债务本身既费时又昂贵，但它将帮助你为一个能够持久并为</st> <st c="58909">未来变化做好准备的平台奠定基础。</st>
- en: <st c="58924">In the next and final chapter, we will discuss changes and how
    your platform can provide these changes as a stable foundation for your IT organization.</st>
    <st c="59077">You will learn about the idea of sustainable and lightweight architectures
    and how you can enable your users to follow those approaches.</st> <st c="59214">We
    will challenge the perspective of the golden path as a user-oriented term and
    question whether we, as platform engineers and architects, don’t also require
    a golden path.</st> <st c="59388">Finally, we’ll close the book with some final
    thoughts about the next</st> <st c="59458">trending topics.</st>
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="58924">在下一章也是最后一章，我们将讨论变化，以及你的平台如何作为你IT组织的稳定基础提供这些变化。</st> <st c="59077">你将了解可持续和轻量架构的概念，以及如何使用户能够采用这些方法。</st>
    <st c="59214">我们将挑战“黄金路径”这一以用户为导向的术语的视角，并质疑作为平台工程师和架构师的我们，是否也需要一条黄金路径。</st> <st
    c="59388">最后，我们将以一些关于下一个</st> <st c="59458">趋势话题的思考结束本书。</st>
