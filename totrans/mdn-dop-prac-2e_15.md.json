["```\n$ git clone https://github.com/PacktPublishing/Modern-DevOps-Practices-2e.git \\\nmodern-devops\n```", "```\n$ PROJECT_ID=<YOUR_PROJECT_ID>\n$ gcloud services enable iam.googleapis.com \\\n container.googleapis.com \\\n binaryauthorization.googleapis.com \\\n containeranalysis.googleapis.com \\\n secretmanager.googleapis.com \\\n cloudresourcemanager.googleapis.com \\\n cloudkms.googleapis.com\n```", "```\n$ gcloud iam service-accounts create terraform \\\n--description=\"Service Account for terraform\" --display-name=\"Terraform\"\n$ gcloud projects add-iam-policy-binding $PROJECT_ID \\\n--member=\"serviceAccount:terraform@$PROJECT_ID.iam.gserviceaccount.com\" \\\n--role=\"roles/editor\"\n$ gcloud iam service-accounts keys create key-file \\\n--iam-account=terraform@$PROJECT_ID.iam.gserviceaccount.com\n```", "```\n$ gsutil mb gs://tf-state-mdo-terraform-${PROJECT_ID}\n```", "```\n$ echo -ne '{\"MONGO_INITDB_ROOT_USERNAME\": \"root\", \\\n\"MONGO_INITDB_ROOT_PASSWORD\": \"itsasecret\"}' | \\\ngcloud secrets create external-secrets --locations=us-central1 \\\n--replication-policy=user-managed --data-file=-\nCreated version [1] of the secret [external-secrets].\n```", "```\n$ cd ~\n$ gcloud iam service-accounts create external-secrets\n```", "```\n$ gcloud secrets add-iam-policy-binding external-secrets \\\n--member \"serviceAccount:external-secrets@$PROJECT_ID.iam.gserviceaccount.com\" \\\n--role \"roles/secretmanager.secretAccessor\"\n```", "```\n$ gcloud iam service-accounts keys create key.json \\\n--iam-account=external-secrets@$PROJECT_ID.iam.gserviceaccount.com\n```", "```\nATTESTOR_NAME=quality-assurance-attestor\nKMS_KEY_LOCATION=us-central1\nKMS_KEYRING_NAME=qa-attestor-keyring\nKMS_KEY_NAME=quality-assurance-attestor-key\nKMS_KEY_VERSION=1\n```", "```\n$ cd ~ && git clone git@github.com:<your_github_user>/mdo-environments.git\n$ cd mdo-environments/\n$ git checkout dev\n$ cp -r ~/modern-devops/ch15/baseline/* .\n$ cp -r ~/modern-devops/ch15/baseline/.github .\n```", "```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: istio-base\n  namespace: argo\nspec:\n  project: default\n  source:\n    chart: base\n    repoURL: https://istio-release.storage.googleapis.com/charts\n    targetRevision: 1.19.1\n    helm:\n      releaseName: istio-base\n  destination:\n    server: \"https://kubernetes.default.svc\"\n    namespace: istio-system\n  syncPolicy:\n    syncOptions:\n    - CreateNamespace=true\n    automated:\n      selfHeal: true\n```", "```\n...\n  source:\n    chart: istiod\n    repoURL: https://istio-release.storage.googleapis.com/charts\n    targetRevision: 1.19.1\n    helm:\n      releaseName: istiod\n  destination:\n    server: \"https://kubernetes.default.svc\"\n    namespace: istio-system\n...\n```", "```\n...\n  source:\n    chart: gateway\n    repoURL: https://istio-release.storage.googleapis.com/charts\n    targetRevision: 1.19.1\n    helm:\n      releaseName: istio-ingress\n  destination:\n    server: \"https://kubernetes.default.svc\"\n    namespace: istio-ingress\n...\n```", "```\ndata \"kubectl_file_documents\" \"istio\" {\n    content = file(\"../manifests/argocd/istio.yaml\")\n}\nresource \"kubectl_manifest\" \"istio\" {\n  depends_on = [\n    kubectl_manifest.gcpsm-secrets,\n  ]\n  for_each  = data.kubectl_file_documents.istio.manifests\n  yaml_body = each.value\n  override_namespace = \"argocd\"\n}\n```", "```\n$ cd ~\n$ cp -a ~/modern-devops/ch15/install-istio/app.tf \\\n ~/mdo-environments/terraform/app.tf\n$ cp -a ~/modern-devops/ch15/install-istio/istio.yaml \\\n ~/mdo-environments/manifests/argocd/istio.yaml\n$ git add --all\n$ git commit -m \"Install istio\"\n$ git push\n```", "```\n$ gcloud container clusters get-credentials \\\n mdo-cluster-dev --zone us-central1-a --project $PROJECT_ID\n```", "```\n$ kubectl get svc argocd-server -n argocd\nNAME          TYPE        EXTERNAL-IP  PORTS          AGE  \nargocd-server LoadBalaner 34.122.51.25 80/TCP,443/TCP 6m15s\n```", "```\n$ kubectl patch secret argocd-secret -n argocd \\\n-p '{\"data\": {\"admin.password\": null, \"admin.passwordMtime\": null}}'\n$ kubectl scale deployment argocd-server --replicas 0 -n argocd\n$ kubectl scale deployment argocd-server --replicas 1 -n argocd\n```", "```\n$ kubectl -n argocd get secret argocd-initial-admin-secret \\\n -o jsonpath=\"{.data.password}\" | base64 -d && echo\n```", "```\napiVersion: v1\n kind: Namespace\n metadata:\n   name: blog-app\n   labels:\n     istio-injection: enabled\n...\n```", "```\n$ cd ~\n$ cp -a ~/modern-devops/ch15/install-istio/blog-app.yaml \\\n ~/mdo-environments/manifests/blog-app/blog-app.yaml\n$ git add --all\n$ git commit -m \"Enable sidecar injection\"\n$ git push\n```", "```\n$ kubectl -n blog-app rollout restart deploy frontend\n$ kubectl -n blog-app rollout restart deploy posts\n$ kubectl -n blog-app rollout restart deploy users\n$ kubectl -n blog-app rollout restart deploy reviews\n$ kubectl -n blog-app rollout restart deploy ratings\n$ kubectl -n blog-app rollout restart statefulset mongodb\n```", "```\n$ kubectl get pod -n blog-app \nNAME                      READY   STATUS    RESTARTS   AGE\nfrontend-759f58f579-gqkp9 2/2     Running   0          109s\nmongodb-0                 2/2     Running   0          98s\nposts-5cdcb5cdf6-6wjrr    2/2     Running   0          108s\nratings-9888d6fb5-j27l2   2/2     Running   0          105s\nreviews-55ccb7fbd9-vw72m  2/2     Running   0          106s\nusers-5dbd56c4c5-stgjp    2/2     Running   0          107s\n```", "```\n$ kubectl get svc istio-ingress -n istio-ingress\nNAME           EXTERNAL-IP    PORT(S)       \nistio-ingress  34.30.247.164  80:30950/TCP,443:32100/TCP\n```", "```\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: blog-app-gateway\n  namespace: blog-app\nspec:\n  selector:\n    istio: ingress\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n```", "```\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: blog-app\n  namespace: blog-app\nspec:\n  hosts:\n  - \"*\"\n  gateways:\n  - blog-app-gateway\n  http:\n  - match:\n    - uri:\n        exact: /\n    - uri:\n        prefix: /static\n    - uri:\n        prefix: /posts\n    - uri:\n        exact: /login\n    - uri:\n        exact: /logout\n    - uri:\n        exact: /register\n    - uri:\n        exact: /updateprofile\n    route:\n    - destination:\n        host: frontend\n        port:\n          number: 80\n```", "```\n$ cd ~/mdo-environments\n$ cp ~/modern-devops/ch15/istio-ingressgateway/gateway.yaml \\\nmanifests/blog-app/gateway.yaml\n$ cp ~/modern-devops/ch15/istio-ingressgateway/blog-app.yaml \\\nmanifests/blog-app/blog-app.yaml\n$ git add --all\n$ git commit -m \"Added gateway\"\n$ git push\n```", "```\n$ openssl req -x509 -sha256 -nodes -days 365 \\ \n-newkey rsa:2048 -subj '/O=example Inc./CN=example.com' \\ \n-keyout example.com.key -out example.com.crt \n```", "```\n$ openssl req -out blogapp.example.com.csr \\ \n-newkey rsa:2048 -nodes -keyout blogapp.example.com.key \\ \n-subj \"/CN=blogapp.example.com/O=blogapp organization\" \n$ openssl x509 -req -sha256 -days 365 \\ \n-CA example.com.crt -CAkey example.com.key -set_serial 1 \\ \n-in blogapp.example.com.csr -out blogapp.example.com.crt \n```", "```\n$ echo -ne \"{\\\"MONGO_INITDB_ROOT_USERNAME\\\": \\\"root\\\", \\\n\\\"MONGO_INITDB_ROOT_PASSWORD\\\": \\\"itsasecret\\\", \\\n\\\"blogapptlskey\\\": \\\"$(base64 blogapp.example.com.key -w 0)\\\", \\\n\\\"blogapptlscert\\\": \\\"$(base64 blogapp.example.com.crt -w 0)\\\"}\" | \\\ngcloud secrets versions add external-secrets --data-file=-\nCreated version [2] of the secret [external-secrets].\n```", "```\napiVersion: external-secrets.io/v1alpha1\nkind: ExternalSecret\nmetadata:\n  name: blogapp-tls-credentials\n  namespace: istio-ingress\nspec:\n  secretStoreRef:\n    kind: ClusterSecretStore\n    name: gcp-backend\n  target:\n    template:\n      type: kubernetes.io/tls\n      data:\n        tls.crt: \"{{ .blogapptlscert | base64decode | toString }}\"\n        tls.key: \"{{ .blogapptlskey | base64decode | toString }}\"\n    name: blogapp-tls-credentials\n  data:\n  - secretKey: blogapptlskey\n    remoteRef:\n      key: external-secrets\n      property:  blogapptlskey\n  - secretKey: blogapptlscert\n    remoteRef:\n      key: external-secrets\n      property: blogapptlscert\n```", "```\n$ mkdir ~/mdo-environments/manifests/istio-ingress\n$ cp ~/modern-devops/ch15/security/blogapp-tls-credentials.yaml \\\n~/mdo-environments/manifests/istio-ingress\n```", "```\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: blog-app-gateway\n  namespace: blog-app\nspec:\n  selector:\n    istio: ingress\n  servers:\n  - port:\n      number: 443\n      name: https\n      protocol: HTTPS\n    tls:\n      mode: SIMPLE\n      credentialName: blogapp-tls-credentials\n    hosts:\n    - \"*\"\n```", "```\n$ cp ~/modern-devops/ch15/security/gateway.yaml \\\n~/mdo-environments/manifests/blog-app/\n$ cp ~/modern-devops/ch15/security/run-tests.yml \\\n~/mdo-environments/.github/workflows/\n$ git add --all\n$ git commit -m \"Enabled frontend TLS\"\n$ git push\n```", "```\n$ kubectl run -it --rm --image=curlimages/curl curly -- curl -v http://frontend.blog-app\n*   Trying 10.71.246.145:80…\n* Connected to frontend (10.71.246.145) port 80\n> GET / HTTP/1.1\n> Host: frontend\n> User-Agent: curl/8.4.0\n> Accept: */*\n< HTTP/1.1 200 OK\n< server: envoy\n< date: Sat, 21 Oct 2023 07:19:18 GMT\n< content-type: text/html; charset=utf-8\n< content-length: 5950\n< x-envoy-upstream-service-time: 32\n<!doctype html>\n<html la\"g=\"en\">\n...\n```", "```\napiVersion: security.istio.io/v1beta1\nkind: PeerAuthentication\nmetadata:\n  name: default\n  namespace: blog-app\nspec:\n  mtls:\n    mode: STRICT\n```", "```\n$ cp ~/modern-devops/ch15/security/strict-mtls.yaml \\\n ~/mdo-environments/manifests/blog-app/\n$ git add --all\n$ git commit -m \"Enable strict TLS\"\n$ git push\n```", "```\n$ kubectl run -it --rm --image=curlimages/curl  curly -- curl -v http://frontend.blog-app\n*   Trying 10.71.246.145:80...\n* Connected to frontend.blog-app (10.71.246.145) port 80\n> GET / HTTP/1.1\n> Host: frontend.blog-app\n> User-Agent: curl/8.4.0\n> Accept: */*\n* Recv failure: Connection reset by peer\n* Closing connection\ncurl: (56) Recv failure: Connection reset by peer\n```", "```\napiVersion: security.istio.io/v1beta1\nkind: AuthorizationPolicy\nmetadata:\n  name: posts\n  namespace: blog-app\nspec:\n  selector:\n    matchLabels:\n      app: posts\n  action: ALLOW\n  rules:\n  - from:\n    - source:\n        principals: [\"cluster.local/ns/blog-app/sa/frontend\"]\n```", "```\n...\n  name: reviews\n...\n  rules:\n  - from:\n    - source:\n        principals: [\"cluster.local/ns/blog-app/sa/frontend\"]\n```", "```\n...\n  name: users\n...\n  rules:\n  - from:\n    - source:\n        principals: [\"cluster.local/ns/blog-app/sa/frontend\"]\n```", "```\n...\n  name: ratings\n...\n  rules:\n  - from:\n    - source:\n        principals: [\"cluster.local/ns/blog-app/sa/reviews\"]\n```", "```\n...\n  name: mongodb\n...\n  rules:\n  - from:\n    - source:\n        principals: [\"cluster.local/ns/blog-app/sa/posts\", \"cluster.local/ns/blog-app/sa/\nreviews\", \"cluster.local/ns/blog-app/sa/ratings\", \"cluster.local/ns/blog-app/sa/users\"]\n```", "```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: mongodb\n  namespace: blog-app\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n...\nspec:\n...\n  template:\n...\n    spec:\n      serviceAccountName: mongodb\n      containers:\n...\n```", "```\n$ cp ~/modern-devops/ch15/security/authorization-policies.yaml \\\n ~/mdo-environments/manifests/blog-app/\n$ cp ~/modern-devops/ch15/security/blog-app.yaml \\\n ~/mdo-environments/manifests/blog-app/\n$ git add --all\n$ git commit -m \"Added auth policies\"\n$ git push\n```", "```\n$ kubectl -n blog-app exec -it $(kubectl get pod -n blog-app | \\\ngrep frontend | awk {'print $1'}) -- /bin/sh\n/ # wget posts:5000\nConnecting to posts:5000 (10.71.255.204:5000)\nwget: server returned error: HTTP/1.1 404 Not Found\n/ # wget reviews:5000\nConnecting to reviews:5000 (10.71.244.177:5000)\nwget: server returned error: HTTP/1.1 404 Not Found\n/ # wget ratings:5000\nConnecting to ratings:5000 (10.71.242.178:5000)\nwget: server returned error: HTTP/1.1 403 Forbidden\n/ # wget users:5000\nConnecting to users:5000 (10.71.241.255:5000)\nwget: server returned error: HTTP/1.1 404 Not Found\n/ # wget mongodb:27017\nConnecting to mongodb:27017 (10.68.0.18:27017)\nwget: error getting response: Resource temporarily unavailable\n/ # exit\ncommand terminated with exit code 1\n```", "```\n$ kubectl -n blog-app exec -it $(kubectl get pod -n blog-app | \\\ngrep posts | awk {'print $1'}) -- /bin/sh\n/ # wget mongodb:27017\nConnecting to mongodb:27017 (10.68.0.18:27017)\nsaving to 'index.html'\nindex.html           100% |************|    85  0:00:00 ETA\n'index.html' saved\n/ # wget ratings:5000\nConnecting to ratings:5000 (10.71.242.178:5000)\nwget: server returned error: HTTP/1.1 403 Forbidden\n/ # wget reviews:5000\nConnecting to reviews:5000 (10.71.244.177:5000)\nwget: server returned error: HTTP/1.1 403 Forbidden\n/ # wget users:5000\nConnecting to users:5000 (10.71.241.255:5000)\nwget: server returned error: HTTP/1.1 403 Forbidden\n/ # exit\ncommand terminated with exit code 1\n```", "```\n$ kubectl -n blog-app exec -it $(kubectl get pod -n blog-app | \\\ngrep reviews | awk {'print $1'}) -- /bin/sh\n/ # wget ratings:5000\nConnecting to ratings:5000 (10.71.242.178:5000)\nwget: server returned error: HTTP/1.1 404 Not Found\n/ # wget mongodb:27017\nConnecting to mongodb:27017 (10.68.0.18:27017)\nsaving to 'index.html'\nindex.html           100% |**********|    85  0:00:00 ETA\n'index.html' saved\n/ # wget users:5000\nConnecting to users:5000 (10.71.241.255:5000)\nwget: server returned error: HTTP/1.1 403 Forbidden\n/ # exit\ncommand terminated with exit code 1\n```", "```\n$ kubectl -n blog-app exec -it $(kubectl get pod -n blog-app \\\n   | grep ratings | awk {'print $1'}) -- /bin/sh\n/ # wget mongodb:27017\nConnecting to mongodb:27017 (10.68.0.18:27017)\nsaving to 'index.html'\nindex.html           100% |************|    85  0:00:00 ETA\n'index.html' saved\n/ # wget ratings:5000\nConnecting to ratings:5000 (10.71.242.178:5000)\nwget: server returned error: HTTP/1.1 403 Forbidden\n/ # exit\ncommand terminated with exit code 1\n```", "```\n$ cd ~/mdo-environments/manifests/blog-app/\n$ cp ~/modern-devops/ch15/traffic-management/blog-app.yaml .\n$ git add --all\n$ git commit -m \"Added ratings-v2 service\"\n$ git push\n```", "```\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: frontend\n  namespace: blog-app\nspec:\n  host: frontend\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n```", "```\n...\nspec:\n  host: ratings\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n```", "```\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: frontend\n  namespace: blog-app\nspec:\n  hosts:\n  - frontend\n  http:\n  - route:\n    - destination:\n        host: frontend\n        subset: v1\n```", "```\n$ cd ~/mdo-environments/manifests/blog-app\n$ cp ~/modern-devops/ch15/traffic-management/destination-rules.yaml .\n$ cp ~/modern-devops/ch15/traffic-management/virtual-services-v1.yaml .\n$ git add --all\n$ git commit -m \"Route to v1\"\n$ git push\n```", "```\n...\n  http:\n  - route:\n    - destination:\n        host: ratings\n        subset: v1\n      weight: 80\n    - destination:\n        host: ratings\n        subset: v2\n      weight: 20\n```", "```\n$ cd ~/mdo-environments/manifests/blog-app \n$ cp ~/modern-devops/ch15/traffic-management/virtual-services-canary.yaml \\\nvirtual-services.yaml \n$ git add --all\n$ git commit -m \"Canary rollout\"\n$ git push\n```", "```\n...\n  http:\n  - route:\n    - destination:\n        host: ratings\n        subset: v1\n      weight: 100\n    mirror:\n      host: ratings\n      subset: v2\n    mirror_percent: 100\n```", "```\n$ cp ~/modern-devops/ch15/traffic-management/virtual-services-mirroring.yaml \\\nvirtual-services.yaml\n$ git add --all\n$ git commit -m \"Mirror traffic\"\n$ git push\n```", "```\n$ kubectl logs $(kubectl get pod -n blog-app | \\\ngrep \"ratings-\" | awk '{print $1}') -n blog-app\n127.0.0.6 - - [22/Oct/2023 08:33:19] \"GET /review/6534cba72485f5a51cbdcef0/rating \nHTTP/1.1\" 200 -\n127.0.0.6 - - [22/Oct/2023 08:33:19] \"GET /review/6534cbb32485f5a51cbdcef1/rating \nHTTP/1.1\" 200 -\n127.0.0.6 - - [22/Oct/2023 08:33:23] \"GET /review/6534cba72485f5a51cbdcef0/rating \nHTTP/1.1\" 200 -\n127.0.0.6 - - [22/Oct/2023 08:33:23] \"GET /review/6534cbb32485f5a51cbdcef1/rating \nHTTP/1.1\" 200 -\n127.0.0.6 - - [22/Oct/2023 08:33:25] \"GET /review/6534cba72485f5a51cbdcef0/rating \nHTTP/1.1\" 200 -\n```", "```\n$ kubectl logs $(kubectl get pod -n blog-app | \\\ngrep \"ratings-v2\" | awk '{print $1}') -n blog-app\n127.0.0.6 - - [22/Oct/2023 08:33:19] \"GET /review/6534cba72485f5a51cbdcef0/rating \nHTTP/1.1\" 200 -\n127.0.0.6 - - [22/Oct/2023 08:33:19] \"GET /review/6534cbb32485f5a51cbdcef1/rating \nHTTP/1.1\" 200 -\n127.0.0.6 - - [22/Oct/2023 08:33:23] \"GET /review/6534cba72485f5a51cbdcef0/rating \nHTTP/1.1\" 200 -\n127.0.0.6 - - [22/Oct/2023 08:33:23] \"GET /review/6534cbb32485f5a51cbdcef1/rating \nHTTP/1.1\" 200 -\n127.0.0.6 - - [22/Oct/2023 08:33:25] \"GET /review/6534cba72485f5a51cbdcef0/rating \nHTTP/1.1\" 200 -\n```", "```\n$ cd ~\n$ mkdir ~/mdo-environments/manifests/istio-system\n$ cd ~/mdo-environments/manifests/istio-system/\n$ cp ~/modern-devops/ch15/observability/*.yaml .\n$ git add --all\n$ git commit -m \"Added observability\"\n$ git push\n```", "```\n$ kubectl port-forward deploy/kiali -n istio-system 20001:20001\n```", "```\n$ kubectl port-forward deploy/grafana -n istio-system 20001:3000\n```", "```\nround(sum(irate(istio_requests_total{connection_security_policy=\"mutual_tls\",destination_\nservice=~\"frontend.blog-app.svc.cluster.local\",reporter=~\"destination\",source_\nworkload=~\"istio-ingress\",source_workload_namespace=~\"istio-ingress\"}[5m])) by (source_\nworkload, source_workload_namespace, response_code), 0.001)\n```"]