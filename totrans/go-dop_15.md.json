["```\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo\nsudo yum -y install packer\n```", "```\ncurl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\nsudo apt-add-repository \"deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main\"\nsudo apt-get update && sudo apt-get install packer\n```", "```\npacker version\n```", "```\nmkdir packer\ncd packer\ntouch amazon.pkr.hcl\nmkdir files\ncd files\nssh-keygen -t rsa -N \"\" -C \"agent.pem\" -f agent\nmv agent ~/.ssh/agent.pem\nwget https://raw.githubusercontent.com/PacktPublishing/Go-for-DevOps/rev0/chapter/8/agent/bin/linux_amd64/agent\nwget https://raw.githubusercontent.com/PacktPublishing/Go-for-DevOps/rev0/chapter/12/agent.service\ncd ..\n```", "```\npacker {\n  required_plugins {\n    amazon = {\n      version = \">= 0.0.1\"\n      source = \"github.com/hashicorp/amazon\"\n    }\n  }\n}\n```", "```\nsource \"amazon-ebs\" \"ubuntu\" {\n  access_key = \"your key\"\n  secret_key = \"your secret\"\n  ami_name      = \"ubuntu-amd64\"\n  instance_type = \"t2.micro\"\n  region        = \"us-east-2\"\n  source_ami_filter {\n    filters = {\n      name                = \"ubuntu/images/*ubuntu-xenial-16.04-amd64-server-*\"\n      root-device-type    = \"ebs\"\n      virtualization-type = \"hvm\"\n    }\n    most_recent = true\n    owners      = [\"099720109477\"]\n  }\n  ssh_username = \"ubuntu\"\n}\n```", "```\nsource \"amazon-ebs\" \"ubuntu\" {\n```", "```\nbuild {\n  name    = \"goBook\"\n  sources = [\n    \"source.amazon-ebs.ubuntu\"\n  ]\n  provisioner \"shell\" {\n    inline = [\n      \"cd ~\",\n      \"mkdir tmp\",\n      \"cd tmp\",\n      \"wget https://golang.org/dl/go1.17.5.linux-amd64.tar.gz\",\n      \"sudo tar -C /usr/local -xzf go1.17.5.linux-amd64.tar.gz\",\n      \"echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.profile\",\n      \". ~/.profile\",\n      \"go version\",\n      \"cd ~/\",\n      \"rm -rf tmp/*\",\n      \"rmdir tmp\",\n    ]\n  }\n}\n```", "```\n// Setup user \"agent\" with SSH key file\nprovisioner \"shell\" {\n  inline = [\n    \"sudo adduser --disabled-password --gecos '' agent\",\n  ]\n}\nprovisioner \"file\" {\n  source = \"./files/agent.pub\"\n  destination = \"/tmp/agent.pub\"\n}\nprovisioner \"shell\" {\n  inline = [\n    \"sudo mkdir /home/agent/.ssh\",\n    \"sudo mv /tmp/agent.pub /home/agent/.ssh/authorized_keys\",\n    \"sudo chown agent:agent /home/agent/.ssh\",\n    \"sudo chown agent:agent /home/agent/.ssh/authorized_keys\",\n    \"sudo chmod 400 .ssh/authorized_keys\",\n  ]\n}\n```", "```\n// Setup agent binary running with systemd file.\nprovisioner \"shell\" { // This installs dbus-launch\n     environment_vars = [\n       \"DEBIAN_FRONTEND=noninteractive\",\n     ]\n     inline = [\n       \"sudo apt-get install -y dbus\",\n       \"sudo apt-get install -y dbus-x11\",\n     ]\n}\n```", "```\nprovisioner \"file\" {\n  source = \"./files/agent\"\n  destination = \"/tmp/agent\"\n}\n```", "```\nprovisioner \"shell\" {\n  inline = [\n    \"sudo mkdir /home/agent/bin\",\n    \"sudo chown agent:agent /home/agent/bin\",\n    \"sudo chmod ug+rwx /home/agent/bin\",\n    \"sudo mv /tmp/agent /home/agent/bin/agent\",\n    \"sudo chown agent:agent /home/agent/bin/agent\",\n    \"sudo chmod 0770 /home/agent/bin/agent\",\n  ]\n}\n```", "```\nprovisioner \"file\" {\n  source = \"./files/agent.service\"\n  destination = \"/tmp/agent.service\"\n}\n```", "```\nprovisioner \"shell\" {\n  inline = [\n    \"sudo mv /tmp/agent.service /etc/systemd/system/agent.service\",\n    \"sudo systemctl enable agent.service\",\n    \"sudo systemctl daemon-reload\",\n    \"sudo systemctl start agent.service\",\n    \"sleep 10\",\n    \"sudo systemctl is-enabled agent.service\",\n    \"sudo systemctl is-active agent.service\",\n  ]\n}\n```", "```\nprovisioner \"shell\" { \n    inline = [ \n        \"cd ~\", \n        \"sudo curl -L https://github.com/aelsabbahy/goss/ releases/latest/download/goss-linux-amd64 -o /usr/local/bin/ goss\", \n        \"sudo chmod +rx /usr/local/bin/goss\", \n        \"goss -v\", \n    ] \n} \n```", "```\npacker init .\n```", "```\npacker validate .\n```", "```\npacker fmt .\n```", "```\npacker build .\n```", "```\nBuild 'goBook.amazon-ebs.ubuntu' finished after 5 minutes 11 seconds.\n==> Wait completed after 5 minutes 11 seconds\n==> Builds finished. The artifacts of successful builds are:\n--> goBook.amazon-ebs.ubuntu: AMIs were created:\nus-east-2: ami-0f481c1107e74d987\n```", "```\ngoss -g process.yaml autoadd sshd\n```", "```\nservice:\n  sshd:\n    enabled: true\n    running: true\nuser:\n  sshd:\n    exists: true\n    uid: 110\n    gid: 65534\n    groups:\n    - nogroup\n    home: /var/run/sshd\n    shell: /usr/sbin/nologin\nprocess:\n  sshd:\n    running: true\n```", "```\ngoss -g process.yaml autoadd agent\n```", "```\ngoss -g files.yaml autoadd /home/agent/bin/agent\n```", "```\nfile:\n  /home/agent/bin/agent:\n    exists: true\n    mode: \"0700\"\n    size: 14429561\n    owner: agent\n    group: agent\n    filetype: file\n    contains: []\n```", "```\ngoss -g files.yaml add file /home/agent/.ssh/authorized_keys \n```", "```\nsha256sum /home/agent/.ssh/authorized_keys\n```", "```\nsha256: theFileHashJustGenerated\n```", "```\nfind /usr/local/go -print0 | xargs -0 -I{} goss -g golang.yaml add file {}\n```", "```\nallfiles /usr/local/go > goinstall_files.yaml\n```", "```\ngoss -g dbus.yaml add package dbus\ngoss -g dbus.yaml add package dbus-x11\n```", "```\ngoss add goss process.yaml\ngoss add goss files.yaml\ngoss add goss dbus.yaml\n```", "```\ngoss validate\n```", "```\n..........................\nTotal Duration: 0.031s\nCount: 26, Failed: 0, Skipped: 0\n```", "```\ncd /home/[user]/packer/files\nmkdir goss\ncd goss\nscp ubuntu@[ip of AMI machine]:/home/ubuntu/*.yaml ./\n```", "```\nmkdir ~/tmp\ncd ~/tmp\nwget https://github.com/YaleUniversity/packer-provisioner-goss/releases/download/v3.1.2/packer-provisioner-goss-v3.1.2-linux-amd64.tar.gz\nsudo tar -xzf packer-provisioner-goss-v3.1.2-linux-amd64.tar.gz\ncp sudo packer-provisioner-goss /usr/bin/packer-provisioner-goss\nrm -rf ~/tmp\n```", "```\n// Setup Goss for validating an image.\nprovisioner \"file\" {\n  source = \"./files/goss/*\"\n  destination = \"/home/ubuntu/\"\n}\nprovisioner \"goss\" {\n     retry_timeout = \"30s\"\n     tests = [\n      \"files/goss/goss.yaml\", \n      \"files/goss/files.yaml\", \n      \"files/goss/dbus.yaml\", \n      \"files/goss/process.yaml\", \n     ]\n}\n```", "```\npacker fmt .\n```", "```\nami_name      = \"ubuntu-amd64\"\n```", "```\npacker build .\n```", "```\n==> goBook.amazon-ebs.ubuntu: Running goss tests...\n==> goBook.amazon-ebs.ubuntu: Running GOSS render command: cd /tmp/goss &&  /tmp/goss-0.3.9-linux-amd64    render > /tmp/goss-spec.yaml\n==> goBook.amazon-ebs.ubuntu: Goss render ran successfully\n==> goBook.amazon-ebs.ubuntu: Running GOSS render debug command: cd /tmp/goss &&  /tmp/goss-0.3.9-linux-amd64    render -d > /tmp/debug-goss-spec.yaml\n==> goBook.amazon-ebs.ubuntu: Goss render debug ran successfully\n==> goBook.amazon-ebs.ubuntu: Running GOSS validate command: cd /tmp/goss &&   /tmp/goss-0.3.9-linux-amd64    validate --retry-timeout 30s --sleep 1s\n    goBook.amazon-ebs.ubuntu: ..........................\n    goBook.amazon-ebs.ubuntu:\n    goBook.amazon-ebs.ubuntu: Total Duration: 0.029s\n    goBook.amazon-ebs.ubuntu: Count: 26, Failed: 0, Skipped: 0\n==> goBook.amazon-ebs.ubuntu: Goss validate ran successfully\n```", "```\ntype Provisioner interface { \n    ConfigSpec() hcldec.ObjectSpec \n    Prepare(...interface{}) error \n    Provision(context.Context, Ui, Communicator, \n        map[string] interface{}) error \n}\n```", "```\npackage config\n//go:generate packer-sdc mapstructure-to-hcl2 -type Provisioner\n// Provisioner is our provisioner configuration.\ntype Provisioner struct {\n\tVersion string\n}\n// Default inputs default values.\nfunc (p *Provisioner) Defaults() {\n\tif p.Version == \"\" {\n\t\tp.Version = \"latest\"\n\t}\n}\n```", "```\ngo install github.com/hashicorp/packer-plugin-sdk/cmd/packer-sdc@latest\n```", "```\ngo generate ./\n```", "```\npackage main \nimport ( \n    ... \n    \"[repo location]/packer/goenv/internal/config\" \n    \"github.com/hashicorp/packer-plugin-sdk/packer\" \n    \"github.com/hashicorp/packer-plugin-sdk/plugin\" \n    \"github.com/hashicorp/packer-plugin-sdk/version\" \n    packerConfig \"github.com/hashicorp/packer-plugin-sdk/ template/config\" \n    ... \n)\n```", "```\n// Provisioner implements packer.Provisioner. \ntype Provisioner struct{\n     packer.Provisioner // Embed the interface.\n     conf *config.Provisioner\n     content []byte\n     fileName string\n}\n```", "```\nfunc (p *Provisioner) ConfigSpec() hcldec.ObjectSpec {\n     return new(config.FlatProvisioner).HCL2Spec()\n}\n```", "```\nfunc (p *Provisioner) Prepare(raws ...interface{}) error { \n    c := config.Provisioner{} \n    if err := packerConfig.Decode(&c, nil, raws...); err != nil {\n            return err\n    }\n    c.Defaults()\n    p.conf = &c\n    return nil\n}\n```", "```\nfunc (p *Provisioner) Provision(ctx context.Context, u packer. Ui, c packer.Communicator, m map[string]interface{}) error { \n    u.Message(\"Begin Go environment install\") \n    if err := p.fetch(ctx, u, c); err != nil { \n            u.Error(fmt.Sprintf(\"Error: %s\", err))\n            return err\n    }\n    if err := p.push(ctx, u, c); err != nil {\n            u.Error(fmt.Sprintf(\"Error: %s\", err))\n            return err\n    }\n    if err := p.unpack(ctx, u, c); err != nil {\n            u.Error(fmt.Sprintf(\"Error: %s\", err))\n            return err\n    }\n    if err := p.test(ctx, u, c); err != nil {\n            u.Error(fmt.Sprintf(\"Error: %s\", err))\n            return err\n    }\n    u.Message(\"Go environment install finished\")\n    return nil\n}\n```", "```\ntype Ui interface {\n     Ask(string) (string, error)\n     Say(string)\n     Message(string)\n     Error(string)\n     Machine(string, ...string)\n     getter.ProgressTracker\n}\n```", "```\ntype Communicator interface {\n  Start(context.Context, *RemoteCmd) error\n  Upload(string, io.Reader, *os.FileInfo) error\n  UploadDir(dst string, src string, exclude []string) error\n  Download(string, io.Writer) error\n  DownloadDir(src string, dst string, exclude []string) error\n}\n```", "```\nfunc (p *Provisioner) fetch(ctx context.Context, u Ui, \nc Communicator) error {\n     const (\n          goURL = `https://golang.org/dl/go%s.linux-%s.tar.gz`\n          name  = `go%s.linux-%s.tar.gz`\n    )\n    platform := runtime.GOARCH\n    if p.conf.Version == \"latest\" {\n          u.Message(\"Determining latest Go version\")\n          resp, err := http.Get(\"https://golang.org/VERSION?m=text\")\n          if err != nil {\n                  u.Error(\"http get problem: \" + err.Error())\n                  return fmt.Errorf(\"problem asking Google for latest Go version: %s\", err)\n          }\n          ver, err := io.ReadAll(resp.Body)\n          if err != nil {\n                  u.Error(\"io read problem: \" + err.Error())\n                  return fmt.Errorf(\"problem reading latest Go version: %s\", err)\n          }\n          p.conf.Version = strings.TrimPrefix(string(ver), \"go\")\n          u.Message(\"Latest Go version: \" + p.conf.Version)\n    } else {\n          u.Message(\"Go version to use is: \" + p.conf.Version)\n    }\n```", "```\n    url := fmt.Sprintf(goURL, p.conf.Version, platform)\n    u.Message(\"Downloading Go version: \" + url)\n    resp, err := http.Get(url)\n    if err != nil {\n        return fmt.Errorf(\"problem reaching golang.org for version(%s): %s)\", p.conf.Version, err)\n    }\n    defer resp.Body.Close()\n    p.content, err = io.ReadAll(resp.Body)\n    if err != nil {\n        return fmt.Errorf(\"problem downloading file: %s\", err)\n    }\n    p.fileName = fmt.Sprintf(name, p.conf.Version, platform)\n    u.Message(\"Downloading complete\")\n    return nil\n}\n```", "```\nfunc (p *Provisioner) push(ctx context.Context, u Ui, \nc Communicator) error {\n     u.Message(\"Pushing Go tarball\")\n     fs := simple.New()\n     fs.WriteFile(\"/tarball\", p.content, 0700)\n     fi, _ := fs.Stat(\"/tarball\")\n     err := c.Upload(\n             \"/tmp/\"+p.fileName,\n             bytes.NewReader(p.content),\n             &fi,\n     )\n     if err != nil {\n             return err\n     }\n     u.Message(\"Go tarball delivered to: /tmp/\" + p.fileName)\n     return nil\n}\n```", "```\nfunc (p *Provisioner) unpack(ctx context.Context, u Ui, \nc Communicator) error {\n     const cmd = `sudo tar -C /usr/local -xzf /tmp/%s`\n     u.Message(\"Unpacking Go tarball to /usr/local\")\n     b := bytes.Buffer{}\n     rc := &packer.RemoteCmd{\n          Command: fmt.Sprintf(cmd, p.fileName),\n          Stdout: &b,\n          Stderr: &b,\n     }\n     if err := c.Start(rc); err != nil {\n          return fmt.Errorf(\"problem unpacking tarball(%s):\\n%s\", err, b.String())\n     }\n     u.Message(\"Unpacked Go tarball\")\n     return nil\n}\n```", "```\nfunc (p *Provisioner) test(ctx context.Context, u Ui, \nc Communicator) error {\n     u.Message(\"Testing Go install\")\n     b := bytes.Buffer{}\n     rc := &packer.RemoteCmd{\n          Command: `/usr/local/go/bin/go version`,\n          Stdout: &b,\n          Stderr: &b,\n     }\n     if err := c.Start(rc); err != nil {\n          return fmt.Errorf(\"problem testing Go install(%s):\\n%s\", err, b.String())\n     }\n     u.Message(\"Go installed successfully\")\n     return nil\n}\n```", "```\nconst (\n        ver     = \"0.0.1\"\n        release = \"dev\"\n)\nvar pv *version.PluginVersion\nfunc init() {\n     pv = version.InitializePluginVersion(ver, release)\n}\nfunc main() { \n    set := plugin.NewSet() \n    set.SetVersion(pv) \n    set.RegisterProvisioner(\"goenv\", &Provisioner{}) \n    err := set.Run() \n    if err != nil { \n        fmt.Fprintln(os.Stderr, err.Error()) \n        os.Exit(1) \n    } \n} \n```", "```\ngpg --armor --export-secret-keys [key ID or email]\n```", "```\ncurl -L -o \".goreleaser.yml\" \\\nhttps://raw.githubusercontent.com/hashicorp/packer-plugin-scaffolding/main/.goreleaser.yml\n```", "```\nmkdir -p .github/workflows &&\n curl -L -o \".github/workflows/release.yml\" \\\n https://raw.githubusercontent.com/hashicorp/packer-plugin-scaffolding/main/.github/workflows/release.yml\n```", "```\ncurl -L -o \"GNUmakefile\" \\\nhttps://raw.githubusercontent.com/hashicorp/packer-plugin-scaffolding/main/GNUmakefile\n```", "```\npacker {\n  required_plugins {\n    amazon = {\n      version = \">= 0.0.1\"\n      source = \"github.com/hashicorp/amazon\"\n    }\n    installGo = {\n      version = \">= 0.0.1\"\n      source = \"github.com/johnsiilver/goenv\"\n    }\n  }\n}\n```", "```\nprovisioner \"goenv-goenv\" {\n  version = \"1.17.5\"\n}\n```", "```\npacker fmt .\npacker init .\n```", "```\nInstalled plugin github.com/johnsiilver/goenv v0.0.1 in \"/home/ec2-user/.config/packer/plugins/github.com/johnsiilver/goenv/packer-plugin-goenv_v0.0.1_x5.0_linux_amd64\"\n```", "```\npacker build .\n```", "```\ngoBook.amazon-ebs.ubuntu: Begin Go environment install\ngoBook.amazon-ebs.ubuntu: Go version to use is: 1.17.5\ngoBook.amazon-ebs.ubuntu: Downloading Go version: https://golang.org/dl/go1.17.5.linux-amd64.tar.gz\ngoBook.amazon-ebs.ubuntu: Downloading complete\ngoBook.amazon-ebs.ubuntu: Pushing Go tarball\ngoBook.amazon-ebs.ubuntu: Go tarball delivered to: /tmp/go1.17.5.linux-amd64.tar.gz\ngoBook.amazon-ebs.ubuntu: Unpacking Go tarball to /usr/local\ngoBook.amazon-ebs.ubuntu: Unpacked Go tarball\ngoBook.amazon-ebs.ubuntu: Testing Go install\ngoBook.amazon-ebs.ubuntu: Go installed successfully\ngoBook.amazon-ebs.ubuntu: Go environment install finished\n```", "```\npacker build -debug\n```", "```\nPACKER_LOG=1 PACKER_LOG_PATH=\"./packerlog.txt\" packer build .\n```"]