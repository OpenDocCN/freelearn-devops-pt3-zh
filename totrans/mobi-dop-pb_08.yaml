- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keeping Mobile Apps and DevOps Secure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the previous chapters, we have understood that mobile apps have become
    a crucial part of our daily lives in the digital age, necessitating ongoing innovation
    and refinement. Organizations increasingly implement *Mobile DevOps* approaches
    to accomplish this goal, allowing development, testing, and releasing teams to
    work together seamlessly.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the quick development and rollout of releases can result in mobile
    app security vulnerabilities. In order to protect your mobile applications and
    DevOps processes, in this chapter, we will examine the fundamentals of mobile
    app security, automating security testing, and DevSecOps fundamentals. We will
    also explore the reasons behind the significance of security in mobile app development
    and Mobile DevOps, including the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Importance of security in mobile development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile app security threats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Architecting secure mobile apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The traditional way of doing security testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Mobile DevSecOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits of Mobile DevSecOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a culture of security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting your DevSecOps journey
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating mobile security testing with mobile continuous automated integration
    and continuous delivery (CI/CD) and DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tips for security automation for Mobile DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Artificial intelligence and mobile app security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importance of security in mobile development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is vital to have security in many areas of life, especially in the age of
    digital transformation. In business sectors such as automotive, healthcare, financial,
    retail, and e-commerce, and with embedded and IoT devices, we use sensitive data
    such as emails, addresses, credit cards, and mobile numbers with different mobile
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile app development has experienced exponential growth over the last decade,
    with millions of apps available on various platforms and app stores. These apps
    offer various services, from social networking to online banking and everything
    in between. As more users rely on mobile apps to access services and store sensitive
    data, the importance of security in mobile app development cannot be overstated.
  prefs: []
  type: TYPE_NORMAL
- en: Security in mobile app development is a critical aspect that developers must
    prioritize to protect user data, maintain a strong reputation, and comply with
    regulations. By understanding the importance of security and implementing practical
    measures, developers can create apps that offer their users a safer and more secure
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: “Security at the expense of usability comes at the expense of security.”
  prefs: []
  type: TYPE_NORMAL
- en: '- *Avi Douglen, OWASP Board* *of Directors*'
  prefs: []
  type: TYPE_NORMAL
- en: Hence, it’s critical to ensure that security measures are in place to protect
    user data from unauthorized access.
  prefs: []
  type: TYPE_NORMAL
- en: Did you know?
  prefs: []
  type: TYPE_NORMAL
- en: Over 500K security issues affecting over 300K apps with a combined install base
    of approximately 250 billion were fixed by developers using Google’s App Security
    Improvements program ([https://developer.android.com/google/play/asi](https://developer.android.com/google/play/asi)).
    According to Google, 1.43 million bad apps were prevented from going into the
    Play Store in 2022, thanks to improved security features and app review processes
    ([https://security.googleblog.com/2023/04/how-we-fought-bad-apps-and-bad-actors.html](https://security.googleblog.com/2023/04/how-we-fought-bad-apps-and-bad-actors.html)).
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important businesses that can be affected by security issues
    is the *fintech* sector and the *digital banking* apps that play a massive role
    in our everyday activities. Fintech is becoming a big part of our personal and
    professional lives. Customers are always concerned about safety. If they doubt
    the app’s security, they immediately uninstall it and switch to another service.
  prefs: []
  type: TYPE_NORMAL
- en: Most digital banking apps have robust security features such as **payment blocking**,
    **biometrics**, and **two-factor authentication** (**2FA**) and only allow users
    to submit complex passwords. Furthermore, customer data protection and handling
    are essential, mainly if you operate in the EU, where the *GDPR* rules apply.
  prefs: []
  type: TYPE_NORMAL
- en: What is the GDPR?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **General Data Protection Regulation (GDPR)** ([https://gdpr.eu/](https://gdpr.eu/))
    is a comprehensive law on data protection implemented on May 25, 2018, in the
    **European Union** (**EU**). Its main objective is to safeguard the privacy and
    personal information of individuals by regulating how organizations collect, process,
    store, and share such data.
  prefs: []
  type: TYPE_NORMAL
- en: The GDPR establishes a set of principles and regulations that organizations
    must adhere to in order to ensure that the rights of individuals whose data is
    being collected (known as data subjects) are respected. Failure to comply with
    these regulations may result in monetary penalties for companies. Therefore, the
    GDPR helps safeguard your personal information and guarantees that companies handle
    it appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding example is only one of many businesses that need to take into
    account to protect themselves.
  prefs: []
  type: TYPE_NORMAL
- en: In the mobile development process, security can be incorporated at multiple
    levels. To start, robust authentication protocols should be implemented to ensure
    that only authorized users can access the application. This can include *biometric
    authentication*, *fingerprint scanning*, or *password-based authentication*.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile developers should also be aware of the potential risks posed by third-party
    libraries and APIs. Any additional code added to an application should be thoroughly
    vetted to ensure it is secure and up to date.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, security is essential to mobile development and should be taken
    seriously. Following the steps outlined here, developers can ensure their applications
    are secure and provide users with a safe experience.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile app security threats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mobile apps face various security threats that can compromise user data and
    the overall integrity of the application. Here are some common security threats
    to mobile apps:'
  prefs: []
  type: TYPE_NORMAL
- en: Hackers can gain unauthorized access and extract sensitive user information
    using reverse engineering, code injection, or bypassing authentication mechanisms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile apps often handle personal information, financial details, or login credentials.
    It is possible for attackers to intercept or steal data during transit or storage
    if proper security measures are not implemented, resulting in data breaches and
    privacy violations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many ways in which mobile devices can be compromised or infected with
    malware. These malicious programs can compromise the device’s security, steal
    data, or perform unauthorized actions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attackers can access user data through physical device compromises, filesystem
    vulnerabilities, or insecure server configurations if an app doesn’t encrypt or
    protect user data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weak or ineffective authentication mechanisms can lead to unauthorized access
    to user accounts. Additionally, insufficient authorization controls may allow
    attackers to perform actions beyond their privileges, such as accessing sensitive
    functionalities or manipulating user data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poor coding practices or unpatched vulnerabilities in an app’s code can introduce
    security weaknesses. Attackers can exploit this vulnerability to execute arbitrary
    code, escalate their privileges, or gain unauthorized access to the device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attackers can flood mobile app servers with overwhelming requests, causing service
    disruptions and rendering the app inaccessible to legitimate users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mobile app developer must mitigate these threats by following secure coding
    practices, encrypting sensitive data, implementing robust authentication mechanisms,
    and educating users about the best security practices.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile developers should put security first when architecting and developing
    mobile apps. Let’s look into that next.
  prefs: []
  type: TYPE_NORMAL
- en: Architecting secure mobile apps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Architecting secure mobile apps is crucial in today’s widespread mobile device
    usage. Neglecting mobile app security can lead to various mistakes that put user
    data and privacy at risk. To ensure secure mobile applications, developers should
    follow these best practices:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify the security objectives for your app by considering factors such as
    protecting user data, ensuring secure communication, and preventing unauthorized
    access. Assess potential threats and vulnerabilities specific to your app and
    industry.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement strong encryption techniques to protect sensitive data stored on the
    device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Employ multi-factor authentication and the latest authentication frameworks,
    such as *OAuth 2.0*, to manage user access securely.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use *SSL/TLS* for data transmission and validate certificates to establish encrypted
    communication between the app and backend servers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Safeguard sensitive data using up-to-date cryptographic algorithms and techniques
    such as *SHA-256*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement secure methods to store sensitive information, such as using environment
    variables or secure storage solutions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validate user input on both the client and server sides to prevent injection
    attacks and other security vulnerabilities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conduct security testing, including static and dynamic analysis, penetration
    testing, and vulnerability assessments, to identify and resolve potential security
    flaws.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regularly update third-party libraries and frameworks to avoid any vulnerabilities
    present in outdated versions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrate security measures throughout the development life cycle, from design
    and coding to testing and deployment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that developers are trained in secure coding practices and are knowledgeable
    about common mobile app security risks and mitigation techniques.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuously monitor the app for security incidents and promptly address any
    issues. Stay updated on industry best practices and new security developments
    to ensure ongoing protection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look at how the mobile development and security teams typically perform
    security testing and why it may not be the best practice for Mobile DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: The traditional way of doing security testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Traditional security practices often involve security measures being applied
    in the later stages of development, leading to potential vulnerabilities being
    overlooked as shown in the following diagram. DevSecOps aims to address these
    issues by embedding security throughout the entire development process.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – The traditional security testing process](img/Figure_08.01_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – The traditional security testing process
  prefs: []
  type: TYPE_NORMAL
- en: 'With these practices, we usually have the following characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: The process is too slow; as shown in *Figure 8**.1*, it takes a long time, from
    1 to 2 weeks, and might be extended to 1 month to ensure the app is secure before
    releasing it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Teams work in silos with no collaboration between the mobile development, testing,
    and security teams.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The emergence of DevOps has led to the growth of DevSecOps, as traditional methods
    no longer fit well with the changing landscape. These factors have contributed
    to the need for a new approach.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s examine DevSecOps and go over its benefits and how to implement it.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to mobile DevSecOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Mobile DevSecOps** brings together software development, security, and operations
    engineering disciplines to ensure mobile applications are secure, robust, and
    maintained.'
  prefs: []
  type: TYPE_NORMAL
- en: The term DevSecOps refers to *“injecting security into the mobile CI/CD pipelines
    at an early stage of development. Security is integrated as a shared responsibility
    across culture, automation, and platform design throughout the entire Mobile DevOps*
    *life cycle.”*
  prefs: []
  type: TYPE_NORMAL
- en: A shift in team culture is necessary to turn security testing from being a blocker
    to becoming an enabler. Mobile DevSecOps combines with DevOps and is focused on
    continuously delivering mobile apps and security as shown in the following diagram.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – DevSecOps life cycle](img/Figure_08.02_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – DevSecOps life cycle
  prefs: []
  type: TYPE_NORMAL
- en: Mobile DevSecOps encompasses many development activities, as shown in *Figure
    8**.2*, such as **threat modeling**, **code scanning**, **vulnerability scanning**,
    **secure code review**, and secure coding practices; these activities ensure that
    mobile applications are secure, reliable, and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some principles of DevSecOps for mobile apps:'
  prefs: []
  type: TYPE_NORMAL
- en: The most fundamental aspect of DevSecOps is integrating security measures right
    from the beginning of the mobile app development process. This is a shift from
    the traditional approach, where security checks are typically the last step. In
    DevSecOps, security is considered at every stage of the development process, from
    planning and coding to testing and releasing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Everyone is responsible for ensuring that security is incorporated into every
    aspect of software development, including developers, testers, DevOps engineers,
    security professionals, and business stakeholders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By using tools and technologies to automatically check for potential security
    vulnerabilities during the coding process, you can identify and address issues
    faster and more efficiently than waiting for a manual review. This can include
    techniques such as **static application security testing** (**SAST**), **dynamic
    application security testing** (**DAST**), and penetration testing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security measures should not be a one-time thing. The DevSecOps approach
    emphasizes continuous security, meaning that even after the app has been released,
    it should be continuously monitored and updated to address any new security threats
    that might emerge.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevSecOps encourages a culture where the developers, security teams, and testing
    teams work together, sharing responsibility for the application’s security. This
    is often called the *shift-left* approach, where security considerations are brought
    to the forefront of the development process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying potential threats before they become an issue. This might include
    data breaches, insecure APIs, or malware attacks for mobile apps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developers should be trained in secure coding practices. This means writing
    code with security in mind.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, a robust DevSecOps approach should include plans for responding to
    and recovering from security incidents. This might include patch management, disaster
    recovery planning, and a dedicated incident response team.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevSecOps is a process that combines the principles of DevOps and security to
    ensure that organizations develop and release mobile applications faster and more
    securely.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of Mobile DevSecOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mobile DevSecOps offers a proactive and collaborative approach to mobile app
    development that ensures security is an integral part of the process. It helps
    build more robust and secure mobile applications while reducing the risk of security
    breaches and enhancing overall development efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: First, it helps reduce the risk of security vulnerabilities in mobile applications.
    By implementing security measures throughout development, Mobile DevSecOps helps
    identify and mitigate security issues before they become significant problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Secondly, Mobile DevSecOps helps speed up the delivery of secure, reliable,
    and maintainable mobile applications. By automating processes and implementing
    continuous delivery, Mobile DevSecOps helps mobile teams deliver applications
    faster and with better quality. Additionally, here are some other benefits of
    DevSecOps:'
  prefs: []
  type: TYPE_NORMAL
- en: DevSecOps can help identify and address any issues that could cause the application
    to slow down or become unreliable. This can help ensure that the application continues
    to perform optimally.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile DevSecOps can help reduce the costs associated with manual security checks
    and audits by automating security processes. This can help companies save money
    and focus their resources on other aspects of development.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile DevSecOps can help improve the overall user experience by ensuring that
    applications are secure and reliable. This can boost user engagement and satisfaction
    with the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For businesses looking to stay ahead of the competition, mobile DevSecOps is
    a must.
  prefs: []
  type: TYPE_NORMAL
- en: Organizations can ensure their mobile DevOps processes are secure by following
    the best practices outlined here. This will help to protect user data, ensure
    secure mobile application development, and reduce the risk of malicious attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Before implementing DevSecOps, it’s crucial to have a security mindset and a
    team that believes in it. Let’s talk about how to establish a culture of security
    as the first step.
  prefs: []
  type: TYPE_NORMAL
- en: Building a culture of security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For DevSecOps to work effectively, the team must first build a culture of collaboration
    between developer and security teams. You’ll need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement a security-first approach
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a security-focused mindset across teams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adopt a DevSecOps approach along with shifting security left (collaboration
    between development and security teams) and using a **CI/CD** pipeline is invaluable
    for preventing security incidents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure developers have the right tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Involve your security strategy in your mobile testing strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide trusted security guidance (Reinforce Your Mobile App Security with OWASP
    MASVS Recommendations) – we will discuss this later in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build dashboards to show the security health of your mobile apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Train developers and QA engineers in secure coding practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Engage non-technical team members in security awareness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leverage external resources and partnerships for security expertise if needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s dive deep into DevSecOps and begin our implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Starting your DevSecOps journey
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we mentioned at the start of this book, the implementation of DevOps and
    DevSecOps is not solely dependent on tools but also involves various steps and
    other factors that must be taken into account.
  prefs: []
  type: TYPE_NORMAL
- en: The following are some steps to inject security into the DevOps process for
    mobile apps.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying your goals and objectives
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first step in starting your DevSecOps journey is identifying your goals
    and objectives. What do you want to achieve with DevSecOps? Do you want to improve
    the speed of deployment? Are you looking to reduce the number of security issues
    in your mobile apps? Whatever your goals and objectives, set clear and measurable
    metrics to ensure that you can track and measure your success. But always ensure
    that the goal is to *maintain security without slowing down development* *and
    delivery*.
  prefs: []
  type: TYPE_NORMAL
- en: Building the right team
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Having the right team is essential to achieving your DevSecOps objectives. You’ll
    need to have a team that understands the principles of DevOps and security and
    is experienced in mobile development. You’ll also need to ensure that your team
    is equipped with the right tools and processes to ensure your DevSecOps journey
    is successful.
  prefs: []
  type: TYPE_NORMAL
- en: Leverage security as a shared responsibility
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *DevSecOps Manifesto* ([https://www.devsecops.org/](https://www.devsecops.org/))
    highlights the need for collaboration among all team members involved in the software
    development process. Security should not be the sole responsibility of a dedicated
    security team; instead, developers, operations, and other stakeholders must work
    together to identify and address security concerns throughout the software life
    cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Shift security left
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: According to [*Chapter 5*](B18113_05.xhtml#_idTextAnchor138)*, Implementing
    a Robust Mobile App Testing Strategy*, shifting testing to the left is highly
    recommended to ensure different testing types are executed at each stage of the
    DevOps cycle. In the same way, DevSecOps ensures security is checked at every
    stage of the DevOps cycle to ensure no vulnerabilities or security issues exist.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Shift left security testing](img/Figure_08.03_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – Shift left security testing
  prefs: []
  type: TYPE_NORMAL
- en: '**Shifting security left** means integrating security practices early in the
    development process rather than waiting until later. This approach enables teams
    to identify and address security vulnerabilities before they become critical in
    production.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can shift security to the left and keep mobile DevOps secure with the following
    practices:'
  prefs: []
  type: TYPE_NORMAL
- en: Establish a secure development process; this should be established and enforced
    across the entire mobile DevOps team. The process should include secure coding
    practices, secure testing, and secure deployment of mobile apps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorporate security requirements during the planning and design phases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement secure coding practices and use security-focused tools during development.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conduct security reviews and testing, such as static and dynamic analysis, as
    part of the **continuous integration** (**CI**) process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This allows the security team to work closely with the development and testing
    teams so that the results can be returned quickly, and testing can occur whenever
    necessary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establishing a secure development life cycle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once your team is in place, *establishing a secure development life cycle*
    is the next step. This involves setting up processes and procedures to ensure
    security is built into every step of the development process. This includes setting
    up automated testing, code reviews, penetration testing, security scanning, and
    more. The following are the recommended steps to establish a secure development
    life cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Automated security testing**: Integrate automated security testing tools
    into your CI/CD pipeline. This includes static and dynamic analysis tools, dependency
    checkers, and vulnerability scanners. Perform regular security tests to catch
    vulnerabilities early and reduce the time between discovering and fixing issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secure code review**: Incorporate security-focused code reviews into your
    development process. Use peer reviews and automated tools to identify and address
    potential security issues in your code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Threat modeling**: Conduct threat modeling exercises during the design phase
    to identify potential risks and vulnerabilities and develop strategies to mitigate
    them. Regularly update threat models for app, infrastructure, or threat landscape
    changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vulnerability management**: Establish a process for tracking, prioritizing,
    and addressing vulnerabilities discovered during development, testing, or in production.
    Create a clear communication channel for reporting security issues and ensure
    all team members understand the process and the importance of promptly addressing
    vulnerabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous monitoring and auditing**: Monitor the mobile app for security
    events, performance issues, and suspicious activity. Use monitoring tools, log
    analysis, and intrusion detection systems to detect potential security incidents
    or vulnerabilities in real time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Incident response plan**: Develop an incident response plan to effectively
    and efficiently handle security incidents, such as data breaches or cyberattacks.
    Regularly review and update the plan and conduct drills to ensure all team members
    are prepared to respond in case of an incident.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collaborate with security teams**: Encourage close collaboration between
    development, operations, and security teams. Break down silos and promote a shared
    responsibility for security, ensuring that all team members understand their role
    in protecting the app and user data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous Improvement**: Regularly review and improve your security practices,
    tools, and processes. Stay informed of the latest security trends and best practices
    and update your DevSecOps strategy as needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing the right security toolset
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Security toolsets are chosen based on various factors, including your specific
    security needs, the size and complexity of your organization, budget constraints,
    and technology stacks.
  prefs: []
  type: TYPE_NORMAL
- en: Here are some general considerations to help you select the appropriate security
    toolset.
  prefs: []
  type: TYPE_NORMAL
- en: OWASP Security testing guide (MASTG)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The **OWASP Mobile Application Security** (**MAS**) ([https://mas.owasp.org/](https://mas.owasp.org/))
    project defines the industry standard for mobile application security and provides
    a security standard for mobile apps in two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OWASP Mobile Application Security Verification Standard** (**MASVS**) is
    the go-to standard for ensuring mobile app security in the industry. It is beneficial
    for mobile software architects and developers who want to create secure mobile
    apps, as well as security testers who want to ensure that their test results are
    complete and consistent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP Mobile Application Security Testing Guide (MASTG)** covers the processes,
    techniques, and tools used during a mobile app security test, as well as a comprehensive
    set of test cases enabling testers to provide consistent and complete results.
    You can find the checklist at [https://github.com/OWASP/owasp-mastg/releases/latest/download/OWASP_MAS_Checklist.xlsx](https://github.com/OWASP/owasp-mastg/releases/latest/download/OWASP_MAS_Checklist.xlsx).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The OWASP Mobile Top 10 is a list of the most significant security risks for
    mobile apps that developers can use to identify and resolve critical security
    issues. According to the OWASP website ([https://owasp.org/www-project-mobile-top-10/](https://owasp.org/www-project-mobile-top-10/)),
    the 2023 Top 10 is currently under development and includes the following risks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**M1: Improper** **Platform Usage**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Misusing platform features, such as Android intents or iOS Touch ID, or not
    following security best practices for the platform
  prefs: []
  type: TYPE_NORMAL
- en: '**M2: Insecure** **Data Storage**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing sensitive data insecurely on the user’s device, potentially exposing
    it to unauthorized access or data leakage
  prefs: []
  type: TYPE_NORMAL
- en: '**M3:** **Insecure Communication**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Failing to protect data transmitted between the app and backend services or
    third-party APIs, potentially exposing it to interception or man-in-the-middle
    attacks
  prefs: []
  type: TYPE_NORMAL
- en: '**M4:** **Insecure Authentication**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing weak or ineffective authentication mechanisms, allowing unauthorized
    users to access the app or impersonate other users
  prefs: []
  type: TYPE_NORMAL
- en: '**M5:** **Insufficient Cryptography**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using weak or outdated cryptographic algorithms, keys, or protocols, or implementing
    them incorrectly, potentially exposing sensitive data to decryption
  prefs: []
  type: TYPE_NORMAL
- en: '**M6:** **Insecure Authorization**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Failing to implement proper access controls or authorization checks on the server
    side, allowing users to perform actions or access data they should not be authorized
    for
  prefs: []
  type: TYPE_NORMAL
- en: '**M7: Client** **Code Quality**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing insecure or poorly maintained code that may lead to vulnerabilities,
    such as buffer overflows or memory leaks
  prefs: []
  type: TYPE_NORMAL
- en: '**M8:** **Code Tampering**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Failing to protect the app from tampering or modification, potentially allowing
    attackers to modify the app’s behavior or inject malicious code
  prefs: []
  type: TYPE_NORMAL
- en: '**M9:** **Reverse Engineering**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Failing to protect the app’s source code or intellectual property from reverse
    engineering or decompilation, potentially allowing attackers to discover vulnerabilities
    or extract sensitive information
  prefs: []
  type: TYPE_NORMAL
- en: '**M10:** **Extraneous Functionality**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including hidden or unused functionality in the app, potentially introducing
    security risks or exposing sensitive information
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, when the team starts thinking about implementing security testing,
    they should explore different methods including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Static Application Security Testing** (**SAST**): This involves analyzing
    the source code of an application without executing it to find vulnerabilities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dynamic Application Security Testing** (**DAST**): Analyzing a running application
    for vulnerabilities involves examining it in real time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interactive Application Security** (**IAST**): This is a process that involves
    the monitoring of the performance of an application through software instrumentation,
    whether actively or passively'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s examine SAST and DAST in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: SAST
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**SAST** scans the source code of an application to detect any potential security
    issues. It is a proactive approach that identifies risks before they become issues.
    This allows developers to address problems before they become exploitable.'
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, SAST enables developers to avoid manually checking every line of
    code, a time-saving and cost-effective approach to security testing.
  prefs: []
  type: TYPE_NORMAL
- en: By utilizing SAST, developers can reduce the risk of their applications being
    vulnerable to security breaches, resulting in a more secure and reliable application.
  prefs: []
  type: TYPE_NORMAL
- en: DAST
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**DAST** analyzes your application’s source code, mobile applications, and
    other components to identify and report any security vulnerabilities. This type
    of testing is often used to protect against malicious attacks, data breaches,
    and other forms of malicious activity. It can help your application stay secure
    and up to date.'
  prefs: []
  type: TYPE_NORMAL
- en: DAST can be a great tool to help reduce the risk of data breaches, as it can
    detect and alert you to any potential security flaws before they become a problem.
    It can also help you ensure your application is up to date with the latest security
    patches and updates. Additionally, DAST can give you insights into how your application
    interacts with others and help you identify any risks or vulnerabilities in the
    broader environment.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, DAST can provide valuable insights into your application’s security
    and performance, so you can make informed decisions about improving your application’s
    security posture.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve learned how to get started with DevSecOps and the difference
    between static and dynamic testing, let’s examine how to automate security testing
    with CI/CD and mobile DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Automating mobile security testing with mobile CI/CD and DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Automating mobile security testing within a CI/CD and DevOps environment can
    help improve the efficiency, speed, and reliability of security testing processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an overview of how you can automate mobile security testing in such
    a setup:'
  prefs: []
  type: TYPE_NORMAL
- en: Research and choose appropriate tools that can integrate into your CI/CD pipeline.
    Some popular tools for mobile security testing include **NowSecure**, **Guardsquare**,
    **Snyk**, **Oversecured**, and **Mobile Security Framework** (**MobSF**). Ensure
    that the tools chosen support automation and can be easily integrated into your
    development and deployment processes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrate the mobile security testing process into your CI/CD pipeline. Typically,
    this involves adding security testing stages to your pipeline, such as pre-commit
    hooks, build stages, and post-deployment verification.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leverage mobile emulators and simulators that replicate various device configurations
    and environments. This allows you to perform automated testing on various devices
    without requiring physical devices for every test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Utilize static code analysis tools to scan your mobile app’s source code for
    security vulnerabilities. These tools can identify common coding flaws, insecure
    coding practices, and potential security weaknesses. Integrating code analysis
    tools into your CI/CD pipeline helps catch security issues early in development.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure your CI/CD pipeline to execute automated security tests during the
    build and deployment stages. These tests should be triggered whenever new code
    is committed, during the build process, and after deployment to ensure continuous
    security validation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure your automation framework to generate security reports after each
    testing cycle. These reports should provide details on the identified vulnerabilities,
    their severity, and recommendations for remediation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s examine some tools you can use to automate security testing.
  prefs: []
  type: TYPE_NORMAL
- en: Tools to automate security testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several tools available to automate security testing, making the process
    more efficient and thorough. Keep in mind that the landscape of security tools
    is constantly evolving, so newer tools might have emerged since then.
  prefs: []
  type: TYPE_NORMAL
- en: Here are some popular security testing tools.
  prefs: []
  type: TYPE_NORMAL
- en: NowSecure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**NowSecure** ([https://www.nowsecure.com/](https://www.nowsecure.com/)) offers
    a robust and accessible platform for mobile app security testing. With its user-friendly
    interface, comprehensive testing capabilities, and extensive platform support,
    it is an excellent choice for organizations seeking to bolster the security of
    their mobile applications as shown in the following screenshot.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – NowSecure dashboard](img/Figure_08.04_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – NowSecure dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'NowSecure offers the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: It provides a clean and intuitive user interface, making it accessible even
    to those with limited technical expertise. The tool offers step-by-step guidance,
    allowing users to quickly navigate through the testing process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It covers a wide range of security testing aspects, including vulnerability
    scanning, behavioral analysis, and penetration testing. Its robust feature set
    ensures that various security loopholes can be identified and patched effectively.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports testing on multiple platforms, including iOS and Android, allowing
    developers and security professionals to evaluate the security posture of their
    apps across different operating systems as shown in the following screenshot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.5 – NowSecure – Package or App Details](img/Figure_08.05_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – NowSecure – Package or App Details
  prefs: []
  type: TYPE_NORMAL
- en: It offers automated scanning and testing capabilities, which significantly reduces
    the time and effort required to identify potential security risks. This feature
    is particularly beneficial for organizations with large app portfolios.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: f
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6 – App Analysis](img/Figure_08.06_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – App Analysis
  prefs: []
  type: TYPE_NORMAL
- en: It generates comprehensive reports that highlight vulnerabilities, along with
    detailed explanations and recommendations for remediation. These reports make
    it easier for developers to prioritize and address security issues efficiently.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.7 – NowSecure MASVS Report](img/Figure_08.07_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 – NowSecure MASVS Report
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, Nowsecure gives you security scanning results based on MASVS categories
    as shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8 – The security scanning results based on the MASVS category](img/Figure_08.08_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.8 – The security scanning results based on the MASVS category
  prefs: []
  type: TYPE_NORMAL
- en: 'It can be integrated into CI/CD pipelines such as Bitrise. Typically, this
    involves adding security testing stages to your pipeline, such as pre-commit hooks,
    build stages, and post-deployment verification. You just need to have a NowSecure
    account, an access token, and a group ID:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.9 – Secret management on Bitrise](img/Figure_08.09_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.9 – Secret management on Bitrise
  prefs: []
  type: TYPE_NORMAL
- en: Then, you can add the NowSecure integration step into the CI/CD workflow or
    pipeline to execute the security testing, as shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.10 – Android workflow with NowSecure](img/Figure_08.10_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.10 – Android workflow with NowSecure
  prefs: []
  type: TYPE_NORMAL
- en: The NowSecure integration step is required to add the NowSecure API token and
    the group ID as shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.11 – Configuration of NowSecure](img/Figure_08.11_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 – Configuration of NowSecure
  prefs: []
  type: TYPE_NORMAL
- en: NowSecure also can be run with GitHub Actions ([https://github.com/nowsecure/nowsecure-action](https://github.com/nowsecure/nowsecure-action))
    with the following YAML file ([https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-8/android.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-8/android.yml)).
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, NowSecure supports GitLab, Azure DevOps, and CircleCI ([https://www.nowsecure.com/solutions/by-need/mobile-devsecops/](https://www.nowsecure.com/solutions/by-need/mobile-devsecops/)).
  prefs: []
  type: TYPE_NORMAL
- en: Guardsquare
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Guardsquare** ([https://www.guardsquare.com/](https://www.guardsquare.com/))
    is a powerful mobile app protection suite that offers advanced code obfuscation
    and anti-tampering measures to secure mobile applications against reverse engineering
    and tampering. With its robust feature set, multi-platform support, and optimized
    performance, Guardsquare is a good choice for developers and organizations seeking
    to protect their app’s code and intellectual property.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Guardsquare offers the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: It offers powerful code obfuscation techniques that transform the structure
    and logic of the application’s code, making it significantly more challenging
    for attackers to reverse-engineer or understand the inner workings of the app.
    This helps protect intellectual property, prevent unauthorized access, and deter
    malicious activities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It incorporates anti-tampering mechanisms to detect and prevent runtime modification
    of the app, safeguarding against attacks aimed at altering or bypassing security
    measures. These measures ensure the integrity of the app’s code and protect against
    unauthorized modifications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guardsquare’s code obfuscation techniques are designed to have minimal impact
    on the app’s performance. The optimization process helps maintain the app’s functionality
    and responsiveness, ensuring a seamless user experience.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports a wide range of platforms, including Android, iOS, and Xamarin,
    making it a versatile solution for securing mobile apps across different operating
    systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following different products are available from Guardsquare:'
  prefs: []
  type: TYPE_NORMAL
- en: '**DexGuard** ([https://www.guardsquare.com/dexguard](https://www.guardsquare.com/dexguard)):
    This provides comprehensive mobile app protection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iXGuard** ([https://www.guardsquare.com/ixguard](https://www.guardsquare.com/ixguard)):
    It ensures the highest level of protection for your mobile apps. The solution
    offers comprehensive security measures for your iOS apps and SDKs, including multiple
    layers of code hardening and **runtime application** **self-protection** (**RASP**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AppSweep** ([https://www.guardsquare.com/appsweep-mobile-application-security-testing](https://www.guardsquare.com/appsweep-mobile-application-security-testing)):
    This lets you find and fix security issues in your Android app’s code and dependencies
    in accordance with security standards such as OWASP as shown in the following
    screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.12 – AppSweep projects dashboard](img/Figure_08.12_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.12 – AppSweep projects dashboard
  prefs: []
  type: TYPE_NORMAL
- en: It also gives you release analysis details for the app as shown in the following
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Release analytics](img/Figure_08.13_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.13 – Release analytics
  prefs: []
  type: TYPE_NORMAL
- en: You can also find the recent build details with the scanning and analysis results
    and you can also compare between two builds as shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Recent builds](img/Figure_08.14_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.14 – Recent builds
  prefs: []
  type: TYPE_NORMAL
- en: The scanning results on AppSweep are mapped to the OWASP MASVS as shown in the
    following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.15 – The scanning results mapped to the OWASP MASVS](img/Figure_08.15_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.15 – The scanning results mapped to the OWASP MASVS
  prefs: []
  type: TYPE_NORMAL
- en: And it can give you a detailed view of the security issues that are found in
    the app and group them into different categories, such as Application Security,
    Insecure communication and more as shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 8.16 \uFEFF– The issues view](img/Figure_08.16_B18113.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 8.16 – The issues view
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in the issue details section, you can find recommendations on what
    to change in the code based on the OWASP guide.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.17 – The issue details with a recommendation](img/Figure_08.17_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.17 – The issue details with a recommendation
  prefs: []
  type: TYPE_NORMAL
- en: '**ThreatCast** ([https://www.guardsquare.com/threatcast-mobile-threat-defense](https://www.guardsquare.com/threatcast-mobile-threat-defense)):
    This monitors mobile apps in real time and continuously improves your security
    implementation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Snyk
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Snyk** ([https://snyk.io/learn/application-security/mobile-application-security/](https://snyk.io/learn/application-security/mobile-application-security/))
    is a valuable platform for mobile app security, particularly in the area of vulnerability
    management and code remediation. With its comprehensive vulnerability detection,
    easy integration, continuous monitoring, recommendations, and language/platform
    support, Snyk.io simplifies the process of identifying and addressing security
    weaknesses in mobile app code.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.18 – Synk dashboard](img/Figure_08.18_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.18 – Synk dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some of the features of Snyk:'
  prefs: []
  type: TYPE_NORMAL
- en: It offers an extensive vulnerability database and scanning capabilities that
    help identify security weaknesses within mobile app code. It detects common vulnerabilities
    and provides detailed insights into the specific lines of code where issues are
    making it easier for developers to import and scan their projects easily to understand
    and address the problems as shown in the following screenshot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.19 – Import projects from GitHub](img/Figure_08.19_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.19 – Import projects from GitHub
  prefs: []
  type: TYPE_NORMAL
- en: 'It integrates seamlessly with popular development tools and workflows, including
    CI/CD pipelines and source code repositories using the Snyk CLI ([https://github.com/snyk/cli](https://github.com/snyk/cli)).
    This allows developers to incorporate security checks into their existing development
    processes, ensuring that vulnerabilities are identified early in the development
    life cycle as shown in the following figure:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.20 – Snyk CLI](img/Figure_08.20_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.20 – Snyk CLI
  prefs: []
  type: TYPE_NORMAL
- en: It offers detailed fix recommendations and remediation guidance to assist developers
    in addressing identified vulnerabilities. It provides actionable steps and code
    snippets to simplify the process of fixing security issues, empowering developers
    to remediate vulnerabilities effectively.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports a wide range of programming languages and platforms, including popular
    mobile app development frameworks such as iOS and Android. This versatility ensures
    developers can leverage the platform regardless of their preferred language or
    platform choice, as shown in the following screenshot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.21 – Snyk integrations](img/Figure_08.21_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.21 – Snyk integrations
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to seamlessly integrate Snyk with your current tools and workflows.
    This integration will allow you to efficiently secure your projects during all
    stages of development.
  prefs: []
  type: TYPE_NORMAL
- en: '**Snyk** **Code** ([https://snyk.io/product/snyk-code/](https://snyk.io/product/snyk-code/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.22 – App details with different scan options](img/Figure_08.22_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.22 – App details with different scan options
  prefs: []
  type: TYPE_NORMAL
- en: 'To use Snyk with an Android app, follow these general steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by installing the Snyk **Command-Line Interface** (**CLI**) on your development
    machine. You can find instructions for installation in the Snyk documentation
    specific to your operating system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a terminal or command prompt and navigate to the root directory of your
    Android app project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the `snyk auth` Snyk login command in the terminal and follow the prompts
    to authenticate with your Snyk account. This step is necessary to associate your
    app with your Snyk account, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.23 - Run the Synk command](img/Figure_08.23_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.23 - Run the Synk command
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the Snyk `test` command to analyze your Android app’s dependencies for
    known vulnerabilities as shown in the following screenshot. Run the following
    command in your project’s directory: `snyk test`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 8.24 – \uFEFFsnyk test and monitor commands](img/Figure_08.24_B18113.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 8.24 – snyk test and monitor commands
  prefs: []
  type: TYPE_NORMAL
- en: 'Snyk will scan your app’s dependencies and provide a report on any vulnerabilities
    it finds. It will also suggest the following steps to remediate the issues:'
  prefs: []
  type: TYPE_NORMAL
- en: If Snyk identifies any vulnerabilities, recommendations will be provided in
    the scan report for how to fix them. This typically involves updating the affected
    dependencies to newer versions that include security patches.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can configure Snyk to run as part of your CI pipeline ([https://docs.snyk.io/integrations/ci-cd-integrations](https://docs.snyk.io/integrations/ci-cd-integrations))
    or set up scheduled scans.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oversecured
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Oversecured** ([https://oversecured.com/](https://oversecured.com/)) is a
    robust platform for mobile app security testing and vulnerability remediation.
    With its advanced security testing capabilities, real-time feedback, integrated
    remediation, and support for multiple platforms, it offers a comprehensive solution
    to enhance the security posture of mobile applications, as shown in the following
    screenshot.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.25 – Oversecured dashboard](img/Figure_08.25_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.25 – Oversecured dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a brief overview of Oversecured’s features:'
  prefs: []
  type: TYPE_NORMAL
- en: It offers a wide range of advanced security testing techniques, including SAST,
    DAST, and IAST.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides real-time feedback and actionable guidance to developers during
    the testing process. It highlights vulnerabilities, explains the potential risks,
    and suggests specific remediation steps, empowering developers to fix security
    issues efficiently.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It offers integrated remediation capabilities, enabling developers to address
    identified vulnerabilities directly within the platform. This streamlined workflow
    helps accelerate the vulnerability fixing process and ensures that security issues
    are remediated promptly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It supports mobile platforms such as Android and iOS. This flexibility makes
    it suitable for developers working with diverse technology stacks as shown in
    the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.26 – App view](img/Figure_08.26_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.26 – App view
  prefs: []
  type: TYPE_NORMAL
- en: It provides collaboration features that allow developers, security teams, and
    other stakeholders to work together seamlessly. It also generates reports with
    detailed vulnerability information, supporting documentation, and progress tracking,
    facilitating communication and accountability as shown in the following screenshot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.27 – Vulnerabilities in the code view](img/Figure_08.27_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.27 – Vulnerabilities in the code view
  prefs: []
  type: TYPE_NORMAL
- en: 'Oversecured supported different CI/CD tools ([https://oversecured.com/docs/ci-cd/](https://oversecured.com/docs/ci-cd/))
    with the public API. Regardless of which CI/CD tool you use, you will need to
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Get an Integration ID in the list of active Integrations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate an API token
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following tools are currently supported:'
  prefs: []
  type: TYPE_NORMAL
- en: Bitrise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CircleCI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Travis CI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MobSF
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**MobSF** ([https://github.com/MobSF/Mobile-Security-Framework-MobSF](https://github.com/MobSF/Mobile-Security-Framework-MobSF))
    is an open source automated framework for pen testing, malware analysis, and security
    assessment of mobile applications (Android/iOS). All you need to do is to upload
    your iOS or Android app as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.28 – MobSF landing page](img/Figure_08.28_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.28 – MobSF landing page
  prefs: []
  type: TYPE_NORMAL
- en: After that, MobSF will start the analysis process by scanning the `.apk` or
    `.ipa` file, as shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.29 – Analyzing the app](img/Figure_08.29_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.29 – Analyzing the app
  prefs: []
  type: TYPE_NORMAL
- en: Then, the scan results and report will be displayed, displaying details including
    the security score and analysis results as shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.30 – The scan results](img/Figure_08.30_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.30 – The scan results
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows an example of the certificate analysis inside
    the app.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.31 – The certificate analysis view in the app](img/Figure_08.31_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.31 – The certificate analysis view in the app
  prefs: []
  type: TYPE_NORMAL
- en: You can also run your Android or iOS static analysis tests on the cloud using
    MobSF and Amazon Web Services with Docker.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install the prebuilt Docker image by running the following command
    (consult the MobSF documentation at [https://mobsf.github.io/docs/#/docker](https://mobsf.github.io/docs/#/docker)
    for more info):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Docker will start to pull the image and build the container and it will run
    on port `8000`.
  prefs: []
  type: TYPE_NORMAL
- en: MobSF is an open-source project, but some companies may choose to use a licensed
    automated security tool instead. This is because licensed tools typically include
    training, support, and access to security experts.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Advanced Security
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**GitHub Advanced Security** ([https://docs.github.com/en/get-started/learning-about-github/about-github-advanced-security](https://docs.github.com/en/get-started/learning-about-github/about-github-advanced-security))
    can help address different security issues and vulnerabilities including:'
  prefs: []
  type: TYPE_NORMAL
- en: Dependency scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing your code in real time by enabling developers to fix vulnerabilities
    as they code in their native workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling crowd-sourced intelligence from millions of developers and researchers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Facilitating easy collaboration among team members no matter where they are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shipping secure software in an automated way that speeds you up instead of slowing
    you down
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is crucial to recognize the potential security issues that can arise from
    exploiting weaknesses in mobile apps, which emphasizes the importance of responsible
    and ethical conduct within the security team.
  prefs: []
  type: TYPE_NORMAL
- en: The objective of ethical hacking is to enhance security and prevent potential
    attacks, not to cause harm. It is essential to always behave responsibly, within
    the limits of the law, and with a firm commitment to ethical conduct.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s consider a hypothetical example of a mobile app that stores user login
    credentials (username and password) in a plain text file on the device’s internal
    storage. An attacker with physical access to the device could potentially retrieve
    these credentials. The following steps are how we investigate and fix this vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate the part of the code where sensitive data, such as user login credentials,
    is being stored on the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the data is indeed being stored in an insecure manner, such as plain
    text files or unencrypted databases.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To fix this vulnerability, sensitive data should be stored in an encrypted format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrating security scanning tools such as SAST and DAST into your security
    process can greatly enhance your ability to identify and mitigate vulnerabilities.
    Integrate these automated tests into your CI pipeline. Run the tests whenever
    new code is pushed to the repository to ensure that security remains intact as
    the app evolves.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Regularly run your automated security tests as part of your app’s testing regimen.
    Keep the test regimen up to date with any changes to the app’s security mechanisms
    or code base.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Consider periodic manual penetration testing by security professionals. They
    can provide insights into potential vulnerabilities that automated tests might
    miss.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tips for security automation for mobile DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are some tips to avoid slowing down the build and affecting developer
    productivity after implementing DevSecOps by injecting security checks and scanning:'
  prefs: []
  type: TYPE_NORMAL
- en: It is important that the CI build is not slowed down. However, certain security
    tools may take time to scan the mobile app, which can impact the CI build time
    and cause developers to be idle for a period.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If necessary, split the tests up to reduce the scanning execution time if the
    tests take a long time. Running automated security tests on different mobile devices
    in parallel can reduce the overall execution time, without affecting the running
    time of the CI build. This process avoids running the tests sequentially on a
    single device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a critical vulnerability or security issue could potentially harm end users
    or the system, block the build or release it with security testing (I suggest
    prioritizing and focusing on the critical cases that have high priority and severity).
    Development and security teams should collaborate to determine whether to block
    a build or release, taking into account the potential impacts and risks to the
    system and the timeframe for fixing it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, our focus was on safeguarding your mobile applications and
    DevOps processes. We explored the fundamentals of mobile app security, automating
    security testing, and the basics of DevSecOps.
  prefs: []
  type: TYPE_NORMAL
- en: After reading this chapter, you will have gained valuable insights and essential
    skills that will greatly benefit your mobile app development journey and you understand
    the importance of security in the realm of mobile app development and Mobile DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: You learned about the introduction of mobile DevSecOps and how it can significantly
    enhance the security of your mobile apps. Understanding the various mobile app
    security threats and architectural considerations empowers you to build secure
    mobile applications from the ground up.
  prefs: []
  type: TYPE_NORMAL
- en: A crucial aspect of ensuring mobile app security is employing comprehensive
    testing methods and tools. You are now familiar with techniques such as static
    and dynamic analysis, penetration testing, and API security testing. By incorporating
    these security measures into your development pipeline, you can efficiently detect
    and mitigate vulnerabilities early in the process.
  prefs: []
  type: TYPE_NORMAL
- en: Your skill set now extends to automating security within the Mobile DevOps process.
    Practical tips on CI/CD, containerization, and automated code analysis have equipped
    you to streamline security practices throughout your app development life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: By understanding and implementing the concepts discussed in this chapter, organizations
    can ensure that their mobile apps are secure and resilient in the face of evolving
    threats.
  prefs: []
  type: TYPE_NORMAL
- en: Moving on to the next chapter, we will discuss the mobile DevOps best practices
    for accelerating the whole process and increasing developer productivity.
  prefs: []
  type: TYPE_NORMAL
