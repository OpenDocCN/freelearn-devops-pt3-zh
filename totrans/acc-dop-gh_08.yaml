- en: '*Chapter 6*: Automation with GitHub Actions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第六章*：使用 GitHub Actions 实现自动化'
- en: Many agile adoptions treat engineering practices as less important than management
    and team practices. But engineering capabilities such as **continuous integration**
    (**CI**), **continuous delivery** (**CD**), and **Infrastructure as Code** (**IaC**)
    are enablers for more frequent, more stable, and lower-risk releases (*Humble,
    J., & Farley, D. 2010*). These practices lead to less deployment pain and therefore
    less overtime and burnout.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 许多敏捷实践将工程实践视为不如管理和团队实践重要。然而，工程能力如**持续集成**（**CI**）、**持续交付**（**CD**）和**基础设施即代码**（**IaC**）是更频繁、更稳定且更低风险发布的推动力（*Humble,
    J., & Farley, D. 2010*）。这些实践可以减少部署痛苦，从而减少加班和职业倦怠。
- en: 'Essentially, all these practices are about automation: computers performing
    repetitive tasks so that people can focus on important problems and creative work.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，所有这些实践都涉及自动化：计算机执行重复性任务，以便人们可以专注于重要问题和创造性工作。
- en: '"*Computers perform repetitive tasks, people solve problems.*"'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '"*计算机执行重复性任务，人类解决问题。*"'
- en: '*Forsgren, N., Humble, J., & Kim, G. 2018*'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*Forsgren, N., Humble, J., & Kim, G. 2018*'
- en: Automation has a big influence on corporate culture and the way people work
    because many habits are created to avoid manual, repetitive tasks – especially
    if they are error-prone. In this chapter, I will introduce you to GitHub Actions
    – the automation engine from GitHub that you can use for so much more than just
    CI/CD.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化对企业文化和工作方式有着巨大的影响，因为许多习惯都是为了避免手动的、重复的任务——特别是当这些任务容易出错时。在本章中，我将向你介绍 GitHub
    Actions——GitHub 提供的自动化引擎，你可以用它做的不仅仅是 CI/CD。
- en: 'This chapter will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Overview of GitHub Actions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub Actions 概览
- en: Workflows, pipelines, and actions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作流、管道和动作
- en: YAML basics
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YAML 基础
- en: The workflow syntax
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作流语法
- en: Working with secrets
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用机密
- en: Hands-on – your first workflow
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实践操作 – 你的第一个工作流
- en: Hands-on – your first action
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实践操作 – 你的第一个动作
- en: The GitHub marketplace
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 市场
- en: Overview of GitHub Actions
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub Actions 概览
- en: '**GitHub Actions** is the native automation engine on GitHub. It allows you
    to run workflows on any event in GitHub – not only commits to source control!
    GitHub can trigger your workflows when an issue changes its state or is added
    to a milestone, when a card is moved in GitHub Projects, when someone clicks *Star*
    on your repository, or when a comment is added to a discussion. There are triggers
    for nearly everything. The workflows themselves are built for reuse. You can build
    reusable actions by just putting code in a repository. Alternatively, you can
    share actions through the **GitHub Marketplace** ([https://github.com/marketplace](https://github.com/marketplace)),
    which currently contains about 10,000 actions.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**GitHub Actions** 是 GitHub 的本地自动化引擎。它允许你在 GitHub 上的任何事件触发工作流——不仅仅是提交到版本控制！GitHub
    可以在问题状态改变或被添加到里程碑时触发工作流，在 GitHub 项目中移动卡片时触发，或者当有人点击你的仓库的*Star*时，或者当评论被添加到讨论时触发。几乎所有的操作都有触发器。这些工作流本身是为重用而构建的。你可以通过将代码放入一个仓库来构建可重用的动作。或者，你也可以通过**GitHub
    Marketplace**（[https://github.com/marketplace](https://github.com/marketplace)）分享动作，当前该市场上大约有
    10,000 个动作。'
- en: 'These workflows can be executed in the cloud on every major platform: Linux,
    macOS, Windows, ARM, and containers. You can even configure and host runners –
    in the cloud or your data center – without the need to open incoming ports.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工作流可以在每个主要平台的云端执行：Linux、macOS、Windows、ARM 和容器。你甚至可以配置和托管运行器——无论是在云端还是你的数据中心——而无需打开入站端口。
- en: GitHub Learning Lab
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 学习实验室
- en: 'A good place to learn about GitHub is **GitHub Learning Lab** ([https://lab.github.com](https://lab.github.com)).
    It''s completely hands-on and is automated with issues and pull requests. There
    is a complete learning path for **DevOps with GitHub Actions** ([https://lab.github.com/githubtraining/devops-with-github-actions](https://lab.github.com/githubtraining/devops-with-github-actions)).
    Alternatively, you can take individual courses such as **GitHub Actions: Hello
    World** ([https://lab.github.com/githubtraining/github-actions:-hello-world](https://lab.github.com/githubtraining/github-actions:-hello-world)).
    All the courses are free. Give it a try – especially if you are a hands-on learner
    and you don''t have experience with GitHub.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '学习 GitHub 的好地方是 **GitHub Learning Lab** ([https://lab.github.com](https://lab.github.com))。它是完全实操的，并通过问题和拉取请求进行自动化。有一个完整的学习路径是
    **DevOps with GitHub Actions** ([https://lab.github.com/githubtraining/devops-with-github-actions](https://lab.github.com/githubtraining/devops-with-github-actions))。另外，你也可以参加单独的课程，如
    **GitHub Actions: Hello World** ([https://lab.github.com/githubtraining/github-actions:-hello-world](https://lab.github.com/githubtraining/github-actions:-hello-world))。所有课程都是免费的。试试看——特别是如果你是实操型学习者，并且没有
    GitHub 经验。'
- en: Workflows, pipelines, and actions
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作流、管道和 actions
- en: A `.github/workflows` directory of a repository. A workflow can be used to build
    and deploy software to different environments or stages and is often called a
    **pipeline** in other CI/CD systems.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 存放在仓库中的 `.github/workflows` 目录。工作流可以用来构建和部署软件到不同的环境或阶段，并且在其他 CI/CD 系统中通常被称为**管道**。
- en: A `runs-on` attribute. Jobs run in parallel by default. They can be executed
    sequentially by chaining them together using dependencies (using the `needs` keyword).
    A job can run in a specific environment. An **environment** is a logical grouping
    of resources. Environments can be shared in multiple workflows and can be protected
    using **protection rules**.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`runs-on` 属性。作业默认并行运行。可以通过使用依赖关系（使用 `needs` 关键字）将它们串联在一起，按顺序执行。作业可以在特定环境中运行。**环境**是资源的逻辑分组。环境可以在多个工作流中共享，并且可以通过
    **保护规则** 进行保护。'
- en: A job consists of a sequence of tasks called **steps**. A **step** can run a
    command, script, or **GitHub Action**. An **action** is a reusable part of the
    workflow. Not all steps are actions – but all actions are executed as steps inside
    a job.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一个作业由一系列任务组成，这些任务被称为**步骤**。**步骤**可以运行命令、脚本或**GitHub Action**。**Action**是工作流中可重用的部分。并不是所有的步骤都是
    actions——但所有的 actions 都作为步骤在作业中执行。
- en: 'The following table shows the most important terms for understanding workflows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了理解工作流时最重要的术语：
- en: '![Table 6.1 – Important terms for GitHub Actions'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![表格 6.1 —— GitHub Actions 的重要术语'
- en: '](img/Table_6.1.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Table_6.1.jpg)'
- en: Table 6.1 – Important terms for GitHub Actions
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 6.1 —— GitHub Actions 的重要术语
- en: YAML basics
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: YAML 基础
- en: Workflows are written in YAML files that have either a `.yml` or `.yaml` extension.
    **YAML** (which stands for *YAML Ain't Markup Language*) is a data serialization
    language that's optimized to be directly writable and readable by humans. It is
    a strict superset of **JSON** but contains syntactically relevant newlines and
    indentation instead of braces. Like markdown, it also works very well with pull
    requests as changes are always per line. Let's look at some YAML basics that should
    help you get started.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流是编写在 `.yml` 或 `.yaml` 扩展名的 YAML 文件中的。**YAML**（即 *YAML Ain't Markup Language*）是一种数据序列化语言，优化为可以直接被人类编写和读取。它是
    **JSON** 的严格超集，但使用语法相关的换行符和缩进来代替大括号。像 Markdown 一样，它也与拉取请求非常兼容，因为变更始终是按行进行的。让我们看一些
    YAML 基础知识，帮助你入门。
- en: Comments
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注释
- en: 'A comment in YAML starts with a hash, `#`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: YAML 中的注释以井号 `#` 开始：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Scalar types
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标量类型
- en: 'Single values can be defined using the following syntax:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下语法定义单个值：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Many data types are supported:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 支持多种数据类型：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Note that keys and values can contain spaces and do not need quotation. But
    you can quote both keys and values with single or double quotes:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，键和值可以包含空格，并且不需要引号。但是你可以使用单引号或双引号引用键和值：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Strings that span multiple lines – such as script blocks – use the pipe symbol,
    `|`, and indentation:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 跨越多行的字符串——例如脚本块——使用管道符号 `|` 和缩进：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Collection types
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合类型
- en: 'Nested array types – also known as **maps** – are often used in workflows.
    They use two spaces of indentation:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套数组类型——也称为**映射**——通常用于工作流中。它们使用两个空格进行缩进：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'A sequence uses a dash, `–`, before each item:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 序列在每个项目前使用破折号 `–`：
- en: '[PRE20]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Since YAML is a superset of JSON, you can also use the JSON syntax to put sequences
    and maps in one line:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 YAML 是 JSON 的超集，因此你也可以使用 JSON 语法将序列和映射放在一行中：
- en: '[PRE23]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This should be enough to get you started with workflow editing on GitHub. If
    you want to learn more about YAML, you can have a look at the specification at
    [https://yaml.org/](https://yaml.org/). Now, let's have a look at the workflow
    syntax.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该足以帮助你开始在 GitHub 上编辑工作流。如果你想了解更多关于 YAML 的内容，可以查看 [https://yaml.org/](https://yaml.org/)
    上的规范。现在，让我们来看看工作流语法。
- en: The workflow syntax
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作流语法
- en: 'The first thing you will see in your workflow file is its name, which is displayed
    under **Actions** in your repository:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你在工作流文件中看到的第一件事就是它的名称，该名称会在你的仓库的 **Actions** 下显示：
- en: '[PRE25]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This name is followed by triggers.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个名称后面跟着触发器。
- en: Workflow triggers
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作流触发器
- en: 'Triggers are the values for the `on` key:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 触发器是`on`键的值：
- en: '[PRE26]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Triggers can contain multiple values:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 触发器可以包含多个值：
- en: '[PRE27]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Many triggers contain other values that can be configured:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 许多触发器包含其他可以配置的值：
- en: '[PRE28]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'There are three types of triggers:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种类型的触发器：
- en: Webhook events
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Webhook 事件
- en: Scheduled events
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定时事件
- en: Manual events
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动事件
- en: '`push`), if you create or update a pull request (`pull_request`), or if you
    create or modify an issue (`issues`). For a complete list, go to [https://docs.github.com/en/actions/reference/events-that-trigger-workflows](https://docs.github.com/en/actions/reference/events-that-trigger-workflows).'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`push`），如果你创建或更新一个拉取请求（`pull_request`），或者创建或修改一个问题（`issues`）。完整列表请访问 [https://docs.github.com/en/actions/reference/events-that-trigger-workflows](https://docs.github.com/en/actions/reference/events-that-trigger-workflows)。'
- en: '**Scheduled events** use the same syntax as cron jobs. The syntax consists
    of five fields that represent the minute (0 – 59), the hour (0 – 23), the day
    of the month (1 – 31), month (1 – 12 or JAN – DEC), and the day of the week (0
    – 6 or SUN-SAT). You can use the operators shown in the following table:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**定时事件**使用与 cron 作业相同的语法。语法由五个字段组成，分别表示分钟（0 – 59）、小时（0 – 23）、日期（1 – 31）、月份（1
    – 12 或 JAN – DEC）和星期几（0 – 6 或 SUN-SAT）。你可以使用下表中所示的操作符：'
- en: '![Table 6.2 – Operators for scheduled events'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![表 6.2 – 定时事件的操作符]'
- en: '](img/B17827_Ch_6_Table_02.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_Ch_6_Table_02.jpg)'
- en: Table 6.2 – Operators for scheduled events
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6.2 – 定时事件的操作符
- en: 'Here are some examples:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些示例：
- en: '[PRE35]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '**Manual events** allow you to trigger the workflow manually:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**手动事件**允许你手动触发工作流：'
- en: '[PRE45]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'You can configure `homedrive` that you can use in the workflow using the `${{
    github.event.inputs.homedrive }}` expression:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以配置 `homedrive`，并在工作流中使用 `${{ github.event.inputs.homedrive }}` 表达式：
- en: '[PRE46]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'You can also trigger the workflow using the GitHub API. For this, you must
    define a `repository_dispatch` trigger and specify one or more names for the events
    you want to use:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 GitHub API 触发工作流。为此，你必须定义一个 `repository_dispatch` 触发器，并为你想要使用的事件指定一个或多个名称：
- en: '[PRE53]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The workflow then gets triggered when an *HTTP POST* request is sent. Here
    is an example using `curl` to send the HTTP POST:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当发送*HTTP POST*请求时，工作流会被触发。以下是使用 `curl` 发送 HTTP POST 的示例：
- en: '[PRE56]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Here is an example using JavaScript (see [https://github.com/octokit/octokit.js](https://github.com/octokit/octokit.js)
    for more details about **Octokit** API clients for JavaScript):'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用 JavaScript 的示例（有关**Octokit** API 客户端的更多详细信息，请参阅 [https://github.com/octokit/octokit.js](https://github.com/octokit/octokit.js)）：
- en: '[PRE61]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Using the `repository_dispatch` trigger, you can use any webhook in any system
    to trigger your workflows. This helps you automate workflows and integrate other
    systems.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `repository_dispatch` 触发器，你可以在任何系统中使用任何 Webhook 来触发你的工作流。这有助于你自动化工作流并集成其他系统。
- en: Workflow jobs
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作流作业
- en: 'The workflow itself is configured in the `jobs` section. Jobs are maps, not
    a list, and they run in parallel by default. If you want to chain them in a sequence,
    you can have a job depend on other jobs with the `needs` keyword:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流本身在 `jobs` 部分进行配置。作业是映射而非列表，默认情况下并行运行。如果你希望它们按顺序执行，可以使用 `needs` 关键字让一个作业依赖于其他作业：
- en: '[PRE66]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Every job is executed on a runner. The runner can be self-hosted, or you can
    pick one from the cloud. There are different versions available in the cloud for
    all platforms. If you always want to use the latest version, you can use `ubuntu-latest`,
    `windows-latest`, or `macos-latest`. You''ll learn more about runners in [*Chapter
    7*](B17827_07_Epub.xhtml#_idTextAnchor175), *Running Your Workflows*:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 每个作业都会在运行器上执行。运行器可以是自托管的，或者你可以从云端选择一个。云端为所有平台提供了不同版本。如果你希望始终使用最新版本，可以选择 `ubuntu-latest`、`windows-latest`
    或 `macos-latest`。你将会在 [*第七章*](B17827_07_Epub.xhtml#_idTextAnchor175) *运行你的工作流*
    中了解更多关于运行器的内容：
- en: '[PRE75]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'If you want to run a workflow with different configurations, you can use a
    `${{ matrix.key }}` expression:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想以不同的配置运行工作流，可以使用 `${{ matrix.key }}` 表达式：
- en: '[PRE79]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Workflow steps
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作流步骤
- en: 'A job contains a sequence of steps, and each step can run a command:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一个作业包含一系列步骤，每个步骤可以运行一个命令：
- en: '[PRE91]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Literal blocks allow you to run multi-line scripts. If you want the workflow
    to run in a different shell than the default shell, you can configure it together
    with other values, such as `working-directory`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 字面块允许你运行多行脚本。如果你希望工作流在不同于默认 shell 的 shell 中运行，你可以与其他值一起配置，例如`working-directory`：
- en: '[PRE94]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'The following shells are available:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可用的 shells：
- en: '![Table 6.3 – Available shells in workflows'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '![表 6.3 – 工作流中可用的 shells'
- en: '](img/Table_6.3.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Table_6.3.jpg)'
- en: Table 6.3 – Available shells in workflows
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6.3 – 工作流中可用的 shells
- en: 'The default shell on non-Windows systems is `bash` with a fallback to `sh`.
    The default on Windows is `cmd`. You can also configure a custom shell with the
    `command [options] {0}` syntax:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 非 Windows 系统的默认 shell 是`bash`，并回退到`sh`。Windows 上的默认 shell 是`cmd`。你也可以使用`command
    [options] {0}`语法配置自定义 shell：
- en: '[PRE100]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Most of the time, you will reuse steps. A reusable step is called a `uses`
    keyword and the following syntax:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，你会重用步骤。可重用的步骤称为`uses`关键字，语法如下：
- en: '[PRE102]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '`{owner}/{repo}` is the path to the action on GitHub. The `{ref}` reference
    is the version: it can be a `label`, a `branch`, or an individual `commit` referenced
    by its **Hash** value. The most common application is using labels for explicit
    versioning with major and minor versions:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`{owner}/{repo}`是 GitHub 上操作的路径。`{ref}`引用的是版本：它可以是一个`label`、一个`branch`，或是通过其**哈希**值引用的单个`commit`。最常见的应用是使用标签进行显式版本控制，带有主版本和次版本：'
- en: '[PRE103]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'If your action is in the same repository as the workflow, you can use a relative
    path to the action:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的操作与工作流位于同一存储库中，你可以使用相对路径引用该操作：
- en: '[PRE110]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'You can use actions that are stored in a container registry – for example,
    Docker Hub or GitHub Packages – using the `docker//{image}:{tag}` syntax:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用存储在容器注册表中的操作——例如 Docker Hub 或 GitHub Packages——使用`docker//{image}:{tag}`语法：
- en: '[PRE111]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Context and expression syntax
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上下文和表达式语法
- en: 'You saw some expressions when we looked at the matrix strategy. An **expression**
    has the following syntax:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看矩阵策略时，你看到了一些表达式。**表达式**具有以下语法：
- en: '[PRE112]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: An expression can access context information and combine it with operators.
    There are different objects available that provide context, such as `matrix`,
    `github`, `env`, and `runner`. With `github.sha`, for example, you can access
    the commit SHA that triggered the workflow. With `runner.os`, you can get the
    operating system of the runner, while with `env`, you can access environment variables.
    For a complete list, go to [https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts](https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式可以访问上下文信息，并将其与运算符结合使用。提供上下文的不同对象包括`matrix`、`github`、`env`和`runner`。例如，使用`github.sha`，你可以访问触发工作流的
    commit SHA；使用`runner.os`，你可以获取 runner 的操作系统，而使用`env`，你可以访问环境变量。完整列表，请访问[https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts](https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts)。
- en: 'There are two possible syntaxes you can use to access context properties –
    the letter, or the property syntax, is the more common:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种语法可以用来访问上下文属性——字母语法或属性语法，后者更常用：
- en: '[PRE113]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Depending on the format of the key, you might have to use the first option.
    This might be the case if the key starts with a number or contains special characters.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 根据键的格式，你可能需要使用第一个选项。如果键以数字开头或包含特殊字符，可能就是这种情况。
- en: 'Expressions are often used in the `if` object to run jobs on different conditions:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式通常用于`if`对象中，以在不同条件下运行作业：
- en: '[PRE115]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'There are many predefined functions you can use, such as `contains(search,
    item)`:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用许多预定义的函数，例如`contains(search, item)`：
- en: '[PRE121]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'Other examples of functions are `startsWith()` or `endsWith()`. There are also
    some special functions that you can use to check the status of the current job:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 其他函数示例包括`startsWith()`或`endsWith()`。还有一些特殊函数可以用来检查当前作业的状态：
- en: '[PRE123]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'This step will only be executed if all other steps have been successful. The
    following table shows all the functions that can be used to respond to the current
    job status:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在所有其他步骤都成功的情况下，这个步骤才会被执行。下表显示了所有可以用来响应当前作业状态的函数：
- en: '![Table 6.4 – Special functions to check the status of the job'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '![表 6.4 – 检查作业状态的特殊功能'
- en: '](img/B17827_Ch_6_Table_04.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_Ch_6_Table_04.jpg)'
- en: Table 6.4 – Special functions to check the status of the job
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6.4 – 检查作业状态的特殊功能
- en: 'Besides functions, you can use operators with context and functions. The following
    table shows a list of the most important operators:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 除了函数，你还可以结合上下文和函数使用运算符。下表显示了最重要的一些运算符：
- en: '![Table 6.5 – Operators for expressions'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '![表 6.5 – 表达式的运算符'
- en: '](img/B17827_Ch_6_Table_05.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_Ch_6_Table_05.jpg)'
- en: Table 6.5 – Operators for expressions
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6.5 – 表达式的运算符
- en: To learn more about context objects and the expression syntax, go to [https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions](https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于上下文对象和表达式语法的信息，请访问[https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions](https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions)。
- en: Workflow commands
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作流命令
- en: 'To interact with the workflow from within your steps, you can use `echo` command
    and by sending a string such as `::set-output name={name}::{value}` to the process.
    The following example sets the output of one step and accesses it in another step.
    Note how the ID of the step is used to access the output variable:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 要从步骤内部与工作流交互，你可以使用`echo`命令，并通过发送字符串如`::set-output name={name}::{value}`到进程中。以下示例设置一个步骤的输出，并在另一个步骤中访问它。请注意如何使用步骤的
    ID 来访问输出变量：
- en: '[PRE127]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'Another example is the`::error` command. It allows you to write an error message
    to the log. Optionally, you can set a filename, line number, and column number:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个示例是`::error`命令。它允许你将错误消息写入日志中。你可以选择设置文件名、行号和列号：
- en: '[PRE134]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: You can also write warning and debug messages, group log lines, or set environment
    variables. For more details on workflow commands, go to [https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions](https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以写入警告和调试消息，分组日志行，或设置环境变量。有关工作流命令的更多详细信息，请访问[https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions](https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions)。
- en: Working with secrets
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理机密
- en: A very important part of all automation workflows is handling secrets. It doesn't
    matter if you deploy an application or access an API – you always need credentials
    or keys that you have to handle carefully.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 所有自动化工作流中一个非常重要的部分是处理机密。无论你是部署应用程序还是访问 API——你总是需要凭据或密钥，而你必须小心处理它们。
- en: In GitHub, you can store secrets securely at the repository level, organization
    level, or for an environment. Secrets are stored and transported encrypted, and
    they do not show up in logs.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 中，你可以在仓库级别、组织级别或环境级别安全存储机密。机密会被加密存储和传输，并且不会出现在日志中。
- en: 'For secrets at the organization level, you can define which repositories have
    access to the secret. For secrets at an environment level, you can define required
    reviewers: only if they approve the workflow can they access the secrets.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 对于组织级别的机密，你可以定义哪些仓库可以访问该机密。对于环境级别的机密，你可以定义必需的审核者：只有在审核者批准工作流后，他们才能访问机密。
- en: Tip
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Secret names are not case-sensitive, and they can only contain normal characters
    (`[a-z]` and `[A-Z]`), numbers (`[0-9]`), and the underscore character (`_`).
    They must not start with `GITHUB_` or a number.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 秘密名称不区分大小写，只能包含普通字符（`[a-z]` 和 `[A-Z]`）、数字（`[0-9]`）和下划线字符（`_`）。它们不能以 `GITHUB_`
    或数字开头。
- en: A best practice is to name the secrets with uppercase words that are separated
    by the underscore (`_`) character.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践是使用大写字母并通过下划线（`_`）分隔来命名机密。
- en: Storing your secrets
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储你的机密
- en: To store encrypted secrets, you must be part of the repository's Admin role.
    Secrets can be created through the web or via the GitHub CLI.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 要存储加密的机密，你必须是仓库管理员角色的一部分。可以通过网页或 GitHub CLI 创建机密。
- en: 'To create a new secret, navigate to **Settings** | **Secrets**. Secrets are
    separated into the **Actions** (default), **Codespaces**, and **Dependabot** categories.
    To create a new secret, press **New repository secret** and enter the name and
    the secret (see *Figure 6.1*):'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新机密，请导航到**设置** | **机密**。机密被分为**Actions**（默认）、**Codespaces** 和 **Dependabot**
    类别。要创建新机密，点击**新建仓库机密**，然后输入机密的名称和内容（参见*图 6.1*）：
- en: '![Figure 6.1 – Managing repository secrets'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.1 – 管理仓库机密'
- en: '](img/B17827_01.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_01.jpg)'
- en: Figure 6.1 – Managing repository secrets
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 管理仓库机密
- en: 'Secrets for organizations work more or less the same. Create the secret under
    **Settings** | **Secrets** | **New organization secret** and set the access policy
    to either of the following:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 组织的机密大致相同。你可以在**Settings** | **Secrets** | **New organization secret**下创建机密，并将访问策略设置为以下任意一种：
- en: '**All repositories**'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所有仓库**'
- en: '**Private repositories**'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**私有仓库**'
- en: '**Selected repositories**'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择的仓库**'
- en: When you choose **Selected repositories**, you can grant access to individual
    repositories.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 当你选择**选择的仓库**时，你可以为单个仓库授予访问权限。
- en: 'If you prefer the GitHub CLI, you can use `gh secret set` to create a new secret:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢使用GitHub CLI，可以使用`gh secret set`创建新的机密：
- en: '[PRE135]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'You will be prompted for the secret. You can also read the secret from a file,
    pipe it to the command, or specify it as the body (`-b` or `--body`):'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 系统将提示你输入机密。你还可以从文件中读取机密，将其通过管道传递给命令，或将其指定为正文（`-b`或`--body`）：
- en: '[PRE136]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'If the secret is for an environment, you can specify it using the `--env` (`-e`)
    argument. For organization secrets, you can set their visibility (`--visibility`
    or `-v`) to `all`, `private`, or `selected`. For `selected`, you must specify
    one or more repositories using `--repos` (`-r`):'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 如果机密是为某个环境设置的，你可以使用`--env`（`-e`）参数来指定它。对于组织机密，你可以将其可见性（`--visibility`或`-v`）设置为`all`、`private`或`selected`。对于`selected`，你必须使用`--repos`（`-r`）指定一个或多个仓库：
- en: '[PRE137]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: Accessing your secrets
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问你的机密
- en: You can access the secrets in your workflows through the `secrets` context.
    Add it to the steps either as an `with:`) or `env:`) variable in the workflow
    file. Organization and repository secrets are read when the workflow run is queued,
    while environment secrets are read when a job referencing the environment starts.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过`secrets`上下文在工作流中访问机密。将其作为`with:`或`env:`变量添加到工作流文件中的步骤。组织和仓库的机密在工作流运行排队时读取，而环境机密在引用该环境的作业开始时读取。
- en: Note
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: GitHub automatically removes secrets from the log. But be careful what you do
    with the secrets inside your steps!
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub会自动从日志中移除机密。但请小心你在步骤中对机密的处理方式！
- en: Depending on your shell and environment, the syntax for accessing environment
    variables is different. In Bash, it is `$SECRET-NAME`, in PowerShell, it is `$env:SECRET-NAME`,
    and in `cmd.exe`, it is `%SECRET-NAME%`.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的Shell和环境，访问环境变量的语法有所不同。在Bash中，它是`$SECRET-NAME`，在PowerShell中，它是`$env:SECRET-NAME`，在`cmd.exe`中，它是`%SECRET-NAME%`。
- en: 'The following is an example of how to access secrets as an input or an environment
    in different shells:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何在不同的Shell中将机密作为输入或环境变量进行访问的示例：
- en: '[PRE138]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: Note
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: These are just examples to show you how to pass secrets to actions. If your
    workflow step is a `run:` step, you can also access the secret context, `${{secrets.secret-name}}`,
    directly. This is not recommended if you wish to avoid script injection. But since
    only administrators can add secrets, this is something you might consider for
    the readability of the workflow.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是示例，向你展示如何将机密传递给操作。如果你的工作流步骤是`run:`步骤，你也可以直接访问机密上下文，`${{secrets.secret-name}}`。如果你想避免脚本注入，这种做法不推荐。但是，由于只有管理员才能添加机密，你可以考虑出于工作流可读性的考虑使用这种方式。
- en: The GITHUB_TOKEN secret
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`GITHUB_TOKEN`机密'
- en: 'A special secret is the `GITHUB_TOKEN` secret. The `GITHUB_TOKEN` secret is
    automatically created and can be accessed through the `github.token` or `secrets.GITHUB_TOKEN`
    context. The token can be accessed by a GitHub action, even if the workflow does
    not provide it as an input or environment variable. The token can be used to authenticate
    when accessing GitHub resources. The default permissions can be set to `permissive`
    or `restricted`, though these permissions can be adjusted in the workflow:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 一个特殊的机密是`GITHUB_TOKEN`机密。`GITHUB_TOKEN`机密是自动创建的，可以通过`github.token`或`secrets.GITHUB_TOKEN`上下文进行访问。即使工作流没有将其作为输入或环境变量提供，GitHub操作仍然可以访问该令牌。该令牌可以用于身份验证，以便访问GitHub资源。默认权限可以设置为`permissive`或`restricted`，不过这些权限可以在工作流中调整：
- en: '[PRE151]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'You can find more information on the `GITHUB_TOKEN` secret here: [https://docs.github.com/en/actions/reference/authentication-in-a-workflow](https://docs.github.com/en/actions/reference/authentication-in-a-workflow).'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在此链接中找到更多关于`GITHUB_TOKEN`机密的信息：[https://docs.github.com/en/actions/reference/authentication-in-a-workflow](https://docs.github.com/en/actions/reference/authentication-in-a-workflow)。
- en: Hands-on – your first workflow
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实操——你的第一个工作流
- en: That should have been enough theory to get started. We'll dig deeper into runners,
    environments, and security in the following chapters. If you are new to GitHub
    Actions, now is the time to create your first workflow and your first action.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 这些理论应该足以让你入门。接下来的章节我们将深入探讨运行器、环境和安全性。如果你是 GitHub Actions 新手，现在正是时候创建你的第一个工作流和第一个
    Action。
- en: Tip
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can find existing GitHub Actions Workflows as templates by using GitHub''s
    code search and filtering by the programming language''s YAML (`language:yml`)
    and the workflow path (`path:.github/workflows`). The following search will return
    all the workflows for the German Corona-Warn-App:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用 GitHub 的代码搜索，并通过编程语言的 YAML (`language:yml`) 和工作流路径 (`path:.github/workflows`)
    进行筛选，找到现有的 GitHub Actions 工作流模板。以下搜索将返回所有关于德国 Corona-Warn-App 的工作流：
- en: '`language:yml path:.github/workflows @corona-warn-app`'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`language:yml path:.github/workflows @corona-warn-app`'
- en: 'The steps are as follows:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤如下：
- en: Navigate to the repository by going to [https://github.com/wulfland/getting-started](https://github.com/wulfland/getting-started)
    and fork it by using the **Fork** button in the top-right corner.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问 [https://github.com/wulfland/getting-started](https://github.com/wulfland/getting-started)
    并点击右上角的 **Fork** 按钮来 fork 仓库。
- en: 'In the fork, click on **Actions**. You should see templates for workflows that
    you can use. These templates are optimized for the code in the repository – in
    this case, .NET. Select **Set up this workflow**:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 fork 的项目中，点击 **Actions**。你应该能看到你可以使用的工作流模板。这些模板已针对仓库中的代码进行优化——在这个案例中是 .NET。选择
    **设置此工作流**：
- en: '![Figure 6.2 – Setting up a GitHub action for .NET'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.2 – 为 .NET 设置 GitHub Action'
- en: '](img/B17827_02.jpg)'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_02.jpg)'
- en: Figure 6.2 – Setting up a GitHub action for .NET
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 为 .NET 设置 GitHub Action
- en: 'GitHub creates a workflow file and opens the editor. The editor supports syntax-highlighting
    and auto-complete (press *Ctrl* + *Space*). You can search the marketplace for
    actions. Set `dotnet-version` to 3.1.x and commit the workflow file:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitHub 创建一个工作流文件并打开编辑器。编辑器支持语法高亮和自动补全（按 *Ctrl* + *Space*）。你可以在市场中搜索 Actions。将
    `dotnet-version` 设置为 3.1.x 并提交工作流文件：
- en: '![Figure 6.3 – Setting the version and committing the workflow file'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.3 – 设置版本并提交工作流文件'
- en: '](img/B17827_03.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03.jpg)'
- en: Figure 6.3 – Setting the version and committing the workflow file
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 设置版本并提交工作流文件
- en: 'The workflow will be automatically triggered and you can find the workflow
    run under **Actions**. If you open it, you can find the jobs in the workflow,
    as well as additional header information:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作流将自动触发，你可以在 **Actions** 下找到该工作流的运行情况。如果你打开它，你可以找到工作流中的作业以及其他头部信息：
- en: '![Figure 6.4 – The workflow summary page'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.4 – 工作流摘要页面'
- en: '](img/B17827_04.jpg)'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_04.jpg)'
- en: Figure 6.4 – The workflow summary page
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – 工作流摘要页面
- en: 'Click on the job to see details of all the steps:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击作业以查看所有步骤的详情：
- en: '![Figure 6.5 – Job and step details'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.5 – 作业和步骤详情'
- en: '](img/B17827_05.jpg)'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_05.jpg)'
- en: Figure 6.5 – Job and step details
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – 作业和步骤详情
- en: 'If you prefer other languages, you can use, for example, the following repository,
    which uses **Java with Maven**: [https://github.com/MicrosoftDocs/pipelines-java](https://github.com/MicrosoftDocs/pipelines-java).'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢其他语言，你可以使用以下仓库，它使用 **Java with Maven**：[https://github.com/MicrosoftDocs/pipelines-java](https://github.com/MicrosoftDocs/pipelines-java)。
- en: When selecting the workflow template, scroll down to **Continuous integration
    workflows** and click **More continuous integration workflows…**.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 选择工作流模板时，向下滚动至 **持续集成工作流**，然后点击 **更多持续集成工作流…**。
- en: 'Select **Java with Maven** and the workflow should work:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 **Java with Maven**，工作流应该就能正常工作：
- en: '![Figure 6.6 – Other CI templates, such as "Java with Maven"'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.6 – 其他 CI 模板，例如 "Java with Maven"'
- en: '](img/B17827_06.jpg)'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_06.jpg)'
- en: Figure 6.6 – Other CI templates, such as "Java with Maven"
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – 其他 CI 模板，例如 "Java with Maven"
- en: There are templates for everything. It should be easy to set up a basic workflow
    to build your code.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的内容都有模板。设置一个基本的工作流来构建你的代码应该是很简单的。
- en: Hands-on – your first action
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践操作 – 你的第一个 Action
- en: The power of GitHub Actions lies in its reusability, so understanding how to
    create and use Actions is important. In this hands-on exercise, you will create
    a container action that runs inside a Docker container.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 的强大之处在于其可重用性，因此理解如何创建和使用 Actions 至关重要。在这个实践练习中，你将创建一个在 Docker
    容器内运行的容器 Action。
- en: Tip
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: You can find this example at [https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action](https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action)
    and you can copy and paste the content of the text files from there. If you want,
    you can also use the template repository at [https://github.com/actions/container-action](https://github.com/actions/container-action)
    and click **Use this template**. It will create a repository with all files in
    it for you.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action](https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action)找到这个示例，并可以从那里复制并粘贴文本文件的内容。如果你愿意，也可以使用[https://github.com/actions/container-action](https://github.com/actions/container-action)上的模板仓库并点击**使用此模板**。它会为你创建一个包含所有文件的仓库。
- en: 'The steps are as follows:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤如下：
- en: Create a new repository called `hello-world-docker-action` and clone it to your
    workstation.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`hello-world-docker-action`的新仓库并将其克隆到你的工作站。
- en: 'Open a Terminal and navigate to the repository:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并导航到仓库：
- en: '[PRE162]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'Create a file called `Dockerfile` without an extension. Add the following content
    to it:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Dockerfile`的文件（没有扩展名）。将以下内容添加到该文件中：
- en: '[PRE163]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: This `entrypoint.sh` file into your container. If the container gets executed,
    it will run `entrypoint.sh`.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 将此`entrypoint.sh`文件放入容器中。如果容器被执行，它将运行`entrypoint.sh`。
- en: 'Create a new file called `action.yml` that contains the following content:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`action.yml`的新文件，内容如下：
- en: '[PRE164]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: The `action.yml` file defines the action, along with its input and output parameters.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`action.yml`文件定义了操作，以及其输入和输出参数。'
- en: 'Now, create the `entrypoint.sh` script. This script will run in your container
    and call other binaries. Add the following content to it:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建`entrypoint.sh`脚本。该脚本将在容器中运行并调用其他二进制文件。将以下内容添加到该脚本中：
- en: '[PRE165]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: The input parameter is passed to the script as an argument and is accessed via
    `$1`. The script uses the `set-output` workflow command to set the `time` parameter
    to the current time.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 输入参数作为参数传递给脚本，并通过`$1`访问。脚本使用`set-output`工作流命令将`time`参数设置为当前时间。
- en: 'You must make `entrypoint.sh` executable. On non-Windows systems, you can just
    run the following command in your terminal and then add and commit your changes:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你必须使`entrypoint.sh`可执行。在非 Windows 系统上，你只需在终端运行以下命令，然后添加并提交更改：
- en: '[PRE166]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: 'On Windows, this will not work. But you can mark the file as executable when
    it is added to the index:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，这将不起作用。但你可以在将文件添加到索引时将其标记为可执行：
- en: '[PRE167]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'The versioning for Actions is done using Git tags. Add a `v1` tag and push
    all your changes to the remote repository:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Action 的版本管理是通过 Git 标签完成的。添加一个`v1`标签并推送所有更改到远程仓库：
- en: '[PRE168]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'Your action is now ready to be used. Go back to your workflow in the `getting-started`
    repository (`.github/workflows/dotnet.yaml`) and edit the file. Delete everything
    under `jobs` (line 9) and replace it with the following code:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的操作现在已经准备好使用。返回到`getting-started`仓库中的工作流（`.github/workflows/dotnet.yaml`）并编辑文件。删除`jobs`下的所有内容（第
    9 行），并用以下代码替换：
- en: '[PRE169]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: The workflow now calls your action (`uses`) and points to the repository you
    created (`your-username/hello-world-action`), followed by the tag `(@v1`). It
    passes your name as an input parameter to the action and receives the current
    time as output, which is then written to the console.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，工作流调用你的操作（`uses`），并指向你创建的仓库（`your-username/hello-world-action`），后面跟着标签`(@v1)`。它将你的名字作为输入参数传递给操作，并接收当前时间作为输出，然后将其写入控制台。
- en: Save the file and the workflow will run automatically. Check the details to
    see the greeting and the time in the log.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件后，工作流将自动运行。查看详细信息，检查日志中的问候语和时间。
- en: Tip
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示
- en: If you want to try other types of actions, you can use existing templates. If
    you want to try a `action.yml` file (see [https://docs.github.com/en/actions/creating-actions/creating-a-composite-action](https://docs.github.com/en/actions/creating-actions/creating-a-composite-action)).
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你想尝试其他类型的操作，可以使用现有模板。如果你想尝试`action.yml`文件（请参见[https://docs.github.com/en/actions/creating-actions/creating-a-composite-action](https://docs.github.com/en/actions/creating-actions/creating-a-composite-action)）。
- en: Handling the actions is the same – only the way they are created is different.
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 处理这些操作的方法是相同的——只是创建方式不同。
- en: The GitHub marketplace
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub 市场
- en: 'You can use the GitHub marketplace ([https://github.com/marketplace](https://github.com/marketplace))
    to search for **Actions** to use in your workflows. It''s easy to publish an action
    to the marketplace, which is why there are already nearly 10,000 actions available.
    You can filter the actions by categories or use the search bar to limit the number
    of actions you see (see *Figure 6.7*):'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 GitHub 市场（[https://github.com/marketplace](https://github.com/marketplace)）来搜索可以在工作流中使用的**动作**。发布一个动作到市场非常容易，这也是为什么已经有近
    10,000 个动作可用的原因。你可以按类别筛选动作，或者使用搜索栏限制显示的动作数量（见*图 6.7*）：
- en: '![Figure 6.7 – The marketplace contains nearly 10,000 actions'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.7 – 市场中包含了近 10,000 个动作'
- en: '](img/B17827_07.jpg)'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_07.jpg)'
- en: Figure 6.7 – The marketplace contains nearly 10,000 actions
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – 市场中包含了近 10,000 个动作
- en: 'The action shows the readme from the repository and additional information.
    You can see the full list of versions and get information on how to use the current
    version:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 该动作显示来自仓库的 README 和其他信息。你可以查看所有版本的完整列表，并获取有关如何使用当前版本的信息：
- en: '![Figure 6.8 – An action in the marketplace'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.8 – 市场中的一个动作'
- en: '](img/B17827_08.jpg)'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_08.jpg)'
- en: Figure 6.8 – An action in the marketplace
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – 市场中的一个动作
- en: 'It''s easy to publish an action to the marketplace. Make sure that the Action
    is in a public repository, that the name of the action is unique, and that the
    action contains a good readme. Pick an icon and color and add it to `action.yml`:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 发布动作到市场非常容易。确保该动作位于公共仓库中，动作名称唯一，并且动作包含良好的 README。选择一个图标和颜色并将其添加到 `action.yml`
    中：
- en: '[PRE170]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'GitHub automatically detects the `action.yml` file and provides a button called
    **Draft a release**. If you select **Publish this Action to the GitHub Marketplace**,
    you have to agree to the terms of service, and your action will be checked for
    all the required artifacts. Here, you can pick a tag or create a new one and add
    a title and description for the release:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 会自动检测到 `action.yml` 文件，并提供一个名为**草拟发布**的按钮。如果你选择**将此动作发布到 GitHub 市场**，你需要同意服务条款，并且你的动作将会检查是否包含所有必需的文件。此时，你可以选择一个标签或创建一个新的标签，并为发布添加标题和描述：
- en: '![Figure 6.9 – Publishing an action to the marketplace'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.9 – 将动作发布到市场'
- en: '](img/B17827_09.jpg)'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_09.jpg)'
- en: Figure 6.9 – Publishing an action to the marketplace
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – 将动作发布到市场
- en: Publish the release or save it as a draft.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 发布发布版本或将其保存为草稿。
- en: The marketplace is growing fast, and it makes automation simple as there is
    almost an action for everything.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 市场正在快速增长，它使自动化变得简单，因为几乎每个任务都有对应的动作。
- en: Summary
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, I explained the importance of automation and introduced you
    to GitHub Actions as a flexible and extendible engine for any kind of automation.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我解释了自动化的重要性，并向你介绍了 GitHub Actions，作为一个灵活且可扩展的自动化引擎。
- en: In the next chapter, you'll learn about the different hosting options and how
    you can host workflow runners.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将学习不同的托管选项以及如何托管工作流运行器。
- en: Further reading
  id: totrans-378
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information about the topics that were covered in this chapter, please
    take a look at the following references:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 如需了解本章涉及的更多内容，请查阅以下参考文献：
- en: 'Humble J., & Farley, D. (2010). *Continuous Delivery: Reliable Software Releases
    through Build, Test, and Deployment Automation*. Addison-Wesley Professional.'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Humble J., & Farley, D. (2010). *持续交付：通过构建、测试和部署自动化可靠的软件发布*。Addison-Wesley Professional。
- en: 'Forsgren, N., Humble, J., & Kim, G. (2018). *Accelerate: The Science of Lean
    Software and DevOps: Building and Scaling High Performing Technology Organizations*
    (1st ed.) [E-book]. IT Revolution Press.'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Forsgren, N., Humble, J., & Kim, G. (2018). *加速：精益软件与 DevOps 的科学：构建与扩展高效能技术组织*（第1版）[电子书]。IT
    Revolution Press。
- en: '*YAML*: [https://yaml.org/](https://yaml.org/)'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*YAML*: [https://yaml.org/](https://yaml.org/)'
- en: '*GitHub Actions*: [https://github.com/features/actions](https://github.com/features/actions)
    and [https://docs.github.com/en/actions](https://docs.github.com/en/actions)'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*GitHub Actions*: [https://github.com/features/actions](https://github.com/features/actions)
    和 [https://docs.github.com/en/actions](https://docs.github.com/en/actions)'
- en: '*GitHub Learning Lab*: [https://lab.github.com](https://lab.github.com)'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*GitHub 学习实验室*: [https://lab.github.com](https://lab.github.com)'
- en: '*Workflow Syntax*: [https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions)'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*工作流语法*: [https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions)'
- en: '*GitHub Marketplace*: [https://github.com/marketplace](https://github.com/marketplace)'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*GitHub 市场*: [https://github.com/marketplace](https://github.com/marketplace)'
