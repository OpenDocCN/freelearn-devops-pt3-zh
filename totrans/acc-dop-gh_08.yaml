- en: '*Chapter 6*: Automation with GitHub Actions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many agile adoptions treat engineering practices as less important than management
    and team practices. But engineering capabilities such as **continuous integration**
    (**CI**), **continuous delivery** (**CD**), and **Infrastructure as Code** (**IaC**)
    are enablers for more frequent, more stable, and lower-risk releases (*Humble,
    J., & Farley, D. 2010*). These practices lead to less deployment pain and therefore
    less overtime and burnout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Essentially, all these practices are about automation: computers performing
    repetitive tasks so that people can focus on important problems and creative work.'
  prefs: []
  type: TYPE_NORMAL
- en: '"*Computers perform repetitive tasks, people solve problems.*"'
  prefs: []
  type: TYPE_NORMAL
- en: '*Forsgren, N., Humble, J., & Kim, G. 2018*'
  prefs: []
  type: TYPE_NORMAL
- en: Automation has a big influence on corporate culture and the way people work
    because many habits are created to avoid manual, repetitive tasks – especially
    if they are error-prone. In this chapter, I will introduce you to GitHub Actions
    – the automation engine from GitHub that you can use for so much more than just
    CI/CD.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of GitHub Actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Workflows, pipelines, and actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: YAML basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The workflow syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with secrets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hands-on – your first workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hands-on – your first action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The GitHub marketplace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of GitHub Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**GitHub Actions** is the native automation engine on GitHub. It allows you
    to run workflows on any event in GitHub – not only commits to source control!
    GitHub can trigger your workflows when an issue changes its state or is added
    to a milestone, when a card is moved in GitHub Projects, when someone clicks *Star*
    on your repository, or when a comment is added to a discussion. There are triggers
    for nearly everything. The workflows themselves are built for reuse. You can build
    reusable actions by just putting code in a repository. Alternatively, you can
    share actions through the **GitHub Marketplace** ([https://github.com/marketplace](https://github.com/marketplace)),
    which currently contains about 10,000 actions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These workflows can be executed in the cloud on every major platform: Linux,
    macOS, Windows, ARM, and containers. You can even configure and host runners –
    in the cloud or your data center – without the need to open incoming ports.'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Learning Lab
  prefs: []
  type: TYPE_NORMAL
- en: 'A good place to learn about GitHub is **GitHub Learning Lab** ([https://lab.github.com](https://lab.github.com)).
    It''s completely hands-on and is automated with issues and pull requests. There
    is a complete learning path for **DevOps with GitHub Actions** ([https://lab.github.com/githubtraining/devops-with-github-actions](https://lab.github.com/githubtraining/devops-with-github-actions)).
    Alternatively, you can take individual courses such as **GitHub Actions: Hello
    World** ([https://lab.github.com/githubtraining/github-actions:-hello-world](https://lab.github.com/githubtraining/github-actions:-hello-world)).
    All the courses are free. Give it a try – especially if you are a hands-on learner
    and you don''t have experience with GitHub.'
  prefs: []
  type: TYPE_NORMAL
- en: Workflows, pipelines, and actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A `.github/workflows` directory of a repository. A workflow can be used to build
    and deploy software to different environments or stages and is often called a
    **pipeline** in other CI/CD systems.
  prefs: []
  type: TYPE_NORMAL
- en: A `runs-on` attribute. Jobs run in parallel by default. They can be executed
    sequentially by chaining them together using dependencies (using the `needs` keyword).
    A job can run in a specific environment. An **environment** is a logical grouping
    of resources. Environments can be shared in multiple workflows and can be protected
    using **protection rules**.
  prefs: []
  type: TYPE_NORMAL
- en: A job consists of a sequence of tasks called **steps**. A **step** can run a
    command, script, or **GitHub Action**. An **action** is a reusable part of the
    workflow. Not all steps are actions – but all actions are executed as steps inside
    a job.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows the most important terms for understanding workflows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 6.1 – Important terms for GitHub Actions'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Table_6.1.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 6.1 – Important terms for GitHub Actions
  prefs: []
  type: TYPE_NORMAL
- en: YAML basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Workflows are written in YAML files that have either a `.yml` or `.yaml` extension.
    **YAML** (which stands for *YAML Ain't Markup Language*) is a data serialization
    language that's optimized to be directly writable and readable by humans. It is
    a strict superset of **JSON** but contains syntactically relevant newlines and
    indentation instead of braces. Like markdown, it also works very well with pull
    requests as changes are always per line. Let's look at some YAML basics that should
    help you get started.
  prefs: []
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A comment in YAML starts with a hash, `#`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Scalar types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Single values can be defined using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Many data types are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that keys and values can contain spaces and do not need quotation. But
    you can quote both keys and values with single or double quotes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Strings that span multiple lines – such as script blocks – use the pipe symbol,
    `|`, and indentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Collection types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Nested array types – also known as **maps** – are often used in workflows.
    They use two spaces of indentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'A sequence uses a dash, `–`, before each item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Since YAML is a superset of JSON, you can also use the JSON syntax to put sequences
    and maps in one line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This should be enough to get you started with workflow editing on GitHub. If
    you want to learn more about YAML, you can have a look at the specification at
    [https://yaml.org/](https://yaml.org/). Now, let's have a look at the workflow
    syntax.
  prefs: []
  type: TYPE_NORMAL
- en: The workflow syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing you will see in your workflow file is its name, which is displayed
    under **Actions** in your repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This name is followed by triggers.
  prefs: []
  type: TYPE_NORMAL
- en: Workflow triggers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Triggers are the values for the `on` key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Triggers can contain multiple values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Many triggers contain other values that can be configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'There are three types of triggers:'
  prefs: []
  type: TYPE_NORMAL
- en: Webhook events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scheduled events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manual events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`push`), if you create or update a pull request (`pull_request`), or if you
    create or modify an issue (`issues`). For a complete list, go to [https://docs.github.com/en/actions/reference/events-that-trigger-workflows](https://docs.github.com/en/actions/reference/events-that-trigger-workflows).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scheduled events** use the same syntax as cron jobs. The syntax consists
    of five fields that represent the minute (0 – 59), the hour (0 – 23), the day
    of the month (1 – 31), month (1 – 12 or JAN – DEC), and the day of the week (0
    – 6 or SUN-SAT). You can use the operators shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 6.2 – Operators for scheduled events'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_Ch_6_Table_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 6.2 – Operators for scheduled events
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '**Manual events** allow you to trigger the workflow manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'You can configure `homedrive` that you can use in the workflow using the `${{
    github.event.inputs.homedrive }}` expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also trigger the workflow using the GitHub API. For this, you must
    define a `repository_dispatch` trigger and specify one or more names for the events
    you want to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The workflow then gets triggered when an *HTTP POST* request is sent. Here
    is an example using `curl` to send the HTTP POST:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example using JavaScript (see [https://github.com/octokit/octokit.js](https://github.com/octokit/octokit.js)
    for more details about **Octokit** API clients for JavaScript):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Using the `repository_dispatch` trigger, you can use any webhook in any system
    to trigger your workflows. This helps you automate workflows and integrate other
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: Workflow jobs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The workflow itself is configured in the `jobs` section. Jobs are maps, not
    a list, and they run in parallel by default. If you want to chain them in a sequence,
    you can have a job depend on other jobs with the `needs` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Every job is executed on a runner. The runner can be self-hosted, or you can
    pick one from the cloud. There are different versions available in the cloud for
    all platforms. If you always want to use the latest version, you can use `ubuntu-latest`,
    `windows-latest`, or `macos-latest`. You''ll learn more about runners in [*Chapter
    7*](B17827_07_Epub.xhtml#_idTextAnchor175), *Running Your Workflows*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to run a workflow with different configurations, you can use a
    `${{ matrix.key }}` expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Workflow steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A job contains a sequence of steps, and each step can run a command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Literal blocks allow you to run multi-line scripts. If you want the workflow
    to run in a different shell than the default shell, you can configure it together
    with other values, such as `working-directory`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'The following shells are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 6.3 – Available shells in workflows'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Table_6.3.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 6.3 – Available shells in workflows
  prefs: []
  type: TYPE_NORMAL
- en: 'The default shell on non-Windows systems is `bash` with a fallback to `sh`.
    The default on Windows is `cmd`. You can also configure a custom shell with the
    `command [options] {0}` syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Most of the time, you will reuse steps. A reusable step is called a `uses`
    keyword and the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '`{owner}/{repo}` is the path to the action on GitHub. The `{ref}` reference
    is the version: it can be a `label`, a `branch`, or an individual `commit` referenced
    by its **Hash** value. The most common application is using labels for explicit
    versioning with major and minor versions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'If your action is in the same repository as the workflow, you can use a relative
    path to the action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use actions that are stored in a container registry – for example,
    Docker Hub or GitHub Packages – using the `docker//{image}:{tag}` syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Context and expression syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You saw some expressions when we looked at the matrix strategy. An **expression**
    has the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: An expression can access context information and combine it with operators.
    There are different objects available that provide context, such as `matrix`,
    `github`, `env`, and `runner`. With `github.sha`, for example, you can access
    the commit SHA that triggered the workflow. With `runner.os`, you can get the
    operating system of the runner, while with `env`, you can access environment variables.
    For a complete list, go to [https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts](https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two possible syntaxes you can use to access context properties –
    the letter, or the property syntax, is the more common:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Depending on the format of the key, you might have to use the first option.
    This might be the case if the key starts with a number or contains special characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Expressions are often used in the `if` object to run jobs on different conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'There are many predefined functions you can use, such as `contains(search,
    item)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: 'Other examples of functions are `startsWith()` or `endsWith()`. There are also
    some special functions that you can use to check the status of the current job:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'This step will only be executed if all other steps have been successful. The
    following table shows all the functions that can be used to respond to the current
    job status:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 6.4 – Special functions to check the status of the job'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_Ch_6_Table_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 6.4 – Special functions to check the status of the job
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides functions, you can use operators with context and functions. The following
    table shows a list of the most important operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 6.5 – Operators for expressions'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_Ch_6_Table_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 6.5 – Operators for expressions
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about context objects and the expression syntax, go to [https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions](https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions).
  prefs: []
  type: TYPE_NORMAL
- en: Workflow commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To interact with the workflow from within your steps, you can use `echo` command
    and by sending a string such as `::set-output name={name}::{value}` to the process.
    The following example sets the output of one step and accesses it in another step.
    Note how the ID of the step is used to access the output variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'Another example is the`::error` command. It allows you to write an error message
    to the log. Optionally, you can set a filename, line number, and column number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: You can also write warning and debug messages, group log lines, or set environment
    variables. For more details on workflow commands, go to [https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions](https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions).
  prefs: []
  type: TYPE_NORMAL
- en: Working with secrets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A very important part of all automation workflows is handling secrets. It doesn't
    matter if you deploy an application or access an API – you always need credentials
    or keys that you have to handle carefully.
  prefs: []
  type: TYPE_NORMAL
- en: In GitHub, you can store secrets securely at the repository level, organization
    level, or for an environment. Secrets are stored and transported encrypted, and
    they do not show up in logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'For secrets at the organization level, you can define which repositories have
    access to the secret. For secrets at an environment level, you can define required
    reviewers: only if they approve the workflow can they access the secrets.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Secret names are not case-sensitive, and they can only contain normal characters
    (`[a-z]` and `[A-Z]`), numbers (`[0-9]`), and the underscore character (`_`).
    They must not start with `GITHUB_` or a number.
  prefs: []
  type: TYPE_NORMAL
- en: A best practice is to name the secrets with uppercase words that are separated
    by the underscore (`_`) character.
  prefs: []
  type: TYPE_NORMAL
- en: Storing your secrets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To store encrypted secrets, you must be part of the repository's Admin role.
    Secrets can be created through the web or via the GitHub CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new secret, navigate to **Settings** | **Secrets**. Secrets are
    separated into the **Actions** (default), **Codespaces**, and **Dependabot** categories.
    To create a new secret, press **New repository secret** and enter the name and
    the secret (see *Figure 6.1*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Managing repository secrets'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.1 – Managing repository secrets
  prefs: []
  type: TYPE_NORMAL
- en: 'Secrets for organizations work more or less the same. Create the secret under
    **Settings** | **Secrets** | **New organization secret** and set the access policy
    to either of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**All repositories**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Private repositories**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selected repositories**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you choose **Selected repositories**, you can grant access to individual
    repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer the GitHub CLI, you can use `gh secret set` to create a new secret:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: 'You will be prompted for the secret. You can also read the secret from a file,
    pipe it to the command, or specify it as the body (`-b` or `--body`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: 'If the secret is for an environment, you can specify it using the `--env` (`-e`)
    argument. For organization secrets, you can set their visibility (`--visibility`
    or `-v`) to `all`, `private`, or `selected`. For `selected`, you must specify
    one or more repositories using `--repos` (`-r`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: Accessing your secrets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can access the secrets in your workflows through the `secrets` context.
    Add it to the steps either as an `with:`) or `env:`) variable in the workflow
    file. Organization and repository secrets are read when the workflow run is queued,
    while environment secrets are read when a job referencing the environment starts.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: GitHub automatically removes secrets from the log. But be careful what you do
    with the secrets inside your steps!
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your shell and environment, the syntax for accessing environment
    variables is different. In Bash, it is `$SECRET-NAME`, in PowerShell, it is `$env:SECRET-NAME`,
    and in `cmd.exe`, it is `%SECRET-NAME%`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of how to access secrets as an input or an environment
    in different shells:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: These are just examples to show you how to pass secrets to actions. If your
    workflow step is a `run:` step, you can also access the secret context, `${{secrets.secret-name}}`,
    directly. This is not recommended if you wish to avoid script injection. But since
    only administrators can add secrets, this is something you might consider for
    the readability of the workflow.
  prefs: []
  type: TYPE_NORMAL
- en: The GITHUB_TOKEN secret
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A special secret is the `GITHUB_TOKEN` secret. The `GITHUB_TOKEN` secret is
    automatically created and can be accessed through the `github.token` or `secrets.GITHUB_TOKEN`
    context. The token can be accessed by a GitHub action, even if the workflow does
    not provide it as an input or environment variable. The token can be used to authenticate
    when accessing GitHub resources. The default permissions can be set to `permissive`
    or `restricted`, though these permissions can be adjusted in the workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: 'You can find more information on the `GITHUB_TOKEN` secret here: [https://docs.github.com/en/actions/reference/authentication-in-a-workflow](https://docs.github.com/en/actions/reference/authentication-in-a-workflow).'
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on – your first workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That should have been enough theory to get started. We'll dig deeper into runners,
    environments, and security in the following chapters. If you are new to GitHub
    Actions, now is the time to create your first workflow and your first action.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find existing GitHub Actions Workflows as templates by using GitHub''s
    code search and filtering by the programming language''s YAML (`language:yml`)
    and the workflow path (`path:.github/workflows`). The following search will return
    all the workflows for the German Corona-Warn-App:'
  prefs: []
  type: TYPE_NORMAL
- en: '`language:yml path:.github/workflows @corona-warn-app`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the repository by going to [https://github.com/wulfland/getting-started](https://github.com/wulfland/getting-started)
    and fork it by using the **Fork** button in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the fork, click on **Actions**. You should see templates for workflows that
    you can use. These templates are optimized for the code in the repository – in
    this case, .NET. Select **Set up this workflow**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Setting up a GitHub action for .NET'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.2 – Setting up a GitHub action for .NET
  prefs: []
  type: TYPE_NORMAL
- en: 'GitHub creates a workflow file and opens the editor. The editor supports syntax-highlighting
    and auto-complete (press *Ctrl* + *Space*). You can search the marketplace for
    actions. Set `dotnet-version` to 3.1.x and commit the workflow file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Setting the version and committing the workflow file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.3 – Setting the version and committing the workflow file
  prefs: []
  type: TYPE_NORMAL
- en: 'The workflow will be automatically triggered and you can find the workflow
    run under **Actions**. If you open it, you can find the jobs in the workflow,
    as well as additional header information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.4 – The workflow summary page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.4 – The workflow summary page
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the job to see details of all the steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Job and step details'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.5 – Job and step details
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer other languages, you can use, for example, the following repository,
    which uses **Java with Maven**: [https://github.com/MicrosoftDocs/pipelines-java](https://github.com/MicrosoftDocs/pipelines-java).'
  prefs: []
  type: TYPE_NORMAL
- en: When selecting the workflow template, scroll down to **Continuous integration
    workflows** and click **More continuous integration workflows…**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Java with Maven** and the workflow should work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Other CI templates, such as "Java with Maven"'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.6 – Other CI templates, such as "Java with Maven"
  prefs: []
  type: TYPE_NORMAL
- en: There are templates for everything. It should be easy to set up a basic workflow
    to build your code.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on – your first action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The power of GitHub Actions lies in its reusability, so understanding how to
    create and use Actions is important. In this hands-on exercise, you will create
    a container action that runs inside a Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You can find this example at [https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action](https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action)
    and you can copy and paste the content of the text files from there. If you want,
    you can also use the template repository at [https://github.com/actions/container-action](https://github.com/actions/container-action)
    and click **Use this template**. It will create a repository with all files in
    it for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new repository called `hello-world-docker-action` and clone it to your
    workstation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and navigate to the repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a file called `Dockerfile` without an extension. Add the following content
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This `entrypoint.sh` file into your container. If the container gets executed,
    it will run `entrypoint.sh`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `action.yml` that contains the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `action.yml` file defines the action, along with its input and output parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create the `entrypoint.sh` script. This script will run in your container
    and call other binaries. Add the following content to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The input parameter is passed to the script as an argument and is accessed via
    `$1`. The script uses the `set-output` workflow command to set the `time` parameter
    to the current time.
  prefs: []
  type: TYPE_NORMAL
- en: 'You must make `entrypoint.sh` executable. On non-Windows systems, you can just
    run the following command in your terminal and then add and commit your changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On Windows, this will not work. But you can mark the file as executable when
    it is added to the index:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: 'The versioning for Actions is done using Git tags. Add a `v1` tag and push
    all your changes to the remote repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your action is now ready to be used. Go back to your workflow in the `getting-started`
    repository (`.github/workflows/dotnet.yaml`) and edit the file. Delete everything
    under `jobs` (line 9) and replace it with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The workflow now calls your action (`uses`) and points to the repository you
    created (`your-username/hello-world-action`), followed by the tag `(@v1`). It
    passes your name as an input parameter to the action and receives the current
    time as output, which is then written to the console.
  prefs: []
  type: TYPE_NORMAL
- en: Save the file and the workflow will run automatically. Check the details to
    see the greeting and the time in the log.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you want to try other types of actions, you can use existing templates. If
    you want to try a `action.yml` file (see [https://docs.github.com/en/actions/creating-actions/creating-a-composite-action](https://docs.github.com/en/actions/creating-actions/creating-a-composite-action)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Handling the actions is the same – only the way they are created is different.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The GitHub marketplace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use the GitHub marketplace ([https://github.com/marketplace](https://github.com/marketplace))
    to search for **Actions** to use in your workflows. It''s easy to publish an action
    to the marketplace, which is why there are already nearly 10,000 actions available.
    You can filter the actions by categories or use the search bar to limit the number
    of actions you see (see *Figure 6.7*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – The marketplace contains nearly 10,000 actions'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.7 – The marketplace contains nearly 10,000 actions
  prefs: []
  type: TYPE_NORMAL
- en: 'The action shows the readme from the repository and additional information.
    You can see the full list of versions and get information on how to use the current
    version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – An action in the marketplace'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.8 – An action in the marketplace
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s easy to publish an action to the marketplace. Make sure that the Action
    is in a public repository, that the name of the action is unique, and that the
    action contains a good readme. Pick an icon and color and add it to `action.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: 'GitHub automatically detects the `action.yml` file and provides a button called
    **Draft a release**. If you select **Publish this Action to the GitHub Marketplace**,
    you have to agree to the terms of service, and your action will be checked for
    all the required artifacts. Here, you can pick a tag or create a new one and add
    a title and description for the release:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Publishing an action to the marketplace'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.9 – Publishing an action to the marketplace
  prefs: []
  type: TYPE_NORMAL
- en: Publish the release or save it as a draft.
  prefs: []
  type: TYPE_NORMAL
- en: The marketplace is growing fast, and it makes automation simple as there is
    almost an action for everything.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, I explained the importance of automation and introduced you
    to GitHub Actions as a flexible and extendible engine for any kind of automation.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll learn about the different hosting options and how
    you can host workflow runners.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information about the topics that were covered in this chapter, please
    take a look at the following references:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Humble J., & Farley, D. (2010). *Continuous Delivery: Reliable Software Releases
    through Build, Test, and Deployment Automation*. Addison-Wesley Professional.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Forsgren, N., Humble, J., & Kim, G. (2018). *Accelerate: The Science of Lean
    Software and DevOps: Building and Scaling High Performing Technology Organizations*
    (1st ed.) [E-book]. IT Revolution Press.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*YAML*: [https://yaml.org/](https://yaml.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*GitHub Actions*: [https://github.com/features/actions](https://github.com/features/actions)
    and [https://docs.github.com/en/actions](https://docs.github.com/en/actions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*GitHub Learning Lab*: [https://lab.github.com](https://lab.github.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Workflow Syntax*: [https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*GitHub Marketplace*: [https://github.com/marketplace](https://github.com/marketplace)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
