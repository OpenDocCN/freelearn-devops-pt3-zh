- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: CI/CD Automation
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI/CD 自动化
- en: In this chapter, we’ll learn how to automate our DevOps processes with **Continuous
    Integration and Continuous Delivery** (**CI/CD**). We’ll also look at some popular
    tools for achieving this.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何利用 **持续集成和持续交付** (**CI/CD**) 自动化我们的 DevOps 流程。我们还将介绍一些流行的工具来实现这一目标。
- en: By leveraging the power of CI/CD, we can create a more efficient, reliable,
    and streamlined workflow for our Salesforce development and operations. This approach
    allows us to quickly react to changes, reduces the risk of deployment failures,
    and ultimately, helps us deliver better-quality software.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 利用 CI/CD 的力量，我们可以为 Salesforce 的开发和运维创建更高效、可靠和流畅的工作流。这种方法使我们能够快速响应变更，降低部署失败的风险，最终帮助我们交付更高质量的软件。
- en: We will cover the following main topics.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主要主题。
- en: '**Introduction to CI/CD**: Firstly, we will define CI/CD, explain its benefits,
    and discuss how it fits into a DevOps strategy. We’ll also highlight the key principles
    and best practices to follow when implementing CI/CD.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CI/CD 管道简介**：首先，我们将定义 CI/CD，解释其优点，并讨论它如何适用于 DevOps 策略。我们还将强调在实施 CI/CD 时应遵循的关键原则和最佳实践。'
- en: '**GitHub Actions**: This section will focus on GitHub Actions, a flexible and
    powerful CI/CD tool that integrates directly with your GitHub repositories. We’ll
    explore how to set up workflows, automate tests, and handle deployments, all within
    the GitHub platform.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub Actions**：本节将重点介绍 GitHub Actions，这是一个灵活且强大的 CI/CD 工具，可以直接与您的 GitHub
    仓库集成。我们将探讨如何设置工作流程，自动化测试以及处理部署，所有这些都在 GitHub 平台内完成。'
- en: '**Jenkins**: A longstanding favorite in the CI/CD community, Jenkins is another
    tool we’ll dive into. We’ll show you how to configure Jenkins for Salesforce projects,
    create pipelines, and leverage its extensive plugin ecosystem.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jenkins**：Jenkins 是 CI/CD 社区中广受欢迎的工具，我们将深入探讨它。我们将展示如何为 Salesforce 项目配置 Jenkins，创建流水线，并利用其广泛的插件生态系统。'
- en: '**Salesforce-specific tools**: Salesforce offers several tools that can aid
    in CI/CD, such as **Salesforce DX** (**SFDX**) and the Salesforce CLI. We’ll discuss
    how to leverage these tools to streamline your CI/CD process and tackle Salesforce-specific
    challenges.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Salesforce 特定工具**：Salesforce 提供了几个工具，可以帮助 CI/CD，例如 **Salesforce DX** (**SFDX**)
    和 Salesforce CLI。我们将讨论如何利用这些工具来简化您的 CI/CD 流程并解决 Salesforce 特定的挑战。'
- en: '**Practical use of the CI/CD pipeline**: We’ll finish by looking at the advantages
    that our newly-built CI/CD pipeline affords us as part of a robust DevOps implementation.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CI/CD 管道的实际应用**：最后，我们将查看新建的 CI/CD 管道作为强大 DevOps 实施的优势。'
- en: By the end of this chapter, you should have a robust understanding of the role
    of CI/CD in Salesforce DevOps, the tools available for implementing it, and the
    steps you can take to begin automating your own processes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章末尾，您应该对 CI/CD 在 Salesforce DevOps 中的角色有了扎实的理解，了解了实施它的可用工具以及开始自动化您自己流程的步骤。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For Jenkins, you’ll need a server that can host the Jenkins software. This could
    be a physical server, a virtual machine, or a cloud-based server. The specific
    requirements will depend on the scale of your projects, but as a minimum, you
    should plan for at least 1 GB of memory, 50 GB of disk space, and a modern CPU.
    It’s worth noting that, for learning purposes, it is possible to run Jenkins on
    your local development machine if you want to follow the processes and steps in
    this book, but for real-world use, as part of your DevOps toolchain, a dedicated
    hosting solution is recommended.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Jenkins，您需要一个能够托管 Jenkins 软件的服务器。这可以是物理服务器、虚拟机或基于云的服务器。具体的要求将取决于项目的规模，但至少应规划至少
    1 GB 内存、50 GB 硬盘空间和一台现代 CPU。值得注意的是，出于学习目的，您可以在本地开发机上运行 Jenkins，如果您想跟随本书中的过程和步骤进行，但是对于实际的
    DevOps 工具链使用，建议使用专用的托管解决方案。
- en: SFDX and the Salesforce CLI are crucial tools for Salesforce DevOps. To use
    them, you’ll need to install the Salesforce CLI on your system. If you’ve not
    already got them in place, you can revisit [*Chapter 5*](B19436_05.xhtml#_idTextAnchor115),
    which covers setting them up in detail.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: SFDX 和 Salesforce CLI 是 Salesforce DevOps 的关键工具。要使用它们，您需要在系统上安装 Salesforce CLI。如果您尚未完成安装，可以重新查看
    [*第5章*](B19436_05.xhtml#_idTextAnchor115)，详细介绍了设置过程。
- en: To implement CI/CD in Salesforce, you’ll need an active Salesforce developer
    account. If you’re working with a team, you’ll also need an SFDX “hub” organization,
    where you can create and manage scratch orgs.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Salesforce 中实施 CI/CD，您需要一个有效的 Salesforce 开发者账户。如果您与团队一起工作，您还需要一个 SFDX “hub”
    组织，在其中创建和管理 scratch org。
- en: A crucial part of CI/CD is version control. GitHub is the most widely used platform
    and is recommended for its excellent integration with CI/CD tools. You’ll need
    a GitHub account and a repository for your Salesforce code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 的一个关键部分是版本控制。GitHub 是最广泛使用的平台，并且由于与 CI/CD 工具的出色集成，推荐使用它。您需要一个 GitHub 账户以及一个用于存储
    Salesforce 代码的仓库。
- en: The source code for this chapter is available at [https://github.com/PacktPublishing/Salesforce-DevOps-for-Architects/tree/main/Chapter7](https://github.com/PacktPublishing/Salesforce-DevOps-for-Architects/tree/main/Chapter7).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可在 [https://github.com/PacktPublishing/Salesforce-DevOps-for-Architects/tree/main/Chapter7](https://github.com/PacktPublishing/Salesforce-DevOps-for-Architects/tree/main/Chapter7)
    上获取。
- en: Introducing CI/CD
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入 CI/CD
- en: The world of software development has evolved dramatically over the years, with
    an increasing focus on agility, efficiency, and quality. In this context, CI and
    CD have emerged as key practices that can drive significant improvements in development
    workflows. In this section, we will explore the core concepts of CI/CD, their
    benefits, and their role in a DevOps strategy.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发的世界多年来发生了显著变化，越来越注重敏捷性、效率和质量。在这种背景下，CI 和 CD 成为了推动开发工作流程显著改进的关键实践。在本节中，我们将探讨
    CI/CD 的核心概念、它们的好处以及它们在 DevOps 策略中的作用。
- en: Continuous Integration (CI)
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续集成（CI）
- en: CI is a process in which developers commit their code into a shared repository
    frequently. Each of these commits can then undergo an automated build and test
    cycle to identify problems in the early stages of the development life cycle.
    This CI process helps to reduce integration problems and allows the development
    team to receive immediate feedback on any issues.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: CI 是一种开发者将代码频繁提交到共享仓库的过程。每次提交都可以经过自动化构建和测试周期，以便在开发生命周期的早期阶段识别问题。这个 CI 过程有助于减少集成问题，并使开发团队能够及时反馈任何问题。
- en: Continuous Delivery (CD)
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续交付（CD）
- en: CD takes the ideas of CI one step further. It automates the software release
    process as far as being ready for production but falls just short of the actual
    production deployment. This practice ensures that the code and config contained
    in the repository (usually the main or master branch) are always in a production-ready
    state, reduces the risk and effort of deployments, and allows teams to deliver
    updates and improvements to customers more quickly and regularly. The software
    is deployment-ready after automated testing, but a human decision is required
    on when to deploy to production.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: CD 将 CI 的理念进一步拓展。它将软件发布过程自动化，直到准备好生产环境，但稍微缺少实际的生产部署。这一实践确保了存储库中的代码和配置（通常是主分支或
    master 分支）始终处于生产就绪状态，减少了部署的风险和工作量，并使团队能够更快、更频繁地向客户交付更新和改进。经过自动化测试后，软件已准备好部署，但仍需要人工决策来确定何时部署到生产环境。
- en: Together, CI and CD form the backbone of modern DevOps practices. They promote
    a culture of collaboration, fast feedback cycles, and a focus on high-quality
    output. Implementing CI/CD can lead to more efficient development processes, fewer
    bugs reaching production, and a better product for your users.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: CI 和 CD 一起构成了现代 DevOps 实践的基础。它们促进了协作文化、快速反馈周期，并专注于高质量的输出。实施 CI/CD 可以带来更高效的开发流程，减少生产环境中出现的
    bug，并为用户提供更好的产品。
- en: In the context of Salesforce, CI/CD can bring additional benefits. Salesforce
    projects often involve multiple developers working on several aspects of a complex
    system. With CI/CD, you can ensure that changes are integrated and tested frequently,
    reducing the risk of conflicts and errors. Also, automated deployments can simplify
    the process of pushing changes to testing, staging, and production environments.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Salesforce 环境中，CI/CD 可以带来额外的好处。Salesforce 项目通常涉及多个开发者在复杂系统的多个方面进行工作。通过 CI/CD，您可以确保变更频繁地集成和测试，从而减少冲突和错误的风险。同时，自动化部署可以简化将变更推送到测试、预发布和生产环境的过程。
- en: However, it’s important to note that implementing CI/CD is not just a matter
    of using certain tools or following specific steps. It’s a cultural shift that
    requires buy-in from the entire team, a focus on automation and testing, and an
    ongoing commitment to improving your processes. This may involve improving existing
    testing practices or addressing technical debt and poor architecture – all of
    which can be prerequisites for properly implementing CI/CD. While these changes
    can seem daunting, the benefits of adopting CI/CD typically outweigh the effort
    required. In the following sections, we’ll delve into the specific tools and practices
    that can help you bring the benefits of CI/CD to your Salesforce projects. Even
    though the initial effort may be substantial, the payoff from improved automation,
    testing, and delivery processes is well worth it. With team commitment and a focus
    on continuous improvement, CI/CD can transform how you build and deliver on Salesforce.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，值得注意的是，实现CI/CD不仅仅是使用某些工具或遵循特定步骤的问题。它是一种文化转变，需要整个团队的认同，专注于自动化和测试，以及持续改进流程的承诺。这可能涉及改进现有的测试实践，或者解决技术债务和糟糕的架构——这些都是正确实施CI/CD的先决条件。虽然这些变化可能看起来令人生畏，但采用CI/CD的好处通常超过所需的努力。在接下来的部分中，我们将深入探讨可以帮助您将CI/CD的好处带入Salesforce项目的具体工具和实践。尽管最初的努力可能很大，但从改进的自动化、测试和交付流程中获得的回报是值得的。只要团队承诺并专注于持续改进，CI/CD可以改变您在Salesforce上构建和交付的方式。
- en: CI/CD pipeline
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CI/CD流水线
- en: 'A crucial concept within the CI/CD landscape is that of a pipeline. A CI/CD
    pipeline is a series of steps that your changes, whether in the form of code,
    metadata, or even data, will go through to make their way from development to
    production. It automates the process of integrating code changes, validating them
    with tests, and delivering them to the end users. It is usually visualized as
    a series of stages, each with a specific purpose. When a change is introduced
    (for example, when a developer pushes code to the repository), it triggers the
    pipeline, and the change moves through the stages. Let’s look at some of the typical
    pipeline stages:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在CI/CD的领域中，一个关键的概念是流水线。CI/CD流水线是一系列步骤，您的更改（无论是代码、元数据还是数据）将通过这些步骤，从开发到生产环境。它自动化了代码更改的集成过程、通过测试验证这些更改，并将它们交付给最终用户。通常，它被可视化为一系列阶段，每个阶段都有特定的目的。当引入更改时（例如，当开发者将代码推送到仓库时），它会触发流水线，改变会通过各个阶段。让我们来看看一些典型的流水线阶段：
- en: '**Build stage**: This is where the code is compiled, dependencies are fetched,
    and the software is packaged for deployment. For a Salesforce project, this might
    involve creating a new SFDX scratch org, pushing the code to the org, and running
    any required scripts.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建阶段**：这是代码被编译、依赖项被获取并且软件被打包部署的地方。在Salesforce项目中，这可能包括创建一个新的SFDX scratch
    org，将代码推送到该组织，并运行所需的脚本。'
- en: '**Test stage**: Automated tests are run against the build to ensure it behaves
    as expected. This could include unit tests, integration tests, and functional
    tests. In a Salesforce context, this must involve running Apex tests and possibly
    testing other components, such as Visualforce pages or Lightning components.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试阶段**：自动化测试会针对构建运行，以确保它的行为符合预期。这可能包括单元测试、集成测试和功能测试。在Salesforce的上下文中，这必须包括运行Apex测试，并可能测试其他组件，如Visualforce页面或Lightning组件。'
- en: '**Deploy stage**: If the build passes all tests, it can be deployed to a staging
    environment for further testing, and if it passes there, it can be deployed to
    the production environment. Salesforce-specific tools such as SFDX and change
    sets can be used for these deployments. Ultimately, these tools are wrappers around
    the Metadata API, which remains the sole underlying way to deploy changes.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署阶段**：如果构建通过了所有测试，它可以被部署到一个预发布环境中进行进一步测试，如果在那里也通过了测试，它就可以被部署到生产环境中。像SFDX和变更集这样的Salesforce特定工具可以用于这些部署。最终，这些工具是对元数据API的封装，而元数据API仍然是部署更改的唯一底层方式。'
- en: '**Monitor stage**: After deployment, the application is monitored to ensure
    it’s functioning correctly in the production environment. Any issues that arise
    can be fed back into the development process.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控阶段**：部署后，应用程序会被监控，以确保它在生产环境中正常运行。任何出现的问题都可以反馈到开发过程中。'
- en: Each of these stages is typically automated, meaning that the change can progress
    from one stage to the next without manual intervention, assuming that all checks
    pass. This automation is a key benefit of CI/CD pipelines, as it reduces the risk
    of human error, speeds up the delivery process, and provides quick feedback to
    the development team.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些阶段中的每个通常都是自动化的，这意味着在所有检查通过的前提下，变更可以从一个阶段推进到下一个阶段，而无需人工干预。自动化是 CI/CD 流水线的一大优势，因为它减少了人为错误的风险，加快了交付过程，并为开发团队提供了快速反馈。
- en: Each stage is designed to catch different types of issues. For instance, the
    build stage might catch syntax errors, while the test stage could catch functional
    bugs, and the monitoring stage could identify performance issues or errors in
    the live environment. Using tools such as PMD for static code analysis, or other
    code linters, such as ESLint for your Lightning Web Components, reinforces consistent
    code style and best practices across the entire development team. With rules encoded
    into the tools, developers get immediate feedback if they violate conventions.
    This promotes readable, maintainable code and, of course, can be added to your
    pipelines to run automatically.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 每个阶段都旨在捕捉不同类型的问题。例如，构建阶段可能会捕捉到语法错误，而测试阶段可能会捕捉到功能性错误，监控阶段则可以识别性能问题或实时环境中的错误。使用像
    PMD 这样的静态代码分析工具，或者其他代码检查工具，如针对 Lightning Web Components 的 ESLint，可以增强整个开发团队的一致性代码风格和最佳实践。通过将规则编码到这些工具中，开发人员如果违反了规范，就能得到即时反馈。这有助于推动可读、可维护的代码，当然也可以添加到流水线中自动运行。
- en: In the context of Salesforce, a CI/CD pipeline can help manage the complexities
    of developing in a multi-tenant, metadata-driven environment. It allows teams
    to develop, test, and deploy changes in a controlled, repeatable way, reducing
    the risks associated with manual deployments and ensuring high-quality output.
    In the coming sections, we’ll discuss how to implement such a pipeline using popular
    tools such as GitHub Actions and Jenkins.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Salesforce 的背景下，CI/CD 流水线可以帮助管理在多租户、元数据驱动环境中开发的复杂性。它允许团队以受控、可重复的方式开发、测试和部署变更，从而减少手动部署相关的风险，并确保高质量的输出。在接下来的章节中，我们将讨论如何使用流行的工具（如
    GitHub Actions 和 Jenkins）来实现这样的流水线。
- en: GitHub Actions
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub Actions
- en: In our journey into the realm of CI/CD, we encounter various tools that help
    facilitate these practices. One of these tools, which stands out for its simplicity
    and tight integration with the GitHub platform, is GitHub Actions. This powerful
    automation tool allows you to create custom **Software Development Life Cycle**
    (**SDLC**) workflows directly in your GitHub repository.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入 CI/CD 领域的过程中，我们会遇到许多有助于促进这些实践的工具。其中一个工具以其简单性和与 GitHub 平台的紧密集成而脱颖而出，那就是
    GitHub Actions。这个强大的自动化工具允许你直接在 GitHub 仓库中创建自定义的**软件开发生命周期**（**SDLC**）工作流。
- en: GitHub Actions enables you to automate, customize, and execute your software
    development workflows right in your repository. You can deploy workflows in the
    same place where you store code and collaborate on projects. This translates into
    faster, more streamlined development cycles as you can manage CI/CD from within
    your GitHub projects, without needing to rely on external tools.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 使你能够在自己的代码库中自动化、定制和执行软件开发工作流。你可以在存储代码和协作项目的同一个地方部署工作流。这意味着开发周期更快、更简化，因为你可以在
    GitHub 项目内部管理 CI/CD，而无需依赖外部工具。
- en: 'In GitHub Actions, workflows, jobs, and actions have a hierarchical relationship,
    which allows you to organize and structure your CI/CD process. This hierarchy
    has the following levels:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub Actions 中，工作流、任务和操作具有层级关系，这允许你组织和结构化你的 CI/CD 过程。这个层级关系具有以下几个级别：
- en: '`.github/workflows` directory of your repository holds `.yml` or `.yaml` files
    where workflows are defined.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.github/workflows` 目录包含定义工作流的 `.yml` 或 `.yaml` 文件。'
- en: '`runs-on` directive. A single workflow can execute numerous jobs, which, by
    default, operate concurrently, although you can adjust them to run one after the
    other. Each job is composed of several steps, each performing specific tasks.
    These jobs can utilize either the same runner or different ones.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`runs-on` 指令。单个工作流可以执行多个任务，默认情况下这些任务并行执行，尽管你可以将它们调整为顺序执行。每个任务由多个步骤组成，每个步骤执行特定任务。这些任务可以使用相同的运行器，也可以使用不同的运行器。'
- en: '**Step**: Steps represent the most granular level of work within a job. Each
    step is responsible for executing a single command or action. They can either
    carry out commands, which are any shell commands, or actions, which are reusable
    code chunks. These actions could be developed by you, developed by GitHub, or
    sourced from the community through a public repository.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤**：步骤表示作业中最细粒度的工作。每个步骤负责执行一个单一的命令或 Action。它们可以执行命令，这些命令是任何 shell 命令，也可以执行
    Action，Action 是可重用的代码块。这些 Action 可以是由你开发的，也可以是 GitHub 开发的，或者是从社区的公共仓库中获取的。'
- en: '![Figure 7.1 – The hierarchical relationship between workflows, jobs, and steps](img/Figure_7.1_B19436.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 工作流、作业和步骤之间的层次关系](img/Figure_7.1_B19436.jpg)'
- en: Figure 7.1 – The hierarchical relationship between workflows, jobs, and steps
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 工作流、作业和步骤之间的层次关系
- en: A step in a job can be either a command that runs in a shell or an action. In
    the following example, each step in the job either runs a command in a shell (such
    as `npm install sfdx-cli --global`) or uses an action (such as `actions/checkout@v2`).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 作业中的一步可以是一个在 shell 中运行的命令，或者是一个 Action。在下面的示例中，作业中的每一步要么运行 shell 命令（例如 `npm
    install sfdx-cli --global`），要么使用 Action（例如 `actions/checkout@v2`）。
- en: GitHub Actions provides more than just the ability to establish CI/CD pipelines.
    It also allows for the automation of a broad spectrum of tasks, such as issue
    triaging and package publishing. This makes it a multifaceted tool essential for
    any developer’s toolkit.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 提供的不仅仅是建立 CI/CD 流水线的能力，它还允许自动化广泛的任务，如问题分诊和软件包发布。这使得它成为任何开发者工具包中不可或缺的多功能工具。
- en: For Salesforce developers and architects, tasks can be automated using GitHub
    Actions, such as running Apex tests, deploying code to scratch orgs, and promoting
    changes to staging and production environments. In the following sections, we’ll
    delve deeper into how to set up and use GitHub Actions for Salesforce CI/CD.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Salesforce 开发者和架构师来说，可以通过 GitHub Actions 自动化任务，例如运行 Apex 测试、将代码部署到 Scratch
    org，以及将更改推广到暂存和生产环境。接下来的部分，我们将深入探讨如何设置和使用 GitHub Actions 来实现 Salesforce CI/CD。
- en: GitHub workflows in action
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitHub 工作流实例
- en: 'Let’s start by looking at a real-world example of a Git workflow and then walk
    through what it is doing. Consider the GitHub workflow shown here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先来看一个实际的 Git 工作流示例，然后逐步分析它在做什么。考虑下面这个 GitHub 工作流：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This GitHub workflow is initiated whenever push or pull request events occur
    on the main branch. We then need to define the job(s) within the workflow:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 该 GitHub 工作流会在主分支上发生推送或拉取请求事件时启动。接下来，我们需要在工作流中定义一个或多个作业：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this instance, we have defined a singular job named `deploy`, which executes
    in an `ubuntu-latest` environment. The `runs-on:` field in a GitHub Actions workflow
    configures the kind of machine that the job will be run on. This field can assume
    a variety of values, which, in turn, determine the type of runner used for the
    execution of the job.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实例中，我们定义了一个名为 `deploy` 的作业，它将在 `ubuntu-latest` 环境中执行。GitHub Actions 工作流中的
    `runs-on:` 字段配置作业将运行的机器类型。该字段可以具有多种值，进而确定执行作业所使用的 Runner 类型。
- en: A runner is a server equipped with the GitHub Actions runner application, tasked
    with executing jobs. The `ubuntu-latest` value indicates that the job should run
    on the latest stable Ubuntu virtual machine hosted by GitHub.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Runner 是一台配备了 GitHub Actions Runner 应用程序的服务器，负责执行任务。`ubuntu-latest` 值表示任务应在
    GitHub 托管的最新稳定版 Ubuntu 虚拟机上运行。
- en: 'Next, we will define the steps that the job should execute. Firstly, we do
    some preparation by checking out the code in our repository and installing the
    Salesforce CLI to run additional steps with the code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将定义作业应执行的步骤。首先，我们通过检出仓库中的代码并安装 Salesforce CLI 来进行一些准备工作，以便使用代码执行后续步骤：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first step uses `actions/checkout@v2` to check out the source code of the
    current repository. With GitHub Actions, it’s possible to utilize actions that
    are contained in your own repository, in a public repository, or within a Docker
    container image in GitHub’s own collection of published images. The `uses:` keyword
    in your GitHub Actions workflow is used to specify these actions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步使用 `actions/checkout@v2` 来检出当前仓库的源代码。通过 GitHub Actions，可以使用包含在你自己仓库中的 Action，公共仓库中的
    Action，或者在 GitHub 自有发布镜像中的 Docker 容器镜像中的 Action。`uses:` 关键字用于在 GitHub Actions
    工作流中指定这些 Actions。
- en: In this case, `actions/checkout@v2` refers to the checkout action from the `actions`
    repository, and `v2` is the tag of the version you want to use. This checkout
    action checks out your repository under `$GITHUB_WORKSPACE`, so your workflow
    can access it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`actions/checkout@v2` 是指来自 `actions` 仓库的 checkout 动作，`v2` 是你想要使用的版本标签。这个
    checkout 动作会将你的仓库检出到 `$GITHUB_WORKSPACE` 下，以便工作流可以访问它。
- en: By specifying `v2`, you are instructing the workflow to use the second major
    version of the checkout action. This version could include new features, changes,
    or bug fixes compared to the previous version (`v1`). The maintainers of the action
    define these versions according to semantic versioning rules.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定 `v2`，你指示工作流使用 checkout 动作的第二个主要版本。与之前的版本（`v1`）相比，这个版本可能包含新功能、变更或 bug 修复。动作的维护者根据语义版本控制规则定义这些版本。
- en: It’s good practice to specify a version (instead of using the default branch,
    usually `main` or `master`) to protect your workflows from potential breaking
    changes introduced into those branches.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践是指定一个版本（而不是使用默认的分支，通常是 `main` 或 `master`），以保护你的工作流免受这些分支中可能引入的破坏性变更。
- en: The second step is to install the Salesforce CLI globally. The Salesforce CLI
    is used to authenticate with your Salesforce org and run your Apex unit tests.
    However, the Salesforce CLI isn’t pre-installed on GitHub’s virtual environments,
    so you need to install it in your workflow.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是全局安装 Salesforce CLI。Salesforce CLI 用于与你的 Salesforce 组织进行身份验证并运行 Apex 单元测试。然而，Salesforce
    CLI 并没有预装在 GitHub 的虚拟环境中，因此你需要在工作流中安装它。
- en: 'The Salesforce CLI has two main distribution methods – as a binary executable
    file and as a Node.js package installed through npm. We chose to use the binary
    distribution in our script, as the npm installation can run into permissions issues
    when trying to add extra plugins. The npm package requires Node.js and needs to
    be installed globally, which typically requires sudo permissions. Using sudo can
    lead to filesystem permission problems down the line. The binary distribution
    avoids these problems, which is why we opted for that method. The Node.js npm
    package is also available, but we avoided it due to the potential permission issues
    when adding plugins. Now, we can move on to the next step in our job:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce CLI 有两种主要的分发方式——作为二进制可执行文件和作为通过 npm 安装的 Node.js 包。我们在脚本中选择使用二进制分发，因为
    npm 安装在尝试添加额外插件时可能会遇到权限问题。npm 包需要 Node.js，并且需要全局安装，这通常需要 sudo 权限。使用 sudo 可能会导致文件系统权限问题。二进制分发避免了这些问题，这也是我们选择这种方法的原因。Node.js
    的 npm 包也可以使用，但我们避免了它，因为在添加插件时可能会遇到权限问题。现在，我们可以进入下一个步骤：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding step, we are making use of GitHub’s per-repository secrets
    to retrieve a stored value and copying that value into a temporary file *only
    for the life cycle of this job*. The file contains an SFDX authorization URL,
    which allows the job to connect to our Salesforce Developer Hub org easily.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的步骤中，我们利用了 GitHub 的每个仓库密钥来检索存储的值，并将该值复制到一个临时文件中，*仅在此作业的生命周期内有效*。该文件包含一个 SFDX
    授权 URL，允许作业轻松连接到我们的 Salesforce Developer Hub 组织。
- en: 'There are three choices available to create this authentication file. The simplest
    approach involves redirecting the output of the `sf org display --verbose --json`
    command to a file. As an illustration, consider the scenario of utilizing an org
    that you have already authorized:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种方法可以创建这个身份验证文件。最简单的方法是将 `sf org display --verbose --json` 命令的输出重定向到一个文件中。例如，假设你正在使用一个已经授权的组织：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Inside the resulting JSON file, you can find the URL stored in the `sfdxAuthUrl`
    property within a results object. Please note that the `force:org:display --verbose`
    command only displays the refresh token for orgs authorized with the web server
    flow, not the JWT bearer flow.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成的 JSON 文件中，你可以找到存储在 `sfdxAuthUrl` 属性中的 URL，该属性位于 results 对象内。请注意，`force:org:display
    --verbose` 命令只会显示使用 Web 服务器流授权的组织的刷新令牌，而不会显示使用 JWT 承载流授权的组织。
- en: Additionally, you have the option to generate a JSON file with a top-level property
    called `sfdxAuthUrl`, which contains the authentication URL. Alternatively, you
    can create a plain text file that solely includes the URL without any additional
    content.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还有选择生成一个 JSON 文件，其中包含一个名为 `sfdxAuthUrl` 的顶级属性，该属性包含身份验证 URL。或者，你可以创建一个纯文本文件，只包含
    URL，而不包含任何其他内容。
- en: 'The SFDX authorization URL follows this format:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: SFDX 授权 URL 的格式如下：
- en: '`force://<clientId>:<clientSecret>:<refreshToken>@<instanceUrl>`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`force://<clientId>:<clientSecret>:<refreshToken>@<instanceUrl>`'
- en: The URL uses `force://` instead of http:// or `https://`, and `instanceUrl`
    does not include `https://`. It is just the domain name.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: URL 使用 `force://` 而不是 http:// 或 `https://`，并且 `instanceUrl` 不包含 `https://`，它只是域名。
- en: 'The next step authenticates with the Salesforce org using the newly created
    file, which contains the authorization URL, and gives it the alias `HubOrg`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步使用新创建的文件对 Salesforce 组织进行认证，该文件包含授权 URL，并为其指定别名 `HubOrg`：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Having authenticated our Dev Hub, we are now able to automatically generate
    a new scratch org for our testing needs and transfer our code into it:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在认证我们的 Dev Hub 后，我们现在可以自动生成一个新的临时组织以供测试使用，并将代码传输到其中：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With this new scratch org in place, with the `ciorg` alias, we can execute
    our Apex tests:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个新的临时组织，并使用 `ciorg` 别名，我们可以执行我们的 Apex 测试：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, we delete the scratch org when we’ve finished. This is an important
    step, since Salesforce enforces limits on how many active scratch orgs you can
    have in each Dev Hub:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当我们完成时，会删除临时组织。这是一个重要步骤，因为 Salesforce 对每个 Dev Hub 中可以拥有的活动临时组织数量有严格限制：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Each step within a job operates in its own distinct context. However, using
    GitHub workflow syntax, these individual steps can be orchestrated to interact
    and cooperate with each other. The workflow configuration provides the ability
    to establish dependencies between steps, such as specifying that a step must wait
    for the successful completion of another before it starts. It also allows one
    step to utilize the output from another, among other interactions. This flexible
    configuration enables complex automated processes to be built from a collection
    of individual steps.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 每个工作中的步骤都在其独特的上下文中运行。然而，使用 GitHub 工作流语法，这些独立的步骤可以协调互动并相互配合。工作流配置提供了建立步骤之间依赖关系的能力，例如指定一个步骤必须等待另一个步骤成功完成后才能开始。它还允许一个步骤利用另一个步骤的输出，及其他交互。这种灵活的配置使得可以从一系列独立步骤构建复杂的自动化过程。
- en: GitHub Actions provides a versatile platform for tailoring your CI/CD pipeline
    when working with SFDX. With its capability to run a wide array of tasks, from
    executing shell commands to running scripts or even third-party software, GitHub
    Actions can be uniquely customized to fit your specific needs.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 提供了一个多功能平台，便于在使用 SFDX 时定制你的 CI/CD 管道。凭借其执行各种任务的能力，从执行 shell 命令到运行脚本甚至是第三方软件，GitHub
    Actions 可以根据你的特定需求进行独特定制。
- en: This adaptability is also applicable to SFDX, where you can utilize GitHub Actions
    to automate numerous tasks. These can include executing unit tests, deploying
    code to various environments, and even overseeing data migration. By leveraging
    the power of GitHub Actions, you can create an efficient, reliable, and automated
    CI/CD pipeline that enhances the development and deployment process for your SFDX
    projects.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这种适应性同样适用于 SFDX，在其中你可以利用 GitHub Actions 来自动化多个任务。这些任务可以包括执行单元测试、将代码部署到不同的环境，甚至监督数据迁移。通过利用
    GitHub Actions 的强大功能，你可以创建一个高效、可靠的自动化 CI/CD 管道，增强 SFDX 项目的开发和部署过程。
- en: While the preceding steps will provide you with a basic automated workflow for
    using GitHub Actions for your Salesforce CI/CD needs, you can extend it with more
    automated testing, static code analysis, approval processes, and more. You find
    extensive documentation and tutorials in the official GitHub Actions documentation
    at [https://docs.github.com/en/actions/learn-github-actions](https://docs.github.com/en/actions/learn-github-actions).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前面的步骤为你提供了一个使用 GitHub Actions 进行 Salesforce CI/CD 的基本自动化工作流，但你可以通过更多的自动化测试、静态代码分析、审批流程等来扩展它。在
    [https://docs.github.com/en/actions/learn-github-actions](https://docs.github.com/en/actions/learn-github-actions)
    的官方 GitHub Actions 文档中，你可以找到大量的文档和教程。
- en: If you want an alternative approach to your CI/CD, you could instead look at
    Jenkins. It has a considerable number of plugins available, can be self-hosted
    to give you more control of your implementation, and has a more intuitive UI to
    set up and manage your pipeline. In the next section, we’ll look at Jenkins in
    a little more detail.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想尝试不同的 CI/CD 方法，可以考虑 Jenkins。它拥有大量的插件，支持自托管，可以让你更好地控制实现过程，并且具有更加直观的用户界面来设置和管理你的管道。在接下来的章节中，我们将更详细地介绍
    Jenkins。
- en: Jenkins
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins
- en: Jenkins is an open source automation server that has solidified its place as
    an essential tool in the DevOps community. It has been a go-to choice for many
    organizations due to its extensive feature set, its plugin ecosystem, and the
    high degree of flexibility and control it offers.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 是一个开源自动化服务器，已经稳固地成为 DevOps 社区中不可或缺的工具。由于其丰富的功能集、插件生态系统以及高度的灵活性和控制能力，Jenkins
    成为许多组织的首选。
- en: Jenkins is engineered to manage a range of DevOps activities and processes,
    from a straightforward CI server to a comprehensive CD hub, accommodating any
    kind of project, regardless of the size or complexity. It allows you to automate
    the different stages of your delivery pipeline, providing continuous feedback
    to the project team about the health of their project.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 被设计用来管理各种 DevOps 活动和流程，从简单的 CI 服务器到全面的 CD 中心，可以容纳任何类型的项目，无论其规模或复杂性。它允许你自动化交付管道的不同阶段，为项目团队提供关于项目健康状况的持续反馈。
- en: One of the significant advantages of Jenkins is its extensibility through plugins.
    With over 1,000 plugins in the Update Center, Jenkins integrates with practically
    every tool in the CI/CD toolchain. You can use it to build, test, and deliver
    code in any language, to any platform. This extensibility makes Jenkins a versatile
    tool that can adapt to a wide range of project needs.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 的一个重要优势是它通过插件的可扩展性。在更新中心有超过 1,000 个插件，Jenkins 可以与几乎所有 CI/CD 工具链中的工具进行集成。你可以使用它来构建、测试并交付任何语言的代码，部署到任何平台。这种可扩展性使得
    Jenkins 成为一个多功能工具，可以适应各种项目需求。
- en: Jenkins uses a distributed architecture that can easily scale as your needs
    grow. You can set up Jenkins to distribute work across multiple machines, enabling
    projects to build, test, and deploy faster. This distributed nature of Jenkins
    is particularly beneficial for large and complex projects.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 使用分布式架构，能够随着需求的增长轻松扩展。你可以设置 Jenkins，将工作分配到多台机器上，从而加速项目的构建、测试和部署。这种分布式特性对于大型和复杂的项目特别有利。
- en: Much like GitHub Actions, Jenkins can be configured to handle tasks such as
    running Apex tests, creating and managing SFDX scratch orgs, and deploying metadata
    to various Salesforce environments. Jenkins can also be integrated with version
    control systems, such as Git, enhancing its capabilities within a Salesforce CI/CD
    pipeline.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 与 GitHub Actions 类似，Jenkins 可以配置来处理任务，例如运行 Apex 测试、创建和管理 SFDX scratch org、以及将元数据部署到各种
    Salesforce 环境中。Jenkins 还可以与版本控制系统（如 Git）集成，增强其在 Salesforce CI/CD 管道中的功能。
- en: The first part of setting up a Jenkins CI/CD pipeline for Salesforce is the
    installation of Jenkins itself. This varies slightly depending on your operating
    system. Jenkins is a Java-based application, so it runs on any platform that supports
    Java. It’s advisable to always ensure that your system packages are up to date
    before starting any new installations.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 Salesforce 的 Jenkins CI/CD 管道的第一部分是安装 Jenkins 本身。根据操作系统的不同，这个过程会有所不同。Jenkins
    是一个基于 Java 的应用程序，因此它可以在任何支持 Java 的平台上运行。在开始任何新的安装之前，建议始终确保系统的所有软件包都是最新的。
- en: If you’re running Ubuntu Linux, the process begins with updating your system
    packages via the `apt update` and `apt upgrade` commands run in your terminal.
    You then need to install Java, as Jenkins requires it to run. The OpenJDK package
    is a good option and can be installed with `apt install openjdk-17-jdk`. At the
    time of writing, JDK 20 is the most recent version of the Java SE platform. However,
    JDK 17 LTS holds the status of being the most up-to-date **Long-Term Support**
    (**LTS**) release for the Java SE platform.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Ubuntu Linux，首先需要通过终端运行 `apt update` 和 `apt upgrade` 命令来更新系统软件包。然后，你需要安装
    Java，因为 Jenkins 需要它才能运行。OpenJDK 包是一个不错的选择，可以通过 `apt install openjdk-17-jdk` 命令进行安装。在撰写本文时，JDK
    20 是 Java SE 平台的最新版本。然而，JDK 17 LTS 作为 Java SE 平台的最新**长期支持**（**LTS**）版本，仍然是最为推荐的版本。
- en: 'Next, you should add the Jenkins repository to your sources list, which is
    a prerequisite for the Jenkins installation. You can accomplish this by fetching
    the Jenkins repository key with the `wget` command and adding it to your system’s
    software repository list. The key is required to authenticate and ensure that
    packages installed on your system are from a trusted source. You can download
    the Jenkins repository key directly from Jenkins’ own servers with the following
    `wget` command in your terminal:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你应该将 Jenkins 仓库添加到你的源列表中，这是安装 Jenkins 的前提条件。你可以通过使用 `wget` 命令获取 Jenkins
    仓库的密钥并将其添加到系统的软件仓库列表中。此密钥用于身份验证，并确保你系统上安装的软件包来自受信任的来源。你可以使用以下 `wget` 命令从 Jenkins
    服务器直接下载 Jenkins 仓库密钥：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `-q` option tells `wget` to operate quietly, meaning it won’t output progress
    information. The `-O -` option tells it to write the downloaded content to standard
    output, represented by `-`. This content is then piped, using the `|` symbol,
    into the `sudo apt-key add -` command, which adds the key to your system’s list
    of trusted keys.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`-q` 选项告诉 `wget` 安静地运行，这意味着它不会输出进度信息。`-O -` 选项则告诉它将下载的内容写入标准输出，表示为 `-`。然后，使用
    `|` 符号将这些内容传递到 `sudo apt-key add -` 命令中，该命令将密钥添加到系统的受信任密钥列表中。'
- en: 'Next, you need to add the Jenkins repository to your system’s software repository
    list. This is done by appending the Jenkins repository URL to the list of repositories
    stored in the `/etc/apt/sources.list.d/` directory. You can do this with the following
    command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 Jenkins 仓库添加到系统的软件仓库列表中。这是通过将 Jenkins 仓库 URL 附加到存储在 `/etc/apt/sources.list.d/`
    目录中的仓库列表来完成的。你可以使用以下命令来执行此操作：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `echo` command prints its argument, in this case, the Jenkins repository
    URL and the type of packages to use (binary). This output is piped into the `sudo
    tee` command. The `tee` command is used to append the input it receives to a file,
    in this case, the `jenkins.list` file in the `/``etc/apt/sources.list.d/` directory.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo` 命令打印其参数，在本例中是 Jenkins 仓库的 URL 和要使用的软件包类型（binary）。此输出会被传递给 `sudo tee`
    命令。`tee` 命令用于将接收到的输入附加到文件中，本例中是将输入追加到 `/etc/apt/sources.list.d/` 目录中的 `jenkins.list`
    文件。'
- en: Once these commands have been run, your system’s package manager is set up to
    install Jenkins and keep it updated. The next step would be to update the package
    list with `sudo apt update`, and then you can proceed with installing Jenkins
    via `sudo apt` `install jenkins`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些命令执行完毕，你的系统包管理器就设置好了，能够安装 Jenkins 并保持其更新。接下来的步骤是通过 `sudo apt update` 更新软件包列表，然后你可以继续通过
    `sudo apt install jenkins` 安装 Jenkins。
- en: For macOS users, you’ll first need to install Homebrew, a package manager that
    simplifies the installation of software on macOS. Once Homebrew is installed,
    you can use it to install OpenJDK, and then Jenkins itself. Just like with Ubuntu,
    once Jenkins is installed, you should start the service and make sure it’s set
    to start automatically when the system boots.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 macOS 用户，首先需要安装 Homebrew，这是一个简化 macOS 上软件安装的包管理工具。安装 Homebrew 后，你可以使用它来安装
    OpenJDK，然后再安装 Jenkins。和 Ubuntu 一样，安装 Jenkins 后，你应该启动 Jenkins 服务，并确保它在系统启动时自动启动。
- en: On Windows, the process is slightly different. You’ll need to download the Jenkins
    WAR file directly from the Jenkins website and have the latest version of JDK
    installed from Oracle’s website. After setting up the `JAVA_HOME` environment
    variable, you can run Jenkins by navigating to the directory where the Jenkins
    WAR file is stored and using the `java -``jar` command.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，过程略有不同。你需要直接从 Jenkins 网站下载 Jenkins WAR 文件，并从 Oracle 网站安装最新版本的 JDK。设置好
    `JAVA_HOME` 环境变量后，你可以通过进入存放 Jenkins WAR 文件的目录，使用 `java -jar` 命令来运行 Jenkins。
- en: In all three cases, once Jenkins is running, you can access the Jenkins dashboard
    by navigating to http://localhost:8080 in a web browser. You’ll be guided through
    the rest of the setup process, which includes setting up an admin user and configuring
    security settings.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这三种情况下，一旦 Jenkins 启动，你可以通过在 web 浏览器中访问 http://localhost:8080 来进入 Jenkins 仪表盘。接下来会引导你完成其余的设置过程，包括创建管理员用户和配置安全设置。
- en: After Jenkins is installed and running, you’ll need to prepare it for SFDX.
    SFDX comprises a suite of tools designed to enhance and simplify all stages of
    the development and deployment process. It requires the Salesforce CLI, so you’ll
    need to install that on the same machine as Jenkins. We covered the installation
    of the Salesforce CLI earlier, in [*Chapter 5*](B19436_05.xhtml#_idTextAnchor115),
    if you need a reminder of the process.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装并启动 Jenkins 后，您需要为 SFDX 做好准备。SFDX 包含一套旨在增强和简化开发与部署过程各个阶段的工具。它需要 Salesforce
    CLI，因此您需要在与 Jenkins 相同的机器上安装它。如果您需要提醒，之前在 [*第 5 章*](B19436_05.xhtml#_idTextAnchor115)
    中已经介绍过 Salesforce CLI 的安装过程。
- en: Once the Salesforce CLI is installed, you’ll need to ensure Jenkins can interact
    with it. This is done by adding the path to the Salesforce CLI in the Jenkins
    system configuration settings. You can navigate to these settings via the **Manage
    Jenkins** | **Configure System** menu on the Jenkins dashboard.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce CLI 安装完成后，您需要确保 Jenkins 可以与其交互。通过在 Jenkins 系统配置设置中添加 Salesforce CLI
    的路径来完成此操作。您可以通过 Jenkins 仪表板上的 **Manage Jenkins** | **Configure System** 菜单导航到这些设置。
- en: Jenkins operates by using plugins for specific tasks and integrations. For SFDX,
    the key plugins you need to install are the Pipeline plugin, the Git plugin, and,
    depending on your choice of version control solution, either the GitHub plugin,
    the Bitbucket plugin, or any plugins that may be specific to your Git provider.
    In this example, we’re going to focus on the GitHub option. The Pipeline plugin
    enables the creation of CD pipelines in Jenkins, while the Git and GitHub plugins
    enable Jenkins to interact with Git repositories.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 通过使用插件来完成特定任务和集成。对于 SFDX，您需要安装的关键插件包括 Pipeline 插件、Git 插件，以及根据您选择的版本控制解决方案，可能需要
    GitHub 插件、Bitbucket 插件，或者任何可能与您的 Git 提供商相关的插件。在这个例子中，我们将专注于 GitHub 选项。Pipeline
    插件使得在 Jenkins 中创建 CD 管道成为可能，而 Git 和 GitHub 插件使 Jenkins 能够与 Git 仓库进行交互。
- en: These plugins can be installed via the **Manage Plugins** menu in the Jenkins
    dashboard. After they’re installed, Jenkins will be able to interact with SFDX
    and pull code from a GitHub repository, forming the basis of your CI/CD pipeline.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这些插件可以通过 Jenkins 仪表板中的 **Manage Plugins** 菜单安装。安装后，Jenkins 将能够与 SFDX 交互，并从 GitHub
    仓库拉取代码，为您的 CI/CD 管道奠定基础。
- en: The addition of Git support via the plugin enables Jenkins to monitor a Git
    repository for changes, pull those changes when they occur, and then take certain
    actions based on those changes. Jenkins achieves this by using webhooks and polling.
    Webhooks are triggers that are sent from GitHub to Jenkins when a change occurs,
    while polling means Jenkins will periodically ask GitHub whether there has been
    a change.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 通过插件添加的 Git 支持使 Jenkins 能够监控 Git 仓库的更改，发生更改时拉取这些更改，并根据这些更改采取某些行动。Jenkins 通过使用
    Webhooks 和轮询来实现这一点。Webhooks 是当更改发生时从 GitHub 发送到 Jenkins 的触发器，而轮询则意味着 Jenkins 会定期询问
    GitHub 是否有更改。
- en: To set up a webhook, you’ll need to navigate to your repository on GitHub, go
    to the `/github-webhook/` (e.g., [http://your-jenkins-url/github-webhook/](http://your-jenkins-url/github-webhook/)).
    Make sure `application/json` and the events you are interested in are selected
    (such as `Just the` `push event`).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 webhook，您需要导航到 GitHub 上的仓库，进入 `/github-webhook/` （例如，[http://your-jenkins-url/github-webhook/](http://your-jenkins-url/github-webhook/)）。确保选择了
    `application/json` 和您感兴趣的事件（例如 `仅推送事件`）。
- en: If webhooks are not an option due to network restrictions, you can opt to have
    Jenkins periodically poll GitHub for changes. This is done through the **Poll
    SCM** option in the job configuration.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于网络限制无法使用 Webhooks，您可以选择让 Jenkins 定期轮询 GitHub 查找更改。通过在作业配置中选择 **Poll SCM**
    选项来实现。
- en: The actions that Jenkins takes in response to detected changes are defined in
    a **Jenkinsfile**, which contains all the stages of your Jenkins pipeline. It’s
    checked into source control, providing an easy way to version it and allowing
    it to be shared across multiple jobs.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 对检测到的更改所采取的操作在 **Jenkinsfile** 中定义，该文件包含了 Jenkins 管道的所有阶段。它被提交到源代码管理中，提供了一种便捷的方式来管理版本，并允许在多个作业间共享。
- en: 'A basic Jenkinsfile for a CI/CD workflow – pulling changes, running unit tests,
    checking whether they pass, and then deploying to the next environment if they
    do – might look something like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基本的 Jenkinsfile，用于 CI/CD 工作流 —— 拉取更改、运行单元测试、检查是否通过，然后如果通过则部署到下一个环境 —— 可能类似于这样：
- en: '[PRE11]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In this first section, we set up some variables. As we’re referencing credentials,
    it’s recommended that you don’t hardcode them into the Jenkinsfile but, instead,
    pull them from environment variables on the server that is running Jenkins. Once
    these are set up, we can start with the first stage of our pipeline, as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们设置了一些变量。由于我们要引用凭证，建议不要将它们硬编码到 Jenkinsfile 中，而是从运行 Jenkins 的服务器上的环境变量中获取它们。设置好这些后，我们可以开始管道的第一阶段，具体如下：
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This first stage of the pipeline simply pulls the latest changes from our source
    control, ready for Jenkins to work with. In the next section of the file, we can
    wrap everything else with the set of credentials we wish to use for interacting
    with Salesforce, so that all the stages contained inside the code block use the
    same details. These credentials are supplied in the form of a **JSON Web Token**
    (**JWT**) file and then added to the configuration with a reference to that file
    – instructions on creating this, as well as a connected app within Salesforce,
    can be found in the official documentation at [https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_ci_jenkins_config_env.htm](https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_ci_jenkins_config_env.htm):'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 管道的这一阶段仅仅是从我们的源代码管理中拉取最新的更改，以便 Jenkins 使用。在文件的下一部分，我们可以将所有其他内容封装在我们希望用于与 Salesforce
    交互的凭证集内，以便代码块中的所有阶段都使用相同的详细信息。这些凭证是以 **JSON Web Token** (**JWT**) 文件的形式提供的，并通过引用该文件将其添加到配置中——有关创建此文件以及在
    Salesforce 中连接应用的说明，可以在官方文档中找到，网址为 [https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_ci_jenkins_config_env.htm](https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_ci_jenkins_config_env.htm)：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With these credentials in place, we can do a similar thing with the working
    environment, so that all commands run in the context of the code we just retrieved
    from source control:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好这些凭证后，我们可以对工作环境做类似的操作，这样所有的命令都会在我们刚刚从源代码管理中提取的代码上下文中运行：
- en: '[PRE14]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now that we have our build environment in place, we can start moving the code
    to our Salesforce environment. In this first step, shown as follows, we use our
    credentials to authenticate to our SFDX Dev Hub:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了构建环境，我们可以开始将代码移动到我们的 Salesforce 环境。在这第一步中，如下所示，我们使用我们的凭证来进行 SFDX Dev
    Hub 的身份验证：
- en: '[PRE15]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once our Dev Hub is authenticated, we are able to create a new scratch org
    for our code testing, as shown:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的 Dev Hub 认证通过，我们就可以为我们的代码测试创建一个新的临时组织，如下所示：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can now push our changes to the newly created scratch org in the next stage,
    as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在下一个阶段将更改推送到新创建的临时组织，具体如下：
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'At this point, we have a freshly created scratch org populated with our latest
    changes. We can use this to run the full suite of unit tests and ensure our tests
    pass, with another section in our CI/CD pipeline, as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经有了一个新创建的临时组织，里面包含了我们最新的更改。我们可以使用它来运行完整的单元测试套件，并确保我们的测试通过，在我们的 CI/CD 管道的另一个阶段中，如下所示：
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, we tidy up by deleting the scratch org – this helps preserve the number
    of active scratch orgs governor limit in our Salesforce dev hub:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过删除临时组织来整理工作——这有助于保持我们 Salesforce 开发中心中活动临时组织的数量在上限之内：
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This Jenkinsfile uses a declarative pipeline syntax, which has a more rigid
    structure than the scripted pipeline syntax. It begins with the node keyword,
    indicating the start of the pipeline.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Jenkinsfile 使用的是声明式管道语法，它比脚本化管道语法结构更加严格。它以 `node` 关键字开始，表示管道的开始。
- en: Each stage contains one or more steps to be performed. As you can see, this
    structure is like that of GitHub Actions, which we covered in the previous section.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 每个阶段包含一个或多个要执行的步骤。正如你所看到的，这种结构与我们在上一节中介绍的 GitHub Actions 相似。
- en: The `checkout scm` command is a built-in Jenkins command that fetches the source
    code from the repository defined in the Jenkins job.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`checkout scm` 命令是一个内置的 Jenkins 命令，用于从 Jenkins 作业中定义的仓库中获取源代码。'
- en: The various other steps run commands in the Salesforce CLI. This is a very basic
    example; a real-world Jenkinsfile would be more complex. For example, you might
    want to add error handling, send notifications based on the job result, or add
    stages for things such as code analysis or integration testing. It’s worth noting
    that Jenkins, while enormously powerful, is more complex than setting up GitHub
    Actions, and it’s worth spending time getting familiar with the tool and how Jenkinsfiles
    work in more detail. The official Jenkins website at [https://jenkins.io](https://jenkins.io)
    has a wealth of material to guide you, not least of which is the Jenkins Handbook
    – [https://www.jenkins.io/doc/book/](https://www.jenkins.io/doc/book/).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 其他各种步骤都运行 Salesforce CLI 中的命令。这是一个非常基础的例子；一个真实的 Jenkinsfile 会更为复杂。例如，您可能想要添加错误处理、根据作业结果发送通知，或者为代码分析或集成测试等任务添加阶段。值得注意的是，Jenkins
    功能强大，但设置比 GitHub Actions 更为复杂，因此值得花时间熟悉这个工具，并更详细地了解 Jenkinsfile 的工作原理。官方 Jenkins
    网站 [https://jenkins.io](https://jenkins.io) 提供了大量的资料，其中包括《Jenkins 手册》 – [https://www.jenkins.io/doc/book/](https://www.jenkins.io/doc/book/)。
- en: Salesforce-specific tools
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Salesforce 特定工具
- en: In the world of Salesforce development, there is an essential need for tools
    specifically designed to accommodate Salesforce’s unique architecture and development
    paradigm. Two of these tools that hold particular importance are SFDX and the
    Salesforce CLI, acting as central figures in the Salesforce development process
    and enhancing the efficiency of CI/CD pipelines.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Salesforce 开发的世界里，迫切需要一些专门为适应 Salesforce 独特架构和开发范式而设计的工具。其中两款具有特别重要性的工具是 SFDX
    和 Salesforce CLI，它们在 Salesforce 开发过程中扮演着核心角色，并提高了 CI/CD 流水线的效率。
- en: SFDX, which is an approach to Salesforce development supported by a suite of
    development tools provided by Salesforce, not only fosters source-driven development
    but also facilitates team collaboration and orchestrates testing and deployment
    continuously. It’s built with an ecosystem-centric approach, ensuring seamless
    integration with other tools within the DevOps landscape. The Salesforce CLI,
    a fundamental component of SFDX, serves as a command-line tool that allows the
    scripting of a multitude of tasks across Salesforce orgs, ranging from creating
    scratch orgs and managing data to executing Apex code.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: SFDX 是 Salesforce 开发的一种方法，得到了 Salesforce 提供的一套开发工具的支持，它不仅促进了源驱动开发，还促进了团队协作，并持续协调测试和部署。它采用了以生态系统为中心的方法，确保与
    DevOps 领域内其他工具的无缝集成。Salesforce CLI 是 SFDX 的一个基本组件，作为命令行工具，它允许跨 Salesforce 组织脚本化执行多种任务，从创建临时组织和管理数据到执行
    Apex 代码。
- en: The real potential of SFDX and the Salesforce CLI unfolds when integrated with
    external CI/CD tools such as Jenkins and GitHub Actions. These tools, although
    powerful, lack an innate understanding of Salesforce’s metadata-driven and multi-tenant
    architecture. That’s precisely where SFDX and the CLI step in, bridging the gap
    between these external tools and the Salesforce-specific tasks.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: SFDX 和 Salesforce CLI 的真正潜力在于与外部 CI/CD 工具（如 Jenkins 和 GitHub Actions）集成时展现出来。尽管这些工具功能强大，但它们缺乏对
    Salesforce 元数据驱动和多租户架构的内在理解。这正是 SFDX 和 CLI 的优势所在，它们在这些外部工具与 Salesforce 特定任务之间架起了桥梁。
- en: Imagine a scenario where a developer pushes code to a GitHub repository. GitHub
    Actions could initiate a workflow, leveraging the Salesforce CLI to create a new
    scratch org, push the updated code, and execute Apex tests. Similarly, Jenkins
    can incorporate Salesforce CLI commands within its build steps, enabling it to
    handle tasks such as creating and managing scratch orgs or deploying metadata.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下这样一种场景：一个开发者将代码推送到 GitHub 仓库。GitHub Actions 可以启动一个工作流，利用 Salesforce CLI
    创建一个新的临时组织，推送更新后的代码并执行 Apex 测试。类似地，Jenkins 可以在其构建步骤中加入 Salesforce CLI 命令，使其能够处理诸如创建和管理临时组织或部署元数据等任务。
- en: Beyond triggering actions and facilitating workflows, SFDX and the Salesforce
    CLI also enforce best practices in Salesforce development. SFDX’s source-driven
    approach encourages developers to rely on version control systems as the source
    of truth. The Salesforce CLI, with its broad command range, promotes automation,
    thereby reducing errors and enhancing the quality of your Salesforce code base.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 除了触发动作和促进工作流外，SFDX 和 Salesforce CLI 还在 Salesforce 开发中强制执行最佳实践。SFDX 的源驱动方法鼓励开发人员将版本控制系统作为真相的来源。Salesforce
    CLI 拥有广泛的命令范围，促进了自动化，从而减少了错误并提高了 Salesforce 代码库的质量。
- en: Both SFDX and the Salesforce CLI are continuously updated by Salesforce. They
    remain tightly integrated with Salesforce’s own development, always staying aligned
    with the latest Salesforce features and improvements. Therefore, by incorporating
    these tools into your CI/CD pipeline, you are not just addressing today’s needs
    but are also poised to harness future advancements in Salesforce development.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: SFDX和Salesforce CLI由Salesforce持续更新。它们与Salesforce自身的开发保持紧密集成，始终与最新的Salesforce功能和改进保持一致。因此，将这些工具纳入CI/CD流水线，不仅满足了当下的需求，还为未来Salesforce开发的进步做好了准备。
- en: SFDX and the Salesforce CLI serve as invaluable tools in constructing an efficient
    and effective CI/CD pipeline for Salesforce. They provide the critical link between
    the Salesforce platform and external CI/CD tools such as Jenkins and GitHub Actions,
    enabling them to handle Salesforce-specific tasks. By capitalizing on these tools,
    you can build a robust, automated, and future-proof CI/CD pipeline, revolutionizing
    your Salesforce development process, reducing manual effort, minimizing errors,
    and accelerating delivery.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: SFDX和Salesforce CLI是构建高效、有效的Salesforce CI/CD流水线的重要工具。它们提供了Salesforce平台与外部CI/CD工具（如Jenkins和GitHub
    Actions）之间的关键连接，能够处理Salesforce特定的任务。通过充分利用这些工具，你可以构建一个强大、自动化并具有未来适应性的CI/CD流水线，彻底革新你的Salesforce开发流程，减少手动操作，最小化错误，加速交付。
- en: Practical use of the CI/CD pipeline
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI/CD流水线的实际应用
- en: Once an automated CI/CD pipeline is in place for Salesforce development, new
    disciplines and practices can emerge to take full advantage of its capabilities.
    The most immediate benefit is the real-time visibility that the pipeline dashboard
    provides into the health of the entire process. Build statuses, test results,
    deployment records, and other key indicators can be monitored to quickly identify
    pipeline failures and rapidly troubleshoot any issues before they become major
    problems.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦为Salesforce开发建立了自动化的CI/CD流水线，新的纪律和实践便会涌现，从而充分利用其能力。最直接的好处是流水线仪表板提供的实时可视化，能够清晰展示整个流程的健康状况。构建状态、测试结果、部署记录以及其他关键指标都可以进行监控，从而快速识别流水线故障，并在问题成为重大问题之前迅速进行故障排除。
- en: Increased visibility facilitates practices such as incorporating quality gates
    into the process. Required standards such as code coverage thresholds can be enforced,
    ensuring quality before releases. With CI, developers gain the confidence to merge
    code frequently into a shared mainline repository, promoting effective trunk-based
    development.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 增强的可视化有助于将质量门控等实践纳入流程中。例如，可以强制执行代码覆盖率等必需的标准，确保发布前的质量。通过CI，开发人员有信心频繁地将代码合并到共享的主干仓库中，从而促进有效的基于主干的开发。
- en: Another major advantage is how the pipeline tightens and shortens feedback loops.
    Automated testing and rapid build/deploy cycles mean developers get near-instant
    feedback on any changes. Issues can be identified and fixed immediately, before
    more work piles up.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个主要优势是流水线如何缩短并加紧反馈周期。自动化测试和快速构建/部署周期意味着开发人员可以在任何更改后几乎即时收到反馈。问题可以立即被发现并解决，避免了更多工作的堆积。
- en: Automation also reduces risk when releasing frequently. Advanced teams can implement
    automated rollback procedures to instantly reverse bad deployments directly from
    the pipeline. Of course, data from pipeline metrics can be analyzed to find opportunities
    for tuning – key indicators such as lead time, deployment frequency, and change
    failure rate reveal areas for continuous improvement.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化还降低了频繁发布时的风险。高级团队可以实现自动回滚程序，直接从流水线中即时逆转不良部署。当然，流水线指标的数据可以进行分析，寻找调整的机会——如交付时间、部署频率和变更失败率等关键指标能够揭示持续改进的领域。
- en: With the new visibility and automation the pipeline facilitates, developers
    are freed from tedious manual quality checks to focus their energy on writing
    great code. They can release faster with confidence, knowing automation is handling
    testing, quality enforcement, and promotion up the pipeline behind the scenes.
    This allows teams to fully leverage modern development practices that increase
    agility.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 借助流水线所提供的新可视化和自动化，开发人员不再需要进行繁琐的手动质量检查，而可以将精力集中在编写高质量的代码上。他们可以更加自信地加速发布，因为自动化在背后处理测试、质量执行和流水线推进。这使得团队能够充分利用现代开发实践，从而提高敏捷性。
- en: Summary
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we’ve explored a couple of solutions to implement a Salesforce
    CI/CD pipeline, using freely available tools. In looking at the setup for both
    GitHub Actions and Jenkins, we saw that the fundamental steps of the pipeline
    are the same, but with differences in the specific implementation.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了使用免费工具实现 Salesforce CI/CD 流水线的几种解决方案。在查看 GitHub Actions 和 Jenkins
    的设置时，我们发现流水线的基本步骤是相同的，但在具体实施上有所不同。
- en: We’ve also seen that these tools depend heavily on the Salesforce CLI tool and
    the SFDX approach to managing your metadata, to carry out the steps that make
    up the CI/CD pipeline. Of course, the use of SFDX is not mandatory – anything
    that leverages the Metadata API could be used instead, but it’s worth noting that
    building the necessary scripts to manage this entire process represents a significant
    development and maintenance effort by whoever is responsible for managing your
    DevOps toolchain. This can be mitigated by adopting DevOps solutions and platforms
    that are designed to work specifically with Salesforce only. We’ll cover some
    of the options on the market in later chapters.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到，这些工具在很大程度上依赖于 Salesforce CLI 工具和 SFDX 方法来管理元数据，以执行构成 CI/CD 流水线的步骤。当然，使用
    SFDX 并非强制要求——任何能够利用 Metadata API 的工具都可以替代，但值得注意的是，构建用于管理整个流程的必要脚本是一个相当大的开发和维护工作量，需要由负责管理
    DevOps 工具链的人来完成。通过采用专为 Salesforce 设计的 DevOps 解决方案和平台，可以减轻这一负担。我们将在后续章节中介绍市场上的一些选项。
- en: In the next chapter, we’ll continue to round out our overall DevOps implementation
    by looking at ticketing systems, which allow for better management of work items
    and not only help bring a clearer picture of progress on your development changes
    but also contribute to breaking those changes up into smaller units of work, which
    lends itself to the DevOps principle of releasing early and often.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续完善我们的整体 DevOps 实施，通过了解工单系统来实现，这些系统可以更好地管理工作项，不仅有助于清晰地呈现开发变更的进展，还能将这些变更拆分成更小的工作单元，从而有助于
    DevOps 原则中的早期发布和频繁发布。
