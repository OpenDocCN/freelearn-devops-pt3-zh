- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Exploring Packaging
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索打包
- en: There are many ways to deliver Salesforce changes between environments and still
    adhere to DevOps principles. One of the popular mechanisms is the use of Salesforce
    packages, which can be either managed, unmanaged, or unlocked packages.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以在不同环境之间传递 Salesforce 更改，同时遵循 DevOps 原则。使用 Salesforce 包是其中一种流行的机制，包可以是托管的、非托管的或解锁的包。
- en: 'In this chapter, we’ll look at these three types of Salesforce packages, their
    use cases, and considerations:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论这三种类型的 Salesforce 包，它们的使用场景以及相关注意事项：
- en: '**Unmanaged packages** – Used to share customizations or applications with
    other organizations or users without any built-in versioning or upgrade capabilities.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非托管包** – 用于与其他组织或用户共享自定义或应用程序，但没有内建的版本控制或升级功能。'
- en: '**Unlocked packages** – Designed for efficient application life cycle management,
    modular development, and versioning within a single organization. They are also
    a popular means of distributing open source solutions on the Salesforce platform.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解锁包** – 旨在实现高效的应用生命周期管理、模块化开发和单一组织中的版本控制。它们也是在 Salesforce 平台上分发开源解决方案的流行方式。'
- en: '**Managed packages** – Designed to distribute custom applications, extensions,
    or integrations built on the Salesforce platform to multiple organizations or
    customers, with protection of the code used to build them, versioning, and upgradability.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**托管包** – 旨在将基于 Salesforce 平台构建的自定义应用程序、扩展或集成分发给多个组织或客户，提供对构建代码的保护、版本控制和可升级性。'
- en: By the end of the chapter, you will have a clear idea of not only the differences
    between these different types of packages but also when to use them and how to
    build them in Salesforce.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时，您不仅会清楚了解这些不同类型包之间的区别，还能明白何时使用它们以及如何在 Salesforce 中构建它们。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For unmanaged, unlocked, and 2GP-managed packages, there shouldn’t be any additional
    requirements other than your Salesforce environment – ideally either a **Sandbox**
    or a **Developer** Edition.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非托管包、解锁包和 2GP 托管包，除了 Salesforce 环境外不应该有其他额外的要求——理想情况下是使用**沙盒**或**开发者**版。
- en: For 1GP-managed packages, you will need a separate packaging org when developing
    a managed package for distribution. A packaging org is a separate Salesforce org
    used to develop, package, and distribute managed packages.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 1GP 托管包，您在开发要分发的托管包时，需要一个独立的打包组织。打包组织是一个独立的 Salesforce 组织，用于开发、打包和分发托管包。
- en: For Salesforce ISV partners, this would typically be a **Partner Developer Edition**
    org, which has additional features and higher limits compared to a regular Developer
    Edition org. These are for use by Salesforce registered partners and aren’t for
    general everyday use by most Salesforce customers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Salesforce ISV 合作伙伴来说，通常会使用**合作伙伴开发者版**组织，它相较于普通开发者版组织，具有更多功能和更高的限制。这些包适用于
    Salesforce 注册合作伙伴，而不是大多数 Salesforce 客户的日常使用。
- en: An example project for testing package commands is provided in the `Chapter6`
    folder of the GitHub repository associated with this book.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 用于测试包命令的示例项目可在与本书关联的 GitHub 仓库的 `Chapter6` 文件夹中找到。
- en: Unmanaged packages
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非托管包
- en: Unmanaged packages form a part of Salesforce’s original implementation of packaging,
    and as such, form part of what is now known as **first-generation packaging**
    (**1GP**). They are used to bundle and share customizations, applications, or
    templates between different organizations or users. Unmanaged packages provide
    a way to distribute components, allowing developers to modify or build upon them
    as needed after installation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 非托管包是 Salesforce 最初实现打包的一部分，因此也属于现在所称的**第一代打包**（**1GP**）。它们用于在不同组织或用户之间捆绑和共享自定义内容、应用程序或模板。非托管包提供了一种分发组件的方式，允许开发者在安装后根据需要进行修改或扩展。
- en: Since unmanaged packages are part of 1GP, they follow a development and packaging
    process that is seldom source-driven. This means that the components within the
    package are typically selected from an org rather than a branch in a version control
    system. The lack of source-driven development with unmanaged packages makes it
    difficult to establish a streamlined and efficient DevOps process that involves
    version control, continuous integration, and continuous deployment.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 由于未管理包是1GP的一部分，它们遵循的开发和打包流程很少是由源代码驱动的。这意味着包内的组件通常是从一个组织中选择的，而不是从版本控制系统中的分支选择的。未管理包缺乏源代码驱动的开发，这使得涉及版本控制、持续集成和持续部署的精简高效的DevOps流程变得困难。
- en: Another limitation of this approach is that unmanaged packages do not support
    versioning of the packages themselves or in-place upgrades. Any updates or changes
    to the components within an unmanaged package must be done manually in the target
    org after installation. This can lead to challenges in managing and maintaining
    customizations over time, especially in larger and more complex Salesforce implementations.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的另一个限制是未管理包不支持包本身的版本控制或就地升级。对未管理包内组件的任何更新或更改都必须在安装后手动在目标组织中进行。这可能导致在长期管理和维护自定义功能时出现挑战，特别是在更大和更复杂的Salesforce实施中。
- en: The absence of a package-specific namespace in unmanaged packages also means
    that their components merge into the target org’s metadata without any separation.
    This can lead to naming conflicts and potential issues during deployment, making
    it more difficult to manage dependencies and maintain a clean metadata structure
    in the target org. If an unmanaged package is installed into a namespaced org,
    the components will inherit the org’s namespace.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在未管理包中缺少特定于包的命名空间也意味着其组件会与目标组织的元数据合并，没有任何隔离。这可能导致命名冲突和部署时的潜在问题，使得管理依赖关系和维护目标组织中清晰的元数据结构变得更加困难。如果一个未管理包被安装到一个有命名空间的组织中，组件将继承该组织的命名空间。
- en: As you can see, there are several limitations to the original 1GP approach and
    this is why Salesforce replaced it with **second-generation packaging** (**2GP**),
    which is what is now recommended.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，原始的1GP方法存在多个限制，这就是Salesforce将其替换为**第二代打包**（**2GP**）的原因，而这也是当前推荐的方法。
- en: As we’ve discussed, unmanaged packages are not ideally suited for use as part
    of your DevOps strategy, so let’s look at unlocked packages, which were introduced
    with Salesforce’s 2GP implementation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所讨论的，未管理包并不完全适合用作您的DevOps策略的一部分，因此让我们来看看解锁包，它是在Salesforce的2GP实施中引入的。
- en: Unlocked packages
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解锁包
- en: Salesforce unlocked packages are a modern, flexible, and modular packaging solution
    that allows developers and administrators to bundle, deploy, and manage customizations
    and applications built on the Salesforce platform. They are part of Salesforce’s
    source-driven development approach, which emphasizes version control systems and
    continuous integration pipelines for efficient development and deployment processes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce解锁包是一种现代、灵活且模块化的打包解决方案，允许开发人员和管理员打包、部署和管理在Salesforce平台上构建的自定义功能和应用程序。它们是Salesforce源代码驱动开发方法的一部分，强调使用版本控制系统和持续集成管道来实现高效的开发和部署过程。
- en: Unlocked packages address the challenges of managing and deploying customizations
    in large-scale and complex Salesforce implementations. By breaking down applications
    and customizations into modular units, they enable teams to manage and distribute
    these components more effectively. This modular approach promotes better collaboration,
    easier version control, and a streamlined development process. Unlocked packages
    are aimed at both developers and administrators who want to leverage best practices
    in application life cycle management, streamline their deployment processes, and
    reduce the complexity associated with metadata deployments.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 解锁包解决了在大规模和复杂的Salesforce实施中管理和部署自定义功能的挑战。通过将应用程序和自定义功能拆分为模块化单元，它们使团队能够更有效地管理和分发这些组件。这种模块化的方法促进了更好的协作、更容易的版本控制和精简的开发过程。解锁包面向那些希望利用最佳实践进行应用程序生命周期管理、精简部署过程并减少与元数据部署相关复杂性的开发人员和管理员。
- en: Unlike managed packages, which are primarily used for distributing applications
    to multiple companies or customers, unlocked packages are designed for use within
    a single company. They are especially useful for enterprises with large Salesforce
    teams that require a structured and maintainable way to manage and deploy customizations
    across various environments, such as development, testing, and production. By
    providing a scalable and modular approach to Salesforce development, unlocked
    packages help organizations optimize their Salesforce implementations and drive
    better business outcomes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与主要用于将应用程序分发到多个公司或客户的托管包不同，解锁包是为单一公司内部使用而设计的。它们尤其适用于拥有大规模 Salesforce 团队的企业，这些团队需要一种结构化且可维护的方式来管理和部署跨不同环境（如开发、测试和生产）的定制功能。通过提供一种可扩展且模块化的方法来进行
    Salesforce 开发，解锁包帮助组织优化其 Salesforce 实施并推动更好的业务成果。
- en: 'Since unlocked packages are a source-driven approach to packaging, there is
    a greater reliance on the use of the command line to create them. You will need
    to be using the **Salesforce DX** (**SFDX**) approach to managing your metadata,
    and thus have a Dev Hub enabled. To do this, follow these steps:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于解锁包是一种基于源代码的方法进行打包，因此在创建它们时更依赖于使用命令行。你需要使用**Salesforce DX**（**SFDX**）方法来管理你的元数据，因此必须启用
    Dev Hub。为此，请按照以下步骤操作：
- en: Log in to your Salesforce org.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到你的 Salesforce 组织。
- en: Click on the gear icon in the top-right corner and select **Setup**.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角的齿轮图标并选择**设置**。
- en: In the `Dev Hub` and select it.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Dev Hub`中选择并点击它。
- en: Toggle the **Enable Dev Hub** switch to **On** and enable **Unlocked Packages**
    on the same screen.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**启用 Dev Hub**切换为**开启**，并在同一页面启用**解锁包**。
- en: 'Once this is enabled, you can then work with your Dev Hub org from the command
    line – whether that’s a standalone one or the embedded terminal in VS Code. To
    create a new unlocked package, run the following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 启用此功能后，你就可以通过命令行与 Dev Hub 组织进行交互，无论是独立的还是 VS Code 中嵌入的终端。要创建新的解锁包，请运行以下命令：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Replace `MyPackageName` with the name of your package and `MyDevHub` with the
    alias you used when authenticating with your Dev Hub org.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 将`MyPackageName`替换为你的包名，将`MyDevHub`替换为你在 Dev Hub 组织认证时使用的别名。
- en: 'At this point, it is assumed that you have a local project and that you have
    committed your code to Git. While source control of your changes is not essential
    for creating the package, as part of a DevOps process, this would be a good time
    to ensure your Git repository is up to date before creating your new package.
    With your updated metadata components in your local project, you can create a
    new package with the following command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，假设你已经有一个本地项目，并且已将代码提交到 Git。虽然源代码控制在创建包时不是必需的，但作为 DevOps 流程的一部分，现在正是确保 Git
    仓库是最新的好时机，然后再创建新包。在本地项目中更新了元数据组件后，你可以使用以下命令创建新包：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Replace `MyPackageName` with the name of your package, `MyPassword` with a password
    for the package (optional), and `MyDevHub` with the alias you used when authenticating
    with your Dev Hub org.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将`MyPackageName`替换为你的包名，`MyPassword`替换为包的密码（可选），将`MyDevHub`替换为你在 Dev Hub 组织认证时使用的别名。
- en: 'After creating a new package version, the added metadata components will be
    included in the unlocked package. You can install this package in your target
    Salesforce org with the following command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新包版本后，添加的元数据组件将包含在解锁包中。你可以使用以下命令在目标 Salesforce 组织中安装此包：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Again, you will need to replace `MyPackageName@1.0.0` with the package name
    and version, and `MyTargetOrg` with the username or alias of your target org.
    It is worth noting that if a password was set in the preceding version creation,
    it will have to be supplied here with the `-k` flag for the installation to work.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，你需要将`MyPackageName@1.0.0`替换为包名和版本，将`MyTargetOrg`替换为目标组织的用户名或别名。值得注意的是，如果在前一个版本创建时设置了密码，则必须在这里使用`-k`标志提供密码才能完成安装。
- en: Since unlocked packages have the foundation of a source-driven development approach
    rather than an org-driven approach, it is much better aligned to the use of DevOps
    throughout your entire process. By making use of source control and breaking down
    larger code bases into modular groups of functionality that could potentially
    be in their own separate Git repositories, you can be much more flexible in your
    approach to delivery using unlocked packages.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于解锁包采用的是源驱动开发方法，而非基于组织的开发方法，因此它与整个过程中的 DevOps 使用更加契合。通过利用源代码控制，并将较大的代码库拆分成可以独立存在于不同
    Git 仓库中的功能模块，你可以在使用解锁包进行交付时，更加灵活地调整方法。
- en: The one potential catch in this degree of modularization, however, is that there
    are sometimes situations in which there are pieces of metadata that overlap multiple
    packages. For example, if you have two distinct pieces of functionality that both
    make use of or depend upon the `Opportunity` object, you could potentially end
    up with a situation where there is a circular dependency on changes across packages.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种模块化的一个潜在问题是，有时会出现某些元数据同时属于多个包的情况。例如，如果你有两个独立的功能模块，它们都使用或依赖于 `Opportunity`
    对象，你可能会遇到一个情况，即跨包的更改之间存在循环依赖关系。
- en: A workaround to this could be to have a centralized `core` package that the
    other packages all reference. During the development of new functionality outside
    of this package, you would ensure you have installed the latest version of this
    core package in your development environment.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的一种方法是拥有一个集中式的 `core` 包，其他包都引用它。在开发此包以外的新功能时，你需要确保在开发环境中安装了该核心包的最新版本。
- en: A better approach is to make good use of namespaces in your unlocked package
    development. Namespaces should be an integral part of creating Salesforce unlocked
    packages. They guarantee uniqueness – if someone already has an Apex class named
    `MyClass`, your `MyClass` won’t conflict with it, which avoids tricky naming clashes.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的方法是，在解锁包开发中充分利用命名空间。命名空间应该是创建 Salesforce 解锁包的核心部分。它们确保唯一性——如果某人已经有一个名为 `MyClass`
    的 Apex 类，你的 `MyClass` 不会与之冲突，从而避免了棘手的命名冲突。
- en: Namespaces also enable effective versioning of packages. Salesforce uses the
    namespace to manage multiple versions of a package, knowing which are compatible
    and how to handle upgrades or rollbacks.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间还可以有效地进行包的版本管理。Salesforce 使用命名空间来管理包的多个版本，知道哪些版本是兼容的，以及如何处理升级或回滚。
- en: Additionally, namespaces provide another means to provide clear separation of
    package code. It becomes evident which components belong to a particular package,
    isolating its code from the rest of the org’s metadata. This aids in debugging
    and maintenance.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，命名空间提供了另一种清晰分隔包代码的方式。它可以明确哪些组件属于特定包，将其代码与组织的其他元数据隔离开来。这有助于调试和维护。
- en: At the code level, rather than at the point of packaging, there are some additional
    benefits to be found. Namespaces remove ambiguity when third-party systems integrate
    with your package’s APIs and components. References are clear even with dynamic
    SOQL or REST calls, and namespaces allow control over which components are globally
    accessible versus private. Boundaries can be set on what’s exposed for general
    use.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码层面，而非在打包时，命名空间还带来了一些额外的好处。当第三方系统与你的包的 API 和组件进行集成时，命名空间消除了歧义。即使是在动态 SOQL
    或 REST 调用中，引用也变得清晰，并且命名空间允许控制哪些组件是全局可访问的，哪些是私有的。可以设定公开使用的边界。
- en: When creating a package, the first step is registering a unique namespace identifier.
    This ties all components to that namespace. Next, the namespace is included in
    the package metadata when building a new version – during installation, Salesforce
    leverages the namespace to separate incoming components, avoiding conflicts. In
    code and configuration, components can be referenced with their namespace prefix,
    such as `namespace__MyClass`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建包时，第一步是注册一个唯一的命名空间标识符。这将所有组件与该命名空间绑定。接下来，在构建新版本时，命名空间会包含在包的元数据中——在安装过程中，Salesforce
    使用命名空间来分隔传入的组件，避免冲突。在代码和配置中，组件可以通过命名空间前缀来引用，例如 `namespace__MyClass`。
- en: However, namespaces also come with some downsides. They lock you into a permanent
    identifier that can’t easily change later. Complexity gets introduced by referencing
    namespaced components. Migrating existing `un-namespaced` code can require cumbersome
    adjustments. The availability of intuitive namespaces may be limited. Debugging
    across multiple namespaced packages can become complicated.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，命名空间也有一些缺点。它们将您锁定到一个永久的标识符，这个标识符之后无法轻松更改。引用命名空间组件会增加复杂性。迁移现有的`未命名空间`代码可能需要繁琐的调整。直观命名空间的可用性可能有限。跨多个命名空间包进行调试可能变得复杂。
- en: Overall, the benefits outweigh the limitations, especially for manageability
    and version control. But it’s important to be aware of the cons and plan your
    naming and development accordingly.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，优点大于局限性，特别是在可管理性和版本控制方面。但重要的是要意识到这些缺点，并根据这些缺点来规划您的命名和开发。
- en: Thankfully, Salesforce also recognizes this challenge and provides another package
    type to cover this eventuality. Let’s explore these org-dependent packages a little
    further.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Salesforce也认识到这个挑战，并提供了另一种包类型来应对这种情况。让我们进一步探讨这些依赖于组织的包。
- en: Org-dependent packages
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖于组织的包
- en: The other type of unlocked package that Salesforce provides, org-dependent packages,
    tackles the problem of dependencies by deferring compilation and validation of
    your changes until installation time. This means that these dependencies don’t
    necessarily need to be in your development org or in your source control for you
    to build the package – you can depend on metadata that exists in the target org.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce提供的另一种解锁包类型——依赖于组织的包，通过推迟在安装时进行更改的编译和验证，解决了依赖问题。这意味着这些依赖项不一定需要存在于您的开发组织中或您的源控制中，您可以依赖目标组织中存在的元数据。
- en: This type of unlocked package is ideal for Salesforce orgs that are large, complex,
    and have been in use for a long time and thus have accumulated a lot of changes.
    Unpicking these changes into separate modules is lengthy, challenging work, but
    by having a package type that is able to depend on unpackaged metadata in the
    target org, you can defer (or even avoid) the need to refactor your entire org.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的解锁包非常适合大型、复杂并且已经使用了很长时间的Salesforce组织，因此积累了大量的更改。将这些更改拆解为独立模块是一项漫长且具有挑战性的工作，但通过拥有能够依赖目标组织中未打包元数据的包类型，您可以推迟（甚至避免）重新构建整个组织的需求。
- en: 'Creating an org-dependent package is incredibly simple, too – the command is
    the same as that for creating an unlocked package, but with the `--orgdependent`
    flag specified, such as in the following example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个依赖于组织的包也是非常简单的——命令与创建解锁包时相同，只需指定`--orgdependent`标志，如下例所示：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You might be tempted to make all your unlocked packages org-dependent to gain
    the advantage of just-in-time validation, but there are some key drawbacks to
    org-dependent packages that ultimately mean you should always assess the correct
    package type for your use case:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会想把所有的解锁包都做成依赖于组织的包，以便获得即时验证的优势，但依赖于组织的包也有一些关键的缺点，最终意味着您应该始终评估适合您用例的正确包类型：
- en: '| **Feature** | **Unlocked packages** | **Org-dependent packages** |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| **特性** | **解锁包** | **依赖于组织的包** |'
- en: '| --- | --- | --- |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| **Installation flexibility** | You can install these packages in any org,
    regardless of the metadata they contain. | You can only install these packages
    in orgs that have the specific metadata that the package depends on. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| **安装灵活性** | 您可以在任何组织中安装这些包，无论它们包含什么元数据。 | 您只能在包含包依赖的特定元数据的组织中安装这些包。 |'
- en: '| **Dependency** **validation time** | The package dependencies are checked
    when you create the package version. | The package dependencies are checked when
    you install the package in an org. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| **依赖** **验证时间** | 在创建包版本时，包的依赖项会被检查。 | 在安装包到组织时，包的依赖项会被检查。 |'
- en: '| **Dependency on** **other packages** | These packages can depend on other
    packages. | These packages cannot depend on other packages. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| **依赖于** **其他包** | 这些包可以依赖于其他包。 | 这些包不能依赖于其他包。 |'
- en: '| **Dependency resolution** | You need to resolve all the dependencies before
    you can create the package. | You do not need to resolve any dependencies before
    you can create the package. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| **依赖解析** | 在创建包之前，您需要解析所有的依赖关系。 | 在创建包之前，您无需解析任何依赖关系。 |'
- en: '| **Supported** **metadata types** | Refer to the unlocked packaging channel
    of the Metadata Coverage report for the list of supported metadata types. | Refer
    to the unlocked packaging channel of the Metadata Coverage report for the list
    of supported metadata types. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| **支持的** **元数据类型** | 请参阅“元数据覆盖报告”的解锁打包通道，查看支持的元数据类型列表。 | 请参阅“元数据覆盖报告”的解锁打包通道，查看支持的元数据类型列表。
    |'
- en: '| **Development and** **test environment** | Use scratch orgs to develop and
    test your unlocked packages. | Use a sandbox that has the dependent metadata.
    You can also enable Source Tracking in sandboxes to develop your org-dependent
    unlocked package. Test the package in a sandbox org before installing it in your
    production org. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| **开发和** **测试环境** | 使用 Scratch Org 来开发和测试你的解锁包。 | 使用包含依赖元数据的沙箱。你也可以在沙箱中启用源跟踪，以便开发你的组织依赖的解锁包。在将包安装到生产环境之前，在沙箱组织中测试包。
    |'
- en: '| **Code** **coverage requirement** | You must have at least 75% code coverage
    for the Apex code in your package before you can promote and release it. | There
    is no code coverage calculation, but you should test your Apex code well. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| **代码** **覆盖要求** | 在你可以推广并发布包之前，必须确保你的 Apex 代码的代码覆盖率至少达到 75%。 | 这里没有代码覆盖率的计算要求，但你应该充分测试你的
    Apex 代码。 |'
- en: Table 6.1 – A comparison of unlocked and org-dependent packages
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6.1 – 解锁包和组织依赖包的比较
- en: In the next section, we’re going to look at the final type of packaging in Salesforce,
    managed packages.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论 Salesforce 中的最终打包类型：托管包。
- en: Managed packages
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 托管包
- en: Salesforce managed packages are developed, packaged, and distributed by Salesforce
    partners – also known as **independent software vendors** (**ISVs**). These packages
    provide a way to extend the functionality of Salesforce by adding new features,
    processes, or applications without having to build them from scratch. Managed
    packages are distributed through the Salesforce AppExchange, which is an online
    marketplace for Salesforce applications, components, and services. AppExchange
    allows developers and partners to publish their managed packages for Salesforce
    customers to discover, evaluate, and install them directly into their Salesforce
    environments.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce 托管包由 Salesforce 合作伙伴（也称为**独立软件供应商**（**ISV**））开发、打包并分发。这些包提供了一种扩展
    Salesforce 功能的方式，通过添加新功能、流程或应用，而无需从头开始构建。托管包通过 Salesforce AppExchange 分发，AppExchange
    是一个在线市场，提供 Salesforce 应用、组件和服务。AppExchange 允许开发者和合作伙伴发布他们的托管包，供 Salesforce 客户发现、评估并直接安装到他们的
    Salesforce 环境中。
- en: Managed packages often can be customized to meet specific business needs while
    maintaining the core functionality provided by the package, but the level of customization
    possible will vary depending on the metadata contained within the package. The
    Salesforce DX Developer Guide has a section on what can and can’t be changed in
    managed packages and can be found at [https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/packaging_packageable_components.htm](https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/packaging_packageable_components.htm).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 托管包通常可以根据特定的业务需求进行定制，同时保持包提供的核心功能，但可定制的程度会根据包内包含的元数据有所不同。Salesforce DX 开发者指南中有一节内容，讲解了托管包中可以或不能更改的部分，可以在[https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/packaging_packageable_components.htm](https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/packaging_packageable_components.htm)找到。
- en: The package provider is responsible for maintaining and upgrading the package,
    ensuring it stays compatible with the latest Salesforce releases and industry
    standards. This reduces the burden on the organization using the package, especially
    if it is using the package as installed with no further customizations or changes
    to the metadata in the package.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 包提供者负责维护和升级包，确保其与最新的 Salesforce 版本和行业标准兼容。这减轻了使用该包的组织的负担，特别是当该组织使用的是安装包且没有进一步定制或更改包内的元数据时。
- en: Salesforce stands out from other development platforms such as Java or C# due
    to its strong emphasis on backward compatibility and API stability for developers.
    When you build applications on top of the Salesforce platform, you can have confidence
    that the core APIs you rely on will not suddenly be deprecated or altered unexpectedly.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce 与 Java 或 C# 等其他开发平台的最大不同在于，它对开发者的向后兼容性和 API 稳定性有着强烈的强调。当你在 Salesforce
    平台上构建应用时，你可以放心，依赖的核心 API 不会突然被弃用或意外更改。
- en: With languages such as Java or C#, core libraries or methods can be deprecated
    with just a notification that they will be removed in an upcoming release. This
    forces you, as a developer, to continually refactor your code to stay current.
    But Salesforce takes a very different approach to managing upgrades and keeping
    customers happy.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像 Java 或 C# 这样的语言，核心库或方法可以通过通知的方式被弃用，提醒它们将在未来的版本中移除。这迫使你作为开发者，持续重构代码以保持更新。但
    Salesforce 采取了非常不同的方式来管理升级，并确保客户满意。
- en: Once an Apex API is released as part of a managed package on Salesforce, its
    method signature is locked in place. The API functionality may evolve over time,
    even to the point of throwing new exceptions, but the original method and signature
    will remain intact. This prevents the common problem developers face of having
    to hastily refactor their own customizations just to install an upgrade to a dependent
    package.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦某个 Apex API 作为托管包的一部分在 Salesforce 上发布，其方法签名将被锁定。API 功能可能会随着时间的推移发生变化，甚至可能会抛出新的异常，但原始的方法和签名将保持不变。这可以防止开发者在安装依赖包的升级时，因而匆忙重构自己的自定义代码。
- en: Additionally, managed packages undergo a thorough security review process by
    Salesforce to ensure they meet the necessary standards for performance, data protection,
    and privacy. This provides an additional layer of trust for organizations using
    these packages.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，托管包还需经过 Salesforce 的严格安全审查，以确保它们符合性能、数据保护和隐私等必要标准。这为使用这些包的组织提供了额外的信任保障。
- en: Typically, the life cycle of managed packages differs only in the approval and
    distribution stages. Managed packages are developed in scratch orgs and distributed
    through the Salesforce AppExchange. Participating in this marketplace requires
    you to enroll with Salesforce as an ISV partner with a valid business case for
    your package. Once approved, you can then move on to producing your package.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，托管包的生命周期仅在审批和分发阶段有所不同。托管包是在 scratch orgs 中开发，并通过 Salesforce AppExchange 分发。参与该市场需要你作为
    ISV 合作伙伴在 Salesforce 注册，并为你的包提供有效的商业案例。一旦获得批准，你就可以开始制作你的包。
- en: 'Here’s how the distribution process typically works:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是分发过程的典型流程：
- en: Development
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发
- en: Testing
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试
- en: Packaging
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包
- en: Security review
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安全审查
- en: AppExchange listing
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AppExchange 列表
- en: Installation and configuration
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装和配置
- en: Ongoing support and upgrades
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续支持和升级
- en: Development
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发
- en: The package creator develops the managed package using Salesforce tools such
    as Apex, Visualforce, Lightning Components, and more, ensuring compatibility with
    Salesforce.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 包创建者使用 Salesforce 工具（如 Apex、Visualforce、Lightning 组件等）开发托管包，确保与 Salesforce 的兼容性。
- en: Testing
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试
- en: Like any other piece of Salesforce development, the metadata and code for the
    package should be fully tested, not just to ensure that it is functionally complete
    but also to meet the stringent expectations for security that ISV partners should
    adhere to.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Salesforce 的任何其他开发工作一样，包的元数据和代码应该经过充分的测试，不仅要确保其功能完整，还要符合 ISV 合作伙伴应遵守的严格安全要求。
- en: Salesforce provides several tools to help guide developers through this process,
    such as Salesforce Code Analyzer. This tool makes use of the Salesforce Graph
    Engine to do a deep walk through the code, following dependencies and looking
    for common security issues – particularly those around record access – using a
    technique called **data flow analysis** (**DFA**). DFA is a method that helps
    you to understand complicated parts of computer code better. It looks at the whole
    code all at once to figure out what’s going on in it. It does this by breaking
    down the code’s steps, including things such as evaluating conditions, creating
    classes, and calling methods and static calls. It also tries to guess the value
    of the variables and fields at each step along the way. This all helps to give
    a better picture of how the code works.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce 提供了多个工具，帮助开发者引导完成这一过程，例如 Salesforce 代码分析器。该工具利用 Salesforce 图形引擎深入分析代码，跟踪依赖关系，查找常见的安全问题，特别是记录访问相关的问题，采用一种叫做**数据流分析**（**DFA**）的技术。DFA
    是一种帮助你更好理解复杂计算机代码的方法。它通过一次性查看整个代码，弄清楚代码的工作原理。它通过分解代码的步骤来实现这一点，包括评估条件、创建类、调用方法和静态调用等内容。它还会尝试在每一步中猜测变量和字段的值。这一切都有助于更好地了解代码的工作方式。
- en: The analyzer also makes use of other open source analysis engines, such as PMD
    and ESLint, to round out the coverage of these checks.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 分析器还利用其他开源分析引擎，如 PMD 和 ESLint，来完善这些检查的覆盖范围。
- en: Packaging
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打包。
- en: 'Historically, managed packages followed a lengthy process along the lines of
    1GP, as discussed earlier, which involved the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，受管包遵循一个较长的过程，类似于之前讨论的 1GP，这包括以下内容：
- en: Selecting the components to be included, such as Apex classes, Visualforce pages,
    Lightning Components, custom objects, and more
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择要包括的组件，如 Apex 类、Visualforce 页面、Lightning 组件、自定义对象等。
- en: Setting the package properties, such as the package name, namespace, version
    number, and description
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置包的属性，例如包名、命名空间、版本号和描述。
- en: Defining dependencies on other packages or Salesforce features, if any
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有的话，定义对其他包或 Salesforce 特性的依赖关系。
- en: Designating the package as managed to ensure versioning, upgradeability, and
    intellectual property protection
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将包指定为受管包，以确保版本管理、可升级性和知识产权保护。
- en: The package can then be uploaded to the Salesforce environment, generating an
    installation URL for distribution.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以将该包上传到 Salesforce 环境中，生成安装 URL 以供分发。
- en: With the advent of 2GP, this process has become much more simplified. First,
    ensure that all components required for your package are in your project directory
    (typically in the `force-app` folder). This project should be linked to a corresponding
    scratch org and the required namespace should be specified in your `sfdx-project.json`
    file.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 2GP 的出现，这一过程变得更加简化。首先，确保你的包所需的所有组件都在项目目录中（通常位于 `force-app` 文件夹内）。该项目应与相应的
    Scratch Org 相关联，并且在 `sfdx-project.json` 文件中指定所需的命名空间。
- en: 'The process for creating the actual package is more straightforward than the
    old 1GP approach, differing from unlocked packages by one simple command-line
    parameter, `-t Managed`, as shown in the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 创建实际包的过程比旧的 1GP 方法更直接，与解锁包的区别仅在于一个简单的命令行参数，`-t Managed`，如下所示：
- en: '[PRE4]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Security review
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全审查。
- en: 'Before a managed package can be listed on the AppExchange, it must undergo
    a security review process. This process involves the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在受管包能够在 AppExchange 上列出之前，它必须经过安全审查过程。该过程包括以下内容：
- en: A comprehensive assessment of the package’s code and components to identify
    potential security vulnerabilities, such as injection attacks, insecure storage
    of sensitive data, and improper access controls
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对包的代码和组件进行全面评估，以识别潜在的安全漏洞，如注入攻击、敏感数据的非安全存储和不当的访问控制。
- en: Ensuring that the package adheres to Salesforce’s security guidelines, best
    practices, and compliance requirements
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保包符合 Salesforce 的安全指南、最佳实践和合规要求。
- en: Submitting a security review request to Salesforce, along with relevant documentation
    and test cases
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 Salesforce 提交安全审查请求，并提供相关文档和测试用例。
- en: Addressing any security issues identified by Salesforce during the review process
    and resubmitting the package for approval
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决 Salesforce 在审查过程中识别的任何安全问题，并重新提交包以供审批。
- en: Once the package passes the security review, it is granted the **Passed Security
    Review** status, signaling to customers that it meets Salesforce’s security standards.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦包通过安全审查，它将获得**通过安全审查**的状态，向客户表明它符合 Salesforce 的安全标准。
- en: AppExchange listing
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AppExchange 列表。
- en: 'After passing the security review, the package can be listed on the Salesforce
    AppExchange. Listing the package involves the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 安全审查通过后，该包可以在 Salesforce AppExchange 上列出。列出包的过程包括以下步骤：
- en: Creating an AppExchange listing with essential information about the package,
    such as its name, description, features, pricing, and support details
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个包含包的基本信息的 AppExchange 列表，如名称、描述、功能、定价和支持详情。
- en: Adding screenshots, videos, or other media that showcase the package’s functionality
    and benefits
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加屏幕截图、视频或其他媒体，展示包的功能和优势。
- en: Associating the listing with the managed package using the installation URL
    generated during the packaging process
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用在打包过程中生成的安装 URL，将该列表与受管包关联起来。
- en: Submitting the listing for approval by Salesforce, which will review it for
    quality, branding, and content guidelines
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 Salesforce 提交列表进行审批，Salesforce 将审查其质量、品牌和内容指南。
- en: Once the listing is approved, it becomes publicly available on the AppExchange,
    allowing customers to discover and evaluate the package.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦列表获得批准，它将在 AppExchange 上公开发布，允许客户发现并评估该包。
- en: Installation and configuration
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装与配置
- en: 'Salesforce customers can find, evaluate, and install managed packages from
    the AppExchange by following these steps:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce 客户可以通过以下步骤在 AppExchange 中查找、评估并安装托管包：
- en: Browsing the AppExchange to discover packages that address their specific needs
    using search, filters, and categories
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览 AppExchange，使用搜索、筛选器和分类来发现满足特定需求的包
- en: Evaluating the package by reviewing its description, features, pricing, customer
    reviews, and any available demos or trials
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过查看包的描述、功能、定价、客户评价以及任何可用的演示或试用来评估该包
- en: Installing the package by clicking the **Get It Now** button on the AppExchange
    listing, which initiates the installation process in the customer’s Salesforce
    environment
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过点击 AppExchange 列表中的 **立即获取** 按钮来安装包，启动客户 Salesforce 环境中的安装过程
- en: Granting access and setting up security settings for the package during installation,
    ensuring it aligns with the organization’s security policies
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在安装过程中授予访问权限并设置包的安全设置，确保其与组织的安全政策一致
- en: Configuring the package post-installation by customizing settings, adjusting
    layouts, or setting up any required integrations
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装后通过定制设置、调整布局或设置任何必需的集成来配置包
- en: Once installed and configured, the managed package becomes an integral part
    of the customer’s Salesforce environment, extending the platform’s functionality
    to address their specific needs and requirements.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装并配置完成，托管包就会成为客户 Salesforce 环境的一个重要组成部分，扩展平台的功能以满足他们的特定需求和要求。
- en: Ongoing support and upgrades
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续支持和升级
- en: 'After the package is installed and configured, the package provider is responsible
    for offering ongoing support and updates. This ensures that the package remains
    compatible with the latest Salesforce releases, industry standards, and customer
    expectations. The ongoing support and upgrade process typically involves the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 安装并配置完包后，包提供商负责提供持续的支持和更新。这确保了该包与最新的 Salesforce 版本、行业标准和客户期望保持兼容。持续的支持和升级过程通常包括以下内容：
- en: Monitoring and addressing customer feedback, questions, and issues through support
    channels such as email, phone, or online forums.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过支持渠道（如电子邮件、电话或在线论坛）监控并处理客户反馈、问题和疑问。
- en: Regularly releasing updates to the package to fix bugs, enhance features, and
    add new functionality. These updates are created as new package versions that
    customers can choose to install at their convenience.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期发布包更新，以修复 bug、增强功能并添加新功能。这些更新作为新包版本发布，客户可以根据自己的需要选择安装。
- en: Ensuring compatibility with the latest Salesforce releases, making any necessary
    adjustments to maintain seamless integration with the platform.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保与最新的 Salesforce 版本兼容，进行必要的调整以保持与平台的无缝集成。
- en: Staying up to date with industry trends, customer needs, and technology advancements
    to ensure the package remains relevant and valuable to customers.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟进行业趋势、客户需求和技术进展，确保包对客户仍然具有相关性和价值。
- en: Informing customers about important updates, new features, and best practices
    through communication channels such as newsletters, webinars, or in-app notifications.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过通讯渠道（如新闻通讯、网络研讨会或应用内通知）向客户告知重要更新、新功能和最佳实践。
- en: The ongoing support and upgrades provided by the package provider contribute
    to the package’s long-term success, customer satisfaction, and overall value.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 包提供商提供的持续支持和升级有助于包的长期成功、客户满意度和整体价值。
- en: Packaging models’ pros and cons
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打包模型的优缺点
- en: Packaging serves as a distribution method for development updates in a broader
    DevOps process, aligning with source-driven software development principles. As
    various package types offer distinct use cases and strengths, selecting the most
    suitable delivery model is crucial to optimizing your workflow within the DevOps
    life cycle.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 打包作为 DevOps 过程中开发更新的分发方式，符合源驱动的软件开发原则。由于不同类型的包提供了不同的使用场景和优势，选择最合适的交付模型对于优化 DevOps
    生命周期中的工作流程至关重要。
- en: 'Let’s remind ourselves of the differences:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下差异：
- en: '| **Package type** | **Pros** | **Cons** | **Primary** **use cases** |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| **包类型** | **优点** | **缺点** | **主要用途** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| **Unmanaged** | Easy to customize | No version control | Sharing code and
    configurations for learning purposes |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| **非托管** | 易于定制 | 无版本控制 | 用于学习目的的代码和配置共享 |'
- en: '|  | Allows for code editing | No automatic upgrades | Sharing sample solutions
    |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '|  | 允许进行代码编辑 | 无自动升级 | 共享示例解决方案 |'
- en: '|  | No namespace requirements | Security concerns due to editable code | Collaborative
    development |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '|  | 无命名空间要求 | 由于可编辑代码存在安全隐患 | 协作开发 |'
- en: '|  |  | No support for managed package features | Can be used by Professional
    Services teams where there’s a common customization that many customers require,
    but which itself may need the odd tweak for each customer |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '|  |  | 不支持托管包功能 | 可供专业服务团队使用，其中有一些常见的定制化需求，许多客户都需要，但每个客户可能需要进行少许调整 |'
- en: '| **Unlocked** | Easy to customize | No automatic upgrades | Deploying reusable
    components across multiple orgs |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| **解锁** | 易于定制 | 无自动升级 | 在多个组织之间部署可重用组件 |'
- en: '|  | Version control | Manual upgrade process | Sharing modular solutions |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '|  | 版本控制 | 手动升级过程 | 共享模块化解决方案 |'
- en: '|  | Allows for code editing | Security concerns due to editable code | Facilitating
    internal collaboration and development |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '|  | 允许进行代码编辑 | 由于可编辑代码存在安全隐患 | 促进内部协作和开发 |'
- en: '|  | Supports managed package features (e.g., namespaces) | Requires Salesforce
    DX and source-driven development |  |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '|  | 支持托管包功能（例如，命名空间） | 需要Salesforce DX和源驱动开发 |  |'
- en: '| **Managed** | Automatic upgrades | Limited customization | Commercial app
    distribution |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| **托管** | 自动升级 | 定制化有限 | 商业应用分发 |'
- en: '|  | Version control | Code not editable | Distributing apps on the AppExchange
    |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '|  | 版本控制 | 代码不可编辑 | 在AppExchange上分发应用程序 |'
- en: '|  | Enhanced security due to uneditable code | Requires namespaces | Protecting
    intellectual property |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '|  | 由于代码不可编辑增强了安全性 | 需要命名空间 | 保护知识产权 |'
- en: '|  | Supports managed package features (e.g., namespaces) | 2GP requires Salesforce
    DX and source-driven development (although 1GP can still be done without DX patterns)
    |  |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '|  | 支持托管包功能（例如，命名空间） | 2GP要求Salesforce DX和源驱动开发（尽管1GP仍可在没有DX模式的情况下完成） |  |'
- en: Table 6.2 – The pros and cons of each package type
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 表6.2 – 每种包类型的优缺点
- en: Breaking up an existing monolithic application
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拆分现有的单体应用程序
- en: Migrating a mature, monolithic application to Salesforce’s package development
    model can be a major undertaking filled with complexities and challenges.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个成熟的单体应用程序迁移到Salesforce的包开发模型可能是一项重大的工作，充满了复杂性和挑战。
- en: On the complexity side, code refactoring is often needed to break tight couplings
    and fit components into modular packages. Dependency management becomes critical
    to untangle interconnected components. Introducing namespaces can add complexity
    in updating all references. Data models may need reworking to fit the new packaged
    schema. Permission sets and profiles will likely require redefinition. Automation
    and CI/CD pipelines need adaptation to handle packaging, versioning, and dependencies.
    Keeping various org environments in sync with the correct package versions is
    complex to orchestrate.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在复杂性方面，通常需要对代码进行重构，以打破紧耦合并将组件适配到模块化包中。依赖管理变得至关重要，以解开相互关联的组件。引入命名空间可能会增加更新所有引用的复杂性。数据模型可能需要重新设计，以适应新的包化架构。权限集和配置文件可能需要重新定义。自动化和CI/CD流水线需要适应以处理打包、版本控制和依赖关系。保持各个组织环境与正确的包版本同步非常复杂。
- en: In terms of challenges, the transition will require extensive investment in
    resources and time. There will be a knowledge gap as teams learn the new model.
    Testing strategies need an overhaul, potentially including rewriting tests and
    scripts while setting up new test environments. Maintaining backward compatibility
    could limit changes, forcing the need for legacy system support. Once transitioned,
    version management across packages and customers multiplies the complexity. Stakeholders
    accustomed to quick deployments may resist the slower, more controlled package
    life cycle. Apart from staffing costs, expenses such as training, downtime, and
    tools will accumulate.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 就挑战而言，转型将需要大量的资源和时间投入。随着团队学习新模型，知识差距会产生。测试策略需要彻底改革，可能包括重写测试和脚本，并设置新的测试环境。保持向后兼容性可能会限制变更，迫使需要对旧系统进行支持。一旦转型完成，跨包和客户的版本管理将增加复杂性。习惯于快速部署的利益相关者可能会抵制更慢、更受控制的包生命周期。除了人员成本外，培训、停机时间和工具等费用将逐渐累积。
- en: To smooth the transition, a phased, gradual approach can help. Extensive training
    and expert consulting will build the necessary skills. Detailed documentation
    provides a knowledge base. Feedback channels give early visibility of issues.
    Risk assessments and rollback plans mitigate pitfalls. Proper resource allocation,
    both human and computational, lays the groundwork.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了顺利过渡，分阶段的逐步方法可以提供帮助。广泛的培训和专家咨询将培养必要的技能。详细的文档提供了知识库。反馈渠道让问题早期显现。风险评估和回滚计划可以规避陷阱。合理的资源分配，无论是人力还是计算资源，奠定了基础。
- en: While difficult, migrating a monolithic application to the package model can
    ultimately enable modular, scalable development and easier maintenance. With careful
    planning and execution, the long-term benefits may outweigh the complexities of
    getting there.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然困难，将单体应用程序迁移到包模型最终可以实现模块化、可扩展的开发和更容易的维护。通过仔细的规划和执行，长期的好处可能会超过达到目标的复杂性。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we’ve looked at packaging as a technique for deploying our
    code changes and compared the different types of packages available. For each
    type of package, we have seen the steps required to bundle our Salesforce changes
    into those packages for further distribution.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了将代码更改打包作为部署技术，并比较了不同类型的包。对于每种类型的包，我们已经看到了将Salesforce更改捆绑成这些包以便进一步分发的步骤。
- en: We’ve also seen that these changes can follow a source-driven DevOps process
    if we select the appropriate type of package. Packaging by no means replaces DevOps
    processes; rather, it is a technique that forms part of DevOps on the Salesforce
    platform. Equally, it is not the only means of delivering your changes for scenarios
    outside of the ISV Partner space.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到，如果选择适当类型的包，这些更改可以遵循源驱动的DevOps流程。打包绝不是替代DevOps流程的手段；相反，它是Salesforce平台上DevOps的一部分技术。同样，它也不是在ISV合作伙伴空间以外的场景中交付更改的唯一方式。
- en: In the next chapter, we’ll start looking at bringing all the elements of our
    source-driven workflow together and adding some automation as we investigate the
    CI/CD automation of our processes. This represents an alternative delivery mechanism
    for our changes that doesn’t require packaging.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始探讨如何将源驱动工作流的所有元素结合起来，并在我们研究CI/CD自动化流程时加入一些自动化。这代表了一种不需要打包的替代交付机制。
