- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Major Changes, Useful Tools, and References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will set out the major changes that have taken place since Puppet
    5 up to the current versions, Puppet 6.28 and 7.21\. This is viewed as the modern
    era of Puppet, where in the previous chapter, the change of focus was highlighted
    in the history of Puppet. This summary of changes will also cover some redundant
    patterns and approaches that might still be seen from earlier versions of Puppet,
    as these can still be visible in code and various sources. The chapter will then
    go on to discuss tooling to create a productive developer environment for Puppet,
    which will be used for the lab environment throughout this book. The aim will
    be to give an opinionated view of how to develop Puppet code and tooling that
    can assist with this. These tools can be installed in an environment of the readers’
    choice. The lab environment itself will then be demonstrated by standing up a
    simple setup and logging in. The chapter will finish by looking at what resources
    are available for you to keep up to date with Puppet and research further topics
    of interest.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Major changes since Puppet 5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Legacy patterns before Puppet 5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IDEs and tooling to assist in Puppet development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to deploy your Puppet lab and development tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References and further research
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The development environment will require an OS with access to the internet,
    which can be any of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: macOS using Homebrew to install the software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 10/11 or Windows Server using Chocolatey to install the software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Linux environment using package managers such as apt for Ubuntu or RHEL-based
    using Yum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following software is required for the development environment:'
  prefs: []
  type: TYPE_NORMAL
- en: Puppet agent ([https://www.puppet.com/docs/puppet/8/install_agents.html](https://www.puppet.com/docs/puppet/8/install_agents.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bolt ([https://puppet.com/docs/bolt/latest/bolt.html](https://puppet.com/docs/bolt/latest/bolt.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Visual Studio Code ([https://code.visualstudio.com/](https://code.visualstudio.com/))
    with the following extensions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON for Visual Studio Code
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Puppet
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: rest client
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ruby
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ShellCheck
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Thunder client
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VSCode Ruby
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: YAML
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The Puppet module PECDM (https://github.com/puppetlabs/puppetlabs-pecdm)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The GitHub CLI ([https://github.com/cli/cli](https://github.com/cli/cli))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Puppet development toolkit ([https://puppet.com/try-puppet/puppet-development-kit/](https://puppet.com/try-puppet/puppet-development-kit/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Azure CLI ([https://docs.microsoft.com/en-us/cli/azure/install-azure-cli](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Azure account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GitHub account (free account)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SSH keys created to communicate with GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The PECDM module ([https://github.com/puppetlabs/puppetlabs-pecdm](https://github.com/puppetlabs/puppetlabs-pecdm))
    will create resources as specified via the `bolt` command. The cost of running
    the labs in Azure should be carefully watched via the Azure cost analysis tools
    to avoid unexpected bills. Labs not in use should be destroyed or at least deallocated
    to reduce charges.
  prefs: []
  type: TYPE_NORMAL
- en: All of these components have equivalents that you might use in your organization.
    However, the purpose of this development and lab setup is to make it as simple
    and automated a setup as possible. It might well be an exercise you wish to do
    as the book progresses to test out your own components. PECDM itself supports
    AWS, Azure, and GCP with instructions on the module to configure the necessary
    CLI.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this section can be found at [https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/tree/main/ch02](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/tree/main/ch02).
  prefs: []
  type: TYPE_NORMAL
- en: Major changes since Puppet 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Puppet 5 reflects the change in direction of Puppet as an organization, which
    was highlighted in the previous chapter. Its focus is on performance and scaling
    for infrastructure and stability in the language. This section will cover the
    changes that have taken place between Puppet 5 and 7; these versions reflect the
    versions of Puppet in use, which you are likely to see in code bases you are working
    with and in modules you would take from the Puppet forge. It will also cover some
    old patterns and issues you might see in code that reflect how Puppet was before
    version 5.
  prefs: []
  type: TYPE_NORMAL
- en: Puppet 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Puppet 4 had a large number of deprecated features, which were almost all removed
    in Puppet 5\. It is not worth listing all of these features, but just to set the
    context of the release, it was more about finishing what had been started in Puppet
    4 by introducing more new features. It standardized package numbering, with all
    the Puppet packages starting at 5.0.0 instead of the mismatches of various packages,
    such as Puppet 4 requiring Puppet Server 2.x and Puppet agent 1.x.
  prefs: []
  type: TYPE_NORMAL
- en: 'Puppet 5 as a server platform delivered big boosts in performance: agent runtimes
    were 30 percent lower, CPU utilization was at least 20 percent lower, the catalog
    compile times reported by Puppet Server were 7 to 10 percent lower, and Puppet
    5 was able to scale to 40 percent more agents. Puppet Server metrics were introduced
    to give greater observability of the Puppet platform. In addition to this greater
    performance and scalability, Puppet Enterprise 2017.4 onward had capabilities
    to allow for disaster recovery along with package inspection, which stored information
    about software installed across the estate regardless of whether Puppet managed
    it or not. Full technical details of the Puppet Enterprise features will be discussed
    in [*Chapter 14*](B18492_14.xhtml#_idTextAnchor340).'
  prefs: []
  type: TYPE_NORMAL
- en: Although not affiliated directly with Puppet 5, the **Puppet Development Kit**
    (**PDK**) was released around the same time, which automated a lot of tool installation,
    testing, linting, and the creation of module directories (this will be covered
    in detail in [*Chapter 8*](B18492_08.xhtml#_idTextAnchor212)). Previously, this
    had to be done by hand or by individual developer automation. Additionally, Hiera
    5 integrated with EYAML (a mechanism of encrypted data covered in [*Chapter 9*](B18492_09.xhtml#_idTextAnchor233)),
    which was introduced and massively simplified how data could be secured and still
    used.
  prefs: []
  type: TYPE_NORMAL
- en: Puppet 6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Puppet 6 came with a substantial change when a lot of types that had been included
    with the core Puppet install were removed and put into modules, which users could
    choose to download from the Puppet forge. This was to narrow down the installation,
    as the number of core types had grown over time, and it was far more efficient
    for users to choose what they wanted. A review of what functions were being consistently
    used took place, and a number of string and math functions were moved from the
    `stdlib` module into core Puppet to reflect their core use. The trusted external
    command was also introduced; this allowed for external data sources to be queried
    and brought in like facts, so an API on a Satellite server or a database server
    could be called and brought in for use in Puppet code. This will be covered in
    detail in [*Chapter 13*](B18492_13.xhtml#_idTextAnchor321). Additionally, the
    deferred data type was introduced, which allowed variables to run deferred functions
    locally on machines at deployment time. This is particularly useful for use cases
    such as secret management, for example, a vault, where a traditional function
    would make its call from the Puppet primary server and send the secret to the
    agent over the Puppet infrastructure. Parametrized execs were introduced in 6.24,
    which allow for the separation of commands from parameters when using the `exec`
    resource type – a powerful security measure to prevent commands from being passed
    instead of parameters.
  prefs: []
  type: TYPE_NORMAL
- en: On the platform side, the Puppet certificate commands were changed from `puppet
    cert` commands to `puppet server ca`, which were more complete and more powerful
    commands. Also, PuppetDB was included on Puppet compiler servers to better manage
    the load of requests on PuppetDB. The full details of the platform are covered
    in [*Chapter 10*](B18492_10.xhtml#_idTextAnchor252).
  prefs: []
  type: TYPE_NORMAL
- en: Puppet 7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most noticeable changes in Puppet 7 was the removal of harmful terminology
    following a review and work beginning in 2014\. This focused on phrases such as
    master/slave and blacklists/whitelists. For Puppet, this means that master servers
    became primary servers, master services became server services, and in modules,
    the master branch became the main branch. It also means blacklist/whitelist terminology
    was replaced with allow list/block list.
  prefs: []
  type: TYPE_NORMAL
- en: The parameterized execs mentioned in the Puppet 6 updates were available with
    the 7.9 Puppet language. Factor was upgraded to version 4, a re-write in Ruby,
    which provides features such as benchmarking, timeouts, and user caching, which
    will be discussed in [*Chapter 5*](B18492_05.xhtml#_idTextAnchor123). The option
    to not include legacy facts via the `include_legacy_facts` option was included
    as of 7.21.
  prefs: []
  type: TYPE_NORMAL
- en: The platform upgraded to Postgres 11 and Ruby 2.7, which further increased performance.
  prefs: []
  type: TYPE_NORMAL
- en: The reporting mechanism also had the option to not include unchanged resources
    in its reports via the `exclude_unchanged_resources` option.
  prefs: []
  type: TYPE_NORMAL
- en: Again, although not affiliated with Puppet releases directly, PDK 2.0 was released
    close to Puppet 7, dropping support for Puppet 4.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Puppet patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will highlight some old patterns and their reason for use in old
    versions of Puppet. This will help you to understand code that can be commonly
    found in older, unmaintained modules or code that simply has never been refactored
    over time. Puppet 4 introduced data types, but before this, all variables were
    strings, and a lot of comparisons and other functions could have quite strange
    and inconsistent results. To understand the full extent of this, you can view
    [www.youtube.com/watch?v=aU7vjKYqMUo](https://www.youtube.com/watch?v=aU7vjKYqMUo).
    Therefore, you might see in historic code the odd handling of variables and checks
    for undefined variables. Originally, **facter** facts were also just called **top-level
    variables**, which could be very confusing with normal variables and created the
    opportunity for accidental overrides. This changed to the **facts hash**, which
    we will show in more detail in [*Chapter 5*](B18492_05.xhtml#_idTextAnchor123).
  prefs: []
  type: TYPE_NORMAL
- en: The platform infrastructure was more complicated and varied with the options
    of using Rack or WEBrick configurations. In very early versions of Puppet code,
    which predate the `file_line` function of the Puppet `stdlib` module, there was
    no way to manage single lines of a file. This resulted in the overuse of Augeas
    (a tool that can parse files to allow for manipulation) and templates (which allow
    for the creation of file using conditional logic and variables). Augeuas is very
    advanced but often over-complicated and a drain on performance, while the overuse
    of templates resulted in whole files being enforced instead of just the individual
    line or setting required. Therefore, when working with Puppet code that was developed
    in earlier versions, it is worth reviewing to make sure any code you inherit really
    does need to control a whole file and does not overuse Augeas when simpler solutions
    now exist. The `params.pp` pattern was heavily used in modules before Hiera offered
    the ability for class parameters to be overwritten. The sensitive data type was
    not introduced until 4.6, which made it hard to handle any secret data securely
    in code. Finally, the original Puppet versions had no concept of loops, as provided
    by lambda functions, which were introduced in Puppet 4\. So, you might find, in
    old code examples, obscure patterns being used to achieve a similar effect.
  prefs: []
  type: TYPE_NORMAL
- en: IDEs and tools to assist in Puppet development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the greatest issues with early Puppet development was the lack of a consensus
    around how to develop and a lack of integration. As discussed in [*Chapter 1*](B18492_01.xhtml#_idTextAnchor018)
    this changed greatly around the time Puppet 5 was released. This section highlights
    some tools as opinionated recommendations based on usage and experience in Puppet,
    and most of them will be used in the labs and demonstrations. This is certainly
    not the only way to develop Puppet code, and your organization might require the
    usage of different tools depending on the environment.
  prefs: []
  type: TYPE_NORMAL
- en: The `pdk` command. Previously, Puppet developers had to gather the tools, install
    dependencies, and then run each of the various commands that `pdk` is made up
    of.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Code has become an incredibly powerful and popular source code
    editor. It is free and multiplatform, with a vast selection of extensions including
    the Puppet extension ([https://marketplace.visualstudio.com/items?itemName=puppet.puppet-vscode](https://marketplace.visualstudio.com/items?itemName=puppet.puppet-vscode)).
    It creates powerful shortcuts that allow all your work to take place in the IDE,
    which will be demonstrated throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: I will not be using it as part of the lab directly, but since many prefer a
    command-line editor as opposed to Visual Studio Code, it should be noted there
    are Vim modules ([https://github.com/rodjek/vim-puppet](https://github.com/rodjek/vim-puppet))
    that can provide linting and syntax checking within VIM.
  prefs: []
  type: TYPE_NORMAL
- en: A particularly useful web page for development is the [https://validate.puppet.com/](https://validate.puppet.com/)
    site, which can be used to quickly paste in Puppet code to validate and parse
    it and create relationship graphs.
  prefs: []
  type: TYPE_NORMAL
- en: At an even more advanced level is the Puppet debugger ([https://github.com/nwops/puppet-debugger](https://github.com/nwops/puppet-debugger)),
    which allows for running Puppet code and taking breaks in the code, which allows
    you to see the state of variables. This will become useful as more advanced code
    is authored.
  prefs: []
  type: TYPE_NORMAL
- en: How to deploy your Puppet lab and development tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will run through how to install and configure your desktop environment
    and then use that environment to stand up the Puppet infrastructure in Azure,
    configure it with a control repo, deploy some modules to an environment, and test
    logins to the web console. This will confirm the lab environment functions as
    expected and should give you the confidence to start up and shut down the labs
    as required to avoid paying for unecessary virtual machine running time costs
    on Azure.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 2**.1*, the final result of this exercise is shown. The device you
    use as a development environment will have Visual Studio Code installed to edit
    the code that has been cloned from GitHub. A PowerShell or shell session, depending
    on the OS, will use Bolt with Terraform to stand up the infrastructure in Azure
    and then apply the configuration to that infrastructure, configuring a Puppet
    Enterprise server and an attached instance to that server. The web console of
    the Puppet Enterprise server will be accessible via HTTPS to a web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.1 – The \uFEFFlab setup](img/Figure_02.01.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – The lab setup
  prefs: []
  type: TYPE_NORMAL
- en: Mac desktop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Mac installation will rely on Homebrew to automate the installation process,
    for which Puppet has created its own repos ([https://github.com/puppetlabs/homebrew-puppet](https://github.com/puppetlabs/homebrew-puppet)).
    Run the following commands to install the desktop tooling that was highlighted
    in the *Technical* *requirements* section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Windows desktop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Windows installation relies on Chocolatey for installation. Run the following
    code in a PowerShell session; note that administrative rights are only required
    for the first command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Linux desktop – RPM-based
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This RPM-based Linux desktop installation was tested with Rocky Linux 8\. So,
    some localized adjustments need to be made depending on your specific OS version
    and the difference in flavor. However, running the following code will add necessary
    the Yum repositories from the vendors and install the packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The client tools are at a specific version and should be adjusted to match your
    installation. Check out [https://puppet.com/try-puppet/puppet-enterprise-client-tools/](https://puppet.com/try-puppet/puppet-enterprise-client-tools/)
    to find the `curl` command.
  prefs: []
  type: TYPE_NORMAL
- en: Linux desktop – APT-based
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The APT-based Linux desktop was tested with Ubuntu 20.04, so some localized
    adjustments need to be made depending on your specific OS version and the difference
    in flavor. However, running the following code should add the necessary APT repositories
    and install the desktop development software required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The client tools are at a specific version and should be adjusted to match your
    installation. Check out [https://puppet.com/try-puppet/puppet-enterprise-client-tools/](https://puppet.com/try-puppet/puppet-enterprise-client-tools/)
    to find the `curl` command.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have the core tools installed on whichever desktop environment
    you are using, the core steps will be the same for running and managing the applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we need to register with GitHub ([https://github.com/join](https://github.com/join))
    and register with Azure ([https://azure.microsoft.com/en-gb/free/](https://azure.microsoft.com/en-gb/free/)).
    Once these registrations are complete, log in to the CLIs for both. Run the following
    and log in to the web page that will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to generate keys that will allow for communication with GitHub.
    You can do this by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we upload the key we have created using the GitHub CLI. For Mac or Linux,
    run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For the equivalent location of the SSH key in Windows, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Then, extensions for Visual Studio Code can be added by downloading the `extensions.list`
    file from the Packt GitHub repo at [https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch02/extensions.list](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch02/extensions.list)
    and looping through the lines to install.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Mac or Linux, you can achieve this by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'For Windows, you can run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step will be to create an area for you to have a code workspace and
    then download the `pecdm` module into it. For Linux and Mac, in your home directory,
    we will create a workspace and then clone `pecdm` into this directory by running
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'For Windows, we will assume the equivalent directory in the user profile, creating
    a `workspace` directory there, and then cloning it by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have everything installed and have a work area with the cloned
    module, we can configure the module and run the following Bolt plan to create
    the Puppet infrastructure in Azure. This will stand up a Puppet 2021.7.0 primary
    server and create a single client registered to it. The SSH user allows you to
    use the SSH keys created earlier to connect to the hosts. For this example, the
    `params.json` file should be downloaded to the pecdm directory from [https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch02/params.json](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch02/params.json),
    I have used the UK south region and allowed an open-to-anything firewall, but
    you will want to choose the cloud region closest to you and set a firewall with
    rules to allow only your desktop environment and Azure region to access it. The
    following links can help you to work out this choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://azure.microsoft.com/en-gb/global-infrastructure/geographies/#geographies](https://azure.microsoft.com/en-gb/global-infrastructure/geographies/#geographies)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.azurespeed.com/Azure/Latency](https://www.azurespeed.com/Azure/Latency)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This should take around 20 to 30 minutes to complete.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then run the following Azure CLI command to return the list of hostnames
    and public IPs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Copy the IP address listed for the entry that starts with `pe-server` into a
    web browser to reach the Puppet Enterprise console screen. Then, you can use the
    login details with the username of `admin` and the password as `puppetlabs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To destroy this infrastructure and ensure no unnecessary costs are incurred,
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, if labs are to be kept for periods of time, it is possible to
    stop and deallocate each virtual machine to minimize the charge and then restart
    them later using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This section has fully run through the creation of your developer desktop and
    then standing up and destroying Puppet infrastructure. It ensures you are ready
    for the labs in future chapters. In this lab, the `pecdm` and `peadm` modules
    are used to configure a standard architecture, which is one of Puppet’s supported
    architectures: [https://puppet.com/docs/pe/latest/supported_architectures.html](https://puppet.com/docs/pe/latest/supported_architectures.html).
    In [*Chapter 14*](B18492_14.xhtml#_idTextAnchor340)*,* we will discuss, in more
    detail, the different architecture options. But for now, it is important to understand
    that the standard is the base level providing a single Puppet Server. In this
    scenario, `pecdm` configures the necessary infrastructure using Terraform, while
    `peadm` installs the Puppet Enterprise components. Both modules will be used as
    examples of using Bolt projects, tasks, and plans and will be reviewed in [*Chapter
    12*](B18492_12.xhtml#_idTextAnchor293)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: References and further research
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will cover further resources and references that can be used alongside
    this book. They go into further depth and enable you to learn about Puppet from
    both Puppet and the community.
  prefs: []
  type: TYPE_NORMAL
- en: The general page ([https://puppet.com/docs/](https://puppet.com/docs/)) is the
    core doc page, where you can find all the products of Puppet and sections such
    as patterns and tactics. We will highlight different sections of the docs to refer
    to as we progress through the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Puppet runs through various media forms where a variety of articles are published
    covering new product releases, security updates, and guides for implementations.
    Their handles are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Blog: [https://puppet.com/blog](https://puppet.com/blog)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Podcast: [https://pulling-the-strings.simplecast.com/](https://pulling-the-strings.simplecast.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dev.to articles: [https://dev.to/puppetecosystem](https://dev.to/puppetecosystem)
    and [https://dev.to/puppet](https://dev.to/puppet)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Twitter: [https://twitter.com/puppetize](https://twitter.com/puppetize) and
    [https://twitter.com/PuppetEcosystem](https://twitter.com/PuppetEcosystem)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'YouTube: [https://www.youtube.com/channel/UCPfMWIY-qNbLhIrbZm2BFMQ](https://www.youtube.com/channel/UCPfMWIY-qNbLhIrbZm2BFMQ)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Puppet has its own learning site ([https://training.puppet.com/learn](https://training.puppet.com/learn)),this
    site includes various elements such as the Puppet practice labs, which are online
    labs you can run entirely from a web browser and tackle boxes, which are guides
    on achieving small focused tasks. Puppet’s support knowledge base was made public
    in April 2022, allowing anyone to search and view the troubleshooting guides,
    best practices, and FAQs, which are available at [https://support.puppet.com](https://support.puppet.com),
    without the need for a login. Archived articles for the older version of Puppet
    can be found at [https://github.com/puppetlabs/docs-archive/tree/main/supportkb#readme](https://github.com/puppetlabs/docs-archive/tree/main/supportkb#readme).
  prefs: []
  type: TYPE_NORMAL
- en: Puppet previously run two, instructor-led training courses, which had to be
    paid for and lasted 3 days (*Getting started with Puppet* and *Puppet Practioner*).
    During 2022 the *Fundamental Core Training* modules replaced *Getting started
    with Puppet*, and the *Advanced Core Training* modules replaced *Puppet Practioner*.
  prefs: []
  type: TYPE_NORMAL
- en: The key difference is that the `Fundamental Core Training` modules are free
    to register for, and both training sets are broken up into three module sets that
    are each a day long. More details can be found on the Puppet Compass site.
  prefs: []
  type: TYPE_NORMAL
- en: '*Fundamental* *Core Training*:'
  prefs: []
  type: TYPE_NORMAL
- en: 'PE101: Deploy and Discover'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PE201: Design and Manage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PE301: Develop and Maintain'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Advanced* *Core Training*:'
  prefs: []
  type: TYPE_NORMAL
- en: 'PE401: Extend Capability'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PE501: Continuously Deliver'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PE601: Automate at Scale'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise modules that produce commercially licensed Puppet modules on the
    Puppet forge have a blog discussing various Puppet topics at [https://www.enterprisemodules.com/blog/](https://www.enterprisemodules.com/blog/)
    and a Twitter account at [https://twitter.com/enterprisemodul](https://twitter.com/enterprisemodul).
  prefs: []
  type: TYPE_NORMAL
- en: Two other noted Puppet consultancy and development groups were formed after
    the split of Example42 GmbH into Example42, which is now a brand of Lab42 with
    a blog at [https://blog.example42.com/blog/](https://blog.example42.com/blog/)
    and a Twitter account at [https://twitter.com/example42](https://twitter.com/example42),
    and Betabots, which has a blog at [https://dev.to/betadots](https://dev.to/betadots)
    and a Twitter account at [https://twitter.com/betadots](https://twitter.com/betadots).
    Both provide insights into their Puppet development work and approaches.
  prefs: []
  type: TYPE_NORMAL
- en: To ask questions about Puppet or talk with people in the community, you can
    join [https://slack.puppet.com/](https://slack.puppet.com/) and [https://www.reddit.com/r/Puppet/](https://www.reddit.com/r/Puppet/)
    to ask questions about Puppet and the community.
  prefs: []
  type: TYPE_NORMAL
- en: This section is not supposed to be an exhaustive list of references. It is to
    give a view of some of the better-known and long-lasting sources of information
    and communities to view and follow to get to know Puppet better.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the changes in the modern versions of Puppet 5
    to 7 and some antipatterns to look out for that could be left over from legacy
    Puppet code. It might be more practical to come back to this section if you aren’t
    familiar with Puppet and read through the changes again once completing the book.
  prefs: []
  type: TYPE_NORMAL
- en: We covered the available tooling to use in a developer environment and the IDE
    to automate and quicken your Puppet development environment, and we have installed
    these tools to introduce the lab. We have learned how to stand up both the reader’s
    development environment and the Puppet infrastructure in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this chapter, we covered the various sources and communities that
    can be used to further learn about Puppet, keep up to date with ongoing developments,
    and signpost where to ask questions and discuss Puppet with the community.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will begin to look at the Puppet language, covering
    the fundamental building blocks of resources, types, and providers. We will look
    at the basic syntax and style of coding in Puppet and how to use various references
    and commands to make it easier to generate code and find documentation. We will
    look at the core types to start coding in Puppet and how to use them well. Then,
    we will look at how to use defined types for repeatable patterns of resources,
    use classes to contain and include resources in catalogs, and finally, finish
    by looking at the more advanced feature of exporting and collecting resources
    to share resource declarations across multiple clients.
  prefs: []
  type: TYPE_NORMAL
