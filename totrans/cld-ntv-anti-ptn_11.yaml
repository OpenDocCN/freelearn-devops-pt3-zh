- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Running It Without Breaking It
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在不破坏它的情况下运行
- en: In this chapter, we’ll explore the operational challenges that come with managing
    cloud environments and how to keep systems running smoothly, no matter what. We’ll
    cover everything from understanding cloud provider SLAs to building resilience
    through multi-region deployments, failover architectures, and automated scaling.
    We’ll dive into the importance of proactive planning, redundancy, and automation
    to minimize downtime and ensure business continuity. Whether it’s preparing for
    cloud provider outages, updating runbooks and documentation, or adapting to the
    cultural shifts required for successful cloud operations, this chapter will arm
    us with the strategies and tools needed to keep our cloud infrastructure strong
    and reliable.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨管理云环境所带来的操作挑战，以及如何保持系统平稳运行，不论发生什么。我们将涵盖从理解云服务商SLA到通过多区域部署、故障切换架构和自动化扩展构建弹性等各个方面。我们将深入讨论主动规划、冗余和自动化的重要性，以最小化停机时间并确保业务连续性。无论是准备应对云服务商的故障、更新运行手册和文档，还是适应成功云操作所需的文化转变，本章将为我们提供必要的策略和工具，帮助我们保持云基础设施的稳定与可靠。
- en: 'We’ll address this within the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以下主题中讨论这一点：
- en: Assuming the Cloud is Just ‘Business as Usual’
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设云计算只是“日常业务”
- en: Inadequate Disaster Recovery & Backup Plans
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不足的灾难恢复和备份计划
- en: Out-of-Date Runbooks and Documentation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过时的运行手册和文档
- en: Ignoring the Cultural Shift
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 忽视文化转变
- en: Developing Around CSP SLAs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 围绕CSP SLA进行开发
- en: Assuming the Cloud is Just ‘Business as Usual’
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 假设云计算只是“日常业务”
- en: When businesses shift to the cloud, it’s all too common to overlook the complexity
    and steep learning curve that comes with it. Cloud operations need a whole different
    skill set compared to traditional IT, and without the right planning, teams can
    quickly find themselves in over their heads.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当企业迁移到云端时，常常忽视了随之而来的复杂性和陡峭的学习曲线。云操作需要与传统IT截然不同的技能组合，如果没有合适的规划，团队很容易陷入困境。
- en: In this section, we will gain a deep understanding of the complexities that
    come with cloud adoption and learn how to prepare our team for the challenges
    ahead. We’ll dive into the nitty-gritty of cloud infrastructure, automation, scaling,
    and cost management, so we can plan and avoid common pitfalls.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入了解云计算采纳所带来的复杂性，并学习如何为即将到来的挑战做好团队准备。我们将深入探讨云基础设施、自动化、扩展性和成本管理的方方面面，以便进行规划并避免常见的陷阱。
- en: Understanding Cloud Complexity
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解云计算的复杂性
- en: When making the decision to move to the Cloud, we’ve generally got a very good
    reason to do so. We want to;
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们做出迁移到云端的决策时，通常都有一个非常充分的理由。我们希望：
- en: Avoid replacing expensive legacy hardware on premise
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免替换昂贵的本地遗留硬件
- en: Modernize our product to use more up-to-date technologies.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使我们的产品现代化，使用更先进的技术
- en: Take advantage of the flexibility in varying technologies.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用不同技术中的灵活性
- en: Infinitely scale our storage solution
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无限扩展我们的存储解决方案
- en: Have an offsite backup
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有离线备份
- en: This list is neither exhaustive nor limited, but for whatever reason we decide
    to move to the Cloud, we can expect there to be a learning curve.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个清单既不全面也不局限，但无论出于何种原因决定迁移到云端，我们都可以预期将会有一个学习曲线。
- en: When businesses transition to the cloud, they often assume it’s just another
    IT upgrade. But the truth is, it’s a whole new ballgame. Let’s break down some
    of the things that catch teams off guard.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当企业迁移到云端时，通常认为这只是一次常规的IT升级。但事实是，这完全是另一个全新的领域。我们来分析一些容易让团队措手不及的事情。
- en: '**Infrastructure as Code (IaC)**: In traditional IT, setting up infrastructure
    might have involved physically installing servers or clicking through a UI to
    provision resources. In the cloud, we’re potentially dealing with Infrastructure
    as Code (IaC). This means we’re writing scripts—using tools like AWS CloudFormation,
    Terraform, or Azure ARM templates—to define our entire environment. If our team
    isn’t used to thinking about infrastructure as something we version control and
    manage like software, we’re already behind. The flexibility IaC provides is powerful,
    but it also requires developers and ops teams to be on the same page, understanding
    every line of code that affects the environment.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施即代码（IaC）**：在传统IT中，设置基础设施可能涉及到物理安装服务器或通过UI点击来配置资源。 在云中，我们可能要处理的是基础设施即代码（IaC）。
    这意味着我们编写脚本——使用像AWS CloudFormation、Terraform或Azure ARM模板这样的工具——来定义整个环境。 如果我们的团队不习惯将基础设施视为可以像软件一样进行版本控制和管理的内容，那么我们就已经落后了。
    IaC提供的灵活性非常强大，但也要求开发人员和运维团队在同一页面上，理解每一行影响环境的代码。'
- en: '**Automation and CI/CD Pipelines**: Another area that’s often underestimated
    is the role of automation and continuous integration/continuous deployment (CI/CD)
    pipelines. In the cloud, manual deployments are not scalable. We need pipelines
    that automatically build, test, and deploy our applications. Teams that aren’t
    experienced in setting up automated workflows will quickly find themselves drowning
    in manual processes, facing delays, and risking inconsistencies between environments.
    What seems like a quick deployment can end up being a troubleshooting marathon
    when it’s done manually.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化和CI/CD流水线**：另一个经常被低估的领域是自动化和持续集成/持续部署（CI/CD）流水线的作用。 在云中，手动部署是不可扩展的。 我们需要能够自动构建、测试和部署应用程序的流水线。
    没有自动化工作流经验的团队很快就会发现自己被手动流程淹没，面临延迟，并且在不同环境之间存在不一致的风险。 看似快速的部署，如果是手动操作，最终可能变成一个故障排除马拉松。'
- en: '**Multi-Region Redundancy and Scalability**: Cloud environments give us the
    ability to run our applications in multiple regions, ensuring uptime even if one
    location goes down. But setting this up isn’t as simple as flicking a switch.
    It requires careful planning and a deep understanding of how our application and
    data need to be replicated across regions. If our team doesn’t have the experience
    or hasn’t thought through the design properly, we could be left vulnerable during
    an outage, with data that’s inconsistent or difficult to recover.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多区域冗余和可扩展性**：云环境使我们能够在多个区域运行应用程序，即使一个位置发生故障也能确保正常运行。 但设置这一点并不像按一下开关那么简单。
    它需要精心规划，并深刻理解我们的应用程序和数据如何在各个区域之间进行复制。 如果我们的团队没有经验或没有正确考虑设计问题，我们可能会在停机期间处于脆弱状态，数据不一致或难以恢复。'
- en: '**Cost Management**: Cloud services are pay-as-you-go, which can be a double-edged
    sword. While we’re not paying for hardware upfront, poor resource management can
    quickly lead to unexpected costs spiraling out of control. Teams that aren’t used
    to thinking about cost optimization—like scaling down non-essential services when
    they’re not needed—can find themselves hit with massive bills at the end of the
    month. It’s not just about building a solution; it’s about building one that’s
    cost-efficient from day one.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本管理**：云服务是按需付费的，这可能是双刃剑。 虽然我们不需要为硬件预先付款，但糟糕的资源管理可能迅速导致意外成本失控。 不习惯考虑成本优化的团队——比如在不需要时缩减非核心服务——可能会在月底时收到巨额账单。
    这不仅仅是关于构建一个解决方案；而是要从一开始就构建一个具有成本效益的解决方案。'
- en: In short, cloud operations are an entirely different beast compared to traditional
    IT. If our team isn’t equipped to deal with this complexity, we’re setting ourselves
    up for a rough ride. Proper planning, training and a deep understanding of the
    tools at our disposal aren’t just “*nice to haves*”—they’re critical if we want
    to succeed in the cloud.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，云操作与传统IT相比是完全不同的。 如果我们的团队没有能力应对这种复杂性，我们就会陷入困境。 适当的规划、培训以及对可用工具的深刻理解不仅仅是“*锦上添花*”——如果我们想在云环境中取得成功，它们是至关重要的。
- en: Training and Upskilling
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 培训与技能提升
- en: 'When a business is planning to move to the cloud, it’s not as simple as flipping
    a switch. We need a solid plan that covers everything, from the technical side
    to getting the whole organization on board. Here’s how we do it:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个企业计划迁移到云时，这并不像按一下开关那么简单。 我们需要一个覆盖所有内容的可靠计划，从技术层面到让整个组织都参与进来。 这是我们的做法：
- en: '**Start with a Cloud Readiness Check**: Before we dive in, we’ve got to figure
    out where we stand. A cloud readiness check is all about understanding what we
    have in our current setup—what can move easily, what might need some work, and
    what the potential costs and risks are. And it’s not just IT that should be involved.
    Business leaders need to understand how this move could impact their departments—operations,
    budgets, everything.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**从云准备性检查开始**：在我们深入实施之前，必须弄清楚我们目前的情况。云准备性检查的核心是了解当前的配置——哪些可以轻松迁移，哪些可能需要一些工作，潜在的成本和风险是什么。而且，不仅仅是
    IT 部门应该参与。业务领导者需要理解这一举措如何影响他们的部门——运营、预算，一切。'
- en: '*Example*: When we did our cloud readiness check, we found some of our legacy
    systems needed major reworking to even consider running in the cloud. But on the
    flip side, our databases? They were practically begging for a lift-and-shift,
    which saved us both time and money from the get-go.'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*示例*：当我们进行云准备性检查时，发现一些旧系统需要大幅重构，才能考虑迁移到云中。但另一方面，我们的数据库？它们几乎迫切需要提升和迁移，这从一开始就为我们节省了时间和金钱。'
- en: '**Education and Training for Everyone**: The skills gap is real when it comes
    to the cloud. Sure, our IT staff will need to get cloud certifications but don’t
    stop there. Finance, marketing, risk teams, and even legal teams need to understand
    what the cloud means for them—cost structures, compliance, security, and so on.
    Invest in workshops, training programs, and external consultants to make sure
    everyone’s on the same page.'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**面向所有人的教育与培训**：在云计算方面，技能差距是一个现实问题。我们的 IT 员工确实需要获得云认证，但不要仅仅停留在此。财务、市场营销、风险团队，甚至法律团队都需要理解云计算对他们意味着什么——成本结构、合规性、安全性等等。投资工作坊、培训项目和外部顾问，确保每个人都在同一页面上。'
- en: '*Example*: We didn’t just train IT. Finance learned how cloud billing really
    works and set up alerts to avoid those nasty surprises at the end of the month.
    Meanwhile, marketing got a crash course on cloud compliance, making sure they
    didn’t trip over data privacy in our shiny new environment.'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*示例*：我们不仅仅对 IT 进行了培训。财务部门学习了云计费的真正运作方式，并设置了警报，以避免月底的“意外惊喜”。同时，市场营销部门也接受了云合规性的速成课程，确保他们在我们的全新环境中不会因数据隐私问题而犯错。'
- en: '**Set Clear, Measurable Goals**: We need to know why we’re making this move.
    Are we doing it to cut capital expenditure costs? Improve scalability? Improve
    on our disaster recovery plan? Whatever our goals are, make them measurable and
    align them with our business priorities. This way, we will know if we’re on track,
    and our teams will have something concrete to aim for.'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设定明确、可衡量的目标**：我们需要知道为什么要做这个决策。是为了减少资本支出吗？提高可扩展性吗？改善灾难恢复计划吗？无论我们的目标是什么，都要确保它们是可衡量的，并与我们的业务优先事项对齐。这样，我们就能知道是否按计划进行，并且我们的团队也有了明确的目标。'
- en: '*Example*: One of our big goals? Cutting infrastructure costs by 30% within
    the year. We made sure it was tied to the business and tracked it every quarter,
    holding ourselves accountable to make sure the cloud was pulling its weight.'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*示例*：我们的一个大目标？在一年内将基础设施成本减少 30%。我们确保它与业务相关，并且每个季度跟踪进展，确保云计算能有效地发挥作用。'
- en: '**Build a Solid Migration Strategy**: Once we’ve got our goals set, we need
    a strategy that outlines how we’re going to get there. What’s the approach—lift
    and shift, re-platform, or something else? Who’s responsible for what? Do we go
    with a single cloud, multi-cloud, or hybrid model? These are the decisions that
    will shape our migration. Make sure our strategy accounts for things like vendor
    lock-in, interoperability, and security.'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**构建一个稳固的迁移策略**：一旦我们确定了目标，就需要一个策略来规划如何实现这些目标。采取什么方法——提升迁移、重新平台化，还是其他什么？谁负责什么？我们选择单一云、多云还是混合云模型？这些都是决定迁移方式的关键。确保我们的策略考虑到供应商锁定、互操作性和安全性等因素。'
- en: '*Example*: Our migration strategy wasn’t a one-size-fits-all. We started with
    a phased approach, lifting and shifting non-critical apps while re-platforming
    the core services to tap into cloud-native features like auto-scaling. We also
    kept one eye on the future by planning a multi-cloud approach to avoid vendor
    lock-in.'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*示例*：我们的迁移策略并不是“一刀切”。我们从分阶段的方法开始，先将非关键应用进行提升和迁移，同时将核心服务重新平台化，以便利用云原生特性，如自动扩展。我们还通过规划多云策略来避免供应商锁定，保持对未来的关注。'
- en: '**Communication is Key**: This isn’t just an IT project—it’s a shift for the
    entire business. We need to keep everyone in the loop. Explain why we’re moving
    to the cloud and how it’s going to benefit the business. Regular updates can help
    avoid resistance and ensure everyone knows what’s coming and how it affects them.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**沟通至关重要**：这不仅仅是一个IT项目——它是整个业务的转变。我们需要让每个人都了解情况。解释我们为什么要迁移到云端以及它将如何惠及业务。定期更新有助于避免抵制，并确保每个人都知道接下来会发生什么，以及它将如何影响他们。'
- en: '*Example*: Every two weeks, we ran company-wide updates, explaining where we
    were in the migration and what was coming next. This open dialogue helped reduce
    resistance and kept everyone on the same page, no surprises, just progress.'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*例如*：每两周，我们都会进行公司范围的更新，解释迁移的进展以及接下来会发生什么。这种开放的对话有助于减少抵抗，并让每个人保持同步，避免惊讶，只有进展。'
- en: '**Set Up Governance and Compliance Early**: The cloud gives us flexibility,
    but without the right governance, things can spiral. Set up policies from the
    start to define who can access resources, how data is handled, and how everything
    is monitored. Get our legal, compliance, and security teams involved early to
    make sure everything is in line with regulations.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**早期建立治理和合规性**：云端为我们提供了灵活性，但如果没有正确的治理，事情可能会失控。从一开始就设立政策，定义谁可以访问资源，数据如何处理，以及如何进行监控。尽早让我们的法律、合规和安全团队参与进来，以确保一切符合规定。'
- en: '*Example*: We got the legal team involved early, working side by side with
    IT to set up access policies and make sure data handling met specific client required
    standards. Regular audits were built into the process so compliance was baked
    in as we scaled.'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*例如*：我们早早让法律团队参与进来，与IT团队并肩工作，制定访问政策，并确保数据处理符合客户要求的标准。定期的审计被纳入流程中，从而在扩展过程中将合规性内建。'
- en: '**Test Everything**: Before we flip the switch, make sure we’ve tested everything—performance,
    security, backup and recovery processes. Run pilots or proof of concept projects
    to iron out any kinks before the full migration. This is our chance to catch potential
    issues, so don’t skip it.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**测试一切**：在我们切换之前，确保我们已经测试了所有内容——性能、安全性、备份和恢复流程。运行试点或概念验证项目，在全面迁移前解决任何问题。这是我们发现潜在问题的机会，千万不要跳过。'
- en: '*Example*: Before we pulled the trigger on migrating our customer-facing app,
    we ran it in parallel with our on-prem system for a month. That gave us time to
    iron out a few latency kinks and ensure everything was solid before switching
    users over.'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*例如*：在我们决定迁移面向客户的应用之前，我们将其与本地系统并行运行了一个月。这段时间让我们有机会解决一些延迟问题，并确保一切稳定后再切换用户。'
- en: '**Post-Migration Support**: The work doesn’t end when we’ve moved our data
    or apps. We will need a plan for ongoing support—monitoring, cost optimization,
    and troubleshooting. Make sure we’ve got a team or partner ready to handle the
    day-to-day cloud management and keep things running smoothly.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**迁移后的支持**：我们迁移了数据或应用后，工作并没有结束。我们需要为持续支持做好规划——监控、成本优化和故障排除。确保我们有团队或合作伙伴准备好处理日常的云管理工作，并保持一切顺利运行。'
- en: '*Example*: After the migration, we had a cloud operatations team ready to go,
    handling monitoring and troubleshooting. Automated cost alerts were set up to
    catch any spikes, and a weekly review kept us in check, making sure our environment
    stayed optimized.'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*例如*：迁移后，我们有一支云运营团队准备就绪，负责监控和故障排除。自动化的成本预警系统被设置，以便捕捉到任何成本激增，且每周的回顾帮助我们保持检查，确保环境保持优化。'
- en: In short, moving to the cloud requires more than just technical planning. It’s
    about getting the whole business on board, setting clear goals, and having a solid
    strategy in place. If we cover all our bases, we will make the transition smooth
    and avoid surprises down the line.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，迁移到云端不仅仅需要技术规划。更重要的是让整个业务都参与进来，设定明确的目标，并制定坚实的战略。如果我们全面覆盖各个方面，迁移将会顺利进行，避免未来的意外。
- en: Collaborative learning is key
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 协作学习至关重要
- en: In summary, encouraging collaboration is key to closing the skills gap and keeping
    our team sharp. Set up internal training sessions, invest in cloud certifications,
    and make sure documentation is easy to access and up to date. When everyone shares
    knowledge and works together, we will avoid the bottlenecks and confusion that
    can come from working in silos. Make sure the whole team is moving forward with
    the same understanding—it’ll pay off in the long run.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，鼓励协作是弥合技能差距并保持团队敏锐的关键。组织内部培训，投资云认证，确保文档易于访问并且是最新的。当每个人共享知识并合作时，我们将避免由于孤立作业而产生的瓶颈和困惑。确保整个团队在同一理解下前进——这在长期来看将大有裨益。
- en: In the next section, we will discuss how your team should be working together
    to form the appropriate disaster recovery plans and ensure your data is backed
    up safely.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将讨论你的团队应该如何共同合作，制定适当的灾难恢复计划，并确保你的数据安全备份。
- en: Inadequate Disaster Recovery & Backup Plans
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不足的灾难恢复和备份计划
- en: '**Disaster recovery** (**DR**) often gets pushed to the back burner in cloud
    operations, with many businesses thinking their cloud provider will handle it
    all. But that’s a dangerous assumption. While cloud providers offer some built-in
    redundancy, the responsibility for disaster recovery falls on you. Without a solid
    DR plan that’s regularly tested, we’re opening the door to massive downtime and
    potential data loss. We can’t just hope our cloud setup will bounce back after
    a failure, we need a clear, tested strategy in place.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**灾难恢复**（**DR**）通常在云操作中被推到次要位置，许多企业认为他们的云提供商会处理所有问题。但这是一个危险的假设。虽然云提供商提供了一些内建冗余，但灾难恢复的责任在于你。没有一个经过定期测试的可靠灾难恢复计划，我们就等于打开了大规模停机和潜在数据丢失的大门。我们不能只是希望云设置在故障后会自动恢复，我们需要一个清晰、经过测试的策略。'
- en: We’ll walk through the essential components of building a comprehensive disaster
    recovery and backup plan, the critical difference between **Recovery Point Objective**
    (**RPO**) and **Recovery Time Objective** (**RTO**), and strategies for tackling
    data loss, instance failures, and availability zone outages. The goal is to ensure
    our systems can bounce back faster and keep running, even when things go wrong.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讲解构建全面的灾难恢复和备份计划的关键组成部分，**恢复点目标**（**RPO**）与**恢复时间目标**（**RTO**）之间的关键区别，以及应对数据丢失、实例故障和可用区故障的策略。目标是确保我们的系统即使在出现问题时，也能更快地恢复并继续运行。
- en: Building a Comprehensive Backup Plan
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建全面的备份计划
- en: Our DR strategy isn’t just a nice-to-have; it’s essential to keeping our business
    running when things go sideways. We need to think beyond basic backups and start
    building redundancies across multiple regions. Use cloud native tools like AWS
    Elastic Disaster Recovery, Azure Site Recovery, or GCP Backup & Restore to ensure
    that if one region fails, our services can seamlessly switch to another. Think
    about failover mechanisms, automatic scaling, and how fast we can get critical
    systems back online.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的灾难恢复（DR）策略不仅仅是一个可有可无的选项；它对于确保我们的业务在出现问题时继续运行至关重要。我们需要超越基本的备份，开始在多个区域构建冗余。使用像AWS
    Elastic Disaster Recovery、Azure Site Recovery或GCP Backup & Restore这样的云原生工具，确保如果一个区域发生故障，我们的服务能够无缝切换到另一个区域。考虑故障转移机制、自动扩展，以及我们如何尽快将关键系统恢复上线。
- en: There are many considerations to be made when formulating a comprehensive backup
    plan.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 制定全面备份计划时需要考虑的因素有很多。
- en: RPO vs RTO
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RPO与RTO
- en: 'Firstly, let’s start with the definition of both terms:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们从两个术语的定义开始：
- en: '**Recovery Point Objective (RPO)**: This is the maximum amount of data loss
    that we can sustain in the event of some sort of failure. Ask yourself, “*how
    much data can my business afford* *to lose?*”.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恢复点目标（RPO）**：这是在发生某种故障时我们能够承受的最大数据丢失量。问问自己：“*我的业务能承受多少数据丢失？*”。'
- en: A retail store can probably afford to have a high RPO. That is, in the event
    of a failure, they can support a data loss going back to the previous day’s close
    of business.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 零售商店可能能够承受较高的RPO。也就是说，在发生故障时，它们可以支持数据丢失回溯到前一天的营业结束时。
- en: A financial institution, on the other hand, cannot afford the loss of data and
    needs the RPO to be as low as possible, into the minutes, or even zero in some
    cases.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一方面，金融机构不能承受数据丢失，需要将RPO保持在尽可能低的水平，甚至在某些情况下为零。
- en: '**Recovery Time Objective (RTO)**: This is the maximum amount of time that
    can elapse whilst we are restoring our environment.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恢复时间目标（RTO）**：这是在恢复环境时所能容忍的最长时间。'
- en: Ask ourselves, “How much business do I want to lose in the event of a failure?”.
    And really, we don’t want to lose any but in the event of a failure, time is a
    factor.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 问问自己：“在发生故障时，我愿意失去多少业务？”实际上，我们并不希望失去任何业务，但在故障发生时，时间是一个关键因素。
- en: Looking back at our two examples above, a retail store that may trade Monday
    - Friday, 9:00 am until 5:00 pm may be able to sustain an RTO of 24 - 48 hours
    (about 2 days). After all, system failures only happen on a Friday afternoon right,
    just as we’re about to go for a relaxing weekend? Joking aside, in our retail
    example, a large RTO can be absorbed.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 回顾我们上面的两个例子，一个零售商店可能在周一至周五，早上9点到下午5点营业，可能能够承受24到48小时（大约2天）的恢复时间目标（RTO）。毕竟，系统故障总是在周五下午发生，对吧？就在我们准备去度过一个轻松的周末时发生？开个玩笑，在我们的零售例子中，较大的RTO是可以接受的。
- en: Our financial institution, on the other hand, will need a very low RTO, in some
    cases lower than an hour.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一方面，我们的金融机构需要一个非常低的RTO，在某些情况下，甚至低于一小时。
- en: 'There are many ways we can build on our RPO and RTO strategy:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过许多方式来完善我们的RPO和RTO策略：
- en: Customer **Service Level Agreements** (**SLA**) / **Service Level** **Objectives**
    (**SLO**)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户**服务水平协议**（**SLA**）/**服务水平目标**（**SLO**）
- en: Technical objectives and constraints
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术目标和约束
- en: Industry-level compliance and regulatory requirements
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行业级别的合规性和监管要求
- en: However, it would not be recommended to decide our disaster recovery plan on
    just one of these factors. It’s important to ensure that all three factors are
    considered in a collaborative approach.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仅仅根据这些因素之一来决定我们的灾难恢复计划并不可取。确保这三大因素都在协作的框架下进行考虑非常重要。
- en: The Customer SLA / SLO’s are decided at a high level and placed into contracts
    by executives and sales representatives. However, these cannot be honored if the
    technical objectives are not aligned.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户的SLA / SLO是由高层决定的，并由高管和销售代表写入合同。然而，如果技术目标没有对齐，这些协议就无法得到履行。
- en: The technical team can set up a disaster recovery plan and configure backup
    plans, however, these cannot be effective without a set of clear goals. There
    may also be technical constraints binding the technical team from delivering the
    correct result.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术团队可以制定灾难恢复计划并配置备份计划，然而，没有明确的目标，这些措施是无法有效的。也许有些技术约束会限制技术团队交付正确结果的能力。
- en: The technical and executive teams also need to be across industry-level requirements
    for fear of commercial penalties or loss of certain accreditations.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术团队和高层管理团队还需要了解行业级别的要求，以防止遭受商业处罚或失去某些认证。
- en: Collaboration is key to building a comprehensive, clear, concise disaster recovery
    plan.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 协作是构建全面、清晰、简明灾难恢复计划的关键。
- en: Disaster Recovery Strategy
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 灾难恢复策略
- en: Having a DR plan is only half the battle, testing it is where the real work
    begins. We can’t just set it and forget it. Run regular disaster recovery drills
    and simulate outages to see how our team and infrastructure respond. Test our
    backups, run failover scenarios, and make sure everything works as expected. It’s
    better to find out now that something’s broken rather than when an actual disaster
    hits. If our backups are out of date or corrupted, we will be in for a nasty surprise
    when we need them most.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有灾难恢复（DR）计划只是战斗的一半，测试它才是实际工作的开始。我们不能仅仅设置好然后就忘记它。需要定期进行灾难恢复演练，模拟停机情况，看看我们的团队和基础设施如何响应。测试我们的备份，进行故障切换场景演练，确保一切按预期工作。现在发现问题总比在真正的灾难发生时才知道要好。如果我们的备份过时或损坏，那么当我们最需要它们时，将会迎来一个可怕的惊喜。
- en: 'It’s important to ensure that we are planned and practiced across some of the
    most common scenarios. Testing disaster recovery strategies are critical for making
    sure our workloads can bounce back when things go wrong. It’s not just about having
    a plan—it’s about reducing downtime and getting everything back online faster
    when issues hit. Consider the following three main scenarios and ask yourself
    the rhetorical question of, “*How am I going to recover from this?*” as you form
    your strategy:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 确保我们已经针对一些最常见的场景进行了计划和演练是非常重要的。测试灾难恢复策略对于确保我们的工作负载在出现问题时能够恢复至关重要。这不仅仅是拥有一个计划——它还关乎减少停机时间，并在问题发生时更快地恢复正常。请考虑以下三种主要场景，并在制定策略时，问问自己这个反问句：“*我该如何从中恢复？*”：
- en: Accidental data loss
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 意外数据丢失
- en: If someone drops the wrong table in the database or a customer record is corrupted
    in production, how do we recover the data? Data loss isn’t just constrained to
    databases either. Think about object storage in Amazon S3, Azure BLOB Storage
    or Google Cloud Storage. What about file storage on server-attached volumes such
    as Amazon EBS, Azure Disk Storage, or a Google Persistent Disk?
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人在数据库中删除了错误的表或生产环境中的客户记录损坏了，我们如何恢复数据？数据丢失不仅限于数据库。考虑亚马逊 S3、Azure BLOB 存储或
    Google Cloud 存储中的对象存储。以及像亚马逊 EBS、Azure 磁盘存储或 Google 持久磁盘这样的服务器附加卷上的文件存储。
- en: For databases, we need to consider some level of **Point In Time Restore** (**PITR**).
    This can help protect against accidents, deletes, or writes on our database, allowing
    us to restore to a particular point in time, to a granularity of minutes. PITR
    uses database features such as transaction logs within the relevant database technology
    to achieve this.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据库，我们需要考虑一定程度的**时间点恢复**（**PITR**）。这可以帮助防止数据库上的意外、删除或写入，使我们能够恢复到特定时间点，精确到分钟级。PITR
    使用数据库技术中的事务日志等数据库特性来实现这一点。
- en: Enabling PITR on our database can bring our RPO down to as minimal as possible,
    in the range of 0 - 15 minutes, depending on the choice of database engine.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的数据库上启用 PITR 可以将我们的 RPO 降低到尽可能小的范围，范围为 0 - 15 分钟，具体取决于数据库引擎的选择。
- en: For object storage, protecting against accidental deletion or writing of data
    has a simple but powerful setup. Enabling versioning on our object store and enabling
    multi-factor authentication on deletion of objects are just two ways to protect
    our data. If someone accidentally overwrites a copy of our object, we can revert
    to the previous version. This has a very similar effect to PITR with databases,
    lowering our RPO for object store to practically zero.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于对象存储，防止数据的意外删除或写入具有简单而强大的设置。在对象存储上启用版本控制，并在删除对象时启用多因素身份验证，只是保护数据的两种方法。如果有人意外覆盖了我们对象的副本，我们可以恢复到之前的版本。这与数据库的
    PITR 具有非常相似的效果，将我们对象存储的 RPO 降低到几乎为零。
- en: Block storage is far more difficult to protect than objects or databases. As
    it’s a block system based on snapshots in time, we’re restricted to just what’s
    available in the last snapshot in time. For this reason, it would be recommended
    to offload persistent data into managed shared data services such as Amazon EFS
    or FSX, Azure Files, or Google Cloud File Store. These act in a similar way to
    NAS devices attached to our servers which can then be backed up separately with
    more granular backup policies. Block storage should only be used for ephemeral
    applications.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 块存储比对象或数据库更难保护。因为它是基于时间快照的块系统，我们只能使用最后一个时间快照中可用的内容。因此，建议将持久数据转移到托管共享数据服务，例如亚马逊
    EFS 或 FSX、Azure Files 或 Google Cloud 文件存储。这些服务类似于附加到我们服务器的 NAS 设备，可以使用更精细的备份策略单独进行备份。块存储应仅用于短暂的应用程序。
- en: Instance Loss
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实例丢失
- en: 'Within your architecture, you probably have a number of compute or database
    instances. This section applies to any of the below instances, but is not limited
    to:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的架构中，您可能有多个计算或数据库实例。本节适用于以下任何实例，但不限于：
- en: Amazon Web Services
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊网络服务
- en: EC2 Instances
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: EC2 实例
- en: ECS Containers
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECS 容器
- en: EKS Nodes
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: EKS 节点
- en: Lambda Functions
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lambda 函数
- en: RDS Instances
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: RDS 实例
- en: Microsoft Azure
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Azure
- en: Virtual Machine
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟机
- en: Kubernetes Service (AKS)
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 服务（AKS）
- en: Container Instances (ACI)
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器实例（ACI）
- en: Azure Functions
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 函数
- en: Azure Database
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 数据库
- en: Google Cloud Platform
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 云平台
- en: Compute Engine Instances
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算引擎实例
- en: Kubernetes Engine (GKE) Nodes
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 引擎（GKE）节点
- en: Cloud Run Containers
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud Run 容器
- en: Cloud Functions
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云函数
- en: Google Cloud SQL
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 云 SQL
- en: Consider in our architecture what happens when any of these items go down.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑在我们的架构中，当这些项目中的任何一个关闭时会发生什么。
- en: It’s always a good idea to plan this in detail. Draw out the architecture in
    a diagram and start to consider what happens if we take out a single resource.
    What’s the impact on our architecture? Do we have a single point of failure?
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 始终详细规划是个好主意。在图表中绘制架构，并开始考虑如果我们取出单一资源会发生什么。我们的架构会受到什么影响？我们是否有单一故障点？
- en: '![](img/B22364_11_1.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22364_11_1.jpg)'
- en: Figure 11.1-Reviewing an architecture for single points of failure
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 - 检查单点故障的架构
- en: For most compute-level services there are a couple of simple but effective ways
    of protecting against the loss of an instance.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数计算级服务，有几种简单而有效的方法可以防止实例丢失。
- en: '**Load Balancing**: By placing a Load Balancer in front of our workload, we
    can take advantage of many features that can help protect our workload.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡**: 通过在工作负载前面放置负载均衡器，我们可以利用许多功能来帮助保护我们的工作负载。'
- en: Separating load across multiple instances.
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将负载分配到多个实例上。
- en: SSL offloading
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSL卸载
- en: Edge-level network protection (WAF, DDoS protection, etc)
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边缘级网络保护（WAF、DDoS保护等）
- en: By using a load balancer, even in a single instance situation, we are shielding
    our instance from direct internet traffic, applying protection in layers.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即使在单实例情况下，通过使用负载均衡器，我们也能将实例与直接的互联网流量隔离，应用层次化的保护。
- en: '**Auto Scaling Groups**: If our service is ephemeral by design then placing
    it into an auto scaling group can really help our disaster recovery efforts. An
    auto scaling group (provided by Amazon EC2 Auto Scaling, Azure Virtual Machine
    Scale Sets, Google Compute Engine Autoscaler) can add an extra instance as required
    should our instance become overwhelmed with load. It can also monitor the health
    of our instance whilst it’s launched and then in the event it is considered unhealthy,
    will replace it with a fresh instance providing a level of auto-healing.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动扩展组**: 如果我们的服务设计上是短暂的，那么将其放入自动扩展组可以大大帮助我们的灾难恢复工作。一个自动扩展组（由Amazon EC2自动扩展、Azure虚拟机规模集、Google计算引擎自动扩展器提供）可以在我们的实例负载过重时按需添加额外实例。它还可以在实例启动时监控其健康状况，并在认为实例不健康时，用新的实例替换它，提供一定的自动修复功能。'
- en: Like the load balancer, using an autoscaling group, even in a single instance
    environment, can provide essential protection.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 像负载均衡器一样，即使在单实例环境中，使用自动扩展组也能提供必要的保护。
- en: Combining both services together can provide a strategy that can apply our workload
    across multiple network subnets or availability zones.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 将这两项服务结合起来，可以提供一种策略，将我们的工作负载跨多个网络子网或可用区进行分配。
- en: 'For database instances, this should be less complicated. Most managed database
    instances can be protected:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据库实例，这应该不会太复杂。大多数托管数据库实例都可以进行保护：
- en: '**AWS RDS**: Uses multi-AZ configurations to automatically replicate our database
    across multiple Availability Zones for high availability and automatic failover.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS RDS**: 使用多可用区（multi-AZ）配置，将我们的数据库自动复制到多个可用区，以实现高可用性和自动故障转移。'
- en: '**Azure SQL Database**: Offers Zone Redundant Configurations to replicate data
    across Availability Zones, ensuring resilience and high availability. For more
    advanced setups, we’ve got geo-replication and failover groups with Azure SQL
    Managed Instance and Azure Database for MySQL/PostgreSQL.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure SQL数据库**: 提供跨可用区的数据复制的区冗余配置，以确保弹性和高可用性。对于更复杂的配置，我们提供了地理复制和故障转移组功能，适用于Azure
    SQL托管实例以及Azure MySQL/PostgreSQL数据库。'
- en: '**Google Cloud SQL**: Provides high availability configurations by replicating
    our database across multiple zones within a region. If one zone goes down, failover
    kicks in automatically. For distributed workloads, Cloud Spanner and Bigtable
    offer built-in replication across zones and even regions for global resilience.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Cloud SQL**: 通过将我们的数据库跨区域内的多个可用区进行复制，提供高可用性配置。如果某个可用区出现故障，故障转移将自动启动。对于分布式工作负载，Cloud
    Spanner和Bigtable提供了内建的跨可用区，甚至跨区域的复制，以实现全球弹性。'
- en: 'Each provider has its own approach to multi-zone and multi-region setups, but
    the goal’s the same: *keeping our databases running even when things* *go sideways*.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 每个云服务提供商在多可用区和多区域设置方面有不同的方案，但目标是一样的：*即使遇到问题也能保持数据库运行*。
- en: Availability Zone failure
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可用区故障
- en: The third and final type of scenario to be considered is the major failure without
    the local data center or provider.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 需要考虑的第三种也是最后一种情况是没有本地数据中心或提供商的重大故障。
- en: Global Cloud Infrastructure Explained
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 全球云基础设施解读
- en: '**Amazon Web Services (AWS)**: AWS has Regions, which are geographically separated
    areas, and each region has multiple Availability Zones (AZs). These AZs are isolated
    data centers that give us high availability and redundancy.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**Amazon Web Services (AWS)**: AWS有多个区域（Regions），这些区域是地理上独立的，每个区域都有多个可用区（AZ）。这些AZ是独立的数据中心，能为我们提供高可用性和冗余性。'
- en: '**Google Cloud (GCP)**: GCP follows a similar setup with Regions that are geographically
    distinct, and inside those regions, we’ve got Zones, which work just like AWS’s
    AZs. Each zone is its own isolated location for failover and redundancy.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**Google Cloud (GCP)**: GCP采用与AWS类似的架构，拥有地理上独立的区域（Regions），在这些区域内部，我们有多个可用区（Zones），其作用与AWS的AZ相似。每个可用区都是一个独立的故障转移和冗余位置。'
- en: '**Microsoft Azure**: Azure also has Regions and Availability Zones (AZs), just
    like AWS and GCP, to ensure our workloads stay resilient. But Azure also adds
    something called Availability Sets. These help us spread our VMs across different
    hardware clusters within a data center, giving us an extra layer of protection
    against localized failures.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**Microsoft Azure**：Azure与AWS和GCP一样，也有区域（Regions）和可用区（Availability Zones，AZs），以确保我们的工作负载保持弹性。但Azure还增加了称为可用性集（Availability
    Sets）的功能。这些功能帮助我们将虚拟机（VM）分布在数据中心内的不同硬件集群上，为我们提供额外的保护，以防局部故障。'
- en: When we’re building our architecture, we will need to consider how we spread
    the workload across varying locations. Ensuring that we have at least the ability
    to fail over to another Zone / AZ is important and some services account for this
    in their feature sets.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建我们的架构时，我们需要考虑如何在不同位置之间分配工作负载。确保我们至少能够切换到另一个可用区（Zone / AZ）是非常重要的，某些服务在其功能集中已考虑到了这一点。
- en: Database services allow for Multi-AZ or Redundant zone configurations. This
    means that if a zone fails our database will fail over within the shortest possible
    time. This is an optional configuration and often has cost implications, but the
    cost is to cover the extra instances that are configured in the background and
    then replicated in real-time. In most cases, this is a transparent configuration,
    once the option is selected, it then just happens and is often easy to take for
    granted and consider disabling to save costs. This is the insurance policy we
    didn’t know we needed and sometimes didn’t realize got utilized, as there are
    many reasons to use Multi-AZ configurations.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库服务允许进行多可用区（Multi-AZ）或冗余区配置。这意味着，如果某个可用区出现故障，我们的数据库将在最短的时间内进行故障转移。这是一个可选配置，通常会有成本影响，但成本是用来覆盖后台配置的额外实例，并且实时进行数据复制。在大多数情况下，这是一种透明的配置，一旦选择了该选项，它就会自动发生，通常我们容易理所当然地认为它是默认开启的，甚至可能会考虑禁用以节省成本。这就是我们不知道需要但有时会被充分利用的保险政策，因为有很多理由使用多可用区配置。
- en: Automatic failover of an AZ
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用区的自动故障转移
- en: Less downtime during configuration changes by applying them to the standby instance
    first and then switching over
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过先将配置应用于备用实例，再进行切换，减少配置更改期间的停机时间
- en: The ability to take backups without impacting the performance of the primary
    node by taking them from the standby instances
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过从备用实例进行备份，避免对主节点性能的影响
- en: Other options to consider for databases could be a read replica instance instead.
    This is an instance that we would purposefully configure and use as a read-only
    data source for things like Business Intelligence reporting or backups, or maybe
    even customer access. These can be promoted to primary nodes in the event of a
    failure, so it makes sense to run our read replica in another AZ/Zone too.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 其他可考虑的数据库选项可能是使用只读副本实例。这是我们有意配置并作为只读数据源使用的实例，适用于商业智能报告、备份，甚至可能是客户访问。这些副本实例在故障发生时可以提升为主节点，因此也有必要将我们的只读副本部署在另一个可用区。
- en: For compute instance types, the methods discussed in instance loss are generally
    the same for AZ/Zone failure. Just make sure we configure our Load Balancers and
    Scaling groups to be spread across 2 or more Zones. This will ensure they are
    highly available and don’t create a single point of failure.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于计算实例类型，实例丢失中讨论的方法通常与可用区（AZ）/区域（Zone）故障时相同。只需确保我们将负载均衡器和扩展组配置为跨2个或更多可用区，这样可以确保它们高度可用，并且不会形成单点故障。
- en: Wrapping up Disaster Recovery and Backup
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结灾难恢复与备份
- en: In short, disaster recovery is something we can’t afford to leave unplanned
    or untested. It’s about more than just data backups—it’s ensuring that when things
    fail, our services can recover quickly and seamlessly. By focusing on a comprehensive
    strategy that covers RPO, RTO, and multi-zone redundancy, we will be far better
    prepared to handle any disaster that comes our way.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，灾难恢复是我们不能忽视的内容，它不能没有计划或未经过测试。这不仅仅是关于数据备份，还确保当发生故障时，我们的服务能够迅速且无缝地恢复。通过专注于覆盖RPO、RTO和多区域冗余的全面策略，我们将能够更好地应对任何突发灾难。
- en: Whilst a disaster recovery plan is important, it’s also just as important to
    ensure you have up to date runbooks and documentation available for your team
    at the right time. We go into that in more detail in the next section.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然灾难恢复计划很重要，但同样重要的是确保你在合适的时间为团队提供最新的运行手册和文档。我们将在下一节中详细讨论这一点。
- en: Out-of-Date Runbooks and Documentation
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过时的运行手册和文档
- en: Cloud environments evolve at breakneck speed. Infrastructure changes, new services
    are added, scaling happens on the fly, and security updates roll out frequently.
    With so much in motion, it’s easy for documentation and runbooks to fall out of
    date. When that happens, we open the door to operational inefficiencies, miscommunication,
    and mistakes during critical moments. Outdated documentation can lead teams down
    the wrong path when troubleshooting, wasting time, and possibly causing even bigger
    problems. Keeping runbooks and documentation up to date is crucial to maintaining
    smooth operations and ensuring everyone is on the same page when issues arise.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 云环境以惊人的速度发展。基础设施发生变化，新增服务，实时扩展，安全更新频繁推出。在如此多的变动中，文档和操作手册容易过时。一旦发生这种情况，我们就会打开通向运营低效、沟通不畅和关键时刻发生错误的大门。过时的文档会导致团队在故障排除时走错路，浪费时间，甚至可能造成更大的问题。保持操作手册和文档的更新，对于维持顺畅的运营至关重要，确保在问题出现时每个人都能达成共识。
- en: Through this section, we will review the main best practices for ensuring we
    maintain maximum operational efficiency by looking after our documentation and
    runbooks. We will review both the concept of and then some practical steps we
    can take to help keep things well documented.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一部分，我们将回顾一些最佳实践，以确保通过关注我们的文档和操作手册来保持最大运营效率。我们将回顾这一概念，并提出一些实际步骤，帮助我们保持文档的完整。
- en: Maintaining Updated Documentation
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 维护更新的文档
- en: Documentation isn’t something we write once and forget about, it’s a living,
    breathing asset that needs regular care. As infrastructure changes happen, whether
    it’s new deployments, scaling, or changes in architecture, our runbooks and documentation
    should reflect those updates immediately. When documentation is out of sync with
    the current environment, teams are more likely to follow outdated procedures,
    which can lead to slow incident response times or, worse, operational failures.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 文档不是我们写完就忘记的东西，它是一个需要定期维护的活文档。随着基础设施的变化，无论是新部署、扩展，还是架构变化，我们的操作手册和文档应立即反映这些更新。当文档与当前环境不同步时，团队更容易遵循过时的程序，这可能导致响应时间缓慢，或者更糟，发生操作失败。
- en: One of the best ways to manage this is by setting up a documentation review
    schedule, tied directly to key operational events. After every major infrastructure
    update, teams should review relevant runbooks and technical documents to ensure
    they align with the current setup. This review process can be built into change
    management procedures, ensuring that updates to our infrastructure automatically
    trigger documentation reviews. It’s about creating a habit of continuous review
    and alignment across teams to avoid confusion down the line.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 管理此过程的最佳方法之一是建立文档审查计划，直接与关键操作事件挂钩。在每次重大基础设施更新后，团队应审查相关的操作手册和技术文档，确保它们与当前的设置一致。这个审查过程可以融入变更管理程序，确保我们的基础设施更新自动触发文档审查。这是关于建立持续审查和对齐的习惯，以避免将来出现混乱。
- en: Another more engaging method of ensuring that documentation is up to scratch
    is to utilize a “Game Day”. This could be considered a tabletop exercise or even
    fictional scenarios that are played out in a safe environment. [*Chapter 8*](B22364_08.xhtml#_idTextAnchor224)
    references Game Day’s in more detail.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种更具互动性的方法是通过“游戏日”来确保文档的质量。这可以被视为一种桌面演习，甚至是通过虚拟场景在安全的环境中进行的模拟。[*第8章*](B22364_08.xhtml#_idTextAnchor224)对此有更详细的描述。
- en: Important note
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Implementing ISO 9001 can greatly enhance the process of keeping runbooks, SOPs,
    and documentation up to date in cloud environments. By focusing on document control,
    regular reviews, and continuous improvement through the Plan-Do-Check-Act (PDCA)
    cycle, ISO 9001 ensures consistency and accountability. With its emphasis on risk-based
    thinking and audits, it helps mitigate the risks of outdated documentation, aligning
    well with automation tools like AWS CloudFormation and Azure ARM Templates to
    streamline updates and maintain accuracy.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 实施ISO 9001可以极大地提高在云环境中保持操作手册、标准操作程序（SOP）和文档最新的过程。通过关注文档控制、定期审查和通过计划-执行-检查-行动（PDCA）循环进行持续改进，ISO
    9001确保了一致性和问责制。它强调基于风险的思维和审计，有助于减少过时文档的风险，并与AWS CloudFormation和Azure ARM模板等自动化工具协同工作，以简化更新并保持准确性。
- en: ISO 9001 is an international standard for quality management systems (QMS).
    It provides a framework for organizations to ensure that their processes consistently
    meet customer and regulatory requirements. Focused on improving efficiency and
    maintaining high-quality standards, ISO 9001 emphasizes principles like customer
    focus, leadership, risk-based thinking, continuous improvement, and document control,
    making it a valuable tool for ensuring reliable, repeatable outcomes across any
    industry.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: ISO 9001 是质量管理体系（QMS）的国际标准。它为组织提供了一个框架，确保其流程始终符合客户和监管要求。ISO 9001 侧重于提高效率和保持高质量标准，强调客户导向、领导力、基于风险的思维、持续改进和文档控制等原则，使其成为确保各行业可靠、可重复结果的宝贵工具。
- en: Automating Documentation
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化文档
- en: Manual documentation updates? That’s a fast track to disaster. In fast-moving
    cloud environments, manual updates just won’t cut it. When someone comes to fix
    an incident, that’s time critical, they need to understand why the architecture
    is in the current state it is, before trying to fix something that may make things
    worse. That’s where automation comes in. Tools like AWS CloudFormation, Azure
    ARM templates, and GCP Deployment Manager automatically keep our documentation
    in sync with infrastructure changes, cutting down on human error and ensuring
    we’re always working with up-to-date information.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 手动更新文档？那是通往灾难的快速通道。在快速变化的云环境中，手动更新根本无法满足需求。当有人来处理一个紧急事件时，他们需要在修复可能让问题更糟的地方之前，了解当前架构为何处于这种状态。这时，自动化工具发挥了作用。像
    AWS CloudFormation、Azure ARM 模板和 GCP 部署管理器等工具可以自动将我们的文档与基础设施变更保持同步，减少人为错误，确保我们始终在使用最新的信息。
- en: Take AWS CloudFormation, for example. When we use CloudFormation templates to
    manage our infrastructure, the templates themselves serve as a form of documentation,
    showing exactly how our resources are configured. Similarly, Azure ARM templates
    and GCP Deployment Manager perform the same function. These tools generate real-time
    infrastructure updates, and by using them, we ensure that our documentation is
    never lagging.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以 AWS CloudFormation 为例。当我们使用 CloudFormation 模板管理基础设施时，这些模板本身就作为文档的一种形式，准确展示了我们的资源配置情况。同样，Azure
    ARM 模板和 GCP 部署管理器也具有相同的功能。这些工具生成实时的基础设施更新，通过使用它们，我们确保文档永远不会滞后。
- en: Automating documentation also reduces the human error that comes with manual
    updates. As our cloud infrastructure grows in complexity, keeping track of every
    change manually becomes unmanageable. Automation tools help us streamline this
    process and keep our documentation accurate, up to date, and aligned with our
    current infrastructure.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化文档也减少了手动更新时出现的人为错误。随着我们的云基础设施日益复杂，手动跟踪每个变更变得难以管理。自动化工具帮助我们简化这个过程，确保文档准确、最新，并与当前基础设施保持一致。
- en: Standard Operating Procedures (SOPs)
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准操作程序（SOP）
- en: Our **Standard Operating Procedures** (**SOPs**) are critical to keeping our
    cloud environment running efficiently, but they are only as good as their relevance.
    Like runbooks, SOPs should not be written once and forgotten—they need to evolve
    alongside our infrastructure and workflows. This is especially true in cloud environments
    where rapid changes to architecture or services can render old procedures obsolete.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的**标准操作程序**（**SOP**）对于保持云环境高效运行至关重要，但它们只有在保持相关性时才有价值。像运行手册一样，SOP 不应该一写了之，而是需要随基础设施和工作流程的变化不断演进。在云环境中，架构或服务的快速变化可能使旧有的程序变得过时，这一点尤其重要。
- en: A regular SOP review process is essential. Every time our cloud architecture
    evolves, whether it’s new services being deployed or scaling changes, our SOPs
    should be revisited to ensure they are still relevant. Procedures that were effective
    when we were managing a smaller infrastructure might no longer apply as we scale
    up. Regularly reviewing and updating SOPs ensures that our teams are working with
    the most current information and can execute tasks quickly and efficiently.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 定期审查标准操作程序（SOP）至关重要。每当我们的云架构发生变化，无论是部署新服务还是进行扩展调整，我们都应该重新审视 SOP，以确保它们仍然适用。当我们管理较小的基础设施时有效的程序，在扩展后可能不再适用。定期审查和更新
    SOP 能确保我们的团队始终使用最当前的信息，快速高效地执行任务。
- en: Also, when updating SOPs, make sure to include any lessons learned from incidents
    or outages. If a failure occurs because of a procedural gap or oversight, update
    our SOPs to prevent that from happening again. SOPs aren’t just about handling
    day-to-day operations, they reflect our organization’s continuous improvement
    process.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在更新SOP时，务必包含从事故或停机事件中学到的任何经验教训。如果因程序缺口或疏忽导致故障发生，请更新我们的SOP以防止类似问题的再次发生。SOP不仅仅是处理日常操作，它们反映了我们组织持续改进的过程。
- en: Important note
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The AWS Well-Architected Framework was born out of lessons learned from a large-scale
    outage, where early cloud adopters faced significant challenges in designing resilient,
    scalable architectures.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Well-Architected框架源自一次大规模停机事件的经验教训，当时早期的云计算采用者在设计具有弹性和可扩展架构时面临重大挑战。
- en: The AWS Well-Architected Framework constitutes a set of documented best practices
    (or SOPs) to get the most out of our cloud architecture.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Well-Architected框架由一系列文档化的最佳实践（或SOP）构成，帮助我们最大化云架构的效益。
- en: Let’s look at this more practically.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更实际地看待这个问题。
- en: Documentation and Runbooks in practical terms
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实际操作中的文档和操作手册
- en: So, we’ve talked about the common principles around documentation and SOPs,
    but what practical steps can we take in order to ensure we are following best
    practices around documentation? What technical guidance can we follow?
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们讨论了关于文档和SOP的常见原则，但我们可以采取哪些实际步骤来确保遵循文档最佳实践？我们可以遵循哪些技术指南？
- en: Implement Infrastructure-as-Code (IaC)
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现基础设施即代码（IaC）
- en: '**Tooling**: Use tools like AWS CloudFormation, Azure ARM Templates, and Google
    Cloud Deployment Manager to define and manage our infrastructure as code. These
    tools automatically create templates that serve as live documentation for our
    environment.'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具**：使用AWS CloudFormation、Azure ARM模板和Google Cloud部署管理器等工具，将我们的基础设施定义和管理为代码。这些工具会自动创建模板，作为我们环境的实时文档。'
- en: '**Version Control**: Store these templates in version control systems such
    as Git to track all infrastructure changes over time, allowing for easy rollback
    if necessary and providing an accurate record of changes.'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本控制**：将这些模板存储在Git等版本控制系统中，以跟踪所有基础设施更改，便于必要时进行回滚，并提供准确的变更记录。'
- en: '**Benefits**: Infrastructure-as-Code keeps our documentation aligned with the
    current state of our infrastructure and eliminates the need for manual updates.'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**好处**：基础设施即代码确保我们的文档与当前的基础设施状态保持一致，避免了手动更新的需求。'
- en: Automate Documentation Updates
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化文档更新
- en: '**Tooling**: Integrate tools like Terraform Cloud or CloudFormation Drift Detection
    to automatically detect changes in our infrastructure and update our documentation
    in real-time.'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具**：集成Terraform Cloud或CloudFormation Drift Detection等工具，自动检测基础设施的变化并实时更新文档。'
- en: '**Scripts**: Set up automated scripts that pull changes from infrastructure
    and update documentation in platforms like Confluence or SharePoint.'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**脚本**：设置自动化脚本，从基础设施中提取更改并在Confluence或SharePoint等平台上更新文档。'
- en: '**Benefits**: Automation ensures our documentation is always current without
    relying on manual processes, reducing the likelihood of outdated information causing
    errors.'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**好处**：自动化确保我们的文档始终保持最新，而无需依赖手动流程，减少过时信息导致错误的可能性。'
- en: Use Monitoring and Alerting Systems
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用监控和警报系统
- en: '**Tooling**: Leverage AWS CloudWatch, Azure Monitor, or Google Cloud Operations
    Suite to monitor infrastructure health and changes.'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具**：利用AWS CloudWatch、Azure Monitor或Google Cloud Operations Suite来监控基础设施的健康状况和变化。'
- en: '**Automation**: Automatically trigger reviews of documentation when infrastructure
    changes or alerts are detected. This can be tied into our IT service management
    (ITSM) tools like ServiceNow or Jira.'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化**：当基础设施发生变化或检测到警报时，自动触发文档审核。这可以与我们的IT服务管理（ITSM）工具（如ServiceNow或Jira）集成。'
- en: '**Benefits**: Continuous monitoring ensures that teams are aware of any critical
    changes in infrastructure, providing a chance to proactively update documentation
    or SOPs as needed.'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**好处**：持续监控确保团队及时了解基础设施中的关键变化，提供主动更新文档或标准操作程序（SOP）的机会。'
- en: Centralized Knowledge Management
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集中式知识管理
- en: '**Tooling**: Implement centralized documentation tools such as Confluence,
    Notion, or Azure DevOps Wiki to store and organize all runbooks, SOPs, and technical
    documentation in one place.'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具**：实施集中式文档工具，如Confluence、Notion或Azure DevOps Wiki，将所有操作手册、SOP和技术文档存储并组织在一个地方。'
- en: '**Searchable Database**: Ensure that all documentation is easily searchable
    and accessible to teams.'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可搜索的数据库**：确保所有文档都易于搜索并且团队能够轻松访问。'
- en: '**Benefits**: Centralizing documentation ensures all teams are referencing
    the same up-to-date information, which reduces confusion and miscommunication
    during operations.'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**好处**：集中管理文档确保所有团队都能参考相同的最新信息，这样可以减少操作中的混乱和沟通不畅。'
- en: Embed Documentation into Change Management
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文档嵌入到变更管理中
- en: '**Change Management**: Ensure every infrastructure change includes a review
    of the associated documentation, so updates happen as part of the change process.
    This can also be useful to ensure there is no unintentional drift from the original
    design.'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变更管理**：确保每次基础设施变更都包含相关文档的审查，这样更新成为变更过程的一部分。这也有助于确保没有偏离原始设计的意图。'
- en: '**Ownership**: Assign responsibility for documentation updates to specific
    team members to create accountability.'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**责任划分**：指定具体团队成员负责文档更新，以形成问责制。'
- en: '**Benefits**: Embedding documentation into change management ensures that no
    change is made without the necessary updates to runbooks and SOPs, preventing
    misalignment between infrastructure and documentation.'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**好处**：将文档嵌入到变更管理中，确保每次变更都伴随必要的运行手册和SOP更新，从而避免基础设施和文档之间的不同步。'
- en: Keeping runbooks, documentation, and SOPs up to date is about more than just
    following best practices. It’s about avoiding costly mistakes, reducing downtime,
    and ensuring that our teams can respond effectively in real-time when things go
    wrong. In cloud environments, where things change rapidly, outdated documentation
    is a ticking time bomb that can lead to slow responses, confusion, and even failure
    to resolve critical issues.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 保持运行手册、文档和标准操作程序（SOP）最新，不仅仅是遵循最佳实践。这关乎避免代价高昂的错误、减少停机时间，并确保我们的团队在问题发生时能够有效地实时响应。在云环境中，随着变化迅速，过时的文档就像一颗定时炸弹，可能导致响应缓慢、混乱，甚至无法解决关键问题。
- en: By regularly reviewing and automating updates to our documentation, we’re not
    only improving operational efficiency but also making sure that our teams have
    the right information at their fingertips when they need it most. It’s an investment
    in resilience, agility, and long-term cloud success.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 通过定期审查并自动化更新我们的文档，我们不仅在提高运营效率，还确保我们的团队在最需要的时候能够快速访问正确的信息。这是对韧性、敏捷性和长期云成功的投资。
- en: Runbooks and documentation should start to form part of your culture as you
    shift to the cloud, ignoring this could be devasting to your cloud adoption efforts.
    We talk more about the cultural shift in the next section.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 随着向云端转型，运行手册和文档应当成为你文化的一部分，忽视这一点可能会对你的云采纳工作造成毁灭性影响。我们将在下一节讨论文化转型的问题。
- en: Ignoring the Cultural Shift
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 忽视文化转型
- en: Operating in the cloud isn’t just about adopting shiny new tech—it’s about getting
    teams to work together in a whole new way. Too many organizations dive headfirst
    into cloud projects, thinking it’s all about the tools, but the real challenge
    lies in changing the way people collaborate. If we’re not encouraging cross-functional
    teamwork, our cloud strategy is going to hit a wall fast. Success in the cloud
    hinges not only on infrastructure but also on embracing a fundamental shift in
    how teams interact, share knowledge, and align their efforts to a common goal.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在云端运营不仅仅是采纳闪亮的新技术——更是让团队以全新的方式共同工作。许多组织匆忙投入云项目，认为一切都围绕工具，但真正的挑战在于改变团队协作的方式。如果我们没有鼓励跨职能的团队合作，我们的云战略很快就会碰壁。云成功不仅依赖于基础设施，还依赖于团队如何互动、共享知识以及将他们的努力对准共同目标。
- en: In this section, we’ll get a clear understanding of why collaboration is key
    to making the cloud work. We’ll learn how breaking down silos and getting dev,
    ops, and security teams working together can prevent mistakes and speed things
    up. We’ll also dive into why cross-functional teams and a DevSecOps mindset are
    essential for improving efficiency and security. Plus, we’ll talk about the importance
    of knowledge sharing and keeping everyone in the loop as our cloud setup evolves.
    Lastly, we’ll see how to manage resistance to change and make sure our shift to
    the cloud is smooth and effective.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将清晰地理解为什么协作对于云的成功至关重要。我们将了解如何打破信息孤岛，促使开发、运维和安全团队合作，从而避免错误并加快工作进度。我们还将深入探讨为什么跨职能团队和DevSecOps思维对提高效率和安全性至关重要。此外，我们还将讨论知识共享的重要性，以及在云环境逐步发展的过程中，如何确保每个人都保持同步。最后，我们将探讨如何管理对变革的抵制，确保我们向云转型的过程顺利而有效。
- en: Encouraging Collaboration
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 鼓励协作
- en: Cloud environments thrive when teams are talking to each other. In traditional
    IT setups, development, operations, and security are often siloed. Developers
    push code, ops handle infrastructure, and security keeps an eye on vulnerabilities—everyone’s
    in their own bubble. But in the cloud, we can’t afford that kind of separation.
    Dev, Ops, and Security must always be in sync. Open those lines of communication
    and ensure these teams are working together from the start.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 云环境在团队之间沟通时能够蓬勃发展。在传统IT设置中，开发、运维和安全常常各自为政。开发人员推动代码，运维负责基础设施，安全团队则关注漏洞——每个团队都处在自己的“气泡”中。但在云环境中，我们不能承受这种分隔。开发、运维和安全必须始终保持同步。要打通沟通渠道，确保这些团队从一开始就紧密合作。
- en: Why is this so important? Cloud environments are dynamic, and things change
    fast. Code gets deployed quicker, resources scale up or down, and security threats
    evolve constantly. If our teams aren’t collaborating, one group can make changes
    that might inadvertently cause issues for another. A developer might introduce
    new code that inadvertently weakens security. The operations team might roll out
    changes without knowing how they affect the overall infrastructure. When teams
    are isolated, these changes can slip through the cracks, leading to inefficiencies,
    downtime, or worse—security breaches.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这如此重要？云环境是动态的，变化迅速。代码部署更快，资源扩展或收缩，安全威胁不断演化。如果我们的团队没有协作，一个团队的变动可能会无意中对另一个团队造成问题。开发人员可能会引入新代码，从而无意中削弱安全性。运维团队可能在不知情的情况下推出变更，导致整体基础设施受到影响。当团队之间相互孤立时，这些变更可能会漏网，导致效率低下、停机，甚至更严重的安全漏洞。
- en: Collaboration isn’t just a “nice to have.” It’s the backbone of effective cloud
    operations. Teams need to break down barriers and work as a unit, aligning around
    shared objectives. One of the most effective ways to foster this kind of collaboration
    is through regular check-ins, cross-team meetings, and collaborative problem-solving
    sessions. By creating these open lines of communication, we’re giving the teams
    the space to discuss issues early, share knowledge, and catch problems before
    they become major headaches.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 协作不仅仅是“锦上添花”。它是有效云操作的支柱。团队需要打破障碍，作为一个整体围绕共同目标工作。促进这种协作的最有效方式之一是定期检查、跨团队会议和协作式问题解决会话。通过建立这些开放的沟通渠道，我们为团队提供了早期讨论问题、分享知识、并在问题成为大麻烦之前发现它们的空间。
- en: Breaking Down Silos
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打破信息孤岛
- en: Silos within an organization are a major barrier to collaboration. In the traditional
    IT world, it’s common for teams to have rigidly defined roles and responsibilities.
    Development teams focus on writing code, operations teams handle the deployment
    and maintenance of infrastructure, and security teams monitor for threats and
    vulnerabilities. While this division of labor made sense in the era of on-premises
    infrastructure, it doesn’t align with the flexibility and speed of cloud environments.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 组织内部的信息孤岛是协作的主要障碍。在传统的IT环境中，团队通常有着严格定义的角色和职责。开发团队专注于编写代码，运维团队负责基础设施的部署和维护，安全团队则监控威胁和漏洞。虽然这种劳动分工在传统本地基础设施时代是合理的，但它与云环境的灵活性和速度并不匹配。
- en: In the cloud, we need everyone working together throughout the lifecycle of
    a project. The development team can’t just throw code over the wall to operations
    and walk away. Security can’t afford to stay out of the loop until the end of
    the process. Cloud environments require constant coordination. The flexibility
    and scale that the cloud offers are great, but they also increase complexity—and
    with complexity comes risk. Silos only compound these risks because they lead
    to miscommunication, disjointed workflows, and duplication of effort.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在云环境中，我们需要每个人在项目的整个生命周期中通力合作。开发团队不能仅仅把代码丢给运维然后就走开。安全团队不能等到最后才参与进来。云环境需要持续的协调。云所提供的灵活性和规模是很棒的，但它们也增加了复杂性——而复杂性带来了风险。孤立的部门只会加剧这些风险，因为它们导致了沟通不畅、工作流程割裂以及重复劳动。
- en: So how do we break down these silos? Start by fostering a DevSecOps culture,
    where development, security, and operations work together from day one. The key
    here is shared responsibility. Each team should understand how their work impacts
    the broader system and how they can contribute to a shared goal. We can also implement
    more formal processes like integrated project management systems and regular cross-functional
    team meetings. Breaking down silos takes time, but once teams start collaborating
    more closely, we’ll see fewer bottlenecks, faster problem resolution, and a much
    smoother cloud operation.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如何打破这些孤岛呢？从培养DevSecOps文化开始，让开发、安全和运维从第一天起就共同协作。这里的关键是共享责任。每个团队都应该理解他们的工作如何影响更广泛的系统，并且如何为共同目标作出贡献。我们还可以实施更正式的流程，例如集成的项目管理系统和定期的跨职能团队会议。打破孤岛需要时间，但一旦团队开始更紧密地协作，我们将看到更少的瓶颈、更快的问题解决，以及更加顺畅的云操作。
- en: Think back - Conway’s Law
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下 - 康威定律
- en: As we dive into breaking down silos and pushing for more collaboration across
    teams, it’s worth keeping Conway’s Law in mind (which we covered back in Chapter
    1). This idea reminds us that the way our teams communicate will directly shape
    how our systems turn out. If we’re not working together as one, our cloud architecture
    is going to reflect those gaps. So, getting development, ops, and security on
    the same page isn’t just a nice-to-have, it’s essential if we want to build systems
    that are truly resilient.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入打破孤岛并推动团队间更多合作的同时，值得时刻记住康威定律（我们在第一章中已经讨论过）。这个观点提醒我们，团队间的沟通方式将直接影响系统的最终结果。如果我们没有作为一个整体协同工作，那么我们的云架构就会反映出这些沟通上的漏洞。因此，让开发、运维和安全团队保持一致，不仅仅是锦上添花，而是构建真正具有弹性系统的必要条件。
- en: Cross-Functional Teams
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨职能团队
- en: The creation of cross-functional teams is one of the most effective ways to
    promote collaboration in cloud operations. These teams bring together members
    from development, operations, and security, ensuring that all aspects of the project
    are covered right from the start. No more waiting until the last minute for the
    security team to weigh in on vulnerabilities, or for ops to figure out how to
    scale a new deployment. Everyone is involved from day one, which leads to better
    alignment, faster decision-making, and fewer surprises down the road.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 创建跨职能团队是推动云操作中合作的最有效方式之一。这些团队将开发、运维和安全的成员聚集在一起，确保项目从一开始就涵盖所有方面。再也不需要等到最后一刻才让安全团队介入漏洞评估，或者等运维团队搞清楚如何扩展新的部署。从第一天起，每个人都参与其中，这促使了更好的对齐、更快的决策制定，以及更少的意外情况。
- en: Cross-functional teams aren’t just about getting things done faster—they’re
    about doing them better. Each team member brings their unique expertise to the
    table, and by working together, they can address challenges more holistically.
    For instance, developers know the code, but they may not be aware of the infrastructure
    limitations. Ops knows how to scale, but they might not understand the security
    implications of certain configurations. Security understands vulnerabilities but
    may not be aware of the newest development frameworks. By combining these perspectives,
    we create a more resilient, well-rounded cloud operation.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 跨职能团队不仅仅是为了更快地完成任务——它们更重要的是提升工作质量。每个团队成员都带来了他们独特的专业知识，通过共同合作，他们能够更全面地解决挑战。例如，开发人员了解代码，但他们可能不了解基础设施的限制；运维人员知道如何扩展，但他们可能不了解某些配置的安全影响；安全人员了解漏洞，但可能不了解最新的开发框架。通过将这些不同的视角结合起来，我们可以打造一个更加弹性和全面的云操作。
- en: This approach also fosters a DevSecOps mindset, which is key to cloud success.
    DevSecOps is all about continuous integration and continuous delivery (CI/CD),
    where development and operations work hand-in-hand to automate and streamline
    deployments. This mindset eliminates the friction between development and deployment,
    making it easier to roll out updates and reduce downtime. Security needs to be
    baked into this process from the start, so a DevSecOps approach—where security
    is integrated into development and operations—is essential for protecting our
    cloud environment.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法还培养了DevSecOps思维，这是云成功的关键。DevSecOps注重持续集成和持续交付（CI/CD），开发与运维携手合作，自动化并简化部署过程。这种思维方式消除了开发与部署之间的摩擦，使更新发布变得更加轻松，并减少了停机时间。安全性需要从一开始就融入到这个过程中，因此，DevSecOps方法—将安全性融入开发和运维—对于保护我们的云环境至关重要。
- en: Knowledge Sharing
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 知识共享
- en: Cloud technology is always evolving, and keeping up can feel like a never-ending
    race. If our teams aren’t sharing knowledge, we’ll quickly fall behind. Every
    new tool, every update to our infrastructure, and every security threat needs
    to be understood by everyone involved. That’s where knowledge sharing comes in.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 云技术始终在发展，要跟上变化，感觉像是一场永无止境的竞赛。如果我们的团队不共享知识，我们很快就会落后。每一个新工具、每一次基础设施的更新和每一个安全威胁，都需要所有相关人员了解。这就是知识共享的意义所在。
- en: It’s not enough for one person or team to be an expert. Information needs to
    flow freely between teams so that everyone stays up to speed on what’s happening.
    This can be done through formal channels like training sessions, but it’s often
    more effective to create a culture of informal knowledge sharing. Regular team
    meetings where people can talk about the challenges they’re facing, the new tools
    they’ve found, or the lessons they’ve learned are invaluable.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 仅靠一个人或一个团队成为专家是不够的。信息需要在团队之间自由流动，以确保每个人都能及时了解发生了什么。这可以通过正式渠道如培训课程来实现，但更有效的方法是创建一种非正式知识共享的文化。定期的团队会议，可以让人们讨论他们面临的挑战、发现的新工具或他们学到的经验教训，这些都非常宝贵。
- en: The cloud is complex, and nobody knows everything. But by encouraging our teams
    to share what they know, we can build a stronger, more cohesive operation. When
    one team learns something new, make sure they pass that knowledge on to others.
    This not only helps the team grow but also ensures that knowledge silos don’t
    form. The more our teams share, the more resilient our cloud operations become.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算是复杂的，没人能知道所有的事情。但通过鼓励团队分享所知道的，我们可以建立更强大、更有凝聚力的运作。当一个团队学到新知识时，确保他们将这些知识传递给其他团队。这不仅有助于团队的成长，还能确保知识孤岛的形成。我们团队分享得越多，云运作就会变得越具韧性。
- en: Promoting a DevSecOps Mindset
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推广DevSecOps思维
- en: The DevSecOps mindset is all about breaking down barriers between development
    and operations. In a traditional IT setup, these two teams often work in isolation,
    which can lead to delays, miscommunication, and inefficiencies. However, in a
    cloud environment, development and operations need to work together continuously.
    This approach fosters collaboration, improves efficiency, and allows for faster,
    more reliable deployments.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: DevSecOps思维注重打破开发和运维之间的障碍。在传统的IT架构中，这两个团队往往孤立工作，这可能导致延迟、沟通不畅和效率低下。然而，在云环境中，开发和运维需要持续合作。这种方法促进了协作，提高了效率，并且允许更快速、更可靠的部署。
- en: In a DevSecOps world, developers don’t just write code and hand it off to ops—they’re
    responsible for how that code performs in production too. And ops aren’t just
    there to maintain infrastructure—they’re involved in the development process to
    ensure that everything runs smoothly once it’s deployed. This shared responsibility
    helps catch issues earlier and ensures that the entire team is aligned on the
    goals of the project.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevSecOps的世界里，开发人员不仅仅是编写代码并交给运维—他们还负责代码在生产环境中的表现。运维人员也不只是维持基础设施—他们参与开发过程，确保一旦部署，系统能够平稳运行。这种共同的责任有助于及早发现问题，并确保整个团队在项目目标上达成一致。
- en: Automation plays a huge role here. By automating repetitive tasks—like testing,
    deployment, and monitoring—we free up our teams to focus on higher-level problems.
    Automation also reduces the risk of human error, which is critical in fast-moving
    cloud environments. When everything is automated, we can move faster and deploy
    updates more frequently without worrying about things falling through the cracks.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: Overcoming Resistance to Change
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even when we know collaboration is essential, it’s not always easy to implement.
    Teams that are used to working in silos might resist the shift toward collaboration.
    They may feel like it’s more work or that their expertise isn’t being respected.
    This resistance is natural, but it needs to be addressed if our cloud strategy
    is going to succeed.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: To overcome resistance to change, we need more than just words—we need to demonstrate
    the benefits in real time. One of the most effective ways to do this is by rolling
    out a pilot project. A pilot allows us to test the waters on a smaller scale while
    showing everyone how cross-functional teams can drive real results. By choosing
    a key project, we bring development, operations, and security together from day
    one, breaking down silos and showing how collaboration leads to quicker deployments
    and fewer headaches down the road.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: As we see faster problem resolution and smoother operations, it’s easier to
    get buy-in from the rest of the organization. The beauty of a pilot project is
    that it’s low-risk but high-impact—giving us the evidence we need to prove that
    working together isn’t just more efficient, it’s essential for building resilient
    systems. Once the pilot proves successful, we can expand this approach across
    more teams, making collaboration the new standard.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: Leadership also plays a key role here. Leaders need to set the tone for collaboration,
    showing that it’s not just a passing trend but an essential part of how the organization
    operates. They need to encourage open communication, provide the necessary tools
    and support, and be patient as teams adjust to the new way of working. The cultural
    shift doesn’t happen overnight, but with the right approach, it can transform
    the way our teams operate.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Ignoring the cultural shift when moving to the cloud is one of the biggest mistakes
    an organization can make. It’s not enough to just have the right tools in place,
    we need our teams to work together seamlessly if we want to succeed in the cloud.
    Collaboration, cross-functional teams, continuous learning, and a DevSevOps mindset
    are all crucial to building a resilient cloud operation. Break down silos, foster
    communication, and make sure everyone is aligned on the same goals. Only then
    will we unlock the true potential of the cloud and ensure long-term success.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: As we bring this chapter to a close, we finally look around some of the pitfalls
    and misunderstandings around cloud service providers service level agreements
    and why they should not be your first crutch to lean on.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Developing Around CSP SLAs
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cloud Service Provider** (**CSP**) SLAs might promise high availability,
    but relying solely on these guarantees can leave us vulnerable. Developing resilient
    architectures beyond what the SLAs offer is critical for maintaining uptime and
    ensuring business continuity.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ll dive into why relying solely on cloud provider SLAs isn’t
    enough for real resilience. We’ll break down how to build redundancy with multi-region
    deployments, failover systems, and load balancing to keep everything running smoothly,
    even when the provider hits a bump. We’ll learn how to protect our systems with
    multi-cloud strategies, third-party redundancy, and offsite backups, ensuring
    our data is safe and our operations stay live. Finally, we’ll explore how automating
    failover, load balancing, and autoscaling gives us an edge, minimizing downtime
    and keeping our infrastructure responsive without relying on manual fixes.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: What is a CSP SLA?
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: A **Cloud Service Provider** (**CSP**) SLA is essentially the contract between
    us and our cloud provider, laying out what kind of performance, availability,
    and uptime we can expect from their services. It’s the provider’s way of saying,
    “Here’s what we guarantee,” but with plenty of fine print. These agreements typically
    cover metrics like uptime guarantees, say 99.9% availability, and define the limits
    of the provider’s responsibility. It’s important to understand exactly what’s
    in an SLA because anything outside those boundaries becomes our responsibility,
    not theirs. So, if things go south, we need to know where the line is between
    their liability and what we’re expected to handle.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Building Redundancy Beyond SLAs
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just relying on our cloud provider’s SLA isn’t enough if we want true resilience.
    Sure, they promise high availability, but even a 99.9% uptime guarantee still
    leaves room for downtime, over eight hours a year, in fact. For mission-critical
    systems, we can’t afford to leave it at that. We need to build our own layers
    of redundancy on top of what the CSP guarantees. That means having backup plans
    for when things inevitably go wrong because the question isn’t if, but when. Redundancy
    ensures that our systems stay up and running, even when our provider’s services
    aren’t living up to their promises.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some key steps on how we can build true redundancy and ensure our
    systems stay up, even when our provider’s SLAs fall short:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '**Deploy Across Multiple Availability Zones**: Start by spreading our resources
    across multiple availability zones within a single region. This gives us protection
    against zone-level failures, like hardware issues or localized outages.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Go Multi-Region**: Take it a step further by deploying across multiple regions.
    If one region goes down, our services can automatically failover to another, keeping
    our global operations running smoothly.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Set Up Failover Architectures**: Implement failover systems like hot or cold
    standbys. These systems kick in automatically when a failure occurs, so we don’t
    lose valuable time trying to fix things manually.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use Load Balancers**: Distribute traffic across multiple instances using
    load balancers to avoid overloading any one server. If an instance goes down,
    the load balancer will shift traffic to healthy instances, maintaining service
    availability.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implement Auto-Scaling**: Use auto-scaling to ensure we always have enough
    resources. When demand spikes or systems fail, auto-scaling kicks in, adding more
    instances or resources as needed.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Leverage Backups for Critical Data**: Regularly back up data, and store copies
    in different regions. If the primary storage fails or becomes corrupted, we can
    quickly restore it from another location without losing vital information.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitor and Alert Proactively**: Use tools like CloudWatch or Azure Monitor
    to keep an eye on systems. Set up alerts so we get notified immediately when something
    goes wrong, allowing for faster response times.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test Failover and Redundancy Plans**: Regularly test failover and redundancy
    setups. Don’t wait for an actual outage to see if systems work, run drills to
    make sure everything functions as expected when failure happens.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When it comes to building reliable cloud systems, we can’t just rely on the
    provider’s SLA and hope for the best. True resilience means layering in our own
    redundancy, deploying across multiple availability zones, setting up failover
    systems, and ensuring our infrastructure can handle failures without skipping
    a beat. By taking these practical steps, load balancing, auto-scaling, multi-region
    deployments, etc, we are not just reacting to problems, we are proactively building
    an architecture that can withstand them. The key is to anticipate failure and
    be ready before it happens. That’s how we keep our cloud environment running smoothly,
    no matter what.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for Provider Downtime
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even the biggest cloud providers face outages from time to time, and when that
    happens, we don’t want to be caught flat-footed. Preparing for downtime isn’t
    about waiting for something to go wrong, it’s about building an architecture that
    can handle failure and keep running no matter what. This is where multi-cloud
    architecture, third-party redundancy, and offsite backups come into play. These
    strategies help ensure that, when our provider experiences downtime, our operations
    don’t.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Multi-Cloud Architecture
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Relying solely on one cloud provider is convenient but can sometimes be seen
    as risky when it comes to requiring a tight set of high availability conditions.
    With multi-cloud architecture, we end up spreading our resources across multiple
    cloud providers, think AWS, Azure, and GCP. If one provider goes down, the others
    can pick up the slack, keeping our services live. The key here is not just duplicating
    everything across different clouds but designing the applications to be cloud-agnostic,
    so they can run smoothly on whichever platform is available. It’s not a one-size-fits-all
    approach, but for mission-critical services, it’s a safeguard we can’t afford
    to skip.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Multi-Cloud Technologies
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: 'When thinking about going multi-cloud, we will need to consider building on
    frameworks and technologies that are not vendor locked, such as:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'Compute: Terraform/OpenToFu, Docker, Kubernetes'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: 'Monitoring: Grafana, Prometheus, ELK Stack'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 'Devops: Github actions, Gitlab, Jenkins'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: 'Identity: Auth0, Okta'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: Most database technologies are transferable between Cloud providers, especially
    those using more open standards like MySQL and postgresql that are not license
    bound.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Third-Party Redundancy
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another way to protect against provider downtime is by integrating third-party
    redundancy. This means using external services or vendors to back up critical
    functions. For example, if our primary cloud provider manages the database, consider
    using a third-party service to handle backups or key pieces of infrastructure.
    This way, even if the provider goes down, the data remains secure and accessible.
    The goal is to reduce reliance on any single vendor so that all critical operations
    are always covered from multiple angles.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Offsite Backup in Other Cloud / Hybrid Solutions
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For ultimate peace of mind, look beyond just one cloud provider and assess the
    viability of offsite backups in another cloud or a hybrid solution. This is the
    last line of defense, storing data or essential resources in a different environment
    altogether. By maintaining backups on a separate cloud provider or even on-premises,
    we ensure that if our main provider suffers a major outage or loss, our data and
    systems are still recoverable from a separate location. Hybrid solutions can also
    come into play here, giving us a mix of on-prem and cloud resources to work with.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: The key takeaway? Never rely on just one provider to keep everything running.
    By implementing a multi-cloud strategy, integrating third-party redundancy, and
    maintaining offsite backups, we are preparing for the inevitable hiccups in cloud
    availability. That way, when provider downtime hits, our systems won’t even flinch.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Trade Offs
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Like any solution or strategy, there are some pros and cons of running a highly
    available multi-cloud architecture:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '| **Pros** | **Cons** |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
- en: '| Increased Resilience and AvailabilityBy leveraging multiple cloud providers,
    we reduce the risk of downtime since a failure in one provider can be mitigated
    by resources from another. | Increased ComplexityManaging workloads across multiple
    providers adds layers of complexity, especially in terms of architecture, monitoring,
    and security. |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
- en: '| Avoid Vendor Lock-InUsing multiple cloud platforms prevents us from becoming
    too dependent on a single provider, giving us more flexibility to switch services
    or negotiate pricing. | Higher Learning CurveTeams need to be proficient in multiple
    cloud platforms, which can mean additional training and expertise are required.
    |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
- en: '| Optimized PerformanceWe can choose the best provider for specific tasks,
    optimizing for speed, latency, or other performance metrics based on the strengths
    of each platform. | Challenging IntegrationIntegrating services and ensuring seamless
    communication between different platforms can be difficult, especially when using
    cloud native tools that aren’t universally compatible. |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
- en: '| Cost ManagementDifferent providers may offer more competitive pricing for
    specific services, allowing us to optimize costs by spreading workloads based
    on pricing models. | Higher Operational CostsWhile multi-cloud may reduce costs
    in certain areas, the added complexity can increase operational overhead, requiring
    more tools, staff, and management. |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
- en: '| Compliance and Geographic FlexibilityMulti-cloud allows us to meet regional
    compliance requirements by distributing data and services across various geographic
    locations and providers. | Latency and Performance VariabilityRunning applications
    across multiple clouds may introduce latency or performance issues when services
    from different providers need to communicate in real-time. |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
- en: Table 11.1 - Pros and Cons of a Highly Available Multi Cloud Architecture
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Real-World Example
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: By way of example, a popular highly regulated Australian financial institution
    attempted to balance their architecture across two cloud providers and ended up
    with a cost factor of 10.4x more than being in a single cloud and, also, created
    latency issues that impacted their RPO and RTO.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to assess the trade-off in these situations.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: Automation for Resilience
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Resilience in the cloud isn’t just about preparing for the worst, it’s about
    automating key processes, so our systems stay ahead of potential issues. By integrating
    failover, load balancing, and autoscaling into our architecture, we ensure that
    services keep running without manual intervention. Here’s how we can blend automation
    with smart architecture choices to build a truly resilient cloud environment.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: Automate Failover
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a service or instance goes down, the last thing we want is to scramble
    for a fix. Automating failover allows traffic to reroute seamlessly, minimizing
    downtime and keeping things running smoothly.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '**Health checks for proactive monitoring**: Services like AWS Route 53 health
    checks, Azure Traffic Manager, and Google Cloud Load Balancer continuously monitor
    the health of critical endpoints.'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These tools detect when a service is down and automatically reroutes traffic
    to healthy instances. This instant failover means no disruption in service, something
    manual intervention can’t guarantee.
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We should set up health checks for all mission-critical services. For example,
    configuring Route 53 in AWS to reroute traffic to a backup instance if the primary
    fails. Regularly testing these checks ensures they’re working as expected.
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Automated DNS failover**: Leveraging DNS failover ensures that traffic automatically
    shifts to backup regions or resources when issues arise.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated failover keeps traffic flowing, even if an entire region goes offline.
    Instead of manually switching DNS records during an outage, automation reroutes
    traffic instantly.
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Setting up DNS failover policies that shift traffic to backup resources when
    needed. In AWS, we can configure weighted routing policies in Route 53 to distribute
    traffic evenly between primary and secondary resources.
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Load Balancing and Autoscaling
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Balancing traffic and scaling resources automatically is crucial for preventing
    overloads and maintaining performance during spikes in demand. Let’s unpack each
    option:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '**Load balancing for seamless traffic distribution**: Load balancers, such
    as Elastic Load Balancing (ELB) in AWS, Azure Load Balancer, and Google Cloud
    Load Balancer, spread traffic across multiple instances to ensure no single instance
    is overwhelmed.'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By distributing traffic, load balancers keep systems running smoothly, even
    during high-traffic periods. They prevent bottlenecks and ensure better availability
    by routing requests to healthy instances.
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We should implement load balancers in our cloud architecture. For example, configuring
    AWS ELB to distribute traffic across multiple availability zones. This way, if
    one instance goes down, traffic is automatically routed to another.
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Autoscaling for dynamic resource management**: Autoscaling ensures that resources
    adjust to demand, scaling up during traffic spikes and scaling down during quieter
    periods.'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Autoscaling optimizes both performance and cost-efficiency. When demand increases,
    it automatically adds resources to handle the load. When things calm down, it
    scales back to avoid unnecessary costs.
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Setting up autoscaling rules based on traffic or resource thresholds. In AWS,
    configuring Auto Scaling Groups to add instances when CPU usage exceeds a certain
    percentage. Regularly reviewing these thresholds ensures they align with our actual
    needs.
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Why Automation is Key for Resilience
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Automation gives us a proactive edge. By setting up failover and autoscaling
    in advance, we ensure that systems react instantly to issues, minimizing downtime.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: Automated systems can detect issues and reroute traffic or scale resources instantly.
    This not only reduces the risk of human error but also ensures that the response
    time is faster than any manual fix.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: Autoscaling helps manage costs by only using the resources needed, while load
    balancing prevents performance issues by evenly distributing traffic.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: By automating failover, load balancing, and autoscaling, we build a resilient
    cloud architecture that handles challenges in real time. The combination of proactive
    monitoring, automatic traffic distribution, and dynamic resource management ensures
    our systems stay responsive and efficient, no matter what happens.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a deep dive into the operational challenges of managing
    cloud environments and learned how to keep systems running smoothly under pressure.
    We covered everything from breaking down cloud provider SLAs to building resilience
    with multi-region deployments, failover setups, and automated scaling. We also
    looked at the value of proactive planning, redundancy, and automation to cut downtime
    and keep the business ticking. Along the way, we explored how to handle provider
    outages, keep documentation up to date, and adapt to the cultural shifts that
    cloud operations demand. Now, we’re equipped with the strategies and tools needed
    to keep our cloud infrastructure resilient and reliable.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be looking at migration strategies from on premise
    architecture to the cloud and even from one cloud provider to another and the
    risks of not addressing cloud security in a cloud native way.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
