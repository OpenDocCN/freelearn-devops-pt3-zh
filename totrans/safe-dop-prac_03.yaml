- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Automation for Efficiency and Quality
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高效率和质量的自动化
- en: Of the factors in the CALMR (Culture, Automation, Lean Flow, Measuring, Recovery)
    approach, automation is the one most associated with the DevOps approach. A great
    deal of energy is devoted by DevOps practitioners to keeping current on trends
    in technology for environments and tooling. These tools, with different functions,
    are tied together to form a toolchain or pipeline.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在CALMR（文化、自动化、精益流、度量、恢复）方法中的因素中，自动化是最与DevOps方法相关的。DevOps从业人员投入了大量精力来跟踪技术趋势，尤其是在环境和工具方面。这些具有不同功能的工具被联系在一起，形成了工具链或管道。
- en: We start our look at different types of tools in our pipeline by looking at
    the foundational tool types every pipeline needs. This includes Agile project
    management, version control systems, and review/documentation tools.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过首先看看每个管道所需的基础工具类型，开始对我们管道中不同类型的工具进行探讨。这些工具包括敏捷项目管理、版本控制系统和审查/文档工具。
- en: '**Continuous Integration** (**CI**) tools stem from build management utilities.
    We will examine tools that create builds and other types of tools that run when
    a build is executed. These include automated testing tools, packaging tools, and
    artifact repositories.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）工具来源于构建管理工具。我们将考察创建构建的工具，以及在构建执行时运行的其他工具。这些包括自动化测试工具、打包工具和工件仓库。'
- en: An extension of CI is the deployment of build packages to staging and production
    environments. We will examine the tool types used in **Continuous Deployment**
    (**CD**), including configuration management, **Infrastructure as Code** (**IaC**),
    and vulnerability scanning tools.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成的扩展是将构建包部署到预发布和生产环境中。我们将考察在**持续部署**（**CD**）中使用的工具类型，包括配置管理、**基础设施即代码**（**IaC**）和漏洞扫描工具。
- en: Automation still relies on people. We will have a look at the ways development
    teams and operations teams can align to create the necessary automation and environments
    using DevOps topologies.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化仍然依赖于人力。我们将探讨开发团队和运维团队如何对齐，以使用DevOps拓扑结构创建必要的自动化和环境。
- en: Finally, we’ll see how people create the automation for the Continuous Delivery
    Pipeline in SAFe® by examining what the system team does in the **Agile Release**
    **Train** (**ART**).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将看到人们如何在SAFe®中为持续交付管道创建自动化，通过检查系统团队在**敏捷发布** **列车**（**ART**）中的工作来实现这一点。
- en: 'In a nutshell, the following topics will be covered in this chapter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，本章将涵盖以下主题：
- en: Pipelines and toolchains
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道和工具链
- en: Continuous integration
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成
- en: Continuous deployment
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续部署
- en: DevOps topologies
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps拓扑结构
- en: The system team
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统团队
- en: Pipelines and toolchains
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道和工具链
- en: 'A toolchain is the set of tools used in DevOps practices in the product development
    life cycle. The classic representation of the toolchain used in DevOps is an infinity
    loop, broken up into a number of functions. Each function or stage is enhanced
    by automation. A representation of this infinity loop, created by Kharnagy, and
    licensed under the Creative Commons Attribution ShareAlike license, is shown in
    the following figure:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 工具链是产品开发生命周期中DevOps实践所使用的一组工具。在DevOps中，工具链的经典表示是一个无限循环，分解成多个功能。每个功能或阶段都通过自动化得到了增强。由Kharnagy创建并依据创作共用署名-相同方式分享（Creative
    Commons Attribution ShareAlike）许可的此无限循环表示如图所示：
- en: '![Figure 3.1 – DevOps toolchain ](img/B18756_03_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1 – DevOps 工具链](img/B18756_03_01.jpg)'
- en: Figure 3.1 – DevOps toolchain
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – DevOps 工具链
- en: 'If we separate the ends of this infinity loop, we see the basis of our pipeline.
    The pipeline orchestrates the operation of all the stages with the exception of
    the monitoring stage. This begins our look at each pipeline stage, as shown in
    the following figure:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将这个无限循环的两端分开，我们就能看到管道的基础。管道协调着所有阶段的操作，唯一例外是监控阶段。这标志着我们对每个管道阶段的探讨开始，如下图所示：
- en: '![Figure 3.2 – DevOps pipeline](img/B18756_03_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2 – DevOps 管道](img/B18756_03_02.jpg)'
- en: Figure 3.2 – DevOps pipeline
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – DevOps 管道
- en: 'We begin our examination of the pipeline by looking at the activities whose
    artifacts set the pipeline in motion: plan and create. These foundational steps
    are illustrated in *Figure 3**.3*:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过查看那些其产物启动管道的活动：计划和创建，开始检查管道。这些基础步骤在*图 3.3*中进行了说明：
- en: '![Figure 3.3 – Pipeline foundations](img/B18756_03_03.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – 管道基础](img/B18756_03_03.jpg)'
- en: Figure 3.3 – Pipeline foundations
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – 管道基础
- en: Let’s start our examination of the CI/CD pipeline by looking at foundational
    tools. We will look at tools that can assist with planning in our value stream
    and monitoring the progress of the overall development process. We’ll also examine
    the tools that act as repositories for the code, tests, configuration scripts,
    and documentation.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过了解基础工具来开始对 CI/CD 管道的检查。我们将探讨能够帮助我们规划价值流并监控整个开发过程进展的工具。同时，我们还将检查作为代码、测试、配置脚本和文档存储库的工具。
- en: Planning with Agile project management tools
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用敏捷项目管理工具进行规划
- en: To look at where we are from request to release, we need to find a way to understand
    what we must do, and what the progress is of those steps. There are a large variety
    of methods to achieve this, from physical Kanban boards to Excel spreadsheets.
    As teams deal with remote and geographically distributed ways of working, Agile
    project management tools are a popular method for doing this.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看从请求到发布的进展，我们需要找到一种方式来理解我们必须做什么，以及这些步骤的进展如何。实现这一目标的方法有很多，从物理看板到 Excel 表格。随着团队在远程和地理分布的工作方式下展开合作，敏捷项目管理工具成为了流行的选择。
- en: Agile project management tools allow for the creation and update of work items.
    Progress on the work items is displayed on either a Kanban board or a list of
    issues. Recording the work items and their progress allows for easy collection
    of progress metrics, such as lead time.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷项目管理工具允许创建和更新工作项。工作项的进展可以通过看板或问题列表进行显示。记录工作项及其进展有助于轻松收集进度指标，例如交付周期。
- en: In addition, work items can be linked to branches in version control and executions
    in a CI/CD pipeline tool. This allows for a trail of when a change was released
    throughout the entire pipeline.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，工作项可以与版本控制中的分支和 CI/CD 管道工具中的执行进行关联。这允许在整个管道中跟踪更改何时发布。
- en: Leading Agile project management tools include Jira and Trello, both by Atlassian,
    Azure DevOps by Microsoft, Digital.ai Agility (formerly known as VersionOne),
    IBM Engineering Work Management (formerly known as IBM Team Concert), and Broadcom
    Rally. In addition, many version control tools such as GitHub and GitLab include
    Agile project management functions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 领先的敏捷项目管理工具包括 Atlassian 的 Jira 和 Trello，微软的 Azure DevOps，Digital.ai Agility（前身为
    VersionOne），IBM 工程工作管理（前身为 IBM Team Concert）以及 Broadcom Rally。此外，许多版本控制工具，如 GitHub
    和 GitLab，也包括敏捷项目管理功能。
- en: Creating code and documentation
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建代码和文档
- en: Version control has been an important part of software development since the
    1990s. With version control, multiple developers can work on the same code base
    without fear of deleting each other’s changes. To accomplish this, developers
    create a branch that contains their changes. When the time comes to share these
    changes, they merge the changes back into a shared branch where any differences
    are resolved. Merges can also be effective points for other developers to review
    any code changes going to the shared branch.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制自 1990 年代以来就是软件开发的重要组成部分。通过版本控制，多个开发人员可以在同一代码库上工作，而不必担心删除彼此的更改。为此，开发人员会创建一个包含其更改的分支。当需要共享这些更改时，他们会将更改合并回共享分支，并解决任何差异。合并也是其他开发人员审查即将合并到共享分支中的代码更改的有效时机。
- en: These days, code is not the only artifact kept in version control. Testing scripts
    used for automated testing can be kept in version control. Text files that are
    used for configuring staging and production environments are also kept in version
    control. In short, anything that is text that refers to any change or release
    is kept in version control. As we saw in [*Chapter 1*](B18756_01.xhtml#_idTextAnchor014),
    *Introducing SAFe® and DevOps*, when looking at Flickr, a common version control
    system between Dev and Ops is best.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，代码不再是唯一保存在版本控制中的工件。用于自动化测试的测试脚本也可以保存在版本控制中。用于配置暂存和生产环境的文本文件同样会保存在版本控制中。简而言之，任何涉及更改或发布的文本都会保存在版本控制中。正如我们在
    [*第 1 章*](B18756_01.xhtml#_idTextAnchor014) 中看到的，*介绍 SAFe® 和 DevOps*，在观察 Flickr
    时，开发与运维之间的常见版本控制系统是最理想的。
- en: The most prevalent version control system for code is Git, invented by Linus
    Torvalds, which was used as the repository for the Linux operating system. Git
    is a distributed version control system that allows copies of the entire repository
    to be easily replicated, even to developers. Even with the ease of replication,
    there are Git hosting solutions available that allow organizations to centralize
    the repositories to an *origin*. The most popular Git hosting products include
    Bitbucket by Atlassian, GitHub, GitLab, and Azure DevOps.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最流行的代码版本控制系统是 Git，它由 Linus Torvalds 发明，曾作为 Linux 操作系统的仓库。Git 是一个分布式版本控制系统，允许整个仓库的副本轻松复制，甚至可以复制到开发人员那里。尽管复制非常简便，但仍然有
    Git 托管解决方案，允许组织将仓库集中到一个*源*。最受欢迎的 Git 托管产品包括 Atlassian 的 Bitbucket、GitHub、GitLab
    和 Azure DevOps。
- en: Documentation is another important artifact created for product development.
    **Non-Functional Requirements** (**NFRs**) may be detailed in specifications,
    architecture may be specified in terms of models and diagrams, and **user interface/user
    experience** (**UI/UX**) guidelines may be depicted as wireframes and sketches.
    These initial designs may start from planning and continue in the iterative learning
    cycles.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 文档是产品开发中另一个重要的制品。**非功能性需求**（**NFRs**）可以在规格中详细说明，架构可以通过模型和图表来指定，**用户界面/用户体验**（**UI/UX**）指南可以通过线框图和草图来展示。这些初步设计可能从规划开始，并在迭代学习周期中继续发展。
- en: Document repositories and wiki software are used to store requirements specifications,
    architectural models, UI wireframes, and product and user documentation. Popular
    repositories include Confluence from Atlassian and GitLab Pages.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 文档仓库和 Wiki 软件用于存储需求规格、架构模型、UI 线框图以及产品和用户文档。常见的仓库包括 Atlassian 的 Confluence 和
    GitLab Pages。
- en: Once changes have been added to the repository in version control, the work
    of the CI/CD pipeline can begin. Let’s take a look at the activities that make
    up continuous integration.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦代码更改已添加到版本控制中的仓库，CI/CD 流水线的工作就可以开始。我们来看看构成持续集成的活动。
- en: Continuous integration
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成
- en: When code changes are ready, automation can begin building the necessary packages
    for use in staging and production environments. As part of the build process,
    tests can be run to determine the correct function as well as security. When testing
    indicates correct and secure functionality, a package is created and stored in
    artifact repositories based on the technology used.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码更改准备好时，自动化可以开始构建用于预发布和生产环境的必要包。作为构建过程的一部分，可以运行测试以确定功能是否正确以及是否安全。当测试表明功能正确且安全时，将创建一个包，并根据使用的技术存储在制品仓库中。
- en: 'This part of the pipeline is illustrated in the following figure:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 该流水线部分在下图中进行了说明：
- en: '![Figure 3.4 – Pipeline: Continuous integration](img/B18756_03_04.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4 – 流水线：持续集成](img/B18756_03_04.jpg)'
- en: 'Figure 3.4 – Pipeline: Continuous integration'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – 流水线：持续集成
- en: Let’s look at how the CI portion of the pipeline manages a build, executes the
    initial-level testing, and packages the build. We will begin with a definition
    of continuous integration, continuous delivery, and continuous deployment.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看流水线中的 CI 部分如何管理构建、执行初步测试并打包构建。我们将从定义持续集成、持续交付和持续部署开始。
- en: Continuous integration versus continuous delivery versus continuous deployment
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续集成与持续交付与持续部署
- en: We will see that continuous integration captures the activities that can be
    automatically run once a change has been committed to the version control system.
    Code, including any changes, can be compiled or packaged to a form computers can
    use. Tests are run after the build step to ensure no bugs or security vulnerabilities
    have been introduced. Notifications can be created upon success or failure. Upon
    success, the code changes can be merged with the existing code base. We will examine
    these steps in detail when we look at the continuous integration stage of the
    Continuous Delivery Pipeline in [*Chapter 11*](B18756_11.xhtml#_idTextAnchor244),
    *Continuous Integration of* *Solution Development*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到，持续集成捕获了在更改提交到版本控制系统后可以自动运行的活动。包括任何更改的代码，可以被编译或打包成计算机可以使用的形式。构建步骤之后会运行测试，以确保没有引入任何漏洞或安全隐患。在成功或失败时，可以生成通知。成功后，代码更改可以与现有代码库合并。我们将在[**第
    11 章**](B18756_11.xhtml#_idTextAnchor244)中详细探讨这些步骤，**解决方案开发的持续集成**。
- en: Continuous delivery takes the continuous integration steps further by allowing
    the newly-merged changes to be packaged and delivered to a staging environment,
    a test environment that is as similar to production as possible, or to production.
    Once delivered to the environment, further tests can be run to verify the correctness
    of new features or to perform a deeper security scan. The success of these tests
    allows the organization to release the changes when they’re ready. Detailed steps
    outlining continuous delivery (labeled as continuous deployment) will be listed
    in [*Chapter 12*](B18756_12.xhtml#_idTextAnchor268), *Continuous Deployment* *to
    Production*.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付通过允许将新合并的变更打包并交付到暂存环境、尽可能与生产环境相似的测试环境或生产环境，进一步推动了持续集成的步骤。一旦交付到环境中，就可以运行进一步的测试，以验证新特性的正确性或执行更深层的安全扫描。这些测试的成功使得组织可以在变更准备好时发布它们。有关持续交付的详细步骤（标为持续部署），将列在[*第12章*](B18756_12.xhtml#_idTextAnchor268)，*持续部署*
    *到生产*中。
- en: 'Continuous deployment is continuous delivery with one further step: when the
    tests are complete in the production environment, the new features are automatically
    released to allow customers to use them immediately.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署是在持续交付的基础上再进一步的步骤：当生产环境中的测试完成时，新特性会自动发布，让客户立即使用。
- en: Regardless of whether your final stop in automation is continuous integration,
    continuous delivery, or you completely automate a release through continuous deployment,
    you will typically use the same tool to establish your pipeline. Let’s look at
    that category of tools now.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你最终的自动化目标是持续集成、持续交付，还是通过持续部署完全自动化发布，你通常会使用相同的工具来建立你的流水线。现在我们来看看这类工具。
- en: Orchestrating the change
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编排变更
- en: Pipeline orchestration tools (commonly referred to as CI/CD tools) begin as
    build management tools. These tools execute build scripts and perform additional
    actions when triggered manually or automatically when a commit occurs in the version
    control system.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 流水线编排工具（通常称为 CI/CD 工具）最初是作为构建管理工具的。这些工具在手动触发或在版本控制系统中发生提交时，执行构建脚本并执行其他操作。
- en: Earlier versions of CI/CD tools maintained the jobs to be done as part of the
    UI. CI/CD tools today allow jobs to be defined through a text file using YAML
    or other formats.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的 CI/CD 工具将要执行的任务作为 UI 的一部分来维护。而如今的 CI/CD 工具允许通过文本文件使用 YAML 或其他格式来定义任务。
- en: The power of the CI/CD tools lies in their flexibility. Easy integration with
    other tools to perform other functions, such as automated testing and deployment,
    has enabled overall success in the DevOps movement. Scalability in execution through
    the incorporation of agent software in worker nodes is another important factor,
    allowing jobs to be created in any environment.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 工具的强大之处在于它们的灵活性。通过与其他工具的轻松集成来执行其他功能，如自动化测试和部署，使得 DevOps 运动取得了整体成功。通过在工作节点中加入代理软件，实现执行的可扩展性也是一个重要因素，允许在任何环境中创建任务。
- en: CI/CD tools can be set up in *on-premises* environments, on private clouds,
    or as **Software-as-a-Service** (**SaaS**) products. The most popular CI/CD tool
    for on-premises or private cloud environments continues to be Jenkins, an open
    source project that started as Hudson. Other popular tools include CircleCI and
    Bamboo from Atlassian. Many Git hosting products have rolled out CI/CD pipeline
    extensions as part of their system, including GitLab, GitHub Actions on GitHub,
    Azure DevOps, and Bitbucket Pipelines on Bitbucket Cloud.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 工具可以在*本地*环境、私有云中，或作为**软件即服务**（**SaaS**）产品进行设置。最受欢迎的本地或私有云环境中的 CI/CD 工具仍然是
    Jenkins，这是一个开源项目，最初作为 Hudson 开发。其他受欢迎的工具包括 CircleCI 和 Atlassian 的 Bamboo。许多 Git
    托管产品已经将 CI/CD 流水线扩展作为其系统的一部分推出，包括 GitLab、GitHub 上的 GitHub Actions、Azure DevOps
    以及 Bitbucket Cloud 上的 Bitbucket Pipelines。
- en: Verifying quality
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证质量
- en: By far, one of the most important functions a pipeline can do is set up and
    execute automated testing. Automated testing is gaining attention due to the *shift-left*
    philosophy with the realization that the earlier and more often you do testing,
    the better the quality of the finished product. The DevSecOps movement advocates
    for earlier and more frequent automated testing as a way of establishing *continuous
    security*. Early testing can be done without requiring the code to be executed
    in an environment either through simulated inputs and evaluating outputs or through
    an examination of the code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，流水线能做的最重要的功能之一就是设置并执行自动化测试。由于*左移*理念的兴起，自动化测试越来越受到关注，人们意识到越早进行测试、测试越频繁，最终产品的质量就越好。DevSecOps运动倡导尽早并频繁地进行自动化测试，作为建立*持续安全*的一种方式。早期测试可以通过模拟输入并评估输出，或通过检查代码，在不要求在环境中执行代码的情况下进行。
- en: These *first-level* tests are known as unit tests and static analyses. Let’s
    take a detailed look at them now.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这些*第一层*测试称为单元测试和静态分析。我们现在来详细了解它们。
- en: Unit tests (test-driven development)
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单元测试（测试驱动开发）
- en: Unit tests are scripts written to verify that functions in code produce the
    desired output when given simulated input. Unit test frameworks such as JUnit
    and NUnit are specific to the language used to create the code. Unit tests can
    run directly from the pipeline as a defined stage.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是编写的脚本，用来验证代码中的函数在给定模拟输入时是否能产生预期输出。单元测试框架，如JUnit和NUnit，专门针对用于创建代码的编程语言。单元测试可以作为一个定义的阶段直接从流水线中运行。
- en: Test management software can also be used to execute unit tests. Each unit test
    is saved as a test case in the test management software, and the results are recorded.
    Test management software can also set up an integration to Agile project management
    tools to record defects when tests fail.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 测试管理软件也可以用于执行单元测试。每个单元测试都会作为测试用例保存在测试管理软件中，结果也会被记录。测试管理软件还可以设置与敏捷项目管理工具的集成，当测试失败时记录缺陷。
- en: Popular test management software includes Engineering Test Management from IBM,
    XRay from XBlend, and Zephyr from SmartBear.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 流行的测试管理软件包括IBM的工程测试管理、XBlend的XRay和SmartBear的Zephyr。
- en: Static analysis
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 静态分析
- en: 'Static analysis is the examination of code without executing it. Typically,
    tools are used to analyze and audit the code. Static analysis has other names
    depending on the expected outputs:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 静态分析是指在不执行代码的情况下对代码进行检查。通常，使用工具来分析和审计代码。静态分析有其他名称，具体取决于预期的输出：
- en: Linting is a static analysis done with a specific tool (lint). Linting examines
    code looking for possible code errors and can be used to enforce coding standards.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linting是一种使用特定工具（lint）进行的静态分析。Linting检查代码，寻找可能的代码错误，并可用于强制执行编码标准。
- en: '**Static application security testing** (**SAST**) is static analysis applied
    to searching for possible security vulnerabilities in code.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态应用安全测试**（**SAST**）是应用于寻找代码中可能存在的安全漏洞的静态分析。'
- en: Dependency scanning looks at the dependencies of libraries called by code to
    review whether known security vulnerabilities exist.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖扫描查看代码调用的库的依赖关系，以检查是否存在已知的安全漏洞。
- en: License scanning looks at the dependencies called by code to review the type
    of open source licensing the libraries use. This helps keep the organization compliant
    with the types of open source licenses used and if attribution and distribution
    of changes are required.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许可证扫描查看代码调用的依赖项，审查这些库所使用的开源许可证类型。这有助于确保组织遵守所使用的开源许可证类型，并判断是否需要归属和分发更改。
- en: Tooling that can perform the analysis described, including SAST, includes SonarQube
    from SonarSource, Snyk, Coverity from Synopsys, mend.io (formerly WhiteSource),
    Klocwork offered by Perforce, as well as GitLab.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 能执行上述分析（包括SAST）的工具有：SonarSource的SonarQube，Snyk，Synopsys的Coverity，mend.io（前身为WhiteSource），Perforce提供的Klocwork，以及GitLab。
- en: Packaging for deployment
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署打包
- en: After the first level of the tests pass, the pipeline can then prepare the code
    changes. Packaging the changes is dependent upon several factors, including the
    language and the technology used for deployment.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一阶段测试通过后，流水线可以准备代码更改。打包这些更改取决于多个因素，包括所使用的语言和部署技术。
- en: Artifact repository tools allow for version control of large package images.
    These may pose problems with storage on the version control software mentioned
    previously because these artifacts are large binary files. These binary images
    may range from standard packages such as WAR files in Java or NPM images in Node.js,
    to **virtual machine** (**VM**) images. The popularity of Docker as a deployment
    technology has created a need to identify and version control Docker images in
    private repositories, resulting in additional capabilities for artifact repository
    tools.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 构件库工具可以实现对大规模包镜像的版本控制。这些可能会在前面提到的版本控制软件中造成存储问题，因为这些构件是大型二进制文件。这些二进制镜像可能包括标准包，如
    Java 中的 WAR 文件或 Node.js 中的 NPM 镜像，甚至是**虚拟机**（**VM**）镜像。Docker 作为一种部署技术的流行促使了对私有库中
    Docker 镜像的识别和版本控制的需求，导致构件库工具增加了额外的功能。
- en: Popular artifact repository tools include Artifactory by JFrog and Nexus by
    Sonatype. In addition, GitLab and Azure DevOps include the ability to act as an
    artifact repository for binary images.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的构件库工具包括 JFrog 的 Artifactory 和 Sonatype 的 Nexus。此外，GitLab 和 Azure DevOps 也可以充当二进制镜像的构件库。
- en: Continuous deployment
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续部署
- en: During the continuous integration phase of the pipeline, we saw the last step
    as the packaging of changes into a binary image. Continuous deployment continues
    from that step to the application of that image into testing and production environments.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在流水线的持续集成阶段，我们看到最后一步是将变更打包成二进制镜像。持续部署从这一步骤继续，将该镜像应用于测试和生产环境。
- en: Automation may play a role in adding or updating resources in these environments.
    IaC tools allow the configuration of these resources.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化可能在这些环境中添加或更新资源时发挥作用。IaC 工具可以配置这些资源。
- en: Now that code changes are in an environment, testing can be done in further
    detail to find problems with quality and security. Here, the tests may also look
    at how changes affect the performance and validation of the desired changes.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在代码变更已进入环境，可以进行更详细的测试，以发现质量和安全方面的问题。在这里，测试可能还会检查这些变更如何影响性能和所需变更的验证。
- en: As changes are added to environments, we need to be aware of the effects of
    these changes. To that end, we will measure the performance of the overall environment
    including the storage and analysis of logs.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 随着变更添加到环境中，我们需要意识到这些变更的影响。因此，我们将测量整体环境的性能，包括存储和分析日志。
- en: 'The continuous deployment stage is illustrated in the following figure:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署阶段在下图中展示：
- en: '![Figure 3.5 – Pipeline: Continuous deployment](img/B18756_03_05.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.5 – 流水线：持续部署](img/B18756_03_05.jpg)'
- en: 'Figure 3.5 – Pipeline: Continuous deployment'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – 流水线：持续部署
- en: Let’s look at these activities carried out in the environments. We may need
    to configure the environment to set up new features. Then comes the actual deployment
    of changes into the environment. Finally, more and deeper testing can be performed
    in the environment to ensure the correct function, security, and value.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看在这些环境中执行的活动。我们可能需要配置环境来设置新特性。接下来是将变更实际部署到环境中。最后，可以在环境中进行更多更深层次的测试，以确保功能、
    安全性和价值的正确性。
- en: Configuring environments with IaC
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 IaC 配置环境
- en: Often, changes may involve creating new resources in an environment. Part of
    the configurations in configuration management tools may invoke other tools that
    allow the automatic creation of resources. The creation of these resources is
    guided by a script, often in YAML format. Due to the reliance on these scripts,
    the tools are described as IaC.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，变更可能涉及在环境中创建新资源。配置管理工具中的部分配置可能会调用其他工具，允许自动创建资源。这些资源的创建由脚本引导，通常是 YAML 格式。由于依赖这些脚本，这些工具被称为
    IaC。
- en: The emergence of public cloud environments, such as **Amazon Web Services**
    (**AWS**), Azure from Microsoft, and Google Cloud Platform, has introduced tools
    associated with each cloud environment. The most notable of these is CloudFormation,
    which works with AWS.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 公有云环境的兴起，如**亚马逊网络服务**（**AWS**）、微软的 Azure 和谷歌云平台，带来了与每个云环境相关的工具。其中最著名的是与 AWS
    配合使用的 CloudFormation。
- en: Other vendors offer IaC tools that are more flexible, working in a variety of
    physical servers, private cloud, and public cloud environments. The most notable
    of these is Terraform by Hashicorp.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 其他供应商提供的 IaC 工具更加灵活，能够在多种物理服务器、私有云和公有云环境中工作。其中最著名的是 Hashicorp 的 Terraform。
- en: Releasing with configuration management and feature flags
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用配置管理和功能标志进行发布
- en: Configuration management tools are responsible for identifying and setting the
    configuration of development and production environments. A pipeline can invoke
    the configuration management tool to introduce a build package that has passed
    the continuous integration stage.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理工具负责识别和设置开发与生产环境的配置。流水线可以调用配置管理工具，引入已经通过持续集成阶段的构建包。
- en: Originally, configuration management tools specified the configuration for physical
    (bare metal) servers or VM images. They have grown to include Docker containers
    and Kubernetes clusters.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，配置管理工具用于指定物理（裸金属）服务器或虚拟机镜像的配置。它们已经扩展到包括 Docker 容器和 Kubernetes 集群。
- en: Descriptions of configurations are often specified in terms of the desired configuration
    state but do not elaborate on the necessary steps to achieve the desired state.
    This helps to achieve idempotence in the system.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 配置的描述通常以期望的配置状态为标准，但不详细说明达到该状态的必要步骤。这有助于在系统中实现幂等性。
- en: Popular configuration management tools include Chef by Progress Chef, Puppet,
    and Ansible by Red Hat. Ansible has an advantage over both Chef and Puppet in
    that it connects to the environment resources through **Secure Shell** (**SSH**),
    which removes the need to install agent software on the resource.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 流行的配置管理工具包括 Progress Chef 提供的 Chef、Puppet 以及 Red Hat 提供的 Ansible。Ansible 相较于
    Chef 和 Puppet 有一个优势，它通过 **安全外壳**（**SSH**）连接环境资源，这避免了在资源上安装代理软件。
- en: Release visibility with feature flags
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用功能标志发布可见性
- en: Even as code changes make their way into production environments, those changes
    may not be visible to the end users or affect existing functionality. This may
    be due to code switches or *feature flags* that prevent the visibility of the
    code changes. This allows for a gradual rollout of changes, such as canary deployments.
    This also allows for a quick reversion to the previous state by deactivating the
    applicable feature flags.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 即使代码更改进入生产环境，这些更改可能对最终用户不可见，或者不会影响现有的功能。这可能是由于代码切换或*功能标志*，它们阻止了代码更改的可见性。这允许逐步推出更改，比如金丝雀发布。它还允许通过停用相关的功能标志，快速回滚到先前的状态。
- en: Popular feature flag tools include LaunchDarkly, Flagsmith, and CloudBees Feature
    Management.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 流行的功能标志工具包括 LaunchDarkly、Flagsmith 和 CloudBees Feature Management。
- en: Additional verification through advanced testing in the environment
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过在环境中进行高级测试，进行额外的验证。
- en: Now that changes are built, packaged, and placed in environments, testing can
    work on deeper levels. Test inputs can be placed in the environment to determine
    whether the code works as expected, whether any vulnerabilities are introduced,
    and whether the system behaves as expected.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，变更已经构建、打包并放置到环境中，测试可以在更深层次进行。测试输入可以放入环境中，以确定代码是否按预期工作，是否引入了任何漏洞，以及系统是否按预期运行。
- en: These types of tests that measure correct functionality, security, and acceptance
    are described as follows.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这些测试类型衡量正确的功能性、安全性和接受度，其描述如下。
- en: Functional and UI testing
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 功能和用户界面测试
- en: 'Functional testing is most concerned with code correctness. It exists primarily
    to see whether the coding works and meets the base requirements. Typically, functional
    tests go beyond the individual code functions, which would have been tested during
    unit testing. Specific types of functional testing are used in the following scenarios:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 功能测试最关心的是代码的正确性。它的存在主要是为了检查代码是否有效并满足基本要求。通常，功能测试超越了单个代码功能的范围，这些功能已经在单元测试中进行过验证。以下场景使用了特定类型的功能测试：
- en: '**Sanity testing** is running a small set of functional tests to verify code
    features'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**健全性测试**是运行一小组功能测试，用于验证代码功能。'
- en: '**Smoke testing** usually involves running short, high-level functional tests
    to gain confidence in a new build or a new deployment'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冒烟测试**通常涉及运行简短的高层次功能测试，以增强对新构建或新部署的信心。'
- en: '**Regression testing** is a more extensive execution of functional tests to
    verify that new code features work with the existing system functionality'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回归测试**是一种更广泛的功能测试执行，用于验证新代码功能与现有系统功能是否兼容。'
- en: Automated tools for functional testing depend upon the language the coding features
    are written in, the environment the code will be deployed in, and the technology
    platform (web versus mobile versus other). A cross-section of popular tools includes
    UFT by Micro Focus, Worksoft Certify, and Tricentis Tosca.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化功能测试工具依赖于编码特性所在的语言、代码将部署的环境以及技术平台（如Web、移动端等）。常见的工具包括Micro Focus的UFT、Worksoft
    Certify和Tricentis Tosca。
- en: UI testing is functional testing for graphical UIs. This ensures that elements
    such as buttons and fields on a web page connect to the correct underlying code
    functions and ensures the correctness of those code functions.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: UI测试是对图形用户界面的功能性测试。它确保页面上的元素（如按钮和字段）能够正确连接到底层代码功能，并确保这些代码功能的正确性。
- en: Many popular UI testing tools are based on Selenium, a platform that captures
    actions performed on a web page in scripts that can be repeated by automation.
    Such tools include TestComplete and CrossBrowserTesting by SmartBear and Sauce
    Labs.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 许多流行的UI测试工具基于Selenium，这是一个可以捕捉在网页上执行的操作，并生成可以被自动化重复执行的脚本的平台。此类工具包括SmartBear的TestComplete、CrossBrowserTesting和Sauce
    Labs。
- en: Load/performance testing
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 负载/性能测试
- en: Performance testing, such as load testing, is not designed to measure correct
    functionality. Rather, the goal of performance testing is to verify any NFRs such
    as reliability and scalability. We want to see how the system, including any new
    code changes, can handle increased demand for its resources by flooding the system
    with a large number of system requests, such as logins and form evaluations.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 性能测试，如负载测试，并非用于衡量功能的正确性。性能测试的目标是验证任何非功能性需求（NFR），如可靠性和可扩展性。我们希望看到系统（包括任何新的代码更改）如何通过大量系统请求（如登录和表单评估）来承受资源需求的增加。
- en: Popular tools for performance testing include LoadRunner from Micro Focus and
    JMeter for traditional applications and Sauce Performance from Sauce Labs for
    web and mobile application performance testing.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 性能测试的常用工具包括Micro Focus的LoadRunner和JMeter用于传统应用程序，以及Sauce Labs的Sauce Performance用于Web和移动应用程序的性能测试。
- en: Dynamic application security testing
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动态应用安全测试
- en: '**Dynamic application security testing** (**DAST**) continues the emphasis
    on security in DevSecOps. With DAST, automated tests continue security scanning
    by performing simulated attacks on the environment for web applications to find
    vulnerabilities.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**动态应用安全测试**（**DAST**）继续强调DevSecOps中的安全性。通过DAST，自动化测试通过对Web应用环境进行模拟攻击来进行安全扫描，寻找漏洞。'
- en: A leading DAST scanner is OWASP Zed Attack Proxy, which is used by GitLab to
    provide DAST scanning functionality on its pipeline.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 领先的DAST扫描器是OWASP Zed Attack Proxy，它被GitLab用来在其流水线中提供DAST扫描功能。
- en: IaC scanning
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IaC扫描
- en: Additional tests for DevSecOps continue with the ability to scan the IaC files
    to discover whether there are any misconfigurations or security vulnerabilities.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 针对DevSecOps的附加测试继续提供扫描IaC文件的能力，以发现是否存在配置错误或安全漏洞。
- en: Leading tools such as Snyk and GitLab can scan for multiple IaC tools, including
    Ansible, Terraform, Dockerfiles, and configuration services for public clouds,
    such as CloudFormation, Google Deployment Manager, and **Azure Resource** **Manager**
    (**ARM**).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 领先的工具，如Snyk和GitLab，可以扫描多个IaC工具，包括Ansible、Terraform、Dockerfiles以及公共云的配置服务，如CloudFormation、Google
    Deployment Manager和**Azure资源** **管理器**（**ARM**）。
- en: Container scanning
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 容器扫描
- en: Containers are a technology where an application and any needed libraries are
    encapsulated as a virtual image. This virtual image can be an extension of base
    resources that represent the functions provided by an operating system.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是一种技术，将应用程序及其所需的库封装为虚拟镜像。该虚拟镜像可以是操作系统提供的功能所代表的基础资源的扩展。
- en: Docker is the technology used to implement containers. Developers define the
    application and libraries in Docker images. The image can be placed in a repository
    where it can be pulled and executed in any environment by Docker Engine.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是实现容器的技术。开发者在Docker镜像中定义应用程序和库。镜像可以放入一个仓库中，通过Docker Engine在任何环境中拉取并执行。
- en: Container scanning allows the Docker image and dependent images to be scanned
    to look for security vulnerabilities. Tools that can implement container scanning
    include GitLab and Snyk.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 容器扫描允许扫描Docker镜像及其依赖的镜像，以寻找安全漏洞。可以执行容器扫描的工具包括GitLab和Snyk。
- en: Acceptance tests (behavior-driven development)
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验收测试（行为驱动开发）
- en: 'Acceptance tests are test scripts written in a business-readable language called
    Gherkin. Each test is composed of three main clauses, each starting with a keyword:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 验收测试是用一种称为 Gherkin 的业务可读语言编写的测试脚本。每个测试由三条主要的条款组成，每条条款以一个关键字开始：
- en: '**Given**: This clause describes the initial conditions'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**给定**：本条款描述了初始条件'
- en: '**When**: This clause describes the input for the test'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当**：本条款描述了测试的输入'
- en: '**Then**: This clause describes the desired behavior'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**然后**：本条款描述了期望的行为'
- en: Cucumber is the tool that executes Gherkin tests. Cucumber is available in an
    open source version and paid versions are available in CucumberStudio and Cucumber
    for Jira. All versions are supported by SmartBear.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Cucumber 是执行 Gherkin 测试的工具。Cucumber 提供开源版本，并且付费版本可以通过 CucumberStudio 和 Cucumber
    for Jira 获得。所有版本都由 SmartBear 支持。
- en: Monitoring the environment
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控环境
- en: 'We now leave tools that are part of the pipeline to tools that are run continuously.
    Ongoing evaluation of staging and production environments is done by tools independent
    of the pipeline. These tools perform the following functions:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在离开那些作为管道一部分的工具，转向那些持续运行的工具。对预生产和生产环境的持续评估由独立于管道的工具完成。这些工具执行以下功能：
- en: Performance monitoring/reporting
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 性能监控/报告
- en: 'Stability is the key goal for operations. To that end, they will monitor the
    health of the environment by collecting metrics that can indicate the health of
    key components. This may include the following metrics:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 稳定性是运维的关键目标。为此，他们将通过收集能够指示关键组件健康状况的指标来监控环境的健康状况。以下是可能包括的指标：
- en: CPU utilization
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU 利用率
- en: Memory utilization
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存利用率
- en: Storage utilization
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储利用率
- en: The number of processes
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程数量
- en: Network statistics
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络统计
- en: Application state
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用状态
- en: Popular tools for monitoring include Prometheus for collecting metrics and Grafana
    for displaying the metrics on a dashboard. If the environment is on a public cloud,
    CloudWatch is available on AWS, and Azure Monitor is available on Azure. Cloud-based
    **monitoring-as-a-service** (**MaaS**) products can consolidate monitoring from
    multiple environments and sources. Such products include Datadog and New Relic.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 流行的监控工具包括 Prometheus 用于收集指标，Grafana 用于在仪表板上显示这些指标。如果环境在公共云中，AWS 上有 CloudWatch，Azure
    上有 Azure Monitor。基于云的**监控即服务**（**MaaS**）产品可以整合来自多个环境和来源的监控。这类产品包括 Datadog 和 New
    Relic。
- en: Log collection
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日志收集
- en: Another aspect of monitoring comes from collecting log messages created by the
    system and applications. The messages may provide context for issues when problems
    arise in the environment.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 监控的另一个方面来自于收集由系统和应用程序生成的日志消息。当环境中出现问题时，这些消息可能为问题提供上下文。
- en: Logs from different systems, different system components, and different applications
    are collected into one source using log aggregation tools. These tools include
    a search capability to filter by an important keyword when necessary.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 来自不同系统、不同系统组件和不同应用程序的日志通过日志聚合工具被收集到一个源中。这些工具包括搜索功能，在必要时可以根据重要的关键词进行过滤。
- en: Log aggregation tools can be a software application that resides on-premises
    or in a private cloud, a feature available on public clouds, or a **SaaS** product.
    Popular log aggregation tools include the combination of Elasticsearch, Logstash,
    and Kibana (an ELK stack) for collection and analytics in on-premises/private
    cloud environments. Log collection is part of the AWS CloudWatch service. Splunk
    and Datadog are popular SaaS-based products that perform log aggregation.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 日志聚合工具可以是驻留在本地或私有云中的软件应用程序，也可以是公共云提供的一个功能，或者是一个**SaaS**产品。流行的日志聚合工具包括 Elasticsearch、Logstash
    和 Kibana（ELK 堆栈）组合，用于本地/私有云环境中的数据收集和分析。日志收集是 AWS CloudWatch 服务的一部分。Splunk 和 Datadog
    是流行的基于 SaaS 的产品，执行日志聚合。
- en: Alerting
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 警报
- en: When problems arise, it is important to notify the key people in a timely fashion.
    Alert tools can provide multiple channels for notification, including emails,
    SMS messages, and IM chat messages. They may also provide a tolerance mechanism
    to prevent too many alert messages to operations personnel and *alert fatigue*
    from occurring. These tools can also create issues for incident management so
    that **IT service management** (**ITSM**) processes are followed.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当问题发生时，及时通知关键人员非常重要。警报工具可以提供多种通知渠道，包括电子邮件、短信和即时消息。这些工具还可能提供容忍机制，以防止向运维人员发送过多的警报信息，从而避免出现*警报疲劳*。这些工具还可以为事件管理创造问题，以便遵循**IT服务管理**（**ITSM**）流程。
- en: Leading alerting tools include PagerDuty and Opsgenie by Atlassian.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 领先的告警工具包括PagerDuty和Atlassian的Opsgenie。
- en: At this point, we’ve talked about the technology involved in creating the automation
    that is part of DevOps. Let’s focus our attention now on people, in terms of who
    can be responsible for installing and configuring such automation as the CI/CD
    pipeline.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了创建DevOps自动化中涉及的技术。现在让我们把注意力集中到人员方面，具体来说，谁可以负责安装和配置像CI/CD管道这样的自动化。
- en: DevOps topologies
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps拓扑结构
- en: With the growing list of tools and technologies available to Dev and Ops, it
    may be difficult to figure out where the responsibilities lie in moving toward
    a DevOps approach. Who is responsible for creating the CI/CD pipeline? What do
    we consider databases? How do we deploy into production?
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 随着越来越多的工具和技术可供开发与运维使用，可能很难弄清楚在向DevOps方法转型过程中，哪些责任归属谁。谁负责创建CI/CD管道？我们如何定义数据库？我们如何部署到生产环境？
- en: 'In 2013, Matthew Skelton initially described three team *anti-types* to avoid
    and five possible team structures. Additional contributions have increased the
    number of anti-types to eight and the number of beneficial team structures to
    nine. The following list shows the anti-types and they are elaborated here at
    [https://web.devopstopologies.com](https://web.devopstopologies.com):'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 2013年，Matthew Skelton最初描述了三种需要避免的团队*反类型*以及五种可能的团队结构。后来，随着更多的贡献，反类型数量增加到了八个，团队结构的有益类型增加到了九个。以下是这些反类型的列表，详细内容可以在[https://web.devopstopologies.com](https://web.devopstopologies.com)查看：
- en: Dev and Ops Silos
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发与运维孤岛
- en: Permanent DevOps Team Silo
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永久性的DevOps团队孤岛
- en: Dev Doesn’t Need Ops
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发不需要运维
- en: DevOps as the Dev Tools Team
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps作为开发工具团队
- en: Rebranded Sysadmins
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新命名的系统管理员
- en: Ops Embedded in Dev Team
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运维嵌入开发团队
- en: Dev and DBA Silos
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发与DBA孤岛
- en: Fake SRE
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假的SRE
- en: The 9 DevOps topologies from that site are as follows.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该网站提供的9种DevOps拓扑结构。
- en: Dev and Ops collaboration
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发与运维协作
- en: This structure is considered the ideal DevOps approach, where Dev and Ops are
    working together and have smooth collaboration. Implementing this structure likely
    requires a large organizational culture change toward a generative culture.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这种结构被视为理想的DevOps方法，开发与运维在一起工作，并有着顺畅的协作。实现这一结构可能需要进行大规模的组织文化变革，朝着创造性文化的方向发展。
- en: "![Figure 3.6 – Dev and Ops collaboration (\uFEFFdiagram based on work at devopstopologies.com\
    \ – licensed under CC BY-SA)](img/B18756_03_06.jpg)"
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图3.6 – 开发与运维协作（基于devopstopologies.com的工作图示 – 依据CC BY-SA许可）](img/B18756_03_06.jpg)'
- en: Figure 3.6 – Dev and Ops collaboration (diagram based on work at devopstopologies.com
    – licensed under CC BY-SA)
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6 – 开发与运维协作（基于devopstopologies.com的工作图示 – 依据CC BY-SA许可）
- en: Fully shared Ops responsibilities
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完全共享的运维职责
- en: Some organizations with a single web-based product, such as Netflix or Facebook,
    may be able to take the Dev and Ops collaboration model shown previously and integrate
    Ops more fully. In this model, there is very little separation between Dev and
    Ops. Because of this, everyone is focused on the mission.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一些拥有单一基于网络的产品的组织，如Netflix或Facebook，可能能够采用前面提到的开发与运维协作模型，并更加全面地集成运维。在这种模型中，开发与运维之间几乎没有隔阂。因此，每个人都专注于使命。
- en: '![Figure 3.7 – Fully shared Ops responsibilities (Diagram based on work at
    devopstopologies.com – licensed under CC BY-SA)](img/B18756_03_07.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图3.7 – 完全共享的运维职责（基于devopstopologies.com的工作图示 – 依据CC BY-SA许可）](img/B18756_03_07.jpg)'
- en: Figure 3.7 – Fully shared Ops responsibilities (Diagram based on work at devopstopologies.com
    – licensed under CC BY-SA)
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7 – 完全共享的运维职责（基于devopstopologies.com的工作图示 – 依据CC BY-SA许可）
- en: Ops as infrastructure as a service
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运维作为基础设施即服务
- en: There may be some organizations that have a more traditional Ops department.
    Also, some organizations may deploy applications to public cloud environments
    such as AWS or Azure. In either case, a small subset of the Dev department may
    treat operations *as a service* and set up tooling for deployment, metrics, provisioning,
    and monitoring of those resources. In this model, there is no direct collaboration
    with Operations.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 可能有一些组织仍然保留传统的运维部门。此外，一些组织可能会将应用部署到公共云环境中，例如AWS或Azure。在这两种情况下，开发部门中的一小部分人员可能会将运维视为*服务*，并为这些资源的部署、指标、配置和监控设置工具。在这种模式下，没有与运维的直接协作。
- en: "![Figure 3.8 – Ops as infrastructure as a service (\uFEFFdiagram based on work\
    \ at devopstopologies.com – licensed under CC BY-SA)](img/B18756_03_08.jpg)"
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图3.8 – 运维作为基础设施即服务（基于devopstopologies.com的工作图示 – 依据CC BY-SA许可）](img/B18756_03_08.jpg)'
- en: Figure 3.8 – Ops as infrastructure as a service (diagram based on work at devopstopologies.com
    – licensed under CC BY-SA)
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8 – 运维作为基础设施即服务（图表基于devopstopologies.com的工作 – 采用CC BY-SA许可）
- en: DevOps as an external service
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DevOps作为外部服务
- en: Some smaller teams and organizations may not have the manpower or experience
    to move toward a DevOps approach. In that case, they may contract an external
    vendor to create the test environments and automation and configure the monitoring.
    The DevOps vendors may also train Dev and Ops to move to a different model, such
    as Dev and Ops collaboration.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 一些较小的团队和组织可能没有足够的人员或经验来推进DevOps方法。在这种情况下，他们可能会外包给外部供应商来创建测试环境、自动化和配置监控。DevOps供应商也可能会培训开发和运维团队，以便转向不同的模型，例如开发和运维协作。
- en: '![Figure 3.9 – DevOps as an external service (Diagram based on work at devopstopologies.com
    – licensed under CC BY-SA)](img/B18756_03_09.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图3.9 – DevOps作为外部服务（图表基于devopstopologies.com的工作 – 采用CC BY-SA许可）](img/B18756_03_09.png)'
- en: Figure 3.9 – DevOps as an external service (Diagram based on work at devopstopologies.com
    – licensed under CC BY-SA)
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.9 – DevOps作为外部服务（图表基于devopstopologies.com的工作 – 采用CC BY-SA许可）
- en: DevOps team (with expiration date)
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DevOps团队（有使用期限）
- en: There may be situations where having a dedicated DevOps team works. The idea
    is that the DevOps team can act as a *bridge* for both Dev and Ops teams. The
    DevOps team can instruct developers on working with infrastructure and can instruct
    operations personnel on Agile development. At some point, the DevOps team will
    disband, allowing Dev and Ops to collaborate in the Dev and Ops collaboration
    model.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 可能存在某些情况下，拥有一个专门的DevOps团队是有效的。其思想是，DevOps团队可以充当开发和运维团队之间的*桥梁*。DevOps团队可以指导开发人员如何与基础设施合作，也可以指导运维人员如何进行敏捷开发。在某些时刻，DevOps团队将解散，允许开发和运维在Dev和Ops协作模型中进行合作。
- en: The danger exists when the DevOps team does not disband, instead forming a separate
    silo. This is actually one of the identified anti-types (DevOps Team Silo) mentioned
    on the DevOps topologies website.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当DevOps团队没有解散，而是形成了一个独立的“孤岛”时，就存在危险。这实际上是DevOps拓扑网站中提到的反面类型之一（DevOps团队孤岛）。
- en: "![Figure 3.10 – DevOps team with expiration date (\uFEFFdiagram based on work\
    \ at devopstopologies.com – licensed under CC BY-SA)](img/B18756_03_10.jpg)"
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图3.10 – 有使用期限的DevOps团队（图表基于devopstopologies.com的工作 – 采用CC BY-SA许可）](img/B18756_03_10.jpg)'
- en: Figure 3.10 – DevOps team with expiration date (diagram based on work at devopstopologies.com
    – licensed under CC BY-SA)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.10 – 有使用期限的DevOps团队（图表基于devopstopologies.com的工作 – 采用CC BY-SA许可）
- en: DevOps advocacy team
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DevOps倡导团队
- en: A DevOps advocacy team acts as a facilitator between Dev and Ops if the two
    departments tend to drift apart. Unlike the DevOps team with an expiration date,
    this DevOps team is kept on an ongoing basis, ensuring both Dev and Ops follow
    current DevOps practices.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果开发（Dev）和运维（Ops）两个部门逐渐脱节，DevOps倡导团队会充当两者之间的协调者。与有使用期限的DevOps团队不同，这个DevOps团队是持续存在的，确保开发和运维都遵循当前的DevOps实践。
- en: Like the DevOps team with an expiration date, a DevOps advocacy team runs the
    risk of turning into a DevOps Team Silo.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 与有使用期限的DevOps团队一样，DevOps倡导团队也有转变为DevOps团队孤岛的风险。
- en: '![Figure 3.11 – DevOps advocacy team (Diagram based on work at devopstopologies.com
    – licensed under CC BY-SA)](img/B18756_03_11.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图3.11 – DevOps倡导团队（图表基于devopstopologies.com的工作 – 采用CC BY-SA许可）](img/B18756_03_11.jpg)'
- en: Figure 3.11 – DevOps advocacy team (Diagram based on work at devopstopologies.com
    – licensed under CC BY-SA)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.11 – DevOps倡导团队（图表基于devopstopologies.com的工作 – 采用CC BY-SA许可）
- en: SRE team
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SRE团队
- en: As far back as 2004, Google has used its software engineers as operations personnel.
    These **site reliability engineers** (**SREs**) handle the support of production
    environments, mostly by developing software to keep the resources and services
    running. SREs accept the application from Dev, but only if Dev provides enough
    evidence in the form of logs and metrics that it meets a quality threshold. If
    the code does not meet this standard, SREs can reject the deployment.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 早在2004年，Google就已经将其软件工程师作为运维人员使用。这些**站点可靠性工程师**（**SREs**）负责生产环境的支持，主要通过开发软件来保持资源和服务的运行。SREs接受开发提供的应用，但前提是开发提供了足够的日志和度量数据，证明它符合质量标准。如果代码不符合标准，SREs可以拒绝部署。
- en: "![Figure 3.12– SRE team (\uFEFFdiagram based on work at devopstopologies.com\
    \ – licensed under CC BY-SA)](img/B18756_03_12.jpg)"
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图3.12– SRE团队（图表基于devopstopologies.com的工作 – 采用CC BY-SA许可）](img/B18756_03_12.jpg)'
- en: Figure 3.12– SRE team (diagram based on work at devopstopologies.com – licensed
    under CC BY-SA)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.12 – SRE团队（基于devopstopologies.com网站的工作图示 – 按照CC BY-SA许可）
- en: Container-driven collaboration
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 容器驱动的协作
- en: Because containers abstract many of the infrastructure details, most collaboration
    between Dev and Ops is not necessary. In this case, a container-based deployment
    may be accepted by Ops most of the time if there is a sound engineering culture.
    If not monitored closely, there is a risk of changing to an anti-type where Ops
    is expected to deploy anything from Dev without question.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 由于容器抽象了许多基础设施细节，因此大部分开发与运维之间的协作是无需的。在这种情况下，如果有良好的工程文化，运维大多数时候可以接受基于容器的部署。如果没有得到密切监控，就有可能转变为一种反模式，期望运维毫无疑问地部署来自开发的任何内容。
- en: "![Figure 3.13 – Container-driven collaboration (\uFEFFdiagram based on work\
    \ at devopstopologies.com – licensed under CC BY-SA)](img/B18756_03_13.jpg)"
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图3.13 – 容器驱动的协作（基于devopstopologies.com网站的工作图示 – 按照CC BY-SA许可）](img/B18756_03_13.jpg)'
- en: Figure 3.13 – Container-driven collaboration (diagram based on work at devopstopologies.com
    – licensed under CC BY-SA)
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.13 – 容器驱动的协作（基于devopstopologies.com网站的工作图示 – 按照CC BY-SA许可）
- en: Dev and DBA collaboration
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发与DBA的协作
- en: If the applications an organization develops rely on one or more central databases,
    the collaboration between developers and the **database administrators** (**DBAs**)
    may be crucial. To enable that collaboration, the database developers in Dev work
    closely with the DBAs in operations.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个组织开发的应用程序依赖于一个或多个中央数据库，那么开发人员与**数据库管理员**（**DBA**）之间的协作可能至关重要。为了实现这种协作，开发中的数据库开发人员与运维中的DBA密切合作。
- en: '![Figure 3.14 – Dev and DBA collaboration (Diagram based on work at devopstopologies.com
    – licensed under CC BY-SA)](img/B18756_03_14.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图3.14 – 开发与DBA的协作（基于devopstopologies.com网站的工作图示 – 按照CC BY-SA许可）](img/B18756_03_14.jpg)'
- en: Figure 3.14 – Dev and DBA collaboration (Diagram based on work at devopstopologies.com
    – licensed under CC BY-SA)
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.14 – 开发与DBA的协作（基于devopstopologies.com网站的工作图示 – 按照CC BY-SA许可）
- en: 'Now that we have seen possible configurations for organizing the team responsible
    for the CI/CD pipeline, let’s take a close look at such a team on the ART: the
    system team.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到组织负责CI/CD流水线的团队的可能配置，让我们更详细地看看ART中的这个团队：系统团队。
- en: The system team
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统团队
- en: The system team is the team on the ART that is responsible for the tooling and
    automation of the Continuous Delivery Pipeline. They work with the other teams
    on the ART to help in delivering valuable solutions.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 系统团队是ART中的一个团队，负责持续交付流水线的工具和自动化工作。他们与ART中的其他团队合作，帮助交付有价值的解决方案。
- en: The system team may follow one of several DevOps topologies. The system team
    may be set up as a DevOps team with an expiration date. They will set up the Continuous
    Delivery Pipeline and instruct the Dev and Ops personnel on its use before disbanding.
    Another model for the system team may be being set up as a DevOps advocacy team.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 系统团队可能会遵循几种DevOps拓扑之一。系统团队可以作为一个有到期日期的DevOps团队来设立。他们将建立持续交付流水线，并在解散之前指导开发和运维人员如何使用它。系统团队的另一种模型可能是作为一个DevOps倡导团队来设立。
- en: As custodians of the automation and development process, they have deep responsibilities
    to the other teams on the ART. These responsibilities are described as follows.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 作为自动化和开发过程的管理者，他们对ART中的其他团队负有深厚的责任。这些责任如下所述。
- en: Building infrastructure for solution development
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案开发的基础设施建设
- en: The system team will often be responsible for setting up the pre-build, continuous
    integration, and continuous deployment portions of the CI/CD pipeline and integrating
    the technology so it’s a seamless part of the Continuous Delivery Pipeline. They
    strive to apply automation as much as possible. This may also involve close collaboration
    with other teams, so they may visit other teams’ events.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 系统团队通常负责设置CI/CD流水线的预构建、持续集成和持续部署部分，并将技术整合，使其成为持续交付流水线的无缝一部分。他们努力尽可能应用自动化。这也可能涉及与其他团队的紧密合作，因此他们可能会参加其他团队的活动。
- en: Spearheading solution integration
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案集成的先锋
- en: As part of maintaining the CI phase, the system team may be involved in determining
    the build process after a change has been committed to version control. They will
    maintain the proper build scripts and CI configuration files. If build automation
    is not yet available, they may be the team performing build and integration activities.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 作为维护 CI 阶段的一部分，系统团队可能会参与在代码更改提交到版本控制后，确定构建过程。他们会维护正确的构建脚本和 CI 配置文件。如果尚未实现构建自动化，他们可能是执行构建和集成活动的团队。
- en: Setting up end-to-end testing
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置端到端测试
- en: To support the other teams, the system team may help the testers with the creation
    and optimization of automated tests. They may also work with the other teams to
    aggregate separate tests into well-defined test suites for different types of
    testing, such as smoke testing.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持其他团队，系统团队可能会协助测试人员创建和优化自动化测试。他们还可能与其他团队合作，将不同的测试整合成定义明确的测试套件，用于不同类型的测试，如冒烟测试。
- en: Assisting with demos
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 协助演示
- en: The ART integrates the work from all its teams and demonstrates the working
    state of the solution at a given point in time. This integration and demonstration
    is called the *system demo* and happens at a regular cadence.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: ART 集成所有团队的工作，并在某一时刻演示解决方案的工作状态。这种集成和演示称为 *系统演示*，并以固定的节奏进行。
- en: As maintainers of the Continuous Delivery Pipeline, the system team is there
    to ensure that technical environments work for all teams so that the system demo
    is seamless.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 作为持续交付流水线的维护者，系统团队确保所有团队的技术环境正常工作，以便系统演示能够顺利进行。
- en: Facilitating the release
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 促进发布
- en: Because the system team has a holistic view of the process, they may be called
    upon to verify that deployments to production and final release are valid.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 因为系统团队对整个过程有全面的了解，所以可能会被要求验证部署到生产环境和最终发布的有效性。
- en: The system team can be considered the *DevOps* team for the ART. It may follow
    one of the DevOps topologies as a way of collaborating with the other Agile teams.
    Its responsibilities primarily involve configuring the automation, but it may
    assist the Agile teams in other ways as the entire ART endeavors to deliver value.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 系统团队可以被视为 ART 的 *DevOps* 团队。它可能会遵循 DevOps 拓扑中的一种模式，以便与其他敏捷团队进行协作。它的主要职责是配置自动化，但它也可能以其他方式协助敏捷团队，整个
    ART 一起努力交付价值。
- en: Summary
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Automation plays a key role in DevOps. We looked at the important tools that
    make up a DevOps toolchain, especially those parts of the toolchain that are orchestrated
    from building and testing to deployment, creating the CI/CD pipeline or *the pipeline*.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化在 DevOps 中起着关键作用。我们查看了构成 DevOps 工具链的重要工具，尤其是那些从构建、测试到部署进行编排的部分，这些部分构成了 CI/CD
    流水线或 *流水线*。
- en: CI typically includes activities that happen to code changes after they have
    been committed to version control. This may include preliminary testing, and upon
    passing, they may be built together and packaged into an artifact based on language
    and technology.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: CI 通常包括在代码更改提交到版本控制后发生的活动。这可能包括初步测试，并在通过后，它们可能会一起构建并打包成一个基于语言和技术的产物。
- en: CD continues from where CI leaves off by taking the build artifacts and applying
    them to testing or production environments. Here, environments will be reconfigured,
    possibly with new resources. Additional testing will be performed to ensure security,
    correctness, and validation of anticipated value.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: CD 从 CI 结束的地方继续，利用构建产物将其应用到测试或生产环境中。在这里，环境将重新配置，可能会引入新的资源。还会进行额外的测试，以确保安全性、正确性和预期价值的验证。
- en: DevOps topologies outline possible models of collaboration between Dev and Ops
    teams with the possible inclusion of people specializing in DevOps. Some of the
    topologies are not long-lasting, lest they turn into *anti-types* that stifle
    collaboration.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 拓扑描述了开发和运维团队之间可能的协作模型，并可能包括专门从事 DevOps 的人员。一些拓扑不是长期存在的，以免它们变成 *反类型*，从而扼杀协作。
- en: In SAFe, the system team performs as the DevOps team on the ART. That team is
    responsible for constructing and maintaining the Continuous Delivery Pipeline
    for the other teams on the ART.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SAFe 中，系统团队充当 ART 上的 DevOps 团队。该团队负责为 ART 上的其他团队构建和维护持续交付流水线。
- en: Automation does allow the ART or any DevOps team to deliver faster, but not
    if the development process is not optimized for Lean flow. In the next chapter,
    we will examine the practices from the Lean thinking movement that enable flow.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化确实使ART或任何DevOps团队能够更快地交付，但如果开发过程未优化以实现精益流程，则无济于事。在下一章中，我们将探讨来自精益思维运动的实践，以促进流程。
- en: Questions
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Test your knowledge of the concepts in this chapter by answering these questions.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答这些问题来测试您对本章概念的理解。
- en: What tests are examples of static analysis (pick two)?
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么测试是静态分析的示例（选择两个）？
- en: Unit tests
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Linting
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Linting
- en: DAST
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: DAST
- en: Dependency scanning
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 依赖扫描
- en: Acceptance tests
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验收测试
- en: What allows code changes to be hidden in production until *turned on*?
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么允许代码更改在生产环境中隐藏，直到*启用*？
- en: Version control
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 版本控制
- en: Continuous integration
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续集成
- en: Feature flags
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 特性标志
- en: Continuous deployment
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续部署
- en: Monitoring includes activities such as performance monitoring, alerting, and
    what?
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监控包括性能监控、警报等活动，以及什么？
- en: Load testing
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 负载测试
- en: Version control
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 版本控制
- en: Log collection
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 日志收集
- en: Unit testing
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Further reading
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The original formulation of DevOps topologies, including three anti-types and
    five types: [https://blog.matthewskelton.net/2013/10/22/what-team-structure-is-right-for-devops-to-flourish/](https://blog.matthewskelton.net/2013/10/22/what-team-structure-is-right-for-devops-to-flourish/'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps拓扑结构的原始公式，包括三种反类型和五种类型：[https://blog.matthewskelton.net/2013/10/22/what-team-structure-is-right-for-devops-to-flourish/](https://blog.matthewskelton.net/2013/10/22/what-team-structure-is-right-for-devops-to-flourish/)
- en: )
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: 'The updated formulation of DevOps topologies: [https://web.devopstopologies.com](https://web.devopstopologies.com'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps拓扑结构的更新公式：[https://web.devopstopologies.com](https://web.devopstopologies.com)
- en: )
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '*Team Topologies: Organizing Business and Technology Teams for Fast Flow* by
    Matthew Skelton and Manuel Pais – the evolution of DevOps topologies to look at
    topologies for all kinds of teams.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*团队拓扑：为快速流程组织商业和技术团队*，作者马修·斯克尔顿和曼努埃尔·佩斯 – DevOps拓扑结构的演变，探索各种团队的拓扑结构。'
