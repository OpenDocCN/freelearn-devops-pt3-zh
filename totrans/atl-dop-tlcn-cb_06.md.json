["```\noptions:\n  Global options are here (not required – this section may be absent)\nclone:\n  Configurations for Git clone behavior go here\ndefinitions:\n  Cache and service container definitions here\nimage:\n  Docker image options are here (Chapter 9)\npipeline:\n  Pipeline start options are here\n    parallel:\n      Parallel step options go here\n    stage:\n      Stage options are here\n    step:\n      Step options are here\n```", "```\n    options:\n       docker: true\n    ```", "```\n    options:\n       max-time: 5\n    ```", "```\n    options:\n       size: 2x\n    ```", "```\n    clone:\n       enabled: false\n    pipelines:\n       default:\n          - step:\n              script:\n                 - echo \"Cloning not done\"\n    ```", "```\n    clone:\n       depth: 5\n    pipelines:\n       default:\n          - step:\n              script:\n                - ls $BITBUCKET_CLONE_DIR\n    ```", "```\n    clone:\n       lfs: true\n    pipelines:\n       default:\n          - step:\n              name: Download LFS\n              script: \"Cloning and downloading...\"\n    ```", "```\n    pipelines:\n       default:\n          - step:\n              runs-on:\n                 - 'self.hosted'\n              clone:\n                 skip-ssl-verify: true\n              script:\n                 - echo \"Using self-signed certificate\"\n    ```", "```\n    definitions:\n      caches:\n        my-bundler-cache: vendor/bundle\n    pipelines:\n      default:\n        - step:\n            caches:\n              - my-bundler-cache # Cache is defined above in the definitions section\n            script:\n              - bundle install --path vendor/bundle\n              - ruby -e 'print \"Building on Ruby\"'\n    ```", "```\n    definitions:\n      caches:\n        my-bundler-cache:\n          key:\n            files:\n              - Gemfile.lock\n              - \"**/*.gemspec\" # glob patterns are supported for cache key files\n          path: vendor/bundle\n    pipelines:\n      default:\n        - step:\n            caches:\n              - my-bundler-cache # Cache is defined above in the definitions section\n            script:\n              - bundle install --path vendor/bundle\n              - ruby -e 'print \"Hello, World\\n\"'\n    ```", "```\n    definitions:\n      steps:\n        - step: &package\n            name: Build and test\n            script:\n              - mvn package\n            artifacts:\n              - target/**\n    pipelines:\n      default:\n        - step: *package\n    ```", "```\npipelines:\n   default:\n      - step:\n          script:\n             - echo \"Running a command\"\n```", "```\npipelines:\n  default:\n    - step:          # non-parallel build step\n        script:\n          - ./build.sh\n    - parallel:      # these 2 steps will run in parallel\n        steps:\n          - step:\n              script:\n                - ./integ-tests.sh --batch 1\n          - step:\n              script:\n                - ./integ-tests.sh --batch 2\n    - step:          # non-parallel deploy step\n        script:\n          - ./deploy.sh\n```", "```\npipelines:\n   default:\n      - stage:\n          name: build/test\n          steps:\n            - step:\n                name: Build step\n                script:\n                   - sh ./build-app.sh\n            - step:\n                name: Unit-test\n                script:\n                   - sh ./run-unit-tests.sh\n```", "```\npipelines:\n   default:\n      - step:\n          script:\n             - echo \"Running a command\"\n```", "```\n    pipelines:\n      default:\n        - step:\n            script:\n              - echo \"This script runs on all branches that don't have any specific pipeline assigned in 'branches'.\"\n      branches:\n        main:\n          - step:\n              script:\n                - echo \"This script runs only on commit to the main branch.\"\n        feature/*:\n          - step:\n              script:\n                - echo \"This script runs only on commit to branches with names that match the feature/* pattern.\"\n    ```", "```\n    pipelines:\n      pull-requests:\n        feature/*:\n          - step:\n              name: Build for pull request to feature branch\n              script:\n                - echo \"feature branch PR!\"\n        hotfix/*:\n          - step:\n              name: Build for pull request to hotfix branch\n              script:\n                - echo \"hotfix PR!\"\n        '**':\n          - step:\n              name: Build for all pull requests to other branches\n              script:\n                - echo \"all other non-feature, non-hotfix pull request!\"\n    ```", "```\n    pipelines:\n      tags:\n        '*-FirstTag':\n          - step:\n              name: Build for *-FirstTag tags\n              script:\n                - echo \"First tag!\"\n        '*-SecondTag':\n          - step:\n              name: Build for *-SecondTag tags\n              script:\n                - echo \"Second tag!\"\n        '*-ThirdTag':\n          - step:\n              name: Build for *-ThirdTag tags\n              script:\n                - echo \"Third tag!\"\n    ```", "```\npipelines:\n  custom: # Pipelines that are triggered manually\n    manual-sonar: # The name that is displayed in the list in the Bitbucket Cloud GUI\n      - step:\n          script:\n            - echo \"triggering for Sonar!\"\n    deployment-to-prod: # Another display name\n      - step:\n          script:\n            - echo \"triggering for manual deployments to prod!\"\n  branches:  # Pipelines that run automatically on a commit to a branch\n    staging:\n      - step:\n          script:\n            - echo \"Auto execute for push to staging branch.\"\n```", "```\npipelines:\n  custom: # Pipelines that are triggered manually\n    us-build: # The name that is displayed in the list in the Bitbucket Cloud GUI\n      - variables:\n          - name: IAMRole\n            default: \"admin\"          # optionally provide a default variable value\n            description: \"AWS user role\"\n          - name: AWSRegion\n            default: \"us-east-1\"\n            allowed-values:           # optionally restrict variable values\n              - \"us-east-1\"\n              - \"us-west-2\"\n      - step:\n          script:\n            - echo \"$IAMRole manually triggered for a build for $AWSRegion\"\n```", "```\n          - step:\n              name: 'First Automated Step'\n              script:\n                - echo \"This step is automated\"\n          - step:\n              name: 'Manual Step'\n              trigger: manual\n              script:\n                - echo \"This step is manual\"\n          - step:\n              name: 'Second Automated Step'\n              script:\n                - echo \"This step is also automated\"\n    ```", "```\n    - step:\n              name: 'Build and Test'\n              script:\n                - echo \"My variable is \"$MY_NUMBER\n    ```", "```\n    - step:\n              name: 'Build and Test'\n              script:\n                - echo \"My variable is \"$MY_NUMBER\n    ```", "```\n    pipelines:\n      custom:\n        customPipelineWithRunnerStep:\n          - step:\n              name: First Step\n              runs-on:\n                - 'self.hosted'\n                - 'my.label'\n              script:\n                - echo \"This step will run on a self hosted runner that also has the my.label label.\";\n    ```", "```\n          - step:\n              name: First Step\n              runs-on:\n                - 'self.hosted'\n                - 'windows'\n    ```", "```\n          - step:\n              name: First Step\n              runs-on:\n                - 'self.hosted'\n                - 'macos'\n    ```", "```\n          - step:\n              name: First Step\n              runs-on:\n                - 'self.hosted'\n                - 'linux.shell'\n    ```", "```\n          - step:\n              name: First Step\n              runs-on:\n                - 'self.hosted'\n                - 'linux.arm64'\n    ```", "```\n    image: node:10.15.0\n    pipelines:\n      default:\n        - step:\n            script:\n              - npm install\n              - npm test\n    ```", "```\n    image: node:10.15.0\n    pipelines:\n      default:\n        - step:\n            name: ESLint\n            script:\n              - npm install eslint --save-dev\n              - eslint --init\n        - step:\n            name: execute\n            script:\n              - npm install\n              - npm run lint\n              - npm test\n    ```", "```\n    - step:\n        name: SonarCloud\n        script:\n           - pipe: sonarsource/sonarcloud-scan:2.0.0\n                variables:\n                   SONAR_TOKEN: $SONAR_TOKEN\n                   EXTRA_ARGS: -Dsonar.projectDescription=\\\"Project with sonarcloud-scan pipe\\\" -Dsonar.eslint.reportPaths=\\\"report.json\\\"\n                   SONAR_SCANNER_OPTS: -Xmx512m\n                   DEBUG: \"true\"\n    ```", "```\n    - pipe: sonarsource/sonarcloud-quality-gate:0.1.6\n      variables:\n         SONAR_TOKEN: $SONAR_TOKEN\n        SONAR_QUALITY_GATE_TIMEOUT: 180  # 3 minutes\n    ```", "```\n    script:\n      - npm install\n      - npm test\n      - pipe: snyk/snyk-scan:1.0.1\n        variables:\n          SNYK_TOKEN: $SNYK_TOKEN\n          LANGUAGE: «node»\n    ```", "```\n    script:\n      - mvn install\n      - npm install -g snyk # binary download also available\n      - snyk test --all-projects\n    ```", "```\n    image: php:7.1.1\n    pipelines:\n      default:\n        - step:\n            script:\n              - apt-get update && apt-get install -y unzip\n              - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n              - composer require phpunit/phpunit\n              - vendor/bin/phpunit --log-junit ./test-reports/junit.xml\n    ```", "```\n    image: mcr.microsoft.com/dotnet/sdk\n    pipelines:\n      default:\n        - step:\n            script:\n              - dotnet add package JUnitTestLogger --version 1.1.0\n              - dotnet test --logger \"junit\"\n    ```", "```\n    image: mcr.microsoft.com/dotnet/sdk\n    pipelines:\n      default:\n        - step:\n            script:\n              - dotnet tool install -g trx2junit\n              - dotnet test --logger 'trx;LogFileName=log.trx'\n            after-script:\n              - export PATH=\"$PATH:/root/.dotnet/tools\"\n              - trx2junit ./TestResults/*.trx\n    ```"]