- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Why Do We Need to Understand Salesforce Anti-Patterns?
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我们需要理解 Salesforce 反模式？
- en: Salesforce anti-patterns tell us about the kinds of systematic mistakes that
    make their way into many Salesforce projects – mistakes that can even seem like
    a good idea at the time of implementation but end up having serious drawbacks
    in the long run. We’ll learn about the most common types of mistakes and how to
    think about them throughout this book. However, to do so, we must understand what
    anti-patterns are and how understanding them can help us architect and design
    better systems.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce 反模式告诉我们很多 Salesforce 项目中常见的系统性错误——这些错误在实施时可能看起来是个好主意，但最终在长期内会带来严重的弊端。我们将在本书中学习最常见的错误类型，并学习如何思考这些问题。然而，为了做到这一点，我们必须理解反模式是什么，以及理解它们如何帮助我们架构和设计更好的系统。
- en: In consequence, this chapter will start by explaining what anti-patterns are
    by going through several different definitions and ways of looking at them. Then,
    you’ll learn how they can help you deepen your understanding of architecture by
    knowing how these common mistakes are made and how they can seem like a good idea
    at the time. We’ll finish this chapter by explaining what will be covered in this
    book and how you can approach the content provided.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本章将从解释反模式是什么开始，逐步介绍几种不同的定义和看待它们的方式。接下来，你将了解它们如何帮助你加深对架构的理解，通过了解这些常见错误是如何发生的，以及它们在当时看起来为何是一个好主意。我们将在本章结束时解释本书将涵盖的内容以及你如何接近所提供的内容。
- en: In this second edition, we’ve expanded our exploration of Salesforce anti-patterns
    to include new patterns and insights that address the latest trends and developments
    in the Salesforce ecosystem. These additions are based on feedback from readers
    of the first edition and our ongoing research into the evolving landscape of Salesforce
    architecture. Notably, we’ve included new patterns related to AI and DevOps practices,
    such as “ *AI architecture is like normal architecture* ” and “ *Let’s add AI
    to it* ,” as well as updates to existing patterns to reflect the current best
    practices.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本版中，我们扩展了对 Salesforce 反模式的探讨，涵盖了新的模式和见解，解决了 Salesforce 生态系统中的最新趋势和发展。这些新增内容基于第一版读者的反馈和我们对
    Salesforce 架构不断变化的研究。值得注意的是，我们加入了与 AI 和 DevOps 实践相关的新模式，如“ *AI 架构就像普通架构* ”和“ *让我们在其中加入
    AI* ”，同时也更新了现有模式，以反映当前的最佳实践。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要话题：
- en: Understanding anti-patterns
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解反模式
- en: Where do anti-patterns come from?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反模式从哪里来？
- en: How can anti-patterns deepen your architectural skills?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反模式如何加深你的架构技能？
- en: Learning about anti-patterns from an example
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过示例学习反模式
- en: Understanding anti-patterns
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解反模式
- en: 'Most developers and architects will be familiar with the concept of a pattern
    – a good solution to a recurring problem within an architectural domain described
    in a formalized and reusable way. Some classic examples are as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发人员和架构师都熟悉模式的概念——它是对一个架构领域中经常出现的问题的良好解决方案，以一种正式化和可重用的方式描述。以下是一些经典的例子：
- en: '**Singleton** : A software design pattern that limits the number of instances
    of a given type to 1'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单例模式（Singleton）**：一种软件设计模式，它将某一类型的实例数量限制为 1'
- en: '**Fire-and-forget** : An asynchronous integration pattern that sends off a
    message from a computational context and proceeds without waiting for a response'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**火忘模式（Fire-and-forget）**：一种异步集成模式，它从计算上下文中发送消息并继续执行，而不等待响应'
- en: '**Model-View-Controller (MVC)** : An architectural pattern that divides an
    application into three tiers with specifically defined responsibilities:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型-视图-控制器（MVC）**：一种将应用程序分为三个层次并明确规定各自职责的架构模式：'
- en: First, a model maintains the state of the application and is responsible for
    any changes to data.
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，模型维护应用程序的状态，并负责任何数据的更改。
- en: Second, a view shows a particular representation of that model to an end user
    via some interface.
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二，视图通过某种界面将该模型的特定表示展示给最终用户。
- en: Third, a controller implements the business logic that responds to events in
    the user interface or changes in the model and does the necessary mediation between
    the view and the model.
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三，控制器实现了响应用户界面事件或模型变化的业务逻辑，并在视图与模型之间进行必要的调解。
- en: 'This pattern is shown in the following diagram:'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此模式在下图中显示：
- en: '![Figure 1.1 – MVC pattern diagram](img/B30991_01_1.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – MVC 模式图](img/B30991_01_1.jpg)'
- en: Figure 1.1 – MVC pattern diagram
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – MVC 模式图
- en: Patterns such as these have been defined at many levels of abstraction and for
    many different platforms.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模式已经在多个抽象层次和不同的平台上被定义。
- en: References
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Take a look look at the following resources to get a good introduction to the
    various patterns that you can apply from a Salesforce perspective:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下资源，以便从 Salesforce 角度了解可以应用的各种模式的良好入门：
- en: 'The integration patterns guide lists all the main patterns you should use when
    designing Salesforce integrations: [https://developer.salesforce.com/docs/atlas.en-us.integration_patterns_and_practices.meta/integration_patterns_and_practices/integ_pat_intro_overview.htm](https://developer.salesforce.com/docs/atlas.en-us.integration_patterns_and_practices.meta/integration_patterns_and_practices/integ_pat_intro_overview.htm)
    . In a Salesforce world, this may be the most commonly referenced set of patterns
    as they’re ubiquitous for integration design.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 集成模式指南列出了设计 Salesforce 集成时应该使用的所有主要模式：[https://developer.salesforce.com/docs/atlas.en-us.integration_patterns_and_practices.meta/integration_patterns_and_practices/integ_pat_intro_overview.htm](https://developer.salesforce.com/docs/atlas.en-us.integration_patterns_and_practices.meta/integration_patterns_and_practices/integ_pat_intro_overview.htm)。在
    Salesforce 的世界里，这可能是最常被引用的一套模式，因为它们在集成设计中无处不在。
- en: The book *Apex Design Patterns* from Packt, by Anshul Verma and Jitendra Zaa,
    provides patterns at the software design level and the concrete code level for
    the Apex language.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Packt 出版的《Apex 设计模式》一书，由 Anshul Verma 和 Jitendra Zaa 编写，提供了针对 Apex 语言的软设计层级和具体代码层级的模式。
- en: 'The Salesforce Architects site, while new, contains a range of patterns across
    domains, from code-level specifics to reference architectures and solution kits
    to good patterns for selecting governance: [https://architect.salesforce.com/design/#design-patterns](https://architect.salesforce.com/design/#design-patterns)
    .'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce Architects 网站虽然是新的，但涵盖了各个领域的一系列模式，从代码级别的具体内容到参考架构、解决方案工具包，以及选择治理的良好模式：[https://architect.salesforce.com/design/#design-patterns](https://architect.salesforce.com/design/#design-patterns)。
- en: The point is that we have lots of good patterns to choose from on the Salesforce
    platform, many of which are provided by Salesforce themselves, though others are
    provided by the wider community. Many patterns that apply to other platforms are
    also relevant to us and we learn much by studying them.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 关键在于，我们在 Salesforce 平台上有很多良好的模式可供选择，其中许多是由 Salesforce 本身提供的，尽管也有一些是由更广泛的社区提供的。许多适用于其他平台的模式同样对我们有用，我们通过研究它们学到了很多。
- en: But this is a book about anti-patterns, not patterns. So, why am I starting
    with a discussion about patterns? It turns out that the two are nearly inseparable
    and originate in the same tradition. So, understanding anti-patterns begins with
    understanding what a pattern is. One common form of anti-pattern is a *design
    pattern* that has been misapplied. We’ll explore this in the next section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但这是一本关于反模式的书，而不是模式。那么，为什么我要从讨论模式开始呢？事实证明，这两者几乎是不可分的，并且源于同一传统。因此，理解反模式首先需要理解什么是模式。反模式的一种常见形式就是*设计模式*的误用。我们将在下一节中探讨这一点。
- en: From pattern to anti-pattern
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从模式到反模式
- en: The design pattern movement in software architecture originates from the work
    of Christopher Alexander, an architect whose job was to design buildings rather
    than systems. In his work *The Timeless Way of Building* , he introduced a pattern
    template for physical architecture that consisted of a name, a problem statement,
    and a solution in a standardized format.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 软件架构中的设计模式运动源自克里斯托弗·亚历山大（Christopher Alexander）的工作，他是一位建筑师，专门设计建筑物而非系统。在他的著作《建筑的永恒方式》中，他介绍了一种物理架构的模式模板，包含一个名称、问题陈述和一个标准化格式的解决方案。
- en: 'The rhetorical structure provided by the Alexandrian template was rapidly adopted
    by architects of a different kind – the ones that build software. They recognized
    the power of a standardized way to describe problem-solution sets for communicating
    good practice. With the publication of the classic Gang of Four book, *Design
    Patterns: Elements of Reusable Object-Oriented Software* , the use of patterns
    became mainstream within software development and remains so to this day.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 亚历山大模板所提供的修辞结构很快被另一类建筑师——软件开发者采纳。他们意识到，标准化的方式可以用来描述问题解决集，从而传播良好的实践。随着经典的《设计模式：可重用面向对象软件的元素》一书的出版，模式的使用在软件开发中成为主流，并至今仍然如此。
- en: The research on patterns inspired an incipient community of practitioners and
    researchers in software engineering to think about failure modes of software systems
    analogously to how design patterns were being used. This happened over an extended
    period, and it isn’t possible to point to anyone in the anti-patterns movement
    who can be seen as the genuinely foundational figure.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有关模式的研究激发了一群软件工程领域的从业者和研究者，他们开始像设计模式一样，思考软件系统的失败模式。这一过程经历了较长时间，无法指认出反模式运动中的任何一位人物是可以视为真正奠基性的人物。
- en: However, many research papers on this topic start with the definition given
    by Andrew Koening in *Journal of Object-Oriented Programming* in 1995. This definition
    says that an anti-pattern is very similar to a pattern and can be confused for
    one. However, using it doesn’t lead to a solution; instead, it has negative consequences.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，许多关于该主题的研究论文都以安德鲁·科宁（Andrew Koening）在1995年《面向对象编程杂志》中的定义为起点。该定义认为，反模式与模式非常相似，容易混淆。然而，使用反模式并不会带来解决方案，反而会带来负面后果。
- en: This definition captures much of the essence and can be combined with the following
    thoughts from Jim Coplien, another early pioneer. He thought that good patterns
    in and of themselves weren’t sufficient to define a successful system. You also
    have to be able to show that anti-patterns are absent.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个定义捕捉了大部分的精髓，并且可以与另一位早期先驱吉姆·科普林（Jim Coplien）的一些思考结合起来。他认为，单纯的好模式不足以定义一个成功的系统。你还必须能够展示反模式的缺失。
- en: 'So, in a nutshell, an anti-pattern is a pattern that occurs in unsuccessful
    software systems or projects that can look superficially like a good solution
    but, in practice, gets you into trouble. The following are some common anti-patterns
    that have been around for ages and are still relevant:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，反模式是指在失败的软件系统或项目中出现的模式，它看起来像是一个好的解决方案，但实际上却会带来麻烦。以下是一些常见的反模式，它们已经存在了很长时间，并且至今仍然具有相关性：
- en: '**Stovepipe** : A system or module that’s effectively impossible to change
    because of how its interfaces are designed. See the following diagram for an illustration:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**锅炉管** : 一种系统或模块，由于其接口设计，几乎不可能进行更改。以下图示为例：'
- en: '![Figure 1.2 – The Stovepipe anti-pattern](img/B30991_01_2.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 - 锅炉管反模式](img/B30991_01_2.jpg)'
- en: Figure 1.2 – The Stovepipe anti-pattern
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 - 锅炉管反模式
- en: '**Blob** : A design where a single class effectively encapsulates all the business
    logic and functionality, leading to major maintenance headaches.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blob** : 一种设计，其中单个类有效地封装了所有业务逻辑和功能，导致重大维护问题。'
- en: '**Intensive coupling** : A design that uses an excessively large number of
    methods from another class or module in implementing a feature, leading to a deep
    dependency that’s hard to understand or change.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密切耦合** : 一种设计，使用了另一个类或模块中过多的方法来实现某个功能，导致形成了深度依赖关系，难以理解或修改。'
- en: We’ll dig into all these anti-patterns from a Salesforce perspective in later
    chapters, underscoring the unfortunate fact that Salesforce, while a great platform,
    is still a software system that’s prone to the kind of mistakes that have plagued
    software systems for decades. If this weren’t the case, then there’d be no need
    for this book – or Salesforce architects, for that matter.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后续章节从 Salesforce 的角度深入探讨这些反模式，强调一个不幸的事实：尽管 Salesforce 是一个优秀的平台，它仍然是一个容易犯下几十年来困扰软件系统的错误的软件系统。如果情况不是这样，那就不需要这本书——或者说
    Salesforce 架构师也不需要存在。
- en: In addition to having a foundational understanding of anti-patterns, it’s crucial
    to recognize how these patterns align with the latest trends in the Salesforce
    ecosystem. With the growing interest in AI and DevOps, new anti-patterns have
    emerged that specifically address challenges in these areas. For instance, the
    “ *Let’s add AI to it* ” pattern warns against the temptation to incorporate AI
    into solutions without a clear, justified need, leading to unnecessary complexity
    and maintenance challenges.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对反模式有基础性的理解外，认识到这些模式如何与 Salesforce 生态系统中的最新趋势相符也是至关重要的。随着对 AI 和 DevOps 日益增长的关注，出现了新的反模式，专门应对这些领域中的挑战。例如，“*让我们加点
    AI*”模式警告我们，避免在没有明确合理需求的情况下将 AI 纳入解决方案中，因为这会导致不必要的复杂性和维护挑战。
- en: DevOps practices have also introduced new anti-patterns, such as “ *Infrequent
    check-in* ,” which underscores the risks of not integrating code changes frequently
    enough, leading to integration hell and deployment issues. By understanding these
    new trends and their associated anti-patterns, architects can better navigate
    the complexities of modern Salesforce implementations.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 实践也引入了新的反模式，例如“*不频繁提交*”，它强调了不经常集成代码更改的风险，这会导致集成地狱和部署问题。通过理解这些新趋势及其相关的反模式，架构师可以更好地应对现代
    Salesforce 实现的复杂性。
- en: Having discussed the historical origins of anti-patterns, let’s discuss how
    they arise in the real world.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论完反模式的历史起源后，接下来我们将讨论它们如何在现实世界中产生。
- en: Where do anti-patterns come from?
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反模式是从哪里来的？
- en: Anti-patterns tend to arise again and again because the circumstances that drive
    technology projects into trouble are at least somewhat predictable. Equally predictable
    are the responses of people put into those situations. Since people in tough spots
    frequently make the same bad decisions, we get systematic patterns to study.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 反模式往往反复出现，因为推动技术项目陷入困境的环境至少在某种程度上是可预测的。同样可以预测的是，处于这些环境中的人们的反应。由于身处困境的人们常常做出相同的错误决策，我们就有了可以研究的系统性模式。
- en: Generally speaking, the most important thing to remember about anti-patterns
    is that they seem like a good idea at the time. They aren’t simply bad practices
    that someone should know better than to apply. You can make a reasoned argument
    that they should lead to good or at least acceptable outcomes when applied.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，关于反模式最重要的记忆点是，它们在当时看起来像是一个好主意。它们不仅仅是一些坏习惯，应该有更多经验的人避免应用。你可以合理地辩解说，当应用这些反模式时，它们本应带来良好或至少是可以接受的结果。
- en: Sometimes, the decision to apply an anti-pattern is down to inexperience, while
    other times, it’s down to desperation. But as often as not, it’s down to experienced
    professionals convincing themselves that in this case, doing what they’re doing
    is the right call or that this situation is different.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，应用反模式的决定源于经验不足，而有时则是源于绝望。但往往，更多的是经验丰富的专业人士说服自己认为，在这种情况下，他们所做的才是正确的选择，或者这个情况是不同的。
- en: Anti-patterns often arise from predictable circumstances in technology projects,
    but recent technological trends have introduced new contexts in which these patterns
    manifest. For instance, the rapid adoption of **artificial intelligence** ( **AI**
    ) and machine learning in Salesforce projects has led to the emergence of new
    anti-patterns, such as “ *AI architecture is like normal architecture* .” These
    patterns often arise from a lack of understanding of the unique requirements and
    challenges associated with integrating AI into Salesforce solutions.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 反模式通常源于技术项目中可预测的情况，但最近的技术趋势引入了新的环境，在这些环境中这些模式得以展现。例如，**人工智能**（**AI**）和机器学习在
    Salesforce 项目中的快速应用，导致了新反模式的出现，例如“*AI 架构就像普通架构*”。这些模式通常源于对将 AI 集成到 Salesforce
    解决方案中的独特需求和挑战缺乏理解。
- en: Similarly, the shift toward DevOps practices has highlighted new anti-patterns
    related to continuous integration and deployment. The “ *Infrequent check-in*
    ” pattern, for example, arises when teams fail to integrate code changes frequently,
    leading to significant integration challenges and deployment delays.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，向 DevOps 实践的转变也突显了与持续集成和部署相关的新反模式。例如，“*不频繁提交*”模式出现在团队未能频繁集成代码更改时，从而导致了重大的集成挑战和部署延迟。
- en: We’ll try to reflect this diversity of origins in the examples we’ll provide
    throughout this book. However, to do this, we need to explain how we’ll present
    the examples in a consistent way to enable learning.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书中提供的例子中，尽量反映这种起源的多样性。然而，为了做到这一点，我们需要解释如何以一致的方式呈现这些例子，以便促进学习。
- en: An anti-pattern template
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反模式模板
- en: One of the key characteristics of both patterns and anti-patterns is that they’re
    written using a recognizable template. Many templates have been suggested over
    the years, with some more elaborate than others.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 模式和反模式的一个关键特征是它们都是使用可识别的模板编写的。多年来，已经提出了许多模板，有些比其他的更加复杂。
- en: 'The template we’ll use in this book contains the bare bones that recur in nearly
    all existing anti-pattern templates. However, we won’t include a great number
    of optional elements. Most additional elements that are included in other templates
    serve to ease categorization or cross-referenceability. Those are highly desirable
    elements to have when creating a searchable catalog of patterns or anti-patterns
    but are less useful in a printed book. Therefore, we’ll omit them and include
    the following elements instead:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的模板包含了几乎所有现有反模式模板中反复出现的基本内容。然而，我们不会包含大量的可选元素。其他模板中包含的大多数附加元素用于简化分类或交叉引用，这些元素对于创建可搜索的模式或反模式目录非常有用，但在印刷书籍中则较少实用。因此，我们将省略这些元素，并包含以下内容：
- en: '**Name** : An easy-to-remember moniker for the pattern that serves to identify
    it uniquely and help with discourse among architects.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：一个易于记住的标识符，用于唯一识别该模式并帮助架构师之间的讨论。'
- en: '**Type** : In this book, we’ll categorize our anti-patterns by the domain from
    the **Certified Technical Architect** ( **CTA** ) review board examination that
    they’re relevant to. This is both to help people on the CTA journey, but also
    because this is a familiar typology for Salesforce architects.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**：在本书中，我们将根据**认证技术架构师**（**CTA**）复审委员会考试相关的领域对反模式进行分类。这既是为了帮助那些在CTA旅程中的人，也因为这对Salesforce架构师来说是一种熟悉的分类方法。'
- en: '**Example** : We’ll introduce each anti-pattern by giving an example of how
    it might occur. The examples will be fictional but grounded in real-world events.
    This will frame the anti-pattern and give you an immediate understanding of the
    issues involved before we delve deep into the nuts and bolts.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例**：我们将通过举例说明反模式如何发生，来介绍每个反模式。示例将是虚构的，但与现实中的事件相关。这将为反模式设定框架，并让你在深入探讨之前立即理解其中涉及的问题。'
- en: '**Problem** : This section describes the problem(s) that the anti-pattern purports
    to solve more formally. These are the real issues that the anti-pattern is meant
    to be a solution for, although using it in practice will turn out to be a bad
    idea.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题**：本节将正式描述反模式试图解决的问题。这些是反模式旨在解决的实际问题，尽管在实践中使用它将证明是一个糟糕的主意。'
- en: '**Proposed solution** : How the anti-pattern claims to solve the problem described
    in the previous section and how that can be tempting to believe given certain
    circumstances.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**建议的解决方案**：反模式声称如何解决上一节中描述的问题，并且在某些情况下，这种解决方案看起来可能很有诱惑力。'
- en: '**Results** : In the results section, we’ll outline what results you can expect
    from applying the anti-pattern, along with its main variations. We’ll explain
    why this is a bad solution, although it might look good at the outset.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结果**：在结果部分，我们将概述应用反模式及其主要变体后，你可以期待得到的结果。我们将解释为什么这是一种不好的解决方案，尽管它在开始时看起来可能不错。'
- en: '**Better solutions** : The final section in the template will tell you what
    to do instead when you’re faced with the problem that’s the basis for the anti-pattern.
    Not all problems have easy solutions, but you can generally do better than applying
    an anti-pattern.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更好的解决方案**：模板中的最后一部分将告诉你，在面对反模式所基于的问题时应该怎么做。并非所有问题都有简单的解决方案，但通常你能做得比应用反模式更好。'
- en: Now that we understand what anti-patterns are and how they’re going to be structured
    in this book, we’ll move on and explain how you, as an architect, can improve
    your skills by using them to learn.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经理解了反模式是什么，以及它们在本书中的结构安排，我们将继续解释作为架构师的你，如何通过使用它们来提升自己的技能。
- en: How can anti-patterns deepen your architectural skills?
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反模式如何深化你的架构技能？
- en: While a theoretical understanding of what patterns and anti-patterns are and
    how they may generally be helpful is great, you’re no doubt looking for more from
    this book than just a theoretical discussion.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管理论上理解什么是模式和反模式，以及它们如何一般性地提供帮助是很好的，但你无疑希望从本书中获得的不仅仅是理论讨论。
- en: In this section, we’ll go through the value of learning from mistakes, both
    your own and other people’s, and show you how we’re going to use anti-patterns
    to sharpen your architectural chops in the context of a concrete example.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将讨论从错误中学习的价值，无论是你自己的错误还是他人的错误，并展示我们将如何通过反模式在具体实例的背景下提升你的架构技能。
- en: How great architects learn from mistakes
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 伟大的架构师如何从错误中学习
- en: We work in an industry where failure is a normal occurrence. The Standish Group
    CHAOS report, which is the most commonly cited source on these matters, in 2020
    estimated that 66% of all technology projects globally ended in partial or complete
    failure.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们工作在一个失败是常态的行业中。Standish Group CHAOS报告（这是在这方面最常引用的资料）在2020年估计，全球66%的技术项目最终部分或完全失败。
- en: This is a little bit better than when I started my career more than 20 years
    ago. Then, the figure stood in the low 70s. However, while things have improved,
    they’ve only improved a little bit, despite agile development, cloud computing,
    AI, and great software platforms such as Salesforce.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这比我20多年前刚开始职业生涯时要好一点。当时，这个数字只有70出头。然而，尽管敏捷开发、云计算、人工智能以及Salesforce等伟大的软件平台出现了，情况有所改善，但改善的幅度仍然很小。
- en: This is disheartening, but it only proves the point of one of my heroes, Fred
    Brooks, that “ *The complexity of software is an essential property, not an accidental
    one,* ” which unfortunately means that we’ll never find a silver bullet to solve
    all problems in software architecture and design. Instead, we’re faced with the
    hard work of learning how to manage this complexity reasonably. To do so is the
    principal job of an architect.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这令人沮丧，但它只证明了我的一位英雄——弗雷德·布鲁克斯——所说的“ *软件的复杂性是一个本质特性，而非偶然特性* ”，这不幸意味着我们永远无法找到一颗万金油来解决软件架构和设计中的所有问题。相反，我们面临的是如何合理管理这种复杂性的艰巨工作。做到这一点，是架构师的主要工作。
- en: It stands to reason that in an area with high failure rates and irreducible
    complexity, we need to have good rules and guidelines to keep us on the right
    path. That is what patterns and best practices are for. They’re indispensable,
    but they’re not enough.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 合乎逻辑的是，在一个高失败率和不可简化复杂度的领域，我们需要有良好的规则和指导方针来引导我们走上正确的道路。这就是模式和最佳实践的作用。它们是不可或缺的，但它们还不够。
- en: To become great at our profession and to be able to design software that bucks
    the industry trend, we need to not just learn from our failures but also from
    the vast repository of failed projects and bad practices we see all around us.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的专业领域做到卓越，并能够设计出突破行业趋势的软件，我们不仅要从自己的失败中学习，还要从我们周围看到的那些失败的项目和糟糕的实践中学习。
- en: That usually isn’t hard to do. Often, when the architect is brought into a project,
    it’s because there’s already an issue to fix. Using these occurrences as learning
    opportunities and analyzing them with that view in mind can be greatly rewarding.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常并不难做到。通常，当架构师被召入项目时，意味着已经有一个问题需要解决。把这些情况当作学习机会，并以这种视角进行分析，往往会带来巨大的收获。
- en: However, there’s a step further to go in this direction, which is what anti-patterns
    offer. They encompass how things frequently go wrong in a way that allows both
    post-hoc learning but also real-time intervention.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这个方向上还有进一步的步骤，这就是反模式所提供的。它们涵盖了事物经常出错的方式，这种方式不仅允许事后学习，还能够进行实时干预。
- en: While projects can go wrong, they don’t do so randomly. There are systematic
    patterns that repeat time and again. Learning how things go wrong in systematic
    ways can give you an entirely new set of responses in your toolbox that you can
    deploy to help make your project one of the 34% that don’t fail.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然项目可能会失败，但它们并非随机地出错。其实有系统性的模式一次又一次地重复。学习事物如何以系统性方式出错，可以为你的工具箱增添一套全新的应对策略，帮助你将项目打造成那34%没有失败的项目之一。
- en: Understanding anti-patterns not only helps you avoid common pitfalls but also
    enhances your ability to navigate the complexities of modern Salesforce architectures,
    including AI and DevOps practices. These insights are particularly valuable for
    those preparing for the CTA review board examination as they demonstrate a deep
    understanding of the challenges and best practices in modern Salesforce architecture.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 理解反模式不仅帮助你避免常见的陷阱，还增强你应对现代Salesforce架构复杂性的能力，包括人工智能和DevOps实践。这些见解对准备参加CTA复审委员会考试的人特别有价值，因为它们展示了对现代Salesforce架构中的挑战和最佳实践的深刻理解。
- en: We’ll start that learning journey with an explanatory example.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过一个解释性的例子开始这段学习之旅。
- en: An example – the Hero anti-pattern
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个例子——英雄反模式
- en: There’s no better way to start learning than using an example. We won’t have
    the chance to cover many general management-level anti-patterns in this book,
    so I’ll use one of the classics in this genre to show you how the template works
    and how to read it to get the most out of it.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 学习最好的方式就是通过示例。我们在本书中不会有机会涵盖很多管理层的反模式，所以我将用这个领域中的经典例子来展示模板是如何工作的，以及如何解读它以获得最大的收获。
- en: First, we’ll present the anti-pattern and then provide an analysis of what we
    can learn from it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将展示反模式，然后提供分析，看看我们能从中学到什么。
- en: Hero (development life cycle and deployment planning)
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Hero（开发生命周期和部署规划）
- en: Tom is the project manager for a large greenfield Salesforce implementation
    in the manufacturing industry working with Sales and Service Cloud for 2,000 users.
    The project is meant to be quite simple – a basic MVP to get the platform off
    the ground – and that’s how it’s been scoped and staffed. The project is meant
    to go into full production after 6 months, with 4 months of implementation followed
    by testing, training, rollout, and hypercare.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Tom是制造行业中一个大型绿色田地Salesforce实施项目的项目经理，涉及销售与服务云，面向2,000名用户。这个项目原本计划非常简单——一个基础的MVP，用于启动平台——并且项目的范围和人员配置也是如此。该项目计划在6个月后进入全面生产，实施阶段为4个月，随后进行测试、培训、部署和超关怀阶段。
- en: The first 3 months of implementation fly by and everything on the project management
    dashboard stays green. The team makes steady progress and relations with the external
    consultancy that’s helping provide specialist resources remain good.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 实施的前3个月飞快过去，项目管理仪表盘上的一切依旧保持绿色。团队稳步推进，与外部咨询公司（提供专业资源的合作伙伴）的关系也保持良好。
- en: However, when Tom delivers the first round of business reviews, things start
    to change quickly. It turns out that a lot of detailed requirements have been
    missed from the initial scope and that many edge cases aren’t covered by the current
    configuration. The feedback from the business is that they won’t be able to go
    live with the system unless a large list of additional functionality is included.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当Tom交付第一轮业务审查时，情况开始迅速发生变化。事实证明，许多详细需求在最初的范围中被遗漏，许多边缘案例也未被当前的配置所涵盖。业务方面的反馈是，除非包括一大批额外的功能，否则无法让系统上线。
- en: Tom goes to the steering committee to ask for a bigger budget and a scheduled
    increase to accommodate the business demands. The steering committee grants the
    request for an increased budget but tells him that the schedule is immovable.
    He must find a way to get it done within the current timeline.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Tom去向指导委员会请求更大的预算和按计划增加的时间表，以应对业务需求。指导委员会同意了增加预算的请求，但告诉他，时间表是不可更动的。他必须在当前的时间框架内找到完成任务的方法。
- en: Tom replans the project from the ground up. He can make it all fit by compressing
    the testing and cutover plan if he adds some new resources from the external partner
    and asks for some overtime from his existing team. He sends out the new plan to
    the team, along with a rousing email calling on everyone to rise to the challenge.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Tom从头开始重新规划项目。如果他从外部合作伙伴那里增加一些新资源，并向现有团队要求加班，他可以通过压缩测试和切换计划让一切适配。他将新计划发给团队，并附上一封激励人心的邮件，呼吁每个人都迎接挑战。
- en: Over the next month, the project slips again, and Tom’s new plan is looking
    less and less likely to succeed. It’s not that anything big goes wrong, but lots
    of little things just aren’t completed on time or need to be reworked because
    of misunderstandings. In particular, the new consultants he’s brought in from
    the external partner seem to make a lot of basic mistakes.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的一个月，项目再次出现延误，Tom的新计划看起来越来越不可能成功。并不是发生了什么重大问题，而是许多小问题没有按时完成，或者因为误解需要重新做。特别是，他从外部合作伙伴带来的新顾问似乎犯了很多基本错误。
- en: Tom calls his boss, the senior director for IT, to tell him about the situation
    and ask for help in getting an extension to the schedule. She tells him that the
    schedule has been committed to the board of directors of the company and that
    heads will roll if it isn’t met. She says that this is the time for the team to
    pull out all the stops and get it done.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Tom打电话给他的老板，IT高级总监，告诉她当前的情况，并请求帮助延长项目时间表。她告诉他，时间表已经向公司董事会承诺，如果不能按时完成，某些人将会被辞退。她说，现在是团队全力以赴，完成任务的时候了。
- en: Tom goes back to his team to relay the news and once again calls for everyone
    to give it everything they’ve got to get things over the line. Unfortunately,
    most people are already working as hard as their situations allow. In addition,
    relations with the external partner have soured and they’re not willing to put
    in additional hours without additional funding, which Tom doesn’t have in the
    budget.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 汤姆回到团队，传达了消息，再次呼吁每个人都尽全力把事情推进。遗憾的是，大多数人已经在尽自己所在情况下最大的努力。而且与外部合作伙伴的关系已经恶化，他们不愿意再加班，除非能获得额外的资金，而汤姆的预算无法支持这一要求。
- en: 'There are some bright spots, however. In particular, two young members of the
    technical staff, Kayleigh and Negash, prove willing to go above and beyond to
    get things done. Over the final month of delivery, they work 24/7 on the project,
    with Tom cheering them on:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，还是有一些亮点。特别是两位年轻的技术人员——凯莉和内加什，展现出愿意超越常规去完成工作的态度。在最后一个月的交付过程中，他们几乎全天候工作，汤姆在背后为他们加油：
- en: '![Figure 1.3 – The dangerous feeling you might have when engaging in the Hero
    anti-pattern](img/B30991_01_3.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3 – 当你陷入英雄反模式时可能会有的危险感觉](img/B30991_01_3.jpg)'
- en: Figure 1.3 – The dangerous feeling you might have when engaging in the Hero
    anti-pattern
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – 当你陷入英雄反模式时可能会有的危险感觉
- en: Between the two of them, they manage to clear away enough of the new features
    and change requests during the final stretch that Tom becomes confident that he’ll
    be able to meet enough of the requests for the project launch to not be a disaster.
    There will be exceptions, but he can find a way of managing those later. So long
    as the impending go-live goes well, the project can still succeed.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在他们二人的合作下，最终在最后阶段清除了足够的新特性和变更请求，汤姆变得有信心认为他能满足足够的项目需求，从而避免项目启动成为一场灾难。虽然会有例外情况，但他可以稍后找到应对方法。只要即将到来的上线顺利进行，项目仍然有可能成功。
- en: However, **user acceptance testing** ( **UAT** ) throws a spanner in the works
    as major quality issues are discovered. The steering committee holds a crisis
    meeting that ends up concluding that the go-live will have to be postponed for
    a week. The team will have to work flat out during this period to fix the issues.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，**用户验收测试**（**UAT**）却给项目带来了麻烦，因为发现了重大质量问题。指导委员会召开了危机会议，最终决定将上线推迟一周。团队必须在这段时间内全力以赴解决问题。
- en: While everyone pitches in, the responsibility falls disproportionately on Kayleigh
    and Negash, who are both starting to show the strain of their continuous effort.
    Tom encourages them at every chance and singles them out for public praise. He
    also promises them a cash bonus and extra holidays when the project is done.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管每个人都在努力，但责任不成比例地落在凯莉和内加什身上，他们两人开始表现出持续工作带来的压力。汤姆在每个机会中鼓励他们，并公开表扬他们。他还承诺项目完成后会给予他们现金奖励和额外的假期。
- en: The day for retesting arrives and while many issues have been fixed satisfactorily,
    there are quite a few remaining issues, including a good number that had previously
    been fixed and are now recurring.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 重测的日子终于到来，尽管许多问题已经得到令人满意的修复，但仍然有相当多的遗留问题，包括一些之前已修复但现在又重新出现的问题。
- en: The steering committee holds another crisis meeting and they decide to go ahead
    with the launch, despite the issues. These issues will need to be fixed during
    the hypercare period, but they can be tolerated for a short amount of time.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 指导委员会召开了另一次危机会议，决定尽管问题存在，仍然推进上线。这些问题将在超照护期内修复，但在短时间内是可以容忍的。
- en: The next few weeks of Tom’s, Kayleigh’s, and Negash’s lives happen in a blur
    of constant motion. They’re pulled from escalation to escalation as issues occur,
    are fixed, and reoccur. Kayleigh and Negash start buckling under the pressure,
    but with no alternative resources knowing the configuration, they’re effectively
    forced to carry on.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来几周，汤姆、凯莉和内加什的生活都充斥着不断的紧张节奏。随着问题的不断出现、修复与重现，他们从一个紧急情况忙到另一个。凯莉和内加什开始承受不住压力，但由于没有其他了解配置的资源，他们实际上被迫继续坚持下去。
- en: Eventually, the issues settle down. The important bugs are fixed, the business
    puts manual workarounds in place for the things that were missed, and life starts
    to go back to normal. Tom calls the team for a victory celebration, but it’s a
    muted affair.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，问题得以平息。重要的漏洞已经修复，业务部门为遗漏的事项采取了手动解决方案，生活也逐渐恢复正常。汤姆召集团队举行庆功会，但气氛却显得比较低调。
- en: After taking their extra holidays, Kayleigh and Negash both accept offers from
    big consulting companies, leaving the company with no one to support large chunks
    of functionalities on their newly implemented platform.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Hero anti-pattern generally purports to fix an urgent delivery problem that
    has occurred either in a project context, as in our example, or during normal
    operations. When it occurs in normal operational mode, this is often in a context
    where firefighting issues with the system have become a run-of-the-mill occurrence.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, the problem occurs in a context characterized by some of the following
    factors:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: There are limited resources to carry out the work needed to fix the urgent problem
    and there are good reasons why new resources can’t be brought in at this time.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The project has a tight schedule that’s perceived to be set in stone or the
    issue is live, critical, and affecting important business users adversely in ways
    that cause a lot of noise.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s knowledge about the problem concentrated in a small number of heads
    – that is, a few people, such as Kayleigh and Negash, who volunteered to take
    on the role, or frequently a lead developer who’s the only one with the technical
    knowledge to fix the issue at the given time.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The situation is considered somehow special: either this is a new project and
    there isn’t a precedent, or the issue is considered so unique that you can’t plan
    for it.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The crisis element is often quite visible in situations that foster the Hero
    anti-pattern. Sometimes, important parts of the company’s future success or even
    survival are brought into play.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These factors can all make the problem seem more important to fix in a limited
    time scale and make the Hero anti-pattern seem attractive.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Proposed solution
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Hero anti-pattern proposes to solve the problem described in the preceding
    section by allowing an individual or a small group to take too much responsibility
    for resolving it effectively by working as much as is required, even at some cost
    to themselves, to get things done.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be attractive both to management and to the people involved for a
    variety of reasons:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: The effort does tend to produce some results in the short term, giving a sense
    of momentum and success.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Everyone, or at least nearly everyone, wants to be a hero and be singled out
    for praise and rewards. To some people, that’s worth the inconvenience of the
    additional effort.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s always possible to imagine that the current situation is somehow unique
    and not reflective of a deeper problem with process or culture within the organization,
    thereby justifying what’s done as exceptional.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if we acknowledge that there are underlying issues, often, these can be
    put out of mind as something to be dealt with later. Of course, in organizations
    that rely on the Hero anti-pattern, later never comes.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are several common variants of the Hero anti-pattern that are worth mentioning:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Superman, a variant where someone, usually a senior technical person, is glorified
    and held up as the only person who can fix serious issues with a given system.
    Often, this myth becomes self-perpetuating.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rookies, the variant shown in the preceding example, where junior team members
    take on extra responsibilities to step up to the challenge that’s being presented
    to them.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No Time for Knowledge Transfer, a situation where heroics are required by a
    seemingly never-ending time crunch that would make it possible for the hero or
    heroes to transfer required knowledge to others.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While this anti-pattern is seductive, and many of us have fallen prey to it
    several times throughout our careers, it almost invariably has negative long-term
    consequences, something we’ll explore next.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Results
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While the Hero anti-pattern tends to give good short-term results, which is
    a major source of its enduring appeal, there’s a long list of negative results
    that tend to accumulate over time in organizations that rely on this anti-pattern
    to get things done.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the most common negative results are as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: The creation of a single point of failure that increases risks to an organization
    substantially, should the hero fall under the proverbial bus, and gives the hero
    a lot of leverage in negotiations with the organization.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Over time, the hero will start to feel pressure, just like Kayleigh and Negash
    did in our example, but they’ll have very limited options to change the situation.
    This situation is highly conducive to burnout, which brings with it all the problems
    of the first point, as well as the risk of the hero making serious errors due
    to the strain.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heroes don’t scale. This means that the organization won’t be able to deploy
    projects at a bandwidth that’s wider than what the hero can accommodate. This
    can be seriously limiting to new initiatives in some cases.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heroes aren’t replicable. You can’t replicate the hero or their special powers
    easily, so you have limited options for creating a predictable and repeatable
    process.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heroes can accumulate serious technical debt. This may often go unmanaged because
    they must do things quickly, under pressure, and without real supervision. This
    can lead to major maintenance issues in the long term.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s low transparency into the process by which heroes get things done, leading
    to a lack of predictability and manageability.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heroes don’t have time to explain how things were implemented, so there’s often
    poor or entirely missing documentation.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of the team may feel disempowered, overlooked, and demotivated as all
    the attention goes to the heroes, with little opportunity for others to make contributions
    in a non-heroic way.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You don’t necessarily see all these negative outcomes in all instances of this
    anti-pattern, and unfortunately, this list isn’t exhaustive either. But hopefully,
    this is enough to make you think twice about applying this anti-pattern and look
    at better options, something we’ll explore next.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The fundamental problem with the Hero anti-pattern is that you’re relying on
    specific individuals with often hidden knowledge working hard – usually too hard
    – to get things done rather than on repeatable, transparent, and manageable processes
    that will allow you to continue to deliver, even as the context and the people
    involved change.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: So, the primary way to get away from the Hero anti-pattern is to work on your
    processes and spread skills and knowledge systematically across the team. In our
    example, there were potential issues with scope management, the initial discovery
    work, governance and its understanding of the real issues on the ground, and the
    way the project had been structured to go live with a big bang rather than in
    small increments.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'How specific interventions will provide the most leverage will vary a lot between
    organizations, but some good aspects to look at are as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Moving toward a DevOps culture with smaller incremental releases that have lower
    risk profiles
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having multi-functional teams with frequent direct collaboration and peer review
    to spread knowledge around
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encouraging and rewarding leads and specialists more for mentoring and bringing
    up juniors rather than for putting out the latest fire
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorporating better risk management and governance in projects so that you
    can have the right contingencies in place when things go wrong, as they inevitably
    will
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Challenging the cultural norms that put primacy on delivering big dramatic wins
    against the odds, rather than on making steady, undramatic, but repeatable progress
    regularly
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emphasize roles and processes, not individuals when planning, building, and
    operating systems, especially when communicating with the wider stakeholder community
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make the costs of the Hero anti-pattern visible by capturing the technical debt,
    the risk, and the missed opportunity to be able to replicate efforts that the
    organization loses by relying on this pattern
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that detailed requirements and edge cases are planned for when beginning
    the project to reduce the probability that you’ll need a hero
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In truth, it isn’t always possible to completely avoid the Hero anti-pattern.
    Sometimes, things are on fire and there’s only one person around who can fix it.
    What we need to recognize is that this isn’t a good situation but an anti-pattern
    that we need to work hard to fix so that it doesn’t recur. The more you do this,
    the less you’ll have to rely on heroes and the fewer fires you’ll have to put
    out.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Having covered our first example of a real anti-pattern, let’s analyze it a
    little more deeply to see how we can maximize our learning from it.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing the example
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Hero anti-pattern is a classic and most seasoned IT professionals will have
    encountered it during their careers. However, interesting as it is, in this book,
    we’ll also be looking to pull out the larger patterns so that we can learn from
    our examples to hone our architectural skills.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, we’ll do this by having a section toward the end of each
    chapter that extracts key learning points for you to take on your future architecture
    journey. We’ll do this while implementing a mind-to-real-life practice, but we’ll
    also list learning points specifically for those who are on track toward the CTA
    exam.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'Considering the Hero anti-pattern, the following are a few learning points
    you might extract for real-life practice:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: When you’re faced with a crisis that calls for extraordinary effort on the part
    of some or all of the team, take the time to step back and consider the process
    failures that led to this situation. Capture this for future use.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relying on a small number of extremely skilled individuals can be dangerous
    in the long run, even if it’s useful right now.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pressure you might feel toward going above and beyond may reflect a culture
    that doesn’t have its priorities right from a technical point of view. You may
    want to challenge that if possible.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go out of your way to empower and bring up junior staff to avoid being in a
    position where you have to be the hero.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be diligent about advocating for good governance both at the project and technical
    levels, as well as capturing and remedying the technical debt that accumulates
    from “ special” situations.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Looking at the CTA review board, you can note the following lessons:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Be careful about suggesting big-bang delivery approaches. They can be the right
    choice, but frequently, they can lead to the issues highlighted in this example.
    Prefer using agile, incremental approaches unless there’s a specific reason not
    to.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that you include the necessary governance functions, including a **project
    management office** ( **PMO** ), steering committee, design authority, and maybe
    a change advisory board. In this example, much could have been avoided if the
    latter two had been in place.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be explicit about risks and risk management. Include risks upfront and be ready
    to talk about how to manage and mitigate them.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While we’ll be able to pull out many learning points directly, we encourage
    you to go further with this method and see how much more you can get out of them.
    Learning from anti-patterns is a continuous and very rewarding activity for aspiring
    architects.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the traditional lessons learned from the Hero anti-pattern, it’s
    important to consider how this pattern intersects with modern trends such as AI
    and DevOps. For instance, in a DevOps environment, the reliance on a single “hero”
    to manage deployments can lead to significant bottlenecks and integration issues,
    highlighting the importance of practices such as continuous integration and frequent
    check-ins.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, in AI projects, the Hero anti-pattern can manifest when a single
    data scientist or AI specialist is relied upon to deliver complex AI solutions
    without adequate support or knowledge transfer. This can lead to burnout and a
    lack of scalability, underscoring the need for collaborative, multi-functional
    teams.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have a foundational understanding of what anti-patterns are and
    how they can help us achieve greater mastery of Salesforce architecture. All that’s
    left to do is summarize our progress before we dive into the deep end by looking
    at anti-patterns in the system architecture domain.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Phew – that was a lot of background! Thank you for sticking with it. You’re
    now in a position to move forward with this book since you understand the key
    facts about what anti-patterns are and how you can learn from them.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few things to remember as you go into the next chapters:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: It’s important not to simply think about anti-patterns as bad practices. Bad
    practice is obvious, but anti-patterns are nefarious. They masquerade as good
    solutions and can be persuasive in certain situations, even to experienced professionals.
    That’s also what makes them so fun to study.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While we’ll be presenting a lot of individual anti-patterns in this book, it’s
    important to draw out the parallels and meta-patterns that can be gleaned by comparing
    and contrasting them. We’ll do some of that work for you in the analysis sections
    that can be found throughout this book. You should also try to do this activity
    for yourself.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While we’ll be focusing on a Salesforce context, many of the patterns you’ll
    learn about apply to other platforms as well. Some are even classics that will
    be known by a great number of grizzled architects.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we move forward with this book, remember that anti-patterns aren’t just bad
    practices but deceptive solutions that can seem appealing in certain situations.
    In this second edition, we’ve expanded our exploration to include new anti-patterns
    related to AI and DevOps that reflect the latest trends and challenges in the
    Salesforce ecosystem. By understanding these patterns and their implications,
    you can enhance your architectural skills and better navigate the complexities
    of modern Salesforce projects, whether in real life or in preparation for the
    CTA review board examination.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'With that out of the way, we’re now ready to look at our first architectural
    domain in detail: systems architecture.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
