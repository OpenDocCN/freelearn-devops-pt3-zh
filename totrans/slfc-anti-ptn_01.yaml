- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why Do We Need to Understand Salesforce Anti-Patterns?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Salesforce anti-patterns tell us about the kinds of systematic mistakes that
    make their way into many Salesforce projects – mistakes that can even seem like
    a good idea at the time of implementation but end up having serious drawbacks
    in the long run. We’ll learn about the most common types of mistakes and how to
    think about them throughout this book. However, to do so, we must understand what
    anti-patterns are and how understanding them can help us architect and design
    better systems.
  prefs: []
  type: TYPE_NORMAL
- en: In consequence, this chapter will start by explaining what anti-patterns are
    by going through several different definitions and ways of looking at them. Then,
    you’ll learn how they can help you deepen your understanding of architecture by
    knowing how these common mistakes are made and how they can seem like a good idea
    at the time. We’ll finish this chapter by explaining what will be covered in this
    book and how you can approach the content provided.
  prefs: []
  type: TYPE_NORMAL
- en: In this second edition, we’ve expanded our exploration of Salesforce anti-patterns
    to include new patterns and insights that address the latest trends and developments
    in the Salesforce ecosystem. These additions are based on feedback from readers
    of the first edition and our ongoing research into the evolving landscape of Salesforce
    architecture. Notably, we’ve included new patterns related to AI and DevOps practices,
    such as “ *AI architecture is like normal architecture* ” and “ *Let’s add AI
    to it* ,” as well as updates to existing patterns to reflect the current best
    practices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding anti-patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where do anti-patterns come from?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can anti-patterns deepen your architectural skills?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about anti-patterns from an example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding anti-patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most developers and architects will be familiar with the concept of a pattern
    – a good solution to a recurring problem within an architectural domain described
    in a formalized and reusable way. Some classic examples are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Singleton** : A software design pattern that limits the number of instances
    of a given type to 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fire-and-forget** : An asynchronous integration pattern that sends off a
    message from a computational context and proceeds without waiting for a response'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model-View-Controller (MVC)** : An architectural pattern that divides an
    application into three tiers with specifically defined responsibilities:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, a model maintains the state of the application and is responsible for
    any changes to data.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Second, a view shows a particular representation of that model to an end user
    via some interface.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Third, a controller implements the business logic that responds to events in
    the user interface or changes in the model and does the necessary mediation between
    the view and the model.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This pattern is shown in the following diagram:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.1 – MVC pattern diagram](img/B30991_01_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – MVC pattern diagram
  prefs: []
  type: TYPE_NORMAL
- en: Patterns such as these have been defined at many levels of abstraction and for
    many different platforms.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look look at the following resources to get a good introduction to the
    various patterns that you can apply from a Salesforce perspective:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The integration patterns guide lists all the main patterns you should use when
    designing Salesforce integrations: [https://developer.salesforce.com/docs/atlas.en-us.integration_patterns_and_practices.meta/integration_patterns_and_practices/integ_pat_intro_overview.htm](https://developer.salesforce.com/docs/atlas.en-us.integration_patterns_and_practices.meta/integration_patterns_and_practices/integ_pat_intro_overview.htm)
    . In a Salesforce world, this may be the most commonly referenced set of patterns
    as they’re ubiquitous for integration design.'
  prefs: []
  type: TYPE_NORMAL
- en: The book *Apex Design Patterns* from Packt, by Anshul Verma and Jitendra Zaa,
    provides patterns at the software design level and the concrete code level for
    the Apex language.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Salesforce Architects site, while new, contains a range of patterns across
    domains, from code-level specifics to reference architectures and solution kits
    to good patterns for selecting governance: [https://architect.salesforce.com/design/#design-patterns](https://architect.salesforce.com/design/#design-patterns)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: The point is that we have lots of good patterns to choose from on the Salesforce
    platform, many of which are provided by Salesforce themselves, though others are
    provided by the wider community. Many patterns that apply to other platforms are
    also relevant to us and we learn much by studying them.
  prefs: []
  type: TYPE_NORMAL
- en: But this is a book about anti-patterns, not patterns. So, why am I starting
    with a discussion about patterns? It turns out that the two are nearly inseparable
    and originate in the same tradition. So, understanding anti-patterns begins with
    understanding what a pattern is. One common form of anti-pattern is a *design
    pattern* that has been misapplied. We’ll explore this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: From pattern to anti-pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The design pattern movement in software architecture originates from the work
    of Christopher Alexander, an architect whose job was to design buildings rather
    than systems. In his work *The Timeless Way of Building* , he introduced a pattern
    template for physical architecture that consisted of a name, a problem statement,
    and a solution in a standardized format.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rhetorical structure provided by the Alexandrian template was rapidly adopted
    by architects of a different kind – the ones that build software. They recognized
    the power of a standardized way to describe problem-solution sets for communicating
    good practice. With the publication of the classic Gang of Four book, *Design
    Patterns: Elements of Reusable Object-Oriented Software* , the use of patterns
    became mainstream within software development and remains so to this day.'
  prefs: []
  type: TYPE_NORMAL
- en: The research on patterns inspired an incipient community of practitioners and
    researchers in software engineering to think about failure modes of software systems
    analogously to how design patterns were being used. This happened over an extended
    period, and it isn’t possible to point to anyone in the anti-patterns movement
    who can be seen as the genuinely foundational figure.
  prefs: []
  type: TYPE_NORMAL
- en: However, many research papers on this topic start with the definition given
    by Andrew Koening in *Journal of Object-Oriented Programming* in 1995. This definition
    says that an anti-pattern is very similar to a pattern and can be confused for
    one. However, using it doesn’t lead to a solution; instead, it has negative consequences.
  prefs: []
  type: TYPE_NORMAL
- en: This definition captures much of the essence and can be combined with the following
    thoughts from Jim Coplien, another early pioneer. He thought that good patterns
    in and of themselves weren’t sufficient to define a successful system. You also
    have to be able to show that anti-patterns are absent.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in a nutshell, an anti-pattern is a pattern that occurs in unsuccessful
    software systems or projects that can look superficially like a good solution
    but, in practice, gets you into trouble. The following are some common anti-patterns
    that have been around for ages and are still relevant:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stovepipe** : A system or module that’s effectively impossible to change
    because of how its interfaces are designed. See the following diagram for an illustration:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.2 – The Stovepipe anti-pattern](img/B30991_01_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – The Stovepipe anti-pattern
  prefs: []
  type: TYPE_NORMAL
- en: '**Blob** : A design where a single class effectively encapsulates all the business
    logic and functionality, leading to major maintenance headaches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Intensive coupling** : A design that uses an excessively large number of
    methods from another class or module in implementing a feature, leading to a deep
    dependency that’s hard to understand or change.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll dig into all these anti-patterns from a Salesforce perspective in later
    chapters, underscoring the unfortunate fact that Salesforce, while a great platform,
    is still a software system that’s prone to the kind of mistakes that have plagued
    software systems for decades. If this weren’t the case, then there’d be no need
    for this book – or Salesforce architects, for that matter.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to having a foundational understanding of anti-patterns, it’s crucial
    to recognize how these patterns align with the latest trends in the Salesforce
    ecosystem. With the growing interest in AI and DevOps, new anti-patterns have
    emerged that specifically address challenges in these areas. For instance, the
    “ *Let’s add AI to it* ” pattern warns against the temptation to incorporate AI
    into solutions without a clear, justified need, leading to unnecessary complexity
    and maintenance challenges.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps practices have also introduced new anti-patterns, such as “ *Infrequent
    check-in* ,” which underscores the risks of not integrating code changes frequently
    enough, leading to integration hell and deployment issues. By understanding these
    new trends and their associated anti-patterns, architects can better navigate
    the complexities of modern Salesforce implementations.
  prefs: []
  type: TYPE_NORMAL
- en: Having discussed the historical origins of anti-patterns, let’s discuss how
    they arise in the real world.
  prefs: []
  type: TYPE_NORMAL
- en: Where do anti-patterns come from?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Anti-patterns tend to arise again and again because the circumstances that drive
    technology projects into trouble are at least somewhat predictable. Equally predictable
    are the responses of people put into those situations. Since people in tough spots
    frequently make the same bad decisions, we get systematic patterns to study.
  prefs: []
  type: TYPE_NORMAL
- en: Generally speaking, the most important thing to remember about anti-patterns
    is that they seem like a good idea at the time. They aren’t simply bad practices
    that someone should know better than to apply. You can make a reasoned argument
    that they should lead to good or at least acceptable outcomes when applied.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, the decision to apply an anti-pattern is down to inexperience, while
    other times, it’s down to desperation. But as often as not, it’s down to experienced
    professionals convincing themselves that in this case, doing what they’re doing
    is the right call or that this situation is different.
  prefs: []
  type: TYPE_NORMAL
- en: Anti-patterns often arise from predictable circumstances in technology projects,
    but recent technological trends have introduced new contexts in which these patterns
    manifest. For instance, the rapid adoption of **artificial intelligence** ( **AI**
    ) and machine learning in Salesforce projects has led to the emergence of new
    anti-patterns, such as “ *AI architecture is like normal architecture* .” These
    patterns often arise from a lack of understanding of the unique requirements and
    challenges associated with integrating AI into Salesforce solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, the shift toward DevOps practices has highlighted new anti-patterns
    related to continuous integration and deployment. The “ *Infrequent check-in*
    ” pattern, for example, arises when teams fail to integrate code changes frequently,
    leading to significant integration challenges and deployment delays.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll try to reflect this diversity of origins in the examples we’ll provide
    throughout this book. However, to do this, we need to explain how we’ll present
    the examples in a consistent way to enable learning.
  prefs: []
  type: TYPE_NORMAL
- en: An anti-pattern template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the key characteristics of both patterns and anti-patterns is that they’re
    written using a recognizable template. Many templates have been suggested over
    the years, with some more elaborate than others.
  prefs: []
  type: TYPE_NORMAL
- en: 'The template we’ll use in this book contains the bare bones that recur in nearly
    all existing anti-pattern templates. However, we won’t include a great number
    of optional elements. Most additional elements that are included in other templates
    serve to ease categorization or cross-referenceability. Those are highly desirable
    elements to have when creating a searchable catalog of patterns or anti-patterns
    but are less useful in a printed book. Therefore, we’ll omit them and include
    the following elements instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name** : An easy-to-remember moniker for the pattern that serves to identify
    it uniquely and help with discourse among architects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type** : In this book, we’ll categorize our anti-patterns by the domain from
    the **Certified Technical Architect** ( **CTA** ) review board examination that
    they’re relevant to. This is both to help people on the CTA journey, but also
    because this is a familiar typology for Salesforce architects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example** : We’ll introduce each anti-pattern by giving an example of how
    it might occur. The examples will be fictional but grounded in real-world events.
    This will frame the anti-pattern and give you an immediate understanding of the
    issues involved before we delve deep into the nuts and bolts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Problem** : This section describes the problem(s) that the anti-pattern purports
    to solve more formally. These are the real issues that the anti-pattern is meant
    to be a solution for, although using it in practice will turn out to be a bad
    idea.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Proposed solution** : How the anti-pattern claims to solve the problem described
    in the previous section and how that can be tempting to believe given certain
    circumstances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Results** : In the results section, we’ll outline what results you can expect
    from applying the anti-pattern, along with its main variations. We’ll explain
    why this is a bad solution, although it might look good at the outset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Better solutions** : The final section in the template will tell you what
    to do instead when you’re faced with the problem that’s the basis for the anti-pattern.
    Not all problems have easy solutions, but you can generally do better than applying
    an anti-pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we understand what anti-patterns are and how they’re going to be structured
    in this book, we’ll move on and explain how you, as an architect, can improve
    your skills by using them to learn.
  prefs: []
  type: TYPE_NORMAL
- en: How can anti-patterns deepen your architectural skills?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While a theoretical understanding of what patterns and anti-patterns are and
    how they may generally be helpful is great, you’re no doubt looking for more from
    this book than just a theoretical discussion.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ll go through the value of learning from mistakes, both
    your own and other people’s, and show you how we’re going to use anti-patterns
    to sharpen your architectural chops in the context of a concrete example.
  prefs: []
  type: TYPE_NORMAL
- en: How great architects learn from mistakes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We work in an industry where failure is a normal occurrence. The Standish Group
    CHAOS report, which is the most commonly cited source on these matters, in 2020
    estimated that 66% of all technology projects globally ended in partial or complete
    failure.
  prefs: []
  type: TYPE_NORMAL
- en: This is a little bit better than when I started my career more than 20 years
    ago. Then, the figure stood in the low 70s. However, while things have improved,
    they’ve only improved a little bit, despite agile development, cloud computing,
    AI, and great software platforms such as Salesforce.
  prefs: []
  type: TYPE_NORMAL
- en: This is disheartening, but it only proves the point of one of my heroes, Fred
    Brooks, that “ *The complexity of software is an essential property, not an accidental
    one,* ” which unfortunately means that we’ll never find a silver bullet to solve
    all problems in software architecture and design. Instead, we’re faced with the
    hard work of learning how to manage this complexity reasonably. To do so is the
    principal job of an architect.
  prefs: []
  type: TYPE_NORMAL
- en: It stands to reason that in an area with high failure rates and irreducible
    complexity, we need to have good rules and guidelines to keep us on the right
    path. That is what patterns and best practices are for. They’re indispensable,
    but they’re not enough.
  prefs: []
  type: TYPE_NORMAL
- en: To become great at our profession and to be able to design software that bucks
    the industry trend, we need to not just learn from our failures but also from
    the vast repository of failed projects and bad practices we see all around us.
  prefs: []
  type: TYPE_NORMAL
- en: That usually isn’t hard to do. Often, when the architect is brought into a project,
    it’s because there’s already an issue to fix. Using these occurrences as learning
    opportunities and analyzing them with that view in mind can be greatly rewarding.
  prefs: []
  type: TYPE_NORMAL
- en: However, there’s a step further to go in this direction, which is what anti-patterns
    offer. They encompass how things frequently go wrong in a way that allows both
    post-hoc learning but also real-time intervention.
  prefs: []
  type: TYPE_NORMAL
- en: While projects can go wrong, they don’t do so randomly. There are systematic
    patterns that repeat time and again. Learning how things go wrong in systematic
    ways can give you an entirely new set of responses in your toolbox that you can
    deploy to help make your project one of the 34% that don’t fail.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding anti-patterns not only helps you avoid common pitfalls but also
    enhances your ability to navigate the complexities of modern Salesforce architectures,
    including AI and DevOps practices. These insights are particularly valuable for
    those preparing for the CTA review board examination as they demonstrate a deep
    understanding of the challenges and best practices in modern Salesforce architecture.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll start that learning journey with an explanatory example.
  prefs: []
  type: TYPE_NORMAL
- en: An example – the Hero anti-pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There’s no better way to start learning than using an example. We won’t have
    the chance to cover many general management-level anti-patterns in this book,
    so I’ll use one of the classics in this genre to show you how the template works
    and how to read it to get the most out of it.
  prefs: []
  type: TYPE_NORMAL
- en: First, we’ll present the anti-pattern and then provide an analysis of what we
    can learn from it.
  prefs: []
  type: TYPE_NORMAL
- en: Hero (development life cycle and deployment planning)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tom is the project manager for a large greenfield Salesforce implementation
    in the manufacturing industry working with Sales and Service Cloud for 2,000 users.
    The project is meant to be quite simple – a basic MVP to get the platform off
    the ground – and that’s how it’s been scoped and staffed. The project is meant
    to go into full production after 6 months, with 4 months of implementation followed
    by testing, training, rollout, and hypercare.
  prefs: []
  type: TYPE_NORMAL
- en: The first 3 months of implementation fly by and everything on the project management
    dashboard stays green. The team makes steady progress and relations with the external
    consultancy that’s helping provide specialist resources remain good.
  prefs: []
  type: TYPE_NORMAL
- en: However, when Tom delivers the first round of business reviews, things start
    to change quickly. It turns out that a lot of detailed requirements have been
    missed from the initial scope and that many edge cases aren’t covered by the current
    configuration. The feedback from the business is that they won’t be able to go
    live with the system unless a large list of additional functionality is included.
  prefs: []
  type: TYPE_NORMAL
- en: Tom goes to the steering committee to ask for a bigger budget and a scheduled
    increase to accommodate the business demands. The steering committee grants the
    request for an increased budget but tells him that the schedule is immovable.
    He must find a way to get it done within the current timeline.
  prefs: []
  type: TYPE_NORMAL
- en: Tom replans the project from the ground up. He can make it all fit by compressing
    the testing and cutover plan if he adds some new resources from the external partner
    and asks for some overtime from his existing team. He sends out the new plan to
    the team, along with a rousing email calling on everyone to rise to the challenge.
  prefs: []
  type: TYPE_NORMAL
- en: Over the next month, the project slips again, and Tom’s new plan is looking
    less and less likely to succeed. It’s not that anything big goes wrong, but lots
    of little things just aren’t completed on time or need to be reworked because
    of misunderstandings. In particular, the new consultants he’s brought in from
    the external partner seem to make a lot of basic mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: Tom calls his boss, the senior director for IT, to tell him about the situation
    and ask for help in getting an extension to the schedule. She tells him that the
    schedule has been committed to the board of directors of the company and that
    heads will roll if it isn’t met. She says that this is the time for the team to
    pull out all the stops and get it done.
  prefs: []
  type: TYPE_NORMAL
- en: Tom goes back to his team to relay the news and once again calls for everyone
    to give it everything they’ve got to get things over the line. Unfortunately,
    most people are already working as hard as their situations allow. In addition,
    relations with the external partner have soured and they’re not willing to put
    in additional hours without additional funding, which Tom doesn’t have in the
    budget.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some bright spots, however. In particular, two young members of the
    technical staff, Kayleigh and Negash, prove willing to go above and beyond to
    get things done. Over the final month of delivery, they work 24/7 on the project,
    with Tom cheering them on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – The dangerous feeling you might have when engaging in the Hero
    anti-pattern](img/B30991_01_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – The dangerous feeling you might have when engaging in the Hero
    anti-pattern
  prefs: []
  type: TYPE_NORMAL
- en: Between the two of them, they manage to clear away enough of the new features
    and change requests during the final stretch that Tom becomes confident that he’ll
    be able to meet enough of the requests for the project launch to not be a disaster.
    There will be exceptions, but he can find a way of managing those later. So long
    as the impending go-live goes well, the project can still succeed.
  prefs: []
  type: TYPE_NORMAL
- en: However, **user acceptance testing** ( **UAT** ) throws a spanner in the works
    as major quality issues are discovered. The steering committee holds a crisis
    meeting that ends up concluding that the go-live will have to be postponed for
    a week. The team will have to work flat out during this period to fix the issues.
  prefs: []
  type: TYPE_NORMAL
- en: While everyone pitches in, the responsibility falls disproportionately on Kayleigh
    and Negash, who are both starting to show the strain of their continuous effort.
    Tom encourages them at every chance and singles them out for public praise. He
    also promises them a cash bonus and extra holidays when the project is done.
  prefs: []
  type: TYPE_NORMAL
- en: The day for retesting arrives and while many issues have been fixed satisfactorily,
    there are quite a few remaining issues, including a good number that had previously
    been fixed and are now recurring.
  prefs: []
  type: TYPE_NORMAL
- en: The steering committee holds another crisis meeting and they decide to go ahead
    with the launch, despite the issues. These issues will need to be fixed during
    the hypercare period, but they can be tolerated for a short amount of time.
  prefs: []
  type: TYPE_NORMAL
- en: The next few weeks of Tom’s, Kayleigh’s, and Negash’s lives happen in a blur
    of constant motion. They’re pulled from escalation to escalation as issues occur,
    are fixed, and reoccur. Kayleigh and Negash start buckling under the pressure,
    but with no alternative resources knowing the configuration, they’re effectively
    forced to carry on.
  prefs: []
  type: TYPE_NORMAL
- en: Eventually, the issues settle down. The important bugs are fixed, the business
    puts manual workarounds in place for the things that were missed, and life starts
    to go back to normal. Tom calls the team for a victory celebration, but it’s a
    muted affair.
  prefs: []
  type: TYPE_NORMAL
- en: After taking their extra holidays, Kayleigh and Negash both accept offers from
    big consulting companies, leaving the company with no one to support large chunks
    of functionalities on their newly implemented platform.
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Hero anti-pattern generally purports to fix an urgent delivery problem that
    has occurred either in a project context, as in our example, or during normal
    operations. When it occurs in normal operational mode, this is often in a context
    where firefighting issues with the system have become a run-of-the-mill occurrence.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, the problem occurs in a context characterized by some of the following
    factors:'
  prefs: []
  type: TYPE_NORMAL
- en: There are limited resources to carry out the work needed to fix the urgent problem
    and there are good reasons why new resources can’t be brought in at this time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The project has a tight schedule that’s perceived to be set in stone or the
    issue is live, critical, and affecting important business users adversely in ways
    that cause a lot of noise.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s knowledge about the problem concentrated in a small number of heads
    – that is, a few people, such as Kayleigh and Negash, who volunteered to take
    on the role, or frequently a lead developer who’s the only one with the technical
    knowledge to fix the issue at the given time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The situation is considered somehow special: either this is a new project and
    there isn’t a precedent, or the issue is considered so unique that you can’t plan
    for it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The crisis element is often quite visible in situations that foster the Hero
    anti-pattern. Sometimes, important parts of the company’s future success or even
    survival are brought into play.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These factors can all make the problem seem more important to fix in a limited
    time scale and make the Hero anti-pattern seem attractive.
  prefs: []
  type: TYPE_NORMAL
- en: Proposed solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Hero anti-pattern proposes to solve the problem described in the preceding
    section by allowing an individual or a small group to take too much responsibility
    for resolving it effectively by working as much as is required, even at some cost
    to themselves, to get things done.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be attractive both to management and to the people involved for a
    variety of reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: The effort does tend to produce some results in the short term, giving a sense
    of momentum and success.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Everyone, or at least nearly everyone, wants to be a hero and be singled out
    for praise and rewards. To some people, that’s worth the inconvenience of the
    additional effort.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s always possible to imagine that the current situation is somehow unique
    and not reflective of a deeper problem with process or culture within the organization,
    thereby justifying what’s done as exceptional.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if we acknowledge that there are underlying issues, often, these can be
    put out of mind as something to be dealt with later. Of course, in organizations
    that rely on the Hero anti-pattern, later never comes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are several common variants of the Hero anti-pattern that are worth mentioning:'
  prefs: []
  type: TYPE_NORMAL
- en: Superman, a variant where someone, usually a senior technical person, is glorified
    and held up as the only person who can fix serious issues with a given system.
    Often, this myth becomes self-perpetuating.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rookies, the variant shown in the preceding example, where junior team members
    take on extra responsibilities to step up to the challenge that’s being presented
    to them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No Time for Knowledge Transfer, a situation where heroics are required by a
    seemingly never-ending time crunch that would make it possible for the hero or
    heroes to transfer required knowledge to others.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While this anti-pattern is seductive, and many of us have fallen prey to it
    several times throughout our careers, it almost invariably has negative long-term
    consequences, something we’ll explore next.
  prefs: []
  type: TYPE_NORMAL
- en: Results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While the Hero anti-pattern tends to give good short-term results, which is
    a major source of its enduring appeal, there’s a long list of negative results
    that tend to accumulate over time in organizations that rely on this anti-pattern
    to get things done.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the most common negative results are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The creation of a single point of failure that increases risks to an organization
    substantially, should the hero fall under the proverbial bus, and gives the hero
    a lot of leverage in negotiations with the organization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Over time, the hero will start to feel pressure, just like Kayleigh and Negash
    did in our example, but they’ll have very limited options to change the situation.
    This situation is highly conducive to burnout, which brings with it all the problems
    of the first point, as well as the risk of the hero making serious errors due
    to the strain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heroes don’t scale. This means that the organization won’t be able to deploy
    projects at a bandwidth that’s wider than what the hero can accommodate. This
    can be seriously limiting to new initiatives in some cases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heroes aren’t replicable. You can’t replicate the hero or their special powers
    easily, so you have limited options for creating a predictable and repeatable
    process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heroes can accumulate serious technical debt. This may often go unmanaged because
    they must do things quickly, under pressure, and without real supervision. This
    can lead to major maintenance issues in the long term.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s low transparency into the process by which heroes get things done, leading
    to a lack of predictability and manageability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heroes don’t have time to explain how things were implemented, so there’s often
    poor or entirely missing documentation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of the team may feel disempowered, overlooked, and demotivated as all
    the attention goes to the heroes, with little opportunity for others to make contributions
    in a non-heroic way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You don’t necessarily see all these negative outcomes in all instances of this
    anti-pattern, and unfortunately, this list isn’t exhaustive either. But hopefully,
    this is enough to make you think twice about applying this anti-pattern and look
    at better options, something we’ll explore next.
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The fundamental problem with the Hero anti-pattern is that you’re relying on
    specific individuals with often hidden knowledge working hard – usually too hard
    – to get things done rather than on repeatable, transparent, and manageable processes
    that will allow you to continue to deliver, even as the context and the people
    involved change.
  prefs: []
  type: TYPE_NORMAL
- en: So, the primary way to get away from the Hero anti-pattern is to work on your
    processes and spread skills and knowledge systematically across the team. In our
    example, there were potential issues with scope management, the initial discovery
    work, governance and its understanding of the real issues on the ground, and the
    way the project had been structured to go live with a big bang rather than in
    small increments.
  prefs: []
  type: TYPE_NORMAL
- en: 'How specific interventions will provide the most leverage will vary a lot between
    organizations, but some good aspects to look at are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Moving toward a DevOps culture with smaller incremental releases that have lower
    risk profiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having multi-functional teams with frequent direct collaboration and peer review
    to spread knowledge around
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encouraging and rewarding leads and specialists more for mentoring and bringing
    up juniors rather than for putting out the latest fire
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorporating better risk management and governance in projects so that you
    can have the right contingencies in place when things go wrong, as they inevitably
    will
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Challenging the cultural norms that put primacy on delivering big dramatic wins
    against the odds, rather than on making steady, undramatic, but repeatable progress
    regularly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emphasize roles and processes, not individuals when planning, building, and
    operating systems, especially when communicating with the wider stakeholder community
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make the costs of the Hero anti-pattern visible by capturing the technical debt,
    the risk, and the missed opportunity to be able to replicate efforts that the
    organization loses by relying on this pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that detailed requirements and edge cases are planned for when beginning
    the project to reduce the probability that you’ll need a hero
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In truth, it isn’t always possible to completely avoid the Hero anti-pattern.
    Sometimes, things are on fire and there’s only one person around who can fix it.
    What we need to recognize is that this isn’t a good situation but an anti-pattern
    that we need to work hard to fix so that it doesn’t recur. The more you do this,
    the less you’ll have to rely on heroes and the fewer fires you’ll have to put
    out.
  prefs: []
  type: TYPE_NORMAL
- en: Having covered our first example of a real anti-pattern, let’s analyze it a
    little more deeply to see how we can maximize our learning from it.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing the example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Hero anti-pattern is a classic and most seasoned IT professionals will have
    encountered it during their careers. However, interesting as it is, in this book,
    we’ll also be looking to pull out the larger patterns so that we can learn from
    our examples to hone our architectural skills.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, we’ll do this by having a section toward the end of each
    chapter that extracts key learning points for you to take on your future architecture
    journey. We’ll do this while implementing a mind-to-real-life practice, but we’ll
    also list learning points specifically for those who are on track toward the CTA
    exam.
  prefs: []
  type: TYPE_NORMAL
- en: 'Considering the Hero anti-pattern, the following are a few learning points
    you might extract for real-life practice:'
  prefs: []
  type: TYPE_NORMAL
- en: When you’re faced with a crisis that calls for extraordinary effort on the part
    of some or all of the team, take the time to step back and consider the process
    failures that led to this situation. Capture this for future use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relying on a small number of extremely skilled individuals can be dangerous
    in the long run, even if it’s useful right now.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pressure you might feel toward going above and beyond may reflect a culture
    that doesn’t have its priorities right from a technical point of view. You may
    want to challenge that if possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go out of your way to empower and bring up junior staff to avoid being in a
    position where you have to be the hero.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be diligent about advocating for good governance both at the project and technical
    levels, as well as capturing and remedying the technical debt that accumulates
    from “ special” situations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Looking at the CTA review board, you can note the following lessons:'
  prefs: []
  type: TYPE_NORMAL
- en: Be careful about suggesting big-bang delivery approaches. They can be the right
    choice, but frequently, they can lead to the issues highlighted in this example.
    Prefer using agile, incremental approaches unless there’s a specific reason not
    to.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that you include the necessary governance functions, including a **project
    management office** ( **PMO** ), steering committee, design authority, and maybe
    a change advisory board. In this example, much could have been avoided if the
    latter two had been in place.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be explicit about risks and risk management. Include risks upfront and be ready
    to talk about how to manage and mitigate them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While we’ll be able to pull out many learning points directly, we encourage
    you to go further with this method and see how much more you can get out of them.
    Learning from anti-patterns is a continuous and very rewarding activity for aspiring
    architects.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the traditional lessons learned from the Hero anti-pattern, it’s
    important to consider how this pattern intersects with modern trends such as AI
    and DevOps. For instance, in a DevOps environment, the reliance on a single “hero”
    to manage deployments can lead to significant bottlenecks and integration issues,
    highlighting the importance of practices such as continuous integration and frequent
    check-ins.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, in AI projects, the Hero anti-pattern can manifest when a single
    data scientist or AI specialist is relied upon to deliver complex AI solutions
    without adequate support or knowledge transfer. This can lead to burnout and a
    lack of scalability, underscoring the need for collaborative, multi-functional
    teams.
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have a foundational understanding of what anti-patterns are and
    how they can help us achieve greater mastery of Salesforce architecture. All that’s
    left to do is summarize our progress before we dive into the deep end by looking
    at anti-patterns in the system architecture domain.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Phew – that was a lot of background! Thank you for sticking with it. You’re
    now in a position to move forward with this book since you understand the key
    facts about what anti-patterns are and how you can learn from them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few things to remember as you go into the next chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: It’s important not to simply think about anti-patterns as bad practices. Bad
    practice is obvious, but anti-patterns are nefarious. They masquerade as good
    solutions and can be persuasive in certain situations, even to experienced professionals.
    That’s also what makes them so fun to study.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While we’ll be presenting a lot of individual anti-patterns in this book, it’s
    important to draw out the parallels and meta-patterns that can be gleaned by comparing
    and contrasting them. We’ll do some of that work for you in the analysis sections
    that can be found throughout this book. You should also try to do this activity
    for yourself.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While we’ll be focusing on a Salesforce context, many of the patterns you’ll
    learn about apply to other platforms as well. Some are even classics that will
    be known by a great number of grizzled architects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we move forward with this book, remember that anti-patterns aren’t just bad
    practices but deceptive solutions that can seem appealing in certain situations.
    In this second edition, we’ve expanded our exploration to include new anti-patterns
    related to AI and DevOps that reflect the latest trends and challenges in the
    Salesforce ecosystem. By understanding these patterns and their implications,
    you can enhance your architectural skills and better navigate the complexities
    of modern Salesforce projects, whether in real life or in preparation for the
    CTA review board examination.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that out of the way, we’re now ready to look at our first architectural
    domain in detail: systems architecture.'
  prefs: []
  type: TYPE_NORMAL
