- en: '[*Chapter 6*](B17124_06_Final_SK_ePub.xhtml#_idTextAnchor122): AWS Networking
    Services – VPCs, Route53, and CloudFront'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第 6 章*](B17124_06_Final_SK_ePub.xhtml#_idTextAnchor122)：AWS 网络服务 – VPC、Route53
    和 CloudFront'
- en: Networking is a fundamental component of any IT infrastructure, whether on-premises
    on in the cloud. Without networking, it would not have been possible to architect
    the complex world of communications that we live in today. In the absence of networking,
    there would be no internet in the modern world.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 网络是任何 IT 基础设施的核心组成部分，无论是在本地还是在云中。没有网络，我们今天所生活的复杂通信世界是不可能构建的。在没有网络的情况下，现代世界将没有互联网。
- en: Almost every business today needs to have some form of network connectivity
    if it is to collaborate with partners and end customers. In this chapter, we look
    at some of the core building blocks of designing a network. We will also look
    at network services offered on AWS and, specifically, how **Virtual Private Cloud**
    (**VPC**) enables customers to build multiple isolated and secure networks within
    their AWS accounts, allowing them to isolate workloads and applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，几乎每个企业都需要某种形式的网络连接，以便与合作伙伴和最终客户进行协作。在本章中，我们将了解设计网络的一些核心构建模块。我们还将探讨 AWS 提供的网络服务，特别是
    **虚拟私有云** (**VPC**) 如何帮助客户在其 AWS 账户内构建多个独立且安全的网络，从而使他们能够隔离工作负载和应用程序。
- en: We examine AWS Route53, which is Amazon's **Domain Name System** (**DNS**) that
    enables the routing of network traffic across the AWS ecosystem and the wider
    internet. Finally, we look at Amazon CloudFront, which is a **Content Delivery
    Network** (**CDN**), designed to help customers distribute their content to their
    customers much more effectively and with low latency.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨 AWS Route53，这是 Amazon 的 **域名系统** (**DNS**)，它使得跨 AWS 生态系统和更广泛互联网的网络流量路由成为可能。最后，我们将看看
    Amazon CloudFront，它是一个 **内容分发网络** (**CDN**)，旨在帮助客户更有效且低延迟地将内容分发给他们的客户。
- en: 'The following are the key topics we discuss in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的主要内容如下：
- en: Introduction to on-premises networks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地网络介绍
- en: Fundamentals of IP addressing, port numbers, subnet masks, and CIDRs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP 地址、端口号、子网掩码和 CIDR 的基础知识
- en: Introduction to Amazon **VPC**
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon **VPC** 介绍
- en: Basics of DNS and global routing with Amazon Route53
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon Route53 的 DNS 基础知识和全球路由
- en: Implementation of a robust CDN with Amazon CloudFront
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon CloudFront 实现强大的 CDN
- en: Introduction to API Gateway
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API Gateway 介绍
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this chapter, you will need access to your AWS account. You will
    be creating a simple VPC in your AWS account for which you will need to be logged
    into your AWS account using the IAM user account `Alice` that we created in [*Chapter
    4*](B17124_04_Final_SK_ePub.xhtml#_idTextAnchor068), *Identity and Access Management*.
    Remember, to log in using an IAM user account, you will need to provide your AWS
    account ID or account alias.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章内容，您需要访问您的 AWS 账户。您将需要在 AWS 账户中创建一个简单的 VPC，并且需要使用我们在[*第 4 章*](B17124_04_Final_SK_ePub.xhtml#_idTextAnchor068)中创建的
    IAM 用户账户 `Alice` 登录 AWS 账户，*身份与访问管理*。请记住，要使用 IAM 用户账户登录，您需要提供您的 AWS 账户 ID 或账户别名。
- en: Introduction to on-premises networks
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地网络介绍
- en: 'Almost every business will have some form of an on-premises network. Even if
    you are a self-employed "one-man band," you are likely to have a home office that
    also boasts a private network environment. Your home office may look something
    like the following diagram:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个企业都会有某种形式的本地网络。即使您是一个自雇的“独立工作者”，您也很可能有一个家庭办公室，且办公室也拥有一个私有网络环境。您的家庭办公室可能类似于以下图示：
- en: '![Figure 6.1 – Home network components'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.1 – 家庭网络组件'
- en: '](img/B17124_06_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_01.jpg)'
- en: Figure 6.1 – Home network components
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 家庭网络组件
- en: In the preceding diagram, the devices on the home network communicate with each
    other over the Wi-Fi connection. If you send a print request from the computer
    desktop to the printer, then your document will get printed. This communication
    is made possible via the connectivity established over the Wi-Fi network. For
    devices to communicate with each other, they each require a unique IP address.
    If the IP addressing element is correctly defined, each device on the network
    will be able to see the other. The Wi-Fi service also connects the devices to
    the internet via a router/modem device that has established a connection with
    an internet service provider. This connection is usually via some form of physical
    cabling or cellular network connectivity through your telecom provider.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示意图中，家庭网络中的设备通过Wi-Fi连接相互通信。如果你从计算机桌面向打印机发送打印请求，那么你的文档将会被打印出来。这种通信得以实现，是通过在Wi-Fi网络上建立的连接。为了使设备能够相互通信，它们每个都需要一个唯一的IP地址。如果IP地址元素正确定义，网络中的每个设备将能够看到其他设备。Wi-Fi服务还通过与互联网服务提供商建立连接的路由器/调制解调器设备，将设备连接到互联网。此连接通常通过某种形式的物理电缆或通过电信提供商的移动网络连接来实现。
- en: Basic corporate networks
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本企业网络
- en: Companies will also have their own corporate networks, and you have probably
    worked in an office setting that has an IT network infrastructure in place. Corporate
    networks require more careful planning since many of them will also allow access
    to applications from outside the network. For example, your business may be publishing
    a website from within the corporate network to showcase its products and services
    to potential customers on the internet. The use of firewall routers that allow
    only specific types of traffic to enter the network from the internet and be directed
    to the appropriate server is all part of the secure planning for connectivity
    with the outside world.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 公司通常会拥有自己的企业网络，你可能曾在一个配备有IT网络基础设施的办公环境中工作过。企业网络需要更为谨慎的规划，因为许多网络也允许外部访问应用程序。例如，您的企业可能会在企业网络内部发布一个网站，以便通过互联网向潜在客户展示其产品和服务。使用防火墙路由器，只允许特定类型的流量从互联网进入网络并被引导到适当的服务器，是与外界连接的安全规划的一部分。
- en: 'A corporate network would usually be divided into multiple smaller networks—each
    being used for a specific purpose. At its very basic level, a corporate network
    would consist of two subnetworks: one for internal backend purposes and another
    to place services that are accessible from the internet.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 企业网络通常会被划分为多个较小的网络，每个网络都有特定的用途。在其最基本的层面上，企业网络通常包括两个子网络：一个用于内部后台目的，另一个用于放置可以通过互联网访问的服务。
- en: 'In the following diagram, a corporate network has been divided into two separate
    networks: one called the internal network, and another called the **demilitarized
    zone** (**DMZ**). The DMZ is an area where services are deployed that can be exposed
    on the internet, for example, a web server. Traffic to services deployed in this
    zone is restricted with strict inbound rules to ensure high levels of security.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，企业网络被划分为两个独立的网络：一个叫做内部网络，另一个叫做**非军事区**（**DMZ**）。DMZ是一个可以在互联网上暴露服务的区域，例如，Web服务器。访问部署在该区域的服务的流量受到严格的入站规则限制，以确保高安全性。
- en: '![Figure 6.2 – Basic office network'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.2 – 基本办公网络'
- en: '](img/B17124_06_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_02.jpg)'
- en: Figure 6.2 – Basic office network
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 基本办公网络
- en: As shown in the preceding diagram, the corporate network is divided into three
    separate subnetworks. This ensures that we can configure rules that define the
    type of traffic that can enter each subnetwork and from which source. For example,
    we could configure inbound rules from the internet to grant access to our web
    servers over HTTP/HTTPS traffic. This will allow members of the public to access
    our corporate website and review our service offerings. On the other hand, we
    would not expect to allow direct inbound traffic from the internet into the **End
    User Computing** (**EUC**) **Virtual LAN** (**VLAN**), as there is no requirement
    for such inbound connection, and it ensures our corporate network is secure. Traffic
    from the workstations to the internet would, however, be permitted to allow members
    of staff to access online services and tools.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的图示所示，企业网络被划分为三个独立的子网。这确保我们能够配置规则，定义哪些类型的流量可以进入每个子网，以及来自哪些来源。例如，我们可以配置从互联网到我们的
    Web 服务器的入站规则，允许 HTTP/HTTPS 流量。这将使公众能够访问我们的企业网站并查看我们的服务。另一方面，我们不会允许互联网直接进入**终端用户计算**（**EUC**）**虚拟局域网**（**VLAN**），因为没有此类入站连接的需求，并且这有助于保证我们的企业网络安全。然而，我们会允许工作站到互联网的流量，以便员工可以访问在线服务和工具。
- en: Similarly, when building solutions on AWS, we need to configure virtual networks
    in the cloud that would allow us to host our applications in a manner that offers
    security, isolation, and inbound access only where it is needed. However, before
    examining the details of how we build cloud networks, it is important to understand
    how devices on a network communicate with each other and how we create networks
    and subnetworks.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在 AWS 上构建解决方案时，我们需要配置云中的虚拟网络，以便以一种提供安全性、隔离性，并且仅在需要时才允许入站访问的方式托管我们的应用程序。然而，在深入研究如何构建云网络的细节之前，了解网络中设备如何互相通信，以及如何创建网络和子网是非常重要的。
- en: In the next section, we review some fundamentals of IP addressing, which will
    enable us to understand how we build such networks.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将回顾一些 IP 地址的基础知识，这将帮助我们理解如何构建这样的网络。
- en: Fundamentals of IP addressing and CIDRs
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IP 地址和 CIDR 基础知识
- en: For devices on your network to communicate with each other, an **Internet Protocol
    address** (**IP address**) is required. Each network device, whether it is a computer,
    laptop, mobile phone, printer, or network router, will need to be assigned an
    IP address that is routable in each network.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让网络中的设备互相通信，必须有一个**互联网协议地址**（**IP 地址**）。每个网络设备，无论是计算机、笔记本、手机、打印机还是网络路由器，都需要分配一个在每个网络中可路由的
    IP 地址。
- en: Furthermore, each device's IP address must be unique – you cannot have more
    than one device with the same IP address. This is just how telephones work. Each
    telephone has a unique number assigned to it. To call someone on the phone, you
    need to first know their telephone number and then, dial that number, which results
    in your call getting connected. In *Figure 6.1*, you would have noticed that each
    of the internal devices in the home network had an IP address.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，每个设备的 IP 地址必须是唯一的——不能有多个设备使用相同的 IP 地址。这就像电话一样。每部电话都有一个唯一的号码。要拨打某个电话，首先需要知道对方的电话号码，然后拨打这个号码，最终完成通话。在*图
    6.1*中，你会注意到家用网络中的每个内部设备都有一个 IP 地址。
- en: 'There are two types of IP address: IPv4 and IPv6\. We will discuss the key
    differences between them.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的 IP 地址：IPv4 和 IPv6。我们将讨论它们之间的主要区别。
- en: IP address version 4 – IPv4
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IP 地址版本 4 – IPv4
- en: IPv4 was the first version of the IP addressing system that was widely deployed
    and that ultimately formed the backbone of the internet.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: IPv4 是第一种广泛部署的 IP 地址系统版本，最终构成了互联网的基础设施。
- en: The standard IPv4 address format that you are familiar with and as depicted
    in the previous diagrams follows the structure of four decimal numbers separated
    by dots. An example of this is `192.168.1.6`. Each decimal notation in an IP address
    is called an `0` and `255`, base `10` (decimal). As you are probably aware, computers
    use binary numbers rather than decimal numbers. Each decimal number, when converted
    into binary, comprises 8 bits, ones and zeros. In both cases, whether decimal
    or binary, an IPv4 address is 32 bits in length.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你熟悉的标准IPv4地址格式，如前面的图所示，遵循四个十进制数字以点分隔的结构。例如，`192.168.1.6`就是一个例子。IP地址中的每个十进制表示称为`0`到`255`，基数为`10`（十进制）。正如你可能知道的，计算机使用的是二进制数字，而非十进制数字。每个十进制数字转换为二进制后，包含8个位，一和零。在无论是十进制还是二进制的情况下，IPv4地址的长度为32位。
- en: 'Let''s take an example of an IP address of `192.168.1.6`. In binary, each octet
    would be between 8 zeros and 8 ones (`00000000` to `11111111`). The individual
    decimal numbers in the IP address can be converted to its equivalent binary representation,
    which would comprise a combination of ones and zeros in each 8-bit octet. In the
    following diagram, the IP address `192.168.1.6` in decimal is the same as `11000000.10101000.00000001.00000110`
    in binary:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以`192.168.1.6`的IP地址为例。在二进制中，每个八位字节（octet）将由8个零和8个一组成（`00000000`到`11111111`）。IP地址中的各个十进制数字可以转换为其等效的二进制表示，这些表示将由每个8位字节中的一和零的组合构成。在下图中，IP地址`192.168.1.6`的十进制表示与其二进制表示`11000000.10101000.00000001.00000110`是相同的：
- en: '![Figure 6.3 – IP address to binary conversion'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.3 – IP地址到二进制的转换'
- en: '](img/B17124_06_03.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_03.jpg)'
- en: Figure 6.3 – IP address to binary conversion
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – IP地址到二进制的转换
- en: While understanding how this conversion takes place is not a requirement to
    pass the Cloud Practitioner exam, I wanted to give you a quick overview here to
    further help you build your networking knowledge.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然理解这种转换过程并不是通过云计算基础认证考试的必要要求，但我想在这里简要概述一下，以进一步帮助你构建网络知识。
- en: Conversion of decimal notation into binary requires remembering the place value
    of the individual bits in each 8-bit octet. You can also calculate the place values
    if you do not want to simply remember them by heart.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 将十进制表示转换为二进制时，需要记住每个8位字节中各个位的位值。如果你不想单纯记住它们，也可以通过计算位值来得到它们。
- en: Let's take the example of the last octet in the IP address `192.168.1.6`, which
    in this case is the decimal number 6.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以IP地址`192.168.1.6`中的最后一个八位字节为例，在这种情况下，它是十进制数字6。
- en: 'In binary, you have 8 bits of zeros and ones to represent this decimal number.
    In the following table, we can see each of those bits and their place values:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在二进制中，你有8个零和一位来表示这个十进制数字。在下表中，我们可以看到这些位及其位值：
- en: '![Figure 6.4 – IP address place values'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.4 – IP地址位值'
- en: '](img/B17124_06_04.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_04.jpg)'
- en: Figure 6.4 – IP address place values
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – IP地址位值
- en: 'For each octet, starting from right to left, the following applies:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个八位字节，从右到左，以下内容适用：
- en: The first value of the first bit is always equal to `1`. It is `2` to the power
    of `0` (*2^0*), that is, `1`.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个位的值总是等于`1`。它是`2`的0次方（*2^0*），即`1`。
- en: The second bit is double the first bit and equals `2` (*2 to the power of 1*
    – that is, `2`).
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个位是第一个位的两倍，等于`2`（*2的1次方*——即`2`）。
- en: The third bit is double the second bit and equals `4` (*2 to the power of 2*
    – that is, `4`).
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个个位是第二个位的两倍，等于`4`（*2的2次方*——即`4`）。
- en: The fourth bit is double the third bit and equals `8` (*2 to the power of 3*
    – that is, `8`) and so on.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四个位是第三个位的两倍，等于`8`（*2的3次方*——即`8`），依此类推。
- en: 'Calculating the decimal value of a binary representation is done as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 计算二进制表示的十进制值的方法如下：
- en: Decimal = *(X*128) + (X*64) + (X*32) + (X*16) + (X*8) + (X*4) + (X*2) + (X*1)*
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 十进制 = *(X*128) + (X*64) + (X*32) + (X*16) + (X*8) + (X*4) + (X*2) + (X*1)*
- en: 'Next, to convert the decimal number *6* from the IP address `192.168.1.6` into
    binary requires identifying which of the "Xs" should be converted to zeros and
    which to ones. You want to convert the minimum number of bits to ones to get your
    decimal representation, and furthermore, you should continue to convert only those
    bits to ones whose value is less than your decimal number. So, for example, as
    shown in *Figure 6.5, we have the following*:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将IP地址`192.168.1.6`中的十进制数字*6*转换为二进制时，需要确定哪些“X”应转换为零，哪些应转换为一。你需要将最少的位转换为一，以获得你的十进制表示，并且你应当继续转换那些值小于十进制数的位为一。例如，如*图6.5所示，我们有以下内容*：
- en: You would not convert the bit on the far left to a *1* because 128 is greater
    than the last octet, *6* in our IP address. Similarly, you would not convert the
    next bit from the far left to a *1* in binary because 64 is also greater than
    the last octet, and so on.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不会将最左边的位转换为 *1*，因为 128 大于我们 IP 地址中的最后一个八位字节 *6*。同样，你也不会将从最左边数的下一位转换为 *1*，因为
    64 也大于最后一个八位字节，依此类推。
- en: You would convert the third bit from the far right to a *1* because its placeholder
    value is equal to *4*, which is less than *6* in our IP address.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要将最右边的第三位转换为 *1*，因为它的占位符值等于 *4*，小于我们 IP 地址中的 *6*。
- en: You would also convert the second bit from the far right to a *1* because its
    placeholder value is equal to *2*, which is also less than *6* in our IP address.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还需要将最右边的第二位转换为 *1*，因为它的占位符值等于 *2*，同样小于我们 IP 地址中的 *6*。
- en: Remember that you want to convert the fewest bits to ones to get your decimal
    representation. So, in this case, *4* plus *2* equals the last octet, *6* in our
    IP address. As such, we should not convert the last bit to a *1* as the total
    would then add up to *7*, which is more than *6*.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请记住，你希望将尽可能少的位转换为 *1* 以获得十进制表示。所以，在这种情况下，*4* 加 *2* 等于我们的 IP 地址中的最后一个八位字节 *6*。因此，我们不应将最后一位转换为
    *1*，因为这样总和会变成 *7*，超过了 *6*。
- en: '![Figure 6.5 – Converting an IP address to its equivalent binary representation'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.5 – 将 IP 地址转换为其等效的二进制表示'
- en: '](img/B17124_06_05.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_05.jpg)'
- en: Figure 6.5 – Converting an IP address to its equivalent binary representation
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – 将 IP 地址转换为其等效的二进制表示
- en: Hence, the binary representation of *6* is `00000110`. Similarly, converting
    the IP address `192.168.1.6` to binary would give you `11000000.10101000.00000001.00000110`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，*6* 的二进制表示为 `00000110`。类似地，将 IP 地址 `192.168.1.6` 转换为二进制会得到 `11000000.10101000.00000001.00000110`。
- en: Limitations of IPv4 addresses
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IPv4 地址的局限性
- en: One of the primary limitations of an IPv4 address is that it is only 32 bits
    in length. This means that the maximum number of addresses you can have in an
    IPv4 addressing scheme is *2^32*, which is 4,294,967,294 addresses in total. Four-billion-odd
    addresses might seem like a large number, but the fact is that we have exhausted
    this range simply because of the vast number of devices that now need an IP address
    to participate on any given network.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: IPv4 地址的主要局限之一是它只有 32 位长。这意味着你在 IPv4 地址方案中能够拥有的最大地址数量是 *2^32*，即 4,294,967,294
    个地址。四十亿个地址看似一个大数字，但事实上，我们已经耗尽了这个范围，因为现在需要 IP 地址的设备数量巨大，足以让任何给定网络参与者都需要一个 IP 地址。
- en: Currently, the largest network on the planet is the internet. Every device that
    needs to communicate on the internet also requires an IP address. Furthermore,
    every device on a given network must have a unique IP address. You cannot have
    two devices in the same network using the same IP address as this would result
    in a conflict. Given that the four-billion-odd addresses are not sufficient to
    handle the huge volumes of devices, the **Internet Assigned Numbers Authority**
    (**IANA**) devised a brilliant plan to allocate a range of IP address for private
    use only. These address ranges are not routable on the internet, which means that
    businesses (and homes) can configure their internal private networks using these
    addresses without any possibility of them conflicting with other businesses' networks,
    particularly if those businesses do not plan to connect their networks together.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当前，地球上最大的网络是互联网。每个需要在互联网中通信的设备都需要一个 IP 地址。此外，给定网络中的每个设备必须具有唯一的 IP 地址。你不能在同一网络中有两个设备使用相同的
    IP 地址，因为这将导致冲突。由于四十亿个地址不足以应对大量设备，**互联网分配号码管理局**（**IANA**）制定了一个聪明的计划，只为私人使用分配一段
    IP 地址。这些地址范围在互联网中不可路由，这意味着企业（和家庭）可以使用这些地址配置他们的内部私有网络，而不会与其他企业的网络发生冲突，特别是当这些企业不打算将它们的网络连接起来时。
- en: 'The following IP address ranges are designed for private use:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 IP 地址范围是专为私人使用设计的：
- en: '`10.0.0.0/8` IP addresses: `10.0.0.0 – 10.255.255.255`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10.0.0.0/8` IP 地址范围：`10.0.0.0 – 10.255.255.255`'
- en: '`172.16.0.0/12` IP addresses: `172.16.0.0 – 172.31.255.255`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`172.16.0.0/12` IP 地址范围：`172.16.0.0 – 172.31.255.255`'
- en: '`192.168.0.0/16` IP addresses: `192.168.0.0 – 192.168.255.255`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`192.168.0.0/16` IP 地址范围：`192.168.0.0 – 192.168.255.255`'
- en: Additional Note
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 附加说明
- en: Another range of private IP addresses is `169.254.0.0` to `169.254.255.255`,
    but those addresses are for **Automatic Private IP Addressing** (**APIPA**) use
    only, designed for internal Microsoft networks.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一个私有IP地址范围是`169.254.0.0`到`169.254.255.255`，但这些地址仅供**自动私有IP地址分配**（**APIPA**）使用，专为内部Microsoft网络设计。
- en: 'The remaining addresses are considered public, and thus are routable on the
    global internet. To illustrate how this helps, let''s look at the next diagram:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的地址被视为公共地址，因此可以在全球互联网中路由。为了说明这一点，让我们看一下下一个图示：
- en: '![Figure 6.6 – Private IP address ranges used by businesses'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.6 – 企业使用的私有IP地址范围'
- en: '](img/B17124_06_06.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_06.jpg)'
- en: Figure 6.6 – Private IP address ranges used by businesses
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – 企业使用的私有IP地址范围
- en: In the preceding diagram, you will note that the three companies are able to
    use the same IP addresses for their internal devices. Since these businesses are
    not connected to each other, there is no possibility of an IP address conflict.
    Private IP addresses such as the ones designated by the IANA have helped businesses
    build internal networks without the need to procure any of the public addresses.
    The private IP address space also enhances internal network security because these
    addresses are not routable on the internet. We can also allow more devices to
    be networked, as the address ranges can be repeated among companies that do not
    need to be connected to each other over the same network.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图示中，你会注意到这三家公司能够为其内部设备使用相同的IP地址。由于这些公司彼此之间并没有连接，因此不会出现IP地址冲突的可能性。像IANA指定的这些私有IP地址帮助企业在不需要采购任何公共地址的情况下，构建了内部网络。私有IP地址空间还增强了内部网络的安全性，因为这些地址在互联网中不可路由。我们还可以让更多的设备接入网络，因为这些地址范围可以在不需要彼此连接的公司之间重复使用。
- en: Businesses need internet access
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 企业需要互联网访问
- en: In the preceding illustration, we see that businesses can define internal network
    IP address ranges that are not routable over the internet. These businesses will
    still require access to the internet, whether to send and receive emails from
    their customers or host e-commerce applications that their clients would need
    access to from the internet. To facilitate internet connectivity, public IP addresses
    are required. However, having to assign each device on the internet with a public
    IP address would defeat the purpose of private IP ranges and pose a security risk.
    Instead, the internal network can be configured to access the internet via a service
    called **Network Address Translation** (**NAT**).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的插图中，我们可以看到，企业可以定义那些在互联网上不可路由的内部网络IP地址范围。这些企业仍然需要访问互联网，无论是为了从客户那里发送和接收电子邮件，还是托管他们的客户需要从互联网访问的电子商务应用程序。为了促进互联网连接，需要公共IP地址。然而，若每个设备都要分配一个公共IP地址，将会破坏私有IP地址范围的目的，并带来安全风险。相反，内部网络可以通过一种叫做**网络地址转换**（**NAT**）的服务来访问互联网。
- en: In the following diagram, we can see that businesses are now able to access
    the internet via a NAT service configured on their external router. The NAT service
    requires a minimum of one single public IP address and relays requests from the
    internal devices to the internet, acting as a proxy in between. Replies to those
    requests are also handled by the NAT service, ensuring that they are correctly
    redirected to the internal device that made the original request.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图示中，我们可以看到，企业现在能够通过配置在其外部路由器上的NAT服务来访问互联网。NAT服务至少需要一个公共IP地址，并将来自内部设备的请求转发到互联网，充当中间的代理。对这些请求的回复也由NAT服务处理，确保它们正确地重定向到发起原始请求的内部设备。
- en: '![Figure 6.7 – Private IP address ranges used by businesses with internet via
    NAT services'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.7 – 企业通过NAT服务使用的私有IP地址范围'
- en: '](img/B17124_06_07.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_07.jpg)'
- en: Figure 6.7 – Private IP address ranges used by businesses with internet via
    NAT services
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 – 企业通过NAT服务使用的私有IP地址范围
- en: Given the limitation of IPv4, IPv6 was developed by the **Internet Engineering
    Task Force** (**IETF**) in the 1990s. We take a look at IPv6 next and discuss
    how it overcomes the 32-bit address limitation of IPv4.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于IPv4的限制，IPv6是由**互联网工程任务组**（**IETF**）在1990年代开发的。接下来我们将讨论IPv6，并探讨它是如何克服IPv4的32位地址限制的。
- en: What about IPv6?
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么IPv6呢？
- en: To address the limitations of IPv4, IPv6 was developed by the IETF. IPv6 uses
    a 128-bit address, which would give us *2^128* addresses. IPv6 is also denoted
    in hexadecimal format rather than the standard decimal format. With IPv6, technically,
    each device could have its own public IP address. In fact, **Amazon Web Services**
    (**AWS**) offers IPv6 as an option to set up cloud networks. Even if you need
    to protect devices from the public internet, you can still use an IPv6 address
    for a virtual server in the cloud and allow it to send traffic over the internet
    using an egress-only internet gateway.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服 IPv4 的限制，IETF 开发了 IPv6。IPv6 使用 128 位地址，可以提供 *2^128* 个地址。IPv6 也使用十六进制格式表示，而非标准的十进制格式。在
    IPv6 中，从技术上讲，每个设备都可以拥有自己的公共 IP 地址。事实上，**Amazon Web Services**（**AWS**）提供了 IPv6
    作为设置云网络的选项。即使你需要保护设备不受公共互联网的访问，你仍然可以为云中的虚拟服务器分配一个 IPv6 地址，并通过出口仅限网关允许它通过互联网发送流量。
- en: However, many companies continue to use IPv4, partly due to the capabilities
    of NAT services and partly to ensure interoperability with legacy devices that
    may not be IPv6-aware.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，许多公司仍然使用 IPv4，部分原因是 NAT 服务的能力，部分原因是为了确保与可能不支持 IPv6 的旧设备的兼容性。
- en: Network sizes and classes
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络大小和类别
- en: Originally, the IETF designed different classes of IPv4 addresses to help define
    different network sizes and use cases.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，IETF 设计了不同类别的 IPv4 地址，以帮助定义不同的网络大小和使用场景。
- en: Classes A to C represent generic unicast IP addresses (with a few exceptions)
    that members of the public can use to build networks of different sizes. Class
    D comprises multicast addresses, and class E has been reserved for experimental
    use.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: A 类到 C 类代表了一般的单播 IP 地址（有少数例外），公众可以用来构建不同规模的网络。D 类包含组播地址，E 类则被保留用于实验用途。
- en: 'The way these classes help define network sizes is by splitting the IP address
    into a network portion and a host portion. Let''s look at this individually by
    class:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类别帮助定义网络大小的方式是将 IP 地址分为网络部分和主机部分。我们按类别逐一来看：
- en: '`1` (a one in binary) and host bits are denoted by `0` (zeroes). Also, the
    far-left bit of a class A address is set to `0`.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1`（二进制中的一）和主机位由 `0`（零）表示。此外，A 类地址的最左边位被设置为 `0`。'
- en: '`10`.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10`。'
- en: '`11`.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`11`。'
- en: 'To better illustrate how these three classes of networks actually look, let''s
    look at the next diagram:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地说明这三种网络类别的实际样子，让我们来看下一个示意图：
- en: '![Figure 6.8 – IP address classes'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.8 – IP 地址类别'
- en: '](img/B17124_06_08.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_08.jpg)'
- en: Figure 6.8 – IP address classes
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – IP 地址类别
- en: In the preceding diagram, you can identify which class a particular IP address
    belongs to and instantly identify the potential number of host IP addresses that
    IP block would have. So, for example, if we take the IP address `192.168.1.6`,
    we can confirm that it is a class C address.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示意图中，你可以识别出某个特定 IP 地址属于哪个类别，并能即时识别该 IP 块所能容纳的潜在主机 IP 地址数量。例如，如果我们取 IP 地址
    `192.168.1.6`，我们可以确认它是一个 C 类地址。
- en: What this means is that the network portion of the IP address is `192.168.1.x`.
    In this example, x can be any number between 1 and 254\. That gives you a total
    of 254 IP addresses in the host portion of the IP block. Although the total number
    of IP addresses you can have in any one octet is 256 (2^8, which equals 256),
    it is important to remember that the first and last IP addresses are unusable.
    The first IP address is always known as the network ID, which in this case is
    `192.168.1.``00000000`). The last IP address is `192.168.1.``11111111`).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着该 IP 地址的网络部分是 `192.168.1.x`。在这个例子中，x 可以是 1 到 254 之间的任何数字。这为你提供了 IP 块中主机部分的
    254 个 IP 地址。尽管你在任何一个八位字节中的总 IP 地址数量是 256（2^8，等于 256），但需要记住的是，第一个和最后一个 IP 地址是不可用的。第一个
    IP 地址总是被称为网络 ID，在本例中是 `192.168.1.00000000`。最后一个 IP 地址是 `192.168.1.11111111`。
- en: 'A simple formula to work out the number of usable IP addresses in an IP block
    is as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 计算一个 IP 块中可用 IP 地址数量的简单公式如下：
- en: '*Number of Usable IP Addresses = 2^Number of Host Bits - 2*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*可用 IP 地址数量 = 2^主机位数 - 2*'
- en: In the preceding example, we have an IP address of `192.168.1.6`, which belongs
    to an IP block that can only contain 254 usable IP addresses.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的例子中，我们有一个 IP 地址 `192.168.1.6`，它属于一个只能包含 254 个可用 IP 地址的 IP 块。
- en: So far, you have taken our word for it that the IP address `192.168.1.6` belongs
    to a class C network and there are 254 IP addresses in the block of `192.168.1.x`.
    Let's look at how this works next, when we discuss subnet masks.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经相信我们的说法，即IP地址`192.168.1.6`属于C类网络，并且在`192.168.1.x`这个IP地址块中共有254个IP地址。接下来我们将讨论子网掩码，看看它是如何工作的。
- en: What are subnet masks?
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是子网掩码？
- en: Subnet masks allow you to split an IP address block into a network portion and
    a host portion. Host devices on the same network portion can easily talk to one
    another and will need some form of routing to talk to hosts in other networks.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 子网掩码允许你将IP地址块划分为网络部分和主机部分。同一网络部分的主机设备可以轻松相互通信，而要与其他网络中的主机通信，则需要某种形式的路由。
- en: In the preceding class C network, the first three octets belong to the network
    portion and only the last octet (last 8 bits) belongs to the host portion.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述的C类网络中，前三个八位字节属于网络部分，只有最后一个八位字节（最后8位）属于主机部分。
- en: A subnet is a 32-bit number created by setting host bits to all zeroes and setting
    network bits to all ones. A logical `AND` operation is then performed with a corresponding
    IP address block to define the number of host IP addresses that can be available
    in each block.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 子网是一个32位数字，通过将主机位全部设置为零，并将网络位全部设置为一来创建。然后与相应的IP地址块进行逻辑`AND`运算，以定义每个块中可用的主机IP地址数量。
- en: So, for example, we can check that the IP address `192.168.1.6` belongs to a
    class C address because a class C masks the first three octets (first 24 bits
    in binary) as the network portion and leaves the last octet (last 8 bits) for
    the host bits.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以检查IP地址`192.168.1.6`是否属于C类地址，因为C类网络掩码的前三个八位字节（前24位二进制数）作为网络部分，最后一个八位字节（最后8位）作为主机部分。
- en: 'In binary, the IP address `192.168.1.6` and its associated subnet mask are
    represented as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在二进制中，IP地址`192.168.1.6`及其相关子网掩码表示如下：
- en: '![Figure 6.9 – IP address and subnet mask conversion for 192.168.1.6'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.9 – 192.168.1.6 的IP地址和子网掩码转换'
- en: '](img/B17124_06_09.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_09.jpg)'
- en: Figure 6.9 – IP address and subnet mask conversion for 192.168.1.6
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – 192.168.1.6 的IP地址和子网掩码转换
- en: 'A logical `AND` operation is calculated using the following process:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑`AND`运算的计算过程如下：
- en: A `0` and `0` equals `0`.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`与`0`的结果是`0`。'
- en: A `0` and `1` equals `0`.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`与`1`的结果是`0`。'
- en: A `1` and `0` equals `0`.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1`与`0`的结果是`0`。'
- en: A `1` and `1` equals `1`.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1`与`1`的结果是`1`。'
- en: Based on the result of the preceding logical `AND` operation, you will note
    if any of the first three octets of the IP address were to change, for example,
    if instead of `192` we used `193`, then that would yield a different result for
    the corresponding logical `AND` operation block. Since the first three octets
    represent the network portion of an IP address, the resulting change would effectively
    denote a different network.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 基于前述逻辑`AND`运算的结果，你会注意到如果IP地址的前三个八位字节发生变化，例如，如果将`192`改为`193`，那么对应的逻辑`AND`运算结果也会不同。由于前三个八位字节代表IP地址的网络部分，因此这种变化实际上表示了不同的网络。
- en: Furthermore, because the host portion in the subnet mask is set to all zeroes
    and is only represented by the last octet (last 8 bits), any variation in this
    octet will keep the IP address within the same network.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于子网掩码中的主机部分全部设为零，仅由最后一个八位字节（最后8位）表示，因此该八位字节的任何变化都将使IP地址保持在同一网络内。
- en: 'For example, let''s look at the IP address `192.168.1.12`. Depicting this in
    the following diagram while performing a logical `AND` operation with the subnet
    mask would yield the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们来看看IP地址`192.168.1.12`。在下图中，执行与子网掩码的逻辑`AND`运算后，结果如下：
- en: '![Figure 6.10 – IP address and subnet mask conversion for 192.168.1.12'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.10 – 192.168.1.12 的IP地址和子网掩码转换'
- en: '](img/B17124_06_10.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_10.jpg)'
- en: Figure 6.10 – IP address and subnet mask conversion for 192.168.1.12
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10 – 192.168.1.12 的IP地址和子网掩码转换
- en: 'What you will note from the preceding two diagrams is that the logical `AND`
    operation yields the same pattern of binary numbers, indicating the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的两个图中，你会注意到逻辑`AND`运算结果产生了相同的二进制数字模式，表示以下情况：
- en: Both IP addresses belong to the same network.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这两个IP地址属于同一网络。
- en: The network portion in both cases is the same, derived by the subnet mask of
    `255.255.255.0` (or `11111111 11111111 11111111 00000000`).
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这两种情况下，网络部分相同，都是由子网掩码`255.255.255.0`（或`11111111 11111111 11111111 00000000`）得出的。
- en: Now that we know how subnet masks are used to *mask* portions of an IP address
    as a network portion and host portion, let's examine the concept of subnetting.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道子网掩码是如何用于*掩蔽*IP地址中的网络部分和主机部分的，接下来我们来探讨子网划分的概念。
- en: What is subnetting?
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是子网划分？
- en: In the preceding discussion on subnet masks, we defined three classes of networks.
    The networks are derived by using subnet masks with fixed lengths to create these
    classes. So, for example, in a class A network, the first octet of an IP block
    represents the network portion and the remaining three octets the host portion.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面关于子网掩码的讨论中，我们定义了三种网络类型。这些网络是通过使用具有固定长度的子网掩码来创建的。例如，在一个A类网络中，IP块的第一个八位字节代表网络部分，其余三个八位字节代表主机部分。
- en: This is made possible by using what we call subnet masks. Specifically, we use
    a subnet mask of `255.0.0.0` to carve off the first octet for the network portion.
    Any change in the first octet of an IP address with a subnet mask of `255.0.0.0`
    would yield a different network. For example, `10.0.0.0` is on a different network
    to `31.0.0.0`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这通过使用我们所称之为的子网掩码得以实现。具体来说，我们使用子网掩码 `255.0.0.0` 来将第一个八位字节划分为网络部分。任何更改使用子网掩码 `255.0.0.0`
    的IP地址的第一个八位字节，都将得到一个不同的网络。例如，`10.0.0.0` 与 `31.0.0.0` 是两个不同的网络。
- en: Subnetting is the process by which you can create subnetworks within a larger
    network. In each network, you may need to create smaller, isolated portions of
    the network, such as one portion for hosting all backend servers and another for
    hosting frontend web servers. Subnetting allows us to break up a large network
    into these smaller subnets.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 子网划分是你可以在一个较大的网络内创建子网络的过程。在每个网络中，你可能需要创建较小的、隔离的网络部分，比如一个部分用于托管所有后端服务器，另一个部分用于托管前端Web服务器。子网划分使我们能够将一个大网络分解成这些较小的子网。
- en: The process of creating subnets involves *borrowing* additional bits from the
    host portion of an IP address range. These borrowed bits are used to create smaller
    subnetworks within a larger primary network.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 创建子网的过程涉及从IP地址范围的主机部分*借用*额外的位。这些借用的位用于在一个较大的主网络中创建较小的子网络。
- en: 'For example, if we have a business requirement for eight subnetworks, each
    capable of hosting 30 IP addresses for 30 devices, then using a standard class
    C address, we could use the following IP blocks:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们有一个商业需求，需要八个子网，每个子网能够容纳30个设备的30个IP地址，那么使用标准的C类地址，我们可以使用以下IP块：
- en: 'Network 1 – `192.168.1.0` (subnet mask: `255.255.255.0`)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络 1 – `192.168.1.0`（子网掩码：`255.255.255.0`）
- en: 'Network 2 – `192.168.2.0` (subnet mask: `255.255.255.0`)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络 2 – `192.168.2.0`（子网掩码：`255.255.255.0`）
- en: 'Network 3 – `192.168.3.0` (subnet mask: `255.255.255.0`)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络 3 – `192.168.3.0`（子网掩码：`255.255.255.0`）
- en: 'Network 4 – `192.168.4.0` (subnet mask: `255.255.255.0`)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络 4 – `192.168.4.0`（子网掩码：`255.255.255.0`）
- en: 'Network 5 – `192.168.5.0` (subnet mask: `255.255.255.0`)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络 5 – `192.168.5.0`（子网掩码：`255.255.255.0`）
- en: 'Network 6 – `192.168.6.0` (subnet mask: `255.255.255.0`)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络 6 – `192.168.6.0`（子网掩码：`255.255.255.0`）
- en: 'Network 7 – `192.168.7.0` (subnet mask: `255.255.255.0`)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络 7 – `192.168.7.0`（子网掩码：`255.255.255.0`）
- en: 'Network 8 – `192.168.8.0` (subnet mask: `255.255.255.0`)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络 8 – `192.168.8.0`（子网掩码：`255.255.255.0`）
- en: While this network design works perfectly, we have a lot of wastage in terms
    of the number of IP addresses available versus the number of IP addresses required.
    Each of these eight networks contain 254 usable IP addresses, but we only need
    30 addresses per network as per the requirement.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种网络设计工作得非常完美，但在可用IP地址数量与实际需求之间存在很多浪费。每个网络都有254个可用的IP地址，但根据需求，我们每个网络只需要30个地址。
- en: When using private IP ranges, this may not matter so much, but when we consider
    applying the same approach to the limited public IP address range, it becomes
    impossible to achieve. Also, note that you generally must pay for public IPs.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用私有IP地址范围时，这可能不会太重要，但当我们考虑将相同的方法应用于有限的公共IP地址范围时，这就变得不可能实现了。此外，请注意，通常情况下，你需要为公共IP地址付费。
- en: Instead of this approach, we can use subnetting and subnet masks to break up
    a single network into smaller networks, conserving and efficiently using the available
    IP address space within a given network.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 与此方法不同，我们可以使用子网划分和子网掩码将一个单一网络划分为多个较小的网络，从而节省并高效使用给定网络内可用的IP地址空间。
- en: So, for example, we can take the class C network of `192.168.1.0` with a subnet
    mask of `255.255.255.0` and break this up into smaller subnets. To do this, we
    borrow additional bits from the host portion of the IP address block to represent
    our subnets in the network.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以取 `192.168.1.0` 的类 C 网络，并使用子网掩码 `255.255.255.0`，将其分割为更小的子网。为了做到这一点，我们从
    IP 地址块的主机部分借用额外的位来表示我们的子网。
- en: 'Let''s take a look at the next diagram to illustrate this concept:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下下一个图示来说明这个概念：
- en: '![Figure 6.11 – IP class C network'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.11 – IP 类 C 网络'
- en: '](img/B17124_06_11.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_11.jpg)'
- en: Figure 6.11 – IP class C network
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11 – IP 类 C 网络
- en: In a standard class C network, the preceding IP address block of `192.168.1.0`
    with a subnet mask of `255.255.255.0` would yield a single network with 254 IP
    addresses.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个标准的类 C 网络中，前面的 IP 地址块 `192.168.1.0` 和子网掩码 `255.255.255.0` 将产生一个包含 254 个 IP
    地址的单一网络。
- en: This is because we have used the first three octets (24 bits) to represent the
    network portion and the last octet (8 bits) to represent the host portion.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们已经使用了前三个八位字节（24位）来表示网络部分，而最后一个八位字节（8位）来表示主机部分。
- en: Because we have 8 bits to represent host bits, we can use the formula 2^8, which
    equals 256\. However, remember the first and last IP addresses are not usable,
    so that is 256-2, which gives us 254 usable IP addresses.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们有8个位来表示主机位，我们可以使用公式 2^8，结果是 256。但请记住，首尾两个 IP 地址不可用，所以是 256-2，这给我们带来了 254
    个可用的 IP 地址。
- en: 'Now if we borrow the first 3 bits from the host portion of the IP address block
    to build subnetworks, we will have the following representation:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们从 IP 地址块的主机部分借用前3个位来构建子网，我们将得到以下表示：
- en: '![Figure 6.12 – Creating subnets by borrowing bits from the host portion of
    the IP address'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.12 – 通过借用 IP 地址主机部分的位来创建子网'
- en: '](img/B17124_06_12.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_12.jpg)'
- en: Figure 6.12 – Creating subnets by borrowing bits from the host portion of the
    IP address
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12 – 通过借用 IP 地址主机部分的位来创建子网
- en: 'By borrowing 3 bits from the far left of the fourth octet (the host portion),
    we can effectively create eight subnet networks. This is derived by the following
    formula:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从第四个八位字节（主机部分）的最左边借用3位，我们可以有效地创建八个子网网络。这可以通过以下公式推导出来：
- en: '*Number of subnets = 2^number of host bits borrowed*'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '*子网数量 = 2^借用的主机位数*'
- en: In this case, *2^3 = 8* and so, this gives us 8 subnetworks. Furthermore, because
    we now only have 5 bits remaining to represent the host portion, we can work out
    the number of IP addresses we have per subnetwork. The formula is *Number of Hosts
    = 2^Number of Host Bits Remaining*. In this case, it is *2^5* (because there are
    5 remaining host bits) = 32 IP addresses. In addition, as previously discussed,
    the first and the last IP addresses are not usable and as a result, we subtract
    2 from the number of IP addresses (32-2), which gives us our 30 IP addresses,
    as required.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，*2^3 = 8*，因此，这为我们提供了8个子网。此外，由于我们现在只剩下5个位来表示主机部分，我们可以计算出每个子网中拥有的 IP 地址数量。公式是
    *主机数量 = 2^剩余主机位数*。在这种情况下，它是 *2^5*（因为剩下5个位）= 32个 IP 地址。此外，正如之前讨论的，首尾两个 IP 地址不可用，因此我们从
    IP 地址数中减去2（32-2），得到所需的30个 IP 地址。
- en: 'If we look at the subnet mask representation of the borrowed 3 bits, we will
    have a new subnet mask as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看借用的3个位的子网掩码表示，我们将得到如下的新子网掩码：
- en: '![Figure 6.13 – Creating subnets resulting in a new subnet mask'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.13 – 创建子网并得到新的子网掩码'
- en: '](img/B17124_06_13.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_13.jpg)'
- en: Figure 6.13 – Creating subnets resulting in a new subnet mask
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13 – 创建子网并得到新的子网掩码
- en: Using a subnet mask of `255.255.255.224`, we can see that we have eight individual
    subnetworks that can be created.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 使用子网掩码`255.255.255.224`，我们可以看到可以创建八个独立的子网。
- en: '![Figure 6.14 – Creation of eight subnetworks'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.14 – 创建八个子网'
- en: '](img/B17124_06_14.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_14.jpg)'
- en: Figure 6.14 – Creation of eight subnetworks
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.14 – 创建八个子网
- en: 'You will note the pattern difference in the IP blocks shown in binary. Specifically,
    the different combination of *ones* and *zeros* in the borrowed bits define the
    eight different networks. The following IP address blocks are the eight subnetworks
    that can be created by borrowing 3 bits from the host portion of the IP address
    block `192.168.1.0`. Each subnetwork has 30 usable IP addresses. The eight networks
    are as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到在以二进制显示的 IP 块中，模式有所不同。具体来说，借用位中的 *1* 和 *0* 的不同组合定义了八个不同的网络。以下 IP 地址块是通过从
    IP 地址块 `192.168.1.0` 的主机部分借用 3 位所能创建的八个子网。每个子网有 30 个可用的 IP 地址。以下是这八个网络：
- en: '`192.168.1.0 (192.168.1.0 to 192.168.1.31)`'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`192.168.1.0 (192.168.1.0 到 192.168.1.31)`'
- en: '`192.168.1.32 (192.168.1.32 to 192.168.1.63)`'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`192.168.1.32 (192.168.1.32 到 192.168.1.63)`'
- en: '`192.168.1.64 (192.168.1.64 to 192.168.1.95)`'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`192.168.1.64 (192.168.1.64 到 192.168.1.95)`'
- en: '`192.168.1.96 (192.168.1.96 to 192.168.1.127)`'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`192.168.1.96 (192.168.1.96 到 192.168.1.127)`'
- en: '`192.168.1.128 (192.168.1.128 to 192.168.1.159)`'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`192.168.1.128 (192.168.1.128 到 192.168.1.159)`'
- en: '`192.168.1.160 (192.168.1.160 to 192.168.1.191)`'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`192.168.1.160 (192.168.1.160 到 192.168.1.191)`'
- en: '`192.168.1.192 (192.168.1.192 to 192.168.1.223)`'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`192.168.1.192 (192.168.1.192 到 192.168.1.223)`'
- en: '`192.168.1.224 (192.168.1.224 to 192.168.1.255)`'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`192.168.1.224 (192.168.1.224 到 192.168.1.255)`'
- en: 'Using subnet masking, you are then able to identify which network a particular
    IP address block belongs to. So, for example, the IP address `192.168.1.130` would
    belong to the IP block `192.168.1.128` with a subnet mask of `255.255.255.224`.
    This is made clearer when we look at the binary representation and perform the
    logical `AND` operation, as shown in the following diagram. You can see that the
    results of the logical `AND` operation match IP address block 5:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 通过子网掩码，你可以识别出某个特定 IP 地址块属于哪个网络。例如，IP 地址 `192.168.1.130` 会属于 IP 块 `192.168.1.128`，其子网掩码为
    `255.255.255.224`。当我们查看二进制表示并执行逻辑 `AND` 操作时，这一点更加清晰，如下图所示。你可以看到，逻辑 `AND` 操作的结果与
    IP 地址块 5 匹配：
- en: '![Figure 6.15 – Illustrating how IP addresses fall in a given subnetwork range'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.15 – 说明 IP 地址如何落在给定子网范围内'
- en: '](img/B17124_06_15.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_15.jpg)'
- en: Figure 6.15 – Illustrating how IP addresses fall in a given subnetwork range
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.15 – 说明 IP 地址如何落在给定子网范围内
- en: This binary depiction and logical `AND` operation show how IP address block
    5 falls in the same network as IP address block 1, as shown in the yellow cells.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这种二进制表示和逻辑 `AND` 操作展示了 IP 地址块 5 如何与 IP 地址块 1 在同一网络中，如黄色单元格所示。
- en: Classless Interdomain Routing (CIDR)
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无类别域间路由（CIDR）
- en: Instead of using subnet masks and the complexity discussed previously, we can
    use CIDR. With CIDR, you can create networks of different sizes like how you use
    subnet masks. CIDR is essentially another way to represent subnet masks but offers
    more flexibility. The size of your network will determine how many IP addresses
    you can have in that network. You can also divide your network into multiple smaller
    networks (subnets) by configuring specific subsets of the IP block using CIDR
    blocks.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前讨论的子网掩码和复杂性不同，我们可以使用 CIDR。通过 CIDR，你可以像使用子网掩码一样创建不同大小的网络。CIDR 本质上是表示子网掩码的另一种方式，但它提供了更多的灵活性。网络的大小将决定你在该网络中能拥有多少个
    IP 地址。你还可以通过使用 CIDR 块配置 IP 地址块的特定子集，将网络划分为多个较小的网络（子网）。
- en: When defining a network, CIDR blocks are displayed as part of the IP address
    block with a slash (/) followed by a decimal number between `/8` and `/32`. For
    example, the IP address `192.168.1.6` could belong to a network `192.168.1.0/24`.
    Let's look at how this works.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义网络时，CIDR 块作为 IP 地址块的一部分显示，后面跟一个斜杠（/）以及一个介于 `/8` 和 `/32` 之间的十进制数。例如，IP 地址
    `192.168.1.6` 可能属于一个网络 `192.168.1.0/24`。我们来看一下这个是如何运作的。
- en: In a network with a CIDR block of `/24`, we can work out the number of IP addresses
    that the network can host and therefore, the number of devices that can be placed
    in the network. Given that the total number of bits in an IPv4 range is 32, then
    for a `/24` CIDR, we simply subtract the 24 from 32, which gives us 8 bits. These
    8 bits represent the total number of IP addresses we can have in that network.
    Specifically, *2^8* equals 256\. So, the total number of IP addresses in network
    `192.168.1.0/24` is 256 IP addresses. Remember, that on any given network, the
    first and last IP addresses are not usable. So, the total number of usable IP
    addresses is 256 - 2, which equals 254.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个 CIDR 块为 `/24` 的网络中，我们可以计算出该网络可以容纳的 IP 地址数量，从而确定可以放置在该网络中的设备数量。由于 IPv4 范围中的总位数是
    32 位，因此对于 `/24` 的 CIDR，只需从 32 中减去 24，得到 8 位。这 8 位代表了我们在该网络中可以拥有的 IP 地址总数。具体地，*2^8*
    等于 256。因此，`192.168.1.0/24` 网络中的 IP 地址总数是 256 个。请记住，在任何给定的网络中，第一个和最后一个 IP 地址是不可用的。因此，有效的
    IP 地址总数是 256 - 2，即 254。
- en: An important point to note here is that the IP network with a CIDR block of
    `192.168.1.0/24` is one single network and within this network, you can host up
    to 254 devices that would each need an IP address. The IP address range would
    be from `192.168.1.1` to `192.168.1.254` (remember that the first IP `192.168.1.0`
    and the last IP `192.168.1.255` are not usable).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的一个重要点是，CIDR 块为 `192.168.1.0/24` 的 IP 网络是一个单一的网络，在该网络中，你可以最多容纳 254 个设备，每个设备都需要一个
    IP 地址。IP 地址范围从 `192.168.1.1` 到 `192.168.1.254`（请记住，第一和最后的 IP 地址 `192.168.1.0`
    和 `192.168.1.255` 是不可用的）。
- en: Let's look at another example. We will use the IP range of `10.0.0.0` to `10.0.255.255`,
    which is a private range for our internal network. Let's say that you choose a
    network IP with a CIDR block of `10.0.0.0/16`. In this network, your CIDR block
    is a `/16`. In this network, you can have a total of 65,536 IP addresses. Remember
    that to work out the number of IP addresses, you must subtract the value of 32
    from the CIDR block notation, in this case, 16\. This gives you 16 bits that can
    be used by devices in your network. Two to the power of *16 (2^16)* equals 65,536
    IP addresses. Remember to subtract another 2 from the total number of IP addresses,
    which gives you a total number of 65,534 usable IP addresses. This is a very large
    network, and you may wish to divide this larger network into smaller subnetworks
    (subnets) for resource isolation and separation. Using the same network IP block,
    you can create subnetworks by increasing the CIDR block value. For example, in
    the primary network of `10.0.0.0/16`, you can create several subnetworks using
    the CIDR block of `/20`. This means that you have 12 bits remaining for the hosts
    portion of your IP address block (32 bits – 20 bits for the network).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个其他的例子。我们将使用 `10.0.0.0` 到 `10.0.255.255` 的 IP 范围，这个范围是用于我们内部网络的私有范围。假设你选择了一个
    CIDR 块为 `10.0.0.0/16` 的网络。在这个网络中，CIDR 块是 `/16`。在这个网络中，你可以拥有总共 65,536 个 IP 地址。记住，要计算
    IP 地址的数量，你必须从 CIDR 块标记中减去 32 的值，在本例中是 16。这给你剩下 16 位可以供网络中的设备使用。*2^16* 等于 65,536
    个 IP 地址。记得再从总 IP 地址数中减去 2，得到的有效 IP 地址总数是 65,534。这个网络非常大，你可能希望将这个较大的网络划分为多个子网络（subnets），以便进行资源隔离和分离。使用相同的网络
    IP 块，你可以通过增加 CIDR 块的值来创建子网络。例如，在 `10.0.0.0/16` 的主网络中，你可以使用 `/20` 的 CIDR 块创建多个子网络。这意味着你为
    IP 地址块中的主机部分保留了 12 位（32 位 - 20 位用于网络）。
- en: So, within the `10.0.0.0/16` network, you can have subnetworks with the IP block
    of `10.0.0.0/20`. Each subnetwork would have a total of 4,096 IP addresses (*2^12*
    hosts bits remaining) or 4,094 usable IP addresses (subtracting the 2 IPs that
    cannot be used).
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在 `10.0.0.0/16` 网络中，你可以拥有 CIDR 块为 `10.0.0.0/20` 的子网络。每个子网络将有总共 4,096 个 IP
    地址（剩余 *2^12* 主机位），或者 4,094 个有效 IP 地址（减去不可用的 2 个 IP）。
- en: So far, we have looked at how IP addresses are configured and how they can be
    represented in both binary and decimal notation.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了 IP 地址的配置方式，以及它们如何以二进制和十进制表示。
- en: We also looked at how you can create a large network and subsequently, multiple
    smaller networks using CIDR blocks.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了如何使用 CIDR 块创建一个大型网络，随后将其拆分为多个较小的网络。
- en: In the next section, we start to look at VPCs, which are virtual networks you
    can build on AWS similarly to how you would define networks on-premises. Many
    services require a VPC within which you can launch resources. VPCs also help you
    protect your resources through firewall technologies, which we will also discuss
    in this chapter.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将开始了解 VPC，它们是您可以在 AWS 上构建的虚拟网络，类似于您在本地定义网络的方式。许多服务需要在 VPC 内启动资源。VPC
    还通过防火墙技术帮助保护您的资源，我们将在本章中讨论这些技术。
- en: Virtual Private Clouds (VPCs)
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟私有云（VPC）
- en: A VPC is a virtual network in the cloud. You choose the Region in which to create
    your VPC and define its network parameters such as the IP address range and any
    subnetworks within it, for resource isolation.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: VPC 是云中的虚拟网络。您可以选择创建 VPC 的区域，并定义其网络参数，如 IP 地址范围和其中的子网，以实现资源隔离。
- en: Resources deployed in your VPC can then access services on the internet or can
    grant inbound access from the internet, for example, if you are hosting an e-commerce
    web server.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 部署在 VPC 中的资源可以访问互联网服务，或者可以授予来自互联网的入站访问权限，例如，如果您托管的是一个电子商务 Web 服务器。
- en: AWS already provides you with a default VPC in each Region. These default VPCs
    are designed to get you up and running with the ability to deploy EC2 instances
    so that they can access the internet and, where necessary, be configured to allow
    direct inbound access from the internet.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 已经为您在每个区域提供了一个默认的 VPC。这些默认的 VPC 旨在帮助您快速启动并能够部署 EC2 实例，使其能够访问互联网，并在必要时，配置为允许来自互联网的直接入站访问。
- en: You can also configure custom VPCs to suit your business requirements. When
    configuring a new VPC, you need to define an IP address block from one of the
    private IP ranges. Your VPC spans the entire Region in which you deploy it. This
    means that you can place workloads in different Availability Zones within the
    VPC to design for high availability.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以根据业务需求配置自定义 VPC。在配置新的 VPC 时，您需要从私有 IP 范围中定义一个 IP 地址块。您的 VPC 将覆盖您部署它的整个区域。这意味着您可以在
    VPC 内的不同可用区放置工作负载，以设计高可用性。
- en: All about subnets
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于子网的所有内容
- en: Depending on your requirements, you can configure your non-default VPCs with
    multiple subnetworks (subnets).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的需求，您可以配置非默认的 VPC，以支持多个子网（subnets）。
- en: A subnet is a subset of the VPC, and this is defined in the IP address block
    of the subnet. So, for example, if the IP address block of your VPC is `10.0.0.0/16`,
    public `Subnet-1` could be configured with a network IP address CIDR block of
    `10.0.1.0/24`. Each subnet you define in each VPC would also need to be configured
    with non-overlapping subsets of IP ranges from your primary VPC's IP address block.
    So, for example, if you build another subnet, say `Subnet-2`, you could use an
    IP address CIDR block of `10.0.2.0/24`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 子网是 VPC 的一个子集，这在子网的 IP 地址块中定义。例如，如果您的 VPC 的 IP 地址块是 `10.0.0.0/16`，公共 `Subnet-1`
    可以配置为 `10.0.1.0/24` 的网络 IP 地址 CIDR 块。您在每个 VPC 中定义的每个子网也需要配置为来自主 VPC IP 地址块的非重叠
    IP 范围子集。例如，如果您再创建一个子网，假设是 `Subnet-2`，您可以使用 `10.0.2.0/24` 的 IP 地址 CIDR 块。
- en: The IP address CIDR block of `Subnet-1` (`10.0.1.0/24`) and the IP address CIDR
    block of `Subnet-2` (`10.0.2.0/24`) as shown in *Figure 6.8* are not overlapping.
    Nevertheless, both `Subnet-1` and `Subnet-2` belong to the same VPC's IP address
    CIDR block of `10.0.0.0/16`. This is because the IP address CIDR blocks of both
    the subnets are direct subsets of the VPC's IP address CIDR block.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如 *图 6.8* 所示，`Subnet-1`（`10.0.1.0/24`）和 `Subnet-2`（`10.0.2.0/24`）的 IP 地址 CIDR
    块不重叠。然而，`Subnet-1` 和 `Subnet-2` 都属于同一个 VPC 的 IP 地址 CIDR 块 `10.0.0.0/16`。这是因为这两个子网的
    IP 地址 CIDR 块都是该 VPC 的 IP 地址 CIDR 块的直接子集。
- en: Subnets are also restricted to a single Availability Zone. This means you can
    recreate multiple subnets across multiple Availability Zones, which would host
    replica resources to offer high availability. If a single Availability Zone (and
    therefore, the subnet contained within) were to go offline, you can redirect traffic
    to a replica resource in the alternative subnet that resides in another Availability
    Zone. The following diagram shows two subnets, one in each Availability Zone,
    that belong to the VPC. If `Subnet-1` were to go offline due to an Availability
    Zone outage, requests can still continue to be served by the database instance
    in `Subnet-2.`
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 子网也受限于单个可用区。这意味着您可以在多个可用区内重新创建多个子网，这些子网将托管复制资源以提供高可用性。如果某个可用区（因此，其中包含的子网）因可用区故障而下线，您可以将流量重定向到另一个可用区中的替代子网中的复制资源来继续提供服务。以下图示了两个子网，每个子网位于一个可用区中，属于该
    VPC。如果 `Subnet-1` 由于可用区故障而下线，请求仍然可以通过位于 `Subnet-2` 中的数据库实例继续提供服务。
- en: '![Figure 6.16 – VPCs and subnets with non-overlapping IP addresses'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.16 – VPC 和具有不重叠 IP 地址的子网'
- en: '](img/B17124_06_16.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_16.jpg)'
- en: Figure 6.16 – VPCs and subnets with non-overlapping IP addresses
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.16 – VPC 和具有不重叠 IP 地址的子网
- en: In the preceding diagram, we have deployed two database instances across two
    subnets within two Availability Zones.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，我们已经在两个可用区内的两个子网中部署了两个数据库实例。
- en: Internet access
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 互联网访问
- en: By default, your custom VPCs need to be configured with internet access if you
    want the EC2 instances in the VPC to send traffic to the internet. Furthermore,
    if you deploy servers that require direct inbound access from the internet, then
    you need to deploy them in subnets that have a direct route to the internet.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要使 VPC 中的 EC2 实例能够将流量发送到互联网，则需要为您的自定义 VPC 配置互联网访问。此外，如果部署需要从互联网直接入站访问的服务器，则需要将它们部署在具有直接路由到互联网的子网中。
- en: As depicted in *Figure 6.9*, you can define which subnetworks have direct access
    to the public internet, called public subnets (for example, the DMZ) and which
    subnets are private, called private subnets (for backend operations).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如 *图 6.9* 所示，您可以定义哪些子网可以直接访问公共互联网，称为公共子网（例如 DMZ），以及哪些子网是私有的，称为私有子网（用于后端操作）。
- en: To configure a VPC with internet access, you need to deploy an internet gateway.
    This is a free component that can be attached to your VPC to grant the VPC internet
    access. In addition, you would need to configure route tables associated with
    the public subnet to have direct access to the internet gateway. EC2 instances,
    which are then deployed in the public subnet, can send traffic to the internet
    and be configured to receive direct inbound traffic from the internet. An additional
    requirement, however, is that your EC2 instances in the public subnet must also
    have a public IP address. This can be dynamically assigned by AWS to the EC2 instances.
    Note that the public IP address is dynamic, which means that if the EC2 instance
    is stopped and then restarted, the IP address is likely to change. In most cases,
    this is acceptable because you generally will place your EC2 instances behind
    a load balancer (a service we discuss in a later chapter). However, if you need
    a static public IP address – one that does not change – then you can configure
    your EC2 instances with an elastic IP address.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置具有互联网访问权限的 VPC，您需要部署一个互联网网关。这是一个免费组件，可附加到您的 VPC，以授予 VPC 互联网访问权限。此外，您需要配置与公共子网相关联的路由表，以直接访问互联网网关。然后在公共子网中部署的
    EC2 实例可以发送流量到互联网，并配置为接收来自互联网的直接入站流量。然而，额外的要求是，您的公共子网中的 EC2 实例也必须具有公共 IP 地址。这可以由
    AWS 动态分配给 EC2 实例。请注意，公共 IP 地址是动态的，这意味着如果 EC2 实例停止然后重新启动，IP 地址很可能会更改。在大多数情况下，这是可以接受的，因为通常您会将
    EC2 实例放置在负载均衡器后面（我们在后面的章节中讨论的一项服务）。但是，如果您需要静态的公共 IP 地址 – 即不会更改的 IP 地址 – 那么您可以配置您的
    EC2 实例使用弹性 IP 地址。
- en: Elastic IP addresses are static and remain in your account until you release
    them. They are ideally suited for those EC2 instances that must always have the
    same public IP address over time. Elastic IP addresses can also be reassigned
    from one EC2 instance to another. This can be helpful if, for example, an EC2
    instance fails, and you need to spin up a new server as a replacement that must
    have the same IP address. Elastic IP addresses, therefore, can help you design
    for the high availability of services by automatically being reassigned to a standby
    EC2 instance in case of a failure on the primary EC2 instance.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 弹性 IP 地址是静态的，并且会一直保留在你的账户中，直到你释放它们。它们非常适合那些必须始终保持相同公共 IP 地址的 EC2 实例。弹性 IP 地址也可以从一个
    EC2 实例重新分配到另一个实例。如果，例如，某个 EC2 实例发生故障，需要启动新的服务器作为替代并保持相同的 IP 地址，弹性 IP 地址会非常有用。因此，弹性
    IP 地址可以帮助你设计高可用性服务，在主 EC2 实例发生故障时，自动将 IP 地址重新分配到备用 EC2 实例。
- en: In terms of cost, it is important to remember that elastic IP addresses are
    free only while they are associated with an EC2 instance that is in the running
    state. If you have an EC2 instance in the stopped (shutdown) state, you will incur
    charges for that elastic IP address on an hourly basis. The following diagram
    illustrates how traffic from the internet can be routed to web servers deployed
    in public subnets of the VPC. Note that in this case, the web servers would also
    need public IP addresses.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在成本方面，重要的是要记住，弹性 IP 地址仅在它们与处于运行状态的 EC2 实例关联时免费。如果 EC2 实例处于停止（关机）状态，你将按照小时收取该弹性
    IP 地址的费用。下图说明了来自互联网的流量如何路由到部署在 VPC 公有子网中的 Web 服务器。请注意，在这种情况下，Web 服务器还需要具有公共 IP
    地址。
- en: '![Figure 6.17 – VPCs and public and private subnets'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.17 – VPC 和公有、私有子网'
- en: '](img/B17124_06_17.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_17.jpg)'
- en: Figure 6.17 – VPCs and public and private subnets
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.17 – VPC 和公有、私有子网
- en: In the preceding diagram, if Availability Zone 1A were to have a major outage,
    our users can be redirected to the web servers in public `Subnet-2` of Availability
    Zone 1B and continue operations.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，如果可用区 1A 发生重大故障，用户可以被重定向到可用区 1B 中的公有 `子网-2` 上的 Web 服务器，并继续操作。
- en: VPC security
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VPC 安全性
- en: One of the primary reasons for building a VPC on AWS is to implement firewall
    security to ensure that access to the resources deployed within the VPC is carefully
    managed. For example, some resources, such as web servers, would require inbound
    access from members of the public on the internet. By contrast, if an application
    running on those web servers needed to update a backend database (for example,
    confirmation of customer orders), then you would want to ensure that only the
    web servers can make those updates to the backend database. You would not want
    members of the public to have direct access to the backend databases.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS 上构建 VPC 的主要原因之一是实施防火墙安全性，以确保对 VPC 中部署的资源的访问得到严格管理。例如，一些资源，如 Web 服务器，需要允许来自互联网公共成员的进站访问。相反，如果运行在这些
    Web 服务器上的应用需要更新后端数据库（例如，确认客户订单），则你需要确保只有 Web 服务器能够进行这些更新，而不能让公共成员直接访问后端数据库。
- en: Amazon offers two types of security service to enable you to build a highly
    secure environment, ensuring that only the required level of access and traffic
    is permitted.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊提供两种安全服务，帮助你构建高度安全的环境，确保仅允许所需级别的访问和流量。
- en: Security groups
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全组
- en: A security group is a firewall that is designed to allow you to configure what
    type of traffic you permit, inbound and outbound, to your EC2 instances. When
    you launch an EC2 instance, you must assign at least one security group to it,
    which must contain the necessary rules for any inbound and outbound traffic you
    wish to allow. Note that you can associate up to five security groups with an
    instance. Security groups act at the instance level and not the subnet level.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 安全组是一种防火墙，旨在帮助你配置允许的流量类型，包括进站和出站流量，供 EC2 实例使用。当你启动一个 EC2 实例时，必须为其分配至少一个安全组，并且该安全组必须包含允许的任何进站和出站流量的必要规则。请注意，你可以将最多五个安全组与一个实例关联。安全组作用于实例级别，而非子网级别。
- en: Each VPC comes with a default security group that allows all traffic inbound,
    *but only where the source of that traffic is the security group itself*. This
    means that if you have two EC2 instances associated with the same security group,
    then one EC2 instance will accept traffic initiated by the other EC2 instance.
    In addition, all outbound traffic to any destination is permitted. This means
    that an EC2 instance associated with the default security group can initiate communication
    outbound. This is based on the idea that you can trust your EC2 instances to make
    any necessary outbound requests, for example, to download operating system updates.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 VPC 都配有一个默认的安全组，该安全组允许所有流量入站，*但仅限于该流量的源是安全组本身*。这意味着，如果你有两个与同一个安全组关联的 EC2
    实例，那么一个 EC2 实例将接受由另一个 EC2 实例发起的流量。此外，所有的出站流量都被允许。这意味着与默认安全组关联的 EC2 实例可以发起出站通信。这是基于你可以信任你的
    EC2 实例进行任何必要的出站请求，例如下载操作系统更新。
- en: However, security groups do not allow any traffic to inbound from other sources
    (other than itself) until you create necessary rules. This is to prevent any unsolicited
    traffic reaching your instance. So, if you are configuring a web server that needs
    to serve web pages on the standard HTTP protocol, then you would need to configure
    an appropriate inbound rule for HTTP and specify the source of the traffic in
    terms of an IP address range. In addition to the default security group, you can
    also create your own security groups.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，安全组在你创建必要规则之前，不允许来自其他来源（除自身之外）的任何流量入站。这是为了防止任何未经请求的流量到达你的实例。因此，如果你正在配置一个需要使用标准
    HTTP 协议提供网页的 web 服务器，你就需要为 HTTP 配置一个合适的入站规则，并指定流量的来源，例如 IP 地址范围。除了默认的安全组之外，你还可以创建自己的安全组。
- en: An important feature to consider about security groups is that even though you
    may not have configured any inbound rules, response traffic to any outbound requests
    will be permitted inbound by the security group. Conversely, if you configured
    any inbound rules, responses to any inbound traffic that are allowed in because
    of those rules are permitted outbound regardless of any explicit outbound rules.
    This feature is what makes security groups **stateful**.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 关于安全组，一个需要考虑的重要特性是，即使你没有配置任何入站规则，对于任何出站请求的响应流量，安全组也会允许其入站。相反，如果你配置了任何入站规则，那么由于这些规则允许的入站流量的响应，都会被允许出站，无论是否有显式的出站规则。这一特性使得安全组具有**状态性**。
- en: 'Some additional key features include the following:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 其他一些关键特性包括：
- en: You can configure *allow* rules, but you cannot configure explicit *deny* rules.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以配置 *允许* 规则，但不能配置显式的 *拒绝* 规则。
- en: You can specify separate rules for inbound and outbound traffic.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以为入站和出站流量指定单独的规则。
- en: You can filter traffic based on protocols and port numbers. You can also specify
    sources and destinations that can be other security groups, thus offering a layered
    security approach.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以根据协议和端口号过滤流量。你还可以指定源和目标，这些源和目标可以是其他安全组，从而提供分层的安全方法。
- en: Security groups therefore protect your EC2 instances and enable you to define
    what inbound traffic you will allow to the instances.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，安全组保护你的 EC2 实例，并允许你定义允许哪些入站流量到达实例。
- en: Network Access Control Lists (NACLs)
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络访问控制列表（NACL）
- en: NACLs are another type of firewall service that are designed to protect entire
    subnets. Rather than offer protection at the instance level, they can be configured
    to allow or deny traffic from reaching subnets, within which you deploy your EC2
    instances.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: NACL 是另一种防火墙服务，旨在保护整个子网。与其在实例级别提供保护，它们可以配置为允许或拒绝流量到达子网，而这些子网中部署了你的 EC2 实例。
- en: A default NACL is configured in every VPC, which is configured to allow all
    inbound and outbound traffic. This is acceptable because traffic must still be
    permitted via security groups, which, by default, block all inbound connections.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 VPC 都会配置一个默认的 NACL，该 NACL 被配置为允许所有的进出流量。这是可以接受的，因为流量必须通过安全组进行许可，而安全组默认会阻止所有的入站连接。
- en: Incidentally, you can configure your subnets with custom NACLs, which, by default,
    block both inbound and outbound traffic, and additional configuration will be
    required to create any necessary inbound and outbound rules.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提一下，你可以为你的子网配置自定义的 NACL，这些 NACL 默认会阻止所有的进出流量，且需要额外的配置才能创建必要的进出规则。
- en: NACLs are also stateless, meaning that you have to configure both the inbound
    rules and corresponding outbound rules for traffic to flow and be responded to.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: NACL 也是无状态的，这意味着你必须同时配置入站规则和相应的出站规则，以确保流量能够流动并得到响应。
- en: Network Address Translation (NAT)
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络地址转换（NAT）
- en: At the start of this chapter, we discussed how a typical corporate network is
    usually divided into smaller subnetworks. Certain resources will be deployed in
    the DMZ (called public subnets on AWS) and others will be deployed in backend
    private subnets. By deploying resources in a private subnet, we ensured that there
    was no direct connection to them from the public internet. Such resources include
    database servers or application servers that should be accessible only via frontend
    web services or load balancers. This ensures that any traffic to those backend
    services is proxied via those frontend web services and without exposing them
    on the public internet.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开始时，我们讨论了典型企业网络通常如何被划分为多个子网络。某些资源将被部署在 DMZ（在 AWS 上称为公共子网），而其他资源将部署在后端私有子网中。通过将资源部署在私有子网中，我们确保这些资源不会直接连接到公共互联网。这些资源包括数据库服务器或应用程序服务器，这些服务器应该仅通过前端
    Web 服务或负载均衡器访问。这样可以确保所有流量都通过这些前端 Web 服务进行代理，而不会将这些资源暴露在公共互联网。
- en: Application servers may, however, require access to the internet, for example,
    to download product updates or patches. Since these servers will not have a public
    IP address and will be placed in private subnets, we need a mechanism for them
    to access the internet and to allow inbound responses to those servers. To fulfill
    this requirement, we can set up and configure a NAT service. As depicted in *Figure
    6.10*, this NAT service needs to be placed in the public subnet of your VPC and
    have an elastic IP address attached to it. Your route table is then configured
    with a rule to allow internet-bound traffic from EC2 instances in the private
    subnets to access the internet via this NAT service. The NAT service relays requests
    from the EC2 instances in the private subnet to the internet, acting as a proxy.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，应用服务器可能需要访问互联网，例如下载产品更新或补丁。由于这些服务器没有公共 IP 地址，并且将被放置在私有子网中，我们需要为它们提供访问互联网的机制，并允许它们接收来自互联网的响应。为满足这一需求，我们可以设置并配置一个
    NAT 服务。如*图 6.10*所示，这个 NAT 服务需要放置在你的 VPC 的公共子网中，并附加一个弹性 IP 地址。然后，你的路由表需要配置规则，允许来自私有子网的
    EC2 实例通过此 NAT 服务访问互联网。NAT 服务将来自私有子网的 EC2 实例请求转发到互联网，充当代理。
- en: Ultimately, if you need to enable EC2 instances with private IPv4 address access
    to the internet without directly exposing them on the internet (for example, with
    a public IP address), then on AWS, you can configure a NAT gateway to relay internet
    requests on behalf of those devices.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，如果你需要让 EC2 实例通过私有 IPv4 地址访问互联网，而不直接将它们暴露在互联网上（例如，通过公共 IP 地址），那么在 AWS 上，你可以配置一个
    NAT 网关来代表这些设备转发互联网请求。
- en: If you are using IPv6, as discussed earlier in this chapter, and you want to
    ensure that EC2 instances with IPv6 can access the internet without being directly
    exposed on the internet, you need to route traffic from those instances via an
    **egress-only internet gateway**.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 IPv6，如本章前面所讨论的那样，并且你希望确保拥有 IPv6 的 EC2 实例可以访问互联网而不会直接暴露在互联网上，你需要通过**仅出站互联网网关**来路由这些实例的流量。
- en: VPC peering
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VPC 对等连接
- en: A VPC peering connection is a private network connection between two VPCs. The
    service allows you to connect multiple VPCs so that instances in one VPC can access
    resources in another VPC. This means that traffic between VPCs over a peering
    connection does not traverse the public internet and offers greater levels of
    bandwidth, as well as security. Furthermore, the connections between the peers
    are highly available and there is no single point of failure.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: VPC 对等连接是两个 VPC 之间的私有网络连接。该服务允许你连接多个 VPC，以便一个 VPC 中的实例可以访问另一个 VPC 中的资源。这意味着
    VPC 之间通过对等连接的流量不会穿越公共互联网，并且提供更高的带宽和安全性。此外，节点之间的连接具有高可用性，并且没有单点故障。
- en: You can create VPC peering connections between VPCs in one AWS account or between
    AWS accounts. Peering connections can also be configured between VPCs in the same
    Region or across different Regions. This means that if you have VPCs across different
    Regions, for example, to facilitate the deployment of resources closer to your
    global branch offices, those resources can access each other across Regions.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: VPC transit gateway
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Earlier, we discussed how VPC peering can help you connect multiple VPCs together.
    The problem with VPC peering, however, is that every VPC must establish a one-to-one
    connection with its peer. Once the connections have been established, you also
    need to configure your route tables in each of the peered VPCs to direct appropriate
    traffic across the peering connection. If you have multiple VPCs that need to
    connect to each other, it can become very difficult to manage the individual connections
    and numerous route table entries.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following diagram, you will note the complexity of the various peering
    connections to connect each VPC:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.18 – Multiple VPC peering connections'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_06_18.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.18 – Multiple VPC peering connections
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: With AWS Transit Gateway, you can connect your individual VPCs together via
    the gateway in a hub-and-spoke model. This greatly simplifies your network architecture,
    as each new VPC that is peered to the gateway needs just a single connection to
    be able to route traffic to the other VPCs, as long as necessary route table configurations
    permit it to do so.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: 'This simplified model is depicted in the following diagram:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.19 – AWS Transit Gateway'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_06_19.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.19 – AWS Transit Gateway
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: Transit gateways help to reduce the architectural design overhead when trying
    to connect many VPCs together. Transit gateways achieve this design by using a
    hub-and-spoke architectural model.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Virtual Private Networks (VPNs)
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your VPC is hosted on the AWS platform. You can deploy various resources within
    your VPC, which you can access via the public internet, if you configure an internet
    gateway and the necessary security groups and NACLs. However, you can also connect
    your VPC to your corporate network (on-premises or a co-location data center).
    This type of connection is known as VPN. A VPN is a secure encrypted site-to-site
    tunnel established between two endpoints over the public internet. It offers AES
    128 or 256-bit **Internet Protocol security (IPsec)** encryption, which means
    that you can transfer data between the two endpoints securely.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: To set up a VPN connection between your on-premises network and the VPC, you
    need to create a **Virtual Private Gateway** (**VPG**) and attach it to your VPC.
    You will also need to configure a customer gateway, which is a physical or virtual
    device located in the on-premises network that connects to the VPG over the internet.
    The setup is illustrated in *Figure 6.12*.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: AWS supports a wide range of customer gateway devices, including Cisco, Juniper,
    and Check Point devices. Once the VPN connection has been established, you still
    need to configure your route tables on both the internal network and the VPC to
    direct appropriate traffic over the tunnel, as required.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 支持多种客户网关设备，包括 Cisco、Juniper 和 Check Point 设备。一旦 VPN 连接建立，你仍然需要在内部网络和 VPC
    上配置路由表，以便根据需要通过隧道传输适当的流量。
- en: '![Figure 6.20 – Amazon VPNs'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.20 – Amazon VPN'
- en: '](img/B17124_06_20.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_20.jpg)'
- en: Figure 6.20 – Amazon VPNs
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.20 – Amazon VPN
- en: While VPN connections enable you to encrypt traffic between the local network
    and the VPC, as depicted by the diagram, the bandwidth is limited to what your
    internet service provider offers. Furthermore, on AWS, there is a hard limit of
    1.26 Gbps. With a VPN connection you are also dependent on the routing mechanism
    of the public internet. If you require a more dedicated connection that bypasses
    the public internet altogether, then Amazon offers a service called Direct Connect,
    which we will look at next.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 VPN 连接可以加密本地网络与 VPC 之间的流量，如图所示，但带宽仅限于你的互联网服务提供商所提供的带宽。此外，在 AWS 上，VPN 的硬限制为
    1.26 Gbps。通过 VPN 连接，你还需要依赖公共互联网的路由机制。如果你需要一条完全绕过公共互联网的更专用的连接，那么 Amazon 提供了一项名为
    Direct Connect 的服务，我们将在接下来讨论。
- en: Direct Connect
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Direct Connect
- en: '**Direct Connect** is a service that enables you to connect your corporate
    data center to your VPC and the public services offered by AWS via a dedicated
    private connection that bypasses the internet altogether.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '**Direct Connect** 是一项服务，使你能够通过专用的私人连接将公司数据中心连接到你的 VPC 和 AWS 提供的公共服务，从而完全绕过互联网。'
- en: This is a more expensive solution than standard VPN setups due to the requirement
    to lay down necessary fiber optic cabling between your corporate office (or data
    center) and a local Amazon Direct Connect partner. Nevertheless, the service can
    offer dedicated links that operate at 1 Gbps, 10 Gbps, and up to 100 Gbps. Direct
    Connect thus gives you ultra-high-speed connectivity as well as a secure private
    connection.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 由于需要在你的公司办公室（或数据中心）与本地的 Amazon Direct Connect 合作伙伴之间铺设必要的光纤电缆，这种解决方案比标准的 VPN
    设置要昂贵。不过，该服务可以提供 1 Gbps、10 Gbps 甚至 100 Gbps 的专用链接。因此，Direct Connect 为你提供了超高速的连接以及安全的私人连接。
- en: In this section, we examined the core features and components of Amazon VPCs.
    VPCs enable you to build secure, isolated network areas within the AWS cloud that
    can be configured to allow only authorized connections into them. VPCs offer two
    types of firewall solutions – security groups and NACLs. The former can be configured
    to allow only specific types of traffic and acts as a firewall at the instance
    level, whereas the latter protects the entire subnet. Security groups are stateful,
    whereas NACLs are stateless; however, NACLs also provide the ability to deny specific
    types of traffic from specific sources. For example, if you host a web server
    and want to allow public access to the server from the internet, but also want
    to block access from a certain IP range (perhaps because you have discovered a
    potential attack from that range), NACLs can help you configure necessary deny
    rules as well.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们考察了 Amazon VPC 的核心特性和组件。VPC 使你能够在 AWS 云中构建安全、隔离的网络区域，并且可以配置为仅允许授权的连接进入这些区域。VPC
    提供两种防火墙解决方案——安全组和 NACL。前者可以配置为仅允许特定类型的流量，并且在实例级别充当防火墙，而后者则保护整个子网。安全组是有状态的，而 NACL
    是无状态的；然而，NACL 还提供了拒绝特定来源的特定类型流量的功能。例如，如果你托管了一个 Web 服务器，想允许来自互联网的公共访问，但也希望阻止来自某个
    IP 范围的访问（可能是因为你发现该范围存在潜在攻击），NACL 可以帮助你配置必要的拒绝规则。
- en: You can use both NACLs and security groups to build a layered, secure architecture.
    NACLs will protect your entire subnets by letting you explicitly define the type
    of traffic that can enter the subnet. Next, you define security groups for different
    groups of EC2 instances that may reside in a subnet, ensuring that only the necessary
    traffic is permitted to connect to the application running on those EC2 instances.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 NACL 和安全组来构建一个分层的安全架构。NACL 将通过明确指定可以进入子网的流量类型，保护整个子网。接下来，你可以为可能驻留在子网中的不同
    EC2 实例组定义安全组，确保只有必要的流量才能连接到运行在这些 EC2 实例上的应用程序。
- en: We then examined features such as VPC peering, AWS Transit Gateway, VPN connections,
    and the Direct Connect service. In the next section, we will learn about the AWS
    global DNS, Amazon Route53\. AWS Route53 enables you to direct traffic to resources
    both in your VPC and on the public internet using DNS name resolution, but also
    helps you shape traffic for high availability and fault tolerance.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们研究了诸如 VPC 对等连接、AWS Transit Gateway、VPN 连接以及 Direct Connect 服务等功能。在接下来的部分，我们将学习
    AWS 的全球 DNS 服务 Amazon Route53。AWS Route53 使你能够通过 DNS 名称解析将流量引导到 VPC 内和公共互联网中的资源，同时还帮助你调整流量以实现高可用性和容错。
- en: Learning about DNS and global routing with Amazon Route53
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 DNS 和全球路由与 Amazon Route53
- en: AWS Route53 is Amazon's global DNS, which is a service to help translate human-readable
    names into an IP address because, ultimately, computers connect to each other
    over IP addresses. DNS servers across the internet host billions of such name-to-IP
    address records, among other types of records. When you use your favorite browser
    to visit a particular website, such as `example.com`, your browser sends a request
    to your local DNS service provider, which, if necessary, refers the query to that
    domain's (`example.com`) authoritative DNS server. This authoritative DNS server
    responds with the IP address of the website you are trying to access, and your
    browser is then able to establish a connection with the website (in this case,
    `example.com`). This process of translating domain names to IP addresses is called
    name resolution.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Route53 是 Amazon 的全球 DNS，它是一项帮助将人类可读的名称转换为 IP 地址的服务，因为最终，计算机是通过 IP 地址互相连接的。互联网上的
    DNS 服务器托管着数十亿条这类名称到 IP 地址的记录，此外还有其他类型的记录。当你使用自己喜欢的浏览器访问特定网站（例如 `example.com`）时，你的浏览器会向本地
    DNS 服务提供商发送请求，如果需要，DNS 服务提供商会将查询转发给该域名（`example.com`）的权威 DNS 服务器。这个权威 DNS 服务器会返回你试图访问的网站的
    IP 地址，之后你的浏览器就能够与该网站建立连接（在此案例中是 `example.com`）。这个将域名转换为 IP 地址的过程叫做名称解析。
- en: 'Amazon Route53 offers three primary functions:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Route53 提供三项主要功能：
- en: Domain registration
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 域名注册
- en: DNS routing
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DNS 路由
- en: Health checks
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 健康检查
- en: Let's look at each of the functions next.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们来看一下各个功能。
- en: Domain registration
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 域名注册
- en: Before you can use a domain name for your website or web application that members
    of the public can access, you need to register a name of your choice with a domain
    registrar. Amazon Route53 offers complete domain name registration services. When
    you choose a name to register, you do so under a `.com`, `.co.uk`, `.org,` or
    `.net`. If the name of your choice under a particular TLD is not available, you
    can try a different TLD. For example, if `example.com` is not available because
    someone else has already registered it, then you can try `example.co.uk` or `example.net`.
    There are hundreds of TLD names to choose from.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在你可以使用域名为你的网站或 Web 应用程序提供公共访问之前，你需要通过域名注册商注册一个你选择的名称。Amazon Route53 提供完整的域名注册服务。当你选择一个名称进行注册时，你可以选择
    `.com`、`.co.uk`、`.org` 或 `.net` 等后缀。如果你选择的名称在某个特定的 TLD 下不可用，你可以尝试不同的 TLD。例如，如果
    `example.com` 已被他人注册，你可以尝试 `example.co.uk` 或 `example.net`。有数百种 TLD 可供选择。
- en: As part of the registration, you purchase a lease duration for your domain name,
    which can be from anywhere between 1 year and 10 years. You need to renew this
    lease before expiry, or you risk someone else registering the name, which will
    affect your ability to offer your web services using the same domain name.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 作为注册的一部分，你需要为你的域名购买一个租赁期，租赁期可以是 1 年到 10 年之间的任何时间。你需要在租期到期之前续租，否则你可能会面临其他人注册该名称的风险，这将影响你继续使用该域名提供
    Web 服务的能力。
- en: Once you have registered your domain name, you then need to host it with a DNS
    hosting service provider. Often, the registration and hosting service is offered
    by the same company, in this case, Amazon Route53\. The hosting service offers
    you the ability to create resource records for your domain, for example, configuring
    the domain name to point to an IP address of a web server. When users on the internet
    type the domain name in their browser, they are directed to your web server, which
    hosts your website.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你注册了域名，就需要通过 DNS 托管服务提供商进行托管。通常，注册和托管服务由同一公司提供，在这种情况下是 Amazon Route53。托管服务使你能够为你的域名创建资源记录，例如，将域名配置为指向一个
    Web 服务器的 IP 地址。当互联网上的用户在浏览器中输入域名时，他们会被引导到你的 Web 服务器，该服务器托管着你的网站。
- en: 'There are several types of resource records you can create. Some types of resource
    records are displayed in the following table:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建几种类型的资源记录。以下表格显示了一些类型的资源记录：
- en: '![Table 6.1 – Example resource records for iaasacademy.com'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '![表 6.1 – iaasacademy.com 的示例资源记录'
- en: '](img/Table_6.1.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Table_6.1.jpg)'
- en: Table 6.1 – Example resource records for iaasacademy.com
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6.1 – iaasacademy.com 的示例资源记录
- en: When configuring your domain names, you also need to define a zone file, which
    will host resource records for your domain name. It is in a zone file that you
    would create resource records, such as the A record, which are standard name-to-IP
    address resolution records. Next, we look at how zone files are created on AWS
    Route53.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置你的域名时，你还需要定义一个区域文件，该文件将承载你域名的资源记录。在区域文件中，你将创建资源记录，例如 A 记录，这是标准的名称到 IP 地址的解析记录。接下来，我们将了解如何在
    AWS Route53 上创建区域文件。
- en: Hosted zones
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 托管区域
- en: To create the necessary resource records for your domain name, you need to set
    up a hosted zone on Route53\. A hosted zone is a container that is used to store
    and manage your resource records and allows you to define how traffic is routed
    for your domain (`example.com`) and any sub-domains (such as `portal.example.com`).
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 要为你的域名创建必要的资源记录，你需要在 Route53 上设置一个托管区域。托管区域是一个容器，用于存储和管理你的资源记录，并允许你定义如何为你的域名（`example.com`）及任何子域（例如
    `portal.example.com`）路由流量。
- en: 'There are two types of hosted zones you can set up on Route53:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Route53 上设置两种类型的托管区域：
- en: '`http://bucket-name.s3-website-Region.amazonaws.com`. You could provide this
    S3 website endpoint URL to your users to access your web pages that are hosted
    on the S3 bucket. However, a much better option would be to create an alias record
    that points your company domain name (`example.com`) to the S3 website endpoint.
    Your users would find it much easier to remember your domain name than the original
    S3 endpoint name.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://bucket-name.s3-website-Region.amazonaws.com`。你可以将这个 S3 网站端点 URL 提供给用户，供他们访问托管在
    S3 存储桶上的网页。然而，更好的选择是创建一个别名记录，将你的公司域名（`example.com`）指向 S3 网站端点。你的用户会发现记住你的域名比记住原始的
    S3 端点名称容易得多。'
- en: '`devserver.example.com` that points to an EC2 instance within your VPCs, which
    other resources in the VPC may need to connect to. This is a much better option
    than having to remember IP addresses of your EC2 instances and means you do not
    need to hardcode those IP addresses in your application code, which can become
    difficult to manage.'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`devserver.example.com` 指向你 VPC 中的 EC2 实例，其他 VPC 中的资源可能需要连接到该实例。这比记住 EC2 实例的
    IP 地址要好得多，意味着你不需要将这些 IP 地址硬编码到应用代码中，这样管理起来会变得更加困难。'
- en: DNS hostnames
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DNS 主机名
- en: 'AWS provides a DNS server (Amazon Route53 Resolver) for your VPC. This enables
    AWS to configure DNS hostnames for the instances you deploy in your VPC. DNS hostnames
    comprise a hostname and a domain name, such as `myserver.mycompany.com`. DNS hostnames
    enable you to create unique names for your EC2 instances. In addition, AWS provides
    two types of DNS hostnames:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 为你的 VPC 提供了一个 DNS 服务器（Amazon Route53 Resolver）。这使得 AWS 可以为你在 VPC 中部署的实例配置
    DNS 主机名。DNS 主机名由主机名和域名组成，例如 `myserver.mycompany.com`。DNS 主机名允许你为 EC2 实例创建唯一的名称。此外，AWS
    提供了两种类型的 DNS 主机名：
- en: '`private-ipv4-address` is the reverse lookup IP address.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`private-ipv4-address` 是反向查找的 IP 地址。'
- en: '**Public DNS hostnames** – These resolve a public DNS hostname to the public
    IPv4 address of the instance outside the network of the instance, and to the private
    IPv4 address of the instance from within the network of the instance. The DNS
    hostname can take one of the following two forms, depending on the Region:'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共 DNS 主机名** – 这些将公共 DNS 主机名解析为实例外部的公共 IPv4 地址，以及从实例内部解析为实例的私有 IPv4 地址。根据区域的不同，DNS
    主机名可以采用以下两种形式之一：'
- en: '[PRE0]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: While Route53 offers a fully functional DNS, it also enables you to design how
    traffic is routed across resources placed within a Region and across Regions.
    Next, we look at the different routing policies offered by Amazon Route53.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Route53 提供了一个功能完整的 DNS 服务，但它还允许你设计如何在一个区域内以及跨区域地路由流量。接下来，我们将查看 Amazon Route53
    提供的不同路由策略。
- en: Routing policies
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路由策略
- en: In addition to standard name resolution services, such as pointing your domain
    name to a specific IP address, Amazon Route53 also offers several complex routing
    policies and configurations. These routing policies enable you to define various
    rules that offer the ability to build highly available solutions or redirect customers
    to resources that are closer to their location and thus reduce latency.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准的名称解析服务，例如将您的域名指向特定的IP地址，亚马逊 Route53 还提供了几种复杂的路由策略和配置。这些路由策略使您能够定义各种规则，从而构建高可用的解决方案，或者将用户重定向到距离其位置更近的资源，从而减少延迟。
- en: 'Let''s examine the various routing policies available with Amazon Route53:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 Amazon Route53 提供的各种路由策略：
- en: '**Simple routing policy**: The most basic and default routing policy. This
    resource record enables you to map a domain name to a single resource, such as
    an IP address of a web server or a DNS endpoint of an elastic load balancer. The
    policy engine will not check whether the resource is functioning and available.'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单路由策略**：最基本的默认路由策略。此资源记录使您能够将域名映射到单个资源，例如Web服务器的IP地址或弹性负载均衡器的DNS终端。该策略引擎不会检查资源是否正常工作或可用。'
- en: '**Failover routing policy**: To offer high availability, you can host two copies
    of your resources ideally across different Regions. One set of resources will
    be designated as your primary resource and the other as a secondary resource.
    Route53 performs health checks (discussed later) to determine whether the primary
    resource is available and in the event of a failure to connect to the primary
    resource, Route53 will redirect all traffic to the secondary resource. This failover
    routing policy enables you to design your solution with an active-passive failover.'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障切换路由策略**：为了提供高可用性，您可以将两个资源副本分别部署在不同的区域。一个资源副本将被指定为主资源，另一个为次资源。Route53 会执行健康检查（稍后讨论），以确定主资源是否可用。如果无法连接到主资源，Route53
    会将所有流量重定向到次资源。此故障切换路由策略使您能够设计具有主动-被动故障切换的解决方案。'
- en: '**Geolocation routing policy**: This routing policy enables you to route traffic
    based on the geographical location of your users – such as continent, country,
    or state (in the United States). Your users'' location is determined from the
    source of the DNS queries for your web service. This routing policy is particularly
    useful when you need to ensure that your content is accessible only in locations
    where you have distribution rights. For example, if your end users are based in
    Europe, you may wish to direct them to a copy of your resources deployed in the
    Frankfurt Region.'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地理位置路由策略**：此路由策略使您能够根据用户的地理位置（如大洲、国家或美国的州）路由流量。用户的位置是通过DNS查询源确定的。这种路由策略特别有用，当您需要确保您的内容仅在您有分发权限的地点可访问时。例如，如果您的最终用户位于欧洲，您可能希望将他们引导到部署在法兰克福区域的资源副本。'
- en: '**Latency routing policy**: This routing policy is particularly useful when
    you have resources deployed in multiple Regions and you wish to route your users''
    traffic to the Region that offers the lowest latency.'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**延迟路由策略**：当您在多个区域部署资源时，如果您希望将用户的流量路由到提供最低延迟的区域，这种路由策略尤其有用。'
- en: '**Weighted routing policy**: This routing policy enables you to route different
    ratios of your total traffic to different resources associated with a single domain.
    For example, you can choose to route three-quarters of your traffic to one copy
    of your resource and the remaining one-quarter to another. This is also particularly
    useful when you want to perform a gradual migration of your total traffic from
    one resource to another, such as a new version of your website. You can gradually
    alter the weights to migrate your total traffic over a short period of time from
    the old version of your website to the new version.'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加权路由策略**：这种路由策略使您能够将总流量的不同比例路由到与单个域名相关的不同资源。例如，您可以选择将四分之三的流量路由到一个资源副本，而将剩下的四分之一流量路由到另一个副本。当您希望将所有流量从一个资源逐步迁移到另一个资源时，这也特别有用，例如将网站的流量从旧版迁移到新版。您可以逐步调整加权值，在短时间内将流量从旧版本网站迁移到新版本。'
- en: When creating certain routing policies, such as the failover routing policy,
    you also need to define health checks so that Route53 can determine whether a
    failover to the secondary site is required. We look at health checks in detail
    next.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建某些路由策略时，例如故障转移路由策略，你还需要定义健康检查，以便 Route53 可以确定是否需要切换到备用站点。接下来，我们将详细讨论健康检查。
- en: Health checks
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 健康检查
- en: 'You can use Route53 to perform health checks against your resources, such as
    web servers, elastic load balancers, and S3 static websites. Depending on the
    results of your checks, you can then take appropriate actions and redirect traffic
    as necessary to ensure the high availability of services. There are three types
    of health checks you can perform:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Route53 对你的资源执行健康检查，例如 Web 服务器、弹性负载均衡器和 S3 静态网站。根据检查结果，你可以采取适当的措施，并在必要时重定向流量，以确保服务的高可用性。你可以执行三种类型的健康检查：
- en: '**Health checks that monitor an endpoint**: This monitors an endpoint you specify,
    such as an IP address or domain name.'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控端点的健康检查**：此健康检查监控你指定的端点，例如 IP 地址或域名。'
- en: '**Health checks that monitor other health checks**: You can choose to monitor
    multiple resources and determine the overall health of your collection of resources
    based on some minimum number of resources that are healthy. If the number of available
    resources drops below a specified threshold, Route53 health checks can then take
    appropriate action.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控其他健康检查的健康检查**：你可以选择监控多个资源，并根据某些最小健康资源数量来确定你的资源集合的整体健康状况。如果可用资源的数量低于指定的阈值，Route53
    健康检查则可以采取适当的措施。'
- en: '`ALARM` state either, as it independently determines the health based on the
    metric data.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ALARM` 状态也可以独立根据度量数据来确定健康状况。'
- en: In addition to routing policies and health checks, you can also build complex
    routing rules, and for this, we look at traffic flow and traffic policies next.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 除了路由策略和健康检查外，你还可以构建复杂的路由规则，接下来我们将讨论流量流和流量策略。
- en: Traffic flow and traffic policies
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流量流和流量策略
- en: 'You may need to create complex routing of traffic using a combination of resource
    records and Route53 routing policies. For example, you may create configuration
    in which you set up latency routing policies across several Regions, which then
    reference weighted records in each Region for your resources. Each configuration
    is known as a **traffic policy**, and you use a visual editor to help you build
    your routing architecture, which Route53 uses to design your traffic flow. Using
    the visual editor, you can also create multiple versions of your traffic policy
    so that you can quickly adapt to changes. Note that you can only use a traffic
    flow to create records in public hosted zones:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要使用资源记录和 Route53 路由策略的组合来创建复杂的流量路由。例如，你可以创建一个配置，其中设置跨多个区域的延迟路由策略，然后在每个区域中引用加权记录。每个配置称为
    **流量策略**，你可以使用可视化编辑器帮助你构建路由架构，Route53 会使用该架构来设计流量流向。通过可视化编辑器，你还可以创建多个版本的流量策略，以便快速适应变化。请注意，你只能使用流量流来在公共托管区域中创建记录：
- en: '**Geoproximity routing policy**: In addition to the standard Route53 routing
    policies, you can also configure geoproximity routing policies (available only
    when you use Route53 Traffic Flow). This routing policy enables you to route traffic
    based on the location of your resources. You can also shift traffic from resources
    in one location to resources in another location using a *bias* value.'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地理邻近路由策略**：除了标准的 Route53 路由策略外，你还可以配置地理邻近路由策略（仅在使用 Route53 Traffic Flow 时可用）。此路由策略使你能够根据资源的位置来路由流量。你还可以使用
    *偏差* 值将流量从一个位置的资源转移到另一个位置的资源。'
- en: '**Route53 Resolver**: Route53 also enables you to perform DNS resolution between
    Route53 Resolver and DNS resolvers on your network by configuring forwarding rules.
    In this case, *your network* can comprise your VPC, other peered VPCs, or even
    your on-premises corporate data centers connected to AWS either via a VPN or AWS
    Direct Connect.'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Route53 解析器**：Route53 还使你能够通过配置转发规则在 Route53 解析器和你网络中的 DNS 解析器之间执行 DNS 解析。在这种情况下，*你的网络*
    可以包括你的 VPC、其他对等的 VPC，甚至是通过 VPN 或 AWS Direct Connect 连接到 AWS 的本地企业数据中心。'
- en: In this section, we learned about the Amazon DNS service offered by Route53\.
    Route53 enables you to register domain names, create public and private hosted
    zones to manage your resource records, define routing policies for different use
    cases, and perform health checks against your resources. Route53 also enables
    you to build complex routing rules using multiple resource records, along with
    traffic flow and traffic policies.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了由 Route53 提供的亚马逊 DNS 服务。Route53 使您能够注册域名、创建公共和私有托管区以管理资源记录、为不同的用例定义路由策略，并对资源进行健康检查。Route53
    还使您能够使用多个资源记录以及流量流和流量策略构建复杂的路由规则。
- en: In the next section, we look at AWS CloudFront, which is Amazon's **Content
    Delivery Network** (**CDN**) solution. CDNs are often used to distribute content
    globally from a source location and, with the help of caching services, offer
    reliable, low-latency access to your content.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分中，我们将了解 AWS CloudFront，这是亚马逊的**内容分发网络**（**CDN**）解决方案。CDN 通常用于从源位置全球分发内容，并借助缓存服务提供可靠的低延迟访问。
- en: Implementing a robust CDN with Amazon CloudFront
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Amazon CloudFront 实现一个强大的 CDN
- en: Amazon CloudFront is a CDN that helps you to distribute your static and dynamic
    digital content globally with low-latency connections. AWS CloudFront uses AWS
    edge locations and regional edge caches to cache content closer to your end users'
    locations. This means that you can host your content in one specific Region and
    a user who attempts to access it from another Region will retrieve the content
    via the edge location over the AWS backbone network. Furthermore, as content is
    retrieved, it is cached at a local edge location closer to the user for a period
    (known as a **time-to-live** or **TTL**), further improving network latency in
    subsequent requests for the same content.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon CloudFront 是一个 CDN，帮助您通过低延迟连接将静态和动态数字内容全球分发。AWS CloudFront 使用 AWS 边缘位置和区域边缘缓存，将内容缓存到离最终用户更近的位置。这意味着您可以将内容托管在一个特定的区域，而用户如果从另一个区域访问该内容，将通过边缘位置通过
    AWS 主干网络获取内容。此外，当内容被提取时，它会在离用户更近的本地边缘位置缓存一段时间（称为**生存时间**或 **TTL**），进一步提高后续请求相同内容的网络延迟。
- en: '![Figure 6.21 – A typical CloudFront distribution'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.21 – 典型的 CloudFront 分发'
- en: '](img/B17124_06_21.jpg)'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_21.jpg)'
- en: Figure 6.21 – A typical CloudFront distribution
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.21 – 典型的 CloudFront 分发
- en: To configure Amazon CloudFront, you create a distribution endpoint that defines
    the types of content you want to serve and the source of that content. The source
    can be an S3 bucket, an S3 bucket configured as a static website, an Amazon EC2
    instance, or an elastic load balancer, among others. As part of your configuration,
    you get a CloudFront URL, which you provide to your users to access your content
    via CloudFront. You can also use custom URLs, which allows you to define your
    distribution with a company-branded domain name.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置 Amazon CloudFront，您需要创建一个分发端点，该端点定义您希望提供的内容类型及其来源。源可以是 S3 存储桶、配置为静态网站的 S3
    存储桶、Amazon EC2 实例或弹性负载均衡器等。在配置过程中，您将获得一个 CloudFront URL，您可以将其提供给用户，以通过 CloudFront
    访问您的内容。您还可以使用自定义 URL，这允许您使用公司品牌域名来定义您的分发。
- en: 'When you configure your CloudFront distributions, you can choose to serve your
    content over HTTP and HTTPS. Some examples of types of content that can be served
    include the following:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 当您配置 CloudFront 分发时，您可以选择通过 HTTP 和 HTTPS 提供内容。一些可以提供的内容类型示例如下：
- en: Static and dynamic content, for example, HTML, CSS, JavaScript, and images
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态和动态内容，例如 HTML、CSS、JavaScript 和图片
- en: Video on demand in different formats, for example, Apple **HTTP Live Streaming**
    (**HLS**) and Microsoft Smooth Streaming
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按需视频的不同格式，例如 Apple **HTTP 实时流媒体**（**HLS**）和 Microsoft 平滑流媒体
- en: Live events and conferences
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现场活动和会议
- en: CloudFront ultimately enables you to architect a CDN for your web application.
    Next, we look at how CloudFront is priced.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFront 最终使您能够为您的 web 应用程序架构一个 CDN。接下来，我们来看一下 CloudFront 的定价。
- en: Choosing a price class for your CloudFront distribution
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为您的 CloudFront 分发选择价格类
- en: 'Amazon charges you for distributing your content via its edge locations. Rather
    than charge you on a per-edge location basis, however, Amazon have clubbed several
    edge locations across Regions into three specific price classes. The most expensive
    price class is where your content is accessible via all edge locations globally.
    This also happens to be the default price class when you create your distribution,
    but ultimately offers the best performance. If you are looking to reduce cost
    and if you know that the consumers of your content are from specific Regions,
    you can choose two alternative price classes:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon会向您收取通过其边缘位置分发内容的费用。然而，Amazon并不是按每个边缘位置收费，而是将跨区域的多个边缘位置归为三种特定的价格类别。最昂贵的价格类别是您的内容可以通过全球所有边缘位置访问。这也是创建分发时的默认价格类别，但最终提供最佳性能。如果您希望降低成本，并且知道您的内容消费者来自特定地区，您可以选择两种替代价格类别：
- en: United States; Canada; Europe; Hong Kong, Philippines, South Korea, Taiwan,
    Singapore; Japan; India; South Africa; and Middle East regions – This class excludes
    the most expensive regions.
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 美国；加拿大；欧洲；香港、菲律宾、韩国、台湾、新加坡；日本；印度；南非；和中东地区——此类别排除了最昂贵的地区。
- en: United States, Canada, and Europe regions – This class is the least expensive.
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 美国、加拿大和欧洲地区——这个类别是最便宜的。
- en: In this section, we examined the services offered by the AWS CloudFront service
    and how it can be used to distribute your content globally over AWS backbone networks,
    offering lower latency and better performance.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了AWS CloudFront服务所提供的服务，以及它如何利用AWS骨干网络将您的内容全球分发，提供更低的延迟和更好的性能。
- en: In the next section, we provide a brief introduction to Amazon API Gateway,
    which allows you to architect serverless applications by creating, publishing,
    and managing REST, HTTP, and WebSocket APIs.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们简要介绍了Amazon API Gateway，它允许您通过创建、发布和管理REST、HTTP和WebSocket API来架构无服务器应用程序。
- en: Introduction to Amazon API Gateway
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon API Gateway介绍
- en: Amazon API Gateway helps you design application solutions that favor the microservices
    architecture in place of monolith designs. Your backend developers can build a
    series of microservices that work with each other. For example, in an e-commerce
    application, you can have several microservices, such as cart-service, catalog-service,
    user-profile and user-session services, inventory-management-service, and more.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon API Gateway帮助您设计应用程序解决方案，偏向微服务架构，而非单体设计。您的后端开发人员可以构建一系列相互协作的微服务。例如，在一个电子商务应用程序中，您可以拥有多个微服务，如购物车服务、目录服务、用户资料和用户会话服务、库存管理服务等。
- en: Without an API gateway, your frontend developer (who builds the frontend user
    interface) would need to be made aware of all the backend APIs and build the application
    to call several microservices, to provide complete functionality. Imagine, then,
    your backend developer later needs to refactor one of the microservices, such
    as splitting one microservice into two separate microservices, each with its own
    API. This would result in having to recode some components of the frontend user
    interface too.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有API网关，您的前端开发人员（负责构建前端用户界面）将需要了解所有后端API，并构建应用程序来调用多个微服务，以提供完整的功能。想象一下，如果您的后端开发人员之后需要重构其中一个微服务，例如将一个微服务拆分为两个独立的微服务，每个微服务都有自己的API，这将导致前端用户界面的一些组件也需要重新编码。
- en: With an API gateway, you essentially create an abstraction layer. This API gateway
    can be used to expose all the APIs that need to be made available to external
    clients to call backend services. Requests from those clients can then be routed
    to the various backend microservices. As per the following diagram, Amazon API
    Gateway acts as a "front door" for your applications to access backend data, Lambda
    functions, databases, and more. It handles all the incoming traffic and is capable
    of processing thousands of concurrent API calls.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 通过API网关，您本质上创建了一个抽象层。这个API网关可以用来公开所有需要向外部客户端提供调用后端服务的API。来自这些客户端的请求随后可以被路由到各种后端微服务。如以下图所示，Amazon
    API Gateway充当您的应用程序访问后端数据、Lambda函数、数据库等的“前门”。它处理所有进入的流量，并能够处理数千个并发的API调用。
- en: '![Figure 6.22 – Amazon API Gateway'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.22 – Amazon API Gateway'
- en: '](img/B17124_06_22.jpg)'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_22.jpg)'
- en: Figure 6.22 – Amazon API Gateway
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.22 – Amazon API Gateway
- en: Amazon API Gateway offers features that also help you protect your backend services,
    such as authorization, access control, and monitoring, and help protect backend
    resources from **Distributed Denial of Service** (**DDoS**) attacks.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon API Gateway 还提供了帮助你保护后台服务的功能，如授权、访问控制和监控，帮助保护后台资源免受**分布式拒绝服务**（**DDoS**）攻击。
- en: In terms of designing your software architecture, adding this abstraction layer
    creates an additional hop for your clients to access backend resources. To improve
    application responsiveness, Amazon API Gateway offers features to optimize your
    APIs such as response caching and payload compression.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计你的软件架构时，添加这一抽象层会为客户访问后台资源创建额外的跳跃。为了提高应用响应能力，Amazon API Gateway 提供了优化你的 API
    的功能，如响应缓存和有效载荷压缩。
- en: In this section, we provided a brief introduction to Amazon API Gateway, which
    is a fully managed service that enables you to create, publish, maintain, monitor,
    and secure APIs.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，我们简要介绍了 Amazon API Gateway，它是一个完全托管的服务，允许你创建、发布、维护、监控和保护 API。
- en: In the next section, you have the opportunity to build out your own Amazon VPC
    as part of the exercises in this chapter.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，你将有机会在本章练习中构建自己的 Amazon VPC。
- en: Exercise 6.1 – setting up a public subnet VPC
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习 6.1 – 设置公共子网 VPC
- en: 'In this exercise, you will create your own custom VPC that will contain a public
    subnet. In later chapters, you will expand this VPC to add private subnets for
    different use case:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，你将创建一个包含公共子网的自定义 VPC。在后续章节中，你将扩展这个 VPC，添加用于不同用例的私有子网：
- en: Log in to your AWS account as the IAM user `Alice` you created in [*Chapter
    4*](B17124_04_Final_SK_ePub.xhtml#_idTextAnchor068), *Identity and Access Management*.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到你的 AWS 账户，作为你在[*第 4 章*](B17124_04_Final_SK_ePub.xhtml#_idTextAnchor068)中创建的
    IAM 用户`Alice`，*身份与访问管理*。
- en: On the main AWS Management Console, search for `VPC` in the search box.![Figure
    6.23 – Configuring a new VPC
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主 AWS 管理控制台中，在搜索框中搜索`VPC`。![图 6.23 – 配置一个新的 VPC
- en: '](img/B17124_06_23.jpg)'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17124_06_23.jpg)'
- en: Figure 6.23 – Configuring a new VPC
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.23 – 配置一个新的 VPC
- en: Select **VPC** from the filtered list.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从过滤后的列表中选择**VPC**。
- en: VPCs are Region-specific, so make sure you select the US-East-1 Region from
    the top right-hand corner of the screen.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: VPC 是区域特定的，所以请确保从屏幕右上角选择 US-East-1 区域。
- en: On the main VPC console screen, click on the **Launch VPC Wizard** button. This
    will launch the VPC wizard.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主 VPC 控制台屏幕上，点击**启动 VPC 向导**按钮。这将启动 VPC 向导。
- en: Next, select the first option, **VPC with a Single Public Subnet.**
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择第一个选项，**带有单个公共子网的 VPC**。
- en: In *Step 2*, provide the following details for your VPC.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*步骤 2*中，为你的 VPC 提供以下详细信息。
- en: For `10.0.0.0/16`. This IP block represents your VPC network.
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`10.0.0.0/16`，此 IP 块表示你的 VPC 网络。
- en: For `ProductionVPC`.
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`ProductionVPC`。
- en: The wizard gets you to create a single public subnet. Later, you will expand
    this VPC for future use, but for now, set the `10.0.1.0/24`.
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向导引导你创建一个单独的公共子网。稍后，你将扩展这个 VPC 以供未来使用，但现在，请设置`10.0.1.0/24`。
- en: For **Availability Zone**, select **us-east-1a** from the drop-down list. Remember
    that while VPCs span the entire Region, each subnet you create spans a single
    Availability Zone. In this case, we are creating a single public subnet in **us-east-1a.**
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于**可用区**，从下拉列表中选择**us-east-1a**。请记住，尽管 VPC 跨越整个区域，但你创建的每个子网仅跨越一个可用区。在这种情况下，我们正在**us-east-1a**中创建一个单独的公共子网。
- en: Next, rename the subnet name to **Public Subnet One**.
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，将子网名称更改为**Public Subnet One**。
- en: 'Next, click the **Create VPC** button in the bottom right-hand corner of the
    screen. Review the following screenshot for the preceding steps:'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，点击屏幕右下角的**创建 VPC**按钮。查看以下截图以了解前面的步骤：
- en: '![Figure 6.24 – VPC with public subnet configuration page'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 6.24 – 带有公共子网的 VPC 配置页面'
- en: '](img/B17124_06_24.jpg)'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17124_06_24.jpg)'
- en: Figure 6.24 – VPC with public subnet configuration page
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.24 – 带有公共子网的 VPC 配置页面
- en: The wizard runs through the parameters you specified and creates your first
    VPC.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向导会根据你指定的参数运行，并创建你的第一个 VPC。
- en: Click **OK** on the **VPC Successfully Created** status page.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**OK**，进入**VPC 成功创建**状态页面。
- en: 'In the list of VPCs, you will note that your newly created **ProductionVPC**
    has been successfully created:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VPC 列表中，你会注意到你新创建的**ProductionVPC**已经成功创建：
- en: '![Figure 6.25 – Newly created ProductionVPC'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.25 – 新创建的 ProductionVPC'
- en: '](img/B17124_06_25.jpg)'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_06_25.jpg)'
- en: Figure 6.25 – Newly created ProductionVPC
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.25 – 新创建的 ProductionVPC
- en: In this section, we demonstrated how to create your first public subnet VPC
    using the AWS VPC wizard. Later in the training guide, you will expand the VPC
    to include private subnets and deploy servers within our VPCs.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们演示了如何使用 AWS VPC 向导创建第一个公共子网 VPC。之后，在培训指南中，你将扩展 VPC，包括私有子网，并在我们的 VPC 中部署服务器。
- en: Summary
  id: totrans-371
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter examined Amazon's core network services, comprising VPCs, Amazon's
    DNS service offering with Route53, and Amazon's CDN solution with Amazon CloudFront.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 Amazon 的核心网络服务，包括 VPC、Amazon 的 DNS 服务（Route53）以及 Amazon 的 CDN 解决方案（Amazon
    CloudFront）。
- en: In this chapter, you learned how computers communicate with each other via IP
    addresses. You also learned that using IP addressing and CIDR block ranges, you
    can build isolated networks and subnetworks. We then discussed how you can build
    the same network architecture in the cloud using the Amazon VPC service. As part
    of setting up your VPC, you examined the use cases to build private and public
    subnets and explored tools for defining security rules and limiting the types
    of traffic that can enter and leave your VPC. We also looked at additional VPC
    services that enable you to interconnect multiple VPCs using VPC peering and how
    to build complex connections more easily across VPCs using AWS Transit Gateway.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了计算机如何通过 IP 地址进行互相通信。你还了解到，通过使用 IP 地址和 CIDR 块范围，你可以构建隔离的网络和子网。接着，我们讨论了如何在云中使用
    Amazon VPC 服务构建相同的网络架构。在设置 VPC 的过程中，你检查了构建私有和公共子网的使用案例，并探索了定义安全规则和限制进出 VPC 的流量类型的工具。我们还看到了其他
    VPC 服务，它们使你能够通过 VPC 对等连接互连多个 VPC，并通过 AWS Transit Gateway 更轻松地在 VPC 之间构建复杂连接。
- en: Next, we learned about the AWS Route53 service, a DNS offering that provides
    domain name registration, a route policy configuration service, and health checks.
    You learned that by using a routing policy, you can customize your solutions for
    a wide range of use cases. These include offering an active-passive failover service
    with the Route53 latency routing policy, and the ability to slowly migrate your
    users from one resource to another using the weighted routing policy.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们学习了 AWS Route53 服务，它是一个 DNS 服务，提供域名注册、路由策略配置服务和健康检查。你了解到，通过使用路由策略，你可以根据广泛的使用案例定制解决方案。这些使用案例包括通过
    Route53 延迟路由策略提供主动-被动故障转移服务，并且通过加权路由策略，你可以逐步将用户从一个资源迁移到另一个资源。
- en: Finally, you learned about Amazon CloudFront and how to use AWS's edge locations
    to distribute your digital assets and content globally from a single Region over
    a high-speed low-latency connection.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你学习了 Amazon CloudFront 以及如何使用 AWS 的边缘位置，通过高速低延迟连接，从单一区域向全球分发数字资产和内容。
- en: In the next chapter, we will learn about the **Elastic Cloud Compute** (**EC2**)
    service and how you can deploy compute services such as virtual servers running
    Linux or Windows operating systems in the cloud.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习 **弹性云计算**（**EC2**）服务，以及如何在云中部署计算服务，例如运行 Linux 或 Windows 操作系统的虚拟服务器。
- en: Questions
  id: totrans-377
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which VPC component enables to you grant internet access to servers in the public
    subnet deployed in the VPC?
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 VPC 组件可以让你为 VPC 中部署在公共子网中的服务器授予互联网访问权限？
- en: NAT gateway
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: NAT 网关
- en: Internet gateway
  id: totrans-380
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Internet 网关
- en: VPC peering
  id: totrans-381
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: VPC 对等连接
- en: Security group
  id: totrans-382
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安全组
- en: Which of the following statements are true?
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个陈述是正确的？
- en: NACLs protect entire subnets, whereas security groups protect the individual
    instance.
  id: totrans-384
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: NACLs 保护整个子网，而安全组保护单个实例。
- en: NACLs protect the individual instance, whereas security groups protect the entire
    subnet.
  id: totrans-385
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: NACLs 保护单个实例，而安全组保护整个子网。
- en: NACLs enable instances in the private subnet to access the internet and act
    as a NAT device, whereas security groups are used to assign IAM policies to servers
    that need access to S3 buckets.
  id: totrans-386
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: NACLs 使私有子网中的实例能够访问互联网，并充当 NAT 设备，而安全组则用于将 IAM 策略分配给需要访问 S3 存储桶的服务器。
- en: NACLs enable instances in the private subnet to access the internet and act
    as a NAT device, whereas security groups are used to assign IAM policies to servers
    that need access to S3 buckets.
  id: totrans-387
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: NACLs 使私有子网中的实例能够访问互联网，并充当 NAT 设备，而安全组则用于将 IAM 策略分配给需要访问 S3 存储桶的服务器。
- en: Which AWS service enables you to purchase and register new domain names that
    can be used to publish your website on the internet?
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 AWS 服务允许你购买并注册新域名，用于在互联网上发布你的站点？
- en: Route53
  id: totrans-389
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Route53
- en: VPC
  id: totrans-390
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: VPC
- en: RDS
  id: totrans-391
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: RDS
- en: Elastic Beanstalk
  id: totrans-392
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Elastic Beanstalk
- en: Which AWS service enables you to distribute your digital assets such that it
    is cached locally to users who attempt to access this content for a time to live,
    and thus helps to reduce network latency?
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 AWS 服务可以让你分发你的数字资产，使其在尝试访问此内容的用户本地缓存，并具有生存时间，从而有助于减少网络延迟？
- en: AWS CloudFront
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS CloudFront
- en: AWS CloudTrail
  id: totrans-395
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS CloudTrail
- en: AWS CloudWatch
  id: totrans-396
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS CloudWatch
- en: AWS CloudScape
  id: totrans-397
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS CloudScape
- en: Your organization hosts multiple AWS accounts with multiple VPCs. You would
    like to connect these VPCs together and centrally manage connectivity policies.
    Which AWS service enables you to connect multiple VPCs configured as a hub that
    controls how traffic is routed among all the connected networks, which act like
    spokes?
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的组织拥有多个 AWS 账户和多个 VPC。你希望将这些 VPC 连接在一起，并集中管理连接策略。哪个 AWS 服务可以让你将多个 VPC 配置为一个中心节点，并控制所有连接网络之间的流量路由，这些网络就像辐射的轮辐？
- en: AWS Transit Gateway
  id: totrans-399
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Transit Gateway
- en: AWS Global Accelerator
  id: totrans-400
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Global Accelerator
- en: AWS VPC Peering
  id: totrans-401
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS VPC Peering
- en: AWS Virtual Private Gateway
  id: totrans-402
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS 虚拟私人网关
- en: Which AWS service enables you to grant internet access to EC2 instances configured
    with IPv4, and located in the private subnet of your VPC?
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 AWS 服务可以让你为配置了 IPv4 的 EC2 实例提供互联网访问，这些实例位于 VPC 的私有子网中？
- en: Egress-only internet gateway
  id: totrans-404
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出口专用互联网网关
- en: NAT gateway
  id: totrans-405
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: NAT 网关
- en: VPC endpoint
  id: totrans-406
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: VPC 端点
- en: VPN tunnel
  id: totrans-407
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: VPN 隧道
- en: You company has a primary production website in the US and a DR site in Sydney.
    You need to configure DNS such that if your primary site becomes unavailable,
    you can fail DNS over to the secondary site. Which DNS routing policy can you
    configure to achieve this?
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的公司在美国有一个主要的生产网站，在悉尼有一个灾备站点。你需要配置 DNS，使得如果主站点不可用时，可以将 DNS 故障转移到次要站点。你可以配置哪个
    DNS 路由策略来实现这一点？
- en: Weighted Routing
  id: totrans-409
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加权路由
- en: Geolocation Routing
  id: totrans-410
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 地理位置路由
- en: Latency Routing
  id: totrans-411
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 延迟路由
- en: Failover Routing
  id: totrans-412
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 故障转移路由
- en: You plan to set up DNS failover using Amazon Route53\. Which feature of Route53
    can you use to test your web application's availability and reachability?
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你计划使用 Amazon Route53 设置 DNS 故障转移。你可以使用 Route53 的哪个功能来测试你的 Web 应用的可用性和可达性？
- en: Private DNS
  id: totrans-414
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 私有 DNS
- en: CloudWatch
  id: totrans-415
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: CloudWatch
- en: Health checks
  id: totrans-416
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 健康检查
- en: DNS ping
  id: totrans-417
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: DNS ping
- en: Which VPC firewall solution enables you to deny inbound traffic from a specific
    IP address, which can be used to prevent malicious attacks?
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 VPC 防火墙解决方案可以让你拒绝来自特定 IP 地址的入站流量，用于防止恶意攻击？
- en: AWS Firewall
  id: totrans-419
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS 防火墙
- en: AWS Security Groups
  id: totrans-420
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS 安全组
- en: AWS **Network Access Control Lists** (**NACLs**)
  id: totrans-421
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS **网络访问控制列表** (**NACLs**)
- en: AWS CloudFront
  id: totrans-422
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS CloudFront
- en: Which AWS service enables you to connect your private data center to your Amazon
    VPC with up to 100 Gbps network connectivity?
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 AWS 服务可以让你通过高达 100 Gbps 的网络连接，将私有数据中心连接到你的 Amazon VPC？
- en: Snowball
  id: totrans-424
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Snowball
- en: Direct Connect
  id: totrans-425
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Direct Connect
- en: '**Virtual Private Network** (**VPN**)'
  id: totrans-426
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**虚拟私人网络** (**VPN**)'
- en: '**Virtual Satellite Network** (**VSN**)'
  id: totrans-427
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**虚拟卫星网络** (**VSN**)'
