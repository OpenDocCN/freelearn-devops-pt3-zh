- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Extending the Reach of CI/CD Pipelines
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展 CI/CD 流水线的应用范围
- en: In this chapter, we aim to extend the reach of CI/CD pipelines into common automation
    use cases. By the end of this chapter, you should have an idea of what’s possible
    with CI/CD pipelines. You’ll see that they are not necessarily just for build
    and deployment tasks, but also automation tasks, which make the job of an engineer
    easier, repeatable, and more reliable. CI/CD pipelines are always meant to ease
    the burden of work on an engineer so that they can focus on more novel and important
    tasks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在扩展 CI/CD 流水线在常见自动化用例中的应用。到本章结束时，你应该对 CI/CD 流水线的可能性有所了解。你会发现，它们不仅仅用于构建和部署任务，还能用于自动化任务，从而让工程师的工作更加轻松、可重复和可靠。CI/CD
    流水线的目标始终是减轻工程师的工作负担，使他们能够专注于更具创新性和重要性的任务。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Using CI/CD pipelines to spot performance problems
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CI/CD 流水线发现性能问题
- en: Integrating third-party tools into your CI/CD pipelines
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将第三方工具集成到 CI/CD 流水线中
- en: Using CI/CD pipelines for developing mobile apps
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CI/CD 流水线开发移动应用
- en: Using CI/CD pipelines to spot performance problems
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CI/CD 流水线发现性能问题
- en: There is no better time to do performance testing than during an automated CI/CD
    pipeline. With performance tests, you want them to be routine and against a stable
    unchanging environment or deployment. If you run performance tests against an
    environment or deployment that constantly changes, you will not have reliable
    results. Without reliable results, the entire notion of performance tests goes
    out the window. You want to understand how your changes affect your performance;
    without stable results, you can’t infer that understanding.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 没有比在自动化的 CI/CD 流水线中进行性能测试更合适的时机了。对于性能测试，测试应该是例行的，并且针对稳定、不变的环境或部署。如果你对一个不断变化的环境或部署进行性能测试，你将无法获得可靠的结果。没有可靠的结果，性能测试的整个意义就丧失了。你希望了解你的更改如何影响性能；没有稳定的结果，你就无法得出这种理解。
- en: With GitLab, there are multiple ways to run performance tests. For web or API-based
    deployments, GitLab includes a native performance tool that will cover in this
    chapter and go over its integration. However, you, the end user, can take this
    a step further and cover more metrics such as CPU/memory/storage usage in a CI/CD
    pipeline. We will not be covering how to collect these metrics in this chapter
    since that is unique to every user’s environment. However, we strongly recommend
    that you capture these metrics as part of your CI/CD pipeline.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 GitLab，有多种方式可以运行性能测试。对于基于 Web 或 API 的部署，GitLab 包含一个原生的性能测试工具，本章将介绍该工具并讲解其集成方式。不过，作为最终用户，你可以更进一步，涵盖更多的指标，如
    CPU/内存/存储使用情况，并将其融入 CI/CD 流水线中。我们本章不会讲解如何收集这些指标，因为这对每个用户的环境都是独特的。然而，我们强烈建议你将这些指标作为
    CI/CD 流水线的一部分进行捕捉。
- en: 'GitLab’s native integrated performance testing tool for API and web-based deployments
    will check numerous metrics for active deployment. Some of those metrics include
    page load time, first page paint time, and total blocking time. In a merge request
    (pictured in the following screenshot) you can see how your code changes will
    impact the performance of the web/API deployment:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 针对 API 和基于 Web 的部署提供的原生集成性能测试工具，将检查活跃部署的众多指标。这些指标包括页面加载时间、首屏渲染时间和总阻塞时间。在合并请求中（见下图），你可以看到代码更改如何影响
    Web/API 部署的性能：
- en: '![Figure 10.1: Performance metrics view in a merge request](img/B18073_10_1.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.1：合并请求中的性能指标视图](img/B18073_10_1.jpg)'
- en: 'Figure 10.1: Performance metrics view in a merge request'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1：合并请求中的性能指标视图
- en: Always double-check your testing criteria
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 始终仔细检查你的测试标准
- en: Your testing results are going to be directly dependent on your testing criteria,
    test settings, and environments. You should always question if your testing criteria,
    settings, and environments are accurate. You should never assume they are accurate.
    If they are not accurate, your test results will never be accurate.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你的测试结果将直接依赖于你的测试标准、测试设置和环境。你应该始终质疑你的测试标准、设置和环境是否准确，绝不能假设它们是准确的。如果它们不准确，你的测试结果也永远不会准确。
- en: How to integrate browser performance testing
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何集成浏览器性能测试
- en: Integrating browser performance testing is quite easy – you just need to include
    the GitLab templates as part of your CI/CD pipeline and then instruct GitLab where
    your API or web deployment can be accessed. See the following example.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 集成浏览器性能测试非常简单——只需将 GitLab 模板作为 CI/CD 管道的一部分，并指示 GitLab 如何访问您的 API 或 Web 部署。请参见以下示例。
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With the preceding job template, we’re invoking the `browser_performance:` templates
    from GitLab. Then, we’re overwriting the `URL` variable of the job. This URL is
    what tells the Performance Testing Suite where to reach out and scan our application
    for performance. With this configuration, GitLab will check our application and
    report the results back to our merge request.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的作业模板中，我们调用了 GitLab 中的 `browser_performance:` 模板。然后，我们重写了作业的 `URL` 变量。这个
    URL 告诉性能测试套件去哪里访问并扫描我们的应用程序的性能。通过这个配置，GitLab 将检查我们的应用程序，并将结果报告到我们的合并请求中。
- en: How to integrate load performance testing with k6
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何将负载性能测试与 k6 集成
- en: The second type of testing that is used in GitLab CI/CD by default is load testing
    with a tool named k6, provided by the company Grafana. GitLab provides a template
    for running this tool as part of your CI/CD pipeline as well. However, there is
    an additional step of creating and specifying a k6 configuration file to run a
    proper k6 load test.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab CI/CD 默认使用的第二种测试类型是负载测试，使用的是由 Grafana 公司提供的名为 k6 的工具。GitLab 还提供了一个模板，可以将该工具作为
    CI/CD 管道的一部分运行。然而，创建并指定一个 k6 配置文件来执行适当的 k6 负载测试是一个额外的步骤。
- en: 'We’re going to go over this process here. Before we do, note that you should
    never run these load tests in production. Production load tests should run on
    an identical non-production environment. To get accurate load testing results,
    the load testing tool should be the only item communicating with your environment.
    Without further ado, let’s integrate load testing. Add the following code to your
    `.``gitlab-ci.yml` file:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里讲解这个过程。在此之前，请注意绝对不要在生产环境中运行这些负载测试。生产环境的负载测试应在一个与生产环境完全相同的非生产环境中运行。为了获得准确的负载测试结果，负载测试工具应该是与您的环境通信的唯一项目。事不宜迟，让我们开始集成负载测试。将以下代码添加到您的
    `.gitlab-ci.yml` 文件中：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding code will execute k6 as part of our pipeline. However, now, we
    need to inform k6 how to test our application and provide GitLab with a test file
    to run. We’re going to assume that this file lives at the`.gitlab/test/k6.js`
    path. We’re going to walk through how to build this file.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码将作为我们管道的一部分执行 k6。不过，现在我们需要告知 k6 如何测试我们的应用程序，并为 GitLab 提供一个测试文件来运行。我们假设这个文件位于
    `.gitlab/test/k6.js` 路径。接下来我们将一步步讲解如何构建这个文件。
- en: 'The following code is going to load the libraries and functions that will affect
    our load test. Without these, the remainder of our load test file will fail. Next,
    we’re going to add our settings:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将加载影响我们负载测试的库和函数。如果没有这些，负载测试文件的其余部分将会失败。接下来，我们将添加我们的设置：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following code is going to define the options for our test. For 5 minutes,
    we’re going to ramp up to 100 users accessing the website. Then, we’re going to
    hold at 100 users for 10 minutes. Finally, over 5 minutes, we’re going to ramp
    down to 0 users. That means this test will run for 20 minutes in total:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将定义我们测试的选项。在 5 分钟内，我们将逐步增加到 100 个用户访问网站。然后，我们将保持 100 个用户访问 10 分钟。最后，在 5
    分钟内，我们将逐步减少到 0 个用户。这意味着此测试将总共运行 20 分钟：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Then, we must set the threshold for failure. We want to see 99% of all requests
    respond within 1,500 milliseconds. Anything outside that will fail. Next, we’re
    going to execute the actual load test.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们必须设置失败的阈值。我们希望看到 99% 的所有请求在 1500 毫秒内响应。任何超出此范围的请求都将失败。接下来，我们将执行实际的负载测试。
- en: 'The following code will execute our performance tests using k6 against our
    website. With this file now being successfully built, we can execute our pipeline
    and have repeatable load tests:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将使用 k6 执行我们的网站性能测试。现在这个文件已经成功构建，我们可以执行我们的管道并进行可重复的负载测试：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: With the performance testing set up, we’re going to shift our focus to how to
    utilize feature flags to enable and disable parts of our application after deployment.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好性能测试后，我们将把注意力转向如何利用功能标志在部署后启用和禁用应用程序的部分功能。
- en: Using feature flags to allow business-driven release decisions
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用功能标志来支持以业务为驱动的发布决策
- en: 'GitLab comes with the ability to set up feature flags in the UI. It is based
    on the *third-party* `unleash` library. Once you set up the feature flags in the
    GitLab UI, you will need to set up your application to communicate with GitLab
    to check for feature flags. We’ll cover examples of both of these steps, but GitLab
    does not do this for you: it is up to your application developers to do this work.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 提供了在 UI 中设置功能标志的功能。它基于*第三方* `unleash` 库。一旦在 GitLab UI 中设置了功能标志，您需要配置应用程序与
    GitLab 通信以检查功能标志。我们将介绍这两个步骤的示例，但 GitLab 不会为您完成这项工作：这项工作需要由您的应用程序开发人员来做。
- en: 'Once the feature flags have been configured in the UI, an API call from the
    application is necessary to check the flag and change the logic of the application
    accordingly. Let’s walk through how to set up the feature flags in the UI:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在 UI 中配置了功能标志，就需要通过应用程序发出 API 调用来检查标志，并相应地更改应用程序的逻辑。让我们来看看如何在 UI 中设置功能标志：
- en: 'In a project, open the navigation pane on the left-hand side. Click **Deployments**
    | **Feature Flags**. This will take you to the main feature flag section. In the
    top right, click **New feature flag**. This will take you to a new view:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目中，打开左侧的导航窗格。点击**部署** | **功能标志**。这将带您进入主要的功能标志部分。在右上角，点击**新建功能标志**。这将带您进入一个新的视图：
- en: '![Figure 10.2: Feature Flags in GitLab’s navigation pane](img/B18073_10_2.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.2：GitLab 导航窗格中的功能标志](img/B18073_10_2.jpg)'
- en: 'Figure 10.2: Feature Flags in GitLab’s navigation pane'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2：GitLab 导航窗格中的功能标志
- en: 'You will be presented with a form. Fill it out and plan your strategies accordingly.
    You can set multiple strategies based on environments, user lists, and user IDs,
    and assign percentages to different groups. Once submitted, it will look like
    this:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到一个表单。填写表单并根据需要规划策略。您可以根据环境、用户列表和用户 ID 设置多个策略，并为不同的组分配百分比。提交后，界面将如下所示：
- en: '![Figure 10.3: Main feature flag view](img/B18073_10_3.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.3：主要功能标志视图](img/B18073_10_3.jpg)'
- en: 'Figure 10.3: Main feature flag view'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3：主要功能标志视图
- en: 'Feature flags are exceptionally powerful when launching new features. By placing
    a new feature behind a feature flag, you can turn off part of your application
    by toggling a flag. This can help prevent a rollback of a release or an emergency
    support ticket:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 功能标志在推出新功能时极其强大。通过将新功能放在功能标志后面，您可以通过切换标志来关闭应用程序的一部分。这有助于防止回滚发布或紧急支持工单：
- en: '![Figure 10.4: Feature Flags detail view](img/B18073_10_4.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.4：功能标志详细视图](img/B18073_10_4.jpg)'
- en: 'Figure 10.4: Feature Flags detail view'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4：功能标志详细视图
- en: In *Figure 10**.4*, you can see the presence of our newly created feature flag.
    On the left-hand side, under **Status**, you can see a checkbox, which is used
    to enable or disable this flag.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 10.4*中，您可以看到我们新创建的功能标志。在左侧的**状态**下，您可以看到一个复选框，用于启用或禁用该标志。
- en: How to configure your application for feature flags
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何为功能标志配置您的应用程序
- en: 'In this section, we’re going to cover a single use case for checking feature
    flags in an application. The following is a Ruby code sample that will check for
    feature flags and toggle a code path based on the flag that is set. Your team’s
    application developers will need to set up their applications based on their toolchains
    and language usage:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将介绍一个检查应用程序中的功能标志的用例。以下是一个 Ruby 代码示例，它将检查功能标志并根据设置的标志切换代码路径。您的团队应用程序的开发人员需要根据他们的工具链和语言使用情况设置应用程序：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this Ruby example, you begin by setting the GitLab information, including
    the URL of the GitLab instance, the app’s name (corresponding to the environment
    in GitLab), and the instance ID (the numeric ID of your GitLab project).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个 Ruby 示例中，首先设置 GitLab 信息，包括 GitLab 实例的 URL、应用程序的名称（与 GitLab 中的环境对应）以及实例 ID（GitLab
    项目的数字 ID）。
- en: The `user_id` parameter is an example of passing information to GitLab. In this
    example, we’re passing a user ID that GitLab will match with your feature flag
    strategy if configured. The next step is invoking `unclear.is_enabled`, which
    accepts a feature name as a variable, then reaches out to GitLab to determine
    if you are in the group that has the flag enabled. Then, the code path that is
    enabled will be executed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`user_id` 参数是向 GitLab 传递信息的示例。在这个例子中，我们传递了一个用户 ID，GitLab 会将其与配置好的功能标志策略进行匹配。下一步是调用
    `unclear.is_enabled`，它接受功能名称作为变量，然后联系 GitLab 确定您是否属于已启用标志的组。接着，将执行启用的代码路径。'
- en: Now that we’ve covered the usage and purpose of feature flags, we’re going to
    work on how to integrate third-party tools into your CI/CD pipelines.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了功能标志的使用和目的，我们将继续讲解如何将第三方工具集成到CI/CD管道中。
- en: Integrating third-party tools into your CI/CD pipelines
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将第三方工具集成到CI/CD管道中
- en: In this section, we’re going to cover how to integrate third-party tools into
    a CI/CD pipeline. The preferred method to integrate a third-party tool into a
    CI/CD pipeline is to containerize it, create a CI/CD job that uses that container,
    and then invoke our tool as part of that job. In many cases, this is a requirement
    and is the first step in setting up an integration.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍如何将第三方工具集成到CI/CD管道中。将第三方工具集成到CI/CD管道中的首选方法是将其容器化，创建一个使用该容器的CI/CD作业，然后在该作业中调用我们的工具。在许多情况下，这是必需的，并且是设置集成的第一步。
- en: Tool format expectations
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 工具格式要求
- en: This section is based on the belief that the tool you want to integrate is already
    compiled and ready to be integrated into your pipeline. In the event it is not,
    you can add CI jobs before those mentioned here to compile or assemble the tool.
    Then, you can invoke the CI jobs and steps in this section.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 本节假设你想集成的工具已经编译好并准备好集成到你的管道中。如果它尚未准备好，你可以在此处提到的作业之前添加CI作业，以编译或组装该工具。然后，你可以调用本节中的CI作业和步骤。
- en: Creating our tool container’s Dockerfile
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建我们的工具容器的Dockerfile
- en: In the previous chapter, we discussed how to build purpose-built containers.
    We’re going to use that method here to integrate your tool. If you haven’t read
    the *Securing and accelerating jobs with purpose-built containers* section of
    the previous chapter yet, we highly recommend that you read it first and then
    come back.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了如何构建专用容器。我们将在这里使用这种方法来集成你的工具。如果你还没有阅读上一章中的*使用专用容器保护和加速作业*部分，强烈建议你先阅读它，然后再回来。
- en: The first step in this process is to set up a new GitLab project for your tool
    and container. Once you have this set up, commit the binaries, configuration,
    and other files you wish to be placed in the container. The next step is building
    the container and placing those items inside of it. Create a Dockerfile in your
    repository and add the following sample code. `$mybinary` is a placeholder for
    your binary’s filename; `myTool` will be your tool’s name.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程的第一步是为你的工具和容器设置一个新的GitLab项目。一旦设置好后，将二进制文件、配置文件和你希望放入容器中的其他文件提交到该项目。下一步是构建容器并将这些内容放入其中。在你的仓库中创建一个Dockerfile，并添加以下示例代码。`$mybinary`是你的二进制文件名的占位符；`myTool`将是你的工具的名称。
- en: 'As shown in the following code, we have created a new container derived from
    `alpine:3.13.0`. We updated the container, then created a directory for our tool.
    After that directory was created, we added all the files in our repository to
    that folder, permissioned them with a wide permission, and set our binary as executable:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下代码所示，我们已经创建了一个从`alpine:3.13.0`派生的新容器。我们更新了容器，然后为我们的工具创建了一个目录。在创建该目录后，我们将仓库中的所有文件添加到该文件夹，并赋予它们宽泛的权限，同时将我们的二进制文件设置为可执行：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is a simplified example of how to integrate a third-party tool. You should
    always customize the permission’s values to the least privilege necessary to run
    your tool. You should also only put the files required for your tool to run in
    the container. For this example, we’re casting a wide net and including everything,
    as well as wide permissions.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简化的集成第三方工具的示例。你应该始终将权限值自定义为运行工具所需的最小权限。你还应该只将工具运行所需的文件放入容器中。在这个示例中，我们采取了宽泛的方式，包含了所有文件，并赋予了宽泛的权限。
- en: Automating our container’s build
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化容器构建
- en: 'Now that we have a Dockerfile, we want to build the container. As a bonus,
    we’re also going to turn on container scanning. Create a `.gitlab-ci.yml` file
    in your repository if you haven’t already. We’re going to populate that `.gitlab-ci.yml`
    file with the following code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个Dockerfile，我们需要构建容器。作为额外的操作，我们还将启用容器扫描。如果你还没有创建`.gitlab-ci.yml`文件，请在你的仓库中创建一个。接下来，我们将用以下代码填充该`.gitlab-ci.yml`文件：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Avoiding a pipeline run on every commit
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 避免每次提交时触发管道运行
- en: When making multiple pipeline changes, you may not want to kick off a pipeline
    run every time you make a change. If you start your commit message with `[CI SKIP]`,
    GitLab will not start a pipeline for that commit.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行多次管道更改时，你可能不希望每次修改时都启动一个管道运行。如果你在提交信息开头添加`[CI SKIP]`，GitLab将不会为该提交启动管道。
- en: 'The preceding code is the most basic example of a Docker-in-Docker build. First,
    we utilize `image: docker:20.10.16` to define the version of Docker we want to
    build against. Then, we define the Docker service we want to build with – that
    is, the `dind` container. Next, we set the `DOCKER_HOST` and `DOCKER_TLS_VERIFY`
    variables so that the Docker and `dind` containers can talk to each other. Finally,
    we invoke the `docker build` command to build our container, and the `docker push`
    command to upload it to GitLab’s container registry.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '上述代码是 Docker-in-Docker 构建的最基本示例。首先，我们利用 `image: docker:20.10.16` 来定义我们希望构建的
    Docker 版本。然后，我们定义要使用的 Docker 服务——即 `dind` 容器。接着，我们设置 `DOCKER_HOST` 和 `DOCKER_TLS_VERIFY`
    变量，以便 Docker 和 `dind` 容器能够互相通信。最后，我们调用 `docker build` 命令来构建我们的容器，使用 `docker push`
    命令将其上传到 GitLab 的容器注册表中。'
- en: GitLab Runner requirements for Docker
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab Runner 对 Docker 的要求
- en: Building a Docker container typically requires the usage of a GitLab Runner
    capable of doing Docker-in-Docker container builds. GitLab.com shared Runners
    come with this capability preconfigured. If you’re using a self-hosted Runner,
    you may need to reconfigure it. Refer to the GitLab documentation for how to achieve
    this.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 Docker 容器通常需要使用能够执行 Docker-in-Docker 容器构建的 GitLab Runner。GitLab.com 提供的共享
    Runner 已预先配置了此功能。如果你使用的是自托管 Runner，可能需要重新配置它。请参考 GitLab 文档了解如何实现这一点。
- en: Container scanning
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器扫描
- en: 'GitLab offers container scanning as part of the container-building process.
    We want to take advantage of this to identify any dependency or other vulnerabilities
    with our container. Enabling this is simple: you need to have a test stage defined
    in your `.gitlab-ci.yml` file. Then, simply add the following code block to the
    top of your `.``gitlab-ci.yml` file:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 在容器构建过程中提供容器扫描功能。我们希望利用这一点来识别容器中的任何依赖关系或其他漏洞。启用此功能非常简单：你只需要在 `.gitlab-ci.yml`
    文件中定义一个测试阶段。然后，只需将以下代码块添加到 `.gitlab-ci.yml` 文件的顶部：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Invoking the third-party tool
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用第三方工具
- en: 'At this point, we should have a container with our third-party tool built,
    scanned, and placed inside the GitLab container registry. All that is left now
    is to invoke our tool. We can do this by creating a CI/CD job that’s pointing
    to our container and calling our executable in the container:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 到这个步骤，我们应该已经有了一个构建好的第三方工具容器，经过扫描并存放在 GitLab 容器注册表中。现在剩下的就是调用我们的工具。我们可以通过创建一个指向我们容器并在容器内调用可执行文件的
    CI/CD 任务来实现：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: So far, we’ve walked through how to build a container with tools, how to scan
    a container, and how to invoke that tool via a CI/CD job. This is a basic example
    to show you the art of what is possible. With this process, you can clone third-party
    tools, custom scripts, custom configurations, or whatever else you want to include
    as part of your CI/CD pipeline.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讲解了如何构建包含工具的容器，如何扫描容器以及如何通过 CI/CD 任务调用该工具。这是一个基本示例，向你展示了可能实现的艺术。通过这个过程，你可以克隆第三方工具、自定义脚本、自定义配置或任何其他你想在
    CI/CD 管道中包含的内容。
- en: There are major benefits to doing this. For example, any container that runs
    as part of a CI/CD pipeline has access to the GitLab API and GitLab repository.
    This means you can run a CI/CD job as part of your pipeline for something such
    as metrics collection or configuration verification as well. CI/CD jobs built
    in this way can automate almost anything.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做有很多重大好处。例如，任何作为 CI/CD 管道一部分运行的容器都可以访问 GitLab API 和 GitLab 仓库。这意味着你可以将 CI/CD
    任务作为管道的一部分运行，用于度量收集或配置验证等。以这种方式构建的 CI/CD 任务几乎可以自动化任何操作。
- en: If you build and containerize a custom tool, be sure to share it with the community.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你构建并容器化了一个自定义工具，务必与社区共享它。
- en: In the next section, we’re going to discuss how to build mobile applications
    using GitLab CI/CD and Fastlane.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将讨论如何使用 GitLab CI/CD 和 Fastlane 构建移动应用。
- en: Using CI/CD pipelines for developing mobile apps
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CI/CD 管道开发移动应用
- en: In this section, we’re going to discuss how to set up CI/CD pipelines in GitLab
    for mobile application development. There are many benefits to automating the
    mobile development process at the packaging stage, most notably the fact that
    packaging a mobile application involves multiple certificates, entitlements, and
    configuration files, which take a substantial amount of time to assemble when
    packaging an application. In addition to that, the testing process around mobile
    applications can be manual and tedious. By automating things such as screenshots
    across multiple devices, we can shave hours off a developer’s workload.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何在 GitLab 中为移动应用程序开发设置 CI/CD 管道。自动化移动开发过程的打包阶段有很多好处，最显著的是，打包移动应用程序涉及多个证书、授权和配置文件，在打包应用程序时需要花费大量时间来组装这些文件。除此之外，移动应用程序的测试过程可能是手动且繁琐的。通过自动化跨多个设备的截图等操作，我们可以大大减少开发人员的工作量。
- en: This section assumes you have all the requirements listed next configured and
    working already. We’re not going to cover how to do mobile development, but rather
    how to automate your mobile development practices using Fastlane and GitLab.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 本节假设您已经配置并使下列所有要求正常工作。我们不会讨论如何进行移动开发，而是如何使用 Fastlane 和 GitLab 自动化您的移动开发实践。
- en: Requirements
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要求
- en: 'For this section, you will need the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节，您将需要以下内容：
- en: A macOS device or VM running the latest version of OS X, with Fastlane installed
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台运行最新版本 OS X 的 macOS 设备或虚拟机，并已安装 Fastlane
- en: GitLab Runner installed on your macOS device
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的 macOS 设备上安装 GitLab Runner
- en: An Apple developer account
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Apple 开发者账户
- en: A Google developer account
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Google 开发者账户
- en: An application that can be built successfully on your macOS device
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一款可以在您的 macOS 设备上成功构建的应用程序
- en: Read this before proceeding
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前请阅读此内容
- en: If you can’t meet these requirements, you should stop here until you can. This
    guide assumes you have a working, provisioned macOS device. It also assumes you
    can build a mobile application on the device.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您无法满足这些要求，您应停止并等待能够满足这些要求后再继续。本指南假设您已经拥有一台可用且配置好的 macOS 设备，并且能够在设备上构建移动应用程序。
- en: Fastlane
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fastlane
- en: In this chapter, we’re going to be utilizing the Fastlane CLI tool to automate
    our tests, builds, and deployments. Fastlane is a tool that works with both Android
    and iOS build processes. It is an opensource tool that can be installed for free
    on macOS and Windows platforms. You can read more about it in the Fastlane documentation
    located at [https://docs.fastlane.tools/getting-started/ios/setup/](https://docs.fastlane.tools/getting-started/ios/setup/).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 Fastlane CLI 工具来自动化我们的测试、构建和部署。Fastlane 是一款同时支持 Android 和 iOS 构建流程的工具。它是一个开源工具，可以在
    macOS 和 Windows 平台上免费安装。您可以在 [https://docs.fastlane.tools/getting-started/ios/setup/](https://docs.fastlane.tools/getting-started/ios/setup/)
    阅读更多关于它的文档。
- en: 'We’re going to assume you have Fastlane installed on your machine. If not,
    please refer to the Fastlane documentation linked previously for your platform.
    The first step in this process is to open your mobile application project and
    create a Fastlane configuration file named `Fastfile`. Fastfile is the primary
    configuration file used by Fastlane. We’re going to make our Fastfile look like
    this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您已经在机器上安装了 Fastlane。如果没有，请参考之前链接的 Fastlane 文档，选择适合您的平台进行安装。此过程的第一步是打开您的移动应用程序项目，并创建一个名为
    `Fastfile` 的 Fastlane 配置文件。Fastfile 是 Fastlane 使用的主要配置文件。我们将使我们的 Fastfile 看起来像这样：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To build our mobile application for both iOS and Android, we simply need to
    run the `fastlane beta` command. Assuming your iOS and Android applications can
    already be built on the macOS device, this command should automate their building.
    We can put this into a GitLab CI file like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 iOS 和 Android 构建我们的移动应用程序，我们只需运行 `fastlane beta` 命令。假设您的 iOS 和 Android 应用程序已经可以在
    macOS 设备上构建，那么此命令应自动化它们的构建。我们可以将其放入 GitLab CI 文件中，如下所示：
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This GitLab CI job will automate the Fastlane process via GitLab pipelines.
    We are leveraging the `tags:` keyword to ensure that this build happens on a specific
    macOS device. Without this keyword, the build could happen on any GitLab Runner.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此 GitLab CI 作业将通过 GitLab 管道自动化 Fastlane 过程。我们利用 `tags:` 关键字确保此构建发生在特定的 macOS
    设备上。如果没有这个关键字，构建可能会发生在任何 GitLab Runner 上。
- en: Fastlane – deployment
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fastlane – 部署
- en: 'You can deploy your mobile application to the Android and Apple stores. However,
    you will need to set up all mobile certificates for production use before setting
    up Fastlane. When those certificates expire, someone will need to update them
    on the macOS device. Nevertheless, if they have been set up, you can modify your
    `Fastfile` like this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将移动应用程序部署到 Android 和 Apple 商店。然而，在设置 Fastlane 之前，你需要先为生产环境配置所有移动证书。当这些证书过期时，必须有人在
    macOS 设备上更新它们。不过，如果这些证书已经配置好，你可以像下面这样修改你的 `Fastfile`：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding additions to your Fastfile will build your application and release
    it to the respective app stores. You simply need to run the `Fastlane appstore`
    and `Fastlane playstore` commands. A corresponding GitLab CI/CD configuration
    file would look like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 之前对 Fastfile 的修改将构建你的应用程序并发布到相应的应用商店。你只需运行 `Fastlane appstore` 和 `Fastlane playstore`
    命令。相应的 GitLab CI/CD 配置文件如下所示：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Fastlane – automated testing
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fastlane – 自动化测试
- en: 'Assuming you have unit tests set up for your projects already, Fastlane can
    automate those as well. It does not automatically set up the tests, but if you
    have them built as part of your project’s configuration, Fastlane can invoke them.
    This process is similar to every step before – we begin with Fastfile modifications,
    as seen in the following example:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经为项目设置了单元测试，Fastlane 也可以自动化这些测试。它不会自动设置测试，但如果你已经将它们作为项目配置的一部分，Fastlane 就可以调用它们。这个过程与之前的每一步类似
    – 我们从修改 Fastfile 开始，如下所示：
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Just like before, we can amend our GitLab CI/CD configuration file to add automated
    testing as well:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前一样，我们可以修改我们的 GitLab CI/CD 配置文件，加入自动化测试：
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: At times, using Fastlane may feel like you’re cheating. Once you have an established
    mobile project on a device, Fastlane can take it from there. Mobile development
    before Fastlane was a tedious and manual process. CI/CD pipelines were filled
    with a large amount of code and logic to make a build happen and then be deployed.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，使用 Fastlane 可能会让你感觉像是在作弊。一旦你在设备上建立了一个移动项目，Fastlane 就能接管剩下的工作。在 Fastlane 出现之前，移动开发是一个繁琐且手动的过程。CI/CD
    管道充满了大量的代码和逻辑，用来生成构建并进行部署。
- en: 'In this section, we discussed how to build a Fastfile to configure Fastlane,
    how to run Fastlane commands, and, most importantly, how to add them to a GitLab
    CI/CD configuration file. We’ve said it before, but in closing, it’s worth repeating:
    Fastlane and automating mobile development with GitLab CI/CD pipelines is best
    suited for a macOS device that is already provisioned and set up to build a mobile
    application. Start there, and then use GitLab CI and Fastlane to handle the rest.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了如何构建 Fastfile 来配置 Fastlane，如何运行 Fastlane 命令，以及最重要的，如何将它们添加到 GitLab
    CI/CD 配置文件中。我们之前提到过这一点，但最后再次强调：Fastlane 和使用 GitLab CI/CD 管道自动化移动开发最适合已经配置并设置好以构建移动应用程序的
    macOS 设备。从那里开始，然后使用 GitLab CI 和 Fastlane 处理其余部分。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the benefits of including performance checks inside
    your CI/CD pipeline. We also covered how to include GitLab’s native performance
    testing tools. Following that, we covered the benefits of feature flags and how
    they can protect your deployments and prevent time-consuming rollbacks. Then,
    we moved on to integrating third-party tools as part of your CI/CD pipeline and
    how to containerize them for use. Finally, we walked through how to automate the
    creation and deployment of mobile applications using Fastlane.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了在 CI/CD 管道中加入性能检查的好处。我们还讨论了如何包含 GitLab 的本地性能测试工具。接下来，我们介绍了功能标志的好处，以及它们如何保护你的部署并防止耗时的回滚。然后，我们介绍了如何将第三方工具集成到你的
    CI/CD 管道中，并如何将它们容器化以供使用。最后，我们讲解了如何使用 Fastlane 自动化创建和部署移动应用程序。
- en: In the next chapter, we’re going to cover an end-to-end example that leverages
    everything you’ve learned about in this book.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将介绍一个端到端的示例，涵盖本书中所学到的所有内容。
