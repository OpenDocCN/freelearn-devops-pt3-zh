- en: <st c="0">1</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Principles of Continuous Testing, Quality, Security, and Feedback</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="67">This chapter explains how the continuous strategies are essential
    for digital transformations that utilize continuous development practices known
    as Agile, continuous delivery practices known as DevOps and DevSecOps, and continuous
    operations practices known</st> <st c="327">as</st> **<st c="330">Site Reliability</st>**
    **<st c="347">Engineering</st>** <st c="358">(</st>**<st c="360">SRE</st>**<st
    c="363">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="366">In this chapter, we’ll cover the following</st> <st c="410">main
    topics:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="422">Introducing continuous testing, continuous quality, continuous security,
    and</st> <st c="500">continuous feedback</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="519">Defining continuous testing, quality, security,</st> <st c="568">and
    feedback</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="580">The guiding principles and pillars of</st> <st c="619">continuous
    testing</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="637">The guiding principles and pillars of</st> <st c="676">continuous
    quality</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="694">The guiding principles and pillars of</st> <st c="733">continuous
    security</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="752">The guiding principles and pillars of</st> <st c="791">continuous
    feedback</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="810">Let’s</st> <st c="817">get started!</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="829">Introducing continuous testing, quality, security, and feedback</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="893">This</st> <st c="899">section introduces</st> <st c="917">the key
    foundational</st> <st c="939">concepts</st> <st c="947">and historical context
    for modern continuous testing, quality, security, and feedback strategies.</st>
    <st c="1046">It also explains why DevOps, DevSecOps, and SRE practices drive the
    need for continuous testing, quality, security,</st> <st c="1162">and feedback.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1175">Foundations for testing, quality, security, and feedback</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="1232">Testing, quality, security, and</st> <st c="1265">feedback have
    been integral to software</st> <st c="1304">development, delivery, and</st> <st
    c="1332">operations since</st> <st c="1348">the inception of software.</st> *<st
    c="1376">Figure 1</st>**<st c="1384">.1</st>* <st c="1386">and the following paragraphs
    depict some historical examples that</st> <st c="1453">highlight this.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Early examples of testing, quality, security, and feedback](img/B21936_01_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="1588">Figure 1.1 – Early examples of testing, quality, security, and
    feedback</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="1659">Testing and quality – ENIAC (1940s)</st>**<st c="1695">: Even</st>
    <st c="1702">with the first general-purpose electronic computer, ENIAC, testing
    and debugging were crucial.</st> <st c="1798">The machine had to be meticulously
    programmed and tested for each new task, a process that often took days.</st>
    <st c="1906">This early example underscores the importance of testing for quality
    assurance</st> <st c="1985">in software.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="1997">Security – The Morris Worm (1988)</st>**<st c="2031">: The Morris
    Worm, one of the first recognized worms to affect the</st> <st c="2098">world’s
    nascent internet infrastructure, highlighted the need for attention to security
    in software design.</st> <st c="2207">It exploited known vulnerabilities, which
    underscored the importance of security in networking and</st> <st c="2306">software
    development.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2327">Feedback – IBM’s early software development (1950s–1960s)</st>**<st
    c="2385">: In the early days of commercial</st> <st c="2420">software, institutions
    and companies such as IBM realized the importance of customer feedback in software
    development.</st> <st c="2539">Feedback from users helped shape the evolution
    of software products, making them more user-friendly and aligned with</st> <st
    c="2656">business needs.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2671">However, the traditional methods had some drawbacks.</st> <st c="2725">Let’s
    look at</st> <st c="2739">them next.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2749">The weaknesses of traditional testing, quality, security, and feedback
    strategies</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="2831">The historical</st> <st c="2846">examples of</st> <st c="2859">ENIAC,
    the Morris Worm, and IBM’s early software development</st> <st c="2920">highlight
    key weaknesses in traditional approaches to testing, quality, security, and</st>
    <st c="3006">feedback in</st> <st c="3018">software development:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="3039">Testing and quality – ENIAC (1940s)</st>**<st c="3075">: With</st>
    <st c="3082">ENIAC, testing and debugging were manual and time-consuming.</st>
    <st c="3144">Each new task required meticulous programming and testing, demonstrating
    the inefficiency of traditional testing methods in the face of complex tasks.</st>
    <st c="3295">The absence of automated testing tools and integrated testing practices
    meant that ensuring quality was a labor-intensive process, significantly slowing
    down development</st> <st c="3465">and deployment.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="3480">Security – The Morris Worm (1988)</st>**<st c="3514">: Traditional
    approaches often treated security as an afterthought.</st> <st c="3583">The Morris
    Worm exploited known vulnerabilities, highlighting the weakness of reactive security
    measures in contrast to the need for proactive security practices.</st> <st c="3746">Security
    was not integrated into the software development life cycle.</st> <st c="3816">The
    incident underscored the importance of considering security at every stage of</st>
    <st c="3897">development, from design</st> <st c="3923">to deployment.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="3937">Feedback – IBM’s early software development (1950s–1960s)</st>**<st
    c="3995">: Traditional software development often suffered from delayed feedback
    loops.</st> <st c="4075">Feedback was typically collected post-release, limiting
    the ability to make user-centric improvements during the development phase.</st>
    <st c="4207">There was a lack of continuous engagement with</st> <st c="4254">users
    during the development process.</st> <st c="4292">Feedback was not systematically
    integrated into the development cycle, leading to products that might not fully
    align with user needs</st> <st c="4426">or expectations.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4442">These historical examples illustrate key weaknesses in</st> <st
    c="4498">traditional approaches:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="4521">Testing and quality</st>**<st c="4541">: Manual, time-consuming
    testing methods, lack of automation, and a failure to integrate testing into the
    development</st> <st c="4660">life cycle.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="4671">Security</st>**<st c="4680">: A reactive approach to security,
    treating it as an afterthought rather than an integral part of the</st> <st c="4783">development
    process.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="4803">Feedback</st>**<st c="4812">: Delayed feedback mechanisms and
    a lack of continuous user engagement, leading to a</st> <st c="4898">disconnect
    between software development and</st> <st c="4942">user requirements.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4960">Now, let’s consider how testing, quality, security, and feedback
    evolved as software frameworks became</st> <st c="5064">more continuous.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5080">The evolution of testing, quality, security and feedback toward
    continuous strategies</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="5166">The evolution</st> <st c="5180">of software development, delivery,
    and operations toward continuous development, delivery, and operation methodologies
    such as Agile, DevOps, DevSecOps, and SRE was driven by several key factors and</st>
    <st c="5380">industry trends:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="5396">An increasing demand for speed and agility</st>**<st c="5439">:
    As markets and technology rapidly evolved, businesses faced growing pressure to
    deliver products and services faster.</st> <st c="5560">This need for speed led
    to the adoption of Agile methodologies, which focus on iterative development,
    flexibility, and fast delivery</st> <st c="5693">of software.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="5705">A shift from a project to a product mindset</st>**<st c="5749">:
    Traditional software development was often project-based, with a clear start and
    end.</st> <st c="5838">However, the industry shifted toward a product mindset,
    where software is continuously developed, improved, and maintained.</st> <st c="5962">This
    ongoing nature of software products necessitated methodologies such as Agile</st>
    <st c="6044">and DevOps.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="6055">The complexity of modern software systems</st>**<st c="6097">:
    The increasing complexity of software systems, with distributed architectures
    such as microservices, demanded more collaborative and integrated approaches.</st>
    <st c="6256">DevOps emerged as a response, emphasizing collaboration between</st>
    **<st c="6320">development</st>** <st c="6331">(</st>**<st c="6333">Dev</st>**<st
    c="6336">),</st> **<st c="6340">quality</st>** <st c="6347">(</st>**<st c="6349">QA</st>**<st
    c="6351">),</st> **<st c="6355">security</st>** <st c="6363">(</st>**<st c="6365">Sec</st>**<st
    c="6368">), and</st> **<st c="6376">operations</st>** <st c="6386">(</st>**<st
    c="6388">Ops</st>**<st c="6391">) teams.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="6400">Need for faster release cycles</st>**<st c="6431">: With growing
    competition and technological advancements, the ability to release updates and
    features quickly became a competitive advantage.</st> <st c="6575">This led</st>
    <st c="6584">to the adoption of</st> **<st c="6603">Continuous Integration</st>**<st
    c="6625">/</st>**<st c="6627">Continuous Delivery</st>** <st c="6646">(</st>**<st
    c="6648">CI/CD</st>**<st c="6653">) practices within</st> <st c="6673">DevOps
    frameworks.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="6691">The rise of cloud computing and automation</st>**<st c="6734">:
    The advent of cloud computing and the increasing availability of automation tools
    allowed for more efficient and scalable software development, delivery, and operations
    processes.</st> <st c="6917">These technologies are fundamental to DevOps, DevSecOps,
    and</st> <st c="6978">SRE practices.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="6992">Growing importance of security</st>**<st c="7023">: With the
    rise in cyber threats and security breaches, integrating security into the software
    development life cycle became crucial.</st> <st c="7158">DevSecOps evolved from
    DevOps by incorporating Sec as a key component from the outset of</st> <st c="7247">development
    projects.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="7268">Focus on reliability and user experience</st>**<st c="7309">:
    As user expectations for reliability and performance grew, there was a shift in
    focus toward ensuring that software is not only delivered quickly but also reliably.</st>
    <st c="7477">This led to the emergence of SRE, which blends aspects of software
    engineering with IT operations to create scalable and highly reliable</st> <st
    c="7614">software systems.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="7631">Feedback and continuous improvement</st>**<st c="7667">: The
    need for continuous feedback from</st> <st c="7708">users and rapid adaptation
    to this feedback became paramount.</st> <st c="7770">Agile, DevOps, and SRE methodologies
    all emphasize continuous monitoring, feedback, and improvement to align software
    products more closely with user needs and</st> <st c="7930">business goals.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="7945">Cultural and organizational shifts</st>**<st c="7980">: These
    methodologies also represent a cultural shift in how organizations view software
    development, delivery, and operations.</st> <st c="8109">They promote collaborative,
    cross-functional teams, a fail-fast mindset, and an emphasis on continuous learning</st>
    <st c="8221">and improvement.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8237">The evolution to Agile, DevOps, DevSecOps, and SRE has been driven
    by the need for faster, more efficient, and more reliable software delivery in
    a rapidly changing technological landscape.</st> <st c="8428">These methodologies
    address the increasing complexity of software systems, the need for speed and
    reliability, the integration of security into the development process, and the
    importance of continuous feedback</st> <st c="8639">and improvement.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8655">The historical examples presented in this section demonstrate that,
    from the earliest days of computing, strategies for testing, quality, security,
    and feedback have been critical components of software development, delivery,
    and operations.</st> <st c="8898">These strategies have evolved with the evolution
    of technology but have always been integral to the development, delivery, and
    maintenance of reliable, secure, and</st> <st c="9062">user-centered software.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9085">Weaknesses of traditional strategies for testing, quality, security,
    and feedback led to the evolution of more integrated, automated, and user-centric
    methodologies in software development, such as Agile, DevOps, and DevSecOps, which
    aim to address these shortcomings by embedding testing, quality assurance, security,
    and feedback deeply and</st> <st c="9428">continuously into the software</st>
    <st c="9460">life cycle.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9471">The next section will explain how original strategies for testing,
    quality, security, and feedback have evolved to keep pace with the modern era
    of continuous development, delivery,</st> <st c="9654">and operations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9669">Evolution toward continuous testing, quality, security, and feedback</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="9738">The advent of Agile, DevOps, DevSecOps, and SRE practices has necessitated
    a significant evolution in the testing, quality, security, and feedback strategies.</st>
    <st c="9898">This evolution, illustrated in</st> *<st c="9929">Figure 1</st>**<st
    c="9937">.2</st>*<st c="9939">, is driven by changes in technology, business needs,
    and the continuous approach to software development, delivery,</st> <st c="10056">and
    operations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Continuous testing, quality, security, and feedback](img/B21936_01_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="10219">Figure 1.2 – Continuous testing, quality, security, and feedback</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10283">Let’s explore the specific attributes of testing, quality, security,
    and feedback strategies that needed to evolve to</st> <st c="10402">become “continuous”:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="10422">Testing in the context of Agile, DevOps, DevSecOps,</st>**
    **<st c="10475">and SRE</st>**<st c="10482">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="10484">Faster release cycles</st>**<st c="10505">: Traditional</st>
    <st c="10519">testing methods were too slow for the rapid deployment cycles in
    DevOps.</st> <st c="10593">CI/CD pipelines required automated, more frequent,
    and more sophisticated testing strategies to ensure that new features and updates
    could be deployed quickly without</st> <st c="10760">compromising quality.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="10781">Shift-left testing</st>**<st c="10800">: DevOps advocates for</st>
    *<st c="10824">shifting left</st>* <st c="10837">in the software development life
    cycle, meaning</st> <st c="10886">testing begins much earlier in the process.</st>
    <st c="10930">This shift ensures that defects are caught and addressed sooner,
    reducing costs</st> <st c="11010">and time-to-market.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="11029">Reliability and availability</st>**<st c="11058">: In SRE,
    the focus is on the reliability, availability, and performance of</st> <st c="11134">services.</st>
    <st c="11145">Testing here includes not just functional testing but also load,
    performance, and resilience testing to ensure the system can handle</st> <st c="11278">real-world
    scenarios.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="11299">Quality in the era of Agile, DevOps, DevSecOps,</st>** **<st
    c="11348">and SRE</st>**<st c="11355">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="11357">A user-centric focus</st>**<st c="11377">: The rapid and iterative
    nature of DevOps requires a user-centric approach to</st> <st c="11457">quality.</st>
    <st c="11466">Features and updates are rolled out continually, and the quality
    of these increments directly impacts</st> <st c="11568">user experience.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="11584">Monitoring and performance metrics</st>**<st c="11619">: SRE
    places significant emphasis on using real-time monitoring and performance metrics</st>
    <st c="11707">to maintain and improve the quality of services.</st> <st c="11757">These
    metrics are vital for making data-driven decisions about</st> <st c="11820">system
    improvements.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="11840">Security in the context of Agile, DevOps, DevSecOps,</st>**
    **<st c="11894">and SRE</st>**<st c="11901">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="11903">Continuous security</st>**<st c="11922">: The</st> <st c="11928">traditional
    model of addressing security at the end of the software development life cycle
    is not viable in a fast-paced DevOps environment.</st> <st c="12070">DevSecOps
    integrates security into every stage of the development process, while SecOps
    integrates security protections in products; together, they ensure</st> <st c="12225">continuous
    security.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="12245">Automated security testing</st>**<st c="12272">: Automation
    in</st> <st c="12289">security testing is crucial in DevSecOps and SecOps.</st>
    <st c="12342">Tools that automatically scan original and third-party code for
    vulnerabilities are integrated into the CI/CD pipeline, allowing you to immediately
    detect and remediate security issues.</st> <st c="12528">Also included is the
    automation of penetration testing and tools that monitor and protect operating
    software in production to identify and mitigate security intrusions, enabling
    an improved defense of deployed software systems</st> <st c="12755">in production.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="12769">Compliance as code</st>**<st c="12788">: In</st> <st c="12794">DevSecOps,
    compliance requirements are codified so that they can be automatically and consistently
    enforced throughout the development and operations</st> <st c="12944">life cycle.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="12955">Feedback in the context of Agile, DevOps, DevSecOps,</st>**
    **<st c="13009">and SRE</st>**<st c="13016">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="13018">A continuous feedback loop</st>**<st c="13044">: DevOps, DevSecOps,
    and SRE practices thrive on a continuous feedback loop</st> <st c="13120">between
    development, operations, and the user.</st> <st c="13168">This feedback is crucial
    for the rapid iteration of software delivery and deployment to</st> <st c="13256">production
    operations.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="13278">Blameless postmortems</st>**<st c="13300">: SRE practices</st>
    <st c="13316">such as conducting blameless postmortems after incidents facilitate
    a culture of learning and improvement.</st> <st c="13424">This approach allows
    teams to understand what went wrong and how to prevent it in the future, without
    focusing on</st> <st c="13538">individual faults.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="13556">Cross-functional collaboration</st>**<st c="13587">: Feedback
    in these methodologies is not just about user input but also involves</st> <st
    c="13668">cross-functional team collaboration.</st> <st c="13706">Sharing insights
    and knowledge between development, operations, security, and other stakeholders
    is key to improving processes</st> <st c="13833">and outcomes.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="13846">Figure 1</st>**<st c="13855">.3</st>* <st c="13857">illustrates
    the relationships between continuous testing, quality, security, and feedback
    relative to continuous development (Agile), continuous delivery (DevOps and DevSecOps),
    and continuous operations (SRE).</st> <st c="14069">The figure shows that continuous
    testing, quality, and security are active during the development, delivery, and
    operations phases.</st> <st c="14201">It also shows that results from each phase,
    resulting from these strategies, provide continuous feedback data that affects
    the continuous iterations of</st> <st c="14353">each phase.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – The continuous testing, quality, security, and feedback relationships](img/B21936_01_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="14464">Figure 1.3 – The continuous testing, quality, security, and feedback
    relationships</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14546">The evolution of testing, quality, security, and feedback in the
    context of DevOps, DevSecOps, and SRE reflects a broader shift in software development
    and operations.</st> <st c="14715">This shift is toward more continuous, integrated,
    automated, and user-focused practices, aimed at delivering high-quality, secure
    software at a faster pace and with</st> <st c="14880">greater reliability.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14900">Defining continuous testing, quality, security, and feedback</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="14961">This section explains the importance of defining continuous testing,
    quality, security, and feedback and the challenges associated with doing so, followed
    by practical definitions for continuous testing, quality, security,</st> <st c="15185">and
    feedback.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15198">The need for definitions of testing, quality, security, and feedback</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="15267">There are no</st> <st c="15281">standard definitions for continuous
    testing, quality, security, and</st> <st c="15349">feedback, just as there are
    no standard definitions for DevOps, DevOps, or</st> <st c="15424">SRE.</st> <st
    c="15429">However, defining continuous testing, quality, security, and</st> <st
    c="15489">feedback within the context of an organization’s transformation to mature
    DevOps, DevSecOps, and SRE practices is crucial for several reasons.</st> <st
    c="15633">Definitions provide a foundation to establish metrics and measure the
    performance and progress for people, processes, and technologies dimensions of
    holistic digital transformations.</st> <st c="15816">The importance, potential
    benefits, and consequences of having (or not having) these clear definitions are
    explained in</st> <st c="15936">this section.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15949">The importance of definitions</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="15979">Let’s</st> <st c="15985">understand</st> <st c="15997">why</st>
    <st c="16000">definitions</st> <st c="16013">are</st> <st c="16016">important:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="16027">A basis for measurement</st>**<st c="16051">: Clear definitions
    allow organizations to establish specific, measurable criteria to evaluate the
    effectiveness of their practices.</st> <st c="16185">This is essential for</st>
    <st c="16207">continuous improvement.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="16230">Common understanding</st>**<st c="16251">: Definitions ensure
    that everyone involved has a common understanding of what is expected, reducing
    ambiguities and misalignments</st> <st c="16383">across teams.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="16396">Goal alignment</st>**<st c="16411">: Well-defined concepts
    help align the goals of various teams (development, operations, and security)
    toward a unified objective, crucial in collaborative environments such as DevOps</st>
    <st c="16595">and DevSecOps.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="16609">The benefits of clear definitions</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="16643">Let’s</st> <st c="16649">look</st> <st c="16654">at</st> <st c="16658">the
    benefits</st> <st c="16671">of</st> <st c="16674">definitions:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="16686">Performance tracking</st>**<st c="16707">: With clear definitions,
    organizations can track the performance of their DevOps, DevSecOps, or SRE initiatives
    over time, identifying areas of success and those</st> <st c="16871">needing improvement.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="16891">Improved collaboration</st>**<st c="16914">: Definitions facilitate
    better communication and collaboration between teams, as everyone operates with
    a shared understanding of</st> <st c="17046">key concepts.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="17059">Focused training and development</st>**<st c="17092">: Definitions
    enable targeted training and development efforts, focusing on specific areas identified
    through these definitions</st> <st c="17221">and metrics.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="17233">Enhanced process optimization</st>**<st c="17263">: Organizations
    can more effectively identify</st> <st c="17310">and implement process</st> <st
    c="17332">optimizations, leading to</st> <st c="17357">increased efficiency, reduced</st>
    <st c="17387">costs, and</st> <st c="17399">higher-quality output.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="17421">The consequences of a lack of clear definitions</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="17469">Next, we'll understand what happens when objectives are not</st>
    <st c="17530">clearly defined:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="17546">Measurement challenges</st>**<st c="17569">: Without clear
    definitions, it becomes challenging to measure and assess the effectiveness of
    DevOps, DevSecOps, and SRE practices, leading to potential inefficiencies and</st>
    <st c="17743">unaddressed problems.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="17764">Misaligned goals</st>**<st c="17781">: Ambiguities can lead
    to misaligned goals and expectations among teams, resulting in conflicts and</st>
    <st c="17882">reduced synergy.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="17898">Ineffective resource allocation</st>**<st c="17930">: Unclear
    definitions make it difficult to identify where resources should be allocated
    for maximum impact, potentially leading to wasted effort</st> <st c="18076">and
    investment.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="18091">Reduced accountability</st>**<st c="18114">: It becomes harder
    to hold teams and individuals accountable for their roles and responsibilities
    in the absence of well-defined criteria</st> <st c="18254">for success.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="18266">Clear and unambiguous definitions of continuous testing, quality,
    security, and feedback provide the necessary groundwork to set and measure performance
    metrics, ensuring everyone is aligned toward common goals and facilitating continuous
    improvement.</st> <st c="18519">The lack of such definitions can hinder the progress
    toward maturing practices in</st> <st c="18601">these areas.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18613">The challenges of defining continuous testing, quality, security,
    and feedback</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="18692">Standardizing the definitions of continuous testing, quality,
    security, and feedback is a challenging task for any organization, due to the
    dynamic and varied nature of software development and deployment environments.</st>
    <st c="18912">While these processes can be broadly defined, their implementation
    and implications are not bound by absolute characteristics.</st> <st c="19039">After
    all, there is no such thing as 100% testing, quality, security, or feedback.</st>
    <st c="19122">These aspects are always relative to specific objectives and contexts.</st>
    <st c="19193">Here are</st> <st c="19202">the challenges:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19217">The challenges of defining</st>** **<st c="19245">continuous
    testing</st>**<st c="19263">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="19265">Varied testing needs</st>**<st c="19285">: The</st> <st c="19291">scope
    and method of software testing vary greatly, depending on the type of software,
    its intended use, user base, and the development methodology employed.</st> <st
    c="19449">For instance, testing for a safety-critical system such as aviation
    software differs vastly from testing a consumer</st> <st c="19565">mobile application.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="19584">Evolving technologies</st>**<st c="19606">: As technology evolves,
    so do the testing methodologies.</st> <st c="19665">New paradigms such as AI and
    IoT bring new testing challenges that were not considered in traditional</st>
    <st c="19767">testing frameworks.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="19786">The challenges of defining</st>** **<st c="19814">continuous
    quality</st>**<st c="19832">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="19834">Subjective nature</st>**<st c="19851">: Quality is</st> <st
    c="19865">inherently subjective and can be viewed differently by different stakeholders.</st>
    <st c="19944">For a developer, it might mean code readability and maintainability,
    while for end users, it’s about usability</st> <st c="20055">and performance.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="20071">Context-dependent</st>**<st c="20089">: The quality standards
    for a rapidly developed prototype may not be the same as for a mature, customer-facing
    product.</st> <st c="20210">The context of development and deployment plays a
    crucial role in determining what</st> <st c="20293">constitutes quality.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="20313">The challenges of defining</st>** **<st c="20341">continuous
    security</st>**<st c="20360">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="20362">Changing threat landscape</st>**<st c="20387">: The</st> <st
    c="20394">landscape of cybersecurity threats is continually evolving.</st> <st
    c="20454">What is considered secure today may not be secure tomorrow, making it
    impossible to achieve</st> <st c="20546">absolute security.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="20564">Risk management</st>**<st c="20580">: Security is often about
    managing risk rather than eliminating it.</st> <st c="20649">Different applications
    require different levels of security, based on their exposure to threats and the
    sensitivity of the data</st> <st c="20777">they handle.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="20789">Challenges of defining</st>** **<st c="20813">continuous feedback</st>**<st
    c="20832">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="20834">Diverse sources and interpretations</st>**<st c="20869">: Feedback</st>
    <st c="20881">can come from various sources (users, stakeholders, and automated
    systems) and can be interpreted in many ways.</st> <st c="20993">What is valuable
    feedback in one scenario might be irrelevant</st> <st c="21055">in another.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="21066">Continuous adaptation</st>**<st c="21088">: Feedback mechanisms
    must adapt to the changing needs and expectations of users and the market.</st>
    <st c="21186">This means that the process of gathering and implementing feedback
    is never complete and always subject</st> <st c="21290">to change.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21300">While processes of testing, quality, security, and feedback for
    continuous delivery and continuous operations can be defined, they do not possess
    absolute characteristics.</st> <st c="21473">They are highly context-dependent
    and must be aligned with specific objectives, technological environments, and
    user expectations.</st> <st c="21604">This inherent variability and the need for
    constant adaptation make it challenging to standardize these concepts across all
    software development and</st> <st c="21753">operation scenarios.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21773">A definition of continuous testing, quality, security, and feedback</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="21841">In the dynamic field of software engineering, particularly with
    continuous delivery (DevOps and DevSecOps) practices and continuous operation
    (SRE) practices, it’s crucial to focus on outcomes rather than just process actions.</st>
    <st c="22069">Many existing definitions tend to concentrate excessively on procedural
    aspects, overlooking the importance of aligning with business outcomes.</st> <st
    c="22213">A more practical and useful approach involves defining strategies for
    continuous testing, continuous quality, continuous security, and continuous feedback
    in a way that emphasizes measurable business outcomes.</st> <st c="22423">These
    outcomes, particularly aligned</st> <st c="22459">with the</st> **<st c="22469">DevOps
    Research Association’s</st>** <st c="22498">(</st>**<st c="22500">DORA’s</st>**<st
    c="22506">) metrics, are critical in assessing the efficiency and success of software
    development practices.</st> <st c="22606">With these considerations in mind, the
    following definitions can be used in</st> <st c="22682">this document:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="22696">A continuous testing definition</st>**<st c="22728">: Continuous
    testing is a strategy designed to reduce lead times and</st> <st c="22798">failure
    rates in continuous delivery pipelines and continuous operations, through automated
    and iterative testing processes, aiming for decreased time from code commit to
    production deployment and reduced failures</st> <st c="23012">in production:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="23026">Metrics</st>*<st c="23034">:</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23036">Time spent on testing tasks, from code commit to</st> <st c="23085">production
    deployment.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23107">The percentage of defects that escape</st> <st c="23146">to production.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="23160">Rationale</st>*<st c="23170">:</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23172">This definition integrates testing into every stage of development,
    delivery, and operations, ensuring early and consistent detection and resolution
    of issues, which is crucial for rapid and reliable software delivery</st> <st
    c="23390">and operations.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="23405">A continuous quality definition</st>**<st c="23437">: Continuous
    quality is a strategy to enhance user satisfaction and reduce</st> <st c="23512">production
    failure rates by integrating quality metrics throughout the development, delivery,
    and production processes, focusing on stable releases with fewer</st> <st c="23672">user
    issues:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="23684">Metrics</st>*<st c="23692">:</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23694">The rate of releases approved</st> <st c="23724">for deployment</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23738">Customer-reported issues</st> <st c="23764">per release</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23775">Availability level</st> <st c="23795">objectives (SLOs)</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="23812">Rationale</st>*<st c="23822">:</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23824">By prioritizing quality at every phase of development and operations,
    this strategy ensures the delivery of stable and reliable software, meeting user</st>
    <st c="23975">expectations and</st> <st c="23992">business needs.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="24007">A continuous security definition</st>**<st c="24040">: Continuous
    security is a strategy that integrates security measures</st> <st c="24110">into
    continuous development, delivery, and operations to reduce the frequency and impact
    of security events, measured by security events and security event</st> <st c="24267">resolution
    times:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="24284">Metrics</st>*<st c="24292">:</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="24294">The number of (pre- and post-release)</st> <st c="24332">security
    events</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="24347">The mean time to detect, respond, and resolve</st> <st c="24394">security
    events</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="24409">Rationale</st>*<st c="24419">:</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="24421">This strategy underscores proactive security practices, embedding
    security considerations into the entire software life cycle, essential for maintaining
    software integrity</st> <st c="24593">and trust.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="24603">A continuous feedback definition</st>**<st c="24636">: Continuous
    Feedback is a strategy that utilizes stakeholder and user</st> <st c="24707">feedback
    to accelerate release frequency and improve recovery times, measured by the implementation
    speed of feedback and its impact on</st> <st c="24844">system reliability:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="24863">Metrics</st>*<st c="24871">:</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="24873">Time to implement feedback (source</st> <st c="24908">to resolver)</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="24920">The rate of releases approved</st> <st c="24951">for deployment</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="24965">Customer-reported issues</st> <st c="24991">per release</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="25002">Availability level</st> <st c="25022">objectives (SLOs)</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="25039">Rationale</st>*<st c="25049">:</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="25051">A systematic</st> <st c="25064">collection and implementation
    of feedback ensure that the software continually evolves in response to user needs
    and market changes, driving</st> <st c="25205">continuous improvement.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="25228">Figure 1</st>**<st c="25237">.4</st>* <st c="25239">provides
    practical definitions for continuous testing, quality, security, and feedback,
    as used in</st> <st c="25339">this document.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Continuous testing, quality, security and feedback definitions](img/B21936_01_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="26353">Figure 1.4 – Continuous testing, quality, security and feedback
    definitions</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26428">Adopting these strategically focused definitions for continuous
    testing, quality, security, and feedback allows organizations to align their continuous
    development, delivery, and operations practices with measurable business outcomes.</st>
    <st c="26664">This approach not only provides a clear direction for continuous
    improvement but also ensures that the methodologies are evaluated and adjusted,
    based on their impact on key performance indicators.</st> <st c="26862">In the
    evolving landscape of software development, such outcome-driven strategies are
    indispensable to achieve efficiency, reliability, and success in</st> <st c="27013">digital
    transformations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27037">The guiding principles and pillars of continuous testing</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="27094">This</st> <st c="27100">section describes the guiding principles
    and pillars of practice that are important to support an effective continuous
    testing strategy.</st> <st c="27237">They are essential for ensuring that continuous
    testing effectively decreases the time from code commit to production deployment
    and reduces failures</st> <st c="27387">in production.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="27401">Figure 1</st>**<st c="27410">.5</st>* <st c="27412">illustrates
    the pillars of</st> <st c="27440">continuous testing.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – The continuous testing pillars](img/B21936_01_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="27672">Figure 1.5 – The continuous testing pillars</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27715">Let’s look at them</st> <st c="27735">in detail:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="27745">Test automation</st>**<st c="27761">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="27763">Principle</st>*<st c="27772">: Automation</st> <st c="27785">is
    key to achieving the</st> <st c="27809">speed and consistency required for continuous
    testing.</st> <st c="27865">Automated tests can be run frequently and consistently,
    ensuring rapid feedback on the health of</st> <st c="27962">the software.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="27975">Pillar</st>*<st c="27982">: Develop and maintain a suite of
    automated tests that cover a wide range of aspects, including unit, integration,
    regression, performance, security, system, and user</st> <st c="28150">acceptance
    testing.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="28169">Integration with a development</st>** **<st c="28201">life
    cycle</st>**<st c="28211">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="28213">Principle</st>*<st c="28222">: Testing should be</st> <st c="28242">integrated
    into the development process from the very beginning, not tacked on at</st> <st
    c="28325">the end.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="28333">Pillar</st>*<st c="28340">: Implement a shift-left approach,
    where testing starts early in the development cycle.</st> <st c="28429">This</st>
    <st c="28433">includes practices such</st> <st c="28457">as</st> **<st c="28461">Test-Driven
    Development</st>** <st c="28484">(</st>**<st c="28486">TDD</st>**<st c="28489">)
    and</st> **<st c="28496">Behavior-Driven</st>** **<st c="28512">Development</st>**
    <st c="28523">(</st>**<st c="28525">BDD</st>**<st c="28528">).</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="28531">Test feedback</st>**<st c="28545">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="28547">Principle</st>*<st c="28556">: Continuous</st> <st c="28570">feedback
    from</st> <st c="28584">testing is vital for the timely identification and resolution</st>
    <st c="28646">of issues.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="28656">Pillar</st>*<st c="28663">: Establish mechanisms for real-time
    reporting and analysis of test results, ensuring immediate action can be taken
    when issues are identified.</st> <st c="28808">Actions such as bug and vulnerability
    issue reports can</st> <st c="28864">be automated.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="28877">Testing metrics</st>**<st c="28893">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="28895">Principle</st>*<st c="28904">: Metrics</st> <st c="28915">and
    measurement are essential to understand the effectiveness of testing efforts and
    to guide</st> <st c="29009">continuous improvement.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="29032">Pillar</st>*<st c="29039">: Use a comprehensive set of quality
    metrics, such as defect density, test coverage, and mean time to resolution, to
    track and improve the</st> <st c="29179">testing process.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="29195">Risk-based testing</st>**<st c="29214">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="29216">Principle</st>*<st c="29225">: Focus</st> <st c="29234">testing
    efforts on the most critical aspects of the application, based on</st> <st c="29308">risk
    assessment.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="29324">Pillar</st>*<st c="29331">: Prioritize testing resources on
    areas with the highest risk or impact, such as critical functionality, performance
    bottlenecks, and</st> <st c="29466">security vulnerabilities.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="29491">Test environment and test</st>** **<st c="29518">data management</st>**<st
    c="29533">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="29535">Principle</st>*<st c="29544">: Reliable and consistent test
    environments</st> <st c="29588">and data are necessary for</st> <st c="29616">accurate
    testing.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="29633">Pillar</st>*<st c="29640">: Ensure the availability of stable,
    scalable, and production-like test environments, along with appropriate test data</st>
    <st c="29760">management strategies.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="29782">Collaboration</st>** **<st c="29797">and communication</st>**<st
    c="29814">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="29816">Principle</st>*<st c="29825">: Effective collaboration and communication</st>
    <st c="29869">among developers, testers, and operations teams are vital for the
    success of</st> <st c="29947">continuous testing.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="29966">Pillar</st>*<st c="29973">: Foster a</st> <st c="29984">culture
    of collaboration, where teams work together closely and share responsibility</st>
    <st c="30070">for quality.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="30082">Continuous learning</st>** **<st c="30103">and adaptation</st>**<st
    c="30117">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="30119">Principle</st>*<st c="30128">: Continuous testing is an</st>
    <st c="30155">evolving practice that should adapt to changing technologies and</st>
    <st c="30221">project requirements.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="30242">Pillar</st>*<st c="30249">: Regularly review and adapt testing
    strategies, tools, and processes to meet the</st> <st c="30332">evolving needs
    of the software and</st> <st c="30367">the business.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="30380">These guiding principles and pillars of practice form the foundation
    of a robust continuous testing strategy.</st> <st c="30491">They help ensure that
    testing is efficient, effective, and aligned with the overall goals of reducing
    lead times, minimizing failures in production, and ultimately delivering high-quality</st>
    <st c="30679">software promptly.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30697">The guiding principles and pillars of continuous quality</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="30754">This</st> <st c="30760">section describes the guiding principles
    and pillars of practice that are important to support an effective continuous</st>
    <st c="30879">quality strategy.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="30896">Figure 1</st>**<st c="30905">.6</st>* <st c="30907">illustrates
    the pillars of</st> <st c="30935">continuous quality.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – The continuous quality pillars](img/B21936_01_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="31178">Figure 1.6 – The continuous quality pillars</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31221">Let’s have</st> <st c="31233">a look</st> <st c="31240">at them:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="31248">User-centric focus</st>**<st c="31267">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="31269">Principle</st>*<st c="31278">: User</st> <st c="31285">satisfaction
    is a key indicator</st> <st c="31318">of quality.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="31329">Pillar</st>*<st c="31336">: Regularly gather and analyze user
    feedback, usability testing results, customer satisfaction metrics, and results
    from satisfaction surveys to guide</st> <st c="31488">quality improvements.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="31509">Integrated</st>** **<st c="31521">quality metrics</st>**<st
    c="31536">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="31538">Principle</st>*<st c="31547">: Quality</st> <st c="31558">should
    be measurable and integrated into every stage of the software</st> <st c="31627">life
    cycle.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="31638">Pillar</st>*<st c="31645">: Implement and continuously refine
    a set of quality metrics (such as defect rates, uptime, and performance benchmarks)
    across the development, delivery, and</st> <st c="31804">production phases.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="31822">Proactive</st>** **<st c="31833">quality assurance</st>**<st
    c="31850">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="31852">Principle</st>*<st c="31861">: Quality is not</st> <st c="31878">just
    about fixing defects; it’s about</st> <st c="31917">preventing them.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="31933">Pillar</st>*<st c="31940">: Employ proactive quality assurance
    practices, such as static code analysis, design reviews, and architectural evaluations,
    to identify and address potential issues early in the</st> <st c="32120">life
    cycle.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="32131">Continuous improvement</st>**<st c="32154">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="32156">Principle</st>*<st c="32165">: Quality is an</st> <st c="32181">evolving
    target that requires</st> <st c="32212">continuous improvement.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="32235">Pillar</st>*<st c="32242">: Foster a culture of continuous improvement
    with regular retrospectives and reviews of processes, tools, and practices to
    identify areas</st> <st c="32381">for enhancement.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="32397">Collaboration</st>** **<st c="32412">and communication</st>**<st
    c="32429">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="32431">Principle</st>*<st c="32440">: Quality</st> <st c="32451">is
    a collective responsibility</st> <st c="32481">that demands collaboration</st>
    <st c="32509">across teams.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="32522">Pillar</st>*<st c="32529">: Encourage cross-functional collaboration
    between developers, QA, operations, and business stakeholders to ensure a unified
    approach</st> <st c="32664">to quality.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="32675">Stable and</st>** **<st c="32687">reliable releases</st>**<st
    c="32704">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="32706">Principle</st>*<st c="32715">: The</st> <st c="32721">stability
    and reliability of releases</st> <st c="32760">are paramount.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="32774">Pillar</st>*<st c="32781">: Implement robust release management
    and deployment practices to ensure stable and reliable software releases with
    comprehensive testing</st> <st c="32920">and validation.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="32935">Risk management</st>**<st c="32951">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="32953">Principle</st>*<st c="32962">: Identifying</st> <st c="32977">and
    managing risk is crucial to</st> <st c="33009">maintaining quality.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="33029">Pillar</st>*<st c="33036">: Conduct regular risk assessments
    and prioritize efforts based on the potential impact on user satisfaction and</st>
    <st c="33150">system stability.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="33167">Quality Assurance (</st>****<st c="33187">QA) automation</st>**<st
    c="33202">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="33204">Principle</st>*<st c="33213">: Automation is</st> <st c="33230">essential
    for scaling quality</st> <st c="33260">assurance practices.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="33280">Pillar</st>*<st c="33287">: Utilize automated testing and quality
    assurance tools to increase coverage and efficiency, while freeing up resources
    to focus on complex</st> <st c="33428">quality</st> <st c="33436">challenges.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="33447">These guiding principles and pillars of practice define a comprehensive
    approach to continuous quality.</st> <st c="33552">By focusing on integrating
    quality metrics, emphasizing user satisfaction, promoting proactive quality assurance,
    and fostering continuous improvement, organizations can effectively enhance the
    overall quality of their software products, leading to fewer production failures
    and higher</st> <st c="33838">user satisfaction.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33856">The guiding principles and pillars of continuous security</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="33914">This section</st> <st c="33928">describes the guiding principles
    and pillars of practice that are important to support an effective continuous</st>
    <st c="34039">security strategy.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="34057">Figure 1</st>**<st c="34066">.7</st>* <st c="34068">illustrates
    the pillars of</st> <st c="34096">continuous security.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7 – The continuous security pillars](img/B21936_01_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="34398">Figure 1.7 – The continuous security pillars</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34442">Let’s look at them</st> <st c="34462">in brief:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="34471">DevSecOps culture</st>**<st c="34489">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="34491">Principle</st>*<st c="34500">: Collaboration</st> <st c="34516">between</st>
    <st c="34525">development, security, and operations enhances</st> <st c="34572">security
    outcomes.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="34590">Pillar</st>*<st c="34597">: Promote a DevSecOps culture where
    security is a shared responsibility, integrated into the DevOps practices, encouraging
    collaboration and communication</st> <st c="34753">across teams.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="34766">Security awareness</st>** **<st c="34786">and training</st>**<st
    c="34798">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="34800">Principle</st>*<st c="34809">: Security is a</st> <st c="34826">shared
    responsibility and requires awareness at</st> <st c="34874">all levels.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="34885">Pillar</st>*<st c="34892">: Provide regular security training
    and awareness programs for all team members to foster a security-conscious culture.</st>
    <st c="35013">For example, security training on topics such</st> <st c="35058">as</st>
    **<st c="35062">Open Worldwide Application Security Project (OWASP)</st>** <st
    c="35113">training, secure coding, and API security can</st> <st c="35160">be
    important.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="35173">Security integration in the</st>** **<st c="35202">life cycle</st>**<st
    c="35212">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="35214">Principle</st>*<st c="35223">: Security is an</st> <st c="35241">integral
    part of the entire software life cycle, not an</st> <st c="35297">isolated stage.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="35312">Pillar</st>*<st c="35319">: Embed security practices and tools
    into the development, delivery, and operational processes, ensuring that security
    considerations are addressed from inception through to deployment</st> <st c="35505">and
    maintenance.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="35521">Automated</st>** **<st c="35532">security testing</st>**<st
    c="35548">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="35550">Principle</st>*<st c="35559">: Automation is</st> <st c="35575">key
    to maintaining continuous</st> <st c="35606">security vigilance.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="35625">Pillar</st>*<st c="35632">: Utilize automated security testing
    tools (such as static and dynamic analysis tools and vulnerability scanners) to
    regularly scan and identify security threats at every stage of the</st> <st c="35817">development
    process.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="35837">Proactive</st>** **<st c="35848">risk management</st>**<st
    c="35863">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="35865">Principle</st>*<st c="35874">: Proactive</st> <st c="35886">identification
    and</st> <st c="35906">mitigation of risks are more effective than</st> <st c="35950">reactive
    measures.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="35968">Pillar</st>*<st c="35975">: Conduct regular security risk assessments
    and threat modeling to proactively identify and address potential</st> <st c="36086">security
    vulnerabilities.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="36111">Rapid</st>** **<st c="36118">incident response</st>**<st c="36135">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="36137">Principle</st>*<st c="36146">: Quick and</st> <st c="36159">effective
    response to security incidents minimizes</st> <st c="36210">their impact.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="36223">Pillar</st>*<st c="36230">: Establish a well-defined incident
    response plan that includes procedures for rapid detection, investigation, and
    remediation of</st> <st c="36361">security events.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="36377">Continuous monitoring</st>** **<st c="36400">and compliance</st>**<st
    c="36414">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="36416">Principle</st>*<st c="36425">: Ongoing</st> <st c="36435">monitoring
    and adherence to compliance standards are critical to</st> <st c="36501">maintain
    security.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="36519">Pillar</st>*<st c="36526">: Implement continuous monitoring
    solutions to detect and alert about suspicious activities, along with regular
    compliance checks to ensure adherence to relevant security standards</st> <st
    c="36708">and regulations.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="36724">Feedback and</st>** **<st c="36738">continuous improvement</st>**<st
    c="36760">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="36762">Principle</st>*<st c="36771">: Feedback</st> <st c="36782">is
    essential for the evolution and improvement of</st> <st c="36833">security practices.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="36852">Pillar</st>*<st c="36859">: Implement feedback mechanisms to
    learn from security events, and continuously improve security measures based on
    lessons learned and</st> <st c="36995">evolving</st> <st c="37004">threats.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="37012">These guiding principles and pillars establish a robust framework
    for continuous security.</st> <st c="37104">They ensure that security is a continuous,
    integrated process, emphasizing proactive risk management, rapid incident response,
    and ongoing monitoring, while fostering a culture of security awareness and collaboration.</st>
    <st c="37322">By adhering to these principles, organizations can effectively reduce
    the frequency and impact of security events, thereby enhancing their overall</st>
    <st c="37469">security posture.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37486">The guiding principles and pillars of continuous feedback</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="37544">This</st> <st c="37549">section describes the guiding principles,
    and pillars of practice that are important for an effective continuous</st> <st
    c="37663">feedback strategy.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="37681">Figure 1</st>**<st c="37690">.8</st>* <st c="37692">illustrates
    the pillars of</st> <st c="37720">Continuous Feedback.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – The continuous feedback pillars](img/B21936_01_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="38054">Figure 1.8 – The continuous feedback pillars</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38098">Let’s discuss</st> <st c="38112">these</st> <st c="38119">pillars
    next:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="38132">Stakeholder and</st>** **<st c="38149">user engagement</st>**<st
    c="38164">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="38166">Principle</st>*<st c="38175">: Active</st> <st c="38184">engagement
    with stakeholders and users is essential for relevant and</st> <st c="38254">actionable
    feedback.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="38274">Pillar</st>*<st c="38281">: Establish regular channels to gather
    feedback from all stakeholders, including customers, end users, team members,
    and</st> <st c="38403">business partners.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="38421">Feedback integration</st>** **<st c="38443">with development</st>**<st
    c="38459">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="38461">Principle</st>*<st c="38470">: Feedback</st> <st c="38481">should
    be integrated seamlessly into the</st> <st c="38523">development process.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="38543">Pillar</st>*<st c="38550">: Develop mechanisms to quickly integrate
    feedback into the development pipeline, ensuring that it directly informs development
    priorities</st> <st c="38690">and decisions.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="38704">Rapid iteration</st>** **<st c="38721">and implementation</st>**<st
    c="38739">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="38741">Principle</st>*<st c="38750">: The</st> <st c="38757">value
    of feedback is</st> <st c="38777">maximized when it is implemented rapidly</st>
    <st c="38819">and effectively.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="38835">Pillar</st>*<st c="38842">: Focus on shortening the cycle time
    from receiving feedback to implementing changes, enabling faster iterations</st>
    <st c="38956">and improvements.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="38973">Data-driven</st>** **<st c="38986">decision making</st>**<st
    c="39001">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="39003">Principle</st>*<st c="39012">: Decisions</st> <st c="39025">should
    be based on data derived from feedback, not just intuition</st> <st c="39091">or
    assumptions.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="39106">Pillar</st>*<st c="39113">: Utilize tools and techniques to
    analyze feedback quantitatively and qualitatively, ensuring that decisions are
    informed by actual user and</st> <st c="39255">stakeholder insights.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="39276">Feedback transparency</st>** **<st c="39299">and communication</st>**<st
    c="39316">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="39318">Principle</st>*<st c="39327">: Open</st> <st c="39334">communication
    about feedback fosters trust and</st> <st c="39382">continued engagement.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="39403">Pillar</st>*<st c="39410">: Communicate transparently with stakeholders
    about the feedback received, actions taken, and the rationale</st> <st c="39519">behind
    decisions.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="39536">Continuous learning</st>** **<st c="39557">and adaptation</st>**<st
    c="39571">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="39573">Principle</st>*<st c="39582">: Feedback</st> <st c="39593">is
    a key driver for continuous learning</st> <st c="39634">and adaptation.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="39649">Pillar</st>*<st c="39656">: Encourage a culture that views feedback
    as an opportunity for learning and improvement, adapting processes and practices
    based on</st> <st c="39789">feedback insights.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="39807">Measuring impact</st>** **<st c="39825">and effectiveness</st>**<st
    c="39842">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="39844">Principle</st>*<st c="39853">: The</st> <st c="39860">effectiveness
    of feedback implementation should be</st> <st c="39911">continually measured.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="39932">Pillar</st>*<st c="39939">: Track and evaluate the impact of
    feedback on release frequency, recovery times, and system reliability to measure
    the effectiveness of</st> <st c="40077">feedback implementation.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="40101">Balancing speed</st>** **<st c="40118">and quality</st>**<st
    c="40129">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="40131">Principle</st>*<st c="40140">: While</st> <st c="40148">rapid
    implementation of feedback is important, maintaining quality is</st> <st c="40219">equally
    crucial.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="40235">Pillar</st>*<st c="40242">: Ensure that feedback is implemented
    in a way that balances speed with the need to</st> <st c="40327">maintain or enhance
    the quality and reliability of</st> <st c="40378">a system.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="40387">These guiding principles and pillars form a comprehensive framework
    for continuous feedback, emphasizing the importance of stakeholder and user engagement,
    rapid integration of feedback into development, and data-driven decision making.</st>
    <st c="40625">By adhering to these principles, organizations can effectively use
    feedback to drive faster releases, improve recovery times, and enhance overall
    system reliability, thereby aligning closely with the goals of modern software</st>
    <st c="40850">development methodologies.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40876">Summary</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="40884">In the rapidly evolving landscape of DevOps, DevSecOps, and SRE,
    strategies for continuous testing, quality, security, and feedback have emerged
    as pivotal elements in steering digital transformations toward successful continuous
    development, delivery, and operations.</st> <st c="41154">This chapter delved
    into the heart of these strategies, offering practical definitions and the guiding
    principles that</st> <st c="41273">underpin them.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41287">The journey began with</st> *<st c="41311">Introducing Continuous
    Testing, Quality, Security, and Feedback</st>*<st c="41374">, setting the stage
    for a comprehensive exploration.</st> <st c="41427">This section laid the groundwork,
    illuminating why these concepts are indispensable in modern software development.</st>
    <st c="41543">It’s an invitation to view software development, delivery, and operations
    through a lens that prioritizes continuous improvement and adaptation.</st> <st
    c="41688">The following section,</st> *<st c="41711">Defining Continuous Testing,
    Quality, Security, and Feedback</st>*<st c="41771">, provided clear, outcome-focused
    definitions of each concept.</st> <st c="41834">This clarity is crucial, as it
    serves as a beacon for professionals navigating the complexities of implementing
    these strategies, which is essential for</st> <st c="41987">digital transformation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42010">The heart of the chapter lies in the detailed exposition of the
    guiding principles and pillars for each concept.</st> *<st c="42124">Guiding Principles
    and Pillars of Continuous Testing</st>* <st c="42176">explained that integrating
    testing into every stage of the software development life cycle ensures that quality
    and functionality are not afterthoughts but ingrained in the process.</st> <st
    c="42359">The section on continuous quality emphasized a proactive approach to
    maintaining high standards, ensuring that a product not only meets but exceeds
    user expectations.</st> <st c="42526">When it comes to continuous security, the
    chapter underscored the need for an integrated, vigilant approach to protect against</st>
    <st c="42653">evolving threats.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42670">In the segment dedicated to continuous feedback, the chapter highlighted
    the significance of stakeholder and user input in shaping and refining software
    products.</st> <st c="42834">This feedback loop is depicted as a dynamic, integral
    component of the development process, driving improvements and fostering user
    satisfaction.</st> <st c="42980">Finally, the chapter equipped you with valuable
    skills – understanding the essence of continuous testing, quality, security, and
    feedback and learning to implement their guiding principles effectively.</st>
    <st c="43182">This knowledge is not just theoretical; it’s a toolkit to thrive
    in the modern software</st> <st c="43270">development arena.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43288">In summary, this chapter is a practical guide and a catalyst for
    transformation.</st> <st c="43370">It encourages you to embrace these continuous
    strategies, ensuring digital transformations are resilient, user-centric, and
    secure.</st> <st c="43502">Whether you’re a seasoned professional or just starting,
    this chapter provided valuable insights and skills that will elevate your approach
    to continuous software development, delivery,</st> <st c="43688">and operations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43703">The next chapter explains why continuous testing, quality, security,
    and feedback are essential for DevOps, DevSecOps,</st> <st c="43823">and SRE.</st>
  prefs: []
  type: TYPE_NORMAL
