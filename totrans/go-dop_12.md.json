["```\nname: my-workflow # (optional) The name of your workflow; \n                               # defaults to the file name. \non:                 # Events that will trigger the workflow\njobs:               # Jobs to run when the event is triggered\n```", "```\n# the workflow will be triggered when a commit\n# is pushed to any branch\non: push\non: push\n```", "```\n# the workflow will execute when a commit is pushed \n# to any branch or pull request is opened\non: [push, pull_request]\n```", "```\non: \n  scheduled:\n    - cron: '0,1,*,*,*'   # run every day at 01:00:00\n```", "```\n# a manually triggered event with a \n# single \"message\" user input field\non: \n  workflow_dispatch:\n    inputs:\n      message:\n        description: 'message you want to tweet'\n        required: true\n```", "```\njobs:\n  job_with_secrets:\n    if: contains(github.event.pull_request.labels.*.name, 'safe to test')\n```", "```\nenv:\n  GIT_SHA: ${{ github.sha }}\n```", "```\njobs:\n  job_one:\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        go_version: [1.17, 1.16]\n    runs_on: ${{ matrix.os }}\n      steps:\n        - run: echo \"${{ matrix.go_version }}\"\n  job_two:\n    runs_on: ubuntu-18.04\n    steps:\n      - run: echo \"hello world!\"\n```", "```\nsteps:\n  - uses: actions/setup-go@v2\n    with:\n      go-version: '^1.17.0'\n```", "```\nsteps:\n  - uses: actions/setup-go@v2\n    with:\n      go-version: '^1.17.0'\n  - name: Run go mod download and test\n    run: |\n      go mod download\n      go test\n```", "```\n$ tree . -a -I '\\.git' \n.\n├── .gitignore\n├── LICENSE\n└── README.md\n```", "```\nmkdir -p .github/workflows\ntouch .github/workflows/first.yaml\n```", "```\nname: first-workflow\non: push\njobs:\n  echo:\n    runs-on: ubuntu-latest\n    steps:\n      - name: echo step\n        run: echo 'hello world!'\n```", "```\ngit add .\ngit commit -am 'my first action'\ngit push origin main\n```", "```\ngit clone https://github.com/{your-account}/B18275-08-Automating-Workflows-with-GitHub-Actions-Code-Files\ncd B18275-08-Automating-Workflows-with-GitHub-Actions-Code-Files\ngo test ./...\n```", "```\n$ go run . -h\nUsage of /tmp/go-build3731631588/b001/exe/github-actions:\n      --accessToken string         twitter access token\n      --accessTokenSecret string   twitter access token secret\n      --apiKey string              twitter api key\n      --apiKeySecret string        twitter api key secret\n      --dryRun                     if true or if env var DRY_RUN=true, then a tweet will not be sent\n      --message string             message you'd like to send to twitter\n      --version                    output the version of tweeter\npflag: help requested\nexit status 2\n```", "```\nname: tweeter-automation\non:\n  push:\n    tags:\n      - 'v[0-9]+.[0-9]+.*'\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\njobs:\n  test:\n    strategy:\n      matrix:\n        go-version: [ 1.16.x, 1.17.x ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n    runs-on: ${{ matrix.os }}\n    steps:\n      - name: install go\n        uses: actions/setup-go@v2\n        with:\n          go-version: ${{ matrix.go-version }}\n      - uses: actions/checkout@v2\n      - name: lint with golangci-lint\n        uses: golangci/golangci-lint-action@v2\n      - name: run go test\n        run: go test ./...\n```", "```\non:\n  push:\n    tags:\n      - 'v[0-9]+.[0-9]+.*'\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n```", "```\njobs:\n  test:\n    strategy:\n      matrix:\n        go-version: [ 1.16.x, 1.17.x ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n    runs-on: ${{ matrix.os }}\n    steps:\n      - name: install go\n        uses: actions/setup-go@v2\n        with:\n          go-version: ${{ matrix.go-version }}\n```", "```\n    steps:\n      - name: install go\n        uses: actions/setup-go@v2\n        with:\n          go-version: ${{ matrix.go-version }}\n      - uses: actions/checkout@v2\n      - name: lint with golangci-lint\n        uses: golangci/golangci-lint-action@v2\n      - name: run go test\n        run: go test ./...\n```", "```\nname: tweeter-automation\non:\n  push:\n    tags:\n      - 'v[0-9]+.[0-9]+.*'\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n```", "```\njobs:\n  test:\n    # continuous integration job omitted for brevity    \n  release:\n    needs: test\n    if: startsWith(github.ref, 'refs/tags/v')\n    runs-on: ubuntu-latest\n    steps:\n```", "```\n# Previous config of the release job omitted for brevity \nsteps:\n  - uses: actions/checkout@v2\n  - name: Set RELEASE_VERSION ENV var\n    run: echo \"RELEASE_VERSION=${GITHUB_REF:10}\" >> $GITHUB_ENV\n  - name: install go\n    uses: actions/setup-go@v2\n    with:\n      go-version: 1.17.x\n```", "```\nsteps:\n  # Previous steps of the release job omitted for brevity \n  - name: install gox\n    run: go install github.com/mitchellh/gox@v1.0.1\n  - name: build cross-platform binaries\n    env:\n      PLATFORMS: darwin/amd64 darwin/arm64 windows/amd64 linux/amd64 linux/arm64\n      VERSION_INJECT: github.com/devopsforgo/github-actions/pkg/tweeter.Version\n      OUTPUT_PATH_FORMAT: ./bin/${{ env.RELEASE_VERSION }}/{{.OS}}/{{.Arch}}/tweeter\n    run: |\n      gox -osarch=\"${PLATFORMS}\" -ldflags \"-X\n${VERSION_INJECT}=${RELEASE_VERSION}\" -output\n\"${OUTPUT_PATH_FORMAT}\"\n```", "```\n    $ tree ./bin/\n    ./bin/\n    └── v1.0.0\n        ├── darwin\n        │   ├── amd64\n        │   │   └── tweeter\n        │   └── arm64\n        │       └── tweeter\n        └── linux\n            └── amd64\n                └── tweeter\n    ```", "```\nchangelog:\n  exclude:\n    labels:\n      - ignore-for-release\n  categories:\n    - title: Breaking Changes \n      labels:\n        - breaking-change\n    - title: New Features \n      labels:\n        - enhancement\n    - title: Bug Fixes \n      labels:\n        - bug-fix\n    - title: Other Changes\n      labels:\n        - \"*\"\n```", "```\nsteps:\n  # Previous steps of the release job omitted for brevity \n  - name: generate release notes\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    run: |\n      gh api -X POST 'repos/{owner}/{repo}/releases/generate-notes' \\\n        -F commitish=${{ env.RELEASE_VERSION }} \\\n        -F tag_name=${{ env.RELEASE_VERSION }} \\\n        > tmp-release-notes.json\n```", "```\n{\n  \"name\": \"name of the release\",\n  \"body\": \"markdown body containing the release notes\"\n}\n```", "```\nsteps:\n  # Previous steps of the release job omitted for brevity \n  - name: gzip the bins\n    env:\n      DARWIN_BASE: ./bin/${{ env.RELEASE_VERSION }}/darwin\n      WIN_BASE: ./bin/${{ env.RELEASE_VERSION }}/windows\n      LINUX_BASE: ./bin/${{ env.RELEASE_VERSION }}/linux\n    run: |\n      tar -czvf \"${DARWIN_BASE}/amd64/tweeter_darwin_amd64.tar.gz\" -C \"${DARWIN_BASE}/amd64\" tweeter\n      tar -czvf \"${DARWIN_BASE}/arm64/tweeter_darwin_arm64.tar.gz\" -C \"${DARWIN_BASE}/arm64\" tweeter\n      tar -czvf \"${WIN_BASE}/amd64/tweeter_windows_amd64.tar.gz\" -C \"${WIN_BASE}/amd64\" tweeter.exe\n      tar -czvf \"${LINUX_BASE}/amd64/tweeter_linux_amd64.tar.gz\" -C \"${LINUX_BASE}/amd64\" tweeter\n      tar -czvf \"${LINUX_BASE}/arm64/tweeter_linux_arm64.tar.gz\" -C \"${LINUX_BASE}/arm64\" tweeter\n  - name: create release\n    env:\n      OUT_BASE: ./bin/${{ env.RELEASE_VERSION }}\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    run: |\n      jq -r .body tmp-release-notes.json > tmp-release-notes.md\n      gh release create ${{ env.RELEASE_VERSION }} \\\n        -t \"$(jq -r .name tmp-release-notes.json)\" \\\n        -F tmp-release-notes.md \\\n\n\"${OUT_BASE}/darwin/amd64/tweeter_darwin_amd64.tar.gz#tweeter_osx_amd64\" \\\n\"${OUT_BASE}/darwin/arm64/tweeter_darwin_arm64.tar.gz#tweeter_osx_arm64\" \\\n\"${OUT_BASE}/windows/amd64/tweeter_windows_amd64.tar.gz#tweeter_windows_amd64\" \\\n\"${OUT_BASE}/linux/amd64/tweeter_linux_amd64.tar.gz#tweeter_linux_amd64\" \\\n\"${OUT_BASE}/linux/arm64/tweeter_linux_arm64.tar.gz#tweeter_linux_arm64\"\n```", "```\ngit tag v0.0.1\ngit push origin v0.0.1\n```", "```\nname: Name of the Action\nauthor: @author\ndescription: Description of your action\nbranding:\n  icon: message-circle\n  color: blue\ninputs:\n  sample:\n    description: sample description\n    required: true\noutputs:\n  sampleOutput:\n    description: some sample output\nruns:\n  using: docker\n  image: Dockerfile\n  args:\n    - --sample\n    - \"${{ inputs.sample }}\"\n```", "```\njobs:\n  sample-job:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Sample action step\n        id: sample\n        uses: devopsforgo/sample-action@v1\n        with:\n          sample: 'Hello from the sample!'\n      # Use the output from the `sample` step\n      - name: Get the sample message\n        run: echo \"The message is ${{\n            steps.sample.outputs.sampleOutput }}\"\n```", "```\nFROM golang:1.17 as builder\nWORKDIR /workspace\n# Copy the Go Modules manifests\nCOPY go.mod go.mod\nCOPY go.sum go.sum\n# Cache deps before building and copying source\n# so that we don't need to re-download as much\n# and so that source changes don't invalidate \n# our downloaded layer\nRUN go mod download\n# Copy the sources\nCOPY ./ ./\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \\\n    go build -a -ldflags '-extldflags \"-static\"' \\\n    -o tweeter .\n# Copy the action into a thin image\nFROM gcr.io/distroless/static:latest\nWORKDIR /\nCOPY --from=builder /workspace/tweeter .\nENTRYPOINT [\"/tweeter\"]\n```", "```\n$ docker build . -t tweeter\n# output from the docker build\n$ docker run tweeter -h\npflag: help requested\nUsage of /tweeter:\n      --accessToken string         twitter access token\n      # More help text removed for brevity.\n```", "```\nname: Tweeter Action\nauthor: DevOps for Go\ndescription: Action to send a tweet via a GitHub Action.\ninputs:\n  message:\n    description: 'message you want to tweet'\n    required: true\n  apiKey:\n    description: 'api key for Twitter api'\n    required: true\n  apiKeySecret:\n    description: 'api key secret for Twitter api'\n    required: true\n  accessToken:\n    description: 'access token for Twitter api'\n    required: true\n  accessTokenSecret:\n    description: 'access token secret for Twitter api'\n    required: true\noutputs:\n  errorMessage:\n    description: 'if something went wrong, the error message'\n  sentMessage:\n    description: 'the message sent to Twitter'\nruns:\n  using: docker\n  image: Dockerfile\n  args:\n    - --message\n    - \"${{ inputs.message }}\"\n    - --apiKey\n    - ${{ inputs.apiKey }}\n    - --apiKeySecret\n    - ${{ inputs.apiKeySecret }}\n    - --accessToken\n    - ${{ inputs.accessToken }}\n    - --accessTokenSecret\n    - ${{ inputs.accessTokenSecret }}\n```", "```\nfunc printOutput(key, message string) {\n    fmt.Printf(\"::set-output name=%s::%s\\n\", key, message)\n}\n```", "```\ntest-action:\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v2\n    - name: test the tweeter action in DRY_RUN\n      id: tweeterAction\n      env:\n        DRY_RUN: true\n      uses: ./\n      with:\n        message: hello world!\n        accessToken: fake\n        accessTokenSecret: fake\n        apiKey: fake\n        apiKeySecret: fake\n    - run: echo ${{ steps.tweeterAction.outputs.sentMessage\n}} from dry run test\n```", "```\nname: release image\non:\n  # push events for tags matching image-v for version\n(image-v1.0, etc)\n  push:\n    tags:\n      - 'image-v*' \npermissions:\n  contents: read\n  packages: write\njobs:\n  image:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: set env\n        # refs/tags/image-v1.0.0 substring starting at 1.0.0\n        run: echo \"RELEASE_VERSION=${GITHUB_REF:17}\" >> $GITHUB_ENV\n      - name: setup buildx\n        uses: docker/setup-buildx-action@v1\n      - name: login to GitHub container registry\n        uses: docker/login-action@v1\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - name: build and push\n        uses: docker/build-push-action@v2\n        with:\n          push: true\n          tags: |\n            ghcr.io/devopsforgo/tweeter:${{ env.RELEASE_VERSION }}\n            ghcr.io/devopsforgo/tweeter:latest\n```", "```\ngit tag image-v1.0.0\ngit push origin image-v1.0.0\n```", "```\n# omitted the previous portion of the action.yaml \nruns:\n  using: docker\n  image: docker://ghcr.io/devopsforgo/tweeter:1.0.0\n# omitted the subsequent portion of the action.yaml \n```", "```\nname: Release new tweeter version\non:\n  release:\n    types: [released]\n  workflow_dispatch:\n    inputs:\n      TAG_NAME:\n        description: 'Tag name that the major tag will point to'\n        required: true\npermissions:\n  contents: write\nenv:\n  TAG_NAME: ${{ github.event.inputs.TAG_NAME || github.event.release.tag_name }}\njobs:\n  update_tag:\n    name: Update the major tag to include the ${{ env.TAG_NAME }} changes\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update the ${{ env.TAG_NAME }} tag\n        uses: actions/publish-action@v0.1.0\n        with:\n          source-tag: ${{ env.TAG_NAME }}\n      - uses: actions/checkout@v2\n      - name: Tweet about the release\n        uses: ./\n        with:\n          message: Hey folks, we just released the ${{ env.TAG_NAME }} for the tweeter GitHub Action!!\n          accessToken: ${{ secrets.ACCESS_TOKEN }}\n          accessTokenSecret: ${{ secrets.ACCESS_TOKEN_SECRET }}\n          apiKey: ${{ secrets.API_KEY }}\n          apiKeySecret: ${{ secrets.API_KEY_SECRET }}\n```"]