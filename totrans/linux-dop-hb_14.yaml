- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Avoiding Pitfalls in DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This final chapter focuses on DevOps pitfalls and antipatterns that can hinder
    the successful implementation of DevOps practices. We will highlight the importance
    of adopting a collaborative culture and prioritizing continuous improvement and
    discuss various common pitfalls, such as neglecting testing and **quality assurance**
    (**QA**), over-reliance on automation, poor monitoring and feedback loops, inadequate
    security and compliance measures, and lack of scalability and flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: We will also emphasize the importance of proper documentation and knowledge
    sharing and discuss strategies to overcome resistance to change. By highlighting
    these common pitfalls and antipatterns, the chapter aims to provide guidance to
    organizations on how to successfully implement DevOps practices and avoid common
    mistakes. These are also probably things organizations struggle the most with,
    apart from the technical parts.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Too much or not enough automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not understanding the technology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Failure to adopt a collaborative culture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Neglecting testing and QA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poor monitoring and feedback loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inadequate security and compliance measures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of scalability and flexibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of proper documentation and knowledge sharing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overcoming resistance to change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are no technical requirements for this chapter. It is more of a discussion
    and does not provide any instructions to be followed on a system.
  prefs: []
  type: TYPE_NORMAL
- en: Too much or not enough automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Automation is a core tenet of DevOps. Let’s face it—automation is the greatest
    way of making our work easier, more efficient, and fun.
  prefs: []
  type: TYPE_NORMAL
- en: But organizations can sometimes become too reliant on it, leading to a lack
    of human oversight and accountability. If you automate too many things, you will
    fail to catch any errors that could have been spotted by a human if you’d embedded
    them into the process. That’s why we have peer review processes in place to ensure
    we don’t miss something that tests or any integration testing tool didn’t catch.
    That’s also why many organizations prefer to manually sign off the `terraform
    apply` process before it actually gets deployed.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, if you don’t automate anything, you expose yourself to accidental
    errors, as we humans are not very good with boring repeatable tasks. And that’s
    the point here: *identify repeatable tasks* *for automation*.'
  prefs: []
  type: TYPE_NORMAL
- en: To identify what can be automated, we’d suggest focusing on low-hanging fruits
    first. With that in mind, let’s identify which tasks are easiest to automate to
    ensure a successful automation strategy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following checklist ordered from the easiest to most difficult
    strategies for how to get around automation:'
  prefs: []
  type: TYPE_NORMAL
- en: Repetitive tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time-consuming tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manual and error-prone tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tasks with version control integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tasks with repeatable patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tasks with well-defined APIs or interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tasks with clear and well-defined requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us now look at the strategies.
  prefs: []
  type: TYPE_NORMAL
- en: Repetitive tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Look for tasks that are repetitive and can be executed with a consistent set
    of steps. These tasks are prime candidates for automation, as they can save time
    and reduce the risk of human error. These tasks include provisioning and managing
    AWS resources using Terraform, backup jobs, creating and managing GitHub repositories,
    or setting up build and deployment pipelines with **GitHub Actions** that can
    be automated to streamline the DevOps workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Time-consuming tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Look for tasks that are time-consuming and can benefit from automation. These
    include long-running tasks such as data synchronization, compilation, building
    Docker images, and security audits that can be done by one of many tools, both
    commercial in a SaaS model or open source (**Prowler** is one example).
  prefs: []
  type: TYPE_NORMAL
- en: Manual and error-prone tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Identify tasks that are error-prone when performed manually. These tasks often
    involve multiple steps or configurations, which can be tedious and prone to mistakes.
    Automating these tasks using Python scripts or **Infrastructure as Code** (**IaC**)
    tools such as Terraform can help minimize human errors and ensure consistency
    across environments. Automating those tasks with clear code will also have the
    benefit of documenting them. You’ve heard so many times that your code is your
    documentation, and especially in this case it is true.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks with version control integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Identify tasks that can be integrated with version control systems such as GitHub.
    GitHub Actions, for example, provides a powerful automation framework that can
    be used to trigger workflows automatically based on events in GitHub repositories,
    such as code pushes, pull requests, or issue updates. This allows you to automate
    tasks such as building and deploying applications, running tests, or creating
    documentation as part of your DevOps workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks with repeatable patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Identify tasks that follow a repeatable pattern or can be templated. These tasks
    can be automated using Python scripts, Terraform modules, or GitHub Actions templates.
    For example, tasks such as creating similar AWS resources for multiple environments
    (for example, dev, test, prod), managing multiple GitHub repositories with similar
    settings, or deploying the same application to multiple AWS accounts can be automated
    using templates or scripts to reduce duplication and increase efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks with well-defined APIs or interfaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Identify tasks that have well-documented APIs or interfaces. These tasks can
    be easily automated using Python libraries, Terraform providers, AWS SDKs, or
    GitHub APIs. For example, AWS provides comprehensive SDKs for various programming
    languages, including Python, which makes it easy to automate tasks such as managing
    AWS resources, configuring AWS services, or monitoring AWS resources.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks with clear and well-defined requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Look for tasks that have clear and well-defined requirements, inputs, and expected
    outputs. These tasks are easier to automate as they can be precisely defined in
    scripts, templates, or configurations. For example, tasks such as provisioning
    AWS resources using Terraform, setting up AWS CloudFormation stacks, or configuring
    GitHub repository settings can be automated using declarative IaC templates or
    configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: By considering these criteria, you can identify which tasks are easiest to automate
    in your organization. Keep in mind that this is usually a process and can take
    months or even years. As a rule of thumb, try to create solutions that involve
    a lot of small (*atomic*) steps to build a more complex system, instead of building
    complex solutions from the start. For example, the deployment process could be
    broken down into smaller steps, such as setting up the environment, building,
    testing, uploading artifacts, and creating a manifest that will update the version
    of the application, ultimately leading to deployment on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: Automating common tasks is something that will make your work easier and more
    satisfying, yet not understanding what’s behind the scenes and how the technology
    you’re working with is functioning can lead to some unforeseen problems.
  prefs: []
  type: TYPE_NORMAL
- en: Not understanding the technology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You don’t have to know how your TV works to use it. But it’s necessary to understand
    the principles behind it, what’s the input interface, what are the outputs, and
    so on. Similarly, with any other technology, you don’t need to 100% understand
    what makes it tick, but you need to know what the core use case is and what its
    purpose is.
  prefs: []
  type: TYPE_NORMAL
- en: As a DevOps professional, it’s crucial to have a deep enough understanding of
    the underlying technologies that power modern software development and operations.
    From databases to message queues, notifications to block and object storage, each
    of these technologies plays a critical role in building and maintaining reliable
    and scalable software systems. Yet one of the most common pitfalls in DevOps is
    not fully grasping the technology behind these common tasks.
  prefs: []
  type: TYPE_NORMAL
- en: '*Why is it so important to understand technology?* The answer is simple—DevOps
    is not just about using tools and automation to streamline the software development
    and deployment process. It’s about understanding how these tools work, what they
    do, and how they interact with each other. Without this understanding, DevOps
    practices can become superficial and ineffective, resulting in suboptimal outcomes
    and increased risks of failures and downtime. Remember: *DevOps is a way of working*.
    Tools are just that—tools to help you in your everyday work. Understanding your
    tools will let you use them efficiently and effectively, shaping them up to your
    needs.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, consider a scenario where you are tasked with setting up a highly
    available and performant database for a new application. Without a solid understanding
    of database technologies, the team might rely solely on default configurations
    or follow outdated practices, leading to poor performance, data loss, or even
    system failures. On the other hand, a team with a strong grasp of database principles
    would be able to make informed decisions about data modeling, indexing, caching,
    replication, and other critical aspects, resulting in a robust and scalable database
    architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, understanding messaging queues, notifications, block and object storage,
    and other technologies is essential for designing and implementing reliable and
    efficient communication patterns, data processing pipelines, and storage strategies.
    It allows you to optimize system performance, ensure data integrity, and plan
    for future growth.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, you don’t necessarily need to know the details of the implementation.
    For the database, you should not worry about its source code.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, how can you quickly learn new and unknown concepts? Here are some tips
    you could follow:'
  prefs: []
  type: TYPE_NORMAL
- en: Stay curious and proactive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start with the basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn hands-on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaborate and share knowledge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stay updated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us look at these tips in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Stay curious and proactive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Embrace a growth mindset and actively seek out opportunities to learn. Don’t
    wait for a problem to arise before diving into a new technology. Stay curious,
    explore documentation, tutorials, and online resources, and proactively experiment
    with different tools and technologies in a safe and controlled environment. We
    cannot stress it enough - experimentation is very important. *“It has always been
    done that way”* is one of the worst things you can say as a DevOps. Without a
    sandbox and testing new set ups, new workflows, new tools, you won’t be able to
    improve your infrastructure and pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Start with the basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Don’t be intimidated by complex concepts. Start with the fundamentals and build
    your understanding from there. Familiarize yourself with the basic principles,
    terminologies, and concepts of the technology you want to learn. Once you have
    a solid foundation, you can gradually delve into more advanced topics.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Theory is important, but hands-on experience is invaluable. Set up a sandbox
    environment, experiment with different configurations, and try building small
    projects or prototypes to apply what you’ve learned. Learning by doing will help
    you gain practical skills and reinforce your understanding of the technology.
  prefs: []
  type: TYPE_NORMAL
- en: Collaborate and share knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DevOps is a collaborative field, and learning from your peers can be incredibly
    valuable. Engage with your team, participate in online communities, attend meetups
    or conferences, and share your knowledge with others. Teaching others is a powerful
    way to reinforce your own understanding and learn from different perspectives.
  prefs: []
  type: TYPE_NORMAL
- en: Stay updated
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Technology is constantly evolving, and it’s essential to stay updated with the
    latest trends, best practices, and updates in the field. Follow industry blogs,
    subscribe to newsletters, and participate in relevant forums or communities to
    stay informed about the latest developments. Core technologies usually stay the
    same, but use cases, the way of using them, and interacting with the technology
    are always changing. Did you know that you can make a PostgreSQL database to be
    available using a RESTful API ([https://postgrest.org/en/stable/](https://postgrest.org/en/stable/))?
    Or that with the use of the Multicorn extension ([https://multicorn.org/](https://multicorn.org/)),
    you could query (and join tables) from multiple sources (even Twitter) using one
    endpoint?
  prefs: []
  type: TYPE_NORMAL
- en: We like to think about technology as the ultimate playground for innovation
    and increasing the productivity of teams. If it ain’t fun, why do it? On that
    note, consider working with a siloed team that is only dealing with its own *piece
    of the puzzle*; it’s definitely not fun. Collaboration in DevOps is one of the
    fundamental principles, and collaboration is a part of the culture in your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Failure to adopt a collaborative culture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps is all about collaboration and breaking down silos between teams. However,
    many organizations struggle to adopt a culture of collaboration, leading to miscommunications,
    delays, and, ultimately, project failures. The importance of collaboration in
    DevOps with examples of how a lack of collaboration can derail projects would
    certainly be a good idea for a separate chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Silos refer to isolated teams or departments that do not communicate or collaborate
    effectively with each other, leading to poor coordination and hindering overall
    productivity and efficiency. Several possible reasons why organizations fail to
    adopt a collaborative culture in DevOps include the following: lack of leadership,
    siloed structure from the get-go, lack of trust, and lack of communication. Let’s
    take a look at each of these and try to find a good way out.'
  prefs: []
  type: TYPE_NORMAL
- en: Lack of leadership
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A common challenge is when leadership does not prioritize or actively promote
    a collaborative culture. This can result in teams focusing solely on their individual
    tasks without considering the broader organizational goals. To address this, it
    is crucial to have leadership buy-in and support for DevOps practices, including
    fostering a collaborative culture. Leaders should set the tone by actively promoting
    collaboration, establishing shared goals, and providing the necessary resources
    and support for cross-team collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: Good leaders are scarce, so it’s also a good idea to identify potential leaders
    within your organization and promote them by supporting their growth and development
    as a person and a leader. Simply promoting a person who was only a contributor
    up to now will set them up for failure as they don’t yet have the needed tools
    for the job.
  prefs: []
  type: TYPE_NORMAL
- en: Siloed organizational structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Organizations with a hierarchical and siloed structure can impede collaboration.
    Teams may operate in isolated silos with their own goals, processes, and tools,
    leading to a lack of visibility and coordination across teams. To overcome this,
    organizations should restructure to foster cross-functional teams that have end-to-end
    ownership of their applications or services. Creating multidisciplinary teams
    with representatives from different departments, such as development, operations,
    and QA, can promote collaboration and enable better communication and coordination.
  prefs: []
  type: TYPE_NORMAL
- en: Another very effective strategy is building a culture of collaboration. This
    involves promoting a mindset that values open communication, transparency, and
    teamwork. Encourage cross-functional teams to work together, share information,
    and collaborate on projects. Recognize and reward collaboration, and create forums
    for knowledge sharing and learning across different teams and departments.
  prefs: []
  type: TYPE_NORMAL
- en: You can also create shared goals and metrics. Let the team define shared goals
    and metrics that align with the overall business objectives and require collaboration
    across different teams. This will encourage them to work together toward common
    outcomes and helps them see the bigger picture beyond their individual silos.
    Regularly review progress toward these shared goals and metrics in cross-functional
    meetings to foster accountability and alignment.
  prefs: []
  type: TYPE_NORMAL
- en: Also, leadership plays a crucial role in breaking down silos. Leaders should
    model the behavior they expect from their teams by actively promoting collaboration,
    communication, and alignment across different teams and departments. This includes
    setting clear expectations for collaboration, recognizing and rewarding collaborative
    behaviors, and providing support and resources to enable cross-functional collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of trust and communication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Without trust and effective communication, collaboration can suffer. Teams may
    be hesitant to share information or ideas due to fear of criticism or competition,
    leading to silos. Building a culture of trust and open communication is essential.
    This can be achieved through regular team meetings, cross-team workshops, and
    fostering an environment where team members feel comfortable sharing their perspectives
    and ideas without fear of judgment. Encouraging open and transparent communication
    channels, such as chat platforms or collaborative documentation tools, can also
    facilitate communication and collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Building trust between teams and team members is critical for effective collaboration
    and communication. Trust is the foundation upon which healthy relationships and
    successful teamwork are built. Among the different strategies you can learn in
    other books, the most effective are: establishing clear expectations, fostering
    open communication, promoting transparency, knowledge sharing, and building personal
    connections.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Clearly define roles, responsibilities, and expectations for each team and
    team member**: This helps to avoid misunderstandings and promotes accountability.
    Ensure that expectations are realistic, achievable, and aligned with the overall
    goals of the organization. Regularly review and update expectations as needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open and inclusive communication**: To create a safe and inclusive environment
    where team members feel comfortable expressing their thoughts, opinions, and concerns
    openly without fear of judgment or reprisal. Encourage active listening and respect
    for diverse perspectives. Avoid blame or finger-pointing when issues arise and
    focus on collaborative problem-solving.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fostering a culture of transparency**: Information is shared openly and consistently
    across teams and team members, including sharing relevant updates, progress, and
    challenges related to projects, processes, and goals. Transparent communication
    builds trust by ensuring that everyone has access to the same information and
    is on the same page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collaborative mindset**: To encourage collaboration and knowledge sharing,
    you will need to foster a collaborative mindset where teams and team members actively
    collaborate and share knowledge with each other. Encourage cross-functional collaboration,
    pair programming, and cross-training opportunities. Create a space outside of
    work, sponsor events, and encourage team members to share their knowledge and
    experiences. Recognize and reward collaborative behaviors to reinforce their importance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Address conflicts proactively**: Conflicts are inevitable in any team or
    organization, but they can erode trust if not addressed promptly. Encourage team
    members to address conflicts in a constructive and timely manner. Provide tools
    and resources for conflict resolution, such as mediation or facilitated discussions,
    to help teams resolve conflicts and rebuild trust.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Role of leaders**: Leaders play a critical role in building trust. Leaders
    should model open and unbiased communication, actively listen to team members,
    and demonstrate trustworthiness through their actions and decisions. Leaders should
    also promote trust-building behaviors and hold themselves accountable for building
    trust within their teams and across teams.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Provide feedback and recognition regularly**: Acknowledge others’ efforts,
    celebrate their successes in public, and provide constructive feedback to help
    them improve privately. This fosters a positive feedback loop, promotes trust,
    and encourages open communication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many more strategies you can use to develop trust between team members
    and that in turn will result in better communication.
  prefs: []
  type: TYPE_NORMAL
- en: There’s also another pitfall that ultimately will create silos in your organization.
    It happens when you neglect the cultural aspects of the organization and focus
    solely on tools.
  prefs: []
  type: TYPE_NORMAL
- en: Tool-centric approach
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Organizations may focus too heavily on implementing DevOps tools without addressing
    the underlying cultural aspects. While tools are important, they are not a substitute
    for a collaborative culture. Adopting a tool-centric approach can lead to teams
    working in isolation and relying solely on automated processes, which can hinder
    effective collaboration. To overcome this, organizations should prioritize building
    a collaborative culture first and then select tools that align with their culture
    and facilitate collaboration. It is essential to provide training and support
    to ensure teams are proficient in using the selected tools to foster collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: To remediate that, you can use strategies you’ve already talked about and additionally
    provide shared communication channels, encourage—and even organize yourself—cross-team
    meetings and events, and provide training and resources (especially time).
  prefs: []
  type: TYPE_NORMAL
- en: A final great remediation method is to foster cross-team roles and responsibilities.
    Define and encourage cross-team roles and responsibilities that promote collaboration.
    This can include roles such as liaisons or ambassadors who facilitate communication
    and coordination between teams. These roles can help bridge the gap between teams
    and promote collaboration by acting as a conduit for information sharing.
  prefs: []
  type: TYPE_NORMAL
- en: Software QA is also quite often neglected. As with the culture, quality needs
    to be consciously developed and encouraged at the organizational level and at
    the team level.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s best to explain the preceding method with an example, and there’s a perfect
    one in the Linux world: the **Linux** **kernel project**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It started famously on August 25, 1991, with the following post to a newsgroup:'
  prefs: []
  type: TYPE_NORMAL
- en: “I’m doing a (free) operating system (just a hobby, won’t be big and professional
    like gnu) for 386(486) AT clones. This has been brewing since April, and is starting
    to get ready. I’d like any feedback on things people like/dislike in minix, as
    my OS resembles it somewhat (same physical layout of the file-system (due to practical
    reasons) among other things). I’ve currently ported bash(1.08) and gcc(1.40),
    and things seem to work. This implies that I’ll get something practical within
    a few months [...] Yes – it’s free of any minix code, and it has a multi-threaded
    fs. It is NOT protable [sic] (uses 386 task switching etc), and it probably never
    will support anything other than AT-harddisks, as that’s all I have :-(.”
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, from the very beginning, Linus Torvalds, the creator of Linux,
    asked other enthusiasts to join his small hobby project and help develop it. This
    spirit of collaboration was visible from the very first day. Everyone can join
    the project, and their contributions are evaluated on a technical basis. The medium
    of communication is an open and public mailing list named—aptly—the **Linux kernel
    mailing list** (**LKML**), where roadmaps, patches, new ideas, and all things
    related to the project are discussed. Everyone can read the list’s archives and
    join the list and the discussion.
  prefs: []
  type: TYPE_NORMAL
- en: While the discussion is pretty much open to everyone and patches (or pull requests)
    can be submitted by anyone (although the acceptance is another thing, as the project
    has to adhere to code quality and legal and licensing requirements, which we will
    not be covering here), there is a hierarchy of leadership, although it’s pretty
    flat. Kernel subsystems have maintainers, which are people who decide if the new
    code is going to be accepted or rejected. The final code merge into the kernel
    is done by Linus Torvalds, who has the final word in the code acceptance process,
    although he most often relies on the subsystem maintainers to make the decision.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding structure inherently saves the Linux kernel project from a siloed
    structure, as there are not many levels of management. All knowledge is open and
    freely accessible; every person in the project management chain can be easily
    contacted.
  prefs: []
  type: TYPE_NORMAL
- en: The source code of the Linux kernel is publicly available in a Git repository.
    Everyone can clone and modify the kernel, as long as they don’t break the letter
    of the license under which the Linux kernel is being published.
  prefs: []
  type: TYPE_NORMAL
- en: Communication and trust are direct results of the open communication model and
    the open source code repository adopted by the project. There is no “*behind closed
    door*” communication; decisions are made on a technical basis, and thus one can
    trust the developers and leaders.
  prefs: []
  type: TYPE_NORMAL
- en: Neglecting testing and QA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Testing and QA are critical components of any DevOps workflow, yet many organizations
    fail to prioritize them, leading to buggy software, user dissatisfaction, and
    lost revenue. In the world of DevOps, where software development and operations
    are closely integrated, testing and QA are critical components of the development
    process. Neglecting these aspects can lead to various issues that can have serious
    consequences for software development projects. Let’s explore some potential pitfalls
    of neglecting testing and QA in DevOps, and propose solutions to address them:'
  prefs: []
  type: TYPE_NORMAL
- en: Increased software defects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment failures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inadequate test coverage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of continuous improvement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us check these pitfalls in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Increased software defects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Without proper testing and QA, software defects may—and usually do—go unnoticed,
    leading to the release of poor-quality software into production. This can result
    in increased customer complaints, decreased user satisfaction, and loss of revenue.
  prefs: []
  type: TYPE_NORMAL
- en: It’s essential to implement comprehensive testing processes, including unit
    testing, integration testing, and **end-to-end** (**E2E**) testing, to identify
    and fix defects at different stages of the development life cycle. Start with
    basics (**linting**, **static code analysis**) and gradually add more testing
    into your workflow. It’s essential to collaborate with developers on that unless
    you’re willing to write all tests for your application yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment failures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Without thorough testing and QA, software deployments can fail, causing system
    downtime and disrupting business operations. This can result in financial losses,
    reputational damage, and increased customer churn. To avoid deployment failures,
    it’s crucial to have automated testing and deployment pipelines in place that
    include rigorous testing and QA checks before releasing code to production. This
    helps catch issues early and ensures that only stable and reliable software is
    deployed.
  prefs: []
  type: TYPE_NORMAL
- en: Security vulnerabilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Neglecting QA and testing can leave software vulnerable to security threats,
    such as code injections, **cross-site scripting** (**XSS**), and other types of
    attacks. This can result in data breaches, compliance violations, and legal liabilities.
    To address this, security testing should be an integral part of the testing and
    QA processes. This includes vulnerability assessments, penetration testing, and
    other security testing techniques to identify and fix security flaws in the software.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Proper documentation is essential for maintaining software quality and facilitating
    troubleshooting, maintenance, and future development. Neglecting QA and testing
    can lead to incomplete or outdated documentation, making it challenging to understand
    and maintain the software. To mitigate this, documentation should be considered
    an essential deliverable of the testing and QA process.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation should be regularly updated to reflect the changes made during
    development and testing and should be easily accessible to the development and
    operations teams. To achieve that, documentation will need to be as close to the
    code as possible to make it easy to update while updating the code. Technical
    documentation (for example, classes, code interfaces, and so on) should be automated
    and available for everyone interested.
  prefs: []
  type: TYPE_NORMAL
- en: Inadequate test coverage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Without proper testing and QA, there may be gaps in the test coverage, resulting
    in untested or poorly tested code. This can lead to unanticipated issues and defects
    slipping through to production. To address this, it’s essential to establish clear
    testing objectives, define test coverage criteria, and use tools for code coverage
    analysis to ensure that all critical code paths are thoroughly tested.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of continuous improvement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Neglecting testing and QA can lead to a complacent culture where quality is
    not prioritized. This can result in a lack of **continuous improvement** in the
    software development process, leading to a decline in software quality over time.
    To overcome this, it’s essential to establish a culture of continuous improvement
    where feedback from testing and QA is used to identify and address process gaps,
    improve testing practices, and enhance overall software quality.
  prefs: []
  type: TYPE_NORMAL
- en: To mitigate these pitfalls, it’s crucial to implement comprehensive and automated
    testing processes, prioritize security testing, maintain up-to-date documentation,
    ensure adequate test coverage, and foster a culture of continuous improvement.
    By addressing these challenges, organizations can ensure the delivery of high-quality
    software that meets customer expectations, drives business success, and results
    in a happy team—let’s not forget that.
  prefs: []
  type: TYPE_NORMAL
- en: While QA will do its best to catch any errors and defects going into the production
    system, nothing beats good monitoring and alerting.
  prefs: []
  type: TYPE_NORMAL
- en: Poor monitoring and feedback loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Monitoring and feedback loops are essential for identifying issues and making
    improvements in DevOps workflows, yet many organizations fail to implement effective
    monitoring and feedback mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: In the context of DevOps, a **feedback loop** refers to the continuous exchange
    of information between different stages of the software development and operations
    life cycle. It involves collecting data, analyzing it, and providing insights
    that drive improvements in the development and operations processes.
  prefs: []
  type: TYPE_NORMAL
- en: Feedback loops play a critical role in enabling teams to identify and rectify
    issues early in the software delivery life cycle, leading to faster development
    cycles, improved quality, and increased on-call staff satisfaction as they won’t
    be woken up at night.
  prefs: []
  type: TYPE_NORMAL
- en: 'A characteristic of good monitoring is its ability to provide timely, accurate,
    and relevant information about the health, performance, and behavior of the system.
    The key characteristics of good monitoring include many different aspects, such
    as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Real-time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comprehensive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Actionable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuously improving
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s break this down.
  prefs: []
  type: TYPE_NORMAL
- en: Real-time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Good monitoring provides real-time visibility into the system’s state, allowing
    teams to quickly detect and address issues before they escalate into critical
    problems. Real-time monitoring helps to identify anomalies, trends, and patterns
    that may indicate potential issues or bottlenecks, enabling proactive troubleshooting
    and resolution.
  prefs: []
  type: TYPE_NORMAL
- en: Comprehensive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Good monitoring covers all critical components of the system, including infrastructure,
    applications, services, and dependencies. It provides a holistic view of the entire
    system, helping teams to understand the relationships and dependencies between
    different components and their impact on system performance and availability.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, monitoring needs to be able to deliver only relevant information,
    not only dry alerting data. For instance, if a server is down, good monitoring
    will not deliver alerts about missing data on CPU or RAM usage, a service being
    down, and so on. The core issue is that the server is not responsive—flooding
    your on-call team with irrelevant information will lead to slower response times.
  prefs: []
  type: TYPE_NORMAL
- en: Scalable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Good monitoring can handle large volumes of data and can scale horizontally
    to accommodate the growing needs of the system. It can collect and process data
    from multiple sources and integrate it with different tools and technologies,
    providing a unified and consolidated view of the system’s health.
  prefs: []
  type: TYPE_NORMAL
- en: Actionable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Good monitoring provides actionable insights that enable teams to make informed
    decisions and take timely actions. It includes rich visualization, reporting,
    and analytics capabilities that help teams to identify trends, correlations, and
    anomalies, and take appropriate actions to optimize system performance and availability.
  prefs: []
  type: TYPE_NORMAL
- en: Continuously improving
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On top of what we’ve discussed in this section, we need to also add that going
    from good to great monitoring will involve continuous reviews of the current state
    and implementation of improvements.
  prefs: []
  type: TYPE_NORMAL
- en: 'This review should be done every month if your organization is changing rapidly,
    or quarterly if you already have well-established monitoring that is doing its
    job properly. This review involves the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Review of the most frequently triggered alerts in the last period and comparing
    alerts with previous periods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review of newly added monitoring metrics to check if they’re relevant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review of alerts that didn’t trigger over a long period of time (3-4 review
    periods)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this data, you can decide which alerts are adding more noise, ensure that
    new metrics are actually what you expect to be monitored, and review alerts that
    didn’t trigger, which will make you aware of metrics you probably don’t need to
    monitor at all.
  prefs: []
  type: TYPE_NORMAL
- en: Even though when talking about monitoring we’re thinking about things such as
    response times or memory consumption, it goes even further than that. You can
    trace the interaction between classes inside software code, latency between your
    system and a database system, or you can measure security. What happens if you
    don’t monitor your security posture? You get vulnerabilities in your systems without
    even knowing about them. Let’s look into security and compliance measures.
  prefs: []
  type: TYPE_NORMAL
- en: Inadequate security and compliance measures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security and compliance are critical concerns for any team, yet many organizations
    fail to adequately address these issues. In the world of DevOps, security is a
    critical aspect that must be integrated into every step of the software development
    life cycle. However, many organizations still struggle with inadequate security
    and compliance measures, which can lead to serious consequences such as data breaches,
    regulatory fines, and reputational damage. In this chapter, we will explore common
    misconceptions and pitfalls related to security measures in DevOps, and discuss
    the characteristics of good security measures that organizations should strive
    for.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will talk here about the following aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: What are security measures?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Characteristics of good security measures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are security measures?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Security measures** refer to the practices, processes, and tools used to
    protect software systems, applications, and data from unauthorized access, breaches,
    or other security threats. In the context of DevOps, security measures are implemented
    throughout the entire software development pipeline, from code creation and testing
    to deployment and operations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Common security measures in DevOps include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Authentication and authorization to ensure that only authorized users have access
    to the system and that they have appropriate permissions to perform their tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypting sensitive data to protect it from being intercepted or accessed by
    unauthorized users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regularly scanning for vulnerabilities in software components and applying patches
    or updates to fix them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring and recording activities within the system to detect and investigate
    security incidents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network security that includes implementing firewalls, **intrusion detection
    systems** (**IDS**) and/or **intrusion prevention systems** (**IPS**), and **virtual
    private networks** (**VPNs**) to protect the network from external threats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing code for security vulnerabilities and using static analysis tools
    to identify potential weaknesses and prevent leaking secrets such as passwords
    and access tokens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having implemented some measures of security, we will need to make sure the
    quality of those measures is as high as we can make them and, at the same time,
    hit the compliance our organization needs to meet legally. Let’s look into the
    characteristics of security measures.
  prefs: []
  type: TYPE_NORMAL
- en: Characteristics of good security measures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Effective security measures in DevOps should possess certain characteristics
    to ensure that they provide adequate protection to the software systems and data.
  prefs: []
  type: TYPE_NORMAL
- en: Good security measures are *proactive* rather than *reactive*, meaning they
    are designed to prevent security breaches rather than just detecting and mitigating
    them after the fact. Proactive security measures may include regular vulnerability
    assessments, code reviews, and automated testing to identify and fix security
    issues before they become critical.
  prefs: []
  type: TYPE_NORMAL
- en: Security measures should also cover all aspects of the software development
    life cycle, from code creation and testing to deployment and operations. This
    includes securing the development environment, the code repository, the build
    and deployment process, and the production environment where the software is deployed
    and operated.
  prefs: []
  type: TYPE_NORMAL
- en: Scalability is another characteristic of good security measures, meaning they
    can be applied to different types of software applications, environments, and
    technologies. They should be flexible enough to adapt to the changing needs of
    the organization and the evolving threat landscape.
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging automation to enable quick and consistent security checks and responses
    is a theme that always repeats itself when talking about DevOps practices. Automation
    can help identify security vulnerabilities, apply patches, and enforce security
    policies in a timely and efficient manner, reducing the risk of human error.
  prefs: []
  type: TYPE_NORMAL
- en: Many organizations need to comply with industry regulations, standards, and
    best practices. Compliance with relevant regulations, such as the **General Data
    Protection Regulation** (**GDPR**), the **Health Insurance Portability and Accountability
    Act** (**HIPAA**), or the **Payment Card Industry Data Security Standard** (**PCI
    DSS**), is crucial to avoid legal and financial risks associated with non-compliance.
    Even if your organization is not regulated by these standards, it’s still a good
    idea to choose the most appropriate and follow it whenever it makes sense. It
    will bring your security level higher than it would be if you didn’t follow anything
    in particular.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, all security measures need to be continuously updated and improved
    to address emerging security threats and technologies. The threat landscape is
    constantly changing, and security measures must be agile and adaptive to effectively
    protect against new vulnerabilities and attacks.
  prefs: []
  type: TYPE_NORMAL
- en: As always, choose the lowest hanging fruit and start there to establish good
    security measures in your team. Revisit it early and often and improve over time.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of scalability and flexibility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many organizations fail to design their DevOps workflows to be scalable and
    flexible, leading to issues when projects grow in size or complexity, even though
    those two things are crucial aspects of DevOps as they enable organizations to
    respond to changing business requirements and handle increasing workloads efficiently.
    However, you can fall into the trap of overlooking these factors, which can lead
    to serious misconceptions and pitfalls. Let’s delve into the importance of scalability
    and flexibility in DevOps and explore some common misconceptions and pitfalls,
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is only for small teams or projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inability to scale infrastructure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flexibility compromises stability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of flexibility in release management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us look at these misconceptions and pitfalls in detail.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is only for small teams or projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One common misconception is that DevOps is only relevant for small teams or
    projects. Some organizations believe that DevOps practices are not necessary for
    larger teams or projects, as they assume that traditional development and operations
    practices can handle the scale.
  prefs: []
  type: TYPE_NORMAL
- en: In reality, DevOps is not limited to the size of the team or project. It is
    a set of principles and practices that can be applied to organizations of all
    sizes. In fact, as teams and projects grow, the need for DevOps becomes even more
    critical to ensure smooth collaboration, faster delivery, and efficient operations.
  prefs: []
  type: TYPE_NORMAL
- en: Inability to scale infrastructure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It’s easy to overlook the scalability of the infrastructure, resulting in system
    failures, performance issues, and unplanned downtime.
  prefs: []
  type: TYPE_NORMAL
- en: Underestimating the infrastructure requirements for the DevOps process will
    lead to many problems in the future, from poor user experience to losing opportunities
    for organizations to earn money. For example, deploying applications in an environment
    with limited resources or inadequate capacity can lead to performance issues and
    system failures when the workload increases. Similarly, not planning for future
    growth or changes in business requirements can result in the need for costly and
    time-consuming infrastructure upgrades or migrations. This is true for both an
    on-premise setup and cloud infrastructure. Furthermore, a shortage of electronic
    devices due to the global pandemic has shown that AWS and other cloud providers
    may sometimes be missing hardware resources. This may impact your organization
    when you try to add more resources to your infrastructure. For an on-prem setup,
    you can control hardware resources more closely.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this pitfall, teams should carefully assess the scalability needs of
    their applications and infrastructure, plan for future growth, and ensure that
    the infrastructure is designed and provisioned to handle increased workloads efficiently.
    This may involve adopting practices such as IaC, automated provisioning, and horizontal
    scaling, which can enable teams to scale their infrastructure quickly and easily
    to meet changing demands. For a cloud setup, you may want to pay upfront for some
    capacity to reserve resources.
  prefs: []
  type: TYPE_NORMAL
- en: Flexibility compromises stability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another misconception about DevOps is that flexibility compromises stability.
    Some organizations fear that introducing flexibility in the development and operations
    process may result in an unstable environment, leading to increased risks and
    vulnerabilities. As a result, they may adopt a rigid approach to DevOps, emphasizing
    stability over flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: However, this misconception can hinder the agility and innovation that DevOps
    aims to achieve. Flexibility is essential in DevOps, as it enables teams to respond
    quickly to changing business requirements, experiment with new ideas, and iterate
    on applications and infrastructure. In fact, DevOps practices such as **continuous
    integration and** **continuous deployment** (**CI/CD**) and automated testing
    are designed to ensure that changes are thoroughly tested and validated before
    being deployed to production, thereby maintaining stability while enabling flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of flexibility in release management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A common pitfall is also the lack of flexibility in release management. **Release
    management** involves the process of deploying changes to production, and you
    may adopt a rigid approach to this, resulting in delays, complexity, and increased
    risks.
  prefs: []
  type: TYPE_NORMAL
- en: For example, following a fixed release schedule or inflexible change management
    process may hinder the ability to respond quickly to business requirements or
    customer feedback, resulting in missed opportunities or increased customer dissatisfaction.
    Similarly, not allowing for experimentation or fast rollback options can limit
    the ability to iterate on changes and quickly address issues that may arise in
    production.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this, you should focus on establishing a flexible and agile release
    management process. This may involve implementing practices such as feature toggles,
    dark launches, canary deployments, and blue-green deployments, which allow for
    gradual and controlled rollouts of changes and provide options for rollback or
    rollback options in case of issues. Additionally, adopting automated release pipelines,
    version control, and monitoring can help teams gain visibility and control over
    the release process.
  prefs: []
  type: TYPE_NORMAL
- en: Building flexible and scalable systems is not a trivial thing to do. On top
    of that, you need to count on changes from the business perspective that will
    affect your current processes. If your process is hard to change or you can’t
    make it scale your systems in response to high traffic, you will experience delays
    and unstable systems respectively.
  prefs: []
  type: TYPE_NORMAL
- en: To understand and identify the current weak points of your processes, you will
    need proper documentation and visualizations, such as network or workflow graphs.
    In the next section, we’re going to talk about this part of the processes you’ve
    established.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of proper documentation and knowledge sharing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Documentation and knowledge sharing are critical for maintaining consistency
    and avoiding errors in DevOps workflows, yet many organizations fail to prioritize
    these activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'In any software development project, documentation plays a crucial role in
    ensuring its success. It serves as a reference guide, provides insights into the
    project’s architecture, design, and implementation details, and aids in maintaining
    and troubleshooting the software. One of the common pitfalls in DevOps is the
    lack of proper and up-to-date documentation, which can lead to confusion, delays,
    and mistakes. To address this issue, it’s essential to understand the different
    types of documentation in software projects and their intended audiences. These
    are set out here:'
  prefs: []
  type: TYPE_NORMAL
- en: Technical documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Process documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operational documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release notes and changelogs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us delve into them in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Technical documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Technical documentation is targeted toward developers, operations teams, and
    other technical stakeholders involved in the software development and deployment
    process. It includes documentation related to system architecture, the code base,
    APIs, database schemas, deployment scripts, configuration files, and other technical
    details. Technical documentation helps in understanding the software’s internal
    workings, making it easier to maintain, troubleshoot, and enhance the system.
  prefs: []
  type: TYPE_NORMAL
- en: Some of this documentation, such as for the code base and APIs, can be automated
    with specialized software. You can ensure your development teams can write self-documenting
    code and, additionally, automate documentation of the code with software such
    as **Doxygen** ([https://www.doxygen.nl/](https://www.doxygen.nl/)), **Swimm**
    ([https://swimm.io/](https://swimm.io/)), or **Redoc** ([https://github.com/Redocly/redoc](https://github.com/Redocly/redoc)).
    To document your API, you can use a project based on OpenAPI, such as **Swagger**
    ([https://github.com/swagger-api/swagger-ui](https://github.com/swagger-api/swagger-ui)).
  prefs: []
  type: TYPE_NORMAL
- en: API documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: API documentation is focused on documenting the APIs exposed by the software,
    which are used for integration with other systems or for building extensions or
    plugins. It includes documentation related to API endpoints, request and response
    formats, authentication and authorization mechanisms, error handling, and other
    API-related details. API documentation helps developers understand how to interact
    with the software programmatically, enabling seamless integration with other systems.
  prefs: []
  type: TYPE_NORMAL
- en: User documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: User documentation is aimed at end users of the software, including customers,
    clients, and other stakeholders who interact with the software. It includes user
    manuals, guides, tutorials, and other resources that explain how to install, configure,
    and use the software effectively. User documentation should be written in a clear
    and concise manner using non-technical language and should cover all the necessary
    functionality and features of the software.
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that end users have the ability to reach out easily to your support teams
    right from the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Process documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Process documentation focuses on documenting the workflows, processes, and procedures
    followed in the software development and deployment life cycle. It includes documentation
    related to coding standards, version control, build and deployment processes,
    testing methodologies, release management, and other development practices. Process
    documentation helps maintain consistency, repeatability, and efficiency in the
    software development process, ensuring that best practices are followed consistently
    across the team.
  prefs: []
  type: TYPE_NORMAL
- en: Operational documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Operational documentation is intended for operations teams responsible for deploying,
    configuring, and managing the software in production environments. It includes
    documentation related to installation instructions, configuration guides, monitoring
    and troubleshooting procedures, **disaster recovery** (**DR**) plans, and other
    operational tasks. Operational documentation helps operations teams in effectively
    managing and maintaining the software in production, ensuring its availability,
    performance, and reliability.
  prefs: []
  type: TYPE_NORMAL
- en: Release notes and changelogs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Release notes and changelogs document the changes and updates made to the software
    in each release. They provide a summary of new features, bug fixes, and other
    changes, along with instructions on how to upgrade or migrate to the latest version.
    Release notes and changelogs help keep stakeholders informed about the software’s
    progress, and they serve as a historical record of changes made to the software
    over time.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, documentation can be tricky to organize as you first need to
    know your intended audience and purpose. With the information we’ve been talking
    about in this section, you should be able to identify that very quickly. Also,
    it’s worth adding that documentation is never set in stone and needs to be updated
    regularly to reflect what’s the current situation of your application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll be talking about resistance to change. The bigger
    the organization, the bigger it gets because of inertia. Let’s look into it from
    the DevOps point of view.
  prefs: []
  type: TYPE_NORMAL
- en: Overcoming resistance to change
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps requires a significant cultural shift in many organizations, and resistance
    to change can be a significant obstacle to successful implementation. Resistance
    to change is a known element playing a major role in the implementation of new
    processes, new tools, and other cultural changes in any organization. This is
    why just a few pages ago we said that *“It has always been done that way”* is
    one of the worst things to say. Improvement requires changes, and changes require
    an open mind and a readiness to destroy the status quo.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several sources of change resistance. One of them is the fear of
    change. Changing the organization will introduce difficulties: a new process increases
    the probability of failure. It also requires learning new things and dropping
    already well-known and tested solutions. For most people, this is an area beyond
    their comfort zone.'
  prefs: []
  type: TYPE_NORMAL
- en: The other change resistance factor is organizational inertia. Quite often, the
    way that any change is introduced in an organization requires a lot of paperwork
    and acknowledgment from upper management. Read the previous paragraph about the
    fear of change. In companies, one of the metrics of performance is the amount
    of work pushed out. Anyone who accepts a change that leads to delays will be in
    a hot seat.
  prefs: []
  type: TYPE_NORMAL
- en: There are some strategies to overcome this resistance. The basis for all of
    them is transparent communication that goes both ways. Anyone introducing the
    change must communicate it in a clear way with heads-up time provided. People
    whose work will be influenced by the change must have time to consider what is
    going to happen and how they fit into it. They must be able to give their opinion
    and feel that they are being heard.
  prefs: []
  type: TYPE_NORMAL
- en: The biggest chance of a change implementation failing comes if it feels forced
    and makes people feel like they don’t matter at all throughout the whole process.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final chapter of this book delved into potential pitfalls and misconceptions
    that can impede the successful implementation of DevOps practices. We’ve emphasized
    the significance of fostering a collaborative culture and prioritizing continuous
    improvement to achieve desired outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve gone through various common pitfalls, including neglecting testing and
    QA, relying excessively on automation, overlooking proper monitoring and feedback
    loops, inadequately addressing security and compliance measures, failing to achieve
    scalability and flexibility, and not aligning with business objectives.
  prefs: []
  type: TYPE_NORMAL
- en: One of the key areas of focus in this chapter was the importance of documentation
    and knowledge sharing, as well as strategies to overcome resistance to change.
    Many organizations struggle with these non-technical aspects of DevOps implementation,
    and the chapter provided practical guidance on how to address them effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Another crucial aspect highlighted in this chapter was the need for robust monitoring
    and feedback loops to provide timely insights into the performance and stability
    of the DevOps pipeline. Without proper monitoring, it can be challenging to identify
    and rectify issues promptly, leading to prolonged downtimes and decreased productivity.
  prefs: []
  type: TYPE_NORMAL
- en: We hope that you will be able to have an influence on some aspects of issues
    you might encounter during your DevOps journey and will successfully straighten
    the path for others to join the organization after you. With the knowledge embedded
    in this publication, you’re well equipped to take the challenge and have well-grounded
    knowledge to build upon.
  prefs: []
  type: TYPE_NORMAL
- en: Good luck!
  prefs: []
  type: TYPE_NORMAL
