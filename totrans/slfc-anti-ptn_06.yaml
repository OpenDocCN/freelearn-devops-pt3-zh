- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Keeping Integration Straight
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持集成清晰
- en: This chapter examines anti-patterns related to integrations with other systems,
    a critical aspect of modern Salesforce implementations. The first part of the
    chapter explores anti-patterns in the integration landscape and integration patterns,
    the second part addresses potential pitfalls in the design and use of interfaces,
    and the third focuses on issues with integration styles. As always, we conclude
    the chapter by distilling the key takeaways.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨了与其他系统集成相关的反模式，这是现代Salesforce实施中的一个关键方面。本章的第一部分讨论了集成架构和集成模式中的反模式，第二部分探讨了接口设计和使用中的潜在陷阱，第三部分集中讨论了集成风格的问题。像往常一样，我们通过总结关键要点来结束本章。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: How to not misuse technology to avoid overcomplicating your systems landscape
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何避免滥用技术，避免让系统架构过于复杂
- en: When it is and isn’t appropriate to create custom services for integrations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时适合，何时不适合为集成创建自定义服务
- en: How to avoid common failures in designing interfaces
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何避免在设计接口时的常见失败
- en: How to use event-based integrations well
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何良好地使用基于事件的集成
- en: How to use integration patterns appropriately
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何正确地使用集成模式
- en: How AI will impact integration patterns
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AI 如何影响集成模式
- en: After completing this chapter, you will have a good idea about how to better
    select integration patterns and structure your integration architecture by learning
    about various ways in which it can go terribly wrong. As Salesforce continues
    to evolve, understanding these integration anti-patterns becomes increasingly
    crucial for architects and developers working with the platform.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，你将对如何更好地选择集成模式和结构化集成架构有一个清晰的理解，通过学习各种可能出错的方式来避免这些问题。随着Salesforce的不断发展，理解这些集成反模式对于从事该平台工作的架构师和开发人员来说变得越来越重要。
- en: Messing up the integration landscape
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搞乱集成架构
- en: This section covers two anti-patterns that in different ways can create havoc
    in your integration landscape. We will start by looking at how not to use middleware.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了两种反模式，它们以不同的方式可能会在你的集成架构中造成混乱。我们将首先讨论如何避免错误地使用中间件。
- en: Middleware in name only (MINO)
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 名义上的中间件（MINO）
- en: Using middleware to create point-to-point connections rather than using its
    extended capabilities
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用中间件来创建点对点连接，而不是利用其扩展功能
- en: Example
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: PumpCo is a large B2B company that specializes in the production of pumps for
    industrial production. It operates in more than 30 markets and has historically
    underinvested in IT systems and used largely manual processes for sales that have
    varied substantially between countries and product lines.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: PumpCo 是一家大型 B2B 公司，专注于为工业生产制造泵。它在30多个市场运营，历史上在IT系统上的投入较少，并且在销售上主要使用手工流程，这些流程在不同国家和产品线之间存在显著差异。
- en: Over the past year, they have started to implement Salesforce Sales Cloud and
    CPQ to drive standardization of the sales process globally. Their one major IT
    platform that has received substantial investment in the past is SAP and, fundamentally,
    SAP runs all key parts of the business today.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的一年里，他们开始实施Salesforce Sales Cloud和CPQ，以推动全球销售流程的标准化。他们过去在IT平台上的一项重大投资是SAP，基本上，SAP目前管理着公司所有关键业务。
- en: Michelle is brought in as an integration architect on the Salesforce implementation
    at an early stage. The integration roadmap is very ambitious as the business wants
    to see all relevant data and processes seamlessly operate across the Salesforce/SAP
    boundary. Fundamentally, they want to be able to access all the relevant back-office
    data and processes directly in Salesforce without the need for a context switch.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Michelle 在Salesforce实施的早期阶段作为集成架构师加入。集成路线图非常雄心勃勃，因为业务希望看到所有相关数据和流程能够在Salesforce/SAP边界上无缝运作。从根本上讲，他们希望能够在Salesforce中直接访问所有相关的后台数据和流程，而不需要切换上下文。
- en: Once the initial mapping has been completed, there are 75 discrete integration
    points covering everything from pricing and logistics to HR that would need to
    be implemented to give the full experience that the business is looking for. The
    good news, however, is that many of these integration points can be grouped into
    similar areas, such as a *customer* or *order interface* .
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成初步的映射，就有75个离散的集成点，涵盖从定价和物流到人力资源等各个方面，需要实现这些集成点，才能提供业务所期望的完整体验。然而，好消息是，许多集成点可以分为相似的领域，例如*客户*或*订单接口*。
- en: The architects from the Salesforce and SAP sides discuss a number of alternative
    architectures and implementation approaches for creating a small number of stable
    interfaces that would cater to the majority of use cases, but unfortunately, progress
    is slow and there is no real agreement between stakeholders and architects. There
    is a large number of potential solutions in play as well as several technologies
    that could potentially do the job, and the willingness to compromise is low.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Salesforce和SAP方面的架构师讨论了多种替代架构和实现方法，目的是创建少量稳定的接口，以满足大多数用例的需求，但不幸的是，进展缓慢，利益相关者和架构师之间没有真正达成一致。有许多潜在的解决方案和几种可能完成任务的技术，而各方愿意妥协的意愿较低。
- en: The two sides instead agree to let the middleware team manage the process. PumpCo
    has just bought a new middleware platform, and the team there is looking for opportunities
    to get started.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 双方最终同意让中间件团队来管理这个过程。PumpCo刚刚购买了一个新的中间件平台，团队正在寻找机会开始工作。
- en: The middleware team will expose services to Salesforce and translate the calls
    to SAP. Any modifications to the APIs will also be its responsibility. Thus, the
    two platform teams don’t have to agree on an approach and can work independently.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件团队将向Salesforce暴露服务，并将调用转换为SAP。任何API的修改也将是它的责任。因此，两个平台团队无需就方法达成一致，可以独立工作。
- en: As the project progresses, Michelle makes a count of the interfaces Salesforce
    is calling on the middleware. She counts 45. Not quite the original 75, but then
    the scope has also been somewhat reduced as they have gone along.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 随着项目的推进，米歇尔统计了Salesforce调用中间件的接口数量。她数了45个。虽然比最初的75个少，但随着项目的推进，范围也有所缩小。
- en: 'Here’s a diagram of PumpCo’s integration architecture:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是PumpCo集成架构的示意图：
- en: '![Figure 6.1 – PumpCo integration architecture](img/B30991_06_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – PumpCo 集成架构](img/B30991_06_01.jpg)'
- en: Figure 6.1 – PumpCo integration architecture
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – PumpCo 集成架构
- en: From what she can see, most of these middleware interfaces do little other than
    simply forward a call from Salesforce to SAP and back again. She wonders if that
    is really the best approach, but it’s not her problem anymore.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从她所看到的，许多这些中间件接口几乎只是简单地将Salesforce的调用转发给SAP，然后再返回。她在想，这真的是最好的方法吗？但这已不再是她的问题。
- en: However, over time, as Salesforce starts seeing more use, issues start occurring
    with the integrations. The error rate is high, there are performance issues, and
    maintenance is getting increasingly complex. Integrations, overall, are causing
    the majority of technical issues on the platform.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着时间的推移，随着Salesforce的使用量增加，集成开始出现问题。错误率较高，性能问题，维护变得越来越复杂。总体而言，集成导致了平台上的大多数技术问题。
- en: A consultant is brought in to assess the situation, and they recommend rationalizing
    the integration architecture as the current setup effectively consists of 45 increasingly
    customized point-to-point connections via the middleware. This creates a lot of
    potential for failure and is generally hard to understand.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一名顾问被请来评估情况，并建议对集成架构进行合理化，因为当前的设置实际上包含了通过中间件连接的45个日益定制的点对点连接。这种设置带来了很大的失败潜力，且通常很难理解。
- en: Michelle is asked to participate in the redesign process, and after several
    weeks of design work, they end up with a proposal not too far away from one of
    the iterations that were done during the initial project implementation. When
    a senior stakeholder pointedly asks why this wasn’t done in the first place, no
    one is really able to give a convincing answer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 米歇尔被要求参与重新设计过程，在几周的设计工作后，他们最终得出了一个与初期项目实施过程中所做的某个迭代方案相差无几的提案。当一位高级利益相关者直接询问为什么一开始不做这个时，没有人能够给出令人信服的回答。
- en: Problem
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题
- en: The MINO anti-pattern tries to reduce the complexity of creating a good integration
    architecture by introducing middleware. However, it does so in a way that fails
    to leverage the capabilities of a middleware platform, instead simply recreating
    flows via the middleware that might have been found in a point-to-point scenario.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: MINO反模式试图通过引入中间件来减少创建良好集成架构的复杂性。然而，它的做法未能充分利用中间件平台的能力，而是通过中间件重新创建了本应出现在点对点场景中的流。
- en: It tends to occur in organizations that have complex system landscapes with
    many interfaces and touchpoints between systems. However, in these organizations,
    there is often little technical governance coordinating between different silos,
    leading to a messy integration architecture.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况通常出现在具有复杂系统景观、系统间有许多接口和接触点的组织中。然而，在这些组织中，通常缺乏协调不同部门之间的技术治理，从而导致集成架构的混乱。
- en: Other characteristics that are often found with the MINO anti-pattern include
    the presence of dated and inflexible system APIs on key platforms and difficulty
    in agreeing on standard representations of core business entities across those
    key platforms, making it impossible to settle on common interfaces or APIs.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: MINO反模式的另一个常见特征是关键平台上存在过时且不灵活的系统API，并且很难达成一致的标准表示法来表示这些关键平台上的核心业务实体，这使得无法就通用接口或API达成一致。
- en: Proposed solution
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提出的解决方案
- en: The solution proposed by MINO is simply to introduce a middleware platform without
    paying too close attention to how it is used. By introducing a modern middleware
    platform, the complexities and inflexibilities of legacy systems can at least
    be partially hidden, which leads to good initial results.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: MINO提出的解决方案仅仅是引入一个中间件平台，而没有过多关注如何使用它。通过引入现代中间件平台，至少可以部分掩盖遗留系统的复杂性和不灵活性，从而取得良好的初步结果。
- en: That is to say, MINO often seems right on the surface, but if the middleware
    implementation only replicates the existing mess in a new format, relatively little
    is gained. Not nothing, mind you; you may still get some basic middleware capabilities
    such as better error logging, a retry mechanism, or some easier-to-use protocol
    conversion.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，MINO表面上看似正确，但如果中间件的实现只是以新的形式复制现有的混乱，那么收获相对较小。并不是完全没有收获；你仍然可能获得一些基本的中间件能力，如更好的错误日志记录、重试机制或更易于使用的协议转换。
- en: Another, and often more influential, reason to go down the road of this anti-pattern
    is that it decouples teams on core platforms from having to deal directly with
    each other. You can often have very different views of the world if you’re working
    on the CRM side than if you are working on the ERP side of a key integration.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个，往往更具影响力的原因是，这种反模式使得核心平台的团队不必直接处理彼此之间的关系。如果你在CRM方面工作，你的视角通常会与在ERP方面工作的视角非常不同，尤其是在关键集成的情况下。
- en: MINO allows different teams to only have to deal with the common middleware
    team, who are then given the responsibility for managing the rest. That, unfortunately,
    tends to lead to architectures that don’t really move much beyond the basics.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: MINO允许不同的团队只需与共同的中间件团队打交道，后者则负责管理其余部分。不幸的是，这通常会导致架构只停留在基础层面。
- en: Results
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结果
- en: The result of MINO is often turning your system landscape into an even greater
    spaghetti-like mess than it was before. Now, after all, you have middleware in
    the center, so you can pay less attention to the details of the integration.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: MINO的结果往往是将你的系统景观变成比之前更加混乱的“意大利面条”式的架构。毕竟，现在中间件处于核心位置，因此你可以减少对集成细节的关注。
- en: 'This lack of attention usually has the following consequences:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这种忽视通常会带来以下后果：
- en: Hard-to-understand integration architecture with too many individual interfaces
    and point-to-point connections, albeit mediated by the middleware
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 难以理解的集成架构，存在过多的单独接口和点对点连接，尽管这些连接通过中间件进行调解
- en: Increased maintenance costs as the complexity is still high and there are now
    more teams involved
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护成本增加，因为复杂度仍然很高，而且现在涉及更多的团队
- en: Lack of technical governance and a potential lack of awareness that such governance
    is even needed
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺乏技术治理，以及潜在的对这种治理必要性缺乏认知
- en: Increasing error rates on integrations and a commensurately increased fix time
    as teams try to track down errors across platforms
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成中的错误率增加，以及由于团队试图跨平台追踪错误而导致的修复时间相应增加
- en: Decreasing performance as there is a more complex flow in place that spans more
    platforms
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能下降，因为存在更复杂的流程，跨越多个平台
- en: Overall, if all you are going to do with your middleware is proxy point-to-point
    connections, you are probably better off not using it at all.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，如果你只是让中间件充当点对点连接的代理，可能完全不使用中间件更好。
- en: Better solutions
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好的解决方案
- en: What the MINO anti-pattern teaches is that there is no shortcut you can take
    to get your integration architecture right. You have to carefully consider the
    linkages and dependencies between systems, the business requirements both today
    and going forward, how your master data is distributed, which core capabilities
    your key platforms have, and how you can structure interfaces and patterns to
    best support all these elements.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: MINO反模式教给我们的是，没有捷径可以走来正确建立集成架构。你必须仔细考虑系统之间的连接和依赖关系，当前及未来的业务需求，主数据的分布情况，关键平台所具备的核心功能，以及如何构建接口和模式，以最佳方式支持这些元素。
- en: 'Some common middleware capabilities are shown in the following diagram:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图展示了一些常见的中间件功能：
- en: '![Figure 6.2 – Common middleware capabilities](img/B30991_06_02.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图6.2 – 常见的中间件功能](img/B30991_06_02.jpg)'
- en: Figure 6.2 – Common middleware capabilities
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – 常见的中间件功能
- en: With that in mind, you can select the right tools for the job, which may very
    well be a middleware tool. However, before you have thought about which interfaces
    you will need to support across the business and which integration patterns you
    can and must support for different scenarios, and determined how you are going
    to do technical governance across different teams, you shouldn’t be jumping at
    any tool, no matter how cool it looks. We will now move on to the next anti-pattern,
    service proliferation syndrome.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，你可以选择适合的工具来完成任务，这很可能是一个中间件工具。然而，在你尚未思考清楚将支持哪些跨业务的接口、为不同场景支持哪些集成模式、并确定如何在不同团队之间进行技术治理之前，不能急于选择任何工具，不论它看起来多么酷。接下来我们将讨论下一个反模式——服务膨胀综合症。
- en: Service proliferation syndrome
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务膨胀综合症
- en: '*Service proliferation syndrome is an anti-pattern where an excessive number
    of custom services are created, often without proper justification or consideration*
    *of alternatives.*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*服务膨胀综合症是一种反模式，指的是在没有充分的理由或考虑替代方案的情况下，创建过多的自定义服务。*'
- en: Example
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: OmniCo has consistently positioned itself as a technology leader and deploys
    many cutting-edge software platforms across its many diversified service lines.
    The company was an early adopter of **service-oriented architecture** ( **SOA**
    ), which they still use to great advantage combined with an **event-driven architecture**
    ( **EDA** ) for high-velocity data and processes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: OmniCo始终将自己定位为技术领导者，并在多个多元化的服务领域中部署了许多前沿的软件平台。该公司是**面向服务架构**（**SOA**）的早期采纳者，并结合**事件驱动架构**（**EDA**）在高速数据和流程中取得了巨大优势。
- en: OmniCo is now implementing Salesforce as a replacement for its old Siebel CRM
    system, which served as an integration hub for many other systems. The Siebel
    CRM was heavily customized to OmniCo processes, and the company is expecting that
    the new Salesforce system will be as well. While their implementation partner
    has made a reasoned argument for staying with standard capabilities, this goes
    against the grain of how OmniCo has historically done things, and they are not
    really looking to change their approach as part of the CRM project.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: OmniCo现在正在实施Salesforce，作为其旧Siebel CRM系统的替代品，后者曾作为许多其他系统的集成中心。Siebel CRM系统被高度定制以适应OmniCo的流程，公司期望新的Salesforce系统也能如此。虽然实施伙伴提出了保持标准功能的合理论点，但这与OmniCo历史上的做法相悖，且他们并不打算在CRM项目中改变这种做法。
- en: 'Here’s what the old Siebel setup looked like:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是旧的Siebel设置：
- en: '![Figure 6.3 – Old Siebel setup at OmniCo](img/B30991_06_03.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图6.3 – OmniCo的旧Siebel设置](img/B30991_06_03.jpg)'
- en: Figure 6.3 – Old Siebel setup at OmniCo
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – OmniCo的旧Siebel设置
- en: For Erhat, the consulting manager in charge of the integration part of the implementation
    project, this is causing a lot of anxiety. He is being pushed by a number of senior
    stakeholders from OmniCo toward building a range of special business services
    that would fit into the OmniCo SOA.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于负责实施项目集成部分的咨询经理Erhat来说，这引发了很多焦虑。他正受到来自OmniCo的多位高级利益相关者的压力，要求构建一系列能够融入OmniCo
    SOA的特殊业务服务。
- en: Erhat has tried building customized APIs on vanilla Salesforce in the past,
    and the experience, while ultimately successful, was neither straightforward nor
    fast. In fact, given the number of custom services that are being mentioned, he
    is in doubt about the basic feasibility, given constraints on time, budget, and
    people with the necessary skillsets.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Erhat 曾尝试在纯净的 Salesforce 平台上构建定制的 API，虽然最终成功，但过程既不简单也不快。事实上，考虑到提到的定制服务数量，他对于在时间、预算和具备必要技能的人员限制下的基本可行性存有疑虑。
- en: After some pushback, he agrees with stakeholders to deliver two crucial services
    using interfaces similar to the ones exposed by the old Siebel system that are
    used in order management, and that would take a lot of time to re-engineer on
    a different pattern.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一些反对意见后，他同利益相关者达成一致意见，使用类似于旧 Siebel 系统中用于订单管理的接口来交付两项关键服务，这需要大量时间来在不同模式上重新设计。
- en: These are delivered but prove difficult to get through testing, partially because
    the testing protocols for the services are incomplete and partially because the
    complexity is extraordinarily high.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些服务已经交付，但在测试过程中证明非常困难，部分原因是服务的测试协议不完整，部分原因是复杂性异常高。
- en: As the first two services are near completion, a crisis meeting is called by
    OmniCo’s enterprise architecture board. They have just realized that not all the
    business services provided by Siebel will be available in the new Salesforce setup.
    In the view of several members of the board, this will fundamentally undermine
    a range of business processes as other systems would need to change their integration
    approach substantially or switch to manual processing of certain steps.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当头两项服务接近完成时，OmniCo 的企业架构委员会召开了一次危机会议。他们刚刚意识到在新的 Salesforce 设置中，并不是所有由 Siebel
    提供的业务服务都将可用。在董事会的几位成员看来，这将从根本上破坏一系列业务流程，因为其他系统需要大幅改变它们的集成方法，或者转向某些步骤的手动处理。
- en: 'Erhat, not knowing the processes at OmniCo very well, finds himself unable
    to argue on the merits of the case. The members of the board present him with
    definitions for an additional 13 services that cover different parts of the lead-to-cash
    process and that were available in the previous Siebel setup. Here’s a schematic
    view of the integrations:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Erhat 对 OmniCo 的流程不太了解，因此无法就案件的优点进行辩论。董事会成员向他提供了另外 13 项服务的定义，涵盖了从潜在客户到现金流程的不同部分，并且这些服务在之前的
    Siebel 设置中是可用的。以下是集成的示意图：
- en: '![Figure 6.4 – Schematic view of OmniCo Salesforce integrations, not including
    ESB](img/B30991_06_04.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – OmniCo Salesforce 集成的示意图，不包括 ESB](img/B30991_06_04.jpg)'
- en: Figure 6.4 – Schematic view of OmniCo Salesforce integrations, not including
    ESB
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – OmniCo Salesforce 集成的示意图，不包括 ESB
- en: Erhat can only really push back on a practical level, which he does, arguing
    that the services are outside the scope and are not included in pricing and that
    he doesn’t have the team to deliver the solution. OmniCo grumbles a bit and there
    are a few escalation meetings. However, Erhat is eventually told not to worry—they
    will solve it some other way.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Erhat 实际上只能在实际层面上进行反对，他这样做了，认为这些服务超出了范围，不包括在定价内，并且他没有团队来提供解决方案。OmniCo 有些不满，并且进行了一些升级会议。然而，最终告诉
    Erhat 不要担心——他们会以其他方式解决这个问题。
- en: That way turns out to be bringing in a team of disparate contractors to quickly
    build the services alongside the main consulting partner’s team. Erhat can only
    wait and observe as the contractors run into the inevitable technical complexities.
    He leaves the project prior to going live with something of a bad taste in his
    mouth.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是引入了一个由各种承包商组成的团队，他们将快速构建这些服务，与主要的咨询合作伙伴的团队并肩作战。Erhat 只能等待和观察，看承包商们遇到不可避免的技术复杂性。他在项目上线前离开，留下一些不愉快的味道。
- en: Twelve months later, he is back at OmniCo. He has been brought in as an expert
    on the company’s Salesforce APIs, which have proved very error-prone and expensive
    to maintain.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 十二个月后，他再次回到了 OmniCo。他被引入作为该公司 Salesforce API 的专家，这些 API 显得非常容易出错且维护成本高昂。
- en: OmniCo are looking for the rationale for why it was built like this in the first
    place and what to do to fix it. They are also considering different approaches
    such as changing integration patterns or bringing in some middleware. Erhat takes
    a deep breath and starts planning the analysis.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: OmniCo 正在寻找建立此类系统的原因以及如何修复它的理由。他们还在考虑不同的方法，比如改变集成模式或引入一些中间件。Erhat 深吸一口气，开始规划分析工作。
- en: Problem
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题
- en: The problem that service proliferation syndrome constitutes is how to fit Salesforce
    into an existing enterprise architecture that will have preexisting expectations
    of the capabilities delivered by its key systems. That may be an SOA, as in our
    example, or a different organizing principle, but typically, one that requires
    very specific things from key platforms.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 服务扩展综合症所构成的问题是如何将 Salesforce 融入现有的企业架构中，同时又要满足这些架构中已经存在的对关键系统能力的期望。这可能是一个 SOA，正如我们例子中所示，或者是一个不同的组织原则，但通常来说，要求关键平台提供非常具体的功能。
- en: This anti-pattern is common across a variety of platforms as it will potentially
    affect any newcomer to an integration landscape. In the past, it would have been
    more common as organizations were busily building SOAs, often without a lot of
    thought as to the organization of specific services.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这种反模式在各种平台中都很常见，因为它可能影响任何新的集成平台。在过去，这种情况更为常见，因为组织们忙于构建 SOA，而往往没有深入考虑具体服务的组织结构。
- en: This anti-pattern often arises from a misunderstanding of microservices architecture
    or a desire to solve every integration challenge with a custom service.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这种反模式通常源于对微服务架构的误解，或者是希望通过定制服务解决每个集成挑战的愿望。
- en: Today, it is perhaps most commonly encountered when old systems are replaced
    and interfaces are required that don’t quite fit with the standard capabilities
    of built-in system APIs. While Salesforce has extensive APIs, they are very data
    model-centric, and many integration architectures are built along different principles,
    such as coarse-grained business services, which aren’t aligned at all.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，这种情况最常见于老旧系统被替换时，所需的接口与内建系统 API 的标准功能不完全匹配。虽然 Salesforce 提供了广泛的 API，但它们非常依赖于数据模型，而许多集成架构是基于不同的原则构建的，例如粗粒度的业务服务，而这些原则与
    Salesforce 的数据模型完全不对齐。
- en: Proposed solution
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提出的解决方案
- en: Service proliferation syndrome addresses the issue of navigating the integration
    landscape by advocating for the unnecessary creation of new custom services for
    each integration need. This approach overlooks the potential of leveraging existing
    services or standard APIs, which could adequately meet these requirements without
    adding unnecessary complexity.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 服务扩展综合症处理的是在集成过程中如何应对这个问题，倡导为每个集成需求不必要地创建新的定制服务。这种方法忽视了利用现有服务或标准 API 的潜力，而这些现有服务或
    API 足以满足这些需求，且不会增加不必要的复杂性。
- en: This is another anti-pattern that can seem deceptively rational as you are,
    after all, directly delivering business value and sometimes in line with expectations
    from cross-company technical governance forums. Therefore, you can be under a
    lot of pressure to go down this route, knowing full well the damage it is going
    to do to your platform in the long run.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个反模式，尽管它看起来似乎合乎逻辑，因为毕竟，你是在直接交付业务价值，并且有时符合跨公司技术治理论坛的预期。因此，你可能会在很大压力下走这条路，明知这样做会在长期内对平台造成损害。
- en: Because the capabilities are there on the platform and the need is there in
    the enterprise environment, fighting this anti-pattern can sometimes be impossible.
    This is even more true because the costs only really accumulate over time.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因为平台上具备相关能力，而企业环境中又有这种需求，反抗这种反模式有时几乎是不可能的。这一点尤其正确，因为这些成本通常是随着时间的推移才逐渐累积的。
- en: Results
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结果
- en: The first issue you are likely to see with service proliferation syndrome is
    increased complexity and build costs. Custom services on Salesforce, while feasible
    and sometimes the right choice, are complex to get right. Salesforce isn’t inherently
    an API platform, which is a large reason why they acquired MuleSoft a few years
    back.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你最先会遇到的服务扩展综合症问题是复杂性和构建成本的增加。尽管在 Salesforce 上创建定制服务是可行的，有时也是正确的选择，但它们很难做到完美。Salesforce
    本身并不是一个 API 平台，这也是它几年前收购 MuleSoft 的重要原因之一。
- en: The increased complexity will over time lead to increased maintenance costs
    and not just on Salesforce. The various teams using the proliferation of services
    may also face ongoing costs to rework and upgrade their connections.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，复杂性增加将导致维护成本上升，而且不仅仅是 Salesforce 的成本。使用这些扩展服务的各个团队也可能面临重新工作和升级其连接的持续成本。
- en: In a DevOps context, service proliferation poses significant challenges to CI/CD
    pipelines by introducing increased complexity that makes automation and orchestration
    more difficult. This complexity can lead to more frequent deployment failures,
    as the interactions between numerous services can be unpredictable. Furthermore,
    the expanded surface area for potential issues extends recovery times, as teams
    must navigate a greater number of components to diagnose and resolve failures.
    As a result, organizations may find it harder to achieve the speed and reliability
    that DevOps aims to deliver, ultimately impacting the overall efficiency of software
    delivery.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 环境下，服务过度繁杂会给 CI/CD 管道带来显著挑战，增加的复杂性使得自动化和编排变得更加困难。这种复杂性可能导致更频繁的部署失败，因为众多服务之间的相互作用是不可预测的。此外，潜在问题的增多会延长恢复时间，因为团队必须遍历更多组件以诊断和解决故障。因此，组织可能会发现更难实现
    DevOps 旨在提供的速度和可靠性，最终影响软件交付的整体效率。
- en: Sometimes, a custom service can be the right choice, and the benefits can outstrip
    the costs both for the initial build and for the maintenance. That is rarely—if
    ever—the case for 15 custom services as in our example. If you think you need
    that, you probably need to rethink your approach.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，自定义服务是正确的选择，且其好处可以超越初始构建和维护的成本。但对于我们示例中的 15 个自定义服务来说，这种情况几乎是不存在的。如果你认为你需要这些服务，那么你可能需要重新考虑你的方法。
- en: Better solutions
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好的解决方案
- en: The first piece of advice is to start by looking at standard integration patterns
    to see whether you can find a standard piece of technology that fits the bill.
    Maybe there is a way of using standard APIs. Maybe you can use a batch process.
    Maybe you can emit events and have other systems subscribe to them.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个建议是，首先查看标准的集成模式，看看你是否能找到合适的标准技术。也许你可以使用标准的 API，也许你可以使用批处理过程，也许你可以发布事件并让其他系统订阅它们。
- en: You should look broadly and not immediately jump to a custom interface, even
    if that seems like a good initial fit. The danger is that you go for the gold-plated
    solution, not realizing the real long-run costs of the decision.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该广泛地考虑，而不是立刻跳到自定义接口，尽管这看起来是一个好的初步选择。危险在于，你可能会选择看起来光鲜的解决方案，却没有意识到这个决策在长期内的实际成本。
- en: If you do decide that a large number of custom APIs are required—and there are
    situations where that can be justified—you should use a platform that is built
    for this purpose to implement. MuleSoft would be the canonical choice for Salesforce,
    but there are others in the marketplace that can fill this niche.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你确实决定需要大量的自定义 API —— 在某些情况下这可以被证明是合理的 —— 你应该选择一个专为此目的构建的平台来实施。对于 Salesforce，MuleSoft
    是经典的选择，但市场上也有其他可以填补这个空缺的解决方案。
- en: 'To enhance our service offerings, we can take a step-by-step approach:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增强我们的服务产品，我们可以采取逐步推进的方法：
- en: Identify core business capabilities.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 识别核心业务能力。
- en: Map existing services and APIs.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 映射现有的服务和 API。
- en: Identify gaps in our services.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 识别我们服务中的空白。
- en: Consider standard solutions before opting for custom services.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择自定义服务之前，考虑标准化解决方案。
- en: Additionally, we can consider implementing a robust API management strategy
    to promote the reuse of services and discourage unnecessary service creation.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以考虑实施一个强大的 API 管理策略，以促进服务的重用并避免不必要的服务创建。
- en: In a DevOps context, service proliferation can lead to increased complexity
    in CI/CD pipelines and more challenging release management. Therefore, adopting
    a more disciplined approach to service creation is essential, as it aligns better
    with the DevOps principles of simplicity and automation. This ensures streamlined
    processes and enhances overall operational efficiency.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 环境下，服务过度繁杂可能导致 CI/CD 管道中的复杂性增加，发布管理变得更加困难。因此，采用更为规范的服务创建方法至关重要，因为这与
    DevOps 的简化和自动化原则更为契合。这确保了流程的流畅性并提升了整体运营效率。
- en: Overall, you run the risk of overcomplicating both your Salesforce interface
    and your integration landscape by indiscriminately building services. As always,
    consider the hard trade-offs and make a decision based on a real view of the pros
    and cons. We will now move on to the next section, where we discuss anti-patterns
    that relate specifically to the design of interfaces.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，如果盲目地构建服务，你会冒着使你的 Salesforce 界面和集成环境过于复杂的风险。像往常一样，考虑实际的利弊权衡，并基于真实的优缺点做出决策。接下来，我们将进入下一部分，讨论与接口设计相关的反模式。
- en: Interfacing indecently
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不当的接口设计
- en: In this section, we will look at two common anti-patterns that affect the design
    of integrations at a concrete level. The first, fat interface, looks at a problem
    with interface design, while the second, chatty integration, looks at a problem
    with how interfaces are used.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨影响集成设计的两个常见反模式。在具体层面上，第一个是繁重接口，着眼于接口设计中的问题，而第二个是频繁通信集成，着眼于接口使用中的问题。
- en: Fat interface
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 繁重接口
- en: When a single interface starts doing too many things, you run into a host of
    problems.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个接口开始处理太多任务时，你会遇到一系列问题。
- en: Example
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: Joe works as an integration architect for a small Salesforce partner that specializes
    in complex implementations often requiring substantial amounts of code or other
    kinds of customization. He has just started a new contract with RealCo, a major
    real estate investment company that uses Salesforce as the key system of engagement
    across the entire business.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Joe是一个集成架构师，供职于一家专门从事复杂实现的小型Salesforce合作伙伴公司，通常需要大量代码或其他类型的定制。他刚刚开始与RealCo签订的新合同，RealCo是一家主要的房地产投资公司，Salesforce是其整个业务中主要的互动系统。
- en: The work he is initially contracted to do includes building a custom interface
    for accessing information about valuations that is used by RealCo’s partners as
    part of making deals. The information is held in RealCo’s Salesforce org and needs
    to be available in real time.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 他最初承包的工作包括为访问估值信息构建一个定制接口，供RealCo的合作伙伴在进行交易时使用。信息存储在RealCo的Salesforce组织中，需要实时可用。
- en: Joe sets up the API constituting the interface on RealCo’s middleware platform
    and orchestrates calls to a few different Salesforce standard APIs and a single
    custom one as part of the implementation. However, close to the go-live of the
    new interface, a bunch of new use cases drops on his desk.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Joe在RealCo的中间件平台上设置了组成接口的API，并协调对几个不同的Salesforce标准API和一个自定义API的调用，作为实现的一部分。然而，接近新接口上线时，一大堆新的用例掉到了他的桌子上。
- en: These include not just extensions to the valuation API, such as getting historical
    valuations and trend data, but also entirely different categories of property
    data, including real-time updates through platform events, changes in data streams
    using **Change Data Capture** ( **CDC** ), information about the structure of
    the building, access to key metrics from various assessments, and insights from
    feedback collected during viewings conducted by RealCo partners.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这些不仅包括对估值API的扩展，例如获取历史估值和趋势数据，还包括完全不同类别的物业数据，包括通过平台事件进行的实时更新、使用**变更数据捕获**（**CDC**）的数据流变化、建筑结构信息、从各种评估中获取的关键指标访问，以及从RealCo合作伙伴进行看房时收集的反馈洞察。
- en: Joe pushes back a bit on the customer, saying that if he’d known that this much
    new functionality would be coming, he might have structured the API differently
    and might have done some things in a suboptimal way to include it with the current
    go-live.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Joe稍微反驳了一下客户，说如果他早知道会有这么多新的功能进来，他可能会以不同的方式构建API，可能会做一些在当前上线中不是最优的处理来包含这些功能。
- en: RealCo’s manager listens attentively to Joe but says that ultimately, the decision
    is to go ahead with the additional functionality. RealCo is aware of the potential
    downsides, and it can live with them.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: RealCo的经理专心地听Joe讲话，但最终表示，决定是继续增加额外的功能。RealCo意识到潜在的弊端，但它可以接受这些问题。
- en: 'The day before the go-live, the same thing happens again. This time, the information
    includes more property-related information but also entirely different classes
    of information, such as demographics and segmentation data related to the area
    in which the property is located, as illustrated in the following diagram:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在上线前一天，同样的事情再次发生。这一次，信息不仅包括更多与物业相关的信息，还包括完全不同类别的信息，如与物业所在区域相关的人口统计和细分数据，如下图所示：
- en: '![Figure 6.5 – View of RealCo PropertyService](img/B30991_06_05.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5 – RealCo PropertyService视图](img/B30991_06_05.jpg)'
- en: Figure 6.5 – View of RealCo PropertyService
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – RealCo PropertyService视图
- en: Nothing can be done to include this in a day, which RealCo begrudgingly accepts.
    However, it wants a plan from Joe to include it posthaste. Given the immense pressure,
    Joe simply extends the current interface, which is now becoming enormous with
    calls to dozens of Salesforce services, both standard and custom.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 没有办法在一天内完成这项工作，RealCo虽然不情愿，但还是接受了这个事实。然而，它希望Joe提供一个计划，尽快将其包含进去。鉴于巨大的压力，Joe只是扩展了当前的接口，而这个接口现在变得庞大，涉及到几十个Salesforce服务，包括标准和自定义服务。
- en: Fortunately, both the initial go-live and the subsequent update go relatively
    well. The teams at RealCo’s partner organizations grumble a bit about the complexity
    of the interface and log a number of bugs. But it works, and they can get on with
    the various applications that the interface needs to drive.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，初始上线和随后的更新都相对顺利。RealCo 合作伙伴组织的团队对接口的复杂性抱怨了一些，并报告了若干 bug。但它仍然能够正常工作，合作伙伴们可以继续处理接口所需驱动的各种应用程序。
- en: The barrage of change requests keeps happening. And somehow, the changes are
    always exceptionally urgent and needed for critical use cases in one partner or
    another. What’s worse is that an increasing number of teams are relying on the
    interface, which makes upgrades increasingly hard.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 变更请求的轰炸仍在继续。而且这些变更总是特别紧急，且对于某个合作伙伴的关键用例来说是必须的。更糟糕的是，越来越多的团队依赖于这个接口，这使得升级变得越来越困难。
- en: Even with good API versioning, the changes between versions are proving quite
    strenuous for the partner teams who are complaining quite loudly about both the
    frequent version changes and the high error rate that has crept into the API implementation.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有良好的 API 版本管理，版本之间的变化仍然让合作伙伴团队感到相当吃力，他们大声抱怨频繁的版本变化和 API 实现中逐渐出现的高错误率。
- en: The final straw comes when a critical bug is found just prior to a new release.
    Joe, having been told to prioritize getting the new functionality out, includes
    a hotfix with the new version, which effectively forces an upgrade on all the
    major partners.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的压垮骆驼的稻草出现在新版本发布前发现了一个关键性 bug。Joe 被告知需要优先发布新功能，于是他将一个热修复与新版本一起发布，这实际上强制所有主要合作伙伴进行升级。
- en: However, it turns out that there are additional breaking bugs in the new API
    version, which means the key partners lose access to key functionality for over
    a week until Joe can get the situation under control.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，事实证明新 API 版本中存在其他破坏性的 bug，这意味着关键合作伙伴失去了访问关键功能的权限，直到 Joe 能够控制住局面，至少一周的时间。
- en: An escalation meeting is called where the partners can voice their various complaints.
    Joe tries as best he can to explain the history and the reasons for the current
    situation, but unfortunately, the complexities get lost in the general din.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 召开了一次升级会议，合作伙伴们可以在会上提出他们的各种投诉。Joe 尽力解释当前情况的历史背景和原因，但不幸的是，复杂的细节在嘈杂的讨论中被淹没了。
- en: Joe is told that his contract won’t be renewed and that another consultant will
    be brought in to refactor and restructure the interface. He breathes a sigh of
    relief and starts looking forward to his next engagement.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Joe 被告知他的合同不会续签，另外一个顾问将被引入来重构和重组接口。他松了一口气，开始期待下一个工作机会。
- en: Problem
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题
- en: The problem posed by the fat interface is fundamentally one of the interface
    structure—that is to say, where to place functionality so that it can be called
    by clients that have a need for the services the interface provides.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: “胖接口”所带来的问题本质上是接口结构的问题——也就是说，如何安排功能，使得那些需要接口提供服务的客户端可以调用它。
- en: Note
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Originally, this anti-pattern was applied more to interfaces in the sense of
    the word used in **object-oriented programming** ( **OOP** ). However, it applies
    equally in an integration setting.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，这种反模式更多地应用于 **面向对象编程**（**OOP**）中的接口。然而，它在集成环境中同样适用。
- en: There are several different philosophies on interface design. These days, most
    people have an instinctual preference for microservices, which are smallish services
    that carry out a single well-defined and coherent set of functionalities. An example
    could be a notification service that does nothing but send notifications.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在接口设计上有几种不同的哲学观点。如今，大多数人本能地偏向于微服务，它们是执行一组单一、明确且连贯功能的小型服务。举个例子，一个通知服务，它的唯一作用就是发送通知。
- en: A few years back, however, the preference was for coarse-grained business services
    that provided an entry point to a business process—for example, processing an
    order. This was the foundational style associated with SOA, which we have mentioned
    previously.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，几年前，人们更倾向于使用粗粒度的业务服务，这些服务为业务流程提供了一个入口点——例如，处理订单。这就是与 SOA（面向服务的架构）相关的基础风格，我们之前曾提到过。
- en: With a fat interface, however, you are violating a fundamental tenet of interface
    design that is common to most—if not all—of these philosophies. That tenet is
    called interface segregation and holds that clients should never be forced to
    depend on methods that it doesn’t need.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用臃肿接口时，你违反了大多数（如果不是所有）这些哲学中普遍适用的一个基本原则。这个原则叫做接口隔离，要求客户端永远不应被迫依赖它不需要的方法。
- en: Proposed solution
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提议的解决方案
- en: Fat interface proposes to simply continue to add logic to an existing interface
    because it is the easiest thing to do. Designing well-segregated interfaces can
    take work and careful thought, and putting all your functionality into a single
    basket simplifies the problem.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 臃肿接口提议简单地将逻辑继续添加到现有接口中，因为这是最简单的做法。设计良好的隔离接口可能需要更多的工作和仔细思考，而将所有功能放在一个接口中则简化了问题。
- en: In addition, you can sometimes convince yourself that all the functionality
    really does belong together because there are some tangential commonalities between
    them, and this can be especially true if you have consumers that use substantial
    parts of the functionality you expose.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你有时可能会说服自己，所有功能确实应该放在一起，因为它们之间有一些间接的共同点，尤其是当你有大量消费者使用你所暴露的功能时，这种情况可能尤其成立。
- en: Often, this anti-pattern is simply the consequence of drift over time. The code
    starts to do one thing, then it does another, and another, and at the end of the
    day, it does everything and walks the dog.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这种反模式通常只是随着时间推移产生的结果。代码最初做一件事，然后做另一件事，接着做第三件事，最终它什么都做，甚至连狗都带走了。
- en: That would be all well and good if it weren’t for the fact that it comes with
    a number of hidden costs that have to be taken into account. We’ll explore these
    next.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是因为有许多隐性成本需要考虑，这一切看起来应该是好的。我们接下来将探讨这些问题。
- en: Results
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结果
- en: The results of the fat interface anti-pattern will be familiar if you have been
    reading this book straight through. It resembles the consequences of poor structure
    that can occur in a multitude of domains.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一直在阅读本书，你一定会熟悉臃肿接口反模式的结果。这类似于在多个领域中可能发生的糟糕结构后果。
- en: 'When your interface has grown to the extent that it becomes a fat interface—that
    is to say, it now includes so much diverse functionality that it has effectively
    become unmanageable—you are likely to see some or all of the following consequences:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的接口变得臃肿到不可管理的地步——也就是说，它现在包含了太多不同的功能，实际上已经变得无法管理——你可能会看到以下一些或全部后果：
- en: Increased complexity, leading to increased cost of change, cycle times, and
    error rates
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂性增加，导致变更成本、周期时间和错误率的提高
- en: Increased maintenance costs as errors have additional repercussions, clients
    depend on a variety of existing parts of the interface, and the code base is large
    and hard to understand
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护成本增加，因为错误会带来额外的后果，客户端依赖接口的各种现有部分，且代码库庞大且难以理解
- en: Only certain developers can make changes to the fat interface because the interdependencies
    and consequences for users of the interface of making changes require in-depth
    knowledge of the entire code base
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有某些开发人员能够对臃肿接口进行更改，因为更改接口的互依性和对接口用户的影响需要对整个代码库有深入的了解。
- en: Bugs in the interface can affect clients that do not even use the kind of functionality
    exposed in the failing method
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口中的 bug 可能会影响那些根本不使用失败方法中暴露功能的客户端
- en: A large number of client dependencies on the interface make disentangling the
    status quo difficult
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大量客户端依赖接口，使得解开现状变得困难
- en: Overall, while this pattern can seem like a minor code smell at a glance, in
    fact, it can create serious issues for your companywide integration landscape
    if you have a failing fat interface in a central position.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，尽管这种模式乍一看可能只是一个轻微的代码异味，但如果你在中心位置有一个失败的臃肿接口，它实际上可能会为你的公司范围的集成架构带来严重问题。
- en: Better solutions
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好的解决方案
- en: This anti-pattern is one of the few that can consistently be avoided by applying
    good practice and discipline to your development processes. If you diligently
    follow your interface standards and apply the interface segregation principle
    whenever you are adding new functionality, this anti-pattern will never occur.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这种反模式是少数几个可以通过应用良好实践和开发过程中的自律来避免的。如果你严格遵循接口标准，并在添加新功能时始终应用接口隔离原则，这种反模式将永远不会发生。
- en: While it may be tempting to take shortcuts, and they might not have serious
    consequences in the short term, you should know the long-term consequences and
    apply sound design and programming practice. This is also an area where an architect
    or developer may have a lot to say as it is too technical an area for most business
    users to really take a position.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可能会有诱惑去走捷径，而这些捷径短期内可能不会带来严重后果，但你应该了解长期后果，并应用良好的设计和编程实践。这也是一个架构师或开发人员可能会有很多发言权的领域，因为这是一个技术性太强的领域，大多数业务用户难以真正发表意见。
- en: The difficulty is, of course, in maintaining the required level of discipline
    when you are under serious pressure to deliver. However, hopefully, making the
    kinds of points raised in this description will help you push back on quick-fix
    thinking.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 难点在于，在面临巨大的交付压力时，如何保持所需的纪律性。当然，希望通过在描述中提到的要点，能帮助你抵制“速成思维”的诱惑。
- en: Chatty integration
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 聊天集成
- en: Chatty integration is an anti-pattern where integration of arbitrary patterns
    makes an unduly large number of calls to one or more interfaces, often resulting
    in performance degradation.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天集成是一种反模式，其中集成了任意模式，导致对一个或多个接口发出过多的调用，常常导致性能下降。
- en: Example
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: WoodCo is a furniture maker with a long legacy of making top-tier bespoke furniture
    for well-off clients. They have been growing rapidly over the past years due to
    the launch of an e-commerce platform, built on Salesforce Experience Cloud with
    B2B commerce, that connects their customer community directly with furniture makers
    assigned to their projects.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: WoodCo是一家有着悠久历史的家具制造商，专门为富裕客户定制高端家具。近年来，由于推出了基于Salesforce Experience Cloud并结合B2B电商的电商平台，WoodCo的业务增长迅速，该平台将客户社区与指定负责其项目的家具制造商直接连接起来。
- en: That way, customers and makers can connect directly and discuss requirements
    for the bespoke builds. Customers can also follow the progress of their furniture
    throughout its life cycle.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，客户和制造商可以直接连接并讨论定制建造的要求。客户还可以在家具的整个生命周期中跟踪其进度。
- en: WoodCo project manages the builds, including the budgets, and ensures that any
    conflicts are resolved amicably wherever possible. They track these projects in
    an old project control module that they also use to manage their own business.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: WoodCo负责管理项目建设，包括预算，并确保尽可能通过友好协商解决任何冲突。他们在一个旧的项目控制模块中跟踪这些项目，该模块也用于管理他们自己的业务。
- en: This project module has recently been extended with a custom-built REST API
    that sits on top of the legacy application. The vendor has built this API specifically
    for WoodCo at great expense, but it’s considered a no-brainer as it will allow
    the direct integration of the portal into the project control module, replacing
    the current manual process where everything is rekeyed into the project control
    module by data entry professionals.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目模块最近通过一个定制构建的REST API进行了扩展，该API建立在传统应用程序之上。供应商专门为WoodCo构建了这个API，花费巨大，但这被认为是毫不犹豫的选择，因为它将直接实现门户与项目控制模块的集成，取代了当前由数据输入人员手动将所有数据重新输入项目控制模块的过程。
- en: Lina is hired by WoodCo to head up digital projects, the first of which is to
    connect the e-commerce platform to the project control module. She commissions
    a specialist Salesforce partner to lead the work.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Lina被WoodCo聘用，负责数字化项目，其中第一个项目是将电商平台与项目控制模块连接起来。她委托了一家专业的Salesforce合作伙伴来主导这一工作。
- en: They put in place a lightweight middleware platform that subscribes to events
    from Salesforce and translates them into REST calls in the format of the new REST
    API. The REST API doesn’t support any aggregation, so it’s strictly one event
    to one call.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 他们建立了一个轻量级的中间件平台，订阅Salesforce的事件并将其转换为新REST API格式的REST调用。由于REST API不支持任何聚合，所以它严格遵循一对一事件调用。
- en: On the Salesforce side, events are initially only fired on status updates or
    when key pieces of standing information, such as a project title, are entered
    or changed. However, over time, this should be extended to tracking the status
    of activities within the project and the communication between maker and customer.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在Salesforce方面，事件最初仅在状态更新时触发，或者在输入或更改诸如项目标题之类的重要信息时触发。然而，随着时间的推移，应该扩展到跟踪项目中的活动状态以及制造商与客户之间的沟通。
- en: 'You can see an overview of the WoodCo integration architecture here:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里查看WoodCo集成架构的概览：
- en: '![Figure 6.6 – WoodCo integration architecture](img/B30991_06_06.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图6.6 – WoodCo集成架构](img/B30991_06_06.jpg)'
- en: Figure 6.6 – WoodCo integration architecture
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – WoodCo集成架构
- en: The integration launches successfully, and everyone in WoodCo cheers. However,
    the full benefit is not yet realized as the activities and customer communication
    are still only in the customer portal, and WoodCo staff still use a combination
    of rekeying and working in multiple systems to get around the constraint.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the day of the update, which will include the full synchronization,
    arrives and everybody waits excitedly for the go-live. However, within minutes
    of the launch, the project module crashes.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: The vendor investigates and attributes the error to scalability issues related
    to the initial synchronization. The rollout is deferred to the weekend, and after
    many restarts, the initial data is indeed synchronized.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Monday comes, and people start using the system in anger. There are some complaints
    about slowness in the project control module, but at least the integration seems
    to be working and bringing the critical data across.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Then, on Tuesday morning, an administrator is running some routine batch jobs
    on the customer portal. Near instantly, the project control module comes crashing
    down again and the new integration is taken offline in order to get it back up.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: A crisis meeting is called for that evening by WoodCo’s CIO. This has reached
    the level of CEO attention, and something needs to be done. Lina entrusts Aki,
    her most technically gifted subordinate, to figure out the root cause.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: At this point, both vendors are blaming each other for the failure and are digging
    their heels in, refusing to take unilateral action to fix the problem. Aki, therefore,
    dives right into the middle of the technical setup.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: He examines log files and code from Salesforce, the middleware, and the project
    control module, and after a few hours, he is confident that he has found the root
    cause. The problem is caused by a recursive update rule that applies certain updates
    to a parent project, such as a change of billing code, to all activities in that
    project’s scope.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Before the new update, this didn’t matter as changes on the activity level weren’t
    synchronized. However, with the update, each such change triggers hundreds of
    update events on Salesforce, each of which triggers a callout to the project control
    module.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see an overview of the WoodCo project structure here:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – WoodCo project structure](img/B30991_06_07.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – WoodCo project structure
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: This legacy system can handle maybe one or two such updates at the same time
    while also serving users normally, but anything more than that causes issues—first,
    performance degradation, and eventually, a crash. When the administrator launched
    a batch job to reassign a number of **project identifiers** ( **PIDs** ), this
    triggered updates for dozens of projects and their activity trees, crashing the
    project control module in the process.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: At the evening’s meeting, the mood is somber. However, as Aki explains the facts
    of the matter, no one can really disagree. The decision is taken to temporarily
    disable the activity level and for Aki to lead a team to redesign the integration
    so that it avoids overloading the project control module.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在晚上的会议上，气氛沉重。然而，随着Aki解释事情的事实，没人能真正反驳。决定是暂时禁用活动级别，并让Aki领导一个团队重新设计集成，以避免过载项目控制模块。
- en: Problem
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题
- en: The chatty integration anti-pattern is a byproduct of the solution to some other
    integration problem that for some reason requires very frequent communication
    between systems. Often, as in our example, that problem involves the transfer
    of state between two or more systems.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天式集成反模式是解决其他集成问题的副产品，出于某些原因，这些问题需要系统之间非常频繁的通信。通常，像我们示例中的问题涉及在两个或更多系统之间转移状态。
- en: It is an anti-pattern that can be hard to spot during development as it tends
    to only become problematic with scale. After all, in most test scenarios, except
    explicit performance tests, we don’t update enough data to really reach a problematic
    number of integration calls.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个在开发过程中很难发现的反模式，因为它通常只在规模扩大时才会变得成问题。毕竟，在大多数测试场景中，除非是明确的性能测试，否则我们更新的数据不足以真正达到一个有问题的集成调用数量。
- en: The problematic implementation can be due to bad practices, such as firing separate
    callouts for every record in a loop, or it can be more insidious, as in our example,
    where subscribed events are mapped 1:1 to REST calls in the middleware. Whichever
    way it occurs, it is at best wasteful and at worst catastrophic.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 问题的实施可能是由于不良的实践，例如在循环中为每个记录单独发出调用，或者可能更为隐蔽，如我们示例中的情况，订阅事件被1:1映射到中间件中的REST调用。不管是哪种情况，至少是浪费，最坏的情况下是灾难性的。
- en: Proposed solution
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提出的解决方案
- en: As noted, chatty integration tends to be a byproduct of the solution to another
    problem; therefore, it doesn’t quite fit our schema. However, in so far as we
    can say it proposes a solution, that solution is to make as many calls across
    system boundaries as necessary to support the business use case without any concern
    for system limitations.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，聊天式集成往往是解决另一个问题的副产品；因此，它并不完全符合我们的模型。然而，就算我们可以说它提出了一个解决方案，那就是跨系统边界进行尽可能多的调用，以支持业务用例，而不考虑系统的限制。
- en: This is usually done for reasons of simplicity. Once you start introducing bulkification,
    queuing, systematic delays, aggregation of calls, throttling, or any other mechanism
    you might consider to limit the rate of calling other interfaces, you also introduce
    complexity in the implementation.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是出于简化的原因。一旦你开始引入批量处理、排队、系统延迟、调用聚合、限流或你可能考虑的任何其他机制来限制调用其他接口的速率，你也会在实现中引入复杂性。
- en: You will have noted from other anti-patterns that complexity is often a driver
    of serious negative consequences, so avoiding it will usually seem like a good
    thing. This, however, is a case where the adage *make the solution as simple as
    possible but no* *simpler* applies.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，其他反模式表明，复杂性往往是导致严重负面后果的驱动因素，因此避免它通常看起来是件好事。然而，这是一个*让解决方案尽可能简单，但不要*
    *更简单*的例子。
- en: With chatty integration, you are actually making the solution too simple as
    it doesn’t meet the basic functional requirement without the additional complexity.
    That may mean you need more time and additional tools to get your solution to
    work, but there really is no way around it in this kind of scenario.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在聊天式集成中，你实际上让解决方案变得过于简单，因为它在没有额外复杂性的情况下不能满足基本的功能需求。这可能意味着你需要更多的时间和额外的工具来使解决方案正常工作，但在这种情况下，真的没有捷径可走。
- en: This is still true even when using low-code integration tools, sold to make
    your life easy. If you get the integration strategy wrong, the integration won’t
    work as intended. Architecture is about trade-offs, after all.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 即使使用低代码集成工具，这一点依然成立，这些工具的销售目的是让你的生活变得更简单。如果集成策略错误，集成就无法按预期工作。毕竟，架构就是在权衡中做出选择。
- en: Results
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结果
- en: 'The results of chatty integration form a spectrum:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天式集成的结果形成了一个谱系：
- en: Often, there are no immediate consequences if the target systems are able to
    cope with the extraordinary volume of calls and you stay within Salesforce limits
    as well.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常，如果目标系统能够应对大量的调用，并且你也保持在Salesforce的限制内，那么不会立即出现后果。
- en: Sometimes, you see performance degradation. That can happen on the Salesforce
    side if you make too many async callouts over a time period, and it can obviously
    happen on the target side if you start overloading its capacity.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时你会看到性能下降。这可能是因为在Salesforce端，如果你在一定时间内发起了太多异步调用，而在目标端，如果你开始超载它的容量，也可能发生类似问题。
- en: Performance degradation can turn into periodic errors if you start experiencing
    timeouts or the target servers get temporarily overloaded.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能下降可能会转化为周期性错误，特别是当你开始遇到超时问题或目标服务器临时过载时。
- en: Finally, you can sometimes crash the target system altogether, leading to a
    critical error.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终，你有时可能会使目标系统彻底崩溃，导致严重错误。
- en: 'You can refer to the following diagram for a visual demonstration:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考以下图示以获得可视化演示：
- en: '![Figure 6.8 – Chatty integration spectrum](img/B30991_06_08.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – 聊天型集成谱系](img/B30991_06_08.jpg)'
- en: Figure 6.8 – Chatty integration spectrum
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – 聊天型集成谱系
- en: That doesn’t mean this isn’t an anti-pattern if you happen to be lucky enough
    to be on the left side of the spectrum. It just means that for now, you have gotten
    away with it.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着如果你恰好处于谱系的左侧，就不会存在反模式。它只是意味着目前，你尚未遇到问题。
- en: Better solutions
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好的解决方案
- en: The general advice to follow in order to avoid the chatty integration anti-pattern
    is to understand and design with system limits in mind. We are not creating theoretical
    architectures for theoretical systems. If we were, we would be in academia.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 避免聊天型集成反模式的一般建议是理解并在设计时考虑系统的限制。我们并不是在为理论系统创建理论架构。如果我们这样做，我们就会处于学术领域。
- en: 'When you design an integration as an architect, you are generally doing so
    with a well-defined target environment in mind. That means you should be mindful
    of the following:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 当你作为架构师设计集成时，通常是针对一个明确定义的目标环境进行设计。这意味着你应当考虑以下几点：
- en: Understand the hard constraints, such as system limits—for example, the maximum
    number of calls supported over a time period
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解硬性限制，例如系统限制——例如，某一时间段内支持的最大调用次数。
- en: Get information on the actual performance of target systems under whatever level
    of duress they currently experience
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取目标系统在当前负荷下的实际性能信息
- en: Don’t just fire off calls without consideration of the performance implications
    of doing so
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在没有考虑性能影响的情况下随意发起调用。
- en: To mitigate this anti-pattern, organizations can leverage Salesforce’s bulk
    API to efficiently handle large volumes of records and the composite API to make
    multiple related calls in a single request. This approach minimizes the number
    of separate transactions and improves overall performance while ensuring data
    integrity and reducing potential errors.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 为了缓解这种反模式，组织可以利用Salesforce的批量API来高效处理大量记录，并使用复合API在一个请求中发起多个相关调用。这种方法可以最小化独立事务的数量，提升整体性能，同时确保数据完整性并减少潜在错误。
- en: 'Instead, use one or more of the following strategies to ensure that the target
    system can cope:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，可以使用以下一种或多种策略来确保目标系统能够应对：
- en: '**Bulkification** : Send multiple logical calls in the same message.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**批量化**：将多个逻辑调用合并到同一消息中。'
- en: '**Consolidation** : Combine multiple updates in a single call.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合并**：将多个更新合并为一个调用。'
- en: '**Aggregation** : Combine changes to multiple areas into one call covering
    several areas.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聚合**：将多个区域的变化合并为一个调用，涵盖多个领域。'
- en: '**Delay** : Introduce a delay in sending off a call when performance is spiky.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**延迟**：在性能波动时引入延迟，推迟发送调用。'
- en: '**Reduce frequency** : Send updates less often.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少频率**：减少更新的发送频率。'
- en: '**Buffer** : Add your calls to a queue that is gradually drained as the target
    system has capacity.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓冲**：将调用添加到一个队列中，随着目标系统的容量逐渐排空该队列。'
- en: '**Event** : Consider using Salesforce’s Streaming API to reduce the number
    of callouts and implement a more event-driven architecture. By leveraging the
    Streaming API, you can listen for changes to Salesforce records in real time,
    allowing your applications to react swiftly to data changes without the need for
    frequent polling. This approach enhances efficiency and responsiveness in data
    handling, making it a valuable integration for modern applications.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件**：考虑使用Salesforce的流式API，以减少调用次数并实现更加事件驱动的架构。通过利用流式API，你可以实时监听Salesforce记录的变化，使你的应用能够迅速响应数据变化，而无需频繁轮询。这种方法提高了数据处理的效率和响应性，使其成为现代应用的重要集成方案。'
- en: Overall, a chatty integration has the potential to level your integration landscape
    if you are unlucky. Therefore, it should be avoided even when you don’t believe
    you will run into trouble in the short term.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，如果不小心，一个冗长的集成可能会让你的集成环境陷入困境。因此，即使你认为短期内不会遇到问题，也应避免使用这种集成模式。
- en: Getting the patterns wrong
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误的模式选择
- en: In this section, we look at how becoming too obsessed with a single integration
    style can cause serious problems by looking at the integration pattern monomania
    anti-pattern.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中，我们将探讨过于执着于单一集成风格如何通过集成模式偏执症反模式造成严重问题。
- en: Integration pattern monomania
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成模式偏执症
- en: Integration pattern monomania happens when a single integration pattern is used
    to the exclusion of all others, regardless of whether it is a good fit for the
    requirements under consideration.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 集成模式偏执症发生在仅使用单一集成模式，而忽略所有其他模式的情况下，不管该模式是否适合正在考虑的需求。
- en: Example
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: 'WineCo has been a heavy user of Salesforce technology for more than a decade.
    It has a large estate of many orgs across core clouds: Marketing Cloud and Commerce
    Cloud.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: WineCo已经使用Salesforce技术超过十年，拥有多个核心云服务组织：营销云和商务云。
- en: They have developed a custom approach to building on Salesforce, including a
    range of frameworks and libraries that they use consistently across projects.
    Many of these could use an update, but they are still preferred for the sake of
    consistency.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 他们已经开发出了一种基于Salesforce的定制方法，包括一系列框架和库，这些框架和库在项目中一致使用。尽管其中许多需要更新，但出于一致性的考虑，它们仍然是首选。
- en: Clare is brought in from a leading consultancy to lead the build of a new app
    that WineCo is building for its distributors. The app will include communications
    between WineCo managers and the distributors, e-commerce for standard items, rebate
    management, custom pricing logic, joint opportunity management, and the ability
    to request quotes for special requirements.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Clare被一家领先的咨询公司引入，负责领导WineCo为其分销商开发的一个新应用程序的构建。该应用程序将包括WineCo管理人员与分销商之间的沟通、标准商品的电子商务、返利管理、定制定价逻辑、联合机会管理以及为特殊需求请求报价的功能。
- en: To deliver the required level of functionality and realize the business value
    attributed to the distributor portal, Clare will need to ensure that integrations
    are in place to many systems.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供所需的功能并实现分销商门户所带来的商业价值，Clare需要确保与多个系统的集成已经到位。
- en: She must funnel all communications through the central notification service
    that ensures all communications are appropriately logged and have the right footers
    in place. Then, she must integrate with the existing rebate management system
    that calculates the rebates due to distributors based on their segment and historical
    orders.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 她必须将所有通信都通过中央通知服务进行处理，以确保所有通信都得到了适当的记录并且有正确的页脚。然后，她还需要与现有的返利管理系统进行集成，该系统根据分销商的细分和历史订单计算应支付给分销商的返利。
- en: Pricing will come from Salesforce CPQ but in a different org, requiring a Salesforce-to-Salesforce
    integration. Content for the portal web pages will come from the corporate CMS.
    However, there are also services for user and behavior tracking that must be integrated
    from the CMS into the portal website.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 定价将来自Salesforce CPQ，但在不同的组织中，因此需要进行Salesforce到Salesforce的集成。门户网页的内容将来自公司CMS。然而，也有一些用户和行为跟踪服务需要从CMS集成到门户网站中。
- en: Finally, the ERP system needs to be updated with any custom quotes and standard
    orders that are made through the distributor portal. The distributor portal will
    also need to get a substantial amount of data about distributors, their existing
    orders, and standing data about them from the ERP system. All in all, while the
    basic build on Salesforce is complex, the integration landscape is even more complex.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，ERP系统需要更新通过分销商门户生成的任何定制报价和标准订单。分销商门户还需要从ERP系统获取大量关于分销商的数据，包括他们的现有订单以及关于他们的基础数据。总的来说，虽然在Salesforce上的基础构建非常复杂，但集成环境则更加复杂。
- en: 'The proposed architecture is represented in the following diagram:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 提议的架构在下图中展示：
- en: '![Figure 6.9 – Proposed integration architecture for WineCo](img/B30991_06_09.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图6.9 – WineCo的提议集成架构](img/B30991_06_09.jpg)'
- en: Figure 6.9 – Proposed integration architecture for WineCo
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 – WineCo的提议集成架构
- en: Further complexity is added by WineCo’s corporate integration standard. It states
    that all integrations from Salesforce must be implemented using the company’s
    integration library. That would be fine; however, the only patterns supported
    by this library are synchronous or asynchronous REST callouts, limiting the options
    for the integration design considerably.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Clare and her team get on with it, regardless. They complete much of the core
    Salesforce build ahead of schedule, but the integrations are lagging behind. They
    run into several different problems.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: First, the rebate system doesn’t support any kind of bulkification, leading
    to large numbers of calls to its APIs. The system owner questions whether the
    current setup will scale in a go-live scenario, and eventually, four new servers
    need to be procured to give the business comfort that the system can handle the
    load.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Second, there are too many queries to the ERP system, leading to slow response
    time and long wait times in the UI. This proves unsolvable under the current architecture,
    and a decision is made to handle it as a training issue.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Third, the CMS services prove hard to call from the server side, and a compromise
    is made to include the tracking code via JavaScript, although this requires a
    formal exception and causes substantial delay.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the notification service is a bad fit for many of the messaging requirements
    that the distributor portal has and results in weirdly formatted messages that
    are hard to reply to in many cases. That is also accepted and consigned to be
    handled as a training issue.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: The project is completed and goes live without much fanfare. The internal users
    dislike the new interface and distributor adoption is lukewarm. Clare makes a
    final argument for redesigning the basic integration architecture to something
    more suitable, before moving on to the next project.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Integration pattern monomania seeks to address the problem that designing a
    good integration architecture is fundamentally hard, as is determining the right
    patterns, design, and implementation characteristics of concrete integrations.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: It is, therefore, attempting to simplify the problem by focusing on a single
    approach that works well in many cases. That way, you can define a standard way
    of doing things without having to grapple with the exact details of each individual
    case.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: 'This is attractive for several reasons:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: First, standards often work. In many cases, having a standard way of doing things
    is the right way to go. However, an entire integration architecture is too broad
    a target for such an approach.
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, once you have chosen an approach, you can create supporting assets,
    such as code libraries and frameworks for logging and error handling, that will
    work across integrations, which is generally beneficial.
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third, you only really need developers to know how to do a single thing. That
    reduces development complexity, training, and onboarding needs.
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of that would be great if it weren’t for the inconvenient fact that no single
    integration pattern is universally applicable.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是因为一个不方便的事实——没有任何单一的集成模式是普遍适用的——这一切本来都很完美。
- en: Proposed solution
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提出的解决方案
- en: Integration pattern monomania proposes to use a single integration pattern for
    all—or at least, nearly all—concrete integrations needed in an integration architecture.
    It can either be explicitly set via a corporate standard or be implicit in the
    way the architects and developers work and think. In either case, when such a
    preference becomes excessively strong, you have an anti-pattern.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 集成模式偏执建议对所有—或者至少几乎所有—在集成架构中所需的具体集成使用单一的集成模式。这可以通过公司标准明确规定，或者通过架构师和开发人员的工作和思维方式隐性体现。无论哪种情况，当这种偏好变得过于强烈时，你就会遇到反模式。
- en: 'The aims of integration pattern monomania are usually quite sensible:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 集成模式偏执的目标通常是相当合理的：
- en: Reducing the complexity of integrations by limiting the choices architects and
    developers need to make
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过限制架构师和开发人员需要做出的选择，来减少集成的复杂性。
- en: Enforcing consistency in the enterprise architecture to avoid unwanted side
    effects
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在企业架构中强制一致性，以避免不良副作用。
- en: Make developers’ lives easier by giving them a clear way forward and supporting
    them with relevant tools and frameworks
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过为开发人员提供明确的前进方向，并支持他们使用相关工具和框架，使开发人员的工作更轻松。
- en: The issue is that not all concrete integrations will fit a given pattern. Characteristics
    such as the velocity of updates, acceptable latency, data volumes, and the needs
    of the **user experience** ( **UX** ), among other concerns, mean that overreliance
    on a single integration pattern is detrimental in the long term. We will explore
    this next.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，并非所有具体集成都能适配某一给定模式。更新速度、可接受的延迟、数据量以及**用户体验**（**UX**）等特征，意味着长远来看，过度依赖单一的集成模式是有害的。接下来我们将探讨这一点。
- en: Results
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结果
- en: 'The problems caused by integration pattern monomania boil down to technical
    misfits. This is something we have seen in other anti-patterns—for instance, Golden
    Hammer. While some positives may apply in specific cases, overall you are likely
    to see some of the following consequences:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 集成模式偏执引发的问题归结为技术不匹配。这是我们在其他反模式中也看到的情况——例如“金锤法则”。虽然在特定情况下可能有一些积极影响，但总体来看，你可能会看到以下一些后果：
- en: Instead of decreasing complexity as intended, your integration landscape becomes
    more complex due to a variety of workarounds needed to accommodate the limitations
    of the integration pattern that is being used exclusively.
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的集成环境由于需要多种变通方法来适应所使用的集成模式的局限性，反而变得更复杂，而不是如预期那样减少复杂性。
- en: Some integrations may not function within their intended quality parameters
    because of poor technical fit. That may mean periodic errors, poor performance,
    or similar.
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些集成可能由于技术不匹配而无法在预期的质量参数内运行。这可能意味着周期性错误、性能差或类似问题。
- en: These factors generally imply a burden of higher maintenance and support on
    an ongoing basis to correct the issues.
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些因素通常意味着需要在持续的基础上承担更高的维护和支持负担，以修正问题。
- en: Finally, the UX in some areas will be underwhelming to end users as the pattern
    can’t meet expectations.
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终，在某些领域的用户体验（UX）将让终端用户失望，因为该模式无法满足期望。
- en: Overall, you don’t get the anticipated benefits and instead end up with a bit
    of a mess.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，你不会得到预期的好处，反而会陷入一团乱麻。
- en: Better solutions
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好的解决方案
- en: The solution to integration pattern monomania is simple. Don’t get overly fixated
    on a single integration pattern, whether that is RESTful callouts, EDA, or batch
    transfers.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 集成模式偏执的解决方案很简单。不要过于专注于单一的集成模式，无论是 RESTful 调用、EDA 还是批量传输。
- en: Instead, you can give good guidance to application developers and architects
    about which patterns are appropriate in which circumstances. It is fine to have
    a preference where all else is equal, but in practice, things rarely are.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，你可以为应用开发人员和架构师提供明确的指导，告诉他们在什么情况下哪些模式是合适的。在其他条件相同的情况下，偏好是可以的，但在实践中，很少有事情是完全相同的。
- en: 'Here’s an overview of Salesforce integration patterns:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Salesforce 集成模式的概述：
- en: '![Figure 6.10 – Overview of Salesforce integration patterns](img/B30991_06_10.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.10 – Salesforce 集成模式概览](img/B30991_06_10.jpg)'
- en: Figure 6.10 – Overview of Salesforce integration patterns
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10 – Salesforce 集成模式概览
- en: A certain level of conservatism toward choosing integration patterns can be
    warranted. That can give you some of the benefits that come from having a consistent
    approach, such as leveraging standard frameworks and libraries.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: You can also use middleware to create a certain commonality of integration stance
    between systems, although that just moves the complexity onto another platform.
    However, when push comes to shove, if a certain approach is the right one for
    your integrations, then you should use it.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: Event hell
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*When event based architecture goes bad, it results in this anti-pattern, involving
    failing scalability* *and control.*'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: Example
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SalesCo, a mid-sized company specializing in custom manufacturing equipment,
    has been using Salesforce as their CRM for several years. Their implementation
    has grown organically, starting with basic lead and opportunity management and
    gradually expanding to include custom objects for managing complex product configurations,
    quotes, and order fulfillment.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: As the business grows, SalesCo’s leadership decides to modernize their approach
    to system integration. They have heard about the benefits of EDA and want to leverage
    Salesforce’s event capabilities to create a more responsive and integrated system
    landscape.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: Sarah, a senior Salesforce developer at SalesCo, is tasked with implementing
    this new event-driven approach. She is excited about the potential of using platform
    events to decouple various processes and create a more flexible system.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Sarah starts by identifying key business processes that could benefit from an
    event-driven approach. She creates platform events for various stages of the sales
    process, product configuration updates, quote generation, and order fulfillment.
    The idea is to have different parts of the system react to these events, rather
    than having tightly coupled, synchronous processes.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, when a sales representative marks an opportunity as **Closed Won"**
    , an **OpportunityClosedEvent** would be fired. This event would trigger several
    actions:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: The order fulfillment team would receive a notification to start processing
    the order.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The finance system would be notified to generate an invoice.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The inventory management system would reserve the required products.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The customer success team would be alerted to initiate onboarding.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similarly, when a product configuration is updated, a **ProductConfigChangedEvent**
    would be emitted, triggering recalculations of quotes, updates to related opportunities,
    and notifications to relevant sales representatives.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: Initially, this approach seems to work well. The system becomes more responsive,
    and different teams can work more independently. Encouraged by this success, Sarah
    and her team continue to add more events and event-driven processes.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: 'However, as the number of events and event handlers grows, problems begin to
    emerge:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: Debugging becomes increasingly difficult. When issues arise, it is challenging
    to trace the exact sequence of events and handlers that led to the problem.
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance starts to degrade. With multiple handlers firing for each event,
    and some handlers triggering additional events, the system begins to slow down,
    especially during peak usage times.
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data inconsistencies start to appear. With multiple processes updating related
    records based on events, it becomes hard to maintain data integrity.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development velocity decreases. As the event-driven system grows more complex,
    even small changes require careful consideration of potential ripple effects across
    the entire system.
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Onboarding new team members becomes challenging, as understanding the full system
    behavior requires knowledge of numerous events and their handlers spread across
    different parts of the code base.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Despite these issues, the SalesCo team is reluctant to move away from their
    event-driven approach. They have invested significant time and resources into
    this architecture, and many of their processes now rely on it. Sarah finds herself
    in a difficult position, trying to maintain and extend a system that has become
    unwieldy and hard to manage.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The event hell anti-pattern occurs when a system becomes overly reliant on events
    for communication between components, leading to a complex and difficult-to-maintain
    code base. This anti-pattern is particularly prevalent in systems that embrace
    EDA without fully understanding its implications or establishing proper guidelines
    for its use.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: In the context of Salesforce, event hell often manifests through the overuse
    of platform events, the Streaming API, and trigger-based automations. While these
    technologies offer powerful capabilities for building responsive and decoupled
    systems, their misuse can lead to a tangled web of event emissions and handlers
    that obscures the system’s behavior and makes it challenging to maintain.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: 'Key characteristics of event hell include the following:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '**Excessive event usage** : Events are used for nearly all inter-component
    communication, even for simple, synchronous operations that don’t require the
    complexity of event-driven design.'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Complex event flows** : As the number of events and handlers increases, the
    flow of control becomes increasingly difficult to follow. A single user action
    might trigger a cascade of events, making it hard to predict or understand the
    full impact of any given operation.'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lack of clear ownership** : In an event hell scenario, it often becomes unclear
    which component or process is responsible for specific data or functionality.
    Multiple components may emit or react to the same events, leading to confusion
    about where certain operations actually occur.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debugging difficulties** : Tracing the execution path in an event hell scenario
    is extremely challenging. When an issue arises, developers may need to sift through
    numerous event handlers across multiple components to understand what’s happening.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance issues** : The constant emission and handling of events can lead
    to performance degradation, especially in systems with high transaction volumes.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data inconsistencies** : With multiple processes updating related records
    based on events, maintaining data integrity becomes increasingly difficult.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing challenges** : Event hell makes unit testing particularly difficult,
    as components often rely on complex event interactions that are hard to mock or
    simulate in isolation.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the Salesforce ecosystem, event hell can be particularly problematic due
    to the platform’s governor limits. Excessive event publishing and handling can
    quickly consume CPU time, SOQL query limits, and DML operations, leading to system
    timeouts and failures.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: Proposed solution
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **event hell anti-pattern** often emerges as a proposed solution to legitimate
    architectural challenges. It promises to deliver a highly decoupled, responsive,
    and scalable system by leveraging the power of EDA. The allure of this approach
    is strong, particularly in the Salesforce ecosystem, where platform events and
    the Streaming API offer powerful capabilities for building event-driven systems.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: 'Proponents of this approach argue that by using events for most inter-component
    communication, you can achieve the following:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '**Loose coupling** : Components only need to know about the events they publish
    or consume, not about other components in the system'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability** : Event-driven systems can theoretically handle increased load
    by adding more event consumers'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adaptability** : New functionality can be added by creating new event consumers
    without modifying existing code'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Real-time responsiveness** : Events allow for immediate reactions to changes
    in the system state'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration simplification** : Events can serve as a universal language for
    integrating diverse systems and services'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the context of Salesforce, the proposed solution often involves the following:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: Using platform events for most inter-object and inter-process communication
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing numerous Apex triggers to publish events in response to record
    changes
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating multiple Apex classes to subscribe to and handle various events
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing Process Builder or Flow to react to events and update records
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating external systems primarily through event publication and consumption
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This approach seems to solve many common architectural challenges. It appears
    to reduce direct dependencies between different parts of the system, allow for
    easy extension of functionality, and provide a clear mechanism for real-time updates
    and integrations.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: However, as we’ll see in the next section, this solution often creates more
    problems than it solves when applied indiscriminately.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: Results
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the event hell anti-pattern takes hold, the result is a system that, despite
    its promise of flexibility and decoupling, becomes increasingly brittle, hard
    to understand, and difficult to maintain. The consequences of event hell in a
    Salesforce implementation can be severe:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '**Reduced system stability** : As the web of events and handlers grows, the
    system becomes more prone to unexpected behavior. A small change in one part of
    the system can have far-reaching and unforeseen consequences, leading to increased
    bug rates and system instability.'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance degradation** : The constant publishing and handling of events
    can put a significant strain on system resources. In Salesforce, this can quickly
    lead to governor limit exceptions, especially in high-volume scenarios. Users
    may experience slower response times and more frequent timeout errors.'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debugging nightmares** : When issues occur, tracking down the root cause
    becomes extremely challenging. Developers must trace through complex chains of
    event publications and handlers, often spread across multiple objects and classes.
    This significantly increases the time and effort required to resolve problems.'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data integrity issues** : With multiple processes updating related records
    based on events, maintaining data consistency becomes a major challenge. Race
    conditions can occur when multiple event handlers attempt to update the same records
    simultaneously, leading to data conflicts and integrity problems.'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reduced developer productivity** : As the system complexity increases, even
    small changes or feature additions require careful consideration of potential
    ripple effects across the entire event-driven landscape. This slows down development
    and increases the risk associated with each change.'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Onboarding difficulties** : New team members struggle to understand the system’s
    behavior, as the logic is distributed across numerous event handlers rather than
    being centralized in more traditional service layers or controllers.'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing challenges** : Writing comprehensive unit tests becomes extremely
    difficult, as individual components are tightly coupled to the event system. Integration
    tests become more critical but are also more complex to set up and maintain.'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability issues** : Ironically, while EDAs are often adopted for their
    perceived scalability benefits, event hell can lead to the opposite result. As
    the volume of events increases, the system may struggle to keep up, leading to
    event backlogs and processing delays.'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Increased operational costs** : The complexity introduced by event hell often
    requires more powerful (and expensive) computing resources to maintain acceptable
    performance levels. It may also necessitate more sophisticated monitoring and
    alerting systems to track the flow of events and identify issues.'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Limited visibility** : Understanding the current state of the system becomes
    challenging, as important business logic and data transformations happen as side
    effects of events rather than through more visible and traceable direct operations.'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration complexity** : While events can simplify some aspects of integration,
    event hell can make it harder to maintain a clear contract between systems. Changes
    to event structures or handling logic can have unexpected impacts on integrated
    systems.'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Governance challenges** : In regulated industries, event hell can make it
    difficult to provide clear audit trails and demonstrate compliance, as the sequence
    of operations that led to a particular system state can be hard to reconstruct.'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the Salesforce context, these issues are often exacerbated by platform-specific
    limitations. For example, the inability to control the order of trigger execution
    can lead to race conditions between event publishers and handlers. Similarly,
    the platform’s governor limits can be quickly exceeded in complex event-driven
    scenarios, leading to runtime errors and incomplete transaction processing.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To avoid falling into the event hell anti-pattern while still leveraging the
    benefits of EDA in Salesforce, consider the following strategies:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: Reserve events for genuinely asynchronous or decoupled operations. Not every
    state change or business process needs to be event-driven. Use direct method calls
    or synchronous operations for simple, linear processes.
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establish well-defined domains within your Salesforce org and use events primarily
    for cross-domain communication. Within a domain, prefer more direct forms of interaction.
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Put thought into your event structures. Use versioned events and include only
    the necessary information in each event. This can help manage system evolution
    and reduce the coupling between event producers and consumers.
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For complex domains where you need a complete history of state changes, consider
    implementing event sourcing. This pattern can provide better traceability and
    make it easier to reason about the system’s state.
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use platform event triggers to centralize event-handling logic, making it easier
    to manage and debug compared to having multiple separate handler classes.
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use circuit breaker patterns to prevent event handling from overwhelming the
    system during high-load situations or when experiencing downstream system failures.
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For complex domains, consider separating read and write models using **Command
    Query Responsibility Segregation** ( **CQRS** ). This can simplify your event-handling
    logic and improve performance.
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accept that in some cases, eventual consistency is sufficient. This can help
    reduce the complexity of your event-handling logic and improve system performance.
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement consistent error handling and dead-letter queues for event processing.
    This can help identify and resolve issues more quickly.
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep clear, up-to-date documentation of your event schemas, producers, and consumers.
    Consider using tools to generate visual representations of your event flows.
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Salesforce’s event monitoring features and consider implementing additional
    logging to track event publication and consumption. This can help identify performance
    issues and aid in debugging.
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use event-storming sessions with your team to model complex business processes
    before implementing them. This can help identify appropriate boundaries and event
    usage.
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For some scenarios, other integration patterns, such as request-response or
    publish-subscribe, might be more appropriate than a purely event-driven approach.
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For complex event handling that may approach governor limits, consider using
    Queueable Apex to break the processing into manageable chunks.
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Salesforce’s platform cache to store frequently accessed data that’s derived
    from events, reducing the need for repeated complex event processing.
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use feature flags to gradually roll out event-driven features and to quickly
    disable problematic event flows if issues arise in production.
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By applying these strategies, you can create a more maintainable and performant
    event-driven system in Salesforce, avoiding the pitfalls of event hell while still
    reaping the benefits of reactive, decoupled architectures. Remember, the goal
    is to use events as a powerful tool in your architectural toolkit, not as a one-size-fits-all
    solution to every integration and communication challenge.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: We will now take a slight detour to look at the general impact of new AI technologies
    on integration anti-patterns.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: AI’s impact on integrations
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As AI continues to evolve and permeate various aspects of software development
    and system integrations, it’s crucial to consider both the potential benefits
    and risks it introduces. This section explores how AI might influence integration
    practices, potentially giving rise to new anti-patterns while also offering opportunities
    to avoid existing ones.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: The integration landscape is on the cusp of a significant transformation as
    AI technologies become more prevalent. While the promise of AI-driven integrations
    is enticing, it’s important to approach this new frontier with a critical eye.
    As with any technological advancement, the introduction of AI into integration
    practices may give rise to new anti-patterns that could potentially undermine
    the very efficiencies they aim to create.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: One potential anti-pattern that may emerge is what we might call *AI overreliance
    syndrome* . This occurs when organizations become excessively dependent on AI-powered
    integration tools, neglecting human oversight and domain expertise. For instance,
    consider a scenario where a company implements an AI-powered integration platform
    that promises to automatically map data fields and optimize data flows between
    Salesforce and their legacy ERP system. Impressed by the initial results, they
    might reduce their integration team and rely entirely on the AI system. However,
    the AI could fail to understand nuanced business rules and complex data relationships,
    leading to critical errors in inventory management and order processing. This
    overreliance could result in a loss of human expertise and context, potential
    for systemic errors due to misunderstood business logic, and difficulty in troubleshooting
    and resolving complex integration issues.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: Another potential anti-pattern we might see is *black-box integration* . This
    could emerge when AI models used in integrations become so complex that they’re
    incomprehensible to human developers and architects. Imagine a company employing
    a sophisticated machine learning model to manage real-time data synchronization
    between Salesforce and multiple external systems. The model continuously evolves
    based on data patterns. Over time, the integration behavior might become unpredictable,
    and the team could struggle to explain or control certain data transformations.
    This lack of transparency and auditability could lead to difficulties in maintaining
    compliance with data regulations and increase the risk of unexpected behavior
    in critical business processes.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: We might also encounter what we could call *training data bias amplification*
    . This anti-pattern could occur when AI models used in integrations are trained
    on biased or incomplete datasets, leading to skewed results and potentially discriminatory
    outcomes. For example, a financial services company might use an AI model to integrate
    customer data from Salesforce with their credit scoring system. If the model is
    trained primarily on historical data from urban areas, it might fail to accurately
    assess creditworthiness for rural customers, leading to unfair loan rejections.
    This could result in the perpetuation and amplification of existing biases, potential
    legal and ethical issues, and erosion of trust in AI-driven integration systems.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: While these potential anti-patterns paint a cautionary picture, it’s important
    to note that AI also offers significant opportunities to mitigate existing integration
    anti-patterns. For instance, AI could help prevent the *fat interface* anti-pattern
    by analyzing usage patterns and suggesting optimal interface structures. It could
    also address *integration pattern monomania* by suggesting the most appropriate
    integration patterns based on real-time system behavior and requirements. Moreover,
    AI models could help prevent *chatty integration* by predicting potential performance
    bottlenecks and suggesting optimizations.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: To harness the benefits of AI in integrations while avoiding potential pitfalls,
    a balanced approach is crucial. This might involve combining AI recommendations
    with human expertise for critical integration decisions, prioritizing AI models
    and tools that provide clear explanations for their decisions, implementing robust
    monitoring systems to track AI-driven integration performance, ensuring AI models
    are trained on diverse, representative datasets to minimize bias, and conducting
    periodic audits of AI-driven integration systems.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: As AI continues to reshape the integration landscape, it’s crucial for Salesforce
    architects and developers to stay informed about both the opportunities and risks
    it presents. The journey of AI in the realm of integrations is just beginning,
    and it’s likely that new anti-patterns and solutions will emerge as the technology
    evolves. Staying adaptable, critical, and informed will be key to navigating this
    exciting yet challenging landscape.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: We have now completed our coverage of the patterns in this chapter and will
    continue to the key takeaways.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: Knowing the takeaways
  id: totrans-357
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will abstract a bit from the specific patterns and instead
    try to pull out the wider learning points you can use in your day-to-day work
    as a Salesforce architect or in preparing for the CTA Review Board.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: 'When architecting Salesforce solutions, you should be mindful of the following:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: Middleware can be a great way to create order and improve the structure of your
    system landscape. However, you can also use it in ways that do more harm than
    good.
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If all you are doing is replacing point-to-point connections with equivalent
    one-to-one flows through the middleware, you are probably in anti-pattern territory.
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom services can be a great addition to your Salesforce org in certain cases.
    However, they come with considerable added complexity.
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should never reflexively add lots of custom services because they seem to
    be what the business is calling for. Instead, take a step back and look at the
    big picture of requirements to see what options you have for realizing the specific
    integration flows required.
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are building custom interfaces, whether on Salesforce or on your middleware
    platform, have appropriate governance in place to avoid ending up with a fat interface
    that does everything.
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid excessively frequent integration calls if possible.
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you do need high-frequency state transfer, consider using a dedicated technology
    such as CDC.
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In general, always design integrations with system limitations explicitly considered.
    Don’t assume an old ERP can handle unlimited calls, for example. Salesforce, of
    course, also has defined limits.
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep a flexible approach to integration architecture. Don’t fall in love with
    a particular style and use it for everything. Just because event-driven microservices
    are hot, doesn’t mean they are right for every scenario. Consider leveraging Salesforce’s
    *Integration Patterns* guide for guidance on selecting appropriate integration
    patterns.
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do give good guidance on how to select integration patterns for both members
    of your team and external partners. Don’t assume that they will make the right
    decisions by themselves.
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In preparing for the CTA Review Board, you should be mindful of the following:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: Almost every scenario will have a requirement for middleware. You should know
    the key capabilities of common platforms such as MuleSoft and be able to talk
    intelligently about how they fit into the system landscape.
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While you may not see enough integrations to create a problem along the lines
    of the MINO pattern in the scenario, it is still worth thinking about the specific
    value the middleware is adding to each of the integration flows you are funneling
    through it.
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t reflexively just funnel every integration through the middleware—there
    are often exceptions that may require different treatment.
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Suggesting a custom web service is a major piece of customization and would
    need a strong justification to include in a review board architecture.
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need a custom interface, it is more likely that you should be building
    and exposing via the middleware in most scenarios.
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While you are not likely to face a situation with a fat interface in a review
    board situation, it is worth considering how you are structuring your integration
    interfaces and whether it is balanced.
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to consider the potential performance implications of the designs you
    suggest. Often, scenarios will have high-volume requirements that, if specified
    in an obvious way, will lead to performance issues similar to the chatty integration
    pattern.
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be prepared to discuss how DevOps practices can be applied to manage and deploy
    complex integrations in a Salesforce context.
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review the key objectives of the CTA Review Board and be ready to articulate
    how your experience aligns with those objectives.
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Familiarize yourself with the latest Salesforce features and best practices
    relevant to your project.
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure you have all supporting documentation and artifacts ready for presentation.
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may get quizzed on integration limits for the Salesforce platform, so it’s
    worth having these memorized for the board.
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should know all the common integration patterns on the Salesforce platform
    inside out. This includes the decision guidance on when to choose what pattern.
    You are likely to need several at the board, and you should be able to clearly
    articulate why you have chosen as you have.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: We have now covered the material for this chapter and are ready to proceed.
    First, however, we will summarize our learning.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have reviewed five different anti-patterns that in very
    different ways can contribute to failing integration architecture. It is worth
    keeping these in mind.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: The integration domain is exceedingly complex and there is scope for getting
    things wrong at multiple levels. From choosing the wrong integration patterns
    or misusing your middleware to the technical details of your concrete implementation,
    there are anti-patterns that can potentially cause serious problems not only to
    your project but also at an enterprise architecture level.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: This complexity underscores why seasoned architects approach integrations with
    caution. They are one of the most common causes of project failures, both on Salesforce
    and in general.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: It’s worth reiterating that this chapter is the only one where all the anti-patterns
    apply not just to Salesforce but to all enterprise software systems. Having covered
    this material, you are hopefully slightly better prepared to tackle the challenges
    ahead of you in the integration domain.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: Having now covered the integration domain, we will continue to talk about anti-patterns
    that apply to your deployment processes and governance.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 3: Process and Communication Anti-Patterns'
  id: totrans-391
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part will teach you how to identify and mitigate anti-patterns around process,
    governance, and communication.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B30991_07.xhtml#_idTextAnchor105) , *Keeping the Development
    Life Cycle from Going Off Track*'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B30991_08.xhtml#_idTextAnchor118) , *Communication without Mistranslation*'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B30991_09.xhtml#_idTextAnchor142) , *Conclusion*'
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
