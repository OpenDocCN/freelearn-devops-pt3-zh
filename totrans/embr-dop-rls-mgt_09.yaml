- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Embracing DevOps Culture in Your Release Management Strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When DevOps deliverables are used to define success, it can be difficult to
    get executive buy-in and budgetary support. This is particularly true if senior
    managers don’t understand the true value that DevOps brings to their customers.
    Instead, executives might mistake DevOps as being a drain on profits, seeking
    justification for its existence rather than viewing it as a value multiplier and
    long-term strategy. In this case, executives might attempt to reduce investment
    in your team, instead of helping you increase the capacity that is needed to improve
    the customer experience. Therefore, DevOps leaders must establish a culture of
    DevOps and define success in terms of customer-centric outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: Building a DevOps culture requires thorough planning and a unified approach.
    Start by getting buy-in from executive leadership, then form a DevOps team. Once
    your team has been established, gradually define processes and foster a culture
    of collaboration and continuous improvement. Don’t forget to provide training
    and support and to celebrate successful outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Faster and cheaper doesn’t always mean better
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps is more than just tools and processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adopting the CALMS approach
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It takes time to develop a DevOps mindset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faster and cheaper doesn’t always mean better
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At some point in the evolution of DevOps, and seemingly out of nowhere, we
    have become a culture that cost-justifies everything. In doing so, we violate
    the classic axiom that you can only ever satisfy two of three constraints: *scope
    (quality)*, *time (speed)*, and *cost (low cost)*. This is known as the **project
    management triangle**or **the triple constraint**, which suggests that any change
    in one of these three constraints will inevitably affect the others; you will
    have to pick two of them and compromise on the third. All too often, we introduce
    some new tool and attempt to persuade others about how it will speed things up,
    result in cost savings, or free up our time for more meaningful tasks. Then, we’d
    discover how this new tool could improve quality if we extended it by adding yet
    another new feature or capability with the promise that it would yield a more
    reliable process compared to the existing one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1: A diagram of the triple constraint](img/B21803_09_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.1: A diagram of the triple constraint'
  prefs: []
  type: TYPE_NORMAL
- en: These arguments are easy to win in most technology companies by multiplying
    the calculated savings across the number of team members that it would aid. However,
    discovering the truth about how effective a change will be is a lagging indicator
    as it is exceedingly difficult to predict the outcomes of a new process against
    real-world conditions. It is for this very reason that continuous experimentation
    and continuous learning are encouraged in DevOps culture. Sometimes, you never
    really know if a new change will work out without first putting it through its
    paces. The key, of course, is knowing precisely when a new change is not working
    out and that it is time to change course; consider it both an art and a science!
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, it is easy to produce a narrative about how large the potential
    benefit can be to justify the costs of implementing a new tool. The reality is
    that you can’t gain a single ounce of competitive advantage from these investments
    because your competitor can make the same investments as you. In this context,
    any perceived gains that you think you are making are, in reality, not sustainable.
    Instead, you are just holding the line by remaining peers with your competition.
    Sadly, the decisions for these kinds of investments are frequently made by upper
    management in isolation from the rest of the team, and often with a narrow set
    of interests in mind. In these scenarios, developers get thrown under the bus
    in favor of perceived cost-cutting measures.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have underscored the meaning of the *triple constraint* and its
    impact on software development, let’s discuss some strategies that will help you
    cope with balancing the competing priorities of quality, speed, and cost. Let’s
    begin by focusing on the single most important aspect of creating new software:
    quality.'
  prefs: []
  type: TYPE_NORMAL
- en: Never compromise on quality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a result of the current state of affairs in the world, there is a greater
    demand than ever before for businesses to cut their expenses. Given that budgetary
    limitations significantly influence the decision-making process of most leaders,
    the remaining factors that are up for negotiation are the quality of the product
    (or service) or the velocity of the product.
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on customer expectations in a tremendously competitive market, you shouldn’t
    compromise on quality. When you relax the standard of quality, it will not only
    harm the product’s image and overall reliability, but it will also come back to
    haunt you in the form of additional costs down the line – particularly during
    the maintenance phase. Simply put, any cost that you avoid upfront by skimping
    on quality and not putting in the time to carefully engineer your product will
    come back to threaten the success of your products and services in the future
    – potentially by orders of magnitude. Now that I have made myself clear, we, as
    professionals, must deliver high-quality products and services under tight financial
    constraints. This leaves us with the last option out of the three: velocity (speed).'
  prefs: []
  type: TYPE_NORMAL
- en: It becomes evident that achieving optimal velocity and a high standard for excellence
    relies heavily on how well your team aligns with your business objectives and
    the known requirements. At this point, it should be apparent that achieving both
    goals at their greatest potential is not practical. However, you have the opportunity
    to create an acceptable balance without completely undermining one or the other.
    As previously emphasized, **quality assurance** (**QA**) testing is crucial in
    achieving your desired equilibrium between these competing priorities. By implementing
    QA and software testing alongside DevOps release management, you can achieve quicker
    market penetration while optimizing the value of your product. Therefore, it is
    essential to seamlessly incorporate automated quality assurance methods throughout
    the entirety of the SDLC to ensure they are always given proper attention. As
    your company grows, strive for continuous testing to significantly improve the
    merit of your products. This will not only delight your customers – it also will
    sustain their loyalty to your business. Efficiency allows for quick market entry,
    but ensuring high standards guarantees lasting success and customer contentment.
    Spend some time discovering the perfect balance for your organization’s distinct
    requirements and sustained profitability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some points that will make achieving this goal more successful:'
  prefs: []
  type: TYPE_NORMAL
- en: When initiating a project, it is necessary to establish a comprehensive plan
    for **QA** right from the beginning. This proactive approach ensures that the
    necessary resources are in place to effectively assess and validate the project’s
    deliverables. When incorporating QA planning into the project’s initial stages,
    it is advisable to refrain from neglecting best practices without valid reasons.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test automation** is a valuable practice, especially when it comes to the
    execution of regression testing. By employing test automation, software development
    teams can allocate their time to the creation of new features, while automated
    testing handles the process of verifying the existing ones. This approach ensures
    that previously implemented features remain intact and functional throughout the
    SDLC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parallel testing** is a technique that involves running scripts simultaneously
    rather than sequentially. This approach can greatly decrease the duration required
    to perform various types of tests, including unit, smoke, regression, and cross-browser
    tests. By leveraging parallel testing solutions, organizations can optimize their
    testing processes and achieve faster and more efficient results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Paired programming**, also known as pair programming, is a collaborative
    software development technique where two programmers work together on the same
    task at the same workstation. This approach differs from traditional code reviews,
    which typically involve one programmer reviewing another programmer’s code after
    it has been written. This approach aims to enhance productivity and efficiency
    by leveraging the strengths and expertise of both individuals. By working in tandem,
    programmers can achieve the same benefits as traditional solo programming in a
    reduced timeframe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test-driven development** (**TDD**) is a software development approach that
    offers a viable solution for reducing time to market. By shifting the testing
    process from a post-development activity to an integral part of the development
    phase, TDD presents itself as a beneficial alternative. This methodology emphasizes
    writing tests before writing the actual code, ensuring that the code meets the
    specified requirements and passes the tests. By adopting TDD, developers can streamline
    the development process, identify and rectify issues early on, and ultimately
    expedite the time it takes to bring a product to market.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By using these recommendations, your project can effectively reconcile the conflicting
    objectives of low cost, speed, and quality, thereby transcending the divide between
    these two factors. Naturally, you must consider the overall impact on your project
    at the beginning phases of your project planning.
  prefs: []
  type: TYPE_NORMAL
- en: Project timelines are negotiable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the majority of cases, project timelines are subject to negotiation. Customer
    expectations, market pressure, internal financial goals, and benchmarking against
    competitors are common sources of unreasonable deadlines; in certain instances,
    the entirety of them may be affected. By ensuring proper alignment of expectations,
    the process of project or improvement plan scheduling and organization becomes
    more streamlined. This enables the potential to deliver desired outcomes in half
    the time, without necessitating a doubling of the initial projected cost for the
    customer. Optimize your approach to this challenge by determining the ideal timeframe
    for delivering a project of superior quality while also adhering to a constrained
    velocity. This can have multiple interpretations that are beyond the scope of
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: However, when implementing this balance, there will inevitably be certain trade-offs.
    In some cases, it may impede the product teams’ ability to deliver in frequent
    and rapid iterations, tailored to meet precise customer requirements. Furthermore,
    reconciling speed with quality will limit the team’s ability to swiftly prioritize
    shifting requirements. A common issue lies with the use of larger queues, which
    can result in the accumulation of expanding and hidden technical debt related
    to the management of backlogs, opportunity costs, and heightened complexity, among
    other factors. Nevertheless, in this scenario there is still hope, through the
    process of streamlining the operational framework, it becomes evident that the
    primary constraint impacting team efficiency is the size of the queue. The following
    phase requires that you investigate methods, such as Kanban, to enhance the area
    where the bottleneck exists. The goal is to increase scalability while adhering
    to the previously elucidated constraints of quality and low cost.
  prefs: []
  type: TYPE_NORMAL
- en: The problem of perception in DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When asked, many tech executives will admit that they are disappointed with
    the progress of their DevOps release management initiative. In this scenario,
    they are spending at least 15% or more of their engineering budgets on things
    that are nongermane to their central business model and they are not seeing sufficient
    justification for the expense. The reason that these executives invested in a
    DevOps transformation in the first place is to improve innovation, distinctiveness,
    and competitive advantage. Another negative influence on this perception is that
    it is not clear to most business executives why DevOps is so difficult to understand
    or why it costs so much to implement.
  prefs: []
  type: TYPE_NORMAL
- en: Upon further investigation, a trained eye can quickly determine that there is
    no real problem with DevOps in and of itself. In other words, a combination of
    factors limits the realization of business value for these executives’ investments
    in DevOps tools, along with the productivity of their software and DevOps engineers.
    These elements include velocity, cost, staffing, and perception. This is where
    key performance metrics such as deployment frequency, lead time, **mean time to
    recovery** (**MTTR**), defect rate, and customer satisfaction help measure the
    impact of DevOps practices.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to velocity, ironically enough, DevOps is sometimes seen as the
    bottleneck that slows down software development and impacts operations teams that
    are simply striving to keep pace with customer demand. Multiple factors affect
    the flow of productivity for those efforts, but in too many cases, poor visibility
    into the progress or real-world outcomes is the primary cause of perceived delays.
    To boost delivery velocity, teams must first gain visibility into their DevOps
    performance by collecting data and metrics. With improved visibility, teams may
    compare their performance to that of other teams or organizations in the market,
    with the ultimate goal of identifying inefficiencies in the delivery pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Regarding expenses, the total operating costs associated with deploying a cloud
    application sometimes does not fulfill executives’ expectations that embracing
    DevOps will lead to improved efficiency, speed, and cost-effectiveness. If DevOps
    accounts for more than a quarter of the budget, DevOps will probably be attributed
    with at least a portion of the divergence between projected and actual expenses.
    The reason for this is that when DevOps teams allocate a substantial portion of
    their precious time to putting out fires or manually building and updating deployment
    environments, they are unable to effectively optimize costs or mitigate emerging
    issues. This is due to the lack of time available to accomplish both tasks concurrently.
    To optimize the development effort, it is advisable to invest in robust DevOps
    practices that facilitate the streamlining of operations, particularly through
    the incorporation of automation whenever feasible. This will aid in addressing
    the expenses and intricacy associated with enforcing and administering those protocols.
  prefs: []
  type: TYPE_NORMAL
- en: The cost of employing your team is yet another factor to consider while developing
    your strategy. Due to the high cost and scarcity of qualified DevOps technologists,
    it may be difficult to quickly expand a team to meet increasing demand in a short
    period. Investing in recruitment efforts and the opportunity for upward mobility
    is essential, even for firms that are privileged to have qualified DevOps staff
    on hand. In addition, these businesses generally have to deal with a high rate
    of staff turnover, making it necessary for a greater number of inexperienced workers
    to respond to consumer requests.
  prefs: []
  type: TYPE_NORMAL
- en: The public’s impression of your business, products, and services should be yet
    another consideration. Many company executives have the misconception that developing
    and releasing cloud-native applications should be more straightforward, less time-consuming,
    and inexpensive than it truly is. Software developers, consumers, and company
    executives might develop this impression due to a lack of experience with DevOps
    release management practices, particularly if they observe how respected companies
    such as Google, Capitol One, and Etsy approach the delivery of cloud-native applications.
  prefs: []
  type: TYPE_NORMAL
- en: Almost everyone seems to assume that delivering software applications in the
    cloud will be easy, but few understand how much work goes into making cloud software
    distribution as simple and automated as the famed FAANG-Stock companies. However,
    virtually all smaller **Software-as-a-Service** (**SaaS**) providers will never
    have the capital required to make investments of the same magnitude as those bigger
    players. Nonetheless, innovative products and services that supply groundbreaking
    potential will become less expensive and easier to implement and will come to
    market from time to time. Every day, new and revolutionary solutions are created,
    such as Kubernetes, to radically empower all stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: FAANG-Stocks companies
  prefs: []
  type: TYPE_NORMAL
- en: Five well-known American technology companies – Meta (formerly Facebook), Amazon
    (AMZN), Apple (AAPL), Netflix (NFLX), and Alphabet (GOOG) – are referred to by
    the abbreviation “FAANG” in financial circles. As of the first quarter of 2022,
    the aggregate market capitalization of the five FAANG stocks was over $7 trillion,
    making them not only extremely popular among consumers but also the world’s largest
    companies.
  prefs: []
  type: TYPE_NORMAL
- en: All of the FAANG stocks are part of the S&P 500 Index and trade on the Nasdaq
    exchange. As an extensive reflection of the market, the market’s fluctuations
    coincide with the movement of the S&P 500\. In August 2023, the FAANGs accounted
    for about 20% of the S&P 500\. This is an astonishing percentage when you realize
    that the S&P 500 is often used as a stand-in for the overall US economy.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes our examination of the triple constraint and the tactics that
    you can employ to tame the competing prerogatives of quality, speed, and cost.
    As you have been, these facets have a major influence on a company’s profitability,
    stability, and culture. Next, let’s discuss why DevOps is more than just tools
    and processes. Spoiler alert – the single most important aspect of DevOps release
    management is people!
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is more than just tools and processes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It might be an unpopular opinion, but reliance on tools will not lead your DevOps
    initiatives to successful outcomes. DevOps teams that achieve outstanding results
    concentrate on addressing their challenges with people and processes as the first
    step, and later improve the quality of their work through the use of tools, rather
    than adopting the opposite approach.
  prefs: []
  type: TYPE_NORMAL
- en: This myopic view is illustrated, for instance, by purchasing something with
    the purported goal of increasing team productivity, which ultimately leads to
    process improvement. Wiser initiatives would allocate resources to the methodology,
    such as DevOps release management, and then acquire the resources and education
    to impact a greater number of stakeholders. The recurring flaw in this example
    is that people are all about their skills. In this context, the prevailing belief
    is that a person’s merit is defined by how well they understand all of the tools
    and processes to deliver value. Incredibly, many leaders of these IT companies
    raise concerns that the current people don’t have the skills needed, so hiring
    from the outside is seen as the only matter of recourse. In this context, upper
    management views people as dehumanized cogs participating in a solely profit-driven
    machine. In such a case, professionals are reduced to little more than human capital,
    an aggregation of skills that are supplied to perform a narrow scope of work,
    with no appreciation for the value that they provide in context with the rest
    of the value stream.
  prefs: []
  type: TYPE_NORMAL
- en: 'Elite-performing teams overcome the people challenges behind a DevOps transformation
    first. This entails finding a way to implement the standard hallmarks of DevOps
    release management in the manner that best suits the team’s flow as a whole. The
    specifics include staples such as CI/CD, automated testing, and detailed monitoring
    and analysis. There is no universal approach that any organization can choose
    to deal with obstacles in DevOps initiatives, but common threads among high performers
    reveal some notable trends. The defining feature that differentiates high performers
    from less productive teams is a dedicated approach to upskilling team members.
    This can include things such as compensating a colleague for earning specific
    certifications or providing access to online educational resources, along with
    similar approaches. Companies must not divorce from an immersive learning approach
    as these investments are much more successful than they are for firms that do
    not incorporate them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2: A DevOps team working collaboratively](img/B21803_09_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.2: A DevOps team working collaboratively'
  prefs: []
  type: TYPE_NORMAL
- en: Organizations can establish internal communities that promote education and
    improve resiliency toward adjustments in staff or product lines. This helps identify
    widespread internal conflicts and fosters a more collaborative environment. Highly
    effective teams utilize communities of practice, which consist of a small number
    of dedicated professionals who share a common interest and continuously improve
    their skills through ongoing interaction. In addition, high-performing teams often
    engage in grassroots DevOps initiatives and develop proofs-of-concept to solve
    unique company challenges. Team members can better comprehend their coworker’s
    responsibilities through practical training, while tactical strategies can be
    formulated and success stories can be shared through internal group discussions
    and newsletters. Knowledge silos are something that mature DevOps adopters strive
    to avoid, and they also work to strengthen soft skills such as sharing information
    effectively so that they can continue to work together openly.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to socialize knowledge across your entire organization so that
    it’s accessible to everyone. DevOps teams that are highly successful make a strident
    effort to provide opportunities for mentoring, improving soft skills, and a host
    of related approaches.
  prefs: []
  type: TYPE_NORMAL
- en: This section has been made intentionally concise to specifically avoid diluting
    the focal point of prioritizing the people that you depend on to achieve successful
    outcomes – not only in DevOps but in any initiative. Now that we have made this
    important distinction, we’ll examine the **Culture, Automation, Lean, Measurement,
    and Sharing** (**CLAMS**) approach in the next section. This strategic framework
    will elevate your teammate’s personal success, helping them to achieve their highest
    potential. The byproduct of this tactic is an unmistakable amplification of your
    business’ capacity to achieve its strategic objectives. This synergy is the hallmark
    of the DevOps approach, which is born out of a mutually beneficial relationship
    for all stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: Adopting the CALMS approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CALMS serves as a conceptual framework for facilitating the seamless integration
    of DevOps teams, functions, and systems within an organization. The CALMS framework
    provides a maturity model in the field of computer science, aiding managers in
    assessing the preparedness of their organization for DevOps implementation. It
    enables them to identify areas that require modification to achieve readiness.
    Notably, the CALMS approach is attributed to *Jez Humble*, one of the co-authors
    of *The* *DevOps Handbook*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CALMS framework for DevOps encompasses five fundamental tenets:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Culture**: This encompasses a prevailing ethos of collective accountability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automation**: Team members actively pursue opportunities to implement automation
    to streamline and optimize various processes while embracing continuous delivery.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lean practices**: Instead of working on multiple tasks simultaneously, focus
    on a smaller number of tasks at a time. Lean emphasizes visualizing work for better
    coordination and collaboration. Notably, it is important to manage queue lengths
    and the backlog of tasks waiting to be processed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Measurement**: This plays a crucial role as it allows valuable information
    to be collected to ensure comprehensive visibility into the operating environment.
    These mechanisms enable the systematic gathering of data, facilitating a deeper
    understanding of the various processes and systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sharing**: Sharing simple lines of communication between development and
    operations promotes continuous two-way dialogue. These communication channels
    are designed to facilitate continuous collaboration between DevOps teams:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 9.3: An infographic of the CALMS approach to DevOps](img/B21803_09_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.3: An infographic of the CALMS approach to DevOps'
  prefs: []
  type: TYPE_NORMAL
- en: The CALMS framework is occasionally regarded as a replacement for **IT Service
    Management** (**ITSM**), which is a strategic methodology for developing, delivering,
    managing, and enhancing the utilization of IT within an organization. **ITSM**
    is a framework commonly linked with the **Information Technology Infrastructure
    Library** (**ITIL**). Some IT administrators perceive ITSM as excessively inflexible,
    leading to perceived incompatibility with DevOps practices. The CALMS framework
    is often regarded as a means of effectively managing and reconciling the disparities
    between these two distinct strategies.
  prefs: []
  type: TYPE_NORMAL
- en: Culture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even though DevOps is built on increased communication between operations workers
    and developers, it originally did not necessitate collaboration between these
    groups and the business itself. However, when it comes to the culture level, the
    CALMS model seeks to guarantee that the entire organization is in agreement with
    the reasons why DevOps is implemented and the expectations that are associated
    with the endeavor.
  prefs: []
  type: TYPE_NORMAL
- en: The CALMS model places significant emphasis on the fundamental purpose of technology,
    which is to achieve desired outcomes. It highlights the notion that technology
    should be employed solely to bolster and facilitate the operations of a business,
    rather than being adopted merely for the sake of being up-to-date with the latest
    technological advancements. Initiating collaboration between business, development,
    and IT operations teams during the early stages of a DevOps transition is crucial
    for garnering widespread support for the implementation of new project management
    and delivery practices.
  prefs: []
  type: TYPE_NORMAL
- en: To secure funding and support for ongoing projects that will pay off in the
    long run, this type of collaboration needs to be founded on nontechnical conversations
    with business teams. The technical team must clarify the parameters of capabilities,
    costs, and timelines to the business side and make sure that these perceptions
    are accurate.
  prefs: []
  type: TYPE_NORMAL
- en: Automation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The implementation of DevOps without incorporating automation is ill-advised
    as it hinders the efficiency and effectiveness of the process. However, it is
    important to note that the presence of subpar automation, which enforces alterations
    without proper consideration, can exacerbate the negative consequences of poor
    planning even further. While DevOps is strongly associated with continuous development
    and delivery methodologies, it remains crucial to provide measures that prevent
    the deployment of faulty code resulting from insufficient testing. The CALMS framework
    advocates for the implementation of a robust testing regimen that does not impose
    substantial delays on DevOps workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Premature implementation of automation is apt to yield counterproductive outcomes.
    You should adhere to manual processes during the initial stages of a DevOps implementation,
    gradually incorporating low-risk automation as the involved teams acclimate themselves
    to the intricacies of DevOps methodology. Your team should progress to more sophisticated
    automations once the degree of risk has been mitigated via the elevated acumen
    of IT personnel concerning the adopted tools within the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Lean
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To mitigate any potential adverse impact on performance resulting from automation,
    it is necessary to establish a shared understanding inside the business on the
    definition of *Lean*, a principle derived from the Lean manufacturing philosophy
    of the 1980s. While Lean software development primarily emphasizes enhanced efficiency
    and waste reduction, it is important to note that engaging in shortcuts does not
    align with the principles of Lean methodology. Instead, it introduces avoidable
    hazards.
  prefs: []
  type: TYPE_NORMAL
- en: Lean methodology requires that you determine a risk profile that is appropriate
    for your organization, articulating the results that you want to achieve with
    a DevOps project, and eliminating any procedures that do not contribute to the
    achievement of those outcomes. The process ought to be one of learning and iteration,
    in which the lessons learned from one project are utilized in other projects.
    As an illustration, particular portions of a process that yield undesirable outcomes
    must be identified documented, and removed for subsequent projects.
  prefs: []
  type: TYPE_NORMAL
- en: In a similar vein, any actions that result in challenges should be regarded
    as learning opportunities, rather than duplicating the same errors with hopes
    of achieving a different outcome. This kind of learning occurs most quickly in
    the initial few projects that are done at the beginning of a DevOps transformation.
    This is because this is the time when the greatest amount of wastefulness can
    be detected and eliminated with greater ease.
  prefs: []
  type: TYPE_NORMAL
- en: Measurement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To effectively adopt the DevOps approach, organizations must recognize the significance
    of employing metrics and monitoring tools to gain insights into the ongoing processes
    and outcomes. Without leveraging these analytical measures, the learning potential
    inherent in the transition to DevOps remains untapped. To effectively monitor
    **key performance indicators** (**KPIs**) and anticipated results, it is essential
    to establish tooling that is centered around the needs and objectives of the business.
    In the realm of business, it is necessary to employ metrics that effectively gauge
    success. These metrics should encompass both financial indicators and the assessment
    of necessary capabilities. By adopting such a comprehensive approach, organizations
    can ascertain their progress and achievements in a manner that aligns with the
    overarching goals and objectives of the business.
  prefs: []
  type: TYPE_NORMAL
- en: In the initial stages of embracing the DevOps methodology, organizations will
    encounter a paradigm where monitoring and measurement serve as valuable tools
    for identifying and pinpointing areas of concern. The DevOps journey of a business
    can be sped up by establishing a baseline and incorporating metrics and monitoring
    into a continuous improvement evolution.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This involves ensuring that all parties involved in DevOps processes maintain
    awareness by consistently providing access to real-time information and updates
    regarding ongoing activities and events. The majority of DevOps tools incorporate
    feedback loops that encompass both operations and development teams, often extending
    to involve the support staff as well.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, it is crucial to bear in mind that the actions being performed
    are generally in service of the enterprise. The IT teams are responsible for ensuring
    that the business remains informed about ongoing events and the anticipated results
    of projects. This returns us to the *collaboration* step, emphasizing that the
    CALMS system follows a circular process.
  prefs: []
  type: TYPE_NORMAL
- en: What to keep in mind when adopting CALMS for DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To ensure the successful implementation of the CALMS model, it is essential
    to adopt a circular perspective. Neglecting to view **CALMS** as a cyclical process
    will inevitably lead to unsuccessful attempts at implementation. This concept
    revolves around the perpetual acquisition of knowledge and the enhancement of
    the organization’s utilization of the DevOps methodology. The recommended enhancements
    should exhibit a significant magnitude initially and gradually transition toward
    smaller, incremental changes as the organization and its DevOps proficiency advance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4: A depiction of the CALMS approach as a cyclical process](img/B21803_09_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.4: A depiction of the CALMS approach as a cyclical process'
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that CALMS operates as a framework rather than a collection
    of tools. In the realm of DevOps, organizations that adhere to the principles
    of CALMS are granted the flexibility to exercise discretion in selecting the tools
    integrated within their DevOps pipelines. The aforementioned tools include offerings
    from prominent vendors such as Atlassian and HashiCorp, alongside open source
    DevOps tools such as Git, Puppet, and Jenkins. Considering this, it is worth reiterating
    the emphasis that DevOps places on putting people before tools.
  prefs: []
  type: TYPE_NORMAL
- en: The CALMS framework, while valuable in its own right, should not be regarded
    as a substitute for alternative development philosophies and systems that can
    effectively enhance the level of control within the DevOps domain. Agile methodologies,
    exemplified by approaches such as Scrum and Kanban, offer valuable frameworks
    for establishing a consistent and robust implementation of DevOps within an organization.
    Overall, the CALMS framework serves as a valuable tool for assessing the level
    of maturity and efficacy of a company’s DevOps implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you understand the strategic importance of the CALMS approach and how
    you can leverage its flexibility to synergize your workflow, let’s discuss the
    DevOps mindset. Adopting a DevOps mindset necessitates that teams comprehend both
    the long-term and immediate advantages of DevOps and that they will likely require
    a change in their process, perspective, and patience for the time horizon that
    is needed to achieve these outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: It takes time to develop a DevOps mindset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The implementation of significant organizational transformations should ideally
    occur in a series of phases. Otherwise, resistance or confusion may arise. Rapidly
    challenging groupthink might result in a jarring experience known as culture shock.
  prefs: []
  type: TYPE_NORMAL
- en: Embracing a DevOps culture necessitates obtaining agreement and support from
    individuals across all levels of the organizational hierarchy, including developers,
    systems administrators, security specialists, and executives alike. Teams must
    comprehend the enduring and immediate advantages of DevOps and they will likely
    require a demonstration of the changes in the processes. Ensure that these modifications
    are thoroughly documented and effectively communicated to all individuals. Productivity
    will be negatively affected and there may be further harmful outcomes unless colleagues
    recognize that the fundamental principles of DevOps, including efficiency, adaptability,
    continuous learning, and unity, are in line with their own beliefs.
  prefs: []
  type: TYPE_NORMAL
- en: Organizations that have already adopted the Agile methodology serve as optimal
    environments for the implementation of this cultural transition. In the realm
    of DevOps, there exists a predilection among teams for responsive and proactive
    measures as opposed to sluggish and reactive ones. The DevOps culture places a
    strong emphasis on prioritizing objective improvements over subjective and self-centered
    approaches. The cultivation of a team-first ethos is crucial for achieving enhanced
    productivity and overall advancements across all stages of a project. Although
    the transition may not occur instantaneously, the outcomes are expected to be
    undeniably favorable.
  prefs: []
  type: TYPE_NORMAL
- en: 'One common misconception that arises is the belief that culture can be initiated
    or established from the outset. Contrary to the opinions of some, it is worth
    noting that developing culture from within holds significant importance. However,
    it is widely held that culture can be considered a lagging indicator in various
    contexts. The modification of operating practices leads to the alteration of culture.
    A change in the team’s set of tools can potentially induce a transformation in
    culture as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5: Be patient – building DevOps culture takes considerable amounts
    of time](img/B21803_09_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.5: Be patient – building DevOps culture takes considerable amounts
    of time'
  prefs: []
  type: TYPE_NORMAL
- en: Altering culture requires a significant amount of time as it necessitates transforming
    perspectives and strategies so that they work. Although an individual can begin
    utilizing a new tool right away, it may take several years for an organization
    to perceive any level of maturity in its implementation. Indeed, some firms have
    been implementing DevOps since 2016 or even earlier and regard themselves to still
    be in a state of immaturity.
  prefs: []
  type: TYPE_NORMAL
- en: The development of culture is not a deliberate construction, but rather a natural
    and spontaneous process. The phenomenon under consideration gradually becomes
    evident as the cumulative result of various human interactions and the subsequent
    transformations occurring within them. These transformations are facilitated by
    the acquisition of novel operational capabilities that were previously unavailable,
    and the corresponding authorization to explore these capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: But that perspective isn’t shared by everyone. It is easier to see how procedures,
    methods, and tool sets need to change when you begin with a cultural end goal
    in mind, according to several consultants and practitioners. However, due to changes
    in organizational priorities, competitive forces, consumer expectations, internal
    dynamics, and technology, pivots are likely to occur, even with a well-planned
    transition.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of the strategies that firms use to cultivate a collaborative culture
    between software engineers and operations people, it is crucial to recognize that
    any technique will initially offer slow results. Cultural transformation is a
    gradual process that typically originates from the efforts of ordinary people
    at the local level. An effective strategy to enhance these efforts is to identify
    outstanding ambassadors within the engineering community and support them in promoting
    the cause among their colleagues.
  prefs: []
  type: TYPE_NORMAL
- en: Achieving DevOps success necessitates a comprehensive understanding that there
    is no singular, straightforward approach to implementing organizational change.
    Cultural shifts pose significant challenges due to the distinct market requirements,
    industry considerations, resource constraints, and varying levels of willingness
    to embrace change exhibited by different businesses and constituents. This book
    provides valuable recommendations for initiating the process of integrating development
    and operations. However, each organization must independently determine its unique
    cultural framework to implement the necessary transformative measures for success
    in DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This concludes [*Chapter 8*](B21803_08.xhtml#_idTextAnchor141). At this point,
    you have a solid understanding of why faster and cheaper doesn’t always mean better.
    You also know why DevOps is about more than just tools and processes – it’s about
    people first. Furthermore, you have been introduced to the CALMS approach, a conceptual
    framework for facilitating the seamless integration of DevOps teams, functions,
    and systems within an organization. Finally, you should now be able to clearly
    articulate why it takes time to develop a DevOps mindset. Reaching a state of
    maturity on your DevOps journey can take months, if not years.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn what receiving support from leadership and
    stakeholders looks like. You will be shown why DevOps culture must exude high
    levels of patience, trust, ethics, and empowerment. You will also discover why
    tight strategic alignment around investments in staff and technology is invaluable.
    Finally, you’ll learn how to collect and incorporate customer feedback into every
    decision that you make.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the three elements of the project management triangle?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the consequences of skimping on product quality?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does paired programming entail?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do elite DevOps teams focus on first?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Question
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the acronym *CALMS* stand for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Agile methodologies are complementary to the *CALMS* framework?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the core tenets of lean engineering practices?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Successfully embracing a DevOps culture necessitates obtaining agreement and
    support from who?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do cultural shifts pose significant challenges?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
