["```\nimage: atlassian/default-image:<version number>\n```", "```\n    image: postgres\n    ```", "```\n    image: bitnami/postgresql\n    ```", "```\n    image: bitnami/postgresql:16.2.0\n    ```", "```\n    image: docker.publicimage.com/bitnami/postgresql:16.2.0\n    ```", "```\n    image:\n       name: my-company-account/bitnami/postgresql:16.2.0\n       username: $DOCKER_HUB_USERNAME\n       password: $DOCKER_HUB_PASSWORD\n       email: $DOCKER_HUB_EMAIL\n    ```", "```\n    image:\n       name:\n    <aws_account_id>.dkr.ecr.<region>.amazonaws.com/bitnami/postgresql:16.2.0\n       aws:\n          access-key: $AWS_ACCESS_KEY\n          secret-key: $AWS_SECRET_KEY\n    ```", "```\n    image:\n       name: <aws_account_id>.dkr.ecr.<region>.amazonaws.com/bitnami/postgresql:16.2.0\n       aws:\n              oidc-role: arn:aws:iam::<aws_account_id>:role/<your_role_name>\n    ```", "```\n    image:\n       name: <region>.gcr.io/<project>/image\n       username: _json_key\n       password: '$GCR_JSON_KEY'\n    ```", "```\n    image:\n       name: docker.<company name>.com/<account-name>/bitnami/postgresql:16.2.0\n       username: $USERNAME\n       password: $PASSWORD\n       email: $EMAIL\n    ```", "```\n    definitions:\n       services:\n          mysql:\n             image: mysql:5.7\n             variables:\n                MYSQL_DATABASE: test-db\n                #set up password as secure variable and use here\n                     MYSQL_ROOT_PASSWORD: $password\n    ```", "```\n    default:\n       - step:\n             services:\n                - mysql\n    ```", "```\n    definitions:\n       services:\n          mysql:\n             image: mysql:5.7\n             memory: 2048 # double the mimimum\n             variables:\n                MYSQL_DATABASE: test-db\n                #set up password as secure variable and use here\n                MYSQL_ROOT_PASSWORD: $password\n    ```", "```\n    definitions:\n       services:\n          redis:\n             image: redis:3.2\n    ```", "```\n    default:\n       - step:\n             script:\n                - redis-cli -h localhost ping\n             services:\n                - mysql\n    ```", "```\n    definitions:\n       services:\n          docker:\n    ```", "```\n    default:\n       - step:\n             script:\n                - docker info\n             services:\n                - docker\n    ```", "```\n    definitions:\n       services:\n          my-docker:\n             memory: 5120\n             type: docker\n    default:\n       - step:\n          services: my-docker\n          size: 2x\n          script:\n             - docker info\n    ```", "```\n    pipelines:\n      default:\n        - step:\n            script:\n              - ...\n            services:\n              - docker\n    ```", "```\n    options:\n      docker: true\n    ```", "```\npipelines:\n   default:\n       - step:\n         script:\n            - export DOCKER_BUILDKIT=1\n            - docker build .\n         services:\n            - docker\n```", "```\n    - docker build -t $IMAGE_NAME .\n    ```", "```\n    SECRET as the secure variable:\n    ```", "```\n    pipelines:\n       default:\n          - step:\n                name: 'BuildKit and secure variables'\n                script:\n                # Enable BuildKit\n               - export DOCKER_BUILDKIT=1\n               # Pass the secure variable into Docker build and prevent caching\n               - docker image build -t latest --secret id=SECRET --progress=plain --no-cache dockerfile\n               services:\n               - Docker\n    ```", "```\n    FROM ubuntu:latest\n    # Mount and print SECRET\n    RUN --mount=type=secret, id=SECRET \\\n          cat /run/secrets/SECRET\n    ```", "```\n    pipelines:\n       default:\n          - step:\n                name: 'BuildKit and external secret managers'\n                script:\n                # Enable BuildKit\n               - export DOCKER_BUILDKIT=1\n               # This is where the call to the external secret manager resides.  We assume here that it has added the secret to \"/secret_file\"\n               # Pass the secure variable into Docker build and prevent caching\n               - docker image build -t latest --secret id=SECRET,src=/secret_file --progress=plain --no-cache dockerfile\n               services:\n               - docker\n    ```", "```\n    FROM ubuntu:latest\n    # Mount and print SECRET\n    RUN --mount=type=secret, id=SECRET,dst=/secret_file \\\n          cat /run/secrets/SECRET\n    ```", "```\n    - step:\n       name: Build\n       script:\n          # Build the Docker image (assumes the Dockerfile is at the root level of the repository)\n          - docker build -t $IMAGE_NAME .\n          # Authenticate with the Docker registry (this example is Docker Hub)\n          - docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD\n          # Push the image to the Docker registry\n          - docker push $IMAGE_NAME\n       services:\n          - docker\n    ```", "```\nkubectl run <my.app> --labels=\"app=<my.app>\" --image=<my.dockerhub.username>/<my.app>:latest --replicas=2 --port=8080\n```", "```\n    KUBE_CONFIG_BASE64=$(cat ~/.kube/config | base64)\n    ```", "```\n    - step:\n       name: Deploy\n       deployment: production\n       script:\n          -pipe: atlassian/kubectl-run:1.1.2\n           variables:\n              KUBE_CONFIG: $KUBE_CONFIG\n              KUBECTL_COMMAND: 'apply'\n              RESOURCE_PATH: 'deployment.yml\n    ```", "```\n    echo $KUBECONFIG | base64 -d > kubeconfig.yml\n    ```", "```\n    - kubectl --kubeconfig=kubeconfig.yml apply -f deployment.yml\n    ```", "```\n    -step:\n       name: Deploy to Kubernetes\n       image: atlassian/pipelines-kubectl\n       script:\n          - echo $KUBECONFIG | base64 -d > kubeconfig.yml\n          # Run deployment command using kubectl\n          - kubectl --kubeconfig=kubeconfig.yml apply -f deployment.yml\n    ```", "```\n    sudo swapon -sv\n    ```", "```\n    NAME      TYPE      SIZE   USED PRIO\n    /dev/sda3 partition   2G 655.2M   -1\n    ```", "```\n    /etc/fstab.\n    ```", "```\n    1, configure vm.swappiness by performing the following steps:1.  Open `/etc/sysctl.conf` and add `vm.swappiness=1` to its own line in the file.2.  Save your changes.3.  Reboot the Linux machine.\n    ```", "```\n    crontab file while setting up the correct frequency, dates, and times. The following example runs the command on Sundays at midnight:\n\n    ```", "```\n\n    ```", "```\n    docker image pull docker-public.packages.atlassian.com/sox/atlassian/bitbucket-pipelines-runner:1\n    ```", "```\n    docker: Error response from daemon: docker: Error response from daemon: Conflict. The container name \"/runner-76b247e7-b925-5e7b-9da2-1cda14c4ff2c\" is already in use by container \"c3403236e3af5962ed3a9b8771561bd2021974941cc8a89a40c6c66cecb18f53\". You have to remove (or rename) that container to be able to reuse that name.\n    docker run command:*   The `-v` flag and the directory, as seen on the host machine.*   The `-e` flag and the desired mount point inside the runner. You can use any desired mount point, but it must match the value of the `WORKING_DIRECTORY` environment variable.An example of using the `docker run` command is shown in the following code snippet:\n\n    ```", "```\n\n    ```"]