["```\n    pip install python-dotenv\n    ```", "```\n    API_KEY = <insert_key_here>\n    API_SECRET_KEY = <insert_secret_key_here>\n    ```", "```\n    from dotenv import load_dotenv\n    import os\n    #load .env file\n    load_dotenv()\n    #load API keys into variables\n    api_key = os.getenv(\"API_KEY\")\n    api_secret_key = os.getenv(\"API_SECRET_KEY\")\n    ```", "```\n    export API_KEY = <insert_key_here>\n    API_KEY and API_SECRET_KEY in your OS.\n    ```", "```\n    import os\n    # Get the API key and secret access key from the environment\n    api_key = os.environ.get(\"API_KEY\")\n    api_secret_key = os.environ.get(\"API_SECRET_KEY\")\n    ```", "```\n#initial textimport retext = \"The first number is 901-895-7906\\. The second number is: 081-548-3262\"#pattern for searchsearch_pattern = r'\\d{3}-\\d{3}-\\d{4}'#replacement for patternreplacement_text = \"<phone_number>\"#text replacementnew_text = re.sub(search_pattern, replacement_text, text)#output given: \"The first number is <phone_number>. The second number is: <phone_number>\"print(new_text)\n```", "```\n    pip install google-cloud-binary-authorization google-cloud-container\n    ```", "```\n    from google.cloud import binaryauthorization_v1\n    def sample_create_attestor():\n        client = binaryauthorization_v1.BinauthzManagementServiceV1Client()\n        attestor = binaryauthorization_v1.Attestor()\n        attestor.name = <Enter_attestor_name>\n        request = binaryauthorization_v1.CreateAttestorRequest(\n            parent=<Enter_parent_value_of_attestor>,\n            attestor_id=<Enter_attestor_id>,\n            attestor=attestor,\n        )\n        client.create_attestor(request=request)\n    ```", "```\n    from google.cloud import container_v1\n    def sample_update_cluster():\n        client = container_v1.ClusterManagerClient()\n        request = container_v1.UpdateClusterRequest(\n    \"desired_node_pool_id\": <Node_pool_to_update>,\n    \"update\": {\n    \"desired_binary_authorization\": {\n    \"enabled\": True,\n    \"evaluation_mode\": 2\n    }\n    }\n        )\n        client.update_cluster(request=request)\n    ```", "```\n    import json\n    import boto3\n    client = boto3.client('ssm')\n    def lambda_handler(event, context):\n        instance_id = event[\"instanceids\"]\n        client.send_command(InstanceIds = [instance_id], DocumentName = \"AWS-RestartEC2Instance\")\n        return \"Command to restart has been sent.\"\n    ```"]