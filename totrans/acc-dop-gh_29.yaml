- en: '*Chapter 23*: Transform Your Enterprise'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this last chapter, we’ll talk about enterprise transformation. I’ll explain
    how you can put all the pieces explained in this book together to transform your
    enterprise into one with an engineering culture with increased developer velocity.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Why many transformations fail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting with WHY?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data-driven transformation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why many transformations fail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Software is at the heart of every product and service in every industry – from
    the customer experience to supply chain management (see [*Chapter 1*](B17827_01_Epub.xhtml#_idTextAnchor016),
    *Metrics That Matter*). This means a lot of enterprises must transform to become
    digital high-performance companies, but many of these transformations fail. Roles
    are renamed, management levels are restructured, and hosting is renamed to private
    cloud, but often the culture and performance do not change. There are many reasons
    why transformations fail and I want to give you some examples here.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming your company or industry is special
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many customers that I meet believe that they are completely special, but they
    are not. And, I’m sorry to say, it’s probable that neither is your company or
    industry. At least, not when it comes to digital transformation. Could your product
    kill people if it has a defect? So could cars, airplanes, trucks, medical devices,
    and so on. And the same is true for all of the parts that are produced for these
    products. They are nothing special. Must you comply with certain standards? Do
    you create military products? Are you publicly traded? Do you work for governments?
    Whatever you think makes your company special, chances are there are many companies
    that face the same challenges that you do and the same rules apply to them as
    to you when it comes to your DevOps transformation.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at the studies mentioned in [*Chapter 1*](B17827_01_Epub.xhtml#_idTextAnchor016),
    you’ll find that they apply to all companies: from small start-ups to big enterprises
    and from cutting-edge internet companies to highly regulated industries, such
    as finance, healthcare, and government (*Forsgren N., Humble, J., & Kim, G., 2018*,
    p. 22).'
  prefs: []
  type: TYPE_NORMAL
- en: But this is actually a good thing. This means a lot of the problems you’re probably
    facing during your own transformation have already been solved by others. You
    can learn from their failures and don’t have to experience them yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Having no sense of urgency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The biggest blocker to change is complacency. If people in your business are
    complacent, they will tend to resist change and keep on doing *business as usual*.
  prefs: []
  type: TYPE_NORMAL
- en: You must establish a true sense of urgency for people to address critical things
    now. Urgency in this case does not mean pressure from management that creates
    anxiety. True urgency should drive people to change with a deep determination
    to win – not with anxiety about losing (*John P. Kotter 2008*).
  prefs: []
  type: TYPE_NORMAL
- en: Without a sense of true urgency, people will resist change and are more likely
    to keep up their old behaviors. Note that a sense of urgency might arise for completely
    different reasons at distinct levels of your organization. Management might feel
    pressure from the market and the lack of agility to react with frequent releases.
    Engineers might feel the pressure of technical debt and the problem of attracting
    and retaining talent because of old processes and tools. It is important to align
    these stories to a common root course using a clear vision. Only if you manage
    to align the different senses of urgency into a single force that drives in the
    same direction can you ensure that the different forces will not neutralize themselves
  prefs: []
  type: TYPE_NORMAL
- en: Having no clear vision
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is easy to replace tools, processes, and roles, but it is hard to change
    behavior, culture, and stories. Without a clear vision, the transformation will
    not yield the desired results.
  prefs: []
  type: TYPE_NORMAL
- en: If I hear customers saying *we are not Microsoft or Google* or *we are not a
    cutting-edge internet company*, it tells me that they are missing a clear vision.
    If your vision clearly states that you want to become the digital leader in your
    industry or change from a product company to a service company, people will not
    dare to say things that contradict it.
  prefs: []
  type: TYPE_NORMAL
- en: A good vision to drive change is a clear and compelling statement of where all
    your transformation leads (*John P. Kotter 2012*).
  prefs: []
  type: TYPE_NORMAL
- en: I believe it is worth noting that DevOps transformations are not always driven
    by upper management. I know many companies where the DevOps transformation is
    driven by individual departments or even teams. Nevertheless, the same rules apply
    – you need a clear vision for the teams in your team or department and to establish
    a sense of urgency to ensure that the transformation is successful.
  prefs: []
  type: TYPE_NORMAL
- en: Letting obstacles block your progress
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you start a transformation, many obstacles will block your transformation.
    Good examples that I often experience are certain regulations in certain industries.
    Many regulations, such as ISO26262 or GxP, propose the **V-Model** for software
    engineering. The V-Model is based upon the **waterfall model**, so it contradicts
    basically everything we have learned in many years of DevOps research. If you
    insist on keeping the waterfall model, your DevOps transformation will most likely
    fail, but this is due to your internal interpretations of the regulations. If
    you have a closer look at them, you’ll realize that they just insist on best practices.
    If your practices are superior to the recommended ones, you can justify that and
    still pass an audit.
  prefs: []
  type: TYPE_NORMAL
- en: Most obstacles you’ll encounter are caused by your organization, for example,
    your organizational structure, tight job categories, processes, or trench warfare
    between the working council and management. Don’t permit these obstacles to block
    your transformation.
  prefs: []
  type: TYPE_NORMAL
- en: Not getting help
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Consultants have a bad reputation in many companies, mostly because of bad experiences.
    I helped a customer once with digitalizing their product. The customer was used
    to doing everything in line with the waterfall method and I introduced Scrum and
    CI/CD to them. We did some training and used agile development successfully over
    the next couple of years. After two years, management paid an expensive consultant
    firm to introduce Scrum. They basically had the same slides and told the same
    story that I had told everyone two years earlier. This kind of consultancy leads
    to a bad reputation.
  prefs: []
  type: TYPE_NORMAL
- en: But if you want to learn a new sport, you don’t just buy the equipment and watch
    some videos on YouTube. You join a club or find yourself a coach that will guide
    you. Sports are not just about knowledge and tools – they are about building skills.
    And without an experienced coach, it is hard or impossible to succeed in certain
    sports.
  prefs: []
  type: TYPE_NORMAL
- en: The same is true for building new skills and capabilities in your business.
    There is no shame in getting help from someone more experienced that can guide
    you through the change. The odds are high that help will be cheap based on what
    you save in time and effort, never mind the costs of failure.
  prefs: []
  type: TYPE_NORMAL
- en: Starting with WHY?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For a transformation to succeed, you need a clear vision and a sense of urgency.
    The vision should be precise, compelling, short, and should inspire people to
    follow it. To communicate the vision, you can follow the *Golden Circle* (*Simon
    Sinek 2011, p.38*) and communicate from the inside to the outside (see *Figure
    23.1*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 23.1 – Communicating a vision should start with WHY?'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_23_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 23.1 – Communicating a vision should start with WHY?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us see in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**WHY?**: The reason why your company will undertake the transformation. This
    gives it a purpose and establishes a sense of urgency. Why should anyone care?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HOW?**: How are you going to succeed in the transformation process?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WHAT?**: The actual thing that you want to transform. What are you doing
    or making?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A purpose-driven mission
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Don’t underestimate the power of vision! If you are a manufacturer of combustion
    engine cars, transformation to electrical cars will not come easy. There will
    be resistance. People will be afraid to lose the power of their jobs.
  prefs: []
  type: TYPE_NORMAL
- en: 'To succeed, you need a clear vision and to communicate the *WHY*? – like the
    Volkswagen Group in its *goTOzero* mission statement in 2019, which concentrated
    on four main fields of action: climate change, resources, air quality, and environmental
    compliance.'
  prefs: []
  type: TYPE_NORMAL
- en: By 2050, the entire **Volkswagen Group** wants to become balance sheet CO2-neutral.
    By 2025, the company plans to reduce the carbon footprint of its fleet by 30 percent
    over its entire life cycle compared to 2015 (*Volkswagen 2019*).
  prefs: []
  type: TYPE_NORMAL
- en: This perfectly explains the WHY?, establishes urgency, and fits into their overall
    updated vision *to make this world a mobile, sustainable place with access to
    all the citizens*.
  prefs: []
  type: TYPE_NORMAL
- en: Equally, **Mercedes-Benz** stated in their *Ambition 2039* statement from 2019
    that they aim to have a carbon-neutral car fleet and production over the next
    20 years (*Mercedes-Benz Group Media 2019*).
  prefs: []
  type: TYPE_NORMAL
- en: And it is the same when you transform a product company into a software or services
    company. Even if you only transform from a waterfall organization to a DevOps
    organization, people will be afraid of the change and there will be resistance
    if you cannot paint a picture of a desirable future and explain *why* you have
    to undertake the transformation.
  prefs: []
  type: TYPE_NORMAL
- en: Establishing an engineering culture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Having a purpose-driven vision will help you to establish an **engineering
    culture** during your transformation: an inclusive and secure organizational culture
    that fosters talent and is driven by sharing and equality (*de Vries, M., & van
    Osnabrugge, R. 2022*).'
  prefs: []
  type: TYPE_NORMAL
- en: This is a culture where people feel safe to speak up when they feel something
    is wrong, a culture where people feel safe to experiment and be creative without
    fear, and a culture where everyone feels welcome and safe – independent of heritage,
    gender, or religion.
  prefs: []
  type: TYPE_NORMAL
- en: The culture of an organization is a set of shared assumptions that guides behaviors
    within the organization (*Ravasi, D., & Schultz, M. 2006*). That’s why it is hard
    to change it. Creating PowerPoint slides with values and mission statements might
    affect the culture but maybe not in the way management intends to do so.
  prefs: []
  type: TYPE_NORMAL
- en: As an engineer, you might ask yourself why the organization’s culture matters
    to you. Isn’t that a task for management? However, the culture is the result of
    the assumptions and the behaviors of every single person in the system – and that
    means that every single person can change it. As an engineer, you should be aware
    of your culture and you should speak up if you see that something is wrong. Start
    doing the right things and telling the right stories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Culture is best ingrained into corporate behavior using little quotes and principles
    that have a deeper meaning. They are easy to remember and encourage people to
    do the right things. Here are some examples you will often hear in companies with
    great engineering cultures:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Ask forgiveness, not permission*: Encourage people to do the right thing,
    even if it is against current rules or processes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*You build it, you run it*: Establish end-to-end responsibility and ownership
    for the things built.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Fail early, fail fast, fail often (or fail fast, roll forward)*: Try to fail
    early and fast instead of making everything 100% bullet-proof.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Embrace failure*: Encourage people to experiment and take risks and ensure
    blameless learnings from failure. *Take responsibility and don’t blame others*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Collaborate, don’t compete* or *work together not against*: Foster collaboration
    – across organizational boundaries and also with customers and partners.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Go fix*: Encourage people to take ownership and fix things instead of just
    complaining, but you have to ensure that innovation is not suppressed. Make sure
    people are also empowered to really fix the things they complain about.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Treat servers like cattle, not like pets*: Encourage people to *automate everything*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*If it hurts, do it more often*: Motivate people to practice things that are
    hard to build up the skills to accomplish. This phrase is often used in relation
    to releasing or testing applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are just a few examples. More stories and sayings will arise when you
    transform your culture and establish DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: A great engineering culture is not just the responsibility of management. They
    have to let it happen and provide the vision but the best culture is then created
    by the engineers themselves during the transformation.
  prefs: []
  type: TYPE_NORMAL
- en: Data-driven transformation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want your transformation to succeed, it is critical to measure the right
    metrics and to prove that the transformation really yields better results than
    the old system. That’s why, in [*Chapter 1*](B17827_01_Epub.xhtml#_idTextAnchor016),
    *Metrics That Matter*, I introduced the data points you can collect to know what
    to optimize first and to achieve small wins that will help you keep everyone motivated
    to continue with the DevOps transformation. Measuring the right data should always
    be the start. Optimizing something that is not a constraint is a waste of resources
    and can even have a negative impact. Let’s take adding caching to your application
    without proof that the operation was slowing down the system in the first place
    or of how much faster it can be when caching certain data, as an example. Caching
    introduces complexity and is a source of errors. So, maybe you did not optimize
    the system at all but made it worse by working based on assumptions. The same
    is true for your DevOps practices.
  prefs: []
  type: TYPE_NORMAL
- en: The Theory of Constraints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Theory of Constraints** (**TOC**) is based on systems theory and assumes
    that the throughput of a system would be infinite if it weren’t for limiting constraints.
    The TOC tries to maximize the throughput for a system with its current constraints
    or to optimize the system by reducing these constraints.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical example to explain the theory is a freeway (*Small World 2016*).
    Let’s assume we have a freeway with five lanes but with two construction sites
    that limit the capacity of two lanes (see *Figure 23.2*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 23.2 – A freeway with fewer cars, limited by its constraints'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_23_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 23.2 – A freeway with fewer cars, limited by its constraints
  prefs: []
  type: TYPE_NORMAL
- en: 'The traffic flows through the constraints but this only works up to a certain
    throughput. If there are too many cars, they will start interacting and slowing
    each other down, resulting in a traffic jam (see *Figure 23.3*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 23.3 – If the throughput is too high, it grinds the traffic to a halt'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_23_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 23.3 – If the throughput is too high, it grinds the traffic to a halt
  prefs: []
  type: TYPE_NORMAL
- en: 'To optimize the traffic for a maximal flow, you have to limit the traffic to
    the capacity of the biggest constraint (see *Figure 23.4*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 23.4 – The maximum flow equals the capacity of the constraint'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_23_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 23.4 – The maximum flow equals the capacity of the constraint
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing anything else other than the biggest constraint will not result in
    any improvement. Many cities have tried to add lanes before and after a tunnel
    with basically no improvement of the flow or any reduction of traffic jams. The
    same is true for your value streams – optimizing anything but the biggest constraint
    will not result in any improvement.
  prefs: []
  type: TYPE_NORMAL
- en: Eliminating bottlenecks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The TOC provides five focus steps for eliminating constraints (see *Figure
    23.5*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 23.5 – The five focus steps for identifying and eliminating constraints'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_23_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 23.5 – The five focus steps for identifying and eliminating constraints
  prefs: []
  type: TYPE_NORMAL
- en: 'More details of the five steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Identify**: Identify the constraint that limits your current throughput'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exploit**: Make improvements to the throughput of the constraint'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Synchronize**: Review and subordinate the other activities in the system
    and make sure they are aligned and support the constraint in an optimal way'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elevate**: Try to eliminate the constraint and work on the root cause of
    the problem'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repeat**: Continuously improve the system by identifying the next constraint
    that is limiting your current throughput'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Systematically eliminating bottlenecks in your flow of work is the key to a
    successful DevOps transformation!
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is a journey of continuous improvement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'DevOps is a journey of continuously pushing the boundaries of software delivery
    performance further by eliminating bottlenecks. In the kickoff to their own DevOps
    transformation, Microsoft showed some videos of some pit stops from different
    areas: from Indianapolis in 1950 with 67 seconds to Melbourne in 2013 with about
    2.96 seconds. It is a great metaphor for DevOps, continuously improving performance
    with automation and optimized processes.'
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is the union of people, process, and products to enable continuous delivery
    of value to our end users (*Donovan Brown 2015*).
  prefs: []
  type: TYPE_NORMAL
- en: It is an engineering culture of research, development, collaboration, learning,
    and ownership, and it only works if you enact all aspects together. You cannot
    just pick one aspect of DevOps and implement it without the others.
  prefs: []
  type: TYPE_NORMAL
- en: You can only improve a system that is about flow if you know the biggest bottleneck
    and work on that. Trying to optimize other things will not yield any results and
    is a waste of time and resources. That’s why it is so important to perform a data-driven
    transformation and measure the right metrics to continuously monitor whether your
    improvements really yield the expected results. Identify one bottleneck, exploit
    it, improve it, and repeat.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing for value stream-aligned teams
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I have not talked about any **DevOps team topologies** (*Matthew Skelton 2013*)
    in this book. I see them used often in more IT-driven transformations and it is
    commonplace to start your transformation journey aligning to one of the topologies
    and then switching to another model later after achieving a higher DevOps maturity
    (*Martyn Coupland 2022*, *p27*). Instead, I focused on **value stream-aligned**
    teams (see [*Chapter 17*](B17827_17_Epub.xhtml#_idTextAnchor342), *Empower Your
    Teams*).
  prefs: []
  type: TYPE_NORMAL
- en: Your DevOps journey should start with them and optimize everything to enable
    them to deliver value. This will automatically lead to **developer-first thinking**
    (developers being the engineers delivering the value here). If you practice a
    data-driven transformation and optimize for value by eliminating bottlenecks,
    topologies such as platform teams or enabling teams will arise. There is no need
    to plan this upfront. A DevOps organization should be a self-improving system,
    so once you get to that point, the rest will fall into place nicely.
  prefs: []
  type: TYPE_NORMAL
- en: 'A successful data-driven DevOps transformation has three major phases (as visualized
    in *Figure 23.6*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 23.6 – The phases of data-driven DevOps transformation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_23_006_new.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 23.6 – The phases of data-driven DevOps transformation
  prefs: []
  type: TYPE_NORMAL
- en: 'More details of the phases are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Metrics**: Start by defining metrics and gathering data (see *Chapter 1*,
    *Metrics That Matter*).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tooling decisions**: You will have to make some basic tooling decisions.
    In this book, I assume **GitHub** is the DevOps platform, but there will be more
    decisions to make regarding cloud usage and alignment to current governance processes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**People, process, and culture**: Carefully pick your pilot teams and bring
    them to the new platform by transforming their way of working to **lean management**
    and **higher collaboration**. Teach and enable them to adopt **engineering DevOps
    practices** such as automation and trunk-based development and enable them to
    **release** frequently **with confidence**. The metrics should improve rapidly.
    These are the quick wins you need to keep everyone motivated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scale and optimize**: With the pilot teams successful, you can start to scale
    by creating more teams that work on the new platform with the new processes and
    tools. This is also the time when you start optimizing more capabilities, such
    as **software architecture** and **lean product management** techniques. Take
    one bottleneck at a time, always observing whether the metrics confirm the desired
    results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since DevOps is a journey and not a goal, this phase basically never ends. You
    may adjust the metrics after some time, you will optimize team size and autonomy,
    but the optimization does not end. The results just get smaller and smaller as
    you are already on a higher level.
  prefs: []
  type: TYPE_NORMAL
- en: '**DevOps vision**: The heart of the transformation throughout all phases is
    a strong vision that explains the *WHY*? and establishes a sense of urgency. Ensure
    that you have a good communication and change management strategy in place. There
    is resistance to any change and you have to address fear and communicate the *WHY*?,
    *HOW*?, and *WHAT*? of the process and the many success stories you gather along
    the way to motivate everyone to move forward.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To remain competitive, companies cannot just solve a customer’s problem. They
    need to deliver products and services that delight their customers and they must
    be able to engage with the market and respond fast to changing demands. This makes
    every company today a software company. If your company will not be able to transform,
    it will probably be out of business in a few years.
  prefs: []
  type: TYPE_NORMAL
- en: Many transformations fail but many are successful and these companies prove
    that even big enterprises or companies in highly regulated environments are able
    to transform and adopt DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: With GitHub, you have one of the best products on the market, which is loved
    by more than 73 million developers worldwide, by all big open source communities,
    and by more than 84% of the Fortune 500 companies. This means less training, quicker
    onboarding, and high developer satisfaction, which leads to better talent attraction
    and retention. But the open source communities also provide you with building
    blocks for your applications, for tooling, for your pipeline, and they will also
    power the templates for your process templates. Leveraging the power of the community
    will help you to accelerate and GitHub gives you the opportunity to pay the community
    back by contributing yourself or by sponsoring the projects that you rely on.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this book helps as a practical guide to a successful DevOps transformation
    using the power of GitHub. There is nothing more rewarding for me than seeing
    engineers having fun working on solving real engineering problems in a DevOps
    culture, instead of fighting bugs in production or estimating requirements they
    think are stupid.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are the references from this chapter that you can also use to get more
    information on the relevant topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Simon Sinek (2011), *Start With Why – How Great Leaders Inspire Everyone to
    Take Action*, Penguin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simon Sinek (2019), *The Infinite Game*, Penguin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nadella, S., Shaw, G. & Nichols, J. T. (2017), *Hit Refresh: The Quest to Rediscover
    Microsoft’s Soul and Imagine a Better Future for Everyone*, Harper Business'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Srivastava S., Trehan K., Wagle D. & Wang J. (April 2020). *Developer Velocity:
    How software excellence fuels business performance*. [https://www.mckinsey.com/industries/technology-media-and-telecommunications/our-insights/developer-velocity-how-software-excellence-fuels-business-performance](https://www.mckinsey.com/industries/technology-media-and-telecommunications/our-insights/developer-velocity-how-software-excellence-fuels-business-performance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: 'Forsgren N., Humble, J., & Kim, G. (2018). *Accelerate: The Science of Lean
    Software and DevOps: Building and Scaling High Performing Technology Organizations*
    (1st ed.) [E-book]. IT Revolution Press.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: John P. Kotter (2008), *A Sense of Urgency*, Harvard Business Review Press
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: John P. Kotter (2012), *Leading Change*, Harvard Business Review Press
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Volkswagen (2019): *Volkswagen with New Corporate Mission Statement Environment
    “goTOzero”*: https://www.volkswagenag.com/en/news/2019/07/goTOzero.html'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mercedes-Benz Group Media (2019): *“Ambition2039”: Our path to sustainable
    mobility*: [https://group-media.mercedes-benz.com/marsMediaSite/ko/en/43348842](https://group-media.mercedes-benz.com/marsMediaSite/ko/en/43348842'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '*Theory of constraints*: [https://www.leanproduction.com/theory-of-constraints](https://www.leanproduction.com/theory-of-constraints'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: 'Small World (2016): *Theory of constraints – Drum-Buffer-Rope*: [https://www.smallworldsocial.com/theory-of-constraints-104-balance-flow-not-capacity/](https://www.smallworldsocial.com/theory-of-constraints-104-balance-flow-not-capacity/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: 'de Vries, M., & van Osnabrugge, R. (2022): *Together we build an Engineering
    Culture*. XPRT Magazine #12: https://xpirit.com/together-we-build-an-engineering-culture/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ravasi, D., & Schultz, M. (2006). *Responding to organizational identity threats:
    Exploring the role of organizational culture*. Academy of Management Journal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Donovan Brown (2015): *What is DevOps*? [https://www.donovanbrown.com/post/what-is-devops](https://www.donovanbrown.com/post/what-is-devops'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: 'Matthew Skelton (2013): *What Team Structure is Right for DevOps to Flourish*?
    [https://web.devopstopologies.com/](https://web.devopstopologies.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Martyn Coupland (2022): *DevOps Adoption Strategies: Principles, Processes,
    Tools, and Trends*, Packt'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
