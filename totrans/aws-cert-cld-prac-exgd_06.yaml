- en: '[*Chapter 4*](B17124_04_Final_SK_ePub.xhtml#_idTextAnchor068): Identity and
    Access Management'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you have learned about the basics of cloud computing and its advantages.
    You have also been introduced to AWS and had a quick overview of its services.
    We have discussed the AWS Global Infrastructure and its support plans for customers
    looking to use the services offered. We have also emphasized the importance of
    AWS accounts and how they help you gain isolated and secure access to the wide
    range of AWS services within which you can build your cloud solutions. We also
    identified the architectural reasons behind having multiple AWS accounts and using
    AWS Organizations to centrally manage all your accounts.
  prefs: []
  type: TYPE_NORMAL
- en: You have also learned how to set up your first AWS Free Tier account, which
    will enable you to start configuring resources on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at the AWS **Identity and Access Management**
    (**IAM**) service. This is a critical foundational service designed to secure
    access to your AWS account. AWS IAM is an authentication and authorization service
    that enables you to decide who or what can access the AWS services in your account
    (known as **authentication**), and what these entities are permitted to do in
    your account (known as **authorization**).
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the AWS IAM service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The root user account and implementing **Multi-Factor Authentication** (**MFA**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The importance of defining IAM password policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key differences between IAM users and IAM groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining permissions with IAM policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing credential reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 4.1 – creating an IAM group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 4.2 – creating an IAM user and attaching it to the developers group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 4.3 – logging in to your AWS account as an IAM user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing AWS via the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 4.4 – accessing the AWS platform using the AWS CLI on a Windows computer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to the AWS IAM service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, you should have a single AWS Free Tier account that you can log
    in to using your chosen email address and password combination. This email address
    that you have used to create the account is also known as the **root user**. The
    root user is the person who created the account and holds the keys to the kingdom.
    This privileged user must be guarded well, and knowledge of its credentials (passwords
    and so on) should not be given to anyone who is not authorized to use it. The
    root user should also not be used for day-to-day operations. You can create additional
    user accounts (what we call IAM users) to perform daily tasks. We'll look at IAM
    users shortly in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The AWS IAM console
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To access any AWS service, including the IAM service, you can either use the
    web-based management console, the **command-line interface** (**CLI**), or AWS
    SDKs if you are writing code. We will start with the AWS Management Console. Log
    in to your AWS account using your root user credentials and you will be presented
    with the following splash screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – AWS Management Console'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_04_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – AWS Management Console
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the screenshot, the wide range of services is displayed
    under category headings, depending on the type of service. So, for example, we
    have categories such as **Compute**, **Network**, and **Storage** and under these
    categories, relevant services are listed.
  prefs: []
  type: TYPE_NORMAL
- en: AWS IAM falls under the **Security, Identity, & Compliance** category, but you
    can also search for the service using the search bar at the top of the page.
  prefs: []
  type: TYPE_NORMAL
- en: The AWS IAM services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first time you navigate to the IAM console, you will note some security
    alerts and a list of best practices to follow.
  prefs: []
  type: TYPE_NORMAL
- en: You will also note a *sign-in URL* for IAM users in this account. This is a
    special URL that your IAM users can browse to access your account. This URL is
    customizable and you can replace the series of digits shown after the `https://`
    portion with a custom name that is easier to remember. The series of digits you
    see is, in fact, your AWS account ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply click the `PacktDevAccount`. Names chosen must be unique and you may
    need to associate a common name with your company name to create a name that is
    unique:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – IAM dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_04_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – IAM dashboard
  prefs: []
  type: TYPE_NORMAL
- en: Once you have customized your IAM sign-in URL, you can provide this link to
    other IAM users, who can use it to sign in to your account. This can only happen
    if your users have an IAM user account to sign in with. We discuss how to create
    IAM users later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we look at the root user account and discuss the implementation
    of an additional security measure, using **Multi-Factor Authentication** (**MFA**).
  prefs: []
  type: TYPE_NORMAL
- en: The root user account and implementing Multi-Factor Authentication (MFA)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the first things you want to do is configure MFA for your root user account.
    Normally, when you log in to an AWS account, you simply provide a username and
    password. You are probably aware that you must choose a highly complex password
    – one that has lowercase letters, uppercase letters, numbers, and symbols, and
    must be randomly generated rather than dictionary words that can be guessed easily.
  prefs: []
  type: TYPE_NORMAL
- en: However, a username and password combination alone is not sufficient in this
    age of malware attacks, hacking, and brute force attacks. MFA is a mechanism where
    you are prompted to verify your identity using more than one set of credentials.
    Instead of just having two passwords, however, MFA uses two separate secrets to
    verify your identity – *something you know* and *something you have*. So, for
    example, something you know would be your username and password, and something
    you have would be a one-time password pin that is generated on a device that you
    possess. An example of such a device could be an RSA token, a **Universal Second
    Factor** (**U2F**) device, or an authentication app that you can install and use
    on your smartphone.
  prefs: []
  type: TYPE_NORMAL
- en: We strongly recommend that you set up MFA for your root user account.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up MFA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's quickly set up MFA for our root user account. To complete the step-by
    step guide, you will need access to a smartphone, either an Android or iOS device.
    There are several smartphone-based authenticators that are supported by AWS, including
    Google Authenticator and Microsoft Authenticator. You can review the supported
    apps at [https://aws.amazon.com/iam/features/mfa/](https://aws.amazon.com/iam/features/mfa/).
    For this exercise, go ahead and install the **Google Authenticator app** on your
    phone, which is available free of charge from your Google or iPhone play store.
    If you do not currently have the app installed, make sure you do this first before
    proceeding.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that you have navigated to the IAM management console, then take the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: On the IAM console, click on **Enable MFA**, under **Security alerts**:![Figure
    4.3 – Security alerts
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_04_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.3 – Security alerts
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You are then presented with the **Security Credentials** page. Click on **Activate
    MFA.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A pop-up dialog box is presented, and you need to select **Virtual MFA device**:![Figure
    4.4 – Setting up a virtual MFA device
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_04_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.4 – Setting up a virtual MFA device
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are then presented with the **Set up virtual MFA device** dialog box. You
    will have the option to scan a QR code to link your Google Authenticator app on
    your mobile phone with your AWS account. To get started, launch the Google Authenticator
    app on your phone and select the **Scan a QR code** option (you may have to tap
    the plus sign (**+**) first). This will activate your phone camera.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the AWS console, in the **Set up virtual MFA device** dialog box, click **Show
    QR code** under list item number **2**:![Figure 4.5 – Setting up a virtual MFA
    device
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_04_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.5 – Setting up a virtual MFA device
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The QR code will be displayed. At this point, you need to position your phone
    camera so that it captures the QR code while in the Google Authenticator app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the QR code is captured, you will be presented with an MFA code, which
    lasts for a few seconds. You will then need to type in the code in the textbox
    next to **MFA code 1**. Wait for the next code to be displayed and type that code
    into the textbox next to **MFA code 2**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click **Assign MFA**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your root user has now been configured with MFA authentication. The next time
    you log out and then log back in, you will be prompted to enter the MFA code shown
    on your Google Authenticator app after you provide your root user's email address
    and password. Remember that the MFA one-time pin expires after a few seconds,
    so you need to promptly provide the code shown in your app or wait for the next
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Once you provide the MFA pin, you will then be logged in and redirected to the
    AWS Management Console.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we introduced you to the basic AWS Management Console, and
    AWS IAM. We also looked at how to configure MFA for your root user account.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss password policies, which will allow you
    to enforce strong and complex passwords for any IAM users that you create in your
    AWS account.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of defining IAM password policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have secured your root user account, you should start creating
    additional accounts for users in your organization. Remember that the root user
    is the most privileged account, and you should not use the root user account for
    daily operations. Each member of your organization that needs to access the AWS
    services in your AWS account must be provided with an IAM user account. Never
    share your root credentials with other team members, even with other administrators,
    as they should be using their own IAM accounts with the appropriate administrative
    permissions.
  prefs: []
  type: TYPE_NORMAL
- en: We discuss IAM users in the next section, but for now, it becomes obvious that
    an IAM user account will be configured with a password. And if you have a hundred
    different IAM user accounts, you want to enforce some sort of password policy
    so that those accounts do not have weak passwords that are easy to crack.
  prefs: []
  type: TYPE_NORMAL
- en: AWS password policies enable you to define rules to enforce password complexity.
    This means that users will be forced to configure a password that is in compliance
    with your complexity rules and this will ensure strong passwords across all IAM
    user accounts.
  prefs: []
  type: TYPE_NORMAL
- en: The password policies can be configured from the **Account Settings** section
    of the IAM dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we discuss the importance of creating additional IAM users
    and IAM groups. IAM users are additional identities that you can create in addition
    to your root user account. An IAM user can represent a physical person who needs
    access to your AWS account, such as a developer in your development team or a
    server administrator in your shared IT services team.
  prefs: []
  type: TYPE_NORMAL
- en: Key differences between IAM users and IAM groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we look at the importance of setting up additional identities
    that need to access your AWS account. We also look at best practices in managing
    what those identities can or cannot do in your AWS account, using IAM groups.
  prefs: []
  type: TYPE_NORMAL
- en: IAM users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As discussed in the preceding section, in addition to the **root user**, you
    can create additional users known as **IAM users**. IAM users can be used to represent
    physical people in your organization, such as members of your development team
    or server administrators. These users can then use their IAM user accounts to
    log in to your AWS account and perform tasks based on permissions you grant them.
  prefs: []
  type: TYPE_NORMAL
- en: IAM user accounts can also be used by applications and other services that need
    to authenticate themselves against a given AWS service. For example, if an application
    needs to update a backend Amazon RDS database, you want to make sure that the
    application is authorized to do so. The application can be assigned with an IAM
    user account that it can use to authenticate itself against the database and depending
    on the permissions you grant that IAM user account, the application will be able
    to modify the database as required. While this method of allowing an application
    to authenticate against AWS services is possible, it is not considered best practice
    for most use cases. This is partly since the credentials are usually stored in
    some configuration file in plain text. Furthermore, you would need to implement
    a process of regularly rotating the credentials to improve security somewhat and
    this can be a management overhead. AWS offers another type of identity specifically
    for this purpose known as IAM roles, which we discuss later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: As previously discussed, to access any AWS service, you can use the web-based
    management console, the CLI, or AWS SDKs. To access your AWS account using the
    AWS Management Console as an IAM user, you will create a username and password
    combination that will enable the user to authenticate against your AWS account.
    If you wish to access your AWS account using the CLI for programmatic access,
    you will need to configure a set of access keys. Access keys are similar to usernames
    and passwords and consist of an **access key ID** (such as a username) and a **secret
    access key** (such as a password). Access keys are for programmatic access, whereas
    the username and password combinations are used for web-based console access.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we introduced you to IAM users, which can be used to represent
    physical people such as your colleagues who may need access to your AWS account.
    IAM user accounts can also be set up for specific applications to authenticate
    themselves against your account. These are known as **service accounts**.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we talk about IAM groups, which allow you to manage a group
    of IAM users who may share a common job role.
  prefs: []
  type: TYPE_NORMAL
- en: IAM groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you create an IAM user for a particular colleague who needs access to your
    AWS account, you need to also configure a set of permissions for that user to
    ensure that they are permitted to perform tasks as required by their role in your
    organization. These permissions are assigned via IAM policies, which we will discuss
    shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Although you can create separate sets of IAM policies for each user in your
    account, an even better way of managing your users and the permissions you assign
    them is by combining those users who share a common job role into an AWS IAM group.
    By doing so, you can centrally manage the users assigned to that group by simply
    applying policies at the group level, which get filtered down to the users within
    the group.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you have a team of 10 developers, all of whom need the ability
    to create and manage Amazon S3 storage buckets, then instead of assigning the
    same permission to each user individually at the IAM user level, you can assign
    a single permission to the developers group. Your developers, who are then made
    members of the group, will inherit that permission to access Amazon S3.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at the importance of setting up IAM users and IAM
    groups. This allows you to ensure that you can grant varying levels of access
    to different identities in your organization and use IAM groups to manage those
    identities.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will take a look at IAM policies in detail. IAM policies
    enable us to define permissions for those additional identities and control what
    they are permitted to do in our AWS account.
  prefs: []
  type: TYPE_NORMAL
- en: Defining permissions with IAM policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IAM policies are objects attached to a given IAM identity, such as an IAM user,
    groups of IAM users, or an IAM role. These policies define what the identity can
    or cannot do within the AWS account and are written as **JSON documents**. In
    the following diagram, user **Bob** can access and read the content of an S3 bucket.
    The policy is attached to the group that **Bob** is a member of and therefore
    inherits the ability from the group.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a principal (IAM user or IAM role) tries to access an AWS service, AWS
    will evaluate the policy document attached to it and determine what action the
    principal can or cannot perform:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Policy document attached to the developers group, granting Bob
    read access to the Marketing Documents bucket'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_04_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – Policy document attached to the developers group, granting Bob
    read access to the Marketing Documents bucket
  prefs: []
  type: TYPE_NORMAL
- en: IAM policies enable you to follow the principle of least privileges, which means
    that identities can be configured to only have access to services and configuration
    options necessary to fulfill their roles, and nothing more. This greatly enhances
    the security of your AWS account and follows best practices.
  prefs: []
  type: TYPE_NORMAL
- en: 'AWS offers six types of policies that you can create:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Identity-based policies**: These are policies attached to your IAM identities
    that specify what those identities can or cannot do in your AWS account. IAM identities
    are your IAM users, groups of IAM users, or IAM roles within your AWS account.
    Note that you cannot attach an IAM identity policy to an identity in another AWS
    account. However, identities in other accounts can be configured to assume IAM
    roles in your AWS account, which can provide your external identities with access
    to certain services and resources in your account. We discuss IAM roles later
    in this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*`), which means that you can grant anonymous access to some of your resources.
    Understandably, you should be extremely careful when granting anonymous access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Permission boundaries**: You can define a policy as a permission boundary
    for an IAM entity (user or role), which defines the maximum set of permissions
    that can be granted by an identity-based policy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Organization Service Control Policies** (**SCPs**): As discussed in the last
    chapter, organization SCPs enable you to define the maximum permissions for account
    members of an organization. SCPs enable you to restrict what permissions you can
    define in an identity- or resource-based policy in the member account. However,
    they are by themselves not able to grant permissions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access Control Lists** (**ACLs**): These are permissions you use to manage
    access to certain resources such as Amazon S3 buckets and objects. You can use
    ACLs to grant basic read/write permissions to other AWS accounts; you cannot grant
    permissions to users in your account. They are used in certain cases where S3
    bucket policies cannot be used, such as S3 server access logging. They are like
    resource-based policies, but the permission sets that can be configured are limited
    in granularity. In addition, they do not use a JSON structure to construct the
    policy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Session policies**: These allow you to pass session policies when you access
    services programmatically (for example, the CLI) to assume a role or federate
    a user. Session policies allow you to limit permissions for a specific session.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, let's further study the types of identity-based policies in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Types of identity-based policies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As previously mentioned, identity-based policies are written in JSON format
    and these policies are attached to IAM identities, defining what those identities
    can or cannot do within your AWS account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Identity-based policies can be categorized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Managed AWS policies**: These are standard policies pre-configured with specific
    permissions that AWS provides. A *managed* policy is one that is created independent
    of any IAM identity and can be attached to one or many identities. You can use
    these typical policies for most of the permission sets you need to define, for
    example, granting *read-only* access to Amazon S3\. AWS managed policies cannot
    be edited by the customer and only AWS can update and manage them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customer-managed policies**: Customers can create their own managed policies
    and then attach them to any IAM identity as required. Creating your own managed
    policies allows you to generate more granular sets of permissions. In addition,
    IAM creates up to five versions of your managed policies whenever you update them
    and this allows you to revert to older versions if necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inline policies**: These policies are created and attached directly to the
    IAM identity, for example, an IAM user. This also allows you to maintain a strict
    one-to-one relationship between a given policy and an identity. However, too many
    inline policies can be more difficult to manage and must be used sparingly. Ultimately,
    inline policies are tied to the life cycle of the entity it is associated with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's understand IAM policies with the help of an example.
  prefs: []
  type: TYPE_NORMAL
- en: Example of an IAM policy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *Figure 4.6*, we saw an example of Bob, who is a member of the developers
    group, being able to access the Marketing Documents bucket because of the IAM
    policy attached to the group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of what a JSON policy document looks like for the preceding
    scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.7 – AWS managed policy: AmazonS3ReadOnlyAccess'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_04_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.7 – AWS managed policy: AmazonS3ReadOnlyAccess'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows a managed AWS policy that grants the identity
    it is attached to the ability to read contents from any S3 buckets in your AWS
    account.
  prefs: []
  type: TYPE_NORMAL
- en: Identity policies do not need to specify a principal within the policy, because
    by its very nature, it will be attached to the identity that requires the level
    of access specified in the policy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at some of the components of the policy document:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Version:` This is the JSON document version currently supported by AWS and
    should be listed as `2012-10-17`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Statement`: This is the beginning of the policy statement. You can have multiple
    statement blocks within a single policy, allowing you to grant various levels
    of access across different services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Effect`: This specifies whether the statement block is going to allow some
    level of access or deny access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Action`: This is the actual permission that is either permitted or denied
    based on the preceding `Effect` statement. The `Action` component of your JSON
    document will refer to the service of concern and the actual permission that is
    being granted. So, for example, in the preceding JSON statement, we have two sets
    of actions being permitted, namely the `Get` action and the `List` action of the
    Amazon S3 service. This means that the identity associated with this policy will
    be able to *list* your Amazon S3 buckets and perform various other list operations
    and be able to read the contents of the buckets along with other `Get` operations.
    These action statements actually have more granular-level operations that can
    be performed. So, for example, the `Get` operation includes a number of operations
    such as `GetObject` (which allows you to access an object) and `GetBucketVersion`
    (which returns the versioning state of a bucket) among others. You will notice
    the asterisks (`*`) after the `Get` and `List` actions in the preceding screenshot.
    You use the asterisks (`*`) when you want to allow all operations within a given
    `Action` statement. So, in the preceding example, `Get*` would include both the
    `GetObject` and `GetBucketVersion` operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Resource`: This component describes the actual resource against which this
    policy permits or denies access. A wildcard (`*`) denotes all resources of that
    service. So, in this case, the resources allow the `Get` action and the `List`
    action against all S3 buckets in your AWS account. To restrict access to a specific
    resource, you will need to specify the actual `arn:aws:s3:::packt-marketing-docs`.
    So, our JSON policy will then need to be amended to look like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Customer-managed policy restricting access to a single Amazon
    S3 bucket'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_04_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.8 – Customer-managed policy restricting access to a single Amazon S3
    bucket
  prefs: []
  type: TYPE_NORMAL
- en: 'ARNs are composed of segments and each segment is delimited with a colon (`:`).
    The following are the formats in which ARNs can be constructed with their individual
    segments:'
  prefs: []
  type: TYPE_NORMAL
- en: a) `arn:partition:service:region:account-id:resource-id`
  prefs: []
  type: TYPE_NORMAL
- en: b) `arn:partition:service:region:account-id:resource-type/resource-id`
  prefs: []
  type: TYPE_NORMAL
- en: c) `arn:partition:service:region:account-id:resource-type:resource-id`
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the individual segments:'
  prefs: []
  type: TYPE_NORMAL
- en: a) `aws`. A separate partition also exists for China and this is named `aws-cn`,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: b) `s3`.
  prefs: []
  type: TYPE_NORMAL
- en: c) `:`).
  prefs: []
  type: TYPE_NORMAL
- en: 'd) `:`). For example, here is a valid ARN for our marketing docs bucket:: `arn:aws:s3:::packt-marketing-docs`.'
  prefs: []
  type: TYPE_NORMAL
- en: e) `user/John` or `instance/i-1234567890xydcdeg0.`
  prefs: []
  type: TYPE_NORMAL
- en: '`Condition`: In addition to the preceding list of components defined in a policy
    document, you can also create conditional elements for your statement so that
    you can further restrict the application of the policy based on a predetermined
    condition. For example, you might want to restrict access only if the source of
    that access is from within your corporate network IP address space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we'll study the IAM policy simulator.
  prefs: []
  type: TYPE_NORMAL
- en: IAM policy simulator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you need to test out your policies or troubleshoot any access issues, you
    can use the IAM policy simulator. This tool, located at [https://policysim.aws.amazon.com/](https://policysim.aws.amazon.com/),
    can help you troubleshoot identity-based policies, IAM permissions boundaries,
    organizations' SCPs, and resource-based policies. Note that the simulator only
    simulates attempted access and whether that access will be granted or denied.
    It does not actually make calls to the service APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the screenshot shown next, you will note that we have currently selected
    the `CreateDBInstance` action, we got a `AllowS3FullAccess` policy attached. While
    this example is fairly simple, you can image an IAM user, group, or role having
    multiple complex policies attached to it and running the simulator can enable
    you to test out specific levels of access:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.9 – Amazon policy simulator'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_04_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.9 – Amazon policy simulator
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we examined how IAM policies can be used to grant access based
    on the principle of least privileges. We looked at the different types of policies
    and the different categories of IAM policies. We also examined the JSON structure
    of a typical IAM policy.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss IAM roles, which are another type of identity
    that can be used to grant access to services and resources in your AWS account.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning temporary credentials with IAM roles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While an IAM user account either represents a physical person or can be used
    as a "service account" for an application that requires authentication, IAM roles
    are, in fact, independent identities that can be assumed by other entities to
    gain access to AWS services and resources. In other words, IAM roles are not attached
    to a specific user. IAM roles also have IAM policy documents attached to them
    to determine what services and actions can be granted or denied.
  prefs: []
  type: TYPE_NORMAL
- en: 'IAM roles are generally used to grant access for the following use cases:'
  prefs: []
  type: TYPE_NORMAL
- en: An AWS service that needs access to another service in your own AWS account,
    for example, an application running on an EC2 instance that needs access to a
    database to update customer records.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An IAM user in another account that needs access to services in your account
    via cross-account access.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A federated user from another web **Identity Provider** (**Idp**) such as Google,
    Facebook, or Amazon that needs access to resources in your AWS account. IAM roles
    can be used to grant those external users with only the specific rights to specific
    services and resources in your account, without the need to create yet another
    IAM user account for them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A federated corporate user using an identity service such as Microsoft Active
    Directory, who needs access to a service in your AWS account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As mentioned in the preceding list, IAM roles can be used to grant access to
    federated users. Identity federation is a process where you trust an external
    Idp to verify a given user's identity and then grant the user access on that basis.
    After authenticating the user, the Idp sends an assertion, which contains the
    user's login name and any attributes that AWS needs to establish a session with
    the user. The policy attached to the IAM role is then used to determine the level
    of access that can be granted to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Identity federation thus allows you to grant external identities access to your
    AWS environment, whether via the Management Console or APIs. It also allows access
    to resources without the need to create an IAM user account for each external
    user.
  prefs: []
  type: TYPE_NORMAL
- en: Temporary credentials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A key benefit of using IAM roles is that they make use of temporary credentials
    that are rotated on a regular basis by AWS. For example, with IAM roles, you can
    grant a third-party mobile app access to resources in your AWS account without
    storing long-term credentials on the mobile phone of the user. This greatly enhances
    security and reduces management overhead. Imagine having to create an IAM user
    account for every individual that uses the app and then finding a secure method
    to distribute those IAM user credentials. IAM roles come to the rescue, because
    by themselves, they do not contain any credentials.
  prefs: []
  type: TYPE_NORMAL
- en: IAM roles make use of a service called **Security Token Service** (**STS**).
    The **STS** service assigns temporary credentials to the identity that assumes
    the role. These temporary credentials will include an **access key ID**, a **secret
    access key**, and a **security token**. This security token is valid for only
    a short term and becomes useless after expiration. The STS service will renew
    the temporary credentials before expiry for the identity if the identity is still
    permitted access, and this happens in the backend and is managed by AWS. Ultimately,
    temporary credentials grant users temporary access to resources in your AWS account
    and are much more secure than using long-term access credentials.
  prefs: []
  type: TYPE_NORMAL
- en: When you create an IAM role, you also define a **trust policy**. Within the
    trust policy, you specify the entities that will be trusted to assume the role.
    These entities can be AWS services or identities external to your organization
    that need access to your AWS resources. Furthermore, the entities themselves will
    need to have permissions to be able to assume that role.
  prefs: []
  type: TYPE_NORMAL
- en: Where possible, using IAM roles instead of creating an IAM user account is the
    recommended approach, primarily for entities external to your organization and
    because of the benefits of using temporary credentials. So, using the example
    of the mobile app that needs to update a database in your AWS account, it is safe
    to say that using an IAM role will ensure that long-term credentials are not stored
    locally on the phone. This also greatly reduces the chances of malicious attacks
    using stolen credentials.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at IAM roles, which allow you to grant secure access
    to your AWS services and resources using temporary security credentials.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll look at credential reports, which allow you to audit
    your IAM identities.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing credential reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS enables you to download a **comma-separated values** (**CSV**) file, updated
    every 4 hours, which allows you to audit your IAM user security state and review
    important information. The information could be a list of all your IAM users in
    your AWS account and the status of their credentials (such as if they have been
    configured with passwords and access keys). The report also highlights if your
    user accounts have been configured with MFA.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring your credentials report will also help you pick up on identities
    that may not have accessed resources in your AWS accounts recently. You can then
    work out whether those users still need access and delete unwanted users from
    your AWS accounts.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at credential reports, which allow you to generate
    details of your IAM users and their current access status. In the next sections,
    we provide a number of exercises to help you build hands-on experience of using
    the IAM service to secure access to your AWS accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4.1 – creating an IAM group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, you will create an IAM group for a development team that
    is going to require full access to Amazon S3:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your AWS account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **IAM** link under the **Security, Identity, & Compliance** category
    on your **AWS Services** home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the left-hand menu, click **Groups**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Create New Group** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will then be presented with a step-by-step wizard. Provide a group name
    for your new group. For this exercise, type in `Developers`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Next Step** button in the bottom right-hand corner of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You now need to attach a policy. You can create your own customer-managed policies
    but for the purposes of this exercise, type `S3` in the **Policy Type** filter
    search box. This will narrow down the available policies that relate to Amazon
    S3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tick the checkbox next to the **AmazonS3FullAccess** policy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Next Step** button in the bottom right-hand corner of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click the **Create Group** button in the bottom right-hand corner of
    the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now see that your group has been created and listed under **Group Name**.
    Now that you have created a group, you can proceed to create an IAM user and add
    it to the group. This allows you to manage multiple users more effectively. In
    the next exercise, we will create an IAM user and add it to the developers group.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4.2 – creating an IAM user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you have created a developers group, you can add your developers to
    this group. To illustrate this, we will create a new user, John. John is one of
    our senior developers at Packt and we would like to ensure that he is a member
    of the developers group, which will give him full access to Amazon S3:'
  prefs: []
  type: TYPE_NORMAL
- en: In the IAM dashboard, click on **Users** from the left-hand menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add user** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `john` (all lowercase).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you need to select the type of access you want to grant John. John is
    a developer and will require both console access and programmatic access. This
    means that sometimes, John will use the web-based console to configure resources
    in Amazon S3, and at other times, he may use the CLI. For this exercise, tick
    both boxes – **Programmatic Access** and **AWS Management Console access**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To access the AWS account via the console, you need to create a password for
    the user. For `john`, you can have AWS automatically generate a password for you
    or you can create a custom one yourself. Select **Custom password** and choose
    a complex password of your choice. Type that password in the textbox provided.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An additional setting, **Require password reset**, enables you to force your
    IAM users to change their password at the next login. That way, you will not know
    what their password is when they change it and it is best practice to follow.
    For the purposes of this lab, disable this checkbox for now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Next:Permissions** button in the bottom left-hand corner of the
    screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You now have the option to set permissions for the user. As we have already
    created a group with the right set of permissions attached to it, we simply need
    to make this user a member of the group. For this exercise, under **Add user to
    group**, tick the box next to the **Developers** group and click the **Next:Tags**
    button in the bottom right-hand corner of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tags are key-value pairs that you can attach to any resource. You can attach
    up to 50 tags to each resource and they enable you to classify your resources
    better. You can then use tags to understand cost allocation and to identify and
    manage your resources. Tags can include user information, such as an email address,
    or can be descriptive, such as a job title. For this exercise, set a single tag,
    with the key set to `Name` and the value set to `John`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Next:Review** button in the bottom right-hand corner of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now review all your settings for the user and once satisfied, go ahead
    and click the **Create user** button in the bottom right-hand corner of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are now presented with a `.csv` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will also note that you have been provided with a special link to log in
    to your AWS Free Tier account using an IAM user account. The AWS account sign-in
    page for IAM users is slightly different from that of the root user. This is because
    when you sign in as an IAM user, you need to specify the AWS account ID you are
    trying to sign into. In our example, we have a link like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The series of numbers just before `.signin` represents your AWS account ID.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Close** button in the bottom right-hand corner of the screen to
    exit from the user setup wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have now created a user who represents a developer in our organization and
    we have added the user to the developers group. In the next exercise, you will
    learn how to access your AWS account as the IAM user you created previously.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4.3 – logging in to your AWS account as an IAM user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we log out of the AWS account as the root user and re-login
    as the IAM user you just created. If you did not make a note of the special sign-in
    link, you will need to know what your AWS account ID is. You can easily discover
    this by clicking on your account name in the top right-hand corner of your web-based
    management console and noting the account ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.10 – Drop-down box when clicking on the account name to discover
    the account ID, which is shown after My Account'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_04_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.10 – Drop-down box when clicking on the account name to discover the
    account ID, which is shown after My Account
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have the account ID (or you can make a note of the sign-in URL
    previously discussed), we can proceed to log in as the IAM user you created earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign out of the AWS account (remember, you are currently signed in as the root
    user).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be taken to the AWS console home page where you can click the **Log
    back in** button or the **Sign in to the Console** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking on either of these will take you to the AWS sign-in page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **IAM user** and provide the account ID in the available textbox:![Figure
    4.11 – AWS signing page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_04_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.11 – AWS signing page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you have provided the account ID, click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, provide your username, in this case, `john`, and the password you chose
    when you created the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will now be logged in to the AWS Management Console as our developer, John.
    You will note that your username is displayed in the top right-hand corner of
    the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.12 – IAM user John has successfully logged in to this AWS account'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_04_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.12 – IAM user John has successfully logged in to this AWS account
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we completed a series of exercises using the AWS IAM service.
    We demonstrated how to create IAM groups and users and how to log in to the AWS
    Management Console as an IAM user.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we look at how you can access your AWS account using the
    AWS CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the AWS platform using the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As previously discussed, you can access the vast array of AWS services using
    the web-based management console or the CLI. The AWS CLI is a unified tool to
    manage your AWS services programmatically. The AWS CLI gives you access to the
    **application programming interface** (**API**) of each AWS service. This enables
    you to remotely access your AWS account and run commands from your Terminal application
    on Linux and Mac computers or use Command Prompt on Windows computers.
  prefs: []
  type: TYPE_NORMAL
- en: The AWS CLI is therefore ideal for running simple commands to complete repetitive
    tasks and because a single command string can contain necessary attributes of
    your request, you will find it a lot faster than using mouse clicks within the
    web console. The CLI is something you will need to get accustomed to—for one,
    you will need to know how to construct commands, but AWS offers complete reference
    documentation for this.
  prefs: []
  type: TYPE_NORMAL
- en: You can run your CLI commands line by line individually, or you can even create
    scripts to run a series of commands for a set of tasks. For example, you can create
    a script that launches a new EC2 instance, configures it as a web server, and
    installs any third-party applications.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing your account via the CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will walk you through the steps of configuring the CLI on
    your computer and accessing your AWS platform using John's account.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended that you avoid creating and using access keys for the
    root user account unless you have certain specific requirements. For example,
    to enable MFA-delete on Amazon S3 buckets (which we look at in [*Chapter 5*](B17124_05_Final_SK_ePub.xhtml#_idTextAnchor094),
    *Amazon Simple Storage Service (S3)*), you need to use the CLI, for which you
    will need a set of access keys. The problem is when you use the AWS CLI to access
    your AWS account, your credentials (access key ID and secret access keys) get
    stored locally on the computer that you are using. This means that you should
    consider rotating your keys on a regular basis and ensure you secure your computer,
    for example, by enabling local disk encryption. As a best practice, if you need
    to create a set of access keys for the root user account, you should follow a
    process of creating the keys, using them for the specific task, and then disabling
    or deleting the keys once the task is complete.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing your AWS account using the CLI from your local computer as the root
    user therefore means that the root user's credentials are also stored on the local
    machine. This is considered a major security risk because you really should not
    be using the root user account for day-to-day operations. Even if you need full
    administrative privileges, you should ideally create an IAM user and assign it
    with the necessary admin rights. You can then configure your AWS CLI with the
    IAM administrator user account credentials instead.
  prefs: []
  type: TYPE_NORMAL
- en: The root user is the ultimate owner of your account and can even close your
    account. This is the reason why extreme caution is advised in how you manage the
    root user's credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the CLI tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the AWS CLI, you first need to download and install it on your local
    computer. You can access the AWS CLI tools here: [https://aws.amazon.com/cli/](https://aws.amazon.com/cli/).'
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your operating system, you will need to download and install the
    appropriate tool. The AWS CLI tool is currently available in version 2 and comes
    with new and improved installers, new configuration options, such as AWS **Single
    Sign-On** (**SSO**), and various interactive features. You can download the installers
    for your specific operating system, whether it is Windows, Mac, or Linux. Previously,
    you had to have Python installed to use the AWS CLI, but this is no longer the
    case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download and install the appropriate installer for your operating system from
    the preceding link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.13 – Links to download the appropriate AWS CLI installer for your
    operating system'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_04_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.13 – Links to download the appropriate AWS CLI installer for your operating
    system
  prefs: []
  type: TYPE_NORMAL
- en: Once you have installed the AWS CLI, the next step is to configure it with a
    set of access keys to log in to your AWS account programmatically. If you are
    using Windows, you can access the AWS CLI from Command Prompt. If you are using
    Linux or Mac, you can use the Terminal application. The installer would have already
    set up any environmental variables, so you can access the tool from anywhere in
    your Command Prompt.
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, you will learn how to access the AWS platform using the
    Amazon CLI on a Windows computer.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4.4 – accessing the AWS platform using the AWS CLI on a Windows computer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have installed the AWS CLI tools on your Windows machine, the next
    step is to configure it to access your AWS account as the IAM user you created
    earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the credentials file, which you downloaded earlier when you created the
    IAM user `john`. This file has the access keys for your user, which comprises
    the **access key ID** and the **secret access key**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On your Windows desktop, click on the `CMD`:![Figure 4.14 – Command Prompt on
    a Windows computer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_04_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.14 – Command Prompt on a Windows computer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At the prompt, type in `AWS configure` to start the configuration process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will then be prompted to enter the **AWS access key ID**, followed by the
    **AWS secret access key**. These keys are in your credentials document that you
    downloaded earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For `us-east-1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Default output format**, leave this blank and press *Enter*:![Figure 4.15
    – Configuring the AWS CLI with access key ID and secret access keys
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_04_15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.15 – Configuring the AWS CLI with access key ID and secret access keys
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Your AWS CLI tool has now been configured with John's credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can try running a command such as `aws s3 ls`. This command lists out any
    Amazon S3 bucket you have in your account. If you have not created any buckets
    yet, you will just have the prompt return. In my case, I have already got one
    bucket in my account as you can see in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.16 – Configuring the AWS CLI with access key ID and secret access
    keys'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_04_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.16 – Configuring the AWS CLI with access key ID and secret access keys
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed the necessary steps required to configure your
    AWS CLI tool, so that you can access your AWS account as an IAM user using Command
    Prompt on a Windows machine. You can also use Terminal on a Mac or Linux computer
    to complete the same tasks. You would need to install the appropriate tool for
    your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Using the CLI can be very efficient, especially if you are trying to perform
    repeat tasks as you can also create scripts to automate the whole process.
  prefs: []
  type: TYPE_NORMAL
- en: You should try and avoid using the root account to perform any day-to-day operations
    in your AWS account. Instead, you must log in with an IAM user account that has
    only the necessary privileges to carry out the task at hand. This is known as
    following the principle of least privilege.
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, you will create another IAM user account that you will
    use for all the exercises in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4.5 – creating an IAM user with administrative privileges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, you will create another IAM user account that you will use
    to log in to your AWS account. This IAM user will be provided with full administrative
    access to help you work through the upcoming exercises easily, although in the
    real world, you would want to restrict permissions to only the job function of
    the users in question. By getting used to logging in as an IAM user, you will
    build a habit of avoiding the use of the root user credentials for your day-to-day
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that you are logged in to your AWS account as the root user (the email
    address and password combination you used to create your AWS account).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the IAM dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the left-hand menu, click on **Users**. Next, from the right-hand pane,
    click **Add user**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be redirected to the **Add user** wizard page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For the username, type in `Alice`. Throughout the rest of this guide, you will
    be logging in as `Alice` to carry out all upcoming exercises.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Select AWS access type**, select both **Programmatic access** and **AWS
    Management Console access**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Console password**, select the **Custom password** option and provide
    a complex password of your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Uncheck the box next to **Require password reset** and click the **Next: Permissions**
    button.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In step 2, under **Set permissions**, select the **Attach existing policies
    directly** option. This will allow you to attach an inline policy to Alice's account
    alone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the list of policies provided, select the checkbox next to **AdministratorAccess**
    as per the following screenshot:![Figure 4.17 – IAM user (Alice) with administrator
    access permissions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_04_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.17 – IAM user (Alice) with administrator access permissions
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the **Next: Tags** button at the bottom of the screen.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In step 3, under `Name` and the value is set to `Alice`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Next: Review** button.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click the **Create user** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will then be prompted to download the `.csv` file containing Alice's access
    keys and secret access keys. Download the file and ensure you keep it in a folder
    on your computer that you can easily access. Once downloaded, go ahead and click
    the **Close** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your IAM user Alice is now ready to log in. Going forward, you will need to
    log in as the IAM user Alice for all upcoming exercises. Ensure you also make
    a note of either the special sign-in link for your AWS account or the AWS account
    ID, which you will need to log in as an IAM user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this exercise, you created an IAM user account that you will use to log in
    to your AWS account and perform all the upcoming exercises. In the next section,
    we'll review a summary of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the AWS IAM service and how it acts as the gatekeeper
    to your AWS account. We discussed the root user of your account, which is the
    most senior administrative account for your AWS account. The root user has complete
    access and protecting this account with MFA is a recommended best practice.
  prefs: []
  type: TYPE_NORMAL
- en: With AWS IAM, you can create and manage identities that are granted or denied
    access to the various AWS services in your account. These identities can include
    IAM users, groups of IAM users, or IAM roles. You can also further enhance the
    security of your IAM users by configuring them with MFA.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed best practices when configuring your IAM users and IAM groups.
    We emphasized that, as best practice, you should create IAM groups and subsequently
    place any necessary IAM users within groups that share a common task. For example,
    if you have a developers group, you can place all your developers in that group.
    In addition, you can create IAM policies, which can be attached to your IAM identities
    to determine what they can or cannot do within your AWS account. AWS IAM thus
    offers authentication and authorization services to your account.
  prefs: []
  type: TYPE_NORMAL
- en: We also examined IAM roles, which allow you to create identities not specifically
    attached to any physical user. IAM roles enable you to grant access to those entities
    that may not necessarily have access. IAM roles can be used to grant temporary
    credentials to entities when they need them and, depending on the use case, are
    more secure than using IAM user accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we discussed credential reports, which allow you to audit your existing
    user base within your AWS account and audit usage patterns. Finally, we looked
    at how you can access your AWS account using the AWS CLI.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you have now learned the importance of creating IAM users, groups,
    and roles and have understood their application. You have learned that the root
    user account must not be used for day-to-day operations and you must set up MFA
    for your root user account as well as your IAM users. You have also gained knowledge
    on how IAM roles can be used to grant cross-account access and federated access
    and enable one AWS service to access another AWS service. You have also learned
    how IAM policies can be used to enforce the principle of least privileges, thereby
    improving the security of your AWS account.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we look at another core AWS service, called **Amazon Simple
    Storage Service** (**Amazon S3**). Amazon S3 is an object storage solution that
    allows you to store unlimited amounts of data in the cloud. Amazon S3 can be used
    for a wide range of use cases, including storage of digital assets for your web
    applications, such as documents, images, and video, as well as for archive storage.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are a few questions to test your knowledge:'
  prefs: []
  type: TYPE_NORMAL
- en: You wish to deploy a dev and test environment on AWS. You want to ensure that
    your developers can access your AWS account using a highly secure authentication
    process and follow best practices. Which of the following two configuration options
    will help ensure enhanced security? (Choose two answers)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure your IAM accounts with MFA.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure your IAM password policy with complexity rules.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure you encrypt your EBS volumes.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Create RDS databases with Multi-AZ.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the root account credential details to your developers.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Your developer is working from home this weekend and needs to access your AWS
    account using the CLI to configure your RDS database from their local computer.
    Which type of IAM credentials would they need to configure the AWS CLI tool on
    their machine?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IAM username and password
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Access key IDs and secret access keys
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Access keys and secret ID
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: HTTPS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which AWS service enables you to troubleshoot your IAM policies and identify
    the sets of permissions that may be denying access to a given AWS service?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IAM policy simulator
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CloudWatch
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CloudTrail
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: IAM policy manager
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following AWS services is a better option to securely grant your
    application running on an EC2 instance access to a backend database running on
    Amazon RDS?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Access keys
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: IAM role
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: IAM group
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Security group
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which format are IAM policy documents written in?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JSON
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: YAML
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: XML
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: JAVA
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What best practice strategy should you follow when assigning permissions to
    IAM users and groups?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the principle of least privilege.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the principle of most privilege.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the ITIL principles.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the GDPR principle.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which IAM service enables you to effectively manage users by creating a collection
    of them based on their job function and assigning them permissions according to
    their roles to the entire collective?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IAM groups
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: IAM policies
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: IAM collection
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: IAM roles
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which feature of IAM enables you to use your existing corporate Active Directory
    user credentials to log in to the AWS Management Console and therefore offer an
    SSO service?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identity federation
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: IAM user database
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Active Directory users and computers
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: MFA
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which AWS service enables you to generate and download a report that lists your
    IAM users and the state of their various credentials, including passwords, access
    keys, and MFA devices?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS policies
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Explorer
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Credentials report
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: User report
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which AWS service is responsible for assigning and managing temporary credentials
    to entities that assume an IAM role?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Password Manager
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Security Token Service
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Credentials Manager
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Credentials Report
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
