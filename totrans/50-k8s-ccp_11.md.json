["```\n\nsudo kubeadm init --skip-phases=addon/kube-proxy --control-plane-endpoint $publicIP --apiserver-advertise-address $ip_address --pod-network-cidr=$cidr --upload-certs\n```", "```\n\n    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\n    ```", "```\n\n    chmod 700 get_helm.sh\n    ```", "```\n\n    ./get_helm.sh\n    ```", "```\n\n    helm repo add cilium https://helm.cilium.io/\n    ```", "```\n\n    helm install cilium cilium/cilium \\\\\n    ```", "```\n\n    --namespace kube-system \\\\\n    ```", "```\n\n    --set kubeProxyReplacement=strict \\\\\n    ```", "```\n\n    --set k8sServiceHost=ip_address_of_control_plane \\\\\n    ```", "```\n\n    --set k8sServicePort=6443\n    ```", "```\n\n    kube get pods -n kube-system\n    ```", "```\n\n    kubeadm upgrade plan\n    ```", "```\n\n    apt-mark unhold kubeadm && apt-get update && apt-get install -y kubeadm=1.25.x-00 && apt-mark hold kubeadm\n    ```", "```\n\n    kubeadm upgrade apply v1.25.x\n    ```", "```\n\n    apt-mark unhold kubeadm && apt-get update && apt-get install -y kubeadm=1.25.x-00 && apt-mark hold kubeadm\n    ```", "```\n\n    sudo kubeadm upgrade node\n    ```", "```\n\n    apt-mark unhold kubelet kubectl && apt-get update && apt-get install -y kubelet=1.25.x-00 kubectl=1.25.x-00 && apt-mark hold kubelet kubectl\n    ```", "```\n\n    sudo systemctl daemon-reload\n    ```", "```\n\n    sudo systemctl restart kubelet\n    ```", "```\n\n    kubectl get nodes\n    ```", "```\n\n    apiVersion: audit.k8s.io/v1\n    ```", "```\n\n    kind: Policy\n    ```", "```\n\n    rules:\n    ```", "```\n\n    - level: Metadata\n    ```", "```\n\n    - --audit-log-maxage=7\n    ```", "```\n\n    - --audit-log-maxbackup=2\n    ```", "```\n\n    - --audit-log-maxsize=50\n    ```", "```\n\n    - --audit-log-path=/var/log/audit.log\n    ```", "```\n\n    - --audit-policy-file=/etc/kubernetes/simple-policy.yaml\n    ```", "```\n\n    - mountPath: /etc/kubernetes/simple-policy.yaml\n    ```", "```\n\n      name: audit\n    ```", "```\n\n      readOnly: true\n    ```", "```\n\n    - mountPath: /var/log/audit.log\n    ```", "```\n\n      name: audit-log\n    ```", "```\n\n      readOnly: false\n    ```", "```\n\n    - hostPath:\n    ```", "```\n\n        path: /etc/kubernetes/simple-policy.yaml\n    ```", "```\n\n        type: File\n    ```", "```\n\n      name: audit\n    ```", "```\n\n    - hostPath:\n    ```", "```\n\n        path: /var/log/audit.log\n    ```", "```\n\n        type: FileOrCreate\n    ```", "```\n\n      name: audit-log\n    ```", "```\n\n    sudo systemctl restart kubelet\n    ```", "```\n\n    kubectl get nodes\n    ```", "```\n\ntail -f /var/log/audit.log\n```", "```\n\nkubectl create sa miketest\n```", "```\n\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: ingress\n  name: reader\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\", \"watch\", \"list\"]\n```", "```\n\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: reader-cluster\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\", \"watch\", \"list\"]\n```", "```\n\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: reader-pod\n  namespace: ingress\nsubjects:\n- kind: ServiceAccount\n  name: miketest\n  apiGroup: \"\"\nroleRef:\n  kind: Role\n  name: reader\n  apiGroup: rbac.authorization.k8s.io\n```", "```\n\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: read-pod-global\nsubjects:\n- kind: ServiceAccount\n  name: miketest\n  apiGroup: \"\"\nroleRef:\n  kind: ClusterRole\n  name: reader-cluster\n  apiGroup: rbac.authorization.k8s.io\n```", "```\n\nkubectl run busybox1 --image=busybox --labels app=busybox1 -- sleep 3600\nkubectl run busybox2 --image=busybox --labels app=busybox2 -- sleep 3600\n```", "```\n\nkubectl get pods -o wide\n```", "```\n\nkubectl exec -ti busybox2 -- ping -c3 ip_of_busybox_one\n```", "```\n\nkubectl create -f - <<EOF\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: web-deny-all\nspec:\n  podSelector:\n    matchLabels:\n      app: busybox1\n  ingress: []\nEOF\n```", "```\n\nkubectl exec -ti busybox2 -- ping -c3 ip_of_busybox_one\n```", "```\n\n    helm repo add gatekeeper https://open-policy-agent.github.io/gatekeeper/charts\n    ```", "```\n\n    helm install gatekeeper/gatekeeper --name-template=gatekeeper --namespace gatekeeper-system --create-namespace\n    ```", "```\n\n    kubectl get all -n gatekeeper-system\n    ```", "```\n\nkubectl create -f - <<EOF\napiVersion: config.gatekeeper.sh/v1alpha1\nkind: Config\nmetadata:\n  name: config\n  namespace: \"gatekeeper-system\"\nspec:\n  sync:\n    syncOnly:\n      - group: \"\"\n        version: \"v1\"\n        kind: \"Pod\"\nEOF\n```", "```\n\nkubectl create -f - <<EOF\napiVersion: templates.gatekeeper.sh/v1beta1\nkind: ConstraintTemplate\nmetadata:\n  name: blocklatesttag\n  annotations:\n    description: Blocks container images from using the latest tag\nspec:\n  crd:\n    spec:\n      names:\n        kind: blocklatesttag # this must be the same name as the name on metadata.name (line 4)\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package blocklatesttag\n        violation[{\"msg\": msg, \"details\": {}}]{\n        input.review.object.kind == \"Pod\"\n        imagename := input.review.object.spec.containers[_].image\n        endswith(imagename,\"latest\")\n        msg := \"Images with tag the tag \\\"latest\\\" is not allowed\"\n        }\nEOF\n```", "```\n\nkubectl create -f - <<EOF\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: blocklatesttag\nmetadata:\n  name: nolatestcontainerimage\nspec:\n  match:\n    kinds:\n      - apiGroups: [\"\"]\n        kinds: [\"Pod\"]\n  parameters:\n    annotation: \"no-latest-tag-used\"\nEOF\n```", "```\n\nkubectl create -f - <<EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  selector:\n    matchLabels:\n      app: nginxdeployment\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: nginxdeployment\n    spec:\n      containers:\n      - name: nginxdeployment\n        image: nginx:latest\n        ports:\n        - containerPort: 80\nEOF\n```", "```\n\nkubectl delete deployment nginx-deployment\n```", "```\n\n    kubectl create -f - <<EOF\n    ```", "```\n\n    apiVersion: apps/v1\n    ```", "```\n\n    kind: Deployment\n    ```", "```\n\n    metadata:\n    ```", "```\n\n      name: nginx-deployment\n    ```", "```\n\n    spec:\n    ```", "```\n\n      selector:\n    ```", "```\n\n        matchLabels:\n    ```", "```\n\n          app: nginxdeployment\n    ```", "```\n\n      replicas: 2\n    ```", "```\n\n      template:\n    ```", "```\n\n        metadata:\n    ```", "```\n\n          labels:\n    ```", "```\n\n            app: nginxdeployment\n    ```", "```\n\n        spec:\n    ```", "```\n\n          containers:\n    ```", "```\n\n          - name: nginxdeployment\n    ```", "```\n\n            image: nginx:1.23.1\n    ```", "```\n\n            ports:\n    ```", "```\n\n            - containerPort: 80\n    ```", "```\n\n    EOF\n    ```", "```\n\ndocker scan containerimage:containerversion\n```", "```\n\ndocker scan ubuntu:latest\n```", "```\n\napiVersion: v1\nkind: Secret\nmetadata:\n  name: testsecret\ntype: Opaque\ndata:\n  username: YWRtaW4=\n  password: MWYyZDFlMmU2N2Rm\n```", "```\n\nkubectl get secrets\n```", "```\n\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginxpod\nspec:\n  containers:\n  - name: mypod\n    image: nginx:latest\n  volumes:\n  - name: foo\n    secret:\n      secretName: testsecret\n```"]