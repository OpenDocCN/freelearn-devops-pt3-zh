- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Deploying with Bitbucket Pipelines
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Bitbucket Pipelines 部署
- en: In the course of understanding Bitbucket Pipelines, we started with the concept
    of `bitbucket-pipelines.yml` file.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解 Bitbucket Pipelines 的过程中，我们从 `bitbucket-pipelines.yml` 文件的概念开始。
- en: We are now at the deployment stage, where we must take the build we created
    previously in Bitbucket Pipelines and install it in one of our environments, from
    testing to staging, and finally, to production. If we extend Bitbucket Pipelines
    so that it deploys automatically, we must consider **continuous deployment**.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在处于部署阶段，需要将之前在 Bitbucket Pipelines 中创建的构建安装到我们的某个环境中，从测试环境到预发布环境，最后到生产环境。如果我们扩展
    Bitbucket Pipelines 以实现自动部署，我们必须考虑 **持续部署**。
- en: 'In this chapter, we’ll look at what additions are required in `bitbucket-``pipelines``.yml`
    to perform continuous deployment. To do so, we will cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将查看如何在 `bitbucket-``pipelines``.yml` 中进行必要的添加以执行持续部署。为此，我们将涵盖以下配方：
- en: Configuring deployments
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置部署
- en: Pushing artifacts into the Bitbucket repository
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将工件推送到 Bitbucket 仓库
- en: Pushing artifacts into artifact repository tools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将工件推送到工件仓库工具
- en: Deploying artifacts to Bitbucket Downloads
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署工件到 Bitbucket 下载
- en: Deploying artifacts using **Secure Copy** **Protocol** (**SCP**)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **Secure Copy** **Protocol** (**SCP**) 部署工件
- en: Deploying artifacts into AWS S3 buckets
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将工件部署到 AWS S3 存储桶
- en: Deploying artifacts to AWS Lambda
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将工件部署到 AWS Lambda
- en: Deploying artifacts to Google Cloud
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署工件到 Google Cloud
- en: Deploying artifacts to Microsoft Azure
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署工件到 Microsoft Azure
- en: Using Ansible in the deployment stage
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在部署阶段使用 Ansible
- en: Using Terraform in the deployment stage
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在部署阶段使用 Terraform
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Because we are still working with Bitbucket Pipelines, we require a subscription
    to Bitbucket Cloud. This will also be required for recipes where artifacts end
    up in the repository or Bitbucket Downloads.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们仍在使用 Bitbucket Pipelines，所以需要订阅 Bitbucket Cloud。对于将工件最终放入代码库或 Bitbucket
    下载的配方，仍然需要此订阅。
- en: Deploying artifacts to cloud-based environments such as AWS, Google Cloud, and
    Microsoft Azure requires accounts with privileges to the services being used as
    targets in this chapter’s recipes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将工件部署到 AWS、Google Cloud 和 Microsoft Azure 等云环境，需要在本章的配方中使用的服务拥有权限的账户。
- en: The sample code for this chapter can be found in the `Chapter8` folder of this
    book’s GitHub repository [https://github.com/PacktPublishing/Atlassian-DevOps-Toolchain-Cookbook/tree/main/Chapter8](https://github.com/PacktPublishing/Atlassian-DevOps-Toolchain-Cookbook/tree/main/Chapter8)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节的示例代码可以在本书 GitHub 仓库的`Chapter8`文件夹中找到：[https://github.com/PacktPublishing/Atlassian-DevOps-Toolchain-Cookbook/tree/main/Chapter8](https://github.com/PacktPublishing/Atlassian-DevOps-Toolchain-Cookbook/tree/main/Chapter8)
- en: Now, let’s explore how to ready our builds for deployment.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来探索如何为部署准备构建。
- en: Configuring deployments
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置部署
- en: While Bitbucket Pipelines can deploy to many different platforms, the characteristics
    of a deployment are all the same. This can be advantageous when you’re deploying
    to a test environment, where you may want to define some runtime testing or package
    testing, versus the production environment, where the testing has been exhausted
    and it’s time to release new functionality to the end user.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Bitbucket Pipelines 可以部署到多个不同的平台，但部署的特点是相同的。这在你部署到测试环境时非常有利，你可能需要定义一些运行时测试或包测试，而在生产环境中，测试已经完成，可以发布新的功能给最终用户。
- en: With this in mind, let’s take a look at what the commonalities are for deployments
    and how to define them uniformly. After, we’ll learn how to configure deployments
    for different environments seen in a typical DevSecOps process.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个考虑，我们来看看部署的共同点是什么，以及如何统一定义它们。之后，我们将学习如何为典型 DevSecOps 流程中的不同环境配置部署。
- en: Getting ready
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Before setting up our pipeline, we need to define the environments for deployment.
    You can use the default environments, which have the following pre-definitions:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置管道之前，我们需要定义部署环境。你可以使用默认的环境，它们有以下预定义设置：
- en: Test
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试环境
- en: Staging
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Staging（预发布环境）
- en: Production
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产环境
- en: 'You can also change the names of the environments or configure environment-specific
    variables for deployment. To set the configurations for your environments, perform
    the following steps:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以更改环境的名称或为部署配置特定于环境的变量。要设置环境配置，请执行以下步骤：
- en: In Bitbucket, go to the repository of interest and select **Repository settings**.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Bitbucket 中，进入感兴趣的代码库并选择 **Repository settings**（代码库设置）。
- en: '![Figure 8.1 – Selecting Repository Settings](img/B21937_08_01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – 选择仓库设置](img/B21937_08_01.jpg)'
- en: Figure 8.1 – Selecting Repository Settings
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – 选择仓库设置
- en: In the **Pipelines** section, select the **Deployments** option.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**流水线**部分，选择**部署**选项。
- en: '![Figure 8.2 – Selecting Deployments](img/B21937_08_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – 选择部署](img/B21937_08_02.jpg)'
- en: Figure 8.2 – Selecting Deployments
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – 选择部署
- en: The list of default environments will appear, divided into **Test**, **Staging**,
    and **Production**.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认环境列表将显示，分为**测试**、**预发布**和**生产**。
- en: "![Figure 8.3 – \uFEFFDeployment environments](img/B21937_08_03.jpg)"
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – 部署环境](img/B21937_08_03.jpg)'
- en: Figure 8.3 – Deployment environments
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 部署环境
- en: To change an existing environment, click on the band that represents the environment.
    It will expand, showing options you can use to change the name and a section for
    environment-specific variables.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要更改现有环境，点击代表该环境的条带。它将展开，显示您可以用来更改名称的选项以及一个用于环境特定变量的部分。
- en: "![Figure 8.4 – \uFEFFConfiguration options for an environment](img/B21937_08_04.jpg)"
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4 – 环境的配置选项](img/B21937_08_04.jpg)'
- en: Figure 8.4 – Configuration options for an environment
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – 环境的配置选项
- en: To change the name, overwrite the name in the **Environment name:** field. To
    add a variable, fill in the **Name** and **Value** fields. If the variable is
    meant to contain a secret such as a password or key, make sure that the **Secured**
    checkbox is selected. Finish by clicking the **Add** button.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改名称，在**环境名称：**字段中覆盖名称。要添加变量，请填写**名称**和**值**字段。如果变量包含密码或密钥等秘密信息，请确保选中**已加密**复选框。最后点击**添加**按钮。
- en: To add a new environment, go to the section that defines the environment type
    (**Test**, **Staging**, or **Production**) and select the **add** **environment**
    button.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加一个新环境，进入定义环境类型（**测试**、**预发布**或**生产**）的部分，并点击**添加** **环境**按钮。
- en: Fill in the name of the new environment and select the **Staging** **environments**
    checkbox.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写新环境的名称，并选择**预发布** **环境**复选框。
- en: '![Figure 8.5 – Adding an environment](img/B21937_08_05.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5 – 添加一个环境](img/B21937_08_05.jpg)'
- en: Figure 8.5 – Adding an environment
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – 添加一个环境
- en: On the free plan of Bitbucket, you can define 10 environments. On the premium
    version of Bitbucket, this limit is increased to 100\. The premium version of
    Bitbucket allows you to restrict which branches can deploy to that environment
    and whether admins alone can perform any deployment on that environment.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Bitbucket 的免费计划中，您可以定义 10 个环境。在 Bitbucket 的高级版本中，这个限制增加到 100。Bitbucket 的高级版本允许您限制哪些分支可以部署到该环境，并且可以设置只有管理员才能在该环境上执行任何部署。
- en: Now that we’ve configured our environments, it’s time to configure the deployments.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置好了环境，是时候配置部署了。
- en: How to do it…
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To define a deployment, we must introduce new keywords and sections to our `bitbucket-pipelines.yml`
    file. We’ll apply these keywords and sections to stages or steps in our pipeline.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个部署，我们必须在 `bitbucket-pipelines.yml` 文件中引入新的关键字和部分。我们将在流水线的阶段或步骤中应用这些关键字和部分。
- en: Once we’ve done this, we can define separate deployments, depending on which
    branch is receiving merges from lower branches. This allows us to continually
    deploy and test until the final pull request to a main branch, where deployment
    may happen on the production environment.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成此配置，我们可以根据接收来自下级分支合并的分支来定义单独的部署。这使我们能够不断地进行部署和测试，直到最终的拉取请求提交到主分支，在生产环境中可能会进行部署。
- en: Let’s look at performing these deployments.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何执行这些部署。
- en: Configuring a deployment in bitbucket-pipelines.yml
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 bitbucket-pipelines.yml 中配置部署
- en: 'The deployment instructions are identified in a stage or step within the `bitbucket-pipelines.yml`
    file with the `deployment:` keyword, along with the environment that is the target
    for the deployment step or steps. Let’s learn how to use the `deployment:` keyword:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 部署指令在 `bitbucket-pipelines.yml` 文件的阶段或步骤中通过 `deployment:` 关键字标识，并指定部署步骤或步骤的目标环境。让我们学习如何使用
    `deployment:` 关键字：
- en: 'The `deployment:` keyword is used within a step to identify the environment
    that is being deployed. An example is shown in the following code snippet:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`deployment:` 关键字在步骤中用于标识正在部署的环境。以下代码片段中展示了一个示例：'
- en: '[PRE0]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can define multiple steps for deployment, with each step noting the environment.
    However, Bitbucket requires that the environment types fall within the following
    order:'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以为部署定义多个步骤，每个步骤都会标明环境。然而，Bitbucket要求环境类型按以下顺序排列：
- en: Test environment.
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试环境。
- en: Staging environments
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阶段环境
- en: Production environments
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生产环境
- en: 'If several steps are required for a deployment, the `deployment:` keyword can
    be used within the definition of a stage to identify the target environment. An
    example of this is shown in the following code snippet:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果部署需要多个步骤，可以在阶段定义中使用`deployment:`关键字来标识目标环境。以下代码片段展示了这一示例：
- en: '[PRE1]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you want your deployment step to be triggered manually, add the `trigger:
    manual` keyword within your deployment step. This can be seen in the following
    code snippet:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '如果你希望部署步骤被手动触发，请在部署步骤中添加`trigger: manual`关键字。以下代码片段展示了这一操作：'
- en: '[PRE2]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once we’ve defined deployment steps or stages in our `bitbucket-pipelines.yml`
    file, we can monitor the progress and outcome of our deployments in Bitbucket.
    Let’s examine the process for doing so.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在`bitbucket-pipelines.yml`文件中定义了部署步骤或阶段，我们就可以在Bitbucket中监控部署的进度和结果。我们来看看如何操作。
- en: Monitoring deployments
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 监控部署
- en: 'Once you’ve executed a deployment, you can track its progress or manually execute
    deployments in the deployment dashboard. Let’s examine the features of the deployment
    dashboard:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你执行了部署，你可以在部署仪表板中跟踪其进度或手动执行部署。我们来看看部署仪表板的功能：
- en: As we saw in the previous recipe, to reach the deployment dashboard, select
    **Deployments** from the sidebar at the repository level.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们在前面的配方中看到的，要访问部署仪表板，请在仓库级别的侧边栏中选择**部署**。
- en: The deployment dashboard will appear to the right of the sidebar. It is divided
    into the environments defined in the `bitbucket-pipelines.yml` file. Within this
    environment, there will be a card that exhibits the last successful deployment
    to that environment.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署仪表板将出现在侧边栏的右侧。它被划分为在`bitbucket-pipelines.yml`文件中定义的环境。在该环境内，将显示一个卡片，展示该环境中最后一次成功的部署。
- en: '![Figure 8.6 – Deployments dashboard](img/B21937_08_06.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图8.6 – 部署仪表板](img/B21937_08_06.jpg)'
- en: Figure 8.6 – Deployments dashboard
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6 – 部署仪表板
- en: Click on the card in an environment to view the details of the deployment for
    that environment. The details will include the commit that caused the execution
    of `bitbucket-pipelines.yml`, a note on the differences between the existing version
    and the commit, and the push to the associated environment, including deployment
    history. If Jira and Bitbucket are connected, as we discussed in the *Connecting
    Bitbucket* recipe in [*Chapter 1*](B21937_01.xhtml#_idTextAnchor019), you will
    also see the Jira issue associated with the commit. The following screenshot shows
    a deployment to the **Test** environment.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击环境中的卡片，查看该环境的部署详情。详情包括导致`bitbucket-pipelines.yml`执行的提交，现有版本与提交之间的差异说明，以及推送到关联环境的内容，包括部署历史。如果Jira和Bitbucket已连接，正如我们在[*第1章*](B21937_01.xhtml#_idTextAnchor019)的*连接Bitbucket*配方中讨论的，你还将看到与提交相关的Jira问题。以下截图展示了部署到**测试**环境。
- en: '![Figure 8.7 – Deployment to the Test environment](img/B21937_08_07.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图8.7 – 部署到测试环境](img/B21937_08_07.jpg)'
- en: Figure 8.7 – Deployment to the Test environment
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7 – 部署到测试环境
- en: If a deployment is defined to be manually triggered, you will see a **Promote**
    button on the last successful deployment to the lower environment. Click **Promote**
    to execute a deployment to the higher environment.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果部署被定义为手动触发，你将在最后一次成功部署到较低环境的卡片上看到一个**提升**按钮。点击**提升**按钮即可执行部署到更高的环境。
- en: '![Figure 8.8 – Promoting a manual deployment to production](img/B21937_08_08.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图8.8 – 将手动部署提升到生产环境](img/B21937_08_08.jpg)'
- en: Figure 8.8 – Promoting a manual deployment to production
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8 – 将手动部署提升到生产环境
- en: 'You can redeploy the last successful deployment from the deployment dashboard
    if a deployment fails. The ability to redeploy requires the following conditions
    to be met:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果部署失败，你可以从部署仪表板重新部署上次成功的部署。重新部署的能力要求满足以下条件：
- en: An initial deployment step in the pipeline was executed successfully
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道中的初始部署步骤已成功执行
- en: Deployment permissions are set to allow the redeployment of the step (please
    note that this is only available in the premium plan of Bitbucket)
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署权限设置为允许重新部署该步骤（请注意，这仅在Bitbucket的高级计划中提供）。
- en: Artifacts that are used for deployment can’t expire
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于部署的产物不能过期。
- en: 'Once a deployment to a specific environment is engaged, any subsequent deployments
    from other pipelines to that environment will be paused thanks to **concurrency
    control**, which limits pipeline executions to a single deployment in a given
    environment. When the original in-progress deployment is complete, you have the
    following options for paused deployments:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦部署到特定环境被启动，来自其他 Pipelines 的任何后续部署都会被暂停，这得益于**并发控制**，它将每个环境的部署限制为一次。原始部署完成后，您可以对暂停的部署进行以下操作：
- en: Rerun the pipeline from the beginning
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从头开始重新运行 Pipeline
- en: Resume the pipeline from when it was paused
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从暂停处恢复 Pipeline
- en: Now that we understand the mechanics of deployment, we can allow deployments
    to specific environments if a pull request to its associated branch succeeds.
    Let’s look at how that’s done.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了部署的机制，如果与特定分支相关联的拉取请求成功，我们就可以允许部署到特定环境。让我们看看如何做到这一点。
- en: Deploying from a pull request or branch
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从拉取请求或分支进行部署
- en: 'As you may recall from the *Conditional execution of pipelines* recipe from
    [*Chapter 6*](B21937_06.xhtml#_idTextAnchor103), you can set up your pipelines
    to execute different instructions based on which branch is receiving the new commit
    or if a pull request is being requested. Let’s learn how these different conditions
    can be established:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如你从[*第6章*](B21937_06.xhtml#_idTextAnchor103)的*条件执行 Pipelines*的配方中所记得的，你可以设置你的
    Pipelines，根据接收新提交的分支或是否有拉取请求被创建，执行不同的指令。让我们学习如何建立这些不同的条件：
- en: 'A branch pipeline specifies actions to be performed when a push occurs on a
    specific branch. You can use the `branches:` keyword to describe what actions
    occur on a branch pipeline. These actions are grouped under the branch name. The
    following code snippet details various actions, including deployment for other
    branches, when using the `default:` keyword and separate actions for the staging
    branch:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分支 Pipeline 指定在特定分支上发生推送时需要执行的操作。您可以使用 `branches:` 关键字来描述分支 Pipeline 上发生的操作。这些操作会在分支名称下分组。以下代码片段详细说明了使用
    `default:` 关键字时，针对其他分支的部署操作，以及为暂存分支设定的独立操作：
- en: '[PRE3]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A pull request pipeline allows you to specify the actions when a pull request
    is created for a specific branch. These actions are defined on branches underneath
    the `pull-requests:` keyword. Let’s look at actions that are completed when a
    pull request occurs on the staging branch:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拉取请求 Pipeline 允许您指定在特定分支上创建拉取请求时执行的操作。这些操作在 `pull-requests:` 关键字下的分支中定义。让我们来看一下当拉取请求发生在暂存分支时完成的操作：
- en: '[PRE4]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: With that, we’ve learned how to easily test and deploy when changes occur on
    feature branches. Automated deployment to production is possible when a pull request
    from staging to the production branch is created.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些内容，我们已经学会了如何在功能分支发生更改时轻松进行测试和部署。当从暂存分支到生产分支的拉取请求被创建时，自动部署到生产环境是可能的。
- en: Now that we’ve seen how to configure Bitbucket Pipelines for deployment, we
    will look at examples of how to perform specific deployments depending on the
    target. First, we’ll learn how to deploy into the Bitbucket git repository itself.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何配置 Bitbucket Pipelines 进行部署，接下来我们将查看根据目标执行特定部署的示例。首先，我们将学习如何将部署内容推送到
    Bitbucket git 仓库本身。
- en: Pushing artifacts into the Bitbucket repository
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将构建产物推送到 Bitbucket 仓库
- en: Part of the deployment process may be to take build artifacts and place them
    in the correct repository. The most convenient repository to store build artifacts
    may be Bitbucket itself. This is often discouraged because build artifacts typically
    consume a large amount of storage and may cause performance issues with the underlying
    git tool. Nevertheless, we offer this recipe if no alternatives exist.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 部署过程的一部分可能是将构建产物放置到正确的仓库中。最方便的存储构建产物的仓库可能就是 Bitbucket 本身。通常不推荐这么做，因为构建产物通常会占用大量存储空间，并可能导致底层
    git 工具的性能问题。不过，如果没有其他替代方案，我们提供了这个方法。
- en: Let’s learn how to push build artifacts back into a Bitbucket repository as
    part of deployment.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何将构建产物推送回 Bitbucket 仓库，作为部署的一部分。
- en: Getting ready
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Although the recommended way to push back content to the git repository is using
    HTTP, there may be times when the only way to do this is by using SSH. To do that,
    you’ll need to set up your credentials. This is true if you have branch permissions
    enabled on your repository or want to set up an automated account for these actions.
    An important consideration is that configuring these accounts removes limits on
    what they can access.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Let’s learn how to create accounts with different authentication methods.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Using OAuth for authentication
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use OAuth as the authentication method for accessing the git repository.
    This involves creating an account and giving that account write access to the
    main or master branch through branch permissions. Let’s learn how to set up an
    account with OAuth:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: On your **Workspace** page in Bitbucket, click on the **Settings** cog and select
    **Workspace settings**.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.9 – Selecting Workspace settings](img/B21937_08_09.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
- en: Figure 8.9 – Selecting Workspace settings
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: In the sidebar for **Workspace settings**, find the **APPS AND FEATURES** section
    and select **OAuth consumers**.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.10 – Selecting OAuth consumers](img/B21937_08_10.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
- en: Figure 8.10 – Selecting OAuth consumers
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **OAuth consumers** page, click the **Add** **consumer** button:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.11 – Add consumer](img/B21937_08_11.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 – Add consumer
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'On the subsequent page, fill in the following details:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set **Callback URL** to [https://bitbucket.org](https://bitbucket.org
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Make sure **This is a private consumer** is checked
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For permissions, ensure that both **Read** and **Write** permissions are checked
    under **Repositories**. Click the **Save** button to save the OAuth consumer:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Return to the consumer page and find the new consumer you created. Record the
    key and secret as secure pipeline variables. Use `CLIENT_ID` for the key and `CLIENT_SECRET`
    for the secret:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.12 – OAuth consumer key and secret](img/B21937_08_12.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
- en: Figure 8.12 – OAuth consumer key and secret
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code snippet to the `script` section of the `bitbucket-pipelines.yml`
    file before the git commands to make the changes and commit to the git repository.
    We assume that your runner has the `curl` and `jq` utilities installed:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With that, you’ve configured an OAuth consumer and allowed it to make git commits
    from Bitbucket Pipelines.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: We can also set up SSH keys using the Bitbucket UI. Let’s examine how to do
    that.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Creating an SSH key pair for Bitbucket Pipelines
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For a given repository, you can create an SSH key pair and save the public
    key in Bitbucket so that it can be deployed back to the git repository using SSH.
    Let’s see how that’s done:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'On the repository page, select **Repository settings** in the sidebar:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Pipelines** section of the **Repository settings** sidebar, select
    **SSH Keys**:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Selecting SSH Keys](img/B21937_08_13.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
- en: Figure 8.13 – Selecting SSH Keys
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **SSH Keys** page, select **Generate keys**:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Generating keys](img/B21937_08_14.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.14 – 生成密钥](img/B21937_08_14.jpg)'
- en: Figure 8.14 – Generating keys
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.14 – 生成密钥
- en: 'Copy the resulting public key:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制生成的公钥：
- en: '![Figure 8.15 – Copying the public key](img/B21937_08_15.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.15 – 复制公钥](img/B21937_08_15.jpg)'
- en: Figure 8.15 – Copying the public key
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.15 – 复制公钥
- en: 'At this point, you will need to add the public key to your personal Bitbucket
    settings. To start, select the **Settings** cog and click **Personal** **Bitbucket
    settings**:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，您需要将公钥添加到您的个人 Bitbucket 设置中。首先，选择**设置**图标，然后点击**个人** **Bitbucket 设置**：
- en: 'In the **SECURITY** section of the **Personal settings** sidebar, select **SSH
    keys**:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**个人设置**侧边栏的**安全性**部分，选择**SSH 密钥**：
- en: '![Figure 8.16 – Selecting SSH keys](img/B21937_08_16.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.16 – 选择 SSH 密钥](img/B21937_08_16.jpg)'
- en: Figure 8.16 – Selecting SSH keys
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.16 – 选择 SSH 密钥
- en: 'Select **Add key** on the **SSH** **keys** page:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**SSH** **密钥**页面上选择**添加密钥**：
- en: '![Figure 8.17 – Add key](img/B21937_08_17.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.17 – 添加密钥](img/B21937_08_17.jpg)'
- en: Figure 8.17 – Add key
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.17 – 添加密钥
- en: 'In the **Add SSH key** modal, paste the public key and select **Add key**:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加 SSH 密钥**弹窗中，粘贴公钥并选择**添加密钥**：
- en: '![Figure 8.18 – Pasting and adding the public key](img/B21937_08_18.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.18 – 粘贴并添加公钥](img/B21937_08_18.jpg)'
- en: Figure 8.18 – Pasting and adding the public key
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.18 – 粘贴并添加公钥
- en: 'The following line needs to be added to the `script` section of your `bitbucket-pipelines.yml`
    file before the git commands so that you can save and commit changes back to the
    git repository. This line configures git to use SSH. `BITBUCKET_GIT_SSH_ORIGIN`
    is a default environment variable:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码行需要添加到 `bitbucket-pipelines.yml` 文件的 `script` 部分，在 git 命令之前，以便您可以将更改保存并提交回
    git 仓库。此行配置 git 使用 SSH。`BITBUCKET_GIT_SSH_ORIGIN` 是一个默认的环境变量：
- en: '[PRE6]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With that, you’ve configured SSH keys to authenticate when you’re pushing a
    commit back to your git repository.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些配置后，您已经设置了 SSH 密钥，在将提交推送回 git 仓库时进行身份验证。
- en: One final authentication method involves creating an application password and
    passing that as a secure variable. Let’s examine how to do that.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种身份验证方法是创建一个应用密码，并将其作为安全变量传递。让我们来看看如何操作。
- en: Creating an application password
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建应用密码
- en: 'Application passwords are personal secrets that you can use securely in Bitbucket
    for automated functions. Let’s look at how to create an application password:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 应用密码是您可以在 Bitbucket 中安全使用的个人秘密，用于自动化功能。让我们看看如何创建一个应用密码：
- en: Select the **Settings** cog and select **Personal** **Bitbucket settings**.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**设置**图标并选择**个人** **Bitbucket 设置**。
- en: In the **Access Management** section of the **Personal settings** sidebar, select
    **App passwords**.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**个人设置**侧边栏的**访问管理**部分，选择**应用密码**。
- en: 'On the **App passwords** page, select **Create** **app password**:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**应用密码**页面上，选择**创建** **应用密码**：
- en: '![Figure 8.19 – Creating an app password](img/B21937_08_19.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.19 – 创建应用密码](img/B21937_08_19.jpg)'
- en: Figure 8.19 – Creating an app password
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.19 – 创建应用密码
- en: 'On the **Add app password** page, give the app password a name and make sure
    **Read** and **Write** permissions are selected for the **Repositories** section.
    Once you’ve done this, click **Create**:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加应用密码**页面上，为应用密码命名，并确保在**仓库**部分选中**读取**和**写入**权限。完成后，点击**创建**：
- en: 'The app password will appear on a modal. Copy the value and make sure it is
    in a safe location:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用密码将在弹窗中显示。复制该值，并确保它存放在安全的位置：
- en: '![Figure 8.20 – Generated app password](img/B21937_08_20.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.20 – 生成的应用程序密码](img/B21937_08_20.jpg)'
- en: Figure 8.20 – Generated app password
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.20 – 生成的应用程序密码
- en: 'An example of a safe location is a secured variable. Set the app password as
    a **secured repository variable** or **secured** **workplace variable**:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一个安全的位置示例是安全变量。将应用密码设置为**安全的仓库变量**或**安全的工作区变量**：
- en: '![Figure 8.21 – Adding the app password as a secured repository variable](img/B21937_08_21.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.21 – 将应用密码添加为安全的仓库变量](img/B21937_08_21.jpg)'
- en: Figure 8.21 – Adding the app password as a secured repository variable
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.21 – 将应用密码添加为安全的仓库变量
- en: 'The following line needs to be added to the `script` section of your `bitbucket-pipelines.yml`
    file before the git commands so that you can save and commit changes back to the
    git repository. This line configures the git remote URL to use the included username
    and app password for authentication:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码行需要添加到 `bitbucket-pipelines.yml` 文件的 `script` 部分，在 git 命令之前，以便您可以将更改保存并提交回
    git 仓库。此行配置 git 远程 URL，使用包含的用户名和应用密码进行身份验证：
- en: '[PRE7]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With that, we’ve learned how to use several authentication methods when committing
    changes back to a git repository. Now, let’s look at what needs to be added to
    do the actual commits.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了在提交更改到 git 仓库时如何使用几种身份验证方法。现在，让我们看看需要添加哪些内容来执行实际的提交。
- en: How to do it…
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'If you’re using the preconfigured HTTP git origin for pushing changes back
    to the git repository or have set up authentication using one of the preceding
    methods, the only thing you need to do is define the script steps for performing
    the actual git commits and pushes. Let’s see how that’s done:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用预配置的 HTTP git 源来推送更改到 git 仓库，或者已经使用上述某种方法设置了身份验证，那么你需要做的唯一事情就是定义执行实际
    git 提交和推送的脚本步骤。我们来看看如何实现：
- en: 'To commit changes, add the `git add`, `git commit`, and `git push` commands
    to the `script` section of your `bitbucket-pipelines.yml` file. Note that regarding
    the git commit message, you can add `[skip ci]` to avoid an infinite loop of pipeline
    executions. An example is shown in the following code snippet:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要提交更改，将 `git add`、`git commit` 和 `git push` 命令添加到 `bitbucket-pipelines.yml`
    文件的 `script` 部分。请注意，关于 git 提交消息，你可以添加 `[skip ci]` 以避免管道执行的无限循环。以下代码片段展示了一个示例：
- en: '[PRE8]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you’re using tags, you can add the `git tag` command to create the new tag.
    The code snippet will resemble the following. In this example, the tag will include
    the build number since we’re referring to the `BITBUCKET_BUILD_NUMBER` predefined
    variable:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用标签，可以添加 `git tag` 命令来创建新的标签。代码片段将类似于以下内容。在此示例中，由于我们引用了 `BITBUCKET_BUILD_NUMBER`
    预定义变量，标签将包含构建号：
- en: '[PRE9]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We have now seen how to use the git repository as a repository for build artifacts.
    Admittedly, this method is cumbersome when there are dedicated artifact repository
    tools available such as Artifactory from JFrog and Nexus from Sonatype. In the
    next recipe, we’ll learn how to deploy our build artifacts to those tools for
    storage and tracking purposes.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经看到如何使用 git 仓库作为构建工件的存储库。坦率地说，当有像 JFrog 的 Artifactory 和 Sonatype 的 Nexus
    这样的专用构件库工具时，这种方法会显得有些繁琐。在接下来的步骤中，我们将学习如何将构建工件部署到这些工具中进行存储和跟踪。
- en: Pushing artifacts into artifact repository tools
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将构件推送到构件库工具中
- en: Artifact repository tools such as Artifactory and Nexus allow for configuration
    management, a discipline where the build artifacts that emerge from a continuous
    integration pipeline are stored and tracked against the environments where they
    are applied.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 像 Artifactory 和 Nexus 这样的构件库工具支持配置管理，这是一种将从持续集成管道中生成的构建工件存储并与其应用的环境进行跟踪的实践。
- en: Elementary builds that result in pushes to Artifactory or Nexus can rely on
    Bitbucket Pipes, which allows you to easily deploy from the `bitbucket-pipelines.yml`
    file. More complex deployments involving Maven or npm won’t be covered here but
    we will include references to create those types of deployments.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Bitbucket Pipes，基本构建可以推送到 Artifactory 或 Nexus，这使你可以轻松地从 `bitbucket-pipelines.yml`
    文件进行部署。更复杂的涉及 Maven 或 npm 的部署将在这里不予讨论，但我们会提供一些参考，以创建这些类型的部署。
- en: Getting ready
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: When using Pipes for either JFrog Artifactory or Sonatype Nexus, there are a
    few prerequisite steps that should be defined. We will examine which steps are
    needed by tool.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 JFrog Artifactory 或 Sonatype Nexus 的 Pipes 时，有一些先决步骤需要定义。我们将逐一查看每个工具所需的步骤。
- en: JFrog CLI prerequisites
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JFrog CLI 先决条件
- en: 'The JFrog Setup CLI pipe requires connections to the JFrog Platform servers.
    Let’s look at the steps that are involved in this process:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: JFrog Setup CLI Pipe 需要连接到 JFrog 平台服务器。让我们看看这个过程中涉及的步骤：
- en: 'Ensure the runner is installed with the JFrog CLI. At the time of writing,
    this should be at version `2.17.0` or later. The following command is for macOS
    and Linux runners, assuming that `curl` is installed:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保运行器已安装 JFrog CLI。在编写本文时，版本应为 `2.17.0` 或更高。以下命令适用于 macOS 和 Linux 运行器，假设已安装
    `curl`：
- en: '[PRE10]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you’re using Windows runners, use the following command. Note that this
    is using PowerShell:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你正在使用 Windows 运行器，请使用以下命令。请注意，这里使用的是 PowerShell：
- en: '[PRE11]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Use the JFrog CLI to connect to your JFrog Platform servers. To set up the
    details of your JFrog Platform instances, run the following command:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 JFrog CLI 连接到你的 JFrog 平台服务器。要设置 JFrog 平台实例的详细信息，请运行以下命令：
- en: '[PRE12]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'At this point, it may also be convenient to set up Bitbucket secure variables
    that mirror JFrog environment variables that have names starting with `JF_ENV_`
    as the key and the server token as the value. You can derive the server token
    using the following JFrog CLI command:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，可以方便地设置与 JFrog 环境变量相对应的 Bitbucket 安全变量，变量名以 `JF_ENV_` 开头，键为环境变量名，值为服务器令牌。你可以通过以下
    JFrog CLI 命令获取服务器令牌：
- en: '[PRE13]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: With that, we’ve covered the preliminary setup for the JFrog CLI. Now, let’s
    examine what’s needed for Nexus.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经覆盖了 JFrog CLI 的初步设置。现在，我们来看一下 Nexus 需要的内容。
- en: Sonatype Nexus prerequisites
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sonatype Nexus 先决条件
- en: 'The pipe for Sonatype Nexus Publisher requires a few environment variables
    to be defined. Some variables are mandatory. The variables to be defined as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Sonatype Nexus 发布器的管道需要定义一些环境变量。某些变量是必填的。需要定义的变量如下：
- en: '`FILENAME` (mandatory): This is the path to the file to publish.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FILENAME`（必填）：这是要发布的文件路径。'
- en: '`ATTRIBUTES` (mandatory): Attributes needed by Nexus Publisher. Component attributes
    are denoted with `-C`. Asset attributes are denoted with `-A`.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ATTRIBUTES`（必填）：Nexus 发布器所需的属性。组件属性以 `-C` 表示，资产属性以 `-A` 表示。'
- en: '`USERNAME` (mandatory): Nexus username.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`USERNAME`（必填）：Nexus 用户名。'
- en: '`PASSWORD` (mandatory): Nexus password.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PASSWORD`（必填）：Nexus 密码。'
- en: '`SERVER_URL` (Mandatory): Nexus server URL.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SERVER_URL`（必填）：Nexus 服务器 URL。'
- en: '`REPOSITORY`: Repository name in Nexus. The default is `maven-releases`.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REPOSITORY`：Nexus 中的仓库名称。默认值是 `maven-releases`。'
- en: '`FORMAT`: Artifact format. The default is `maven2`.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FORMAT`：制品格式。默认值是 `maven2`。'
- en: Now that our prerequisites are out of the way, let’s look at pushing our artifacts
    using pipes.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 既然先决条件已经处理完毕，接下来我们来看一下如何使用管道推送我们的制品。
- en: How to do it…
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: In the *Connecting to Bitbucket Pipes* recipe in [*Chapter 6*](B21937_06.xhtml#_idTextAnchor103),
    we learned about pipes. Pipes serve as integration points for third-party tools
    in a Bitbucket pipeline.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第六章*](B21937_06.xhtml#_idTextAnchor103) 的 *连接到 Bitbucket 管道* 章节中，我们了解了管道。管道作为
    Bitbucket 管道中的第三方工具集成点。
- en: At this point, we are ready to connect to either JFrog or Sonatype Nexus through
    pipes and set up deployment steps. Let’s examine how to do that for each tool.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好通过管道连接到 JFrog 或 Sonatype Nexus，并设置部署步骤。让我们来看看如何为每个工具执行这项操作。
- en: Using the JFrog Setup CLI pipe
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 JFrog Setup CLI 管道
- en: 'You can use the JFrog Setup CLI pipe to connect to any JFrog tool on the JFrog
    Platform, including Artifactory and XRay. Let’s look at the steps involved:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 JFrog Setup CLI 管道连接到 JFrog 平台上的任何 JFrog 工具，包括 Artifactory 和 XRay。我们来看一下相关步骤：
- en: 'Add the following lines to the `script` section of your `bitbucket-pipelines.yml`
    file:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下几行添加到 `bitbucket-pipelines.yml` 文件的 `script` 部分：
- en: '[PRE14]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once the setup lines have been added, you can use any JFrog CLI commands to
    make changes. The following code snippet is an example of a build that runs several
    commands to Artifactory using JFrog CLI commands:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦添加了设置行，你就可以使用任何 JFrog CLI 命令进行更改。以下代码片段是一个示例，展示了一个构建过程，该过程通过 JFrog CLI 命令将多个命令发送到
    Artifactory：
- en: '[PRE15]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: With that, we’ve learned how to connect and communicate with JFrog tools using
    pipes and JFrog CLI commands. Now, let’s look at the process for Sonatype Nexus
    Manager.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经学会了如何使用管道和 JFrog CLI 命令与 JFrog 工具进行连接和通信。现在，我们来看一下 Sonatype Nexus 管理器的过程。
- en: Using the Sonatype Nexus Publisher pipe
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Sonatype Nexus 发布器管道
- en: 'Let’s learn how to use a pipe to connect to Sonatype Nexus Publisher:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何使用管道连接到 Sonatype Nexus 发布器：
- en: 'Add the following code snippet to the `script` section of your `bitbucket-pipelines.yml`
    file. You can fill out the variables in-line or use Bitbucket variables:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码片段添加到 `bitbucket-pipelines.yml` 文件的 `script` 部分。你可以直接在代码中填写变量，或者使用 Bitbucket
    变量：
- en: '[PRE16]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here’s an example:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个示例：
- en: '[PRE17]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: At this point, we’ve seen how easy it is to use pipes for easy deployment. Other
    examples in subsequent recipes in this chapter will also show the ease of pipes.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到使用管道进行轻松部署是多么简单。本章后续的其他示例也将展示管道的简便性。
- en: See also
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'The following are links to other reference materials if you need to learn more
    about how to connect to JFrog or Sonatype Nexus:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些其他参考资料链接，如果你需要了解更多关于如何连接到 JFrog 或 Sonatype Nexus 的信息：
- en: 'JFrog CLI documentation: [https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli](https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli)'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JFrog CLI 文档：[https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli](https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli)
- en: 'An example of using Bitbucket Pipelines for a Maven deployment using **GNU
    Privacy Guard** (**GPG**) and **Open Source Software Repository Hosting** (**OSSRH**):
    [https://bitbucket.org/simpligility/ossrh-pipeline-demo/src/master/](https://bitbucket.org/simpligility/ossrh-pipeline-demo/src/master/)'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Bitbucket Pipelines进行Maven部署的示例，使用**GNU隐私保护**（**GPG**）和**开源软件仓库托管**（**OSSRH**）：[https://bitbucket.org/simpligility/ossrh-pipeline-demo/src/master/](https://bitbucket.org/simpligility/ossrh-pipeline-demo/src/master/)
- en: Next, we’ll look at several examples of taking build artifacts and installing
    them on target environments. We’ll begin by looking at various upload processes
    that can be used.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看几个将构建构件安装到目标环境的示例。我们将从查看各种上传过程开始。
- en: Deploying artifacts to Bitbucket Downloads
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将构件部署到Bitbucket下载区
- en: You can use Bitbucket itself as a staging area for build artifacts by configuring
    the Bitbucket Downloads pipe. This allows you to push build artifacts to Bitbucket
    Downloads. We’ll examine this process in more detail in this recipe.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过配置Bitbucket下载管道，将Bitbucket本身作为构建构件的暂存区。这使你能够将构建构件推送到Bitbucket下载区。我们将在本食谱中更详细地了解这一过程。
- en: Getting ready
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Use of the `bitbucket-upload-file` pipe requires authentication either by username
    and app password or by access token. We looked at creating app passwords in the
    *Getting ready* section of the *Pushing artifacts into the Bitbucket* *repository*
    recipe.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`bitbucket-upload-file`管道需要通过用户名和应用密码或访问令牌进行身份验证。我们在*准备就绪*部分中查看了如何创建应用密码，这部分内容出现在*将构件推送到Bitbucket*
    *仓库*的食谱中。
- en: 'Access tokens are available at the repository level for all plans of Bitbucket,
    and they’re available at the project and workspace levels for the Premium plan
    of Bitbucket. The tokens are only scoped to the repository, project, or workspace
    for which they were created. These are for single-use functions and are revoked
    if replacement is needed. Let’s learn how to create a repository access token:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 访问令牌在所有Bitbucket计划的仓库级别都可用，并且在Bitbucket的Premium计划下，项目和工作区级别也可以使用。令牌仅限于为其创建的仓库、项目或工作区。这些令牌是一次性使用的，如果需要替换，则会被撤销。让我们学习如何创建一个仓库访问令牌：
- en: At the repository level, select **Repository settings** in the sidebar.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仓库级别，选择侧边栏中的**仓库设置**。
- en: 'In the **Repository settings** sidebar, select **Access tokens** in the **SECURITY**
    section:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**仓库设置**侧边栏中，选择**安全**部分中的**访问令牌**：
- en: "![Figure 8.22 – \uFEFFSelecting Access tokens](img/B21937_08_22.jpg)"
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.22 – 选择访问令牌](img/B21937_08_22.jpg)'
- en: Figure 8.22 – Selecting Access tokens
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.22 – 选择访问令牌
- en: 'On the **Access tokens** page, select **Create Repository** **Access Token**:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**访问令牌**页面，选择**创建仓库** **访问令牌**：
- en: 'In the modal, give the token a name and specify permissions. Bitbucket Pipelines
    requires **Read** and **Write** permissions on **Repositories**. Click **Create**
    when you’re finished:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹窗中，为令牌命名并指定权限。Bitbucket Pipelines要求**读取**和**写入**仓库权限。完成后，点击**创建**：
- en: The next modal will contain the value of the token and useful applications for
    it. Save the token value by copying it and pasting it in a safe location. This
    will be the only opportunity you will have to view the token value.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的弹窗将包含令牌的值以及相关的有用应用。通过复制令牌并粘贴到安全的位置来保存令牌值。这将是你查看令牌值的唯一机会。
- en: 'You can place your access token as a secure repository variable. Select **Repository
    variables** in the **Repository settings** sidebar, fill in the key name for the
    token, and paste the previously copied token value into the **Value** section.
    Once you’ve done this, check the **Secured** checkbox and click **Add**:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以将访问令牌作为安全的仓库变量。选择**仓库设置**侧边栏中的**仓库变量**，填写令牌的键名，并将之前复制的令牌值粘贴到**值**部分。一旦完成，勾选**已加密**复选框并点击**添加**：
- en: "![Figure 8.23 – \uFEFFRepository variables](img/B21937_08_23.jpg)"
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.23 – 仓库变量](img/B21937_08_23.jpg)'
- en: Figure 8.23 – Repository variables
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.23 – 仓库变量
- en: Now that we have established our authentication means, either by username/app
    password or access token, let’s set up our pipe to Bitbucket Downloads.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经建立了身份验证方式，无论是通过用户名/应用密码还是访问令牌，接下来让我们设置管道以将文件上传到Bitbucket下载区。
- en: How to do it…
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The `bitbucket-upload-file` pipe is the primary means of deploying files into
    the Bitbucket Downloads area. Let’s learn how to set up that pipe:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`bitbucket-upload-file`管道是将文件部署到Bitbucket下载区的主要方式。让我们来学习如何设置这个管道：'
- en: 'If you want to authenticate using a username and app password, use the following
    code snippet:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想使用用户名和应用密码进行身份验证，请使用以下代码片段：
- en: '[PRE18]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To use the access token instead, replace `BITBUCKET_USERNAME` and `BITBUCKET_APP_PASSWORD`
    with `BITBUCKET_ACCESS_TOKEN`. This is illustrated in the following code snippet:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果改用访问令牌，请将 `BITBUCKET_USERNAME` 和 `BITBUCKET_APP_PASSWORD` 替换为 `BITBUCKET_ACCESS_TOKEN`。以下代码片段展示了这一点：
- en: '[PRE19]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `FILENAME` pipe variable can specify multiple files by invoking wildcards.
    Note that the limit is 10 files. The following code shows an example of uploading
    all `.``txt` files:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FILENAME` 管道变量可以通过调用通配符来指定多个文件。注意，限制为 10 个文件。以下代码展示了上传所有 `.txt` 文件的示例：'
- en: '[PRE20]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Other optional pipe variables allow you to specify another account and repository
    where the file will be uploaded. `ACCOUNT` and `REPOSITORY` are illustrated in
    the following code snippet:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其他可选的管道变量允许你指定另一个帐户和仓库来上传文件。`ACCOUNT` 和 `REPOSITORY` 在以下代码片段中展示：
- en: '[PRE21]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: With that, we’ve learned how to push files to the Bitbucket Downloads area for
    retrieval. Now, let’s learn how to send build artifacts to target servers.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经学会了如何将文件推送到 Bitbucket 下载区以便取回。现在，让我们学习如何将构建产物发送到目标服务器。
- en: Deploying artifacts using SCP
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SCP 部署构建产物
- en: '**SCP** is a means of transferring files between two host computers. This protocol
    uses SSH as a foundation to securely move files from one computer to another.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '**SCP** 是在两台主机之间传输文件的一种方式。该协议使用 SSH 作为基础，安全地将文件从一台计算机移动到另一台计算机。'
- en: Let’s learn how to transfer a build artifact from Bitbucket Cloud to the remote
    host using SCP.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何使用 SCP 将构建产物从 Bitbucket Cloud 传输到远程主机。
- en: Getting ready
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Because the foundation of SCP is SSH, we need to prepare an SSH key and other
    configurations related to SSH on both Bitbucket and the remote host. Let’s take
    a look at the necessary steps:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 SCP 的基础是 SSH，我们需要准备一个 SSH 密钥，并在 Bitbucket 和远程主机上配置与 SSH 相关的其他设置。让我们看一下所需的步骤：
- en: 'We defined a repository SSH key in the *Getting ready* section of the *Pushing
    artifacts into the Bitbucket repository* recipe. We can use this key for transfer
    to the remote host by copying the public key and placing it in the `~/.ssh/authorized_keys`
    file. If you have SSH access to the remote host, run the following command from
    the machine where you generated the key pair. This mandates that the user performing
    the operation will be you:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在**推送构建产物到 Bitbucket 仓库**这一食谱的*准备工作*部分定义了一个仓库 SSH 密钥。我们可以通过复制公钥并将其放入 `~/.ssh/authorized_keys`
    文件中，使用该密钥进行远程主机的传输。如果你有远程主机的 SSH 访问权限，可以在生成密钥对的机器上运行以下命令。这确保执行此操作的用户是你：
- en: '[PRE22]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We also need to update the known hosts on Bitbucket. For the repository, this
    is located on the same screen we used to create the SSH key. From **Repository
    Settings**, select **SSH Keys**. On the **SSH Keys** screen, type in the IP address
    for the remote host and click **Fetch**.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要更新 Bitbucket 上的已知主机。对于仓库，位置与我们用来创建 SSH 密钥的屏幕相同。在**仓库设置**中，选择**SSH 密钥**。在**SSH
    密钥**屏幕上，输入远程主机的 IP 地址并点击**获取**。
- en: "![Figure 8.24 – \uFEFFAdding a known remote host](img/B21937_08_24.jpg)"
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.24 – 添加已知远程主机](img/B21937_08_24.jpg)'
- en: Figure 8.24 – Adding a known remote host
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.24 – 添加已知远程主机
- en: Configure your remote host so that it allows SCP/SSH access on your desired
    port (`22` is the default) and allows access using SSH keys. This step is left
    for you as an exercise because of the variety of systems and configurations that
    are available.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置你的远程主机，允许在所需端口（默认是`22`）上进行 SCP/SSH 访问，并允许使用 SSH 密钥进行访问。由于存在多种系统和配置，这一步骤留给你作为练习。
- en: Once we have the necessary configurations, it’s time to configure the `bitbucket-pipelines.yml`
    file.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们拥有必要的配置，就可以配置 `bitbucket-pipelines.yml` 文件了。
- en: How to do it...
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Now that we’ve configured the SSH keys both on Bitbucket Cloud and the remote
    host, we can set up Bitbucket Pipelines to make the file transfer process a deployment:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经在 Bitbucket Cloud 和远程主机上配置了 SSH 密钥，接下来可以设置 Bitbucket Pipelines，将文件传输过程变成一个部署过程：
- en: 'Add the following code snippet to the `script` section of your `bitbucket-pipelines.yml`
    file. The necessary pipe variables include the user’s name for the remote host,
    the remote host name, the path on the remote host to deploy files to, and the
    local path where the build artifacts are located:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码片段添加到 `bitbucket-pipelines.yml` 文件的 `script` 部分。所需的管道变量包括远程主机的用户名、远程主机名称、远程主机上部署文件的路径，以及构建产物所在的本地路径：
- en: '[PRE23]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You can also add options using the `EXTRA_ARGS` pipe variable. An example is
    shown in the following code snippet:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以使用 `EXTRA_ARGS` 管道变量添加选项。以下代码片段展示了一个示例：
- en: '[PRE24]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `SSH_KEY` pipe variable allows you to define an alternate SSH key. This
    should be a base64-encoded private key, saved as a secured Bitbucket variable.
    The following code snippet shows the use of an alternate SSH key:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SSH_KEY`管道变量允许你定义一个替代的SSH密钥。它应该是一个base64编码的私钥，保存为安全的Bitbucket变量。以下代码片段展示了如何使用替代SSH密钥：'
- en: '[PRE25]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: With that, we’ve deployed to target environments using Bitbucket Pipelines.
    So far, the target environments are physical servers or virtual machines. Next,
    we’ll learn how to deploy to public cloud environments.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，我们已经通过Bitbucket Pipelines部署到了目标环境。目前，目标环境是物理服务器或虚拟机。接下来，我们将学习如何部署到公共云环境。
- en: Deploying artifacts into AWS S3 buckets
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署构建产物到AWS S3存储桶
- en: In this recipe, we’re going to look at deploying to AWS. Bitbucket Pipelines
    has a variety of pipes that can deploy to specific AWS component services, depending
    on the type of build artifact.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看看如何部署到AWS。根据构建产物的类型，Bitbucket Pipelines有多种管道可以部署到特定的AWS组件服务。
- en: Let’s look at what’s involved in deploying our build artifact into an AWS S3
    bucket. This is a typical use case of deployment using Bitbucket Pipelines.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看将构建产物部署到AWS S3存储桶中需要涉及的内容。这是使用Bitbucket Pipelines进行部署的典型用例。
- en: Getting ready
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'When setting up the pipe to deploy to an AWS S3 bucket, the only thing you
    need to do is set up the following variables:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置用于部署到AWS S3存储桶的管道时，你需要做的唯一事情是设置以下变量：
- en: '`AWS_ACCESS_KEY_ID`: Your AWS access key.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AWS_ACCESS_KEY_ID`：你的AWS访问密钥ID。'
- en: '`AWS_SECRET_ACCESS_KEY`: Your AWS secret access key. This should be saved as
    a secured variable.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AWS_SECRET_ACCESS_KEY`：你的AWS密钥访问密钥。它应该作为一个安全变量保存。'
- en: '`AWS_DEFAULT_REGION`: The default AWS region of your resource.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AWS_DEFAULT_REGION`：资源的默认AWS区域。'
- en: Now that these have been defined, let’s look at setting up the pipe.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这些已经定义了，让我们来看一下如何设置管道。
- en: How to do it…
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'At this point, we need to add our pipe configuration to the `script` section
    of our `bitbucket-pipelines.yml` file. Let’s take a closer look:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们需要将管道配置添加到`bitbucket-pipelines.yml`文件的`script`部分。让我们更详细地看一下：
- en: 'Add the following code snippet to the `script` section of the `bitbucket-pipelines.yml`
    file. This will contain the variables that you set in the *Getting ready* section
    incorporated into the `script` section. Here, `S3_BUCKET` defines the destination
    bucket and `LOCAL_PATH` defines the location of the build artifact:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码片段添加到`bitbucket-pipelines.yml`文件的`script`部分。这将包含你在*准备工作*部分设置的变量，并将其纳入`script`部分。这里，`S3_BUCKET`定义了目标存储桶，`LOCAL_PATH`定义了构建产物的位置：
- en: '[PRE26]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can also define a folder inside the bucket by appending the path to the
    bucket defined in `S3_BUCKET`. This is illustrated in the following code snippet:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以通过附加路径到在`S3_BUCKET`中定义的存储桶，来定义存储桶中的文件夹。以下代码片段演示了这一点：
- en: '[PRE27]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: With that, you’ve seen how easy it is to connect Bitbucket Pipelines so that
    you can deploy build artifacts to AWS. Let’s examine doing the same thing for
    Google Cloud.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些，你已经了解了如何轻松地将Bitbucket Pipelines连接到AWS，从而部署构建产物。接下来，让我们看看如何在Google Cloud上做同样的事情。
- en: Deploying artifacts to Google Cloud
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署构建产物到Google Cloud
- en: 'Bitbucket Pipelines can make deployments to Google services through the use
    of pipes that integrate with these services. The following is the current list
    of pipes that connect with Google services:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: Bitbucket Pipelines可以通过集成与这些服务的管道，向Google服务进行部署。以下是与Google服务连接的当前管道列表：
- en: Firebase deploy
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase部署
- en: Google App Engine Deploy
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google App Engine部署
- en: Google Cloud Storage Deploy
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud Storage部署
- en: '**Google Artifactory Registration** (**GAR**) push image'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Artifactory注册**（**GAR**）推送镜像'
- en: Google Kubernetes Engine kubectl run
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Kubernetes Engine kubectl run
- en: Let’s take a closer look at deploying build artifacts using the Google Cloud
    Storage Deploy pipe.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看一下如何使用Google Cloud Storage部署管道来部署构建产物。
- en: How to do it…
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We can deploy our artifacts to Google Cloud Storage by performing the following
    steps:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过执行以下步骤将构建产物部署到Google Cloud Storage：
- en: 'In the `script` portion of the `step` area where you intend to deploy to Google
    Cloud Storage, copy and paste the `pipe` definition. The definition of the Google
    Cloud Storage Deploy pipe is shown in the following code snippet:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你打算部署到Google Cloud Storage的`step`部分的`script`区域中，复制并粘贴`pipe`定义。Google Cloud
    Storage部署管道的定义如下所示：
- en: '[PRE28]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add the pipe to the `script` section of your `bitbucket-pipelines.yml` file.
    An example with only the mandatory pipe variables provided is shown in the following
    code snippet:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If needed, continue defining the deployment operation by adding other variables.
    The following code snippet shows a pipe with more variables filled out:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We have just seen an example of integrating a deployment to Google Cloud resources
    using pipes. Now, let’s look at an example of integration with Microsoft Azure.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: Deploying artifacts to Microsoft Azure
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bitbucket Pipelines can perform deployments to Azure services through the use
    of pipes that integrate with these services. The following is the current list
    of pipes that connect with Microsoft Azure:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: Azure CLI
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Container Apps Deploy
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure ACR push image
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Functions Deploy
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Kubernetes Service Deploy
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Kubernetes Service Helm Deploy
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Storage Deploy
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Web Apps Containers Deploy
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Web Apps Deploy
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s see what’s needed to use the Azure Functions Deploy pipe as an example
    of deployment to Microsoft Azure.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we can use the Azure Functions Deploy pipe to deploy to Microsoft Azure,
    we need to establish our Azure credentials. Follow these steps to do so:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing the Azure CLI on your local machine or using the Azure Cloud
    Shell, create an Azure secure principal by typing the following command:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The preceding command will return the following output in JSON format:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Save the output as repository variables. For instance, you can define the following
    output as variables in this way:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`appId`: `AZURE_ID`'
  id: totrans-322
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password`: `AZURE_PASSWORD` (secured)'
  id: totrans-323
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tenant`: `AZURE_TENANT`'
  id: totrans-324
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have our secure principal, we can connect to Azure using Bitbucket
    Pipelines. Let’s learn how to do that.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Azure Functions Deploy takes serverless logic implementations written on your
    favorite Microsoft development tools, such as Visual Studio, and packages them
    to be executed on-demand in Azure. Part of the development process can include
    deployment through Bitbucket Pipelines. Let’s learn how to deploy functions from
    the `bitbucket-pipelines.yml` file:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code snippet to the `script` section of `bitbucket-pipelines.yml`.
    The required parameters include the attributes for the secure principal, the function
    name, as found in Azure, and the name of the ZIP file that contains the function
    to be deployed on Azure:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Continue adding the necessary variables to the pipe definition. A completed
    example can be seen here:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: With that, we’ve deployed a serverless function from our local system to Azure.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: One aspect of deployment is **Infrastructure as Code** (**IaC**) or the use
    of text-based configurations to dynamically create needed resources. A popular
    tool for doing this is Ansible. In the next recipe, we’ll learn how to use Bitbucket
    Pipelines to execute Ansible playbooks and deploy resources.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: Using Ansible in the deployment stage
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible is a standard tool for performing IaC. With Ansible, you can configure
    physical or virtual servers and perform configuration tasks such as installing
    or upgrading software, setting the necessary parameters, and starting application
    services.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 是执行基础设施即代码（IaC）的标准工具。通过 Ansible，你可以配置物理或虚拟服务器，并执行配置任务，如安装或升级软件、设置必要的参数、启动应用服务等。
- en: Ansible is available in its original CLI as well as an integrated graphical
    user interface for dedicated Ansible application servers called **Ansible Tower**.
    We will look at automating deployment to both interfaces.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 既可以通过原始的命令行接口（CLI）使用，也可以通过一个名为 **Ansible Tower** 的集成图形用户界面（GUI）为专用的
    Ansible 应用服务器提供服务。我们将学习如何自动化部署到这两个接口。
- en: Getting ready
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To execute Ansible, the following programs must be installed on the runners
    you plan to use to execute the Bitbucket pipeline:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行 Ansible，必须在你计划用于执行 Bitbucket 流水线的运行器上安装以下程序：
- en: '`python`'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python`'
- en: '`pip`'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pip`'
- en: Once they’re installed, we can add Ansible commands to our Bitbucket pipeline.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦它们安装完成，我们可以将 Ansible 命令添加到 Bitbucket 流水线中。
- en: How to do it…
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The original Ansible application is built on Python and accepts two files as
    input. Both of these files are text files in YAML format:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 原始的 Ansible 应用程序基于 Python 构建，接受两个输入文件。这两个文件都是 YAML 格式的文本文件：
- en: '`playbook`: This file includes the commands that Ansible runs'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`playbook`：该文件包含 Ansible 执行的命令'
- en: '`Inventory`: This file details the machines and their environments that Ansible
    applies the playbook against'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Inventory`：此文件详细列出了 Ansible 将 playbook 应用到的机器及其环境'
- en: 'Let’s learn how to incorporate this in our `bitbucket-pipelines.yml` file:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何在 `bitbucket-pipelines.yml` 文件中整合这一操作：
- en: 'Add the following line to the `script` section of the `bitbucket-pipelines.yml`
    file. This will install Ansible:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到 `bitbucket-pipelines.yml` 文件的 `script` 部分。这将安装 Ansible：
- en: '[PRE35]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Once installed, move inside the directory where the playbooks for Ansible reside:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，进入 Ansible playbook 所在的目录：
- en: '[PRE36]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '- ansible-playbook -i inventory playbook.yaml'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- ansible-playbook -i inventory playbook.yaml'
- en: '[PRE37]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The script should look as follows:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脚本应如下所示：
- en: '[PRE38]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In this recipe, we looked at how to deploy a configuration from Bitbucket Pipelines
    using the community version of Ansible. The full version from Red Hat features
    dedicated infrastructure for running the Ansible application that’s controlled
    by a GUI called Ansible Tower. Next, we’ll learn how to deploy to Ansible Tower
    using Bitbucket Pipelines.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们学习了如何使用社区版 Ansible 从 Bitbucket Pipelines 部署配置。来自 Red Hat 的完整版提供了一个专用的基础设施，用于运行由名为
    Ansible Tower 的 GUI 控制的 Ansible 应用程序。接下来，我们将学习如何使用 Bitbucket Pipelines 部署到 Ansible
    Tower。
- en: There’s more…
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: 'Although the primary means of controlling Ansible Tower jobs is through a GUI,
    there is a CLI called `tower-cli` that allows you to script Ansible Tower jobs.
    Let’s look at `tower-cli` in action:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管控制 Ansible Tower 作业的主要方式是通过图形用户界面（GUI），但也有一个名为 `tower-cli` 的命令行工具，它允许你脚本化
    Ansible Tower 作业。让我们来看一下 `tower-cli` 的实际操作：
- en: 'Install `tower-cli` in your build environment. You may need to specify an image
    that has Python, including `pip`. Here, `pip` allows you to install `tower-cli`:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的构建环境中安装 `tower-cli`。你可能需要指定一个包含 Python 和 `pip` 的镜像。在这里，`pip` 允许你安装 `tower-cli`：
- en: '[PRE39]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Set up the required environment variables. For `tower-cli`, these are as follows:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置所需的环境变量。对于 `tower-cli`，这些变量如下：
- en: '`host`: Tower host'
  id: totrans-361
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host`：Tower 主机'
- en: '`username`: Tower username'
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`username`：Tower 用户名'
- en: '`password`: Tower user password (saved as a secure Bitbucket variable)'
  id: totrans-363
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password`：Tower 用户密码（保存为安全的 Bitbucket 变量）'
- en: '`ID`: ID of the Tower job template to launch'
  id: totrans-364
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ID`：要启动的 Tower 作业模板的 ID'
- en: 'Add the following lines to configure the environment variables and run the
    Ansible job:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下几行来配置环境变量并运行 Ansible 作业：
- en: '[PRE40]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: With that, we’ve triggered an Ansible job located in Ansible Tower from Bitbucket
    Pipelines.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们就触发了位于 Ansible Tower 中的 Ansible 作业，从 Bitbucket Pipelines 启动。
- en: See also
  id: totrans-368
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'The following documentation for Ansible provides guidance on creating correct
    Ansible jobs:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Ansible 文档，提供了创建正确 Ansible 作业的指导：
- en: '[https://access.redhat.com/documentation/en-us/red_hat_ansible_automation_platform/2.4](https://access.redhat.com/documentation/en-us/red_hat_ansible_automation_platform/2.4)'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://access.redhat.com/documentation/en-us/red_hat_ansible_automation_platform/2.4](https://access.redhat.com/documentation/en-us/red_hat_ansible_automation_platform/2.4)'
- en: '[https://docs.ansible.com/ansible/latest/index.html](https://docs.ansible.com/ansible/latest/index.html)'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible/latest/index.html](https://docs.ansible.com/ansible/latest/index.html)'
- en: Using Terraform in the deployment stage
  id: totrans-372
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在部署阶段使用 Terraform
- en: Terraform is another tool that provides IaC capabilities. Its popularity comes
    from the fact that it is flexible for outlining instance creation of cloud resources
    and then implementing those resources to specific cloud platforms using providers
    that specify the implementation details.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 是另一种提供 IaC 功能的工具。它的流行之处在于它能够灵活地概述云资源的实例创建，然后通过指定实施细节的提供程序将这些资源实施到特定的云平台。
- en: Let’s learn how to deploy to Terraform from Bitbucket Pipelines.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何从 Bitbucket Pipelines 部署到 Terraform。
- en: Getting ready
  id: totrans-375
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Terraform describes the configuration it will perform in three files, all of
    which need to be in your Bitbucket repository:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 在三个文件中描述了它将执行的配置，这些文件都需要在您的 Bitbucket 仓库中：
- en: '`main.tf`'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.tf`'
- en: '`variables.tf`'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`variables.tf`'
- en: '`provider.tf`'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`provider.tf`'
- en: In addition, any credentials needed by Terraform for configuring the backend
    platforms, such as AWS or Google Cloud, should be stored as Bitbucket variables,
    and you should allocate them as secure if necessary.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Terraform 配置后端平台所需的任何凭据，例如 AWS 或 Google Cloud，应该存储为 Bitbucket 变量，并在必要时将其设置为安全。
- en: With these in place, let’s set up our deployment.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些步骤完成后，让我们设置我们的部署。
- en: How to do it…
  id: totrans-382
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'There are several steps we must take to deploy using Terraform, encapsulated
    in three commands. Let’s look at the Terraform commands we need to use:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须采取几个步骤才能使用 Terraform 部署，封装在三个命令中。让我们看一下我们需要使用的 Terraform 命令：
- en: 'For the step that defines deployment, use the Terraform Docker image. We’ll
    cover using Docker images in Bitbucket Pipeline steps in more detail in [*Chapter
    9*](B21937_09.xhtml#_idTextAnchor185):'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于定义部署的步骤，使用 Terraform Docker 镜像。我们将在[*第9章*](B21937_09.xhtml#_idTextAnchor185)中更详细地介绍如何在
    Bitbucket Pipeline 步骤中使用 Docker 镜像：
- en: '[PRE41]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In the `script` section of the `bitbucket-pipelines.yml` file, enter the following
    command to initialize Terraform:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `bitbucket-pipelines.yml` 文件的 `script` 部分中，输入以下命令来初始化 Terraform：
- en: '[PRE42]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Add the following line to perform validation. This may not be required:'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下命令以执行验证。这可能不是必需的：
- en: '[PRE43]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '- terraform plan -out=plantf'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- terraform plan -out=plantf'
- en: '[PRE44]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Add the following line to apply the plan and run Terraform:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下命令以应用计划并运行 Terraform：
- en: '[PRE45]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '- step:'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- step:'
- en: 'image: hashicorp/terraform:full'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'image: hashicorp/terraform:full'
- en: 'script:'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'script:'
- en: '- terraform init'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- terraform init'
- en: '- terraform validate'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- terraform validate'
- en: '- terraform plan -out=plantf'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- terraform plan -out=plantf'
- en: '- terraform apply plantf'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- terraform apply plantf'
- en: '[PRE46]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: With that, we performed a deployment in Bitbucket Pipelines where we invoked
    Terraform to create our instances.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些步骤，我们在 Bitbucket Pipelines 中执行了部署，并调用 Terraform 创建了我们的实例。
- en: See also
  id: totrans-403
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The following resource is beneficial for understanding Terraform – [https://developer.hashicorp.com/terraform/docs](https://developer.hashicorp.com/terraform/docs).
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 以下资源有助于理解 Terraform – [https://developer.hashicorp.com/terraform/docs](https://developer.hashicorp.com/terraform/docs)。
