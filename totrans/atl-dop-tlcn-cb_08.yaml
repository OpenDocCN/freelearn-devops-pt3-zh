- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying with Bitbucket Pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the course of understanding Bitbucket Pipelines, we started with the concept
    of `bitbucket-pipelines.yml` file.
  prefs: []
  type: TYPE_NORMAL
- en: We are now at the deployment stage, where we must take the build we created
    previously in Bitbucket Pipelines and install it in one of our environments, from
    testing to staging, and finally, to production. If we extend Bitbucket Pipelines
    so that it deploys automatically, we must consider **continuous deployment**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll look at what additions are required in `bitbucket-``pipelines``.yml`
    to perform continuous deployment. To do so, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring deployments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pushing artifacts into the Bitbucket repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pushing artifacts into artifact repository tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying artifacts to Bitbucket Downloads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying artifacts using **Secure Copy** **Protocol** (**SCP**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying artifacts into AWS S3 buckets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying artifacts to AWS Lambda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying artifacts to Google Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying artifacts to Microsoft Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Ansible in the deployment stage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Terraform in the deployment stage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because we are still working with Bitbucket Pipelines, we require a subscription
    to Bitbucket Cloud. This will also be required for recipes where artifacts end
    up in the repository or Bitbucket Downloads.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying artifacts to cloud-based environments such as AWS, Google Cloud, and
    Microsoft Azure requires accounts with privileges to the services being used as
    targets in this chapter’s recipes.
  prefs: []
  type: TYPE_NORMAL
- en: The sample code for this chapter can be found in the `Chapter8` folder of this
    book’s GitHub repository [https://github.com/PacktPublishing/Atlassian-DevOps-Toolchain-Cookbook/tree/main/Chapter8](https://github.com/PacktPublishing/Atlassian-DevOps-Toolchain-Cookbook/tree/main/Chapter8)
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s explore how to ready our builds for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring deployments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While Bitbucket Pipelines can deploy to many different platforms, the characteristics
    of a deployment are all the same. This can be advantageous when you’re deploying
    to a test environment, where you may want to define some runtime testing or package
    testing, versus the production environment, where the testing has been exhausted
    and it’s time to release new functionality to the end user.
  prefs: []
  type: TYPE_NORMAL
- en: With this in mind, let’s take a look at what the commonalities are for deployments
    and how to define them uniformly. After, we’ll learn how to configure deployments
    for different environments seen in a typical DevSecOps process.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before setting up our pipeline, we need to define the environments for deployment.
    You can use the default environments, which have the following pre-definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: Test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Staging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can also change the names of the environments or configure environment-specific
    variables for deployment. To set the configurations for your environments, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In Bitbucket, go to the repository of interest and select **Repository settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Selecting Repository Settings](img/B21937_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Selecting Repository Settings
  prefs: []
  type: TYPE_NORMAL
- en: In the **Pipelines** section, select the **Deployments** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Selecting Deployments](img/B21937_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Selecting Deployments
  prefs: []
  type: TYPE_NORMAL
- en: The list of default environments will appear, divided into **Test**, **Staging**,
    and **Production**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 8.3 – \uFEFFDeployment environments](img/B21937_08_03.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – Deployment environments
  prefs: []
  type: TYPE_NORMAL
- en: To change an existing environment, click on the band that represents the environment.
    It will expand, showing options you can use to change the name and a section for
    environment-specific variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 8.4 – \uFEFFConfiguration options for an environment](img/B21937_08_04.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – Configuration options for an environment
  prefs: []
  type: TYPE_NORMAL
- en: To change the name, overwrite the name in the **Environment name:** field. To
    add a variable, fill in the **Name** and **Value** fields. If the variable is
    meant to contain a secret such as a password or key, make sure that the **Secured**
    checkbox is selected. Finish by clicking the **Add** button.
  prefs: []
  type: TYPE_NORMAL
- en: To add a new environment, go to the section that defines the environment type
    (**Test**, **Staging**, or **Production**) and select the **add** **environment**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the name of the new environment and select the **Staging** **environments**
    checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.5 – Adding an environment](img/B21937_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – Adding an environment
  prefs: []
  type: TYPE_NORMAL
- en: On the free plan of Bitbucket, you can define 10 environments. On the premium
    version of Bitbucket, this limit is increased to 100\. The premium version of
    Bitbucket allows you to restrict which branches can deploy to that environment
    and whether admins alone can perform any deployment on that environment.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve configured our environments, it’s time to configure the deployments.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To define a deployment, we must introduce new keywords and sections to our `bitbucket-pipelines.yml`
    file. We’ll apply these keywords and sections to stages or steps in our pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Once we’ve done this, we can define separate deployments, depending on which
    branch is receiving merges from lower branches. This allows us to continually
    deploy and test until the final pull request to a main branch, where deployment
    may happen on the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at performing these deployments.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a deployment in bitbucket-pipelines.yml
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The deployment instructions are identified in a stage or step within the `bitbucket-pipelines.yml`
    file with the `deployment:` keyword, along with the environment that is the target
    for the deployment step or steps. Let’s learn how to use the `deployment:` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `deployment:` keyword is used within a step to identify the environment
    that is being deployed. An example is shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can define multiple steps for deployment, with each step noting the environment.
    However, Bitbucket requires that the environment types fall within the following
    order:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Test environment.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Staging environments
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Production environments
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If several steps are required for a deployment, the `deployment:` keyword can
    be used within the definition of a stage to identify the target environment. An
    example of this is shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you want your deployment step to be triggered manually, add the `trigger:
    manual` keyword within your deployment step. This can be seen in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once we’ve defined deployment steps or stages in our `bitbucket-pipelines.yml`
    file, we can monitor the progress and outcome of our deployments in Bitbucket.
    Let’s examine the process for doing so.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring deployments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you’ve executed a deployment, you can track its progress or manually execute
    deployments in the deployment dashboard. Let’s examine the features of the deployment
    dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: As we saw in the previous recipe, to reach the deployment dashboard, select
    **Deployments** from the sidebar at the repository level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The deployment dashboard will appear to the right of the sidebar. It is divided
    into the environments defined in the `bitbucket-pipelines.yml` file. Within this
    environment, there will be a card that exhibits the last successful deployment
    to that environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.6 – Deployments dashboard](img/B21937_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – Deployments dashboard
  prefs: []
  type: TYPE_NORMAL
- en: Click on the card in an environment to view the details of the deployment for
    that environment. The details will include the commit that caused the execution
    of `bitbucket-pipelines.yml`, a note on the differences between the existing version
    and the commit, and the push to the associated environment, including deployment
    history. If Jira and Bitbucket are connected, as we discussed in the *Connecting
    Bitbucket* recipe in [*Chapter 1*](B21937_01.xhtml#_idTextAnchor019), you will
    also see the Jira issue associated with the commit. The following screenshot shows
    a deployment to the **Test** environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.7 – Deployment to the Test environment](img/B21937_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 – Deployment to the Test environment
  prefs: []
  type: TYPE_NORMAL
- en: If a deployment is defined to be manually triggered, you will see a **Promote**
    button on the last successful deployment to the lower environment. Click **Promote**
    to execute a deployment to the higher environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.8 – Promoting a manual deployment to production](img/B21937_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.8 – Promoting a manual deployment to production
  prefs: []
  type: TYPE_NORMAL
- en: 'You can redeploy the last successful deployment from the deployment dashboard
    if a deployment fails. The ability to redeploy requires the following conditions
    to be met:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An initial deployment step in the pipeline was executed successfully
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment permissions are set to allow the redeployment of the step (please
    note that this is only available in the premium plan of Bitbucket)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Artifacts that are used for deployment can’t expire
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once a deployment to a specific environment is engaged, any subsequent deployments
    from other pipelines to that environment will be paused thanks to **concurrency
    control**, which limits pipeline executions to a single deployment in a given
    environment. When the original in-progress deployment is complete, you have the
    following options for paused deployments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rerun the pipeline from the beginning
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Resume the pipeline from when it was paused
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we understand the mechanics of deployment, we can allow deployments
    to specific environments if a pull request to its associated branch succeeds.
    Let’s look at how that’s done.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying from a pull request or branch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As you may recall from the *Conditional execution of pipelines* recipe from
    [*Chapter 6*](B21937_06.xhtml#_idTextAnchor103), you can set up your pipelines
    to execute different instructions based on which branch is receiving the new commit
    or if a pull request is being requested. Let’s learn how these different conditions
    can be established:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A branch pipeline specifies actions to be performed when a push occurs on a
    specific branch. You can use the `branches:` keyword to describe what actions
    occur on a branch pipeline. These actions are grouped under the branch name. The
    following code snippet details various actions, including deployment for other
    branches, when using the `default:` keyword and separate actions for the staging
    branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A pull request pipeline allows you to specify the actions when a pull request
    is created for a specific branch. These actions are defined on branches underneath
    the `pull-requests:` keyword. Let’s look at actions that are completed when a
    pull request occurs on the staging branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With that, we’ve learned how to easily test and deploy when changes occur on
    feature branches. Automated deployment to production is possible when a pull request
    from staging to the production branch is created.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve seen how to configure Bitbucket Pipelines for deployment, we
    will look at examples of how to perform specific deployments depending on the
    target. First, we’ll learn how to deploy into the Bitbucket git repository itself.
  prefs: []
  type: TYPE_NORMAL
- en: Pushing artifacts into the Bitbucket repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Part of the deployment process may be to take build artifacts and place them
    in the correct repository. The most convenient repository to store build artifacts
    may be Bitbucket itself. This is often discouraged because build artifacts typically
    consume a large amount of storage and may cause performance issues with the underlying
    git tool. Nevertheless, we offer this recipe if no alternatives exist.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s learn how to push build artifacts back into a Bitbucket repository as
    part of deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although the recommended way to push back content to the git repository is using
    HTTP, there may be times when the only way to do this is by using SSH. To do that,
    you’ll need to set up your credentials. This is true if you have branch permissions
    enabled on your repository or want to set up an automated account for these actions.
    An important consideration is that configuring these accounts removes limits on
    what they can access.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s learn how to create accounts with different authentication methods.
  prefs: []
  type: TYPE_NORMAL
- en: Using OAuth for authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use OAuth as the authentication method for accessing the git repository.
    This involves creating an account and giving that account write access to the
    main or master branch through branch permissions. Let’s learn how to set up an
    account with OAuth:'
  prefs: []
  type: TYPE_NORMAL
- en: On your **Workspace** page in Bitbucket, click on the **Settings** cog and select
    **Workspace settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.9 – Selecting Workspace settings](img/B21937_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.9 – Selecting Workspace settings
  prefs: []
  type: TYPE_NORMAL
- en: In the sidebar for **Workspace settings**, find the **APPS AND FEATURES** section
    and select **OAuth consumers**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.10 – Selecting OAuth consumers](img/B21937_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.10 – Selecting OAuth consumers
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **OAuth consumers** page, click the **Add** **consumer** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.11 – Add consumer](img/B21937_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 – Add consumer
  prefs: []
  type: TYPE_NORMAL
- en: 'On the subsequent page, fill in the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set **Callback URL** to [https://bitbucket.org](https://bitbucket.org
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: Make sure **This is a private consumer** is checked
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For permissions, ensure that both **Read** and **Write** permissions are checked
    under **Repositories**. Click the **Save** button to save the OAuth consumer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Return to the consumer page and find the new consumer you created. Record the
    key and secret as secure pipeline variables. Use `CLIENT_ID` for the key and `CLIENT_SECRET`
    for the secret:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.12 – OAuth consumer key and secret](img/B21937_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.12 – OAuth consumer key and secret
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code snippet to the `script` section of the `bitbucket-pipelines.yml`
    file before the git commands to make the changes and commit to the git repository.
    We assume that your runner has the `curl` and `jq` utilities installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With that, you’ve configured an OAuth consumer and allowed it to make git commits
    from Bitbucket Pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: We can also set up SSH keys using the Bitbucket UI. Let’s examine how to do
    that.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an SSH key pair for Bitbucket Pipelines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For a given repository, you can create an SSH key pair and save the public
    key in Bitbucket so that it can be deployed back to the git repository using SSH.
    Let’s see how that’s done:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the repository page, select **Repository settings** in the sidebar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Pipelines** section of the **Repository settings** sidebar, select
    **SSH Keys**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Selecting SSH Keys](img/B21937_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.13 – Selecting SSH Keys
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **SSH Keys** page, select **Generate keys**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Generating keys](img/B21937_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.14 – Generating keys
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the resulting public key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.15 – Copying the public key](img/B21937_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.15 – Copying the public key
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you will need to add the public key to your personal Bitbucket
    settings. To start, select the **Settings** cog and click **Personal** **Bitbucket
    settings**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **SECURITY** section of the **Personal settings** sidebar, select **SSH
    keys**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.16 – Selecting SSH keys](img/B21937_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.16 – Selecting SSH keys
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Add key** on the **SSH** **keys** page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.17 – Add key](img/B21937_08_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.17 – Add key
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Add SSH key** modal, paste the public key and select **Add key**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.18 – Pasting and adding the public key](img/B21937_08_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.18 – Pasting and adding the public key
  prefs: []
  type: TYPE_NORMAL
- en: 'The following line needs to be added to the `script` section of your `bitbucket-pipelines.yml`
    file before the git commands so that you can save and commit changes back to the
    git repository. This line configures git to use SSH. `BITBUCKET_GIT_SSH_ORIGIN`
    is a default environment variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With that, you’ve configured SSH keys to authenticate when you’re pushing a
    commit back to your git repository.
  prefs: []
  type: TYPE_NORMAL
- en: One final authentication method involves creating an application password and
    passing that as a secure variable. Let’s examine how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an application password
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Application passwords are personal secrets that you can use securely in Bitbucket
    for automated functions. Let’s look at how to create an application password:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Settings** cog and select **Personal** **Bitbucket settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Access Management** section of the **Personal settings** sidebar, select
    **App passwords**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the **App passwords** page, select **Create** **app password**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.19 – Creating an app password](img/B21937_08_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.19 – Creating an app password
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Add app password** page, give the app password a name and make sure
    **Read** and **Write** permissions are selected for the **Repositories** section.
    Once you’ve done this, click **Create**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The app password will appear on a modal. Copy the value and make sure it is
    in a safe location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.20 – Generated app password](img/B21937_08_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.20 – Generated app password
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of a safe location is a secured variable. Set the app password as
    a **secured repository variable** or **secured** **workplace variable**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.21 – Adding the app password as a secured repository variable](img/B21937_08_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.21 – Adding the app password as a secured repository variable
  prefs: []
  type: TYPE_NORMAL
- en: 'The following line needs to be added to the `script` section of your `bitbucket-pipelines.yml`
    file before the git commands so that you can save and commit changes back to the
    git repository. This line configures the git remote URL to use the included username
    and app password for authentication:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With that, we’ve learned how to use several authentication methods when committing
    changes back to a git repository. Now, let’s look at what needs to be added to
    do the actual commits.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you’re using the preconfigured HTTP git origin for pushing changes back
    to the git repository or have set up authentication using one of the preceding
    methods, the only thing you need to do is define the script steps for performing
    the actual git commits and pushes. Let’s see how that’s done:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To commit changes, add the `git add`, `git commit`, and `git push` commands
    to the `script` section of your `bitbucket-pipelines.yml` file. Note that regarding
    the git commit message, you can add `[skip ci]` to avoid an infinite loop of pipeline
    executions. An example is shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you’re using tags, you can add the `git tag` command to create the new tag.
    The code snippet will resemble the following. In this example, the tag will include
    the build number since we’re referring to the `BITBUCKET_BUILD_NUMBER` predefined
    variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have now seen how to use the git repository as a repository for build artifacts.
    Admittedly, this method is cumbersome when there are dedicated artifact repository
    tools available such as Artifactory from JFrog and Nexus from Sonatype. In the
    next recipe, we’ll learn how to deploy our build artifacts to those tools for
    storage and tracking purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Pushing artifacts into artifact repository tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Artifact repository tools such as Artifactory and Nexus allow for configuration
    management, a discipline where the build artifacts that emerge from a continuous
    integration pipeline are stored and tracked against the environments where they
    are applied.
  prefs: []
  type: TYPE_NORMAL
- en: Elementary builds that result in pushes to Artifactory or Nexus can rely on
    Bitbucket Pipes, which allows you to easily deploy from the `bitbucket-pipelines.yml`
    file. More complex deployments involving Maven or npm won’t be covered here but
    we will include references to create those types of deployments.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using Pipes for either JFrog Artifactory or Sonatype Nexus, there are a
    few prerequisite steps that should be defined. We will examine which steps are
    needed by tool.
  prefs: []
  type: TYPE_NORMAL
- en: JFrog CLI prerequisites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The JFrog Setup CLI pipe requires connections to the JFrog Platform servers.
    Let’s look at the steps that are involved in this process:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure the runner is installed with the JFrog CLI. At the time of writing,
    this should be at version `2.17.0` or later. The following command is for macOS
    and Linux runners, assuming that `curl` is installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you’re using Windows runners, use the following command. Note that this
    is using PowerShell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the JFrog CLI to connect to your JFrog Platform servers. To set up the
    details of your JFrog Platform instances, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At this point, it may also be convenient to set up Bitbucket secure variables
    that mirror JFrog environment variables that have names starting with `JF_ENV_`
    as the key and the server token as the value. You can derive the server token
    using the following JFrog CLI command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With that, we’ve covered the preliminary setup for the JFrog CLI. Now, let’s
    examine what’s needed for Nexus.
  prefs: []
  type: TYPE_NORMAL
- en: Sonatype Nexus prerequisites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The pipe for Sonatype Nexus Publisher requires a few environment variables
    to be defined. Some variables are mandatory. The variables to be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FILENAME` (mandatory): This is the path to the file to publish.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ATTRIBUTES` (mandatory): Attributes needed by Nexus Publisher. Component attributes
    are denoted with `-C`. Asset attributes are denoted with `-A`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`USERNAME` (mandatory): Nexus username.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PASSWORD` (mandatory): Nexus password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SERVER_URL` (Mandatory): Nexus server URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`REPOSITORY`: Repository name in Nexus. The default is `maven-releases`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FORMAT`: Artifact format. The default is `maven2`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that our prerequisites are out of the way, let’s look at pushing our artifacts
    using pipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the *Connecting to Bitbucket Pipes* recipe in [*Chapter 6*](B21937_06.xhtml#_idTextAnchor103),
    we learned about pipes. Pipes serve as integration points for third-party tools
    in a Bitbucket pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we are ready to connect to either JFrog or Sonatype Nexus through
    pipes and set up deployment steps. Let’s examine how to do that for each tool.
  prefs: []
  type: TYPE_NORMAL
- en: Using the JFrog Setup CLI pipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use the JFrog Setup CLI pipe to connect to any JFrog tool on the JFrog
    Platform, including Artifactory and XRay. Let’s look at the steps involved:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to the `script` section of your `bitbucket-pipelines.yml`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the setup lines have been added, you can use any JFrog CLI commands to
    make changes. The following code snippet is an example of a build that runs several
    commands to Artifactory using JFrog CLI commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With that, we’ve learned how to connect and communicate with JFrog tools using
    pipes and JFrog CLI commands. Now, let’s look at the process for Sonatype Nexus
    Manager.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Sonatype Nexus Publisher pipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s learn how to use a pipe to connect to Sonatype Nexus Publisher:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code snippet to the `script` section of your `bitbucket-pipelines.yml`
    file. You can fill out the variables in-line or use Bitbucket variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here’s an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this point, we’ve seen how easy it is to use pipes for easy deployment. Other
    examples in subsequent recipes in this chapter will also show the ease of pipes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are links to other reference materials if you need to learn more
    about how to connect to JFrog or Sonatype Nexus:'
  prefs: []
  type: TYPE_NORMAL
- en: 'JFrog CLI documentation: [https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli](https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example of using Bitbucket Pipelines for a Maven deployment using **GNU
    Privacy Guard** (**GPG**) and **Open Source Software Repository Hosting** (**OSSRH**):
    [https://bitbucket.org/simpligility/ossrh-pipeline-demo/src/master/](https://bitbucket.org/simpligility/ossrh-pipeline-demo/src/master/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we’ll look at several examples of taking build artifacts and installing
    them on target environments. We’ll begin by looking at various upload processes
    that can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying artifacts to Bitbucket Downloads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use Bitbucket itself as a staging area for build artifacts by configuring
    the Bitbucket Downloads pipe. This allows you to push build artifacts to Bitbucket
    Downloads. We’ll examine this process in more detail in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use of the `bitbucket-upload-file` pipe requires authentication either by username
    and app password or by access token. We looked at creating app passwords in the
    *Getting ready* section of the *Pushing artifacts into the Bitbucket* *repository*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Access tokens are available at the repository level for all plans of Bitbucket,
    and they’re available at the project and workspace levels for the Premium plan
    of Bitbucket. The tokens are only scoped to the repository, project, or workspace
    for which they were created. These are for single-use functions and are revoked
    if replacement is needed. Let’s learn how to create a repository access token:'
  prefs: []
  type: TYPE_NORMAL
- en: At the repository level, select **Repository settings** in the sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Repository settings** sidebar, select **Access tokens** in the **SECURITY**
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 8.22 – \uFEFFSelecting Access tokens](img/B21937_08_22.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 8.22 – Selecting Access tokens
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Access tokens** page, select **Create Repository** **Access Token**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the modal, give the token a name and specify permissions. Bitbucket Pipelines
    requires **Read** and **Write** permissions on **Repositories**. Click **Create**
    when you’re finished:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next modal will contain the value of the token and useful applications for
    it. Save the token value by copying it and pasting it in a safe location. This
    will be the only opportunity you will have to view the token value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can place your access token as a secure repository variable. Select **Repository
    variables** in the **Repository settings** sidebar, fill in the key name for the
    token, and paste the previously copied token value into the **Value** section.
    Once you’ve done this, check the **Secured** checkbox and click **Add**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 8.23 – \uFEFFRepository variables](img/B21937_08_23.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 8.23 – Repository variables
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have established our authentication means, either by username/app
    password or access token, let’s set up our pipe to Bitbucket Downloads.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `bitbucket-upload-file` pipe is the primary means of deploying files into
    the Bitbucket Downloads area. Let’s learn how to set up that pipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to authenticate using a username and app password, use the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To use the access token instead, replace `BITBUCKET_USERNAME` and `BITBUCKET_APP_PASSWORD`
    with `BITBUCKET_ACCESS_TOKEN`. This is illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `FILENAME` pipe variable can specify multiple files by invoking wildcards.
    Note that the limit is 10 files. The following code shows an example of uploading
    all `.``txt` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Other optional pipe variables allow you to specify another account and repository
    where the file will be uploaded. `ACCOUNT` and `REPOSITORY` are illustrated in
    the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With that, we’ve learned how to push files to the Bitbucket Downloads area for
    retrieval. Now, let’s learn how to send build artifacts to target servers.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying artifacts using SCP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**SCP** is a means of transferring files between two host computers. This protocol
    uses SSH as a foundation to securely move files from one computer to another.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s learn how to transfer a build artifact from Bitbucket Cloud to the remote
    host using SCP.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Because the foundation of SCP is SSH, we need to prepare an SSH key and other
    configurations related to SSH on both Bitbucket and the remote host. Let’s take
    a look at the necessary steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We defined a repository SSH key in the *Getting ready* section of the *Pushing
    artifacts into the Bitbucket repository* recipe. We can use this key for transfer
    to the remote host by copying the public key and placing it in the `~/.ssh/authorized_keys`
    file. If you have SSH access to the remote host, run the following command from
    the machine where you generated the key pair. This mandates that the user performing
    the operation will be you:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We also need to update the known hosts on Bitbucket. For the repository, this
    is located on the same screen we used to create the SSH key. From **Repository
    Settings**, select **SSH Keys**. On the **SSH Keys** screen, type in the IP address
    for the remote host and click **Fetch**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 8.24 – \uFEFFAdding a known remote host](img/B21937_08_24.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 8.24 – Adding a known remote host
  prefs: []
  type: TYPE_NORMAL
- en: Configure your remote host so that it allows SCP/SSH access on your desired
    port (`22` is the default) and allows access using SSH keys. This step is left
    for you as an exercise because of the variety of systems and configurations that
    are available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once we have the necessary configurations, it’s time to configure the `bitbucket-pipelines.yml`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we’ve configured the SSH keys both on Bitbucket Cloud and the remote
    host, we can set up Bitbucket Pipelines to make the file transfer process a deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code snippet to the `script` section of your `bitbucket-pipelines.yml`
    file. The necessary pipe variables include the user’s name for the remote host,
    the remote host name, the path on the remote host to deploy files to, and the
    local path where the build artifacts are located:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also add options using the `EXTRA_ARGS` pipe variable. An example is
    shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `SSH_KEY` pipe variable allows you to define an alternate SSH key. This
    should be a base64-encoded private key, saved as a secured Bitbucket variable.
    The following code snippet shows the use of an alternate SSH key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With that, we’ve deployed to target environments using Bitbucket Pipelines.
    So far, the target environments are physical servers or virtual machines. Next,
    we’ll learn how to deploy to public cloud environments.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying artifacts into AWS S3 buckets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we’re going to look at deploying to AWS. Bitbucket Pipelines
    has a variety of pipes that can deploy to specific AWS component services, depending
    on the type of build artifact.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at what’s involved in deploying our build artifact into an AWS S3
    bucket. This is a typical use case of deployment using Bitbucket Pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When setting up the pipe to deploy to an AWS S3 bucket, the only thing you
    need to do is set up the following variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AWS_ACCESS_KEY_ID`: Your AWS access key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AWS_SECRET_ACCESS_KEY`: Your AWS secret access key. This should be saved as
    a secured variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AWS_DEFAULT_REGION`: The default AWS region of your resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that these have been defined, let’s look at setting up the pipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point, we need to add our pipe configuration to the `script` section
    of our `bitbucket-pipelines.yml` file. Let’s take a closer look:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code snippet to the `script` section of the `bitbucket-pipelines.yml`
    file. This will contain the variables that you set in the *Getting ready* section
    incorporated into the `script` section. Here, `S3_BUCKET` defines the destination
    bucket and `LOCAL_PATH` defines the location of the build artifact:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also define a folder inside the bucket by appending the path to the
    bucket defined in `S3_BUCKET`. This is illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With that, you’ve seen how easy it is to connect Bitbucket Pipelines so that
    you can deploy build artifacts to AWS. Let’s examine doing the same thing for
    Google Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying artifacts to Google Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bitbucket Pipelines can make deployments to Google services through the use
    of pipes that integrate with these services. The following is the current list
    of pipes that connect with Google services:'
  prefs: []
  type: TYPE_NORMAL
- en: Firebase deploy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google App Engine Deploy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Cloud Storage Deploy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Artifactory Registration** (**GAR**) push image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Kubernetes Engine kubectl run
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s take a closer look at deploying build artifacts using the Google Cloud
    Storage Deploy pipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can deploy our artifacts to Google Cloud Storage by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `script` portion of the `step` area where you intend to deploy to Google
    Cloud Storage, copy and paste the `pipe` definition. The definition of the Google
    Cloud Storage Deploy pipe is shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the pipe to the `script` section of your `bitbucket-pipelines.yml` file.
    An example with only the mandatory pipe variables provided is shown in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If needed, continue defining the deployment operation by adding other variables.
    The following code snippet shows a pipe with more variables filled out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have just seen an example of integrating a deployment to Google Cloud resources
    using pipes. Now, let’s look at an example of integration with Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying artifacts to Microsoft Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bitbucket Pipelines can perform deployments to Azure services through the use
    of pipes that integrate with these services. The following is the current list
    of pipes that connect with Microsoft Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Container Apps Deploy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure ACR push image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Functions Deploy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Kubernetes Service Deploy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Kubernetes Service Helm Deploy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Storage Deploy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Web Apps Containers Deploy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Web Apps Deploy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s see what’s needed to use the Azure Functions Deploy pipe as an example
    of deployment to Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we can use the Azure Functions Deploy pipe to deploy to Microsoft Azure,
    we need to establish our Azure credentials. Follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing the Azure CLI on your local machine or using the Azure Cloud
    Shell, create an Azure secure principal by typing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding command will return the following output in JSON format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the output as repository variables. For instance, you can define the following
    output as variables in this way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`appId`: `AZURE_ID`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password`: `AZURE_PASSWORD` (secured)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tenant`: `AZURE_TENANT`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have our secure principal, we can connect to Azure using Bitbucket
    Pipelines. Let’s learn how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Azure Functions Deploy takes serverless logic implementations written on your
    favorite Microsoft development tools, such as Visual Studio, and packages them
    to be executed on-demand in Azure. Part of the development process can include
    deployment through Bitbucket Pipelines. Let’s learn how to deploy functions from
    the `bitbucket-pipelines.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code snippet to the `script` section of `bitbucket-pipelines.yml`.
    The required parameters include the attributes for the secure principal, the function
    name, as found in Azure, and the name of the ZIP file that contains the function
    to be deployed on Azure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Continue adding the necessary variables to the pipe definition. A completed
    example can be seen here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With that, we’ve deployed a serverless function from our local system to Azure.
  prefs: []
  type: TYPE_NORMAL
- en: One aspect of deployment is **Infrastructure as Code** (**IaC**) or the use
    of text-based configurations to dynamically create needed resources. A popular
    tool for doing this is Ansible. In the next recipe, we’ll learn how to use Bitbucket
    Pipelines to execute Ansible playbooks and deploy resources.
  prefs: []
  type: TYPE_NORMAL
- en: Using Ansible in the deployment stage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible is a standard tool for performing IaC. With Ansible, you can configure
    physical or virtual servers and perform configuration tasks such as installing
    or upgrading software, setting the necessary parameters, and starting application
    services.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible is available in its original CLI as well as an integrated graphical
    user interface for dedicated Ansible application servers called **Ansible Tower**.
    We will look at automating deployment to both interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To execute Ansible, the following programs must be installed on the runners
    you plan to use to execute the Bitbucket pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '`python`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pip`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once they’re installed, we can add Ansible commands to our Bitbucket pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The original Ansible application is built on Python and accepts two files as
    input. Both of these files are text files in YAML format:'
  prefs: []
  type: TYPE_NORMAL
- en: '`playbook`: This file includes the commands that Ansible runs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Inventory`: This file details the machines and their environments that Ansible
    applies the playbook against'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s learn how to incorporate this in our `bitbucket-pipelines.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following line to the `script` section of the `bitbucket-pipelines.yml`
    file. This will install Ansible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once installed, move inside the directory where the playbooks for Ansible reside:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '- ansible-playbook -i inventory playbook.yaml'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The script should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this recipe, we looked at how to deploy a configuration from Bitbucket Pipelines
    using the community version of Ansible. The full version from Red Hat features
    dedicated infrastructure for running the Ansible application that’s controlled
    by a GUI called Ansible Tower. Next, we’ll learn how to deploy to Ansible Tower
    using Bitbucket Pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although the primary means of controlling Ansible Tower jobs is through a GUI,
    there is a CLI called `tower-cli` that allows you to script Ansible Tower jobs.
    Let’s look at `tower-cli` in action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `tower-cli` in your build environment. You may need to specify an image
    that has Python, including `pip`. Here, `pip` allows you to install `tower-cli`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up the required environment variables. For `tower-cli`, these are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`host`: Tower host'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`username`: Tower username'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password`: Tower user password (saved as a secure Bitbucket variable)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ID`: ID of the Tower job template to launch'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following lines to configure the environment variables and run the
    Ansible job:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With that, we’ve triggered an Ansible job located in Ansible Tower from Bitbucket
    Pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following documentation for Ansible provides guidance on creating correct
    Ansible jobs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://access.redhat.com/documentation/en-us/red_hat_ansible_automation_platform/2.4](https://access.redhat.com/documentation/en-us/red_hat_ansible_automation_platform/2.4)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.ansible.com/ansible/latest/index.html](https://docs.ansible.com/ansible/latest/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Terraform in the deployment stage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Terraform is another tool that provides IaC capabilities. Its popularity comes
    from the fact that it is flexible for outlining instance creation of cloud resources
    and then implementing those resources to specific cloud platforms using providers
    that specify the implementation details.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s learn how to deploy to Terraform from Bitbucket Pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Terraform describes the configuration it will perform in three files, all of
    which need to be in your Bitbucket repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '`main.tf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`variables.tf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`provider.tf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, any credentials needed by Terraform for configuring the backend
    platforms, such as AWS or Google Cloud, should be stored as Bitbucket variables,
    and you should allocate them as secure if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: With these in place, let’s set up our deployment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several steps we must take to deploy using Terraform, encapsulated
    in three commands. Let’s look at the Terraform commands we need to use:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the step that defines deployment, use the Terraform Docker image. We’ll
    cover using Docker images in Bitbucket Pipeline steps in more detail in [*Chapter
    9*](B21937_09.xhtml#_idTextAnchor185):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `script` section of the `bitbucket-pipelines.yml` file, enter the following
    command to initialize Terraform:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following line to perform validation. This may not be required:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '- terraform plan -out=plantf'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following line to apply the plan and run Terraform:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '- step:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'image: hashicorp/terraform:full'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'script:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- terraform init'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- terraform validate'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- terraform plan -out=plantf'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- terraform apply plantf'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With that, we performed a deployment in Bitbucket Pipelines where we invoked
    Terraform to create our instances.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following resource is beneficial for understanding Terraform – [https://developer.hashicorp.com/terraform/docs](https://developer.hashicorp.com/terraform/docs).
  prefs: []
  type: TYPE_NORMAL
