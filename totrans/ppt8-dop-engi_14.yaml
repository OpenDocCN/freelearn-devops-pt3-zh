- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Brief Overview of Puppet Enterprise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will give an overview of **Puppet Enterprise**, what it is, and
    what it provides compared to **Open Source Puppet**. Although the author of this
    book is a Puppet employee, this is not intended as a hard sell but to present
    where and how to use Puppet Enterprise well. It will cover the extra Enterprise
    console services in the Puppet platform, showing how code deployment, orchestrator
    service, RBAC, web console, and various other services are automatically configured
    and work with each other. This will assist in understanding how Puppet Enterprise
    differs from Open Source Puppet and the preconfigured and built-in features that
    would need to be manually created in Open Source Puppet. Supported architectural
    patterns will be highlighted that help to understand how to deploy and scale Puppet
    infrastructure using Puppet Enterprise packaging and modules to automatically
    deploy these patterns. Some related projects and integrations will be discussed,
    along with how they fit into the Puppet Enterprise environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Puppet Enterprise?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the Puppet Enterprise console and services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Bolt with Puppet Enterprise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating deployment and reference architectures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Puppet Enterprise-related projects and tooling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lab—Puppet Enterprise extensions and configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Clone the control repo from [https://github.com/puppetlabs/control-repo](https://github.com/puppetlabs/control-repo)
    to your `controlrepo-chapter14` GitHub account and update the `Puppetfile` file
    in this repo: [https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch14/Puppetfile](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch14/Puppetfile).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build a large cluster with a replica with three compilers and three clients
    by downloading the `params.json` file from [https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch14/params.json](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch14/params.json)and
    updating it with the location of your control repo and your SSH key for the control
    repo. Then, run the following command from your `pecdm` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: What is Puppet Enterprise?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common misconception when discussing Puppet Enterprise is that features of
    the product are held back and not available for open source users. The aim of
    Puppet Enterprise isn’t to limit what is available to open source users but to
    instead provide value to customers who want to consume Puppet easily and focus
    on gaining the value of configuration management by putting less of their own
    development and automation work into the platform itself.
  prefs: []
  type: TYPE_NORMAL
- en: Puppet achieves this by ensuring that in Enterprise, the packing of components
    is versioned and tested together with an automated installation script and module,
    reducing the effort required by users managing the infrastructure. Puppet Enterprise
    works on two different types of releases. Puppet Enterprise, which works on an
    *xxxx.y* pattern, is normally updated every 3 months, which at the time of writing
    would be `2023.0`. This version is planned to upgrade to Puppet 8.x versions in
    2023.3 and will receive new features throughout its lifetime. This release is
    recommended for users who want to access the latest features and fixes and will
    require a regular update pattern. The other type of release is the **long-term
    support** (**LTS**) version; this follows an *xxxx.y.z* pattern. This branch is
    normally updated every 3 months, but the updates would only include fixes and
    not new features. The LTS versions last 2 years and have an overlap of 6 months
    with the next major *xxxx* release, so the current 2021.7.z LTS will end mainstream
    support on August 31, 2024, at which point overlap support will continue until
    February 28, 2025, after which users should migrate to whichever version of Puppet
    they require. 2023.y becomes the new LTS release to continue to have support from
    Puppet. The two running Puppet Enterprise versions generally mirror two Open Source
    Puppet versions in active development. The release of 2023.0 retired Puppet 6
    and 2023 should move to Puppet 8 in version 2023.3 or shortly after.
  prefs: []
  type: TYPE_NORMAL
- en: The most obvious feature of an Enterprise license is support, with access to
    raise support cases with teams who can review infrastructure problems and assist
    with any issues or features required for supported modules.
  prefs: []
  type: TYPE_NORMAL
- en: Puppet also provides various professional services, such as on-site engagements
    to provide hands-on training and advice. This can lead to architecture reviews
    to understand how best to implement in your environment and to feed into processes
    that develop products and solutions such as the **Puppet Data Service** (**PDS**)
    and **Puppet Enterprise Administration Module** (**peadm**). Further, **technical
    account managers** (**TAMs**) are assigned to give you a regular point of contact
    and champion you in Puppet, supporting you in creating a success plan for your
    organization and focusing your deployment to achieve its goals.
  prefs: []
  type: TYPE_NORMAL
- en: Puppet provides reference architectures and patterns of Puppet products to show
    how to work at different scales and implementation types. Additional applications
    built on top of the Puppet Server service allow for access control, server classification,
    code deployment, visualization, and searching of data to be completed in a standard
    way from the console. We will look at these in greater detail in the following
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Puppet Enterprise console and services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several additional services built into a **Puppet Enterprise primary
    server**, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – Puppet Enterprise components](img/B18492_14_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.1 – Puppet Enterprise components
  prefs: []
  type: TYPE_NORMAL
- en: Puppet Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Puppet** service is the same as discussed in [*Chapter 10*](B18492_10.xhtml#_idTextAnchor252),
    with the **certificate authority** (**CA**) providing a certificate signing process
    to secure communication and the Puppet agent contacting a compiler’s Puppet Server
    service to request a catalog compilation. **Facter** is used to provide a server
    profile. In *Figure 14**.1*, we opt not to show that the primary server itself
    has a Puppet Server service, and both the compiler and primary server have Puppet
    agents, which both request catalog compilations from the primary server’s Puppet
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Puppet web console components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most obvious immediate difference of the Puppet Enterprise server is the
    **web console**, which provides the login view we have been using in our lab throughout
    this book. Several services combine to make up the console services
  prefs: []
  type: TYPE_NORMAL
- en: The console is a web frontend Jetty-based Clojure service with an NGINX server
    that acts as a reverse proxy. The NGINX server listens on port HTTPS `443` and
    redirects HTTP 80 to HTTPS. The console UI provides an aggregation and translation
    Jetty-based Clojure service to generate the correct pages and access other console
    services.
  prefs: []
  type: TYPE_NORMAL
- en: 'The authentication UI generates login and resets password content pages. The
    simplest way to show this is to use an example of the communication required when
    logging in, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2 – Steps to generate the login page](img/B18492_14_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.2 – Steps to generate the login page
  prefs: []
  type: TYPE_NORMAL
- en: It can be seen from the diagram that as a first step, the NGINX server receives
    a `GET` request and, after performing TLS negotiation, redirects to the console
    Jetty page. This page evaluates cookies, establishes the user is not logged in,
    and redirects to the auth/login page, which is requested from NGINX and redirected
    to the authentication UI. The authentication UI generates a login page and gets
    **Security Assertion Markup Language** (**SAML**) configuration from the RBAC
    Jetty page, and this login page is then passed back to the user.
  prefs: []
  type: TYPE_NORMAL
- en: The **RBAC service** has users and roles to construct access policies. It allows
    for both local and remote users in Puppet Enterprise, with integration possible
    to **Lightweight Directory Access Protocol (LDAP**) and SAML services. All users
    by default are denied permission to create, edit, or view any part of Puppet Enterprise,
    and permissions are then granted via roles.
  prefs: []
  type: TYPE_NORMAL
- en: By default, there will be a local administrative user who acts as a superuser
    for the Puppet service and an API user for authentication for Puppet services
    to communicate within Puppet Enterprise. It cannot be used for login and only
    authenticates with certificate authentication. There is an allow list that has
    the `certname` values of certificates that can be used with the API user.
  prefs: []
  type: TYPE_NORMAL
- en: Roles allow the grouping of permissions to give users permission to perform
    actions. A permission is made up of a **type**, a **permission**, and an **object**.
    The type is what the permission will allow actions on, such as users or node groups.
    A permission is a level of access from create, edit, or view, and an object is
    a specific instance of the type such as the Puppet Enterprise infrastructure node
    group for a node group type.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are five roles provided by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Administrators**: All permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operators**: Permission to create and modify node groups, deploy code, run
    Puppet, run sign certificates, and view the console'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Viewers**: Permission to view the console, node groups, and jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code deployers**: Permission to deploy code with Code Manager'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project deployers**: Permission to deploy projects, run tasks and plans from
    projects, and start, stop, and view jobs in orchestrator'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom roles can be created with the consultation of [https://puppet.com/docs/pe/2021.7/rbac_permissions_intro.html#user_permissions](https://puppet.com/docs/pe/2021.7/rbac_permissions_intro.html#user_permissions
    ) to find the right granularity of user permissions.
  prefs: []
  type: TYPE_NORMAL
- en: '**LDAP solutions** such as **Active Directory** (**AD**) can map user groups
    to roles, while **SAML solutions** such as **Okta** can do similar user group
    mapping with attributes to match to roles. Both LDAP and SAML are configured in
    the web console on the **Access control** tab by selecting the corresponding option.'
  prefs: []
  type: TYPE_NORMAL
- en: Tokens are used for all web sessions, and instead of logging in with a password
    whenever running commands, tokens can be generated for multiple uses. The tokens
    are alphanumeric values between `0` and `2^256 – 1` and stored in the database
    and, depending on the argument, a local file location. Tokens are generated by
    either the token API endpoint, the web console in the `puppet access login` command
    on the CLI. The token is against the user credentials provided, so will have the
    permissions set to that user. By default, the `puppet access login` command will
    write the token to `~/.puppetlabs/token` with a lifetime of 30 minutes unless
    the `--lifetime` is used to set a lifetime such as `5h` for 5 hours.. The `--print`
    flag will cause the token to only be printed and not stored, which is appropriate
    for service-based API access.
  prefs: []
  type: TYPE_NORMAL
- en: The classifier service was discussed in [*Chapter 11*](B18492_11.xhtml#_idTextAnchor272),
    where we looked at how it used **node groups** to classify servers in Puppet,
    but to reiterate the key points, node groups are used to classify classes to servers
    either by using facts or directly pinning named servers. Node groups are inheritance
    based, so each child of a node group will inherit everything above it.
  prefs: []
  type: TYPE_NORMAL
- en: Code Manager was discussed in [*Chapter 11*](B18492_11.xhtml#_idTextAnchor272),
    showing how the `r10k` to download modules based on a Puppet file in a control
    repo from a named Git repository, and the `filesync` server and `filesync` clients
    then kept this copy of code in sync across the services.
  prefs: []
  type: TYPE_NORMAL
- en: The **activity service** is used to log all activities that have taken place
    through the console service and can be viewed by the API endpoint and on the web
    console in various places, such as the **activity** tab on any user and role.
  prefs: []
  type: TYPE_NORMAL
- en: 'The database components of Puppet Enterprise, **PuppetDB** with **PostgreSQL**,
    are the same as was discussed in [*Chapter 10*](B18492_10.xhtml#_idTextAnchor252),
    but several of the services need additional databases to store their state and
    records. So, the following databases are created:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pe-activity`: All auditable activities of console services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pe-classifier`: All node group information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pe-inventory`: Agentless client details and their access method for orchestrator'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pe-orchestrator`: Job runs, job results, users, and node'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pe-postgres`: Postgres databases for templating and general access. See [https://www.postgresql.org/docs/current/manage-ag-templatedbs.html](https://www.postgresql.org/docs/current/manage-ag-templatedbs.html)
    to understand template databases further.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pe-puppetdb`: Reports, node information, and last run catalog'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pe-rbac`: Users, roles, groups, and AD/LDAP information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: All PostgreSQL communication is done using certificates, including communications
    to replicas.
  prefs: []
  type: TYPE_NORMAL
- en: The one component which was not covered in *Figure 14**.1* was the orchestrator
    services. We will now cover how orchestrator provides the capability of using
    Bolt plans and tasks within Puppet Enterprise.
  prefs: []
  type: TYPE_NORMAL
- en: Using Bolt with Puppet Enterprise
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [*Chapter 12*](B18492_12.xhtml#_idTextAnchor293), it was seen how Bolt was
    run using the `bolt` binary within a Bolt project, but it can be used integrated
    with Puppet Enterprise via the **orchestrator service**, allowing plans and tasks
    to be run as part of Puppet Enterprise.
  prefs: []
  type: TYPE_NORMAL
- en: The key difference is that currently, only Puppet modules containing tasks and
    plans can be deployed (including adding them to a control repo); there is no current
    method of deploying bolt projects to Puppet Enterprise directly.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: With plans and tasks deployed through modules, this means the same plan or task
    can have multiple versions, depending on the environment it is run from.
  prefs: []
  type: TYPE_NORMAL
- en: It is also important to realize not all of the features available to Bolt natively
    will be available within Puppet Enterprise.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list highlights the key differences when running plans and tasks
    in Puppet Enterprise in orchestrator instead of in native Bolt:'
  prefs: []
  type: TYPE_NORMAL
- en: Various Bolt functions for plans, such as `prompt`, `parallelize`, and `file.upload`,
    have not been implemented
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`puppet apply` blocks can only be applied to nodes with a Puppet agent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Targets and the localhost target are unavailable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File sources must be module based and cannot be absolute paths
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of these limitations reflect not running Bolt from a local machine and
    a lack of a prompt to run them. Full details can be viewed in Puppet’s documentation
    at [https://puppet.com/docs/pe/2021.7/plans_limitations.html](https://puppet.com/docs/pe/2021.7/plans_limitations.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Puppet Enterprise handles three types of nodes with plans and tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Nodes with a Puppet agent installed, using the **Puppet Communications Protocol**
    (**PCP**) and the **PCP Execution** **Protocol** (**PXP**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agentless nodes via the **Windows Remote Management** (**WinRM**) and **Secure
    Shell** (**SSH**) transports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agentless devices such as switches or firewalls via transports such as F5 and
    **Palo Alto Netorks Operating system** (**PAN-OS**) or transports provided via
    the resource API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having highlighted what orchestrator is capable of running for plans and tasks,
    we will now look at the components that make up orchestrator, highlighting the
    purpose of these services and key details such as log locations and configuration
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Orchestrator services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The orchestrator application is a **Clojure** application made up of the services
    shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.3 – Components of the Puppet orchestrator service](img/B18492_14_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.3 – Components of the Puppet orchestrator service
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s have an overview of these components and their relevant services and
    log files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pe-orchestration-services.service` and logs to `/var/log/puppetlabs/orchestration-services/orchestration-services.log`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST /command/create-connection` inventory API call ([https://puppet.com/docs/pe/2021.7/node-inventory-v1-command-endpoints.html#node-inventory-v1-command-endpoints](https://puppet.com/docs/pe/2021.7/node-inventory-v1-command-endpoints.html#node-inventory-v1-command-endpoints)).
    These entries are encrypted by a secret key, by default placed at `/etc/puppetlabs/orchestration-services/conf.d/secrets/keys.json`,
    and although listed separately, the inventory service runs within `pe-orchestration-services`.
    It stores its data in the PostgreSQL inventory database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Agentless nodes added to the inventory are counted within the overall licensed
    number of nodes for Puppet Enterprise.
  prefs: []
  type: TYPE_NORMAL
- en: '`pe-bolt-server.service` and logs to `/var/log/puppetlabs/bolt-server/bolt-server.log`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pe-ace-server.service` and logs to `/var/log/puppetlabs/ace-server/ace-server.log`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/log/puppetlabs/orchestration-services/pcp-broker-access.log` and general
    service logs are logged to `/var/log/puppetlabs/orchestration-services/pcp-broker.log`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pxp-agent.service` and logs to `/var/log/puppetlabs/pxp-agent/pxp-agent.log`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The orchestrator service will verify via RBAC that the Puppet Enterprise console
    user has the correct permissions. For plans, it is only possible to specify users
    or groups and which plans they can run with no limit of nodes or which environment
    the plan will come from. For tasks, task targets allow a list of tasks and either
    a **Puppet Query Language** (**PQL**) query of nodes or groups of nodes to be
    specified, which the tasks can be run against. This can be done either via the
    API call, as shown at [https://www.puppet.com/docs/pe/2021.7/orchestrator_api_commands_endpoint.html#orchestrator_api_post_command_task_target](https://www.puppet.com/docs/pe/2021.7/orchestrator_api_commands_endpoint.html#orchestrator_api_post_command_task_target),
    or in the RBAC GUI, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.4 – Creating a task target on the web console](img/B18492_14_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.4 – Creating a task target on the web console
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to run tasks, plans, or Puppet runs through
    orchestrator.
  prefs: []
  type: TYPE_NORMAL
- en: Running jobs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When tasks, plans, or Puppet runs are run through orchestrator, they become
    known as **jobs**. There are three ways to run jobs, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The first way to do this is via the GUI by selecting the relevant menu on the
    left bar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second is via the CLI on the primary server with largely the same syntax
    as the `puppet task run` and `puppet plan run` Bolt commands. The key differences
    compared to Bolt are that the `--nodes` flag is used instead of `targets` (reflecting
    the fact you will be just providing a node name, for which orchestrator will lookup
    transport information) and extra flags are available, such as the --`node-groups`
    flag, for choosing a node group to run against. Here’s an example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The third way is via the APIs documented at [https://puppet.com/docs/pe/2021.7/orchestrator_api_commands_endpoint.html](https://puppet.com/docs/pe/2021.7/orchestrator_api_commands_endpoint.html),
    with the key calls listed here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST /command/deploy`: Run Puppet on demand'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST /command/plan_run`: Run a plan'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST /command/task`: Run a task on a set of nodes'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Jobs in progress can be stopped by pressing *Ctrl* + *C* on the CLI, selecting
    `POST /command/stop` API command. Although we should be careful to note a stopped
    jobs underlying process may run to completion regardless.
  prefs: []
  type: TYPE_NORMAL
- en: An API command was introduced in PE 2021.7.1 `POST /command/stop_plan` to allow
    for plans to be stopped.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to schedule jobs in orchestrator via the GUI or by `API
    POST /scheduled_jobs/environment_jobs`, but great care should be taken to be aware
    of the system load of using the scheduler. Orchestrator has limitations with how
    it scales since there is no way to horizontally scale, and the queuing system
    for tasks and plans can be easily blocked by certain types of requests.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring performance settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The settings discussed in this section can all be configured in the Puppet Enterprise
    orchestrator infrastructure node group on the web console or as code in Hiera.
  prefs: []
  type: TYPE_NORMAL
- en: 'orchestrator can run a maximum number of tasks concurrently; this maximum number
    of concurrent tasks is configured with the `puppet_enterprise::profile::orchestrator::task_concurrency`
    parameter (default: `250`), along with `puppet_enterprise::profile::bolt_server::concurrency`
    (default: `100`) and `puppet_enterprise::profile::ace_server::concurrency` (default:
    `100`), which limit Ace and Bolt directly (they should not be greater than the
    `orchestrator::task_concurrency` total). Their sizes are mainly limited by orchestrator
    memory, which will reserve approximately ± 1 MB of RAM for each instance of capacity
    you add. Tasks are dealt with in the order they are received until they are completed;
    this means long-running tasks and tasks with large numbers of targets can potentially
    block other tasks from running and monopolize resources. Taking the case of running
    tasks taking 10 minutes to complete on 1,000, servers this would result in the
    task using the queue capacity of 250 four times and taking a total executing time
    of 40 minutes to run the tasks on all targets, during which time all other tasks
    would need to queue until it was complete. It is strongly recommended that a task
    should take no longer than 5 minutes and that careful management should take place
    to run tasks in smaller batches. It should also be noted there is no limit in
    the task queue and it risks running `puppet_enterprise::profile::orchestrator::allowed_pcp_status_requests`
    parameter. It is important to understand this does not mean the task has failed
    but simply that orchestrator cannot get a status for it within the timeout. The
    task itself may have completed after this time.'
  prefs: []
  type: TYPE_NORMAL
- en: For plans, orchestrator is similar to Puppet Server in requiring JRuby instances
    to compile plans. This capacity is set by `puppet_enterprise::profile::orchestrator::jruby_max_active_instances`,
    with heap memory for the JVM set at `puppet_enterprise::profile::orchestrator::java_args`.
  prefs: []
  type: TYPE_NORMAL
- en: Having discussed the core components and services of Puppet Enterprise, we will
    now look at how these components can be deployed using automated tools, deploying
    to Puppet-advised reference architectures to ensure that infrastructure will scale
    to user requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Automating deployment and reference architectures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Puppet Enterprise focuses on creating standard architectures and configurations
    and the automation to deploy them. This ensures that less design effort is required
    from Puppet Enterprise customers who can find the right standard architecture
    and pattern and deploy it using provided tooling.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding supported architectures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Puppet documents three supported architectures for Puppet Enterprise, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The **standard installation** is just a standalone primary server and supports
    up to 2,500 clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **large installation** is a primary server with compile servers behind a
    load balancer and supports up to 20,000 clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extra-large installations** are a primary server, a separate server with
    PuppetDB, and compile servers behind a load balancer supporting over 20,000 servers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These are illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.5 – Standard architectures](img/B18492_14_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.5 – Standard architectures
  prefs: []
  type: TYPE_NORMAL
- en: The standard architecture is limited by how many clients a primary server can
    run catalogs for by itself, up to 2,500 nodes. Over this level, the large architecture
    allows horizontal scaling using compiler nodes but reaches limits of how much
    load a single primary server can take running all the services together. So, at
    25,000 nodes, the extra-large architecture recommends separating out PuppetDB
    as one of the heaviest services to its own server.
  prefs: []
  type: TYPE_NORMAL
- en: 'In all these architectures, it is possible to provide a replica server to the
    primary server and a separate PostgreSQL server, through a method named **disaster
    recovery** (**DR**). In the event of loss of the primary or PostgreSQL server,
    DR gives the ability to perform failover actions and recover services with an
    expected loss of some services, as listed in the following tabular breakdown of
    services:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Service name** | **Replication type** | **Failover approach** |'
  prefs: []
  type: TYPE_TB
- en: '| Puppet Server | None | Active / Active |'
  prefs: []
  type: TYPE_TB
- en: '| Console services UI | None | Read-only until manual promotion |'
  prefs: []
  type: TYPE_TB
- en: '| ACE service | None | Read-only until manual promotion |'
  prefs: []
  type: TYPE_TB
- en: '| Bolt service | None | Read-only until manual promotion |'
  prefs: []
  type: TYPE_TB
- en: '| CA | One-way replication | Read-only until manual promotion |'
  prefs: []
  type: TYPE_TB
- en: '| RBAC | One-way replication | Read-only until manual promotion |'
  prefs: []
  type: TYPE_TB
- en: '| Classifier | One-way replication | Read-only until manual promotion |'
  prefs: []
  type: TYPE_TB
- en: '| Activity | One-way replication | Read-only until manual promotion |'
  prefs: []
  type: TYPE_TB
- en: '| Orchestration | One-way replication | Read-only until manual promotion |'
  prefs: []
  type: TYPE_TB
- en: '| File sync | One-way replication | Read-only until manual promotion |'
  prefs: []
  type: TYPE_TB
- en: '| PuppetDB | Bi-directional | Active – Active |'
  prefs: []
  type: TYPE_TB
- en: Table 14.1 – Service replication and failover approach for DR
  prefs: []
  type: TYPE_NORMAL
- en: PuppetDB is unique in its synchronization within Puppet Enterprise; it performs
    a read-write synchronization between primary and replica, which is why it is the
    only service in the previous list that synchronizes and is available on promotion.
    The other services that use PostgreSQL rely on a `PGLogical` synchronization from
    primary to replica, making the data read-only on the replica.
  prefs: []
  type: TYPE_NORMAL
- en: What can be seen from this list is during the failure of a primary server, the
    replica will only be able to take over and compile catalogs of servers already
    registered, queries and reports from PuppetDB, and queries of node classification
    via the API. This means no new servers can be registered or removed, no new code
    can be deployed, the web console cannot be used, classification cannot be changed,
    and most of the CLI tools will be non-functional until manual promotion actions
    are taken via the `puppet infrastructure promote replica` command on the replica.
  prefs: []
  type: TYPE_NORMAL
- en: This is an irreversible action, and the original failed primary server must
    be redeployed as a replica before it can be used again. Therefore, for many users
    attempting to fix the original primary server, this is less time-consuming than
    going through the DR process.
  prefs: []
  type: TYPE_NORMAL
- en: DR should not be confused with **high availability** (**HA**), which would be
    expected for continuous service in the event of the loss of a server, and that
    is not possible in any current Puppet architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When using DR, peadm ensures that the compilers are split and configured into
    two groups and PuppetDB requests are distributed across the two sides of the PuppetDB
    replication to maximize capacity. If you choose not to use pecdm, ensure you follow
    this optimization, which can be seen in code at [https://github.com/puppetlabs/puppetlabs-peadm/blob/main/manifests/setup/node_manager.pp](https://github.com/puppetlabs/puppetlabs-peadm/blob/main/manifests/setup/node_manager.pp),
    with the A and B groups setting parameters for databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Puppet architecture also defines a set of multi-region patterns for how
    to deploy across regions both public and private cloud, where a region is defined
    by cloud vendors as data centers with regional low-latency connections. Full details
    are available at [https://puppet.com/docs/patterns-and-tactics/latest/reference-architectures/pe-multi-region-reference-architectures.html](https://puppet.com/docs/patterns-and-tactics/latest/reference-architectures/pe-multi-region-reference-architectures.html).
    Best practice requires compilers to have low-latency connections, and these are
    therefore best placed in the same region as primary and replica servers; similarly,
    the connection between primary and replica must be low latency. The best practice
    is, therefore, to use a centralized deployment where all Puppet infrastructure
    is in a management region that all regions can communicate with, as shown in the
    following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.6 – Centralized and federated deployments](img/B18492_14_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.6 – Centralized and federated deployments
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, a federated model can be used whereby Puppet infrastructure is
    placed in each region, with the downside that no single console views the whole
    estate.
  prefs: []
  type: TYPE_NORMAL
- en: Having discussed the architectures and patterns in full, it is time to see which
    tooling is available to deploy these patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment and configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Puppet automates the deployment of its server infrastructure in several layers.
    The first layer uses the Puppet Enterprise installer, a tarball file that is downloaded
    from Puppet containing all the necessary packages and scripts to install Puppet
    Enterprise. Once downloaded on a target server and untarred, the basic install
    can be done by running `./puppet-enterprise-installer`. It is possible to add
    custom configurations by creating a `-c` flag to its location, following the guidance
    at [https://puppet.com/docs/pe/2021.7/installing_pe.html](https://puppet.com/docs/pe/2021.7/installing_pe.html).
    Once a Puppet server is configured, the install scripts can be used to automate
    adding agents; a Bash script for Unix-based systems and a PowerShell script for
    Windows are hosted on a file server on the primary, which ensures the correct
    agent package is installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the example, the options set `environment` to `production` in the `puppet.conf`
    file and ensure the service is not running. The full range of options is available
    and documented at [https://puppet.com/docs/pe/2021.7/installing_agents.html](https://puppet.com/docs/pe/2021.7/installing_agents.html).
  prefs: []
  type: TYPE_NORMAL
- en: This `install` script would only have installed the primary server and would
    require further manual steps to add compilers and replicas depending on the architecture
    we wanted. To deploy the next layer instead of using the Enterprise installer
    directly, we use the peadm module ([https://forge.puppet.com/modules/puppetlabs/peadm](https://forge.puppet.com/modules/puppetlabs/peadm)),
    a supported Puppet module that provides an automated way to run the Puppet Enterprise
    installer script and configure it to one of the supported architectures automatically.
    This module assumes the infrastructure required for the requested configuration
    is available and it is possible to go to another level and automatically provision
    in public cloud environments using the pecdm module ([https://github.com/puppetlabs/puppetlabs-pecdm](https://github.com/puppetlabs/puppetlabs-pecdm)).
    An example of usage of these modules was discussed in detail in [*Chapter 12*](B18492_12.xhtml#_idTextAnchor293)and
    is what we have been using throughout this book to deploy labs.
  prefs: []
  type: TYPE_NORMAL
- en: The `peadm` module itself goes beyond simple deployment and has plans and tasks
    to show the status of the server and allow the performance of version upgrades
    via its tasks and plans.
  prefs: []
  type: TYPE_NORMAL
- en: Puppet Enterprise combines modules installed in the `Enterprise` folder and
    configured either in the classifier or Hiera data with other file locations to
    place customizations. The console has a number of configurations that can be set
    either in the classification in the web console or via Hiera, such as failed login
    attempts set by `puppet_enterprise::profile::console::rbac_failed_attempts_lockout`
    and password complexity rules such as minimum password length, set by `puppet_enterprise::profile::console::password_minimum_length`.
    A full list of console customizations can be found at [https://puppet.com/docs/pe/2021.7/config_console.html#configure_the_pe_console_and_console_services](https://puppet.com/docs/pe/2021.7/config_console.html#configure_the_pe_console_and_console_services).
  prefs: []
  type: TYPE_NORMAL
- en: In addition, files can be placed for the console, by placing a file at the path
    specified by `puppet_enterprise::profile::console::disclaimer_content_path`, which
    defaults to `/etc/puppetlabs/console-services`. You can create a message to display
    when logging in to the console, such as a legal warning your organization may
    have.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally in the console, it is possible to search for nodes based on PQL
    with predefined PQL examples selectable. It is possible to add your own PQL examples
    to the web console by simply placing a file at `/etc/puppetlabs/console-services/custom_pql_queries.json`
    using `/etc/puppetlabs/console-services/custom_pql_queries.json.example` as a
    template. The web console itself uses a self-signed CA by default, and this can
    be replaced with one signed by your organization’s CA system by placing the generated
    certificate at `/etc/puppetlabs/puppet/ssl/certs/console-cert.pem` and `/etc/puppetlabs/puppet/ssl/private_keys/console-cert.pem`.
    One last key file to consider is the license key, which is issued to you by Puppet
    and placed at `/etc/puppetlabs/license.key` with `644 root:root` permissions.
    You can view the details of licensing under the **License** tab on the web console.
    A Puppet agent run should be made for these changes and the console service restarted.
  prefs: []
  type: TYPE_NORMAL
- en: Some areas of Puppet Enterprise are not currently definable through native code
    such as RBAC, classification, and LDAP, but there are APIs and Puppet modules
    that take advantage of those APIs, which can allow for storing configuration.
    For classification, there is an API to view the classification and configure node
    groups; this can also be done via the **node_manager** module ([https://forge.puppet.com/modules/WhatsARanjit/node_manager](https://forge.puppet.com/modules/WhatsARanjit/node_manager)),
    which is used by peadm. For RBAC and LDAP, the RBAC API ([https://puppet.com/docs/pe/2021.7/rbac-api.htm](https://puppet.com/docs/pe/2021.7/rbac-api.htm))
    has endpoints that can be used to manage groups, roles, and users. A Puppet module
    has been developed to use these APIs ([https://forge.puppet.com/modules/pltraining/rbac](https://forge.puppet.com/modules/pltraining/rbac))
    and it has an LDAP endpoint that has similarly had a module developed to use the
    APIs ([https://forge.puppet.com/modules/abuxton/puppet_ds).](https://forge.puppet.com/modules/abuxton/puppet_ds).
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: Having reviewed the architecture and deployment recommendations, we will discuss
    other supporting tools and products to work with Puppet in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Puppet Enterprise-related projects and tooling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Puppet Enterprise has several modules and tools developed by Puppet to ease
    the management and support of Puppet infrastructure. The most direct is the built-in
    support script; this command gathers logs and system information and compresses
    it allowing users to send detailed status information to cases with Puppet’s support
    teams. The simple version of the command is shown here: `/opt/puppetlabs/bin/puppet`
    `enterprise support`.'
  prefs: []
  type: TYPE_NORMAL
- en: Various options can be found in the documentation at [https://puppet.com/docs/pe/2021.7/getting_support_for_pe.html#pe_support_script](https://puppet.com/docs/pe/2021.7/getting_support_for_pe.html#pe_support_script)
    that allow for selecting services to be collected, to directly **Secure File Transfer
    Protocol** (**SFTP**) upload the archive as part of the command, and to encrypt
    the archive, assuming **GNU Privacy Guard** (**GPG**) keys are available.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to use **SOScleaner** to remove hostnames and IP addresses from
    the support script contents. Visit [https://support.puppet.com/hc/en-us/articles/115003312887](https://support.puppet.com/hc/en-us/articles/115003312887)
    for details on how to install and run it.
  prefs: []
  type: TYPE_NORMAL
- en: Having seen how to deploy Puppet infrastructure, it is important for you to
    understand how to monitor and troubleshoot any issues found, so let’s look at
    that next.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring and troubleshooting Puppet Enterprise infrastructure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Puppet Enterprise status_check module** ([https://forge.puppet.com/modules/puppetlabs/pe_status_check](https://forge.puppet.com/modules/puppetlabs/pe_status_check))
    performs checks on both Puppet infrastructure servers and Puppet agents based
    on commonly found issues in support cases, such as confirming services are running,
    disk space is free, and certificates are not expiring. These checks can be run
    as tasks, Puppet code that will notify issues into reports, or as facts—the Splunk
    plugin shown in [*Chapter 13*](B18492_13.xhtml#_idTextAnchor321)has a dashboard
    for displaying the fact output. Using these checks means if you do experience
    any issues when you raise your support case with Puppet, you can reference the
    check number.
  prefs: []
  type: TYPE_NORMAL
- en: The **support_tasks module** ([https://forge.puppet.com/modules/puppetlabs/support_tasks/tasks](https://forge.puppet.com/modules/puppetlabs/support_tasks/tasks))
    provides tasks that perform actions set out in knowledge base articles such as
    regenerating certificates, running the support script, and printing Puppet database
    table sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Some extra console views can be configured to be visible and usable in the console;
    value reporting simply needs values entered in the **Value report** tab for how
    much time is to be reclaimed by using tasks, plans, corrective changes, and intentional
    changes, and it will also generate statistics.
  prefs: []
  type: TYPE_NORMAL
- en: Puppet Enterprise can gather additional information about packages including
    unmanaged packages; this information is made visible in the `puppet_enterprise::profile::agent`
    class to a node group covering nodes you wish to collect from and by setting the
    `package_inventory_enabled` parameter to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: The final extra that can be enabled allows the monitoring and management of
    patching. In the `pe_patch` class.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the core Puppet Enterprise infrastructure, there are additional
    Puppet products allowing management of pipelines for code deployment onto Puppet
    Enterprise and for compliance scans to be run on Puppet nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Managing deployments and ensuring compliance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two additional Puppet products to consider using with Puppet Enterprise,
    `v4` catalog API to compile a new catalog with the new code and compare it with
    the current code’s catalog, displaying the difference to ensure the impact is
    as the developer expected. These pipelines can be made in the web console for
    CD4PE or created as code in YAML files inserted into modules and control repos
    to be deployed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Puppet Comply** is a compliance tool based on the **Centre for Internet Security**
    (**CIS**) benchmarks. It builds automation around the Java scanner developed by
    CIS, CIS-CAT Pro accessor ([https://www.cisecurity.org/cybersecurity-tools/cis-cat-pro](https://www.cisecurity.org/cybersecurity-tools/cis-cat-pro)).
    This allows hosts to be accessed against the CIS benchmarks, using orchestrator
    in Puppet Enterprise to automate and schedule runs of the scanner via tasks and
    producing dashboards of their compliance in a separate Puppet Comply console.
    An example of the home screen of Comply is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.7 – Puppet Comply home dashboard](img/B18492_14_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.7 – Puppet Comply home dashboard
  prefs: []
  type: TYPE_NORMAL
- en: It can be seen from the dashboard how many of the nodes are achieving compliance,
    how many nodes have a compliance profile set, and a list of node results listing
    which profile is assigned and compliance scores in a particular scan.
  prefs: []
  type: TYPE_NORMAL
- en: It also comes with the premium `cem_linux` ([https://forge.puppet.com/modules/puppetlabs/cem_linux](https://forge.puppet.com/modules/puppetlabs/cem_linux))
    and `cem_windows` ([https://forge.puppet.com/modules/puppetlabs/cem_windows](https://forge.puppet.com/modules/puppetlabs/cem_windows))
    to speed up your adoption of Puppet, allowing base security configuration to be
    taken based on CIS benchmarks via pre-made Puppet modules. These modules are maintained
    and supported by Puppet, ensuring the enforcement code is up to date with the
    latest CIS benchmarks.
  prefs: []
  type: TYPE_NORMAL
- en: Both products run in the framework known as **Puppet Application Manager** (**PAM**),
    a Kubernetes-based tool for managing Puppet applications.
  prefs: []
  type: TYPE_NORMAL
- en: Lab – Puppet Enterprise extensions and configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Executing the bolt command in the *technical requirements* section deploys
    a large deployment of Puppet Enterprise 2021.5\. With this infrstructure setup,
    we will try various extensions and configurations we have discussed, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Examine the code in peadm and the node groups that set up the A and B groups.
    Note [https://github.com/puppetlabs/puppetlabs-peadm/blob/main/documentation/classification.md](https://github.com/puppetlabs/puppetlabs-peadm/blob/main/documentation/classification.md)
    provides an explanation of the groups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a personal user with permission to view the console and create node groups
    and view the activity log of the administrator user (try to log in without the
    view console permissions).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable package management on the web console for all nodes, log in as your personal
    user, and view the activity log of this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable patch management for the nodes by applying code using the `node_manager`
    module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customize the login message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform an upgrade to 2021.6 using the peadm upgrade plan. *Note*: Since pecdm
    includes peadm, this can be performed from your development environment.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sample solutions are provided at [https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/tree/main/ch14](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/tree/main/ch14).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has reviewed how Puppet Enterprise builds on top of the open source
    tooling, providing the services necessary to secure and automate the deployment
    of Puppet. It was discussed how Puppet Enterprise bundled the open source packages
    into consistent versions, with support offerings and services from Puppet architecture
    and services teams.
  prefs: []
  type: TYPE_NORMAL
- en: We also discussed the additional services of Puppet Enterprise that secure user
    and API access via RBAC, giving a web frontend and additional APIs in the console
    services the ability to deploy code from Code Manager.
  prefs: []
  type: TYPE_NORMAL
- en: Puppet orchestrator was then seen, to show how tasks and plans could be run
    in Puppet Enterprise with the orchestrator service running tasks and plans via
    PCP using PXP brokers to direct communication from PXP agents on nodes. The agentless
    clients could be added to the inventory service storing their transport details,
    and tasks or plans to run on them would ego via the Bolt server for nodes connected
    by WinRM or SSH, while other transports’ particular network devices such as switches
    or firewalls used the ACE server. We saw how orchestrator would store all the
    job details updating the activity service. RBAC access was discussed, showing
    how you could only limit which plans were available to a user but could set tasks
    to particular users and particular groups of nodes using target sets. Performance
    and capacity aspects of orchestrator were discussed, as well as how to run tasks
    or plans via the web console GUI or the CLI interface.
  prefs: []
  type: TYPE_NORMAL
- en: The supported architectures customers could take off the shelf to implement
    Puppet at scale and regional requirements for their estate were reviewed, showing
    the modules and scripts that wrap up to automatically deploy these architectures,
    the pecdm module deploying infrastructure in the public cloud, peadm automating
    the various steps of install and maintenance, and using the installer script.
  prefs: []
  type: TYPE_NORMAL
- en: Extras services that could be enabled in the web console to help report on the
    value Puppet delivers, patch management, and packaging reporting were reviewed,
    along with customizations and methods to automate configuration within the console
    covering customization of the console message, the certificate used on the web
    console, and the license key. Several modules were then discussed that could assist
    in reporting the status of the infrastructure and running standard tasks in the
    `support_task` and `status_check` modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Two further Puppet products that integrate with Puppet Enterprise were then
    discussed: CD4PE, which provides a pipeline to assist in automating the deployment
    of code, and Puppet Comply, which gives pre-written modules and dashboards to
    allow for reporting on CIS benchmarks.'
  prefs: []
  type: TYPE_NORMAL
- en: While all of the architecture, tooling, packaging, and general automation could
    be achieved with Open Source Puppet, it would require development and support
    work from your own teams. So, Puppet Enterprise should be seen as a decision about
    the skills and people available in your team, tooling already invested in the
    organization and money available for tooling, and where your organization wants
    to focus its work.
  prefs: []
  type: TYPE_NORMAL
- en: Now, having fully reviewed the language, the platform, and how Puppet Enterprise
    can provide preconfigured infrastructure to reduce the operational burden and
    design required, in the final chapter, we will discuss approaches to adopting
    and using Puppet, focusing on getting the best use in your organization, since
    understanding the technology is only part of the battle while understanding how
    to integrate with people and processes is often the greater challenge.
  prefs: []
  type: TYPE_NORMAL
