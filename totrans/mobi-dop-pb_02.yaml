- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding the Mobile Ecosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The mobile ecosystem of an app encompasses all the elements it requires to function
    correctly on a mobile device, including the hardware, software, operating system,
    network, and services that make it work. To successfully implement Mobile DevOps
    and meet the needs of your customers, it is imperative to understand the mobile
    ecosystem in order to know the challenges and how to overcome them to deliver
    successful mobile applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Mobile apps are like icebergs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The greatest things about mobile apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The different mobile OSs, frameworks, and platforms in the market
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile app functionalities such as monetization, push notifications, state management,
    deep linking, and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile app architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile apps are like icebergs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In my opinion, a mobile app is similar to an *iceberg*, in that there is an
    apparent part (**the user interface or UI**) and an unseen part (**the code and
    functionalities underneath the UI**). Even though the end user is the only one
    to see the finished product, this analogy often illustrates the amount of effort,
    complexity, and work involved in building and maintaining a mobile application,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – A mobile app is an iceberg](img/Figure_2.01_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – A mobile app is an iceberg
  prefs: []
  type: TYPE_NORMAL
- en: When a user, for instance, downloads an app and begins using it for the first
    time, all they see is its interface, features, and functionalities. The user is
    unable to see much of what is going on behind the scenes, but it is much more
    important than they realize. A mobile application is connected to servers, databases,
    and APIs that allow it to communicate with other apps and devices, retrieve data,
    transmit data, and perform a variety of tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'A **mobile app** is, in its simplest sense, a piece of software that is designed
    to run on a certain platform (such as Android or iOS). Because of this, it requires
    a great deal of coding to be developed. As shown in *Figure 2**.2*, it consists
    of a variety of programming languages, frameworks, libraries, and tools that are
    used to develop the app’s functionality and features:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Mobile app development](img/Figure_2.02_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Mobile app development
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the technical aspects of a mobile app, a lot of work goes into
    its planning, design, testing, and releasing phases as well. Wireframes, prototypes,
    and user flows must be developed and user tests conducted to ensure the app is
    intuitive, user-friendly, and performs well.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve explored the foundations of mobile app development, let’s shift
    our focus to the challenges that most mobile development teams face to build great
    apps.
  prefs: []
  type: TYPE_NORMAL
- en: What makes mobile apps great?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to make a great mobile app, it needs to have a straightforward and
    intuitive UI that is easy to use but it is different from a web app, for the following
    reasons (as also shown in *Figure 2**.3*):'
  prefs: []
  type: TYPE_NORMAL
- en: It’s more critical
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The platform is fragmented
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The tools change frequently
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It iterates rapidly:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.3 – A mobile app is unique](img/Figure_2.03_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – A mobile app is unique
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the nature and complexity of mobile apps, there are a few things to
    consider when looking at what makes mobile apps great, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Mobile apps help users to solve problems or fulfill their needs, and they need
    to be well designed and reliable, with a range of useful features and functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They should be fast, responsive, and able to handle a variety of platforms and
    devices flawlessly without crashing or lagging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is important for mobile apps to be compatible with a wide range of devices
    and platforms so that as many users as possible are able to take advantage of
    them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They are designed to protect sensitive data and prevent unauthorized access
    to it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They need to be updated regularly with new features and improvements in order
    to keep users interested and ensure that they remain relevant in the future
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since we now understand the importance of mobile apps, let’s now take a closer
    look at the platforms and frameworks that are available today on the market and
    what needs to be considered when we implement Mobile DevOps processes and practices.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile platforms and frameworks available today
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As of writing this book, there are a lot of different mobile platforms on the
    market these days, both **native** and **cross-platform**, so let’s take a quick
    look at the differences between them to give you a better understanding of what
    we need to consider when thinking about Mobile DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: I do not want to make this a detailed explanation of mobile development because
    this is a book about Mobile DevOps and there are tons of books about mobile development.
    However, as we mentioned previously, we should be in a position to interpret the
    requirements of different platforms and then implement the DevOps process accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: As a starting point, let’s take a look at native apps such as iOS and Android.
  prefs: []
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we know, **iOS** is the operating system that runs on iPhones and iPads.
    Now, we have the iPadOS for iPads. It is well known that iOS is compatible with
    other Apple products besides its user-friendly interface, integration with other
    Apple products, and the vast selection of apps that are available through the
    App Store. While I am writing this book, the latest version of iOS is version
    *16*.
  prefs: []
  type: TYPE_NORMAL
- en: When developing, testing, and releasing iOS apps, it is imperative that you
    always have the latest version of macOS with the latest SDKs and tools to meet
    the app requirements, which can be a big challenge when it comes to mobile CI/CD,
    because if you want to build and release iOS apps, then you need to always be
    on the latest.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid wasting developer time setting up and maintaining infrastructure for
    our mobile CI/CD platform, we should always look for a platform that is ready
    to use. We will dive deep into how we can choose a suitable CI/CD provider for
    our team in [*Chapter 4*](B18113_04.xhtml#_idTextAnchor118), *Achieving Continuous
    Integration and Delivery with* *Mobile DevOps*.
  prefs: []
  type: TYPE_NORMAL
- en: New features available with iOS 16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In September 2022, Apple released its new operating system, *iOS 16*. This
    version of the iOS operating system was announced at Apple’s *WWDC22* conference
    ([https://developer.apple.com/videos/wwdc2022/](https://developer.apple.com/videos/wwdc2022/)).
    iOS consists of features and performance improvements that are available on a
    wide range of devices, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**New Lock Screen**: You can now create complications for Apple Watch and widgets
    for the iPhone Lock Screen using WidgetKit, extending the glanceable experience
    and embracing SwiftUI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tap to Pay on iPhone**: With Apple Pay, Apple Watch, and other digital wallets
    on iPhone, payment apps can now accept contactless payments through contactless
    credit and debit cards'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SwiftCharts** is a powerful and concise SwiftUI framework for transforming
    your data into informative visualizations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maps in 3D**: Experience the highly detailed 3D city experience on the all-new
    map'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App Intents** will provide your users with the ability to perform quick tasks
    by only speaking or tapping your app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved in-app purchase experiences with new APIs and enhancements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use **live text** in videos and apps to perform simple tasks such as copying
    and pasting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All of these come with new features and enhancements in security, accessibility,
    and privacy to help developers build secure and rich iOS apps. All the details
    can be found here: [https://www.apple.com/ios/ios-16/features/](https://www.apple.com/ios/ios-16/features/).'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to mentioning the new features here, I also want to stress the fact
    that we have different challenges in UI testing of these features, such as UI
    testing of widgets and charts as well as Lock Screens, and that’s why we always
    need to think bigger when it comes to what the next challenge might be.
  prefs: []
  type: TYPE_NORMAL
- en: Just be prepared for a new version of iOS to be released during the time you
    are reading this book.
  prefs: []
  type: TYPE_NORMAL
- en: Besides the preceding features in iOS 16, Apple also released the latest version
    of **Xcode**, which is *15* ([https://apps.apple.com/us/app/xcode/id497799835?mt=12/](https://apps.apple.com/us/app/xcode/id497799835?mt=12/))
    while writing the book, the main developer IDE to develop iOS, tvOS, iPadOS, watchOS,
    or macOS apps. The Xcode binary is 30% smaller than before, so you can start faster
    than ever. With downloadable simulator runtimes for watchOS and tvOS, Xcode gives
    developers access to the latest platforms at their fingertips. And one of the
    important features is configuring a multiplatform app with a single app target.
    Let’s learn more about what a multiplatform app is.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a multiplatform app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With a multiplatform app ([https://developer.apple.com/documentation/xcode/configuring-a-multiplatform-app-target](https://developer.apple.com/documentation/xcode/configuring-a-multiplatform-app-target)),
    you can share your app’s project settings and code across platforms with the use
    of a multiplatform target, as shown in *Figure 2**.4*, which will allow you to
    expand the experience of your app across multiple platforms supported by the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Multiplatform target](img/Figure_2.04_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Multiplatform target
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'watchOS apps remain on a separate target, despite the fact that iOS, iPadOS,
    macOS, and tvOS apps can share one target. More information can be found here:
    [https://developer.apple.com/documentation/Xcode/configuring-a-multiplatform-app-target](https://developer.apple.com/documentation/Xcode/configuring-a-multiplatform-app-target).'
  prefs: []
  type: TYPE_NORMAL
- en: We should take this into consideration when designing the CI/CD pipeline since
    we need to consider the **code signing** mechanism, **certificates**, and **provision
    profiles** for each target, as well as the steps that must be taken when archiving
    or building the application for testing.
  prefs: []
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Android** ([https://www.android.com/](https://www.android.com/)) operating
    system is an open source platform developed by Google for smartphones and tablets.
    This operating system, based on the Linux kernel, is primarily intended for mobile
    devices but it has also been implemented in watches, TVs, cars, and other equipments.
    There are many reasons why Android is so popular, including the ability to customize
    your device, and the wide selection of apps available through the Google Play
    Store.
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative version of the Android operating system, there is **Android
    Go** ([https://www.android.com/versions/go-edition/](https://www.android.com/versions/go-edition/)),
    which is designed to run smoothly on *low-spec* smartphones and tablets that have
    *limited resources*. With a *lighter* version of the Google Play Store, Google
    apps, and a wide range of apps optimized for low-end devices, it is designed to
    run smoothly on entry-level smartphones and tablets with limited resources.
  prefs: []
  type: TYPE_NORMAL
- en: The main objective of Android Go is to provide a smooth user experience that
    is reliable and easy to use for users with limited resources.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about how to develop an app for Android Go here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.android.com/guide/topics/androidgo/develop](https://developer.android.com/guide/topics/androidgo/develop)'
  prefs: []
  type: TYPE_NORMAL
- en: New features available with Android 13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Likewise, iOS always has the latest version of Android, including new features
    and enhancements to existing ones. Let’s explore a few of them together:'
  prefs: []
  type: TYPE_NORMAL
- en: As part of Android 13, Material You ([https://material.io/blog/announcing-material-you](https://material.io/blog/announcing-material-you))
    is incorporated into the operating system’s look and style. By customizing non-Google
    apps, you can make your home screen more cohesive and unique by matching the theme
    and colors you have chosen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you copy sensitive information such as your email address, phone number,
    or username and password, Android automatically clears your clipboard history
    after a period of time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s even easier to multitask on your tablet now that Android 13 is available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'And there’s much more—you can find details of all the new features at the following
    link: [https://www.android.com/android-13/#a13-highlights](https://www.android.com/android-13/#a13-highlights).
    You can check all releases and versions at the following link: [https://developer.android.com/about/versions](https://developer.android.com/about/versions).'
  prefs: []
  type: TYPE_NORMAL
- en: In terms of CI/CD, Android can be built on various operating systems such as
    macOS, Windows, or Linux, but in order to build Android apps, you’ll need to have
    the SDKs and tools for Android, such as **Gradle**, which is the official and
    main tool for Android app development.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s examine the applications that can run on multiple platforms or cross-platform
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Flutter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Flutter** ([https://flutter.dev/](https://flutter.dev/)) is a framework for
    developing mobile apps founded by Google. The Flutter platform enables developers
    to create mobile applications for Android and iOS that are highly responsive,
    visually appealing, and high performing, as well as desktop applications for macOS
    and Windows, web applications, and embedded applications, all from a single source
    of code ([https://flutter.dev/multi-platform/](https://flutter.dev/multi-platform/)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result, Flutter is an ecosystem where you can build six apps from a single
    code base. As shown in *Figure 2**.5*, with Flutter you can build web, mobile
    embedded apps, and desktop apps(Windows, macOS, and Linux):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Flutter multiplatform](img/Figure_2.05_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Flutter multiplatform
  prefs: []
  type: TYPE_NORMAL
- en: Flutter uses the **Dart** programming language ([https://dart.dev/](https://dart.dev/))
    and features a reactive programming model, allowing for smooth and seamless app
    interactions. It also includes a wide range of customizable widgets and tools
    for building UIs, as well as access to native device features such as camera and
    storage.
  prefs: []
  type: TYPE_NORMAL
- en: Flutter is an excellent tool to help you build web applications such as **progressive
    web apps** (**PWAs**) and extend your existing mobile apps to the web, but the
    web itself is a flexible platform.
  prefs: []
  type: TYPE_NORMAL
- en: It is challenging to think about the CI/CD pipeline when it comes to Flutter
    because each app requires specific tools and pre-requests when it comes to releasing
    it. Since Flutter has iOS apps, it also requires macOS machines with the latest
    tools and SDKs as well. For instance, with the Flutter SDK, Linux requires different
    tools in addition to the Flutter SDK, and for sure with Windows, you will need
    to have the Windows OS in order to build the app.
  prefs: []
  type: TYPE_NORMAL
- en: React Native
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **React Native** framework ([https://reactnative.dev/](https://reactnative.dev/))
    is one of Facebook’s most popular frameworks since it allows developers to build
    native-like apps using JavaScript and the React library. React Native uses declarative
    programming and includes a large set of components and tools for creating high-performance
    applications. At this link, you can explore who is using React Native, such as
    Shopify, Microsoft, Facebook (Meta), and more: [https://reactnative.dev/showcase](https://reactnative.dev/showcase).
    As shown in *Figure 2**.6*, you can build iOS and Android apps from one single
    code base with React Native and JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – React Native framework](img/Figure_2.06_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – React Native framework
  prefs: []
  type: TYPE_NORMAL
- en: A new version of React Native, 0.72.4 ([https://github.com/facebook/react-native/releases](https://github.com/facebook/react-native/releases)),
    has been announced by the React Native team recently. Several improvements come
    with this version, including a new unified configuration for CodeGen, as well
    as CMake support for Android builds, and new documentation for the new architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, they announced a new architecture because the old architecture
    had several challenges, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Data being submitted *asynchronously* to the bridge and then asynchronously
    *waiting* for it to be processed by the other layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since JS was single-threaded, all computations in that world happened in that
    thread
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It was decided that JSON would be the best format for simplicity and human readability,
    but it did impose some overhead as every time one layer had to use the other,
    it had to serialize some data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In spite of this, there will be several benefits associated with the new architecture,
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The execution of *synchronous* functions is now possible. In the past, these
    functions were asynchronous.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The new architecture does not have to serialize or deserialize data anymore,
    so there is no serialization tax to pay.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By using C++, it is now possible to abstract all the *platform-agnostic* code
    and to share it easily between platforms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A layer of code automatically generated from one or more JavaScript specifications
    is included to ensure JavaScript can invoke C++ methods and vice versa.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Read more about the new architecture at this link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://reactnative.dev/docs/next/the-new-architecture/why](https://reactnative.dev/docs/next/the-new-architecture/why
    )'
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s one more enhancement in the build time: from **React Native 0.71**
    onward, you will be able to consume prebuilt artifacts coming from **Maven Central**,
    which can be consumed from Android. As a result, the new architecture ([https://github.com/reactwg/react-native-new-architecture/discussions/105](https://github.com/reactwg/react-native-new-architecture/discussions/105))
    has seen massive improvements in build time.'
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, **Shopify** ([https://www.shopify.com/](https://www.shopify.com/))
    announced recently that its whole mobile app had been migrated over to React Native.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The following link explains in detail why Shopify did it, how it got there,
    and what the company gained from it: [https://shopify.engineering/migrating-our-largest-Mobile-app-to-React-Native](https://shopify.engineering/migrating-our-largest-Mobile-app-to-React-Native).'
  prefs: []
  type: TYPE_NORMAL
- en: Ionic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Ionic** offers integrations with major frameworks, including **Angular**,
    **React**, and **Vue**, to provide high-quality, performant mobile apps using
    web technologies. Ionic Framework ([https://ionicframework.com/docs/](https://ionicframework.com/docs/))
    has a complete UI toolkit for building high-quality, performant mobile apps, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Ionic Framework](img/Figure_2.07_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – Ionic Framework
  prefs: []
  type: TYPE_NORMAL
- en: For developers who are building mobile apps, the advantage of using Ionic is
    that it offers a wide variety of pre-designed UI components and layouts so that
    they can easily develop apps that are user-friendly and visually appealing. In
    addition, Ionic has an active and large community that offers a variety of plugins
    and resources to extend its functionality in a wide range of ways.
  prefs: []
  type: TYPE_NORMAL
- en: A native app for Ionic Framework can be distributed via app stores and run on
    mobile devices as well since Ionic apps are usually deployed as native apps. As
    well as offering tools and services for developing PWAs, which are web applications
    that work offline like native applications and can be installed as native applications
    on a device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ionic has **Capacitor** ([https://capacitorjs.com/](https://capacitorjs.com/)),
    an open source cross-platform app runtime that allows web-based apps to run natively
    on iOS and Android. It’s helpful to refer to these apps as native **PWAs**, as
    they represent the next evolution beyond the traditional hybrid app mentality,
    as shown in *Figure 2**.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Ionic and Capacitor](img/Figure_2.08_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – Ionic and Capacitor
  prefs: []
  type: TYPE_NORMAL
- en: For Ionic CI/CD, **Appflow** ([https://ionic.io/appflow](https://ionic.io/appflow))
    allows teams to build apps with hybrid mobile architectures, including Cordova,
    Capacitor, and React Native apps. Don’t worry—in [*Chapter 4*](B18113_04.xhtml#_idTextAnchor118),
    *Achieving Continuous Integration and Delivery with Mobile DevOps*, we will learn
    more about Appflow and how to use it with Ionic apps.
  prefs: []
  type: TYPE_NORMAL
- en: Cordova
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Cordova** framework ([https://cordova.apache.org/](https://cordova.apache.org/))
    allows you to develop cross-platform applications using standard web technologies
    such as HTML5, CSS3, and JavaScript, as shown in *Figure 2**.9*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'More information can be found at this link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://cordova.apache.org/docs/en/11.x/guide/overview/index.html](http://cordova.apache.org/docs/en/11.x/guide/overview/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each platform is targeted with its own wrapper, which provides access to sensors,
    data, network status, and so on, using standards-compliant API bindings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Cordova framework](img/Figure_2.09_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – Cordova framework
  prefs: []
  type: TYPE_NORMAL
- en: 'Apache Cordova can be used if you want to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Extend your mobile application across multiple platforms; you don’t have to
    re-implement it with each platform’s language and tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop an app for distribution in app stores by packaging it for web deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As part of the Cordova community, a variety of plugins have also been developed
    to extend the features of Cordova apps, such as accessing native device features
    such as the camera, GPS, and accelerometer through Cordova plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'At this link, you can find a comparison between Cordova and Capacitor from
    Ionic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://ionic.io/enterprise-guide/capacitor-vs-cordova](https://ionic.io/enterprise-guide/capacitor-vs-cordova)'
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the **Xamarin** framework ([https://dotnet.microsoft.com/en-us/apps/xamarin](https://dotnet.microsoft.com/en-us/apps/xamarin)),
    developers are able to write code in C# and share it across multiple platforms
    by using platform-specific APIs to access native features and capabilities of
    the platform, as shown in *Figure 2**.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10 – Xamarin framework](img/Figure_2.10_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – Xamarin framework
  prefs: []
  type: TYPE_NORMAL
- en: As a part of its Xamarin.Forms toolkit, Xamarin provides developers with the
    ability to define UI layouts for their apps that can be reused across multiple
    platforms using a single UI toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: Is Xamarin dead or alive?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Recently, we noticed that Microsoft announced that if you want to build native,
    cross-platform desktop and mobile apps from a single code base, you can use **.****NET
    MAUI**.
  prefs: []
  type: TYPE_NORMAL
- en: So, we assumed that maybe it is the end of Xamarin, but actually, it is the
    beginning of .NET MAUI.
  prefs: []
  type: TYPE_NORMAL
- en: As shown in *Figure 2**.11*, .NET MAUI ([https://dotnet.microsoft.com/en-us/apps/maui](https://dotnet.microsoft.com/en-us/apps/maui))
    is designed to replace Xamarin.Forms and provide a more modern, feature-rich,
    and consistent UI toolkit for building mobile apps that run on iOS, Android, and
    Windows platforms.
  prefs: []
  type: TYPE_NORMAL
- en: '.NET MAUI is built on top of .NET 6, but the current version of the framework
    at the time of writing is .NET 7 ([https://dotnet.microsoft.com/en-us/download](https://dotnet.microsoft.com/en-us/download)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Multiplatform target](img/Figure_2.11_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – Multiplatform target
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'To migrate your app from Xamarin with .NET MAUI, visit the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://learn.microsoft.com/en-us/dotnet/maui/get-started/migrate?view=net-maui-7.0](https://learn.microsoft.com/en-us/dotnet/maui/get-started/migrate?view=net-maui-7.0)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the differences between Xamarin, React Native, Ionic, Cordova, and
    Capacitor are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Xamarin, React Native, Ionic, Cordova, and Capacitor](img/Figure_2.12_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – Xamarin, React Native, Ionic, Cordova, and Capacitor
  prefs: []
  type: TYPE_NORMAL
- en: As we discussed previously, different frameworks use web technologies such as
    HTML, JavaScript, and CSS in building mobile apps to mimic the experience of native
    apps. Let’s explain the concept behind PWAs.
  prefs: []
  type: TYPE_NORMAL
- en: PWAs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A PWA ([https://web.dev/progressive-web-apps/](https://web.dev/progressive-web-apps/))
    is a web application that is designed to mimic the experience of native apps.
    In addition to the fact that they can work on any device, regardless of whether
    it supports modern web standards, they are also referred to as *progressive* because
    they become more powerful as the device on which they are running becomes more
    powerful.
  prefs: []
  type: TYPE_NORMAL
- en: 'PWAs are accessed through a web browser by using web technologies such as HTML,
    CSS, and JavaScript. Users can also install them on their devices and use them
    as native apps with features such as offline support, push notifications, and
    access to hardware such as cameras and microphones, as shown in *Figure 2**.13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13 – PWAs](img/Figure_2.13_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.13 – PWAs
  prefs: []
  type: TYPE_NORMAL
- en: Among the main advantages of PWAs is that they are *easy to distribute and install*
    because they *do not require* an app store to download. This allows users to use
    the app more easily, and it also allows for faster updates and more flexibility
    when it comes to design and functionality.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to offering many of the same benefits as native apps, PWAs can be
    easily accessed through a web browser, which makes them increasingly popular for
    building mobile apps. In cases where businesses or organizations want to provide
    their users with a mobile app experience but cannot afford to build and maintain
    separate native apps for different platforms, they can use them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few examples of popular PWAs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Twitter Lite**: This is an extremely lightweight version of the Twitter app
    that can be accessed directly from any device with a web browser'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Starbucks**: This lets users order, pay, and track purchases from their mobile
    devices using the Starbucks PWA'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trivago**: This lets users search for hotels and book them, as well as access
    their past bookings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Since there are a lot of books, articles, or videos talking about cross-platform
    frameworks, I will not waste your time by comparing them, but I would recommend
    choosing a framework based on the nature of the application, the business, the
    goal, and the target audience, as well as the skill level of the team.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have briefly explored the different mobile app OSs, frameworks, and platforms,
    let’s look at the most valuable features of mobile apps.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile apps’ most valuable features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are numerous valuable features included in mobile apps that cater to the
    diverse needs and preferences of users. Some of the most useful features are described
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Large screens and foldable devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to make your app work well on a larger screen and foldable devices,
    you’ll need to make sure it’s optimized to work on different screen sizes. This
    might mean redesigning your layout to make the most of the extra screen space
    or setting your app to work on both portrait and landscape screens.
  prefs: []
  type: TYPE_NORMAL
- en: 'Foldables offer new ways for users to interact with their devices, such as
    being able to use them in **folded** or **unfolded** modes. As shown in *Figure
    2**.14*, when a foldable device is folded, it can affect the way your app is displayed
    and used. Make sure you consider this when designing your app, and test to ensure
    it works smoothly when the device is folded and unfolded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.14 – Foldable device](img/Figure_2.14_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – Foldable device
  prefs: []
  type: TYPE_NORMAL
- en: To ensure that your app looks good and works well on large screens and foldable
    devices, follow the design guidelines for the platform on which you are developing,
    such as Android ([https://developer.android.com/guide/topics/large-screens/get-started-with-large-screens](https://developer.android.com/guide/topics/large-screens/get-started-with-large-screens)).
    Providing a consistent user experience will help your app feel cohesive with the
    rest of the operating system. You may also need to invest in some additional hardware
    for the best results.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, developers must ensure their apps are *compatible with older devices
    without foldable screens*, even though foldable mobile devices are a relatively
    new technology. In order to ensure that an app works correctly on all devices,
    we need to develop and test different versions of the app. In this case, test
    automation can assist with achieving this goal.
  prefs: []
  type: TYPE_NORMAL
- en: Due to this, QA engineers will need to ensure that apps and automated tests
    will help them achieve this goal when testing apps on large screens and foldable
    devices. The challenge can be overcome by using screenshot testing or an **artificial
    intelligence** (**AI**) testing tool that detects UI screens and compares them.
    In [*Chapter 5*](B18113_05.xhtml#_idTextAnchor138), *Implementing a Robust Mobile
    App Testing Strategy*, we will cover testing practices for large screens and foldable
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: Deep links
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In mobile apps, **deep links** are links that allow users to access specific
    content or functions within an app by clicking on a link within the app, rather
    than having to navigate the app manually to reach the relevant content.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of ways in which deep links can be used to promote content
    within an app or allow users to access specific features or functions within an
    app. They can be included in email campaigns, social media posts, or other types
    of marketing material to encourage users to engage with the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to improving the user experience, deep links can be used to direct
    users to content or functions that they wish to access quickly and easily. A deep
    link may, for example, be used to direct users to a specific product page within
    an e-commerce app or to a specific screen within a game, as shown in *Figure 2**.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15 – How deep links work](img/Figure_2.15_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.15 – How deep links work
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that in order to use deep links, the app must be installed
    on the user’s device. If the app is not installed, the deep link will normally
    redirect the user to the app store to download the app.
  prefs: []
  type: TYPE_NORMAL
- en: Another challenge for developers and QA engineers is how to test deep links,
    which will be discussed in [*Chapter 5*](B18113_05.xhtml#_idTextAnchor138), *Implementing
    a Robust Mobile App* *Testing Strategy*.
  prefs: []
  type: TYPE_NORMAL
- en: Fragmentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is common for iOS and Android apps to fragment across devices and operating
    systems. It is essential to test mobile applications more frequently due to OS
    upgrades and the release of new devices. The fragmentation of devices and hardware-related
    bugs on Android and iOS are common problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'The manufacturer of the device, the screen size, the connection type, the battery
    life, the resolution, and the version of the operating system may differ, as shown
    in *Figure 2**.16*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.16 – Devices and OS fragmentation](img/Figure_2.16_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.16 – Devices and OS fragmentation
  prefs: []
  type: TYPE_NORMAL
- en: For developers, it can be challenging to develop and maintain applications that
    work across all devices and operating systems as fragmentation can make it hard
    for them to create and maintain them. For instance, an app that works perfectly
    on one device might have performance issues or display problems on another device
    with a different configuration.
  prefs: []
  type: TYPE_NORMAL
- en: It is highly important that the teams test their mobile apps early and frequently
    on different devices and OS versions to increase the test coverage and ensure
    that our mobile apps behave correctly.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to fragmentation, businesses may lose potential customers and revenue
    due to unsupported devices and operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, you can use cloud device services to set up different devices
    and OS versions to ensure that you are supporting the desired devices. We will
    examine together the different types of device labs available on the market in
    [*Chapter 5*](B18113_05.xhtml#_idTextAnchor138), *Implementing a Robust Mobile
    App* *Testing Strategy*.
  prefs: []
  type: TYPE_NORMAL
- en: Localization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A mobile app’s **localization** refers to the process of adapting it to a specific
    language or culture, as shown in *Figure 2**.17*. Among the tasks involved are
    translating the text and interface of the app, adapting images and graphics to
    meet different cultural conventions, and adjusting the app’s functionality to
    meet local requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to localize mobile apps for different reasons, as explained
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: It helps to reach a wider audience, which can help you expand your user base
    and reach a wider audience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It improves the user experience for users who are not fluent in the language
    of the app, as well as improving the experience of users who are fluent in the
    app’s language. By providing content in the native language of the app, users
    can feel more connected to the app as they can receive content that pertains to
    their culture and language:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.17 – Localization](img/Figure_2.17_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.17 – Localization
  prefs: []
  type: TYPE_NORMAL
- en: To localize a mobile app, several factors need to be taken into consideration,
    including the languages and cultures that you intend to target, the resources
    and budget that you have available, and technical challenges that may arise during
    localization.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you will need to think about the possibility of maintaining and
    updating the localized versions of your application over time, as languages and
    cultures can change and evolve. [*Chapter 5*](B18113_05.xhtml#_idTextAnchor138),
    *Implementing a Robust Mobile App Testing Strategy*, discusses how to test mobile
    apps for localization using screenshots and other methods.
  prefs: []
  type: TYPE_NORMAL
- en: Accessibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In mobile apps, **accessibility** refers to the development and design of apps
    that are accessible to people with disabilities, such as vision or hearing impairments,
    as shown in *Figure 2**.18*. You must ensure that your mobile app is accessible
    because it will allow a wider audience to use and benefit from it, as well as
    improve the user experience for everyone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.18 – Accessibility](img/Figure_2.18_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.18 – Accessibility
  prefs: []
  type: TYPE_NORMAL
- en: 'Mobile apps can be made accessible in several ways, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: For users with vision impairments, it is especially important to make sure that
    the *text is properly formatted and that there is enough contrast between the
    text and* *the background*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To ensure that users with vision impairments can understand the content, provide
    *alternative text for images, videos, and* *other media*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users with hearing impairments may benefit from *captions and transcripts for
    audio and* *video content*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Language should be clear and concise*. Avoid jargon or technical terms that
    may be confusing to some users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Follow accessibility guidelines* and best practices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Test it with assistive technologies*, such as screen readers or text-to-speech
    software. In [*Chapter 5*](B18113_05.xhtml#_idTextAnchor138), *Implementing a
    Robust Mobile App Testing Strategy*, we will discuss this point in greater detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By implementing these and other accessibility measures, you can ensure that
    your mobile app is accessible to a wider audience and improve the user experience
    for all users.
  prefs: []
  type: TYPE_NORMAL
- en: Push notifications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **push notification** is a message sent from a server to a mobile device informing
    the user of new content, transactions, events, or updates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Users can receive push notifications when new emails arrive, tasks are completed,
    or new features are available. Push notifications can be used to promote products
    and services or to encourage users to use an app, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.19 – Push notifications](img/Figure_2.19_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.19 – Push notifications
  prefs: []
  type: TYPE_NORMAL
- en: Push notifications can only be received if users opt for and grant permission
    to the app to send them. In most cases, this can be done in the app’s settings
    or the operating system’s settings.
  prefs: []
  type: TYPE_NORMAL
- en: Users are notified with push notifications even when the app isn’t running,
    which makes them a useful tool for engaging with it. It should not, however, be
    overused and should not be used excessively, as excessive notifications can be
    irritating and may result in users disabling them or uninstalling the app. Testing
    push notifications is challenging, but we will cover it in [*Chapter 5*](B18113_05.xhtml#_idTextAnchor138),
    *Implementing a Robust Mobile App* *Testing Strategy*.
  prefs: []
  type: TYPE_NORMAL
- en: Offline capability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The need for **offline functionality** in mobile apps is often the greatest.
    In addition to the fact that apps must function regardless of whether a user has
    a network connection, some applications, such as fieldwork apps, can be used in
    places where network connectivity is weak or nonexistent, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.20 – Offline-enabled functionality](img/Figure_2.20_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.20 – Offline-enabled functionality
  prefs: []
  type: TYPE_NORMAL
- en: When internet connectivity is unreliable or unavailable, or users do not want
    to incur data charges, this app is designed to function even without an internet
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following strategies can be used by developers to enable offline functionality
    in mobile apps:'
  prefs: []
  type: TYPE_NORMAL
- en: A mobile app can *cache data locally on the device*, such as images or text,
    and access these cached files when the device is offline, enabling users to access
    certain features of the app without connecting to the internet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apps can *synchronize data between devices and servers* when an internet connection
    is available, enabling users to access up-to-date information whenever they are
    online.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The devices can be used as local storage such as *SQLite* devices when apps
    are installed to store data and access it while offline.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The content may be rendered on the server and cached on the device using server-side
    rendering. In some cases, it may be possible for the app to render certain content
    on the server and cache it on the device so that it can display this content even
    when the device is offline.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also challenging to test connectivity because you must use real devices
    in order to test a variety of connectivity types and conditions, which require
    a test lab and a good test design. Don’t worry—this is discussed in detail in
    [*Chapter 5*](B18113_05.xhtml#_idTextAnchor138), *Implementing a Robust Mobile
    App* *Testing Strategy*.
  prefs: []
  type: TYPE_NORMAL
- en: Monetization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The goal of **monetization** is to generate revenue for the app developer while
    providing value to the user. Monetization strategies vary depending on the app
    and its audience and may involve a combination of different methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'In-app purchases are a type of feature that allows users to purchase additional
    content or features within a mobile application. These purchases are made directly
    from within the app and are typically processed through the user’s app store account,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.21 – Monetization](img/Figure_2.21_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.21 – Monetization
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to make in-app purchases using a variety of payment methods,
    such as credit cards, PayPal, or mobile payment services such as Apple Pay. Developers
    can set the price for in-app purchases, and they can be one-time purchases or
    subscriptions.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18113_05.xhtml#_idTextAnchor138), *Implementing a Robust Mobile
    App Testing Strategy*, will discuss how to test in-app purchases for both Android
    and iOS devices and what you need to do in order to do so.'
  prefs: []
  type: TYPE_NORMAL
- en: Modularization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In mobile apps, **modularization** refers to the *division of an app into smaller,
    independent modules or components*. The code can be more easily reused in other
    parts of the app or future projects, saving time and effort.
  prefs: []
  type: TYPE_NORMAL
- en: The modularization process can also help to *increase an app’s performance*
    by allowing you to load only the modules you need at a given time, as opposed
    to loading the entire app in one go. As a result, you can make changes to one
    module without affecting the rest of the application, making it easier to maintain
    and update the app over time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The interaction between the different modules can then be managed by using
    techniques such as **dependency injection** (**DI**) or **inversion of control**
    (**IoC**), as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.22 – Modularized app architecture](img/Figure_2.22_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.22 – Modularized app architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'Mobile app development can benefit from modular architecture in several ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The ability to reuse modules* across different parts of the app or across
    different apps reduces the need to write new code and speeds up development'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modular architecture *simplifies the maintenance and updating of applications*
    because changes can be made to individual modules without affecting the entire
    application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By adding new modules or modifying existing ones, the *modular architecture
    enables the app to scale as it grows* *and evolves*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is easier to test an app with a modular architecture because *each module
    can be tested separately, reducing the risk of errors* *or bugs*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information, you can visit the following link—for instance, to view
    how to modularize the Android app: [https://developer.android.com/topic/modularization](https://developer.android.com/topic/modularization).'
  prefs: []
  type: TYPE_NORMAL
- en: Performance optimization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As users expect mobile apps to be responsive and fast, **performance** is an
    important consideration.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to test applications on a variety of devices and networks to
    ensure that it is performing well under real-world conditions. There are various
    mobile performance optimization tools and libraries, such as **Flipper** ([https://github.com/facebook/flipper](https://github.com/facebook/flipper)),
    which can be used for the same. Additionally, there are different practices we
    can use to optimize mobile apps’ performance, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Caching** reduces the number of network requests made by an app and improves
    its overall performance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write clean, efficient code to minimize resource usage and reduce the app’s
    load time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using **profiling tools** can reveal any bottlenecks or problems with an app
    and provide detailed information about how it is performing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using smaller, more optimized versions of images and videos in the app will
    *minimize the use* *of resources*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can identify and diagnose performance issues in an application with the
    help of a **performance** **monitoring tool**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you *reduce the app’s size*, its download and installation times will be
    faster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will be discussed in the next chapters how caching can be used to improve
    the build process of an application, particularly in the CI/CD pipeline, and how
    tools can be used to reduce the size and performance of the app.
  prefs: []
  type: TYPE_NORMAL
- en: As we discussed that modularization refers to the division of an app into smaller,
    independent modules or components, it’s important to know the mobile app architecture
    and what are the considerations and factors to design a good mobile app.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile app architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is the architecture of a mobile app that describes how the app is designed
    and structured, as shown in the following screenshot. It includes all the components
    and the relationships between them, as well as the design patterns and frameworks
    that have been selected for development:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.23 – Example of architecting a shopping app](img/Figure_2.23_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.23 – Example of architecting a shopping app
  prefs: []
  type: TYPE_NORMAL
- en: 'Designing the architecture of a mobile app requires consideration of several
    factors, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The architecture will be influenced by the platform the app is developed and
    runs on (for example, iOS; Android)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Components and design patterns will be determined by the functionality of the
    app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A well-designed architecture should consider the app’s performance when designing
    the architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A scalable architecture is important as the app grows in popularity and usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A list of a few best practices for mobile app architecture is provided here:'
  prefs: []
  type: TYPE_NORMAL
- en: Design your app so that it can be easily updated or replaced by dividing it
    into smaller, independent modules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make your code base easy to read and maintain by using clear naming conventions
    and following established coding standards.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider using a **minimum viable product** approach. Start with the minimum
    set of features that your users will find valuable and iterate as needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure your app is scalable, and make sure it can handle large data volumes
    and multiple users without slowing down.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapt your design to new technology and features: use an architecture that
    is flexible and adaptable. There are a variety of architectures available for
    mobile development based on the platform, such as the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model-View-Controller** (**MVC**) ([https://shorturl.at/bjuO0](https://shorturl.at/bjuO0))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model-View-Presenter** (**MVP**) ([https://shorturl.at/hkHWX](https://shorturl.at/hkHWX))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model-View-ViewModel** (**MVVM**) ([https://shorturl.at/fptP2](https://shorturl.at/fptP2))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View-Interactor-Presenter-Entity-Routing** (**VIPER**) ([https://www.objc.io/issues/13-architecture/viper/](https://www.objc.io/issues/13-architecture/viper/))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View - Interactor - Presenter** (**VIP**) ([https://github.com/thetay55/VIP-Architecture/blob/master/VIP_Architecture.md](https://github.com/thetay55/VIP-Architecture/blob/master/VIP_Architecture.md))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Composable** ([https://github.com/pointfreeco/swift-composable-architecture](https://github.com/pointfreeco/swift-composable-architecture))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Redux** ([https://www.kodeco.com/books/advanced-ios-app-architecture/v3.0/chapters/6-architecture-redux](https://www.kodeco.com/books/advanced-ios-app-architecture/v3.0/chapters/6-architecture-redux))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure your app is reliable by using automated testing and continuous integration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a maintainable architecture with design patterns and practices that make
    updating and maintaining the app easier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make your app more flexible and testable by using DI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that the networking layer between your backend and your frontend is robust
    and efficient.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that your app data is stored in an efficient and reliable database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve the user experience by implementing a robust error-handling mechanism.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting and debugging can be made easier with the help of powerful logging
    mechanisms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to provide their customers with a better user experience, mobile app
    developers should adhere to these practices to make their apps perform better
    and deliver a better user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we embark on this journey together, exploring the intricate world of mobile
    platforms, frameworks, and unique functions of mobile devices, it becomes increasingly
    apparent that these present a multitude of challenges for those in the field of
    mobile development, including developers, QA engineers, release engineers, and
    others. The complex and constantly evolving nature of these platforms and technologies
    demands that we stay vigilant and proactive in our approach, consistently seeking
    new and innovative solutions to overcome obstacles that stand in our way.
  prefs: []
  type: TYPE_NORMAL
- en: One way in which we can tackle these challenges is by utilizing automation to
    streamline and enhance the mobile app development process. Whether it be through
    building, testing, releasing, or monitoring, automation offers a multitude of
    benefits that can greatly assist us in producing high-quality, reliable, and efficient
    mobile applications.
  prefs: []
  type: TYPE_NORMAL
- en: With a thorough understanding of these various mobile platforms, frameworks,
    and functions, we can confidently approach challenges that lie ahead, utilizing
    automation as a powerful tool in our quest to create great mobile apps. So, let
    us continue our exploration and discovery, embracing obstacles and opportunities
    that come our way, and always striving to push the boundaries of what is possible
    in the ever-evolving world of mobile development.
  prefs: []
  type: TYPE_NORMAL
- en: Our next chapter will be about the fundamentals of Mobile DevOps and how the
    practical steps for implementing it will begin in the following chapters.
  prefs: []
  type: TYPE_NORMAL
