["```\nbolt --verbose plan run pecdm::provision –params @params.json\n```", "```\n\"Kernel\": \"windows\"\n```", "```\nos => {\n  architecture => \"x64\",\n  family => \"windows\",\n  hardware => \"x86_64\",\n  name => \"windows\",\n  release => {\n    full => \"10\",\n    major => \"10\"\n  },\n  windows => {\n    display_version => \"21H2\",\n    edition_id => \"Core\",\n    installation_type => \"Client\",\n    product_name => \"Windows 10 Home\",\n    release_id => \"21H2\",\n    system32 => \"C:\\WINDOWS\\system32\"\n  }\n}\n```", "```\nnotify { \"This clients kernel is ${facts[kernel]}\": }\nnotify { \"This client is a member of the os family ${facts[os][family]\": }\n```", "```\nfacts : {\n    blocklist : [ \"disks\", \"dmi.product.serial_number\", \"file system\" ],\n    ttls : [\n        { \"processor\" : 30 days },\n    ]\n}\nglobal : {\n    external-dir     : [ \"/home/david/external1\", \"/home/david/external2\" ],\n    custom-dir       : [ \"/home/david/customtest\" ],\n    no-exernal-facts : false,\n    no-custom-facts  : false,\n    no-ruby          : false\n}\ncli : {\n    debug     : false,\n    trace     : true,\n    verbose   : false,\n    log-level : \"warn\"\n}\nfact-groups : {\n custom-exampleapp : [\"exampleapp1\", \"exampleapp2\"],\n}\n```", "```\ndisks\n- blockdevices\n- disks\n```", "```\nfact 'os.name', took: (0.000007) seconds\nfact 'os.family', took: (0.000006) seconds\nfact 'os.hardware', took: (0.000007) seconds\n```", "```\n---\nApplication :  exampleapp\nUse : Production\nOwner : exampleorg\n```", "```\n{ \"Application\": \"exampleapp\", \"Use\": \"Production\", \"Owner\": \"exampleorg\"}\n```", "```\nApplication=exampleapp\nUse=Production\nOwner=exampleorg\n```", "```\n---\nApplication :\n  Exampleapp\nUse : production\nOwner\n- Exampleorg\n- anotherorg\n  Anotherapp\nUse : Production\nOwner : exampleorg\n```", "```\n#!/bin/bash\necho \"exampleapp_pid = ${pidof exampleapp}\"\necho \"exampleapp_cpu_use = ${ps -C exampleapp} %cpu\"\necho \"exampleapp_memory_use = ${ps -C exampleapp} %mem\"\n```", "```\nWrite-Output \"exampleapp_pid=$((Get-Process explorer).id)\"\nWrite-Output \"exampleapp_cpu=$(Get-Process explorer).cpu)\"\nWrite-Output \"exampleapp_mem=$(Get-Process explorer).pm)\"\n```", "```\nFacter.add('exampleapp_version') do\n  setcode do\n    `exampleapp –version`\n  end\nend\n```", "```\nFacter.add('exampleapp_version') do\n  setcode `exampleapp --version`\nend\n```", "```\nFacter::Core::Execution.execute('exampleapp –version' | awk '{print $2}' )\n```", "```\nFacter::Core::Execution.execute('powershell (Get-WindowsCapability -Online -Name \"Microsoft.Windows.PowerShell.ISE~~~~0.0.1.0\").state')\n```", "```\narch = Facter.value('os.arch')\n```", "```\nconfine <fact_name>: '<fact_value>'\n```", "```\nconfine kernel: 'Windows'\n```", "```\nconfine kernel: ['Linux', 'Solaris']\n```", "```\nconfine Facter.value(:os)['release']['major'] => '10'\n```", "```\nconfine { Facter::Core::Execution.where('git') }\n```", "```\nconfine { File.exist? '/opt/app/exampleapp' }\n```", "```\nFacter.add('whoami') do\n  setcode do\n    confine kernel: 'Windows'\n    confine Facter.value(:os)['release']['major'] => '10'\n    'I am windows 10'\n  end\nend\nFacter.add('whoami') do\n  setcode do\n    confine kernel: 'Sparc'\n    'I am Sparc'\n  end\nend\n```", "```\nrequire 'puppet/util/feature'\nPuppet.features.add(:example_app)\ndo\nwindows= `powershell '(Get-Command exampleapp).source'`.strip\nlinux = `sh -c 'command -v exampleapp`.strip\nwindows.empty? && linux.empty? ? false : true end\n```", "```\nFacter.add('exampleapp) do\nsetcode do\nconfine { Puppet.features.example_app? }\n```", "```\nFacter.add('exampleapp_version') do\nhas_weight 100\nsetcode do\n`exampleapp --version`\nend\nFacter.add('exampleapp_version') do\nhas_weight 50\nsetcode do\n`grep version /etc/exampleapp/exampleapp.conf | awk '{print $2}'`\nend\n```", "```\nsetcode do\n`exampleapp --version`\nrescue\n  nil\n  Facter.warn(\"exampleapp command failed\")\nend\n```", "```\nFacter.add('exampleapp_version', {timeout: 0.2}) do\n```", "```\nFacter::Core::Execution.execute('exampleapp --version', options = {:timeout => 0.2})\n```", "```\nFacter.add(:exampleapp, :type => :aggregate) do\n  Chunk(:version) do\n`exampleapp –version`\n  end\n  Chunk(:fullpath) do\n`which exampleapp`\n  end\nend\n```", "```\nFacter.add(: exampleapp_memory_usuage, :type => :aggregate) do\n  chunk(:exampleapp1_usage) do\n    Facter.value(:exampleapp1_usage)\n  end\n  chunk(:exampleapp2_usage) do\n    Facter.value(:exampleapp2_usage))\n  end\n  aggregate do |chunks|\n    total = 0\n    chunks.each_count do |value|\n      total += value\n    end\n    total\n  end\nend\n```", "```\nFacter.add('exampleapp.version') do\nsetcode do\n`exampleapp --version`\nend\nFacter.add('exampleapp.pid') do\nsetcode do\n`pidof exampleapp`\nend\n```", "```\nbolt file upload path_of_your_fact /path/to/destination --targets windows_server_fqdn linux_sever_fqdn\nbolt task run facts --targets windows_server_fqdn linux_sever_fqdn\n```", "```\nInclude <class name>\nrequire <class name>\ncontain <class name>\ntag <tag name> , *<tag name>\n```", "```\nwarning('code unexpected')\n```", "```\nerror(\"${facts['os']['arch']} is unsupported\")\n```", "```\nfunction_name(argument, *argument)\n```", "```\nargument.function_name(argument, *argument)\n```", "```\nStringwithfour = 'four'.length()\nArray_of_five = Size([8,4,5,7,0])\n```", "```\n$matches = \"a123456\".match(/([a-z]{1})([1-9]{6,8})/)\n```", "```\n$nomatch = \"1a23456\".match(/([a-z]{1})([1-9]{6,8})/)# $matches contains [abc123]\n```", "```\n$multi_match = ['a123456','b1254678','1a23456'].match(/([a-z]{1})([1-9]{6,8})/)\n```", "```\n$highest_number = max( [5,3,88,46] )\n$lowest_letter = ['d','b','a'].min()\n```", "```\n$empty_array = [].empty\n$empty_string =empty('')\n$nonempty_string='not_empty'.empty()\n```", "```\n$numeric_compare = compare(5 , 6)\n$string_compare = compare('A', 'b', false)\n```", "```\n$upper_case = 'UpAnDdOwN'.upcase()\n```", "```\n$capitals =capitalize(['down','miX'])\n```", "```\n$downcase = {'lower' = > 'case', 'Lower => 'Case2}.downcase()\n```", "```\n$camel = camelCase('word1_word2_word3')\n```", "```\n$spaces = \" first second \"\n$left = $spaces.lstrip()\n$right = rstrip($spaces)\n$all = $spaces.strip()\n```", "```\n$usersids = {'admin' => 1, 'operator' => 2, 'viewer' => 3}\n$userids.each |$users| {\n  user { $users[0]:\n    id  => $users[1]\n  }\n}\n```", "```\nfile { '/etc/exampleapp.conf':\n  ensure  => file,\n  content => template(exampleapp/exampleapp.conf.erb')\n}\n```", "```\nfile { '/etc/ntp.conf':\n  ensure  => file,\n  content => inline_epp($exampleapp_conf_template, {'port' => $exampleapp_port, 'debugging' => $exampleapp_debugging_enabled}),\n}\n```", "```\n$exampleapp_proc = { exmpleapp_pids => { 123 => { state => running , user => root } }\nnotice exampleapp_proc.dig('exampleapp_pids','124','state')\n```", "```\ngetvar('facts.os.release.full')\ngetvar('facts.os.release.full','not_found')\n```", "```\ndc_locations = [ 'london','falkirk','portland','belfast']\nnotice ( join(${dc_locations}, \":\")\n```", "```\ndr_locations = [ { London = > [ 'bromley','brentford']},Berlin,['Falkirk','Grangemouth']]\nnotice ( join(${dr_locations}, \"@@\")\n```", "```\n$offices = {'Germany' => 'Berlin', 'Holland' => 'Amsterdam'}\nnotice(keys(${offices})\nnotice($offices.keys())\nnotice(values(${offices})\nnotice($offices.values())\n```", "```\n$exmple_split = north@south.east@west\n$split_on_at = split($example_split, /@/)\n$split_on_fullstop = split($example_split, '[.]'\n$split_on_both = split($example_split, Regexp['[.@]')\n```", "```\n$unordered_numbers = [7,9,8,0,2,4,3,1,5]\n$unordered_strings = ['d','c','b','a']\n$ordered_numbers = $unordered_numbers.sort()\n$ordered_strings = sort($unordered_strings)\n```", "```\n$ascending =(sort([1984,1950,1985,1980]) |$a,$b| { compare($a, $b) })\n$descending = (sort([1984,1950,1985,1980]) |$a,$b| { compare($b, $a) })\n```", "```\n$chained_array = intersection(['first','both']['second','both])\n```", "```\n$union_array = union(['first','both'],['second','both']\n```", "```\n$onetoten = range(1,10)\n$etog = range('E','G')\n$good_trek = ('StarTrek2', 'StarTrek8', 2)\n```", "```\n$truestart = 'server1234'.startswith('server')\n$falseend = 'wales'.endswith('land')\n$trueoptions = 'aws104'.startswith['gcp','az','aws']\n```", "```\n$full_path = 'C:\\Users\\david\\fact.ps1'\n$file_name = basename(${full_path})\n$dir_name = dirname(${full_path})\n$ext =  ${full_path}.extname\n```", "```\nif $facts['os.family'] == 'windows' {\n}else{\n}\n```", "```\nbolt command run \"puppet module install stdlib\" -t windowsclient linuxclient\n```", "```\nbolt puppet apply example_functions.pp -t windowsclient linuxclient\n```", "```\nDeferred( name of function, [arguments])\n```", "```\nuser { 'exampleapp':\npassword => Deferred('vault_lookup::lookup', [\"exampleapp/password\"])\n}\n```", "```\n$deferred =>  Deferred('vault_lookup::lookup', [\"exampleapp/message\"])\nnotify {'this will return the object name':\n  message => \"Secret message is ${deferred\"\n}\nnotify {'this will return the message':\nmessage => $deferred\n}\n```"]