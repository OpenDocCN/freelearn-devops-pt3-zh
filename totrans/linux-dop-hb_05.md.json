["```\n[Unit]\nDescription=Unit File With Custom Target\n[Install]\nWantedBy=multi-user.target\n```", "```\n[Unit]\nDescription=My simple service\n[Install]\nWantedBy=multi-user.target\n```", "```\n[Service]\nExecStart=/usr/local/bin/my-simple-service\nType=simple\n[Install]\nWantedBy=custom.target\n```", "```\n    [Journal]\n    ```", "```\n    Storage=persistent\n    ```", "```\nadmin@myhome:~$ rc-service <service> start\n```", "```\nadmin@myhome:~$ rc-service <service> stop\n```", "```\nadmin@myhome:~$ rc-service <service> status\n```", "```\nadmin@myhome:~$ rc-update add <service> default\n```", "```\nadmin@myhome:~$ rc-update del <service> default\n```", "```\n# Name of the service\nname=\"exampleservice\"\n# Description of the service\ndescription=\"This is my example service\"\n# Start command\nstart() {\n  # Add your start commands\n}\n# Stop command\nstop() {\n  # Add your stop command here\n}\n# Restart command\nrestart() {\n  stop\n  start\n}\n```", "```\nadmin@myhome:~$ rc-update add exampleservice default\n```", "```\n#!/bin/bash\n#\n# my_service       Startup script for the My Service daemon\n#\n# chkconfig: 2345 99 01\n# description: My Service is a custom daemon that performs some important functions.\n# Source function library.\n. /etc/rc.d/init.d/functions\n# Set the service name.\nSERVICE_NAME=my_service\n# Set the path to the service binary.\nSERVICE_BINARY=/usr/local/bin/my_service\n# Set the path to the service configuration file.\nCONFIG_FILE=/etc/my_service/my_service.conf\n# Set the user that the service should run as.\nSERVICE_USER=my_service\n# Set the process ID file.\nPIDFILE=/var/run/my_service.pid\n# Set the log file.\nLOGFILE=/var/log/my_service.log\n```", "```\nstart() {\n  echo -n \"Starting $SERVICE_NAME: \"\n  # Check if the service is already running.\n  if [ -f $PIDFILE ]; then\n    echo \"already running\"\n    return 1\n  fi\n  # Start the service as the specified user and group.\n  daemon --user $SERVICE_USER --group $SERVICE_GROUP $SERVICE_BINARY -c $CONFIG_FILE -l $LOGFILE -p $PIDFILE\n  # Write a lock file to indicate that the service is running.\n  touch $LOCKFILE\n  echo \"done\"\n}\n```", "```\nstop() {\n  echo -n \"Stopping $SERVICE_NAME: \"\n  # Check if the service is running.\n  if [ ! -f $PIDFILE ]; then\n    echo \"not running\"\n    return 1\n  fi\n  # Stop the service.\n  killproc -p $PIDFILE $SERVICE_BINARY\n  # Remove the lock file.\n  rm -f $LOCKFILE\n  # Remove the PID file.\n  rm -f $PIDFILE\n  echo \"done\"\n}\n```", "```\nrestart() {\n  stop\n  start\n}\n```", "```\ncase \"$1\" in\n  start)\n    start\n    ;;\n  stop)\n    stop\n    ;;\n  restart)\n    restart\n    ;;\n  *)\n    echo \"Usage: $0 {start|stop|restart|uninstall}\"\nesac\n```", "```\n#!/bin/bash\n#\n# my_service       Startup script for the My Service daemon\n#\n# chkconfig: 2345 99 01\n# description: My Service is a custom daemon that performs some important functions.\n# Source function library.\n. /lib/lsb/init-functions\n# Set the service name.\nSERVICE_NAME=my_service\n# Set the path to the service binary.\nSERVICE_BINARY=/usr/local/bin/my_service\n# Set the path to the service configuration file.\nCONFIG_FILE=/etc/my_service/my_service.conf\n# Set the user that the service should run as.\nSERVICE_USER=my_service\n# Set the group that the service should run as.\nSERVICE_GROUP=my_service\n```", "```\nstart() {\n  log_daemon_msg \"Starting $SERVICE_NAME\"\n  # Check if the service is already running.\n  if [ -f $PIDFILE ]; then\n    log_failure_msg \"$SERVICE_NAME is already running\"\n    log_end_msg 1\n    return 1\n  fi\n  # Start the service as the specified user and group.\n  start-stop-daemon --start --background --user $SERVICE_USER --group $SERVICE_GROUP --make-pidfile --pidfile $PIDFILE --startas $SERVICE_BINARY -- -c $CONFIG_FILE -l $LOGFILE\n  # Write a lock file to indicate that the service is running.\n  touch $LOCKFILE\n  log_end_msg 0\n}\n```", "```\nstop() {\n  log_daemon_msg \"Stopping $SERVICE_NAME\"\n  # Check if the service is running.\n  if [ ! -f $PIDFILE ]; then\n    log_failure_msg \"$SERVICE_NAME is not running\"\n    log_end_msg 1\n    return 1\n  fi\n  # Stop the service.\n  start-stop-daemon --stop --pidfile $PIDFILE\n  # Remove the lock file.\n  rm -f $LOCKFILE\n  # Remove the PID file.\n  rm -f $PIDFILE\n  log_end_msg 0\n}\n```"]