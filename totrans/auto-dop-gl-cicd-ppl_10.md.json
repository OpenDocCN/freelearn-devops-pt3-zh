["```\ninclude:\n  - template: Verify/Browser-Performance.gitlab-ci.yml\nbrowser_performance:\n  variables:\n    URL: https://myWebOrApiURL.local/\n```", "```\ninclude:\n  - template: Verify/Load-Performance-Testing.gitlab-ci.yml\nload_performance:\n  variables:\n    K6_TEST_FILE: '<PATH TO FILE>' #.gitlab/tests/k6.js\n```", "```\nimport { check, group, sleep } from 'k6';\nimport http from 'k6/http';\n```", "```\nexport const options = {\n  stages: [\n    { duration: '5m', target: 100 },\n    { duration: '10m', target: 100 },\n    { duration: '5m', target: 0 },\n  ],\n  thresholds: {\n    'http_req_duration': ['p(99)<1500']\n  },\n};\n```", "```\nexport default() => {\n  const myResponse = http.get('<MY URL or ENV VAR>').json();\n  check(myResponse, { 'retrieved url: (obj) => obj.length > 0 });\n  sleep(1);\n};\n```", "```\nrequire 'unleash'\nrequire 'unleash/context'\nunleash = Unleash::Client.new({\n  url: 'http://gitlab.com/api/v4/feature_flags/unleash/42',\n  app_name: 'production',\n  instance_id: '29QmjsW6KngPR5JNPMWx'\n})\nunleash_context = Unleash::Context.new\nunleash_context.user_id = \"123\"\nif unleash.is_enabled?(\"my_feature_name\", unleash_context)\n  puts \"Feature enabled\"\nelse\n  puts \"Feature disabled!\"\nend\n```", "```\nFROM alpine:3.13.0\nRUN apk update && mkdir /opt/myTool\nADD . /opt/myTool\nRUN chmod 777 -R /opt/myTool && chmod +x /opt/myTool/$mybinary\nUSER 1001\nCMD [\"echo\", \"This is a purpose-built container. It is meant to be used in a pipeline and not executed.\"]\n```", "```\nContainer_Build:\n  stage: build\n  image: docker:20.10:16\n  services:\n    - docker:20.10:16-dind\n  variables:\n    DOCKER_HOST: tcp://docker:2376\n    DOCKER_TLS_VERIFY: 0\n  script:\n    - docker login -u $CI_REGISTRY_USER –p $CI_REGISTRY_PASSWORD $CI_REGISTRY\n    - docker build -t $CI_REGISTRY_IMAGE:latest .\n    - docker push $CI_REGISTRY_IMAGE:latest\n```", "```\ninclude:\n  - template: Jobs/Container-Scanning.gitlab-ci.yml\n```", "```\nTest_Job:\n  stage: test\n  image: path/to/my/container\n  script:\n    - /opt/myTool/$myBinary\n```", "```\nlane :beta do\n  build_app(Scheme: \"MyApp\") # For iOS\n  gradle( task: 'assemble', build_type: 'Release') # For Android\nend\n```", "```\n\"Build Mobile Applications\":\n  stage: build\n  tags:\n    - my-osx-runner\n  script:\n    - fastlane beta\n```", "```\nlane :appstore do\n  sync_code_signing(type: \"appstore\")\n  build_app(scheme: \"MyApp\")\n  upload_to_app_store\nend\nlane :playstore do\n  gradle(task: 'assemble', build_type: 'Release')\n  upload_to_play_store\nend\n```", "```\n\"Deliver Mobile Applications\":\n  stage: release\n  tags:\n    - my-osx-runner\n  script:\n    - fastlane appstore\n    - fastlane playstore\n```", "```\nlane :iosTest do\n  run_tests( devices: [\"iPhone 6s\", \"iPad Air\"], scheme: \"MyAppTests\")\nend\nlane :androidTests do\n  gradle(task: \"test\")\nend\n```", "```\n\"Test Mobile Applications\":\n  stage: test\n  tags:\n    - my-osx-runner\n  script:\n    - fastlane iOSTests\n    - fastlane androidTests\n```"]