- en: '*Chapter 5*: The Influence of Open and Inner Source on Software Delivery Performance'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '20 years ago, on June 1, 2001, former Microsoft CEO Steve Ballmer said the
    following in an interview with the Chicago Sunday Times:'
  prefs: []
  type: TYPE_NORMAL
- en: '"*Linux is a cancer that attaches itself in an intellectual property sense
    to everything it touches.*"'
  prefs: []
  type: TYPE_NORMAL
- en: '*(Greene T. C. (2001))*'
  prefs: []
  type: TYPE_NORMAL
- en: His concern was not only **Linux** but **open source** licenses in general.
    Now, 20 years later, Microsoft is the single largest contributor to open source
    in the world, beating Facebook, Google, Red Hat, and SUSE. Not only do they have
    many open source products, such as PowerShell, Visual Studio Code, and .NET, they
    also ship a complete Linux kernel with Windows 10 so that you can run any distribution
    on it. Microsoft president Brad Smith admits that "*Microsoft was on the wrong
    side of history when open source exploded at the beginning of the century*" (*Warren
    T. (2020)*).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at the top 10 companies that contribute to open source, you will
    find all the big tech companies that make commercial software:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 5.1 – Open Source Contributor Index, August 2, 2021 (https://opensourceindex.io/)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_05_new.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 5.1 – Open Source Contributor Index, August 2, 2021 (https://opensourceindex.io/)
  prefs: []
  type: TYPE_NORMAL
- en: What has changed in the last two decades, such that important tech companies
    now embrace open source?
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I will explain the history of free and open source software
    and why it has become so important over the last few years. I will explain the
    impact it can have on your engineering velocity and how you can use the principles
    of open source for better cross-team collaboration in your company (inner source).
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: History of free and open source software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difference between open source and open development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits of embracing open source for companies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing an open source strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open and inner source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The importance of insourcing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub Sponsors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: History of free and open source software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand open source, we must go back to the early days of computer science.
  prefs: []
  type: TYPE_NORMAL
- en: Public domain software
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: During the 1950s and 1960s, the price of software was low compared to the necessary
    hardware. Any software that was produced was mainly produced by academics and
    corporate research teams. It was normal for the source code to be distributed
    with the software – normally as **public domain software**. This means that the
    software is freely available without ownership, copyright, trademark, or patent.
    These principles of openness and cooperation had a great influence on the **hacker
    culture** at that time.
  prefs: []
  type: TYPE_NORMAL
- en: In the late 1960s, the rise of operating systems and compilers increased the
    costs of software. This was driven by a growing software industry that competed
    with hardware vendors that bundled their software together with their hardware.
  prefs: []
  type: TYPE_NORMAL
- en: During the 1970s and 1980s, it became common to sell licenses for the use of
    software and in 1983, IBM stopped distributing their source code together with
    purchased software. Other software vendors followed their example.
  prefs: []
  type: TYPE_NORMAL
- en: Free software
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Richard Stallman* was convinced that this is ethically wrong, and he founded
    the **GNU Project** in 1983 and, shortly later, the **free software movement**.
    The free software movement believes that software is considered free if the receiver
    of the software is allowed to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the program for any purpose.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Study the software and change it in any way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redistribute the program and make copies of it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve the software and release the improvements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Richard founded the **Free Software Foundation** (**FSF**) in 1985\. The FSF
    is famous for the following saying:'
  prefs: []
  type: TYPE_NORMAL
- en: '"*Free as in free speech – not free as in free beer.*"'
  prefs: []
  type: TYPE_NORMAL
- en: This means that the word *free* means freedom to distribute and not freedom
    from cost (*Gratis versus libre*). Since much of the free software already was
    free of charge, such gratis software (Freeware) became associated with free software
    and zero cost.
  prefs: []
  type: TYPE_NORMAL
- en: The free software movement created a concept called **copyleft**. This grants
    users the right to use and modify the software, but it preserves the free status
    of the software. Examples of these licenses include the GNU **General Public License**
    (**GPL**), the Apache License, and the **Mozilla Public License** (**MPL**).
  prefs: []
  type: TYPE_NORMAL
- en: Most of the great software that still runs today on millions of devices has
    been distributed with those copyleft licenses; for example, the **Linux kernel**
    (published 1992 by *Linus Torvalds*), BSD, MySQL, and Apache.
  prefs: []
  type: TYPE_NORMAL
- en: Open source software
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In May 1997, at the Linux congress in Würzburg, Germany, *Eric Raymond* introduced
    his paper *The Cathedral and the Bazaar* (*Raymond, E. S. 1999*). He reflected
    on free software principles and the hacker culture and the benefits for software
    development. The paper received a lot of attention and motivated Netscape to release
    its browser, **Netscape Communicator**, as free software.
  prefs: []
  type: TYPE_NORMAL
- en: Raymond and others wanted to bring free software principles to more commercial
    software vendors, but the term *free software* had a negative connotation for
    commercial software companies.
  prefs: []
  type: TYPE_NORMAL
- en: On February 3, 1998, in Palo Alto, many important people from the free software
    movement met for a strategy session to discuss the future of free software. Among
    the participants were *Eric Raymond*, *Michael Tiemann*, and *Christine Peterson*,
    who are credited with proposing the term **open source** in favor of free software.
  prefs: []
  type: TYPE_NORMAL
- en: The **Open Source Initiative** (**OSI**) was founded by *Eric Raymond* and *Bruce
    Perens* in late February 1998, with Raymond as the first president (*OSI 2018*).
  prefs: []
  type: TYPE_NORMAL
- en: In 1998, at publisher *Tim O'Reilly's* historical *Freeware Summit* – later
    named *Open Source Summit* – the term was swiftly adopted by early supports such
    as *Linus Torvalds*, *Larry Wall* (creator of Perl), *Brian Behlendorf* (Apache),
    *Eric Allman* (Sendmail), *Guido van Rossum* (Python), and *Phil Zimmerman* (PGP)
    (*O'Reilly* *1998*).
  prefs: []
  type: TYPE_NORMAL
- en: But *Richard Stallman* and the FSF rejected the new term *open source* (*Richard
    S. 2021*). That's why the **Free Open Source Software** (**FOSS**) movement is
    divided and still uses different terminology today.
  prefs: []
  type: TYPE_NORMAL
- en: In the late 1990s and early 2000s, in the dotcom bubble, the terms **open source**
    and **open source software** (**OSS**) were widely adopted by the public media
    and ended up as the more popular terms.
  prefs: []
  type: TYPE_NORMAL
- en: The rise of open source software
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the last two decades, open source has continuously increased in popularity.
    Software such as Linux and Apache drives most of the internet. In the beginning,
    it was hard to commercialize OSS. The first idea was to provide enterprise-scale
    support services around the open source products. The companies that had success
    with this were Red Hat and MySQL. But it was much harder and didn''t have the
    scale that commercial licensing provided. So, the open source companies that invested
    heavily in building OSS started to create **open core** products: a free, open
    source core product, as well as commercial add-ons, that could be bought by their
    customers.'
  prefs: []
  type: TYPE_NORMAL
- en: The transition of the software business model from classical licenses to **Software
    as a Service** (**SaaS**) subscriptions helped the open source companies commercialize
    their OSS. This motivated traditional software vendors to release their software
    – at least the core – as open source to engage with the community.
  prefs: []
  type: TYPE_NORMAL
- en: Not only did the big software companies such as Microsoft, Google, IBM, and
    Amazon become big open source companies. Pure open source companies such as Red
    Hat and MuleSoft have also gained a lot of worth and market recognition. Red Hat,
    for example, was acquired by IBM in 2018 for 32 billion US dollars. MuleSoft was
    acquired in the same year by Salesforce for $6.5 billion.
  prefs: []
  type: TYPE_NORMAL
- en: So, open source today is not from the revolutionary minds that create alternative,
    free software. Most of the top-notch software that fuels the software and platform
    services of the cloud providers is open source software (*Volpi M. 2019*).
  prefs: []
  type: TYPE_NORMAL
- en: The difference between open source and open development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, OSS refers to computer programs is released under a license that grants
    users the rights to use, study, modify, and share the software and its source
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'But putting your source code in the public under a copyleft license is just
    the first step. If a company wants to have all the benefits of open source, it
    must adopt the open source values, which leads to something that is called **open
    development** or **development in the open**. This means that you do not just
    give access to the source code. Instead, you must make the entire development
    and product management transparent. This includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Architecture and research
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meetings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The .NET team is a good example of a team that hosts their community standup
    on Twitch and YouTube (see [https://dotnet.microsoft.com/live/community-standup](https://dotnet.microsoft.com/live/community-standup)).
  prefs: []
  type: TYPE_NORMAL
- en: '**Open development** also means creating an open and inclusive environment
    in which everyone feels safe to propose changes. This includes a strong code of
    ethics and a clean code base with a high degree of automation that allows everyone
    to quickly and easily contribute.'
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of embracing open source for companies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, how is open source connected to better development performance and how can
    your company benefit from a good open source strategy?
  prefs: []
  type: TYPE_NORMAL
- en: Deliver faster with open source software
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Depending on the sources, new products already consist of 70% to 90% open source
    code. This means that you will write 70% to 90% less code yourself, which can
    increase your time to market significantly.
  prefs: []
  type: TYPE_NORMAL
- en: Besides reusing open source code in your product, a lot of platform tooling
    is available as open source. Reusable GitHub Actions, test tooling, or container
    orchestration… the most efficient and robust tooling you can use to deliver software
    faster is, in most cases, open source software.
  prefs: []
  type: TYPE_NORMAL
- en: Build better products by engaging the community
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you develop some parts of your products in the open, you can leverage the
    hive mind of the community to build better and more secure software. It also helps
    you get early feedback on what you are doing from great engineers around the world.
  prefs: []
  type: TYPE_NORMAL
- en: 'Especially for complicated, critical, and security-relevant software, engaging
    with the community often results in better solutions:'
  prefs: []
  type: TYPE_NORMAL
- en: '"*The bigger the problem, the more open source developers are drawn, like magnets,
    to work on it.*"'
  prefs: []
  type: TYPE_NORMAL
- en: '*(Ahlawat P., Boyne J., Herz D., Schmieg F., & Stephan M. (2021))*'
  prefs: []
  type: TYPE_NORMAL
- en: Use tools with a lower risk of obsolescence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using open source can reduce the risk that a tool becomes obsolete. If you build
    tools yourself, you must maintain them yourself – which is not your priority.
    Using tools from small vendors or having them built by partners introduces the
    risk that the tools do not get maintained or the partner goes out of the market.
    Investing in open source tools instead can significantly reduce these risks.
  prefs: []
  type: TYPE_NORMAL
- en: Attract talent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Giving your engineers the ability to leverage open source in their work and
    contribute to open source projects during their work hours can have a significant
    impact on your hiring abilities. Being engaged in the community and playing a
    part in open source will help you attract talent.
  prefs: []
  type: TYPE_NORMAL
- en: Influence emerging technologies and standards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many emerging technologies and standards are developed in the open. Contributing
    to these initiatives gives your company the ability to influence these technologies
    and be a part of bleeding-edge development.
  prefs: []
  type: TYPE_NORMAL
- en: Improve your process by learning from open source projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: And, of course, if you embrace open source, your company can learn about collaborative
    development and apply these principles to improve the cross-team collaboration
    inside your company (called **inner source**).
  prefs: []
  type: TYPE_NORMAL
- en: Implementing an open source strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: But with all the benefits of embracing open source, there also are some risks
    you must address. You must be careful and be license-compliant when you use open
    source software in your products and toolchains. You must also take on the liability
    yourself if the open source component causes damage as you don't have a vendor
    you can sue. Also, there are risks involved if you take on too many dependencies
    – direct or indirect – and one of them breaks.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 14*](B17827_14_Epub.xhtml#_idTextAnchor296), *Securing Your Code*,
    you'll learn how 11 lines of code in a package and a conflict about a name caused
    severe damage and took off big parts of the internet.
  prefs: []
  type: TYPE_NORMAL
- en: That's why your company should set up an **open source strategy**. This strategy
    should define what types of open source software developers can use for what purpose.
    There might be different rules for different purposes. If you want to include
    open source in your products, you will need some kind of governance to manage
    the associated risks.
  prefs: []
  type: TYPE_NORMAL
- en: The strategy should also define whether developers are allowed to contribute
    to open source during work time and what the conditions are for that.
  prefs: []
  type: TYPE_NORMAL
- en: I will not dig deeper into the details of the strategy. It depends a lot on
    how you plan to use open source and how you develop and release your products.
    Just make sure your company has a document for your open source strategy – even
    if it is small. It will evolve as the maturity and experience of open source will
    grow.
  prefs: []
  type: TYPE_NORMAL
- en: One recommendation is to implement a center or a community of excellence that
    helps you develop a strategy that developers can turn to if they have questions
    or are unsure of whether an open source component is compliant (*Ahlawat P., Boyne
    J., Herz D., Schmieg F., & Stephan M. 2021*).
  prefs: []
  type: TYPE_NORMAL
- en: Open and inner source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The success of open source lies in its open and collaborative culture. Getting
    the right people to voluntarily collaborate over a big distance asynchronously
    can help solve a problem in the best way possible. The principles are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open collaboration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code reviews
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying these principles to proprietary software within an organization is
    called **inner source**. This term is credited to Tim O'Reilly from 2000\. Inner
    source can be a great way to break down silos and foster strong collaboration
    across teams and products.
  prefs: []
  type: TYPE_NORMAL
- en: 'But like **open source** and **open development**, just making your code available
    is not sufficient to create an inner source culture. Many success factors influence
    whether the inner source approach can succeed:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Modular product architecture**: If you have a big, monolithic architecture,
    this will keep people from contributing. Also, the quality of the code, the documentation,
    and how fast you can understand the code and contribute have a big influence on
    how inner source is adopted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standardized tools and processes**: If every team has a toolchain and workflows,
    it will also exclude other engineers from contributing. Having a common engineering
    system and similar approaches for branching and CI/CD will help others focus on
    the problems and not be hindered by having to learn other tools and workflows
    first.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Autonomy and self-organization**: So long as your organization pushes requirements
    to your teams and the engineers are busy keeping to their deadlines, contributions
    to other teams will not happen. Only if the teams can prioritize autonomously
    and work in a self-organized fashion will they have the freedom to participate
    in other communities – both open and inner source.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inner source can help break down silos and increase your engineering velocity.
    But it is also related to a high level of DevOps maturity. Inner source is something
    that evolves together with your increased DevOps capabilities and open source
    maturity. So, treat it as an output rather than an input to your acceleration.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Technically, inner source is normally done by activating forking in your enterprise.
    This goes hand in hand with your branching workflows, which we'll cover in [*Chapter
    11*](B17827_11_Epub.xhtml#_idTextAnchor249), *Trunk-Based Development*.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of insourcing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many companies do not see software development as their core business, so they
    tend to outsource it. **Outsourcing** means one company hiring another company
    or freelancer to perform a specific function. Outsourcing is usually not a bad
    idea: you have another company that is specialized in one thing do the work for
    you so that you can put your people and investments in your core products. The
    specialized company normally does things cheaper and better – and building up
    these skills yourself can take a lot of time and money.'
  prefs: []
  type: TYPE_NORMAL
- en: But now, software is the key differentiator for basically all products. Not
    only the digital customer experience but also smart manufacturing or supply chain
    management can give you a competitive advantage. Custom software is becoming part
    of your core business. Due to this, many companies already have an **insourcing**
    strategy for software development – that is, recruiting and employing software
    developers and DevOps engineers in-house.
  prefs: []
  type: TYPE_NORMAL
- en: The problem is that the market for software developers and DevOps engineers
    is highly competitive (the so-called **war for talent**). This often leads to
    a scattered landscape where partners work on core products and the developers
    maintain tooling.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good insourcing strategy is to ask yourself whether the software is core
    to your business – that is, whether it gives you a competitive advantage:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Core software** should be developed by internal developers. If you can''t
    hire enough skilled developers, you can **co-source** and augment your staff with
    the engineers of one of your trusted partners. But the goal should always be to
    replace these developers with your engineers later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Supplementary software** can be outsourced. In the best case, you can use
    an already existing product for it. If there is no such product, you can have
    a partner build it. And here is where **open source** comes into play: you can
    leverage existing open source solutions or have your partner build the solution
    in the open. This reduces the risk of you being the only customer and the solution
    becoming obsolete. Since the software is only supplementary to your business,
    you don''t care if other companies also use it. The contrary is that the more
    your software is used, the smaller the risk of the software becoming obsolete.
    Also, the quality is reliable if the software is developed in the open.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paying other companies or individuals to develop special open source software
    for you or adding features to existing open source solutions is not very common.
    But with more and more companies having an insourcing strategy and the continuing
    war for talent, this will significantly increase over the next few years.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Sponsors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **open source strategy** seems to conflict with an **insourcing strategy**
    at first. But the matter is more complex. It might be more useful to the core
    software to contribute a small feature to an open source project than to implement
    a workaround yourself. But in many companies, the **make-or-buy decision** at
    a team level is always decided in favor of making because the process of buying
    or funding something with money is too complex. A good insourcing strategy should
    always include a lightweight and fast process with some budget to invest in tools
    and the software supply chain. If your company is low on in-house developers,
    buying software or sponsoring open source contributors should be no problem.
  prefs: []
  type: TYPE_NORMAL
- en: A good way to give your teams the ability to invest in open source projects
    is by utilizing a feature called **GitHub Sponsors**. It allows you to invest
    in the projects your product depends on (your **software supply chain**) and keeps
    those projects alive. It can also give the maintainers freedom to write **newly
    requested features** instead of you having to implement them yourself.
  prefs: []
  type: TYPE_NORMAL
- en: A positive side effect is the sponsorship becoming **visible** to the open source
    community. This is good marketing and gives your company credibility and can help
    you **attract new talent**.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can sponsor individual developers or organizations when they are part of
    the *GitHub Sponsors* program. You can also sponsor them on behalf of your organization.
    This sponsorship can be a one-time or monthly payment and is visible in your profile
    or the profile of your organization (see *Figure 5.1*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Enabled organization profile in GitHub Sponsors'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_05_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – Enabled organization profile in GitHub Sponsors
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Sponsors does not charge any fees for sponsorships from user accounts,
    so 100% of these sponsorships go to the sponsored developer or organization.
  prefs: []
  type: TYPE_NORMAL
- en: Sponsor tiers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sponsors can set up different tiers for sponsoring. This can be done for one-time
    sponsorships as well as for recurring monthly payments (see *Figure 5.2*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Monthly or One-time tier options'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_05_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – Monthly or One-time tier options
  prefs: []
  type: TYPE_NORMAL
- en: 'The owner can set up to 10 tiers monthly and up to 10 tiers for one-time payments.
    This lets them link customized rewards to the different tiers. For example, the
    rewards could be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Visibility**: Sponsors can be mentioned on the website or social media. There
    may also be badges (such as Silver, Gold, and Platinum Sponsors) that are used
    to distinguish different levels of sponsorship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access**: Sponsors can get access to private repositories or early versions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prioritization**: Bugs or feature requests from sponsors can be prioritized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Support**: Some sponsors also offer support (to a certain degree) for the
    solution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at sponsorship goals next.
  prefs: []
  type: TYPE_NORMAL
- en: Sponsorship goals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sponsored accounts can set a funding goal. The goal can be based on the number
    of sponsors or the sponsorship in dollars per month and is displayed on the sponsorship
    page (see *Figure 5.3*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Python''s sponsorship goal of getting $12,000 per month'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_05_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – Python's sponsorship goal of getting $12,000 per month
  prefs: []
  type: TYPE_NORMAL
- en: Sponsorship goals can be linked to certain milestones. For example, the maintainer
    can set a certain amount when they quit their day job and start working full-time
    on the project. The org can also set the amount required to hire a new developer
    to help maintain the project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the **history**, **values**, and **principles**
    of **free and open source software** and the impact it can have on your software
    delivery performance. A good **open source strategy**, combined with a good **insourcing
    strategy** and the ability for your teams to sponsor and fund open source projects,
    can help you shorten your time to market significantly and have your engineers
    work on the features that matter for your company. Applying the principles to
    your company as **inner source** can help you build a collaborative culture and
    achieve better cross-team collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about automation with GitHub Actions.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading and references
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please refer to the following materials for more information about what was
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Greene T. C. (2001). *Ballmer: Linux is a cancer*: [https://www.theregister.com/2001/06/02/ballmer_linux_is_a_cancer/](https://www.theregister.com/2001/06/02/ballmer_linux_is_a_cancer/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Warren T. (2020). *Microsoft: we were wrong about open source*: [https://www.theverge.com/2020/5/18/21262103/microsoft-open-source-linux-history-wrong-statement](https://www.theverge.com/2020/5/18/21262103/microsoft-open-source-linux-history-wrong-statement).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raymond, E. S. (1999). *The Cathedral and the Bazaar: Musings on Linux and
    Open Source by an Accidental Revolutionary*. O''Reilly Media.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'O''Reilly (1998). *FREEWARE LEADERS MEET IN FIRST-EVER SUMMIT O''Reilly Brings
    Together Creators of Perl, Apache, Linux, and Netscape''s Mozilla* (Press Release):
    [https://www.oreilly.com/pub/pr/636](https://www.oreilly.com/pub/pr/636).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OSI (2018). *Open Source Initiative - History of the OSI*: [https://opensource.org/history](https://opensource.org/history).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Richard S. (2021). *Why Open Source Misses the Point of Free Software*: [https://www.gnu.org/philosophy/open-source-misses-the-point.en.html](https://www.gnu.org/philosophy/open-source-misses-the-point.en.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Volpi M. (2019). *How open-source software took over the world*: [https://techcrunch.com/2019/01/12/how-open-source-software-took-over-the-world/](https://techcrunch.com/2019/01/12/how-open-source-software-took-over-the-world/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ahlawat P., Boyne J., Herz D., Schmieg F., & Stephan M. (2021). *Why You Need
    an Open Source Software Strategy*: [https://www.bcg.com/publications/2021/open-source-software-strategy-benefits](https://www.bcg.com/publications/2021/open-source-software-strategy-benefits).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Inner Source*: [https://en.wikipedia.org/wiki/Inner_source](https://en.wikipedia.org/wiki/Inner_source).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*GitHub Sponsors*: [https://github.com/sponsors](https://github.com/sponsors).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
