- en: '*Chapter 5*: The Influence of Open and Inner Source on Software Delivery Performance'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '20 years ago, on June 1, 2001, former Microsoft CEO Steve Ballmer said the
    following in an interview with the Chicago Sunday Times:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '"*Linux is a cancer that attaches itself in an intellectual property sense
    to everything it touches.*"'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '*(Greene T. C. (2001))*'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: His concern was not only **Linux** but **open source** licenses in general.
    Now, 20 years later, Microsoft is the single largest contributor to open source
    in the world, beating Facebook, Google, Red Hat, and SUSE. Not only do they have
    many open source products, such as PowerShell, Visual Studio Code, and .NET, they
    also ship a complete Linux kernel with Windows 10 so that you can run any distribution
    on it. Microsoft president Brad Smith admits that "*Microsoft was on the wrong
    side of history when open source exploded at the beginning of the century*" (*Warren
    T. (2020)*).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at the top 10 companies that contribute to open source, you will
    find all the big tech companies that make commercial software:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 5.1 – Open Source Contributor Index, August 2, 2021 (https://opensourceindex.io/)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_05_new.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Table 5.1 – Open Source Contributor Index, August 2, 2021 (https://opensourceindex.io/)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: What has changed in the last two decades, such that important tech companies
    now embrace open source?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I will explain the history of free and open source software
    and why it has become so important over the last few years. I will explain the
    impact it can have on your engineering velocity and how you can use the principles
    of open source for better cross-team collaboration in your company (inner source).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter will cover the following topics:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: History of free and open source software
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difference between open source and open development
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits of embracing open source for companies
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing an open source strategy
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open and inner source
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The importance of insourcing
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub Sponsors
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: History of free and open source software
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand open source, we must go back to the early days of computer science.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Public domain software
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: During the 1950s and 1960s, the price of software was low compared to the necessary
    hardware. Any software that was produced was mainly produced by academics and
    corporate research teams. It was normal for the source code to be distributed
    with the software – normally as **public domain software**. This means that the
    software is freely available without ownership, copyright, trademark, or patent.
    These principles of openness and cooperation had a great influence on the **hacker
    culture** at that time.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: In the late 1960s, the rise of operating systems and compilers increased the
    costs of software. This was driven by a growing software industry that competed
    with hardware vendors that bundled their software together with their hardware.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: During the 1970s and 1980s, it became common to sell licenses for the use of
    software and in 1983, IBM stopped distributing their source code together with
    purchased software. Other software vendors followed their example.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Free software
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Richard Stallman* was convinced that this is ethically wrong, and he founded
    the **GNU Project** in 1983 and, shortly later, the **free software movement**.
    The free software movement believes that software is considered free if the receiver
    of the software is allowed to do the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Run the program for any purpose.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Study the software and change it in any way.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redistribute the program and make copies of it.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve the software and release the improvements.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Richard founded the **Free Software Foundation** (**FSF**) in 1985\. The FSF
    is famous for the following saying:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '"*Free as in free speech – not free as in free beer.*"'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: This means that the word *free* means freedom to distribute and not freedom
    from cost (*Gratis versus libre*). Since much of the free software already was
    free of charge, such gratis software (Freeware) became associated with free software
    and zero cost.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: The free software movement created a concept called **copyleft**. This grants
    users the right to use and modify the software, but it preserves the free status
    of the software. Examples of these licenses include the GNU **General Public License**
    (**GPL**), the Apache License, and the **Mozilla Public License** (**MPL**).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Most of the great software that still runs today on millions of devices has
    been distributed with those copyleft licenses; for example, the **Linux kernel**
    (published 1992 by *Linus Torvalds*), BSD, MySQL, and Apache.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Open source software
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In May 1997, at the Linux congress in Würzburg, Germany, *Eric Raymond* introduced
    his paper *The Cathedral and the Bazaar* (*Raymond, E. S. 1999*). He reflected
    on free software principles and the hacker culture and the benefits for software
    development. The paper received a lot of attention and motivated Netscape to release
    its browser, **Netscape Communicator**, as free software.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Raymond and others wanted to bring free software principles to more commercial
    software vendors, but the term *free software* had a negative connotation for
    commercial software companies.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: On February 3, 1998, in Palo Alto, many important people from the free software
    movement met for a strategy session to discuss the future of free software. Among
    the participants were *Eric Raymond*, *Michael Tiemann*, and *Christine Peterson*,
    who are credited with proposing the term **open source** in favor of free software.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: The **Open Source Initiative** (**OSI**) was founded by *Eric Raymond* and *Bruce
    Perens* in late February 1998, with Raymond as the first president (*OSI 2018*).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: In 1998, at publisher *Tim O'Reilly's* historical *Freeware Summit* – later
    named *Open Source Summit* – the term was swiftly adopted by early supports such
    as *Linus Torvalds*, *Larry Wall* (creator of Perl), *Brian Behlendorf* (Apache),
    *Eric Allman* (Sendmail), *Guido van Rossum* (Python), and *Phil Zimmerman* (PGP)
    (*O'Reilly* *1998*).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 1998年，在出版商*Tim O'Reilly*的历史性*自由软件峰会*——后来更名为*开源峰会*——上，术语被迅速采纳，早期支持者包括*Linus Torvalds*、*Larry
    Wall*（Perl的创始人）、*Brian Behlendorf*（Apache）、*Eric Allman*（Sendmail）、*Guido van
    Rossum*（Python）和*Phil Zimmerman*（PGP）（*O'Reilly* *1998*）。
- en: But *Richard Stallman* and the FSF rejected the new term *open source* (*Richard
    S. 2021*). That's why the **Free Open Source Software** (**FOSS**) movement is
    divided and still uses different terminology today.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但*理查德·斯托曼*和自由软件基金会（FSF）拒绝了新术语*开源*（*Richard S. 2021*）。这就是为什么**自由开源软件**（**FOSS**）运动至今依然存在分歧，并且使用不同术语的原因。
- en: In the late 1990s and early 2000s, in the dotcom bubble, the terms **open source**
    and **open source software** (**OSS**) were widely adopted by the public media
    and ended up as the more popular terms.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在1990年代末和2000年代初的互联网泡沫期间，**开源**和**开源软件**（**OSS**）这两个术语被大众媒体广泛采用，并最终成为了更受欢迎的术语。
- en: The rise of open source software
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开源软件的崛起
- en: 'In the last two decades, open source has continuously increased in popularity.
    Software such as Linux and Apache drives most of the internet. In the beginning,
    it was hard to commercialize OSS. The first idea was to provide enterprise-scale
    support services around the open source products. The companies that had success
    with this were Red Hat and MySQL. But it was much harder and didn''t have the
    scale that commercial licensing provided. So, the open source companies that invested
    heavily in building OSS started to create **open core** products: a free, open
    source core product, as well as commercial add-ons, that could be bought by their
    customers.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的二十年里，开源软件的普及度持续上升。像Linux和Apache这样的软件支撑着大部分互联网。刚开始，商业化OSS是很困难的。最初的想法是围绕开源产品提供企业级支持服务。在这方面取得成功的公司有Red
    Hat和MySQL。但这条路更为艰难，且无法像商业许可那样提供规模效应。因此，那些在开源软件构建上投入大量资金的公司开始创建**开放核心**产品：一个免费的开源核心产品，以及可以由客户购买的商业附加组件。
- en: The transition of the software business model from classical licenses to **Software
    as a Service** (**SaaS**) subscriptions helped the open source companies commercialize
    their OSS. This motivated traditional software vendors to release their software
    – at least the core – as open source to engage with the community.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从传统许可证到**软件即服务**（**SaaS**）订阅的商业模式转变，帮助开源公司将其OSS商业化。这激励了传统软件厂商发布他们的软件——至少是核心部分——作为开源，以便与社区进行互动。
- en: Not only did the big software companies such as Microsoft, Google, IBM, and
    Amazon become big open source companies. Pure open source companies such as Red
    Hat and MuleSoft have also gained a lot of worth and market recognition. Red Hat,
    for example, was acquired by IBM in 2018 for 32 billion US dollars. MuleSoft was
    acquired in the same year by Salesforce for $6.5 billion.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅像微软、谷歌、IBM和亚马逊这样的巨大软件公司成为了重要的开源公司。像Red Hat和MuleSoft这样的纯开源公司也获得了大量的价值和市场认可。例如，Red
    Hat于2018年被IBM以320亿美元收购。MuleSoft也在同年被Salesforce以65亿美元收购。
- en: So, open source today is not from the revolutionary minds that create alternative,
    free software. Most of the top-notch software that fuels the software and platform
    services of the cloud providers is open source software (*Volpi M. 2019*).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，今天的开源并不是来自那些创造替代性、自由软件的革命性思维。如今，推动云服务商软件和平台服务的大多数顶尖软件都是开源软件（*Volpi M. 2019*）。
- en: The difference between open source and open development
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开源与开放开发的区别
- en: So, OSS refers to computer programs is released under a license that grants
    users the rights to use, study, modify, and share the software and its source
    code.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，OSS指的是在一种许可证下发布的计算机程序，许可证授予用户使用、研究、修改和共享该软件及其源代码的权利。
- en: 'But putting your source code in the public under a copyleft license is just
    the first step. If a company wants to have all the benefits of open source, it
    must adopt the open source values, which leads to something that is called **open
    development** or **development in the open**. This means that you do not just
    give access to the source code. Instead, you must make the entire development
    and product management transparent. This includes the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Architecture and research
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meetings
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standards
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The .NET team is a good example of a team that hosts their community standup
    on Twitch and YouTube (see [https://dotnet.microsoft.com/live/community-standup](https://dotnet.microsoft.com/live/community-standup)).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '**Open development** also means creating an open and inclusive environment
    in which everyone feels safe to propose changes. This includes a strong code of
    ethics and a clean code base with a high degree of automation that allows everyone
    to quickly and easily contribute.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of embracing open source for companies
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, how is open source connected to better development performance and how can
    your company benefit from a good open source strategy?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Deliver faster with open source software
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Depending on the sources, new products already consist of 70% to 90% open source
    code. This means that you will write 70% to 90% less code yourself, which can
    increase your time to market significantly.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Besides reusing open source code in your product, a lot of platform tooling
    is available as open source. Reusable GitHub Actions, test tooling, or container
    orchestration… the most efficient and robust tooling you can use to deliver software
    faster is, in most cases, open source software.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Build better products by engaging the community
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you develop some parts of your products in the open, you can leverage the
    hive mind of the community to build better and more secure software. It also helps
    you get early feedback on what you are doing from great engineers around the world.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'Especially for complicated, critical, and security-relevant software, engaging
    with the community often results in better solutions:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '"*The bigger the problem, the more open source developers are drawn, like magnets,
    to work on it.*"'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '*(Ahlawat P., Boyne J., Herz D., Schmieg F., & Stephan M. (2021))*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Use tools with a lower risk of obsolescence
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using open source can reduce the risk that a tool becomes obsolete. If you build
    tools yourself, you must maintain them yourself – which is not your priority.
    Using tools from small vendors or having them built by partners introduces the
    risk that the tools do not get maintained or the partner goes out of the market.
    Investing in open source tools instead can significantly reduce these risks.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Attract talent
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Giving your engineers the ability to leverage open source in their work and
    contribute to open source projects during their work hours can have a significant
    impact on your hiring abilities. Being engaged in the community and playing a
    part in open source will help you attract talent.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让工程师能够在工作中利用开源并贡献于开源项目，可以对你的招聘能力产生重大影响。参与社区并在开源中发挥作用，将帮助你吸引人才。
- en: Influence emerging technologies and standards
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 影响新兴技术和标准
- en: Many emerging technologies and standards are developed in the open. Contributing
    to these initiatives gives your company the ability to influence these technologies
    and be a part of bleeding-edge development.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 许多新兴技术和标准都是在开放环境中发展的。为这些倡议做出贡献，可以使你的公司有能力影响这些技术，并成为前沿发展的参与者。
- en: Improve your process by learning from open source projects
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过学习开源项目来改进你的流程
- en: And, of course, if you embrace open source, your company can learn about collaborative
    development and apply these principles to improve the cross-team collaboration
    inside your company (called **inner source**).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果你拥抱开源，你的公司可以学习协作开发，并将这些原则应用于改善公司内部跨团队的协作（称为**内源**）。
- en: Implementing an open source strategy
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施开源策略
- en: But with all the benefits of embracing open source, there also are some risks
    you must address. You must be careful and be license-compliant when you use open
    source software in your products and toolchains. You must also take on the liability
    yourself if the open source component causes damage as you don't have a vendor
    you can sue. Also, there are risks involved if you take on too many dependencies
    – direct or indirect – and one of them breaks.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管拥抱开源有很多好处，但也有一些风险需要应对。当你在产品和工具链中使用开源软件时，必须小心并确保遵守许可证规定。如果开源组件造成损害，你还需要承担责任，因为你没有供应商可以起诉。此外，如果你依赖太多依赖项——无论是直接还是间接——其中一个发生故障时，你也将面临风险。
- en: Note
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In [*Chapter 14*](B17827_14_Epub.xhtml#_idTextAnchor296), *Securing Your Code*,
    you'll learn how 11 lines of code in a package and a conflict about a name caused
    severe damage and took off big parts of the internet.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第14章*](B17827_14_Epub.xhtml#_idTextAnchor296)《保护你的代码》中，你将学习到，包中的11行代码和一个关于名称的冲突如何造成严重损害并影响到互联网的大片区域。
- en: That's why your company should set up an **open source strategy**. This strategy
    should define what types of open source software developers can use for what purpose.
    There might be different rules for different purposes. If you want to include
    open source in your products, you will need some kind of governance to manage
    the associated risks.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么你的公司应该建立一个**开源策略**。该策略应明确开发者可以使用哪些类型的开源软件，且使用目的是什么。不同的目的可能有不同的规则。如果你希望将开源纳入产品，你需要某种治理机制来管理相关的风险。
- en: The strategy should also define whether developers are allowed to contribute
    to open source during work time and what the conditions are for that.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 策略还应该明确是否允许开发者在工作时间贡献开源代码，以及相关的条件。
- en: I will not dig deeper into the details of the strategy. It depends a lot on
    how you plan to use open source and how you develop and release your products.
    Just make sure your company has a document for your open source strategy – even
    if it is small. It will evolve as the maturity and experience of open source will
    grow.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会深入探讨策略的细节。这很大程度上取决于你如何计划使用开源，以及你如何开发和发布产品。只要确保你的公司有一个关于开源策略的文档——即使它很小。随着开源的成熟和经验增长，它将不断发展。
- en: One recommendation is to implement a center or a community of excellence that
    helps you develop a strategy that developers can turn to if they have questions
    or are unsure of whether an open source component is compliant (*Ahlawat P., Boyne
    J., Herz D., Schmieg F., & Stephan M. 2021*).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一个建议是实施一个中心或卓越社区，帮助你制定一个策略，开发者可以在有疑问或者不确定某个开源组件是否合规时寻求帮助（*Ahlawat P., Boyne
    J., Herz D., Schmieg F., & Stephan M. 2021*）。
- en: Open and inner source
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开源与内源
- en: 'The success of open source lies in its open and collaborative culture. Getting
    the right people to voluntarily collaborate over a big distance asynchronously
    can help solve a problem in the best way possible. The principles are as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 开源的成功在于其开放和协作的文化。让合适的人在远距离异步合作，可以以最佳的方式解决问题。其原则如下：
- en: Open collaboration
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开放协作
- en: Open communication
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开放沟通
- en: Code reviews
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码评审
- en: Applying these principles to proprietary software within an organization is
    called **inner source**. This term is credited to Tim O'Reilly from 2000\. Inner
    source can be a great way to break down silos and foster strong collaboration
    across teams and products.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些原则应用于组织内的专有软件被称为**内部源代码**。这一术语由Tim O'Reilly于2000年提出。内部源代码是打破壁垒并促进跨团队和跨产品强大协作的好方法。
- en: 'But like **open source** and **open development**, just making your code available
    is not sufficient to create an inner source culture. Many success factors influence
    whether the inner source approach can succeed:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 但与**开源**和**开放开发**一样，仅仅让你的代码公开并不足以创造一个内部源代码文化。许多成功因素会影响内部源代码方法是否能成功：
- en: '**Modular product architecture**: If you have a big, monolithic architecture,
    this will keep people from contributing. Also, the quality of the code, the documentation,
    and how fast you can understand the code and contribute have a big influence on
    how inner source is adopted.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块化产品架构**：如果你的架构庞大且单一，这将限制人们的贡献。此外，代码的质量、文档的完善程度以及理解代码和贡献的速度都会对内部源代码的采纳产生重大影响。'
- en: '**Standardized tools and processes**: If every team has a toolchain and workflows,
    it will also exclude other engineers from contributing. Having a common engineering
    system and similar approaches for branching and CI/CD will help others focus on
    the problems and not be hindered by having to learn other tools and workflows
    first.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准化工具与流程**：如果每个团队都有自己的工具链和工作流，这将排除其他工程师的贡献。拥有一个共同的工程系统，以及类似的分支和CI/CD方法，能够帮助其他人专注于问题，而不会因为必须先学习其他工具和工作流而受到阻碍。'
- en: '**Autonomy and self-organization**: So long as your organization pushes requirements
    to your teams and the engineers are busy keeping to their deadlines, contributions
    to other teams will not happen. Only if the teams can prioritize autonomously
    and work in a self-organized fashion will they have the freedom to participate
    in other communities – both open and inner source.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自主性与自我组织**：只要你的组织将需求推送给团队，且工程师们忙于赶工期，其他团队的贡献就不会发生。只有当团队能够自主地进行优先级排序，并以自我组织的方式工作时，他们才能有自由参与其他社区——包括开放源代码和内部源代码社区。'
- en: Inner source can help break down silos and increase your engineering velocity.
    But it is also related to a high level of DevOps maturity. Inner source is something
    that evolves together with your increased DevOps capabilities and open source
    maturity. So, treat it as an output rather than an input to your acceleration.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 内部源代码有助于打破壁垒，提高工程效率。但这也与DevOps的成熟度息息相关。内部源代码是随着您的DevOps能力和开源成熟度的提高而发展的。因此，将其视为加速的输出，而不是输入。
- en: Note
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Technically, inner source is normally done by activating forking in your enterprise.
    This goes hand in hand with your branching workflows, which we'll cover in [*Chapter
    11*](B17827_11_Epub.xhtml#_idTextAnchor249), *Trunk-Based Development*.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度讲，内部源代码通常通过在企业内部启用分叉来实现。这与您的分支工作流密切相关，我们将在[*第11章*](B17827_11_Epub.xhtml#_idTextAnchor249)中讨论，*基于主干的开发*。
- en: The importance of insourcing
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内部化的重要性
- en: 'Many companies do not see software development as their core business, so they
    tend to outsource it. **Outsourcing** means one company hiring another company
    or freelancer to perform a specific function. Outsourcing is usually not a bad
    idea: you have another company that is specialized in one thing do the work for
    you so that you can put your people and investments in your core products. The
    specialized company normally does things cheaper and better – and building up
    these skills yourself can take a lot of time and money.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 许多公司并不认为软件开发是其核心业务，因此它们倾向于外包。**外包**是指一家公司雇佣另一家公司或自由职业者来执行特定功能。外包通常不是一个坏主意：你有另一家专注于某一领域的公司为你完成工作，这样你就可以将人员和投资集中在核心产品上。专门的公司通常能更便宜、更好地完成工作——而自己培养这些技能可能需要大量时间和资金。
- en: But now, software is the key differentiator for basically all products. Not
    only the digital customer experience but also smart manufacturing or supply chain
    management can give you a competitive advantage. Custom software is becoming part
    of your core business. Due to this, many companies already have an **insourcing**
    strategy for software development – that is, recruiting and employing software
    developers and DevOps engineers in-house.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 但是现在，软件基本上是所有产品的关键差异化因素。不仅是数字客户体验，智能制造或供应链管理也能为你带来竞争优势。定制软件正成为你核心业务的一部分。因此，许多公司已经有了**内部开发**策略——即招聘和雇佣内部的软件开发人员和DevOps工程师。
- en: The problem is that the market for software developers and DevOps engineers
    is highly competitive (the so-called **war for talent**). This often leads to
    a scattered landscape where partners work on core products and the developers
    maintain tooling.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，软件开发人员和DevOps工程师的市场竞争非常激烈（所谓的**人才争夺战**）。这常常导致一个分散的局面，合作伙伴负责核心产品的开发，而开发人员则维护工具。
- en: 'A good insourcing strategy is to ask yourself whether the software is core
    to your business – that is, whether it gives you a competitive advantage:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的内部开发策略是问自己软件是否是你业务的核心——也就是说，是否能为你提供竞争优势：
- en: '**Core software** should be developed by internal developers. If you can''t
    hire enough skilled developers, you can **co-source** and augment your staff with
    the engineers of one of your trusted partners. But the goal should always be to
    replace these developers with your engineers later.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**核心软件**应由内部开发人员开发。如果你无法雇佣足够的技术熟练开发人员，你可以**联合外包**，并通过你信任的合作伙伴的工程师来增强你的团队。但最终目标应始终是用你自己公司的工程师替代这些外部开发人员。'
- en: '**Supplementary software** can be outsourced. In the best case, you can use
    an already existing product for it. If there is no such product, you can have
    a partner build it. And here is where **open source** comes into play: you can
    leverage existing open source solutions or have your partner build the solution
    in the open. This reduces the risk of you being the only customer and the solution
    becoming obsolete. Since the software is only supplementary to your business,
    you don''t care if other companies also use it. The contrary is that the more
    your software is used, the smaller the risk of the software becoming obsolete.
    Also, the quality is reliable if the software is developed in the open.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**补充软件**可以外包。在最佳情况下，你可以使用已经存在的产品。如果没有这样的产品，你可以让合作伙伴为你构建。此时，**开源**发挥了重要作用：你可以利用现有的开源解决方案，或者让合作伙伴在开源环境中构建解决方案。这可以降低你成为唯一客户并导致解决方案过时的风险。由于软件仅是你业务的补充部分，因此你并不介意其他公司是否也使用它。相反的是，你的软件被使用的越多，软件过时的风险越小。如果软件是以开放方式开发的，其质量也更可靠。'
- en: Paying other companies or individuals to develop special open source software
    for you or adding features to existing open source solutions is not very common.
    But with more and more companies having an insourcing strategy and the continuing
    war for talent, this will significantly increase over the next few years.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 向其他公司或个人支付费用，让他们为你开发特殊的开源软件或为现有的开源解决方案添加功能并不常见。但随着越来越多的公司采取内部开发策略，以及人才争夺战的持续进行，这种做法将在未来几年大幅增加。
- en: GitHub Sponsors
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub赞助者
- en: An **open source strategy** seems to conflict with an **insourcing strategy**
    at first. But the matter is more complex. It might be more useful to the core
    software to contribute a small feature to an open source project than to implement
    a workaround yourself. But in many companies, the **make-or-buy decision** at
    a team level is always decided in favor of making because the process of buying
    or funding something with money is too complex. A good insourcing strategy should
    always include a lightweight and fast process with some budget to invest in tools
    and the software supply chain. If your company is low on in-house developers,
    buying software or sponsoring open source contributors should be no problem.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**开源策略**似乎与**内部开发策略**存在冲突。但问题更为复杂。对于核心软件来说，向开源项目贡献一个小功能可能比自己实现一个临时解决方案更有用。但在许多公司中，团队层面的**自制还是购买决策**总是倾向于选择自制，因为购买或资助某样东西的过程太复杂。一个好的内部开发策略应该始终包括一个轻量且快速的流程，并拥有一定的预算来投资工具和软件供应链。如果你的公司缺乏内部开发人员，购买软件或资助开源贡献者应该不成问题。'
- en: A good way to give your teams the ability to invest in open source projects
    is by utilizing a feature called **GitHub Sponsors**. It allows you to invest
    in the projects your product depends on (your **software supply chain**) and keeps
    those projects alive. It can also give the maintainers freedom to write **newly
    requested features** instead of you having to implement them yourself.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: A positive side effect is the sponsorship becoming **visible** to the open source
    community. This is good marketing and gives your company credibility and can help
    you **attract new talent**.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'You can sponsor individual developers or organizations when they are part of
    the *GitHub Sponsors* program. You can also sponsor them on behalf of your organization.
    This sponsorship can be a one-time or monthly payment and is visible in your profile
    or the profile of your organization (see *Figure 5.1*):'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Enabled organization profile in GitHub Sponsors'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_05_001.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – Enabled organization profile in GitHub Sponsors
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Sponsors does not charge any fees for sponsorships from user accounts,
    so 100% of these sponsorships go to the sponsored developer or organization.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Sponsor tiers
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sponsors can set up different tiers for sponsoring. This can be done for one-time
    sponsorships as well as for recurring monthly payments (see *Figure 5.2*):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Monthly or One-time tier options'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_05_002.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – Monthly or One-time tier options
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 'The owner can set up to 10 tiers monthly and up to 10 tiers for one-time payments.
    This lets them link customized rewards to the different tiers. For example, the
    rewards could be as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '**Visibility**: Sponsors can be mentioned on the website or social media. There
    may also be badges (such as Silver, Gold, and Platinum Sponsors) that are used
    to distinguish different levels of sponsorship.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access**: Sponsors can get access to private repositories or early versions.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prioritization**: Bugs or feature requests from sponsors can be prioritized.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Support**: Some sponsors also offer support (to a certain degree) for the
    solution.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at sponsorship goals next.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Sponsorship goals
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sponsored accounts can set a funding goal. The goal can be based on the number
    of sponsors or the sponsorship in dollars per month and is displayed on the sponsorship
    page (see *Figure 5.3*):'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Python''s sponsorship goal of getting $12,000 per month'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_05_003.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – Python's sponsorship goal of getting $12,000 per month
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Sponsorship goals can be linked to certain milestones. For example, the maintainer
    can set a certain amount when they quit their day job and start working full-time
    on the project. The org can also set the amount required to hire a new developer
    to help maintain the project.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the **history**, **values**, and **principles**
    of **free and open source software** and the impact it can have on your software
    delivery performance. A good **open source strategy**, combined with a good **insourcing
    strategy** and the ability for your teams to sponsor and fund open source projects,
    can help you shorten your time to market significantly and have your engineers
    work on the features that matter for your company. Applying the principles to
    your company as **inner source** can help you build a collaborative culture and
    achieve better cross-team collaboration.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about automation with GitHub Actions.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Further reading and references
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please refer to the following materials for more information about what was
    covered in this chapter:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'Greene T. C. (2001). *Ballmer: Linux is a cancer*: [https://www.theregister.com/2001/06/02/ballmer_linux_is_a_cancer/](https://www.theregister.com/2001/06/02/ballmer_linux_is_a_cancer/).'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Warren T. (2020). *Microsoft: we were wrong about open source*: [https://www.theverge.com/2020/5/18/21262103/microsoft-open-source-linux-history-wrong-statement](https://www.theverge.com/2020/5/18/21262103/microsoft-open-source-linux-history-wrong-statement).'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raymond, E. S. (1999). *The Cathedral and the Bazaar: Musings on Linux and
    Open Source by an Accidental Revolutionary*. O''Reilly Media.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'O''Reilly (1998). *FREEWARE LEADERS MEET IN FIRST-EVER SUMMIT O''Reilly Brings
    Together Creators of Perl, Apache, Linux, and Netscape''s Mozilla* (Press Release):
    [https://www.oreilly.com/pub/pr/636](https://www.oreilly.com/pub/pr/636).'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OSI (2018). *Open Source Initiative - History of the OSI*: [https://opensource.org/history](https://opensource.org/history).'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Richard S. (2021). *Why Open Source Misses the Point of Free Software*: [https://www.gnu.org/philosophy/open-source-misses-the-point.en.html](https://www.gnu.org/philosophy/open-source-misses-the-point.en.html).'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Volpi M. (2019). *How open-source software took over the world*: [https://techcrunch.com/2019/01/12/how-open-source-software-took-over-the-world/](https://techcrunch.com/2019/01/12/how-open-source-software-took-over-the-world/).'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ahlawat P., Boyne J., Herz D., Schmieg F., & Stephan M. (2021). *Why You Need
    an Open Source Software Strategy*: [https://www.bcg.com/publications/2021/open-source-software-strategy-benefits](https://www.bcg.com/publications/2021/open-source-software-strategy-benefits).'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Inner Source*: [https://en.wikipedia.org/wiki/Inner_source](https://en.wikipedia.org/wiki/Inner_source).'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*GitHub Sponsors*: [https://github.com/sponsors](https://github.com/sponsors).'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
