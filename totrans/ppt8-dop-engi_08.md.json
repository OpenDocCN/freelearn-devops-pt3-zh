["```\nclass exampleapp (\n  Boolean $package_managed = true,\n  Integer $package_version = 3,\n  Boolean $user_managed = true,\n  Integer $user_id= 10,\n  Boolean $service_enable = true,\n  Integer $jmx_heap_size = 1024,\n  Integer $thread_number = 10,\n)\n{\n  contain exampleapp::install\n  contain exampleapp::config\n  contain exampleapp::service\n  Class['exampleapp::install']\n  -> Class['exampleapp::config']\n  ~> Class['exampleapp::service']\n}\n```", "```\nclass exampleapp::install {\nif $exampleapp::package_managed {\n  package { 'exampleapp':\n    ensure => $exampleapp::package_version\n  }\n }\n}\n```", "```\nclass exampleapp::config {\n  file { '/etc/exampleapp/app.conf':\n    ensure  => file,\n    content => epp('exampleapp/app.conf.epp', {' jmx_heap_size ' => $exampleapp::jmx_heap_size , ' thread_number' => $exampleapp::thread_number }),\n  }\n}\n```", "```\nclass exampleapp::service\n  if $exampleapp::service_managed {\n    service{'exampleapp': \n    ensure => 'running', \n    enable => $exampleapp::service_enable ,\n    }\n  } \n}\n```", "```\nclass { 'exampleapp':\n  package_managed => true,\n  package_version => 3,\n  user_managed => true,\n  user_id => 10,\n  service_enable => true,\n  jmx_heap_size => 1024,\n  thread_number => 10,\n}\n```", "```\nclass role::exampleapp {\n  include profile::core\n  include profile::java\n  include profile::apache\n}\n```", "```\nclass profile::java(\n  Pattern[/present|installed|latest|^[.+_0-9a-zA-Z:~-]+$/] $java_version\n  String $java_distribution\n) {\nclass { 'java':\n  version      => $java_version,\n  distribution =>  $java_distribution,\n  }\n}\n```", "```\nclass profile::exampleapp(\n  Array[String] $include_classes = ['exampleapp'],\n) {\n  include $include_classes\n}\n```", "```\nclass profile::exampleapp(\n  Array[String] $include_classes = ['server'],\n ) {\n$modules = $include_classes.map | String $module | {\n  \"exampleteam_exampleapp::${profile}\"\n}\ninclude $modules\n}\n```", "```\nclass profile::exampleapp(\n  Array[String] $include_default          = ['my_default'],\n  Array[String] $include_mandatory        = ['my_base_profile'],\n  Array[String] $include_additional       = ['my_test_default_profile'],\n  Array[String] $include_removal          = ['my_default'],\n){\n$profiles = $include_default + $include_mandatory + $include_additional + $include_removal\ninclude $profiles\n}\n```", "```\ncommon\n  disable_legacy_facts: true\n.gitlab-ci.yml\n  delete: true\n.vscode\n  Unmanaged: true\n```", "```\n$long_variable_text = \"Pretend this is more than 140 characters\" # lint:ignore:140chars\n  # lint:ignore:double_quoted_strings\n  $variable1 = \"don't do this\"\n  $variable2 = \"this is just a simple example\"\n  # lint:endignore\n```", "```\nrequire 'spec_helper'\ndescribe 'exampleapp' do\n  on_supported_os.each do |os, os_facts|\n    context \"on #{os}\" do\n      let(:facts) { os_facts }\n      it { is_expected.to compile }\n    end\n  end\nend\n```", "```\nrequire 'spec_helper'\ndescribe 'exampleapp::example_define' do\n  let(:title) { 'namevar' }\n  let(:params) do\n    {}\n  end\n  on_supported_os.each do |os, os_facts|\n    context \"on #{os}\" do\n      let(:facts) { os_facts }\n      it { is_expected.to compile }\n    end\n  end\nend\n```", "```\ndescribe 'exampleapp' do\n  on_supported_os.each do |os, _os_facts|\n    context \"on #{os}\" do\n      context 'When install_version is 6' do\n        it { is_expected.to compile }\n      end\n      context 'When install_version is 1' do\n        it { is_expected.to compile.and_raise_error('unsupported version') }\n      end\n      context 'When install_version is invalid string' do\n        it { is_expected.to compile.and_raise_error('Invalid version string') }\n      end\n    end\n  end\nend\n```", "```\nit do\nis_expected.to compile\nend\n```", "```\nit do\n  is_expected.to contain_package('httpd').with(\n  'ensure' => 'latest',\n  'provider' => 'solaris',\n  )\nend\n```", "```\n<with_method>_<parameter name>\nit {is_expected.to contain_server('exampleserver').only_with_enable(true)  }\n```", "```\nit {is_expected.to contain_user('exampleuser'). .without(['managehome', 'home']) }\n```", "```\nit {is_expected.to contain_server('exampleserver').with_enable(true).without_ensure  }\n```", "```\nit { is_expected.to have_resource_count(5) }\nit { is_expected.to have_class_count(4) }\n```", "```\nlet(:params) { {'param1' => 'yup', 'param2' => :undef } }\n```", "```\nlet(:pre_condition) { 'include exampleapp::install' }\nlet(:post_condition){ 'include exampleapp::service' }\n```", "```\nlet(:node) { puppet.packtpub.com' }\nlet(:environment) { 'production' }\n```", "```\nit { is_expected.to contain_file('exampleconfig').that_requires('Package[exampleapp]') }\n```", "```\nit { is_expected.to contain_package('exampleapp').that_comes_before('Class[exampleapp::service]','Class[exampleapp::config]') }\n```", "```\nit do\n  is_expected.to contain_service('anotherapp').with(\n    'ensure' => 'running',\n    'enable' => 'true',\n  ).that_notifies('File[config_a]', 'File[config_b]')\nend\n```", "```\nlet(:params) { 'require' => ref('Package', 'exampleapp') }\n```", "```\n  additional_archs = {\n    :hardwaremodels => ['i386'],\n  }\non_supported_os(additional_archs).each do |os, os_facts|\n```", "```\n    ubuntu = {\n      supported_os: [\n        {\n          'operatingsystem'        => 'Ubuntu',\n          'operatingsystemrelease' => ['18.04', '16.04'],\n        },\n      ],\n    }\non_supported_os(ubuntu).each do |os, os_facts|\n```", "```\nContext \"when OS is redhat-10-x86_64\" do\n    let(:facts) do\n      {\n        :osfamily                  => 'RedHat',\n        :operatingsystem           => 'RedHat',\n        :operatingsystemmajrelease => '10',\n        …\n      }\n    end\n```", "```\n     let(:facts) do\n        super().merge({\n          :student => 'david',\n        })\n      end\n```", "```\n---,\nchoco_install_path: C:\\ProgramData\\chocolatey\nchocolateyversion: 0.9.9\n```", "```\nlet(:trusted_facts) { {'pp_role' => 'puppet/server', 'pp_cluster' =>\n'A'} }\nlet(:trusted_external_data) do,\n{ \n  pds: {\n     puppet_classes: some_class,\n     example: hiera_data,\n   },\n}\nend\n```", "```\nRSpec.configure do |c|\n  c.default_node_params = {\n    'owner'  => 'oracle',\n    'site'   => 'Falkirk1',\n    'state' => 'live',\n  }\nend\n```", "```\nRspec.configure do |c|\n  c.default_trusted_external_data = {\n    pds: {\n      puppet_classes: some_class,\n      example: hiera_data,\n    },\n  }\nend\n```", "```\nlet(:hiera_config) { 'spec/fixtures/hiera/hiera.yaml' }\nhiera = Hiera.new(:config => 'spec/fixtures/hiera/hiera.yaml')\n```", "```\n primary_dns = hiera.lookup('primary_dns', nil, nil)\n  let(:params) { 'primary_dns' => primary_dns}\n```", "```\nRSpec.configure do |c|\n  c.hiera_config = 'spec/fixtures/hiera/hiera.yaml'\nend\n```", "```\nfixtures:\n  forge_modules:\n    peadm: \"puppetlabs/peadm\"\n    stdlib:\n      repo: \"puppetlabs/stdlib\"\n      ref: \"2.6.0\"\n  repository:\n     pecdm:  \"git://github.com/puppetlabs/pecdm\"\n   Puppet-data-service:\n      repo: \"git://github.com/puppetlabs/puppetlabs-puppet_data_service\"\n      Ref:  \"feature_branch_1\"\n```", "```\nRSpec.configure do |c|\n  c.after(:suite) do\n    RSpec::Puppet::Coverage.report!\n  end\nend\n```", "```\ndsc_xinternetexplorerhomepage { 'set home page':\n  dsc_startpage => 'https://www.packtpub.com'\n}\n```"]