["```\nFROM mcr.microsoft.com/dotnet/aspnet:3.1 AS base\nWORKDIR /app\nEXPOSE 80\nEXPOSE 443\nEXPOSE 555\nFROM mcr.microsoft.com/dotnet/sdk:3.1 AS build\nWORKDIR /src\nCOPY [\"WebApplication2.csproj\", \".\"]\nRUN dotnet restore \"WebApplication2.csproj\"\nCOPY . .\nWORKDIR \"/src/\"\nRUN dotnet build \"WebApplication2.csproj\" -c Release -o /app/build\nFROM build AS publish\nRUN dotnet publish \"WebApplication2.csproj\" -c Release -o /app/publish\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app/publish .\nENTRYPOINT [\"dotnet\", \"WebApplication2.dll\"]\n```", "```\ndocker images\n```", "```\n    docker container run --publish 8123:80 --detach --name [container name] [image name]\n    ```", "```\n- task: Docker@2 \n  inputs:\n    containerRegistry: 'MSFT Container Registry' \n    repository: 'azuredevops'\n    command: 'buildAndPush' \n    Dockerfile:'**/Dockerfile' \n    buildContext:\n'$(System.DefaultWorkingDirectory)/ExistingDevOpsProject'\n```", "```\n[container registry]/[repository]:[tag]:\n```", "```\n    az container create --resource-group [resource group] --name [ACI name] --location westeurope --image [Image reference] --dns- name-label [dns reference] --ports 80 --registry-username [username of the registry] --registry-password [password of the registry]\n    ```", "```\naz container create --resource-group aci-rg-devops --name aci- demo-app --location westeurope --image msftazuredevops.azurecr.io/azuredevops:$(Build.BuildId) --dns- name-label aci-msft-demo --ports 80 --registry-username\n$(username) --registry-password $(password)\n```", "```\n- task: AzureCLI@2 \n  inputs:\n  azureSubscription: 'Subscription MPN' \n  scriptType: 'bash'\n  scriptLocation: 'inlineScript'\n  inlineScript: 'az container create --resource-group aci-rg- devops -\nname aci-demo-app --location westeurope --image msftazuredevops.azurecr.io/azuredevops:$(Build.BuildId) --dns- name-label aci-msft-demo --ports 80 --registry-username\n$(username) --registry-password $(password)'\n```", "```\naz group create --name mpn-rg-kubernetes --location westeurope\n```", "```\naz aks create --resource-group mpn-rg-kubernetes --name mykubernetescluster\n--node-count 1 --enable-addons monitoring --generate-ssh-keys\n```", "```\n    az aks install-cli\n    ```", "```\n    az aks get-credentials --resource-group mpn-rg-kubernetes -- name mykubernetescluster\n    ```", "```\n        kubectl get nodes\n        ```", "```\n        kubectl get Pods\n        ```", "```\n    az aks browse --resource-group mpn-rg-kubernetes --name mykubernetescluster\n    ```", "```\n    apiVersion: apps/v1 \n    kind: Deployment \n    metadata:\n      name: kubernetes-deployment \n      labels:\n        app: customapplication \n    spec:\n    replicas: 3\n    selector:\n      matchLabels:\n        app: customapplication \n    template:\n      metadata: \n        labels:\n          app: customapplication \n      spec:\n        containers:\n        - name: azuredevops\n          image: msftazuredevops.azurecr.io/azuredevops:586 \n          ports:\n          - containerPort: 80\n    ```", "```\n    kubectl apply -f deploy.yaml\n    ```", "```\n---\napiVersion: v1 \nkind: Service \nmetadata:\n  name: customapplication-service \nspec:\n  type: LoadBalancer \n  ports:\n  - port: 80 \n  selector:\n    app: customapplication\n```", "```\n    kubectl get service\n    ```", "```\nKubectl apply -f [file]\n```", "```\nreadinessProbe:\n    httpGet:\n        scheme: HTTPS\n        path: /index.xhtml\n        port: 8483 \n        initialDelaySeconds: 5\n        periodSeconds: 5\n        successThreshold: 1\n```", "```\nkubectl describe deployment kubernetes-deployment\n```", "```\nkubectl scale --replicas=[number of Pods] deployment/[deploymentname]\n```", "```\nresources: \n  requests:\n    cpu: 0.25 \nlimits:\n    cpu: 0.5\n```", "```\nkubectl autoscale deployment [deployment name] --cpu-percent=60 --min=1 --max=10\n```", "```\nkubectl get hpa\n```", "```\n    az aks show --resource-group mpn-rg-kubernetes --name mykubernetescluster --query agentPoolProfiles\n    ```", "```\n    az aks scale --resource-group mpn-rg-kubernetes --name mykubernetescluster --node-count 2 --nodepool-name nodepool1\n    ```", "```\naz aks update --resource-group mmpn-rg-kubernetes --name mykubernetescluster  --update-cluster-autoscaler --min-count 1 --max-count 5\n```", "```\ntask: KubernetesManifest@0 \n  inputs:\n  action: 'deploy'\n  kubernetesServiceConnection: '[service connection name]' \n  manifests: '[path to your deployment file]'\n  containers: 'msftazuredevops.azurecr.io/azuredevops:$(Build.BuildID)'\n```", "```\nstages:\n  - stage : Build \n    displayName : Build \n    jobs:\n    - job:\n      pool:\n        vmImage: 'ubuntu-latest' \n      continueOnError: false \n      steps:\n      - task: Docker@2 \n      inputs:\n        containerRegistry: '[Container Registry service connection]' \n        repository: 'azuredevops'\n        command: 'buildAndPush' \n        Dockerfile: '**/Dockerfile'\n        buildContext: '$(System.DefaultWorkingDirectory)/[folder path for docker]'\n    - task: CopyFiles@2 \n      inputs:\n        SourceFolder: '$(system.defaultworkingdirectory)/[path to the deployment manifest files]'\n        Contents: '*'\n        TargetFolder: '$(build.artifactstagingdirectory)' flattenFolders: true\n    - task: PublishBuildArtifacts@1 \n      inputs:\n        PathtoPublish: '$(Build.ArtifactStagingDirectory)' \n        ArtifactName: 'drop'\n        publishLocation: 'Container'\n```", "```\n- stage : Release \n  displayName : Release \n  jobs:\n  - deployment: KubernetesDeploy \n    displayName: Deploy Kubernetes \n    pool:\n      vmImage: 'ubuntu-latest' \n    environment: 'Kubernetes' \n    strategy:\n      runOnce: \n        deploy:\n          steps:\n          - task: DownloadPipelineArtifact@2 \n            displayName: 'Download pipeline artifacts' \n            inputs:\n              buildType: 'current'\n              targetPath: '$(Pipeline.Workspace)'\n          - task: KubernetesManifest@0 \n            inputs:\n              action: 'deploy'\n              kubernetesServiceConnection: '[Kubernetes service connection]'\n              manifests: '$(Pipeline.Workspace)[deployment manifest]' \n              containers: '[container registry]:$(Build.BuildID)\n```", "```\n    az aks create  --resource-group az400-dev --name  packtsbookaci --generate-ssh-keys --location eastus \n    az acr create --resource-group  az400-dev  --name packtbookacr --sku Standard --location eastus \n    ```", "```\n    az aks update -n 'packtsbookaci' -g 'az400-dev' --attach-acr 'packtbookacr'\n    ```", "```\n    trigger:\n    - main\n    pool:\n      vmImage: ubuntu-latest\n    variables:\n      buildConfiguration: 'Release'\n    steps:\n    - script: echo Hello, world!\n      displayName: 'Run a one-line script'\n    # Authenticate nuget.exe, dotnet, and MSBuild with Azure Artifacts and optionally other repositories\n    - task: NuGetAuthenticate@1\n      #inputs:\n        #nuGetServiceConnections: MyOtherOrganizationFeed, MyExternalPackageRepository # Optional\n        #forceReinstallCredentialProvider: false # Optional\n\n    - task: DotNetCoreCLI@2 \n      displayName: Restore\n      inputs:\n        command: restore\n        projects: '**/*.csproj'\n        feedsToUse: config\n        nugetConfigPath: $(Build.SourcesDirectory)/nugget.config\n    - task: DotNetCoreCLI@2 \n      displayName: Build\n      inputs:\n        command: build\n        projects: '**/*.csproj'\n        arguments: '--configuration $(buildConfiguration)' # Update this to match your need\n    - task: Docker@2\n      displayName: Build an image to container registry\n      inputs:\n        command: build\n        repository: 'SampleStarter'\n        dockerfile: '**/Dockerfile'\n        containerRegistry: 'packtbookacr'\n        tags: $(Build.BuildId)\n        arguments: '--build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN)'\n    - task: Docker@2\n      displayName: Build and push an image to container registry\n      inputs:\n        command: push\n        repository: 'SampleStarter'\n        dockerfile: '**/Dockerfile'\n        containerRegistry: 'packtbookacr'\n        tags: $(Build.BuildId)\n    ```", "```\n#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.\nFROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base\nWORKDIR /app\nEXPOSE 80\nEXPOSE 443\nFROM mcr.microsoft.com/dotnet/sdk:6.0 AS build\nWORKDIR /src\nRUN curl -L https://raw.githubusercontent.com/Microsoft/artifacts-credprovider/master/helpers/installcredprovider.sh  | sh\nCOPY [\"packtbookslibrary-api.csproj\", \".\"]\nCOPY ./nuget.config .\nARG FEED_ACCESSTOKEN\nENV VSS_NUGET_EXTERNAL_FEED_ENDPOINTS=\"{\\\"endpointCredentials\\\": [{\\\"endpoint\\\":\\\"https://pkgs.dev.azure.com/*****/PacktBookLibrary/_packaging/PacktBooksLibraryFeed/nuget/v3/index.json\\\", \\\"password\\\":\\\"${FEED_ACCESSTOKEN}\\\"}]}\"\nRUN dotnet restore \"./packtbookslibrary-api.csproj\" --interactive\nCOPY . .\nWORKDIR \"/src/.\"\nRUN dotnet build \"packtbookslibrary-api.csproj\" -c Release -o /app/build\nFROM build AS publish\nRUN dotnet publish \"packtbookslibrary-api.csproj\" -c Release -o /app/publish\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app/publish .\nENTRYPOINT [\"dotnet\", \"packtbookslibrary-api.dll\"]\n```"]