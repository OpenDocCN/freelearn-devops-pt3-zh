["```\n\n    mkdir myfirsthelmchart\n    ```", "```\n\n    helm create name_of_chart\n    ```", "```\n\n    helm install nginxapp .\n    ```", "```\n\n    helm install mynewapp .\n    ```", "```\n\n    apiVersion: apps/v1\n    ```", "```\n\n    kind: Deployment\n    ```", "```\n\n    metadata:\n    ```", "```\n\n      name: nginx-deployment\n    ```", "```\n\n    spec:\n    ```", "```\n\n      selector:\n    ```", "```\n\n        matchLabels:\n    ```", "```\n\n          app: nginxdeployment\n    ```", "```\n\n      replicas: 2\n    ```", "```\n\n      template:\n    ```", "```\n\n        metadata:\n    ```", "```\n\n          labels:\n    ```", "```\n\n            app: nginxdeployment\n    ```", "```\n\n        spec:\n    ```", "```\n\n          containers:\n    ```", "```\n\n          - name: nginxdeployment\n    ```", "```\n\n            image: nginx:latest\n    ```", "```\n\n            ports:\n    ```", "```\n\n            - containerPort: 80\n    ```", "```\n\n    apiVersion: kustomize.config.k8s.io/v1beta1\n    ```", "```\n\n    kind: Kustomization\n    ```", "```\n\n    resources:\n    ```", "```\n\n      - deployment.yaml\n    ```", "```\n\n    apiVersion: kustomize.config.k8s.io/v1beta1\n    ```", "```\n\n    kind: Kustomization\n    ```", "```\n\n    resources:\n    ```", "```\n\n    - ../../base/\n    ```", "```\n\n    replicas:\n    ```", "```\n\n    - name: nginx-deployment\n    ```", "```\n\n      count: 1\n    ```", "```\n\n    kubectl kustomize\n    ```", "```\n\n    provider \"google\" {\n    ```", "```\n\n      project     = var.project_id\n    ```", "```\n\n      region      = var.region\n    ```", "```\n\n    }\n    ```", "```\n\n    resource \"google_container_cluster\" \"primary\" {\n    ```", "```\n\n      name     = var.cluster_name\n    ```", "```\n\n      location = var.region\n    ```", "```\n\n      remove_default_node_pool = true\n    ```", "```\n\n      initial_node_count       = 1\n    ```", "```\n\n      network    = var.vpc_name\n    ```", "```\n\n      subnetwork = var.subnet_name\n    ```", "```\n\n    }\n    ```", "```\n\n    resource \"google_container_node_pool\" \"nodes\" {\n    ```", "```\n\n      name       = \"${google_container_cluster.primary.name}-node-pool\"\n    ```", "```\n\n      location   = var.region\n    ```", "```\n\n      cluster    = google_container_cluster.primary.name\n    ```", "```\n\n      node_count = var.node_count\n    ```", "```\n\n      node_config {\n    ```", "```\n\n        oauth_scopes = [\n    ```", "```\n\n          \"https://www.googleapis.com/auth/logging.write\",\n    ```", "```\n\n          \"https://www.googleapis.com/auth/monitoring\",\n    ```", "```\n\n        ]\n    ```", "```\n\n        labels = {\n    ```", "```\n\n          env = var.project_id\n    ```", "```\n\n        }\n    ```", "```\n\n        machine_type = \"n1-standard-1\"\n    ```", "```\n\n        tags         = [\"gke-node\", \"${var.project_id}-gke\"]\n    ```", "```\n\n        metadata = {\n    ```", "```\n\n          disable-legacy-endpoints = \"true\"\n    ```", "```\n\n        }\n    ```", "```\n\n      }\n    ```", "```\n\n    }\n    ```", "```\n\nname: GKE Kubernetes Deployment\non:\n  workflow_dispatch:\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Terraform\n        uses: hashicorp/setup-terraform@v1\n      - name: Set up gcloud Cloud SDK environment\n        uses: google-github-actions/setup-gcloud@v0.6.0\n        with:\n          service_account_email:\n          service_account_key:\n          project_id:\n      - name: Terraform Init\n        working-directory: where_the_gke_code_lives\n        run: terraform init\n      - name: Terraform Format\n        working-directory: where_the_gke_code_lives\n        run: terraform fmt\n      - name: Terraform Plan\n        working-directory: where_the_gke_code_lives\n        run: terraform plan\n      - name: Terraform Apply\n        working-directory: where_the_gke_code_lives\n        run: terraform apply -auto-approve\n```", "```\n\n    kubectl create namespace argocd\n    ```", "```\n\n    kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/ha/install.yaml\n    ```", "```\n\n    kubectl get secret -n argocd argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n    ```", "```\n\n    kubectl port-forward -n argocd service/argocd-server :80\n    ```", "```\n\n    argocd login 127.0.0.1:argocd_port_here\n    ```", "```\n\n    kubectl create namespace sock-shop\n    ```", "```\n\n    argocd app create socks --repo https://github.com/microservices-demo/microservices-demo.git --path deploy/kubernetes --dest-server https://kubernetes.default.svc --dest-namespace sock-shop\n    ```", "```\n\n    argocd app get socks\n    ```", "```\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  selector:\n    matchLabels:\n      app: nginxdeployment\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: nginxdeployment\n    spec:\n      containers:\n      - name: nginxdeployment\n        image: nginx:lates\n        ports:\n        - containerPort: 80\n```", "```\n\nkubectl get pods\n```", "```\n\nkubectl describe pods pod_name\n```", "```\n\nkubectl logs pod_name\n```", "```\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  selector:\n    matchLabels:\n      app: nginxdeployment\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: nginxdeployment\n    spec:\n      containers:\n      - name: nginxdeployment\n        image: nginx:latest\n        ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginxservice\nspec:\n  selector:\n    app: nginxdeployment\n  ports:\n    - protocol: TCP\n      port: 80\n  type: LoadBalancer\n```", "```\n\nkubectl run -it --rm --restart=Never busybox --image=gcr.io/google-containers/busybox sh\n```", "```\n\nkubectl get service\n```", "```\n\nnslookup service_name\n```", "```\n\nnslookup service_name.namespace_name.svc.cluster.local\n```", "```\n\nkubectl get service name_of_service -o json\n```", "```\n\nkubectl get pods -l app=name_of_deployment\n```", "```\n\nkubectl get pods\n```", "```\n\nkubectl describe deployment deployment_name\n```", "```\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: aks-helloworld-one\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: aks-helloworld-one\n  template:\n    metadata:\n      labels:\n        app: aks-helloworld-one\n    spec:\n      containers:\n      - name: aks-helloworld-one\n        image: mcr.microsoft.com/azuredocs/aks-helloworld:v1\n        ports:\n        - containerPort: 80\n        env:\n        - name: TITLE\n          value: \"Welcome to Azure Kubernetes Service (AKS)\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: aks-helloworld-one\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n  selector:\n    app: aks-helloworld-one\n```", "```\n\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: hello-world-ingress-static\n  annotations:\n    nginx.ingress.kubernetes.io/ssl-redirect: \"false\"\nspec:\n  ingressClassName: nginx\n  rules:\n  - http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: aks-helloworld-one\n            port:\n              number: 80\n```", "```\n\nkubectl port-forward service/aks-helloworld-one :80\n```", "```\n\ncurl -L https://istio.io/downloadIstio | sh\n```", "```\n\nexport PATH=$PWD/bin:$PATH\n```", "```\n\necho \"export PATH=$PATH:$HOME/istio-1.15.0/bin\" >> ~/.bashrc\n```", "```\n\nistioctl install --set values.gateways.istio-ingressgateway.enabled=false\n```", "```\n\nkubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.15/samples/addons/kiali.yaml\n```", "```\n\nkubectl port-forward -n istio-system service/kiali :20001\n```", "```\n\nistioctl kube-inject -f nginx.yaml | kubectl apply -f –\n```"]