- en: '*Chapter 8*: Managing Dependencies Using GitHub Packages'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using a package registry to manage your dependencies should be an absolute no-brainer.
    If you are writing .NET, you use NuGet, if you are writing JavaScript, it's probably
    npm, and if you are using Java, it's Maven or Gradle. And yet, I meet many teams
    that still use their filesystem or Git submodules to reuse code files in multiple
    code bases. Or they build assemblies and store them in source control. Moving
    to packages with **semantic versioning** is easy and cheap, and it boosts the
    quality and discoverability of your shared code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, I show you how you can use GitHub Packages to manage your
    internal dependencies like you manage your software supply chain. The main topics
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using npm packages with Actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Docker with Packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Maven, Gradle, NuGet, and RubyGems packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Semantic Versioning
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`1.0.0` or `1.5.99-beta`. The format is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<major>.<minor>.<patch>-<pre>`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[0-9A-Za-z-]`). The longer the text, the smaller the pre-version (meaning
    `-alpha` < `-beta` < `-rc`). A pre-release version is always smaller than a normal
    version (`1.0.0-alpha` < `1.0.0`).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See [https://semver.org/](https://semver.org/) for the complete specification.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using packages does not automatically mean you are using a loosely coupled architecture.
    Packages are, in most cases, still hard dependencies. It depends on how you use
    the packages to really decouple your release cadence.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**GitHub Packages** is a platform for hosting and managing your packages, containers,
    and other dependencies.'
  prefs: []
  type: TYPE_NORMAL
- en: You can integrate GitHub Packages with GitHub Actions, the GitHub APIs, and
    webhooks. This allows you to create an end-to-end workflow to release and consume
    your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'GitHub Packages currently supports the following registries:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Container** registry supporting **Docker** and **OCI** images'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package.json`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nupkg`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pom.xml`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build.gradle`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Gemfile`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pricing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Packages are free for public packages. For private packages, each GitHub version
    includes a certain amount of storage and data transfer. Any usage beyond that
    amount is charged separately and can be controlled using spending limits.
  prefs: []
  type: TYPE_NORMAL
- en: Monthly billed customers have a default spending limit of $0 US dollars, which
    prevents additional usage of storage or data transfer. Invoiced customers have
    an unlimited default spending limit.
  prefs: []
  type: TYPE_NORMAL
- en: 'The amount of included storage and data transferred for each product is listed
    in *Table 8.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 8.1 – Included storage and data transfer for Packages in GitHub products'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Table_8.1.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 8.1 – Included storage and data transfer for Packages in GitHub products
  prefs: []
  type: TYPE_NORMAL
- en: All outbound data transfer is free when triggered by GitHub Actions. All inbound
    data transfer from any source is also free.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the included limits are reached, the following costs are charged:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Storage**: $0.25 USD per GB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data Transfer**: $0.50 USD per GB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more details on pricing, see [https://docs.github.com/en/billing/managing-billing-for-github-packages/about-billing-for-github-packages](https://docs.github.com/en/billing/managing-billing-for-github-packages/about-billing-for-github-packages).
  prefs: []
  type: TYPE_NORMAL
- en: Permissions and visibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A package that is published to a repository inherits the permissions and visibility
    of the repository that owns the package. Currently, only container packages offer
    granular permissions and access control (see *Figure 8.1*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Managing access to container packages'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_08_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.1 – Managing access to container packages
  prefs: []
  type: TYPE_NORMAL
- en: All other package types follow the repository access for repository-scoped packages.
    At the organization level, packages are private with write permissions for owners
    and read permissions for members.
  prefs: []
  type: TYPE_NORMAL
- en: If you have admin permissions to a container image, you can set the access permissions
    for the container image to `private` or `public`. Public images allow anonymous
    access without authentication. You can also grant access permissions for a container
    image that are separate from the permissions you've set at the organization and
    repository levels.
  prefs: []
  type: TYPE_NORMAL
- en: At the organization level, you can set the kind of container packages members
    can publish. You can also see and restore deleted packages (see *Figure 8.2*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Package permissions on organization level'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_08_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.2 – Package permissions on organization level
  prefs: []
  type: TYPE_NORMAL
- en: For container images owned by a user account, you can give any person an access
    role. For container images published and owned by an organization, you can only
    grant access roles to persons or teams in your organization.
  prefs: []
  type: TYPE_NORMAL
- en: For more details on permissions and visibility, see [https://docs.github.com/en/packages/learn-github-packages/configuring-a-packages-access-control-and-visibility](https://docs.github.com/en/packages/learn-github-packages/configuring-a-packages-access-control-and-visibility).
  prefs: []
  type: TYPE_NORMAL
- en: Using npm packages with Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is very easy to set up a release workflow for packages with GitHub Actions.
    You can use `GITHUB_TOKEN` to authenticate and the native clients of your package
    managers. To try it out with npm, you can follow the step-by-step instructions
    here: [https://github.com/wulfland/package-demo](https://github.com/wulfland/package-demo).'
  prefs: []
  type: TYPE_NORMAL
- en: You can create the package using `npm init` if you have installed npm on your
    machine. Otherwise, just copy the contents of `package.json` and `package-lock.json`
    from the aforementioned repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'The workflow to publish the package is simple. It gets triggered every time
    a new release is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The workflow consists of two jobs. The first one only builds and tests the
    package using npm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The second one published the image to the registry. This one requires permission
    to write packages and to read content. It uses `${{ secrets.GITHUB_TOKEN }}` to
    authenticate to the registry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The workflow is simple and will publish a new package to your npm registry every
    time you create a new release in GitHub. You can find the details and settings
    for the package under **Code** | **Packages** (see *Figure 8.3*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Details and settings of the package'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_08_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.3 – Details and settings of the package
  prefs: []
  type: TYPE_NORMAL
- en: You can then consume the package in other projects using `npm install @<owner-name>/<package-name>`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Note that the version of the package is not the tag or release. It is the version
    that is in the `package.json` file. If you don't update the version before creating
    a second release, the workflow will fail.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to automate this, there are a few actions that can help. You can
    use `github.event.release.name`) or tag (`github.event.release.tag_name`) and
    set the package version to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: If you want a more flexible approach that calculates your semantic version number
    based upon tags and branches, you can use **GitVersion** (see [https://gitversion.net/](https://gitversion.net/)).
    **GitVersion** is part of the **GitTools** action (see [https://github.com/marketplace/actions/gittools](https://github.com/marketplace/actions/gittools)).
  prefs: []
  type: TYPE_NORMAL
- en: 'For `fetch-depth` parameter to the checkout action and setting it to `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, install `execute` action. Set an `id` if you want to get details of the
    semantic version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The calculated final semantic version number is stored as the environment variable
    `$GITVERSION_SEMVER`. You can use this, for example, as the input for **npm-version**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Note that **GitVersion** supports configuration files to learn how it should
    calculate the version! See [https://gitversion.net/](https://gitversion.net/)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to access details from `gitversion` task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'With **GitVersion**, you can extend your workflow to create packages from branches
    or tags – not only releases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Building a release workflow with automated semantic versioning is complex and
    depends a lot on the workflow and package manager you use. This chapter should
    get you started. The techniques can also be applied to **NuGet**, **Maven**, or
    any other package manager.
  prefs: []
  type: TYPE_NORMAL
- en: Using Docker with Packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The container registry of GitHub is `ghcr.io`. Container images can be owned
    by an organization or personal account, but you can customize the access to each
    of them. By default, the images inherit the visibility and permission model of
    the repository where the workflow is run.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to try it out yourself, you can find the step-by-step guide here:
    [https://github.com/wulfland/container-demo](https://github.com/wulfland/container-demo).
    Follow these steps to understand what the build does:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new repository called `container-demo` and add a very simple `Dockerfile`
    (without extension):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Docker image inherits from the alpine distribution and outputs `Hello World!`
    to your console. If you are new to Docker and want to try it out, clone the repository
    and change your directory in the root of the local repository. Build the image
    for the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'And then run the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: The `--rm` argument automatically removes the container when it is done. This
    should write `Hello World!` to your console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now create a workflow file called `release-container.yml` in `.github/workflows/`.
    The workflow will be triggered every time a new release is created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The registry and the name of the image are set as environment variables. I
    use the repository name as the name for the image. You can also set a fix name
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The job needs write permission to `packages` and it will need to clone the
    repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '`docker/login-action` authenticates the workflow using `GITHUB_TOKEN`. This
    is the recommended way to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '`metadata-action` extracts metadata from the Git context and applies tags to
    the Docker image. When we create a release, we push a tag (`refs/tags/<tag-name>`).
    The action will create a Docker tag with the same name as the Git tag and also
    create the latest tag for the image. Note that the metadata is passed as output
    variables to the next step! That''s why I set an `id` for this step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '`build-push-action` builds the image and pushes it to the container registry.
    The tags and labels are pulled from the outputs of the `meta` step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Create a new release and tag to trigger the workflow. Once the workflow is complete,
    you can find the details and settings for the package under **Code** | **Packages**
    (see *Figure 8.4*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Details and settings of the container package'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_08_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.4 – Details and settings of the container package
  prefs: []
  type: TYPE_NORMAL
- en: GitHub will now create a new Docker image and add it to the registry if you
    create a new release.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can pull you container locally from the registry and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that you have to authenticate using `docker login ghcr.io` before pulling
    the image if your package is not public.
  prefs: []
  type: TYPE_NORMAL
- en: The container registry is a great way to release software. From command-line
    tools to complete microservices, you can ship your software with all its dependencies
    for others to consume it.
  prefs: []
  type: TYPE_NORMAL
- en: Apache Maven, Gradle, NuGet, and RubyGems packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The other package types are basically the same as npm and Docker: if you know
    the native package manager, they are really easy to use. I will only give a very
    brief introduction to each one.'
  prefs: []
  type: TYPE_NORMAL
- en: Java with Apache Maven
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For `pom.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then publish your package in a workflow using `GITHUB_TOKEN`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: To retrieve packages from your development machine, you have to authenticate
    using a `read:packages` scope. You can generate a new token in GitHub under `~/.m2/settings.xml`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, see [https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry).
  prefs: []
  type: TYPE_NORMAL
- en: Gradle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In `build.gradle` file. You can read the username and access token from the
    environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'In the workflow, you can publish using `gradle publish`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: For more details, see [https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry).
  prefs: []
  type: TYPE_NORMAL
- en: RubyGems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to build and publish all `.gemspec` files in your repository, you
    can use an action from the marketplace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'To work with packages, you need at least RubyGems 2.4.1 and bundler 1.6.4\.
    Modify the `~/.gemrc` file and add the registry as the source by providing your
    username and personal access token to install packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'To install packages using **bundler**, you also must configure it with your
    user and token:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: For more details, see [https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry).
  prefs: []
  type: TYPE_NORMAL
- en: NuGet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To publish `setup-dotnet` action. It has additional parameters for `source-url`.
    The token is set using an environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then build and test your project. After that, just pack and push the
    package to the registry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'To install packages, you have to add the registry as a source to the `nuget.config`
    file, including your user and token:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: For more information, see [https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with packages is straightforward. The biggest challenge is authentication.
    But with `GITHUB_TOKEN` in GitHub Actions, it is easy to set up a completely automated
    release workflow. That's why it is important for your teams to have it in your
    toolbox. A lot of problems in releasing code can be reduced if you share code
    as containers or packages using semantic versioning and a separate release flow.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you have learned how you can use semantic versioning and packages
    to better manage your internal dependencies and to share code. You have learned
    what packages are and how you can set up release workflows for each package type.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll have a closer look at environments and how you can
    deploy with GitHub actions to any platform.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information about the topics in this chapter, refer to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Semantic versioning*: [https://semver.org/](https://semver.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Billing and pricing*: [https://docs.github.com/en/billing/managing-billing-for-github-packages/about-billing-for-github-packages](https://docs.github.com/en/billing/managing-billing-for-github-packages/about-billing-for-github-packages)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Access control and visibility*: [https://docs.github.com/en/packages/learn-github-packages/configuring-a-packages-access-control-and-visibility](https://docs.github.com/en/packages/learn-github-packages/configuring-a-packages-access-control-and-visibility)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Working with the registry* (Container, Apache Maven, Gradle. NuGet, npm, RubyGems):
    [https://docs.github.com/en/packages/working-with-a-github-packages-registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
