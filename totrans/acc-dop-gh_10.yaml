- en: '*Chapter 8*: Managing Dependencies Using GitHub Packages'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 8 章*：使用 GitHub Packages 管理依赖关系'
- en: Using a package registry to manage your dependencies should be an absolute no-brainer.
    If you are writing .NET, you use NuGet, if you are writing JavaScript, it's probably
    npm, and if you are using Java, it's Maven or Gradle. And yet, I meet many teams
    that still use their filesystem or Git submodules to reuse code files in multiple
    code bases. Or they build assemblies and store them in source control. Moving
    to packages with **semantic versioning** is easy and cheap, and it boosts the
    quality and discoverability of your shared code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用包注册表来管理依赖关系应该是显而易见的选择。如果你编写 .NET 代码，你会使用 NuGet；如果你编写 JavaScript 代码，可能会使用 npm；如果你使用
    Java，通常是 Maven 或 Gradle。然而，我遇到过许多团队仍然使用文件系统或 Git 子模块在多个代码库中重用代码文件，或者构建程序集并将它们存储在源代码管理中。转向使用带有**语义版本控制**的包是简单且低成本的，而且能够提升共享代码的质量和可发现性。
- en: 'In this chapter, I show you how you can use GitHub Packages to manage your
    internal dependencies like you manage your software supply chain. The main topics
    are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将向你展示如何像管理软件供应链一样使用 GitHub Packages 管理内部依赖关系。主要内容如下：
- en: GitHub Packages
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub Packages
- en: Using npm packages with Actions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 npm 包与 Actions
- en: Using Docker with Packages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Docker 和 Packages
- en: Apache Maven, Gradle, NuGet, and RubyGems packages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Maven、Gradle、NuGet 和 RubyGems 包
- en: Semantic Versioning
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语义版本控制
- en: '`1.0.0` or `1.5.99-beta`. The format is as follows:'
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`1.0.0` 或 `1.5.99-beta`。格式如下：'
- en: '`<major>.<minor>.<patch>-<pre>`'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<major>.<minor>.<patch>-<pre>`'
- en: '`[0-9A-Za-z-]`). The longer the text, the smaller the pre-version (meaning
    `-alpha` < `-beta` < `-rc`). A pre-release version is always smaller than a normal
    version (`1.0.0-alpha` < `1.0.0`).'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`[0-9A-Za-z-]`）。文本越长，预发布版本越小（意味着 `-alpha` < `-beta` < `-rc`）。预发布版本始终比正常版本小（`1.0.0-alpha`
    < `1.0.0`）。'
- en: See [https://semver.org/](https://semver.org/) for the complete specification.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅 [https://semver.org/](https://semver.org/) 获取完整规范。
- en: Using packages does not automatically mean you are using a loosely coupled architecture.
    Packages are, in most cases, still hard dependencies. It depends on how you use
    the packages to really decouple your release cadence.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用包并不意味着你自动使用了松耦合架构。在大多数情况下，包仍然是强依赖关系。是否能真正解耦发布节奏取决于你如何使用这些包。
- en: GitHub Packages
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub Packages
- en: '**GitHub Packages** is a platform for hosting and managing your packages, containers,
    and other dependencies.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**GitHub Packages** 是一个托管和管理你的包、容器及其他依赖项的平台。'
- en: You can integrate GitHub Packages with GitHub Actions, the GitHub APIs, and
    webhooks. This allows you to create an end-to-end workflow to release and consume
    your code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 GitHub Packages 与 GitHub Actions、GitHub APIs 和 Webhooks 集成。这使你能够创建一个端到端的工作流来发布和使用你的代码。
- en: 'GitHub Packages currently supports the following registries:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Packages 目前支持以下注册表：
- en: '**Container** registry supporting **Docker** and **OCI** images'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器** 注册表支持 **Docker** 和 **OCI** 镜像'
- en: '`package.json`)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json`)'
- en: '`nupkg`)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nupkg`)'
- en: '`pom.xml`)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pom.xml`)'
- en: '`build.gradle`)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build.gradle`)'
- en: '`Gemfile`)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gemfile`)'
- en: Pricing
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定价
- en: Packages are free for public packages. For private packages, each GitHub version
    includes a certain amount of storage and data transfer. Any usage beyond that
    amount is charged separately and can be controlled using spending limits.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 公共包是免费的。对于私有包，每个 GitHub 版本包括一定量的存储和数据传输。超过该限额的任何使用将单独收费，并且可以通过支出限制进行控制。
- en: Monthly billed customers have a default spending limit of $0 US dollars, which
    prevents additional usage of storage or data transfer. Invoiced customers have
    an unlimited default spending limit.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 月度计费的客户默认有 $0 美元的支出限额，这会阻止额外使用存储或数据传输。开具发票的客户则有无限的默认支出限额。
- en: 'The amount of included storage and data transferred for each product is listed
    in *Table 8.1*:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 每个产品的包含存储和传输数据量列在 *表 8.1* 中：
- en: '![Table 8.1 – Included storage and data transfer for Packages in GitHub products'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![表 8.1 – GitHub 产品中包的包含存储和数据传输](img/Table_8.1.jpg)'
- en: '](img/Table_8.1.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Table_8.1.jpg)'
- en: Table 8.1 – Included storage and data transfer for Packages in GitHub products
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 表 8.1 – GitHub 产品中包的包含存储和数据传输
- en: All outbound data transfer is free when triggered by GitHub Actions. All inbound
    data transfer from any source is also free.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所有由 GitHub Actions 触发的外部数据传输都是免费的。任何来源的内部数据传输也都是免费的。
- en: 'When the included limits are reached, the following costs are charged:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当达到包含的限制时，将收取以下费用：
- en: '**Storage**: $0.25 USD per GB'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储**：每 GB $0.25 美元'
- en: '**Data Transfer**: $0.50 USD per GB'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据传输**：每 GB $0.50 美元'
- en: For more details on pricing, see [https://docs.github.com/en/billing/managing-billing-for-github-packages/about-billing-for-github-packages](https://docs.github.com/en/billing/managing-billing-for-github-packages/about-billing-for-github-packages).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于定价的信息，请参阅 [https://docs.github.com/en/billing/managing-billing-for-github-packages/about-billing-for-github-packages](https://docs.github.com/en/billing/managing-billing-for-github-packages/about-billing-for-github-packages)。
- en: Permissions and visibility
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 权限和可见性
- en: A package that is published to a repository inherits the permissions and visibility
    of the repository that owns the package. Currently, only container packages offer
    granular permissions and access control (see *Figure 8.1*).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 发布到仓库的包继承该仓库的权限和可见性。当前，只有容器包提供详细的权限和访问控制（见*图 8.1*）。
- en: '![Figure 8.1 – Managing access to container packages'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.1 – 管理对容器包的访问'
- en: '](img/B17827_08_01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_08_01.jpg)'
- en: Figure 8.1 – Managing access to container packages
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – 管理对容器包的访问
- en: All other package types follow the repository access for repository-scoped packages.
    At the organization level, packages are private with write permissions for owners
    and read permissions for members.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他包类型遵循仓库作用域包的仓库访问权限。在组织级别，包是私有的，所有者具有写权限，成员具有读权限。
- en: If you have admin permissions to a container image, you can set the access permissions
    for the container image to `private` or `public`. Public images allow anonymous
    access without authentication. You can also grant access permissions for a container
    image that are separate from the permissions you've set at the organization and
    repository levels.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对容器镜像具有管理员权限，你可以将容器镜像的访问权限设置为`private`或`public`。公开镜像允许匿名访问，无需认证。你还可以为容器镜像设置与组织和仓库级别的权限分开的访问权限。
- en: At the organization level, you can set the kind of container packages members
    can publish. You can also see and restore deleted packages (see *Figure 8.2*).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在组织级别，你可以设置成员可以发布的容器包类型。你还可以查看和恢复已删除的包（见*图 8.2*）。
- en: '![Figure 8.2 – Package permissions on organization level'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.2 – 组织级别的包权限'
- en: '](img/B17827_08_02.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_08_02.jpg)'
- en: Figure 8.2 – Package permissions on organization level
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – 组织级别的包权限
- en: For container images owned by a user account, you can give any person an access
    role. For container images published and owned by an organization, you can only
    grant access roles to persons or teams in your organization.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于由用户帐户拥有的容器镜像，你可以为任何人分配访问角色。对于由组织发布并拥有的容器镜像，你只能为组织中的人员或团队分配访问角色。
- en: For more details on permissions and visibility, see [https://docs.github.com/en/packages/learn-github-packages/configuring-a-packages-access-control-and-visibility](https://docs.github.com/en/packages/learn-github-packages/configuring-a-packages-access-control-and-visibility).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于权限和可见性的信息，请参阅 [https://docs.github.com/en/packages/learn-github-packages/configuring-a-packages-access-control-and-visibility](https://docs.github.com/en/packages/learn-github-packages/configuring-a-packages-access-control-and-visibility)。
- en: Using npm packages with Actions
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 npm 包与 Actions
- en: 'It is very easy to set up a release workflow for packages with GitHub Actions.
    You can use `GITHUB_TOKEN` to authenticate and the native clients of your package
    managers. To try it out with npm, you can follow the step-by-step instructions
    here: [https://github.com/wulfland/package-demo](https://github.com/wulfland/package-demo).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 设置包的发布工作流非常简单。你可以使用`GITHUB_TOKEN`进行认证，并使用包管理器的原生客户端。要尝试使用
    npm，你可以按照这里的逐步说明进行操作：[https://github.com/wulfland/package-demo](https://github.com/wulfland/package-demo)。
- en: You can create the package using `npm init` if you have installed npm on your
    machine. Otherwise, just copy the contents of `package.json` and `package-lock.json`
    from the aforementioned repository.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的机器上已经安装了 npm，你可以使用`npm init`来创建包。否则，只需从上述仓库复制`package.json`和`package-lock.json`的内容。
- en: 'The workflow to publish the package is simple. It gets triggered every time
    a new release is created:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 发布包的工作流很简单。每次创建新版本时，它都会被触发：
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The workflow consists of two jobs. The first one only builds and tests the
    package using npm:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流由两个作业组成。第一个作业仅使用 npm 构建和测试包：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The second one published the image to the registry. This one requires permission
    to write packages and to read content. It uses `${{ secrets.GITHUB_TOKEN }}` to
    authenticate to the registry:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个操作将图像发布到注册表。这个操作需要写入包和读取内容的权限。它使用`${{ secrets.GITHUB_TOKEN }}`来进行注册表认证：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The workflow is simple and will publish a new package to your npm registry every
    time you create a new release in GitHub. You can find the details and settings
    for the package under **Code** | **Packages** (see *Figure 8.3*).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工作流很简单，每次在GitHub中创建新发布时，它都会将新包发布到你的npm注册表中。你可以在**Code** | **Packages**下找到包的详细信息和设置（参见*图
    8.3*）。
- en: '![Figure 8.3 – Details and settings of the package'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.3 – 包的详细信息和设置'
- en: '](img/B17827_08_03.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_08_03.jpg)'
- en: Figure 8.3 – Details and settings of the package
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 包的详细信息和设置
- en: You can then consume the package in other projects using `npm install @<owner-name>/<package-name>`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以在其他项目中使用`npm install @<owner-name>/<package-name>`来使用该包。
- en: Note
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the version of the package is not the tag or release. It is the version
    that is in the `package.json` file. If you don't update the version before creating
    a second release, the workflow will fail.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，包的版本不是标签或发布版本，而是`package.json`文件中的版本。如果在创建第二个发布版本之前没有更新版本，工作流将会失败。
- en: 'If you want to automate this, there are a few actions that can help. You can
    use `github.event.release.name`) or tag (`github.event.release.tag_name`) and
    set the package version to it:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想自动化此过程，有一些操作可以帮助你。你可以使用`github.event.release.name`或标签（`github.event.release.tag_name`），并将包版本设置为此：
- en: '[PRE28]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: If you want a more flexible approach that calculates your semantic version number
    based upon tags and branches, you can use **GitVersion** (see [https://gitversion.net/](https://gitversion.net/)).
    **GitVersion** is part of the **GitTools** action (see [https://github.com/marketplace/actions/gittools](https://github.com/marketplace/actions/gittools)).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要一种更灵活的方法，根据标签和分支计算语义版本号，可以使用**GitVersion**（请参见[https://gitversion.net/](https://gitversion.net/)）。**GitVersion**是**GitTools**操作的一部分（请参见[https://github.com/marketplace/actions/gittools](https://github.com/marketplace/actions/gittools)）。
- en: 'For `fetch-depth` parameter to the checkout action and setting it to `0`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对于checkout操作的`fetch-depth`参数并将其设置为`0`：
- en: '[PRE32]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Next, install `execute` action. Set an `id` if you want to get details of the
    semantic version:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，安装`execute`操作。如果你想获取语义版本的详细信息，请设置`id`：
- en: '[PRE36]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The calculated final semantic version number is stored as the environment variable
    `$GITVERSION_SEMVER`. You can use this, for example, as the input for **npm-version**.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 计算出的最终语义版本号将作为环境变量`$GITVERSION_SEMVER`存储。你可以将其用作例如**npm-version**的输入。
- en: Note
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that **GitVersion** supports configuration files to learn how it should
    calculate the version! See [https://gitversion.net/](https://gitversion.net/)
    for more information.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，**GitVersion**支持配置文件，以了解它应该如何计算版本！有关更多信息，请参见[https://gitversion.net/](https://gitversion.net/)。
- en: 'If you need to access details from `gitversion` task:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要访问`gitversion`任务中的详细信息：
- en: '[PRE43]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'With **GitVersion**, you can extend your workflow to create packages from branches
    or tags – not only releases:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**GitVersion**，你可以扩展工作流，从分支或标签创建包——不仅限于发布版本：
- en: '[PRE46]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Building a release workflow with automated semantic versioning is complex and
    depends a lot on the workflow and package manager you use. This chapter should
    get you started. The techniques can also be applied to **NuGet**, **Maven**, or
    any other package manager.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个带有自动语义版本控制的发布工作流是复杂的，并且在很大程度上取决于你使用的工作流和包管理器。本章应能帮助你入门。此技巧也可以应用于**NuGet**、**Maven**或任何其他包管理器。
- en: Using Docker with Packages
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker与包
- en: The container registry of GitHub is `ghcr.io`. Container images can be owned
    by an organization or personal account, but you can customize the access to each
    of them. By default, the images inherit the visibility and permission model of
    the repository where the workflow is run.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub的容器注册表是`ghcr.io`。容器镜像可以由组织或个人帐户拥有，但你可以自定义每个镜像的访问权限。默认情况下，镜像继承了运行工作流的仓库的可见性和权限模型。
- en: 'If you want to try it out yourself, you can find the step-by-step guide here:
    [https://github.com/wulfland/container-demo](https://github.com/wulfland/container-demo).
    Follow these steps to understand what the build does:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想亲自试一下，可以在这里找到逐步指南：[https://github.com/wulfland/container-demo](https://github.com/wulfland/container-demo)。按照这些步骤了解构建过程的工作原理：
- en: 'Create a new repository called `container-demo` and add a very simple `Dockerfile`
    (without extension):'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`container-demo`的新仓库，并添加一个非常简单的`Dockerfile`（没有扩展名）：
- en: '[PRE52]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The Docker image inherits from the alpine distribution and outputs `Hello World!`
    to your console. If you are new to Docker and want to try it out, clone the repository
    and change your directory in the root of the local repository. Build the image
    for the container:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 该Docker镜像继承自alpine发行版，并将`Hello World!`输出到您的控制台。如果您是Docker新手并想尝试，可以克隆仓库并将目录切换到本地仓库的根目录。然后为容器构建镜像：
- en: '[PRE53]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'And then run the container:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行容器：
- en: '[PRE54]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The `--rm` argument automatically removes the container when it is done. This
    should write `Hello World!` to your console.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`--rm`参数在完成时自动移除容器。这应该会将`Hello World!`输出到您的控制台。'
- en: 'Now create a workflow file called `release-container.yml` in `.github/workflows/`.
    The workflow will be triggered every time a new release is created:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在`.github/workflows/`目录下创建一个名为`release-container.yml`的工作流文件。每当创建新的发布时，工作流将被触发：
- en: '[PRE55]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The registry and the name of the image are set as environment variables. I
    use the repository name as the name for the image. You can also set a fix name
    here:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 注册表和镜像名称被设置为环境变量。我使用仓库名称作为镜像名称。您也可以在这里设置固定名称：
- en: '[PRE56]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The job needs write permission to `packages` and it will need to clone the
    repository:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 该工作需要对`packages`具有写权限，并且需要克隆仓库：
- en: '[PRE57]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '`docker/login-action` authenticates the workflow using `GITHUB_TOKEN`. This
    is the recommended way to do it:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker/login-action`使用`GITHUB_TOKEN`对工作流进行身份验证。这是推荐的做法：'
- en: '[PRE58]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '`metadata-action` extracts metadata from the Git context and applies tags to
    the Docker image. When we create a release, we push a tag (`refs/tags/<tag-name>`).
    The action will create a Docker tag with the same name as the Git tag and also
    create the latest tag for the image. Note that the metadata is passed as output
    variables to the next step! That''s why I set an `id` for this step:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`metadata-action`从Git上下文中提取元数据，并将标签应用于Docker镜像。当我们创建发布时，我们推送一个标签（`refs/tags/<tag-name>`）。该操作将创建一个与Git标签同名的Docker标签，并为镜像创建最新标签。请注意，元数据作为输出变量传递给下一个步骤！这就是为什么我为此步骤设置了一个`id`：'
- en: '[PRE59]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '`build-push-action` builds the image and pushes it to the container registry.
    The tags and labels are pulled from the outputs of the `meta` step:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`build-push-action`构建镜像并将其推送到容器注册表。标签和标签从`meta`步骤的输出中提取：'
- en: '[PRE60]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Create a new release and tag to trigger the workflow. Once the workflow is complete,
    you can find the details and settings for the package under **Code** | **Packages**
    (see *Figure 8.4*).
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的发布和标签以触发工作流。工作流完成后，您可以在**Code** | **Packages**下找到包的详细信息和设置（参见*图8.4*）。
- en: '![Figure 8.4 – Details and settings of the container package'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.4 – 容器包的详细信息和设置'
- en: '](img/B17827_08_04.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_08_04.jpg)'
- en: Figure 8.4 – Details and settings of the container package
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – 容器包的详细信息和设置
- en: GitHub will now create a new Docker image and add it to the registry if you
    create a new release.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您创建了新的发布，GitHub现在将创建一个新的Docker镜像并将其添加到注册表中。
- en: 'You can pull you container locally from the registry and run it:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以从注册表将容器拉取到本地并运行：
- en: '[PRE61]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Note that you have to authenticate using `docker login ghcr.io` before pulling
    the image if your package is not public.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您的包不是公开的，在拉取镜像之前，您必须使用`docker login ghcr.io`进行身份验证。
- en: The container registry is a great way to release software. From command-line
    tools to complete microservices, you can ship your software with all its dependencies
    for others to consume it.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 容器注册表是发布软件的好方法。从命令行工具到完整的微服务，您可以将软件及其所有依赖项一起发布，供其他人使用。
- en: Apache Maven, Gradle, NuGet, and RubyGems packages
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache Maven、Gradle、NuGet和RubyGems包
- en: 'The other package types are basically the same as npm and Docker: if you know
    the native package manager, they are really easy to use. I will only give a very
    brief introduction to each one.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 其他包类型与npm和Docker基本相同：如果您了解本地包管理器，它们非常容易使用。我将简要介绍每种类型。
- en: Java with Apache Maven
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Apache Maven的Java
- en: 'For `pom.xml` file:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`pom.xml`文件：
- en: '[PRE62]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'You can then publish your package in a workflow using `GITHUB_TOKEN`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用`GITHUB_TOKEN`在工作流中发布您的包：
- en: '[PRE69]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: To retrieve packages from your development machine, you have to authenticate
    using a `read:packages` scope. You can generate a new token in GitHub under `~/.m2/settings.xml`
    file.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要从您的开发机器获取包，您必须使用`read:packages`作用域进行身份验证。您可以在GitHub中的`~/.m2/settings.xml`文件下生成新的令牌。
- en: For more information, see [https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅 [https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry)。
- en: Gradle
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gradle
- en: 'In `build.gradle` file. You can read the username and access token from the
    environment variables:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在`build.gradle`文件中，你可以从环境变量中读取用户名和访问令牌：
- en: '[PRE73]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'In the workflow, you can publish using `gradle publish`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作流中，你可以使用`gradle publish`进行发布：
- en: '[PRE83]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: For more details, see [https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息，请参阅 [https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry)。
- en: RubyGems
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RubyGems
- en: 'If you want to build and publish all `.gemspec` files in your repository, you
    can use an action from the marketplace:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想构建并发布你仓库中的所有`.gemspec`文件，可以使用市场中的一个操作：
- en: '[PRE87]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'To work with packages, you need at least RubyGems 2.4.1 and bundler 1.6.4\.
    Modify the `~/.gemrc` file and add the registry as the source by providing your
    username and personal access token to install packages:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用包，你需要至少 RubyGems 2.4.1 和 bundler 1.6.4。修改`~/.gemrc`文件并通过提供你的用户名和个人访问令牌，将注册表作为源来安装包：
- en: '[PRE92]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'To install packages using **bundler**, you also must configure it with your
    user and token:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用**bundler**安装包，你还需要配置它与你的用户和令牌：
- en: '[PRE100]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: For more details, see [https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息，请参阅 [https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry)。
- en: NuGet
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NuGet
- en: 'To publish `setup-dotnet` action. It has additional parameters for `source-url`.
    The token is set using an environment variable:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 要发布`setup-dotnet`操作。它有额外的参数`source-url`。令牌通过环境变量设置：
- en: '[PRE103]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'You can then build and test your project. After that, just pack and push the
    package to the registry:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以构建并测试你的项目。之后，只需打包并将包推送到注册表：
- en: '[PRE109]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'To install packages, you have to add the registry as a source to the `nuget.config`
    file, including your user and token:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装包，你必须将注册表作为源添加到`nuget.config`文件中，包括你的用户和令牌：
- en: '[PRE112]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: For more information, see [https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅 [https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry)。
- en: Summary
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Working with packages is straightforward. The biggest challenge is authentication.
    But with `GITHUB_TOKEN` in GitHub Actions, it is easy to set up a completely automated
    release workflow. That's why it is important for your teams to have it in your
    toolbox. A lot of problems in releasing code can be reduced if you share code
    as containers or packages using semantic versioning and a separate release flow.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 使用包是直接的，最大的挑战是身份验证。但通过在 GitHub Actions 中使用`GITHUB_TOKEN`，你可以轻松设置一个完全自动化的发布工作流。这就是为什么它对你的团队来说是工具箱中不可或缺的一部分。如果你将代码作为容器或包共享，并使用语义版本控制和单独的发布流程，许多发布代码的问题可以减少。
- en: In this chapter, you have learned how you can use semantic versioning and packages
    to better manage your internal dependencies and to share code. You have learned
    what packages are and how you can set up release workflows for each package type.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，你已了解如何使用语义版本控制和包来更好地管理你的内部依赖项并共享代码。你已了解包是什么，以及如何为每种包类型设置发布工作流。
- en: In the next chapter, we'll have a closer look at environments and how you can
    deploy with GitHub actions to any platform.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将更详细地探讨环境以及如何使用 GitHub Actions 将应用部署到任何平台。
- en: Further reading
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information about the topics in this chapter, refer to the following:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 有关本章中主题的更多信息，请参考以下内容：
- en: '*Semantic versioning*: [https://semver.org/](https://semver.org/)'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*语义版本控制*: [https://semver.org/](https://semver.org/)'
- en: '*Billing and pricing*: [https://docs.github.com/en/billing/managing-billing-for-github-packages/about-billing-for-github-packages](https://docs.github.com/en/billing/managing-billing-for-github-packages/about-billing-for-github-packages)'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*计费与定价*: [https://docs.github.com/en/billing/managing-billing-for-github-packages/about-billing-for-github-packages](https://docs.github.com/en/billing/managing-billing-for-github-packages/about-billing-for-github-packages)'
- en: '*Access control and visibility*: [https://docs.github.com/en/packages/learn-github-packages/configuring-a-packages-access-control-and-visibility](https://docs.github.com/en/packages/learn-github-packages/configuring-a-packages-access-control-and-visibility)'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*访问控制与可见性*: [https://docs.github.com/en/packages/learn-github-packages/configuring-a-packages-access-control-and-visibility](https://docs.github.com/en/packages/learn-github-packages/configuring-a-packages-access-control-and-visibility)'
- en: '*Working with the registry* (Container, Apache Maven, Gradle. NuGet, npm, RubyGems):
    [https://docs.github.com/en/packages/working-with-a-github-packages-registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry)'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*与注册表合作*（容器，Apache Maven，Gradle，NuGet，npm，RubyGems）：[https://docs.github.com/en/packages/working-with-a-github-packages-registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry)'
