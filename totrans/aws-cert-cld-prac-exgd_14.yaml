- en: '[*Chapter 12*](B17124_12_Final_SK_ePub.xhtml#_idTextAnchor296): Automation
    and Deployment on AWS'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第 12 章*](B17124_12_Final_SK_ePub.xhtml#_idTextAnchor296)：AWS 上的自动化与部署'
- en: So far, you have learned how to configure and deploy various services on AWS.
    However, most of your configuration has been manual, with very little automation.
    For example, in [*Chapter 9*](B17124_09_Final_SK_ePub.xhtml#_idTextAnchor223),
    *High Availability and Elasticity on AWS*, you deployed an application in a multi-tier
    design. This consisted of application servers configured in an auto-scaling group,
    an application load balancer, a database to store application data, and an S3
    bucket to host your source code. All of this was deployed in a private network
    in the form of **Amazon VPC**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经学习了如何在 AWS 上配置和部署各种服务。然而，您的大部分配置都是手动完成的，自动化程度非常低。例如，在[*第 9 章*](B17124_09_Final_SK_ePub.xhtml#_idTextAnchor223)，*AWS
    上的高可用性与弹性*，您在多层架构中部署了一个应用程序。这包括配置在自动扩展组中的应用服务器、应用负载均衡器、用于存储应用数据的数据库，以及托管源代码的 S3
    存储桶。所有这些都部署在 **Amazon VPC** 的私有网络中。
- en: While building your application stack, you had to manually configure the various
    services on AWS with all the necessary resources to deploy your application. For
    example, with the VPC, you had to configure subnets, IP address ranges, security
    groups, NAT gateways, and much more. Now, imagine having to perform this sort
    of manual labor every time you need to create a new environment to host your applications.
    It would, without a doubt, be very time consuming.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建应用程序堆栈时，您需要手动配置 AWS 上的各种服务及所需的资源，以部署应用程序。例如，使用 VPC 时，您需要配置子网、IP 地址范围、安全组、NAT
    网关等许多内容。现在，想象一下，每次需要创建新环境来托管应用程序时，您都必须执行这些手动操作。这无疑会非常耗时。
- en: AWS offers various deployment and automation tools to help you architect, provision,
    and build infrastructure components to host your applications. Some of these tools
    fall within the PaaS model, where you simply need to focus on the application
    build and deployment strategy, and AWS will provision the necessary infrastructure
    to support that application. Other services enable you to define a template for
    your infrastructure that you may need to provision repeatedly. Using **Infrastructure
    as Code** (**IaC**), you can draft a template that describes how your services
    and resources need to be configured. AWS will then build the infrastructure, along
    with all its components, which can then be used to host your application. Automating
    your infrastructure deployments offers several benefits, including being able
    to scale your infrastructure globally by sharing your *templates* across your
    organization to enforce corporate standards and security best practices. Furthermore,
    by avoiding manual configuration efforts, you reduce the human error element.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 提供了各种部署和自动化工具，帮助您构建、配置和搭建基础设施组件来托管应用程序。部分工具属于 PaaS 模式，您只需要关注应用程序的构建和部署策略，AWS
    会自动提供支持该应用程序所需的基础设施。其他服务则使您能够定义基础设施模板，这些模板可以反复使用进行配置。通过使用 **基础设施即代码**（**IaC**），您可以起草一个模板，描述服务和资源如何配置。然后，AWS
    会构建该基础设施及其所有组件，供您托管应用程序。自动化基础设施部署带来了多个好处，其中包括通过在整个组织内共享您的 *模板* 来实现全球规模扩展，进而强制执行公司标准和安全最佳实践。此外，通过避免手动配置，您还可以减少人为错误的可能性。
- en: In this chapter, we will look at some of the core automation and deployment
    tools to help you get your solutions to market faster.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨一些核心的自动化和部署工具，帮助您更快地将解决方案推向市场。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding application deployment with Amazon Elastic Beanstalk
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解使用 Amazon Elastic Beanstalk 进行应用程序部署
- en: Understanding the benefits of IaC using Amazon CloudFormation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解使用 Amazon CloudFormation 的基础设施即代码（IaC）优势
- en: Introduction to the orchestration of Chef and Puppet solutions using AWS OpsWorks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍使用 AWS OpsWorks 协调 Chef 和 Puppet 解决方案
- en: IT automation with Lambda
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Lambda 进行 IT 自动化
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete the exercises in this chapter, you will need to log into your AWS
    account as the IAM user **Alice**, which you had set up in [*Chapter 4*](B17124_04_Final_SK_ePub.xhtml#_idTextAnchor068),
    *Identity and Access Management*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为完成本章的练习，您需要以 IAM 用户 **Alice** 的身份登录 AWS 账户，该用户已在[*第 4 章*](B17124_04_Final_SK_ePub.xhtml#_idTextAnchor068)，*身份与访问管理*中设置。
- en: Understanding application deployment with Amazon Elastic Beanstalk
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解使用 Amazon Elastic Beanstalk 进行应用程序部署
- en: '**Amazon Elastic Beanstalk** is a service that enables you to deploy your application
    without having to manually configure the underlying infrastructure that will support
    the application. Amazon Elastic Beanstalk does all the heavy lifting, which involves
    provisioning the necessary infrastructure to host and manage your application.
    This includes capacity provisioning, scaling, load balancing, and health monitoring.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**Amazon Elastic Beanstalk**是一项服务，它使你能够部署应用，而无需手动配置支撑应用的底层基础设施。Amazon Elastic
    Beanstalk负责所有繁重的工作，包括为托管和管理你的应用提供必要的基础设施。这包括容量配置、扩展、负载均衡和健康监控。'
- en: If your application is developed in one of the supported languages, which includes
    Go, Java, .NET, Node.js, PHP, Python, and a few others, Amazon Elastic Beanstalk
    will build out the platform using one or more AWS resources, such as EC2 instances,
    to run your application. All you need to do is follow a prescribed process to
    deploy your application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用是用支持的语言之一开发的，包括Go、Java、.NET、Node.js、PHP、Python等，Amazon Elastic Beanstalk将使用一个或多个AWS资源（如EC2实例）来构建平台，以运行你的应用。你只需要遵循规定的过程来部署你的应用。
- en: Another option to consider is to use Elastic Beanstalk to deploy Docker containers.
    This gives you a lot more flexibility because, with Docker containers, you can
    configure your runtime environments and choose a programming language, supported
    platform, and any dependencies as required. Thus, you are not restricted to any
    limitations that are usually associated with the other platforms.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可以考虑的选项是使用Elastic Beanstalk来部署Docker容器。这个方式给你更多的灵活性，因为使用Docker容器，你可以配置你的运行时环境，选择所需的编程语言、支持的平台以及任何依赖项。因此，你不受通常与其他平台相关的限制。
- en: Amazon Elastic Beanstalk does not restrict you to one specific underlying infrastructure
    design either. You can modify how the underlying infrastructure components will
    be deployed – for example, you can specify the EC2 instance type and size that
    is deployed or enforce that a set minimum number of EC2 instances are deployed
    as part of an auto-scaling group. Ultimately, you retain control of how the infrastructure
    is configured but without the complex manual configuration, which Amazon Elastic
    Beanstalk takes care of. Once your application has been deployed, you can manage
    your environment and deploy application updates or versions later.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊Elastic Beanstalk并不限制你使用特定的底层基础设施设计。你可以修改底层基础设施组件的部署方式——例如，你可以指定部署的EC2实例类型和大小，或者强制要求在自动扩展组中部署一定数量的EC2实例。最终，你仍然掌控基础设施的配置方式，但无需进行复杂的手动配置，这些都由Amazon
    Elastic Beanstalk来处理。一旦你的应用部署完成，你可以管理环境并在稍后部署应用更新或版本。
- en: Now, let's take a look at the core components of the Amazon Elastic Beanstalk
    service.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下Amazon Elastic Beanstalk服务的核心组件。
- en: Core components of Amazon Elastic Beanstalk
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Amazon Elastic Beanstalk的核心组件
- en: The infrastructure components that AWS Elastic Beanstalk creates to host your
    application are called an *environment*. Each environment can only run a single
    application version, but you can create many environments for different application
    versions simultaneously. You can modify your environment if you need to and deploy
    upgrades to your application when you release new updates.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Elastic Beanstalk为托管你的应用创建的基础设施组件被称为*环境*。每个环境只能运行一个应用版本，但你可以同时为不同的应用版本创建多个环境。如果需要，你可以修改环境并在发布新更新时部署应用升级。
- en: 'As part of launching an Elastic Beanstalk environment, you need to select the
    *environment tier*. The environment tier you choose is determined by the type
    of application you are deploying and ultimately determines the resources Elastic
    Beanstalk will configure to support your application. We have two environment
    tiers that can be configured with Elastic Beanstalk: **web server environment
    tier** and **worker environment tier**.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动Elastic Beanstalk环境时，你需要选择*环境层*。你选择的环境层由你部署的应用类型决定，并最终决定Elastic Beanstalk将配置哪些资源来支持你的应用。Elastic
    Beanstalk可以配置两种环境层：**Web服务器环境层**和**工作者环境层**。
- en: Web server environment tier
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Web服务器环境层
- en: This environment is designed for the frontend tier of your application stack,
    such as the frontend **user interface** (**UI**) of your e-commerce application.
    AWS Elastic Beanstalk will provision an environment that is designed to accept
    inbound traffic to your web application via an elastic load balancer, offer scalability
    in the form of auto-scaling group configurations, and one or more EC2 instances.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 该环境是为您的应用堆栈的前端层设计的，例如您的电子商务应用的前端 **用户界面**（**UI**）。AWS Elastic Beanstalk 将提供一个旨在通过弹性负载均衡器接受您的
    Web 应用程序的入站流量、提供自动扩展组配置形式的可扩展性并包含一个或多个 EC2 实例的环境。
- en: 'The following diagram illustrates the typical architecture that''s deployed:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了典型的架构部署：
- en: '![Figure 12.1 – AWS Elastic Beanstalk – web server environment tier'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.1 – AWS Elastic Beanstalk – Web 服务器环境层'
- en: '](img/B17124_12_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_12_01.jpg)'
- en: Figure 12.1 – AWS Elastic Beanstalk – web server environment tier
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.1 – AWS Elastic Beanstalk – Web 服务器环境层
- en: As part of the *web server environment tier*, AWS Elastic Beanstalk will deploy
    EC2 instances across multiple AZs. Your application is then deployed onto those
    instances. Furthermore, Amazon Auto Scaling will be configured as part of the
    environment to scale out as demand for your application increases or scale back
    in when demand drops. You will have full control over the scaling policies that
    are used and their parameters. AWS Elastic Beanstalk will also deploy a software
    stack, depending on the *container type*, which is the infrastructure topology
    and software stack to be used for that environment. For example, if you were deploying
    a .NET application on Windows, the environment that would be configured by Elastic
    Beanstalk would be comprised of the Microsoft Windows operating system, Windows
    EC2 instances, and a version of **Internet Information Services+** (**IIS**).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 *Web 服务器环境层* 的一部分，AWS Elastic Beanstalk 会在多个 AZ（可用区）中部署 EC2 实例。然后，您的应用程序会部署到这些实例上。此外，Amazon
    Auto Scaling 会作为环境的一部分配置，以便在应用需求增加时扩展，或在需求下降时缩减。您将完全控制用于扩展的策略及其参数。AWS Elastic
    Beanstalk 还将部署一个软件堆栈，具体取决于 *容器类型*，即用于该环境的基础设施拓扑和软件堆栈。例如，如果您在 Windows 上部署 .NET
    应用程序，则 Elastic Beanstalk 配置的环境将包括 Microsoft Windows 操作系统、Windows EC2 实例和 **Internet
    Information Services+**（**IIS**）的一个版本。
- en: AWS Elastic Beanstalk also configures an environment URL that points to the
    load balancer in the format of `app-name.region.elasticbeanstalk.com`. This URL
    is aliased with the elastic load balancer's URL. You can also alias this URL with
    a CNAME record of your choice, such as your company domain name, using Amazon
    Route 53\. This will allow you to use more friendly names such as `myapp.mycompany.com`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Elastic Beanstalk 还会配置一个指向负载均衡器的环境 URL，格式为 `app-name.region.elasticbeanstalk.com`。该
    URL 被别名为弹性负载均衡器的 URL。您还可以使用 Amazon Route 53 将此 URL 与您选择的 CNAME 记录进行别名，例如您的公司域名。这样，您就可以使用更友好的名称，如
    `myapp.mycompany.com`。
- en: 'In addition, each EC2 instance will be configured with a software component
    called the **host manager** (**HM**). The HM is responsible for the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，每个 EC2 实例将配置一个名为 **主机管理器**（**HM**）的软件组件。HM 负责以下任务：
- en: Deploying the application
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署应用程序
- en: Aggregating events and metrics for the servers
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合服务器的事件和指标
- en: Generating instance-level events
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成实例级事件
- en: Monitoring the application log files for critical errors
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控应用程序日志文件中的关键错误
- en: Monitoring the application server
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控应用程序服务器
- en: Patching your EC2 instances
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 EC2 实例打补丁
- en: Rotating your application's log files and publishing them to Amazon S3
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轮换应用程序的日志文件并将其发布到 Amazon S3
- en: Next, we'll look at the worker environment tier.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看工作者环境层。
- en: Worker environment tier
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作者环境层
- en: This environment is intended for backend operations. In a multiple-tier application
    architecture, this would represent the middleware, application, and backend database
    layers of your application stack. AWS Elastic Beanstalk provisions an environment
    that's appropriate for such backend operations and consists of an Auto Scaling
    group, one or more Amazon EC2 instances, and an IAM role. In addition, AWS Elastic
    Beanstalk will also provision an Amazon SQS queue if you have not configured your
    own yet.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 该环境用于后台操作。在多层应用架构中，这代表了应用程序堆栈中的中间件、应用程序和后端数据库层。AWS Elastic Beanstalk 提供了一个适合此类后台操作的环境，包括一个自动扩展组、一个或多个
    Amazon EC2 实例和一个 IAM 角色。此外，如果您尚未配置自己的队列，AWS Elastic Beanstalk 还会为您配置一个 Amazon
    SQS 队列。
- en: 'AWS Elastic Beanstalk will also install a *daemon* on each EC2 instance in
    the fleet. This daemon will read messages from the Amazon SQS queue and send this
    data to the application servers running in the worker environment tier for processing.
    This process is illustrated in the following diagram:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Elastic Beanstalk还将在每个EC2实例上安装一个*守护进程*。该守护进程将从Amazon SQS队列中读取消息，并将这些数据发送到在工作环境层中运行的应用程序服务器进行处理。这个过程如下图所示：
- en: '![Figure 12.2 – AWS Elastic Beanstalk – worker environment tier'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.2 – AWS Elastic Beanstalk – 工作环境层'
- en: '](img/B17124_12_02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_12_02.jpg)'
- en: Figure 12.2 – AWS Elastic Beanstalk – worker environment tier
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – AWS Elastic Beanstalk – 工作环境层
- en: AWS Elastic Beanstalk will also monitor the health of your EC2 instances using
    a service called **Amazon CloudWatch**. We will look at Amazon CloudWatch in [*Chapter
    13*](B17124_13_Final_SK_ePub.xhtml#_idTextAnchor317), *Management and Governance
    on AWS*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Elastic Beanstalk还将使用名为**Amazon CloudWatch**的服务监控你的EC2实例的健康状况。我们将在[*第13章*](B17124_13_Final_SK_ePub.xhtml#_idTextAnchor317)中查看Amazon
    CloudWatch，*AWS上的管理与治理*。
- en: Apart from this, AWS Elastic Beanstalk can help you deploy and manage your application
    stack using various deployment types, including *all at once*, *rolling*, *rolling
    with additional batch*, *immutable*, and *traffic splitting*. These deployment
    types enable you to design your application deployments and any ongoing updates
    that suit your specific business requirements.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，AWS Elastic Beanstalk还可以帮助你使用各种部署类型来部署和管理应用程序堆栈，包括*一次性全部部署*、*滚动部署*、*带附加批次的滚动部署*、*不可变部署*和*流量分割*。这些部署类型使你能够设计符合特定业务需求的应用程序部署和任何持续更新。
- en: In this section, we learned about the AWS Elastic Beanstalk service, which is
    an application deployment and management service on AWS. AWS Elastic Beanstalk
    allows developers to focus on their application code rather than having to minutely
    configure infrastructure components to support the application. AWS Elastic Beanstalk
    will provision a highly available and scalable infrastructure architecture and
    gives you control over how those infrastructure components are configured to support
    your specific requirements.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了AWS Elastic Beanstalk服务，它是AWS上的一个应用程序部署和管理服务。AWS Elastic Beanstalk允许开发人员专注于应用程序代码，而无需对基础设施组件进行详细配置以支持应用程序。AWS
    Elastic Beanstalk将提供一个高可用且可扩展的基础设施架构，并让你控制如何配置这些基础设施组件，以支持你的特定需求。
- en: In the next section, we will look at the Amazon CloudFormation service, which
    enables you to architect your underlying infrastructure resources using templates
    written in JSON or YAML code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将研究Amazon CloudFormation服务，它使你能够使用JSON或YAML代码编写的模板来架构你的底层基础设施资源。
- en: Understanding the benefits of IaC using Amazon CloudFormation
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解使用Amazon CloudFormation的IaC的好处
- en: The approach of using code to describe and deploy your infrastructure components
    automatically is known as IaC. IaC is a fundamental component that enables you
    to automate infrastructure builds in the cloud.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用代码描述并自动部署基础设施组件的方法被称为IaC（基础设施即代码）。IaC是一个基本组件，使你能够在云中自动化基础设施构建。
- en: Building your infrastructure using code greatly improves deployment processes
    because the code is executed by machines. This also means that any infrastructure
    that's deployed using code is less prone to human errors, which is inherent in
    manual deployments. Furthermore, you can create templates for repeat deployments
    and enable versioning for those templates. Often, you want to mimic the testing
    and production environments with each other so that you are assured that once
    your application has passed the testing phase, it can be easily deployed to production.
    Using templates that describe your infrastructure is the best way to avoid any
    discrepancies between those environments.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用代码构建基础设施可以大大改善部署过程，因为代码是由机器执行的。这也意味着，任何通过代码部署的基础设施都不容易受到人为错误的影响，这些错误是手动部署所固有的。此外，你还可以为重复部署创建模板，并为这些模板启用版本控制。通常，你希望使测试环境和生产环境相互模拟，以确保一旦应用程序通过测试阶段，它可以轻松部署到生产环境。使用描述你基础设施的模板是避免这些环境之间差异的最佳方法。
- en: '**Amazon CloudFormation** is a solution that can help you design, build, and
    deploy your infrastructure using code. It helps you define the resources to be
    created and configured and how those resources interact with each other.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**Amazon CloudFormation**是一个解决方案，可以帮助你使用代码设计、构建和部署基础设施。它帮助你定义要创建和配置的资源，以及这些资源如何相互作用。'
- en: CloudFormation templates
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CloudFormation模板
- en: Amazon CloudFormation uses *templates*, which are text files that are written
    in either JSON or YAML format. The code describes the resources that you wish
    to deploy, along with configuration information related to those resources. For
    example, if you need to deploy a **security group** as part of your VPC template,
    you can specify its name and the inbound and outbound rules that are permitted.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊 CloudFormation 使用*模板*，这些是以 JSON 或 YAML 格式编写的文本文件。代码描述了你希望部署的资源以及与这些资源相关的配置信息。例如，如果你需要将**安全组**作为
    VPC 模板的一部分进行部署，你可以指定它的名称以及允许的入站和出站规则。
- en: The best part about CloudFormation templates is that they contain descriptions
    of the resources that you want CloudFormation to deploy. This can double up as
    a technical document of your entire infrastructure. In addition, templates can
    be used repeatably to deploy infrastructure for different environments. This ensures
    that you have the same architecture for both your development and testing environments.
    While the configuration in each environment will be the same, they will be separate
    environments with different resource identifiers.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation 模板的最佳之处在于，它们包含你希望 CloudFormation 部署的资源描述。这也可以作为你整个基础设施的技术文档。此外，模板可以重复使用，用于为不同环境部署基础设施。这确保了你在开发和测试环境中拥有相同的架构。虽然每个环境中的配置相同，但它们会是不同的环境，具有不同的资源标识符。
- en: AWS CloudFormation templates can also be used to accept input parameter values.
    This can further help expedite the process of building different environments
    for experimentation and testing. For example, if you were testing a new application
    and you wanted to compare performance levels based on the underlying EC2 instance
    type and size that the application was hosted on, you could deploy multiple test
    environments with different EC2 instance types and sizes. The input parameters,
    at the time of deploying the template, will prompt you to specify which instance
    type and size to use for a given environment. This also makes it easier to use
    the same template for different situations.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CloudFormation 模板也可以用于接受输入参数值。这有助于加速构建不同环境以进行实验和测试的过程。例如，如果你正在测试一个新应用程序，并且想要根据托管该应用程序的
    EC2 实例类型和大小来比较性能水平，你可以部署多个具有不同 EC2 实例类型和大小的测试环境。在部署模板时，输入参数会提示你指定每个环境使用的实例类型和大小。这也使得在不同情况下使用相同模板变得更加容易。
- en: CloudFormation templates are used to deploy CloudFormation stacks, which are
    a container that organizes the resources described in the template. We'll look
    at CloudFormation stacks next.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation 模板用于部署 CloudFormation 堆栈，堆栈是一个容器，用来组织模板中描述的资源。接下来我们将讨论 CloudFormation
    堆栈。
- en: CloudFormation stacks
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CloudFormation 堆栈
- en: With CloudFormation, you can create *stacks*, which are a container to collectively
    manage all related resources as a single unit. So, for example, a stack could
    consist of the VPC, an Auto Scaling group, an elastic load balancer, and an Amazon
    RDS database instance. You can have multiple stacks that deploy a collection of
    resources that may also need to communicate with each other.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CloudFormation，你可以创建*堆栈*，这是一个容器，用于将所有相关资源作为一个单元进行集中管理。例如，一个堆栈可能包含 VPC、自动伸缩组、弹性负载均衡器和
    Amazon RDS 数据库实例。你可以拥有多个堆栈，部署一组可能需要相互通信的资源。
- en: You can also delete a stack when you no longer need the resources contained
    within it. AWS will then delete every resource that was deployed when the stack
    was created using your template. This ensures that you do not have any resources
    lingering, which often happens when you are manually trying to delete resources
    from an environment. This also ensures that you can quickly get rid of test or
    development environments when they're no longer needed.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当你不再需要堆栈中的资源时，你也可以删除堆栈。然后，AWS 会删除堆栈创建时通过模板部署的所有资源。这确保你不会留下任何资源，这通常发生在你手动删除环境中的资源时。这样做还确保你在不再需要测试或开发环境时，能够快速清理掉这些环境。
- en: Sometimes, you may need to modify your stack – for example, if you need to upgrade
    the EC2 instance type or change the database endpoint. We will look at how to
    implement changes to your stack next.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能需要修改你的堆栈——例如，如果你需要升级 EC2 实例类型或更改数据库端点。接下来我们将讨论如何实现堆栈的修改。
- en: Change sets
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变更集
- en: If you need to make changes to the resources that are deployed in your stack,
    you can create a **change set**. AWS CloudFormation creates this change set based
    on a summary of changes you make to the template and gives you the details of
    the proposed changes. You can then decide whether to roll out those changes or
    make further modifications first.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要对已部署的堆栈资源进行更改，可以创建一个 **变更集**。AWS CloudFormation 根据你对模板所做更改的摘要创建此变更集，并向你提供提议更改的详细信息。然后，你可以决定是否发布这些更改，或先进行进一步修改。
- en: Change sets are particularly useful at highlighting changes that may have catastrophic
    results, ensuring that you can perform all precautionary tasks first. For example,
    if you were to simply change the name of your Amazon RDS database in a template,
    AWS CloudFormation would create a new database and delete the old one. If you
    did not make a backup of the RDS database before performing this action, you would
    end up losing your data. Change sets can help you identify where such irreversible
    changes will occur, and you can make sure that you first perform a manual snapshot
    of your RDS database before rolling out the change.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 变更集特别有助于突出可能产生灾难性结果的更改，确保你可以先执行所有预防性任务。例如，如果你仅仅在模板中更改了 Amazon RDS 数据库的名称，AWS
    CloudFormation 会创建一个新数据库并删除旧数据库。如果在执行此操作之前没有备份 RDS 数据库，你将丢失数据。变更集可以帮助你识别此类不可逆更改发生的地方，并确保你在发布更改之前先手动为
    RDS 数据库创建快照。
- en: Drift detection
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 漂移检测
- en: The recommended approach, when making any changes to your CloudFormation stack,
    is to use change sets. However, it is possible to make changes to the stack resources
    outside of CloudFormation. Sometimes, these may be accidental but at other times,
    you may wish to make these changes urgently, although any change should follow
    a proper change management process.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在对 CloudFormation 堆栈进行任何更改时，推荐的方法是使用变更集。然而，也有可能在 CloudFormation 外部对堆栈资源进行更改。有时，这些更改可能是偶然发生的，但有时你可能会急于进行这些更改，尽管任何更改都应该遵循适当的变更管理流程。
- en: Another issue is that if changes are made outside of CloudFormation, then any
    stack update or deletion requests may fail. AWS offers a feature of the CloudFormation
    service known as *drift detection*. You can use drift detection to identify stack
    resources that configuration changes have been made to outside of CloudFormation
    management.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是，如果在 CloudFormation 外部进行了更改，那么任何堆栈更新或删除请求可能会失败。AWS 提供了一项名为 *漂移检测* 的 CloudFormation
    服务功能。你可以使用漂移检测来识别在 CloudFormation 管理之外已进行配置更改的堆栈资源。
- en: In this section, you learned about the AWS CloudFormation service, which uses
    an IaC approach to build and deploy infrastructure resources that can be used
    to support your application. CloudFormation enables you to design templates using
    JSON- and YAML-formatted text files that describe your resources and how they
    can be configured.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你了解了 AWS CloudFormation 服务，它采用 IaC 方法构建和部署可以支持你应用程序的基础设施资源。CloudFormation
    使你能够使用 JSON 和 YAML 格式的文本文件设计模板，这些文件描述了你的资源以及它们的配置方式。
- en: Then, CloudFormation does the heavy lifting of provisioning those resources
    just the way you want them. CloudFormation templates are used to build CloudFormation
    stacks, which collectively manage all the related resources as a single unit.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，CloudFormation 会按照你想要的方式进行资源的配置工作。CloudFormation 模板用于构建 CloudFormation 堆栈，堆栈将所有相关资源作为一个单元进行管理。
- en: In the next section, we will look at another AWS service that can help you orchestrate
    and deploy applications that have been designed for the Chef and Puppet automation
    tools.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将介绍另一项 AWS 服务，它可以帮助你编排和部署为 Chef 和 Puppet 自动化工具设计的应用程序。
- en: Introduction to the orchestration of Chef and Puppet solutions using AWS OpsWorks
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AWS OpsWorks 编排 Chef 和 Puppet 解决方案简介
- en: In this section, we will provide a quick introduction to another configuration
    management and orchestration service known as **AWS OpsWorks**. AWS offers three
    different services that fall under the AWS OpsWorks offering. There are AWS OpsWorks
    stacks and AWS OpsWorks for Chef Automate, which let you use Chef cookbooks for
    configuration management. The third service is OpsWorks for Puppet Enterprise,
    which lets you configure a Puppet Enterprise master server in AWS.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将简要介绍另一种配置管理和编排服务，称为 **AWS OpsWorks**。AWS 提供了三种不同的服务，这些服务属于 AWS OpsWorks
    产品系列。包括 AWS OpsWorks 堆栈和 AWS OpsWorks for Chef Automate，它们允许你使用 Chef cookbook
    进行配置管理。第三个服务是 OpsWorks for Puppet Enterprise，允许你在 AWS 中配置 Puppet Enterprise 主服务器。
- en: '**OpsWorks for Puppet Enterprise** provides a *fully managed Puppet master
    server* that is used to communicate with, configure, deploy, and manage your nodes
    – which could be EC2 instances or even on-premises servers. The service also takes
    care of handling tasks such as software and operating system configurations, package
    installations, database setups, and more.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**OpsWorks for Puppet Enterprise** 提供一个 *完全托管的 Puppet 主服务器*，用于与节点进行通信、配置、部署和管理节点——这些节点可以是
    EC2 实例，甚至是本地服务器。该服务还负责处理诸如软件和操作系统配置、软件包安装、数据库设置等任务。'
- en: '**AWS OpsWorks for Chef Automate** lets you create *AWS-managed Chef servers*,
    including Chef Automate software solutions. AWS OpsWorks creates a Chef server
    that is used to manage all your nodes and acts as a central repository for your
    Chef cookbooks. Chef cookbooks contain recipes that are authored using the Ruby
    programming language and enable you to define a collection of resources and their
    attributes that need to be configured.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS OpsWorks for Chef Automate** 让你创建 *AWS 管理的 Chef 服务器*，包括 Chef Automate
    软件解决方案。AWS OpsWorks 创建一个 Chef 服务器，用于管理所有节点，并作为 Chef cookbook 的中央存储库。Chef cookbook
    包含使用 Ruby 编程语言编写的配方，使你能够定义需要配置的资源及其属性集合。'
- en: AWS OpsWorks for Puppet Enterprise and OpsWorks for Chef Automate require that
    you know how to operate the Chef and Puppet software. If you prefer a more IaC
    approach to deploying your application and are not familiar with Chef or Puppet,
    you can also use AWS OpsWorks stacks. Next, we will look at the AWS OpsWorks stacks
    service.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: AWS OpsWorks for Puppet Enterprise 和 OpsWorks for Chef Automate 要求你了解如何操作 Chef
    和 Puppet 软件。如果你更喜欢通过基础设施即代码（IaC）方法部署应用程序，且不熟悉 Chef 或 Puppet，你也可以使用 AWS OpsWorks
    堆栈。接下来，我们将看看 AWS OpsWorks 堆栈服务。
- en: AWS OpsWorks stacks
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS OpsWorks 堆栈
- en: By now, you are aware that deploying a single application can be comprised of
    several resources running behind the scenes, including the host EC2 instances
    that the application runs on, backend databases such as Amazon RDS to store the
    application data, load balancers to distribute traffic, and so on. This group
    of related resources is what we call a stack.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经知道，部署单个应用程序可能涉及多个在后台运行的资源，包括运行应用程序的主机 EC2 实例、用于存储应用程序数据的后端数据库，如 Amazon
    RDS、用于分配流量的负载均衡器等。这些相关的资源被称为堆栈。
- en: A stack is a container for your AWS resources such as your EC2 instances, RDS
    databases, and all the related components, which are logically managed together.
    Each stack will contain at least one layer but can have more.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一个堆栈是你 AWS 资源的容器，例如你的 EC2 实例、RDS 数据库及所有相关组件，这些资源在逻辑上一起管理。每个堆栈至少包含一层，但可以有更多层。
- en: 'Let''s consider a typical example that consists of the following three layers
    to support an application:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个典型的例子，包含以下三个层次来支持应用程序：
- en: A backend database layer, which can either be a self-hosted database solution
    or a managed service such as Amazon RDS
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个后端数据库层，可以是自托管的数据库解决方案，也可以是如 Amazon RDS 这样的托管服务
- en: An application layer, which is comprised of EC2 instances or containers
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个应用程序层，由 EC2 实例或容器组成
- en: A load balancing layer, which hosts your application load balancer to distribute
    traffic to your application layer
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个负载均衡层，承载你的应用程序负载均衡器，将流量分配到应用层
- en: 'The following diagram illustrates this configuration:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了此配置：
- en: '![Figure 12.3 – AWS OpsWorks stacks'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.3 – AWS OpsWorks 堆栈](img/B17124_12_03.jpg)'
- en: '](img/B17124_12_03.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_12_03.jpg)'
- en: Figure 12.3 – AWS OpsWorks stacks
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.3 – AWS OpsWorks 堆栈
- en: Amazon OpsWorks stacks will not only help you build out your stack but also
    monitor the stack's performance and health, security permissions, and more. With
    AWS OpsWorks stacks, you do not need to create or manage Chef servers as OpsWorks
    stacks performs some of the work for you.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon OpsWorks堆栈不仅有助于构建您的堆栈，还可以监控堆栈的性能和健康状态、安全权限等。使用AWS OpsWorks堆栈，您无需创建或管理Chef服务器，因为OpsWorks堆栈会为您执行部分工作。
- en: There are two types of layers that AWS OpsWorks stacks uses, both of which we
    will discuss next.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: AWS OpsWorks堆栈使用两种类型的层，我们将在接下来讨论这两种层。
- en: AWS OpsWorks layers
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AWS OpsWorks层
- en: An OpsWorks layer represents a particular service or task as part of your overall
    application stack. For example, your EC2 instances could represent the application
    layer, which is used to host the application. Next, your application load balancer
    will represent the load balancing layer, distributing traffic across the EC2 instances.
    Each layer is comprised of a template that allows you to specify the components
    of the resources that are being provisioned. For example, for the application
    layer, this would include your EC2 instance's security group or IP addressing
    details. You can provision any supported operating system and even add on-premises
    servers to the stack.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: OpsWorks层代表您的整体应用程序堆栈中的特定服务或任务。例如，您的EC2实例可以代表应用程序层，用于托管应用程序。接下来，您的应用程序负载均衡器将代表负载均衡层，将流量分布到EC2实例之间。每个层都由一个模板组成，允许您指定正在部署的资源的组件。例如，对于应用程序层，这将包括您的EC2实例的安全组或IP地址详细信息。您可以部署任何支持的操作系统，甚至可以将本地服务器添加到堆栈中。
- en: AWS OpsWorks stacks does not provision a Chef server or a Puppet Enterprise
    Master server; instead, all the management tasks are performed by AWS OpsWorks
    via the embedded Chef solo client that is installed on Amazon EC2 instances.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: AWS OpsWorks堆栈不会为您提供Chef服务器或Puppet Enterprise主服务器；相反，所有管理任务都由AWS OpsWorks通过安装在Amazon
    EC2实例上的嵌入式Chef Solo客户端执行。
- en: Service layers
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务层
- en: 'AWS OpsWorks can also extend your stack to include service layers, which can
    be used to build a complete multi-tier application solution. These service layers
    can include the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: AWS OpsWorks 还可以扩展您的堆栈，包括服务层，可用于构建完整的多层应用程序解决方案。这些服务层可以包括以下内容：
- en: '**Amazon Relational Database Service** (**RDS**): This layer will enable you
    to integrate your application with an existing RDS database deployment.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚马逊关系型数据库服务** (**RDS**): 此层将使您能够将您的应用程序集成到现有的RDS数据库部署中。'
- en: '**Elastic Load Balancing**: This layer will enable you to distribute traffic
    to your fleet of EC2 instances across multiple Availability Zones while offering
    high-availability features.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性负载均衡**：此层将使您能够在多个可用区内分发流量到您的EC2实例群中，同时提供高可用性功能。'
- en: '**Amazon Elastic Container Service** (**ECS**) **cluster**: This layer will
    enable you to create an ECS cluster layer, allowing you to connect your OpsWorks
    stacks to an ECS cluster running your Docker-based applications.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚马逊弹性容器服务** (**ECS**) **集群**：此层将使您能够创建一个ECS集群层，允许您将OpsWorks堆栈连接到运行基于Docker的应用程序的ECS集群。'
- en: In this section, we looked at the AWS OpsWorks suite of services, which enables
    you to orchestrate application deployment solutions using Chef and Puppet. You
    also learned about the OpsWorks stacks service, which allows you to create and
    manage stacks and applications.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了AWS OpsWorks套件的服务，它允许您使用Chef和Puppet编排应用程序部署解决方案。您还了解了OpsWorks堆栈服务，它允许您创建和管理堆栈和应用程序。
- en: In the next section, we will look at the AWS Lambda service and how you can
    use it to automate administrative tasks on AWS.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将看看AWS Lambda服务以及如何在AWS上使用它来自动化管理任务。
- en: IT automation with Lambda
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Lambda进行IT自动化
- en: In [*Chapter 7*](B17124_07_Final_SK_ePub.xhtml#_idTextAnchor157), *AWS Compute
    Services*, we learned that **AWS Lambda** is a serverless compute service that
    allows you to run code without having to provision or manage servers in the cloud.
    With AWS Lambda, you simply upload your code and have it executed based on a specific
    trigger. AWS Lambda will provision all the underlying infrastructure needed to
    run your code, be it compute power, memory, or temporary storage.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第7章*](B17124_07_Final_SK_ePub.xhtml#_idTextAnchor157)，*AWS计算服务*，我们了解到**AWS
    Lambda**是一种无服务器计算服务，允许您在云中运行代码而无需预配或管理服务器。使用AWS Lambda，您只需上传代码并根据特定触发器执行它。AWS
    Lambda将提供运行代码所需的所有基础设施，无论是计算能力、内存还是临时存储。
- en: Your code can be automatically triggered from various AWS services and SaaS
    applications or even be called directly from any web or mobile application. You
    could use AWS Lambda in conjunction with other serverless offerings such as API
    Gateway, DynamoDB, and the Amazon S3 static website hosting service to build the
    ultimate serverless application for your business or clients.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码可以从各种 AWS 服务和 SaaS 应用程序中自动触发，甚至可以直接从任何 Web 或移动应用程序中调用。你可以将 AWS Lambda 与其他无服务器产品（如
    API Gateway、DynamoDB 和 Amazon S3 静态网站托管服务）结合使用，为你的业务或客户构建终极的无服务器应用程序。
- en: In addition to this, Lambda can also be used to help automate a vast array of
    day-to-day administrative tasks. This can include any repetitive tasks that are
    triggered by a specific event or even on a specific schedule. For example, you
    can automate how firmware updates are installed on hardware devices, start and
    stop EC2 instances, schedule security group updates if you need to make changes,
    and much more.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，Lambda 还可以用来帮助自动化各种日常管理任务。这些任务可以是由特定事件触发的任何重复性任务，甚至可以是根据特定的时间表进行触发。例如，你可以自动化固件更新的安装，启动和停止
    EC2 实例，安排安全组更新（如果你需要进行更改），等等。
- en: In the upcoming exercise in this chapter, we will look at one such use case
    for using AWS Lambda to help you perform the typical administrative task of stopping
    and restarting EC2 instances at regular intervals.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章即将进行的练习中，我们将研究使用 AWS Lambda 的一个实际用例，帮助你完成定期停止和重新启动 EC2 实例的常见管理任务。
- en: Exercise 12.1 – stopping and starting EC2 instances at regular intervals using
    AWS Lambda
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习 12.1 —— 使用 AWS Lambda 定期停止和启动 EC2 实例
- en: Imagine a scenario where you need to run a fleet of on-demand EC2 test servers
    that your **user acceptance testing** (**UAT**) team needs to perform multiple
    functional and technical tests on for an upcoming application that you are developing.
    Your UAT team only works from Monday to Friday, 9 A.M. to 5 P.M. The UAT team
    only needs access to the fleet of test servers during this time. Rather than have
    a technician manually start up all the servers in the morning and shut them down
    again at the end of the business day, you could automate the process using AWS
    Lambda. You would not want to have your on-demand EC2 instances running when they
    are not needed because you are charged for every hour that those servers are running.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一种场景，你需要运行一组按需的 EC2 测试服务器，供你的**用户验收测试**（**UAT**）团队对即将开发的应用程序进行多个功能和技术测试。你的
    UAT 团队仅在周一至周五的早上 9 点到下午 5 点之间工作。UAT 团队只需要在这段时间内访问测试服务器集群。与其让技术人员每天早上手动启动所有服务器，晚上再关闭它们，你可以使用
    AWS Lambda 自动化这一过程。你不希望在不需要的情况下让按需 EC2 实例运行，因为每个小时都会产生费用。
- en: In this exercise, we will look at how to configure AWS Lambda to automatically
    stop and then start your EC2 instances at defined schedules.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，我们将学习如何配置 AWS Lambda，以便在定义的时间表下自动停止和启动你的 EC2 实例。
- en: 'To complete the exercises in this chapter, you will need to download the sample
    IAM policy from this book''s Packt GitHub repository at: [https://github.com/PacktPublishing/AWS-Certified-Cloud-Practitioner-Exam-Guide](https://github.com/PacktPublishing/AWS-Certified-Cloud-Practitioner-Exam-Guide)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章的练习，你需要从本书的 Packt GitHub 仓库下载示例 IAM 策略，下载地址：[https://github.com/PacktPublishing/AWS-Certified-Cloud-Practitioner-Exam-Guide](https://github.com/PacktPublishing/AWS-Certified-Cloud-Practitioner-Exam-Guide)
- en: Step 1 - Launching an EC2 instance
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 1 - 启动 EC2 实例
- en: 'To complete this excercise, you will need to deploy an EC2 Instance running
    the Linux 2 AMI:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此练习，你需要部署一个运行 Linux 2 AMI 的 EC2 实例：
- en: Log into the AWS Management Console as the IAM user called **Alice**.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为 IAM 用户**Alice**，登录到 AWS 管理控制台。
- en: Navigate to the EC2 dashboard. Ensure that you are in the **us-east-1 (N. Virginia)**
    Region.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 EC2 控制台，确保你在**us-east-1（北弗吉尼亚）**区域。
- en: Click on **Instances** from the left-hand menu and then click on the **Launch
    instances** button.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧菜单中点击**实例**，然后点击**启动实例**按钮。
- en: 'For **Step 1: Choose an Amazon Machine Image (AMI)**, select the **Amazon Linux
    2** AMI.'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**步骤 1：选择 Amazon 机器镜像 (AMI)**，选择**Amazon Linux 2** AMI。
- en: 'For **Step 2: Choose an Instance Type**, select the **t2.micro** instance type
    and click the **Next: Configure Instance Details** button.'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**步骤 2：选择实例类型**，选择**t2.micro**实例类型，然后点击**下一步：配置实例详情**按钮。
- en: 'For **Step 3: Configure Instance Details**, provide the following key details:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**步骤 3：配置实例详情**，提供以下关键信息：
- en: For **Network**, select the default VPC.
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于**网络**，选择默认 VPC。
- en: For **Subnet**, select the subnet ID that represents the default subnet in **us-east-1a**.
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 **子网**，选择表示 **us-east-1a** 默认子网的子网 ID。
- en: In the text box next to **Auto-assign Public IP**, ensure that **Enable** is
    selected.
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 **自动分配公有 IP** 旁边的文本框中，确保选择了 **启用**。
- en: 'Leave all the remaining options as their default values and click the **Next:
    Add Storage** button at the bottom of the page.'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持所有其他选项为默认值，并点击页面底部的 **下一步：添加存储** 按钮。
- en: 'For **Step 4: Add Storage**, leave all the options as their default values
    and click the **Next: Add Tags** button at the bottom of the page.'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 **步骤 4：添加存储**，将所有选项保持为默认值，然后点击页面底部的 **下一步：添加标签** 按钮。
- en: For `Name`, and for `UAT-Server-01`.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 `名称`，以及 `UAT-Server-01`。
- en: 'Next, click on the **Next: Configure Security Group** button at the bottom
    of the page.'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击页面底部的 **下一步：配置安全组** 按钮。
- en: 'For **Step 6: Configure Security Group**, ensure that the **Create a new security
    group** option is selected and set **Security group name** to **UAT-SG**. This
    will represent the security group of our UAT test server(s).'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 **步骤 6：配置安全组**，确保选择了 **创建一个新的安全组** 选项，并将 **安全组名称** 设置为 **UAT-SG**。这将代表我们的
    UAT 测试服务器组。
- en: Next, you need to configure the inbound rules. You should already have a pre-configured
    inbound rule defined that allows SSH traffic inbound from the internet, as per
    the following screenshot:![Figure 12.4 – Configure Security Group
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要配置入站规则。您应该已经定义了一个预配置的入站规则，允许来自互联网的 SSH 流量，如下截图所示：![图 12.4 – 配置安全组
- en: '](img/B17124_12_04.jpg)'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17124_12_04.jpg)'
- en: Figure 12.4 – Configure Security Group
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 12.4 – 配置安全组
- en: Click the **Review and Launch** button at the bottom of the page.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面底部的 **审查并启动** 按钮。
- en: On the next page, review your configuration and then click the **Launch** button
    at the bottom of the page.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页，检查您的配置，然后点击页面底部的 **启动** 按钮。
- en: You will be prompted to choose an existing key pair or create a new one. You
    can use the existing key pair you created for the previous exercise. You will
    need to click on the checkbox to acknowledge that you have access to this key
    pair and then click on the **Launch instances** button.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统将提示您选择一个现有的密钥对或创建一个新的密钥对。您可以使用之前练习中创建的现有密钥对。您需要勾选复选框以确认您有权访问该密钥对，然后点击 **启动实例**
    按钮。
- en: Finally, click on the **View Instances** button to be taken back to the EC2
    dashboard, where you can see the instance you just launched.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击 **查看实例** 按钮，返回到 EC2 仪表板，在那里您可以看到刚刚启动的实例。
- en: 'Because we will be stopping and starting these EC2 instances using a Lambda
    function, you will need to make a note of the EC2 instance ID, as per the following
    screenshot. Note that your EC2 instance ID will be different from the one shown
    in this screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将使用 Lambda 函数来停止和启动这些 EC2 实例，您需要记录 EC2 实例 ID，如下截图所示。请注意，您的 EC2 实例 ID 将与此截图中的不同：
- en: '![Figure 12.5 – EC2 instance ID'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.5 – EC2 实例 ID'
- en: '](img/B17124_12_05.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_12_05.jpg)'
- en: Figure 12.5 – EC2 instance ID
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.5 – EC2 实例 ID
- en: Once your instance is up and running, we can start creating the necessary IAM
    policy and IAM role to enable our Lambda functions to start and stop our EC2 instance.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦实例启动并运行，我们就可以开始创建必要的 IAM 策略和 IAM 角色，以便使我们的 Lambda 函数能够启动和停止我们的 EC2 实例。
- en: Step 2 - Creating an IAM policy and execution role for your Lambda function
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 2 - 为您的 Lambda 函数创建 IAM 策略和执行角色
- en: 'For your Lambda function to be able to start and stop your EC2 instances, it
    needs to have the necessary permissions. In this step, you will configure an IAM
    policy and an IAM role to enable your Lambda function to perform the start and
    stop operations on your EC2 instances:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使您的 Lambda 函数能够启动和停止 EC2 实例，您需要拥有必要的权限。在此步骤中，您将配置一个 IAM 策略和一个 IAM 角色，以使 Lambda
    函数能够对 EC2 实例执行启动和停止操作：
- en: Navigate to the IAM dashboard.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 IAM 仪表板。
- en: From the left-hand menu, click on **Policies**.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中，点击 **策略**。
- en: Click the **Create Policy** button from the right-hand pane.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右侧窗格中的 **创建策略** 按钮。
- en: Select the **JSON** tab and delete the default JSON text in the editor tool.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **JSON** 标签页，并删除编辑工具中的默认 JSON 文本。
- en: 'Next, copy and paste the following JSON policy document into the policy editor
    (you can also download this policy from the Packt GitHub repository for this book
    [https://github.com/PacktPublishing/AWS-Certified-Cloud-Practitioner-Exam-Guide](https://github.com/PacktPublishing/AWS-Certified-Cloud-Practitioner-Exam-Guide)):'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下JSON策略文档复制并粘贴到策略编辑器中（您也可以从此书的Packt GitHub仓库下载此策略：[https://github.com/PacktPublishing/AWS-Certified-Cloud-Practitioner-Exam-Guide](https://github.com/PacktPublishing/AWS-Certified-Cloud-Practitioner-Exam-Guide)）：
- en: '[PRE0]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Click the **Next: Tags** button at the bottom of the page.'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面底部的**下一步：标签**按钮。
- en: On the `Name`, and for `Lambda-EC2-Access-Policy`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`名称`，以及`Lambda-EC2-Access-Policy`。
- en: 'Click **Next: Review**.'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步：审查**。
- en: On the `Lambda-EC2-Access-Policy`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Lambda-EC2-Access-Policy`。
- en: Click the **Create policy** button at the bottom of the page. You will receive
    a notification that your policy has been created.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面底部的**创建策略**按钮。您将收到通知，告知您的策略已创建。
- en: Next, you will need to create an IAM role for Lambda. From the left-hand menu,
    click on **Roles**.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要为Lambda创建一个IAM角色。从左侧菜单中，点击**角色**。
- en: Click **Create role** from the right-hand pane.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从右侧窗格中点击**创建角色**。
- en: On the **Create role** page, ensure that the **AWS service** option is selected
    under **Select type of trusted entity**.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建角色**页面，确保在**选择受信实体类型**下选择了**AWS服务**选项。
- en: Next, under **Choose a use case**, select **Lambda**.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在**选择用例**下，选择**Lambda**。
- en: 'Click the **Next: Permissions** button at the bottom of the page.'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面底部的**下一步：权限**按钮。
- en: 'On the `Lambda-EC2`, which should filter the list down to the policy you just
    created. Select this policy and click on the **Next: Tags** button at the bottom
    of the page.'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Lambda-EC2`上，应该会将列表过滤到您刚刚创建的策略。选择此策略并点击页面底部的**下一步：标签**按钮。
- en: On the `Name`, and for `Lambda-EC2-Start-Stop-IAM-Role`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`名称`，以及`Lambda-EC2-Start-Stop-IAM-Role`。
- en: Click the `Lambda-EC2-Start-Stop-IAM-Role`.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Lambda-EC2-Start-Stop-IAM-Role`。
- en: Click the **Create role** button at the bottom of the page.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面底部的**创建角色**按钮。
- en: You will get a notification, stating that the IAM role has been created.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将收到通知，说明IAM角色已创建。
- en: Now that your role has been created, you can create Lambda functions to stop
    and start your EC2 instances.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的角色已创建，您可以创建Lambda函数来停止和启动您的EC2实例。
- en: Step 3 - Creating Lambda functions that stop and start your EC2 instances
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3步 - 创建停止和启动EC2实例的Lambda函数。
- en: 'Now, let''s create a Lambda function to stop and start your EC2 instance at
    a predefined schedule:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个Lambda函数，以在预定的时间表上停止和启动您的EC2实例：
- en: From the **Services** drop-down list at the top of the AWS Management Console
    page, select **Lambda**, which is located under the **Compute** category.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从AWS管理控制台页面顶部的**服务**下拉列表中，选择**Lambda**，它位于**计算**类别下。
- en: From the left-hand menu, click on **Functions**.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中点击**函数**。
- en: Click the **Create function** button in the right-hand pane.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中点击**创建函数**按钮。
- en: Select the **Author from scratch** option.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**从头开始创建**选项。
- en: Under `StopEC2Instances`.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`StopEC2Instances`下。
- en: For **Runtime**, select **Python 3.8**
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**运行时**，选择**Python 3.8**。
- en: Next, under **Permissions**, expand **Change default execution role**.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在**权限**下，展开**更改默认执行角色**。
- en: Under **Execution role**, select **Use an existing role**. Next, from the **Existing
    role** drop-down list, select the IAM role you created earlier.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**执行角色**下，选择**使用现有角色**。接下来，从**现有角色**下拉列表中，选择您之前创建的IAM角色。
- en: Click the **Create function** button.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建函数**按钮。
- en: You will be redirected to the **StopEC2Instances** function page.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被重定向到**StopEC2Instances**功能页面。
- en: Next, in the `StopEC2Instance` folder and double-click on the `lambda_function.py`
    file. In the right-hand pane, you will notice some sample code.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`StopEC2Instance`文件夹中双击`lambda_function.py`文件。在右侧窗格中，您将看到一些示例代码。
- en: 'Delete the sample code and replace it with the following code:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除示例代码，并将其替换为以下代码：
- en: '[PRE1]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Next, you will notice that the sample code refers to two EC2 instances. Replace
    this with the instance ID of the server you deployed in *Step 1 - Launching an
    EC2 instance* of this exercise, ensuring that the instance ID is placed within
    single quotes.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将注意到示例代码引用了两个EC2实例。将其替换为您在此练习中*步骤1 - 启动EC2实例*中部署的服务器的实例ID，确保实例ID放在单引号中。
- en: Next, click on the **Configuration** tab.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**配置**标签。
- en: Click the **Edit** button from the **General configuration** pane.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**常规配置**窗格中点击**编辑**按钮。
- en: Next, set the timeout value to 10 seconds.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将超时值设置为 10 秒。
- en: Click the **Save** button. This will take you back to the **Function** page.
    Click the **Code** tab.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**按钮。这将带您返回**函数**页面。点击**代码**选项卡。
- en: Recheck your Lambda code and ensure that you have made all the preceding changes.
    Next, click on the **Deploy** button.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新检查您的 Lambda 代码，并确保您已完成所有前面的更改。接下来，点击**部署**按钮。
- en: If necessary, click on the ellipsis icon in the far left-hand pane to bring
    up the main menu and click on the **Function** link.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，点击左侧面板中的省略号图标，调出主菜单并点击**函数**链接。
- en: You should now see a list of your functions, which will include the `StopEC2Instances`
    function you just created.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您应该看到您的函数列表，其中包括刚刚创建的`StopEC2Instances`函数。
- en: Repeat *Steps 1* to *15* to create another function. This time, you will be
    creating a function to start your EC2 instances. For *Step 5*, enter a different
    function name than the one you used before; for example, **StartEC2Instances**.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复*步骤 1* 到 *15*，创建另一个函数。这次，您将创建一个用于启动 EC2 实例的函数。对于*步骤 5*，输入与之前不同的函数名称；例如，**StartEC2Instances**。
- en: 'For *Step 9*, copy and paste the following code into the editor pane, remembering
    to delete the sample code that is already there:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于*步骤 9*，将以下代码复制并粘贴到编辑器面板中，记得删除已经存在的示例代码：
- en: '[PRE2]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Remember to also change the Region to `us-east-1` and amend the instance ID
    to the ID of your EC2 instance.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记得还要将区域更改为`us-east-1`，并将实例 ID 修改为您 EC2 实例的 ID。
- en: Once you have deployed your function, go back to the list of functions by clicking
    on the link from the left-hand menu (if necessary, by first clicking on the ellipsis
    icon).
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署完函数后，点击左侧菜单中的链接，返回函数列表（如果需要，首先点击省略号图标）。
- en: 'You should now have two functions that will be used to stop and start your
    EC2 instances, as per the following screenshot:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，您现在应该有两个函数，将用于停止和启动您的 EC2 实例：
- en: '![Figure 12.6 – Functions'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.6 – 函数'
- en: '](img/B17124_12_06.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_12_06.jpg)'
- en: Figure 12.6 – Functions
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.6 – 函数
- en: Next, you will create CloudWatch event rules to help you execute the Lambda
    functions at scheduled times. We discussed CloudWatch events briefly in [*Chapter
    13*](B17124_13_Final_SK_ePub.xhtml#_idTextAnchor317)*, Management and Governance
    on AWS*. We will look at CloudWatch in more detail in the next chapter.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将创建 CloudWatch 事件规则，帮助您在预定时间执行 Lambda 函数。我们在[*第 13 章*](B17124_13_Final_SK_ePub.xhtml#_idTextAnchor317)《AWS
    管理与治理》中简要讨论了 CloudWatch 事件。我们将在下一章详细介绍 CloudWatch。
- en: Step 4 - Creating CloudWatch event rules to trigger your Lambda functions
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 4 - 创建 CloudWatch 事件规则以触发 Lambda 函数
- en: 'In this step, you will learn how to create CloudWatch event rules to trigger
    your Lambda functions at a given schedule:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，您将学习如何创建 CloudWatch 事件规则，以便在特定时间触发您的 Lambda 函数：
- en: Navigate to the CloudWatch dashboard. You can either search for CloudWatch from
    the top search bar of the AWS Management Console page or click the **CloudWatch**
    link from the **Management & Governance** category in the list of services.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 CloudWatch 仪表板。您可以从 AWS 管理控制台页面顶部的搜索栏中搜索 CloudWatch，或者从服务列表中的**管理与治理**类别中点击**CloudWatch**链接。
- en: From the left-hand menu, click on **Rules**, under **Events**.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中，点击**规则**，在**事件**下。
- en: Click the **Create rule** button.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建规则**按钮。
- en: 'For **Step 1: Create rule**, select **Schedule** under **Event Pattern**.'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '对于**步骤 1: 创建规则**，在**事件模式**下选择**计划**。'
- en: Next, select **Cron expression**. A CRON expression is a string comprised of
    six fields separated by white spaces that represent a set of times. These can
    be used as a schedule to execute a particular task regularly.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择**Cron 表达式**。CRON 表达式是由六个字段组成的字符串，这些字段用空格分隔，表示一组时间。它们可以用作定期执行特定任务的计划。
- en: In the text field next to **Cron expression**, you will need to type in an expression
    that tells Lambda when to stop your instances. To learn more about how to define
    your expressions, visit [https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html).
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Cron 表达式**旁边的文本框中，您需要输入一个表达式，告诉 Lambda 何时停止您的实例。要了解如何定义您的表达式，请访问[https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html)。
- en: For this exercise, we wish to stop our EC2 instances at 6 P.M. Our UAT testers
    normally leave work at 5 P.M., but just in case anyone decides to work a bit late,
    we can execute the Lambda Stop function at 6 P.M.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于本练习，我们希望在晚上 6 点停止我们的 EC2 实例。我们的 UAT 测试人员通常在下午 5 点下班，但以防有人决定稍微加班，我们可以在下午 6
    点执行 Lambda 停止函数。
- en: The cron expression that you can use to execute the Lambda Stop function is
    **0 18 ? * MON-FRI ***. This will also display the next 10 triggers and their
    time of execution, as per the following screenshot:![Figure 12.7 – AWS CloudWatch
    event rule cron expression
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用的 cron 表达式来执行 Lambda 停止函数是**0 18 ? * MON-FRI ***。这还会显示下一个 10 次触发及其执行时间，如下图所示：![图
    12.7 – AWS CloudWatch 事件规则 cron 表达式](img/B17124_12_07.jpg)
- en: '](img/B17124_12_07.jpg)'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17124_12_07.jpg)'
- en: Figure 12.7 – AWS CloudWatch event rule cron expression
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 12.7 – AWS CloudWatch 事件规则 cron 表达式
- en: Next, click on the **Add target** button under **Targets**.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在**目标**下点击**添加目标**按钮。
- en: From the drop-down list that appears, select **Lambda function**.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从出现的下拉列表中选择**Lambda 函数**。
- en: In the drop-down list next to **Function**, select the **StopEC2Instances**
    function. As you may recall, this is a Lambda function that will stop your EC2
    instance.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**函数**旁边的下拉列表中选择**StopEC2Instances**函数。如你所记，这个 Lambda 函数将停止你的 EC2 实例。
- en: Next, click on the **Configuration details** button.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**配置详情**按钮。
- en: For `StopUATInstances`.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`StopUATInstances`。
- en: In the `Stops UAT instances at 6 PM Monday to Friday`.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Stops UAT instances at 6 PM Monday to Friday`中。
- en: Next, click the **Create rule** button.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**创建规则**按钮。
- en: Repeat *Steps 3* to *15* to start your EC2 instances. For this rule, ensure
    that, in *Step 6*, for `StartUATInstances` for the name and for the description,
    `Starts UAT instances at 8 AM Monday to Friday`.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复*步骤 3*到*15*以启动你的 EC2 实例。对于此规则，确保在*步骤 6*中，对于`StartUATInstances`的名称和描述，填写`Starts
    UAT instances at 8 AM Monday to Friday`。
- en: 'At this point, you have ensured that your scheduled events automatically trigger
    the relevant Lambda functions, as per the following screenshot:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到此为止，你已经确保了你的计划事件会自动触发相关的 Lambda 函数，如下图所示：
- en: '![Figure 12.8 – CloudWatch event rules'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.8 – CloudWatch 事件规则](img/B17124_12_08.jpg)'
- en: '](img/B17124_12_08.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_12_08.jpg)'
- en: Figure 12.8 – CloudWatch event rules
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.8 – CloudWatch 事件规则
- en: You can wait for the designated times to check whether your EC2 instance has
    been stopped and then restarted. Alternatively, you can just test your Lambda
    function, which is what we will be doing next.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以等到指定的时间，检查你的 EC2 实例是否已被停止并重新启动。或者，你可以直接测试你的 Lambda 函数，这正是我们接下来要做的。
- en: Step 5 - Testing your Lambda function
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 5 步 - 测试你的 Lambda 函数
- en: 'We can test our Lambda function rather than waiting for the scheduled times
    to see whether the functions work:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以测试我们的 Lambda 函数，而不是等待计划的时间，以查看函数是否正常工作：
- en: Navigate back to the Lambda dashboard.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Lambda 仪表板。
- en: From the left-hand menu, select **Functions**. Then, from the right-hand pane,
    select the **StopEC2Instances** function.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中选择**函数**。然后，在右侧窗格中选择**StopEC2Instances**函数。
- en: Next, from the **Actions** drop-down list, select **Test**.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从**操作**下拉列表中选择**测试**。
- en: For **StopEC2Instances**, click on the **Test** button in the **Test event**
    pane.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**StopEC2Instances**，点击**测试**按钮，在**测试事件**窗格中。
- en: 'If the function has been configured correctly, you should see the **Execution
    result: succeeded** message and an option to expand the **Details** pane. This
    will provide details of the execution, as per the following screenshot:![Figure
    12.9 – The Lambda function''s execution details'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果函数配置正确，你应该看到**执行结果：成功**的消息，并有一个展开**详情**窗格的选项。此窗格将提供执行的详细信息，如下图所示：![图 12.9
    – Lambda 函数执行详情](img/B17124_12_09.jpg)
- en: '](img/B17124_12_09.jpg)'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17124_12_09.jpg)'
- en: Figure 12.9 – The Lambda function's execution details
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 12.9 – Lambda 函数执行详情
- en: In another browser window, navigate to your EC2 dashboard. Here, you should
    find that your EC2 instance has been stopped.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个浏览器窗口中，导航到你的 EC2 控制台。在这里，你应该会发现你的 EC2 实例已经停止。
- en: Return to the AWS Lambda browser tab and click on **Functions** from the far
    left-hand menu.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 AWS Lambda 浏览器标签页，从左侧菜单中点击**函数**。
- en: Repeat *Steps 2* to *5*, this time selecting the **StartEC2Instances** function.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复*步骤 2*到*5*，这次选择**StartEC2Instances**函数。
- en: Within a few seconds, you should find that the function was executed successfully,
    and you can cross-reference this with the EC2 dashboard. You should find that
    your EC2 instance has started again.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几秒钟内，你应该能看到该函数成功执行，并且你可以与 EC2 控制台进行交叉验证。你应该会发现你的 EC2 实例已重新启动。
- en: In this exercise, you learned how to create Lambda functions that can be used
    to perform repetitive IT tasks for your organization and help automate various
    processes. You also learned how to schedule those repetitive tasks using AWS CloudWatch
    event rules and cron expressions.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，您学习了如何创建 Lambda 函数，这些函数可以用来为您的组织执行重复的 IT 任务，并帮助自动化各种流程。您还学习了如何使用 AWS CloudWatch
    事件规则和 cron 表达式来调度这些重复的任务。
- en: Exercise 12.2 – cleaning up
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习 12.2 – 清理工作
- en: 'In this exercise, you will terminate your EC2 instance and delete your Lambda
    functions to avoid any unnecessary charges to your AWS account:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，您将终止 EC2 实例并删除 Lambda 函数，以避免对您的 AWS 账户产生不必要的费用：
- en: Navigate to the EC2 dashboard and ensure that you are in the **us-east-1** (North
    Virginia) Region.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 EC2 控制台并确保您处于**us-east-1**（北弗吉尼亚）区域。
- en: Click on **Instances** from the left-hand menu.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中点击**实例**。
- en: In the right-hand pane, under **Instances**, select the EC2 instance you launched
    earlier. Then, from the **Instance state** drop-down menu, click **Terminate instance**.
    Confirm that you wish to terminate the instance; AWS will terminate it.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧面板中，选择您之前启动的 EC2 实例。然后，从**实例状态**下拉菜单中，点击**终止实例**。确认您希望终止该实例；AWS 会终止它。
- en: Next, navigate to the Lambda dashboard.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，导航到 Lambda 控制台。
- en: Click on **Functions** from the left-hand menu. In the right-hand pane, for
    each function, select the function. Then, from the **Actions** drop-down list,
    click **Delete**. Click the **Delete** button in the pop-up dialog box to delete
    the function.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中点击**函数**。在右侧面板中，对于每个函数，选择该函数。然后，从**操作**下拉列表中，点击**删除**。在弹出的对话框中点击**删除**按钮以删除该函数。
- en: Next, navigate to the CloudWatch management console.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，导航到 CloudWatch 管理控制台。
- en: From the left-hand menu, click on **Rules**, under **Events**.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中，点击**规则**，位于**事件**下。
- en: For each rule, select the rule. Then, from the **Actions** drop-down list, click
    **Delete**. Click the **Delete** button in the pop-up dialog box to delete the
    rule.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个规则，选择该规则。然后，从**操作**下拉列表中，点击**删除**。在弹出的对话框中点击**删除**按钮以删除该规则。
- en: Your resources have now been removed from your AWS accounts. In the next section,
    we will provide a summary of this chapter.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 您的资源现已从 AWS 账户中移除。在接下来的部分，我们将提供本章的总结。
- en: Summary
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: AWS offers numerous services and tools to help you architect efficient application
    deployment strategies with a focus on the application rather than the underlying
    infrastructure that supports it. Amazon Elastic Beanstalk helps your developers
    focus on the application code rather than how to go about configuring every minute
    infrastructure component to support it.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 提供了众多服务和工具，帮助您构建高效的应用程序部署策略，专注于应用程序本身，而不是支持它的基础设施。Amazon Elastic Beanstalk
    帮助您的开发人员专注于应用程序代码，而不是如何配置每个细节的基础设施组件来支持它。
- en: AWS also offers you tools to build end-to-end infrastructure components using
    an IaC approach, which drastically improves speed and agility and reduces the
    human error element that manual configurations are prone to. AWS CloudFormation
    is an intelligent tool that accepts code in its declarative form to help an architect
    complete infrastructure deployments.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 还为您提供了使用 IaC（基础设施即代码）方法构建端到端基础设施组件的工具，这大大提高了速度和敏捷性，并减少了人工配置中容易出现的人为错误。AWS
    CloudFormation 是一款智能工具，可以接受声明式代码，帮助架构师完成基础设施部署。
- en: You also learned how to automate day-to-day administrative tasks using serverless
    **Function-as-a-Service** (**FaaS**) tools such as AWS Lambda.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 您还学习了如何使用无服务器**函数即服务**（**FaaS**）工具，如 AWS Lambda，来自动化日常的管理任务。
- en: In the next chapter, we will look at various management and governance tools
    that will help you efficiently manage your AWS resources and design for better
    performance, security, and operations.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨各种管理和治理工具，这些工具将帮助您高效地管理 AWS 资源，并设计出更好的性能、安全性和操作性。
- en: Questions
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题以测试您对本章的理解：
- en: Which AWS service automatically provisions the necessary infrastructure (for
    example, load balancing, auto-scaling, and health monitoring) and enables developers
    to automatically deploy an application's built-in supported languages such as
    Node.js, PHP, and Python?
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 AWS 服务会自动配置所需的基础设施（例如，负载均衡、自动扩展和健康监控），并使开发人员能够自动部署应用程序的内置支持语言，如 Node.js、PHP
    和 Python？
- en: AWS CloudFormation
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS CloudFormation
- en: AWS Lambda
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Lambda
- en: AWS Elastic Beanstalk
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Elastic Beanstalk
- en: AWS Deployer
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Deployer
- en: You work for a web application development company and have been asked to design
    an infrastructure solution that can be repeatedly created using scripted templates.
    This will allow you to create individual sandbox environments for your developers
    to use. Some infrastructure components will include the setup and configuration
    of a VPC, EC2 instances, S3 buckets, and more. Which AWS service enables you to
    design an infrastructure template that can be deployed to create repeatable infrastructure
    for your developers to use as a sandbox environment?
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您在一家 Web 应用程序开发公司工作，并被要求设计一个可以通过脚本化模板反复创建的基础架构解决方案。这将使您能够为开发人员创建独立的沙箱环境。一些基础设施组件将包括
    VPC 的设置和配置、EC2 实例、S3 桶等。哪个 AWS 服务使您能够设计一个基础架构模板，并将其部署以创建可重复的基础架构供开发人员用作沙箱环境？
- en: AWS Systems Manager
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS 系统管理器
- en: AWS CloudFormation
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS CloudFormation
- en: AWS Config
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Config
- en: AWS FSx for Lustre
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS FSx for Lustre
- en: Which two file formats are used when creating CloudFormation templates? (Choose
    2.)
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 CloudFormation 模板时使用哪两种文件格式？（选择 2 种。）
- en: JSON
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: JSON
- en: YAML
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: YAML
- en: XML
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: XML
- en: HTML
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTML
- en: Java
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Java
- en: Which AWS service provides integration with Chef recipes to start new application
    instances, configure application server software, and deploy the application?
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 AWS 服务提供与 Chef 配方的集成，以启动新的应用程序实例、配置应用程序服务器软件并部署应用程序？
- en: Amazon CloudFormation
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Amazon CloudFormation
- en: Amazon Elastic Beanstalk
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Amazon Elastic Beanstalk
- en: Amazon OpsWorks
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Amazon OpsWorks
- en: Amazon Cookbook.
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Amazon Cookbook.
- en: Which type of environment do you need to configure for an Elastic Beanstalk
    deployment to host backend application layer services?
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为 Elastic Beanstalk 部署配置哪种类型的环境，以承载后端应用程序层服务？
- en: Web server environment tier
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Web 服务器环境层
- en: Worker environment tier
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作者环境层
- en: Backend environment tier
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 后端环境层
- en: Hybrid environment
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 混合环境
- en: Which feature of the Amazon CloudFormation service enables you to review any
    proposed changes you wish to make to an environment and identify how those changes
    will impact your environment?
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Amazon CloudFormation 服务的哪个功能使您能够审查任何您希望对环境进行的提议更改，并确定这些更改将如何影响您的环境？
- en: Drift detection
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 漂移检测
- en: Change sets
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 变更集
- en: Stack sets
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 堆栈集
- en: Change management
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 变更管理
