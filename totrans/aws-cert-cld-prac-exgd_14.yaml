- en: '[*Chapter 12*](B17124_12_Final_SK_ePub.xhtml#_idTextAnchor296): Automation
    and Deployment on AWS'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you have learned how to configure and deploy various services on AWS.
    However, most of your configuration has been manual, with very little automation.
    For example, in [*Chapter 9*](B17124_09_Final_SK_ePub.xhtml#_idTextAnchor223),
    *High Availability and Elasticity on AWS*, you deployed an application in a multi-tier
    design. This consisted of application servers configured in an auto-scaling group,
    an application load balancer, a database to store application data, and an S3
    bucket to host your source code. All of this was deployed in a private network
    in the form of **Amazon VPC**.
  prefs: []
  type: TYPE_NORMAL
- en: While building your application stack, you had to manually configure the various
    services on AWS with all the necessary resources to deploy your application. For
    example, with the VPC, you had to configure subnets, IP address ranges, security
    groups, NAT gateways, and much more. Now, imagine having to perform this sort
    of manual labor every time you need to create a new environment to host your applications.
    It would, without a doubt, be very time consuming.
  prefs: []
  type: TYPE_NORMAL
- en: AWS offers various deployment and automation tools to help you architect, provision,
    and build infrastructure components to host your applications. Some of these tools
    fall within the PaaS model, where you simply need to focus on the application
    build and deployment strategy, and AWS will provision the necessary infrastructure
    to support that application. Other services enable you to define a template for
    your infrastructure that you may need to provision repeatedly. Using **Infrastructure
    as Code** (**IaC**), you can draft a template that describes how your services
    and resources need to be configured. AWS will then build the infrastructure, along
    with all its components, which can then be used to host your application. Automating
    your infrastructure deployments offers several benefits, including being able
    to scale your infrastructure globally by sharing your *templates* across your
    organization to enforce corporate standards and security best practices. Furthermore,
    by avoiding manual configuration efforts, you reduce the human error element.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at some of the core automation and deployment
    tools to help you get your solutions to market faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding application deployment with Amazon Elastic Beanstalk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the benefits of IaC using Amazon CloudFormation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to the orchestration of Chef and Puppet solutions using AWS OpsWorks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IT automation with Lambda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete the exercises in this chapter, you will need to log into your AWS
    account as the IAM user **Alice**, which you had set up in [*Chapter 4*](B17124_04_Final_SK_ePub.xhtml#_idTextAnchor068),
    *Identity and Access Management*.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding application deployment with Amazon Elastic Beanstalk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Amazon Elastic Beanstalk** is a service that enables you to deploy your application
    without having to manually configure the underlying infrastructure that will support
    the application. Amazon Elastic Beanstalk does all the heavy lifting, which involves
    provisioning the necessary infrastructure to host and manage your application.
    This includes capacity provisioning, scaling, load balancing, and health monitoring.'
  prefs: []
  type: TYPE_NORMAL
- en: If your application is developed in one of the supported languages, which includes
    Go, Java, .NET, Node.js, PHP, Python, and a few others, Amazon Elastic Beanstalk
    will build out the platform using one or more AWS resources, such as EC2 instances,
    to run your application. All you need to do is follow a prescribed process to
    deploy your application.
  prefs: []
  type: TYPE_NORMAL
- en: Another option to consider is to use Elastic Beanstalk to deploy Docker containers.
    This gives you a lot more flexibility because, with Docker containers, you can
    configure your runtime environments and choose a programming language, supported
    platform, and any dependencies as required. Thus, you are not restricted to any
    limitations that are usually associated with the other platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Elastic Beanstalk does not restrict you to one specific underlying infrastructure
    design either. You can modify how the underlying infrastructure components will
    be deployed – for example, you can specify the EC2 instance type and size that
    is deployed or enforce that a set minimum number of EC2 instances are deployed
    as part of an auto-scaling group. Ultimately, you retain control of how the infrastructure
    is configured but without the complex manual configuration, which Amazon Elastic
    Beanstalk takes care of. Once your application has been deployed, you can manage
    your environment and deploy application updates or versions later.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's take a look at the core components of the Amazon Elastic Beanstalk
    service.
  prefs: []
  type: TYPE_NORMAL
- en: Core components of Amazon Elastic Beanstalk
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The infrastructure components that AWS Elastic Beanstalk creates to host your
    application are called an *environment*. Each environment can only run a single
    application version, but you can create many environments for different application
    versions simultaneously. You can modify your environment if you need to and deploy
    upgrades to your application when you release new updates.
  prefs: []
  type: TYPE_NORMAL
- en: 'As part of launching an Elastic Beanstalk environment, you need to select the
    *environment tier*. The environment tier you choose is determined by the type
    of application you are deploying and ultimately determines the resources Elastic
    Beanstalk will configure to support your application. We have two environment
    tiers that can be configured with Elastic Beanstalk: **web server environment
    tier** and **worker environment tier**.'
  prefs: []
  type: TYPE_NORMAL
- en: Web server environment tier
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This environment is designed for the frontend tier of your application stack,
    such as the frontend **user interface** (**UI**) of your e-commerce application.
    AWS Elastic Beanstalk will provision an environment that is designed to accept
    inbound traffic to your web application via an elastic load balancer, offer scalability
    in the form of auto-scaling group configurations, and one or more EC2 instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram illustrates the typical architecture that''s deployed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 – AWS Elastic Beanstalk – web server environment tier'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_12_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.1 – AWS Elastic Beanstalk – web server environment tier
  prefs: []
  type: TYPE_NORMAL
- en: As part of the *web server environment tier*, AWS Elastic Beanstalk will deploy
    EC2 instances across multiple AZs. Your application is then deployed onto those
    instances. Furthermore, Amazon Auto Scaling will be configured as part of the
    environment to scale out as demand for your application increases or scale back
    in when demand drops. You will have full control over the scaling policies that
    are used and their parameters. AWS Elastic Beanstalk will also deploy a software
    stack, depending on the *container type*, which is the infrastructure topology
    and software stack to be used for that environment. For example, if you were deploying
    a .NET application on Windows, the environment that would be configured by Elastic
    Beanstalk would be comprised of the Microsoft Windows operating system, Windows
    EC2 instances, and a version of **Internet Information Services+** (**IIS**).
  prefs: []
  type: TYPE_NORMAL
- en: AWS Elastic Beanstalk also configures an environment URL that points to the
    load balancer in the format of `app-name.region.elasticbeanstalk.com`. This URL
    is aliased with the elastic load balancer's URL. You can also alias this URL with
    a CNAME record of your choice, such as your company domain name, using Amazon
    Route 53\. This will allow you to use more friendly names such as `myapp.mycompany.com`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, each EC2 instance will be configured with a software component
    called the **host manager** (**HM**). The HM is responsible for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aggregating events and metrics for the servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating instance-level events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring the application log files for critical errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring the application server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patching your EC2 instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotating your application's log files and publishing them to Amazon S3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we'll look at the worker environment tier.
  prefs: []
  type: TYPE_NORMAL
- en: Worker environment tier
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This environment is intended for backend operations. In a multiple-tier application
    architecture, this would represent the middleware, application, and backend database
    layers of your application stack. AWS Elastic Beanstalk provisions an environment
    that's appropriate for such backend operations and consists of an Auto Scaling
    group, one or more Amazon EC2 instances, and an IAM role. In addition, AWS Elastic
    Beanstalk will also provision an Amazon SQS queue if you have not configured your
    own yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'AWS Elastic Beanstalk will also install a *daemon* on each EC2 instance in
    the fleet. This daemon will read messages from the Amazon SQS queue and send this
    data to the application servers running in the worker environment tier for processing.
    This process is illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2 – AWS Elastic Beanstalk – worker environment tier'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_12_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.2 – AWS Elastic Beanstalk – worker environment tier
  prefs: []
  type: TYPE_NORMAL
- en: AWS Elastic Beanstalk will also monitor the health of your EC2 instances using
    a service called **Amazon CloudWatch**. We will look at Amazon CloudWatch in [*Chapter
    13*](B17124_13_Final_SK_ePub.xhtml#_idTextAnchor317), *Management and Governance
    on AWS*.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from this, AWS Elastic Beanstalk can help you deploy and manage your application
    stack using various deployment types, including *all at once*, *rolling*, *rolling
    with additional batch*, *immutable*, and *traffic splitting*. These deployment
    types enable you to design your application deployments and any ongoing updates
    that suit your specific business requirements.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned about the AWS Elastic Beanstalk service, which is
    an application deployment and management service on AWS. AWS Elastic Beanstalk
    allows developers to focus on their application code rather than having to minutely
    configure infrastructure components to support the application. AWS Elastic Beanstalk
    will provision a highly available and scalable infrastructure architecture and
    gives you control over how those infrastructure components are configured to support
    your specific requirements.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at the Amazon CloudFormation service, which
    enables you to architect your underlying infrastructure resources using templates
    written in JSON or YAML code.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the benefits of IaC using Amazon CloudFormation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The approach of using code to describe and deploy your infrastructure components
    automatically is known as IaC. IaC is a fundamental component that enables you
    to automate infrastructure builds in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Building your infrastructure using code greatly improves deployment processes
    because the code is executed by machines. This also means that any infrastructure
    that's deployed using code is less prone to human errors, which is inherent in
    manual deployments. Furthermore, you can create templates for repeat deployments
    and enable versioning for those templates. Often, you want to mimic the testing
    and production environments with each other so that you are assured that once
    your application has passed the testing phase, it can be easily deployed to production.
    Using templates that describe your infrastructure is the best way to avoid any
    discrepancies between those environments.
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon CloudFormation** is a solution that can help you design, build, and
    deploy your infrastructure using code. It helps you define the resources to be
    created and configured and how those resources interact with each other.'
  prefs: []
  type: TYPE_NORMAL
- en: CloudFormation templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon CloudFormation uses *templates*, which are text files that are written
    in either JSON or YAML format. The code describes the resources that you wish
    to deploy, along with configuration information related to those resources. For
    example, if you need to deploy a **security group** as part of your VPC template,
    you can specify its name and the inbound and outbound rules that are permitted.
  prefs: []
  type: TYPE_NORMAL
- en: The best part about CloudFormation templates is that they contain descriptions
    of the resources that you want CloudFormation to deploy. This can double up as
    a technical document of your entire infrastructure. In addition, templates can
    be used repeatably to deploy infrastructure for different environments. This ensures
    that you have the same architecture for both your development and testing environments.
    While the configuration in each environment will be the same, they will be separate
    environments with different resource identifiers.
  prefs: []
  type: TYPE_NORMAL
- en: AWS CloudFormation templates can also be used to accept input parameter values.
    This can further help expedite the process of building different environments
    for experimentation and testing. For example, if you were testing a new application
    and you wanted to compare performance levels based on the underlying EC2 instance
    type and size that the application was hosted on, you could deploy multiple test
    environments with different EC2 instance types and sizes. The input parameters,
    at the time of deploying the template, will prompt you to specify which instance
    type and size to use for a given environment. This also makes it easier to use
    the same template for different situations.
  prefs: []
  type: TYPE_NORMAL
- en: CloudFormation templates are used to deploy CloudFormation stacks, which are
    a container that organizes the resources described in the template. We'll look
    at CloudFormation stacks next.
  prefs: []
  type: TYPE_NORMAL
- en: CloudFormation stacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With CloudFormation, you can create *stacks*, which are a container to collectively
    manage all related resources as a single unit. So, for example, a stack could
    consist of the VPC, an Auto Scaling group, an elastic load balancer, and an Amazon
    RDS database instance. You can have multiple stacks that deploy a collection of
    resources that may also need to communicate with each other.
  prefs: []
  type: TYPE_NORMAL
- en: You can also delete a stack when you no longer need the resources contained
    within it. AWS will then delete every resource that was deployed when the stack
    was created using your template. This ensures that you do not have any resources
    lingering, which often happens when you are manually trying to delete resources
    from an environment. This also ensures that you can quickly get rid of test or
    development environments when they're no longer needed.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, you may need to modify your stack – for example, if you need to upgrade
    the EC2 instance type or change the database endpoint. We will look at how to
    implement changes to your stack next.
  prefs: []
  type: TYPE_NORMAL
- en: Change sets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need to make changes to the resources that are deployed in your stack,
    you can create a **change set**. AWS CloudFormation creates this change set based
    on a summary of changes you make to the template and gives you the details of
    the proposed changes. You can then decide whether to roll out those changes or
    make further modifications first.
  prefs: []
  type: TYPE_NORMAL
- en: Change sets are particularly useful at highlighting changes that may have catastrophic
    results, ensuring that you can perform all precautionary tasks first. For example,
    if you were to simply change the name of your Amazon RDS database in a template,
    AWS CloudFormation would create a new database and delete the old one. If you
    did not make a backup of the RDS database before performing this action, you would
    end up losing your data. Change sets can help you identify where such irreversible
    changes will occur, and you can make sure that you first perform a manual snapshot
    of your RDS database before rolling out the change.
  prefs: []
  type: TYPE_NORMAL
- en: Drift detection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recommended approach, when making any changes to your CloudFormation stack,
    is to use change sets. However, it is possible to make changes to the stack resources
    outside of CloudFormation. Sometimes, these may be accidental but at other times,
    you may wish to make these changes urgently, although any change should follow
    a proper change management process.
  prefs: []
  type: TYPE_NORMAL
- en: Another issue is that if changes are made outside of CloudFormation, then any
    stack update or deletion requests may fail. AWS offers a feature of the CloudFormation
    service known as *drift detection*. You can use drift detection to identify stack
    resources that configuration changes have been made to outside of CloudFormation
    management.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about the AWS CloudFormation service, which uses
    an IaC approach to build and deploy infrastructure resources that can be used
    to support your application. CloudFormation enables you to design templates using
    JSON- and YAML-formatted text files that describe your resources and how they
    can be configured.
  prefs: []
  type: TYPE_NORMAL
- en: Then, CloudFormation does the heavy lifting of provisioning those resources
    just the way you want them. CloudFormation templates are used to build CloudFormation
    stacks, which collectively manage all the related resources as a single unit.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at another AWS service that can help you orchestrate
    and deploy applications that have been designed for the Chef and Puppet automation
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the orchestration of Chef and Puppet solutions using AWS OpsWorks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will provide a quick introduction to another configuration
    management and orchestration service known as **AWS OpsWorks**. AWS offers three
    different services that fall under the AWS OpsWorks offering. There are AWS OpsWorks
    stacks and AWS OpsWorks for Chef Automate, which let you use Chef cookbooks for
    configuration management. The third service is OpsWorks for Puppet Enterprise,
    which lets you configure a Puppet Enterprise master server in AWS.
  prefs: []
  type: TYPE_NORMAL
- en: '**OpsWorks for Puppet Enterprise** provides a *fully managed Puppet master
    server* that is used to communicate with, configure, deploy, and manage your nodes
    – which could be EC2 instances or even on-premises servers. The service also takes
    care of handling tasks such as software and operating system configurations, package
    installations, database setups, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS OpsWorks for Chef Automate** lets you create *AWS-managed Chef servers*,
    including Chef Automate software solutions. AWS OpsWorks creates a Chef server
    that is used to manage all your nodes and acts as a central repository for your
    Chef cookbooks. Chef cookbooks contain recipes that are authored using the Ruby
    programming language and enable you to define a collection of resources and their
    attributes that need to be configured.'
  prefs: []
  type: TYPE_NORMAL
- en: AWS OpsWorks for Puppet Enterprise and OpsWorks for Chef Automate require that
    you know how to operate the Chef and Puppet software. If you prefer a more IaC
    approach to deploying your application and are not familiar with Chef or Puppet,
    you can also use AWS OpsWorks stacks. Next, we will look at the AWS OpsWorks stacks
    service.
  prefs: []
  type: TYPE_NORMAL
- en: AWS OpsWorks stacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By now, you are aware that deploying a single application can be comprised of
    several resources running behind the scenes, including the host EC2 instances
    that the application runs on, backend databases such as Amazon RDS to store the
    application data, load balancers to distribute traffic, and so on. This group
    of related resources is what we call a stack.
  prefs: []
  type: TYPE_NORMAL
- en: A stack is a container for your AWS resources such as your EC2 instances, RDS
    databases, and all the related components, which are logically managed together.
    Each stack will contain at least one layer but can have more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider a typical example that consists of the following three layers
    to support an application:'
  prefs: []
  type: TYPE_NORMAL
- en: A backend database layer, which can either be a self-hosted database solution
    or a managed service such as Amazon RDS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An application layer, which is comprised of EC2 instances or containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A load balancing layer, which hosts your application load balancer to distribute
    traffic to your application layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram illustrates this configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.3 – AWS OpsWorks stacks'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_12_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.3 – AWS OpsWorks stacks
  prefs: []
  type: TYPE_NORMAL
- en: Amazon OpsWorks stacks will not only help you build out your stack but also
    monitor the stack's performance and health, security permissions, and more. With
    AWS OpsWorks stacks, you do not need to create or manage Chef servers as OpsWorks
    stacks performs some of the work for you.
  prefs: []
  type: TYPE_NORMAL
- en: There are two types of layers that AWS OpsWorks stacks uses, both of which we
    will discuss next.
  prefs: []
  type: TYPE_NORMAL
- en: AWS OpsWorks layers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An OpsWorks layer represents a particular service or task as part of your overall
    application stack. For example, your EC2 instances could represent the application
    layer, which is used to host the application. Next, your application load balancer
    will represent the load balancing layer, distributing traffic across the EC2 instances.
    Each layer is comprised of a template that allows you to specify the components
    of the resources that are being provisioned. For example, for the application
    layer, this would include your EC2 instance's security group or IP addressing
    details. You can provision any supported operating system and even add on-premises
    servers to the stack.
  prefs: []
  type: TYPE_NORMAL
- en: AWS OpsWorks stacks does not provision a Chef server or a Puppet Enterprise
    Master server; instead, all the management tasks are performed by AWS OpsWorks
    via the embedded Chef solo client that is installed on Amazon EC2 instances.
  prefs: []
  type: TYPE_NORMAL
- en: Service layers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'AWS OpsWorks can also extend your stack to include service layers, which can
    be used to build a complete multi-tier application solution. These service layers
    can include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon Relational Database Service** (**RDS**): This layer will enable you
    to integrate your application with an existing RDS database deployment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elastic Load Balancing**: This layer will enable you to distribute traffic
    to your fleet of EC2 instances across multiple Availability Zones while offering
    high-availability features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Elastic Container Service** (**ECS**) **cluster**: This layer will
    enable you to create an ECS cluster layer, allowing you to connect your OpsWorks
    stacks to an ECS cluster running your Docker-based applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we looked at the AWS OpsWorks suite of services, which enables
    you to orchestrate application deployment solutions using Chef and Puppet. You
    also learned about the OpsWorks stacks service, which allows you to create and
    manage stacks and applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at the AWS Lambda service and how you can
    use it to automate administrative tasks on AWS.
  prefs: []
  type: TYPE_NORMAL
- en: IT automation with Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 7*](B17124_07_Final_SK_ePub.xhtml#_idTextAnchor157), *AWS Compute
    Services*, we learned that **AWS Lambda** is a serverless compute service that
    allows you to run code without having to provision or manage servers in the cloud.
    With AWS Lambda, you simply upload your code and have it executed based on a specific
    trigger. AWS Lambda will provision all the underlying infrastructure needed to
    run your code, be it compute power, memory, or temporary storage.
  prefs: []
  type: TYPE_NORMAL
- en: Your code can be automatically triggered from various AWS services and SaaS
    applications or even be called directly from any web or mobile application. You
    could use AWS Lambda in conjunction with other serverless offerings such as API
    Gateway, DynamoDB, and the Amazon S3 static website hosting service to build the
    ultimate serverless application for your business or clients.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this, Lambda can also be used to help automate a vast array of
    day-to-day administrative tasks. This can include any repetitive tasks that are
    triggered by a specific event or even on a specific schedule. For example, you
    can automate how firmware updates are installed on hardware devices, start and
    stop EC2 instances, schedule security group updates if you need to make changes,
    and much more.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming exercise in this chapter, we will look at one such use case
    for using AWS Lambda to help you perform the typical administrative task of stopping
    and restarting EC2 instances at regular intervals.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 12.1 – stopping and starting EC2 instances at regular intervals using
    AWS Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine a scenario where you need to run a fleet of on-demand EC2 test servers
    that your **user acceptance testing** (**UAT**) team needs to perform multiple
    functional and technical tests on for an upcoming application that you are developing.
    Your UAT team only works from Monday to Friday, 9 A.M. to 5 P.M. The UAT team
    only needs access to the fleet of test servers during this time. Rather than have
    a technician manually start up all the servers in the morning and shut them down
    again at the end of the business day, you could automate the process using AWS
    Lambda. You would not want to have your on-demand EC2 instances running when they
    are not needed because you are charged for every hour that those servers are running.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we will look at how to configure AWS Lambda to automatically
    stop and then start your EC2 instances at defined schedules.
  prefs: []
  type: TYPE_NORMAL
- en: 'To complete the exercises in this chapter, you will need to download the sample
    IAM policy from this book''s Packt GitHub repository at: [https://github.com/PacktPublishing/AWS-Certified-Cloud-Practitioner-Exam-Guide](https://github.com/PacktPublishing/AWS-Certified-Cloud-Practitioner-Exam-Guide)'
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 - Launching an EC2 instance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this excercise, you will need to deploy an EC2 Instance running
    the Linux 2 AMI:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into the AWS Management Console as the IAM user called **Alice**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the EC2 dashboard. Ensure that you are in the **us-east-1 (N. Virginia)**
    Region.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Instances** from the left-hand menu and then click on the **Launch
    instances** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For **Step 1: Choose an Amazon Machine Image (AMI)**, select the **Amazon Linux
    2** AMI.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For **Step 2: Choose an Instance Type**, select the **t2.micro** instance type
    and click the **Next: Configure Instance Details** button.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For **Step 3: Configure Instance Details**, provide the following key details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Network**, select the default VPC.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For **Subnet**, select the subnet ID that represents the default subnet in **us-east-1a**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the text box next to **Auto-assign Public IP**, ensure that **Enable** is
    selected.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Leave all the remaining options as their default values and click the **Next:
    Add Storage** button at the bottom of the page.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For **Step 4: Add Storage**, leave all the options as their default values
    and click the **Next: Add Tags** button at the bottom of the page.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For `Name`, and for `UAT-Server-01`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, click on the **Next: Configure Security Group** button at the bottom
    of the page.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For **Step 6: Configure Security Group**, ensure that the **Create a new security
    group** option is selected and set **Security group name** to **UAT-SG**. This
    will represent the security group of our UAT test server(s).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you need to configure the inbound rules. You should already have a pre-configured
    inbound rule defined that allows SSH traffic inbound from the internet, as per
    the following screenshot:![Figure 12.4 – Configure Security Group
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_12_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.4 – Configure Security Group
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Review and Launch** button at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page, review your configuration and then click the **Launch** button
    at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be prompted to choose an existing key pair or create a new one. You
    can use the existing key pair you created for the previous exercise. You will
    need to click on the checkbox to acknowledge that you have access to this key
    pair and then click on the **Launch instances** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **View Instances** button to be taken back to the EC2
    dashboard, where you can see the instance you just launched.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Because we will be stopping and starting these EC2 instances using a Lambda
    function, you will need to make a note of the EC2 instance ID, as per the following
    screenshot. Note that your EC2 instance ID will be different from the one shown
    in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.5 – EC2 instance ID'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_12_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.5 – EC2 instance ID
  prefs: []
  type: TYPE_NORMAL
- en: Once your instance is up and running, we can start creating the necessary IAM
    policy and IAM role to enable our Lambda functions to start and stop our EC2 instance.
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 - Creating an IAM policy and execution role for your Lambda function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For your Lambda function to be able to start and stop your EC2 instances, it
    needs to have the necessary permissions. In this step, you will configure an IAM
    policy and an IAM role to enable your Lambda function to perform the start and
    stop operations on your EC2 instances:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the IAM dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the left-hand menu, click on **Policies**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create Policy** button from the right-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **JSON** tab and delete the default JSON text in the editor tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, copy and paste the following JSON policy document into the policy editor
    (you can also download this policy from the Packt GitHub repository for this book
    [https://github.com/PacktPublishing/AWS-Certified-Cloud-Practitioner-Exam-Guide](https://github.com/PacktPublishing/AWS-Certified-Cloud-Practitioner-Exam-Guide)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the **Next: Tags** button at the bottom of the page.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the `Name`, and for `Lambda-EC2-Access-Policy`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Next: Review**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the `Lambda-EC2-Access-Policy`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create policy** button at the bottom of the page. You will receive
    a notification that your policy has been created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you will need to create an IAM role for Lambda. From the left-hand menu,
    click on **Roles**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Create role** from the right-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Create role** page, ensure that the **AWS service** option is selected
    under **Select type of trusted entity**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, under **Choose a use case**, select **Lambda**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Next: Permissions** button at the bottom of the page.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the `Lambda-EC2`, which should filter the list down to the policy you just
    created. Select this policy and click on the **Next: Tags** button at the bottom
    of the page.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the `Name`, and for `Lambda-EC2-Start-Stop-IAM-Role`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the `Lambda-EC2-Start-Stop-IAM-Role`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create role** button at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will get a notification, stating that the IAM role has been created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that your role has been created, you can create Lambda functions to stop
    and start your EC2 instances.
  prefs: []
  type: TYPE_NORMAL
- en: Step 3 - Creating Lambda functions that stop and start your EC2 instances
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s create a Lambda function to stop and start your EC2 instance at
    a predefined schedule:'
  prefs: []
  type: TYPE_NORMAL
- en: From the **Services** drop-down list at the top of the AWS Management Console
    page, select **Lambda**, which is located under the **Compute** category.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the left-hand menu, click on **Functions**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create function** button in the right-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Author from scratch** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under `StopEC2Instances`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Runtime**, select **Python 3.8**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, under **Permissions**, expand **Change default execution role**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Execution role**, select **Use an existing role**. Next, from the **Existing
    role** drop-down list, select the IAM role you created earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create function** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be redirected to the **StopEC2Instances** function page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, in the `StopEC2Instance` folder and double-click on the `lambda_function.py`
    file. In the right-hand pane, you will notice some sample code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Delete the sample code and replace it with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, you will notice that the sample code refers to two EC2 instances. Replace
    this with the instance ID of the server you deployed in *Step 1 - Launching an
    EC2 instance* of this exercise, ensuring that the instance ID is placed within
    single quotes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Configuration** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Edit** button from the **General configuration** pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, set the timeout value to 10 seconds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button. This will take you back to the **Function** page.
    Click the **Code** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Recheck your Lambda code and ensure that you have made all the preceding changes.
    Next, click on the **Deploy** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If necessary, click on the ellipsis icon in the far left-hand pane to bring
    up the main menu and click on the **Function** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now see a list of your functions, which will include the `StopEC2Instances`
    function you just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *Steps 1* to *15* to create another function. This time, you will be
    creating a function to start your EC2 instances. For *Step 5*, enter a different
    function name than the one you used before; for example, **StartEC2Instances**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For *Step 9*, copy and paste the following code into the editor pane, remembering
    to delete the sample code that is already there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember to also change the Region to `us-east-1` and amend the instance ID
    to the ID of your EC2 instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have deployed your function, go back to the list of functions by clicking
    on the link from the left-hand menu (if necessary, by first clicking on the ellipsis
    icon).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now have two functions that will be used to stop and start your
    EC2 instances, as per the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.6 – Functions'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_12_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.6 – Functions
  prefs: []
  type: TYPE_NORMAL
- en: Next, you will create CloudWatch event rules to help you execute the Lambda
    functions at scheduled times. We discussed CloudWatch events briefly in [*Chapter
    13*](B17124_13_Final_SK_ePub.xhtml#_idTextAnchor317)*, Management and Governance
    on AWS*. We will look at CloudWatch in more detail in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 - Creating CloudWatch event rules to trigger your Lambda functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this step, you will learn how to create CloudWatch event rules to trigger
    your Lambda functions at a given schedule:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the CloudWatch dashboard. You can either search for CloudWatch from
    the top search bar of the AWS Management Console page or click the **CloudWatch**
    link from the **Management & Governance** category in the list of services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the left-hand menu, click on **Rules**, under **Events**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create rule** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For **Step 1: Create rule**, select **Schedule** under **Event Pattern**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select **Cron expression**. A CRON expression is a string comprised of
    six fields separated by white spaces that represent a set of times. These can
    be used as a schedule to execute a particular task regularly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the text field next to **Cron expression**, you will need to type in an expression
    that tells Lambda when to stop your instances. To learn more about how to define
    your expressions, visit [https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For this exercise, we wish to stop our EC2 instances at 6 P.M. Our UAT testers
    normally leave work at 5 P.M., but just in case anyone decides to work a bit late,
    we can execute the Lambda Stop function at 6 P.M.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The cron expression that you can use to execute the Lambda Stop function is
    **0 18 ? * MON-FRI ***. This will also display the next 10 triggers and their
    time of execution, as per the following screenshot:![Figure 12.7 – AWS CloudWatch
    event rule cron expression
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_12_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.7 – AWS CloudWatch event rule cron expression
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, click on the **Add target** button under **Targets**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the drop-down list that appears, select **Lambda function**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the drop-down list next to **Function**, select the **StopEC2Instances**
    function. As you may recall, this is a Lambda function that will stop your EC2
    instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Configuration details** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For `StopUATInstances`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Stops UAT instances at 6 PM Monday to Friday`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click the **Create rule** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *Steps 3* to *15* to start your EC2 instances. For this rule, ensure
    that, in *Step 6*, for `StartUATInstances` for the name and for the description,
    `Starts UAT instances at 8 AM Monday to Friday`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, you have ensured that your scheduled events automatically trigger
    the relevant Lambda functions, as per the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.8 – CloudWatch event rules'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_12_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.8 – CloudWatch event rules
  prefs: []
  type: TYPE_NORMAL
- en: You can wait for the designated times to check whether your EC2 instance has
    been stopped and then restarted. Alternatively, you can just test your Lambda
    function, which is what we will be doing next.
  prefs: []
  type: TYPE_NORMAL
- en: Step 5 - Testing your Lambda function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can test our Lambda function rather than waiting for the scheduled times
    to see whether the functions work:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate back to the Lambda dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the left-hand menu, select **Functions**. Then, from the right-hand pane,
    select the **StopEC2Instances** function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the **Actions** drop-down list, select **Test**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **StopEC2Instances**, click on the **Test** button in the **Test event**
    pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If the function has been configured correctly, you should see the **Execution
    result: succeeded** message and an option to expand the **Details** pane. This
    will provide details of the execution, as per the following screenshot:![Figure
    12.9 – The Lambda function''s execution details'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_12_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.9 – The Lambda function's execution details
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In another browser window, navigate to your EC2 dashboard. Here, you should
    find that your EC2 instance has been stopped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to the AWS Lambda browser tab and click on **Functions** from the far
    left-hand menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *Steps 2* to *5*, this time selecting the **StartEC2Instances** function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within a few seconds, you should find that the function was executed successfully,
    and you can cross-reference this with the EC2 dashboard. You should find that
    your EC2 instance has started again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this exercise, you learned how to create Lambda functions that can be used
    to perform repetitive IT tasks for your organization and help automate various
    processes. You also learned how to schedule those repetitive tasks using AWS CloudWatch
    event rules and cron expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 12.2 – cleaning up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, you will terminate your EC2 instance and delete your Lambda
    functions to avoid any unnecessary charges to your AWS account:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the EC2 dashboard and ensure that you are in the **us-east-1** (North
    Virginia) Region.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Instances** from the left-hand menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the right-hand pane, under **Instances**, select the EC2 instance you launched
    earlier. Then, from the **Instance state** drop-down menu, click **Terminate instance**.
    Confirm that you wish to terminate the instance; AWS will terminate it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, navigate to the Lambda dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Functions** from the left-hand menu. In the right-hand pane, for
    each function, select the function. Then, from the **Actions** drop-down list,
    click **Delete**. Click the **Delete** button in the pop-up dialog box to delete
    the function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, navigate to the CloudWatch management console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the left-hand menu, click on **Rules**, under **Events**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For each rule, select the rule. Then, from the **Actions** drop-down list, click
    **Delete**. Click the **Delete** button in the pop-up dialog box to delete the
    rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your resources have now been removed from your AWS accounts. In the next section,
    we will provide a summary of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS offers numerous services and tools to help you architect efficient application
    deployment strategies with a focus on the application rather than the underlying
    infrastructure that supports it. Amazon Elastic Beanstalk helps your developers
    focus on the application code rather than how to go about configuring every minute
    infrastructure component to support it.
  prefs: []
  type: TYPE_NORMAL
- en: AWS also offers you tools to build end-to-end infrastructure components using
    an IaC approach, which drastically improves speed and agility and reduces the
    human error element that manual configurations are prone to. AWS CloudFormation
    is an intelligent tool that accepts code in its declarative form to help an architect
    complete infrastructure deployments.
  prefs: []
  type: TYPE_NORMAL
- en: You also learned how to automate day-to-day administrative tasks using serverless
    **Function-as-a-Service** (**FaaS**) tools such as AWS Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at various management and governance tools
    that will help you efficiently manage your AWS resources and design for better
    performance, security, and operations.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Which AWS service automatically provisions the necessary infrastructure (for
    example, load balancing, auto-scaling, and health monitoring) and enables developers
    to automatically deploy an application's built-in supported languages such as
    Node.js, PHP, and Python?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS CloudFormation
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Lambda
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Elastic Beanstalk
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Deployer
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You work for a web application development company and have been asked to design
    an infrastructure solution that can be repeatedly created using scripted templates.
    This will allow you to create individual sandbox environments for your developers
    to use. Some infrastructure components will include the setup and configuration
    of a VPC, EC2 instances, S3 buckets, and more. Which AWS service enables you to
    design an infrastructure template that can be deployed to create repeatable infrastructure
    for your developers to use as a sandbox environment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Systems Manager
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS CloudFormation
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Config
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS FSx for Lustre
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which two file formats are used when creating CloudFormation templates? (Choose
    2.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JSON
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: YAML
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: XML
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: HTML
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Java
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which AWS service provides integration with Chef recipes to start new application
    instances, configure application server software, and deploy the application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon CloudFormation
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon Elastic Beanstalk
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon OpsWorks
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon Cookbook.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which type of environment do you need to configure for an Elastic Beanstalk
    deployment to host backend application layer services?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Web server environment tier
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Worker environment tier
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Backend environment tier
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Hybrid environment
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which feature of the Amazon CloudFormation service enables you to review any
    proposed changes you wish to make to an environment and identify how those changes
    will impact your environment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drift detection
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change sets
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Stack sets
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change management
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
