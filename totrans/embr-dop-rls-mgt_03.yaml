- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: What Are the Various SDLC Release Management Models?
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 各种SDLC发布管理模型是什么？
- en: 'Software development teams can organize their work using various **frameworks**
    or **release management models**. These models help organizations implement the
    **software development life cycle** (**SDLC**) using different strategies to accomplish
    the same result. A release management model contains individual phases that software
    developers use to organize their work while delivering a software product or feature.
    Generally speaking, each model contains the following six phases: **change request**,
    **planning**, **design & build**, **testing**, **deployment**, and **release support**.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发团队可以使用各种**框架**或**发布管理模型**来组织他们的工作。这些模型帮助组织实施**软件开发生命周期**（**SDLC**），通过不同的策略实现相同的结果。一个发布管理模型包含软件开发人员用来组织工作并交付软件产品或功能的各个阶段。一般而言，每个模型包含以下六个阶段：**变更请求**、**规划**、**设计与构建**、**测试**、**部署**和**发布支持**。
- en: 'Release management models ensure that high-quality software is produced according
    to customer requirements. Various release management methodologies have been created
    to serve this purpose, such as ITIL, waterfall, iterative, V-model, spiral, big
    bang, agile, and DevOps, but there are several less popular ones that aren’t within
    the scope of this book. Let’s review some of the most commonly used SDLC release
    management models:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 发布管理模型确保根据客户需求生产高质量的软件。为了实现这一目标，创建了各种发布管理方法论，如ITIL、瀑布模型、迭代模型、V模型、螺旋模型、大爆炸模型、敏捷和DevOps，但有一些较不流行的模型不在本书的范围之内。我们来回顾一下最常用的SDLC发布管理模型：
- en: The ITIL model
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ITIL模型
- en: The waterfall model
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瀑布模型
- en: The iterative model
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迭代模型
- en: The V-model
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: V模型
- en: The spiral model
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 螺旋模型
- en: The big bang model
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大爆炸模型
- en: The agile model
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏捷模型
- en: The DevOps model
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps模型
- en: The ITIL model
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ITIL模型
- en: 'The British Government’s **Central Computing and Telecommunications Agency**
    (**CCTA**) created the **Information Technology Infrastructure Library** (**ITIL**)
    model: a set of best practices for IT activities, such as **IT service management**
    (**ITSM**) and **IT asset management** (**ITAM**), having its origins in the early
    1980s. These practices are centered on the concept of aligning IT services with
    the requirements of a company’s operations. In the year 2000, the CCTA merged
    into Great Britain’s **Office for Government** **Commerce** (**OGC**).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 英国政府的**中央计算机和电信机构**（**CCTA**）创建了**信息技术基础设施库**（**ITIL**）模型：一套用于IT活动的最佳实践，如**IT服务管理**（**ITSM**）和**IT资产管理**（**ITAM**），其起源可以追溯到1980年代初期。这些实践的核心理念是将IT服务与公司运营的需求对齐。2000年，CCTA并入了英国的**政府商业办公室**（**OGC**）。
- en: In their infancy, enterprise IT departments were regarded as cost centers by
    senior leadership, rather than the value multipliers that they are. At that time,
    many firms had no established protocols for obtaining services or reporting IT
    incidents, and IT and business communication was poor. As a result, many firms’
    leadership believed IT did not create value or meet company-wide objectives. As
    enterprise IT departments began proliferating, they understood that they needed
    to prove how valuable they were by meeting measurable outcomes defined by the
    business.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在初期，企业IT部门被高级领导视为成本中心，而不是它们所具备的价值增值者。当时，许多公司没有建立获取服务或报告IT事件的协议，IT与业务的沟通也较差。因此，许多公司的领导认为IT没有创造价值或达成公司目标。随着企业IT部门的逐渐增多，他们意识到必须通过满足业务定义的可衡量结果来证明自身的价值。
- en: With the advent of the ITSM paradigm, businesses’ attention shifted from IT
    *departments* to the management and fulfillment of IT *services*. ITSM was new
    to IT professionals, who were treated as a separate entity, while the business
    unit was treated as their client. To serve clients, IT provides services supported
    by technological resources and expertise. So, to demonstrate value, IT must supply
    these services at established service level agreements and fulfill strategic business
    needs.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 随着ITSM范式的出现，企业的注意力从IT*部门*转移到了IT*服务*的管理和履行。ITSM对于IT专业人士来说是新鲜的，他们被视为一个独立的实体，而业务单元则被视为他们的客户。为了服务客户，IT提供由技术资源和专业知识支持的服务。因此，为了展示价值，IT必须按照既定的服务水平协议提供这些服务，并满足战略业务需求。
- en: ITIL guides IT service management across all service life cycles. At its core,
    ITIL is a framework for managing an organization’s IT infrastructure in order
    to achieve strategic goals, generate business value, and ensure a baseline of
    competence. A company can then use this benchmark as a starting point for future
    planning, implementation, and evaluation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: ITIL指导整个服务生命周期中的IT服务管理。其核心是一个框架，用于管理组织的IT基础设施，从而实现战略目标、创造商业价值并确保基本的能力标准。公司可以利用这一基准作为未来规划、实施和评估的起点。
- en: 'As you have probably already inferred by now, the **ITIL release management
    model** has more to do with *systems development* than software development. That
    being said, ITIL is recognized as one of the earliest and most widely implemented
    release management models used in enterprise environments. Despite ITIL being
    an outlier in the release management of software, just be aware of what ITIL is
    and how it fits into the overall release management ecosystem. Now, let’s look
    at the two most recent versions of ITIL: V3 and V4.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你现在可能已经推测到的，**ITIL发布管理模型**更多地与*系统开发*相关，而非软件开发。话虽如此，ITIL被认为是企业环境中最早且最广泛实施的发布管理模型之一。尽管ITIL在软件发布管理中是一个特例，但要了解ITIL是什么，以及它如何融入整体发布管理生态系统。现在，让我们来看看ITIL的两个最新版本：V3和V4。
- en: ITIL 3
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ITIL 3
- en: The OGC made significant advancements in its strategy for IT Service Management
    (ITSM) and provided updated guidance that exceeded the depth and comprehensiveness
    of ITIL version 2\. ITIL version 3 was released to the general public in 2007
    and was structured as a compilation of five distinct stages within the service
    life cycle. These stages include *service strategy*, *service design*, *service
    transition*, *service operation*, and *continuous* *service improvement*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: OGC在其IT服务管理（ITSM）战略上取得了重大进展，并提供了超越ITIL版本2的深度和全面性的更新指导。ITIL版本3于2007年向公众发布，结构上是将服务生命周期划分为五个独立的阶段。这些阶段包括*服务战略*、*服务设计*、*服务过渡*、*服务运营*和*持续的*
    *服务改进*。
- en: 'Each of the five stages is intended to cover a certain stage of the service
    life cycle, which can be summarized as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 每个阶段都旨在涵盖服务生命周期的特定阶段，可以总结如下：
- en: '**Service strategy**: To make a plan for better serving customers. The service
    strategy process, which begins with an analysis of customer requirements and market
    conditions, establishes the services to be provided by the IT organization and
    the capabilities to be built. The end goal is to shift the IT department’s mindset
    toward one of strategic planning and execution.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务战略**：制定更好服务客户的计划。服务战略过程从分析客户需求和市场状况开始，建立IT组织要提供的服务以及要构建的能力。最终目标是将IT部门的思维方式转变为战略规划和执行的思维方式。'
- en: '**Service design**: To develop new information technology (IT) services. The
    breadth of the process encompasses both the creation of new services and the modification
    and enhancement of existing ones.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务设计**：开发新的信息技术（IT）服务。该过程的广度涵盖了新服务的创建以及现有服务的修改和增强。'
- en: '**Service transition**: To create and release computer systems. Changes to
    services and service management procedures are implemented in a coordinated way,
    which is another responsibility of the service transition function.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务过渡**：创建和发布计算机系统。对服务和服务管理流程的变更以协调的方式实施，这是服务过渡职能的另一个职责。'
- en: '**Service operation**: To make sure that IT services are provided well and
    quickly. In the service operation process, users’ requests are met, service failures
    are fixed, problems are fixed, and routine operating tasks are done.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务运营**：确保IT服务得以良好且迅速地提供。在服务运营过程中，满足用户需求、修复服务故障、解决问题以及完成日常操作任务。'
- en: '**Continual service improvement**: To apply quality management techniques to
    gain insight into both present and past performance. The purpose of the continual
    service improvement process is to implement the concept of continuous improvement
    adopted by ISO 20000 into IT processes and services in order to maximize their
    effectiveness and efficiency.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续服务改进**：应用质量管理技术深入了解当前和过去的表现。持续服务改进过程的目的是将ISO 20000采纳的持续改进概念应用于IT过程和服务，以最大化其有效性和效率。'
- en: 'The following figure depicts the stages of the ITIL V3 release management model:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了ITIL V3发布管理模型的各个阶段：
- en: '![Figure 3.1: The ITIL V3 release management model](img/B21803_03_1.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图3.1：ITIL V3 发布管理模型](img/B21803_03_1.jpg)'
- en: 'Figure 3.1: The ITIL V3 release management model'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1：ITIL V3 发布管理模型
- en: This concludes our look at ITIL V3\. We are observing both ITIL V3 and ITIL
    V4 because they diverge somewhat significantly from each other. It is notable
    that ITIL V4 is a recent addition and its process diagram doesn’t capture the
    same heritage that earlier editions of ITIL were known for. ITIL V4’s departure
    comes with a shift in focus to being a more flexible service framework, rather
    than being a rigid IT service management model.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们对 ITIL V3 的介绍。我们同时观察 ITIL V3 和 ITIL V4，因为它们之间有一些显著的差异。值得注意的是，ITIL V4 是一个最近的更新版本，其过程图并没有保留
    ITIL 早期版本所著名的传统。ITIL V4 的变化带来了更具灵活性的服务框架，而不再是一个僵化的 IT 服务管理模型。
- en: ITIL 4
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ITIL 4
- en: There hasn’t been a significant revision of ITIL since 2007; therefore, **ITIL
    4** could represent a reaction to the rise in competing service management frameworks
    such as **VeriSM™**, **SIAM®**, and **FitSM**. It’s an updated and expanded version
    of **ITIL V3** (also known as **ITIL 2011**) that can serve as a flexible foundation
    for enterprises undergoing digital transformation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2007 年以来，ITIL 没有进行过重大修订；因此，**ITIL 4** 可能是对竞争性服务管理框架如 **VeriSM™**、**SIAM®**
    和 **FitSM** 兴起的回应。它是 **ITIL V3**（也称为 **ITIL 2011**）的一个更新和扩展版本，能够作为企业进行数字化转型的灵活基础。
- en: ITIL version 4 outlines a process framework for providing IT-enabled products
    and services. There have been extensive edits made to the documentation to make
    it more readable, and several examples have been added. ITIL 4 also considers
    contemporary practices in software engineering and information technology administration
    by providing guidance on using methodologies such as Agile, DevOps, and Lean in
    the context of service management. Finally, ITIL 4 emphasizes that it is *a framework
    for service management* (rather than *IT service management*), which reflects
    the expanding use of service management best practices outside of the IT industry.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: ITIL 版本 4 概述了为 IT 支持的产品和服务提供服务的过程框架。文档经过了大量修改，以使其更加易读，并且添加了多个示例。ITIL 4 还考虑了现代软件工程和信息技术管理实践，提供了使用敏捷（Agile）、开发运维（DevOps）和精益（Lean）等方法论在服务管理中的应用指导。最后，ITIL
    4 强调它是 *服务管理框架*（而不是 *IT 服务管理*），这反映了服务管理最佳实践在 IT 行业之外的广泛应用。
- en: It’s important to remember that, although ITIL is indeed a release management
    methodology, it has more in common with the system development life cycle than
    the software development life cycle. It is for this reason that ITIL appears first
    on our list. Now, let’s turn our attention to the waterfall release management
    model. The waterfall model is the original release management standard for organizing
    projects that focus on building information systems. The waterfall model came
    into existence during the pivotal years when engineers were transitioning from
    programming computers with switchboards and cables to using logical sequences
    of holes that were etched out of punch cards. This marked the first time in history
    that programs could be authored and managed independently of physical machines.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的是，虽然 ITIL 确实是一种发布管理方法论，但它与系统开发生命周期的相似性超过了与软件开发生命周期的相似性。正因为如此，ITIL 排在我们的列表首位。现在，让我们将注意力转向瀑布式发布管理模型。瀑布式模型是最初用于组织专注于构建信息系统的项目的发布管理标准。瀑布式模型诞生于那个关键时期，当时工程师们正从用开关板和电缆编程计算机过渡到使用穿孔卡片上刻出的逻辑序列。这标志着历史上首次可以独立于物理机器编写和管理程序。
- en: The waterfall model
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 瀑布式模型
- en: The **waterfall** model is a method for organizing the phases of a project in
    a linear, sequential order. This means that each phase builds on the deliverables
    of the one that came before it and corresponds to a different level of task specialization.
    This method is frequently used in a number of engineering design specializations.
    Since progress is made in mostly one direction (*downwards*, like a waterfall),
    this methodology is typically considered to be one of the least iterative and
    adaptable models in software development. The reason for this is that a team can
    only move forward in the waterfall process, never backward. This linear progression
    of immutable phases includes *requirements gathering & analysis*, *system design*,
    *implementation*, *testing*, *deployment*, and *maintenance*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**瀑布**模型是一种将项目阶段按线性顺序组织的方法。这意味着每个阶段建立在前一个阶段的交付成果基础上，并对应于不同的任务专业化层次。这种方法在多个工程设计领域中得到了广泛应用。由于进展大多是单向的（*向下*，就像瀑布一样），这种方法通常被认为是软件开发中最不具备迭代性和适应性的模型之一。原因在于，团队只能在瀑布过程中向前推进，无法回退。这个不可变阶段的线性进展包括*需求收集与分析*、*系统设计*、*实施*、*测试*、*部署*和*维护*。'
- en: The waterfall model was the very first kind of release management SDLC to be
    used in software development. The manufacturing and construction sectors are credited
    with being the birthplace of the waterfall development model. In these industries,
    highly organized environments meant that making design modifications became prohibitively
    expensive earlier in the fabrication process. When it was first implemented for
    the development of software, there were no acknowledged alternatives for knowledge-based
    creative work.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布模型是第一个用于软件开发中的发布管理SDLC。制造业和建筑业被认为是瀑布开发模型的发源地。在这些行业中，高度组织化的环境意味着在制造过程中，进行设计修改会变得极其昂贵。最初在软件开发中实施时，并没有公认的替代方案来进行基于知识的创意工作。
- en: The waterfall release management approach has received significant backlash
    as a result of its flaws. Before they see functional software, clients might not
    know exactly what their requirements are, which might lead them to change their
    requirements after the fact. This would result in the need for redesign, redevelopment,
    and retesting, which would drive up expenses. Software engineers and business
    developers may lack the foresight of the potential challenges that may arise throughout
    the design process of a new software product or feature. In such instances, it
    is advisable to reassess the design rather than continue with a design that doesn’t
    take into account any newly identified limitations, prerequisites, or issues.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布发布管理方法因其缺陷而遭遇了显著的反对。在客户看到功能软件之前，他们可能并不完全了解自己的需求，这可能导致他们在事后更改需求。这将导致需要重新设计、重新开发和重新测试，从而推高成本。软件工程师和业务开发人员可能缺乏对新软件产品或功能设计过程中可能出现的潜在挑战的预见。在这种情况下，最好重新评估设计，而不是继续执行一个未考虑到任何新发现的限制、前提条件或问题的设计。
- en: 'Every phased process can be better understood after viewing a diagram depicting
    its stages and the way they flow. Observing the waterfall release management model
    as a diagram certainly makes it easy to understand how its linear sequences of
    immutable steps give the waterfall model its name:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 每个阶段性的过程在查看其各个阶段及流程图后，能够更好地理解。观察瀑布发布管理模型的图示，确实能轻松理解它的不可变步骤的线性顺序是如何赋予瀑布模型这一名称的：
- en: '![Figure 3.2: The six phases of the waterfall release management model](img/B21803_03_2.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图3.2：瀑布发布管理模型的六个阶段](img/B21803_03_2.jpg)'
- en: 'Figure 3.2: The six phases of the waterfall release management model'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2：瀑布发布管理模型的六个阶段
- en: As you can see, the waterfall release management model is well suited to organizing
    a large effort, involving hundreds or even thousands of developers on a single
    project. Now that you have a fundamental understanding of the waterfall release
    management model, you are well equipped to grasp the concepts of the more advanced
    release management models that came after it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，瀑布发布管理模型非常适合组织一个庞大的工作，涉及数百甚至数千名开发人员在同一个项目中。现在你已经对瀑布发布管理模型有了基本的了解，你也能很好地理解后续更先进的发布管理模型的概念。
- en: The next release management model that we will investigate is the *iterative
    and incremental* model, commonly referred to as simply the **iterative** model.
    This method involves constructing a system in small, incremental steps, or iterations.
    This release management model is one of the earliest and closest competitors of
    the waterfall model, getting its start in around 1960\. It is for this reason
    that we will be discussing the Iterative and Incremental release management model
    next.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来将研究的发布管理模型是*迭代增量*模型，通常简称为**迭代**模型。该方法通过小步增量的方式，或称为迭代，来构建系统。这个发布管理模型是瀑布模型的最早和最直接的竞争者之一，起源于大约1960年。因此，我们将接着讨论迭代增量发布管理模型。
- en: The iterative model
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迭代模型
- en: 'The concept behind this technique is to build a system in small, incremental
    steps, or *iterations*, so that software engineers can benefit from the lessons
    learned while building the system’s previous versions. Learning occurs throughout
    system development and use, where essential steps may begin with a rudimentary
    implementation of a subset of software requirements and iteratively improve until
    the whole system is implemented. Modifications to the design and new features
    are incorporated after each iteration of the development cycle, as shown:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这一技术的概念是通过小步增量的方式，或称为*迭代*，构建系统，以便软件工程师能够从构建系统先前版本的经验中受益。在系统开发和使用过程中，学习不断发生，关键步骤可能从软件需求的子集的初步实现开始，通过迭代的方式逐步改进，直到整个系统实现。设计的修改和新功能会在每次迭代开发周期后融入系统，如下所示：
- en: '![Figure 3.3: The iterative and incremental release management model](img/B21803_03_3.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图3.3：迭代增量发布管理模型](img/B21803_03_3.jpg)'
- en: 'Figure 3.3: The iterative and incremental release management model'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3：迭代增量发布管理模型
- en: 'The exact technique is broken down into three steps: the **initialization phase**,
    the **iteration step**, and the **project control list**. The system’s starting
    point is built during initialization. In this first stage of development, we want
    to give the user something that they can give feedback to. It should provide a
    comprehensive overview of the issue and a straightforward solution. A project
    control list is compiled at the beginning of each iteration to serve as a record
    of all outstanding tasks. It entails things like reworking parts of the current
    solution or adding brand-new functionality. The analysis step results in consistent
    updates to the control list.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 该技术具体分为三个步骤：**初始化阶段**、**迭代步骤**和**项目控制清单**。系统的起始点在初始化过程中构建。在开发的第一阶段，我们希望提供给用户一些可以反馈的内容。它应该提供对问题的全面概述和直接的解决方案。在每次迭代开始时都会编制项目控制清单，以记录所有未完成的任务。它包括重新设计当前解决方案的部分内容或添加全新的功能等内容。分析步骤将导致控制清单的持续更新。
- en: The **redesign** and **implementation** of an iteration should be easy to understand
    and apply, either during the iteration itself or as a separate job added to the
    project’s control list. The iterative method does not mandate a specific granularity
    in the design. However, in a key iterative project, a formal software design document
    may be utilized to supplement the code as the primary source of documentation
    for the system. An iteration’s analysis is based on user feedback and the program
    analysis tools available. It entails an examination of the structure, modularity,
    usability, dependability, efficiency, and attainment of goals. The project control
    list is updated based on the findings of the research.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代的**重新设计**和**实施**应该易于理解和应用，无论是在迭代过程中还是作为一个单独的任务添加到项目的控制清单中。迭代方法并不要求设计具有特定的粒度。然而，在关键的迭代项目中，可能会使用正式的软件设计文档来补充代码，作为系统文档的主要来源。迭代的分析基于用户反馈和可用的程序分析工具。这包括对结构、模块化、可用性、可靠性、效率和目标达成情况的检查。项目控制清单会根据研究结果进行更新。
- en: With iterative development, your team will make incremental improvements and
    tweaks to the software until it is fully functional. Each iteration should aim
    to better the product as a whole, not just produce a new feature or functional
    component. Iterative style management allows for adjustments to be made to the
    project as needed to ensure success. This helps the development group take any
    unforeseen shifts in direction into consideration, whether positive or negative.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在迭代开发中，您的团队将对软件进行逐步改进和调整，直到其完全功能化。每次迭代应旨在提升整体产品，而不仅仅是产生一个新的功能或组件。迭代式管理风格允许根据需要对项目进行调整，以确保成功。这有助于开发团队考虑任何未预见的方向变化，无论是正面还是负面。
- en: A competent iterative project manager must be able to make these adjustments
    as the project progresses with minimal disruption to the crew and with an ear
    for the feedback of other team members in order to ensure that the schedule and
    budget remain attainable. Additionally, faults and difficulties can be recognized
    and fixed earlier, saving time and money. When you regularly provide viable product
    increments, it allows consumers to submit feedback sooner, resulting in superior
    software that is relevant to the needs of users. There won’t be any last-minute
    adjustments or frantic attempts at fulfilling unachievable deadlines if the product
    is managed in an iterative and incremental style.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一位合格的迭代项目经理必须能够在项目进展过程中进行这些调整，同时尽量减少对团队的干扰，并关注其他团队成员的反馈，以确保项目的进度和预算可控。此外，问题和困难可以及早识别并修复，从而节省时间和金钱。当您定期提供可行的产品增量时，消费者可以更早地提交反馈，从而产生更符合用户需求的优秀软件。如果产品以迭代和增量的方式进行管理，就不会出现最后一分钟的调整或匆忙满足不切实际的截止日期。
- en: This concludes our look at the iterative and incremental release management
    model. As you can now infer, the iterative and incremental model is shockingly
    similar to the agile release management model that came decades later, which we
    will cover later in this chapter. Now, let’s change gears and shift our focus
    to the V-shaped release management model.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们对迭代和增量发布管理模型的介绍。如您所见，迭代和增量模型与几十年后出现的敏捷发布管理模型非常相似，我们将在本章后续部分讨论它。现在，让我们换个角度，将重点转向V型发布管理模型。
- en: The V-model
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: V模型
- en: 'The **V-model** gets its name from its resemblance to the letter *V*. This
    SDLC release management model is partitioned into stages in the V-model, with
    each stage having its own dedicated testing phase. The V’s left side represents
    the verification stage, while the V’s right side represents the validation stage.
    The V-model is a graphical depiction of the phases involved in creating a system
    and it is used to construct rigorous models for project management and development
    life cycles. The following figure shows the V-model:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**V模型**得名于它与字母*V*的相似性。这个SDLC发布管理模型在V模型中被分为多个阶段，每个阶段都有自己的专门测试阶段。V模型的左侧代表验证阶段，而V模型的右侧代表确认阶段。V模型是创建系统过程中各阶段的图示，它用于构建项目管理和开发生命周期的严格模型。下图展示了V模型：'
- en: '![Figure 3.4: The V-shaped release management model](img/B21803_03_4.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4：V型发布管理模型](img/B21803_03_4.jpg)'
- en: 'Figure 3.4: The V-shaped release management model'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4：V型发布管理模型
- en: The V-model provides a high-level overview of the major activities and their
    associated outputs in a computerized system validation framework, sometimes known
    as project life cycle development. It specifies the activities that must be carried
    out and the deliverables that must be generated during product development.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: V模型提供了计算机化系统验证框架中的主要活动及其相关输出的高级概述，有时也称为项目生命周期开发。它指定了在产品开发过程中必须进行的活动和必须生成的交付物。
- en: The process of breaking down requirements and developing system specifications
    is depicted on the V’s left side. Integrating and validating individual components
    is represented by the V’s right side. However, requirements have to go through
    a validation process first, where they are compared to higher-level requirements
    or user demands. In addition, there is a concept known as system model validation.
    You can also accomplish this by shifting left, meaning that it’s possible that
    the claim that validation only occurs on the right side is inaccurate, depending
    on how the team operates.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 需求分解和系统规范制定的过程表现为V模型的左侧。单独组件的集成和验证表现为V模型的右侧。然而，需求首先需要经过验证过程，在此过程中它们会与更高层次的需求或用户需求进行比较。此外，还有一个叫做系统模型验证的概念。你也可以通过“左移”来完成这一过程，这意味着根据团队的操作方式，验证只在右侧发生的说法可能并不准确。
- en: Time and development in the V-model progress from left to right, and there is
    no way to reverse the process. As can be seen in the diagram, all iteration occurs
    vertically, either going up or down the framework’s architecture. The two processes
    are distinguished by the fact that verification is done in accordance with predefined
    technical specifications, while validation is done in accordance with actual world
    conditions or user requirements. You can validate by ensuring that you are building
    the correct thing and verifying that you are building it the correct way.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在V模型中，时间和开发从左至右推进，且无法倒退。正如图中所示，所有迭代都发生在垂直方向上，要么向上，要么向下在框架的架构中进行。这两个过程的区别在于，验证是根据预定义的技术规范进行的，而确认是根据实际的世界条件或用户需求进行的。你可以通过确保你正在构建正确的东西来验证，并通过确保你在以正确的方式构建它来确认。
- en: The spiral model
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 螺旋模型
- en: In 1986, Barry W. Boehm created the **spiral** release management model as a
    method for organizing the SDLC. It assumes that building an app is a cycle that
    may be repeated indefinitely until the desired result is achieved. By continuously
    monitoring risks and inspecting the intermediate product, the spiral model significantly
    reduces the likelihood of failure in large software projects.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 1986年，**巴里·W·博姆**创建了螺旋发布管理模型，作为组织软件开发生命周期（SDLC）的一种方法。该模型假设构建一个应用程序是一个可以无限重复的周期，直到达到预期的结果。通过持续监控风险和检查中间产品，螺旋模型显著降低了大型软件项目失败的可能性。
- en: Issues that arise during the course of the development process have a variety
    of potential impacts on the finished product. If such an outcome occurs, you should
    prepare for an increase in prices, an increase in work, and a delay in the delivery
    date. These are all elements that have the potential to quickly become a threat
    to the sustainability of your company. The iterative and gradual approach that
    the spiral model takes, in addition to the regular risk assessment that can take
    the form of prototype drafts, studies, or simulations, is designed to either eliminate
    the possibility of events like this entirely or at least reduce the severity of
    the damage they do. Spiral software development is popular for large, highly customized
    projects where customers and developers prioritize financial management or projects
    in highly volatile markets. The spiral model’s biggest advantage over other conventional
    models is risk analysis, which benefits all involved. Regular risk assessments
    are especially important in innovative technical environments that lack empirical
    values and have a higher risk probability.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中出现的问题可能会对最终产品产生多种潜在影响。如果发生这种情况，你应当为价格上涨、工作量增加以及交付日期延迟做好准备。这些都是可能迅速威胁到公司可持续性的因素。螺旋模型采取的迭代渐进方式，以及常规的风险评估（可以通过原型草图、研究或仿真来实现），旨在要么彻底消除此类事件的可能性，要么至少减少它们造成的损害。螺旋软件开发模型非常适用于大型、高度定制的项目，尤其是客户和开发者将财务管理作为优先事项，或是在高度波动的市场中的项目。与其他传统模型相比，螺旋模型的最大优势是风险分析，这对所有相关方都有益。常规的风险评估对于缺乏经验值且具有较高风险概率的创新技术环境尤为重要。
- en: '![Figure 3.5: The spiral release management model](img/B21803_03_5.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.5: 螺旋发布管理模型](img/B21803_03_5.jpg)'
- en: 'Figure 3.5: The spiral release management model'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3.5: 螺旋发布管理模型'
- en: 'The software development project goes through its spiral model cycle in an
    ongoing manner until it reaches its final status. The cycle consists mostly of
    the following four steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发项目会持续进行其螺旋模型周期，直到达到最终状态。这个周期主要包括以下四个步骤：
- en: The first phase of a typical cycle in a spiral model is to determine which goals
    ought to be associated with the various stages of software development. Increasing
    the functionality or enhancing the performance are both examples of this type
    of change. At the same time, it is required to specify several implementation
    choices (for example, design A against design B) as well as to determine the framework
    conditions and the expenses or the amount of time that will be spent.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 螺旋模型典型周期的第一阶段是确定应与软件开发的各个阶段相关联的目标。增加功能或提升性能就是此类变更的示例。同时，必须明确几个实现选择（例如，设计A与设计B的对比），并确定框架条件以及所需的开销或时间。
- en: The following stage is to analyze the various options, with the goal and the
    conditions of the framework serving as the authoritative reference values. During
    this phase of the spiral model cycle, the regions of uncertainty that present
    a major risk to the overall development of the software project should be identified
    and analyzed. Prototyping, simulations, benchmark testing, analytical models,
    and user surveys are some of the tools that will be utilized during the next stage,
    which will be the development of a strategy that is both the least risk-inducing
    and the most cost-effective.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一阶段是分析各种选择，以目标和框架条件作为权威的参考值。在螺旋模型周期的这一阶段，应识别和分析对软件项目整体开发构成重大风险的不确定性区域。原型设计、模拟、基准测试、分析模型和用户调查是将用于下一阶段的一些工具，这一阶段将开发出最小风险和最高性价比的策略。
- en: After a thorough risk assessment has been conducted, software development can
    proceed—always with some degree of residual risk. If, for instance, performance
    risks, user interface risks, or internal interface control risks substantially
    dominate the development process, the first alternative is an evolutionary development
    strategy, in which the project is specified more clearly, and prototypes are optimized.
    In this strategy, the user interface risks, and the internal interface control
    risks are concerns that strongly dominate the development process. Then, the code
    is created and tested multiple times until the intended outcome is obtained, which
    serves as a low-risk foundation for subsequent development processes thereafter.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在完成全面的风险评估后，软件开发可以继续进行——但始终会存在一定程度的残留风险。例如，如果性能风险、用户界面风险或内部接口控制风险在开发过程中占据主导地位，第一种替代方案就是演化开发策略，在该策略中，项目将被更清晰地定义，并且原型得到优化。在这个策略中，用户界面风险和内部接口控制风险是主导开发过程的关键问题。然后，代码会被创建并多次测试，直到获得预期的结果，为之后的开发过程奠定一个低风险的基础。
- en: Evolutionary prototype development
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 演化原型开发
- en: Evolutionary prototype development, also referred to as breadboard prototyping,
    stands apart from other prototyping strategies. The primary objective of utilizing
    evolutionary prototyping is to construct a highly resilient model using a systematic
    process and consistently enhancing it. This approach is based on the idea that
    the evolutionary prototype serves as the foundation for the newly implemented
    system, allowing for future enhancements and additional requirements to be incorporated
    gradually over time.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 演化原型开发，也称为面包板原型开发，与其他原型策略有所不同。采用演化原型的主要目的是利用系统化的过程构建一个高度可靠的模型，并不断改进它。这一方法基于这样的理念：演化原型作为新实施系统的基础，使得未来的增强和附加需求可以随着时间的推移逐步整合进来。
- en: The next cycle is planned as soon as the current one ends. If the goal of the
    single cycle could be fulfilled and the determination of the next aim is pending,
    then this might be the usual continuation of the project. On the other hand, if
    the preceding stage of development is flawed, finding solutions might be your
    only option. One possible replacement for the current approach is one of the alternatives
    that has already been identified or the introduction of a brand new one. With
    this, you can make another go at it till you achieve your goal.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一周期将在当前周期结束后立即规划。如果单个周期的目标能够实现，而下一个目标尚未确定，那么这可能是项目的常规延续。另一方面，如果前一阶段的开发存在缺陷，寻找解决方案可能是唯一的选择。当前方法的一个可能替代方案是已经确定的替代方案之一，或者引入一个全新的方法。通过这种方式，你可以再尝试一次，直到实现目标。
- en: The spiral release management model in software development is considered a
    generic process model. The four stages merely establish the fundamental goals
    of a cycle, without necessitating their manifestation in every iteration. The
    ordering of their sequence is not strictly dictated by the spiral model. Hence,
    the model has the potential to be integrated with other process models at any
    given point in time.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发中的螺旋发布管理模型被认为是一种通用的过程模型。四个阶段仅仅是确立了一个周期的基本目标，并不要求每次迭代中都体现出来。它们的顺序并不是由螺旋模型严格决定的。因此，该模型有可能在任何时刻与其他过程模型进行集成。
- en: This concludes our review of the spiral release management model. By now, you
    know that spiral software development is a risk-averse model that asserts the
    implementation of iterative development techniques and manages risks throughout
    every step of the SDLC. Next, let’s investigate the big bang release management
    model—a risky development style that couldn’t be more different from the spiral
    model.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们对螺旋发布管理模型的回顾。到现在为止，你已经了解了螺旋软件开发是一种规避风险的模型，主张实施迭代开发技术，并在SDLC的每一步中管理风险。接下来，让我们来研究一下大爆炸发布管理模型——一种与螺旋模型截然不同的高风险开发风格。
- en: The big bang model
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大爆炸模型
- en: Without any extensive preparation, software engineers leap full force into programming
    while under the big bang release management model. In other words, there is no
    predetermined plan in place, and requirements are instead implemented as they
    are discovered. In some cases, a complete rewrite of the application may be necessary
    if adjustments must be made. You can see clearly how the big bang model bears
    its name. However, this methodology shines when there are only one or two developers
    involved in the project, as is the case in academia or for practice. This technique
    is useful when there is a lack of clarity regarding the project’s requirements
    and a firm deadline for completion.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在大爆炸发布管理模型下，软件工程师在没有任何详细准备的情况下，全力投入到编程工作中。换句话说，没有预定的计划，需求是随着发现而逐步实现的。在某些情况下，如果需要调整，可能需要完全重写应用程序。你可以清楚地看到大爆炸模型为何得名。然而，当项目中只有一两个开发人员参与时，这种方法特别有效，正如在学术界或实践中的情况一样。当项目需求不明确且有一个固定的完成期限时，这种技术尤为有用。
- en: The big bang model is a software development life cycle paradigm that begins
    with nothing and builds up from there. Very little time is spent on planning,
    and we do not adhere to any particular procedure. As it does not require any planning,
    it is the most fundamental type of release management methodology. The requirements
    are applied on the fly with minimal forethought, and the client isn’t even clear
    about what they want. The primary goal of this approach is to start coding as
    soon as possible, without adhering to any particular structure, and to provide
    the finished product to the customer as soon as possible. The day-to-day development
    begins with a few prerequisites even though there is little knowledge of the final
    result. Following that, the client maintains close correspondence with the development
    team in order to track how the work is progressing. If the result matches what
    was expected, the product is authorized; otherwise, a different solution is devised.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 大爆炸模型是一种软件开发生命周期范式，它从什么都没有开始，逐步构建起来。我们在规划上花费的时间非常少，也不遵循任何特定的程序。由于不需要任何规划，它是最基础的发布管理方法。需求是在没有太多前瞻性的情况下实时应用的，客户甚至不清楚自己需要什么。该方法的主要目标是尽快开始编码，而不遵循任何特定的结构，并尽快将完成的产品交付给客户。日常开发开始时有一些前提条件，尽管对最终结果知之甚少。接下来，客户与开发团队保持密切联系，以跟踪工作进展。如果结果与预期相符，产品将被授权；否则，将提出不同的解决方案。
- en: In a nutshell, this methodology does not necessitate extensively specified requirements,
    and product needs are comprehended and executed promptly upon receipt. The core
    emphasis of this paradigm is on coding, leaving it more susceptible to risks compared
    to alternative release management models. After the components, or at least their
    constituent parts, are fully integrated, testing can begin. This model is best
    for enabling the integration of bleeding edge technologies in an existing environment,
    for analyzing the modifications made, and for adaptability.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，这种方法论不需要详细规定要求，产品需求在收到后会迅速被理解并执行。该范式的核心重点是编程，因此相比其他发布管理模型，它更容易受到风险的影响。在组件或至少其组成部分完全集成后，测试即可开始。此模型最适合在现有环境中整合前沿技术，分析所做的修改，并具有良好的适应性。
- en: 'As you can infer, this model bears resemblance to the big bang theory of the
    creation of the universe. The result of a condensed mixture of time, resources,
    and energy leads to the establishment of a finished product, in the blink of an
    eye, and seemingly out of nothing. The following diagram is a detailed description
    of the big bang release management model:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所推测的，这个模型类似于宇宙大爆炸理论。时间、资源和能量的浓缩混合，瞬间产生了一个完成的产品，似乎是凭空而来。下图详细描述了大爆炸发布管理模型：
- en: '![Figure 3.6: The big bang release management model](img/B21803_03_6.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.6：大爆炸发布管理模型](img/B21803_03_6.jpg)'
- en: 'Figure 3.6: The big bang release management model'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6：大爆炸发布管理模型
- en: This concludes our review of the big bang release management model. By now,
    you have gained perspective on what the true meaning of release management is.
    You understand what release management can be, from its most formal to its most
    informal. Next, we’ll examine the infamous agile release management model. Love
    it or hate it, the agile model was outrageously popular for around two decades
    before DevOps caught on and then eclipsed it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们对大爆炸发布管理模型的回顾。到现在为止，你已经理解了发布管理的真正含义。你明白了发布管理可以是怎样的，从最正式到最非正式的形式。接下来，我们将探讨臭名昭著的敏捷发布管理模型。无论你喜不喜欢，敏捷模型在DevOps崛起并取代它之前，曾在大约二十年的时间里风靡一时。
- en: The agile model
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏捷模型
- en: 'The **agile** release management model divides the SDLC phases into multiple
    development cycles, with the team delivering incremental software changes at the
    conclusion of each cycle. The agile methodology is highly effective, and its rapid
    development cycles help teams identify problems early on; however, excessive reliance
    on customer feedback could result in excessive scope creep. The agile model is
    ideal for software development initiatives that require adaptability and flexibility
    over time. The following diagram depicts the agile model:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**敏捷**发布管理模型将SDLC阶段分为多个开发周期，团队在每个周期结束时交付增量的软件变更。敏捷方法非常有效，其快速的开发周期帮助团队及早发现问题；然而，过度依赖客户反馈可能导致范围蔓延。敏捷模型非常适合那些随着时间推移需要适应性和灵活性的软开项目。下图展示了敏捷模型：'
- en: '![Figure 3.7: The agile release management model](img/B21803_03_7.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.7：敏捷发布管理模型](img/B21803_03_7.jpg)'
- en: 'Figure 3.7: The agile release management model'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7：敏捷发布管理模型
- en: The majority of the techniques used for agile development divide the work into
    a number of smaller increments. These increments require less time and effort
    for upfront planning and design compared to other release management models, such
    as the waterfall model. These iterations, known as sprints, are brief periods
    of activity and normally last between one and four weeks. Each iteration requires
    the participation of a cross-functional team that works on all activities, including
    planning, analysis, design, coding, unit testing, and acceptance testing. At the
    conclusion of the iteration, stakeholders see a demonstration of a product that
    is already functional. This reduces risk overall and makes it easier for the product
    to quickly adjust to new circumstances.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数敏捷开发所使用的技术将工作划分为若干小增量。这些增量相比其他发布管理模型（如瀑布模型）需要较少的前期规划和设计时间和精力。这些迭代被称为冲刺，是短暂的活动周期，通常持续一到四周。每个迭代都需要一个跨职能团队的参与，团队会进行所有活动，包括规划、分析、设计、编码、单元测试和验收测试。在迭代结束时，利益相关者会看到一个已经具有功能的产品演示。这降低了整体风险，并使得产品能够快速适应新的环境。
- en: The goal is to have a release that is available (with a low number of bugs)
    at the conclusion of each iteration, even though each iteration might not yield
    sufficient features to warrant a market release. When products are developed incrementally,
    there is more flexibility for them to *fail often and early* throughout each iteration
    phase as opposed to failing catastrophically close to the product’s final delivery
    date. There may be a requirement for multiple revisions before a product or new
    features can be released. The most important indicator of progress is the presence
    of working software.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是确保每次迭代结束时都有一个可用的发布版本（且 bug 数量较少），尽管每个迭代可能不会产生足够的功能来支持市场发布。当产品以增量方式开发时，相较于在产品最终交付日期临近时发生灾难性失败，它们在每次迭代阶段更具灵活性，可以*早期并频繁地失败*。可能需要多次修订才能发布产品或新功能。进展的最重要指标是有功能的软件。
- en: Rapid product development and reduced risk are the two major benefits of adopting
    the agile methodology. As a result, the risks associated with creating a product
    that doesn’t fulfill consumer requirements can be mitigated by releasing the product
    to the market in smaller increments.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 采用敏捷方法论的两个主要好处是快速的产品开发和降低风险。因此，通过将产品以较小的增量发布到市场，可以减轻由于产品未能满足消费者需求而产生的风险。
- en: This concludes our review of the agile release management model. As you can
    see, the agile model was the logical successor to the iterative and incremental
    model, yet it was also a stepping stone towards the DevOps release management
    model. It is for this reason that we will be discussing the DevOps model next.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们对敏捷发布管理模型的回顾。正如您所见，敏捷模型是迭代增量模型的逻辑继任者，同时也是通向 DevOps 发布管理模型的一个重要步骤。因此，接下来我们将讨论
    DevOps 模型。
- en: The DevOps model
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 模型
- en: 'The **DevOps** release management model encompasses a collection of methodologies
    that integrate **software development** (**Dev**) and **IT operations** (**Ops**)
    in order to facilitate expedited and more frequently issued software releases.
    This software development strategy combines communication, automation, and analysis.
    The DevOps methodology places emphasis on the delivery of software that aligns
    with business objectives and meets customer requirements. This is achieved through
    the utilization of rapid feedback loops, pertinent **key performance indicators**
    (**KPIs**), and an iterative development strategy. While DevOps does include planning,
    design, coding, testing, and deployment, a hallmark of this model is how it incorporates
    continuous integration, continuous delivery, continuous testing, and continuous
    monitoring into the SDLC. The following diagram depicts the DevOps model:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**DevOps** 发布管理模型包括一系列方法论，旨在整合 **软件开发**（**Dev**）和 **IT 运维**（**Ops**），以促进更快速和更频繁的软件发布。这种软件开发策略结合了沟通、自动化和分析。DevOps
    方法论强调交付符合业务目标并满足客户需求的软件。通过利用快速反馈循环、相关的 **关键绩效指标**（**KPIs**）和迭代开发策略来实现这一点。虽然 DevOps
    包括规划、设计、编码、测试和部署，但该模型的一个显著特点是它如何将持续集成、持续交付、持续测试和持续监控融入到软件开发生命周期中。以下图示展示了 DevOps
    模型：'
- en: '![Figure 3.8: The DevOps release management model](img/B21803_03_8.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.8：DevOps 发布管理模型](img/B21803_03_8.jpg)'
- en: 'Figure 3.8: The DevOps release management model'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8：DevOps 发布管理模型
- en: Release management relies heavily on precise reporting in order to keep tabs
    on needs, risks, and obstacles. It also guarantees that the project’s initial
    goals and objectives will be met all the way through the software development
    life cycle.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 发布管理在很大程度上依赖于精确的报告，以便跟踪需求、风险和障碍。它还确保项目的初始目标和目的在整个软件开发生命周期内都能得到实现。
- en: The adoption of DevOps principles inherently results in an improved release
    management framework, which in turn produces industry-standard procedures for
    effective collaboration and testing at every stage of the delivery life cycle.
    People have a tendency to focus on automation as the most important value in DevOps;
    nevertheless, automation should always be focused on boosting the productivity
    of your people. As people work to improve operational efficiency and minimize
    the impact of human mistakes, they will inevitably start releasing reliable services
    with greater velocity.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 采用 DevOps 原则自然会带来一个更完善的发布管理框架，进而为交付生命周期每个阶段的有效协作和测试制定行业标准的程序。人们往往将自动化视为 DevOps
    中最重要的价值，但自动化应始终聚焦于提升人员的生产力。当人们致力于提高操作效率并减少人为错误的影响时，他们必然会以更高的速度发布可靠的服务。
- en: The integration of release management within the DevOps culture enables firms
    to attain expedited, dependable, and successful software releases. Ultimately,
    this phenomenon serves to boost consumer happiness, build fellowship within development
    teams, and accelerate the expansion of businesses.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 文化中整合发布管理使得企业能够实现加速、可靠和成功的软件发布。最终，这一现象有助于提高消费者的满意度，增进开发团队间的合作，并加速企业的扩展。
- en: DevOps and release management share an affinity with regard to software development,
    project management, and IT operations. DevOps release management encompasses activities
    involved in overseeing the design, planning, scheduling, testing, and implementation
    of the software release and delivery cycle.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 和发布管理在软件开发、项目管理和 IT 运维方面有着密切的关系。DevOps 发布管理包括了对软件发布和交付周期的设计、规划、调度、测试和实施等活动的管理。
- en: Organizations that have implemented modifications to a product at least once
    have a solid understanding of the crucial role of release management within the
    context of DevOps. When executed correctly, the implementation of this strategy
    has the potential to enhance the efficiency of development, testing, and operational
    processes. In addition, this release management strategy effectively reduces expenses
    associated with rework, enhances collaborative efforts, and facilitates the successful
    delivery of goods of superior quality.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 已经至少对某个产品进行过一次修改的组织，通常都能深刻理解发布管理在 DevOps 背景下的重要作用。当这一策略得当执行时，它有潜力提升开发、测试和操作过程的效率。此外，这一发布管理策略还能有效减少返工成本、加强协作并促进高质量产品的成功交付。
- en: This elevates the organization’s oversight of all phases of the release process,
    spanning from the initial development to final delivery. The use of DevOps release
    management is now the contemporary standard for when a new product is being launched
    or a modification is being introduced. The DevOps processes may vary slightly
    depending on a given team, their preferred practices, and the objectives of the
    organization.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这提升了组织对发布过程各阶段的监督，从最初的开发到最终的交付。DevOps 发布管理现已成为当新产品推出或进行修改时的现代标准。DevOps 过程可能会因团队的不同、偏好的实践和组织的目标而略有不同。
- en: By embracing DevOps release management, software development teams benefit from
    incorporating quality checks and shifting left and by carrying out testing, automation,
    and QA procedures much earlier in the software delivery life cycle. Due to its
    usefulness in removing silos that isolate team members, DevOps release management
    is emerging as the most popular release management strategy currently being adopted.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通过采用 DevOps 发布管理，软件开发团队能够通过更早地进行质量检查、左移测试、自动化和 QA 程序，从而提高软件交付生命周期中的整体效率。由于其在消除孤岛效应、促进团队成员协作方面的作用，DevOps
    发布管理正逐渐成为当前最流行的发布管理策略。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have reached the end of this chapter. By this point, we have discussed the
    eight most common release management models in the IT industry. They are the ITIL,
    waterfall, iterative, V-shaped, spiral, big bang, agile, and DevOps models. You
    should now understand the various benefits and drawbacks of each release management
    model and feel confident about selecting the right one for your project. Moreover,
    you have been exposed to the amazing benefits that DevOps offers over the previous
    release management models that came before it. As a result, you have a working
    knowledge of the history of release management and can draw well-informed conclusions
    about how each model evolved beyond the next.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到达本章的结束。到目前为止，我们已经讨论了 IT 行业中最常见的八种发布管理模型。它们分别是 ITIL 模型、瀑布模型、迭代模型、V 型模型、螺旋模型、大爆炸模型、敏捷模型和
    DevOps 模型。现在你应该已经了解了每种发布管理模型的各种优缺点，并对选择适合自己项目的模型有了信心。此外，你也已经接触到 DevOps 相对于之前发布管理模型所提供的惊人好处。因此，你对发布管理的历史有了基本了解，并能够根据每种模型的演变，做出明智的结论。
- en: This concludes [*Chapter 3*](B21803_03.xhtml#_idTextAnchor051). In the next
    chapter, we are going to learn about what makes DevOps release management unique.
    This is important to know because we are going to shift our focus to the DevOps
    Release Management Model for the remainder of this book.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本章已结束，[*第3章*](B21803_03.xhtml#_idTextAnchor051)。在下一章中，我们将学习 DevOps 发布管理的独特性。了解这一点非常重要，因为接下来的章节将重点讨论
    DevOps 发布管理模型。
- en: Questions
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请回答以下问题，以测试你对本章内容的理解：
- en: Why does the ITIL release management model have more to do with the systems
    development life cycle than the software development life cycle?
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么 ITIL 发布管理模型更多地与系统开发生命周期相关，而不是软件开发生命周期？
- en: What was the very first standard release management model?
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个标准发布管理模型是什么？
- en: What are the three steps in the iterative and incremental release management
    model?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 迭代和增量发布管理模型中的三个步骤是什么？
- en: What direction does the progression of time and development travel in the V-shaped
    release management model?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 V 型发布管理模型中，时间和发展的进程走向是什么方向？
- en: What is the defining feature of the spiral release management model?
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 螺旋发布管理模型的定义特征是什么？
- en: What are the three key ingredients that the big bang release management model
    requires in order to begin a new project?
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 大爆炸发布管理模型开始新项目时需要的三个关键要素是什么？
- en: What is the motto of the agile release management model with regard to testing?
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 敏捷发布管理模型在测试方面的座右铭是什么？
- en: What is the defining feature of the DevOps release management model?
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DevOps 发布管理模型的定义特征是什么？
- en: When is it acceptable to backtrack and move to previous phases of the waterfall
    release management model?
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在瀑布发布管理模型中，何时可以回溯并返回到之前的阶段？
- en: In what phase of the DevOps release management model does testing occur?
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DevOps 发布管理模型的哪个阶段进行测试？
- en: 'Part 2: The Advantages of DevOps Release Management'
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：DevOps 发布管理的优势
- en: In this second section of the book, we’ll begin by learning what problems DevOps
    Release Management tries to solve. From there, we will learn what makes DevOps
    Release Management Unique. Then, we’ll get an understanding of the basics of CI/CD,
    the heart of a DevOps-based value stream. Finally, we’ll explore how CI/CD pipelines
    enforce good DevOps Release Management. The goal of this section is to underscore
    the hallmarks of DevOps Release Management so that you have the foundational knowledge
    needed before advancing further and becoming a seasoned DevOps leader and tactician.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第二部分，我们将从学习 DevOps 发布管理试图解决的问题开始。接着，我们将学习 DevOps 发布管理的独特性。然后，我们将了解 CI/CD
    的基础，它是基于 DevOps 的价值流的核心。最后，我们将探索 CI/CD 流水线如何促进良好的 DevOps 发布管理。本部分的目标是强调 DevOps
    发布管理的标志性特征，以便你在进一步学习并成为一名经验丰富的 DevOps 领导者和战术专家之前，具备必要的基础知识。
- en: 'This section contains the following chapters:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含以下章节：
- en: '[*Chapter 4*](B21803_04.xhtml#_idTextAnchor066), *What Problems Does DevOps
    Release Management Try to Solve?*'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第4章*](B21803_04.xhtml#_idTextAnchor066)，*DevOps 发布管理试图解决什么问题？*'
- en: '[*Chapter 5*](B21803_05.xhtml#_idTextAnchor078), *Understanding What Makes
    DevOps Release Management Unique*'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B21803_05.xhtml#_idTextAnchor078)，*理解 DevOps 发布管理的独特性*'
- en: '[*Chapter 6*](B21803_06.xhtml#_idTextAnchor095), *Understanding the Basics
    of CI/CD*'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B21803_06.xhtml#_idTextAnchor095)，*理解 CI/CD 的基础*'
- en: '[*Chapter 7*](B21803_07.xhtml#_idTextAnchor120), *A Practical Pipeline for
    Technical Release Managers*'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B21803_07.xhtml#_idTextAnchor120)，*技术发布经理的实用流水线*'
- en: '[*Chapter 8*](B21803_08.xhtml#_idTextAnchor141), *How CI/CD Pipelines Enforce
    Good DevOps Release Management*'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B21803_08.xhtml#_idTextAnchor141)，*CI/CD流水线如何推动良好的DevOps发布管理*'
