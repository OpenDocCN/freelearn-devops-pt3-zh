["```\n dotnet tool install --global Microsoft.PowerApps.CLI.Tool\n```", "```\n trigger:\n- none\npool:\n  vmImage: ubuntu-latest\nsteps: <st c=\"25322\">- task: PowerPlatformToolInstaller@2</st> inputs:\n    DefaultVersion: true <st c=\"25388\">- task: PowerPlatformExportSolution@2</st> inputs:\n    authenticationType: 'PowerPlatformSPN' <st c=\"25473\">PowerPlatformSPN: '[Service_Connection_Name]'</st> SolutionName: '[Our_Solution_Name]'\n    SolutionOutputFile: '$(Build.ArtifactStagingDirectory)/Solution/[Our_Solution_Name].zip'\n    Managed: true\n    AsyncOperation: false\n    MaxAsyncWaitTime: '60' <st c=\"25703\">- task: PowerPlatformUnpackSolution@2</st> inputs:\n    SolutionInputFile: '$(Build.ArtifactStagingDirectory)/Solution/TranslatorSolution.zip'\n    SolutionTargetFolder: '$(Build.ArtifactStagingDirectory)/Solution/out'\n    SolutionType: 'Managed'\n- task: PowerPlatformChecker@2\n  inputs: <st c=\"25970\">PowerPlatformSPN: [Service_Connection_Name]'</st> FilesToAnalyze: '$(Build.ArtifactStagingDirectory)/Solution/*.zip'\n    RuleSet: '0ad12346-e108-40b8-a956-9a8f95ea18c9'\n- task: PublishBuildArtifacts@1\n  enabled: true\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)'\n    ArtifactName: 'Translator'\n    publishLocation: 'Container'\n```", "```\n # First we need to authenticate\npac auth create\n# List our environments to find the URL of the environment hosting our Power Platform pipelines (HOST)\npac admin list\n# Create the service principal\npac admin create-service-principal -env <<URL>> -n VersionControlSPN --role \"System Administrator\"\n```", "```\n pac admin create-service-principal -env https://org48448b9d.crm4.dynamics.com -n VersionControlSPN\nConnected as XXXXXX@YYYYYYY.onmicrosoft.com\nCreating Entra ID Application 'VersionControlSPN'... Done\nCreating Entra ID Service Principal... Done\nConnected to... pipelinehost\nRegistering Application '7be14619-8224-4235-9c6b-2701fb98f203' with Dataverse... Done\nCreating Dataverse system user and assigning role... Done\nApplication Name         VersionControlSPN\nTenant Id                XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\nApplication Id           XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\nService Principal Id     XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\nClient Secret            YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\nClient Secret Expiration 2025\\. 02\\. 24\\. 16:03:31 +00:00\nSystem User Id           XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n```", "```\n     name: DownloadUnpackCommitBash\n    run-name: VersionControlIntegration-Bash\n    on:\n      workflow_dispatch:\n    ```", "```\n     inputs: <st c=\"37721\">artifact_url</st>:\n            description: \"The URL of the Dataverse record ID for the artifact created by the pipelines.\" required: true\n          solution_name:\n            description: \"Name of the solution in Dataverse\"\n            required: true\n          user_name:\n            description: \"User name for the commit\"\n            required: true\n          user_email:\n            description: \"User name email address\"\n            required: true\n          source_branch:\n            description: \"Branch for the solution commit\"\n            default: \"main\"\n            required: true\n          target_branch:\n            description: \"Branch to create for the solution\"\n            required: false\n          commit_message:\n            description: \"Message to provide for the commit\"\n            default: \"test without Dataverse trigger\"\n            required: true\n    ```", "```\n     permissions:\n      contents: write\n    jobs:\n      export-unpack-commit:\n        runs-on: ubuntu-latest\n    ```", "```\n     steps:\n          - uses: actions/checkout@v3\n            with:\n                ref: ${{ github.event.inputs.source_branch }}\n    ```", "```\n     # Commit changes to the existing or new branch\n         - name: create new branch if specified\n           shell: bash\n           run: |\n            if [ -n \"${{ github.event.inputs.target_branch }}\" ]; then\n                  git checkout -b ${{ github.event.inputs.target_branch }} ${{ github.event.inputs.source_branch }}\n             fi\n    ```", "```\n     # Export the solution from the artifact created by pipelines\n         - name: download solution from artifact\n           env:\n               CLIENT_ID: ${{secrets.CLIENT_ID}}\n               TENANT_ID: ${{secrets.TENANT_ID}}\n               CLIENT_SECRET: ${{secrets.CLIENT_SECRET}}\n           shell: bash\n           run: |\n               aadHost=\"login.microsoftonline.com\"\n               #adding $value to the end of the artifact url to download binary content\n               url=\"${{ github.event.inputs.artifact_url }}/\\$value\"\n               dataverseHost=$(echo $url | cut -d'/' -f3)\n    body=\"client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&grant_type=client_credentials&scope=https://$dataverseHost/.default\"\n               OAuthReq=$(curl -s -X POST \"https://$aadHost/${TENANT_ID}/oauth2/v2.0/token\" -d $body)\n                spnToken=$(echo $OAuthReq | jq -r .access_token)\n                # Download the managed solution\n                response=$(curl -H \"Authorization: Bearer $spnToken\" \\\n                  -X GET $url \\\n                  -o \"${{ github.event.inputs.solution_name }}_managed.zip\")\n                # Download the unmanaged solution (for now we will need to use string manipulation to get the unmanaged solution URL, until the API provides this value)\n                unmanaged_artifact_url=$(echo \"$url\" | sed 's/artifactfile/artifactfileunmanaged/g')\n                response=$(curl -H \"Authorization: Bearer $spnToken\" \\\n                  -X GET $unmanaged_artifact_url \\\n                  -o \"${{ github.event.inputs.solution_name }}.zip\")\n    ```", "```\n     # Unpack the solution to a folder named as the solution\n          - name: unpack solution <st c=\"40798\">uses: microsoft/powerplatform-actions/unpack-solution@v0</st> with:\n              solution-file: \"${{ github.event.inputs.solution_name }}.zip\"\n              solution-folder: \"${{ github.event.inputs.solution_name }}\"\n              solution-type: 'Both'\n              process-canvas-apps: false\n              overwrite-files: true\n    ```", "```\n     # Commit changes to the existing or new branch\n         - name: commit changes\n           shell: bash\n           run: |\n             rm -rf ${{ github.event.inputs.solution_name }}.zip\n             rm -rf ${{ github.event.inputs.solution_name }}_managed.zip\n             git config user.name ${{ github.event.inputs.user_name }}\n             git config user.email ${{ github.event.inputs.user_email }}\n             git pull\n             git add --all\n             git commit -am \"${{ github.event.inputs.commit_message }}\" --allow-empty\n    ```", "```\n     # Push the committed changes to the source branch\n         - name: push to branch\n           shell: bash\n           run: |\n             if [ -n \"${{ github.event.inputs.target_branch }}\" ]; then\n               git push origin \"${{ github.event.inputs.target_branch }}\"\n             else\n               git push origin \"${{ github.event.inputs.source_branch }}\"\n             fi\n    ```", "```\n {\n \"ref\": \"main\",\n \"inputs\": {\n   \"artifact_url\": \"https://[your-env-id].api.crm4.dynamics.com/api/data/v9.0/deploymentartifacts(@{body('Get_a_row_by_ID')?['_artifactid_value']})/artifactfile\",\n   \"solution_name\": \"mpa_ITBase\",\n   \"user_name\": \"jovadker\",\n   \"user_email\": \"jozsef.vadkerti@hotmail.com\",\n   \"source_branch\": \"main\",\n   \"commit_message\": \"new version deployed to prod\"\n }\n}\n```", "```\n     {\n    \"artifact_url\": \"https://[your-env-id].api.crm4.dynamics.com/api/data/v9.0/deploymentartifacts(@{body('Get_a_row_by_ID')?['_artifactid_value']})/artifactfile\",\n    \"solution_name\": \"mpa_ITBase\",\n    \"user_name\": \"jovadker\",\n    \"user_email\": \"jozsef.vadkerti@hotmail.com\",\n    \"source_branch\": \"main\",\n    \"commit_message\": \"new version deployed to prod\"\n    }\n    ```"]