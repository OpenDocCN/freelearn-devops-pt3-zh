- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Extending and Executing Bitbucket Pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 5*](B21937_05.xhtml#_idTextAnchor087), we started with an introduction
    to **Bitbucket Cloud**, a cloud-based **source code management** (**SCM**) tool
    from Atlassian that includes **Bitbucket Pipelines**. Bitbucket Pipelines allows
    for **continuous integration** and **deployment**, where source code is built,
    tested, and deployed automatically once a commit is made.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will start by looking at continuous integration using Bitbucket
    Pipelines. You will extend your knowledge of Bitbucket Pipelines by adding integrations
    to third-party tools that perform testing for syntax checking and security. You
    will also define and configure runners and the agents that perform the execution
    of Bitbucket Pipelines. Recipes in this chapter include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring pipeline options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conditional execution of pipelines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manual execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scheduled execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a runner for a pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to Bitbucket Pipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing steps in Bitbucket Pipelines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security steps in Bitbucket Pipelines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting test results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s begin our examination of Bitbucket Pipelines by looking at its structure.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recipes in this chapter require the setup of Bitbucket Cloud on a workspace,
    project, and repository. In addition, **self-hosted runners** require a machine
    running Linux, macOS, or Windows.
  prefs: []
  type: TYPE_NORMAL
- en: The sample code for this chapter can be found in the `Chapter6` folder of this
    book’s GitHub repository ([https://github.com/PacktPublishing/Atlassian-DevOps-Toolchain-Cookbook/tree/main/Chapter6](https://github.com/PacktPublishing/Atlassian-DevOps-Toolchain-Cookbook/tree/main/Chapter6)).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring pipeline options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you the general structure of the `bitbucket-pipelines.yml`
    file and the options for general configuration. We created the file that describes
    the pipeline to execute (`bitbucket-pipelines.yml`) in [*Chapter 5*](B21937_05.xhtml#_idTextAnchor087).
    Let’s look at the configuration found in `bitbucket-pipelines.yml` now.
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample of the possible configurations and the general structure of the `bitbucket-pipelines.yml`
    file is detailed in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This recipe will show you the options for the general configuration of your
    pipelines. Subsequent recipes will demonstrate the applications, using the options
    outlined in the preceding code snippet.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will evaluate the following configuration sections in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Global options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `git` `clone` behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`definitions`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subsequent recipes will talk about the configuration of the execution options
    for your pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring global options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Global options specify behavior for all of the pipelines executed. The global
    options include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`docker`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max-time`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s examine these options one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want your pipelines to run Docker commands, specify the `docker` keyword
    followed by the `true` value, as seen in the following code snippet (we examine
    this in detail in [*Chapter 9*](B21937_09.xhtml#_idTextAnchor185)):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you need to allocate more time for steps to execute before timing out, specify
    the `max-time` keyword with an integer between `1` and `120`. The number specifies
    the wait time in minutes. The `max-time` option may also be used at the step level
    to set the timeout for the step. The following code snippet sets the max time
    to `5` minutes for all steps in the pipeline:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `size` option can allocate additional memory to the entire pipeline or
    an individual step. If you are using runners on Bitbucket Cloud, your options
    are `1x` and `2x`, while self-hosted Docker runners have options of `1x`, `2x`,
    `4x`, and `8x`. The following code snippet sets the size of the entire pipeline
    to double the normal allotment:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have seen how to configure global options relating to running Docker commands,
    wait times, and available runner memory. Let’s now look at options for configuring
    behavior when performing a `git clone` operation in the pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: The git clone behavior
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `clone:` section in `bitbucket-pipelines.yml` controls the copy of the
    repository through a `git clone` operation. It can be placed after the `options:`
    section to configure the `git clone` behavior for the entire pipeline or within
    a `step:` section to configure the `git clone` behavior for that step. The options
    available are outlined in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`depth`: This controls the depth of the clone operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lfs`: This allows support for Git **Large File System** (**LFS**) files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enabled`: This enables or disables the `git` `clone` operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip-ssl-verify`: This allows the skipping of the **Secure Sockets Layer**
    (**SSL**) verification on an individual step.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s look at these options in depth one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can enable or disable the `git clone` operations for a specified scope
    by adding the `enabled` keyword with `true` to enable and `false` to disable.
    Here is an example that disables cloning for all pipeline steps:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To control the number of commits to include in a `git clone` operation, use
    the `depth` keyword with the value of `full` to indicate a full clone operation
    or a positive integer that indicates how many commits to incorporate in the `git
    clone` operation. This feature sets up fast checkouts that don’t require the full
    history, especially for large repositories. The following code snippet illustrates
    a clone operation that clones the last five commits on all pipeline steps:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `lfs` option with the value of `true` to download all LFS files at
    the start of every step when set globally. If this is placed within a step, the
    download of all LFS files will start only at the beginning of that step. The following
    code snippet illustrates the downloading of all LFS files at every step:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `skip-ssl-verify` option is available only within the scope of an individual
    step and only with self-hosted pipeline runners. Setting this option to `true`
    disables SSL verification for that step, allowing the use of self-signed certificates.
    This is illustrated in the following code snippet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have now seen what options are available for all pipeline steps or an individual
    pipeline step for the `git clone` operations. Let’s now see what resources can
    be included in the pipeline by configuring the `definitions` section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring definitions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `definitions` section describes additional resources available for all
    pipeline steps. The following list outlines the type of resources available:'
  prefs: []
  type: TYPE_NORMAL
- en: Caches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: YAML anchors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We examine how services are configured using Docker containers in [*Chapter
    9*](B21937_09.xhtml#_idTextAnchor185). Caches allow for the temporary storage
    of build dependencies and their directories. Let’s examine the uses of caches:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `definitions` section, you can define a cache with a file name or directory
    path. The path can include wildcard characters expressed as a glob pattern. In
    the following code snippet, we define and use a cache for a Ruby build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The files that should be monitored for changes can be specified in the `caches`
    definition block as a `key` section with a listing noted under the `files` keyword.
    Multiple files can be specified using wildcard characters in glob patterns. The
    `files` location will be specified by the `path` option. The following code snippet
    shows the implementation of a cache definition for a Ruby build using a node defined
    by the `key`, `files`, and `path` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'YAML anchors allow for the reuse of blocks of YAML lines. The anchor character
    (`&`) defines the reusable block. An alias character (`*`) serves as the instruction
    to use the reference. The following code snippet uses YAML anchors to reuse the
    definition of a step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'The names of YAML anchors and aliases cannot contain the following characters:
    `''[''`, `'']''`, `''{''`, `''}''`, and `'',''`.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following links provide more details on caches, especially pre-defined
    caches to use when building with standard languages and tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://support.atlassian.com/bitbucket-cloud/docs/cache-dependencies/#Pre-defined-caches](https://support.atlassian.com/bitbucket-cloud/docs/cache-dependencies/#Pre-defined-caches)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://support.atlassian.com/bitbucket-cloud/docs/use-glob-patterns-on-the-pipelines-yaml-file/](https://support.atlassian.com/bitbucket-cloud/docs/use-glob-patterns-on-the-pipelines-yaml-file/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have seen how to configure options globally on a pipeline. We are now ready
    to examine the more modular parts of a pipeline’s structure.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional execution of pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We turn from specifying the definition options of a pipeline to specifying
    the execution of a pipeline. This requires us to look at the following sections
    of a pipeline’s structure:'
  prefs: []
  type: TYPE_NORMAL
- en: Pipelines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parallel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will see how these sections are affected in the following use cases:'
  prefs: []
  type: TYPE_NORMAL
- en: Commit against a branch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a pull request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we examine our use cases, let’s visit our structure.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `pipelines` section in the `bitbucket-pipelines.yml` file defines all the
    available pipeline definitions to build and deploy. It is defined only once in
    the file and is required.
  prefs: []
  type: TYPE_NORMAL
- en: Within the `pipelines` section are sections that define pipelines based on the
    conditional use cases mentioned in the preceding section. A pipeline can be thought
    of as a series of steps, defined by the `step` keyword. Pipelines are limited
    to 100 steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The step details at a minimum the commands needed to run the step in a Docker
    container defined as the build environment. These commands are contained in the
    required `script` section. In addition, other options can be defined in the `step`
    section to further define the step’s behavior. An example of a simple one-command
    step is shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Steps are normally run sequentially. If you want to run multiple steps in parallel,
    group the steps together using the `parallel` keyword. A common use case is to
    allow testing steps to occur in parallel. An example is shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'A stage is a grouping of steps so that a certain function is performed. The
    stage section is defined by the `stage` keyword and includes its steps under the
    `steps` keyword. Stages help define the grouped steps of a distinct phase such
    as build, test, packaging, and publishing. One use of stages may be in deployment
    where they can show you which part of a deployment failed and allow for the use
    of common environments and environment variables. An example of a stage is shown
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `default` section defines the steps to be run on a pipeline on every push
    to the repository unless the push occurs on a defined branch-specific pipeline
    or the push is based on a `git tag` operation. Let’s revisit an example of our
    one-step pipeline and see that because of the `default` keyword, it will always
    run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now that we understand the basic structure of our pipeline through the `pipelines`,
    `parallel`, `stage`, and `step` sections, let’s visit the use cases where we want
    the conditional execution of the pipeline steps.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Getting ready* section of this recipe showed us the pipeline structure
    inside of `bitbucket-pipelines.yml`. The `pipelines`, `parallel`, `stage`, and
    `step` sections allowed for the unconditional execution of pipeline steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now want to run different pipeline steps based on the following use cases:'
  prefs: []
  type: TYPE_NORMAL
- en: Commit to a specific branch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creation of a pull request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creation of a specific tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bitbucket Pipelines allows these conditional use cases through additional sections,
    denoted with specific keywords. Let’s examine these keywords one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `branches` keyword allows the specification of the specific branches against
    which pipeline steps are to be performed. Branches can be identified by their
    name or grouped together using glob patterns. In this case, the `default` keyword
    identifies those steps to be performed against branches not defined in the `branches`
    section. The following code snippet illustrates a pipeline with different steps
    for any push to the main branch and any feature branch:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pull-request-specific pipelines are defined based on the working branch and
    the `pull-requests` keyword. These define the specific steps to run when the pull
    request to the destination branch is created. Working branches can be combined
    into similar branch categories using glob patterns. Executing the pull-requests
    pipeline merges the destination branch into the working branch before running.
    If the merge fails, the pipeline execution stops. Pipelines for pull requests
    to feature and hotfix branches are illustrated in the following code snippet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To set up a tag-specific pipeline, use the `tags` keyword to denote the section
    of steps to run when `git tag` matches the pattern defined in the `tags` section.
    Note that the glob patterns can be applied for the search parameters to broaden
    the tag search. The following code snippet runs pipeline operations depending
    on the tag matched in the search:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We’ve now seen how to set up pipelines to conditionally run based on a branch,
    if a pull request is created, and if a tag is created.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following links add more details to the sections we have discussed in this
    recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://support.atlassian.com/bitbucket-cloud/docs/step-options/](https://support.atlassian.com/bitbucket-cloud/docs/step-options/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://support.atlassian.com/bitbucket-cloud/docs/stage-options/](https://support.atlassian.com/bitbucket-cloud/docs/stage-options/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://support.atlassian.com/bitbucket-cloud/docs/parallel-step-options/](https://support.atlassian.com/bitbucket-cloud/docs/parallel-step-options/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So far, we have talked about pipeline executions that are automatically run
    when a commit or pull request operation occurs. Can we run pipelines manually?
    We can! Let’s examine the means to do so in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Manual execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although normally, pipelines are executed automatically on commit or pull requests,
    it is possible to manually run pipelines. Not only can they be used to rerun automated
    pipelines, but you can also run pipelines that can only be executed manually.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we can also specify that a single step in a pipeline should be
    executed manually. The execution of a pipeline will pause until action is completed
    by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at defining manual-only pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can set up pipelines that are intended to be only run manually. These pipelines
    are in their own section, denoted with the `custom` keyword. Each pipeline has
    a string that describes the name, as seen in the Bitbucket UI and its steps. The
    following code snippet describes two manual pipelines and an automated branch
    pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: A manual pipeline can also contain variables that are set or updated when that
    manual pipeline is run. Variables can be described with the `variables` keyword
    and can be described using the following properties.
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: The variable’s name (this is required)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default`: The default value for the variable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`allowed-values`: A list of allowed values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: A summary of the variable’s purpose and settings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code snippet shows a manual pipeline with its variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We’ve now defined pipelines that can be run manually. Let’s now examine how
    to run these pipelines, as well as the normally automated pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Manually executing pipelines is done at the Bitbucket GUI. From the repository
    view, you can trigger a pipeline run in three places. Let’s look at these options.
  prefs: []
  type: TYPE_NORMAL
- en: Running from the Pipelines view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Run the following steps to manually execute a pipeline from the **Pipelines**
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: In the repository sidebar, select the **Pipelines** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Selecting the Pipelines view](img/B21937_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Selecting the Pipelines view
  prefs: []
  type: TYPE_NORMAL
- en: On the **Pipelines** screen, click the **Run** **pipeline** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Click the Run pipeline button](img/B21937_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – Click the Run pipeline button
  prefs: []
  type: TYPE_NORMAL
- en: In the window that appears, select the branch and the pipeline to run. Click
    **Run**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Run Pipeline](img/B21937_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Run Pipeline
  prefs: []
  type: TYPE_NORMAL
- en: You have now manually run a pipeline from the **Pipelines** view.
  prefs: []
  type: TYPE_NORMAL
- en: Running from the Commits view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can also manually run a pipeline from the **Commits** view. Follow these
    steps when in the Bitbucket repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Commits** in the repository sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Selecting the Commits view](img/B21937_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Selecting the Commits view
  prefs: []
  type: TYPE_NORMAL
- en: In the **Commits** screen, select a commit by clicking on its hash.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Selecting a commit](img/B21937_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Selecting a commit
  prefs: []
  type: TYPE_NORMAL
- en: In the **Details** sidebar on the right, select **Run pipeline**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Select Run pipeline](img/B21937_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Select Run pipeline
  prefs: []
  type: TYPE_NORMAL
- en: In the window, select the pipeline to run and click **Run**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Run pipeline for commit](img/B21937_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Run pipeline for commit
  prefs: []
  type: TYPE_NORMAL
- en: You have now manually run a pipeline against a commit.
  prefs: []
  type: TYPE_NORMAL
- en: Run pipeline from the Branches view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The final place to manually run a pipeline is the **Branches** view. Let’s
    see how that’s done:'
  prefs: []
  type: TYPE_NORMAL
- en: In the repository, select **Branches** from the repository sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Select the Branches view](img/B21937_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Select the Branches view
  prefs: []
  type: TYPE_NORMAL
- en: On the **Branches** page, find the branch of interest, select the more actions
    icon (**...**), and select **Run pipeline for** **a branch**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Select Run pipeline for a branch](img/B21937_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – Select Run pipeline for a branch
  prefs: []
  type: TYPE_NORMAL
- en: In the window, select the pipeline to run and click the **Run** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Run pipeline for a branch](img/B21937_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Run pipeline for a branch
  prefs: []
  type: TYPE_NORMAL
- en: You have now manually run a pipeline against a branch.
  prefs: []
  type: TYPE_NORMAL
- en: You can also manually run individual steps of a pipeline. Let’s explore how
    that’s done in the next subsection.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Any pipeline step that is not the first in the pipeline can be specified as
    a manual step, requiring an individual to trigger the execution of that step.
    Let’s see how to create this configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the step that is to be run manually, add the `trigger: manual` keyword.
    This tells Bitbucket Pipelines that this is a manual step. The following code
    snippet shows a manual step in between two normally run (automatic) steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When running the pipeline, click into the pipeline execution from the **Pipelines**
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.11 – Select pipeline execution](img/B21937_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – Select pipeline execution
  prefs: []
  type: TYPE_NORMAL
- en: In the execution details, to run the manual step, click the **Run** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.12 – Running the manual step](img/B21937_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.12 – Running the manual step
  prefs: []
  type: TYPE_NORMAL
- en: We have now configured and executed a manual step in our pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Another desirable feature of pipeline execution is scheduling the execution
    on a cadence. We will investigate how to do that in our next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Scheduled execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any pipeline defined in the `bitbucket-pipelines.yml` file can be set on a schedule
    to run on a regular cadence. Let’s see how to make the configurations.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scheduling a pipeline is done on the Bitbucket UI, as seen in the following
    instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Bitbucket repository, select the **Pipelines** option in the repository
    sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.13 – Select the Pipelines view](img/B21937_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – Select the Pipelines view
  prefs: []
  type: TYPE_NORMAL
- en: In the **Pipelines** view, click the **Schedules** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.14 – Click the Schedules button](img/B21937_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – Click the Schedules button
  prefs: []
  type: TYPE_NORMAL
- en: To create a new schedule, click the **New schedule** button in the window that
    appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.15 – The New schedule button](img/B21937_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.15 – The New schedule button
  prefs: []
  type: TYPE_NORMAL
- en: In the **Create a schedule** window, select a branch, select a pipeline, and
    select the frequency to run the pipeline. Frequency can be hourly, daily, weekly,
    or monthly. All times are referred to local time but will be executed on a UTC
    offset to avoid daylight saving time misconfigurations. Click on the **Create**
    button when the configuration is complete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.16 – Create a new schedule](img/B21937_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.16 – Create a new schedule
  prefs: []
  type: TYPE_NORMAL
- en: On an existing schedule, you can click on the slider to disable the schedule.
    To delete the schedule, hover on the schedule and click on the trash can icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.17 – Disabling and deleting schedules](img/B21937_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.17 – Disabling and deleting schedules
  prefs: []
  type: TYPE_NORMAL
- en: We have now seen how to run our pipelines on a regular cadence through scheduling.
  prefs: []
  type: TYPE_NORMAL
- en: In the chapter so far, we have looked at execution from conditional, to manual,
    to scheduled. We now pivot to looking at what we are executing and enhancements
    that make our pipelines more potent. The first step is showing how to integrate
    Bitbucket Pipelines with third-party tools. One way of doing that is using **Pipes**.
    Let’s see how to configure and use Pipes to integrate.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to Bitbucket Pipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we perform continuous integration on our build, we may want to perform
    testing or security scans to ensure our resulting build has high quality and is
    secure. Bitbucket Pipelines allows for testing and security scans through the
    use of integrations. The integrations between Bitbucket Pipelines and an external
    tool or environment are called Bitbucket Pipes.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to see what pipes are available to Bitbucket Pipelines for integrating
    with third-party tools and environments. We will also see how to add pipes to
    your `bitbucket-pipelines.yml` to integrate our pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Bitbucket editor for `bitbucket-pipelines.yml` can display the Pipes available
    for use. The Pipes are then placed in the `script` section of the `bitbucket-pipelines.yml`
    file, as seen in the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: As we saw in the introduction to Bitbucket Pipelines in [*Chapter 5*](B21937_05.xhtml#_idTextAnchor087),
    when you edit the `bitbucket-pipelines.yml` file in the Bitbucket GUI, it opens
    a special editor that adds features for Pipes, templates, guidance on steps, and
    variables. An illustration of the help panel is shown in the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.18 – The bitbucket-pipelines.yml editor help panel](img/B21937_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.18 – The bitbucket-pipelines.yml editor help panel
  prefs: []
  type: TYPE_NORMAL
- en: Expand the **Add Pipes (Integrations)** section to view the available Pipes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.19 – Viewing a selection of Pipes](img/B21937_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.19 – Viewing a selection of Pipes
  prefs: []
  type: TYPE_NORMAL
- en: You can search by keyword or view by category when you select **Explore more
    pipes**, found at the bottom of the Pipes section, as seen in the following illustration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.20 – The Explore more pipes button](img/B21937_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.20 – The Explore more pipes button
  prefs: []
  type: TYPE_NORMAL
- en: Selecting **Explore more pipes** will open the **Discover pipes** window seen
    in the following illustration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.21 – The Discover pipes window](img/B21937_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.21 – The Discover pipes window
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a pipe will open a window for the pipe. This window will contain code
    snippets to paste into the script section of the step where you want the pipe
    to run, details about the pipe, and other information. We show an example of this
    in the following illustration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.22 – Pipe window](img/B21937_06_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.22 – Pipe window
  prefs: []
  type: TYPE_NORMAL
- en: We will see the application of pipes later in this chapter and *Chapters 8*
    and *9*.
  prefs: []
  type: TYPE_NORMAL
- en: Another feature that pipelines can use is variables. We started with defining
    variables in the *Enabling Bitbucket Pipelines* recipe in [*Chapter 5*](B21937_05.xhtml#_idTextAnchor087).
    Let’s look at another place to set a variable and how to use variables in your
    pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Defining variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Variables enhance the functionality of your pipelines by allowing you to store
    values such as names, needed parameters, and sometimes secrets. There are two
    ways you can define variables, the first of which was referenced in [*Chapter
    5*](B21937_05.xhtml#_idTextAnchor087). Let’s examine these methods.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we saw in [*Chapter 5*](B21937_05.xhtml#_idTextAnchor087), we can define
    variables from the editor for `bitbucket-pipelines.yml`. Let’s see how you can
    do that:'
  prefs: []
  type: TYPE_NORMAL
- en: When editing `bitbucket-pipelines.yml`, select the **Add** **variables** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.23 – Expand Add variables](img/B21937_06_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.23 – Expand Add variables
  prefs: []
  type: TYPE_NORMAL
- en: You can add variables for the repository, as well as any deployment environments
    you have defined.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.24 – Add variables](img/B21937_06_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.24 – Add variables
  prefs: []
  type: TYPE_NORMAL
- en: To add a variable, give it a name, enter its value, and click **Add**. Make
    sure **Secured** is checked if you need a secured variable for storing passwords
    or secrets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.25 – Variable saved](img/B21937_06_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.25 – Variable saved
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the variable in `bitbucket-pipelines.yml`, add the variable name to
    the `script:` section, appended by a dollar sign (`$`) character. This is shown
    in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We’ve seen how to add a variable from the `bitbucket-pipelines.yml` editor.
    Let’s see how to add variables from **Repository settings** in the following subsection.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Anyone with write access to the repository can create a repository variable.
    Let’s see how to do so from **Repository settings**:'
  prefs: []
  type: TYPE_NORMAL
- en: At the repository, select **Repository settings** from the repository sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.26 – Select Repository settings](img/B21937_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.26 – Select Repository settings
  prefs: []
  type: TYPE_NORMAL
- en: In the **PIPELINES** section of the **Repository settings** sidebar, select
    **Repository variables**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.27 – Select Repository variables](img/B21937_06_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.27 – Select Repository variables
  prefs: []
  type: TYPE_NORMAL
- en: To add a variable, give it a name, enter its value, and click **Add**. Make
    sure **Secured** is checked if you need a secured variable for storing passwords
    or secrets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.28 – Adding a repository variable](img/B21937_06_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.28 – Adding a repository variable
  prefs: []
  type: TYPE_NORMAL
- en: 'Just as in the previous section, to use the variable in `bitbucket-pipelines.yml`,
    add the variable name to the `script:` section, appended by a dollar sign (`$`)
    character. This is shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We’ve now seen how to add a variable in **Repository settings**.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following link provides more information on variables, including pre-defined
    Bitbucket variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/](https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can specify which runners to use when executing a pipeline. Let’s explore
    that now.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a runner for a pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 5*](B21937_05.xhtml#_idTextAnchor087), we saw how to define a self-hosted
    runner. Bitbucket Pipelines allows the use of self-hosted runners to ensure not
    only are we using the correct platforms for building, but by specifying our own
    resources, we can avoid the build time limits of Bitbucket Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have runners defined, let’s see how to call them in `bitbucket-pipelines.yml`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Your self-hosted runners can be defined on a step basis in your `bitbucket-pipelines.yml`
    file. Let’s see how that’s done:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For a given step, define the runner to use for that step by adding the `runs-on`
    keyword followed by all the applicable labels. The following code snippet shows
    such an application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Windows-specific runners are used when the `windows` label is added in the
    `runs-on` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Mac-specific runners are used when the `macos` label is added in the `runs-on`
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Linux shell runners are used when the `linux.shell` label is added in the `runs-on`
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Linux Docker ARM runners are used when the `linux.arm64` label is added in
    the `runs-on` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you don’t specify a platform label, Bitbucket Pipelines assumes the step
    should be run by a Linux Docker runner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all the matching runners are busy, your step may wait until one becomes available.
    If the runners in your repository do not match any of the labels in the step,
    the step will fail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’re now ready to explore some real-life applications of testing steps in a
    pipeline that are part of continuous integration. Let’s see a testing example
    now.
  prefs: []
  type: TYPE_NORMAL
- en: Testing steps in Bitbucket Pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A key step that may be done on a pipeline for continuous integration typically
    comes post-build. Testing immediately after the build allows for defects to be
    found and sorted out, guaranteeing better quality in the code base.
  prefs: []
  type: TYPE_NORMAL
- en: The testing steps in this recipe utilize a category of testing called **static
    analysis**. With static analysis, the files in the build are scanned to see whether
    they contain logical errors, security vulnerabilities, or other issues.
  prefs: []
  type: TYPE_NORMAL
- en: '**Linting** is another type of scanning technique that performs tests by evaluating
    the syntax and structure of the code base. It can also determine whether the code
    base being evaluated meets specific coding standards.'
  prefs: []
  type: TYPE_NORMAL
- en: We will examine different methods of invoking linting and scanning from Bitbucket
    Pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Depending on the language, a linting utility may be part of the suite of tools
    for developing in that language. Let’s see how that works with Bitbucket Pipelines:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tests that are part of a language’s development platform can be called as a
    part of the testing step’s `script` section. Execute the bundled tests by setting
    up steps inside the `script` section. The following code snippet features building
    and testing steps for a Node.js application using `image` section denotes a Docker
    image used as the build environment – we explain this in [*Chapter 9*](B21937_09.xhtml#_idTextAnchor185)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can extend our testing by adding linting applications. The following code
    snippet includes the installation and execution of ESLint, a commonly used linting
    application for JavaScript in our Node.js environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have now seen examples of running tests when a programming language’s development
    environment contains testing applications. Let’s look at integrating a third-party
    application into our Bitbucket Pipeline in the next subsection.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A popular application used for testing is **SonarCloud** from SonarSource.
    SonarCloud has a battery of tests to measure the security, reliability, and maintainability
    of a code base. After configuring SonarCloud to Bitbucket Cloud, you can set up
    test execution in Bitbucket Pipelines in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SonarCloud Scan utilizes pipes to run the SonarCloud code analyzer from Bitbucket
    Pipelines. The following code snippet demonstrates the invocation of the pipe
    in the testing step’s `script` section. This sample includes all the optional
    variables for the pipe. Note that `SONAR_TOKEN` uses a Bitbucket-secured variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In addition to SonarCloud Scan, Bitbucket Pipelines can include a call to SonarCloud
    Quality Gate to perform checks against a defined quality gate before deployment
    or release. This call is also established as a pipe that can be added to a `script`
    section. The following code snippet shows the pipe with optional variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You’ve now seen how Bitbucket Pipelines connects with SonarCloud analyzers using
    pipes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This link includes the steps needed to connect a Bitbucket workspace to a SonarCloud
    project: [https://docs.sonarsource.com/sonarcloud/getting-started/bitbucket-cloud/](https://docs.sonarsource.com/sonarcloud/getting-started/bitbucket-cloud/).'
  prefs: []
  type: TYPE_NORMAL
- en: A key tenet of DevSecOps is frequently running security scans and testing. Optimally,
    this should be part of continuous integration. Let’s look at an example of including
    security scanning in Bitbucket Pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Security steps in Bitbucket Pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As of this writing, **Snyk** is the only security provider that can deeply integrate
    with Bitbucket Cloud. Adding Snyk as a security provider allows additional security
    scans into the repository as steps of the development workflow. Part of this workflow
    includes running security scans in Bitbucket Pipelines. Let’s see how that’s done.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Snyk uses pipes to integrate with pipelines defined in `bitbucket-pipelines.yml`.
    Let’s look at how to set it up:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Snyk pipe to the `script` section of your testing step in the pipeline.
    Required variables include the Snyk token, the language used (`node`, `ruby`,
    `composer`, `dotnet`, or `docker`), and the image name if the language is set
    to `docker`. The following code snippet shows the usage for scanning a Node.js
    application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also use the Snyk CLI to run a scan using `snyk test`. Installation
    of the Snyk CLI can be done through `npm`. This is illustrated in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You’ve now set up Snyk to run security scans as part of a pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following link details how to set up Snyk as a security provider for Bitbucket
    Cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://support.atlassian.com/bitbucket-cloud/docs/add-and-configure-security-with-snyk/](https://support.atlassian.com/bitbucket-cloud/docs/add-and-configure-security-with-snyk/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On some tests, it’s possible for Bitbucket to detect the results output and
    display it. Our last recipe explores this.
  prefs: []
  type: TYPE_NORMAL
- en: Reporting test results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test results that output in JUnit and Maven Surefire XML formats will be automatically
    detected by the pipelines. Bitbucket Pipelines then displays any failed test results
    in a **Tests** tab. Successful executions can be shown in the log view in the
    **Build** tab. Let’s see how to set this up.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When setting up test reporting, make sure the test results are generated in
    one of the following locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`./**/``surefire-reports/**/*.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`./**/``failsafe-reports/**/*.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`./**/``test-results/**/*.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`./**/``test-reports/**/*.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`./**/``TestResults/**/*.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s now take a look at how to configure testing results on the pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Depending on the language, there are a number of different steps to follow
    to generate test results. Let’s look at each method:'
  prefs: []
  type: TYPE_NORMAL
- en: If you are using the Maven Surefire Plugin in your Maven build job, no special
    configuration is needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are using PHP and testing with PHPUnit, you should include the `--log-junit`
    parameter to generate the log output. The following code snippet illustrates the
    proper command setup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you are developing with .NET, you can use `JUnitTestLogger` to create the
    output in JUnit format. The following code snippet illustrates the setup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '.NET development could also use the `trx2junit` utility to convert the test
    result files from Visual Studio test result format (`.trx`) to JUnit format (`.xml`).
    This is shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You’ve now seen how to prepare test results so they appear automatically in
    logs.
  prefs: []
  type: TYPE_NORMAL
