- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Communication without Mistranslation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This final chapter before the conclusion will deal with anti-patterns centered
    around the way you communicate architecture to different audiences, incorporating
    insights from the new change management section. The first part describes an anti-pattern
    related to information control. Then, we look at a few anti-patterns that relate
    to the clarity of your communication. Third, we examine an anti-pattern specifically
    concerning the way you create architectural artifacts. Finally, we will look at
    how to avoid underestimating the challenge posed by change management. As we’ve
    been doing all along, we will end the chapter by summarizing our key takeaways.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How overcommunication can, in some cases, be worse than under-communication,
    especially when communicating with a generalist audience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How keeping things ambiguous in order to avoid making a decision can result
    in serious damage to your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How people’s seeming inability to understand what you are saying is often a
    symptom of underlying issues you need to address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why straying from standards when documenting technical specifications is almost
    always a bad idea
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How effective change management practices are essential for successful architectural
    implementations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After completing this chapter, you will have a better understanding of how technical
    communication can go wrong. More importantly, you will have picked up a number
    of concrete approaches you can apply to help you avoid common technical communication
    pitfalls.
  prefs: []
  type: TYPE_NORMAL
- en: Communicating too much
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section will explore what happens when you communicate too much in a technical
    context. To do this, we will start by exploring an anti-pattern taken straight
    out of cognitive psychology: cognitive overload.'
  prefs: []
  type: TYPE_NORMAL
- en: Cognitive overload
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Cognitive overload** happens when the amount of information presented becomes
    overwhelming to the recipient to the extent that it impairs action.'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: LilacCo, the world’s leading producer of scented candles, is having major issues
    with its integration landscape. It has a relatively recently purchased MuleSoft
    platform, but it has seen little use, and most integrations still run through
    legacy middleware or point-to-point.
  prefs: []
  type: TYPE_NORMAL
- en: Martin is a technical architect who has been given the task of coming up with
    a solution to the various issues LilacCo is experiencing. The issues include high
    latency and slow performance on many integrations, poor logging and monitoring,
    long and error-prone development cycles, and the inability to create new integrations
    for several key legacy systems.
  prefs: []
  type: TYPE_NORMAL
- en: Martin has thought long and hard about the issue and has concluded that moving
    more systematically to MuleSoft, implementing more event-driven and asynchronous
    integrations, writing some key adaptor APIs in front of older legacy systems,
    and providing a clear pattern for error handling and logging to be used by all
    teams will solve the problem.
  prefs: []
  type: TYPE_NORMAL
- en: It is not an easy fix. Martin has created a slide deck and accompanying report
    numbering hundreds of pages. The material contains many technical diagrams, and
    although he has tried to create appropriate summaries, he feels that there is
    only so far this material can be simplified without losing the essence of what
    is being said.
  prefs: []
  type: TYPE_NORMAL
- en: Martin pitches his new model to the executive board. Unfortunately, the questions
    asked reveal that no one has really understood the message he has tried to convey.
    They get hung up on relatively insignificant details and fail to grasp the overall
    plan.
  prefs: []
  type: TYPE_NORMAL
- en: He is given feedback that his proposed model is too complex and that he needs
    to find a simpler approach. Martin is exasperated. He already felt like the plan
    he had come up with was the simplest possible. The elements all rely on each other,
    and removing any would compromise the approach.
  prefs: []
  type: TYPE_NORMAL
- en: Martin tries to schedule one-to-one conversations with the people he knows best
    on the executive board in order to rerun his key points by them. Even in this
    more intimate context, Martin finds it difficult to bring his points across. The
    key points simply seem to get lost in translation.
  prefs: []
  type: TYPE_NORMAL
- en: Then, Martin is told that a new integration platform vendor has had a pitch
    in front of the executive board and that everyone is very excited about the new
    approach they are bringing. Martin is asked to give feedback, which he does in
    the form of a detailed and nuanced rebuttal of the vendor pitch. He concludes
    that while the new platform indeed has some exciting features, it does not solve
    the fundamental problems LilacCo is facing.
  prefs: []
  type: TYPE_NORMAL
- en: Martin’s feedback, however, accomplishes very little. The vendor proposes to
    do a free **proof of concept** ( **POC** ) to create more comfort in their software’s
    capabilities, which the executive board accepts. Martin is not asked to be part
    of the POC team.
  prefs: []
  type: TYPE_NORMAL
- en: Six weeks later, the POC concludes with roaring success. The team has been able
    to demonstrate all the capabilities required during this period. Of course, it’s
    all on a pilot basis and much complexity remains, but the executive board is confident
    based on the presentation it receives from the team that the new software will
    deliver what it needs.
  prefs: []
  type: TYPE_NORMAL
- en: Martin asks whether he can look into the details of the POC and what has actually
    been demonstrated, but his request is silently ignored. Instead, the vendor sends
    a formal proposal, which is accepted, and a new project to implement the new integration
    platform is underway.
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Cognitive overload** is a general term from psychology for situations where
    our brains are overloaded with information or options to the point where we are
    unable to take the required actions that we would normally be able to in the presence
    of less information. In technical communication, creating cognitive overload by
    including too much information when presenting architectural options is a very
    common anti-pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: This especially happens when we convey information to non-technical audiences.
    For technical audiences, we can, to a large extent, rely on an understanding of
    diagram formats, standard ways of doing things, good practice, architecture patterns,
    and similar.
  prefs: []
  type: TYPE_NORMAL
- en: That reduces the cognitive complexity for such an audience, although complex
    architectures can still be hard to follow even for experienced practitioners.
    However, when you are trying to convey this information to a general audience,
    you cannot rely on these supports, and therefore the task of conveying key trade-offs
    and many moving parts can be extremely difficult.
  prefs: []
  type: TYPE_NORMAL
- en: Proposed solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cognitive overload isn’t a solution per se. What leads to cognitive overload
    is the belief that you, somehow, need to include a certain amount of detail in
    your presentation in order to be fair to your audience or complete in relation
    to your subject.
  prefs: []
  type: TYPE_NORMAL
- en: My personal belief is that a large number of talented architects fall into this
    anti-pattern because of a sense of intellectual honesty. They have considered
    many options and are aware of many arguments and counterarguments for and against
    the solution they are proposing.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, they feel dishonest in simply doubling down on a highly simplified
    version of the option they have chosen to recommend. In scenarios where business
    stakeholders are the ultimate decision-makers, which is often the case even for
    seemingly architectural decisions, that almost inevitably leads to cognitive overload.
  prefs: []
  type: TYPE_NORMAL
- en: Results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The obvious result is a failure of communication. Your main recommendation and
    supporting points are lost in a quagmire of information that your audience is
    unable to process.
  prefs: []
  type: TYPE_NORMAL
- en: That means you lose your audience and their attention and, ultimately, your
    ability to influence them to make the decision you want them to make. Cognitive
    overload leads to inaction, so the most likely result is that nothing will come
    out of what you are proposing because it has not been assimilated.
  prefs: []
  type: TYPE_NORMAL
- en: That also leaves the field open for other players to sell a different message,
    as we saw in our example. It is an unfortunate fact in our industry that it is
    often the most well-placed messaging that leads to technology adoption rather
    than the optimal choice from a technical point of view.
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Effective communication is not something that can be taught in a few sentences.
    However, your takeaway should be that it is important to simplify a complex message
    sufficiently for it to be understandable to your audience.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Structure the message for the audience and their level of understanding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t assume the audience knows even the basics of what you are proposing unless
    you know for a fact that they do
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Focus on a single main message; don’t include lots of subsidiary messages alongside
    the main one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t include all additional considerations and options you have considered
    along the way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use images, graphics, tables, and so on to help get information across
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have backup material ready if anyone wants to dive deeper into an area, but
    don’t include it upfront
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall, you should be cautious about making demands of your audience. They
    have a lot on their plate and limited time to engage with what you have to say.
    Make sure that time counts.
  prefs: []
  type: TYPE_NORMAL
- en: Being unclear in several ways
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we explore two anti-patterns that, in different ways, explore
    intentional and unintentional lack of clarity in technical communication. We start
    by exploring an anti-pattern that seeks to deploy a lack of clarity for a tactical
    purpose but ends up causing adverse effects.
  prefs: []
  type: TYPE_NORMAL
- en: Ambiguous solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Ambiguous solution** proposes to hide away a conflicted or uncertain decision
    behind ambiguous language and representations to postpone the need to make it.'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: GrillCo, a major online retailer focused on outdoor cooking equipment, is facing
    major issues in its order management process. There are frequent unanticipated
    stock-outs, wrong delivery calculations both for duration and costs, and taxes
    are not consistently applied correctly.
  prefs: []
  type: TYPE_NORMAL
- en: This is not entirely an IT problem, and in fact, many areas of process improvement
    have been identified. However, as part of the wider order management transformation,
    GrillCo management has also decided that it needs a new software platform for
    the order management process.
  prefs: []
  type: TYPE_NORMAL
- en: There are, however, several opinions as to which software to get and how to
    go about implementing it. Some support putting it in the Salesforce CRM, using
    the out-of-the-box order management module. Others would prefer dealing with a
    dedicated vendor with a more retail-focused attitude. Finally, IT would prefer
    implementing the functionality themselves, using the microservices architecture
    they have been building up.
  prefs: []
  type: TYPE_NORMAL
- en: Rainer has the technical project management responsibility for the order management
    implementation. He tries to facilitate the discussion between the different proposals,
    but the problem is that nobody seems to know who should be making the decision.
  prefs: []
  type: TYPE_NORMAL
- en: In the meantime, there are many other smaller technical tasks to get on with,
    so Rainer focuses on these, leaving the new order management system as a generic
    capability on diagrams, presentations, and documentation. He figures that a solution
    will be arrived at eventually, so there is no need to rock the boat.
  prefs: []
  type: TYPE_NORMAL
- en: However, as the transformation proceeds on other fronts, the question becomes
    more urgent in the minds of the senior stakeholders. As he has been unable to
    gain consensus by talking to people, he proposes to do a formal vendor selection
    with well-defined criteria and let that be the decision-making process.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, as he starts to prepare the groundwork for the selection process,
    he makes a startling discovery. Two teams have separately gone ahead with completely
    different pilot implementations of the order management software based on their
    own interpretation of requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: The first is within the IT department, where a few developers have started prototyping
    new software to show how flexible and powerful their microservices platform is.
    While it has some good functionality, it does not, in Rainer’s assessment, begin
    to meet the real needs of the business.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second pilot is even further along, already working with mock ordering scenarios
    based on data taken from the existing e-commerce solution. It is based on a piece
    of standard software from a small retail-focused software vendor that is investing
    heavily in making the necessary adaptations to meet GrillCo’s needs. However,
    Rainer again assesses that there is much to be done before this solution might
    be fit for purpose.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A dramatic meeting ensues with the CIO and the IT team on one side and the COO
    and the supply chain team on the other, both championing one of the solutions.
    The meeting ends as a stalemate, and a decision is made to bring in an independent
    consultant to assess the two solutions and make a recommendation.
  prefs: []
  type: TYPE_NORMAL
- en: GrillCo brings in a high-profile and well-respected expert in order management
    solutions who spends a few weeks looking at the pilot software. His assessment
    is damning.
  prefs: []
  type: TYPE_NORMAL
- en: Neither pilot really has a good way of delivering the level of capability GrillCo
    needs. He recommends proceeding with neither solution and instead going back to
    the market to find a better fit. Rainer polishes his presentation on the technology
    vendor selection process and gets to work.
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some decisions are hard to make. This can be because of politics—that is to
    say, not wanting to annoy powerful stakeholders or groups with a decision they
    won’t like. It can also be due to missing information that will only appear at
    a later stage in the process and therefore complicates making a decision now.
  prefs: []
  type: TYPE_NORMAL
- en: The art of avoiding a controversial decision by postponing it is the core of
    the problem addressed by the ambiguous solution anti-pattern. While it can be
    reasonable to take some time to collect more specific information that will significantly
    increase decision quality, taking this too far becomes an anti-pattern, no matter
    whether it is done due to politics or a general fear of getting the decision wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Proposed solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ambiguous solution anti-pattern proposes to handle difficult decisions by
    hiding them behind ambiguity. This can easily be done through things such as capability
    models, by deferring to a separate decision process, or by simply listing multiple
    alternatives—for instance, in diagrams and documentation.
  prefs: []
  type: TYPE_NORMAL
- en: This can be a highly attractive option in a number of cases; for instance, you
    may know that certain very senior stakeholders favor a certain approach that you
    have determined to be unviable. By hiding behind ambiguity, you may hope to postpone
    making this clear until the project is too far along to change things.
  prefs: []
  type: TYPE_NORMAL
- en: You may also, secretly, be hoping that as the project progresses and more information
    becomes available, the decision will become easier; either it will be too late
    to activate some options or the answer will become obvious.
  prefs: []
  type: TYPE_NORMAL
- en: That is to say, you are hoping to not have to handle a situation that has a
    high degree of uncertainty or conflict attached to it by postponing it indefinitely.
    This is very human behavior, but, unfortunately, is a bad architectural practice.
  prefs: []
  type: TYPE_NORMAL
- en: Results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ultimately, of course, you will need to deal with the issue you have been hiding
    away. If you are lucky, the decision will now be easy as most avenues will be
    foreclosed. This is not a good thing, however.
  prefs: []
  type: TYPE_NORMAL
- en: It will rarely be the case that the option that can be implemented most swiftly
    is also the optimal solution. Therefore, your procrastination in dealing with
    the issue will nearly always result in a worse solution than if you had made the
    decision sooner.
  prefs: []
  type: TYPE_NORMAL
- en: There is something to be said for keeping options open when the decision isn’t
    necessary, but if you do it for too long, it will adversely affect your solution.
    Also, keeping options open for too long when it comes to key architectural decisions
    is generally problematic.
  prefs: []
  type: TYPE_NORMAL
- en: If you aren’t lucky, the decision still won’t be obvious; you still must deal
    with uncertainty and conflict, but now it will be compounded by the additional
    time pressure you have added by waiting. This is altogether a worse outcome both
    for you personally and for the project.
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, don’t postpone a decision beyond its last sell-by date. If you don’t
    have the necessary information, make a plan with a clear deadline for getting
    it together. Then, plan a decision-making process that will take place at that
    time whatever else happens.
  prefs: []
  type: TYPE_NORMAL
- en: If the decision is politically unpalatable, try to get your supporters within
    the organization to stand by you as you make and communicate it. There’s always
    a risk of the wrong decision being made for political reasons.
  prefs: []
  type: TYPE_NORMAL
- en: However, even the wrong decision is better than no decision after a point. At
    least you will be making progress and you will be able to start mitigating the
    consequences of a wrong decision sooner.
  prefs: []
  type: TYPE_NORMAL
- en: When decisions are needed, flag them clearly in documentation and presentations
    so that stakeholders are aware the decision is coming. Don’t hide behind vagueness,
    even when it’s easy to do so.
  prefs: []
  type: TYPE_NORMAL
- en: If you can’t decide by consensus, see whether you can get stakeholders to agree
    on a formal decision-making process instead. Often, people find it easier to live
    with the outcome of a formal process than with something that appears as just
    some guy’s opinion.
  prefs: []
  type: TYPE_NORMAL
- en: Groundhog Day
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Groundhog Day anti-pattern** happens when people endlessly ask the same
    questions, even after multiple repeated explanations.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Rolf is leading a local Salesforce implementation for MediCo, a medical device
    manufacturer with a presence in most European markets. The Salesforce implementation
    has been defined by the HQ staff in Paris and is meant to be rolled out as is
    to the various subsidiaries in other countries.
  prefs: []
  type: TYPE_NORMAL
- en: Rolf has been given the responsibility to roll out the system to the German
    subsidiary. The German operation is new to MediCo, having only been acquired the
    previous year. It, therefore, is not tightly integrated into MediCo’s standard
    processes or IT infrastructure. The Salesforce implementation is seen as a way
    to improve upon this state of affairs.
  prefs: []
  type: TYPE_NORMAL
- en: When he delivers the initial presentation on the Salesforce implementation as
    it exists in France and other countries to the German team, he is met with a barrage
    of questions. The team wants to drill into very specific process questions that
    Rolf has no way of answering, as he doesn’t know the details of the German operation.
  prefs: []
  type: TYPE_NORMAL
- en: He takes away a ton of questions, which he tries his best to answer in written
    format. However, he quickly starts feeling like he is playing a game of whack-a-mole.
    Every time he seemingly answers a question, another similar but subtly different
    question pops up from another member of staff.
  prefs: []
  type: TYPE_NORMAL
- en: Rolf starts consolidating all the questions and prepares clear and concise answers
    to all of them. Given the high degree of confusion, he has not been able to make
    any real progress with the implementation, so he decides to give it one more go.
  prefs: []
  type: TYPE_NORMAL
- en: He gathers the German team together one more time to give the team members the
    highlights of the new Salesforce system and as systematically as possible to address
    all the concerns that have been raised so far. To no avail, he is once again met
    with more uncomprehending glances and questions that he thought he had already
    answered more than once.
  prefs: []
  type: TYPE_NORMAL
- en: Frustrated and almost ready to give up, Rolf decides to call one of his old
    mentors in the company, who he knows is aware of the situation in the German subsidiary.
    She tells Rolf that the problem is probably not with his communication skills
    at all.
  prefs: []
  type: TYPE_NORMAL
- en: The staff in the German subsidiary prefer to do things their own way and resent
    the imposition from HQ. Salesforce is just a pretense for voicing that opposition.
    The system could be the most perfect thing since sliced bread, but the German
    team would still oppose it out of principle.
  prefs: []
  type: TYPE_NORMAL
- en: With his new knowledge, Rolf decides on a new plan. He takes the bold decision
    to put things out in the open. He holds another presentation, where he makes it
    clear that he is aware of the real reason for the opposition, and rather than
    trying to address all the concerns, he invites the team into the process to see
    how it might find a way of making the new system its own.
  prefs: []
  type: TYPE_NORMAL
- en: While the system is what it is and HQ is not about to approve a lot of local
    changes, how the German operation decides to adopt it and integrate it into its
    own processes is up for grabs. Rolf opens up the implementation to the German
    team and welcomes its suggestions for how it might best use the new CRM. Slowly,
    some people start to engage, and while the timeline has to be moved a couple of
    times, eventually, adoption is successful.
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes, people just don’t seem to understand what you’re saying. No matter
    how hard you try to explain a point or how many times you explain it, there doesn’t
    seem to be any way to get your point across.
  prefs: []
  type: TYPE_NORMAL
- en: The Groundhog Day anti-pattern, named after the movie of the same name, describes
    this situation where you can’t seemingly communicate something enough times for
    it to make any difference.
  prefs: []
  type: TYPE_NORMAL
- en: That means you feel like you are banging your head against a wall without making
    the slightest mark. Often, this is because you aren’t really engaging with the
    underlying issues that are in play.
  prefs: []
  type: TYPE_NORMAL
- en: Proposed solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you engage in the Groundhog Day anti-pattern, you respond to the situation
    of having seemingly never-ending queries about the same issues by repeating yourself
    a lot. You may repeat yourself in different languages or different modalities,
    but you are reiterating the same message.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, it can make life feel like an endless repetition and like you are
    making no progress at all. You question both your own sanity and the sanity of
    the people doing the continuous questioning.
  prefs: []
  type: TYPE_NORMAL
- en: That’s generally because you are not really engaging the underlying reason for
    why the questions are asked. Generally, when you are asked the same thing more
    than a couple of times by the same people, some kind of resistance is at play.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe, the people feel like a bad decision has been made over their heads and
    they are trying to pick it apart. Maybe they are anxious that the direction you
    are proposing will lead to bad personal consequences for them.
  prefs: []
  type: TYPE_NORMAL
- en: There are many reasons people might have to resist your message that have nothing
    to do with how you present or communicate that message. In this case, the problem
    becomes more about change management than about communication, and being aware
    enough to catch this phenomenon is a key soft skill to acquire if you are a practicing
    architect.
  prefs: []
  type: TYPE_NORMAL
- en: Results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The results of the Groundhog Day anti-pattern are substantially negative both
    on a personal level and for your project:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, you get nowhere with the message you are trying to communicate,
    which usually needs to be accepted by the audience to which you are communicating
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That leaves you frustrated as you ponder how to better communicate your message
    to the audience and continuously fail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It leaves the people you are communicating with frustrated as they don’t feel
    you are listening to their real concerns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The project, in the meanwhile, usually stalls and progress on key areas can
    be blocked due to the communication impasse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall, this anti-pattern can be a serious strain on your project and you.
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first step is to recognize that the problem exists and is not about you
    finding a better way of saying the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, you should do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Once you begin hearing the same questions over and over again in slightly different
    variations, pause and take a step back
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Engage with stakeholders and allies to figure out what are the real reasons
    behind the resistance that you are facing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you find that there are reasons that lie behind the consistent questioning
    that go beyond just comprehension, work actively to find an alternative approach
    without compromising your core goals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, apply good change management practices to help drive the needed transformation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can’t always give people what they want, but you can find a way to acknowledge
    their real concerns and be open to their feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing diagrams with excess creativity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section explores what happens when you try to communicate technical information
    with too much creativity rather than relying on established practice within your
    community. We do this by looking at the non-standard documentation anti-pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Non-standard documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Non-standard documentation** refers to an anti-pattern where teams produce
    technical documentation in an idiosyncratic format rather than relying on standard
    practice.'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SafeCo, the leading provider of security solutions for facility management,
    is in the visioning phase of a new Salesforce implementation. It is trying to
    come up with a strategy for completely transforming its business using technology
    and has bought into Salesforce as part of the solution.
  prefs: []
  type: TYPE_NORMAL
- en: Qin, a strategy manager with SafeCo, is leading the visioning exercise and is
    supported by an external consultancy with particular strength in design thinking.
    They run a series of highly engaging workshops that result in a vision and key
    requirements for the new strategic technology platform.
  prefs: []
  type: TYPE_NORMAL
- en: The outputs of the workshop are documented in a fairly large number of rich
    pictures and ad hoc diagrams, many combining elements of process design, data
    models, and UX prototypes. The senior managers who have been part of the workshop
    like the outputs so much that they decide to include them in the **request for
    proposal** ( **RFP** ) material that will be sent to potential vendors.
  prefs: []
  type: TYPE_NORMAL
- en: SafeCo shortlists three vendors that all make explicit reference to the workshop
    outputs in their RFP responses. After final presentations, SafeCo selects one
    of the largest global Salesforce partners to carry out its implementation in line
    with requirements as principally stated by the workshop outputs.
  prefs: []
  type: TYPE_NORMAL
- en: However, once the vendor has mobilized and the project enters a formal discovery
    phase, it becomes clear that there are problems. Many features and requirements
    that SafeCo thought were obvious from the provided documents have not been included
    in the vendor’s estimates.
  prefs: []
  type: TYPE_NORMAL
- en: SafeCo pushes hard on the vendor, pointing to the documentation provided with
    the RFP. However, the vendor disputes the interpretation of the documentation,
    and it proves impossible to demonstrate clear intent for many of the points under
    dispute.
  prefs: []
  type: TYPE_NORMAL
- en: For a moment, SafeCo considers going back to the market, but the vendor was
    selected as the only one that had the necessary mix of competencies available
    on the timeline it needed. Senior management is not willing to compromise on the
    project deadline so redoing the procurement doesn’t seem feasible.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the only thing to do is to negotiate an agreement for additional
    features that the vendor had not included. After some amount of wrangling, a compromise
    is reached that leaves neither party fully satisfied.
  prefs: []
  type: TYPE_NORMAL
- en: The price of the project goes up but not by as much as the vendor wanted. In
    addition, the vendor insists on more formal documentation of the requirements
    to be implemented during the project, taking away some of the flexibility that
    was part of the initial plan. With the compromise in place, the project can finally
    commence.
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The problem addressed by the non-standard documentation anti-pattern is how
    to best communicate complex requirements, architectures, designs, and general
    expectations of technical systems. This touches on the differences between communicating
    general concepts to a generalist audience versus communicating technical concepts
    to a technical audience.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, highly visual and engaging material tends to play well when in a
    workshop setting, such as defining the vision for a new system or how to use an
    enterprise software platform such as Salesforce for strategic advantage. In this
    case, you want to use formats that resonate with your audience and build a common
    understanding.
  prefs: []
  type: TYPE_NORMAL
- en: However, this approach can lead you into trouble when communication needs to
    be precise and technically correct.
  prefs: []
  type: TYPE_NORMAL
- en: Proposed solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Non-standard documentation proposes that the best documentation is the one clearest
    to the key stakeholders involved in producing it, whatever that might be. This
    is an extremely seductive position because it is true in many cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, the preceding statement is true in the following cases:'
  prefs: []
  type: TYPE_NORMAL
- en: If you are trying to gain alignment about a vision or project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are trying to foster mutual understanding within an organization about
    a certain topic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are trying to create general awareness of an issue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In all these cases, the perfect documentation is the one that works well for
    the audience. However, when it comes to technical specifications, architectures,
    and designs, this ceases to be the case.
  prefs: []
  type: TYPE_NORMAL
- en: Results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Normal language tolerates a lot of ambiguity. The same is true of most visual
    representations of concepts. However, ambiguity is the mortal enemy of technical
    specification.
  prefs: []
  type: TYPE_NORMAL
- en: 'To reduce the amount of ambiguity when writing technical specifications, whether
    of requirements, architectures, designs, or in general, we use a number of tools.
    These include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Language that is stripped of everyday niceties and strives consistently for
    clarity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Referring to technical standards that have a well-defined common understanding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Referring to patterns that are common within our technical community and likely
    to be readily understood by the recipients of our communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Referring to conventions or common ways of doing things that are common within
    our technical community and likely to be readily understood by the recipients
    of our communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using standard formats for documentation that have a structure sure to address
    the common concerns expected by members of our technical community
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using standard formats for diagrams that are well understood by members of our
    technical community
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these elements help to reduce the ambiguity of technical specifications,
    although even with all of these in play, there is still plenty of scope for misunderstanding,
    as any experienced architect will tell you.
  prefs: []
  type: TYPE_NORMAL
- en: That is why there are standard ways, such as user stories or a traditional requirements
    specification, to convey requirements, and standard diagram types, such as system
    landscapes, process diagrams, and data models, to convey technical design.
  prefs: []
  type: TYPE_NORMAL
- en: If you stray from these standards, you add to the total ambiguity, and that
    will cause communication trouble, which can be expensive as your vendors or staff
    will not understand precisely what is needed. There is enough trouble with communication
    even with precisely defined requirements and design—don’t add to it.
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Given the description in the previous section, it’s probably not difficult
    to surmise what you should do instead. Let us list them for good measure:'
  prefs: []
  type: TYPE_NORMAL
- en: Write your technical specifications with a view to reducing ambiguity. Strive
    for clarity above all else.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rely as much as possible on standard diagram types, ways of presenting material,
    naming, and so on whenever you are creating a technical specification that needs
    to be shared.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Follow the patterns and conventions common within your technical community.
    For Salesforce professionals, this generally means following the approach that
    Salesforce itself uses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That way, you can communicate clearly with vendors and new technical people
    that you hire, avoiding the parts of ambiguity that are avoidable.
  prefs: []
  type: TYPE_NORMAL
- en: Remember—in contrast with most communication where you are trying to make a
    general point, with technical communication, you are trying to make an exact one.
    That is a very hard thing to do, as it turns out.
  prefs: []
  type: TYPE_NORMAL
- en: For Salesforce, specifically, the *Salesforce Architects* website ( [https://architect.salesforce.com/diagrams](https://architect.salesforce.com/diagrams)
    ), will help you get a good overview of resources shared by Salesforce itself
    now available to all architects to avoid re-inventing the wheel when documenting
    and presenting Salesforce solutions. For readers interested in preparing for the
    CTA board, this is a great place to keep in mind.
  prefs: []
  type: TYPE_NORMAL
- en: Mismanaging change
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we talk about mismanaging change. Mismanaging change can lead
    to significant setbacks for organizations, often resulting from a lack of communication,
    insufficient training, or failure to involve stakeholders in the process. Common
    pitfalls include underestimating the resistance to change, neglecting to clearly
    define goals and expectations, and overlooking the importance of a structured
    change management plan. These mistakes can create confusion among employees, decrease
    morale, and ultimately hinder the organization’s ability to adapt, leading to
    wasted resources and missed opportunities for growth. It is essential for leaders
    to be aware of these challenges and to implement strategies that promote a smooth
    transition while fostering a culture that embraces change.
  prefs: []
  type: TYPE_NORMAL
- en: Ignoring stakeholder concerns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Ignoring stakeholder concerns** is an anti-pattern where implementation teams
    push forward with Salesforce development and customization while disregarding
    or minimizing critical input from key stakeholders. While often rooted in valid
    technical considerations, this approach ultimately leads to solutions that fail
    to meet business needs.'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MedSupply, a growing medical supplies distributor, decided to modernize their
    sales operations by implementing Salesforce. The company’s legacy CRM system was
    showing its age, and users had been complaining about its clunky interface and
    limited functionality for years. The IT team, led by senior developer Marcus,
    was excited about the opportunity to build something modern and technically sophisticated.
  prefs: []
  type: TYPE_NORMAL
- en: The sales team had a complex quote-to-order process that involved multiple approvals
    and specific regulatory compliance checks. Sarah, the sales operations manager,
    tried repeatedly to schedule meetings with Marcus’s team to walk through their
    current process and explain their requirements in detail. However, Marcus had
    valid concerns about replicating overly complex legacy processes in Salesforce.
    From his perspective, many of the existing process steps seemed to be artifacts
    of the old system’s limitations rather than genuine business requirements.
  prefs: []
  type: TYPE_NORMAL
- en: During the initial requirements gathering, Sarah expressed concerns about certain
    compliance checks that needed to happen before quotes could be sent to customers.
    She explained that their current process required cross-referencing multiple databases
    to ensure they weren’t selling restricted medical supplies to unlicensed facilities.
    Marcus believed that Salesforce’s validation rules and approval processes could
    streamline these checks significantly, eliminating what he saw as redundant steps
    in the current process.
  prefs: []
  type: TYPE_NORMAL
- en: The development team created what they considered an elegant solution using
    Salesforce’s standard quote functionality with some custom approval processes.
    They were proud of how they leveraged platform features and kept customization
    to a minimum, which would make the system easier to maintain and upgrade. When
    Sarah pointed out that the solution didn’t account for their need to maintain
    detailed audit trails of all compliance checks, Marcus insisted that Salesforce’s
    standard history tracking would be sufficient, arguing against building custom
    audit functionality that would require significant maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: During UAT, the inherent tension between technical elegance and business requirements
    became apparent. Sales reps found the new process cumbersome because it didn’t
    match their workflow, though some of their complaints stemmed from unfamiliarity
    with Salesforce’s interface paradigms. The compliance team discovered they couldn’t
    perform all necessary checks within the system. Sarah raised these issues in project
    meetings, but the IT team, seeing the elegance of their solution, characterized
    many of these concerns as “resistance to change” and “user training issues.”
  prefs: []
  type: TYPE_NORMAL
- en: The system went live as scheduled, despite unresolved concerns from the sales
    and compliance teams. Within the first week, two major problems emerged. First,
    sales reps were taking twice as long to process quotes because the system forced
    them into a workflow that didn’t match their needs. Second, and more seriously,
    the compliance team discovered that some quotes had been sent to customers without
    complete regulatory checks because the system hadn’t enforced all required validations.
  prefs: []
  type: TYPE_NORMAL
- en: After a near miss where they almost shipped restricted supplies to an unlicensed
    facility, senior management intervened. The company had to roll back to their
    legacy system while they reassessed their approach. The project had cost over
    $1,500,000 and resulted in zero improvement to their sales operations.
  prefs: []
  type: TYPE_NORMAL
- en: The problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ignoring stakeholder concerns occurs when implementation teams dismiss or minimize
    valid input from key stakeholders during Salesforce projects. However, the root
    of this anti-pattern is more complex than simple dismissal—it often stems from
    genuine technical considerations and the challenge of balancing competing project
    objectives.
  prefs: []
  type: TYPE_NORMAL
- en: Technical teams typically have valid reasons for wanting to stick close to standard
    Salesforce functionality. They understand that heavily customized solutions are
    harder to maintain, more prone to breaking during updates, and more expensive
    in the long run. They’ve often seen the problems that arise when organizations
    customize themselves into a corner, creating systems that are effectively unmaintainable.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, stakeholders often have legitimate requirements that push
    against platform standards. These might stem from regulatory requirements, established
    business processes, or genuine efficiency concerns. The challenge lies in distinguishing
    between stakeholder preferences that could be addressed through training and change
    management, and fundamental requirements that genuinely require technical accommodation.
  prefs: []
  type: TYPE_NORMAL
- en: This anti-pattern is particularly dangerous because both sides often believe
    they are making the right long-term decision for the organization. Technical teams
    push for standardization and maintainability, while business stakeholders advocate
    for functionality and familiarity. Without proper mediation, this tension often
    resolves in favor of technical considerations simply because the technical team
    has more direct control over the implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Proposed solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The anti-pattern presents itself as an efficient approach to Salesforce implementation
    that promises to deliver results quickly by relying on the platform’s standard
    functionality and the implementation team’s expertise. This solution appears compelling
    because it addresses very real technical concerns about maintainability and sustainability.
  prefs: []
  type: TYPE_NORMAL
- en: The proposed solution typically emphasizes platform best practices and standard
    functionality, positioning stakeholder concerns about process fit as change management
    issues rather than technical requirements. This approach isn’t entirely wrong—many
    legacy business processes can and should be simplified when moving to a new platform.
    However, it tends to swing too far in the direction of platform purity, dismissing
    valid business requirements in the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'This approach can seem attractive because it promises significant benefits:
    faster implementation times, lower development costs, and easier maintenance.
    These benefits are real, but they need to be weighed against the costs of forcing
    business processes to conform to platform standards in cases where those standards
    don’t fully meet business needs.'
  prefs: []
  type: TYPE_NORMAL
- en: Results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When stakeholder concerns are ignored, the results are usually negative for
    both the technical implementation and business operations. User adoption suffers
    not just because of change resistance, but because the system genuinely fails
    to support critical business processes. While some user complaints might indeed
    reflect change management issues, others highlight real gaps in functionality
    that impede business operations.
  prefs: []
  type: TYPE_NORMAL
- en: The technical team’s vision of a clean, maintainable implementation often proves
    illusory. As business needs assert themselves, the system typically accrues a
    layer of hasty customizations and workarounds that are far messier than a properly
    planned custom solution would have been. These emergency fixes often violate platform
    best practices more egregiously than a deliberately designed custom solution would
    have.
  prefs: []
  type: TYPE_NORMAL
- en: The financial impact extends beyond the immediate project costs. While custom
    development is expensive, the cost of business disruption from an inadequate system
    can be far higher. However, it’s equally true that over-customized systems can
    become expensive maintenance burdens that need to be entirely replaced after a
    few years.
  prefs: []
  type: TYPE_NORMAL
- en: The organizational impact often results in a false dichotomy between “technical
    best practices” and “business requirements” that can poison future projects. Technical
    teams become more convinced that business users make unreasonable demands, while
    business users become convinced that technical teams don’t understand or care
    about their needs.
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Avoiding this anti-pattern requires replacing the false dichotomy between technical
    excellence and business requirements with a more nuanced approach that recognizes
    both technical and business constraints as essential considerations in system
    design.
  prefs: []
  type: TYPE_NORMAL
- en: Effective stakeholder engagement shouldn’t mean uncritically accepting all stakeholder
    requests, but rather creating a genuine dialog about business needs and technical
    constraints. Technical teams should explain the long-term maintenance implications
    of various approaches, while business stakeholders should clarify which requirements
    are genuine business needs versus preferences based on current processes.
  prefs: []
  type: TYPE_NORMAL
- en: The technical approach needs to balance platform best practices with business
    requirements. Rather than starting from either platform features or business processes,
    teams should begin by understanding the core business objectives and constraints.
    Solutions should thoughtfully blend platform capabilities with business requirements,
    using custom development judiciously where it genuinely adds value.
  prefs: []
  type: TYPE_NORMAL
- en: Requirements gathering needs to go beyond documenting current processes or platform
    capabilities. Teams need to understand why processes exist in their current form,
    distinguishing between historical artifacts and genuine business needs. This understanding
    helps identify opportunities where process changes might be better than technical
    customization, while also highlighting areas where customization is truly necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation should be guided by business value and technical sustainability
    rather than either platform purity or process preservation. Teams should be willing
    to customize when standard functionality doesn’t meet critical needs, but should
    also be willing to challenge stakeholders on process changes when standard functionality
    offers a simpler solution.
  prefs: []
  type: TYPE_NORMAL
- en: Effective governance means creating a balanced decision-making process that
    gives appropriate weight to both technical and business concerns. This requires
    technical leaders who understand business impacts and business leaders who understand
    technical implications. Regular checkpoints should evaluate both technical quality
    and business fit, with clear escalation paths when these goals conflict.
  prefs: []
  type: TYPE_NORMAL
- en: By following these better solutions, organizations can create Salesforce implementations
    that balance technical excellence with business requirements. The key is recognizing
    that both technical best practices and business requirements represent real constraints
    that must be thoughtfully balanced, rather than competing priorities where one
    must triumph over the other.
  prefs: []
  type: TYPE_NORMAL
- en: Underestimating the impact of change
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Underestimating the impact of change** is an anti-pattern where implementation
    teams fail to fully appreciate and plan for the cascading effects that modifications
    to a Salesforce org can have across the entire ecosystem, leading to widespread
    disruption and technical debt.'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Global Manufacturing Corp** ( **GMC** ) has been using Salesforce for five
    years as their primary CRM platform. Their implementation has grown organically
    to include Sales Cloud, Service Cloud, and multiple custom objects supporting
    various business processes. The system serves over 2,000 users across sales, customer
    service, and operations teams.'
  prefs: []
  type: TYPE_NORMAL
- en: Sarah, a senior Salesforce administrator, receives what seems like a straightforward
    request from the VP of sales. The sales team wants to modify the opportunity stage
    field to better align with their evolved sales process. The change involves adding
    two new stages and splitting an existing stage into two more granular ones.
  prefs: []
  type: TYPE_NORMAL
- en: The request appears simple enough—it’s just updating a picklist field that’s
    been stable for years. Sarah’s initial assessment suggests this is a minor change
    that could be implemented within a day. She plans to make the change directly
    in production during a quiet period, seeing no need for extensive testing or communication
    given the apparently limited scope.
  prefs: []
  type: TYPE_NORMAL
- en: What Sarah doesn’t fully consider is how deeply embedded the opportunity stage
    field is within GMC’s Salesforce ecosystem. The field drives numerous automated
    processes, including multiple approval workflows that trigger based on stage changes,
    complex forecasting rules used by finance, integration with their ERP system that
    initiates order processing, dozens of reports and dashboards used across the organization,
    several third-party apps that rely on standard opportunity stages, and custom
    commission calculations based on stage progression.
  prefs: []
  type: TYPE_NORMAL
- en: Sarah implements the change on a Tuesday morning. By Wednesday, the problems
    start surfacing. The finance team discovers their forecasting reports are showing
    incorrect numbers because the new stages don’t map to their established forecasting
    categories. The VP of finance is furious because they’re in the middle of quarterly
    planning.
  prefs: []
  type: TYPE_NORMAL
- en: The sales operations team finds that their commission calculations are failing
    because the logic doesn’t account for the new stages. Several sales reps are concerned
    about how this will affect their commission payments. The integration with their
    ERP system starts throwing errors because it hasn’t been updated to handle the
    new stage values, causing orders to get stuck in processing. Multiple dashboards
    across the organization show blank values or incorrect data, prompting a flood
    of help desk tickets. The third-party sales analytics tool they use stops syncing
    data correctly, breaking several executive dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: What started as a seemingly simple change has cascaded into a crisis affecting
    multiple departments. Sarah and her team spend the next two weeks scrambling to
    fix these issues, requiring emergency meetings with finance to redesign forecasting
    rules, urgent updates to commission calculation logic, coordination with their
    integration team to modify the ERP interface, recreation of numerous reports and
    dashboards, and multiple communications to users explaining the issues and timelines
    for resolution. The incident prompts a formal review by IT governance, and GMC
    realizes they need a more robust change management process for their Salesforce
    org.
  prefs: []
  type: TYPE_NORMAL
- en: The problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The underestimating the impact of change anti-pattern occurs when teams fail
    to recognize the interconnected nature of modern Salesforce implementations. This
    anti-pattern is particularly dangerous because it often starts with changes that
    appear simple and localized but have far-reaching consequences.
  prefs: []
  type: TYPE_NORMAL
- en: The problem manifests through failure to map dependencies across the complex
    ecosystem of modern Salesforce organizations, where seemingly isolated components
    are often deeply interconnected through automation, integrations, and reporting
    relationships. Teams frequently conduct only surface-level reviews of proposed
    changes, missing critical dependencies and downstream effects. Testing often focuses
    only on the immediate functionality being changed, rather than the entire chain
    of affected systems and processes. Teams may fail to identify all groups affected
    by a change, leading to inadequate communication and preparation.
  prefs: []
  type: TYPE_NORMAL
- en: This anti-pattern is especially common in mature Salesforce implementations
    where the original architects and developers may have moved on, taking with them
    crucial knowledge about system dependencies and design decisions. The complexity
    of modern Salesforce implementations means that even small changes can have ripple
    effects throughout the organization, affecting processes, integrations, and reporting
    in ways that might not be immediately obvious.
  prefs: []
  type: TYPE_NORMAL
- en: Proposed solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The apparent solution that leads to this anti-pattern is to treat Salesforce
    changes as isolated, technical modifications that can be implemented quickly and
    directly. This approach seems attractive because it promises faster delivery of
    requested changes, reduces overhead and bureaucracy, minimizes resource requirements,
    appears to simplify the change process, and reduces initial planning effort.
  prefs: []
  type: TYPE_NORMAL
- en: Teams often justify this approach by pointing to Salesforce’s robust platform
    capabilities and built-in safeguards. They might argue that since Salesforce handles
    many dependencies automatically, extensive impact analysis isn’t necessary. This
    mindset is particularly tempting in organizations where there’s pressure to deliver
    changes quickly, resources are constrained, documentation is incomplete, the system
    has grown organically without strict governance, or the team has successfully
    made similar changes in the past without issues.
  prefs: []
  type: TYPE_NORMAL
- en: The seduction of this approach lies in its apparent efficiency and the immediate
    gratification it provides to stakeholders requesting changes. It can seem like
    a pragmatic response to business demands, especially when teams are under pressure
    to deliver quickly or when resources are limited.
  prefs: []
  type: TYPE_NORMAL
- en: Result
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When teams fall into the underestimating the impact of change anti-pattern,
    the consequences can be severe and far-reaching. The immediate technical issues
    often manifest as breaking changes in integrations and automated processes, data
    integrity problems, performance degradation, failed batch jobs and automation,
    and incorrect calculations and workflows.
  prefs: []
  type: TYPE_NORMAL
- en: The business impact can be devastating, with disruption to critical business
    processes, inaccurate reporting and forecasting, financial implications from incorrect
    calculations, lost productivity across multiple departments, and decreased user
    trust in the system. These immediate problems often cascade into long-term consequences
    including accumulated technical debt from rushed fixes, degraded system documentation,
    increased resistance to future changes, higher maintenance costs, and reduced
    system reliability.
  prefs: []
  type: TYPE_NORMAL
- en: The anti-pattern often creates a vicious cycle where emergency fixes introduce
    additional unplanned changes, potentially causing further issues that require
    more rushed solutions. This can lead to a deteriorating situation where each fix
    introduces new problems, and the overall stability and reliability of the system
    gradually degrades.
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To avoid the underestimating the impact of change anti-pattern, organizations
    should implement a comprehensive change management approach that fundamentally
    shifts how changes are evaluated and implemented. The key is to move from a reactive
    to a proactive stance on change management.
  prefs: []
  type: TYPE_NORMAL
- en: A robust impact analysis process forms the foundation of better practice. Organizations
    need to maintain detailed system documentation and dependency maps, using automated
    tools to identify field and object dependencies where possible. Regular system
    audits help understand integration points, while a comprehensive test inventory
    ensures nothing is overlooked during change implementation.
  prefs: []
  type: TYPE_NORMAL
- en: The change process itself needs careful structuring. This means implementing
    a formal change advisory board for significant modifications, establishing clear
    criteria for what constitutes a major versus minor change, and requiring documented
    impact assessments before approving changes. A standardized change request template
    should prompt consideration of dependencies and potential impacts across the system.
  prefs: []
  type: TYPE_NORMAL
- en: Testing strategy becomes particularly crucial in avoiding this anti-pattern.
    Organizations need to maintain multiple sandbox environments for different testing
    purposes and implement automated regression testing where possible. End-to-end
    testing of all affected processes, including integration testing, should become
    standard procedure for any significant change.
  prefs: []
  type: TYPE_NORMAL
- en: Stakeholder management plays a vital role in successful change implementation.
    Organizations should maintain a clear understanding of which groups are affected
    by different system components and establish clear communication protocols for
    system changes. Feedback channels for users to report issues and a visible change
    calendar help maintain transparency and trust.
  prefs: []
  type: TYPE_NORMAL
- en: Risk mitigation strategies need to be built into the change process. This includes
    developing rollback plans for all significant changes, implementing changes in
    phases when possible, scheduling changes during appropriate business windows,
    and maintaining emergency response procedures for critical issues.
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge management becomes a crucial element in preventing this anti-pattern.
    Organizations need to document all system dependencies and integration points,
    maintain updated process flows and system architecture diagrams, and create a
    knowledge base of previous changes and their impacts. Regular training for team
    members on system architecture and dependencies helps maintain awareness of the
    system’s complexity.
  prefs: []
  type: TYPE_NORMAL
- en: The key principle to remember is that the cost of proper planning and impact
    analysis is almost always lower than the cost of recovering from a poorly implemented
    change. In the Salesforce ecosystem, where changes can have widespread effects,
    it’s essential to maintain a healthy respect for the complexity of the system
    and the potential impact of even seemingly minor modifications. Success in avoiding
    this anti-pattern comes not from avoiding changes, but from approaching them with
    the appropriate level of diligence and respect for their potential impact.
  prefs: []
  type: TYPE_NORMAL
- en: Now, having covered the patterns for this chapter, let us proceed to discuss
    the key takeaways.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing the takeaways
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will abstract a bit from the specific patterns and instead
    try to pull out the wider learning points you can use in your day-to-day work
    as a Salesforce architect or in preparing for the CTA review board.
  prefs: []
  type: TYPE_NORMAL
- en: 'When architecting Salesforce solutions, you should be mindful of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t include too much information when presenting your architecture to business
    stakeholders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instead, focus on your main message and include only essential supporting information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t feel bad about not including all the additional considerations you had
    in coming up with your solution. If anybody wants more details, they can ask for
    them afterward.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t postpone decisions beyond the latest point it makes sense to take them,
    even if making a decision is hard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a decision is controversial or politically sensitive, deferring to a formal
    decision process can provide a way forward.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have a situation where it seems like you can’t get your audience to understand
    you, you should start suspecting that there are some underlying sources of resistance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In that case, you will most likely need to focus on the change management aspects
    of the situation before you can make real progress.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When it comes time to prepare documentation for a technical audience, whether
    an external audience or your internal technical teams, you should be rigorous
    about sticking to accepted practice within your technical community.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For Salesforce professionals, that generally means adopting the practices disseminated
    by Salesforce itself.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In preparing for the CTA review board, you should be mindful of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Be short and crisp when presenting your solutions. The judges are experienced
    architects, so you can rely on a lot of background knowledge.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include a clear justification of your recommendations but do not dwell on alternatives.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t include additional considerations that are not essential to your main
    point. If anybody wants to test your thinking, they will do so in the Q&A.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ambiguity is nobody’s friend. Don’t present solutions that aren’t clear or fail
    to make important architectural decisions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The judges are highly experienced in ferreting out areas where you are missing
    clarity, so if you aren’t sure what the right decision is, you should make one
    anyway.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the judges ask the same or nearly the same question multiple times, they
    are probably hinting at an area of weakness in your solution that you may want
    to reconsider on the fly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the standard diagrams and presentation formats that have been successful
    for previous CTA candidates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do things the same way repeatedly in your mock exams to develop facility and
    speed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have now covered the material for this chapter and are ready to proceed.
    First, however, we will summarize our learning.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how communication can seriously affect the outcomes
    of our projects. You can have the best architecture in the world and it can still
    fail to make any headway if you fail to communicate it properly or fail to deal
    with the resistance it engenders in your target audience.
  prefs: []
  type: TYPE_NORMAL
- en: This can be dispiriting to some architects of a more rationalistic bend. Surely,
    the facts and substance should be the determining factors. Unfortunately, in most
    organizations, better communication skills will beat stronger technical architecture
    skills in terms of getting things done.
  prefs: []
  type: TYPE_NORMAL
- en: The good thing is that communication skills, as with all skills, can be learned.
    There isn’t anything particularly hard about the ways in which you need to communicate
    to have greater success as an architect—it is just something that takes some practice.
  prefs: []
  type: TYPE_NORMAL
- en: We have now covered all the subject matter of the book and are ready to proceed
    to the conclusion, where we will summarize the journey we’ve been on together
    and look at where to go from here.
  prefs: []
  type: TYPE_NORMAL
