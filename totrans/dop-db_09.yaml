- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Design and Implementation
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计与实现
- en: The role of a DevOps **Database Administrator** (**DBA**) is a crucial one as
    it bridges a gap – that between the database and the rest of the application.
    In traditional environments, changes to the database are often a source of risk
    and delay in software releases. DBAs are usually seen as gatekeepers, carefully
    guarding the data and ensuring its integrity, often at the expense of speed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps **数据库管理员** (**DBA**) 的角色至关重要，因为它弥合了数据库与其他应用之间的差距。在传统环境中，对数据库的更改往往是软件发布中的风险和延误来源。DBA
    通常被视为守门人，小心保护数据并确保其完整性，往往以牺牲速度为代价。
- en: However, in a DevOps culture, the DBA’s role must evolve. Instead of being a
    gatekeeper, the DevOps DBA becomes a facilitator, helping the development and
    operations teams to work with the database effectively and efficiently without
    compromising its reliability, integrity, or security.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在 DevOps 文化中，DBA 的角色必须发展。DevOps DBA 不再是守门人，而是成为促进者，帮助开发和运维团队有效高效地与数据库合作，同时不妥协数据库的可靠性、完整性或安全性。
- en: A DevOps DBA maintains the database in production environments, troubleshoots
    any issues, and is actively involved in the design and decision-making processes.
    They play a vital role in making sure that the database integrates smoothly with
    the CI/CD pipeline. They use infrastructure as code to create and manage databases,
    allowing for consistency across all environments and making the creation and teardown
    of databases quicker and more efficient.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps DBA 负责维护生产环境中的数据库，解决任何问题，并积极参与设计和决策过程。他们在确保数据库与 CI/CD 流水线顺利集成方面发挥着至关重要的作用。他们使用基础设施即代码来创建和管理数据库，从而在所有环境中保持一致性，使得数据库的创建与销毁更加快速高效。
- en: They work with version control systems to track changes to the database schema,
    just like developers do with application code. They’re responsible for automating
    database tasks wherever possible, reducing the potential for human error and freeing
    up their own time to focus on higher-value activities.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 他们与版本控制系统一起工作，跟踪数据库架构的变化，就像开发人员对待应用代码一样。他们负责在可能的情况下自动化数据库任务，减少人为错误的可能性，并腾出时间专注于更高价值的活动。
- en: In performance tuning, a DevOps DBA will use monitoring tools to keep an eye
    on the database’s performance and make the necessary adjustments to ensure it’s
    running as efficiently as possible. When it comes to security, they are in charge
    of implementing measures to protect the data and ensure the organization is in
    compliance with relevant laws and regulations.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在性能调优方面，DevOps DBA 会使用监控工具来监控数据库的性能，并进行必要的调整，以确保其运行尽可能高效。在安全性方面，他们负责实施保护数据的措施，并确保组织符合相关的法律法规。
- en: The DevOps DBA is a communicator and collaborator, working closely with developers,
    operations staff, and other stakeholders. They help to break down the traditional
    silos, sharing their knowledge and expertise to enable everyone to work with the
    database more effectively.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps DBA 是一名沟通者和协作者，与开发人员、运维人员和其他相关方密切合作。他们有助于打破传统的隔阂，分享他们的知识和专业技能，使每个人都能更有效地与数据库合作。
- en: In conclusion, the role of a DevOps DBA in modern software development is vital.
    With their unique skills and perspective, they are perfectly placed to help bring
    about a truly cross-functional DevOps culture that values collaboration, shared
    responsibility, and a focus on delivering value to the end user.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，DevOps DBA 在现代软件开发中的角色至关重要。凭借其独特的技能和视角，他们能够帮助实现真正的跨职能 DevOps 文化，重视协作、共同责任并关注为最终用户提供价值。
- en: 'The following are the main topics to be covered in this chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要主题：
- en: Designing data-persistence technologies
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计数据持久化技术
- en: Implementing data-persistence technologies
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现数据持久化技术
- en: Database provisioning and Infrastructure as Code
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库配置与基础设施即代码
- en: Database version control and CI/CD
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库版本控制与CI/CD
- en: Database performance tuning
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库性能调优
- en: Security and compliance
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性与合规性
- en: Collaboration and communication
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协作与沟通
- en: Designing data-persistence technologies
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计数据持久化技术
- en: In the ever-evolving landscape of technology, the manner in which data is stored,
    retrieved, and manipulated plays a pivotal role in determining the efficiency
    and reliability of systems. At the heart of this is the art and science of database
    design, which serves as the foundation for many applications, from simple websites
    to sophisticated machine learning models. Mastering the principles of database
    design, including understanding, organizing, maintaining, and securing data, is
    indispensable for anyone aiming to leverage the full potential of modern systems.
    Moreover, as database technologies evolve and diversify, the choices between RDBMS,
    NoSQL, and NewSQL become increasingly nuanced, warranting a deeper exploration
    of their respective strengths and use cases. In this section, we aim to shed light
    on these crucial facets, guiding you through the labyrinth of database intricacies.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在技术不断发展的背景下，数据的存储、检索和操作方式在决定系统的效率和可靠性方面起着关键作用。数据库设计的艺术与科学正是这一过程的核心，它为许多应用程序提供了基础，从简单的网站到复杂的机器学习模型。掌握数据库设计的原则，包括理解、组织、维护和保护数据，对于任何想要充分利用现代系统潜力的人来说都是不可或缺的。此外，随着数据库技术的发展和多样化，关系型数据库（RDBMS）、非关系型数据库（NoSQL）和新型SQL（NewSQL）之间的选择变得越来越微妙，值得深入探讨它们各自的优势和使用场景。在本节中，我们将重点讲解这些关键方面，带你深入了解数据库设计的复杂性。
- en: Database design principles
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库设计原则
- en: 'Database design is an integral part of creating an efficient and useful system
    to store and manipulate data. The core principles revolve around understanding
    your data, organizing it well, maintaining its integrity, and ensuring its security.
    We will look at each of the core principles in detail as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库设计是创建高效、实用的系统以存储和操作数据的核心部分。其核心原则围绕着理解数据、合理组织数据、维护数据完整性和确保数据安全展开。接下来，我们将详细介绍每个核心原则：
- en: '**Understanding your data**: The first step in designing a database is understanding
    what kind of data you are working with and how it is related. This often involves
    working closely with stakeholders and potential end users to identify the information
    that the system needs to store and manipulate.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**理解你的数据**：设计数据库的第一步是理解你所处理的数据类型以及它们之间的关系。这通常涉及与利益相关者和潜在最终用户密切合作，识别系统需要存储和操作的信息。'
- en: '**Organizing your data**: Once you have a good understanding of your data,
    you can start organizing it. Here, you employ techniques such as data normalization
    and denormalization. Normalization is the process of structuring the data to minimize
    redundancy and dependency by organizing fields and table relationships. Denormalization
    is the process of combining tables to improve read performance at the cost of
    some write performance.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织你的数据**：一旦你对数据有了充分的理解，就可以开始组织它。在这一步，你可以采用数据标准化和反标准化等技术。标准化是通过组织字段和表关系来结构化数据，以最小化冗余和依赖性。反标准化是将多个表合并以提高读取性能，但代价是降低一些写入性能。'
- en: '**Maintaining data integrity**: Data integrity refers to the accuracy and consistency
    of data. The aim is to prevent data from becoming corrupt or inaccurate. This
    can be achieved through constraints, such as primary keys, foreign keys, unique,
    check, and not null constraints.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维护数据完整性**：数据完整性指的是数据的准确性和一致性。目标是防止数据损坏或不准确。这可以通过约束来实现，比如主键、外键、唯一性、检查和非空约束。'
- en: '**Ensuring data security**: Data security refers to protective measures put
    in place to keep data safe from unauthorized access or alterations. This involves
    implementing appropriate user permissions and roles, encrypting data both at rest
    and in transit, and regularly auditing database activity.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确保数据安全**：数据安全指的是采取保护措施，确保数据免受未经授权的访问或更改。这包括实施适当的用户权限和角色、加密静态和传输中的数据，并定期审计数据库活动。'
- en: A concrete example of designing a scalable, robust, and secure database is the
    creation of an e-commerce platform database. It involves understanding the necessary
    data, including products, customers, orders, and payments, and identifying the
    relationships between them. A highly normalized schema can be designed to avoid
    data redundancy. However, to improve read operations, some level of denormalization
    might be used, such as creating view tables that aggregate product and order data
    for quick access.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一个可扩展、健壮且安全的数据库的具体示例是创建一个电子商务平台数据库。它涉及理解必要的数据，包括产品、客户、订单和支付，并识别它们之间的关系。可以设计一个高度规范化的架构，以避免数据冗余。然而，为了提高读取操作的效率，可能会使用某种程度的反规范化，例如创建视图表来聚合产品和订单数据，以便快速访问。
- en: Data integrity can be maintained by setting up primary keys, foreign keys, and
    other constraints. For instance, a foreign key constraint can be set up between
    orders and customers, ensuring that every order is always associated with a valid
    customer.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 数据完整性可以通过设置主键、外键和其他约束来维护。例如，可以在订单和客户之间设置外键约束，确保每个订单始终与有效的客户相关联。
- en: Data security can be ensured by creating different roles with different access
    levels. For example, a sales role might have read access to product and order
    data but no access to payment data. All data can be encrypted using industry-standard
    protocols to protect it from unauthorized access. Regular audits can also be set
    up to monitor database activity and identify potential security breaches.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过创建不同角色并为其分配不同的访问级别来确保数据安全。例如，销售角色可能可以读取产品和订单数据，但无法访问支付数据。所有数据都可以使用行业标准的协议进行加密，以保护数据不受未经授权的访问。还可以定期进行审计，以监控数据库活动并识别潜在的安全漏洞。
- en: RDBMS versus NoSQL versus NewSQL
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RDBMS 与 NoSQL 与 NewSQL
- en: 'When it comes to choosing a database, the decision often depends on the specific
    needs of the application you’re building. The choice is generally among **Relational
    Database Management System** (**RDBMS**), NoSQL, and NewSQL databases:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 选择数据库时，决策通常取决于你所构建的应用程序的具体需求。选择通常是在 **关系数据库管理系统**（**RDBMS**）、NoSQL 和 NewSQL
    数据库之间进行的：
- en: '**RDBMS**: These databases, such as MySQL, PostgreSQL, and Oracle, are based
    on a relational model where data is stored in tables, and relationships are formed
    using primary and foreign keys. RDBMS databases are a great choice for applications
    that require complex transactions with multiple operations or queries that require
    aggregation. They’re also excellent for maintaining data integrity and supporting
    SQL for a robust, declarative query language.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RDBMS**：这些数据库，如 MySQL、PostgreSQL 和 Oracle，基于关系模型，在该模型中，数据存储在表中，关系通过主键和外键来形成。RDBMS
    数据库非常适合需要复杂事务、多重操作或需要聚合查询的应用程序。它们还非常适合保持数据完整性，并支持 SQL，提供强大的声明性查询语言。'
- en: '**NoSQL**: NoSQL databases, such as MongoDB, Cassandra, and CouchDB, do not
    adhere to the traditional relational database structure. Instead, they can store
    data in several ways: document-based, column-based, graph-based, or key-value
    pairs. NoSQL databases are ideal for applications with large amounts of data or
    need to scale horizontally. They’re designed to excel in speed and flexibility.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NoSQL**：NoSQL 数据库，如 MongoDB、Cassandra 和 CouchDB，并不遵循传统的关系数据库结构。相反，它们可以以多种方式存储数据：基于文档、基于列、基于图或键值对。NoSQL
    数据库非常适合数据量大或需要横向扩展的应用程序。它们旨在在速度和灵活性方面表现出色。'
- en: '**NewSQL**: NewSQL databases such as CockroachDB, VoltDB, and MemSQL attempt
    to combine the best of both worlds. They offer the scalability of NoSQL databases
    and the ACID transactions of RDBMS. NewSQL databases are designed to overcome
    the limitations of traditional RDBMSs in distributed environments and provide
    horizontal scalability while maintaining the strong consistency of traditional
    databases.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NewSQL**：NewSQL 数据库，如 CockroachDB、VoltDB 和 MemSQL，试图将两者的优点结合起来。它们提供了 NoSQL
    数据库的可扩展性和关系数据库管理系统（RDBMS）的 ACID 事务。NewSQL 数据库旨在克服传统 RDBMS 在分布式环境中的局限性，同时在保持传统数据库强一致性的同时提供横向扩展性。'
- en: Making a decision among these types of databases depends on various factors
    such as the data structure, scalability, consistency, and latency requirements
    of your application.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些类型的数据库之间做出选择取决于多个因素，例如数据结构、可扩展性、一致性和延迟要求。
- en: Consider the case of a large-scale, distributed, write-heavy application such
    as a real-time analytics system. Here, the primary need is to handle a huge volume
    of write operations with low latency and to distribute data across multiple nodes
    for redundancy and availability.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以一个大规模分布式、高写入负载的应用为例，例如实时分析系统。在这种情况下，主要需求是处理大量的写操作，保持低延迟，并将数据分布在多个节点上，以确保冗余性和可用性。
- en: For such an application, a traditional RDBMS such as MySQL might not be the
    best fit. MySQL follows a strong consistency model that can become a bottleneck
    when write operations are exceptionally high. Also, while it’s possible to distribute
    a MySQL database across multiple nodes, doing so can be complex and may not offer
    the same level of performance or ease of scalability as a system designed with
    distribution in mind.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这样的应用，传统的 RDBMS，如 MySQL，可能不是最佳选择。MySQL 遵循强一致性模型，在写操作特别高时可能成为瓶颈。此外，虽然可以将 MySQL
    数据库分布到多个节点，但这样做可能会很复杂，并且可能无法提供与专为分布式设计的系统相同的性能或可扩展性。
- en: On the other hand, a NoSQL database such as Apache Cassandra could be a much
    better fit. Cassandra is designed to handle large amounts of data across many
    commodity servers, providing high write throughput and low latency. It follows
    an “eventual consistency” model, which means it prioritizes availability and partition
    tolerance. This makes it a good choice for write-heavy applications where it’s
    acceptable for data to be slightly out of sync across nodes for a short period.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，像 Apache Cassandra 这样的 NoSQL 数据库可能更适合。Cassandra 设计用于处理跨多个普通服务器的大量数据，提供高写入吞吐量和低延迟。它遵循“最终一致性”模型，这意味着它优先考虑可用性和分区容忍性。这使得它成为写入密集型应用的理想选择，在这种情况下，允许数据在短时间内跨节点略微不同步。
- en: Cassandra’s data model, based on the wide-column store paradigm, is another
    point of consideration. It allows you to store large amounts of data in a semi-structured
    manner, offering more flexibility than the rigid schema of an RDBMS.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Cassandra 的数据模型基于宽列存储范式，这是另一个需要考虑的因素。它允许以半结构化的方式存储大量数据，比 RDBMS 的严格模式提供了更多的灵活性。
- en: NewSQL databases could also be a possible choice here, as they attempt to combine
    the scalability of NoSQL with the ACID transactions of RDBMS. However, given their
    relative newness in the field, they may not be the best choice for all applications.
    In a high-volume, write-heavy scenario like our example, Cassandra’s proven scalability
    and performance might make it a safer bet.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: NewSQL 数据库也可能是一个可行的选择，因为它们尝试将 NoSQL 的可扩展性与 RDBMS 的 ACID 事务结合起来。然而，鉴于它们在该领域的相对新颖性，它们可能不是所有应用的最佳选择。在像我们这个例子这样的高容量、高写入负载场景中，Cassandra
    已验证的可扩展性和性能可能使它成为更安全的选择。
- en: In conclusion, the choice between RDBMS, NoSQL, and NewSQL databases depends
    greatly on the specific requirements of the application. Understanding these different
    types of databases and their strengths and weaknesses is crucial in making an
    informed choice.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，RDBMS、NoSQL 和 NewSQL 数据库的选择很大程度上取决于应用的具体需求。理解这些不同类型的数据库及其优缺点对于做出明智的选择至关重要。
- en: Implementing data-persistence technologies
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现数据持久化技术
- en: In our digital age, the ability to store, access, and manage vast amounts of
    data swiftly and securely forms the backbone of many essential applications. Central
    to this is the database system, acting as a repository that not only holds the
    data but also ensures its seamless integration into the applications that rely
    on it. Whether you’re implementing a traditional RDBMS or venturing into the realms
    of NoSQL, a successful setup goes beyond mere installation. It demands a holistic
    approach, encompassing judicious configuration, vigilant management, and foresight
    into potential pitfalls and recovery mechanisms. Dive into this section to gain
    insights into the foundational steps of installing, configuring, and effectively
    managing your database systems.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的数字时代，能够迅速且安全地存储、访问和管理海量数据，构成了许多关键应用的核心。数据库系统在其中占据着核心地位，作为一个存储库，不仅仅保存数据，还确保其与依赖它的应用程序无缝集成。无论你是实施传统的
    RDBMS，还是进入 NoSQL 的领域，成功的系统设置不仅仅是安装。它需要一种全面的方法，包括明智的配置、细致的管理，以及对潜在问题和恢复机制的预见。深入本节，了解安装、配置和有效管理数据库系统的基础步骤。
- en: Installation, configuration, and management of database systems
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库系统的安装、配置和管理
- en: Database systems are complex software suites that require careful installation
    and configuration to function optimally. The specific steps for installation,
    configuration, and management can vary significantly between different types of
    database systems, be it RDBMSs such as PostgreSQL, MySQL, or Oracle, or NoSQL
    databases including MongoDB, Cassandra, and Redis.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库系统是复杂的软件套件，需要仔细的安装和配置才能正常运行。不同类型的数据库系统的安装、配置和管理步骤可能大相径庭，无论是关系型数据库管理系统（如PostgreSQL、MySQL或Oracle），还是NoSQL数据库（如MongoDB、Cassandra和Redis）。
- en: 'However, some universal steps need to be taken across most database systems:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，大多数数据库系统都需要执行一些通用步骤：
- en: '**System requirements**: Before the installation process, ensure that your
    system meets the minimum requirements to run the database system. These requirements
    include hardware specifications (CPU, RAM, and disk space), the operating system,
    and its version.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统要求**：在安装过程之前，请确保您的系统满足运行数据库系统的最低要求。这些要求包括硬件规格（CPU、RAM和磁盘空间）、操作系统及其版本。'
- en: '`apt`, `yum`, or `brew`.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apt`、`yum`或`brew`。'
- en: '**Configuration**: After installation, you may need to configure the database
    system to suit your needs. This could include setting memory limits, configuring
    security settings, setting up user accounts and permissions, setting up network
    settings, and more.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置**：安装后，您可能需要配置数据库系统以适应您的需求。这可能包括设置内存限制、配置安全设置、设置用户帐户和权限、配置网络设置等。'
- en: '**Management**: Database management involves regular tasks such as creating
    and managing databases and tables, managing users and permissions, monitoring
    performance, backing up and restoring data, and troubleshooting any issues that
    arise.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理**：数据库管理涉及定期任务，如创建和管理数据库与表，管理用户和权限，监控性能，备份和恢复数据，以及解决出现的任何问题。'
- en: Practical example – PostgreSQL database server installation, configuration,
    and management
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实践示例 – PostgreSQL数据库服务器安装、配置和管理
- en: 'PostgreSQL is a powerful, open source, object-relational database system with
    a strong emphasis on extensibility and standards compliance. The following are
    step-by-step instructions for installing, configuring, and managing a PostgreSQL
    server on a Linux system:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL是一个强大的开源对象关系型数据库系统，注重可扩展性和标准兼容性。以下是安装、配置和管理Linux系统上的PostgreSQL服务器的逐步说明：
- en: '`apt` package manager:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`apt`包管理器：'
- en: BASH
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: BASH
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: sudo -i -u postgres
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: sudo -i -u postgres
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: psql
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: psql
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: \q
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: \q
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: sudo nano /etc/postgresql/<version>/main/postgresql.conf
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: sudo nano /etc/postgresql/<version>/main/postgresql.conf
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: sudo systemctl restart postgresql
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: sudo systemctl restart postgresql
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: createdb mydatabase
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: createdb mydatabase
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: createuser myuser
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: createuser myuser
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: myuser all permissions on the mydatabase database.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: myuser对mydatabase数据库具有所有权限。
- en: 'PostgreSQL provides the `pg_dump` utility for backing up a single database.
    Here’s how to back up the `mydatabase` database to a file:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PostgreSQL提供了`pg_dump`工具，用于备份单个数据库。以下是如何将`mydatabase`数据库备份到文件：
- en: BASH
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: BASH
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To restore this backup, you can use the `psql` command:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要恢复此备份，您可以使用`psql`命令：
- en: BASH
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: BASH
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: sudo apt-get update
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: sudo apt-get update
- en: sudo apt-get upgrade postgresql
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: sudo apt-get upgrade postgresql
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: mongod --port 27017 --dbpath /data/db1 --replSet rs0
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: mongod --port 27017 --dbpath /data/db1 --replSet rs0
- en: mongod --port 27018 --dbpath /data/db2 --replSet rs0
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: mongod --port 27018 --dbpath /data/db2 --replSet rs0
- en: mongod --port 27019 --dbpath /data/db3 --replSet rs0
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: mongod --port 27019 --dbpath /data/db3 --replSet rs0
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: mongo --port 27017
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: mongo --port 27017
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: rs.initiate()
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: rs.initiate()
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: rs.add("hostname:27018")
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: rs.add("hostname:27018")
- en: rs.add("hostname:27019")
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: rs.add("hostname:27019")
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: mydatabase database in the specified directory.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在指定目录中的mydatabase数据库。
- en: 'To restore the database from the backup, run the following:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从备份中恢复数据库，请运行以下命令：
- en: BASH
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: BASH
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Sharding**: Sharding is a method for distributing data across multiple machines.
    It provides high availability and data redundancy. MongoDB supports sharding through
    its sharded clusters feature.'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**分片**：分片是一种将数据分布到多台机器上的方法。它提供高可用性和数据冗余。MongoDB通过其分片集群功能支持分片。'
- en: '**Monitoring**: Use MongoDB’s built-in Cloud Manager or Ops Manager to monitor
    the state of your MongoDB systems. These tools provide visibility into your MongoDB
    deployment and alert you to any issues that could impact system performance or
    availability.'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**监控**：使用MongoDB内置的Cloud Manager或Ops Manager监控MongoDB系统的状态。这些工具提供了MongoDB部署的可视性，并在可能影响系统性能或可用性的任何问题出现时发出警报。'
- en: Testing your disaster recovery plan
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 测试您的灾难恢复计划
- en: 'It’s crucial not only to have a disaster recovery plan but also to test it
    regularly to ensure it works as expected. Here are some best practices:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 仅有灾难恢复计划是不够的，还必须定期测试它，以确保它按预期工作。以下是一些最佳实践：
- en: '**Regularly simulate disasters**: Regularly shut down a node in your system
    to simulate a disaster. Verify that failover occurs as expected, and test your
    application to ensure it handles the failover gracefully.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定期模拟灾难**：定期关闭系统中的一个节点以模拟灾难。验证故障转移是否按预期发生，并测试你的应用程序，确保它能够优雅地处理故障转移。'
- en: '**Test your backups**: Regularly restore your backups to a separate system
    to ensure they work as expected. This can help you catch any issues with your
    backup process.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试你的备份**：定期将备份恢复到单独的系统中，确保它们按预期工作。这有助于你发现备份过程中可能存在的问题。'
- en: '**Document your plan**: Ensure that your disaster recovery plan is thoroughly
    documented and that your team is familiar with the steps to recover from a disaster.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**记录你的计划**：确保你的灾难恢复计划被充分记录，并确保你的团队熟悉从灾难中恢复的步骤。'
- en: In conclusion, MongoDB provides robust features for replication, automatic failover,
    and disaster recovery. However, setting up these features is just one part of
    building a highly available and resilient system. Regular monitoring, testing,
    and documentation are crucial for ensuring that your system can recover from a
    disaster quickly and with minimal data loss.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，MongoDB 提供了强大的复制、自动故障转移和灾难恢复功能。然而，设置这些功能只是构建高可用性和高恢复能力系统的一部分。定期监控、测试和文档化对于确保系统能够快速恢复并尽量减少数据丢失至关重要。
- en: Database provisioning and Infrastructure as Code
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库配置和基础设施即代码
- en: As we discussed in the previous chapter, **Infrastructure as Code** (**IaC**)
    is a key DevOps practice that involves managing and provisioning data centers
    through machine-readable definition files, rather than physical hardware configuration
    or interactive configuration tools. This approach has several advantages, including
    speed, repeatability, scalability, and reduced human error.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一章中讨论的那样，**基础设施即代码**（**IaC**）是 DevOps 的一个关键实践，它通过机器可读的定义文件来管理和配置数据中心，而不是使用物理硬件配置或交互式配置工具。这种方法有多个优点，包括速度、可重复性、可扩展性和减少人为错误。
- en: IaC is highly relevant to DevOps DBAs because it can automate many of the tasks
    involved in setting up and managing databases. For example, instead of manually
    installing a database server, configuring it, and creating databases and tables,
    a DevOps DBA can write a script that does all this automatically. The script can
    be version controlled, tested, and run multiple times to create identical environments.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: IaC（基础设施即代码）与 DevOps 数据库管理员（DBA）高度相关，因为它可以自动化设置和管理数据库的许多任务。例如，DevOps DBA 可以编写脚本，自动完成数据库服务器的安装、配置、创建数据库和表等工作，而不需要手动进行。该脚本可以进行版本控制、测试，并多次运行以创建相同的环境。
- en: Furthermore, IaC tools including Terraform, Ansible, Chef, and Puppet allow
    DBAs to manage infrastructure across different cloud providers and on-premises
    environments using the same scripts. This consistency across different environments
    can reduce bugs and streamline the deployment process.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，IaC 工具包括 Terraform、Ansible、Chef 和 Puppet，允许 DBA 使用相同的脚本管理不同云提供商和本地环境中的基础设施。这种跨环境的一致性可以减少错误并简化部署过程。
- en: Practical example – using Terraform to script the setup of a SQL Server database
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 实际示例——使用 Terraform 脚本化 SQL Server 数据库的设置
- en: 'Terraform is a popular IaC tool that can be used to script the setup of a SQL
    Server database. The following is a step-by-step guide to setting up a SQL Server
    database on an Azure environment using Terraform:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 是一个流行的 IaC 工具，可以用来脚本化 SQL Server 数据库的设置。以下是在 Azure 环境中使用 Terraform
    设置 SQL Server 数据库的逐步指南：
- en: '**Installing Terraform**: If you haven’t already, download and install Terraform
    from the official website. Add Terraform to your system’s path so you can run
    it from any command prompt.'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装 Terraform**：如果你还没有安装，首先从官方网站下载并安装 Terraform。将 Terraform 添加到系统路径中，这样你就可以在任何命令提示符下运行它。'
- en: '`provider.tf` with the following contents:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`provider.tf` 文件包含以下内容：'
- en: HCL
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: HCL
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This code tells Terraform to use the Azure Resource Manager provider. Replace
    the version number with the latest version available.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码告诉 Terraform 使用 Azure 资源管理器提供者。请将版本号替换为最新版本。
- en: '`main.tf` with the following contents:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`main.tf` 文件包含以下内容：'
- en: HCL
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: HCL
- en: '[PRE17]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This code tells Terraform to create a SQL Server instance with the specified
    name, resource group, location, version, and admin credentials. You should replace
    these values with your own.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码告诉 Terraform 创建一个具有指定名称、资源组、位置、版本和管理员凭证的 SQL Server 实例。你应该将这些值替换为你自己的。
- en: '`main.tf` file:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`main.tf` 文件：'
- en: HCL
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: HCL
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This code tells Terraform to create a SQL database with the specified name,
    resource group, server name, location, edition, collation, and maximum size. Again,
    replace these values with your own.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码告诉 Terraform 创建一个具有指定名称、资源组、服务器名称、位置、版本、排序规则和最大大小的 SQL 数据库。同样，请将这些值替换为你自己的。
- en: '**Apply the Terraform script**: Finally, to create the SQL Server and database
    in Azure, run the following command in the directory containing your Terraform
    files:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**应用 Terraform 脚本**：最后，为了在 Azure 中创建 SQL Server 和数据库，请在包含 Terraform 文件的目录中运行以下命令：'
- en: BASH
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: BASH
- en: '[PRE19]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This is a basic example of how a DevOps DBA can use Terraform to script the
    setup of a SQL Server database. The actual process might involve more steps and
    scripts, depending on the complexity of the environment and the specific requirements
    of the database.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基本示例，展示了 DevOps DBA 如何使用 Terraform 脚本设置 SQL Server 数据库。实际过程可能涉及更多步骤和脚本，具体取决于环境的复杂性和数据库的具体要求。
- en: Database version control and CI/CD
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库版本控制与 CI/CD
- en: As the digital realm evolves, the significance of cohesive workflows becomes
    ever more apparent. The intersection of software development and databases brings
    forth challenges, requiring meticulous management. Beyond the realms of managing
    lines of code lies the vast and intricate world of databases. A slight alteration
    in the structure can set off a domino effect, impacting an entire application.
    To ensure the integrity and efficiency of this domain, the principles of version
    control, a mainstay in software development, are increasingly being applied to
    databases. Delve into this section to understand the essence of database version
    control and witness its practical implementation using tools such as Liquibase.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 随着数字领域的发展，协同工作流的重要性愈发明显。软件开发与数据库的交集带来了挑战，需要细致的管理。管理代码行之外，还有一个庞大而复杂的数据库世界。结构上的一个小改动可能会引发连锁反应，影响整个应用程序。为了确保这一领域的完整性和效率，版本控制这一软件开发的基石，正越来越多地应用于数据库领域。深入了解本节内容，理解数据库版本控制的本质，并见证其在
    Liquibase 等工具中的实际应用。
- en: Importance of database version control
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库版本控制的重要性
- en: Version control systems are fundamental to modern software development, providing
    a way to track changes, manage code, and coordinate work among multiple developers.
    However, it’s not just source code that can benefit from version control; database
    schemas and changes can also be version controlled, offering similar advantages.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制系统是现代软件开发的基础，提供了一种跟踪更改、管理代码和协调多个开发者工作的方法。然而，受益于版本控制的不仅仅是源代码；数据库架构和更改也可以进行版本控制，带来类似的优势。
- en: 'Database version control is crucial for several reasons:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库版本控制至关重要，原因如下：
- en: '**Synchronization**: It ensures that everyone is working with the same database
    structure, reducing inconsistencies and bugs.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**同步**：它确保每个人都在使用相同的数据库结构，减少不一致性和 bug。'
- en: '**Traceability**: It keeps a historical record of all changes, allowing developers
    to understand why a particular change was made and when.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可追溯性**：它保持所有更改的历史记录，帮助开发者理解某个特定更改的原因和时间。'
- en: '**Coordination**: It helps multiple developers work on the same database without
    overwriting each other’s changes.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协调性**：它帮助多个开发者在同一数据库上工作，而不会互相覆盖彼此的更改。'
- en: '**Deployment**: It makes it easier to manage deployments and roll back changes
    if something goes wrong. You can recreate the exact state of the database at any
    point in time.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署**：它使管理部署变得更容易，并且在出现问题时可以回滚更改。你可以在任何时候重建数据库的确切状态。'
- en: '**Compliance**: In some cases, database version control can help meet compliance
    requirements by providing an audit trail of changes.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合规性**：在某些情况下，数据库版本控制可以通过提供变更的审计记录来帮助满足合规要求。'
- en: Despite its importance, database version control can be challenging to implement
    because databases are stateful and because changes can affect existing data. Fortunately,
    tools such as Liquibase can help manage database changes and provide version control-like
    capabilities for databases.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管数据库版本控制非常重要，但实施起来可能具有挑战性，因为数据库是有状态的，且更改可能影响现有数据。幸运的是，像 Liquibase 这样的工具可以帮助管理数据库更改，并为数据库提供类似版本控制的功能。
- en: Practical example – using Liquibase to manage database schema changes
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 实际示例 – 使用Liquibase管理数据库模式更改
- en: Liquibase is an open source tool that helps manage database schema changes.
    It works by applying a series of changesets to a database, which are stored in
    XML, YAML, JSON, or SQL files. Each changeset contains a change to be made to
    the database and is identified by a unique ID.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Liquibase是一个开源工具，帮助管理数据库模式更改。它通过将一系列更改集应用到数据库来工作，这些更改集存储在XML、YAML、JSON或SQL文件中。每个更改集都包含一个对数据库的更改，并通过唯一的ID进行标识。
- en: 'Here’s a step-by-step guide to setting up and using Liquibase:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是设置和使用Liquibase的逐步指南：
- en: '**Install Liquibase**: Download the Liquibase installer from the official website
    and follow the installation instructions for your operating system.'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装Liquibase**：从官方网站下载Liquibase安装程序，并按照操作系统的安装说明进行安装。'
- en: '`mydatabase` running on localhost with the username `root` and password `password`.'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`mydatabase` 在本地主机上运行，用户名为 `root`，密码为 `password`。'
- en: '**Create a Liquibase project**: A Liquibase project is simply a directory that
    contains all your changeset files. You can organize your changesets in any way
    you want, but a common approach is to create a separate directory for each version
    of your application, such as the following example:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建Liquibase项目**：Liquibase项目只是一个包含所有更改集文件的目录。你可以按任何你想要的方式组织更改集，但一种常见的方法是为每个版本的应用程序创建一个单独的目录，如以下示例：'
- en: BASH
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: BASH
- en: '[PRE20]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Create a changeset**: A changeset is a file that describes a change to the
    database. For example, to create a table, you might create a changeset like this:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建更改集**：更改集是描述对数据库更改的文件。例如，要创建一个表，你可以创建如下的更改集：'
- en: XML
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: XML
- en: '[PRE21]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Save this file as `1.0.0.xml` in your `1.0.0` directory.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为 `1.0.0.xml`，并放入你的 `1.0.0` 目录中。
- en: '**Run the changeset**: To apply the changeset to your database, run the following
    command:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**运行更改集**：要将更改集应用到数据库中，运行以下命令：'
- en: BASH
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: BASH
- en: '[PRE22]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Replace `/path/to/mysql-connector-java-8.0.19.jar` with the path to your MySQL
    JDBC driver.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `/path/to/mysql-connector-java-8.0.19.jar` 替换为你的MySQL JDBC驱动程序路径。
- en: '**Create more changesets**: As your application evolves, you’ll need to make
    more changes to your database. For each change, create a new changeset file in
    the appropriate directory, incrementing the changeset ID.'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建更多更改集**：随着应用程序的发展，你需要对数据库进行更多更改。对于每个更改，在适当的目录中创建一个新的更改集文件，并递增更改集ID。'
- en: '**Roll back changes**: If something goes wrong, you can use Liquibase to roll
    back changes. For example, to roll back the last change, run the following:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**回滚更改**：如果发生问题，你可以使用Liquibase回滚更改。例如，要回滚最后一次更改，运行以下命令：'
- en: BASH
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: BASH
- en: '[PRE23]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Liquibase provides a robust, flexible way to manage database schema changes
    and enables database version control. It’s a valuable tool in the DevOps DBA’s
    toolkit, enabling you to manage databases in the same systematic, controlled way
    you manage source code.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Liquibase提供了一种强大且灵活的方式来管理数据库模式更改，并支持数据库版本控制。它是DevOps DBA工具包中的一个宝贵工具，使你能够以与管理源代码相同的系统化、受控方式管理数据库。
- en: Role of the DevOps DBA in CI/CD pipelines
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps DBA在CI/CD流水线中的角色
- en: The role of the DevOps DBA in CI/CD pipelines is to ensure that database changes
    are seamlessly integrated and deployed as part of the software release process.
    The DevOps DBA collaborates with development, operations, and release management
    teams to create an automated, efficient, and error-free release pipeline that
    includes database elements.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps DBA在CI/CD流水线中的角色是确保数据库更改作为软件发布过程的一部分无缝集成和部署。DevOps DBA与开发、运维和发布管理团队协作，创建一个自动化、高效且无错误的发布流水线，包含数据库元素。
- en: 'Key responsibilities of the DevOps DBA in CI/CD pipelines include the following:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps DBA在CI/CD流水线中的主要职责包括以下内容：
- en: '**Schema management**: Managing database schema changes and ensuring they are
    version-controlled, tested, and deployed in sync with application code'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模式管理**：管理数据库模式更改，确保它们经过版本控制、测试，并与应用代码同步部署。'
- en: '**Automated migrations**: Automating database migrations to ensure that schema
    changes and data updates are applied correctly and consistently across environments'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化迁移**：自动化数据库迁移，确保模式更改和数据更新在各个环境中正确且一致地应用。'
- en: '**Performance testing**: Ensuring that database changes do not degrade performance
    by incorporating database performance tests into the CI/CD pipeline'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能测试**：通过将数据库性能测试纳入CI/CD流水线，确保数据库更改不会影响性能。'
- en: '**Security**: Ensuring that database changes comply with security best practices
    and that sensitive data is protected in all environments'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：确保数据库更改符合安全最佳实践，并且在所有环境中保护敏感数据。'
- en: '**Disaster recovery and backups**: Making sure that backups are taken before
    deployments and that there’s a plan in place for quick recovery in case of failure'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灾难恢复与备份**：确保在部署之前进行备份，并且有一个快速恢复的计划，以防出现故障。'
- en: '**Monitoring and alerts**: Implementing monitoring tools to check the health
    of the database as changes are deployed, and setting up alerts for any issues'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控与警报**：实现监控工具以检查数据库在部署过程中是否健康，并为任何问题设置警报。'
- en: '**Coordination and communication**: Coordinating with various stakeholders
    involved in the release process to ensure database changes are reviewed and approved
    before deployment'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协调与沟通**：与涉及发布过程的各方协调，确保在部署之前数据库更改得到审查和批准。'
- en: Practical example – Jenkins pipeline with database migrations using Flyway
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 实际示例 – 使用Flyway进行数据库迁移的Jenkins管道
- en: 'Flyway is an open source database migration tool that makes it easy to version
    control and migrate your database schema. Jenkins is an automation server used
    for implementing continuous integration and delivery pipelines. The following
    is an in-depth walk-through of setting up a Jenkins pipeline that includes database
    migrations using Flyway:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Flyway是一个开源的数据库迁移工具，可以轻松进行版本控制并迁移数据库架构。Jenkins是一个用于实施持续集成和交付管道的自动化服务器。以下是设置包括Flyway数据库迁移的Jenkins管道的详细步骤：
- en: '**Prerequisites**: Before you start, you will need to have Jenkins and Flyway
    installed, and a database (such as MySQL) that you want to run migrations against.'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**先决条件**：在开始之前，你需要安装Jenkins和Flyway，并且需要有一个数据库（如MySQL）来执行迁移操作。'
- en: '`flyway.conf` with your database connection details:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`flyway.conf`，包含你的数据库连接详情：'
- en: '[PRE24]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Also, create a directory named `sql` to store your SQL migration scripts.
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，创建一个名为`sql`的目录，用于存储你的SQL迁移脚本。
- en: '3.  **Create a Jenkins pipeline**: In Jenkins, create a new pipeline. You can
    do this by selecting **New Item** from the dashboard, then choosing the **Pipeline**
    option.'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 3.  **创建Jenkins管道**：在Jenkins中创建一个新的管道。你可以通过从仪表盘选择**新建项目**，然后选择**管道**选项来实现。
- en: '**Configure the pipeline**: In the pipeline configuration page, scroll down
    to the **Pipeline** section. You’ll be entering a script here that defines your
    pipeline.'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置管道**：在管道配置页面，向下滚动到**管道**部分。在这里你需要输入定义管道的脚本。'
- en: '**Write the pipeline script**: In the **Pipeline** section, choose **Pipeline
    script** and enter a script that defines your pipeline. The following is an example
    script:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编写管道脚本**：在**管道**部分，选择**管道脚本**并输入定义管道的脚本。以下是一个示例脚本：'
- en: GROOVY
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: GROOVY
- en: '[PRE25]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This script defines a pipeline with four stages:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本定义了一个包含四个阶段的管道：
- en: '`Checkout Code`: This stage checks out the code from your repository. Replace
    the URL with the URL of your repository.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`检出代码`：此阶段会从你的代码仓库检出代码。将URL替换为你的仓库URL。'
- en: '`Database Migration`: This stage runs Flyway migrations against your database.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`数据库迁移`：此阶段对数据库执行Flyway迁移。'
- en: '`Build`: This builds your application. Replace the comment with the actual
    steps for your build process.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`构建`：此操作会构建你的应用程序。将注释替换为实际的构建步骤。'
- en: '`Deploy`: This deploys your application. Replace the comment with the actual
    steps for your deployment process.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`部署`：此操作会部署你的应用程序。将注释替换为实际的部署步骤。'
- en: '**Run the pipeline**: Save the pipeline and run it. You can do this by clicking
    **Build Now** on the pipeline page.'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**运行管道**：保存管道并运行它。你可以通过点击管道页面上的**立即构建**来实现。'
- en: This Jenkins pipeline allows for the seamless integration of database migrations
    into the CI/CD process. When the pipeline is run, Flyway applies any pending migrations
    to the database, ensuring the database schema is up to date and in sync with the
    application code.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 该Jenkins管道允许将数据库迁移无缝集成到CI/CD过程中。当管道运行时，Flyway会将所有待处理的迁移应用到数据库，确保数据库架构与应用程序代码保持同步并更新。
- en: In conclusion, as a DevOps DBA, working with CI/CD pipelines allows for a smooth,
    automated, and efficient process, managing database schema changes, automated
    migrations, and ensuring database performance, security, and disaster recovery
    in alignment with the application’s release process. This elevates the role of
    the DBA from a background role to a critical part of the development, deployment,
    and release life cycle.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，作为DevOps DBA，与CI/CD管道的配合，使得数据库架构变更、自动化迁移、数据库性能、安全性及灾难恢复等管理工作变得更加顺畅、自动化且高效。这将DBA的角色从幕后提升为开发、部署和发布生命周期中的关键部分。
- en: Database performance tuning
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库性能调优
- en: In the intricate world of software applications, speed and efficiency often
    dictate success. While the user interface, design, and features draw the users
    in, it’s the underlying performance that ensures they stay. Central to this performance
    is the database – the beating heart that powers most digital platforms. However,
    like any intricate machinery, databases require fine-tuning to deliver their best.
    Dive into the nuances of performance tuning in this section, understanding its
    significance, and unraveling strategies that ensure a seamless software experience.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在复杂的软件应用世界中，速度和效率往往决定了成功与否。虽然用户界面、设计和功能吸引用户，但真正确保他们留下的，是底层的性能。数据库是这种性能的核心——它是驱动大多数数字平台的“心脏”。然而，像所有复杂的机器一样，数据库需要精细调优才能达到最佳表现。在本节中，深入了解性能调优的细微差别，理解其重要性，并探索确保无缝软件体验的策略。
- en: Importance of performance tuning and common strategies
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 性能调优的重要性及常见策略
- en: In a software application, performance plays a crucial role in providing a satisfactory
    user experience. A well-optimized database not only serves the application faster
    but also reduces the resources needed to store and retrieve data. Performance
    tuning is the process of identifying and fixing bottlenecks to improve the system’s
    speed and efficiency.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件应用中，性能在提供令人满意的用户体验方面起着至关重要的作用。经过优化的数据库不仅能更快地为应用程序提供服务，还能减少存储和检索数据所需的资源。性能调优是识别和解决瓶颈的过程，以提高系统的速度和效率。
- en: 'Database performance tuning is essential to achieve the following:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库性能调优对于实现以下目标至关重要：
- en: '**Improved user experience**: A well-optimized database ensures the application
    runs smoothly and rapidly, which greatly enhances user experience'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改善用户体验**：经过优化的数据库确保应用程序运行流畅迅速，从而大大提升用户体验。'
- en: '**Efficient resource utilization**: By improving query performance, you can
    make better use of existing hardware and delay costly upgrades'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高效的资源利用**：通过提高查询性能，你可以更好地利用现有的硬件，并推迟昂贵的升级。'
- en: '**Increased system scalability**: A well-optimized database can handle a larger
    number of users and operations, allowing your application to scale more effectively
    as it grows'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统可扩展性提升**：经过优化的数据库可以处理更多的用户和操作，使得应用程序在扩展过程中更加高效。'
- en: 'To attain the preceding, the following are some common performance-tuning strategies:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现上述目标，以下是一些常见的性能调优策略：
- en: '**Indexing**: Indexes can significantly speed up data retrieval. However, they
    can slow down data insertion and update operations because the indexes must be
    updated whenever data changes. Therefore, it’s a balance between read and write
    operations.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**索引**：索引可以显著加速数据检索。然而，它们可能会减慢数据插入和更新操作，因为每次数据变化时，索引必须被更新。因此，这是一种读取和写入操作之间的平衡。'
- en: '**Partitioning**: This involves dividing a large database table into smaller,
    more manageable parts, which can improve query performance.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分区**：这涉及将一个大型数据库表分割成更小、更易管理的部分，从而提高查询性能。'
- en: '**Denormalization**: While normalization is key to reducing data redundancy,
    sometimes data is intentionally denormalized (i.e., certain data is duplicated
    across tables) to reduce complex joins and improve performance.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反规范化**：虽然规范化对减少数据冗余至关重要，但有时为了减少复杂的连接操作并提高性能，数据会故意被反规范化（即某些数据在表中被重复存储）。'
- en: '**Caching**: By storing frequently accessed data in memory, you can reduce
    the need to fetch data from the disk, improving performance.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存**：通过将频繁访问的数据存储在内存中，你可以减少从磁盘获取数据的需求，从而提高性能。'
- en: '**Query optimization**: Queries can often be rewritten or refactored to execute
    more efficiently. This can include avoiding full table scans, reducing joins,
    or eliminating unnecessary subqueries.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询优化**：查询可以通过重写或重构来提高执行效率。这包括避免全表扫描、减少连接操作或消除不必要的子查询。'
- en: '**Database design**: A well-designed database can significantly improve performance.
    This includes proper use of data types, constraints, and relationships.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库设计**：一个良好设计的数据库可以显著提升性能。这包括合理使用数据类型、约束和关系。'
- en: Practical example – optimizing a poorly performing query in Oracle
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 实际示例 — 优化在Oracle中执行缓慢的查询
- en: 'Let’s consider a simple scenario: you have a query that is running slow in
    an Oracle database, and you need to optimize it. The query is as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们考虑一个简单的场景：你有一个在Oracle数据库中运行缓慢的查询，需要对其进行优化。查询如下：
- en: SQL
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: SQL
- en: '[PRE26]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This query retrieves all employees in the `Sales` department. Suppose the `employees`
    table has a million records, and the query is performing a full table scan, making
    it slow. Here’s how you might go about optimizing it:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询检索所有属于`Sales`部门的员工。假设`employees`表有百万条记录，如果查询正在执行全表扫描，就会变得很慢。以下是如何优化它的方式：
- en: '`EXPLAIN PLAN` statement to understand the Oracle optimizer’s plan for executing
    your query. Run the following:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`EXPLAIN PLAN`语句来了解Oracle优化器执行查询的计划。运行以下命令：
- en: SQL
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: SQL
- en: '[PRE27]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then, view the plan using the following command:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用以下命令查看执行计划：
- en: SQL
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: SQL
- en: '[PRE28]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Suppose this shows a full table scan on the `employees` table. That’s likely
    the source of the problem.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 假设这显示了`employees`表的全表扫描。这可能就是问题的根源。
- en: '`employees` table is large, a full table scan can be expensive. If the `department_id`
    column in the `employees` table is not already indexed, creating an index can
    improve performance:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`employees`表很大，执行全表扫描可能会非常昂贵。如果`employees`表中的`department_id`列尚未建立索引，那么创建索引可以提高性能：'
- en: SQL
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: SQL
- en: '[PRE29]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`SELECT *`, specify only the columns you need. Every extra column requires
    more memory and slows down processing.'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SELECT *`，只指定你需要的列。每增加一列都需要更多的内存，并且会减慢处理速度。'
- en: '**Use bind variables**: If your application constructs similar queries with
    different values, using bind variables can improve performance by allowing Oracle
    to reuse the execution plan:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用绑定变量**：如果你的应用程序构造了不同值的类似查询，使用绑定变量可以通过允许Oracle重用执行计划来提高性能：'
- en: SQL
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: SQL
- en: '[PRE30]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Here, `:department_name` is a bind variable that your application sets to the
    desired department name.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`:department_name`是一个绑定变量，由你的应用程序设置为所需的部门名称。
- en: '`EXPLAIN PLAN` again to see the new execution plan. If it shows that Oracle
    is using the index and no longer performing a full table scan, your optimization
    efforts have likely paid off.'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行`EXPLAIN PLAN`以查看新的执行计划。如果它显示Oracle正在使用索引并且不再执行全表扫描，那么你的优化工作可能已经取得了成效。
- en: Remember, performance tuning is an iterative process. The changes you make should
    be guided by a thorough understanding of the problem and carefully tested to ensure
    they produce the desired improvement.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，性能调优是一个迭代过程。你所做的更改应基于对问题的深入理解，并经过仔细测试以确保它们能够带来预期的改进。
- en: In conclusion, performance tuning plays a pivotal role in software applications.
    It improves user experience, efficiently utilizes resources, and increases system
    scalability. By understanding different strategies such as indexing, partitioning,
    denormalization, caching, query optimization, and robust database design, a DevOps
    DBA can significantly influence the performance and success of an application.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，性能调优在软件应用中扮演着关键角色。它能够改善用户体验，有效利用资源，并提高系统的可扩展性。通过了解不同的策略，如索引、分区、反范式化、缓存、查询优化和健壮的数据库设计，DevOps
    DBA可以显著影响应用的性能和成功。
- en: Security and compliance
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性与合规性
- en: In our digital age, data is the new gold. As businesses rely heavily on digital
    interactions, vast amounts of data are amassed daily, making databases the treasuries
    of this age. However, with this invaluable resource comes the ever-present shadow
    of security threats. The digital realm is fraught with dangers, from hackers trying
    to breach systems for valuable data to inadvertent mistakes that could expose
    sensitive information. As we dive deeper into the realm of database management,
    the critical role of security becomes glaringly evident. Through this section,
    we’ll explore the significance of security measures, common threats, mitigation
    strategies, and practical examples to fortify these data repositories.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在数字时代，数据成为新的黄金。随着企业高度依赖数字化互动，每天积累大量数据，使得数据库成为这个时代的宝库。然而，这宝贵的资源背后伴随着安全威胁的不断存在。数字领域充满了危险，从试图入侵系统获取有价值数据的黑客，到可能暴露敏感信息的无意错误。随着我们深入数据库管理领域，安全措施的关键角色显得非常突出。通过本节，我们将探讨安全措施的重要性、常见威胁、缓解策略以及加固这些数据库存储库的实际例子。
- en: Importance of security in database management
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库管理中安全性的重要性
- en: The importance of security in database management cannot be overstated. Databases
    often store sensitive data such as personal user information, financial records,
    confidential company information, and more. A security breach could lead to catastrophic
    consequences, including loss of customer trust, legal repercussions, financial
    losses, and damage to the organization’s reputation. Therefore, ensuring that
    the database is secure is paramount to the health and integrity of any system
    or organization.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库管理中安全性的重要性不容忽视。数据库经常存储个人用户信息、财务记录、机密公司信息等敏感数据。安全漏洞可能导致灾难性后果，包括失去客户信任、法律后果、财务损失和对组织声誉的损害。因此，确保数据库安全对任何系统或组织的健康和完整性至关重要。
- en: Database security involves protecting the database from intentional or accidental
    threats, misuse, or malicious attacks. This can involve a wide range of activities,
    including securing the data itself, securing the database applications, and infrastructure.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库安全涉及保护数据库免受有意或意外的威胁、滥用或恶意攻击。这可能涉及一系列活动，包括保护数据本身、保护数据库应用程序和基础设施。
- en: 'There are several common types of threats to databases:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库面临几种常见的威胁：
- en: '**Unauthorized access**: This can occur when an unauthorized individual gains
    access to the database'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未经授权的访问**：当未经授权的个人访问数据库时可能发生。'
- en: '**Data breaches**: This involves the release of secure or private/confidential
    information into an untrusted environment'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据泄露**：这涉及将安全或私密/机密信息发布到不受信任的环境中。'
- en: '**Data loss or corruption**: This could occur due to hardware failure, human
    error, or a malicious attack'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据丢失或损坏**：这可能是由于硬件故障、人为错误或恶意攻击导致的。'
- en: '**Insider threats**: Sometimes, employees or other individuals with legitimate
    access to the database misuse their privileges and perform unauthorized activities'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内部威胁**：有时，员工或其他具有合法数据库访问权限的个人滥用其特权并执行未经授权的活动。'
- en: Common security measures
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的安全措施
- en: 'To mitigate these risks, several security measures are commonly employed:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少这些风险，通常采用以下几种安全措施：
- en: '**Access controls**: These are used to manage who has the ability to view and
    use the data. This often involves creating user accounts with passwords and assigning
    roles and permissions to these accounts.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问控制**：用于管理谁有权查看和使用数据。通常涉及创建带密码的用户账户，并为这些账户分配角色和权限。'
- en: '**Encryption**: Data encryption translates data into an encoded form so that
    only people with access to a secret key (formally referred to as a decryption
    key) or password can read it.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加密**：数据加密将数据转换为编码形式，只有持有秘密密钥（正式称为解密密钥）或密码的人才能读取它。'
- en: '**Backup and recovery**: Regular backups are crucial for restoring a database
    to its previous state in case of data loss.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**备份和恢复**：定期备份对于在数据丢失情况下恢复数据库至先前状态至关重要。'
- en: '**Firewalls**: A firewall controls network traffic and can prevent unauthorized
    access to the database.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**防火墙**：防火墙控制网络流量，可以防止未经授权访问数据库。'
- en: '**Auditing**: Regular audits can help identify potential security vulnerabilities,
    ensure compliance with access policies, and provide a record of who has accessed
    data.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**审计**：定期审计有助于识别潜在的安全漏洞，确保符合访问政策，并记录谁访问了数据。'
- en: '**Data masking**: Data masking is used to protect sensitive data by replacing
    it with fictitious data. This is often used in development and testing environments
    to protect real data while still allowing operations to be performed on the database.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据掩码**：数据掩码通过用虚拟数据替代敏感数据来保护数据。这通常用于开发和测试环境中，以保护真实数据，同时仍允许对数据库执行操作。'
- en: Practical example – best practices for securing a MySQL database and ensuring
    GDPR compliance
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 实际示例 – 保护 MySQL 数据库的最佳实践和确保符合 GDPR 的措施
- en: 'MySQL, one of the most popular open source RDBMSs, comes with a host of features
    that can be used to secure your databases. Here are some of the best practices
    for securing a MySQL database:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 是最受欢迎的开源关系型数据库管理系统之一，提供了许多可用于保护数据库的功能。以下是一些用于保护 MySQL 数据库的最佳实践：
- en: '`mysql_secure_installation` that helps to secure your MySQL installation by
    setting a password for the root accounts, removing root accounts that are accessible
    from outside the localhost, and removing anonymous user accounts.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mysql_secure_installation` 帮助你通过为 root 账户设置密码、删除可以从外部访问的 root 账户和删除匿名用户账户来确保你的
    MySQL 安装安全。'
- en: '**User management**: Limit the number of users who have access to your database.
    Each user should be given only those privileges that they need to perform their
    tasks.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户管理**：限制有权限访问数据库的用户数量。每个用户应仅授予他们执行任务所需的权限。'
- en: '**Encrypt data**: MySQL provides several functions that allow you to encrypt
    data. Encryption should be used for any sensitive data, such as credit card numbers
    or personal user information.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加密数据**：MySQL 提供了多种加密数据的功能。对于任何敏感数据，如信用卡号或个人用户信息，都应使用加密。'
- en: '**Regular backups**: Regular backups are crucial to protect your data. If something
    goes wrong, a backup will allow you to restore your database to its previous state.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定期备份**：定期备份对于保护数据至关重要。如果发生故障，备份可以帮助你将数据库恢复到先前的状态。'
- en: '**Keep MySQL up to date**: Regularly update your MySQL installation to ensure
    that you have the latest security patches.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持 MySQL 更新**：定期更新你的 MySQL 安装，确保你拥有最新的安全补丁。'
- en: In addition to these MySQL-specific practices, complying with data protection
    regulations such as the **General Data Protection Regulation** (**GDPR**) is critical.
    The GDPR is a regulation that requires businesses to protect the personal data
    and privacy of EU citizens for transactions that occur within EU member states.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些 MySQL 特定的实践，遵守像**通用数据保护条例**（**GDPR**）这样的数据保护法规同样至关重要。GDPR 是一项要求企业保护欧盟公民个人数据和隐私的法规，适用于在欧盟成员国境内发生的交易。
- en: 'Here are some steps to ensure GDPR compliance:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是确保符合 GDPR 的一些步骤：
- en: '**Understand what data you have and why you’re processing it**: Under GDPR,
    you should only collect data that you need and have a legitimate reason to process.'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**了解你拥有的数据以及为什么要处理这些数据**：根据 GDPR，你应仅收集需要的数据，并且有合法的理由来处理这些数据。'
- en: '**Encrypt personal data**: As mentioned earlier, MySQL provides several functions
    for data encryption.'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**加密个人数据**：如前所述，MySQL 提供了多种数据加密功能。'
- en: '**Ensure right to erasure**: The GDPR includes the right to erasure, also known
    as the right to be forgotten. This means that individuals can request that their
    data be deleted. You should have a system in place to handle such requests.'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**确保删除权**：GDPR 包括删除权，也称为被遗忘权。这意味着个人可以要求删除他们的数据。你应该有一个系统来处理这类请求。'
- en: '**Data breach notification**: In case of a data breach, the GDPR requires you
    to notify all affected individuals and the supervisory authority within 72 hours
    of becoming aware of the breach.'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据泄露通知**：如果发生数据泄露，GDPR 要求你在知晓泄露后 72 小时内通知所有受影响的个人和监管机构。'
- en: In conclusion, ensuring database security and compliance with regulations such
    as the GDPR is a key responsibility for any organization. By following best practices
    and regular auditing, you can help to protect both your data and your users’ data,
    and maintain the trust and confidence of your customers.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，确保数据库安全并符合像 GDPR 这样的法规是任何组织的重要责任。通过遵循最佳实践和定期审计，你可以帮助保护你的数据和用户的数据，维护客户的信任与信心。
- en: Collaboration and communication
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 协作与沟通
- en: The heart of DevOps lies in communication and collaboration. These are crucial
    because, in traditional environments, developers and operations often work in
    silos, with each group having its own priorities and objectives. This siloed approach
    often leads to conflicts, inefficiencies, and blame games when issues arise. In
    contrast, a DevOps environment fosters a culture where multiple teams share responsibilities,
    collaborate on challenges, and work toward the shared goal of delivering high-quality
    software rapidly and reliably.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 的核心在于沟通与协作。这一点至关重要，因为在传统环境中，开发人员和运维人员通常各自为战，每个小组都有自己的优先级和目标。这种孤岛式的工作方式常常导致冲突、低效以及问题出现时的相互指责。相比之下，DevOps
    环境培养了一种文化，多个团队共同承担责任，协作解决问题，朝着快速且可靠地交付高质量软件的共同目标努力。
- en: 'As we just walked through, in a DevOps setting, a DBA’s role is much more dynamic
    and integrated into the development and deployment processes than in traditional
    settings. Some of the key responsibilities of DBAs in DevOps are as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们刚才讨论的，在 DevOps 环境中，DBA 的角色比传统环境中更具动态性，且与开发和部署过程更为紧密。一些 DBAs 在 DevOps 中的主要责任如下：
- en: '**Integrated pipeline**: In DevOps, DBAs are involved in the CI/CD pipeline.
    They collaborate with developers to ensure that database schemas, configurations,
    and migrations are integrated into the pipeline.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成化管道**：在 DevOps 中，DBA 参与 CI/CD 管道的构建。他们与开发人员合作，确保数据库架构、配置和迁移能够集成到管道中。'
- en: '**Collaborative database design**: DBAs work closely with development teams
    in the early stages of product design to ensure that databases are scalable, performant,
    and meet the application’s requirements.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协作式数据库设计**：DBA 与开发团队在产品设计的早期阶段紧密合作，确保数据库具有可扩展性、性能和满足应用需求。'
- en: '**Shared responsibility**: In a DevOps culture, DBAs share the responsibility
    for the system’s performance and availability with the rest of the team. They
    no longer work in isolation but are a part of a collective effort to ensure the
    reliability and performance of the entire system.'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共享责任**：在 DevOps 文化中，DBA 与其他团队成员共同承担系统性能和可用性的责任。他们不再是孤立工作，而是集体努力的一部分，确保整个系统的可靠性和性能。'
- en: '**Automating database deployment**: Automation is key in DevOps, and this includes
    database deployment and configuration. DBAs need to work with operations teams
    to automate the deployment of database changes.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化数据库部署**：自动化是 DevOps 的关键，这也包括数据库部署和配置。DBA 需要与运维团队合作，实现数据库变更的自动化部署。'
- en: '**Monitoring and feedback loops**: DBAs are often involved in setting up monitoring
    for databases and creating feedback loops that can help the team understand how
    database changes affect the application.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控与反馈循环**：DBA 通常参与为数据库设置监控并创建反馈循环，帮助团队了解数据库变更如何影响应用程序。'
- en: 'These increased responsibilities paired with the correct communication strategies
    can lead to the following:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 这些增加的责任配合正确的沟通策略，可以带来以下结果：
- en: '**Accelerating development cycles**: Through effective communication and collaboration,
    DBAs can provide vital insights during the development phase, helping to create
    efficient database structures, which in turn can lead to reduced development cycles.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加速开发周期**：通过有效的沟通与协作，DBA 能在开发阶段提供关键的见解，帮助创建高效的数据库结构，从而缩短开发周期。'
- en: '**Mitigating risks**: Collaboration between DBAs and development teams can
    facilitate better risk assessment and mitigation strategies, especially concerning
    database migrations and schema changes, which are often delicate procedures.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**降低风险**：DBA 与开发团队的合作可以促进更好的风险评估和缓解策略，特别是在数据库迁移和架构变更等通常较为复杂的程序中。'
- en: '**Enhancing system performance**: DBAs have specialized knowledge regarding
    query optimization and database performance. Through collaboration, this knowledge
    can be shared with developers, resulting in a more performant system.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提升系统性能**：DBA 具有关于查询优化和数据库性能的专业知识。通过协作，这些知识可以与开发人员共享，从而提升系统性能。'
- en: '**Reducing downtime**: Communication between DBAs and operations teams is essential
    for planning maintenance and updates to minimize downtime.'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少停机时间**：DBA 与运维团队之间的沟通对于规划维护和更新至关重要，从而最大程度地减少停机时间。'
- en: '**Knowledge sharing**: DBAs have a deep knowledge of database systems. In a
    collaborative environment, they have the opportunity to share this knowledge with
    developers, testers, and operations staff, enhancing the team’s overall capabilities.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**知识共享**：DBA 对数据库系统有深刻的了解。在协作环境中，他们有机会与开发人员、测试人员和运维人员分享这些知识，从而增强团队的整体能力。'
- en: '**Faster issue resolution**: When issues arise, communication and collaboration
    are crucial for a rapid response. Whether it’s a performance issue, a bug, or
    a failure, having a collaborative environment means that everyone can work together
    efficiently to solve the problem.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更快的问题解决**：当问题出现时，沟通和协作对于快速响应至关重要。无论是性能问题、漏洞还是故障，拥有一个协作环境意味着每个人都可以高效地合作解决问题。'
- en: '**Adapting to changes**: The IT landscape is continually evolving, and databases
    are no exception. DBAs need to keep up to date with new database technologies,
    practices, and trends. A collaborative culture encourages continuous learning
    and adaptation to these changes.'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**适应变化**：信息技术领域在不断发展，数据库也不例外。DBA 需要跟上新的数据库技术、实践和趋势。协作文化鼓励持续学习并适应这些变化。'
- en: It’s reasonable to conclude that the DBA role in a DevOps environment involves
    a high degree of collaboration and communication with other teams. This is vital
    for speeding up development cycles, mitigating risks, enhancing system performance,
    reducing downtime, sharing knowledge, enabling faster issue resolution, and adapting
    to changes. Thus, the traditional image of the DBA as a gatekeeper or a siloed
    role is no longer relevant. Instead, DBAs are integral members of a cross-functional
    team that works together to deliver high-quality software rapidly and reliably.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 可以合理地得出结论，DevOps 环境中的 DBA 角色涉及与其他团队高度协作和沟通。这对加速开发周期、降低风险、提高系统性能、减少停机时间、共享知识、加快问题解决速度以及适应变化至关重要。因此，传统上将
    DBA 视为看门人或孤立角色的形象已不再适用。相反，DBA 是跨职能团队的核心成员，团队共同合作，快速且可靠地交付高质量软件。
- en: Summary
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 总结
- en: In today’s fast-paced and highly competitive technological landscape, the role
    of a DevOps DBA holds immense importance in fostering a successful DevOps environment.
    By combining their expertise in database administration with a deep understanding
    of DevOps principles, DevOps DBAs play a pivotal role in bridging the gap between
    development and operations teams, ensuring seamless collaboration and efficient
    workflows.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天快节奏且竞争激烈的技术环境中，DevOps DBA 的角色在促进成功的 DevOps 环境中具有极其重要的意义。通过将他们在数据库管理方面的专业知识与对
    DevOps 原则的深刻理解相结合，DevOps DBA 在弥合开发和运维团队之间的差距、确保无缝协作和高效工作流程方面发挥着关键作用。
- en: The responsibilities undertaken by a DevOps DBA are diverse and impactful. They
    are responsible for effectively managing databases, from design and implementation
    to maintenance, with a focus on data integrity, security, and availability. DevOps
    DBAs optimize database performance, monitor resource utilization, and plan for
    scalability to ensure that databases can handle increasing workloads without compromising
    efficiency. Their involvement in database management contributes to the overall
    reliability, performance, and security of the applications.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps DBA 承担的责任多种多样且具有重要影响。他们负责有效管理数据库，从设计和实现到维护，重点关注数据完整性、安全性和可用性。DevOps DBA
    优化数据库性能，监控资源利用情况，并进行可扩展性规划，确保数据库能够处理日益增长的工作负载，而不影响效率。他们在数据库管理中的参与有助于应用程序的整体可靠性、性能和安全性。
- en: Automation and IaC are crucial elements of a successful DevOps environment,
    and DevOps DBAs are at the forefront of implementing these practices. By leveraging
    automation tools and frameworks, DevOps DBAs streamline the provisioning, configuration
    management, and backup/recovery processes for databases. This automation minimizes
    manual errors, accelerates deployment cycles, and enhances reproducibility across
    different environments. Additionally, through the use of IaC techniques, DevOps
    DBAs codify and version control the database infrastructure, enabling consistent
    and reliable deployments throughout the software development life cycle.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化和基础设施即代码（IaC）是成功的 DevOps 环境中至关重要的元素，而 DevOps DBA 处于实施这些实践的前沿。通过利用自动化工具和框架，DevOps
    DBA 简化了数据库的配置管理、部署以及备份/恢复过程。这种自动化减少了人为错误，加速了部署周期，并提高了在不同环境中的可重复性。此外，通过采用 IaC 技术，DevOps
    DBA 对数据库基础设施进行编码和版本控制，实现了在软件开发生命周期中的一致性和可靠的部署。
- en: Collaboration is a fundamental aspect of DevOps, and DevOps DBAs excel in fostering
    effective collaboration between development and operations teams. They actively
    participate in project planning, offering their expertise and insights on database-related
    matters. DevOps DBAs ensure that the database schema aligns with application requirements,
    providing guidance on best practices for data storage, retrieval, and caching.
    This collaboration between DevOps DBAs and development teams results in enhanced
    application performance, improved quality, and accelerated development cycles.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 协作是DevOps的一个基本方面，DevOps数据库管理员在促进开发与运维团队之间的有效协作方面表现出色。他们积极参与项目规划，为与数据库相关的事务提供专业的见解和建议。DevOps数据库管理员确保数据库架构与应用需求相符，并提供数据存储、检索和缓存的最佳实践指导。DevOps数据库管理员与开发团队之间的这种协作带来了更高的应用性能、更好的质量和加速的开发周期。
- en: The integration of **continuous integration/continuous deployment** (**CI/CD**)
    practices is a cornerstone of the DevOps methodology. DevOps DBAs play a pivotal
    role in this process by seamlessly integrating database changes into the automated
    release pipeline. They employ tools for database migration, version control, and
    automated testing to ensure that application updates and database changes are
    synchronized. This integration enables frequent and reliable deployments, ensuring
    that new features and bug fixes are promptly delivered to end users.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成/持续部署**（**CI/CD**）实践的整合是DevOps方法论的基石。DevOps数据库管理员在这个过程中发挥着关键作用，通过将数据库更改无缝集成到自动化发布管道中。他们使用数据库迁移、版本控制和自动化测试等工具，确保应用程序更新和数据库更改的同步。这种集成使得频繁且可靠的部署成为可能，确保新功能和漏洞修复能够及时交付给最终用户。'
- en: Monitoring and incident management are crucial aspects of maintaining a robust
    DevOps environment, and DevOps DBAs excel in these areas. They implement comprehensive
    monitoring solutions to proactively identify and resolve database-related issues.
    By establishing performance baselines, creating alerts, and conducting capacity
    planning, DevOps DBAs optimize resource utilization and anticipate capacity needs.
    In the event of failures or incidents, DevOps DBAs respond promptly to restore
    service and investigate the root causes, minimizing downtime and ensuring the
    high availability of database systems.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 监控和事件管理是维持健壮DevOps环境的关键方面，而DevOps数据库管理员在这些领域表现突出。他们实施了全面的监控解决方案，主动识别并解决与数据库相关的问题。通过建立性能基线、创建警报和进行容量规划，DevOps数据库管理员优化了资源利用率并预见容量需求。在发生故障或事件时，DevOps数据库管理员会迅速响应，恢复服务并调查根本原因，最大限度地减少停机时间，确保数据库系统的高可用性。
- en: In summary, the contributions of DevOps DBAs are indispensable in facilitating
    a successful DevOps environment. They bridge the gap between development and operations
    teams, enabling effective communication, collaboration, and alignment of priorities.
    DevOps DBAs efficiently manage databases, ensuring data integrity, security, and
    performance. They automate processes and utilize IaC techniques to streamline
    provisioning, configuration, and backup/recovery tasks. Their collaboration with
    development teams enhances application performance and quality. Additionally,
    DevOps DBAs integrate database changes seamlessly into the CI/CD pipeline, enabling
    frequent and reliable deployments. Their monitoring and incident management capabilities
    ensure the reliability and resilience of the DevOps environment.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，DevOps数据库管理员的贡献在促进成功的DevOps环境中是不可或缺的。他们架起了开发与运维团队之间的桥梁，促进了有效的沟通、协作和优先级对齐。DevOps数据库管理员高效地管理数据库，确保数据的完整性、安全性和性能。他们通过自动化流程和利用基础设施即代码（IaC）技术，简化了资源配置、配置管理以及备份/恢复任务。他们与开发团队的合作提高了应用性能和质量。此外，DevOps数据库管理员将数据库更改无缝集成到CI/CD管道中，确保了频繁且可靠的部署。他们的监控和事件管理能力确保了DevOps环境的可靠性和韧性。
- en: Embracing the role of a DevOps DBA is crucial for organizations seeking to optimize
    their development processes and deliver high-quality applications in a fast-paced,
    continuously evolving digital landscape. By leveraging their expertise, DevOps
    DBAs contribute significantly to the success and competitiveness of businesses,
    empowering them to deliver innovative solutions efficiently and reliably. As technology
    continues to advance, the role of DevOps DBAs will continue to evolve and adapt,
    playing an increasingly vital role in the future of software development and operations.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 拥抱 DevOps DBA 的角色对于寻求优化开发过程并在快速变化、持续演进的数字化环境中交付高质量应用程序的组织至关重要。通过充分发挥其专业知识，DevOps
    DBA 对企业的成功和竞争力做出了重要贡献，使其能够高效、可靠地交付创新解决方案。随着技术的不断进步，DevOps DBA 的角色将继续演变和适应，在未来的软件开发和运营中发挥着日益重要的作用。
- en: In the next chapter, we will learn about database automation.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习数据库自动化。
- en: '[PRE31]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
