- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps and Developer Experience – Entering the World of Modern Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will cover two main topics. First, we will address what
    DevOps is, the main subject of this book. Next, we will delve into developer experience,
    a strategy essential for maintaining and continually achieving success in DevOps
    within an organization. Within this context, we will also introduce the tools,
    Git and GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter serves as a compass for those about to embark on learning about
    DevOps, tools, and collaboration practices for DevOps. It will establish foundational
    knowledge on the positioning of these concepts and practices and how they can
    enhance your development process.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following main topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: DevOps – Accelerating the development cycle by reducing friction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developer experience – A strategy for developer excellence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git – Where code collaborations begin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub – The AI-powered developer platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps – Accelerating the development cycle by reducing friction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s get started by learning the DevOps fundamentals.
  prefs: []
  type: TYPE_NORMAL
- en: The world of technology has various terms. At times, such terms can be abstract,
    and people tend to apply various interpretations to a specific framework. DevOps
    is no exception. Additionally, when referring to DevOps, considering perspectives
    from an individual, team, and the entire organization can sometimes make it unclear
    how various components interact with each other.
  prefs: []
  type: TYPE_NORMAL
- en: We will review the basics of DevOps, clear up misconceptions, and touch on some
    of its typical practices. Now, before we dive into what DevOps is, let’s talk
    about how things used to be in the past.
  prefs: []
  type: TYPE_NORMAL
- en: Background on DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Back in the day, software was essentially something you installed. So, for a
    product development team, all you needed were engineers who could develop and
    test it. Speaking of testing, it was all about squashing bugs before the release.
    Just imagine it for a moment; it was similar to the release of early video games,
    much like the **Nintendo Entertainment System** (**NES**) era. Once a game was
    shipped on a cartridge, there was no opportunity for updates or adding new features.
    Bugs that shipped with the game remained with the consumer forever. However, with
    the emergence of the Apache HTTP Server and the shift toward network communication,
    the need arose for IT Operations to manage this new paradigm.
  prefs: []
  type: TYPE_NORMAL
- en: In many cases, the IT Operations team specialized in IT operations. Their tools,
    culture, and even their objectives were different from those of the development
    team. The development team wanted to add features, while the IT team considered
    system stability their top priority. This was a contradiction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moreover, in the divided world of these two teams, when it came to deployment,
    it felt like tossing code over the wall. Developers would toss a perfectly deployable
    artifact to the IT Operations team on the other side of the wall. However, for
    some reason, the IT Operations team would receive something incomplete and non-functional
    for the production environment, leading to exhaustion as they struggled to deploy
    and maintain it somehow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Engineers tossing code over the wall](img/B21203_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Engineers tossing code over the wall
  prefs: []
  type: TYPE_NORMAL
- en: In recent years, there has been remarkable technological advancement, and its
    influence has permeated well beyond the realm of software, touching virtually
    every industry. Why is this the case? This is because software development plays
    a pivotal role in the strategies of organizations, regardless of their size, in
    modern business management. Companies affected by this technological wave find
    themselves in a competitive landscape where the focus is on delivering swift,
    cutting-edge, and reliable products to their customers.
  prefs: []
  type: TYPE_NORMAL
- en: Despite the possibility of significant changes in market conditions and customer
    needs in less than a year, releasing software only a few times annually is not
    sufficient. We cannot afford delays in software releases due to friction between
    internal silos. A **silo** denotes an isolated system, process, or department
    that lacks integration or communication with other parts, potentially causing
    inefficiencies. We must find a way to streamline the process from product development
    to operation. This is where a completely new development methodology, organizational
    structure, and culture come into play.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps emerges as a methodology born from this very scenario. It represents
    a fusion of development and operations, where development and operations teams
    collaborate as a unified entity to instill a shared culture, refine processes,
    and deploy tools, all in the pursuit of expediting releases, enhancing overall
    product quality, gathering customer feedback, and ultimately providing better
    and faster service to customers. This, in turn, leads to more effective market
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: What is DevOps?
  prefs: []
  type: TYPE_NORMAL
- en: The term **DevOps** is a blend of the words **Development** and **Operations**.
  prefs: []
  type: TYPE_NORMAL
- en: So, is DevOps simply about fostering collaboration between the development and
    operations teams?
  prefs: []
  type: TYPE_NORMAL
- en: While that’s part of the story, the reality is often more complex. There’s usually
    a disconnect between these two teams, each having their unique priorities and
    objectives. Merely bringing them together may enhance their relationship and mutual
    understanding to a degree, but that’s often insufficient for effective collaboration.
    In essence, DevOps transcends just integrating roles or teams; it represents a
    broader cultural shift within the organization. It is about aligning priorities,
    streamlining workflows, and, ultimately, breaking down silos that hinder effective
    communication and progress.
  prefs: []
  type: TYPE_NORMAL
- en: 'In brief, DevOps is the union of people, process, and tools to continually
    provide value to end users and is fundamentally a cultural shift:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – DevOps is the union of people, process, and tools](img/B21203_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – DevOps is the union of people, process, and tools
  prefs: []
  type: TYPE_NORMAL
- en: “I see. I understand. DevOps is all about people, process, and tools.”
  prefs: []
  type: TYPE_NORMAL
- en: Many people think they understand it here and move on to implementing an automation
    pipeline for DevOps. But wait. Simply replacing these elements alone will not
    ensure the success of a DevOps initiative. For DevOps to be successful, you need
    to know more about what it is, what it is not, and why it is.
  prefs: []
  type: TYPE_NORMAL
- en: In reality, the definition of DevOps is quite broad. Consequently, the concept
    of *Dev*Ops*, an extended form of DevOps, has been rapidly expanding recently.
    Various derivative approaches such as DevSecOps and BizDevOps have been proposed,
    leading to a multitude of perspectives on what DevOps encompasses.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, there is no universally accepted, precise definition of DevOps,
    and how to do something called DevOps is answered differently by different people.
    Consequently, misconceptions and inaccurate interpretations about DevOps are common,
    often leading to disputes. And sometimes, people do not want to talk about it
    when it comes time to talk about doing DevOps, even though it is so important!
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – DevOps is like the elephant in the room that often goes unaddressed](img/B21203_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – DevOps is like the elephant in the room that often goes unaddressed
  prefs: []
  type: TYPE_NORMAL
- en: What is NOT DevOps?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often, when defining what DevOps is, it might be easier to indicate what is
    *NOT* DevOps rather than trying to specify what DevOps truly is. Let’s clear up
    a typical misunderstanding here.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is NOT just about a tool, technology, or product
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are numerous tools available in the market that can be applied to DevOps.
    Many cloud and tool vendors promote them by saying, “*With this tool, you can
    build a DevOps workflow*,” or “*This tool is essential for a* *DevOps team.*”
  prefs: []
  type: TYPE_NORMAL
- en: When many people hear the term *DevOps*, some of them think of cloud technologies
    such as **Amazon Web Services** (**AWS**), Azure, and **Google Cloud Platform**
    (**GCP**), or technologies such as Docker and Kubernetes. Furthermore, Kubernetes’
    ecosystem also includes many components such as Istio, Flux, Helm, Envoy, and
    Prometheus. There are several platforms, including GitHub Actions, CircleCI, and
    Jenkins, that facilitate continuous, fast, and frequent releases. The world of
    monitoring tools is equally diverse. If you are not yet acquainted with these
    names, it might take some time to understand their nuances and benefits.
  prefs: []
  type: TYPE_NORMAL
- en: However, even if you master these tools and follow well-known architectures
    or success stories, that does not mean you have achieved DevOps. Because people
    and process always exist behind the tool, and just changing tools will not change
    them.
  prefs: []
  type: TYPE_NORMAL
- en: In reality, it is not uncommon to see waterfall-style development even while
    using tools branded with the name *DevOps*. Respecting existing complex company
    rules by inserting multi-step approval processes into automated workflows, restricting
    customer releases to once every 3 months to avoid changing accounting or security
    checks, or having the infrastructure team manage containers created by the app
    team using a platform built with the modern orchestration system, Kubernetes—doing
    all these things will only increase the operational burden and confusion rather
    than creating business value.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, achieving significant business goals and transformations requires
    changes in people, organizations, and processes. Then, is DevOps about transforming
    individuals and organizations?
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is NOT just specific individuals, teams, or roles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: DevOps is a reality, but the term itself is somewhat of a buzzword. Companies
    hire engineers for these new activities with titles such as DevOps Engineer or
    DevOps Architect, and they even refer to their teams as DevOps teams. People who
    think they cannot do DevOps themselves may even make the mistake of trying to
    outsource DevOps to DevOps partners.
  prefs: []
  type: TYPE_NORMAL
- en: When you look at this situation, it might seem like DevOps refers to specific
    individuals, teams, or roles, but that’s not the case. In many instances, these
    terms simply refer to roles such as super infrastructure engineers, super developers,
    or just cloud engineers.
  prefs: []
  type: TYPE_NORMAL
- en: Companies do this because, in order to respond quickly to evolving business
    needs and achieve rapid releases, they require new technologies and automation.
    Moreover, they often have to manage complex platforms that include both existing
    and new components. This includes making the most use of GitHub Actions, which
    is covered in this book. Areas that used to involve manual installation in the
    infrastructure domain, configuration through screens, or CLI operations now require
    to be under version control with Git and the configuration and management of automated
    workflows.
  prefs: []
  type: TYPE_NORMAL
- en: However, in practice, DevOps deals with even more complex matters. It is not
    just about mastering these tools and technologies or configuring roles for them.
    In reality, it requires strong leaders who can lead transformation within existing
    systems and organizations. Often, they engage in actions that go beyond the broad
    framework of DevOps. Many of the individuals I have seen who have truly achieved
    DevOps are pursuing larger goals rather than just the *implementation* *of DevOps*.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is essentially a journey to transform organizations that deal with a
    variety of complex technologies and products, and it is not about simply adding
    people with new skills to existing teams or changing team or job definitions.
  prefs: []
  type: TYPE_NORMAL
- en: So, if DevOps is not merely a tool nor solely about people and organization,
    does a process specifically termed DevOps exist?
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is NOT just a process
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: DevOps teams often engage in iterative development over short cycles of 2-3
    weeks, commonly called **sprints**, and hold stand-up meetings every morning.
    This is true, and by adopting DevOps, you may incorporate processes that adhere
    to Agile process and Scrum best practices. These are methodologies in software
    development that divide each functionality into smaller parts and drive development
    through numerous short cycles.
  prefs: []
  type: TYPE_NORMAL
- en: So, is DevOps an evolved concept of Agile or Scrum, or does it encompass them?
    The answer to this question is both *yes* and *no*.
  prefs: []
  type: TYPE_NORMAL
- en: 'DevOps broadens the scope to not just focus on software development like Agile,
    but also extends to the release of software, gathering feedback, and improvements.
    These principles and philosophies apply throughout the **Software Development
    Life Cycle** (**SDLC**). Teams focus on the entire life cycle of the product,
    not just on developing new features or designing web components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – The eight phases of a DevOps life cycle](img/B21203_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – The eight phases of a DevOps life cycle
  prefs: []
  type: TYPE_NORMAL
- en: However, the ultimate goal of DevOps is not to introduce a new process itself.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps has a wide range of practices. Specific practices will be elaborated
    on from [*Chapter 5*](B21203_05.xhtml#_idTextAnchor109) onward, but not all these
    practices can be equally applied to every team. For example, an environment that
    needs to deploy applications to numerous servers such as Microsoft is different
    from a situation where a small application is deployed to an EC2 instance. The
    practices to be applied also differ between a service with a user base of 1 million
    and a service with a user base of 1,000.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s consider Agile, quoting from Andy Hunt’s blog:'
  prefs: []
  type: TYPE_NORMAL
- en: Agile methods ask practitioners to think, and frankly, that’s a hard sell. It
    is far more comfortable to simply follow what rules are given and claim you are
    “doing it by the book.” It is easy, it is safe from ridicule or recrimination;
    you will not get fired for it. While we might publicly decry the narrow confines
    of a set of rules, there is safety and comfort there. But of course, to be agile
    or effective is not about comfort.
  prefs: []
  type: TYPE_NORMAL
- en: This idea applies to DevOps as well. In order to frequently and swiftly release
    customer-centric developments, offer a reliable service, and ultimately make a
    significant impact on the business, you need to tackle problems from a broader
    perspective than just tools, people, and process.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is culture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, DevOps is more than just a fusion of development and operations, specific
    roles, processes, tools, technology, or products. But, people often simplify it
    as people, process, and tools.
  prefs: []
  type: TYPE_NORMAL
- en: So, what is DevOps, really?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s turn to the words of Patrick Debois, a prominent figure in the DevOps
    community, for clarity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'My current definition of Dev*Ops: everything you do to overcome the friction
    created by silos ... All the rest is plain engineering.'
  prefs: []
  type: TYPE_NORMAL
- en: In today’s era of cloud technology, both cutting-edge companies and traditional
    enterprises, along with start-ups, can readily access the same environments. Even
    AI-powered tools are available at an affordable cost.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, what hinders your team and business progress is friction, and this
    friction often arises within silos that encompass people, process, and tools.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps, at its core, represents a cultural shift and an approach designed to
    eliminate friction among the silos within an organization. It entails a shift
    in mindset, habits, and culture.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps principles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So, what exactly constitutes a DevOps culture? Let’s delve into the core principles
    of DevOps to gain a more comprehensive understanding of what this culture truly
    entails.
  prefs: []
  type: TYPE_NORMAL
- en: Customer-centric
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Every action in every process should aim to provide value to the customer.
  prefs: []
  type: TYPE_NORMAL
- en: Focusing on the customer while building and maintaining software enables quicker
    and more relevant feature delivery. Short feedback loops contribute to fine-tuning
    the product in alignment with user needs, reducing risks, and maximizing value
    at the lowest possible cost. By focusing on the customer’s needs, the ultimate
    goal becomes efficiently solving real-world problems, making it easier to prioritize
    tasks, manage backlogs, and streamline resource allocation, making operations
    efficient and cost-effective. Ultimately, this sets the stage for long-term business
    success by better meeting market demands and user expectations.
  prefs: []
  type: TYPE_NORMAL
- en: In DevOps, being customer-centric is not just a catchphrase; it is a necessity.
  prefs: []
  type: TYPE_NORMAL
- en: Creating with the end in mind
  prefs: []
  type: TYPE_NORMAL
- en: Understanding customer needs and addressing real-world problems should take
    precedence over operating on mere assumptions. This advocates for a holistic strategy
    where teams synchronize both developmental and operational tasks to satisfy customer
    requirements. This includes a grasp of the product’s entire life cycle, from its
    inception and development through to its deployment and ongoing support, making
    certain that the final deliverable genuinely benefits the end users.
  prefs: []
  type: TYPE_NORMAL
- en: Neglecting customer needs from the beginning can result in a technically impeccable
    product that, nonetheless, misses the mark in terms of user satisfaction and problem-solving
    capability. This principle acts as a constant cue to align all technological endeavors
    with business goals and user expectations, ensuring that the final product is
    not only functional but also valuable and relevant to the audience.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-functional autonomous teams
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: At the core of successful DevOps implementation is the indispensable strategy
    of forming autonomous, cross-functional teams. Unlike traditional engineering
    setups, where developers, operations, and **Quality Assurance** (**QA**) specialists
    operate in distinct compartments, DevOps champions the dissolution of these barriers.
    The key takeaway here is not just the formation of diverse teams but making these
    teams autonomous—capable of overseeing a product or feature from inception to
    delivery.
  prefs: []
  type: TYPE_NORMAL
- en: Why is this essential? The answer lies in agility and efficiency. When a team
    possesses a range of skills, from coding and testing to deployment and design—and
    even a nuanced understanding of the business—the speed of decision-making accelerates.
    This replaces the sluggish and cumbersome chain of command inherent in hierarchical
    systems with a culture of prompt, accountable action.
  prefs: []
  type: TYPE_NORMAL
- en: The elimination of these organizational bottlenecks not only speeds up the workflow
    but also cultivates a culture of ownership and accountability. The team does not
    have to wait for external departments or higher-ups to make decisions; they have
    the collective skill set and the empowerment to address challenges head-on.
  prefs: []
  type: TYPE_NORMAL
- en: By dissolving silos that often cause friction within organizations, autonomous,
    cross-functional teams serve as the linchpin for smooth DevOps operations. The
    result is a streamlined process that facilitates quick responses to changes and
    fosters a culture of collaboration and responsibility. This is not just a nice-to-have
    feature of modern engineering; it is a foundational strategy for any enterprise
    aiming to successfully implement DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous improvement
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Continuous improvement serves as the bedrock of DevOps, offering both technical
    and cultural advantages that are indispensable for modern software development
    and operations. On the technical side, it enables qualities such as reliability,
    adaptability, and efficiency of software delivery processes through ongoing analysis
    of performance metrics and utilization of automated workflows. These features
    not only make the end product robust but also contribute to resource optimization
    and quicker feature delivery. Culturally, continuous improvement fosters a collaborative
    environment, ensuring accountability, encouraging a learning culture, and ultimately
    aiding in the breakdown of organizational silos. It also aligns strategically
    with improved developer experience.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of continuous improvement becomes even clearer when viewed through
    the lens of feedback loops, which act as the nervous system of the DevOps life
    cycle. These loops enable real-time monitoring and provide actionable metrics
    that feed directly into continuous improvement initiatives. By regularly assessing
    system performance, user engagement, and other **Key Performance Indicators**
    (**KPIs**), organizations can quickly adjust their strategies and ensure long-term
    success. This dynamic, data-driven approach is essential in today’s fast-paced
    technology landscape, making continuous improvement not just a best practice but
    a fundamental requirement for competitive survival.
  prefs: []
  type: TYPE_NORMAL
- en: Automation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In traditional development models, development and operations have often been
    two separate silos. The developers focused on writing code and building applications,
    while operations focused on deployment and maintenance. This disjointed approach
    often led to delays, inefficiencies, and friction between the two teams.
  prefs: []
  type: TYPE_NORMAL
- en: '**Continuous Integration/Continuous Delivery** (**CI/CD**) emerged as the crucial
    bridge to connect these two worlds. With CI, code changes from multiple contributors
    are frequently merged into a shared repository, where automated tests are run
    to detect errors and inconsistencies as swiftly as possible. This encourages a
    more collaborative environment by making it easier to identify issues early in
    the development cycle. CD ensures the code is always ready for deployment, eliminating
    lengthy *freeze periods* where no new features could be added because a release
    was pending.'
  prefs: []
  type: TYPE_NORMAL
- en: Manual processes are not only prone to errors but also act as a significant
    drag on speed and efficiency, the very issues DevOps aims to resolve. Before automation
    was broadly adopted, system admins would manually configure servers, a cumbersome
    and error-prone process. Also, developers would often find it challenging to replicate
    the ops environment for testing, leading to the notorious “*It works on my* *machine*”
    syndrome.
  prefs: []
  type: TYPE_NORMAL
- en: Automation, in this context, is not a luxury but a necessity. Automated scripts
    handle tasks from code testing to deployment, ensuring that the process is as
    standardized as possible, thereby eliminating many of the errors and delays associated
    with manual intervention.
  prefs: []
  type: TYPE_NORMAL
- en: Soaring to excellence in DevOps practices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The basic concept of DevOps has been covered so far. In fact, the concept of
    DevOps has been continuously evolving. Some concepts are positioned as *what should
    have been originally included* or *what was originally included but have not been
    discussed*. These may carry different labels than DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at some particularly important ideas within this context. These are
    beneficial concepts to incorporate into the culture of DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: DevSecOps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: DevSecOps is an approach that integrates security elements into the DevOps framework.
    In this methodology, security is considered a crucial aspect from the initial
    stages of development. The aim is to deliver software that is both efficient and
    secure in a timely manner.
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, security was often handled by separate specialized teams and
    was generally addressed in the final stages of the development cycle. Many instances
    occurred where vulnerabilities were identified post-development, causing delays
    in software releases. By adopting a shift-left approach to security, it is possible
    to significantly reduce the cost of corrections. In the DevSecOps context, **shift-left**
    refers to the practice of integrating security measures earlier in the SDLC, ideally
    during the design and development phases. By addressing security concerns from
    the outset, teams aim to identify and mitigate vulnerabilities more efficiently,
    reducing the costs and risks associated with late-stage fixes. The shift-left
    approach emphasizes proactive security rather than reactive, ensuring that applications
    are secure by design. The remediation costs for security issues that emerge during
    the operational phase can be prohibitively high. Moreover, this late-stage focus
    puts customer data at risk and can harm a company’s reputation.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the **National Institute of Standards and Technology** (**NIST**),
    addressing flaws during the production phase can be 30 times more costly, and
    this cost can escalate to 60 times more when dealing specifically with security-related
    defects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Graph of the relative cost to fix bugs based on time of detection
    provided by NIST](img/B21203_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – Graph of the relative cost to fix bugs based on time of detection
    provided by NIST
  prefs: []
  type: TYPE_NORMAL
- en: What stands out in DevSecOps is the concept of treating security not as an endpoint
    but as a **continuous state**. For example, in the past, it was common to do static
    code analysis or check off security considerations in a security sheet during
    releases or technical adoptions. However, as release cycles have accelerated and
    technology continues to evolve rapidly, manually checking all security aspects
    each time has become impractical. DevSecOps addresses this issue by employing
    automated tools to ensure a continuous state of security. This allows for rapid
    response when new vulnerabilities are discovered.
  prefs: []
  type: TYPE_NORMAL
- en: In this sense, DevSecOps could be defined as integrating security processes
    and tools into the DevOps process, creating a culture in which developers can
    also consider security, treating security as a state rather than an artifact at
    a specific point in time, and creating a state in which processes, environments,
    and data are always preserved so that security and innovation can be compatible.
  prefs: []
  type: TYPE_NORMAL
- en: 'DevSecOps is particularly critical for companies that utilize **Open Source
    Software** (**OSS**). Nowadays, most businesses actively use some form of OSS,
    and this software may contain unknown vulnerabilities. By incorporating DevSecOps
    principles and checking for these in workflows on a weekly basis, it is possible
    to detect these vulnerabilities early on and quickly make corrections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – DevSecOps emphasizes security within the DevOps life cycle](img/B21203_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – DevSecOps emphasizes security within the DevOps life cycle
  prefs: []
  type: TYPE_NORMAL
- en: Overall, DevSecOps aims to incorporate security throughout the development-to-operations
    life cycle, facilitating more secure and efficient software development. This
    integrated approach allows for the coexistence of business and security.
  prefs: []
  type: TYPE_NORMAL
- en: Infrastructure as Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Infrastructure as Code** (**IaC**) is a methodology for managing and provisioning
    system infrastructure, including network configurations and server settings, through
    code. This is automated by specialized configuration management software. Traditionally,
    tasks such as server setup and network configuration were performed manually by
    humans, following procedural documents. This manual approach posed several problems,
    including the complexity and time-consuming nature of the tasks, a high risk of
    human error, and potential inconsistencies between procedural documents and the
    actual environment. These issues become particularly exacerbated in large-scale
    systems, making manual management unsustainable.'
  prefs: []
  type: TYPE_NORMAL
- en: The adoption of IaC alleviates these challenges significantly. In an IaC environment,
    the state of the infrastructure is defined in code, which is then automatically
    applied by configuration management tools. This eliminates the need for tedious
    manual work and ensures high levels of reproducibility and consistency. Furthermore,
    since these tools handle the automated building and operation of the infrastructure,
    the processes become far more efficient and can be automated, allowing for more
    reliable and scalable system management.
  prefs: []
  type: TYPE_NORMAL
- en: Observability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Observability serves as a crucial component in managing modern software systems,
    especially within a DevOps framework that seeks to eliminate friction and enhance
    communication across organizational silos. Observability is often perceived as
    an evolved form of monitoring, but each serves its unique purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'In traditional monitoring, the focal point is to observe predefined elements
    of a system. Essentially, monitoring is rule-based. It involves setting predetermined
    metrics and benchmarks that, when breached, generate alerts. Monitoring is about
    keeping an eye on known issues—it is an approach that asks, “*Is my system working
    as expected?*” However, the scope of monitoring is typically limited to spotting
    where the problem has arisen. Not why it happened. This may only show the tip
    of the iceberg. It is going to take a long time to get the whole overview:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7 – The areas visible in the monitoring are just the tip of the
    iceberg](img/B21203_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – The areas visible in the monitoring are just the tip of the iceberg
  prefs: []
  type: TYPE_NORMAL
- en: Observability, however, presents a more nuanced approach. It not only incorporates
    monitoring but goes beyond by offering a comprehensive insight into a system’s
    overall health. In this model, it is less about watching for predefined issues
    and more about a deep-rooted understanding of what’s happening inside your system.
    Observability invites you to look beyond the surface, enabling you to ask, “*What
    is the system’s current state and why is it in* *that state?*”
  prefs: []
  type: TYPE_NORMAL
- en: 'Observability, conversely, relies on metrics, logs, and traces, often known
    as telemetry data, to provide a comprehensive and interrelated picture of system
    performance. In the realm of DevOps, monitoring is not just an isolated task for
    the operations team; it is a collective responsibility that involves both operations
    and development professionals. As systems have become more intricate, especially
    with the rise of cloud-native technologies and microservices, the importance of
    observability has been amplified. It offers a more holistic way of understanding
    how different components of a system interact, making it easier to spot bottlenecks,
    debug issues, and optimize performance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – The three main pillars of observability are tracing, metrics,
    and logging](img/B21203_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 – The three main pillars of observability are tracing, metrics, and
    logging
  prefs: []
  type: TYPE_NORMAL
- en: Traditional monitoring tools were often created to meet the requirements of
    particular organizational structures and needs, leading to a somewhat fragmented
    landscape of solutions. However, cloud-native environments require a more integrated
    approach. Observability tools are designed to provide this integration, offering
    a unified view of the system’s state across diverse environments. This comprehensive
    understanding enables DevOps teams to streamline processes, mitigate risks, and
    more effectively contribute to their organizations’ goals.
  prefs: []
  type: TYPE_NORMAL
- en: The next challenge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You now understand the basics of DevOps. This section has covered what it is
    and what it is not, and it also covered the DevOps culture. You have also reviewed
    the areas that make up DevOps, such as DevSecOps, IaC, and observability.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s say you have either succeeded in DevOps or you are on the road to
    success and feeling good about it. What is your next challenge? That is, “*How
    can DevOps itself continue to be successful and grow within* *the organization?*”
  prefs: []
  type: TYPE_NORMAL
- en: 'Something like this could happen: “*We have a great DevOps team. It is not
    perfect yet, but the culture has changed a lot and we are getting great collaboration!*”
    Just when you think it is going to be perfect, the engineers who have grown are
    leaving in droves. They are looking for a better environment.'
  prefs: []
  type: TYPE_NORMAL
- en: In many cases, the most skilled engineers on the team with the broadest knowledge
    will be doing the most complex operations behind the scenes. The most valuable
    engineers may end up doing those minor trivial tasks that they may not really
    want to do.
  prefs: []
  type: TYPE_NORMAL
- en: The fact is that most organizations do not have an environment in place for
    developers to work productively and happily. It could be the tools, or it could
    be the large number of non-essential tasks and too many tools.
  prefs: []
  type: TYPE_NORMAL
- en: Now, these are just examples, but to keep DevOps at its best and to grow it
    further, an organization needs to think about its developers over the long term.
    No matter if you are an individual contributor or a manager, you are also responsible
    for making sure that your team members feel good about their work so that you
    can have the best team possible. If you embody a good development experience,
    your team members will give you a good experience too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go back to the first question here: “*How can DevOps itself continue
    to be successful and grow within* *the organization?*”'
  prefs: []
  type: TYPE_NORMAL
- en: One answer is to make developers happy—in other words, to create an environment
    where developers can do their best work. This is called developer experience.
  prefs: []
  type: TYPE_NORMAL
- en: Developer experience – A strategy for developer excellence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Developer experience**, the term, goes beyond mere user experience and encompasses
    how developers within a DevOps team can be productive and satisfied with their
    work. This also works as an organizational strategy to make DevOps successful.
    If engineers are happy, there are no silos within the organization, and if the
    communication flows well, your DevOps will succeed. In that regard, GitHub is
    basically a platform for maximizing the developer experience, and Git is the means
    to that end:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9 – Developer experience is a key strategy and foundation for successful
    DevOps](img/B21203_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.9 – Developer experience is a key strategy and foundation for successful
    DevOps
  prefs: []
  type: TYPE_NORMAL
- en: When you look at individual tools within the realm of DevOps, they may seem
    small. However, when viewed from the perspective of sustaining and achieving DevOps
    success, the connection between developer experience and how to use Git and GitHub
    becomes significantly stronger. Because that is where the essential developers’
    communication is taking place.
  prefs: []
  type: TYPE_NORMAL
- en: Developer experience is a strategy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The developer experience is essentially about creating an environment where
    developers can do their best work. If it is defined in the context of DevOps,
    the developer experience can be interpreted as a strategy for creating, growing,
    and maintaining the best DevOps culture as an organization. DevOps is all about
    culture. If your development team is dissatisfied, do not expect a thriving culture.
    Without a thriving culture, DevOps will not flourish.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to GitHub, the concept of developer experience is represented by
    the following equation. This equation can be found in the article *Developer experience:
    what is it and why should you* *care?* ([https://github.blog/2023-06-08-developer-experience-what-is-it-and-why-should-you-care/](https://github.blog/2023-06-08-developer-experience-what-is-it-and-why-should-you-care/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.10 – GitHub’s developer experience formula: how developer experience
    is represented on GitHub](img/B21203_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.10 – GitHub’s developer experience formula: how developer experience
    is represented on GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: Each element of the equation can be explained as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '**Developer productivity**: This represents *efficiency* and *speed*. In other
    words, it reflects how efficiently and quickly a developer can complete tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developer impact**: This includes *impact*, *implementing code changes*,
    and *moving from idea to production*. It illustrates the extent of influence a
    developer has and how swiftly they can transform an idea into a real product or
    service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developer satisfaction**: This signifies achieving *high impact with low
    friction in the work environment*, *workflow*, and *tools*. It essentially measures
    how satisfied developers are with their work, how smooth their workflow is, and
    how effective the tools they use are.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, these elements are amplified by **collaboration**. The better
    the cooperation and communication within a team, the higher the productivity,
    impact, and satisfaction levels of the developers will be. Let’s now explore how
    each of these elements works for the DevOps foundation.
  prefs: []
  type: TYPE_NORMAL
- en: Developer productivity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Boosting developer productivity presents a complex challenge. DevOps serves
    as a catalyst in smoothing organizational inefficiencies and ramping up the throughput
    of development teams.
  prefs: []
  type: TYPE_NORMAL
- en: 'Today’s developers juggle a plethora of responsibilities: coding, code reviews,
    architectural planning, and, occasionally, infrastructure deployment. Some of
    these tasks occur at an organizational or team level, while others are individual
    endeavors. DevOps clearly emphasizes collaborative efforts, but it is crucial
    to also focus on amplifying individual performance—a dynamic that needs careful
    monitoring. The developer experience also covers this part.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Numerous businesses are currently struggling due to a lack of skilled engineers.
    However, consider this: in a 100-developer organization, if every developer could
    conserve 10 minutes each day, that would amount to nearly 17 extra hours. It is
    almost like adding two additional members.'
  prefs: []
  type: TYPE_NORMAL
- en: However, measuring an individual engineer’s productivity poses a challenging
    endeavor. Although quantifiable metrics such as the number of lines of code written
    or commits made may seem like reliable indicators, they often fail to provide
    a comprehensive view. Sometimes, a single well-thought-out line of code can be
    more valuable than 10 hastily composed ones. Tasks such as research and architectural
    design typically go unmeasured, further complicating the assessment. Relying exclusively
    on these narrow metrics could unintentionally cultivate a culture of micromanagement.
    When these metrics become evaluative benchmarks, there is a risk of promoting
    behaviors that emphasize noise over actual value. These metrics are covered in
    [*Chapter 6*](B21203_06.xhtml#_idTextAnchor125).
  prefs: []
  type: TYPE_NORMAL
- en: In the context of developer productivity, one perspective could also be to use
    AI in various development settings. The incorporation of AI into development workflows
    marks a transformative era. Tools such as GitHub Copilot serve as AI-powered coding
    assistants, supporting the code-writing process and thereby reducing both time
    and costs. Since the unveiling of ChatGPT in November 2022, AI’s footprint in
    development has been expanding at an unprecedented rate.
  prefs: []
  type: TYPE_NORMAL
- en: Developer impact
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the realm of DevOps, the focus often centers on how teams influence customers
    and the overall business. Metrics in this area commonly begin with the product
    or customer, such as measuring the frequency of deployments. In contrast, developer
    experience zeroes in on the developer, emphasizing the impact they can make on
    both the code base and the ideas that eventually go into production.
  prefs: []
  type: TYPE_NORMAL
- en: Now, what is the difference between developer productivity and developer impact?
    For productivity, the measure of success would be to do more work in less time.
    On the other hand, it is very difficult to understand how to measure impact and
    what should be measured. Also, different teams have different definitions of impact.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest thing to identify is something that can be quantified as a contribution
    to the eventual value of the product. For example, if a team is developing a new
    feature, the impact would be the number of users onboarded and the revenue generated
    from the new feature. Other examples can include downloads, requests, **Service-Level
    Agreements** (**SLAs**), and so on.
  prefs: []
  type: TYPE_NORMAL
- en: I believe that engineer can become happy when a good DevOps culture is created.
    However, some may have thought, “*After all, it is all about money, isn’t it?*”
    In fact, measuring the impact of developers is a matter of money.
  prefs: []
  type: TYPE_NORMAL
- en: If the engineer’s impact is not measured correctly and the compensation is not
    appropriate to the engineer’s market value, then the engineer’s satisfaction with
    the job will go down. The scenario from here should not be hard to imagine. Many
    organizations are becoming more complex, and the impact is indirect, but even
    currently, not many companies are able to measure that indirect impact.
  prefs: []
  type: TYPE_NORMAL
- en: This ultimately aligns very strongly with the DevOps principle. After all, if
    the impact of the developer is to be measured, it is necessary to know the customer
    and the customer’s state in the product and to create the product with the mindset
    of “*Create with the end* *in mind.*”
  prefs: []
  type: TYPE_NORMAL
- en: There are many possible metrics for developer impact, but the easiest to take
    include the time it takes for a developer to close a pull request and the span
    of time between receiving customer feedback and actually implementing it.
  prefs: []
  type: TYPE_NORMAL
- en: Developer satisfaction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most importantly, developer productivity and its impact in this context is not
    intended for managers to manage and point out the productivity of individual developers,
    but rather to help developers accelerate their development in a more positive
    manner.
  prefs: []
  type: TYPE_NORMAL
- en: Organizations need to make sure that their engineers are satisfied through development
    and delivering value to customers by having the best environment, workflow, and
    tools in place.
  prefs: []
  type: TYPE_NORMAL
- en: While at the broader organizational level, in the context of overall optimization,
    it is necessary to ensure that the environment is broadly prepared to increase
    the productivity of all developers, at the narrower organizational level, it is
    necessary to develop strategies to increase developer productivity according to
    team, role, and experience. This includes minimizing lead times through DevOps
    practices that alleviate team bottlenecks while providing individual developers
    with the tools they need to perform optimally.
  prefs: []
  type: TYPE_NORMAL
- en: Collaboration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When it comes to fortifying developer experience for DevOps success, collaboration
    is the linchpin. It is not just about integrating the development team and infrastructure
    team and sharing some responsibility; it is about creating an environment where
    developers can thrive, contribute, and feel a sense of ownership and engagement.
    The ideal is a state of transparent collaboration where organizational silos are
    not just reduced but entirely eliminated. This free flow of ideas, best practices,
    and constructive criticism leads to a work environment that fuels developer experience.
  prefs: []
  type: TYPE_NORMAL
- en: For example, it is said that DevOps is not just about tools and practices; it
    is a culture, a philosophy, and a concept aimed at business and organizational
    success. In this context, Git and GitHub are often marginalized as *just tools*
    or *means of communication*. Such a viewpoint is sometimes true but often short-sighted.
    Adopting this perspective may limit your understanding to only individual aspects
    such as how to use GitHub Actions for CI/CD or how to use Git and Git branching
    strategies when you intend to learn Git and GitHub for DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: When working in an organization or as a team, the team consists of individual
    contributors such as developers. Especially when developers work in a team or
    an organization, communication becomes extremely complex. The success of this
    dialogue is ultimately the key to enhancing the productivity of the team or individual.
    Git and GitHub are not just tools but platforms to share code, get feedback, integrate,
    and grow. The ability to communicate well in such environments is crucial to the
    success of DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most powerful paradigms to facilitate this kind of collaboration
    is InnerSource. Borrowing from the open source collaboration model, InnerSource
    empowers developers within an organization to contribute to other teams’ projects
    that they are not formally a part of. Just like in open source development, InnerSource
    encourages open communication, code sharing, and collective problem-solving, effectively
    reducing silos that often plague organizations.
  prefs: []
  type: TYPE_NORMAL
- en: The open source collaboration model itself serves as a testament to what can
    be achieved when barriers are broken down. By opening up a code base to the public,
    open source projects tap into a global community of developers, each bringing
    their unique perspective and expertise to the table. There’s a mutualistic relationship
    between individual growth and collective progress, a symbiosis that DevOps teams
    should strive for internally. This open model brings with it the core tenets of
    transparent documentation, peer reviews, and a democratic approach to problem-solving,
    enriching the developer experience.
  prefs: []
  type: TYPE_NORMAL
- en: Transparency is key to this collaboration. When everyone from junior developers
    to team leads can access discussions, view code bases, and partake in decision-making,
    the walls between roles and departments start to crumble. This absence of silos
    naturally leads to quicker identification of issues, more efficient problem-solving,
    and a more unified vision.
  prefs: []
  type: TYPE_NORMAL
- en: Elements that amplify DevOps and developer experience
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are some ideas that can help make your DevOps more successful. It is
    the adoption of a decentralized contribution model and the concept of **Platform
    as a** **Product** (**PaaP**). Yes, that’s right: InnerSource and Platform Engineering.
    These will improve the developer experience.'
  prefs: []
  type: TYPE_NORMAL
- en: InnerSource – Decentralizing the contribution model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: InnerSource draws inspiration from the open source world, but it is designed
    to solve internal engineering challenges by applying open source practices within
    organizational boundaries. It allows cross-team collaboration and sharing of technical
    expertise, and most importantly, it aims to create a more transparent and inclusive
    culture. This approach closely aligns with DevOps philosophies of eradicating
    organizational silos and promoting a culture of collaboration and transparency.
    InnerSource also aims to create a cultural shift, a movement that is essential
    for boosting the developer experience.
  prefs: []
  type: TYPE_NORMAL
- en: Defining InnerSource
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In essence, InnerSource is an approach to collaboration on software projects
    that happen within the confines of a single organization. The concept was popularized
    by companies such as PayPal to address silos and boundaries that often exist within
    large organizations. InnerSource encourages an open culture where anyone can contribute
    code to any project, and where processes and decision-making are transparent.
  prefs: []
  type: TYPE_NORMAL
- en: The four pillars of InnerSource
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s delve deeper into the four foundational principles—*Openness*, *Transparency*,
    *Prioritized Mentorship*, and *Voluntary* *Code Contribution*:'
  prefs: []
  type: TYPE_NORMAL
- en: '`README.md` and `CONTRIBUTING.md` in open source repositories, makes projects
    easily discoverable and accessible. This level of openness enhances the developer
    experience by reducing friction, allowing engineers to easily switch contexts
    or teams. Even with the large number of microservices in a DevOps environment,
    for example, it is helpful to have this kind of documentation culture in place
    to facilitate collaboration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transparency**: When we talk about transparency in InnerSource, it is about
    openness in project decision-making. For instance, issue conversations and pull
    request reviews are done transparently, often documented, and easily accessible.
    This provides insights into why certain decisions were made, who made them, and
    the context around them. Transparency not only improves the project’s quality
    but also significantly enhances the developer experience by creating a sense of
    ownership and involvement in the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prioritized Mentorship**: In InnerSource, mentorship is not a sideline but
    a priority. The role of repository maintainer in InnerSource is also named Trusted
    Committer, taking into account the differences in activities related to internal
    restrictions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The role of **Trusted Committer** is crucial here. Trusted Committers are not
    just code contributors; they are advocates for the project, focusing on the quality
    and sustainability of the code as well as mentoring new contributors. They have
    a deep understanding of the repository and the organization, serving as bridges
    between the two. The Trusted Committer’s mindset is one of openness, inclusivity,
    and a dedication to elevating others. This role is vital for maintaining a high
    level of developer experience by ensuring quality contributions and fostering
    a culture of continuous learning.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Voluntary Code Contribution**: The principle of Voluntary Code Contribution
    emphasizes that contributions are opt-in, leading to a culture where engineers
    feel a sense of ownership and responsibility toward the projects they engage with.
    It is a bottom-up approach, as opposed to top-down, allowing for a more organic,
    collaborative environment. The culture becomes self-aligned as engineers voluntarily
    engage, contributing to both the project and the organization’s overall culture.
    Such a participatory environment significantly enhances the developer experience,
    offering opportunities for personal and career growth. It parallels the DevOps
    culture of collective ownership, where contributions are made to improve the system
    as a whole and not just individual components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The complementary relationship between InnerSource and DevOps
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: By intertwining InnerSource with DevOps practices, organizations can create
    a holistic environment conducive to both customer-centric and developer-centric
    development. InnerSource offers tools to improve developer experience by focusing
    on cultural attributes—openness, transparency, mentorship, and voluntary contribution—that
    make engineers’ daily work more engaging, meaningful, and satisfying.
  prefs: []
  type: TYPE_NORMAL
- en: Platform engineering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are numerous cloud services available, especially from major public cloud
    providers. Particularly in the heart of the **Cloud Native Computing Foundation**
    (**CNCF**), the ecosystem around Kubernetes has dramatically evolved, encompassing
    over 1,000 projects. The proliferation of tools increases the cognitive load on
    development teams.
  prefs: []
  type: TYPE_NORMAL
- en: Platform engineering is an emerging approach in the tech industry that focuses
    on rationalizing developer experience and operational efficiency. It aims to implement
    reusable tools and self-service features, automate infrastructure operations,
    and thereby improve developer experience and productivity. In essence, the customers
    for platform teams are the development teams, and there is a particular emphasis
    on meeting their needs.
  prefs: []
  type: TYPE_NORMAL
- en: Fundamentally, platform engineering revolves around the construction and management
    of **Internal Developer Platforms** (**IDPs**). These platforms integrate various
    tools, services, and automated workflows to provide developers with self-service
    options. Essentially, they offer a *golden path* for developers, helping them
    navigate from development to deployment without getting bogged down by the complexities
    of infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Platform teams often provide developer portals, such as Spotify’s open source
    Backstage, reinforcing the idea of PaaP. The most important mindset is to consider
    the platform not merely as a tool but as a product aimed at internal developers—the
    customers.
  prefs: []
  type: TYPE_NORMAL
- en: The role of platform teams is multifaceted, from creating IDPs to establishing
    internal SLAs. They monitor team performance metrics and supervise a secure and
    efficient delivery process. An essential element in the toolbox of platform teams
    is IaC, coupled with robust CI/CD pipelines. These setups act as the central nervous
    system for code development and deployment, automating everything from setting
    up infrastructure to building, testing, and pushing code to various environments.
    This allows platform teams to focus on more valuable tasks and customer value
    rather than being bogged down by manual, error-prone operations.
  prefs: []
  type: TYPE_NORMAL
- en: At its core, platform engineering aims to reinforce the DevOps paradigm, improve
    developer experience, and fine-tune the operational aspects of software delivery.
    This approach aims to eliminate typical barriers that exist in large organizations
    and accelerate the journey from code to customer. In doing so, platform engineering
    fills a crucial gap in the modern DevOps landscape, ensuring not only operational
    efficiency but also fostering a culture of collaboration and shared responsibility.
  prefs: []
  type: TYPE_NORMAL
- en: Git – Where code collaborations begin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing code changes is a sophisticated challenge. Various team members continuously
    contribute to a unified code base that must remain functional at all times.
  prefs: []
  type: TYPE_NORMAL
- en: Git has transformed how software development teams work together. By being distributed
    and offering the ability to create branches, Git has become a vital asset in the
    DevOps toolbox. A **branch** is essentially a separate line of development, like
    a parallel universe, where you can work on new features or fix issues without
    affecting the main project. This enables teams to focus on multiple aspects simultaneously,
    making the development process more efficient and adaptable to rapid changes and
    rapid software delivery, a key requirement in a DevOps environment.
  prefs: []
  type: TYPE_NORMAL
- en: Git is more than just a tool for tracking changes in code—it is a catalyst for
    change within organizations. By providing a reliable way to collaborate, Git promotes
    better communication among teams. This aligns well with the overarching DevOps
    aim of breaking down barriers within organizations, thereby removing friction
    and making the process of building and deploying software more cohesive and streamlined.
  prefs: []
  type: TYPE_NORMAL
- en: Imagining the world without version control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine a landscape where version control does not exist. Developers would struggle
    to manage changes in files, with no systematic way to track history. Every change
    would have to be documented manually, resulting in an endless sea of comments
    that obscure the real purpose of the code. In such a scenario, achieving rapid
    delivery as seen in DevOps would be nearly impossible. The lack of version control
    would introduce friction into collaboration processes. Also, file conflicts would
    become a common headache. Imagine working on a feature only to find that someone
    else has overwritten your file with their own changes—this kind of conflict could
    halt the development process. Without version control, you would also have to
    resort to strange naming conventions such as `v1`, `v2`, or `backup-foobar-20230930.py`
    just to maintain backups of older file versions.
  prefs: []
  type: TYPE_NORMAL
- en: The history of Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Git, created by Linus Torvalds in 2005, reigns as the most popular **Distributed
    Version Control System** (**DVCS**) globally.
  prefs: []
  type: TYPE_NORMAL
- en: However, why was Git created? The simple answer lies in necessity. Linus Torvalds
    needed a **Version Control System** (**VCS**) that could do several things well.
    First, it had to be fast and efficient, letting developers work without slowdowns.
    Second, it needed to allow multiple developers to work on the same project without
    getting in each other’s way. Third, it had to manage large code bases without
    a hitch. Beyond that, Torvalds wanted a system that would keep a reliable history
    of the entire project. He also sought the flexibility to support a nonlinear approach
    to development, one that could manage multiple branches and merge effectively.
    In response to these needs, Git was designed to be straightforward but also incredibly
    powerful in its capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: What is a VCS?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, what exactly is a VCS? A VCS is a system for monitoring code modifications
    throughout the SDLC. In projects with multiple contributors, tracking who altered
    what and when—along with any resultant bugs—is crucial. A VCS efficiently orchestrates
    this tracking process.
  prefs: []
  type: TYPE_NORMAL
- en: 'VCS technologies generally fall under two main categories—centralized and distributed:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Centralized**: In this setup, a single remote repository stores the project
    data, accessible to all team members. SVN and CVS are examples of this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Distributed**: In a distributed model such as Git, every developer works
    with a local repository copy, applies changes there, and later syncs them with
    a central remote repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows how files are distributed and passed around when
    using Git. Git essentially allows you to have multiple remote repositories and
    a flexible distributed development structure, but typically, people create a single
    remote repository using a development platform such as GitHub, and developers
    often interact with the remote and local repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.11 – Version control in Git is done in a distributed way, allowing
    multiple people to collaborate simultaneously](img/B21203_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.11 – Version control in Git is done in a distributed way, allowing
    multiple people to collaborate simultaneously
  prefs: []
  type: TYPE_NORMAL
- en: The standout benefit of a distributed model such as Git is the autonomy it affords
    developers. This decentralized approach allows for more streamlined work, reducing
    the risk of code conflicts among contributors.
  prefs: []
  type: TYPE_NORMAL
- en: Security and integrity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For Git, ensuring the integrity of the source code is a top priority. In Git,
    each commit is assigned a unique hash value. This hash value is generated based
    on the contents of the committed code and its metadata. Therefore, if the code
    is altered, its hash value also changes, making it extremely difficult to tamper
    with history. Operations that affect branches or tags, such as merging or reverting,
    are also saved as part of the change history.
  prefs: []
  type: TYPE_NORMAL
- en: Adaptability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Git is highly adaptable and can accommodate a wide range of development workflows.
    Whether it is a small-scale project or an enterprise-level application, Git can
    adapt in various ways to track changes and facilitate collaboration among team
    members:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.12 – Git manages code using branches, commits, and merges efficiently](img/B21203_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.12 – Git manages code using branches, commits, and merges efficiently
  prefs: []
  type: TYPE_NORMAL
- en: Git is indispensable in modern development
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Prior to Git’s introduction, centralized systems such as SVN and CVS predominated.
    The rise of Git, however, has prompted a substantial shift toward distributed
    VCS options among both individual developers and organizations.
  prefs: []
  type: TYPE_NORMAL
- en: With the rise of cloud technology, the boundary between applications and infrastructure
    is blurring, and Git is no longer just for developers who write code but also
    for those who work on infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: In the world of DevOps, where seamless collaboration and communication are critical,
    Git acts as the backbone of the developer experience, supporting not just code
    management but also the workflow strategies that aim to improve collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: In the realm of contemporary software development, version control is not optional—it
    is essential.
  prefs: []
  type: TYPE_NORMAL
- en: We will be covering all you need to know about Git in *Chapters 2* and *3*.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub – The AI-powered developer platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub is the AI-powered developer platform to build, scale, and deliver secure
    software.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub is often thought of as just a repository service, or sometimes as a repository
    service with attached CI/CD functionality. However, GitHub now offers a platform
    that covers the entire development life cycle, from writing applications to building
    and releasing. GitHub serves as the foundational platform for DevOps collaboration
    and automation. Through the lens of developer experience, it is the hub for InnerSource
    initiatives and houses code essential for platform engineering. Furthermore, this
    is empowered by AI. Whether you are writing code or reviewing it, GitHub’s AI
    supports you in various scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'The capabilities of GitHub can be divided into five main categories: **powered
    by AI**, **collaboration**, **productivity**, **security**, and **scale**. Let’s
    look at each one in turn.'
  prefs: []
  type: TYPE_NORMAL
- en: Powered by AI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The world is undergoing a transformation due to advancements in **Generative
    AI** (**GenAI**) powered by **Large Language Models** (**LLMs**). This wave of
    change is impacting engineers as well, enabling developers to write code with
    the aid of AI. Not only can AI infer from existing code, but it can also translate
    natural language commands directly into code and even provide code explanations
    in natural language. When the AI revolution began, these functionalities were
    limited to simple code generation on editors. However, GitHub, as a platform,
    extends far beyond mere code generation, offering comprehensive support throughout
    the development life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Copilot – Your AI pair programmer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: GitHub Copilot is one such AI-enabled service from GitHub. As of 2023, it stands
    out as a beloved service in Stack Overflow’s developer survey. In the context
    of AI, what does productivity enhancement mean? It is evident that developers
    can write code faster and with improving accuracy. However, an engineer’s job
    is not limited to coding; for example, research is also a critical element. Engineers
    frequently switch tasks from editor to browser or from editor to Slack, often
    multitasking. AI tools demonstrate their power not only in code generation but
    also in research and documentation tasks. These tools minimize engineers’ need
    to multitask, allowing them to maintain flow. In other words, they assist in sustaining
    a **focus mode**.
  prefs: []
  type: TYPE_NORMAL
- en: The versatility of AI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: AI does not just help with code; it assists with CI/CD configurations and the
    implementation of YAML files based on specific formats. Shell command implementations
    are also easy tasks for these AI tools. They are incredibly useful not just for
    application developers but also for platform engineers, boosting productivity
    on both individual and team levels.
  prefs: []
  type: TYPE_NORMAL
- en: The evolution of AI services is incredibly fast, and the latest information
    quickly becomes outdated. Therefore, this book will not delve into the specific
    services and features of GitHub Copilot, but [*Chapter 8*](B21203_08.xhtml#_idTextAnchor157)
    will offer general advice on coding techniques using LLMs.
  prefs: []
  type: TYPE_NORMAL
- en: Collaboration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GitHub is a powerful platform designed to offer excellent collaboration experience
    for development teams.
  prefs: []
  type: TYPE_NORMAL
- en: The faster onboarding of new members is greatly facilitated by **GitHub Projects**,
    **GitHub Issues**, and **GitHub code search**. Specifically, GitHub Projects allows
    for the visual organization of tasks and their progress with Kanban, Roadmap,
    and Table views, while GitHub Issues clearly outlines specific problems or bugs.
    Furthermore, by labeling each issue, new members can quickly understand where
    to begin. This transparency and approach encourage organic collaboration. Additionally,
    GitHub code search allows for quick retrieval of past projects, discussions, and
    code, enabling new members to swiftly access existing knowledge and project history.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure code quality, **pull requests** and **merge queues** are highly useful.
    Changes in the code are explicitly reviewed through pull requests. This process
    is made clearer and more efficient by the integrated view of review comments and
    code. Utilizing a merge queue ensures that reviewed changes are efficiently and
    safely merged into the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: From a corporate culture standpoint, features such as pull requests, GitHub
    Issues, GitHub Discussions, and GitHub Enterprise’s internal-type repositories
    effectively create *no silos through InnerSource* within an organization. By harnessing
    these features, there is a boost in transparent cross-team communication, evolving
    the development culture to become more open and bottom-up. It will also deter
    reinvention of the wheel. Embracing this InnerSource approach minimizes the redundancy
    of efforts and significantly adds to overall **employee satisfaction**.
  prefs: []
  type: TYPE_NORMAL
- en: Productivity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GitHub offers a variety of tools and features to be more productive.
  prefs: []
  type: TYPE_NORMAL
- en: First, GitHub has features for various automation flows and efficient DevOps.
    By using GitHub Actions, you can automate the process for CI/CD. This allows you
    to make stable changes to the product quickly while maintaining the quality of
    the code. GitHub Actions includes self-hosted runners and large runners, allowing
    you to adapt to restricted environments and high-specification machine requirements.
    This flexibility enables you to get software changes to market more quickly, contributing
    to improved **Time To** **Market** (**TTM**).
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the Automation features of GitHub Projects improve work efficiency
    by automating a series of tasks. For example, you can automate the flow for issue
    items or the labeling of issues with built-in workflows. Of course, complex automation
    is also possible through GitHub Actions. GitHub Codespaces provides an online
    development environment, allowing you to code from anywhere. This enables development
    teams to collaborate efficiently remotely and significantly reduces the time and
    resources required to set up new members’ environments. By using `npm` and GitHub
    Packages, package management becomes easier. By organizing dependencies, you can
    share and reuse code efficiently, speeding up the development cycle.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub also offers GitHub Copilot, an AI pair programmer. It features a high-performance
    code completion function backed by the LLM, helping developers write code more
    efficiently. This improves code quality and dramatically increases developer productivity.
  prefs: []
  type: TYPE_NORMAL
- en: These features reduce the workload of developers who create the actual product’s
    value, allowing them to focus on tasks that generate intrinsic value and contribute
    to **increased** **revenue growth**.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub can streamline the development process and, by accelerating code quality
    and release speed, can more quickly bring to market products that meet customer
    needs, realizing **increased** **customer satisfaction**.
  prefs: []
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GitHub is widely used as a platform for software development, but it also offers
    advanced experience in the realm of security. With the increasing importance of
    maintaining high-level security for applications, GitHub features become even
    more crucial.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, the **Advanced Security** feature automatically detects vulnerabilities
    in the code, making it easier for companies and developers to reduce risks by
    addressing these issues promptly.
  prefs: []
  type: TYPE_NORMAL
- en: The platform also provides seamless management of security issues related to
    a project. Specifically, the **Security Overview** dashboard allows you to easily
    review all security warnings and settings, centralizing the management process.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, GitHub’s **secret scanning** feature automatically scans for any
    secrets or API keys mistakenly uploaded to GitHub, issuing warnings for them.
    For supported platforms, GitHub goes a step further by automatically revoking
    keys that are mistakenly uploaded to public repositories, and it can validate
    the activity status of a key. Simply detecting secrets often falls short of comprehensive
    DevSecOps requirements. This proactive approach not only identifies potential
    issues early but also significantly mitigates risks. Additionally, the **push
    protection** feature acts as a safeguard, preventing the accidental upload of
    sensitive information to GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: The process of security policy creation and enforcement is also straightforward
    on GitHub. By setting up security policies and enforcing GitHub **Advanced Security**
    across repositories, it becomes easier for developers to maintain a secure coding
    environment. This leads to a more consistent set of security measures being applied
    throughout the organization or enterprise.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, let’s talk about the supply chain. Nowadays, virtually every company
    is utilizing open source technology in some form. Many projects have hundreds
    of open source dependencies, which can potentially introduce security risks. What
    happens if a vulnerability is discovered in one of these dependencies? This is
    where Dependabot comes into play. It automatically identifies vulnerabilities
    in dependencies and proposes updates, helping to reduce security risks in the
    supply chain.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, GitHub covers multiple aspects of security, offering developers and
    companies useful tools for creating and managing safer code in a shorter timeframe.
  prefs: []
  type: TYPE_NORMAL
- en: Scale
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To scale a business, a scalable platform such as GitHub is essential. Trustworthiness,
    global access, and constant innovation are indispensable. With *more developers
    than any other platform*—over 100 million, to be exact—GitHub serves as a testament
    to its high level of trustworthiness and quality.
  prefs: []
  type: TYPE_NORMAL
- en: Next, as the **home of open source**, GitHub enables global reach. Developers
    and teams can share their code openly and collaborate with other developers around
    the world. The open approach of GitHub is the key to gaining access to diverse
    markets, engineers, and products.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the usage of GitHub not only allows users to develop their own
    software, but it also offers opportunities to leverage other projects and open
    source code to generate new ideas and solutions. This shows that GitHub is not
    merely a tool for code storage; it is a catalyst for innovation and collaboration
    on a global scale.
  prefs: []
  type: TYPE_NORMAL
- en: We will be covering all you need to know about GitHub in *Chapters 4* to *8*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter embarked on a journey to explore how DevOps revolutionizes the
    way we develop software. We talked about the importance of developer experience
    as a strategy for providing the best work environment in a DevOps team. We also
    delved into Git and GitHub, the backbone for collaboration in a DevOps setting.
  prefs: []
  type: TYPE_NORMAL
- en: Everything is connected and for a reason. The need for DevOps, the reasons for
    using Git and GitHub, and the importance of culture in shaping an organization’s
    people, processes, and tools—all of these elements are interlinked. They collectively
    shape the form of a developer experience strategy, enabling developers in a DevOps
    team to perform at their best. What you will do will eventually come back to you,
    enriching you as a developer.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps should be designed to allow for mistakes to occur in fast development.
    Each misstep is a step toward mastering DevOps, enhancing your skills, and making
    meaningful contributions to your team and organization. In essence, your journey
    through DevOps is a manifestation of everything we have discussed in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s take our newfound understanding and prepare to get hands-on. Up next,
    we will dive into the basic usage of Git, the VCS that serves as the backbone
    of DevOps culture and collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*The Secret Formula to Improve Developer Experience* *Revealed!*: https://www.youtube.com/watch?v=mRqoVlhtVzA'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*DevEx: What Actually Drives* *Productivity*: [https://queue.acm.org/detail.cfm?id=3595878](https://queue.acm.org/detail.cfm?id=3595878)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Getting Started with GitHub for* *Startups*: [https://www.youtube.com/watch?v=K5zhNxnrVW8](https://www.youtube.com/watch?v=K5zhNxnrVW8)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
