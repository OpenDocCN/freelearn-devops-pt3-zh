- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: RDBMS with DevOps
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RDBMS与DevOps
- en: In this chapter, we’ll delve into the intricate yet rewarding relationship between
    **relational database management systems** (**RDBMSs**) and DevOps. As you traverse
    this chapter, you will gain a deep understanding of how modern DevOps practices
    can be intertwined with RDBMS to create a streamlined, efficient, and secure IT
    environment. This combination offers numerous advantages, and learning how to
    exploit them is pivotal for any organization aiming to stay competitive in today’s
    fast-paced digital landscape.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨**关系型数据库管理系统**（**RDBMS**）与DevOps之间错综复杂却富有成效的关系。当你阅读本章时，你将深入了解现代DevOps实践如何与RDBMS相结合，创造一个简化、高效且安全的IT环境。这种结合提供了诸多优势，学习如何利用这些优势对于任何旨在在当今快速发展的数字环境中保持竞争力的组织来说都是至关重要的。
- en: One of the first critical aspects we will explore is provisioning and configuration
    management. Understanding how to automate these tasks for databases in a DevOps
    culture is essential for rapid deployments and scaling. You’ll discover how to
    implement IaC approaches that enable frictionless environment setup and configuration
    changes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先探讨的一个关键方面是提供和配置管理。理解如何在DevOps文化中自动化这些数据库任务对于快速部署和扩展至关重要。你将了解如何实现IaC（基础设施即代码）方法，使环境设置和配置更改无摩擦。
- en: Next, we’ll move on to monitoring and alerting, which serve as the eyes and
    ears of any robust system. You’ll learn the latest tools and techniques for real-time
    database monitoring and how to set up automated alerting mechanisms. This knowledge
    will allow you to identify and fix issues before they escalate, thus ensuring
    continuous uptime and operational efficiency.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论监控和警报，它们是任何强大系统的眼睛和耳朵。你将学习实时数据库监控的最新工具和技术，并了解如何设置自动化警报机制。这些知识将使你能够在问题升级之前识别并解决它们，从而确保持续的正常运行时间和操作效率。
- en: Following this, this chapter will guide you through the vital areas of backup
    and disaster recovery. Here, you’ll find out how to integrate these critical strategies
    seamlessly into your DevOps pipeline, ensuring that your data is safe and that
    your systems are resilient against unforeseen calamities.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 随后，本章将引导你了解备份和灾难恢复的关键领域。你将在这里了解如何将这些关键策略无缝集成到DevOps管道中，确保你的数据安全，并确保你的系统在面对突发灾难时具有韧性。
- en: Performance optimization is another key theme. You’ll learn the best practices
    for making your RDBMS run as efficiently as possible, from indexing and query
    optimization to caching and beyond. We’ll show you how to identify bottlenecks
    and improve database performance, all within the framework of a DevOps culture.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 性能优化是另一个关键主题。你将学习使RDBMS尽可能高效运行的最佳实践，从索引和查询优化到缓存等等。我们将向你展示如何在DevOps文化框架内识别瓶颈并提升数据库性能。
- en: Last but not least, we’ll touch upon DevSecOps, the practice that integrates
    security into DevOps. You’ll understand why security can’t be an afterthought
    and how to embed security measures right into your DevOps workflows and RDBMS
    configurations.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们将涉及DevSecOps，即将安全性集成到DevOps中的实践。你将理解为什么安全性不能被忽视，以及如何将安全措施直接嵌入到你的DevOps工作流和RDBMS配置中。
- en: By addressing these essential components, this chapter will serve as a comprehensive
    guide to melding RDBMS and DevOps, replete with actionable insights. For system
    administrators, database administrators, and DevOps engineers alike, the knowledge
    you will acquire here will be indispensable in leveraging the full power of integrating
    RDBMS with DevOps.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过解决这些关键组件，本章将作为一个全面的指南，帮助你将RDBMS与DevOps融合，充满可操作的见解。对于系统管理员、数据库管理员和DevOps工程师来说，你将在这里获得的知识将是不可或缺的，能够充分利用RDBMS与DevOps整合的全部力量。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Embracing DevOps
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接纳DevOps
- en: Provisioning and configuration management
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供和配置管理
- en: Monitoring and alerting
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控和警报
- en: Backup and disaster recovery
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备份和灾难恢复
- en: Performance optimization
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能优化
- en: DevSecOps
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevSecOps
- en: Embracing DevOps
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接纳DevOps
- en: 'In a DevOps team, several activities are involved in managing and maintaining
    relational databases. Some of the main activities and challenges include the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevOps团队中，管理和维护关系型数据库涉及多个活动。一些主要活动和挑战包括以下内容：
- en: Provisioning and configuration management
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供和配置管理
- en: Monitoring and alerting
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控和警报
- en: Backup and disaster recovery
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备份和灾难恢复
- en: Performance optimization
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能优化
- en: Security and access management
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性与访问管理
- en: In the following sections, we will discuss each of these activities in detail
    and provide examples of how they can be implemented using various tools.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将详细讨论这些活动，并提供如何使用各种工具实现它们的示例。
- en: Provisioning and configuration management
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预配和配置管理
- en: 'One of the primary activities of a DevOps team is to provision and configure
    relational databases. This includes creating database instances, configuring database
    settings, and managing database users and permissions. Here are some examples
    of how this can be accomplished:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 团队的主要活动之一是预配和配置关系型数据库。这包括创建数据库实例、配置数据库设置以及管理数据库用户和权限。以下是一些可以实现这些操作的示例：
- en: Creating a MySQL database instance using Terraform
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Terraform 创建 MySQL 数据库实例
- en: Configuring PostgreSQL settings using Ansible
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Ansible 配置 PostgreSQL 设置
- en: Managing Oracle users and permissions using Puppet
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Puppet 管理 Oracle 用户和权限
- en: Let’s look at these examples in detail.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看这些示例。
- en: Creating a MySQL database instance using Terraform
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Terraform 创建 MySQL 数据库实例
- en: Creating a MySQL database instance in **Amazon Web Services** (**AWS**) using
    Terraform involves several steps, including setting up the necessary infrastructure,
    configuring the database, and launching the instance. In this example, we will
    use Terraform to automate the process of creating a MySQL database instance in
    AWS.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **Amazon Web Services** (**AWS**) 中使用 Terraform 创建 MySQL 数据库实例涉及多个步骤，包括设置必要的基础设施、配置数据库并启动实例。在此示例中，我们将使用
    Terraform 自动化在 AWS 中创建 MySQL 数据库实例的过程。
- en: Architecture overview
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 架构概览
- en: 'The architecture we’ll use in this example involves the following components:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在此示例中使用的架构包括以下组件：
- en: '**Virtual Private Cloud** (**VPC**): A VPC is a virtual network that you can
    configure to host your AWS resources. It provides an isolated environment for
    your resources and enables you to control network access.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟私有云** (**VPC**)：VPC 是一个虚拟网络，你可以配置它来托管 AWS 资源。它为你的资源提供了一个隔离的环境，并使你能够控制网络访问。'
- en: '**Subnet**: A subnet is a range of IP addresses in your VPC that you can use
    to launch your resources.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子网**：子网是你在 VPC 中可用来启动资源的 IP 地址范围。'
- en: '**Security group**: A security group acts as a virtual firewall for your instances
    to control inbound and outbound traffic. You can specify rules for inbound and
    outbound traffic to and from the instances.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全组**：安全组充当实例的虚拟防火墙，用于控制进出流量。你可以为进出实例的流量指定规则。'
- en: '**A Relational Database Service** (**RDS**) **instance**: Amazon RDS is a managed
    database service that makes it easier to set up, operate, and scale a relational
    database in the cloud. In this example, we will use RDS to create a MySQL database
    instance.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关系型数据库服务** (**RDS**) **实例**：Amazon RDS 是一种托管数据库服务，使得在云中设置、操作和扩展关系型数据库变得更加容易。在此示例中，我们将使用
    RDS 创建 MySQL 数据库实例。'
- en: Terraform is a tool for building, changing, and versioning infrastructure safely
    and efficiently. It uses a declarative approach to **Infrastructure as Code**
    (**IaC**), meaning that you define the desired state of your infrastructure and
    Terraform will figure out how to create it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 是一种用于安全高效构建、变更和版本管理基础设施的工具。它采用声明式方法进行 **基础设施即代码** (**IaC**)，意味着你定义了基础设施的期望状态，Terraform
    会找出如何创建它。
- en: Step 1 – setting up the necessary infrastructure
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第 1 步 – 设置必要的基础设施
- en: 'The first step in creating a MySQL database instance using Terraform is to
    set up the necessary infrastructure. We will create a VPC, a subnet, and a security
    group for the RDS instance. Here’s some example Terraform code for setting up
    the infrastructure:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Terraform 创建 MySQL 数据库实例的第一步是设置必要的基础设施。我们将为 RDS 实例创建一个 VPC、一个子网和一个安全组。以下是一些用于设置基础设施的
    Terraform 示例代码：
- en: VPC
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: VPC
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code sets up a VPC with a CIDR block of `10.0.0.0/16` and a subnet with
    a CIDR block of `10.0.1.0/24`. It also creates a security group for the RDS instance
    with an ingress rule that allows traffic on port `3306` from any IP address.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码设置了一个 CIDR 块为 `10.0.0.0/16` 的 VPC，以及一个 CIDR 块为 `10.0.1.0/24` 的子网。它还为 RDS
    实例创建了一个安全组，并添加了一个入站规则，允许来自任何 IP 地址的 `3306` 端口流量。
- en: Step 2 – configuring the database
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第 2 步 – 配置数据库
- en: 'The next step is to configure the MySQL database. We will create a parameter
    group and a database instance with the necessary settings. Here’s some example
    Terraform code for configuring the database:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是配置MySQL数据库。我们将创建一个参数组并为数据库实例配置必要的设置。以下是配置数据库的示例Terraform代码：
- en: SQL
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: SQL
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding code creates a parameter group for the MySQL database instance
    with two parameters – `innodb_buffer_pool_size` and `max_connections`. The `innodb_buffer_pool_size`
    parameter sets the size of the `InnoDB` buffer pool to 256 MB, and the `max_connections`
    parameter sets the maximum number of connections to `1000`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码为MySQL数据库实例创建了一个参数组，包含两个参数——`innodb_buffer_pool_size`和`max_connections`。`innodb_buffer_pool_size`参数将`InnoDB`缓冲池的大小设置为256
    MB，`max_connections`参数将最大连接数设置为`1000`。
- en: 'This code also creates an RDS instance with the following configuration:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码还创建了一个具有以下配置的RDS实例：
- en: Allocated storage of 20 GB
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配的存储为20 GB
- en: A storage type of `gp2`
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gp2`存储类型'
- en: MySQL engine version 5.7
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL引擎版本5.7
- en: An instance class of `db.t2.micro`
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db.t2.micro`实例类型'
- en: An instance name of `example`
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`example`实例名称'
- en: A database username of `admin`
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin`数据库用户名'
- en: A database password of `password`
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password`数据库密码'
- en: Step 3 – launching the instance
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第3步 - 启动实例
- en: 'The final step is to launch the RDS instance. Here’s some example Terraform
    code for launching the instance:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是启动RDS实例。以下是启动实例的示例Terraform代码：
- en: RDS
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: RDS
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This code launches the RDS instance and associates it with the security group
    and subnet we created in *Step 1*. The `vpc_security_group_ids` parameter specifies
    the ID of the security group we created earlier, and the `db_subnet_group_name`
    parameter specifies the name of the subnet group we created in this step.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码启动RDS实例，并将其与我们在*步骤1*中创建的安全组和子网关联。`vpc_security_group_ids`参数指定我们之前创建的安全组的ID，`db_subnet_group_name`参数指定我们在此步骤中创建的子网组的名称。
- en: The subnet group is created to specify the subnet where the database instance
    will be launched. In this example, we are only using one subnet, but you can create
    multiple subnets in different availability zones for high availability and disaster
    recovery.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 子网组用于指定数据库实例将要启动的子网。在本示例中，我们仅使用一个子网，但您可以在不同的可用区创建多个子网，以实现高可用性和灾难恢复。
- en: Conclusion
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 结论
- en: In conclusion, creating a MySQL database instance in AWS using Terraform involves
    setting up the necessary infrastructure, configuring the database, and launching
    the instance. The infrastructure includes a VPC, a subnet, and a security group
    for the RDS instance. The database is configured using a parameter group and an
    RDS instance with the necessary settings. Finally, the RDS instance is launched
    and associated with the security group and subnet group. Terraform simplifies
    this process by allowing you to automate the creation and management of your IaC.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，使用Terraform在AWS中创建MySQL数据库实例包括设置必要的基础设施、配置数据库和启动实例。基础设施包括VPC、子网和RDS实例的安全组。数据库通过参数组和配置了必要设置的RDS实例进行配置。最后，启动RDS实例并将其与安全组和子网组关联。Terraform通过自动化基础设施即代码（IaC）的创建和管理简化了这一过程。
- en: Configuring PostgreSQL settings using Ansible
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Ansible配置PostgreSQL设置
- en: Configuring PostgreSQL settings using Ansible in AWS involves automating the
    configuration of PostgreSQL database settings using Ansible, a popular automation
    tool. In this example, we will use Ansible to install PostgreSQL on an EC2 instance
    in AWS, create a database and user, and configure various settings such as memory
    allocation, connection settings, and logging.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS中使用Ansible配置PostgreSQL设置涉及使用Ansible这一流行的自动化工具来自动化配置PostgreSQL数据库设置。在本示例中，我们将使用Ansible在AWS的EC2实例上安装PostgreSQL，创建数据库和用户，并配置各种设置，如内存分配、连接设置和日志记录。
- en: Architecture overview
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 架构概览
- en: The architecture used in this example consists of an AWS EC2 instance running
    Ubuntu 20.04 LTS as the operating system. Ansible will be used to provision the
    instance with PostgreSQL, create a database and user, and configure PostgreSQL
    settings.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例中使用的架构包括一台运行Ubuntu 20.04 LTS操作系统的AWS EC2实例。将使用Ansible为该实例配置PostgreSQL，创建数据库和用户，并配置PostgreSQL设置。
- en: To get started, we will assume that Ansible is already installed and configured
    on the local machine. We will also assume that an AWS EC2 instance has been launched
    and that we have the necessary credentials to access it via SSH.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，我们假设 Ansible 已经在本地机器上安装并配置好。我们还假设已经启动了 AWS EC2 实例，并且拥有通过 SSH 访问它所需的凭证。
- en: Step 1 – creating an Ansible playbook
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第 1 步 - 创建 Ansible playbook
- en: 'The first step is to create an Ansible playbook that will define the tasks
    to be performed. We will create a file called `postgres.yml` in the `playbooks`
    directory with the following contents:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建一个 Ansible playbook，定义要执行的任务。我们将在 `playbooks` 目录下创建一个名为 `postgres.yml`
    的文件，内容如下：
- en: YAML
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: YAML
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This playbook defines four main tasks:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 playbook 定义了四个主要任务：
- en: Install PostgreSQL.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 PostgreSQL。
- en: Create a database and user.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个数据库和用户。
- en: Configure PostgreSQL.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置 PostgreSQL。
- en: Restart PostgreSQL.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启 PostgreSQL。
- en: The playbook is divided into several sections, each containing a list of tasks
    to be executed. Each task specifies the name of the module to be used, the parameters
    to be passed, and any notifications that should be triggered upon completion.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 playbook 被分为几个部分，每个部分包含一组需要执行的任务。每个任务指定要使用的模块名称、要传递的参数以及任务完成时应触发的通知。
- en: Step 2 – creating an inventory file
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第 2 步 - 创建清单文件
- en: 'The next step is to create an inventory file that defines the hosts that will
    be targeted by the playbook. We will create a file called `hosts` in the `inventory`
    directory with the following contents:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个清单文件，用于定义将被 playbook 目标的主机。我们将在 `inventory` 目录下创建一个名为 `hosts` 的文件，内容如下：
- en: hosts
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: hosts
- en: '[PRE4]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This inventory file defines a single host group called `db` that contains the
    IP address of the EC2 instance and the username to be used for SSH access.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个清单文件定义了一个名为 `db` 的主机组，包含 EC2 实例的 IP 地址和用于 SSH 访问的用户名。
- en: Step 3 – running the playbook
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第 3 步 - 运行 playbook
- en: 'Now that we have created the playbook and inventory file, we can run the playbook
    using the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了 playbook 和清单文件，可以使用以下命令运行 playbook：
- en: Bash
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Bash
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: psql -d mydb -U myuser
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: psql -d mydb -U myuser
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: show all;
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 显示所有；
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: class oracle::users {
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: class oracle::users {
- en: 'user { ''user1'':'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 'user { ''user1'':'
- en: ensure     => present,
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: ensure     => present,
- en: home       => '/home/user1',
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: home       => '/home/user1',
- en: managehome => true,
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: managehome => true,
- en: '}'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'file { ''/home/user1/.profile'':'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 'file { ''/home/user1/.profile'':'
- en: ensure => file,
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: ensure => file,
- en: content => "export ORACLE_SID=ORCL\nexport ORACLE_HOME=/u01/app/oracle/product/12.2.0/dbhome_1\nexport
    PATH=$PATH:$ORACLE_HOME/bin\n",
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: content => "export ORACLE_SID=ORCL\nexport ORACLE_HOME=/u01/app/oracle/product/12.2.0/dbhome_1\nexport
    PATH=$PATH:$ORACLE_HOME/bin\n",
- en: owner => 'user1',
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: owner => 'user1',
- en: group => 'dba',
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: group => 'dba',
- en: mode => '0600',
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: mode => '0600',
- en: require => User['user1'],
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: require => User['user1'],
- en: '}'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'exec { ''create_user1'':'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 'exec { ''create_user1'':'
- en: command => '/u01/app/oracle/product/12.2.0/dbhome_1/bin/sqlplus / as sysdba
    <<EOF\nCREATE USER user1 IDENTIFIED BY password;\nGRANT CONNECT, RESOURCE TO user1;\nEXIT;\nEOF\n',
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: command => '/u01/app/oracle/product/12.2.0/dbhome_1/bin/sqlplus / as sysdba
    <<EOF\nCREATE USER user1 IDENTIFIED BY password;\nGRANT CONNECT, RESOURCE TO user1;\nEXIT;\nEOF\n',
- en: onlyif  => '/u01/app/oracle/product/12.2.0/dbhome_1/bin/sqlplus / as sysdba
    @/tmp/user1_exists.sql | grep -q "0 rows selected"',
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: onlyif  => '/u01/app/oracle/product/12.2.0/dbhome_1/bin/sqlplus / as sysdba
    @/tmp/user1_exists.sql | grep -q "0 rows selected"',
- en: require => File['/home/user1/.profile'],
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: require => File['/home/user1/.profile'],
- en: '}'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: node 'oracle-db-agent' {
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: node 'oracle-db-agent' {
- en: include oracle::users
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: include oracle::users
- en: '}'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE9]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: sudo puppet agent -t
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: sudo puppet agent -t
- en: '[PRE10]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: DD_API_KEY=<YOUR_API_KEY> bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: DD_API_KEY=<YOUR_API_KEY> bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
- en: '[PRE11]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'logs:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 'logs:'
- en: '- type: file'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '- type: file'
- en: 'path: /var/log/mysql/error.log'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 'path: /var/log/mysql/error.log'
- en: 'service: mysql'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 'service: mysql'
- en: 'source: mysql'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 'source: mysql'
- en: 'sourcecategory: database'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 'sourcecategory: database'
- en: 'log_processing_rules:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 'log_processing_rules:'
- en: '- type: multi_line'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '- type: multi_line'
- en: 'name: new_log_start_with_date'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: new_log_start_with_date'
- en: 'pattern: \d{4}\-\d{2}\-\d{2}'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 'pattern: \d{4}\-\d{2}\-\d{2}'
- en: '[PRE12]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[mysqld_exporter]'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[mysqld_exporter]'
- en: user = root
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: user = root
- en: password = <YOUR_PASSWORD>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: password = <YOUR_PASSWORD>
- en: '[PRE13]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: <PROJECT_ID> with your GCP project ID and <TOPIC_NAME> with the name of your
    Pub/Sub topic.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `<PROJECT_ID>` 替换为您的 GCP 项目 ID，将 `<TOPIC_NAME>` 替换为您的 Pub/Sub 主题名称。
- en: Next, you need to configure Datadog to receive logs from Pub/Sub. To do this,
    create a new log pipeline in Datadog and configure it to receive logs from the
    Pub/Sub subscription.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要配置 Datadog 以接收来自 Pub/Sub 的日志。为此，创建一个新的日志管道并将其配置为接收来自 Pub/Sub 订阅的日志。
- en: Step 4 – creating a Datadog dashboard
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 第 4 步 - 创建 Datadog 仪表盘
- en: With the MySQL metrics collected and sent to Datadog, you can now create a dashboard
    to monitor them. To create a new dashboard in Datadog, go to the **Dashboards**
    page and click **New Dashboard**.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在收集并将 MySQL 指标发送到 Datadog 后，你现在可以创建一个仪表盘来监控这些指标。要在 Datadog 中创建新的仪表盘，前往**仪表盘**页面并点击**新建仪表盘**。
- en: On the **New Dashboard** page, select a layout and add widgets to display the
    MySQL metrics you want to monitor. For example, you can add a MySQL overview widget
    to display the total number of queries, connections, and other important metrics.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在**新建仪表盘**页面，选择一个布局并添加小部件，展示你希望监控的 MySQL 指标。例如，你可以添加一个 MySQL 概览小部件，显示查询总数、连接数和其他重要指标。
- en: You can also add widgets to display specific MySQL metrics, such as the number
    of slow queries or the percentage of CPU usage.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以添加小部件来展示特定的 MySQL 指标，例如慢查询数量或 CPU 使用率百分比。
- en: Step 5 – setting up alerts
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 第五步 - 设置警报
- en: In addition to monitoring MySQL metrics with a dashboard, you can also set up
    alerts to notify you when specific metrics exceed a certain threshold. To create
    a new alert in Datadog, go to the **Alerts** page and click **New Monitor**.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 除了通过仪表盘监控 MySQL 指标外，你还可以设置警报，当特定指标超过某个阈值时通知你。在 Datadog 中创建新警报，前往**警报**页面并点击**新建监控**。
- en: On the **New Monitor** page, select the MySQL metrics you want to monitor and
    configure the alert settings, such as the threshold and notification method.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在**新建监控**页面，选择你希望监控的 MySQL 指标，并配置警报设置，如阈值和通知方式。
- en: For example, you can create an alert to notify you when the number of slow queries
    exceeds a certain threshold or when the percentage of CPU usage is above a certain
    level.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以创建一个警报，当慢查询数量超过某个阈值，或 CPU 使用率超过某个水平时，通知你。
- en: Conclusion
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 结论
- en: In this example, we explored how to monitor MySQL metrics using Datadog in GCP.
    By setting up the Datadog Agent, Stackdriver, Pub/Sub, and a Datadog dashboard,
    we were able to collect, visualize, and monitor MySQL metrics with ease. With
    alerts set up, we can also receive notifications when important metrics exceed
    a certain threshold, allowing us to quickly identify and resolve any issues with
    the MySQL instance.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们探索了如何在 GCP 上使用 Datadog 监控 MySQL 指标。通过设置 Datadog Agent、Stackdriver、Pub/Sub
    和 Datadog 仪表盘，我们能够轻松地收集、可视化和监控 MySQL 指标。设置好警报后，当重要指标超过某个阈值时，我们还可以接收到通知，迅速识别并解决
    MySQL 实例的问题。
- en: Setting up PostgreSQL alarms using Prometheus
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Prometheus 设置 PostgreSQL 警报
- en: PostgreSQL is a powerful open source RDBMS. Prometheus is a monitoring and alerting
    toolkit that collects metrics from monitored targets, stores them, and makes them
    available for querying and alerting. GCP provides a scalable infrastructure for
    deploying and managing applications.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 是一个强大的开源关系型数据库管理系统（RDBMS）。Prometheus 是一个监控和告警工具包，能够收集来自监控目标的指标，将其存储并提供查询和告警功能。GCP
    提供了可扩展的基础设施，用于部署和管理应用程序。
- en: Architecture overview
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 架构概览
- en: 'To set up PostgreSQL alarms using Prometheus in GCP, we will follow the following
    architecture:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 GCP 中使用 Prometheus 设置 PostgreSQL 警报，我们将遵循以下架构：
- en: '**Deploy PostgreSQL on GCP**: We will deploy PostgreSQL on GCP using Google
    Cloud SQL, a managed SQL database service that makes it easy to set up, manage,
    and administer PostgreSQL databases.'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在 GCP 上部署 PostgreSQL**：我们将通过 Google Cloud SQL 部署 PostgreSQL，Google Cloud
    SQL 是一个托管的 SQL 数据库服务，简化了 PostgreSQL 数据库的设置、管理和维护。'
- en: '`pg_prometheus` extension to export PostgreSQL metrics to Prometheus. `pg_prometheus`
    is an open source PostgreSQL extension that exports PostgreSQL metrics in the
    Prometheus format.'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `pg_prometheus` 扩展将 PostgreSQL 指标导出到 Prometheus。`pg_prometheus` 是一个开源 PostgreSQL
    扩展，可以将 PostgreSQL 指标以 Prometheus 格式导出。
- en: '`pg_prometheus` extension. Prometheus can scrape metrics from targets using
    HTTP(S) endpoints. We will expose the PostgreSQL metrics using an HTTP endpoint.'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `pg_prometheus` 扩展。Prometheus 可以通过 HTTP(S) 端点从目标收集指标。我们将使用 HTTP 端点公开 PostgreSQL
    指标。
- en: '**Set up Prometheus alerts**: We will use Prometheus to set up alerts based
    on the collected PostgreSQL metrics. Prometheus alerts are rules that specify
    conditions for triggering an alert. When an alert is triggered, Prometheus sends
    a notification to an alert manager.'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设置 Prometheus 警报**：我们将使用 Prometheus 根据收集到的 PostgreSQL 指标设置警报。Prometheus 警报是指定触发警报条件的规则。当警报被触发时，Prometheus
    会向警报管理器发送通知。'
- en: '**Send alerts to a notification channel**: We will use Alertmanager to send
    alerts to a notification channel, such as email or Slack.'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**将警报发送到通知通道**：我们将使用 Alertmanager 将警报发送到通知通道，如电子邮件或 Slack。'
- en: Here’s the step-by-step guide on how to set up PostgreSQL alarms using Prometheus
    in GCP.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个逐步指南，介绍如何在 GCP 上使用 Prometheus 设置 PostgreSQL 告警。
- en: Step 1 – deploying PostgreSQL on GCP
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 第 1 步 – 在 GCP 上部署 PostgreSQL
- en: 'We will use Google Cloud SQL to deploy PostgreSQL on GCP. Follow these steps
    to deploy PostgreSQL on GCP:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Google Cloud SQL 在 GCP 上部署 PostgreSQL。按照以下步骤在 GCP 上部署 PostgreSQL：
- en: Create a new Cloud SQL instance in the GCP console.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GCP 控制台中创建一个新的 Cloud SQL 实例。
- en: Choose PostgreSQL as the database engine.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 PostgreSQL 作为数据库引擎。
- en: Choose the desired region and configure the instance.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所需的区域并配置实例。
- en: Create a new user and database for the application.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为应用程序创建一个新的用户和数据库。
- en: Set up the connection to the PostgreSQL instance.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置与 PostgreSQL 实例的连接。
- en: Step 2 – exporting PostgreSQL metrics
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 第 2 步 – 导出 PostgreSQL 指标
- en: 'We will use the `pg_prometheus` extension to export PostgreSQL metrics to Prometheus.
    Follow these steps to export PostgreSQL metrics:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `pg_prometheus` 扩展将 PostgreSQL 指标导出到 Prometheus。按照以下步骤导出 PostgreSQL 指标：
- en: Install the `pg_prometheus` extension on the PostgreSQL instance.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 实例上安装 `pg_prometheus` 扩展。
- en: Enable the `pg_prometheus` extension in the PostgreSQL instance.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 实例中启用 `pg_prometheus` 扩展。
- en: Configure the `pg_prometheus` extension to expose the PostgreSQL metrics using
    an HTTP endpoint.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置 `pg_prometheus` 扩展，通过 HTTP 端点暴露 PostgreSQL 指标。
- en: 'Here’s an example of how to enable the `pg_prometheus` extension:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个启用 `pg_prometheus` 扩展的示例：
- en: SQL
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: SQL
- en: '[PRE14]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here’s an example of how to configure the `pg_prometheus` extension to expose
    the PostgreSQL metrics:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个配置 `pg_prometheus` 扩展以暴露 PostgreSQL 指标的示例：
- en: '[PRE15]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Step 3 – collecting PostgreSQL metrics
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 第 3 步 – 收集 PostgreSQL 指标
- en: 'We will use Prometheus to collect PostgreSQL metrics from the `pg_prometheus`
    extension. Follow these steps to collect PostgreSQL metrics:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Prometheus 从 `pg_prometheus` 扩展收集 PostgreSQL 指标。按照以下步骤收集 PostgreSQL 指标：
- en: Install Prometheus on GCP.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GCP 上安装 Prometheus。
- en: Configure Prometheus to scrape metrics from the `pg_prometheus` extension using
    an HTTP endpoint.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置 Prometheus 通过 HTTP 端点从 `pg_prometheus` 扩展抓取指标。
- en: 'Here’s an example of how to configure Prometheus to scrape metrics from the
    `pg_prometheus` extension:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个配置 Prometheus 从 `pg_prometheus` 扩展抓取指标的示例：
- en: YAML
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: YAML
- en: '[PRE16]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Step 4 – setting up Prometheus alerts
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 第 4 步 – 设置 Prometheus 告警
- en: 'We will use Prometheus to set up alerts based on the collected PostgreSQL metrics.
    Follow these steps to set up Prometheus alerts:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Prometheus 基于收集到的 PostgreSQL 指标设置告警。按照以下步骤设置 Prometheus 告警：
- en: Define alert rules in Prometheus.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Prometheus 中定义告警规则。
- en: Reload the Prometheus configuration to apply the new alert rules.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新加载 Prometheus 配置以应用新的告警规则。
- en: 'Here’s an example of how to define an alert rule in Prometheus:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个在 Prometheus 中定义告警规则的示例：
- en: YAML
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: YAML
- en: '[PRE17]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this example, we are defining an alert rule named `High CPU usage` that triggers
    a warning when the sum of the rate of CPU usage for PostgreSQL instances is greater
    than 80% over a 5-minute window. The alert has a severity label of `warning` and
    includes annotations for the alert summary and description.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们定义了一个名为 `High CPU usage` 的告警规则，当 PostgreSQL 实例的 CPU 使用率总和在 5 分钟窗口内超过
    80% 时触发警告。该告警的严重性标签为 `warning`，并包含告警摘要和描述的注解。
- en: 'To reload the Prometheus configuration, run the following command:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 要重新加载 Prometheus 配置，请运行以下命令：
- en: Bash
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Bash
- en: '[PRE18]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Step 5 – sending alerts to a notification channel
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 第 5 步 – 将告警发送到通知频道
- en: 'We will use Alertmanager to send alerts to a notification channel, such as
    email or Slack. Follow these steps to set up Alertmanager:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Alertmanager 将告警发送到通知频道，例如电子邮件或 Slack。按照以下步骤设置 Alertmanager：
- en: Install Alertmanager on GCP.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GCP 上安装 Alertmanager。
- en: Configure Alertmanager to send alerts to a notification channel.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置 Alertmanager 将告警发送到通知频道。
- en: 'Here’s an example of how to configure Alertmanager to send alerts to an email
    address:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个配置 Alertmanager 将告警发送到电子邮件地址的示例：
- en: YAML
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: YAML
- en: '[PRE19]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this example, we are configuring Alertmanager to send alerts with a severity
    label of `warning` to an email address. We are specifying the email address to
    send the alerts to, as well as the email address and credentials to use for authentication.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们配置 Alertmanager 以将带有 `warning` 严重性标签的告警发送到一个电子邮件地址。我们指定了接收告警的电子邮件地址，以及用于认证的电子邮件地址和凭证。
- en: Conclusion
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 结论
- en: In conclusion, setting up PostgreSQL alarms using Prometheus in GCP requires
    deploying PostgreSQL on GCP, exporting PostgreSQL metrics using the `pg_prometheus`
    extension, collecting PostgreSQL metrics using Prometheus, setting up Prometheus
    alerts based on the collected PostgreSQL metrics, and sending alerts to a notification
    channel using Alertmanager. With this architecture, you can monitor and alert
    on PostgreSQL metrics in real time, ensuring the availability and performance
    of your PostgreSQL database.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，使用 Prometheus 在 GCP 上设置 PostgreSQL 告警需要在 GCP 上部署 PostgreSQL，使用 `pg_prometheus`
    扩展导出 PostgreSQL 指标，使用 Prometheus 收集 PostgreSQL 指标，基于收集的 PostgreSQL 指标设置 Prometheus
    告警，并通过 Alertmanager 将告警发送到通知通道。通过这种架构，您可以实时监控和告警 PostgreSQL 指标，确保 PostgreSQL 数据库的可用性和性能。
- en: Investigating Oracle Database issues using Jenkins
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Jenkins 调查 Oracle 数据库问题
- en: Investigating Oracle Database issues can be a challenging task for database
    administrators. It involves monitoring and analyzing the database’s performance,
    identifying bottlenecks, and taking corrective actions to optimize the system.
    One way to automate this process is by using Jenkins, an open source automation
    server that enables developers to automate tasks related to building, testing,
    and deploying software.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 调查 Oracle 数据库问题对于数据库管理员来说是一个具有挑战性的任务。它涉及监控和分析数据库性能、识别瓶颈，并采取纠正措施来优化系统。一种自动化此过程的方法是使用
    Jenkins，一个开源自动化服务器，允许开发人员自动化与构建、测试和部署软件相关的任务。
- en: 'In this example, we will explore how to use Jenkins to investigate Oracle Database
    issues by setting up a Jenkins pipeline that performs the following tasks:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将探讨如何使用 Jenkins 通过设置一个执行以下任务的 Jenkins 流水线来调查 Oracle 数据库问题：
- en: Connects to Oracle Database using JDBC
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 JDBC 连接到 Oracle 数据库
- en: Executes a SQL query to retrieve performance data
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 SQL 查询以检索性能数据
- en: Analyzes the data and generates a report
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析数据并生成报告
- en: Sends an email notification to the database administrator if any issues are
    found
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果发现任何问题，系统会向数据库管理员发送电子邮件通知。
- en: Architecture
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 架构
- en: 'The architecture of the solution involves several components:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案的架构包含多个组件：
- en: '**Jenkins server**: This is where the Jenkins pipeline is executed. It runs
    on a separate machine from Oracle Database to avoid interfering with the database’s
    performance.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jenkins 服务器**：这是执行 Jenkins 流水线的服务器。它运行在与 Oracle 数据库不同的机器上，以避免干扰数据库的性能。'
- en: '**Oracle Database**: This is the database being monitored for performance issues.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Oracle 数据库**：这是正在监控性能问题的数据库。'
- en: '**JDBC driver**: This is the driver that’s used by the pipeline to connect
    to the Oracle Database.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JDBC 驱动程序**：这是流水线用来连接 Oracle 数据库的驱动程序。'
- en: '**SQL query**: This is the query that’s executed by the pipeline to retrieve
    performance data from the database.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL 查询**：这是流水线执行的查询，用于从数据库中检索性能数据。'
- en: '**Python script**: This is a script that analyzes the data retrieved by the
    SQL query and generates a report.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 脚本**：这是一个分析 SQL 查询检索到的数据并生成报告的脚本。'
- en: '**Email server**: This is the server that’s used by the pipeline to send email
    notifications to the database administrator.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电子邮件服务器**：这是流水线用来向数据库管理员发送电子邮件通知的服务器。'
- en: The pipeline is triggered either manually or automatically by a scheduler. When
    it runs, it first connects to Oracle Database using the JDBC driver. Then, it
    executes the SQL query to retrieve performance data. The data is then analyzed
    by the Python script, which generates a report. If any issues are found, the pipeline
    sends an email notification to the database administrator.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 该流水线可以手动或通过调度程序自动触发。运行时，它首先使用 JDBC 驱动程序连接到 Oracle 数据库。然后，它执行 SQL 查询以检索性能数据。接着，Python
    脚本对数据进行分析并生成报告。如果发现任何问题，流水线会向数据库管理员发送电子邮件通知。
- en: Jenkins pipeline code
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 流水线代码
- en: 'The Jenkins pipeline code is written in Groovy, a scripting language that runs
    on Java Virtual Machine. Here is an example of what the code might look like:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 流水线代码是用 Groovy 编写的，Groovy 是一种运行在 Java 虚拟机上的脚本语言。以下是代码可能的示例：
- en: Groovy
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Groovy
- en: '[PRE20]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This pipeline consists of four stages, each of which has one or more steps.
    The `agent any` directive specifies that the pipeline can run on any available
    agent (machine).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 该流水线由四个阶段组成，每个阶段有一个或多个步骤。`agent any` 指令指定该流水线可以在任何可用的代理（机器）上运行。
- en: The first stage, `Connect to Oracle Database`, sets up the JDBC connection to
    Oracle Database. The `jdbcUrl`, `dbUser`, and `dbPassword` variables are used
    to specify the connection details. The `DriverManager` class is used to register
    the JDBC driver and obtain a connection to the database. The resulting connection
    object is saved as an environment variable for later stages to use.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个阶段`连接到Oracle数据库`设置了到Oracle数据库的JDBC连接。`jdbcUrl`、`dbUser`和`dbPassword`变量用于指定连接的详细信息。`DriverManager`类用于注册JDBC驱动程序并获取数据库连接。生成的连接对象作为环境变量保存，供后续阶段使用。
- en: The second stage, `Retrieve Performance Data`, executes a SQL query to retrieve
    performance data from the database. The `sqlQuery` variable specifies the query
    to be executed. The resulting result set is saved as an environment variable for
    later stages to use.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个阶段`检索性能数据`执行SQL查询以从数据库中检索性能数据。`sqlQuery`变量指定要执行的查询。生成的结果集作为环境变量保存，供后续阶段使用。
- en: The third stage, `Generate Performance Report`, uses a Python script to analyze
    the performance data and generate a report. The `perfData` variable is used to
    pass the result set to the `generateReport` function. The resulting report is
    saved as an environment variable for later stages to use.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个阶段`生成性能报告`使用Python脚本分析性能数据并生成报告。`perfData`变量用于将结果集传递给`generateReport`函数。生成的报告作为环境变量保存，供后续阶段使用。
- en: The final stage, `Send Email Notification`, checks if the report has any issues
    and sends an email notification to the database administrator if it does. The
    `hasIssues` function is used to determine if the report has any issues. If it
    does, the `sendEmailNotification` function is called to send an email notification.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个阶段`发送电子邮件通知`检查报告是否有问题，如果有，则向数据库管理员发送电子邮件通知。`hasIssues`函数用于确定报告是否有问题。如果有问题，则调用`sendEmailNotification`函数发送电子邮件通知。
- en: The `post` section contains a cleanup step that always runs, regardless of the
    outcome of the pipeline. In this case, it closes the database connection that
    was opened in the first stage.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`post`部分包含一个清理步骤，无论流水线的结果如何，这个步骤都会执行。在这种情况下，它关闭了在第一阶段打开的数据库连接。'
- en: Python script
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: Python脚本
- en: 'The Python script that’s used to analyze the performance data and generate
    a report might look like this:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 用于分析性能数据并生成报告的Python脚本可能如下所示：
- en: Python
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: Python
- en: '[PRE21]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This script uses the `pandas` library to load the performance data into a `DataFrame`
    object. The `timestamp` column is converted into a datetime object and used as
    the index. The script then analyzes the data and generates a report if any issues
    are found. In this example, the script checks for high CPU, memory, and disk usage.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本使用`pandas`库将性能数据加载到`DataFrame`对象中。`timestamp`列被转换为日期时间对象并用作索引。然后，脚本分析数据，如果发现任何问题，则生成报告。在这个示例中，脚本检查高CPU、内存和磁盘使用情况。
- en: Email notification
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件通知
- en: 'The email notification is sent using the Jenkins Email Extension plugin, which
    allows emails to be sent with customizable content and attachments. Here is an
    example of what the email notification might look like:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件通知是通过Jenkins Email Extension插件发送的，该插件允许发送带有可自定义内容和附件的电子邮件。以下是电子邮件通知可能的示例：
- en: Groovy
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: Groovy
- en: '[PRE22]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This code uses the `emailext` function to send an email notification to the
    developer’s recipient provider, which is defined in the Jenkins configuration.
    The `subject` parameter specifies the subject of the email, and the `attachmentsPattern`
    parameter specifies a file pattern that matches the CSV report file generated
    by the Python script.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码使用`emailext`函数向开发者的收件人提供者发送电子邮件通知，该收件人提供者在Jenkins配置中定义。`subject`参数指定电子邮件的主题，`attachmentsPattern`参数指定一个文件模式，用于匹配由Python脚本生成的CSV报告文件。
- en: The `reportToString` function is used to convert the report generated by the
    Python script into a string that can be used as the body of the email. If no issues
    are found, it returns a message indicating that no performance issues were found.
    If issues are found, it formats the report as a list of bullet points.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`reportToString`函数用于将Python脚本生成的报告转换为字符串，以便作为电子邮件的正文。如果没有发现问题，它将返回一条消息，表示没有发现性能问题。如果发现问题，它将报告格式化为项目符号列表。'
- en: In this example, we have seen how Jenkins can be used to automate the process
    of investigating Oracle Database issues. The pipeline connects to the database
    using JDBC, retrieves performance data using a SQL query, analyzes the data using
    a Python script, and sends email notifications to the database administrator if
    any issues are found. The architecture consists of several components, including
    the Jenkins server, the Oracle Database, the JDBC driver, the SQL query, the Python
    script, and the email server. The pipeline code is written in Groovy, and the
    email notification is sent using the Jenkins Email Extension plugin. By automating
    this process, database administrators can save time and improve the performance
    of their Oracle databases.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们已经看到如何使用 Jenkins 来自动化调查 Oracle 数据库问题的过程。该流水线通过 JDBC 连接到数据库，使用 SQL 查询获取性能数据，使用
    Python 脚本分析数据，并在发现问题时向数据库管理员发送电子邮件通知。架构由多个组件组成，包括 Jenkins 服务器、Oracle 数据库、JDBC
    驱动、SQL 查询、Python 脚本和邮件服务器。流水线代码是用 Groovy 编写的，邮件通知是通过 Jenkins Email Extension 插件发送的。通过自动化这个过程，数据库管理员可以节省时间并提高他们的
    Oracle 数据库性能。
- en: Backup and disaster recovery
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 备份与灾难恢复
- en: Ensuring that relational databases are backed up and can be recovered in the
    event of a disaster is another critical activity for a DevOps team. This includes
    setting up backup and recovery processes, testing backups, and performing disaster
    recovery exercises. Let’s look at examples of how this can be accomplished.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 确保关系型数据库能够备份并在灾难发生时恢复是 DevOps 团队的另一项关键活动。这包括设置备份和恢复过程、测试备份以及进行灾难恢复演练。让我们看看如何实现这些目标的例子。
- en: Creating MySQL backups using Ansible
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Ansible 创建 MySQL 备份
- en: 'Before we dive into the technical details and code, let’s discuss the architecture
    that we’ll be using in this example. The basic architecture consists of three
    components: the MySQL database, the backup server, and the Ansible controller.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入技术细节和代码之前，让我们先讨论一下我们将在这个例子中使用的架构。基本架构由三个组件组成：MySQL 数据库、备份服务器和 Ansible 控制器。
- en: The MySQL database is the data source that we want to back up. We assume that
    it’s already installed and configured properly on its own server.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 数据库是我们要备份的数据源。我们假设它已经安装并正确配置在自己的服务器上。
- en: The backup server is where we’ll store the backup files. It should have enough
    disk space to accommodate the backups.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 备份服务器是我们存储备份文件的地方。它应该有足够的磁盘空间来存放备份。
- en: The Ansible controller is the machine from which we’ll execute Ansible playbooks.
    This machine should have Ansible installed and configured to connect to the MySQL
    database server and the backup server.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 控制器是我们将执行 Ansible playbook 的机器。此机器应已安装 Ansible，并配置为连接 MySQL 数据库服务器和备份服务器。
- en: With this architecture in place, we can proceed to create a playbook that performs
    MySQL backups.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个架构，我们可以继续创建一个执行 MySQL 备份的 playbook。
- en: 'Here is an example playbook that you can use:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个你可以使用的示例 playbook：
- en: YAML
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: YAML
- en: '[PRE23]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let’s go through this playbook step by step:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步了解这个 playbook：
- en: The first section defines some basic information about the playbook.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一部分定义了 playbook 的一些基本信息。
- en: The `hosts` variable specifies the hosts that we want to run the playbook on.
    In this case, we assume that we have a group called `mysql_servers` that contains
    the MySQL database server(s).
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`hosts` 变量指定了我们希望在哪些主机上运行 playbook。在这个例子中，我们假设有一个名为 `mysql_servers` 的主机组，其中包含
    MySQL 数据库服务器。'
- en: The `become` variable tells Ansible to run the playbook as the root user.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`become` 变量告诉 Ansible 以 root 用户身份运行 playbook。'
- en: The `vars` section defines some variables that we’ll use later in the playbook.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`vars` 部分定义了一些我们稍后将在 playbook 中使用的变量。'
- en: The `backup_dir` variable specifies the directory where we want to store the
    backups.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`backup_dir` 变量指定了我们希望存储备份的目录。'
- en: The `mysql_user` and `mysql_password` variables specify the username and password
    that Ansible will use to connect to the MySQL database.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`mysql_user` 和 `mysql_password` 变量指定了 Ansible 用来连接 MySQL 数据库的用户名和密码。'
- en: Finally, the `mysql_databases` variable lists the databases that we want to
    back up.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，`mysql_databases` 变量列出了我们要备份的数据库。
- en: The first task creates the backup directory if it doesn’t already exist. We
    use the `file` module to create the directory with the appropriate permissions.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个任务会在备份目录不存在时创建该目录。我们使用 `file` 模块以适当的权限创建该目录。
- en: The second task performs the actual backup. We use the `mysql_db_backup` module
    to connect to the MySQL database and create a backup of each database in the `mysql_databases`
    variable. We specify the backup directory using the `backup_dir` variable, and
    we set the backup type to `database`.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: The third task compresses the backup files using the `tar` command. We use the
    `command` module to execute the `tar` command with the appropriate arguments.
    The `chdir` argument tells `tar` to change to the backup directory before compressing
    the files. We use the `with_items` variable to loop over each database in the
    `mysql_databases` variable and compress the corresponding backup file.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have a playbook, we need to create an inventory file that tells
    Ansible about our servers. Here is an example inventory file:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: Inventory
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In this example, we have one MySQL database server called `mysql.example.com`
    and one backup server called `backup.example.com`. You can modify this file to
    match your own server names and IP addresses.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to create a configuration file for Ansible. Here is an example
    configuration file:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Configuration file
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This file specifies the location of our inventory file and sets the remote user
    to `root`.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our playbook, inventory file, and configuration file, we can
    run the playbook using the `ansible-playbook` command:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: +--------------------------+
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '|  PostgreSQL Production   |'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: +--------------------------+
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: +-----------------+
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '|  pg_dump Backup  |'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: +-----------------+
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: +-----------------+
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '|   S3 Bucket     |'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: +-----------------+
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: +-----------------+
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '|   Chef Server   |'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: +-----------------+
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: +-----------------+
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '|   Chef Client   |'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: +-----------------+
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: +-----------------+
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '|     Results     |'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: +-----------------+
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Install the aws-sdk-s3 gem
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: chef_gem 'aws-sdk-s3' do
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: compile_time true
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: end
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest backup from the S3 bucket
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 's3 = Aws::S3::Client.new(region: ''us-west-2'')'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: bucket_name = 'my-backup-bucket'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: backup_prefix = 'postgresql-backups/'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: 'latest_backup = s3.list_objects_v2(bucket: bucket_name, prefix: backup_prefix).contents.sort_by(&:last_modified).last.key'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: local_backup_path = "/tmp/#{File.basename(latest_backup)}"
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: FileUtils.mkdir_p(File.dirname(local_backup_path))
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: File.open(local_backup_path, 'wb') do |file|
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: 's3.get_object(bucket: bucket_name, key: latest_backup) do |chunk|'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: file.write(chunk)
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: end
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: end
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Verify the integrity of the backup
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'cmd = "pg_restore --list #{local_backup_path} > /dev/null"'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: system(cmd)
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: if $?.exitstatus != 0
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: 'Chef::Log.error("Backup file #{local_backup_path} is invalid!")'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: 'raise "Backup file #{local_backup_path} is invalid!"'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: else
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: 'Chef::Log.info("Backup file #{local_backup_path} is valid.")'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: end
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Report the results to the Chef server
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: chef_gem 'chef-handler-sns' do
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: compile_time true
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: end
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: require 'chef/handler/sns'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: Chef::Config[:s3_backup_test_topic_arn] = 'arn:aws:sns:us-west-2:123456789012:s3-backup-test-results'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: 'Chef::Config[:s3_backup_test_subject] = "PostgreSQL backup test results for
    #{node[''hostname'']}"'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: 'Chef::Config[:s3_backup_test_body] = "Backup file #{local_backup_path} is valid."'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: Chef::Config[:s3_backup_test_aws_access_key_id] = 'my-access-key'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: Chef::Config[:s3_backup_test_aws_secret_access_key] = 'my-secret-key'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: Chef::Config[:s3_backup_test_aws_region] = 'us-west-2'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: chef_handler 'Chef::Handler::SNS' do
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: source 'chef/handler/sns'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: arguments [Chef::Config[:s3_backup_test_topic_arn], {
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: 'subject: Chef::Config[:s3_backup_test_subject],'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: 'message: Chef::Config[:s3_backup_test_body],'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: 'access_key_id: Chef::Config[:s3_backup_test_aws_access_key_id],'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: 'secret_access_key: Chef::Config[:s3_backup_test_aws_secret_access_key],'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: 'region: Chef::Config[:s3_backup_test_aws_region],'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '}]'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: action :enable
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: end
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: class oracle_production {
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: 'service { ''oracle'':'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: ensure => stopped,
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: class oracle_production {
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: 'exec { ''backup'':'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: command => '/usr/local/bin/backup.sh',
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: class oracle_production {
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: 'file { ''/mnt/backups'':'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: ensure => directory,
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: 'file { ''/mnt/backups/backup.tar.gz'':'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: source => '/path/to/backup.tar.gz',
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: 'exec { ''copy_backup'':'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: command => '/usr/bin/scp /mnt/backups/backup.tar.gz user@disaster-recovery:/mnt/backups/',
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: provider "aws" {
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: region = "us-west-2"
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: resource "aws_db_instance" "mysql" {
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: allocated_storage    = 100
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: engine               = "mysql"
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: engine_version       = "5.7"
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: instance_class       = "db.t2.micro"
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: name                 = "mydb"
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: username             = "admin"
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: password             = "password"
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: parameter_group_name = "default.mysql5.7"
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: resource "aws_db_parameter_group" "mysql" {
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: name_prefix = "mysql-"
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: family      = "mysql5.7"
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: parameter {
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: name  = "innodb_buffer_pool_size"
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: 'value = "5368709120" # 5 GB'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: parameter {
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: name  = "max_connections"
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: value = "100"
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: resource "aws_rds_cluster_instance" "mysql" {
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: count              = 1
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: identifier         = "mydb-${count.index + 1}"
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: db_subnet_group_name = "${aws_db_subnet_group.mysql.name}"
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: cluster_identifier   = "${aws_rds_cluster.mysql.id}"
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: instance_class       = "db.t2.micro"
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: engine               = "mysql"
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: engine_version       = "5.7"
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: db_parameter_group_name = "${aws_db_parameter_group.mysql.name}"
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '---'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Optimize PostgreSQL Queries'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: 'hosts: dbserver'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: 'become: yes'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: 'vars:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: 'database_name: mydatabase'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: 'database_user: myuser'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: 'database_password: mypassword'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: 'tasks:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Install PostgreSQL client'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: 'apt:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: 'name: postgresql-client'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: 'state: present'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Check query execution time'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: 'shell: |'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: psql -d {{ database_name }} -U {{ database_user }} -c "EXPLAIN ANALYZE SELECT
    * FROM mytable WHERE id = 1234;"
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: 'register: query_output'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Show query plan'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: 'debug:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: 'var: query_output.stdout_lines'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Create index on id column'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: 'shell: |'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: psql -d {{ database_name }} -U {{ database_user }} -c "CREATE INDEX ON mytable
    (id);"
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Check query execution time with index'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: 'shell: |'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: psql -d {{ database_name }} -U {{ database_user }} -c "EXPLAIN ANALYZE SELECT
    * FROM mytable WHERE id = 1234;"
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: 'register: query_output_index'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Show optimized query plan'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: 'debug:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: 'var: query_output_index.stdout_lines'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Vacuum analyze the table'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: 'shell: |'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: psql -d {{ database_name }} -U {{ database_user }} -c "VACUUM ANALYZE mytable;"
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Show table statistics'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: 'shell: |'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: psql -d {{ database_name }} -U {{ database_user }} -c "SELECT relname, n_live_tup,
    n_dead_tup, last_vacuum, last_autovacuum, last_analyze, last_autoanalyze FROM
    pg_stat_user_tables WHERE relname = 'mytable';"
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: 'register: table_stats'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Show table statistics output'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: 'debug:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: 'var: table_stats.stdout_lines'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '- name: Install packages'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: 'become: true'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: 'apt:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: 'name:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: '- openssl'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: '- python3-certbot'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: '- python3-certbot-apache'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: 'state: present'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '- name: Generate SSL/TLS certificates and keys'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: 'become: true'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: 'openssl_certificate:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: 'path: /etc/mysql/ssl/ca.pem'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: 'privatekey_path: /etc/mysql/ssl/ca.key'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: 'common_name: "My CA"'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: 'owner: root'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: 'group: root'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: 'mode: 0600'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: 'self_signed: yes'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: 'type: CA'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: 'register: ca_cert'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: '- openssl_certificate:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: 'path: /etc/mysql/ssl/server.pem'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: 'privatekey_path: /etc/mysql/ssl/server.key'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: 'common_name: "{{ inventory_hostname }}"'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: 'owner: root'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: 'group: root'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: 'mode: 0600'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: 'ca_path: /etc/mysql/ssl/ca.pem'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: 'ca_privatekey_path: /etc/mysql/ssl/ca.key'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: 'ca_common_name: "My CA"'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: 'type: server'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: 'register: server_cert'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: '- openssl_certificate:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: 'path: /etc/mysql/ssl/client.pem'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: 'privatekey_path: /etc/mysql/ssl/client.key'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: 'common_name: "MySQL Client"'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: 'owner: root'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: 'group: root'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: 'mode: 0600'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: 'ca_path: /etc/mysql/ssl/ca.pem'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: 'ca_privatekey_path: /etc/mysql/ssl/ca.key'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: 'ca_common_name: "My CA"'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: 'type: client'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: 'register: client_cert'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '- name: Configure MySQL to use SSL/TLS encryption and mutual authentication'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: 'become: true'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: 'template:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: 'src: templates/my.cnf.j2'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: 'dest: /etc/mysql/my.cnf'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: 'notify: restart mysql'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Set permissions for SSL/TLS certificates and keys'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: 'become: true'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: 'file:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: 'path: "{{ item.path }}"'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: 'owner: root'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: 'group: root'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: 'mode: 0600'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: 'with_items:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: '- "{{ ca_cert }}"'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: '- "{{ server_cert }}"'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: '- "{{ client_cert }}"'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '- name: Configure Certbot to obtain and renew SSL/TLS certificates'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: 'become: true'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: 'template:'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: 'src: templates/certbot.ini.j2'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: 'dest: /etc/letsencrypt/cli.ini'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Obtain SSL/TLS certificate from Let''s Encrypt'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: 'become: true'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: 'shell: certbot certonly --non-interactive --agree-tos --email admin@example.com
    --apache --domain example.com --domain www.example.com'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Recipe to install PostgreSQL on the server
  id: totrans-524
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '#'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: package 'postgresql'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Recipe to create a PostgreSQL user
  id: totrans-528
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '#'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: execute 'create_postgres_user' do
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: user 'postgres'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: 'command "psql -c \"CREATE USER #{node[''postgresql''][''user'']} WITH PASSWORD
    #{node[''postgresql''][''password'']};\""'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: end
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Recipe to grant permissions to a PostgreSQL user
  id: totrans-535
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '#'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: execute 'grant_postgres_user_permissions' do
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: user 'postgres'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: 'command "psql -c \"GRANT ALL PRIVILEGES ON DATABASE #{node[''postgresql''][''database'']}
    TO #{node[''postgresql''][''user'']};\""'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
- en: end
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Recipe to revoke permissions from a PostgreSQL user
  id: totrans-542
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '#'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: execute 'revoke_postgres_user_permissions' do
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
- en: user 'postgres'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: 'command "psql -c \"REVOKE ALL PRIVILEGES ON DATABASE #{node[''postgresql''][''database'']}
    FROM #{node[''postgresql''][''user'']};\""'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: end
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Recipe to delete a PostgreSQL user
  id: totrans-549
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '#'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: execute 'delete_postgres_user' do
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 'delete_postgres_user' do
- en: user 'postgres'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 用户 'postgres'
- en: 'command "psql -c \"DROP ROLE IF EXISTS #{node[''postgresql''][''user'']};\""'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '命令 "psql -c \"DROP ROLE IF EXISTS #{node[''postgresql''][''user'']};\""'
- en: end
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 结束
- en: '[PRE46]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: class oracle_security {
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 类 oracle_security {
- en: 'package { ''oracle_security_patches'':'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: '软件包 { ''oracle_security_patches'':'
- en: ensure => latest,
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: ensure => latest,
- en: provider => 'yum',
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 提供者 => 'yum',
- en: '}'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE47]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: sudo puppet agent -t
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: sudo puppet agent -t
- en: '[PRE48]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Info: Applying configuration version ''1474461465'''
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '信息: 应用配置版本 ''1474461465'''
- en: 'Notice: /Stage[main]/Oracle_security/Package[oracle_security_patches]/ensure:
    ensure changed ''1.0.0-1'' to ''1.1.0-1'''
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '通知: /Stage[main]/Oracle_security/Package[oracle_security_patches]/ensure: 确保从
    ''1.0.0-1'' 更改为 ''1.1.0-1'''
- en: '[PRE49]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
