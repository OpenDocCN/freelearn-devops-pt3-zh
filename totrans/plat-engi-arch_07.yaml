- en: <st c="0">7</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Building Secure and Compliant Products</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="40">In the digital age, cyber crimes are on the rise.</st> <st c="91">While
    not every organization will have the hard compliance requirements of a bank or
    a government agency, the security standards and best practices for those highly
    regulated environments can and should be generalized to your platform.</st> <st
    c="327">Security at every layer of an organization helps to prevent a security
    breach down</st> <st c="410">the line.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="419">By the end of this chapter, you should have gained a better understanding
    of security standards, frameworks, and trends.</st> <st c="541">This includes
    tips for understanding and</st> <st c="582">leveraging a</st> **<st c="595">Software
    Bill of Materials</st>** <st c="621">(</st>**<st c="623">SBOM</st>**<st c="627">),
    understanding open source projects for platform security, and understanding policy
    engine technologies (with examples and use cases).</st> <st c="765">You should
    be able to use these learnings to define the right actions to secure your platform
    without limiting your capabilities and ensure the app delivery process will provide
    hardened and secure</st> <st c="963">software/container packages.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="991">As such, we will cover the following main topics in</st> <st c="1044">the
    chapter:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1056">Reconciling security to the left and</st> <st c="1094">Zero Trust</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1104">Understanding platform security – how to build a secure yet flexible
    and</st> <st c="1178">open system</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1189">Looking at</st> <st c="1201">SBOM practices</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1215">Understanding pipeline security – what you have to consider to
    secure your</st> **<st c="1291">continuous integration/continuous delivery</st>**
    <st c="1333">(</st>**<st c="1335">CI/CD</st>**<st c="1340">) pipelines</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1352">Understanding application security – setting and</st> <st c="1402">enforcing
    policies</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="1420">Free and open source software</st>** <st c="1450">(</st>**<st
    c="1452">FOSS</st>**<st c="1456">) for platform security and how to</st> <st c="1492">use
    it</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1498">Reconciling security to the left and Zero Trust</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**<st c="1546">Security to the left</st>** <st c="1567">and</st> **<st c="1572">Zero
    Trust</st>** <st c="1582">are the</st> <st c="1590">buzzwords du jour in cybersecurity.</st>
    <st c="1627">These</st> <st c="1633">buzzwords – or buzz phrases if you will–most
    certainly will fade into obscurity, but the practices they represent will continue
    to be best practices for years</st> <st c="1792">to come.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="1800">Security to the left</st>* <st c="1821">looks at the process
    of building and delivering software as a linear flowchart that reads left to right.</st>
    <st c="1927">That chart would look something</st> <st c="1959">like this:</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1: Simple app development workflow](img/Figure_7.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<st c="1997">Figure 7.1: Simple app development workflow</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2040">In this very simplified example, a developer writes code that is
    then placed in source control and ultimately comes out as an application for consumption
    by users.</st> <st c="2205">Looking at this security workflow on the right side,
    at the application layer itself, is important but too late.</st> <st c="2318">There
    are already three other obvious places where a lack of security can create vulnerabilities
    that could</st> <st c="2426">be exploited.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2439">Solving security at the personnel level is the essence of security
    to the left, but that’s not where security ends; it’s just where it begins.</st>
    <st c="2583">Security must be centered at every step along the flowchart so that
    when we get to more realistic examples, we can see how security needs to expand
    with</st> <st c="2736">the footprint:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2: Expanded development and delivery workflow](img/Figure_7.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<st c="2904">Figure 7.2: Expanded development and delivery workflow</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2958">In the preceding</st> <st c="2975">diagram, you can already see
    some common security best practices implemented at the point where users are trying
    to interact with the application and its supporting infrastructure.</st> <st c="3157">However,
    security at the dev team and open source dependencies’ levels, within source control,
    with CI/CD, and on the application, itself is not addressed.</st> <st c="3313">Even
    storage for keys and secrets, while representing a best practice, also needs security
    applied to the accessing of those passwords.</st> <st c="3449">Security to the
    left helps you develop your security story from the beginning of the product life
    cycle through to the delivery of the completed application to the end users.</st>
    <st c="3624">In platform engineering, this can create a feeling of dissonance
    between the most secure platform and the platform that achieves perfect self-service.</st>
    <st c="3775">Since the platform needs to support developer self-service, then
    the platform owning the full security story starts to run counter to the flexibility
    that accompanies self-service.</st> <st c="3956">It can, therefore, impose enough
    restrictions for it to feel like a high barrier to entry and thus jeopardize the
    adoption of the platform and</st> <st c="4099">developer happiness.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4119">In days past,</st> *<st c="4134">Trust but Verify</st>* <st c="4150">would
    have been the security model to solve this.</st> <st c="4201">The meaning is self-explanatory.</st>
    <st c="4234">You trust the developers have done everything necessary to maintain
    the desired security posture for the application, but at the platform team, you
    don’t own the security posture end to end.</st> <st c="4425">That platform would
    verify to the best of its ability that all the right things have been done without
    intruding</st> <st c="4538">on self-service.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4554">These days, security best practices have shifted, and</st> *<st
    c="4609">Zero Trust</st>* <st c="4619">is the name of the game.</st> <st c="4645">Zero
    Trust</st> <st c="4656">essentially assumes everyone is a bad actor (whether or
    not that’s intentional is irrelevant).</st> <st c="4751">To maintain this security
    posture, the platform needs to conform to best practices, but it cannot take on
    the responsibility of the application.</st> <st c="4896">In other words, the platform
    needs to provide all the scaffolding to the dev team and the stakeholders to support
    a secure and compliant product.</st> <st c="5042">For example, if the Python language
    is needed, then a secured Python binary, either internally secured or from a trusted
    vendor, could be supplied within an image registry accessible to all users and
    applications of the platform.</st> <st c="5272">Using Python-Slim from the Docker
    registry is also a more secure choice and more readily available.</st> <st c="5372">The
    Slim image is probably fine for most use cases.</st> <st c="5424">From there,
    a reasonable and self-service attentive restriction would be to deny workloads
    that don’t use images from a known safe source.</st> <st c="5563">A check in the
    CI pipeline can handle this.</st> <st c="5607">Pushing the check as far left as
    possible saves everyone time and also avoids spending compute processing a change
    that isn’t conformant to the security posture.</st> <st c="5769">However, adding
    a check in that part can be a little painful as it involves writing a job to scan,
    analyze, and then reach a decision based on the contents of all Dockerfiles in
    the repository.</st> <st c="5963">Those could be nested within sub-directories,
    and while it’s not the most impossible challenge, it can be painful.</st> <st
    c="6078">Additionally, writing this type of functionality into CI pipelines should
    be considered out of the scope of the average</st> <st c="6198">platform team.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6212">From the platform perspective, an alternative approach would be
    to use policy engines and admission webhooks to reject any Pod definition that
    doesn’t leverage a trusted image source.</st> <st c="6397">This isn’t as far left
    as the ideal, and hopefully, the development team and the processes they follow
    prevent cases where this would be necessary, but in Zero Trust environments, this
    policy would act as a last fail-safe to ensure only the correct software is being
    promoted to production environments.</st> <st c="6701">It could be deemed reasonable
    that images from more public sources are acceptable for prototyping within the
    IDP, and therefore, the fail-safe is only necessary for production environments.</st>
    <st c="6891">This allows the platform to continue to act in service to the team
    and not unnecessarily</st> <st c="6980">impede them.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6992">Another example would be to only accept commits into a GitHub repository
    if the commit is signed.</st> <st c="7091">The signature identifies that the author
    and the code hasn’t been tampered with since the signature was applied.</st> <st
    c="7204">This can be enforced via webhooks on a GitHub repository, although how
    much influence the platform team has over GitHub organizations for any company
    may be limited; the security team (if present) will likely require this.</st>
    <st c="7427">And while it’s a good example of</st> <st c="7460">Zero Trust and
    security to the left working together, it’s again most likely out of the scope
    of the</st> <st c="7561">platform team.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7575">However much these phrases may sound like empty aphorisms, teams
    fail if they ignore the fundamental principles they represent.</st> <st c="7704">Security
    done right is one of the best investments a company can make.</st> <st c="7775">Shifting
    security left means testing it early and testing</st> <st c="7833">it often.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7842">Every major security breach and vulnerability could have been caught
    with testing.</st> <st c="7926">There are various types of testing, including
    some specifically executed by security professionals, but regardless of whether
    it’s penetration testing or just basic negative testing in your quality engineering
    process, security and compliance should be tested regularly to guarantee there
    are no unexpected surface areas.</st> <st c="8248">This could look like using
    software in unexpected ways, or simply validating that the permissions settings
    for roles within the organization</st> <st c="8389">are correct.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8401">Now that we’ve introduced the concepts of security to the left
    and Trust but Verify, let’s look at how to build a system that is both secure</st>
    <st c="8543">and flexib</st><st c="8553">le.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8557">Understanding platform security – how to build a secure yet flexible
    and open system</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="8642">The platform isn’t the</st> <st c="8665">totality of an organization’s
    security posture; rather, it’s part of an equation.</st> <st c="8748">When assessing
    how to integrate cybersecurity or DevSecOps into the platform, a balance must
    be stuck.</st> <st c="8851">Pushing security to the left helps to reduce the efforts
    the platform team needs to exert, but a clear and defined scope helps everyone
    to understand their part of the</st> <st c="9019">security st</st><st c="9030">ory.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9035">Breaking down the problem into consumable chunks</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="9084">Security and flexibility can also feel like two words that stand
    diametrically opposed.</st> <st c="9173">Good security is inherently inflexible;
    however, it’s possible and necessary for an IDP’s success to balance both.</st>
    <st c="9288">How do we achieve this?</st> <st c="9312">Step one</st> <st c="9321">is</st>
    **<st c="9324">scope security</st>**<st c="9338">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9339">The first part of scoping is to understand what the minimum level
    of security is that’s required.</st> <st c="9438">Obviously, we should always
    do more than the bare minimum, so if you want to understand what a maximum level
    would look like, it’s not the worst idea, but it may artificially increase the
    scope and cause you to be unable to see the forest for the trees.</st> <st c="9692">Therefore,
    it’s our recommendation to start with a narrow focus.</st> <st c="9757">Once you
    know what the minimum level of security is that the platform must enforce, then
    you start looking at what the minimum level of security is that the platform</st>
    <st c="9923">must support.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9936">When you go down the path of security, it’s very easy to quickly
    realize how dangerous the world of the internet is and overcorrect.</st> <st c="10070">These
    overcorrections can increase cognitive load and create a barrier to entry for
    using a platform.</st> <st c="10172">If a good developer is lazy, then the platform
    will need to help them to be lazy, not introduce additional layers of complexity.</st>
    <st c="10301">It’s for this reason that while the platform cannot own the entire
    cybersecurity posture of an organization, it plays a pivotal role in said posture.</st>
    <st c="10451">Security is good; security theater</st> <st c="10486">is not.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10493">Knowing how much is too much and how much is just right is a skill
    that gets honed over time, and there’s nothing to cleanly say when a security
    measure is too much or just right.</st> <st c="10674">The answer will always be:</st>
    *<st c="10701">It depends</st>*<st c="10711">. For example, securing an environment
    so that it is not accessible to the public internet may impede the ability of
    people working on a project to work from home, but if that project involves space
    shuttles or nuclear reactors, then the air-gapped environment is correct, and
    not</st> <st c="10992">an overcorrection.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11010">Many security experts have spent years researching security and
    defining solid definitions of what it means to be secure and compliant.</st> <st
    c="11147">The</st> **<st c="11151">National Institute of Standards and Technology</st>**
    <st c="11197">(</st>**<st c="11199">NIST</st>**<st c="11203">) division</st> <st
    c="11214">of the US Department of Commerce is built up of such experts who regularly
    publish new standards and update pre-existing standards as the</st> <st c="11353">industry
    evolves.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11370">It’s worth understanding the work of these organizations to help
    guide you in developing your</st> <st c="11465">understanding of how security
    and a flexible</st> **<st c="11510">Internal Developer</st>** **<st c="11528">Platform</st>**
    <st c="11537">(</st>**<st c="11539">IDP</st>**<st c="11542">) intersect.</st>
    <st c="11556">Since these agencies typically publish standards for companies that
    work with the government, it’s worth noting that their publications are intended
    for a specific type of audience and do not replace talking to a cybersecurity
    expert with experience in your</st> <st c="11814">specific indu</st><st c="11827">stry.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11833">Addressing the OWASP 10</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="11857">If you’re still not sure</st> <st c="11882">where to start, another
    organization has published guidelines that make a great starting point for scoping
    security.</st> <st c="12000">The</st> **<st c="12004">Open Worldwide Application
    Security Project</st>** <st c="12047">(</st>**<st c="12049">OWASP</st>**<st c="12054">)
    (</st>[<st c="12058">owasp.org</st>](http://owasp.org)<st c="12068">) is a</st>
    <st c="12076">non-profit foundation focused on cybersecurity.</st> <st c="12124">As
    a respected group of security experts, their</st> *<st c="12172">Top Ten</st>*
    <st c="12179">list has become a guiding beacon for anticipating and preventing
    security issues within software.</st> <st c="12278">Every so often, they</st>
    <st c="12298">re-publish this list, and as of the 2021 publication, this is their</st>
    <st c="12367">current list:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="12380">A01:2021</st>*<st c="12389">–</st>*<st c="12391">Broken</st>*
    *<st c="12398">Access Control</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="12412">A02:2021</st>*<st c="12421">–</st>*<st c="12423">Cryptographic
    Failures</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="12445">A03:2021</st>*<st c="12454">–</st>*<st c="12456">Injection</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="12465">A04:2021</st>*<st c="12474">–</st>*<st c="12476">Insecure Design</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="12491">A05:2021</st>*<st c="12500">–</st>*<st c="12502">Security Misconfiguration</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="12527">A06:2021</st>*<st c="12536">–</st>*<st c="12538">Vulnerable
    and</st>* *<st c="12553">Outdated Components</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="12572">A07:2021</st>*<st c="12581">–</st>*<st c="12583">Identification
    and</st>* *<st c="12602">Authentication Failures</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="12625">A08:2021</st>*<st c="12634">–</st>*<st c="12636">Software and
    Data</st>* *<st c="12654">Integrity Failures</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="12672">A09:2021</st>*<st c="12681">–</st>*<st c="12683">Security Logging
    and</st>* *<st c="12704">Monitoring Failures</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="12723">A10:2021</st>*<st c="12732">–</st>*<st c="12734">Server-Side
    Request</st>* *<st c="12754">Forgery (SSRF)</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="12768">OWASP went a little further and also introduced a Kubernetes-specific</st>
    *<st c="12839">Top Ten</st>* <st c="12846">list as</st> <st c="12855">of 2022:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="12863">K01</st>*<st c="12867">:</st> *<st c="12870">Insecure</st>*
    *<st c="12879">Workload Configurations</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="12902">K02</st>*<st c="12906">:</st> *<st c="12909">Supply</st>* *<st
    c="12916">Chain Vulnerabilities</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="12937">K03</st>*<st c="12941">:</st> *<st c="12944">Overly Permissive</st>*
    *<st c="12962">RBAC Configurations</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="12981">K04</st>*<st c="12985">:</st> *<st c="12988">Lack of Centralized</st>*
    *<st c="13008">Policy Enforcement</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="13026">K05</st>*<st c="13030">:</st> *<st c="13033">Inadequate Logging</st>*
    *<st c="13052">and Monitoring</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="13066">K06</st>*<st c="13070">:</st> *<st c="13073">Broken</st>* *<st
    c="13080">Authentication Mechanisms</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="13105">K07</st>*<st c="13109">:</st> *<st c="13112">Missing Network</st>*
    *<st c="13128">Segmentation Controls</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="13149">K08</st>*<st c="13153">:</st> *<st c="13156">Secrets</st>* *<st
    c="13164">Management Failures</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="13183">K09</st>*<st c="13187">:</st> *<st c="13190">Misconfigured</st>*
    *<st c="13204">Cluster Components</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="13222">K10</st>*<st c="13226">:</st> *<st c="13229">Outdated and Vulnerable</st>*
    *<st c="13253">Kubernetes Components</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="13274">The lists by and</st> <st c="13292">large match up, but both apply
    to a Kubernetes-based IDP.</st> <st c="13350">Instead of taking these lists as
    comprehensive guides to create a security posture, these should be considered
    bare-minimum items to address in the security posture of the IDP but still represent
    a comprehensive start to your</st> <st c="13576">scoping project.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13592">Implementing threat modeling</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="13621">After you scope security, step two</st> <st c="13656">is</st>
    **<st c="13660">threat modeling</st>**<st c="13675">. A threat model is a representation
    of everything that can impact the security of your application or, in this case,
    platform.</st> <st c="13803">Performing threat modeling is an excellent example
    of how to arrive at the correct conclusions for the security posture of an organization.</st>
    <st c="13943">You can use these</st> *<st c="13961">Top Ten</st>* <st c="13968">lists
    to guide your conversations around threat modeling.</st> <st c="14027">According
    to the authors of the</st> <st c="14058">Threat Modeling Manifesto (</st>[<st
    c="14086">threatmodelingmanifesto.org</st>](http://threatmodelingmanifesto.org)<st
    c="14114">), a threat model should answer the following</st> <st c="14161">four
    questions:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14176">What are we</st> <st c="14189">working on?</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="14200">What can</st> <st c="14210">go wrong?</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="14219">What are we going to do</st> <st c="14244">about it?</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="14253">Did we do a good</st> <st c="14271">enough job?</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="14282">For example, you can start with:</st> *<st c="14316">We’re working
    on the way users authenticate to the IDP</st>*<st c="14370">. Then, follow that
    with</st> *<st c="14395">What can go wrong with overly permissive RBAC configurations?</st>*
    <st c="14456">and work through each of these</st> *<st c="14488">Top Ten</st>*
    <st c="14495">items in the Kubernetes list.</st> <st c="14526">These questions
    are deceptively simple, but the surface area quickly expands as question two (</st>*<st
    c="14620">What can go wrong?</st>*<st c="14639">) and question one (</st>*<st
    c="14660">What are we working on?</st>*<st c="14684">) are a many-to-one ratio,
    as is the same for question three (</st>*<st c="14747">What are we going to do
    about it?</st>*<st c="14781">) compared to question four.</st> <st c="14811">In
    any case, where the answer to</st> *<st c="14844">Did we do a good enough job?</st>*
    <st c="14872">isn’t a decisive yes, then the loop of questions should be repeated.</st>
    <st c="14942">A successful threat model and response plan is conducted in a collaborative
    way with all stakeholders of the</st> <st c="15051">platform involved.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15069">This collaboration on security is one of the most important strategies
    to successfully center security without sacrificing usability, the ability to
    accept contributions, or self-service.</st> <st c="15258">It is also through a
    collaborative threat modeling process that sociotechnical risks to security can
    be addressed.</st> <st c="15373">Security to the left doesn’t just mean as far
    as the developer’s computer, but the developer themselves.</st> <st c="15478">Ensure
    they’re taking appropriate precautions, are aware of how bad actors try to manipulate
    situations to steal credentials, and are generally following best practices–such
    as not leaving a company laptop in a car from where it cou</st><st c="15710">ld</st>
    <st c="15714">be stolen.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15724">Common security standards and frameworks</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="15765">Navigating the world of security standards starts with trying
    to demystify a language of acronyms.</st> <st c="15865">The goal isn’t to become
    a security expert overnight but to instead know what the level of security you
    need is and ensure the platform does everything necessary to conform to that security.</st>
    <st c="16056">An easy way to approach this problem is to look at the industry
    your company serves and what security frameworks are relevant.</st> <st c="16183">A
    hospital or large medical group in the US, for example, would need</st> <st c="16252">to
    follow</st> **<st c="16262">Health Insurance Portability and Accountability Act</st>**
    <st c="16313">(</st>**<st c="16315">HIPAA</st>**<st c="16320">) compliance.</st>
    <st c="16335">As such, any vendor to a similar organization regardless of locale
    would need to be able to conform to the same.</st> <st c="16448">By understanding
    the end customers and the needs of the development team, a platform team can determine
    what level of security and compliance is required beyond standard</st> <st c="16618">best
    practices.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16633">Let’s do a quick overview of some security standards.</st> <st
    c="16688">This is by no means an exhaustive list but addresses some of the more</st>
    <st c="16758">common standards:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '| **<st c="16775">Standard</st>** | **<st c="16784">Locale</st>** | **<st c="16791">Levels</st>**
    | **<st c="16798">Description</st>** | **<st c="16810">Notes</st>** |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="16816">PCI DSS</st>** | <st c="16824">International</st> | <st c="16838">1-4</st>
    | **<st c="16842">Payment Card Industry Data Security Standard</st>**<st c="16887">.
    Defines security</st> <st c="16906">and compliance.</st> <st c="16922">Applicable
    to any company that processes, transmits, or stores credit card information.</st>
    <st c="17010">Levels are based on</st> <st c="17030">transaction</st> <st c="17041">volume.</st>
    | <st c="17049">Created</st> <st c="17058">by credit card brands, not</st> <st
    c="17085">the government.</st> |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="17100">DPDPA</st>** | <st c="17106">India</st> | <st c="17112">N/A</st>
    | **<st c="17116">Digital Personal Data Protection Act</st>**<st c="17153">. Defines
    how</st> <st c="17166">personal data can</st> <st c="17185">be processed.</st>
    | <st c="17198">The government of India passed this in 2023, and</st> <st c="17247">while
    it’s comparable</st> <st c="17269">to the</st> **<st c="17277">General Data Protection
    Regulation</st>** <st c="17311">(</st>**<st c="17313">GDPR</st>**<st c="17317">),
    it also has</st> <st c="17333">notable differences.</st> |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="17353">FedRAMP</st>** | <st c="17361">US</st> | <st c="17364">Moderate,</st>
    <st c="17375">High</st> | **<st c="17379">Federal Risk and Authorization Management
    Program</st>**<st c="17429">. Defines the security</st> <st c="17452">and compliance
    required to provide software and services to the</st> <st c="17516">federal government.</st>
    | <st c="17535">US</st> <st c="17539">federal government; different from</st>
    <st c="17574">state government.</st> |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="17591">HIPAA</st>** | <st c="17597">US</st> | <st c="17600">N/A</st>
    | **<st c="17604">Health Insurance Portability and</st>** **<st c="17638">Accountability
    Act</st>**<st c="17656">.</st> | <st c="17657">A</st> <st c="17660">standard set
    in the</st> <st c="17680">90s, it’s had to evolve</st> <st c="17704">with technology.</st>
    |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="17720">DGA</st>** | **<st c="17724">European</st>** **<st c="17734">Union</st>**
    <st c="17739">(</st>**<st c="17741">EU</st>**<st c="17743">)</st> | <st c="17745">N/A</st>
    | **<st c="17748">Data Governance Act</st>**<st c="17768">. Defines the</st> <st
    c="17781">policy of the EU for data use</st> <st c="17812">and sharing.</st> |
    <st c="17824">Applies</st> <st c="17832">to the context of public sector data
    and data altruism and what can and cannot be shared.</st> <st c="17923">Fills
    gaps in the</st> <st c="17941">GDPR standard.</st> |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="17955">GDPR</st>** | <st c="17960">EU</st> | <st c="17963">N/A</st>
    | <st c="17967">How</st> <st c="17972">personal data can and cannot</st> <st c="18001">be
    used.</st> | <st c="18009">This</st> <st c="18014">was a historic move and radically
    changed data</st> <st c="18062">handling globally.</st> |'
  prefs: []
  type: TYPE_TB
- en: '<st c="18080">Table 7.1: Security and compliance frameworks explained</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18136">Although the frameworks differ a little and they seek to accomplish
    different things, at their core, they are the same.</st> <st c="18257">Data captured
    and stored by an application must be secured while in motion and at rest, and
    it must only end up in expected places that can be accessed by expected users.</st>
    <st c="18428">This is accomplished partially with RBAC, but RBAC alone will not
    save you.</st> <st c="18504">Security standards such as PCI DSS include a physical
    inspection of hardware, servers, and access to those physical devices and their
    housing in order for compliance to be certified.</st> <st c="18687">Compliance
    and security are typically coupled but are actually distinct.</st> <st c="18760">A
    system can be secured but not compliant and vice versa.</st> <st c="18818">While
    we won’t go into those differences here, as they’re outside of the scope of an
    IDP by itself, it’s important to understand that security is more than just ticking
    boxes on a list.</st> <st c="19004">Those boxes should help inform how far threat
    modeling work must sprawl through the system and how you develop the role of the
    platform in any</st> <st c="19147">regulated industry.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19166">Asset protection</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="19183">Sticking to the paradigm of the</st> <st c="19215">digital space,
    the asset we’ll discuss is your service’s data.</st> <st c="19279">Most security
    and compliance regulations focus on the handling of data.</st> <st c="19351">You
    should take this to mean that data is the most valuable asset the average organization
    has, and it should be valued</st> <st c="19471">as such.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="19479">Your data has three states: it is either in motion, in use, or
    at rest.</st> <st c="19552">As such, the security for it must address all states.</st>
    <st c="19606">Since the data lives on the platform, it’s the responsibility of
    the platform to own this part of the security posture.</st> <st c="19726">It’s
    a rare product where the data doesn’t need to be secured with the utmost care,
    so it’s very difficult to go too far in</st> <st c="19850">securing data.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19864">Securing data at rest</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="19886">Your data will</st> <st c="19902">spend the majority of the time
    at rest.</st> <st c="19942">Data design and overall database security require
    very specific attention and regular review, but the high-level concepts for data
    at rest</st> <st c="20080">fall into the</st> <st c="20095">following categories:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20116">Classification</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20131">What type of data is it, and what information does</st> <st c="20183">it
    contain?</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20194">How important</st> <st c="20209">is it?</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20215">Physical isolation of data based on regulatory needs or</st> <st
    c="20272">business weight</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20287">How the data interacts with the system can</st> <st c="20331">inform
    classification</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20352">Encryption</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20363">Encryption at every layer, both the physical and</st> <st c="20413">the
    digital</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20424">Salts</st> <st c="20431">and hashes</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20441">Not just for encryption but also</st> <st c="20475">for compression</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20490">Not great if you want data</st> <st c="20518">kept human-readable</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20537">Can expand hugely in memory and could create</st> <st c="20583">an
    accidental</st> **<st c="20597">distributed denial of</st>** **<st c="20619">service</st>**
    <st c="20626">(</st>**<st c="20628">DDOS</st>**<st c="20632">)</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20634">Restricted access</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20651">Can be adjusted based on</st> <st c="20677">the classification</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20695">Should have a formal review process,</st> <st c="20733">roles,
    responsibilities</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20756">Redundant backups</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20774">Three is the magic number for high- and</st> <st c="20815">low-availability
    systems</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20839">The redundancy of data does not need to be uniform; policy design
    based on the cost of losing</st> <st c="20934">the data</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20942">Data</st> <st c="20948">retention policies</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20966">How</st> <st c="20970">long do you really need it for?</st> <st
    c="21003">Are</st> <st c="21007">there any</st> <st c="21017">governing laws?</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21032">What is the</st> **<st c="21045">chain of custody</st>** <st c="21061">on</st>
    <st c="21065">that</st> <st c="21070">decision?</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21079">Same as redundancy; no need for one policy for</st> <st c="21127">all
    data</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21135">Do you need it in the</st> <st c="21158">first place?</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21170">Challenge</st> <st c="21181">every piece:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21193">Bloat occurs when people assume data</st> <st c="21231">is necessary</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21243">Uncertainty makes people ask for more than</st> <st c="21287">they
    need</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21296">Showing how data adds value and accountability and makes it easy
    to justify usage and</st> <st c="21383">cost later:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21394">Aggressively descope</st> <st c="21416">unjustified pieces</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21434">Commit the history of how and why the system</st> <st c="21480">was
    made</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21488">Onboarding people</st> <st c="21507">becomes easy</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21519">Answering questions about the system becomes easy, including</st>
    <st c="21581">unfair ones</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21592">The bus number loses</st> <st c="21614">its importance</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21628">What is the business case to keep</st> <st c="21663">the data?</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21672">Does it</st> <st c="21681">make money?</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21692">Does it</st> <st c="21701">save money?</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21712">Will we learn</st> <st c="21727">from it?</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21735">Is it the right thing</st> <st c="21758">to do?</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21764">What risks are we exposed to by</st> <st c="21797">keeping it?</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '<st c="21808">What is the operational use case?</st> <st c="21843">(e.g.: troubleshooting
    items, access logs,</st> <st c="21886">audit trails)</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21899">Hot</st> <st c="21904">and</st> <st c="21908">cold storage</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21920">Hot</st> <st c="21924">storage is</st> <st c="21936">more</st>
    <st c="21941">readily available</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21958">Needs</st> <st c="21965">access rules</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21977">Cold storage is not</st> <st c="21997">readily available</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="22015">Older data that doesn’t need frequent attention but is still important
    goes into</st> <st c="22097">cold storage</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="22109">Harder to access, typically gated by higher levels</st> <st c="22161">of
    pe</st><st c="22166">rmissions</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="22176">Data sovereignty</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="22193">Many</st> <st c="22199">countries are adopting data sovereignty</st>
    <st c="22238">laws, essentially mandating that data created by people within the
    boundaries of the country does not leave the physical boundary of the country
    where it was created.</st> <st c="22406">This does not always mean that data cannot
    be viewed (data in use) outside of the country but that the data storage must
    remain within the regional boundary.</st> <st c="22564">This addresses the data-at-rest
    compliance posture but not the</st> <st c="22627">securi</st><st c="22633">ty
    posture.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22645">Securing data in motion</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="22669">When</st> <st c="22674">data is in motion, it is being transmitted
    between</st> <st c="22726">microservices, which means that it’s exposed to the
    networking of the platform and/or external endpoints.</st> <st c="22832">The data
    will need to be encrypted during transmission, but ultimately, the data needs
    to be used so that it will be unpacked by the receiving endpoint at</st> <st c="22987">some
    point:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22998">Limit what data is stored in memory and for how long–this protects
    the platform health and the data (be smart about</st> <st c="23115">your caching)</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23128">Don’t transmit data on ports that are widely opened</st> <st c="23181">or
    privileged</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23194">Only log absolutely necessary information about the data transaction,
    not the transacted data itself (see</st> <st c="23301">log sanitization)</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23318">Protect against injection by</st> <st c="23348">sanitizing inputs</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23365">Use networking security and best practices for cryptography to
    prevent</st> **<st c="23437">man-in-the-middle</st>** <st c="23454">(</st>**<st
    c="23456">MITM</st>**<st c="23460">) attacks</st> <st c="23470">and other k</st><st
    c="23482">inds</st> <st c="23488">of attacks</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23498">Data in use</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '<st c="23510">Data in use is</st> <st c="23525">exactly what it sounds like:
    data that the system is viewing or</st> <st c="23589">changing.</st> <st c="23600">When
    already stored in use, it’s either being retrieved from storage or cached.</st>
    <st c="23680">It might be held in memory or be read directly leveraging various
    read and caching technologies.</st> <st c="23777">Data would also be in use when
    it is initially entering a system.</st> <st c="23843">This includes registering
    new users or storing a new log line.</st> <st c="23906">Oftentimes, data in this
    state may also be undergoing data transformation such as aggregations or sanitization
    operations that ensure the data can’t be used for an injection attack, or even
    deletion.</st> <st c="24106">Securing data in use is just another application
    of the same principles we use when data is in m</st><st c="24202">otion or</st>
    <st c="24212">at rest.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24220">Securing your network</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="24242">Kubernetes has a</st> <st c="24260">pluggable architecture, and
    while it ships without a networking stack, some Kubernetes platform options will
    have their own default.</st> <st c="24393">For</st> <st c="24396">example, OpenShift
    Container Platform adopted a default</st> **<st c="24453">Container Network Interface</st>**
    <st c="24480">(</st>**<st c="24482">CNI</st>**<st c="24485">) known as</st> **<st
    c="24497">Open Virtual Network</st>** <st c="24517">(</st>**<st c="24519">OVN</st>**<st
    c="24522">).</st> <st c="24526">Aside</st> <st c="24531">from OVN, there are other
    secure and more observable solutions for</st> <st c="24599">Kubernetes networking.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="24621">Cilium</st>** <st c="24628">is an</st> <st c="24634">example
    of this more secure</st> <st c="24663">networking.</st> <st c="24675">It uses</st>
    **<st c="24683">eBPF</st>**<st c="24687">, which is a Linux kernel-level technology
    that allows kernel capabilities to be leveraged by programs running in a privileged
    context without needing changes to the kernel or a kernel module to be loaded.</st>
    <st c="24893">Cilium’s use of eBPF creates highly secure, observable, and performant
    networking for Kubernetes environments.</st> <st c="25004">Cilium brings those
    kernel-level capabilities into the Kubernetes network layer.</st> <st c="25085">The</st>
    <st c="25089">Cilium project website (</st>[<st c="25113">https://cilium.io/</st>](https://cilium.io/)<st
    c="25132">) is filled with hands-on tutorials and labs for gaining familiarity
    with the technology, and it is a</st> <st c="25235">property of the</st> **<st
    c="25251">Cloud Native Computing</st>** **<st c="25274">Foundation</st>** <st
    c="25284">(</st>**<st c="25286">CNCF</st>**<st c="25290">).</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25293">In addition to the networking technology, the networking topology
    will play an important role in network security.</st> <st c="25409">Networking
    tools such as firewalls, VPNs, VLANs, routers, switches, and so on may not live
    on the Kubernetes cluster but play a very important part in the security of the
    cluster.</st> <st c="25589">Whatever the final network topology looks like and
    how the cluster interacts with the public internet (or maybe it doesn’t!), for
    proper threat modeling and compliance, you will need to be able to observe your
    network an</st><st c="25809">d document</st> <st c="25821">your network.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25834">Isolation between pre-production and production environments</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="25895">A general best practice</st> <st c="25919">is that regardless
    of security and compliance needs, your system keeps production data and access
    isolated from other environments to ensure data is protected.</st> <st c="26080">Data
    is the most valuable asset most companies have, so the protection and isolation
    of data is the best way to secure the asset, guaranteeing adequate security and
    compliance for all companies.</st> <st c="26275">Data protection is at the heart
    of security and compliance.</st> <st c="26335">Production data should never leave
    a production environment, and access to that data must be rigorously gatekept
    to ensure no bad actors–internal, external, intentional, or accidental–can gain
    access to that production data.</st> <st c="26560">Let’s again reference our platform
    architecture from</st> [*<st c="26613">Chapter 2</st>*](B31164_02.xhtml#_idTextAnchor055)<st
    c="26622">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3: Platform reference components](img/Figure_7.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<st c="27459">Figure 7.3: Platform reference components</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27500">Each white box, even</st> <st c="27521">the security-related boxes,
    must have its own security gates.</st> <st c="27584">The ability to manage RBAC
    for the organization cannot be open for just anyone to change, as an example.</st>
    <st c="27689">It’s easy to see how this can quickly spiral into a problem that
    has spawned an entire field of experts.</st> <st c="27794">We won’t seek to replace
    their knowledge and expertise in this book; however, we will share some of the
    most important aspects of security for an IDP as we see them to get you started
    on the</st> <st c="27985">right path.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27996">An easy win for any organization is to have the staging, development,
    and production environments all completely isolated from one another.</st> <st
    c="28137">This includes having separate databases with different access rules
    entirely versus one database with different tables and different</st> <st c="28270">access
    rules.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28283">It is possible to use a single cluster and have network policy-based
    separations, RBAC that applies to very specific namespaces, and create a similar
    experience for isolation as you would experience with having multiple clusters,
    but the cluster’s API server, audit logs,</st> `<st c="28556">etcd</st>`<st c="28560">,
    networking, and other cluster-scoped resources will still represent a single point
    of potential failure of</st> <st c="28669">that isolation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28684">Therefore, for</st> <st c="28700">security and compliance, it’s
    best to separate environments completely.</st> <st c="28772">By having two distinct
    clusters, the isolation of the production data is guaranteed and leaves less room
    for human error to impact that security.</st> <st c="28918">From there, you may
    also have different networking configurations, such as firewall rules that have
    different allowances, or even environments that are completely disconnected</st>
    <st c="29094">from the</st> <st c="29103">public internet.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29119">Secret and token management</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="29147">In Kubernetes, a Secret</st> <st c="29171">is a password, authentication
    token, environment variable, API key, or similar piece of sensitive data that
    an application may need to access in order to function correctly or accomplish
    a task.</st> <st c="29367">Secret management</st> <st c="29384">becomes one of
    the most critical challenges to solve when working on a system that relies so
    heavily on automation as an IDP does.</st> <st c="29516">Fortunately, there are
    patterns and technologies designed to help</st> <st c="29582">handle this.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29594">As a Kubernetes-based platform, the built-in Kubernetes functions
    for secret security are the key starting point.</st> <st c="29709">It’s important
    to know that default behaviors are not secure.</st> <st c="29771">Secrets are
    stored similarly to ConfigMaps and are not encrypted.</st> <st c="29837">They
    are encoded, but the encoding is only</st> `<st c="29880">base64</st>`<st c="29886">.
    This is fine for development environments but not so good for production environments.</st>
    <st c="29975">You can, however, encrypt secret data at rest without installing
    any</st> <st c="30044">third-party applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30069">For further reading on encryption at rest, and some examples that
    could be used against a test cluster, please see the</st> *<st c="30189">Data
    encryption</st>* <st c="30204">section of the Kubernetes</st> <st c="30231">documentation:</st>
    [<st c="30246">https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/</st>](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/)<st
    c="30311">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30312">Secret management is</st> <st c="30333">often fairly large in
    scope, and once you have more than one cluster or more than one environment, it
    becomes difficult to manage all the secrets required for the IDP to support applications.</st>
    <st c="30526">As such, the use of secret storage software such as HashiCorp’s
    Vault or password managers such as Bitwarden or 1Password has become the industry
    standard.</st> <st c="30682">A standard best practice for landing secrets in a
    cluster automatically is to store in a code a reference to the secret and then
    have a logic of some kind that knows how to look up the secret by its reference
    and fetch it for the application.</st> <st c="30925">As such, a common pattern
    for applications to pull in secret information via references is to leverage a</st>
    <st c="31030">sidecar model.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31044">In a sidecar model, one of the containers in the Pod has the specific
    job of fetching and making available</st> <st c="31151">secrets for use by the
    main application container upon Pod start.</st> <st c="31218">The secrets are
    then placed into a storage volume and read by the application when it</st> <st
    c="31304">needs them.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31315">A sidecar model</st> <st c="31331">would look like this, where
    the Pod contains both the application and</st> <st c="31402">the sidecar:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4: Container sidecar model](img/Figure_7.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<st c="31485">Figure 7.4: Container sidecar model</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31520">However, unless the</st> <st c="31540">sidecar (or another service)
    that does the lookup is running on a loop, this is only solved once and doesn’t
    address environments where secrets may be changing on a regular cadence.</st>
    <st c="31723">This is where FOSS solutions are an excellent option.</st> <st c="31777">The</st>
    **<st c="31781">External Secrets Operator</st>** <st c="31806">(</st>**<st c="31808">ESO</st>**<st
    c="31811">) is a</st> <st c="31819">FOSS offering that enables this.</st> <st
    c="31852">The project is a Linux Foundation property.</st> <st c="31896">For a
    full overview of how it works,</st> <st c="31933">visit</st> [<st c="31939">external-secrets.io</st>](http://external-secrets.io)<st
    c="31958">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31959">Their reference architecture diagram is this, which is pretty
    much identical to our</st> <st c="32044">sidecar reference:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5: Reference architecture for ESO](img/Figure_7.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<st c="32114">Figure 7.5: Reference architecture for ESO</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32156">Essentially, secrets</st> <st c="32178">are stored in a password
    storage that lives outside the cluster, and then the operator is able to access
    them.</st> <st c="32289">The secret references exist as</st> **<st c="32320">Custom
    Resources</st>** <st c="32336">(</st>**<st c="32338">CRs</st>**<st c="32341">)
    that</st> <st c="32349">the operator knows how to interpret and action the retrieval
    for.</st> <st c="32415">If the secret changes, then the new secret is automatically
    applied by the operator to the cluster, meaning there is only ever one</st> **<st
    c="32546">source of truth</st>** <st c="32561">(</st>**<st c="32563">SOT</st>**<st
    c="32566">) for</st> <st c="32572">secrets in</st> <st c="32584">the IDP.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32592">Of course, the authentication secret to the storage must be supplied
    initially for the operator to work.</st> <st c="32698">This can pose a little
    bit of a Catch-22 as whoever sets up this operator will need the ability to provide
    it with credentials to access the off-cluster</st> <st c="32851">secret storage.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32866">ESO is especially useful in highly regulated environments where
    the contents of secrets, such as certificates and tokens, are rotated frequently.</st>
    <st c="33013">This allows for the rotation to happen at the source but automatically
    propagates out to the</st> <st c="33106">necessary environments.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33129">ESO is not the only open source project for secret management
    on a cluster; there are several others incubating in CNCF, and all are worth a
    review.</st> <st c="33279">Choosing the correct tool for your organization will
    need to come after weighing a list of pros and cons, but the pattern leveraged
    by these tools represents the best pr</st><st c="33448">actice you should seek</st>
    <st c="33472">to emulate.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33483">Sanitizing logs</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="33499">Any logs the platform generates should</st> <st c="33539">be sanitized.</st>
    <st c="33553">This is true for applications as well; however, that exceeds the
    boundaries of the platform.</st> <st c="33646">Logs are part of the data and,
    therefore, assets that the security of the platform needs to protect.</st> <st
    c="33747">In addition to the storage and transmission topic we covered previously,
    data sanitization is a key part of ensuring that even if a bad actor gains access
    to logging data, they cannot use it to further compromise the system.</st> <st
    c="33972">Code quality checking tools such as</st> <st c="34008">SonarQube (</st>[<st
    c="34019">https://docs.sonarsource.com/sonarqube/latest/</st>](https://docs.sonarsource.com/sonarqube/latest/)<st
    c="34066">) are excellent for detecting any sensitive data going to the wrong
    location, allowing for remediation of the issue before a security incident</st>
    <st c="34210">can occur.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34220">Logs that are sanitized are cleared of passwords or tokens in
    their body.</st> <st c="34295">For example, when logging requests to an API, how
    the request was authenticated (for example, bearer token) could be logged, but
    the actual token itself needs to be scrubbed.</st> <st c="34470">Where sensitive
    data is captured or stored, it should be salted</st> <st c="34534">and hashed.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34545">These platform logs</st> <st c="34566">should also be kept as
    clear as possible of</st> **<st c="34610">Personally Identifiable Information</st>**
    <st c="34645">(</st>**<st c="34647">PII</st>**<st c="34650">).</st> <st c="34654">This
    type of data is typically not required, so storing it creates an unnecessary risk</st>
    <st c="34741">surface area.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34754">Log sanitization also includes retention policies.</st> <st c="34806">Just
    as application data should be lifecycled and destroyed after</st> <st c="34872">its</st>
    **<st c="34876">time to live</st>** <st c="34888">(</st>**<st c="34890">TTL</st>**<st
    c="34893">) has expired, so too should log data.</st> <st c="34933">Logs become
    progressively less useful over time for the platform team as the platform continues
    to run, but the information contained within them can retain value where PII cannot
    be stripped out due to business needs.</st> <st c="35152">As such, keeping data
    around with value to bad actors presents an unnecessary risk that even the use
    of cold storage doesn’t mitigate.</st> <st c="35287">When to destroy data is ultimately
    a business decision, and data transformation could be done to further anonymize
    data so that only the PII is destroyed if there’s a compelling reason to</st>
    <st c="35474">keep platform metrics</st> <st c="35497">around forever.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="35512">Secure access</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="35526">We’ve covered RBAC a few times already.</st> <st c="35567">It’s
    explicitly named as one of the OWASP</st> *<st c="35609">Top Ten</st>*<st c="35616">,
    so it’s clearly important to the security posture of an organization for access
    controls to be correct.</st> <st c="35722">One method of ensuring this is to create
    service accounts.</st> <st c="35781">These accounts are non-human identity accounts
    that can be leveraged by workloads on the system.</st> <st c="35878">Just as with
    a human, the authentication of a service account requires a token, and that token
    should be regularly rotated.</st> <st c="36002">By splitting access types into
    human and non-human, you can leverage</st> <st c="36071">the</st> **<st c="36075">principle
    of least privilege</st>** <st c="36103">(</st>**<st c="36105">PoLP</st>**<st c="36109">)
    to ensure that a human or a workload has the permissions it needs but none of
    the permissions it</st> <st c="36209">does not.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="36218">Least privilege should not just apply to workloads; it should
    apply to people too.</st> <st c="36302">When evaluating what permissions users
    should have, there are a few things to keep in mind for their access.</st> <st
    c="36411">Next, we’ll define some high-level best practices for you</st> <st c="36469">to
    investigate:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="36484">Single-user, multi-RBAC:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="36509">User has independent RBAC roles for staging</st> <st c="36554">and
    production.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="36569">Staging should maintain parity with production so that actions
    performed in one environment will prepare the user to do the same in</st> <st
    c="36702">the other.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="36712">May have break-glass procedures to gain higher levels of access.</st>
    <st c="36778">This access, if it exists, must be auditable, meaning all the facts
    about it</st> <st c="36855">are logged.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="36866">GitOps for</st> <st c="36878">security :</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="36888">Can</st> <st c="36893">manage RBAC.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="36905">Reduces the need to grant direct access to</st> <st c="36949">the
    cluster.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="36961">Doe</st><st c="36965">s become</st> <st c="36975">a SPOF.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="36982">Centers</st> <st c="36991">security left.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="37005">Audit logs</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="37016">What is an audit log?</st> <st c="37039">An audit log is</st>
    <st c="37054">the record of actions the Kubernetes API server sees.</st> <st c="37109">This
    means every change in the Kubernetes cluster, both automated and human-initiated,
    from logins to Pod scheduling, is tracked in audit logs.</st> <st c="37253">If
    there’s identifying information, it’s going to be in your audit logs.</st> <st
    c="37326">This is because it is a critical path to know who did what action, where,
    and when, reviewing audit logs for both incident resolution and security</st>
    `<st c="37618">PUT</st>` <st c="37621">or</st> `<st c="37625">PATCH</st>` <st
    c="37630">– that payload should be logged as well.</st> <st c="37672">Credentials
    should not be logged as PII and should be omitted in the vast majority</st> <st
    c="37755">of cases.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37764">Leveraging audit logs</st> <st c="37786">to determine anomalous
    behaviors can be done with some base-level observability implementations and corresponding
    alerting.</st> <st c="37911">When defining the platform, you should have come
    up with user stories and critical user journeys.</st> <st c="38009">In these exercises,
    you looked at what your users will do and expect to be successful with.</st> <st
    c="38101">But did you look at what your users would not do or should not do and
    expect to</st> <st c="38181">be successful?</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38195">Behaviors found in audit logs that defy the norms of the platform
    users are the simplest way to define alerts around potential anomalies.</st> <st
    c="38334">An example of this would be a very high number of</st> `<st c="38384">403</st>`
    <st c="38387">errors or a significant number of requests from an IP address outside
    of a</st> <st c="38462">specific</st> **<st c="38472">Classless Inter-Domain Routing</st>**
    <st c="38502">(</st>**<st c="38504">CIDR</st>**<st c="38508">) range.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38517">Other items automated detection might look for include</st> <st
    c="38573">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38587">Detecting unusual or invalid user agents</st> <st c="38629">or
    bots</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="38636">Multiple user sign-ins or sessions from</st> <st c="38677">different
    locations</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="38696">In general, events that violate known norms should probably reach
    human eyes automatically.</st> <st c="38789">However, most of these still require
    human review as they do not always indicate a security incident.</st> <st c="38891">They
    may indicate a software issue or an event that is necessary but was not factored
    in when the alerts were designed.</st> <st c="39011">Alerts should not become
    overly noisy.</st> <st c="39050">False signals can cause harm, especially when
    they page your team in the middle of the night.</st> <st c="39144">If false signals
    fire too often, they may soon be ignored by engineers looking to maintain a lower</st>
    <st c="39243">cognitive load.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39258">We’ve covered the basics of security so far and have a long way
    to go.</st> <st c="39330">Now that we’ve learned about so</st><st c="39361">me
    general topics, let’s get</st> <st c="39391">more specific.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39405">Looking at SBOM practices</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="39431">Open source tools, libraries within programming languages, package
    managers, and container images are the building blocks of the modern application
    and also introduce a unique set of challenges when it comes to securing</st> <st
    c="39651">your</st> **<st c="39657">software supply chain</st>**<st c="39678">.
    This is what we affectionately call the supply chain security conundrum.</st>
    <st c="39753">How do you maintain a good security posture when you don’t own all
    of the code that needs to</st> <st c="39846">be secured?</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39857">If we represent the supply chain visually, it’ll have some unknown
    people (we’ll call them actors) contributing to an open source dependency and
    another likely known actor contributing to your code base more directly.</st>
    <st c="40076">This is an extremely simplified drawing (there are probably 10 boxes
    missing here) but it should help you get</st> <st c="40186">the point:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6: Example supply chain](img/Figure_7.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<st c="40263">Figure 7.6: Example supply chain</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40295">Your software supply chain is everything and everyone is involved
    in releasing your app.</st> <st c="40385">When we look at how to maintain security,
    we have to break down our application and infrastructure topology.</st> <st c="40494">An</st>
    <st c="40496">SBOM is an important tool for tracking and managing the risks of</st>
    <st c="40562">a project.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40572">After the US government issued an executive order in 2021, these
    documents became mandatory for many companies.</st> <st c="40685">The essential
    premise is that a company knows what the software they’re building depends on
    and where the dependencies of the software originate.</st> <st c="40831">An SBOM
    is generated at the time a piece of software and all of its dependencies are bundled
    up for release.</st> <st c="40940">While not strictly necessary for every company,
    these represent a best practice as, when paired with a scanning tool, they can
    assist with audits and understanding the surface area of a risk if a Day 0 vulnerability
    such as Heartbleed or Log4j is</st> <st c="41187">found again.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41199">An SBOM</st> <st c="41207">is usually generated at build time
    in the CI pipeline.</st> **<st c="41263">Syft</st>** <st c="41267">is a</st> <st
    c="41272">pretty common SBOM generation tool and often is paired with the scanner</st>
    **<st c="41345">Grype</st>** <st c="41350">since</st> <st c="41356">they’re both
    free open source tools from Anchore.</st> <st c="41407">Cisco’s Open Source Program
    Office also recently released an</st> <st c="41467">SBOM tool called</st> **<st
    c="41485">KubeClarity</st>** <st c="41496">(</st>[<st c="41498">https://github.com/openclarity/kubeclarity</st>](https://github.com/openclarity/kubeclarity)<st
    c="41540">), which can use multiple SBOM and scanner tools in concert to provide
    the most complete picture of the software and its surface area</st> <st c="41675">for
    risks.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41685">SBOM generation tools are still fairly new, and so they’re not
    yet perfect.</st> <st c="41762">It’s possible for one tool to miss a package the
    other tool detects and vice versa.</st> <st c="41846">For understanding your security
    posture, less is not more, so gaining the most complete picture possible is the
    most important part of staying on top</st> <st c="41996">of security.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42008">How to use an SBOM</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="42027">An SBOM is</st> <st c="42038">more than just a checkmark on a
    list of requirements from a customer or the US government.</st> <st c="42130">It’s
    also an effective tool for vulnerability detection and response.</st> <st c="42200">In</st>
    *<st c="42203">Figure 7</st>**<st c="42211">.6</st>*<st c="42213">, we show how
    your application likely inherits code, and therefore vulnerabilities from dependencies
    and libraries it may leverage that are open source.</st> <st c="42366">Those dependencies
    are difficult to track, which is why an SBOM can act as the ledger for your system.</st>
    <st c="42469">This means that down the line, if a significant security vulnerability
    is announced, you can quickly cross-reference that announcement with your SBOM
    and understand in a timely manner if your software is vulnerable.</st> <st c="42685">This
    can be done by looking at an already created report and also by simply running
    the report again.</st> <st c="42787">If your report generation is paired with
    scanning, the scanning tool should pick up on the new vulnerability as soon as
    it’s entered into the critical</st> <st c="42938">vulnerability registry.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42961">Getting an SBOM for a GitHub repo</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="42995">An easy way to see an</st> <st c="43018">SBOM for a GitHub repo
    is to curl the GitHub API for the repo you want to investigate.</st> <st c="43105">For
    the sake of a quick example, we’ll walk through how to do this and how to interpret</st>
    <st c="43193">the results.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43205">GitHub SBOMs</st> <st c="43218">are in a format known as SPDX;
    you can learn</st> <st c="43264">more about that format</st> <st c="43287">here:</st>
    [<st c="43293">https://spdx.github.io/spdx-spec/v2.3/introduction/</st>](https://spdx.github.io/spdx-spec/v2.3/introduction/)<st
    c="43344">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43345">To get an SBOM, use the following code block in your terminal
    to curl the GitHub API.</st> <st c="43432">You do not need to authenticate for
    this to work, although you can do so.</st> <st c="43506">Replace the</st> `<st
    c="43518">$REPOSITORY</st>` <st c="43529">and</st> `<st c="43534">$OWNER</st>`
    <st c="43540">variables with your desired repo.</st> <st c="43575">For the sake
    of the example, we’ll look at the</st> `<st c="43622">tag-security</st>` <st c="43634">CNCF
    repository:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="43814">The JSON return will be somewhat lengthy, so let’s just look at
    a subset of the SBOM we’ve received from</st> <st c="43920">curling (</st>[<st
    c="43929">https://api.github.com/repos/cncf/tag-security/dependency-graph/sbom</st>](https://api.github.com/repos/cncf/tag-security/dependency-graph/sbom)<st
    c="43998">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: <st c="44409">At the top of the output, you have some basics about the SBOM,
    including how it was generated, when, and pertinent data licensing.</st> <st c="44541">This
    just tells you about the repo you’ve analyzed at a high level.</st> <st c="44609">The
    next section is</st> `<st c="44629">packages</st>`<st c="44637">, which contains
    all the software dependencies it</st> <st c="44686">includes and</st> <st c="44700">the
    relationships:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <st c="45246">Looking at just</st> <st c="45262">one of the packages in the
    SBOM, you have the package information, the version in use, and licensing and
    copyright information.</st> <st c="45391">The MIT license means that the package
    is open source, but the copyright information indicates who has been maintaining
    the package and, essentially, prevents the name of that package from being used
    by another software project.</st> <st c="45620">IBM explains the reason for copyright
    here:</st> [<st c="45664">https://www.ibm.com/topics/open-source</st>](https://www.ibm.com/topics/open-source)<st
    c="45702">. Also included in the output are the label supplier and download location.</st>
    <st c="45778">For these two fields in this example, you’ll find the metadata says</st>
    `<st c="45846">NOASSERTION</st>`<st c="45857">. As explained in the SPDX documentation
    (</st>[<st c="45899">https://spdx.github.io/spdx-spec/v2.3/package-information/</st>](https://spdx.github.io/spdx-spec/v2.3/package-information/)<st
    c="45958">), this should be used in the</st> <st c="45989">following circumstances:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="46013">The SPDX document creator has attempted to but cannot reach a
    reasonable</st> <st c="46087">objective determination</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="46110">The SPDX document creator has made no attempt to determine</st>
    <st c="46170">this field</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="46180">The SPDX document creator has intentionally provided no information
    (no meaning should be implied by</st> <st c="46282">doing so)</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="46291">For other packages, these fields may have additional data about
    the package or may also have no assertions.</st> <st c="46400">After the list
    of packages, in the same order are the relationships of the packages to</st> <st
    c="46487">the repository:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <st c="46692">This is</st> <st c="46700">pretty straightforward in this example
    as it’s saying the primary element, the tag security repo, depends on the</st>
    `<st c="46814">npm:@babel/helper-validator-identifier</st>` <st c="46852">package
    at version</st> `<st c="46872">7.22.20</st>`<st c="46879">. Additional metadata
    could be supplied by the SBOM creator but hasn’t been in this case.</st> <st c="46969">More
    information on these relationships can be found</st> <st c="47022">here:</st>
    [<st c="47028">https://spdx.github.io/spdx-spec/v2.3/relationships-between-SPDX-elements/#111-relationship-field</st>](https://spdx.github.io/spdx-spec/v2.3/relationships-between-SPDX-elements/#111-relationship-field)<st
    c="47125">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="47126">Again, an SBOM is a pretty simple tool; it creates a ledger that
    tallies what an application or codebase is composed of.</st> <st c="47248">By
    itself, it doesn’t do much, but as part of a toolchain, it goes a long way to
    understanding your systems and the surface area of risk for vulnerabilities their</st>
    <st c="47411">dependencies present.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="47432">Keeping on top of vulnerabilities</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="47466">Software vulnerabilities</st> <st c="47492">are typically called</st>
    **<st c="47513">Common Vulnerabilities and Exposures</st>**<st c="47549">, or</st>
    **<st c="47554">CVEs</st>**<st c="47558">. The US</st> **<st c="47567">Department
    of Homeland Security</st>** <st c="47598">(</st>**<st c="47600">DHS</st>**<st
    c="47603">) maintains a</st> <st c="47618">public CVE registry (</st>[<st c="47639">https://www.cve.org</st>](https://www.cve.org)<st
    c="47659">) where you can keep abreast of what exposures are known, and this can
    be referenced against your software and applications to check for known CVEs and
    your exposure.</st> <st c="47827">While a platform team can build a bespoke service
    to determine if there are CVEs in the systems, there’s no need to do this as plenty
    of FOSS tools exist to do this</st> <st c="47992">for you.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48000">You can check for CVEs in GitHub via</st> <st c="48038">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="48052">Dependabot</st>**<st c="48063">, a</st> <st c="48066">GitHub
    bot that scans your repo and raises pull requests to proactively address CVE by
    bumping packages to known</st> <st c="48180">safe versions</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="48193">Snyk</st>**<st c="48198">, which</st> <st c="48206">validates
    pull requests to ensure they do not introduce any</st> <st c="48266">new vulnerabilities</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="48285">CodeQL</st>**<st c="48292">, similar to</st> <st c="48305">Snyk,
    evaluates the content of pull requests to ensure they do not</st> <st c="48372">introduce
    vulnerabilities</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="48397">For keeping track of vulnerabilities during runtime, regular scanning
    of an image registry such as Harbor or a tool such as Trivy targeting your most
    critical environments (minimally) will help you to keep on top of vulnerabilities
    in</st> <st c="48633">your environment.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48650">Since SBOM generation and vulnerability detection are usually
    part of a CI pipeline, let’s move on to discuss the rest of the pip</st><st c="48780">eline
    and how you can ensure security in your</st> <st c="48827">CI/CD process.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48841">Understanding pipeline security – what you have to consider to
    secure your CI/CD pipelines</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="48932">Assuming the platform team does have influence or jurisdiction
    over GitHub or other source control repositories leveraged by the company, then
    the security of the CI/CD pipelines</st> <st c="49112">end to end becomes a major
    part of the IDP</st> <st c="49155">security posture.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="49172">Securing your repo</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="49191">The security of the code repository</st> <st c="49227">is an excellent
    example of security to the left.</st> <st c="49277">By enforcing security norms
    early and baking them into the way of working on a project, an organization can
    prevent issues from arising down the line.</st> <st c="49428">A secured repository
    leverages several</st> <st c="49467">best practices:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="49482">Write protect</st>** **<st c="49497">main branches</st>**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="49510">You can use private Git repositories and self-hosted Git if you
    need</st> <st c="49580">extra security</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="49594">Require</st>** **<st c="49603">signed commits</st>**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="49617">This validates the identity of the</st> <st c="49653">commit author</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="49666">Pre-commit webhooks</st>**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="49686">Used to validate that no secrets are</st> <st c="49724">accidentally
    committed</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="49746">Mandatory</st>** **<st c="49757">peer review</st>**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="49768">Including signoff by</st> <st c="49790">code owners</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="49801">Automated validation of</st>** **<st c="49826">pull requests</st>**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="49839">Dependency</st> <st c="49851">security scans</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="49865">Tests – should include validation of security</st> <st c="49912">and
    access</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="49922">Continuous scanning</st>**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="49942">Scans</st> <st c="49949">for accidental commits of passwords,
    tokens, or other</st> <st c="50003">secret data</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="50014">This list is by no means exhaustive but should start any organization
    off on the best path for ensuring th</st><st c="50121">eir source code is secured
    against bad actors and</st> <st c="50172">human error.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="50184">Securing GitOps</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="50200">GitOps was covered in</st> <st c="50222">depth in</st> [*<st c="50232">Chapter
    5</st>*](B31164_05.xhtml#_idTextAnchor255)<st c="50241">, so we’ll simply review
    it very briefly due to its importance for platform security.</st> <st c="50327">GitOps
    is loosely defined as an automated process that validates the SOT (Git or other
    version control), which defines the desired state and the actual state match.</st>
    <st c="50492">It does this through one-time deployments or changes but also through
    an automated reconcile loop that actively checks for changes in the desired state
    and acts upon the actual state to make it match, or detects a change in the actual
    state and makes changes on the system to put it back to the desired state.</st>
    <st c="50802">The current largest open source GitOps project is Argo CD, a CD
    tool that is a property of CNCF.</st> <st c="50899">Within Argo CD and other GitOps
    paradigms, there are a few best practices to note for guaranteeing a more</st>
    <st c="51005">secure environment.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="51024">For GitOps, there are two models of propagating changes; one is
    a push model and the other is a pull model.</st> <st c="51133">In a push model,
    the GitOps system receives changes as pushes to its API endpoint.</st> <st c="51216">It
    goes without saying that those pushes should be properly authenticated, but we’ll
    say it anyway to ensure there’s no confusion.</st> <st c="51347">After receiving
    the push, the GitOps system processes the changes and then takes action.</st>
    <st c="51436">That action is probably promoting new software packages to production,
    but it could also be configuration changes.</st> <st c="51551">However, the source
    of the push is not typically validated with this model, and Argo CD doesn’t have
    a configuration to validate it.</st> <st c="51684">This creates an attack vector
    because if the credentials are compromised, a bad actor can push changes through
    the CD system, which can open up additional</st> <st c="51839">entry points.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="51852">A pull method is just the opposite.</st> <st c="51889">The GitOps
    system reaches out to the SOT using its authentication and then reads the changes
    in from the endpoint.</st> <st c="52004">Since the source is a known safe source,
    the application of those changes via automation is considered a safe action.</st>
    <st c="52122">This is not to say a pull model isn’t without risks.</st> <st c="52175">Both
    push and pull models can be subjected to MITM attacks, but in a properly secured
    network with the correct cryptographic implementations, these risks should be</st>
    <st c="52339">significantly limited.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="52361">When your GitOps system is taking action, it should do so in the
    most secure way.</st> <st c="52444">We’ve already discussed the uses and value
    of a service account, so it should come as no surprise that your GitOps systems
    should be expected to leverage service accounts.</st> <st c="52616">Those service
    accounts should also have the minimum amount of access possible while still being
    able to accomplish the goals of the GitOps implementation in</st> <st c="52773">the
    platform.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="52786">Security and</st> <st c="52800">GitOps may be an important factor
    in selecting the GitOps working model for your IDP, and we hope these guidelines
    are useful when building out GitOps for</st> <st c="52955">your organization.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="52973">Now that we’ve covered securing the delivery of the application,
    let’s build off</st> <st c="53054">our secure foundation and take a look at</st>
    <st c="53096">application security.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="53117">Understanding application security – setting and enforcing policies</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="53185">Security is a moving target, and as technology advances, attack
    vectors increase and attackers become more and more sophisticated.</st> <st c="53317">Due
    to this, the process and ceremonies the team maintains around security are even
    more important than technology itself.</st> <st c="53440">This is not because
    technology doesn’t matter but because good discipline and the habit of a strong
    process allow technologies to plug in and out as the</st> <st c="53593">industry
    evolves.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="53610">One aspect of good discipline for security is maintaining accurate
    documentation and architectural diagrams.</st> <st c="53720">If a significant
    change is made to the application architecture, then that can change the risk
    surface areas and attack vectors.</st> <st c="53849">For example, an undocumented
    or underdocumented dependency on a library or a network port could result in expos</st><st
    c="53960">ure to a vulnerability that may be more difficult</st> <st c="54011">to
    determine.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="54024">Foundational application security</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="54058">In</st> [*<st c="54062">Chapter 5</st>*](B31164_05.xhtml#_idTextAnchor255)<st
    c="54071">, we discussed</st> <st c="54085">building and delivering images and
    artifacts.</st> <st c="54132">The described method of semantic versioning for
    an application represents a best practice for creating software but not for using
    it.</st> <st c="54266">When a release is built using Git for source control for
    an application, the release, in addition to a human-defined version, actually
    gets a SHA-256 signature thanks to the modern functionality of Git.</st> <st c="54469">Unlike
    the version numbers, which can be reused, the</st> **<st c="54522">Secure Hash
    Algorithm</st>** <st c="54543">(</st>**<st c="54545">SHA</st>**<st c="54548">)
    is a</st> <st c="54555">signature for that exact build of the software and it
    is always unique.</st> <st c="54628">As such, it’s important for security best
    practices to use the full SHA address for the images used by the platform as opposed
    to the</st> <st c="54762">image version.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="54776">Here’s an example of the</st> `<st c="54802">docker pull</st>`
    <st c="54813">command using the image version</st> <st c="54846">and SHA:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: <st c="54964">In addition to image versions, there is another identification
    method known as</st> `<st c="55185">latest</st>`<st c="55191">, but they can be
    pretty much anything since there are only industry norms and no technical limitations.</st>
    <st c="55296">Since a tag can be later re-pointed to any release image, it’s not
    a secure way to pull in a dependency.</st> <st c="55401">Risks of using floating
    tags</st> <st c="55429">include</st> <st c="55438">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="55452">Unintentional</st> <st c="55467">and untested/vetted updates to</st>
    <st c="55498">application components.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="55521">Limits the ability to immediately know what’s running where</st>
    <st c="55582">and when.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="55591">Unvetted external software packages can automatically propagate,
    creating exploitable backdoors for bad actors.</st> <st c="55704">This is common
    if a Pod restarts and</st> `<st c="55741">latest</st>` <st c="55747">is used in
    the Dockerfile for</st> <st c="55778">the Pod.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="55786">There are a few reasons to use a floating tag or to use a semantic
    version release tag instead of a precise SHA.</st> <st c="55900">It’s easier to
    test the continued supportability of a dependency if you’re testing regularly
    against the latest build.</st> <st c="56019">The flexibility that comes from always
    using the latest version of a known good package may be desirable in a development
    environment and then could be pinned to a precise version tag or SHA when moving
    to production.</st> <st c="56237">Validating against floating tags can allow a
    team to be more responsive to security vulnerabilities as well, so a risk assessment
    of each dependency and a policy should be set to determine what the norms of the
    application</st> <st c="56460">will be.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="56468">A typical way of setting a policy would be to use tools such as
    open source policy agents to catch any deviation from the defined norms and prevent
    those deviations from entering restricted</st> <st c="56659">environments.</st>
    **<st c="56673">Open Policy Agent</st>** <st c="56690">(</st>**<st c="56692">OPA</st>**<st
    c="56695">) and</st> **<st c="56702">Kyverno</st>** <st c="56709">are both open
    source options that are free to use.</st> <st c="56761">For both tools, you leverage</st>
    **<st c="56790">Policy as Code</st>** <st c="56804">(</st>**<st c="56806">PaC</st>**<st
    c="56809">), which is</st> <st c="56821">easily reviewed and kept in</st> <st
    c="56850">source control.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="56865">OPA and Kyverno are two examples of OSS that might be leveraged
    for</st> <st c="56933">security, but they’re not the only tools in the open</st>
    <st c="56987">source ecosystem.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="57004">FOSS for platform security and how to use it</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="57049">FOSS projects, both</st> <st c="57070">within and outside of the
    Linux Foundation or CNCF, exist in great abundance to help you manage the security
    posture of your platform.</st> <st c="57205">Previously mentioned projects such
    as Harbor and Trivy are two among a</st> <st c="57276">large number.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="57289">When comparing your security needs, such as ensuring the OWASP</st>
    *<st c="57353">Top Ten</st>* <st c="57360">is addressed for available open sourc</st><st
    c="57398">e projects, you’ll find a tool to help you address each item on</st>
    <st c="57463">the list.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="57472">Patterns and tools for managing security</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="57513">The platform can only do so much to manage the security posture
    of the company.</st> <st c="57594">As such, it needs to provide a strong foundation
    for security by providing useful integrations, taking a security-first approach,
    and, as we discussed in previous chapters, being open to contributions from the
    developer community it supports.</st> <st c="57837">When you’ve determined what
    levels of compliance are necessary, then you can start looking at what mistakes
    might lead to a failure in your compliance and security posture by conducting
    process-based security reviews and technology-based</st> <st c="58075">security
    reviews:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="58092">A</st> **<st c="58095">process-based review</st>** <st c="58115">would</st>
    <st c="58121">mean that a person is reviewing and assessing compliance and security.</st>
    <st c="58193">This could be an audit done to seek certification, or it could be
    an internal review conducted regularly to ensure best practices are still in effect
    and guidelines are up</st> <st c="58365">to date.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="58373">A</st> **<st c="58376">technology-based review</st>** <st c="58399">would</st>
    <st c="58406">leverage software to automatically and likely continuously review
    and validate security and compliance.</st> <st c="58510">SBOMs and CVE scanning
    are examples of technology-based reviews of software builds, and policy engines
    such as OPA or Kyverno can help with the automated governance of the IDP.</st>
    <st c="58687">Technological solutions can also go the additional step of helping
    to detect anomalies and events that may represent a security incident.</st> <st
    c="58825">The CNCF project</st> **<st c="58842">Falco</st>** <st c="58847">(</st>[<st
    c="58849">https://falco.org</st>](https://falco.org)<st c="58866">) does this.</st>
    <st c="58880">It has several key</st> <st c="58898">features, but</st> <st c="58913">importantly,
    it detects if access levels are escalated, which may represent a bad security
    and compliance posture or could represent a bad actor who has gained access to</st>
    <st c="59083">the system.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="59094">For any company looking to demonstrate a level of security and
    compliance in accordance with a governing framework, that compliance framework
    will help to define the frequency of the process execution and pair</st> <st c="59305">that
    guidance with regular audits to help ensure the platform</st> <st c="59367">isn’t
    slipping.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="59382">What would our fictitious company do?</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="59420">Our fictitious company Financial One ACME is a long-standing financial
    institution that has been working on its cloud-native transformation in order
    to remain competitive with younger Fintech companies.</st> <st c="59624">As a
    financial institution, they have an inherent goal to minimize risk.</st> <st c="59697">They
    are also subject to regulatory restrictions, including</st> <st c="59757">PCI
    DSS.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="59765">Additionally, as they are a bank and must protect both monetary
    assets and customer data, they have modeled potential threats to their systems.</st>
    <st c="59910">Out of a long list of physical and non-physical risks, many security
    action items came to the platform team to be addressed during the implementation
    of the IDP.</st> <st c="60072">These items have likely been addressed already,
    but since this IDP is a greenfield application (or brand new), it needs to address
    the compliance</st> <st c="60218">requirements afresh.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60238">One item that came to the platform team for implementation was
    guaranteeing that all new versions of their software bundle were</st> <st c="60367">properly
    secured.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60384">Properly secured means</st> <st c="60408">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60422">Signed</st> <st c="60430">and validated</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="60443">Stored securely</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="60459">Retrieved securely</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="60478">Strict</st> <st c="60486">change control</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="60500">Audit trail</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="60512">The platform team took the steps previously outlined to secure
    their repository and their GitOps system, but those weren’t enough to satisfy
    this requirement.</st> <st c="60672">For this reason, the platform team decided
    to leverage an internal image registry where all software commits and packages
    are signed.</st> <st c="60806">The CI/CD pipelines create images based on those
    artifacts and place them in the private registry, where platform applications</st>
    <st c="60933">consume them.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60946">The image registry selection would look like one of a</st> <st
    c="61001">few options:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="61013">Pay for an image registry vendor that helps them maintain their
    security posture via scanning and provides them with</st> <st c="61130">trusted</st>
    **<st c="61139">Universal Base</st>** **<st c="61154">Images</st>** <st c="61160">(</st>**<st
    c="61162">UBIs</st>**<st c="61166">)</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="61168">Host their own image registry such as</st> <st c="61206">Harbor,
    a CNCF-graduated project with an image registry that</st> *<st c="61267">signs</st>*<st
    c="61272">,</st> *<st c="61274">stores</st>*<st c="61280">, and</st> *<st c="61286">scans</st>*
    <st c="61291">container images (</st>[<st c="61310">https://goharbor.io/</st>](https://goharbor.io/)<st
    c="61331">) that they would populate with</st> <st c="61364">approved images</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="61379">If they are using OpenShift, there is already an image registry
    as part of the cluster topology, and the platform team would supplement it with</st>
    <st c="61524">scanning tools</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '<st c="61538">They’ve further added an admission webhook to ensure that no
    container is based on an unapproved image.</st> <st c="61643">This use case is
    very straightforward: a validating webhook checks to see if the container image
    matches the defined expectations.</st> <st c="61774">If not, the workload is rejected
    and the Pod will not start.</st> <st c="61835">While the team could build their
    own admission webhook service, they would likely choose OPA.</st> <st c="61929">While
    it is not the only open source project to provide this functionality, it is the
    only graduated project, making it the safest choice to use</st> <st c="62074">in
    production.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="62088">Sysdig</st> <st c="62095">made an open source version of such
    a webhook that also mutates or modifies Pod configurations to have their images
    use the full image SHA versus a release tag, which can be found here:</st> [<st
    c="62282">https://github.com/sysdiglabs/opa-image-scanner</st>](https://github.com/sysdiglabs/opa-image-scanner)<st
    c="62329">. Both of these webhooks represent absolute best practices for security
    and compliance and are a smart move for an easy security win for any platform</st>
    <st c="62479">engineering team.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="62496">However, as important as these restrictions are, they can negatively
    impact innovation by removing flexibility from the IDP capabilities.</st> <st
    c="62635">For this reason, the platform team has decided to limit these restrictions
    to the production environment.</st> <st c="62741">Doing so allows the development
    teams to experiment in their dev environments without risking anything that shouldn’t
    accidentally make it into</st> <st c="62885">production environments.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="62909">One strategy to manage dependencies where you don’t want to pull
    source code from untrusted locations is to use vendoring.</st> <st c="63033">Vendoring
    is the process of actually copying the code from the open source library you’d
    otherwise import into your code base.</st> <st c="63160">During vendoring, changes
    may be made to that code to</st> <st c="63213">make it more secure, such as enabling</st>
    **<st c="63252">Federal Information Processing Standards</st>** <st c="63292">(</st>**<st
    c="63294">FIPS</st>**<st c="63298">) mode.</st> <st c="63307">FIPS compliance
    specifies the strength of the encryption of</st> <st c="63367">data over</st>
    **<st c="63377">Secure Socket Layer</st>** <st c="63396">(</st>**<st c="63398">SSL</st>**<st
    c="63401">) and is generally a</st> <st c="63423">best practice.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="63437">Another action item that might come to the platform team would
    be to be the first point of contact in the event of a suspected security breach.</st>
    <st c="63582">This means having a way to immediately react to reports of an issue.</st>
    <st c="63651">Since the platform is responsible for so much of the company infrastructure,
    from development to production capabilities, the team will need to be able to
    quickly engage in order to mitigate damages caused by a</st> <st c="63862">bad
    actor.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="63872">Such</st> **<st c="63878">IR plans</st>** <st c="63886">(</st>**<st
    c="63888">IRPs</st>**<st c="63892">) should</st> <st c="63901">be crafted and
    regularly tested.</st> <st c="63935">Similar to a</st> **<st c="63948">disaster
    recovery plan</st>** <st c="63970">(</st>**<st c="63972">DRP</st>**<st c="63975">),
    regular</st> <st c="63986">testing of the plan and the ability to respond to a
    real security breach can</st> <st c="64064">mitigate damages.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="64081">Early detection is another key capability required by the platform.</st>
    <st c="64150">Analysis of audit logging is key to understanding who got in (or
    whose credentials were compromised) and what was done once the bad actor gained
    access to the system.</st> <st c="64317">Audit logs can also be used for proactive
    detection as they can be leveraged</st> <st c="64393">by</st> **<st c="64397">machine
    learning</st>** <st c="64413">(</st>**<st c="64415">ML</st>**<st c="64417">) models
    for anomaly detection, which can highlight a security breach faster than a human
    can find it.</st> <st c="64521">Additionally, using a highly observable cloud-native
    networking solution such as Cilium can help to identify and track bad actors.</st>
    <st c="64652">While some hardcoded observability implementations can attain the
    same outcomes, it does need to be manually kept and maintained, whereas ML models
    may have some more inherent flexibility due to their</st> <st c="64853">self-learning
    nature.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="64874">Neither method is perfect, so when determining how to implement
    automation around threat detection, an organization will have to make a judgment
    call on benefits, trade-offs, and team capabilities.</st> <st c="65073">Choosing
    the path forward here for our fictitious company would be a build-versus-buy conversation
    that could very well result in a buy decision due to the size and complexity of
    the task and the highly secured environment they’re meant</st> <st c="65310">to
    maintain.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="65322">Speaking of that highly secured environment, in order to demonstrate
    to an auditor the PCI compliance of the organization with the new IDP, our platform
    team will need to be able to produce a drawing of the network architecture and
    explain the contents of that drawing to</st> <st c="65595">the auditor.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="65607">Any compliance auditor will want to verify that the dev and production
    environments are sufficiently isolated, whether that’s physically true or via</st>
    <st c="65757">networking implementations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="65784">Finally, while the platform team at Financial One ACME will be
    making sure they follow all known best practices for build time, they’ll implement
    tools to ensure their runtime is equally as secured.</st> <st c="65984">It’s very
    likely that the only users with permissions to create Pods in the production environment
    would be those service account users, ensuring that Git remains the SOT, and GitOps
    can be leveraged to codify the platform’s</st> <st c="66209">security posture.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="66226">These example responses cover only a subset of the security and
    compliance that would be required for a financial institution such as a bank;
    they’re also likely to be subjected to additional government regulations, which
    would require even further security and compliance risk mitigations.</st> <st
    c="66518">Just as your team will need to, our fictitious company would need to
    address every line item within the compliance frameworks they’re subject to and,
    most</st> <st c="66673">importantly, create collaborative ceremonies to maintain
    the best security</st> <st c="66748">they can.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="66757">Summary</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="66765">To conclude, security and compliance is a vast space with many
    experts who have published dedicated works on the subject.</st> <st c="66888">This
    chapter should not be taken as being all-encompassing but should have you started
    down the correct path to define and execute a cybersecurity strategy for your
    IDP.</st> <st c="67058">It’s important to know how to keep track of vulnerabilities,
    and have ceremonies and tooling set up within your organization to catch and surface
    vulnerabilities in the IDP and the applications</st> <st c="67252">it hosts.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="67261">While security and flexibility are not natural partners, smart
    implementations that focus on critical security needs without impeding innovation
    are the key to providing the developers with the tools they need to be successful
    and the protections they need to</st> <st c="67522">be secure.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="67532">Remember – the cost of a security incident can be astronomically
    expensive and could even result in bankruptcy or trials.</st> <st c="67655">While
    log storage and other security requirements can cost, those costs can be managed
    and will never cost more than failing to secure your systems.</st> <st c="67804">For
    more on how to manage the costs of your platform, let’s continue to</st> [*<st
    c="67876">Chapter 8</st>*](B31164_08.xhtml#_idTextAnchor430)<st c="67885">.</st>
  prefs: []
  type: TYPE_NORMAL
