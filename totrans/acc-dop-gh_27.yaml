- en: '*Chapter 21*: Migrating to GitHub'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第21章*：迁移到GitHub'
- en: If you are not a start-up, then you always have existing tools and processes
    that must be considered when moving to a new platform. In this chapter, we will
    discuss different strategies related to migrating to GitHub from different platforms.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不是初创公司，那么在迁移到新平台时，必须考虑现有的工具和流程。本章将讨论从不同平台迁移到GitHub的不同策略。
- en: 'In this chapter, we will cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Picking the right migration strategy
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择正确的迁移策略
- en: Achieving compliance with low-fidelity migrations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现低保真迁移的合规性
- en: Synchronizing requirements for a smooth transition
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同步要求以确保顺利过渡
- en: Migrating from Azure DevOps with the GitHub Enterprise Importer
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GitHub企业导入工具从Azure DevOps迁移
- en: Migrating pipelines using Valet
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Valet迁移管道
- en: Picking the right migration strategy
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择正确的迁移策略
- en: 'When migrating to a new platform, you have different options:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当迁移到新平台时，你有不同的选择：
- en: '**High-fidelity migration**: You try to migrate as much as possible to the
    new platform.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高保真迁移**：你尽可能多地将内容迁移到新平台。'
- en: '**Clean cut-over migration**: You only migrate the bare minimum that is necessary
    to start working on the new platform.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**彻底切换迁移**：你只迁移开始使用新平台所需的最少内容。'
- en: '**High-fidelity migrations** to complex platforms have different problems.
    The main problem is that there is not a 1-to-1 mapping of all entities and that
    things just work differently on different platforms. By migrating everything over,
    you influence the way people use the new system. The data is optimized for the
    old system using old processes. Also, the time, costs, and complexity involved
    in a high-fidelity migration are not linear. The more you try to get to 100% fidelity,
    the more complex and expensive it gets, and 100% is normally not achievable at
    all (see *Figure 21.1*).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**高保真迁移**到复杂平台面临不同的问题。主要问题是并非所有实体都有一对一的映射，并且不同平台的工作方式不同。通过迁移所有内容，你会影响人们使用新系统的方式。数据是根据旧系统和旧流程进行优化的。此外，高保真迁移所涉及的时间、成本和复杂性并非线性关系。你越是想实现100%的保真度，复杂性和成本就越高，而100%通常是无法实现的（见*图21.1*）。'
- en: '![Figure 21.1 – Complexity, time, and costs for different levels of fidelity'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![图21.1 – 不同保真度水平的复杂性、时间和成本'
- en: '](img/B17827_21_001.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_21_001.jpg)'
- en: Figure 21.1 – Complexity, time, and costs for different levels of fidelity
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.1 – 不同保真度水平的复杂性、时间和成本
- en: '**Clean cut-over migrations** are optimal if you want to achieve a change in
    behavior and use the new platform optimally. In the case study in this book, I
    assume a clean cut-over migration: the teams start on the new platform and only
    move over what is absolutely necessary.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**彻底切换迁移**如果你想实现行为上的变化并最优化地使用新平台，则是最理想的选择。在本书的案例研究中，我假设采用的是彻底切换迁移：团队们从新平台开始，仅迁移绝对必要的内容。'
- en: The reality is somewhere in between these two extremes. If you want to accelerate
    software delivery, you start with a clean cut-over migration, but to scale in
    your enterprise and drive adoption, you provide some migration paths and tooling
    for the teams to move over fast. And there will be some dormant projects/products
    that you may want to archive for later reactivation. Keep all the old systems
    running or just migrate them over.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现实情况介于这两种极端之间。如果你希望加速软件交付，你应该从彻底切换迁移开始，但为了在企业中扩大规模并推动采纳，你需要为团队提供一些迁移路径和工具，使其能够快速迁移。同时，会有一些暂时搁置的项目/产品，你可能希望将其归档，以便以后重新激活。你可以保持所有旧系统的运行，或者直接将其迁移过去。
- en: Achieving compliance with low-fidelity migrations
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现低保真迁移的合规性
- en: One concern that many customers have is **end-to-end traceability** for **compliance**
    reasons. In many highly-regulated industries, you have to provide end-to-end traceability
    for all requirements and final functional tests. The problem with low-fidelity
    migration is that you will get a cut in that traceability chain.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 许多客户关心的一个问题是**端到端可追溯性**，这是出于**合规性**的原因。在许多高度监管的行业中，你必须为所有要求和最终功能测试提供端到端的可追溯性。低保真迁移的问题在于，这会导致可追溯链条的中断。
- en: But that does not mean that the only solution is high-fidelity migration. You
    can still do a clean cut-over and keep the old systems in read-only mode running
    for as long as necessary. In the new system, you must achieve end-to-end traceability
    anyway. To stay compliant, you need a mapping of the old system identifiers to
    the new system for the requirements that span both systems.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不意味着唯一的解决方案是高保真度迁移。你仍然可以进行一次彻底的切换，并将旧系统保持在只读模式下运行，直到必要时为止。在新系统中，你无论如何都必须实现端到端的可追溯性。为了保持合规性，你需要将旧系统的标识符映射到新系统，涵盖两个系统的需求。
- en: In the case of an audit, you can provide reports from both systems – both the
    old and the new. For some requirements, you might have to look at both reports,
    but that will still provide valid traceability if you have identifiers that allow
    mapping between the systems.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在审计的情况下，你可以提供来自两个系统的报告——无论是旧系统还是新系统。对于某些需求，你可能需要查看这两个报告，但只要有能在系统之间映射的标识符，这仍然能提供有效的可追溯性。
- en: The inconvenience of keeping the old system running is normally far less than
    trying to perform a high-fidelity migration, but this depends on many things,
    such as the licenses of the old system.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 保持旧系统运行的麻烦通常远小于执行高保真度迁移的麻烦，但这取决于许多因素，比如旧系统的许可证。
- en: Synchronizing requirements for a smooth transition
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为顺利过渡同步需求
- en: 'One option that is interesting in this context, especially for big enterprises
    with many different tools, is the synchronization of requirements across different
    platforms with a product like **Tasktop** (https://www.tasktop.com/). Tasktop
    has connectors to many products like Jira, Salesforce, ServiceNow, IBM Rational,
    IBM DOORS, Polarion ALM, Azure DevOps, and many more. Synchronizing requirements
    and work items between tools enables multiple use cases:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个背景下，尤其是对于拥有多个不同工具的大型企业，一个有趣的选项是通过像 **Tasktop**（https://www.tasktop.com/）这样的产品，在不同平台之间同步需求。Tasktop
    为许多产品提供连接器，如 Jira、Salesforce、ServiceNow、IBM Rational、IBM DOORS、Polarion ALM、Azure
    DevOps 等。工具间同步需求和工作项可以实现多个用例：
- en: Work in both tools – the old and the new – at the same time during a migration
    period. This gives you more time for the migration and allows you to move over
    one team after the other while maintaining full traceability.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在迁移期间，同时在旧工具和新工具中工作。这给了你更多的时间进行迁移，并且能够在保持完全可追溯性的同时，一个接一个地迁移团队。
- en: Give different roles and teams the freedom to work using the tools they prefer.
    Your project managers prefer Jira, the architects IBM Rational, operations ServiceNow,
    and your developers want to switch to GitHub? You can enable these kinds of workflows
    by synching data between these tools.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给予不同角色和团队自由，使用他们偏好的工具。你的项目经理喜欢 Jira，架构师偏爱 IBM Rational，运维团队使用 ServiceNow，而你的开发人员想切换到
    GitHub？你可以通过在这些工具之间同步数据来实现这些工作流程。
- en: Especially in complex environments where you have a large product that multiple
    teams work on simultaneously, synchronizing requirements and work items can help
    you to optimize migration.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 尤其是在复杂的环境中，当你有一个大产品并且多个团队同时工作时，同步需求和工作项有助于优化迁移。
- en: Migrating your code
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移你的代码
- en: 'The easiest thing to do when moving to GitHub is migrating your code, especially
    when the code is already stored in another Git repository. Just clone the repository
    using `--bare` to make sure the repository is in a clean state:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移到 GitHub 时，最简单的事情就是迁移你的代码，尤其是当代码已经存储在另一个 Git 仓库中时。只需使用 `--bare` 克隆仓库，确保仓库处于干净状态：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then push the code to the repository:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将代码推送到仓库：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If the repository already contains code, you must add the `--force` parameter
    to override. You can also use the GitHub CLI to create a repository on the fly
    when pushing an existing one:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仓库已经包含代码，你必须添加 `--force` 参数来覆盖现有内容。你还可以使用 GitHub CLI 在推送现有代码时即时创建仓库：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Since in Git the author information is matched using an email address, you just
    have to create user accounts in GitHub for all users and assign them the email
    address used in your previous Git system. The authors will then be resolved correctly.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在 Git 中，作者信息是通过电子邮件地址进行匹配的，你只需在 GitHub 中为所有用户创建账户，并为他们分配在之前 Git 系统中使用的电子邮件地址。这样作者信息就能正确解析。
- en: 'You can also import code using the **GitHub Importer**. Besides Git, the following
    repository types are supported:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 **GitHub 导入工具**导入代码。除了 Git，以下仓库类型也被支持：
- en: '**Subversion**'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Subversion**'
- en: '**Mercurial**'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mercurial**'
- en: '**Team Foundation Version Control** (**TFVC**)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**团队基础版本控制** (**TFVC**)'
- en: The GitHub Importer takes the URL to the source system and creates a new repository.
    Files larger than 100 MB can be excluded or added to the Git **Large File Storage**
    (**LFS**).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 导入工具接受源系统的 URL，并创建一个新仓库。大于 100 MB 的文件可以排除或添加到 Git **大文件存储**（**LFS**）中。
- en: 'To import a repository using the GitHub Importer, click the plus next to your
    profile picture and select **Import repository** (see *Figure 21.2*):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 GitHub 导入工具导入一个仓库，请点击个人头像旁边的加号，然后选择 **导入仓库**（见 *图 21.2*）：
- en: '![Figure 21.2 – Importing a repository'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 21.2 – 导入一个仓库'
- en: '](img/B17827_21_002.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_21_002.jpg)'
- en: Figure 21.2 – Importing a repository
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21.2 – 导入一个仓库
- en: 'If you migrate from **Subversion**, you can use **git-svn** ([https://git-scm.com/docs/git-svn](https://git-scm.com/docs/git-svn))
    to sync your changes between a Git and a Subversion repository:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从 **Subversion** 迁移，可以使用 **git-svn**（[https://git-scm.com/docs/git-svn](https://git-scm.com/docs/git-svn)）在
    Git 和 Subversion 仓库之间同步更改：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you migrate from **Azure DevOps**/**Team Foundation Server**, the best way
    is to migrate to Git from **TFVC** first, and then migrate to GitHub. There is
    also a tool similar to git-svn: **git-tfs** ([https://github.com/git-tfs/git-tfs](https://github.com/git-tfs/git-tfs)).
    This allows you also to sync changes between Git and TFVC or directly migrate
    to GitHub:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从 **Azure DevOps**/**Team Foundation Server** 迁移，最佳方法是先从 **TFVC** 迁移到 Git，然后再迁移到
    GitHub。还有一个类似于 git-svn 的工具：**git-tfs**（[https://github.com/git-tfs/git-tfs](https://github.com/git-tfs/git-tfs)）。它也允许你在
    Git 和 TFVC 之间同步更改，或者直接迁移到 GitHub：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Git is optimized for short-lived branches – TFVC isn’t. You should not just
    migrate your code and all branches over. Use the chance for a clean cut-over and
    start with a new branching model. Migrating code to Git can be a first step to
    keeping parts of your history, but you should adjust your branching model after
    the migration.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Git 对短生命周期的分支进行了优化——而 TFVC 则没有。你不应仅仅将代码和所有分支迁移过去。利用这个机会进行一次干净的切换，并从新的分支模型开始。将代码迁移到
    Git 可以是保留部分历史记录的第一步，但迁移后你应该调整你的分支模型。
- en: Migrating your code to GitHub is not the challenge. There are many tools that
    can help you. The challenge is to get from an older branching model to a new one
    that is optimized for your new platform and offers accelerated software delivery
    performance (see [*Chapter 11*](B17827_11_Epub.xhtml#_idTextAnchor249), *Trunk-Based
    Development*).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码迁移到 GitHub 并不困难。有许多工具可以帮助你。挑战在于如何从旧的分支模型迁移到一个新模型，这个新模型优化了你的新平台，并提高了软件交付性能（请参见
    [*第 11 章*](B17827_11_Epub.xhtml#_idTextAnchor249)，*基于主干的开发*）。
- en: 'The challenge lies in the things that are not directly stored in Git: pull
    requests, linked work items, and pipelines. These need more attention than just
    the Git repository itself.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 挑战在于那些不是直接存储在 Git 中的内容：拉取请求、关联的工作项和管道。这些内容比仅仅是 Git 仓库本身更需要关注。
- en: Migrating from Azure DevOps or GitHub
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Azure DevOps 或 GitHub 迁移
- en: 'If you migrate from GitHub to GitHub or from Azure DevOps to GitHub, you can
    use the `extension install`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从 GitHub 迁移到 GitHub 或从 Azure DevOps 迁移到 GitHub，可以使用 `extension install`：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can set the **Personal Access Tokens** (**PAT**) as environment variables
    to authenticate to the source and target system:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 **个人访问令牌**（**PAT**）设置为环境变量，以便对源系统和目标系统进行身份验证：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You could also pass them to `generate-script` using `--github-source-pat` and
    `--ado-pat` parameters.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过 `generate-script` 将它们传递，使用 `--github-source-pat` 和 `--ado-pat` 参数。
- en: 'To create the migration script, execute one of the following commands depending
    on whether you want to migrate from GitHub or Azure DevOps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建迁移脚本，请根据你是否想从 GitHub 或 Azure DevOps 迁移，执行以下命令之一：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will generate a PowerShell script `migrate.ps1` that can be used for the
    actual migration. The script will call `gh gei migrate-repo` for all team projects
    found in Azure DevOps or GitHub organization. This will queue the actual migration.
    It then gets the status by executing `gh gei wait-for-migration --migration-id`
    with the output of the previous command.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个 PowerShell 脚本 `migrate.ps1`，该脚本可用于实际的迁移。脚本将调用 `gh gei migrate-repo` 对在
    Azure DevOps 或 GitHub 组织中找到的所有团队项目进行迁移。这将排队实际的迁移操作。然后，它通过执行 `gh gei wait-for-migration
    --migration-id`，获取前一个命令的输出，以获得迁移状态。
- en: 'GEI currently supports the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: GEI 当前支持以下内容：
- en: '**Azure DevOps** (**ADO**)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure DevOps**（**ADO**）'
- en: '**GitHub Enterprise Server** (**GHES**) 3.4.1+'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub 企业服务器**（**GHES**）3.4.1+'
- en: GitHub Enterprise Cloud
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 企业云
- en: 'For Azure DevOps, the following items will be migrated:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Azure DevOps，将迁移以下项目：
- en: Git source
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git 源
- en: Pull requests
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拉取请求
- en: User history for pull requests
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户拉取请求历史
- en: Work item links on pull requests
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拉取请求中的工作项链接
- en: Attachments on pull requests
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拉取请求中的附件
- en: Branch protections for the repository
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仓库的分支保护
- en: 'For GitHub Enterprise Server and Cloud, the following items are migrated additionally:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 GitHub 企业服务器和云，以下内容也会被迁移：
- en: Issues
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题
- en: Milestones
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 里程碑
- en: Wikis
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wiki
- en: Project boards at the repository level
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仓库级别的项目板
- en: GitHub Actions workflows (secrets and workflow run history not included)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub Actions 工作流（不包括机密和工作流运行历史记录）
- en: Commit comments
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交评论
- en: Active webhooks
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活跃的 Webhooks
- en: Repository settings
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仓库设置
- en: Branch protections
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分支保护
- en: GitHub Pages settings
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub Pages 设置
- en: User history for the above data
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上述数据的用户历史记录
- en: See [https://docs.github.com/en/early-access/github/migrating-with-github-enterprise-importer](https://docs.github.com/en/early-access/github/migrating-with-github-enterprise-importer)
    for more information. Note that GEI is still in beta and might change frequently.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见 [https://docs.github.com/en/early-access/github/migrating-with-github-enterprise-importer](https://docs.github.com/en/early-access/github/migrating-with-github-enterprise-importer)
    获取更多信息。请注意，GEI 仍处于 beta 版本，可能会频繁更改。
- en: If you are using GitHub Enterprise Server, you can also use `ghe-migrator` to
    import data, either from another server instance, or from GitHub Enterprise Cloud.
    See [https://docs.github.com/en/enterprise-server@3.4/admin/user-management/migrating-data-to-and-from-your-enterprise/about-migrations](mailto:https://docs.github.com/en/enterprise-server@3.4/admin/user-management/migrating-data-to-and-from-your-enterprise/about-migrations)
    for more information on data export and import on GitHub Enterprise Server.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 GitHub 企业服务器，你还可以使用 `ghe-migrator` 从另一个服务器实例或 GitHub 企业云导入数据。有关 GitHub
    企业服务器的数据导入导出更多信息，请参见 [https://docs.github.com/en/enterprise-server@3.4/admin/user-management/migrating-data-to-and-from-your-enterprise/about-migrations](mailto:https://docs.github.com/en/enterprise-server@3.4/admin/user-management/migrating-data-to-and-from-your-enterprise/about-migrations)。
- en: Migrating your pipelines
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移你的管道
- en: 'To migrate your pipelines to GitHub Actions, you can use a tool called **Valet**.
    It supports the following sources:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要将你的管道迁移到 GitHub Actions，你可以使用一个名为 **Valet** 的工具。它支持以下来源：
- en: Azure DevOps (Classic pipelines, YAML pipelines, and releases)
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure DevOps（经典管道、YAML 管道和发布）
- en: Jenkins
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins
- en: Travis CI
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Travis CI
- en: Circle CI
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Circle CI
- en: GitLab CI
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitLab CI
- en: Valet is a Ruby-based command-line tool that gets installed using Docker.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Valet 是一个基于 Ruby 的命令行工具，通过 Docker 安装。
- en: Note
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Valet is still in private beta at the time of writing and is still subject to
    change. Valet is not intended to be a 100% effective solution that can migrate
    everything! It is extensible and you will have to write your own transformers
    and probably still need to do some manual steps after the migration.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Valet 在撰写时仍处于私有 beta 阶段，且可能会发生变化。Valet 不是一个 100% 有效的解决方案，无法迁移一切！它是可扩展的，你将需要编写自己的转换器，并且迁移后可能仍需进行一些手动操作。
- en: 'The distribution of Valet happens by pulling down a container image and using
    the two scripts `valet` and `valet-update` to interact with it:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Valet 的分发是通过拉取容器镜像并使用两个脚本 `valet` 和 `valet-update` 与之互动：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You have to authenticate to `ghcr.io` once you have access to the private beta
    using your username and a PAT token with `read:packages` access:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你获得私有 beta 访问权限，你需要通过用户名和具有 `read:packages` 访问权限的 PAT token 进行身份验证才能访问 `ghcr.io`：
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The best way is to install Valet as a GitHub CLI extension, but you still need
    Docker running on your machine and you have to be authenticated to the registry.
    To install Valet as a GitHub CLI extension, execute the following command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的方式是将 Valet 安装为 GitHub CLI 扩展，但你仍然需要在你的机器上运行 Docker，并且必须经过身份验证才能访问注册表。要将 Valet
    安装为 GitHub CLI 扩展，请执行以下命令：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can now easily update Valet using `gh valet update`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以使用 `gh valet update` 轻松更新 Valet。
- en: 'Valet is configured using environment variables. The easiest way to do this
    is to set these in a file called `.env.local` in the folder that you are using
    Valet in. This, for example, is the configuration for migrating pipelines from
    Azure to GitHub Enterprise Cloud:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Valet 使用环境变量进行配置。最简单的方法是将这些变量设置在你使用 Valet 的文件夹中的 `.env.local` 文件里。例如，这是将管道从
    Azure 迁移到 GitHub 企业云的配置：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Valet has three modes:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Valet 有三种模式：
- en: '`gh valet audit` will analyze the source download information about all pipelines
    supported. It will create an audit summary report (Markdown) with all the pipelines,
    build steps, and environments found. You can use an audit to plan your migrations.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gh valet audit` 将分析所有支持的管道的源下载信息。它将生成一个审计摘要报告（Markdown），包含所有管道、构建步骤和找到的环境。你可以使用审计来规划你的迁移。'
- en: '`gh valet dry-run` will convert the pipelines to a GitHub Actions workflow
    file and output the YAML file.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gh valet dry-run` 将把流水线转换为 GitHub Actions 工作流文件，并输出 YAML 文件。'
- en: '`gh valet migrate` will convert the pipeline to a GitHub Actions workflow file
    and create a pull request in the target GitHub repository containing the changes
    to the workflow file.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gh valet migrate` 将把流水线转换为 GitHub Actions 工作流文件，并在目标 GitHub 仓库中创建一个拉取请求，包含对工作流文件的更改。'
- en: '`gh valet forecast` forecasts the usage of GitHub Actions based on historical
    pipeline utilization.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gh valet forecast` 根据历史流水线利用率预测 GitHub Actions 的使用情况。'
- en: 'To run an audit using the previous configuration and create a report, just
    run the following command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用之前的配置进行审核并生成报告，只需运行以下命令：
- en: '[PRE20]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This will generate an `audit_summary.md` report and three files for every supported
    pipeline: a `.config.json` file containing the configuration, a `.source.yml`
    file containing the source pipeline converted to YAML, and a `.yml` file containing
    the transformed GitHub Actions workflow that will later be migrated. To execute
    the migration for one pipeline, run `valet migrate`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个 `audit_summary.md` 报告，并为每个受支持的流水线生成三个文件：一个 `.config.json` 文件，包含配置；一个
    `.source.yml` 文件，包含转换为 YAML 的源流水线；以及一个 `.yml` 文件，包含转换后的 GitHub Actions 工作流，稍后将进行迁移。要执行一个流水线的迁移，运行
    `valet migrate`：
- en: '[PRE21]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Remember that this is a best-effort migration! Not everything can be migrated.
    For example, the following elements cannot be migrated:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这是一项尽最大努力的迁移！并不是所有内容都可以迁移。例如，以下元素无法迁移：
- en: Secrets
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 秘密
- en: Service connections
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务连接
- en: Unknown tasks
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未知任务
- en: Self-hosted runners
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自托管运行器
- en: Variables from Key Vault
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 Key Vault 的变量
- en: 'You can write your own transformers for pipeline steps, either for unknown
    steps or to override existing behavior from Valet. Create a new Ruby file (`.rb`)
    and add a function in the following format:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为流水线步骤编写自己的转换器，无论是对于未知步骤，还是覆盖 Valet 的现有行为。创建一个新的 Ruby 文件（`.rb`），并以以下格式添加一个函数：
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: For Azure DevOps tasks, the name includes the version number. To see what the
    item object contains, you can output it to the console using `puts item`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Azure DevOps 任务，名称中包括版本号。要查看项目对象包含的内容，可以通过 `puts item` 将其输出到控制台。
- en: 'Here is a sample transformer that would override the `DotNetCoreCLI` task version
    2 and replace it with a run step on Bash that uses the `globstar` syntax to iterate
    all `.csproj` files and execute the command using the arguments from the source
    pipeline:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例转换器，它会覆盖 `DotNetCoreCLI` 任务的版本 2，并用 Bash 上的运行步骤替代，使用 `globstar` 语法迭代所有
    `.csproj` 文件，并使用源流水线中的参数执行命令：
- en: '[PRE26]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'To use your custom transformers, you can use the `--custom-transformers` parameter.
    You can specify individual transformers or entire directories if you have many
    transformers:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用自定义转换器，你可以使用 `--custom-transformers` 参数。如果你有多个转换器，可以指定单个转换器或整个目录：
- en: '[PRE35]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Each workflow system is different! Make sure to spend time analyzing how you
    want your pipelines to be transformed to optimize for the new platform instead
    of just trying to migrate everything over. If you’ve figured that out, then Valet
    will be a great tool that can help you to transition your teams faster to GitHub.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 每个工作流系统都有不同！确保花时间分析你希望如何转换你的流水线，以便优化新平台，而不是仅仅尝试迁移所有内容。如果你已经搞清楚了这一点，那么 Valet
    将是一个很好的工具，帮助你更快地将团队过渡到 GitHub。
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: GitHub is a complex, fast-growing ecosystem that is challenging for any kind
    of migration. When migrating, make sure to focus on optimizing for productivity
    on the new platform rather than on migrating everything over and then letting
    your teams deal with the mess. Depending on the size of your organization and
    the source platforms, your migration story might look completely different.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 是一个复杂且快速发展的生态系统，对于任何形式的迁移都充满挑战。在迁移时，确保专注于优化新平台上的生产力，而不是迁移所有内容后再让团队处理混乱。根据你所在组织的规模和源平台的不同，你的迁移过程可能完全不同。
- en: In this chapter, you’ve learned about the different tools from GitHub and partners
    that can help you facilitate your migration.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经了解了 GitHub 和合作伙伴提供的不同工具，这些工具可以帮助你促进迁移过程。
- en: In the next chapter, we’ll talk about organizing your teams and repositories
    for optimal collaboration.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将讨论如何为最佳协作组织你的团队和仓库。
- en: Further reading
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'These are the links from this chapter that you can use to get more information
    on the topics discussed:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是本章中可以帮助你获取更多相关信息的链接：
- en: '*GitHub Importer*: [https://docs.github.com/en/get-started/importing-your-projects-to-github/importing-source-code-to-github/importing-a-repository-with-github-importer](https://docs.github.com/en/get-started/importing-your-projects-to-github/importing-source-code-to-github/importing-a-repository-with-github-importer)'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*GitHub 导入工具*： [https://docs.github.com/en/get-started/importing-your-projects-to-github/importing-source-code-to-github/importing-a-repository-with-github-importer](https://docs.github.com/en/get-started/importing-your-projects-to-github/importing-source-code-to-github/importing-a-repository-with-github-importer)'
- en: '*GitHub Enterprise Importer* *CLI*: [https://github.com/github/gh-gei](https://github.com/github/gh-gei)
    and https://docs.github.com/en/early-access/github/migrating-with-github-enterprise-importer'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*GitHub 企业版导入工具* *CLI*： [https://github.com/github/gh-gei](https://github.com/github/gh-gei)
    和 https://docs.github.com/en/early-access/github/migrating-with-github-enterprise-importer'
- en: '*GitHub Enterprise Server Importer:* [https://docs.github.com/en/enterprise-server@3.4/admin/user-management/migrating-data-to-and-from-your-enterprise/about-migrations](mailto:https://docs.github.com/en/enterprise-server@3.4/admin/user-management/migrating-data-to-and-from-your-enterprise/about-migrations)'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*GitHub 企业版服务器导入工具*： [https://docs.github.com/en/enterprise-server@3.4/admin/user-management/migrating-data-to-and-from-your-enterprise/about-migrations](mailto:https://docs.github.com/en/enterprise-server@3.4/admin/user-management/migrating-data-to-and-from-your-enterprise/about-migrations)'
- en: '*ghe-migrator*: https://docs.github.com/en/enterprise-server@3.4/admin/user-management/migrating-data-to-and-from-your-enterprise/about-migrations'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ghe-migrator*： https://docs.github.com/en/enterprise-server@3.4/admin/user-management/migrating-data-to-and-from-your-enterprise/about-migrations'
- en: '*Tasktop*: https://www.tasktop.com/'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Tasktop*： https://www.tasktop.com/'
- en: '*git-svn*: [https://git-scm.com/docs/git-svn](https://git-scm.com/docs/git-svn)'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*git-svn*： [https://git-scm.com/docs/git-svn](https://git-scm.com/docs/git-svn)'
- en: '*git-tfs*: [https://github.com/git-tfs/git-tfs](https://github.com/git-tfs/git-tfs)'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*git-tfs*： [https://github.com/git-tfs/git-tfs](https://github.com/git-tfs/git-tfs)'
