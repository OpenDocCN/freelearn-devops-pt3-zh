- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Puppet Platform Parts and Functions
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Puppet 平台部分和功能
- en: So far, we have discussed Puppet as a language, but in this chapter and the
    following chapters, we will start to focus on Puppet as a platform and the infrastructure
    and components of the platform.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论了 Puppet 作为一种语言，但在本章及后续章节中，我们将开始关注 Puppet 作为一个平台，以及平台的基础设施和组件。
- en: 'In *Figure 10**.1*, the full architecture of services involved in Puppet Server
    and the Puppet client, to be discussed in this chapter, is shown. These services
    focus on how Puppet code is enforced on servers:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 10.1* 中，展示了本章将讨论的 Puppet Server 和 Puppet 客户端服务的完整架构。这些服务专注于如何在服务器上强制执行
    Puppet 代码：
- en: '![Figure 10.1 – Puppet server and client components](img/B18492_10_01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.1 – Puppet 服务器和客户端组件](img/B18492_10_01.jpg)'
- en: Figure 10.1 – Puppet server and client components
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – Puppet 服务器和客户端组件
- en: We will start by highlighting that we do not run through installation methods
    in this book. There are several open source projects to base automation on for
    open source Puppet and Puppet Enterprise; throughout this book, we have used the
    `pead`znd `pecd`m modules as the most automated mechanism for installing **Puppet
    Editor** (**PE**). As components are discussed, it will be noted how the versioning
    of Puppet packages can differ, and we’ll look at some related install versions,
    as well as the key users, directories, configuration files, and services installed.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先强调，在本书中不会详细介绍安装方法。对于开源 Puppet 和 Puppet Enterprise，有几个开源项目可以作为自动化基础；在本书中，我们使用了
    `pead` 和 `pecd` 模块作为最自动化的 **Puppet 编辑器**（**PE**）安装机制。随着各组件的讨论，我们还将提到 Puppet 包的版本如何不同，并查看一些相关的安装版本、关键用户、目录、配置文件和已安装的服务。
- en: First of all, we will examine the core services provided by the Puppet Server.
    These services include catalog compilation to receive requests from clients, process
    their current state, and determine how they should be configured based on Puppet
    code. A **certificate authority** (**CA**) allows agents to register and communicate
    with the Puppet server securely. It also includes some associated API services
    to access, request, and control those services.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将检查 Puppet Server 提供的核心服务。这些服务包括接收客户端请求的清单编译、处理它们的当前状态，并根据 Puppet 代码确定如何配置它们。**证书授权中心**（**CA**）允许代理安全地注册并与
    Puppet 服务器通信。它还包括一些相关的 API 服务，以便访问、请求和控制这些服务。
- en: Having established how the server functions, we will then show how the Puppet
    agent communicates with the server, requesting to have a key signed by the CA,
    what the communication for a catalog compilation involves, and how the agent processes
    and stores the returned catalog.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了服务器的功能后，我们将展示 Puppet agent 如何与服务器通信，请求由 CA 签署密钥，清单编译的通信过程，以及 agent 如何处理并存储返回的清单。
- en: We’ll then view how PuppetDB is used to store, facts, catalogs, and events and
    how we can access this information via both APIs and **Puppet Query Language**
    (**PQL**). The relationship between PuppetDB and PostgreSQL will be examined as
    a frontend application to a backend database architecture, and we will also discuss
    how other data is stored in PostgreSQL by the Puppet services directly.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将查看 PuppetDB 如何用于存储事实、清单和事件，以及如何通过 **Puppet 查询语言**（**PQL**）和 API 访问这些信息。我们还将研究
    PuppetDB 和 PostgreSQL 之间的关系，作为前端应用程序与后端数据库架构的连接，并讨论 Puppet 服务如何直接将其他数据存储在 PostgreSQL
    中。
- en: It will then be shown how the compilation can horizontally scale to compile
    catalogs of hundreds of thousands of servers using compile servers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 接着将展示如何使用编译服务器水平扩展，以编译数十万台服务器的清单。
- en: Throughout these topics, subtle differences between how PE and Puppet open source
    are set up will be highlighted.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些主题中，我们将突出 PE 和开源 Puppet 配置之间的细微差异。
- en: This chapter will not cover the PE-specific features of the orchestrator, the
    PE console, or the supported architectures (which can allow for these services
    to be split out into more scalable infrastructure); these will be covered in [*Chapter
    14*](B18492_14.xhtml#_idTextAnchor340).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章不涉及与 PE 相关的编排器特性、PE 控制台或支持的架构（这些可以使服务拆分到更具可扩展性的基础设施中）；这些将在 [*第14章*](B18492_14.xhtml#_idTextAnchor340)
    中讨论。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将覆盖以下主要内容：
- en: Puppet platform installation and versioning
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet 平台安装和版本控制
- en: Puppet Server
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet 服务器
- en: Puppet agent-to-server life cycle
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet agent 到 server 的生命周期
- en: PuppetDB and PostgreSQL
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PuppetDB 和 PostgreSQL
- en: Scaling with compilers
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用编译器进行扩展
- en: Note
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: As part of an effort to remove harmful terminology from its products, Puppet
    dropped the use of the terms *master server* and *compile master* and now uses
    *primary server* and *compile server*. As these names were quite embedded, there
    will be some places where classes or configuration settings do still refer to
    *master*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作为努力从其产品中移除有害术语的一部分，Puppet放弃了使用*master server*和*compile master*的术语，现在使用*primary
    server*和*compile server*。由于这些名称已深植人心，某些地方的类或配置设置仍然会提到*master*。
- en: Technical requirements
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Clone the control repo from [https://github.com/puppetlabs/control-repo](https://github.com/puppetlabs/control-repo
    ) to your GitHub account in a repo called `controlrepo-chapter10`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从[https://github.com/puppetlabs/control-repo](https://github.com/puppetlabs/control-repo)克隆控制库到你的GitHub账户，创建一个名为`controlrepo-chapter10`的库。
- en: 'Build a large cluster with three compilers and three clients by downloading
    the `params.json` file from [https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/params.json](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/params.json)
    and update it with the location of your control repo and your SSH key for the
    control repo. Then, run the following command from your `pecdm` directory:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过下载[https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/params.json](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/params.json)中的`params.json`文件，并用你的控制库位置和控制库的SSH密钥更新它，来构建一个包含三个编译器和三个客户端的大型集群。然后，从你的`pecdm`目录运行以下命令：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Puppet platform installation and versioning
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Puppet平台的安装与版本管理
- en: This book makes the choice not to go into the methods of installing Puppet;
    there is little to add to the installation instructions for open source, documented
    at [https://puppet.com/docs/puppet/latest/server/install_from_packages.html](https://puppet.com/docs/puppet/latest/server/install_from_packages.html),
    and any further choice of automation will depend heavily on the use case of your
    organization and available tooling and product sets you want to integrate with.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本书选择不深入探讨Puppet的安装方法；对于开源版本的安装说明，几乎没有需要补充的内容，详细内容请见[https://puppet.com/docs/puppet/latest/server/install_from_packages.html](https://puppet.com/docs/puppet/latest/server/install_from_packages.html)，任何进一步的自动化选择都将高度依赖于你组织的使用场景，以及你希望集成的工具和产品集。
- en: For open source Puppet, there are a number of projects automating the deployment,
    configuration, and integration of Puppet, such as example42’s `psick` ([https://github.com/example42/psick](https://github.com/example42/psick))
    or the Foreman project ([https://github.com/theforeman/foreman-installer](https://github.com/theforeman/foreman-installer)),
    which has a specific module for installing Puppet Server ([https://forge.puppet.com/modules/theforeman/puppet](https://forge.puppet.com/modules/theforeman/puppet))
    that can be used even outside of Foreman to install Puppet. Dashboards similar
    to what has been provided by the PE setup can also be found in projects such as
    Puppetboard ([https://forge.puppet.com/modules/puppet/puppetboard](https://forge.puppet.com/modules/puppet/puppetboard))
    or Puppet Summary ([https://github.com/skx/puppet-summary](https://github.com/skx/puppet-summary)).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开源Puppet，有多个项目可以自动化Puppet的部署、配置和集成，比如example42的`psick`([https://github.com/example42/psick](https://github.com/example42/psick))或Foreman项目([https://github.com/theforeman/foreman-installer](https://github.com/theforeman/foreman-installer))，后者有一个专门用于安装Puppet
    Server的模块([https://forge.puppet.com/modules/theforeman/puppet](https://forge.puppet.com/modules/theforeman/puppet))，即使不使用Foreman，也可以用来安装Puppet。类似PE设置提供的仪表板也可以在诸如Puppetboard([https://forge.puppet.com/modules/puppet/puppetboard](https://forge.puppet.com/modules/puppet/puppetboard))或Puppet
    Summary([https://github.com/skx/puppet-summary](https://github.com/skx/puppet-summary))等项目中找到。
- en: For PE, although manual instructions are available at [https://puppet.com/docs/pe/2021.7/installing_pe.html](https://puppet.com/docs/pe/2021.7/installing_pe.html),
    the automation choice is clear with the Puppet-supported `peadm` module; in [*Chapter
    12*](B18492_12.xhtml#_idTextAnchor293), we will review how the module is used
    for the lab along with `pecdm` as a Bolt project.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于PE，尽管可以在[https://puppet.com/docs/pe/2021.7/installing_pe.html](https://puppet.com/docs/pe/2021.7/installing_pe.html)找到手动安装说明，但自动化的选择是显而易见的，即使用Puppet支持的`peadm`模块；在[*第12章*](B18492_12.xhtml#_idTextAnchor293)中，我们将回顾如何在实验中使用该模块，并将`pecdm`作为Bolt项目使用。
- en: Key points to recognize with the packages installed are that Puppet repositories
    provide set versions of Ruby, OpenSSL, Hiera, and Facter to use for different
    versions of Puppet and that packages such as `puppetserver` may not match the
    Puppet version being installed—for example, Puppet 7.17 will have Puppet server
    version 7.8 installed; these associated versions are available in the release
    notes. For PE, you can see all the underlying open source package versions in
    the documentation at [https://puppet.com/docs/pe/2021.7/component_versions_in_recent_pe_releases.html#component_versions_in_recent_pe_releases](https://puppet.com/docs/pe/2021.7/component_versions_in_recent_pe_releases.html#component_versions_in_recent_pe_releases).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 安装的包中需要注意的关键点是，Puppet 仓库提供了不同版本的 Ruby、OpenSSL、Hiera 和 Facter，以供不同版本的 Puppet
    使用，且像 `puppetserver` 这样的包可能与正在安装的 Puppet 版本不匹配——例如，Puppet 7.17 会安装 Puppet Server
    版本 7.8；这些关联版本可以在发布说明中找到。对于 PE，你可以在文档中查看所有底层开源包版本，网址为 [https://puppet.com/docs/pe/2021.7/component_versions_in_recent_pe_releases.html#component_versions_in_recent_pe_releases](https://puppet.com/docs/pe/2021.7/component_versions_in_recent_pe_releases.html#component_versions_in_recent_pe_releases)。
- en: Puppet Server
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Puppet Server
- en: In historic versions of Puppet, Ruby-based solutions such as WEBrick or Passenger
    were used for running the Puppet service, but in all modern versions of Puppet,
    to improve scaling and performance, Puppet Server is run as a Clojure and Ruby
    application on a **Java Virtual Machine** (**JVM**). Puppet Server has a number
    of related services that share state and route requests between them. These services
    run inside a single JVM process, using the Trapperkeeper service framework, which
    is a Clojure framework for hosting long-running applications.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Puppet 的历史版本中，基于 Ruby 的解决方案如 WEBrick 或 Passenger 被用来运行 Puppet 服务，但在所有现代版本的
    Puppet 中，为了提高扩展性和性能，Puppet Server 作为一个 Clojure 和 Ruby 应用程序运行在 **Java 虚拟机** (**JVM**)
    上。Puppet Server 具有多个相关的服务，这些服务共享状态并在它们之间路由请求。这些服务运行在单一的 JVM 进程中，使用 Trapperkeeper
    服务框架，Trapperkeeper 是一个用于托管长时间运行应用程序的 Clojure 框架。
- en: Puppet Server is installed via the `puppetserver` package in open source Puppet
    and the `pe-puppetserver` package in PE. This will create a system service of
    the same name and configuration files that, by default, will be placed in `/etc/puppetlabs/puppetserver/conf.d`
    in **Human-Optimized Config Object Notation** (**HOCON**) format.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet Server 通过 open source Puppet 中的 `puppetserver` 包和 PE 中的 `pe-puppetserver`
    包进行安装。这样会创建一个同名的系统服务，并生成配置文件，默认情况下，这些文件会放置在 `/etc/puppetlabs/puppetserver/conf.d`
    目录下，采用 **人类优化配置对象表示法** (**HOCON**) 格式。
- en: Note
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The Puppet `hocon` module is the best way to automate the management of HOCON
    files ([https://forge.puppet.com/modules/puppetlabs/hocon](https://forge.puppet.com/modules/puppetlabs/hocon)).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 的 `hocon` 模块是自动化管理 HOCON 文件的最佳方式 ([https://forge.puppet.com/modules/puppetlabs/hocon](https://forge.puppet.com/modules/puppetlabs/hocon))。
- en: Next, we’ll look at the services that make up Puppet Server.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看构成 Puppet Server 的服务。
- en: The embedded web server
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内嵌 Web 服务器
- en: Puppet contains a Jetty-based web server in the JVM that sets up the mount points
    and communications necessary for web requests to take place between components
    and to access the APIs.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 在 JVM 中包含一个基于 Jetty 的 Web 服务器，用于设置挂载点和通信，以便在组件之间进行 Web 请求并访问 API。
- en: 'The `webserver.conf` file sets the main configuration for the web server, such
    as the file location of `web-routes.conf` file sets the mount points for web API
    access by mounting the handlers, as shown in the following example file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`webserver.conf` 文件设置了 Web 服务器的主要配置，如 `web-routes.conf` 文件的位置，后者通过挂载处理程序来设置
    Web API 访问的挂载点，如以下示例文件所示：'
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The core mount points that can be seen in this file required for client-to-server
    communication are listed here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件中列出了客户端与服务器之间通信所需的核心挂载点：
- en: The `puppet-ca` mount point is used by clients to communicate with the CA service
    and check or make a **certificate signing** **request** (**CSR**).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`puppet-ca` 挂载点供客户端与 CA 服务进行通信，并检查或发出 **证书签名请求** (**CSR**)。'
- en: '`master-service` provides a mount point used by clients to request catalogs
    that are compiled via JRuby interpreters.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`master-service` 提供一个挂载点，供客户端通过 JRuby 解释器编译的目录请求。'
- en: The request logging configuration set by default in `webserver.conf` is at `/etc/puppetlabs/puppetserver/request-logging.xml`
    and determines how HTTP access requests are logged. By default, messages will
    be logged to `/var/log/puppetlabs/puppetserver/puppetserver-access.log`.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，`webserver.conf` 中设置的请求日志记录配置位于 `/etc/puppetlabs/puppetserver/request-logging.xml`，它决定了
    HTTP 访问请求的记录方式。默认情况下，消息将被记录到 `/var/log/puppetlabs/puppetserver/puppetserver-access.log`。
- en: This section should have given you an understanding of how the embedded web
    service sets up a web server in the JVM with the mount points necessary for requests
    to be made to the different components of Puppet Server and how it will log these
    requests. Now, we will see the two core APIs accessed via the endpoints made available
    by the mount points, Puppet API via `/puppet` and `/puppet_ca`, and then the Admin
    API via `/puppet_admin_api`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 本节内容应帮助你了解嵌入式 Web 服务如何在 JVM 中设置 Web 服务器，及其为不同组件的 Puppet Server 请求提供必要的挂载点，并记录这些请求。接下来，我们将查看通过挂载点提供的两个核心
    API，分别是通过 `/puppet` 和 `/puppet_ca` 访问的 Puppet API，以及通过 `/puppet_admin_api` 访问的
    Admin API。
- en: The Puppet API service
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Puppet API 服务
- en: The Puppet API service is made up of two endpoints created by the embedded web
    server—`/puppet` for configuration-related services and `/puppet-ca` for the CA.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet API 服务由嵌入式 Web 服务器创建的两个端点组成——`/puppet` 用于配置相关服务，`/puppet-ca` 用于 CA。
- en: 'Both are versioned with a string such as `/v3` and authorization is controlled
    via the `auth.conf` file, a HOCON formatted file. It is unlikely you will need
    to edit this file unless requiring more advanced access to integrate services,
    but to show an example of content, the following code allows Puppet nodes to request
    their own catalog from the API:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都通过如 `/v3` 这样的字符串进行版本控制，授权通过 `auth.conf` 文件控制，该文件是 HOCON 格式的文件。除非需要更高级的访问权限来集成服务，否则你不太可能需要编辑该文件，但为了展示示例内容，以下代码允许
    Puppet 节点从 API 请求自己的目录：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: More detailed instructions for customization authorization are available at
    [https://github.com/puppetlabs/trapperkeeper-authorization/blob/main/doc/authorization-config.md](https://github.com/puppetlabs/trapperkeeper-authorization/blob/main/doc/authorization-config.md).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有关自定义授权的更详细说明，请参见 [https://github.com/puppetlabs/trapperkeeper-authorization/blob/main/doc/authorization-config.md](https://github.com/puppetlabs/trapperkeeper-authorization/blob/main/doc/authorization-config.md)。
- en: The Puppet agent on all modern versions of Puppet 5 to 8 uses `/puppet/v3` endpoint
    services to manage clients. The `v3` API has two types of endpoints—**indirectors**
    and **environment** endpoints.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Puppet 5 到 8 的现代版本中的 Puppet 代理使用 `/puppet/v3` 端点服务来管理客户端。`v3` API 具有两种类型的端点——**间接指令**和**环境**端点。
- en: Indirectors take the form `/puppet/v3/<indirection>/<key>?environment=<environment>`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 间接指令的格式为 `/puppet/v3/<indirection>/<key>?environment=<environment>`。
- en: 'Here, the indirection value is the indirector requested, the key is the key
    relevant to the call to the indirector, and the environment is the environment
    that should be used for this request. For example, to request a catalog be compiled,
    a client would construct the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，间接值是请求的间接指令，键是与调用间接指令相关的键，环境是该请求应该使用的环境。例如，若要请求编译目录，客户端将构建以下内容：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following indirectors exist under `/puppet/v3/` for clients:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器下`/puppet/v3/`路径下存在以下间接指令：
- en: '`Facts`: The `facts` endpoint allows setting facts for the specified node name'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`事实`：`facts` 端点允许为指定的节点名称设置事实'
- en: '`Catalog:` Returns a catalog for the specified node'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`目录`：返回指定节点的目录'
- en: '`Node`: Returns node information such as classification'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`节点`：返回节点信息，例如分类'
- en: '`File bucket` `file`: Manages the contents of a file bucket'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`文件桶` `文件`：管理文件桶的内容'
- en: '`File content`: Returns file content such as files in modules'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`文件内容`：返回文件内容，例如模块中的文件'
- en: '`File metadata`: Returns the metadata of a file such as the permissions of
    a file in modules'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`文件元数据`：返回文件的元数据，例如模块中文件的权限'
- en: '`Report`: Allows the storing of Puppet reports for nodes'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`报告`：允许存储节点的 Puppet 报告'
- en: 'The following indirectors exist under `/puppet/v3/` for the server:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器下`/puppet/v3/`路径下存在以下间接指令：
- en: '**Environment classes**: Returns all the classes that can be parsed in the
    requested environment'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境类**：返回请求环境中可以解析的所有类'
- en: '**Environment modules**: Returns information about all the modules found in
    an environment, such as their names and versions'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境模块**：返回环境中所有模块的信息，例如它们的名称和版本'
- en: '**Static file content**: Returns the file content of a specific version of
    a file resource in an environment'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态文件内容**：返回特定版本的文件资源在某个环境中的文件内容'
- en: The separate environment endpoint that was not an indirector allows a simple
    call to `/puppet/v3/environments` that returns all environments known to the server.
    In the next chapter, we will talk about environments in more detail.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 未作为间接指令的独立环境端点允许简单调用 `/puppet/v3/environments`，该调用返回服务器已知的所有环境。在下一章中，我们将更详细地讨论环境。
- en: Tools and services can also access these same endpoints to examine data, and
    a `v4` API exists with a catalog endpoint that allows for more extensive use of
    PuppetDB to manipulate facts and the catalog. It is used by tools such as `octocatalog-diff`
    ([https://github.com/github/octocatalog-diff](https://github.com/github/octocatalog-diff)),
    which can generate, compare, and manipulate catalogs.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 工具和服务也可以访问这些相同的端点来检查数据，并且存在一个`v4` API，具有一个目录端点，可以更广泛地使用 PuppetDB 来操作事实和目录。它被如
    `octocatalog-diff`（[https://github.com/github/octocatalog-diff](https://github.com/github/octocatalog-diff)）等工具使用，这些工具可以生成、比较和操作目录。
- en: 'The `/puppet-ca` endpoint follows a similar format using `v1` and indirectors,
    as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`/puppet-ca` 端点采用类似的格式，使用 `v1` 和指令，如下所示：'
- en: '**Certificate**: Returns the certificate of a specified name'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**证书**：返回指定名称的证书'
- en: '**Certificate Clean**: Revokes and deletes a certificate'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**证书清理**：吊销并删除证书'
- en: '**Certificate Status**: Requests the status of a certificate or a CSR'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**证书状态**：请求证书或 CSR 的状态'
- en: '**Certificate Revocation List**: Requests the **Certificate Revocation List**
    (**CRL**) file'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**证书吊销列表**：请求 **证书吊销列表** (**CRL**) 文件'
- en: 'As an example, to request a certificate for `server.example.com`, the following
    endpoint would be hit: `/puppet-ca/v1/certificate/server.example.com`.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要请求`server.example.com`的证书，可以访问以下端点：`/puppet-ca/v1/certificate/server.example.com`。
- en: These actions will be discussed in more detail in the *CA* section of this chapter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作将在本章的 *CA* 部分进行更详细的讨论。
- en: In this section, we did not go into full detail about each endpoint and making
    API calls to them, but later in the chapter, where we look at the client-to-server
    lifecycle, we will follow the logging of calls and highlight their use to show
    how these APIs are used by Puppet. Full details of the endpoints can be viewed
    at [https://puppet.com/docs/puppet/latest/http_api/http_report.html](https://puppet.com/docs/puppet/latest/http_api/http_report.html).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们没有详细讨论每个端点及其 API 调用，但在本章后面，我们将查看客户端与服务器的生命周期，跟踪调用日志，并强调它们的用途，以展示 Puppet
    如何使用这些 API。端点的完整详细信息可以在[https://puppet.com/docs/puppet/latest/http_api/http_report.html](https://puppet.com/docs/puppet/latest/http_api/http_report.html)查看。
- en: The Admin API
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Admin API
- en: 'The Admin API has just two endpoints at `/puppet_admin/v1/`, as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Admin API 只有两个端点在 `/puppet_admin/v1/`，如下所示：
- en: '**Environment cache**: Used to clear the cache of environment data'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境缓存**：用于清除环境数据的缓存'
- en: '**JRuby pool**: Used to clear the JRuby pool or retrieve a Ruby thread dump
    of running JRuby instances'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JRuby 池**：用于清除 JRuby 池或获取正在运行的 JRuby 实例的 Ruby 线程转储'
- en: Both endpoints are for more in-depth development work, so are beyond the scope
    of this book but help complete the picture of the Puppet server components. Details
    of these endpoints can be viewed at [https://puppet.com/docs/puppet/latest/server/admin-api/v1/jruby-pool.html](https://puppet.com/docs/puppet/latest/server/admin-api/v1/jruby-pool.html
    ) and [https://puppet.com/docs/puppet/latest/server/admin-api/v1/environment-cache.html](https://puppet.com/docs/puppet/latest/server/admin-api/v1/environment-cache.html).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个端点用于更深入的开发工作，因此超出了本书的范围，但有助于完整地展示 Puppet 服务器组件。可以在[https://puppet.com/docs/puppet/latest/server/admin-api/v1/jruby-pool.html](https://puppet.com/docs/puppet/latest/server/admin-api/v1/jruby-pool.html)和[https://puppet.com/docs/puppet/latest/server/admin-api/v1/environment-cache.html](https://puppet.com/docs/puppet/latest/server/admin-api/v1/environment-cache.html)查看这些端点的详细信息。
- en: CA
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CA
- en: By default, Puppet uses its own in-built CA and **public key infrastructure**
    (**PKI**) to secure all SSL communications.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Puppet 使用其内置的 CA 和 **公钥基础设施** (**PKI**) 来保护所有 SSL 通信。
- en: Two commands are used to interact with the Puppet CA setup—`puppetserver ca`
    for server-side actions such as signing or revoking certificates and `puppet ssl`
    for agent-side tasks such as requesting and downloading certificates. These commands
    make calls to the `puppet-ca` endpoint via the CLI.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个命令用于与 Puppet CA 设置进行交互——`puppetserver ca` 用于服务器端操作，如签署或吊销证书，`puppet ssl`
    用于代理端任务，如请求和下载证书。这些命令通过 CLI 调用 `puppet-ca` 端点。
- en: Note
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Despite the introduction of the `puppet-ca` endpoint, the five commands of
    the previous `ruby ca` implementation were still available until their removal
    in Puppet 6: `puppet certificate`, `puppet cert`, `puppet certificate_request`,
    `puppet ca`, and `puppet certificate_revocation_list`. They have all been replaced
    by the `puppetserver ca` and `puppet ssl` commands. Even if you are using Puppet
    5, it is strongly advised not to use these Ruby commands as using both API and
    Ruby implementations simultaneously can corrupt the CA.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管引入了 `puppet-ca` 端点，之前 `ruby ca` 实现的五个命令在 Puppet 6 之前仍然可用：`puppet certificate`、`puppet
    cert`、`puppet certificate_request`、`puppet ca` 和 `puppet certificate_revocation_list`。这些命令已被
    `puppetserver ca` 和 `puppet ssl` 命令取代。即使你使用的是 Puppet 5，强烈建议不要使用这些 Ruby 命令，因为同时使用
    API 和 Ruby 实现可能会破坏 CA。
- en: While the automation of installation discussed in the introduction should cover
    the initial setup, it is worth knowing whether the CA setup has been performed
    by running `puppetserver ca setup`. Before the `puppetserver/pe-puppetserver`
    service has started, it will create a separate root CA and an intermediate signing
    CA. If the `puppetserver/pe-puppetserver` service is started before this step,
    it will create a single combined root and signing CA, which was the prior way
    Puppet operated. Unless you have a specific need for a single certificate, this
    should be avoided. From PE 2019.x and Puppet 6.x, these certificates last 15 years;
    previously, this was 5 years, and it’s important to understand that upgrading
    Puppet versions does not extend the CA.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在介绍中讨论的安装自动化应该涵盖初始设置，但通过运行 `puppetserver ca setup` 检查 CA 设置是否已执行也是值得的。在 `puppetserver/pe-puppetserver`
    服务启动之前，它将创建一个单独的根 CA 和一个中间签名 CA。如果在此步骤之前启动了 `puppetserver/pe-puppetserver` 服务，它将创建一个单一的根
    CA 和签名 CA，这是 Puppet 以前的操作方式。除非有特定需求使用单一证书，否则应避免此情况。从 PE 2019.x 和 Puppet 6.x 开始，这些证书的有效期为
    15 年；之前为 5 年，而且需要理解的是，升级 Puppet 版本并不会延长 CA 的有效期。
- en: Note
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Extending an expired CA is possible via the `ca_extend` module ([https://forge.puppet.com/modules/puppetlabs/ca_extend](https://forge.puppet.com/modules/puppetlabs/ca_extend)).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `ca_extend` 模块可以扩展过期的 CA（[https://forge.puppet.com/modules/puppetlabs/ca_extend](https://forge.puppet.com/modules/puppetlabs/ca_extend)）。
- en: 'The keys and certificates created in this step will be created in a directory
    called `/etc/puppetlabs/puppetserver/ca` for Puppet 7 and above or one called
    `/etc/puppetlabs/puppet/ca` for Puppet 6 and below. There is a `/etc/puppetlabs/puppet/ca`
    to the new location to avoid confusion. The directory will contain the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中创建的密钥和证书将保存在一个名为 `/etc/puppetlabs/puppetserver/ca` 的目录中（适用于 Puppet 7 及以上版本），或者保存在
    `/etc/puppetlabs/puppet/ca` 目录中（适用于 Puppet 6 及以下版本）。为了避免混淆，新的目录位置下会有一个指向 `/etc/puppetlabs/puppet/ca`
    的路径。该目录将包含以下内容：
- en: '`ca_crl.pem`: The CRL'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ca_crl.pem`：CRL 文件'
- en: '`ca_crt.pem`: The CA-signed certificate public certificate'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ca_crt.pem`：CA 签名的证书公钥'
- en: '`ca_key.pem`: The CA private key'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ca_key.pem`：CA 私钥'
- en: '`ca_pub.pem`: The CA public key'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ca_pub.pem`：CA 公钥'
- en: '`inventory.txt`: A list of certificates the CA signed with their serial numbers
    and expiry dates'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inventory.txt`：CA 签名的证书列表，包括其序列号和到期日期'
- en: '`requests`: Unsigned CSR files'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requests`：未签名的 CSR 文件'
- en: '`root_key.pem`: This is the root key used to sign the CA certificate if using
    a separate root CA and an intermediate CA'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`root_key.pem`：如果使用单独的根 CA 和中间 CA，这是用于签署 CA 证书的根密钥'
- en: '`serial`: This file contains an incrementing counter of the new serial number
    for certificates'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`serial`：此文件包含证书新序列号的递增计数器'
- en: '`signed`: This folder contains all signed CSR files'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`signed`：此文件夹包含所有已签名的 CSR 文件'
- en: 'In addition to these files, an infrastructure CRL can be maintained, which
    by default is not used in open source Puppet but is used in PE. To have a smaller
    CRL, the `infra_inventory.txt` file is managed to contain the Puppet infrastructure
    servers; when revoked, these systems are added to `infra_crl.pem`. This is enabled
    by setting `infra certificate-authority.enable-infra-crl` to `true` in the `puppet.conf`
    file. We will talk in more detail about the `puppet.conf` file later in this chapter.
    This approach means the Puppet clients only need to receive the small infrastructure
    CRL, which is important for estates with a high churn of servers. The following
    files will be maintained:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些文件外，还可以维护基础设施 CRL，默认情况下，开源 Puppet 不使用该 CRL，但 PE 使用该 CRL。为了保持较小的 CRL，`infra_inventory.txt`
    文件用于管理 Puppet 基础设施服务器；当被吊销时，这些系统会被添加到`infra_crl.pem`中。通过在`puppet.conf`文件中将`infra
    certificate-authority.enable-infra-crl`设置为`true`，可以启用此功能。我们将在本章后续部分详细讨论`puppet.conf`文件。此方法意味着
    Puppet 客户端只需要接收较小的基础设施 CRL，这对于有大量服务器更替的环境非常重要。将维护以下文件：
- en: '`Infra_inventory.txt`: A list of certificates the CA signed for infrastructure
    servers'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Infra_inventory.txt`：CA 为基础设施服务器签名的证书列表'
- en: '`Infra_serials`: This file contains an incrementing counter of the new serial
    number for infrastructure servers'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Infra_serials`：此文件包含基础设施服务器新序列号的递增计数器'
- en: '`Infra_crl.pem`: The CRL of infrastructure servers'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Infra_crl.pem`：基础设施服务器的 CRL'
- en: If your organization requires the use of an external CA, it is possible to use
    your organization’s own root CA and import it using the `puppetserver ca import`
    command (the full process is outlined at [https://puppet.com/docs/puppet/latest/server/intermediate_ca.html](https://puppet.com/docs/puppet/latest/server/intermediate_ca.html)),
    leaving Puppet to act just as an intermediate CA. Alternatively, the CA service
    can be disabled by deploying a single externally generated root and signing CA,
    as outlined at [https://puppet.com/docs/puppet/latest/config_ssl_external_ca.html](https://puppet.com/docs/puppet/latest/config_ssl_external_ca.html).
    This book recommends against using this approach as it would require automating
    the distribution of certificates, which Puppet services no longer perform.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的组织需要使用外部 CA，可以使用组织自己的根 CA，并通过`puppetserver ca import`命令导入它（完整过程请参考[https://puppet.com/docs/puppet/latest/server/intermediate_ca.html](https://puppet.com/docs/puppet/latest/server/intermediate_ca.html)），让
    Puppet 充当中间 CA。或者，可以通过部署一个单独的外部生成的根 CA 和签名 CA 来禁用 CA 服务，详细说明请参见[https://puppet.com/docs/puppet/latest/config_ssl_external_ca.html](https://puppet.com/docs/puppet/latest/config_ssl_external_ca.html)。本书不推荐使用此方法，因为它需要自动化证书分发，而
    Puppet 服务不再执行此操作。
- en: When an agent makes a request to the CA, a CSR is sent and the signing policy
    by default has to wait for a manual signing with the CSR stored in the `requests`
    folder. Waiting requests can be reviewed by running `puppetserver ca list` and
    then signed by running `puppetserver ca sign --certname < certname to sign >`.
    All certificates that have been signed can be viewed by running `puppetserver
    ca` `list --all`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当代理向 CA 发出请求时，CSR 会被发送，默认情况下，签名策略需要等待手动签名，CSR 存储在`requests`文件夹中。待签名的请求可以通过运行`puppetserver
    ca list`进行查看，然后通过运行`puppetserver ca sign --certname < certname to sign >`进行签名。所有已签名的证书可以通过运行`puppetserver
    ca list --all`来查看。
- en: 'If you are using PE, certificate signing can be performed and viewed on the
    PE web console, as pictured in *Figure 10**.2*:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 PE，可以在 PE Web 控制台上执行和查看证书签名，如*图 10.2*所示：
- en: '![Figure 10.2 – PE console certificate signing](img/B18492_10_02.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.2 – PE 控制台证书签名](img/B18492_10_02.jpg)'
- en: Figure 10.2 – PE console certificate signing
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – PE 控制台证书签名
- en: Certificates can be revoked using the `puppetserver ca revoke --certname < certname
    to revoke >` command, and to clean up and remove a revoked certificate from the
    CA, you can then run `puppetserver ca clean --certname < revoked` `certname >`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`puppetserver ca revoke --certname < certname to revoke >`命令吊销证书，并且可以运行`puppetserver
    ca clean --certname < revoked certname >`来清理并从 CA 中删除被吊销的证书。
- en: It is common when manual auto signing is used for a workflow that tools such
    as VMware’s **vRealize Orchestrator** (**VRO**) will make calls to the CA API
    as part of the deployment and decommissioning of servers.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用手动自动签名的工作流中，像 VMware 的**vRealize Orchestrator**（**VRO**）这样的工具通常会在部署和退役服务器时调用
    CA API。
- en: To automate this process, auto signing can be configured in three ways. In what
    is known as `autosign = true` is added to the `master` section of `puppet.conf`,
    this change causes the CA to sign any request and should never be used in a production
    environment.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了自动化此过程，可以通过三种方式配置自动签名。将 `autosign = true` 添加到 `puppet.conf` 的 `master` 部分时，该更改会导致
    CA 签署任何请求，但绝不应在生产环境中使用。
- en: 'The second way is to create an `autosign.conf` file at `/etc/puppetlabs/puppet/autosign.conf`.
    In this file, there can be server names or domain name globs where each line represents
    a node name or a domain that can be auto-signed. For example, let’s say a file
    had the following content:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是在 `/etc/puppetlabs/puppet/autosign.conf` 创建一个 `autosign.conf` 文件。在此文件中，可以包含服务器名称或域名通配符，每一行代表一个可以自动签名的节点名称或域名。例如，假设文件内容如下：
- en: '[PRE4]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This would mean that `server1.puppet.com` and any server in the `example.com`
    domain would be auto-signed.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着 `server1.puppet.com` 和 `example.com` 域中的任何服务器都会被自动签名。
- en: The third method is to set the `autosign` value in the `puppet.conf` file to
    be equal to a script. This script can be in any language and will receive as its
    first argument the certificate name and then the CSR contents as standard input.
    The script should then end with a zero-return code to sign the script or a non-zero
    code to not sign it. This leads to a common method of CSRs containing a secret
    to check in the script, or in the public cloud, tags can be used. It is beyond
    the scope of this book to discuss writing these scripts, and while Puppet only
    provides a description of how to construct these scripts at [https://puppet.com/docs/puppet/latest/ssl_autosign.html#ssl_policy_based_autosigning](https://puppet.com/docs/puppet/latest/ssl_autosign.html#ssl_policy_based_autosigning),
    Amazon gives an excellent example at [https://aws.amazon.com/blogs/mt/aws-opsworks-puppet-enterprise-and-an-alternate-implementation-for-policy-based-auto-signing/](https://aws.amazon.com/blogs/mt/aws-opsworks-puppet-enterprise-and-an-alternate-implementation-for-policy-based-auto-signing/).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种方法是将 `autosign` 值设置为 `puppet.conf` 文件中的一个脚本。该脚本可以是任何语言编写的，并且将接收证书名称作为第一个参数，然后将
    CSR 内容作为标准输入。脚本应以零返回码结束以进行签名，或者以非零返回码结束以不进行签名。这导致了一个常见的方法，即在 CSR 中包含一个用于检查的秘密，或者在公共云中使用标签。讨论编写这些脚本超出了本书的范围，尽管
    Puppet 只提供了如何构建这些脚本的说明，地址为 [https://puppet.com/docs/puppet/latest/ssl_autosign.html#ssl_policy_based_autosigning](https://puppet.com/docs/puppet/latest/ssl_autosign.html#ssl_policy_based_autosigning)，而亚马逊在
    [https://aws.amazon.com/blogs/mt/aws-opsworks-puppet-enterprise-and-an-alternate-implementation-for-policy-based-auto-signing/](https://aws.amazon.com/blogs/mt/aws-opsworks-puppet-enterprise-and-an-alternate-implementation-for-policy-based-auto-signing/)
    提供了一个很好的示例。
- en: This section has laid out how a CA is configured and run as a Puppet server.
    Later in this chapter, the full lifecycle of agents will be reviewed, showing
    how the client creates a CSR and uses the CA to finish the services offered by
    Puppet Server and looking at JRuby interpreters.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 本节已阐述了如何配置 CA 并将其作为 Puppet 服务器运行。本章稍后将回顾代理的完整生命周期，展示客户端如何创建 CSR 并使用 CA 完成 Puppet
    Server 提供的服务，并查看 JRuby 解释器。
- en: JRuby interpreters
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JRuby 解释器
- en: 'JRuby is a Java implementation of Ruby allowing for the use of Ruby on JVMs;
    this allows for greater scalability than with traditional Ruby deployments such
    as Ruby on Rails as most Ruby interpreters aren’t capable of thread safety and
    use locks to run one thread at a time. Puppet Server has a pool of JRuby interpreters/instances
    that are available to perform various application work such as compiling catalogs
    and handling reports. The number of interpreters in the pool reflects how many
    Ruby application actions can be run simultaneously and can be configured with
    the `max-active-instances` parameter in the `puppetserver.conf` file, in PE via
    Hiera in the console, or in code via `puppet_enterprise::master::puppetserver::
    jruby_max_active_instances`. We will be looking at this in more detail in [*Chapter
    13*](B18492_13.xhtml#_idTextAnchor321), where we discuss the metrics and tooling
    to review and set this sizing.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: JRuby 是 Ruby 的 Java 实现，允许在 JVM 上使用 Ruby；这比传统的 Ruby 部署（如 Ruby on Rails）具有更好的可扩展性，因为大多数
    Ruby 解释器不支持线程安全，且使用锁来一次运行一个线程。Puppet Server 拥有一个 JRuby 解释器/实例池，这些实例可以执行各种应用程序工作，如编译目录和处理报告。池中的解释器数量反映了可以同时运行的
    Ruby 应用程序操作的数量，可以通过 `puppetserver.conf` 文件中的 `max-active-instances` 参数配置，或通过控制台中的
    Hiera 在 PE 中配置，或通过 `puppet_enterprise::master::puppetserver::jruby_max_active_instances`
    在代码中配置。我们将在 [*第13章*](B18492_13.xhtml#_idTextAnchor321) 中更详细地讨论这一点，届时我们将讨论用于审查和设置此大小的度量标准和工具。
- en: Having discussed the components of Puppet Server, we will now look at the configuration
    such as users, logging, and filesystems to understand where these services can
    be customized and what is required by them.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论完 Puppet Server 的组件后，我们将查看诸如用户、日志记录和文件系统等配置，以了解这些服务可以如何定制以及它们的要求。
- en: Configuration and logs for Puppet Server
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Puppet Server 的配置和日志
- en: We briefly touched on certain configuration files and the settings available
    as we discussed each component, but we will give a summary here. For most of the
    configuration files, it is unnecessary to customize them, and most defaults will
    meet your requirements.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在讨论每个组件时简要提到了某些配置文件和可用设置，但我们将在此总结。对于大多数配置文件，通常不需要进行自定义，大多数默认设置就能满足您的要求。
- en: For PE, the `pe-puppetserver` Puppet Server service will run under a `pe-puppet`
    account, while on open source Puppet, the `puppetserver` service will be run under
    the `puppet` account. In both accounts, they will have a `nologin` shell set so
    that the user just provides an account to run the service and own relevant files
    for the service.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 PE，`pe-puppetserver` Puppet Server 服务将在 `pe-puppet` 账户下运行，而在开源 Puppet 上，`puppetserver`
    服务将在 `puppet` 账户下运行。在这两个账户中，它们将设置 `nologin` shell，以便用户仅提供一个账户来运行服务并拥有服务相关的文件。
- en: 'The following configuration files and application directories will be created
    and used:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下配置文件和应用目录将被创建并使用：
- en: '`/etc/puppetlabs/puppetserver/bootstrap.cfg`: A file containing a list of services
    that Trapperkeeper should start up; these are the handlers mounted by the embedded
    web server.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/puppetlabs/puppetserver/bootstrap.cfg`：此文件包含 Trapperkeeper 应启动的服务列表；这些是由嵌入式
    Web 服务器挂载的处理程序。'
- en: '`/etc/puppetlabs/puppetserver/request-logging.xml`: A file defining how HTTP
    access requests are logged.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/puppetlabs/puppetserver/request-logging.xml`：定义 HTTP 访问请求如何被记录的文件。'
- en: '`/etc/puppetlabs/puppetserver/conf.d`: This directory contains the following
    main configuration files for components in HOCON format:'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/puppetlabs/puppetserver/conf.d`：此目录包含以下主要的 HOCON 格式配置文件：'
- en: '`global.conf`: This file sets global configuration settings for Puppet and
    by default just contains the logging config file location.'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`global.conf`：此文件为 Puppet 设置全局配置，默认仅包含日志配置文件的位置。'
- en: '`webserver.conf`: This file configures the embedded web server with details
    such as port and logging.'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webserver.conf`：此文件配置嵌入式 Web 服务器的细节，如端口和日志记录。'
- en: '`web-routes.conf`: This file sets mount points for Puppet’s web services.'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web-routes.conf`：此文件为 Puppet 的 Web 服务设置挂载点。'
- en: '`puppetserver.conf`: This file sets the configuration for the core Puppet server
    application such as the number of `jruby` instances running.'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`puppetserver.conf`：此文件设置核心 Puppet Server 应用程序的配置，例如正在运行的 `jruby` 实例数量。'
- en: '`auth.conf`: This file sets the access permissions for endpoints mounted by
    `web-routes.conf`.'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auth.conf`：此文件设置由 `web-routes.conf` 挂载的端点的访问权限。'
- en: '`ca.conf`: This file configures settings for the CA.'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ca.conf`：此文件配置 CA 的设置。'
- en: '`products.conf`: An optional file that can set product settings such as analytics
    data and update checks.'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`products.conf`：一个可选文件，可以设置产品设置，如分析数据和更新检查。'
- en: '`/etc/puppetlabs/puppetserver/ssl/ca`: Certificates and keys related to the
    Puppet CA (`/etc/puppetlabs/puppet/ssl/ca` in Puppet 6 and below).'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/puppetlabs/puppetserver/ssl/ca`：与 Puppet CA 相关的证书和密钥（在 Puppet 6 及以下版本中为
    `/etc/puppetlabs/puppet/ssl/ca`）。'
- en: '`/opt/puppetlabs/puppet/lib/ruby/vendor_gems`: Puppet Server puts Ruby gems
    related to the operation of the CA in this directory.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/opt/puppetlabs/puppet/lib/ruby/vendor_gems`：Puppet Server 将与 CA 操作相关的 Ruby
    gems 放置在此目录中。'
- en: '`/opt/puppetlabs/server`: This directory contains the `JRuby-gems` and binaries
    for running Puppet Server.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/opt/puppetlabs/server`：此目录包含用于运行 Puppet Server 的 `JRuby-gems` 和二进制文件。'
- en: '`/var/run/puppetlabs/puppetserver/puppetserver.pid`: This file contains the
    PID of the running Puppet process.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/var/run/puppetlabs/puppetserver/puppetserver.pid`：此文件包含正在运行的 Puppet 进程的 PID。'
- en: '`/etc/puppetlabs/puppet.conf`: This file holds the configuration for both the
    Puppet client and Puppet Server on the primary. These settings can be viewed by
    running `puppet` `config print`.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/puppetlabs/puppet.conf`：此文件包含主机上 Puppet 客户端和 Puppet Server 的配置。可以通过运行
    `puppet` `config print` 查看这些设置。'
- en: The vast majority of settings in the files will be used at default values unless
    external integrations such as the external root CA are required and are only worth
    mentioning as a reference to understand the setup of the Puppet. A full reference
    and options for settings can be reviewed at [https://puppet.com/docs/puppet/latest/server/configuration.html](https://puppet.com/docs/puppet/latest/server/configuration.html
    ) for `/``etc/puppetlab/puppetserver`-based settings.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 文件中的绝大多数设置将使用默认值，除非需要外部集成，如外部根CA等，这些设置只作为参考来帮助理解Puppet的配置。有关设置的完整参考和选项，可以在[https://puppet.com/docs/puppet/latest/server/configuration.html](https://puppet.com/docs/puppet/latest/server/configuration.html)查看`/etc/puppetlab/puppetserver`基础设置。
- en: Note
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you have chosen one of the open source Puppet automation tools/modules discussed
    in the introduction, it may allow the setting of configuration values on installation.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择了引言中提到的某个开源Puppet自动化工具/模块，它可能在安装时允许设置配置值。
- en: PE users should be aware due to extra automation of configuration that a lot
    of those settings such as those in `puppetserver.conf` are configured via Hiera,
    and the documentation at [https://puppet.com/docs/pe/2021.7/config_puppetserver.html](https://puppet.com/docs/pe/2021.7/config_puppetserver.html
    ) should be followed for the configuration.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: PE用户应注意，由于配置的自动化程度较高，许多设置（例如`puppetserver.conf`中的设置）是通过Hiera配置的，应遵循[https://puppet.com/docs/pe/2021.7/config_puppetserver.html](https://puppet.com/docs/pe/2021.7/config_puppetserver.html)中的文档进行配置。
- en: The configuration for tuning these settings will be looked at in more detail
    in [*Chapter 13*](B18492_13.xhtml#_idTextAnchor321).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 调整这些设置的配置将在[*第13章*](B18492_13.xhtml#_idTextAnchor321)中详细讨论。
- en: The full options for the settings for `/etc/puppetlabs/puppet.conf` can be reviewed
    at [https://www.puppet.com/docs/puppet/latest/config_file_main.html](https://www.puppet.com/docs/puppet/latest/config_file_main.html);
    the file itself provides sections that can configure the Puppet server, the Puppet
    agent, and how `puppet apply` runs. The sections are `main`, which provides default
    values, `agent`, which provides settings to the Puppet client, `user`, which provides
    settings for when using Puppet `apply`, and `master`/`server` for applying settings
    to the Puppet server.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/puppetlabs/puppet.conf`的完整设置选项可以在[https://www.puppet.com/docs/puppet/latest/config_file_main.html](https://www.puppet.com/docs/puppet/latest/config_file_main.html)查看；该文件本身提供了配置Puppet服务器、Puppet代理，以及`puppet
    apply`运行方式的各个部分。各部分包括`main`（提供默认值）、`agent`（为Puppet客户端提供设置）、`user`（提供使用Puppet `apply`时的设置），以及`master`/`server`（用于将设置应用于Puppet服务器）。'
- en: Since Puppet 6, it has been possible to use a `server` section instead of a
    `master` section, but many automation tools have not caught up with this change,
    and as they are not interchangeable terms and could create confusion, be careful
    to only use the term relevant to your implementation.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 自Puppet 6版本以来，已可以使用`server`部分代替`master`部分，但许多自动化工具尚未跟进这一变化，由于它们不是可互换的术语，且可能会引起混淆，因此请小心，仅使用与您的实现相关的术语。
- en: Puppet applies settings from the `master`/`server`, `apply`, or `agent` section
    first, then falls back to the `main` section and, if it finds no setting, will
    use a default.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet首先应用来自`master`/`server`、`apply`或`agent`部分的设置，然后回退到`main`部分，如果找不到设置，则会使用默认值。
- en: 'Let’s look at some example content of a file on a `peadm` built Puppet lab
    server:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下在`peadm`构建的Puppet实验室服务器上某个文件的示例内容：
- en: '[PRE5]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The square brackets indicate the name of a section and then a set of key-value
    pairs. The settings here show the certificate name (`certname`) of our Puppet
    server and also show that it sends reports to PuppetDB via the `reports` setting,
    that it is set up to store catalog, node, and fact information with `storeconfigs`
    set to `true`, that these will be stored in PuppetDB, and that `storeconfigs_backend`
    is set to PuppetDB. Finally, `node_terminus` is set to `classifier`, which reflects
    how the primary server should classify clients. This will be discussed in greater
    detail in the next chapter.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 方括号表示一个部分的名称，后面跟着一组键值对。这里的设置展示了我们Puppet服务器的证书名称（`certname`），还表明它通过`reports`设置将报告发送到PuppetDB，设置为`storeconfigs=true`时，它会存储目录、节点和事实信息，这些信息将存储在PuppetDB中，并且`storeconfigs_backend`设置为PuppetDB。最后，`node_terminus`设置为`classifier`，这反映了主服务器应如何分类客户端。这个内容将在下一章中详细讨论。
- en: 'The best way to view and manipulate the settings including defaults not set
    by `puppet.conf` is by using the `puppet` `config` command, which can show all
    settings. By running `puppet config print all known`, the settings will be printed,
    or an individual setting can be printed by detailing the section and value to
    print via `puppet config print` `--section` `master` `certname`. The `puppet`
    `config` command can also add or remove values using the `set` or `delete` options
    and selecting a section key and value to perform an action on. For example, the
    following commands will delete `storeconfigs` from the `master` section and change
    the certificate name to `newname.example.com`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 查看和操作设置（包括`puppet.conf`中未设置的默认值）最好的方法是使用`puppet` `config`命令，它可以显示所有设置。通过运行`puppet
    config print all known`，设置将被打印出来，或者可以通过详细说明部分和要打印的值来打印单个设置，命令为`puppet config print`
    `--section` `master` `certname`。`puppet` `config`命令还可以使用`set`或`delete`选项添加或删除值，并选择一个部分键和值来执行操作。例如，以下命令将从`master`部分删除`storeconfigs`并将证书名称更改为`newname.example.com`：
- en: '[PRE6]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These commands will automatically add a section if it’s not already in the file,
    but the Puppet service would need to be restarted for any changes to take place.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将在文件中没有相应部分时自动添加该部分，但Puppet服务需要重启以使任何更改生效。
- en: We will work with more examples of manipulating the `puppet.conf` file as we
    look at the agent lifecycle in the next section, but the full options and syntax
    for the `puppet.conf` file can be viewed at [https://puppet.com/docs/puppet/latest/config_file_main.html](https://puppet.com/docs/puppet/latest/config_file_main.html).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分我们将通过更多示例操作`puppet.conf`文件，查看代理生命周期，但`puppet.conf`文件的完整选项和语法可以查看[https://puppet.com/docs/puppet/latest/config_file_main.html](https://puppet.com/docs/puppet/latest/config_file_main.html)。
- en: 'Puppet Server by default keeps logs at `/var/log/puppetlabs/puppetserver` in
    the following files:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Puppet服务器会将日志保存在`/var/log/puppetlabs/puppetserver`下的以下文件中：
- en: '`Puppetserver.log`: This is where the primary server logs activity such as
    compilation errors and warnings'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Puppetserver.log`：这是记录主要服务器活动（如编译错误和警告）日志的地方。'
- en: '`Puppetserver-access.log`: This is where requests to HTTP endpoints are logged'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Puppetserver-access.log`：这是记录对HTTP端点的请求的地方。'
- en: '`Puppetserver_gc.log`: This is where logs of garbage collection are gathered'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Puppetserver_gc.log`：这是收集垃圾回收日志的地方。'
- en: Now that we have reviewed the Puppet server components fully, we will look at
    the Puppet agent configuration and lifecycle, which will show how these services
    are used by a client, and how to monitor and review the logging of a cycle.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经全面回顾了Puppet服务器组件，接下来我们将查看Puppet代理的配置和生命周期，了解这些服务如何被客户端使用，以及如何监控和查看一个周期的日志。
- en: The Puppet agent-to-server lifecycle
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Puppet代理到服务器的生命周期。
- en: This section will look at how the Puppet agent makes requests to the Puppet
    server components we have run through and how it secures its communications before
    requesting configuration to enforce from the Puppet servers. It should be noted
    the Puppet servers themselves also contain Puppet agents.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将讨论Puppet代理如何向我们运行的Puppet服务器组件发出请求，以及它在请求配置以强制执行时如何确保其通信安全。需要注意的是，Puppet服务器本身也包含Puppet代理。
- en: The installation of Puppet agents is detailed at [https://puppet.com/docs/puppet/latest/install_agents.html#install_agents](https://puppet.com/docs/puppet/latest/install_agents.html#install_agents
    ) for open source and [https://puppet.com/docs/pe/2021.7/installing_agents.html#installing_agents](https://puppet.com/docs/pe/2021.7/installing_agents.html#installing_agents
    ) for PE. Integrating this install with your server deployment workflow and ensuring
    the necessary configuration is placed at `/etc/puppetlab/puppet.conf` is critical
    for automation.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet代理的安装详细信息请参见[https://puppet.com/docs/puppet/latest/install_agents.html#install_agents](https://puppet.com/docs/puppet/latest/install_agents.html#install_agents)（开源）和[https://puppet.com/docs/pe/2021.7/installing_agents.html#installing_agents](https://puppet.com/docs/pe/2021.7/installing_agents.html#installing_agents)（PE）。将此安装与服务器部署工作流集成，并确保将必要的配置放置在`/etc/puppetlab/puppet.conf`中，对于自动化至关重要。
- en: Note
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `puppet_conf` module provides tasks to manage Puppet configuration files
    ([https://forge.puppet.com/modules/puppetlabs/puppet_conf](https://forge.puppet.com/modules/puppetlabs/puppet_conf)).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`puppet_conf`模块提供了管理Puppet配置文件的任务（[https://forge.puppet.com/modules/puppetlabs/puppet_conf](https://forge.puppet.com/modules/puppetlabs/puppet_conf)）。'
- en: Most of the settings will depend on your environment setup, but for most environments,
    the defaults will be taken with the critical setting of ensuring that the server
    setting in the `agent` section is set so that the agent knows which Puppet server
    to contact – open source Puppet or PE-Puppet. The PE service can then be started
    under the root user. This will contact the Puppet server every 30 minutes by default
    or can be triggered by running the `puppet agent -``t` command.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10**.3* shows the workflow of this Puppet certificate process as the
    client ensures it has the signed SSL certificate to ensure secure communication
    with the Puppet server:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Puppet client certificate workflow](img/B18492_10_03.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Puppet client certificate workflow
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to validate the certificates. In the `ssl` directory titled
    `/etc/puppetlabs/puppet/ssl`, the following files will already exist or be created
    in this process:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '`private_keys/<certificate_name>.pem`: The private key used to create a CSR'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`certs/<certificate_name>.pem`: The signed certificate returned for this client'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`certs/ca.pem`: A copy of the CA certificate sent from the Puppet server'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`crl.pem`: The CRL from the Puppet server'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`certificate_requests/<certificate_name>.pem`: The CSR to be sent to the Puppet
    server, which is deleted once a signed certificate is received'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to this directory, it is possible to create a `/etc/puppetlabs/puppet/csr_attributes.yaml`
    file and include the trusted facts to be created in the CSR. This will cause the
    trusted facts to be included in the certificate for the client when the CSR is
    signed by the Puppet server.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Using trusted facts can be useful to ensure hard classification information
    is not changed, such as a production server being reclassified for development,
    or the role being changed, since both could result in lower levels of security.
    The **organization ID** (**OID**) numbers translate into names, which can be reviewed
    at [https://puppet.com/docs/puppet/latest/ssl_attributes_extensions.html](https://puppet.com/docs/puppet/latest/ssl_attributes_extensions.html).
    This file must exist before the CSR is created; otherwise, the only way to change
    the CSR or certificate is to start again.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: As *Figure 10**.3* shows, if a private key doesn’t exist, the client makes a
    new key before checking for local copies of `ca.pem` and `CRL.pem`, making a request
    to the server, and downloading if either is absent. The next step is to then check
    whether a signed certificate exists and request it from the client if it does
    not. If a signed client certificate exists, it can continue to request node data;
    otherwise, it will create a CSR file and send it to the primary server. If the
    `waitcert` setting is enabled in `puppet.conf`, the client will then wait for
    the CSR to be signed by the server and check the status with the primary server
    every 2 minutes On future runs, the client will present its signed certificate
    to the server as proof of its identity.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Having secured communication, the first step is to perform plugin sync from
    the server to the client, which ensures all facts, functions, resource types,
    resource providers, and Augeas lenses are downloaded to the client using the `file_metadata`
    endpoint.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Once this has been completed, the client runs `facter`, sends the output to
    the Puppet client, and requests a catalog from the Puppet server using the `\catalog`
    endpoint. A copy of this catalog is stored in the `cache` directory (configured
    using the `vardir` parameter in `puppet.conf`) on the client, which by default
    is `%PROGRAMDATA%\PuppetLabs\puppet\cache\client_data\catalog\<certname>.json`.
    (`PROGRAMDATA` is generally `C:\Program Data\` on Windows and `/opt/puppetlabs/puppet/cache/client_data/catalog/<certname>.json`
    for Linux- and Unix-based systems.) The client then receives this catalog and
    implements the steps, enforcing the state described in the Puppet code, or if
    the client is set to be run in no-op mode, it will simulate the catalog. The client
    generates a report, which is then sent back by default to the Puppet server using
    the `report` endpoint. This can be configured to send the report to other report
    processors such as Splunk, which will be discussed in [*Chapter 13*](B18492_13.xhtml#_idTextAnchor321).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the catalog in the `client_data` folder, several other useful
    files for investigation are generated in the `cache` directory:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '`lib`: This is a cache for various plugins synced by plugin sync from the primary
    server.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`facter`: This will contain custom facts.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`facts.d`: Here, external facts are cached by plugin sync from the primary.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reports`: This contains the last generated report file.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`state`: This directory contains the files and directories associated with
    the state of previous Puppet runs:'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`classes.txt`: A list of classes that were included in the last catalog applied'
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`graphs`: If the `graph` option is used during a Puppet run, the generated
    .dot graph files of resources and dependencies will be saved here'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`last_run_report.yaml`: This is a full report of all resources and how they
    were checked or changed during the catalog enforcement'
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resources.txt`: A list of resources that were included in the last catalog
    applied'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`state.yaml`: A list of all resources and when they were last checked or synced,
    used with features such as `audit`'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Several directories and files have been ignored as they are either for legacy
    purposes or for practices that this book does not recommend, such as `filebucket`.
    A full listing can be seen at [https://puppet.com/docs/puppet/latest/dirs_vardir.html](https://puppet.com/docs/puppet/latest/dirs_vardir.html).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: The cached catalog will be used in the event of the client losing communication
    with the Puppet infrastructure to ensure it continues to enforce its last known
    state.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step of the agent-to-server cycle is to send the event report to the
    Puppet Server. These reports will reflect events of what happened for each resource
    in the catalog. These events can have one of the following states:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Failure – This will be an event with errors in applying the catalog or issues
    such as dependencies or an issue with that particular resource
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrective – The resource was in the correct state in the previous run but has
    had to be corrected
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intentional – The resource had to be created or corrected but was not in the
    correct state in the previous run
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unchanged – The resource is in the correct state and requires no change
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unchanged events are not reported in Puppet 8 by default. This change was made
    to reduce the store space required for storing reports. This can be changed by
    setting `exclude_unchanged_resources=false` in each agent's `puppet.conf` file.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: The report events will also reflect what mode the client agent is running or
    whether a resource is set to be applied differently from the client. While the
    same event states still apply, each event will report if the event took place
    in execution mode or in no-op mode. As was previously discussed in [*Chapter 3*](B18492_03.xhtml#_idTextAnchor048)*,*
    no-op mode means the resource is only effectively tested to see whether the resource
    will need to be changed to meet its declared state. In [*Chapter 15*](B18492_15.xhtml#_idTextAnchor359),
    we will discuss how this can be useful in heritage envionments where we want to
    see how big the configuration drift is and choose a progressive approach to get
    there to avoid causing issues on production systems.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: In terms of accessing these reports, we will see in [*Chapter 13*](B18492_13.xhtml#_idTextAnchor321)how
    report processors can be used to send them to third-party tools and in [*Chapter
    14*](B18492_14.xhtml#_idTextAnchor340)how Puppet Enterprise provides an event
    viewer interface as part of its graphical console.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Lab – monitoring certificate signing logging
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To better understand the process, we will now describe how we can monitor the
    process of a Puppet run by removing the certificates of our node and re-registering.
    During the registration, we will monitor the logs to see the API requests made
    through this process and note the steps of the process. Here are the steps:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Open SSH terminal sessions to the Linux client and two separate SSH terminal
    sessions to the primary Puppet server.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the Linux client, run the following command:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: On one of the server sessions, run `puppetserver ca clean --certname <instance
    name>` (note that this should be the certificate name, which can be checked via
    `puppet config print certname` on the node).
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the Linux client, move the `ssl` directory to a backed-up location using
    the following command:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: On one of the Puppet server’s sessions, run `tail -f /var/log/puppetlabs/puppetserver/puppetserver-access.log`,
    and on the other, run `tail -``f /var/log/puppetlabs/puppetserver/puppetserver.log`.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the node, run `puppet agent -t` and see the calls on the Puppet server sessions.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the web console, under the `puppet agent –t` on the client. Note the new
    calls on the server in the `access.log` and `puppetserver.log` files and how this
    relates to the steps discussed in this section.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View the catalog received for the client and investigate the other files in
    the cache.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hint
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Using a tool such as `jq` can make viewing JSON much easier ([https://stedolan.github.io/jq/download/](https://stedolan.github.io/jq/download/)).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'To view an example output of logging for this lab, see the following files:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/puppet_access_log_extract](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/puppet_access_log_extract)
    shows the access logs with comments explaining the output'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/puppet_server_log_extract](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/puppet_server_log_extract)
    shows the Puppet server log with comments explaining the output'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/puppet_client_terminal.txt](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/puppet_client_terminal.txt)
    shows the client terminal and commands entered'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/puppet_server_terminal.txt](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/puppet_server_terminal.txt)
    shows the server terminal and commands entered'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: PuppetDB and PostgreSQL
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PuppetDB allows for the collection of Puppet data and advanced features such
    as exported resources. In open source Puppet, it is entirely optional, while PE
    installs PuppetDB by default. The following is kept by PuppetDB:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: The last facts from the nodes
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last catalog compiled for each node
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 14 days (default) of event reports for each node
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exported resources
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PuppetDB is a Clojure frontend application running on a JVM, using PostgreSQL
    as a backend database. This common architecture is where the backend database
    just provides the tables, and the frontend database contains the application objects,
    giving some key advantages compared to a single database. It eases the updating
    process of PuppetDB since the actual data can be left in the backend table, and
    it also allows great scalability—as we will see in the last section of this chapter,
    *Scaling with compilers*—where PuppetDB can be scaled horizontally by running
    PuppetDB on many compiler servers, as a result reducing the load on the primary
    server PuppetDB service.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Information on the installation and configuration of PuppetDB is provided at
    [https://forge.puppet.com/modules/puppetlabs/puppetdb](https://forge.puppet.com/modules/puppetlabs/puppetdb).
    PuppetDB is likely to be included in any automation you choose and is part of
    PE.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: 'PostgreSQL creates a `pe-postgres` user for PE or a `postgres` user for open
    source Puppet, which is created as a user to run the PostgreSQL database. This
    user will use a `nologin` shell and own relevant files for running Postgres. The
    following directories are used by PostgreSQL:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '`/opt/puppetlabs/server/apps/postgresql/{version}`: To install the database
    application'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/opt/puppetlabs/server/data/postgresql/{version}`: To contain the data files
    of the database'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/log/puppetlabs/postgresql/{version}`: To contain the logs of the database'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PuppetDB creates a `pe-puppetdb` user for PE or a `puppetdb` user for open
    source Puppet, which is created as a user to run the PuppetDB database under with
    a `nologin` shell and to own the relevant file for running PuppetDB. As PuppetDB
    is a Clojure application running on the JVM; it is very similar to puppet web
    server in its structure with a handler mounted at a `/pdb` endpoint and an `auth.conf`
    file defining who can access this endpoint. The following directories are used
    by PuppetDB, and some key files are highlighted:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '`/etc/puppetlabs/puppetdb`: This directory contains configuration files for
    PuppetDB, including the following:'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bootstrap.conf`: The `bootstrap.conf` file the lists services that should
    be started in the Trapperkeeper framework'
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/puppetlabs/puppetdb/conf.d`: This directory contains configuration files
    in an `ini` format:'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auth.conf`: Configures authorization for who can access the endpoints made
    available'
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`routing.ini`: Configures which handlers should be made available at endpoints'
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/opt/puppetlabs/server/apps/puppetdb`: This directory contains the application
    binaries for PuppetDB'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/opt/puppetlabs/server/data/puppetdb`: This directory contains the data of
    PuppetDB'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is beyond the scope of this book to look at the in-depth configuration of
    `PuppetDB`, but you can refer to [https://puppet.com/docs/puppetdb/latest/configure.html](https://puppet.com/docs/puppetdb/latest/configure.html
    ) for more information. However, in [*Chapter 13*](B18492_13.xhtml#_idTextAnchor321),
    we will look in more depth at how to monitor, review, and tune PuppetDB and PostgreSQL
    performance and how modules such as [https://forge.puppet.com/modules/puppetlabs/pe_databases](https://forge.puppet.com/modules/puppetlabs/pe_databases)
    can assist with maintenance.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: For now, we will review how the data can be accessed by using PQL with HTTP
    calls to the `/pdb` endpoint or via the `puppet query` command line to make calls
    to the endpoint.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: The **Abstract Syntax Tree** (**AST**) query language is also available as a
    format to use for queries. However, with PQL available, it has little use now
    but can be reviewed at [https://www.puppet.com/docs/puppetdb/8/api/query/v4/ast.html](https://www.puppet.com/docs/puppetdb/8/api/query/v4/ast.html).
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: 'PuppetDB is structured into entities to allow for accessing different types
    of data. Here is a list of each entity and a brief description of what the endpoint
    contains:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '`aggregate_event_counts`: Aggregate counts of the `event_counts` entity'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`catalogs`: The catalogs stored for each node'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`edges`: Edges are relationship information in catalogs such as *contains*
    or *requires*'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`environments`: The environments known to PuppetDB'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event_counts`: Event counts about various resources in reports'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`events`: Events reflect the actions performed for a resource returned by a
    report'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`facts`: The facts returned for each node'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fact_contents`: This entity is structured to access fact content more easily'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fact_names`: All known fact names'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fact_paths`: Similar to the `fact_names` entity but provides further granularity
    for structured facts'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nodes`: Node information'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`producers`: Producers are the servers that compiled the catalog and sent the
    report'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reports`: Reports contain the outcome of applying a catalog'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resources`: Resource information in catalogs'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To begin looking at PQL queries, the simplest way is to return all the data
    in an entity. This can be done by simply listing an entity name and empty curly
    braces. For example, to return all node data, it would be `nodes {}`; to search
    for nodes with particular parameters within the curly braces, we use attribute
    names and the value they should equal (`=`), contain (`~`), be less than (`<`),
    or greater than (`>`). For example, to return nodes whose last report status was
    unchanged, the query would be `nodes { latest_report_status = "``unchanged"}`.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: We will not list the output for any of these queries as they can be verbose,
    but you will try to make examples in your lab at the end of this section.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: 'These attribute statements can be further negated with `!`, chained with `and`/`or`,
    and parenthesized with brackets `()` to contain different statements. For example,
    to make a more complicated query to find whether a particular file was declared
    with the wrong permissions, we could run this PQL query:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: On the command line, this can also be run via the `puppet query resource {'latest_report_status
    = "``unchanged"}'`.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: 'PuppetDB queries can also be used in Puppet code with the PuppetDB function.
    Here’s an example:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In all these examples, it has been assumed certificates are set up for secure
    SSL communication either directly on Puppet infrastructure or with clients running
    the query. If using default locations, the `puppet query` command picks up the
    certificates automatically but can also be set like so:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Web points can also be accessed via `curl` or equivalent commands, like so:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To allow queries to be made directly from a desktop or other nodes, the Puppet
    client tools can be used. The setup instructions for installing on Open Source
    Puppet are detailed at [https://puppet.com/docs/puppetdb/latest/pdb_client_tools.html](https://puppet.com/docs/puppetdb/latest/pdb_client_tools.html)
    and Puppet Enterprise has instructions at [https://www.puppet.com/docs/pe/2021.7/installing_pe_client_tools.html](https://www.puppet.com/docs/pe/2021.7/installing_pe_client_tools.html).
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, the SSL authentication can be deactivated to allow unauthenticated
    queries following the instructions at [https://puppet.com/docs/puppetdb/latest/configure.html#jetty-http-settings](https://puppet.com/docs/puppetdb/latest/configure.html#jetty-http-settings).
    This book would strongly advise against this as it would open the data for anyone
    to access on your network.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we showed some of entities and queries it was possible to use
    with PQL. It would be impractical to go through all the possible options available
    to these entities and the range of options available to PQL, but the full details
    can be seen in the documentation at [https://puppet.com/docs/puppetdb/latest/api/query/v4/entities.html](https://puppet.com/docs/puppetdb/latest/api/query/v4/entities.html).
    Additionally further examples of PQL queries can be seen in the documentation
    at [https://puppet.com/docs/puppetdb/latest/api/query/examples-pql.html](https://puppet.com/docs/puppetdb/latest/api/query/examples-pql.html),
    and the Vox Pupuli community is building useful examples on its web pages at [https://voxpupuli.org/docs/pql_queries/](https://voxpupuli.org/docs/pql_queries/).
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Lab – querying PuppetDB
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'SSH to the primary server and query PuppetDB for the following information:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: 'List the memory size of all the compiler servers (*hint*: compiler servers
    all have a trusted fact and Facter has a memory fact)'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List all the services being enforced on the Puppet server
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List the start and end times of the latest report of each server
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example answers can be found at [https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/PQL_samples_answers.txt](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/PQL_samples_answers.txt).
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: Be careful with these queries in production systems working at scale; some endpoints
    such as reports could contain a lot of data, and a query may put a lot of stress
    and load on a system.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: Scaling with compilers
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The review of Puppet platform components so far assumes that all components
    are present on a single primary server. However, as the number of managed nodes
    increases, it becomes impractical for a single server to handle them. According
    to Puppet’s documentation, a primary server can manage up to 2,500 clients on
    default settings. To handle the growing number of nodes, Puppet uses horizontal
    scaling, which involves using Puppet compile servers. In *Figure 10**.4*, a subset
    of primary services is shown to be moved onto compile servers. These servers can
    be configured in a round-robin selection in the client’s configuration file or
    placed behind a load balancer. This enables multiple nodes to work together to
    compile catalogs while still allowing certain services to run on the primary server.
    According to Puppet’s documentation, with the default compiler settings, up to
    3,000 clients can be served per compiler:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.4 – Puppet compiler services](img/B18492_10_04.jpg)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – Puppet compiler services
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: A compile server hosts a subset of services that are present on the primary
    server, such as Puppet Server and PuppetDB. This enables remote completion and
    synchronization of catalog compilation requests, thereby increasing the number
    of JRuby instances required for compiling catalogs.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: The most widely used approach for directing client requests to compile servers
    is to utilize a hardware - or cloud-based load balancer. As there are several
    load balancer options available, Puppet does not provide explicit instructions
    on configuration. However, it recommends using the `/status/v1/simple` endpoint
    to check the health of compile servers. If the load balancer does not support
    HTTP health checks, checking whether the host is listening for TCP connections
    on port `8140` can provide a limited check.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are alternatives to a load balancer, such as using DNS SRV records, which
    is detailed at [https://puppet.com/docs/puppet/latest/server/scaling_puppet_server.html#using-dns-srv-records](https://puppet.com/docs/puppet/latest/server/scaling_puppet_server.html#using-dns-srv-records),
    or using a DNS entry with round-robin settings, as detailed at [https://puppet.com/docs/puppet/latest/server/scaling_puppet_server.html#using-round-robin-dns](https://puppet.com/docs/puppet/latest/server/scaling_puppet_server.html#using-round-robin-dns),
    but as these tend to be much less frequently used, we will not go into detail
    in this book.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: In the `puppet.conf` file, it is possible to add a list of servers in the client
    server value to contact but this list would work only in the event of failures
    and would not try to balance out connections.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: With compile servers, the CA remains on a single Puppet primary server and is
    referred back to when clients send their CSR or certificates for checking.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As stated at the beginning of the chapter, we will refrain from delving into
    the installation process in detail, as it would not add much value to Puppet’s
    own instructions, available at [https://puppet.com/docs/puppet/latest/server/scaling_puppet_server.html](https://puppet.com/docs/puppet/latest/server/scaling_puppet_server.html
    ) for open source and [https://puppet.com/docs/pe/2021.7/installing_compilers.html](https://puppet.com/docs/pe/2021.7/installing_compilers.html
    ) for PE. However, it is essential to note that compile servers may require `dns_alt_names`
    to be added to their `puppet.conf` file if load balancers are being used in TCP
    proxying mode or a DNS round-robin method. This is necessary to enable all server
    names that may be used in requests through the load balancer.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Even with a load balancer enabled, it is possible to just target compile servers
    directly by running `puppet agent -t server=<server to` `send request>`.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In [*Chapter 13*](B18492_13.xhtml#_idTextAnchor321), we will provide more detailed
    information on how to monitor and manage server settings for scalability, and
    in [*Chapter 14*](B18492_14.xhtml#_idTextAnchor340), we will discuss Puppet’s
    reference architectures for achieving scalability. However, it is important to
    note that there may be latency issues if compile servers are located too far away
    from the primary server. Therefore, it is recommended to keep them within the
    same region in cloud terms, as per best practices.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lab – viewing compiler and load balancer configuration
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The deployed lab environment consists of three compile servers. You can view
    the reports they are compiling and how pecdm configured the load balancer, as
    follows:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the web console and review the report runs of the Puppet instance
    server. In the **Metrics** section of a report, look for the **Report submitted
    by** section and note that this may vary in different reports. If there are few
    reports available, enter the **Jobs** section and run Puppet several times on
    your instance node to generate more reports.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View how PECDM created the Azure load balancer in the Terraform module at [https://github.com/puppetlabs/terraform-azure-pe_arch/blob/main/modules/loadbalancer/main.tf](https://github.com/puppetlabs/terraform-azure-pe_arch/blob/main/modules/loadbalancer/main.tf).
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the services provided by the Puppet server
    and how the embedded web server attaches handlers to mount points, which can then
    be requested via HTTP requests to endpoints.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: It was shown that the `/puppet` endpoint provides services for configuration
    requests and how indirectors or environments can request specific components such
    as requesting a catalog from a server. The `/puppet-ca` endpoint similarly used
    indirectors to allow for requests to the CA. The `/puppet-admin-api` endpoint
    was then shown to allow for clearing the environment cache and JRuby instances
    as more advanced administrative actions.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: It was then shown how Puppet creates a CA server with a root CA and an intermediate
    CA to sign or can run in legacy mode with a single combined CA. The options for
    using externally provided certificates were then discussed. The process of signing
    certificate requests was shown, with the `puppetserver certificate` command for
    managing certificates and requests and the `puppet ssl` command for managing agent
    certificate management. It was then shown how this process could be automated
    with auto signing, which could auto-sign everything, based on naming or based
    on a script running and viewing the certificate request.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: JRuby interpreters were discussed, showing how JRuby is an implementation of
    Ruby on Java and capable of running Puppet’s Ruby components, such as compiling
    Puppet code, in a scalable and concurrent way.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the user, service, and configuration files and logging was shown,
    examining the server side of `puppet.conf` and how to configure and view settings
    in the file and defaults using the `puppet` `config` commands.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: Having reviewed the components of Puppet Server, the Puppet client lifecycle
    was then viewed, seeing how the agent makes CSRs to the CA and sends facts and
    a request for a catalog. The logs were viewed to show where requests re made and
    how this can be tracked through requests. It was shown how the client could be
    configured via `puppet.conf` and how additional information could be added to
    the CSR.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: PuppetDB and PostgreSQL were then explored as a frontend/backend database architecture
    that can store reports generated from applying Puppet catalogs along with the
    latest facts and events from nodes. We reviewed the file directories and logging
    locations and then saw how PuppetDB could be queried on the API, command line,
    and Puppet code using PQL.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: Compilers were then shown to be able to allow Puppet Server to scale horizontally
    by allowing Puppet Server and the PuppetDB services to be put onto multiple servers,
    which could be load-balanced for clients.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will show how Puppet classifies clients requesting catalog
    compilations so that it knows which version of code to apply and which classes.
    We will show how environments allow multiple versions of code to exist on the
    primary server and how to use a control repo to manage the modules and versions
    that should be included.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
