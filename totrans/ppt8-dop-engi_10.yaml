- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Puppet Platform Parts and Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have discussed Puppet as a language, but in this chapter and the
    following chapters, we will start to focus on Puppet as a platform and the infrastructure
    and components of the platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 10**.1*, the full architecture of services involved in Puppet Server
    and the Puppet client, to be discussed in this chapter, is shown. These services
    focus on how Puppet code is enforced on servers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Puppet server and client components](img/B18492_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – Puppet server and client components
  prefs: []
  type: TYPE_NORMAL
- en: We will start by highlighting that we do not run through installation methods
    in this book. There are several open source projects to base automation on for
    open source Puppet and Puppet Enterprise; throughout this book, we have used the
    `pead`znd `pecd`m modules as the most automated mechanism for installing **Puppet
    Editor** (**PE**). As components are discussed, it will be noted how the versioning
    of Puppet packages can differ, and we’ll look at some related install versions,
    as well as the key users, directories, configuration files, and services installed.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we will examine the core services provided by the Puppet Server.
    These services include catalog compilation to receive requests from clients, process
    their current state, and determine how they should be configured based on Puppet
    code. A **certificate authority** (**CA**) allows agents to register and communicate
    with the Puppet server securely. It also includes some associated API services
    to access, request, and control those services.
  prefs: []
  type: TYPE_NORMAL
- en: Having established how the server functions, we will then show how the Puppet
    agent communicates with the server, requesting to have a key signed by the CA,
    what the communication for a catalog compilation involves, and how the agent processes
    and stores the returned catalog.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll then view how PuppetDB is used to store, facts, catalogs, and events and
    how we can access this information via both APIs and **Puppet Query Language**
    (**PQL**). The relationship between PuppetDB and PostgreSQL will be examined as
    a frontend application to a backend database architecture, and we will also discuss
    how other data is stored in PostgreSQL by the Puppet services directly.
  prefs: []
  type: TYPE_NORMAL
- en: It will then be shown how the compilation can horizontally scale to compile
    catalogs of hundreds of thousands of servers using compile servers.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout these topics, subtle differences between how PE and Puppet open source
    are set up will be highlighted.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will not cover the PE-specific features of the orchestrator, the
    PE console, or the supported architectures (which can allow for these services
    to be split out into more scalable infrastructure); these will be covered in [*Chapter
    14*](B18492_14.xhtml#_idTextAnchor340).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Puppet platform installation and versioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Puppet Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Puppet agent-to-server life cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PuppetDB and PostgreSQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scaling with compilers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: As part of an effort to remove harmful terminology from its products, Puppet
    dropped the use of the terms *master server* and *compile master* and now uses
    *primary server* and *compile server*. As these names were quite embedded, there
    will be some places where classes or configuration settings do still refer to
    *master*.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Clone the control repo from [https://github.com/puppetlabs/control-repo](https://github.com/puppetlabs/control-repo
    ) to your GitHub account in a repo called `controlrepo-chapter10`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build a large cluster with three compilers and three clients by downloading
    the `params.json` file from [https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/params.json](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/params.json)
    and update it with the location of your control repo and your SSH key for the
    control repo. Then, run the following command from your `pecdm` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Puppet platform installation and versioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book makes the choice not to go into the methods of installing Puppet;
    there is little to add to the installation instructions for open source, documented
    at [https://puppet.com/docs/puppet/latest/server/install_from_packages.html](https://puppet.com/docs/puppet/latest/server/install_from_packages.html),
    and any further choice of automation will depend heavily on the use case of your
    organization and available tooling and product sets you want to integrate with.
  prefs: []
  type: TYPE_NORMAL
- en: For open source Puppet, there are a number of projects automating the deployment,
    configuration, and integration of Puppet, such as example42’s `psick` ([https://github.com/example42/psick](https://github.com/example42/psick))
    or the Foreman project ([https://github.com/theforeman/foreman-installer](https://github.com/theforeman/foreman-installer)),
    which has a specific module for installing Puppet Server ([https://forge.puppet.com/modules/theforeman/puppet](https://forge.puppet.com/modules/theforeman/puppet))
    that can be used even outside of Foreman to install Puppet. Dashboards similar
    to what has been provided by the PE setup can also be found in projects such as
    Puppetboard ([https://forge.puppet.com/modules/puppet/puppetboard](https://forge.puppet.com/modules/puppet/puppetboard))
    or Puppet Summary ([https://github.com/skx/puppet-summary](https://github.com/skx/puppet-summary)).
  prefs: []
  type: TYPE_NORMAL
- en: For PE, although manual instructions are available at [https://puppet.com/docs/pe/2021.7/installing_pe.html](https://puppet.com/docs/pe/2021.7/installing_pe.html),
    the automation choice is clear with the Puppet-supported `peadm` module; in [*Chapter
    12*](B18492_12.xhtml#_idTextAnchor293), we will review how the module is used
    for the lab along with `pecdm` as a Bolt project.
  prefs: []
  type: TYPE_NORMAL
- en: Key points to recognize with the packages installed are that Puppet repositories
    provide set versions of Ruby, OpenSSL, Hiera, and Facter to use for different
    versions of Puppet and that packages such as `puppetserver` may not match the
    Puppet version being installed—for example, Puppet 7.17 will have Puppet server
    version 7.8 installed; these associated versions are available in the release
    notes. For PE, you can see all the underlying open source package versions in
    the documentation at [https://puppet.com/docs/pe/2021.7/component_versions_in_recent_pe_releases.html#component_versions_in_recent_pe_releases](https://puppet.com/docs/pe/2021.7/component_versions_in_recent_pe_releases.html#component_versions_in_recent_pe_releases).
  prefs: []
  type: TYPE_NORMAL
- en: Puppet Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In historic versions of Puppet, Ruby-based solutions such as WEBrick or Passenger
    were used for running the Puppet service, but in all modern versions of Puppet,
    to improve scaling and performance, Puppet Server is run as a Clojure and Ruby
    application on a **Java Virtual Machine** (**JVM**). Puppet Server has a number
    of related services that share state and route requests between them. These services
    run inside a single JVM process, using the Trapperkeeper service framework, which
    is a Clojure framework for hosting long-running applications.
  prefs: []
  type: TYPE_NORMAL
- en: Puppet Server is installed via the `puppetserver` package in open source Puppet
    and the `pe-puppetserver` package in PE. This will create a system service of
    the same name and configuration files that, by default, will be placed in `/etc/puppetlabs/puppetserver/conf.d`
    in **Human-Optimized Config Object Notation** (**HOCON**) format.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The Puppet `hocon` module is the best way to automate the management of HOCON
    files ([https://forge.puppet.com/modules/puppetlabs/hocon](https://forge.puppet.com/modules/puppetlabs/hocon)).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll look at the services that make up Puppet Server.
  prefs: []
  type: TYPE_NORMAL
- en: The embedded web server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Puppet contains a Jetty-based web server in the JVM that sets up the mount points
    and communications necessary for web requests to take place between components
    and to access the APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `webserver.conf` file sets the main configuration for the web server, such
    as the file location of `web-routes.conf` file sets the mount points for web API
    access by mounting the handlers, as shown in the following example file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The core mount points that can be seen in this file required for client-to-server
    communication are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: The `puppet-ca` mount point is used by clients to communicate with the CA service
    and check or make a **certificate signing** **request** (**CSR**).
  prefs: []
  type: TYPE_NORMAL
- en: '`master-service` provides a mount point used by clients to request catalogs
    that are compiled via JRuby interpreters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The request logging configuration set by default in `webserver.conf` is at `/etc/puppetlabs/puppetserver/request-logging.xml`
    and determines how HTTP access requests are logged. By default, messages will
    be logged to `/var/log/puppetlabs/puppetserver/puppetserver-access.log`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This section should have given you an understanding of how the embedded web
    service sets up a web server in the JVM with the mount points necessary for requests
    to be made to the different components of Puppet Server and how it will log these
    requests. Now, we will see the two core APIs accessed via the endpoints made available
    by the mount points, Puppet API via `/puppet` and `/puppet_ca`, and then the Admin
    API via `/puppet_admin_api`.
  prefs: []
  type: TYPE_NORMAL
- en: The Puppet API service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Puppet API service is made up of two endpoints created by the embedded web
    server—`/puppet` for configuration-related services and `/puppet-ca` for the CA.
  prefs: []
  type: TYPE_NORMAL
- en: 'Both are versioned with a string such as `/v3` and authorization is controlled
    via the `auth.conf` file, a HOCON formatted file. It is unlikely you will need
    to edit this file unless requiring more advanced access to integrate services,
    but to show an example of content, the following code allows Puppet nodes to request
    their own catalog from the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: More detailed instructions for customization authorization are available at
    [https://github.com/puppetlabs/trapperkeeper-authorization/blob/main/doc/authorization-config.md](https://github.com/puppetlabs/trapperkeeper-authorization/blob/main/doc/authorization-config.md).
  prefs: []
  type: TYPE_NORMAL
- en: The Puppet agent on all modern versions of Puppet 5 to 8 uses `/puppet/v3` endpoint
    services to manage clients. The `v3` API has two types of endpoints—**indirectors**
    and **environment** endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Indirectors take the form `/puppet/v3/<indirection>/<key>?environment=<environment>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, the indirection value is the indirector requested, the key is the key
    relevant to the call to the indirector, and the environment is the environment
    that should be used for this request. For example, to request a catalog be compiled,
    a client would construct the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following indirectors exist under `/puppet/v3/` for clients:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Facts`: The `facts` endpoint allows setting facts for the specified node name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Catalog:` Returns a catalog for the specified node'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Node`: Returns node information such as classification'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`File bucket` `file`: Manages the contents of a file bucket'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`File content`: Returns file content such as files in modules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`File metadata`: Returns the metadata of a file such as the permissions of
    a file in modules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Report`: Allows the storing of Puppet reports for nodes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following indirectors exist under `/puppet/v3/` for the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Environment classes**: Returns all the classes that can be parsed in the
    requested environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Environment modules**: Returns information about all the modules found in
    an environment, such as their names and versions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Static file content**: Returns the file content of a specific version of
    a file resource in an environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The separate environment endpoint that was not an indirector allows a simple
    call to `/puppet/v3/environments` that returns all environments known to the server.
    In the next chapter, we will talk about environments in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Tools and services can also access these same endpoints to examine data, and
    a `v4` API exists with a catalog endpoint that allows for more extensive use of
    PuppetDB to manipulate facts and the catalog. It is used by tools such as `octocatalog-diff`
    ([https://github.com/github/octocatalog-diff](https://github.com/github/octocatalog-diff)),
    which can generate, compare, and manipulate catalogs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `/puppet-ca` endpoint follows a similar format using `v1` and indirectors,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Certificate**: Returns the certificate of a specified name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Certificate Clean**: Revokes and deletes a certificate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Certificate Status**: Requests the status of a certificate or a CSR'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Certificate Revocation List**: Requests the **Certificate Revocation List**
    (**CRL**) file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As an example, to request a certificate for `server.example.com`, the following
    endpoint would be hit: `/puppet-ca/v1/certificate/server.example.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: These actions will be discussed in more detail in the *CA* section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we did not go into full detail about each endpoint and making
    API calls to them, but later in the chapter, where we look at the client-to-server
    lifecycle, we will follow the logging of calls and highlight their use to show
    how these APIs are used by Puppet. Full details of the endpoints can be viewed
    at [https://puppet.com/docs/puppet/latest/http_api/http_report.html](https://puppet.com/docs/puppet/latest/http_api/http_report.html).
  prefs: []
  type: TYPE_NORMAL
- en: The Admin API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Admin API has just two endpoints at `/puppet_admin/v1/`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Environment cache**: Used to clear the cache of environment data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JRuby pool**: Used to clear the JRuby pool or retrieve a Ruby thread dump
    of running JRuby instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both endpoints are for more in-depth development work, so are beyond the scope
    of this book but help complete the picture of the Puppet server components. Details
    of these endpoints can be viewed at [https://puppet.com/docs/puppet/latest/server/admin-api/v1/jruby-pool.html](https://puppet.com/docs/puppet/latest/server/admin-api/v1/jruby-pool.html
    ) and [https://puppet.com/docs/puppet/latest/server/admin-api/v1/environment-cache.html](https://puppet.com/docs/puppet/latest/server/admin-api/v1/environment-cache.html).
  prefs: []
  type: TYPE_NORMAL
- en: CA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, Puppet uses its own in-built CA and **public key infrastructure**
    (**PKI**) to secure all SSL communications.
  prefs: []
  type: TYPE_NORMAL
- en: Two commands are used to interact with the Puppet CA setup—`puppetserver ca`
    for server-side actions such as signing or revoking certificates and `puppet ssl`
    for agent-side tasks such as requesting and downloading certificates. These commands
    make calls to the `puppet-ca` endpoint via the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Despite the introduction of the `puppet-ca` endpoint, the five commands of
    the previous `ruby ca` implementation were still available until their removal
    in Puppet 6: `puppet certificate`, `puppet cert`, `puppet certificate_request`,
    `puppet ca`, and `puppet certificate_revocation_list`. They have all been replaced
    by the `puppetserver ca` and `puppet ssl` commands. Even if you are using Puppet
    5, it is strongly advised not to use these Ruby commands as using both API and
    Ruby implementations simultaneously can corrupt the CA.'
  prefs: []
  type: TYPE_NORMAL
- en: While the automation of installation discussed in the introduction should cover
    the initial setup, it is worth knowing whether the CA setup has been performed
    by running `puppetserver ca setup`. Before the `puppetserver/pe-puppetserver`
    service has started, it will create a separate root CA and an intermediate signing
    CA. If the `puppetserver/pe-puppetserver` service is started before this step,
    it will create a single combined root and signing CA, which was the prior way
    Puppet operated. Unless you have a specific need for a single certificate, this
    should be avoided. From PE 2019.x and Puppet 6.x, these certificates last 15 years;
    previously, this was 5 years, and it’s important to understand that upgrading
    Puppet versions does not extend the CA.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Extending an expired CA is possible via the `ca_extend` module ([https://forge.puppet.com/modules/puppetlabs/ca_extend](https://forge.puppet.com/modules/puppetlabs/ca_extend)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The keys and certificates created in this step will be created in a directory
    called `/etc/puppetlabs/puppetserver/ca` for Puppet 7 and above or one called
    `/etc/puppetlabs/puppet/ca` for Puppet 6 and below. There is a `/etc/puppetlabs/puppet/ca`
    to the new location to avoid confusion. The directory will contain the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ca_crl.pem`: The CRL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ca_crt.pem`: The CA-signed certificate public certificate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ca_key.pem`: The CA private key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ca_pub.pem`: The CA public key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inventory.txt`: A list of certificates the CA signed with their serial numbers
    and expiry dates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`requests`: Unsigned CSR files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`root_key.pem`: This is the root key used to sign the CA certificate if using
    a separate root CA and an intermediate CA'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`serial`: This file contains an incrementing counter of the new serial number
    for certificates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`signed`: This folder contains all signed CSR files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition to these files, an infrastructure CRL can be maintained, which
    by default is not used in open source Puppet but is used in PE. To have a smaller
    CRL, the `infra_inventory.txt` file is managed to contain the Puppet infrastructure
    servers; when revoked, these systems are added to `infra_crl.pem`. This is enabled
    by setting `infra certificate-authority.enable-infra-crl` to `true` in the `puppet.conf`
    file. We will talk in more detail about the `puppet.conf` file later in this chapter.
    This approach means the Puppet clients only need to receive the small infrastructure
    CRL, which is important for estates with a high churn of servers. The following
    files will be maintained:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Infra_inventory.txt`: A list of certificates the CA signed for infrastructure
    servers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Infra_serials`: This file contains an incrementing counter of the new serial
    number for infrastructure servers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Infra_crl.pem`: The CRL of infrastructure servers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If your organization requires the use of an external CA, it is possible to use
    your organization’s own root CA and import it using the `puppetserver ca import`
    command (the full process is outlined at [https://puppet.com/docs/puppet/latest/server/intermediate_ca.html](https://puppet.com/docs/puppet/latest/server/intermediate_ca.html)),
    leaving Puppet to act just as an intermediate CA. Alternatively, the CA service
    can be disabled by deploying a single externally generated root and signing CA,
    as outlined at [https://puppet.com/docs/puppet/latest/config_ssl_external_ca.html](https://puppet.com/docs/puppet/latest/config_ssl_external_ca.html).
    This book recommends against using this approach as it would require automating
    the distribution of certificates, which Puppet services no longer perform.
  prefs: []
  type: TYPE_NORMAL
- en: When an agent makes a request to the CA, a CSR is sent and the signing policy
    by default has to wait for a manual signing with the CSR stored in the `requests`
    folder. Waiting requests can be reviewed by running `puppetserver ca list` and
    then signed by running `puppetserver ca sign --certname < certname to sign >`.
    All certificates that have been signed can be viewed by running `puppetserver
    ca` `list --all`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using PE, certificate signing can be performed and viewed on the
    PE web console, as pictured in *Figure 10**.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – PE console certificate signing](img/B18492_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – PE console certificate signing
  prefs: []
  type: TYPE_NORMAL
- en: Certificates can be revoked using the `puppetserver ca revoke --certname < certname
    to revoke >` command, and to clean up and remove a revoked certificate from the
    CA, you can then run `puppetserver ca clean --certname < revoked` `certname >`.
  prefs: []
  type: TYPE_NORMAL
- en: It is common when manual auto signing is used for a workflow that tools such
    as VMware’s **vRealize Orchestrator** (**VRO**) will make calls to the CA API
    as part of the deployment and decommissioning of servers.
  prefs: []
  type: TYPE_NORMAL
- en: To automate this process, auto signing can be configured in three ways. In what
    is known as `autosign = true` is added to the `master` section of `puppet.conf`,
    this change causes the CA to sign any request and should never be used in a production
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second way is to create an `autosign.conf` file at `/etc/puppetlabs/puppet/autosign.conf`.
    In this file, there can be server names or domain name globs where each line represents
    a node name or a domain that can be auto-signed. For example, let’s say a file
    had the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This would mean that `server1.puppet.com` and any server in the `example.com`
    domain would be auto-signed.
  prefs: []
  type: TYPE_NORMAL
- en: The third method is to set the `autosign` value in the `puppet.conf` file to
    be equal to a script. This script can be in any language and will receive as its
    first argument the certificate name and then the CSR contents as standard input.
    The script should then end with a zero-return code to sign the script or a non-zero
    code to not sign it. This leads to a common method of CSRs containing a secret
    to check in the script, or in the public cloud, tags can be used. It is beyond
    the scope of this book to discuss writing these scripts, and while Puppet only
    provides a description of how to construct these scripts at [https://puppet.com/docs/puppet/latest/ssl_autosign.html#ssl_policy_based_autosigning](https://puppet.com/docs/puppet/latest/ssl_autosign.html#ssl_policy_based_autosigning),
    Amazon gives an excellent example at [https://aws.amazon.com/blogs/mt/aws-opsworks-puppet-enterprise-and-an-alternate-implementation-for-policy-based-auto-signing/](https://aws.amazon.com/blogs/mt/aws-opsworks-puppet-enterprise-and-an-alternate-implementation-for-policy-based-auto-signing/).
  prefs: []
  type: TYPE_NORMAL
- en: This section has laid out how a CA is configured and run as a Puppet server.
    Later in this chapter, the full lifecycle of agents will be reviewed, showing
    how the client creates a CSR and uses the CA to finish the services offered by
    Puppet Server and looking at JRuby interpreters.
  prefs: []
  type: TYPE_NORMAL
- en: JRuby interpreters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JRuby is a Java implementation of Ruby allowing for the use of Ruby on JVMs;
    this allows for greater scalability than with traditional Ruby deployments such
    as Ruby on Rails as most Ruby interpreters aren’t capable of thread safety and
    use locks to run one thread at a time. Puppet Server has a pool of JRuby interpreters/instances
    that are available to perform various application work such as compiling catalogs
    and handling reports. The number of interpreters in the pool reflects how many
    Ruby application actions can be run simultaneously and can be configured with
    the `max-active-instances` parameter in the `puppetserver.conf` file, in PE via
    Hiera in the console, or in code via `puppet_enterprise::master::puppetserver::
    jruby_max_active_instances`. We will be looking at this in more detail in [*Chapter
    13*](B18492_13.xhtml#_idTextAnchor321), where we discuss the metrics and tooling
    to review and set this sizing.'
  prefs: []
  type: TYPE_NORMAL
- en: Having discussed the components of Puppet Server, we will now look at the configuration
    such as users, logging, and filesystems to understand where these services can
    be customized and what is required by them.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration and logs for Puppet Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We briefly touched on certain configuration files and the settings available
    as we discussed each component, but we will give a summary here. For most of the
    configuration files, it is unnecessary to customize them, and most defaults will
    meet your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: For PE, the `pe-puppetserver` Puppet Server service will run under a `pe-puppet`
    account, while on open source Puppet, the `puppetserver` service will be run under
    the `puppet` account. In both accounts, they will have a `nologin` shell set so
    that the user just provides an account to run the service and own relevant files
    for the service.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following configuration files and application directories will be created
    and used:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/etc/puppetlabs/puppetserver/bootstrap.cfg`: A file containing a list of services
    that Trapperkeeper should start up; these are the handlers mounted by the embedded
    web server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/puppetlabs/puppetserver/request-logging.xml`: A file defining how HTTP
    access requests are logged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/puppetlabs/puppetserver/conf.d`: This directory contains the following
    main configuration files for components in HOCON format:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`global.conf`: This file sets global configuration settings for Puppet and
    by default just contains the logging config file location.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webserver.conf`: This file configures the embedded web server with details
    such as port and logging.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web-routes.conf`: This file sets mount points for Puppet’s web services.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`puppetserver.conf`: This file sets the configuration for the core Puppet server
    application such as the number of `jruby` instances running.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auth.conf`: This file sets the access permissions for endpoints mounted by
    `web-routes.conf`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ca.conf`: This file configures settings for the CA.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`products.conf`: An optional file that can set product settings such as analytics
    data and update checks.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/puppetlabs/puppetserver/ssl/ca`: Certificates and keys related to the
    Puppet CA (`/etc/puppetlabs/puppet/ssl/ca` in Puppet 6 and below).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/opt/puppetlabs/puppet/lib/ruby/vendor_gems`: Puppet Server puts Ruby gems
    related to the operation of the CA in this directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/opt/puppetlabs/server`: This directory contains the `JRuby-gems` and binaries
    for running Puppet Server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/run/puppetlabs/puppetserver/puppetserver.pid`: This file contains the
    PID of the running Puppet process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/puppetlabs/puppet.conf`: This file holds the configuration for both the
    Puppet client and Puppet Server on the primary. These settings can be viewed by
    running `puppet` `config print`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The vast majority of settings in the files will be used at default values unless
    external integrations such as the external root CA are required and are only worth
    mentioning as a reference to understand the setup of the Puppet. A full reference
    and options for settings can be reviewed at [https://puppet.com/docs/puppet/latest/server/configuration.html](https://puppet.com/docs/puppet/latest/server/configuration.html
    ) for `/``etc/puppetlab/puppetserver`-based settings.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you have chosen one of the open source Puppet automation tools/modules discussed
    in the introduction, it may allow the setting of configuration values on installation.
  prefs: []
  type: TYPE_NORMAL
- en: PE users should be aware due to extra automation of configuration that a lot
    of those settings such as those in `puppetserver.conf` are configured via Hiera,
    and the documentation at [https://puppet.com/docs/pe/2021.7/config_puppetserver.html](https://puppet.com/docs/pe/2021.7/config_puppetserver.html
    ) should be followed for the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration for tuning these settings will be looked at in more detail
    in [*Chapter 13*](B18492_13.xhtml#_idTextAnchor321).
  prefs: []
  type: TYPE_NORMAL
- en: The full options for the settings for `/etc/puppetlabs/puppet.conf` can be reviewed
    at [https://www.puppet.com/docs/puppet/latest/config_file_main.html](https://www.puppet.com/docs/puppet/latest/config_file_main.html);
    the file itself provides sections that can configure the Puppet server, the Puppet
    agent, and how `puppet apply` runs. The sections are `main`, which provides default
    values, `agent`, which provides settings to the Puppet client, `user`, which provides
    settings for when using Puppet `apply`, and `master`/`server` for applying settings
    to the Puppet server.
  prefs: []
  type: TYPE_NORMAL
- en: Since Puppet 6, it has been possible to use a `server` section instead of a
    `master` section, but many automation tools have not caught up with this change,
    and as they are not interchangeable terms and could create confusion, be careful
    to only use the term relevant to your implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Puppet applies settings from the `master`/`server`, `apply`, or `agent` section
    first, then falls back to the `main` section and, if it finds no setting, will
    use a default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at some example content of a file on a `peadm` built Puppet lab
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The square brackets indicate the name of a section and then a set of key-value
    pairs. The settings here show the certificate name (`certname`) of our Puppet
    server and also show that it sends reports to PuppetDB via the `reports` setting,
    that it is set up to store catalog, node, and fact information with `storeconfigs`
    set to `true`, that these will be stored in PuppetDB, and that `storeconfigs_backend`
    is set to PuppetDB. Finally, `node_terminus` is set to `classifier`, which reflects
    how the primary server should classify clients. This will be discussed in greater
    detail in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The best way to view and manipulate the settings including defaults not set
    by `puppet.conf` is by using the `puppet` `config` command, which can show all
    settings. By running `puppet config print all known`, the settings will be printed,
    or an individual setting can be printed by detailing the section and value to
    print via `puppet config print` `--section` `master` `certname`. The `puppet`
    `config` command can also add or remove values using the `set` or `delete` options
    and selecting a section key and value to perform an action on. For example, the
    following commands will delete `storeconfigs` from the `master` section and change
    the certificate name to `newname.example.com`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: These commands will automatically add a section if it’s not already in the file,
    but the Puppet service would need to be restarted for any changes to take place.
  prefs: []
  type: TYPE_NORMAL
- en: We will work with more examples of manipulating the `puppet.conf` file as we
    look at the agent lifecycle in the next section, but the full options and syntax
    for the `puppet.conf` file can be viewed at [https://puppet.com/docs/puppet/latest/config_file_main.html](https://puppet.com/docs/puppet/latest/config_file_main.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Puppet Server by default keeps logs at `/var/log/puppetlabs/puppetserver` in
    the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Puppetserver.log`: This is where the primary server logs activity such as
    compilation errors and warnings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Puppetserver-access.log`: This is where requests to HTTP endpoints are logged'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Puppetserver_gc.log`: This is where logs of garbage collection are gathered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have reviewed the Puppet server components fully, we will look at
    the Puppet agent configuration and lifecycle, which will show how these services
    are used by a client, and how to monitor and review the logging of a cycle.
  prefs: []
  type: TYPE_NORMAL
- en: The Puppet agent-to-server lifecycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will look at how the Puppet agent makes requests to the Puppet
    server components we have run through and how it secures its communications before
    requesting configuration to enforce from the Puppet servers. It should be noted
    the Puppet servers themselves also contain Puppet agents.
  prefs: []
  type: TYPE_NORMAL
- en: The installation of Puppet agents is detailed at [https://puppet.com/docs/puppet/latest/install_agents.html#install_agents](https://puppet.com/docs/puppet/latest/install_agents.html#install_agents
    ) for open source and [https://puppet.com/docs/pe/2021.7/installing_agents.html#installing_agents](https://puppet.com/docs/pe/2021.7/installing_agents.html#installing_agents
    ) for PE. Integrating this install with your server deployment workflow and ensuring
    the necessary configuration is placed at `/etc/puppetlab/puppet.conf` is critical
    for automation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `puppet_conf` module provides tasks to manage Puppet configuration files
    ([https://forge.puppet.com/modules/puppetlabs/puppet_conf](https://forge.puppet.com/modules/puppetlabs/puppet_conf)).
  prefs: []
  type: TYPE_NORMAL
- en: Most of the settings will depend on your environment setup, but for most environments,
    the defaults will be taken with the critical setting of ensuring that the server
    setting in the `agent` section is set so that the agent knows which Puppet server
    to contact – open source Puppet or PE-Puppet. The PE service can then be started
    under the root user. This will contact the Puppet server every 30 minutes by default
    or can be triggered by running the `puppet agent -``t` command.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10**.3* shows the workflow of this Puppet certificate process as the
    client ensures it has the signed SSL certificate to ensure secure communication
    with the Puppet server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Puppet client certificate workflow](img/B18492_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Puppet client certificate workflow
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to validate the certificates. In the `ssl` directory titled
    `/etc/puppetlabs/puppet/ssl`, the following files will already exist or be created
    in this process:'
  prefs: []
  type: TYPE_NORMAL
- en: '`private_keys/<certificate_name>.pem`: The private key used to create a CSR'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`certs/<certificate_name>.pem`: The signed certificate returned for this client'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`certs/ca.pem`: A copy of the CA certificate sent from the Puppet server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`crl.pem`: The CRL from the Puppet server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`certificate_requests/<certificate_name>.pem`: The CSR to be sent to the Puppet
    server, which is deleted once a signed certificate is received'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to this directory, it is possible to create a `/etc/puppetlabs/puppet/csr_attributes.yaml`
    file and include the trusted facts to be created in the CSR. This will cause the
    trusted facts to be included in the certificate for the client when the CSR is
    signed by the Puppet server.
  prefs: []
  type: TYPE_NORMAL
- en: Using trusted facts can be useful to ensure hard classification information
    is not changed, such as a production server being reclassified for development,
    or the role being changed, since both could result in lower levels of security.
    The **organization ID** (**OID**) numbers translate into names, which can be reviewed
    at [https://puppet.com/docs/puppet/latest/ssl_attributes_extensions.html](https://puppet.com/docs/puppet/latest/ssl_attributes_extensions.html).
    This file must exist before the CSR is created; otherwise, the only way to change
    the CSR or certificate is to start again.
  prefs: []
  type: TYPE_NORMAL
- en: As *Figure 10**.3* shows, if a private key doesn’t exist, the client makes a
    new key before checking for local copies of `ca.pem` and `CRL.pem`, making a request
    to the server, and downloading if either is absent. The next step is to then check
    whether a signed certificate exists and request it from the client if it does
    not. If a signed client certificate exists, it can continue to request node data;
    otherwise, it will create a CSR file and send it to the primary server. If the
    `waitcert` setting is enabled in `puppet.conf`, the client will then wait for
    the CSR to be signed by the server and check the status with the primary server
    every 2 minutes On future runs, the client will present its signed certificate
    to the server as proof of its identity.
  prefs: []
  type: TYPE_NORMAL
- en: Having secured communication, the first step is to perform plugin sync from
    the server to the client, which ensures all facts, functions, resource types,
    resource providers, and Augeas lenses are downloaded to the client using the `file_metadata`
    endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Once this has been completed, the client runs `facter`, sends the output to
    the Puppet client, and requests a catalog from the Puppet server using the `\catalog`
    endpoint. A copy of this catalog is stored in the `cache` directory (configured
    using the `vardir` parameter in `puppet.conf`) on the client, which by default
    is `%PROGRAMDATA%\PuppetLabs\puppet\cache\client_data\catalog\<certname>.json`.
    (`PROGRAMDATA` is generally `C:\Program Data\` on Windows and `/opt/puppetlabs/puppet/cache/client_data/catalog/<certname>.json`
    for Linux- and Unix-based systems.) The client then receives this catalog and
    implements the steps, enforcing the state described in the Puppet code, or if
    the client is set to be run in no-op mode, it will simulate the catalog. The client
    generates a report, which is then sent back by default to the Puppet server using
    the `report` endpoint. This can be configured to send the report to other report
    processors such as Splunk, which will be discussed in [*Chapter 13*](B18492_13.xhtml#_idTextAnchor321).
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the catalog in the `client_data` folder, several other useful
    files for investigation are generated in the `cache` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '`lib`: This is a cache for various plugins synced by plugin sync from the primary
    server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`facter`: This will contain custom facts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`facts.d`: Here, external facts are cached by plugin sync from the primary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reports`: This contains the last generated report file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`state`: This directory contains the files and directories associated with
    the state of previous Puppet runs:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`classes.txt`: A list of classes that were included in the last catalog applied'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`graphs`: If the `graph` option is used during a Puppet run, the generated
    .dot graph files of resources and dependencies will be saved here'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`last_run_report.yaml`: This is a full report of all resources and how they
    were checked or changed during the catalog enforcement'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resources.txt`: A list of resources that were included in the last catalog
    applied'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`state.yaml`: A list of all resources and when they were last checked or synced,
    used with features such as `audit`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Several directories and files have been ignored as they are either for legacy
    purposes or for practices that this book does not recommend, such as `filebucket`.
    A full listing can be seen at [https://puppet.com/docs/puppet/latest/dirs_vardir.html](https://puppet.com/docs/puppet/latest/dirs_vardir.html).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The cached catalog will be used in the event of the client losing communication
    with the Puppet infrastructure to ensure it continues to enforce its last known
    state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step of the agent-to-server cycle is to send the event report to the
    Puppet Server. These reports will reflect events of what happened for each resource
    in the catalog. These events can have one of the following states:'
  prefs: []
  type: TYPE_NORMAL
- en: Failure – This will be an event with errors in applying the catalog or issues
    such as dependencies or an issue with that particular resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrective – The resource was in the correct state in the previous run but has
    had to be corrected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intentional – The resource had to be created or corrected but was not in the
    correct state in the previous run
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unchanged – The resource is in the correct state and requires no change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unchanged events are not reported in Puppet 8 by default. This change was made
    to reduce the store space required for storing reports. This can be changed by
    setting `exclude_unchanged_resources=false` in each agent's `puppet.conf` file.
  prefs: []
  type: TYPE_NORMAL
- en: The report events will also reflect what mode the client agent is running or
    whether a resource is set to be applied differently from the client. While the
    same event states still apply, each event will report if the event took place
    in execution mode or in no-op mode. As was previously discussed in [*Chapter 3*](B18492_03.xhtml#_idTextAnchor048)*,*
    no-op mode means the resource is only effectively tested to see whether the resource
    will need to be changed to meet its declared state. In [*Chapter 15*](B18492_15.xhtml#_idTextAnchor359),
    we will discuss how this can be useful in heritage envionments where we want to
    see how big the configuration drift is and choose a progressive approach to get
    there to avoid causing issues on production systems.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of accessing these reports, we will see in [*Chapter 13*](B18492_13.xhtml#_idTextAnchor321)how
    report processors can be used to send them to third-party tools and in [*Chapter
    14*](B18492_14.xhtml#_idTextAnchor340)how Puppet Enterprise provides an event
    viewer interface as part of its graphical console.
  prefs: []
  type: TYPE_NORMAL
- en: Lab – monitoring certificate signing logging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To better understand the process, we will now describe how we can monitor the
    process of a Puppet run by removing the certificates of our node and re-registering.
    During the registration, we will monitor the logs to see the API requests made
    through this process and note the steps of the process. Here are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open SSH terminal sessions to the Linux client and two separate SSH terminal
    sessions to the primary Puppet server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the Linux client, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: On one of the server sessions, run `puppetserver ca clean --certname <instance
    name>` (note that this should be the certificate name, which can be checked via
    `puppet config print certname` on the node).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the Linux client, move the `ssl` directory to a backed-up location using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: On one of the Puppet server’s sessions, run `tail -f /var/log/puppetlabs/puppetserver/puppetserver-access.log`,
    and on the other, run `tail -``f /var/log/puppetlabs/puppetserver/puppetserver.log`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the node, run `puppet agent -t` and see the calls on the Puppet server sessions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the web console, under the `puppet agent –t` on the client. Note the new
    calls on the server in the `access.log` and `puppetserver.log` files and how this
    relates to the steps discussed in this section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View the catalog received for the client and investigate the other files in
    the cache.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hint
  prefs: []
  type: TYPE_NORMAL
- en: Using a tool such as `jq` can make viewing JSON much easier ([https://stedolan.github.io/jq/download/](https://stedolan.github.io/jq/download/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'To view an example output of logging for this lab, see the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/puppet_access_log_extract](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/puppet_access_log_extract)
    shows the access logs with comments explaining the output'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/puppet_server_log_extract](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/puppet_server_log_extract)
    shows the Puppet server log with comments explaining the output'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/puppet_client_terminal.txt](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/puppet_client_terminal.txt)
    shows the client terminal and commands entered'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/puppet_server_terminal.txt](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/puppet_server_terminal.txt)
    shows the server terminal and commands entered'
  prefs: []
  type: TYPE_NORMAL
- en: PuppetDB and PostgreSQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PuppetDB allows for the collection of Puppet data and advanced features such
    as exported resources. In open source Puppet, it is entirely optional, while PE
    installs PuppetDB by default. The following is kept by PuppetDB:'
  prefs: []
  type: TYPE_NORMAL
- en: The last facts from the nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last catalog compiled for each node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 14 days (default) of event reports for each node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exported resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PuppetDB is a Clojure frontend application running on a JVM, using PostgreSQL
    as a backend database. This common architecture is where the backend database
    just provides the tables, and the frontend database contains the application objects,
    giving some key advantages compared to a single database. It eases the updating
    process of PuppetDB since the actual data can be left in the backend table, and
    it also allows great scalability—as we will see in the last section of this chapter,
    *Scaling with compilers*—where PuppetDB can be scaled horizontally by running
    PuppetDB on many compiler servers, as a result reducing the load on the primary
    server PuppetDB service.
  prefs: []
  type: TYPE_NORMAL
- en: Information on the installation and configuration of PuppetDB is provided at
    [https://forge.puppet.com/modules/puppetlabs/puppetdb](https://forge.puppet.com/modules/puppetlabs/puppetdb).
    PuppetDB is likely to be included in any automation you choose and is part of
    PE.
  prefs: []
  type: TYPE_NORMAL
- en: 'PostgreSQL creates a `pe-postgres` user for PE or a `postgres` user for open
    source Puppet, which is created as a user to run the PostgreSQL database. This
    user will use a `nologin` shell and own relevant files for running Postgres. The
    following directories are used by PostgreSQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/opt/puppetlabs/server/apps/postgresql/{version}`: To install the database
    application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/opt/puppetlabs/server/data/postgresql/{version}`: To contain the data files
    of the database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/log/puppetlabs/postgresql/{version}`: To contain the logs of the database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PuppetDB creates a `pe-puppetdb` user for PE or a `puppetdb` user for open
    source Puppet, which is created as a user to run the PuppetDB database under with
    a `nologin` shell and to own the relevant file for running PuppetDB. As PuppetDB
    is a Clojure application running on the JVM; it is very similar to puppet web
    server in its structure with a handler mounted at a `/pdb` endpoint and an `auth.conf`
    file defining who can access this endpoint. The following directories are used
    by PuppetDB, and some key files are highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/etc/puppetlabs/puppetdb`: This directory contains configuration files for
    PuppetDB, including the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bootstrap.conf`: The `bootstrap.conf` file the lists services that should
    be started in the Trapperkeeper framework'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/puppetlabs/puppetdb/conf.d`: This directory contains configuration files
    in an `ini` format:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auth.conf`: Configures authorization for who can access the endpoints made
    available'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`routing.ini`: Configures which handlers should be made available at endpoints'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/opt/puppetlabs/server/apps/puppetdb`: This directory contains the application
    binaries for PuppetDB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/opt/puppetlabs/server/data/puppetdb`: This directory contains the data of
    PuppetDB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is beyond the scope of this book to look at the in-depth configuration of
    `PuppetDB`, but you can refer to [https://puppet.com/docs/puppetdb/latest/configure.html](https://puppet.com/docs/puppetdb/latest/configure.html
    ) for more information. However, in [*Chapter 13*](B18492_13.xhtml#_idTextAnchor321),
    we will look in more depth at how to monitor, review, and tune PuppetDB and PostgreSQL
    performance and how modules such as [https://forge.puppet.com/modules/puppetlabs/pe_databases](https://forge.puppet.com/modules/puppetlabs/pe_databases)
    can assist with maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: For now, we will review how the data can be accessed by using PQL with HTTP
    calls to the `/pdb` endpoint or via the `puppet query` command line to make calls
    to the endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The **Abstract Syntax Tree** (**AST**) query language is also available as a
    format to use for queries. However, with PQL available, it has little use now
    but can be reviewed at [https://www.puppet.com/docs/puppetdb/8/api/query/v4/ast.html](https://www.puppet.com/docs/puppetdb/8/api/query/v4/ast.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'PuppetDB is structured into entities to allow for accessing different types
    of data. Here is a list of each entity and a brief description of what the endpoint
    contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '`aggregate_event_counts`: Aggregate counts of the `event_counts` entity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`catalogs`: The catalogs stored for each node'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`edges`: Edges are relationship information in catalogs such as *contains*
    or *requires*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`environments`: The environments known to PuppetDB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event_counts`: Event counts about various resources in reports'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`events`: Events reflect the actions performed for a resource returned by a
    report'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`facts`: The facts returned for each node'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fact_contents`: This entity is structured to access fact content more easily'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fact_names`: All known fact names'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fact_paths`: Similar to the `fact_names` entity but provides further granularity
    for structured facts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nodes`: Node information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`producers`: Producers are the servers that compiled the catalog and sent the
    report'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reports`: Reports contain the outcome of applying a catalog'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resources`: Resource information in catalogs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To begin looking at PQL queries, the simplest way is to return all the data
    in an entity. This can be done by simply listing an entity name and empty curly
    braces. For example, to return all node data, it would be `nodes {}`; to search
    for nodes with particular parameters within the curly braces, we use attribute
    names and the value they should equal (`=`), contain (`~`), be less than (`<`),
    or greater than (`>`). For example, to return nodes whose last report status was
    unchanged, the query would be `nodes { latest_report_status = "``unchanged"}`.
  prefs: []
  type: TYPE_NORMAL
- en: We will not list the output for any of these queries as they can be verbose,
    but you will try to make examples in your lab at the end of this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'These attribute statements can be further negated with `!`, chained with `and`/`or`,
    and parenthesized with brackets `()` to contain different statements. For example,
    to make a more complicated query to find whether a particular file was declared
    with the wrong permissions, we could run this PQL query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: On the command line, this can also be run via the `puppet query resource {'latest_report_status
    = "``unchanged"}'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'PuppetDB queries can also be used in Puppet code with the PuppetDB function.
    Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In all these examples, it has been assumed certificates are set up for secure
    SSL communication either directly on Puppet infrastructure or with clients running
    the query. If using default locations, the `puppet query` command picks up the
    certificates automatically but can also be set like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Web points can also be accessed via `curl` or equivalent commands, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: To allow queries to be made directly from a desktop or other nodes, the Puppet
    client tools can be used. The setup instructions for installing on Open Source
    Puppet are detailed at [https://puppet.com/docs/puppetdb/latest/pdb_client_tools.html](https://puppet.com/docs/puppetdb/latest/pdb_client_tools.html)
    and Puppet Enterprise has instructions at [https://www.puppet.com/docs/pe/2021.7/installing_pe_client_tools.html](https://www.puppet.com/docs/pe/2021.7/installing_pe_client_tools.html).
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, the SSL authentication can be deactivated to allow unauthenticated
    queries following the instructions at [https://puppet.com/docs/puppetdb/latest/configure.html#jetty-http-settings](https://puppet.com/docs/puppetdb/latest/configure.html#jetty-http-settings).
    This book would strongly advise against this as it would open the data for anyone
    to access on your network.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we showed some of entities and queries it was possible to use
    with PQL. It would be impractical to go through all the possible options available
    to these entities and the range of options available to PQL, but the full details
    can be seen in the documentation at [https://puppet.com/docs/puppetdb/latest/api/query/v4/entities.html](https://puppet.com/docs/puppetdb/latest/api/query/v4/entities.html).
    Additionally further examples of PQL queries can be seen in the documentation
    at [https://puppet.com/docs/puppetdb/latest/api/query/examples-pql.html](https://puppet.com/docs/puppetdb/latest/api/query/examples-pql.html),
    and the Vox Pupuli community is building useful examples on its web pages at [https://voxpupuli.org/docs/pql_queries/](https://voxpupuli.org/docs/pql_queries/).
  prefs: []
  type: TYPE_NORMAL
- en: Lab – querying PuppetDB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'SSH to the primary server and query PuppetDB for the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: 'List the memory size of all the compiler servers (*hint*: compiler servers
    all have a trusted fact and Facter has a memory fact)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List all the services being enforced on the Puppet server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List the start and end times of the latest report of each server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example answers can be found at [https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/PQL_samples_answers.txt](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch10/PQL_samples_answers.txt).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Be careful with these queries in production systems working at scale; some endpoints
    such as reports could contain a lot of data, and a query may put a lot of stress
    and load on a system.
  prefs: []
  type: TYPE_NORMAL
- en: Scaling with compilers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The review of Puppet platform components so far assumes that all components
    are present on a single primary server. However, as the number of managed nodes
    increases, it becomes impractical for a single server to handle them. According
    to Puppet’s documentation, a primary server can manage up to 2,500 clients on
    default settings. To handle the growing number of nodes, Puppet uses horizontal
    scaling, which involves using Puppet compile servers. In *Figure 10**.4*, a subset
    of primary services is shown to be moved onto compile servers. These servers can
    be configured in a round-robin selection in the client’s configuration file or
    placed behind a load balancer. This enables multiple nodes to work together to
    compile catalogs while still allowing certain services to run on the primary server.
    According to Puppet’s documentation, with the default compiler settings, up to
    3,000 clients can be served per compiler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.4 – Puppet compiler services](img/B18492_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – Puppet compiler services
  prefs: []
  type: TYPE_NORMAL
- en: A compile server hosts a subset of services that are present on the primary
    server, such as Puppet Server and PuppetDB. This enables remote completion and
    synchronization of catalog compilation requests, thereby increasing the number
    of JRuby instances required for compiling catalogs.
  prefs: []
  type: TYPE_NORMAL
- en: The most widely used approach for directing client requests to compile servers
    is to utilize a hardware - or cloud-based load balancer. As there are several
    load balancer options available, Puppet does not provide explicit instructions
    on configuration. However, it recommends using the `/status/v1/simple` endpoint
    to check the health of compile servers. If the load balancer does not support
    HTTP health checks, checking whether the host is listening for TCP connections
    on port `8140` can provide a limited check.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are alternatives to a load balancer, such as using DNS SRV records, which
    is detailed at [https://puppet.com/docs/puppet/latest/server/scaling_puppet_server.html#using-dns-srv-records](https://puppet.com/docs/puppet/latest/server/scaling_puppet_server.html#using-dns-srv-records),
    or using a DNS entry with round-robin settings, as detailed at [https://puppet.com/docs/puppet/latest/server/scaling_puppet_server.html#using-round-robin-dns](https://puppet.com/docs/puppet/latest/server/scaling_puppet_server.html#using-round-robin-dns),
    but as these tend to be much less frequently used, we will not go into detail
    in this book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In the `puppet.conf` file, it is possible to add a list of servers in the client
    server value to contact but this list would work only in the event of failures
    and would not try to balance out connections.
  prefs: []
  type: TYPE_NORMAL
- en: With compile servers, the CA remains on a single Puppet primary server and is
    referred back to when clients send their CSR or certificates for checking.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As stated at the beginning of the chapter, we will refrain from delving into
    the installation process in detail, as it would not add much value to Puppet’s
    own instructions, available at [https://puppet.com/docs/puppet/latest/server/scaling_puppet_server.html](https://puppet.com/docs/puppet/latest/server/scaling_puppet_server.html
    ) for open source and [https://puppet.com/docs/pe/2021.7/installing_compilers.html](https://puppet.com/docs/pe/2021.7/installing_compilers.html
    ) for PE. However, it is essential to note that compile servers may require `dns_alt_names`
    to be added to their `puppet.conf` file if load balancers are being used in TCP
    proxying mode or a DNS round-robin method. This is necessary to enable all server
    names that may be used in requests through the load balancer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Even with a load balancer enabled, it is possible to just target compile servers
    directly by running `puppet agent -t server=<server to` `send request>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In [*Chapter 13*](B18492_13.xhtml#_idTextAnchor321), we will provide more detailed
    information on how to monitor and manage server settings for scalability, and
    in [*Chapter 14*](B18492_14.xhtml#_idTextAnchor340), we will discuss Puppet’s
    reference architectures for achieving scalability. However, it is important to
    note that there may be latency issues if compile servers are located too far away
    from the primary server. Therefore, it is recommended to keep them within the
    same region in cloud terms, as per best practices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lab – viewing compiler and load balancer configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The deployed lab environment consists of three compile servers. You can view
    the reports they are compiling and how pecdm configured the load balancer, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the web console and review the report runs of the Puppet instance
    server. In the **Metrics** section of a report, look for the **Report submitted
    by** section and note that this may vary in different reports. If there are few
    reports available, enter the **Jobs** section and run Puppet several times on
    your instance node to generate more reports.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View how PECDM created the Azure load balancer in the Terraform module at [https://github.com/puppetlabs/terraform-azure-pe_arch/blob/main/modules/loadbalancer/main.tf](https://github.com/puppetlabs/terraform-azure-pe_arch/blob/main/modules/loadbalancer/main.tf).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the services provided by the Puppet server
    and how the embedded web server attaches handlers to mount points, which can then
    be requested via HTTP requests to endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: It was shown that the `/puppet` endpoint provides services for configuration
    requests and how indirectors or environments can request specific components such
    as requesting a catalog from a server. The `/puppet-ca` endpoint similarly used
    indirectors to allow for requests to the CA. The `/puppet-admin-api` endpoint
    was then shown to allow for clearing the environment cache and JRuby instances
    as more advanced administrative actions.
  prefs: []
  type: TYPE_NORMAL
- en: It was then shown how Puppet creates a CA server with a root CA and an intermediate
    CA to sign or can run in legacy mode with a single combined CA. The options for
    using externally provided certificates were then discussed. The process of signing
    certificate requests was shown, with the `puppetserver certificate` command for
    managing certificates and requests and the `puppet ssl` command for managing agent
    certificate management. It was then shown how this process could be automated
    with auto signing, which could auto-sign everything, based on naming or based
    on a script running and viewing the certificate request.
  prefs: []
  type: TYPE_NORMAL
- en: JRuby interpreters were discussed, showing how JRuby is an implementation of
    Ruby on Java and capable of running Puppet’s Ruby components, such as compiling
    Puppet code, in a scalable and concurrent way.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the user, service, and configuration files and logging was shown,
    examining the server side of `puppet.conf` and how to configure and view settings
    in the file and defaults using the `puppet` `config` commands.
  prefs: []
  type: TYPE_NORMAL
- en: Having reviewed the components of Puppet Server, the Puppet client lifecycle
    was then viewed, seeing how the agent makes CSRs to the CA and sends facts and
    a request for a catalog. The logs were viewed to show where requests re made and
    how this can be tracked through requests. It was shown how the client could be
    configured via `puppet.conf` and how additional information could be added to
    the CSR.
  prefs: []
  type: TYPE_NORMAL
- en: PuppetDB and PostgreSQL were then explored as a frontend/backend database architecture
    that can store reports generated from applying Puppet catalogs along with the
    latest facts and events from nodes. We reviewed the file directories and logging
    locations and then saw how PuppetDB could be queried on the API, command line,
    and Puppet code using PQL.
  prefs: []
  type: TYPE_NORMAL
- en: Compilers were then shown to be able to allow Puppet Server to scale horizontally
    by allowing Puppet Server and the PuppetDB services to be put onto multiple servers,
    which could be load-balanced for clients.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will show how Puppet classifies clients requesting catalog
    compilations so that it knows which version of code to apply and which classes.
    We will show how environments allow multiple versions of code to exist on the
    primary server and how to use a control repo to manage the modules and versions
    that should be included.
  prefs: []
  type: TYPE_NORMAL
