- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Ticketing Systems
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工单系统
- en: 'In this chapter, we’ll discuss the benefits of tracking your Salesforce changes
    in a ticketing system and how it contributes to a more efficient DevOps process.
    We’ll then look at three of the most common tools for tracking the progress of
    changes in Salesforce:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论在工单系统中跟踪 Salesforce 变更的好处，以及它如何有助于更高效的 DevOps 流程。然后，我们将介绍三款最常用的工具来跟踪
    Salesforce 中变更的进度：
- en: '**JIRA** is an issue-tracking and project management software developed by
    Atlassian that allows teams to plan, track, and release software'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JIRA** 是由 Atlassian 开发的一个问题跟踪和项目管理软件，允许团队规划、跟踪和发布软件。'
- en: '**Asana** is a work management platform that helps teams collaborate, communicate,
    and coordinate work across projects'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Asana** 是一款工作管理平台，帮助团队在项目中协作、沟通和协调工作。'
- en: '**Azure Work Items** are development tasks that are tracked in Azure DevOps
    to manage agile development processes and ship software more frequently'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Work Items** 是在 Azure DevOps 中跟踪的开发任务，用于管理敏捷开发过程并更频繁地发布软件。'
- en: By the end of the chapter, you will have a clear idea of not only the differences
    between these different types of packages but also when to use them and how to
    build them in Salesforce.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您不仅会清楚地了解这些不同类型的工具包之间的区别，还会知道何时使用它们，以及如何在 Salesforce 中构建它们。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'While this chapter isn’t intended to be a direct step-by-step guide for the
    products covered, should you wish to explore them, each one provides a free trial
    with which to learn:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章并非旨在提供涉及的产品的逐步指南，但如果您希望深入了解它们，每个产品都提供了一个免费的试用版本以供学习：
- en: JIRA – [https://www.atlassian.com/software/jira](https://www.atlassian.com/software/jira)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JIRA – [https://www.atlassian.com/software/jira](https://www.atlassian.com/software/jira)
- en: Asana – [https://asana.com/](https://asana.com/)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Asana – [https://asana.com/](https://asana.com/)
- en: Azure DevOps – [https://azure.microsoft.com/en-gb/free](https://azure.microsoft.com/en-gb/free)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure DevOps – [https://azure.microsoft.com/en-gb/free](https://azure.microsoft.com/en-gb/free)
- en: The benefits of tracking your work
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪工作带来的好处
- en: The foundation of any successful project relies on an organized approach toward
    task management and tracking. Utilizing a ticketing system in Salesforce DevOps
    offers multiple advantages.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 任何成功项目的基础都依赖于组织良好的任务管理和跟踪方法。在 Salesforce DevOps 中使用工单系统提供了多重优势。
- en: Transparency
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 透明度
- en: All tasks and their statuses are visible to team members, fostering open communication
    and promoting teamwork. When everyone has visibility into what needs to be done
    and who is working on what, it eliminates duplicative work and makes coordinating
    easier.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所有任务及其状态对团队成员可见，促进开放的沟通并推动团队合作。当每个人都能看到需要做什么以及由谁来做时，就能消除重复的工作，并使协调变得更容易。
- en: This visibility provides benefits at multiple levels – for individual team members,
    team managers, cross-functional stakeholders, and leadership. For team members,
    having all tasks and current statuses in a central ticketing system lets everyone
    see what needs to be worked on and who is working on what. Immediately, developers
    can check which tickets are **In progress** versus **In code review** or **Ready
    for testing**. Testers can view what items are queued up for validation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这种可见性在多个层面上提供了好处——对个别团队成员、团队经理、跨职能利益相关者和领导层都有帮助。对于团队成员来说，所有任务和当前状态都集中在一个工单系统中，让每个人都能看到需要完成的工作以及由谁负责。开发人员可以立即查看哪些工单是**进行中**，哪些是**代码审核中**或**待测试**。测试人员可以查看哪些项目排队等待验证。
- en: This real-time visibility eliminates duplicating efforts since people can coordinate
    based on the latest information. Team members don’t waste time working on the
    same task or miss blockers that are impeding progress. For managers, ticketing
    transparency helps gauge team workload, identify bottlenecks, and assess resource
    needs. A ticket backlog provides data to plan capacity. Tickets waiting for acceptance
    reveal where processes are slowing down.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 实时的可见性消除了重复劳动，因为团队成员可以基于最新的信息进行协调。团队成员不会浪费时间在相同的任务上，或者错过那些阻碍进展的瓶颈。对于管理者来说，工单的透明度有助于评估团队工作负载、识别瓶颈和评估资源需求。工单积压提供了规划容量的数据。等待接受的工单揭示了哪些流程在放慢速度。
- en: Across teams such as product, UX, development, and QA, ticketing gives cross-functional
    transparency. Stakeholders can monitor progress on features or projects that require
    collaboration. Insight into each other’s workstreams enables better coordination.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在产品、用户体验、开发和质量保证等团队之间，工单系统提供了跨职能的透明度。利益相关者可以监控需要合作的功能或项目的进展。了解彼此的工作流能够促进更好的协调。
- en: For leadership, ticket data rolls up into reports that reflect completion rates,
    cycle times, and throughput. This high-level transparency helps executives understand
    team productivity, prioritization, and progress toward strategic goals.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于领导层来说，工单数据会汇总成报告，反映完成率、周期时间和吞吐量。这种高层次的透明度帮助高管了解团队生产力、优先级排序以及战略目标的进展情况。
- en: Accountability
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 责任
- en: Each ticket is assigned to a particular team member, which aids in individual
    performance tracking. With tickets tied to individuals, it is clear who is responsible
    for completing specific tasks that support monitoring productivity.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 每个工单都分配给特定的团队成员，这有助于跟踪个人绩效。通过将工单与个人绑定，明确了谁负责完成具体任务，支持生产力监控。
- en: With a ticket assigned to a specific person, there is no ambiguity about who
    owns the work. Responsibilities are clear, which prevents tasks from slipping
    through the cracks if no one takes charge. Team members can be held accountable
    for meeting deadlines and delivering results.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 将工单分配给特定人员后，谁负责这项工作就不再存在任何模糊之处。责任明确，避免了因为没有人负责而导致任务被忽视。团队成员可以因按时完成任务和交付结果而被追责。
- en: Having tickets tied to owners enables monitoring productivity at an individual
    level. Both team members and managers can quickly check the status of a person’s
    assigned tickets to assess workloads and completion rates. This supports tracking
    performance and progress.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将工单与负责人绑定，有助于在个人层面监控生产力。团队成员和经理可以快速检查某人分配的工单状态，以评估工作负载和完成率。这有助于跟踪绩效和进展。
- en: If certain tickets are stalled, it’s evident which team member needs to be approached
    to remove roadblocks. Similarly, when tickets exceed **service-level agreements**
    (**SLAs**), the accountable owner can be notified to take expedient action. From
    a project management perspective, being able to filter and view tickets by assignee
    makes it easy to gauge capacity and balance workloads across the team. Adding
    or removing team members from tickets helps scale resources appropriately.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某些工单被阻塞，显然可以知道需要联系哪位团队成员来清除障碍。同样，当工单超出**服务水平协议**（**SLAs**）时，可以通知责任人采取紧急行动。从项目管理的角度来看，能够按负责人过滤和查看工单，使得衡量团队容量和分配工作负载变得容易。为工单添加或移除团队成员有助于适当扩展资源。
- en: Beyond just assignments, some ticketing systems allow setting due dates, time
    estimates, and reminders. These features provide further accountability guardrails
    to help team members manage their time and priorities.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 除了分配任务之外，一些工单系统还允许设置截止日期、时间估算和提醒。这些功能提供了进一步的责任保障，帮助团队成员管理自己的时间和优先事项。
- en: Prioritization
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优先级排序
- en: Ticketing also facilitates prioritization. Tickets can be marked with priority
    levels or tagged, which allows the team to focus on the most business-critical
    items first.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 工单系统还促进了优先级排序。工单可以标记优先级或添加标签，从而使团队能够首先关注最为关键的业务事项。
- en: One method is assigning priority levels such as P1, P2, and P3 to tickets. P1
    tickets would be critical issues or high-priority features that need to be worked
    on first. P2 and P3 tickets have lower priority and can be queued up behind higher-priority
    work.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一种方法是为工单分配优先级，例如P1、P2和P3。P1工单是需要优先处理的关键问题或高优先级特性。P2和P3工单优先级较低，可以排在更高优先级的工作后面。
- en: Teams can also categorize tickets based on the type of work such as bugs, improvements,
    new features, and so on. Critical bugs that are impairing production systems would
    get prioritized above feature enhancements.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 团队还可以根据工作类型（如Bug、改进、新特性等）对工单进行分类。影响生产系统的关键Bug会被优先处理，而特性增强则会排在后面。
- en: In agile frameworks such as Scrum, prioritization is managed through product
    backlogs. Backlog items are ordered with the highest-value items at the top to
    be completed first in upcoming sprints. Some ticketing systems have built-in processes
    for validating and ranking requested work relative to business value before adding
    tickets. This gates entry into the backlog based on priority. Within a sprint
    backlog, assigning point values to tickets based on estimated effort also allows
    ordering by priority. Larger point tickets get worked on earlier.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在敏捷框架（如Scrum）中，优先级排序通过产品待办事项来管理。待办事项按价值排序，最高价值的事项排在最前面，优先在接下来的冲刺中完成。一些工单系统内建了验证和排名功能，在将工单添加到待办事项之前，根据业务价值对请求的工作进行排序。这为待办事项提供了优先级的“入口关”。在冲刺待办事项中，还可以根据估算工作量为工单分配点数，从而按照优先级排序。点数较大的工单会更早开始处理。
- en: At the team level, daily standups provide an opportunity to re-prioritize if
    any urgent or blocked tasks come up. Adjusting ticket priorities keeps the team
    focused. From a portfolio perspective, tagging tickets by strategic themes or
    objectives aids leadership in assessing priority across multiple projects and
    products.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在团队层面，每日站会提供了重新调整优先级的机会，以应对紧急或被阻塞的任务。调整工单优先级能够让团队保持专注。从项目组合的角度看，通过战略主题或目标对工单进行标记，帮助领导层评估多个项目和产品之间的优先级。
- en: Documentation
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档记录
- en: In addition, ticketing provides central documentation. Instead of valuable information
    being scattered across tools and conversations, details about tasks are documented
    within each ticket, creating a knowledge base that persists over time. This includes
    background details and context, requirements, acceptance criteria, design specifications,
    configurations, procedures, code snippets, testing steps, communications, and
    more.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，工单系统提供了集中化文档记录。避免了有价值的信息分散在各种工具和对话中，任务的详细信息会在每个工单内进行记录，形成一个随着时间推移而持续的知识库。这包括背景信息、需求、验收标准、设计规格、配置、流程、代码片段、测试步骤、沟通记录等。
- en: Without ticketing, these important work details end up scattered across Slack
    conversations, emails, wikis, documents, Post-it notes, and individual notebooks.
    Critical information gets siloed and hard to find. However, with a unified ticketing
    system, everything related to a task is documented in one place in an organized
    manner. Team members can easily get up to speed on a ticket by reviewing its history
    and attachments.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 没有使用工单系统时，这些重要的工作细节会分散在 Slack 对话、电子邮件、维基、文档、便签和个人笔记本中。关键信息被孤立，难以找到。然而，使用统一的工单系统时，与任务相关的所有内容都会以有序的方式记录在一个地方。团队成员可以通过查看工单的历史和附件，轻松了解工单的进展。
- en: Searching tickets allows quickly finding past solutions that can be applied
    to current issues or requirements. It prevents duplicating efforts when similar
    work has already been completed and documented. Well-documented tickets create
    organizational memory that persists even when team members leave or roles change.
    Historical tickets become valuable references and training resources.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索工单可以快速找到过去的解决方案，并将其应用于当前的问题或需求。它防止了重复工作，避免了在类似工作已完成并记录的情况下再次进行相同的努力。记录良好的工单为组织创建了记忆，即使团队成员离开或角色发生变化，这些信息也能持续存在。历史工单成为了有价值的参考资料和培训资源。
- en: From a process perspective, ticketing enables standardizing documentation practices
    across teams. Template ticket types can be defined to guide consistent information
    capture as tasks flow through workstreams.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从流程的角度来看，工单系统能够规范化团队之间的文档实践。可以定义模板工单类型，以指导一致的信息收集，确保任务在工作流中流转时信息一致。
- en: Collaboration
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 协作
- en: In each of the chapters so far, collaboration is a recurring element of a successful
    Salesforce DevOps strategy. Having a unified ticketing system also aids collaboration
    across teams such as product, development, QA, support, and so on. It creates
    a shared source of truth for cross-functional transparency.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，协作是成功的 Salesforce DevOps 策略中一个反复出现的要素。拥有一个统一的工单系统也有助于跨团队的协作，例如产品、开发、质量保证、支持等。它为跨职能团队提供了一个共享的真实信息来源，确保透明度。
- en: This transparency has a great deal of practical advantages. While individual
    items will still be controlled by the product owner in the early stages, a visible
    backlog presents a good opportunity for the development team to have input into
    stories that they feel might be too large or complex and need to break apart.
    It also allows the team to sketch out high-level implementation plans for stories
    and keep them together so that an individual developer isn’t left having to create
    a solution on their own, and that there’s a degree of consistency of approach
    regardless of who specifically picks up a ticket.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这种透明性具有很大的实际优势。虽然个别事项仍会在初期阶段由产品负责人控制，但可视化的待办事项清单为开发团队提供了一个机会，让他们能够参与到故事的讨论中，特别是当他们觉得某些故事可能过大或过于复杂，需拆解时。它还允许团队为故事绘制出高层次的实施计划，并将它们整理在一起，这样就不会让个别开发人员独自创建解决方案，也能确保无论谁负责工单，都有一定的一致性。
- en: Ticketing systems create a common platform for these diverse teams to gain visibility
    into each other’s workstreams. For example, the product team can monitor engineering
    tickets to track progress on new features. Support can check the status of pending
    bug fixes. This insight across departments enables the identification of dependencies
    and risks early. Seeing blockers ahead of time allows teams to proactively collaborate
    on solutions instead of reacting down the line.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 票务系统为这些不同的团队提供了一个共同的平台，使他们可以了解彼此的工作流。例如，产品团队可以监控工程工单，以跟踪新功能的进展。支持团队可以检查待解决的bug修复状态。跨部门的洞察力有助于及早识别依赖关系和风险。提前看到障碍使得团队可以主动合作解决问题，而不是后期做出反应。
- en: Tickets provide a centralized communication channel beyond just status updates.
    Teams can use the `@mention` function for relevant members for input, clarifying
    requirements, request approvals, or escalating issues through comments. For complex
    projects, people from different teams can be assigned jointly to collaborative
    tickets. This ensures alignment through shared ownership.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 工单提供了一个集中的沟通渠道，不仅仅是状态更新。团队可以使用`@mention`功能提及相关成员进行意见反馈、澄清需求、请求批准或通过评论进行问题升级。对于复杂项目，不同团队的人可以共同被指派到协作工单上。这确保了通过共同拥有实现一致性。
- en: Some ticketing systems have agile project management capabilities, such as Kanban
    boards. This provides a visual collaborative workspace to manage tickets flowing
    through various stages. The ability to convert issues into actionable tickets
    and vice versa streamlines hand-offs between teams. Seamless transitions reduce
    fall-throughs during cross-functional workflows. An additional benefit of Kanban
    boards is the ability to limit the amount of work in progress at any given point
    in the life cycle. Not only does this help not overload development teams, but
    it also provides great visibility of the efficiency of your process. The limit
    in a particular column might mean things aren’t leaving quickly enough, are coming
    in too quickly, or both.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一些票务系统具有敏捷项目管理功能，例如看板。它提供了一个可视化的协作工作空间，用于管理在不同阶段流转的工单。将问题转换为可操作的工单，反之亦然，有助于简化团队之间的交接。无缝的过渡可以减少跨职能工作流程中的遗漏。看板的另一个好处是能够限制在生命周期中的任何时刻进行中的工作量。这不仅帮助防止开发团队过载，还能提供清晰的流程效率可视化。某一列中的限制可能意味着任务流转不够迅速，或者任务进入过快，或两者兼有。
- en: Reporting and analytics
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 报告与分析
- en: Ticketing systems collect valuable data that can be used to generate insightful
    reports and metrics on development workflows. This supports data-driven decisions
    and process improvements. Common ticket reports include summarizing workload by
    assignee, ticket type, priority, project, and so on. These views help identify
    bottlenecks and resource gaps.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 票务系统收集的有价值数据可以用于生成有见地的报告和开发工作流指标。这支持基于数据的决策和流程改进。常见的工单报告包括按分配人、工单类型、优先级、项目等总结工作量。这些视图有助于识别瓶颈和资源缺口。
- en: Trend reports track things such as tickets opened/closed over time. Analytics
    around cycle time – from ticket creation to completion – help monitor the efficiency
    of development processes. Cycle time by ticket type or project provides insights
    into what areas need streamlining. Dashboard views can visually track ticket backlogs
    and SLA adherence. Other key metrics are lead time, throughput, and WIP limits
    – all of which help optimize process flows.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 趋势报告跟踪诸如工单开闭情况等内容。关于周期时间的分析——从工单创建到完成——有助于监控开发过程的效率。按工单类型或项目的周期时间为分析提供了需要简化的领域的洞察。仪表板视图可以直观地跟踪工单积压和服务水平协议（SLA）遵守情况。其他关键指标包括交付时间、吞吐量和在制品限制——所有这些都有助于优化流程。
- en: Reporting on time logged against tickets aids the accuracy of release and sprint
    planning based on historical velocity. Comparing estimated versus actual time
    helps improve effort estimation. For productivity, reports can show ticket completion
    rates by individual team members. Analyzing patterns may indicate the need for
    training, tooling improvements, or reallocations.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 根据工单记录的时间进行报告有助于基于历史速度提高发布和迭代计划的准确性。通过比较预估时间和实际时间，可以改进工作量估算。对于生产力，报告可以显示各个团队成员的工单完成率。分析模式可能表明需要进行培训、工具改进或资源重新分配。
- en: Overall, data analytics helps correlate how process changes impact ticket throughput
    and cycle time. This guides where to focus optimization efforts for maximum gains.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，数据分析有助于关联流程变化如何影响工单吞吐量和周期时间。这指导优化工作重点，以实现最大收益。
- en: Potential pitfalls
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 潜在的陷阱
- en: While ticketing systems in Salesforce DevOps offer considerable advantages,
    it’s crucial to acknowledge their potential pitfalls. One major risk is mistaking
    a backlog of tickets for actual planning. A well-maintained backlog is undoubtedly
    beneficial, but it’s no substitute for comprehensive plans, such as quarterly
    roadmaps, that provide a broader strategic view of the project’s objectives and
    timelines.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Salesforce DevOps 中的工单系统提供了相当大的优势，但必须承认它们可能带来的潜在问题。一个主要的风险是将积压的工单误认为是实际的计划。一个良好的维护的积压工单无疑是有益的，但它不能替代全面的计划，比如季度路线图，这些计划能提供项目目标和时间线的更广泛战略视角。
- en: Another challenge lies in the nature of the content within the tickets. Relying
    solely on tickets for documentation can lead to fragmented and scattered information.
    This fragmentation makes it difficult to form a coherent, up-to-date picture of
    the project, as opposed to when well-organized, centralized documentation is available.
    It’s vital to complement ticketing systems with robust documentation practices
    to ensure clarity and continuity.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个挑战在于工单中内容的性质。单纯依赖工单进行文档记录可能导致信息的零散和分散。这种碎片化使得形成项目的连贯、最新的全貌变得困难，而如果有良好组织和集中管理的文档可用，则可以避免这种情况。补充强有力的文档管理实践是确保清晰和连续性的关键，不能仅依赖工单系统。
- en: Lastly, the explicit handover of tickets between teams, if not managed thoughtfully,
    can lead to siloed operations. This runs counter to the ethos of DevOps, which
    emphasizes collaboration and integration across different teams. It’s essential
    to foster a culture where ticketing enhances communication and cooperation rather
    than creating barriers between different parts of the organization.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果不加以谨慎管理，团队之间的工单交接可能导致操作孤岛。这与 DevOps 的理念相悖，DevOps 强调不同团队之间的协作与整合。必须培养一种文化，使工单系统增强沟通与合作，而不是在组织的不同部分之间设立壁垒。
- en: JIRA
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JIRA
- en: JIRA, developed by Atlassian, is one of the most popular ticketing and project
    management tools, widely used for bug tracking, issue tracking, and agile project
    management. One of its main strengths is its flexibility. Teams can customize
    their workflows, create custom fields, and use various plugins to suit their unique
    needs. It integrates seamlessly with Salesforce, providing a unified and efficient
    workspace.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA 由 Atlassian 开发，是最受欢迎的工单和项目管理工具之一，广泛用于错误跟踪、问题跟踪和敏捷项目管理。它的主要优势之一是灵活性。团队可以定制他们的工作流程、创建自定义字段，并使用各种插件来满足他们的独特需求。它与
    Salesforce 无缝集成，提供统一而高效的工作空间。
- en: In a Salesforce DevOps context, JIRA can streamline the work process by creating
    a ticket for every task, bug, or feature. These tickets can be assigned, prioritized,
    and tracked until completion. JIRA’s reporting features give useful insights into
    the team’s performance, while its robust search capabilities help quickly find
    issues or tickets.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Salesforce DevOps 环境中，JIRA 可以通过为每个任务、错误或功能创建工单来简化工作流程。这些工单可以被分配、优先级排序，并跟踪直到完成。JIRA
    的报告功能为团队表现提供了有用的洞察，而其强大的搜索功能则帮助快速查找问题或工单。
- en: JIRA plays an integral role in managing end-to-end Salesforce development processes
    and enhancing DevOps collaboration through its flexible workflows and customizability.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA 在管理端到端 Salesforce 开发过程和通过其灵活的工作流程和可定制性增强 DevOps 协作中起着至关重要的作用。
- en: Let’s look at a typical project workflow that uses JIRA to manage tasks. Our
    example assumes a reasonably large enterprise team made up of multiple roles,
    as this is the most typical use case seen with JIRA implementations.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个典型的使用 JIRA 来管理任务的项目工作流程。我们的示例假设了一个由多个角色组成的相对较大的企业团队，因为这是 JIRA 实施中最典型的使用场景。
- en: The JIRA project life cycle
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JIRA 项目生命周期
- en: When starting the quarterly road mapping process, product managers rely on JIRA
    epics to define the major themes, features, and initiatives slated for the upcoming
    release. These high-level epics establish goals and direction for the team. As
    the product team delves further into details, those broad epics become populated
    with granular user stories, bugs, tasks, and subtasks. This hierarchy of issues
    captures both the big-picture vision and the incremental work needed to deliver
    on it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始季度路线图规划过程时，产品经理依赖 JIRA 史诗来定义即将发布的主要主题、功能和计划的举措。这些高层次的史诗为团队确立目标和方向。当产品团队进一步深入细节时，这些广泛的史诗会被细化为更具体的用户故事、错误、任务和子任务。这个问题的层级结构既捕捉了大局视角，也涵盖了实现这些目标所需的增量工作。
- en: By sprint planning, JIRA contains a trove of well-defined issues ready for execution.
    The Scrum team heavily utilizes JIRA’s agile capabilities to estimate issues,
    apply story points, and negotiate scope for the sprint. Release plans take shape
    by mapping dependencies and structuring issues into coherent sprints. Owners are
    assigned, risks discussed, and assumptions challenged so the team is aligned.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 到达冲刺规划阶段时，JIRA包含一大批准备执行的明确定义的问题。Scrum团队充分利用JIRA的敏捷能力来估算问题，应用故事点，并为冲刺协商范围。通过映射依赖关系和将问题结构化为连贯冲刺，释放计划开始形成。分配所有者，讨论风险，并挑战假设，以确保团队一致。
- en: Once the sprint is underway, developers take ownership of JIRA issues to build
    solutions to complex problems. JIRA is tightly integrated into the entire development
    workflow for traceability and automation. User stories are worked on in feature
    branches in Git that reference the JIRA issue number. All commits explain the
    work done and map to an issue in commit messages. Pull requests for peer code
    reviews also call out the issues they address.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦冲刺开始，开发人员将负责JIRA问题，为复杂问题构建解决方案。JIRA与整个开发工作流程紧密集成，以实现可追溯性和自动化。用户故事在Git的功能分支中进行工作，引用JIRA问题编号。所有提交都解释了所做的工作，并在提交消息中映射到问题。用于同行代码审查的拉取请求也指出它们解决的问题。
- en: This connectivity between Git and JIRA provides end-to-end traceability on code
    changes tied to issues. It also enables automation opportunities. Code builds
    can intake JIRA issue IDs to automatically link failures and test results as comments
    or child issues. Transitioning issues through workflow stages can trigger events
    in continuous integration such as build jobs, deployments, or notifications.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Git与JIRA之间的这种连接提供了与问题相关的代码更改的端到端可追溯性。它还提供了自动化机会。代码构建可以接受JIRA问题ID，自动将失败和测试结果链接为注释或子问题。通过工作流程阶段转换问题可以触发持续集成中的事件，如构建作业，部署或通知。
- en: For example, when a developer completes coding for a user story, they merge
    the feature branch to the main branch. This triggers a continuous integration
    job that runs Apex tests and static analysis. If any failures arise, they are
    logged as child issues of the story in JIRA for the developer to address. Successful
    builds can automatically deploy the code changes to a Salesforce sandbox for QA
    testing. JIRA issues then progress to the QA testing and validation stages of
    the workflow.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当开发人员完成用户故事的编码后，他们将功能分支合并到主分支。这会触发一个持续集成作业，运行Apex测试和静态分析。如果出现任何失败，它们将作为JIRA中故事的子问题记录，供开发人员解决。成功的构建可以自动将代码更改部署到Salesforce沙箱进行QA测试。然后，JIRA问题将进入QA测试和验证工作流程的阶段。
- en: QA engineers take an active role in Salesforce DevOps by automating validation
    to accelerate release cycles while improving quality. JIRA supports this through
    linked test cases, defects, and tight integration with CI/CD pipelines. QA logs
    detailed test steps, results, questions, media, and other issue comments as they
    verify user stories against acceptance criteria.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: QA工程师通过自动化验证在Salesforce DevOps中扮演着积极角色，从而加速发布周期同时提高质量。JIRA通过链接的测试用例，缺陷和与CI/CD管道的紧密集成来支持这一点。QA记录详细的测试步骤，结果，问题，媒体和其他问题评论，以验证用户故事是否符合验收标准。
- en: For efficient regression testing, they build automated test suites using frameworks
    such as Selenium and Jasmine for UI testing, and Apex unit tests for logic testing.
    These automated tests execute as part of continuous integration against feature
    branches and mainline code. QA sets up quality gates, so builds only progress
    if tests pass and code coverage thresholds are met.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了高效的回归测试，他们使用诸如Selenium和Jasmine的框架来构建自动化测试套件进行UI测试，以及使用Apex单元测试进行逻辑测试。这些自动化测试作为持续集成的一部分执行，针对功能分支和主线代码。QA设置质量门，只有在测试通过并且代码覆盖率达到阈值时，构建才能继续进行。
- en: Static code analysis is also baked into builds to check for vulnerabilities
    and enforce custom rulesets around code quality and best practices. Failures from
    any of these checks are logged as child issues or bugs, providing an audit trail
    on quality evolution.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 静态代码分析也包含在构建中，以检查漏洞并强制执行围绕代码质量和最佳实践的自定义规则集。来自任何这些检查的失败都作为子问题或错误记录，提供了质量演变的审计追踪。
- en: When all automated validations pass and QA completes exploratory testing, the
    user story transitions through the JIRA workflow. This can often trigger a continuous
    delivery workflow to automatically deploy and validate the changes in a Salesforce
    sandbox. Downstream teams are notified of the deployment for user acceptance testing.
    However, there are some caveats to be aware of in this approach – if that deployment
    fails for some reason, you also need to handle that and revert the status to whatever
    it was before, which can certainly be more complex. It’s also worth noting that
    some teams enforce a “swim lane limit” on their JIRA boards to prevent too much
    work sitting at any one status. So, even if you do manage to revert the status
    of a ticket that is associated with a failed deployment, there might not be room
    to move it back to a work-in-progress status. To address these types of issues,
    many teams take the opposite approach, in which a JIRA ticket status is only updated
    upon successful deployment.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有自动化验证通过并且质量保证完成探索性测试时，用户故事会通过 JIRA 工作流转移。这往往会触发持续交付工作流程，自动在 Salesforce 沙盒中部署和验证更改。通知下游团队进行用户验收测试。然而，在此方法中有一些需要注意的地方——如果由于某些原因部署失败，您还需要处理并将状态回滚到之前的状态，这显然会更加复杂。值得注意的是，一些团队在他们的
    JIRA 看板上实施了“泳道限制”，以防止太多工作停留在任何一个状态。因此，即使您设法将与失败部署相关联的工单状态回滚，可能也没有足够的空间将其移回工作进行中的状态。为了解决这些问题，许多团队采取了相反的方法，即仅在成功部署后更新
    JIRA 工单状态。
- en: This comprehensive automation of unit, integration, UI, performance, security,
    compliance, and deployment testing enables rapid feedback on quality. JIRA provides
    traceability on tests, validations, and code changes tied to issues being delivered,
    while automation frees up QA staff for higher-value testing while enforcing quality
    standards.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这种对单元测试、集成测试、UI测试、性能测试、安全性测试、合规性测试和部署测试的全面自动化，可以快速反馈质量问题。JIRA 提供了关于测试、验证和与交付问题相关的代码更改的可追溯性，同时自动化释放了质量保证人员，让他们可以进行更高价值的测试，同时强化质量标准。
- en: JIRA is invaluable in enabling the communication rhythms and transparency needed
    for Salesforce DevOps collaboration. Standups centered around JIRA issues provide
    quick status checks on blockers and progress. Retrospectives leverage JIRA data
    on cycle times and velocity to continuously improve processes.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA 在促进 Salesforce DevOps 协作中所需的沟通节奏和透明度方面不可或缺。围绕 JIRA 问题展开的站立会议能够快速检查阻碍因素和进展状态。回顾会议利用
    JIRA 数据中的周期时间和速度，持续改进流程。
- en: JIRA helps embed DevOps practices even without explicit agile frameworks. Breaking
    work into small issues enables rapid delivery and feedback. Tracking issues through
    defined workflows mirrors pipeline orchestration. Automated hand-offs based on
    JIRA transitions increase collaboration across teams.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 即使没有明确的敏捷框架，JIRA 也有助于嵌入 DevOps 实践。将工作拆分为小问题可以实现快速交付和反馈。通过定义的工作流跟踪问题，实现管道编排。基于
    JIRA 转换的自动交接增加了跨团队的协作。
- en: Powerful reporting and dashboards spotlight trends, risks, and dependencies.
    Activity streams and notifications keep everyone informed of issue changes in
    real time. This level of transparency supported by JIRA fosters shared ownership
    across silos.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 强大的报告和仪表板突出显示趋势、风险和依赖关系。活动流和通知保持每个人对实时问题变更的了解。JIRA 提供的这种透明度有助于跨部门共享责任。
- en: Requirements and acceptance criteria logged in JIRA aid collaboration between
    developers, QA, security, and other teams. Smooth hand-offs happen by aligning
    early on issue details rather than last-minute surprises.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JIRA 中记录的需求和验收标准促进了开发人员、质量保证、安全性以及其他团队之间的协作。通过早期对齐问题详情而非最后一刻的惊喜，实现了流畅的交接。
- en: JIRA provides a digital backbone that enables Salesforce teams to inspect and
    adapt quickly based on real-time data. Tight integration with version control,
    test automation, and CI/CD pipelines accelerates feedback cycles.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA 提供了数字化支撑，使 Salesforce 团队能够根据实时数据快速审视和调整。与版本控制、测试自动化和 CI/CD 流水线的紧密集成加速了反馈周期。
- en: Standups, retros, sprint planning, and work coordination all revolve around
    JIRA. It is an indispensable tool that empowers teams to deliver faster while
    improving quality and processes. JIRA can help cement an environment of continuous
    improvement, transparency, automation, and collaboration – the foundations of
    DevOps.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA 围绕着站立会议、回顾会议、冲刺规划和工作协调展开。它是一款不可或缺的工具，赋予团队更快交付的能力，同时提升质量和流程。JIRA 可以帮助巩固持续改进、透明化、自动化和协作的环境，这些是
    DevOps 的基础。
- en: A high-level JIRA workflow
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个高层次的 JIRA 工作流
- en: Your first step should be to create a JIRA project for your Salesforce release,
    with issue types for user stories, bugs, tasks, and so on. Within this project,
    you should then create epics to capture major features and initiatives for the
    release, and then break those epics down into user stories.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你的第一步应该是为 Salesforce 发布创建一个 JIRA 项目，其中包括用户故事、缺陷、任务等问题类型。在这个项目中，你应该创建史诗来捕获发布的主要特性和任务，然后将这些史诗拆分为用户故事。
- en: Developers pick up user stories from the backlog for sprint planning. Stories
    are estimated and prioritized before the user stories in the sprint are moved
    to **In Progress**.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员从待办事项中选择用户故事进行冲刺计划。故事在进行冲刺之前会被估算和优先排序，然后将冲刺中的用户故事移至**进行中**。
- en: Developers commit code to Git feature branches, referencing the JIRA issue number
    that relates to the user story. Once the work for an individual user story is
    complete, developers open pull requests when feature branches are ready for review.
    Pull requests link back to JIRA.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员将代码提交到 Git 功能分支，引用与用户故事相关的 JIRA 问题编号。当一个用户故事的工作完成后，开发人员在功能分支准备好进行审查时，会打开拉取请求。拉取请求会链接回
    JIRA。
- en: After some code review by peers, the pull requests are merged into the main
    branch, which may kick off automated builds. These builds execute Apex tests and
    static code analysis, with any failures tracked as issues in JIRA.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在经过同事的一些代码审查后，拉取请求会被合并到主分支，这可能会触发自动构建。这些构建会执行 Apex 测试和静态代码分析，任何失败都会作为问题追踪到 JIRA
    中。
- en: Successful builds can deploy code to a full copy sandbox for QA testing. QA
    tests user stories and logs any bugs as issues in JIRA for the developers to remediate.
    When user story acceptance criteria are met, QA moves the story to the **QA**
    **Approved** state.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的构建可以将代码部署到完整的沙盒环境中进行 QA 测试。QA 测试用户故事，并将任何错误记录为 JIRA 中的问题，供开发人员修复。当用户故事的接受标准满足时，QA
    会将该故事移动到**QA** **已批准**状态。
- en: A project manager should review the completed stories, with the product owner
    providing final approval. The project manager then batches approved stories for
    deployment to production via change sets.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 项目经理应审查已完成的故事，由产品负责人提供最终批准。项目经理随后将批准的故事批量部署到生产环境，使用变更集进行部署。
- en: A release manager typically coordinates the User Acceptance Testing (UAT) process
    and final deployment to production. After a successful release, the user stories
    are then marked as closed.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 发布经理通常协调用户验收测试（UAT）过程和最终的生产部署。在成功发布后，用户故事将标记为关闭。
- en: In the final review phase following a release, metrics can be gathered on team
    velocity, defect rates, and so on, and then the process repeats for subsequent
    sprints and releases.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布后的最终评审阶段，可以收集团队速度、缺陷率等指标，之后该过程会在随后的冲刺和发布中重复进行。
- en: This covers major steps such as sprint planning, CI/CD, code changes tied to
    issues, QA testing, approvals, and releases. The workflow is highly customizable
    in JIRA for each team’s needs – this is just a reasonably typical example.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这涵盖了主要步骤，如冲刺计划、CI/CD、与问题相关的代码更改、QA 测试、审批和发布。这个工作流程可以在 JIRA 中根据每个团队的需求高度定制——这只是一个相对典型的示例。
- en: Asana
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Asana
- en: Asana provides a powerful work management platform designed to help teams effectively
    coordinate, track, and deliver work across the organization. At its core, Asana
    enables the creation of flexible workflows that map to team processes with customizable
    stages to track task status. Tasks can be organized in list views, kanban-style
    board views, or calendar views based on what works best for each team.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Asana 提供了一个强大的工作管理平台，旨在帮助团队有效协调、跟踪并交付组织内的工作。Asana 的核心功能是支持创建灵活的工作流，这些工作流映射到团队流程，并具有可定制的阶段来跟踪任务状态。任务可以根据每个团队的需求，通过列表视图、看板样式的板视图或日历视图进行组织。
- en: Adopting Asana as the project management platform of choice can significantly
    enhance a Salesforce development team’s ability to plan, track, and collaborate
    on everything from new feature requests to production bug fixes. By mirroring
    their entire development life cycle across differentiated Asana projects, teams
    gain end-to-end visibility and control across the process.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 Asana 作为首选项目管理平台，可以显著提升 Salesforce 开发团队在从新功能请求到生产环境缺陷修复等方面的计划、跟踪和协作能力。通过在多个不同的
    Asana 项目中映射整个开发生命周期，团队可以在整个过程中获得端到端的可视性和控制。
- en: For example, creating separate projects for **Backlog**, **In Development**,
    **Code Review**, **QA Testing**, and **Production Release** provides a logical
    way to segment work as it flows from idea to deployment. Teams can further organize
    by dividing each project into sections based on workstream, application, or initiative.
    This helps cluster-related tasks and ensures continuity of effort.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，创建单独的项目来管理**待办事项**、**开发中**、**代码审查**、**QA 测试**和**生产发布**，提供了一种逻辑的方法，将工作从创意到部署的各个阶段进行分段。团队还可以通过根据工作流、应用程序或项目进一步划分每个项目的部分来进行组织。这有助于将相关任务聚集在一起，并确保工作的一致性。
- en: With this foundation in place, let’s walk through how Asana can optimize productivity
    and coordination from initial intake through final release.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在此基础上，我们来看看 Asana 如何从最初的需求收集到最终发布，优化生产力和协调工作。
- en: The Asana project life cycle
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Asana 项目生命周期
- en: First, requirement gathering is streamlined by creating a task for each new
    feature or enhancement request. The task can include a high-level description,
    expected delivery timeline, assignment to the appropriate developer or team, links
    to related documentation or tickets, and any other supporting details.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过为每个新特性或增强功能请求创建任务，简化了需求收集过程。任务可以包括高级描述、预期交付时间、分配给相应的开发人员或团队、相关文档或工单的链接，以及任何其他支持细节。
- en: Capturing requests in Asana provides traceability and easy reference later in
    the process. Custom fields can be defined to match the team’s way of working –
    for example, indicating the priority, level of effort, dependencies, or associated
    releases for each task.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Asana 中捕捉请求提供了可追溯性，并且便于后续流程中的参考。可以定义自定义字段以匹配团队的工作方式——例如，标明每个任务的优先级、工作量、依赖关系或相关发布版本。
- en: During sprint planning and backlog grooming, managers can survey the landscape
    of outstanding requests and schedule the highest-value ones into upcoming iterations.
    Setting milestones and dependencies between tasks ensures proper sequencing and
    delivery of functionality.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在冲刺规划和待办事项梳理过程中，管理人员可以检查未完成请求的概况，并将最具价值的任务安排到即将到来的迭代中。设置任务之间的里程碑和依赖关系，确保功能的正确顺序和交付。
- en: Once tasks are ready for active development, they can be moved into the **In
    Development** project. This provides developers with a clear view of their workload
    for the sprint. As work gets completed, developers can easily update the task
    status, log hours, attach screenshots or code snippets, and provide any other
    relevant commentary right within Asana.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦任务准备好进行开发，就可以将其移入**开发中**项目。这为开发人员提供了清晰的工作负载视图。随着工作的完成，开发人员可以轻松更新任务状态、记录工时、附加截图或代码片段，并在
    Asana 内提供任何其他相关评论。
- en: For developers, Asana acts as a central workspace to track and execute their
    assigned tasks during the development phase. As soon as work is identified during
    sprint planning, corresponding tasks are created in an **In Development** Asana
    project and assigned to developers based on their roles and capabilities.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发人员来说，Asana 作为一个中央工作空间，用于跟踪和执行他们在开发阶段分配的任务。一旦在冲刺规划期间识别出工作任务，相应的任务会在**开发中**
    Asana 项目中创建，并根据开发人员的角色和能力分配给他们。
- en: These tasks contain all necessary context such as descriptions, due dates, story
    points, links to tickets or specs, and tags indicating the applications or features
    being worked on. By consolidating all this information in Asana, developers have
    clarity on what needs to be done without having to dig through inboxes or chat
    histories.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这些任务包含所有必要的上下文信息，如描述、截止日期、故事点、链接到工单或规范的链接，以及标明正在处理的应用程序或特性的标签。通过将所有这些信息集中在 Asana
    中，开发人员可以清楚地知道需要做什么，而无需翻阅收件箱或聊天记录。
- en: As work begins, developers can break down larger tasks into granular subtasks
    to represent stages of completion. They can also log hours directly within Asana
    to capture the time spent on each task. Inline comments allow developers to provide
    updates on progress, ask clarifying questions, or request feedback.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 随着工作的开始，开发人员可以将较大的任务分解为更细粒度的子任务，以代表完成的各个阶段。他们还可以直接在 Asana 中记录工时，以便捕捉每个任务所花费的时间。内联评论允许开发人员提供进度更新、提出澄清问题或请求反馈。
- en: Code samples, screenshots, and other relevant artifacts can be attached to tasks
    as they are generated. Mentioning colleagues brings them into the conversation
    as needed. This creates a running record of progress and knowledge sharing that
    lives with the task.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 代码示例、截图和其他相关资料可以在生成时附加到任务中。提及同事会将他们引入到对话中。这创建了一个持续的进展记录和知识共享，伴随任务一起存续。
- en: For blocked or delayed tasks, developers can quickly raise red flags by updating
    statuses and notifying managers. Upon completion, tasks are marked as **Ready
    for QA**, which automatically routes them to the next stage in the workflow. Integrations
    with source control tools such as Git and Jenkins mean code commits and builds
    can automatically advance tasks through the pipeline.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于被阻塞或延迟的任务，开发人员可以通过更新状态并通知管理者迅速提出警告。完成后，任务会标记为**准备好进行 QA**，并自动将其路由到工作流程的下一个阶段。与
    Git 和 Jenkins 等源代码管理工具的集成意味着代码提交和构建可以自动推动任务通过流水线。
- en: Upon feature completion, work moves into the **Code Review** project where QA
    engineers validate implementation according to specifications. If issues are identified,
    they can spawn new bug tasks linked to the parent for traceability. This tightens
    the feedback loop for developers. Once approved by QA, thoroughly tested code
    progresses to user acceptance testing and staging deployment.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 功能完成后，工作转入**代码审查**项目，由 QA 工程师根据规范验证实现。如果发现问题，可以生成与父任务关联的新 bug 任务，便于追踪。这加快了开发者的反馈循环。一旦
    QA 批准，经过充分测试的代码将进入用户验收测试和预发布阶段。
- en: Automated integrations can be configured to update the task status upon successful
    deployment to each environment. This saves teams time manually tracking release
    activity. As work nears production readiness, the change log within Asana gives
    managers full context into what is slated to be released. Immediately, they can
    review all completed tasks, affected components, dependencies, and expected impact.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 可以配置自动化集成，以在每个环境成功部署后更新任务状态。这为团队节省了手动跟踪发布活动的时间。随着工作接近生产准备，Asana 中的变更日志为管理者提供了关于即将发布的完整背景。他们可以立即审查所有已完成的任务、受影响的组件、依赖关系和预期的影响。
- en: This level of transparency keeps managers informed and surfaces any roadblocks
    early. Team members can also be `@mentioned` in comments to loop them into discussions
    or solicit feedback on work in progress. If additional needs come up, new subtasks
    can be defined while retaining ties back to the original parent task.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这种透明度使得管理者始终保持信息更新，并能及早发现任何障碍。团队成员还可以在评论中被`@提及`，将他们拉入讨论或征求对正在进行工作的反馈。如果有额外的需求，可以在保留与原始父任务关联的情况下，定义新的子任务。
- en: With the full narrative visible, any last-minute changes can be minimized. After
    sign-off, the **Go** button can be clicked on approved production tasks. Peer
    reviews and spot checks post-deployment provide validation that everything rolled
    out smoothly.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在完整的叙事可见的情况下，任何临时的变更都可以最小化。签字后，点击批准的生产任务上的**Go**按钮。部署后的同行评审和抽查提供了验证，确保一切顺利发布。
- en: Now complete, tasks get marked as **closed** in Asana, creating a permanent
    audit trail from inception to completion. When sized correctly, tasks closed per
    sprint indicate team velocity, which can influence future planning and resourcing.
    Reviewing cycle time per task also uncovers any lags between environments.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 任务完成后，在 Asana 中标记为**已关闭**，从开始到完成创建一个永久的审计轨迹。正确估算任务时，每个冲刺中关闭的任务可以反映团队的工作速度，这有助于未来的规划和资源配置。检查每个任务的周期时间还可以揭示环境之间的任何延迟。
- en: Ongoing governance of Asana is required to shape role-based permissions, customize
    fields, set up automation, and monitor adoption. Project and task templates will
    help codify best practices and give teams a head start. Regular Asana training
    will ensure that team members are getting the best use of the full breadth of
    functionality.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 需要持续管理 Asana，以制定基于角色的权限、定制字段、设置自动化和监控采用情况。项目和任务模板有助于规范最佳实践并为团队提供起步的基础。定期的 Asana
    培训将确保团队成员能够充分利用其全部功能。
- en: In common with other ticket-based task management systems, Asana contributes
    significantly to communication and collaboration within mature DevOps teams. For
    standups, tasks assigned to each developer are front-and-center with the latest
    updates visible. Team members can easily reference blocked tasks, new impediments,
    and the help needed to unblock progress. Managers gain insight into velocity across
    working threads.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他基于票证的任务管理系统类似，Asana 对成熟的 DevOps 团队中的沟通和协作作出了重要贡献。在站立会议中，分配给每个开发人员的任务一目了然，最新的更新可见。团队成员可以轻松查看被阻塞的任务、新的障碍以及解除阻碍所需的帮助。管理者能获得各工作线程的速度情况。
- en: Retrospectives are enhanced by looking at historical Asana data on cycle times,
    workload distribution, and completion rates by developer. This spurs data-driven
    root cause analysis and process improvements.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾环节通过查看历史 Asana 数据（如周期时间、工作负载分配和开发人员的完成率）得到增强。这激发了基于数据的根本原因分析和流程改进。
- en: Backlog grooming is facilitated by having all candidate stories and defects
    sequenced in Asana with priority, scoping, and effort details. This information
    guides decision-making on what gets pulled into upcoming sprints.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将所有候选故事和缺陷按优先级、范围和工作量详细信息在 Asana 中进行排序，支持对待办事项的整理。这些信息为决定即将进入的冲刺提供指导。
- en: The common thread is Asana centralizing all tasks, statuses, and supporting
    context to inform conversations. Unlike chat or email, this knowledge persists
    attached to tasks for future reference. Asana’s flexibility supports any preferred
    cadence of team rituals.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 共同的联系点是 Asana 将所有任务、状态和支持性上下文集中化，便于沟通。与聊天或电子邮件不同，这些知识会附加在任务上，供未来参考。Asana 的灵活性支持任何团队仪式的偏好节奏。
- en: By providing transparency into who is doing what and by when, Asana fuels collaborative
    problem-solving, removal of blockers, and continuous improvement – core DevOps
    tenets. In this way, Asana contributes significantly to alignment, visibility,
    and velocity for Salesforce teams on the DevOps journey.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供透明的信息，明确谁在做什么以及何时完成，Asana 推动了协作式问题解决、消除障碍和持续改进——这些是 DevOps 的核心原则。通过这种方式，Asana
    对于 Salesforce 团队在 DevOps 之旅中的对齐、可见性和速度做出了重要贡献。
- en: A high-level Asana workflow
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级 Asana 工作流
- en: Begin with creating Asana projects to represent each stage of your Salesforce
    development life cycle (e.g., **Backlog**, **In Development**, **Code Review**,
    **QA Testing**, and **Production Release**). Within each of these Asana projects,
    create sections for different workstreams such as new features, bugs, enhancements,
    and so on. When new tasks are created in Asana, link them to the corresponding
    Git repo for your project and branches that will contain the code changes for
    each task.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建 Asana 项目，表示 Salesforce 开发生命周期的每个阶段（例如，**待办事项**、**开发中**、**代码审查**、**QA 测试**和**生产发布**）。在每个
    Asana 项目中，为不同的工作流创建部分，如新特性、缺陷、增强功能等。当在 Asana 中创建新任务时，将它们与项目的对应 Git 仓库和包含每个任务代码更改的分支关联起来。
- en: As developers work on tasks, they commit code changes frequently to Git branches
    named after the associated Asana task IDs. Upon completing development, developers
    push their feature branches to Git and move the Asana task into **Code Review**.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发人员在任务上工作时，他们会频繁地将代码更改提交到与相关 Asana 任务 ID 相对应的 Git 分支。完成开发后，开发人员将其特性分支推送到 Git
    并将 Asana 任务移至**代码审查**。
- en: The QA team then pulls the feature branch to locally validate changes described
    in the Asana task, with any failures logged as new tasks. Once approved, the QA
    team merges validated code into a release candidate branch in Git. This triggers
    deployment to downstream environments.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，QA 团队拉取特性分支，在本地验证 Asana 任务中描述的更改，并将任何失败记录为新任务。一旦通过审核，QA 团队会将已验证的代码合并到 Git
    中的发布候选分支。这将触发下游环境的部署。
- en: Before the final production deployment, the Git diff is reviewed alongside the
    Asana change log as a final check. After the release branch is deployed to production,
    it is merged into the main branch.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在最终生产部署之前，会对 Git diff 和 Asana 变更日志进行审查，作为最后的检查。发布分支部署到生产环境后，会将其合并到主分支。
- en: All tasks related to the release are closed in Asana and, optionally, Git commit
    logs are linked to Asana tasks to maintain end-to-end traceability. As part of
    the release review process, code coverage and quality metrics are taken from Git
    to provide input on developer performance and areas needing improvement.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 所有与发布相关的任务都在 Asana 中关闭，并且可选地将 Git 提交日志链接到 Asana 任务，以保持端到端的可追溯性。作为发布审查过程的一部分，会从
    Git 中获取代码覆盖率和质量指标，以提供关于开发人员表现和需要改进的领域的反馈。
- en: By integrating Git version control into this workflow, code changes are synchronized
    with project planning and testing processes in Asana. This provides comprehensive
    visibility and traceability.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 Git 版本控制集成到这一工作流中，代码更改与 Asana 中的项目计划和测试过程同步。这提供了全面的可见性和可追溯性。
- en: Azure Work Items
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure 工作项
- en: Unlike the previous two solutions, Azure Work Items are a subset of the functionality
    of a much larger overall DevOps solution – one targeting multiple platforms, not
    just Salesforce. Azure DevOps provides a large set of collaborative development
    tools, including Azure Boards, and the Azure Work Items contained therein, for
    work tracking. When we look specifically at the parallels with JIRA or Asana,
    then Azure Boards, with its Work Items feature, helps teams plan, track, and discuss
    work across the entire development cycle.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 与前两种解决方案不同，Azure工作项是一个更大整体DevOps解决方案的子集——该解决方案面向多个平台，而不仅仅是Salesforce。Azure DevOps提供了一套完整的协作开发工具，包括Azure
    Boards及其包含的Azure工作项，用于工作追踪。当我们专门看与JIRA或Asana的对比时，Azure Boards及其工作项功能帮助团队规划、跟踪并讨论整个开发周期中的工作。
- en: Work Items in Azure DevOps are a way to track tasks, bugs, features, and more.
    They can be organized into a hierarchy, so you can break down a large feature
    into manageable tasks and track progress at each level. You can visualize your
    work with Kanban boards, backlogs, custom dashboards, and reporting tools.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps中的工作项是一种跟踪任务、缺陷、功能等的方式。它们可以组织成一个层次结构，因此你可以将一个大型功能拆解为可管理的任务，并在每个层级上跟踪进展。你可以通过看板、待办事项、定制仪表盘和报告工具来可视化你的工作。
- en: Azure DevOps acts as the source of truth for development tasks while Salesforce
    provides customer insights directly from service, sales, and marketing teams.
    Viewing each of these data sources, with their different perspectives on the current
    state of your Salesforce system, creates a valuable view of priorities. For example,
    customer service agents can view Azure DevOps bugs and features within Salesforce
    cases to stay updated on issue resolution for customers. They can easily link
    bugs to support cases to showcase customer impact to developers.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps充当开发任务的真实来源，而Salesforce则直接从服务、销售和市场团队提供客户洞察。查看每个数据源，并且从不同的角度了解Salesforce系统当前的状态，能够创建一个有价值的优先级视图。例如，客户服务代理可以在Salesforce案件中查看Azure
    DevOps中的bug和功能，实时更新客户问题的解决情况。代理可以轻松地将bug与支持案件关联起来，向开发人员展示客户的影响。
- en: Meanwhile, developers gain visibility into which bugs are linked to high-value
    accounts and opportunities nearing close. This helps technical teams prioritize
    the most critical defects over lesser items. Seeing the full context of each work
    item enables smarter triage and efficient use of development resources. Quicker
    resolution of high-priority defects improves customer retention and satisfaction.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，开发人员可以看到哪些bug与高价值账户和即将成交的机会相关。这帮助技术团队将最关键的缺陷优先处理，而不是那些次要的项。通过看到每个工作项的完整上下文，能够实现更智能的缺陷处理，并有效利用开发资源。更快解决高优先级缺陷有助于提高客户留存率和满意度。
- en: On the flip side, when development teams complete items linked to Salesforce
    records, the changes instantly sync both ways. For instance, when a developer
    resolves a critical bug, the customer service agent sees the update in Salesforce
    immediately. This avoids unnecessary back-and-forth communication and keeps customers
    informed through centralized data.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，当开发团队完成与Salesforce记录相关的工作项时，变更会立即进行双向同步。例如，当开发人员解决一个关键bug时，客户服务代理会立即在Salesforce中看到更新。这避免了不必要的来回沟通，并通过集中数据保持客户的更新。
- en: With this bi-directional sync, work item updates in either system remain in
    real-time sync. Avoiding stale or duplicate data ensures accuracy and a single
    source of truth across departments. This increases process efficiency for collaborating
    on defect resolution.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种双向同步，任一系统中的工作项更新始终保持实时同步。避免过时或重复的数据确保了准确性，并在各部门之间提供了唯一的真实来源。这提高了在缺陷解决方面的协作效率。
- en: Further enhancing collaboration, Salesforce users can easily track progress
    on Azure DevOps work from within familiar CRM views. For example, customer service
    managers can create custom Salesforce dashboards to monitor bug resolution timelines.
    Account managers can view features planned for a client right on the account record.
    There is no need to cross-reference disparate systems as all data lives natively
    in Salesforce. This simplifies how non-technical users interact with vital development
    tasks without needing to learn Azure DevOps.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步增强协作，Salesforce用户可以在熟悉的CRM视图中轻松跟踪Azure DevOps工作的进展。例如，客户服务经理可以创建自定义的Salesforce仪表盘来监控bug解决的时间表。客户经理可以直接在账户记录中查看为客户规划的功能。所有数据都原生存在Salesforce中，因此无需交叉引用不同的系统。这简化了非技术用户与关键开发任务的互动，而无需学习Azure
    DevOps。
- en: Turning to the developer side, importing Azure DevOps Work Items into Salesforce
    grants new levels of customer insight to inform technical tasks. In traditional
    siloed models, developers have limited visibility into client needs and business
    objectives. By linking work items to accounts, opportunities, and support cases,
    the full context of each item becomes clear.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 转到开发人员端，将 Azure DevOps 工作项导入 Salesforce，可以为技术任务提供更深层次的客户洞察。在传统的孤岛模型中，开发人员对客户需求和业务目标的可见性有限。通过将工作项与账户、机会和支持案例关联，每个工作项的完整背景变得清晰。
- en: With this customer focus, developers can understand the experience and frustration
    behind certain bugs. Seeing linked support cases with exact user steps to reproduce
    an error brings clarity faster than traditional isolated tickets. Engineers gain
    empathy and appreciation for the customer journey, which inspires building features
    that truly solve pain points.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种以客户为中心的方式，开发人员可以理解某些 bug 背后的体验和挫败感。看到带有精确用户操作步骤的支持案例来重现错误，比传统的孤立票证更能迅速带来清晰度。工程师们获得了对客户旅程的共鸣和感激，从而激发了构建真正解决痛点的功能。
- en: The Azure Work Items life cycle
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure 工作项生命周期
- en: Now, diving deeper into Azure DevOps’ role specifically in the development phase
    of the DevOps life cycle, seamless Azure integration facilitates developer productivity
    and collaboration. Within a single Azure DevOps workspace, development teams can
    plan agile sprints, create work items, conduct repositories for source code, execute
    builds, manage testing, track defects, deploy to staging environments, and more.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们深入探讨 Azure DevOps 在 DevOps 生命周期中开发阶段的作用，Azure 无缝集成促进了开发人员的生产力和协作。在一个 Azure
    DevOps 工作区内，开发团队可以规划敏捷 sprint，创建工作项，管理源代码库，执行构建，管理测试，跟踪缺陷，部署到预发布环境等。
- en: For example, a developer working on a user story can easily view linked bugs,
    test cases, branches, and builds all in one place. This removes toggling between
    disjointed systems to piece together context. Azure Boards tie connected items
    together for efficient coding with reduced overhead. Within boards, developers
    can assign granular tasks to individuals and track the hours spent on each item.
    This level of visibility enables accurate tracking of capacity and sprint progress.
    Automated burndown charts plot completion over time to pinpoint scope creep or
    blockers needing resolution.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，开发人员在处理用户故事时，可以轻松查看所有关联的 bug、测试用例、分支和构建，所有信息都集中在一个地方。这消除了在不同的系统之间切换以拼凑上下文的麻烦。Azure
    Boards 将连接的项目聚合在一起，提高编码效率，减少开销。在 Boards 内，开发人员可以将具体的任务分配给个人，并跟踪每个任务花费的时间。这个级别的可见性使得能够准确追踪工作负载和
    sprint 进展。自动化的燃尽图可以绘制完成进度，帮助识别范围蔓延或需要解决的阻碍。
- en: For task management, customizable workflows enabled by Azure Boards allow the
    creation of subtasks, priority designation, status changes, assignment to individuals,
    tracking of remaining work, and more. Developers can break down larger stories
    into executable checklists of actionable development items.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在任务管理方面，Azure Boards 提供的可定制工作流允许创建子任务、优先级指定、状态更改、分配给个人、跟踪剩余工作等。开发人员可以将较大的故事拆解为可执行的开发项目清单。
- en: With tasks established, developers utilize Azure Repos for secure source code
    management across Git and GitHub. Advanced version control features such as branching
    and merging enable developers to isolate changes during new feature creation.
    Repos safeguard code integrity throughout the coding process.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在任务管理方面，开发人员使用 Azure Repos 进行安全的源代码管理，支持 Git 和 GitHub。诸如分支和合并等高级版本控制功能使开发人员能够在创建新功能时隔离更改。Repos
    在整个编码过程中保护代码完整性。
- en: Next, by integrating with Azure Pipelines, developers can automatically build,
    test, and deploy with every code change to provide rapid feedback. Full traceability
    from commit to deployment simplifies root cause analysis. Failures get flagged
    quickly to maintain velocity.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过与 Azure Pipelines 集成，开发人员可以在每次代码变更时自动进行构建、测试和部署，从而提供快速反馈。从提交到部署的完整可追溯性简化了根本原因分析。故障能够迅速被标记，以保持开发速度。
- en: For testing, developers leverage Azure Test Plans to create test cases that
    automatically integrate with builds. Testers can easily track which test cases
    need execution, view the status of test runs, and log defects. Linking bugs to
    failing tests accelerates resolution.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试方面，开发人员利用 Azure Test Plans 创建测试用例，并与构建自动集成。测试人员可以轻松跟踪需要执行的测试用例，查看测试运行状态，并记录缺陷。将
    bug 与失败的测试用例关联起来加速了解决问题。
- en: Throughout development, teams utilize collaborative tools such as customizable
    team dashboards, built-in wikis, and discussion threads for improving visibility
    and alignment. With everything housed in Azure, developers reduce task switching
    and stay focused. By centralizing the dev life cycle into Azure DevOps, developers
    gain an agile, productive, and collaborative environment that is purpose-built
    for modern development. Integrating these capabilities with customer data from
    Salesforce completes the contextual picture that developers need to deliver innovative
    solutions.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，团队利用协作工具，如可自定义的团队仪表盘、内置的维基和讨论线程来提高可见性和协调性。所有内容都集中在 Azure 中，开发人员可以减少任务切换，保持专注。通过将开发生命周期集中到
    Azure DevOps 中，开发人员获得了一个敏捷、高效且协作的环境，专为现代开发而设计。将这些功能与来自 Salesforce 的客户数据相结合，形成了开发人员交付创新解决方案所需的完整背景。
- en: A high-level Azure Work Items workflow
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高层次的 Azure Work Items 工作流
- en: To use Azure Work Items for tracking changes in a system using Azure DevOps
    Repos as the Git provider, you begin by setting up a project in Azure DevOps.
    This project serves as the central hub for both your code in Azure Repos and your
    project management activities in Azure Boards, which include your work items.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 若要使用 Azure Work Items 跟踪使用 Azure DevOps Repos 作为 Git 提供者的系统中的更改，你首先需要在 Azure
    DevOps 中设置一个项目。这个项目是你在 Azure Repos 中的代码和在 Azure Boards 中的项目管理活动（包括你的工作项）的集中枢纽。
- en: Once your project is established, the next step is to configure Azure Repos
    within this project. This involves initializing a new repository or importing
    an existing one into Azure Repos. This repository will store your code and track
    changes made over time.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的项目建立，下一步就是在这个项目中配置 Azure Repos。这包括初始化一个新的代码库或将现有代码库导入到 Azure Repos。这个代码库将存储你的代码，并跟踪随着时间推移所做的更改。
- en: After setting up your repository, the focus shifts to Azure Boards, where you
    manage your work items. These work items can range from features and user stories
    to tasks, bugs, and more, representing the different aspects of your project.
    The key here is to link these work items directly to the changes in your Azure
    Repos. This linking provides traceability and a clear history of what code changes
    relate to which project tasks.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好你的代码库后，重点转向 Azure Boards，在那里你管理你的工作项。这些工作项可以包括特性、用户故事、任务、缺陷等，代表项目的不同方面。关键是将这些工作项直接与
    Azure Repos 中的更改关联。这种关联提供了可追溯性，并清晰地记录了哪些代码更改与哪些项目任务相关联。
- en: To establish this link, when committing changes to your repository in Azure
    Repos, you include references to these work items in your commit messages. Azure
    DevOps automatically links these commits to the mentioned work items. For example,
    including a phrase such as `Fixes AB#123` in your commit message would link that
    commit to work item 123 in Azure Boards.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了建立这种关联，在提交更改到 Azure Repos 的代码库时，你需要在提交信息中包含对这些工作项的引用。Azure DevOps 会自动将这些提交与提到的工作项链接。例如，在提交信息中加入类似
    `Fixes AB#123` 的短语，将会把该提交与 Azure Boards 中的工作项 123 关联起来。
- en: Within Azure Boards, you can view the development status and associated commits
    for each work item. This visibility allows you to track the progress of your development
    directly from the work items, offering a comprehensive view of both coding and
    project management activities.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure Boards 中，你可以查看每个工作项的开发状态及相关的提交记录。这种可见性让你可以直接从工作项跟踪开发进度，提供了编码和项目管理活动的全面视图。
- en: This high-level workflow is integral for teams using Azure DevOps for their
    software development. It ensures a seamless integration between code management
    and project tracking, enhancing the overall efficiency and transparency of the
    development process.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这个高层次的工作流对于使用 Azure DevOps 进行软件开发的团队至关重要。它确保了代码管理与项目追踪之间的无缝集成，提高了开发过程的整体效率和透明度。
- en: For more detailed instructions and best practices, you should consult the official
    Azure DevOps documentation provided by Microsoft, which offers comprehensive guides
    and step-by-step tutorials for setting up and managing these integrations.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要更详细的说明和最佳实践，你应该参考微软提供的官方 Azure DevOps 文档，其中包含了关于如何设置和管理这些集成的全面指南和逐步教程。
- en: Using an Azure Work Items workflow with GitHub
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Azure Work Items 工作流与 GitHub
- en: It is equally possible to use GitHub as your main Git provider and still take
    advantage of the tracking capabilities of Azure Work Items. We first install the
    Microsoft Azure Boards application from the GitHub Marketplace, which authorizes
    the integration between the two systems. Within GitHub, under **organization settings**,
    we can verify that the Azure Boards GitHub app has been authorized correctly.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 同样可以将 GitHub 用作主要的 Git 提供者，同时仍然能够利用 Azure 工作项的追踪功能。我们首先从 GitHub Marketplace
    安装 Microsoft Azure Boards 应用程序，这样就授权了两个系统之间的集成。在 GitHub 中，进入**组织设置**，我们可以验证 Azure
    Boards GitHub 应用是否已正确授权。
- en: Next, in the Azure DevOps portal, we connect the Azure Boards organization to
    the designated GitHub account through **GitHub Connections**. Here, we specify
    the Azure DevOps organization, project, and repositories to sync with GitHub.
    Critical mappings are then configured in Azure Boards under the *repository mapping*
    section, aligning GitHub repos to Azure DevOps teams and branches.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在 Azure DevOps 门户中，我们通过**GitHub 连接**将 Azure Boards 组织连接到指定的 GitHub 账户。在这里，我们指定要与
    GitHub 同步的 Azure DevOps 组织、项目和代码库。然后，在 Azure Boards 中的*代码库映射*部分配置关键映射，将 GitHub
    仓库与 Azure DevOps 团队和分支对齐。
- en: With the integration setup, developers can now create pull requests and commit
    code changes within GitHub, referencing related Azure DevOps work items directly
    in the commit messages using the work item ID format prefixed with `AB` (for Azure
    Boards). For example, adding `AB#206` to your commit message would link to work
    item ID 206.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完集成后，开发人员现在可以在 GitHub 中创建拉取请求并提交代码更改，在提交信息中直接引用相关的 Azure DevOps 工作项，使用工作项
    ID 格式，前缀为 `AB`（表示 Azure Boards）。例如，在提交信息中添加 `AB#206` 将链接到工作项 ID 为 206 的工作项。
- en: In the other direction, you can click the **Add Link** button on a work item
    and select **Existing Item** to add the URL link to a GitHub commit, pull request,
    or issue. This bidirectional linking between the two systems gives full traceability
    between coding activity and project tasks, user stories, bugs, and other work
    items managed in Azure Boards. The integration provides an efficient development
    workflow to maintain progress visibility as code evolves.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一方向上，你可以点击工作项上的**添加链接**按钮，并选择**现有项**，将 GitHub 提交、拉取请求或问题的 URL 链接添加到工作项中。两个系统之间的双向链接提供了编码活动和项目任务、用户故事、缺陷以及在
    Azure Boards 中管理的其他工作项之间的完整可追溯性。这种集成提供了一种高效的开发工作流，可以在代码演进时保持进度可视性。
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we’ve discussed the enormous value and benefits that having
    a task tracking or ticketing system can bring when integrated into your DevOps
    workflow – both at a technical level through Git integration and in terms of giving
    visibility and organization of your work.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了将任务跟踪或工单系统集成到 DevOps 工作流中所能带来的巨大价值和好处——无论是在通过 Git 集成实现技术层面的支持，还是在提供工作可视化和组织性方面。
- en: 'We looked at some of the common choices of tools that provide the capabilities
    needed to manage your tasks in a DevOps pipeline, as well as a high-level workflow
    for getting started with each system. Hopefully, this will give you both insight
    and inspiration to bring order to your development life cycle with these solutions.
    To aid your decision-making process, here’s a brief overview of each tool’s strengths
    and weaknesses:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们考察了一些常见的工具选择，这些工具提供了在 DevOps 流水线中管理任务所需的功能，并为每个系统的入门提供了一个高级工作流。希望这能为你带来洞察和灵感，帮助你通过这些解决方案为开发生命周期带来秩序。为了帮助你的决策过程，以下是每个工具的优缺点简要概述：
- en: '| **Feature** | **JIRA** | **Asana** | **Azure** **Work Items** |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| **特性** | **JIRA** | **Asana** | **Azure** **工作项** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| **Strengths** |  |  |  |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| **优点** |  |  |  |'
- en: '| **Project Management** | Advanced agile management, strong bug tracking |
    User-friendly, great for task and project management | Comprehensive agile planning,
    integrated with Azure DevOps |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| **项目管理** | 高级敏捷管理，强大的缺陷跟踪 | 用户友好，适合任务和项目管理 | 综合的敏捷规划，集成 Azure DevOps |'
- en: '| **Customization** | Highly customizable, adaptable to complex workflows |
    Simple, easy to use, with basic customization | Highly customizable, supports
    complex workflows |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| **定制化** | 高度可定制，适应复杂工作流 | 简单，易于使用，提供基础定制功能 | 高度可定制，支持复杂工作流 |'
- en: '| **Integration** | Deep integration with other Atlassian products | Good integration
    with various apps, including Salesforce | Strong integration with Microsoft products
    and services |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| **集成** | 与其他 Atlassian 产品的深度集成 | 与包括 Salesforce 在内的各种应用良好集成 | 与 Microsoft
    产品和服务的强大集成 |'
- en: '| **Reporting** | Robust reporting and analytics | Basic but user-friendly
    reporting | Detailed reporting, analytics, and dashboards |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| **报告功能** | 强大的报告和分析功能 | 基本但易于使用的报告 | 详细的报告、分析和仪表板 |'
- en: '| **Collaboration** | Good for technical teams, detailed tracking | Excellent
    for cross-functional team collaboration | Effective for teams deeply integrated
    with the Microsoft ecosystem |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| **协作** | 适合技术团队，详细的追踪功能 | 非常适合跨职能团队的协作 | 对与微软生态系统深度集成的团队非常有效 |'
- en: '| **Scalability** | Scales well for large and complex projects | Suitable for
    teams of all sizes | Ideal for large teams, especially in enterprise environments
    |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| **可扩展性** | 适合大规模和复杂项目的扩展 | 适用于各种规模的团队 | 非常适合大型团队，特别是在企业环境中 |'
- en: '| **Weaknesses** |  |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| **缺点** |  |'
- en: '| **User Interface** | Complex interface, steeper learning curve | Limited
    features for complex project management | Can be overwhelming for non-technical
    users |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| **用户界面** | 界面复杂，学习曲线较陡 | 适用于复杂项目管理的功能有限 | 对非技术用户来说可能显得令人不知所措 |'
- en: '| **Pricing** | Can be expensive, especially for large teams | Premium features
    require paid plans | Can be costly, especially with additional Azure services
    |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| **定价** | 对大型团队来说可能非常昂贵 | 高级功能需要付费计划 | 可能会很昂贵，尤其是需要额外的 Azure 服务时 |'
- en: '| **Flexibility** | May be overly complex for simple projects | Less flexible
    for complex, technical projects | Tied closely to other Azure services, less standalone
    capability |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| **灵活性** | 对简单项目来说可能过于复杂 | 对复杂技术项目来说灵活性差 | 与其他 Azure 服务紧密关联，独立性较差 |'
- en: '| **Initial Setup and** **Learning Curve** | Requires time to set up and learn,
    especially for non-technical users | Easy to start with but has limitations for
    scaling | Requires familiarity with the Microsoft ecosystem |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| **初始设置和学习曲线** | 需要时间进行设置和学习，特别是对非技术用户而言 | 入门简单，但扩展性有限 | 需要熟悉微软生态系统 |'
- en: '| **Collaboration Outside** **Technical Teams** | Less intuitive for non-technical
    team members | Excellent for all team types | Best suited for teams already using
    Microsoft tools |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| **跨技术团队的协作** | 对非技术团队成员来说不太直观 | 适用于所有类型的团队 | 最适合已经使用微软工具的团队 |'
- en: Table 8.1 – A comparison of ticketing systems’ strengths and weaknesses
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 表 8.1 – 工单系统的优缺点对比
- en: In the next chapter, we’ll move on to another of the core pillars of Salesforce
    DevOps – backing up your data and your metadata. We’ll cover why it’s important
    to consider both as part of a robust backup strategy and discuss how the effectiveness
    of any backup lies in your ability to restore it quickly and easily.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍 Salesforce DevOps 的另一个核心支柱——备份你的数据和元数据。我们将探讨为什么将两者都纳入强大备份策略是很重要的，并讨论任何备份的有效性都取决于你能否快速且轻松地恢复它。
