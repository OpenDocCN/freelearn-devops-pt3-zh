- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding the Software Development Life Cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **software development life cycle** (**SDLC**) is the software industry’s
    procedure for creating new software. This technique ensures that software developers
    build high-quality, competitively priced products in the shortest amount of time
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: The SDLC encompasses various stages, such as planning, writing, testing, and
    maintaining code. Software engineers adhere to the software development life cycle
    to conceptualize and develop software applications for many platforms, including
    laptop and desktop computers, cloud infrastructure, mobile devices, video gaming
    systems, kiosks, and other technology platforms. The concept of “**life cycle**”
    was initially introduced during the 1950s to delineate the several phases associated
    with the creation of a novel computer system. However, it has since become widely
    adopted to encompass all stages in the production of software.
  prefs: []
  type: TYPE_NORMAL
- en: Although this book is concerned with **DevOps release management**, it is crucial
    to understand the software development life cycle first, how it relates to release
    management, and where both fit into the overall project management landscape.
    In a nutshell, SDLC is a powerful tool in the project management utility belt.
    It improves the focus and efficiency of everyone on the team, maximizing their
    productivity.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this first chapter, you will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The definition of the SDLC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The seven phases of the SDLC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SDLC versus other life cycle management methodologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining SDLC and looking at its seven phases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SDLC refers to the systematic approach that development teams use to produce
    high-quality software with optimal cost efficiency. The primary goal is to mitigate
    risk and ensure that the software being developed surpasses the customer’s expectations.
    Using this method, you will first create a comprehensive strategy that will direct
    product development, and then you will break it all down into more manageable
    components that can be scheduled, finished, and measured.
  prefs: []
  type: TYPE_NORMAL
- en: The SDLC can be understood as a conceptual framework that outlines the many
    stages encompassed by a chosen methodology rather than being a methodology in
    and of itself. That is to say, the SDLC process exhibits variations across different
    teams and products. Nevertheless, it is worth noting that many of the same stages
    are commonly shared among the majority of SDLC models that are in common practice
    today. These stages include **planning and analysis**, **design**, **build**,
    **testing**, **implementation**,and **maintenance/support**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1: The seven stages of the SDLC](img/B21803_01_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1: The seven stages of the SDLC'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Planning and Analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first phase of the SDLC is the **project planning stage**, where you gather
    business requirements from your clients and stakeholders. The primary objective
    of this phase is to enable you to define the fundamental problem a customer is
    facing and discover appropriate solutions. Planning facilitates the identification
    of the essential components that are necessary for the development of a new system,
    enabling the fulfillment of project requirements by applying a deliberate and
    methodical process. Analysis allows you to acquire the necessary resources before
    starting a new software development endeavor. At this point, calculations are
    made regarding the resources, costs, and time required to successfully complete
    the project.
  prefs: []
  type: TYPE_NORMAL
- en: In order to effectively determine the scope of production, prioritize production
    items, and establish a development cadence, business analysts engage with their
    customers to collect requirements, determine the target demographic, and consult
    with industry professionals. All of this is done with the objective of formulating
    a comprehensive **business specification** (**BS**) document. This document may
    be commonly referred to as the **customer requirement specification** (**CRS**)
    by various organizations and teams. It should be noted that although creating
    a BS document is considered good practice, some development teams may choose to
    forgo using one, opting instead for a less formal approach, as you will soon discover.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of a BS document is so that you can provide a list of client problems
    that currently exist so that programmers can fix them using software. It can be
    a valuable tool in assisting the group in thinking outside of the box about how
    to make products better. You should hand off the document to the development team
    once it has been determined that the software project is in line with the business
    and stakeholder goals, is feasible to construct, and fulfills user demands.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Define Requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The aforementioned phase is significant as it facilitates the transformation
    of the data that you’ve acquired during the planning and analysis phase into well-defined
    requirements for the team members who are responsible for development. **Defining
    requirements** facilitates the creation of many important documents, including
    a **software requirement specification** (**SRS**), a **use case document**, and
    a **requirement traceability matrix document**, if needed.
  prefs: []
  type: TYPE_NORMAL
- en: According to the business specification document, senior members of the development
    team collaborate with stakeholders and specialists to plan the software development
    project. The project could be about making a new software product or making an
    existing one even better. Identifying potential difficulties at this early stage
    is crucial. If a problem is discovered, managers and developers propose various
    solutions, which are then presented and analyzed in order to identify optimal
    alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: 'During this preliminary stage of development, team members collaborate on comprehensive
    plans related to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The intentions behind the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The requirements of the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anticipated issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opportunities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Risks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The primary objective of this stage is to accurately determine the functional
    requirements for a project. Performing this necessary analysis ensures that the
    final deliverable aligns with the specific requirements and expectations of your
    clients and includes the proactive measures that must be taken in order to guarantee
    the fulfillment of your customers’ needs and preferences.
  prefs: []
  type: TYPE_NORMAL
- en: In short, this SDLC stage is employed as a comprehensive technical blueprint
    wherein clients articulate their expectations, requirements, and demands for the
    project. By defining all of these elements, you can ensure that all elements of
    your software projects receive equitable consideration during the design and development
    process.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **design stage** is when you begin translating ideas into a tangible form.
    The initial strategy and vision are further developed and documented in the form
    of a **software design document** (**SDD**) that defines several aspects, such
    as system architecture, programming language selection, template utilization,
    platform choice, and the implementation of application security measures. This
    is also the location where you can create diagrams and flowcharts that illustrate
    the software’s response to user activities. Sometimes, the design process includes
    the creation of a minimum viable product or proof-of-concept. A pre-production
    version of the product can help you imagine how the final product will look. This
    helps to keep any required adjustments minor and also helps the team avoid having
    to completely rewrite the code from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: The SDD will play a vital role in the production process, particularly in the
    development stage (see stage 4). Developers will rely heavily on the SDD as their
    primary reference to write their code. In order to mitigate any potential issues
    and risks identified in the earlier phases, you must also consult the SRS document
    as well. It serves as a reference point for designing the product, ensuring that
    it incorporates measures that shield the team from any potential risks identified
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: A real-world example that showcases the design phase’s usefulness is exemplified
    by how local and federal government agencies use it to establish scalable frameworks
    that are consistent and repeatable. To accomplish this, the design phase of the
    SDLC might consist of pre-arranged templates and guidelines created by centralized
    departments that offer structured content used to define, implement, and communicate
    all project aspects. For example, this helps scale software applications that
    are used to issue and manage driver’s licenses, voter registration cards, and
    library cards that are all interoperable across multiple jurisdictions. This is
    particularly useful in the case of disparate jurisdictions that are managed with
    varying levels of resources and different styles of leadership, but they must
    remain federated. This level of forethought helps determine the costs associated
    with real-world implementation or ensure that the end result serves all stakeholders
    involved.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to keep in mind during the third stage of the SDLC is that the end-users
    should have an opportunity to review the design and articulate any modifications
    to the intended system. Here, you will work together to create the final technical
    design documents before going into production. At this point, all of the necessary
    requirements for developing new software or systems should be established, and
    a backlog of work can be created.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The fourth phase of the SDLC is where most of the work on a project really
    begins in earnest. A team of programmers, systems engineers, and business developers
    collaborate together and begin the process of software development. At this point,
    a Gannt chart or Kanban board is typically created to make sure that work on the
    project follows a smooth cadence. Development teams will typically organize their
    work using one of two approaches: through the **implementation of sprints** or
    **as a sustained, continuous development endeavor**. Regardless of the method
    employed, teams will strive to complete tasks as quickly as possible.'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: '**Sprints**: A sprint is a limited amount of time that development teams have
    to get a certain amount of work done. Sprint duration can vary from one week to
    one month but is typically about two weeks. The short time constraint of a sprint
    encourages developers to prioritize the release of modest, incremental improvements
    over the release of large, sweeping changes. Because of this, less time is spent
    debugging the program, and the end-user experience is improved.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Continuous development**: Software development approaches that use continuous
    development and agility share many similarities. Instead of making massive, all-at-once
    improvements to software, incremental ones are produced on a continuous basis,
    allowing for code to be released to users as soon as it is complete and tested.
    Software development, testing, and releasing updates to production environments
    can all be streamlined and automated using continuous development.'
  prefs: []
  type: TYPE_NORMAL
- en: During the **development** stage, the product code is written in accordance
    with the SDD (see stage 3) so that the product can be manufactured efficiently.
    This involves the development team building out a new system from the ground up
    or approaching an existing project with new requirements and fresh perspectives.
    This may include facilitating a smooth and cost-effective digital transformation
    from an existing system to a new one in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: During this stage, developers break down the project into smaller software components
    that will eventually become the finished product. In order to construct the code,
    developers make use of a wide variety of tools and computer languages. These are
    chosen in accordance with the prerequisites of the software products that are
    being built.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the programming tools may involve the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Integrated development** **environments (IDEs):**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Eclipse**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft** **Visual Studio**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PyCharm**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version** **control systems:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Git**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitHub**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gitlab**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bitbucket**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some of the more common programming languages may include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**C#**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**C++**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Python**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JavaScript**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Go**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Close involvement from senior leadership in this phase is crucial for reaching
    the project’s goals because this step of the SDLC can consume a significant amount
    of time. It is essential that you have a predetermined timeframe as well as milestones
    in place so that the software developers know what the objectives are, and so
    you can monitor how they’re progressing. By the end of this phase, the bulk of
    the product code will be completed.
  prefs: []
  type: TYPE_NORMAL
- en: In certain instances, the development phase may coincide with the testing phase,
    during which specific tests are conducted to ensure the absence of significant
    software defects.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The production of software without conducting a thorough **testing** of its
    features and functionality is both untenable and ill-advised; the fifth phase
    is dedicated to testing. To confirm that everything is working properly, QA engineers
    will conduct an assortment of tests, which include code analysis, security, integration,
    performance, and functional tests. Bugs and defects can be successfully resolved
    through repeated testing and analysis. Until a system’s design satisfies a client’s
    requirements, continuous testing is something that you’ll want to be doing. Performing
    manual software testing by the team is better than no testing at all, but preferentially,
    it should all be automated where possible.
  prefs: []
  type: TYPE_NORMAL
- en: Product testing should be performed by your quality assurance team before releasing
    the software into a production environment to ensure that it is fully functional
    and accomplishes its intended goals. Major problems with the user experience or
    security can also be worked out during the testing phase. In any case, proper
    testing will guarantee that every component of the software performs as expected.
    The final step of a product’s development includes validation, verification, and
    user acceptance testing. If the product makes it this far, it is likely ready
    for release.
  prefs: []
  type: TYPE_NORMAL
- en: 'Including testing, the software should be subjected to a formal **quality assurance**
    (**QA**) procedure to certify the product’s quality. Software testing will usually
    consist of the following kinds of tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Performance testing**: Performance testing is a commonly employed testing
    strategy that aims to assess the responsiveness and stability of a system when
    subjected to a specific workload. Additionally, it can be utilized to examine,
    quantify, authenticate, or corroborate several other system quality features,
    including scalability, dependability, and resource utilization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functional testing**: Functional testing, or black-box testing, is a quality
    assurance process that creates test cases based on the documented requirements
    of the software component being evaluated. The purpose of functional software
    testing is to determine whether or not a system or its individual parts meet predefined
    functional requirements. The functions are tested by observing their responses
    to input, and the underlying structure of the code is rarely taken into account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security testing**: Security testing helps information systems safeguard
    data and work properly by detecting security issues. Due to the logical limits
    of security testing, passing does not guarantee that the system is flawless or
    meets security criteria. Security needs may include confidentiality, integrity,
    authentication, availability, authorization, and non-repudiation. System security
    requirements determine the security requirements to be tested. Security testing
    has many definitions and methods. By establishing a foundation, a security taxonomy
    helps us grasp these techniques and meanings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unit-testing**: Unit testing is a technique for verifying the quality of
    software by evaluating discrete sections of code, or “units of source code,” such
    as one or more computer program modules, along with their corresponding control
    data, usage processes, and operating procedures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UI/UX testing**: In user interface (UI) testing, testers verify that on-screen
    elements, including buttons, fields, and labels, perform as expected. Screens
    that have controls, such as toolbars, colors, typefaces, sizes, buttons, and icons,
    are tested for their responsiveness to user input as part of UI testing. The purpose
    of UI testing software is to simulate the end user’s experience with a product
    or service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regression testing**: Regression testing involves performing both functional
    and non-functional tests again after a change has been made to confirm that the
    program continues to function as expected. A **software regression** is a type
    of software bug where a feature that has worked before stops working. Software
    updates, feature additions, and even minor configuration tweaks can all necessitate
    additional testing to ensure compatibility. Test automation is commonly used in
    regression testing due to the exponential growth of test suites with each fault
    discovered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User acceptance testing**: The final stage of software development is user
    acceptance testing (UAT), where end users and clients evaluate the product in
    real-world scenarios to assess its functionality and utility. UAT focuses on whether
    a piece of software can work in users’ real-world systems, not its design or functionality.
    Development teams must execute UAT because their software assumptions may not
    hold true in their daily work owing to miscommunication, misunderstanding, oversight,
    or changing needs. Beta testers, in real-world situations, test software and give
    developers input during UAT to fix any flaws before release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 6\. Deployment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After testing is completed, the product gets released to the market, but that
    could simply be internally within the organization where you work. Depending on
    the business model, **product deployment** may involve numerous steps or employ
    many tactics ranging from a **big bang** to a **rolling release** or something
    in between. There will be more time for testing if the product is launched in
    stages, such as blue/green or canary deployments. The release of the final product
    or the need for further adjustments to the code is contingent on what feedback
    is received. The deployment stage usually yields some measure of unknown, undesirable
    outcomes that you should anticipate.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Maintenance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the seventh SDLC stage, **maintenance** and **upgrades** are prioritized.
    At this point, the system can be tuned for better performance, and new capabilities
    can be added over time. The software deployment will undergo continuous monitoring
    to mitigate potential performance and security concerns. Additionally, it is critical
    that administrators or site reliability engineers promptly report any instances
    of bugs or defects once they are discovered so that they can be fixed as soon
    as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Customers will utilize a software product in different ways based on their own
    individual requirements; this means that there may be specific problems that need
    fixing. This is because it is possible that users will discover the flaws and
    defects that developers and testers missed. In order to enhance user experiences
    and improve user retention, it is crucial to address and resolve these flaws immediately.
    In particular cases, these conditions may necessitate a return to the first phase
    of the software development life cycle. Each of the phases of the SDLC can also
    be restarted for any new features that you might wish to add in subsequent releases
    and upgrades of the software product that you are supporting.
  prefs: []
  type: TYPE_NORMAL
- en: It is generally agreed that the maintenance phase is the very last stage of
    the SDLC. This is especially true if your software development process follows
    waterfall release management. That being said, the industry is shifting towards
    a more agile approach to software development, such as DevOps, in which maintenance
    is merely an iterative step towards further enhancement.
  prefs: []
  type: TYPE_NORMAL
- en: Defining some commonly used terms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s a quick list of some terms and their definitions that you will often
    come across over the course of this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Big bang**: The big bang approach lacks the process-oriented characteristics
    of other release management models, and no advance preparation is needed. Software
    development is the primary focus of this strategy, which allows programmers to
    bypass the planning phase and move directly into code production.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rolling release**: A rolling release, often referred to as a rolling update,
    is a type of software development model. Software improvements are developed in
    ongoing, incremental steps rather than in discrete version releases. Users can
    upgrade the program at any moment to get the most recent version, and they are
    encouraged to do so often.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blue/green deployments**: Blue/green deployments produce two identical environments.
    One environment (blue) runs the existing program version, and one (green) runs
    the new one. After testing passes on the green environment, live application traffic
    is directed there, and the blue environment is depreciated. By simplifying rollbacks
    if deployments fail, blue/green deployment strategies boost application availability
    and reduce deployment risk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Canary deployments**: A canary deployment refers to a gradual and controlled
    release strategy for an application, wherein traffic is divided between an existing
    version and a new version. This approach involves initially introducing the new
    version to a subset of users before expanding its deployment to the entire user
    base. By following this approach, one can determine the reliability of the updated
    version of the application prior to its widespread distribution to consumers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of the deployment phase, your final product is delivered to your
    end users. At this point, deployment engineers set up the software at the business
    and/or provide users with assistance in getting the program up and running. Depending
    on the kind of SRLC that your team is following, you can automate this procedure
    and schedule your deployment. For instance, in the case of implementing a single
    feature update, it is possible to execute this process by initially releasing
    it to a limited subset of customers; this is referred to as a “canary release,”
    as mentioned earlier. If you are creating brand-new software, you may opt to roll
    it out internally as an alpha release first. We’ll briefly expand on SRLC later,
    but this topic is considered out of the scope of the subject of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have covered the seven stages of SDLC, let’s see where it stands
    in comparison with the other life cycle management methodologies.
  prefs: []
  type: TYPE_NORMAL
- en: SDLC versus other life cycle management methodologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are familiar with product management concepts, you know that SDLC is
    not the only life cycle management procedure out there. Here are some related
    concepts and what sets them apart from SDLC.
  prefs: []
  type: TYPE_NORMAL
- en: Software development Life Cycle versus systems development life cycle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **systems development life cycle** is the process of planning and constructing
    an information technology system. On occasion, people will refer to this process
    by the acronym SDLC; do you see how this can be confusing when referring to the
    software development life cycle? In terms of systems development, a system will
    generally be comprised of many individual hardware and software components that
    each collaborate together, executing sophisticated tasks and computations. Just
    know that when you see the acronym SDLC, be on the lookout for context clues in
    the literature so that you can properly distinguish if what you are reading is
    referring to software development or systems development.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will refer to the software development life cycle as SDLC.
  prefs: []
  type: TYPE_NORMAL
- en: There are some key differences between the SDLC and the systems development
    life cycle. The SDLC is limited to the creation and testing of software components.
    In contrast, systems development incorporates the setup and management of the
    hardware, software, people, and processes required for a complete system. Further,
    the SDLC places its whole emphasis on the program itself, while systems development
    may encompass activities such as organizational training and change management
    that are not always associated with software development.
  prefs: []
  type: TYPE_NORMAL
- en: SDLC versus release management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Release management** refers to the systematic supervision and control of
    the SDLC. The responsibilities encompass overseeing the various stages of software
    product development, namely planning, designing, testing, deploying, and releasing.
    The inclusion of release management is a vital component that is complementary
    to the SDLC. The primary objective of release management is to guarantee that
    the development team effectively fulfills the business objectives and produces
    software of exceptional quality. In summary, release management serves as a crucial
    intermediary between the development and operations domains.'
  prefs: []
  type: TYPE_NORMAL
- en: There are some key differences between SDLC and release management. The primary
    goal of SDLC is to mitigate risk and keep the development effort well-structured.
    In contrast, the primary objective of release management is to ensure that the
    development team is well organized and successfully fulfills the business objectives.
    Also, SDLC is primarily focused on the continuous integration of new software,
    while release management is focused on its continuous delivery. Both, however,
    fall under the jurisdiction of a Release or Project Manager.
  prefs: []
  type: TYPE_NORMAL
- en: SDLC versus ALM (application Life Cycle management)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Application life cycle management** (**ALM**) is a comprehensive concept
    encompassing the entire process of software application development, spanning
    from the initial idea generation and design phase through development, testing,
    production, support, and ultimately, the retirement of the program. The concept
    being discussed bears a resemblance to the SDLC. Although they may exhibit similarities
    when examined superficially, it is important to note that there are several significant
    distinctions between them.'
  prefs: []
  type: TYPE_NORMAL
- en: The SDLC primarily emphasizes the development phase of an application, whereas
    ALM adopts a more holistic approach, encompassing the entirety of the program’s
    life cycle. The effective management of various stages of application development
    requires the collaboration and integration of several ALM tools, procedures, and
    teams. Note that it is possible for an application’s life cycle to encompass numerous
    SDLCs inside the broader ALM framework.
  prefs: []
  type: TYPE_NORMAL
- en: SDLC versus PDLC (product development life cycle)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The product development life cycle is a thorough process that spans the whole
    life cycle of a product, beginning with the conception of an idea and ending with
    the product being phased out of production. This includes activities such as product
    planning, market research, product design, development, testing, launch, marketing,
    and support.
  prefs: []
  type: TYPE_NORMAL
- en: There are some key differences between SDLC and PDLC. SDLC is primarily concerned
    with the process of developing software, whereas PDLC primarily focuses on the
    whole development of a product. Moreover, SDLC encompasses several distinct stages,
    including planning, design, coding, testing, and deployment. In contrast, the
    PDLC incorporates supplementary phases, such as market research, product planning,
    and product marketing. Further, SDLC is designed to develop software that aligns
    with the specific requirements of the end user. On the other hand, PDLC is focused
    on creating a product that fulfills the demands of the market and generates revenue
    for the business.
  prefs: []
  type: TYPE_NORMAL
- en: SDLC versus SRLC (software release life cycle)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Gathering, documenting, and validating software requirements are the primary
    goals of the **software release life cycle** (**SRLC**). Methods for gathering
    requirements from various parties, sorting them by order of importance, writing
    them down in a requirements specification, and checking their accuracy are all
    part of this process.
  prefs: []
  type: TYPE_NORMAL
- en: There are some key differences between SDLC and SRLC. In contrast to the SDLC,
    the SRLC is concerned with managing software requirements. The SDLC is comprised
    of stages such as planning, design, coding, testing, and deployment, whereas the
    SRLC adds stages such as requirements elicitation, analysis, and validation. While
    SDLC strives to create software that satisfies the needs of its users, SRLC checks
    that those needs are well-defined before any coding is done.
  prefs: []
  type: TYPE_NORMAL
- en: Release management versus change management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Release management and change management are two critical processes that play
    a vital role in the successful delivery of software updates and enhancements to
    customers.
  prefs: []
  type: TYPE_NORMAL
- en: The domains of release management and change management are interconnected,
    albeit with distinct scopes and aims. The primary objective of release management
    is to oversee the comprehensive delivery of software releases, whereas change
    management is primarily concerned with managing the various changes that collectively
    constitute a release. Release management primarily focuses on the technical aspects
    of software releases, encompassing elements such as the release schedule, environment,
    and deployment. Conversely, change management primarily addresses the business
    aspects of software changes, including change request, approval, and communication.
    Release management and change management encompass distinct roles and duties,
    including release managers, release engineers, change managers, change analysts,
    and change reviewers.
  prefs: []
  type: TYPE_NORMAL
- en: Release management refers to the systematic approach of organizing, coordinating,
    evaluating, and implementing software releases across several environments, including
    development, testing, staging, and production. The primary objective of release
    management is to guarantee the timely delivery of software releases while adhering
    to budgetary constraints and minimizing any potential disruptions experienced
    by end users. New features, bug fixes, enhancements, and configuration changes
    are all examples of the kinds of changes that change management aims to keep track
    of. The purpose of change management is to get changes accepted, documented, and
    communicated to the appropriate parties so that they can have the greatest possible
    positive impact on the business and its goals, requirements, and standards. It
    is important to test and verify any modifications to a software system before
    deploying them, which is what change management is all about.
  prefs: []
  type: TYPE_NORMAL
- en: Release management versus project management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The term *release management* is used to describe the process of overseeing
    the creation and distribution of software releases, including its planning, scheduling,
    testing, and deployment. It improves the speed and quality of software products
    and upgrades that are delivered by development teams. Release management, in a
    nutshell, is the process of ensuring a smooth transition from development through
    staging to production. In a broader sense, the goal of project management is to
    ensure the success of a specific project within the parameters of a scope that
    has been established in advance. The planning of time limits, schedules, finances,
    and communication are all included in this aspect. Any time a product receives
    a new version or update, that counts as a part of the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Together, project management and release management increase a team’s odds
    of successfully completing a project. Release management is similar to project
    management in that it has a defined structure and a series of phases, even though
    the methods themselves are unique. Examples of project management methodologies
    include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scrum**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lean**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Six Sigma**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extreme** **Programming (XP)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PriSM**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PRINCE2**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This concludes [*Chapter 1*](B21803_01.xhtml#_idTextAnchor015). In this first
    chapter, you learned the definition of the **software development life cycle**
    (**SDLC**), and you explored its seven phases. Finally, you’ve learned how the
    SDLC differs from other life cycle management methodologies. In the next chapter,
    we’ll take a detailed look at software release management to understand its meaning.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Effective project management is possible with the help of an SDLC strategy.
    Managers, designers, developers, and clients all benefit from the comprehensive
    foundation provided by this tool. The seven stages of the SDLC are all essential,
    and they build on one another.
  prefs: []
  type: TYPE_NORMAL
- en: In the model’s initial phase, senior members are in charge of gathering requirements.
    Meanwhile, IT professionals amass all the data and resources they will need during
    the product’s lifespan. After determining what information is needed, the appropriate
    documents are drafted. The subsequent stages involve the design and coding processes,
    followed by the testing phase to evaluate the software’s functionality. The final
    stages are deployment and maintenance. The team has the choice to utilize various
    models, including the widely recognized waterfall and agile methodologies. When
    it comes to developing software, adhering to an SDLC is key. As mentioned, acquiring
    knowledge about the different stages of the SDLC is an effective approach for
    a product manager to establish a common understanding and connections between
    the cross-functional and customer-centric activities inside the SDLC. This facilitates
    the clear division of the product inside the wider range of corporate objectives,
    plans, and endeavors.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the definition of the SDLC?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the seven phases of the SDLC?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between the SDLC and the systems development life cycle?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between the software development life cycle and release
    management?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between the SDLC and application life cycle management?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between the SDLC and the product development life cycle?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between release management and change management?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between release management and project management?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between a blue/green deployment and a canary deployment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the seven phases of the SDLC?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
