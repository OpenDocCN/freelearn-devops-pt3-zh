- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Understanding the Software Development Life Cycle
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解软件开发生命周期
- en: The **software development life cycle** (**SDLC**) is the software industry’s
    procedure for creating new software. This technique ensures that software developers
    build high-quality, competitively priced products in the shortest amount of time
    possible.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**软件开发生命周期**（**SDLC**）是软件行业用于创建新软件的程序。该方法确保软件开发人员能够在最短时间内构建高质量、具有竞争力的产品。'
- en: The SDLC encompasses various stages, such as planning, writing, testing, and
    maintaining code. Software engineers adhere to the software development life cycle
    to conceptualize and develop software applications for many platforms, including
    laptop and desktop computers, cloud infrastructure, mobile devices, video gaming
    systems, kiosks, and other technology platforms. The concept of “**life cycle**”
    was initially introduced during the 1950s to delineate the several phases associated
    with the creation of a novel computer system. However, it has since become widely
    adopted to encompass all stages in the production of software.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: SDLC涵盖了多个阶段，如规划、编写、测试和维护代码。软件工程师遵循软件开发生命周期来构思和开发适用于多个平台的软件应用，包括笔记本电脑、桌面计算机、云基础设施、移动设备、视频游戏系统、自助终端及其他技术平台。“**生命周期**”这一概念最早在1950年代被提出，用以描述创建新计算机系统的几个阶段。然而，它已经广泛应用于涵盖软件生产的所有阶段。
- en: Although this book is concerned with **DevOps release management**, it is crucial
    to understand the software development life cycle first, how it relates to release
    management, and where both fit into the overall project management landscape.
    In a nutshell, SDLC is a powerful tool in the project management utility belt.
    It improves the focus and efficiency of everyone on the team, maximizing their
    productivity.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书关注的是**DevOps发布管理**，但首先了解软件开发生命周期至关重要，了解它与发布管理的关系，以及两者在整体项目管理中的定位。简而言之，SDLC是项目管理工具箱中的一项强大工具。它提高了团队每个人的关注度和效率，最大化了他们的生产力。
- en: 'In this first chapter, you will learn the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章中，您将学习以下内容：
- en: The definition of the SDLC
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SDLC的定义
- en: The seven phases of the SDLC
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SDLC的七个阶段
- en: The SDLC versus other life cycle management methodologies
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SDLC与其他生命周期管理方法论的比较
- en: Defining SDLC and looking at its seven phases
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义SDLC并探讨其七个阶段
- en: The SDLC refers to the systematic approach that development teams use to produce
    high-quality software with optimal cost efficiency. The primary goal is to mitigate
    risk and ensure that the software being developed surpasses the customer’s expectations.
    Using this method, you will first create a comprehensive strategy that will direct
    product development, and then you will break it all down into more manageable
    components that can be scheduled, finished, and measured.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: SDLC指的是开发团队用来以最优成本效率生产高质量软件的系统化方法。其主要目标是降低风险，并确保所开发的软件超越客户的期望。通过这种方法，您将首先制定一个全面的战略，以指导产品开发，然后将其分解为更易管理的组件，便于安排、完成和衡量。
- en: The SDLC can be understood as a conceptual framework that outlines the many
    stages encompassed by a chosen methodology rather than being a methodology in
    and of itself. That is to say, the SDLC process exhibits variations across different
    teams and products. Nevertheless, it is worth noting that many of the same stages
    are commonly shared among the majority of SDLC models that are in common practice
    today. These stages include **planning and analysis**, **design**, **build**,
    **testing**, **implementation**,and **maintenance/support**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: SDLC可以理解为一个概念框架，概述了所选方法论所包含的多个阶段，而不是一种方法论本身。也就是说，SDLC过程在不同的团队和产品中会有所不同。然而，值得注意的是，许多常见的SDLC模型在实际应用中共享相同的阶段。这些阶段包括**规划与分析**、**设计**、**构建**、**测试**、**实施**和**维护/支持**。
- en: '![Figure 1.1: The seven stages of the SDLC](img/B21803_01_1.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1：SDLC的七个阶段](img/B21803_01_1.jpg)'
- en: 'Figure 1.1: The seven stages of the SDLC'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：SDLC的七个阶段
- en: 1\. Planning and Analysis
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 规划与分析
- en: The first phase of the SDLC is the **project planning stage**, where you gather
    business requirements from your clients and stakeholders. The primary objective
    of this phase is to enable you to define the fundamental problem a customer is
    facing and discover appropriate solutions. Planning facilitates the identification
    of the essential components that are necessary for the development of a new system,
    enabling the fulfillment of project requirements by applying a deliberate and
    methodical process. Analysis allows you to acquire the necessary resources before
    starting a new software development endeavor. At this point, calculations are
    made regarding the resources, costs, and time required to successfully complete
    the project.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: SDLC的第一阶段是**项目规划阶段**，在此阶段，你将收集来自客户和利益相关者的业务需求。该阶段的主要目标是帮助你定义客户所面临的基本问题，并发现合适的解决方案。规划有助于识别开发新系统所需的关键组件，通过运用有计划和系统化的过程来满足项目需求。分析阶段使你能够在开始新的软件开发工作之前获得必要的资源。在此阶段，还需要计算完成项目所需的资源、成本和时间。
- en: In order to effectively determine the scope of production, prioritize production
    items, and establish a development cadence, business analysts engage with their
    customers to collect requirements, determine the target demographic, and consult
    with industry professionals. All of this is done with the objective of formulating
    a comprehensive **business specification** (**BS**) document. This document may
    be commonly referred to as the **customer requirement specification** (**CRS**)
    by various organizations and teams. It should be noted that although creating
    a BS document is considered good practice, some development teams may choose to
    forgo using one, opting instead for a less formal approach, as you will soon discover.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地确定生产范围、优先排序生产项目并制定开发节奏，业务分析师与客户合作，收集需求、确定目标群体，并与行业专家进行咨询。所有这些都是为了编写一份全面的**业务规范**(**BS**)文档。不同的组织和团队可能将此文档称为**客户需求规范**(**CRS*)。需要注意的是，尽管创建BS文档被认为是良好实践，但一些开发团队可能选择不使用该文档，而采用不那么正式的方法，正如你将很快发现的那样。
- en: The goal of a BS document is so that you can provide a list of client problems
    that currently exist so that programmers can fix them using software. It can be
    a valuable tool in assisting the group in thinking outside of the box about how
    to make products better. You should hand off the document to the development team
    once it has been determined that the software project is in line with the business
    and stakeholder goals, is feasible to construct, and fulfills user demands.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: BS文档的目标是列出客户当前存在的问题，以便程序员能通过软件来修复这些问题。这可以作为一个有价值的工具，帮助团队跳出框架思考如何提升产品。确认软件项目符合业务和利益相关者目标、可行并满足用户需求后，应该将文档交给开发团队。
- en: 2\. Define Requirements
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 定义需求
- en: The aforementioned phase is significant as it facilitates the transformation
    of the data that you’ve acquired during the planning and analysis phase into well-defined
    requirements for the team members who are responsible for development. **Defining
    requirements** facilitates the creation of many important documents, including
    a **software requirement specification** (**SRS**), a **use case document**, and
    a **requirement traceability matrix document**, if needed.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 上述阶段至关重要，因为它有助于将你在规划和分析阶段所获得的数据转化为开发团队成员所需的明确定义的需求。**定义需求**有助于创建多个重要文档，包括**软件需求规范**(**SRS**)、**用例文档**和**需求可追溯性矩阵文档**，如果需要的话。
- en: According to the business specification document, senior members of the development
    team collaborate with stakeholders and specialists to plan the software development
    project. The project could be about making a new software product or making an
    existing one even better. Identifying potential difficulties at this early stage
    is crucial. If a problem is discovered, managers and developers propose various
    solutions, which are then presented and analyzed in order to identify optimal
    alternatives.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 根据业务规范文档，开发团队的高级成员与利益相关者和专家合作，规划软件开发项目。该项目可能是开发一个新软件产品，或是提升现有产品的性能。在这个早期阶段识别潜在的困难至关重要。如果发现问题，管理者和开发人员会提出各种解决方案，然后进行展示和分析，以确定最佳的替代方案。
- en: 'During this preliminary stage of development, team members collaborate on comprehensive
    plans related to the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发的初步阶段，团队成员就以下内容进行合作，制定全面的计划：
- en: The intentions behind the project
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目的意图
- en: The requirements of the project
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目的需求
- en: Anticipated issues
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预期问题
- en: Opportunities
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机会
- en: Risks
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 风险
- en: The primary objective of this stage is to accurately determine the functional
    requirements for a project. Performing this necessary analysis ensures that the
    final deliverable aligns with the specific requirements and expectations of your
    clients and includes the proactive measures that must be taken in order to guarantee
    the fulfillment of your customers’ needs and preferences.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本阶段的主要目标是准确确定项目的功能需求。进行这一必要分析能够确保最终交付的成果与客户的具体需求和期望保持一致，并包含必须采取的积极措施，以确保满足客户的需求和偏好。
- en: In short, this SDLC stage is employed as a comprehensive technical blueprint
    wherein clients articulate their expectations, requirements, and demands for the
    project. By defining all of these elements, you can ensure that all elements of
    your software projects receive equitable consideration during the design and development
    process.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，这个 SDLC 阶段作为一个综合的技术蓝图，用于客户表达他们对项目的期望、需求和要求。通过定义这些元素，您可以确保在设计和开发过程中，软件项目的各个方面都能得到公平的考虑。
- en: 3\. Design
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3. 设计
- en: The **design stage** is when you begin translating ideas into a tangible form.
    The initial strategy and vision are further developed and documented in the form
    of a **software design document** (**SDD**) that defines several aspects, such
    as system architecture, programming language selection, template utilization,
    platform choice, and the implementation of application security measures. This
    is also the location where you can create diagrams and flowcharts that illustrate
    the software’s response to user activities. Sometimes, the design process includes
    the creation of a minimum viable product or proof-of-concept. A pre-production
    version of the product can help you imagine how the final product will look. This
    helps to keep any required adjustments minor and also helps the team avoid having
    to completely rewrite the code from scratch.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**设计阶段**是将想法转化为具体形式的时刻。初步的策略和愿景将在**软件设计文档**（**SDD**）中进一步发展和记录，该文档定义了多个方面，如系统架构、编程语言选择、模板使用、平台选择以及应用安全措施的实施。这也是您可以创建图表和流程图的位置，展示软件如何响应用户活动。有时，设计过程还包括创建最小可行产品或概念验证。产品的预生产版本有助于您想象最终产品的样子。这有助于确保所需调整尽量减少，也有助于团队避免完全重新编写代码。'
- en: The SDD will play a vital role in the production process, particularly in the
    development stage (see stage 4). Developers will rely heavily on the SDD as their
    primary reference to write their code. In order to mitigate any potential issues
    and risks identified in the earlier phases, you must also consult the SRS document
    as well. It serves as a reference point for designing the product, ensuring that
    it incorporates measures that shield the team from any potential risks identified
    earlier.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: SDD 在生产过程中将发挥至关重要的作用，尤其是在开发阶段（见第 4 阶段）。开发人员将主要依赖 SDD 作为编写代码的参考。为了减少在早期阶段识别到的潜在问题和风险，您还必须参考
    SRS 文档。它作为设计产品的参考点，确保产品在设计时采取措施保护团队免受早期识别的潜在风险影响。
- en: A real-world example that showcases the design phase’s usefulness is exemplified
    by how local and federal government agencies use it to establish scalable frameworks
    that are consistent and repeatable. To accomplish this, the design phase of the
    SDLC might consist of pre-arranged templates and guidelines created by centralized
    departments that offer structured content used to define, implement, and communicate
    all project aspects. For example, this helps scale software applications that
    are used to issue and manage driver’s licenses, voter registration cards, and
    library cards that are all interoperable across multiple jurisdictions. This is
    particularly useful in the case of disparate jurisdictions that are managed with
    varying levels of resources and different styles of leadership, but they must
    remain federated. This level of forethought helps determine the costs associated
    with real-world implementation or ensure that the end result serves all stakeholders
    involved.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一个展示设计阶段有用性的现实世界例子是，地方和联邦政府机构如何利用这一阶段建立可扩展的框架，这些框架是一致且可重复的。为了实现这一点，SDLC的设计阶段可能包含由集中管理的部门创建的预先安排的模板和指南，这些内容结构化，用于定义、实施和沟通项目的各个方面。例如，这有助于扩展用于颁发和管理驾驶执照、选民登记卡和图书馆卡的应用程序，这些卡在多个司法管辖区之间是互操作的。特别是在管理资源水平不同、领导风格各异的不同司法管辖区时，这一点非常有用，但它们必须保持联邦制。这种前瞻性思维有助于确定与实际实施相关的成本，或确保最终结果能够服务于所有相关的利益相关者。
- en: One thing to keep in mind during the third stage of the SDLC is that the end-users
    should have an opportunity to review the design and articulate any modifications
    to the intended system. Here, you will work together to create the final technical
    design documents before going into production. At this point, all of the necessary
    requirements for developing new software or systems should be established, and
    a backlog of work can be created.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在SDLC的第三阶段中，需要记住的一点是，最终用户应该有机会审查设计并提出任何对预期系统的修改意见。在这一阶段，你将与团队共同努力，创建最终的技术设计文档，然后进入生产阶段。此时，开发新软件或系统所需的所有必要要求应该已经确定，并且可以创建工作积压清单。
- en: 4\. Development
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4. 开发
- en: 'The fourth phase of the SDLC is where most of the work on a project really
    begins in earnest. A team of programmers, systems engineers, and business developers
    collaborate together and begin the process of software development. At this point,
    a Gannt chart or Kanban board is typically created to make sure that work on the
    project follows a smooth cadence. Development teams will typically organize their
    work using one of two approaches: through the **implementation of sprints** or
    **as a sustained, continuous development endeavor**. Regardless of the method
    employed, teams will strive to complete tasks as quickly as possible.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: SDLC（软件开发生命周期）的第四阶段是项目真正开始的地方。在这一阶段，程序员、系统工程师和业务开发人员组成团队，开始进行软件开发。此时，通常会创建甘特图或看板，以确保项目工作的进展保持顺畅的节奏。开发团队通常会通过两种方法之一来组织他们的工作：**实施冲刺**或者**作为一个持续的、连续的开发努力**。无论采用哪种方法，团队都会尽力尽快完成任务。
- en: Important note
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: '**Sprints**: A sprint is a limited amount of time that development teams have
    to get a certain amount of work done. Sprint duration can vary from one week to
    one month but is typically about two weeks. The short time constraint of a sprint
    encourages developers to prioritize the release of modest, incremental improvements
    over the release of large, sweeping changes. Because of this, less time is spent
    debugging the program, and the end-user experience is improved.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**冲刺**：冲刺是开发团队用来完成一定工作量的限定时间。冲刺的持续时间可以从一周到一个月不等，但通常是两周。冲刺的短时间限制促使开发人员优先发布适度的、渐进的改进，而不是发布大规模的变化。因此，程序的调试时间较少，最终用户的体验得到了改善。'
- en: '**Continuous development**: Software development approaches that use continuous
    development and agility share many similarities. Instead of making massive, all-at-once
    improvements to software, incremental ones are produced on a continuous basis,
    allowing for code to be released to users as soon as it is complete and tested.
    Software development, testing, and releasing updates to production environments
    can all be streamlined and automated using continuous development.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续开发**：采用持续开发和敏捷开发的方式有许多相似之处。与其一次性对软件进行大规模的改进，不如通过持续的增量更新，将代码在完成并经过测试后尽早发布给用户。软件开发、测试和向生产环境发布更新都可以通过持续开发进行精简和自动化。'
- en: During the **development** stage, the product code is written in accordance
    with the SDD (see stage 3) so that the product can be manufactured efficiently.
    This involves the development team building out a new system from the ground up
    or approaching an existing project with new requirements and fresh perspectives.
    This may include facilitating a smooth and cost-effective digital transformation
    from an existing system to a new one in the cloud.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在**开发**阶段，产品代码按照SDD（请参见第3阶段）编写，以确保产品可以高效地生产。这包括开发团队从零开始构建新系统，或以新的需求和新视角来处理现有项目。这可能包括从现有系统向云端的新系统进行平滑且具有成本效益的数字化转型。
- en: During this stage, developers break down the project into smaller software components
    that will eventually become the finished product. In order to construct the code,
    developers make use of a wide variety of tools and computer languages. These are
    chosen in accordance with the prerequisites of the software products that are
    being built.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，开发人员将项目拆解成更小的软件组件，这些组件最终将组成完成的产品。为了构建代码，开发人员会使用各种工具和计算机语言。这些工具和语言的选择是根据所构建软件产品的需求来决定的。
- en: 'Some of the programming tools may involve the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一些编程工具可能包括以下几种：
- en: '**Integrated development** **environments (IDEs):**'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成开发** **环境 (IDEs)：**'
- en: '**Eclipse**'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Eclipse**'
- en: '**Microsoft** **Visual Studio**'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft** **Visual Studio**'
- en: '**PyCharm**'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PyCharm**'
- en: '**Version** **control systems:**'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本** **控制系统：**'
- en: '**Git**'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git**'
- en: '**GitHub**'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub**'
- en: '**Gitlab**'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gitlab**'
- en: '**Bitbucket**'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bitbucket**'
- en: 'Some of the more common programming languages may include the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的编程语言可能包括以下几种：
- en: '**C#**'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C#**'
- en: '**C++**'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C++**'
- en: '**Python**'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python**'
- en: '**JavaScript**'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JavaScript**'
- en: '**Go**'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Go**'
- en: Close involvement from senior leadership in this phase is crucial for reaching
    the project’s goals because this step of the SDLC can consume a significant amount
    of time. It is essential that you have a predetermined timeframe as well as milestones
    in place so that the software developers know what the objectives are, and so
    you can monitor how they’re progressing. By the end of this phase, the bulk of
    the product code will be completed.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 高层领导在这一阶段的紧密参与对于实现项目目标至关重要，因为SDLC的这一阶段可能需要大量时间。必须设定预定的时间框架和里程碑，以确保软件开发人员明确目标，并且你可以监控他们的进度。在这一阶段结束时，大部分的产品代码将完成。
- en: In certain instances, the development phase may coincide with the testing phase,
    during which specific tests are conducted to ensure the absence of significant
    software defects.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，开发阶段可能与测试阶段重合，此时将进行特定的测试，以确保软件没有重大缺陷。
- en: 5\. Testing
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5. 测试
- en: The production of software without conducting a thorough **testing** of its
    features and functionality is both untenable and ill-advised; the fifth phase
    is dedicated to testing. To confirm that everything is working properly, QA engineers
    will conduct an assortment of tests, which include code analysis, security, integration,
    performance, and functional tests. Bugs and defects can be successfully resolved
    through repeated testing and analysis. Until a system’s design satisfies a client’s
    requirements, continuous testing is something that you’ll want to be doing. Performing
    manual software testing by the team is better than no testing at all, but preferentially,
    it should all be automated where possible.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在不进行充分的**测试**其功能和特性之前，软件的生产既不可行也不明智；第五阶段专门用于测试。为了确保一切正常工作，质量保证工程师将进行一系列测试，包括代码分析、安全性、集成、性能和功能测试。通过反复测试和分析，可以成功解决缺陷和错误。在系统设计满足客户需求之前，你将需要进行持续的测试。尽管团队进行手动软件测试总比没有测试好，但最好在可能的情况下将所有测试都自动化。
- en: Product testing should be performed by your quality assurance team before releasing
    the software into a production environment to ensure that it is fully functional
    and accomplishes its intended goals. Major problems with the user experience or
    security can also be worked out during the testing phase. In any case, proper
    testing will guarantee that every component of the software performs as expected.
    The final step of a product’s development includes validation, verification, and
    user acceptance testing. If the product makes it this far, it is likely ready
    for release.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 产品测试应由质量保证团队在将软件发布到生产环境之前进行，以确保其功能完备并实现预期目标。在测试阶段，还可以解决用户体验或安全性方面的主要问题。无论如何，适当的测试将确保软件的每个组件都按预期工作。产品开发的最后一步包括验证、确认和用户接受测试。如果产品走到这一步，它很可能已经准备好发布。
- en: 'Including testing, the software should be subjected to a formal **quality assurance**
    (**QA**) procedure to certify the product’s quality. Software testing will usually
    consist of the following kinds of tests:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 包括测试在内，软件应经过正式的**质量保证**（**QA**）程序，以认证产品的质量。软件测试通常包括以下几种测试：
- en: '**Performance testing**: Performance testing is a commonly employed testing
    strategy that aims to assess the responsiveness and stability of a system when
    subjected to a specific workload. Additionally, it can be utilized to examine,
    quantify, authenticate, or corroborate several other system quality features,
    including scalability, dependability, and resource utilization.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能测试**：性能测试是一种常用的测试策略，旨在评估系统在特定工作负载下的响应能力和稳定性。此外，它还可用于检查、量化、验证或证实多个其他系统质量特性，包括可扩展性、可靠性和资源利用率。'
- en: '**Functional testing**: Functional testing, or black-box testing, is a quality
    assurance process that creates test cases based on the documented requirements
    of the software component being evaluated. The purpose of functional software
    testing is to determine whether or not a system or its individual parts meet predefined
    functional requirements. The functions are tested by observing their responses
    to input, and the underlying structure of the code is rarely taken into account.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能测试**：功能测试，或称黑盒测试，是一种质量保证过程，通过基于被评估软件组件的文档需求来创建测试用例。功能软件测试的目的是确定系统或其各个部分是否满足预定义的功能需求。通过观察输入的响应来测试功能，通常不会考虑代码的底层结构。'
- en: '**Security testing**: Security testing helps information systems safeguard
    data and work properly by detecting security issues. Due to the logical limits
    of security testing, passing does not guarantee that the system is flawless or
    meets security criteria. Security needs may include confidentiality, integrity,
    authentication, availability, authorization, and non-repudiation. System security
    requirements determine the security requirements to be tested. Security testing
    has many definitions and methods. By establishing a foundation, a security taxonomy
    helps us grasp these techniques and meanings.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全测试**：安全测试通过检测安全问题帮助信息系统保护数据并正常运行。由于安全测试的逻辑限制，测试通过并不意味着系统完美或符合安全标准。安全需求可能包括机密性、完整性、认证、可用性、授权和不可否认性。系统安全需求决定了需要测试的安全要求。安全测试有许多定义和方法，通过建立基础，安全分类法帮助我们掌握这些技术和含义。'
- en: '**Unit-testing**: Unit testing is a technique for verifying the quality of
    software by evaluating discrete sections of code, or “units of source code,” such
    as one or more computer program modules, along with their corresponding control
    data, usage processes, and operating procedures.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：单元测试是一种通过评估离散代码部分或“源代码单元”来验证软件质量的技术，测试对象可以是一个或多个计算机程序模块，以及其对应的控制数据、使用过程和操作程序。'
- en: '**UI/UX testing**: In user interface (UI) testing, testers verify that on-screen
    elements, including buttons, fields, and labels, perform as expected. Screens
    that have controls, such as toolbars, colors, typefaces, sizes, buttons, and icons,
    are tested for their responsiveness to user input as part of UI testing. The purpose
    of UI testing software is to simulate the end user’s experience with a product
    or service.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UI/UX 测试**：在用户界面（UI）测试中，测试人员验证屏幕上的元素，包括按钮、字段和标签，是否按预期执行。具有控件的屏幕，如工具栏、颜色、字体、大小、按钮和图标，作为
    UI 测试的一部分，用于测试它们对用户输入的响应。UI 测试软件的目的是模拟最终用户与产品或服务的体验。'
- en: '**Regression testing**: Regression testing involves performing both functional
    and non-functional tests again after a change has been made to confirm that the
    program continues to function as expected. A **software regression** is a type
    of software bug where a feature that has worked before stops working. Software
    updates, feature additions, and even minor configuration tweaks can all necessitate
    additional testing to ensure compatibility. Test automation is commonly used in
    regression testing due to the exponential growth of test suites with each fault
    discovered.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回归测试**：回归测试是在进行修改后重新执行功能性和非功能性测试，以确认程序是否仍按预期工作。**软件回归**是指软件中的一个缺陷，某个以前正常工作的功能突然停止工作。软件更新、功能添加甚至微小的配置调整都可能需要额外的测试，以确保兼容性。由于随着每个缺陷的发现，测试套件呈指数增长，因此回归测试通常会采用自动化测试。'
- en: '**User acceptance testing**: The final stage of software development is user
    acceptance testing (UAT), where end users and clients evaluate the product in
    real-world scenarios to assess its functionality and utility. UAT focuses on whether
    a piece of software can work in users’ real-world systems, not its design or functionality.
    Development teams must execute UAT because their software assumptions may not
    hold true in their daily work owing to miscommunication, misunderstanding, oversight,
    or changing needs. Beta testers, in real-world situations, test software and give
    developers input during UAT to fix any flaws before release.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户验收测试**：软件开发的最后阶段是用户验收测试（UAT），在这一阶段，最终用户和客户会在实际场景中评估产品，以评估其功能性和实用性。UAT重点考察软件是否能够在用户的实际系统中正常工作，而非其设计或功能。开发团队必须执行UAT，因为他们的软件假设在日常工作中可能因为沟通不畅、误解、疏忽或需求变化而不成立。测试人员在实际情况下测试软件，并在UAT期间提供反馈，以便开发者在发布前修复任何缺陷。'
- en: 6\. Deployment
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. 部署
- en: After testing is completed, the product gets released to the market, but that
    could simply be internally within the organization where you work. Depending on
    the business model, **product deployment** may involve numerous steps or employ
    many tactics ranging from a **big bang** to a **rolling release** or something
    in between. There will be more time for testing if the product is launched in
    stages, such as blue/green or canary deployments. The release of the final product
    or the need for further adjustments to the code is contingent on what feedback
    is received. The deployment stage usually yields some measure of unknown, undesirable
    outcomes that you should anticipate.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试完成后，产品将发布到市场，但这可能仅仅是在你所在的组织内部。根据商业模式，**产品部署**可能涉及多个步骤，或者采用许多策略，从**一次性发布**到**滚动发布**或两者之间的某种方式。如果产品分阶段发布（如蓝绿部署或金丝雀部署），测试时间将会更多。最终产品的发布或对代码进行进一步调整的需求取决于收到的反馈。部署阶段通常会带来一些未知的、不理想的结果，你应该有所预期。
- en: 7\. Maintenance
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7\. 维护
- en: In the seventh SDLC stage, **maintenance** and **upgrades** are prioritized.
    At this point, the system can be tuned for better performance, and new capabilities
    can be added over time. The software deployment will undergo continuous monitoring
    to mitigate potential performance and security concerns. Additionally, it is critical
    that administrators or site reliability engineers promptly report any instances
    of bugs or defects once they are discovered so that they can be fixed as soon
    as possible.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在第七个SDLC阶段，**维护**和**升级**被优先考虑。此时，系统可以进行调优以提高性能，并且可以随着时间的推移添加新功能。软件部署将会进行持续监控，以减轻潜在的性能和安全问题。此外，管理员或站点可靠性工程师一旦发现任何漏洞或缺陷，必须及时报告，以便尽快修复。
- en: Customers will utilize a software product in different ways based on their own
    individual requirements; this means that there may be specific problems that need
    fixing. This is because it is possible that users will discover the flaws and
    defects that developers and testers missed. In order to enhance user experiences
    and improve user retention, it is crucial to address and resolve these flaws immediately.
    In particular cases, these conditions may necessitate a return to the first phase
    of the software development life cycle. Each of the phases of the SDLC can also
    be restarted for any new features that you might wish to add in subsequent releases
    and upgrades of the software product that you are supporting.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 客户将根据自身的需求以不同的方式使用软件产品；这意味着可能存在需要修复的具体问题。这是因为用户可能会发现开发者和测试人员未注意到的缺陷和瑕疵。为了提升用户体验和提高用户留存率，立即解决和修复这些缺陷至关重要。在某些情况下，这些问题可能需要回到软件开发生命周期的第一阶段。软件开发生命周期的每个阶段，也可能因你在后续版本和升级中希望添加的新功能而重新启动。
- en: It is generally agreed that the maintenance phase is the very last stage of
    the SDLC. This is especially true if your software development process follows
    waterfall release management. That being said, the industry is shifting towards
    a more agile approach to software development, such as DevOps, in which maintenance
    is merely an iterative step towards further enhancement.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一般认为，维护阶段是软件开发生命周期的最后阶段。尤其是在采用瀑布式发布管理的情况下，这一点尤其如此。尽管如此，业界正在向更敏捷的软件开发方法转变，例如DevOps，其中维护仅仅是进一步增强的迭代步骤。
- en: Defining some commonly used terms
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义一些常用术语
- en: 'Here’s a quick list of some terms and their definitions that you will often
    come across over the course of this book:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本书中常见的一些术语及其定义：
- en: '**Big bang**: The big bang approach lacks the process-oriented characteristics
    of other release management models, and no advance preparation is needed. Software
    development is the primary focus of this strategy, which allows programmers to
    bypass the planning phase and move directly into code production.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大爆炸式发布**：大爆炸式发布方法缺乏其他发布管理模型中的过程导向特征，不需要提前准备。这一策略的主要焦点是软件开发，它允许程序员跳过规划阶段，直接进入代码生产阶段。'
- en: '**Rolling release**: A rolling release, often referred to as a rolling update,
    is a type of software development model. Software improvements are developed in
    ongoing, incremental steps rather than in discrete version releases. Users can
    upgrade the program at any moment to get the most recent version, and they are
    encouraged to do so often.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滚动发布**：滚动发布，通常称为滚动更新，是一种软件开发模型。软件的改进是以持续、渐进的步骤进行，而不是通过离散的版本发布。用户可以随时升级程序以获取最新版本，并且被鼓励经常更新。'
- en: '**Blue/green deployments**: Blue/green deployments produce two identical environments.
    One environment (blue) runs the existing program version, and one (green) runs
    the new one. After testing passes on the green environment, live application traffic
    is directed there, and the blue environment is depreciated. By simplifying rollbacks
    if deployments fail, blue/green deployment strategies boost application availability
    and reduce deployment risk.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**蓝绿部署**：蓝绿部署创建了两个相同的环境。一个环境（蓝色）运行现有的程序版本，另一个环境（绿色）运行新版本。在绿色环境通过测试后，实时应用流量会转移到绿色环境，蓝色环境将被弃用。通过简化回滚过程（如果部署失败），蓝绿部署策略提高了应用可用性并降低了部署风险。'
- en: '**Canary deployments**: A canary deployment refers to a gradual and controlled
    release strategy for an application, wherein traffic is divided between an existing
    version and a new version. This approach involves initially introducing the new
    version to a subset of users before expanding its deployment to the entire user
    base. By following this approach, one can determine the reliability of the updated
    version of the application prior to its widespread distribution to consumers.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**金丝雀部署**：金丝雀部署是一种逐步且可控的应用发布策略，其中流量在现有版本和新版本之间分配。此方法首先将新版本引入一部分用户，随后再扩大到整个用户群体。通过这种方法，可以在新版本广泛发布之前，先评估更新版应用的可靠性。'
- en: At the end of the deployment phase, your final product is delivered to your
    end users. At this point, deployment engineers set up the software at the business
    and/or provide users with assistance in getting the program up and running. Depending
    on the kind of SRLC that your team is following, you can automate this procedure
    and schedule your deployment. For instance, in the case of implementing a single
    feature update, it is possible to execute this process by initially releasing
    it to a limited subset of customers; this is referred to as a “canary release,”
    as mentioned earlier. If you are creating brand-new software, you may opt to roll
    it out internally as an alpha release first. We’ll briefly expand on SRLC later,
    but this topic is considered out of the scope of the subject of this book.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署阶段结束时，您的最终产品将交付给终端用户。此时，部署工程师会在业务环境中安装软件和/或为用户提供帮助，确保程序能够正常运行。根据您的团队所遵循的SRLC类型，您可以自动化此过程并安排部署。例如，在实施单个功能更新的情况下，可以通过将其首先发布给有限的部分客户来执行此过程；这被称为“金丝雀发布”，如前所述。如果您正在开发全新的软件，您可能选择先以alpha版本在内部进行发布。稍后我们将简要扩展SRLC，但该主题被视为超出本书讨论范围的内容。
- en: Now that we have covered the seven stages of SDLC, let’s see where it stands
    in comparison with the other life cycle management methodologies.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了SDLC的七个阶段，接下来让我们看看它与其他生命周期管理方法相比如何。
- en: SDLC versus other life cycle management methodologies
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SDLC与其他生命周期管理方法的对比
- en: If you are familiar with product management concepts, you know that SDLC is
    not the only life cycle management procedure out there. Here are some related
    concepts and what sets them apart from SDLC.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉产品管理概念，那么您会知道，SDLC并不是唯一的生命周期管理程序。以下是一些相关概念以及它们与SDLC的区别。
- en: Software development Life Cycle versus systems development life cycle
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件开发生命周期与系统开发生命周期的对比
- en: The **systems development life cycle** is the process of planning and constructing
    an information technology system. On occasion, people will refer to this process
    by the acronym SDLC; do you see how this can be confusing when referring to the
    software development life cycle? In terms of systems development, a system will
    generally be comprised of many individual hardware and software components that
    each collaborate together, executing sophisticated tasks and computations. Just
    know that when you see the acronym SDLC, be on the lookout for context clues in
    the literature so that you can properly distinguish if what you are reading is
    referring to software development or systems development.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**系统开发生命周期**是规划和构建信息技术系统的过程。有时，人们会用缩写SDLC来指代此过程；你看到了吗？这在指代软件开发生命周期时可能会造成混淆。在系统开发方面，一个系统通常由许多单独的硬件和软件组件组成，这些组件相互协作，执行复杂的任务和计算。只需知道，当你看到缩写SDLC时，要注意文献中的上下文线索，以便正确区分你所阅读的是指软件开发还是系统开发。'
- en: Important note
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In this book, we will refer to the software development life cycle as SDLC.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将把软件开发生命周期称为SDLC。
- en: There are some key differences between the SDLC and the systems development
    life cycle. The SDLC is limited to the creation and testing of software components.
    In contrast, systems development incorporates the setup and management of the
    hardware, software, people, and processes required for a complete system. Further,
    the SDLC places its whole emphasis on the program itself, while systems development
    may encompass activities such as organizational training and change management
    that are not always associated with software development.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: SDLC与系统开发生命周期之间有一些关键区别。SDLC仅限于软件组件的创建和测试。相比之下，系统开发包括了硬件、软件、人员和流程的设置和管理，这些都是构成完整系统所需的。此外，SDLC专注于程序本身，而系统开发可能涉及如组织培训和变更管理等活动，这些活动并不总是与软件开发相关联。
- en: SDLC versus release management
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SDLC与发布管理的对比
- en: '**Release management** refers to the systematic supervision and control of
    the SDLC. The responsibilities encompass overseeing the various stages of software
    product development, namely planning, designing, testing, deploying, and releasing.
    The inclusion of release management is a vital component that is complementary
    to the SDLC. The primary objective of release management is to guarantee that
    the development team effectively fulfills the business objectives and produces
    software of exceptional quality. In summary, release management serves as a crucial
    intermediary between the development and operations domains.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**发布管理**是指对SDLC的系统化监督和控制。其职责包括监督软件产品开发的各个阶段，即规划、设计、测试、部署和发布。发布管理的加入是SDLC的重要补充。发布管理的主要目标是确保开发团队有效地实现业务目标，并生产出高质量的软件。总的来说，发布管理在开发与运维领域之间起着至关重要的中介作用。'
- en: There are some key differences between SDLC and release management. The primary
    goal of SDLC is to mitigate risk and keep the development effort well-structured.
    In contrast, the primary objective of release management is to ensure that the
    development team is well organized and successfully fulfills the business objectives.
    Also, SDLC is primarily focused on the continuous integration of new software,
    while release management is focused on its continuous delivery. Both, however,
    fall under the jurisdiction of a Release or Project Manager.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: SDLC与发布管理之间存在一些关键的区别。SDLC的主要目标是降低风险，并确保开发工作有条理地进行。相比之下，发布管理的主要目标是确保开发团队的良好组织，并成功实现业务目标。此外，SDLC主要集中在新软件的持续集成上，而发布管理则侧重于其持续交付。然而，两者都归发布或项目经理管辖。
- en: SDLC versus ALM (application Life Cycle management)
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SDLC与ALM（应用生命周期管理）对比
- en: '**Application life cycle management** (**ALM**) is a comprehensive concept
    encompassing the entire process of software application development, spanning
    from the initial idea generation and design phase through development, testing,
    production, support, and ultimately, the retirement of the program. The concept
    being discussed bears a resemblance to the SDLC. Although they may exhibit similarities
    when examined superficially, it is important to note that there are several significant
    distinctions between them.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**应用生命周期管理**（**ALM**）是一个综合性的概念，涵盖了软件应用开发的整个过程，从初步的创意生成和设计阶段，到开发、测试、生产、支持，最终直至程序的退役。这个概念与SDLC相似，虽然在表面上它们可能看起来有相似之处，但需要注意的是，两者之间存在几个显著的区别。'
- en: The SDLC primarily emphasizes the development phase of an application, whereas
    ALM adopts a more holistic approach, encompassing the entirety of the program’s
    life cycle. The effective management of various stages of application development
    requires the collaboration and integration of several ALM tools, procedures, and
    teams. Note that it is possible for an application’s life cycle to encompass numerous
    SDLCs inside the broader ALM framework.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: SDLC主要侧重于应用的开发阶段，而ALM则采取更为全面的方法，涵盖了整个程序的生命周期。有效管理应用开发的各个阶段需要多个ALM工具、流程和团队的协作与整合。需要注意的是，一个应用的生命周期可能在更广泛的ALM框架下，包含多个SDLC。
- en: SDLC versus PDLC (product development life cycle)
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SDLC与PDLC（产品开发生命周期）对比
- en: The product development life cycle is a thorough process that spans the whole
    life cycle of a product, beginning with the conception of an idea and ending with
    the product being phased out of production. This includes activities such as product
    planning, market research, product design, development, testing, launch, marketing,
    and support.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 产品开发生命周期是一个全面的过程，涵盖了产品的整个生命周期，从构思一个创意开始，到产品最终停产为止。这个过程包括产品规划、市场调研、产品设计、开发、测试、发布、营销和支持等活动。
- en: There are some key differences between SDLC and PDLC. SDLC is primarily concerned
    with the process of developing software, whereas PDLC primarily focuses on the
    whole development of a product. Moreover, SDLC encompasses several distinct stages,
    including planning, design, coding, testing, and deployment. In contrast, the
    PDLC incorporates supplementary phases, such as market research, product planning,
    and product marketing. Further, SDLC is designed to develop software that aligns
    with the specific requirements of the end user. On the other hand, PDLC is focused
    on creating a product that fulfills the demands of the market and generates revenue
    for the business.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: SDLC和PDLC之间存在一些关键的区别。SDLC主要关注软件开发过程，而PDLC则主要集中于整个产品的开发。此外，SDLC包括几个不同的阶段，包括规划、设计、编码、测试和部署。相比之下，PDLC包含了附加的阶段，如市场调研、产品规划和产品营销。此外，SDLC旨在开发符合最终用户特定需求的软件。而PDLC则专注于创建一个能够满足市场需求并为企业带来收入的产品。
- en: SDLC versus SRLC (software release life cycle)
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SDLC与SRLC（软件发布生命周期）
- en: Gathering, documenting, and validating software requirements are the primary
    goals of the **software release life cycle** (**SRLC**). Methods for gathering
    requirements from various parties, sorting them by order of importance, writing
    them down in a requirements specification, and checking their accuracy are all
    part of this process.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 收集、文档化和验证软件需求是**软件发布生命周期**（**SRLC**）的主要目标。收集来自各方的需求、按重要性排序、写入需求规格说明书，并检查其准确性，都是这一过程的一部分。
- en: There are some key differences between SDLC and SRLC. In contrast to the SDLC,
    the SRLC is concerned with managing software requirements. The SDLC is comprised
    of stages such as planning, design, coding, testing, and deployment, whereas the
    SRLC adds stages such as requirements elicitation, analysis, and validation. While
    SDLC strives to create software that satisfies the needs of its users, SRLC checks
    that those needs are well-defined before any coding is done.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: SDLC和SRLC之间存在一些关键的区别。与SDLC相比，SRLC更侧重于管理软件需求。SDLC由规划、设计、编码、测试和部署等阶段组成，而SRLC则增加了需求引导、分析和验证等阶段。虽然SDLC力求创建满足用户需求的软件，但SRLC则在编码之前确保这些需求已经明确。
- en: Release management versus change management
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布管理与变更管理
- en: Release management and change management are two critical processes that play
    a vital role in the successful delivery of software updates and enhancements to
    customers.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 发布管理和变更管理是两个关键过程，在成功地将软件更新和增强功能交付给客户方面发挥着至关重要的作用。
- en: The domains of release management and change management are interconnected,
    albeit with distinct scopes and aims. The primary objective of release management
    is to oversee the comprehensive delivery of software releases, whereas change
    management is primarily concerned with managing the various changes that collectively
    constitute a release. Release management primarily focuses on the technical aspects
    of software releases, encompassing elements such as the release schedule, environment,
    and deployment. Conversely, change management primarily addresses the business
    aspects of software changes, including change request, approval, and communication.
    Release management and change management encompass distinct roles and duties,
    including release managers, release engineers, change managers, change analysts,
    and change reviewers.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 发布管理和变更管理的领域是相互关联的，尽管它们的范围和目标不同。发布管理的主要目标是监督软件版本的全面交付，而变更管理则主要关注管理构成版本的各种变更。发布管理主要关注软件版本的技术方面，包括发布计划、环境和部署等元素。相反，变更管理则主要处理软件变更的业务方面，包括变更请求、审批和沟通。发布管理和变更管理涵盖了不同的角色和职责，包括发布经理、发布工程师、变更经理、变更分析师和变更审查员。
- en: Release management refers to the systematic approach of organizing, coordinating,
    evaluating, and implementing software releases across several environments, including
    development, testing, staging, and production. The primary objective of release
    management is to guarantee the timely delivery of software releases while adhering
    to budgetary constraints and minimizing any potential disruptions experienced
    by end users. New features, bug fixes, enhancements, and configuration changes
    are all examples of the kinds of changes that change management aims to keep track
    of. The purpose of change management is to get changes accepted, documented, and
    communicated to the appropriate parties so that they can have the greatest possible
    positive impact on the business and its goals, requirements, and standards. It
    is important to test and verify any modifications to a software system before
    deploying them, which is what change management is all about.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 发布管理是指系统化地组织、协调、评估和实施跨多个环境的软件发布，包括开发、测试、预发布和生产环境。发布管理的主要目标是保证软件发布的及时交付，同时遵循预算限制并尽量减少终端用户可能遇到的任何潜在干扰。新特性、漏洞修复、功能增强和配置更改都是变更管理旨在跟踪的变更类型。变更管理的目的是使变更得到接受、文档化，并与相关方进行沟通，以便它们能对业务及其目标、需求和标准产生最大可能的积极影响。在部署任何修改之前，测试和验证软件系统的任何变更非常重要，这正是变更管理的核心内容。
- en: Release management versus project management
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布管理与项目管理
- en: The term *release management* is used to describe the process of overseeing
    the creation and distribution of software releases, including its planning, scheduling,
    testing, and deployment. It improves the speed and quality of software products
    and upgrades that are delivered by development teams. Release management, in a
    nutshell, is the process of ensuring a smooth transition from development through
    staging to production. In a broader sense, the goal of project management is to
    ensure the success of a specific project within the parameters of a scope that
    has been established in advance. The planning of time limits, schedules, finances,
    and communication are all included in this aspect. Any time a product receives
    a new version or update, that counts as a part of the project.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*发布管理*一词用来描述监督软件发布的创建和分发过程，包括其规划、调度、测试和部署。它提高了开发团队交付的软件产品和升级的速度与质量。简而言之，发布管理是确保从开发到预发布，再到生产的顺利过渡的过程。从更广泛的角度来看，项目管理的目标是确保在预先设定的范围内完成特定项目的成功。这包括时间限制、计划、财务和沟通的规划。每当一个产品接收到新版本或更新时，这就算作项目的一部分。'
- en: 'Together, project management and release management increase a team’s odds
    of successfully completing a project. Release management is similar to project
    management in that it has a defined structure and a series of phases, even though
    the methods themselves are unique. Examples of project management methodologies
    include the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 项目管理和发布管理共同提高了团队成功完成项目的几率。发布管理与项目管理相似，都是具有明确结构和一系列阶段的过程，尽管方法本身是独特的。以下是一些项目管理方法的例子：
- en: '**Scrum**'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Scrum**'
- en: '**Lean**'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**精益**'
- en: '**Six Sigma**'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**六西格玛**'
- en: '**Extreme** **Programming (XP)**'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**极限编程（XP）**'
- en: '**PriSM**'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PriSM**'
- en: '**PRINCE2**'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PRINCE2**'
- en: This concludes [*Chapter 1*](B21803_01.xhtml#_idTextAnchor015). In this first
    chapter, you learned the definition of the **software development life cycle**
    (**SDLC**), and you explored its seven phases. Finally, you’ve learned how the
    SDLC differs from other life cycle management methodologies. In the next chapter,
    we’ll take a detailed look at software release management to understand its meaning.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是[*第1章*](B21803_01.xhtml#_idTextAnchor015)的内容。在这一章中，你了解了**软件开发生命周期**（**SDLC**）的定义，并探讨了它的七个阶段。最后，你了解了SDLC与其他生命周期管理方法的区别。在下一章中，我们将详细了解软件发布管理，以便理解其含义。
- en: Summary
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Effective project management is possible with the help of an SDLC strategy.
    Managers, designers, developers, and clients all benefit from the comprehensive
    foundation provided by this tool. The seven stages of the SDLC are all essential,
    and they build on one another.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 有了SDLC策略的帮助，项目管理变得更有效。管理者、设计师、开发人员和客户都能从这一工具提供的全面基础中受益。SDLC的七个阶段都是至关重要的，并且相互依赖、相互促进。
- en: In the model’s initial phase, senior members are in charge of gathering requirements.
    Meanwhile, IT professionals amass all the data and resources they will need during
    the product’s lifespan. After determining what information is needed, the appropriate
    documents are drafted. The subsequent stages involve the design and coding processes,
    followed by the testing phase to evaluate the software’s functionality. The final
    stages are deployment and maintenance. The team has the choice to utilize various
    models, including the widely recognized waterfall and agile methodologies. When
    it comes to developing software, adhering to an SDLC is key. As mentioned, acquiring
    knowledge about the different stages of the SDLC is an effective approach for
    a product manager to establish a common understanding and connections between
    the cross-functional and customer-centric activities inside the SDLC. This facilitates
    the clear division of the product inside the wider range of corporate objectives,
    plans, and endeavors.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型的初始阶段，资深成员负责收集需求。同时，IT专业人员收集在产品生命周期内所需的所有数据和资源。在确定所需信息后，适当的文档将被草拟。随后的阶段包括设计和编码过程，接着是测试阶段，用于评估软件的功能性。最后阶段是部署和维护。团队可以选择使用不同的模型，包括广泛认可的瀑布模型和敏捷方法。对于软件开发来说，遵循SDLC至关重要。如前所述，了解SDLC的不同阶段是一种有效的方法，帮助产品经理在SDLC内部建立跨职能和以客户为中心的活动之间的共同理解和联系。这有助于在更广泛的企业目标、计划和努力中清晰地划分产品。
- en: Questions
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the definition of the SDLC?
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SDLC的定义是什么？
- en: What are the seven phases of the SDLC?
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SDLC的七个阶段是什么？
- en: What is the difference between the SDLC and the systems development life cycle?
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SDLC和系统开发生命周期之间有什么区别？
- en: What is the difference between the software development life cycle and release
    management?
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件开发生命周期和发布管理之间有什么区别？
- en: What is the difference between the SDLC and application life cycle management?
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SDLC和应用生命周期管理之间有什么区别？
- en: What is the difference between the SDLC and the product development life cycle?
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SDLC和产品开发生命周期之间有什么区别？
- en: What is the difference between release management and change management?
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布管理和变更管理之间有什么区别？
- en: What is the difference between release management and project management?
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布管理和项目管理之间有什么区别？
- en: What is the difference between a blue/green deployment and a canary deployment?
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 蓝绿部署和金丝雀部署之间有什么区别？
- en: What are the seven phases of the SDLC?
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SDLC的七个阶段是什么？
