- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Kubernetes Monitoring and Observability
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 监控与可观察性
- en: Monitoring and observability for both Ops and Dev teams have always been crucial.
    Ops teams used to be focused on infrastructure health (virtual machines, bare-metal,
    networks, storage, and so on) and Devs used to be focused on application health.
    With Kubernetes, those lines are blurred. In a standard data center environment,
    it’s easy to split who’s conducting monitoring and observability in a very traditional
    sense. Kubernetes blends those lines because, for example, Pods are, in a sense,
    infrastructure pieces because they have to scale and are sort of *virtual machines*
    in the traditional sense. They are what holds the application. However, the application
    is running in a Pod, so if you’re monitoring a Pod, you’re automatically monitoring
    the containers that are running inside of the Pod.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于运维（Ops）和开发（Dev）团队来说，监控和可观察性一直是至关重要的。运维团队以前主要关注基础设施的健康（虚拟机、裸机、网络、存储等），而开发团队则专注于应用程序的健康。随着
    Kubernetes 的出现，这些界限变得模糊。在传统的数据中心环境中，监控和可观察性的责任通常很容易划分。但是 Kubernetes 混合了这些界限，因为例如，Pod
    在某种意义上是基础设施的一部分，因为它们需要扩展，并且在传统意义上它们有点像*虚拟机*。它们是容纳应用程序的地方。然而，应用程序运行在 Pod 中，因此如果你在监控
    Pod，你实际上也在监控 Pod 内运行的容器。
- en: Because these lines are blurred, both teams are doing both parts of the monitoring
    process. On a platform engineering or DevOps engineering team, those teams would
    monitor both application pieces and infrastructure pieces.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些界限已经模糊，两个团队都在进行监控过程的各个部分。在平台工程或 DevOps 工程团队中，这些团队将同时监控应用程序和基础设施的各个部分。
- en: There’s no longer a line that’s used to divide which team monitors and creates
    observability practices around specific parts of Kubernetes. Instead, the goal
    is now to have a more unified front to ensure that the overall environment and
    applications are working as expected.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 不再有明确的界限来划分哪个团队负责监控并为 Kubernetes 的特定部分创建可观察性实践。相反，现在的目标是拥有一个更加统一的前线，确保整个环境和应用程序按预期工作。
- en: In this chapter, you’re going to dive in from a theoretical and hands-on perspective
    to truly get an understanding of monitoring and observability in Kubernetes. The
    goal is for you to be able to take what you learn and what you’ve implemented
    in your lab from this chapter and truly start to use it in production. First,
    you’ll learn what monitoring and observability actually are. Next, you’ll learn
    what monitoring and observability mean for the infrastructure layer, which is
    the virtual machines running the Kubernetes environment, and the specifics around
    Control Plane and worker node monitoring. After that, you’ll dive into monitoring
    and observability for specific Kubernetes resources such as Pods and Services.
    To finish up, you’ll look at specific tools and platforms that are typically used
    in today’s world for monitoring and observability.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将从理论和实践两方面深入探讨 Kubernetes 中的监控和可观察性。目标是让你能够将你在本章中学到的内容和在实验室中实现的内容，真正应用到生产环境中。首先，你将了解监控和可观察性到底是什么。接下来，你将了解监控和可观察性在基础设施层的意义，即运行
    Kubernetes 环境的虚拟机，以及关于控制平面和工作节点监控的具体内容。之后，你将深入了解 Kubernetes 资源的监控和可观察性，例如 Pods
    和 Services。最后，你将了解当今常用的监控和可观察性工具和平台。
- en: Without monitoring, engineers wouldn’t know what’s happening inside a system
    or application. It’s the job of a DevOps and platform engineer to have that information
    and make good use of that information by fixing whatever is broken.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有监控，工程师将无法知道系统或应用程序内部发生了什么。DevOps 和平台工程师的工作就是获取这些信息，并利用这些信息修复任何出现的问题。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: How monitoring is different than observability
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控与可观察性的区别
- en: Monitoring and observability tools for Kubernetes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 的监控和可观察性工具
- en: Observability practices
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可观察性实践
- en: Kubernetes resource monitoring
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 资源监控
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter isn’t going to be a full-blown explanation of monitoring. Although
    there will be some brief explanations as a refresher/starting point, it’s important
    that you have some experience in monitoring and observability. For example, maybe
    you’ve used the Kubernetes Dashboard before or you’ve looked at pre-populated
    monitors inside of Azure or AWS. It could even be experience monitoring from your
    local desktop.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章不会对监控进行详细的解释。虽然会有一些简短的说明作为回顾或起点，但你需要对监控和可观察性有一定的经验。例如，或许你之前使用过 Kubernetes
    Dashboard，或者你曾查看过 Azure 或 AWS 中预设的监控。甚至可能有过在本地桌面进行监控的经验。
- en: 'You can find the GitHub repo here: [https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch7/prometheus/helm](https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch7/prometheus/helm)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到 GitHub 仓库：[https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch7/prometheus/helm](https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch7/prometheus/helm)
- en: How is monitoring different than observability?
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控和可观察性有什么不同？
- en: Two of the closest workflows and the two that are most often interchanged from
    a verbiage and explanation perspective are monitoring and observability. Although
    this chapter isn’t dedicated to observability, to truly understand the differences
    between monitoring and observability, you must understand both and ultimately
    see how they work. After the explanations in this section, you’ll see that there
    are key differences between observability and monitoring, along with differences
    in how they should be used, when they should be used, and the best practices for
    them.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 监控和可观察性是两个最常被混淆的工作流，它们在语言和解释上最为接近。虽然本章并不专门讨论可观察性，但要真正理解监控与可观察性之间的差异，你必须了解这两者，并最终看到它们是如何工作的。在本节的解释后，你会发现监控和可观察性之间有关键的区别，以及它们在使用方式、使用时机和最佳实践上的不同。
- en: What you might experience in organizations, depending on how mature their engineering
    teams are, is that monitoring and observability get thrown into one category.
    They are both either looked at the same way, or engineering teams think they’re
    doing observability when really all they’re doing is monitoring. One of the goals
    of this chapter is to give you the ability to differentiate between the two because
    there can be some blurred lines depending on what platforms and tools you’re using.
    For example, let’s take two of the most popular platforms – Datadog and New Relic.
    Both of these platforms are looked at as monitoring platforms and observability
    platforms. They can both do monitoring and observability, and they do them well.
    This is not always the case though. A platform such as Prometheus is just for
    observability and collecting metrics, but you can pair it with a monitoring platform/tool
    such as Grafana to give you a visual of what’s happening inside of an environment.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些组织中，你可能会遇到监控和可观察性被混为一类的情况，这取决于其工程团队的成熟度。它们要么被看作相同的事物，要么工程团队认为自己在做可观察性，其实他们只是在做监控。本章的目标之一是帮助你区分这两者，因为根据你使用的平台和工具，可能会有一些界限模糊的情况。例如，我们来看两个最流行的平台——Datadog
    和 New Relic。这两个平台都被视为监控平台和可观察性平台。它们都能进行监控和可观察性，而且做得很好。但并非总是如此。例如，像 Prometheus
    这样的平台仅用于可观察性和收集指标，但你可以将其与监控平台/工具（如 Grafana）配合使用，提供环境内部发生的情况的可视化。
- en: Monitoring and observability are both lengthy topics, especially in Kubernetes.
    The way that monitoring and observability are thought of in Kubernetes is similar
    to other platforms and systems, but vastly different.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 监控和可观察性都是相当复杂的话题，尤其是在 Kubernetes 中。Kubernetes 中的监控和可观察性与其他平台和系统的概念类似，但也有很大的不同。
- en: In the next section, you’re going to look at what monitoring and observability
    are and how to know which you should use. We’ll also explore a few monitoring
    versus observability examples.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，你将了解监控和可观察性的定义，以及如何判断应该使用哪一个。我们还将探索一些监控与可观察性的例子。
- en: What’s monitoring?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是监控？
- en: Have you ever opened up **Task Manager** in Windows, gone to the performance
    settings, and looked at the memory and/or CPU usage? What about **Activity Monitor**
    on macOS to see what applications and programs were using memory and CPU? If you’ve
    done either of these things, which it is safe to assume that most engineers have
    done at one point or another, you’ve officially monitored a system! Now, you may
    be thinking to yourself that checking out the memory and CPU on a desktop or laptop
    is drastically different, but it’s actually not. Regardless of whether it’s a
    desktop or an entire server rack, RAM is RAM, CPU is CPU, and storage is storage.
    It doesn’t change across systems. The only thing that changes is the amount of
    CPU, memory, and storage.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾经在 Windows 中打开过**任务管理器**，进入性能设置，查看内存和/或 CPU 使用情况？或者在 macOS 上使用过**活动监视器**，查看哪些应用程序和程序正在使用内存和
    CPU？如果你做过这些事情，可以合理推测大多数工程师都在某个时刻做过，你就已经在进行系统监控了！现在，你可能会想，检查台式机或笔记本电脑的内存和 CPU 使用情况与在服务器上监控是截然不同的，但实际上并没有那么大差异。无论是台式机还是整个服务器机架，RAM
    就是 RAM，CPU 就是 CPU，存储就是存储。这在不同系统之间是不会改变的。唯一的区别是 CPU、内存和存储的数量。
- en: So, what is monitoring?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是监控？
- en: 'Monitoring is the ability to view system resources, performance, and usage
    in real time. You can monitor anything in a Kubernetes cluster including the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 监控是实时查看系统资源、性能和使用情况的能力。你可以监控 Kubernetes 集群中的任何内容，包括以下内容：
- en: Worker nodes
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作节点
- en: Control Planes
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制平面
- en: Pods
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pod
- en: Deployments
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署
- en: ConfigMaps
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置映射
- en: As well as these, you can also monitor literally any other Kubernetes resource
    that’s running in your cluster. From the application level to the infrastructure
    level to the networking level, it can all be monitored.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些，你还可以监控集群中运行的任何其他 Kubernetes 资源。从应用层到基础设施层，再到网络层，都可以进行监控。
- en: With monitoring can come the creation of alerts. I remember when I first got
    into tech and got my first internship, the coolest thing to me was walking into
    a **network operations center** (**NOC**) and seeing all the big screens with
    all the monitors on them. It was like we were protecting nuclear launch codes.
    It was amazing to see that every single system could be watched so engineers could
    understand what was happening underneath the hood.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过监控，你还可以创建警报。我记得当我刚进入技术行业，拿到我的第一个实习时，最酷的事情就是走进**网络运维中心**（**NOC**），看到大屏幕上显示着各种监控画面。那感觉就像我们在保护核发射代码一样。看到每个系统都可以被监控，工程师们能够理解系统内部发生了什么，真是太棒了。
- en: In today’s world, engineers are still using things such as big monitors in a
    NOC, but with working from home and the remote world being the new norm, engineers
    are also logging in to monitoring platforms to view how systems are working. Engineers
    can log in to tools such as Datadog, CloudWatch, or Azure Monitor and see everything
    that’s happening with every service.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的世界里，工程师们仍然使用网络运维中心的大屏幕进行监控，但随着在家工作和远程办公成为新常态，工程师们也可以登录到监控平台，查看系统的运行情况。工程师可以登录到像
    Datadog、CloudWatch 或 Azure Monitor 这样的工具，查看每个服务的运行情况。
- en: Let’s take a look at the screenshot in *Figure 7**.1* from Azure. As you can
    see, there are a ton of monitoring options available.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看*图 7.1*中来自 Azure 的截图。如你所见，有许多可用的监控选项。
- en: '![Figure 7.1 – The AKS monitoring options'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.1 – AKS 监控选项'
- en: '](img/B19116_07_01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_01.jpg)'
- en: Figure 7.1 – The AKS monitoring options
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – AKS 监控选项
- en: The monitoring options that you see in the **Monitoring** section also contain
    some observability practices (such as **Metrics**), which goes back to a point
    made earlier in the chapter – there’s some confusion when splitting up monitoring
    and observability practices.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在**监控**部分中看到的监控选项也包含了一些可观察性实践（例如**指标**），这与本章前面提到的一个观点相呼应——在分离监控和可观察性实践时，确实存在一些混淆。
- en: From a monitoring perspective, what you should care about are the actual monitors.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从监控的角度来看，你应该关注的是实际的监控工具。
- en: '![Figure 7.2 – AKS Monitoring'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.2 – AKS 监控'
- en: '](img/B19116_07_02.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_02.jpg)'
- en: Figure 7.2 – AKS Monitoring
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – AKS 监控
- en: The monitoring information that you can pull from AKS, or nearly any other Azure
    service, gives you the ability to see what’s happening right now or what’s been
    happening for an extended period of time. This gives you the ability to understand
    how a system is performing but from an ad hoc perspective.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从 AKS 或几乎任何其他 Azure 服务中提取的监控信息，使你能够查看当前发生的情况或过去一段时间发生的情况。这使你能够从临时的角度理解系统的性能。
- en: '![Figure 7.3 – The hardware metrics'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.3 – 硬件指标](img/B19116_07_03.jpg)'
- en: '](img/B19116_07_03.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_03.jpg)'
- en: Figure 7.3 – The hardware metrics
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 硬件指标
- en: The idea of this type of monitoring is to see and understand how cluster resources
    such as CPU, memory, storage, and bandwidth (inbound and outbound) are performing
    to ensure that you can make decisions about how a cluster should be managed.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这种监控的目的是查看和理解集群资源（如 CPU、内存、存储和带宽（进出流量））的表现，以确保你能够做出关于如何管理集群的决策。
- en: You can also monitor applications that are running to see the uptime, how many
    resources they’re consuming, and the overall performance of the apps.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以监控正在运行的应用程序，查看它们的运行时间、消耗的资源量以及应用程序的整体性能。
- en: Monitoring specifics on a Kubernetes cluster
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 监控 Kubernetes 集群的具体情况
- en: The components on a Control Plane that you should monitor are the API server,
    etcd (the cluster store), controllers, and schedulers. The components on a worker
    node that you should monitor are Kubelet, container runtime, kube-proxy, and DNS.
    There’s also the need to monitor Pods, but you’ll be learning more about that
    at the end of this chapter.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该监控的控制平面组件包括 API 服务器、etcd（集群存储）、控制器和调度器。你应该监控的工作节点组件包括 Kubelet、容器运行时、kube-proxy
    和 DNS。还有需要监控 Pods，但你将在本章末尾进一步学习这部分内容。
- en: 'In any circumstance, whether it’s components on the Control Plane or components
    on the worker node, you should ensure that the Metrics Server is running. You
    can technically retrieve metrics via the `/metrics/resource` endpoint (example:
    `/metrics/pods`), but that would mean you have to query each resource. The Metrics
    Server goes to each resource, fetches the metrics, and exposes them instead of
    you having to retrieve them one by one. You can find the Metrics Server, which
    you can use across any Kubernetes cluster, here: [https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml](https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何情况下，无论是控制平面的组件还是工作节点上的组件，你都应该确保 Metrics Server 正在运行。你可以通过 `/metrics/resource`
    端点（例如：`/metrics/pods`）来技术性地获取指标，但那意味着你必须查询每个资源。Metrics Server 会访问每个资源，获取指标并将其暴露出来，而不需要你一个一个地获取它们。你可以在这里找到可以在任何
    Kubernetes 集群中使用的 Metrics Server：[https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml](https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml)。
- en: The Metrics Server endpoint comes from the Kubernetes **Specific Interest Group**
    (**SIG**) and can be deployed anywhere. Whether it’s a Kubernetes cluster running
    in AWS or a Kubeadm cluster running on virtual machines on your Windows 10 laptop,
    it doesn’t matter where the cluster exists.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Metrics Server 端点来源于 Kubernetes **特定兴趣小组** (**SIG**)，可以部署在任何地方。无论是运行在 AWS 上的
    Kubernetes 集群，还是运行在你 Windows 10 笔记本上的 Kubeadm 集群，集群存在的地方并不重要。
- en: What’s the downside to monitoring?
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 监控的缺点是什么？
- en: The downside of monitoring, although it’s powerful, is that there’s not much
    that you can do with the data unless it’s happening in real time. Sure, you can
    get alerts if there’s an issue with a resource, but this means that an engineer
    would have to be on-call to fix the issue. They have to stop what they’re doing
    to put out a fire. With the way that the tech world is going, this is not a sustainable
    model anymore.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 监控的缺点，尽管它非常强大，是除非实时发生，否则你对数据的处理能力有限。当然，如果资源出现问题，你可以收到警报，但这意味着工程师必须处于待命状态来解决问题。他们必须停下手头的工作来处理突发事件。随着科技世界的发展，这种模式已经不再可持续。
- en: Along with that, engineers want to spend more time creating value-driven work.
    They don’t want to wake up at 2:00 A.M. due to getting an alert or stop coding
    a new feature because of an alert. Instead, they want a way to create automated
    and repeatable processes for an alert. For example, if an alert goes off, engineers
    want a way to create an automated process that can fix the problem if it happens.
    Then, they don’t have to stop what they’re doing to go put out a fire and can
    continue creating value-driven work.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 与此相伴，工程师希望能够花更多时间创造有价值的工作。他们不希望在凌晨 2 点因收到警报而醒来，也不希望因为警报而停止编写新功能。相反，他们希望能够为警报创建自动化和可重复的处理流程。例如，如果警报触发，工程师希望能够创建一个自动化的流程，在出现问题时能及时修复。这样，他们就不必停止手头的工作去处理突发问题，而可以继续专注于创造有价值的工作。
- en: This is where observability comes into play.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是可观察性发挥作用的地方。
- en: What’s observability?
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是可观察性？
- en: Because monitoring and observability are sometimes used interchangeably when
    explaining them, it’s important to understand their differences. This way, as
    you dive deeper into monitoring, it’s easier to understand the distinctions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在解释监控和可观察性时，有时这两个词是可以互换使用的，因此了解它们之间的区别非常重要。这样，当你深入了解监控时，就能更容易理解这两者的差异。
- en: Observability is mostly what you’ll see in Kubernetes and almost every other
    cloud-native system. However, monitoring and observability are starting to blend
    together in terms of what they mean. For example, in *Figure 7**.1*, you saw the
    **Monitoring** section. Under the **Monitoring** section, there was a subsection
    for **Metrics**. The thing is, metrics technically fall under observability.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 可观察性主要出现在 Kubernetes 和几乎所有其他云原生系统中。然而，监控和可观察性在含义上开始有所交融。例如，在*图 7.1*中，你看到了**监控**部分。在**监控**部分下，有一个**指标**子部分。问题是，指标从技术上来说属于可观察性范畴。
- en: The reason why monitoring and observability are getting mashed together, or
    in other words, the reason why observability is becoming more popular, is that
    with observability, you can actually make decisions and automate workloads based
    on the data that you receive.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 监控和可观察性之所以开始混为一谈，换句话说，可观察性之所以越来越受欢迎，是因为通过可观察性，你可以基于接收到的数据做出决策并自动化工作负载。
- en: The key data points for observability practices are logs, metrics, and traces.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 可观察性实践的关键数据点包括日志、指标和追踪。
- en: 'Again, we don’t want to go too deep in this section because observability has
    an entire chapter to itself. Just remember three key things:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这一部分我们不想讲得过于深入，因为可观察性有一整章内容。只需记住三点：
- en: Observability gives you the ability to perform an actual action with the data
    you’re receiving. That action could be to automatically fix a resource that’s
    causing problems.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可观察性使你能够根据接收到的数据采取实际行动。这个行动可能是自动修复导致问题的资源。
- en: It’s becoming increasingly popular over traditional monitoring.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它正变得越来越流行，超越了传统的监控方式。
- en: 'Observability has three key aspects: logs, metrics, and tracing.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可观察性有三个关键方面：日志、指标和追踪。
- en: A quick note on metrics
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 关于指标的简短说明
- en: Metrics for most Kubernetes resources are exposed. They’re exposed via the `/metrics/resource`
    endpoint. For example, `/metrics/pods` would be for the Pods Kubernetes resource.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Kubernetes 资源的指标是公开的。它们通过 `/metrics/resource` 端点进行公开。例如，`/metrics/pods`
    就是 Kubernetes 中 Pods 资源的指标。
- en: To make things a bit easier, the Metrics Server, which isn’t installed on Kubernetes
    out of the box (depending on the cloud provider, but out of the box means a raw
    Kubernetes cluster installation), can scrape and consolidate all of the metric
    endpoints for the Kubernetes resources. This way, you don’t have to attempt to
    consume each metric via the resource one by one.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化操作，Metrics Server（它不会默认安装在 Kubernetes 中，具体取决于云服务提供商，但默认指的是一个原始的 Kubernetes
    集群安装）可以抓取并整合 Kubernetes 资源的所有指标端点。这样，你就不必一一尝试通过每个资源去获取指标。
- en: To kick things up a notch, there’s the kube-state-metrics tool, which you can
    install on a Kubernetes server; its job is to focus on the health of the Kubernetes
    resources/objects on your cluster. For example, if the Pods are actually available
    and ready is what kube-state-metrics will look at and confirm.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更进一步提升功能，可以使用 kube-state-metrics 工具，它可以安装在 Kubernetes 服务器上；它的主要任务是专注于集群中 Kubernetes
    资源/对象的健康状况。例如，kube-state-metrics 会检查并确认 Pods 是否实际上可用且准备就绪。
- en: If you’re wondering what the difference is between the Metrics Server and kube-state-metrics,
    the Metrics Server shows cluster resource usage such as CPU and memory. On the
    other hand, kube-state-metrics is concerned with the health of the Kubernetes
    resource.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在想 Metrics Server 和 kube-state-metrics 之间的区别，Metrics Server 显示的是集群资源使用情况，例如
    CPU 和内存。另一方面，kube-state-metrics 关注的是 Kubernetes 资源的健康状态。
- en: Monitoring versus observability examples
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控与可观测性示例
- en: When thinking about how to implement monitoring, observability, or both, it’s
    best to think about the implementation details from a scenario perspective.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当考虑如何实现监控、可观测性，或两者时，最好从场景的角度思考实现细节。
- en: Let’s take two scenarios – one for a containerized application from a monitoring
    perspective and then taking the same containerized application, but looking at
    it from an observability perspective.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举两个场景 – 一个从监控角度看待容器化应用，另一个则是从可观测性角度看待相同的容器化应用。
- en: The following examples won’t be a complete step-by-step guide. The code works,
    but it won’t be explained in terms of how exactly to deploy and run it. Feel free
    to go through it on your own system, but the aim in this chapter is to show examples
    of the workflow rather than a complete step-by-step tutorial.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例并不是一个完整的逐步指南。代码是可用的，但不会详细解释如何具体部署和运行它。你可以在自己的系统中试试看，但本章的目标是展示工作流的示例，而不是一个完整的逐步教程。
- en: Monitoring use case
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 监控使用案例
- en: 'The first scenario can be thought about as, for example, a frontend application.
    It could be an Nginx web app, which is simple and hosts a website. It could be
    something as simple as the following Nginx configuration:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个场景可以看作是一个前端应用。例如，它可以是一个简单的 Nginx Web 应用，用于托管网站。它可以是如下的简单 Nginx 配置：
- en: '[PRE0]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With the preceding Kubernetes manifest, you can picture an application that’s
    running with two replicas on a Kubernetes cluster. To retrieve the memory and
    CPU information of the Pod, you can run the `kubectl` `top` command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的 Kubernetes 清单，你可以想象一个正在 Kubernetes 集群中运行并有两个副本的应用。要获取 Pod 的内存和 CPU 信息，可以运行
    `kubectl` `top` 命令：
- en: '[PRE1]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Figure 7.4 – The top command'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.4 – top 命令'
- en: '](img/B19116_07_04.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_04.jpg)'
- en: Figure 7.4 – The top command
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – top 命令
- en: 'An error can sometimes occur if the Metrics API isn’t enabled, as it’s disabled
    by default. If you’d like to enable it, check the documentation for where you’re
    running the Kubernetes cluster. As an example, here’s how you’d enable the Metrics
    API on `minikube`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有启用 Metrics API，可能会出现错误，因为它默认是禁用的。如果你想启用它，请查看你所运行的 Kubernetes 集群的文档。例如，这里是如何在
    `minikube` 上启用 Metrics API 的：
- en: '[PRE2]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To stress-test the workload, you can use a stress/performance testing tool
    such as `k6`. The following is an example configuration that you can use:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行压力测试负载，你可以使用压力/性能测试工具，如 `k6`。以下是你可以使用的示例配置：
- en: '[PRE3]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can then save the preceding configuration and use it as a stress test with
    the following command, which specifies 100 virtual users and runs for 30 seconds:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以保存前面的配置，并使用以下命令作为压力测试，指定 100 个虚拟用户并运行 30 秒：
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Figure 7.5 – The benchmark test'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.5 – 基准测试'
- en: '](img/B19116_07_05.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_05.jpg)'
- en: Figure 7.5 – The benchmark test
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – 基准测试
- en: 'Running the `kubectl top` command again, you can see that the memory increased:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行 `kubectl top` 命令，你可以看到内存增加了：
- en: '![Figure 7.6 – The kubectl top command for a Pod'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.6 – Pod 的 kubectl top 命令'
- en: '](img/B19116_07_06.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_06.jpg)'
- en: Figure 7.6 – The kubectl top command for a Pod
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – Pod 的 kubectl top 命令
- en: After logging in to a piece of monitoring software, such as the Kubernetes Dashboard
    (which you’ll learn about in the upcoming section), you will be able to see the
    CPU and memory utilization for both Pods.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到一款监控软件后，例如 Kubernetes Dashboard（你将在接下来的章节中学习到），你将能够看到两个 Pods 的 CPU 和内存使用情况。
- en: '![Figure 7.7 – The Pods running'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.7 – 正在运行的 Pods'
- en: '](img/B19116_07_07.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_07.jpg)'
- en: Figure 7.7 – The Pods running
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – 正在运行的 Pods
- en: This information gives you the ability to monitor what happens when more and
    more users access your application, which is very common for a frontend application.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息让你能够监控当越来越多的用户访问你的应用时发生的情况，这对于前端应用来说是很常见的。
- en: Observability use case
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可观测性使用案例
- en: The second scenario is going to be around checking out the Nginx Pods and Services
    that can be created from the Nginx configuration in the previous section. Ultimately,
    you’ll be able to see how you can capture and view metrics data in an observability
    tool. Although *Figure 7**.8* shows Prometheus, regardless of which observability
    tool you use, you’re still going to see the same data because it’s being retrieved
    via the Kubernetes Metrics API.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个场景将围绕查看前一部分中 Nginx 配置创建的 Nginx Pods 和服务。最终，你将能够看到如何在一个可观察性工具中捕获和查看指标数据。尽管*图
    7.8* 显示了 Prometheus，但无论你使用哪种可观察性工具，你仍然会看到相同的数据，因为它是通过 Kubernetes 指标 API 获取的。
- en: When the Metrics Server is enabled on a Kubernetes cluster, it exposes several
    resource metric endpoints. One of the resource metric endpoints is Pods. You can
    confirm that your Pod metrics are getting ingested into Prometheus based on **Service
    Discovery**.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 Kubernetes 集群上启用 Metrics Server 时，它会暴露几个资源指标端点。其中一个资源指标端点是 Pods。你可以根据**服务发现**来确认你的
    Pod 指标是否已被导入到 Prometheus 中。
- en: '![Figure 7.8 – A Pod discovery'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.8 – 一个 Pod 的发现'
- en: '](img/B19116_07_08.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_08.jpg)'
- en: Figure 7.8 – A Pod discovery
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – 一个 Pod 的发现
- en: You can then confirm how Pods are running based on different queries that Prometheus
    allows you to check with. For example, the following screenshot shows Kubernetes
    Service resource information, and you can see that the Nginx service is running.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以根据 Prometheus 允许你检查的不同查询来确认 Pods 的运行情况。例如，以下截图显示了 Kubernetes 服务的资源信息，你可以看到
    Nginx 服务正在运行。
- en: '![Figure 7.9 – Kubernetes Service metrics'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.9 – Kubernetes 服务指标'
- en: '](img/B19116_07_09.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_09.jpg)'
- en: Figure 7.9 – Kubernetes Service metrics
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9 – Kubernetes 服务指标
- en: You can also dive a little deeper and query based on certain hardware resources,
    such as memory and CPU. This way, you can understand how many resources (memory,
    CPU, and so on) are being taken up by each Pod.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以深入挖掘，并根据特定的硬件资源（如内存和 CPU）进行查询。这样，你就能了解每个 Pod 占用了多少资源（内存、CPU 等）。
- en: 'For example, the following snippet is a query to see memory usage:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下片段是一个查询，用于查看内存使用情况：
- en: '[PRE5]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notice how a Pod name is specified; this will show you the observability metrics
    around memory for the specified Pod.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 注意如何指定 Pod 名称；这将展示与指定 Pod 的内存相关的可观察性指标。
- en: Monitoring and observability tools for Kubernetes
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 的监控和可观察性工具
- en: Typically, in any tech book, the theory/practical knowledge comes first, then
    the tooling. However, monitoring and observability are a bit different because
    you can’t really talk about the specifics without mentioning or showing a certain
    tool/platform. Because of this, prior to jumping into the specifics around *how*
    to monitor and implement observability, you’re going to learn about a few key
    tools.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在任何技术书籍中，理论/实践知识首先出现，然后才是工具。然而，监控和可观察性稍有不同，因为如果不提及或展示某些工具/平台，实际上你无法讨论具体的内容。因此，在深入探讨*如何*监控和实现可观察性之前，你需要先了解一些关键工具。
- en: The goal of this section is to help you first understand what the tools look
    like and then take the theory that you learn and utilize it in the tools. When
    you combine the knowledge and visuals (UI) of the tools with the understanding
    of what true monitoring and observability are, you can successfully implement
    them in your environment.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的目标是帮助你首先了解这些工具的样子，然后将你学到的理论应用到这些工具中。当你将工具的知识和视觉界面（UI）与对真正的监控和可观察性的理解相结合时，你就能在你的环境中成功地实现它们。
- en: One of the interesting things about monitoring is that you can fully understand
    it from a theoretical perspective, but implementing it can be a challenge. For
    example, you can understand what the metrics endpoint in Kubernetes is, how it
    works, what metrics are exposed, and what resources you can monitor from those
    metrics. However, actually setting up a platform to *listen* to the metrics and
    configuring that listener is vastly different than reading about how metrics work.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 监控的一大有趣之处在于，你可以从理论角度完全理解它，但实际实现起来可能会是一个挑战。例如，你可以理解 Kubernetes 中的指标端点是什么，它是如何工作的，暴露了哪些指标，以及你可以从这些指标中监控哪些资源。然而，实际上设置一个平台来*监听*这些指标并配置这个监听器，与阅读有关指标如何工作的内容截然不同。
- en: Although this section won’t cover all the tools and platforms used to monitor
    Kubernetes, this list is a great place to start as they are the most widely used
    in organizations. The good news is that even if you come across a monitoring tool
    that isn’t covered in this section, monitoring is monitoring. That means once
    you understand monitoring and how it works with Kubernetes, you’re pretty much
    good to go in terms of learning other monitoring tools. It’s all the same stuff
    at the end of the day. The underlying components of what monitoring is doesn’t
    change. The only thing that changes is how the dashboards look.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本节不会涵盖所有用于监控 Kubernetes 的工具和平台，但这个列表是一个很好的起点，因为它们在组织中是最广泛使用的。好消息是，即使你遇到的监控工具本节没有介绍，监控就是监控。这意味着，一旦你理解了监控及其如何与
    Kubernetes 配合工作，学习其他监控工具也就不成问题了。归根结底，它们的原理是一样的。监控的基本组件不会改变，唯一的不同是仪表板的显示方式。
- en: 'In this section, you’re going to learn about the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习以下内容：
- en: The built-in Kubernetes Dashboard
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置的 Kubernetes Dashboard
- en: Cloud-specific monitoring and observability tools
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云特定的监控和可观察性工具
- en: Grafana/Prometheus
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Grafana/Prometheus
- en: How to use and set monitoring tools
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用和设置监控工具
- en: The Kubernetes Dashboard
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes Dashboard
- en: The Kubernetes Dashboard is as *native* as it gets in terms of monitoring and
    observability. Although it’s not configured out of the box, it’s fairly easy to
    get configuration across almost any environment. It’s the quickest way to see
    what’s happening inside a Kubernetes cluster.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes Dashboard 是一种*原生*的监控和可观察性工具。虽然它并未开箱即用，但几乎可以在任何环境中轻松进行配置。它是查看 Kubernetes
    集群内部发生的事情的最快方式。
- en: Important note
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: We’re using `minikube` for this because it’s straightforward. If you decide
    to use the Kubernetes Dashboard on another Kubernetes cluster, the visual of the
    dashboard itself isn’t going to be any different. The only difference will be
    the Kubernetes resources that you see.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`minikube`是因为它简单明了。如果你决定在其他 Kubernetes 集群上使用 Kubernetes Dashboard，仪表板的视觉效果不会有什么不同。唯一的区别是你所看到的
    Kubernetes 资源。
- en: 'First, start `minikube`. If you don’t have `minikube` already installed, you
    can install it here: [https://minikube.sigs.k8s.io/docs/start/](https://minikube.sigs.k8s.io/docs/start/):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，启动`minikube`。如果你还没有安装`minikube`，可以在这里安装：[https://minikube.sigs.k8s.io/docs/start/](https://minikube.sigs.k8s.io/docs/start/)：
- en: '[PRE6]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Figure 7.10 – Starting minikube'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.10 – 启动 minikube'
- en: '](img/B19116_07_10.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_10.jpg)'
- en: Figure 7.10 – Starting minikube
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10 – 启动 minikube
- en: 'Next, run the following command to start the dashboard:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行以下命令以启动仪表板：
- en: '[PRE7]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Figure 7.11 – The default Kubernetes Dashboard'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.11 – 默认的 Kubernetes Dashboard'
- en: '](img/B19116_07_11.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_11.jpg)'
- en: Figure 7.11 – The default Kubernetes Dashboard
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.11 – 默认的 Kubernetes Dashboard
- en: At this point, you can see several different pieces of information about your
    `minikube` cluster, from Pod info to other Kubernetes resources. You can see Pods
    that are running and healthy, and workloads that may need to be fixed.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可以看到有关`minikube`集群的多个不同信息，从 Pod 信息到其他 Kubernetes 资源。你可以看到正在运行且健康的 Pods，以及可能需要修复的工作负载。
- en: '![Figure 7.12 – A Deployment example'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.12 – 一个部署示例'
- en: '](img/B19116_07_12.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_12.jpg)'
- en: Figure 7.12 – A Deployment example
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.12 – 一个部署示例
- en: Next, you can see the overall deployment status.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你可以看到整体部署状态。
- en: '![Figure 7.13 – The Pod status'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.13 – Pod 状态'
- en: '](img/B19116_07_13.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_13.jpg)'
- en: Figure 7.13 – The Pod status
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.13 – Pod 状态
- en: After that, you can dive even deeper to see Pods running in the **Deployments**
    tab.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你可以深入查看**部署**选项卡中正在运行的 Pods。
- en: '![Figure 7.14 – The Pods running'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.14 – 运行中的 Pods'
- en: '](img/B19116_07_14.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_14.jpg)'
- en: Figure 7.14 – The Pods running
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.14 – 运行中的 Pods
- en: One thing to point out here is that the Kubernetes Dashboard is almost never
    used for a production-level scenario. It’s typically used to look at some information
    quickly if needed. For true observability and alerting in an environment, one
    of the more appropriate (production-ready) monitoring and observability tools
    is typically used, which you’ll see next.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 需要指出的一点是，Kubernetes Dashboard 几乎从未用于生产级别的场景。它通常用于快速查看一些信息。如果需要进行真实的可观察性和警报设置，通常会使用更合适的（生产就绪型）监控和可观察性工具，接下来你将看到这些工具。
- en: Azure Monitor
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure Monitor
- en: If you strictly have Azure workloads or even workloads outside of Azure and
    you’re utilizing Azure Arc (like on-premises), Azure Monitor is a great built-in
    solution. You have the ability to capture logs and metrics, create alerts, and
    see in real time what’s happening inside your environment. For example, you can
    view the CPU and memory usage of a cluster, along with the Pod and other Kubernetes
    resource data.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您严格使用 Azure 工作负载，或甚至在 Azure 外部的工作负载，并且您正在使用 Azure Arc（例如本地部署），Azure Monitor
    是一个非常好的内建解决方案。您可以捕获日志和指标，创建警报，并实时查看您的环境中发生的情况。例如，您可以查看集群的 CPU 和内存使用情况，以及 Pod 和其他
    Kubernetes 资源的数据。
- en: 'In [*Chapter 2*](B19116_02.xhtml#_idTextAnchor038), you learned how to create
    an AKS cluster with Terraform. You can utilize that same code for this section.
    For a quicker reference, here is the link: [https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch2/AKS](https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch2/AKS).'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 2 章*](B19116_02.xhtml#_idTextAnchor038)中，您学习了如何使用 Terraform 创建 AKS 集群。您可以使用相同的代码来完成本节内容。为了更快参考，以下是链接：[https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch2/AKS](https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch2/AKS)。
- en: Once your AKS cluster is configured, log in to the Azure portal and go to **Kubernetes
    services**. Then, you should see an **Insights** tab under **Monitoring**.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的 AKS 集群配置完成，登录 Azure 门户并进入**Kubernetes 服务**。然后，您应该可以在**监控**下看到一个**洞察**选项卡。
- en: Enable Insights by clicking the blue **Configure azure** **monitor** button.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击蓝色的**配置 Azure** **监视**按钮启用洞察。
- en: '![Figure 7.15 – Azure Insights'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.15 – Azure 洞察'
- en: '](img/B19116_07_15.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_15.jpg)'
- en: Figure 7.15 – Azure Insights
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.15 – Azure 洞察
- en: Azure Insights gives you the ability to monitor everything in your AKS cluster
    from the entire environment, to the nodes, all the way down to the Pods and containers.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 洞察使您能够从整个环境到节点，再到 Pod 和容器，全面监控您的 AKS 集群中的一切。
- en: '![Figure 7.16 – Insights data'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.16 – 洞察数据'
- en: '](img/B19116_07_16.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_16.jpg)'
- en: Figure 7.16 – Insights data
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.16 – 洞察数据
- en: For example, by diving into **Containers** (Pods), you can see the status, utilization,
    and uptime.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，通过深入**容器**（Pod），您可以查看状态、利用率和正常运行时间。
- en: '![Figure 7.17 – The Container data'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.17 – 容器数据'
- en: '](img/B19116_07_17.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_17.jpg)'
- en: Figure 7.17 – The Container data
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.17 – 容器数据
- en: Within **Nodes**, you can see the specific Pods running on each worker node,
    including the health of the Pod.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在**节点**中，您可以看到每个工作节点上运行的特定 Pod，包括 Pod 的健康状况。
- en: '![Figure 7.18 – The Node data'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.18 – 节点数据'
- en: '](img/B19116_07_18.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_18.jpg)'
- en: Figure 7.18 – The Node data
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.18 – 节点数据
- en: Azure Monitor and Insights is a great overall solution for Kubernetes workloads.
    If you’re in the Azure ecosystem, I wouldn’t recommend looking at another solution.
    Stick to what’s native.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Monitor 和洞察是 Kubernetes 工作负载的一个很好的整体解决方案。如果您在 Azure 生态系统中，我不建议考虑其他解决方案。坚持使用本地的。
- en: AWS Container Insights
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS 容器洞察
- en: Container Insights is part of the AWS CloudWatch family and gives you the ability
    to view containerized workloads for performance and monitoring-related actions.
    You can create alerts based on Container Insights, along with pull logs and metrics
    to take action on anything that may occur from an automated and repeatable perspective.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 容器洞察是 AWS CloudWatch 家族的一部分，使您能够查看容器化工作负载的性能和监控相关操作。您可以基于容器洞察创建警报，并提取日志和指标，以便从自动化和可重复的角度对可能发生的任何情况采取行动。
- en: 'In [*Chapter 2*](B19116_02.xhtml#_idTextAnchor038), you learned how to create
    an EKS cluster with Terraform. You can utilize the same code for this section.
    For a quicker reference, here is the link: [https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch2/AWS](https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch2/AWS).'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 2 章*](B19116_02.xhtml#_idTextAnchor038)中，您学习了如何使用 Terraform 创建 EKS 集群。您可以使用相同的代码来完成本节内容。为了更快参考，以下是链接：[https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch2/AWS](https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch2/AWS)。
- en: 'After you run the EKS Terraform configuration, run the following command to
    retrieve the Kubernetes configuration (`kubeconfig`) from the EKS cluster:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行 EKS Terraform 配置后，运行以下命令从 EKS 集群中获取 Kubernetes 配置（`kubeconfig`）：
- en: '[PRE8]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To confirm that your current context is set, run the following command and
    you should see a similar output:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认当前上下文已设置，运行以下命令，你应该会看到类似的输出：
- en: '[PRE9]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, configure AWS Container Insights for your cluster:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为你的集群配置 AWS 容器洞察：
- en: '[PRE10]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After the preceding code runs, you’ll see an output similar to the terminal
    output pasted here:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码运行后，你将看到类似于终端输出的结果，如下所示：
- en: '[PRE11]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: At this point, if you log in to AWS and go to **CloudWatch** | **Container Insights**,
    you can see that Container Insights is properly configured.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，如果你登录到 AWS 并进入 **CloudWatch** | **容器洞察**，你将看到容器洞察已正确配置。
- en: '![Figure 7.19 – The Container Insights output'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.19 – 容器洞察输出'
- en: '](img/B19116_07_19.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_19.jpg)'
- en: Figure 7.19 – The Container Insights output
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.19 – 容器洞察输出
- en: Next, we’ll dive into a very popular stack in the Kubernetes space – Grafana
    and Prometheus.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将深入了解 Kubernetes 领域中非常流行的技术栈——Grafana 和 Prometheus。
- en: Grafana/Prometheus
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Grafana/Prometheus
- en: Arguably, the most popular implementation of a monitoring/observability scenario
    for Kubernetes is Grafana and Prometheus. Grafana and Prometheus work outside
    of Kubernetes environments as well, but they became extremely popular in the Kubernetes
    ecosystem. In fact, there’s even a Prometheus operator for Kubernetes.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说，Grafana 和 Prometheus 是 Kubernetes 监控/可观测性场景中最流行的实现。Grafana 和 Prometheus
    也可以在 Kubernetes 以外的环境中工作，但它们在 Kubernetes 生态系统中变得非常流行。事实上，Kubernetes 甚至有一个 Prometheus
    操作员。
- en: Aside from the standard monitoring and observability benefits, engineers really
    enjoy the combination because it’s 100% open source. In Grafana for example, you
    can create any type of dashboard you want with a little bit of code and it’s all
    free. Grafana and Prometheus can also run anywhere. The stack can run inside your
    Kubernetes cluster or completely separate on its own servers.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准的监控和可观测性好处外，工程师们真的很喜欢这个组合，因为它是 100% 开源的。例如，在 Grafana 中，你可以使用一点代码创建任何你想要的仪表板，而且这一切都是免费的。Grafana
    和 Prometheus 也可以在任何地方运行。这个栈可以在你的 Kubernetes 集群内部运行，或者完全在独立的服务器上运行。
- en: Although you can configure Prometheus and Grafana separately with all the bells
    and whistles, we’re going to utilize the power of the **Prometheus Community Helm
    Chart**. The reason why is that it radically simplifies the Prometheus and Grafana
    installation from an automated and repeatable standpoint. It installs both Prometheus
    and Grafana, along with setting up dashboards for us.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你可以单独配置 Prometheus 和 Grafana，添加所有的功能，但我们将利用 **Prometheus 社区 Helm 图表** 的强大功能。原因是它从自动化和可重复的角度简化了
    Prometheus 和 Grafana 的安装。它会安装 Prometheus 和 Grafana，并为我们设置仪表板。
- en: Before jumping in, one thing that you’ll always need to do no matter what monitoring
    and observability platform you’re on is to ensure that you are collecting metrics
    in the way you’re expecting. For example, the Kubernetes Metrics Server or an
    adapter of sorts. For example, Prometheus has an adapter that can be used instead
    of the Metrics Server. You can also go straight to the source by utilizing the
    metrics endpoint from `/metrics/resource` (for example, `/metrics/pods`), but
    generally, engineers opt to use the Metrics Server.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，有一件事无论你使用哪个监控和可观测性平台，你都必须确保你正在以期望的方式收集指标。例如，Kubernetes 的指标服务器或类似的适配器。例如，Prometheus
    有一个适配器可以代替指标服务器。你也可以通过使用 `/metrics/resource`（例如，`/metrics/pods`）的指标端点直接访问源数据，但通常工程师选择使用指标服务器。
- en: '![Figure 7.20 – The metrics Pods'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.20 – 指标 Pods'
- en: '](img/B19116_07_20.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_20.jpg)'
- en: Figure 7.20 – The metrics Pods
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.20 – 指标 Pods
- en: If you don’t expose the metrics endpoint, Kubernetes won’t allow the system
    to consume said metrics. In terms of enabling the Metrics Server, it all depends
    on where you’re running Kubernetes. For example, in AKS, it’s automatically exposed
    for you. If you don’t see the metrics Pods in the `kube-system` namespace for
    your Kubernetes cluster (depending on what environment you deployed Kubernetes
    in), check the documentation for that type of Kubernetes environment to see how
    you can enable the metrics endpoint.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有暴露指标端点，Kubernetes 将不会允许系统使用这些指标。在启用指标服务器方面，这取决于你运行 Kubernetes 的环境。例如，在
    AKS 中，它会自动为你暴露。如果你在 `kube-system` 命名空间中看不到 Kubernetes 集群的指标 Pods（这取决于你部署 Kubernetes
    的环境），请查看该类型 Kubernetes 环境的文档，了解如何启用指标端点。
- en: 'First, add `helm repo` for `prometheus-community`:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为 `prometheus-community` 添加 `helm repo`：
- en: '[PRE12]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, ensure that the repo is up to date:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，确保你的仓库是最新的：
- en: '[PRE13]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'For the last step, install the Helm chart in the `monitoring` namespace:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一步，安装 Helm chart 到 `monitoring` 命名空间：
- en: '[PRE14]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once installed, you should see several Kubernetes resources created in the
    `monitoring` namespace. To access Grafana, you can use port forwarding:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你应该可以看到在 `monitoring` 命名空间中创建的几个 Kubernetes 资源。要访问 Grafana，你可以使用端口转发：
- en: '[PRE15]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The default username/password for Grafana is `admin/prom-operator`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana 的默认用户名/密码是 `admin/prom-operator`。
- en: After logging in to Grafana, check out the Pods in the dashboard for the `kube-system`
    namespace. You can see that metrics are being ingested by Prometheus and pushed
    to Grafana from all namespaces.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 登录 Grafana 后，查看 `kube-system` 命名空间中的 Pods 仪表板。你可以看到，来自所有命名空间的指标正被 Prometheus
    获取并推送到 Grafana。
- en: 'To see metrics, go to **Dashboards** | **Browse**:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看指标，进入 **仪表板** | **浏览**：
- en: '![Figure 7.21 – Browsing the dashboards'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.21 – 浏览仪表板'
- en: '](img/B19116_07_21.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_21.jpg)'
- en: Figure 7.21 – Browsing the dashboards
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.21 – 浏览仪表板
- en: 'Click the **Kubernetes / Compute Resources / Namespace (****Pods)** option:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **Kubernetes / 计算资源 / 命名空间（****Pods）** 选项：
- en: '![Figure 7.22 – The Pods dashboard'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.22 – Pods 仪表板'
- en: '](img/B19116_07_22.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_22.jpg)'
- en: Figure 7.22 – The Pods dashboard
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.22 – Pods 仪表板
- en: 'Change the namespace to a namespace that has Pods already, such as `kube-system`,
    and you can see the Pod metrics in the following screenshot:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 将命名空间更改为已有 Pod 的命名空间，例如 `kube-system`，你可以在以下截图中看到 Pod 的指标：
- en: '![Figure 7.23 – The namespace selection'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.23 – 命名空间选择'
- en: '](img/B19116_07_23_NEW.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_23_NEW.jpg)'
- en: Figure 7.23 – The namespace selection
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.23 – 命名空间选择
- en: Prometheus/Grafana is a powerful combination that allows you to stay vendor
    neutral and get everything you need as an open source option.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus/Grafana 是一个强大的组合，允许你保持供应商中立，并作为开源选项获取所需的一切。
- en: Observability practices
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可观察性实践
- en: Now, let’s define what observability truly is by looking at logs, traces, and
    metrics. When you use tools such as Prometheus, you’re doing a *piece* of observability.
    When you use other tools such as Logz.io or another log aggregator, you’re using
    another piece of observability.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过查看日志、跟踪和指标来定义可观察性到底是什么。当你使用像 Prometheus 这样的工具时，你是在做可观察性的一部分。当你使用其他工具，例如
    Logz.io 或其他日志聚合器时，你也在使用可观察性的另一部分。
- en: Logging
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志记录
- en: Logging is aggregating and storing logged event messages written by programs
    and systems. As you can imagine, depending on how verbose the logs are set in
    an application, there will be a lot of events. A sysadmin’s favorite tool is a
    log because it literally shows everything and anything that could happen from
    an event’s perspective. However, it’s not efficient to simply comb through all
    of it with your eyes. Instead, using observability practices, you can send the
    logs to a log aggregator and ensure that a specific type of log that occurs can
    trigger an alert or some type of automation to go in and fix the issue.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录是聚合和存储由程序和系统写入的事件日志消息。正如你所想象的那样，根据应用程序中日志的详细程度，可能会有大量的事件。系统管理员最喜欢的工具就是日志，因为它从事件的角度几乎能显示任何可能发生的事情。然而，单纯通过眼睛查看所有日志并不高效。相反，通过使用可观察性实践，你可以将日志发送到日志聚合器，并确保某个特定类型的日志触发警报或某种自动化，进而修复问题。
- en: '![Figure 7.24 – Logging service discovery'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.24 – 日志服务发现'
- en: '](img/B19116_07_24.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_24.jpg)'
- en: Figure 7.24 – Logging service discovery
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.24 – 日志服务发现
- en: 'There are a few logging practices when it comes to containers:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器日志记录方面，有一些日志记录实践：
- en: '**Application forwarding**: Sending logs directly via the app. For example,
    maybe you have some code inside of your application using a Prometheus library
    that collects the logs, metrics, and traces, and sends it to whatever backend
    logging platform you’re using.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序转发**：通过应用程序直接发送日志。例如，假设你在应用程序中使用了 Prometheus 库来收集日志、指标和跟踪，并将其发送到你使用的后端日志平台。'
- en: '**Sidecar**: Using a sidecar container to manage logs for an app. For example,
    you can containerize some logging systems to run as a secondary/sidecar container
    inside of your Pod(s). The sidecar container’s job is to do one thing; retrieve
    and send logs about what’s happening on the Pod.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sidecar**：使用 sidecar 容器管理应用程序的日志。例如，你可以将一些日志系统容器化，以便作为辅助/sidecar 容器在 Pod
    内部运行。sidecar 容器的任务是做一件事：获取并发送关于 Pod 上发生的事情的日志。'
- en: '**Node agent forward**: Run a Pod on each worker node that forwards all container
    logs to the backend.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**节点代理转发**：在每个工作节点上运行一个 Pod，将所有容器日志转发到后端。'
- en: Metrics
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指标
- en: Metrics are about collecting time series data, which is used to predict expected
    ranges and forecast values, showing it in dashboards (such as Grafana or another
    UI-centric dashboard), and alerting on it. Metric endpoints will give a bunch
    of information that you can act upon. From a pure Kubernetes perspective, the
    metrics endpoint collects Kubernetes resource data from the kubelet that’s running
    on each worker node and exposes it to the API server through the Metrics API.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 度量数据用于收集时间序列数据，这些数据可以用来预测预期范围和预测值，展示在仪表板上（如 Grafana 或其他以 UI 为中心的仪表板），并进行告警。度量端点会提供一堆可以操作的信息。从纯
    Kubernetes 的角度来看，度量端点收集每个工作节点上运行的 kubelet 的 Kubernetes 资源数据，并通过度量 API 将其暴露给 API
    服务器。
- en: As mentioned in this chapter, there’s a metrics endpoint that runs as a Pod.
    Depending on the type of Kubernetes cluster you’re running, the Pod could either
    be enabled by default or it may be something that you have to turn on.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章所述，有一个作为 Pod 运行的度量端点。根据你运行的 Kubernetes 集群类型，Pod 可能默认启用，或者你可能需要手动开启。
- en: For example, in an AKS cluster, the metrics Pod is running, which means all
    of the Kubernetes resources have a metrics endpoint that can be consumed.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 AKS 集群中，度量 Pod 正在运行，这意味着所有 Kubernetes 资源都有可以消费的度量端点。
- en: '![Figure 7.25 – The metrics Pod'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.25 – 度量 Pod'
- en: '](img/B19116_07_25.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_25.jpg)'
- en: Figure 7.25 – The metrics Pod
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.25 – 度量 Pod
- en: 'For another type of Kubernetes cluster, such as something running on Kubeadm,
    you would have to enable the metrics endpoint by deploying the Pod. You can do
    that by deploying the Kubernetes manifest in the `kubernetes-sigs` repo on GitHub:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 对于另一种类型的 Kubernetes 集群，例如运行在 Kubeadm 上的集群，你需要通过部署 Pod 来启用度量端点。你可以通过部署 GitHub
    上 `kubernetes-sigs` 仓库中的 Kubernetes 清单来做到这一点：
- en: '[PRE16]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: However, that’s not all. Because a cluster configuration such as Kubeadm has
    node IPs that aren’t part of the certificate SAN on the cluster, the metrics endpoint
    will fail due to a TLS connection error.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这还不够。因为像 Kubeadm 这样的集群配置有节点 IP 地址，这些 IP 地址不在集群证书的 SAN（Subject Alternative
    Name）中，度量端点会因 TLS 连接错误而失败。
- en: 'To get around this, you have to add the following line to a few configurations:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 为了绕过这个问题，你需要在一些配置中添加以下行：
- en: '[PRE17]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: There are two places you need to add it to.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将它添加到两个地方。
- en: First, the Kubeadm config. You can edit it by running `kubectl edit cm -n kube-system
    kubeadm-config` and then add in the `serverTLSBootstrap:` `true` line.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Kubeadm 配置。你可以通过运行 `kubectl edit cm -n kube-system kubeadm-config` 来编辑它，然后添加
    `serverTLSBootstrap:` `true` 行。
- en: '![Figure 7.26 – The kubeadm config'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.26 – kubeadm 配置'
- en: '](img/B19116_07_26.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_26.jpg)'
- en: Figure 7.26 – The kubeadm config
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.26 – kubeadm 配置
- en: 'Next, you’ll have to update the kubelet on each node (all Control Planes and
    worker nodes) with the same line. To edit the kubelet on each node, you can run
    the following command and add in the configuration:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要更新每个节点（所有控制平面和工作节点）上的 kubelet，使用相同的命令行。要编辑每个节点上的 kubelet，你可以运行以下命令并添加配置：
- en: '[PRE18]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![Figure 7.27 – The kubelet config'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.27 – kubelet 配置'
- en: '](img/B19116_07_27.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_27.jpg)'
- en: Figure 7.27 – The kubelet config
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.27 – kubelet 配置
- en: Traces
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跟踪
- en: Traces are all about telling you the health of an application from an end-to-end
    perspective.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪数据主要是告诉你从端到端的角度，应用程序的健康状况。
- en: You can think of a trace as the *path* or *journey* of a request as it goes
    through the system. For example, when you go to `www.google.com`, although it
    happens extremely fast, there’s a bunch of work that’s happening underneath the
    hood. At a high level, the `GET` request that you’re creating to reach `www.google.com`
    is going through the frontend, then probably some middleware, then to the backend.
    When you Google something such as `top ten places to go in the summertime`, there
    are several requests that are occurring to retrieve that information from the
    backend database.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以把一个跟踪看作是请求在系统中的*路径*或*旅程*。例如，当你访问 `www.google.com` 时，尽管这一过程发生得非常快，但背后有大量的工作在进行。总体上，你创建的
    `GET` 请求会经过前端，可能经过一些中间件，再到后台。当你搜索诸如 `夏季十大旅游地点` 时，后台数据库会通过多个请求获取相关信息。
- en: The journey from when you perform a Google search request to when the information
    is portrayed to you – that journey is what a trace is.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 从你执行 Google 搜索请求到信息显示给你的整个过程——这就是一个跟踪（trace）。
- en: Because it’s a long journey, although only seconds to us humans, it can give
    us a lot of information from an engineering perspective on how an application
    is performing. We can then take action on that performance concern from a repeatable
    methodology instead of fixing the issue manually, or from a troubleshooting perspective.
    If you’re looking at a trace and realize that the *journey* stopped or was held
    up once it hit the backend, you now know where to start troubleshooting.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这是一个漫长的旅程，尽管对我们人类来说只有几秒钟，但它可以从工程角度为我们提供大量关于应用程序性能的信息。我们可以基于可重复的方法论来处理这些性能问题，而不是手动修复问题，或从故障排除的角度进行处理。如果你正在查看一个跟踪记录，并意识到*旅程*在到达后端时停止或遇到阻碍，你现在就知道该从哪里开始故障排除。
- en: Monitoring Kubernetes resources
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控 Kubernetes 资源
- en: In the previous section, you learned all about monitoring from an overall observability
    perspective, in particular setting up certain tools and ensuring that they work
    for you. Now it’s time to go underneath the Kubernetes hood and begin to think
    about what can be monitored from a resource perspective. Remember, a Kubernetes
    resource (sometimes called an object) can be anything, from Services, to Ingress
    controllers, to Pods. Because of that, there’s a lot to monitor.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，你了解了从整体可观测性角度进行监控，特别是如何设置某些工具并确保它们对你有效。现在是时候深入 Kubernetes 的内部，开始思考从资源角度可以监控什么了。记住，Kubernetes
    资源（有时称为对象）可以是任何东西，从服务到入口控制器，再到 Pods。因此，有很多东西需要监控。
- en: Think about it from this perspective. You’re running a Pod that’s running a
    container inside of the Pod. The Pod itself is running great. The container image
    works, with no CPU or memory issues, and all of the events state that the Pod
    is up and running successfully. However, there’s a problem – the binary (the app
    entry point) running inside of the container may be down, or not working as expected.
    Because of this, you need a way to truly see even underneath the hood of a Pod
    itself!
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个角度思考。你正在运行一个 Pod，而该 Pod 内部运行着一个容器。Pod 本身运行得很好。容器镜像正常工作，没有 CPU 或内存问题，所有事件状态显示
    Pod 正在成功运行。然而，存在一个问题——容器内部运行的二进制文件（即应用程序入口点）可能已停止，或者没有按预期工作。因此，你需要一种方法来真正地深入了解
    Pod 本身的内部状态！
- en: As you’ve learned throughout this book, it doesn’t really matter where you’re
    running Kubernetes. The core components of how it runs and how you would interact
    with it are the same. That’s no different for monitoring. Because of that, this
    section of the chapter will show monitoring in AKS. However, as you’ll quickly
    see, it doesn’t matter whether these Pods are running in AKS or not. They would
    be looked at (monitored) the same way even if you use a different monitoring system.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在本书中学到的，无论你在哪里运行 Kubernetes，都不重要。它如何运行的核心组件以及你如何与它交互是相同的。监控也不例外。因此，本章的这一部分将展示在
    AKS 中的监控。然而，正如你很快会看到的，无论这些 Pods 是否在 AKS 中运行，都没有区别。即使你使用不同的监控系统，这些 Pods 的监控方式也是一样的。
- en: The code in this section, along with the demo app being deployed, can be used
    on any Kubernetes cluster.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的代码，以及正在部署的演示应用程序，可以在任何 Kubernetes 集群上使用。
- en: Monitoring Pods
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控 Pods
- en: Inside a Pod is either one or more containers. Whether it’s one container or
    multiple containers, the containers are what’s actually running an application.
    Perhaps it’s a core app, a logging software, or even something such as HashiCorp
    Vault or a service mesh proxy. These containers that are beside the main app are
    called sidecar containers. Because there are multiple containers running inside
    a Pod, you must ensure that each container is actually up and running as expected.
    Otherwise, the Pod itself may be running properly, and the main app may even be
    running properly, but the full workload, such as the sidecar containers, may not
    be.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Pod 内部可以是一个或多个容器。无论是一个容器还是多个容器，实际运行应用程序的是这些容器。也许它是一个核心应用程序，一个日志软件，甚至是像 HashiCorp
    Vault 或服务网格代理这样的东西。这些与主应用程序并列的容器被称为边车容器。由于一个 Pod 内可能运行多个容器，因此你必须确保每个容器都按预期正常运行。否则，Pod
    本身可能运行正常，主应用程序也许也在正常运行，但完整的工作负载（如边车容器）可能没有正常运行。
- en: 'First, ensure that the HashiCorp Consul Helm chart exists:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保 HashiCorp Consul Helm 图表存在：
- en: '[PRE19]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, create a new namespace called `consul`:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为 `consul` 的新命名空间：
- en: '[PRE20]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Once the `consul` namespace exists, deploy Consul to Kubernetes inside of the
    `consul` namespace:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`consul`命名空间存在，将 Consul 部署到 `consul` 命名空间中的 Kubernetes 内：
- en: '[PRE21]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The last step is to deploy the demo app and ensure that the annotation for
    injecting `consul` as a sidecar exists:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是部署演示应用，并确保存在用于注入 `consul` 作为 sidecar 的注解：
- en: '[PRE22]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'After deploying the app, you should see an output similar to the following
    screenshot:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 部署应用后，你应该能看到类似以下截图的输出：
- en: '![Figure 7.28 – Linkerd deployment'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.28 – Linkerd 部署'
- en: '](img/B19116_07_28.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_28.jpg)'
- en: Figure 7.28 – Linkerd deployment
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.28 – Linkerd 部署
- en: 'Log in to the Azure portal, go to your AKS cluster, and turn on Azure Insights
    if it’s not already on:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到 Azure 门户，进入你的 AKS 集群，并开启 Azure Insights（如果它尚未开启）：
- en: '![Figure 7.29 – Enabling container insights'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.29 – 启用容器 Insights'
- en: '](img/B19116_07_29.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_29.jpg)'
- en: Figure 7.29 – Enabling container insights
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.29 – 启用容器 Insights
- en: Once **Insights** is enabled, you should be able to see several resources available.
    Click on the **Controllers** button.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦**Insights**启用，你应该能够看到几个可用的资源。点击**Controllers**按钮。
- en: '![Figure 7.30 – The Controllers dashboard'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.30 – Controllers 仪表盘'
- en: '](img/B19116_07_30.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_30.jpg)'
- en: Figure 7.30 – The Controllers dashboard
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.30 – Controllers 仪表盘
- en: Looking at the **Controllers** dashboard, you can see all the Kubernetes resources
    running along with the status, uptime, and how many containers exist in each resource.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 **Controllers** 仪表盘，你可以看到所有正在运行的 Kubernetes 资源，及其状态、正常运行时间和每个资源中存在的容器数量。
- en: '![Figure 7.31 – The Kubernetes resources running'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.31 – Kubernetes 资源正在运行'
- en: '](img/B19116_07_31.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_31.jpg)'
- en: Figure 7.31 – The Kubernetes resources running
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.31 – Kubernetes 资源正在运行
- en: Drilling in a bit deeper, you can see that for each resource with more than
    one Pod, you’re able to see the different containers available.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 更深入地查看，你可以看到对于每个有多个 Pod 的资源，你可以查看不同的容器。
- en: '![Figure 7.32 – The resources in Pods'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.32 – Pods 中的资源'
- en: '](img/B19116_07_32.jpg)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_32.jpg)'
- en: Figure 7.32 – The resources in Pods
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.32 – Pods 中的资源
- en: 'But as always, things may go wrong. You can see in the following screenshot
    that there’s a Kubernetes resource running, but some of the containers aren’t
    running as expected:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 但和往常一样，事情可能会出错。你可以在以下截图中看到，Kubernetes 资源正在运行，但某些容器并未按预期运行：
- en: '![Figure 7.33 – The warning resource'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.33 – 警告资源'
- en: '](img/B19116_07_33.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_33.jpg)'
- en: Figure 7.33 – The warning resource
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.33 – 警告资源
- en: As you dive into it a bit deeper, you can see the status of the container is
    waiting to be created.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 当你深入挖掘时，你会看到容器的状态是等待创建。
- en: '![Figure 7.34 – The warning explanation'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.34 – 警告说明'
- en: '](img/B19116_07_34.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_07_34.jpg)'
- en: Figure 7.34 – The warning explanation
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.34 – 警告说明
- en: So, even though the Pod may be up and running, as in the application running
    inside of the container, other sidecar containers may not be. On the outside looking
    in, the app is up so it appears that everything is working as expected. However,
    after giving it a closer look, you can see that it’s not. This is the big difference
    between monitoring an app running on a server and a Pod. Within a Pod, there may
    be more than one binary to worry about.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，即使 Pod 可能已启动并运行，如容器中的应用程序运行，其他 sidecar 容器可能没有启动。从外部看，应用已经运行，所以看起来一切正常。然而，仔细查看后，你会发现其实并不是。
    这就是监控服务器上运行的应用与 Pod 之间的巨大区别。在一个 Pod 内，可能有多个二进制文件需要关注。
- en: Summary
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter covered a lot. It’s roughly 35 pages, and the thing is, these topics
    can be two or three books in themselves. Because of that, not everything was covered
    at the specific depth that’s most likely needed. However, the good news is that
    you now have a solid understanding of how to start thinking about implementing
    these platforms, technologies, and methodologies in production.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容涵盖了很多，约 35 页，实际上，这些话题本身可能会需要两三本书来详细讲解。由于这个原因，并不是所有内容都被覆盖到最可能需要的深度。然而，好消息是，你现在已经对如何开始在生产环境中实现这些平台、技术和方法有了坚实的理解。
- en: We went over quite a few topics in this chapter, covering what monitoring is,
    what observability is, and the overall differences between the two. You then dove
    into the specific tools and platforms available to make monitoring and observability
    come to life in your Kubernetes environment.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们讨论了很多话题，涵盖了监控是什么，观察性是什么，以及它们之间的总体区别。接着，你深入了解了使监控和观察性在 Kubernetes 环境中生效的具体工具和平台。
- en: In the next and final chapter, you’ll learn about security from a Kubernetes
    perspective.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，也是最后一章，你将学习从 Kubernetes 的角度看待安全性。
- en: Further reading
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Hands-On Kubernetes on Azure – Second Edition* by Nills Franssens, Shivakumar
    Gopalakrishnan, and Gunther Lenz: https://www.packtpub.com/product/hands-on-kubernetes-on-azure-second-edition/9781800209671'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Azure 上的 Kubernetes 实战 – 第二版* 作者：Nills Franssens, Shivakumar Gopalakrishnan
    和 Gunther Lenz: https://www.packtpub.com/product/hands-on-kubernetes-on-azure-second-edition/9781800209671'
- en: '*Hands-On Infrastructure Monitoring with Prometheus* by Joel Bastos and Pedro
    Araújo: [https://www.packtpub.com/product/hands-on-infrastructure-monitoring-with-prometheus/9781789612349](https://www.packtpub.com/product/hands-on-infrastructure-monitoring-with-prometheus/9781789612349)'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Prometheus 实战：基础设施监控* 作者：Joel Bastos 和 Pedro Araújo: [https://www.packtpub.com/product/hands-on-infrastructure-monitoring-with-prometheus/9781789612349](https://www.packtpub.com/product/hands-on-infrastructure-monitoring-with-prometheus/9781789612349)'
