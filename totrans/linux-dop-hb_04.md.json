["```\n#!/bin/bash\necho \"Hello world\"\n```", "```\n#!/usr/bin/env bash\n```", "```\nadmin@myhome:~$ bash ./myscript.sh\nHello world\nadmin@myhome:~$\n```", "```\nadmin@myhome:~$ chmod +x myscript.sh\nadmin@myhome:~$ ./myscript.sh\nHello world\nadmin@myhome:~$\n```", "```\ncommandA && commandB\n```", "```\ncommandA || commandB\n```", "```\nname=\"John\"\nwelcome_str=\"Hello ${name}\"\necho \"${welcome_str%John}Jack\"\n```", "```\nfor variable_name in other_variable; do some_commands; done\n```", "```\nfor variable_name; do some_commands; done\n```", "```\nfor (( var1 ; var2 ; var3 )); do some_commands; done\n```", "```\nfor ((i=1; i<=5; i++)); do echo $i; done\n```", "```\n1\n2\n3\n4\n5\n```", "```\nwhile some_command; do some_command; done\nuntil some_command; do some_command; done\n```", "```\nif test_command\nthen\n  executed_if_test_was_true\nfi\n```", "```\nif [[ -z \"$SOME_VAR\" ]]; then\n    echo \"Variable SOME_VAR is empty\"\nfi\n```", "```\nif [[ $variable == w* ]];\n    echo \"Starts with w\"\nfi\n```", "```\nif [[ $variable == \"w*\" ]];\n    echo \"String is literally 'w*'\"\nfi\n```", "```\nadmin@myhome:~$ touch run_backups.sh && chmod +x run_backups.sh\nadmin@myhome:~$ ls -l run_backups.sh\n-rwxr-xr-x  1 admin  admin  0 Dec  1 15:56 run_backups.sh\n```", "```\n#!/usr/bin/env bash\npg_dump mydatabase > mydatabase.sql\n```", "```\nadmin@myhome:~$ ./run_backups.sh\n```", "```\nadmin@myhome:~$ echo $PATH\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n```", "```\nadmin@myhome:~$ ./run_backups.sh\n./run_backups.sh: line 3: pg_dump: command not found\n```", "```\nadmin@myhome:~$ sudo apt-get update\nGet:1 http://archive.ubuntu.com/ubuntu jammy InRelease [270 kB]\n[Condensed for brevity]\nGet:18 http://archive.ubuntu.com/ubuntu jammy-backports/main amd64 Packages [3520 B]\nFetched 24.9 MB in 6s (4016 kB/s)\nReading package lists... Done\nadmin@myhome:~$ sudo apt-get install postgresql\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nThe following additional packages will be installed:\n  cron libbsd0 libcommon-sense-perl libedit2 libgdbm-compat4 libgdbm6 libicu70 libjson-perl libjson-xs-perl libldap-2.5-0 libldap-common libllvm14 libmd0 libperl5.34 libpopt0 libpq5 libreadline8\n[Condensed for brevity]\nSuggested packages:\n  anacron checksecurity default-mta | mail-transport-agent gdbm-l10n libsasl2-modules-gssapi-mit | libsasl2-modules-gssapi-heimdal libsasl2-modules-ldap libsasl2-modules-otp libsasl2-modules-sql\n[Condensed for brevity]\n0 upgraded, 42 newly installed, 0 to remove and 2 not upgraded.\nNeed to get 68.8 MB of archives.\nAfter this operation, 274 MB of additional disk space will be used.\nDo you want to continue? [Y/n] y\n```", "```\nlocal   all  postgres peer\n```", "```\nlocal   all  all  trust\n```", "```\nadmin@myhome:~$ sudo systemctl restart postgresql\n* Restarting PostgreSQL 14 database server\n```", "```\nadmin@myhome:~$ psql -U postgres postgres\npsql (14.5 (Ubuntu 14.5-0ubuntu0.22.04.1))\nType \"help\" for help.\npostgres=# \\l\n                              List of databases\n   Name    |  Owner   | Encoding | Collate |  Ctype  |   Access privileges\n-----------+----------+----------+---------+---------+-----------------------\n postgres  | postgres | UTF8     | C.UTF-8 | C.UTF-8 |\n template0 | postgres | UTF8     | C.UTF-8 | C.UTF-8 | =c/postgres          +\n           |          |          |         |         | postgres=CTc/postgres\n template1 | postgres | UTF8     | C.UTF-8 | C.UTF-8 | =c/postgres          +\n           |          |          |         |         |\npostgres=CTc/postgres\n(3 rows)\npostgres=# \\q\nadmin@myhome:~$\n```", "```\nadmin@myhome:~$ ./run_backups.sh\npg_dump: error: connection to server on socket \"/var/run/postgresql/.s.PGSQL.5432\" failed: FATAL:  role \"root\" does not exist\n```", "```\n#!/usr/bin/env bash\npg_dump -U postgres mydatabase > mydatabase.sql\n```", "```\nCREATE DATABASE mydatabase;\n\\c mydatabase\nCREATE TABLE random_data AS SELECT data_series, md5(random()::text) from generate_series(1,100000) data_series;\nCREATE TABLE another_random AS SELECT data_series, md5(random()::text) from generate_series(1,100000) data_series;\n```", "```\nSELECT data_series, md5(random()::text) from generate_series(1,100000) data_series;\n```", "```\nadmin@myhome:~$ psql -U postgres < create_db.sql\nCREATE DATABASE\nYou are now connected to database \"mydatabase\" as user \"postgres\".\n```", "```\nadmin@myhome:~$ psql (14.1)\nType \"help\" for help.\npostgres=# \\c mydatabase\nYou are now connected to database \"mydatabase\" as user \"postgres\".\nmydatabase=# \\dt\n             List of relations\n Schema |      Name      | Type  |  Owner\n--------+----------------+-------+----------\n public | another_random | table | postgres\n public | random_data    | table | postgres\n(2 rows)\nmydatabase=# select * from random_data ;\n data_series |               md5\n-------------+----------------------------------\n           1 | 4c250205e8f6d5396167ec69e3436d21\n           2 | a5d562ccd600b3c4c70149361d3ab307\n           3 | 7d363fac3c83d35733566672c765317f\n           4 | 2fd7d594e6d972698038f88d790e9a35\n--More--\n```", "```\nadmin@myhome:~$ ./run_backup.sh\nadmin@myhome:~$\n```", "```\nadmin@myhome:~$ ls -l mydatabase.sql\n-rw-r--r--    1 root     root      39978060 Dec 15 10:30 mydatabase.sql\n```", "```\nadmin@myhome:~$ head mydatabase.sql\n--\n-- PostgreSQL database dump\n--\n-- Dumped from database version 14.1\n-- Dumped by pg_dump version 14.1\nSET statement_timeout = 0;\nSET lock_timeout = 0;\nSET idle_in_transaction_session_timeout = 0;\n```", "```\n#!/usr/bin/env bash\nfunction run_dump() {\n  database_name=$1\n  pg_dump -U postgres $database_name > $database_name.sql\n}\nrun_dump mydatabase\n```", "```\nfor dbname in mydatabase mydatabase2 mydatabase3; do\n    run_dump $dbname\ndone\n```", "```\n#!/usr/bin/env bash\ndatabases=\"mydatabase\"\nfunction run_dump() {\n  database_name=$1\n  pg_dump -U postgres $database_name > $database_name.sql\n}\nfor database in $databases; do\n  run_dump \"$database\"\ndone\n```", "```\nset -o errexit\nset -e\n```", "```\n#!/usr/bin/env bash\nset -x\necho \"Hello!\"\n```", "```\nadmin@myhome:~$ ./simple_script.sh\n+ echo 'Hello!'\nHello!\n```", "```\n#!/usr/bin/env bash\nset -u\nset -o pipefail\nset -C\ndatabases=\"mydatabase\"\nfunction run_dump() {\n  database_name=$1\n  pg_dump -U postgres $database_name > $database_name.sql\n}\nfor database in $databases; do\n  run_dump \"$database\"\ndone\n```", "```\nadmin@myhome:~$ ./run_backups.sh\n./run_backups.sh: line 12: mydatabase.sql: cannot overwrite existing file\n```", "```\nadmin@myhome:~$ rm mydatabase.sql\nadmin@myhome:~$ bash -x ./run_backups.sh\n+ set -u\n+ set -o pipefail\n+ set -C\n+ databases=mydatabase\n+ for database in $databases\n+ run_dump mydatabase\n+ database_name=mydatabase\n+ pg_dump -U postgres mydatabase\n```", "```\nadmin@myhome:~$ date\nFri Dec 16 14:51:34 UTC 2022\n```", "```\nadmin@myhome:~$ date +\"%Y%m%d_%H%M\"\n20221216_1504\n```", "```\ntimestamp=$(date +\"%Y%m%d_%H%M\")\n```", "```\n#!/usr/bin/env bash\nset -u\nset -o pipefail\nset -C\ntimestamp=$(date +\"%Yum'd_%H%M\")\ndatabases=\"mydatabase\"\nfunction run_dump() {\n  database_name=\"$1\"\n  pg_dump -U postgres \"$database_name\" > \"${database_name}_${timestamp}\".sql\n}\nfor database in $databases; do\n  run_dump \"$database\"\ndone\n```", "```\nadmin@myhome:~$ find . -name \"mydatabase_*.sql\" -type f -mtime +14\n./mydatabase_20221107.sql\n```", "```\nadmin@myhome:~$ find . -name \"mydatabase_*.sql\" -type f -mtime +14 -delete\nadmin@myhome:~$ find . -name \"mydatabase_*.sql\" -type f -mtime +14 -exec rm -- {} \\;\n```", "```\n#!/usr/bin/env bash\nset -u\nset -o pipefail\nset -C\ntimestamp=$(date +\"%Y%m%d_%H%M\")\ndatabases=\"mydatabase\"\nfunction cleanup_old_backups() {\n  database_name=\"$1\"\n  find . -type f -name \"${database_name}_*.sql\" -mtime +14 -delete\n}\nfunction run_dump() {\n  database_name=\"$1\"\n  pg_dump -U postgres \"$database_name\" > \"${database_name}_${timestamp}\".sql\n}\nfor database in $databases; do\n  cleanup_old_backups \"$database\"\n  run_dump \"$database\"\ndone\n```"]