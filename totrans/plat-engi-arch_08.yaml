- en: <st c="0">8</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Cost Management and Best Practices</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="36">Cloud migration has been the top priority for many IT organizations
    in the past few years and is still a strategic, relevant direction for the coming
    years.</st> <st c="194">Running and owning one’s own data center is also still
    a valuable approach; the design and costs for one’s own data center capabilities
    are usually more thought through than with the cloud.</st> <st c="384">In this
    chapter, we are going to dig deeper into this and will reflect on the necessity
    of cloud cost management</st> <st c="497">and optimization.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: <st c="514">You will learn more about tagging strategies and why they are a
    viable resource for gaining visibility and transparency in your cloud spending.</st>
    <st c="659">We will also examine how to define them, best practices, and practical
    approaches to ensure they are well set.</st> <st c="770">With this as a foundation,
    we will move on to the four pillars of cost optimization:</st> *<st c="855">processes</st>*<st
    c="864">,</st> *<st c="866">pricing</st>*<st c="873">,</st> *<st c="875">usage</st>*<st
    c="880">,</st> <st c="882">and</st> *<st c="886">design</st>*<st c="892">.</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: <st c="893">To close this chapter, we share practical tips on how to optimize
    your platform and reduce your costs in the long run, as well as enabling you to
    provide cost-saving value to</st> <st c="1069">your users.</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1080">Overall, we will focus on effective cost management and how, as
    a platform engineer, you realize that.</st> <st c="1184">Here’s what you can expect</st>
    <st c="1211">to learn:</st>
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1220">Understanding the cost landscape—is the cloud the way</st> <st
    c="1275">to go?</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1281">Implementing a tagging strategy to uncover</st> <st c="1325">hidden
    costs</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1337">Looking at cost</st> <st c="1354">optimization strategies</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1377">Autoscaling, cold storage, and other tricks for</st> <st c="1426">cost
    optimization</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1443">Understanding the cost landscape – is the cloud the way to go?</st>
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1506">Cost management</st> <st c="1522">in platform engineering begins
    with a good understanding of cost drivers</st> <st c="1595">within your infrastructure
    and how some platform components might influence those.</st> <st c="1679">Cost
    drivers are also elements that directly impact the total cost of your operations.</st>
    <st c="1766">Understanding and later identifying these can help in making informed
    decisions to provide cost-oriented and</st> <st c="1875">optimized platforms</st><st
    c="1894">.</st>
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1895">To cloud or not to cloud – that’s the question</st>
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="1942">For the past few years, there has been almost no way around a cloud
    adoption strategy.</st> <st c="2030">During those years, the movement has faced
    counterweights from companies that have successfully de-migrated, claiming that
    their on-premise setup is cheaper, better, and all they need.</st> *<st c="2215">Repatriation</st>*
    <st c="2227">is what this is called.</st> <st c="2252">The numbers of those doing
    this are not very clear and strongly depend on what is considered part of it.</st>
    <st c="2357">It became very famous as</st> *<st c="2382">HEY/Basecamp/37signals</st>*<st
    c="2404">, and their CTO David Heinemeier Hansson stated that</st> *<st c="2457">they
    will save over $7m over the next 5 years</st>* <st c="2502">if they do not run
    on the cloud.</st> <st c="2536">A dead stupid side-by-side comparison of their
    purchased servers that cost them half a million dollars versus their insane yearly
    cloud spend of $1.9 million makes the math</st> <st c="2709">complete</st> *<st
    c="2718">[1]</st>*<st c="2721">.</st>
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2722">Sure—Basecamp or HEY is not comparable with an enterprise, is it?</st>
    <st c="2789">From my own experience, I can tell that running even larger companies’
    hardware in their own data center is cheaper than going to the cloud.</st> <st
    c="2930">A key factor is the amount of data and how dynamic and scalable the infrastructure
    has to be for it.</st> <st c="3031">Calculating data in petabytes will quickly
    turn the cloud into a money sink without an end.</st> <st c="3123">A relatively
    static workload will also drastically reduce the benefits that are included, and
    it has many other drawbacks.</st> <st c="3246">On the other hand, the cloud market
    is growing continuously every year, with no end in sight.</st> <st c="3340">So,
    to come to a decision on what is the right way to go, you have to consider many
    moving parts, from a simple cost comparison to available skills and the actual
    demand of your business.</st> <st c="3528">Doing a full assessment of whether
    the cloud makes sense for you can be a project in itself.</st> <st c="3621">But
    we wanted to give you some ideas on criteria to consider if you are at</st> <st
    c="3696">this point:</st>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="3707">Cost</st>**<st c="3712">: Evaluate initial CapEx or one-time
    costs for on-premise versus OpEx or continuous, subscription-like costs for cloud
    services, considering long-term financial impact but also that you will save the
    most money on cloud computing if you pay for 1 or 3 years upfront.</st> <st c="3980">This
    is almost like buying</st> <st c="4007">the hardware.</st>'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="4020">Scalability</st>**<st c="4032">: Assess your demand to scale
    resources dynamically in response to fast changes.</st> <st c="4114">A hint here:
    if the spikes are too fast, a static server might be better for the user experience
    than waiting for minutes until new</st> <st c="4246">instances start.</st>'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="4262">Reliability</st>**<st c="4274">: Evaluate uptime guarantees,
    redundancy, and failover capabilities to maintain continuous operations.</st>
    <st c="4378">Have a look at the history of outages.</st> <st c="4417">Some cloud
    providers frequently</st> <st c="4449">have issues.</st>'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="4461">Compliance</st>**<st c="4472">: Ensure adherence to legal and
    regulatory requirements, focusing on data residency and sovereignty.</st> <st
    c="4574">You have to sharpen your point of view on sovereignty before you can
    decide.</st> <st c="4651">Unfortunately, this term has more of a spectrum than
    a clear list</st> <st c="4717">of requirements.</st>'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="4733">Integration</st>**<st c="4745">: Ensure compatibility with existing
    systems and software, and availability of APIs and integration tools.</st> <st
    c="4853">The provider should support</st> **<st c="4881">infrastructure as code</st>**
    <st c="4903">(</st>**<st c="4905">IaC</st>**<st c="4908">), especially</st> <st
    c="4922">to programmatically create accounts, users,</st> <st c="4967">and permissions.</st>'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="4983">Support</st>**<st c="4991">: Assess the availability and</st>
    <st c="5022">quality of technical support, along with</st> **<st c="5063">service-level
    agreements</st>** <st c="5087">(</st>**<st c="5089">SLAs</st>**<st c="5093">).</st>
    <st c="5097">Conduct research on other users’ satisfaction with the given support;
    just because you have a contract that someone keeps your system up and helps you
    doesn’t mean that the service is</st> <st c="5281">also good.</st>'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="5291">Development of new services</st>**<st c="5319">: Evaluate the
    speed and number of new features the provider gives you.</st> <st c="5392">Consider
    that there can also be too many updates per month but also that there are barely
    any</st> <st c="5486">new features.</st>'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="5499">Geographic considerations</st>**<st c="5525">: Consider the
    proximity of data centers to end users and the regional availability of services.</st>
    <st c="5623">If your company develops globally</st> <st c="5656">available</st>
    **<st c="5667">software as a service</st>** <st c="5688">(</st>**<st c="5690">SaaS</st>**<st
    c="5694">), it might be easier to build on a public cloud than to integrate several</st>
    <st c="5770">regional providers.</st>'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="5789">Skill and expertise</st>**<st c="5809">: Evaluate the availability
    of skilled personnel and training requirements for managing the infrastructure.</st>
    <st c="5918">Consider that you still require practically anyone from any IT subject
    who can do that.</st> <st c="6006">What does a short-term plan look like?</st>
    <st c="6045">What is needed in the long run?</st> <st c="6077">Forget about cloud
    computing being easy; most enterprises struggle because they don’t get their</st>
    <st c="6173">teams educated.</st>'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="6188">Environmental impact and sustainability</st>**<st c="6228">:
    Consider the provider’s energy consumption, carbon footprint, and sustainability
    practices.</st> <st c="6323">How do they manage their wastewater?</st> <st c="6360">If
    they buy carbon offsets, keep in mind that you have to pay for them, as they theoretically
    increase</st> <st c="6463">electricity costs.</st>'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '<st c="6481">Cloud has often one very strong point: almost nothing hinders
    you from just starting right away.</st> <st c="6579">You can find tons of templates,
    blueprints, and examples.</st> <st c="6637">And within a short time, you are up
    and running, having your first environment available as</st> <st c="6729">a platf</st><st
    c="6736">orm.</st>'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6741">When we opt for the cloud – we have to consider its hidden costs</st>
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="6806">As we focus primarily</st> <st c="6829">on the cloud in this book,
    we will assume for now that those who go the bare-metal way have by nature a higher
    cost awareness</st> <st c="6955">and sensitivity.</st>
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6971">Cloud providers give us services</st> <st c="7004">on hand with
    a lot of</st> *<st c="7027">batteries included</st>*<st c="7045">. They often
    come with backup solutions, scalability,</st> **<st c="7099">high availability</st>**
    <st c="7116">(</st>**<st c="7118">HA</st>**<st c="7120">), and a centrally managed
    service.</st> <st c="7157">When planning the cloud infrastructure, most of the
    time, we will find hard facts and best guesses.</st> <st c="7257">Hard facts are
    information such as how many CPUs or servers are needed, which database should
    be used, whether it is a single node or HA, and so on.</st> <st c="7406">However,
    you should be aware that almost every option you take with a public cloud provider
    will have some</st> <st c="7513">cost impacts.</st>
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7526">Big cost drivers</st> <st c="7543">that commonly appear include</st>
    <st c="7573">the following:</st>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="7587">Load balancer</st>**<st c="7601">: They are</st> <st c="7612">required
    in almost every architecture, and the same goes for you.</st> <st c="7679">As
    explained earlier, we have possibilities to extend the app services from the Kubernetes
    namespace to the cloud and even control the network – a major</st> <st c="7832">cost
    trap.</st>'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="7842">API gateway</st>**<st c="7854">: The even</st> <st c="7866">more
    evil twin of the load balancer, applied as best practice, becomes very costly,
    especially for chatty systems and routing</st> <st c="7992">heavy communication.</st>'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="8012">Data</st>**<st c="8017">: In rest or in transit, data</st> <st
    c="8047">quickly becomes the biggest cost block in a cloud bill.</st> <st c="8104">While
    everything can be scaled up and down, your data has to</st> <st c="8165">live
    somewhere.</st>'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="8180">Backups and snapshots</st>**<st c="8202">: They are</st> <st
    c="8214">very much needed for a mature platform; you are required to have a very</st>
    <st c="8285">good backup strategy that is lean</st> <st c="8320">but reliable.</st>'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="8333">Scalable</st>** **<st c="8342">managed services</st>**<st c="8359">:
    If you’re</st> <st c="8371">using serverless, message streaming, or pre-trained
    AI models—anything that can scale infinitely—it’s crucial to set limits to avoid
    incurring</st> <st c="8515">unexpected costs.</st>'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8532">Ideal cloud projects—and we have to emphasize here that we are
    talking about things with a deadline—are strictly opinionated, following the best
    practices of the cloud provider.</st> <st c="8711">Almost every cloud project
    is not ideal, causing friction in the migration by custom implementations that
    are needed to somehow make the old world and the cloud provider able to work with
    each other.</st> <st c="8911">These hidden costs accrue through missing skills,
    because where should the required skills suddenly come from?</st> <st c="9022">Getting
    help from external skill providers would mean they have to understand you first
    before they can actually help you.</st> <st c="9145">However, most cloud projects
    would be called dead way earlier without</st> <st c="9215">external support.</st>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9232">In short, we can say that most services can turn against you cost-wise.</st>
    <st c="9305">As platform engineers, we have to be able to control these elements
    and create guardrails and limitations.</st> <st c="9412">To enable this, we need
    transparency</st> <st c="9448">about costs.</st>
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9461">Where to find transparency</st>
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="9488">Meanwhile, we have a zoo of possibilities for retrieving information
    about where we spend money and whether this is considered a waste based on metrics
    such as utilization.</st> <st c="9662">All cloud providers offer the possibility
    of exploring (and exploding) costs, but due to the focus on the infrastructure,
    details are missing, especially on the application layer.</st> <st c="9842">Looking
    at the following</st> <st c="9867">screenshot from AWS Cost Explorer, we get a
    consumption graph of different service types.</st> <st c="9957">We now would need
    to apply filters to gain more insights and analyze the roots of</st> <st c="10039">the
    costs:</st>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1: AWS Cost Explorer](img/B31164_08_01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: '<st c="10896">Figure 8.1: AWS Cost Explorer</st>'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10925">Commercial solutions such as Apptio Cloudability</st> <st c="10974">can
    gather costs from many different accounts, cloud providers, and environments in
    a single tool.</st> <st c="11074">They apply FinOps logic on top of the given
    data and come with predefined dashboards such as the unit costs and savings dashboard
    from the</st> <st c="11213">following screenshot:</st>
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2: Apptio Cloudability detailed dashboard on unit costs](img/B31164_08_02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
- en: '<st c="12363">Figure 8.2: Apptio Cloudability detailed dashboard on unit costs</st>'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="12427">Microsoft defines</st> <st c="12445">unit costs as follows: “</st>*<st
    c="12470">Measuring unit costs refers to the process of calculating the cost of
    a single unit of a business that can show the business value of the cloud.</st>*<st
    c="12615">” What a unit is exactly is up to you.</st> <st c="12655">It can be
    transactions in financial systems, users for a media platform, or anything else
    you can map different parts of the</st> <st c="12780">infrastructure to.</st>'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12798">Now, in our platform and open source world, we can also find solutions
    to gain more transparency, such as Kubecost (with commercial plans) and OpenCost.</st>
    <st c="12952">Both can allocate costs within a cluster and in combination with
    cloud provider resources.</st> <st c="13043">Unfortunately, both lack good analytics
    capabilities.</st> <st c="13097">That’s why we often see self-implemented solutions
    in combination</st> <st c="13163">with</st> **<st c="13168">business intelligence</st>**
    <st c="13189">(</st>**<st c="13191">BI</st>**<st c="13193">) tools, or Prometheus
    and Grafana implementations enriched with some cost data.</st> <st c="13275">How
    good those solutions are depends on the time and</st> <st c="13328">m</st><st
    c="13329">oney invested.</st>
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13343">FinOps and cost management</st>
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="13370">In recent years, FinOps has gained some</st> <st c="13411">popularity
    and is trying to differentiate itself from classic cost management.</st> <st c="13490">Cost
    management is often outlined as a short-term, siloed, single-purpose activity
    that should yield fast cost savings.</st> <st c="13610">When you, as a platform
    team, act cost-aware and actively manage your costs, this will also be a sustainable
    and long-lasting solution.</st> <st c="13746">But where FinOps succeeds is in
    its holistic approach, which includes procurement departments,</st> **<st c="13841">business
    units</st>** <st c="13855">(</st>**<st c="13857">BUs</st>**<st c="13860">), and</st>
    <st c="13868">finance departments, clearly targeting implementing an organizational
    understanding of cloud costs and</st> <st c="13971">their dynamics.</st>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13986">The following</st> <st c="14001">overview of the FinOps Framework
    shows that it follows a similar approach to what a platform engineering team is
    up to.</st> <st c="14121">We can see principles that need to be aligned with your
    principles; capabilities to be integrated and enabled, which will require your
    input; and personas—roles such as the platform engineer with whom they</st> <st
    c="14327">collaborate</st> *<st c="14339">[2]</st>*<st c="14342">:</st>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3: FinOps Framework by the FinOps Foundation](img/B31164_08_03.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: '<st c="15554">Figure 8.3: FinOps Framework by the FinOps Foundation</st>'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15607">As a platform team, you should collaborate with FinOps teams and
    actively manage their influence on your platform.</st> <st c="15723">Potential
    cost savings must be balanced against your principles, user satisfaction, and
    developer experience.</st> <st c="15833">Data-based recommendations require an
    architectural qualification and considering alternative options and proposals
    to realize</st> <st c="15960">cost savings.</st>
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15973">In the following section, we will discuss how to implement a tagging
    strategy.</st> <st c="16053">Tags are a simple solution for providing additional
    information to cloud and Kubernetes resources and creating some sort of transparency.</st>
    <st c="16191">Also, many cost management and FinOps tools require tags to deliver</st>
    <st c="16258">better insights.</st>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16275">Implementing a tagging strategy to uncover hidden costs</st>
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="16331">Tags</st> <st c="16336">and labels</st> <st c="16347">will most
    likely be nothing new to you as they are used in a wide range of tools, public
    cloud, and Kubernetes.</st> <st c="16460">We will use the word</st> *<st c="16481">tag</st>*
    <st c="16484">also to represent labels, but when using the word</st> *<st c="16535">labels</st>*<st
    c="16541">, we actually exclusively write about</st> <st c="16579">Kubernetes
    labels.</st>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16597">Applying and using tags can become an art in itself.</st> <st
    c="16651">If there are too many tags, it can become unclear what information they
    should attach to the service.</st> <st c="16753">Also, having no tags is obviously
    not helpful.</st> <st c="16800">In organizations with many different BUs and departments
    involved and complex release mechanisms, tags can become overloaded or just a
    collection of abbreviations.</st> <st c="16964">The point is that we need tags
    to gain transparency on services to whom they belong, maybe indicating different
    service levels or security classes and becoming in the end an anchor to match
    those services to cost structures and resource utilizations.</st> <st c="17215">So,
    tags allow a more precise analysis of cost-related resources</st> <st c="17280">and
    the</st> <st c="17288">cost cause.</st>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17299">Using tags for a purpose</st>
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="17324">Tags</st> <st c="17329">can target different target groups and
    users.</st> <st c="17376">Depending on which subdomain you are asking about, they
    should include organizational, operational, security, or even architectural information.</st>
    <st c="17521">We can also think about potentially helpful tags for us as</st>
    <st c="17580">platform engineers.</st>
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17599">Tags for organizational information can define which department,
    role, or team is responsible for the service, whether it is an internal- or external-facing
    solution, and whether there are any country, compliance, or</st> <st c="17817">governance
    restrictions.</st>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17841">Looking into the operational space, common attributes are service
    level, scheduling times, and maintenance windows but also very technical information
    that might be introduced by third-party tools; for example, via Cloud Custodian
    that implements certain cloud</st> <st c="18103">policies</st> *<st c="18112">[3]</st>*<st
    c="18115">.</st>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17841">在操作层面，常见的属性包括服务级别、调度时间和维护窗口，但也有一些可能由第三方工具引入的非常技术性的资讯；例如，通过实现特定云</st>
    <st c="18103">策略</st> *<st c="18112">[3]</st>*<st c="18115">。</st>
- en: <st c="18116">For domain-specific areas such as security or a platform team,
    we can think of tags and labels as defining a required isolation or data protection,
    or else like a typical scaling pattern, top and bottom spikes, or identification
    for a microservice architecture and its belonging to certain components and</st>
    <st c="18422">a structure.</st>
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18116">对于特定领域，如安全或平台团队，我们可以将标签和标签看作定义所需的隔离或数据保护，或者类似于典型的扩展模式、上下峰值，或识别微服务架构及其归属于某些组件和</st>
    <st c="18422">结构。</st>
- en: <st c="18434">Our focus will be on relevant cost</st> <st c="18470">tags.</st>
    <st c="18476">Those are often similar to organizational tags or related to the
    previously mentioned operational or domain-specific tags.</st> <st c="18599">Clarifying
    organizational belonging or providing insight into why something scales so drastically
    are key enablers for cost management.</st> <st c="18735">These tags help provide
    a clear view for projects and teams that have to raise</st> <st c="18814">cost
    awareness.</st>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18434">我们的重点将放在相关的成本</st> <st c="18470">标签上。</st> <st c="18476">这些标签通常与组织标签相似，或与前面提到的操作性或领域特定的标签相关。</st>
    <st c="18599">明确组织归属或提供有关某事为何如此剧烈扩展的见解是成本管理的关键推动因素。</st> <st c="18735">这些标签有助于为需要提升</st>
    <st c="18814">成本意识的项目和团队提供清晰的视图。</st>
- en: <st c="18829">Some sources also point out the use of tags for access management.</st>
    <st c="18897">This should be handled with care for several reasons.</st> <st c="18951">If
    you have</st> **<st c="18963">attribute-based access control</st>** <st c="18993">(</st>**<st
    c="18995">ABAC</st>**<st c="18999">) and rights</st> <st c="19012">management,
    tags can be a viable and simple approach to achieve that.</st> <st c="19083">This
    comes with the downside that you turn a pure information source into a security-critical
    element that requires it to be protected and double-checked when used.</st> <st
    c="19248">Mixing this with its information character might complicate the usage
    of tags and most likely will be a blocker for proper usage.</st> <st c="19378">We
    said before that tags can be used to carry security information.</st> <st c="19446">However,
    there is a difference between providing information such as risk classifications
    or security levels and an</st> <st c="19562">access-granting capability.</st>
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18829">一些来源还指出，使用标签进行访问管理。</st> <st c="18897">出于多种原因，这需要谨慎处理。</st> <st
    c="18951">如果你有</st> **<st c="18963">基于属性的访问控制</st>** <st c="18993">(</st>**<st
    c="18995">ABAC</st>**<st c="18999">) 和权限</st> <st c="19012">管理，标签可以成为实现这一目标的可行且简单的方式。</st>
    <st c="19083">但这也带来了一个缺点，即你将一个纯粹的信息源变成了一个安全关键元素，需要在使用时进行保护和双重检查。</st> <st c="19248">将其与信息特性混合使用可能会使标签的使用变得复杂，并且很可能会成为正确使用的障碍。</st>
    <st c="19378">我们之前说过，标签可以用来传递安全信息。</st> <st c="19446">然而，在提供诸如风险分类或安全级别等信息与提供</st>
    <st c="19562">访问授权能力</st> <st c="17841">方面，存在差异。</st>
- en: <st c="19589">Therefore, it is important to, as with our platform, define the
    purpose of why we want to do tagging.</st> <st c="19692">To randomly use and set
    tags as much as you can imagine can be better than nothing but can become problematic
    in the future when it is unclear if the tag i</st><st c="19847">s now critical</st>
    <st c="19863">or not.</st>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19589">因此，像我们的平台一样，定义标签的目的至关重要。</st> <st c="19692">随意地使用并设置标签虽然总比什么都不做好，但当标签是否重要变得不清晰时，未来可能会引发问题。</st>
- en: <st c="19870">Tag and label limitations</st>
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="19870">标签和标签限制</st>
- en: <st c="19896">Unfortunately, we have two</st> <st c="19924">widely</st> <st
    c="19931">appearing issues:</st>
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19896">不幸的是，我们遇到了两个</st> <st c="19924">普遍存在</st> <st c="19931">的问题：</st>
- en: <st c="19948">Tags don’t have a standard, which means there are many variations
    of their length, number of</st> <st c="20042">tags, allowed characters, or</st>
    <st c="20071">case sensitivity</st>
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="19948">标签没有标准，这意味着它们的长度、标签数量、允许的字符或</st> <st c="20042">大小写敏感性</st> <st
    c="20071">等存在很多变体。</st>
- en: <st c="20087">Organizations tend to have multiple environments across many different
    providers</st> <st c="20169">and platforms</st>
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20182">So, to define a tagging strategy in the next steps, you have to
    know the smallest number you can reliably build on.</st> <st c="20299">A tagging
    strategy will introduce a standard, which has to be applicable on any platform.</st>
    <st c="20389">Defining multiple different approaches per platform will lead to
    confusion</st> <st c="20464">and errors.</st>
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20475">As an example, we will</st> <st c="20499">compare different providers</st>
    <st c="20527">and platforms:</st>
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **<st c="20541">AWS</st>** | **<st c="20545">GCP</st>** | **<st c="20549">Kubernetes</st>**
    | **<st c="20560">Azure</st>** |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
- en: '| **<st c="20566">Maximum number of tags</st>** **<st c="20590">per service</st>**
    | <st c="20601">50</st> | <st c="20604">64</st> | <st c="20607">No</st> <st c="20611">limit
    specified</st> | <st c="20626">50</st> |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
- en: '| **<st c="20629">Max.</st> <st c="20635">characters tag</st>** **<st c="20650">name
    length</st>** | <st c="20661">128</st> | <st c="20665">63</st> | <st c="20668">63</st>
    | <st c="20671">512</st> |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
- en: '| **<st c="20675">Max.</st> <st c="20681">characters tag</st>** **<st c="20696">value
    length</st>** | <st c="20708">256</st> | <st c="20712">63</st> | <st c="20715">63</st>
    | <st c="20718">256</st> |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
- en: '| **<st c="20722">Special characters</st>** | <st c="20741">alphanumeric characters,
    blanks and + - = .</st> <st c="20786">_ : / @</st> | <st c="20793">alphanumeric
    characters, -</st> <st c="20821">and _</st> | <st c="20826">alphanumeric characters,
    - .</st> <st c="20856">_</st> | <st c="20857">alphanumeric characters, <, >, %,
    &, \, ?, /</st> <st c="20902">not allowed</st> |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
- en: '| **<st c="20913">Case sensitive</st>** | <st c="20928">Yes</st> | <st c="20932">Yes</st>
    | <st c="20936">Yes</st> | <st c="20940">Yes</st> |  |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
- en: '<st c="20944">Table 8.1: Tag limitations of cloud providers and Kubernetes</st>'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21005">While 63 characters</st> <st c="21026">as a common direction looks
    good, we have seen in the field that for many organizations, even 256 characters
    weren’t enough.</st> <st c="21151">This is just another example of why a tagging
    strategy must be</st> <st c="21214">thought through.</st>
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21230">Also, some structures don’t work across the different providers.</st>
    <st c="21296">Assuming our Financial One ACME company utilizes AWS and GCP, including
    its managed Kubernetes service for the platform, why does Financial One ACME go
    to the limit of the maximum allowed number of tags?</st> <st c="21500">The AWS
    team discovered this issue first and found out it can use longer tags and some
    special characters that allow a sort of nested structure.</st> <st c="21645">So,
    they started to combine different tags into one with the</st> <st c="21706">following
    outcome:</st>
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="21724">department-responsible=financial-one-ACME/domain-sales+marketing/stream-customer-management/squad-frontend/operations-squad-lazy-turtle</st>`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21860">The value has 112 characters and contains</st> `<st c="21903">/</st>`
    <st c="21904">to represent the hierarchical steps and</st> `<st c="21945">+</st>`
    <st c="21946">to represent</st> *<st c="21960">and</st>*<st c="21963">. The team
    is happy with the result and pushes this new tag to the shared repository.</st>
    <st c="22049">Sometime</st> <st c="22058">later, the platform team receives complaints
    that in the sales and marketing IT department, there is a problem with the</st>
    <st c="22177">deployments, and the newest releases aren’t getting rolled out due
    to</st> <st c="22248">some labels.</st>
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22260">Besides that, you will find other limitations such as the maximum
    number of tags per account</st> <st c="22354">or subscription</st><st c="22369">.</st>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22370">Defining a tagging strategy</st>
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="22398">As</st> <st c="22402">explained earlier, tags can have many different
    purposes; primarily, we have to balance between technical tags and business tags.</st>
    <st c="22532">Business tags can be categorized into organizational and cost tags.</st>
    <st c="22600">In the end, many tags tend to have overlapping information.</st>
    <st c="22660">Therefore, to find the right approach, it often makes sense to set
    some basic rules and boundaries for the definition.</st> <st c="22779">In the
    second step, you have to coordinate between operations, platform, and development
    to find the right set of needed tags from the technical side before moving on
    to set organizational tags.</st> <st c="22974">This direction makes sense because,
    often, required tags for operation also contain information about</st> <st c="23076">the
    organization.</st>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23093">Let’s start with some common</st> <st c="23123">ground rules:</st>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23136">Tag names and values</st> *<st c="23158">must</st>* <st c="23162">be
    shorter than</st> <st c="23179">63 characters.</st>
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23193">Tags can be</st> <st c="23206">only alphanumeric.</st>
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23224">Tags can only have</st> `<st c="23244">-</st>` <st c="23245">and</st>
    `<st c="23249">_</st>`<st c="23250">.</st>
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23251">Focus on tag value and its content as you usually filter and search</st>
    <st c="23320">for this.</st>
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23329">Tag names are more relevant for sorting</st> <st c="23370">and
    grouping.</st>
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23383">Don’t write</st> **<st c="23396">personally identifiable information</st>**
    <st c="23431">(</st>**<st c="23433">PII</st>**<st c="23436">) into</st> <st c="23443">a
    tag.</st>
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23450">Establish one case style.</st> <st c="23477">Businesses might
    prefer the Pascal style, while in tech, the kebab style is</st> <st c="23553">more
    common.</st>
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23565">It is better to use more tags than less, but try to keep 10%-20%
    of available</st> <st c="23644">tags free.</st>
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23654">Based on those rules, we can create the next relevant elements.</st>
    <st c="23719">First, we need to think about tagging categories for these to become
    more fine-grained than those we have discussed so far.</st> <st c="23843">A good
    practice is to think of the</st> <st c="23878">following categories:</st>
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23899">Ownership—departments, teams,</st> <st c="23930">organizations,
    streams.</st>
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="23953">Environment—whatever your staging</st> <st c="23988">environments
    are.</st>
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="24005">Project or product—project or product cluster to identify which
    components</st> <st c="24081">belong together.</st>
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="24097">Cost center—who is</st> <st c="24116">accountable for it?</st>
    <st c="24137">Are there any shared costs that come</st> <st c="24174">on top?</st>
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="24181">Compliance—regulatory restrictions and requirements, policies,
    and</st> <st c="24249">compliance rules.</st>
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="24266">Operational—life cycles, backups,</st> <st c="24301">maintenance
    windows.</st>
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="24321">From here, we have to work on a naming convention.</st> <st c="24373">As
    mentioned earlier, it’s important not to overload a single tag.</st> <st c="24440">Respecting
    the given rules and limitations and including the nature of many software and
    system components, a tag convention could look</st> <st c="24576">like this:</st>
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="24586">department=public-relations-content-management</st>`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="24633">owner=department-public-relations</st>`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="24667">data-classification=personal-identifiable-information</st>`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="24721">In some languages, it is preferred to follow a Pascal (</st>`<st
    c="24777">Hello-My-Name-Is-Pascal</st>`<st c="24801">) or camel style (</st>`<st
    c="24820">i-Am-A-Camel</st>`<st c="24833">).</st> <st c="24837">The style of writing
    everything in small letters is called the kebab style.</st> <st c="24913">You
    will have to define those patterns in a very clear way.</st> <st c="24973">How
    many characters should the name have and how many words?</st> <st c="25034">Is
    it more descriptive or just matching what’s been identified?</st> <st c="25098">The
    same counts for the value.</st> <st c="25129">Ensure that those conventions are
    documented, communicated, and included in the onboarding or training for</st>
    <st c="25236">your engineers.</st>
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25251">Now, the last step is to start building up a</st> *<st c="25297">tag
    catalog with these ground rules</st>*<st c="25332">. It is recommended to create
    those catalogs so that you have a space to describe the meaning, purpose, and
    addressed group of the tag.</st> <st c="25468">This also helps you to keep tags
    short, as you will not need to add more description to the tags’ value.</st> <st
    c="25573">The following table is a simple example of a tag catalog.</st> <st c="25631">It
    can be extended by the unique demands of the organization.</st> <st c="25693">It
    is important to offload into the catalog any information that you</st> <st c="25762">might
    also need to include in the tag but that makes it artificially long</st> <st c="25836">and
    unreadable:</st>
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '| <st c="25851">#</st> | <st c="25853">Tag Name</st> | <st c="25861">Expected
    Value</st> | <st c="25876">Meaning</st> | <st c="25884">Purpose</st> | <st c="25892">Tag
    Stakeholder</st> |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
- en: '| <st c="25908">1</st> | `<st c="25910">department</st>` | <st c="25920">Department
    handle or code; for</st> <st c="25952">example,</st> `<st c="25961">DE-22-P</st>`
    | <st c="25968">BU or the area the app</st> <st c="25992">belongs to</st> | <st
    c="26002">Clarify the owner of</st> <st c="26024">the application</st> | <st c="26039">Application</st>
    <st c="26052">owner; operations</st> |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
- en: '| <st c="26069">2</st> | `<st c="26071">application</st>` | <st c="26082">Application
    name; for</st> <st c="26105">example,</st> `<st c="26114">internal-cms</st>` |
    <st c="26126">Name of</st> <st c="26135">the application</st> | <st c="26150">Identify</st>
    <st c="26160">the application</st> | <st c="26175">Application owner;</st> <st
    c="26195">operations; architect</st> |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
- en: '| <st c="26216">3</st> | `<st c="26218">maintenance-allowed</st>` | <st c="26237">Day
    and time when maintenance can be executed; for</st> <st c="26289">example,</st>
    `<st c="26298">sunday-0800-1230</st>` | <st c="26314">The tag identifies the day
    or days as well as a timeframe written as</st> `<st c="26384">0800</st>`<st c="26388">,
    which means</st> <st c="26402">08:00 a.m.</st> | <st c="26412">Defines when the
    application can be turned down to update/patch or release a</st> <st c="26490">new
    version</st> | <st c="26501">Operations;</st> <st c="26514">first-level support</st>
    |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
- en: '<st c="26533">Table 8.2: Tag catalog example</st>'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26564">Tagging automation</st>
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="26583">It would be impossible</st> <st c="26607">to tag all resources
    manually, especially on an IDP with many moving components.</st> <st c="26688">Certain
    tools can help us tag resources automatically when they are created or even “patch”
    them afterward.</st> <st c="26796">As we have seen before, on the platform, we
    have to differentiate between the infrastructure the platform runs on and the
    user perspective of the workload they run on top or manage from</st> <st c="26982">the
    cluster.</st>
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26994">When you manage your infrastructure with tools such as Terraform/OpenTofu,
    you can tag components within your code</st> <st c="27110">as follows:</st>
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="27264">For a certain provider, you can even give the same tags to all
    resources.</st> <st c="27339">This should be handled with care as you don’t want
    to wrongly tag other resources, especially if those trigger third-party integrations
    or cause</st> <st c="27484">wrong billing:</st>
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="27616">Practically all IaC solutions provide this approach and can be
    adapted to any kind of infrastructure, cloud</st> <st c="27725">or on-prem.</st>
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27736">This can be done for Kubernetes resources, too.</st> <st c="27785">We
    will skip regular deployment files here, as those will most likely be handled
    differently, as with Helm.</st> <st c="27893">The following example shows how
    Helm takes the value for the labels from the Helm chart value file.</st> <st c="27993">Template</st>
    <st c="28001">values are dynamically created by a</st> `<st c="28038">_helper.tpl</st>`
    <st c="28049">templating file, while</st>`<st c="28072">.Release</st>` <st c="28080">values
    are built-in information.</st> <st c="28114">Another option is to read the values
    from a</st> `<st c="28158">values.yaml</st>` <st c="28169">file, which is provided
    by</st> <st c="28197">the user:</st>
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="28433">One strength of Helm is that we can combine this with a simple</st>
    `<st c="28497">if</st>` <st c="28499">statement.</st> <st c="28511">Through that,
    we can hand over a predefined set of information depending on where the deployment
    is going to be or based on any</st> <st c="28639">other trigger.</st>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28653">Note</st>
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28658">Utilize predefined labels in your Backstage templates to force
    your users to have some bare minimum of</st> <st c="28762">labels defined.</st>
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28777">Both</st> <st c="28782">approaches are heavily declarative and
    can fail in their adoption or being overseen.</st> <st c="28868">For sure, you
    can check the correct usage of labels in the CI/CD pipelines, but this might result
    in many deployments failing.</st> <st c="28995">This leads us to policy engines.</st>
    <st c="29028">On the one side, those can be used to test the deployments for labels,
    but a tool such as Kyverno</st> <st c="29125">can also add this information when
    needed.</st> <st c="29169">The following example of a Kyverno policy adds</st>
    `<st c="29216">foo=bar</st>` <st c="29223">labels to any Pod</st> <st c="29242">or
    service:</st>
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="29550">We can select and patch that information in a very fine-grained
    way, and it can be updated anytime later</st> <st c="29656">if neede</st><st c="29664">d.</st>
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29667">Consolidated versus separated cost and billing reports</st>
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="29722">Within many</st> <st c="29735">organizations, we see the demand
    for consolidated cost and billing reports.</st> <st c="29811">While that is, for
    the organization, on a higher level, the fastest way to understand the spending
    on infrastructure, it also requires many tags to ensure a proper split and level
    of detail.</st> <st c="30002">When organizations are growing too large, and the
    amount of business tags is larger than the technical tags, it is a clear sign
    that something went wrong.</st> <st c="30157">Being radical at this point, it
    then becomes an anti-pattern to do consolidated cost and billing reports.</st>
    <st c="30263">But what can we do, then?</st> <st c="30289">Enterprises, for example,
    often work with alphanumeric codes to identify departments.</st> <st c="30375">So,
    instead of a department being called</st> *<st c="30416">Finance and Accounting</st>*<st
    c="30438">, they may have something like</st> `<st c="30469">B-2-FA-4</st>`<st
    c="30477">. Such code is the perfect groundwork to eliminate many other organizational
    or business tags and place them into a matching table or database, in case you
    want to programmatically do this matching somewhere else.</st> <st c="30691">Other
    things to consider are, for example, the staging environments and the cluster.</st>
    <st c="30776">Most of the time, development, integration, and production systems
    are standalone.</st> <st c="30859">This means if your app is running on the</st>
    `<st c="30900">Manhattan</st>` <st c="30909">cluster, which could be translated
    to</st> `<st c="30948">prod-1234-eu</st>`<st c="30960">, then I don’t need another
    tag that says</st> `<st c="31002">stage=production</st>` <st c="31018">or</st>
    `<st c="31022">region=eu</st>`<st c="31031">. Just to be clear, you should limit
    yourself to not adding too much information into a</st> <st c="31119">single value.</st>
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31132">However, there is a big</st> *<st c="31157">but</st>* <st c="31160">in
    this story that leads us to the beginning of the topic.</st> <st c="31220">From
    a cost management perspective, you need to have many good tags so that you are
    able to do your analytics</st> <st c="31330">and research.</st>
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31343">Tags themself are not enough; they are a relevant part of the
    cost optimization, but which optimizations do you take?</st> <st c="31462">In
    the next section, we will look into general approaches for optimization strategies
    that are not only rightsizing and</st> <st c="31582">reducing infrastruct</st><st
    c="31602">ure.</st>
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31607">Looking at cost optimization strategies</st>
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="31647">The fastest approach to</st> <st c="31671">reduce cloud and platform
    costs is through shutting down what you don’t need.</st> <st c="31750">The biggest
    problem is that everyone involved in that process might have some reason why they
    require the infrastructure as it is.</st> <st c="31881">But I would like to turn
    your perspective on this topic from here onward:</st> *<st c="31955">Cost optimization
    is nothing that we should introduce afterward</st>*<st c="32018">. Here’s yet
    another principle you should consider:</st> *<st c="32070">Be cost-aware and effective,
    considering it in the design of</st>* *<st c="32131">the platform.</st>*
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32144">Note</st>
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32149">The more cost optimization potential can be found in a platform,
    the worse we have done in our job as platform engineers</st> <st c="32271">and
    architects.</st>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32286">We can leverage potential on any part of our platform.</st> <st
    c="32342">However, this could be a book in itself to cover all aspects of it.</st>
    <st c="32410">Therefore, we will cover principles that are applicable to any component
    within</st> <st c="32490">the plat</st><st c="32498">form.</st>
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32504">Streamlining processes</st>
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="32527">Processes, business and technical, can</st> <st c="32566">cause
    higher costs.</st> <st c="32587">I will give you an example of a pattern/anti-pattern
    that leads to unnecessary costs.</st> <st c="32673">The Kubernetes release is
    divided into three major releases, and every few weeks in between, you will get
    patches, bug fixes, and security patches.</st> <st c="32821">The Kubernetes release
    team automated a huge part of the release process, having nightly builds and running</st>
    *<st c="32929">all the time</st>* <st c="32941">several thousand tests on the
    Kubernetes infrastructure.</st> <st c="32999">When this approach was introduced,
    the community took it as the holy grail of the top tech companies.</st> <st c="33101">Suddenly
    everyone wanted to have nightly builds of their containers, often skipping the
    test part, which would be too</st> <st c="33219">much effort.</st>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33231">The downside of this approach is that most nightly builds never
    get deployed.</st> <st c="33310">It also prevents build servers from shutting
    down at night.</st> <st c="33370">The container registry is kept busy, including
    CVE scans, and the enterprise containers are usually more on the heavy side, raising
    transfer and storage costs.</st> <st c="33530">What most organizations didn’t
    understand was that Kubernetes is a global project.</st> <st c="33613">Also, if
    for someone it is night, somewhere else, there are people up and working on new
    features and pushing them to the Kubernetes repository.</st> <st c="33758">In
    the end, Kubernetes is one of the largest open source projects, initiated by Google,
    the largest</st> <st c="33858">digital-native company.</st>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33881">Think it through!</st>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33899">Just because everyone else does it, think twice as to whether
    it really</st> <st c="33972">makes sense!</st>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33984">Back to processes.</st> <st c="34004">Almost every process can
    be improved, as they are usually grown historically.</st> <st c="34082">Within
    the platform space, regular tools are introduced that replace scripts and own
    custom developed tooling.</st> <st c="34193">Better processes not only cut costs
    but can increase</st> <st c="34245">efficiency, reduce risks, minimize errors,
    and</st> <st c="34293">provide consistency.</st>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34313">Proven approaches for process optimization can be found in the</st>
    *<st c="34377">Lean</st>* <st c="34381">and</st> *<st c="34386">Six Sigma</st>*
    <st c="34395">methodologies.</st> <st c="34411">To improve a process, they teach
    you to do</st> <st c="34454">the following:</st>
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34468">Define/identify the problem of</st> <st c="34500">the process.</st>
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="34512">Measure the performance and time of</st> <st c="34549">the transaction.</st>
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="34565">Analyze the performance for inefficiencies</st> <st c="34609">and
    dependencies.</st>
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="34626">Improve the process to</st> <st c="34650">solve inefficiencies.</st>
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="34671">Control and review the new process by introducing</st> <st c="34722">canary
    deployments.</st>
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="34741">The fun part of platforms is that most processes can be found
    within CI/CD pipelines and GitOps implementations.</st> <st c="34855">Those translate
    our target into technical steps to ensure the desired state.</st> <st c="34932">Where
    it becomes complicated is when we have process dependencies within Kubernetes
    and components on top of it.</st> <st c="35045">As an eventually consistent event-driven
    system, it is a challenge to identify which dependencies are causing which behavior.</st>
    <st c="35171">Sometimes, we cannot change this component reaction without causing</st>
    <st c="35239">further impact.</st>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: <st c="35254">Processes in a technical world often sound like a bunch of scripts
    playing together.</st> <st c="35340">An ideal state is a cloud-native approach
    that utilizes the Kubernetes standardized API, controller</st> <st c="35440">capabilities,
    and resource definitions.</st> <st c="35480">It decouples different capabilities,
    and with those processes, makes them easier to optimize.</st> <st c="35574">Also,
    it makes it difficult to introduce new, historically grown</st> <st c="35639">proces</st><st
    c="35645">s trash.</st>
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: <st c="35654">Finding the best deals for the best prices</st>
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="35697">A</st> <st c="35699">straightforward way to optimize costs is
    to compare list prices and take the cheapest option.</st> *<st c="35794">Cheap</st>*
    <st c="35799">is thereby relative because you might cut down the performance,
    the throughput, the available IP addresses, and so on.</st> <st c="35919">Costs
    and utilization are good indicators but have to be evaluated for their second-tier
    impact.</st> <st c="36016">Reducing, for example, the instance size might reduce
    the throughput and performance, which causes you to have to introduce another
    instance.</st> <st c="36158">That way, you might utilize two instances for 80%-90%
    but you still pay the same or even more than if you ran a larger instance with</st>
    <st c="36291">fewer utilizations.</st>
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: <st c="36310">If you are not bound to a region, some regions are cheaper than
    others; even so, it has no large effect.</st> <st c="36416">A strong option at
    the moment is the utilization of ARM servers.</st> <st c="36481">If you are not
    able to run your own or users’ workload on it, at least introduce it for managed
    services such as databases.</st> <st c="36605">This can cut 20-30% or more</st>
    <st c="36633">of costs.</st>
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: <st c="36642">Those are very obvious steps.</st> <st c="36673">Find and identify
    the right resource that is not overprovisioned in the right region.</st> <st c="36759">And,
    as explained earlier, often you can achieve better cost performance when you keep
    things lean</st> <st c="36858">and clean.</st>
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: <st c="36868">There are many tools, such as Cloudability or Flexera, that can
    help you identify a cheaper option, and some even recommend changing architectures
    to reduce costs.</st> <st c="37033">These tools are extremely helpful to get started,
    but they often also come with a high price, and the knowledge coded into them
    is nothing you couldn’t gain through some research by yourself or attending free
    cost</st> <st c="37247">optimization</st> <st c="37259">classes.</st>
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37268">Designing for the highest utilization and lowest demands</st>
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="37325">As platform engineers cut</st> <st c="37351">down the infrastructure,
    it will</st> <st c="37385">most likely have an impact on the user experience.</st>
    <st c="37436">The more flexible your platform becomes, the better it can adjust
    to the given situation.</st> <st c="37526">You can introduce active components
    that declutter and reduce the size of the system where possible and educate your
    user about the possibilities to increase and decrease the workload as needed.</st>
    <st c="37721">Matching their utilization with the bill can motivate the user to
    take care of</st> <st c="37800">responsible usage.</st>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37818">Previously, you learned about the difficulties between many small
    nodes and a few larger ones.</st> <st c="37914">We also discovered that we can
    easily support different CPU architectures and allocate resources dynamically.</st>
    <st c="38024">All those elements play a role in the definition of the core of
    the platform.</st> <st c="38102">I always have in mind the picture of an ant colony.</st>
    <st c="38154">At their center, they have a lot of action going on, but the core
    is a stable construction containing the majority of ants in it.</st> <st c="38284">When
    the colony, aka our platform, grows, we will extend this part.</st> <st c="38352">But
    sometimes, we don’t know if it isn’t just temporary.</st> <st c="38409">Throughout
    the book, you have seen different ways to handle dynamic workloads, and in the
    following section, we show some best practices</st> <st c="38546">for scaling.</st>
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38558">So, what would be an ideal picture?</st> <st c="38595">Besides
    the aspect that it depends on your demands, the platform should utilize its resources
    as much as possible while having no overhead infrastructure.</st> <st c="38750">Simply
    said, it’s not easy to do as a platform.</st> <st c="38798">The workload is not
    within your hands and can be anything from static long-running resource-intensive
    software to thousands of serverless containers being continuously on the move.</st>
    <st c="38979">What we can take from this is that you can design the platform as</st>
    <st c="39045">well as you want; in the end, it all</st> <st c="39082">comes down
    to a continuous job of analyzing, reacting, and adjusting.</st> <st c="39152">With
    time, you can build a base layer of automatic reaction into the platform that
    will cover most cases, but you still will be required to work on</st> <st c="39300">the
    optimization.</st>
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39317">In the last part of this chapter, we take a look at some concrete
    examples of scaling and optimization.</st> <st c="39422">You will learn about
    reactive and predictive scaling as well as</st> <st c="39486">cost-aware</st>
    <st c="39496">engineering.</st>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39509">Autoscaling, cold storage, and other tricks for cost optimization</st>
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="39575">In</st> [*<st c="39579">Chapter 4</st>*](B31164_04.xhtml#_idTextAnchor201)<st
    c="39588">, in the</st> *<st c="39597">Autoscaling clusters and workloads</st>*
    <st c="39631">section, we already discussed a key benefit and</st> <st c="39679">core
    capability that comes with Kubernetes.</st> <st c="39724">Several different tools
    and mechanisms are built into K8s to scale, such as configuring ReplicaSets (the
    number of instances per workload we want) or using observability data to drive
    automated scaling</st> <st c="39925">decisions using</st> **<st c="39942">Horizontal
    Pod Autoscaler</st>** <st c="39967">(</st>**<st c="39969">HPA</st>**<st c="39972">),</st>
    **<st c="39976">Vertical Pod Autoscaler</st>** <st c="39999">(</st>**<st c="40001">VPA</st>**<st
    c="40004">), or</st> **<st c="40011">Kubernetes Event Driven Autoscaling</st>**
    <st c="40046">(</st>**<st c="40048">KEDA</st>**<st c="40052">).</st> <st c="40056">There
    is</st> <st c="40065">a great free tutorial that walks</st> <st c="40097">through
    all the different options to autoscale on Kubernetes provided by</st> *<st c="40171">Is
    It Observable</st>*<st c="40187">. Here is the YouTube tutorial link, which also
    contains links to the GitHub</st> <st c="40264">tutorial:</st> [<st c="40274">https://www.youtube.com/watch?v=qMP6tbKioLI</st>](https://www.youtube.com/watch?v=qMP6tbKioLI)<st
    c="40317">.</st>
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40318">The primary use case of autoscaling</st> <st c="40354">is to ensure
    that workloads have enough compute, memory, and storage to achieve certain availability
    goals.</st> <st c="40463">For our Financial One ACME company, this could mean
    that they use autoscaling to ensure that their financial transaction backend can
    handle 1,000 concurrent transactions to be processed within a 100 ms response
    time.</st> <st c="40680">While autoscaling can help us reach our availability
    objectives, it also comes with a price tag as scaling resources means somebody
    needs to pay for that extra compute (CPU) or memory.</st> <st c="40865">Improper
    autoscaling—scaling too much, never scaling down, or scaling at the wrong times—can
    also lead to unplanned cost explosions while not meeting the real objective</st>
    <st c="41034">of autoscaling!</st>
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="41049">Autoscaling done right</st>* <st c="41072">is what we want.</st>
    <st c="41090">Doing it right not only allows us to achieve our business and technical
    objectives but also allows us to leverage autoscaling to keep costs under control.</st>
    <st c="41245">Let’s have a look into several autoscaling topics platform engineers
    should be aware of and what else we can do to optimize costs.</st> <st c="41376">Be
    reminded that some of the practices we will discuss in the following sections
    are also applicable to any type of workl</st><st c="41497">oad: cloud</st> <st
    c="41509">or not.</st>'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41516">Many shades of autoscaling</st>
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="41543">The scalable nature of the cloud and Kubernetes as a core platform
    is a great capability to have at hand as platform engineers.</st> <st c="41672">There
    are, however, many different ways to scale.</st> <st c="41722">There are different
    trigger points that can cause a system to scale, plus, scaling must not just go
    in one direction (typically up) but we also have to consider scaling systems down—even
    all the way to zero to avoid wasting reso</st><st c="41950">urces</st> <st c="41957">for
    nothing!</st>
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41969">Scaling up – not only on CPU and memory</st>
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="42009">Most</st> <st c="42015">engineers are familiar with scaling based
    on CPU and memory.</st> <st c="42076">Most examples you will find for HPA typically
    scale the replicas of Pods based on a certain average CPU utilization of that
    Pod.</st> <st c="42205">That’s the most common way of what we also refer to as
    reactive scaling as we scale based on reacting to a</st> <st c="42312">reached
    threshold.</st>
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42330">However, scaling based on CPU or memory is not always the best
    option.</st> <st c="42402">It’s also not the only one we have, even though most
    scaling frameworks initially started with just scaling based on CPU and memory
    as those are the two key limits one can set on Pods</st> <st c="42586">or namespaces.</st>
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42600">For services that are optimized for a certain throughput, it would,
    for instance, make more sense to scale on concurrent incoming requests.</st> <st
    c="42741">Also, for the CPU, instead of scaling based on average CPU utilization,
    it could be better to scale your system when K8s starts to throttle the CPU for
    a Pod.</st> <st c="42900">In our previous chapter, we mentioned tools such as</st>
    <st c="42951">KEDA as well as the</st> **<st c="42972">Cloud Native Computing
    Foundation</st>** <st c="43005">(</st>**<st c="43007">CNCF</st>**<st c="43011">)
    Keptn project, which can provide any type of metric from various observability
    sources (Prometheus, Dynatrace, Datadog, New Relic) to be used for event-driven
    autoscaling.</st> <st c="43186">To see how this works, check out a full example
    in the Keptn</st> <st c="43246">documentation:</st> [<st c="43262">https://keptn.sh/stable/docs/use-cases/keda</st>](https://keptn.sh/stable/docs/use-cases/keda)<st
    c="43305">.</st>
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43306">The key takeaway is that not every workload is CPU- or memory-bound,
    and Kubernetes is not limiting you to just defining your scaling rules based on
    those two key attributes.</st> <st c="43482">Defining scaling rules based on what
    is really allowing your workload to execute more efficiently will also lead to
    more efficient resource utilization, which leads to a system that is also</st>
    <st c="43671">optimized</st> <st c="43682">for costs!</st>
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43692">Predictive versus reactive scaling</st>
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="43727">It is often assumed that</st> <st c="43753">autoscaling works
    instantly.</st> <st c="43782">But that’s not true!</st> <st c="43803">Think about
    Financial One ACME.</st> <st c="43835">If on paycheck day everyone wants to check
    their new account balance, this might mean a 10x spike in regular traffic within
    the first couple of hours of that day.</st> <st c="43998">The cloud vendor, however,
    cannot guarantee that all those resources are instantly available as you are competing
    with many other organizations that are also trying to request cloud resources
    at the same time.</st> <st c="44208">On top of that, the workload itself will
    not be able to process incoming requests instantly as many of those Pods have
    a certain startup time until they</st> <st c="44361">are ready.</st>
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: <st c="44371">This problem can be solved through predictive scaling.</st> <st
    c="44427">Compared to reactive scaling – which is scaling when we reach a certain
    threshold, as explained in the previous section – predictive scaling looks into
    a potential future situation and reacts to it before reaching a threshold.</st>
    <st c="44654">Predictive doesn’t mean we need a magic glass bowl to tell us the
    future.</st> <st c="44728">It can be as simple as starting the scaling a couple
    of hours before we anticipate a spike in traffic; for example, just ahead of paycheck
    day or ahead of a marketing campaign that starts at a</st> <st c="44921">specific
    time.</st>
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: <st c="44935">Other predictions can be</st> <st c="44961">more dynamic:</st>
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="44974">Seasonality</st>**<st c="44986">: One could be based on seasonality
    by looking at historical data.</st> <st c="45054">E-commerce is a good example
    where, throughout the year, you have certain dates that see a spike in load, such
    as Black Friday or Cyber Monday.</st> <st c="45198">It’s easy to</st> *<st c="45211">predict</st>*
    <st c="45218">those spikes!</st>'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="45232">Related data sources</st>**<st c="45253">: Another one could
    be to look into other data sources.</st> <st c="45310">Insurance organizations
    often look into severe weather data.</st> <st c="45371">When storms are predicted
    and there is a certain chance that those storms will cause damage, it makes sense
    to predictively scale services that those clients will use to submit insurance
    claims.</st> <st c="45566">For this particular scenario, you can even scale in
    specific regions that are closest to</st> <st c="45655">the storm.</st>'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="45665">System dependencies</st>**<st c="45685">: In complex systems,
    it is also an option to scale dependent</st> <st c="45747">components based on
    the load behavior of other parts of the system.</st> <st c="45816">Take hospitality
    as an example.</st> <st c="45848">If we see more people searching for flights
    as they want to get away on a long weekend, we may also predictively scale backend
    services that provide recommendations for hotels, cars, or additional events to
    book in</st> <st c="46063">the</st> <st c="46067">travel destination.</st>'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="46086">Use case – predictive storage scaling to optimize cost and availability</st>
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '<st c="46158">Now</st> <st c="46163">that we have learned about different approaches
    to predictive scaling, let’s apply this to a very costly</st> <st c="46268">example:
    storage!</st>'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: <st c="46285">Our digital systems are generating more data than ever, and it’s
    predicted that this trend will continue.</st> <st c="46392">Storage – while seemingly
    available in abundance – is a big cost factor for many organizations.</st> <st
    c="46488">The same is true for our Financial One ACME company, assuming we have
    to store all the details about every financial transaction our systems handle.</st>
    <st c="46637">As an organization, we need to make sure we can always persist all
    records, but we also want to make sure that we are not paying for storage space
    we currently don’t need.</st> <st c="46809">So, we want to keep our free disk
    space as small as possible to avoid having to pay for disks we don’t need.</st>
    <st c="46918">On the other hand, we also need to make sure we have enough disk
    free space in case a spike in transactions comes in as we cannot afford to be
    able to lose transactions.</st> <st c="47088">Considering that scaling disks at
    a large scale can’t happen instantly but may take a couple of hours, we can apply
    predictive storage scaling to fulfill all</st> <st c="47246">our requirements!</st>
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: <st c="47263">The following screenshot helps us understand how this works.</st>
    <st c="47325">It shows the disk free space % metric over time.</st> <st c="47374">The
    more data we write, the less disk free space is available.</st> <st c="47437">Instead
    of scaling our cloud storage on a certain fixed threshold, we can use a predictive
    model and scale when we predict that we will reach a certain low threshold within
    the timeframe it takes to scale – hence ensuring that we always have enough free
    disk space without paying for</st> <st c="47721">too much:</st>
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4: Predictive scaling of cloud storage to optimize for cost and
    availability](img/B31164_08_04.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: '<st c="47827">Figure 8.4: Predictive scaling of cloud storage to optimize for
    cost and availability</st>'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: <st c="47912">The</st> <st c="47917">preceding example is taken from a real
    use case that resulted in great cost savings by continuously rightsizing storage
    using a pred</st><st c="48049">ictive</st> <st c="48057">scaling approach!</st>
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48074">Scaling to zero – shutting things down when not needed</st>
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="48129">While many systems we</st> <st c="48151">operate need to be available
    24/7, some systems don’t have that requirement.</st> <st c="48229">These might
    be systems that are only used by employees during regular business hours or systems
    that are only needed to fulfill certain jobs during special times of the day,
    month, or year.</st> <st c="48419">I am sure we can all think about systems that
    are often sitting idle yet consuming precious resources and therefore causing
    costs even though they are currently</st> <st c="48580">not needed.</st>
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="48591">Virtual machines</st>** <st c="48608">(</st>**<st c="48610">VMs</st>**<st
    c="48613">) are great</st> <st c="48626">examples of scaling to zero.</st> <st
    c="48655">We have been doing this for many years to take snapshots, shut VMs down
    when not needed, and bring them up again when the work had to be continued.</st>
    <st c="48803">Many organizations fully automated this by automatically shutting
    down VMs that were used for daily business tasks at the end of the business day
    and bringing them up again the next morning.</st> <st c="48994">This alone is
    a great cost-saving opportunity as many VMs can be shut down during nights</st>
    <st c="49083">and weekends!</st>'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: <st c="49096">In Kubernetes, we also have the opportunity to scale workloads
    to zero.</st> <st c="49169">We could use the already discussed KEDA but also look
    into tools such as Knative (which can run serverless workloads) or</st> `<st c="49290">kube-green</st>`<st
    c="49300">. The latter was created to reduce the CO2 footprint of K8s workloads
    and clusters and is able to put workloads, nodes, or clusters to sleep when not
    needed.</st> <st c="49458">To learn more about</st> `<st c="49478">kube-green</st>`<st
    c="49488">, check out the following</st> <st c="49514">website:</st> [<st c="49523">https://kube-green.dev/</st>](https://kube-green.dev/)<st
    c="49546">.</st>
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="49547">A question we still need to answer is: Which workloads can be
    scaled to zero and for how long?</st> <st c="49643">We get this data from the
    owners of those workloads by specifying when and how long they need them.</st>
    <st c="49743">Another approach to this is simply using observability data to see
    which workloads are used at which times during the day and, based on that, create
    a</st> `<st c="49894">kube-green</st>` <st c="49904">sleep configuration to scale
    workloads to zero.</st> <st c="49953">An example of this implementation can be
    found in</st> *<st c="50003">The Sustainability workshop</st>* <st c="50030">from
    Henrik</st> <st c="50043">Rexed:</st> [<st c="50050">https://github.com/henrikrex</st><st
    c="50078">ed/Sustainability-workshop</st>](https://github.com/henrikrexed/Sustainability-workshop)<st
    c="50105">.</st>'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: <st c="50106">From scaling workloads to clusters</st>
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="50141">So far, we talked a lot about rightsizing or scaling workloads
    to ensure we have enough resources to meet our business objectives but also to
    not overprovision so that we can optimize</st> <st c="50326">on cost.</st>
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: <st c="50334">As we scale our workloads up and</st> <st c="50368">down, the
    underlying Kubernetes cluster also needs to be sized accordingly.</st> <st c="50444">This
    is where cluster autoscaling comes in, which will scale up a cluster’s nodes to
    ensure that enough resources are available to run all workloads, but which will
    also scale down nodes in case nodes are underutilized and workloads can be distributed
    across the remaining set of nodes.</st> <st c="50731">This ensures that the underlying
    cluster node machines are optimized, which in the end</st> <st c="50818">saves
    costs.</st>
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: <st c="50830">There is a lot of existing documentation on the Kubernetes documentation</st>
    <st c="50904">website:</st> [<st c="50913">https://kubernetes.io/docs/concepts/cluster-administration/cluster-autoscaling/</st>](https://kubernetes.io/docs/concepts/cluster-administration/cluster-autoscaling/)<st
    c="50992">.</st>
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: <st c="50993">There are specific autoscalers such as Karpenter – initially developed
    by AWS – that help right-scale a Kubernetes cluster but also keep costs in check.</st>
    <st c="51147">Karpenter integrates with the APIs of your cloud vendor and is able
    to provision the right size of nodes that are needed to handle a certain workload.</st>
    <st c="51298">It will also scale down nodes if no</st> <st c="51334">longer needed.</st>
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: <st c="51348">In addition to tools such as</st> `<st c="51378">kube-green</st>`
    <st c="51388">(mentioned earlier), Karpenter</st> <st c="51419">is a great option
    to scale your clusters while keeping costs in mind.</st> <st c="51490">To learn
    more about Karpenter, check</st> <st c="51527">out</st> [<st c="51531">https://karpenter.sh/</st>](https://karpenter.sh/)<st
    c="51552">.</st>
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: <st c="51553">As platform engineers, it’s</st> <st c="51582">important to be
    aware of all the different scaling options.</st> <st c="51642">Many of those can
    be set up to rightsize workloads and clusters.</st> <st c="51707">For some, it’s
    important to work closely with the engineering teams and workload owners to define
    scaling strategies that make sense for those specific workloads.</st> <st c="51870">Overall,
    autoscaling – whether it is compute, memory, or storage – is one of the key enablers
    of cost-e</st><st c="51973">fficient</st> <st c="51983">platform engineering!</st>
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: <st c="52004">Cost-aware engineering</st>
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="52027">Now that we have learned what we</st> <st c="52061">can build
    into our platforms to rightsize and autoscale to save costs, we also need to talk
    about what we can do to enable engineering teams to become more cost-aware from
    the start.</st> <st c="52244">The best cost optimization starts when anyone in
    an organization is aware of the cost impact their actions have and therefore starts
    building and designing systems that are more cost-efficient by default.</st> <st
    c="52449">Reporting on costs based on tagging is one way of making teams aware
    of their</st> <st c="52527">costs.</st> <st c="52534">This strategy has been discussed
    earlier in</st> <st c="52578">this chapter.</st>
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: <st c="52591">Let’s look into some additional options we think everyone should
    consider as they have the power to</st> <st c="52691">lead to</st> <st c="52700">cost-aware
    engineering!</st>
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: <st c="52723">The only request what you need approach</st>
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '<st c="52763">In the early days of the cloud, many organizations gave their
    engineering teams full access to cloud portals.</st> <st c="52874">This easy “self-service”
    boosted productivity as everyone could easily stand up new VMs, create new storage
    services, or even create Kubernetes clusters.</st> <st c="53028">This “wild wild
    west” approach, however, led to cost explosions for many organizations as users
    were just creating new services but not thinking about the basics, such as: How
    large a virtual environment do I really need and for how long do I</st> <st c="53271">need
    it?</st>'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: <st c="53279">One of the organizations that the authors have worked with is
    a financial organization.</st> <st c="53368">Instead of giving everyone full access
    to their cloud portals, they built their own self-service portal allowing engineering
    teams to create new VMs, databases, clusters, and so on.</st> <st c="53550">As
    part of that self-service portal, the team had to define for</st> *<st c="53614">which
    application</st>* <st c="53631">they needed the resource and for</st> *<st c="53665">which
    environment</st>*<st c="53682">, as well as</st> *<st c="53695">how long</st>*
    <st c="53703">this machine was needed; for example, only during business hours.</st>
    <st c="53770">The result was a 60% cost reduction as the provisioned services
    were automatically shut down when no longer needed.</st> <st c="53886">The following
    screenshot shows how engineers request resources for the time they need them.</st>
    <st c="53978">On the right, you also see the detailed reporting and overall optimization
    goal this organization</st> <st c="54076">is achieving:</st>
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5: A self-service platform that reports and reduces costs](img/B31164_08_05.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
- en: '<st c="54320">Figure 8.5: A self-service platform that reports and reduces
    costs</st>'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: <st c="54386">The reporting in this use case was not only done on costs but
    also on carbon impact, which is a big topic for most organizations these days.</st>
    <st c="54528">Providing this self-service through a central platform made it easy
    for this organization to make their engineers more cost-aware from the start and
    also show them the posi</st><st c="54700">tive impact their</st> <st c="54719">actions
    have.</st>
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: <st c="54732">Lease versus flat-rate resource</st>
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="54764">The previous example</st> <st c="54785">is great but requires
    teams to think upfront about exactly how long and when they need certain resources.</st>
    <st c="54892">A different approach to this would be to use a</st> **<st c="54939">lease
    model</st>**<st c="54950">. What does</st> <st c="54962">this mean?</st>
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: <st c="54972">When dev team A requests a resource – let’s say a Kubernetes cluster
    that they need for some development work – they can simply request it for a default
    time period; for example, 1 week.</st> <st c="55160">That 1-week timeframe becomes
    their “initial lease” of that resource.</st> <st c="55230">Both timeframe and
    team ownership will be managed through tags on that created resource.</st> <st
    c="55319">Through automation, 1 day prior to the end of the lease, emails or chat
    messages can be sent to teams reminding them that their lease is about to expire.</st>
    <st c="55473">The message can also give them the option to</st> *<st c="55518">extend
    the lease</st>* <st c="55534">for another day or week but also remind them about
    the cost that this extra time</st> <st c="55616">would incur.</st>
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: <st c="55628">This approach has been implemented in several organizations and
    ensures that any team can still get the resources they need via self-service.</st>
    <st c="55771">It also ensures that resources that are forgotten about or no longer
    needed will be shut down without having to specify</st> <st c="55890">upfront
    exactly how long a resource will</st> <st c="55932">be needed.</st>
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: <st c="55942">Now that we’ve talked about how to have resources running only
    when they are really needed to save on costs, let’s talk about how engineers can
    also optimize</st> <st c="56101">their code to make a</st> <st c="56122">cost
    impact!</st>
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: <st c="56134">Green engineering – optimizing your code</st>
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="56175">Efficient</st> <st c="56185">code typically not only executes
    faster; it typically also needs less CPU, memory, and potentially less disk storage
    or network bandwidth.</st> <st c="56325">Less of everything also means less costs.</st>
    <st c="56367">So, why doesn’t everyone just produce efficient code from</st> <st
    c="56425">the start?</st>
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: <st c="56435">Too often, engineers are under time pressure to deliver new features,
    or organizations haven’t invested in tools that test for and provide optimization
    recommendations as part of the software delivery life cycle.</st> <st c="56649">The
    authors have worked with many software organizations in the past and have identified
    a handful of very common patterns that result in inefficient and, therefore, costly
    code.</st> <st c="56828">Here are</st> <st c="56837">some examples:</st>
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="56851">Requesting too much data</st>**<st c="56876">: Instead of leveraging
    query languages to only request data needed for a certain operation, more data
    is retrieved and then filtered and processed in memory.</st> <st c="57036">This
    leads to more network traffic to transfer the data, more memory usage to store
    the data, and more CPU to iterate and filter in the</st> <st c="57172">client
    code.</st>'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="57184">Inefficient use of libraries or algorithms</st>**<st c="57227">:
    Many software libraries exist to get certain jobs done; for example,</st> **<st
    c="57299">Object Relational Mappers</st>** <st c="57324">(</st>**<st c="57326">ORMs</st>**<st
    c="57330">) to map data in databases to</st> <st c="57360">objects in a development
    language.</st> <st c="57396">Development teams unfortunately don’t always have
    the time to properly test or configure those libraries to optimize them for their
    specific use case.</st> <st c="57547">This, therefore, results in inefficient
    use, which leads to higher CPU, memory, network, and</st> <st c="57640">disk access.</st>'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="57652">Excessive logging</st>**<st c="57670">: Software engineers
    use logging frameworks to log information as their code executes.</st> <st c="57758">Logs
    are typically needed for analytics, diagnostics, and troubleshooting of failed
    or problematic code executions.</st> <st c="57874">Too often, though, logs are
    created excessively or duplicated without proper formatting or enough contextual
    information; for example, no log levels are set.</st> <st c="58032">This leads
    to overhead when logs are created but also overhead when those logs are ingested,
    transformed, and analyzed by</st> <st c="58154">observability platforms.</st>'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="58178">There are many more</st> <st c="58199">patterns in software engineering
    that lead to performance or scalability issues.</st> <st c="58280">Apart from
    detecting patterns, architectural reviews for applications can also lead to cost
    reduction through more efficient architectures or rewritten code.</st> <st c="58438">A
    prominent example is Amazon Prime Video, which dumped its AWS distributed serverless
    architecture and moved to what is described as a</st> *<st c="58574">monolith</st>*
    <st c="58582">for its video quality analysis, which reduced infrastructure costs
    by 90%</st> *<st c="58657">[4]</st>*<st c="58660">. Ultimately, those patterns
    also mean inefficient code execution, which results in higher costs.</st> <st
    c="58758">As platform engineering teams, we have the opportunity to analyze those
    patterns using modern observability tools and bring this information back to the
    engineers to remind them not only about the costs they incur with their code but
    also where they can start optimizing, as shown in the next screenshot.</st> <st
    c="59063">These two charts show how many logs are created per service and also
    highlight which logs do not have proper configurations; for example, no log</st>
    <st c="59208">levels set:</st>
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6: Providing teams with easy insights into patterns such as excessive
    logging](img/B31164_08_06.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
- en: '<st c="59585">Figure 8.6: Providing teams with easy insights into patterns
    such as excessive logging</st>'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: <st c="59671">This brings me to the last part of this section, which is the
    opportunity to educate engineers and make them cost-aware from</st> <st c="59796">the
    first line of code</st> <st c="59820">they write!</st>
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: <st c="59831">The education opportunity</st>
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="59857">While this may not</st> <st c="59876">stand out as a top role
    of a platform engineering team, as engineering teams use our platforms to deploy
    their applications as self-service , we can use that platform to also educate
    everyone about the cost impact they have when using the platform to get their
    software</st> <st c="60147">services deployed.</st>
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60165">In the previous sections, we already highlighted use cases such
    as sending cost and usage reports to engineering teams or identifying and highlighting
    inefficient code patterns.</st> <st c="60344">The key enabler to this is proper
    tagging (for example, who owns which part of the infrastructure and applications),
    as well as good observability (for example, which systems use how much CPU, memory,
    network, etc.).</st> <st c="60561">Having this information allows platform engineering
    teams to push this data to teams proactively and, with this, show them continuously
    what cost impact their applications have.</st> <st c="60739">Doing this continuously
    will also result in an educational effect that will lead to engineers having a
    better upfront understanding of</st> <st c="60874">the cost impact their</st>
    <st c="60896">actions have.</st>
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60909">Summary</st>
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="60917">In this chapter, you should have developed a sense of costs and
    had ideas on how you can address this topic on your platform.</st> <st c="61044">Good
    platforms provide transparency for their user and enable the use of flexible options
    to adjust their workload for different triggers.</st> <st c="61183">At this point,
    you should be able to combine the learned approaches from previous chapters, such
    as dynamic resource allocation with GPUs, to create high utilization and optimal</st>
    <st c="61361">cost allocation.</st>
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: <st c="61377">Remember that the cost perspective alone isn’t enough to reduce
    overall platform costs, as some reductions in server sizes might increase the
    demand on multiple small ones due to other limitations that cloud providers have.</st>
    <st c="61602">A tagging strategy builds the core for control and transparency.</st>
    <st c="61667">What sounds easy can end in many organizational discussions.</st>
    <st c="61728">To optimize your costs, you can also leverage other elements such
    as processes, and agree on long-term commitments to get better</st> <st c="61857">pricing
    deals.</st>
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: <st c="61871">Finally, we gave you some practical examples and best practices
    for your platform to include.</st> <st c="61966">We caught up on the different
    approaches of scaling and the difference between predictive and reactive scaling,
    and shone a light on other scaling factors besides CPU, such as memory</st> <st
    c="62149">and storage.</st>
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: <st c="62161">To summarize, when you think rationally and treat the money you
    spend on the platform like it is your own, then you can become very cost-efficient.</st>
    <st c="62310">As a platform engineering team, you could also develop a metric
    to define how efficient the platform is to be able to agree with your management
    on using this free budget for further investments and optimizations.</st> <st
    c="62524">Remember that even though the cloud gives us an</st> *<st c="62572">unlimited</st>*
    <st c="62581">amount of resources, we don’t have to take all of them just because
    they</st> <st c="62655">are there.</st>
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: <st c="62665">Let us head straight to our final chapter.</st> <st c="62709">As
    we already said earlier, the only consistency is inconstancy.</st> <st c="62774">In
    our last chapter, we will therefore talk about continuous change and how to survive
    it, considering lightweight architectures motivated by sustainable ideas and the
    golden path for changes.</st> <st c="62967">To close the chapter, we dare to take
    a look into the crystal ball and cover some technological trends that may or may
    not be</st><st c="63092">come relevant within the</st> <st c="63118">next years.</st>
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: <st c="63129">Further reading</st>
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="63145">[1] Why we left the cloud – David</st> <st c="63180">Heinemeier
    Hansson:</st>
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[<st c="63199">https://world.hey.com/dhh/we-have-left-the-cloud-251760fb</st>](https://world.hey.com/dhh/we-have-left-the-cloud-251760fb)'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[<st c="63257">https://world.hey.com/dhh/the-hardware-we-need-for-our-cloud-exit-has-arrived-99d66966</st>](https://world.hey.com/dhh/the-hardware-we-need-for-our-cloud-exit-has-arrived-99d66966)'
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="63344">[2] FinOps Framework high-resolution</st> <st c="63382">poster:</st>
    [<st c="63390">https://www.finops.org/wp-content/uploads/2024/03/FinOps-Framework-Poster-v4.pdf</st>](https://www.finops.org/wp-content/uploads/2024/03/FinOps-Framework-Poster-v4.pdf)
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="63470">[3] Cloud</st> <st c="63481">Custodian:</st> [<st c="63492">https://cloudcustodian.io/</st>](https://cloudcustodian.io/)
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="63518">[4] Prime Video cost</st> <st c="63540">optimization:</st> [<st
    c="63554">https://www.thestack.technology/amazon-prime-video-microservices-monolith/</st>](https://www.thestack.technology/amazon-prime-video-microservices-monolith/)
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
