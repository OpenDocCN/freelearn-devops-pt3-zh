- en: '[*Chapter 9*](B17124_09_Final_SK_ePub.xhtml#_idTextAnchor223): High Availability
    and Elasticity on AWS'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第 9 章*](B17124_09_Final_SK_ePub.xhtml#_idTextAnchor223)：AWS 上的高可用性与弹性'
- en: Most applications follow a design pattern that comprises several layers—such
    as the network layer, the compute layer, and the storage and database layers.
    We call this a multi-tier application. So, for example, you can have a three-tier
    application stack comprising a web services layer that offers frontend web interface
    access, an application layer where perhaps all data processing happens, and a
    backend database layer to store and manage data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序遵循一个设计模式，包含多个层次——例如网络层、计算层和存储与数据库层。我们称之为多层应用程序。例如，你可以拥有一个三层应用程序栈，其中包括提供前端
    Web 接口访问的 Web 服务层、一个可能进行所有数据处理的应用层以及一个用于存储和管理数据的后端数据库层。
- en: In this chapter, we start to bring together the various core **Amazon Web Services**
    (**AWS**) services we have learned about so far to design and architect a complete
    **end-to-end** (**E2E**) solution. Furthermore, in previous chapters, we have
    only deployed single resource instances of various AWS services—for example, a
    single **Elastic Compute Cloud** (**EC2**) instance to offer compute capability,
    or as in the previous chapter, where we deployed a single Amazon **Relational
    Database Service** (**RDS**) database instance in the public subnet of our **virtual
    private cloud** (**VPC**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始将迄今为止学习的各种核心**亚马逊网络服务**（**AWS**）整合在一起，设计和架构一个完整的**端到端**（**E2E**）解决方案。此外，在前几章中，我们只部署了各种
    AWS 服务的单个资源实例——例如，单个 **弹性计算云**（**EC2**）实例提供计算能力，或者在上一章中，我们在**虚拟私有云**（**VPC**）的公有子网中部署了单个亚马逊
    **关系数据库服务**（**RDS**）数据库实例。
- en: In real-world scenarios, you generally need to incorporate components that will
    help you achieve **high availability** (**HA**) and **scalability**. We can increase
    our application's availability by having more than one EC2 instance serving the
    same application or website. This way, if one of the EC2 instances fails, users
    can continue to access the services offered by being directed to other healthy
    EC2 instances in the fleet, and away from those that are unhealthy or in a failed
    state. We can also ensure that we place our EC2 instances across multiple **Availability
    Zones** (**AZs**), ensuring that if one AZ fails or just simply goes offline,
    users can be redirected to healthy EC2 instances in another AZ.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际场景中，通常需要集成一些组件，以帮助实现**高可用性**（**HA**）和**可扩展性**。我们可以通过让多个 EC2 实例为同一应用程序或网站提供服务来提高应用程序的可用性。这样，如果某个
    EC2 实例发生故障，用户仍然可以继续访问其他健康的 EC2 实例提供的服务，而不会受到故障或异常实例的影响。我们还可以确保将 EC2 实例分布在多个**可用区**（**AZs**）中，确保如果某个
    AZ 发生故障或仅仅下线，用户可以被重定向到另一个 AZ 中健康的 EC2 实例。
- en: Similarly, we need to offer solutions that are scalable. AWS offers services
    that are capable of automatically scaling out when required; for example, when
    we notice an increase in traffic, we can add more EC2 instances to cope with the
    load. On the flip side, the same AWS service can automatically scale in when demand
    drops, allowing us to save on the unnecessary expense of running underutilized
    servers in the cloud.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们需要提供可扩展的解决方案。AWS 提供了可以在需要时自动扩展的服务；例如，当我们注意到流量增加时，可以添加更多 EC2 实例来应对负载。反过来，当需求下降时，相同的
    AWS 服务也可以自动缩减规模，使我们能够节省因运行低负载服务器而产生的不必要费用。
- en: Finally, we also need to consider the global availability of our services. Many
    companies have global customers, and while many AWS services are designed for
    regional availability and scalability options, other AWS services can help us
    deliver global availability and even offer resilience against regional outages.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还需要考虑服务的全球可用性。许多公司有全球客户，尽管许多 AWS 服务是为区域性可用性和可扩展性选项设计的，但其他 AWS 服务可以帮助我们实现全球可用性，甚至提供针对区域性故障的韧性。
- en: 'In this chapter, we discuss the following key concepts:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下关键概念：
- en: Introduction to vertical and horizontal scaling concepts
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垂直和水平扩展概念简介
- en: Overview of the **Open Systems Interconnection** (**OSI**) model
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开放系统互联**（**OSI**）模型概述'
- en: Distributing web traffic with Amazon **Elastic Load Balancing** (**ELB**)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用亚马逊 **弹性负载均衡**（**ELB**）分配 Web 流量
- en: Implementing elasticity with AWS Auto Scaling
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AWS 自动扩展实现弹性
- en: Designing multi-Region HA solutions
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计多区域高可用性（HA）解决方案
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this chapter and the exercises within, you need to have access to
    your AWS account and be logged in as **Alice**, our **Identity and Access Management**
    (**IAM**) user (administrator) that we created in [*Chapter 4*](B17124_04_Final_SK_ePub.xhtml#_idTextAnchor068),
    *Identity and Access Management*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to vertical and horizontal scaling concepts
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you deploy a given EC2 instance in your VPC, you need to choose an instance
    type and one or more associated **Elastic Block Store** (**EBS**) (or instance
    store) volumes of specific sizes. Your EC2 instance will always need one root
    volume and one or more data volumes based on your application requirements.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: However, from time to time, you may need to upgrade your original configuration—
    perhaps you need more memory or more **central processing units** (**CPUs**) to
    cope with the load on your server. You may be running out of storage space and
    therefore need to increase the amount of storage on your EBS volumes. When upgrading
    to an instance of a higher specification, we call this **vertical scaling**. To
    perform most upgrades this way, you generally need to stop processing application
    requests, and most of the time, you may first need to shut the EC2 instance down.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: "The actual upgrade can take anything from a few minutes to a few hours, depending\
    \ on what you are upgrading. For example, upgrading the instance type usually\
    \ involves shutting down the server, modifying the instance type, and restarting\
    \ it again, as shown \Lin the following screenshot:"
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Changing EC2 instance type: vertical scaling'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_09_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.1 – Changing EC2 instance type: vertical scaling'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, you will select the drop-down arrow next to **Instance
    type** to select a higher-specification EC2 instance type. Once selected, simply
    click on **Apply** and start up the EC2 instance again. The EC2 instance is started
    with the upgraded specifications.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, you can also upgrade the storage volume attached to the server or
    attach additional volumes. You can modify existing volumes to increase the storage
    size or change the type of storage from **General Purpose SSD (gp2)** to **Provisioned
    IOPS (io1)**. When upgrading your storage, AWS needs to perform some optimization
    tasks, and this will take some time, depending on the size of the volume.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '**Vertical scaling** does have its limitations, however. It cannot offer HA;
    so, if there is a problem with the EC2 instance and it fails, you will need to
    provision a new EC2 instance as a replacement.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Rather than having a single EC2 instance host your application, you could consider
    hosting multiple EC2 instances with the same application offering. This way, if
    one EC2 instance fails, customers can be redirected to another EC2 instance that
    is in a healthy state.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Often, you need more than one EC2 instance participating as a fleet to cope
    with demand and offer HA in case of failures of any instance. AWS offers a service
    called Auto Scaling (which we look at in detail later in this chapter), which
    can automatically launch (or terminate) an EC2 instance to cope with load based
    on performance parameters such as average CPU utilization across a fleet of servers.
    This ability to then launch additional EC2 instances serving the same application
    is known as **horizontal scaling**.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你需要多个 EC2 实例参与集群，以应对需求并在任一实例发生故障时提供高可用性（HA）。AWS 提供了一项名为 Auto Scaling 的服务（我们将在本章稍后详细介绍），它可以根据性能参数（例如跨多个服务器的平均
    CPU 利用率）自动启动（或终止）EC2 实例，以应对负载。随后启动额外的 EC2 实例来提供相同应用程序的能力称为 **水平扩展**。
- en: With horizontal scaling, you can add more EC2 instances to your fleet when demand
    increases and terminate unnecessary instances when demand drops.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过水平扩展，当需求增加时，你可以向你的 EC2 集群中添加更多实例，而当需求减少时，你可以终止不必要的实例。
- en: This requires careful architectural design, as the application needs to be aware
    that it is being run from multiple EC2 instances. For example, if you have two
    copies of your WordPress blog running from two EC2 instances, content data is
    usually stored on the local storage attached to a single EC2 instance—in this
    case, the EBS volumes. If you remember from [*Chapter 7*](B17124_07_Final_SK_ePub.xhtml#_idTextAnchor157),
    *AWS Compute Services – EC2, Lightsail,* EBS volumes can only be attached to one
    EC2 instance at a time.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要仔细的架构设计，因为应用程序需要知道它正在由多个 EC2 实例运行。例如，如果你有两个 EC2 实例运行两个副本的 WordPress 博客，内容数据通常存储在附加到单个
    EC2 实例的本地存储中——在这种情况下，是 EBS 卷。如果你还记得 [*第 7 章*](B17124_07_Final_SK_ePub.xhtml#_idTextAnchor157)
    中的内容，*AWS 计算服务 – EC2、Lightsail*，EBS 卷一次只能附加到一个 EC2 实例。
- en: Important Note
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Amazon EBS Multi-Attach is a new feature that enables you to attach a single
    Provisioned IOPS SSD (io1 or io2) volume to multiple instances located in the
    same AZ. However, it has several limitations and does not necessarily replace
    the use case for **Elastic File System** (**EFS**) volumes. For additional information,
    refer to [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volumes-multi.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volumes-multi.html).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon EBS Multi-Attach 是一项新功能，它允许你将单个预配置的 IOPS SSD（io1 或 io2）卷附加到位于同一可用区（AZ）中的多个实例。但它有一些限制，并不一定取代
    **弹性文件系统**（**EFS**）卷的使用场景。有关更多信息，请参阅 [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volumes-multi.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volumes-multi.html)。
- en: 'This means that any blog articles you write will be stored on one EC2 instance,
    and the other EC2 instance running WordPress will not be aware of this content,
    resulting in inconsistencies between the two servers. One way to handle this is
    to offer some ability to share data between the EC2 instances, such as having
    the application data hosted on an EFS volume that can act as a file share for
    multiple EC2 instances. The WordPress application will also have to be configured
    to store all blog content and related media on this central EFS volume instead,
    as shown in the following diagram:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你写的任何博客文章将存储在一个 EC2 实例上，而运行 WordPress 的另一个 EC2 实例将无法访问这些内容，从而导致两个服务器之间的不一致。解决此问题的一种方法是提供一些在
    EC2 实例之间共享数据的能力，例如将应用数据托管在 EFS 卷上，EFS 卷可以作为多个 EC2 实例的文件共享。WordPress 应用还需要配置为将所有博客内容和相关媒体存储在这个中央的
    EFS 卷上，如下图所示：
- en: '![Figure 9.2 – Enabling horizontal scaling at the application layer'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.2 – 在应用层启用水平扩展'
- en: '](img/B17124_09_02.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_09_02.jpg)'
- en: Figure 9.2 – Enabling horizontal scaling at the application layer
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2 – 在应用层启用水平扩展
- en: In this section, we compared vertical scaling and horizontal scaling scalability
    options on AWS. Vertical scaling refers to an in-place upgrade to add more CPUs,
    memory, or storage. Vertical scaling does not offer any HA because if the EC2
    instance fails, you cannot fail over to another instance. Horizontal scaling is
    designed to add more nodes (compute or otherwise) to your fleet and can help reduce
    the overall load on an individual instance. With horizontal scaling, you can also
    offer HA so that if one node fails, traffic can be redirected to other healthy
    nodes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们比较了AWS上的垂直扩展和水平扩展选项。垂直扩展是指在现有系统上进行升级，添加更多的CPU、内存或存储。垂直扩展不提供任何高可用性（HA），因为如果EC2实例出现故障，无法切换到另一个实例。水平扩展旨在向你的计算集群中添加更多节点（计算或其他），有助于减少单个实例的整体负载。通过水平扩展，你还可以提供高可用性，这样如果某个节点出现故障，流量可以重新引导到其他健康的节点。
- en: Next, we introduce the **OSI model**, which is a reference model for how applications
    communicate over a network and how network traffic flows across from the physical
    layer of network cabling and Wi-Fi through to the application itself. Having a
    broad understanding of this reference model will help you appreciate and assist
    with troubleshooting communication issues between your applications across networks.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍**OSI模型**，它是一个关于应用程序如何通过网络通信，以及网络流量如何从物理层的网络电缆和Wi-Fi流动到应用程序本身的参考模型。对该参考模型有广泛的了解，将帮助你更好地理解和协助排查应用程序在网络间的通信问题。
- en: Overview of the OSI model
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OSI模型概述
- en: The flow and distribution of network traffic across various devices and applications
    are defined by a concept known as the **OSI model**. Published in 1984, this model
    provides a visual description of how network traffic flows over a particular network
    system
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 网络流量在各种设备和应用程序之间的流动和分配是通过一个名为**OSI模型**的概念来定义的。该模型于1984年发布，提供了网络流量如何在特定网络系统中流动的视觉描述。
- en: There are **seven** layers to the OSI model that flow from top to bottom, with
    layer 7 being at the top and layer 1 at the bottom. The OSI model is used as a
    reference point for various vendors to express which layer of network communication
    the product they are offering works on. This is because different hardware and
    software products operate at different layers.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: OSI模型有**七个**层级，流动从上至下，层级7位于最上层，层级1位于最下层。OSI模型作为一个参考点，被各种供应商用于表明他们提供的产品在哪一层的网络通信上工作。这是因为不同的硬件和软件产品在不同的层级上运行。
- en: The OSI model also assists in identifying network problems. When analyzing the
    source of any network issue, identifying whether only a single user is affected
    or whether a network segment or the entire network is down can help identify potential
    equipment or mediums that are experiencing the fault.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: OSI模型还帮助识别网络问题。在分析任何网络问题的源头时，确定是只有单个用户受到影响，还是网络段或整个网络发生故障，有助于识别可能出现故障的设备或媒介。
- en: 'The following diagram illustrates the seven layers of the OSI model:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了OSI模型的七个层级：
- en: '![Figure 9.3 – OSI model'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.3 – OSI模型'
- en: '](img/B17124_09_03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_09_03.jpg)'
- en: Figure 9.3 – OSI model
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3 – OSI模型
- en: In the next section, we look at ELBs, which form a crucial part of the overall
    design architecture for HA and horizontal scalability.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论ELB，它在高可用性（HA）和水平扩展的整体设计架构中起着至关重要的作用。
- en: Distributing web traffic with Amazon ELB
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Amazon ELB分发Web流量
- en: When you have more than one EC2 instance that works as part of a fleet hosting
    a given application, you need a mechanism in place to distribute traffic to those
    instances in a manner that spreads the load across the fleet. At a very basic
    level, this is what Amazon ELBs are designed to do. Amazon ELBs distribute traffic
    across multiple targets, which can be EC2 instances, containers, **Internet Protocol**
    (**IP**) addresses, and even Lambda functions. They can handle varying traffic
    for your application, evenly distributing the load across those registered targets
    either in a single AZ or across multiple AZs within a given Region. This also
    means that ELBs can assist in designing architecture that offers HA and fault
    tolerance, as well as working with services such as Auto Scaling to deliver automatic
    scalability features to your applications. Note, however, that ELBs are regional-based
    only, so you cannot use an ELB to distribute traffic across Regions.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当您有多个 EC2 实例作为托管某个应用程序的一个实例池时，您需要一个机制来将流量分配到这些实例上，以便在实例池中分担负载。从最基本的层面来看，这正是亚马逊
    ELB 的设计目标。亚马逊 ELB 将流量分配到多个目标，这些目标可以是 EC2 实例、容器、**互联网协议**（**IP**）地址，甚至是 Lambda
    函数。它们可以处理应用程序的变化流量，将负载均匀地分配到这些注册的目标上，无论是在单个 AZ 还是跨多个 AZ 的给定区域内。这也意味着 ELB 可以帮助设计具有高可用性（HA）和容错性的架构，并与像自动扩展（Auto
    Scaling）这样的服务协同工作，为您的应用程序提供自动扩展功能。然而，请注意，ELB 仅限于区域级别，因此不能使用 ELB 跨区域分配流量。
- en: Load balancers and VPCs
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 负载均衡器与 VPC
- en: Amazon load balancers are designed to work with your VPC. AWS recommends you
    enable more than one AZ for your load balancer. Amazon **Elastic Load Balancing**
    (**ELB**) then creates **load balancer nodes** in the AZs you specify. The load
    balancer then distributes traffic to its nodes across the AZs. Its nodes then
    connect to the targets in the relevant AZs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊负载均衡器设计用于与您的 VPC 一起工作。AWS 推荐为负载均衡器启用多个 AZ。然后，亚马逊**弹性负载均衡**（**ELB**）会在您指定的
    AZ 中创建**负载均衡器节点**。负载均衡器将流量分发到其节点，并通过 AZ 跨节点进行分配。节点随后会连接到相关 AZ 中的目标。
- en: 'An important point to note here is that your internet-based clients need to
    only connect to the load balancer, which then distributes traffic to targets in
    your VPC. This means you no longer need to place any targets such as EC2 instances
    in the public subnet unless you have a specific reason to do so. You can place
    your web servers, for instance, in a private subnet, and because they are registered
    to the load balancer, traffic will be routed to them. Furthermore, this also means
    that your web servers can function with just private IP addresses, reducing the
    overall attack surface by not having any public IP addresses, as depicted in the
    following diagram:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的一个重要点是，您的基于互联网的客户端只需连接到负载均衡器，负载均衡器会将流量分发到 VPC 中的目标。这意味着除非有特定的理由，您不再需要将任何目标（如
    EC2 实例）放置在公有子网中。您可以将 web 服务器放置在私有子网中，并且由于它们已注册到负载均衡器，流量将被路由到它们。此外，这也意味着您的 web
    服务器可以仅使用私有 IP 地址工作，减少了整体的攻击面，因为没有任何公有 IP 地址，正如下面的图所示：
- en: '![Figure 9.4 – Amazon ELB VPC configuration'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.4 – 亚马逊 ELB VPC 配置'
- en: '](img/B17124_09_04.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_09_04.jpg)'
- en: Figure 9.4 – Amazon ELB VPC configuration
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4 – 亚马逊 ELB VPC 配置
- en: As seen in the preceding diagram, the web servers will receive traffic from
    the **Application Load Balancer** (**ALB**) (we look at the types of load balancers
    next). The ALB will distribute this traffic using the default round-robin method
    based on the number of AZs enabled for the load balancer.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，web 服务器将从**应用程序负载均衡器**（**ALB**）接收流量（我们接下来会讨论负载均衡器的类型）。ALB 将根据为负载均衡器启用的可用区（AZ）的数量，使用默认的轮询方法分配流量。
- en: 'In addition, when you create a load balancer, you need to specify whether you
    are creating an *internet-facing* load balancer or an *internal* load balancer.
    These are outlined in more detail here:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当您创建负载均衡器时，您需要指定是创建*面向互联网的*负载均衡器还是*内部*负载均衡器。这里会有更详细的说明：
- en: '**Internet-facing load balancer**—This has a publicly resolvable **Domain Name
    System** (**DNS**) name, enabling it to route requests from internet-based clients.
    The DNS name resolves client requests to public IP addresses of the load balancer
    nodes for your load balancer. In the preceding diagram, we can see an example
    of an internet-facing load balancer that accepts traffic from clients on the internet.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面向互联网的负载均衡器**—它具有一个可以公开解析的 **域名系统**（**DNS**）名称，使其能够路由来自基于互联网的客户端的请求。DNS 名称将客户端请求解析到负载均衡器节点的公共
    IP 地址。在前面的图中，我们可以看到一个面向互联网的负载均衡器示例，它接受来自互联网客户端的流量。'
- en: '**Internal load balancer**—The nodes of an internal load balancer only have
    private IP addresses, and its DNS name is resolvable to the private IPs of the
    nodes. This means that internal load balancers can only route requests from clients
    that already have access to the VPC.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内部负载均衡器**—内部负载均衡器的节点只有私有 IP 地址，其 DNS 名称可解析为节点的私有 IP 地址。这意味着内部负载均衡器只能路由来自已访问
    VPC 的客户端的请求。'
- en: 'Internal load balancers are particularly useful when you are designing a multi-tier
    application stack—for example, when you have multiple web servers that receive
    traffic from your internet-based clients and then need to send on that traffic
    for processing to application or database servers distributed across multiple
    AZs in private subnets, via another load balancer. In this case, the web servers
    would be registered against the internet-facing load balancers and the application/database
    servers would be registered against the internal load balancers, as depicted in
    the following diagram:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 内部负载均衡器在设计多层应用程序架构时特别有用—例如，当您有多个 Web 服务器接收来自互联网客户端的流量，然后需要通过另一个负载均衡器将流量发送给分布在多个
    AZ 中的私有子网中的应用程序或数据库服务器进行处理时。在这种情况下，Web 服务器将注册到面向互联网的负载均衡器，而应用程序/数据库服务器将注册到内部负载均衡器，如下图所示：
- en: '![Figure 9.5 – Internal versus internet-facing ELBs'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.5 – 内部与面向互联网的 ELBs'
- en: '](img/B17124_09_05.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_09_05.jpg)'
- en: Figure 9.5 – Internal versus internet-facing ELBs
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5 – 内部与面向互联网的 ELBs
- en: Another important point to note is that for traffic to be accepted by an ELB,
    you need to configure security groups, specifying inbound rules that the port,
    protocol, and source of the traffic for that load balancer can accept. In addition,
    the security groups associated with your targets must also be configured to allow
    inbound traffic from the load balancers. You can usually do this by specifying
    the source of the traffic as being the security group associated with the load
    balancer itself.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要注意的重要点是，为了让 ELB 接受流量，您需要配置安全组，指定负载均衡器可以接受的流量的端口、协议和源的入站规则。此外，目标关联的安全组也必须配置为允许来自负载均衡器的入站流量。通常，您可以通过将流量源指定为与负载均衡器本身关联的安全组来实现这一点。
- en: 'Amazon offers four types of ELBs, as listed here:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon 提供了四种类型的 ELB，如下所示：
- en: ALB
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ALB
- en: '**Network Load Balancer** (**NLB**)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络负载均衡器**（**NLB**）'
- en: '**Gateway Load Balancer** (**GWLB**)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网关负载均衡器**（**GWLB**）'
- en: '**Classic Load Balancer** (**CLB**)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**经典负载均衡器**（**CLB**）'
- en: Let's look at these individually in some detail next.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们分别详细了解这些。
- en: ALB
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ALB
- en: We will start with the Amazon **ALB**, which is the most common type of load
    balancer to use for most applications. ALBs are designed to act as a single entry
    point for clients to connect to your applications running on targets such as a
    fleet of EC2 instances. It is recommended that your EC2 instances are based across
    multiple AZs, increasing the overall availability of your application in the case
    of a single AZ failure.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 Amazon **ALB** 开始，这是大多数应用程序常用的负载均衡器类型。ALB 设计用于作为客户端连接到运行在目标上的应用程序的单一入口点，例如一组
    EC2 实例。建议您的 EC2 实例分布在多个可用区（AZ）中，以提高在单一 AZ 故障时应用程序的整体可用性。
- en: ALBs are designed to distribute traffic at the application layer (using **HyperText
    Transfer Protocol** (**HTTP**) and **HTTP Secure** (**HTTPS**)). The application
    aayer is also known as the *seventh layer of the OSI model*. ALBs are therefore
    ideal for ensuring an even distribution of traffic to your web applications across
    the internet.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: ALB 设计用于在应用层分发流量（使用 **超文本传输协议**（**HTTP**）和 **安全超文本传输协议**（**HTTPS**））。应用层也被称为
    OSI 模型的*第七层*。因此，ALB 非常适合确保在互联网上均匀分配流量到您的 Web 应用程序。
- en: 'Some key benefits of ALBs include the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: ALB 的一些关键优势包括以下几点：
- en: Support for path-based routing, allowing you to forward requests based on the
    **Uniform Resource Locator** (**URL**) in the request
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持基于路径的路由，允许你根据请求中的 **统一资源定位符**（**URL**）转发请求
- en: Support for host-based routing, allowing you to forward requests based on the
    URL in the request
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持基于主机的路由，允许你根据请求中的 URL 转发请求
- en: Support for routing requests to multiple applications on a single EC2 instance
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持将请求路由到单个 EC2 实例上的多个应用程序
- en: Support for registering Lambda functions as targets, as well as containerized
    applications, and much more
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持将 Lambda 函数注册为目标，以及容器化应用程序等
- en: An ALB has a configuration component called a **listener**. This listener service
    allows you to define rules on how the load balancer will route requests from clients
    to registered targets. These rules consist of a priority, actions, and any conditions
    that once met will enable the action to be performed. Your listener should have
    at least one default rule, and you can have additional rules. These rules also
    define which protocol and port to use to connect to your targets.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: ALB 有一个配置组件，称为**监听器**。该监听器服务允许你定义负载均衡器如何将来自客户端的请求路由到注册的目标。这些规则由优先级、动作以及任何满足条件后会执行动作的条件组成。你的监听器应该至少有一个默认规则，且你可以拥有更多的附加规则。这些规则还定义了连接到目标时应使用的协议和端口。
- en: When configuring an ALB, you also need to configure one or more `www.mycompany.com`)
    and another target group contains targets that host the actual e-commerce portion
    of your website (for example, `shop.mycompany.com`). Another feature of ALBs is
    that you can also register a target with multiple target groups.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 ALB 时，你还需要配置一个或多个 `www.mycompany.com`）以及另一个目标组，该目标组包含托管你网站实际电子商务部分的目标（例如，`shop.mycompany.com`）。ALB
    的另一个特性是，你还可以将一个目标注册到多个目标组中。
- en: 'This approach allows you to better manage traffic to your website and use different
    targets to ensure better performance and management. As an example, if your e-commerce
    portion is having a major upgrade that will take that portion of the site down
    for a few hours, users can still visit the corporate portion of your website to
    access the latest information or services offered, as illustrated in the following
    diagram:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法使你能够更好地管理网站流量，并使用不同的目标确保更好的性能和管理。例如，如果你的电子商务部分正在进行一次重大升级，导致该部分网站暂时无法使用，用户仍然可以访问你网站的公司部分，查看最新的信息或服务，如下图所示：
- en: '![Figure 9.6 – AWS ALB with multiple listener rules'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.6 – AWS ALB 多个监听规则'
- en: '](img/B17124_09_06.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_09_06.jpg)'
- en: Figure 9.6 – AWS ALB with multiple listener rules
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6 – AWS ALB 多个监听规则
- en: In the preceding diagram, you will note that we have three target groups, and
    one target is part of two groups. **Target Group 1** could be our primary corporate
    web pages, whereas **Target Group 3** could be our e-commerce site. Each listener
    will also contain a default rule, and the listener on the right contains an additional
    rule that routes requests to another group.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图示中，你会注意到我们有三个目标组，其中一个目标属于两个组。**目标组 1** 可以是我们的主要公司网页，而 **目标组 3** 则可以是我们的电子商务网站。每个监听器还将包含一个默认规则，右侧的监听器包含一个附加规则，将请求路由到另一个组。
- en: Health checks
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 健康检查
- en: In addition to defining listener rules to route traffic to appropriate targets
    within target groups, ALBs also perform health checks against your targets to
    determine whether they are in a healthy state. If a target such as an EC2 instance
    is not responding within a predefined set of requests based on the health check
    settings, it is marked as *unhealthy* and the ALB stops sending traffic to it,
    redirecting traffic to only those targets that are in a *healthy* state.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 除了定义监听器规则来将流量路由到目标组内的适当目标外，ALB 还会对你的目标进行健康检查，以判断它们是否处于健康状态。如果某个目标（例如 EC2 实例）在基于健康检查设置的预定义请求范围内没有响应，它将被标记为*不健康*，ALB
    会停止向其发送流量，将流量重定向到那些处于*健康*状态的目标。
- en: Using this approach, end users are always directed to EC2 instances (or any
    other targets) that are functioning and responding to the ALB, reducing their
    chances of experiencing outages.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，最终用户始终会被引导到功能正常并响应 ALB 的 EC2 实例（或其他任何目标），从而减少他们遇到故障的机会。
- en: Traffic routing
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 流量路由
- en: When it comes to routing traffic to individual targets in a target group, ALBs
    use **round robin** as the default method, but you can also configure routing
    based on the **least outstanding requests** (**LOR**) routing algorithm.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在将流量路由到目标组中的各个目标时，ALB 默认使用**轮询**方法，但你也可以配置基于**最少未完成请求**（**LOR**）的路由算法。
- en: 'Previously, we mentioned that you use the ALB to split traffic across two target
    groups in our example of an e-commerce store. The first target group will host
    EC2 instances that offer access to the corporate website (`www.mycompany.com`),
    and the second target group could host the e-commerce portion (`shop.mycompany.com`).
    This is also known as `www` versus `shop`). In addition to host-based routing,
    ALBs can be used to route traffic for the following use cases:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们在电商商店的示例中使用 ALB 将流量分配到两个目标组。第一个目标组将托管提供公司网站访问的 EC2 实例（`www.mycompany.com`），第二个目标组可能托管电商部分（`shop.mycompany.com`）。这也被称为`www`与`shop`。除了基于主机的路由，ALB
    还可以用于以下用例：
- en: '`mycompany.com/store` for users looking to purchase products, and another portion
    to `mycompany.com/blog` for users looking to read articles about the latest market
    trends.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mycompany.com/store` 用于寻找购买产品的用户，另一部分流量则转发到 `mycompany.com/blog`，为寻找阅读最新市场趋势文章的用户提供服务。'
- en: '**Host-header conditions**—This allows you to route traffic based on fields
    in the request URL—for example, query patterns or by source IP address.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主机头条件**—这允许你根据请求 URL 中的字段来路由流量，例如查询模式或源 IP 地址。'
- en: '**Multiple applications on a single EC2 instance**—This allows you to register
    more than one application on an EC2 instance using different port numbers.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在单个 EC2 实例上运行多个应用**—这允许你在同一个 EC2 实例上注册多个应用，并使用不同的端口号。'
- en: '**Support for registering targets by IP address**—This allows you to also redirect
    traffic from your ALB to your on-premises servers using private IP addressing
    over **virtual private network** (**VPN**) tunnels or Direct Connect connections.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持通过 IP 地址注册目标**—这允许你将 ALB 的流量重定向到使用私有 IP 地址的本地服务器，通过 **虚拟私人网络**（**VPN**）隧道或
    Direct Connect 连接。'
- en: '**Support for registering Lambda functions as targets**—This allows you to
    configure Lambda functions as targets. Any traffic forwarded will invoke the Lambda
    function, passing any content in **JavaScript Object Notation** (**JSON**) format.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持将 Lambda 函数注册为目标**—这允许你将 Lambda 函数配置为目标。任何转发的流量都会调用 Lambda 函数，并传递任何 **JavaScript
    对象表示法**（**JSON**）格式的内容。'
- en: '**Support for containerized applications**—This includes **Elastic Container
    Service** (**ECS**), where you can schedule and register tasks with a target group.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持容器化应用**—包括 **弹性容器服务**（**ECS**），你可以在其中调度并将任务注册到目标组。'
- en: In this section, we discussed how traffic can be routed with ALBs and saw different
    use cases. Next, we take a look at some security features of ALBs.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了如何使用 ALB 路由流量，并查看了不同的用例。接下来，我们将探讨 ALB 的一些安全功能。
- en: ALB and WAF
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ALB 和 WAF
- en: Amazon also offers several security tools that we will examine in detail in
    a later chapter. One such tool is called the **Web Application Firewall** (**WAF**),
    which helps protect against common web exploits such as SQL injections and **cross-site
    scripting** (**XSS**). Amazon ALBs offer WAF integration to help you protect your
    applications from such common web attacks.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊还提供了多种安全工具，我们将在后续章节中详细讨论。其中一个工具是 **Web 应用防火墙**（**WAF**），它帮助防护常见的 Web 漏洞，如
    SQL 注入和 **跨站脚本**（**XSS**）。亚马逊 ALB 提供了 WAF 集成功能，帮助你保护应用免受这些常见的 Web 攻击。
- en: NLB
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NLB
- en: '**NLBs** are designed to operate at the fourth layer of the OSI model and be
    able to handle millions of requests per second. NLBs are designed for load balancing
    of both **Transmission Control Protocol** (**TCP**) and **User Datagram Protocol**
    (**UDP**) traffic and maintain ultra-low latencies. With NLBs, you can preserve
    the client''s source IP, allowing your backend services to see the IP address
    of the client, which may be a requirement for the application to function.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**NLB** 旨在 OSI 模型的第四层操作，并能够处理每秒数百万个请求。NLB 设计用于负载均衡 **传输控制协议**（**TCP**）和 **用户数据报协议**（**UDP**）流量，并保持超低延迟。使用
    NLB 时，你可以保留客户端的源 IP，允许你的后端服务看到客户端的 IP 地址，这可能是应用程序正常运行所需的。'
- en: NLBs also offer support for static IP addresses and elastic IP addresses, the
    latter allowing you to configure one fixed IP per AZ. Again, this may be a requirement
    for your application, and hence you would need NLBs.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: NLBs还提供对静态IP地址和弹性IP地址的支持，后者允许您为每个可用区（AZ）配置一个固定IP。这可能是您的应用程序的需求，因此您需要使用NLBs。
- en: NLBs do not inspect the application layer and so are unaware of content types,
    cookie data, or any custom header information.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: NLBs不会检查应用层，因此无法识别内容类型、Cookie数据或任何自定义头信息。
- en: 'Some key benefits of NLBs include the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: NLBs的一些主要优势包括：
- en: Ability to handle volatile workloads and handle millions of requests per second.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够处理波动的工作负载并处理每秒数百万个请求。
- en: Support for static IP addresses for your load balancer and one elastic IP address
    per subnet.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持为您的负载均衡器配置静态IP地址，并为每个子网配置一个弹性IP地址。
- en: You can register targets by IP address—this allows you to register targets outside
    the VPC such as in your on-premises environment.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过IP地址注册目标——这使您可以注册VPC外的目标，例如您本地环境中的目标。
- en: Support for routing requests to multiple applications on a single instance using
    multiple ports.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持使用多个端口将请求路由到单个实例上的多个应用程序。
- en: Support for containerized applications such as those running on Amazon ECS.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持容器化应用程序，例如运行在Amazon ECS上的应用程序。
- en: In this section, we discussed NLBs and learned about their various use cases,
    particularly when you need to support millions of requests per second and operate
    at the fourth layer of the OSI model over TCP and UDP protocols. In the next section,
    we look at GWLBs, designed to enable you to distribute traffic across various
    software appliances offered on the AWS Marketplace.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了NLBs并了解了它们的各种使用场景，特别是在需要支持每秒数百万个请求并且在OSI模型的第四层通过TCP和UDP协议进行操作时。在下一节中，我们将介绍GWLBs，旨在让您能够在AWS
    Marketplace上分发流量到各种软件设备。
- en: GWLB
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GWLB
- en: Before allowing traffic to enter your VPC, you may wish to perform security
    inspections and analysis of that traffic to block any kind of suspicious activity.
    Often, you could deploy your own security tools on EC2 instances to inspect that
    traffic to deploy third-party tools procured from the AWS Marketplace such as
    firewalls, **intrusion detection systems/intrusion prevention systems** (**IDSes/IPSes**),
    and so on. Managing traffic being routed via these third-party tools is made easier
    with the help of Amazon **GWLBs**.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在允许流量进入您的VPC之前，您可能希望对该流量进行安全检查和分析，以阻止任何可疑活动。通常，您可以在EC2实例上部署自己的安全工具来检查流量，或者从AWS
    Marketplace采购第三方工具，例如防火墙、**入侵检测系统/入侵防御系统**（**IDSes/IPSes**）等。借助Amazon **GWLBs**，管理通过这些第三方工具路由的流量变得更加容易。
- en: Amazon GLWBs can manage the availability of these third-party virtual appliances
    and act as a single entry and exit point for all traffic destined for these services.
    This enables you to scale the availability and load-balance traffic across a fleet
    of your virtual appliances. GWLB operates at the third layer of the OSI model
    (the network layer) and exchanges application traffic with your virtual appliances
    using the `6081`. Traffic is sent in both directions to the appliance, allowing
    it to perform stateful traffic processing.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon GLWB可以管理这些第三方虚拟设备的可用性，并充当所有流量进入和退出这些服务的单一入口和出口点。这使您能够扩展可用性，并在您的虚拟设备集群之间进行负载均衡流量。GWLB在OSI模型的第三层（网络层）操作，并通过`6081`与虚拟设备交换应用流量。流量在两个方向上发送到设备，允许其执行有状态的流量处理。
- en: CLB
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CLB
- en: Amazon CLB is a previous-generation ELB designed to operate at both layer 4
    and 7 of the OSI model but without the extended features offered by the ALB or
    the level of throughput you can expect from an NLB. CLBs enable you to distribute
    traffic across EC2 instances that are in a single AZ or across multiple AZs. They
    are ideal for testing and for non-production environments, or if your existing
    application is running in the **EC2-Classic network mode**.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon CLB是上一代ELB，设计用于在OSI模型的第4层和第7层操作，但不具备ALB所提供的扩展功能，也无法提供NLB所能期待的吞吐量。CLB使您能够在单一可用区或跨多个可用区分发流量到EC2实例。它们非常适合测试和非生产环境，或者如果您现有的应用程序正在**EC2-Classic网络模式**下运行。
- en: In this section, we looked at Amazon ELBs, which enable you to centrally distribute
    incoming traffic across multiple targets such as a fleet of EC2 instances offering
    access to a web application. Amazon ELBs can also perform health checks against
    your targets and redirect traffic away from unhealthy targets to ones that are
    responding and in a healthy state. This reduces the chances of your end users
    experiencing any kind of outage by inadvertently being connected to an instance
    that is not healthy.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们讨论了 Amazon ELB，它使你能够将传入的流量集中分发到多个目标，例如提供 Web 应用访问的 EC2 实例集群。Amazon ELB
    还可以对目标进行健康检查，并将流量从不健康的目标重定向到响应正常且健康的目标。这减少了最终用户因不小心连接到不健康的实例而导致的停机风险。
- en: Amazon ELBs ultimately help you design your architecture for HA and support
    scalability features in conjunction with Amazon Auto Scaling, which we will discuss
    in the next section.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon ELB 最终帮助你设计高可用性（HA）架构，并支持与 Amazon Auto Scaling 一起的可扩展性功能，我们将在下一部分中讨论这一点。
- en: Implementing elasticity with Amazon Auto Scaling
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Amazon Auto Scaling 实现弹性
- en: One of the most amazing services on AWS is the ability to automatically scale
    your workloads when demand increases and then scale back in when demand drops.
    This service is offered as part of various core technologies—for example, computing
    services such as EC2 and database services such as DynamoDB.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 上最令人惊叹的服务之一就是当需求增加时能够自动扩展工作负载，需求下降时则自动缩减。这项服务是作为各种核心技术的一部分提供的——例如，计算服务如
    EC2 和数据库服务如 DynamoDB。
- en: Automatic scaling in response to a particular condition such as an increase
    in demand (for example, when average CPU utilization across your fleet of EC2
    instances goes above a threshold such as 70%) can help provision additional capacity
    when it is required most. However, you are not stuck with the new size of your
    fleet. You can configure Auto Scaling so that if demand drops below a specific
    threshold value, it will terminate EC2 instances and therefore *save on costs*.
    Let's look at Auto Scaling for EC2 instances in detail next.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 自动扩展响应特定条件，如需求增加（例如，当 EC2 实例集群的平均 CPU 利用率超过 70% 的阈值时），可以帮助在最需要时提供额外的容量。然而，你并不会被新集群的大小所束缚。你可以配置
    Auto Scaling，使得如果需求下降至特定阈值以下，它会终止 EC2 实例，从而 *节省成本*。接下来我们将详细探讨 EC2 实例的自动扩展。
- en: Auto Scaling is a regional service, and you can scale across AZs within a given
    Region, allowing you to launch EC2 instances across AZs for **HA** and **resilience**.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Auto Scaling 是一个区域服务，你可以跨 AZ 扩展，允许你在指定区域内跨 AZ 启动 EC2 实例，以实现 **高可用性（HA）** 和 **弹性**。
- en: 'In the following diagram, we can see that two additional EC2 instances were
    added to a fleet across AZs **2A** and **2B**. This was due to the average CPU
    utilization rising above 80%. Once the new instances are part of the fleet, the
    average CPU utilization should start to fall as the load on the application is
    spread across six instances now instead of the original four:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，我们可以看到两个额外的 EC2 实例被添加到跨 AZ 的集群中，分别是 **2A** 和 **2B**。这是由于平均 CPU 利用率上升至 80%
    以上。一旦新实例加入集群，平均 CPU 利用率应该开始下降，因为现在负载被分配到六个实例，而不是原来的四个实例：
- en: '![Figure 9.7 – Auto Scaling service example'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.7 – Auto Scaling 服务示例'
- en: '](img/B17124_09_07.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_09_07.jpg)'
- en: Figure 9.7 – Auto Scaling service example
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.7 – Auto Scaling 服务示例
- en: Amazon Auto Scaling helps you provision necessary EC2 instances on-demand and
    terminate them when the demand for your resources drops to or below a certain
    threshold. With Amazon Auto Scaling, you do not need to carry out complex capacity
    planning exercises. Next, we look at some core components of the Amazon Auto Scaling
    service.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Auto Scaling 帮助你根据需求按需配置 EC2 实例，并在资源需求下降至或低于某个阈值时终止这些实例。使用 Amazon Auto
    Scaling，你无需进行复杂的容量规划。接下来，我们将介绍 Amazon Auto Scaling 服务的一些核心组件。
- en: Auto Scaling groups
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动扩展组
- en: 'When you configure Auto Scaling, you define a collection called an Auto Scaling
    group. This Auto Scaling group will monitor and manage your fleet of EC2 instances.
    As part of the configuration, you need to define the following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当你配置 Auto Scaling 时，你会定义一个叫做自动扩展组的集合。这个自动扩展组将监控和管理你的 EC2 实例集群。作为配置的一部分，你需要定义以下内容：
- en: '**Minimum number of EC2 instances**—This is the minimum size of the group,
    and Auto Scaling will ensure that the number of EC2 instances in your fleet never
    drops below this level. If an instance fails, taking the total count below this
    value, then the Auto Scaling service will launch additional EC2 instances.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EC2 实例的最小数量**—这是组的最小规模，自动伸缩将确保你的 EC2 实例数量不会低于此值。如果某个实例出现故障，导致实例总数低于此值，自动伸缩服务将启动额外的
    EC2 实例。'
- en: '**Desired number of EC2 instances**—If you specify the desired capacity (usually
    because you know that at this value, your users have optimal experience), then
    the Auto Scaling service will always try to ensure that you have the number of
    EC2 instances equal to the desired capacity. Note that your desired number can
    be the same as the minimum number, which would mean that the Auto Scaling service
    ensures that you always have this minimum number of EC2 instances.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**期望的 EC2 实例数量**—如果你指定了期望的容量（通常是因为你知道在此值下，用户的体验是最优的），那么自动伸缩服务将始终确保你拥有与期望容量相等数量的
    EC2 实例。请注意，期望数量可以与最小数量相同，这意味着自动伸缩服务会确保你始终拥有这个最小数量的 EC2 实例。'
- en: '**Maximum number of EC2 instances**—This is the maximum size of the fleet.
    You need to specify the maximum size that you would want to scale out to. This
    also has the effect of ensuring that Auto Scaling does not deploy more than the
    maximum number of instances if, say, a bug in the application running on those
    instances causes unnecessary scale-outs.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EC2 实例的最大数量**—这是集群的最大规模。你需要指定希望扩展到的最大规模。这也意味着自动伸缩不会部署超过最大数量的实例，比如如果运行在这些实例上的应用出现错误导致不必要的扩展。'
- en: 'In the following diagram, we can see how Amazon Auto Scaling will provision
    your desired capacity of EC2 instances and can then scale out to the maximum number
    of EC2 instances as per your Auto Scaling group configuration:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，我们可以看到 Amazon 自动伸缩如何根据你的自动伸缩组配置，提供期望数量的 EC2 实例，并根据需要扩展到 EC2 实例的最大数量：
- en: '![Figure 9.8 – Auto Scaling groups'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.8 – 自动伸缩组'
- en: '](img/B17124_09_08.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_09_08.jpg)'
- en: Figure 9.8 – Auto Scaling groups
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.8 – 自动伸缩组
- en: The Auto Scaling service will launch and/or terminate EC2 instances as part
    of the group based on the parameters you define and then scale out or scale back
    in based on the scaling policies you set. You also define how health checks are
    made against the EC2 instances in the group—this can be either with the Auto Scaling
    service performing health checks itself or using the health check services of
    the ELB that the fleet of EC2 instances is registered to. Depending on the health
    check results, your scaling policies will be triggered accordingly.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 自动伸缩服务将根据你定义的参数启动和/或终止 EC2 实例作为组的一部分，然后根据你设置的伸缩策略进行扩展或缩减。你还需要定义如何对组内的 EC2 实例进行健康检查—这可以是自动伸缩服务自行执行健康检查，或者使用与
    EC2 实例注册的 ELB 健康检查服务。根据健康检查的结果，你的伸缩策略将相应触发。
- en: Configuration templates
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置模板
- en: To set up AWS Auto Scaling, you need to configure either a **Launch Template**
    or a **Launch Configuration**. Configuration templates enable you to define specifications
    of the EC2 instances to launch within the group. So, for example, the template
    will define the **Amazon Machine Image** (**AMI**) **identifier** (**ID**), instance
    type, key pairs, security groups, and block device mappings.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 AWS 自动伸缩，你需要配置**启动模板**或**启动配置**。配置模板使你能够定义组内启动的 EC2 实例的规格。例如，模板将定义**亚马逊机器镜像**（**AMI**）**标识符**（**ID**）、实例类型、密钥对、安全组和块设备映射。
- en: 'Within the configuration template, you can also define scripts to be run at
    launch time, known as **bootstrapping**, which will allow you to automatically
    configure the EC2 instance to participate in the fleet of existing instances,
    where possible. For example, at the launch of an EC2 instance, you can configure
    it with Apache Web Services so that it can function as a web server. These scripts
    can be defined in the **user data** section of the template and can be written
    in **Bash** for Linux **operating systems** (**OSes**) or **PowerShell** for Windows
    OSes. They are described in more detail here:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置模板中，你还可以定义启动时运行的脚本，称为**引导程序**，它将允许你在可能的情况下自动配置 EC2 实例，以便它能参与现有实例的集群。例如，在
    EC2 实例启动时，你可以配置它使用 Apache Web 服务，使其充当 Web 服务器。这些脚本可以在模板的**用户数据**部分定义，可以使用**Bash**编写
    Linux **操作系统**（**OS**）的脚本，或使用**PowerShell**编写 Windows 操作系统的脚本。它们在这里有更详细的描述：
- en: '**Launch Configuration**—A Launch Configuration is a basic template where you
    specify information for instances such as AMI IDs, instance types, key pairs,
    and security groups. You can associate your Launch Configuration with multiple
    Auto Scaling groups, but you can only launch one specific Launch Configuration
    for an Auto Scaling group at a time. Furthermore, once you have defined the parameters
    of a Launch Configuration, you cannot change it and you will have to re-create
    it if you need to modify it in any way.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动配置**—启动配置是一个基本模板，你可以在其中指定实例的信息，如 AMI ID、实例类型、密钥对和安全组。你可以将启动配置与多个 Auto Scaling
    组关联，但每次只能为一个 Auto Scaling 组启动一个特定的启动配置。此外，一旦你定义了启动配置的参数，就无法更改它，如果需要修改，必须重新创建启动配置。'
- en: Launch Configurations are the original way of defining configuration templates
    for your Auto Scaling groups and while still available, are now no longer recommended
    by Amazon. Instead, you are advised to use Launch Templates, which offer more
    features and flexibility and we'll look at next.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 启动配置是定义 Auto Scaling 组配置模板的原始方式，虽然仍然可用，但亚马逊现在不再推荐使用它。相反，建议使用启动模板，它提供了更多的功能和灵活性，我们接下来会详细介绍。
- en: '`gp3` and `io2`), **EBS volume tagging**, **elastic inference**, and **Dedicated
    Hosts**. You cannot use Launch Configurations to set up Dedicated Hosts.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gp3` 和 `io2`、**EBS 卷标签**、**弹性推理**和**专用主机**。不能使用启动配置来设置专用主机。'
- en: Launch Templates are the preferred option when configuring your templates for
    EC2 instances to be launched as they provide a lot more flexibility. Next, we
    look at different scaling options to suit different use cases.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 启动模板是配置用于启动 EC2 实例的模板的首选选项，因为它们提供了更多的灵活性。接下来，我们将探讨不同的扩展选项，以适应不同的使用场景。
- en: Scaling options
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展选项
- en: The final configuration component of your Auto Scaling service is to determine
    your scaling policy. Scaling refers to the automatic addition or termination of
    your compute capacity to meet the demands of your end users and the load on your
    application. Scaling actions are triggered by an event—for example, the average
    CPU utilization across your fleet of servers has gone above 80% for the last 20
    minutes and users will start to experience poor performance. Based on this event,
    Auto Scaling can be configured to launch one or more EC2 instances to bring the
    average CPU utilization down to below 60%.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Auto Scaling 服务的最后一个配置组件是确定你的扩展策略。扩展是指自动增加或终止计算能力，以满足最终用户的需求和应用程序的负载。扩展操作是由事件触发的——例如，服务器集群中的平均
    CPU 使用率在过去 20 分钟内超过了 80%，用户将开始体验到性能下降。基于这个事件，Auto Scaling 可以配置为启动一个或多个 EC2 实例，将平均
    CPU 使用率降低到 60% 以下。
- en: 'Depending on your business use case, you have several scaling options to choose
    from, as outlined here:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的业务使用场景，你可以选择多种扩展选项，如下所述：
- en: '**Always maintain current instance levels**—Your scaling options can be configured
    to maintain the number of EC2 instances in the fleet, which is where you do not
    scale in or out; instead, AWS Auto Scaling simply replaces any failed or unhealthy
    EC2 instances to maintain the fleet size.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**始终保持当前实例水平**—你的扩展选项可以配置为保持 EC2 实例的数量不变，在这种情况下，你不会进行扩展或收缩；而是 AWS Auto Scaling
    会替换任何失败或不健康的 EC2 实例，以保持集群的规模。'
- en: '**Scale manually**—You can change the minimum, maximum, and desired number
    of instances and Auto Scaling will make the necessary modifications to reflect
    your change.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**手动扩展**—你可以更改最小、最大和所需的实例数量，Auto Scaling 会根据你的更改做出必要的调整。'
- en: '**Scale based on schedule**—You can configure Auto Scaling to automatically
    launch new EC2 instances or terminate existing ones at predefined schedules, whereby
    you specify a date and time for the scaling action to take place. For example,
    a large payroll company could scale out the number of EC2 instances running a
    payroll application in the third week of the month when clients need to submit
    all their payroll data before a specific deadline. During other weeks, the payroll
    company can operate on a small number of instances and still offer the optimal
    client experience.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于计划的扩展**—你可以配置 Auto Scaling 在预定的时间表上自动启动新的 EC2 实例或终止现有实例，指定一个日期和时间来执行扩展操作。例如，一个大型工资公司可以在每月的第三周扩展运行工资应用程序的
    EC2 实例数量，因为客户需要在特定的截止日期之前提交所有工资数据。在其他周，工资公司可以使用少量实例，并仍能提供最佳的客户体验。'
- en: '**Dynamic scaling (scale on-demand)**—This is ideal when you are not able to
    predict demand. Dynamic scaling will be triggered when an event occurs, such as
    CPU utilization rising above a predefined threshold value for a period of time.
    Likewise, if demand drops, you can then automatically scale back in. There are
    three different forms of dynamic scaling on offer, outlined as follows:'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态扩展（按需扩展）**—当无法预测需求时，这是理想的选择。动态扩展将在发生事件时触发，例如 CPU 利用率长时间超过预定义的阈值。类似地，如果需求下降，你可以自动缩减资源。动态扩展有三种不同的形式，具体如下：'
- en: '**Target tracking scaling policy**—Auto Scaling will launch or terminate EC2
    instances in the fleet based on a target value of a specific metric. So, for example,
    if you know that average CPU utilization of 45% is ideal for the end user experience
    and anything above this threshold affects performance, then you can set your target
    tracking scaling policy for CPU utilization to 45%. If demand on your application
    increases, causing this metric to rise, then additional EC2 instances are launched.
    Likewise, if demand drops, causing the metric to fall much below 45%, Auto Scaling
    can terminate EC2 instances. You can think of a target-tracking scaling policy
    as a home thermostat where you try to maintain an ideal room temperature at home.'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标跟踪扩展策略**—Auto Scaling 会根据特定指标的目标值来启动或终止 EC2 实例。例如，如果你知道平均 CPU 利用率 45% 对于最终用户体验是理想值，而任何高于该阈值的情况都会影响性能，那么你可以将
    CPU 利用率的目标跟踪扩展策略设置为 45%。如果应用程序的需求增加，导致该指标上升，那么将启动额外的 EC2 实例。类似地，如果需求下降，导致该指标远低于
    45%，Auto Scaling 可以终止 EC2 实例。你可以将目标跟踪扩展策略比作家庭温控器，它试图保持理想的室内温度。'
- en: '**Step scaling**—Here, an increase or decrease in capacity is based on a series
    of *step adjustments*, where the size of the breach of threshold specified determines
    the amount of scaling action.'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步进扩展**—在这种情况下，容量的增加或减少基于一系列*步进调整*，其中阈值超出程度决定了扩展的量。'
- en: '**Simple scaling**—This is where capacity is increased or decreased based on
    a single scaling metric.'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单扩展**—在这种情况下，容量根据单一的扩展指标增加或减少。'
- en: '**Predictive scaling**—A more advanced form of scaling that uses **load forecasting**,
    **scheduled scaling actions**, and **maximum capacity behavior**. Maximum capacity
    behavior enables you to override the maximum number of instances in the fleet
    if the forecast capacity is higher than this maximum capacity value.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预测性扩展**—一种更高级的扩展形式，使用**负载预测**、**计划扩展操作**和**最大容量行为**。最大容量行为使你能够覆盖实例池中的最大实例数，如果预测的容量超过了该最大容量值。'
- en: In this section, we looked at the AWS Auto Scaling service, which enables you
    to automatically scale your compute resources (and other resources such as databases)
    across multiple AZs in a given Region. You can scale out as well as scale back
    in to cope with demand and ensure that you always have the right number of resources
    to offer the best end user experience. By automatically scaling back in when demand
    is low, you can also ensure effective cost management.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了 AWS Auto Scaling 服务，它使你能够在指定区域内自动扩展计算资源（以及其他资源，如数据库），跨多个可用区（AZ）进行扩展。你可以根据需求扩展或缩减资源，确保始终拥有足够的资源提供最佳的最终用户体验。当需求较低时自动缩减资源，还能确保有效的成本管理。
- en: In the next section, we move to examine how we can offer global HA and fault
    tolerance of the AWS resources that power your application.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何提供全球高可用性和容错机制，以支持你应用程序所依赖的 AWS 资源。
- en: Designing multi-Region HA solutions
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计多区域高可用性解决方案
- en: In [*Chapter 6*](B17124_06_Final_SK_ePub.xhtml#_idTextAnchor122), *AWS Networking
    Services – VPCs, Route53, and CloudFront*, we looked at Amazon Route 53, which
    offers DNS and traffic routing policies to help design highly available and resilient
    architectures incorporating configurations that increase performance and security
    best practices. We also looked at how Amazon CloudFront can help cache content
    locally closer to end users, which reduces latency and improves overall performance.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 6 章*](B17124_06_Final_SK_ePub.xhtml#_idTextAnchor122)，*AWS 网络服务 – VPCs、Route53
    和 CloudFront* 中，我们探讨了 Amazon Route 53，它提供 DNS 和流量路由策略，帮助设计具有高可用性和韧性的架构，包含提升性能和安全性最佳实践的配置。我们还探讨了
    Amazon CloudFront 如何帮助在靠近最终用户的位置缓存内容，从而减少延迟并提高整体性能。
- en: While Amazon Auto Scaling and ELB services help you offer HA and scalable services
    within a given Region on their own, there is no provision for global availability
    of services. If you were to host your application in a single Region alone and
    if that Region were to fail, your end users would not be able to access your applications
    until the Region came back online and resources made available.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Amazon Auto Scaling 和 ELB 服务帮助你在给定区域内提供高可用性和可扩展的服务，但它们本身并不提供全球服务的可用性。如果你仅在单个区域托管应用程序，并且该区域发生故障，最终用户将无法访问你的应用程序，直到该区域恢复在线并提供资源。
- en: Services such as Route 53 and CloudFront, however, enable you to extend your
    application's availability to be even more resilient on a global scale. In this
    section, we look at one such option to offer global availability if your primary
    Region experiences a major outage and where you perhaps have a global customer
    base.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，像 Route 53 和 CloudFront 这样的服务使你能够扩展应用程序的可用性，使其在全球范围内更加可靠。在本节中，我们将探讨一种在你的主要区域发生重大故障时提供全球可用性的选项，尤其是当你可能拥有全球客户群时。
- en: Specifically, Amazon Route 53 offers several routing policies, one of which
    is known as a failover routing policy, which helps you design an active/passive
    configuration for your application availability.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，Amazon Route 53 提供了几种路由策略，其中一种被称为故障转移路由策略，它帮助你为应用程序的可用性设计一个主动/被动配置。
- en: 'In the following diagram, we deploy two copies of the application across two
    AZs. We then configure Amazon Route 53 with a **failover** routing policy, where
    the primary version of your site is based in the London Region and the secondary
    site is in the Sydney Region. The following diagram and associated key points
    highlight the proposed architecture:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，我们将在两个可用区（AZ）中部署两个应用副本。然后，我们使用 **故障转移** 路由策略配置 Amazon Route 53，其中你的网站主版本部署在伦敦区域，副本部署在悉尼区域。以下图示和相关关键点展示了提议的架构：
- en: '![Figure 9.9 – Route 53 configured with failover routing policy, enabling an
    active/passive solution for application architecture'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.9 – 配置了故障转移路由策略的 Route 53，启用应用架构的主动/被动解决方案'
- en: '](img/B17124_09_09.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17124_09_09.jpg)'
- en: Figure 9.9 – Route 53 configured with failover routing policy, enabling an active/passive
    solution for application architecture
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.9 – 配置了故障转移路由策略的 Route 53，启用应用架构的主动/被动解决方案
- en: 'In the preceding diagram, we have a **primary site based in the London Region**
    with the following deployment:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述图示中，我们有一个 **基于伦敦区域的主站点**，其部署如下：
- en: EC2 instances are deployed as part of an Auto Scaling group. In the London Region
    (our primary site), we have a desired/minimum capacity of four EC2 instances that
    can expand to a maximum of six EC2 instances to support demand as required.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EC2 实例作为 Auto Scaling 组的一部分进行部署。在伦敦区域（我们的主站点），我们有一个期望/最小容量为四个 EC2 实例，可以根据需求扩展至最多六个
    EC2 实例，以支持需求。
- en: Traffic is distributed via the ALB to the EC2 instances across two AZs in the
    London Region. The source of that traffic is routed via Route 53 from end users
    on the internet.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流量通过 ALB 分发到伦敦区域内两个可用区（AZ）中的 EC2 实例。这些流量源自互联网的最终用户，通过 Route 53 路由。
- en: Route 53 performs health checks against the primary site. Health checks are
    run against each EC2 instance via the ALB, and if the primary site is reachable,
    Route 53 continues to direct traffic to the primary site only.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Route 53 对主站点执行健康检查。健康检查通过 ALB 对每个 EC2 实例进行，如果主站点可访问，Route 53 会继续将流量仅指向主站点。
- en: If there is a regional outage or if the Auto Scaling group fails to maintain
    healthy EC2 instances behind the load balancer, Route 53 marks the site as unhealthy
    and performs a failover.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果发生区域故障，或者如果 Auto Scaling 组未能保持负载均衡器后面的 EC2 实例健康，Route 53 会将该站点标记为不健康并执行故障转移。
- en: During failover, Route 53 redirects all traffic to the secondary site in Sydney,
    shown in *Figure 9.9* as the dotted yellow traffic lines on the right.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While traffic is being redirected to the secondary site, which may start off
    with a minimum number of instances, Auto Scaling can scale out the number of nodes
    in the fleet to cope with demand up to the maximum specified number of instances.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding example and diagram illustrate how we can combine regional services
    such as Auto Scaling and ALBs along with global services such as Route 53 to design
    a highly available and resilient application architecture.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned about designing application solutions that offer
    multi-regional HA options using both ELBs and Route 53 services specifically.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we examine a series of hands-on exercises that will help
    you configure the various services you have learned about so far, incorporating
    IAM, **Simple Storage Service** (**S3**), VPCs, EC2, RDS, ELBs, and Auto Scaling,
    to build a two-tier application solution. This two-tier application solution will
    comprise a web/application tier and a backend database tier.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'To complete the upcoming exercises, it is vital that you have completed all
    previous exercises in all the previous chapters. Furthermore, to complete the
    exercise, you will need to access the source code files of the application, which
    are available at the *Packt Publishing* GitHub repository: [https://github.com/PacktPublishing/AWS-Certified-Cloud-Practitioner-Exam-Guide](https://github.com/PacktPublishing/AWS-Certified-Cloud-Practitioner-Exam-Guide)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Finally, as you carry out each exercise, you will be provided with some background
    details to help you appreciate the architecture and reasons behind the deployment.
    All exercises need to be done in the `us-east-1` Region, which is where you have
    already built your **production VPC** and host your **RDS database**.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: For all exercises, ensure that you are logged in to your AWS account as our
    IAM user **Alice**.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Extended exercises – setting the scene
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The upcoming exercises are based on the following scenario. You work for a fictitious
    company called **The Vegan Studio**. The company is in the hospitality industry.
    Specifically, the company runs a chain of cafes and restaurants across the **United
    States** (**US**), serving only vegan dishes for those looking to indulge in meat-free
    cuisine. The company employs over 4,000 employees across its business, and keeping
    everyone engaged and feeling part of a large family is something the business
    takes great pride in.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Every year, they run several contests for their employees to participate in.
    This year, they are running a *My Good Deed for the Month* contest. A web application
    has been designed by one of the developers, which you need to now deploy in a
    highly available and scalable manner on AWS in the `us-east-1` Region. The contest
    will run for a month and all employees are encouraged to submit a statement of
    any good deeds they carried out. Five winners will be chosen from a list of entries
    and awarded a special hamper prize. Participants must back up their good deeds
    with evidence if requested (just to be sure no one is fooling around)!
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will walk you through a series of exercises to deploy the application
    designed by your developer with HA and scalability features.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Some AWS services, such as ELBs and **Network Address Translation** (**NAT**)
    gateways, are chargeable. We suggest you complete all the exercises in reasonably
    quick succession and then perform the cleanup exercise at the end. Overall, the
    cost should not be more than $5\. To ensure costs are kept to a minimum, we will
    not be configuring the RDS database you deployed in the previous chapter with
    Multi-AZ.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'The following exercises will make use of a multi-tier application design that
    will be deployed in the **production VPC** that you already built in the previous
    chapters. Recall that the VPC comprises both public and private subnets, spanning
    across two AZs. From the previous chapters, you have already built a foundation
    architecture as per the following diagram:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10 – Production VPC architecture prior to deploying the "Good Deed
    of the Month" contest application'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_09_10.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.10 – Production VPC architecture prior to deploying the "Good Deed
    of the Month" contest application
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: 'As per the previous diagram, your current architecture is comprised of the
    following key AWS services and resources:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: A VPC created in the `us-east-1` Region with public and private subnets across
    two AZs. The private subnets have been designed to support a two-tier application
    solution comprising a web/application tier and a database tier.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The public subnets will normally be used to deploy bastion hosts for remote
    administration and NAT gateways. For the upcoming series of exercises, we will
    not be deploying any bastion hosts as this is not required for the labs in these
    exercises. However, we will amend the bastion host security group to allow inbound
    `22`.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application tier private subnets do not currently have any EC2 instances
    deployed.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The database tier private subnets currently host a single instance MySQL RDS
    database in the `us-east-1a` AZ.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Through the upcoming exercises in this chapter, we will build on the architecture
    to design a fully functional application solution with HA and scalability features.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 9.1 – setting up an Amazon S3 bucket to host source files
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will first create an Amazon S3 bucket that will be used
    to host your source files for your application. You need to first download the
    source file, which is available in a ZIP folder format, and extract its contents
    into a new folder or onto the desktop of your computer for easy access.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to prepare your source code files. Your source code files
    contain a database connection file that will need to be amended to the specific
    RDS database you configured in the previous chapter. Follow these next steps:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Once you unzip the downloaded folder, you can see the contents of the main `vegan-php-files`
    folder, as per the following screenshot:![Figure 9.11 – vegan-php-files source
    code
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_09_11.jpg)'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.11 – vegan-php-files source code
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will note that in the `v5` directory, there is a file called `db` that
    is a **PHP: Hypertext Preprocessor** (**PHP**) file. This file contains default
    database connection string details that you will first need to amend before you
    upload the source code to your S3 bucket. Specifically, you will need to provide
    the RDS database connection details, which include the RDS endpoint DNS name,
    master username, password, and database name. *Recall that you made a note of
    these values in the last chapter*.'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a notepad or text editor tool, open the `db.php` file from the `v5` folder.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the PHP file, you will need to edit the values of the placeholders with
    the appropriate database connection values. In the following screenshot, you will
    see the placeholders:![Figure 9.12 – db.php file
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_09_12.jpg)'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.12 – db.php file
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will need to replace the placeholders with the connection details to your
    database, making sure to place all the values within single quotation marks. Do
    not make any other changes to the code. Here is a screenshot of where you can
    obtain these values after you create your database. The database endpoint is visible
    on the main **Connectivity & security** tab, and you will find the username and
    database name in the **Configuration** tab. Note that the password is not visible,
    as you should have made a note of it when launching the database instance:![Figure
    9.13 – Amazon RDS database settings
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_09_13.jpg)'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.13 – Amazon RDS database settings
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save the file in its original location.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to your AWS Management Console and navigate to the Amazon S3 dashboard.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left-hand menu, click **Buckets**.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Create bucket** in the right-hand pane of the dashboard.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the `vegan-good-deed`. Ensure that the Region selected is the `us-east-1`
    Region.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll to the bottom of the page, leaving all settings at their default values,
    and click the **Create bucket** button. Your Amazon S3 bucket will be created,
    and you will be redirected back to the list of available buckets.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the bucket you just created, and you will be redirected to the **Objects**
    listing page, where you will note that there are currently no objects, as per
    the following screenshot:![Figure 9.14 – New bucket creation
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_09_14.jpg)'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.14 – New bucket creation
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Upload** button.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you want to try to resize your browser page with the S3 bucket `vegan-php-files`
    folder so that you can easily drag and drop all the folders and files into the
    S3 bucket's **Object** area, as per the following screenshot. You need to ensure
    that the folder hierarchy is maintained for the application to work:![Figure 9.15
    – Copying files and folders to the S3 bucket
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_09_15.jpg)'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.15 – Copying files and folders to the S3 bucket
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Your Amazon S3 **Upload** page will provide a summary of files and folders to
    be uploaded. You will need to then click on the **Upload** button at the bottom
    of the page.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once all the files and folders have been uploaded, you receive an **Upload succeeded**
    message.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that your source code and files for your application have been uploaded,
    we will move on to the next exercise. As part of this series of exercises, you
    will need to configure your EC2 instances to download the source code files for
    the application. Using Bash scripts at the time of launching your EC2 instances,
    you will download the source code from the Amazon S3 bucket and place it in the
    appropriate folders within the EC2 instances to serve the application.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Because your EC2 instance would need to have permissions to access the previous
    S3 bucket we created and download the source code, we need to configure an IAM
    role that your EC2 instance will use to authenticate to Amazon S3.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 9.2 – creating an IAM role
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will create an IAM role that your EC2 instances will
    use to authenticate and access the source code files in your Amazon S3 bucket.
    Proceed as follows:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that you are logged in to your AWS account and navigate to the IAM dashboard.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Roles** from the left-hand menu.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Create role**, as per the following screenshot:![Figure 9.16 – Creating
    an IAM role
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_09_16.jpg)'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.16 – Creating an IAM role
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the **Select type of trusted entity** field, click the **AWS services** option,
    and under **Choose a use case**, select **EC2** under **Common use cases**.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Next: Permissions** button at the bottom of the page.'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the `S3`. Next, select the `AmazonS3ReadOnlyAccess` policy and click the
    **Next: Tags** button, as per the following screenshot:![Figure 9.17 – Creating
    an IAM role (continued)'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_09_17.jpg)'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.17 – Creating an IAM role (continued)
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set a key-value pair to tag your role with a key of `EC2-to-S3-Read-Access`.
    This allows us to easily identify the role. Click the **Next: Review** button
    on the bottom right-hand corner of the page.'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `EC2-to-S3-Read-Access`, and a description.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click the **Create role** button.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS will now create your IAM role, and you will need to reference this role
    when we launch our EC2 instances in a later chapter.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: 'At this stage, you have the following AWS services configured:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: An Amazon VPC with public and private subnets across two AZs. You have a public
    subnet to host bastion hosts and NAT gateways, and four private subnets—two for
    your web/application servers located in the **web/application tier** and another
    two for your **database tier**.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An RDS database that will store all data such as the *good deeds of the month*
    that the employees of The Vegan Studio will submit.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Amazon S3 bucket with the source code files configured to point to the RDS
    database.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An IAM role to allow your EC2 instances to download the source code files from
    the S3 bucket.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you deploy your application, you will install Apache Web Services and host
    your application files on EC2 instances. Specifically, you will be deploying two
    EC2 instances that will be placed across two AZs. To distribute traffic across
    those EC2 instances, you will need to configure an ALB that will be configured
    to accept inbound HTTP (port `80`) traffic from the internet and distribute them
    to your EC2 instances. In the next exercise, you will need to configure your ALB.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 9.3 – configuring an ALB
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will be configuring an ALB that will be used to accept
    inbound traffic from your users on the internet and distribute them across the
    EC2 instances you deploy later in this chapter.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: ALBs, as discussed earlier in this chapter, can be used to distribute web and
    application traffic using HTTP and HTTPS protocols. You will configure an internet-facing
    load balancer so that you can accept inbound requests from the internet.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: 'CLBs and ALBs require you to also configure a security group within which you
    define which traffic would be permitted inbound to those load balancers. Therefore,
    the first step is to revisit the VPC dashboard and create a new security group
    for your ALB, as follows:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the VPC dashboard and ensure you are still in the `us-east-1` Region.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the left-hand menu, click on **Security Groups**.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create security group** button in the top right-hand corner of the
    screen.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the security group with a name such as `ALB-SG` and a description such
    as `Allow inbound HTTP traffic from Internet`.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that you select **ProductionVPC** from the VPC drop-down list.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add rule** button under **Inbound rules**.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For `0.0.0.0/0`. This source denotes the public internet.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide an optional description and then click on the **Create security group**
    button on the bottom right-hand corner of the screen.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS will now create your security group, which we will use to configure our
    ALB.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: ELBs do not fall under the Free Tier offering from AWS, and you must ensure
    you delete them once you have completed all the labs.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have configured a security group, we can move on to configuring
    our load balancing service. However, your ALB requires a **target group** to send
    traffic to. The target group will be used to register the EC2 instances that will
    accept traffic from the ALB. So, the first step is to create your target group,
    as follows:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the EC2 dashboard and ensure that you are in the `us-east-1` Region.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the left-hand menu, click on **Target Groups**, under the **Load Balancing**
    menu.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the right-hand pane, click on **Create target group**.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you are presented with a two-step wizard. In *Step 1*, select `Production-TG`.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under `80`.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, under `Production-VPC`.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll further down till you reach the **Health checks** section.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, set the **Health check protocol** to **HTTP**.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the `/health.html` as per the following screenshot:![Figure 9.18 – Load
    balancer target group health checks
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_09_18.jpg)'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.18 – Load balancer target group health checks
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, expand the **Advanced health check settings** field.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Port** value to **Traffic Port**.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `3`.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `2`.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, set the `2`.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, set the `10` seconds.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Next** button at the bottom of the page.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will take you to *Step 2*, where you would normally register any EC2 instances.
    However, as we have not launched any EC2 instances yet, you can ignore this step
    and simply click on the **Create target group** button at the bottom of the page.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, now that we have the **target group** configured, we can launch our ALB.
    ELBs are configured in the EC2 management console or via the **command-line interface**
    (**CLI**).
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the left-hand menu, click on **Load Balancers** under the **Load Balancing**
    category.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Create Load Balancer** button at the top of the screen
    in the right-hand pane.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create** button in the **Application Load Balancer** section
    of the page, as per the following screenshot:![Figure 9.19 – Selecting Application
    Load Balancer as load balancer type
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_09_19.jpg)'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.19 – Selecting Application Load Balancer as load balancer type
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In `Production-ALB`.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the `Production-VPC` under the `us-east-1a` and `us-east-1b` AZs.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `us-east-1a` AZ, select the `us-east-1b` AZ, select the **Public Subnet
    Two** subnet.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'AWS will then deploy the ALB *nodes* in these public subnets, routing incoming
    traffic from the internet to the EC2 instances in the private subnets that we
    registered as targets for the load balancer. Internet-facing load balancers should
    be created in subnets that have been configured with an internet gateway such
    as in this case: the public subnets of your VPC.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: Next, under `ALB-SG` security group from the drop-down list. You can also delete
    the `ALB-SG` security group.*   In the `80`. Next, under `Production-TG` target
    group you created earlier from the drop-down list.*   Finally, scroll further
    down and click on the **Create load balancer** button.*   You will receive a confirmation
    message stating that the load balancer has been created successfully. Click on
    `Production-ALB` load balancer in the list. After a few moments, the status of
    the load balancer should change from **Provisioning** to **Active**.
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At this point, we have now configured our ALB. Let''s go ahead and look at
    our architectural diagram to see how our configuration is coming along:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.20 – Production VPC architecture after configuring S3 bucket, IAM
    role, and ALB'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_09_20.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.20 – Production VPC architecture after configuring S3 bucket, IAM role,
    and ALB
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: For traffic to be allowed inbound to the application servers, we need to ensure
    that the security groups associated with those servers have been correctly configured.
    Specifically, the `AppServers-SG` security group must allow traffic on the HTTP
    protocol (port `80`) from the ALB we deployed in the previous exercise.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, in [*Chapter 7*](B17124_07_Final_SK_ePub.xhtml#_idTextAnchor157),
    *AWS Compute Services*, you configured the `AppServers-SG` security group to accept
    traffic from the `BastionHost-SG` security group. This was to enable inbound traffic
    on `3389`), which enables the Windows Remote Desktop client to perform remote
    access operations. Although we will not be deploying any bastion hosts in the
    remaining exercises in this chapter, we will amend the inbound rule on the `AppServers-SG`
    security group such that the protocol and port used to accept traffic from the
    `BastionHost-SG` security group will be set to the SSH protocol on port `22`.
    This is because we will be deploying Linux EC2 instances to host our application,
    and any remote management of Linux servers requires you to configure SSH access.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 9.4 – amending the Production-VPC security group
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will amend the RDP inbound rule in the `AppServers-SG`
    security group such that it is configured to accept traffic on the SSH protocol
    (port `22`) from the `BastionHost-SG` security group. Next, we will add a new
    rule to accept traffic on the HTTP protocol (port `80`) from the ALB's security
    group, `ALB-SG`. Finally, we will amend the `BastionHost-SG` security group such
    that it is configured to accept traffic on the SSH protocol (port `22`) from the
    internet. This is useful if you later wish to perform any remote administration
    of your Linux servers.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: 'Amend the `BastionHost-SG` security group, as follows:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the VPC dashboard and ensure that you are in the `us-east-1` Region.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the left-hand menu, click on **Security Groups**.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the middle pane, select the checkbox next to the `BastionHost-SG` security
    group.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the pane below, click on **Inbound rules** and then click on the **Edit inbound
    rules** button.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, delete the existing **RDP** rule by clicking on the **Delete** button
    on the far right of the page.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add rule** button.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the type, select `0.0.0.0/0`.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the `AppServers-SG` security group.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Security Groups** link from the left-hand menu again to see all
    your security groups in the VPC.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the middle pane, select the checkbox next to the `AppServers-SG` security
    group.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the pane below, click on **Inbound rules** and then click on the **Edit inbound
    rules** button.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, delete the existing **RDP** rule by clicking on the **Delete** button
    on the far right of the page.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add rule** button.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the type, select `sg-`. You will notice that a list of your security groups
    will become visible. Select the `BastionHost-SG` security group from this list.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click the **Add rule** button again.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the type, select `sg-`. You will notice that a list of your security groups
    will become visible. This time, select the `ALB-SG` security group from the list.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **Save rules** button in the bottom right-hand corner
    of the page.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will not need to amend the `Database-SG` security group because this has
    already been configured to only accept traffic from the `AppServers-SG` security
    group using the MySQL port `3306`.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: Recall from the architectural diagram in *Figure 9.20* that the web/application
    EC2 instances are going to be placed in a private subnet. Our The Vegan Studio
    employees will be able to access the *Good Deed of the Month* contest application
    on those EC2 instances via the ALB. However, the EC2 instances will need access
    to the internet to download updates as well as the source code files stored on
    the Amazon S3 bucket.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: Remember that, unlike the public subnet, the private subnet does not grant direct
    access to the internet. Any EC2 instance in the private subnet would need to direct
    internet-bound traffic via an AWS NAT gateway, as discussed in [*Chapter 6*](B17124_06_Final_SK_ePub.xhtml#_idTextAnchor122),
    *AWS Networking Services – VPCs, Route53, and CloudFront*.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, we will deploy a NAT gateway.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 9.5 – deploying a NAT gateway
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will deploy a NAT gateway in the **Public Subnet One**
    subnet of our production VPC. Ideally, you want to deploy multiple NAT gateways
    in each public subnet across the AZs you have resources in to avoid a **single
    point of failure** (**SPOF**). However, for the purposes of this lab, we will
    use a single NAT gateway.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: In addition, you will need to configure your **main route table** with a new
    route that will allow outbound traffic to the internet via this NAT gateway.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start this exercise by first allocating an elastic IP address for our
    AWS account, which is a requirement to configure a NAT gateway. To do this, follow
    these steps:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to your VPC dashboard and ensure that you are in the `us-east-1` Region.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NAT gateways require an elastic IP address, and so you will need to allocate
    one first to your AWS account. From the left-hand menu, click on **Elastic IPs**.
    In the right-hand pane, click the **Allocate Elastic IP address** button.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be presented with the **Allocate Elastic IP address** page. Ensure
    that **Amazon's pool of IPv4 addresses** is selected and then click the **Allocate**
    button.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'AWS will allocate an elastic IP address from its pool of available addresses
    for your AWS account. Next, you will need to set up your NAT gateway, as follows:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: From the left-hand menu, click on **NAT Gateways**.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the right-hand pane, click the **Create NAT gateway** button.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the `Production-NAT`.
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the **Subnet** drop-down list, select the **Public Subnet One** subnet.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the drop-down list under **Elastic IP allocation ID**, select the
    elastic IP you allocated to your account moments ago.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click the **Create NAT gateway** button at the bottom of the page.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The NAT gateway will take a couple of minutes to be provisioned. Once ready,
    the NAT gateway state will be set to **Available**, as per the following screenshot:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.21 – NAT gateway'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_09_21.jpg)'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.21 – NAT gateway
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have deployed your NAT gateway, you will need to configure your
    main route table with a route to the internet that uses the NAT gateway, as follows:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: From the left-hand menu in the VPC dashboard, select **Route Tables**.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the checkbox next to **Main Route Table**.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the bottom pane, click on the **Routes** tab.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click the **Edit routes** button on the far right-hand side of the page.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be presented with the **Edit routes** page. Click the **Add route**
    button.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the `0.0.0.0/0`.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the `Production-NAT` NAT gateway in the list. Go ahead and select
    this.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **Save changes** button.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your main route table has now been configured with a route to the internet that
    will use the NAT gateway.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have configured your NAT gateway and the main route table correctly,
    we can proceed with deploying our EC2 instances that will host the *Good Deed
    of the Month* application in the next exercise.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 9.6 – deploying your application servers with Amazon Auto Scaling
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will configure the Amazon Auto Scaling service to define
    a **Launch Configuration** for our deployment, which will include a script to
    configure our EC2 instances with the Apache web service and download the application
    source files from the Amazon S3 bucket. As part of the exercise, you will also
    create an EC2 instance profile that will be used to contain the IAM role you created
    earlier and allow the EC2 instance to assume that role.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: The EC2 instances will also be provisioned as targets in the `Production-TG`
    target group we created earlier in the ALB exercise. The `Production-ALB` ALB
    will then be able to distribute inbound traffic from our The Vegan Studio employees
    on the internet to those EC2 instances, enabling them to submit any good deeds
    they carried out for review by our panel.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we will configure Auto Scaling policies to always ensure that we
    always have two running EC2 instances, one in each private subnet, across the
    two AZs, `us-east-1a` and `us-east-1b`. In terms of health checks, these will
    be performed both at the EC2 level and via the ALBs using the health check parameters
    you defined in *Exercise 9.3* earlier.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Auto Scaling Launch Configuration
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As part of this exercise, you will need access to a Bash script that we have
    included in the GitHub repository [https://github.com/PacktPublishing/AWS-Certified-Cloud-Practitioner-Exam-Guide](https://github.com/PacktPublishing/AWS-Certified-Cloud-Practitioner-Exam-Guide).
    In the `vegan-php-files.zip` file you downloaded earlier, which you unzipped,
    you will find a file called `userdata-script` in the top-level folder. You will
    need to amend this script to match your configuration. Open the script file in
    a notepad or text editor application and change the last line of the script, replacing
    `[Source Bucket]` with the actual name of your bucket. So, for example, if your
    bucket name is `vegan-good-deed`, then the last line should be changed from `aws
    s3 cp s3://[Source Bucket] /var/www/html –recursive` to `aws s3 cp s3://vegan-good-deed
    /var/www/html –recursive`. Make sure to save the file.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we look at the steps required to set up our AWS Auto Scaling Launch Configuration,
    as follows:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the EC2 dashboard and ensure that you are in the `us-east-1` Region.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the left-hand menu, select **Launch Configurations** from the **Auto Scaling**
    category.
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the right-hand pane, click on the **Create Launch Configuration** button.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be presented with the **Create Launch Configuration** page.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a name for your Launch Configuration—for example, `Production-LC`.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you need to search for the Amazon Linux 2 AMI. It might be difficult to
    find the AMI in the new `64-bit x86` architecture, which I have highlighted as
    per the following screenshot:![Figure 9.22 – AMI ID for Amazon Linux 2 instance
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_09_22.jpg)'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.22 – AMI ID for Amazon Linux 2 instance
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Back in the previous browser window where you are configuring your Auto Scaling
    Launch Configuration, click on the drop-down arrow under **AMI** and paste in
    the AMI ID you copied previously in the search box. You should then be able to
    find the relevant AMI to use. Make sure you select this AMI.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, under `t2.micro`. You can then select the `t2.micro` instance type from
    the filtered list. Go ahead and click the **Choose** button.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, under the `EC2-to-S3-Read-Access` instance profile that contains the IAM
    role you created earlier.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, expand the **Advanced details** section.
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **User Data**, ensure that **As Text** is the selected option and, in
    the textbox provided, go ahead and paste in a copy of the Bash script file you
    amended a few moments ago.
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, under **IP address type**, ensure that you select **Do not assign a public
    IP address to any instances**. This is because the EC2 instances are going to
    be launched in the private subnets and will not require a public IP address.
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the settings in the **Storage (volumes)** field at their default values.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, under `AppServers-SG` security group.
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Key pair (login)** section, select **Choose an existing key pair**
    from the **Key pair options** drop-down list.
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the drop-down list under `USEC2Keys` key pair.
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, tick the box to acknowledge that you have access to the private key file
    that you downloaded earlier in [*Chapter 7*](B17124_07_Final_SK_ePub.xhtml#_idTextAnchor157),
    *AWS Compute Services*.
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **Create Launch Configuration** button at the bottom of
    the screen.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, you have successfully created your first Auto Scaling Launch
    Configuration, as per the following screenshot:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.23 – Amazon Auto Scaling Launch Configuration'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_09_23.jpg)'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.23 – Amazon Auto Scaling Launch Configuration
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have created your Launch Configuration, you can proceed to configure
    your Auto Scaling groups.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Auto Scaling groups
  id: totrans-383
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As part of creating your Auto Scaling groups, you can define Auto Scaling policies.
    Because we will not be performing any real load testing on our application servers,
    we will simply configure our Auto Scaling policy to ensure that we always have
    a minimum of two EC2 instances across the two AZs. Proceed as follows:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: From the left-hand menu of the EC2 dashboard, click on the **Auto Scaling Groups**
    link under **Auto Scaling**.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create an Auto Scaling group** button in the right-hand pane of
    the screen.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Production-ASG`.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next section of the screen, you will have an option to select a Launch
    Template from a drop-down list. However, instead of a Launch Template, we have
    configured a Launch Configuration. To access your Launch Configuration, click
    on the **Switch to Launch Configuration** link on the far right-hand side of the
    screen.
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, under `Production-LC` Launch Configuration you created earlier.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Next** button to move on to *Step 2*.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Production-VPC` from the **VPC** drop-down list.
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the drop-down list under **Subnets**, ensure that you select both the **Private
    Subnet One - App** and **Private Subnet Two - App** subnets, as per the following
    screenshot:![Figure 9.24 – Auto Scaling group subnet selection
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_09_24.jpg)'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.24 – Auto Scaling group subnet selection
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Next** button.
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Step 3, Load balancing – optional**, we will be using the ALB you created
    earlier. Select the **Attach to an existing load balancer** option.
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, ensure that **Choose from your load balancer target groups** is selected
    under the **Attach to an existing load balancer** section.
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the drop-down list under `Production-TG` target group that is associated
    with the `Production-ALB` ALB.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, under the **Health checks – optional** section, select the **ELB** checkbox.
    This is to enable ELB health checks in addition to the EC2 health checks.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Next** button at the bottom of the screen.
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `2` each. We want to always maintain two EC2 instances in our fleet.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Scaling policies – optional**, ensure that **None** is selected, and
    then click the **Next** button.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Step 5, Add notifications**, do not add any notifications and click on
    the **Next** button.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Name` and the `Production-Servers`.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Next** button to continue.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are then presented with a **Review** page. Review the configuration settings
    that you have defined to make sure you followed the preceding series of steps
    correctly. When you are satisfied, go ahead and click the **Create Auto Scaling
    group** button at the bottom of the page.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS will then start configuring your Auto Scaling group and proceed to launch
    two EC2 instances based on the parameters of the groups. The EC2 instances will
    be configured as per the configuration you defined in the Launch Configuration
    earlier.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Auto Scaling has completed the deployment of your EC2 instances, you will
    be able to see the details of your deployment, as per the following screenshot:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.25 – Auto Scaling group deployment completed'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_09_25.jpg)'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.25 – Auto Scaling group deployment completed
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: At this point, your application has now been deployed across two EC2 instances.
    If you click on the **Activity** tab, you will see the AWS Auto Scaling service
    launched two EC2 instances in response to the fact that the minimum and desired
    capacity were not met before the launch of those EC2 instances. The Auto Scaling
    service will always try to ensure you have the desired number of EC2 instances
    in your fleet. Next, we will review the deployment and access the application.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing your deployment and accessing your application
  id: totrans-413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can check whether the Auto Scaling service has correctly deployed your application.
    Specifically, you can check whether two EC2 instances have been deployed and registered
    with your ALB. Furthermore, you can also check whether the ALB has marked those
    EC2 instances as healthy, indicating that the health checks have passed as well.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps to perform these checks and then access the application:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: In the EC2 dashboard, click on the **Target Groups** link from the left-hand
    menu under **Load Balancing**.
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the right-hand pane, click on the `Production-TG` target group that you created
    earlier.
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the details page of the `Production-TG` target group, you will note that
    two EC2 instances have been launched and both are in a **healthy** state, as per
    the following screenshot:![Figure 9.26 – Healthy EC2 instances registered to load
    balancer target group
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_09_26.jpg)'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.26 – Healthy EC2 instances registered to load balancer target group
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, click on the **Instances** link from the left-hand menu.
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will notice that two instances with the name `Production-Servers` have been
    launched, with one EC2 instance in the `us-east-1a` AZ and the other in the `us-east-1b`
    AZ, as per the following screenshot:![Figure 9.27 – Auto Scaling group successfully
    launched two EC2 instances
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_09_27.jpg)'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.27 – Auto Scaling group successfully launched two EC2 instances
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we can access our application. From the left-hand menu, click on the **Load
    Balancers** link under **Load Balancing**.
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the right-hand pane, you will find your ALB details, as per the following
    screenshot:![Figure 9.28 – ALB details for Production-ALB
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_09_28.jpg)'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.28 – ALB details for Production-ALB
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the bottom pane, you will find a **DNS name** link for your ALB. Copy this
    URL and paste it into a new browser window. If you have successfully completed
    all of the previous exercises, you will be able to access the **Good Deed of the
    Month Contest** web application, as per the following screenshot:![Figure 9.29
    – Good Deed of the Month Contest web application
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_09_29.jpg)'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.29 – Good Deed of the Month Contest web application
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can test your application by entering details of some potential good deeds
    you have done yourself. Once you have filled in the form in the middle of the
    web page, click the **SUBMIT** button.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will note that when the web page reloads after you click on the **Submit**
    button, your *good deed of the month* is read back from the MySQL RDS database
    and presented on the page. If you submit more entries, these are also reported
    back. This demonstrates how the application can write to and read from the backend
    RDS database.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s take another look at the application architectural diagram to see how
    you have built this multi-tier solution:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.30 – Multi-tier application architecture'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_09_30.jpg)'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.30 – Multi-tier application architecture
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: 'The key components of your architecture include the following:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: 'A VPC in the `us-east-1` Region that consists of public and private subnets
    across the `us-east-1a` and `us-east-1b` AZs. The VPC consists of six subnets
    in total: two public subnets to host your ALB nodes and NAT gateway, two private
    subnets to host your application tier, and another two private subnets to host
    the database tier.'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You also have an Amazon S3 bucket to host all the application source code and
    files.
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An IAM role that will allow your EC2 instances to gain authorization to read
    and download the application source code from the S3 bucket.
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An RDS database deployed in the `us-east-1a` AZ as a single database instance.
    Ideally, you would want to configure your database with Multi-AZ for HA.
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two EC2 instances deployed using an Auto Scaling group and Launch Configuration.
    The Launch Configuration contains the necessary **bootstrapping** script to set
    up and configure the EC2 instances as web servers and automatically serve the
    application to your users. Furthermore, the Auto Scaling group automatically registers
    any EC2 instances deployed to the ALB target group. The target group runs health
    checks against the EC2 instances, marking them as healthy or unhealthy based on
    the health checks defined.
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the application code has the necessary database connection to access
    the backend RDS database and store any application data. Note that storing database
    connection details within the application is not considered best practice, and
    AWS offers several options such as the **AWS Systems Manager Parameter Store**
    or **AWS Secrets Manager** to manage such pieces of sensitive data. To keep this
    lab simple, we stored the database connection details within the application code.
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we look at how to test the AWS Auto Scaling service by simulating a failure
    of an EC2 instance.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Auto Scaling service
  id: totrans-446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this part of the exercise, you will stop an EC2 instance to simulate failure.
    When the EC2 instance is in a stopped state, it will not respond to the load balancer
    health checks. The load balancer will then mark the EC2 instances as unavailable.
    This will send a notification to the Auto Scaling group, confirming that there
    are fewer than two EC2 instances in the group, which is less than the desired
    capacity. Auto Scaling should then replace the instance and new server. Let''s
    proceed with simulating this failure of an EC2 instance, as follows:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: In the EC2 dashboard, click on the **Instances** link from the left-hand menu.
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, in the right-hand pane of the screen, you will note that you have two
    EC2 instances running. Select the instance that is in the `us-east-1b` AZ, as
    per the following screenshot:![Figure 9.31 – EC2 instances in Running state
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_09_31.jpg)'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.31 – EC2 instances in Running state
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the `us-east-1b` AZ is selected.
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be prompted with a dialog box to confirm whether you want to stop the
    selected instance. Go ahead and click the **Stop** button.
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS will then perform a shutdown of your EC2 instance, which will take a couple
    of minutes. Wait until the EC2 instance is in a **Stopped** state, and then proceed
    to click on the **Auto Scaling Group** link under the **Auto Scaling** category
    from the left-hand menu.
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, in the right-hand pane, click the `Production-ASG` Auto Scaling group.
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Activity** tab.
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will find additional activities that clearly show that the Auto Scaling
    service terminated the stopped EC2 instance. This is because, in a stopped state,
    it cannot respond to health checks. This is then followed by the launch of a new
    EC2 instance to replace the one that got terminated (see the following screenshot),
    in order to maintain our desired capacity at two instances as per the Auto Scaling
    group configuration. You will note that the Auto Scaling service will not try
    to restart the stopped instance. The Auto Scaling group will use the same Launch
    Configuration to configure the server with the application and register it to
    the ALB's target group, as illustrated here:![Figure 9.32 – Auto Scaling activity
    history
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_09_32.jpg)'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.32 – Auto Scaling activity history
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that the Auto Scaling service has replaced your EC2 instance, you can visit
    your application via the ALB URL to confirm that your application is still functioning
    as expected. Note that when one of the EC2 instances was stopped, the application
    was still accessible via the ALB URL because traffic would have been forwarded
    onto the other EC2 instance that was still running in the `us-east-1a` AZ.
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! Well done on completing the series of exercises to get to this
    stage. You have now learned how to design and architect a multi-tier application
    solution using a combination of AWS services to help you build an HA and scalable
    application.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, you will perform a cleanup operation to terminate unwanted
    resources so that you do not incur any further charges.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 9.7 – cleanup
  id: totrans-463
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will terminate the various resources you deployed in
    the previous exercises. The first step is to delete the Auto Scaling group, which
    will terminate your EC2 instances. If you try terminating the EC2 instances manually,
    then the Auto Scaling group will simply launch new ones. Proceed as follows:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: From the EC2 dashboard, click on **Auto Scaling Group** from the left-hand menu
    under **Auto Scaling**.
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the right-hand pane, select the `Production-ASG` Auto Scaling group. Click
    the `delete` in the textbox and clicking the **Delete** button.
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on **Launch Configuration** from the left-hand menu under the **Auto
    Scaling** service.
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the `Production-LC` Launch Configuration, and from the **Actions**
    menu, click **Delete Launch Configuration**. Confirm the delete request.
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click **Load Balancers** under the **Load Balancing** menu.
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the right-hand pane, select the `Production-ALB` load balancer, and from
    the **Actions** drop-down list, click **Delete**.
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on `Production-TG` target group, and from the **Actions** drop-down
    list, click **Delete** and delete the target group.
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your load balancer and the Auto Scaling group have been removed from your account.
    Next, navigate to the Amazon RDS console, as follows:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: From the left-hand menu, click on **Databases**.
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the right-hand pane, select the database that you created earlier in [*Chapter
    8*](B17124_08_Final_SK_ePub.xhtml#_idTextAnchor189), *AWS Databases Services*.
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Actions** drop-down list, click **Delete**.
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the `delete me` in the confirmation textbox and click the **Delete**
    button. Your Amazon RDS database will now be deleted.
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we should also remove the database subnet group created previously. From
    the left-hand menu, click on **Subnet groups**.
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the right-hand pane, select the database subnet group you created previously
    and click the **Delete** button.
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that your database has also been deleted, we can delete the VPC. Navigate
    to the VPC console.
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Before we can delete the VPC, you need to delete the NAT gateway. From the left-hand
    menu, click on `Production-NAT` NAT gateway, and from the `delete` in the confirmation
    box and click the **Delete** button.
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, you need to check whether there are any network interfaces still attached
    to your VPC. Usually, you will find that the Amazon RDS network interface (`RDSNetworkInterface`)
    may still be attached to the `Database-SG` security group. If that is the case,
    you will first need to delete this interface before you can delete the VPC, as
    follows:'
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the EC2 console and select `Production-VPC` security group ID.
    Select the network interface and then, from the **Actions** menu, click the **Delete**
    button. The following screenshot shows the attached network interface:'
  id: totrans-482
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.33 – Network interfaces attached to your VPC'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_09_33.jpg)'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.33 – Network interfaces attached to your VPC
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: Navigate back to the VPC console. Next, from the left-hand menu, click on **Your
    VPCs**.
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the right-hand pane, select the `Production-VPC` security group, and then,
    from the **Actions** drop-down list, select **Delete VPC**.
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be presented with a list of all components of your VPC that will be
    deleted. Confirm your delete request by typing `delete` into the confirmation
    textbox and then clicking the **Delete** button.
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your VPC should now get deleted. Within the VPC console, there is still one
    more component you need to delete, and that is the elastic IP address you allocated
    to your AWS account. This is because elastic IP addresses are only free if they
    are associated with running instances (or in our case, the NAT gateway). Proceed
    as follows:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: From the left-hand menu, click on **Elastic IPs**.
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the right-hand pane, select the IP address you allocated to your AWS account,
    and from the **Actions** drop-down list, click the **Release Elastic IP addresses**
    link. Next, in the **Release Elastic IP addresses** dialog box, click the **Release**
    button.
  id: totrans-491
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, your elastic IP address has been released back to AWS. You will
    not incur any charges on unused elastic IP addresses in your account.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: This completes your cleanup exercise for this chapter, and you can now rest
    assured that you will not incur any further costs associated with this lab.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: You still have an Amazon S3 bucket that hosts all the source code for the application
    you deployed in this chapter. While you could delete that resource, we advise
    you to keep the bucket as we will be using it for the exercises in the next chapter.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: Next, we provide a summary of this chapter and the key concepts to remember
    for the exam.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-497
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the differences between vertical scaling
    and horizontal scaling. We discussed options to increase an EC2 instance's specification
    and capacity. We then examined the AWS ELB service and how it can be used to evenly
    distribute incoming application traffic across a fleet of EC2 instances. You learned
    about the different types of ELBs and their use cases—ALBs, NLBs, GWLBs, and CLBs.
    We discussed how, using ELB, you can distribute the placement of EC2 instances
    that power your application across multiple AZs, thereby offering HA of services
    in case of AZ failures or outages.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: Next, we examined how we can automatically scale out (add more EC2 instances
    to our fleet of servers that support an application) using the Amazon Auto Scaling
    service. Auto Scaling can help us scale out when demand increases and equally
    scale back in when demand drops, ensuring that you always have the right number
    of EC2 instances to provide the best **user experience** (**UX**) for your application.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: Both ELB and Auto Scaling, however, are Regional services only. This means using
    these two services alone cannot offer global resilience. To offer HA across Regions,
    we discussed how we can use Route 53 and other global services such as CloudFront.
    Route 53 offers several routing policies to make it possible to distribute traffic
    to application servers spread across the globe and offers options to build complete
    **disaster recovery** (**DR**) and business continuity solutions for your business.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we look at a number of AWS services designed to help you
    build applications on AWS that move away from traditional monolith architectures
    in favor of modern decoupled architecture and microservices.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-502
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You are planning on developing a website in multiple languages such that you
    have one fleet of EC2 instances that serves the English version of your site and
    another fleet that serves the Spanish version of your site. For each language
    version, you will be configuring URLs with different paths such that the English
    version of your site will contain `/en/` in the path and the Spanish version will
    contain `/es/`.
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which type of load balancer would you use to route traffic to ensure users connect
    to the site in their desired language?
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: CLB
  id: totrans-505
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: NLB
  id: totrans-506
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: ALB
  id: totrans-507
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Path-based load balancer
  id: totrans-508
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You are building a multi-tier architecture with web servers placed in the public
    subnet and application servers placed in the private subnet of your VPC. You need
    to deploy ELBs to distribute traffic to both the web server farm and the application
    server farm. Which type of load balancer would you choose to distribute traffic
    to your application servers?
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Internet-facing
  id: totrans-510
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Internal load balancer
  id: totrans-511
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Dynamic load balancer
  id: totrans-512
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Static load balancer
  id: totrans-513
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which ELB is ideal for handling volatile workloads and can scale to millions
    of requests per second?
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ALB
  id: totrans-515
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: NLB
  id: totrans-516
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CLB
  id: totrans-517
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Premium load balancer
  id: totrans-518
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which configuration feature of the AWS Auto Scaling service enables you to define
    a maximum number of EC2 instances that can be launched in your fleet?
  id: totrans-519
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Auto Scaling group
  id: totrans-520
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Auto Scaling Launch Configuration
  id: totrans-521
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Auto Scaling max fleet size
  id: totrans-522
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Auto Scaling policy
  id: totrans-523
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When an ELB detects an unhealthy EC2 instance, which action does it perform
    regarding distributing incoming traffic?
  id: totrans-524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It continues to send traffic to the failed instance.
  id: totrans-525
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It terminates the failed instance so that it is not part of the ELB target group.
  id: totrans-526
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It only sends traffic to the remaining healthy instances.
  id: totrans-527
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It restarts the unhealthy EC2 instance.
  id: totrans-528
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which service does an AWS ALB integrate with to protect your applications from
    common web attacks?
  id: totrans-529
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: WAF
  id: totrans-530
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Shield
  id: totrans-531
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Inspector
  id: totrans-532
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Key Management Service** (**KMS**)'
  id: totrans-533
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
