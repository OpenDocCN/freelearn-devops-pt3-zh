- en: <st c="0">8</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Continuous Security Monitoring on Azure</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="41">In previous chapters, we emphasized that the main objective of DevSecOps
    is to make security a regular part of every phase of the software development
    process.</st> <st c="202">The outcome is that we can catch and fix most security
    issues before the software is deployed in production and goes live.</st> <st c="325">But
    what about security after the software is released?</st> <st c="381">A complete
    DevSecOps strategy should complement the security measures implemented earlier
    in the development process with</st> <st c="503">runtime security.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="520">In this chapter, we will</st> <st c="546">cover some key aspects
    of implementing security</st> <st c="594">in the</st> **<st c="601">operate</st>**
    <st c="608">and</st> **<st c="613">monitor</st>** <st c="620">phases of DevOps,
    including implementing runtime vulnerability management, threat detection, and
    threat prevention.</st> <st c="737">By the end of this chapter, you will have
    a solid understanding of</st> <st c="804">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="818">Understanding continuous monitoring</st> <st c="855">in DevOps</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="864">Implementing runtime security gates to prevent</st> <st c="912">critical
    risks</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="926">Implementing continuous security monitoring for</st> <st c="975">runtime
    environments</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="995">The challenges of runtime protection in modern</st> <st c="1043">cloud
    environments</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1061">Protecting applications running in Azure</st> <st c="1103">App
    Service</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1114">Protecting container workloads</st> <st c="1146">in Azure</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1154">Let’s</st> <st c="1161">get started.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1173">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1196">To follow along with the instructions in this chapter, you will
    need</st> <st c="1266">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1280">A PC with an</st> <st c="1294">internet connection</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1313">An active</st> <st c="1324">Azure subscription</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1342">An Azure</st> <st c="1352">DevOps organization</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1371">A GitHub</st> <st c="1381">enterprise organization</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1404">Understanding continuous monitoring in DevOps</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1450">The fifth</st> <st c="1461">practice of DevOps that we introduced
    in the opening</st> <st c="1514">chapter of this book is</st> **<st c="1538">Continuous
    Monitoring</st>** <st c="1559">(</st>**<st c="1561">CM</st>**<st c="1563">).</st>
    <st c="1567">CM involves two main tasks –</st> **<st c="1596">gathering user feedback</st>**
    <st c="1619">and</st> **<st c="1624">collecting real-time telemetry data</st>**<st
    c="1659">. User feedback is used to set future</st> <st c="1697">priorities.</st>
    <st c="1709">Telemetry data is used to quickly detect and address operational
    issues, reduce downtime, and uphold service reliability</st> <st c="1830">and
    availability.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1847">To achieve</st> <st c="1859">this, CM relies on monitoring tools
    for data collection across applications, infrastructure, and networks.</st> <st
    c="1966">In Azure, Application Insights is a key service for CM.</st> <st c="2022">It
    has similar</st> **<st c="2037">Application Performance Management</st>** <st
    c="2071">(</st>**<st c="2073">APM</st>**<st c="2076">) capabilities to Dynatrace
    and Datadog APM.</st> <st c="2122">It can be used to collect data from running
    applications, using either a codeless or code-based approach.</st> <st c="2228">This
    data can then be analyzed to offer insights into application health, live metrics,
    transaction searches, and user behavior (</st>*<st c="2357">Figure 8</st>**<st
    c="2366">.1</st>*<st c="2368">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – An Azure Application Insights overview](img/B19710_08_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="2742">Figure 8.1 – An Azure Application Insights overview</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2793">Implementing security in this phase involves extending data collection
    to include security logs and metrics.</st> <st c="2903">These logs and metrics
    can be analyzed to detect unauthorized access attempts, potential security breaches,
    and vulnerabilities.</st> <st c="3032">This process can be complex because modern
    cloud-native applications running on cloud platforms</st> <st c="3128">such as
    Azure often use managed services (e.g., App Service, Function Apps, Container
    Instances, and Container Apps).</st> <st c="3246">These</st> <st c="3252">services
    may have limitations on what security teams can do.</st> <st c="3313">Traditional
    methods, such as agent-based runtime monitoring, are often ineffective in these
    environments.</st> <st c="3419">Another challenge is the distributed nature of
    these applications, which can leave security teams unsure where to start with</st>
    <st c="3544">securing them.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3558">Understanding the interconnected risks of Azure and cloud-native
    applications</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="3636">Modern cloud-native applications are distributed and complex, involving
    multiple technology</st> <st c="3729">stacks, microservices, and external API
    interactions.</st> <st c="3783">In cloud-native</st> <st c="3799">environments,
    code that has gone through the CI/CD pipeline is delivered to run as a container
    (although some organizations still run code directly on hosts).</st> <st c="3958">This
    container runs inside a node, which is managed by a cluster orchestrator such
    as Kubernetes, Service Fabric, or OpenShift, or by a platform service such as
    Azure Web Apps, Azure Container Instances, or Azure Functions.</st> <st c="4182">All
    of these operate on the Azure cloud platform (</st>*<st c="4232">Figure 8</st>**<st
    c="4241">.2</st>*<st c="4243">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – An intersection of risks for cloud-native applications](img/B19710_08_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="4337">Figure 8.2 – An intersection of risks for cloud-native applications</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4404">The reason why securing modern cloud-native applications is complex
    is that each part of this stack operates under different security models.</st>
    <st c="4547">The security model for container orchestrators such as Kubernetes
    and OpenShift is different from the security model for cloud services</st> <st
    c="4683">such as Function Apps and Container Apps, which in turn is different
    from the security model for Windows and Linux nodes.</st> <st c="4805">The scale
    of the cloud and the fast pace of development add to this complexity.</st> <st
    c="4885">Runtime cloud-native application security in Azure must be considered
    together due to their interconnectedness, creating an</st> **<st c="5009">intersection</st>**
    **<st c="5022">of risks</st>**<st c="5030">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5031">A malicious</st> <st c="5044">user gaining shell access in a running
    container could exfiltrate source code, keys, tokens, and credentials, potentially
    compromising other services in a cloud platform.</st> <st c="5215">They could
    also exploit container permissions to compromise cluster nodes and access other
    workloads.</st> <st c="5317">Conversely, a weak cloud credential could be used
    to compromise containers in the registry and access source code, encryption keys,
    and sensitive data intended for</st> <st c="5481">the workload.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5494">To mitigate these risks, our security efforts must focus on two
    key aspects – securing a runtime environment and implementing application security
    at runtime.</st> <st c="5654">Let’s examine these two aspects in detail, starting
    with the</st> <st c="5715">first one.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5725">Securing an application runtime environment</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="5769">Despite our best efforts to address security issues early on, unforeseen
    vulnerabilities can emerge</st> <st c="5870">in software production.</st> <st
    c="5894">Also, the complexity of modern applications means that some risks may
    only become apparent during</st> <st c="5992">actual operation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6009">If we</st> <st c="6016">embrace a</st> **<st c="6026">zero trust</st>**
    <st c="6036">mindset (and we should), we need to accept that no system/process
    is perfectly secure and prepare for possible security breaches.</st> <st c="6167">This
    is known as an “assume breach” mentality.</st> <st c="6214">This is why DevSecOps
    does not stop at deployment.</st> <st c="6265">Runtime security should be integrated
    as a last line of defense to govern, identify, protect, detect, and respond to
    security issues as they happen in live applications and recover from them.</st>
    <st c="6457">The first point of this integration is the implementation of runtime
    gates and guardrails to prevent the most critical risks from being deployed if
    earlier checkpoints</st> <st c="6625">are bypassed.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6638">Implementing runtime security gates to stop critical risks</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="6697">Security</st> <st c="6707">gates serve an important purpose in
    DevSecOps.</st> <st c="6754">They prevent the most serious</st> <st c="6784">software
    risks from being deployed to our production cloud environment.</st> <st c="6856">In</st>
    [*<st c="6859">Chapter 7</st>*](B19710_07.xhtml#_idTextAnchor145)<st c="6868">,
    we covered how to set up security gates in our release pipelines (pipeline security
    gates).</st> <st c="6962">However, it is also possible to implement security gates
    at runtime (runtime security gates), but they have limitations.</st> <st c="7083">Runtime
    security gates work in fewer scenarios compared</st> <st c="7139">to pipeline
    security gates.</st> <st c="7167">Here are some examples of where runtime gates
    can be effective</st> <st c="7230">in Azure:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="7239">Azure Policy</st>**<st c="7252">: When creating resources on
    the Azure</st> <st c="7292">cloud platform</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="7306">The Kubernetes admission controller</st>**<st c="7342">: When
    deploying containerized solutions/applications to Kubernetes clusters (self-managed
    or managed)</st> <st c="7446">in Azure</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="7454">Anti-malware</st>**<st c="7467">: When deploying a packaged
    application to an Azure virtual machine that has an anti-malware/anti-exploit</st>
    <st c="7574">solution installed</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Pipeline security gates versus runtime security gates](img/B19710_08_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="7895">Figure 8.3 – Pipeline security gates versus runtime security gates</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7961">For</st> <st c="7966">other Azure services, runtime security gates
    are not natively supported, except when we deploy third-party</st> <st c="8073">security
    solutions or create our own custom approach.</st> <st c="8127">For example, when
    deploying a web app to Azure App Service, a microservice to Azure Functions apps,
    or a containerized service to Azure Container Instances, the release pipeline
    security gates are our main defense against the deployment of critical risks.</st>
    <st c="8383">All of these operate on the Azure cloud platform (</st>*<st c="8433">Figure
    8</st>**<st c="8442">.3</st>*<st c="8444">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8447">Implementing runtime security gates using Azure Policy</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="8502">Azure Policy is a configuration assessment and enforcement service
    in Azure.</st> <st c="8580">It can be used</st> <st c="8595">to review API requests
    before they are processed by the Azure management</st> <st c="8668">plane.</st>
    <st c="8675">It can also</st> <st c="8687">review the settings of resources created
    in Azure.</st> <st c="8738">For our use case as a runtime security gate, it can
    be used to do</st> <st c="8804">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8818">Stop new Azure resources from being created if they violate our</st>
    <st c="8883">security policies</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8900">Prevent changes to existing resources if they violate our</st>
    <st c="8959">security policies</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8976">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8981">It is not our goal to repeat basic facts about Azure Policy or
    Microsoft Defender for Cloud.</st> <st c="9075">Instead, we will concentrate on
    specific use cases relevant to our discussion.</st> <st c="9154">If you want to
    learn more about these services, check out the book</st> *<st c="9221">Microsoft
    Azure Security Technologies Certification and Beyond</st>* <st c="9283">by</st>
    <st c="9287">Packt Publishing.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9304">We can apply policies at different levels of our Azure hierarchy
    – management group, subscription, and resource group.</st> <st c="9424">To make
    assigning policies easier, Azure allows you to group</st> <st c="9485">policies
    as</st> **<st c="9497">initiatives</st>**<st c="9508">. An initiative is simply
    a group of policies that</st> <st c="9559">can be assigned as one entity.</st>
    <st c="9590">Microsoft provides a built-in initiative called the</st> **<st c="9642">Microsoft
    cloud security benchmark</st>** <st c="9676">(</st>*<st c="9678">Figure 8</st>**<st
    c="9686">.4</st>*<st c="9688">) with 241 security-related policies (at the time
    of writing).</st> <st c="9752">Most of the policies in this initiative are set
    to the</st> **<st c="9807">Audit</st>** <st c="9812">effect, which means they
    observe and report violations but do not</st> <st c="9879">block actions.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – The Microsoft cloud security Azure Policy initiative](img/B19710_08_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="10344">Figure 8.4 – The Microsoft cloud security Azure Policy initiative</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10409">Start</st> <st c="10416">by reviewing the policies in this initiative.</st>
    <st c="10462">Identify the ones that pose the most</st> <st c="10499">significant
    risks.</st> <st c="10518">Then, evaluate</st> <st c="10533">the impact of preventing
    these risks from being created by setting the policies to the</st> **<st c="10620">Deny</st>**
    <st c="10624">effect.</st> <st c="10633">Changing a policy to</st> **<st c="10654">Deny</st>**
    <st c="10658">means it will block actions that do not comply, instead of just</st>
    <st c="10723">reporting them.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10738">Implementing runtime security gates using the Kubernetes admission
    controller</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="10816">The</st> <st c="10821">admission controller is a Kubernetes component
    that intercepts</st> <st c="10884">requests to the Kubernetes API server before
    they are processed.</st> <st c="10949">It is commonly</st> <st c="10964">used
    to enforce security and compliance checks.</st> <st c="11012">To make implementing
    the Admission</st> <st c="11047">Controller easier, the CNCF offers the</st> **<st
    c="11086">Open Policy Agent</st>** <st c="11103">(</st>**<st c="11105">OPA</st>**<st
    c="11108">), an open source policy engine.</st> <st c="11142">OPA uses the Rego
    language to define rules, from simple checks (such as ensuring all containers
    have resource limits) to complex, multi-step evaluations.</st> <st c="11296">The
    OPA Gatekeeper Library provides sample templates for common scenarios, such as
    enforcing container image sources, restricting privileged containers, and ensuring
    proper labels.</st> <st c="11477">These can be viewed</st> <st c="11497">on the
    OPA website</st> <st c="11516">here:</st> [<st c="11522">https://open-policy-agent.github.io/gatekeeper-library/website</st>](https://open-policy-agent.github.io/gatekeeper-library/website)<st
    c="11584">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11585">Azure</st> <st c="11592">Policy integrates with OPA to manage
    and enforce policies in</st> **<st c="11653">Azure Kubernetes Service</st>** <st
    c="11677">(</st>**<st c="11679">AKS</st>**<st c="11682">) clusters.</st> <st c="11695">This
    integration allows policies defined at the Azure level to be enforced within Kubernetes
    environments, providing a unified way to manage policies across Azure and Kubernetes.</st>
    <st c="11874">To use this capability, we need to deploy the Azure Policy add-on
    on our Kubernetes clusters.</st> <st c="11968">This can be done at the subscription
    level or for individual clusters.</st> <st c="12039">To enable it at the subscription
    level, we can assign the</st> **<st c="12097">Azure Kubernetes Service clusters
    should have the Azure Policy Add-on for Kubernetes installed</st>** <st c="12191">Azure
    Policy recommendation to our subscription or management group.</st> <st c="12261">It
    is good practice to apply governance</st> <st c="12301">policies at broader levels,
    such as the management group or subscription, to ensure new clusters will automatically
    have the</st> <st c="12426">add-on installed.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12443">At the</st> <st c="12451">time of writing, there are 79 built-in
    Kubernetes-related policies covering areas such</st> <st c="12538">as security,
    authentication and access control, resource management, configuration management,
    compliance, and governance.</st> <st c="12661">For example, the</st> `<st c="13049">^[^/]+.azurecr.io/.+$</st>`
    <st c="13070">ensures that only images from an Azure container registry (</st>`<st
    c="13130">.azurecr.io/</st>`<st c="13142">) can be deployed to the covered</st>
    <st c="13176">Kubernetes clusters.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5 – Assigning the Azure policy to restrict container registries
    or images permitted in the cluster](img/B19710_08_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="13474">Figure 8.5 – Assigning the Azure policy to restrict container
    registries or images permitted in the cluster</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13581">For</st> <st c="13586">each policy that we assign, we can specify
    excluded namespaces, images, and containers.</st> <st c="13674">It</st> <st c="13677">is
    recommended to collaborate with development and DevOps teams who have detailed</st>
    <st c="13759">knowledge of the applications and Kubernetes operations to ensure</st>
    <st c="13825">appropriate exclusions.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13848">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13853">Policies with the</st> **<st c="13872">Deny</st>** <st c="13876">effect
    will not impact already deployed containers or resources retroactively.</st> <st
    c="13956">Existing containers will continue to run until they are restarted, updated,</st>
    <st c="14032">or replaced.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14044">In addition to the preceding policy, here are four additional
    policies to consider implementing at</st> <st c="14144">a minimum:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="14154">Policy</st>*<st c="14161">:</st> **<st c="14164">Kubernetes
    cluster pod FlexVolume volumes should only use</st>** **<st c="14222">allowed
    drivers</st>**<st c="14237">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="14238">Background</st>*<st c="14249">: In Kubernetes, a FlexVolume
    is a plugin mechanism that allows users to add storage to their pods using various
    storage drivers.</st> <st c="14380">These drivers are</st> <st c="14398">responsible
    for connecting the pod to the storage backend.</st> <st c="14457">However, if</st>
    <st c="14469">untrusted or malicious drivers are used, they can pose security</st>
    <st c="14533">risks.</st> <st c="14540">For example, malicious drivers might allow
    attackers to gain unauthorized access to sensitive data or exploit</st> <st c="14650">system
    resources.</st>'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*<st c="14667">What the policy does</st>*<st c="14688">: If assigned with a</st>
    **<st c="14710">Deny</st>** <st c="14714">effect, any application pod deployment
    using an unapproved FlexVolume driver will be blocked</st> <st c="14808">from
    deployment.</st>'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*<st c="14824">Policy</st>*<st c="14831">:</st> `<st c="14938">/proc</st>`
    <st c="14943">filesystem provides a mechanism for the kernel to expose information
    about the system and running processes to userspace.</st> <st c="15066">Instead
    of containing “real” files,</st> `<st c="15102">/proc</st>` <st c="15107">contains
    runtime system information (e.g., system memory, devices mounted, and hardware
    configuration) and details about each process running on the system.</st> <st
    c="15265">Exposing too much information or allowing unrestricted access can lead
    to information leakage and potential exploitation by malicious users.</st> <st
    c="15406">For example, a malicious process could alter kernel parameters to destabilize
    a system or weaken its</st> <st c="15507">security posture.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="15524">In Kubernetes, within the</st> `<st c="15551">SecurityContext</st>`
    <st c="15566">definition, we can use the</st> `<st c="15594">ProcMount</st>` <st
    c="15603">type to specify how the</st> `<st c="15628">/proc</st>` <st c="15633">filesystem
    is mounted in application containers (see the following example).</st> <st c="15711">There
    are three main ProcMount</st> <st c="15742">types –</st> `<st c="15807">Unmasked</st>`
    <st c="15815">option poses the most risk, as it provides</st> <st c="15859">full
    access to the</st> `<st c="15878">/proc</st>` <st c="15883">filesystem, allowing
    containers to see and manipulate all process information.</st> <st c="15963">This
    could</st> <st c="15974">be exploited to expose sensitive information</st> <st
    c="16019">and system details and, in a worst-case scenario, manipulate</st> <st
    c="16080">kernel parameters:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="16248">The</st> `<st c="16253">/proc</st>` <st c="16258">filesystem</st>
    <st c="16270">contains a variety of information about the processes</st> <st c="16324">running
    on a system.</st> <st c="16345">If containers use an inappropriate</st> `<st c="16380">ProcMount</st>`
    <st c="16389">type, it could expose sensitive information or system details to
    unauthorized users.</st> <st c="16475">For instance, a</st> `<st c="16491">ProcMount</st>`
    <st c="16500">type that allows full access to</st> `<st c="16533">/proc</st>`
    <st c="16538">can lead to information leakage and potential</st> <st c="16585">security
    breaches.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*<st c="16603">What the policy does</st>*<st c="16624">: This policy ensures
    that containers can only use specified ProcMount types, such as the</st> `<st
    c="16715">Default</st>` <st c="16722">ProcMount type, which restricts access.</st>
    <st c="16763">If a container tries to use an unapproved ProcMount type such as</st>
    `<st c="16828">Unmasked</st>` <st c="16836">(as shown in the preceding example),
    the deployment will</st> <st c="16894">be blocked.</st>'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*<st c="16905">Policy</st>*<st c="16912">:</st> `<st c="17624">runAsUser</st>`
    <st c="17633">and</st> `<st c="17638">runAsGroup</st>` <st c="17648">fields to
    ensure that containers run with specific approved user and group IDs (see the
    following example).</st> <st c="17757">This practice limits the potential damage
    an attacker can cause if they gain access to a container.</st> <st c="17857">For
    example, running a container with a non-root UID and GID reduces the risk of privilege
    escalation and protects sensitive</st> <st c="17982">system resources:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*<st c="18156">What the policy does</st>*<st c="18177">: This policy ensures
    that Kubernetes pods and containers only run</st> <st c="18245">with approved
    user and group IDs.</st> <st c="18279">It enforces the</st> <st c="18295">use
    of non-root UIDs and GIDs, such as</st> `<st c="18334">1000</st>` <st c="18338">and</st>
    `<st c="18343">3000</st>`<st c="18347">, respectively, in the preceding example.</st>
    <st c="18389">If a container tries to run with an unapproved</st> <st c="18436">UID
    or GID, the deployment will</st> <st c="18468">be blocked.</st>'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*<st c="18479">Policy</st>*<st c="18486">:</st> `<st c="18925">CAP_SYS_ADMIN</st>`
    <st c="18938">capability has extensive control over the system, including the
    ability to modify system configurations and</st> <st c="19047">mount filesystems.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="19065">In Kubernetes, the</st> `<st c="19085">securityContext</st>` <st
    c="19100">definition allows you to specify capabilities that a container can add
    or drop (see the following example).</st> <st c="19209">There are two primary
    actions –</st> `<st c="19241">add</st>` <st c="19244">and</st> `<st c="19249">drop</st>`<st
    c="19253">. Adding capabilities to a container increases its privileges, which
    can potentially be exploited by malicious processes to compromise a system.</st>
    <st c="19398">Conversely, dropping capabilities reduces the attack surface by
    limiting the</st> <st c="19475">container’s privileges:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="19687">In the</st> <st c="19695">preceding example, all capabilities
    are dropped, and</st> <st c="19748">only the</st> `<st c="19757">NET_BIND_SERVICE</st>`
    <st c="19773">capability is added, which</st> <st c="19801">allows the container
    to bind to privileged ports (those</st> <st c="19857">below</st> `<st c="19863">1024</st>`<st
    c="19867">).</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="19870">Granting unnecessary capabilities can lead to significant security
    risks.</st> <st c="19945">For example, a container with</st> `<st c="19975">CAP_NET_ADMIN</st>`
    <st c="19988">can manipulate network configurations, potentially disrupting network
    traffic or snooping on sensitive data.</st> <st c="20098">By controlling which
    capabilities can be used, we mitigate the risk of privilege escalation and</st>
    <st c="20194">system compromise.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*<st c="20212">What the policy does</st>*<st c="20233">: This policy ensures
    that containers can only use specified capabilities, thus preventing the use of
    dangerous or unnecessary privileges.</st> <st c="20373">If a container tries to
    add an unapproved capability, the deployment will</st> <st c="20447">be blocked.</st>'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="20458">We highly</st> <st c="20469">recommend going through the 79 built-in
    policies, identifying the ones that</st> <st c="20545">pose the most critical
    risks to your organization, and implementing them</st> <st c="20618">with a</st>
    **<st c="20625">Deny</st>** <st c="20629">effect.</st> <st c="20638">Custom policies
    can also be created if the built-in policies do not cover your use cases.</st>
    <st c="20728">Now that we have an understanding of</st> <st c="20765">implementing
    runtime security gates, let’s review how to implement continuous security monitoring
    for our</st> <st c="20871">runtime environments.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20892">Implementing continuous security monitoring for runtime environments</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="20961">Modern</st> <st c="20969">cloud runtime environments are not static;
    a simple API call can introduce a misconfiguration that leaves a resource running
    a critical application exposed</st> <st c="21125">and vulnerable.</st> <st c="21141">To
    protect them, the visibility and monitoring of runtime resource configurations
    must be continuous</st> <st c="21242">and agentless.</st> **<st c="21257">Cloud
    Security Posture Management</st>** <st c="21290">(</st>**<st c="21292">CSPM</st>**<st
    c="21296">) is the industry term for tools that help organizations monitor cloud
    resource configuration on an ongoing basis to detect any changes that might pose</st>
    <st c="21449">security risks.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21464">However, the challenges are more complex than just identifying
    misconfigurations.</st> <st c="21547">Not all exposed resources are misconfigured
    or vulnerable.</st> <st c="21606">Effective security requires context to prioritize
    risks, identify toxic combinations that could create attack paths, and understand
    the broader security landscape.</st> <st c="21770">First-generation CSPM solutions
    focused primarily on visibility and configuration assessment, which often resulted
    in excessive noise without addressing the nuanced complexities of modern cloud
    security.</st> <st c="21974">Newer CSPM solutions aim to solve more complex challenges
    such as prioritization, attack path detection, and contextual</st> <st c="22094">risk
    assessment.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22110">At the core of implementing continuous security visibility and
    monitoring for runtime environments</st> <st c="22210">in the Azure Cloud is Microsoft’s</st>
    **<st c="22244">Cloud Native Application Protection Platform</st>** <st c="22288">(</st>**<st
    c="22290">CNAPP</st>**<st c="22295">) solution –</st> **<st c="22309">Microsoft
    Defender for</st>** **<st c="22332">Cloud</st>** <st c="22337">(</st>**<st c="22339">MDC</st>**<st
    c="22342">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22345">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22350">CNAPP is</st> <st c="22360">a security solution designed to protect
    cloud-native applications across their entire life cycle.</st> <st c="22458">It
    combines several security functions into one platform to prevent a tool overload.</st>
    <st c="22543">The main use case of a CNAPP is to provide capabilities to secure
    cloud-native applications right from when they are developed to when they are
    deployed to run in the cloud (also referred to</st> <st c="22734">as</st> *<st
    c="22737">code-to-cloud</st>*<st c="22750">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22753">MDC</st> <st c="22758">currently offers 10 protection plans that
    customers can enable, based on their</st> <st c="22837">security needs and budgets
    (</st>*<st c="22865">Figure 8</st>**<st c="22874">.6</st>*<st c="22876">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6 – MDC plans](img/B19710_08_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="23211">Figure 8.6 – MDC plans</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23233">For continuous security monitoring of runtime environments, the
    Defender CSPM plan of MDC is a great solution that addresses these</st> <st c="23365">newer
    challenges:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="23382">Attack path management</st>**<st c="23405">: Individual cloud
    resource misconfigurations are risky, but</st> <st c="23467">combinations of linked
    misconfigurations can create critical attack paths that put entire applications
    at risk.</st> <st c="23579">MDC’s attack path management feature addresses this
    by analyzing our cloud</st> <st c="23654">resources to identify chains of chains
    of misconfigurations that attackers could exploit.</st> <st c="23744">For example,
    MDC might detect a clear text credential for a database, on a VM that is running
    a public web service.</st> <st c="23860">This creates a path for attackers to
    reach sensitive data on a critical database.</st> <st c="23942">By highlighting
    these interconnected risks, MDC enables security teams to prioritize fixes that
    disrupt entire attack paths, rather than just addressing</st> <st c="24095">isolated
    misconfigurations.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="24122">Risk prioritization</st>**<st c="24142">: Security teams often
    face an overwhelming number of alerts</st> <st c="24204">and recommendations after
    enabling CSPM solutions.</st> <st c="24255">Without proper prioritization, they
    might waste time on minor issues with little business benefits, while missing
    critical vulnerabilities.</st> <st c="24395">MDC’s risk prioritization helps solve
    this problem by sorting recommendations based on their potential impact and how
    easily they can be exploited.</st> <st c="24543">MDC uses a context-aware risk-prioritization
    engine to determine the risk level of each security recommendation.</st> <st c="24656">This
    risk level depends on factors such as resource configuration, network connections,
    and security posture.</st> <st c="24766">For example, an exposed storage account
    with sensitive data will be prioritized higher than one with</st> <st c="24867">generic
    data.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="24880">Infrastructure as Code (IaC) template mapping</st>**<st c="24926">:
    Security misconfigurations</st> <st c="24956">often originate in IaC templates.</st>
    <st c="24990">Without addressing the</st> <st c="25013">source, these issues can
    reappear after redeployments.</st> <st c="25068">MDC’s IaC template mapping solves
    this by linking cloud resources to their originating IaC templates.</st> <st c="25170">When
    MDC detects a security issue in a deployed resource, it identifies the corresponding
    IaC template, allowing developers to fix the root cause.</st> <st c="25317">For
    example, if MDC finds an overly permissive network security group, it can point
    to the exact line in the Terraform template that needs updating, preventing the
    issue from recurring in future</st> <st c="25512">deployments.</st> <st c="25525">It
    relies</st> <st c="25535">on capabilities from the popular open source IaC template-scanning
    tool Checkov</st> <st c="25615">for this.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="25624">Data security posture management</st>**<st c="25657">: Effective
    risk management requires you</st> <st c="25699">to understand not just where vulnerabilities
    exist but also the sensitivity of the data at risk.</st> <st c="25796">MDC’s data
    security</st> <st c="25816">posture management feature addresses this by scanning
    and classifying data across your cloud environment.</st> <st c="25922">It then
    integrates this information with its security assessments, providing a more comprehensive
    view of risk.</st> <st c="26034">For example, if MDC detects two similarly misconfigured
    databases, with one containing customer financial data and the other holding non-sensitive
    marketing materials, it will prioritize the financial database for immediate attention.</st>
    <st c="26269">This context-aware approach ensures that security teams focus their
    efforts on protecting the most critical data first, significantly improving the
    overall</st> <st c="26425">security posture.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="26442">MDC has</st> <st c="26451">more capabilities than these, including
    recently added ones such as</st> **<st c="26519">AI Security Posture Management
    (AI-SPM)</st>**<st c="26558">. To read</st> <st c="26568">more about these capabilities,
    refer to this document:</st> [<st c="26623">https://learn.microsoft.com/en-us/azure/defender-for-cloud/defender-for-cloud-introduction</st>](https://learn.microsoft.com/en-us/azure/defender-for-cloud/defender-for-cloud-introduction)<st
    c="26713">. Later on, in the hands-on exercise of this chapter, you will implement
    the Defender CSPM plan</st> <st c="26809">of MDC.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26816">Protecting applications at runtime in Azure</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="26860">Securing</st> <st c="26870">applications once they have been deployed
    to Azure services is not the same as traditional runtime security on-premises.</st>
    <st c="26991">Cloud services introduce new challenges that require a change in
    approach to a strategy that complements</st> <st c="27096">DevOps practices.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27113">In Azure’s shared responsibility model, Microsoft secures the
    underlying infrastructure, but developers and operations teams must secure the
    applications and data.</st> <st c="27278">This requires</st> <st c="27292">understanding
    Azure’s security features and integrating them with application-level protections.</st>
    <st c="27389">In this section, we will explore the challenges of protecting applications
    at runtime in Azure and discuss how to use Azure-native tools as a</st> <st c="27531">starting
    point.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27546">The challenges of runtime prot</st><st c="27577">ection in modern
    cloud environments</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="27613">The Azure cloud landscape provides many compute options to host
    applications and services, from traditional virtual machines to serverless functions.</st>
    *<st c="27764">Figure 8</st>**<st c="27772">.7</st>* <st c="27774">shows this
    range</st> <st c="27792">and how customer control varies between them.</st> <st
    c="27838">For example, virtual machines offer full OS control, while Azure Functions
    provides minimal operating system interaction.</st> <st c="27960">This variety
    makes consistent security</st> <st c="27999">measures challenging.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28020">A major challenge is supporting the various application and service
    runtime options used in your organization.</st> <st c="28132">Your current solution
    might be able to protect applications on VMs via installed agents, but what about
    services in containers?</st> <st c="28260">It might be able to secure an application
    running as a Linux container on Azure App Service, but does it support Windows
    containers?</st> <st c="28393">Your solution does not need to cover every use
    case, but you need to ensure that your critical assets are protected</st> <st
    c="28509">at runtime.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7 – Azure compute options](img/B19710_08_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="29365">Figure 8.7 – Azure compute options</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29399">As more</st> <st c="29408">organizations move their applications
    from VMs to container services and serverless computing, there needs to be a shift
    in their application runtime protection strategy, due to the differences in how
    these environments operate and the unique challenges they present.</st> <st c="29676">Here
    are some additional challenges</st> <st c="29712">to consider:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="29724">Limited OS access</st>**<st c="29742">: Most Azure compute
    services (with the exception of VMs) abstract the underlying operating system
    from customers.</st> <st c="29858">This makes it difficult to install traditional
    security solutions that rely on OS-level agents.</st> <st c="29954">These agent-based
    security solutions work well for applications on VMs but may not support containerized
    applications or serverless functions.</st> <st c="30097">Effective security solutions
    that can protect applications running in such environments must be able to do
    so, without</st> <st c="30216">persistent agents.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="30234">Autoscaling challenges</st>**<st c="30257">: Some compute services
    can automatically add new instances to process requests on demand.</st> <st c="30349">Services
    such as App Service, Function Apps, Container Apps, and Kubernetes Services can
    automatically add hundreds of instances, sometimes within minutes to process requests.</st>
    <st c="30525">And as the</st> <st c="30536">load goes away, the instances are
    terminated to save costs.</st> <st c="30596">Effective security solutions that
    can protect applications running in such environments need to handle rapid scaling,
    with the ability to start and</st> <st c="30744">stop near-instantaneously.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="30770">Containerization complexities</st>**<st c="30800">: Containers
    are popular for their portability and efficiency, but they also present unique
    security challenges.</st> <st c="30914">Security solutions must be container-aware
    to protect both the host and the individual containers.</st> <st c="31013">Many
    traditional security providers are only beginning to add container awareness to</st>
    <st c="31098">their solutions.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="31114">Serverless challenges</st>**<st c="31136">: Serverless computing
    such as Azure Functions changes how applications run and, consequently, how we
    secure them.</st> <st c="31252">For example, a financial services company may
    run its real-time fraud detection microservice on Azure Container Instances.</st>
    <st c="31375">These containers might spin up for milliseconds to process a transaction
    and then terminate.</st> <st c="31468">Traditional security models that assume
    long-lived servers struggle in</st> <st c="31539">this environment.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="31556">These challenges highlight the need for new security tools designed
    for modern cloud architectures.</st> <st c="31657">As more companies adopt these
    technologies, the security industry is evolving quickly to address these</st>
    <st c="31760">unique issues.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31774">Protecting applications running in Azure App Service</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="31827">Azure</st> <st c="31834">App Service is a managed service used
    to host web applications, APIs, and mobile backend services in the Azure cloud.</st>
    <st c="31952">Using CI/CD pipelines, developers can deploy web or API services
    as code or as containers directly into the service.</st> *<st c="32069">Figure
    8</st>**<st c="32077">.8</st>* <st c="32079">shows examples of implementing the
    Azure App Service deployment action/task in both GitHub Actions (marked as</st>
    **<st c="32190">1</st>**<st c="32191">) and Azure Pipelines (marked</st> <st c="32221">as</st>
    **<st c="32224">2</st>**<st c="32225">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8 – The Azure App Service deployment task in GitHub Actions and
    Azure Pipelines](img/B19710_08_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="33140">Figure 8.8 – The Azure App Service deployment task in GitHub Actions
    and Azure Pipelines</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33228">For</st> <st c="33233">runtime protection of web and API applications
    deployed to Azure App Service, implementing the</st> **<st c="33328">Defender
    for App Service</st>** <st c="33352">plan of MDC is a great starting point.</st>
    <st c="33392">The plan provides runtime threat detection capabilities, mainly
    using behavioral analysis techniques in the five categories described in</st>
    *<st c="33529">Table 8.1</st>*<st c="33538">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '| **<st c="33539">Threats by MITRE</st>** **<st c="33557">ATT&CK tactics</st>**
    | **<st c="33571">Description</st>** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="33583">Pre-attack</st>** **<st c="33595">threat detection</st>**
    | <st c="33611">Detects scanners that probe our running applications for known
    vulnerabilities – for example, web fingerprinting attempts, using tools such as
    Nmap, BlindElephant, WPScan, Joomla Scanner, and</st> <st c="33804">Drupal Scanner.</st>
    |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="33819">Initial access</st>** **<st c="33835">threat detection</st>**
    | <st c="33851">Detects malicious network connection attempts from known malicious
    IP addresses or suspicious endpoints, such as</st> <st c="33965">the following:</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33979">Known malicious IP addresses connecting to the FTP endpoint of
    our</st> <st c="34047">App Service</st><st c="34058">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="34059">An app service resolving a known malicious</st> <st c="34103">DNS
    hostname</st><st c="34115">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="34116">Connection to a sensitive web page hosted in the App Service from
    unusual IP addresses or</st> <st c="34207">User Agents</st><st c="34218">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="34219">Defender for App Service detects these attempts by analyzing</st>
    <st c="34281">various service logs, such as DNS and FTP logs, and compares them
    against known malicious IP addresses and domain names in the Microsoft threat</st>
    <st c="34425">intelligence feed.</st> |
  prefs: []
  type: TYPE_NORMAL
- en: '| **<st c="34443">Attack execution</st>** **<st c="34461">threat detection</st>**
    | <st c="34477">Detects attempts to run malicious or suspicious commands and processes
    on the underlying OS of our app service VM instances after an attacker has exploited
    a vulnerability to gain access.</st> <st c="34666">This is done by analyzing running
    processes, the filesystem, and memory behavior on our app service VM instances.</st>
    <st c="34780">This detects events such as</st> <st c="34808">the following:</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34822">Suspicious downloading of remote files – for example, using</st>
    `<st c="34883">curl</st>` <st c="34887">to download code from sites such as Pastebin
    and saving it</st> <st c="34947">to disk.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="34955">Downloading of suspicious files, such as cryptomining executables
    or</st> <st c="35025">web shells</st><st c="35035">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="35036">The execution of suspicious processes or commands – for example,
    cryptominers, reverse shell tools, credential access tools, processes with known
    attacker tool names, malicious PowerShell PowerSploit cmdlets, attempts to exploit
    the PHP process to run operating system commands, and the</st> `<st c="35324">SVCHOST</st>`
    <st c="35331">process executed from abnormal paths (malware often uses</st> `<st
    c="35389">SVCHOST</st>` <st c="35396">to hide</st> <st c="35405">malicious activity).</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="35425">Abuse of built-in administrator tools such as</st> `<st c="35472">certutil.exe</st>`
    <st c="35484">to decode executables or download binary files, instead of its typical
    use to manage certificates.</st> <st c="35584">Attackers often misuse legitimate
    administrator tools for</st> <st c="35642">malicious purposes.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="35661">Execution</st> <st c="35672">of various file-less attack techniques</st>
    <st c="35711">and toolkits.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="35724">A PHP file found in the</st> `<st c="35749">/upload</st>` <st
    c="35756">folder.</st> <st c="35765">This folder typically does not contain PHP
    files, suggesting a possible exploit taking advantage of arbitrary file</st> <st
    c="35880">upload vulnerabilities.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="35903">Analysis of host/device data, detecting a possible data</st> <st
    c="35960">egress condition.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **<st c="35977">Dangling</st>** **<st c="35987">DNS detection</st>** | <st
    c="36000">Alerts when an App Service website is decommissioned but its custom
    domain (DNS entry) is</st> <st c="36091">not deleted.</st> |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="36103">Post-compromise detection</st>** | <st c="36129">Detects
    whether our hosted apps have been found in identified attacks in the wild, such
    as</st> <st c="36221">the following:</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="36235">The URL of our app was used in a phishing attack that targeted
    Microsoft 365 customers, identified by the Microsoft threat</st> <st c="36359">intelligence
    team</st><st c="36376">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="36377">The URL of our web app is marked as malicious by Windows SmartScreen,
    due to activities spotted by the Microsoft threat</st> <st c="36498">intelligence
    team</st><st c="36515">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="36516">Table 8.1 – The Defender for App Service plan threat detection
    categories</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="36590">Even though Defender for App Service is a good starting point,
    it has its limitations.</st> <st c="36678">For example, it focuses on detecting
    threats rather than stopping them.</st> <st c="36750">This is partly because</st>
    <st c="36773">it analyzes logs instead of using an agent.</st> <st c="36817">When
    security solutions only detect threats without blocking them, the response time
    increases.</st> <st c="36913">The delay between detecting a threat and manual
    intervention gives threats more time to cause damage, potentially leading to data
    breaches or system compromises.</st> <st c="37075">It also increases the workload
    of the security team as they investigate and respond to</st> <st c="37162">every
    detection.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37178">Another Defender for App Service limitation is that it is not
    able to identify known vulnerabilities in our applications at runtime.</st> <st
    c="37312">The ability to do this is critical.</st> <st c="37348">Trying to manually
    hunt down where you have running applications that are affected by the next big
    vulnerability (such as Log4j) is not optimal.</st> <st c="37493">To cover these
    gaps, we can use customized open source tooling or third-party security solutions.</st>
    <st c="37591">For example, some third-party solutions can run as a RASP agent
    alongside our applications to provide additional capabilities, such as blocking
    active threats and identifying known vulnerabilities</st> <st c="37788">in running
    applications.</st> <st c="37813">The challenge that you will need to solve is
    rolling out</st> <st c="37870">at scale.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37879">What is RASP?</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="37893">Runtime Application Security Protection</st>** <st c="37933">(</st>**<st
    c="37935">RASP</st>**<st c="37939">) is a security technology that operates</st>
    <st c="37981">within an application itself to detect and prevent attacks in real
    time.</st> <st c="38054">It monitors the application’s behavior at runtime and
    can take immediate action against potential threats.</st> <st c="38161">RASP offers
    continuous protection in production environments, complementing other pre-deployment
    security measures such as SAST and DAST.</st> <st c="38299">Depending on the security
    provider’s implementation, RASP can sometimes be complex to deploy, and there
    can be concerns about its</st> <st c="38429">performance impact.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38448">Azure App Service offers easier options to roll out security solutions
    such as Tinfoil Security (now part of Synopsys) and Signal Sciences WAF (now part
    of Fastly) using extensions.</st> <st c="38631">You can install them by going
    to your App Service instance →</st> **<st c="38692">Development Tools</st>** <st
    c="38709">→</st> **<st c="38712">Extensions</st>** <st c="38722">→</st> **<st
    c="38725">Add</st>** <st c="38728">(</st>*<st c="38730">Figure 8</st>**<st c="38738">.9</st>*<st
    c="38740">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.9 – Adding some security extensions to Azure App Service](img/B19710_08_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="39664">Figure 8.9 – Adding some security extensions to Azure App Service</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39729">Tinfoil Security provides vulnerability management capabilities,
    while Signal Sciences WAF provides threat prevention and detection for web</st>
    <st c="39870">application attacks.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39890">Protecting serverless workloads at runtime in Azure</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="39942">Serverless</st> <st c="39954">workloads, such as Azure Functions,
    and containerized</st> <st c="40008">applications running on</st> **<st c="40032">Container-as-a-Service</st>**
    <st c="40054">(</st>**<st c="40056">CaaS</st>**<st c="40060">) resources, such
    as</st> **<st c="40082">Azure Container Apps</st>** <st c="40102">(</st>**<st
    c="40104">ACA</st>**<st c="40107">), present unique</st> <st c="40126">runtime
    security challenges due to their ephemeral nature.</st> <st c="40185">For example,
    the consumption plan of Azure Functions does not have reserved instances; instead,
    instances are dynamically allocated on demand, based on requests.</st> <st c="40347">With
    HTTP-triggered functions, Azure’s scale controller can allocate one instance per
    second, and the instances are removed once processing is complete.</st> <st c="40500">This
    transient nature makes traditional security measures less effective and calls
    for specialized security approaches to protect</st> <st c="40630">serverless environments.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40654">Currently, Azure does not offer a native solution for runtime
    vulnerability assessment, threat detection, and prevention specifically for serverless
    workloads.</st> <st c="40815">However, third-party</st> <st c="40836">security
    providers fill these gaps by offering RASP-like solutions.</st> <st c="40904">These
    solutions allow organizations to embed security directly into their serverless
    functions code or containers.</st> <st c="41019">This way, runtime security follows
    the application, regardless of the environment that it is deployed to.</st> <st
    c="41125">This approach typically requires code changes or a customized container</st>
    <st c="41197">build process.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41211">For example, Prisma Cloud by Palo Alto Networks provides Serverless
    Defender, which can be embedded into the function code to monitor and protect
    the function at runtime.</st> <st c="41383">The following code sample shows an
    example of how the Serverless Defender library is added to C# function code, creating
    a new protected handler that wraps the original handler.</st> <st c="41561">When
    the function is invoked at runtime in the cloud, the protected handler is called,
    which then calls the function code.</st> <st c="41684">The protected handler will
    provide capabilities such as runtime vulnerability assessment, threat detection,
    and</st> <st c="41796">threat prevention:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <st c="42113">For</st> <st c="42118">serverless containerized workloads, the
    workflow can be automated to where the runtime security handler can be embedded
    directly inside the container image to establish a point of control.</st> <st
    c="42307">To make the process easier to adopt, some providers may offer the ability
    to automate</st> <st c="42393">this process directly in our</st> **<st c="42422">Continuous
    Deployment</st>** <st c="42444">(</st>**<st c="42445">CD</st>**<st c="42447">)
    pipeline.</st> *<st c="42460">Figure 8</st>**<st c="42468">.10</st>* <st c="42471">shows
    an example of a Palo Alto Prisma Cloud task in an Azure DevOps pipeline to automate
    this type of</st> <st c="42575">security embedding.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.10 – An example of the Prisma Cloud Serverless Defender embed task](img/B19710_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="43068">Figure 8.10 – An example of the Prisma Cloud Serverless Defender
    embed task</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43143">The task will accept an input of the Dockerfile that is used to
    containerize the application</st> <st c="43237">and rebuild it, embedding Prisma
    Cloud’s runtime security in the container image.</st> <st c="43319">When the container
    starts, the Prisma Cloud app-embedded Defender starts as the parent process in
    the container, and it immediately invokes the program as</st> <st c="43474">its
    child.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43484">Protecting container workloads in Azure</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="43524">The Azure</st> <st c="43535">cloud offers</st> <st c="43548">multiple
    services to run containerized applications</st> <st c="43600">and services.</st>
    <st c="43614">Some are container-exclusive, meaning</st> <st c="43652">they only
    run</st> <st c="43666">container workloads:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="43686">Azure Container</st>** **<st c="43703">Instances</st>** <st
    c="43712">(</st>**<st c="43714">ACI</st>**<st c="43717">)</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="43719">Azure Container</st>** **<st c="43735">Apps</st>** <st c="43739">(</st>**<st
    c="43741">ACA</st>**<st c="43744">)</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="43746">Azure Kubernetes</st>** **<st c="43763">Service</st>** <st
    c="43770">(</st>**<st c="43772">AKS</st>**<st c="43775">)</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="43777">Azure Red Hat</st>** **<st c="43791">OpenShift</st>** <st c="43800">(</st>**<st
    c="43802">ARO)</st>**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="43806">Others</st> <st c="43814">are container-compatible, meaning they
    can run both code and</st> <st c="43875">container applications:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43898">Azure</st> <st c="43905">App Service</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="43916">Azure Functions</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="43932">Azure</st> <st c="43939">Service Fabric</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="43953">Azure Batch</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="43965">Azure</st> <st c="43972">Spring Apps</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="43983">Developers can deploy containerized applications to these services
    using CI/CD pipelines.</st> *<st c="44074">Figure 8</st>**<st c="44082">.11</st>*
    <st c="44085">shows examples of implementing the Kubernetes workload deployment
    action/task in both GitHub Actions (marked as</st> **<st c="44198">1</st>**<st
    c="44199">) and Azure Pipelines (marked</st> <st c="44229">as</st> **<st c="44232">2</st>**<st
    c="44233">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.11 – The Kubernetes workload deployment task in GitHub Actions and
    Azure Pipelines](img/B19710_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="45457">Figure 8.11 – The Kubernetes workload deployment task in GitHub
    Actions and Azure Pipelines</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="45548">For</st> <st c="45553">vulnerability management and runtime protection
    of workloads, we can start by implementing the Defender for Container plan of
    MDC.</st> <st c="45684">This plan combines agentless and agent-based approaches
    to detect vulnerabilities and threats for container workloads.</st> <st c="45803">However,
    these capabilities are currently limited to workloads deployed on AKS.</st> <st
    c="45883">For threat detection in Kubernetes workloads, Defender for Containers
    collects and analyzes the following data (</st>*<st c="45995">Figure 8</st>**<st
    c="46004">.12</st>*<st c="46007">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="46010">Audit logs and security events from the</st> <st c="46051">API
    server</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="46061">Security signals and events from</st> <st c="46095">worker nodes</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="46107">Cluster configuration information from the</st> <st c="46151">control
    plane</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="46164">Workload configuration from Azure Policy (we discussed this earlier
    in</st> <st c="46236">this chapter)</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.12 – The Defender for Containers architecture](img/B19710_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="46575">Figure 8.12 – The Defender for Containers architecture</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="46629">Table 8.2</st>* <st c="46639">describes</st> <st c="46650">the
    capabilities of the plan in</st> <st c="46682">more detail:</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '| **<st c="46694">Capability</st>** | **<st c="46705">Description</st>** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="46717">Vulnerability assessment</st>** | <st c="46742">Vulnerability</st>
    <st c="46757">assessment for images stored in</st> **<st c="46789">Azure Container
    Registry</st>** <st c="46814">(</st>**<st c="46815">ACR</st>**<st c="46818">)
    and for running images in</st> <st c="46847">AKS clusters.</st><st c="46860">For
    ACR, the assessment can be done using an agentless approach.</st> <st c="46926">For
    running images in AKS, we can also implement this in an agentless mode by configuring
    the agentless discovery for Kubernetes, or we</st> <st c="47062">can also install
    the</st> **<st c="47083">Defender</st>** **<st c="47092">Sensor</st>** <st c="47098">agent.</st><st
    c="47105">This capability is powered by the Microsoft Defender Vulnerability Management
    solution.</st> <st c="47194">It supports both Linux and Windows containers (which
    is rare), and it supports the scanning of language-specific packages for Python,
    Node.js, .NET, Java,</st> <st c="47349">and Go.</st><st c="47356">The vulnerability
    scan runs at least once a day for images that were pushed in the last 90 days
    or pulled in the last</st> <st c="47475">30 days.</st><st c="47483">Defender for
    Containers also supports the protection of container workloads on AWS and GCP,
    but this is beyond the scope of</st> <st c="47608">this topic.</st> |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="47619">Runtime</st>** **<st c="47628">protection (Kubernetes control
    plane</st>** **<st c="47665">threat detection)</st>** | <st c="47682">Detection
    of suspicious activity for Kubernetes, based on Kubernetes audit</st> <st c="47758">log
    analysis</st><st c="47770">.</st> |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="47771">Runtime protection (Kubernetes workload</st>** **<st c="47812">threat
    detection)</st>** | <st c="47829">Detection of suspicious activities at the cluster,
    node, and</st> <st c="47891">workload levels.</st><st c="47907">This requires
    the Defender Sensor agent to be deployed.</st> <st c="47964">This can be enabled
    at the subscription level OR for</st> <st c="48017">individual clusters.</st>
    |'
  prefs: []
  type: TYPE_TB
- en: <st c="48037">Table 8.2 – The Defender for Containers capabilities</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48090">As highlighted in</st> *<st c="48109">Table 8.2</st>*<st c="48118">,
    some features of the plan require the Defender Sensor agent to be installed on
    Kubernetes clusters, while others do not (which are referred to as agentless).</st>
    <st c="48278">For example, the vulnerability assessment of images stored in ACR
    does not need the sensor.</st> <st c="48370">However, to map vulnerability assessments
    for containers running in AKS clusters, we</st> <st c="48455">need to either deploy
    the sensors or enable agentless discovery</st> <st c="48519">of Kubernetes.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48533">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48538">For a vulnerability assessment of running containers in AKS, sensors
    do not scan the running containers directly.</st> <st c="48653">Instead, they
    collect an inventory of container workloads in the Kubernetes clusters.</st> <st
    c="48739">Defender for Containers then matches this inventory against the vulnerability
    assessment reports of images in ACR.</st> <st c="48854">Therefore, the report
    will only show vulnerabilities for running containers if their images were pulled
    from a scanned ACR.</st> <st c="48978">If the running images were pulled from
    an unscanned registry, Defender for Containers cannot show their vulnerabilities,
    potentially creating a security gap that you need</st> <st c="49149">to consider.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="49161">Understanding the Kubernetes control plane threat detection capabilities
    of Defender for Containers</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="49261">Defender for</st> <st c="49275">Containers offers runtime threat
    detection</st> <st c="49318">for two main areas – the</st> `<st c="49747">K8S_</st>`
    <st c="49751">prefix in the alerts and are detailed in</st> *<st c="49793">Table
    8.3</st>*<st c="49802">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '| **<st c="49803">Threat detection category –</st>** **<st c="49832">Exposed
    services</st>** |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="49848">An exposed Postgres service with trust authentication configuration
    in Kubernetes</st> <st c="49931">detected (</st>`<st c="49941">K8S_ExposedPostgresTrustAuth</st>`<st
    c="49970">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="49972">An exposed Postgres service with risky configuration in Kubernetes</st>
    <st c="50039">detected (</st>`<st c="50049">K8S_ExposedPostgresBroadIPRange</st>`<st
    c="50081">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="50083">An exposed Kubeflow dashboard</st> <st c="50113">detected (</st>`<st
    c="50123">K8S_ExposedKubeflow</st>`<st c="50143">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="50145">An exposed Kubernetes dashboard</st> <st c="50177">detected
    (</st>`<st c="50187">K8S_ExposedDashboard</st>`<st c="50208">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="50210">An exposed Kubernetes service</st> <st c="50240">detected (</st>`<st
    c="50250">K8S_ExposedService</st>`<st c="50269">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="50271">An exposed Redis service in AKS</st> <st c="50303">detected
    (</st>`<st c="50313">K8S_ExposedRedis</st>`<st c="50330">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="50332">Threat detection category –</st>** **<st c="50360">Abnormal
    activities</st>** |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="50379">An</st> <st c="50383">abnormal activity of a managed identity
    associated with Kubernetes (</st><st c="50451">preview) (</st>`<st c="50462">K8S_AbnormalMiActivity</st>`<st
    c="50485">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="50487">An abnormal Kubernetes service account operation</st> <st c="50536">detected
    (</st>`<st c="50546">K8S_ServiceAccountRareOperation</st>`<st c="50578">)</st>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="50580">K8S API requests from proxy IP address</st> <st c="50619">detected
    (</st>`<st c="50629">K8S_TI_Proxy</st>`<st c="50642">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="50644">A suspicious request to the Kubernetes</st> <st c="50683">API
    (</st>`<st c="50688">K8S.NODE_KubernetesAPI</st>`<st c="50711">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="50713">A suspicious request to the Kubernetes</st> <st c="50752">Dashboard
    (</st>`<st c="50763">K8S.NODE_KubernetesDashboard</st>`<st c="50792">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="50794">A Kubernetes penetration testing tool</st> <st c="50832">detected
    (</st>`<st c="50842">K8S_PenTestToolsKubeHunter</st>`<st c="50869">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="50871">Threat detection category – Privilege escalation</st>** **<st
    c="50920">and access</st>** |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="50930">A container with a sensitive volume mount</st> <st c="50973">detected
    (</st>`<st c="50983">K8S_SensitiveMount</st>`<st c="51002">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="51004">New high</st> <st c="51013">privileges role</st> <st c="51029">detected
    (</st>`<st c="51039">K8S_HighPrivilegesRole</st>`<st c="51062">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="51064">A privileged container</st> <st c="51087">detected (</st>`<st
    c="51097">K8S_PrivilegedContainer</st>`<st c="51121">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="51123">Role binding to the</st> `<st c="51143">cluster-admin</st>`
    <st c="51156">role</st> <st c="51162">detected (</st>`<st c="51172">K8S_ClusterAdminBinding</st>`<st
    c="51196">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="51198">Creation</st> <st c="51207">of an admission Webhooks configuration</st>
    <st c="51246">detected (</st>`<st c="51256">K8S_AdmissionController</st>`<st c="51280">)</st>
    |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="51282">Threat detection category – Configuration and</st>** **<st
    c="51328">resource modifications</st>** |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="51350">CoreDNS modification in Kubernetes</st> <st c="51386">detected
    (</st>`<st c="51396">K8S_CoreDnsModification</st>`<st c="51420">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="51422">Kubernetes events</st> <st c="51440">deleted (</st>`<st c="51449">K8S_DeleteEvents</st>`<st
    c="51466">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="51468">A new container in the</st> `<st c="51491">kube-system</st>`
    <st c="51502">namespace</st> <st c="51513">detected (</st>`<st c="51523">K8S_KubeSystemContainer</st>`<st
    c="51547">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="51549">Threat detection category –</st>** **<st c="51577">Malicious
    activities</st>** |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="51597">Digital currency mining container</st> <st c="51632">detected
    (</st>`<st c="51642">K8S_MaliciousContainerImage</st>`<st c="51670">)</st> |'
  prefs: []
  type: TYPE_TB
- en: <st c="51672">Table 8.3 – Defender for Containers (Kubernetes control plane
    threat detections)</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="51752">Understanding the Kubernetes workload threat detection capabilities
    of Defender for Containers</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="51847">Workload threat detection uses the Defender Sensor agent on worker
    nodes to collect security</st> <st c="51941">events for analysis.</st> <st c="51962">At
    the time of writing, it can detect 34 threats, ranging from access to sensitive
    data and suspicious tool detections.</st> <st c="52082">These detections have
    a prefix of</st> `<st c="52116">K8S.NODE_</st>` <st c="52125">in the alerts and
    are listed in</st> *<st c="52158">Table 8.4</st>*<st c="52167">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '| **<st c="52168">Threat detection category – Privilege escalation and</st>**
    **<st c="52222">high privileges</st>** |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="52237">An attempt to create a new Linux namespace from a container</st>
    <st c="52298">detected (</st>`<st c="52308">K8S.NODE_NamespaceCreation</st>`<st
    c="52335">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="52337">A command within a container running with high</st> <st c="52384">privileges
    (</st>`<st c="52396">K8S.NODE_PrivilegedExecutionInContainer</st>`<st c="52436">)</st>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="52438">A container running in privileged</st> <st c="52472">mode (</st>`<st
    c="52478">K8S.NODE_PrivilegedContainerArtifacts</st>`<st c="52516">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="52518">Threat detection category – Anomalous behavior and</st>**
    **<st c="52569">suspicious activity</st>** |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="52588">A history file has been</st> <st c="52613">cleared (</st>`<st
    c="52622">K8S.NODE_HistoryFileCleared</st>`<st c="52650">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="52652">An uncommon connection attempt</st> <st c="52683">detected
    (</st>`<st c="52693">K8S.NODE_SuspectConnection</st>`<st c="52720">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="52722">An attempt to stop the</st> `<st c="52745">apt-daily-upgrade.timer</st>`
    <st c="52768">service</st> <st c="52777">detected (</st>`<st c="52787">K8S.NODE_TimerServiceDisabled</st>`<st
    c="52817">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="52819">Detected suspicious use of the</st> `<st c="52850">nohup</st>`
    <st c="52855">command (</st>`<st c="52865">K8S.NODE_SuspectNohup</st>`<st c="52887">)</st>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="52889">Detected suspicious use of the</st> `<st c="52920">useradd</st>`
    <st c="52927">command (</st>`<st c="52937">K8S.NODE_SuspectUserAddition</st>`<st
    c="52966">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="52968">Detected a suspicious file</st> <st c="52995">download (</st>`<st
    c="53005">K8S.NODE_SuspectDownloadArtifacts</st>`<st c="53039">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="53041">Detected a file download from a known malicious</st> <st c="53089">source
    (</st>`<st c="53097">K8S.NODE_SuspectDownload</st>`<st c="53122">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="53124">A suspicious file timestamp</st> <st c="53152">modification
    (</st>`<st c="53166">K8S.NODE_TimestampTampering</st>`<st c="53194">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="53196">A suspicious Download Then Run</st> <st c="53227">activity
    (</st>`<st c="53237">K8S.NODE_DownloadAndRunCombo</st>`<st c="53266">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="53268">A</st> <st c="53270">possible password change using</st> `<st
    c="53301">crypt-method</st>` <st c="53313">detected (</st>`<st c="53324">K8S.NODE_SuspectPasswordChange</st>`<st
    c="53355">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="53357">Potential port forwarding to an external IP</st> <st c="53401">address
    (</st>`<st c="53410">K8S.NODE_SuspectPortForwarding</st>`<st c="53441">)</st>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="53443">A potential reverse shell</st> <st c="53469">detected (</st>`<st
    c="53479">K8S.NODE_ReverseShell</st>`<st c="53501">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="53503">A security-related process termination</st> <st c="53542">detected
    (</st>`<st c="53552">K8S.NODE_SuspectProcessTermination</st>`<st c="53587">)</st>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="53589">A suspicious request to the Kubernetes</st> <st c="53628">API
    (</st>`<st c="53633">K8S.NODE_KubernetesAPI</st>`<st c="53656">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="53658">A suspicious request to Kubernetes</st> <st c="53693">Dashboard
    (</st>`<st c="53704">K8S.NODE_KubernetesDashboard</st>`<st c="53733">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="53735">A Docker build operation detected on a Kubernetes</st> <st
    c="53785">node (</st>`<st c="53791">K8S.NODE_ImageBuildOnNode</st>`<st c="53817">)</st>
    |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="53819">Threat detection category – Malicious activity and</st>**
    **<st c="53870">known threats</st>** |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="53883">Behavior similar to common Linux bots detected (</st><st c="53932">preview)
    (</st>`<st c="53943">K8S.NODE_CommonBot</st>`<st c="53962">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="53964">Digital</st> <st c="53972">currency mining-related behavior</st>
    <st c="54005">detected (</st>`<st c="54015">K8S.NODE_DigitalCurrencyMining</st>`<st
    c="54046">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="54048">A process associated with digital currency mining</st> <st
    c="54098">detected (</st>`<st c="54108">K8S.NODE_CryptoCoinMinerArtifacts</st>`<st
    c="54142">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="54144">A possible Cryptocoinminer download</st> <st c="54180">detected
    (</st>`<st c="54190">K8S.NODE_CryptoCoinMinerDownload</st>`<st c="54223">)</st>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="54225">A possible backdoor</st> <st c="54245">detected (</st>`<st
    c="54255">K8S.NODE_LinuxBackdoorArtifact</st>`<st c="54286">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="54288">A possible command line exploitation</st> <st c="54325">attempt
    (</st>`<st c="54334">K8S.NODE_ExploitAttempt</st>`<st c="54358">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="54360">A process that accessed the SSH authorized keys file in an
    unusual</st> <st c="54427">way (</st>`<st c="54432">K8S.NODE_SshKeyAccess</st>`<st
    c="54454">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="54456">A possible log tampering activity</st> <st c="54490">detected
    (</st>`<st c="54500">K8S.NODE_SystemLogRemoval</st>`<st c="54526">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="54528">Threat detection category – Suspicious</st>** **<st c="54567">tool
    detections</st>** |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="54582">A possible malicious web shell</st> <st c="54614">detected
    (</st>`<st c="54624">K8S.NODE_Webshell</st>`<st c="54642">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="54644">A possible attack tool</st> <st c="54667">detected (</st>`<st
    c="54677">K8S.NODE_KnownLinuxAttackTool</st>`<st c="54707">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="54709">Indicators associated with a DDOS toolkit</st> <st c="54751">detected
    (</st>`<st c="54761">K8S.NODE_KnownLinuxDDoSToolkit</st>`<st c="54792">)</st>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="54794">A MITRE Caldera agent</st> <st c="54816">detected (</st>`<st
    c="54826">K8S.NODE_MitreCalderaTools</st>`<st c="54853">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="54855">A</st> <st c="54857">possible credential access tool</st> <st
    c="54889">detected (</st>`<st c="54899">K8S.NODE_KnownLinuxCredentialAccessTool</st>`<st
    c="54939">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="54941">Threat detection category – Access to</st>** **<st c="54979">sensitive
    data</st>** |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="54993">Access to the</st> `<st c="55008">kubelet kubeconfig</st>`
    <st c="55026">file</st> <st c="55032">detected (</st>`<st c="55042">K8S.NODE_KubeConfigAccess</st>`<st
    c="55068">)</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="55070">Access to the cloud metadata service</st> <st c="55107">detected
    (</st>`<st c="55117">K8S.NODE_ImdsCall</st>`<st c="55135">)</st> |'
  prefs: []
  type: TYPE_TB
- en: <st c="55137">Table 8.4 – Defender for Containers (Kubernetes workload threat
    detections)</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="55212">Implementing the Defender for Containers plan at scale</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="55267">Implementing</st> <st c="55281">Defender for Containers is a</st>
    <st c="55310">two-step process.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="55327">First, we need to enable the plan in MDC environment settings
    by going to</st> **<st c="55402">Microsoft Defender for Cloud</st>** <st c="55430">→</st>
    **<st c="55433">Management</st>** <st c="55443">→</st> **<st c="55446">Environment
    settings</st>** <st c="55466">→ selecting your management group or subscription
    →</st> **<st c="55519">Settings</st>** <st c="55527">→</st> **<st c="55530">Defender
    plans</st>** <st c="55544">→</st> **<st c="55547">Cloud Workload Protection (CWP)</st>**<st
    c="55578">, and toggling</st> **<st c="55593">Containers</st>** <st c="55603">to</st>
    **<st c="55607">On</st>** <st c="55609">(</st>*<st c="55611">Figure 8</st>**<st
    c="55619">.13</st>*<st c="55622">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Enabling the Defender for Containers plan](img/B19710_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="56263">Figure 8.13 – Enabling the Defender for Containers plan</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="56318">After enabling the plan, we need to enable vulnerability management
    and deploy the Defender Sensor agent to our Kubernetes clusters.</st> <st c="56452">This
    can be done either at the subscription or management group level, using the auto-provisioning
    option, or for individual clusters.</st> <st c="56587">Enabling it at the subscription
    level allows us to enforce protection at scale – once enabled, all existing and
    new AKS clusters will automatically</st> <st c="56735">be protected.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="56748">To</st> <st c="56752">configure agentless vulnerability assessment
    and auto-provisioning, follow</st> <st c="56827">these steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="56839">Go to</st> **<st c="56846">Microsoft Defender</st>** **<st c="56865">for
    Cloud</st>**<st c="56874">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="56875">Navigate to</st> **<st c="56888">Management</st>** <st c="56898">→</st>
    **<st c="56901">Environment settings</st>**<st c="56921">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="56922">Select your management group</st> <st c="56952">or subscription.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="56968">Go to</st> **<st c="56975">Settings</st>** <st c="56983">→</st>
    **<st c="56986">Defender plans</st>** <st c="57000">→</st> **<st c="57003">Cloud
    Workload Protection (CWP)</st>** <st c="57035">→</st> **<st c="57037">Containers</st>**<st
    c="57047">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="57048">Select</st> **<st c="57056">Settings</st>** <st c="57064">under
    the</st> **<st c="57075">Monitoring</st>** **<st c="57086">coverage</st>** <st
    c="57094">column.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="57102">Set</st> **<st c="57107">Defender sensor in Azure</st>** <st c="57131">to</st>
    **<st c="57135">On</st>** <st c="57137">(</st>*<st c="57139">Figure 8</st>**<st
    c="57147">.14</st>*<st c="57150">).</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="57153">Set</st> **<st c="57158">Agentless container vulnerability assessment</st>**
    <st c="57202">to</st> **<st c="57206">On</st>** <st c="57208">(</st>*<st c="57210">Figure
    8</st>**<st c="57218">.14</st>*<st c="57221">).</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Enabling agentless vulnerability management and Defender sensor
    auto-provisioning](img/B19710_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="58414">Figure 8.14 – Enabling agentless vulnerability management and
    Defender sensor auto-provisioning</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="58509">Enabling</st> <st c="58519">this will assign the Azure Policy</st>
    **<st c="58553">Azure Kubernetes Service clusters should have Defender profile
    enabled</st>** <st c="58623">recommendation at the</st> <st c="58646">selected
    scope.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="58661">As mentioned previously, implementing this plan is a great starting
    point, but keep its limitations in mind.</st> <st c="58771">For example, the plan
    does not cover vulnerability management or runtime security for containers running
    in other Azure services, such as App Service, Container Instances, Container Apps,
    or Function Apps.</st> <st c="58977">Also, the vulnerability assessment for AKS
    clusters does not perform a separate scan for container images detected at runtime.</st>
    <st c="59104">Instead, it matches the identified runtime container images with
    vulnerability reports from scanned Azure Container Registries.</st> <st c="59232">If
    your teams deploy images from public or other unscanned registries, you will need
    to address these using</st> <st c="59340">other methods.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="59354">Defender for Containers’ Kubernetes workload threat detection
    capabilities are focused on detecting rather than blocking threats.</st> <st c="59485">It
    mainly relies on behavior-based techniques that focus on monitoring system activities
    and comparing them to known attack patterns.</st> <st c="59619">This approach
    is effective at identifying recognized exploit indicators, but it may be ineffective
    when faced with new and previously unseen attack patterns, as it relies heavily
    on predefined behaviors.</st> <st c="59823">Behavior-based techniques can also
    trigger false positives if the baseline does not accurately reflect</st> <st c="59926">legitimate
    behaviors.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="59947">Other third-party security solution providers support workload-level
    AI-based detections that have a better chance of detecting new and evolving threats
    not matching any known pattern, offering a level of adaptability that behavior-based
    systems lack.</st> <st c="60200">For example, Palo Alto Network’s Prisma Cloud
    uses this technique to learn the expected behavior of deployed containers and
    automatically alerts or blocks anything outside the</st> <st c="60376">expected
    actions.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60393">Another</st> <st c="60402">limitation to consider is Windows container
    workloads.</st> <st c="60457">Out of the 34 workload threat detections, only three
    are supported for Windows nodes.</st> <st c="60543">If your organization has a
    significant number of Windows containers, you will need to address runtime security
    using</st> <st c="60660">other methods.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60674">With the theory out of the way, let’s head over to the Azure portal
    for</st> <st c="60747">some implementation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60767">Hands-on exercise – Continuous security monitoring on Azure</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="60827">In this</st> <st c="60836">exercise, we will complete the</st>
    <st c="60867">following tasks:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="60883">Task 1</st>** <st c="60890">– Implementing and</st> <st c="60910">operationalizing
    CSPM</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="60931">Task 2</st>** <st c="60938">– Implementing and operationalizing
    continuous container</st> <st c="60996">workload protection</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="61015">Task 1 – Implementing and operationalizing CSPM</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="61063">In this</st> <st c="61072">task, we will cover MDC, where one
    of the main pillars is CSPM.</st> <st c="61136">MDC</st> <st c="61140">is a</st>
    **<st c="61145">cloud-native application protection platform</st>** <st c="61189">(</st>**<st
    c="61191">CNAPP</st>**<st c="61196">) that</st> <st c="61204">protects your cloud
    applications</st> <st c="61237">end to end</st> <st c="61248">using the</st> <st
    c="61258">following capabilities:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="61281">DevSecOps</st>**<st c="61291">: Unifies security management
    across multi-cloud and multi-pipeline environments at the</st> <st c="61380">code
    level</st><st c="61390">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="61391">CSPM</st>**<st c="61396">: Identifies and shares remediation
    of risks in</st> <st c="61445">cloud infrastructure</st><st c="61465">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="61466">Cloud Workload Posture Platform (CWPP)</st>**<st c="61505">:
    Protection capabilities for servers, containers, storage, and</st> <st c="61570">other
    workloads</st><st c="61585">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="61586">Defender for Cloud provides the following</st> <st c="61629">CSPM
    offerings:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="61644">Foundational CSPM</st>**<st c="61662">: This is enabled by
    default for subscriptions and accounts</st> <st c="61723">that are already onboarded
    to Defender for Cloud.</st> <st c="61773">This CSPM capability is free.</st> <st
    c="61803">This includes features such as security recommendations, asset inventory,
    secure score, data visualization and reporting with Azure Workbooks, data exporting,
    workflow automation, tools for remediation, and the Microsoft cloud</st> <st c="62030">security
    benchmark.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="62049">Defender CSPM</st>**<st c="62063">: This</st> <st c="62071">provides
    more advanced security posture features on top of the existing features available
    on foundational CSPM.</st> <st c="62184">This plan requires payment and</st> <st
    c="62215">is optional.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="62227">Let’s</st> <st c="62234">enable the CSPM features on</st> <st
    c="62262">Microsoft Azure:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="62278">First, sign</st> <st c="62291">in to the</st> <st c="62301">Azure
    portal.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="62314">Confirm</st> <st c="62323">that you</st> <st c="62332">have at
    least one of these roles on your subscription – Owner, Contributor,</st> <st c="62408">or
    Reader.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="62418">Search for</st> **<st c="62430">Microsoft Defender for Cloud</st>**
    <st c="62458">on the Microsoft Azure search bar, and then</st> <st c="62503">select
    it.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="62513">The</st> **<st c="62518">Defender for Cloud</st>** <st c="62536">overview
    page will open, and it is enabled on your subscription with the basic features,
    which include foundational CSPM, recommendations, an asset inventory, Workbooks,
    the secure score, and regulatory compliance with the Microsoft cloud</st> <st
    c="62776">security benchmark.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="62795">Go through the various features, highlighting the risks and recommendations</st>
    <st c="62872">per asset.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="62882">To enable Defender CSPM, navigate to</st> **<st c="62920">Environment
    settings</st>** <st c="62940">under</st> **<st c="62947">Management</st>** <st
    c="62957">on</st> <st c="62961">the left.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.15 – Selecting Environment settings on MDC](img/B19710_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="63131">Figure 8.15 – Selecting Environment settings on MDC</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="63182">Select</st> <st c="63190">the subscription</st> <st c="63207">you
    want</st> <st c="63216">to protect.</st> <st c="63228">This will take you to the</st>
    <st c="63254">Defender</st> <st c="63263">plans.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="63269">Under</st> **<st c="63276">Cloud Security Posture Management (CSPM)</st>**<st
    c="63316">, toggle the</st> **<st c="63329">Defender CSPM</st>** <st c="63342">status</st>
    <st c="63350">to</st> **<st c="63353">On</st>**<st c="63355">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.16 – Enabling Defender CSPM](img/B19710_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="64135">Figure 8.16 – Enabling Defender CSPM</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="64171">Click on</st> **<st c="64181">Settings</st>** <st c="64189">under</st>
    **<st c="64196">Defender CSPM Monitoring coverage</st>** <st c="64229">and enable
    all the extensions, as shown in the following screenshot.</st> <st c="64299">Take
    some time to go through all the components, descriptions, and</st> <st c="64366">Defender
    plans.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.17 – Enabling the Defender CSPM extensions](img/B19710_08_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="66172">Figure 8.17 – Enabling the Defender CSPM extensions</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="66223">Select</st> **<st c="66231">Save</st>**<st c="66235">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="66236">We have</st> <st c="66245">seen how</st> <st c="66254">to enable
    the CSPM.</st> <st c="66274">Take some time to examine the additional</st> <st
    c="66315">findings</st> <st c="66324">after enabling</st> <st c="66339">Defender
    CSPM.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="66353">Task 2 – Implementing and operationalizing continuous container
    workload protection</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="66437">In this</st> <st c="66446">task, we want to</st> <st c="66463">leverage
    Defender CSPM</st> <st c="66486">to enable</st> <st c="66496">agentless container
    security, and to identify risks across container registries and Kubernetes.</st>
    <st c="66592">In the previous task, we enabled the</st> **<st c="66629">Agentless
    discovery for Kubernetes</st>** <st c="66663">and</st> **<st c="66668">Agentless
    container vulnerability assessment</st>** <st c="66712">extensions.</st> <st c="66725">That
    is all it takes to enable agentless container security in</st> <st c="66788">Defender
    CSPM.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="66802">Let’s enable the CSPM features on</st> <st c="66837">Microsoft
    Azure:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="66853">First, let’s integrate our Azure Container Registry to an AKS
    cluster by using the cloud shell</st> <st c="66949">command line:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="67040">Navigate</st> <st c="67050">to Kubernetes</st> <st c="67064">services
    on Azure portal, and confirm under</st> **<st c="67108">Kubernetes resources</st>**
    <st c="67128">|</st> **<st c="67131">Namespaces</st>** <st c="67141">that the
    namespace</st> <st c="67161">is present.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="67172">Go back</st> <st c="67181">to MDC, explore all the security findings
    under</st> **<st c="67229">Recommendations</st>**<st c="67244">, and then explore
    the queries available on</st> **<st c="67288">Cloud</st>** **<st c="67294">Security
    Explorer</st>**<st c="67311">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="67312">Lastly, let’s</st> <st c="67327">click on</st> **<st c="67336">Workload
    protections</st>** <st c="67356">under</st> **<st c="67363">Cloud Security</st>**<st
    c="67377">; we can then see all the coverage for Defender</st> <st c="67426">for
    Cloud.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.18 – Reviewing Defender for Cloud coverage](img/B19710_08_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="67797">Figure 8.18 – Reviewing Defender for Cloud coverage</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="67848">Under</st> **<st c="67855">Advanced protection</st>**<st c="67874">,
    click on</st> **<st c="67885">Container image scanning</st>**<st c="67909">. A
    container</st> <st c="67923">image vulnerability assessment</st> <st c="67954">scans
    your registry for</st> **<st c="67978">commonly known vulnerabilities</st>** <st
    c="68008">(</st>**<st c="68010">CVEs</st>**<st c="68014">) and provides a detailed
    vulnerability report for</st> <st c="68066">each image.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.19 – Reviewing container image scanning](img/B19710_08_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="68428">Figure 8.19 – Reviewing container image scanning</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="68476">Scroll</st> <st c="68484">down to the affected resources and explore
    the</st> <st c="68531">vulnerabilities found.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="68553">In the</st> <st c="68561">exercises, we have</st> <st c="68580">seen
    how to leverage the various Defender for Cloud capabilities to secure our resources,
    using</st> <st c="68676">Defender CSPM.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="68690">Summary</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="68698">Congratulations!</st> <st c="68716">You have successfully reached
    the end of this book.</st> <st c="68768">In this chapter, we covered how to implement
    runtime security gates using Azure Policy, as well as Azure Policy integrated
    with the Kubernetes admission controller.</st> <st c="68933">We also discussed
    the challenges of protecting modern cloud applications and some of the native
    capabilities that Azure has</st> <st c="69057">to offer.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="69066">As we look ahead, here are some trends that we think will shape
    the future</st> <st c="69142">of DevSecOps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="69155">Automation</st>**<st c="69166">: Automation, coupled with AI,
    will drive operational efficiency.</st> <st c="69233">Security teams will focus
    on strategic initiatives while automated systems handle operational functions.</st>
    <st c="69338">The concept of “secure by design” will gain momentum, ensuring security
    is integral from</st> <st c="69427">the outset.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="69438">Tool consolidation</st>**<st c="69457">: Organizations will
    consolidate security tools to streamline processes and reduce costs.</st> <st
    c="69548">Merging observability and monitoring into a single platform will provide
    a comprehensive view of the</st> <st c="69649">security landscape.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="69668">IaC</st>**<st c="69672">: IaC will play a crucial role, with
    traditional manual IT infrastructure management giving way to more efficient,
    code-driven approaches, especially with the growth of</st> <st c="69842">cloud
    computing.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="69858">Remediation</st>**<st c="69870">: Swiftly addressing vulnerabilities
    and security issues will become a priority, preventing risks before</st> <st c="69976">they
    escalate.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="69990">Software Bill of Materials (SBOMs)</st>**<st c="70025">: The
    evolution of SBOMs will enhance transparency by providing detailed information
    about software components</st> <st c="70137">and dependencies.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="70154">Some of these trends are already being adopted by a few cutting-edge
    organizations, but we think they will be more widely adopted.</st> <st c="70286">Staying
    ahead of these trends will help organizations equip themselves to handle the constantly
    changing cybersecurity challenges</st> <st c="70416">in DevOps.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="70426">Further reading</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="70442">To learn more about the topics that were covered in this chapter,
    take a look at</st> <st c="70524">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="70538">MDC</st> <st c="70543">documentation:</st> [<st c="70558">https://learn.microsoft.com/en-us/azure/defender-for-cloud/</st>](https://learn.microsoft.com/en-us/azure/defender-for-cloud/)<st
    c="70617">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
