- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overcoming Common Pitfalls in DevOps Release Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a widespread misunderstanding regarding the right approach to DevOps
    release management. The truth is that one solution may be effective for one particular
    customer, but it may not be optimal for another. Every solution must align with
    an organization’s unique culture, working style, and software release objectives.
    If you look at enough DevOps-centric establishments, you’ll notice that they encounter
    several common pitfalls over the course of their operations. Most of them end
    up wasting a lot of time and money learning the hard way as they iteratively tweak
    their DevOps strategy through extensive trial and error. Even though this is often
    an inevitable aspect of the DevOps journey, let’s investigate some of the ways
    that you can hedge against these growing pains, leading your organization to become
    the next success story.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this tenth chapter, you will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Having a carefully designed change management process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Following a release checklist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring 10 common pitfalls of DevOps release management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having a carefully designed change management process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A change management strategy is a deliberate approach that empowers leaders
    to effectively navigate a company through change while reducing disturbance and
    the potential for unforeseen outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: Although the objective may involve altering the organization, the crucial factor
    for achieving success, in the majority of instances, is the aptitude to effectively
    guide individuals throughout the process of change. Businesses typically pursue
    change when their existing business plan no longer contributes to the organization’s
    success. An innovative approach is necessary to enhance profit margins and maintain
    competitiveness amid a dynamic corporate environment. Depending on the organization’s
    long-term objectives, every change project will have a unique character. Efficiency,
    performance, and the development of superior procedures may be the focal points
    of your change program. Innovation can be incremental, such as adding new features
    to an existing product, or revolutionary, such as developing a whole new line
    of products.
  prefs: []
  type: TYPE_NORMAL
- en: Your employees and company processes will probably experience some level of
    disruption as a result of the change, no matter how small or large it is. Unexpected
    repercussions might arise from even the most well-intentioned and essential of
    reforms. The necessity for a methodical strategy grows in tandem with the size
    and complexity of the change, as does the associated risk. Consequently, it is
    essential to have a methodical approach to change and to guide your staff through
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Not having a carefully designed approach to managing change is a common mistake.
    No release management program would be complete without a change advisory board
    or change control board of some kind. They are primarily responsible for assisting
    the company in conducting objective risk and impact assessments. When used in
    conjunction with one another, they aid in the discovery of technical dependencies
    that could otherwise go undetected during deployment. Establishing consistent
    procedures for handling project change requests and tracking their approval and
    implementation will greatly aid in the development of your change management process.
    It is advised that your organization implement standardized *change proposals*
    and *change* *management logs*:'
  prefs: []
  type: TYPE_NORMAL
- en: A **change proposal** delineates the nature and magnitude of the proposed change,
    serving as an initial stage in the change management procedure. When initiating
    a change proposal, provide a comprehensive analysis of the rationale behind the
    change, anticipated results and effects, necessary time and resources, and any
    additional factors that necessitate evaluation. Your organization’s change proposal
    document should provide additional room for incorporating descriptive details,
    along with dedicated sections for computing expenses and for documenting the expected
    benefits.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **change management log** is a written record that monitors the individuals
    who initiated a particular modification, the date and time of the request, the
    current state of the change request, its level of importance, and details regarding
    its resolution. To obtain a more comprehensive record, incorporate additional
    specifics such as the nature and consequences of the modification. Additional
    reasons to keep a detailed change management log are to facilitate the organization
    and retrieval of critical data, enabling efficient prioritization, resolution,
    and future references of previous change requests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Effectively managing change involves more than simply creating and conveying
    a persuasive vision. It encompasses more than just possessing a clearly defined
    change model. The failure of organizational change is often attributed to a lack
    of comprehension by senior executives and change leaders regarding the psychology
    of their employees and the culture of their organization, rather than the change
    process itself.
  prefs: []
  type: TYPE_NORMAL
- en: Presented next are four alarming factors that contribute to the failure of change
    management initiatives, along with data-driven recommendations for resolving these
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: Employees must comprehend the rationale for change management initiatives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before embarking on any organizational change, it is essential to thoroughly
    examine the underlying reasons that necessitate such a transformation. Answering
    this question should be straightforward; you just need to explain the reasons
    behind the organization’s transition and the necessity for personnel to participate
    in the transformation. It may seem quite surprising that many workers are unclear
    about the motives behind the shift in management initiatives introduced by their
    leaders and employers.
  prefs: []
  type: TYPE_NORMAL
- en: 'On average, 1 in 6 employees in any organization understands the rationale
    behind their organization’s strategy at any given moment. Said another way, according
    to this statistic, 85% of employees working for a given company are not clear
    why changes are taking place, what the significance of that change means, or what
    the significance of their own participation means in context. To say that this
    is shocking would be an understatement, but if you were to perform an identical
    survey at your own organization, chances are that your results would follow similar
    conclusions. Notably, the subjects of these change initiatives span a wide range
    of verticals, such as economics, marketplace, competitive factors, and others.
    The bottom line is this: often, there are more people who never or rarely understand
    the objective behind their organization’s strategy than there are those who always
    or frequently do. Let’s change that!'
  prefs: []
  type: TYPE_NORMAL
- en: Without comprehending the underlying reasoning behind organizational change
    management, individuals will not be inclined to modify their behavior. If a company
    appears to be thriving on the surface, it would seem very illogical to the majority
    of reasonable people why any kind of change would be required. The worst part,
    though, is that most executives don’t launch new change initiatives at random.
    Organizational change management is something that most leaders have given a lot
    of thought to, perhaps for months.
  prefs: []
  type: TYPE_NORMAL
- en: Executives may have been keeping tabs on market movements, tracking the development
    of cutting-edge tech, or taking notice of major developments at industry conferences.
    For months, most executives have pondered the *why* behind a change management
    initiative, regardless of the details. However, when announcing new change initiatives,
    many executives often neglect to communicate the cognitive process they underwent
    that led them to their realization and recognition of the necessity for change
    within the organization.
  prefs: []
  type: TYPE_NORMAL
- en: While leaders may jot down some notes or deliver a short presentation outlining
    their thoughts, it’s rare for those documents to reflect the months of deliberation,
    inquisition, and competitive research that really went into them. So, the result
    is that the present change management activities are not well understood by the
    average employee. In all candor, most change management processes put far too
    much emphasis on outlining a desired future state of the change endeavor and far
    too little on the rationale behind the change management process that is needed
    to achieve it.
  prefs: []
  type: TYPE_NORMAL
- en: The success of every organizational change program hinges on your ability to
    articulate the reasoning behind it, down to the most minuscule details, in a clear
    and concise manner.
  prefs: []
  type: TYPE_NORMAL
- en: Executives operate outside of their comfort zone, while others...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How are executive officers unique from regular people? Most people would say
    it’s due to a lack of balance between their job and their personal life; perhaps
    it is that they are more ambitious, are more intelligent, or have good fortune.
    The truth is that in the majority of cases, it is none of these. Rather, it is
    a combination of risk tolerance with change readiness. Essentially, the typical
    **chief executive officer** (**CEO**) is an enthusiastic agent of change, and
    it is this courageousness that defines their character.
  prefs: []
  type: TYPE_NORMAL
- en: Those familiar with human nature won’t be surprised that less than one-third
    of individuals take on challenging or bold changes. Generally speaking, people
    tend to avoid change, or they make small changes that yield a small impact. A
    total of 45% of C-suite executives make what others would call bold or visionary
    changes. Contrarily, just 27% of frontline workers fall into that category. That
    is to say, when compared to frontline workers, CEOs are 66% more likely to desire
    a bold change initiative.
  prefs: []
  type: TYPE_NORMAL
- en: There is a clear and robust correlation between an individual’s hierarchical
    position within the firm and their propensity to engage in bold and daring initiatives.
    Employees and managers who work directly with customers are more likely to favor
    maintaining the status quo, and even if they do accept change, they will be more
    cautious about it. When it comes to spearheading transformation, executives are
    frequently daredevils, driven by uncertainty, big dreams, and drastic action.
    Ambitious people do best in dynamic settings. In general, they thrive on taking
    on large tasks and relish the opportunity to pioneer novel approaches. That makes
    them much more enthusiastic about change management than the average employee
    in their organization.
  prefs: []
  type: TYPE_NORMAL
- en: This idea is crucial for every change management approach. Those at the top
    of an organization are more likely to back a change effort or program if they
    are the ones who instigated it. However, it is important to note that the CEO
    or change manager may lack an understanding of the fact that their perspective
    differs significantly from that of the vast majority of people working directly
    with customers and other frontline workers. In short, senior executives are significantly
    more likely to be interested in taking on the role of change manager, while those
    working on the front lines are much more inclined to be content with how things
    are.
  prefs: []
  type: TYPE_NORMAL
- en: Leaders aren’t candid about the difficulties they face
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A notable aspect of change management is that it is comparatively simpler to
    implement change in a company that is experiencing failure, as opposed to one
    that is already successful. The reason for this is simple: doing *business as
    usual* is not an option for a struggling corporation. Why would an organization
    continue to operate with the same approach when that company is clearly failing?
    Perhaps, ironically, change leaders like to engage with dysfunctional businesses
    that have a strong sense of urgency.'
  prefs: []
  type: TYPE_NORMAL
- en: However, in prosperous organizations, it is reasonable for employees to inquire
    about the rationale behind implementing organizational change when they are already
    achieving success. For the uninitiated, it might seem reasonable to question why
    an organization would require a change management plan even when they are experiencing
    significant success. Undoubtedly, even the most prosperous corporations encounter
    obstacles; no company is flawless. The problems begin when leaders become averse
    to engaging in open and honest discussions regarding difficulties they are facing
    and how those obstacles are affecting the business.
  prefs: []
  type: TYPE_NORMAL
- en: Just 35% of CEOs consistently or regularly communicate the challenges that they
    are experiencing, and this correlation only goes higher the more severe an issue
    becomes. This indicates that approximately 66% of leaders are neglecting to engage
    in the crucial practice of openly communicating their challenges as part of the
    change management process. Leaders who choose an evolutionary approach to change
    management are less inclined to publicly communicate difficulties compared to
    leaders who embrace a more revolutionary approach. Their inclination toward gradual
    modifications diminishes their propensity toward extensive deliberations regarding
    company obstacles.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, there are leaders who proceed under the erroneous belief
    that if they discuss the difficulties that the organization is experiencing, then
    they would be perceived as being pessimistic or negative. Nevertheless, that is
    completely false. The act of openly discussing difficulties is not a negative
    thing; rather, it is only being honest and frank. There is a significant amount
    of admiration among workers for leaders who exhibit that particular quality.
  prefs: []
  type: TYPE_NORMAL
- en: A successful change initiative necessitates a compelling impetus; no organization
    undergoes transformation without a strong justification. If the corporation is
    actively seeking to achieve transformational change, then the requirement for
    a compelling challenge becomes even more significant. An effective change management
    model emphasizes that organizational change will progress more rapidly and smoothly
    when there is a significant problem that must be addressed. However, if your suggested
    change lacks a direct connection to a specific, pressing, and tangible problem,
    you should anticipate encountering significant opposition.
  prefs: []
  type: TYPE_NORMAL
- en: Employee temperaments are resistant to change
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Organizational culture, including employee personalities, is a rarely discussed
    predictor of successful organizational change.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the realm of workplace dynamics, individuals are galvanized to action by
    a set of five prominent motivators: *Achievement*, *Power*, *Affiliation*, *Security*,
    and *Adventure*. These five motivators play a pivotal role in shaping and influencing
    human behavior within professional settings. It has been determined that a significant
    proportion of workers, specifically 33%, exhibit a strong inclination toward being
    motivated by affiliation. Furthermore, an additional 20% of participants have
    demonstrated a notable inclination toward being motivated by security.'
  prefs: []
  type: TYPE_NORMAL
- en: Individuals motivated by affiliation seek positive relationships and acceptance
    from others. These people prefer jobs with substantial personal interaction, are
    group-oriented, and excel in teamwork. The problem arises when an organization
    implements sudden changes that make people uncomfortable, leading to the dissolution
    of affiliative bonds, the departure of key team members, and a sense of a previously
    close-knit group falling apart. If affiliative individuals were included in a
    change advisory board, they may be more likely to transition from resistors to
    key stakeholders. However, individuals motivated by security seek stability and
    reliability in their employment, tasks, and compensation. They value guarantees
    and tend to stay with the same company, position, or department for a long time.
    High-security individuals frequently experience anxiety when faced with change.
    They are not inclined toward transformational, highly destructive, or disruptive
    change.
  prefs: []
  type: TYPE_NORMAL
- en: In certain instances, it is important to note that not all companies possess
    a substantial workforce consisting primarily of individuals motivated by security
    and affiliation. Instead, there are cases where organizations are comprised of
    individuals who are driven by a desire for adventure and are catalysts for change
    within the company. For companies that place a strong emphasis on social cultures
    and prioritize consistency and predictability, the process of transformational
    change can be particularly disruptive. The situation can present significant challenges
    if the primary stakeholders of the organization are primarily motivated by concerns
    related to security and affiliation.
  prefs: []
  type: TYPE_NORMAL
- en: You may be wondering how you can determine whether or not your culture employs
    a majority of people who are driven by affiliation and security. Take a look at
    the things that appear to motivate your staff members. If they place a high value
    on working together as a team, maintaining social relationships with coworkers,
    and spending a lot of time in person, there is a good chance that they have a
    strong affiliation drive. There is a good chance that they have a high security
    drive if they tend to think things through before acting on them, experience anxiety
    when confronted with ambiguity, and favor jobs and projects that are well defined.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have covered the reasons why it is important to have a carefully
    designed change management process, let’s expand on this theme. In the next section,
    we will discuss the importance of following a software release checklist. Combining
    these two strategies ensures that you stay organized and can adequately communicate
    the value that your team brings to the organization as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: Following a release checklist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A common challenge in release management is adhering to a release checklist,
    which is a frequently neglected necessity. The information contained in a release
    checklist is critical; a few examples include: ensuring that all components have
    been accurately labeled for release, a clear rollback plan has been established,
    and the user documentation has been freshly revised. However, a reference to a
    comprehensive release checklist has been included in the [*Appendix*](B21803_Appendix.xhtml#_idTextAnchor223)
    of the book, for your benefit. As a release manger, even if you are experiencing
    a less productive day or facing distractions while creating a product, the checklist
    remains a reliable source of truth that will help you stay focused and on track.'
  prefs: []
  type: TYPE_NORMAL
- en: To ensure the best possible **user experience** (**UX**), it is essential that
    you incorporate relevant questions into every release checklist. By doing so,
    you can guarantee that each release delivers exceptional value to the end user’s
    experience. A fantastic way to make certain that your software product is ready
    for release is by ensuring that your release checklist contains both *pre-* and
    *post-*release activities. This should include final reviews, testing, and release
    package creation for the former, and tasks for updating documentation, informing
    end users, and monitoring application performance for the latter. In the context
    of DevOps, a software release checklist expedites the process of delivering a
    product by guaranteeing that every release undergoes thorough testing to verify
    its optimal viability through a reliable pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: When embarking on the release of a new software application, it becomes evident
    that there are a multitude of factors that necessitate careful consideration.
    The most important thing to remember is that these questions and the standards
    by which you should evaluate each release are completely subjective. In order
    to effectively navigate through diverse environments, it is highly important to
    construct a comprehensive set of queries. These questions will serve as a valuable
    tool in acquiring the necessary information and insights pertaining to each distinct
    environment. A successful release can be achieved by following customized checklists
    that meet the needs of each unique product or business. By strictly adhering to
    the checklist, software releases can be completed swiftly and without the risk
    of expensive mistakes or delays.
  prefs: []
  type: TYPE_NORMAL
- en: However, it is important to note that any comprehensive list of ultimate criteria
    must include all aspects of a release, with particular emphasis on performance,
    security, and usability. Never forget that it’s better to be thorough than to
    be careless. Prior to shipping your software, ensure that it complies with the
    industry standards, as outlined in your checklist. When you have finished the
    entire project, you do not want to come to the realization that you neglected
    to ask one of these questions during the process. Your users will be very grateful
    that you did so.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, to guarantee a smooth release cycle, it is necessary to determine whether
    the support team is cognizant of any features that could cause confusion for the
    end user. An adept support team is vital for the implementation of any product,
    and software is no different. The frequency and severity of challenges encountered
    by customers can be greatly reduced if the support personnel receives thorough
    training and possesses a comprehensive understanding of the application’s functionality.
    Generic responses seldom satisfy customers, so plan on delivering personalized
    support for each one in all available opportunities.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure they have access to as much pertinent information as you can in order
    to set them up for success. This will not only ensure that the release cycle is
    successful, but it will also prevent engineers and product managers from having
    to deal with questions that are recurring in the future. A great way to do this
    is to derive your support materials from the release checklist itself; this ensures
    that your support documentation is as comprehensive as the release process. By
    doing so, you can optimize the process and guarantee that development teams and
    customers obtain the information they need with minimal effort. To make this process
    better, it is helpful if you define key elements of the software release.
  prefs: []
  type: TYPE_NORMAL
- en: Successful releases go far beyond following a checklist
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A software release checklist can be defined as a meticulously organized compilation
    of items and tasks that are adhered to by development and operations teams in
    order to guarantee the glorious release of a software product. The checklist functions
    as an exhaustive manual, encompassing diverse facets of the **software development
    life cycle** (**SDLC**). In essence, it serves as a surrogate for a navigational
    guide, aiding teams in maneuvering through the intricacies of deploying software
    using a regulated and effective method.
  prefs: []
  type: TYPE_NORMAL
- en: However, there is one rather significant caveat about what a software release
    checklist is and what it should and should not be used for. A checklist is fundamentally
    just a way to organize the actions that you should already be taking anyway! To
    be clear, a release checklist should follow the work that you are performing,
    not leading it. The crucial point to understand is that you must avoid becoming
    an organization that focuses on checking boxes rather than innovating and optimizing.
    Otherwise, your operations will become dull, stagnant, unimaginative, and uncompetitive.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid becoming a tick-the-box organization, your software release checklist
    must be the product of a group effort that includes an extensive array of individuals.
    Software engineers, **quality assurance** (**QA**) specialists, system administrators,
    and project managers are all essential members of the team. To ensure that your
    release checklist is comprehensive and useful, every team member must contribute
    their own distinct input and unique perspective.
  prefs: []
  type: TYPE_NORMAL
- en: Next is a list of nine crucial activities that your software development team
    should already be doing on an ongoing basis. Notably, it is important that these
    items are reflected in your release checklist.
  prefs: []
  type: TYPE_NORMAL
- en: Code review and QA
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Begin your checklist by conducting a comprehensive analysis of your code. Code
    reviews serve as the primary means of safeguarding against potential issues. They
    capture software defects, enhance the quality of code, and guarantee adherence
    to coding standards. Code reviews establish the groundwork for a strong release
    by implementing QA procedures. Indeed, adhering to code standards and utilizing
    **version control systems** (**VCS**) are essential components of sound coding
    practices.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of functional testing is to guarantee that all features and capabilities
    perform as expected. Functional testing, whether automated or by manual human
    effort, ensures that your product satisfies all criteria and offers a positive
    UX. In other words, it’s the last chance you get to make sure your software works
    as expected. Functional testing checklists often ensure that each feature is validated
    against its specifications, test all user interactions, and verify error handling
    and recovery methods.
  prefs: []
  type: TYPE_NORMAL
- en: User interface and UX testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Making a good first impression is important, and **user interface** (**UI**)
    and UX testing can help you achieve that with your software. One of the most important
    factors in user happiness is an attractive and easy-to-use design. Explore how
    UI/UX testing can improve the visual appeal and usability of your software. In
    general, when testing a UI or UX, you should look for things such as consistent
    design components, how easy it is to navigate, and how responsive it is across
    different devices.
  prefs: []
  type: TYPE_NORMAL
- en: In software development, the UI/UX design phase typically consists of several
    key stages. Much as with backend software development and the SDLC, UI/UX development
    often includes similar concepts, such as a pre-design stage and a design research
    stage, as well as initial sketches, wireframing, visualization, and slicing. Make
    sure to include UI/UX items such as these as part of your release checklist if
    relevant to your project.
  prefs: []
  type: TYPE_NORMAL
- en: Compatibility testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your program will always work as intended if you test it across a variety of
    devices, operating systems, and browsers. Learn the ins and outs of compatibility
    testing and why it’s so important to attract more users to your product and your
    company’s brand. As part of the compatibility testing process, you should include
    assessments on how the application works on various devices, such as laptops,
    desktops, and mobile devices, but also on operating systems such as Linux, macOS,
    and Windows. Don’t forget to test your web applications across each of the four
    most popular browsers (Chrome, Firefox, Safari, and Edge) as well. Naturally,
    these items should all be included in your release checklist to ensure a successful
    release and happy customers.
  prefs: []
  type: TYPE_NORMAL
- en: Security testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Safeguarding user data and guaranteeing the integrity of your program is of
    utmost importance. Security testing detects flaws and weaknesses, protecting your
    program from potential cyber threats and data breaches. Examine how security testing
    enables you to earn your customers’ trust by analyzing all of its many aspects.
    Perform penetration testing, verify data encryption algorithms, and guarantee
    secure authentication and authorization processes as part of security testing.
    Definitely don’t skip these on your release checklist, and don’t forget to include
    your own unique security requirements as well.
  prefs: []
  type: TYPE_NORMAL
- en: Regression testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ensure that recent modifications have not adversely affected pre-existing functionality.
    Regression testing is a process that detects and resolves unanticipated side effects
    of change, ensuring the general stability of your software. Explore the utility
    of regression testing as a protective measure for your software release. Your
    regression testing checklist should include assessing items such as test cases,
    the automation of repetitive test scenarios, and the verification of backward
    compatibility with earlier releases.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation review
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is essential for both developers and end users to have documentation that
    is fully comprehensive and up to date. Make sure that your documentation depicts
    the most recent modifications and capabilities in an accurate manner. Consider
    the significance of documentation in ensuring that the UX is as seamless as possible.
    The documentation and review process should adhere to best practices, which include
    maintaining versioned documentation, having instructions that are clear and simple,
    and upgrading documentation with each release. Include these items on your release
    checklist as well.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment readiness
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To get ready for deployment, you should make sure that your infrastructure,
    servers, and databases are all prepared to operate well with the new version.
    This phase enables a smooth transition and reduces the amount of downtime that
    occurs. It is important to understand the complexities of deployment readiness
    and the role it plays in a successful release. Verifying server and infrastructure
    settings, checking data backup and recovery processes, and planning deployment
    for low-traffic times are all important items on your deployment readiness checklist.
  prefs: []
  type: TYPE_NORMAL
- en: Rollback plan
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep a backup plan handy at all times. In the event that problems emerge after
    the release, it is critical to have a clear method for rolling back changes to
    their previous state. This way, in case you need to roll back to an earlier version,
    you may do so easily. Discover the ins and outs of developing a solid rollback
    plan and why it is an essential part of any release strategy. The standard components
    of a rollback plan are a communication strategy for stakeholders, testing of the
    rollback procedure in a simulated environment, and the identification of crucial
    rollback checkpoints. The best way to keep your rollback strategy functional during
    a **disaster recovery** (**DR**) event is to create a checklist for it.
  prefs: []
  type: TYPE_NORMAL
- en: Performance testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Performance testing is an essential part of your release checklist. Making sure
    your software can take the predicted load without sacrificing speed or functionality
    is the goal of this step, which involves evaluating its behavior under various
    scenarios. Your brand’s reputation, user satisfaction, and availability are all
    at risk if performance problems go unchecked.
  prefs: []
  type: TYPE_NORMAL
- en: There are many reasons why performance testing matters. To begin with, user
    satisfaction is key. A slow or unreliable system can frustrate users, leading
    to a negative perception of your software. Performance testing also helps identify
    potential bottlenecks, preventing unexpected crashes during peak usage and ensuring
    **business continuity** (**BC**). Critically, addressing performance issues during
    development is more cost-effective than dealing with them post-release.
  prefs: []
  type: TYPE_NORMAL
- en: 'Methods employed for assessing software application performance include the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Load testing**: The software’s responsiveness under both light and heavy
    loads to guarantee it can manage the anticipated volume of users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability testing**: Verifies the software’s scalability in response to
    increasing load requirements, keeping it efficient no matter the number of users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spike testing**: Examines the manner in which the system responds to abrupt
    spikes or swings in the amount of user traffic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Endurance testing**: Determines whether or not the system is stable for a
    lengthy period of time and evaluates how well it performs under sustained loads'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Concurrency testing**: Analyzes the software’s responsiveness and performance
    under heavy processing load from several concurrent users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will find that a comprehensive software release checklist is your best friend
    when you are navigating the complicated environment of software deployment. Despite
    the fact that each item on the checklist makes a contribution to the overall success
    of your release, performance testing stands out as a crucial component in ensuring
    that users are satisfied and that your product remains in good health over the
    long run. Incorporating these approaches into your performance testing strategy
    will improve your software’s overall success and reliability while also improving
    the UX.
  prefs: []
  type: TYPE_NORMAL
- en: Taking a methodical approach with your software release checklist lays the groundwork
    for a software release that is error-free, efficient, and seamless. In the next
    section, we’ll discuss the top 10 pitfalls of DevOps release management. By learning
    from hardships that others have faced, you will be well on your path to mastering
    the art of DevOps release management.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring 10 common pitfalls of DevOps release management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps release management is a game-changing approach. It is becoming increasingly
    common for businesses across virtually all sectors to implement DevOps in order
    to provide teams with the time and autonomy they require to handle more ambitious
    tasks. Using a DevOps release management strategy can invigorate your engineering
    team and direct your product development efforts toward better satisfying your
    customers. On the other hand, any time that you adopt a new technique, there is
    always the possibility of encountering significant challenges.
  prefs: []
  type: TYPE_NORMAL
- en: Problems and obstacles are inevitable whenever you try to alter the fundamental
    nature of your business. Every transition to DevOps comes with its own set of
    challenges that your team will have to overcome. With regard to transformations,
    it is impossible to anticipate and mitigate every potential challenge that may
    arise. However, this particular chapter aims to equip you with the necessary knowledge
    needed to navigate the most frequently encountered pitfalls in DevOps release
    management and provide you with effective strategies for their resolution. When
    considering the implementation of DevOps practices, it remains essential to have
    the necessary awareness of the elements involved and the intuition required to
    effectively prioritize them. As with any implementation of DevOps release management,
    an organization must maintain its primary focus on people first, followed by process,
    and finally, technology.
  prefs: []
  type: TYPE_NORMAL
- en: A lack of support from leadership
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most executives have experienced unsuccessfully leading an organization through
    a change initiative that ran counter to the organization’s culture. Although this
    might sound surprising the truth is that more than two-thirds of all organizational
    change initiatives fail.
  prefs: []
  type: TYPE_NORMAL
- en: The failure rate is significantly greater when efforts are designed to disrupt
    the entire existing business culture. It should not come as a surprise to see
    that four-fifths of these attempts are met with defeat. When it comes to organizations,
    culture is deeply ingrained and endures through generations of personnel that
    come and go over the course of time. Altering the culture of an organization is
    not the first step in a campaign to change the organization; rather, it is the
    last step.
  prefs: []
  type: TYPE_NORMAL
- en: Embracing the DevOps dynamic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Leaders engaging in a DevOps transformation must have a thorough understanding
    of the methodology’s unique dynamic. Implementing DevOps in organizations is a
    complex process that involves more than just adopting new technical practices
    and tools. As Gene Kim explains in *The Phoenix Project*, organizations that embrace
    *The Three Ways* principles invite significant advantages that make achieving
    success more likely. We covered in *Chapter 5* that this involves a transition
    from a culture of isolated departments to a mindset that emphasizes efficiency
    and adaptability, with a primary focus on continuously creating and delivering
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 'History has shown us that culture change has been a significant obstacle in
    the adoption of DevOps release management practices. It has emerged as the primary
    culprit that hinders the adoption of DevOps among the many organizations that
    embark on such a transfiguration. The breadth of research pertaining to the challenges
    associated with cultural transformation leads to a definitive observation: the
    adoption of a DevOps methodology inherently carries a significant degree of risk
    and is susceptible to potential setbacks.'
  prefs: []
  type: TYPE_NORMAL
- en: One possible solution is to maintain the status quo and steer clear of the challenging
    journey toward cultural transformation that frequently accompanies the implementation
    of a DevOps initiative. The issue associated with the aforementioned strategy
    lies in the fact that DevOps encompasses a broader scope beyond existing merely
    as a methodology or framework that is solely applicable to technologists. In contemporary
    society, organizations encounter a continuous flow of internal and external influences
    that have the potential to shape their culture in big ways. These influences encompass
    a wide range of factors, including market disruption caused by new competitors,
    fluctuations in global economics, geopolitical instability, currency fluctuations,
    shifts in workforce demographics, and rapid advancements in technology, among
    others. These forces present organizations with both favorable prospects and potential
    challenges.
  prefs: []
  type: TYPE_NORMAL
- en: The capacity to swiftly adapt and innovate within this particular context has
    emerged as a fundamental organizational asset. The adoption of DevOps, *when implemented
    successfully*, brings about an abundance of prosperity in systems development
    processes, technology, and culture. These changes are crucial in fostering organizational
    agility, which in turn allows businesses to attain a competitive edge in today’s
    dynamic markets. The aforementioned factors result in a decrease in the time required
    to bring a product or service to the market, a reduction in wasteful activity,
    an enhancement in overall quality, and the introduction of novel and revolutionary
    products and services.
  prefs: []
  type: TYPE_NORMAL
- en: The inherent difficulty faced by leaders and agents of change when initiating
    DevOps initiatives is discovering a means to overcome these obstacles and strategically
    enhance the likelihood of success as you adopt DevOps principles, methods, and
    culture.
  prefs: []
  type: TYPE_NORMAL
- en: Adept leadership matters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The key to successfully navigating the obstacles associated with cultural change
    in DevOps implementations lies in the leadership approach adopted by corporate
    executives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your initial goal should be to gain insight into factors that contribute to
    the significant failure rates observed in most organizational change initiatives.
    Numerous studies identify multiple variables that contribute to suboptimal outcomes
    in a variety of scenarios. These variables include inadequate planning, institutional
    resistance to change, ineffective communication, and impractical expectations.
    The prevailing considerations are predominantly associated with the manner in
    which members of a company respond to change. The three highest-ranked items,
    listed in sequential order, are presented here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Resistance to change**: This refers to the natural tendency of individuals
    or groups to oppose or be hesitant toward adopting new ideas, technologies, or
    processes. This resistance can manifest in various ways, such as skepticism, fear,
    or a desire to maintain the status quo.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Low readiness for change**: This refers to a state in which individuals or
    organizations are resistant or unprepared to embrace and adapt to new ideas, processes,
    or technologies. This lack of readiness can hinder progress and innovation, as
    it creates barriers to implementing necessary changes. It may stem from various
    factors.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Poor employee engagement**: This refers to a situation where employees are
    not fully involved, motivated, or committed to their work. This lack of engagement
    can have negative consequences for both the employees and the organization as
    a whole. It may result in decreased productivity.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Equipped with this new understanding, it is important to set out on a quest
    to explore strategies for enhancing the ability of individuals within an organization
    to effectively adapt to and embrace change. Numerous everyday observations indicate
    that the manner in which leaders exercise their leadership and interact with others
    holds considerable sway over the degree to which employees respond amiably to
    change, or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the better part of four decades, literature on the topic of successful
    leadership behavior has been centered on the *Theory of Transformational Leadership*,
    pioneered by James McGregor Burns. More academic publications have been published
    on this subject than on any other alternative theory of leadership in history.
    According to Burns and other scholars such as James Victor Downton, successful
    transformational leaders possess the four main traits listed next:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Intellectual stimulation**: In addition to questioning the status quo, transformational
    leaders foster innovation in their followers. The leader inspires people to investigate
    novel approaches and new avenues for educational opportunities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Individualized consideration**: Transformational leadership is a leadership
    style that encompasses the act of providing support and encouragement to individual
    followers. Transformational leaders prioritize the establishment of supportive
    relationships by maintaining open lines of communication. This encourages followers
    to freely express their ideas and enables leaders to promptly acknowledge and
    appreciate the distinct contributions made by every follower.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inspirational motivation**: Transformational leaders possess a well-defined
    vision that they are capable of effectively communicating to their followers.
    Leaders have the ability to inspire and motivate their followers, fostering a
    shared sense of passion and motivation toward achieving common goals.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Idealized influence**: In the context of leadership, the transformational
    leader assumes the responsibility of serving as a model for their followers. Followers
    exhibit trust and respect toward their leader, leading them to imitate the leader’s
    behavior and adopt their values as their own:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 11.1: The four key tenets of transformational leadership](img/B21803_11_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.1: The four key tenets of transformational leadership'
  prefs: []
  type: TYPE_NORMAL
- en: For company executives in charge of present and future DevOps transformations,
    additional research shows two crucial conclusions. First, the adoption of particular
    change management strategies is less effective than inspiring followers to actively
    support organizational change as a whole. Furthermore, and maybe most importantly,
    transformative leadership consists of practices that can be taught to and learned
    by others.
  prefs: []
  type: TYPE_NORMAL
- en: Leadership is the secret ingredient
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Organizations can enhance the likelihood of success for DevOps and other change
    initiatives by implementing training, coaching, and mentoring programs. These
    programs aim to develop the transformational leadership competency of current
    and future leaders within the organization. By investing in these initiatives,
    organizations can take tangible and proven measures to increase the probability
    of success in their endeavors. DevOps leaders who achieve success demonstrate
    notable qualities in vision, authenticity, and dedication to personal development
    and creativity. They empower their teams and encourage decentralized decision-making.
  prefs: []
  type: TYPE_NORMAL
- en: This has obvious implications. The manner in which leaders exercise their leadership
    skills plays a crucial role in successfully managing the challenging process of
    cultural transformation associated with the adoption of DevOps practices. The
    leadership style chosen by an organization has a direct impact on how its members
    react to significant changes in processes, technology, roles, and ideologies.
  prefs: []
  type: TYPE_NORMAL
- en: The likelihood of a successful DevOps transformation significantly increases
    when practitioners are actively involved, motivated, empowered, and supported
    within a conducive environment. This environment is characterized by leaders who
    provide a clear vision, lead with honesty and authenticity, and cultivate a culture
    of trust.
  prefs: []
  type: TYPE_NORMAL
- en: Thinking DevOps is mainly about tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The implementation of DevOps release management is heavily dependent on the
    utilization of various tools, which serve the purpose of expediting task completion
    and fostering enhanced collaboration among different groups involved in the software
    development and operations processes. The selection of appropriate tools holds
    significant importance in this regard. As we have covered extensively in this
    book, the DevOps methodology encompasses a wide spectrum of tools, including source
    code and version control management tools, **continuous integration/continuous
    deployment** (**CI/CD**) tools, communication and collaboration platforms, and
    monitoring tools. Notably, these tools are already numerous and continually growing
    as each day passes.
  prefs: []
  type: TYPE_NORMAL
- en: On the contrary, dedicating excessive amounts of time and focus toward selecting
    the optimal tool (which, it should be noted, does not actually exist), and subsequently
    providing training to teams for its utilization, becomes a futile endeavor. This
    is especially true if said tool fails to accurately replicate your desired workflow.
    The hypothetical tool in our example here has the potential to accomplish the
    task it was selected for through the pursuit of clever strategies and occasional
    manual implementation. However, this approach may result in a more arduous and
    exasperating UX (for both internal and external parties) than necessary, often
    resulting in limited utilization of the tool.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps, at its core, revolves around the elimination of obstacles and the optimization
    of the process for delivering value to customers. In the arena of problem-solving,
    the significance lies not in the individual tools employed, but rather in the
    identification and alleviation of pain points. Even more significant than any
    of this are the minds of the individuals and the creative talent employed to use
    these tools and to solve these challenges. It would behoove any executive to know
    where their bread is buttered.
  prefs: []
  type: TYPE_NORMAL
- en: '*But why do we* *need tools?*'
  prefs: []
  type: TYPE_NORMAL
- en: Tools are essential in DevOps release management for various reasons. They enable
    us to efficiently solve complex problems, automate tasks, and enhance productivity.
    Tools provide a systematic approach to problem-solving by offering predefined
    algorithms, libraries, and frameworks that simplify the development process. They
    also facilitate collaboration among developers by providing VCS, **integrated
    development environments** (**IDEs**), and others. As per the established definition
    of *tool*, any object or device that assists in the successful completion of a
    specific task can be categorized as a tool. In the natural world, it is observed
    that even seemingly ordinary objects such as sticks or rocks can serve as tools
    to accomplish specific objectives.
  prefs: []
  type: TYPE_NORMAL
- en: However, everything starts to look like a nail when you only have a hammer,
    so it’s important for DevOps craftspeople to have a wide variety of tools in their
    toolbox. New resources and methods will become available to us as we refine our
    skills. However, an artisan’s attention is more focused on the finished product
    than on the process itself. The tool alone is only a means to an end; having more
    and better tools can only increase your effectiveness as a capable human being.
  prefs: []
  type: TYPE_NORMAL
- en: The selection of tools for companies is contingent upon their specific process.
    In order to identify the most suitable tool for your organization, it is crucial
    to possess a comprehensive understanding of your existing process flow. It is
    necessary to ensure that this process flow has been optimized to its fullest potential.
    Subsequently, the next step involves evaluating various tools and selecting the
    one that aligns with your optimized process flow, requiring minimal customization.
    In the context of DevOps and pipeline management, it is important to consider
    the compatibility of different tools. Moreover, it is possible that a particular
    tool is highly effective for a minor aspect of your process but lacks compatibility
    with another tool that is essential for a more crucial process. Consequently,
    the tool that is ideal for the specific area may not be suitable when considering
    DevOps and your pipelines as a whole. This is referred to as the *local* *optimization
    problem*.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, it’s better to design your ideal processes in advance, and then
    select the tools that can automate or complement them effectively and with little
    to no human involvement required to implement them.
  prefs: []
  type: TYPE_NORMAL
- en: Treating DevOps and CI/CD as the same thing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DevOps release management encompasses automated build processes and infrastructure,
    but its scope extends beyond just CI/CD. DevOps and CI/CD, although related, are
    distinct concepts in the field of computer science, project management, or a combination
    thereof. DevOps can be conceptualized as a holistic approach to software development
    and deployment, akin to a bicycle wheel. In this analogy, CI/CD can be likened
    to one of the spokes of the wheel, playing a crucial role in facilitating the
    smooth operation of the entire apparatus.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps’ success hinges upon effective collaboration among essential stakeholders,
    similar to other proficient teams in any industry. In the realm of software engineering,
    the collaboration between development engineers and operations staff is imperative
    across the entire development life cycle. This collaboration spans various stages,
    including design, development, and production support. DevOps is a cultural paradigm
    that encompasses the entire SDLC, extending beyond the roles of software developers
    and operations personnel. It is characterized by a set of behaviors that promote
    collaboration and integration between these traditionally separate functions.
  prefs: []
  type: TYPE_NORMAL
- en: In the context of DevOps release management, the integration of software development,
    deployment, information security, QA, release management, and related disciplines
    results in a unified collection of practices. To be clear, the use of CI/CD does
    not accredit that a company is successfully applying DevOps practices.
  prefs: []
  type: TYPE_NORMAL
- en: The absence of a clearly defined DevOps concept in organizations leads to the
    adoption of inefficient models from the past, where development, QA, and systems
    administration teams operate in isolated silos. Teams that do not possess the
    fundamental principles of DevOps, namely effective communication, seamless collaboration,
    and transparent practices, will not be able to progress as desired.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the key differences
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'CI/CD refers to a collection of development methodologies that facilitate the
    swift and dependable deployment of code modifications. DevOps is a cohesive set
    of concepts, methodologies, procedures, and technologies that facilitate collaboration
    between development and operations teams in order to optimize product development.
    Although the two concepts are interconnected, they exhibit distinct characteristics.
    To put it succinctly, the following applies:'
  prefs: []
  type: TYPE_NORMAL
- en: CI/CD encompasses a series of development methodologies that facilitate the
    prompt and dependable deployment of code modifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps encompasses a range of concepts, methodologies, procedures, and technologies
    that foster collaboration between development and operations teams to optimize
    product development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In today’s business landscape, it is fundamental for any technology-driven organization
    aiming to achieve optimal operational efficiency and exceptional product quality
    to recognize the significance of DevOps and **continuous integration/continuous
    delivery** (**CI/CD**). Internationally, development teams depend on CI/CD practices
    to swiftly and consistently deliver enhancements to code. Conversely, DevOps principles
    encourage collaboration between development and operations teams in order to optimize
    all aspects of product development.
  prefs: []
  type: TYPE_NORMAL
- en: Let us explicate the fundamental distinctions between CI/CD and DevOps further.
  prefs: []
  type: TYPE_NORMAL
- en: The scope of DevOps versus CI/CD
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: CI is a fundamental principle in software engineering that promotes the regular
    integration of team members’ work. In the context of software development, practitioners
    of this methodology strive to incorporate changes into the code base on a frequent
    basis, typically on a daily or even an hourly basis. In the traditional context,
    integration was an expensive ordeal that necessitated extensive communication
    between various engineering groups. In order to overcome this obstacle, CI promotes
    the use of testing and building automation tools. The development of a software-defined
    life cycle is the end aim of this kind of automation. By reducing the amount of
    work required for integration, successful CI helps teams find and fix integration
    errors faster.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to how CI optimizes the processes of building and testing software,
    CD enhances the effectiveness of packaging and deploying software applications.
    Organizations that embrace CD can effectively orchestrate the entire SDLC, encompassing
    design, construction, packaging, and deployment. This approach facilitates the
    realization of software-defined production, an approach that aims to optimize
    cost-efficiency and automation to the fullest extent possible.
  prefs: []
  type: TYPE_NORMAL
- en: At its best, CI/CD allows for the rapid deployment of updated software to production.
    This promotes a culture of DevOps, whereby the SDLC gives users more chances to
    share feedback and more opportunities to be imaginative.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of DevOps and CI/CD
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: CI/CD consolidates all code updates of an application into a unified repository,
    followed by automated testing. This process guarantees the comprehensive development
    of the product and meticulously readies it for deployment. The primary objective
    of CI/CD is to facilitate rapid, streamlined, and automated deployment of product
    updates. This process additionally reduces product defects, thereby enhancing
    average user satisfaction levels. In essence, a robust CI/CD pipeline enhances
    the speed and quality of software development, provides benefits to operational
    and product development teams, and increases the overall business value for the
    enterprise and its customers.
  prefs: []
  type: TYPE_NORMAL
- en: 'DevOps release management is a methodology that aims to resolve a common challenge
    faced by many organizations: a lack of coordination and collaboration between
    the operations, development, and other teams throughout the process of creating
    new software. Due to insufficient collaboration, a communication gap and lack
    of cooperation will usually result in significant obstacles and costly setbacks.
    By bringing together the various elements found throughout the SDLC, DevOps release
    management aims to streamline these efforts. DevOps accomplishes this by promoting
    a software development process that is more nimble, simplified, and productive.
    By fostering and sustaining a shared culture among teams, DevOps readily facilitates
    the adoption of common business processes and the overall improvement of collaboration
    levels.'
  prefs: []
  type: TYPE_NORMAL
- en: The individual benefits of DevOps and CI/CD
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are many advantages to implementing a CI/CD pipeline, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Because of automated testing, fewer bugs are introduced into production.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Addressing integration issues early on in the cycle simplifies the release-building
    process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because developers get notifications the moment a build fails, they need to
    switch between tasks much less frequently and spend less time doing so.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Less money is spent on testing thanks to CI servers’ ability to run hundreds
    of tests in a matter of seconds. The QA team can now devote their time and energy
    to more important and valuable tasks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducing the amount of time teams spend preparing for release simplifies software
    deployment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The end-to-end feedback loop becomes more effective with an increase in the
    frequency of releases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streamlines the iteration process by making small change implementation decisions
    easily.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Embracing DevOps release management has several advantages, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Enhanced agility, automation, collaboration, efficiency, and quality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Early detection and addressal of errors and bugs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimized **time to** **market** (**TTM**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhanced **return on** **investment** (**ROI**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved user satisfaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduced risk of misalignment and miscommunication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A robust DevOps culture fosters collaboration among teams to align their efforts
    toward shared business objectives, rather than working in isolated departmental
    silos. Automated testing and continuous feedback, when combined with agile principles,
    speed up development and make bug management a breeze. When DevOps processes are
    implemented correctly, they yield several benefits, including improved product
    quality, enhanced user satisfaction, and increased profitability.
  prefs: []
  type: TYPE_NORMAL
- en: Quality as an afterthought
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quality in products, services, employees, and reputation is something every
    business aspires to, but it’s not easy to achieve. Using it as a company slogan,
    posting it online, displaying clever quotations about it in break rooms, and even
    devoting sections about it in employee handbooks can be simple to do. However,
    for a culture of quality to truly permeate an organization, it must permeate every
    employee’s consciousness.
  prefs: []
  type: TYPE_NORMAL
- en: In order to achieve this goal, businesses need to adopt a comprehensive strategy
    regarding quality. A peer-driven approach, support from the highest corporate
    echelons, generous rewards, and the inclusion of all aspects of the company, especially
    people, processes, products, and services, are all required for it to be successful.
  prefs: []
  type: TYPE_NORMAL
- en: Notably, certain companies may engage in the practice of consistently generating
    development code without incorporating essential quality checkpoints at each stage
    of the pipeline. CI/CD pipelines, while enabling rapid software release, may not
    yield high-value outcomes. In order to optimize performance, it is crucial to
    prioritize speed while also ensuring that the desired level of quality is maintained.
    When implementing DevOps practices, it is essential to evaluate the quality aspects
    offered by each stage of the pipeline and implement local optimization techniques
    where it is beneficial. Numerous low-overhead methods exist for adding quality
    checks to the pipeline, and doing so will pay off in the long run by allowing
    for the early detection of problematic code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, the majority of development engineers have a basic understanding
    of shifting left, which is useful for saving time and money by discovering mistakes
    earlier in the process. Put yourself ahead of the competition by adopting a DevOps
    culture that prioritizes early defect detection. Ensure that your pipelines feature
    mature quality checkpoints throughout. This will allow you to release better software
    faster. When constructing a mature pipeline, it is essential to incorporate various
    quality stages, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Code coverage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static code analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infrastructure verification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post-deployment testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can greatly enhance the maturity and value of your CI/CD pipelines by incorporating
    these quality checks from the very beginning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are seven things to keep in mind when you launch your strategic quality
    management initiative:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Articulate your fundamental principles and standards of excellence**: One
    of the most difficult parts is usually figuring out what quality you’re aiming
    for. When describing what quality means to your company, be as detailed as possible;
    otherwise, your definition will remain vague and never get off the ground. Be
    careful to keep tabs on your progress after providing specific examples of quality
    metrics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Avoid prioritizing compliance as the primary focus**: Several companies believe
    that by achieving compliance with industry standards such as the **International
    Organization for Standardization** (**ISO**), the **Health Insurance Portability
    and Accountability Act** (**HIPAA**), the **Health Information Trust Alliance**
    (**HITRUST**), the **National Institute for Standards and Technology** (**NIST**),
    the **Current Good Manufacturing Practice** (**cGMP**), the **General Data Protection
    Regulation** (**GDPR**), and others, they have demonstrated their commitment to
    quality. However, they fail to grasp the essence of the subject. By prioritizing
    quality, compliance naturally follows. Compliance can be likened to focusing solely
    on achieving a passing grade in a test. While it assists companies in overcoming
    a specific obstacle, it does not adequately prepare them for establishing an enduring
    culture of excellence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Evangelize quality management to all coworkers**: While many companies do
    have people in charge of **quality control** (**QC**) and QA, quality should really
    be everyone’s job. Without fear of retaliation, employees should feel safe providing
    feedback and suggestions for enhancing quality. In addition, quality warriors
    should be given the opportunity to implement their ideas and be recognized when
    their efforts yield positive results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Streamline the process with automation**: The impact of quality processes
    on a company’s operations is apparent, but achieving those effects can be a lengthy
    and complex process. Ensure quality processes are followed, documentation is current
    and accurate, and dashboards alert you to any quality issues that can be addressed
    before they get out of hand. This is really made easier with an automated **quality
    management system** (**QMS**) that consolidates data across divisions. With the
    system taking care of quality processes, managers can concentrate on innovation
    and the core business rather than responding to emergencies and P1 incidents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Allow data to guide decision-making and actions**: Although the development
    of a genuine culture of excellence may appear to be a subjective skill, it actually
    involves a significant amount of scientific principles. Quality should be guided
    and driven by data that identifies areas of concern, predicts patterns, and aids
    in monitoring progress.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuously measure work in progress (WIP)**: Establishing clear goals with
    measurable objectives is the first step in any quality initiative, whether it’s
    a new production process, expanded product features, or revised security testing
    criteria. Next, get input from stakeholders such as clients, staff, or vendors
    to evaluate the project’s performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Make it your goal to pursue continuous improvement**: After delivering the
    applications and collecting feedback from stakeholders, it is crucial to ensure
    that the process does not conclude at that point. Genuine quality programs are
    inherently dynamic and must continuously adapt to address evolving needs and requirements.
    By consistently elevating your own standards, you can guarantee that quality becomes
    ingrained in the culture rather than being a temporary solution to a particular
    issue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Companies that prioritize quality as an inherent part of their organizational
    culture, rather than treating it as a short-term response to a problem, reap numerous
    advantages such as decreased security incidents, fewer occurrences of rolling
    back a release, and less damage to their reputation. However, it is only when
    a business adopts a comprehensive and integrated approach that quality can genuinely
    be established as its distinctive brand. A wise person once said *the way that
    you do one thing is the way that you* *do everything*.
  prefs: []
  type: TYPE_NORMAL
- en: Lacking dashboarding and reporting, or having too much
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Effective software development requires clear and open communication among all
    teams, which is crucial. It is essential for all individuals and groups to have
    a shared understanding and knowledge so that no one is excluded or left behind.
    Effective dashboards facilitate stakeholder buy-in and enhance the overall efficiency
    of the process.
  prefs: []
  type: TYPE_NORMAL
- en: Regrettably, this crucial element often lacks the necessary emphasis in numerous
    DevOps initiatives. Dashboarding and reporting of outstanding quality is frequently
    overlooked or given little consideration. As failures accumulate and identifying
    the underlying cause becomes challenging, firms become aware of the need for additional
    resources to facilitate decision-making.
  prefs: []
  type: TYPE_NORMAL
- en: Effective dashboarding and reporting, characterized by openness, not only enhances
    decision-making but also enables the team to closely monitor all stages of the
    development cycle, hence facilitating process refinement and pipeline optimization.
    When difficulties arise, as they inevitably will, these issues will no longer
    be overlooked. And after you’ve trained the staff on how to log and report correctly,
    it helps everyone get to the bottom of things, which means fewer failures in the
    future.
  prefs: []
  type: TYPE_NORMAL
- en: If specific stages in the pipeline consistently experience a significant failure
    rate, having visibility into these stages will facilitate prioritizing the investigation
    into the root causes of these failures. These feedback loops are crucial for achieving
    success in DevOps and pipeline implementation. By implementing effective dashboarding
    and reporting, you not only reduce time and cost but also enhance customer satisfaction
    and UX by delivering superior software. Quantitative data and statistics are highly
    persuasive, and numerous institutions have incorporated the collection of diverse
    indicators.
  prefs: []
  type: TYPE_NORMAL
- en: However, one can potentially become trapped in a state of excessive pursuit
    of dashboards and metrics, commonly referred to as *a dashboard and metric black
    hole*. The process of collecting basic data, while well intentioned, can rapidly
    become a tedious and time-intensive task. Perhaps even worse, in such an obsessive
    mental condition, it is more than likely that you will end up losing focus of
    what the point is in the first place. The primary purpose of collecting measurements
    is to enable companies to make informed decisions and implement strategies aimed
    at enhancing the metrics, not to create attractive-looking dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: One approach to achieve this objective is to focus on collecting **DevOps Research
    and Assessment** (**DORA**) metrics and providing teams with easy access to them.
    Additionally, agreed-upon procedures can be established to improve the quality
    of this data specifically for each team. By embracing a focused and concentrated
    strategy, these teams can initiate the adoption of engineering best practices,
    thereby facilitating the establishment and integration of a DevOps culture within
    the company.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting the wrong metrics to measure project success
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although DevOps offers the advantage of faster delivery, teams must remain cautious
    as the increased pace might potentially have a detrimental impact on the quality
    of the product. Having a well-defined and quantifiable set of DevOps metrics can
    effectively monitor the advancement and excellence of the project.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps offers a high degree of adaptability and can be easily tailored to the
    specific needs of any organization. Begin by clearly delineating the issues you
    aim to address through the implementation of DevOps and outlining the specific
    characteristics of your organization’s DevOps transformation. Subsequently, ascertain
    the potential obstacles that your organization may face in implementing DevOps
    and utilize them as a basis for your metrics. Selecting the appropriate DevOps
    metrics for your unique organization will enable you to assess your level of achievement.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the technical metrics, it is essential to consider the selection
    of business metrics in the context of DevOps. These metrics play a crucial role
    in effectively communicating the ROI of DevOps initiatives to key stakeholders.
    In order to effectively measure and evaluate performance, it is critically important
    to carefully choose metrics that are focused on the desired outcomes and are in
    line with the priorities of the business. For example, when the primary business
    objective is to enhance efficiency in organizational processes, it is advisable
    to employ metrics that specifically measure costs.
  prefs: []
  type: TYPE_NORMAL
- en: What are DevOps metrics?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is necessary for businesses to invest a significant amount of time, money,
    and resources in order to undergo a DevOps transformation. This includes reevaluating
    everything from tools to communication and training. It is essential to have the
    capability to evaluate DevOps metrics and performance benchmarks in a way that
    is both clear and accurate in order to effectively define goals, improve efficiency,
    and monitor progress.
  prefs: []
  type: TYPE_NORMAL
- en: When launching a DevOps initiative, it’s important to identify which **key performance
    indicators** (**KPIs**) will help you overcome your business’ unique hurdles.
    KPIs for DevOps should show the full extent of the transformation’s value and
    effect on the company. In order to make informed decisions about future processes
    and technologies, it is important to have accurate performance metrics to measure
    the value of current work.
  prefs: []
  type: TYPE_NORMAL
- en: Characteristics of useful DevOps metrics
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To better understand how a DevOps initiative or team is doing, here are five
    characteristics that reflect a high-quality DevOps indicator:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Measurable**: In order to ensure consistency and comparability, metrics should
    possess standardized values that remain constant throughout protracted time periods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Actionable**: A comprehensive analysis of the metric over a long period of
    time should yield insights into potential enhancements to systems, workflows,
    strategies, and other areas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reliable**: In order to ensure the accuracy of measurements, it is important
    to prevent team members from manipulating or influencing the results in any way.
    This ensures that the measurements are objective and free from any intentional
    bias or distortion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traceable**: The metrics should not merely make a passing reference to a
    general issue; rather, they should point directly to a root cause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Relevant**: It is essential that these metrics are designed to measure factors
    that hold significant importance to the overall functioning and success of the
    business.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Avoid tracking DevOps metrics that do not provide meaningful insights or contribute
    to the overall improvement of the software development and operations processes,
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Non-DevOps metrics**: For example, metrics that measure *flow load* are more
    suited for organizations that subscribe to the **Scaled Agile Framework** (**SAFe**),
    as opposed to DORA metrics, which are specifically designed to measure the success
    of DevOps release management initiatives.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Frivolous metrics**: Metrics should be designed to facilitate and enhance
    teamwork. Vain, or shallow, metrics show that you can do something, but they don’t
    really show how well your company is doing. Sometimes, incompetent leaders will
    ask for teams to produce vapid metrics to cover up their inexperience or negligence.
    For example, since code can be discarded entirely during refactoring and, occasionally,
    less code is better for the organization, metrics such as weekly code lines written
    become meaningless. Unless each build significantly improves the end-user experience,
    the quantity of builds per day is meaningless.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Contentious metrics**: When only the top performers are considered winners
    and everyone else is considered losers, it becomes challenging to anticipate effective
    communication and collaboration within and among teams. Avoid creating metrics
    that foster derision or contention among team members or teams, such as measuring
    the number of failed builds or fatal errors. Teams will develop a fixation on
    enhancing the metric, rather than identifying genuine issues and collaborating
    to address them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Six key DevOps metrics and six key customer satisfaction metrics
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In DevOps release management, the assessment of performance and progress is
    crucial for organizations. To this end, six key metrics have emerged as significant
    indicators. These metrics serve as a yardstick for evaluating the effectiveness
    and efficiency of DevOps practices within most organizations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lead Time**: In order to gauge completion time, the group needs to establish
    when exactly the task will begin and conclude. Every step of the process, from
    committing code to deploying it to production, needs to be quantifiable. One way
    to achieve this is by making the most of automated testing and integration processes;
    another is to shorten the total deployment time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deployment Frequency**: Automated deployment pipelines, API calls, and manual
    scripts are just a few ways that deployment frequency can be measured. Due to
    the fact that not every deployment is advanced to production, this metric focuses
    on the technical performance of the pipeline rather than the shipping frequency.
    Failed deployments impact customer satisfaction overall, but more frequent deployments
    can reduce errors associated with them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Change Failure Rate**: It is important to measure both success and failure
    rates when evaluating a DevOps initiative, even though increasing velocity is
    one of the intended goals. Unhappy customers occasionally become a consequence
    of failing to ensure that changes are consistently being released to production.
    As the number of deployments increases, if KPIs show a higher rate of failure,
    it is time to slow down and investigate problems in the pipeline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mean Time to Recovery (MTTR)**: This metric measures the time it takes for
    an organization to bounce back from a failure and is part of the DevOps framework.
    This metric is crucial for businesses as it shows how well teams can cope with
    disruptions and return to their regular operations quickly. Minutes and hours
    are the standard units of measurement, but sometimes days must be used as well.
    If you want to shorten the time it takes to resolve an issue, you need the correct
    application monitoring tools and strong cooperation between operations and developers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customer Ticket Volume**: This metric gauges how satisfied customers are.
    In many cases, the end user is the one who notices the flaws and errors, rather
    than the testers. After that, they will get in touch with customer service to
    voice their concerns. Consequently, a key measure of application quality is the
    amount of customer tickets labeled as problems or bugs. A low number of tickets
    shows that the application is robust, whereas a high number suggests that there
    are quality issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Defect Escape Rate**: Defects will happen regardless of how good a DevOps
    pipeline you have. The pipeline’s development or testing phases might be the best
    time to find these flaws. However, users will be able to spot them even if they
    pass tests. The defect escape rate can be defined as the percentage of production
    issues discovered both before and after deployment. It identifies weaknesses in
    the software development process, where bugs can easily slip through, and suggests
    ways to improve and strengthen the assurance of products and processes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps programs offer significant advantages to organizations, yet their implementation
    involves complexity and substantial costs. DevOps metrics play a crucial role
    in assessing the performance of DevOps teams and evaluating the effectiveness
    of implementing DevOps practices. These metrics provide valuable insights into
    the overall performance and impact of DevOps initiatives in organizations of any
    size or maturity level.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move forward, it is imperative that we spend some time reviewing
    key metrics that measure customer satisfaction. While these are indeed a separate
    concern from DevOps in a strict sense, they will enable you as both a leader and
    a release manager to succeed, no matter the context. These metrics apply to both
    internal and external customers. For example, you may be developing an internal
    product that is intended to assist other departments with being more productive.
    Or, you might be developing a software product in the traditional sense, with
    external facing customers in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Customer Satisfaction (CSAT) score**: Measuring the CSAT score involves conducting
    a survey where customers are asked to rate their experience following an interaction
    or purchase. You’re familiar with those; they appear right after you’ve completed
    a task or made a purchase, and inquire about your experience. The survey typically
    includes a scale, either numerical or emoji-based, that captures a wide range
    of experiences, from negative to positive. According to the feedback, the CSAT
    score can range from 0% to 100%.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating the CSAT score
  prefs: []
  type: TYPE_NORMAL
- en: Take the total number of favorable responses gathered and divide that number
    by the total number of responses surveyed, then multiply the result by 100\. This
    will yield your company’s CSAT score. The final result is the percentage of happy
    consumers doing business with your company.
  prefs: []
  type: TYPE_NORMAL
- en: '**Net Promoter Score (NPS)**: NPS is a commonly used metric, usually measured
    on a scale of one out of ten, for assessing customer loyalty and enthusiasm for
    a brand. It provides insights into customer satisfaction and their likelihood
    of recommending your business.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining the NPS
  prefs: []
  type: TYPE_NORMAL
- en: Patrons who rate your business as a nine or ten are generally referred to as
    promoters. They’ve developed a strong sense of loyalty toward your business and
    are enthusiastic about recommending it to someone else. Patrons who rate your
    business as a seven or eight are commonly referred to as passives. Their loyalty
    to your company can’t be considered unbreakable, so they might consider doing
    business with your competitors if presented with a superior alternative. Patrons
    who rate your business with a score of seven or below are considered detractors.
    They lack devotion toward your business and might actively express unfavorable
    views or opinions about it publicly.
  prefs: []
  type: TYPE_NORMAL
- en: '**Customer Effort Score (CES)**: CES is a metric used to gauge the level of
    effort patrons demonstrate when engaging with your company. These exchanges might
    include factors such as the level of effort required to use your company’s products
    and services, or the ease with which customers had their issues resolved by your
    company’s customer service representatives.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is recommended to send a survey to measure the level of effort customers
    had to spend following their last customer service exchange. You might consider
    implementing CES surveys to assess how satisfied patrons are with each individual
    customer service representative. This will enable the members of your customer
    service staff to further improve their results and ensure that your business maintains
    its commitment to providing exceptional customer support.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Measuring CES
  prefs: []
  type: TYPE_NORMAL
- en: The measurement of CES entails asking one question and the reply is scored on
    a scale from one to seven, where one indicates the greatest disapproval with the
    assertion.
  prefs: []
  type: TYPE_NORMAL
- en: The CES metric is determined by the proportion of customers who express agreement,
    indicating that the company effectively facilitated the resolution of their issue.
    Building customer loyalty becomes more achievable when customers transition from
    a state of disagreement or neutrality.
  prefs: []
  type: TYPE_NORMAL
- en: '**Customer Churn Rate (CCR)**: The CCR is the percentage of a company’s customers
    that discontinue using its services. It’s also called the attrition rate. A typical
    way to quantify it is as a percentage of a company’s subscribers who cancel within
    a particular time frame. It’s also the percentage of workers who quit within a
    given time span. Growth must outpace churn, in terms of customer loss, for a business
    to increase its customer base.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating CCR
  prefs: []
  type: TYPE_NORMAL
- en: The churn rate formula is *(Lost Customers ÷ Total Customers at the Start of
    Time Period)* *x 100*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Customer Health Score (CHS)**: A CHS is the most effective indicator for
    assessing a customer’s likelihood of remaining loyal to your company or defecting
    to a competitor. These ongoing client retention statistics are particularly valuable
    to account executives and support staff as they provide insight into the likelihood
    and extent of customer churn.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating the CHS
  prefs: []
  type: TYPE_NORMAL
- en: 'Contrary to the majority of SaaS metrics, the CHS lacks a predetermined algorithm.
    However, the computation of your CHS will be distinct to your organization and
    your particular product. However, there are five primary stages that you will
    follow when computing a client health score:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Define what the level of health is for your customers.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Choose the metrics that will be used for making predictions.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Establish a system for assigning scores.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Divide your consumer data into distinct segments.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Display a graphical representation of your CHS.
  prefs: []
  type: TYPE_NORMAL
- en: '**Customer Lifetime Value (CLTV)**: CLTV is a quantitative measure that represents
    the anticipated amount of income generated by just one customer during the entire
    duration of their relationship with your business.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating the CLTV
  prefs: []
  type: TYPE_NORMAL
- en: Multiply the customer value by the average customer lifespan. To determine the
    CLTV, you can find the customer value by multiplying the average purchase value
    by the average number of purchases. After obtaining the average customer lifespan,
    it is possible to calculate the CLTV by multiplying it by the customer value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the formulas:'
  prefs: []
  type: TYPE_NORMAL
- en: '- **Calculating customer value** is done by multiplying the average purchase
    value by the average number of purchases.'
  prefs: []
  type: TYPE_NORMAL
- en: '- **Calculating the CLTV** is done by multiplying the customer value by the
    average customer lifespan.'
  prefs: []
  type: TYPE_NORMAL
- en: Leaving others behind as you move forward with DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The internal justification for implementing DevOps practices in your organization
    plays a crucial role in shaping the foundational aspects of an organization’s
    culture. In the context of agriculture, the search for fertile soil is a fundamental
    endeavor. Fertile soil refers to soil that possesses the necessary nutrients and
    physical properties to support the growth and development of plants, and this
    search typically involves assessing various factors. In the context of a DevOps
    transformation, it is crucial to effectively communicate, demonstrate, and persuade
    key stakeholders about its significance. Failing to do so may result in skepticism
    toward the initiative and a propensity to seize any chance to prove its failure.
    Being in an unfavorable position is undesirable, especially when embarking on
    a journey where others anticipate your failure.
  prefs: []
  type: TYPE_NORMAL
- en: In order to achieve success, it is important to have the full participation
    and support of all individuals, including those who express doubt or skepticism
    toward DevOps. Notably, engineers are the ones who most often exhibit a skeptical
    disposition. Having spent a decade or two in this industry, they have witnessed
    numerous ideas and novel approaches emerge and fade away. They can dismiss DevOps
    as a “failed approach” to the same recurring issues without much difficulty. If
    you execute it inadequately, DevOps will undoubtedly become another unsuccessful
    methodology. It is crucial for you and your team to demonstrate to others the
    possibilities and encourage them to participate in a manner that includes everyone.
  prefs: []
  type: TYPE_NORMAL
- en: Utilize data and emphasize the potential for expedited software delivery when
    persuading executives. However, engineers require an understanding of how DevOps
    will enhance their job satisfaction. Demonstrate the correlation between DevOps
    and business requirements, as well as its ability to minimize obstacles throughout
    the software delivery process. Ensure that you do not excessively promote or exaggerate
    the concept. Encountering DevOps challenges is inevitable, as DevOps is not a
    panacea and necessitates significant effort initially to establish a culture of
    continuous learning, where engineers have the freedom to make errors and advance
    their careers.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have reached a critical point in your organization, where a significant
    number of individuals embrace the concept of DevOps, you can confidently move
    forward, knowing that your organization and its members are fully supportive.
  prefs: []
  type: TYPE_NORMAL
- en: Working toward a common vision and goals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An optimally functioning DevOps team is characterized by its members possessing
    a unified perspective that aligns with the overall objectives of the organization.
    Team members should possess an intimate understanding of the company’s strategic
    objectives in order to enhance their capacity for decision-making during the development
    and implementation of applications. The leadership of the organization plays a
    crucial role in effectively conveying this vision and facilitating team members’
    awareness of the desired trajectory of their ambitions. By striving toward a common
    vision, the team establishes a stronger foundation for collaborating on their
    respective projects and effectively communicating with one another.
  prefs: []
  type: TYPE_NORMAL
- en: Equally significant to a collective vision is a collective awareness of the
    specific objectives they are striving to accomplish. These goals encompass not
    only the organizational level but also the team and project levels. Furthermore,
    they can incorporate objectives for the DevOps initiative itself, encompassing
    various teams and a wide range of software projects. DevOps teams should be spared
    the burden of managing conflicting priorities and competing objectives. Once again,
    the leadership of the organization will have a crucial role in effectively communicating
    goals at different levels, as well as sharing the overall vision.
  prefs: []
  type: TYPE_NORMAL
- en: Opposition to change
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some key stakeholders and employees may find the transition to DevOps terrifying.
    To avoid coming across as revolutionary, try framing it as an improvement over
    current development methods because that is exactly what DevOps release management
    is.
  prefs: []
  type: TYPE_NORMAL
- en: Potentially, the act of providing advice to an individual can elicit a negative
    response from the recipient. A successful DevOps transition necessitates a smooth
    and incremental approach. The culture of DevOps can be embraced by individuals
    through a process of gradual adjustment and recognition of the diverse ways in
    which it can facilitate the development process. The integration of DevOps practices
    into a small-scale full-stack project is a commendable strategy to begin a DevOps
    transformation.
  prefs: []
  type: TYPE_NORMAL
- en: After observing the benefits firsthand, teams will naturally be inclined to
    adopt the new operational procedures. As a result, everyone will be in agreement
    to transition to the new DevOps ecosystem, and the sense of unfamiliarity will
    gradually diminish.
  prefs: []
  type: TYPE_NORMAL
- en: Converting to microservices from old infrastructure and design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Despite their long-standing usefulness to the business, bygone applications
    and obsolete infrastructures, with complex architecture stacks, have the potential
    to cause problems in the near term and catastrophes in the long term. You risk
    falling behind the competition if you stick too long with what’s already been
    working, and you will likely experience instability challenges, a shortfall of
    knowledgeable support engineers, and high operational costs compared to more contemporary
    alternatives that are more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: '**Infrastructure-as-code** (**IaC**) and microservice architectures are key
    components in achieving a future of perpetual innovation. By adopting these approaches,
    the SDLC is transformed and modernized, allowing businesses to swiftly adapt to
    changing markets and meet evolving consumer expectations in real time.'
  prefs: []
  type: TYPE_NORMAL
- en: By adopting microservice architectures and migrating to a cloud-native environment,
    you can enhance the efficiency of research and development operations. To succeed
    at this, a solid understanding of automation, configuration management, and CD
    processes is required for effectively managing the elevated operational workload
    associated with microservice architectures and advanced delivery strategies.
  prefs: []
  type: TYPE_NORMAL
- en: Limitations of monolithic-to-microservices migration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no universal answer that can be applied to all situations, and the
    same principle applies to microservices. Although the design may seem attractive
    due to its many benefits, your software may really benefit more from a monolithic
    architecture. Hence, it is vital to evaluate whether there is a legitimate need
    to transition from a monolithic architecture to a microservices architecture in
    the first place.
  prefs: []
  type: TYPE_NORMAL
- en: When transitioning from a monolithic architecture to a microservices architecture,
    it is important to acknowledge that the process may entail substantial time and
    upfront expenses. Although the long-term cost-effectiveness of this architecture
    is unambiguous, it is important to note that allocating resources for team formation,
    infrastructure setup, and data storage is necessary for each microservice. The
    duration of the migration process directly correlates with the amount of resources
    that must be allocated.
  prefs: []
  type: TYPE_NORMAL
- en: 'When discussing migration times, it is important to note that there is no universally
    applicable average duration. The duration of the process can exhibit significant
    variation, ranging from 6 months to 5 years for its completion. The duration of
    the timeline for a project is influenced by two factors: the complexity of the
    project and the frequency of updates to the monolith system. These updates serve
    as a constraint on the migration process.'
  prefs: []
  type: TYPE_NORMAL
- en: In the process of migrating legacy applications to microservices, it is important
    to note that the monolithic application will continue to operate. In the context
    of software development, when faced with a lengthy migration process, it is advisable
    to periodically update the monolithic system in order to sustain your market position.
    However, it is recommended to refrain from performing this action if feasible.
  prefs: []
  type: TYPE_NORMAL
- en: In order to maintain efficient operation, it is necessary to establish a harmonious
    cohabitation between the monolithic and microservices versions. This is vital
    in order to prevent redundant data, guarantee dependable communication between
    various components, and minimize any potential errors. The responsibility of handling
    this task lies primarily with your migration team, as it involves numerous technical
    aspects. To achieve a successful migration from monolithic architecture to microservices,
    it is fundamental that you verify that the specialists selected to operate possess
    the requisite skills and expertise.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the inherent uniqueness of each project, a distinct approach is necessary
    for its migration process, which may not necessarily conform to established theoretical
    principles. Specialists in the field of DevOps release management must possess
    adaptability and a comprehensive understanding of various concepts, including
    familiarity with relevant tribal knowledge in order to formulate an optimal development
    strategy for each migration project.
  prefs: []
  type: TYPE_NORMAL
- en: After discussing the intricacies of transitioning from a monolithic architecture
    to a microservices architecture, we will now explore the ideal roadmap for such
    a transformation.
  prefs: []
  type: TYPE_NORMAL
- en: Monolithic-to-microservices roadmap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The process of transitioning to microservices involves more than just a simple
    system adaptation. The procedure is intricate and requires a considerable amount
    of time. It involves substantial changes, such as reorganizing the team and choosing
    new systems and tools, among other things. Therefore, it is important to possess
    a well-defined roadmap that will facilitate the seamless integration of diverse
    modifications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the context of managing multiple projects with distinct business requirements,
    it is necessary to develop individualized roadmaps that facilitate the transition
    to microservices for each one. The following roadmap provides a general framework
    for outlining this transition:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Map out microservices**: The initial step in designing a new architecture
    is to collaboratively identify and select the microservices that will be incorporated
    into the system. Microservices are commonly organized according to their specific
    functionality, where each microservice is assigned a distinct responsibility for
    performing a particular task.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to divide the application appropriately and prevent microservices from
    being partially or fully duplicated, you need to look into the monolithic application
    components that might have comparable functionality and remove them. Most monolithic
    applications have the capability to be divided into smaller components. The effectiveness
    and precision of this procedure are contingent upon the proficiency and expertise
    possessed by your team.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Configure the infrastructure**: In order to establish a robust and efficient
    computing environment, it is advisable to enlist the expertise of seasoned DevOps
    engineers. These professionals possess the necessary knowledge and skills to define
    crucial components such as databases, communication protocols, cloud infrastructure,
    and data synchronization methods. Once these elements have been clearly defined,
    the DevOps engineers proceed to configure and establish the computing environment
    accordingly.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Define and split the team**: In the context of microservices architecture,
    it is common for individual developers to be assigned responsibility for specific
    microservices. Teams can also be cross-functional, meaning they can collaborate
    with multiple services concurrently if necessary.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An alternative strategy involves the arrangement of specialists according to
    intricate procedures that have the capacity to encompass multiple microservices.
    In a typical organizational structure, different teams are assigned specific responsibilities
    to ensure efficient management of various aspects of a system. For instance, one
    team may be designated for infrastructure management, while another team may be
    responsible for data management. This division of labor allows for specialization
    and effective handling of different components within the system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Define the tech stack for each microservice**: Microservices offer the advantage
    of selecting the most suitable technology stack for each specific service. In
    order to achieve reliable and efficient performance in each microservice, it is
    essential to consult with architects, tech leads, and security specialists. This
    collaboration necessitates identifying the most appropriate technologies and frameworks
    for each component of the application. By doing so, each microservice can function
    optimally, as well as the application as a whole.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Set up sprints**: After allocating teams to specific technologies for microservices
    development, it is essential to compile a comprehensive list of features present
    in the monolithic application. Subsequently, the team should proceed to establish
    sprints and assessments for each of these features. Once all necessary preparations
    have been completed, the migration process can begin.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Development and testing**: The development process should be initiated by
    creating a **minimum viable product** (**MVP**). This is done to evaluate the
    selected architecture and tools. This could be an initial pilot project consisting
    of one or more critical microservices. Taking this approach allows for a focused
    examination of the chosen components and their effectiveness in supporting the
    desired system.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing is an essential component of code refactoring to ensure the quality
    of the code. It is essential to ensure that the team conducts unit, integration,
    and acceptance testing while simultaneously developing the code. The tests should
    be developed in parallel with the code development process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Deployment**: The process of deploying microservices in a gradual manner
    involves ensuring that the monolithic application remains compatible with the
    changes. This approach allows for a smooth transition from a monolithic architecture
    to a microservices architecture. The implementation of this approach aims to reduce
    any disturbances that may occur during the process of transitioning.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before embarking on the migration from a monolithic architecture to a microservices
    architecture, it is important to consider additional critical variables in order
    to mitigate common hurdles. Although the monolithic-to-microservices roadmap provides
    some guidance, the following additional considerations will only further enhance
    the migration process.
  prefs: []
  type: TYPE_NORMAL
- en: Factors to consider before monolithic-to-microservices migration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When transitioning from a monolithic architecture to microservices, it is important
    to take into account the considerations that follow:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Thorough plan creation**: First and foremost in guaranteeing a smooth transition
    from monolithic to microservices architecture is a well-defined migration roadmap.
    Pay close attention to this initial step because it’s simple to miss important
    details and make mistakes if you don’t. You, the development team, and the business
    owners will all benefit from complete transparency during the migration process
    if you have a detailed plan that accounts for fair division of resources, minimization
    of risks, and workload sharing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, make preparations for unexpected events and possible obstacles. Plan for
    a fallback to the old design and what to do if problems emerge during the move.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Freezing new feature development**: Upgrades and patches to systems that
    are still in operation during migrations are a leading cause of project failure.
    The team will have twice as much work to accomplish if the company is always requesting
    system changes, new features, or updates to existing ones during the transition
    to a microservices-based architecture. Prior to migrating to microservices, businesses
    must provide resources to execute these enhancements within the monolith. Because
    of this, the monolithic architecture becomes more complicated, which in turn makes
    the migration take longer and causes technical debt to accumulate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consequently, the team runs the risk of squandering time and energy, leading
    to an enormous backlog of unfinished work and a microservices architecture that
    doesn’t function properly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Current system assessment**: Perform a thorough evaluation of your current
    monolithic system in order to identify areas that necessitate enhancement or contain
    obsolete features. The migration process presents a valuable opportunity to leverage
    contemporary technologies and methodologies in order to revamp inefficient and
    outdated processes. Microservices architecture allows for the incorporation of
    relatively new features with minimal modifications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to refactoring pre-determined functionality, developers may encounter
    additional code vulnerabilities while performing the migration process. The possibility
    of additional modifications and a prolonged timeline for development may arise
    as a result of this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Choosing an experienced migration team**: Although an optimal theoretical
    microservices migration plan exists, it is often challenging to implement it completely
    in real-world scenarios due to the uniqueness of each project, necessitating a
    customized solution. In order to determine the most suitable option, it is vital
    to have a highly skilled migration team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Achieving a successful migration entails more than simply completing a technical
    project. Undoubtedly, it will predominantly assume a technical nature, necessitating
    a methodical and cautious progression. However, the most crucial aspect is to
    carefully select the appropriate team. You require individuals possessing the
    appropriate mindsets and technical intuition. The remainder of the process relies
    on the application of specific methodologies and the proficiency of the developers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Allocating sufficient time for the transition**: Take into account the amount
    of time required for the shift from a monolithic architecture to microservices.
    This is not a simple process, but rather an exploration into uncharted territory
    that might be time-consuming. The minimal timeline for the project varies depending
    on its complexity and requirements. The duration could range from 1 year to several
    years.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To alleviate any anxieties regarding these timelines, it is important to note
    that your monolithic application will remain functional throughout the transfer
    process. Although it is advisable to halt expansion and the addition of new features,
    your solution will continue to function until the whole transition to microservices
    is achieved.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Deciding to automate the wrong processes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Frequently, when attempting to optimize the utilization of DevOps resources,
    teams tend to excessively automate operations that do not require automation.
    They attempt to imitate the accomplishments of industry leaders such as Amazon
    or Google by utilizing their configuration management technologies. In certain
    scenarios, crucial processes may be omitted from the automation workflow. Without
    a comprehensive understanding of how all processes and subprocesses are interconnected,
    teams may struggle to identify which processes require automation when they begin
    automating tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In the realm of automation, it is prudent to refrain from applying a blanket
    approach to every process. Instead, it is recommended to deconstruct each process
    into its individual subprocesses, such as the case when performing value stream
    mapping exercises. By doing so, a more comprehensive understanding of the process
    can be achieved, allowing for a more targeted and effective application of automation
    techniques. Next, it is necessary to evaluate each process to determine if it
    is functioning according to the expected behavior. This procedure helps DevOps
    teams twofold. First, it gives a thorough picture of each process and guarantees
    no step is neglected. Second, it prevents the incorrect automation of any process
    by mandating a comprehensive review of all procedures.
  prefs: []
  type: TYPE_NORMAL
- en: It is crucial for you to recognize that DevOps extends to more than just automation.
    It covers the entire process, from generating ideas to delivering and implementing
    them into production environments. Even prominent corporations with exceptional
    DevOps teams and large budgets may not always have a clear understanding of the
    issue that they are facing, and they may encounter difficulties that impact their
    ability to effectively manage their value streams or their ability to integrate
    multiple pipelines holistically.
  prefs: []
  type: TYPE_NORMAL
- en: In a nutshell, there is a common misconception that DevOps is really about seeking
    to automate every process. Keep in mind that just because you automate something
    doesn’t mean you’re automatically improving it. In fact, you might inadvertently
    be automating your own destruction without realizing it until it is too late.
    Hindsight is 2020...
  prefs: []
  type: TYPE_NORMAL
- en: A quiet customer is a happy customer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For certain individuals, the notion of clients remaining silent throughout the
    entirety of their project could be perceived as a perfect scenario, even something
    they enthusiastically desire. In the context of project teams, the absence of
    interruptions and the ability to solely focus on delivering the requested outcome
    can be considered a state of bliss. Perhaps, in the midst of our pleasant dream,
    we may come to the realization that isolating ourselves from customers beyond
    the immediate project team is not a sensible approach when attempting to achieve
    our goals.
  prefs: []
  type: TYPE_NORMAL
- en: The unfortunate reality is that the project team will sometimes choose to cut
    off all communication with the client. Most often, this happens after a disagreement
    or after changes in requirements have occurred and emotions run hot. The client
    may also perceive that they benefit from this since they would prefer to not deal
    with any more conflicts or difficult situations; after all, they want the project
    to get completed.
  prefs: []
  type: TYPE_NORMAL
- en: This level of naivety may seem effective until there is a need for some type
    of interaction between the project and the client. Reestablishing that connection
    and beginning the conversation all over again is never easy, but it’s essential
    for the project’s success. Perhaps, the newly reestablished relationship falls
    by the wayside, and the vicious cycle of conflict and divergent viewpoints begins
    all over again. This kind of toxic relationship certainly won’t benefit anyone
    or the project in general.
  prefs: []
  type: TYPE_NORMAL
- en: If you intentionally avoid communicating with customers because you mistakenly
    believe that they hinder your progress and that providing updates or engaging
    in conversations with them will distract you from completing project work, I’m
    here to tell you that this is foolish! It is absolutely essential that you receive
    prompt feedback from the customer as often as possible. Doing so ensures that
    your team receives vital information that is necessary to improve a product and
    produce optimal outcomes for all parties involved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Several factors can contribute to customers exhibiting less communication than
    anticipated:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Customers are happy with what’s happening**: Assuming that they are pleased
    with the progress of the project, they may learn through various channels how
    the project is moving in comparison to the plan and will be content with it. Although
    it is entirely feasible, it would be prudent to call and discuss it just to be
    sure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customers have higher-priority work that needs their attention**: In certain
    instances, individuals may be engaged in multiple competing priorities such as
    other projects that they perceive as more intriguing or compelling. As a release
    or project manager, it is your responsibility to recognize where your project’s
    position lies within the customer’s hierarchy of priorities. To obtain accurate
    information regarding this, it is essential to establish consistent communication
    with your customers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customers don’t know what their project management responsibilities are**:
    At times, clients, particularly those in bigger companies, lack knowledge about
    how projects operate and may believe that they can continue with their other obligations
    once they have initiated the project and can wait for its successful completion.
    As a release/project manager, it is your duty to keep your clients abreast of
    project status if they lack understanding. The day may come when you really need
    their help, after all.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customers have lost interest in your project**: In the pursuit of completing
    a project, it is common for individuals to dedicate a significant amount of time
    and effort to what they are trying to accomplish. Your customers are likely occupied
    with their respective jobs and will not be available sometimes. When engaging
    with others, it is important to exercise caution and thoughtfulness. The primary
    purpose of providing updates is to inform stakeholders about the current status
    and any challenges that have emerged during the course of a project or task. In
    order to ensure future support for the project, it is important to establish their
    backing. In the context of customer engagement, it is crucial to address situations
    where customers become unresponsive. This lack of communication may indicate a
    potential loss of interest in the project, which could be indicative of broader
    organizational issues. Therefore, it is essential to actively engage with these
    customers to ascertain their level of interest and identify any underlying concerns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A project should not have the goal of cultivating a group of clients who are
    not particularly vocal about their needs. If some clients are more reserved than
    others or have become less communicative than they have been in the past, then
    this is an indication that something needs to be investigated more deeply. Always
    keep in mind that the customers of a project are its allies and champions, and
    it is the responsibility of individuals working on the project to maintain engagement
    with those customers. While it is true that this does take time away from what
    some people might consider to be direct project work, it is ultimately beneficial
    to make sure that you have a group of clients that are both supportive and thoroughly
    involved.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This concludes [*Chapter 11*](B21803_11.xhtml#_idTextAnchor199) and this book.
    In this final chapter, you have been shown why it is essential to have a carefully
    designed change management process. You know how to leverage change requests and
    change management logs to keep your day-to-day operations organized and accountable.
    Additionally, you are now aware of the importance of keeping and following a software
    release checklist and have an awareness of how they can be customized for each
    product that you are managing. Finally, you have learned the common pitfalls of
    DevOps release management and are familiar with essential strategies to avoid
    repeating them in your own initiatives.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t forget that there is a wealth of additional information in the [*Appendix*](B21803_Appendix.xhtml#_idTextAnchor223)
    of this book. Some of the material includes answers to the chapter questions,
    a glossary of terms, templated release management documents, expanded content
    that did not fit in the body of the text of this book, and much more!
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let me personally thank you for taking the time to read this content that I
    have worked so hard on. Whether you are an aspiring DevOps release manager, a
    seasoned DevOps engineer, a senior executive, or something in between, thank you,
    from the bottom of my heart!
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have finished reading this book, you are familiar with a brief
    history of release management, what DevOps release management is, how it is different,
    and basic strategies to implement it. You have been shown how CI/CD pipelines
    enforce good DevOps release management, and you’ve learned techniques to optimize
    them. Additionally, you have learned how to create a culture of cross-functional
    product development that reduces waste and increases value to the customer. As
    a result, you understand its usefulness in removing silos that isolate team members.
    Finally, you are now qualified to explain why DevOps release management is emerging
    as the most popular strategy currently being adopted today.
  prefs: []
  type: TYPE_NORMAL
- en: The concept of DevOps has sparked heated controversy in the IT industry since
    its very beginning. Individual views have varied on this subject, with certain
    groups dismissing it as a superficial trend that will fade away, while others
    see it as something absolutely revolutionary. Over the course of time, strategists
    have made many predictions about the future of DevOps, and although the movement
    has been growing continuously, it has yet to gain widespread adoption among certain
    sectors of the economy. This is where the responsibility lies with you, to shine
    a light on those organizations that have not fully grasped the potential of DevOps
    and the value it can bring to their operations.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps has undergone a significant transformation, advancing from an obscure
    methodology to a powerful strategy that unifies developers and operations teams,
    ultimately revolutionizing all aspects of a company. With a forward-thinking mindset,
    DevOps redefines IT product and service delivery by enhancing collaboration, communication,
    and alignment throughout the entire organization. Now that you firmly understand
    the concepts of DevOps release management, go forward and be the catalyst that
    heralds improved agility, streamlined IT management, minimized costs, and superior
    product quality for your business and the world!
  prefs: []
  type: TYPE_NORMAL
- en: I wish you all the best on your journey toward DevOps mastery.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a change management strategy intended for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the elements of a change proposal and what is its purpose?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the elements of a change log and what is its purpose?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a release checklist and what is its intended purpose?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the secret ingredient to any successful DevOps transformation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is it false to think that DevOps is mainly about tools?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are three kinds of metrics that DevOps release managers should stridently
    avoid tracking?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Briefly, what are the seven steps in the monolithic-to-microservices roadmap?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it true that the use of CI/CD pipelines means that a company is successfully
    applying DevOps practices?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the single most critical reason why it is a mistake to assume that a
    quiet customer is a happy customer?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Appendix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, we have arrived at the end of the book – the [*Appendix*](B21803_Appendix.xhtml#_idTextAnchor223).
    Here you will find lots of great content about DevOps release management.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a quick list of the main topics covered in the [*Appendix*](B21803_Appendix.xhtml#_idTextAnchor223):'
  prefs: []
  type: TYPE_NORMAL
- en: The OWASP Top 10 CI/CD Security Risks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Value stream mapping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Release management templates:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software release checklist
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Business specification document
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Software Requirements** **Specification** (**SRS**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirement traceability matrix document
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use case document
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Answers to chapter questions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Glossary of terms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The OWASP Top 10 CI/CD Security Risks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Continuous Integration** (**CI**) and **Continuous Deployment** (**CD**)
    have emerged as crucial elements of contemporary software engineering practices.
    The utilization of CI/CD also presents certain security vulnerabilities that necessitate
    careful consideration. In this section, we will examine the *OWASP Top 10 CI/CD
    Security Risks*, a comprehensive exploration of the most prevalent security risks
    that threaten the CI/CD pipeline infrastructure of any contemporary organization.
    This section serves as a valuable reference for understanding the most predominant
    vulnerabilities, along with recommendations for mitigating these risks. By familiarizing
    yourself with these risks and implementing the suggested countermeasures, you
    will be emboldened to enhance the security of the CI/CD pipeline infrastructure
    in your organization.'
  prefs: []
  type: TYPE_NORMAL
- en: Insufficient Flow Control Mechanisms (CICD-SEC-1)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Risk and security flaws can be introduced when designing the overall system
    architecture for CI/CD infrastructure without addressing security in the pre-code
    activities. When companies construct their CI/CD environment without effectively
    adopting secure-by-design principles to protect against potential exposure to
    security threats, design and architectural flaws occur. These are not to be confused
    with implementation errors, which occur during a system’s initialization and configuration.
  prefs: []
  type: TYPE_NORMAL
- en: These dangers serve as examples of the CI/CD processes’ complexity and the many
    potential attack surfaces that they present. The fundamentals of a DevOps governance
    model involve the identification and mapping of potential risk areas, followed
    by the implementation of a set of policies, standards, and procedures. These measures
    are put in place to ensure adherence to established processes and to uphold the
    desired level of code quality and system integrity. Moreover, this endeavor will
    have a significant influence on the overall operations of the business. By implementing
    improved governance practices, not only will the level of security risks be diminished,
    but the efficiency of your pipeline will be enhanced, enabling developers to maintain
    their workflow and effectively meet your business requirements in a more expeditious
    and cost-effective way.
  prefs: []
  type: TYPE_NORMAL
- en: It is necessary to implement comprehensive evaluations and manual authorizations
    for any modifications and adaptations made inside the environment. Automated code
    review is essential for the efficient and effective evaluation of code quality.
    However, despite the benefits of automation, it is still necessary to conduct
    manual code reviews for any new customizations or modifications. This requirement
    is prevalent in the majority of **Source Control Management** (**SCM**) platforms,
    such as GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Inadequate Identity and Access Management (CICD-SEC-2)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Access control is an issue that must be considered by businesses of all sizes.
    Attackers may be able to compromise your engineering ecosystem because of inadequate
    identity and access management. Fortunately, there are numerous solutions available
    to help you quickly and easily give, modify, or cancel access rights, even without
    manual input. This class of tools ensures that access restrictions are applied
    uniformly across enterprise systems, reducing the possibility of human error.
    Additionally, DevOps should adhere to the principle of least privilege, which
    states that users should only be given the permissions they actually need to do
    their jobs and no more. This necessitates restricting access to critical information
    and systems to only those who have a legitimate need for it.
  prefs: []
  type: TYPE_NORMAL
- en: It is also best practice to adhere to the segregation of duties, a practice
    that makes it much harder for someone to perpetrate fraud or deliberately damage
    your systems. It also reduces the risk of errors since more than one person oversees
    essential tasks, such as reviewing pull requests and merging new code in with
    the mainline branch. Also consider requiring multi-factor authentication, which
    requires that users must show at least two different kinds of identification to
    prove who they are. Usually, they need to know something metaphysical, such as
    a password, but also possess a physical thing, such as a security key or a one-time
    code sent to their phone.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency Chain Abuse (CICD-SEC-3)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cybercriminals wreak havoc on businesses by assaulting their supply chains,
    aiming for the weakest links. Any sector, from the government to the oil industry,
    is vulnerable to supply chain attacks. Both software and hardware are vulnerable
    to supply chain attacks. Cybercriminals commonly insert malware or hardware-based
    spying components into the production or distribution stages of a product.
  prefs: []
  type: TYPE_NORMAL
- en: Malicious actors frequently exploit vulnerabilities within supply chains present
    in engineering and build environments in order to introduce malevolent software.
    These attacks on supply chains frequently target vulnerabilities that are already
    known to exist in both commercial and open source dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: The suggested approach for mitigating risk involves the implementation of a
    centralized artifact system. The dependencies provided by the company are put
    onto the system and their checksums are validated. Examples include Sonatype Nexus,
    Jfrog Artifactory, and Apache Archiva.
  prefs: []
  type: TYPE_NORMAL
- en: Poisoned Pipeline Execution (CICD-SEC-4)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The concept of **Poisoned Pipeline Execution** (**PPE**) risks revolves around
    the possibility of an attacker, who possesses access to source control systems
    but lacks access to the build environment, skillfully manipulating the build process.
    This manipulation occurs through the cunning injection of malicious code or commands
    into the build pipeline configuration, resulting in the pipeline itself becoming
    tainted or “poisoned.” Consequently, when the build process is initiated, the
    poisoned pipeline proceeds to execute the injected malicious code, surreptitiously
    incorporating it as an ingrained part of the build process.
  prefs: []
  type: TYPE_NORMAL
- en: Once a PPE attack succeeds, it may take over the CI/CD pipeline’s identity and
    exploit any number of vulnerabilities. Potentially harmful operations include
    getting access to secrets that the CI job has access to, gaining access to external
    assets that the job node can access, sending code and artifacts that appear to
    be valid down the pipeline, and getting access to other hosts and assets in the
    job node’s network or environment. Because of its destructive impact, complexity
    to detect, and the availability of multiple exploit techniques, the PPE threat
    is a big worry. Understanding PPE and the countermeasures against it is vitally
    required for CI/CD security on the side of security teams, engineers, and release
    managers.
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended to execute unverified code within isolated systems and restrict
    access to sensitive areas. The management of pipeline activation in public repositories
    should be regulated, and superfluous user permissions should be revoked. It is
    advisable to verify the CI configuration files prior to the execution of the pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Insufficient Pipeline-Based Access Controls (CICD-SEC-5)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Central to access controls in a CI/CD process is the establishment of governance
    guidelines for the usage, location, and authorization of automated processes.
    In addition, setting environment-protection rules that determine who can make
    changes in which environment (i.e., build, staging, and production environments)
    is another important aspect of access controls. Without these kinds of access
    controls, enterprises expose themselves to additional risks, such as the possibility
    that a non-approved workflow would be performed, which will result in the system
    being compromised, or that an attacker will gain access to important environments
    within the CI/CD systems.
  prefs: []
  type: TYPE_NORMAL
- en: Suggested mitigation strategies encompass the utilization of dedicated environments
    specifically designated for sensitive pipelines, the restriction of access permissions
    solely to necessary resources, and the limitation of network connectivity within
    the execution environment.
  prefs: []
  type: TYPE_NORMAL
- en: Insufficient Credential Hygiene (CICD-SEC-6)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Access and authentication credentials such as passwords are typically stored
    in automated workflows in CI/CD environments because they leverage multiple systems.
    These are called *secrets*, and they are used all through the CI/CD processes.
    Unencrypted secrets can be turned into a potent attack surface if they aren’t
    properly protected or if organizations have lax governance standards for granting
    access to such secrets.
  prefs: []
  type: TYPE_NORMAL
- en: One potential measure to enhance security is the adoption of transient credentials
    instead of static ones, as well as the avoidance of shared credentials across
    various situations. In addition, it is advisable to employ automatic scanners
    that are capable of detecting credentials within files. Two examples of tools
    that might be mentioned are git-secrets developed by AWS Labs and TruffleHog developed
    by Truffle Security.
  prefs: []
  type: TYPE_NORMAL
- en: Insecure System Configuration (CICD-SEC-7)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Specifically, this speaks to the use of weak passwords, not applying necessary
    security patches, and the improper protection of various systems within a CI/CD
    environment, all of which can put sensitive data in jeopardy. Even though they
    may be easy to overlook, security misconfigurations may leave an application vulnerable
    to attacks. A hacker may not even have to launch a deliberate attack if certain
    configuration mistakes disclose sensitive data. There is a greater threat to application
    security for every bit of code and data that clients can access.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, data might be available with a simple online search due to a misconfigured
    database server. An attacker might be able to access more data outside the database
    or even start a new attack on the business’s server infrastructure if that data
    contains administrative credentials. Massive volumes of personally identifiable
    information may become publicly available online if storage devices’ security
    protections are either not set up properly or are completely nonexistent. In most
    cases, learning who may have accessed this data prior to its security measures
    is not possible. Another typical problem with online apps, especially those built
    on popular platforms such as WordPress, is directory listing. People are able
    to freely explore and access the filesystem, which makes it easy for them to find
    and exploit deficiencies in security. Attackers may change or reverse-engineer
    a program if they are able to access its filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: In order to enhance the security of CI/CD processes, it is necessary to not
    only focus on the code and artifacts involved but also consider the posture and
    resilience of each system. Suggested strategies for enhancing security encompass
    periodic evaluations of system configurations and the timely updating of deprecated
    program versions.
  prefs: []
  type: TYPE_NORMAL
- en: Ungoverned Usage of 3rd Party Services (CICD-SEC-8)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When considering the topic of CI/CD, unregulated usage of third-party services
    refers to the unrestricted and unsupervised utilization of external tools and
    services that have been incorporated into, or given access to, an organization’s
    CI/CD infrastructure and resources.
  prefs: []
  type: TYPE_NORMAL
- en: Within a **continuous integration and continuous delivery** (**CI/CD**) infrastructure,
    it is common for organizations to establish linkages between their primary **Version
    Control System** (**VCS**), **Software Configuration Management** (**SCM**), and
    CI servers with external tools and services provided by third-party vendors. In
    the absence of adequate governance measures to ensure the security of access to
    these tools, unauthorized intrusion into a third-party tool has the potential
    to enable an attacker to gain elevated access to the broader technology stack
    and source code.
  prefs: []
  type: TYPE_NORMAL
- en: The creation of policies, oversight, risk management, and monitoring of the
    system are all essential to the effective governance of third-party services.
    All of these factors work together to guarantee that the utilization of external
    tools and services complies with your organization’s security standards.
  prefs: []
  type: TYPE_NORMAL
- en: The implementation of governance controls related to the consumption of third-party
    services is crucial to improving security posture. One possible approach to achieve
    this is by implementing signature and checksum checks.
  prefs: []
  type: TYPE_NORMAL
- en: Improper Artifact Integrity Validation (CICD-SEC-9)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Due to insufficient means for verifying the integrity of code and artifacts,
    a malicious actor gaining access to one of the systems involved in the CI and
    continuous delivery process might potentially pass seemingly innocent code or
    artifacts down the pipeline, causing damage.
  prefs: []
  type: TYPE_NORMAL
- en: The CI/CD framework’s dependence on a wide variety of sources and collaborators
    can open up numerous avenues through which malicious actors can compromise your
    system by manipulating your code, automating your workflows, or installing malicious
    third-party packages. Any time malware enters the CI/CD pipeline without being
    caught, it increases the risk that it will be released to end users.
  prefs: []
  type: TYPE_NORMAL
- en: An adversary that has a foothold within the software delivery process may use
    insufficient artifact integrity validation in order to send a malicious artifact
    via the pipeline. Systems involved in the CI/CD process, or, more seriously, those
    in production, can be compromised and malicious code executed as a consequence
    of this.
  prefs: []
  type: TYPE_NORMAL
- en: To decrease risk, it is advisable to do resource integrity checks, such as utilizing
    code and artifact review tools.
  prefs: []
  type: TYPE_NORMAL
- en: Insufficient Logging and Visibility (CICD-SEC-10)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In today’s ever-evolving landscape, adversaries are becoming increasingly cunning
    in their pursuit of achieving their objectives. For organizations that fail to
    prioritize the implementation of robust logging and visibility controls within
    these environments, the consequences can be dire. Without the necessary measures
    in place, the detection of a breach becomes a daunting challenge. The absence
    of comprehensive logging and visibility controls leaves organizations vulnerable
    and unable to identify and respond to security incidents in a timely manner. As
    a result, the path to mitigation and remediation becomes riddled with obstacles
    and hindered by limited investigative capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: To safeguard against these potential pitfalls, organizations must take proactive
    steps to fortify their engineering environments. By implementing the appropriate
    logging and visibility controls, they can enhance their ability to detect breaches
    swiftly and effectively. This proactive approach empowers organizations to respond
    promptly, minimizing the impact of security incidents and ensuring a smoother
    path to mitigation and remediation. In this high-stakes digital marketplace, it
    is crucial for organizations to stay one step ahead.
  prefs: []
  type: TYPE_NORMAL
- en: The establishment of robust monitoring and visibility capabilities within businesses
    is of utmost significance, as it enables the utilization of logging mechanisms
    to identify potential threats and conduct thorough investigations into security
    occurrences. It is advisable to implement alarm systems for the purpose of identifying
    anomalies and potentially harmful behavior across multiple systems within the
    operational framework.
  prefs: []
  type: TYPE_NORMAL
- en: Value stream mapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Value stream mapping is a tool for lean management that involves tracing the
    steps taken to create a product or service, from its inception all the way to
    its final destination, the customer. With the help of a value stream map, you
    can see exactly how much time and effort goes into each stage of a process and
    how important each step is. Resources and data are both shown in value stream
    maps, which track their movement through a process.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a current state map as a team is a common first step in value stream
    mapping. This refers to the process of accurately documenting the current state
    of both the physical movement of materials and the flow of information inside
    a value stream. The next step is for the team to develop a map of the future state.
    In other words, the target picture represents the ideal flow of material and information
    via the value stream.
  prefs: []
  type: TYPE_NORMAL
- en: Repeating this action consistently is the most straightforward and optimal method
    to instruct yourself and your colleagues on how to recognize and appreciate value.
    Value stream mapping is mostly used in the context of lean manufacturing. Nevertheless,
    managers across many industries may get significant benefits from it.
  prefs: []
  type: TYPE_NORMAL
- en: Value stream management
  prefs: []
  type: TYPE_NORMAL
- en: Value stream management is a managerial approach that prioritizes enhancing
    the flow and productivity of delivering company value, starting from customer
    requests and ending with customer fulfillment. The meticulous strategy applied
    by this approach enables businesses to effectively measure and enhance the rate
    of improvement, hence reducing the time required to bring products to market,
    increasing overall output, enhancing product quality, and optimizing for desired
    customer satisfaction.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21803_App_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The main goal of value stream mapping is to pinpoint and minimize any unnecessary
    steps or inefficiencies in value streams, ultimately enhancing the overall efficiency
    of a specific value stream. Efficient waste removal is crucial for enhancing productivity
    and streamlining operations, leading to improved identification of waste and quality
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: Waste
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The term *lean* refers to being lightweight or lacking excess fat. Operations
    that are lean are characterized by the absence of waste. A variety of waste, or
    muda, that lean operations may produce is known by the acronym **TIM WOODS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Transport**: The act of moving people, goods, and information from one place
    to another'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inventory**: The act of storing artifacts, data, and components in advance
    of their anticipated need'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Motion**: Engaging in physical movements such as stretching, rotating, pulling,
    and pushing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Waiting**: For parts, components, data, guidance, or hardware'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Overproduction**: The act of producing in excess of what is urgently necessary'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Overprocessing**: Refers to the use of greater precision or materials of
    greater quality than what is truly required'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Defects**: Revising garbage or erroneous documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Skills**: Not fully using talents; assigning responsibilities without proper
    education'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The lean operations framework centers on the principles of value, flow, pull,
    and perfection in order to minimize various forms of waste.
  prefs: []
  type: TYPE_NORMAL
- en: Value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The customer is always the one who determines the worth or importance of anything
    that you do with your business. To be successful, a company has to have a solid
    understanding of what the customer considers to be valuable. Investing your resources
    in developing products and services that customers don’t see as worthwhile constitutes
    a wasteful commitment of financial resources and man hours. If you want to know
    what your customers value, you need to get to know them and ask for their input
    at every available opportunity.
  prefs: []
  type: TYPE_NORMAL
- en: 'A value stream map is the term used in the lean methodology when referring
    to a process flow diagram. The purpose of building a value stream map is to classify
    every action of a process under distinct groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Value added**: Engaging in actions that provide value from the customer’s
    perspective'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Non-value added**: Processes that fail to provide value in the view of customers
    and must be promptly discarded'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Essential non-value added**: Not-yet-eliminated operations that have no use
    but are mandated by legislation or by the firm'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to determining how much time is dedicated to creating value, value
    stream mapping also shows how much time is wasted storing or transporting the
    product. There must be minimal time devoted to storing or transporting anything.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous flow and continuous improvement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Continuous flow refers to a production system where a product moves continually
    without any waiting time, removing the need for logistics and storage. The elimination
    of batches and queues is essential, the reason for this is that batching results
    in idleness and can be considered wasteful. Queues indicate that a product has
    been finished in a previous processing stage before the subsequent stage is prepared
    to receive more input. Given that the ultimate stage of the manufacturing process
    involves delivering the product to consumers, it is crucial to manufacture your
    products at a pace that aligns with customer demand. You can use this same strategy
    to build services as well.
  prefs: []
  type: TYPE_NORMAL
- en: Apple’s case study of continuous flow and improvement
  prefs: []
  type: TYPE_NORMAL
- en: When creating new products, Apple prioritizes the needs of its customers. A
    thorough comprehension of customer desires, habits, and preferences is the company’s
    primary goal. In order to develop products that really connect with consumers,
    Apple does thorough user research to get inputs that shape the company’s design
    direction.
  prefs: []
  type: TYPE_NORMAL
- en: They use an iterative design process to make their goods better over time. In
    order to test and analyze ideas, interactions, and user interfaces, the design
    team builds many mockups, prototypes, and iterations. By iteratively incorporating
    user input and usability testing into the design process, Apple is able to achieve
    a never-ending cycle of improvement.
  prefs: []
  type: TYPE_NORMAL
- en: When designing its products, Apple takes great pains to ensure that every little
    detail is perfect. Apple strives for visually beautiful and high-quality products
    in every aspect, from material selection to finish and component fit. With a market
    worth of $2.54 trillion, Apple has become the greatest firm in the world by sticking
    to these ideas and phases.
  prefs: []
  type: TYPE_NORMAL
- en: Locating instances where **Work in Progress** (**WIP**) accumulates and forms
    queues is one way to spot bottlenecks. Decreasing the amount of time it costs
    to process a single product or introducing extra computing capacity might enhance
    the processing rate while overcoming a bottleneck. Although WIP preceding a bottleneck
    will dissipate when its velocity is increased, a new bottleneck could possibly
    develop at any time.
  prefs: []
  type: TYPE_NORMAL
- en: Lean manufacturing involves pulling products rather than pushing them through
    the system; in other words, nothing is made unless the customer requests it. While
    it’s necessary to have some inventory in reserve to satisfy current demand, you
    can decrease lead times and increase product variation by implementing innovations
    such as continuous delivery.
  prefs: []
  type: TYPE_NORMAL
- en: Lean systems strive for excellence by consistently pursuing continuous improvement.
    Rather than measuring your success against your competition, strive for excellence
    by recognizing and eradicating any unnecessary and wasteful activity within your
    company.
  prefs: []
  type: TYPE_NORMAL
- en: Release management templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following section describes several documents that will aid you with day-to-day
    release management tasks, including a software release checklist, business specification
    Document, SRS, requirement traceability matrix document, and use case document.
  prefs: []
  type: TYPE_NORMAL
- en: Software release checklist
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A software release checklist is a comprehensive document outlining the actions
    and processes that a software development team must adhere to throughout the software
    release process. This encompasses all aspects ranging from the conception and
    creation of the product to rigorous quality assurance measures and final delivery.
    The checklist serves as a precautionary measure to prevent inadequate quality
    control and guarantees that all desired features requested by the customer are
    prepared for delivery. Checklists typically consist of a few pages in length and
    are used by businesses for both software improvements and the creation of new
    software applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'To aid you with creating your own software release checklist, please consult
    the template at this location: [https://www.smartsheet.com/sites/default/files/IC-Release-Management-Checklist-9281_PDF.pdf](https://www.smartsheet.com/sites/default/files/IC-Release-Management-Checklist-9281_PDF.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Business specification document
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A business specification document, also known as a business requirements document,
    is a meticulously organized and formalized statement concerning a forthcoming
    project. The purpose of such a document is to articulate the justification for
    a company’s desire to create new applications or functional solutions. Business
    specification documents describe the challenges that the organization is facing
    and how the respective project will aim to resolve them. This usually includes
    an analysis of the financial impact that the project will have, including potential
    advantages and disadvantages if the software is not developed at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'To aid you with creating your own business specification document, please consult
    the template at this location: [https://assets.asana.biz/m/2dcf4dfc471895ad/original/Business-Requirements-Document-Template-PDF.pdf](https://assets.asana.biz/m/2dcf4dfc471895ad/original/Business-Requirements-Document-Template-PDF.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Software Requirements Specification (SRS)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An SRS is a comprehensive outline for a software project pending development.
    The software product’s intended use is defined by the requirements specifications,
    which lays the groundwork for a contract between customers and businesses. The
    purpose of an SRS is to minimize rework in the future by conducting a thorough
    evaluation of requirements prior to the more detailed design and development phases.
    It may also function as an appropriate framework for time, risk, and price estimates
    for the product.
  prefs: []
  type: TYPE_NORMAL
- en: 'To aid you with creating your own SRS document, please consult the template
    at the following location: [https://assets.asana.biz/m/6ac2683dd6006280/original/software-requirement-document-template.pdf](https://assets.asana.biz/m/6ac2683dd6006280/original/software-requirement-document-template.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Requirement traceability matrix document
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The requirements traceability matrix is a formal document often used in release
    management and software development. Its purpose is to guarantee that each project
    requirement has been adequately addressed and accounted for. As an outline, it
    ties each of the requirements in a project to architectural elements, test scenarios,
    and additional deliverables that are associated with those requirements. It may
    also function as an appropriate framework for determining time, risk, and price
    estimates for the product.
  prefs: []
  type: TYPE_NORMAL
- en: 'To aid you with creating your own requirement traceability matrix document,
    please consult the template here: [https://www.projectmanager.com/wp-content/uploads/2022/08/Free_Requirements_Traceability_Matrix_Template_ProjectManager_WLNK.xlsx](https://www.projectmanager.com/wp-content/uploads/2022/08/Free_Requirements_Traceability_Matrix_Template_ProjectManager_WLNK.xlsx).'
  prefs: []
  type: TYPE_NORMAL
- en: Use case document
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use cases are written specifications of how users engage with systems. Every
    use case outlines the sequential actions necessary to achieve a specific outcome,
    emphasizing what is required for developing the application, system, or process.
    Notably, a use case includes a clearly defined starting point and endpoint, and
    the actor is intended to gain objective value following its completion.
  prefs: []
  type: TYPE_NORMAL
- en: 'To aid you with creating your own use case document, please consult the template
    here: [https://static.dexform.com/media/docs/6584/use-case-template-2_3dac.pdf](https://static.dexform.com/media/docs/6584/use-case-template-2_3dac.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Answers to chapter questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section contains answers to the questions found at the end of each chapter
    in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Q1: The SDLC refers to the systematic approach that development teams use to
    produce high-quality software, with optimal cost efficiency.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q2: Planning, analysis, design, build, testing, implementation, and maintenance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q3: The software development life cycle is limited to the creation and testing
    of software components. In contrast, systems development incorporates the setup
    and management of the hardware, software, people, and processes required for a
    complete system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q4: The primary goal of the SDLC is to mitigate risk and keep the development
    effort well structured. In contrast, the primary objective of release management
    is to ensure that the development team is well organized and successfully fulfills
    the business objectives.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q5: The software development life cycle primarily emphasizes the development
    phase of an application, whereas ALM adopts a more holistic approach, encompassing
    the entirety of the program’s life cycle.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q6: The SDLC encompasses several distinct stages, including planning, design,
    coding, testing, and deployment. In contrast, the PDLC incorporates supplementary
    phases, such as market research, product planning, and product marketing.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q7: Release management guarantees the timely delivery of software releases,
    while adhering to budgetary constraints and minimizing any potential disruptions.
    Change management allows changes to be accepted, documented, and communicated
    to the appropriate parties to promote a positive impact on the business and its
    goals, requirements, and standards.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q8: Release management is the process of overseeing the creation and distribution
    of software releases, including its planning, scheduling, testing, and deployment.
    The goal of project management is to ensure the success of a specific project
    within the parameters of a scope, such as the planning time limits, schedules,
    finances, and communication.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q9: Blue/green deployments produce two identical environments. After testing
    passes in the green environment, live application traffic is directed there, and
    the blue environment is deprecated. A canary deployment refers to a gradual and
    controlled release strategy for an application, wherein traffic is divided between
    an existing version and a new version.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q10: Planning, analysis, design, build, testing, implementation, and maintenance.'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Q1: The systems development life cycle.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q2: The primary objective of the systems development life cycle is to systematically
    and meticulously pursue the development of information systems. The software development
    life cycle aspires to detail the inputs, outputs, and steps involved in creating
    and maintaining software systems.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q3: In 1953, Paul Niquette.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q4: Herbert D. Benington, in 1956.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q5: Thomas E. Bell and T.A. Thayer, in 1976.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q6: Request, plan, design and build, testing, deployment, post-deployment.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q7: Patrick Debois, in 2007.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q8: Ghent, Belgium, in October 2009.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q9: 1960.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q10: 1960.'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Q1: At its core, ITIL is a framework for managing an organization’s IT infrastructure
    in order to achieve strategic goals, generate business value, and ensure a baseline
    of competence.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q2: Waterfall.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q3: The initialization phase, the iteration step, and the project control list.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q4: Time and development in the V-model progress from left to right, and there
    is no way to rewind the process.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q5: By continuously monitoring risks and inspecting the intermediate product,
    the spiral model significantly reduces the likelihood of failure in large software
    projects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q6: Time, resources, effort.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q7: Fail often and early.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q8: The DevOps release management strategy combines communication, automation,
    and analysis.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q9: Never!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q10: Every phase.'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Q1: Continuous release refers to the collection of automated and manual processes
    used to guarantee that customers have access to a stable and safe build of a company’s
    software product. At its core, **Continuous Deployment** (**CD**) is a unified
    release process that incorporates automated build, test, and deployment steps
    with the objective of streamlining the operations involved with pushing new software
    into production.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q2: After implementing audit trails, anyone who is interested can find out
    how much time was spent for a recent modification to go live, why it was necessary,
    who gave their approval for it, and whether or not all of the checkmarks in the
    preceding phases were marked off.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q3: Automated testing is appropriate at any time.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q4: Don’t utilize the change approval process as roadblocks to slow down innovation,
    but rather as part of a process to speed up the delivery of new features to your
    customers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q5: The duties and responsibilities of a release pipeline are to ensure that
    product enhancements are quickly and safely delivered to end users, beginning
    with changes to source code that are driven through development, testing, and
    release.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q6: The tools and procedures used to move applications from development, to
    QA, and onto production can also be applied to failing over and recovering from
    disasters or service interruptions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q7: Service management tools enable seamless integration between CD pipelines
    and change management systems by utilizing APIs to automatically generate change
    tickets and notify the relevant parties involved.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q8: Lead time for changes, change failure rate, deployment frequency, mean
    time to recovery.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q9: Record your CI/CD pipeline results in a release log and aggregate them
    into your release management issue tracking products, source control management,
    and related tooling.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q10: Lead time for changes.'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Q1: Flow/systems thinking, amplify feedback loops, and a culture of continual
    experimentation and learning.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q2: Taking a shift-left approach entails beginning the testing phase of the
    process as early as possible in the cycle, rather than delaying it until the very
    end.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q3: Rapid feedback loops enable you to more quickly construct secure, feature-rich
    systems that customers love. Without timely feedback, a gap is created between
    cause and effect, causing errors to go unnoticed until the resources required
    to correct them have increased.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q4: Organizations that eliminate silos improve the transparency of their end-to-end
    operations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q5: DevSecOps-centric tooling expands on existing DevOps methods such as CI/CD,
    automated testing practices, system monitoring, and streamlined configuration
    management, by seamlessly incorporating security-focused tools and techniques.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q6: The concept of DevOps can be understood as a cultural paradigm rather than
    the mere existence of isolated individuals or teams engaged in tool development
    or collaboration within their respective domains.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q7: Promote self-service with the use of tight integrations of data systems,
    CI/CD-based kiosks, and support from operations specialists to automate routine
    business processes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q8: DevOps teams operate in shorter, more regular cycles. Because less effort
    will have been needed since the last development cycle, the risks of a release
    are significantly reduced.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q9: The primary objective of DevOps is to enhance customer satisfaction and
    expedite delivery.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q10: Businesses need effortless integration and execution across diverse tools,
    including in-house, proprietary tools to provide a comprehensive solution, beginning
    with client inception to receiving product feedback.'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Q1: Yes, such as generating reports for the business unit, turning off unused
    infrastructure during off-peak hours and starting them again before the next workday,
    refreshing development databases with data from production, and performing automated
    penetration tests.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q2: Teams need a unified set of technologies to use in order to work collaboratively
    and efficiently on projects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q3: This makes the task of identifying and resolving bugs and defects in your
    code significantly more efficient, reducing the time required from many hours
    to just a few minutes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q4: As fresh code changes are submitted, a continuous integration server oversees
    everything and acts as the arbitrator. Each time a developer commits their work
    in the repository, the CI server will automatically run a suite of tests and record
    the outcomes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q5: With continuous delivery, there is a manual approval step that is enforced
    before new code changes are permitted to be deployed into production environments.
    With continuous deployment, automated testing fulfills this role so that no manual
    human intervention is necessary.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q6: Commit, test, build, stage, deploy.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q7: GitOps is a specialized domain within the broader field of DevOps, which
    centers around the use of Git repositories for the purpose of effectively managing
    infrastructure state and application deployments.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q8: Using carefully curated automated testing strategies, continuous testing
    ensures that software development teams get real-time feedback, allowing them
    to rapidly eliminate as many potential risks and flaws as soon as possible, spanning
    the entire software development life cycle.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q9: Developers even benefit from automated testing plugins that install directly
    into a developer’s local **Integrated Development Environment** (**IDE**), such
    as Eclipse, Microsoft Visual Studio, and PyCharm.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q10: By exposing the latest version of an application to a small percentage
    of consumers in the production environment, you are extending the testing phase
    all the way to the end of the software delivery life cycle.'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Q1: A workflow is a CI/CD pipeline format used in GitHub Actions to automate
    workflows, including testing, building, and deploying applications.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q2: ClickOps is the term used to describe the process of manually provisioning
    cloud resources using the provider’s native web console. As the name suggests,
    this process involves inputting all the necessary information using a keyboard
    and mouse.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q3: An AWS access key is associated with an AWS IAM user, along with the IAM
    permissions needed to programmatically provision resources in an AWS account.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q4: AWS IAM users must be granted the necessary roles that permit them the
    ability to provision resources in AWS.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q5: A fork is a copy of a GitHub repository that shares code and visibility
    settings with the original repository.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q6: A security group regulates the flow of ingress and egress network traffic
    between the resources it is linked with.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q7: An Amazon ECS cluster is a cohesive collection of tasks or services that
    are specifically built to oversee and execute Docker containers. These containers
    function on a set of managed EC2 instances.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q8: Container image repositories serve as a central repository for all associated
    files, facilitating simpler management and distribution of Docker containers and
    allowing for more stringent version control.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q9: An environment variable is an object in memory that is assigned a value
    externally from an application, usually via the operating system or a microservice,
    and consists of a paired name and value.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q10: A README file provides details and usage instructions on the contents
    of a directory or repository of computer software.'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Q1: Insufficient Flow Control Mechanisms, Inadequate Identity and Access Management,
    Dependency Chain Abuse, Poisoned Pipeline Execution, Insufficient Pipeline-Based
    Access Controls, Insufficient Credential, Insecure System Configuration, Ungoverned
    Usage of 3rd Party Services, Improper Artifact Integrity Validation, Insufficient
    Logging and Visibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q2: The central pattern library governance model, the CI/CD-as-a-service governance
    model, the centrally managed infrastructure governance model.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q3: Value stream mapping creates a visual representation of your CI/CD processes
    and systems, offering a comprehensive understanding of your complete CI/CD pipeline.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q4: Gitflow, GitHub flow, trunk-based development, GitLab Flow'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q5: Scaled trunk development can be partitioned into short-lived feature and
    bug-fix branches.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q6: GitLab Flow'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q7: Deployment is a transition of software from one controlled environment
    to another. On the other hand, releases are a curated collection of software changes
    that are intended for end users to experience.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q8: An artifact store ensures that artifacts are indivisible and separate from
    any other release, devoid of any form of intermingling or collateral interference.
    A configuration store is a repository that houses various values that provide
    consistency across a variety of build/release configurations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q9: These cumbersome methods increase the production system’s exposure to risk
    and hence increase the failure rates of changes because they slow down the delivery
    process and cause the developers to release larger batches of work less frequently.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q10: This helps your team study the entire change process, looking for bottlenecks,
    and identifying potential solutions.'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Q1: Scope, time, and cost.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q2: When you relax the standard of quality, not only will it harm the product’s
    image and overall reliability but doing so will also come back to haunt you in
    the form of additional costs down the line, particularly during the maintenance
    phase.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q3: This approach aims to enhance productivity and efficiency by leveraging
    the strengths and expertise of both individuals. By working in tandem, programmers
    can achieve the same benefits as traditional solo programming in a reduced time
    frame.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q4: Elite performing teams first overcome the people challenges behind a DevOps
    transformation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q5: Time.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q6: Culture, automation, lean, measurement, sharing.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q7: Scrum and Kanban.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q8: Efficiency and waste reduction.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q9: Individuals across all levels of the organizational hierarchy, including
    developers, systems administrators, security specialists, and executives alike.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q10: It is due to the distinct market requirements, industry considerations,
    resource constraints, and varying levels of willingness to embrace change exhibited
    by different businesses and constituents.'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Q1: The unwavering backing and active involvement of the leadership within
    the organization.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q2: Theoretical knowledge.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q3: Empowerment, ethics, trust, and patience.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q4: Autonomy, ownership, and shared responsibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q5: Soft skills.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q6: Every step of an application’s life cycle, from planning and design to
    testing and deployment.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q7: Steer the team clear of engaging in blame-oriented politics and instead
    focus on collaborative efforts aimed at effective problem-solving and enhancing
    processes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q8: Feedback loops are an introspective evaluation of the functioning of teams,
    systems, and users, measured by both qualitative and quantitative analysis.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q9: Feedback from consumers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q10: The process of carefully enhancing the current workflow to better meet
    the needs of its end users.'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Q1: A change management strategy is a deliberate approach that empowers leaders
    to effectively navigate a company through change while reducing disturbance and
    the potential for unforeseen outcomes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q2: A comprehensive analysis of the rationale behind the change, anticipated
    results and effects, necessary time and resources, and any additional factors
    that necessitate evaluation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q3: A written record that monitors the individuals who initiated a particular
    modification, the date and time of the request, the current state of the change
    request, its level of importance, and details regarding its resolution.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q4: Taking a methodical approach with your software release checklist lays
    the groundwork for a software release that is error-free, efficient, and seamless.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q5: Good leadership.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q6: DevOps, at its core, revolves around the elimination of obstacles and the
    optimization of the process for delivering value to customers. In the arena of
    problem-solving, the significance lies not in the individual tools employed but
    rather in the identification and alleviation of pain points.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q7: Non-DevOps metrics, frivolous metrics, and contentious metrics.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q8: Map out microservices, Configure the infrastructure, Define and split the
    team, Define the tech stack for each microservice, Set up sprints, Development
    and testing, Deployment.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q9: No.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q10: You require the customer’s feedback in order to create products that they
    actually want in the first place.'
  prefs: []
  type: TYPE_NORMAL
- en: Glossary of terms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will find a glossary of terms used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[*Agent*](B21803_Appendix.xhtml#_idTextAnchor222): A program deployed on designated
    physical servers to manage the execution of diverse operations within the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agile**: Agile is a software development technique that focuses on flexibility,
    adaptability, and customer satisfaction through iterative and collaborative methods.
    DevOps uses Agile approaches, such as Scrum or Kanban, to create software in brief
    cycles, facilitating constant feedback, swift iterations, and early value delivery.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agile Manifesto**: The explicit declaration of values and principles that
    provide guidance for a software development process that is iterative and focused
    on the needs of the users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agile organization**: A dynamic company that can quickly and effectively
    respond and adapt to anticipated and unforeseen opportunities and challenges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agile project management**: Agile software design and development is an iterative
    and incremental approach where developers collaborate directly with users, utilizing
    the necessary knowledge to initiate planning and execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agile software development**: Agile is a software development approach and
    attitude that emphasizes user feedback, software quality, and the flexibility
    to adapt to changes and new product needs in a timely manner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AIOps**: This is the practice of enhancing and standardizing information
    technology operations through the application of AI and ML algorithms. This includes
    activities such as capacity planning, incident management, and monitoring.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS**: This is a subsidiary of Amazon Inc that provides adaptable and expandable
    cloud computing services and **Application Programming Interfaces** (**APIs**)
    to individuals, enterprises, and governmental organizations. These services operate
    on a pricing system that is based on usage, meaning that customers just pay for
    the amount they actually use. Customers commonly use this in combination with
    autoscaling, a process that allows the customer to distribute supplemental computing
    power during periods of elevated application requests, and subsequently reduce
    resource allocation to minimize costs during cycles of minimal usage. These cloud-based
    services provided by AWS incorporate a variety of capabilities, such as networking,
    computing, storage, middleware, and IoT.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Anomaly detection**: Anomaly identification, also known as outlier analysis,
    is a data mining technique used to find data points that are outside or depart
    from the normal range, established baseline, or predicted trend within a dataset.
    The identification procedure is crucial as abnormalities such as this typically
    serve as indicators of atypical activity, such as potential fraudulent activities,
    security breaches, or cybersecurity attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ansible**: This is an automation engine designed for a range of IT operations,
    such as provisioning and configuring cloud infrastructure. Ansible is a freely
    available program that communicates with several software modules over SSH connection,
    PowerShell scripts, or different APIs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Antifragile**: The concept of “antifragility” was introduced by professor
    Nassim Nicholas Taleb to describe a trait of systems that enables them to improve
    their capability or performance in response to stress, mistakes, flaws, or failures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**API response time**: This is essential for the optimal performance of a piece
    of software, as it directly affects customer experience. Significant delays in
    response to an API call can lead to customer discontent, potentially leading to
    the complete abandonment of the website or app. The effectiveness and scalability
    of an application are directly related to the response time of the API. If the
    API encounters significant response latency, it might become incapable of processing
    hundreds of requests within a confined period of time. This can significantly
    influence the efficiency and scalability of the consumer’s applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**API versioning**: API versioning is an essential process in software development
    that involves the management of modifications and enhancements to an **Application
    Programming Interface** (**API**) over time, while still ensuring compatibility
    with previous versions. Developers can deliver new features, enhancements, or
    adjustments to an API without causing any disruptions to current clients or applications
    that depend on the API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App security**: Application security encompasses the various activities aimed
    at implementing a secure software development life cycle inside development teams.
    The ultimate objective is to enhance security protocols and, hence, identify,
    rectify, and ideally preempt security vulnerabilities within applications. It
    covers the entire life cycle of the application, including requirements analysis,
    design, implementation, verification, and maintenance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application hardening**: Application hardening is the process of enhancing
    the security of an application by minimizing vulnerabilities and restricting unnecessary
    access. The objective is to enhance the security of the application in order to
    protect it from attacks such as injection exploits, DDoS attacks, buffer overflows,
    and other vulnerabilities. Hardening strategies enhance security by implementing
    many layers of protection around applications and data streams, creating a “defense-in-depth”
    approach. This safeguards essential operational principles and confidential data.
    Completely fortified apps solely grant functional access to individuals and systems
    that have a legitimate need for it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application infrastructure**: The application infrastructure encompasses
    all the necessary operational and computational resources, including servers,
    storage arrays, and operating systems, that are essential for the efficient design,
    construction, administration, and delivery of an application and its services
    to end users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application migration**: The process of migrating a software application
    from one computing environment to another is referred to as application migration.
    Among the many possible scenarios is moving an application’s infrastructure from
    one data center to another, or even from a server located on-premises to one hosted
    by a cloud provider.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application performance monitoring**: Application performance monitoring,
    often known as APM, is a process that is ongoing and monitors the availability
    of applications that are considered to be highly essential. Effectively monitoring
    performance metrics and trends allows for the early detection and resolution of
    performance issues, ensuring an optimal user experience. APM aims to identify
    and resolve intricate application performance issues in order to uphold a desired
    level of service. It is regarded as the conversion of IT metrics into the assessment
    of business value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application Programming Interface (API)**: This is a defined set of protocols
    and rules that enable seamless communication and interaction between different
    software applications. It functions as a mediator that enables the exchange of
    information between systems, permitting businesses to exchange their application
    data and features with external developers, suppliers, and internal departments.
    The definitions and protocols within an API facilitate the seamless integration
    of various applications, enhancing efficiency and fostering collaboration and
    innovation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application Release Automation (ARA)**: ARA is a streamlined process that
    automates the packaging and deployment of applications, including updates, from
    development to production. This is accomplished by the utilization of software
    capabilities such as automated application rollouts, release automation, resources
    for infrastructure management, and application analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Artifact**: This refers to any material byproducts of software development.
    Software architecture, design, and functionality are defined by artifacts such
    as requirements documents, class diagrams, use cases, and other unified modeling
    language models. Documents such as project plans, business cases, software binaries,
    and risk assessments are also part of the development process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auto Scaling Group (ASG)**: An Auto Scaling group is an AWS feature that
    allows for the consolidation of many EC2 instances into logical groups, simplifying
    infrastructure design and management. The group consists of similar instances
    that can be added or deleted as needed to accommodate workload demands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automated deployment**: Deployment automation employs software tools and
    methods to autonomously transfer code modifications across testing, staging, and
    production environments. Automated deployments are initiated by events such as
    a code commit or merge request approval. Configuration management systems streamline
    the tasks of finding, recording, and monitoring alterations in the infrastructure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automation**: This refers to systems that can carry out an activity or procedure
    with little to no oversight from a human operator. Automating repetitive tasks
    allows DevOps activities such as creating workflows, integrating technologies
    used by various stakeholders, and generating immediate feedback. This involves
    integrating technology in order to bring together tools from different domains
    and break down the silos that exist between them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Autonomy**: The capacity to make adjustments using the resources that are
    immediately accessible, without the requirement of deferring to something or someone
    that is higher up in the managerial hierarchy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Autoscaling**: Autoscaling is a cloud computing technique that changes the
    amount of computing power in a server farm based on how busy the farm is. This
    is usually shown by the number of active servers. For instance, the number of
    servers that run behind a web app might change instantly based on how many people
    are using the site at the same time. Because these metrics can change a lot throughout
    the day and servers cost money to run even when they’re not being used, there
    is often a reason to run “just enough” servers to handle the current load while
    also being ready for sudden, large spikes in activity. When this happens, autoscaling
    can help because it can lower the number of active servers when activity is low
    and add new servers when activity is high.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS CLI**: This is a tool that enables you to interact with Amazon Web Services
    by issuing commands in your terminal or shell. The AWS CLI enables the execution
    of instructions that provide the same functionality as the browser-based AWS Management
    Console, directly from a terminal application, with minimal configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Backend**: The backend of an application refers to the software’s fundamental
    architecture that cannot be directly accessed by the actual user. The backend
    is responsible for processing data that it receives from the frontend and performs
    specific tasks, such as performing calculations with an algorithm or retrieving
    and saving data in a database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Backup**: This is the process of replicating essential data to generate a
    duplicate copy that can be utilized for the purpose of restoring data in case
    of loss or damage. The outcome of this backup procedure is an archive containing
    the files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Behavior-Driven Development (BDD)**: **Behavior-Driven Development** (**BDD**)
    is an iterative software development approach that emphasizes collaboration between
    developers and business stakeholders. It involves defining user stories, which
    serve as the basis for developing the application. BDD utilizes a human-readable
    **Domain-Specific Language** (**DSL**) to facilitate communication and understanding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Big Bang**: The Big Bang approach lacks the process-oriented characteristics
    of other release management models; no advance preparation is needed. Software
    development is the primary focus of this strategy, which allows programmers to
    bypass the planning phase and move directly into code production.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Black-box testing**: Black-box testing is a software testing method that
    assesses the functioning of an application without inspecting its internal structures
    or operations. This testing method is applicable to all levels of software testing,
    including unit, integration, system, and acceptance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blue-green deployment**: A deployment strategy involving the coexistence
    of two identical environments: one that is production-ready and another that is
    new. The traffic is seamlessly transitioned from blue to green, enabling effortless
    rollback in case of any complications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bottleneck**: Anything that restricts the overall capacity of a process or
    system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Branching**: Creating copies of a file in source control to allow multiple
    developers to modify the same code simultaneously.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bucket**: A bucket is a fundamental component of Amazon **Simple Storage
    Service** (**S3**), designed for the purpose of storing diverse objects, mostly
    consisting of different forms of data and the accompanying metadata that provides
    a description of the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build**: A build can mean either the final product of the software development
    process or the steps used to transform source code into an executable computer
    program. Typically, builds are generated at specific milestones in the development
    process or when the code is considered complete and available for execution, whether
    for testing purposes or official release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build agent**: A build agent is a software component that receives commands
    from the CI server and initiates the execution of the actual build operations.
    An agent can be installed either on the same computer as the server or on a separate
    computer system. The latter option is favored in order to optimize server performance.
    An agent has the capability to operate on either the same **Operating System**
    (**OS**) as the CI server or on a different OS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build artifact repository**: A centralized repository for all binaries utilized
    throughout the build process. An artifact repository facilitates the management
    of dependencies and build processes, enhances security and consistency among teams,
    and enables the feasibility and scalability of implementing automated deployments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build automation**: Build automation refers to the process of automating
    the construction of a software build, which involves tasks such as compiling computer
    source code into binary code, packaging the binary code, and conducting automated
    testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Business Analytics (BA)**: Business analytics encompasses the expertise,
    technology, and methodologies used to systematically analyze and examine previous
    business performance in order to obtain valuable understanding and inform future
    business strategies. Business analytics is a discipline that aims to generate
    fresh insights and enhance comprehension of business performance via the utilization
    of data and statistical techniques.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Business Intelligence (BI)**: Business intelligence refers to the methods
    and technologies employed by companies to analyze and manage business data. Business
    intelligence technologies encompass a range of essential functions, such as reporting,
    online analytical processing, predictive analytics, data mining, complex event
    processing, dashboard development, business performance management, and other
    similar activities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Cache**: Cache refers to a storage area that is utilized to temporarily store
    data. This data is then accessed by servers, applications, and web browsers in
    order to enhance the speed at which content is loaded. Almost all machines, whether
    they are software or hardware, will typically have and utilize some form of cache,
    which can be found in various locations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cadence**: In Agile project management, cadence refers to the duration of
    a sprint, iteration, or release, measured in days or weeks. A cadence refers to
    a consistent sequence of events and activities that take place at regular intervals
    and can be anticipated with certainty. Cadence in DevOps release management establishes
    a structured framework for a team, ensuring clarity and comprehension regarding
    their tasks and deadlines within a value stream.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CALMS model**: The core principles of DevOps are culture, automation, lean
    practices, measurement, and sharing. The framework serves as a tool to evaluate
    an organization’s preparedness for implementing a DevOps methodology.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Canary deployment**: Canary deployment is a deployment technique that involves
    a gradual release of a new version of an application to a group of users or servers.
    This approach allows for the testing of the new version’s performance and reliability
    before a complete rollout is implemented.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Capacity test**: A stress test is employed to ascertain the upper limit of
    users that a computer, server, or program can sustain before experiencing failure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Certificate Authority (CA)**: A certificate authority is a reputable institution
    responsible for issuing and invalidating digital certificates, as well as verifying
    the authenticity of websites and other online entities. The process involves issuing
    digital certificates to online businesses, which contain digital credentials and
    cryptographic keys for encrypting and safeguarding data during transmission. These
    digital certificates serve to verify domain ownership, authenticate identities,
    and foster confidence among entities when they interact online. Consequently,
    they enhance the security of the internet and assume a pivotal function in the
    realm of digital security.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chaos engineering**: This involves deliberately injecting flaws and disruptions
    into a system to evaluate its resilience and identify any weaknesses. This aids
    in guaranteeing that systems are capable of managing unforeseen malfunctions during
    the production process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ChatOps**: This is the practice of using chat apps, chatbots, and interactive
    communication tools to make DevOps tasks more organized and effective.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clean room**: The term “clean room” refers to an engineered space that keeps
    the concentration of airborne particulates very low. It has active cleansing,
    good isolation, and good contamination control. These types of rooms are usually
    required for industrial production for all nanoscale processes, including semiconductor
    manufacturing, as well as for scientific research. Dust and other airborne organisms,
    such as vaporized particles, are to be kept away from a clean room in order to
    protect the materials being handled inside it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud computing**: This is a widely used IT strategy that incorporates virtual
    servers via the internet for the purpose of gathering, processing, and storing
    data, running applications, and managing resources. It is an alternative to utilizing
    dedicated servers or personal PCs for that specific objective.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CI/CD**: An abbreviation for continuous integration/continuous delivery,
    this forms the basis of the modern DevOps methodology. CI guarantees that the
    latest code is regularly added to the central code repository many times a day
    in order to successfully pass automated unit tests and generate new software builds.
    Assuming the tests are successful, CD guarantees that the new version of the software
    will be deployed to the staging and production environments without any interruption
    in service. The CI/CD workflow guarantees the early detection and resolution of
    any defects, ensuring that the product remains consistently available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cluster**: Clustering allows for load balancing, autoscaling, and high availability
    by treating a collection of networked instances (virtual machines, bare-metal
    servers, etc.) as one entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Commit**: Committing involves pushing the source code into a Git repository,
    resulting in the code being stored and version controlled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compliance level**: Within the context of reaching predefined performance
    and reliability targets, the term “compliance level” refers to the degree of conformance
    observed. The degree to which the system or service is in accordance with the
    standards, benchmarks, or objectives that have been defined is evaluated using
    this method. When conducting an assessment of compliance levels, it is necessary
    to compare the actual performance to the targets that have been set, which may
    include the availability, reaction time, or mistake rates. The efficacy and efficiency
    of an organization’s systems can be evaluated with its assistance, as well as
    the identification of areas that could be improved, and the guarantee that the
    intended levels of performance and dependability are persistently met.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration drift**: The process by which software and hardware settings
    become incompatible with the master version as a result of changes made manually
    or on an ad hoc basis, such as hotfixes that are not committed back to version
    control. Configuration drift is, in many cases, a significant contributor to the
    technical debt load of a development team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration management**: A method consisting of the process of defining
    and maintaining consistent settings for a system. Additionally, these solutions
    include SysAdmin tools for the automation of IT infrastructure, such as Ansible,
    Puppet, and other similar programs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Constraint**: In the context of a project, the constraints are the restrictions
    that the project is required to operate within. The time, money, quality, scope,
    resources, and risks that are associated with a project are the six primary limitations.
    Managing these constraints requires managers to strike a balance in order to guarantee
    the effective completion of a project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Constraints (Theory of)**: A theoretical framework for determining which
    constraints are most inhibiting progress toward a goal and then devising a plan
    to remove or significantly improve upon those constraints.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container**: A container is a self-contained software unit that includes
    application code, libraries, and dependencies. It is designed to be portable and
    can be executed on several platforms, such as desktop computers, traditional IT
    systems, or cloud environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Containerization**: Containerization in software engineering refers to the
    practice of implementing operating system-level virtualization or application-level
    virtualization across various network resources. This enables software applications
    to operate within isolated user spaces known as containers, irrespective of the
    environment being cloud-based or non-cloud-based, and independent of the specific
    type, service provider, or platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container orchestration**: Container orchestration involves automating various
    operational duties needed to operate and supervise containers in a system. This
    includes tasks such as container provisioning, deployment, scaling, management,
    load balancing, and networking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous delivery**: A software engineering strategy that emphasizes the
    use of CI, automated testing, and automated deployment to enable rapid, reliable,
    and repeatable software development and deployment with little or no human involvement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous deployment**: An efficient software development practice that
    ensures every code change is subjected to the entire pipeline and is seamlessly
    deployed into production, leading to frequent and automated production deployments.
    It performs all the functions of continuous delivery, but the entire process is
    completely automated, with no human involvement whatsoever.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous development**: Software development approaches that use continuous
    development and Agile share many similarities. Instead of making massive, all-at-once
    improvements to software, incremental ones are produced on a continuous basis,
    allowing for code to be released to users as soon as it is complete and tested.
    Software development, testing, and releasing updates to production environments
    can all be streamlined and automated using continuous development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous integration**: A method of developing software that involves rebuilding
    a branch of source code whenever code is committed to the source control repository.
    The process is commonly expanded to encompass the distribution, installation,
    and testing of applications in production environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous intelligence**: Continuous intelligence is a strategic approach
    that integrates real-time analytics into a company’s operations, analyzing both
    current and past data to recommend appropriate actions in response to occurrences.
    In order to facilitate decision-making and assistance, it utilizes several technologies,
    such as augmented analytics, event stream processing, business rule management,
    and machine learning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous quality**: A key concept that emphasizes the importance of maintaining
    high quality throughout the entire software development life cycle, from defining
    requirements to developing code, testing, and operations. Continuous quality also
    places significant emphasis on orchestrating the application code pipeline. When
    code is manually moved across environments, there is a multitude of chances of
    jeopardizing the quality of a product or software application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous security**: Continuous security refers to the act of incorporating
    security procedures into the software delivery pipeline in order to detect and
    resolve security weaknesses at every stage of the software development life cycle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous testing**: Automated tests are performed without human intervention
    in all environments of the software delivery pipeline to promptly assess the quality
    of a code build.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cron job**: The term refers to a regularly scheduled operation that will
    execute a specific script on a server at a specific time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CRUD**: In the realm of computer programming, the fundamental activities
    of persistent storage are commonly referred to as CRUD, which stands for create,
    read, update, and delete. The user’s text is a reference to a source or citation.
    CRUD is also occasionally employed to denote user interface principles that streamline
    the process of accessing, querying, and modifying data through computer-generated
    forms and reports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Culture**: Culture refers to the collective set of ideas, values, beliefs,
    practices, and behaviors that are commonly held and followed by the employees
    inside a company. It refers to a collective sense of accountability inside a DevOps
    setting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cybersecurity**: Cybersecurity encompasses the use of technology, measures,
    and practices to prevent cyberattacks or reduce their consequences. Cybersecurity
    strives to safeguard the systems, applications, computing devices, sensitive data,
    and financial assets of people and businesses against both basic and disruptive
    computer viruses, as well as intricate and expensive ransomware attacks, and any
    other forms of threats that fall within this spectrum.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Database**: A database is a meticulously arranged and methodically organized
    assemblage of data that is stored within a computer system. Databases commonly
    utilize interconnected tables to hold information, with each entry including pertinent
    data in designated fields. DBMS is responsible for managing the relationships
    between tables, as well as performing tasks such as adding and updating entries
    and displaying data in response to queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database management**: Database administration encompasses the activities
    involved in creating, executing, and sustaining a well-organized collection of
    digital data, commonly referred to as a database. The main objective of database
    administration is to effectively and securely store, arrange, retrieve, and alter
    data to facilitate diverse applications, processes, and decision-making on behalf
    of an organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Defense in Depth (DiD)**: An organization’s network, web properties, and
    resources can be better protected with the **Defense in Depth** (**DiD**) cybersecurity
    strategy, which employs a combination of different security technologies and procedures.
    Security solutions at physical, technical, and administrative control layers are
    essential to layered security, which is why the two terms are sometimes used interchangeably.
    This approach ensures that attackers are unable to access secured networks or
    on-premise resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Definition of done**: This is a shared understanding in software development
    regarding the specific criteria that must be met in order for a task to be considered
    complete.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dev**: This refers to an individual involved in software development projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DevSecOps**: This is the practice of incorporating security operations and
    procedures into the DevOps workflow, enabling the automated execution of critical
    security tasks. The objective is to include security into the workflow at the
    earliest stage possible to mitigate vulnerabilities and potential risks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deployment**: This is the act of propagating updated software to stakeholders.
    In DevOps arrangements, deployment is fully automated, guaranteeing prompt delivery
    of updates to users once they have been produced and tested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deployment pipeline**: A deployment pipeline is an automated representation
    of the process by which software is moved from version control to the end users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DevOps**: This is a paradigm shift in the IT culture, focusing on the rapid
    delivery of IT services through the application of Agile and lean principles within
    a system-oriented framework. DevOps prioritizes humans and their shared morals
    and values, aiming to improve collaboration between operations and development
    teams. DevOps solutions utilize contemporary technology, especially automation
    tools, to leverage an incredibly programmable and dynamic infrastructure throughout
    every phase of development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DevOps transformation**: This is a crucial procedure that involves integrating
    and executing the latest DevOps principles and methods within a company. It involves
    dismantling the barriers between development and operations teams and facilitating
    effortless cooperation, automated testing, and uninterrupted delivery of software
    products.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to effectively implement a DevOps transformation, a business needs
    to experience a substantial culture change, overhaul current processes, and embrace
    state-of-the-art tools and technology that facilitate automation and a continuous
    delivery pipeline. Various methodologies and practices, such as cloud-native development
    and infrastructure as code, have the potential to significantly transform a business’s
    operations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Digital transformation**: Digital transformation is the adoption of a customer-centric,
    technology-oriented strategy that encompasses all facets of a company, including
    its business models, customer interactions, and operational procedures. It employs
    artificial intelligence, automation, hybrid cloud, and other technological advances
    to utilize data and facilitate sophisticated workflows, expedite and enhance decision-making,
    and promptly respond to market changes. Ultimately, it transforms consumer expectations
    and generates fresh business prospects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker**: This is an open source platform for producing, propagating, and
    operating software containers. It offers a versatile framework for building cloud
    infrastructure and allows for the best possible utilization of cloud resources,
    serving as the cornerstone of contemporary cloud computing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker streamlines the process of developing, testing, and deploying applications
    by enabling software developers to bundle their apps in a format known as a container
    that encapsulates the runtime, libraries, system tools, configuration files, dependencies,
    and scripts required for the application to operate.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Dockerfile**: This is both a file format and a comprehensive set of machine-readable
    instructions that automate the process of producing a container image. It provides
    a clear and concise description of all the commands needed in the process, enabling
    streamlined configuration and administration of Docker container creation and
    deployment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker Swarm**: This is a container orchestration framework developed by
    the Docker organization itself. It is a comprehensive tool that enables the clustering
    and scheduling of Docker containers, allowing for the simultaneous execution of
    a substantial number of containers at once, usually in the form of microservices.
    Nevertheless, it does not possess the same degree of functionality as Kubernetes
    and has been deemed obsolete.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: E
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**EC2**: The crown jewel of Amazon Web Services, Elastic Compute Cloud provides
    numerous virtual servers for the creation and launch of cloud-based applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Egress**: Egress refers to the process by which data leaves a private network
    and enters the wider internet or another publicly accessible network. Particularly
    in cloud-based environments, where regulated data transfer is critical to efficiency
    and safety, this process is fundamental to network operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EKS**: EKS, short for Amazon Elastic Kubernetes Service, is a managed service
    provided by Amazon. It enables users to easily deploy and operate Kubernetes on
    AWS infrastructure, eliminating the need for manual cluster configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elasticity**: Elasticity, within the scope of DevOps, pertains to the capacity
    to flexibly adjust computing resources in response to varying levels of demand.
    It entails utilizing cloud infrastructure or containerization technologies to
    dynamically allocate and release computing resources in real time, guaranteeing
    the ideal price per performance in response to fluctuating workloads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Environment**: An application’s environment consists of all the resources,
    operating systems, libraries, application programming interfaces, frameworks,
    utilities, and other components that are required for properly operating the software
    at different points in its life cycle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enterprise app distribution**: An enterprise app distribution platform facilitates
    the secure deployment and administration of policy-enabled mobile applications
    via various distribution channels, such as direct user links, an enterprise web
    portal, a proprietary app store, or mobile device management and enterprise mobility
    management systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enterprise application store**: An enterprise application store is an online
    platform that showcases software specifically designed for targeted end users.
    This portal is typically established for employees and provides access to various
    software applications such as cloud services, licensing, and mobile apps. The
    availability of software options is contingent upon the authorization granted
    by the organization, encompassing both economical monthly subscriptions and expensive
    software licenses. The UI of the enterprise app store is often user-friendly and
    intuitive to users, resembling popular app shops such as Apple’s App Store and
    the Google Play Store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enterprise Application Integration (EAI)**: Enterprise application integration
    is a response to the problem of insufficient connectivity across disparate enterprise
    applications. It involves the development of technologies that facilitate the
    seamless exchange of data between enterprise applications, bypassing the need
    for extensive modifications to database setups or the apps themselves. This results
    in a more efficient workflow and improved data accessibility.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Error budget**: An error budget refers to a predetermined allocation or threshold
    for permissible errors or failures inside a certain system or process. It denotes
    the capacity to withstand errors, glitches, or periods of inactivity that may
    arise prior to compromising the user experience or the general dependability of
    the system. By establishing an error budget, teams may effectively allocate their
    efforts, strike a balance between innovation and stability, and make well-informed
    decisions regarding resource allocation in order to decrease errors and enhance
    the general performance of the entire system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Error log**: An error log is a document that records any errors that happen
    during the execution of an application, operating system, or server. The document
    includes details regarding the occurrence, timing, severity, and potentially the
    underlying cause. Examining the error log and error messages is the most straightforward
    method to ascertain the cause of an application downtime or performance problem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event-driven architecture**: Event-driven architecture is a software architecture
    model in which the system generates events or notifications and is designed to
    respond to, ingest, and identify other events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event log**: An event log is a sequentially organized record of occurrences
    taking place within an organizational structure or process, commonly employed
    for the objectives of identifying and resolving issues as well as conducting thorough
    examinations. The content can encompass a range of events, including errors, warnings,
    informative messages, and user activities. Every event is usually marked with
    a date and contains supplementary details, such as the event’s origin, its level
    of seriousness, and any pertinent data linked to the event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Evolutionary prototype development**: Evolutionary prototype development,
    also referred to as breadboard prototyping, stands apart from other prototyping
    strategies. The primary objective of utilizing evolutionary prototyping is to
    construct a highly resilient model using a systematic process and consistently
    enhancing it. This approach is based on the idea that the evolutionary prototype
    serves as the foundation of the newly implemented system, allowing for future
    enhancements and additional requirements to be incorporated gradually over time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exploratory testing**: Exploratory testing is a software testing method that
    involves simultaneous activities of learning, test design, and execution. The
    approach emphasizes exploration and depends on the tester’s expertise to identify
    faults that may not be adequately addressed by other testing methods. With exploratory
    testing, testers analyze the system without following predetermined test cases
    or having prior knowledge of the system. Instead of adhering to a rigid testing
    protocol, they immediately engage in testing and make impromptu judgments regarding
    what to test in real time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: F
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Fail fast**: Fail fast is a strategic approach that involves attempting something,
    promptly recognizing its failure, receiving prompt feedback, adapting accordingly,
    and making another attempt.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fargate**: Amazon Fargate allows users to run Docker containers on managed
    infrastructure, such as **Elastic Container Service** (**ECS**), without the need
    for administration of the underlying server resources. You can set it up in accordance
    with the serverless computing pricing model; instead of configuring clusters by
    hand, you just pay for the resources used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fight fires**: In the field of computer science, firefighting involves allocating
    resources to solve an unforeseen issue. The word indicates bug hunting rather
    than feature integration. Firefighting may involve adding engineers to fix problems
    with code discovered near a product’s release deadlines during software development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plenty of businesses are ready for firefighting situations, but recurring emergencies
    indicate poor planning or inefficiency and wasted resources that could be used
    elsewhere. Comprehensive **Disaster Recovery Planning** (**DRP**) anticipates
    and perhaps prevents catastrophes, minimizing firefighting.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Flow**: Flow refers to the movement of individuals or objects as they progress
    through a series of steps or stages in a process. The *first way* of the DevOps
    is to enhance the efficiency of the flow within systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FluentD**: FluentD is a Ruby-based open source program used to collect and
    analyze data. The system enables data entry from a diverse range of tools, such
    as Elasticsearch, and offers data output to a broad array of dashboards that may
    be configured with numerous plugins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Full stack developer**: A full stack developer is an adept professional who
    possesses the skills to construct both the user-facing frontend and the server-side
    backend of a website. The frontend, which encompasses the user interface and interaction
    components of a website, and the backend, which involves the underlying data storage
    and processing mechanisms, necessitate distinct sets of skills. Given that full
    stack developers are responsible for all stages of the development process, they
    are required to possess proficiency in both areas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Full stack observability**: This refers to the continual surveillance of
    the real-time performance of every single element within a technology stack that
    is distributed throughout an IT environment. Essentially, it entails obtaining
    an in-depth awareness of your cloud-based applications, services, infrastructure,
    on-premises servers, Kubernetes clusters, and other associated elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full stack observability technologies leverage telemetry data, spanning metrics,
    logs, and traces, obtained from a company’s whole IT infrastructure. This enables
    comprehensive analysis of application and infrastructure performance, maintenance,
    and related activity. Simultaneously, they assist firms in comprehending the correlation
    and relationships among their IT components.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Functional testing**: Functional testing is a form of software testing that
    verifies the software system’s compliance with the functional requirements and
    specifications. Functional tests aim to assess the functionality of each component
    of the software program by supplying suitable input and checking the results against
    the specified functional criteria.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: G
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Gemba**: Gemba is a Japanese term that refers to “the actual location” or
    “the authentic spot.” In the context of business, it frequently refers to the
    location where value is generated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Git**: Git is a popular distributed VCS that is extensively utilized in software
    development and DevOps methodologies. It enables the collaboration of several
    developers in project development, facilitates the tracking of source code modifications,
    and effectively manages repositories of source code. Git offers functionalities
    such as branching, merging, and resolving conflicts, facilitating fluid collaboration
    and controlled versioning among distributed teams.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitHub**: GitHub is a widely used web-based platform that hosts code and
    incorporates more capabilities on top of the standard Git features. GitHub is
    frequently the central location for the development of most open source and proprietary
    software projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitLab**: GitLab is an open source web-based Git interface that is specifically
    designed for optimal performance in DevOps environments. This is achieved by its
    integrated support for CI/CD technologies, such as GitLab CI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.gitlab-ci.yml`. A runner is a small, efficient agent that handles CI jobs
    by utilizing the coordinator API of GitLab CI/CD. It executes the job and then
    reports the outcome back to the GitLab server instance. Administrators can create
    runners and view them in the GitLab user interface. Runners can be tailored exclusively
    for particular projects or made accessible across all projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitOps**: This is a DevOps approach that utilizes Git repositories as the
    main source for infrastructure and application definitions, guaranteeing precision
    and uniformity. Modifications to the infrastructure and application configurations
    can be easily implemented using Git commits, which allow for version control,
    automated deployments, and streamlined rollbacks in the event of an issue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitOps operator**: This is a Kubernetes operator that automates and supervises
    the deployment of applications and resources. It achieves this by means of changes
    made to a Git repository, which it polls continuously for differences between
    the declared state and the actual state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Governance**: IT governance encompasses a collection of directives and procedures
    that are put in place to guarantee that all IT operations inside an organization
    are aligned with its business objectives. These IT operations encompass the organization
    of IT teams, the acquisition of IT assets, and the implementation of IT infrastructures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: H
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Helm**: This serves as a Kubernetes application manager. This method simplifies
    the administration of microservices for large-scale operations by leveraging user-friendly
    machine-readable specification files that ensure the smooth operation of complex
    container orchestration and infrastructure development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Helm Chart**: This is an efficient Kubernetes tool that simplifies the deployment
    and management of containerized applications. Helm Charts leverage user-friendly
    machine-readable specification files that ensure the smooth operation of complex
    container orchestration and infrastructure development within Kubernetes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP**: The Hypertext Transfer Protocol, also known as HTTP, is the fundamental
    technology that underpins the World Wide Web. It is utilized to render web pages
    by means of hyperlinks. Functioning atop the network protocol stack’s other layers,
    HTTP is an application-layer protocol that facilitates the transmission of data
    between networked devices. An example of an HTTP flow would be a client machine
    sending a request and a server machine sending a response.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP requests**: A client initiates an HTTP request to a server’s host in
    order to retrieve a necessary resource for constructing the content. Clients utilize
    a **Uniform Resource Locator** (**URL**) containing the data they need to request
    server resources when making a request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTPS**: HTTPS is a more secure iteration of the HTTP protocol that uses
    encryption to safeguard web traffic. It enhances security by implementing TLS
    (previously SSL) to encrypt and authenticate data transmitted between a web server
    and the client’s web browser. Initially, SSL was primarily employed by websites
    to safeguard login credentials and financial data from unauthorized interception.
    However, it is now widely utilized by the majority of web servers to encrypt all
    communication and ensure the integrity of each web page throughout transit, preventing
    any unauthorized modifications or corruption.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Idempotence**: Idempotency in data pipelines refers to the ability to execute
    the same operation multiple times without changing the result beyond the initial
    application. This property ensures consistency and reliability, especially in
    distributed systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Image**: An image in Docker refers to a fixed and unchangeable representation
    of a container; this quality is commonly referred to as *immutability*. A Docker
    image includes the necessary instructions for generating a functional Docker container
    for use as both standalone and microservice-based application architectures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, the term can apply to a system image, otherwise referred to as
    a hard drive snapshot, which is an image of a computer system in its current state
    that can be stored and applied to a hard drive at any given time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Incident management**: Incident management involves promptly addressing and
    resolving events or disruptions to services within a company. Within the context
    of DevOps, the primary objective of incident management procedures is to minimize
    the duration of system unavailability, expedite the restoration of services, and
    extract valuable insights from incidents in order to proactively mitigate their
    recurrence. Incident management often includes the processes of identifying, prioritizing,
    resolving, and analyzing incidents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Infrastructure as Code (IaC)**: **Infrastructure as Code** (**IaC**) is the
    practice of utilizing coding to provision and manage IT infrastructure. The incorporation
    of code as the governing framework of IT infrastructure involves the utilization
    of software development techniques such as CI, continuous delivery, and version
    control. IaC relies on three essential components for its operation: resource
    pooling, software-defined intelligence, and an exclusive application programming
    interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Infrastructure as a Service (IaaS)**: IaaS, an abbreviation for infrastructure
    as a service, is an IT management framework in which computer resources and necessary
    technologies are delivered as a service to facilitate the operation of different
    platforms and applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Infrastructure management**: Within an IT organization, infrastructure encompasses
    essential components such as hardware, software, and other systems required to
    provide IT services in compliance with **Service-Level Agreements** (**SLAs**).
    IT infrastructure management includes the oversight of IT guidelines, regulations,
    hardware, data, personnel, and external relationships, such as vendors or security
    personnel, to ensure the seamless and effective operation of IT services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Infrastructure monitoring**: Infrastructure monitoring encompasses the gathering
    and examination of data from diverse infrastructure elements, including servers,
    networks, and applications, in order to verify their performance, accessibility,
    and dependability. DevOps teams employ monitoring technologies and methodologies
    to acquire insight into the state of infrastructure, identify problems, and take
    proactive measures to mitigate possible bottlenecks or outages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Infrastructure resilience**: Infrastructure resilience refers to the capacity
    of an infrastructure to maintain its operations and promptly recover from interruptions
    or disasters, with the aim of minimizing any adverse effects on end users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ingress**: Ingress refers to the process by which information enters a private
    network from another, usually public, network. Cloud computing relies heavily
    on proper ingress management, which is essential to preserving the integrity and
    security of the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ingress controller**: This refers to an API object that controls how services
    in a cluster can be accessed from outside sources, usually using HTTP. Load balancing,
    SSL termination, and name-based virtual hosting are all services that an ingress
    controller might offer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Instance**: To put it simply, an instance is a virtual machine that your
    application runs on. A more general definition would be a collection of interdependent
    components required to execute an application, such as a Docker container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration testing**: Integration testing is a phase in the software development
    life cycle where the entire application or a group of several software modules
    are brought together and tested as a whole. Integration testing is performed to
    assess whether an entire system or component adheres to specific functional requirements,
    and it takes place subsequent to unit testing and prior to system testing. Modules
    that have previously been subjected to unit testing are then used as inputs for
    integration testing. These modules are then grouped into bigger aggregates, and
    tests that are established in an integration test plan are applied to those aggregates.
    Finally, the integrated system that is suitable for system testing represents
    the output of integration testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Issue tracking**: Issue tracking is a systematic procedure that enables developers
    and quality assurance professionals to monitor the progression of emerging issues
    and new features from their discovery to their resolution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IT infrastructure**: An enterprise’s IT infrastructure, sometimes referred
    to as information technology infrastructure, encompasses the complete set of hardware,
    software, and network resources required to provide IT services within the firm.
    IT infrastructure serves as a means to provide services or resources either internally
    within a business or externally to its consumers. Software application developers
    utilize IT infrastructure to facilitate their development approach, while various
    companies employ it to enhance efficiency and generate value by embracing technology.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Iterations**: Iterations refer to a singular development cycle, usually lasting
    for a duration of one to two weeks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: J
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Jenkins**: Jenkins is a popular open source automation server that is extensively
    utilized in the field of DevOps for the purpose of constructing, testing, and
    deploying software applications. The platform offers a resilient framework for
    continuous integration and delivery workflows, enabling teams to automate build
    processes, execute tests, and release software with dependability. Jenkins provides
    extensive flexibility through a wide-ranging plugin ecosystem, proving it to be
    exceptionally flexible in various DevOps scenarios.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jenkins job**: Jenkins jobs play a crucial role in automating many tasks
    across the software development life cycle. These discrete actions or procedures
    optimize essential steps, such as building, testing, and rolling out software
    applications. Jenkins enables the customization of processes by utilizing several
    job types, thereby assuring flexibility to meet individual project needs. These
    tasks exemplify the significance of continuous integration and delivery by enabling
    teams to streamline and enhance their development processes for greater efficiency
    and dependability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JVM heap**: The Java heap memory is an essential element of the **Java Virtual
    Machine** (**JVM**) that is in charge of dynamically distributing and overseeing
    objects while the program is running. The Java application utilizes the runtime
    data area as a storage and retrieval space for objects. When the application starts,
    the JVM reserves a specific amount of memory for the heap, which can be modified
    using command-line parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JVM threads**: A Java thread is the sequence of instructions followed by
    a program during execution. All operations executed in Java are performed within
    threads. Every application in the JVM ecosystem inherently includes threads, with
    a minimum of one, even if not expressly invoked. The code execution begins with
    the main procedure, which is executed in the primary application thread. Indeed,
    all the threads generated in the code are actually instantiated by the Java Virtual
    Machine itself and then supervised by it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: K
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kaizen**: Kaizen is a Japanese business approach that focuses on the perpetual
    improvement of workplace practices and efficient operations. The objective is
    for the business to identify methods of enhancing all aspects of a value stream
    in order to produce superior outcomes for their customers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kanban**: This is a method of visual management that helps project managers
    supervise and regulate the flow of work within a development project for maximum
    efficiency and observability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kanban board**: This is a visual tool employed in lean manufacturing projects
    to visually represent work, limit the number of simultaneous tasks being worked
    on, and enhance velocity or workflow. It can aid both Agile and DevOps teams in
    efficiently managing their daily tasks. Kanban boards utilize cards, columns,
    and continuous improvement to aid services and technology teams in efficiently
    fulfilling their responsibilities and strategically regulating a manageable workload.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kata**: This denotes the cultural education or the notion of conforming to
    the “correct” method in Japanese culture. It is a methodical approach to accomplishing
    objectives and confronting obstacles that can be implemented across an entire
    organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kubernetes**: Kubernetes, originally created by Google developers, is an
    open source framework that simplifies the automated deployment, management, scalability,
    and execution of containers. Kubernetes is renowned for its capacity to scale
    and adapt, enabling the swift migration of workloads across on-premises, hybrid,
    or public cloud infrastructure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kubernetes CronJobs**: Kubernetes CronJobs are a specific sort of resource
    in a Kubernetes cluster that allows for the scheduling and automation of repetitive
    operations or batch jobs. Kubernetes CronJobs enable the scheduling of containerized
    jobs or Pods at specific times, using a cron expression to determine the schedule,
    similar to conventional cron jobs in Linux operating systems. These jobs have
    the capability to carry out a range of operations, including data backups, regular
    maintenance, and data processing, with the assurance that they will be completed
    consistently and according to a prearranged time frame.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kubernetes CustomResourceDefinition (CRD):** Custom resources are extensions
    to the Kubernetes API that may or may not be offered by the standard configuration
    of Kubernetes. This signifies a modification to an individual Kubernetes Deployment.
    Kubernetes is now more modular, though, as many of its core functions are built
    using custom resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kubernetes operator**: A Kubernetes operator is a specialized program that
    automates tasks for managing an application within the Kubernetes environment.
    Operators serve as automatic system administrators. Users are able to enhance
    the functionalities of Kubernetes APIs by organizing a customized procedure that
    oversees instances of an application. Their responsibility is to uphold the intended
    condition of an application as defined by the Custom Resources Definitions (CRD).
    The program can be scaled, updated, or restarted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kubernetes PersistentVolume (PV)**: A **PersistentVolume** (**PV**) is an
    enduring entity that specifies discrete storage capabilities of a cluster and
    has a lifespan that exceeds that of a Pod or node. PVs possess a distinct life
    cycle compared to Pods and serve as an additional resource within the cluster.
    Consequently, a Kubernetes administrator has the ability to preconfigure storage
    independently from the applications they are running. To allocate storage for
    Pods, a PersistentVolumeClaim object is required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kubernetes PersistentVolumeClaim (PVC)**: A **PersistentVolumeClaim** (**PVC**)
    serves as a formal request for storage allocation within a Kubernetes cluster.
    When a user generates a PVC with defined storage criteria, a control loop in the
    control plane actively searches for a corresponding PersistentVolume and establishes
    a binding between them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kubernetes Pod**: In Kubernetes, a Pod is the most basic deployable object.
    A Kubernetes Pod is a collection of one or more containers that execute instances
    of an application. Nodes are worker machines that host Pods and provide a well-configured
    environment for containers to execute with optimal efficiency. This encompasses
    the supplying dependencies and resources, such as the storage of data in volumes
    that are shared across containers, the allocation of internal IP addresses to
    facilitate communication between containers, and the configuration of container
    execution, including specifications such as port usage and container image version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kubernetes QoS**: This refers to a criterion in Kubernetes that determines
    how Pods are scheduled and managed in the overall system. **Quality of Service**
    (**QoS**) distributes resources among different applications according to their
    distinct resource requirements. Kubernetes goes beyond the scope of container
    orchestration to include the administration of an application’s resources and
    the scheduling of its execution. It allows developers to establish requests and
    limits for your applications, including CPU and memory resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kubernetes replica**: Kubernetes replicas are duplicate instances that enable
    automatic recovery for Pods. Like many other processes and services, Pods are
    susceptible to failure, faults, evictions, and termination. For example, Pods
    can experience failure and be subsequently removed when there is a sudden decrease
    in system resources and an increase in node pressure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kubernetes workloads**: Kubernetes workloads serve as the fundamental components
    that define the configuration, deployment, and management of applications and
    services within a Kubernetes cluster. These workloads determine essential aspects
    of an application’s behavior, including the number of instances (Pods) to execute,
    how they should adjust in size based on demand, and how they communicate with
    each other and other services. In essence, Kubernetes workloads act as a framework
    for coordinating containerized applications, guaranteeing their reliable and efficient
    execution in compliance with specified requirements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: L
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Lead time**: Lead time refers to the duration required to transform work
    in progress into a completed state inside a manufacturing facility. In the context
    of software development, this concept is symbolized by the act of transferring
    modifications made to the code into the production environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lean**: Lean is a production strategy that prioritizes waste reduction and
    process improvement to enhance the delivery of value to customers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lean IT**: Lean IT refers to the application of lean principles in the creation
    and operation of IT products and services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Legacy application**: A vital information system that plays a crucial role
    in daily operations, even though it may rely on older technologies. One of the
    primary obstacles for information systems professionals is replacing outdated
    applications and systems with new and advanced technologies. When organizations
    update or modify their technologies, it is crucial to guarantee compatibility
    with existing systems and data formats that are still being utilized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log file**: A log file is a type of data file that retains various information,
    such as events, processes, messages, and additional data from software, OSs, or
    machines. They offer valuable insights into user actions and play a crucial role
    in monitoring IT environments. You can determine whether things are functioning
    correctly and identify any potential system or network breaches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log rotation**: Log rotation automates the management of log file size, preventing
    storage space from being filled and system performance from being slowed down.
    One way to update the log file is by renaming the current file and replacing it
    with a new one to store the latest information. This is typically done on a regular
    basis, either daily or weekly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: M
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Managed detection and response**: MDR assists enterprises in risk management
    through continuous monitoring conducted by a proficient cybersecurity team, utilizing
    advanced threat intelligence resources and techniques. Efficiently prioritizing,
    investigating, and responding to incidents enhances operations and safeguards
    precious data from both established and emergent risks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mean Time Between Failures (MTBF)**: Mean time between failures is a metric
    utilized to assess the dependability of an application, computer system, or infrastructure
    component. It is determined by computing the arithmetic mean (average) time duration
    between occurrences of system failures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mean Time to Recovery (MTTR)**: The **Mean Time to Recovery** (**MTTR**)
    refers to the average duration it takes for an application, computer system, or
    infrastructure component to recover from an interruption or disaster incident.
    Instances of these kinds of instruments vary from self-replicating Kubernetes
    Pods to failover power supply systems. Typically, the recovery time for such recovery
    efforts is swift, usually measured in seconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microservices**: Microservices are an illustration of the service-oriented
    strategy for software design, specifically the tactics involved with dividing
    a monolithic application into a collection of loosely connected services that
    handle specific operational duties. These services communicate with detailed granularity
    using economical protocols and APIs that offer adaptable and extensible product
    capabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microservices architecture**: Microservices architecture is the methodology
    of creating software as a network of separate, self-contained services that interact
    with one another and may be geographically diverse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile application**: A mobile application, also known as an app, is a specific
    sort of software developed to operate on a mobile device, such as a smartphone
    or tablet computer. Mobile applications often offer consumers comparable services
    to those found on personal computers. Apps are often compact, standalone software
    modules with minimal functionality.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile application management**: **Mobile Application Management** (**MAM**)
    refers to the software and services that handle the distribution and oversight
    of both privately created and publicly available mobile applications used in corporate
    environments. This includes both company-issued and “bring your own” mobile operating
    systems, such as those found on smartphones and tablet computers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model-based testing**: Model-based testing is a method of testing software
    where test cases are generated from a model that specifies the functionality of
    the **System Under Test** (**SUT**). Visual models can serve as representations
    of the intended functionality of a SUT, as well as representations of testing
    methodologies and a testing environment. Through the utilization of the model
    instructions, it is possible to automatically generate tests, including mock test
    data and automated tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monolithic architecture**: Monolithic architecture refers to a conventional
    software design where the program is constructed as a single, self-contained entity
    that operates independently from other applications. The term “monolith” is commonly
    associated with something immense and pervasive, which accurately reflects the
    nature of monolithic architecture in software engineering. Monolithic architecture
    refers to a unified and extensive computing network that incorporates all business
    considerations into a single code base. To modify this type of application, it
    is necessary to update the complete stack by consulting the entire code base to
    construct and deliver a revised edition of the server-side interface and backend
    infrastructure. This results in improvements becoming sporadic and requiring a
    significant amount of time and capital to complete.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Muda**: Muda is a Japanese term that signifies the state of being futile,
    ineffective, or wasteful. Muda is classified as one of the three categories of
    waste in the context of lean process engineering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-cloud architecture**: Multi-cloud architecture refers to an IT infrastructure
    strategy that encompasses the use of numerous public or private clouds, or a combination
    of both, together with on-premises infrastructure. By implementing a multi-cloud
    architecture, enterprises can strategically allocate important workloads, apps,
    and data among many cloud service providers. Organizations can choose service
    providers depending on several factors, such as their geographical coverage, performance
    capabilities, security controls, and pricing structures, thanks to this freedom
    of movement. The outcome is a streamlined cloud infrastructure that utilizes the
    distinct benefits of each provider to cater to specific scenarios, alleviate shortcomings,
    and accomplish organizational goals.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mura**: Mura is a Japanese term that refers to the state of being uneven,
    inconsistent, or lacking homogeneity. It is classified as one of the three categories
    of waste in the context of lean process engineering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Muri**: Muri is a Japanese term that signifies the state of being irrational,
    unattainable, or exceeding one’s capability due to extreme difficulty. It is classified
    as one of the three categories of waste in the context of lean process engineering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: N
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Network**: A computer network is a complex arrangement of interconnected
    computing equipment designed to facilitate the transmission and exchange of information.
    Computing devices encompass a wide range of equipment, ranging from handheld devices
    to supercomputers. These devices are interconnected using physical mediums such
    as fiber optics, although they are capable of establishing wireless transmissions
    to accomplish this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network bottleneck**: A network bottleneck is a condition in a computer network
    where the data flow is greatly obstructed or diminished because of a particular
    link or component in the network that has insufficient capacity or processing
    power. This limitation might lead to a slowness of data transfer and a reduction
    in overall network efficiency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node**: A Kubernetes cluster contains physical or virtual computers called
    nodes. Its purpose is to serve as a host for Pods, which are responsible for running
    Docker containers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A node could also refer to any computer or similar equipment that is linked
    together within a network and is capable of transmitting, receiving, or distributing
    data. Laptops, file servers, printing devices, and network routers are all examples
    of nodes inside a local network.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Node pool**: This is a group of cluster nodes in Kubernetes that have identical
    specifications and are capable of being managed and controlled as a single unit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Non-functional testing**: Non-functional testing is a form of software testing
    that validates the non-functional characteristics of a software program. Its purpose
    is to evaluate the preparedness of a system based on multiple factors that are
    not addressed by functional testing. Checking the system’s scalability, efficiency,
    usability, reliability, and performance are all examples of non-functional testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NoOps**: NoOps refers to an IT environment in which the tasks involved in
    managing, optimizing, and securing IT services and applications are automated,
    abstracted, or delegated to individuals outside of a conventional central operations
    unit. The term “NoOps” lacks a precise definition, resulting in diverse interpretations
    among suppliers, analysts, and clients. It is used to characterize different levels
    of automation, the specific IT components it can be implemented with, and the
    allocation of IT operations responsibilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: O
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Observability**: Observability refers to the capacity to obtain a comprehensive
    understanding of the functioning and interaction of sophisticated distributed
    systems. It comprises the activities of monitoring, logging, and tracing in order
    to get insight into the performance of applications and infrastructure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenShift**: OpenShift, created by Red Hat, is a high-quality commercialized
    container orchestration solution for Kubernetes that operates in on-premises cloud
    infrastructures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open source**: Open source refers to a software distribution model in which
    the copyright holders provide users with access to the application’s source code
    and the rights to read, modify, and distribute it to anybody for any purpose.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenTelemetry**: OpenTelemetry is a project that offers a comprehensive set
    of tools and resources for collecting telemetry data from applications and services.
    It aims to simplify the process and ensure compatibility across different systems.
    Having access to telemetry data is essential for monitoring and observing modern
    distributed systems. Utilizing OpenTelemetry allows developers to receive a thorough
    analysis of application behavior and performance. This promotes adept monitoring,
    problem-solving, and performance optimization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operational intelligence**: Operational intelligence refers to the utilization
    of data analytic methods on real-time data that is produced or gathered within
    the information technology environment of an organization. Operational intelligence
    aims to collect data from various parts of the IT infrastructure, analyze it immediately
    as it is generated or gathered, and offer it to IT operators in a standardized
    format. This allows them to quickly take action and make decisions according to
    the findings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ops**: Ops, in the context of DevOps, refers to any professionals who are
    involved in the day-to-day duties that are required to deploy and manage IT infrastructure
    and services conjointly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Orchestration**: This is the procedure for streamlining operations associated
    with information technology. This includes tasks such as the administration of
    containers and infrastructure configuration. Essentially, it is a procedure that
    includes executing predetermined tasks using pre-crafted automation scripts, facilitated
    by user-friendly applications such as Terraform, specifically designed for configuration
    management.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: P
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Pair programming**: Pair Programming is an approach to software development
    wherein two developers collaborate on a feature, allowing them to simultaneously
    assess each other’s code during the writing process, with the aim of enhancing
    the overall quality of the code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Patch and pray**: The patch-and-pray technique refers to a software development
    and cybersecurity tactic that entails superficially addressing existing defects
    or vulnerabilities and relying on the hope that these actions would correct an
    issue or mitigate attacks in the future. It is a typical approach for firms without
    the necessary resources to be more proactive in their software development efforts
    or security measures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pipeline**: Combines automation, tools, and techniques across the software
    development life cycle to optimize the means of creating and delivering software
    to consumers. Importantly, there is no universally applicable method for constructing
    a DevOps pipeline, as they frequently differ in structure and execution across
    different organizations. However, automation, CI/CD, automated testing, reporting,
    and monitoring are common components of most DevOps pipelines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Platform as a Service (PaaS)**: **Platform as a Service** (**PaaS**) offers
    developers a comprehensive set of languages, libraries, services, and tools to
    create and launch applications in the cloud, without the need to be concerned
    about the underlying operating system architecture and related infrastructure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Playbook**: A playbook in Ansible serves as a set of instructions for deploying
    infrastructure, providing comprehensive guidance on running a sequence of commands
    to accomplish certain tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Predictive analytics**: Predictive analytics refers to a collection of techniques
    and technology that enable the analysis of both present and past data in order
    to create accurate forecasts about future occurrences. Predictive analytics encompasses
    a diverse range of mathematical modeling and computer science methodologies, all
    aimed at utilizing previous events to estimate the probability or chance of a
    future event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Product owner**: A **Product Owner** (**PO**) is a crucial component of an
    Agile team whose job is to make sure the team’s deliverables meet the needs of
    stakeholders and customers as much as possible and to maximize the team’s value
    delivery. As a key liaison between the company and its technological and business
    strategists, the PO acts as the principal spokesperson for the team’s clients
    and is an integral part of the broader product management function. Because of
    this, the team is able to evolve the solution in a way that satisfies all of the
    stakeholders in the most amenable way possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Production**: The ultimate phase in a deployment pipeline wherein the product
    will be consumed by the audience for which it was designed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Provisioning**: Provisioning refers to the procedure of setting up and implementing
    an IT system resource, whether it is done on-site or in a cloud environment. In
    the realm of enterprise computing, the phrase is frequently linked to **Virtual
    Machines** (**VMs**) and instances of cloud resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Public Key Infrastructure** (**PKI**) describes a cryptographic framework
    that facilitates the use of TLS certificates. Assuming the two parties have trust
    in an independent organization called a certificate authority, PKI allows one
    party to confirm the identity of another using certificates. This digital proof
    identity validates the legitimacy of internet sites and assets on protected networks,
    while guaranteeing the security of network connections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Real-time dashboard**: Real-time dashboards are a category of graphical user
    interfaces that present performance indicators or key metrics pertaining to a
    business function, process, or objective in a manner that is straightforward and
    immediate to comprehend. Real-time interfaces furnish IT operators and other personnel
    with the most recent data pertaining to a wide range of company performance, security,
    and operational metrics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regression testing**: Regression testing is a form of software testing that
    is performed following a code update in order to verify that the change has not
    created any new defects. The addition of new code can potentially introduce conflicting
    logic with the pre-existing code, resulting in a variety of problems. Typically,
    QA teams maintain a set of regression test cases for critical features, which
    they repeatedly run whenever there are code modifications. This practice aims
    to optimize testing efficiency and minimize the amount of time spent testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Release**: A software release is a procedure for introducing a new iteration
    or enhancement of a software product to the intended demographic. This procedure
    includes the development and dissemination of the definitive revision of the software,
    which may encompass correcting issues, introducing new functionalities, refining
    existing features, or enhancing overall performance. The software release process
    is a crucial component of the software development life cycle, guaranteeing that
    the product fulfills customer requirements and is prepared for implementation
    in the real world.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Release management**: Release management includes the systematic coordination,
    organization, and regulation of a software build as it progresses through various
    phases and environments. This comprehensive process involves the meticulous planning,
    scheduling, testing, and deployment of software releases, as per the software
    development life cycle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Release orchestration**: Release orchestration is a process that helps to
    coordinate and automate the various steps in a pipeline that culminate in an application’s
    release, including the transfer of value to the customer. This includes the span
    of time that code is committed into version control to the time that it gets deployed
    for consumption in a production environment. Some of the duties that release orchestration
    manages include notifying technical and business stakeholders if and when problems
    arise and maintaining a record of all actions taken for each release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rollback**: Rollback refers to the process of restoring a database or program
    to a previously defined state, either automatically or manually. A rollback usually
    occurs in response to a deployment failure or a problem with a new software release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rolling release**: A rolling release, often referred to as a rolling update,
    is a type of software development model. Software improvements are developed in
    ongoing, incremental steps rather than in discrete version releases. Users can
    upgrade the program at any moment to get the most recent version, and they are
    encouraged to do so often.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rolling update**: A rolling update is a seamless process of updating an application
    without any interruptions, completed instance by instance. It utilizes the Kubernetes
    container orchestration platform to guarantee continuous application availability
    and enhance the overall user experience throughout the entire process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Runbook**: A runbook serves as a comprehensive guide, providing comprehensive
    instructions and details for performing routine operations within a business.
    Its purpose is to ensure that these tasks are executed consistently and efficiently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: S
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**S3**: Amazon **Simple Storage Service** (**S3**) is a storage service offered
    by AWS that allows you to securely store various types of files, including photos,
    audio, and videos. It provides enhanced scalability and security for your data.
    Users can easily store and access data from anywhere on the internet, at any moment.
    It enables features such as high availability, strong security, and easy integration
    with other AWS services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SSL certificate**: A digital certificate is used to authenticate websites
    and ensure their security. SSL, or Secure Sockets Layer, is a network protocol
    that establishes an encrypted link that protects traffic between a client and
    a web browser. Put simply, the SSL certificate guarantees internet security by
    thwarting any potential interception, reading, or alteration of transmitted information
    by malicious third parties.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SSL/TLS handshake**: The SSL/TLS handshake is responsible for establishing
    a secure and encrypted communication channel between the user’s browser and the
    web server, ensuring the security of user data and transactions by preventing
    unauthorized access or tampering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scrum**: Scrum is an Agile framework that enables the completion of complex
    projects through an iterative, time-sensitive, and gradual approach.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security intelligence**: Security intelligence involves the continuous monitoring
    and analysis of data from users, applications, and infrastructure to assess and
    manage IT security risks in an organization. The aim is to offer practical and
    thorough insights that minimize risk and operational burden for organizations
    of all sizes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Self-service deployment**: Self-service deployments grant users the capability
    to not only initiate business processes but also terminate and restart those operations.
    Many self-service applications also offer job progress monitoring, allowing users
    to track their work. In order to accomplish this, end users may utilize web-based
    applications that feature user-friendly interfaces or the same business productivity
    tools that they employ on a daily basis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business consumers expect and prefer self-service automation like never before
    in order to obtain the information they require when they require it. This simultaneously
    improves user experience and customer satisfaction while decreasing the IT department’s
    workload.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Serverless computing**: Serverless computing is a cloud computing architecture
    that allows developers to concentrate on coding without the requirement of server
    management. The cloud provider assumes responsibility for all aspects of server
    administration, including scaling and maintenance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Serverless framework**: The serverless framework is an open source framework
    that streamlines the deployment and administration of serverless applications.
    It provides support for numerous cloud service providers and simplifies the operation
    of serverless architecture by hiding its inherent complexity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Serverless monitoring**: Serverless monitoring enables businesses to observe,
    enhance, and optimize their serverless applications. Serverless monitoring necessitates
    monitoring that is specifically tailored for the **Event-Driven Architecture**
    (**EDA**) of such a system. Serverless monitoring systems collect data from all
    components of your serverless infrastructure, consolidate resource utilization
    statistics, and offer logs and analytics. They enable the observation of serverless
    function activity, tracking of resource utilization, and establishment of automatic
    alerts for actionable analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service-Level Agreement (SLA)**: A **Service-Level Agreement** (**SLA**)
    is a contractual commitment between a service provider and a client or customer,
    ensuring certain quality assurances for factors such as availability, accountability,
    and other important criteria. Failure to comply with certain requirements outlined
    in the agreement will result in punitive actions against the service provider,
    typically in the form of a monetary penalty, such as a reimbursement, reduction,
    or credit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service-Level Indicators (SLIs)**: A **Service-Level Indicator** (**SLI**)
    is a precise metric used by firms to quantify and evaluate a particular component
    of the services provided to their clients. SLIs are a subset of SLOs, which are
    components of SLAs that affect the overall reliability of a service. SLIs can
    assist enterprises in identifying persistent network and application problems,
    hence enabling more effective remediation efforts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SLIs are commonly quantified as percentages, where 0% represents poor performance
    and 100% represents flawless performance. SLIs serve as the fundamental building
    blocks for SLOs, which are the specific goals that a company strives to accomplish.
    SLOs will decide the SLIs that are emphasized.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Service-Level Objectives (SLOs)**: SLOs enable DevOps and **Site Reliability
    Engineering** (**SRE**) teams to effectively measure and evaluate the maintenance
    and adherence to their SLAs by utilizing SLIs. The SLO framework regulates the
    manner in which these teams deliberate on the dependability of a system or required
    modifications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An SLO is a crucial component of an SLA, which is a contract between a service
    provider and a client. The SLA ensures that the client’s technology will consistently
    maintain a specified standard or level of service over a period of time. In the
    event that the service provider does not match the specified criteria, they will
    be required to pay a penalty. SLO management refers to the process of maintaining
    and measuring an SLA.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Service-Oriented Architecture (SOA)**: **Service-Oriented Architecture**
    (**SOA**) is an architectural paradigm in software engineering that emphasizes
    modular services rather than a monolithic design. Consequently, it is also utilized
    in the context of software design, where application components serve other components
    across a network using a protocol for communicating. A service refers to a distinct
    and self-contained piece of functionality that is capable of being used remotely
    and controlled or modified autonomously.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shift left**: Shift left refers to the strategy of doing testing, quality
    assurance, and performance evaluation at an earlier stage in the development process.
    Shift-left testing not only verifies software functionality but also ensures compliance
    with customer requirements. This allows developers and stakeholders to identify
    enhancements that could improve customer experience and functionality. Implementing
    these modifications at an early stage of the development process minimizes the
    expenses associated with implementing them after the code has been released.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Site Reliability Engineering (SRE)**: SRE is a software engineering methodology
    created by Google to guarantee the dependable and efficient functioning of intricate
    systems at a massive scale. Its objective is to close the divide between conventional
    software development and IT operations by incorporating methodologies from both
    fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Software development**: This is the methodical process used to create and
    maintain applications, infrastructure, or other components of an information system’s
    architecture. It involves creating, specifying, designing, programming, documenting,
    testing, and resolving bugs. Program development involves the creation and upkeep
    of source code. However, it also includes all the steps involved in bringing the
    intended program from conception to its final form. Planning and structuring the
    entire procedure is common, and there are several steps that go into making software,
    including research, prototyping, revising, fixing, and maintaining.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Software deployment**: Software deployment encompasses the entirety of the
    necessary procedures, processes, and actions involved in making a software system
    or upgrade accessible to its intended users. The majority of IT firms and software
    developers utilize a mixture of human and automated procedures to implement software
    upgrades, patches, and brand-new applications. Software deployment could consist
    of several processes, such as product release, configuration, deployment, testing,
    and evaluating performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Software testing**: Software testing is a process used to verify whether
    the software product aligns with the specified criteria and to guarantee that
    the software product is free of defects. It entails the execution of software
    or system elements using either manual or automated methods to assess one or more
    desired properties. The primary objective of software testing is to detect and
    pinpoint flaws, discrepancies, or omissions in relation to the specified requirements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source control**: Source control, also referred to as version control, entails
    the systematic monitoring and administration of modifications made to source code.
    Source control systems are software tools designed to facilitate the management
    of source code modifications by development teams. With the rapid advancement
    of development environments, VCSs have become essential tools for software teams
    to enhance their productivity and efficiency. They are particularly advantageous
    for DevOps teams as they aid in minimizing development time and enhancing the
    rate of successful deployments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sprint**: A sprint is a predefined time frame within which a development
    team is allocated to do a predetermined amount of work. Sprints typically have
    a duration of approximately two weeks, although they can vary in length from one
    week to one month.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The primary benefit of the brief duration of a sprint is that it compels developers
    to concentrate on implementing tiny, gradual modifications rather than extensive,
    sweeping alterations. Consequently, a much-reduced amount of debugging is necessary,
    resulting in clients of the program enjoying a more seamless experience with the
    product.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Software Quality Assurance (SQA)**: Software quality assurance (SQA) is the
    systematic process of overseeing and evaluating all software engineering activities,
    techniques, and deliverables to guarantee adherence to established benchmarks.
    It may involve assuring compliance with established standards or models, such
    as ISO/IEC 9126 (since replaced by ISO 25010), SPICE, or CMMI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It consists of guidelines and practices that managers, administrators, or engineers
    can apply to evaluate and audit software-related activities and products to ensure
    that they adhere to standards-based quality requirements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Staging environment**: A staging environment is employed to evaluate the
    latest iteration of your program prior to its deployment in the actual production
    environment. The purpose of staging is to duplicate the actual production environment
    as closely as possible, in order to maximize the opportunity to identify and address
    any software issues prior to software release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Structured logging**: Structured logging refers to the systematic recording
    of errors and access events in a standardized and logical manner, allowing for
    effortless studying, searching, and analysis by any application or interested
    party. JSON is the most prevalent format for structured logging since it serves
    as the accepted message format for inter-system and intra-application message
    parsing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System Under Test (SUT)**: SUT denotes a system that is undergoing testing
    to ensure its proper functioning. From a unit-testing standpoint, the system under
    test encompasses all the classes in a test that are not predefined code elements,
    such as proxies or mocks. Each individual component can be customized with its
    own configuration, consisting of a unique name and version. This allows for scalability
    in conducting a multitude of tests, enabling higher levels of precision based
    on the quality and quantity of the system being tested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: T
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Technical debt**: Technical debt refers to the implicit expenses that arise
    in software development or other IT domains when opting for a quick yet restrictive
    solution instead of a superior method that may require more time for implementation.
    Similar to financial debt, if technical debt is not paid off, it can accrue “interest,”
    which can make it more difficult to execute improvements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unresolved technical debt leads to a rise in software volatility and the expense
    of future modifications. Just like financial debt, technical debt is not inherently
    negative and can be necessary for advancing initiatives. Conversely, several experts
    argue that the use of the “technical debt” metaphor downplays the consequences,
    leading to inadequate prioritization of the essential tasks required to rectify
    it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Technology stack**: A technological stack encompasses the complete set of
    hardware and software components required for the creation and operation of a
    single application, integration, or mobile app. Software engineers have the option
    to utilize a preconfigured technology stack as the foundation for creating a new
    application, or they can create a technology stack by selecting and integrating
    software that fulfills their specific needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Telemetry**: Telemetry is an automated process that gathers, conveys, and
    quantifies data from distant sources by utilizing sensors and other instruments
    for data collection. It employs communication technologies to transmit the data
    to a central location. Afterward, the data is examined to supervise and manage
    the remote system. Telemetry data is utilized to enhance customer satisfaction
    and oversee security, application health, reliability, and performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Terraform**: Terraform is an important infrastructure orchestration application
    developed by HashiCorp. Terraform simplifies the process of deploying and managing
    infrastructure by utilizing declarative manifests. These manifests are capable
    of being stored and versioned as code, ensuring consistency and a seamless DevOps
    workflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Terraform Cloud**: Terraform Cloud is a practical SaaS solution offered by
    HashiCorp. It allows for easy collaboration in managing infrastructure, provides
    version control for infrastructure code, and offers an intuitive user interface
    for effectively managing Terraform architectures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Terraform module**: This is a collection of standardized configuration files
    that are arranged within a specified directory. Terraform modules act as encapsulations
    for groups of resources that are designed for specific purposes, thereby reducing
    the necessity to write lengthy code for identical infrastructure components. Terraform
    modules are a means of expanding your current Terraform configuration by incorporating
    pre-existing sections of reusable code. This reduces the need to write new code
    for similar infrastructure components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`terraform plan` command, you will consistently receive a summary at the conclusion.
    This summary provides information on the quantity of resources that will be created,
    updated, or deleted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`terraform.tfstate`, and it resides in the directory where Terraform was executed.
    It is generated subsequent to executing the `terraform` `apply` command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The file contains JSON-formatted mappings of the resources that were specified
    in the configuration and the ones that currently exist in your infrastructure.
    When Terraform is executed, it utilizes this mapping to compare the existing infrastructure
    with the code and perform any necessary modifications.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Test automation**: This involves the use of specialized software, separate
    from the program being tested, to control the execution of tests and compare the
    actual outcomes with what was expected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test-driven development**: Test-driven development is a software development
    methodology that involves converting software requirements into test cases prior
    to completely developing the product. It emphasizes continuously testing the software
    against all the test cases throughout the development process. This is in contrast
    to the sequential approach where software is produced first and test cases are
    created after.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test environment**: A test environment refers to a specially curated server
    infrastructure that facilitates the execution of the test cases that a development
    team has constructed. The test environment incorporates more than simply configuring
    a server for test execution. It also includes the setup and arrangement of both
    hardware and network components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Theory of Contraints**: The **Theory of Constraints** (**TOC**) is an
    approach to management that perceives any controllable system as being restricted
    in its ability to achieve more of its objectives due to a minimal amount of constraints.
    Within TOC, there is consistently a minimum of one constraint. TOC employs a focusing
    process to discover this constraint and subsequently reorganize the remaining
    aspects of the business accordingly. TOC applies the widely used phrase “a chain
    is only as strong as its weakest link.” Consequently, organizations and processes
    are susceptible to failure or disruption due to the presence of a “weak” individual
    or component, which has the potential to impair or negatively impact the whole
    outcome.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Three Pillars of Observability**: Logs, metrics, and traces are the three
    fundamental components of observability. These three data outputs offer distinct
    perspectives on the overall health and functioning of systems in cloud and microservices
    architecture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logs are records of system events and issues that can be stored in various formats,
    including plain text, binary, or structured with metadata.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Metrics**: Refers to quantifiable indicators that assess the performance
    and efficiency of a system, including factors such as CPU utilization, response
    time, and error frequency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traces**: These are visual depictions of individual requests or transactions
    that pass through a system, enabling the identification of bottlenecks, dependencies,
    and underlying causes of problems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By integrating and examining logs, metrics, and traces together, a comprehensive
    perspective of systems can be obtained, facilitating the identification of issues
    that impede business goals.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**The Three Ways**: The Three Ways refers to a collection of principles created
    by Gene Kim, an acclaimed CTO, author, and scholar, with the aim of precisely
    defining the essence of DevOps:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The First Way**: Enhancing the efficiency of the workflow, spanning from
    business processes, through development stages, to operational activities, and
    ultimately benefiting the client.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Second Way**: Enhancing the quantity of feedback loops inside your workflow
    and augmenting the speed at which you receive input.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Third Way**: Cultivating and promoting a culture that actively encourages
    continuous experimentation and learning.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Throw it over the wall**: “Throw it over the wall” is an idiomatic expression
    used to describe the act of finishing one’s portion of an assignment and then
    transferring it to the next team or group. The origin of the idiom can be traced
    back to the domain of business and project management. It represents the act of
    assigning a task or assignment to someone without giving them detailed information
    or guidance. The term “wall” in this context symbolizes a metaphorical obstacle
    that separates several departments or teams inside an organization. It is frequently
    used in situations where there is an apparent deficiency in collaboration, exchange
    of knowledge, or transparency in the delegation process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time to value**: Time to value refers to the duration it takes for a business
    to achieve tangible benefits from a certain feature.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TLS certificate**: This is an electronic certificate that facilitates systems
    on a network to verify the identity of another computer system and establish a
    secure network connection using the Secure Sockets Layer (Transport Layer Security)
    protocol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Toolchain**: A toolchain refers to the utilization of a comprehensive collection
    of specialized tools to automate a complete process from start to finish, for
    instance, the process of automating code testing, release, and deployment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: U
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Unit test**: A unit test is a code segment that validates the correctness
    of a smaller, self-contained segment of application code, usually a function or
    procedure. The purpose of the unit test is to verify that the code block executes
    as intended, in accordance with the developer’s conceptual reasoning. The unit
    test can only interact with the code segment through inputs and recorded output,
    which can be either true or false.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unit testing**: Unit testing is the procedure in which the smallest working
    piece of code is examined and evaluated. Software testing is crucial for ensuring
    the quality of code and is an essential component of software development. Writing
    software as small, functional units and creating a corresponding unit test for
    each code unit is considered a best practice in software development. Initially,
    you can express unit tests in the form of executable code. Subsequently, execute
    the aforementioned test code automatically whenever modifications are made to
    the software code. By employing this method, in the event of a test failure, you
    can promptly identify the specific section of the code that contains the defect
    or mistake. Unit testing promotes the use of modular design patterns and enhances
    both the breadth and caliber of test coverage. Automated unit testing facilitates
    the allocation of more time for development by you or your engineers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Uptime**: Uptime is the period of time that a computer system, service, or
    appliance is functioning and accessible for use. It quantifies the duration during
    which the system operates without any notable disruptions or outages. Uptime is
    commonly quantified as a percentage and is utilized to evaluate the dependability
    and efficiency of a system. Greater uptime signifies a system that is more dependable
    and accessible, whereas lower uptime implies a greater probability of service
    interruptions. Uptime is an essential measure for assessing **Service-Level Agreements**
    (**SLAs**) and ensuring an acceptable customer experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User acceptance testing**: **User Acceptance Testing** (**UAT**) is a sort
    of testing conducted by the end user or customer to validate and approve the software’s
    functionality prior to transitioning it to the production environment. User acceptance
    testing is conducted during the last step of the testing process, following the
    completion of functional, integration, and system testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: V
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Value (business)**: Business value refers to the measurable and quantifiable
    benefits that result from a business venture, which can be either tangible or
    intangible, or a combination of both. The meaning of value transcends the notion
    of a firm’s value past its economic worth, encompassing additional forms of value,
    such as employee value, customer value, vendor value, managerial value, and social
    value. Several of these types of value are not directly quantified in the context
    of money.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value stream**: The value stream includes all the steps involved in delivering
    value to the customer, starting from the request itself and continuing until the
    customer realizes that value. Typically aligning with the processes of the company,
    the value stream originates with the first idea, progresses through different
    stages of development, and continues until delivery and support. The customer
    always occupies a position at the center of a value stream, from start to finish.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value stream management**: This refers to a set of practices that focus on
    improving the operational effectiveness and efficiency of development teams toward
    delivering outstanding customer experiences. **Value Stream Management** (**VSM**)
    places its greatest emphasis on expediting the delivery of superior quality, features,
    and updates, ensuring that customers realize the value of those improvements.
    VSM has its roots in lean manufacturing and its association with the Toyota Production
    System. This methodical approach is crafted to expedite the time it takes to achieve
    value and produce superior products. By bridging the gap between the C-suite,
    Agile, and DevOps teams, VSM helps software development organizations align their
    efforts to satisfy customers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value stream mapping**: Value stream mapping, a lean management practice,
    analyzes both the present and future states of a development process taking a
    product or service from initial conception to final delivery to the customer.
    A value stream map is a visual tool that clearly presents the essential steps
    in a particular process and provides unambiguous measurements of the time and
    volume involved at each stage. The purpose of this is to illustrate the movement
    of materials and information throughout the process in the hopes of identifying
    areas that can be improved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Velocity**: Velocity is a measure of how much product backlog is completed
    by a development team in a sprint. Therefore, it can be utilized to forecast future
    accomplishments or determine the completion time of a particular task. It is crucial
    to note that velocity is a metric that gauges the rate at which value is generated,
    rather than serving as an indicator of your team’s performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version control**: This refers to the organized tracking and management of
    changes made to source code. VCSs are software tools specifically created to simplify
    the management of source code alterations made by teams of programmers. Due to
    the fast progress of development conditions, VCSs have evolved into essential
    instruments for software teams to increase their efficiency and productivity.
    They are especially beneficial for DevOps teams because they help reduce development
    time and improve the success rate of deliveries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtualization**: This is a procedure that enables the optimal utilization
    of physical computer hardware and serves as the basis for cloud computing. Virtualization
    employs software to establish a layer of abstraction over computer hardware, enabling
    the division of the physical components of a single computer, such as processors,
    memory, and storage, into several **Virtual Machines** (**VMs**). Each virtual
    machine operates independently with its own unique operating system and exists
    as an independent entity, while consuming only a portion of the computer’s physical
    hardware.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual Machine (VM)**: This is a computerized emulation that is capable
    of executing nearly identical operations as a physical computer, such as running
    programs and operating systems. Virtual machines exist on a physical system and
    harness computational capacity via software called a hypervisor. The hypervisor
    centralizes the tangible resources of the machine itself into a collective pool,
    which can be independently assigned and shared as needed, enabling multiple virtual
    machines to function on just a single physical machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: W
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Waste**: Waste refers to the components of any activity that do not contribute
    value from the customer’s point of view. Waste can manifest as improper use of
    time, excessive use of materials, and unproductive use of human capital. However,
    it could also be linked to the mismatched deployment of skill sets and insufficient
    planning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Waterfall**: The waterfall model is a method of organizing development operations
    into a series of successive phases. Each phase builds upon the deliverables of
    the previous one and involves specialized duties. This method is characteristic
    of specific domains within the field of engineering design. In the realm of software
    development, the waterfall technique is known for its limited iteration and flexibility.
    Progress follows a linear path, moving downward through many stages, including
    conception, initiation, analysis, design, construction, testing, deployment, and
    maintenance. The waterfall model represents the original **Software Development
    Life Cycle** (**SDLC**) approach adopted for software development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web application security**: Web security encompasses a wide range of security
    measures designed to safeguard your users, devices, and network from cyberattacks
    originating from the internet, such as malware and phishing attempts. These attacks
    have the potential to cause breaches and data loss. Implementing a combination
    of firewall inspection, **Intrusion Prevention System** (**IPS**) scanning, sandboxing,
    URL filtering, and other security and access restrictions helps mitigate the security
    risk to your company caused by users inadvertently accessing harmful files and
    websites.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Webhooks**: A webhook is a callback function that enables lightweight, event-driven
    interaction among two APIs using the HTTP protocol. Webhooks serve as a means
    for web applications to receive minimal data from other applications. However,
    they can also be employed to initiate automated workflows in DevOps and GitOps
    configurations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**White-box testing**: The goal of white-box testing is to improve the design,
    performance, and security of software by validating the flow of inputs and outputs
    and studying its fundamental architecture and code. When compared to white-box
    testing, black-box testing involves conducting tests from the perspective of an
    outsider or a customer. Conversely, white-box testing in software engineering
    is grounded in the underlying mechanisms of an application and focuses on internal
    testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.github/workflows` directory (folder) within a repository, and it can have
    numerous workflows, each capable of executing a distinct set of tasks. For instance,
    you can establish a distinct workflow to construct and evaluate pull requests,
    and another workflow to deploy an application whenever a release is generated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Work in Progress (WIP)**: WIP stands for work in progress, which denotes
    the specific items in the product backlog that a team is currently working on
    but has not yet finished. Put simply, the job is currently “in development.” Although
    this may appear to be simple, WIP has a significant impact not just on the ongoing
    sprint but also on subsequent sprints, backlogs, and the general performance and
    mental health of the team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Y
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**YAML**: YAML is a flexible and easily understandable data serialization language
    that is frequently employed for composing configuration files. YAML is fundamentally
    meant to prioritize simplicity and readability. The language employs a streamlined
    and simplistic syntax, depending on indentation, key-value pairs, and instinctive
    norms. This methodology enables developers and users to articulate intricate data
    structures in a manner that mimics ordinary language and is readily understandable
    at first glance. The versatility of YAML makes it a highly adaptable solution
    for a wide range of applications. YAML is a versatile tool that may be used in
    different areas, such as configuration management, data exchange, and automation.
    It provides a user-friendly and organized way of representing and handling data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
