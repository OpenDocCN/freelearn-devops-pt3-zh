["```\n$ az login\n```", "```\n$ az account show\n{\n  \"environmentName\": \"AzureCloud\",\n  \"isDefault\": true,\n  \"managedByTenants\": [],\n  \"name\": \"mysubscription\",\n  \"state\": \"Enabled\",\n  \"tenantId\": \"888bf....db93\",\n  \"user\": {\n      ...\n  }\n}\n```", "```\naz rest --method get --uri \"/subscriptions?api-version=2019-03-01\"\n```", "```\naz rest --method get --uri \"/subscriptions?api-version=2019-03-01\" --debug\n```", "```\n Request URL: 'https://management.azure.com/subscriptions?apiversion=2019-03-01'\n Request method: 'GET'\n Request headers:\n     'User-Agent': 'python/3.10.2 (macOS-12.3.1-arm64-arm-64bit) AZURECLI/2.34.1 (HOMEBREW)'\n    urllib3.connectionpool: Starting new HTTPS connection (1): management.azure.com:443\nurllib3.connectionpool: https://management.azure.com:443 \"GET /subscriptions?api-version=2019-03-01 HTTP/1.1\" 200 6079\n Response status: 200\n Response headers:\n     'Content-Type': 'application/json; charset=utf-8'\n     'x-ms-ratelimit-remaining-tenant-reads': '11999'\n     'x-ms-request-id': 'aebed1f6-75f9-48c2-ae0b-1dd18ae5ec46'\n     'x-ms-correlation-request-id': 'aebed1f6-75f9-48c2-ae0b-\n     'Date': 'Sat, 09 Apr 2022 22:52:32 GMT'\n     'Content-Length': '6079'\n```", "```\n$ mkdir .ssh\n$ ssh-keygen -t rsa -b 4096 -f ./.ssh/id_rsa -q -N \"\"\n$ chmod 600 ./.ssh/id_rsa*\n```", "```\necho -e \"AZURE_SUBSCRIPTION_ID=$(az account show --query 'id' -o tsv)\\nSSH_PUBLIC_KEY_PATH=./.ssh/id_rsa.pub\" >> .env\n```", "```\n$ go run ./cmd/compute/main.go\nStaring to build Azure resources...\nBuilding an Azure Resource Group named \"fragrant-violet\"...\nBuilding an Azure Network Security Group named \"fragrant-violet-nsg\"...\nBuilding an Azure Virtual Network named \"fragrant-violet-vnet\"...\nBuilding an Azure Virtual Machine named \"fragrant-violet-vm\"...\nFetching the first Network Interface named \"fragrant-violet-nic-6d8bb6ea\" connected to the VM...\nFetching the Public IP Address named \"fragrant-violet-pip-6d8bb6ea\" connected to the VM...\nConnect with: `ssh -i ./.ssh/id_rsa devops@20.225.222.128`\nPress enter to delete the infrastructure.\n```", "```\nfunc main() {\n\t_ = godotenv.Load()\n\tctx := context.Background()\n\tsubscriptionID := helpers.MustGetenv(\n\t\t\"AZURE_SUBSCRIPTION_ID\",\n\t)\n\tsshPubKeyPath := helpers.MustGetenv(\"SSH_PUBLIC_KEY_PATH\")\n\tfactory := mgmt.NewVirtualMachineFactory(\n\t\tsubscriptionID,\n\t\tsshPubKeyPath,\n\t)\n\tfmt.Println(\"Staring to build Azure resources...\")\n\tstack := factory.CreateVirtualMachineStack(\n\t\tctx,\n\t\t\"southcentralus\",\n\t)\n\tadmin := stack.VirtualMachine.Properties.OSProfile.AdminUsername\n\tipAddress := stack.PublicIP.Properties.IPAddress\n\tsshIdentityPath := strings.TrimRight(sshPubKeyPath, \".pub\")\n\tfmt.Printf(\n\t\t\"Connect with: `ssh -i %s %s@%s`\\n\\n\",\n\t\tsshIdentityPath, *admin, *ipAddress,\n\t)\n\tfmt.Println(\"Press enter to delete the infrastructure.\")\n\treader := bufio.NewReader(os.Stdin)\n\t_, _ = reader.ReadString('\\n')\n\tfactory.DestroyVirtualMachineStack(context.Background(), stack)\n}\n```", "```\ntype VirtualMachineFactory struct {\n     subscriptionID string\n     sshPubKeyPath  string\n     cred           azcore.TokenCredential\n     groupsClient   *armresources.ResourceGroupsClient\n     vmClient       *armcompute.VirtualMachinesClient\n     vnetClient     *armnetwork.VirtualNetworksClient\n     subnetClient   *armnetwork.SubnetsClient\n     nicClient      *armnetwork.InterfacesClient\n     nsgClient      *armnetwork.SecurityGroupsClient\n     pipClient      *armnetwork.PublicIPAddressesClient\n}\n```", "```\nfunc NewVirtualMachineFactory(subscriptionID, sshPubKeyPath string) *VirtualMachineFactory {\n     cred := HandleErrWithResult(azidentity.NewDefaultAzureCredential(nil))\n     return &VirtualMachineFactory{\n          cred:           cred,\n          subscriptionID: subscriptionID,\n          sshPubKeyPath:  sshPubKeyPath,\n          groupsClient:   BuildClient(subscriptionID, cred, armresources.NewResourceGroupsClient),\n          vmClient:       BuildClient(subscriptionID, cred, armcompute.NewVirtualMachinesClient),\n          vnetClient:     BuildClient(subscriptionID, cred, armnetwork.NewVirtualNetworksClient),\n          subnetClient:   BuildClient(subscriptionID, cred, armnetwork.NewSubnetsClient),\n          nsgClient:      BuildClient(subscriptionID, cred, armnetwork.NewSecurityGroupsClient),\n          nicClient:      BuildClient(subscriptionID, cred, armnetwork.NewInterfacesClient),\n          pipClient:      BuildClient(subscriptionID, cred, armnetwork.NewPublicIPAddressesClient),\n     }\n}\n```", "```\nfunc (vmf *VirtualMachineFactory) CreateVirtualMachineStack(ctx context.Context, location string) *VirtualMachineStack {\n     stack := &VirtualMachineStack{\n          Location:   location,\n          name:       haiku.Haikunate(),\n          sshKeyPath: HandleErrWithResult(homedir.Expand(vmf.sshPubKeyPath)),\n     }\n     stack.ResourceGroup = vmf.createResourceGroup(ctx, stack.name, stack.Location)\n     stack.SecurityGroup = vmf.createSecurityGroup(ctx, stack.name, stack.Location)\n     stack.VirtualNetwork = vmf.createVirtualNetwork(ctx, stack)\n     stack.VirtualMachine = vmf.createVirtualMachine(ctx, stack)\n     stack.NetworkInterface = vmf.getFirstNetworkInterface(ctx, stack)\n     stack.PublicIP = vmf.getPublicIPAddress(ctx, stack)\n     return stack\n}\n```", "```\nfunc (vmf *VirtualMachineFactory) createResourceGroup(ctx context.Context, name, location string) armresources.ResourceGroup {\n     param := armresources.ResourceGroup{\n          Location: to.Ptr(location),\n     }\n     fmt.Printf(\"Building an Azure Resource Group named %q...\\n\", name)\n     res, err := vmf.groupsClient.CreateOrUpdate(ctx, name, param, nil)\n     HandleErr(err)\n     return res.ResourceGroup\n}\n```", "```\nfunc (vmf *VirtualMachineFactory) createSecurityGroup(ctx context.Context, name, location string) armnetwork.SecurityGroup {\n     param := armnetwork.SecurityGroup{\n          Location: to.Ptr(location),\n          Name:     to.Ptr(name + \"-nsg\"),\n          Properties: &armnetwork.SecurityGroupPropertiesFormat{\n               SecurityRules: []*armnetwork.SecurityRule{\n                    {\n                         Name: to.Ptr(\"ssh\"),\n                         Properties: &armnetwork.SecurityRulePropertiesFormat{\n                              Access:                   to.Ptr(armnetwork.SecurityRuleAccessAllow),\n                              Direction:                to.Ptr(armnetwork.SecurityRuleDirectionInbound),\n                              Protocol:                 to.Ptr(armnetwork.SecurityRuleProtocolAsterisk),\n                              Description:              to.Ptr(\"allow ssh on 22\"),\n                              DestinationAddressPrefix: to.Ptr(\"*\"),\n                              DestinationPortRange:     to.Ptr(\"22\"),\n                              Priority:                 to.Ptr(int32(101)),\n                              SourcePortRange:          to.Ptr(\"*\"),\n                              SourceAddressPrefix:      to.Ptr(\"*\"),\n                         },\n                    },\n               },\n          },\n     }\n     fmt.Printf(\"Building an Azure Network Security Group named %q...\\n\", *param.Name)\n     poller, err := vmf.nsgClient.BeginCreateOrUpdate(ctx, name, *param.Name, param, nil)\n     HandleErr(err)\n     res := HandleErrPoller(ctx, poller)\n     return res.SecurityGroup\n}\n```", "```\nfunc (vmf *VirtualMachineFactory) createVirtualNetwork(ctx context.Context, vmStack *VirtualMachineStack) armnetwork.VirtualNetwork {\n     param := armnetwork.VirtualNetwork{\n          Location: to.Ptr(vmStack.Location),\n          Name:     to.Ptr(vmStack.name + \"-vnet\"),\n          Properties: &armnetwork.VirtualNetworkPropertiesFormat{\n               AddressSpace: &armnetwork.AddressSpace{\n                    AddressPrefixes: []*string{to.Ptr(\"10.0.0.0/16\")},\n               },\n               Subnets: []*armnetwork.Subnet{\n                    {\n                         Name: to.Ptr(\"subnet1\"),\n                         Properties: &armnetwork.SubnetPropertiesFormat{\n                              AddressPrefix:        to.Ptr(\"10.0.0.0/24\"),\n                              NetworkSecurityGroup: &vmStack.SecurityGroup,\n                         },\n                    },\n               },\n          },\n     }\n     fmt.Printf(\"Building an Azure Virtual Network named %q...\\n\", *param.Name)\n     poller, err := vmf.vnetClient.BeginCreateOrUpdate(ctx, vmStack.name, *param.Name, param, nil)\n     HandleErr(err)\n     res := HandleErrPoller(ctx, poller)\n     return res.VirtualNetwork\n}\n```", "```\nfunc (vmf *VirtualMachineFactory) createVirtualMachine(ctx context.Context, vmStack *VirtualMachineStack) armcompute.VirtualMachine {\n     param := linuxVM(vmStack)\n     fmt.Printf(\"Building an Azure Virtual Machine named %q...\\n\", *param.Name)\n     poller, err := vmf.vmClient.BeginCreateOrUpdate(ctx, vmStack.name, *param.Name, param, nil)\n     HandleErr(err)\n     res := HandleErrPoller(ctx, poller)\n     return res.VirtualMachine\n}\n```", "```\nfunc linuxVM(vmStack *VirtualMachineStack) armcompute.VirtualMachine {\n     return armcompute.VirtualMachine{\n          Location: to.Ptr(vmStack.Location),\n          Name:     to.Ptr(vmStack.name + \"-vm\"),\n          Properties: &armcompute.VirtualMachineProperties{\n               HardwareProfile: &armcompute.HardwareProfile{\n                    VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),\n               },\n            StorageProfile: &armcompute.StorageProfile{\n                    ImageReference: &armcompute.ImageReference{\n                         Publisher: to.Ptr(\"Canonical\"),\n                         Offer:     to.Ptr(\"UbuntuServer\"),\n                         SKU:       to.Ptr(\"18.04-LTS\"),\n                         Version:   to.Ptr(\"latest\"),\n                    },\n               },\n               NetworkProfile: networkProfile(vmStack),\n               OSProfile:      linuxOSProfile(vmStack),\n          },\n     }\n}\n```", "```\nfunc networkProfile(vmStack *VirtualMachineStack) *armcompute.NetworkProfile {\n     firstSubnet := vmStack.VirtualNetwork.Properties.Subnets[0]\n     return &armcompute.NetworkProfile{\n          NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),\n          NetworkInterfaceConfigurations: []*armcompute.VirtualMachineNetworkInterfaceConfiguration{\n               {\n                    Name: to.Ptr(vmStack.name + \"-nic\"),\n                    Properties: &armcompute.VirtualMachineNetworkInterfaceConfigurationProperties{\n                         IPConfigurations: []*armcompute.VirtualMachineNetworkInterfaceIPConfiguration{\n                              {\n                                   Name: to.Ptr(vmStack.name + \"-nic-conf\"),\n                                   Properties: &armcompute.VirtualMachineNetworkInterfaceIPConfigurationProperties{\n                                        Primary: to.Ptr(true),\n                                        Subnet: &armcompute.SubResource{\n                                             ID: firstSubnet.ID,\n                                        },\n                                        PublicIPAddress Configuration: &armcompute.VirtualMachinePublicIPAddress Configuration{\n                                             Name: to.Ptr(vmStack.name + \"-pip\"),\n                                             Properties: &armcompute.VirtualMachinePublicIPAddressConfiguration Properties{\n                                                  PublicIPAllocationMethod: to.Ptr(armcompute.PublicIPAllocation MethodStatic),\n                                                  PublicIPAddressVersion:   to.Ptr(armcompute.IPVersionsIPv4),\n                                             },\n                                        },\n                                   },\n                              },\n                         },\n                         Primary: to.Ptr(true),\n                    },\n               },\n          },\n     }\n}\n```", "```\nfunc linuxOSProfile(vmStack *VirtualMachineStack) *armcompute.OSProfile {\n     sshKeyData := HandleErrWithResult(ioutil.ReadFile(vmStack.sshKeyPath))\n     cloudInitContent := HandleErrWithResult(ioutil.ReadFile(\"./cloud-init/init.yml\"))\n     b64EncodedInitScript := base64.StdEncoding.EncodeToString(cloudInitContent)\n     return &armcompute.OSProfile{\n          AdminUsername: to.Ptr(\"devops\"),\n          ComputerName:  to.Ptr(vmStack.name),\n          CustomData:    to.Ptr(b64EncodedInitScript),\n          LinuxConfiguration: &armcompute.LinuxConfiguration{\n               DisablePasswordAuthentication: to.Ptr(true),\n               SSH: &armcompute.SSHConfiguration{\n                    PublicKeys: []*armcompute.SSHPublicKey{\n                         {\n                              Path:    to.Ptr(\"/home/devops/.ssh/authorized_keys\"),\n                              KeyData: to.Ptr(string(sshKeyData)),\n                         },\n                    },\n               },\n          },\n     }\n}\n```", "```\n#cloud-config\npackage_upgrade: true\npackages:\n  - nginx\n  - golang\nruncmd:\n  - echo \"hello world\"\n```", "```\n$ ssh -i ./.ssh/id_rsa devops@20.225.222.128\ndevops@fragrant-violet:~$ which go\n/usr/bin/go\ndevops@fragrant-violet:~$ which nginx\n/usr/sbin/nginx\ncat /var/log/cloud-init-output.log\n```", "```\nfunc (vmf *VirtualMachineFactory) DestroyVirtualMachineStack(ctx context.Context, vmStack *VirtualMachineStack) {\n     _, err := vmf.groupsClient.BeginDelete(ctx, vmStack.name, nil)\n     HandleErr(err)\n}\n```", "```\n$ go run ./cmd/storage/main.go\nStaring to build Azure resources...\nBuilding an Azure Resource Group named \"falling-rain\"...\nBuilding an Azure Storage Account named \"fallingrain\"...\nFetching the Azure Storage Account shared key...\nCreating a new container \"jd-imgs\" in the Storage Account...\nReading all files ./blobs...\nUploading file \"img1.jpeg\" to container jd-imgs...\nUploading file \"img2.jpeg\" to container jd-imgs...\nUploading file \"img3.jpeg\" to container jd-imgs...\nUploading file \"img4.jpeg\" to container jd-imgs...\nGenerating readonly links to blobs that expire in 2 hours...\nhttps://fallingrain.blob.core.windows.net/jd-imgs/img1.jpeg?se=2022-04-20T21%3A50%3A25Z&sig=MrwCXziwLLQeepLZjrW93IeEkTLxJ%2BEX16rmGa2w548%3D&sp=r&sr=b&st=2022-04-20T19%3A50%3A25Z&sv=2019-12-12\n...\nPress enter to delete the infrastructure.\n```", "```\nfunc init() {\n     _ = godotenv.Load()\n}\nfunc main() {\n     subscriptionID := MustGetenv(\"AZURE_SUBSCRIPTION_ID\")\n     factory := mgmt.NewStorageFactory(subscriptionID)\n     fmt.Println(\"Staring to build Azure resources...\")\n     stack := factory.CreateStorageStack(\n  context.Background(),\n  \"southcentralus”,\n)\n     uploadBlobs(stack)\n     printSASUris(stack)\n     fmt.Println(\"Press enter to delete the infrastructure.\")\n     reader := bufio.NewReader(os.Stdin)\n     _, _ = reader.ReadString('\\n')\n     factory.DestroyStorageStack(context.Background(), stack)\n}\n```", "```\ntype StorageFactory struct {\n     subscriptionID string\n     cred           azcore.TokenCredential\n     groupsClient   *armresources.ResourceGroupsClient\n     storageClient  *armstorage.AccountsClient\n}\nfunc NewStorageFactory(subscriptionID string) *StorageFactory {\n     cred := HandleErrWithResult(\n  azidentity. NewDefaultAzureCredential(nil),\n)\n     return &StorageFactory{\n          cred:           cred,\n          subscriptionID: subscriptionID,\n          groupsClient:   BuildClient(subscriptionID, cred, armresources.NewResourceGroupsClient),\n          storageClient:  BuildClient(subscriptionID, cred, armstorage.NewAccountsClient),\n     }\n}\n```", "```\nfunc (sf *StorageFactory) CreateStorageStack(ctx context.Context, location string) *StorageStack {\n     stack := &StorageStack{\n          name: haiku.Haikunate(),\n     }\n     stack.ResourceGroup = sf.createResourceGroup(ctx, stack.name, location)\n     stack.Account = sf.createStorageAccount(ctx, stack.name, location)\n     stack.AccountKey = sf.getPrimaryAccountKey(ctx, stack)\n     return stack\n}\n```", "```\n// createStorageAccount creates an Azure Storage Account\nfunc (sf *StorageFactory) createStorageAccount(ctx context.Context, name, location string) armstorage.Account {\n     param := armstorage.AccountCreateParameters{\n          Location: to.Ptr(location),\n          Kind:     to.Ptr(armstorage.KindBlockBlobStorage),\n          SKU: &armstorage.SKU{\n               Name: to.Ptr(armstorage.SKUNamePremiumLRS),\n               Tier: to.Ptr(armstorage.SKUTierPremium),\n          },\n     }\n     accountName := strings.Replace(name, \"-\", \"\", -1)\n     fmt.Printf(\"Building an Azure Storage Account named %q...\\n\", accountName)\n     poller, err := sf.storageClient.BeginCreate(ctx, name, accountName, param, nil)\n     HandleErr(err)\n     res := HandleErrPoller(ctx, poller)\n     return res.Account\n}\n```", "```\nfunc (sf *StorageFactory) getPrimaryAccountKey(ctx context.Context, stack *StorageStack) *armstorage.AccountKey {\n     fmt.Printf(\"Fetching the Azure Storage Account shared key...\\n\")\n     res, err := sf.storageClient.ListKeys(ctx, stack.name, *stack.Account.Name, nil)\n     HandleErr(err)\n     return res.Keys[0]\n}\n```", "```\nfunc uploadBlobs(stack *mgmt.StorageStack) {\n     serviceClient := stack.ServiceClient()\n     containerClient, err := serviceClient.NewContainerClient(\"jd-imgs\")\n     HandleErr(err)\n     fmt.Printf(\"Creating a new container \\\"jd-imgs\\\" in the Storage Account...\\n\")\n     _, err = containerClient.Create(context.Background(), nil)\n     HandleErr(err)\n     fmt.Printf(\"Reading all files ./blobs...\\n\")\n     files, err := ioutil.ReadDir(\"./blobs\")\n     HandleErr(err)\n     for _, file := range files {\n          fmt.Printf(\"Uploading file %q to container jd-imgs...\\n\", file.Name())\n          blobClient := HandleErrWithResult(containerClient.NewBlockBlobClient(file.Name()))\n          osFile := HandleErrWithResult(os.Open(path.Join(\"./blobs\", file.Name())))\n          _ = HandleErrWithResult(blobClient.UploadFile(context.Background(), osFile, azblob.UploadOption{}))\n     }\n}\n```", "```\nfunc (ss *StorageStack) ServiceClient() *azblob.ServiceClient {\n     cred := HandleErrWithResult(azblob.NewSharedKeyCredential(*ss.Account.Name, *ss.AccountKey.Value))\n     blobURI := *ss.Account.Properties.PrimaryEndpoints.Blob\n     client, err := azblob.NewServiceClientWithSharedKey(blobURI, cred, nil)\n     HandleErr(err)\n     return client\n}\n```", "```\nfunc printSASUris(stack *mgmt.StorageStack) {\n     serviceClient := stack.ServiceClient()\n     containerClient, err := serviceClient.NewContainerClient(\"jd-imgs\")\n     HandleErr(err)\n     fmt.Printf(\"\\nGenerating readonly links to blobs that expire in 2 hours...\\n\")\n     files := HandleErrWithResult(ioutil.ReadDir(\"./blobs\"))\n     for _, file := range files {\n          blobClient := HandleErrWithResult(containerClient.NewBlockBlobClient(file.Name()))\n          permissions := azblob.BlobSASPermissions{\n               Read: true,\n          }\n          now := time.Now().UTC()\n          sasQuery := HandleErrWithResult(blobClient.GetSASToken(permissions, now, now.Add(2*time.Hour)))\n          fmt.Println(blobClient.URL() + \"?\" + sasQuery.Encode())\n     }\n}\n```"]