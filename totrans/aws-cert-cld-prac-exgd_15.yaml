- en: '[*Chapter 13*](B17124_13_Final_SK_ePub.xhtml#_idTextAnchor317): Management
    and Governance on AWS'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing and monitoring your resources on AWS is a crucial part of ensuring
    that your applications perform as expected, are highly available and secure, and
    run in the most cost-efficient manner. You want to be able to monitor how your
    applications are being consumed, identify any technical issues that may affect
    performance and availability, and ensure that only authorized entities are granted
    access. Furthermore, you need to be able to audit your environment, with access
    to information such as access patterns, and identify any anomalies that may indicate
    potential performance or security issues. You also want to be able to enforce
    change management processes to ensure that any modifications or changes made to
    your AWS resources are accounted for and approved.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, as part of your day-to-day administrative tasks in maintaining your
    workloads, you want to be able to effectively manage your resources, such as patching,
    performing updates, and automating tasks wherever possible.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at a series of AWS services that allow you to
    effectively monitor, report, and audit your AWS resources, enabling you to incorporate
    change management processes and implement a centralized administration of day-to-day
    tasks. We will also look at tools that offer guidance on where you can improve
    the performance, fault-tolerance, security, and cost-effectiveness of your resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are dealt with in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The basics of Amazon CloudWatch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meeting compliance requirements with AWS CloudTrail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about change management with AWS Config
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing your AWS resources with AWS Systems Manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to use AWS Trusted Advisor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the AWS Well-Architected Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete the exercises in this chapter, you will need to log in to your AWS
    account as the **Identity and Access Management** (**IAM**) user **Alice**.
  prefs: []
  type: TYPE_NORMAL
- en: The basics of Amazon CloudWatch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon CloudWatch enables you to monitor your AWS resources and applications,
    running on AWS as well as on-premises. With Amazon CloudWatch, you can see how
    your resources are performing in real time. Using CloudWatch, you can collect
    resource and application metrics, logs, and events, and have these recorded into
    CloudWatch for analysis and identifying trends. A metric represents a time-ordered
    set of data points that are published to CloudWatch.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon CloudWatch can be used to configure alarms whereby if those metrics breach
    certain thresholds for a specified period, you can generate an alarm on which
    action can be taken to remediate.
  prefs: []
  type: TYPE_NORMAL
- en: With Amazon CloudWatch, you can track and collect metrics for your Amazon EC2
    instances, Amazon DynamoDB tables, Amazon **Relational Database Service** (**RDS**)
    instances, and more. Every AWS service publishes metrics to Amazon CloudWatch.
    You get basic metrics, which are offered free of charge, and detailed metrics,
    for which you pay additional charges.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some typical use cases of Amazon CloudWatch include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Infrastructure monitoring and troubleshooting**: Monitor key metrics, logs
    and visualize trends over time to identify any potential issues and bottlenecks,
    enabling you to conduct root-cause analysis that helps to resolve both incidents
    and problems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Proactive resource optimization**: Configure alarms that monitor metric values
    and are triggered if breaches occur. Define an automatic remediation action, such
    as configuring auto-scaling, to launch new instances and terminate failed instances.
    Send out notification alerts to administrators and system operators.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log analytics**: Analyze log information from various sources to help address
    operational issues, potential security attacks, or application performance issues,
    and take effective actions to remediate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at metrics in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: CloudWatch metrics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CloudWatch metrics represent variables that you can monitor as a time-ordered
    set of data points. Any service that you consume will report metrics to CloudWatch.
    For example, you could monitor the CPU utilization of an EC2 instance over a period
    that will help you track the performance of that instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each data point will consist of a timestamp. If the resource does not provide
    a timestamp as it publishes the metric to CloudWatch, then CloudWatch will create
    a timestamp based on the time that the data point was received. The following
    diagram illustrates the CPU utilization metric of Linux-based EC2 instances over
    the past three days:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – CPU utilization metrics for an EC2 instance running an e-commerce
    application'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_13_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.1 – CPU utilization metrics for an EC2 instance running an e-commerce
    application
  prefs: []
  type: TYPE_NORMAL
- en: 'Amazon CloudWatch offers a wide range of built-in metrics, but you can also
    create custom metrics based on your requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Built-in metrics**: Amazon CloudWatch allows you to collect default metrics
    from the vast array of AWS services, such as Amazon EC2, Amazon S3, Amazon RDS,
    and more, out of the box. An example includes CPU utilization, disk read/write,
    and data-transfer metrics for your EC2 instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PutMetricData` API action to publish them to CloudWatch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An important point to note is that metrics exist in the Region in which they
    are created. However, you can configure *cross-account cross-Region dashboards*,
    which will allow you to gain visibility of CloudWatch metrics, logs, and alarms
    across related accounts and understand the health and performance of your applications
    across Regions.
  prefs: []
  type: TYPE_NORMAL
- en: CloudWatch will store your metrics for up to 15 months. Data points older than
    15 months are expired, as new data points come in on a rolling basis.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's look at how you can use AWS CloudWatch dashboards to get centralized
    visibility on your resources.
  prefs: []
  type: TYPE_NORMAL
- en: Dashboards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can create one or more dashboards on Amazon CloudWatch that allow you to
    visualize and monitor your resources and the metrics that are important, all within
    a single view pane. As well as visualizing your metrics through a variety of charts
    and graphs, you can also publish your CloudWatch alarms (discussed next) on your
    dashboard for high visibility on any potential issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'CloudWatch dashboards can be configured to provide insights on your resources''
    health across AWS accounts and Regions, using the cross-account functionality.
    This functionality is integrated with *AWS Organizations*, enabling you to efficiently
    build your cross-account dashboards. Here is a quick screenshot of a CloudWatch
    dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.2 – A CloudWatch dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_13_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.2 – A CloudWatch dashboard
  prefs: []
  type: TYPE_NORMAL
- en: Alarms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can configure CloudWatch alarms to monitor a given resource metric, for
    example, the average CPU utilization of an EC2 instance. If the metric crosses
    a specific threshold for a specified period, then the alarm can be triggered to
    take a certain action. The alarm only triggers if the threshold has been breached
    for a specified period, and this is important. You do not want the alarm triggering
    just because there happens to be a momentary spike. So, for example, you would
    want the alarm to be triggered if the average CPU utilization on your EC2 instance
    goes above 80% for 15 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alarms can be in one of three states:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OK**: Occurs when a metric is within the range defined as acceptable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Alarm**: Occurs when a metric has breached a threshold for a period.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Insufficient data**: Occurs when the data needed to make the decision is
    missing or incomplete. This also generally happens when you first configure an
    alarm while it waits to receive and analyze data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once an alarm has been triggered, an automatic action can be taken to respond
    to it, which can include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple Notification Service (SNS) notification**: You can send out automatic
    alerts to an administrator (**application-to-person** or **A2P**) or push a notification
    to an application to take some action (**application-to-application**, or **A2A**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auto Scaling action**: The EC2 Auto Scaling service can be triggered to add
    or remove an EC2 instance in response to an alarm state. Auto Scaling groups can
    be configured to launch additional instances if the average load across the servers
    is above a given threshold for a period of time, for example, if average CPU is
    above 80% for more than 10 minutes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EC2 action**: You can have an alarm trigger an EC2 action, such as stopping
    an EC2 instance, terminating it, restarting it, or recovering it. Recovery of
    an instance simply means that the instances are migrated onto another host, something
    you would do if there was an underlying issue with the host hardware running the
    instance. Recovery action is only initiated based on the failure of *system status
    check* errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, you can also publish your alarms in your CloudWatch dashboards, which
    can give you a quick visual of your alarm statuses.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we look at Amazon CloudWatch Logs.
  prefs: []
  type: TYPE_NORMAL
- en: CloudWatch Logs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon CloudWatch offers a feature to centrally collect and store logs from
    both AWS and non-AWS sources. These AWS sources could be EC2 instances, CloudTrail
    logs (discussed later in this chapter), Route 53 DNS queries, and VPC flow logs.
    You can also ingest logs from non-AWS sources, such as your web applications access
    logs, error logs, and operating system event logs.
  prefs: []
  type: TYPE_NORMAL
- en: CloudWatch gives you a central view of all your logs regardless of their source
    – log events generated as part of your CloudWatch logs are essentially a time-ordered
    series of events that you can then query, analyze, search, and filter for specific
    patterns or error codes, and so on. You can also visualize your log data using
    dashboards and ingest these logs into other applications for more complex querying.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of retention, logs are kept indefinitely and never expire. However,
    you can adjust the retention policy by choosing a retention period between 1 day
    and 10 years. You can further archive your log files into Amazon S3 using one
    of the Glacier classes for long-term storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at some of the key components of CloudWatch Logs next:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Log events**: This represents some event or activity recorded by the application
    or resource being monitored. The log event will include the timestamp and the
    log message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log streams**: This consists of a sequence of log events that share the same
    source. CloudWatch Logs groups log events from the same source into a log stream.
    For example, a log stream may be associated with a web server access log on a
    specific host.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log groups**: CloudWatch then organizes these log streams into a *log group*.
    A log group represents log streams that have the same retention, monitoring, and
    access control settings. For example, you can create a log group to collect and
    organize all related log streams that relate to web server access logs from multiple
    hosts in a fleet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`504 Gateway Timeout` error message, indicating some communication or network
    problem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we learned about Amazon CloudWatch Logs, which can be used
    to ingest log information into CloudWatch from both AWS and non-AWS sources. You
    can use CloudWatch Logs to analyze access patterns, identify security and technical
    issues, and assist in triaging bottlenecks.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at Amazon CloudWatch Events, which is a near real-time stream
    of system events related to your Amazon resources.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon CloudWatch Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With Amazon CloudWatch Events, you create *rules* that continuously monitor
    your AWS resources and then respond with an action when a given event occurs.
    Amazon CloudWatch delivers a near real-time stream of system events, and the rules
    you define can trigger some action when those events occur.
  prefs: []
  type: TYPE_NORMAL
- en: An example of an event is when an EC2 instance enters the *stop state* because
    someone performed a shutdown operation on the instance. Another example is when
    an IAM user logs into the AWS Management Console. Every *write API operation*
    is an event that has occurred, and you can choose which events to monitor and
    what action to take, if necessary, when those events occur.
  prefs: []
  type: TYPE_NORMAL
- en: When you define a rule to monitor an event, you also specify an action by selecting
    an appropriate target. Targets can be a *Lambda* function, an *EC2 instance action*,
    an *SQS queue* or *SNS topic* to post a message to, an *ECS task*, and more. For
    example, let's say you want to trigger a Lambda function to process an image as
    soon as it is uploaded to an S3 bucket. You create an event so that when the upload
    is complete, the Lambda function is called to process the image in some way, such
    as creating multiple formats of the image or adding a watermark to it.
  prefs: []
  type: TYPE_NORMAL
- en: You can also configure Amazon CloudWatch Event rules to trigger an action at
    a given schedule, using *standard rate* and *cron expressions*. This can be particularly
    useful to perform day-to-day operation tasks. In [*Chapter 12*](B17124_12_Final_SK_ePub.xhtml#_idTextAnchor296),
    *Automation and Deployment on AWS*, you completed an exercise that involved automatically
    starting an EC2 instance at 8 A.M. and then shutting it down at 6 P.M., Monday
    to Friday.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned about Amazon CloudWatch Events, which allow you
    to use simple rules to perform some action when a given event takes place for
    a particular resource. CloudWatch Events can help you respond to operational changes
    to complete workflows and task, or take any corrective action if required. CloudWatch
    events can also be used to schedule automated actions that trigger at certain
    times to help repeatable day-to-day operations.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 10*](B17124_10_Final_SK_ePub.xhtml#_idTextAnchor249), *Application
    Integration Services*, you learned about Amazon EventBridge. Amazon CloudWatch
    Events and EventBridge use the same underlying service and API, and Amazon recommends
    EventBridge as the preferred way to manage your events as it offers more features.
  prefs: []
  type: TYPE_NORMAL
- en: Next up, you will learn about Amazon CloudTrail, which is a service you use
    to enforce governance, compliance, and operational and risk auditing of your AWS
    account.
  prefs: []
  type: TYPE_NORMAL
- en: Meeting compliance requirements with Amazon CloudTrail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS CloudTrail is a service that enables you to log every action taken in your
    AWS account, allowing you to track user activity and API usage. CloudTrail is
    enabled by default on your AWS account when you create it. It stores event history
    accessible within the CloudTrail dashboard for every activity that occurs in your
    AWS account. The following screenshot shows an example of the CloudWatch event
    history:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.3 – AWS CloudTrail'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_13_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.3 – AWS CloudTrail
  prefs: []
  type: TYPE_NORMAL
- en: You can use CloudTrail for enforcing and managing your overall compliance and
    governance requirements since it can provide you with a time-ordered series of
    events that have taken place in your account. You can also respond to events as
    they occur by ingesting them into Amazon CloudWatch and then configuring alarms
    or event rules accordingly to react to specific events. AWS CloudTrail events
    provide a history of both API and non-API activity. API activity includes actions
    such as launching a new EC2 instance or creating a new IAM user. Non-API activity
    refers to other types of actions, such as logging into the AWS Management Console.
  prefs: []
  type: TYPE_NORMAL
- en: 'AWS CloudTrail enables you to record three different types of events, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`RunInstances` API operation to launch an EC2 instance as shown in the preceding
    screenshot, which was performed by our IAM user, `DescribeInstances` API operation,
    which will return a list of EC2 instances but where no changes are made. Finally,
    management events can also include non-API activity, such as when a user logs
    into the AWS Management Console.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PutObject` API operation. Data events are also known as *data plane operations*
    and tend to be high-volume. Other examples of data events include Lambda function
    executions using the `Invoke` API and the `PutItem` API operation on a DynamoDB
    table, which results in new items being added to the table. Data events are not
    logged by default. To record data events, you need to create a trail and explicitly
    add supported resources or resource types for which you wish to collect events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deleteBucket` API calls per minute, but all of a sudden, it starts to log
    an average of 200 `deleteBucket` API calls per minute. Insight events contain
    related information about the event, such as API, incident time, and statistics,
    that help you understand and act on unusual activity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CloudTrail will log all API management events automatically when you open a
    new AWS account. The event history service will store 90 days' worth of management
    events that can be viewed and downloaded. The event history will not contain any
    data events – for this, you will need to create a trail. Let's look at trails
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Trails
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you wish to configure CloudTrail to store specific management events or data
    events and require more than 90 days' worth of event history, you can configure
    a *trail*. A trail is a configuration that enables CloudTrail to record specific
    types of events and have them delivered to an Amazon S3 bucket, CloudWatch Logs,
    and CloudWatch Events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Trails can be configured to record events from a single Region or across Regions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Single Region trail**: CloudTrail will records events that are specific to
    the Region you specify, and those log files are delivered to an Amazon S3 bucket
    you specify. Multiple trails can be delivered to the same S3 bucket or separate
    buckets. Single trails are viewable only in the AWS Regions where the logs are
    created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**All Regions trail**: CloudWatch will record events in each Region and deliver
    the event log files to the S3 bucket you specify. Note that if Amazon adds a new
    Region after you have created a trail that applies to *all Regions*, then the
    new Region is automatically included as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, an *all-Regions trail* is the default option when you create a trail
    in the CloudTrail console. Furthermore, CloudTrail will deliver log files from
    multiple Regions to a single Amazon S3 bucket and a CloudWatch Logs log group.
  prefs: []
  type: TYPE_NORMAL
- en: Most AWS services are Region-specific and so events are recorded in the Region
    in which the action occurred. However, for global services like `US East (N. Virginia)`
    Region.
  prefs: []
  type: TYPE_NORMAL
- en: You can also create an *AWS organization trail*, which is a configuration option
    that allows you to record events in the management account and all member accounts
    in AWS Organizations. Using an organization trail will ensure that you record
    important events across all your AWS accounts.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about AWS CloudTrail, which is a service that enables
    you to audit your AWS account and enable compliance, monitoring, and governance.
    AWS CloudTrail is not designed for performance and system health monitoring. Other
    monitoring services, such as Amazon CloudWatch, are designed to help you address
    performance or system health-related matters. Often, you are going to be using
    these tools together as part of the overall management of your AWS services and
    resources.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at the AWS Config service, which allows you
    to assess, audit, and evaluate the *configuration changes* of your AWS resources,
    and help in your overall change management process.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about change management with AWS Config
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS Config is a service that allows you to gain visibility into how your AWS
    resources are configured and deployed in your AWS account. With AWS Config, you
    can see how resources are related to each other, how they were configured in the
    past, and historical changes to those resources over time.
  prefs: []
  type: TYPE_NORMAL
- en: This can be particularly useful when you start running multiple environments,
    such as development and production, where within those environments are hosted
    countless resources across the vast array of services on AWS. For example, you
    would want to be aware of how your VPCs have been configured, what subnets and
    security groups are attached to them, what routes have been added to your route
    tables, and so on. AWS Config can help you maintain an accurate database of all
    this information as well as track changes as they occur in your AWS accounts.
  prefs: []
  type: TYPE_NORMAL
- en: You can use AWS Config to ensure that your resources have been configured in
    accordance with internal guidelines that fulfill compliance requirements. The
    service enables you to effectively implement security analysis, change management
    processes, and troubleshooting exercises.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at some of the core components of AWS Config.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration items
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A `JSON diff` file, highlighting the fields which have changed, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.4 – AWS Config JSON showing a configuration change for an EC2 instance'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_13_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.4 – AWS Config JSON showing a configuration change for an EC2 instance
  prefs: []
  type: TYPE_NORMAL
- en: As noted in the preceding screenshot, you can see that AWS Config has noted
    various changes that were made to our EC2 instance, such as the upgrade of the
    instance type from `t2.micro` to `t2.small`.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration history
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is particularly useful when you want to review changes to your resources
    over time. The configuration history is a record of configuration items for a
    given resource over a period. Using the configuration history, you can answer
    questions such as when a resource was first created, what changes were made over
    the last week, and what configuration changes were introduced two days ago at
    4 P.M. The configuration history file for each resource type is stored in an Amazon
    S3 bucket that you specify.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration recorder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The configuration recorder must be enabled and started for AWS Config to start
    recording changes made to your resources and to create CIs. The configuration
    record can be configured to record all resources or only specific resources in
    each Region, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.5 – AWS Config settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_13_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.5 – AWS Config settings
  prefs: []
  type: TYPE_NORMAL
- en: You will also note that you can also choose to record global resources, such
    as IAM resources.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration snapshot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a collection of configuration items for your resources represented as
    a point-in-time image in your AWS environment. The snapshot can be used to validate
    configurations and identify any that are incorrectly configured. The snapshots
    can be stored in a predefined Amazon S3 bucket and can be viewed in the AWS Config
    console.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration stream
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you create, modify, or delete resources in your AWS account, new CIs are
    created, which are added to the configuration stream. The configuration stream
    uses an Amazon SNS topic to send out notifications every time a change to your
    resources occurs. This can be used to alert an administrator, for example, and
    potentially watch out for any technical or security issues.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about the AWS Config service, which is a service
    to help you manage changes to your resources in your AWS account. You can use
    AWS Config to monitor how your resources relate to each other and how the configurations
    and relationships change over time.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we look at AWS Systems Manager, which enables you to track
    and resolve operational issues across your AWS accounts, automate day-to-day operational
    tasks to manage your resources, and enforce security measures for your applications.
  prefs: []
  type: TYPE_NORMAL
- en: Managing your AWS resources with AWS Systems Manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS Systems Manager is a service that enables you to centrally manage your AWS
    resources. With AWS Systems Manager, you can gain visibility of your resources
    across AWS services, perform configuration management, and automate day-to-day
    operational tasks. Previously known as **SSM**, AWS Systems Manager can help you
    can enforce compliance with desired configuration states and take corrective action
    on any policy violations where necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'AWS Systems Manager uses the concept of documents (written in JSON or YAML),
    which define the actions that Systems Manager performs on your managed resources.
    The documents are used by AWS Systems Manager to fulfill its various capabilities,
    such as operational management, change management, application management, and
    node management. AWS Systems Manager comes with a vast collection of predefined
    documents, and you can create your own. For example, the **AWS-CreateRdsSnapshot**
    document can be used to create an RDS snapshot for an RDS instance, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.6 – AWS Systems Manager predefined documents'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_13_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.6 – AWS Systems Manager predefined documents
  prefs: []
  type: TYPE_NORMAL
- en: 'AWS Systems Manager offers a wide range of capabilities, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Run Command**: Part of the node management capability, the Run Command capability
    enables you to remotely run Linux shell scripts and Windows PowerShell commands
    on your fleet of EC2 instances. This can be used to perform configuration changes,
    and install and update applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**State Manager**: This ensures that your managed instances are configured
    to a predefined state, enabling you to maintain consistency in your configurations
    across a fleet of instances, such as firewall configuration, antivirus configurations,
    and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inventory**: This enables you to gather software configuration information
    about your EC2 instances. The Inventory capability will provide information on
    applications, files, components, and patches across your managed instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maintenance Window**: Part of the change management capability, the Maintenance
    Window service enables you to schedule times when administrative tasks such as
    installing patches and updates can be performed so as not to disrupt your team
    during normal business hours.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Patch Manager**: This enables you to automate patching of your EC2 instances,
    which can comprise security and application updates. Note that updates for applications
    on Windows servers are limited to those released by Microsoft.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automation**: This enables you to automate various maintenance tasks, such
    as updating AMIs, creating snapshots of **Elastic Block Store** (**EBS**) volumes,
    resetting passwords, and launching or terminating EC2 instances, among others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parameter Store**: This offers a means of securely storing configuration
    data and secret information. For example, in [*Chapter 9*](B17124_09_Final_SK_ePub.xhtml#_idTextAnchor223),
    *High Availability, and Elasticity on AWS*, you will recall configuring the database
    connection strings for the *good deed of the month* application. The database
    connection strings consisted of sensitive username and password information, which
    was saved in plain text in the Amazon S3 bucket repository. Furthermore, the database
    connections file when copied from the S3 bucket and stored in the HTML directory
    of your server is a security risk. Sensitive information should always be stored
    and managed more securely. AWS Systems Manager''s Parameter Store enables you
    to store sensitive information such as passwords and database strings as parameter
    values. These values can be stored encrypted, and your application can be configured
    to securely retrieve these values as they are needed from the Parameter Store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Distributor**: This enables you to create and deploy application packages
    to your managed instances. You can create your software packages as executables
    that operating systems recognize, enabling easy deployments. Distributor can also
    reinstall new package versions and perform in-place updates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Session Manager**: In [*Chapter 7*](B17124_07_Final_SK_ePub.xhtml#_idTextAnchor157),
    *AWS Compute Services*, we discussed the importance of bastion hosts, which act
    as an entry point to administer other EC2 instances you deploy in a VPC, across
    your public and private subnets. While bastion hosts are intended to be highly
    secure because of how they are configured or accessed, you still need to manage
    and maintain the servers, including performing security updates, ensuring performance
    levels, and so on. AWS Systems Manager offers **Session Manager**, which allows
    remote access to your EC2 instances using a browser-based shell or the CLI. Session
    Manager provides secure and auditable instance management without the need to
    open inbound ports, maintain bastion hosts, or manage SSH keys.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Incident Manager**: This is another Systems Manager offering that enables
    you to manage and resolve incidents affecting AWS-hosted applications. The Incident
    Manager service offers a management console to track all your incidents and notify
    responders of impact, identify data that can help with troubleshooting, and help
    you get services back up and running.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These are just some of the capabilities on offer from AWS Systems Manager.
    Here is a quick screenshot of the Inventory console, showcasing information from
    a single EC2 instance that was deployed in my AWS account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.7 – AWS Systems Manager Inventory'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_13_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.7 – AWS Systems Manager Inventory
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have looked at the AWS Systems Manager service, which offers a suite
    of capabilities to centrally manage and automate day-to-day operations for your
    AWS resources.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn about the AWS Trusted Advisor service, which
    enables you to inspect your AWS environment and identify whether your resources
    have been configured in accordance with AWS best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Learning how to use AWS Trusted Advisor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The AWS Trusted Advisor service analyzes your resources and how they have been
    configured. The service helps to measure the configuration of your resources against
    best practices and identify opportunities to save money, improve system availability
    and performance, or address security concerns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, the Trusted Advisor service will report on its analysis against
    the following core categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cost optimization**: Performs checks on your resources to identify which
    ones are underutilized. AWS Trusted Advisor will then offer recommendations on
    where you could reduce your costs. For example, Elastic IP addresses are only
    free if they are attached to a running EC2 instance. AWS charges you an hourly
    fee for provisioning Elastic IP addresses if they are not being consumed, that
    is, not attached to any instance, or attached to an instance that is in a stopped
    state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance**: Offers recommendations on where you can improve the responsiveness
    of your applications. For example, if you are using a gp2 EBS volume type for
    an EC2 instance that seems to be heavily utilized, it can recommend you an upgrade
    to an io1 EBS volume, which will improve performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: Reports on any resources that have not been configured in accordance
    with security best practices. For example, if you have not configured MFA on the
    root account, then AWS will highlight this as a potential security risk and recommend
    that you configure MFA.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fault tolerance**: Identifies options for increasing the resiliency of your
    AWS solutions. For example, AWS will identify any RDS instance that has not been
    configured with multi-AZ as a risk factor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service limits**: Checks your AWS account to identify whether you are approaching
    any service limits or quotas. For example, when using the AWS Auto Scaling service,
    you have a default limit of configuring up to 200 launch configurations per Region.
    Should you start to exceed more than 80% of this limit, you will see an alert
    in Trusted Advisor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Trusted Advisor and Support plans
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The AWS Trusted Advisor service offers different levels of checks based on the
    AWS Support plan that you have subscribed to. If you are only on the *Basic* Support
    plan, then you only have access to six checks in the security category and all
    checks in the service limits category.
  prefs: []
  type: TYPE_NORMAL
- en: To access the full range of checks across all categories, you must be subscribed
    to either the *Business* or *Enterprise* Support plans. With either of these plans,
    you can also use Amazon CloudWatch Events to monitor the status of Trusted Advisor
    checks.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed the AWS Trusted Advisor service, which is a reporting
    tool that enables you to identify whether your resources have been configured
    in accordance with best practices and whether there are opportunities to save
    on costs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn about the AWS Well-Architected Framework,
    which offers a series of recommendations to help you build secure, high-performing,
    resilient, and efficient application infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the AWS Well-Architected Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The AWS Well-Architected Framework consists of a set of design principles and
    architectural best practices that you can follow when building solutions for the
    cloud. AWS offers the Well-Architected Tool, which can be used to review the state
    of your applications and resources, and compares them to the latest AWS architectural
    best practices.
  prefs: []
  type: TYPE_NORMAL
- en: The Well-Architected Framework comprises the following *five pillars*.
  prefs: []
  type: TYPE_NORMAL
- en: Reliability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Applications deployed in the cloud must be resilient to failures. The resources
    that your applications depend on (compute, storage, networks, and databases) must
    be available and reliable. Any technical issues on any of these resources will
    cause your application to become unreliable and potentially fail.
  prefs: []
  type: TYPE_NORMAL
- en: The reliability pillar also focuses on how quickly you can recover from failure
    based on your architectural design. This is because failures are bound to happen
    and your architecture must be able to recover from these failures swiftly. One
    key concept that you should also consider is the fact that replacing a failed
    component is often better than trying to figure out why the component failed and
    attempting to resolve the issue that caused the failure. This is because as you
    spend time trying to troubleshoot the failure, you risk increasing your **Recovery
    Time Objective** (**RTO**). For example, with EC2, you can deploy your application
    across multiple instances and multiple AZs. You can then configure Elastic Load
    Balancers and the Auto Scaling service to ensure that if an EC2 instance fails,
    traffic is routed to only those instances that are healthy, while the failed EC2
    instance is replaced automatically in the background.
  prefs: []
  type: TYPE_NORMAL
- en: Performance efficiency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When architecting your cloud solutions, you want to offer the best performance
    while still ensuring that you are optimized for cost. This means you should always
    try to select the resource types and sizes based on your performance needs, while
    monitoring your resources consistently to ensure you maintain those levels of
    performance in accordance with demand. Performance should not suffer if demand
    increases. At the same time, you should only provide resources as they are required
    to avoid underutilization of those resources.
  prefs: []
  type: TYPE_NORMAL
- en: You'd often need to incorporate resources that fall across different AWS services,
    such as compute, storage, and networking, and architecting your solution requires
    careful planning in addition to configuring each of those resources. For example,
    if your application is hosted in the London Region, your users in London may experience
    good performance. However, if you have users in South America, you may experience
    poor performance due to network latency issues. You can consider using Amazon
    CloudFront to cache your application content at edge locations closer to your
    South American users, improving overall application performance.
  prefs: []
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should always keep security in mind whenever you are designing your cloud
    solutions. You want to ensure that your applications are accessed securely by
    only authorized users. You also want to ensure data integrity, privacy, and sovereignty.
    Assigning permissions to users must always be based on the principle of least
    privilege, ensuring that access is granted only where required to fulfill the
    job function and nothing more.
  prefs: []
  type: TYPE_NORMAL
- en: You should incorporate a backup and disaster recovery strategy for your application
    solutions, which would also comprise securing the underlying resources that power
    your application. For example, you must ensure that your databases are backed
    up or that you regularly create EBS snapshots. Another example is to configure
    Amazon S3 bucket replication and, if possible, to use cross-regional replication
    configurations. Finally, you must be able to audit every activity that takes place
    in your account, and you can use tools such as AWS CloudTrail to maintain an audit
    log.
  prefs: []
  type: TYPE_NORMAL
- en: Operational excellence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This pillar focuses on achieving operational excellence by making frequent,
    reversible, and continuous changes to your workloads. Your aim should be to achieve
    continuous improvements in your processes and procedures. Furthermore, automating
    operational tasks will strengthen the other pillars, and using **Infrastructure
    as Code** (**IaC**) with tools such as CloudFormation can help to avoid human
    error and enable consistency in how you respond to events.
  prefs: []
  type: TYPE_NORMAL
- en: The operational excellence pillar also suggests anticipating failure and to
    consider performing fail tests and recovery exercises, from which you can learn
    how to remove potential sources of failure and mitigate risks. Understanding how
    your applications fail will also help you design automatic recovery solutions,
    which will offer consistency and rapid recovery.
  prefs: []
  type: TYPE_NORMAL
- en: Cost optimization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This pillar focuses on ensuring that you architect and build solutions in a
    manner that avoids unnecessary costs. At the same time, you want to be able to
    ensure that your applications are highly performant, reliable, operationally efficient,
    and secure. To achieve cost optimization, you should first understand your spending
    patterns and analyze where the money is going. Using tools such as Cost Explorer
    and Cost and Usage Reports will help you with this.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you must always try to adopt a consumption model. If you are running development
    and test servers that only going to be used for 8 hours a day, Monday to Friday,
    it makes sense to consider procuring those EC2 instances using the On-Demand pricing
    option. You should then ensure that those servers stopped outside of normal business
    hours for a potential cost saving of up to 75% (40 hours versus 168 hours a week).
    Remember that you can automate the startup and shutdown of your EC2 instances
    using Lambda functions and CloudWatch Events, as discussed in [*Chapter 12*](B17124_12_Final_SK_ePub.xhtml#_idTextAnchor296),
    *Automation and Deployment on AWS*.
  prefs: []
  type: TYPE_NORMAL
- en: Other areas where you can design for cost optimization include using managed
    service offerings instead of performing heavy-lifting, data center-style operations.
    For example, it is much more cost-effective to host your databases on Amazon RDS
    and have AWS perform all the management functions for you than spinning up EC2
    instances on which you install your database software. The latter results in more
    management efforts to ensure your database servers are patched, backed up, and
    secure.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about the AWS Well-Architected Framework, which
    is a set of guiding principles and best-practice recommendations to help you design
    and run your solutions in the cloud. In the next section, we move on to some exercises
    for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 13.1 – Reviewing the Trusted Advisor reports in your AWS account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, you will log into your AWS account and review the Trusted
    Advisor service:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your AWS Management Console as the IAM user **Alice**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Trusted Advisor** console, which is located under the **Management
    & Governance** category in your list of services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be redirected to the Trusted Advisor dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because you may only have subscribed to the Basic Support plan, you will note
    that only a few checks are visible. From the main dashboard, note the **Checks
    Summary** section on the main pane of the dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the right-hand pane, click on the **Security** category.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the right-hand pane, you will note various checks, such as the one for MFA
    being enabled on your root account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Expand the check labeled `22` port that enables `22` port from the internet
    unrestricted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.8 – AWS Trusted Advisor dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_13_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.8 – AWS Trusted Advisor dashboard
  prefs: []
  type: TYPE_NORMAL
- en: From this exercise, you should've learned how to review the AWS Trusted Advisor
    dashboard. You were able to identify some security alerts based on your configuration
    of security groups from earlier exercises that did not adhere to best practices.
    You can then use this report to identify which security groups need to be amended
    to increase security.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at several services on AWS that can help you manage
    and govern your applications in the cloud. We discussed various monitoring and
    logging tools, such as Amazon CloudWatch, AWS CloudTrail, and AWS Config, and
    how you can use these services to ensure performance, reliability, security, and
    effective change management. You also learned about the AWS Systems Manager service,
    which offers a suite of capabilities to centrally track and resolve operational
    issues across your AWS resources. We used AWS Systems Manager to automate day-to-day
    administrative tasks, ensure compliance of your resource configurations, offer
    incident and change management services, and improve visibility and control.
  prefs: []
  type: TYPE_NORMAL
- en: The AWS Trusted Advisor service offers a wide range of reports that allow you
    to cross-reference your resource configurations with various best-practice design
    principles. Finally, we discussed how you must follow the design principles and
    recommendations offered by the AWS Well-Architected Framework when building solutions
    for the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover AWS security concepts and look at various
    security tools you should use when architecting and managing cloud applications.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which AWS service enables you to track all API activity in your AWS account,
    regardless of whether the activity was performed using the AWS Management Console
    of the CLI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS CloudTrail
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Config
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Trusted Advisor
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Application load balancer logs
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: As part of implementing change management, which AWS service can be used to
    assess, audit, and evaluate change configurations of your AWS resources, enabling
    you to identify whether a change was the cause of an incident?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Config
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS CloudTrail
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon CloudWatch
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Outposts
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which AWS service can be used to monitor your company's fleet of EC2 instances,
    which can be used to identify performance issues related to CPU utilization or
    memory consumptions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon CloudWatch
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Cloud Monitor
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS EC2 Monitor
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS CloudTrail
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which AWS service helps you identify potential unused resources, such as Elastic
    IP addresses, that are not attached to a running instance and thus highlight opportunities
    to save on costs?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Cost Explorer
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Trusted Advisor
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Resource Manager
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Budgets
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which capability of the AWS Systems Manager service enables you to remotely
    connect to your Linux EC2 instances without having to use bastion hosts in your
    VPC?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Session Manager
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Parameter Store
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Run Command
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Incident Manager
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
