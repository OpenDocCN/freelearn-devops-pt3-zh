["```\nbolt --verbose plan run pecdm::provision --params @params.json\n```", "```\nbolt command run 'uname' --targets examplehost.example.com\n```", "```\nInvoke-BoltCommand -Command 'uname' -Targets examplehost.example.com\n```", "```\nbolt command run 'systeminfo' --targets winrm:// host1.example.com,winrm://host2.example.com --user windows --password Pupp3tL@b5P0rtl@nd! --no-ssl\n```", "```\nInvoke-BoltCommand -Command \"grep -i 'lang' /etc/locale\" -Targets ssh://examplehost.example.com –User centos -PasswordPrompt -RunAs root\n```", "```\nbolt command run '@commandlist' --targets '@targetfile'\n```", "```\ncat targetfile | bolt command run '@commandlist' --targets -\n```", "```\necho -e \"uname \\\\ndate\" | bolt command run - --targets host1.example.com, host2.example.com\n```", "```\nbolt script run ./scripts/install.sh --targets @application_clients 10.6 no-gui\n```", "```\nInvoke-BoltScript -Script dotnet-install.ps1 -Targets @targetsfile '-Channel LTS'\n```", "```\nbolt apply manifests/exampleapp.pp --targets @targetsfile\n```", "```\nInvoke-BoltApply -Manifest manifests/exampleapp.pp -Targets @targetsfile\n```", "```\nbolt apply --execute \"file { '/etc/exampleapp: ensure => present }\" --targets servers\n```", "```\nInvoke-BoltApply -Execute \"file { '/etc/exampleapp': ensure => present }\" -Targets servers\n```", "```\nbolt file upload /rpms/cowsay.rpm /tmp/ --targets @targets\nSend-BoltFile -Source /installer/installer.exe -Destination /users/exampleuser/installer.exe -Targets @targets\nbolt file download /etc/exampleapp//logfile.log /var/tmp/logfile.log --targets @targets\nReceive-BoltFile -Source /ProgramData/exampleapp/logfile.log\\puppet.log -Destination /user/exampleuser/puppet.log -Targets @targets\n```", "```\n{ \"items\": [\n{\"target\":\"host1.example.com\",\"action\":\"command\",\"object\":\"uname\",\"status\":\"success\",\"value\":{\"stdout\":\"Linux\\n\",\"stderr\":\"\",\"merged_output\":\"Linux\\n\",\"exit_code\":0}}\n,\n{\"target\":\"host1.example.com\",\"action\":\"command\",\"object\":\"uname\",\"status\":\"success\",\"value\":{\"stdout\":\"Linux\\n\",\"stderr\":\"\",\"merged_output\":\"Linux\\n\",\"exit_code\":0}}\n,\n{\"target\":\"host1.example.com\",\"action\":\"command\",\"object\":\"uname\",\"status\":\"success\",\"value\":{\"stdout\":\"Linux\\n\",\"stderr\":\"\",\"merged_output\":\"Linux\\n\",\"exit_code\":0}}\n],\n\"target_count\": 3, \"elapsed_time\": 2 }\n```", "```\nStarted on host1.example.com...\nStarted on host2.example.com...\nStarted on host3.example.com...\nFinished on host1.example.com:\n  Linux\nFinished on host2.example.com:\n  Linux\nFinished on host3.example.com:\n  Linux\nSuccessful on 3 targets: host1.example.com, host2.example.com, host3.example.com\nRan on 3 targets in 2.89 sec\n```", "```\nInvoke-BoltTask -Name install_failure_cleanup -Targets @targets.file -Rerun failure\n```", "```\nname: packtproject\nmodules:\n- name: puppetlabs-stdlib\n- name: puppetlabs-peadm\n  version_requirement: 3.9.0\n- name: puppetlabs/bolt_shim\n- git: https://github.com/binford2k/binford2k-rockstar\n  ref: 0.1.0\nplans:\n- packproject\n- peadm::provision\npolicies:\n- packproject::lab\ntasks:\n- bolt_shim::command\n```", "```\nbolt project init example_project --modules puppetlabs-apache,puppetlabs-mysql\n```", "```\nNew-BoltProject -Name example_project -Modules puppetlabs-apache,puppetlabs-mysql\n```", "```\nconfig:\n  transport: ssh\n  ssh:\n    host-key-check: false\n    run-as: root\n    native-ssh: true\n    ssh-command: 'ssh'\ngroups:\n  - name: agents\n groups:\n  - name: linux_agents\n    targets:\n      - 20.117.165.119\n  -name: windows_agents\n    targets:\n     - 20.117.165.218\n     config:\n      winrm:\n        user: windowsuser\n        password: Pupp3tL@b5P0rtl@nd!\n        ssl: false\ntargets:\n  - name: primary:\n  - 20.117.166.6\n```", "```\nconfig:\n  winrm:\n    extensions:\n      - .py\n      - .pl\n```", "```\n#!/bin/bash,\nset -e\nif [ -x \"/opt/puppetlabs/bin/puppet\" ]; then\necho \"ERROR: Puppet agent is already installed. Re-install, re-configuration, or upgrade not supported. Please uninstall the agent before running this task.\"\nexit 1\nfi\nflags=$(echo $PT_install_flags | sed -e 's/^\\[\"*//' -e 's/\"*\\]$//' -e 's/\", *\"/ /g')\ncurl -k \"https://${PT_server}:8140/packages/current/install.bash\" | bash -s -- $flags\n```", "```\nparam(\n  $install_flags\n  $server\n)\nif (Test-Path \"C:\\Program Files\\Puppet Labs\\Puppet\\puppet\\bin\\puppet\"){\nWrite-Host \"ERROR: Puppet agent is already installed. Re-install, re-configuration, or upgrade not supported. Please uninstall the agent before running this task.\"\nExit 1\n}\n$flags=$install_flags -replace '^\\[\"*','' -replace 's/\"*\\]$','' -replace '/\", *\"',' '\n[Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}; $webClient = New-Object System.Net.WebClient; $webClient.DownloadFile(\"https://${server}:8140/packages/current/install.ps1\", 'install.ps1'); .\\install.ps1 $flags\n```", "```\n{\n  \"description\": \"Install the Puppet agent from a master\",\n  \"parameters\": {\n    \"server\": {\n      \"type\": \"String\",\n      \"description\": \"The resolvable name of the Puppet server to install from\"\n    },\n    \"install_flags\": {\n      \"type\": \"Array[String]\",\n      \"description\": \"Positional arguments to pass to the shell installer\",\n      \"default\": []\n    }\n  },\n  \"implementations\": [\n    {\"name\": \"agent_install.sh\", \"requirements\": [\"shell\"]},\n    {\"name\": \"agent_install.ps1\", \"requirements\": [\"powershell\"]}\n  ]\n}\n```", "```\nresult = { \"example1\": \"value1 , \"example2\": \"value2\" }\njson.dump(result, sys.stdout)\n```", "```\n{ \"_error\": { \"msg\": \"Task exit code 1\", \"kind\": \"puppetlabs.tasks/task-error\", \"details\": { \"exitcode\": 1 } } }\n```", "```\nbolt task run peadm::install_agent --targets agents server=primary.example.com install_flags= [\"--puppet-service-ensure\",\"stopped\",\"agent:certname=node.example.com\"]\n```", "```\nInvoke-BoltTask -Name package -Targets @targetservers -Params '{action=\"status\";name=\"apache2\"}'\n```", "```\nplan exampleproject::exampleplan(\n  TargetSpec $nodes,\n  Enum ['true', 'false'] $manage_user,\n) {\n  <code>\n}\n```", "```\nbolt plan new <PLAN NAME> --pp\nNew-BoltPlan -Name <PLAN NAME> -Pp\n```", "```\nplan restart_apache_servers(\nTargetSpec $apache_servers,\n){\n get_targets($apache_servers).each |Target $apache_server | {\n run_task('apache', $target_node, 'action' => 'reload')\n }\n}\n```", "```\n$example_server = Target.new('name'; => 'exampleserver')\n$example_server.set_config('transport', 'ssh')\n$example_server.set_config(['ssh', 'password', 's3cur3!')\n$example_server.add_facts({'application' => 'example'})\n```", "```\nrun_command('systemctl stop puppet', $all_targets)\nrun_plan('peadm::modify_certificate', $convert_targets,\n  primary_host => $primary_target,\n  add_extensions => {\n    'pp_auth_role' => 'pe_compiler',\n  },\n)\n```", "```\napply($primary_target) {\nclass { 'peadm::setup::node_manager_yaml':\n  primary_host => $primary_target.peadm::certname(),\n}\n```", "```\nout::message('Error')\nout::verbose(\"Heres the error: $detailed_output\")\n```", "```\nplan return_result( $targets )\n$did_this_work = run_task('error_check_task', $targets)\nIf $did_this_work.ok {\nout::message('It worked')\nreturn run_task('output_task', $targets)\n}else{\nReturn \"OH NO\"\n}\n```", "```\nunless get_targets($targets).size == 1 {\n    fail_plan('This plan only accepts one target.')\n  }\n```", "```\n$install_agent_results = run_task('agent_install', $agents , '_catch_errors' => true)\n$ install_agent_results.each |$agent_result| {\n$target = $agent_result.target.name\nif $result.ok\n { notice(\"${target} installed correctly ${result.value}\")\n} else {\n notice(\"${target} failed install with error: ${result.error.message}\")\n }\n}\n```", "```\n$install_agent_results = catch_error(agent_install/connection_error) || { run_task('agent_install', $agents , '_catch_errors' => true)\n}\n```", "```\nrun_plan('facts', 'targets' => $targets)\n$windows_targets = get_targets($targets).filter |$target| { $target.facts['os']['name'] == 'Windows' }\n```", "```\n$windows_targets = get_targets (puppetdb_query('inventory[certname] { facts.os.name = \"windows\" }'))\n```", "```\nHierarchy: -\n- name: \"Nodes\" path: \"targets/%{trusted.certname}.yaml\"\n- name: \"Org\" path: \"%{org}.yaml\"\nplan_hierarchy:\n- name: \"Org\" path: \"%{org}.yaml\"\n```", "```\nplan exampleproject::exampleplan(\nTargetSpec $nodes,\nString $application\n){\n$dns_server_name = lookup('dns_server_name)\n}\n```", "```\n# @summary This plan is just for example\n# @api private\n# @param example_servers The targets to run this plan on\n# @param manage_user Whether the user account should be managed\nplan exampleproject::exampleplan(\nTargetSpec $example_servers,\nEnum ['true', 'false'] $manage_user\n){\n```", "```\ndescription: configure docker swarm\nparamters:\n  firstnode\n    type: TargetSpec\n  Othernodes\n    Type: Targetspec\n- name: init\n    task: docker::swarm_init\n    targets: $firstnode\n  - name: token\n    task: docker::swarm_token\n    targets: $firstnode\n  - name:facts\n    Fact:\n    targets: $firstnode\n  - name: managersjoin\n    task: docker::join_swarm\n    targets: $othernodes\n    parameters:\n      token: $token.map |$token_result| { $token_result['stdout'] }\n       manager_ip: $facts.map |$facts_result| { $facts_result['stdout']['networking']['interfaces']['ip'] }\nreturn $managersjoin.map | $managersjoin_result| {$managersjoin_result['stdout']}\n```", "```\nparameters:\n  packages:\n    type: Array[String]\n  servers:\n    type: Targetspec\nSteps:\n  -name: unique_packages\n  eval: $packages.unique\n  -name: numer_of_packages\n  eval: $unique_packages.size\n  - verbose: 'Installing ${number_of_packages} packages'\n  - name: install\n    task: example::install_packages\n    parameters:\n      packages:  $unique_packages\n      Targets: $servers\nReturn: $install.map | $install_result| {$install_result['stdout']}\n```", "```\ngroups:\n  - name: windows\n    targets:\n      - _plugin: puppetdb\n        query: 'inventory[certname] { facts.kernel = \"Windows\" }'\n```", "```\ntargets:\n  - target1.example.com\n  config:\n  winrm:\n    user: bill\n    password:\n      _plugin: prompt\n      message: Enter your password\n```", "```\n$inventory = ['server', 'psql', 'compiler', 'node', 'windows_node' ].reduce({}) |Hash $memo, String $i| {,\n$memo + { $i => resolve_references( {\n'_plugin' => 'terraform',\n'dir' => $tf_dir,\n```", "```\ntargets:\n  - uri: target1.example.com\n    config:\n      ssh:\n        password:\n          _plugin: pkcs7\n          encrypted_value: |\n            ENC[PKCS7,MIIBiQYJK]\n```", "```\nplugin-hooks:\n  puppet_library:\n    plugin: task\n    task: package\n    parameters:\n      name: puppet-agent\n      action: install\n```", "```\n    bolt project init packtlab\n    ```", "```\n    bolt inventory show --targets agent_nodes --detail\n    bolt inventory show --targets windows_agent_nodes --detail\n    ```"]