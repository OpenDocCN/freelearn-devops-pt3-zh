- en: '*Chapter 16*: Loosely Coupled Architecture and Microservices'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第16章*：松散耦合的架构与微服务'
- en: Interestingly, software architecture has a bigger impact on software delivery
    performance than the type of systems that you build. It doesn't matter if your
    product is a cloud service, embedded software that runs on manufactured hardware,
    a consumer app, an enterprise application, or even mainframe software. This has
    basically no impact on engineering performance if your architecture has certain
    characteristics (*Forsgren N., Humble, J., and Kim, G., 2018*). There are high
    and low performers for every system type. But the characteristics of architecture
    are clearly correlated with engineering velocity and make it one of the key accelerators.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，软件架构对软件交付性能的影响要大于你所构建的系统类型。无论你的产品是云服务、运行在制造硬件上的嵌入式软件、消费类应用、企业应用，甚至是大型机软件，这几乎对工程性能没有影响。如果你的架构具有某些特性，这对工程性能几乎没有影响
    (*Forsgren N., Humble, J., and Kim, G., 2018*)。对于每种系统类型，都有高性能和低性能的差异。但架构的特性显然与工程开发速度相关，并使其成为关键的加速因素。
- en: In this chapter, I'll give you an overview of loosely coupled systems and how
    you can evolve your software and system design to achieve a high engineering velocity.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将给你介绍松散耦合的系统，以及如何通过演进你的软件和系统设计来实现更高的工程开发速度。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Loosely coupled systems
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 松散耦合的系统
- en: Microservices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务
- en: Evolutionary design
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 演化设计
- en: Event-based architecture
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于事件的架构
- en: Loosely coupled systems
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 松散耦合的系统
- en: All developers that have worked at least once on a tightly coupled, monolithic
    application know the problems it induces. The communication overhead and the meetings
    needed to perform bigger changes. New bugs that occur after fixing a bug in another
    part of the application. Changes that break functionality from other developers.
    All these problems lead to fear of integrating and deploying and slow down developer
    velocity.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所有曾经在紧密耦合的单体应用程序上工作过的开发者都知道它所带来的问题。通信开销以及为了进行更大规模的变更所需的会议。在修复应用程序其他部分的错误后出现的新错误。改变破坏了其他开发者的功能。所有这些问题都会导致对集成和部署的恐惧，从而减慢开发者的工作速度。
- en: 'When designing your system and software, you should focus on the following
    characteristics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计你的系统和软件时，你应该关注以下特性：
- en: '**Deployability**: Can each team release their application independent of other
    applications or teams?'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可部署性**：每个团队是否能够独立于其他应用程序或团队发布他们的应用程序？'
- en: '**Testability**: Can each team do most of their testing without requiring a
    test environment in which multiple independent solutions from other teams must
    be deployed together?'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可测试性**：每个团队是否能够在不需要部署其他团队独立解决方案的测试环境的情况下，完成大部分测试？'
- en: The team size here is a small **two-pizza team** (see [*Chapter 17*](B17827_17_Epub.xhtml#_idTextAnchor342),
    *Empower Your Teams*). If you design your systems for the deployability and testability
    of small teams, it will automatically lead to loosely coupled systems with well-defined
    interfaces.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的团队规模是一个小型的**两比萨团队**（见[*第17章*](B17827_17_Epub.xhtml#_idTextAnchor342)，*赋能你的团队*）。如果你为小团队的可部署性和可测试性设计系统，它将自动导致松散耦合的系统，并具有明确的接口。
- en: Microservices
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务
- en: The most common architectural pattern for loosely coupled systems is the **microservices**
    pattern, *"an approach to developing a single application as a suite of small
    services, each running in its own process and communicating with lightweight mechanisms,
    often an HTTP resource API"* (*Lewis J. & Fowler M., 2014*).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 松散耦合系统最常见的架构模式是**微服务**模式，*“将单个应用程序开发为一组小型服务的方式，每个服务运行在自己的进程中，通过轻量级机制进行通信，通常是一个HTTP资源API”*
    (*Lewis J. & Fowler M., 2014*)。
- en: Microservices evolved out of **Service-Oriented Architecture** (**SOA**) with
    some additional characteristics. Microservices have **decentralized data management**
    – meaning that every service completely owns its own data. Additionally, microservices
    favor lightweight messaging instead of complex protocols or central orchestration
    for interservice communication – **smart endpoints** and **dumb pipes**.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务是从**面向服务架构**（**SOA**）演化而来，并且具备一些额外的特性。微服务具有**去中心化的数据管理**——意味着每个服务完全拥有自己的数据。此外，微服务更倾向于使用轻量级消息传递，而非复杂的协议或中央协调来进行服务间通信——**智能端点**和**愚蠢的管道**。
- en: One important characteristic of microservices is often missed – they are built
    around business capabilities. This also defines how small a service should be.
    To define the scope of your services, you must understand the business domain.
    One microservice matches one **bounded context** in **domain-driven design** (*Eric
    Evans, 2003*).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务的一个重要特点常常被忽视——它们是围绕业务能力构建的。这也定义了一个服务应该有多小。为了定义服务的范围，你必须理解业务领域。一个微服务对应一个**限界上下文**，这是**领域驱动设计**中的概念（*Eric
    Evans，2003*）。
- en: Another characteristic is that microservices are completely and independently
    **deployable** and **testable**. That's the reason why they are associated with
    high engineering velocity.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个特点是，微服务是完全独立且可**部署**和**测试**的。这也是它们与高工程效率相关联的原因。
- en: Microservices have many advantages. They scale very well, as you can scale every
    service independently. They also allow each team to work with its own programming
    languages and data storage solution that best meets its needs. Most importantly,
    they allow teams in big and complex applications to move fast without disrupting
    other teams.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务有许多优势。它们的扩展性非常好，因为你可以独立扩展每个服务。它们还允许每个团队使用最适合其需求的编程语言和数据存储解决方案。最重要的是，它们允许大型和复杂应用中的团队快速行动，而不会干扰其他团队。
- en: But these advantages come with a cost. Microservice-based applications are complex
    and hard to operate and troubleshoot.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但这些优势也伴随着代价。基于微服务的应用程序复杂且难以操作和排除故障。
- en: There are many famous microservice-based solutions – for example, Netflix and
    Amazon. They run world-scale services and have an architecture that allows them
    to deploy thousands of times each day.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多著名的基于微服务的解决方案——例如，Netflix和Amazon。它们运行全球规模的服务，并拥有一种架构，使它们能够每天进行成千上万次的部署。
- en: But there are also many companies that have tried to implement microservices
    and have failed. The number of greenfield projects that fail is especially high.
    The reason for this is often a lack of knowledge of the business domain and the
    wrong definition of the bounded context for each service, especially when the
    application is developed by an external company that has yet to learn the **ubiquitous
    language** of the domain. Another reason is that the complexity of operating the
    service is underestimated.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但也有许多公司尝试实施微服务并失败了。尤其是在绿色领域项目中，失败的比例特别高。其原因通常是对业务领域缺乏了解，并且错误地定义了每个服务的限界上下文，特别是当应用由外部公司开发，而该公司尚未学习业务领域的**通用语言**时。另一个原因是低估了操作服务的复杂性。
- en: So, instead of implementing microservices, you should focus on the **deployability**
    and **testability** characteristics of your architecture and adjust the solution
    design to your needs. The needs are not constant and evolve over time – and so
    should your architecture.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在实现微服务之前，你应该关注架构的**可部署性**和**可测试性**特性，并根据需求调整解决方案设计。需求是不断变化的，架构也应随着时间而演变。
- en: Evolutionary design
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 演化设计
- en: 'The advantages and disadvantages of certain architectural styles shift for
    various reasons. One is the scale of your application. Another is the knowledge
    of your domain and your customers and the ability to operate at scale. Depending
    on these factors, different architectural styles are better suited for you (see
    *Figure 16.1*):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一些架构风格的优劣随着不同原因而发生变化。一个原因是你的应用的规模。另一个原因是你对业务领域和客户的了解，以及在大规模环境中操作的能力。根据这些因素，不同的架构风格可能更适合你（见*图16.1*）：
- en: '![Figure 16.1 – The advantages and disadvantages shift with scale'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.1 – 优势和劣势随着规模的变化而变化'
- en: '](img/B17827_16_001.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_16_001.jpg)'
- en: Figure 16.1 – The advantages and disadvantages shift with scale
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.1 – 优势和劣势随着规模的变化而变化
- en: Constantly adapting your architecture and system design to your current needs
    is called **evolutionary design**. To start a greenfield product, it's best to
    start with a monolithic approach and one team. This allows you to move fast without
    much overhead. If you scale up and learn more about the domain, you can start
    to modularize your application using the capabilities of your programming language.
    At one point, the complexity and scale will be so high that microservices help
    you to keep your product testable and deployable.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 不断根据当前需求调整架构和系统设计被称为**演化设计**。要开始一个新项目，最好从单体架构和一个团队入手。这样可以在不增加太多开销的情况下快速推进。如果你扩展规模并对业务领域有了更多了解，可以开始使用编程语言的功能对应用进行模块化。最终，复杂度和规模会变得非常高，这时微服务能帮助你保持产品的可测试性和可部署性。
- en: The question is this – how do you arrive at the architecture you need from the
    architecture you have? A complete rewrite is very expensive and risky. The better
    approach is to evolve your design. Martin Fowler calls this the **StranglerFigApplication**
    pattern (*Martin Fowler, 2004*). The strangler fig is a plant that seeds in the
    upper branches of a tree and gradually grows its roots downward over the tree
    until it roots in the soil. The supporting tree is strangled and dies at some
    point – leaving an organic structure that supports itself.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是——如何从现有的架构到达所需的架构？完全重写既昂贵又具有风险。更好的方法是逐步演化你的设计。马丁·福勒称之为**缚树应用程序**模式（*马丁·福勒，2004*）。缚树是一种植物，它在树的上部枝干上播种，逐渐将根伸向树下，直到它在土壤中扎根。支持的树被缚死并最终死亡——留下一个有机结构，它能够自我支撑。
- en: Instead of rewriting your application, you grow a new "strangler fig" application
    around it, letting it grow gradually until the old system is strangled and can
    be shut down.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 与其重写应用程序，不如围绕它构建一个新的“缚树”应用程序，逐步让其发展，直到旧系统被“缚死”并可以关闭。
- en: Event-driven architecture
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件驱动架构
- en: There are other architectural styles besides microservices, monolithic, and
    multi-tier applications – for example, **Event-Driven Architecture** (**EDA**).
    EDA is a pattern around the publication, processing, and persistence of events.
    The backbone is a message broker – for example, **Apache Kafka** – and individual
    services or components can publish events (a **publisher**) or subscribe to events
    (a **subscriber**).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 除了微服务、单体应用和多层应用外，还有其他架构风格——例如，**事件驱动架构**（**EDA**）。EDA 是一个围绕事件的发布、处理和持久化的模式。其核心是消息代理——例如，**Apache
    Kafka**——各个服务或组件可以发布事件（**发布者**）或订阅事件（**订阅者**）。
- en: EDA can be a good fit with a microservices-based approach – but it can also
    be used with other architectural styles. It can help you to keep consistency in
    loosely coupled components or services, and it can scale perfectly horizontally
    due to the asynchronous nature of events and is therefore well suited for solutions
    that process big amounts of data in motion, such as IoT solutions that process
    sensor data in near real time.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: EDA 与基于微服务的方法非常契合，但它也可以与其他架构风格一起使用。它可以帮助你保持松耦合组件或服务之间的一致性，并且由于事件的异步特性，它可以完美地水平扩展，因此非常适用于处理大量动态数据的解决方案，例如近实时处理传感器数据的物联网解决方案。
- en: Especially in cloud-native environments, EDA can help you to move fast and to
    build loosely coupled and global scalable solutions in a very short time.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是在云原生环境中，EDA 可以帮助你快速行动，并在非常短的时间内构建松耦合和全球可扩展的解决方案。
- en: One pattern that is often used with EDA is **event sourcing**. Instead of persisting
    entities, event sourcing captures all changes to the application state – including
    the entities – as a sequence of events (see *Martin Fowler, 2005*). To retrieve
    an entity, the application must replay all events to get to the latest state.
    Since events are immutable, this provides a perfect audit trail. You can think
    of the event stream as an immutable stream of facts that can be seen as the single
    source of truth. In addition to auditability, event sourcing has many benefits
    in scalability and testability.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 与 EDA 经常一起使用的一种模式是**事件溯源**。事件溯源并不是持久化实体，而是将应用程序状态的所有变化——包括实体——作为一系列事件进行捕捉（见
    *马丁·福勒，2005*）。为了检索实体，应用程序必须重放所有事件，直到获得最新状态。由于事件是不可变的，这提供了完美的审计追踪。你可以将事件流视为一个不可变的事实流，作为唯一的真实来源。除了可审计性之外，事件溯源在可扩展性和可测试性方面也具有许多优点。
- en: Event sourcing is a suitable pattern if you need to capture intent, purpose,
    or reason for your data, when it's vital to avoid conflicting updates, and when
    you must keep a history and frequently roll back changes. Event sourcing works
    very well together with **Command and Query Responsibility Segregation** (**CQRS**)
    – a pattern that separates read and write operations.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要捕捉数据的意图、目的或原因，或者当避免冲突更新至关重要，并且需要保持历史记录并频繁回滚更改时，事件溯源是一个合适的模式。事件溯源与**命令查询职责分离**（**CQRS**）模式非常契合——该模式将读取和写入操作分离开来。
- en: But be aware that event sourcing is very complex, and modeling a domain in events
    does not come naturally to most developers. If the aforementioned criteria do
    not suit your product, then event sourcing is probably not a good pattern for
    you.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 但请注意，事件溯源是非常复杂的，并且将领域建模为事件并不是大多数开发者的自然方式。如果上述标准不适用于你的产品，那么事件溯源可能不是一个好的模式。
- en: An architectural style that is more suitable for simple domains is the **Web-Queue-Worker**.
    It's a pattern mainly used with serverless PaaS components, and it consists of
    a web frontend that serves client requests and a worker that performs long-running
    tasks in the background. Frontend and backend are stateless and communicate using
    a message queue. The pattern is normally combined with other cloud services such
    as an identity provider, a database, a Redis cache, and a CDN. Web-Queue-Worker
    is a good pattern to get started with cloud-native applications.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 更适合简单领域的架构风格是**Web-Queue-Worker**。这是一种主要与无服务器PaaS组件一起使用的模式，包含一个用于处理客户端请求的Web前端和一个在后台执行长时间运行任务的工作进程。前端和后端是无状态的，并通过消息队列进行通信。该模式通常与其他云服务结合使用，如身份提供者、数据库、Redis缓存和CDN。Web-Queue-Worker是开始构建云原生应用程序的一个不错的模式。
- en: Whatever architectural style you pick, keep it as simple as possible. It's better
    to start simple and evolve your design over time with increasing demands than
    to overengineer and end up with a complex solution that slows you down.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 无论选择哪种架构风格，都应尽量保持简单。最好从简单开始，并随着需求的增加逐步演化设计，而不是过度设计，最终导致一个复杂的解决方案，这样反而会拖慢进度。
- en: Summary
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: If you are adopting CI/CD and DevOps practices but you're not accelerating,
    then you should have a close look at your solution architecture as one of the
    key indicators for engineering velocity. Focus on the deployability and testability
    characteristics rather than on the architectural styles.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在采用CI/CD和DevOps实践，但未能加速进展，那么您应仔细审视您的解决方案架构，因为它是衡量工程速度的关键指标之一。关注可部署性和可测试性特征，而不是架构风格。
- en: In this chapter, I gave you an overview of loosely coupled systems' evolutionary
    design, and I introduced some relevant architectural styles and patterns.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我概述了松耦合系统的进化设计，并介绍了一些相关的架构风格和模式。
- en: In the next chapter, we'll discuss the correlation between your organizational
    structure and your software architecture and how it all comes together in GitHub.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论组织结构与软件架构之间的关联，以及它们如何在GitHub中结合起来。
- en: Further reading
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'These are the references from this chapter that you can also use to get more
    information on the topics:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章中的参考资料，您可以通过它们获得更多关于这些话题的信息：
- en: 'Forsgren N., Humble, J., and Kim, G. (2018). *Accelerate: The Science of Lean
    Software and DevOps: Building and Scaling High Performing Technology Organizations*
    (1st ed.) [E-book]. IT Revolution Press.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Forsgren N., Humble, J., 和 Kim, G. (2018). *加速：精益软件与DevOps的科学：构建与扩展高效能技术组织*
    (第1版) [电子书]. IT Revolution Press.
- en: 'Lewis J. and Fowler M. (2014). *Microservices*: [https://martinfowler.com/articles/microservices.html](https://martinfowler.com/articles/microservices.html).'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Lewis J. 和 Fowler M. (2014). *微服务*: [https://martinfowler.com/articles/microservices.html](https://martinfowler.com/articles/microservices.html).'
- en: 'Eric Evans (2003). *Domain-Driven Design: Tackling Complexity in the Heart
    of Software*. Addison-Wesley Professional.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eric Evans (2003). *领域驱动设计：软件核心复杂性应对*. Addison-Wesley Professional.
- en: 'Martin Fowler (2004). *StranglerFigApplication*: [https://martinfowler.com/bliki/StranglerFigApplication.html](https://martinfowler.com/bliki/StranglerFigApplication.html).'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Martin Fowler (2004). *StranglerFigApplication*: [https://martinfowler.com/bliki/StranglerFigApplication.html](https://martinfowler.com/bliki/StranglerFigApplication.html).'
- en: 'Michael T. Nygard (2017). *Release It!: Design and Deploy Production-Ready
    Software*. Pragmatic Programmers.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Michael T. Nygard (2017). *发布它！：设计与部署生产就绪软件*. Pragmatic Programmers.
- en: 'Martin Fowler (2005). *Event Sourcing*: [https://martinfowler.com/eaaDev/EventSourcing.html](https://martinfowler.com/eaaDev/EventSourcing.html).'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Martin Fowler (2005). *事件溯源*: [https://martinfowler.com/eaaDev/EventSourcing.html](https://martinfowler.com/eaaDev/EventSourcing.html).'
- en: 'Lucas Krause (2015). *Microservices: Patterns and Applications – Designing
    fine-grained services by applying patterns* [Kindle Edition].'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lucas Krause (2015). *微服务：模式与应用——通过应用模式设计细粒度服务* [Kindle版].
