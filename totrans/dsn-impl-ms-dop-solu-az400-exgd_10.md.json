["```\npublic class WorkDivider\n{\n   private readonly IMessageSender _messageSender;\n   public WorkDivider(IMessageSender messageSender)\n   {\n      _messageSender = messageSender;\n   }\n   public void DivideWork(IEnumerable<WorkOrder> workOrders)\n   {\n      foreach(var workOrder in workOrders)\n      {\n         _messageSender.SendMessage(workOrder.GetMessage());\n      }\n   }\n}\n```", "```\n[TestFixture]\npublic class WorkDividerTest\n{\n   private Mock<IMessageSender> _messageSender; \n   private WorkDivider _subject;\n   [SetUp]\n   public void SetUp()\n   {\n      _messageSender = new Mock<IMessageSender>();\n      _subject = new WorkDivider(_messageSender.Object);\n   }\n   [Test] \n   public void\nWhenSendingAnEnumerableOfWorkingOrders_EverOrderIsSendToTheMessageSender()\n   {\n      var workOrder = new WorkOrder();\n      _subject.DivideWork(new[] { workOrder });\n      _messageSender.Verify(x => x.SendMessage(workOrder), Times.Once);\n   }\n}\n```", "```\n[TestFixture]\npublic class MessageSenderTest\n{\n   private MessageSender _messageSender;\n   [SetUp]\n   public void SetUp()\n   {\n      var connectionString = TestContext.Parameters[\"MessageSenderConnectionString\"];\n      _messageSender = new MessageSender(connectionString);\n   }\n}\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RunSettings>\n <TestRunParameters>\n <Parameter name=\"MessageSenderConnectionString\" value=\"secret-value\" />\n </TestRunParameters>\n</RunSettings>\n```", "```\n- task: Npm@0\n  displayName: 'Run unit tests - npm run tests' \n  inputs:\n    cwd: src \n    command: run \n    arguments: test\n```", "```\n- task: PublishTestResults@2 \n  displayName: 'Publish Test Results' \n  inputs:\n    testResultsFiles: '**\\reportTests\\TEST-*.xml' mergeTestResults: true\n  condition: succeededOrFailed()\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RunSettings>\n  <TestRunParameters>\n    <Parameter name=\"MessageSenderConnectionString\" value=\"#{MessageSenderConnectionString}#\" />\n </TestRunParameters>\n</RunSettings>\n```", "```\n- task: qetza.replacetokens.replacetokens-task.replacetokens@3 \n  displayName: 'Replace tokens in pipeline.runsettings' \n  inputs:\n    targetFiles: $(System.DefaultWorkingDirectory)/integrationtests- location/pipeline.runsettings\n```", "```\n    using packtbookslibrary.Shared.Models;\n    using System.Text.Json;\n    namespace packtbookslibrary_api.Services\n    {\n        public interface IBookService\n        {\n            List<Book> GetBooksList();\n        }\n    }\n    ```", "```\n    using packtbookslibrary.Shared.Models;\n    using System.Text.Json;\n    namespace packtbookslibrary_api.Services\n    {\n        public class BookService : IBookService\n        {\n            List<Book> IBookService.GetBooksList()\n            {\n                List<Book> books = new List<Book>();\n                string jsonString = System.IO.File.ReadAllText(\"books-data.json\");\n                books = JsonSerializer.Deserialize<List<Book>>(jsonString);\n                return books;\n            }\n        }\n    }\n    ```", "```\n          private readonly IBookService bookService;\n            List<Book> books = new List<Book>();\n            public BooksController(IBookService bookService)\n            {\n                this.bookService = bookService;\n                books = bookService.GetBooksList();\n                //string jsonString = System.IO.File.ReadAllText(\"books-data.json\");\n                //books = JsonSerializer.Deserialize<List<Book>>(jsonString); \n            }\n            // GET: api/<BooksController>\n            [HttpGet]\n            public IEnumerable<Book> Get()\n            {\n                return books;\n     }\n    ```", "```\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <configuration>\n        <packageSources>\n            <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n             <!-- add an Azure Artifacts feed -->\n               <add key=\"PacktBooksLibraryFeed\" value=\"https://pkgs.dev.azure.com/aurigadev/PacktBookLibrary/_packaging/PacktBooksLibraryFeed/nuget/v3/index.json\" />\n        </packageSources>\n    </configuration>\n    ```", "```\n    # Run your tests\n       task: DotNetCoreCLI@2\n       displayName: 'Run Tests'\n      inputs:\n      command: test\n      projects: '**/*Tests/*.csproj'\n      arguments: '--configuration ${{ parameters.buildConfiguration }}'\n    ```"]