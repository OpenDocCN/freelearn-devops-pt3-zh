- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Monitoring Component Activity and Metrics Through CheckOps in Compass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Compass** allows you and your teams to understand how your software all works
    together. In a distributed software architecture (microservices), there are many
    pieces that all come together to build something of value for your customer. Keeping
    track of all those pieces, and understanding who owns them and how they integrate,
    can be a challenging task. Compass makes it easy for software teams to catalog
    their components and be able to visually monitor their components and pull useful
    metrics.'
  prefs: []
  type: TYPE_NORMAL
- en: First, we’ll set up Compass, a separate Atlassian product that integrates with
    the rest of the Atlassian DevOps tools. Once you have Compass available, you’ll
    create components, manage your team, create views of your software components,
    and create metrics to help your team understand how their software components
    all come together.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter has the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Compass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing distributed architecture components using a CSV file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Compass with Bitbucket Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding configuration as code in Compass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a developer platform with Compass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Measuring DevOps health with Compass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing templates in Compass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing developer CheckOps in Compass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Jira
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Git repository with your team’s components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitbucket Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Compass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Compass is a standalone Atlassian product that you will need to purchase on
    its own. Before you can configure Compass, you will want to make sure that your
    company has a valid subscription to the Compass product.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin with the recipe, we need to get the setup ready by using the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to ([https://www.atlassian.com/try/cloud/signup?bundle=compass](https://www.atlassian.com/try/cloud/signup?bundle=compass)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once there, you’ll want to sign in using your Google email, work email, or any
    other email by clicking on **Sign up** **with email**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If you have used any other Atlassian product such as Jira, Confluence, or Bitbucket,
    you’ll want to use the same account/ID that you use to log in to those products.
    Ideally, you should be using the same Atlassian ID that you have been using in
    the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Atlassian sign-in screen](img/B21937_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – Atlassian sign-in screen
  prefs: []
  type: TYPE_NORMAL
- en: Once you have signed in with your Atlassian ID, you’ll select the site where
    you want to add Compass. You’ll agree to the Atlassian Cloud Terms of Service
    and Privacy Policy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Using Compass for all the examples in this book, you only need the **Free plan**.
    There is no credit card required and if you have three or fewer users, you will
    not have to pay for Compass. You will miss out on some of the features that are
    reserved for the paid tiers, but you will be able to follow along with the rest
    of the book with only the free version.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Get started** to start configuring Compass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Compass Free plan](img/B21937_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – Compass Free plan
  prefs: []
  type: TYPE_NORMAL
- en: After a few moments, Atlassian’s robots are going to deploy your very own instance
    of Compass and you’ll be able to get started with creating your components and
    teams.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before Compass can be a useful tool for your team, you need to populate it with
    components. These components are going to track all the various elements that
    make up your software stack. Components can be libraries, services, applications,
    dependencies, or anything that your product needs from a software perspective.
    Toward the end of this chapter, we have a recipe (*Creating a developer platform
    with Compass*) that covers how Jira and Compass connect to display Compass components
    within Jira. This is all automated by Atlassian and if your components exist within
    Compass, they will automatically be displayed in Jira.
  prefs: []
  type: TYPE_NORMAL
- en: There are two different ways to input components into Compass. You can manually
    create them, which is what we are going to do in this section, or you can import
    them. We are going to discuss importing components in the next section. For now,
    let’s create some components the manual way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these instructions to configure the component catalog within Compass:'
  prefs: []
  type: TYPE_NORMAL
- en: On the navigation bar across the top of Compass, click on the **Create** button.
    This is going to give you the option to create a variety of different elements
    in Compass. For this very first step, we want to select **Component**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Manually creating a new component](img/B21937_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – Manually creating a new component
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Creating a component can be a bit of an art. You have a variety of types to
    choose from that are built into Compass. You’ll want to select the type that best
    describes the component you are trying to create. As discussed in the introduction
    to this section, a component is a piece of your software picture. Since software
    is complex, it is composed of many different components. You want to do your due
    diligence here and capture the components that appropriately describe your software.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click on **Component**, you will be prompted to pick the type of component
    you want to create. Pick from any of the following available options per your
    choice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Service** – An independently deployable software unit, usually operated by
    a person or team'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Library** – A reusable collection of objects, functions, and methods'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application** – A fully-packaged application, such as a mobile application,
    desktop application, or a CLI tool'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Capability** – A higher-level product functionality that an end user understands
    and sees value in'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud resource** – An entity or service provided by a cloud vendor, with
    consumer-managed configuration and monitoring'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data pipeline** – A sequence of tools and processes that gets data from a
    source to a target system'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Machine learning model** – An algorithm that identifies patterns in a set
    of data and makes predictions over it'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UI element** – Reusable building blocks of a design system that together
    create patterns and user experiences'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Website** – One or more web pages under a domain, mainly consisting of read-only
    content'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Other** – A generic software component described as *Other*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows some of the listed options:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.4 – Available component types](img/B21937_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – Available component types
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there is an option for any part of your software. Select the
    type that most appropriately identifies with the component you are trying to capture.
    When first starting out, this may be challenging to do, because you might not
    have all the information captured. This is a good problem to have because part
    of having a healthy software product requires the team to have a 100% mapping
    of how all their software comes together. Having gaps in capturing your components
    can create blindsides that may have detrimental impacts later on in a software
    product’s life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have picked the component type, it is time to name it something.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Naming the new component](img/B21937_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – Naming the new component
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: After you have a suitable name, it is time to give someone ownership of the
    component. One of the most important things about going through this activity
    is that every component should be owned by someone or some team. This isn’t a
    required field, but it’s a field that is highly recommended to have populated.
    Having a team be responsible for a component will give someone ownership of that
    component. They’ll be responsible for knowing their component inside and out.
    When bugs start being discovered, you’ll want to know who owns the component.
    If a component isn’t owned by anyone, that’s okay, you can skip this part, but
    it is highly recommended that you start assigning owners to your components.
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Owner team** for this component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.6 – Owner of the new component](img/B21937_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 – Owner of the new component
  prefs: []
  type: TYPE_NORMAL
- en: Since this is our first component, we may not have any teams just yet, so for
    now, you can skip this part. After we create the teams in a future section, we’ll
    be able to edit the existing components and assign them to the appropriate team.
    Alternatively, you can skip down to the *There’s more…* section and create a team
    before proceeding.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If you or someone else has created a team in Jira or Confluence, those teams
    will be visible in Compass and will be selectable here.
  prefs: []
  type: TYPE_NORMAL
- en: The final piece of information you can provide is a link to the repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.7 – Information about adding source code for a component](img/B21937_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.7 – Information about adding source code for a component
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: This step is optional but it’s recommended that you provide a link to get the
    full effect and power of Compass.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have finished putting in the information for your new component, it
    is time to click on the **Create** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.8 – Confirmation button to create the new component](img/B21937_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.8 – Confirmation button to create the new component
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to create another component at this time, you can also click on
    the **Create another component** checkbox. This will retain the component type
    and **Owner team**, but the **Name** and **Repository** fields will be cleared
    out for your next component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have created your first component, feel free to add the rest of your
    components. If you want to view all the components that you have created so far,
    simply click on the **Components** button in the navigation bar and you’ll be
    redirected to the **Components** page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.9 – Confirmation of the newly created component](img/B21937_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.9 – Confirmation of the newly created component
  prefs: []
  type: TYPE_NORMAL
- en: You have officially created your very first component in Compass! In the next
    section, we will create a team.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have your first component created, a team is needed to continue configuring
    Compass for the first time. In the previous section, you may have skipped adding
    a team to your component if you didn’t already have a team. Let’s look at how
    to create your first team in Compass:'
  prefs: []
  type: TYPE_NORMAL
- en: On the navigation bar across the top of Compass, click on the **Teams** button.
    If you click on the down arrow, this will prompt you to invite people to Compass
    or give you the option to create a team; you can also search for any existing
    teams.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.10 – Team portal within Compass](img/B21937_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.10 – Team portal within Compass
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Inviting people to Compass requires a license. If you click on that button,
    an email is going to be sent to the recipient, but until your Atlassian administrator
    grants a license to that individual, they will not be able to access Compass.
    If you are the Atlassian administrator, you’ll be able to grant a license, but
    most likely, you are not an Atlassian administrator, so this operation will not
    take effect until your Atlassian administrator adds the user themself.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming your team members already have Compass licenses, click on **Create
    a team**. This is going to display a window where you’ll be able to create a team
    and add members to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.11 – Creating a new team](img/B21937_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.11 – Creating a new team
  prefs: []
  type: TYPE_NORMAL
- en: The first thing you want to do here is give your team a name. This can be anything
    you want it to be, but it should be something descriptive that will be obvious
    to anyone else looking at the team names.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have the team name, you need to add people. You can add up to 50 people
    at a time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, you can grant others the ability to join your team without your approval.
    This would not be a good practice and it is entirely up to you whether you leave
    this option enabled or not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **Create a team** button, or hit **Cancel** if you no
    longer want to create a team.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After your team has been created, it will be visible in the **Teams** section
    of Compass. You can get to the **Teams** section by clicking on the **Teams**
    button from the navigation bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.12 – Reviewing the newly created team](img/B21937_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.12 – Reviewing the newly created team
  prefs: []
  type: TYPE_NORMAL
- en: From the **Teams** page, you can also invite people and create additional teams.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The team you just created isn’t just for Compass. This team is available in
    other Atlassian products such as Jira and Confluence. Similarly, if you or someone
    else created a team in Jira or Confluence, then you should expect to see those
    teams in Compass as well.
  prefs: []
  type: TYPE_NORMAL
- en: Importing distributed architecture components using a CSV file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe covers how to quickly import many components all at the same time
    by using a CSV file. This is much better than manually creating components as
    most teams will have dozens, if not hundreds of components that need to be tracked
    in Compass.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Manually importing every component for your software is going to take a very
    long time. Fortunately, there is a way to import your components using a CSV file.
    At a minimum, your CSV file will require two important columns of information.
  prefs: []
  type: TYPE_NORMAL
- en: 'The required data is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Column name** | **Required input** |'
  prefs: []
  type: TYPE_TB
- en: '| **Name** | Any name you want |'
  prefs: []
  type: TYPE_TB
- en: '| **type** | `SERVICE`, `LIBRARY`, `APPLICATION`, `CAPABILITY`, `CLOUD_RESOURCE`,
    `DATA_PIPELINE`, `MACHINE_LEARNING_MODEL`, `UI_ELEMENT,` `WEBSITE`, `OTHER` |'
  prefs: []
  type: TYPE_TB
- en: Table 11.1 – Required data
  prefs: []
  type: TYPE_NORMAL
- en: There are many other fields/columns that you can include with your import, but
    they aren’t required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a list showing what those optional field/column names include:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Life** **cycle stage** | `Pre-release`, `Active`, `Deprecated` |'
  prefs: []
  type: TYPE_TB
- en: '| **tier** | `1`, `2`, `3`, `4` |'
  prefs: []
  type: TYPE_TB
- en: '| **description** | Description of what the component is |'
  prefs: []
  type: TYPE_TB
- en: '| **labels** | Any additional helpful information to categorize the component
    |'
  prefs: []
  type: TYPE_TB
- en: '| **owner team** | Any team you want, following special guidance covered in
    the next section |'
  prefs: []
  type: TYPE_TB
- en: '| **repository** | The repository where the component is |'
  prefs: []
  type: TYPE_TB
- en: '| **chat channels** | Information on any chat channels that may involve the
    component |'
  prefs: []
  type: TYPE_TB
- en: '| **projects** | The Jira project that references/utilizes the component |'
  prefs: []
  type: TYPE_TB
- en: '| **documentation** | Confluence documentation for the component |'
  prefs: []
  type: TYPE_TB
- en: '| **dashboards** | Links to any dashboards that reference the component |'
  prefs: []
  type: TYPE_TB
- en: '| **on-call schedules** | Links to any on-call schedules for the team responsible
    for the component |'
  prefs: []
  type: TYPE_TB
- en: '| **other links** | Anything you want |'
  prefs: []
  type: TYPE_TB
- en: '| **Custom Fields** | Anything you want, but needs to start with `custom:`
    |'
  prefs: []
  type: TYPE_TB
- en: Table 11.2 – Optional CSV fields/columns
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important thing for your CSV file is to have the header row correct.
    Each value in the header row should correspond to one of the aforementioned fields.
    Keep in mind that all the values in the header row should be lowercase, such as
    in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.13 – Header column example](img/B21937_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.13 – Header column example
  prefs: []
  type: TYPE_NORMAL
- en: With the prerequisites known to us, let’s get to the practical part.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since we will assign the components to an owner team, we’ll need to get the
    team’s ID before proceeding. We will use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In Compass, click on the **Teams** button and select the team you want.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the team has been selected, you’ll be redirected to the team’s page where
    you’ll be able to click on **…** to obtain the owner ID. Click on **Copy** **owner
    ID**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.14 – Selecting the team to obtain the owner ID](img/B21937_11_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.14 – Selecting the team to obtain the owner ID
  prefs: []
  type: TYPE_NORMAL
- en: With the owner ID in hand, it’s time to start populating our `CSV` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.15 – Populating the CSV file with the owner ID](img/B21937_11_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.15 – Populating the CSV file with the owner ID
  prefs: []
  type: TYPE_NORMAL
- en: Once you are done capturing all your components, save your file as a CSV. Keep
    in mind that you can only import up to 500 components in each file. If you have
    more than that, you’ll have to split your CSV into multiple files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.16 – Saving the CSV file](img/B21937_11_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.16 – Saving the CSV file
  prefs: []
  type: TYPE_NORMAL
- en: In Compass, click on the **Create** button and select **Import components**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.17 – Importing the components](img/B21937_11_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.17 – Importing the components
  prefs: []
  type: TYPE_NORMAL
- en: When the next window appears, scroll all the way to the bottom and click on
    **Import** on the right of the **CSV** **file** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.18 – Importing the CSV file](img/B21937_11_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.18 – Importing the CSV file
  prefs: []
  type: TYPE_NORMAL
- en: Upload your file by dragging it to the **Upload** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.19 – Uploading the CSV file](img/B21937_11_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.19 – Uploading the CSV file
  prefs: []
  type: TYPE_NORMAL
- en: If your CSV file is not in the correct format, the review will not pass. In
    that case, I recommend you download the sample CSV file from the previous screen.
    If you get all green checkmarks, then you can proceed to the next step by clicking
    on the blue **Review** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.20 – CSV file validation](img/B21937_11_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.20 – CSV file validation
  prefs: []
  type: TYPE_NORMAL
- en: The **Review** step will analyze your file and determine how many components
    are going to be imported. Click on the blue **Create** button to proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.21 – Reviewing the components](img/B21937_11_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.21 – Reviewing the components
  prefs: []
  type: TYPE_NORMAL
- en: Compass will take a few seconds to import your components and then you’ll be
    able to view your newly created components after the import is complete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **View components** and you’ll be able to see all your components and
    verify that the information was imported correctly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.22 – Verifying the components in Compass](img/B21937_11_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.22 – Verifying the components in Compass
  prefs: []
  type: TYPE_NORMAL
- en: Now that your components have all been imported into Compass, it is time to
    learn how to create even more dynamic components.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Compass with Bitbucket Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the advantages of using Compass is that it connects with Bitbucket Cloud.
    This connection will allow Compass to communicate with Bitbucket and utilize Bitbucket
    as a single source of truth for your component data. You will need to have an
    existing Bitbucket repository, which will be used to integrate with Compass.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Compass, you will establish a connection between your Git repository and
    Compass using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In Compass, click on **Apps**, located on the navigation bar. This will open
    a screen where all the apps that you can integrate with Compass are available.
    Select Bitbucket by clicking **Install** within the **Bitbucket** tile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.23 – Selecting the Bitbucket tile](img/B21937_11_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.23 – Selecting the Bitbucket tile
  prefs: []
  type: TYPE_NORMAL
- en: The installation should only take a few seconds. After it has been installed,
    the Bitbucket tile will now allow you to configure (or uninstall). Click on the
    **Configure** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.24 – Clicking on Configure](img/B21937_11_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.24 – Clicking on Configure
  prefs: []
  type: TYPE_NORMAL
- en: On the configuration screen, click on **Connect** **to Bitbucket**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.25 – Connecting to Bitbucket](img/B21937_11_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.25 – Connecting to Bitbucket
  prefs: []
  type: TYPE_NORMAL
- en: Click on the yellow **Continue** button when the popup appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.26 – Bitbucket authorization](img/B21937_11_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.26 – Bitbucket authorization
  prefs: []
  type: TYPE_NORMAL
- en: On the following screen, select the Bitbucket workspace you want to connect
    with and then click on **Grant access**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.27 – Granting Bitbucket access to Compass](img/B21937_11_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.27 – Granting Bitbucket access to Compass
  prefs: []
  type: TYPE_NORMAL
- en: Once your workspace has been connected, you then need to select the repository
    that will contain your component data. Click on the blue **Select** **repositories**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.28 – Selecting the Bitbucket repository](img/B21937_11_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.28 – Selecting the Bitbucket repository
  prefs: []
  type: TYPE_NORMAL
- en: Compass will show you the repositories available in your workspace and you just
    need to select them. Choose the component type in the repository and then click
    on the blue **Select** button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.29 – Bitbucket repository selection](img/B21937_11_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.29 – Bitbucket repository selection
  prefs: []
  type: TYPE_NORMAL
- en: Select the checkbox for **Set up configuration files for all repositories**
    **during import**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.30 – Setting up configuration files during import](img/B21937_11_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.30 – Setting up configuration files during import
  prefs: []
  type: TYPE_NORMAL
- en: 'This is going to add the `compass.yml` file to each repository, which is critical
    for Compass to utilize Bitbucket as the single source of truth for your component
    metadata. Once you have made your selections, you will see the following screen,
    which will then prompt you to start the import process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.31 – Starting the Bitbucket import process](img/B21937_11_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.31 – Starting the Bitbucket import process
  prefs: []
  type: TYPE_NORMAL
- en: Click on the blue **Start import** button and you will be notified with **Import
    completed**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Done** when you are finished connecting Bitbucket with Compass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have successfully integrated Bitbucket Cloud with Compass.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding configuration as code in Compass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous two recipes (*Configuring Compass* and *Importing distributed
    architecture components using a CSV file*), you learned how to manually create
    and import components. Both methods require a lot of user input and can be prone
    to errors. Not only that, but if your component data changes in your repository,
    someone needs to go into Compass and update the component data there. A better
    way would be to have the code in your repository update the component information.
    This can be achieved by utilizing **configuration as** **code** (**CaC**).
  prefs: []
  type: TYPE_NORMAL
- en: Once you connect your Bitbucket repository with Compass, you’ll be able to use
    a special YAML file for each of your components. This YAML file exists for each
    component within your code repository and, best of all, it is version-controlled.
    Instead of having to update Compass manually or via CSV files, you’ll simply be
    able to manage all your component data within your code repository and Compass
    will take care of the rest.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In your code repository, identify the `compass.yml` file. You’ll be providing
    your component metadata here, which will then make this component(s) a managed
    component within Compass, which basically means that the data will come from the
    `.yml` file and not manually from Compass.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example will be for a single component that is tracked in your
    Bitbucket repository using the `compass.yml` file for that component. Each component
    will need its own `compass.yml` file. Make sure that each unique `compass.yml`
    file for each unique component is in its own subfolder within your code repository.
    Let’s use the following steps for it:'
  prefs: []
  type: TYPE_NORMAL
- en: Within your code repository, find or create the `compass.yml` file. The following
    is the sample `compass.yml` file that is created when Bitbucket is connected with
    Compass. If you have not completed this connection, skip down the *Integrating
    Compass with Bitbucket* *Cloud* section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.32 – compass.yml example](img/B21937_11_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.32 – compass.yml example
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You still need to create the component in Compass. Once the component is created,
    you will be able to retrieve the unique ID for the component, which will then
    be used by the `compass.yml` file to manage the component’s metadata. Bitbucket
    will create a component for you when you connect the repository to Compass, but
    if you want to track/add multiple components, you are either going to need multiple
    repositories or you’ll want to manually create the components in Compass and then
    reference them in multiple `compass.yml` files, sprinkled as appropriate in your
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: In the following points, we are first going to break down and explain the contents
    of this file and then we are going to commit it to Bitbucket, which will then
    push the data to Compass as a managed component.
  prefs: []
  type: TYPE_NORMAL
- en: '`id` (required): This is the unique identifier that Compass uses to track your
    component. Obtain the ID by clicking into the component within the component’s
    catalog in Compass and clicking on **Copy** **component ID**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.33 – Obtaining the component ID](img/B21937_11_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.33 – Obtaining the component ID
  prefs: []
  type: TYPE_NORMAL
- en: '`name` (required): This is going to be the name of your component. This should
    match what you have in Compass.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`description` (optional): This is the description of what your component does/is.
    If you want to write multiple lines to describe your component, you need to start
    the description with the text `|-`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ownerId` (optional): If you want to assign the component to a team, you will
    need to retrieve the value from Compass, find the team that should own the component,
    and click on **Copy** **owner ID**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.34 – Assigning the component to a team](img/B21937_11_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.34 – Assigning the component to a team
  prefs: []
  type: TYPE_NORMAL
- en: '`configVersion` (optional): Leave this as `1`, as that is the only value you
    can provide.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`typeID` (required): This needs to match with the available component types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`APPLICATION`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SERVICE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CAPABILITY`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CLOUD_RESOURCE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DATA_PIPELINE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LIBRARY`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MACHINE_LEARNING_MODEL`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OTHER`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UI_ELEMENT`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WEBSITE`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of the fields are completely optional and you can read Atlassian’s
    documentation if you want to populate them (*E*).
  prefs: []
  type: TYPE_NORMAL
- en: Once you have your file updated, all you need to do is commit your changes in
    Bitbucket by clicking on the **Commit** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.35 – compass.yml commit example](img/B21937_11_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.35 – compass.yml commit example
  prefs: []
  type: TYPE_NORMAL
- en: You’ll see the details of your changes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.36 – Commit example](img/B21937_11_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.36 – Commit example
  prefs: []
  type: TYPE_NORMAL
- en: Next, create a pull request to bring your changes back to the **master** or
    **develop** branch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.37 – compass.yml pull request example](img/B21937_11_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.37 – compass.yml pull request example
  prefs: []
  type: TYPE_NORMAL
- en: Approve and merge the pull request using your typical pull request process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back in Compass, for your managed component, you’ll see the updated information.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.38 – Component confirmation in Compass](img/B21937_11_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.38 – Component confirmation in Compass
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if you created your component in the Compass UI and you wish to minimize
    the level of effort it takes to create your `compass.yml` file, go to the component
    within the Compass UI and select **Config-as-code** from the left-hand side of
    the selected component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.39 – compass.yml pull request example](img/B21937_11_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.39 – compass.yml pull request example
  prefs: []
  type: TYPE_NORMAL
- en: You’ll be able to download the `compass.yml` file that you can then utilize
    in your Bitbucket repository.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.40 – Config-as-code example](img/B21937_11_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.40 – Config-as-code example
  prefs: []
  type: TYPE_NORMAL
- en: This is ultimately the best way to manage and track your components within Compass.
    Since Compass components should represent the subsystems within your code, it
    makes sense to embed this `.yaml` file into your code base.
  prefs: []
  type: TYPE_NORMAL
- en: Now that all your components are in Compass, it is time to start leveraging
    Compass to ensure your components are up-to-date and in good working condition.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a developer platform with Compass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Compass is designed to help you gain an entirely new appreciation of how all
    your code is connected. With all the components in Compass, it is time to build
    a developer platform. This platform is going to give you a unified view of all
    your components, libraries, services, applications, and documentation, and the
    health and status of whatever you track within Compass.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we want to do is connect components that are related and highlight
    their dependencies. These dependencies will show what other components a specific
    component relies on. Having this mapped out in Compass is crucial to understanding
    how your software architecture works. Understanding these relationships enables
    your team to have a better understanding of how components rely on each other
    to make your software work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use the following steps to create these dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Components** in the Compass header and select the component that
    you want to add a dependency to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.41 – Selecting from an existing component](img/B21937_11_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.41 – Selecting from an existing component
  prefs: []
  type: TYPE_NORMAL
- en: On the left-hand side, click on **Dependencies**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.42 – Selected component details](img/B21937_11_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.42 – Selected component details
  prefs: []
  type: TYPE_NORMAL
- en: In the drop-down box/field for **Depends on**, select the component that your
    selected components depend on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.43 – Selecting component dependency](img/B21937_11_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.43 – Selecting component dependency
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Add dependency**, and you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.44 – Adding component dependency](img/B21937_11_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.44 – Adding component dependency
  prefs: []
  type: TYPE_NORMAL
- en: From there, add as many dependencies as you need to appropriately map out how
    your components are connected to each other.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Compass allows you to view your dependencies in a list or map view. This will
    allow you to visualize any circular dependencies that may exist within your components.
    Also, please keep in mind that Compass allows a component to have a maximum of
    25 dependencies. A maximum of 100 other components can depend on a single component.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Compass has a built-in functionality that allows you to make announcements about
    any component in your Compass catalog. This is extremely helpful as teams can
    stay up-to-date about what is going on with the components that are important
    to them.
  prefs: []
  type: TYPE_NORMAL
- en: Compass includes a feature that lets you create announcements for any component
    in your Compass catalog. This is useful for keeping teams informed about important
    component updates.
  prefs: []
  type: TYPE_NORMAL
- en: 'To share relevant information with your team about a specific component, follow
    these steps to create an announcement in Compass:'
  prefs: []
  type: TYPE_NORMAL
- en: Select a component and then click on **Announcements**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.45 – Making an announcement selection](img/B21937_11_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.45 – Making an announcement selection
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Create announcement**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.46 – Creating an announcement](img/B21937_11_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.46 – Creating an announcement
  prefs: []
  type: TYPE_NORMAL
- en: Provide a name and target date for your announcement. Optionally, you can also
    provide a description. Then, click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.47 – Announcement creation example](img/B21937_11_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.47 – Announcement creation example
  prefs: []
  type: TYPE_NORMAL
- en: Your announcement will now be viewable for this component. Any components that
    depend on this specific component will also be able to see the announcement. Also,
    team members will receive an email notification and see a notification badge within
    the Compass UI indicating that an announcement is available.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.48 – Announcement review example](img/B21937_11_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.48 – Announcement review example
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe has a few more elements that you should consider.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring component activity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Activity** page will show you what is going on with a component. In the
    Activity page, you can visualize deployments, incidents, flags, and any alerts
    that are associated with the selected component. This view will give you a real-time
    understanding of what condition a component is in. If the components are connected
    together via their dependencies, you can see that information as well.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.49 – Component activity monitoring](img/B21937_11_49.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.49 – Component activity monitoring
  prefs: []
  type: TYPE_NORMAL
- en: Connecting with Jira
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Jira can also connect with Compass, and you can visualize Compass data within
    Jira and vice versa. There used to be two different ways to connect Compass components
    with Jira. One was introduced in 2022\. Users wanting to integrate Compass with
    Jira needed to enable a custom field within Jira that would pull in the components
    from Compass. That field and method were deprecated on May 31, 2024\. As a result,
    the following steps are the best way to ensure that your Compass components can
    be used within Jira:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to your Jira project and click on **Components** (please note that this works
    in company-managed projects only).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.50 – Selecting components from a company-managed Jira project](img/B21937_11_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.50 – Selecting components from a company-managed Jira project
  prefs: []
  type: TYPE_NORMAL
- en: Once in the **Components** section, you’ll see that Jira is automatically connected
    with Compass. Click on **Go** **to issues**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.51 – Components menu when Jira and Compass are connected](img/B21937_11_51.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.51 – Components menu when Jira and Compass are connected
  prefs: []
  type: TYPE_NORMAL
- en: Pick any issue and click on the **Components** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.52 – Component field in Jira](img/B21937_11_52.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.52 – Component field in Jira
  prefs: []
  type: TYPE_NORMAL
- en: In the drop-down box/field, you will now see the components that exist in Compass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.53 – Compass components in Jira](img/B21937_11_53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.53 – Compass components in Jira
  prefs: []
  type: TYPE_NORMAL
- en: Connecting Jira with Compass allows your teams to be much more efficient and
    the best part is that you do not need to duplicate data. Instead of having to
    recreate all your components again in Jira, your team can leverage the same Compass
    components within Jira. If you use the Jira-only components, you will need to
    recreate those components in Compass. This will allow Jira to have the latest
    and most up-to-date components that are pulled in from Compass.
  prefs: []
  type: TYPE_NORMAL
- en: Measuring DevOps health with Compass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Connecting your components with Compass and mapping out their dependencies is
    great, but even all of that does not give you a full picture of the health and
    status of your components. With Compass, you can create scorecards to help visualize
    how components are doing.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Compass comes with a couple of scorecards out of the box. Those scorecards
    might be all you need, but in case you need additional scorecards, it is very
    easy to create them. Let’s use the following steps to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: In the navigation bar within Compass, click on **Health**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.54 – Health button to get to the scorecards](img/B21937_11_54.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.54 – Health button to get to the scorecards
  prefs: []
  type: TYPE_NORMAL
- en: Once there, you’ll be able to see the existing scorecards.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.55 – Compass scorecards](img/B21937_11_55.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.55 – Compass scorecards
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Create scorecard** in the upper-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.56 – Compass’s menu option to create a scorecard](img/B21937_11_56.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.56 – Compass’s menu option to create a scorecard
  prefs: []
  type: TYPE_NORMAL
- en: This will present you with a modal that will allow you to create your scorecard.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.57 – Modal to create a scorecard](img/B21937_11_57.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.57 – Modal to create a scorecard
  prefs: []
  type: TYPE_NORMAL
- en: Provide a name, description, and owner, then select your component types and
    how the scorecard should be applied. Click **Next** to proceed.
  prefs: []
  type: TYPE_NORMAL
- en: In the next screen, you will select metadata from the component to help you
    build out the criteria that will let your team determine how healthy the component
    is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.58 – Selecting metrics to be displayed in the scorecard](img/B21937_11_58.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.58 – Selecting metrics to be displayed in the scorecard
  prefs: []
  type: TYPE_NORMAL
- en: As you build out your scorecard, you get to pick the **Criterion type**. Your
    options are **Field** or **Metric**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.59 – Selecting your criterion type](img/B21937_11_59.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.59 – Selecting your criterion type
  prefs: []
  type: TYPE_NORMAL
- en: After that, you get to pick the **Field** or **Metric** that will be used as
    the criterion.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you pick your weight for your criterion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'Repeat steps 4 and 5 for all the criteria that you want to create for your
    scorecard. All your criteria must equal a 100% weight distribution. When you are
    done, your scorecard will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.60 – Completing the criteria before creating a scorecard](img/B21937_11_60.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.60 – Completing the criteria before creating a scorecard
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create** when you are done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back in your component, you will be able to see that the scorecard has been
    applied to your component based on how you configured your scorecard.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.61 – Scorecard values in Compass](img/B21937_11_61.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.61 – Scorecard values in Compass
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with all the different criteria available to you. Building these
    scorecards is what sets Compass apart from the rest of the Atlassian products.
    As your teams utilize the components in their code, the scorecards keep track
    of key metrics to help you all understand the health and status of your code.
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing templates in Compass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Templates** in Compass allow you to create boilerplate pieces of code that
    help streamline your software development process. These templates become components
    in Compass and can be reused as appropriate throughout your software stack. If
    your team is repeatedly having to create similar code or configurations, templates
    can really help your team be more efficient. Your team’s code quality can also
    improve through the use of templates as you’ll always have a solid foundation
    to get started with. These templates that you’ll learn how to create don’t have
    to be components; they can be any useful pieces of code that your team depends
    on frequently.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step in utilizing templates is to connect Compass with Bitbucket.
    Refer to the *Integrating Compass with Bitbucket Cloud* recipe if you have not
    already connected Bitbucket with Compass.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your repository is connected with Compass, it’s time to create your first
    template. Let’s do it using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the navigation bar within Compass, click on **Templates**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.62 – Templates in Compass](img/B21937_11_62.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.62 – Templates in Compass
  prefs: []
  type: TYPE_NORMAL
- en: Assuming this is the first time you create a template, you should see a blue
    button that prompts you to create your first template. Click on it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.63 – Creating templates in Compass](img/B21937_11_63.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.63 – Creating templates in Compass
  prefs: []
  type: TYPE_NORMAL
- en: Fill out the information, which looks exactly like when you are creating a new
    component manually.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.64 – Template creation information](img/B21937_11_64.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.64 – Template creation information
  prefs: []
  type: TYPE_NORMAL
- en: 'The only major difference is that when creating a template, you are required
    to provide a link to a repository. This can be any repository in your source code
    repository, but it needs to be connected with Compass, which is configured in
    the final recipe. When you create a template, your base repository is going to
    be forked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.65 – Selecting the owner and repository link](img/B21937_11_65.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.65 – Selecting the owner and repository link
  prefs: []
  type: TYPE_NORMAL
- en: Fill out all the information and click the blue **Next** button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.66 – Completing the template creation information](img/B21937_11_66.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.66 – Completing the template creation information
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, you can provide a webhook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.67 – Adding an optional webhook and parameters](img/B21937_11_67.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.67 – Adding an optional webhook and parameters
  prefs: []
  type: TYPE_NORMAL
- en: Review your new template and click on **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.68 – Reviewing template information](img/B21937_11_68.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.68 – Reviewing template information
  prefs: []
  type: TYPE_NORMAL
- en: Your newly created template will now be available in your component catalog.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing developer CheckOps in Compass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**CheckOps** is an activity that teams that own the various components of their
    software systems perform to evaluate the health and status of their components.
    It is recommended to conduct a CheckOps at least once a week, but it is up to
    the individual teams to determine what works for them. At the very least, a CheckOps
    should be performed at the end of each software development sprint. Conducting
    a CheckOps allows teams to review scorecards and the overall health of the component(s)
    that are assigned to them. If a component is failing, then via the weekly CheckOps,
    the team can figure out a plan to address the failure and bring the component
    back to a healthy scorecard.'
  prefs: []
  type: TYPE_NORMAL
- en: Conducting a regular CheckOps is a good idea because it allows teams to continuously
    monitor how the components they are responsible for are performing. Far too often,
    teams add components into Compass but then do not keep up with the components’
    health and status. Allowing for a component to fall behind or degrade in service/reliability
    can lead to significant software troubles later. Conducting the weekly CheckOps
    allows teams to consistently review key metrics and adjust on demand, as opposed
    to waiting until something catastrophic happens to their software. Identifying
    and addressing issues with a component early and often makes it so that software
    is of higher quality with fewer issues downstream.
  prefs: []
  type: TYPE_NORMAL
- en: Performing a weekly CheckOps is very simple and straightforward. It is all handled
    within the Compass application and each team can conduct their own CheckOps based
    on the components that are assigned to them. If components are not assigned to
    a team, then it is recommended that the component catalog be reviewed and a team
    assigned to each component as appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: Up next, we’ll walk you through the steps you need to follow in preparation
    for conducting your very first CheckOps.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to configure Compass correctly so that your team
    will be able to conduct a weekly CheckOps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Compass navigation bar, go to the **Teams** section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.69 – Selecting Teams from Compass navigation](img/B21937_11_69.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.69 – Selecting Teams from Compass navigation
  prefs: []
  type: TYPE_NORMAL
- en: Select your team by clicking on a team from the available teams.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.70 – Selecting a team from the available list of teams](img/B21937_11_70.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.70 – Selecting a team from the available list of teams
  prefs: []
  type: TYPE_NORMAL
- en: Once you select your team, on the left navigation, select **CheckOps**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.71 – Selecting CheckOps once a team has been selected](img/B21937_11_71.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.71 – Selecting CheckOps once a team has been selected
  prefs: []
  type: TYPE_NORMAL
- en: Since this will be your very first CheckOps, you’ll be able to click on the
    blue **Start CheckOps** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.72 – Dashboard in Compass to initiate a CheckOps](img/B21937_11_72.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.72 – Dashboard in Compass to initiate a CheckOps
  prefs: []
  type: TYPE_NORMAL
- en: This will redirect you to the **Health Details** where you’ll be able to conduct
    your weekly CheckOps, which is covered in the next subsection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before you conduct your very first CheckOps, here are a few things for you
    to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: Gain a comprehensive understanding of how your components both impact and are
    impacted by other elements within your software architecture.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Record any incidents or anomalies that you may have encountered leading up to
    your very first CheckOps. You’ll want to record these weekly as you prepare to
    conduct your CheckOps every week.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand the service-level objectives for your component. What are the expectations
    that your stakeholders have for your specific component? You’ll want to review
    this weekly to ensure that your component is meeting expectations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine a weekly cadence for your team. Every week, at the same time, your
    team should come together to conduct its weekly CheckOps. This should be treated
    similarly to any sprint planning, daily scrum, sprint reviews, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you have selected your team and initiated a CheckOps, it is time to
    learn how to conduct the weekly CheckOps meeting.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a lot more to cover, and this section will break down how you should
    handle your weekly CheckOps meeting.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: As your team prepares for its weekly CheckOps, special attention should be paid
    to any component that has a scorecard indicating that the component needs some
    attention. Once you have that information and you have done some analysis/investigation
    into the root cause, it is time to conduct your weekly CheckOps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Within the **Health details** page, you will want to focus on the **CheckOps**
    section in the far-right pane within the Compass UI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.73 – CheckOps UI within Compass](img/B21937_11_73.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.73 – CheckOps UI within Compass
  prefs: []
  type: TYPE_NORMAL
- en: Starting with **Mood**, address how your team is feeling that week? This should
    be with respect to the operational aspect of its components. Are the components
    behaving as expected, or were there multiple issues that were experienced since
    the last CheckOps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The team can choose from the available moods, which include the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Amazing**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Good**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Okay**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bad**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Horrible**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 11.74 – Team mood selection](img/B21937_11_74.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.74 – Team mood selection
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, there are three different reflection sections that your team will fill
    out together. These reflection questions are very similar to those from a traditional
    sprint retrospective. Let’s discuss what kind of information your team should
    be providing for each section. You will see the following labels:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**What** **went well?**'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Talk about the positive things that went well for your components this past
    week. Sometimes, this feels like you are bragging a little bit, but it is very
    important that you capture the victories that your team had. It helps build a
    reputation and gives your team the positive reinforcement needed to keep moving
    in the right direction. Highlight any components that are doing extraordinarily
    well. Talk about all the positive things that went well and what the team/customer
    gained because of the items that went well.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.75 – What went well? question](img/B21937_11_75.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.75 – What went well? question
  prefs: []
  type: TYPE_NORMAL
- en: '**What could have** **gone better?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is always some room for improvement. In this reflection question, your
    team should focus on identifying items that maybe went well but could be improved.
    More commonly, you should capture minor problems and setbacks that the team encountered
    but was able to fix or resolve quickly. This is a good opportunity to find annoyances
    with the components and figure out ways to eliminate them. No idea is a bad idea
    and the team should be encouraged to surface its ideas for improvements. This
    often requires the team to have a high level of trust and a healthy team environment
    where ideas can be freely discussed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.76 – What could have gone better? question](img/B21937_11_76.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.76 – What could have gone better? question
  prefs: []
  type: TYPE_NORMAL
- en: '**How can** **we improve?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last reflection question gives your team the ability to really think about
    how things can be better. This is similar to the previous reflection point, but
    this time, think about anything that needs some improvement. The improvements
    do not have to be technical, either. Maybe the team needs to improve its documentation
    or dependencies. Your team should be forward-looking, identifying opportunities
    where it can better support its components, while also finding ways to increase
    the quality of the components it is responsible for.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.77 – How can we improve? question](img/B21937_11_77.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.77 – How can we improve? question
  prefs: []
  type: TYPE_NORMAL
- en: The final step of the weekly CheckOps process is to capture any action items
    that the team needs to take within the next week or two. These action items should
    be reviewed every week to ensure that the team is actively working toward closing
    them out. Capture as many actions as the team discovers during its CheckOps. Unlike
    in Confluence, where you can assign the action item to an individual, the team
    will have to be more diligent and responsible when it comes to closing out items.
    You also cannot add due dates to these action items, as you can in Confluence,
    and the action items are not connected to Jira either.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.78 – Action items from performing CheckOps](img/B21937_11_78.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.78 – Action items from performing CheckOps
  prefs: []
  type: TYPE_NORMAL
- en: Once you are finished capturing all the information, you can click on the **Finish**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have finished your CheckOps, you can always review it and any previous
    CheckOps within your team’s CheckOps dashboard, which you can access by clicking
    on **CheckOps** in the left navigation of your team’s profile in Compass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.79 – Reviewing the previous team CheckOps](img/B21937_11_79.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.79 – Reviewing the previous team CheckOps
  prefs: []
  type: TYPE_NORMAL
- en: From here, you edit your CheckOps by clicking on the ellipsis next to the date
    of the CheckOps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.80 – Editing a previous CheckOps](img/B21937_11_80.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.80 – Editing a previous CheckOps
  prefs: []
  type: TYPE_NORMAL
- en: You also have the ability to close out your actions from this view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.81 – Closing out previous actions](img/B21937_11_81.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.81 – Closing out previous actions
  prefs: []
  type: TYPE_NORMAL
- en: Finally, on the overview page for your team, any outstanding action items that
    were captured during a CheckOps session will be displayed, allowing your team
    to be reminded and hopefully encouraged to act on those outstanding items.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.82 – CheckOps at-a-glance action review](img/B21937_11_82.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.82 – CheckOps at-a-glance action review
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to conduct your weekly CheckOps, in the next section,
    we’ll discuss some best practices to make sure you and your team are getting the
    most out of your CheckOps sessions.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Performing a weekly CheckOps is an easy thing to do, but there are a few recommendations
    that will help boost the effectiveness of your weekly CheckOps. These are the
    *CheckOps best practices*. By following these recommendations, you can help your
    team maximize the value the team and the rest of your company get from the weekly
    CheckOps.
  prefs: []
  type: TYPE_NORMAL
- en: Consistency
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not skip your weekly CheckOps. Sometimes your team might not have much time,
    or there may be times when the scorecards are all green. Even if everything is
    going well, build the habit of always running your weekly CheckOps at the same
    time every week. If there is a holiday, make sure you schedule around the holiday.
    Building the habit of always running your CheckOps meeting will ensure that your
    team treats it as a high-priority item. Then, whenever something goes wrong, your
    team will already have the muscle memory of knowing how to run CheckOps sessions
    and will be able to focus on the critical issues as opposed to figuring out how
    to conduct the meeting.
  prefs: []
  type: TYPE_NORMAL
- en: Scorecard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Continuously review your scorecard and the metrics that make up your scorecard.
    Your scorecard is one key indicator that influences what items are discussed during
    the weekly CheckOps. If the scorecard is always showing positive results, but
    deep down, something is not working at the software level, review the items that
    feed into your scorecard. Make sure that they are accurate and that they appropriately
    tell you what is happening at the software level. Make the appropriate adjustments
    to your metrics that drive your scorecards to ensure that your component health
    reflects the most accurate data possible. This will help you have the best weekly
    CheckOps because you’ll have the most accurate and relevant data to help drive
    discussions, decisions, and any actions that need to happen.
  prefs: []
  type: TYPE_NORMAL
- en: Follow through
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The final recommendation is to ensure that your team always follows through
    on your actions. Technical debt builds up real fast if you ignore problems. You
    do not have to act right away, but every action that is captured during your weekly
    CheckOps sessions should be addressed before your team gets together again for
    the next CheckOps session. Failure to act is only going to result in bad metrics
    becoming even worse over time. An added benefit of following through and acting
    on the actions is that the team will observe that the actions are being resolved.
    This will encourage them to identify more inefficiencies and problems with the
    hopes that they too will be addressed.
  prefs: []
  type: TYPE_NORMAL
