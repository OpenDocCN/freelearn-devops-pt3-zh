["```\ngit clone git@gitlab.com:acme-software/hats-for-cats.git\n```", "```\n~$ cd hats-for-cats\n~/hats-for-cats$ ls\nREADME.md\n```", "```\ngit branch add-login-feature\n```", "```\ngit checkout add-login-feature\n```", "```\ngit push --set-upstream origin add-login-feature\n```", "```\ngit push\n```", "```\ngit add login.py\ngit commit -m \"add initial version of log in page\"\n```", "```\ngit push\n```", "```\nstages:\n    - build\n    - test\n    - deploy\n```", "```\n# temporary job that we'll delete later\njob1:\n    stage: build\n    script:\n        - echo \"in job1\"\n```", "```\nsudo gitlab-runner register \\\n  --non-interactive \\\n  --url \"https://gitlab.hats-for-cats.com/\" \\\n  --registration-token \"abc123\" \\\n  --executor \"docker\" \\\n  --docker-image \"alpine:latest\" \\\n  --description \"Hats for Cats 1\"\n```", "```\n~$ sudo gitlab-runner verify\nRuntime platform         arch=amd64 os=linux pid=6365\nrevision=bbcb5aba version=15.3.0\nRunning in system-mode.\nVerifying runner... is alive             runner=LuKAFv53\nVerifying runner... is alive             runner=Rtq7yC5e\n```", "```\ndef log_user_in(username, password):\n    return (username == \"Dana\") and (password == \"p@ssw0rd\")\n# TODO: replace this placeholder code with real logic\n```", "```\npytest==7.1.3\n```", "```\nfrom login import log_user_in\ndef test_login_good_credentials():\n    assert log_user_in(\"Dana\", \"p@ssw0rd\")\ndef test_login_bad_username():\n    assert not log_user_in(\"foo\", \"p@ssw0rd\")\ndef test_login_bad_password():\n    assert not log_user_in(\"Dana\", \"foo\")\n```", "```\nunit-tests:\n    stage: test\n    image: python:3.10\n    script:\n        - pip install -r requirements.txt\n        - pytest --junit-xml=unit_test_results.xml\n```", "```\n    artifacts:\n        reports:\n            junit: unit_test_results.xml\n        when: always\n```", "```\ninclude:\n    - template: Code-Quality.gitlab-ci.yml\n```", "```\nsudo gitlab-runner register \\\n  --non-interactive \\\n  --url \"https://gitlab.hats-for-cats.com/\" \\\n  --registration-token \"abc123\" \\\n  --executor \"docker\" \\\n  --docker-image \"docker:stable\" \\\n  --description \"runner for code quality\" \\\n  --tag-list \"code-quality-capable \" \\\n  --builds-dir \"/tmp/builds\" \\\n  --docker-volumes \"/cache\"\\\n  --docker-volumes \"/tmp/builds:/tmp/builds\" \\\n  --docker-volumes \"/var/run/docker.sock:/var/run/docker.sock\"\n```", "```\ncode_quality:\n    tags:\n        - code-quality-capable\n    services: []    # disable all services\n```", "```\nfrom login import log_user_in\nfrom pythonfuzz.main import PythonFuzz\n@PythonFuzz\ndef fuzz(bytes):\n    try:\n        string = str(bytes, 'UTF-8')\n        divider = int(len(string) / 2)\n        username = string[:divider]\n        password = string[divider:]\n        log_user_in(username, password)\n    except UnicodeDecodeError:\n        pass\nif __name__ == '__main__':\n    fuzz()\n```", "```\ninclude:\n    - template: Code-Quality.gitlab-ci.yml\n    - template: Coverage-Fuzzing.gitlab-ci.yml\n```", "```\nstages:\n    - build\n    - test\n    - deploy\n    - fuzz\n```", "```\nfuzz-test-for-log-user-in:\n    image: python:3.10\n    extends: .fuzz_base\n    script:\n        - pip install --extra-index-url https://gitlab.com/api/v4/projects/19904939/packages/pypi/simple pythonfuzz\n        - ./gitlab-cov-fuzz run --engine pythonfuzz -- log_user_in_fuzz_target.py\n```", "```\n    variables:\n        COVFUZZ_ARGS: '--runs=1000'\n```", "```\n        - ./gitlab-cov-fuzz run --engine pythonfuzz --additional-args $COVFUZZ_ARGS -- log_user_in_fuzz_target.py\n```", "```\n    - template: Security/SAST.gitlab-ci.yml\n```", "```\nvariables:\n    SAST_EXCLUDED_PATHS: \"test_login.py,log_user_in_fuzz_target.py\"\n```", "```\n    - template: Security/Secret-Detection.gitlab-ci.yml\n```", "```\nsecret_detection:\n    variables:\n        SECRET_DETECTION_EXCLUDED_PATHS: \"login_test.py,log_user_in_fuzz_target.py\"\n```", "```\nAWS_access_token = 'AKIAABCDEFGH12345678'\n```", "```\n    - template: Security/Dependency-Scanning.gitlab-ci.yml\n```", "```\ndjango==3.2\n```", "```\n    - template: Security/License-Scanning.gitlab-ci.yml\n```", "```\nproofread:\n    stage: test\n    image: gui-proofreader:latest\n    script:\n        - ./proofread-my-gui.sh\n```", "```\n    artifacts:\n        reports:\n            sast: gui-proofreader-report.json\n```", "```\n    needs: [\"unit-tests\"]\n```", "```\n    needs: []\n```", "```\ninclude:\n```", "```\n    - template: Security/SAST.gitlab-ci.yml\n    - template: Security/Secret-Detection.gitlab-ci.yml\n    - template: Security/Dependency-Scanning.gitlab-ci.yml\n    - template: Security/License-Scanning.gitlab-ci.yml\n```", "```\n    - local: security-jobs.yml\n```", "```\ndeploy-to-production:\n    stage: deploy\n    image: registry.hats-for-cats.com/ubuntu-with-deploy-key:latest\n    rules:\n        - if: $CI_COMMIT_REF_NAME == \"production\"\n    script:\n        - scp -r . root@192.168.0.1:/home/hats-for-cats/production\n        - ssh root@192.168.0.1 service apache2 restart\n```"]