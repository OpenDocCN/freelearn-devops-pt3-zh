- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Site Reliability Engineering Fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned about the DevOps culture, goals, and benefits.
    DevOps practices and habits enable collaboration between teams and shorten the
    loop within the delivery cycle from idea inception and design to deployment for
    the end user.
  prefs: []
  type: TYPE_NORMAL
- en: '**Site reliability engineering** (**SRE**) and DevOps methods are complementary
    rather than competitive. SRE is not the next logical step after DevOps. Technically,
    teams that use SRE practices achieve better customer outcomes when measured with
    DevOps metrics.'
  prefs: []
  type: TYPE_NORMAL
- en: Conventionally, organizations have maintained teams as different siloed units,
    such as **development** (**Dev**), **quality assurance** (**QA**), and **operations**
    (**Ops**) teams. The development team is primarily responsible for completing
    feature development, while the QA team is primarily responsible for performing
    and completing quality checks of developed functionalities. The operations team,
    on the other hand, is primarily responsible for the deployment and maintenance
    of applications in the production environment. Additionally, they also monitor
    and take necessary action to ensure the reliability and scalability of the deployed
    applications
  prefs: []
  type: TYPE_NORMAL
- en: Both SRE and DevOps have teams of engineers with development and operations
    expertise. As a result, the organization can prevent teams from working in silos.
  prefs: []
  type: TYPE_NORMAL
- en: The reputation and success of a business or product are dependent on the stability
    of cloud solutions in a production environment. To boost application stability
    and scalability, SRE will use automation to reduce repetitive and manual operational
    tasks. Adopting SRE practices into your software development life cycle is crucial
    for survival in this current era of building IT solutions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to SRE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key principles and practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are no technical requirements for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to SRE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The term *SRE* was first coined by Ben Treynor Sloss at Google ([https://sre.google/sre-book/introduction/](https://sre.google/sre-book/introduction/)).
    SRE has enabled Google to manage large-sized complex systems and massive infrastructure
    in the most efficient, reliable, scalable, and sustainable way.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: SRE is primarily focused on the reliability of service.
  prefs: []
  type: TYPE_NORMAL
- en: Why is reliability so important?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reliability is defined as the likelihood of services performing predictably
    under specified operational conditions. The most dependable systems will be more
    accessible, which will result in a better client experience. The reliability of
    your services is an important quality indicator.
  prefs: []
  type: TYPE_NORMAL
- en: Reliability and availability are interlinked; however, the difference is in
    the way they are measured. Although availability and reliability go hand in hand,
    the measures taken might produce different results. A system’s availability may
    be modeled mathematically as a measure of its reliability. In other words, reliability
    can be considered as a subset of availability.
  prefs: []
  type: TYPE_NORMAL
- en: What is availability?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The availability of the systems can be measured as the percentage of time in
    which the system is available or fully operational. A software system is composed
    of several components, all of which must be evaluated to ensure availability.
    Let’s assume we have a system that includes components such as database servers,
    storage servers, and application servers. Your system’s availability will be defined
    by the combined availability of these components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to [https://uptime.is/](https://uptime.is/) to learn more about the downtime
    allowed on your services based on availability guarantees, often known as **service-level
    agreements** (**SLAs**). The following table illustrates some availability percentages
    and downtime limits in seconds, minutes, and hours. The phrase *availability*
    or *uptime* is commonly given in nines (read as a count of nines) as shown in
    the table here (accordingly the allowed downtime is calculated):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Availability** | **Allowed Downtime** |'
  prefs: []
  type: TYPE_TB
- en: '| **Percentage** | **Daily** | **Weekly** | **Monthly** | **Quarterly** | **Yearly**
    |'
  prefs: []
  type: TYPE_TB
- en: '| 99.999%(Five nines) | 0 Seconds | 6 Seconds | 26 Seconds | 1 Minute18 Seconds
    | 5 Minutes15 Seconds |'
  prefs: []
  type: TYPE_TB
- en: '| 99.99%(Four nines) | 8 Seconds | 1 Minute0 Seconds | 4 Minutes 32 seconds
    | 13 Minutes8 Seconds | 52 Minutes35 Seconds |'
  prefs: []
  type: TYPE_TB
- en: '| 99.95%(Three nines) | 43 Seconds | 5 Minutes2 Seconds | 21 Minutes54 Seconds
    | 1 Hour5 Minutes44 Seconds | 4 Hours22 Minutes58 Seconds |'
  prefs: []
  type: TYPE_TB
- en: Table 2.1 – Availability percentage and downtime allowance
  prefs: []
  type: TYPE_NORMAL
- en: 'The formula to calculate the time-based availability percentage is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Availability % = ((Service Uptime - Service Downtime) ÷ (Service Uptime))
    * 100*'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to calculate the availability of production service in a single
    day, assuming the agreed service is expected to run *24*365, use the following*:'
  prefs: []
  type: TYPE_NORMAL
- en: The total number of seconds within a day that the agreed service is expected
    to be up and running = 86,400 seconds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sum of downtime(s) on a specific day = 60 seconds for deployment + 60 seconds
    for rollback due to deployment error.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the preceding formula for availability = ((86,400 -120) ÷ (86,400)) *100.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The availability for your service on that day is 99.86%.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SRE advocates for monitoring and assessing the availability of important services
    that are essential to the business’s success.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of your IT department should not be to boost service availability across
    the board. Greater availability increases the cost of doing business because it
    necessitates more work and resources. However, because a lack of better availability
    can result in significant monetary losses (often, exceeding the cost of operations),
    the SRE team will take a pragmatic approach to define availability levels based
    on business demands.
  prefs: []
  type: TYPE_NORMAL
- en: '**Domain Name Services** (**DNS**), for example, is the internet’s directory.
    Domain names are matched with IP addresses using this service. DNS should be available
    24 hours a day, 7 days a week. As a result, DNS availability is maintained at
    100%.'
  prefs: []
  type: TYPE_NORMAL
- en: In general, aiming for 100% dependability for any service or system is not a
    clever idea. It would be difficult for a user to identify the difference between
    a service that is 100% available and one that is 99.999% available.
  prefs: []
  type: TYPE_NORMAL
- en: According to *Table 2.1*, 99.999% availability allows for 26 seconds of downtime
    per month and 6 seconds per week, which is little in most circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: However, some mission-critical systems, such as medical devices and aircraft,
    must be completely dependable and cannot afford any downtime.
  prefs: []
  type: TYPE_NORMAL
- en: Reliability challenges and SRE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cloud architecture must be reliable, scalable, and performant. Cloud services
    will use auto-scaling to dynamically scale services to meet changing demand, and
    observability will be used for applications that provide support for monitoring
    system performance, availability, success, error and dependence error rate, request
    failure rate, latency, freshness, and throughput.
  prefs: []
  type: TYPE_NORMAL
- en: 'Service availability and reliability metrics will be used by organizations
    to determine the service levels required to keep business activities running smoothly.
    Your SRE strategy’s key decision factors are reliability and availability, which
    have different meanings and are measured differently:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Reliability and availability  ](img/B18655_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Reliability and availability
  prefs: []
  type: TYPE_NORMAL
- en: As evident from the preceding figure, reliability can be considered as a subset
    of availability. Organizations have realized that maintaining system reliability
    is challenging while also maintaining development velocity, desired scalability,
    and operational stability.
  prefs: []
  type: TYPE_NORMAL
- en: 'The conventional team model includes a Dev, QA, and Ops team, with development,
    QA, and operations tasks separated. This type of separation has resulted in organizational
    silos or a *throw-it-over-the-wall* mentality, which influences the organizational
    team’s ability to achieve long-term goals and foster a learning and blameless
    culture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Reliability challenges  ](img/B18655_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Reliability challenges
  prefs: []
  type: TYPE_NORMAL
- en: The Dev team *throws* their code over the wall and expects the Ops team to run
    and manage it in production. The Dev team wants to release features at a fast
    pace to production and not be responsible for the stability of the applications.
    The Ops team, on the other hand, wants to minimize changes to the production service
    to avoid any disruptions to business to maintain the stability of services.
  prefs: []
  type: TYPE_NORMAL
- en: SRE helps the team in striking a balance between delivering new features and
    ensuring that the system operates appropriately and effectively. This collaborative
    method bridges the gap between development responsibilities and day-to-day system
    operation and customer service and support tasks. This daily customer support and
    operational activity create a feedback loop, which is essential for increasing
    system quality.
  prefs: []
  type: TYPE_NORMAL
- en: Although customers are increasingly anticipating shorter delivery times, just
    focusing on delivery speed or greater product velocity is insufficient. One of
    the most critical attributes for competing effectively in today’s modern development
    is dependability. As a result, increasing product velocity while being dependable
    is a fundamental premise for any IT organization. The SRE team is responsible
    for the availability, latency, performance optimization, change management, monitoring,
    alerting, emergency response, and capacity planning of their service(s).
  prefs: []
  type: TYPE_NORMAL
- en: The fundamental goal of SRE is to improve system reliability and stability.
    The team understands that reliability metrics are driven by business needs, and
    not every business function might require the highest level of reliability, as
    there are cost tradeoffs associated with it.
  prefs: []
  type: TYPE_NORMAL
- en: Appropriate reliability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The level of reliability for a service must be appropriate to match its business
    needs. Online e-commerce businesses will have different requirements compared
    to traditional retail shops. For example, they will require a greater level of
    availability than traditional retail shops, which operate only throughout the
    day for a set number of hours.
  prefs: []
  type: TYPE_NORMAL
- en: Reliability is defined and measured using **service-level objectives** (**SLOs**).
    SRE practices can be tailored to achieve the appropriate level of reliability,
    and SLOs are usually defined as a percentage achievement over a period. SLOs are
    driven by key business objectives, whereas **service-level indicators** (**SLIs**)
    are driven by what’s possible to measure while implementing the service.
  prefs: []
  type: TYPE_NORMAL
- en: Consistent reliability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Products are built on the foundation of reliable systems, services, and people.
    SRE considers it essential to build a culture and practices that will lead to
    consistent and predictable reliability. The connections and trust we build with
    our colleagues, sustainable operating procedures, and the learning culture that
    we nurture to provide a psychologically safe workplace for our team to achieve
    environmental sustainability are all part of reliability.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, the SRE team’s key principles and practices are covered.
  prefs: []
  type: TYPE_NORMAL
- en: Key principles and practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SRE team’s day-to-day activities include developing and maintaining large,
    distributed services. Operating a service successfully in good health requires
    a wide range of activities, such as building monitoring systems, planning capacity,
    responding to incidents, resolving the root causes of outages, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section covers the key principles and practices that influence the SRE
    team’s day-to-day activities. The following diagram depicts the elements necessary
    to make a service reliable, from the most basic to the most advanced:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Service reliability hierarchy according to Google’s SRE book
    ](img/B18655_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Service reliability hierarchy according to Google’s SRE book
  prefs: []
  type: TYPE_NORMAL
- en: 'From the most basic requirement to the capstone step of launching a product
    or service, Google has described the reliability hierarchy as necessary to boost
    the reliability of the system and maintain service health. Each level of this
    pyramid will be discussed briefly:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Monitoring**: Monitoring is the most essential strategy to maintain track
    of a system’s availability, and is positioned at the bottom foundation layer of
    the service reliability hierarchy. Effective monitoring is simple and resilient,
    and it should provide alerts for critical failures in your service. Such alerts
    should be simple and clear to understand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no way to tell whether a service is operational, offline, or experiencing
    sporadic outages without monitoring. To establish a reliable system, you must
    be aware of problems and errors in your service before users notice them. After
    such problems are noticed, the SRE team should prioritize and manage incident
    response. To mitigate the impact or restore service to its previous state, the
    team should coordinate efforts in the most efficient way possible and maintain
    active communication.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Azure is a very robust cloud platform with a plethora of capabilities
    for dealing with every aspect of a solution. The services include tools for managing
    and deploying applications. When developing your solution on the Azure cloud,
    you must select the appropriate services to meet your SRE needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'To monitor your application, you can use the following services:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure Monitor** provides a comprehensive solution for collecting, analyzing,
    and acting on telemetry from your cloud and on-premises environments, and supports
    operations at scale with *smart alerts* and *automated actions*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Application Insights** is a feature of Azure Monitor that provides
    a powerful **application performance management** (**APM**) tool that easily integrates
    with your applications to send telemetry and analyze application-specific metrics.
    It also provides ready-to-use dashboards and a metrics explorer that you can use
    to analyze the data to explore business needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Incident response**: Once you have built effective monitoring around your
    service, you will need to configure notifications, such as SMS and **event management
    systems (EMS)** for unplanned, critical, and urgent incidents. Incidents and outages
    are unavoidable in a complex distributed system. Appropriate human intervention
    is required to identify the root cause and fix these outages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To minimize the business impact and run services smoothly, you would need to
    build up a process to mitigate and respond to these incidents in a structured
    way. Once the incident has been mitigated, the SRE team should follow the incident
    management response process to restore services as quickly as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Incident response frameworks have three common objectives, widely known as
    the **three Cs** (**3Cs**) of incident management:'
  prefs: []
  type: TYPE_NORMAL
- en: '**C**oordinate response effort.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**C**ommunicate between incident responders, within the organization, and to
    the outside world.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintain **c**ontrol over the incident response.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Although each organization’s incident response process may change depending
    on organizational structure, skills, and previous experience, consider the following
    set of recommendations and best practices for responding to incidents:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prioritize**: Fix frequently occurring problems, get the service back up
    and running, and keep the evidence for root-cause analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prepare**: In advance, develop and document your incident management procedures
    in consultation with incident participants.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trust**: Provide all incident participants complete autonomy within their
    allocated roles and responsibilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'During an incident, you must strike these critical balances:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Speed**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Balance the need to move swiftly to satisfy stakeholders with the risk of making
    hasty decisions.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sharing information**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inform investigators, stakeholders, and customers so that liability is minimized,
    and unrealistic expectations are avoided.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Post-mortem and root-cause analysis/blameless post-mortem**: Once an incident
    has been mitigated and handled, the SRE team implements post-mortem procedures.
    This post-mortem procedure offers an opportunity to cultivate a blameless post-mortem
    culture. A blameless post-mortem (or retrospective) is a post-incident document
    that helps teams figure out why an incident happened, what went well, what went
    wrong, and brainstorm how to prevent such issues from recurring.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blameless post-mortems are a tenet of SRE culture. To build a sustainable culture,
    we would need to assume that everyone involved in an incident had good intentions
    and did the right thing with the information they had to minimize the business
    impact. Pointing the blame at people or at a team will discourage the team and
    will engender a fear of punishment, which will make it more difficult to bring
    concerns to light.
  prefs: []
  type: TYPE_NORMAL
- en: A blameless post-mortem is an opportunity for the team to learn from their failures
    or mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Testing and release procedures/testing for reliability**: The SRE team is
    responsible for building confidence in the reliability of the production systems
    they build and maintain. The SRE team will adopt a fully automated testing strategy
    along with classical software testing techniques to deploy in production and release
    it to users without any issues or downtime. The automated test suite(s) designed
    to support software reliability instills confidence that software will be deployed
    to production without major issues. As part of their QA activities, the SRE team
    must prioritize and make continuous investments in automated testing practices.
    Customers will be happier and platform adoption will increase, leading to a higher
    **return on investment** (**ROI**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Capacity planning**: As a member of the SRE team, you’re in charge of determining
    the resource needs for your service, including the necessary hardware, software,
    and network resources, as well as ensuring that your service performs relatively
    well, even in the face of unanticipated demand. Capacity management is the process
    of ensuring that your service has enough resources to be scalable, fault-tolerant,
    efficient, and reliable. For example, SRE would estimate how much storage, service
    instances, or memory you will need over a specific interval of time. This data
    will help you create a scalable architecture for your service. You may be more
    flexible on required capacity in cloud-based models because you can dynamically
    increase or decrease required resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure App Service, Azure SQL Database, Azure Kubernetes, and Azure Cache for
    Redis are examples of Azure cloud services that have built-in auto-scale features.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in **Azure App Service**, scale settings are applied in seconds
    and affect all apps in your App Service plan. You do not need to modify or redeploy
    your application. You can **scale up** and get more CPU, memory, disk space, and
    extra features, such as dedicated **virtual machines** (**VMs**), custom domains
    and certificates, staging slots, autoscaling, and more. You can also leverage
    autoscaling, which automatically scales the number of instances depending on established
    criteria and schedules. Scaling rules are a more controlled approach to scale
    in or scale out.
  prefs: []
  type: TYPE_NORMAL
- en: For example, every day at 21:00, you can scale down to two instances of Azure
    App Service, with a rule to scale up by one instance when CPU demand averages
    higher than 50%. A scale-out or scale-in action normally takes a few minutes to
    complete. Consider this when designing your scaling plan to match performance
    requirements and satisfy SLAs.
  prefs: []
  type: TYPE_NORMAL
- en: '**Development**: Although everyone expects services to run smoothly, there
    may be disruptions caused by events beyond anyone’s control, such as natural disasters
    or hard drive failure, or even system process crashes that will impact your services
    adversely. Natural catastrophes can seriously damage many data centers in a region.
    To keep systems *functional*, the SRE team must design strategies to mitigate
    these failures. Such solutions would make use of deployment patterns/strategies
    such as **geo-replication and failover**, **geo-redundancy**, and **Active-Active**,
    **Active-Passive** **High Availability**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Multi-region architecture  ](img/B18655_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Multi-region architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, as depicted in the preceding diagram, a multi-region architecture
    provides higher availability of service than when deploying to a single region.
    The architecture under consideration here includes the following components, to
    mention just a few:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Active and standby region**: Two regions to achieve higher availability.
    One is the primary region. The other region is for failover.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Front Door**: A modern cloud **content delivery network** (**CDN**)
    service that delivers high performance, scalability, and secure user experiences
    for your content and applications. This service offers various layer 7 load-balancing
    capabilities and near-real-time failover for your applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure DNS**: A hosting service for DNS domains. It provides name resolution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure App Service**: Azure’s premier service for web applications and web-based
    APIs, which provides integrated security with **Azure AD** and **Azure Key Vault**.
    Supports auto-scaling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Functions**: A serverless compute option, it uses an event-driven model.
    In this architecture, the functions are invoked when a new message is pushed into
    the queue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Cache for Redis**: Applies a caching layer as a service to the solution,
    providing an in-memory managed cache to reduce latency and increase performance
    for the clients.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Storage, Azure Cosmos DB, and Azure SQL**: Can store both structured
    and non-structured content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the unlikely event of a disaster, a regional outage affects the active region,
    and Azure Front Door will fail over to the standby region. This architecture uses
    two regions, active and standby, to achieve higher availability. During normal
    operations, network traffic is routed to the primary region. If the active region
    becomes unavailable, traffic is routed to the standby region.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active/passive with hot standby means resources in the secondary/standby region
    will be always running. These secondary region resources can be used for **A/B
    testing** for better value for money.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Product**: Companies launch new products at a slow pace. In the cloud and
    distributed modern world, the launch and release cycles need to be at a faster
    pace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Teams can create a checklist to document action items and roll back plans. A
    checklist plays an instrumental role in launching new services with reproducible
    reliability. A checklist needs to be tailored to the company’s internal services,
    processes, and infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The checklist needs to be created carefully or it will grow to an unmanageable
    size. This checklist can and should be documented and automated to minimize efforts.
    The checklist can cover the following themes:'
  prefs: []
  type: TYPE_NORMAL
- en: Architecture and dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capacity planning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Failure modes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processes and automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rollout planning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gradual and staged rollouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will cover patterns and principles that influence SRE
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing SLOs and SLIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SLOs define a goal level for your service’s reliability. SLOs are at the heart
    of SRE practices because they are critical to making data-driven decisions regarding
    reliability. SLOs are a tool to help determine what engineering work to prioritize.
  prefs: []
  type: TYPE_NORMAL
- en: SLIs are a quantitative indicator of the level of service that you are providing.
    SLOs and SLIs always go hand in hand and are usually defined iteratively. SLOs
    are driven by key business objectives, whereas SLIs are driven by what is possible
    to be measured while implementing the service.
  prefs: []
  type: TYPE_NORMAL
- en: Your first attempt at an SLI and SLO doesn’t have to be correct. The most important
    goal is to get something in place and measured, and to set up a feedback loop
    so you can improve. You can identify which metrics best match what your users
    care about in your service.
  prefs: []
  type: TYPE_NORMAL
- en: The SRE team recommends using a limited number of metrics based on critical
    services for greater user experience rather than developing an endless number
    of monitoring metrics. You could start with a broad target and then tweak it over
    time. This allows you to concentrate alerts on instances where you can reliably
    state that the services will be nonfunctional and will start to impact user experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s say that you are building a food delivery app from which users can do
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse restaurants and menus.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select menu items and place an order.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pay for the order.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this app, it is extremely important for a better user experience and overall
    business success that users can place an order for delivery and successfully make
    payments. Here, in the first attempt, the *Place order and pay* scenario will
    be the basis for defining SLOs, as this service would take precedence for business
    success over any other services.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to figure out which metrics to use as SLIs that will most accurately
    track the user experience. You can choose from a wide range of indicators, such
    as availability latency, throughput, correctness, and data freshness, as detailed
    next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most services focus on the following four key SLI metrics to monitor. These
    are the four golden signals of monitoring:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Request latency**: The time taken for your service to return a response to
    the request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Availability of service**: The fraction of time during which service is available
    to use'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Success rate**: The number of requests successfully completed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Throughput**: The number of requests processed per second'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *measurement period* for defining an SLO is very important and can be defined
    over various time intervals. The SLO and SLIs need to be something that can be
    accurately measured and represented in your monitoring system. Over time, you
    will compare the SLO targets and SLIs with measured metrics. Now, for the *Place
    order and pay* service, which is a basis for the SLO, you will want to have an
    order confirmation received within an acceptable window.
  prefs: []
  type: TYPE_NORMAL
- en: In our example of the food delivery app, you can set a value of 700 ms for a
    response to be returned for a successful request for the *Place order and pay*
    service for a given specified time window of 1 month. These SLI goals and timeframes
    should be acceptable to businesses. So, if there are 10,000 HTTP requests in a
    calendar month and only 9,990 of them are successful, it corresponds to 9,990/10,000
    or 99.9% availability for that month.
  prefs: []
  type: TYPE_NORMAL
- en: If your service is not meeting SLOs, then the SRE team will try to strike a
    balance between new feature development/deployment and increasing reliability
    of service to avoid SLO violations for a given measurement period.
  prefs: []
  type: TYPE_NORMAL
- en: An SLA is a legal agreement between the business and the customer that includes
    a reliability target and repercussions of not meeting it, whereas an SLO is an
    internal target that measures how customers use the service. SLOs are not shared
    with external stakeholders and have no legal bindings or consequences. If a service
    availability breaches the SLO, the SRE team must respond immediately to avoid
    the organization being penalized for failing to meet SLAs. SLOs should always
    be more stringent than corresponding SLAs. The SRE team does not typically get
    involved in constructing SLAs, because SLAs are closely tied to business and product
    decisions. However, the SRE team can help to define SLIs.
  prefs: []
  type: TYPE_NORMAL
- en: To find the right balance between reliability and innovation, it is better to
    create a rate against which SLO violations can be measured, and an *error budget*
    at which SLOs can be missed. In the next section, we will learn more about error
    budgets.
  prefs: []
  type: TYPE_NORMAL
- en: Establishing an error budget policy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An **error budget** is the maximum number of errors or the maximum amount of
    time your service is nonfunctional over a given period before it has a negative
    impact on the business and users become dissatisfied. The error budget is applied
    to several aspects of your service, such as availability, latency, and so on.
    The SRE team utilizes error budgets to strike a balance between service reliability
    and innovation speed.
  prefs: []
  type: TYPE_NORMAL
- en: An error budget will help you to know whether you are meeting expectations or
    not, and will help you to take appropriate actions to reduce the reliability failure
    of your service. If the service receives 1,000,000 requests in 4 weeks, a 99.9%
    SLO for successful requests allows us to budget for 1,000 errors throughout that
    period.
  prefs: []
  type: TYPE_NORMAL
- en: A service with 99.95% SLO has an error budget of 0.5% that translates to a overall
    downtime of 4 hours, 22 minutes, and 48 seconds within a year. The SRE team should
    take an appropriate course of action to restore stability to your service that
    is not meeting SLOs or has exhausted the error budget or comes close to exhausting
    it.
  prefs: []
  type: TYPE_NORMAL
- en: When your service is within budget, SRE practice encourages you to burn the
    error budget strategically, whether for a new feature or architectural modifications.
    Even though any new release inadvertently makes the service less reliable, for
    example, if the service goes down due to something such as a deployment configuration
    issue, the service is still within budget. Error budgets are often created for
    certain time periods, such as a month, quarter, or year.
  prefs: []
  type: TYPE_NORMAL
- en: Error budgets are frequently used strategically to apply automation for **toil**
    tasks such as manual deployment or environment setup, configuration changes, incident
    response, and many more. In the next section, we will learn more about reducing toil.
  prefs: []
  type: TYPE_NORMAL
- en: Reducing toil
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Toil in an SRE context refers to operations that lack long-term monetary value
    and do not significantly advance the service. They are frequently repetitive and
    mostly manual (even though they could be automated). As the service or system
    grows, the number of manual requests for that system will likely grow proportionally,
    requiring even more human labor.
  prefs: []
  type: TYPE_NORMAL
- en: SRE engineers can only spend up to 50% of their time on *Ops* work such as tickets,
    on-call, and manual tasks, among other things.
  prefs: []
  type: TYPE_NORMAL
- en: 'SRE engineers should spend the other half of their time on activities such
    as the following (this is not a comprehensive list):'
  prefs: []
  type: TYPE_NORMAL
- en: Using automation to enable scalability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test suite automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying database changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating response to incidents such as password reset and user creation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing noncritical monitoring alerts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Engineering work to develop new features to reduce toil and increase system
    reliability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To efficiently reduce the toil workload, the SRE team can start small and work
    their way up. Toil elimination requires automation, and the SRE team must work
    tirelessly to reduce or minimize toil. Automation engineering efforts, whether
    partial or complete, is necessary, but it should not endanger system reliability.
    **Azure Automation** can be used to automate human responses, as well as diagnosing
    and resolving issues. Team motivation will rise because of automation, and the
    team will be able to focus on engineering work.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about SRE principles and practices. We are
    now aware of how to calculate time-based availability and how to define availability
    based on business expectations and needs.
  prefs: []
  type: TYPE_NORMAL
- en: We also explored the typical reliability challenges associated with the traditional
    team model and how constituting an SRE team will help you find the right balance
    between system reliability and development. We underlined the role of proper and
    consistent reliability.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we learned about all the necessary aspects, from conception to successfully
    launching the service on production. We also highlighted key techniques such as
    applying SLOs and SLIs, reducing toil, the post-mortem culture, and efficiently
    utilizing an error budget to improve system and cloud service dependability.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming chapter, we’ll look at DevOps tools and capabilities to see
    how they can help you manage your software development life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Self-practice exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Identify SLOs jointly with business stakeholders and development teams.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform blameless post-mortems for recent or hypothetical production incidents
    for your services in the production environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refer to [https://sre.google/sre-book/example-postmortem/](https://sre.google/sre-book/example-postmortem/)
    for more guidance and an example post-mortem.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/azure/architecture/resiliency/failure-mode-analysis](https://docs.microsoft.com/en-us/azure/architecture/resiliency/failure-mode-analysis).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/azure/architecture/framework/resiliency/overview](https://docs.microsoft.com/en-us/azure/architecture/framework/resiliency/overview).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify tedious, repetitive tasks/toil associated with running your services
    in the production environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Azure portal, first, configure App Service logging with Application Insights
    to monitor your application, then configure email alerts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we conclude the SRE strategy, here is a list of questions for you to test
    your knowledge regarding this chapter’s material. You will find answers in the
    *Assessments* section at the end of the book:'
  prefs: []
  type: TYPE_NORMAL
- en: True or false? SRE is primarily focused on the reliability of service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? Availability is expressed in fives.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? SRE adopts automation to enable application management.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the weekly, monthly, and yearly downtime allowance for a service with
    95% availability?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the top three reliability challenges?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Development velocity
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Quality
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Stability
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: DevOps management
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Bug tracking
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? The appropriate level of reliability for services is identified
    by the key stakeholders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is toil in the SRE context?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Google’s SRE book: [https://sre.google/sre-book/part-I-introduction/](https://sre.google/sre-book/part-I-introduction/%20)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Microsoft’s SRE documentation: https://docs.microsoft.com/en-us/learn/modules/intro-to-site-reliability-engineering/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Azure Monitor*: [https://docs.microsoft.com/en-us/azure/azure-monitor/overview](https://docs.microsoft.com/en-us/azure/azure-monitor/overview%20)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Azure Application Insights*: [https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview](https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview%20)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Azure Automation*: [https://docs.microsoft.com/en-us/azure/automation/overview](https://docs.microsoft.com/en-us/azure/automation/overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
