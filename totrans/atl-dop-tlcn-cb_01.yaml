- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An Introduction to DevOps and the Atlassian Ecosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps has been a driving force for improvement in product development since
    its inception in 2009\. As technology moved to internet-based, off-premises cloud
    environments, DevOps allowed people working in development and operations a way
    to collaborate, enabling quicker and more stable design, packaging, deployment,
    and maintenance of products. A key component of this is the adoption of automation
    that ensures these processes run smoother.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at the DevOps movement and the role that automation
    plays in its success. We will then look at the **Open DevOps** platform from **Atlassian**
    that allows easy connection between Jira, other Atlassian tools such as Confluence
    and Bitbucket, as well as third-party tools such as LaunchDarkly, which allows
    you to release products through feature flags, and Snyk, which performs security
    scanning.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start our journey into Open DevOps, we will examine the steps needed to
    enroll in Atlassian’s cloud environment to obtain trial versions of Jira and connections
    through Open DevOps. To accomplish this, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Open DevOps toolchain from scratch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new Atlassian Cloud site with Jira only
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Jira project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting Confluence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting Bitbucket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By 2009, developers began to adopt Agile product development methods. They started
    with small deliveries in incremental cycles, gathering customer feedback and using
    it to inform future development cycles. They gradually created a product that
    their customers would want.
  prefs: []
  type: TYPE_NORMAL
- en: A bottleneck would soon form from delivering changes to the operations part
    of the organization. While rapid development of value is the priority of development
    teams, operations teams are charged with maintaining the stability of the environment.
    Anything that would diminish that stability would mean a potential loss of revenue.
    Typically, that meant seeing any new change as risky and allowing any changes
    to be released in specific maintenance windows. These windows only ended up increasing
    the risk of further downtime.
  prefs: []
  type: TYPE_NORMAL
- en: Changes would soon emerge. During the *O’Reilly Velocity 2009 conference*, John
    Allspaw and Paul Hammond of Flickr gave a talk titled *10+ Deploys a Day – Dev
    and Ops Cooperation at Flickr* that described the different practices that allowed
    them to perform multiple deployments in a single day, in contrast to many organizations
    that were struggling to perform a deployment in a single year. Patrick Debois,
    after watching the aforementioned talk and other talks on the importance of collaboration
    between development and operations, and being intrigued by the concept of Agile
    system administration following a conversation with Andrew Schafer the year before,
    decided to organize a conference in Ghent, Belgium, to address the topic. To emphasize
    this need, Debois added the common abbreviations of *development* and *operations*
    and combined them in the name of his conference – **DevOpsDays**.
  prefs: []
  type: TYPE_NORMAL
- en: The momentum of the first DevOpsDays conference continued to social media. Discussion
    continued on Twitter (now known as X), where the topic was identified through
    the hashtag `#DevOps`. Additional DevOpsDays conferences were organized in various
    cities throughout the world. The movement caught the attention of Gartner, who,
    in 2011, predicted that DevOps would soon be adopted by enterprises. This ensured
    that DevOps moved from an underground movement to a mainstream idea to implement
    in business.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the idea of collaboration between development and operations has shown
    benefits and proven to be popular, one key question is how successful DevOps implementations
    are started. A key model to that approach is identified in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The CALMS/CALMR approach
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In preparation for the *2010 DevOpsDays conference*, John Willis and Damon Edwards
    were asked the same question about the burgeoning DevOps movement – how do we
    implement DevOps? In other words, what were the important factors for a successful
    DevOps implementation?
  prefs: []
  type: TYPE_NORMAL
- en: They came up with an acronym, **CAMS**, where each letter identified a key component
    for a successful DevOps approach. **C** stood for **Culture**, **A** represented
    **Automation**. **M** was for **Measurement**, and **S** stood for **Sharing**.
  prefs: []
  type: TYPE_NORMAL
- en: When writing in *The DevOps Handbook*, Jez Humble elaborated on the CAMS model.
    He added an **L**, which stood for **Lean**. With this addition, CAMS became **CALMS**.
  prefs: []
  type: TYPE_NORMAL
- en: Scaled Agile Inc., when adopting DevOps into the **Scaled Agile Framework**
    (**SAFe**), modified the approach. Reasoning that the ideal DevOps culture was
    one of shared responsibility, Scaled Agile removed the S for Sharing and replaced
    it with an **R**, which stood for **Recovery**. CALMS became **CALMR** when practicing
    DevOps in SAFe.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at each letter of the CALMS and CALMR approaches and see how
    they fit in with the adoption of Atlassian tools and the Open DevOps platform.
  prefs: []
  type: TYPE_NORMAL
- en: Culture
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The management expert Peter Drucker is credited with saying, *“Culture eats
    strategy for breakfast,”* underlying the impact that culture, as a common thread,
    can have on uniting individuals in a group, from as small as a team, to as large
    as nations. So, if the correct culture can drive organizations to desired results,
    what is the correct culture? To find the answer, we turn to a sociologist named
    Ron Westrum.
  prefs: []
  type: TYPE_NORMAL
- en: 'In 1988, Ron Westrum organized a study to measure the safety of medical teams.
    He organized the teams into three different types of cultures:'
  prefs: []
  type: TYPE_NORMAL
- en: Pathological
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bureaucratic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generative
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A pathological culture is one that’s leader-driven. Motivation mainly comes
    through fear and threats from the leaders to accomplish the (leader’s) goals.
  prefs: []
  type: TYPE_NORMAL
- en: A bureaucratic culture has safety mechanisms through rules and standards, but
    these can then be used to protect the members of the group from outsiders.
  prefs: []
  type: TYPE_NORMAL
- en: A generative culture, in contrast, is focused on aligning with a common mission.
    Information is freely shared with whomever, whether they are a member of the group
    or not, irrespective of whether they can play a role in the success of the mission.
  prefs: []
  type: TYPE_NORMAL
- en: Westrum found in his initial study that medical teams that possessed a generative
    culture also possessed alignment to their mission, an awareness of things that
    impeded the mission, and gave empowerment to any individual to make changes to
    remove those impediments. This allowed organizations to easily make long-lasting
    improvements to the system to improve the teams even more.
  prefs: []
  type: TYPE_NORMAL
- en: These benefits are not limited to medical teams. In the book *Accelerate – Building
    and Scaling High Performing Technology Organizations*, Nicole Forsgren, Jez Humble,
    and Gene Kim investigated recommending DevOps practices to teams to see how effective
    they were. They surveyed development teams and found that those teams that had
    a generative culture produced higher levels of performance for software delivery
    and experienced higher levels of job satisfaction.
  prefs: []
  type: TYPE_NORMAL
- en: A change in culture, while possible, is typically the last change that occurs
    after structural and behavioral changes. Atlassian does provide tools that assist
    in the change of structure and behavior to move teams to a generative culture.
    These tools that assist cultural change are available for free as the Team Playbook
    ([https://www.atlassian.com/team-playbook](https://www.atlassian.com/team-playbook)).
    However, going into detail about these tools is beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Automation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When people think of DevOps, the first thing that comes to mind is automation.
    In the talk given by Allspaw and Hammond at the O’Reilly Velocity 2009 conference,
    one of the key factors of success mentioned included the use of automated infrastructure
    and a common version control system for both development and operations.
  prefs: []
  type: TYPE_NORMAL
- en: These days, key automation is done by successfully linking tools together to
    form a toolchain. Each activity in development and operations has at least one
    tool associated with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'A diagram that shows development activity with associated Atlassian tools is
    shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – DevOps phases with Atlassian tools](img/B21937_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – DevOps phases with Atlassian tools
  prefs: []
  type: TYPE_NORMAL
- en: This book will demonstrate in its chapters how to establish a toolchain with
    the Atlassian tools illustrated in the preceding figure.
  prefs: []
  type: TYPE_NORMAL
- en: Lean
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The system created by automation can only work well if its demand does not
    exceed its capacity. To ensure this balance, we will look at applying lean thinking
    practices, initially developed as part of the Toyota Production System. Practices
    include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Make all work visible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limit the **Work-in-Progress** (**WIP**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep batch sizes small
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitor queues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will see the relationships between the size of the work (the queue length),
    the time it takes to process the work (the cycle time), and how long until we
    see the results (the wait time) from queueing theory. A key formula in this is
    Little’s law, expressed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>L</mi><mo>=</mo><mi>λ</mi><mi>W</mi></mrow></mrow></math>](img/1.png)'
  prefs: []
  type: TYPE_IMG
- en: '*L* signifies the queue length. The Greek letter *lambda* represents the throughput
    the team has in processing the work. *W* represents the wait time for finished
    work.'
  prefs: []
  type: TYPE_NORMAL
- en: 'An additional equation called Kingman’s formula tells us that there’s a direct
    correlation between the cycle time, utilization, and variability of the items
    of work the team must complete. This formula (often called the *VUT equation*)
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mrow><mi>E</mi><mo>(</mo><mi>w</mi><mo>)</mo><mo>≈</mo><mi>V</mi><mo>×</mo><mi>U</mi><mo>×</mo><mi>T</mi></mrow></mrow></mrow></math>](img/2.png)'
  prefs: []
  type: TYPE_IMG
- en: In this equation, *E(W)* represents the wait time. It is shown as equivalent
    to the product of *variability (V)*, *utilization (U)*, and *cycle* *time (T)*.
  prefs: []
  type: TYPE_NORMAL
- en: Jira has features that allow us to display the work to do through Kanban boards,
    also allowing us to limit the WIP through column constraints. Wait times and cycle
    times can also be calculated from the metrics collected.
  prefs: []
  type: TYPE_NORMAL
- en: Measurement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In judging the effectiveness of our efforts to develop, release, and maintain
    our products, we need to ask three key questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Are we on track to deliver the solution?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the health of all of our operating environments (test, stage, and production)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do our customers think we have developed the right solution?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We saw when looking at *lean* practices in the previous section that we needed
    to pay attention to the following metrics to evaluate whether we operate in a
    state of flow:'
  prefs: []
  type: TYPE_NORMAL
- en: The cycle time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The WIP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The throughput
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any impediments or blockers to progress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In looking at the condition of the operating environments, we turn to the discipline
    of observability, where we collect all aspects of the environments from infrastructure
    to applications. The typical measurements for observability include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Call/execution traces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Measurements that can indicate whether our customers receive the proposed value
    from new product features can be tricky to determine. Vanity metrics may exist
    that occur naturally and indicate good trends, but after thorough analysis, they
    do not produce actionable answers. Metrics that have proven reliable in measuring
    customer sentiment include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Pirate* metrics (Acquisition, Activation, Retention, Referral, and Revenue)
    devised by Dave McClure, a look at ideal customer behavior toward a product or
    feature, with measurements of that behavior'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google HEART Metrics, used by Google UI/UX to gauge user preferences in terms
    of Happiness, Engagement, Adoption, Retention, and Task Success
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fit for Purpose** (**F4P**) devised by David J. Anderson and Alexei Zheglov,
    which measures whether a customer’s needs are met, as outlined in the book *Fit
    for Purpose – How Modern Businesses Find, Satisfy, and* *Keep Customers*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Atlassian applications can collect the needed metrics or easily integrate with
    dedicated metric collection tools. Jira is a proven platform to collect the metrics
    needed for lean. Out-of-the-box reports, as well as the easy application of third-party
    marketplace apps, allow us to collect and analyze required metrics. Open DevOps
    allows easy integration with observability tools such as those offered by Datadog
    and New Relic.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once we have collected the measurements, we need a way of easily displaying
    the information to all who need it to foster a generative culture.
  prefs: []
  type: TYPE_NORMAL
- en: The Atlassian tools described in this book provide a good basis to foster information
    sharing and transparency. Jira can produce charts and reports that can be shared
    on a dashboard. Other displays related to application health can be collected
    and displayed using Compass.
  prefs: []
  type: TYPE_NORMAL
- en: Recovery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In any DevOps implementation, we want to devote time and attention to planning
    contingency steps to take if a release causes an outage in the production environment.
    DevOps changes the operating model where both development and operations, either
    acting together or with specialized site reliability engineers, must collaborate
    to answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: How do we reduce the risk when we release?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What mitigation steps should be designed to limit the outage time, should it
    occur?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an outage happens, what procedures should we follow?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Atlassian tools may form the answer to these problems. Feature flag tools such
    as those provided by LaunchDarkly, easily integrate with Jira through Open DevOps.
    Compass provides *early warning* capabilities if an outage appears imminent. Opsgenie
    allows development and operations to collaborate in an outage to bring about a
    swift resolution.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen the key pillars of a DevOps approach and how the Atlassian tools
    help foster them. In the next section, let’s examine the possible technologies
    that impact DevOps implementation and where Atlassian tools can help.
  prefs: []
  type: TYPE_NORMAL
- en: Technology considerations for DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The adoption of the DevOps approach was encouraged by emerging technologies
    that made it easier and faster to deploy, release, and maintain products. The
    changes in technology include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Continuous Integration/Continuous Deployment** (**CI/CD**) pipelines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Infrastructure-as-Code** (**IaC**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Containers/Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s take a closer look at these factors.
  prefs: []
  type: TYPE_NORMAL
- en: CI/CD pipelines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of Allspaw and Hammond’s talk at the O’Reilly Velocity 2009 conference,
    CI tools were often used to make a *daily* build or a build of software that gathered
    the commits of that day. After creating the build, the CI tools would run automated
    tests, and report the success or failure of that operation.
  prefs: []
  type: TYPE_NORMAL
- en: Allspaw and Hammond took their CI tool further. If a build passed all its tests,
    the CI tool would allow you to move the build artifacts to either a test or staging
    environment for further testing, or to the production environment to prepare for
    release or *go-live*.
  prefs: []
  type: TYPE_NORMAL
- en: The extension of CI came to be known as CD. Automating deployment by using a
    CI/CD tool allows for consistent deployments because steps aren’t forgotten or
    skipped. Testing of deployment further ensures proper function and that the behavior
    seen is the desired behavior.
  prefs: []
  type: TYPE_NORMAL
- en: As tooling moved from just automated building to incorporating all steps of
    CI and CD from a single trigger, version control tools began to offer their own
    pipeline capabilities, controlled by a text file in the **YAML** (**YAML Ain’t
    Markup Language**) format. This facilitated a mini-movement called GitOps where
    build, testing, integration, packaging, and deployment all started from a single
    Git commit as a trigger.
  prefs: []
  type: TYPE_NORMAL
- en: IaC
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As CI expanded to include CD, deployment into environments was about to be made
    easier. New tools such as Ansible, Chef, Terraform, and Puppet allowed for the
    definition of an ideal infrastructure as specified by text files.
  prefs: []
  type: TYPE_NORMAL
- en: By running the infrastructure tools with the text files as input, there would
    be a consistent way of creating environments, whether they were used for testing,
    staging, or production. This consistency helped in keeping environments similar,
    ensuring the same testing results no matter which environment was used and preventing
    configuration drift, where problems were seen when environments weren’t similar.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud environments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While CI/CD pipelines and IaC tools could be applied to many physical platforms,
    from cyber-physical systems that became known as the **Internet of Things** (**IoT**)
    to physical servers, DevOps success has become associated most closely with the
    rise of cloud environments.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud environments are created with virtual machines available from a vendor
    and are accessible through the Internet. Creation and disposal of the virtual
    machines can happen within minutes, allowing for dynamic and flexible setups that
    could be provisioned on demand.
  prefs: []
  type: TYPE_NORMAL
- en: Containers and Kubernetes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The popularity of cloud environments and IaC has encouraged further thought
    as to how to package a software application and propagate that to multiple test,
    staging, and production environments.
  prefs: []
  type: TYPE_NORMAL
- en: '**Containers** have a long history as an approach to isolate processes and
    their resources, first in Unix and then in Linux. In 2013, Docker was the first
    company to introduce not only its standard of containers but also a way of managing
    them. The standard provided by Docker is the most prevalent one used today in
    describing, creating, and managing containers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'What is a container? If we start with the application we create and how its
    resources are allocated on a physical computer server, we can see that its code,
    libraries, and data occupy some of the server’s memory, as illustrated in the
    following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – A packaged application in a physical server](img/B21937_01_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – A packaged application in a physical server
  prefs: []
  type: TYPE_NORMAL
- en: 'Virtual machines allow a physical server to host multiple instances of **Virtual
    Machines** (**VMs**). Each VM can have its own individual set of operating systems,
    applications, and accompanying libraries. The VMs are managed by a hypervisor,
    which is an application process run on the physical server. This arrangement is
    shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – VM and application packaging in a physical server](img/B21937_01_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – VM and application packaging in a physical server
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker or other container management systems allow for more efficient resource
    management. The container requires only resources for the application and any
    dependent third-party libraries. Any OS-level resources that are required are
    managed through a managing application. In Docker’s case, the managing software
    is Docker Engine. This arrangement is outlined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Container and server packaging](img/B21937_01_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – Container and server packaging
  prefs: []
  type: TYPE_NORMAL
- en: Note that the server that hosts Docker Engine and its containers can be a physical
    server or a VM. This allows for portability, where the only artifact that can
    move from environment to environment is the definition of the container, known
    as the container image.
  prefs: []
  type: TYPE_NORMAL
- en: With the portability of containers, developers can create their application
    and deploy it into an artifact that can be version-controlled and easily transferred
    to testing or production. The application under development can be compartmentalized
    as a service.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes emerged from Google in 2015 as a way of creating and managing clusters
    composed of containers. The clusters allowed for the dynamic creation of Pods
    from containers to make flexible and resilient services or microservices.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen the underlying tenets of DevOps and the main facets of
    technology that drive its acceptance and popularity, it’s time to examine how
    the tools from Atlassian can form a toolchain for a DevOps approach.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Open DevOps toolchain from scratch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first link to a toolchain using Atlassian tools and Open DevOps is to set
    up an organization in the Atlassian Cloud. The first Atlassian product in the
    organization will be Jira.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will explore how to create the organization and an Atlassian
    Cloud site with Jira installed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s go to the Atlassian website to create an Open DevOps environment with
    multiple connected tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Atlassian’s Open DevOps solution is described at [https://www.atlassian.com/solutions/devops](https://www.atlassian.com/solutions/devops).
    This site allows you to see what Open DevOps is, what third-party integrations
    make up part of the solution, and what DevOps best practices Open DevOps plays
    a role in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From this page, you can request the creation of a new Atlassian Cloud site
    with the Jira product, installed by selecting the **Try for free** button on the
    page, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Atlassian’s Open DevOps page with the Try it free button](img/B21937_01_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – Atlassian’s Open DevOps page with the Try it free button
  prefs: []
  type: TYPE_NORMAL
- en: 'The page will open, allowing you to connect an existing Bitbucket workspace
    or create a new one by typing its name. This panel is shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Selecting a Bitbucket workspace](img/B21937_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – Selecting a Bitbucket workspace
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Bitbucket workspace to tie into your toolchain. This is the default
    option when creating a new toolchain. You can also select an existing Bitbucket
    workspace if you have one. After you’ve made your choice, select **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next panel prompts you to name the new Atlassian Cloud suite. The text
    before **.atlassian.net** must be unique. This panel is depicted as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.7 – Naming your Atlassian Cloud suite panel](img/B21937_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – Naming your Atlassian Cloud suite panel
  prefs: []
  type: TYPE_NORMAL
- en: Name your Atlassian Cloud site and press **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A new panel should indicate success, prompting you to go to Jira on your cloud
    site and create a project, as seen in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.8 – The Open DevOps Site success panel](img/B21937_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 – The Open DevOps Site success panel
  prefs: []
  type: TYPE_NORMAL
- en: During the entire process, the panel has specified that no credit card is needed,
    and we haven’t had to include payment information. What gets created on our Atlassian
    Cloud site are the free plans for Jira, Confluence, and Bitbucket and the DevOps
    plan for Opsgenie, which is free for five users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Following this recipe has allowed for the creation of an entire toolchain, starting
    with Jira, Bitbucket, Confluence, and Opsgenie.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Atlassian Cloud site with Jira only
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A more modular approach than creating an Atlassian Cloud site with multiple
    products can be to create a new Atlassian Cloud site and install Jira only. Other
    installations of other Atlassian products can be done on an as-needed basis.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we will go to a different landing page and follow the prompts, as
    seen in the following recipe steps.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install Jira only on a new Atlassian Cloud site, follow these alternate
    instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Atlassian’s product page for Jira is located at [https://www.atlassian.com/software/jira](https://www.atlassian.com/software/jira).
    Select the **Get it free** button, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.9 – Selecting the free plan from the Jira Products page](img/B21937_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.9 – Selecting the free plan from the Jira Products page
  prefs: []
  type: TYPE_NORMAL
- en: On the next panel, if you’re logged into an Atlassian account, it will reveal
    that account and prompt you to enter the name of the new Atlassian Cloud site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.10 – Creating a new Atlassian Cloud site](img/B21937_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.10 – Creating a new Atlassian Cloud site
  prefs: []
  type: TYPE_NORMAL
- en: As seen in the preceding figure, fill in the Atlassian account and the desired
    name for your Cloud site and click **Agree**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Following the instructions will create an Atlassian Cloud site with the name
    you have specified, granting you administrator privileges. The next section looks
    at the scenario where you have to create an Atlassian account if you don’t have
    one.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you don’t have an Atlassian account or haven’t logged into your Atlassian
    account, you will be taken to a different page to create a free Atlassian account:'
  prefs: []
  type: TYPE_NORMAL
- en: You can enter a work email or use common accounts with OpenID service providers,
    such as Google, Microsoft, Apple, or Slack.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the account is created, Atlassian will prompt you to create an Atlassian
    Cloud site with a free plan of Jira installed, as seen before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a Jira project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you have created an Atlassian Cloud site with only Jira or Jira with
    Confluence, and connections to Opsgenie and Bitbucket.
  prefs: []
  type: TYPE_NORMAL
- en: We will start the process of creating our toolchain by setting up the Jira projects
    that will use the toolchain. Let’s look at doing this now.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following steps, you will create a Jira project that not only captures
    the work done by the development team but allows integrations with artifacts from
    other tools:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the Atlassian Cloud site you created in the previous recipes in this
    chapter. You may be prompted to create the site’s first Jira project by selecting
    a project template, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.11 – Selecting a project template](img/B21937_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.11 – Selecting a project template
  prefs: []
  type: TYPE_NORMAL
- en: Select a project template that matches the Agile methodology your team wants
    to practice (**KANBAN** or **SCRUM**) and press **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: In general, teams that look to develop on a cadence with frequent stakeholder
    feedback opt for Scrum, and teams that look to monitor and track a steady flow
    of work will choose a Kanban project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following page allows you to select other options, such as a name and whether
    the project is company-managed or team-managed. Company-managed Jira projects
    will have project elements such as custom fields, workflows, notifications, and
    permissions set up by Jira administrators. Team-managed projects allow all customizations
    to be done by team administrators, but these changes are only available to the
    project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.12 – Creating Jira project details](img/B21937_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.12 – Creating Jira project details
  prefs: []
  type: TYPE_NORMAL
- en: 'If you created an Open DevOps platform on your Atlassian Cloud site, it would
    automatically create the other artifacts such as Confluence spaces, Bitbucket
    repositories, and Opsgenie teams. The next panel, as depicted in the following
    figure, shows this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.13 – The open DevOps artifacts created](img/B21937_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.13 – The open DevOps artifacts created
  prefs: []
  type: TYPE_NORMAL
- en: 'If you created an Atlassian Cloud site with only Jira, you won’t see the preceding
    screen (don’t worry; we’ll show you how to connect the other tools in other recipes
    in this chapter). Instead, you will see other tools you can connect to your Jira
    project, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.14 – Connecting other tools](img/B21937_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.14 – Connecting other tools
  prefs: []
  type: TYPE_NORMAL
- en: You can select the tools to connect and press **Next** to integrate with other
    tools or select **Skip** to do the integrations later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By following the preceding steps, you should have a Jira project ready to connect
    to the necessary tools by means of the Issues or work artifacts, stored in Jira.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipes allow you to make connections when the Open DevOps platform
    wasn’t selected to create the Atlassian Cloud site, or when the Jira product and
    projects were already created.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting Confluence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Confluence is Atlassian’s second-oldest tool. Previously, it has complemented
    Jira as the repository of documentation artifacts for development activities recorded
    in Jira.
  prefs: []
  type: TYPE_NORMAL
- en: Confluence works by organizing individual pages into **spaces**. Spaces can
    be set up for any number of purposes, such as a knowledge base or product documentation.
  prefs: []
  type: TYPE_NORMAL
- en: The first step will be to add Confluence to the Atlassian Cloud site. Once added,
    a new space can be created for the new Jira project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Different administrators set up different things for Confluence. Let’s take
    a brief look at the various levels of administration for Atlassian Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Organization administrators are responsible for the overall organization and
    the Atlassian Cloud sites contained within. They set up users to access specific
    Atlassian products and add products to Atlassian Cloud sites.
  prefs: []
  type: TYPE_NORMAL
- en: Confluence administrators are responsible for creating the spaces on an instance
    of Confluence and managing the permissions of users for those spaces, based on
    roles.
  prefs: []
  type: TYPE_NORMAL
- en: We will identify what level of administration is needed for each part of this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will approach this recipe in two parts – the first part is where we add Confluence
    to the Atlassian Cloud site that also has Jira. The second part of this recipe
    is creating a Confluence space and connecting it to a Jira project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Confluence to the Atlassian Cloud site
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s look at adding Confluence to the same Atlassian Cloud site where we added
    Jira only in the *Creating a new Atlassian Cloud site with Jira* *only* recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: As the Organization admin, go to [https://start.atlassian.com](https://start.atlassian.com)
    to find the Switcher icon in the top-left corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.15 – Switching Atlassian applications on the start page](img/B21937_01_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.15 – Switching Atlassian applications on the start page
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on the icon, as seen in the preceding figure, reveals the application
    options. Select **More Atlassian products**, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.16 – Selecting the Atlassian product](img/B21937_01_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.16 – Selecting the Atlassian product
  prefs: []
  type: TYPE_NORMAL
- en: On the page that opens, look for the option for Confluence and press **Try**
    **it now**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.17 – Trying Confluence](img/B21937_01_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.17 – Trying Confluence
  prefs: []
  type: TYPE_NORMAL
- en: 'Type in the site name where you want to add Confluence and select **Continue**,
    as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.18 – Add Confluence to a site](img/B21937_01_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.18 – Add Confluence to a site
  prefs: []
  type: TYPE_NORMAL
- en: The results of these instructions should be the Confluence product added to
    your Atlassian Cloud site.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s take a look at filling Confluence with data, in the form of spaces
    and pages.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Confluence space and connecting it to the Jira project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s start adding data to Confluence by creating our first space:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As an organization admin or a Confluence admin, from the **Home** selection
    on the menu bar, click on the **+** symbol in the **SPACES** section, as shown
    in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.19 – Selecting + to create a space](img/B21937_01_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.19 – Selecting + to create a space
  prefs: []
  type: TYPE_NORMAL
- en: On the following page, select a space template or leave it as a **Blank** template.
    Click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.20 – Selecting a Confluence template](img/B21937_01_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.20 – Selecting a Confluence template
  prefs: []
  type: TYPE_NORMAL
- en: Give the template a name. You can also specify the space’s key. Click on **Create
    space** to complete the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.21 – Completing the space creation](img/B21937_01_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.21 – Completing the space creation
  prefs: []
  type: TYPE_NORMAL
- en: As a Jira project admin, Jira admin, or organization admin, navigate to the
    desired Jira project. Select **Project pages**. Then, select **Connect to Confluence**
    or use the arrow icons to view the Confluence spaces or pages you want to connect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.22 – Connecting the Confluence space](img/B21937_01_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.22 – Connecting the Confluence space
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the space created and click **Connect**, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.23 – Completing the connection to a space](img/B21937_01_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.23 – Completing the connection to a space
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully connected Confluence to Jira by defining a space and linking
    it to the project. Further applications of the benefits that can arise from this
    integration will be seen in the recipes in [*Chapter 3*](B21937_03.xhtml#_idTextAnchor056).
  prefs: []
  type: TYPE_NORMAL
- en: Connecting Bitbucket
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, Bitbucket maintains a separate location from the other tools at the
    Atlassian Cloud site, at [https://bitbucket.org](https://bitbucket.org). On Bitbucket,
    there are by default administrators and users in a developers group.
  prefs: []
  type: TYPE_NORMAL
- en: On the Bitbucket side, a member of the Administrators group must create the
    repository or repo. This repo may be grouped within other repositories in a Bitbucket
    project. The top level in Bitbucket is a workspace. This may be analogous to the
    top level of an organization.
  prefs: []
  type: TYPE_NORMAL
- en: On the Jira side, we need a Jira Project admin to connect the repository to
    the Jira project.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at the steps involved.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s look at the steps involved in connecting Bitbucket.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a repository in Bitbucket
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Implement the following steps to create a repository in Bitbucket:'
  prefs: []
  type: TYPE_NORMAL
- en: As a Bitbucket administrator, select the **Repositories** menu bar and click
    the **Create** **repository** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.24 – Creating a Bitbucket repository](img/B21937_01_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.24 – Creating a Bitbucket repository
  prefs: []
  type: TYPE_NORMAL
- en: In the page that follows, fill in the repository name and select the project
    for the repo (these are the only mandatory items) and other desired details. Click
    the **Create repository** button when finished.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.25 – Completing the repository creation](img/B21937_01_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.25 – Completing the repository creation
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a Bitbucket repository, let’s connect it to a Jira project.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting a repository to a Jira project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to integrate Bitbucket data from the repository into a Jira
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: As a Jira admin, from the Jira project, select **Project settings** from the
    options on the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.26 – Selecting Project settings](img/B21937_01_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.26 – Selecting Project settings
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Development tools**, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.27 – Selecting Development tools](img/B21937_01_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.27 – Selecting Development tools
  prefs: []
  type: TYPE_NORMAL
- en: By default, Bitbucket is shown to be connected to Jira on the **Development
    tools** page. We can make adjustments to the connection by selecting the **Connect**
    pulldown and choosing **Bitbucket Cloud** from the options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.28 – Connect Bitbucket Cloud](img/B21937_01_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.28 – Connect Bitbucket Cloud
  prefs: []
  type: TYPE_NORMAL
- en: In the **Jira requests access** page, authorize Jira to access the Bitbucket
    workspace where you created the repo by selecting the workspace and clicking **Grant
    Access**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.29 – Grant Bitbucket workspace access to Jira](img/B21937_01_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.29 – Grant Bitbucket workspace access to Jira
  prefs: []
  type: TYPE_NORMAL
- en: On the **DVCS accounts** page, select the repository or repositories to allow
    **Smart Commits**, and then click the **Link Bitbucket Cloud** **workspace** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.30 – Add Repository and Link Bitbucket Cloud workspace](img/B21937_01_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.30 – Add Repository and Link Bitbucket Cloud workspace
  prefs: []
  type: TYPE_NORMAL
- en: By connecting a Bitbucket repository to a Jira project, as you did by following
    the preceding instructions, you connect the reason for doing the work (the why)
    with the implementation of the work (the how).
  prefs: []
  type: TYPE_NORMAL
