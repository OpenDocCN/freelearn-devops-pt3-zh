- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Achieving Continuous Integration and Delivery with Mobile DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In continuous delivery, code changes in mobile apps are automatically built,
    tested, and released. With Mobile DevOps, software developers, testers, release
    managers, and DevOps engineers work together to improve mobile app development
    speed and quality. Mobile app delivery can be continuously delivered when these
    practices are combined.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Factors to consider when selecting a CI/CD provider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing a CI/CD provider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a CI/CD pipeline for mobile apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the build and unit tests for mobile apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CI/CD for mobile apps is a process that enables the organization to quickly
    and efficiently release and update their mobile applications. It also allows teams
    to quickly test and release their mobile applications, ensuring the code is stable,
    secure, and up to date. Furthermore, it allows teams to quickly address any bugs
    or issues found in their mobile applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the rapidly evolving world of mobile app development, **Continuous Integration**
    (**CI**) and **Continuous Deployment** (**CD**) have emerged as vital practices
    to streamline the development process, improve code quality, and enable rapid,
    iterative releases. This chapter will explore the significance of CI/CD in mobile
    app development, illustrating its benefits and providing real-world examples to
    demonstrate its impact on the mobile development life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned in [*Chapter 3*](B18113_03.xhtml#_idTextAnchor083), *Mobile DevOps
    Fundamentals*, we will discuss the steps to implement CI and CD in Mobile DevOps,
    but first, let’s discuss how to choose a CI/CD provider for your mobile app that
    is also suited to your team’s scale and business:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – The continuous integration workflow](img/Figure_4.01_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – The continuous integration workflow
  prefs: []
  type: TYPE_NORMAL
- en: 'We will begin with the CI part for automating the build and test processes,
    which includes doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a CI/CD provider for mobile apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a CI server for mobile apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the build and unit tests for mobile apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before that, let’s discuss how to choose CI/CD for Mobile apps, how to set up
    the CI server with the most popular CI/CD providers in the market, and the pros
    and cons of each.
  prefs: []
  type: TYPE_NORMAL
- en: 'Choosing the right CI/CD provider for your mobile app is extremely important
    to ensure a seamless development, testing, and release process. The following
    are some factors to consider when choosing a CI/CD provider for a mobile app development
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platform support**: Make sure the CI/CD provider supports the platforms your
    app targets (for example, iOS, Android, React Native, Flutter, and so on). Certain
    providers specialize in one platform, such as Xcode Cloud, while others support
    multiple platforms, such as Bitrise. Consider this factor if your team is building
    multiple mobile apps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance and reliability**: A provider should be able to deliver high
    performance, minimal downtime, and quick build times. For example, CI/CD platforms
    provide us with insights and mentoring features to track our CI/CD performance
    and health status. This will ensure a smooth and efficient development process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build configuration and environment**: To select the right CI/CD provider
    for your mobile apps, consider the available build configuration and build environment
    options. Look for a provider with flexible build pipelines and customizable environments
    that support your project’s needs. These features can save you time and effort
    while ensuring a streamlined build process and successful project deployment.
    For instance, most companies are building white label apps that require them to
    build the apps with different configurations so that they can reuse the same build
    pipeline with different values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability**: Scaling and growing your team requires this factor to make
    sure the CI/CD provider can handle the growing complexity, build frequency, and
    the number of developers of your app. Your provider should offer scalable infrastructure
    and resources to meet your growing needs, sometimes providing dedicated machines
    for your teams or changing the machines types and the technical specifications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration**: Providers should integrate seamlessly with your existing tools,
    such as version control systems, project management tools, bug tracking tools,
    cloud tools, monitoring tools, or feature flagging tools, to be able to measure
    the success of the whole Mobile DevOps process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security and compliance**: The provider should adhere to strict security
    standards and offer features such as encryption, access control, and audit logs.
    Ensure the provider supports your app’s compliance with specific regulations,
    especially if it’s a cloud provider and your data and customers’ data will be
    stored in the cloud, such as in e-banking apps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ease of use**: Choose a provider with a user-friendly interface, comprehensive
    documentation, and good support. CI/CD pipelines can be set up, maintained, and
    troubleshooted more easily if you follow these steps; Bitrise and Codemagic, for
    example, provide GUIs for building them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Community and support**: You can easily resolve issues and get answers to
    your questions from a provider with an active community and strong customer support.
    You can find out whether professional services or consulting are available through
    professional forums, support channels, or community forums.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pricing**: In my opinion, this factor is important, and even if the CI/CD
    provider has different features when it comes to purchasing a tool, various factors
    affect this decision, so you need to compare the pricing plans of different CI/CD
    providers while taking factors such as the number of builds per month, parallel
    builds, build minutes, and storage into consideration. The best provider will
    offer the most value for your budget without compromising on features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a result, deciding on a CI/CD provider is ultimately a decision that needs
    to be made by a team based on the business and team needs.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the six most popular CI/CD providers for mobile apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Having discussed the factors that need to be considered, let’s explore the
    CI/CD providers available in the mobile CI/CD market. The following are six of
    the most popular mobile CI/CD providers:'
  prefs: []
  type: TYPE_NORMAL
- en: Bitrise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Codemagic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub Actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xcode Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio App Center
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ionic AppFlow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To find the best fit for your mobile app project, you need to evaluate each
    provider based on the aforementioned factors.
  prefs: []
  type: TYPE_NORMAL
- en: Bitrise
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Bitrise ([https://bitrise.io/](https://bitrise.io/)) is a cloud-based CI/CD
    platform specifically designed for mobile application development. It streamlines
    the process of building, testing, and deploying iOS, Android, and cross-platform
    apps, helping developers ensure their applications are reliable and high-quality:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Bitrise home page](img/Figure_4.02_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – Bitrise home page
  prefs: []
  type: TYPE_NORMAL
- en: Bitrise’s mobile-first approach makes it a CI/CD solution for mobile app developers
    and offers specialized features and tools tailored to mobile development workflows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bitrise provides seamless integrations with popular version control systems
    such as GitHub, GitLab, self-hosted GitLab, and Bitbucket, as shown in *Figure
    4**.3*, as well as with mobile app development tools such as fastlane, Xcode,
    and Android SDKs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Bitrise’s version control system](img/Figure_4.03_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.3 – Bitrise’s version control system
  prefs: []
  type: TYPE_NORMAL
- en: 'Bitrise’s visual workflow editor allows developers to easily design and configure
    their CI/CD pipelines without manually editing configuration files, as shown in
    *Figure 4**.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Bitrise’s workflow editor](img/Figure_4.04_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.4 – Bitrise’s workflow editor
  prefs: []
  type: TYPE_NORMAL
- en: 'Bitrise offers a wide range of pre-built and community steps that can be easily
    added to workflows, simplifying the process of setting up common mobile app development
    tasks, as shown in *Figure 4**.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Bitrise’s integration steps](img/Figure_4.05_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.5 – Bitrise’s integration steps
  prefs: []
  type: TYPE_NORMAL
- en: Bitrise supports iOS simulators and Android emulators, simplifying the testing
    of mobile apps on various devices and setups.
  prefs: []
  type: TYPE_NORMAL
- en: The platform offers a complimentary (hobby) plan with 90-minute build durations,
    300 monthly credits, and up to 5 simultaneous builds with macOS M1 VMs, making
    it cost-effective for small projects and individual users.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading to a premium plan enables more frequent or extended builds for larger
    projects or teams. However, Bitrise’s pricing can become costly for sizable teams
    or projects that need additional build capabilities or features.
  prefs: []
  type: TYPE_NORMAL
- en: By seamlessly integrating with well-known app stores and beta testing services
    such as Google Play, Apple App Store, and TestFlight, Bitrise streamlines the
    release process.
  prefs: []
  type: TYPE_NORMAL
- en: Developers can leverage Bitrise Insights to pinpoint and address bottlenecks,
    enhance build processes, and use credits more effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Data and configuration settings can be stored securely, ensuring unauthorized
    individuals cannot access them. Using Bitrise’s team management functionality,
    developers can collaborate on projects and control access to specific workflows
    and environments.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s look at an example of creating a Bitrise application for Android and configuring
    it.
  prefs: []
  type: TYPE_NORMAL
- en: The prerequisites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You will require the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A Bitrise account ([https://app.bitrise.io/users/sign_up](https://app.bitrise.io/users/sign_up))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GitHub account ([https://github.com/join](https://github.com/join))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Android app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Google Play Console account or Apple Developer ID to be able to release your
    mobile apps to the relevant app stores afterward
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started with Bitrise for Android, you need to select **Add new app**,
    as shown in *Figure 4**.6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Add new app](img/Figure_4.06_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.6 – Add new app
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, select the workspace type to specify whether the app will have private
    or public access, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.7 – Selecting the app’s privacy](img/Figure_4.07_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.7 – Selecting the app’s privacy
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is selecting the repository from the provider, such as GitHub,
    as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Selecting a repository](img/Figure_4.08_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.8 – Selecting a repository
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, choose to add an SSH key to be able to access the source code, as shown
    in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.9 – Adding an SSH key](img/Figure_4.09_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.9 – Adding an SSH key
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the branch name from the list and choose the **Yes, auto-detect configuration**
    option to let Bitrise automatically detect the application type, as shown in the
    following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.10 – Choosing a branch](img/Figure_4.10_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.10 – Choosing a branch
  prefs: []
  type: TYPE_NORMAL
- en: 'Bitrise will detect that the app is an Android one and will give you the appropriate
    machine type and stack. Now, you can add the app module and variant, as shown
    in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.11 – Selecting the app’s module](img/Figure_4.11_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.11 – Selecting the app’s module
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the project configuration, including the Android stack and all the
    other information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.12 – Confirming the configuration](img/Figure_4.12_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.12 – Confirming the configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'The next screen will be **App icon**. Here, you can upload a custom image or
    use the icon from the app''s directory, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.13 – App icon](img/Figure_4.13_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.13 – App icon
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you must register a webhook and trigger the first build, as shown in
    *Figure 4**.14* and *Figure 4**.15*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.14 – Registering a webhook](img/Figure_4.14_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.14 – Registering a webhook
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.15 – Running the first build](img/Figure_4.15_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.15 – Running the first build
  prefs: []
  type: TYPE_NORMAL
- en: 'The first build will be started. At this point, you can check the build log
    and the build’s details, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.16 – Build log details](img/Figure_4.16_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.16 – Build log details
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the build has finished, you can check the build’s status to see whether
    it was a success or a failure, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.17 – Success build on Bitrise](img/Figure_4.17_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.17 – Success build on Bitrise
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, you can click on the **Workflow Editor** button to view or modify
    the CI workflow by adding or removing steps, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.18 – Android workflow](img/Figure_4.18_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.18 – Android workflow
  prefs: []
  type: TYPE_NORMAL
- en: 'From the **Workflow Editor** area, you can configure the trigger map or when
    you run the workflow based on Gitflow, such as running on every pull request,
    a new tag, or when pushing new code, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.19 – How to trigger the build on Bitrise](img/Figure_4.19_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.19 – How to trigger the build on Bitrise
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, you can add secret environment variables for any third-party
    tools or services such as a Slack webhook, as shown in *Figure 4**.20* and *Figure
    4**.21*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.20 – Adding secret environment variables](img/Figure_4.20_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.20 – Adding secret environment variables
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.21 – Adding a Slack webhook](img/Figure_4.21_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.21 – Adding a Slack webhook
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also change the stack and machine types, as shown in the following
    figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 4.22 – Changing the stack and machine\uFEFF types](img/Figure_4.22_B18113.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 4.22 – Changing the stack and machine types
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have any unit or UI tests in the workflow, you can access the test results,
    which are automatically generated, in the **Test Reports** add-on, as shown in
    the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.23 – The Test Reports add-on](img/Figure_4.23_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.23 – The Test Reports add-on
  prefs: []
  type: TYPE_NORMAL
- en: 'Bitrise also has a `bitrise.yml` file that saves all of the configurations
    you did in a `yml` file; you can save it with the source code or on the Bitrise
    website. Here’s a link to an example of a `bitrise.yml`file: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-4/bitrise.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-4/bitrise.yml).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Other apps, such as iOS, macOS, Flutter, React Native, Ionic, and Cordova, use
    the same process, but the steps vary depending on the type.
  prefs: []
  type: TYPE_NORMAL
- en: Codemagic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Codemagic ([https://codemagic.io/start/](https://codemagic.io/start/)) is a
    fully cloud-hosted and managed CI/CD solution specifically designed for mobile
    app development, emphasizing cross-platform projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The platform streamlines the process of constructing, examining, and releasing
    iOS, Android, and cross-platform apps, empowering developers to produce high-quality
    mobile applications efficiently. This analysis will cover the advantages, disadvantages,
    and features of Codemagic, as well as how Codemagic measures up against other
    CI/CD alternatives in the market:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.24 – Codemagic home page](img/Figure_4.24_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.24 – Codemagic home page
  prefs: []
  type: TYPE_NORMAL
- en: Developers can easily configure Flutter builds via the user interface or the
    highly customizable `codemagic.yaml` file, allowing for app creation on Android,
    iOS, web, and desktop platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Codemagic seamlessly integrates with well-known version control systems such
    as GitHub, GitLab, and Bitbucket and is compatible with various app stores, beta
    testing services, and notification tools.
  prefs: []
  type: TYPE_NORMAL
- en: The platform’s uncomplicated setup procedure allows developers to swiftly establish
    their CI/CD pipelines without requiring in-depth technical knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: With Codemagic, developers can design custom workflows using either YAML configuration
    files or the web-based configuration editor, granting flexibility and authority
    over the CI/CD process.
  prefs: []
  type: TYPE_NORMAL
- en: The platform offers a generous free tier, including 500 build minutes per month,
    a 120-minute build timeout, and macOS M1 virtual machines, making it suitable
    for smaller projects and individual developers, but you need to enable billing
    to have the full features.
  prefs: []
  type: TYPE_NORMAL
- en: Codemagic provides dedicated support for Flutter projects, automatically detecting
    project settings and applying optimizations for building and testing Flutter apps.
  prefs: []
  type: TYPE_NORMAL
- en: The platform supports iOS simulators and Android emulators, enabling developers
    to assess their mobile applications on various devices and configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Codemagic integrates with popular app stores such as Google Play and Apple App
    Store, as well as beta testing services such as TestFlight, simplifying the deployment
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Sensitive data and configuration settings can be securely stored, ensuring they
    are not disclosed in logs or accessed by unauthorized users.
  prefs: []
  type: TYPE_NORMAL
- en: Codemagic also includes unlimited team seats and an access management feature
    that facilitates project collaboration and allows developers to regulate access
    to specific workflows and environments.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, we’ll build and test a Flutter application using Codemagic
    and configure it according to our needs.
  prefs: []
  type: TYPE_NORMAL
- en: The prerequisites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A Codemagic account ([https://codemagic.io/signup](https://codemagic.io/signup))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GitHub account ([https://github.com/join](https://github.com/join))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Flutter app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Google Play Console account or Apple Developer ID to be able to release your
    mobile apps to the relevant app stores afterward
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating your account, you can start setting up your first app on Codemagic
    by selecting the repository and the project type, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.25 – Choosing the repository and project type](img/Figure_4.25_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.25 – Choosing the repository and project type
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, from the **Workflow Editor** area, select your preferred configuration
    such as iOS, Android, or both from your Flutter app, as well as your machine type,
    as shown in *Figure 4**.26* and *Figure 4**.27*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.26 – Codemagic’s Workflow Editor area](img/Figure_4.26_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.26 – Codemagic’s Workflow Editor area
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.27 – Machine types on Codemagic](img/Figure_4.27_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.27 – Machine types on Codemagic
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you can configure the build triggers or make the build fail if the tests
    fail, as shown in *Figure 4**.28* and *Figure 4**.29*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.28 – Build trigger](img/Figure_4.28_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.28 – Build trigger
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.29 – Configuring the tests](img/Figure_4.29_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.29 – Configuring the tests
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you can configure the Android Flutter configuration, including **Flutter
    version**, **Project path**, and **Android build format**, as shown in the following
    figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.30 – Specifying the Flutter configuration](img/Figure_4.30_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.30 – Specifying the Flutter configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, you can set up notifications and select whether you need to send
    emails or Slack notifications, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.31 – Configuring notifications](img/Figure_4.31_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.31 – Configuring notifications
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can trigger your first build by selecting the workflow’s name and
    the branch’s name, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.32 – Starting a new build](img/Figure_4.32_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.32 – Starting a new build
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can check the build log and its status, as shown in *Figure 4**.33*
    and *Figure 4**.34*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.33 – Build view](img/Figure_4.33_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.33 – Build view
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.34 – Successful build](img/Figure_4.34_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.34 – Successful build
  prefs: []
  type: TYPE_NORMAL
- en: 'With Codemagic, similar to Bitrise, you can save the `.yaml` file on the Codemagic
    website via the `codemagic.yml` file, as shown in *Figure 4**.35* and *Figure
    4**.36*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.35 – Changing the settings to codemagic.yaml from the Workflow Editor
    area](img/Figure_4.35_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.35 – Changing the settings to codemagic.yaml from the Workflow Editor
    area
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.36 – YAML file](img/Figure_4.36_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.36 – YAML file
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of the YAML file for building Flutter via iOS and Android:
    [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-4/codemagic.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-4/codemagic.yml).'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'GitHub Actions ([https://github.com/features/actions](https://github.com/features/actions))
    is an automation platform designed to streamline mobile development by enabling
    CI/CD workflows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.37 – GitHub Actions home page](img/Figure_4.37_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.37 – GitHub Actions home page
  prefs: []
  type: TYPE_NORMAL
- en: As a part of the GitHub ecosystem, GitHub Actions is tightly integrated with
    the platform, making it easy for mobile developers to set up and use their existing
    repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'GitHub Actions allows developers to create custom workflows using simple YAML
    syntax, enabling highly specific and complex automation tasks. While there is
    a GUI available during the CI build to display the steps and connections, it''s
    not currently feasible to construct the workflow using GUI platforms such as Codemagic
    or Bitrise:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.38 – The workflows folder inside the app repository](img/Figure_4.38_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.38 – The workflows folder inside the app repository
  prefs: []
  type: TYPE_NORMAL
- en: The GitHub Actions Marketplace offers a wide range of pre-built actions that
    the community contributes, which can be easily incorporated into workflows, saving
    time and effort.
  prefs: []
  type: TYPE_NORMAL
- en: 'GitHub Actions supports various platforms, including Windows, macOS, and Linux,
    similar to Codemagic, allowing mobile developers to test and release projects
    on multiple environments such as Flutter apps. You can build and release mobile,
    web, and desktop apps from a single code base:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.39 – Machine types in GitHub Actions](img/Figure_4.39_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.39 – Machine types in GitHub Actions
  prefs: []
  type: TYPE_NORMAL
- en: Self-hosted runners are available on GitHub, and you can customize the environment
    to run jobs in your GitHub Actions workflow.
  prefs: []
  type: TYPE_NORMAL
- en: It offers a generous free tier, with 2,000 minutes per month for private repositories
    for individuals and organizations. However, larger projects and teams may quickly
    exceed the allotted minutes and be required to upgrade to a paid plan.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, GitHub offers features such as Codespace, a cloud developer environment
    with flexible compute and preconfigured containers, package storage, GitHub issues
    such as bugs or security issues, and project management, and the new GitHub Copilot
    add-on, which gets suggestions for whole lines or entire functions inside your
    editor.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up GitHub Actions may require a steep learning curve for users unfamiliar
    with YAML or CI/CD concepts. As GitHub Actions is part of the GitHub ecosystem,
    migrating to a different version control platform may prove challenging.
  prefs: []
  type: TYPE_NORMAL
- en: While the Marketplace offers many pre-built actions, GitHub Actions may not
    have native support for some third-party services, requiring users to create custom
    actions or find alternative solutions.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Actions supports many triggers, including push and pull requests, issue
    creation, and scheduled events. This feature lets developers simultaneously test
    their code on multiple versions of programming languages, platforms, and configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Caching is another feature offered by GitHub Actions. It allows you to cache
    dependencies, speed up build times, and reduce resource usage. GitHub Actions
    stores build artifacts and logs, making it easy to access and share results with
    team members.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to providing security, GitHub includes features such as code scanning,
    secret scanning, dependency review with dependabot alerts, and preventing sensitive
    data or configuration settings from being exposed in logs or shared with unauthorized
    individuals.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s look at an example of setting up GitHub Actions for an Android app to
    build and run unit and lint tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'The prerequisites:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A GitHub account ([https://github.com/join](https://github.com/join))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Android app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Google Play Console account or Apple Developer ID to be able to release your
    mobile apps to the relevant app stores afterward
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you already have an Android application, you can click on the **Actions**
    button to start using GitHub Actions, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.40 – Getting started with GitHub Actions](img/Figure_4.40_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.40 – Getting started with GitHub Actions
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on `Android` to find a template for this, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.41 – The default gradle.yaml file](img/Figure_4.41_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.41 – The default gradle.yaml file
  prefs: []
  type: TYPE_NORMAL
- en: 'Trigger the build after committing the change. GitHub Actions will start a
    new build. At this point, you can check the log, as shown in *Figure 4**.42* and
    *Figure 4**.43*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.42 – The build log view](img/Figure_4.42_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.42 – The build log view
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.43 – Successful build](img/Figure_4.43_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.43 – Successful build
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a GitHub Actions Android CI YAML file: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-4/.github/workflows/android.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-4/.github/workflows/android.yml).'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For our next example, we will set up GitHub Actions for an iOS app so that
    we can build the app and run the necessary unit tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.44 – Getting started with the iOS app](img/Figure_4.44_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.44 – Getting started with the iOS app
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of the YAML file for the iOS app: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-4/.github/workflows/iOS.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-4/.github/workflows/iOS.yml).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can remove the Install CocoaPods step if your app doesn’t include a podfile.
  prefs: []
  type: TYPE_NORMAL
- en: Xcode Cloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Xcode Cloud ([https://developer.apple.com/xcode-cloud/](https://developer.apple.com/xcode-cloud/))
    is a CI/CD service built by Apple and integrated directly into the Xcode development
    environment. It is designed to streamline the process of building, testing, and
    deploying iOS, macOS, watchOS, and tvOS applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.45 – Xcode Cloud home page](img/Figure_4.45_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.45 – Xcode Cloud home page
  prefs: []
  type: TYPE_NORMAL
- en: Xcode Cloud is fully integrated with the Xcode development environment, providing
    a seamless experience for Apple developers.
  prefs: []
  type: TYPE_NORMAL
- en: The integration with Xcode means that setting up a CI/CD pipeline is straightforward,
    with minimal configuration required.
  prefs: []
  type: TYPE_NORMAL
- en: To use Xcode Cloud, you must have Apple Developer Program membership.
  prefs: []
  type: TYPE_NORMAL
- en: There is a free version of Xcode Cloud, but it only comes with 25 compute hours
    per month. Xcode Cloud is optimized for building and testing Apple platform applications,
    ensuring optimal performance and compatibility. It supports parallel testing across
    multiple devices and configurations, speeding up the testing process and improving
    overall efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: As an Apple service, Xcode Cloud is designed to protect source code and build
    artifacts throughout the CI/CD process. Xcode Cloud is specifically designed for
    Apple platforms and so is unsuitable for Android or other non-Apple application
    development.
  prefs: []
  type: TYPE_NORMAL
- en: Xcode Cloud’s tight integration with Xcode may limit the level of customization
    available compared to more general-purpose CI/CD solutions.
  prefs: []
  type: TYPE_NORMAL
- en: As Xcode Cloud is integrated with Xcode, developers who prefer other development
    environments may find it less appealing.
  prefs: []
  type: TYPE_NORMAL
- en: Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Xcode Cloud provides automated code diagnostics, allowing you to identify issues
    and get recommendations for improvement.
  prefs: []
  type: TYPE_NORMAL
- en: Xcode Cloud integrates with App Store Connect, streamlining the process of distributing
    applications to testers and submitting them to the App Store. It supports collaboration,
    allowing team members to collaborate on projects, share results, and coordinate
    their efforts.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s look at an example of using Xcode Cloud to build, test, and archive an
    iOS application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The prerequisites:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You must have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An Apple Developer ID to be able to release your mobile apps to the App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GitHub account ([https://github.com/join](https://github.com/join))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An iOS app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started with Xcode Cloud, open the iOS app in Xcode and click **Report
    Navigator** in the left-hand side menu, then click **Get Started with Xcode Cloud**.
    After that, you must select a product, which is the app that you want to build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.46 – Xcode Cloud inside the Xcode IDE](img/Figure_4.46_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.46 – Xcode Cloud inside the Xcode IDE
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, the **Workflow Editor** area will open. Here, you can modify
    the steps as you wish, as shown in *Figure 4**.47* and *Figure 4**.48*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.47 – The Workflow Editor area](img/Figure_4.47_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.47 – The Workflow Editor area
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.48 – Editing the workflow](img/Figure_4.48_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.48 – Editing the workflow
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add different steps such as **Build**, **Test**, **Analyze**, and **Archive**
    for your iOS app, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 4.49 – Adding different steps, such as Test \uFEFFand Analyze](img/Figure_4.49_B18113.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 4.49 – Adding different steps, such as Test and Analyze
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to connect Xcode Cloud to your GitHub repositories so that you
    can access your source code and install the Xcode Cloud app, as shown in *Figure
    4**.50*, *Figure 4**.51*, and *Figure 4**.52*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.50 – Granting access to your source code](img/Figure_4.50_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.50 – Granting access to your source code
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.51 – Connecting Xcode Cloud with GitHub](img/Figure_4.51_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.51 – Connecting Xcode Cloud with GitHub
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.52 – Installing the Xcode Cloud app](img/Figure_4.52_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.52 – Installing the Xcode Cloud app
  prefs: []
  type: TYPE_NORMAL
- en: 'Select your repository for the Xcode Cloud app, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.53 – Selecting a repository](img/Figure_4.53_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.53 – Selecting a repository
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, from Xcode Cloud, you can create an app record via App Store Connect
    to be able to release the app to the App Store if you don’t have an existing one,
    as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.54 – Create App on App Store Connect](img/Figure_4.54_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.54 – Create App on App Store Connect
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can start the build by selecting the branch name and clicking the
    **Start Build** button, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.55 – Starting the build](img/Figure_4.55_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.55 – Starting the build
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now view the build log via the Xcode IDE, as shown in the following
    figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.56 – Build view](img/Figure_4.56_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.56 – Build view
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the build has finished, you can check its status to see whether it’s completed
    successfully or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.57 – Successful build](img/Figure_4.57_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.57 – Successful build
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, you can check the test results in the logs and test artifacts,
    as shown in *Figure 4**.58* and *Figure 4**.59*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 4.58 – The Test \uFEFF- iOS view](img/Figure_4.58_B18113.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 4.58 – The Test - iOS view
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 4.59 – The Archive \uFEFF- iOS view](img/Figure_4.59_B18113.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 4.59 – The Archive - iOS view
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'There is no YAML file for the workflow with Xcode Cloud. However, you can modify
    or access the workflows from the Xcode IDE or App Store Connect, as shown in the
    following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_4.60_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.60 – Xcode Cloud on App Store Connect
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio App Center
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visual Studio App Center ([https://appcenter.ms/](https://appcenter.ms/)) is
    a cloud-based CI/CD platform developed by Microsoft, specifically designed for
    mobile app development.
  prefs: []
  type: TYPE_NORMAL
- en: 'It supports iOS, Android, React Native, and Xamarin projects, streamlining
    the process of building, testing, distributing, and monitoring mobile applications.
    This section will discuss the pros, cons, and features of Visual Studio App Center,
    as well as how it compares to other CI/CD solutions on the market:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.61 – App Center home page](img/Figure_4.61_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.61 – App Center home page
  prefs: []
  type: TYPE_NORMAL
- en: The platform boasts a user-friendly setup process, allowing developers to establish
    their CI/CD pipelines quickly. You can integrate with widely used version control
    systems such as GitHub, Bitbucket, and Azure Repos, along with connections to
    app stores and beta testing services.
  prefs: []
  type: TYPE_NORMAL
- en: App Center enables automated testing on devices in the cloud, assisting developers
    in verifying compatibility and performance across multiple target platforms. Although
    its pricing may be costly for larger teams or projects that need increased build
    capacity or features, its streamlined setup process compensates for this drawback.
    However, it might lack the customization options other CI/CD platforms offer.
  prefs: []
  type: TYPE_NORMAL
- en: As App Center focuses on mobile app development, it may not be the ideal choice
    for non-mobile or web development projects. The platform simplifies the process
    of building and signing iOS and Android apps, ensuring consistency throughout
    releases. It facilitates testing on various real devices in the cloud, guaranteeing
    compatibility and performance across target platforms.
  prefs: []
  type: TYPE_NORMAL
- en: App Center streamlines the distribution of applications to beta testers, app
    stores, or enterprise environments, with support for **over-the-air** (**OTA**)
    updates. In addition, it offers crash reporting and analytics features, enabling
    developers to monitor app performance and detect issues in real time. Lastly,
    the platform manages and sends push notifications to users, supporting segmentation
    and targeting.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s learn how to set up Visual Studio App Center for an Android app.
  prefs: []
  type: TYPE_NORMAL
- en: The prerequisites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An App Center account ([https://appcenter.ms/create-account](https://appcenter.ms/create-account))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GitHub account ([https://github.com/join](https://github.com/join))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Android app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Google Play Console account or Apple Developer ID to be able to release your
    mobile apps to the relevant app stores afterward
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating an App Center account, the next step is to add a new app by
    selecting the app type and then connecting the source code provider, as displayed
    in *Figure 4**.62* and *Figure 4**.63*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.62 – Add new app](img/Figure_4.62_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.62 – Add new app
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.63 – Connecting the source code service](img/Figure_4.63_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.63 – Connecting the source code service
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, select the app module, variant, and the other configuration options,
    then click the **Save & Build** button to start a new build, as shown in *Figure
    4**.64* and *Figure 4**.65*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.64 – Configuring the build](img/Figure_4.64_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.64 – Configuring the build
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.65 – Running the build](img/Figure_4.65_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.65 – Running the build
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There is no YAML file for the workflow with App Center; you can only modify
    or access the workflows from the website.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic AppFlow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ionic AppFlow ([https://ionic.io/appflow](https://ionic.io/appflow)) is a cloud-based
    CI/CD platform specifically designed for mobile app development using the Ionic
    framework. It streamlines the process of building, testing, and deploying iOS,
    Android, and **progressive web app** (**PWA**) applications built with Ionic,
    helping developers deliver high-quality applications efficiently:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.66 – AppFlow home page](img/Figure_4.66_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.66 – AppFlow home page
  prefs: []
  type: TYPE_NORMAL
- en: Designed for Ionic framework projects, Ionic AppFlow delivers specialized features
    and enhancements for building and deploying Ionic apps. The platform streamlines
    the setup process, enabling developers to efficiently configure their CI/CD pipelines
    without in-depth technical expertise. Live updates are supported, allowing for
    direct deployment of changes and bug fixes to users’ devices without app store
    reviews.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic AppFlow seamlessly integrates with popular version control systems such
    as GitHub, GitLab, and Bitbucket, as well as app stores, beta testing services,
    and notification tools. It also automates the build process for iOS and Android,
    simplifying mobile app deployment.
  prefs: []
  type: TYPE_NORMAL
- en: However, Ionic AppFlow’s focus on the Ionic framework might not be suitable
    for non-Ionic or non-mobile app development projects. Its pricing can be costly
    for larger teams or projects that require extra build capacity or features compared
    to alternative CI/CD solutions. While it streamlines the setup, Ionic AppFlow
    may lack customization options of other CI/CD platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Developers who favor other mobile app development frameworks might find Ionic
    AppFlow less appealing due to its specific focus on Ionic projects. Nevertheless,
    it offers dedicated support and is optimized for building and deploying Ionic
    apps.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic AppFlow automatically generates iOS and Android builds for distribution
    through app stores or internal testing and deploys updates and bug fixes directly
    to users’ devices without necessitating app store downloads.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s learn how to set up Ionic AppFlow for an Ionic app.
  prefs: []
  type: TYPE_NORMAL
- en: The prerequisites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You must have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An AppFlow account ([https://ionic.io/signup?source=appflow&product=appflow](https://ionic.io/signup?source=appflow&product=appflow))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GitHub account ([https://github.com/join](https://github.com/join))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Ionic app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Google Play Console account or Apple Developer ID to be able to release your
    mobile apps to the relevant app stores afterward
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating your account, you can start creating a new app or import an
    existing one into AppFlow, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.67 – Adding a new app or importing an existing Ionic app](img/Figure_4.67_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.67 – Adding a new app or importing an existing Ionic app
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, click on **Create your first build**, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.68 – Create your first build](img/Figure_4.68_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.68 – Create your first build
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, choose the app type, such as Android, then select the stack and build
    type. Then, click the **Build** button, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: f
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.69 – Choosing the app to build](img/Figure_4.69_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.69 – Choosing the app to build
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the build has started, you can view the build’s log view and build’s status,
    as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.70 – Build log view](img/Figure_4.70_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.70 – Build log view
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have discussed the different CI/CD providers for mobile apps and
    how they work, we can create a workflow to build, test, and release mobile apps.
    You now better understand Mobile DevOps and which CI/CD provider is suitable for
    your apps, business, team, and, as we mentioned earlier, your budget.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In addition, there are different CI/CD providers on the market, but they are
    not mobile-focused, such as CircleCI, GitLab, Azure Pipelines (DevOps), and Jenkins.
    A company may choose one of them if the rest of the teams use it for the backend
    and web applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous examples, we covered the test steps that are integrated into
    the workflow or pipeline quickly because, in [*Chapter 5*](B18113_05.xhtml#_idTextAnchor138),
    *Implementing a Robust Mobile App Testing Strategy*, we will dive deep into testing,
    from designing the testing strategy to running a different type of testing in
    the CI/CD pipeline. As we move on to [*Chapter 6*](B18113_06.xhtml#_idTextAnchor210),
    *Mobile App Release Management*, we will complete the CI/CD cycle and learn more
    about app releases.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CI/CD for mobile apps is a process that enables organizations to quickly and
    efficiently release and update their mobile applications, ensuring that the code
    is stable, secure, and up to date.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right CI/CD provider for a mobile app development project is crucial
    for ensuring a seamless development, testing, and release process. We explored
    the most popular CI/CD providers on the mobile CI/CD market, including Bitrise,
    Codemagic, GitHub Actions, Xcode Cloud, Visual Studio App Center, and Ionic AppFlow.
  prefs: []
  type: TYPE_NORMAL
- en: Each provider offers unique features, pricing plans, and levels of support,
    and it is essential to choose a provider that meets the team’s specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: One of the critical factors to consider is platform support, ensuring that the
    selected provider supports the platforms that the app targets. For example, some
    providers specialize in one platform, such as Xcode Cloud, while others support
    multiple platforms, such as Bitrise. Organizations should also consider performance
    and reliability, build configuration and environment, scalability, integration,
    security, ease of use, community and support, and pricing.
  prefs: []
  type: TYPE_NORMAL
- en: We also discussed implementing CI and provided detailed steps for setting up
    different CI servers for mobile apps, including setting up the necessary build
    and unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: In the next few chapters, we will continue our journey toward implementing full
    CI/CD with test automation, release management, and DevSecOps.
  prefs: []
  type: TYPE_NORMAL
