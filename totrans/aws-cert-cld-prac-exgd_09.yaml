- en: '[*Chapter 7*](B17124_07_Final_SK_ePub.xhtml#_idTextAnchor157): AWS Compute
    Services'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the old days, traditional on-premises environments consisted of a wide range
    of *servers* that used to host a varied gamut of applications, websites, and other
    services. These *servers* were physical hardware such as your home desktop computer
    but were designed with more robust components (such as CPU, memory and storage)
    to host applications for end user consumption.
  prefs: []
  type: TYPE_NORMAL
- en: A **server** is a term given to an application running on computer hardware
    that grants access to a set of services, either to other applications or end users.
    A physical computer can host more than one "server" offering – for example, a
    computer may offer email services and web services on the same physical hardware.
  prefs: []
  type: TYPE_NORMAL
- en: However, traditionally, you were limited in the number of servers you could
    configure your physical computer to host. This was primarily because of limited
    memory, storage, and, more importantly, the fact that applications would conflict
    with one another when accessing the underlying resources. These resources could
    be shared libraries and runtime environments, as well as access to physical hardware
    such as memory, storage, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: With the advent of virtualization, it then became possible to configure **Virtual
    Machines** (**VMs**) on a single physical host – each VM would offer one or more
    services and usually, these services were related to each other to avoid any conflicts.
    So, for example, you could have one virtual server offering email services and
    another offering file-sharing services.
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon Web Services** (**AWS**) offers VMs in the cloud, which we call **Elastic
    Compute Cloud** or **EC2**. In this chapter, we will look at the core offering
    of the EC2 services, which allows us to host applications, websites, and other
    compute-intensive processing services on AWS. This chapter will also cover other
    forms of compute offerings, including a lightweight alternative to EC2, known
    as Lightsail, containers, and serverless offerings such as Lambda.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to **Elastic Compute Service** (**Amazon EC2**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about Amazon **Elastic Block Storage** (**EBS**) and instance backed
    store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about EC2 pricing options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Shared File Storage with **Amazon Elastic File System** (**Amazon
    EFS**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to **Virtual Private Servers** (**VPS**) with Amazon Lightsail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Amazon **Elastic Container Services** (ECS) and Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of additional storage options in AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Amazon EC2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Amazon EC2** is one of AWS''s flagship offerings and allows you to launch
    and set up virtual servers in the cloud. These are very similar to setting up
    and configuring **VMs** in your on-premises environment, which you would configure
    on a hypervisor such as VMware or Hyper-V.'
  prefs: []
  type: TYPE_NORMAL
- en: A hypervisor, as discussed in [*Chapter 1*](B17124_01_Final_SK_ePub.xhtml#_idTextAnchor015),
    *What Is Cloud Computing?*, is a piece of software that allows you to create virtual
    resources such as virtual servers. Depending on the capacity of the underlying
    hardware, you can then host multiple virtual servers on the same physical hardware.
    These virtual servers are granted access to actual physical hardware via the hypervisor,
    which carves out virtualized representations of the physical hardware components
    (CPU, memory, storage, and so on) into smaller virtual components, that are then
    presented to your virtual servers. You can access hypervisor software such as
    VMware and Hyper-V to create your virtual servers, selecting the virtual components
    and configuring them as required. Each virtual server, otherwise known as a VM,
    can then have an operating system installed and configured, along with any required
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon EC2, however, abstracts the underlying hypervisor layer from the customer,
    so you do not have direct access to the hypervisor itself. Using a self-service
    portal or API access, you can launch virtual servers, which we term as **EC2 instances**,
    in your AWS account and specifically, within your **Virtual Private Cloud** (**VPC**)
    (discussed in the previous chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, on a VMware or Hyper-V management console, you would spin up
    a virtual server by specifying the exact amount of CPU and memory to configure
    your virtual server with.
  prefs: []
  type: TYPE_NORMAL
- en: With AWS, you choose from a wide selection of available EC2 instance types and
    families. An EC2 instance family refers to the generic use case of the EC2 instance
    types contained within the family. For example, the *general-purpose* family is
    designed for handling workloads that require a balance of compute, memory, and
    networking resources. Within this *general-purpose* family, you have several EC2
    instance types that refer to the underlying hardware of the host computer used
    for your instance. These EC2 instance types offer different combinations of compute,
    memory, and storage capabilities. So, for example, within the *general-purpose*
    family, you have instance types such as **M5** and **T2**. The **T2** instance
    type runs on Intel Xeon processors, offers a burstable CPU, and is designed to
    offer a balance of compute, memory, and network resources. The **M5** instance
    type runs on Intel Xeon® Platinum 8175M processors and offers up to 384 GiB of
    memory and up to 25 Gbps network bandwidth using Enhanced Networking.
  prefs: []
  type: TYPE_NORMAL
- en: Within each EC2 instance type, you also have instance sizes. When selecting
    an EC2 instance for your application, you need to identify the family, the type,
    and select the size of the instance. For example, within the `t2.micro` and `t2.xlarge`.
    The `t.2micro` instance size, only comes with 1 GiB of memory and 1 vCPU, whereas
    `t2.xlarge` comes with 16 GiB of memory and 4 vCPUs.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss the EC2 instance families, types, and sizes in more detail shortly.
    Suffice to say that you have access to a very large selection of EC2 instance
    types and sizes to meet the requirements of your applications.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to your EC2 instance type, which defines CPU, memory, and other
    hardware-related components, you also need to attach a block storage device such
    as an EBS volume or an instance-store volume, as discussed in the *Learning about
    Amazon Elastic Block Storage and instance backed store* section in this chapter.
    At the very least, you will need one EBS volume to host the operating system and
    make the server bootable into a fully functioning server. We'll review different
    types of block storage for EC2 instances later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to specifying the instance type and family, you also need to choose
    a particular **Amazon Machine Image** (**AMI**) to configure your EC2 instance
    with. AMIs are snapshots that contain base operating systems, utilities, and any
    applications you want to configure your EC2 instance with. We'll look at AMIs
    in more detail shortly.
  prefs: []
  type: TYPE_NORMAL
- en: An important point to note here is that EC2 instances are Region-specific. More
    appropriately, EC2 instances are tied into the Availability Zone you launch them
    in. When you choose to launch a new EC2 instance, you must specify the subnet
    of a VPC in which to launch that EC2 instance. The subnet will be tied to a given
    Availability Zone, as discussed in the previous chapter. So, ultimately, you dictate
    which Availability Zone the EC2 instances gets launched into.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows a high-level infrastructure architecture and the
    key features that support the Amazon EC2 service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – EC2 instance components'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_07_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – EC2 instance components
  prefs: []
  type: TYPE_NORMAL
- en: 'Some key features in the preceding diagram of EC2 instances include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: EC2 instances are VMs built out of the physical host located in the same Availability
    Zone.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With network and storage virtualization technologies, each EC2 instance is allocated
    at least one elastic network interface (virtual network card or virtual **network
    interface card** (**NIC**)) for data. You can have additional virtual NICs for
    configuring multi-homed devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An EC2 instance can be configured to have a portion of the instance store volume
    (attached locally to the host that it runs on) or EBS volumes, which are attached
    to a storage array in the same Availability Zone.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As shown in the preceding diagram, the EC2 instance that was deployed in **Availability
    Zone 2A** has a single elastic network interface and two EBS volumes attached,
    one as the root volume (C Drive on Windows Servers) that's 30 GB in size and another
    as the data volume that's 60 GB in size. We will discuss block storage volumes
    later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at AMIs. AMIs are VM images that are *like*
    your on-premises **virtual hard disk** (**VHD**) images. These VHDs are disk image
    file formats that contain the contents of a hard drive, including the operating
    system files as well as any applications that you wish to configure a server with.
    AMIs are much more than simple VHDs however, as they are also comprised of snapshots,
    permissions, and mappings that specify the volumes to attach to the instance when
    it's launched. On AWS, when you launch an instance, you need to select an AMI
    to configure that instance with. For example, an AMI can contain a Linux operating
    system image and any additional application to configure an instance as a web
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Machine Images (AMIs)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Traditionally, when you are launching a new VM on your on-premises VMware or
    Hyper-V host, you would specify a particular operating system image (such as an
    `.iso` file). This would contain the operating system files necessary to install
    your VM. You may have also modified the machine image with any additional applications
    and/or utilities.
  prefs: []
  type: TYPE_NORMAL
- en: AMIs are the AWS equivalent of VM images, containing the baseline operating
    system and any additional applications.
  prefs: []
  type: TYPE_NORMAL
- en: AMIs are Amazon EBS snapshots or a template of the root volume (for instance,
    store-backed AMIs). These snapshots or templates contain the operating system
    and any necessary applications. In addition, AMIs contain information on block
    device mappings that specify the volumes to attach to the instance when it is
    launched.
  prefs: []
  type: TYPE_NORMAL
- en: 'Amazon offers several pre-configured AMIs as part of its **Quick Start AMIs**
    and these include standard operating systems, such as the official versions of
    various Linux distributions, including **Red Hat Enterprise Linux** (**RHEL**),
    Ubuntu, SUSE, and even Amazon''s flavor called Amazon Linux. In addition, you
    also have access to several editions of Microsoft''s Windows Server operating
    system and even macOS, which runs on a physical Apple Mac Mini in the backend:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – AMIs'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_07_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – AMIs
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, for each AMI, you also have details of
    the release number, whether the root device type is **EBS** or **Instance**, the
    type of virtualization architecture, the volume type (for example, SSD), and if
    the AMI supports Enhanced Networking.
  prefs: []
  type: TYPE_NORMAL
- en: AMIs offered as part of the Quick Start AMIs come with any necessary licensing
    built into the cost of the EC2 instance that you deploy that AMI on. While you
    do not need a separate licensing contract to be drawn up to spin up these servers,
    the hourly charge you pay to Amazon will include the licensing cost.
  prefs: []
  type: TYPE_NORMAL
- en: Note, however, that the licensing that comes with any AMI is only for what is
    already bundled as part of the image. Any additional configurations or the installation
    of additional applications may carry further licensing requirements that need
    to be procured separately.
  prefs: []
  type: TYPE_NORMAL
- en: When you select a particular AMI as part of configuring a new EC2 instance,
    the image is extracted to the instance's newly attached block storage volume and
    made bootable. This, in turn, configures the EC2 instance as a fully functioning
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some additional points to be aware of about AMIs include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: AMIs are Region-specific. This means that if you want to launch a particular
    instance configuration in a Region, the AMI must be available in that Region.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AMIs can be copied across Regions if you need to launch a specific configuration
    in a Region and the required AMI is not available in that Region. For more details
    on how to create and copy AMIs, refer to the Amazon documentation at [https://aws.amazon.com/premiumsupport/knowledge-center/copy-ami-region/](https://aws.amazon.com/premiumsupport/knowledge-center/copy-ami-region/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition to the Quick Start AMIs, you have other sources to obtain these
    machine images. These include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS Marketplace**: This is a software store managed by AWS where third-party
    vendors can sell their applications, often bundled as ready-to-use AMIs. Companies
    such as F5, Citrix, Oracle, and McAfee, among many others, sell their solutions,
    which can be launched with Amazon EC2 instances. Pricing is according to the owner
    of the AMI, plus the cost of the specific EC2 instance type you are running the
    AMI on. You can review the AWS Marketplace offering at [https://aws.amazon.com/marketplace](https://aws.amazon.com/marketplace).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Community AMIs**: It is possible to make your AMIs public and thus make them
    accessible to the wider community via the Community AMI link. There are thousands
    of different AMIs designed to address specialized software and operating system
    bundles that are not generally available via the Quick Start AMIs or Marketplace.
    You can often find a more specific Linux distribution here such as CentOS, which
    is a very popular AMI that businesses use to host applications. Community AMIs
    are free to use but you pay for the EC2 instance charge. In addition, many AMIs
    are provided "as-is," with no additional support, so caution would be required
    when selecting a Community AMI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own AMIs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to obtaining AMIs from AWS or the Marketplace, you can create your
    own AMIs. This involves creating an image of a running EC2 instance you have that
    creates a snapshot of the EBS volume attached to the instance. You can then use
    the image (AMI) to launch new EC2 instances.
  prefs: []
  type: TYPE_NORMAL
- en: You generally create an AMI because you want to store a copy of a specific configuration
    that needs to be deployed across multiple EC2 instances in your account or even
    globally. Rather than having to manually configure every new instance to meet
    your specific requirements, you can configure one EC2 instance just the way you
    need it (with the right operating system patches, applications, anti-virus software,
    and so on) and then create an AMI of it. Then, when it comes to launching more
    EC2 instances with the same configuration, you can simply launch new instances
    with that AMI. This is also known as **prebaking an AMI** and is often used as
    a strategy to quickly provision new instances and minimize manual errors or misconfigurations.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at AMIs and how they are used to provision new EC2
    instances with an operating system and any required applications. We also discussed
    how you can obtain AMIs and, if necessary, create your own. In the next section,
    we will discuss the different types of EC2 instances you can deploy.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring EC2 instance types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS offers a wide selection of EC2 instances that come with different virtual
    hardware configurations, called **instance types**. An EC2 instance type defines
    a particular specification of the virtual hardware components of the EC2 instance,
    such as the amount of processing power in terms of **Virtual CPUs** (**vCPUs**)
    and memory, the type of storage, and networking configuration. Depending on your
    application requirements, you can select an appropriate EC2 instance type from
    the wide selection available.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we mentioned earlier, EC2 instances are broken down by *families* and within
    each *family*, there are *i**nstance types*. These instance types are then broken
    down further by **instance size**, which comes with specific configurations of
    virtualized hardware. The following are the core EC2 instance families:'
  prefs: []
  type: TYPE_NORMAL
- en: '**General purpose**: Designed for a balance of compute, memory, and networking
    resources and ideal for a wide range of workload types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compute optimized**: Designed for high-performance processing. Ideal for
    batch processing workloads, media transcoding, high-performance web servers, and
    **high-performance computing** (**HPC**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory-optimized**: Designed to deliver fast performance for workloads that
    process large datasets in memory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Accelerated computing**: Designed with hardware accelerators, or co-processors,
    to perform complex functions. Ideal for floating-point number calculations, graphics
    processing, or data pattern matching.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage-optimized**: Designed for computing that requires high sequential
    read and write access to very large datasets on local storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within each family, you have several EC2 instance types. So, for example, under
    the *general-purpose* family, you have instance types such as **T2**, **M5**,
    and **A1**. You can review the various instance types in the Amazon documentation
    at [https://aws.amazon.com/ec2/instance-types/](https://aws.amazon.com/ec2/instance-types/).
  prefs: []
  type: TYPE_NORMAL
- en: The **M5** instance type, for example, is powered by Intel Xeon® Platinum 8175M
    processors. It is ideal for applications that require a balance of compute, memory,
    and network resources. Additional features of this type include the fact that
    it offers up to 25 Gbps network bandwidth using Enhanced Networking and is powered
    by the AWS Nitro System, which is Amazon's architecture design that offers a combination
    of dedicated hardware and a lightweight hypervisor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the **M5** instance type, there are different instance sizes, from which
    you get to choose an appropriate size for your specific application needs. The
    following is a screenshot of some of the instance sizes that fall under the M5
    instance type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Sample selection of M5 instance sizes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_07_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.3 – Sample selection of M5 instance sizes
  prefs: []
  type: TYPE_NORMAL
- en: When you review the list of instance sizes, it stands to reason that the higher
    the vCPU and memory, the more performance that's offered by the instance size.
    Depending on your application requirements, you then select the most appropriate
    size that matches your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Dedicated categories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to the standard instances that you can deploy on AWS, you can also
    opt for **Dedicated Instances** and **Dedicated Hosts**. These options allow you
    to fulfill any compliance or regulatory requirements that state that you cannot
    use EC2 instances deployed on shared hosting, which is the default deployment
    option. Note that even though your EC2 instance may run on shared hardware with
    other customers, the underlying infrastructure offers isolation, and you cannot
    access other customers' EC2 instances unless you've been granted the necessary
    level of access by those other customers.
  prefs: []
  type: TYPE_NORMAL
- en: A **Dedicated Instance** is an EC2 instance that is deployed in your VPC on
    physical hardware that is dedicated to you and not shared with other customers.
  prefs: []
  type: TYPE_NORMAL
- en: A **Dedicated Host** is a physical host dedicated for your use alone and gives
    you additional control and management capabilities over how instances are placed
    on a physical server. In addition, dedicated hosts can help address certain third-party
    licensing terms based on a per-CPU core/socket basis.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at the block storage options that are available
    for your EC2 instances. Block storage allows you to attach block volumes to your
    EC2 instances, much like you would attach a hard disk to your physical servers.
    The root volume hosts the operating system to boot your virtual server from, and
    additional volumes can host data and applications for your servers.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about Amazon EBS and instance backed store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like virtual servers in your on-premises environment, EC2 instances require
    accessible block storage volume to host the instance operating system, data, and
    applications that need to run on the server. AWS offers two types of block storage
    options: **Elastic Block Store** and **instance store volumes**.'
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Elastic Block Store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon Elastic Block Store offers a high-performance block storage service for
    your EC2 instances. These act as virtual hard drives for your virtual servers
    deployed in the cloud. Amazon EBS is a network storage service similar in nature
    to the way you would attach a storage volume from a **Storage Area Network** (**SAN**)
    to your VMs deployed on VMware, in an on-premises environment.
  prefs: []
  type: TYPE_NORMAL
- en: You would provision the required EBS volume, such as 8 GB, 30 GB, 1,000 GB,
    or whatever size you require, and attach it to your EC2 instance. EC2 instances
    require a root volume (or a system drive on Windows machines, such as the "C"
    drive) to host the operating system and certain applications. In addition, you
    can attach multiple EBS volumes for other purposes, such as storing data (for
    example, data volume).
  prefs: []
  type: TYPE_NORMAL
- en: 'When configuring your EC2 instance with an EBS volume, you need to select the
    type of volume, the amount of storage you wish to provision, and if you want to
    configure encryption on your EBS volume. There are different types of EBS volumes
    to choose from and they fall into the following categories: **Solid State Drives**
    (**SSDs**) and **Hard Disk Drives** (**HDDs**).'
  prefs: []
  type: TYPE_NORMAL
- en: 'SSDs are optimized for transactional workloads involving frequent read/write
    operations with small I/O sizes, and they can be used to boot up your EC2 instances.
    These types of drives include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**gp2**: This is the default EBS volume that you can attach to an EC2 instance.
    The volume runs on SSDs and is suitable for general workloads such as transaction
    operations, low-latency interactive operations, and is suitable as boot volumes.
    The volume size can range from 1 GB to 16 TB, is designed to deliver up to 99.9%
    of durability, and has a maximum IOPS of 16,000\. gp2 volumes also offer a baseline
    performance of 3 IOPS/GB (minimum 100 IOPS), which can burst up to 3,000 IOPS
    for volumes smaller than 1 TB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**gp3**: This is the latest version of the general-purpose SSD-based EBS volumes.
    Compared to gp2, gp3 volumes offer a baseline performance of 3,000 IOPS and 125
    Mbps at any volume size. You can provision performance for an additional fee of
    up to 16000 IOPS. The size of the volume can range from 1 GB to 16 TB. gp3 volumes
    are ideal for running single-instance databases such as Microsoft SQL Server,
    Cassandra, MySQL, and Oracle DB and can be used as boot volumes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**io1**: This provisioned IOPS SSD offering high-performance EBS storage is
    ideal for critical, I/O intensive database and application workloads. io1 offers
    a baseline performance of 50 IOPS/GB to a maximum of 64,000 IOPS and provides
    up to 1,000 MB/s of throughput per volume. Note, however, that to achieve the
    maximum of 64,000 IOPS and 1,000 MB/s of throughput, the volume must be attached
    to an EC2 instance built on the AWS Nitro system. io1 volumes can also be used
    as boot volumes and the volume size can range from 4 GB to 16 TB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**io2**: The latest generation of the Provisioned IOPS SSD, this offers high
    performance, as well as a 100X durability of 99.999% with 10X higher IOPS to storage
    ratio of 500 IOPS for every provisioned GB. io2 is ideal for business-critical,
    I/O intensive database applications, including SAP HANA, Oracle, Microsoft SQL
    Server, and IBM DB2\. io2 volumes can also be used as boot volumes and the volume
    size can range from 4 GB to 16 TB. Like io1, to achieve the maximum of 64,000
    IOPS and 1,000 MB/s of throughput, the volume must be attached to an EC2 instance
    built on the AWS Nitro system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**io2 Block Express**: Currently in preview, this high-performance block storage
    offers 4x higher throughput, IOPS, and a capacity of io2 volumes. Designed for
    the most demanding applications, it offers 4,000 MB/s of throughput per volume,
    up to 256,000 IOPS and 1,000 IOPS/GB, as well as 99.999% durability. Volume sizes
    can range from 4 GB to 16 TB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HDDs are optimized for large streaming workloads where the dominant performance
    attribute is throughput. These drives include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**st1**: This is a low-cost HDD volume that''s ideal for frequently accessed,
    throughput-intensive workloads and capable of working with large datasets and
    large I/O sizes. Typical workloads include MapReduce, Kafka, log processing, data
    warehouses, and ETL jobs. st1 can burst up to 250 MB/s per TB, has a baseline
    throughput of 40 MB/s per TB, and the maximum throughput is 500 MB/s per volume.
    The volume size can range from 125 GB to 16 TB; however, it cannot be used as
    a boot volume.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sc1**: This is also known as Cold HDD and offers the lowest cost per GB of
    all EBS volume types. It is ideal for less frequently accessed workloads with
    large, cold datasets. sc1 can burst up to 80 MB/s per TB, has a baseline throughput
    of 12 MB/s per TB, and offers a maximum throughput of 250 MB/s per volume. The
    volume size can range from 125 GB to 16 TB; however, it cannot be used as a boot
    volume.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some additional features of EBS volumes include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: EBS volumes can be detached from one EC2 instance and attached to another. So,
    for example, if you have an EC2 instance with a single root volume and the instance
    has some sort of failure, you can detach the root volume and attach it to another
    EC2 instance as a data volume to extract any information as required. This makes
    EBS volumes very versatile and flexible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data stored on EBS volumes is persistent and can exist beyond the life of an
    EC2 instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also take *snapshots of your EBS volume*, which are point-in-time backups
    of your data stored on the volume. *The first snapshot is always a full backup
    and additional snapshots are incremental backups of changes*. Snapshots can then
    be used to create new volumes as required with the data intact. In addition, you
    can copy snapshots to other Regions. This means that if you need to share some
    data with a colleague in another Region, you simply copy the snapshot to the required
    Region, and it will be made available within your AWS account in that Region.
    You can also copy snapshots to other AWS accounts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we looked at the different types of EBS volumes backed by both
    HDD and SDD technologies. We also looked at their use cases. EBS volumes are attached
    to your EC2 instances over a storage area network connection, usually using the
    ISCSI protocol. In the next section, we will look at EC2 instance store volumes.
    These volumes are directly attached to the physical host that your EC2 instance
    has been deployed on.
  prefs: []
  type: TYPE_NORMAL
- en: AWS EC2 instance store volumes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon EBS volumes are storage volumes that are mounted on your EC2 instances
    over a network from a storage array, whereas instance store volumes are carved
    out of the local storage drives that are physically attached to the host that
    the EC2 instance runs on.
  prefs: []
  type: TYPE_NORMAL
- en: The primary benefit of attaching instance store volumes to your EC2 instance
    is the ultra-high throughput you get, as well as reduced latency in accessing
    your data. However, there is a downside to instance store volumes, namely around
    data persistence. The data in an instance store persists only during the lifetime
    of its associated instance while in the running state. If the instance is stopped,
    terminated, and placed into a hibernate state, then the data on the attached instance
    store is lost. Equally, if the underlying disk experiences some failure, then
    the data will be lost in such situations. The reason behind this is that when
    your instance experiences any of these states, every block of storage in the instance
    store is reset, so any data is lost.
  prefs: []
  type: TYPE_NORMAL
- en: Due to this, data on an instance store volume is considered temporary and to
    be used as such. It is ideal for information that changes frequently and can be
    used as buffers, caches, or for holding temporary content. Instance store volumes
    are also cheaper than EBS volumes.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: If an EC2 instance with an instance store volume is restarted, the data is not
    lost. This is because a reboot is not the same as a shutdown and then a cold start.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at the different storage options for EC2 instances.
    We discussed the key features and options for Amazon EBS and identified typical
    use cases of where we would use which type of EBS volume. We also summarized some
    additional features, such as being able to encrypt your block storage or take
    regular snapshots as backups and for replication.
  prefs: []
  type: TYPE_NORMAL
- en: We then discussed instance store volumes and compared them with EBS, identifying
    use cases for instance store volumes and how data on an instance store volume
    is considered temporary. Instance store volumes are also known as ephemeral storage.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss the different pricing options available
    to launch your EC2 instances. Depending on your use case, one set of pricing options
    might work out more cost-effectively than another, and this next section discusses
    some important concepts to be aware of.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about EC2 pricing options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Amazon EC2 service is a cloud offering that enables you to deploy virtual
    servers (EC2 instances) in the cloud. Traditionally, in an on-premises environment,
    if you needed to deploy a new physical server, you would have to make a capital
    investment for a few thousand dollars to procure the necessary hardware and software
    and then configure your server with any necessary applications.
  prefs: []
  type: TYPE_NORMAL
- en: On AWS, EC2 instances can be procured on an hourly basis, which means that you
    only pay for the hours that the server is running. If you turn off the server
    but keep it in your account (as opposed to terminating it and releasing its capacity
    back to AWS), then you do not pay any charges while the EC2 instance is in this
    stopped state. This pricing approach is what we call the **On-Demand Pricing Option**
    and is the default option when purchasing EC2 instances on AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at these various pricing options in detail.
  prefs: []
  type: TYPE_NORMAL
- en: On-Demand Instance Pricing Option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we've already discussed, this is the **default option** for procuring/launching
    an EC2 instance. You pay an hourly charge based on the instance type, the operating
    system (with any applications pre-installed), and the Region that you launch it
    in. You are charged based on the number of hours that the EC2 instance is in the
    **running state**. This means that you are not billed for the hours that the EC2
    instance is in the **stopped state**. The **On-Demand Pricing Option** does not
    require any long-term commitment or upfront payments. You can increase or decrease
    your compute capacity depending on your application demand and you only pay per
    hour consumed.
  prefs: []
  type: TYPE_NORMAL
- en: The **On-Demand Pricing Option** is ideal for users who need the flexibility
    to consume compute resources when required and without any long-term commitment.
    They are ideal for test/dev environments or for applications that have short,
    spiky, or unpredictable workloads. An important benefit of the On-Demand pricing
    model is that Amazon will not interrupt your consumption in any way. So, your
    EC2 instances will continue to exist in your account (even in the stopped state)
    unless you terminate (release) them. In terms of pricing, the On-Demand Pricing
    Option is low cost but compared to the other pricing options, it can turn out
    to be the most expensive, especially if you plan to keep the instances running
    24/7, 365 days a year. In such cases, alternative pricing options may be more
    suitable.
  prefs: []
  type: TYPE_NORMAL
- en: Reserved Instance Pricing Option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This pricing option rewards customers with a significant discount (up to 72%
    off the On-Demand Pricing Option) who commit to a 1-year or 3-year agreement to
    run specific instance types within a given Region. You can achieve very discounted
    hourly rates compared to the On-Demand price for the same instance. Reserved Pricing
    Options are not actual EC2 instances that you procure; rather, they are pricing
    agreements that give you the right to run a specific EC2 configuration, in a specified
    Region, for a specified duration (1 year to 3 years) at a specific discounted
    rate. Once you launch a matching EC2 instance in the given Region, the Reserved
    pricing model is applied instead of the On-Demand rate. There are two types of
    Reserved Pricing Options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Standard Reserved Pricing Option**: This provides the most discount with
    up to 72% off the On-Demand instance price. They can be purchased on a 1-year
    or 3-year term and you can change the certain configurations of the EC2 instance
    during its life, such as the Availability Zone it is placed in, the instance size,
    and its network type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Convertible Reserved Pricing Option**: This offers even more flexibility,
    including the ability to change instance families, operating systems, or even
    tenancies over the Reserved term. The downside of the Convertible Reserved Pricing
    Option is that the maximum discount is only up to 54% compared to the On-Demand
    Instance rate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example of a standard 1-year reserved instance pricing for a t2.micro,
    Linux EC2 instance in the N. Virginia Region at the time of writing this training
    guide:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – t.2micro Reserved Instance Pricing Option in N. Virginia Region,
    standard 1-year term'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_07_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 – t.2micro Reserved Instance Pricing Option in N. Virginia Region,
    standard 1-year term
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at the different payment options available for EC2 instances
    that have been purchased under the Reserved pricing model.
  prefs: []
  type: TYPE_NORMAL
- en: Payment options for Reserved Instances
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can choose to pay all or some of the total cost of your Reserved Instance
    upfront and depending on how you pay for your Reserved Instances, you get varying
    levels of the discounted rate. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**All Upfront**: This is where you pay for the entire term of the Reserved
    Instance upfront, right at the beginning of the contract. You do not get a monthly
    hourly bill and you benefit from the maximum available discount.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Partial Upfront**: This is where you make some upfront payment and then are
    charged a discounted hourly rate for the term and billed monthly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No Upfront**: There is where you do not make any upfront payment, but you
    still get some discount compared to the On-Demand rate. You get a better discount
    by going with either the **Partial Upfront** or **All-Upfront** option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An important point to note here is that while you benefit from a massive discount
    for your Reserved Instance, you are charged for the whole term, regardless of
    whether you have the EC2 instance in a running state or not. This means that for
    some use cases such as if you need an EC2 instance for unpredictable usage patterns
    and short durations, but without any interruptions, then the On-Demand pricing
    option might work out more cost-effectively. You would need to carefully compare
    the total cost of purchasing a Reserved Instance versus the On-Demand option to
    figure out which is more cost-effective.
  prefs: []
  type: TYPE_NORMAL
- en: Reserved Instance Marketplace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes, your business needs change, or perhaps, the project that you originally
    purchased your reserved instances for ends earlier than anticipated. Whatever
    your reasons, you can resell your Standard Reserved Instances on the **Reserved
    Instance Marketplace** to other AWS customers if you no longer need them. This
    enables you to recoup some of the costs that you may have incurred from your original
    purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Because you are reselling your Reserved Instances, the remaining term will be
    less than what it was originally bought for. This also means that if you need
    a Reserved Instance for less than the standard contract length, you may wish to
    check out the Reserved Instance Marketplace to see if you can find one that fits
    your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Note that only Standard Reserved Instances can be listed in the Marketplace.
    You cannot list Convertible Reserved Instances in the Marketplace. Furthermore,
    to list your Reserved Instance, you must ensure that you have paid for the Reserved
    Instance and that you owned the Reserved Instance for longer than 30 days.
  prefs: []
  type: TYPE_NORMAL
- en: Spot Instance Pricing Option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon almost always has spare compute capacity. One way to encourage the uptake
    of this spare capacity is by offering customers the option to launch Spot Instances
    at discounts up to 90% off the On-Demand price. However, Spot Instances are not
    suitable for all applications. They are ideal for workloads that are stateless
    or can be interrupted. For example, certain use cases such as data analysis, batch
    jobs, and background processing, can be run whenever there is available capacity,
    and depending on the application design architecture, those EC2 instances can
    be interrupted and then resumed later when capacity is available. In other words,
    if the application is stateless and workflows are not sensitive to interruptions,
    then if there are any interruptions, the application workflow simply waits for
    available compute capacity to continue with its operations.
  prefs: []
  type: TYPE_NORMAL
- en: You might be wondering why there would be any interruptions. Well, simply put,
    Amazon will try to meet supply and demand for compute capacity based on the best
    possible price they can get. When you purchase a Spot Instance, you are made aware
    of the current spot price. You would then place a maximum offer price, which needs
    to be higher than the prevailing spot price. Now, if demand were to increase,
    Amazon can increase the spot price rate and if your offer price falls below this,
    then another customer can be offered this capacity at the higher spot price instead,
    and your workloads will be interrupted. Spot Instances can also be interrupted
    if, for instance, supply of capacity reduces due to excessive uptake of Spot Instances
    by customers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some of the reasons for Spot Instance interruptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Price**: Where the spot price goes above your maximum offer price.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Capacity**: If there is not enough unused EC2 instances to meet the demand
    for On-Demand instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Constraints**: This includes the launch group or Availability Zone group,
    resulting in Spot Instance termination when such constraints cannot be met.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When Amazon attempts to interrupt your Spot Instance, you are provided with
    a warning interruption notice, which is issued 2 minutes before Amazon EC2 stops
    or terminates your Spot Instance. These interruption notices are made available
    via CloudWatch Events and as items in the instance metadata on the Spot Instance.
  prefs: []
  type: TYPE_NORMAL
- en: With regards to Amazon CloudWatch Events (discussed in [*Chapter 13*](B17124_13_Final_SK_ePub.xhtml#_idTextAnchor317),
    *Management and Governance on AWS*), you can create targets such as Lambda functions
    or Amazon **Simple Notification** (**SNS**) topics, which can process the Spot
    interruption notices when they happen. We will discuss SNS in detail in [*Chapter
    10*](B17124_10_Final_SK_ePub.xhtml#_idTextAnchor249), *Application Integration
    Services*, but essentially, you can create an email subscription to an SNS topic
    so that when a 2-minute interruption notice is generated, this message can be
    forwarded to you via the SNS topic via email.
  prefs: []
  type: TYPE_NORMAL
- en: The instance metadata contains data about your EC2 instance, divided into categories;
    for example, hostname, IP address information, events, and security groups. It
    is accessible from within the EC2 instance itself, available at `http://169.254.169.254/latest/meta-data/`.
    The `169.254.169.254` IP address is a link-local address and is valid only from
    the instance.
  prefs: []
  type: TYPE_NORMAL
- en: Previously, the only behavior following an interruption from Amazon was to terminate
    your Spot Instance. However, you may lose data when that happens. More recently,
    alternative behaviors have become available, such as stopping your Spot Instance
    or placing the instance into a hibernate state. When an instance is placed into
    a hibernate state, the EBS volumes are preserved, and instance memory (RAM) is
    preserved on the root volume. Furthermore, the private IP addresses of the instance
    are also preserved. This option means that when the Spot service resumes your
    instance if, for example, the capacity becomes available or the spot rises fall
    before your maximum offer price, then your instance can continue from the state
    it was stopped at.
  prefs: []
  type: TYPE_NORMAL
- en: Spot Fleets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A **Spot Fleet** is a collection of Spot Instances, and optionally On-Demand
    instances. AWS will launch Spot Instances as part of the fleet if there is available
    capacity and if your maximum offer price is higher than the spot price. The Spot
    Fleet will attempt to maintain its target capacity if Spot Instances are terminated.
    What you can also do is include a few On-Demand instances as part of your Spot
    Fleet. This means that you always have some capacity for minimum application requirements.
    As demand for your application increases, Spot Instances are added to the fleet
    at the discounted rate, assuming there is capacity, or your offer price is higher
    than the spot price.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at different EC2 instance pricing options. We examined
    the default On-Demand pricing model and compared it with the Reserved pricing
    model and Spot pricing options.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will move on to discuss another storage option for your
    EC2 instances, known as **Elastic File System** (**EFS**).
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Shared File Storage with Amazon EFS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our earlier discussion, we looked at Amazon EBS. These block storage volumes
    are directly attached to a specific EC2 instance and act as virtual hard drives
    for your EC2 instance. In general, an EBS volume can only be attached to one specific
    EC2 instance at a given time. This means that if you deploy 20 EC2 instances,
    each one of the instances will have one or more EBS volumes attached. This is
    perfectly fine if the data between those volumes does not need to be shared across
    those EC2 instances.
  prefs: []
  type: TYPE_NORMAL
- en: There are multiple use cases for sharing data across EC2 instances. These include
    file shares or data that needs to be shared across multiple applications and web
    servers. In those cases, using EBS volumes would create a messy architecture of
    having to somehow replicate data between those individual EBS volumes.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon offers the **EFS** solution, which allows you to create and mount file
    shares across multiple EC2 instances. These instances can then update the data
    on the file share, which is visible to all other EC2 instances that have mounted
    the same share if the necessary permissions have been set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some key features of EFS include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Can be used by Linux-based EC2 instances as a centralized file storage solution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can also be accessed from on-premises servers over a VPN or the Direct Connect
    service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EFS Volumes can grow and shrink on demand. This is unlike EBS volumes, where
    you need to provision storage before you can use it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EFS volumes are regionally-based and can be made available across Availability
    Zones for high availability and durability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that EFS Volumes cannot be used as boot/root volumes of your EC2 instance
    and cannot be used with Windows EC2 instances.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we examined an alternative storage solution for your Linux-based
    EC2 instance, where the requirement is to share files and data across a fleet
    of instances. Amazon EFS is a file-level storage solution and can be used to mount
    file shares on multiple EC2 instances across multiple Availability Zones in each
    Region.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at an alternative compute solution known as
    Amazon Lightsail, which allows us to easily deploy individual VPSes in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about VPSes with Amazon Lightsail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to Amazon EC2, AWS also offers a more lightweight solution to deploy
    virtual servers preconfigured with the most common application stacks for a wide
    range of use cases. Rather than picking individual components of your EC2 instances,
    such as the instance type and storage, and then installing all the necessary application
    layers, Amazon Lightsail offers blueprints that will automatically configure your
    servers with various common use case applications and utilities required to get
    up and running.
  prefs: []
  type: TYPE_NORMAL
- en: A common application stack includes your chosen operating system, along with
    apps such as WordPress, Drupal, Plesk, LAMP, and more. Deploying Amazon Lightsail
    is also relatively straightforward, with guided steps to get your deployment up
    and running.
  prefs: []
  type: TYPE_NORMAL
- en: The best part about Lightsail is you have a fixed monthly fee based on the instance
    type and the associated operating system and applications that have been deployed.
    However, for more complex configurations and enterprise-grade production environments,
    you will probably still need to design and deploy EC2 instances.
  prefs: []
  type: TYPE_NORMAL
- en: Prices for Amazon Lightsail start from as little as $3.50 per month. This gives
    you a Linux virtual server with 512 MB memory, 1 vCPU, a 20 GB SSD disk, and up
    to 1 TB of data transfer. Additional configurations include opting for a static
    IP address, DNS management, and SSH/RDS access to your virtual server.
  prefs: []
  type: TYPE_NORMAL
- en: As your needs change over time, you can easily upgrade to EC2 instances, which
    involves taking a snapshot of your instance and following a step-by-step process
    to upgrade to EC2 using a wizard.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we reviewed Amazon's Lightsail offering, which can be used
    for smaller-scale application deployments and predictable pricing structures.
    In the next section, we will look at other compute options available on AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Amazon ECS and Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been looking at hardware virtualization and using hypervisors
    to build VMs such as EC2 instances that we can run various applications on. Different
    applications often have specific requirements, and many applications will not
    be able to run together in the same VM due to incompatibility with the underlying
    libraries or runtime environments.
  prefs: []
  type: TYPE_NORMAL
- en: Traditional virtualization technologies involve using bare-metal hardware, upon
    which you configure a hypervisor. This hypervisor, as we discussed previously,
    allows you to essentially *carve* out physical hardware components (CPU, memory,
    storage, and so on) into smaller virtual components that allow you to then deploy
    VMs, or in the case of AWS, EC2 instances. Each EC2 instance, however, will need
    to host a guest operating system (Linux or Windows, for example), shared libraries
    and system files, and your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following diagram, VMs take up a lot of resources because they
    need to run the guest operating system, along with all the system files, utilities,
    and libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Hypervisor architecture hosting VMs'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_07_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.5 – Hypervisor architecture hosting VMs
  prefs: []
  type: TYPE_NORMAL
- en: You will note that each VM requires its own guest OS, as well as the necessary
    libraries, system files, and runtime environments. An alternative solution is
    to consider a technology known as **Docker**.
  prefs: []
  type: TYPE_NORMAL
- en: Docker is built on the concept of containerization, which is essentially **operating
    system virtualization**. Applications are run in isolated user spaces known as
    **containers**, which share the same underlying operating system. This is made
    possible because the container will host all the necessary dependencies required
    by the application, including binaries, libraries, configuration files, and runtime
    environments. The container is abstracted from the host operating system's container
    with limited access to the OS, which allows us to run several containers on the
    same bare-metal hardware.
  prefs: []
  type: TYPE_NORMAL
- en: 'Containerization also offers less overhead during startups since they share
    the same underlying OS rather than each container have an operating system to
    boot up from, which is how VMs work. The following diagram illustrates this concept:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Docker concepts'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_07_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.6 – Docker concepts
  prefs: []
  type: TYPE_NORMAL
- en: Some of the added features of using Docker include the fact that you run multiple
    applications on the same bare-metal hardware, all sharing the same underlying
    OS via the Docker engine. This keeps the code base for the application much smaller
    compared to a VM that also has to host the operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon offers **ECS**, which is a fully managed container orchestration service
    that allows you to deploy Docker-style applications. Amazon ECS can help you deploy
    and manage multiple Docker containers in the cloud rather than having to manually
    spin up EC2 instances and deploy the Docker solution on each.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram illustrates the core components of Amazon ECS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – Amazon ECS architecture'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_07_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.7 – Amazon ECS architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'The Amazon ECS architecture comes with the following core components and features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ECS Cluster**: This is a logical grouping of tasks or services.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Task** – This is a Docker container termed as a "task" in Amazon ECS. In
    Amazon ECS, a "task" is essentially a container.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Task Definition**: Each ECS task is created from a task definition. A task
    definition specifies the Docker image to use, the amount of CPU and memory to
    use with each task or each container within a task, the launch type to use (discussed
    later), and the IAM role that your tasks should use, among others.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Elastic Container Registry** (**ECR**): This is where Docker images are stored
    on AWS. You can also store your images on Docker Hub or a private registry. Amazon
    ECR hosts your images in a highly available and high-performance architecture.
    When the task starts, it reviews the task definition and pulls down the Docker
    image required from the registry.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ECS Service**: This allows you to define a specified number of instances
    of a task definition simultaneously in an Amazon ECS cluster. Should one of your
    tasks fail, the ECS service will replace it to maintain the desired number of
    tasks in the service.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ECS Container instances**: Your tasks run on EC2 instances, within which
    you run your Docker container.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: However, there are two types of ECS deployments, which we will discuss next.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon ECS comes in two deployment options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s take a look at these deployment options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon Fargate (Fargate launch type)**: This enables you to set up your ECS
    environment without having to spin up an EC2 instance, provision and scale clusters,
    or patch and update virtual servers yourself. You simply package your application
    and specify your CPU, memory, and network requirements and AWS takes care of the
    heavy lifting for you. AWS will place the ECS tasks on the cluster, scale as required,
    and fully manage the entire environment for you.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EC2 launch type**: In some cases, you may require direct access to the underlying
    EC2 instances that run your container services. In this case, you must manage
    a cluster of EC2 instances (patch and update them) and schedule the placement
    of containers on the servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we learned about Amazon ECS. In the next section, we will look
    at an orchestration service known as Amazon Elastic Service for Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Elastic Kubernetes Service (Amazon EKS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes is another open source container orchestration solution. It groups
    containers that make up an application into logical units for easy management
    and discovery. Kubernetes takes care of scaling and managing your containers,
    taking care of failover options to ensure your application keeps running.
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon EKS** is AWS''s offering to help you deploy, manage, and scale containerized
    applications using Kubernetes on AWS.'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at the basics of containerization and how it can
    be used to effectively deploy and manage your application stack. We discussed
    the **ECS** and its two different launch types – the Fargate and EC2 launch types.
    We also looked at Amazon's take on Kubernetes as a container orchestration tool
    that uses Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at some additional compute solutions available
    from AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about additional compute services on AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at some additional compute services available
    on AWS and their use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Serverless option – AWS Lambda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we have only looked at server-based computer resources except for AWS
    ECS Fargate. When we say serverless, we do not mean that the compute resource
    is running without any servers. Ultimately, servers will house the CPU that offers
    compute capabilities. The term serverless is just used to mean that the customer
    does not need to manage any actual servers as this falls within the responsibility
    of AWS.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Lambda is a serverless offering from AWS that allows you to run code and
    perform some tasks. AWS Lambda is known as a **Function as a Service** (**FaaS**)
    solution that can be used to build an entirely serverless architecture comprised
    of storage, databases, and network capabilities where you do not manage any underlying
    servers.
  prefs: []
  type: TYPE_NORMAL
- en: To use Lambda, you must create a function using a supporting programming language,
    such as Python or Node.js, and upload this function to AWS Lambda. You then need
    to define a trigger that will execute the code. For example, you can create a
    Lambda function that gets triggered when you upload an image to an S3 bucket.
    Your function could be used to add a watermark to a copy of the image and place
    it in another bucket, which is then used to serve a web application that allows
    customers to purchase stock photos. This way, the preview images have watermarks
    on them, and users will need to complete a purchase before they get the original
    image.
  prefs: []
  type: TYPE_NORMAL
- en: The important thing to remember here is that Lambda functions are executed when
    they're triggered by another AWS service, so they do not run independently. Lambda
    functions can also be triggered on a schedule. An example of this is if you have
    a fleet of development servers that your dev team needs to work on. Because this
    is a short project, we decided to opt for On-Demand EC2 instances. However, you
    want to try and save on costs, so you create a Lambda function to stop the EC2
    instances at 6 P.M. and another Lambda function to start up the EC2 instances
    again at 8 A.M. This automation sequence made possible by scheduling Lambda functions
    can help you save on costs.
  prefs: []
  type: TYPE_NORMAL
- en: An important point to remember is that with Lambda, you pay only for the compute
    time your Lambda functions consumes and there is no charge when your code is not
    running.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Batch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS Batch can be used to run thousands of batch computing jobs on AWS. AWS Batch
    will set up and provision the necessary compute resources to fulfill your batch
    requests. There is no need to deploy server clusters as AWS takes care of this
    for you. You can schedule and execute your batch jobs across a wide range of compute
    services, such as EC2 and ECS. With AWS Batch, you pay for the resources that
    AWS creates, such as EC2 instances or ECS clusters.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Outposts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is possible to run several AWS Services such as EC2 instances, RDS databases,
    and host Amazon S3 storage buckets on-premises. You get to use the same AWS tools
    and hardware both in the cloud and on-premises, which helps build a complete hybrid
    solution. AWS Outposts is ideal when you want to run AWS resources with very low
    latency connections to your on-premises application or if you require local data
    processing due to any compliance and regulatory requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'AWS Outposts comes in two flavors:'
  prefs: []
  type: TYPE_NORMAL
- en: '**VMware Cloud on AWS Outposts**: This allows you to utilize the same VMware
    tools to manage the infrastructure that you use with your on-premises resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS native variant of AWS Outposts**: This allows you to use the same AWS
    APIs that you use with the AWS cloud-hosted services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can get AWS Outposts delivered to your local on-premises location as a 42U
    rack and can scale from 1 rack to 96 racks to create pools of compute and storage
    capacity. You can also get smaller racks with 1U and 2U rack-mountable servers
    for locations with limited space or capacity requirements.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at additional compute services on AWS, including
    the very popular AWS Lambda services, which offers compute capabilities delivered
    in a **FaaS** model.
  prefs: []
  type: TYPE_NORMAL
- en: We also discussed AWS Outposts, which allows you to host AWS infrastructure
    on-premises and address use cases such as very low latency connectivity or local
    data processing needs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at some additional storage options available
    on AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding additional storage options in AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to the previously discussed storage options for your compute needs,
    you have a couple of additional storage solutions that have been designed for
    specific use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon FSx for Lustre
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon FSx for Lustre is a fully managed filesystem for compute-intensive workloads
    and designed for applications that require high-performance and low latency connectivity,
    offering millions of IOPS and hundreds of gigabits per second throughput rates.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon FSx for Lustre is designed to be integrated with Amazon S3\. You store
    data in S3 and retrieve it when you need to perform compute-intensive workloads
    against the data. Later, you copy the data back to S3 for long-term storage.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon FSx for Windows File Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Microsoft Windows servers can be configured to offer a file-sharing solution
    similar to EFS. Amazon EC2 instances running Microsoft Windows may need a common
    filesystem to share various types of data for end users or applications. For example,
    if you host virtual desktops in the cloud, you may need a central file sharing
    solution to allow your users to share files using mapped drives.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of manually building out a file share solution using EC2 instances and
    EBS volumes running the Windows operating system, you can use AWS FSx for Windows
    File Server. This is a fully managed native Microsoft Windows filesystem that
    offers support for the SMB protocol and Windows NTFS, **Active Directory** (**AD**)
    integration, and **Distributed File System** (**DFS**). By opting for FSx for
    Windows File Server, you benefit from a fully managed file sharing solution for
    all your Windows-based applications and can configure advanced file sharing solutions
    using DFS.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we reviewed two additional storage options for your compute
    needs; AWS FSx for Lustre, which is designed for high-performance computing needs
    offering millions of IOPS, and AWS FSx for Windows File Server, which offers a
    fully managed Microsoft Windows file share solution.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at how to securely access EC2 instances we
    deploy in our VPC with the help of **bastion hosts**. Bastion hosts are servers
    designed to allow secure connections from external networks such as the internet,
    from which you can then access the web and application servers that have been
    deployed in your VPC.
  prefs: []
  type: TYPE_NORMAL
- en: Securing your VPC with bastion hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The use of bastion hosts (or jump boxes) is used to provide secure access to
    EC2 instances located in the private and public subnets of your **virtual private
    cloud** (**VPC**). These bastion hosts (you can have one or multiple hosts deployed
    for redundancy) can be used as management servers and are designed to allow you
    to remotely connect to them via SSH or RDP protocols. Once you have established
    connectivity to your bastion hosts, you can then log onto backend EC2 instances
    acting as web or application servers.
  prefs: []
  type: TYPE_NORMAL
- en: Bastion hosts are EC2 instances that do not host any unnecessary applications,
    other than those required to allow connections to backend EC2 instances. These
    servers are hardened and secured to reduce attack surfaces and thus minimize the
    chances of penetration. However, you still need to manage these instances as you
    would any other application or web server. The onus is on you to ensure that the
    EC2 instances are highly secured, patched, and updated regularly. Amazon also
    offers an alternative solution known as **Session Manager**, which is a feature
    of the **AWS Systems Manager** service offering. **Session Manager** enables you
    to manage your EC2 instances and on-premises instances via an interactive browser
    shell or the AWS CLI tools, without the need to open inbound ports or maintain
    bastion hosts and SSH keys. It also offers a fully auditable instance management
    service recording instance access details. We will discuss AWS Systems Manager
    and Session Manager in [*Chapter 13*](B17124_13_Final_SK_ePub.xhtml#_idTextAnchor317),
    *Management and Governance on AWS*.
  prefs: []
  type: TYPE_NORMAL
- en: In the following diagram, we can see how an administrator can connect to the
    bastion hosts in a public subnet and from there administer backend EC2 instances
    running an application.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8 – Securing access to your VPC using bastion hosts'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_07_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.8 – Securing access to your VPC using bastion hosts
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding diagram, the administrator connects to the bastion hosts from
    the internet and then from that Bastion Host, establishes a secure connection
    to backend EC2 instances. The security of this architecture can be improved by
    restricting the source of the remote traffic to the Bastion Host. For example,
    rather than having the remote access open to the entire internet, we can restrict
    the source IP address or IP range of that connection to the administrator's corporate
    office network IP range. This way, the administrator can only access the Bastion
    Host if they were working from within the corporate office's network.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we briefly looked at bastion hosts and how they can be used
    to securely access other EC2 instances in your VPC. Bastion hosts are standard
    EC2 instances themselves, but you would configure them to only serve as an entry
    point into your VPC for administrative access. Furthermore, you would harden the
    bastion hosts by installed the necessary security updates and tools, and ensuring
    that unnecessary applications are removed. Access to bastion hosts can also be
    restricted to specific source IP addresses or even only from your corporate data
    center via a VPN link.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 7.1 – Expanding ProductionVPC so that it includes two public subnets
    and two private subnets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this exercise, we will expand the architecture of **ProductionVPC** that
    we built in the previous chapter so that it includes an additional public subnet
    in another Availability Zone and two private subnets – one in each Availability
    Zone. This will enable us to design an architecture that can offer high availability
    in case of a single Availability Zone outage.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be extending the VPC to fulfill our design specifications, as shown
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9 – VPC with public and private subnets across two Availability
    Zones'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_07_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.9 – VPC with public and private subnets across two Availability Zones
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your AWS account as the root user and on the main AWS Management Console,
    search for `VPC` in the search box. Click on the `VPC` link to open the VPC Console.
    Once in the console, ensure that you are in the us-east-1 Region, where you created
    **ProductionVPC** in the previous chapter. If necessary, navigate to the us-east-1
    Region by selecting it from the drop-down list.
  prefs: []
  type: TYPE_NORMAL
- en: '**Review your current VPC**:'
  prefs: []
  type: TYPE_NORMAL
- en: On the left-hand menu in **VPC console**, click on **Subnets**. You will see
    that there is one **Public Subnet One** that is associated with ProductionVPC,
    which you created in the previous chapter. You will also see other subnets, but
    these are associated with the default VPC in the us-east-1 Region, as per the
    following screenshot:![Figure 7.10 – ProductionVPC with a single public subnet
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_07_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.10 – ProductionVPC with a single public subnet
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, click on the **Route Tables** link from the left-hand menu. Using the
    VPC Wizard, your ProductionVPC has been configured with a main route table and
    a public route table. From the following screenshot, you can see that the main
    route table associated with the ProductionVPC has a route table ID of **rtb-0d6fb017c417d8e1b**.
    You can tell it is the main route table because this is indicated in the **Main**
    column with a **Yes**. This main route table is designed to be associated with
    all private subnets in your VPC.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you click on the **Main Route Table ID** link in the console, the bottom
    pane will provide additional information about the route table. Furthermore, if
    you click on the **Routes** tab of the bottom pane, you will note that currently,
    there is only one route: the **local route**. This local route is designed for
    traffic to flow within the VPC. The main route table does not offer any direct
    access to the internet now. This is a best practice because, for subnets that
    need direct access to the internet, you should ideally create a separate **public
    route table** and attach any *public subnets* to it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.11 – ProductionVPC main route table configuration'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B17124_07_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.11 – ProductionVPC main route table configuration
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, in the top pane, you will notice that the wizard has already created
    a public route table (with a **Route table ID** of **rtb-0452c63c6d2aa3a88**).
    We know this is the public route table because, in the preceding screenshot, you
    can see a **No** in the **Main** column. It also has one subnet associated with
    it: **Public Subnet One**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you click on the **Route Table ID** link of the public route table, the
    bottom pane will offer additional information, as per the following screenshot.
    Specifically, if you click on the **Routes** tab of the public route table, you
    will see two routes: one local route and a route to the internet. Routes to the
    internet are denoted with a destination of **0.0.0.0/0**. In this case, the route
    to the internet has a target, which is the **internet gateway**. This internet
    gateway gives the subnet direct access to send traffic to the internet and receive
    traffic from the internet if the security groups and/or **Network Access Control
    Lists** (**NACLs**) permit the traffic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.12 – ProductionVPC with public route table configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_07_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.12 – ProductionVPC with public route table configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also notice that AWS does not create a name tag for your route tables
    by default. This can sometimes make it difficult to identify your resources. You
    can easily add name tags to make resources easy to identify. Using your mouse,
    simply hover over the area in the `Public Route Table`. Perform the same action
    for the main route table, making sure to tag the route table with the name **Main
    Route Table**. This will make it easy to identify your route tables, as per the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.13 – Tagging your route tables'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_07_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.13 – Tagging your route tables
  prefs: []
  type: TYPE_NORMAL
- en: When you create new subnets, they are automatically associated with the main
    route table. This technically makes them private subnets. If you need to create
    a public subnet, you need to remember to disassociate the subnet from the main
    route table and attach it to a route table that offers public internet access
    via the internet gateway.
  prefs: []
  type: TYPE_NORMAL
- en: While you can configure a direct route to the internet in the main route table
    that sends traffic via the internet gateway, this is not advisable. You want to
    ensure that some subnets offer only internal private access without direct exposure
    to the internet. Since EC2 instances deployed as backend services require internet
    access to download software updates, for example, you can set up NAT gateways
    in the public subnets to facilitate this requirement. You would then need to configure
    the **Main Route** table with a route to the internet via this NAT gateway, which
    acts as a proxy for any internet requests from your backend EC2 instances. These
    backend EC2 instances do not require public IP addresses and can still communicate
    with the internet via the NAT gateway.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up additional subnets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this part of the exercise, we will be expanding our VPC to include multiple
    public and private subnets. We wish to host two public subnets and two private
    subnets across two Availability Zones. We wish to do this because we want to offer
    high availability so that if one Availability Zone fails or is offline, we can
    access duplicate copies of our resources in the other Availability Zone.
  prefs: []
  type: TYPE_NORMAL
- en: 'You already have one public subnet in your VPC. This has been configured with
    a name of **Public Subnet One** and has been placed in the **us-east-1a** Availability
    Zone as per the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.14 – Public Subnet One in the us-east-1a Availability Zone'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_07_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.14 – Public Subnet One in the us-east-1a Availability Zone
  prefs: []
  type: TYPE_NORMAL
- en: 'As part of this exercise, we will create another public subnet in the **us-east-1b**
    Availability Zone:'
  prefs: []
  type: TYPE_NORMAL
- en: From the left-hand menu in your VPC console, click on **Subnets**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create subnet** button in the top right-hand corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Create subnet** wizard that appears, choose **ProductionVPC** from
    the list of VPCs available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under `Public Subnet Two`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, under **Availability Zone**, ensure you select **us-east-1b**. This is
    because we want the second public subnet to be placed in a different Availability
    Zone from the first public subnet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the IPv4 CIDR block, provide a block address of `10.0.2.0/24`. This CIDR
    block is on a separate range from the CIDR block of the first public subnet but
    is still a subset of the VPC's CIDR range.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, as per the following screenshot, click on **Create subnet**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.15 – Creating Public Subnet Two'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_07_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.15 – Creating Public Subnet Two
  prefs: []
  type: TYPE_NORMAL
- en: The wizard will create the subnet and display a successful creation message.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you click on the checkbox next to the newly created subnet, the bottom pane
    will provide information about the subnet. Click on the **Route table** tab. You
    will notice that this newly created subnet has been automatically associated with
    **main route table**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.16 – Newly created subnet associated with main route table'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_07_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.16 – Newly created subnet associated with main route table
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we want this subnet to be a public subnet, we need to change its association
    from the main route table to the public route table, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Edit route table association** button, as shown in the preceding
    screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Edit route table association** dialog box that appears, select **Public
    Route Table** from the **Route table ID** drop-down list, as shown in the following
    screenshot:![Figure 7.17 – Edit route table association
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_07_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.17 – Edit route table association
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, both public subnets have been correctly configured. Next, we'll
    create two private subnets, one in **us-east-1a** and the other in **us-east-1b**.
  prefs: []
  type: TYPE_NORMAL
- en: Creating private subnets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create the aforementioned private subnets:'
  prefs: []
  type: TYPE_NORMAL
- en: While still in the VPC console, click on the **Subnets** link from the left-hand
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Create subnet** dialog box that appears, select **ProductionVPC** from
    the **VPC ID** drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, in the `Private Subnet One` in the **Subnet name** text box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Availability Zone**, select **us-east-1a** – this is the same zone where
    we placed **Public Subnet One**. This way, any frontend web resources in **Public
    Subnet One** can access any backend resources in **Private Subnet One**, allowing
    those resources to be in the same Availability Zone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the IPv4 CIDR block, provide the IP CIDR range of `10.0.3.0/24` – this CIDR
    block does not conflict with any of the other subnets and is still a subset range
    of the main VPC's IP range.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, click the **Create subnet** button at the bottom of the page, as per
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.18 – Private Subnet One settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_07_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.18 – Private Subnet One settings
  prefs: []
  type: TYPE_NORMAL
- en: 'You will receive a success message. Next, we will perform the same steps we
    did previously, but this time to create the second private subnet in **us-east-1b**:'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create subnet**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **ProductionVPC** from the VPC ID drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the subnet name, type in `Private Subnet Two`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Availability Zone**, select **us-east-1b**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the IPv4 CIDR block, type in `10.0.4.0/24` as the CIDR block range for this
    subnet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create subnet** button at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, you have a VPC configured with two public subnets and two private
    subnets.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You do not need to associate the two private subnets to the main route tables
    manually, as this is done for you by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Route Tables** from the left-hand menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the top pane, click on the checkbox next to the main route table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the bottom pane, you will notice that both private subnets are associated
    with the main route table (not explicitly) but by default instead, as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.19 – Private subnet route table associations'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_07_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.19 – Private subnet route table associations
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we expanded our **ProductionVPC** to include two public subnets
    and two private subnets across two Availability Zones. This will enable us to
    deploy duplicate workloads in each Availability Zone to design for high availability.
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, we will deploy our first custom security group in **ProductionVPC**.
    This security group will be used to define what types of traffic we will allow
    inbound to an EC2 instance that will be deployed in the third exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 7.2 – Creating a Bastion Host security group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we will create a custom security group that will be used
    by an EC2 instance. This will act as a Bastion Host, as previously discussed in
    this chapter. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your AWS account and navigate to the VPC console. Ensure you are in
    the **us-east-1** Region. From the left-hand menu, confirm that **ProductionVPC**
    is available in this Region.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Security Groups** link from the left-hand menu, which is located
    under the **Security** category, as shown in the following screenshot:![Figure
    7.20 – Selecting Security Groups from the VPC console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_07_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.20 – Selecting Security Groups from the VPC console
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Create security group** button on the top right-hand corner of
    the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under `BastionHost-SG`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, provide an appropriate description, such as `Allow Remote Access to Bastion
    Host Server`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **VPC**, make sure your select **ProductionVPC** from the drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, under the **Inbound rules** section, click the **Add rule** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `3389`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the `0.0.0.0/0`. This IP block represents all external networks, including
    the internet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Create security group** button on the bottom right-hand
    corner of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will receive a successful creation message to confirm that the security
    group has now been created. We will use this security group in the next exercise
    to ensure that we can connect to our EC2 instance over the `3389`.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 7.3 – Launching an EC2 instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we will launch a Windows-based EC2 instance in **Public Subnet
    One** of our **ProductionVPC**. We will use this EC2 instance as a Bastion Host,
    allowing us to configure other EC2 instances in the VPC:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your AWS account and from the **Services** drop-down list, select
    **EC2** under the **Compute** category, as shown in the following screenshot:![Figure
    7.21 – Accessing the EC2 console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_07_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.21 – Accessing the EC2 console
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the **Regions** list in the top right-hand corner, ensure that you are
    in the **US East N.Virgina (us-east-1)** Region.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the `0` Instances in the running state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Instances (running)** link, as shown in the following screenshot.
    This will bring up the **Instances** console:![Figure 7.22 – EC2 dashboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_07_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.22 – EC2 dashboard
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the **Instances** console, select the **Launch instances** button from
    the top right-hand corner of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will now be presented with **Step 1: Choose an Amazon Machine Image (AMI)**.
    From the list of available AMIs, select **Microsoft Windows Server 2016 Base -
    ami-05ce3abcaf51f14b2**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In **Step 2: Choose an Instance Type**, ensure that the checkbox next to the
    **t2.micro** instance is selected. This instance type is available as part of
    your Free Tier offering.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, click the **Next: Configure Instance Details** button in the bottom right-hand
    corner of the screen.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In **Step 3: Configure Instance Details**, choose the following options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Network**, select **ProductionVPC**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For **Subnet**, select the **Public Subnet One** subnet.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For **Auto-assign Public IP**, select **Enable**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Leave all the remaining settings as their default values and click the **Next:
    Add Storage** button in the bottom right-hand corner of the screen.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In **Step 4: Add Storage**, accept the default root volume size and click on
    the **Next: Add Tags** button in the bottom right-hand corner of the screen.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Name`, and for `Windows-BastionSrv`:![Figure 7.23 – Step 5: Add Tags'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_07_23.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 7.23 – Step 5: Add Tags'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, click the **Next: Configure Security Group** button in the bottom right-hand
    corner of the screen.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In **Step 6: Configure Security Group**, click on the **Select an existing security
    group** option under the **Assign a security group** heading.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the list in the **Security Group ID** column, select the security
    group ID that corresponds to the newly created **BastionHost-SG**, which we set
    up in the previous exercise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **Review and Launch** button in the bottom right-hand
    corner of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will then be presented with **Step 7: Review Instance Launch**. Review
    the settings you have defined and then click on the **Launch** button in the bottom
    right-hand corner of the screen.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, you will be presented with another dialog box, requesting you
    to either select an existing EC2 key pair or create a new key pair.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Key pairs** are cryptographically encrypted public/private keys that are
    used to encrypt the credentials required to authenticate against the EC2 instance
    operating system so that you can remotely access them.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Microsoft Windows-based EC2 instances, the public key of the keys pair
    is used to encrypt the *Administrator* password. You then use the private key
    to decrypt the password to remotely access the Windows machine. For Linux-based
    EC2 instances, the private key can be used to establish a **Secure Socket Shell**
    (**SSH**) connection. Establishing SSH connections to your Linux-based EC2 instance
    allows you to work on the server remotely using the Linux shell interface. Let''s
    take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Select an existing key pair or create a new key pair** dialog box,
    select the option to **Create a new key pair**, from the drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, provide a key pair name. For example, I am naming my key `USEC2Keys`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the `.pem` format into your load `Downloads` folder. Make sure that
    you copy and save the keys in a safe location or on the desktop for easy access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Launch Instances** button to launch your EC2 instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Launch Status** page, click on the **View Instances** button at the
    bottom right-hand corner of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, you will be redirected to the instances console and will be
    able to see your EC2 instance, as per the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.24 – Successfully launched the Windows BastionSRV EC2 instance'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_07_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.24 – Successfully launched the Windows BastionSRV EC2 instance
  prefs: []
  type: TYPE_NORMAL
- en: It will take a few minutes for the server to fully launch and become accessible.
    Look out for the **Status Check** column, as per the preceding screenshot, and
    ensure that AWS has completed all its checks; you will receive a **2/2 checks
    passed** message in the **Status check** column.
  prefs: []
  type: TYPE_NORMAL
- en: You can now remotely connect to the Windows Server using the Microsoft Remote
    Desktop client. If you are performing these labs from a laptop or desktop using
    Microsoft Windows, then the `Remote Desktop Connection` app. If you are performing
    these labs on a macOS-based computer, you will need to download the Microsoft
    Remote Desktop client from the Apple Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: 'To connect to your new Windows Bastion Host server, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the EC2 instances console, click on the checkbox next to the EC2 instance
    you have just launched.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the bottom pane, make a note of the EC2 instance's public IP address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, with the EC2 instance still selected, click on the **Actions** menu from
    the top right-hand corner of the screen, and then on the **Security** sub-menu.
    From here, select the **Get Windows password** link, as per the following screenshot:![Figure
    7.25 – The Get Windows password option for your EC2 instance
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_07_25.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.25 – The Get Windows password option for your EC2 instance
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will be presented with the `Downloads` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upon selecting the key, you will note that the text box below the **Browse**
    button gets populated with the encrypted key, as per the following screenshot:![Figure
    7.26 – Decrypting your key pairs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_07_26.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.26 – Decrypting your key pairs
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Decrypt Password** button in the bottom right-hand corner of
    the screen; you will be provided with the Windows Administrator password. Make
    a note of this password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, launch your **Remote Desktop Connection** application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Remote Desktop Connection** app, type in the public IP address of your
    Windows Bastion Server in the text box, next to the **Computer:** field, as per
    the following screenshot:![Figure 7.27 – Remote Desktop Connection client
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_07_27.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.27 – Remote Desktop Connection client
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Connect** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be prompted to provide your security credentials in the Windows Security
    dialog box, as per the following screenshot:![Figure 7.28 – Windows Security –
    Enter your credentials
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_07_28.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.28 – Windows Security – Enter your credentials
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For `Administrator`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Password**, type in the password you decrypted earlier, and then click
    **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the password has been correctly typed in, you will be prompted with a **Remote
    Desktop Connection** security prompt, informing you that the connection to the
    remote computer cannot be authenticated due to its security certificate. This
    warning message can be ignored and you can proceed to log in to the server, as
    per the following screenshot:![Figure 7.29 – RDP certificate warning dialog box
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_07_29.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.29 – RDP certificate warning dialog box
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Yes** button to proceed with the remote connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Remote Desktop client should now connect you to the remote Windows Server,
    as per the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.30 – Remote Bastion Host Server'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_07_30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.30 – Remote Bastion Host Server
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you were able to launch a new EC2 instance that will act as
    our Bastion Host server. You will be able to remotely connect to the Windows EC2
    instance using the RPD client and can now perform any operation, as required,
    on this server.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: As part of ending this exercise, you should terminate your EC2 instances to
    ensure you do not go over the billing alarm threshold you configured in [*Chapter
    4*](B17124_04_Final_SK_ePub.xhtml#_idTextAnchor068), *Identity and Access Management*.
    To terminate your EC2 instances, from the EC2 dashboard, click on **Instances**
    from the left-hand menu. Next, select the checkbox next to the **Windows BastionSrv**
    EC2 instance you launched. Then, from the top right-hand menu, click on the **Instance
    state** drop-down menu and select **Terminate instance**. You will be prompted
    to confirm that you wish to terminate your EC2 instances. Go ahead and click the
    **Terminate** button.
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, we will demonstrate the Amazon ECS service while focusing
    on the Fargate launch type with a simple example.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 7.4 – Launching an application on Amazon Fargate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, you will launch a task on ECS, which is essentially a Docker
    container:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your AWS account as `ECS`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the search results, select **Elastic Container Service**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be presented with the ECS splash screen, as per the following screenshot:![Figure
    7.31 – Amazon ECS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_07_31.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.31 – Amazon ECS
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the left-hand menu, select **Clusters**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the right-hand pane, click the **Create cluster** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be prompted to select the cluster template. You will be deploying a
    Fargate cluster, so go ahead and select the **Network only** option design for
    use with either AWS Fargate or an external instance capacity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Next step** button at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, name your cluster `MyCluster`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click the **Create** button at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see a notification once the cluster has been created. Click the **View
    Cluster** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the left-hand menu, click on **Task Definition**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the right-hand pane, click the **Create new Task Definition** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will then be prompted to select the launch type's compatibility, as per
    the following screenshot:![Figure 7.32 – ECS task definition
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_07_32.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.32 – ECS task definition
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the Fargate type and click the **Next step** button at the bottom of
    the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a name for your task definition; for example, `fargate-task`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll further down and under **Task size**, set **Task memory (GB)** to **1GB**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, set **Task CPU (vCPU)** to **0.5 vCPU**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, under **Container Definitions**, click the **Add container** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be selecting an existing container here, so in the `nginx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similarly, for `nginx`, as per the following screenshot:![Figure 7.33 – Fargate
    launch container
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_07_33.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.33 – Fargate launch container
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, for `80` for the **Container** port.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll toward the bottom and click the **Add** button. This will take you back
    to the **Create new Task Definition** page. Scroll toward the bottom and click
    on the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a few seconds, you should find that your task definition has been created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **View task definition** button. This will take you back to the
    ECS dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Clusters** link from the left-hand menu. You will see that
    your **MyCluster** cluster is now available. Click on the **MyCluster** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Task** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Run new Task** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Run Task** page, ensure that **Launch type** is set to **Fargate**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will find that the task definition has been pre-populated with your task.
    If not, select it from the drop-down arrow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For `1` is set as we will only run one task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **VPC and security groups**, select **ProductionVPC**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Subnets**, select **Public Subnet One**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Security groups**, click the **Edit** button next to the provided security
    group name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be prompted to create a new security group, as per the following screenshot:![Figure
    7.34 – Fargate task security group
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_07_34.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.34 – Fargate task security group
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Accept the default to create an inbound rule that allows port `80` from the
    internet. Click the **Save** button at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, ensure that **Auto-assign public IP** is set to **ENABLED**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Run Task** button at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be taken back to the ECS dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within a few seconds, you should find that your task is now in the **RUNNING**
    status, as per the following screenshot:![Figure 7.35 – Fargate running task
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_07_35.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.35 – Fargate running task
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, under **Task**, click on the task ID link. This will bring up the **Details**
    page of the task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a note of the **Public IP** address and copy and paste it into a new browser
    tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should then find that you can connect to the `nginx` web page, as per the
    following screenshot:![Figure 7.36 – nginx application running on Fargate
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_07_36.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.36 – nginx application running on Fargate
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You have just deployed your first Fargate task!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To clean up, go back to your ECS dashboard. From the left-hand menu, click the
    **Clusters** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the right-hand pane, click the **MyCluster** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the **Task** tab, select the checkbox next to your task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **Stop** button. You will be prompted to confirm your
    action. Click the **Stop** button in the dialog box that appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will stop your task. You will also receive a notification, stating that
    the task was successfully stopped. You do not need to worry about the cluster
    as you only pay for the tasks on Fargate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this exercise, we demonstrated how you can launch a simple nginx Docker container
    on ECS using the Fargate launch type. Next, we will summarize this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at a wide range of AWS compute solutions, starting
    with their flagship solution, Amazon **EC2**. We discussed AMIs, which are machine
    images that contain the base operating system, any applications and the state
    of patches, and updates that are used to launch your EC2 instance as a fully-fledged
    server. AMIs are made available via the Quick Start AMIs, Community, and Marketplace,
    and you can also create your own AMIs based on your corporate requirements.
  prefs: []
  type: TYPE_NORMAL
- en: We examine the different EC2 instance types and families and how an instance
    type is effectively a description of associated hardware and software specifications
    that your EC2 instance offers. We also looked at storage options for your EC2
    instance, with EBS, EFS, and FSx as possible solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you learned how to choose a particular EC2 Pricing Option, depending on
    your application needs, and identify opportunities for cost-effective deployment
    by combining the On-Demand, Reserved, and Spot Instance options.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at databases on AWS. Almost every application
    requires some form of database to host structured data. Amazon offers both relational
    and non-relational databases to help design modern web and mobile applications.
    Amazon also offers additional database solutions for specific niches such as social
    networking platforms, data warehousing solutions, and databases designed for hosting
    highly sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which AWS EC2 pricing option can help you reduce costs by allowing you to use
    your existing server-bound software licenses?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On-Demand
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reserved
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Spot
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Dedicated Hosts
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which AWS EC2 pricing option enables you to take advantage of unused EC2 capacity
    in the AWS cloud and can offer up to a 90% discount compared to On-Demand prices?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Spot Instances
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reserved Instances
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: On-Demand Instance
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Dedicated Hosts
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is true with regards to the benefits of purchasing a
    Convertible EC2 Reserved Instance? (Choose 2 answers)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can exchange a Convertible Reserved Instance for a Convertible Reserved
    Instance in a different Region.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You can exchange one or more Convertible Reserved Instances at a time for both
    Convertible and Standard Reserved Instances.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To benefit from better pricing, you can exchange a No Upfront Convertible Reserved
    Instance for an All Upfront or Partial Upfront Convertible Reserved Instance.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You can exchange All Upfront and Partial Upfront Convertible Reserved Instances
    for No Upfront Convertible Reserved Instances.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You can exchange one or more Convertible Reserved Instances for another Convertible
    Reserved Instance with a different configuration, including instance family, operating
    system, and tenancy.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which feature of the AWS EC2 service helps prevent accidentally terminating
    an EC2 instance by preventing the user from issuing a termination command either
    from the console or CLI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable "termination protection"
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable "termination protect"
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable "prevent termination"
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable "protect EC2"
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which storage solution enables you to share a common filesystem across multiple
    Linux-based EC2 instances that can be used to support applications that require
    access to data with very low latency connectivity?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: EFS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: EBS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: S3
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: NTFS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which type of IP address offering from AWS gives you a static, publicly routable
    address that will not change, even if you stop and restart an EC2 instance that
    it is associated with?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Public IP address
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Private IP address
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Elastic IP address
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Regional IP address
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which AWS service enables you to configure multiple Windows-based EC2 instances
    to share and access a common storage solution that is based on using the industry-standard
    SMB protocol and eliminate the administrative overhead of managing Windows file
    servers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon FSx for Windows File Server
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon Elastic File System
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon Elastic Block Store
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon DFS Volumes for Windows File Server
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following types of EBS volumes can be used as boot volumes for
    your EC2 instances? (Select 2 answers)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: General Purpose SSD (gp2)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Provisioned IOPS SSD (io1)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Throughput Optimized HDD (st1)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Cold HDD (sc1)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: FSx for Windows
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following AWS services enables you to quickly launch a web server
    with a pre-configured WordPress installation pack, offers predictable monthly
    pricing, comes with integrated certificate management, and provides free SSL/TLS
    certificates?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Lightsail
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS EC2
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS RDS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Elastic Beanstalk
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which AWS service can be used to run a piece of code that can create thumbnails
    of images uploaded to one Amazon S3 bucket and copy them to another S3 bucket?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS SNS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Lambda
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS RDS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Snowball
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
