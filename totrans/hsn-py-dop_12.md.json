["```\n    salt-master --version to run a check on the installation and get the version, similar to the following:\n    ```", "```\n    salt-minion --version in order to verify installation and get the version, similar to the following:\n    ```", "```\n    sudo nano /etc/salt/master\n    ```", "```\n    interface: 0.0.0.0\n    publish_port: 4505\n    ret_port: 4506\n    auto_accept: True\n    ```", "```\n    master: <salt_master_ip>\n    ```", "```\n    sudo salt '*' test.ping\n    ```", "```\n    connect function takes a hostname compulsorily and it takes a port number optionally. It also includes **kwargs, which is just a large number of arguments such as proto and timeout that the function may have. The following command connects to a DNS instance:\n\n    ```", "```\n    connect(\"google-public-dns-a.google.com\", port = 53, proto = \"udp\", timeout = 3)\n    ```", "```\n\n    ```", "```\n    pip as well, though that is not a frequent occurrence. Let’s run this command and install Ansible:\n    ```", "```\n    mkdir ansible_project\n    cd ansible_project\n    ```", "```\n    [myhosts]\n    <IP_1>\n    <IP_2>\n    ```", "```\n    ansible myhosts -m ping -i inventory.ini\n    ```", "```\n    from ansible.module_utils.basic import AnsibleModule\n    def join_strings(string_1, string_2):\n        return string_1+string_2\n    def main():\n        module_args = dict(\n            string_1=dict(type='str', required=True),\n            string_2=dict(type='str', required=True),\n        )\n        result = dict(changed=False, message=\"\" )\n        module = AnsibleModule(\n            argument_spec=module_args,\n            supports_check_mode=True\n        )\n        string_1 = module.params['string_1']\n        string_2 = module.params['string_2']\n        result[\"message\"] = string_1 + \" \" + string_2\n        module.exit_json(**result)\n    if __name__ == '__main__':\n        main()\n    ```", "```\n    chmod +x hello_ansible.py\n    ```", "```\n    ---\n    - hosts: localhost\n      gather_facts: false\n      tasks:\n        - name: Hello World\n          add_numbers:\n            string_1: Hello\n            string_2: Ansible\n          register: result\n        - debug:\n            var: result\n    ```", "```\n    ansible-playbook -M . hello.yml\n    ```", "```\n    npm install -g cdktf-cli\n    ```", "```\n    cdktf init --template=python\n    ```", "```\n    from constructs import Construct\n    from cdktf import App, TerraformStack\n    from imports.aws import AwsProvider, S3Bucket\n    class MyStack(TerraformStack):\n        def __init__(self, scope: Construct, ns: str):\n            super().__init__(scope, ns)\n            AwsProvider(self, 'Aws', region='us-east-1')\n            S3Bucket(\n                self,\n                '<Terraform_Function_Name>',\n                bucket=<'Bucket_Name_Here>',\n                acl='private'\n            )\n    app = App()\n    MyStack(app, \"python-cdktf\")\n    app.synth()\n    ```", "```\n    cdktf deploy\n    ```", "```\n    cdktf destroy\n    ```"]