- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implementing the Basic Lean-Agile Solution Team (BLAST)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Success today requires the agility and speed to constantly innovate, coupled
    with the efficiency and discipline to deliver value consistently. Integrating
    Lean and Agile methodologies is the key to achieving this balance.
  prefs: []
  type: TYPE_NORMAL
- en: —Satya Nadella, CEO of Microsoft
  prefs: []
  type: TYPE_NORMAL
- en: The world is changing faster than we could ever imagine, and the pace of change
    will only accelerate with the rise of **artificial intelligence** (**AI**), **machine
    learning** (**ML**), and robotics. Automation and digitization have become the
    norm, allowing individuals to do things more efficiently and faster.
  prefs: []
  type: TYPE_NORMAL
- en: Consequently, competing and thriving in the digital age require sensing and
    responding to market changes and emerging opportunities. Recognizing this imperative,
    the **Basic Lean-Agile Solution Team** (**BLAST**) framework is your definitive
    guide to harmonizing Lean efficiency with Agile adaptability.
  prefs: []
  type: TYPE_NORMAL
- en: 'While Lean and Agile are based on different foundations, combining them creates
    unparalleled advantages. For example, Agile-based software delivery organizations
    have significantly improved their value flows by implementing highly integrated
    and automated DevOps pipelines. Laggards in DevOps transformation face obsolescence,
    underlining a hard truth: being solely Agile or Lean is not enough. Tomorrow’s
    leaders will be those who expertly integrate both methodologies, not just in software
    deliveries but across the organization. By helping to eliminate waste, Lean enables
    you to unlock more capacity for enhancing products and services, ultimately increasing
    the bottom line.'
  prefs: []
  type: TYPE_NORMAL
- en: BLAST extends conventional Agile methodologies such as Scrum by orchestrating
    multiple small teams that generate work in continuous flows, yet seamlessly encompasses
    Agile’s iterative and incremental approach to developing new products and services
    or solving complex business and technical problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, using BLAST, we detail the mechanics of combining Lean and
    Agile methods. BLAST’s 17 steps (see *Figure 8**.1*) illustrate a comprehensive
    approach from concept to realization, promoting agility and lean efficiency for
    future-ready organizations. The topics covered in this chapter include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Harnessing BLAST
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Basic Lean-Agile Solutions Teams (BLAST)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Lean-Agile development concepts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing Development Cadences and Value Deliveries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embracing Lean-Agile management practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracing BLAST’s history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are no technical prerequisites for understanding the content in this chapter.
    However, you may find value in reviewing the concepts presented in [*Chapter 2*](B21818_02.xhtml#_idTextAnchor106),
    *Solving Complex Business Problems with Agility*, and [*Chapter 3*](B21818_03.xhtml#_idTextAnchor154),
    *Establishing Lean Flows to* *Improve Productivity*.
  prefs: []
  type: TYPE_NORMAL
- en: Harnessing BLAST
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If problems were always small and manageable, an organization could simply employ
    one or two small Agile teams, such as Scrum, to address its business problem-solving
    or development needs. However, this isn’t always the case, especially in larger
    organizations. Additionally, many of the individuals required to support business
    processes, systems, product, or service-oriented solutions have operational roles
    better suited to *Lean-flow practices*.
  prefs: []
  type: TYPE_NORMAL
- en: Following the **iterative and incremental development** (**IID**) model of Agile,
    other teams within the BLAST collaborate to implement solutions across timeboxed
    iterations, with varying durations, but always on a set cadence.
  prefs: []
  type: TYPE_NORMAL
- en: The longevity of Blast teams can vary, depending on the scope of work. For instance,
    a BLAST formed to implement a business process involving data integration across
    business systems might be relatively short term on the order of weeks to months.
    Conversely, BLAST teams formed to support ongoing business processes or commercial
    product and service development activities typically span their economically viable
    lifecycles, typically measured in years.
  prefs: []
  type: TYPE_NORMAL
- en: Operating within the context of value streams, BLAST implements a team-of-teams
    concept to synchronize work across either a single value stream or multiple streams
    with the latter being more common. While some teams and individuals within BLAST
    adhere to Lean-flow principles and practices for their day-to-day work, others
    follow Agile’s iterative and incremental patterns, using methods such as **Scrum**,
    **Kanban**, or **eXtreme** **Programming** (**XP**).
  prefs: []
  type: TYPE_NORMAL
- en: We must also consider hybrid situations where a team employs both Lean and Agile
    practices simultaneously. This is often seen in modern software delivery organizations
    that have implemented **continuous integration/continuous delivery** (**CI/CD**)
    and DevOps toolchains to integrate, streamline, and automate their processes.
    In modern software delivery pipelines, the BLAST teams operate in dual modes,
    leveraging Lean's flow for day-to-day operational work while using Agile's timeboxed
    model for planning , solution development, and delivery purposes. Finally, some
    domain experts from Lean-oriented operations teams may be called upon to support
    the efforts of Agile-oriented development teams on an ad hoc or as-needed basis.
  prefs: []
  type: TYPE_NORMAL
- en: Despite employing different work patterns, BLAST guides teams to collaborate
    in a coordinated manner, aligning their efforts across value streams. Regardless,
    the Lean-Agile approach emphasizes continuous improvement of the **customer experience**
    (**CX**) and fosters a value-focused mindset among those involved in planning
    and execution. In summary, BLAST offers a clear strategy and structure for planning,
    integrating, and synchronizing solution development efforts across multiple teams,
    ensuring their collective contribution to organizational goals.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll delve into the mechanics of BLAST, exploring its
    role in enhancing collaborative excellence across teams.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Basic Lean-Agile Solutions Teams (BLAST)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the hallmarks of the Scrum framework is its simplicity, with its three
    pillars, three roles, five events, and three artifacts. This simplicity makes
    Scrum an ideal Agile framework for individual small teams.
  prefs: []
  type: TYPE_NORMAL
- en: To properly scale Agile across the enterprise, we need to increase the number
    of teams, not the number of people within each team. While individual teams can
    retain Scrum’s simplicity to support their work, complexity arises when integrating
    and coordinating work across multiple teams. This is where the BLAST framework
    becomes crucial – to manage those complexities, as shown in *Figure 8**.1*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – BLAST framework](img/B21818_08_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – BLAST framework
  prefs: []
  type: TYPE_NORMAL
- en: As you go through this chapter, continue to refer to *Figure 8**.1*, which depicts
    the flow of work conducted by multiple Lean-Agile teams operating within the BLAST.
  prefs: []
  type: TYPE_NORMAL
- en: The authors have endeavored to maintain simplicity in the BLAST framework, but
    organizing the efforts of multiple teams operating in Lean and Agile modes requires
    more work. Unlike Scrum, which uses the term *events*, BLAST uses the term *steps*
    to imply action and progress. As you go through this chapter, you will find that
    the BLAST framework helps teams coordinate the work of multiple Lean-Agile teams
    across seventeen steps in four **core domains of work**, with three supporting
    **roles** and three delivery **artifacts**. We already articulated the goals,
    foundational principles, and three pillars that make up the Lean-Agile house in
    [*Chapter 1*](B21818_01.xhtml#_idTextAnchor010), so we won’t revisit that here.
  prefs: []
  type: TYPE_NORMAL
- en: Categorizing BLAST work activities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As noted previously, BLAST’s seventeen (17) activities are grouped into four
    primary categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution discovery**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MVI planning**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Workflow coordination**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customer feedback**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The purpose of this grouping is to break the BLAST development cycle down into
    logical components of work that facilitate our ability to iteratively and incrementally
    deliver value in a multi-team environment. Equally importantly, BLAST implements
    a closed-loop and customer-centric flow, ensuring that work progresses smoothly
    and continuously while maintaining flexibility and adaptability.
  prefs: []
  type: TYPE_NORMAL
- en: Customer centricity entails prioritizing the customer experience in everyone’s
    actions and attitudes. It’s a business-wide strategy that requires more than just
    considering the customer’s requirements. Customer-centric enterprises deliver
    whole-product solutions designed with a profound understanding of customer needs.
    This approach improves employee alignment, which enhances customer delight and
    ultimately drives increased revenue and profitability in commercial enterprises.
    Nonprofits and governments benefit by better serving their beneficiaries and citizens
    to fulfill their missions.
  prefs: []
  type: TYPE_NORMAL
- en: The subsections that follow describe each of the activities within these four
    categories, delineating the flow of work in a manner that ensures streamlined
    integration of Lean and Agile principles. We’ll start with the activities that
    form BLAST’s customer-centric foundations involving solutions discovery.
  prefs: []
  type: TYPE_NORMAL
- en: Defining BLAST increments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A BLAST focuses on creating **minimum valuable increments** (**MVIs**). However,
    MVIs are not always released as soon as they are available. Very often, MVIs will
    be bundled together to create an MVRs. These MVRs may come from one BLAST or from
    multiple BLASTs. When this occurs, the sequence within which we create the MVIs
    may be dependent upon their being bundled with other MVIs to create an MVR or
    integrated increment. Conceptually, an integrated increment is a bundling of MVIs
    to assemble a complete solution or components of a product release. MVRs are specified
    in BASE planning activities since they are part of product management-defined
    releases.
  prefs: []
  type: TYPE_NORMAL
- en: Solution discovery (steps 1 and 2)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Customer-centric enterprises consider customer value, needs, and wants as the
    most important factors in planning and executing. This philosophy should guide
    every business decision.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following foundational steps initiate value-stream improvements for BLAST
    teams:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Customer journey**: At the core of our approach is a deep understanding of
    our customers’ needs and values. The customer journey encompasses every interaction
    and touchpoint, from initial awareness to purchase, usage, and beyond, potentially
    leading to advocacy or repurchase. Achieving positive user experiences and customer
    satisfaction entails continuous evaluation and enhancement of our value proposition
    through direct customer engagement.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Business value backlog**: Business value is created by translating customer
    needs into actionable, prioritized work items that provide comprehensive solutions.
    The business value backlog starts by identifying potential work items as raw ideas
    and concepts. Through refinement, these ideas are vetted to fully understand the
    scope of work involved and prioritize them based on adding the most customer-centric
    value with the available time and resources. The business value backlog captures
    this understanding.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: BLAST goes beyond theory and supports the use of practices that lead to a profound
    understanding of customer value and needs. A product is more than the sum of its
    features; a whole-product approach considers everything involved in the customer
    journey, from purchase to use and support.
  prefs: []
  type: TYPE_NORMAL
- en: After establishing a customer-centric foundation, the BLAST teams move on to
    address **MVI planning**, laying the groundwork for value-driven delivery and
    making commitments.
  prefs: []
  type: TYPE_NORMAL
- en: MVI planning (steps 3 and 4)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This subsection explores how teams collaborate to plan and refine their objectives,
    strategize their work, and ensure fast value delivery and feedback. Ultimately,
    we need agreement on the team’s short-term goals to manage and eliminate dependencies,
    integrate requirements, and optimize the workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MVI refinement**: The value manager (product owner) and developers collaborate
    to refine requirements, architectures, and designs to create the right products,
    services, or information assets for their customers. This refinement process focuses
    on three critical areas: decomposing epics into story-level details, addressing
    architectural and design issues, and determining the lower-level tasks needed
    to implement the desired features and functionality.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Epics are simply large stories that have yet to be broken down into refined
    and actionable user and technical stories. In contrast, stories are detailed enough
    to build the features and functions needed to implement the requirements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**BLAST planning**: Delivering customer value entails breaking down work into
    usable, functional increments, often necessitating collaboration among multiple
    cross-functional teams. This critical activity involves teams coordinating who
    is responsible for each task and when it will be completed and ensuring synchronization
    and integration of their efforts. Teams strive for continuous and frequent deliveries
    on cadence, releasing products and services in collaboration with value managers/product
    owners and other stakeholders.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mastering the nuances of BLAST planning ensures that the teams’ efforts directly
    align with customer needs and drive tangible business results. By aligning tactical
    plans with strategic objectives and making clear commitments, teams can achieve
    high-quality business outcomes, enhancing their credibility and impact within
    the organization.
  prefs: []
  type: TYPE_NORMAL
- en: As the BLAST teams shift from planning to action, they move on to the heart
    of BLAST’s operational model. In the next subsection, on **workflow coordination**,
    we’ll learn how teams bring their plans to life, seamlessly integrate workflows,
    and ensure they can effectively adapt to address challenges during execution.
  prefs: []
  type: TYPE_NORMAL
- en: Workflow coordination (steps 5 to 11)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: BLAST emphasizes that robust execution must be in alignment with MVI planning
    objectives. For BLAST teams, understanding and implementing the steps of execution,
    integration, and coordination ensures that the planned efforts are effectively
    realized within the given timebox.\
  prefs: []
  type: TYPE_NORMAL
- en: Modern integrated DevOps toolchains enable automated configuration, builds,
    testing, and deployment, shifting product development left in the delivery cycle.
    Agile’s iterative and incremental cadences seamlessly integrate with the Lean
    flow to facilitate planning and release cycles. Automation ensures that every
    product development step is streamlined, reducing manual errors and enhancing
    the value flow.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following section introduces seven steps across two flow operating models
    for executing and integrating Lean-Agile workflows, as described in the following
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Commitment backlog**: After reviewing requirements, design, and acceptance
    criteria, teams commit to completing the scope of work they have reviewed and
    accepted for the next increment. It’s crucial to note that these commitments should
    be driven by customer needs rather than external influences or driven by team
    or other stakeholder preferences. Flexibility is key; commitments should not be
    driven by siloed or traditional project management behavior.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Commitments cannot be made without sufficient refinement and planning completed
    in advance. Development teams must be confident that they have the requirements
    and acceptance criteria sufficiently defined to understand what they need to build.
    With this understanding and knowledge of their capacity, teams can make informed
    delivery commitments.
  prefs: []
  type: TYPE_NORMAL
- en: '**Lean teams**: Teams that perform repetitive work, where productivity, quality,
    and efficiency are critical concerns, or that want to minimize delays in the workflow,
    often choose the flow track. In other words, they operate predominantly using
    Lean-oriented practices, focusing on ensuring the smooth flow of work, people,
    information, and materials within a business environment.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Kaizen**: In a Lean team, Kaizen events are focused improvement activities
    to enhance processes, workflows, and outcomes. These events bring together cross-functional
    team members to analyze specific areas for improvement, identify inefficiencies
    or bottlenecks, and brainstorm solutions collaboratively.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By regularly engaging in Kaizen events, BLAST teams foster a culture of continuous
    improvement, allowing them to refine their practices iteratively, streamline workflows,
    and optimize performance. This iterative approach enables teams to adapt quickly
    to changing requirements and market conditions, increasing efficiency, quality,
    and customer satisfaction in the development process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Agile teams**: Teams working to solve complex business problems, plan new
    increments, or develop or enhance processes, products, and services typically
    choose the timeboxed development track. For example, the timeboxed development
    approach of Agile practices (e.g., Scrum) allows teams to iteratively experiment
    with different concepts and incrementally deploy new features and capabilities.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Retrospectives**: Agile-based teams must rapidly adjust when an issue or
    impediment blocks the completion of committed work. If an issue arises, teams
    should have a bias for action and resolve the problem as soon as possible to avoid
    the accumulation of increasingly complex and challenging problems. A Scrum Master,
    Value Manager, or equivalent role can help the team resolve impediments, depending
    on the Agile method employed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**BLAST iterations**: Synchronizing and integrating the work of multiple teams
    is challenging when some teams use a timeboxed approach while others follow a
    continuous flow approach. BLAST facilitates cross-team integration via a shared
    backlog, BLAST planning discussions, and decomposing work into actionable work
    items. Additionally, implementing cross-team reviews and retrospectives on a regular
    cadence helps teams align their activities and discover ways to improve their
    collaboration and work.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**MVI outputs**: In mature software delivery organizations, proper team structure
    and cross-team working agreements reduce the need for synchronization of efforts.
    However, whole product releases deployed as MVIs may involve teams from disparate
    business domains working together to coordinate the entire value chain delivery.
    For example, R&D, legal, product and marketing management, sales, architecture,
    finance, development, support, and partner management organizations all contribute
    to a successful MVR release.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customer feedback (steps 12 to 17)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This stage encompasses the essential customer feedback loops aimed at aligning
    our future efforts to evolve processes, products, and services in a value-oriented
    manner. This section will delve into steps 12 through 17 of the BLAST framework,
    which enable us to evolve and improve continuously to meet our customers’ needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Integrated increments**: This step is a staging activity for MVIs. Following
    the workflow coordination stage, which outputs a series of MVIs related to the
    MVR planned for the current business increment, these MVIs form part of the larger
    release, though they are often interconnected. The MVI outputs produced across
    these business functions arrive as needed and may be released at different time
    intervals. For instance, marketing promotions frequently commence well ahead of
    a product release. The coordinated and synchronized release of MVIs within an
    MVR follows the increment release process.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Reviews**: An MVI should not be released to its intended customers without
    an appropriate review to validate that the outputs meet the requirements specified
    during refinement in the business value backlog. For example, customers and users
    are the ultimate arbiters of the value provided by your products and services.
    However, executives and other stakeholders need to confirm that process and systems
    updates achieve the business and compliance requirements that justified their
    investments.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Feedback and pivot**: Integrated increment reviews are ineffective if the
    value provided fails to achieve its goals and we do not capture feedback and take
    appropriate action. This activity ensures that bugs (errors in development) and
    defects (errors in understanding requirements) in the delivered products and services
    are properly documented and sent back to the MVI refinement process, re-entering
    the business value backlog for reprioritization. Skipping this step by releasing
    the product or immediately putting it back into the development stream will certainly
    cause more problems for the organization.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Needs analysis**: This activity is the BLAST equivalent to Scrum’s retrospectives
    at the team of teams level. Individual teams meet at the end of each BLAST iteration
    to assess their performance and identify ways to improve in future BLAST cycles.
    Since BLAST is a team-of-teams concept, each team should appoint a representative
    who is best qualified to take their findings to a joint meeting with other teams.
    In these meetings, the representatives collaboratively address integration, synchronization,
    and dependency issues to enhance future BLAST cycles. Team representatives then
    share the recommendations from their ToT assessments with their teams to implement
    the improvements. For complex issues, several iterations may be required to achieve
    the desired outcomes.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Deployed integrated increments**: This is the path our released MVIs take
    when judgments from the integrated increment review indicate that the value meets
    our customers’ expectations. MVIs and MVRs typically consist of multiple solution
    components for customers, and the organization must ensure that each component
    is fully deployed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For example, we cannot release products for resale through our **value-added
    resellers** (**VARs**) without fully deploying the necessary communications, promotions,
    training, product information, and support artifacts required to ensure the success
    of our partners. From the example provided, it should be clear that an integrated
    increment may consist of components from multiple BLASTs, coordinated to deliver
    a cohesive and comprehensive solution.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Customer experience**: After deploying a new product or service to our customers,
    CX programs are essential to ensure ongoing customer satisfaction and loyalty.
    These programs should encompass various initiatives to gather feedback, promptly
    address issues, and continuously enhance the customer journey.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Examples of relevant CX methods are as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Surveys and feedback forms
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Net promoter score (NPS)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Customer journey mapping
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: User testing
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Social media monitoring
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Customer support analysis
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Focus groups
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Key components of effective CX programs include customer interviews and sentiment
    analysis to gain insights into customer satisfaction and preferences. Additionally,
    proactive customer support and engagement strategies are vital for addressing
    issues and providing personalized assistance. Regular monitoring of customer interactions
    helps identify areas for improvement, foster long-term relationships, drive loyalty,
    and maximize the success of our products or services on the market.
  prefs: []
  type: TYPE_NORMAL
- en: 'This concludes our walk-through of the BLAST framework. You may notice similarities
    with other Agile frameworks, particularly Scrum. But the goal of BLAST is to cohesively
    integrate two fundamental management philosophies: Lean and Agile principles and
    practices. As always, the details matter. So, let’s spend the rest of the chapter
    understanding BLAST implementation details, starting with a discussion on how
    to integrate Lean and Agile practices into a multi-team environment.'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Lean-Agile development concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'BLAST integrates Lean and Agile methods, a strategy designed to empower multiple
    teams to collaborate effectively on complex business challenges. A fundamental
    aspect of BLAST is its dual nature: Lean for daily operational efficiency and
    Agile for fostering innovative product changes.'
  prefs: []
  type: TYPE_NORMAL
- en: In many organizations, team members are primarily expected to operate within
    the Lean framework, as discussed in [*Chapter 3*](B21818_03.xhtml#_idTextAnchor154),
    *Establishing Lean Flows to Improve Productivity*, which aligns with the organization’s
    focus on value delivery. This emphasis on Lean principles forms a foundational
    element of the BLAST framework. However, BLAST also incorporates Agile components
    that enable cadence-based business and product planning, driving the development
    of new products, services, or other business-enabling artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: BLAST is a transformative approach to work aimed at overcoming limiting beliefs
    and practices that may hinder an organization’s full realization of Lean-Agile’s
    potential. Despite BLAST’s well-defined processes and activities designed to enhance
    team collaboration and effectiveness, its methods should be continually tailored
    to best suit your unique context.
  prefs: []
  type: TYPE_NORMAL
- en: In the subsection that follows, we’ll look at how to align the work of multiple
    teams working together on developing a specific solution.
  prefs: []
  type: TYPE_NORMAL
- en: Aligning teams for collaborative excellence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**BLAST operates on a key principle:** *When teams align around shared goals
    to support the organization’s value streams, they collaboratively deliver the
    maximum value efficiently* *and cost-effectively.*'
  prefs: []
  type: TYPE_NORMAL
- en: When aligned, teams can be given more autonomy, go beyond simple coordination,
    and consistently get better results with less effort. With a mutual goal of enhancing
    delivery capabilities, the participating teams inherently understand the importance
    of relentlessly improving products, services, business systems, and processes.
    They realize that substantial improvements come from optimizing flows, eliminating
    waste, and focusing on key enhancement opportunities.
  prefs: []
  type: TYPE_NORMAL
- en: A critical aspect of BLAST is the seamless integration of work, ensuring fast
    feedback. In contrast, lacking harmony and goal alignment can result in fragmented
    operations, increased overhead, and wasted resources. At the heart of this alignment
    is a commitment to customer-centricity, emphasizing unrivaled value delivery through
    innovative products and services.
  prefs: []
  type: TYPE_NORMAL
- en: Combining Lean and Agile practices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While rooted in the principles of Lean Flows, BLAST does not ignore the advantages
    that Agile IID methodologies offer. It highlights the role of small, adaptable
    teams that consistently deliver value. Supporting the organization’s value streams,
    BLAST teams embrace Lean values, focusing on maintaining a continuous flow of
    value, minimizing inefficiencies, and swiftly adapting to changes.
  prefs: []
  type: TYPE_NORMAL
- en: While Lean supports sustained improvements in quality, productivity, and efficiency,
    adding Agile methods ensures that teams remain flexible in today’s global economy.
    By integrating iterative cycles and responsiveness, BLAST ensures teams respond
    quickly to changing customer needs and market conditions. Together, Lean’s efficiency
    and Agile’s adaptability position organizations to meet customer demands while
    continuously improving and innovating. Moreover, BLAST’s Lean orientation provides
    improvement insights that feed the organization’s holistic VSM initiatives.
  prefs: []
  type: TYPE_NORMAL
- en: In short, BLAST enables teams to achieve maximum efficiency and productivity
    by employing Lean’s flow-oriented concepts, while others opt for Agile’s iterative
    and incremental approach to problem-solving, business planning, and development.
    Additionally, certain team members, especially domain and technology experts,
    may be required to support both approaches when assisting multiple teams’ efforts.
  prefs: []
  type: TYPE_NORMAL
- en: Yet, even as we recognize the strengths of these combined methods, we must also
    address where decision-making authority should reside. The next subsection discusses
    how aligning values helps blend traditional and modern management approaches.
  prefs: []
  type: TYPE_NORMAL
- en: Defining BLAST roles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note that BLAST does not include the concept of formal *events*. The closest
    we come is the 17 *steps* defined in BLAST. However, since BLAST is a Lean-Agile
    methodology, it’s more appropriate to consider each step a defined activity within
    a BLAST-oriented value stream. With this understanding, let’s see how BLAST defines
    its roles.
  prefs: []
  type: TYPE_NORMAL
- en: In BLAST, we approach roles and responsibilities clearly, aiming not to replace
    terms from other Agile or Lean-Agile disciplines but to offer greater precision.
    One such role is the *value manager*, functionally equivalent the *product owner*
    in Scrum. Another is the *value coach* in place of the *scrum master*. But even
    more importantly, we don’t want to change the common terms used in your industry
    or business domains. So, these roles are meant to be abstractions to define the
    responsibilities given to individuals within a Lean-Agile enterprise. Renaming
    these roles is not mandatory, but it brings greater clarity. With this understanding,
    let’s examine the role of the value manager.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the role of value manager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In BLAST, to support the sustainment of Lean-Agile practices within an enterprise,
    instead of a traditional product owner, we introduce the **value manager**. This
    renaming isn’t about displacing Scrum terminology but clarifying it from a Lean-Agile
    context. The value manager emphasizes value delivery in all forms, minimizing
    any misconceptions tied to the Scrum product owner. For example, in large organizations,
    we have sometimes observed that software is developed but not properly supported
    because budgets for creating potential customer value were separate from budgets
    to operate and support the delivered software products.
  prefs: []
  type: TYPE_NORMAL
- en: The value manager balances stakeholder and customer demands, clearly articulating
    the backlog to guide teams toward high-priority tasks. The name captures the role’s
    essence while sidestepping Scrum-associated pitfalls of focusing solely on product-oriented
    backlogs. In contrast, the role of a value manager is to evaluate and prioritize
    all work from a value-added context.
  prefs: []
  type: TYPE_NORMAL
- en: There are varied approaches in BLAST to executing the value manager role and
    organizations are free to use unique terms for the role to express their responsibilities.
    The value manager, ideally an executive-level position within the company, provides
    support and guidance to the chief executives and shareholders, ensuring decisions
    align with the company’s best interests and deliver maximum customer value. They
    contribute to compliance efforts, financial reporting, risk management, and stakeholder
    relations within the product line they support, promoting ethical leadership and
    corporate governance.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s move on to understanding the role of **developers** in the BLAST
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the role of developers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In BLAST, developers are the core individuals who create value in the processes,
    systems, products, and services they deliver. But they’re not just isolated talents—they
    form a cohesive unit with a shared mission. In other words, they are the value
    stream team members in a Lean-Agile environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in BLAST, which can be applied across commercial, government, or non-profit
    sectors, the term *developer* is not confined to specific roles; rather, it signifies
    anyone supporting the organization’s Lean-Agile value streams. Let’s look at some
    of their defining characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Unified vision**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Self-contained**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Employs a** **ToT structure**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clearly** **defined roles**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross-functional**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Avoids dependencies**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value focused**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether it’s solving intricate business challenges, devising technical solutions,
    crafting business artifacts, or delivering products and services for an array
    of customers (internal or external), all these activities fall under the developer
    umbrella. Recognizing and valuing this diversity is critical to maximizing the
    team’s potential and output.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s move on to defining the role of a **value coach** in BLAST.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the role of value coach
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The value coach is an essential figure in BLAST, primarily responsible for steering
    the team toward its goals, facilitating effective communication, and ensuring
    adherence to best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Often, development teams might focus on individual tasks and overlook the bigger
    picture. Continuous improvement can be sidelined, and individual commitments might
    be neglected. A value coach ensures the team remains aligned with its core objectives
    and constantly evolves.
  prefs: []
  type: TYPE_NORMAL
- en: 'The value coach role in BLAST encompasses a range of responsibilities crucial
    to team dynamics and overall progress, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Facilitates team growth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports improvements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Facilitate external communications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encourages a Lean-Agile mindset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Servant leadership style
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This completes our discussion on BLAST team roles and responsibilities. The
    objective is not to enforce terms, roles, and responsibilities that don’t align
    with your industry, domain practices, or organizational preferences. BLAST is
    a framework to help orchestrate the work of multiple Lean-Agile teams to create
    solutions. It’s not meant to establish rigid rules and procedures. Instead, the
    aim is to provide clarity on roles and responsibilities that improve the functioning
    of Lean-Agile work environments and give you the freedom to make it work in your
    unique business context.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore inter-team collaboration in the BLAST framework.
  prefs: []
  type: TYPE_NORMAL
- en: Facilitating inter-team collaboration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In various scaled Agile frameworks, team ambassadors or liaisons serve as communication
    points between teams to facilitate coordination and alignment.[1](B21818_08.xhtml#endnote-001)
    For example, Scrum of Scrums, Scrum at Scale, Nexus, and SAFe® all have roles
    or other mechanisms to fulfill the liaison role.
  prefs: []
  type: TYPE_NORMAL
- en: In the BLAST framework, we endorse the concept of supporting collaborating teams;
    however, we refrain from assigning specific names to these roles. We believe that
    every situation is unique and requires tailored solutions. Additionally, these
    positions are often dynamic, with individuals being called upon ad hoc as needs
    arise.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, one or more employees from the accounting department might be
    summoned to assist a software development team as domain experts in ensuring compliance
    with financial regulations within a financial application. In such cases, the
    assignment is both temporary and part time.
  prefs: []
  type: TYPE_NORMAL
- en: We spoke previously about the relevance of management in a Lean-Agile organization,
    so let’s go back to that topic and spend a bit more time reviewing their role.
  prefs: []
  type: TYPE_NORMAL
- en: Balancing decision-making approaches
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Traditional management philosophies often favor a top-down approach, guiding
    organizations through centralized decision-making. In other words, the boss tells
    us what to do. However, this approach risks being perceived as autocratic, and
    management may overlook information available only to teams.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, Agile practices embrace a more participatory, bottom-up approach
    where the insights and contributions of team members are of higher importance.
    However, decentralized decision-making across the organization requires more collaboration,
    and teams may encounter coordination challenges, especially when a team of teams
    has different viewpoints, goals, and objectives. If we limit our views to these
    two management extremes, one could argue that a top-down strategy may provide
    clearer strategic intent even as the decentralized approach can improve the engagement
    and alignment of employees in their work.
  prefs: []
  type: TYPE_NORMAL
- en: Lean provides a more balanced approach by considering the roles of executive
    and middle management in supporting the work of multiple teams as they interact
    across one or more value streams. For example, in a Lean organization, executive
    managers serve as the architects of organizational strategy, orchestrating the
    vision and providing a cohesive force that aligns all levels of the company. Middle
    managers also play a crucial role in Lean organizations as they directly support
    the value streams. In BLAST, these are our value managers and value coaches. They
    are often referred to as the “glue” that holds companies together, bridging the
    gap between top management and lower-level workers.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, Lean organizations often combine the strengths of top-down and bottom-up
    paradigms, offering a balanced approach that delivers better business outcomes.
    This balanced approach, which we refer to as a Middle-Up-Down management strategy,
    enables a high-level view of what is needed while empowering teams to decide how
    to work within that context.
  prefs: []
  type: TYPE_NORMAL
- en: In the next subsection, we are going to take a deeper dive into the topic of
    decentralized decision-making from an Agile-based context at the small team level.
  prefs: []
  type: TYPE_NORMAL
- en: Fostering decentralization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The wider acceptance of Agile-based practices helped start a movement to adopt
    more streamlined organizational structures. Agile organizational structures foster
    self-organizing, cross-functional teams that no longer need traditional project
    managers to push work across silos. Therefore, Agile teams need less daily task
    direction and rely more on self-management with the assistance of roles such as
    scrum masters, product owners, and agile coaches.
  prefs: []
  type: TYPE_NORMAL
- en: 'The list that follows defines the key characteristics of decentralization:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Flatter structures**: Agile organizations typically favor flatter structures
    with self-managed teams that do not require daily task direction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Distributed decision-making**: Don Reinertsen emphasizes the importance of
    “balancing centralization and decentralization” in his book *The Principles of
    Product Development Flow: Second Generation Lean Product Development*. [2](B21818_08.xhtml#endnote-002),
    [3](B21818_08.xhtml#endnote-003) Every decision that must be escalated may cause
    delayed value flow and produce poorer decisions when people are too far from where
    the information lives. BLAST concurs with Reinertsen and the **Scaled Agile Framework**®
    (**SAFe**®)[4](B21818_08.xhtml#endnote-004),[5](B21818_08.xhtml#endnote-005) that
    leaders should make and communicate strategic decisions—those that are infrequent,
    long-lasting, and have significant economies of scale; all other decisions should
    be decentralized. [6](B21818_08.xhtml#endnote-006), [7](B21818_08.xhtml#endnote-007)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Servant leadership**: Agile emphasizes facilitation and coaching over traditional
    hierarchical authority. Servant leaders empower individuals and teams to excel
    by fostering a culture of responsibility and autonomy. Let’s look at two common
    roles, the agile coach and the scrum master:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agile Coaches** plan and deliver, facilitate events, establish best practices,
    advise leadership, and break down barriers between teams'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scrum Masters** ensure the team understands Scrum, facilitate Scrum events,
    support the goals outlined by the Product Owner, remove team impediments, and
    shield the team from interference'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous feedback loop**: The **plan-do-study-act** (**PDSA**) cycle, originally
    defined by Shewhart and popularized by Deming, is an effective method for gaining
    faster feedback and controlling unwanted variability during solution development.[8](B21818_08.xhtml#endnote-008)
    [9](B21818_08.xhtml#endnote-009), This loop fosters improvement and development
    through a consistent and continuous flow of feedback. More frequent and shorter
    PDSA cycles result in faster learning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The decentralized decision model of Agile works well in small team environments
    where the scope of work is constrained. However, as the scope of work increases
    to involve multiple teams, or agility becomes an enterprise-wide objective, the
    decentralized model falls short. Fortunately, this is where Lean management practices
    offer a more compelling management model. Before we get to that topic, let’s look
    more closely at why larger organizations struggle to implement flat structures
    and decentralized decision-making.
  prefs: []
  type: TYPE_NORMAL
- en: Managing cross-team interactions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A common approach to coordinating the work of multiple teams in scaled Scrum
    methodologies is to implement team-of-teams structures with representatives facilitating
    the bulk of the communications between team members and other stakeholders. However,
    even this approach can become overwhelming. This is one of the reasons why Lean
    organizations retain middle and upper management positions, ensuring that communication
    remains effective and manageable.
  prefs: []
  type: TYPE_NORMAL
- en: Embracing Lean leadership
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having flat and decentralized organizational structures is beneficial up to
    a point. However, as explained in the previous subsection, the number of potential
    interfaces between team members and stakeholders can become unmanageable. Simply
    put, more people are needed to facilitate communication and alignment.
  prefs: []
  type: TYPE_NORMAL
- en: In the dynamic landscape of Lean methodologies, organizations work to blend
    established hierarchical structures with progressive leadership practices. The
    **Toyota Production System** (**TPS**) offers a prime example of Lean management
    principles.
  prefs: []
  type: TYPE_NORMAL
- en: Within TPS, traditional management hierarchies remain intact, ensuring a clear
    chain of command from frontline supervisors to top executives. However, this approach
    is not rigid “command and control.” Instead, Lean leadership emphasizes leading
    by example, adopting servant leadership, and flattening operational structures
    to support value streams. The focus shifts from authority to collaboration, continuous
    improvement, and empowering employees. [10](B21818_08.xhtml#endnote-010), [11](B21818_08.xhtml#endnote-011),
    [12](B21818_08.xhtml#endnote-012)
  prefs: []
  type: TYPE_NORMAL
- en: Adopting traditional hierarchies with a twist
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Lean organizations, management hierarchies still exist, serving as the framework
    that supports efficient operations. The TPS model exemplifies this, with distinct
    layers of management ensuring seamless coordination. TPS integrates hierarchical
    management with decentralized authority and empowering practices to create a balanced
    and effective organizational structure. This approach combines clear command structures
    with the empowerment of frontline workers, fostering a culture of continuous improvement
    and collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing key management structures and principles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To successfully blend hierarchical management with decentralized and empowering
    practices, Lean organizations, like those employing the TPS, have developed a
    comprehensive approach. This involves maintaining clear command structures while
    empowering frontline workers and fostering continuous improvement. The following
    key structures and principles outline how TPS achieves this balance, ensuring
    that efficiency and innovation coexist harmoniously within the organization.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hierarchical management**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clear Chain of Command**: TPS maintains a traditional hierarchy to ensure
    order and clarity in decision-making, from frontline supervisors to top-level
    executives'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Role of executives**: Executives set strategic direction and foster a culture
    of continuous improvement and innovation'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Decentralization** **and empowerment:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gemba walks**: Leaders conduct Gemba walks to observe operations firsthand,
    stay connected to real-time challenges, and foster continuous improvement'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Empowering frontline workers**: Management encourages workers to identify
    and solve problems, ensuring quality through principles such as *jidoka* (automation
    with a human touch)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Middle management** **as facilitators**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bridge role**: Middle managers translate strategic goals into operational
    activities, supporting teams with resources and guidance'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Servant leadership**: Middle managers function as servant leaders, removing
    obstacles and supporting team efforts toward operational excellence'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Team structures**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross-functional teams**: Small, cross-functional teams, working across functional
    departments and value streams, collaborate to solve problems and implement improvements'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous improvement (Kaizen)**: Teams regularly engage in Kaizen assessment
    activities to enhance processes and eliminate waste'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Leading** **by example**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Going where the work is:** In Lean, leadership involves leading by example
    through active participation in problem-solving and continuous improvement processes.
    Practices such as Gemba walks, where leaders visit the actual workplace to observe
    operations and engage directly with employees, exemplify this approach by fostering
    firsthand understanding and collaboration.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Focused decision-making**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Strategic alignment**: Although feedback from all levels is essential, strategic
    decisions typically align with the hierarchical structure to ensure coherence
    with the organization’s broader goals, budget, and schedule considerations. This
    process is also collaborative.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Middle-up-down management**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Roles**: In the Lean approach, middle managers play a crucial role. They
    look up to leadership to understand the organization’s strategic vision while
    simultaneously looking down and across value streams to identify how to achieve
    that vision.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Responsibilities**: Their primary responsibility is to create an environment
    where the strategic vision can be effectively realized.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: By combining these management structures and principles, we can implement a
    balanced management framework that supports both efficiency and innovation. This
    creates a dynamic environment where hierarchy coexists with value-based delivery
    streams and small teams, fostering agility and continuous improvement.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a foundational understanding of Lean management, let’s move
    on to explore how BLAST teams are managed.
  prefs: []
  type: TYPE_NORMAL
- en: Conducting Gemba walks for Lean leadership
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: BLAST, with its Lean orientation, adopts Lean’s **middle-up-down management**
    approach. While hierarchical management structures are retained in Lean organizations,
    managers do not remain isolated in their offices; instead, they go to where the
    work takes place to understand the realities of the work environment. They are
    not there to find fault, but to better understand the issues and how they can
    help address them. This practice, known as a **Gemba walk**, involves managers
    and leaders visiting the actual workplace to observe processes firsthand and interact
    directly with those performing the work.
  prefs: []
  type: TYPE_NORMAL
- en: In virtual or remote work environments, leaders can achieve the essence of Gemba
    through digital workplace tours and online collaborative discussions, ensuring
    they remain connected to real-time challenges and nuances of the work.
  prefs: []
  type: TYPE_NORMAL
- en: By encouraging leaders to immerse themselves in the work environment, organizations
    foster a direct, two-way understanding between management and frontline teams.
    This hands-on engagement ensures that leaders are informed and deeply connected
    to daily challenges and opportunities for improving value delivery. It also cultivates
    a culture of mutual respect, where teams feel their contributions are genuinely
    recognized and valued. Executives, managers, and team leaders within a BLAST environment
    prioritize value delivery and work to remove barriers caused by siloed organizational
    structures.
  prefs: []
  type: TYPE_NORMAL
- en: Managing multi-tiered reviews and communications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For Lean-Agile organizations, the role of the product owner—referred to as the
    **value manager** in BLAST—leads planning. In a Lean-Agile organization, value
    is obtained through improvements in processes, infrastructure, tools and equipment,
    systems, products, and services. Therefore, the value manager role is multi-faceted
    in its scope and complexity.
  prefs: []
  type: TYPE_NORMAL
- en: This individual also requires strategic foresight to maintain a consistent and
    relevant flow of work items into the organization’s development pipelines. This
    is not merely about responding to immediate customer needs but involves a deeper
    alignment with corporate strategy, objectives, and portfolio management, particularly
    when new circumstances necessitate skills, software, tooling, and equipment changes.
  prefs: []
  type: TYPE_NORMAL
- en: Adopting a multi-tiered planning approach is essential in this context. This
    involves integrating annual strategic planning cycles with frequent quarterly
    portfolio and product management planning sessions. These are further supplemented
    by regular product design and planning activities, creating a cohesive and responsive
    team planning approach that adapts to the dynamic demands placed on software and
    product development teams.
  prefs: []
  type: TYPE_NORMAL
- en: For organizations seeking to harness Lean-Agile practices for competitive advantage,
    understanding and effectively implementing multi-tiered planning cadences ensures
    that development efforts consistently align with strategic goals, maximizing efficiency
    and driving innovation. Effective Lean-Agile planning enhances organizational
    agility and supports sustained competitive success.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s discuss how team-level planning changes in a Lean-Agile organization.
  prefs: []
  type: TYPE_NORMAL
- en: Improving daily meetings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Have you ever found yourself in a Daily Scrum meeting where the energy is noticeably
    low, and people’s eyes glaze over during the monotonous repetition of information?
    Do you observe team members multi-tasking or, worse, disengaging and not paying
    attention to their colleagues’ updates? If so, you are not alone. This scenario
    is more common than you might think and happens for several reasons.
  prefs: []
  type: TYPE_NORMAL
- en: For example, team members often feel sufficiently updated through other communication
    channels and meetings since the last Daily Scrum. Discussions may delve into excessive
    detail, shifting focus from quick updates to problem-solving sessions better suited
    for follow-up discussions. Or are there too many people in your meetings? In our
    experience, any Scrum meeting with more than seven to nine attendees will become
    unwieldy, leading to disengagement and discontent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recognizing these challenges is the first step toward improving your daily
    meetings, ensuring they serve their intended purpose—inspecting progress toward
    the sprint goal, coordinating the day’s work, adjusting upcoming planned work,
    and resolving impediments. The team can use any structure or technique for the
    Daily Scrum. However, the team should not wait for these daily meetings to adjust.
    The team should collaboratively adapt, or re-plan work whenever needed. Let’s
    examine some ways to improve:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Refine the Daily Scrum process**: Consider reducing the frequency of Daily
    Scrums to two or three times per week. This change can prevent the meetings from
    becoming monotonous and make them more dynamic and valuable. As teams become more
    experienced with Agile practices, they frequently communicate and collaborate
    to maintain project momentum, making daily meetings less critical.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use a Kanban board**: Integrating a Kanban board into the Daily Scrum process
    effectively illustrates the team’s workflow, the status of work, and the flow
    of value. The Kanban board efficiently addresses the three questions in the daily
    meeting so the team can focus more on coordinating the day’s work and resolving
    impediments. This approach aligns well with Lean principles, emphasizing waste
    removal (in this case, unnecessary discussion) and smooth flow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use generic language**: Due to differing views on best practices, terms,
    and the costs associated with training and certification, some organizations may
    resist adopting specific methodologies and terminology on a large scale. For example,
    what is typically known as a Daily Scrum could be called a sync meeting or whatever
    makes sense to your team. You can still implement Scrum’s practices without necessarily
    using its specific jargon—we encourage and support this adaptability if using
    specific jargon gets in the way of adoption and their supporting value steams.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Lean-Agile principles to adapt the Daily Scrum for your context to enhance
    the effectiveness of it and other Agile events. The evolution of practices requires
    a mature understanding of Agile methods, emphasizing adaptability and continuous
    improvement.
  prefs: []
  type: TYPE_NORMAL
- en: Conducting iteration reviews in Lean-Agile environments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the Lean-Agile development environment, the *Sprint Review* concept undergoes
    a transformative shift. In BLAST, we prefer *iteration* over the term *Sprint*,
    though we often use the terms interchangeably in this book. One reason is that
    the term *iteration* is independent of the team’s development approach. Also,
    the term *Sprint* has the suggestion of running a short but fast race, which is
    not our intent. Instead, our goal in each iteration is to deliver a new increments
    of value at a sustainable cadence. We also use the term *integrated increment*
    over increment to emphasize that the increment is fully integrated from a functional
    point of view across the teams involved, to fully support a new release.
  prefs: []
  type: TYPE_NORMAL
- en: 'Timeboxes establish the cadence at which we have agreed to deliver new increments
    of value. A metronome is a better analogy, as the iterations set the pace for
    our work and our deliveries. Therefore, the term *integrated increment* more accurately
    conveys the purpose of this timebox: to produce a new increment of customer-centered
    value through a new product or value-stream enhancement.'
  prefs: []
  type: TYPE_NORMAL
- en: The review of the BLAST integrated increment at the end of each solution development
    cycle is a structured activity where customers, users, and other stakeholders
    assess the completeness of the integrated increments for release. For example,
    an integrated increment might focus on development work across two disparate information
    systems that simultaneously support changes to existing business processes. The
    integrated increment may also consist of transformed and migrated data, SQL queries,
    custom reports, job aids, training materials, and related communications.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8**.2* illustrates the concept of an integrated increment.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Integrated increment components](img/B21818_08_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Integrated increment components
  prefs: []
  type: TYPE_NORMAL
- en: The number of incremental releases and the overall timeline for completing the
    systems integration work are secondary concerns. Instead, the primary focus in
    MVR planning and BLAST planning is on achieving the increment’s goal through the
    completion of one or more MVIs. The increment’s goal provides a clear description
    of the minimum amount of business value that should be realized from the customer’s
    perspective, detailing all the components required for its release and the acceptance
    criteria that define their definition of done. In other words, the MVI approach
    prioritizes delivering tangible, useful, and deployable value in each development
    cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, an MVR may include multiple MVIs and follow the same BLAST release
    cadence. We will explore the relevance of MVIs and MVRs later in this chapter,
    and again in [*Chapter 9*](B21818_09.xhtml#_idTextAnchor426), *Defining a Business
    Agility System for the* *Enterprise (BASE)*.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will move on to discuss the use of team retrospectives in a Lean-Agile
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing retrospectives with value stream management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a Lean-Agile organization, the approach to Sprint Retrospectives undergoes
    a significant transformation. Spending time, money, and resources on non-value-added
    activities can be detrimental. Well-intentioned retrospectives that lead to local
    optimizations can harm BLAST performance, resulting in infighting, finger-pointing,
    fire-fighting, and employee burnout. This often occurs when changes or delivery
    objectives are dictated without considering their systemic impact. Therefore,
    in BLAST, we align retrospectives with VSM-based improvement strategies to focus
    on the most impactful enhancements.
  prefs: []
  type: TYPE_NORMAL
- en: Scrum retrospectives focus on what the development team can directly influence
    in the forthcoming sprint, aiming for immediate, iterative improvements within
    the team’s local authority and scope. This approach works well in small team settings
    where the scope is limited to the team’s control. However, in large, multi-team
    settings, individual team improvements can lead to local optimization, overlooking
    the broader system needs. So, to recap, team-based retrospectives are beneficial
    for making the team more effective and adaptable but are limited in their capacity
    for broader, systemic changes due to a lack of visibility and authority over the
    entire value stream.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, Lean’s VSM practice mandates a broader perspective, examining the
    entire value stream from concept or request to customer delivery. This helps identify
    and prioritize enhancements that significantly impact overall flow, productivity,
    efficiency, and throughput. These improvements directly contribute to increased
    revenue, reduced costs, and improved quality.
  prefs: []
  type: TYPE_NORMAL
- en: Without systems thinking, optimizations may improve specific teams or processes
    but miss more impactful changes that benefit the entire value stream. If changes
    do not address the current bottleneck, considerable effort and resources might
    be expended with little to no perceptible benefit to customers or the organization.
    Therefore, VSM practitioners always look for the constraints that hinder flows.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s revisit a figure originally introduced in [*Chapter 3*](B21818_03.xhtml#_idTextAnchor154)
    as an example of the theory of constraints (see *Figure 8**.3*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Theory of constraints example](img/B21818_08_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – Theory of constraints example
  prefs: []
  type: TYPE_NORMAL
- en: 'As before, *Figure 8**.3* depicts a value stream comprising seven activities,
    each taking 5 minutes, with one exception: a central activity (A4) that requires
    10 minutes. This lengthier activity creates a bottleneck, causing a backlog of
    work in the steps leading up to it. Meanwhile, subsequent activities lack work,
    awaiting input from the bottlenecked step. The key issue is that fixing the bottleneck
    in activity A4 is the primary concern. If another team spends time, money, and
    effort on reducing their cycle time to 30 seconds, it will be for nothing, as
    A4 is still the bottleneck. Even with their change, the other six activities cannot
    support the flow rate of the revised value stream activity.'
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, retrospectives in a Lean-Agile organization must be adapted to include
    a broader VSM perspective. This holistic view fosters a more comprehensive understanding
    of how value is delivered to customers. By integrating VSM thinking into retrospectives,
    teams are empowered to make immediate sprint-level improvements and contribute
    to broader, systemic changes that enhance the overall effectiveness and efficiency
    of the organization’s value delivery.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we explained how reviews and communications operate differently
    in a multi-team environment.
  prefs: []
  type: TYPE_NORMAL
- en: Prioritizing value delivery in BLAST artifacts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'BLAST stands out with its unique focus on delivering tangible value through
    its three signature **artifacts**: **minimum viable product** (**MVP**), as defined
    by Eric Ries, *minimum valuable increment* (*MVI*), and *minimum valuable release*
    (*MVR*). These artifacts are strategic milestones in the development process that
    ensure the delivery of actual value to customers while aligning with broader organizational
    goals. Let’s walk through these concepts one at a time.'
  prefs: []
  type: TYPE_NORMAL
- en: Minimum viable product (MVP)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The MVP in BLAST is a proven method emphasizing collaboration among integrated
    value stream teams to create an early version of a new product or service that
    allows a team to validate a proposed concept or market opportunity. This MVP is
    a minimal and tangible representation of what can be built and delivered over
    time. MVPs use an iterative process, allowing teams to gauge the product’s viability
    and adjust based on fast feedback. In his seminal book *The Lean Startup*, Eric
    Ries describes the MVP as a method to validate whether you have a product that
    customers need and, if so, what features are needed. In his follow-up book *The
    Startup Way*, Ries clarifies that MVPs are about addressing all assumptions. That
    is, MVPs are not just about exploring the product but all the assumptions about
    the whole product, its marketing, delivery, and support.[13](B21818_08.xhtml#endnote-013),
    [14](B21818_08.xhtml#endnote-014)
  prefs: []
  type: TYPE_NORMAL
- en: Minimum valuable increment (MVI)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is about delivering new increments of value within a product’s life cycle,
    from concept to end of life. They often integrate the efforts of multiple value
    stream teams to launch customer-centric products or services. This includes aligning
    strategies, securing funding, determining market demands, designing, developing,
    and testing, as well as deployment, promotion, sales, and support. MVIs ensure
    that each step adds value and aligns with customer needs.
  prefs: []
  type: TYPE_NORMAL
- en: A key principle underpinning both the MVP and MVI is the focus on the rapid
    delivery of high-value features. However, the defining element of MVIs is that
    they represent the minimal value that customers expect to meet their needs, delivered
    in very granular slices. This granularity ensures that each increment is small
    enough to be quickly developed and deployed, allowing for frequent feedback and
    continuous improvement. This concept is consistent with Lean-oriented philosophies,
    which aim to eliminate waste and constraints on activities that customers do not
    value.
  prefs: []
  type: TYPE_NORMAL
- en: MVIs are identified, prioritized, and refined in the business value backlog.
    Participating BLAST teams pull their work from the backlog in order of highest
    priority. Priorities are set based on customers’ needs and to ensure that necessary
    elements to support future value-based deliveries are properly sequenced. Teams
    that pull lower-priority MVIs engage in a form of local optimization, which may
    be due to preferences or skills, and this hinders the organization’s ability to
    efficiently deliver the entire increment of value. On the other hand, we cannot
    expect a marketing team to work on software development tasks. In BLAST, teams
    pull work items from a single Business Value Backlog. But segmentation within
    the backlog is necessary to coordinate disparate pieces of work across value streams
    for each release cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Minimum valuable release (MVR)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While an MVI may offer functionality to customers, there are instances where
    bundling MVIs together may be more advantageous. This bundling could serve multiple
    purposes: to reduce the overall transaction cost of the release, to create a more
    significant functional impact from a marketing perspective, or to make it easier
    for customers to absorb new capabilities without feeling continuously overwhelmed
    by new features and functions.'
  prefs: []
  type: TYPE_NORMAL
- en: When transaction costs, whether to the customer or the releasing company, are
    high, bundling MVIs together may be warranted. Additionally, if a larger impact
    is desired, multiple MVIs may need to be bundled as an integrated solution. Therefore,
    BLAST implements the MVR concept to coordinate the release of new functions, features,
    and processes on a planned cadence. Further details on how this works will be
    explored in the next chapter, [*Chapter 9*](B21818_09.xhtml#_idTextAnchor426),
    *Defining a Business Agility System for the* *Enterprise (BASE)*.
  prefs: []
  type: TYPE_NORMAL
- en: A significant advantage of BLAST, whether you are working on MVPs, MVIs, or
    MVRs, is the alignment it creates, enabling quick feedback cycles at low cost.
    In short, BLAST’s MVPs and MVIs ensure that value delivery remains at the forefront,
    bridging the gap between development ambitions and tangible customer benefits.
  prefs: []
  type: TYPE_NORMAL
- en: 'This concludes our discussion on BLAST’s three artifacts: MVPs, MVIs, and MVRs.
    This also wraps up our look at the foundational concepts and basic elements of
    the BLAST Framework, which, in recap, includes marshaling the work of multiple
    Lean-Agile teams across seventeen steps in four Core Domains of Work, with three
    supporting roles and three delivery artifacts. The artifacts are the deliverables
    produced by the BLAST teams to support the incremental release of value by the
    enterprise to its customers via the BASE Framework, which we will discuss in the
    next chapter, [*Chapter 9*](B21818_09.xhtml#_idTextAnchor426), *Defining a Business
    Agility System for the Enterprise (BASE)*. But we have more to cover in this chapter,
    so let’s continue by discussing the rhythms and cadences needed to support value-based
    deliveries.'
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing Development Cadences and Value Deliveries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cadences in Lean and Agile environments are not new concepts. Agile uses an
    Iterative and Incremental Development (IID) model to establish a rapid development
    and delivery cadence, exemplified by the Sprints in Scrum. In contrast, Lean focuses
    on value stream flows, with a production goal to establish a cadence that matches
    takt time. The German word *takt* means pulse or beat, conceptually aiming to
    align production capacities with customer demands.
  prefs: []
  type: TYPE_NORMAL
- en: This is where we begin to see inconsistencies between Scrum and Lean concepts
    of cadence. For instance, the Scrum Guide suggests a fixed length for Sprints
    of one month or less, emphasizing consistency in whatever length you choose. In
    contrast, Lean flows can vary significantly, being much quicker or longer depending
    on the size and complexity of the development effort. For example, tasks in a
    modern CI/CD line might be measured in seconds, minutes, or hours, while a Lean
    production line building large aircraft or ships might be measured in months to
    years. Moreover, in a Lean environment, takt time dynamically changes based on
    customer demands.
  prefs: []
  type: TYPE_NORMAL
- en: Synchronizing the concepts of cadence in a Lean-Agile environment becomes a
    critical concern, and this section shows you how to address it. As a preliminary
    hint, Lean-Agile organizations establish cadences across planning horizons.
  prefs: []
  type: TYPE_NORMAL
- en: Emphasizing customer centricity in Lean-Agile cadences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Both Scrum and BLAST underscore the paramount importance of the customer. Just
    as Scrum begins with a product backlog, ordered by priority user stories and features,
    BLAST incorporates a Business Value Backlog that emphasizes the customer journey,
    placing customer needs and perceptions at the forefront.
  prefs: []
  type: TYPE_NORMAL
- en: Scrum Guide and SAFe® Distilled
  prefs: []
  type: TYPE_NORMAL
- en: 'The Scrum Guide at [scrumguides.org/scrum-guide.html](http://scrumguides.org/scrum-guide.html)
    offers more information about sprints and their events, so we needn’t repeat them
    here. Additionally, you may find *SAFe Distilled 5.0: Achieving Business Agility
    with the Scaled Agile Framework*, authored by Richard Knaster and Dean Leffingwell,
    an invaluable resource for applying Scrum in a multi-team, scaled environment.
    It also includes a detailed overview of the Scrum events integrated with Lean
    concepts.'
  prefs: []
  type: TYPE_NORMAL
- en: While Scrum operates with distinct Sprint cycles that incorporate feedback through
    demos and retrospectives at the end of each cycle, BLAST takes a more continuous
    approach. Operating as a closed-loop system, BLAST persistently assesses customer
    needs to guide backlog items and priorities iteratively across a product’s economically
    viable lifecycle, ensuring ongoing alignment with value delivery. This mutual
    emphasis underscores the shared belief that understanding customer requirements
    is paramount.
  prefs: []
  type: TYPE_NORMAL
- en: The iterative approach of Agile is reflected in BLAST’s dedication to continuous
    delivery cycles. While BLAST’s Timeboxed Teams operate in Scrum-like sprint cycles,
    there is a key difference. Although Scrum incorporates lean principles to minimize
    waste, it doesn’t fully encompass the Lean concept of flow. In fact, it’s easy
    to argue that Scrum implements a batch process, as the sprint backlog items flow
    in and out as a batch at the beginning and end of each iteration of the Sprint’s
    set cadence.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, lean flow concepts emphasize smooth and continuous value delivery
    with minimal delays or friction. BLAST ensures value is delivered efficiently
    and mitigates common bottlenecks in traditional development. This commitment to
    flow reinforces BLAST’s comprehensive approach to integrating Lean and Agile practices.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will examine more closely how development and production
    cycles, as disparate but equally important cadences, work in a Lean-Agile work
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Embracing Lean flows in modern software development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As noted in the introduction to this subsection, the Scrum Guide specifies that
    a sprint is a fixed-length event of one month or less. [15](B21818_08.xhtml#endnote-015)
    This recommended duration has not changed. What has changed is the speed of software
    development due to integrated toolchains and automation capabilities enabled by
    CI/CD and DevOps pipelines, along with **microservices-based architectures**.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the *Google DORA Accelerate State of DevOps Report 2023* underscores
    a stark divide in deployment capabilities across performance tiers. Elite performers
    in DevOps achieve on demand deployment frequencies, maintain a lead time for changes
    of less than one day have a change failure rate of 5%, and restore service in
    less than one hour. In stark contrast, low performers deploy on weekly to monthly
    intervals, grapple with a daunting 64% failure rate, and face failed deployment
    recovery times that can stretch to an alarming six months. [16](B21818_08.xhtml#endnote-016)
    This gap underscores the differences between top-tier developers, who are well
    versed in the latest software development methods, test automation, and integrated
    toolchains, and their peers in the lower tier, who may not have fully embraced
    these advancements.
  prefs: []
  type: TYPE_NORMAL
- en: While the pace and efficiency of software development have undergone profound
    transformations, it’s pivotal to recalibrate our understanding of the purpose
    of sprints within Agile. As originally conceived, Scrum sprints do not map directly
    to the end-to-end development cycles typical of Lean-oriented product delivery
    flows. Instead, they serve a foundational role by providing a consistent cadence
    for teams to prioritize, plan, execute, and reflect on their work. This rhythm
    ensures that teams can align their efforts with business needs regularly, make
    necessary adjustments based on feedback, and deliver incremental value.
  prefs: []
  type: TYPE_NORMAL
- en: So, while Lean emphasizes efficient flows, notably enhanced through integrated
    systems, tools, and workflow automation, Agile underscores the value of iterative
    and incremental planning and execution cycles. Thus, in the BLAST framework, the
    intrinsic nature of a sprint as a cycle of planning and execution remains unchanged,
    even as the overall delivery speed and flow efficiency improve.
  prefs: []
  type: TYPE_NORMAL
- en: As we’ve explored the evolving dynamics of software development, it’s evident
    that rhythms and flows are central to modern Lean-Agile practices. With this foundation,
    we can now fully explore the importance of embracing these rhythms and cadences
    to harness the power of the Lean-Agile enterprise.
  prefs: []
  type: TYPE_NORMAL
- en: Pursuing a new model for value delivery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Lean-Agile enterprises, value delivery relies on multiple cadences that span
    from overarching strategic work to daily operations. The next subsection dives
    deeper into the planning and execution cycles, highlighting their significance
    in a successful Lean-Agile enterprise.
  prefs: []
  type: TYPE_NORMAL
- en: To fully understand the Lean-Agile approach to product deliveries, we need a
    model that illustrates the progression from an idea’s inception to its actualization
    as a process, product, or service. We will get to that model a bit later in this
    section. Before we get to that, let’s introduce some basic concepts.
  prefs: []
  type: TYPE_NORMAL
- en: An integrated Lean-Agile delivery process is anchored in corporate strategy
    and shaped by market demands and customer insights. Initially, we might be inundated
    with business and product ideas, but many might not see the light of day. Meanwhile,
    modern DevOps pipelines enhance software development and delivery capabilities
    through integrated toolchains and automation. Consequently, the gap between defining
    requirements and delivering on them has only broadened. The good news is that
    the BLAST approach clarifies the mechanisms to achieve an efficient software delivery
    ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Conceptually, we can employ a funnel metaphor to illustrate how the *inception
    phase* for products, services, or business-supporting processes, systems, and
    artifacts might brim with potential avenues to explore. However, factors such
    as time, resources, risks, and market dynamics will whittle down these options.
    Initially, we won’t know what products and services we need to deliver, nor the
    capabilities, features, and functions required. Everything is still fuzzy at this
    stage. Recognizing this uncertainty is essential to ensure a steady, productive
    supply to our DevOps pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: To manage this flow of requirements effectively, we utilize different *planning
    horizons*. These horizons help us structure our approach to requirements assessment
    and refinement. Long-term planning horizons focus on aligning with corporate strategy
    and market demands, establishing high-level goals and objectives. Mid-term planning
    horizons translate these goals into tangible work items, prioritized within backlogs.
    Short-term planning horizons ensure that teams have well-defined, actionable tasks
    ready for development. This structured approach ensures that as ideas move through
    the funnel, they are continuously refined and aligned with strategic objectives,
    enhancing the efficiency of our delivery processes.
  prefs: []
  type: TYPE_NORMAL
- en: However, defining value through a series of planning horizons isn’t exclusive
    to supporting modern software delivery capabilities. Executives are constantly
    bombarded with investment ideas to support the business, but there are usually
    insufficient financial and human resources to pursue every request. Therefore,
    the organization needs a planning process to properly vet, prioritize, and fund
    the initiatives that drive the most value. This section fundamentally focuses
    on defining planning processes to support these vetting and refinement activities.
    Here, you will learn how to implement the multi-faceted rhythms that drive enterprises
    holistically across all domains. In a Lean-Agile context, we refer to these rhythms
    as **cadences**.
  prefs: []
  type: TYPE_NORMAL
- en: 'We noted that business and product requirements are fuzzy in the early stages
    of planning. This issue is so significant that we have a name for it: **the**
    **fuzzy front-end**.'
  prefs: []
  type: TYPE_NORMAL
- en: Taming the fuzzy front-end
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **fuzzy front-end** (**FFE**), a term coined by Smith and Reinertsen in
    their book *Developing Products in Half the Time*, describes the initial, often
    opaque stages of requirements discovery and refinement and how they pose a unique
    challenge in software development.[17](B21818_08.xhtml#endnote-017) This phase
    may have high uncertainty, require continuous exploration, and cannot be easily
    automated. Requirements identification, analysis, and prioritization are just
    as challenging now as in 1998 when Smith and Reinertsen published their book.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll revisit this concept frequently throughout the remainder of this chapter.
    For the moment, let’s turn our attention back to the topic of cadences. We have
    already touched on this briefly, but we will explore how these cadences extend
    across various planning horizons, impacting every facet of business domains.
  prefs: []
  type: TYPE_NORMAL
- en: Mastering Lean-Agile Planning and Delivery Cadences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This subsection explains the strategic importance of planning cadences within
    Lean-Agile enterprises. While iterative planning may seem outdated in today’s
    fast-paced, Lean-Agile environments characterized by continuous flow and rapid
    delivery, these cadences remain vital for organizations seeking to build and maintain
    their competitive edge.
  prefs: []
  type: TYPE_NORMAL
- en: Frequent cadence-based planning ensures that organizations can respond swiftly
    to market demands by consistently replenishing their development pipelines with
    customer-oriented products, service enhancements, and business process and systems
    improvements. Moreover, such planning fosters synchronization across multiple
    teams, promoting alignment and cross-functional coordination, including the management
    of team dependencies and integrations.
  prefs: []
  type: TYPE_NORMAL
- en: As you work your way through this subsection, refer to *Figure 8**.4* for more
    details on the iterative planning increments necessary to support a modern Lean-Agile
    software delivery pipeline employing highly integrated and automated CI/CD and
    DevOps toolchains. These planning processes and horizon concepts apply equally
    to evaluating all business investment opportunities.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Modern software product life cycle model](img/B21818_08_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – Modern software product life cycle model
  prefs: []
  type: TYPE_NORMAL
- en: Streamlining backlog refinement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We previously introduced the *fuzzy front-end* concept as a critical factor
    in successfully conducting product requirements analysis. This inception phase
    represents the initial requirements capture process that resists simplification
    through automation or systems engineering. In software development organizations,
    if not effectively addressed, this phase can lead to a shortage of work in the
    backlog necessary to support highly efficient and accelerated DevOps software
    development pipelines, starving those lines of work.
  prefs: []
  type: TYPE_NORMAL
- en: Organizations start addressing their fuzzy front-ends with *Corporate Strategy*
    and *Portfolio Management* activities to establish high-level goals and objectives.
    However, strategy is not limited to the C-Suite. The function of product management
    is to have a strategy-level responsibility to refine the executive’s product ambitions
    into tangible work items, usually expressed as epics. Their efforts initiate the
    *Backlog* *Refinement* process.
  prefs: []
  type: TYPE_NORMAL
- en: As noted in the *MVI planning (steps 3 and 4)* section, an epic is a large body
    of work that can be broken down into smaller sets of requirements in the form
    of user and technical stories. Epics may span multiple iterations or sprints and
    encompass a significant feature or requirement that delivers substantial business
    value once completed.
  prefs: []
  type: TYPE_NORMAL
- en: Value managers and product owners support the *BLAST increment planning* process
    to ensure the epics are decomposed into stories, refined, and prioritized for
    delivery. They also work with the BLAST teams to plan and provide guidance during
    the integrated increments.
  prefs: []
  type: TYPE_NORMAL
- en: Developers are responsible for assisting in the refinement process and defining
    the tasks necessary to build and deliver the solution components. Intentional
    design and architecture activities must start much earlier during backlog refinement
    and BLAST increment planning phases.
  prefs: []
  type: TYPE_NORMAL
- en: The concept of backlog refinement in BLAST goes beyond Scrum practices as starting
    the process earlier is even more important in a highly efficient Lean-Agile organization.
    Moreover, managing requirements in large enterprises or complex solutions often
    begins far in advance of actual development.
  prefs: []
  type: TYPE_NORMAL
- en: Managing ideas and innovations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the funnel idea previously illustrated in *Figure 8**.4*, we conceptualize
    the refinement process as starting with a broad set of potential value stream
    processes, product ideas, and infrastructure development options, which are then
    iteratively narrowed down through successive planning increments.
  prefs: []
  type: TYPE_NORMAL
- en: However, many ideas in the funnel will be discarded or delayed due to cost and
    priority considerations. This does not necessarily mean they are poor ideas; rather,
    they may not be relevant in the current timeframe. It is useful to envision our
    funnel as having leaks where certain ideas and concepts escape our immediate attention.
    To ensure these ideas are not lost, we can also imagine a drain pan underneath
    the funnel to catch them for reference at a later date.
  prefs: []
  type: TYPE_NORMAL
- en: Managing these innovative ideas for future consideration requires a structured
    approach. This is where the concept of an *InnovationOps database* comes into
    play, serving as the foundation for building and managing a centralized system
    designed to track innovation-related projects, activities, and data within an
    organization. While InnovationOps is a crucial aspect of innovation management,
    a detailed discussion of its implementation is beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Facilitating collaboration and planning during BLAST increments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During the planning and execution phases of the BLAST integrated increments,
    key players such as the **value manager** (**product owner**), **UI/UX developers**,
    and **lead developers** engage in deep collaboration. They address critical tasks
    encompassing usability, design, infrastructure, and architectural considerations.
    This collaboration also extends to defining user stories and acceptance criteria,
    and developing UI prototypes for reviewers to evaluate before development begins.
    This preparatory stage is essential, as these refinements are instrumental in
    establishing a solid foundation for the upcoming team-based planning sessions.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes time for the development teams to take over, their planning events
    are designed to be succinct, typically spanning just a few hours. This streamlined
    planning is only feasible if the preliminary product planning increment work has
    been thorough. With the refinement details already in hand, development teams
    can then concentrate on determining the specific tasks and workload for the upcoming
    BLAST increment, assigning tasks, and clarifying the build requirements and acceptance
    criteria. It’s a straightforward principle: an item from the business value backlog
    that has not been refined cannot be slated for an upcoming BLAST increment’s backlog.'
  prefs: []
  type: TYPE_NORMAL
- en: This systematic approach ensures that our development pipeline is consistently
    fed with well-defined, ready-to-work items, preventing delays in the continuous
    flow of customer value. By refining the backlog ahead of the integrated increments,
    we empower our teams to maintain the momentum for Lean-Agile success, fostering
    a sustainable cycle of delivery that meets and exceeds competitive market demands.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 8**.4*, there was a note that the fuzzy front end is difficult to
    predict, estimate, and automate. Not much has changed since Don Reinertsen coined
    this term in his 1985 article *Blitzkrieg Product Development: Cut Development
    Time in Half*. However, some strides are being made to address these concerns
    by utilizing AI.'
  prefs: []
  type: TYPE_NORMAL
- en: Embracing AI in discovery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The requirements discovery process is evolving with the help of AI and ML. While
    AI-based decision-making introduces uncertainties, leveraging algorithms to analyze
    data and predict outcomes enhances efficiency. Striking a balance between utilizing
    AI’s power and maintaining human oversight is essential.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples of how AI is being used to address the challenges of
    requirements analysis in software development:'
  prefs: []
  type: TYPE_NORMAL
- en: Natural language processing (NLP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated requirements extraction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consistency and conflict-checking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prioritization and impact analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Predictive analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirements validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These AI applications enhance the accuracy, efficiency, and effectiveness of
    requirements analysis in software development. Still, the black-box nature of
    some AI models raises questions about transparency, interpretability, and accountability.
    Organizations must navigate this landscape carefully, embracing AI’s potential
    while mitigating risks. Ultimately, the synergy between human intuition and AI-driven
    insights will shape the future of requirements gathering and innovation.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve covered the planning cadences needed to effectively transform strategies
    and ideas into actionable work items. Now, let’s get a clearer picture of the
    time and effort involved.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring planning horizons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In product development and continuous improvement, organizations consistently
    face the challenge of navigating the ambiguous fuzzy front-end of requirements
    analysis. As ideas emerge and take form, they naturally evolve from abstract concepts
    to concrete plans. Without a structured approach, this transition can become chaotic,
    leading to misaligned efforts and missed opportunities.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It’s essential to add an Agile perspective to planning horizons. For mature
    processes, systems, products, and services, new customer and business requirements
    can quickly emerge with high priority. If these changes fit within the approved
    strategy and portfolio investments, the product management function can expedite
    them by assigning high priority to the business value backlog.
  prefs: []
  type: TYPE_NORMAL
- en: To address this challenge, it is essential to adopt a planning methodology that
    leverages planning cadences, as shown in *Figure 8**.5*. This approach not only
    streamlines the development process but also guarantees that value stream improvement
    initiatives stay attuned to what truly matters for end users, and teams are building
    the right thing at the right time.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5 – Enterprise planning horizons](img/B21818_08_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – Enterprise planning horizons
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8**.5* presents an expanded, timeboxed view that builds on the funnel
    idea introduced in *Figure 8**.4*. This diagram illustrates a clear sequence of
    planning that enhances the organization’s ability to deliver products and services.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With that concern addressed, let’s examine the planning horizons depicted in
    *Figure 8**.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Product Roadmap and Portfolio Investments****(longer term, 1-3+ years ahead)**:
    Executives maintain the product roadmap, outlining future investments (products
    and services) vital for achieving the organization’s strategic goals. Simultaneously,
    portfolio management determines the investments needed to support those offerings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Business Value Assessments (mid-term planning within the current fiscal year)**:
    Converting strategy into actionable plans, product and marketing managers undertake
    research and collaborate with industry experts, clients, and development teams.
    Their goal is to identify, define, and prioritize products and services for the
    business value backlog.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Business and technical architects support this phase by providing preliminary
    assessments of process, system, infrastructure, and architecture needs.
  prefs: []
  type: TYPE_NORMAL
- en: '**Increment Plan (short-term planning, 8-12 weeks ahead)**: Entering a tactical
    implementation phase, the value manager (product owner), with input from design
    and development teams, refines the work items in the backlog in collaboration
    with stakeholders and clients.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Team plans (1-4 weeks out)**: As the requirements become refined and prioritized
    in the backlog, the development teams need time to assess the requirements and
    define the tasks to build the work items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Daily plans**: Schedule frequent meetings, as needed, during BLAST solution
    construction periods to check progress against goals and address any challenges
    hindering progress. Timebox these meetings to no more than 15 minutes and avoid
    turning them into working sessions. Hold working sessions separately.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking back at *Figure 8**.5*, we can see the interconnected nature of these
    cadences. Each has a vital role in the development of products and services.
  prefs: []
  type: TYPE_NORMAL
- en: The following subsection discusses integrated increments and their importance
    in synchronizing multiple Lean-Agile teams and multiple BLASTs operating across
    varied business domains. These concepts are key to understand before we delve
    into the next chapter, [*Chapter 9*](B21818_09.xhtml#_idTextAnchor426), *Defining
    a Business Agility System for the* *Enterprise (BASE)*.
  prefs: []
  type: TYPE_NORMAL
- en: Facilitating collaboration at scale – the team-of-teams approach
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Lean-Agile enterprises, the sheer scale and complexity of business operations
    can present challenges in ensuring seamless collaboration and alignment across
    teams. The concept of a team of teams seeks to address this by creating a structured
    ToT collaboration mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the heart of this approach are representatives from individual teams. Previously,
    we mentioned several scaled Scrum methods that implement similar roles, such as
    the Ambassador in Scrum of Scrums™ and NITs in the Nexus™ framework. Regardless
    of what you choose to call them, these representatives come together at periodic
    intervals, linking disparate teams and forming a collaborative entity that ensures
    enterprise-wide collaboration. This ToT communications structure facilitates the
    management of dependencies, seamless integrations, and maintains synchronization
    across all teams involved. The benefits of this structure include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Addressing dependencies**: As teams work on interrelated tasks, issues related
    to dependencies, integration, and synchronization inevitably arise. Representatives
    in the team-of-teams structure ensure these issues are identified early and managed
    effectively, preventing bottlenecks and ensuring smooth delivery.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ensuring ToTs integration**: Integration points are critical in large-scale
    projects. BLAST’s ToT planning and review sessions should be scheduled with qualified
    representatives from each team to resolve business and technical integration issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Aligning/coordinating efforts**: Coordination becomes vital when multiple
    teams work toward common goals. The team-of-teams approach ensures a synchronized
    effort, with teams aware of each other’s progress, challenges, and upcoming milestones.
    Coordination tends to be expensive and error-prone. The BLAST framework implements
    a shared business value backlog to improve the alignment of work and work item
    prioritization across the BLAST.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shared learning and best practices**: Representatives can share learnings,
    challenges faced, and best practices adopted by their teams. This collective wisdom
    improves efficiency and fosters a culture of continuous improvement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Risk mitigation**: Discussing challenges and potential risks at the team-of-teams
    level can address issues proactively, ensuring that individual teams don’t face
    unexpected roadblocks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Frequent communication**: Regular and clear communication among team members
    and stakeholders is vital for aligning goals, sharing progress, and addressing
    any concerns promptly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous improvement**: Teams should regularly review their processes and
    outcomes to identify opportunities for improvement and implement necessary changes
    for better efficiency and effectiveness.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BLAST does not define a precise role or set of responsibilities for these representatives.
    This is because the number and skills of representatives will constantly change
    in a Lean-Agile organization depending upon the domains and skills involved and
    the business context of the discussions.
  prefs: []
  type: TYPE_NORMAL
- en: To clarify their role, you may choose to call these BLAST representatives *BLAST
    coordinators*, or simply *coordinators*; their collaborative working sessions
    *BLAST meets*; and their socialization networks *BLAST hubs*. However, the choice
    is yours. Feel free to refer to the representatives and their meetings as you
    prefer. In short, BLAST implements *coordinators*, *meets*, and *hubs*.
  prefs: []
  type: TYPE_NORMAL
- en: In the next subsection, we’ll take a closer look at several common types of
    issues addressed by the BLAST coordinators.
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring Seamless Project Delivery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this chapter, and later chapters, we frequently mention that teams and individuals
    working in a team-of-teams environment must address dependencies, integration,
    and synchronization issues that arise from managing work across across-team tasks.
    Let’s take a moment to define how these issues manifest in a BLAST or multi-BLAST
    work environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cross-team tasks**: Tasks that are connected or dependent on each other in
    some way'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dependencies**: Situations where one task relies on the completion of another
    task'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration issues**: Challenges that arise when combining different components
    or systems to work together'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Synchronization issues**: Problems that occur when coordinating the timing
    and sequencing of tasks to ensure they work together seamlessly'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By focusing on these critical areas, BLAST teams can enhance their collaboration,
    minimize obstacles, and drive successful project outcomes, ultimately achieving
    their strategic goals. The BLAST coordinator approach acts as a bridge, ensuring
    that while individual teams retain their autonomy and focus, a higher-level collaboration
    mechanism keeps the entire enterprise aligned, integrated, and moving forward
    cohesively.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll discuss BLAST roles in an upcoming section. But first, we need to understand
    the concept of increments in BLAST and how they support the life cycles of a process,
    business system, product, or service.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding increments in life cycle management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *Figure 8**.1*, the term *increments*, and more precisely *increment planning*,
    stands out as a cornerstone of product life cycle management. Typically spanning
    8-12 weeks, this period involves the value manager (or product owner) actively
    collaborating with stakeholders to refine requirements for near-term enhancements
    across the business’s processes, systems, products, and services.
  prefs: []
  type: TYPE_NORMAL
- en: However, the value manager’s role goes beyond merely ensuring the delivery of
    what customers desire. They also evaluate value through a Lean lens, aiming to
    eliminate waste, remove constraints, and enhance flow.
  prefs: []
  type: TYPE_NORMAL
- en: As we’ll learn in the next section, a product owner’s role is not just about
    embedding desired features; delivering them swiftly and cost-effectively is equally
    critical. This requires improvements to the organization’s value streams. In this
    context, we prefer to think of the role as a *value delivery manager* or *value
    manager*, rather than just a product owner.
  prefs: []
  type: TYPE_NORMAL
- en: The significance of increments in the Lean approach extends beyond product development-oriented
    value streams. The release of new business and customer value often necessitates
    the orchestration of efforts across multiple domains and value streams, underscoring
    the comprehensive nature of this concept.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes our discussion on the implementation of Lean-Agile cadences.
    Now we move on to a discussion on Lean-Agile management practices.
  prefs: []
  type: TYPE_NORMAL
- en: Embracing Lean-Agile management practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Management, often misunderstood in Agile contexts, holds a multi-faceted role
    in Lean-Agile work environments, which includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Improving work environments**: Creating a conducive environment for teams
    to flourish'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource allocation**: Ensuring teams have the necessary people, resources,
    and information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**People development**: Offering career guidance and self-improvement'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collaboration**: Coordinating with peers to ensure cross-functional efficiency'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fiduciary responsibility to shareholders**: Management also has a fiduciary
    duty to act in the best interests of the company’s shareholders, ensuring that
    decisions and actions align with long-term value creation and sustainable growth'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A primary perspective for management in Lean-Agile work environments is recognizing
    the knowledge and expertise of team members actively involved in tasks. Trusting
    your teams and individuals is crucial, but it should be balanced with oversight
    to prevent potential issues.
  prefs: []
  type: TYPE_NORMAL
- en: Championing Lean-Agile management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: W. Edwards Deming aptly said, “*A system must be managed. It will not manage
    itself*.” In an organization, management is the backbone, bridging the strategic
    vision with the hands-on execution at the Gemba or workplace. They play a central
    role in aligning organizational goals with actual execution, a concept termed
    middle-up-down management.
  prefs: []
  type: TYPE_NORMAL
- en: Often perceived as obstacles in Lean-Agile transitions, middle managers can
    be catalysts for positive change. Their position uniquely positions them to translate
    overarching strategies into actionable activities, making them vital in transformations
    and the continuous success of Lean-Agile methods. They communicate strategic visions
    while also integrating insights from frontline operations.
  prefs: []
  type: TYPE_NORMAL
- en: In BLAST’s transformation model, middle management doesn’t just oversee the
    change but actively participates in it, becoming pioneers of the evolving leadership
    dynamics.
  prefs: []
  type: TYPE_NORMAL
- en: All managers must embrace and champion Lean-Agile practices. Management must
    take time to understand the issues workers face and ensure a respectful approach
    focusing on inclusivity and cooperation.
  prefs: []
  type: TYPE_NORMAL
- en: Harnessing middle management for organizational agility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Scrum, first introduced in 1993 by Jeff Sutherland, John Scumniotales, and Jeff
    McKenna at **Easel Corporation**, was inspired by the HBR article *The New New
    Product Development Game* (1986) by Takeuchi and Nonaka, which drew parallels
    between new development strategies and a game of rugby.[18](B21818_08.xhtml#endnote-018)
  prefs: []
  type: TYPE_NORMAL
- en: 'The foundational principles of *Middle-Up-Down Management* were detailed in
    Nonaka’s 1988 work *Toward Middle-Up-Down Management: Accelerating Information
    Creation*. [19](B21818_08.xhtml#endnote-019) This management approach merges the
    systematic processing of information—a characteristic of established organizations—with
    the dynamic information creation typical in Agile entities. Central to this is
    middle management’s role in guiding organizational transformations aligned with
    business objectives.'
  prefs: []
  type: TYPE_NORMAL
- en: Distinctly, the Lean-Agile aspects of BLAST acknowledge and embrace this core
    aspect of Lean management. In the Lean philosophy, management is viewed as a vital,
    positive force, not a blocker of progress. This concludes the section on embracing
    Lean-Agile management practices. Before we end the chapter, let’s understand the
    history of BLAST.
  prefs: []
  type: TYPE_NORMAL
- en: Tracing BLAST’s history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: BLAST was conceptualized in 2008 during an engagement by Al Shalloway with a
    client that was using Scrum effectively but couldn’t deliver quickly. Although
    the teams were working on the same product, they operated independently and only
    attempted integration every two weeks. This led to long final integration times.
  prefs: []
  type: TYPE_NORMAL
- en: By viewing the work as a single value stream instead of separate Agile-based
    teams, it was quickly determined that a common backlog would create alignment
    and facilitate full integration after each sprint. The BLAST approach eliminated
    the need for extensive coordination, expedited integrations, and provided quick
    feedback across the teams.
  prefs: []
  type: TYPE_NORMAL
- en: This real-world example demonstrates how BLAST can transform team operations
    and significantly enhance efficiency and delivery speed. Today, this approach
    also better accommodates the highly accelerated software deliveries enabled via
    CI/CD and DevOps toolchains.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note:'
  prefs: []
  type: TYPE_NORMAL
- en: The terms BLAST and BASE were coined by authors Al Shalloway and Gary Rupp in
    joint working sessions in May 2022.
  prefs: []
  type: TYPE_NORMAL
- en: This brings us to the end of this chapter. But before we move on, let’s summarize
    what you have learned.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter presented BLAST as a framework and guide to integrating the efficiency
    of Lean with the adaptability of Agile. Recognizing the imperative of evolving
    business needs, we discussed how BLAST enhances Agile methodologies, providing
    an actionable approach from concept to realization. We reviewed the intricacies
    of harnessing BLAST and its differences from and similarities with Scrum models,
    as well as gaining an understanding of its roles and artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding and implementing BLAST is critical for organizations aiming to
    stay competitive. It ensures timely value delivery at minimized costs.
  prefs: []
  type: TYPE_NORMAL
- en: Looking ahead, in [*Chapter 9*](B21818_09.xhtml#_idTextAnchor426), *Defining
    a Business Agility System for the Enterprise (BASE)*, we’ll transition into the
    product life cycle in Lean-Agile practices. The focus will be on the development
    of MVPs, MVIs, and MVRs. The BASE framework defines a systematic cycle of events,
    ensuring iterative and incremental value delivery through continuous process improvements
    and product enhancements. You will also learn how BASE facilitates cross-value
    stream teamwork.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section is offered for those of you who want to evaluate your comprehension
    and retention of the information provided in this chapter. There are 10 questions.
    The answers are provided in the subsequent section. Recalling the exact verbiage
    of the original content is not essential. Instead, it’s more important to recall
    the concepts and their applications.
  prefs: []
  type: TYPE_NORMAL
- en: What are the three aspects of Lean management?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the management concepts typified in Agile-based practices?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What two steps define the customer-centric foundations of the BLAST framework?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the three steps within the BLAST framework that define the planning,
    refinement, and commitment activities?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What three BLAST concepts include the six steps for Lean-Agile workflow integrations
    within the BLAST framework?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What three BLAST concepts encompass six steps for evaluating and enhancing product
    deliverables?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the fuzzy front-end, and why should you care about it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the three primary roles defined in the BLAST framework?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the three artifacts in the BLAST framework?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: the BLAST framework has 17 events.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The three aspects of Lean management are traditional hierarchies may remain,
    leading by example, and focused decision-making.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The management concepts typified in Agile-based practices include flatter structures,
    distributed decision-making, servant leadership, and continuous feedback loops.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The steps defining the customer-centric foundations of the BLAST framework are
    customer centricity (step 1) and business value backlog (step 2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The BLAST framework steps that define planning, refinement, and commitment activities
    are MVR refinement (step 3), BLAST planning (step 4), and commitment backlog (step
    5).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The BLAST framework concepts for Lean-Agile workflow integrations are flow teams
    and timeboxed teams (steps 6 and 7), daily reviews and review and refinement of
    workflow tracks (steps 9 and 10), and BLAST integrations (steps 10 and 11).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The three BLAST framework concept steps for evaluating and enhancing product
    deliverables are integrated increments and integrated increment reviews (steps
    12 and 13), feedback and pivot (step 14), and BLAST improvements to CX (steps
    15 to 17).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The fuzzy front-end is important for the following reasons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Popularized by Preston Smith and Donald Reinertsen in 1991, the fuzzy front-end
    refers to a period of ambiguity when determining what needs to be built. Besides
    requiring more time than we might like, as ideas emerge and take form, there’s
    a natural evolution from abstract concepts to concrete plans. Without a structured
    approach, this transition can become chaotic, leading to misaligned efforts and
    missed opportunities.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The three BLAST framework roles are value manager, developer, and coach.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The three BLAST framework artifacts are **minimum viable product** (**MVP**),
    **minimum valuable increment** (**MVI**), and **minimum valuable** **release**
    (**MVR**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False. However, this is a bit of a trick question. BLAST does not include the
    concept of events. Instead, BLAST has 17 steps. Unlike Scrum, which uses the term
    events, BLAST uses the term steps to imply action and progress.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1Knaster, R., & Leffingwell, D. (2020). SAFe Distilled 5.0: Achieving Business
    Agility with the Scaled Agile Framework. Addison-Wesley Professional.](B21818_08.xhtml#endnote-001-backlink)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[2Reinertsen, Donald G. The Principles of Product Development Flow: Second
    Generation Lean Product Development. Celeritas Publishing, 2009.](B21818_08.xhtml#endnote-002-backlink)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[3Reinertsen, Donald G. The Principles of Product Development Flow: Second
    Generation Lean Product Development. Celeritas Publishing, 2009.](B21818_08.xhtml#endnote-003-backlink)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[4https://scaledagileframework.com/decentralize-decision-making/. April 2024.](B21818_08.xhtml#endnote-004-backlink).
    April 2024.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[5 SAFe® and Scaled Agile Framework are registered trademarks of Scaled Agile,
    Inc.](B21818_08.xhtml#endnote-005-backlink)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[6https://scaledagileframework.com/decentralize-decision-making/. April 2024.](B21818_08.xhtml#endnote-006-backlink).
    April 2024.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[7SAFe® and Scaled Agile Framework are registered trademarks of Scaled Agile,
    Inc.](B21818_08.xhtml#endnote-007-backlink)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[8Shewhart, W. A. (1931). Economic Control of Quality of Manufactured Product.
    New York: D. Van Nostrand Company.](B21818_08.xhtml#endnote-008-backlink)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[9Deming, W. E. (1986). Out of the Crisis. Cambridge, MA: MIT Press](B21818_08.xhtml#endnote-009-backlink)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[10Liker, J. K., & Morgan, J. M. (2006). The Toyota Way in Services: The Case
    of Lean Product Development. The Academy of Management Perspectives, 20(2), 5–20](B21818_08.xhtml#endnote-010-backlink)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[11Liker, Jeffrey K. (2004). The Toyota Way: 14 Management Principles from
    the World’s Greatest Manufacturer. New York: McGraw-Hill](B21818_08.xhtml#endnote-011-backlink)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[12Toyota Production Systems: The ‘Toyota Way’ and Labour–Management Relations.
    (2006)](B21818_08.xhtml#endnote-012-backlink)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[13Ries, E. (2009, September 8). Minimum Viable Product: A guide. Startuplessonslearned.com.
    Retrieved October 31, 2023, from https://www.startuplessonslearned.com/2009/08/
    minimum-viable-product-guide.html](B21818_08.xhtml#endnote-013-backlink)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[14Ries, E. (2010). The Lean Startup: How Today’s Entrepreneurs Use Continuous
    Innovation to Create Radically Successful Businesses (1st ed.). Crown Business,
    an Imprint of Crown Publishing Group, a Division of Rando House, Inc, NY.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note: If you like to learn more about Scrum and Lean thinking, you can find
    links to Cecil Rupp’s books in the following end notes. Additionally, Al Shalloway’s
    books on AMPLIO available online provide extensive details about BLAST at](B21818_08.xhtml#endnote-014-backlink)
    [https://successengineering.works/books/.](https://successengineering.works/books/).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[15Schwaber, K., & Sutherland, J. (n.d.). The 2020 Scrum Guide (TM). SCRUM
    GUIDES. Retrieved October 10, 2023, from https://www.scrum.org/resources/scrum-guide.](B21818_08.xhtml#endnote-015-backlink).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[16DevOps Research and Assessment (DORA). (2023). Accelerate State of DevOps
    Report. Google Cloud. Retrieved from https://cloud.google.com/devops/state-of-devops](B21818_08.xhtml#endnote-016-backlink)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[17P. Smith and D. Reinertsen, Developing Products in Half the Time, New York,
    NY: John Wiley & Sons, 1998.](B21818_08.xhtml#endnote-017-backlink)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[18Takeuchi, H., & Nonaka, I. (1986). The New New Product Development Game.
    Harvard Business Review, 64(1), 1–10.](B21818_08.xhtml#endnote-018-backlink)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[19Nonaka, I. (1988). Toward Middle-Up-Down Management: Accelerating Information
    Creation. Sloan Management Review, 29(3), 9-18.](B21818_08.xhtml#endnote-019-backlink)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
