["```\n    import boto3\n    ec2_client = boto3.client('ec2')\n    response = ec2.describe_instances(Filters=[{'Name': 'instance-state-name', 'Values': ['running']}])\n    aws_instances = response['Reservations']\n    ```", "```\n    from google.cloud import compute_v1\n    instance_client = compute_v1.InstancesClient()\n    request = compute_v1.AggregatedListInstancesRequest()\n    request.project = \"ID of GCP project that you are using\"\n    gcp_instances= instance_client.aggregated_list(request=request, filter=\"status:RUNNING\")\n    ```", "```\n    command = \"sudo reboot\"\n    #for AWS\n    ssm.send_command(InstanceIds=aws_instances, DocumentName=\"<Whatever you want to name it>\",\n        Comment='Run a command on an EC2 instance',\n        Parameters={\n            'commands': [command]\n        }\n    )\n    #for Google Cloud\n    import os\n    import subprocess\n    from google.oauth2 import service_account\n    from googleapiclient import discovery\n    # Load the service account credentials\n    service_account_file = '<file_name_here>.json'\n    credentials = service_account.Credentials.from_service_account_file(\n        service_account_file, scopes=['https://www.googleapis.com/auth/cloud-platform']\n    )\n    # Create a Compute Engine API client\n    compute = discovery.build('compute', 'v1', credentials=credentials)\n    # Get the public IP address of the VM instance\n    request = compute.instances().get(project=\"<your_project>\",instance=\"your_instance_name\")\n    response = request.execute()\n    public_ip = response['networkInterfaces'][0]['accessConfigs'][0]['natIP']\n    # SSH into the VM instance and run the command\n    ssh_command = f'gcloud compute ssh {instance_name} --zone {zone} --command \"{command}\"'\n    try:\n        subprocess.run(ssh_command, shell=True, check=True)\n    except subprocess.CalledProcessError:\n        print(\"Error executing SSH command.\")\n    ```", "```\nimport subprocessupdate_command = \"sudo apt update && sudo apt upgrade -y\"subprocess.run(update_command, shell=True)\n```", "```\nimport subprocessimport platformdef update_os():    system = platform.system().lower()    if system == 'linux' or system == 'linux2':        if 'debian' in platform.linux_distribution()[0].lower() or 'ubuntu' in platform.linux_distribution()[0].lower():            update_command = \"sudo apt update && sudo apt upgrade -y\"        else:            update_command = \"sudo dnf update -y\" \tsubprocess.run(update_command, shell=True)    elif system == 'windows':        update_command = 'powershell -Command \"Start-Service -Name wuauserv; Get-WindowsUpdate; Install-WindowsUpdate;\"'        subprocess.run(update_command, shell=True)if __name__ == \"__main__\":    update_os()\n```", "```\n    import docker\n    client = docker.from_env()\n    container = client.containers.run('ubuntu:latest', detach=True, command='/bin/bash')\n    container_id = container.id\n    print(\"Container ID:\" + container_id)\n    ```", "```\n    #you can put in any command you want as long as it works\n    new_command = \"ls\"\n    new_image = client.containers.get(container_id).commit()\n    new_image_tag = \"<whatever_you_want>:latest\"\n    new_container = client.containers.run(new_image_tag, detach=True, command=new_command)\n    ```", "```\n    image = client.images.get(\"<whatever_you_want>:latest\")\n    image.save(\"<insert_file_path_here>\")\n    ```", "```\n    import docker\n    #Step 1: Intialize and run a container\n    client = docker.from_env()\n    container = client.containers.run('ubuntu:latest', detach=True, command='/bin/bash')\n    container_id = container.id\n    print(\"Container ID:\" + container_id)\n    #Step 2: Add a layer\n    #you can put in any command you want as long as it works\n    new_command = \"ls\"\n    new_image = client.containers.get(container_id).commit()\n    new_image_tag = \"<whatever_you_want>:latest\"\n    new_container = client.containers.run(new_image_tag, detach=True, command=new_command)\n    #Step 3: Export layered container as an image\n    image = client.images.get(\"<whatever_you_want>:latest\")\n    image.save(\"<insert_file_path_here>\")\n    ```", "```\nfrom google.cloud import container_v1# Specify your project ID and cluster detailsproject_id = \"<YOUR_PROJECT_ID>\"zone = \"<PREFERRED_ZONE>\"cluster_name = \"<YOUR_CLUSTER>\"node_pool_name = 'default-pool'node_count = 1     client = container_v1.ClusterManagerClient()    # Create a GKE cluster    cluster = container_v1.Cluster(        name=cluster_name,        initial_node_count=node_count,        node_config=container_v1.NodeConfig(            machine_type='n1-standard-2',        ),    )    operation = client.create_cluster(project_id, zone, cluster)\n```", "```\nfrom azure.mgmt.containerservice.models import ManagedCluster, ManagedClusterAgentPoolProfileresource_group = '<RESOURCE_GROUP_HERE>'cluster_name = '<CLUSTER_NAME_HERE>'location = '<LOCATION_HERE>' agent_pool_profile = ManagedClusterAgentPoolProfile(    name='agentpool',    count=3,    vm_size='Standard_DS2_v2',) aks_cluster = ManagedCluster(location=location, kubernetes_version='1.21.0', agent_pool_profiles = [agent_pool_profile])aks_client.managed_clusters.begin_create_or_update(resource_group, cluster_name, aks_cluster).result()\n```", "```\n    import boto3\n    ec2 = boto3.client('ec2')\n    def lambda_handler(event, context):\n        instance_size = event['instance_size']\n        response = ec2.run_instances(\n            ImageId='<INSERT_AMI_HERE>',\n            InstanceType=instance_size,\n            MinCount=1,\n            MaxCount=1,\n            SecurityGroupIds=['<INSERT_SECURITY_GROUP_HERE'],\n            SubnetId='<INSERT_SUBNET_HERE>'\n        )\n        return response\n    ```", "```\n    function submitForm(e) {\n    var responses = e.values;\n    var size = responses[0];\n    var apiUrl = '<YOUR_LAMBDA_URL>';\n    var requestData = {\n    'instance_size': size,\n    };\n    var requestBody = JSON.stringify(requestData);\n    var options = {\n    'method': 'get',\n    'contentType': 'application/json',\n    'payload': requestBody,\n    };\n    var response = UrlFetchApp.fetch(apiUrl, options);\n    }\n    ```"]