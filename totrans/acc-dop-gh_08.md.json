["```\n# A comment in YAML\n```", "```\nkey: value\n```", "```\ninteger: 42\n```", "```\nfloat: 42.0\n```", "```\nstring: a text value\n```", "```\nboolean: true\n```", "```\nnull value: null\n```", "```\ndatetime: 1999-12-31T23:59:43.1Z\n```", "```\n'single quotes': 'have ''one quote'' as the escape pattern'\n```", "```\n\"double quotes\": \"have the \\\"backslash \\\" escape pattern\"\n```", "```\nliteral_block: |\n```", "```\n    Text blocks use 4 spaces as indentation. The entire\n```", "```\n    block is assigned to the key 'literal_block' and keeps\n```", "```\n    line breaks and empty lines.\n```", "```\n    The block continuous until the next element.\n```", "```\nnested_type:\n```", "```\n  key1: value1\n```", "```\n  key2: value2\n```", "```\n  another_nested_type:\n```", "```\n    key1: value1\n```", "```\nsequence:\n```", "```\n  - item1\n```", "```\n  - item2\n```", "```\nmap: {key: value}\n```", "```\nsequence: [item1, item2, item3]\n```", "```\nname: My first workflow\n```", "```\non: push\n```", "```\non: [push, pull_request]\n```", "```\non:\n```", "```\n  push:\n```", "```\n    branches:\n```", "```\n      - main\n```", "```\n      - release/**\n```", "```\n  pull_request:\n```", "```\n    types: [opened, assigned]\n```", "```\non:\n```", "```\n  schedule:\n```", "```\n    # Runs at every 15th minute of every day\n```", "```\n    - cron:  '*/15 * * * *'\n```", "```\n    # Runs every hour from 9am to 5pm\n```", "```\n    - cron:  '0 9-17 * * *'\n```", "```\n    # Runs every Friday at midnight\n```", "```\n    - cron:  '0 0 * * FRI'\n```", "```\n    # Runs every quarter (00:00 on day 1 every 3rd month)\n```", "```\n    - cron:  '0 0 1 */3 *'\n```", "```\non: workflow_dispatch\n```", "```\non:\n```", "```\n  workflow_dispatch:\n```", "```\n    inputs:\n```", "```\n      homedrive:\n```", "```\n        description: 'The home drive on the machine'\n```", "```\n        required: true\n```", "```\n        default: '/home'\n```", "```\non:\n```", "```\n  repository_dispatch:\n```", "```\n    types: [event1, event2]\n```", "```\ncurl \\\n```", "```\n  -X POST \\\n```", "```\n  -H \"Accept: application/vnd.github.v3+json\" \\\n```", "```\n  https://api.github.com/repos/<owner>/<repo>/dispatches \\\n```", "```\n  -d '{\"event_type\":\"event1\"}'\n```", "```\nawait octokit.request('POST /repos/{owner}/{repo}/dispatches', {\n```", "```\n  owner: '<owner>',\n```", "```\n  repo: '<repo>',\n```", "```\n  event_type: 'event1'\n```", "```\n})\n```", "```\njobs:\n```", "```\n  job_1:\n```", "```\n    name: My first job\n```", "```\n  job_2:\n```", "```\n    name: My second job\n```", "```\n    needs: job_1\n```", "```\n  job_3:\n```", "```\n    name: My third job\n```", "```\n    needs: [job_1, job_2]\n```", "```\njobs:\n```", "```\n  job_1:\n```", "```\n    name: My first job\n```", "```\n    runs-on: ubuntu-latest\n```", "```\nstrategy:\n```", "```\n  matrix:\n```", "```\n    os_version: [macos-latest, ubuntu-latest]\n```", "```\n    node_version: [10, 12, 14]\n```", "```\njobs:\n```", "```\n  job_1:\n```", "```\n    name: My first job\n```", "```\n    runs-on: ${{ matrix.os_version }}\n```", "```\n    steps:\n```", "```\n      - uses: actions/setup-node@v2\n```", "```\n        with:\n```", "```\n          node-version: ${{ matrix.node_version }}\n```", "```\nsteps:\n```", "```\n  - name: Install Dependencies\n```", "```\n    run: npm install\n```", "```\n- name: Clean install dependencies and build\n```", "```\n  run: |\n```", "```\n    npm ci\n```", "```\n    npm run build\n```", "```\n  working-directory: ./temp\n```", "```\n  shell: bash\n```", "```\nrun: print %ENV\n```", "```\nshell: perl {0}\n```", "```\n{owner}/{repo}@{ref}\n```", "```\n# Reference a version using a label\n```", "```\n- uses: actions/checkout@v2\n```", "```\n- uses: actions/checkout@v2.2.0\n```", "```\n# Reference the current head of a branch\n```", "```\n- uses: actions/checkout@main\n```", "```\n# Reference a specific commit\n```", "```\n- uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953 675\n```", "```\nuses: ./.github/actions/my-action\n```", "```\nuses: docker://alpine:3.8\n```", "```\n${{ <expression> }}\n```", "```\ncontext['key']\n```", "```\ncontext.key\n```", "```\njobs:\n```", "```\n  deploy:\n```", "```\n    if: ${{ github.ref == 'refs/heads/main' }}\n```", "```\n    runs-on: ubuntu-latest\n```", "```\n    steps:\n```", "```\n      - run: echo \"Deploying branch $GITHUB_REF\"\n```", "```\ncontains('Hello world!', 'world')\n```", "```\n# returns true\n```", "```\nsteps:\n```", "```\n  ...\n```", "```\n  - name: The job has succeeded\n```", "```\n    if: ${{ success() }}\n```", "```\n- name: Set time\n```", "```\n  run: |\n```", "```\n    time=$(date)\n```", "```\n    echo '::set-output name=MY_TIME::$time'\n```", "```\n  id: time-gen\n```", "```\n- name: Output time\n```", "```\n  run: echo \"It is ${{ steps.time-gen.outputs.MY_TIME }}\"\n```", "```\n::error file={name},line={line},col={col}::{message}\n```", "```\n$ gh secret set secret-name\n```", "```\n$ gh secret set secret-name < secret.txt\n$ gh secret set secret-name --body secret\n```", "```\n$ gh secret set secret-name --env environment-name\n$ gh secret set secret-name --org org -v private\n$ gh secret set secret-name --org org -v selected -r repo\n```", "```\nsteps:\n```", "```\n  - name: Set secret as input\n```", "```\n    shell: bash\n```", "```\n    with:\n```", "```\n      MY_SECRET: ${{ secrets.secret-name }}\n```", "```\n    run: |\n```", "```\n      dosomething \"$MY_SECRET \"\n```", "```\n  - name: Set secret as environment variable\n```", "```\n    shell: cmd\n```", "```\n    env:\n```", "```\n      MY_SECRET: ${{ secrets.secret-name }}\n```", "```\n    run: |\n```", "```\n      dosomething.exe \"%MY_SECRET%\"\n```", "```\non: pull_request_target\n```", "```\npermissions:\n```", "```\n  contents: read\n```", "```\n  pull-requests: write\n```", "```\njobs:\n```", "```\n  triage:\n```", "```\n    runs-on: ubuntu-latest\n```", "```\n    steps:\n```", "```\n      - uses: actions/labeler@v2\n```", "```\n        with:\n```", "```\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n```", "```\n    $ cd hello-world-docker-action\n    ```", "```\n    # Container image that runs your code\n    FROM alpine:3.10\n    # Copies your code file from your action repository to the filesystem path '/' of the container\n    COPY entrypoint.sh /entrypoint.sh\n    # Code file to execute when the docker container starts up ('entrypoint.sh')\n    ENTRYPOINT [\"/entrypoint.sh\"]\n    ```", "```\n    # action.yml\n    name: 'Hello World'\n    description: 'Greet someone and record the time'\n    inputs:\n      who-to-greet:  # id of input\n        description: 'Who to greet'\n        required: true\n        default: 'World'\n    outputs:\n      time: # id of output\n        description: 'The time we greeted you'\n    runs:\n      using: 'docker'\n      image: 'Dockerfile'\n      args:\n        - ${{ inputs.who-to-greet }}\n    ```", "```\n    #!/bin/sh -l\n    echo \"Hello $1\"\n    time=$(date)\n    echo \"::set-output name=time::$time\"\n    ```", "```\n    $ chmod +x entrypoint.sh\n    $ git add .\n    $ git commit -m \"My first action is ready\"\n    ```", "```\n$ git add .\n$ git update-index --chmod=+x .\\entrypoint.sh\n$ git commit -m \"My first action is ready\"\n```", "```\n    $ git tag -a -m \"My first action release\" v1\n    $ git push --follow-tags\n    ```", "```\n    hello_world_job:\n      runs-on: ubuntu-latest\n      name: A job to say hello\n      steps:\n      - name: Hello world action step\n        id: hello\n        uses: your-username/hello-world-action@v1\n        with:\n          who-to-greet: 'your-name'\n      - name: Get the output time\n        run: echo \"The time was ${{ steps.hello.outputs.time }}\"\n    ```", "```\nbranding:\n```", "```\n  icon: 'award'  \n```", "```\n  color: 'green'\n```"]