["```\npipeline {\n  agent any\n  environment {\n    AWS_ACCESS_KEY_ID = credentials('aws-key-id')\n    AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key')\n  }\n```", "```\n  stages {\n    stage('Checkout') {\n        steps {\n            checkout scm\n        }\n    }\n```", "```\n    stage('TF Plan') {\n        steps {\n            dir('terraform') {\n                sh 'terraform init'\n                sh 'terraform plan -out terraform.tfplan'\n            }\n       }\n     }\n```", "```\n    stage('Approval') {\n        steps {\n            script {\n                def userInput = input(id: 'confirm', message: 'Run apply?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Running apply', name: 'confirm'] ])\n            }\n        }\n    }\n```", "```\n    stage('TF Apply') {\n        steps {\n            dir('terraform') {\n                sh 'terraform apply -auto-approve -input=false terraform.tfplan'\n                sh 'rm -f terraform.tfplan'\n            }\n        }\n    }\n  }\n}\n```", "```\nname: Terraform Apply\non:\n  push:\n    branches: [ main ]\n```", "```\nenv:\n  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n```", "```\njobs:\n  terraform_apply:\n    runs-on: ubuntu-latest\n```", "```\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n```", "```\n    - name: Setup Terraform\n      uses: hashicorp/setup-terraform@v1\n```", "```\n    - name: Terraform Plan\n      working-directory: terraform/\n      run: |\n        terraform init\n        terraform plan -out terraform.tfplan\n```", "```\n    - name: Terraform Apply\n      working-directory: terraform/\n      run: |\n        terraform apply -auto-approve –input=false terraform.tfplan\n        rm -f terraform.tfplan\n```", "```\n#!/usr/bin/env bash\nset -u\nset -e\n```", "```\n# Check if Terraform binary is in PATH\nif command -v terraform &> /dev/null; then\n  TERRAFORM_BIN=\"$(command -v terraform)\"\nelse\n  echo \"Terraform not installed?\"\n  exit 1\nfi\n```", "```\n# Init terraform backend\n$TERRAFORM_BIN init -input=false\n```", "```\n# Plan changes\necho \"Running plan...\"\n$TERRAFORM_BIN plan -input=false -out=./terraform.tfplan\n```", "```\necho \"Running Terraform now\"\nif $TERRAFORM_BIN apply -input=false ./terraform.tfplan; then\n    echo \"Terraform finished successfully\"\n    RETCODE=0\nelse\n    echo \"Failed!\"    fi\nfi\n```", "```\nname: Infracost\non:\n  push:\n    branches:\n      - main\njobs:\n  infracost:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run Infracost\n        uses: infracost/infracost-action@v1\n        with:\n          api_key: ${{ secrets.INFRACOST_API_KEY }}\n          terraform_dir: ./terraform\n```", "```\nname: Detect Infrastructure Drift\non:\n  push:\n    branches:\n      - main\n```", "```\njobs:\n  detect-drift:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n```", "```\n    - name: Install Terraform\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y unzip\n        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\n        sudo apt-add-repository \"deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main\"\n        sudo apt-get update && sudo apt-get install terraform\n```", "```\n    - name: Install Driftctl\n      run: |\n        curl https://github.com/cloudskiff/driftctl/releases/download/v0.8.2/driftctl_0.8.2_linux_amd64.tar.gz -sSLo driftctl.tar.gz\n        tar -xzf driftctl.tar.gz\n        sudo mv driftctl /usr/local/bin/\n```", "```\n    - name: Initialize Terraform\n      run: terraform init\n    - name: Check Terraform Configuration\n      run: terraform validate\n```", "```\n    - name: Detect Drift with Driftctl\n      run: |\n        driftctl scan –from tfstate://./terraform.tfstate –output json > drift.json\n    - name: Upload Drift Report to GitHub\n      uses: actions/upload-artifact@v2\n      with:\n        name: drift-report\n        path: drift.json\n```", "```\nname: Terrascan Scan\non: [push]\njobs:\n  scan:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Install Terrascan\n      run: |\n        wget https://github.com/accurics/terrascan/releases/latest/download/terrascan_linux_amd64.zip\n        unzip terrascan_linux_amd64.zip\n        rm -f terrascan_linux_amd64.zip\n        sudo mv terrascan /usr/local/bin/\n    - name: Run Terrascan\n      run: |\n        terrascan scan -f ./path/to/infrastructure/code\n```", "```\npackage test\nimport (\n  \"testing\"\n  \"github.com/gruntwork-io/terratest/modules/aws\"\n  \"github.com/gruntwork-io/terratest/modules/terraform\"\n  \"github.com/stretchr/testify/assert\"\n)\nfunc TestAwsInstance(t *testing.T) {\n  terraformOptions := &terraform.Options{\n    TerraformDir: \"../path/to/terraform/module\",\n  }\n  defer terraform.Destroy(t, terraformOptions)\n  terraform.InitAndApply(t, terraformOptions)\n  instanceID := terraform.Output(t, terraformOptions, \"aws_instance_id\")\n  instance := aws.GetEc2Instance(t, \"us-west-2\", instanceID)\n  assert.Equal(t, \"t3.micro\", instance.InstanceType)\n  assert.Equal(t, \"TestInstance\", instance.Tags[\"Name\"])\n}\n```", "```\nresource \"aws_instance\" \"vm_example\" {\n  ami           = \"ami-830c94e3\"\n  instance_type = \"t2.micro\"\n  tags = {\n    Name = \"DevOpsGuideTerraformExample\"\n}\n```", "```\n#!/usr/bin/env python\nfrom constructs import Construct\nfrom cdktf import App, TerraformStack\nfrom cdktf_cdktf_provider_aws.provider import AwsProvider\nfrom cdktf_cdktf_provider_aws.instance import Instance\nfrom cdktf_cdktf_provider_aws.data_aws_ami import DataAwsAmi, DataAwsAmiFilter\n```", "```\nclass MyStack(TerraformStack):\n    def __init__(self, scope: Construct, id: str):\n        super().__init__(scope, id)\n        AwsProvider(self, \"AWS\", region=\"eu-central-1\")\n```", "```\n        ec2_instance = Instance(\n            self,\n            id_=\"ec2instanceName\",\n            instance_type=\"t2.micro\"\n            ami=\"ami-830c94e3\",\n        )\napp = App()\nMyStack(app, \"ec2instance\")\napp.synth()\n```", "```\n import unittest\nfrom your_cdk_module import MyStack  # Replace 'your_cdk_module' with the actual module name containing the MyStack class\nclass TestMyStack(unittest.TestCase):\n    def test_ec2_instance(self):\n        app = App()\n        stack = MyStack(app, \"test-stack\")\n        # Get the EC2 instance resource created in the stack\n        ec2_instance = stack.node.try_find_child(\"ec2instance\")\n        # Assert EC2 instance properties\n        self.assertEqual(ec2_instance.ami, \"ubuntuAMI\")\n        self.assertEqual(ec2_instance.instance_type, \"t3.micro\")\n        self.assertEqual(ec2_instance.key_name, \"admin_key\")\n        self.assertEqual(ec2_instance.subnet_id, \"subnet-1234567890\")\nif __name__ == '__main__':\n    unittest.main()\n```", "```\ngit clone git@github.com:terraform-aws-modules/terraform-aws-atlantis.git\nCloning into 'terraform-aws-atlantis'...\nHost key fingerprint is SHA256:+Aze234876JhhddE\nremote: Enumerating objects: 1401, done.\nremote: Counting objects: 100% (110/110), done.\nremote: Compressing objects: 100% (101/101), done.\nremote: Total 1400 (delta 71), reused 81 (delta 52), pack-reused 1282\nReceiving objects: 100% (1401/1401), 433.19 KiB | 1.12 MiB/s, done.\nResolving deltas: 100% (899/899), done.\n```", "```\ncp terraform.tfvars.sample terraform.tfvars\n```", "```\ncidr = \"10.10.0.0/16\"\nazs = [\"eu-west-1a\", \"eu-west-1b\"]\nprivate_subnets = [\"10.10.1.0/24\", \"10.10.2.0/24\"]\npublic_subnets = [\"10.10.11.0/24\", \"10.10.12.0/24\"]\nroute53_zone_name = \"example.com\"\necs_service_assign_public_ip = true\natlantis_repo_allowlist = [\"github.com/terraform-aws-modules/*\"]\natlantis_github_user = \"\"\natlantis_github_user_token = \"\"\ntags = {\n  Name = \"atlantis\"\n}\n```", "```\nadmin@myhome~/aws$ terraform init\nInitializing modules...\n# output truncated for readability- Installed hashicorp/random v3.4.3 (signed by HashiCorp)\nTerraform has been successfully initialized!\n```", "```\nadmin@myhome~/aws$ terraform plan\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\n <= read (data resources)\nTerraform will perform the following actions:\n# Output truncated for readability\n  # aws_cloudwatch_log_group.atlantis will be created\n  + resource \"aws_cloudwatch_log_group\" \"atlantis\" {\n      + arn               = (known after apply)\n      + id                = (known after apply)\n      + name              = \"atlantis\"\n      + name_prefix       = (known after apply)\n      + retention_in_days = 7\n      + skip_destroy      = false\n      + tags              = {\n          + \"Name\" = \"atlantis\"\n        }\n      + tags_all          = {\n          + \"Name\" = \"atlantis\"\n        }\n    }\n# Removed some output for readability\nPlan: 49 to add, 0 to change, 0 to destroy.\n```", "```\nApply complete! Resources: 49 added, 0 changed, 0 destroyed.\nOutputs:\nalb_arn = \"arn:aws:elasticloadbalancing:eu-central-1:673522028003:loadbalancer/app/atlantis/8e6a5c314c2936bb\"\n# Output truncated for readabilityatlantis_url = \"https://atlantis.atlantis.devopsfury.com\"\natlantis_url_events = \"https://atlantis.atlantis.devopsfury.com/events\"\npublic_subnet_ids = [\n  \"subnet-08a96bf6a15a65a20\",\n  \"subnet-0bb98459f42567bdb\",\n]\nwebhook_secret = <sensitive>\n```", "```\nadmin@myhome:~/aws$ terraform output webhook_secret\n\"bf3b20b285c91c741eeff34621215ce241cb62594298a4cec44a19ac3c70ad3333cc97d9e8b24c06909003e5a879683e4d07d29efa750c47cdbeef3779b3eaef\"\n```", "```\n# Configure the AWS Provider\nprovider \"aws\" {\n  region = var.region\n}\n```", "```\nterraform {\n  required_version = \">=1.0\"\n  backend \"local\" {\n    path = \"tfstate/terraform.local-tfstate\"\n  }\n}\nresource \"aws_s3_bucket\" \"terraform_state\" {\n  bucket        = \"terraform-states\"\n  acl           = \"private\"\n  force_destroy = false\n  versioning {\n    enabled = true\n  }\n```", "```\n  server_side_encryption_configuration {\n    rule {\n      apply_server_side_encryption_by_default {\n        sse_algorithm = \"AES256\"\n      }\n    }\n  }\n}\n```", "```\nresource \"aws_dynamodb_table\" \"dynamodb-terraform-state-lock\" {\n  name           = \"terraform-state-lock\"\n  hash_key       = \"LockID\"\n  read_capacity  = 1\n  write_capacity = 1\n  attribute {\n    name = \"LockID\"\n    type = \"S\"\n  }\n  tags = {\n    Name = \"DynamoDB Terraform State Lock Table\"\n  }\n}\n```", "```\nvariable \"region\" {\n  type    = string\n  default = \"eu-central-1\"\n}\n```"]