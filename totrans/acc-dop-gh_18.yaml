- en: '*Chapter 15*: Securing Your Deployments'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第15章*：保障你的部署安全'
- en: In this chapter, we'll talk about securing your complete deployment and release
    pipeline beyond code and dependencies, to be able to deliver your software in
    a fast but secure and compliant way to secure environments and meet regulatory
    requirements.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论如何保障整个部署和发布流水线的安全，超越代码和依赖关系，能够快速、安全、合规地将软件交付到安全环境中并满足监管要求。
- en: 'We will cover the following main topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主要内容：
- en: Container and infrastructure security scanning
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器和基础设施安全扫描
- en: Automating the infrastructure change process
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化基础设施变更过程
- en: Source code and infrastructure integrity
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码和基础设施的完整性
- en: Dynamic application security testing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态应用安全测试
- en: Security hardening your release pipeline
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强化发布流水线的安全
- en: Container and infrastructure security scanning
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器和基础设施安全扫描
- en: One of the most prominent hacks in the last years was **SolarWinds**, a software
    company that provides system management tools for network and infrastructure monitoring.
    Attackers managed to introduce a backdoor in the **Orion** software that got rolled
    out to over 30,000 clients and compromised them using this backdoor. Among the
    clients were the Department of Homeland Security and the Department of Treasury
    (*Oladimeji S., Kerner S. M., 2021*).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来最引人注目的黑客事件之一是**SolarWinds**，这是一家为网络和基础设施监控提供系统管理工具的软件公司。攻击者成功地在**Orion**软件中植入了后门，该软件被推出到超过
    30,000 个客户中，并通过这个后门使其遭到入侵。客户中包括国土安全部和财政部（*Oladimeji S., Kerner S. M., 2021*）。
- en: The SolarWinds attack is considered a software supply chain attack, and this
    is true for the customers of Orion that installed the compromised version. But
    the attack on Orion was far more sophisticated than just an update of an infected
    dependency; the attacker gained access to the SolarWinds network and managed to
    install a malware called **Sunspot** on the SolarWinds build servers. Sunspot
    inserted the backdoor **Sunburst** into the software builds of Orion by replacing
    a source file without tracing any build failures or other suspicious outputs (*Eckels
    S., Smith J., & Ballenthin W., 2020*).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: SolarWinds 攻击被视为一起软件供应链攻击，这对安装了被入侵版本的 Orion 客户来说是事实。但对 Orion 的攻击远比单纯更新一个受感染的依赖要复杂，攻击者获得了
    SolarWinds 网络的访问权限，并成功在 SolarWinds 的构建服务器上安装了一个名为**Sunspot**的恶意软件。Sunspot 将后门**Sunburst**插入到
    Orion 的软件构建中，通过替换源文件而不触发任何构建失败或其他可疑输出（*Eckels S., Smith J., & Ballenthin W., 2020*）。
- en: The attack shows how deadly insider attacks are if your network is breached,
    and how important it is to secure your complete assembly line – not just the code,
    dependencies, and development environment. Build servers and all other systems
    included in the production of software must be kept secure.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 该攻击展示了如果你的网络被入侵，内部攻击是多么致命，并且强调了保障整个生产线安全的重要性——不仅仅是代码、依赖关系和开发环境。构建服务器和所有其他参与软件生产的系统必须保持安全。
- en: Container scanning
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器扫描
- en: Containers play an important part in every infrastructure today. They have a
    lot of advantages over classical **virtual machines** (**VMs**), but they also
    have their disadvantages. Containers need a new operational culture and existing
    processes, and practices might not be directly applicable (see *Souppaya M., Morello
    J., & Scarfone K., 2017*).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 容器在今天的每个基础设施中都扮演着重要角色。与传统的**虚拟机**（**VMs**）相比，容器有许多优点，但也存在一些缺点。容器需要一种新的运营文化，现有的流程和实践可能并不完全适用（见
    *Souppaya M., Morello J., & Scarfone K., 2017*）。
- en: Containers consist of many different layers, and like software dependencies,
    these layers can introduce vulnerabilities. To detect these, you can use so-called
    **container vulnerability analysis** (**CVA**), also known as **container security
    analysis** (**CSA**).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 容器由许多不同的层组成，像软件依赖一样，这些层可能会引入漏洞。为了检测这些漏洞，可以使用所谓的**容器漏洞分析**（**CVA**），也叫做**容器安全分析**（**CSA**）。
- en: GitHub does not have a built-in CVA tool, but nearly all solutions integrate
    very well into GitHub.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 本身并没有内建的 CVA 工具，但几乎所有的解决方案都可以很好地与 GitHub 集成。
- en: 'A very popular open source vulnerability scanner for container images and filesystems
    is **grype** ([https://github.com/anchore/grype/](https://github.com/anchore/grype/))
    from Anchore ([https://anchore.com/opensource/](https://anchore.com/opensource/)).
    It''s really easy to integrate it into your GitHub Actions workflow:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常受欢迎的开源容器镜像和文件系统漏洞扫描器是Anchore提供的**grype**([https://github.com/anchore/grype/](https://github.com/anchore/grype/))。它非常容易集成到你的GitHub
    Actions工作流中：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Another example of a CVA scanner is **Clair** ([https://github.com/quay/clair](https://github.com/quay/clair)),
    also an open source solution for static analysis of vulnerabilities in Docker
    and **Open Container Initiative** (**OCI**) containers. Clair can run as a container
    and store the scanning results in a Postgres database. See [https://quay.github.io/clair/](https://quay.github.io/clair/)
    for the complete documentation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个CVA扫描器的例子是**Clair**([https://github.com/quay/clair](https://github.com/quay/clair))，它是一个开源解决方案，用于对Docker和**开放容器倡议**（**OCI**）容器中的漏洞进行静态分析。Clair可以作为一个容器运行，并将扫描结果存储在Postgres数据库中。请查看[https://quay.github.io/clair/](https://quay.github.io/clair/)以获取完整的文档。
- en: There are commercial container scanners that are normally part of more holistic
    security platforms. One example is **Container Security** from **Aqua** ([https://www.aquasec.com/products/container-security/](https://www.aquasec.com/products/container-security/)).
    The **Aqua Platform** ([https://www.aquasec.com/aqua-cloud-native-security-platform/](https://www.aquasec.com/aqua-cloud-native-security-platform/))
    is a cloud-native security platform for containerized, serverless, and VM-based
    applications. Aqua runs either as a SaaS or as a self-hosted edition.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有商业化的容器扫描工具，通常是更全面安全平台的一部分。例如，**Aqua**的**容器安全**([https://www.aquasec.com/products/container-security/](https://www.aquasec.com/products/container-security/))就是一个例子。**Aqua平台**([https://www.aquasec.com/aqua-cloud-native-security-platform/](https://www.aquasec.com/aqua-cloud-native-security-platform/))是一个云原生安全平台，适用于容器化、无服务器和基于虚拟机的应用程序。Aqua可以作为SaaS或者自托管版本运行。
- en: Another example is **WhiteSource** ([https://www.whitesourcesoftware.com/solution-for-containers/)](https://www.whitesourcesoftware.com/solution-for-containers/)).
    They have the **GP Security Scan** Action in the GitHub marketplace to scan images
    before pushing them to GitHub packages ([https://github.com/marketplace/actions/gp-security-scan](https://github.com/marketplace/actions/gp-security-scan)).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是**WhiteSource**([https://www.whitesourcesoftware.com/solution-for-containers/)](https://www.whitesourcesoftware.com/solution-for-containers/))。他们在GitHub市场中提供了**GP安全扫描**操作，用于在将镜像推送到GitHub
    Packages之前进行扫描([https://github.com/marketplace/actions/gp-security-scan](https://github.com/marketplace/actions/gp-security-scan))。
- en: Both are great solutions, but as they are not cheap and have a big overlap with
    GitHub's advanced security, I'll not cover them in more detail here.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个都是很好的解决方案，但由于它们价格不菲且与GitHub的高级安全功能有很大重叠，因此我这里不会详细介绍。
- en: Infrastructure policies
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础设施策略
- en: Not everything infrastructure-related are containers. There are far more things
    to consider from a security perspective, especially in the cloud.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有与基础设施相关的内容都是容器。从安全角度来看，还有更多的事项需要考虑，特别是在云环境中。
- en: If you are using cloud providers, it's worth looking at their security portfolio.
    Microsoft Azure, for example, contains Microsoft **Defender for Cloud**, a **cloud
    security posture management** (**CSPM**) tool to protect workloads across multi-cloud
    and hybrid environments and to find weak spots across your cloud configuration
    ([https://azure.microsoft.com/en-us/services/defender-for-cloud](https://azure.microsoft.com/en-us/services/defender-for-cloud)).
    It supports Microsoft Azure, AWS, Google Cloud Platform, and on-premises workloads
    (using Azure Arc). Some of the capabilities in Microsoft Defender for Cloud are
    free for Microsoft Azure – but not all.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是云服务提供商，值得查看他们的安全组合。例如，Microsoft Azure包含了Microsoft **Defender for Cloud**，这是一款**云安全姿态管理**（**CSPM**）工具，用于保护多云和混合环境中的工作负载，并查找云配置中的薄弱环节([https://azure.microsoft.com/en-us/services/defender-for-cloud](https://azure.microsoft.com/en-us/services/defender-for-cloud))。它支持Microsoft
    Azure、AWS、Google Cloud Platform以及本地工作负载（通过Azure Arc）。Microsoft Defender for Cloud中的一些功能对于Microsoft
    Azure是免费的——但并非全部。
- en: 'Microsoft Azure also contains **Azure Policy** ([https://docs.microsoft.com/en-us/azure/governance/policy/](https://docs.microsoft.com/en-us/azure/governance/policy/)),
    a service that helps you to enforce standards and assess compliance. It allows
    you to define certain rules as policy definitions and evaluate these policies
    on demand. This example is in a GitHub Action workflow that runs every morning
    at 8 am:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Azure 还包含了 **Azure Policy** ([https://docs.microsoft.com/en-us/azure/governance/policy/](https://docs.microsoft.com/en-us/azure/governance/policy/))，这是一个帮助你强制执行标准并评估合规性的服务。它允许你定义某些规则作为策略定义，并按需评估这些策略。此示例位于一个每天早上
    8 点运行的 GitHub Action 工作流中：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Together with the AI-powered **security information and event management** (**SIEM**)
    system called **Microsoft Sentinel** ([https://azure.microsoft.com/en-us/services/microsoft-sentinel](https://azure.microsoft.com/en-us/services/microsoft-sentinel)),
    this is a very powerful security toolchain. But whether it makes sense for you
    depends a lot on your setup. If your primary cloud provider is not Azure, your
    decision for CSPM and SIEM might look completely different, and the **AWS Security
    Hub** would make more sense for you.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 与 AI 驱动的 **安全信息和事件管理**（**SIEM**）系统 **Microsoft Sentinel** ([https://azure.microsoft.com/en-us/services/microsoft-sentinel](https://azure.microsoft.com/en-us/services/microsoft-sentinel))
    一起，这是一个非常强大的安全工具链。但是否适合你取决于你的设置。如果你的主要云提供商不是 Azure，那么你对 CSPM 和 SIEM 的选择可能完全不同，**AWS
    安全中心**可能更适合你。
- en: 'A great open source tool to secure **Infrastructure as Code** (**IaC**) is
    **Checkov** ([https://github.com/bridgecrewio/checkov](https://github.com/bridgecrewio/checkov))
    – a static code analysis tool that scans cloud infrastructure provisioned using
    **Terraform**, **Terraform plan**, **CloudFormation**, **AWS Serverless Application
    Model** (**SAM**), **Kubernetes**, **Dockerfile**, **Serverless**, or **ARM templates**,
    and detects security and compliance misconfigurations. It comes with over 1,000
    built-in policies for the different platforms. It is really easy to use in GitHub,
    just use the **Checkov GitHub Action** ([https://github.com/marketplace/actions/checkov-github-action](https://github.com/marketplace/actions/checkov-github-action))
    in your workflow and point it to the directory that contains your infrastructure:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很棒的开源工具，用于确保 **基础设施即代码**（**IaC**）的安全性是 **Checkov** ([https://github.com/bridgecrewio/checkov](https://github.com/bridgecrewio/checkov))，这是一个静态代码分析工具，扫描使用
    **Terraform**、**Terraform plan**、**CloudFormation**、**AWS 无服务器应用程序模型**（**SAM**）、**Kubernetes**、**Dockerfile**、**Serverless**
    或 **ARM 模板** 提供的云基础设施，并检测安全性和合规性错误配置。它内置了超过 1000 个针对不同平台的策略。它在 GitHub 中非常易于使用，只需在工作流中使用
    **Checkov GitHub Action** ([https://github.com/marketplace/actions/checkov-github-action](https://github.com/marketplace/actions/checkov-github-action))
    并指向包含你基础设施的目录：
- en: '[PRE22]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The action supports SARIF output and can be integrated into GitHub''s advanced
    security:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该操作支持 SARIF 输出，并可以集成到 GitHub 的高级安全功能中：
- en: '[PRE27]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The results show up under **Security** | **Code scanning** alerts (see *Figure
    15.1*):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 结果会显示在 **Security** | **Code scanning** 警报下（见 *图 15.1*）：
- en: '![Figure 15.1 – Checkov results in GitHub'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.1 – GitHub 中的 Checkov 结果'
- en: '](img/B17827_15_001.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_15_001.jpg)'
- en: Figure 15.1 – Checkov results in GitHub
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.1 – GitHub 中的 Checkov 结果
- en: Checkov is great to check your IaC, but it does not check your infrastructure
    for changes. But if you have a solution such as Terraform or ARM, you can regularly
    run a validation in a workflow to check that nothing has changed.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Checkov 非常适合检查你的 IaC，但它并不会检查你的基础设施变更。不过，如果你使用的是 Terraform 或 ARM 等解决方案，你可以定期在工作流中运行验证，以确保没有发生变化。
- en: Automate the infrastructure change process
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化基础设施变更过程
- en: Most IT organizations have a change management process in place to reduce operations
    and security risks. Most companies follow the **Information Technology Infrastructure
    Library** (**ITIL**). In ITIL, you have a **Request for Change** (**RFC)** that
    has to be approved by a **Change-Advisory Board** (**CAB**). The problem is that
    approvals by a CAB are related to a bad software delivery performance (see *Forsgren
    N., Humble, J., & Kim, G., 2018*).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 IT 组织都有变更管理流程，以降低操作和安全风险。大多数公司遵循 **信息技术基础设施库**（**ITIL**）。在 ITIL 中，你需要通过
    **变更请求**（**RFC**）并由 **变更咨询委员会**（**CAB**）批准。问题在于，CAB 的批准往往与不良的软件交付表现有关（见 *Forsgren
    N., Humble, J., & Kim, G., 2018*）。
- en: From a security standpoint, **change management** and **segregation of duties**
    are important, and they are often also required for compliance. The key is again
    to rethink the underlying principles in a DevOps way.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从安全角度来看，**变更管理**和**职责分离**非常重要，而且通常也是合规性要求的一部分。关键是要以 DevOps 方式重新思考这些基本原则。
- en: With IaC and fully automated deployment, there is a complete audit trail for
    all infrastructure changes. If you have full control over the process, the best
    thing to do is to set up the CAB as `CODEOWNERS` for IaC files and do the approvals
    in pull requests. For simple standard changes on the application layer (for example,
    containers in a Kubernetes cluster), a peer review might be enough. For infrastructure
    changes on deeper levels with effects on networks, firewalls, or secrets, the
    number of reviewers will increase, and you can add specialists accordingly. These
    files normally also reside in other repositories and do not affect the developer
    velocity and slow down your releases.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基础设施即代码（IaC）和完全自动化的部署，所有基础设施变更都有完整的审计记录。如果你对过程有完全控制，最好的做法是将CAB设置为`CODEOWNERS`，并在拉取请求中进行审批。对于应用层的简单标准变更（例如Kubernetes集群中的容器），同行评审可能就足够了。对于更深层次的基础设施变更，涉及网络、防火墙或机密的，审查人员的数量会增加，并且你可以相应地增加专家。这些文件通常也存在于其他代码库中，不会影响开发人员的效率，也不会拖慢发布速度。
- en: If you are bound to a corporate process, this might not be so easy. In this
    case, you have to try to recategorize your changes to get most of them pre-approved
    and use peer reviews and automated checks for these changes for security reasons.
    Then, automate the process for higher-risk changes so that the information for
    the CAB is as complete and correct as possible to come to a fast approval (see
    *Kim G., Humble J., Debois P. & Willis J., 2016, Part VI*, [*Chapter 23*](B17827_23_Epub.xhtml#_idTextAnchor417)).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你受限于企业流程，这可能并不容易。在这种情况下，你需要尝试重新分类你的变更，使大部分变更获得预批准，并为这些变更使用同行评审和自动化检查，以确保安全。然后，为高风险变更自动化该过程，以便为CAB提供尽可能完整和准确的信息，以便快速审批（见*Kim
    G., Humble J., Debois P. & Willis J., 2016, Part VI*，[*第23章*](B17827_23_Epub.xhtml#_idTextAnchor417)）。
- en: Source code and infrastructure integrity
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源代码和基础设施的完整性
- en: In manufacturing, it's a normal practice to provide a **bill of materials**
    (**BOM**) for a production order. A BOM is a list of raw materials, subassemblies,
    intermediate assemblies, subcomponents, and parts that have been used to manufacture
    the end product.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在制造业中，提供**物料清单**（**BOM**）是生产订单的常规做法。BOM是一个包含原材料、子组件、中间组件、子部件和用于制造最终产品的零件的清单。
- en: 'The same thing exists for software: the **software bill of materials** (**SBOM**),
    but it is still less common.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 软件领域也有类似的概念：**软件物料清单**（**SBOM**），但它仍然较为少见。
- en: The SBOM
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SBOM
- en: If you have a close look at software supply chain attacks such as the `npm`
    package. An SBOM can help here with the forensic and it can be used to compare
    the hashes of different versions.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细观察软件供应链攻击，例如`npm`包，SBOM可以帮助进行法医分析，并且可以用来比较不同版本的哈希值。
- en: In the `MsBuild.exe`. To help prevent and investigate these kinds of attacks,
    you'll have to extend the SBOM to include details for all tools included in the
    build process and all the running processes on the build machine.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MsBuild.exe`中。为了帮助防止和调查这类攻击，你需要扩展SBOM，包含构建过程中的所有工具和构建机器上所有正在运行的进程的详细信息。
- en: 'There are different common formats for SBOM:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: SBOM有多种常见格式：
- en: '**Software Package Data Exchange** (**SPDX**): SPDX is an open standard for
    SBOM with origins in the Linux Foundation. Its origin was license compliance,
    but it also contains copyrights, security references, and other metadata. SPDX
    was recently approved as ISO/IEC standard (*ISO/IEC 5962:2021*), and it fulfills
    the NTIA''s *Minimum Elements For a Software Bill of Materials*.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件包数据交换**（**SPDX**）：SPDX是一个开放标准的SBOM，起源于Linux基金会。它最初是为了许可证合规性，但也包含版权、安保参考和其他元数据。SPDX最近被批准为ISO/IEC标准（*ISO/IEC
    5962:2021*），并且它符合NTIA的*软件物料清单的最小元素*要求。'
- en: '**CycloneDX** (**CDX**): CDX is a lightweight open source format with origins
    in the **OWASP** community. It is optimized for integrating SBOM generation into
    a release pipeline.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CycloneDX**（**CDX**）：CDX是一个轻量级的开源格式，起源于**OWASP**社区。它经过优化，旨在将SBOM生成集成到发布流水线中。'
- en: '**Software Identification** (**SWID**) tags: SWID is an ISO/IEC industry standard
    (*ISO/IEC 19770-2*) used by various commercial software publishers. It supports
    automation of software inventory, assessment of software vulnerabilities on machines,
    detection of missing patches, targeting of configuration checklist assessments,
    software integrity checking, installation and execution whitelists/blacklists,
    and other security and operational use cases. It is a good format for doing the
    inventory of the software installed on your build machines.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件标识**（**SWID**）标签：SWID 是一种 ISO/IEC 行业标准（*ISO/IEC 19770-2*），由各种商业软件发布商使用。它支持自动化软件库存、对机器上软件漏洞的评估、缺少补丁的检测、配置检查清单评估、软件完整性检查、安装和执行白名单/黑名单等安全和操作性用例。它是进行构建机器上安装的软件库存的一个很好的格式。'
- en: 'There are different tools and use cases for each format. **SPDX** is generated
    by **syft**. You can use the **Anchore SBOM Action** (see [https://github.com/marketplace/actions/anchore-sbom-action](https://github.com/marketplace/actions/anchore-sbom-action))
    to generate an SPDX SBOM for a Docker or OCI container:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 每种格式有不同的工具和使用场景。**SPDX** 是由 **syft** 生成的。你可以使用 **Anchore SBOM Action**（见 [https://github.com/marketplace/actions/anchore-sbom-action](https://github.com/marketplace/actions/anchore-sbom-action)）为
    Docker 或 OCI 容器生成 SPDX SBOM：
- en: '[PRE32]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The SBOM is being uploaded as a workflow artifact (see *Figure 15.2*):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: SBOM 作为工作流工件上传（见 *图 15.2*）：
- en: '![Figure 15.2 – SPDX SBOM uploaded as a build artifact'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.2 – SPDX SBOM 作为构建工件上传'
- en: '](img/B17827_15_002.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_15_002.jpg)'
- en: Figure 15.2 – SPDX SBOM uploaded as a build artifact
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.2 – SPDX SBOM 作为构建工件上传
- en: '**FOSSology** ([https://github.com/fossology/fossology](https://github.com/fossology/fossology))
    is an open source license compliance solution that also uses SPDX.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**FOSSology** ([https://github.com/fossology/fossology](https://github.com/fossology/fossology))
    是一个开源的许可证合规解决方案，它也使用 SPDX。'
- en: '`.NET`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`.NET`：'
- en: '[PRE39]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The SBOM does not get uploaded automatically, unlike the Anchore action; you
    would have to do that manually:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Anchore 操作不同，SBOM 不会自动上传，你需要手动上传：
- en: '[PRE44]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'CDX is also used in `DependencyTrack` instance:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: CDX 也用于 `DependencyTrack` 实例：
- en: '[PRE48]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: SWID tags are more used in **Software Asset Management** (**SAM**) solutions
    such as snow ([https://www.snowsoftware.com/](https://www.snowsoftware.com/)),
    **Microsoft System Center**, or **ServiceNow ITOM**. CDX and SPDX can use SWID
    tags if they are present.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: SWID 标签更多用于 **软件资产管理**（**SAM**）解决方案，如 snow ([https://www.snowsoftware.com/](https://www.snowsoftware.com/))、**Microsoft
    System Center** 或 **ServiceNow ITOM**。如果存在，CDX 和 SPDX 可以使用 SWID 标签。
- en: If you want to learn more about SBOM, see [https://www.ntia.gov/sbom](https://www.ntia.gov/sbom).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于 SBOM 的信息，可以参见 [https://www.ntia.gov/sbom](https://www.ntia.gov/sbom)。
- en: If you are working completely on GitHub Enterprise Cloud and use the hosted
    runners, SBOM is not so important. All the relevant data is connected on GitHub
    anyway. But, if you are on GitHub Enterprise Server, have self-hosted runners,
    and other commercial software in your release pipeline that is not consumed by
    public package managers, an SBOM for all your releases can help to detect vulnerabilities,
    license issues, and help with the forensic in case of an incident.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你完全在 GitHub Enterprise Cloud 上工作，并使用托管运行器，那么 SBOM 并不是那么重要。无论如何，所有相关数据都会连接到
    GitHub。但如果你使用的是 GitHub Enterprise Server，拥有自托管的运行器，并且在发布管道中有其他商业软件，这些软件没有被公共包管理器消费，那么为所有发布生成
    SBOM 可以帮助检测漏洞、许可证问题，并且在发生事件时帮助进行取证。
- en: Signing your commits
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 签署你的提交
- en: 'A discussion I often have is whether you should sign all your commits or not.
    Git is very powerful and gives you the possibility to alter existing commits.
    But this also means that the author of a commit is not necessarily the one that
    is committing the code. A commit has two fields: `author` and `committer`. Both
    fields get set to the values of `user.name` and `user.email` from `git config`
    plus a timestamp. If you rebase, for example, the committer changes to the current
    value, but the author stays the same. Both fields have absolutely nothing to do
    with the authentication to GitHub.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常讨论的一个问题是是否应该签署你所有的提交。Git 是非常强大的，它给你提供了修改现有提交的可能性。但这也意味着，提交的作者不一定就是提交代码的人。一个提交有两个字段：`author`
    和 `committer`。这两个字段的值来自 `git config` 中的 `user.name` 和 `user.email`，再加上时间戳。如果你进行
    rebase 操作，例如，committer 会变为当前的值，但 author 保持不变。这两个字段与 GitHub 的身份验证完全没有关系。
- en: 'You can look up the email address of **Linus Torvalds** in the Linux repository,
    configure your local Git repository to use this email address, and commit it to
    your repository. The commit will appear as if the author was Linus (see *Figure
    15.3*):'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.3 – A commit''s author information is completely decoupled from
    the authentication'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_15_003.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.3 – A commit's author information is completely decoupled from the
    authentication
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'The link in the profile picture will also work and redirect you to the correct
    profile page. But the commit does not have a `Verified` badge unlike commits that
    you perform on the server either by modifying a file in the web UI or by using
    a pull request to merge your changes on the server. The verified badge shows that
    the commit was signed with a **GNU Privacy Guard** (**GPG**) key that contains
    a verified email address of your account (see *Figure 15.4*):'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.4 – Signed commits have a verified badge on GitHub'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_15_004.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.4 – Signed commits have a verified badge on GitHub
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create a GPG key locally and sign your commits with it (`git commit
    -S`). You are, of course, completely free to set a name and email address in the
    key, they just must match the email and user configured in `git config`. The signature
    is valid as long as you don''t modify the commit (see *Figure 15.5*):'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.5 – Locally signed commits are valid if email and name match'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_15_005.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.5 – Locally signed commits are valid if email and name match
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'But even if you upload the **Pretty Good Privacy** (**PGP**) key to your GitHub
    profile ([https://github.com/settings/gpg/new](https://github.com/settings/gpg/new)),
    the commit will not be verified, as GitHub looks in the profile with the verified
    email address for the key (see *Figure 15.6*):'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.6 – Signed commits from another user are not verified'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17827_15_006.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.6 – Signed commits from another user are not verified
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Does this mean you must sign all your commits locally? I believe not. The problem
    is that enforcing developers to sign all commits will slow you down. Many IDEs
    and tools do not support signing. Keeping the keys in sync, dealing with multiple
    email addresses – everything becomes more painful. It might work very well if
    all your developers work on corporate devices with the same email address. But
    this is normally not the case. People work remotely, on different machines, and
    in different environments, and they work on the same machine on open source software
    with a different email than on corporate code. The benefit is just not worth it.
    If an attacker has push permissions to your repository, the last thing you worry
    about is a faked email address.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'What I recommend is the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Pick a workflow that relies on `merge`, `squash`, or `rebase` the changes on
    the server so that they get signed by default.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need to ensure integrity for releases, sign your tags (`git tag -S`).
    Since Git is an SHA-1 or SHA-256-based tree, signing a tag will ensure that all
    parent commits have not been modified.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你需要确保发布的完整性，可以签署你的标签（`git tag -S`）。由于 Git 是基于 SHA-1 或 SHA-256 的树，签署标签将确保所有父提交未被修改。
- en: Instead of requiring your developers to sign all commits locally and slow your
    team down, invest in signing your code during the build process to ensure that
    nobody tampers with your files after the build process.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 与其要求开发人员在本地签署所有提交并拖慢团队进度，不如在构建过程中签署代码，以确保构建后没有人篡改你的文件。
- en: Signing your code
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 签署你的代码
- en: Signing your binaries is called **code signing**, even if you sign the binaries
    and not the code. You need a certificate from a trusted authority to do this.
    How you sign your code during the build process depends a lot on your language
    and how it gets compiled.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 签署二进制文件称为**代码签署**，即使你签署的是二进制文件而不是代码。你需要来自受信任机构的证书才能做到这一点。你如何在构建过程中签署代码在很大程度上取决于你的语言和编译方式。
- en: 'To sign your Apple XCode applications in GitHub Actions, you can use this documentation
    to install the `base64` encoded certificate and publishing profile during your
    build: [https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development](https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development).
    Don''t forget to clean this up on self-hosted runners that are shared with other
    teams. On GitHub-hosted runners, every build gets a clean environment anyway.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 GitHub Actions 中签署你的 Apple XCode 应用程序，你可以使用此文档在构建过程中安装 `base64` 编码的证书和发布配置文件：[https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development](https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development)。不要忘记在与其他团队共享的自托管运行器上清理这些信息。在
    GitHub 托管的运行器上，每个构建都会得到一个干净的环境。
- en: Depending on your code signing solution, you can find multiple actions in the
    marketplace for Authenticode and `signtool.exe`. But as all signing solutions
    are command-line based, you can pass your signing certificate to your workflow
    using the `secret` context as in the example for Apple.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的代码签署解决方案，你可以在市场上找到多个适用于 Authenticode 和 `signtool.exe` 的操作。但由于所有签署解决方案都是基于命令行的，你可以像示例中
    Apple 的做法一样，使用 `secret` 上下文将你的签名证书传递给工作流。
- en: Dynamic application security testing
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态应用程序安全测试
- en: To harden your application security, you can integrate **dynamic application
    security testing** (**DAST**) into your release workflow. DAST is black-box testing
    that simulates a real-world attack on the running application.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增强应用程序安全性，你可以将**动态应用程序安全测试**（**DAST**）集成到发布工作流中。DAST 是一种黑盒测试，模拟对正在运行的应用程序进行现实世界攻击。
- en: There are many commercial tools and SaaS solutions (such as **Burp Suit** from
    **PortSwigger** or **WhiteHat Sentinel**) but it's outside the scope of this book
    to analyze them.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多商业工具和 SaaS 解决方案（如**Burp Suite**来自**PortSwigger**或**WhiteHat Sentinel**），但分析这些内容超出了本书的范围。
- en: 'There are also some open source solutions. One example is the **Zed Attack
    Proxy** (**ZAP**) ([https://www.zaproxy.org/](https://www.zaproxy.org/)) from
    OWASP. It''s a stand-alone application that runs on Windows, macOS, and Linux
    (see [https://www.zaproxy.org/download/](https://www.zaproxy.org/download/)) and
    can be used to attack web applications. The application allows you to analyze
    a web application, intercept and modify traffic, and run an attack using the ZAP
    Spider against the website or parts of it (see *Figure 15.7*):'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 也有一些开源解决方案。一个例子是 OWASP 的**Zed 攻击代理**（**ZAP**）（[https://www.zaproxy.org/](https://www.zaproxy.org/)）。它是一个独立的应用程序，可在
    Windows、macOS 和 Linux 上运行（见[https://www.zaproxy.org/download/](https://www.zaproxy.org/download/)），可以用来攻击
    Web 应用程序。该应用程序允许你分析 Web 应用程序、拦截和修改流量，并使用 ZAP 蜘蛛对网站或其部分进行攻击（见*图 15.7*）：
- en: '![Figure 15.7 – The OWASP ZAP application'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.7 – OWASP ZAP 应用程序'
- en: '](img/B17827_15_007.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_15_007.jpg)'
- en: Figure 15.7 – The OWASP ZAP application
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.7 – OWASP ZAP 应用程序
- en: 'OWASP ZAP launches a browser and uses a **heads-up display** (**HUD**) to display
    controls on top of the website. You can use these controls to analyze the site,
    run attacks using the spider, or intercept requests without leaving the application
    (see *Figure 15.8*):'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP ZAP 启动浏览器并使用**头显显示**（**HUD**）在网站顶部显示控件。你可以使用这些控件分析站点，使用蜘蛛执行攻击，或在不离开应用程序的情况下拦截请求（见*图
    15.8*）：
- en: '![Figure 15.8 – The HUD displays controls on the website being attacked'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.8 – HUD 显示正在被攻击的网站上的控制'
- en: '](img/B17827_15_008.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_15_008.jpg)'
- en: Figure 15.8 – The HUD displays controls on the website being attacked
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.8 – HUD 显示正在被攻击的网站上的控制
- en: 'Even if you are not a pen tester, as a web developer, it should be easy to
    get started and learn how to attack your site using OWASP ZAP. But to shift left
    security, you should integrate the scan into your workflow. OWASP ZAP has three
    Actions in the GitHub marketplace (see *Figure 15.9*):'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你不是渗透测试员，作为一名 Web 开发人员，使用 OWASP ZAP 开始并学习如何攻击你的网站应该是容易的。但为了向左推进安全，你应该将扫描集成到工作流中。OWASP
    ZAP 在 GitHub 市场上有三个 Actions（见*图 15.9*）：
- en: '![Figure 15.9 – Available OWASP ZAP Actions in the GitHub marketplace'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.9 – GitHub 市场上可用的 OWASP ZAP Actions'
- en: '](img/B17827_15_009.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_15_009.jpg)'
- en: Figure 15.9 – Available OWASP ZAP Actions in the GitHub marketplace
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.9 – GitHub 市场上可用的 OWASP ZAP Actions
- en: 'The **Baseline Scan** is faster than the **Full Scan**. The **API Scan** can
    be used to scan an **OpenAPI**, **SOAP**, or **GraphQL** API. The usage of the
    Actions is straightforward:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**基线扫描**比**完整扫描**更快。**API 扫描**可用于扫描**OpenAPI**、**SOAP** 或 **GraphQL** API。使用这些
    Actions 非常简单：'
- en: '[PRE54]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The action uses `GITHUB_TOKEN` to write the results to a GitHub Issue. It also
    adds a report as a build artifact. The report is available as HTML, JSON, or Markdown
    (see *Figure 15.10*):'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 该 Action 使用 `GITHUB_TOKEN` 将结果写入 GitHub 问题。它还将报告作为构建工件添加。报告可以作为 HTML、JSON 或
    Markdown 格式获取（见*图 15.10*）：
- en: '![Figure 15.10 – Findings from OWASP ZAP scan'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.10 – 来自 OWASP ZAP 扫描的发现'
- en: '](img/B17827_15_010.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_15_010.jpg)'
- en: Figure 15.10 – Findings from OWASP ZAP scan
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.10 – 来自 OWASP ZAP 扫描的发现
- en: Of course, this is just suitable for web applications. There are other DAST
    tools used for other scenarios. But the example shows how easy it can be included
    in your pipeline. Most DAST tools are command-line tools or containers, or they
    already have integration such as OWASP ZAP.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这只适用于 Web 应用程序。还有其他用于其他场景的 DAST 工具。但这个例子展示了它如何轻松地集成到你的流水线中。大多数 DAST 工具是命令行工具或容器，或者它们已经具有集成，比如
    OWASP ZAP。
- en: Security hardening your release pipeline
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全加固你的发布流水线
- en: CI/CD pipelines are complex and have a big surface to attack. Basically, release
    pipelines are remote code execution environments and should be treated like this
    with caution (see *Haymore A., Smart I., Gazdag V., Natesan D., & Fernick J.,
    2022* for some attack examples).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 流水线很复杂，攻击面很大。基本上，发布流水线是远程代码执行环境，应谨慎对待（参考*Haymore A., Smart I., Gazdag
    V., Natesan D., & Fernick J., 2022* 中的一些攻击示例）。
- en: Model your pipelines with caution and follow best practices, especially when
    you are building highly customized ones. It's better to ask for external help
    than to be sorry if it is too late.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 小心建模你的流水线并遵循最佳实践，尤其是在你构建高度定制化的流水线时。如果太晚了，最好寻求外部帮助，而不是后悔。
- en: Secure your runners
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护你的运行器
- en: If you use GitHub-hosted runners, it's their job to keep them safe. The runners
    are ephemeral, and every execution starts in a clean state. But you execute code
    that can access your resources in GitHub, including secrets. Make sure to security-harden
    your GitHub Actions (see the *Secure your Actions* section) and limit permissions
    for `GitHub_TOKEN` (workflows should run with the least-possible privileges).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 GitHub 托管的运行器，它们的职责是保持安全。运行器是临时的，每次执行都从干净的状态开始。但你执行的代码可能会访问 GitHub 中的资源，包括秘密。确保对你的
    GitHub Actions 进行安全加固（参考*加固你的 Actions*部分）并限制 `GitHub_TOKEN` 的权限（工作流应以最小权限运行）。
- en: 'Self-hosted runners run in your environment, and you are responsible for keeping
    them safe! Here are some rules you should follow:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 自托管的运行器在你的环境中运行，你需要对其安全负责！以下是你应该遵循的一些规则：
- en: Never use self-hosted runners for **public repositories**.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要为**公开仓库**使用自托管的运行器。
- en: Make your runners **ephemeral** (or at least clean up after each run and don't
    leave artifacts on disk or in memory).
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使你的运行器**临时**（或者至少在每次运行后进行清理，不要在磁盘或内存中留下工件）。
- en: Keep your images **lean** and **patched** (only install the tools you need and
    keep everything up to date).
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持你的镜像**精简**和**修补**（只安装你需要的工具，并保持一切更新）。
- en: Don't have **universal runners** for all teams and technologies. Keep the images
    separated and specialized.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要为所有团队和技术使用**通用运行器**。保持镜像的分离和专业化。
- en: Keep runners in an **isolated network** (only allow runners to access the resources
    they need).
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持运行器在**隔离网络**中（仅允许运行器访问所需资源）。
- en: Only run **secure Actions**.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅运行**安全的 Actions**。
- en: Include the runners in your **security monitoring** and check for unusual processes
    or network activity.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将跑步者包括在你的**安全监控**中，并检查是否有异常的进程或网络活动。
- en: The best solution is to have a dynamically scaling environment (for example,
    a Kubernetes service) and run ephemeral runners with lean and patched images.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的解决方案是拥有一个动态扩展的环境（例如，Kubernetes 服务），并运行具有精简和修补的镜像的短期跑步者。
- en: See [*Chapter 7*](B17827_07_Epub.xhtml#_idTextAnchor175), *Running Your Workflows*,
    for details on self-hosted and hosted runners.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[*第7章*](B17827_07_Epub.xhtml#_idTextAnchor175)，*运行你的工作流*，了解有关自行托管和托管跑步者的详细信息。
- en: Secure your Actions
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护你的 Actions
- en: 'GitHub Actions are very useful, but they are code you execute and grant access
    to your resources. You should be very careful what actions you use, especially
    in self-hosted runners. Actions from trusted sources, such as GitHub, Microsoft,
    AWS, or Google, are not the problems. But even they accept pull requests, so there
    is still a chance a vulnerability might slip through. Best practices for Actions
    are as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 非常有用，但它们是你执行并授予访问权限的代码。你应该非常小心使用哪些 Actions，特别是在自行托管跑步者时。来自可信来源的
    Actions，例如 GitHub、Microsoft、AWS 或 Google，不是问题。但即便如此，它们也接受拉取请求，因此仍然有可能漏洞会悄然通过。Actions
    的最佳实践如下：
- en: Always **review the code** of the Action. Also, look at the **owner**, number
    of contributors, number and dates of commits, number of stars, and all these kinds
    of indicators to see that the Action belongs to a healthy community.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终**审查代码**。此外，查看**所有者**、贡献者数量、提交次数和日期、星标数等指标，以确保该 Action 属于一个健康的社区。
- en: Always reference an Action by the explicit **commit SHA**. The SHA is immutable,
    whereas tags and branches might be modified and lead to new code getting executed
    by you without your knowledge.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终通过明确的**提交 SHA**引用一个 Action。SHA 是不可变的，而标签和分支可能会被修改，导致你不知情地执行新的代码。
- en: If you are working with forks, **require approval** for all outside collaborators
    and not just first-time contributors.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在与分支合作，**要求批准**所有外部协作者，而不仅仅是首次贡献者。
- en: Use **Dependabot** to keep your actions up to date.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**Dependabot**保持你的 Actions 更新。
- en: 'If you are self-hosting your runners, you should even be more restrictive and
    limit the actions that can be used. There are two possibilities:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是自行托管跑步者，你应该更加严格地限制可以使用的操作。有两个可能的选项：
- en: '**Allow local actions only** and create a fork from the action you have analyzed
    and reference the fork. This is extra work but gives you full control over the
    actions you use. You can add the actions to a local marketplace for easier discoverability
    (see *Rob Bos, 2022*).'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅允许本地 Actions**，并创建一个你已分析的 Action 的分支，引用该分支。这是额外的工作，但可以让你完全控制所使用的 Actions。你可以将
    Actions 添加到本地市场中，方便发现（见 *Rob Bos, 2022*）。'
- en: '`Azure/*`). This option is less secure than option 1, but it is also less effort
    to maintain.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Azure/*`)。这个选项的安全性低于选项1，但维护起来也较为简单。'
- en: You can configure these options as enterprise policies or for each organization.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这些选项配置为企业政策或为每个组织配置。
- en: Actions are code from other people that you execute in your environment. They
    are dependencies that can break your ability to ship and introduce vulnerabilities.
    Ensure that your policies find the best balance for your needs between velocity
    and security.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Actions 是来自其他人的代码，你在自己的环境中执行它们。它们是依赖项，可能会破坏你的发布能力，并引入漏洞。确保你的策略在速度和安全性之间找到最合适的平衡，以满足你的需求。
- en: Secure your environments
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护你的环境
- en: Use **environment protection rules** with **required reviewers** to approve
    releases before they get deployed to an environment (see **staged deployments**
    in [*Chapter 9*](B17827_09_Epub.xhtml#_idTextAnchor216), *Deploy to Any Platform*).
    This ensures that a release was reviewed before accessing the secrets of the environment
    and executing code.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**环境保护规则**和**必需的审阅者**来批准发布，在它们被部署到环境中之前（请参见[*第9章*](B17827_09_Epub.xhtml#_idTextAnchor216)，*部署到任何平台*）。这确保在访问环境的密钥和执行代码之前，发布已被审查。
- en: Combine it with **branch protection** and **code owners** (see [*Chapter 3*](B17827_03_Epub.xhtml#_idTextAnchor081),
    *Teamwork and Collaborative Development*) by only allowing certain branches into
    your environment. This way, you are sure that necessary automated tests and approvals
    from code owners are in place when approving the deployment.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 将其与**分支保护**和**代码所有者**（请参见[*第3章*](B17827_03_Epub.xhtml#_idTextAnchor081)，*团队合作与协作开发*）结合使用，通过仅允许特定分支进入你的环境。这么做可以确保在批准部署时，必要的自动化测试和代码所有者的批准都已到位。
- en: Use tokens when possible
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尽可能使用令牌
- en: Instead of using credentials stored as secrets to connect to a cloud provider
    – such as Azure, AWS, GCP, or HashiCorp – you can use **OpenID Connect** (**OIDC**).
    OIDC will exchange short-lived tokens to authenticate instead of credentials.
    Your cloud provider also needs to support OIDC on their end.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 不使用作为机密存储的凭证连接到云服务提供商——如 Azure、AWS、GCP 或 HashiCorp——你可以使用**OpenID Connect**（**OIDC**）。OIDC
    会交换短期有效的令牌进行身份验证，而不是使用凭证。你的云服务提供商也需要在其端支持 OIDC。
- en: Using OIDC, you don't have to store cloud credentials in GitHub, you have more
    granular control over what resources the workflow can access, and you have rotating,
    short-lived tokens that will expire after the workflow run.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 OIDC，你不需要在 GitHub 中存储云凭证，你可以更细粒度地控制工作流可以访问哪些资源，并且你将拥有在工作流运行后会过期的轮换式、短期有效的令牌。
- en: '*Figure 15.11* shows an overview of how OIDC works:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 15.11*展示了 OIDC 的工作原理概览：'
- en: '![Figure 15.11 – OIDC integration with a cloud provider'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.11 – OIDC 与云服务提供商的集成'
- en: '](img/B17827_15_011.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_15_011.jpg)'
- en: Figure 15.11 – OIDC integration with a cloud provider
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.11 – OIDC 与云服务提供商的集成
- en: 'The steps are as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤如下：
- en: Create an **OIDC trust** between your cloud provider and GitHub. Limit the trust
    to an organization and repository and further limit access to an environment,
    branch, or pull request.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的云服务提供商和 GitHub 之间创建**OIDC 信任**。将信任限制为组织和存储库，并进一步限制对环境、分支或拉取请求的访问。
- en: The GitHub OIDC provider **auto-generates a JSON Web Token** during a workflow
    run. The token contains multiple claims to establish a secure and verifiable identity
    for the specific workflow job.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitHub OIDC 提供者在工作流运行期间**自动生成 JSON Web Token**。该令牌包含多个声明，用以建立特定工作流作业的安全且可验证的身份。
- en: The cloud provider validates the claims and provides a **short-lived access
    token** that is available only for the lifetime of the job.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 云服务提供商验证这些声明，并提供一个**短期有效的访问令牌**，该令牌仅在作业生命周期内有效。
- en: The access token is used to access resources that the identity has access to.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问令牌用于访问身份所拥有权限的资源。
- en: You can use the identity to directly access resources, or you can use it to
    get credentials from a secure vault (such as **Azure Key Vault** or **HashiCorp
    Vault**). This way, you can safely connect to services that do not support OIDC
    and automated secret rotation using the vault.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用该身份直接访问资源，或者可以使用它从安全的保管库（例如**Azure Key Vault**或**HashiCorp Vault**）获取凭证。这样，你可以安全地连接到不支持
    OIDC 的服务，并通过保管库实现自动化的机密轮换。
- en: 'In GitHub, you can find instructions on configuring OIDC for AWS, Azure, and
    GDP (see [https://docs.github.com/en/actions/deployment/security-hardening-your-deployments](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments)).
    The steps are straightforward. In Azure, for example, you create an app registration
    in **Azure Active Directory** (**AAD**):'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 中，你可以找到配置 OIDC 以用于 AWS、Azure 和 GCP 的说明（见 [https://docs.github.com/en/actions/deployment/security-hardening-your-deployments](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments)）。这些步骤是直接的。例如，在
    Azure 中，你需要在**Azure Active Directory**（**AAD**）中创建应用注册：
- en: '[PRE58]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Then, create a service principal using the app ID from the registration output:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用注册输出中的应用 ID 创建服务主体：
- en: '[PRE59]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Then, you can open the app registration in AAD and add the OIDC trust under
    **Certificates & secrets** | **Federated credentials** | **Add a credential**.
    Fill out the form, as in *Figure 15.12*:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以在 AAD 中打开应用注册，并在**证书和机密** | **联合凭证** | **添加凭证**下添加 OIDC 信任。填写表单，如*图 15.12*所示：
- en: '![Figure 15.12 – Creating the OIDC trust for an app registration'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.12 – 为应用注册创建 OIDC 信任'
- en: '](img/B17827_15_012.png)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_15_012.png)'
- en: Figure 15.12 – Creating the OIDC trust for an app registration
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.12 – 为应用注册创建 OIDC 信任
- en: Then, assign the service principal a role on the subscription level. Open the
    subscription in the portal. Under **Access control (IAM)** | **Role assignment**
    | **Add** | **Add role assignment**, follow the wizard. Select a role (for example,
    **Contributor**) and click **Next**. Select **User, group, or service principal**
    and select the service principal you created earlier.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在订阅级别为服务主体分配一个角色。打开门户中的订阅。在**访问控制（IAM）** | **角色分配** | **添加** | **添加角色分配**下，按照向导进行操作。选择一个角色（例如**贡献者**），然后点击**下一步**。选择**用户、组或服务主体**，并选择你之前创建的服务主体。
- en: 'In GitHub, your workflow needs `write` permissions for `id-token`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 中，你的工作流需要对 `id-token` 具有 `write` 权限：
- en: '[PRE60]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'In the Azure Login Action, use the client ID (`appId`), tenant ID, and subscription
    ID to retrieve the token from Azure:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 登录操作中，使用客户端 ID（`appId`）、租户 ID 和订阅 ID 从 Azure 获取令牌：
- en: '[PRE63]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'After that, you can use the **Azure CLI** to access resources:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 此后，你可以使用**Azure CLI**访问资源：
- en: '[PRE69]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'You can also work with other Azure Actions and remove the authentication part,
    in this example, the publishing profile. They will use the access token form provided
    by the login action:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用其他 Azure 操作并移除认证部分，在本例中是发布配置文件。他们将使用登录操作提供的访问令牌表单：
- en: '[PRE70]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Every cloud provider is different, but the documentation should get you up
    and running quickly: [https://docs.github.com/en/actions/deployment/security-hardening-your-deployments](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments).'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 每个云提供商不同，但文档应能帮助你快速启动并运行：[https://docs.github.com/en/actions/deployment/security-hardening-your-deployments](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments)。
- en: Collect security telemetry
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 收集安全遥测数据
- en: 'To secure your entire pipeline from code to production, you need real-time
    insights on all levels. There are different monitoring solutions on different
    layers (see *Figure 15.13*):'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 要确保从代码到生产环境的整个流水线的安全性，你需要对各个层级的实时数据进行洞察。不同层级有不同的监控解决方案（见*图 15.13*）：
- en: '![Figure 15.13 – The different layers of monitoring'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.13 – 不同层级的监控'
- en: '](img/B17827_15_013.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_15_013.jpg)'
- en: Figure 15.13 – The different layers of monitoring
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.13 – 不同层级的监控
- en: 'All these layers should report their data to your SIEM system to perform analytics
    and use AI to detect anomalies. Many organizations collect data on different levels
    but forget to include it in the monitoring due to different responsibilities.
    To security harden your releases, you should consider the following:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些层级应将它们的数据报告给你的 SIEM 系统，以执行分析，并使用 AI 检测异常。许多组织在不同层级收集数据，但由于责任不同，常常忘记将其纳入监控。为了加固发布的安全性，你应该考虑以下事项：
- en: Include **all monitoring sources** and events in your SIEM solution.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**所有监控来源**和事件纳入你的 SIEM 解决方案。
- en: Monitor the **entire pipeline** including your agents and test environments.
    Include all processes and network activity.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控**整个流水线**，包括你的代理和测试环境。涵盖所有进程和网络活动。
- en: '**Log deployment events** with the according version. If new processes are
    suddenly running or ports are opened after a deployment, you want to be able to
    associate these changes with this deployment to facilitate forensics.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**记录部署事件**及其对应的版本。如果在部署后突然有新进程运行或端口被打开，你希望能够将这些变化与此次部署关联，便于事后分析。'
- en: Collect **real-time application security data** and display it on the dashboard
    of your engineers. This could include **abnormal program termination**, **SQL
    injection** attempts, **Cross-site scripting** (**XSS**) attempts, **failed logins**
    (**brute force attacks**), or **DDoS attacks**, but it depends a lot on your product.
    To detect SQL injection or XSS, you have to include extra logging before encoding
    user input if the input contains suspicious characters or elements.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集**实时应用安全数据**并在工程师的仪表盘上显示。这可能包括**程序异常终止**、**SQL 注入**尝试、**跨站脚本攻击**（**XSS**）尝试、**登录失败**（**暴力破解攻击**）或**DDoS
    攻击**，但具体取决于你的产品。为了检测 SQL 注入或 XSS，你需要在编码用户输入之前加入额外的日志记录，特别是当输入包含可疑字符或元素时。
- en: The best way to create awareness is to see that the threat is real.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 提高意识的最佳方式是看到威胁是真实存在的。
- en: Case study
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究
- en: Until now, **Tailwind Gears** has paid an external company to perform **security
    reviews** of the architecture, help with **threat modelling** and a **risk analysis**,
    and perform security testing before major releases. They have never been breached
    and most of the investments so far went into network security. But now leveraging
    more and more cloud services, they've already been aware that they must do something
    to be able to **detect**, **respond**, and **recover**.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 直到现在，**Tailwind Gears**已经支付外部公司进行**架构安全评审**，帮助进行**威胁建模**和**风险分析**，并在重大发布之前进行安全测试。他们从未遭受过数据泄露，至今大部分投资集中在网络安全上。但现在，随着他们越来越多地使用云服务，他们已经意识到，必须采取措施以能够**检测**、**响应**和**恢复**。
- en: The IT department already started to use **Splunk** as their **SIEM** and **ITIM**
    solution and integrate more and more sources that feed data, but until now, the
    IT department could not be certain whether they would really detect an ongoing
    attack in real-time. Tailwind Gears decides to change the way they deal with security.
    They talk to their security partner, and they plan the first **red team / blue
    team** simulation. The scenario is an **inside attacker** to the web application
    of our DevOps pilot teams.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: IT 部门已经开始使用**Splunk**作为他们的**SIEM**和**ITIM**解决方案，并整合了越来越多的数据源，但直到现在，IT 部门仍无法确定是否能实时检测到正在进行的攻击。Tailwind
    Gears 决定改变他们处理安全问题的方式。他们与安全合作伙伴进行沟通，并计划首次进行**红队/蓝队**模拟。场景设定为**内部攻击者**攻击我们 DevOps
    试点团队的 Web 应用程序。
- en: 'The simulation takes 3 days and the red team wins by finding two ways to compromise
    production:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟持续了 3 天，红队通过找到两种方式破坏生产环境获得胜利：
- en: A **spear phishing** attack on a few developers in another team is successful
    and reveals the credentials of one of the developers. Using **BloodHound**, they
    find out that the developer has access to the former Jenkins server that now runs
    the GitHub Actions runner and has not yet been ported to the Kubernetes solution
    completely. The server does not have MFA enabled and **mimikatz** allows to capture
    the credentials of a test account. The test account has access to a test environment,
    and they can capture credentials of an admin account there that allows data extraction
    of the staging environment (that counts as production in the game).
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对另一团队中几位开发者的**鱼叉式钓鱼**攻击成功，并揭露了其中一位开发者的凭证。利用**BloodHound**，他们发现该开发者可以访问以前的 Jenkins
    服务器，而该服务器现在运行 GitHub Actions 运行器，且尚未完全迁移到 Kubernetes 解决方案中。该服务器未启用 MFA，且**mimikatz**能够捕获测试帐户的凭证。该测试帐户可以访问测试环境，他们可以在其中捕获管理员帐户的凭证，从而允许提取暂存环境的数据（在此情境中，这算作生产环境）。
- en: Since all developers have read access to all repositories, an analysis of the
    dependencies of the web application shows a dependency that is vulnerable to XSS
    and has not been patched yet. The component is a search control and allows the
    red team with the help of a frontend developer of another team to execute scripts
    in the context of other users. They open an issue in an internal GitHub repository
    and use the GitHub API to post a comment to the issue on each execution as proof.
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于所有开发者都具有对所有代码库的读取权限，对 Web 应用程序的依赖分析显示，存在一个易受 XSS 攻击且尚未修补的依赖项。该组件是一个搜索控件，允许红队在另一团队的前端开发者协助下，在其他用户的上下文中执行脚本。他们在内部
    GitHub 仓库中打开一个问题，并利用 GitHub API 在每次执行时向该问题发布评论作为证据。
- en: The simulation results in many backlog items that will be addressed over the
    next weeks. Some things do not concern our DevOps teams, such as enabling MFA
    for all internal systems or regularly executing phishing simulations to create
    awareness among employees.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟结果产生了许多待办事项，将在接下来的几周内处理。有些事情与我们的 DevOps 团队无关，例如为所有内部系统启用 MFA，或定期执行钓鱼模拟以提高员工的安全意识。
- en: But many items also concern the teams. Tailwind Gears decides to bake security
    into the development process. This includes **secret scanning**, **dependency
    management** with Dependabot, and **code scanning**.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 但许多事项也与团队有关。Tailwind Gears 决定将安全性嵌入开发流程中。这包括**机密扫描**、使用 Dependabot 进行的**依赖管理**和**代码扫描**。
- en: The team will also work together with the IT department to securely harden the
    release pipeline by moving the build server to Kubernetes, implementing **security
    logging** in the entire pipeline, and using **OpenID Connect** and a secure **Key
    Vault** for secret handling.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 团队还将与 IT 部门合作，通过将构建服务器迁移到 Kubernetes、在整个管道中实现**安全日志记录**、并使用**OpenID Connect**和安全的**密钥库**来处理机密信息，从而安全地加固发布管道。
- en: Everyone is looking forward to the next red team/blue team simulation in 3 months.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 大家都期待着三个月后的下一次红队/蓝队模拟。
- en: Summary
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you've learned how to secure your release pipeline and deployments
    by scanning containers and IaC, ensuring consistency of code and configuration,
    and security-hardening the complete pipeline.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经学习了如何通过扫描容器和 IaC、确保代码和配置的一致性、以及对整个管道进行安全加固来保护发布管道和部署。
- en: In the next chapter, we'll talk about the impact of your software architecture
    on your software delivery performance.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论软件架构对软件交付性能的影响。
- en: Further reading
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 延伸阅读
- en: 'These are the references from this chapter that you can also use to get more
    information on the topics:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: 'Kim G., Humble J., Debois P. & Willis J. (2016). *The DevOps Handbook: How
    to Create World-Class Agility, Reliability, and Security in Technology Organizations*
    (1st ed.). IT Revolution Press'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Forsgren N., Humble, J., & Kim, G. (2018). *Accelerate: The Science of Lean
    Software and DevOps: Building and Scaling High Performing Technology Organizations*
    (1st ed.) [E-book]. IT Revolution Press.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Oladimeji S., Kerner S. M. (2021). *SolarWinds hack explained: Everything you
    need to know*. [https://whatis.techtarget.com/feature/SolarWinds-hack-explained-Everything-you-need-to-know](https://whatis.techtarget.com/feature/SolarWinds-hack-explained-Everything-you-need-to-know)'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sudhakar Ramakrishna (2021). *New Findings From Our Investigation of SUNBURST*.
    [https://orangematter.solarwinds.com/2021/01/11/new-findings-from-our-investigation-of-sunburst/](https://orangematter.solarwinds.com/2021/01/11/new-findings-from-our-investigation-of-sunburst/)
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Crowdstrike blog (2021). *SUNSPOT: An Implant in the Build Process*. [https://www.crowdstrike.com/blog/sunspot-malware-technical-analysis/](https://www.crowdstrike.com/blog/sunspot-malware-technical-analysis/)'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eckels S., Smith J. & Ballenthin W. (2020). *SUNBURST Additional Technical Details*.
    [https://www.mandiant.com/resources/sunburst-additional-technical-details](https://www.mandiant.com/resources/sunburst-additional-technical-details)
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Souppaya M., Morello J., & Scarfone K. (2017). *Application Container Security
    Guide*: [https://doi.org/10.6028/NIST.SP.800-190](https://doi.org/10.6028/NIST.SP.800-190)'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'National Telecommunications and Information Administration (NTIA), *Software
    Bill of Materials*: [https://www.ntia.gov/sbom]( https://www.ntia.gov/sbom)'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Thomas Claburn (2018). *Check your repos... Crypto-coin-stealing code sneaks
    into fairly popular NPM lib (2m downloads per week)*: [https://www.theregister.com/2018/11/26/npm_repo_bitcoin_stealer/](https://www.theregister.com/2018/11/26/npm_repo_bitcoin_stealer/)'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Haymore A., Smart I., Gazdag V., Natesan D., & Fernick J. (2022). *10 real-world
    stories of how we''ve compromised CI/CD pipelines*: [https://research.nccgroup.com/2022/01/13/10-real-world-stories-of-how-weve-compromised-ci-cd-pipelines/](https://research.nccgroup.com/2022/01/13/10-real-world-stories-of-how-weve-compromised-ci-cd-pipelines/)'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rob Bos (2022). *Setup an internal GitHub Actions Marketplace*: [https://devopsjournal.io/blog/2021/10/14/GitHub-Actions-Internal-Marketplace.html](https://devopsjournal.io/blog/2021/10/14/GitHub-Actions-Internal-Marketplace.html)'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
