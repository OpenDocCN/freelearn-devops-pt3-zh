- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Putting It All Together with a Real-World Example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s take what we’ve learned in the previous chapters and apply this from start
    to finish.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say you are an employee at **DevOps Products Inc.** (**DPI**). You are
    responsible for using the toolchain by using Atlassian products and third-party
    products to optimize your development for the flagship product, DPI-Sync, which
    connects to Discord servers and sends messages. How would you begin?
  prefs: []
  type: TYPE_NORMAL
- en: 'To accomplish this, we are going to simulate this process by completing the
    following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an idea in **Jira Product** **Discovery** (**JPD**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting an idea to an epic in Jira
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a story in Jira
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a code change in Bitbucket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Committing changes in Bitbucket/Start Bitbucket Pipeline Build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing Snyk scanning through Bitbucket Pipelines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying the Bitbucket Pipelines build status in Compass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying Bitbucket Pipelines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Opsgenie alert for the Jira project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a bugfix branch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Committing a bugfix and watching the pipeline’s execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that more detailed explanations of these recipes can be found in the
    preceding chapters of this book. For now, let’s learn how to get this sample project
    going.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you’ll need to install and configure the following Atlassian
    products:'
  prefs: []
  type: TYPE_NORMAL
- en: JPD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jira
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitbucket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opsgenie
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sample code for this chapter can be found in the `Chapter13` folder of this
    book’s GitHub repository ([https://github.com/PacktPublishing/Atlassian-DevOps-Toolchain-Cookbook/tree/main/Chapter13](https://github.com/PacktPublishing/Atlassian-DevOps-Toolchain-Cookbook/tree/main/Chapter13)).
  prefs: []
  type: TYPE_NORMAL
- en: Creating an idea in JPD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll start the development process by deciding what to build. We can gather
    various inputs from our competitors, our customers, and other sources to generate
    ideas for new features and products to develop.
  prefs: []
  type: TYPE_NORMAL
- en: We will store our **idea** for a new feature in JPD.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our **JPD** project, we must work with the Jira administrator and the Jira
    project administrator to ensure that we have the appropriate role to create a
    JPD idea.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your project administrator can ensure access to create ideas by performing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Project settings** option from the sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.1 – Selecting Project settings](img/B21937_13_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – Selecting Project settings
  prefs: []
  type: TYPE_NORMAL
- en: 'From the **Project settings** sidebar options, expand **Features** and select
    **Create ideas**. The page that appears should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.2 – Create ideas](img/B21937_13_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – Create ideas
  prefs: []
  type: TYPE_NORMAL
- en: Enable **Allow contributors to create ideas** by switching the toggle on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that while enabled, contributors can create ideas but cannot edit them
    or delete them. For any idea, contributors can add comments, attachments, and
    insights.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ve already covered how to create ideas either by using the **Create** button
    or from within a view. Let’s review how to create a new idea by using the **Create**
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the blue **Create** button on the navigation bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A modal will appear that shows the standard fields needed for the idea. Fill
    in those fields and click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.3 – Create an idea](img/B21937_13_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.3 – Create an idea
  prefs: []
  type: TYPE_NORMAL
- en: The Jira admin can change what fields appear on the modal by creating forms.
    This may also include pre-filling the **Description** field by using a template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now have an idea that we can use to track desirability and customer sentiment
    by adding insights and other information. The next step is to create a Jira issue
    to track development work and link it to the original idea.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting an idea to an epic in Jira
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we’re starting to move from ideation to implementation. This
    will require us to move from JPD to Jira. Let’s see how the handoff is done.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we saw in the *Delivering ideas for development in Jira* recipe in [*Chapter
    2*](B21937_02.xhtml#_idTextAnchor038), before creating an **epic**, please verify
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: There is at least one Jira project available to contain the epic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The person creating the epic has the appropriate permissions to create the epic
    in the target project. This same person should be a member of the JPD project
    or a Jira admin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When both conditions are met, it’s easy to create an epic as a delivery ticket
    in JPD.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the *Delivering ideas for development in Jira* recipe in [*Chapter 2*](B21937_02.xhtml#_idTextAnchor038),
    you saw that you can create an epic from the following two locations:'
  prefs: []
  type: TYPE_NORMAL
- en: On the idea’s page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the **Idea** panel in a view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s learn how to create an epic from the **Idea** page so that we can familiarize
    ourselves with this process:'
  prefs: []
  type: TYPE_NORMAL
- en: On the **Idea** page, click on the **Delivery** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.4 – Selecting the Delivery tab on the Idea page](img/B21937_13_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.4 – Selecting the Delivery tab on the Idea page
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Delivery** tab will expand, giving you two options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new delivery ticket (epic)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a link to an existing delivery ticket
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Selecting **Create a delivery ticket** displays text areas for the project,
    including areas for specifying the **issue type** and **summary**. These fields
    are typically prefilled, as shown here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.5 – Create a delivery ticket](img/B21937_13_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.5 – Create a delivery ticket
  prefs: []
  type: TYPE_NORMAL
- en: Select **Project** and **Issue type** values and fill in the desired **Summary**
    before clicking **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now have an epic in Jira that captures the feature described by our idea
    in JPD.
  prefs: []
  type: TYPE_NORMAL
- en: Our development team cannot work on the entire scope of an epic in one go. Refining
    our epic by creating *stories* that can describe small bits of functionality that
    can be worked on to gradually accumulate the total functionality of our feature
    is the best way to move forward. So, let’s learn how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a story in Jira
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Jira, we can use epics as containers for the small individual pieces of functionality
    that are captured as stories. Our epic will refer to these smaller stories as
    its children.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create child stories directly from the epic.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to the previous recipe, we require Jira to be installed and configured
    so that the following conditions can be met:'
  prefs: []
  type: TYPE_NORMAL
- en: There is at least one Jira project available to contain the story and it is
    connected to the epic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The person creating the story has the appropriate permissions to create the
    epic and story in the target project. This same person should be a member of the
    Jira project or a Jira admin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When both conditions are met, it becomes easy to create the epic and any child
    stories.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can create a child story that links to the epic at two locations:'
  prefs: []
  type: TYPE_NORMAL
- en: On the page for the epic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the **Timeline** view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look at creating child stories from each location.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a child story from the epic page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Epics are generally too large for a single development team to handle in a single
    Sprint. As the saying goes, you eat an elephant one bite at a time.
  prefs: []
  type: TYPE_NORMAL
- en: In Jira, this is done by creating child stories. Let’s see how to do this from
    the epic page.
  prefs: []
  type: TYPE_NORMAL
- en: One of the ways to get to an epic page is to select the **Issues** page from
    the **Project** sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.6 – Selecting Issues from the Project sidebar](img/B21937_13_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.6 – Selecting Issues from the Project sidebar
  prefs: []
  type: TYPE_NORMAL
- en: Set the filters of interest to limit the search. When you see the epic, click
    on its **Key** or **Summary**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once on the epic page, click on the **Add a child** **issue** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.7 – Add a child issue](img/B21937_13_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.7 – Add a child issue
  prefs: []
  type: TYPE_NORMAL
- en: In the **Child issues** section, select the issue type (**Story** for user stories),
    fill in a summary in the **What needs to be done** area, and click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.8 – Creating a child issue](img/B21937_13_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.8 – Creating a child issue
  prefs: []
  type: TYPE_NORMAL
- en: The parent epic now has a story linked as a child.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a child story in the Timeline view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Timeline** view shows the issues of a project laid out against time to
    determine the overall progress of all the work that a project does. An epic may
    be placed in the timeline with an expected start and due date. Child stories can
    be created and planned for periods between an epic’s expected start and due date.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a child story of an epic, perform the following steps in the **Timeline**
    view of your Jira project:'
  prefs: []
  type: TYPE_NORMAL
- en: To get to the **Timeline** view, select **Timeline** in the **Project** sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.9 – Selecting Timeline](img/B21937_13_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.9 – Selecting Timeline
  prefs: []
  type: TYPE_NORMAL
- en: Hover over the epic until a plus sign (**+**) appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the issue type from the second dropdown and fill in the **What needs
    to be done?** area to populate the Summary. Press *Enter* when you’re finished.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.10 – Entering a child story in the Timeline view](img/B21937_13_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.10 – Entering a child story in the Timeline view
  prefs: []
  type: TYPE_NORMAL
- en: A child story will now appear below the parent epic.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a code change in Bitbucket
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we are ready to begin developing our story in Jira. Let’s say
    you’re on a Scrum team and the story was selected for the upcoming sprint or that
    capacity opened up on your Kanban team to move the story from the backlog. Regardless,
    it’s time to start development.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will have us move from Jira, where the story is planned and designed,
    to a Git-based tool, where we will create and store our implementation. This is
    where our **continuous integration and continuous Deployment** (**CI/CD**) pipeline
    will start.
  prefs: []
  type: TYPE_NORMAL
- en: While the instructions here apply to Jira connected to a Bitbucket repository,
    this will work for any Git-based server tool, such as GitHub or GitLab, as we
    saw in [*Chapter 4*](B21937_04.xhtml#_idTextAnchor072).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One thing we need to make sure we have for this recipe is a Bitbucket workspace
    that’s been created with a Bitbucket repository. This process was explained in
    [*Chapter 5*](B21937_05.xhtml#_idTextAnchor087). There, we set up Bitbucket by
    performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we created a Bitbucket workspace. If also desired, we created a project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we created a Bitbucket repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we’ve created our workspace and repository, we need to connect it
    to our Jira project. We learned how to connect our Jira project to a Bitbucket
    repository in [*Chapter 1*](B21937_01.xhtml#_idTextAnchor019). There, we performed
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we selected **Tool Chain** under **Project settings** as a Jira project
    administrator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we selected the **Build** section on the **Toolchain** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Toolchain** page, we clicked **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From here, we selected **Bitbucket** as the repository provider.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we selected the repository to add and clicked **Add repository**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are now ready to start development with a Jira project connected to a Bitbucket
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin development, we must create a branch in Git to place new or changed
    files. If our Git repository is connected to our Jira project, we can create the
    branch directly from Jira and the branch will be linked to the issue describing
    the context.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create this branch from the Jira story, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Look for the **Development** section of the Jira issue. This set of fields
    notes the branches, commits, and pull requests associated with the Jira issue.
    The following screenshot shows where we can find these **Development** fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.11 – Development information](img/B21937_13_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.11 – Development information
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a branch, click the **Create branch** link. You’ll be taken to a
    page that allows you to configure the branch of the repository, the type of branch,
    and the branch’s name. This can be seen in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.12 – Create branch](img/B21937_13_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.12 – Create branch
  prefs: []
  type: TYPE_NORMAL
- en: 'Click `git checkout` on your local repository copy, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.13 – Branch page on Bitbucket](img/B21937_13_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.13 – Branch page on Bitbucket
  prefs: []
  type: TYPE_NORMAL
- en: With that, you’ve used the Jira-Bitbucket integration to connect a Jira issue
    to a Bitbucket branch so that you can start development.
  prefs: []
  type: TYPE_NORMAL
- en: Committing changes in Bitbucket/Start Bitbucket Pipeline Build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the moment, we’re performing implementation in our development process. We
    make changes in our code and commit those changes in Bitbucket. Once we make a
    commit against a Bitbucket repository, we want Bitbucket Pipelines to start a
    CI build that includes any testing and security scans.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Place the code we have in the `Chapter13` folder of this book’s GitHub repository
    into the Bitbucket repository that you created for the previous recipe. This also
    includes copying the `bitbucket-pipelines.yml` file and making sure it is at the
    root level of your repository.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will be making changes directly on the Bitbucket UI, not remotely. Once
    we make a commit, the Bitbucket pipeline should execute. To put this process in
    motion, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: On the Bitbucket repository page, select **Source** from the repository sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.14 – Selecting source](img/B21937_13_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.14 – Selecting source
  prefs: []
  type: TYPE_NORMAL
- en: In the **Source** window, open the branch pulldown and select the branch you
    created in the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.15 – Selecting a branch](img/B21937_13_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.15 – Selecting a branch
  prefs: []
  type: TYPE_NORMAL
- en: Select the file you wish to edit. If the file is nested, select the folder first.
    In this case, we will edit `index.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.16 – Selecting a file to edit](img/B21937_13_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.16 – Selecting a file to edit
  prefs: []
  type: TYPE_NORMAL
- en: In the editor page for the `index.js` file, select **Edit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.17 – Selecting Edit](img/B21937_13_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.17 – Selecting Edit
  prefs: []
  type: TYPE_NORMAL
- en: Make your changes. When your changes are complete, select **Commit** at the
    bottom of the **Edit** page to add and track your changes in Git.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.18 – Commit](img/B21937_13_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.18 – Commit
  prefs: []
  type: TYPE_NORMAL
- en: In the modal, provide a commit message and select **Commit**. For the commit
    to be linked to Jira, the commit message must start with the issue ID of the relevant
    Jira issue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the commit occurs, Bitbucket Pipelines should execute, running through
    the test, scanning, and deployment steps found in `bitbucket-pipelines.yml`. You
    can view a deployment run and its progress by selecting **Pipelines** in the repository
    sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that our pipeline is working, let’s enhance it by integrating Snyk, which
    will perform security scanning and move our process more to **DevSecOps**.
  prefs: []
  type: TYPE_NORMAL
- en: Execute Snyk scanning through Bitbucket Pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Snyk is one of several security tools that can be tightly integrated with Bitbucket
    and Bitbucket Pipelines. This tight integration allows for a Snyk scan to be executed
    to look for security vulnerabilities as part of testing when it is a step in a
    Bitbucket pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s learn how to set up this integration.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Integration between Snyk and Bitbucket takes the following forms:'
  prefs: []
  type: TYPE_NORMAL
- en: Snyk is set up as a security provider in Bitbucket so that automated scanning
    can occur on the repository and its results appear in the **Security** section
    of the repository sidebar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Snyk pipes can execute Snyk scans as part of a Bitbucket Pipelines execution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look at setting this up.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Snyk as a security provider
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We’ll start by setting up Snyk as a security provider for Bitbucket. To do
    that, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Bitbucket repository, select **Security** from the repository sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.19 – Security](img/B21937_13_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.19 – Security
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t have a Snyk account, select **Install Snyk** and set up a Snyk
    account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A modal will appear, asking you to request access to the entire workspace. Select
    **Allow** to proceed with integrating Snyk with Bitbucket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.20 – Integrating Snyk with Bitbucket](img/B21937_13_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.20 – Integrating Snyk with Bitbucket
  prefs: []
  type: TYPE_NORMAL
- en: Snyk will then ask you to log in or create a new Snyk account. Signing up sets
    you up for a free trial that moves you to a free plan when the trial period is
    over. Press **Sign up or Log in** to create or enter your Snyk account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have set up your account and integrated it with Bitbucket Cloud, your
    repositories will have the following section (annotated) in the repository sidebar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.21 – Snyk security](img/B21937_13_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.21 – Snyk security
  prefs: []
  type: TYPE_NORMAL
- en: Importing repositories into Snyk and setting up Snyk projects will allow you
    to perform regular scans and receive notifications regarding any vulnerabilities
    that have been discovered. We also discussed running Snyk as part of the pipeline
    by using the Snyk Pipe. Let’s learn that’s done.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Snyk Pipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can add a step to perform security scans with Snyk in our `bitbucket-pipelines.yml`
    file. We originally covered this in [*Chapter 6*](B21937_06.xhtml#_idTextAnchor103);
    we are reinforcing the necessary steps here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `bitbucket-pipelines.yml` file so that you can edit it in the Bitbucket
    UI. Editing the file should reveal the Bitbucket Pipelines editor, as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.22 – Pipelines editor](img/B21937_13_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.22 – Pipelines editor
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code snippet as its own step in the `bitbucket-pipelines.yml`
    file. To get the Snyk token, go to the **API Token** section of **Account settings**
    for your Snyk account and save it as a secure repository variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Commit your changes to the `bitbucket-pipelines.yml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With that, Snyk scans have been set up as a step in Bitbucket Pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Now that Snyk has been configured, it’s easy to execute Snyk scans in our pipeline.
    Let’s look into the various methods for doing so.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we’ve configured Snyk with Bitbucket, let’s learn how to execute a
    Snyk scan:'
  prefs: []
  type: TYPE_NORMAL
- en: Because any commit will automatically execute the pipeline, place your step
    in a commonly used branch or the default setting so that a Snyk scan will execute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you know in which pipeline you placed the Snyk Pipe, you can execute that
    pipeline manually by selecting the branch, commit, or tag, selecting that pipeline,
    and clicking **Run**. This was explained in the *Manual execution* recipe in [*Chapter
    6*](B21937_06.xhtml#_idTextAnchor103).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we’ll consider various scenarios where if the tests pass, we move from
    CI to CD.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying Bitbucket Pipeline Build Status in Compass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Compass organizes development into components and displays the status of these
    components. Events that affect these components include builds and deployments.
    Compass can gather information from Jira and Bitbucket and present it in a single
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will make changes in Bitbucket and see their effects in Compass.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you haven’t already done so, you need to connect Bitbucket to Compass. Instructions
    for doing so can be found in the *Integrating Compass with Bitbucket Cloud* recipe
    in [*Chapter 11*](B21937_11.xhtml#_idTextAnchor214). Another way administrators
    can connect Bitbucket to Compass comes about when initially installing Compass.
    Let’s see what can be done at this time:'
  prefs: []
  type: TYPE_NORMAL
- en: Compass identifies if Bitbucket is part of the cloud organization. If it finds
    Bitbucket repositories, it will offer to map them as Compass components. Verify
    that Compass has found the desired Bitbucket project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.23 – Importing repositories as Compass components](img/B21937_13_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.23 – Importing repositories as Compass components
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you will have to allow Compass to connect with Bitbucket. To
    do so, click the **Grant** **access** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.24 – Authorizing Compass](img/B21937_13_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.24 – Authorizing Compass
  prefs: []
  type: TYPE_NORMAL
- en: Once authorization has been completed, you can view information about your Bitbucket
    repositories since they’ve been mapped as Compass components.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.25 – Compass components](img/B21937_13_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.25 – Compass components
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that our Bitbucket repositories have been mapped as Compass components,
    let’s see what happens in Compass when we make changes in Bitbucket. For this
    visualization, it may be beneficial to have Compass and Bitbucket on separate
    browser tabs or browser windows:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Compass** tab or window, set the component that corresponds to your
    Bitbucket repository. Click **Activity** to view recent activity for the component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.26 – Selecting Activity for a component](img/B21937_13_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.26 – Selecting Activity for a component
  prefs: []
  type: TYPE_NORMAL
- en: In the **Bitbucket** tab, make a change in the repository. Finalize this by
    clicking the **Commit** button in the editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the modal, enter a commit message and other required information. Click **Commit**
    to commit the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Bitbucket, go to the **Pipelines** view to confirm that a pipeline has been
    executed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.27 – Viewing pipeline executions](img/B21937_13_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.27 – Viewing pipeline executions
  prefs: []
  type: TYPE_NORMAL
- en: Go to the browser tab where Compass is running. On the **Activity** view of
    the component that’s been mapped to the Bitbucket repository, confirm that the
    deployment occurred.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.28 – Deployments seen in Compass](img/B21937_13_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.28 – Deployments seen in Compass
  prefs: []
  type: TYPE_NORMAL
- en: With that, we’ve confirmed that actions in Bitbucket will show up in Compass.
    This information includes deployments.
  prefs: []
  type: TYPE_NORMAL
- en: In our sample scenario, our development team will get the same notifications
    as operations on any alerts. Let’s see how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Opsgenie alert for the Jira project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Setting up Opsgenie teams* recipe in [*Chapter 12*](B21937_12.xhtml#_idTextAnchor240),
    we looked at setting up Opsgenie. This allows us to create teams and notification
    schedules that will react when an alert occurs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you didn’t connect your Jira project to Opsgenie in [*Chapter 12*](B21937_12.xhtml#_idTextAnchor240)
    or have created a new Jira project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In your project, select **Project settings** and then select **Toolchain**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Toolchain** page, expand the **Operate** section and select **+ Add**
    **on-call team**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.29 – Add on-call team](img/B21937_13_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.29 – Add on-call team
  prefs: []
  type: TYPE_NORMAL
- en: In the modal, type in the name of your team. As you type, the action will appear
    as a dropdown with the team name you enter. Select the **Create…** drop-down option
    that appears below. After the new team name is visible as a dropdown, as shown
    in the following screenshot, click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.30 – Add on-call team](img/B21937_13_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.30 – Add on-call team
  prefs: []
  type: TYPE_NORMAL
- en: Hover over the team you created. Click the more actions (**…**) icon and select
    **Open** **in Opsgenie**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.31 – Open in Opsgenie](img/B21937_13_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.31 – Open in Opsgenie
  prefs: []
  type: TYPE_NORMAL
- en: 'Opsgenie will open on the team page. Look at the **On-call** section and verify
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The routing rule points to an escalation policy. If it doesn’t, refer to the
    *Escalation policies and rules* recipe in [*Chapter 12*](B21937_12.xhtml#_idTextAnchor240)
    to create an escalation policy and set a routing rule. An example is shown in
    the following screenshot:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.32 – Routing rules and Escalation policies](img/B21937_13_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.32 – Routing rules and Escalation policies
  prefs: []
  type: TYPE_NORMAL
- en: 'A team member has been identified in **On-call schedules**. This is shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.33 – On-call schedules](img/B21937_13_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.33 – On-call schedules
  prefs: []
  type: TYPE_NORMAL
- en: If you have members on your team, and your team has an on-call schedule with
    team members identified and a routing rule that points to an escalation policy,
    you should be all set to receive alerts directed to your team. Let’s learn how
    to test this by creating an alert in Opsgenie.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to directly create an alert in Opsgenie and verify that notifications
    are sent to the team member on-call. Normally, Opsgenie receives alerts through
    integrations with **Jira Service Management** or DevOps monitoring tools. We are
    performing this test to verify our simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the alert, perform the following steps in Opsgenie:'
  prefs: []
  type: TYPE_NORMAL
- en: In Opsgenie, go to the **Alerts** item in the menu bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.34 – Alerts](img/B21937_13_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.34 – Alerts
  prefs: []
  type: TYPE_NORMAL
- en: Select **Create alert** on the **Alerts** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.35 – Create alert](img/B21937_13_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.35 – Create alert
  prefs: []
  type: TYPE_NORMAL
- en: In the modal, select **Default API** for **API integration** and search for
    your team in the **Responders** area. Once you have selected these options, fill
    in **Alert message** and click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.36 – Setting up and creating a new alert](img/B21937_13_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.36 – Setting up and creating a new alert
  prefs: []
  type: TYPE_NORMAL
- en: Verify that the alert has been created in Opsgenie.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.37 – Alert in Opsgenie](img/B21937_13_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.37 – Alert in Opsgenie
  prefs: []
  type: TYPE_NORMAL
- en: You can also go to the email tied to the team member who’s on-call and verify
    that an email notification has been sent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.38 – Alert email notification](img/B21937_13_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.38 – Alert email notification
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, developers can receive notifications about incidents as well
    as from operations people, allowing developers and operations to work together
    on production problems. If the root cause is found to be a bug, developers can
    add fixes by creating bugfix branches for development. We’ll see how that process
    may occur in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a bugfix branch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A problem has come up! QA has discovered a bug in the new release. They wrote
    a bug in Jira that has been assigned to you. What you have to do is create a branch
    in Bitbucket that will contain the solution and connect it to the Jira issue.
  prefs: []
  type: TYPE_NORMAL
- en: We will simulate the preceding scenario in this recipe. The first thing you
    must do is create the bug in Jira.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our first stop is to use Jira to create the bug. To do this, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Create** button at the top of the Jira screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the modal that appears, fill in mandatory fields such as **Summary** and
    make sure the **Project** and **Issue type** (**Bug**) fields are correct. Click
    **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your new bug should appear in the project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.39 – New Bug](img/B21937_13_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.39 – New Bug
  prefs: []
  type: TYPE_NORMAL
- en: With the bug created in Jira, it’s time to create the bugfix branch in Bitbucket.
    Let’s examine that further.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Continuing with the same Jira project tied to the Bitbucket repository provided
    in the *Creating a code change in Bitbucket* recipe, we can easily create our
    bugfix Bitbucket branch by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In our Jira bug, go to the **Development** section and select **Create branch**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.40 – Create branch](img/B21937_13_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.40 – Create branch
  prefs: []
  type: TYPE_NORMAL
- en: 'A page in Bitbucket will appear as a new browser tab or window. It will have
    the following information filled in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The branch name prefilled with the ID of the Jira issue
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The parent branch
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The type of branch
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The repository name
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure this information is correct and click **Create**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.41 – Create branch](img/B21937_13_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.41 – Create branch
  prefs: []
  type: TYPE_NORMAL
- en: The branch should appear in the **Branches** view of your repository, with available
    actions to check out onto a local environment and an area to **View source**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.42 – Viewing the branch](img/B21937_13_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.42 – Viewing the branch
  prefs: []
  type: TYPE_NORMAL
- en: With a branch created, we can begin development. Let’s take a closer look at
    this process.
  prefs: []
  type: TYPE_NORMAL
- en: Committing a bugfix and watching the pipeline’s execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have been diligently troubleshooting for the root cause of our bug and we
    have developed a fix. What happens when we commit that fix to the repository?
    We want testing and scanning to occur to ensure high-quality code.
  prefs: []
  type: TYPE_NORMAL
- en: This requires that Bitbucket Pipelines is ready to execute when the commit occurs.
    Let’s learn how to make that possible.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisites for this recipe are identical to those for the *Committing
    changes in Bitbucket/Start Bitbucket Pipeline Build* recipe – that is, we need
    to make sure there is a `bitbucket-pipelines.yml` file in our repository and that
    it is at the root level of our repository’s directory structure.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just as with the *Committing changes in Bitbucket/Start Bitbucket Pipeline
    Build* recipe, we are going to observe the pipeline execute by performing the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In our bugfix branch, we must make a change in our file. We can commit our change
    by clicking **Commit** in our editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the modal, enter a value in the **Commit message** field. To have the commit
    recorded in our Jira issue, the message needs to start with the ID of our Jira
    issue. Make the necessary changes and click **Commit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Pipelines** view. The pipeline should be executing based on the
    most recent commit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.43 – The Pipelines view](img/B21937_13_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.43 – The Pipelines view
  prefs: []
  type: TYPE_NORMAL
- en: Click on the line corresponding to the pipeline’s execution to see the pipeline
    execution details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.44 – Pipeline execution details](img/B21937_13_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.44 – Pipeline execution details
  prefs: []
  type: TYPE_NORMAL
- en: With that, we’ve learned how to execute a pipeline based on a commit from a
    bugfix branch.
  prefs: []
  type: TYPE_NORMAL
