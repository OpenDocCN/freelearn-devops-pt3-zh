- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How Not to Get Confused about Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers anti-patterns related to securing your Salesforce org. We’ll
    begin by examining a key anti-pattern around the shared security model that is
    integral to Salesforce. Then, we will look at anti-patterns that can occur when
    you mistake other things for security. We will continue by looking at how not
    to make a mess of your sharing model and once again finish up with a review of
    the key takeaways. As Salesforce continues to integrate AI technologies, new security
    considerations are emerging. This chapter will also touch on how AI impacts the
    security landscape within Salesforce.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The *Shared Belongs to Salesforce* anti-pattern and how people get the shared
    responsibility model wrong
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How the *Compliant Is Secure* anti-pattern lulls you into a false sense of security
    and what you can do about it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Declarative Is Always Safe* anti-pattern and why you can’t rely on declarative
    features to always be secure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spaghetti Sharing Model* anti-pattern – why it is deceptively easy to get
    into an overcomplicated sharing model on Salesforce and how you can prevent it
    from happening to your org
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After completing this chapter, you will have a good idea of how to avoid common
    security anti-patterns on Salesforce and what steps you can take to implement
    better security practices on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Getting confused about shared responsibility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Almost all SaaS and PaaS platforms use a security model called shared responsibility.
    That is to say, the vendor takes responsibility for certain parts of the security
    architecture and other parts remain the responsibility of the customer. In this
    section, we will see how misunderstanding this model can lead to issues in Salesforce.
  prefs: []
  type: TYPE_NORMAL
- en: Shared Belongs to Salesforce
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The Shared Belongs to Salesforce anti-pattern* *holds that security on the
    Salesforce platform is always the primary responsibility* *of Salesforce.*'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SmallCo is a provider of specialty lenses for optical instruments. They sell
    globally and have recently adopted Salesforce Sales Cloud, Order Management, and
    B2B Commerce to drive electronic commerce directly to the business instead of
    selling exclusively via distributors.
  prefs: []
  type: TYPE_NORMAL
- en: When they did their implementation, the Salesforce platform went through a security
    review with James, the dedicated security professional that SmallCo has on staff.
    He evaluated the platform as a whole and was satisfied that the Salesforce platform,
    including how Salesforce secures their data centers, platform, and web application,
    met all the standards that SmallCo would expect.
  prefs: []
  type: TYPE_NORMAL
- en: James evaluates the shared responsibility model that Salesforce uses for security
    and determines that for the initial project, there shouldn’t be any need for additional
    security controls from SmallCo’s side. Salesforce will ensure security adequately
    without additional work required by SmallCo.
  prefs: []
  type: TYPE_NORMAL
- en: After a period of successful running, SmallCo wants to extend the digital experience
    and online community adjacent to their web store and also bring in a much larger
    number of customers onto the web store itself. Mika, a Salesforce Product Owner
    at SmallCo, is given the task of running this extension project.
  prefs: []
  type: TYPE_NORMAL
- en: Because of the limited budget, Mika agrees with the implementation partner that
    they will extend a lot of functionality to anonymous users so that many tasks
    can be performed without a login. That way, SmallCo can opt for a relatively small
    login-based license SKU.
  prefs: []
  type: TYPE_NORMAL
- en: The system goes live without issue and, as hoped, user numbers go up by more
    than a factor of 10. Mika and the team celebrate and, after completing the last
    outstanding minor improvements, start gearing up for the next project.
  prefs: []
  type: TYPE_NORMAL
- en: Just then, Mika receives a security advisory from a Salesforce consultancy that
    helped with SmallCo’s original Salesforce implementation. They point out that
    a number of new vulnerabilities have been found in Salesforce APIs used within
    digital experiences. These potentially allow serious exploits if there is a too-open
    model toward external users.
  prefs: []
  type: TYPE_NORMAL
- en: Mika is initially worried but remembers the conversation he had with James about
    Salesforce security prior to starting his new project. APIs sound like a core
    platform feature and therefore something Salesforce will take care of. The project
    is closed and doing anything new would require finding a new budget, which is
    difficult. He, therefore, decides to ignore the warning.
  prefs: []
  type: TYPE_NORMAL
- en: Three weeks later, an email arrives in an internal SmallCo inbox. It contains
    a data dump with all of SmallCo’s proprietary product information and lists of
    customers and orders. The data dump comes with a ransom demand to be paid in cryptocurrency
    to a specified address. Otherwise, the data will be made public.
  prefs: []
  type: TYPE_NORMAL
- en: The situation quickly escalates and external consultants are brought in to help
    manage the situation. They quickly discover that some very permissive configurations
    have been made to help the process of making functionality available to external
    users. These are likely the source of the breach and are also the cause of the
    security advisory Mika received from the other partner.
  prefs: []
  type: TYPE_NORMAL
- en: SmallCo is very disappointed that Salesforce would leave such a glaring security
    hole open and raise it with their account manager, who instead points the finger
    back at the configuration SmallCo has made. SmallCo finally decides that the only
    thing to do is to pay the ransom and plug the gap.
  prefs: []
  type: TYPE_NORMAL
- en: The external consultants facilitate both of these actions and the external configuration
    is locked down. SmallCo has to change their license package, but at this point,
    it has become a small price to pay to avoid a recurrence of the recent events.
  prefs: []
  type: TYPE_NORMAL
- en: On the suggestion of the external consultants, SmallCo sets up a process and
    some software to continuously monitor the security of their Salesforce environment.
    In addition, Salesforce-related personnel and James from security receive a number
    of education sessions on the Salesforce security model. Mika breathes a sigh of
    relief and gets ready for the next project.
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Shared Belongs to Salesforce anti-pattern is fundamentally about who is
    responsible for maintaining system and platform security. When you’re dealing
    with cloud systems, there is always a level of shared responsibility in play.
    That means the system or platform provider will maintain some parts of the security
    and you are responsible for others.
  prefs: []
  type: TYPE_NORMAL
- en: '![img](img/B30991_03_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Shared responsibility model
  prefs: []
  type: TYPE_NORMAL
- en: In Salesforce terms, Salesforce maintains infrastructure and platform security
    and helps you a lot with application-layer security. Salesforce Shield, including
    Platform Encryption, Event Monitoring, and Field Audit Trail, provides additional
    layers of security but requires proper configuration and management by the customer.
    However, when you configure or code something yourself, the responsibility for
    its security is ultimately on you. The now mandatory multi-factor authentication
    requirement shifts further security responsibility to customers, who must ensure
    proper implementation and user adoption. Finally, Einstein’s features introduce
    new considerations to the shared responsibility model, particularly around data
    usage, model training, and prediction explanations. While I’m discussing it in
    the context of Salesforce, it is relevant to all SaaS and PaaS providers, although
    the specific boundaries defining the shared responsibility will differ.
  prefs: []
  type: TYPE_NORMAL
- en: It is, however, very easy to get confused about this boundary and that leads
    to this anti-pattern. The problem that the Shared Belongs to Salesforce anti-pattern
    seeks to solve is the general security problem. That is to say, *“How can we keep
    our system secure?”* As we will see in the next section, it proposes to solve
    the problem by assuming that everything, or at least as much as possible, is the
    software provider’s problem, even when it isn’t.
  prefs: []
  type: TYPE_NORMAL
- en: Proposed solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Shared Belongs to Salesforce proposes to solve the problem of system security
    by assuming that Salesforce as a world-leading software provider has already thought
    of all the issues and therefore will keep the platform secure. That way, you can
    safely ignore security as an aspect of your solution and move forward with the
    real work of getting configurations done.
  prefs: []
  type: TYPE_NORMAL
- en: It effectively means that you don’t seriously engage with the shared responsibility
    model, although there are gradations of this. Most organizations, for example,
    will accept that they have a responsibility for the user permissions that they
    give the users who access the system.
  prefs: []
  type: TYPE_NORMAL
- en: However, this might extend to how you configure your sharing model; who you
    give access to APIs or custom-coded classes or who is allowed to run reports is
    much murkier. When it gets murky, the adopters of this anti-pattern make the simplifying
    choice that they don’t have to bother with the complexities because Salesforce
    will already have thought about it. That, unfortunately, is not and cannot always
    be true.
  prefs: []
  type: TYPE_NORMAL
- en: 'This anti-pattern is attractive for a number of reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: You don’t have to engage seriously with complex security issues, which means
    you don’t need to hire or develop specialist skills
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It reduces your internal effort when doing work on Salesforce
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It gives you a story to communicate to stakeholders that you are in good hands
    and don’t have to worry about security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It gives you someone to blame or hold responsible should things go wrong
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While you can easily understand why people might be inclined to make their own
    lives easier by adopting this anti-pattern, the results are not generally optimal.
  prefs: []
  type: TYPE_NORMAL
- en: Results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Humans tend to seek to reduce cognitive load by making simplifications and taking
    shortcuts. Therefore, the Shared Belongs to Salesforce anti-pattern is a naturally
    occurring phenomenon and it takes active security awareness to counter it.
  prefs: []
  type: TYPE_NORMAL
- en: It’s, therefore, not surprising that the first and most serious result of this
    anti-pattern is a reinforcement of low security awareness within the organization.
    If you aren’t aware of security issues, it is just a matter of time before something
    happens. This anti-pattern sets you up for something bad to happen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other typical negative results include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Giving everyone from end users to senior management a false sense of security
    about their Salesforce system, leading to even more serious fallout when an incident
    occurs and a missing understanding that you actually have to do something, rather
    than Salesforce just fixing it for you.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not keeping up with the evolving security landscape on the Salesforce platform.
    This includes not just ignoring new security advisories, as in our example, but
    also not looking into new security updates or features that would improve your
    security stance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ultimately, the anti-pattern leads to an increased organization risk profile
    that would be intolerable to most senior managers, had they fully understood it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s worth noting that you can run with this anti-pattern for years and years
    without discovering the negative consequences. It’s only when a security incident
    that has substantial enough consequences to get senior management’s attention
    occurs and is discovered that you really have to confront this anti-pattern.
  prefs: []
  type: TYPE_NORMAL
- en: It can, therefore, be a bit of a thankless task to point out that this anti-pattern
    is occurring and you may not get anywhere initially. There are, nonetheless, things
    that should be done, as we’ll discuss in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The solutions to this anti-pattern are fairly obvious to anyone who has spent
    at least a bit of time on information security. First and foremost, this is about
    raising awareness about the security issues that are in play and getting the internal
    acceptance that something needs to be done about Salesforce security in an active
    way rather than assuming the vendor will take care of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the main points include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Engaging actively with the shared responsibility model, getting a clear understanding
    of where the boundaries are, how to ensure your own parts are secure, and how
    to continuously remain vigilant about the parts that you aren’t directly responsible
    for but that still directly affect you.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Investing in the required skills to perform your parts of the security task
    both initially and on an ongoing basis. You can build this internally or use consultants;
    however you do it, the responsibility is on you to get it done.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leveraging modern DevOps practices with Salesforce DX or third-party tools to
    implement version control and CI/CD practices, enhancing security through consistent
    and auditable deployment processes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assessing new risks whenever you extend your solution in significant ways. This
    does not just mean when you are adding new modules. Major extensions to existing
    functionality can also lead to new security threats being introduced.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shifting the company’s mindset. Fundamentally, you need to shift the mindset
    of your organization to one where security is seen as fundamental to organizational
    resilience and growth. That may be beyond what most of us as architects can accomplish.
    However, pushing where we can in our sphere of influence is also helpful.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Considering the principle of least privilege, which is crucial for preventing
    security vulnerabilities by ensuring that users and processes have only the minimum
    access rights necessary to perform their tasks. This approach limits the potential
    damage from compromised accounts or malicious insiders, reduces the attack surface,
    simplifies auditing and compliance, and helps contain the spread of malware. By
    avoiding overprivileged accounts and unnecessary permissions, organizations can
    significantly mitigate risks associated with data breaches, unauthorized access,
    and privilege escalation attacks, ultimately strengthening their overall security
    posture and reducing the likelihood of falling victim to common security anti-patterns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuously monitoring your orgs to evaluate Salesforce security recommendations
    and critical updates. Consider implementing Event Monitoring to track user activities,
    API usage, and other critical events. This helps in the early detection of potential
    security breaches or misuse.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have now completed the discussion of the first anti-pattern in this chapter
    and will move on to another take on the general security problem, Compliant Is
    Secure.
  prefs: []
  type: TYPE_NORMAL
- en: Mistaking other things for security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is a complex and multi-faceted domain. This complexity can be so profound
    in many cases that there arises a strong temptation to simplify it to something
    more manageable. In this section, we will see two examples of how this can occur
    and what the negative consequences can be.
  prefs: []
  type: TYPE_NORMAL
- en: Compliant Is Secure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Compliant Is Secure holds that security for an organization can be upheld
    by strict adherence to one or more specified* *compliance regimes.*'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Alexandra works as an architect for LifeCo, a major provider of medical devices
    for the continuous measurement of vital statistics. They sell devices across a
    number of global markets and as a consequence are subjected to a number of different
    regulatory regimes. It is fair to say that a big part of LifeCo’s culture is focused
    on meeting these regulatory requirements and maintaining compliance.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to IT security, LifeCo has also adopted a compliance-centric approach
    combining the ISO 27001, HIPAA, and GxP protocols in a comprehensive set of checks
    and controls that are documented thoroughly at the beginning of each project and
    audited subsequently on a yearly basis. While there are processes to maintain
    compliance throughout the year, LifeCo focuses most of its attention on the initial
    documentation and audit events.
  prefs: []
  type: TYPE_NORMAL
- en: LifeCo has adopted Salesforce for field sales and care programs, using the Sales,
    Service, and Health Cloud components. As part of the implementation, Alexandra
    works closely with stakeholders across the business from IT, security, legal,
    and the data protection office.
  prefs: []
  type: TYPE_NORMAL
- en: They perform a thorough evaluation of all the controls Salesforce has in place
    at both the platform level and the level of each individual cloud. They spend
    considerable time with Salesforce security representatives to understand the details
    of the security implementation, pushing hard to get real answers to sensitive
    questions.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, they require comprehensive checklists and documentation from the
    implementation partner to ensure that all configuration work meets the necessary
    standards. This adds considerable overhead during both implementation and testing,
    but LifeCo is adamant that Salesforce meets the same standards that they apply
    to all internal systems.
  prefs: []
  type: TYPE_NORMAL
- en: The system documentation is finally signed off as compliant after a long period
    of adjustment to meet the detailed requirements. Alexandra keeps working in the
    Salesforce space but mainly focuses on preparing requirements for new releases
    and updating technical standards unrelated to security.
  prefs: []
  type: TYPE_NORMAL
- en: Then, after nine months, the unthinkable happens. The CEO receives a phone call
    from a popular news site that asks what their response is to the fact that thousands
    of the company’s patients’ personal information has been dumped online on the
    dark web. There is no doubt that the data comes from LifeCo as it contains the
    company’s proprietary information about device usage.
  prefs: []
  type: TYPE_NORMAL
- en: The CEO gives a rushed response, but the damage is done. LifeCo suffers a major
    blow to its reputation and is battered in mainline news, social media, and the
    stock market. Alexandra takes a leading role in the investigation and cleanup
    after the incident.
  prefs: []
  type: TYPE_NORMAL
- en: The investigation is not entirely conclusive, but there is good circumstantial
    evidence pointing toward a disgruntled employee exporting a report file with personal
    information and uploading it online. There isn’t enough evidence to bring any
    formal charges, however.
  prefs: []
  type: TYPE_NORMAL
- en: The root cause analysis concludes that the incident occurred because a special
    procedure to give users reporting rights to patient data had been used to extend
    the privileges to a team of 50 people, many quite junior and relatively untrained
    in IT security or compliance. This had been done with the blessing of several
    senior managers to work around a number of management reporting issues in the
    system. By exporting and manually processing the data in Excel, the team was able
    to compensate for certain functional shortcomings in the Salesforce implementation.
  prefs: []
  type: TYPE_NORMAL
- en: The problem is remediated, and an investigation is carried out to find other
    similar cases where a process might have been used to circumvent good practice.
    At audit time, Salesforce passes the audit with no serious reservations. However,
    in Alexandra’s mind there still lingers a doubt that maybe they never really got
    to the bottom of the issue.
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might be tempted to think that the problem Compliant Is Secure seeks to
    resolve is the same as for Shared Belongs to Salesforce. That is to say, what
    the anti-pattern seeks to resolve is the general security problem of how to keep
    data and systems secure. That is, however, subtly wrong.
  prefs: []
  type: TYPE_NORMAL
- en: While our last anti-pattern sought to solve security in general, Compliant Is
    Secure sidesteps the problem of actually being secure with the practices required
    to demonstrate to certain external parties that you are secure. That is to say,
    the documentation and checklists become the point rather than the actual security
    practices they are meant to encourage.
  prefs: []
  type: TYPE_NORMAL
- en: This is similar to Shared Belongs to Salesforce in that we aim to reduce the
    complex, wicked problem of actually staying secure with the much simpler problem
    of ticking all the right boxes. The strategy of reducing cognitive load by simplifying
    to a set of well-understood, repeatable processes, as we’ll see in the next section,
    is quite attractive to certain kinds of organizations.
  prefs: []
  type: TYPE_NORMAL
- en: Proposed solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Compliant Is Secure proposes to substitute and thereby resolve the problem of
    keeping systems and data secure with the simpler problem of staying compliant
    with a set of clearly defined standards. That way, you can move forward in confidence
    that you have followed good practices and, therefore, are as secure as you are
    likely to get.
  prefs: []
  type: TYPE_NORMAL
- en: A good image to keep in mind for this anti-pattern is a checklist.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s be very clear, compliance is a great thing! Compliance with the standards
    that define good practice in your industry and in general is indeed crucial. This
    applies to information security, and it applies in general.
  prefs: []
  type: TYPE_NORMAL
- en: Compliance with standards can be an extremely good way to encourage good practice
    within your organization and embed it within its culture. What makes this scenario
    an anti-pattern is that compliance becomes the end goal, whereas the end goal
    should in fact be the awareness and improvement in practice that the compliance
    exercise is meant to encourage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Put in another way, for information security, you should aim to use compliance
    as a tool to become more secure and more security aware, not as a way to get security
    out of the way because you’ve ticked all the boxes. It is, however, not difficult
    to understand why it is attractive to organizations to focus principally on compliance:'
  prefs: []
  type: TYPE_NORMAL
- en: Compliance turns the fuzzy and wicked problem of information security into a
    manageable and governable one. Managers tend to like problems that are easy to
    understand and clearly measurable. Compliance is easy to understand; security
    is not.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The processes needed to establish and maintain compliance tend to fit well with
    existing processes and skills, especially in companies that operate in regulated
    industries such as life sciences or the defense sector.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When things go wrong, you have clear and unambiguous documentation that you
    have followed the rules. That helps both in terms of explaining incidents externally
    and protecting relevant stakeholders internally.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have to stay compliant anyway. For most large organizations, a certain level
    of compliance is mandatory and embedded in law or industry standards. Given that
    you have to be compliant, there is a clear temptation to make that the end goal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The results you get from falling into this anti-pattern, however, are frequently
    problematic, as we’ll discuss in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What you achieve with the Compliant Is Secure anti-pattern is, generally speaking,
    point-in-time compliance with a standard. You will be compliant at each audit
    point, and in between, people will follow the necessary processes that are required
    of them.
  prefs: []
  type: TYPE_NORMAL
- en: However, you have not instituted any deeper sense of the importance of security
    within the organization or given people the training and tools to engage meaningfully
    with it. That means that you will often find many workarounds like the one described
    in our example, where people do something that is technically compliant but completely
    circumvents the spirit of security that inspired the rules of the compliance standard.
  prefs: []
  type: TYPE_NORMAL
- en: 'You often see two patterns emerge in compliance-centric organizations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Drift and remediation** : In this pattern, you have ongoing drift away from
    the standards that have been implemented, because people see compliance as a point-in-time
    exercise. This is corrected periodically to bring the organization back into compliance
    for an audit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Structured circumvention** : In this pattern, you continuously follow the
    rules, but you have included within your compliance system certain ways of granting
    exceptions, which get exploited systematically to make the lives of workers within
    the organization easier in one way or another. This is the pattern we saw in the
    preceding example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fundamentally, with the Compliant Is Secure anti-pattern, your organization
    is missing the “why” of security. They are doing certain things to check the boxes,
    but do not engage with them beyond that exercise. That points toward the key interventions
    that will help with this pattern, which we’ll discuss next.
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a famous book by business author Simon Sinek called *Start with Why*
    . In it, Sinek posits that the most successful organizations, Apple being the
    canonical example, do not start with what products they are selling, or how they
    make them, but with a fundamental purpose expressed in an answer to why the company
    exists in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: While I won’t make any comments on the merits of this position relative to business
    in general, when it comes to information security, it is entirely correct. The
    reason why Compliant Is Secure is an anti-pattern is that it neglects the underlying
    “why” of information security.
  prefs: []
  type: TYPE_NORMAL
- en: The cure to this problem is, of course, to start from the answer to why keeping
    information secure not only is essential to avoid threats but actually enables
    the organization to remain resilient and grow in a safe manner. Then, you can
    move on to the how and what of compliance regimes and specific controls.
  prefs: []
  type: TYPE_NORMAL
- en: 'That is a big task for most Salesforce professionals to take on. Helpfully,
    there are smaller, more practical things we can also do to help:'
  prefs: []
  type: TYPE_NORMAL
- en: Continuously make other stakeholders aware that ticking the boxes does not mean
    the organization will remain secure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Train people in Salesforce security and the threats that can occur despite compliance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find champions to take on security awareness on an ongoing basis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advocate for ongoing monitoring of the Salesforce org on the security level
    by these trained and motivated people.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the technical level, regularly use Salesforce’s Security Health Check or
    third-party tools to identify and address potential vulnerabilities in your org’s
    security settings. Consider using Salesforce’s Privacy Center to manage consent,
    track data subject requests, and maintain compliance with privacy regulations
    such as GDPR and CCPA. Tool support can sometimes help keep people engaged in
    ongoing activities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spread knowledge and awareness throughout the organization by regularly bringing
    up the topic at meetings and dedicated sessions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, also remember that compliance is important, and you should do your
    part to stay compliant. For instance, Salesforce’s compliance with ISO 27001 for
    information security and 27701 for privacy management demonstrates their commitment
    to data protection, but organizations must still ensure their own processes align
    with these standards. Having now considered a very general security anti-pattern,
    we will once again zoom in on a specific Salesforce security anti-pattern, Declarative
    Is Always Safe.
  prefs: []
  type: TYPE_NORMAL
- en: Declarative Is Always Safe
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Falling into the Declarative Is* *Always Safe anti-pattern implies having
    an over-optimistic attitude toward the security of declarative* *customization
    features.*'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Rakesh is the technical lead for Salesforce at BigCo. BigCo is a long-term user
    of Salesforce with a big footprint across half a dozen different clouds. They
    expanded usage massively during the COVID pandemic to facilitate a number of processes
    being carried out remotely.
  prefs: []
  type: TYPE_NORMAL
- en: Rakesh and his team worked with several smaller partners on the creation of
    these processes. Because of the time pressure involved, they built the processes
    using a combination of out-of-the-box features and flows, leaving out any complex
    requirements for a later time. The flow-based approach was recommended by the
    architects from both a speed of development and a security perspective.
  prefs: []
  type: TYPE_NORMAL
- en: With the cooperation of the business, this approach proved adequate as a stopgap
    measure and BigCo managed the transition to remote work relatively seamlessly,
    partly due to this work. After the initial release, Rakesh and the team kept working
    on improving and elaborating the new flows, and some have evolved into complex,
    multi-faceted business applications with powerful features to support the business.
  prefs: []
  type: TYPE_NORMAL
- en: This includes the ability to carry out mass updates, creations, and deletions;
    to call other systems via APIs; and even to grant new security features to employees
    when they take on new roles or responsibilities in the business. There are also
    administrative flows that superusers can use to manage the backend functions.
  prefs: []
  type: TYPE_NORMAL
- en: Functionally, this works well for the business, but on several occasions, mistakes
    by users lead to accidental record deletion. When a particularly unlucky superuser
    accidentally deletes a large number of opportunities using an administrative flow,
    the CTO decides to have a partner review the flows as they’re worried about any
    potential wider issues.
  prefs: []
  type: TYPE_NORMAL
- en: The partner does a review of the flows and comes back with a long list of unsafe
    practices used in the flows. In particular, the flows give system administrator-level
    access to a very large number of users who do not have the requisite training
    to use them. That presents not only an issue of accidental deletion, as has already
    happened, but also a real security issue. That includes threats from both malicious
    employees and external threat agents as some of the flows are theoretically triggerable
    via API updates.
  prefs: []
  type: TYPE_NORMAL
- en: The harm from the incident is easily remedied as BigCo has an advanced backup
    solution in place, but the remediation of the flows takes much longer. For all
    future development, Rakesh works with the external partner to create a clear set
    of security guidelines to be followed when creating flows.
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The problem that Declarative Is Always Safe seeks to solve is that of secure
    development or customization. That is to say, how do we keep our code and customizations
    from creating vulnerabilities that can be exploited to get at our data and systems?
  prefs: []
  type: TYPE_NORMAL
- en: It isn’t surprising that there is a tendency to consider low-code or no-code
    approaches as a cure for security headaches. Many classic and well-advertised
    vulnerabilities have been down to obscure coding errors, so avoiding code seems
    like a good idea if you want to be more secure.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, low-code/no-code approaches are a relatively recent phenomenon, so
    whether this will hold good in practice is still up in the air to some extent.
    The reasoning is generally sound, however, as vendors such as Salesforce will
    spend much more time securing the low-code components they make available than
    you can spend on your own code.
  prefs: []
  type: TYPE_NORMAL
- en: However, as we will see when we cover the details of the proposed solution next,
    this reasoning is not airtight.
  prefs: []
  type: TYPE_NORMAL
- en: Proposed solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The proposed solution to the problem of secure development and configuration
    that Declarative Is Always Safe proposes is to circumvent the problem by only
    using declarative features, for example, custom objects, page layouts, flows,
    and even Omnistudio, which are assumed to be secure by default. That way, we do
    not have to spend much time thinking about security and we can get our features
    created quicker.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is clearly an attractive proposition to many different stakeholders, for
    the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: It is partially true. Low-code approaches are less likely than code-based ones
    to contain security gaps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It simplifies development and configuration by putting clear bounds around the
    art of the possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides the technical team with a good way to push back on business requirements
    that are too complex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It speeds up the delivery of features by leveraging pre-built functionality
    that can be adapted to your particular business needs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A focus on declarative features, then, brings many benefits with it and is usually
    considered a good practice within the Salesforce community. However, what can
    make this focus – if taken too far – a security anti-pattern is the blindness
    to the very real threats that can be present, even in declarative solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The key negative result of the Declarative Is Always Safe anti-pattern, then,
    is blindness to security threats that may be present in your solution and a lack
    of awareness that such threats might even be there. This can lead to serious negative
    consequences, as in our example. The problem, however, is only getting worse day
    by day as Salesforce brings out new declarative features.
  prefs: []
  type: TYPE_NORMAL
- en: It is clear from the way features are being released on the Salesforce platform,
    that Salesforce wants low-code tools such as flows and Omnistudio to be the go-to
    solutioning toolkits for customization on the platform. However, the more powerful
    these tools become, the more likely you are to be able to do something that will
    result in a security issue.
  prefs: []
  type: TYPE_NORMAL
- en: Equally, External Services, while declarative, can introduce security risks
    if not properly configured, especially when dealing with external endpoints and
    data. This also applies to the increasingly prominent AI solutions. For instance,
    when using Einstein Prediction Builder, you need to ensure that sensitive fields
    are not inadvertently included in prediction models and that model access is appropriately
    restricted. Custom metadata types, while declarative, can store sensitive configuration
    data and should be secured with appropriate access controls.
  prefs: []
  type: TYPE_NORMAL
- en: 'Flows are, however, the biggest potential risk area. Let us, therefore, consider
    some security problems that can happen with flows:'
  prefs: []
  type: TYPE_NORMAL
- en: General permissions such as Run Flows or the Flow User license can give a very
    large number of users permissions to run all flows in the org, leading to issues
    such as those in our example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If users have access to the All_Flows list view, they can then run any flow
    in the org from the UI. This includes external users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flow execution contexts are complex to understand, and it is easy to end up
    running a flow in system mode by mistake, leading to a potential escalation of
    user rights.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client-side validation in flows can accidentally leak information in some cases
    by including data in the response.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component visibility can leak information as the component is still included
    in the HTTP response.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apex actions with wide-ranging effects may be called from flows without a clear
    understanding of the security implications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using screen flows in Experience Cloud sites, ensure proper access controls
    are in place to prevent unauthorized access to sensitive data or operations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I recommend the article *Understanding Salesforce Flows and Common Security
    Risks* , available at [https://appomni.com/resources/aolabs/understanding-salesforce-flows-and-common-security-risks/](https://appomni.com/resources/aolabs/understanding-salesforce-flows-and-common-security-risks/)
    , as a good introduction to some common flow issues.
  prefs: []
  type: TYPE_NORMAL
- en: However, the wider point is that there are real security issues that happen
    with flows, Omnistudio, and even with simpler declarative features. New flow features,
    such as Flow Orchestration, introduce additional complexity and potential security
    risks if not properly configured. Therefore, we cannot rely on them to be safe
    by default but have to take due precautions, which we’ll discuss in our next section.
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first and most important piece of advice for avoiding this anti-pattern
    is to treat your declarative solutions every bit as seriously as you would your
    code-based ones. Tools such as flows and Omnistudio are increasingly as powerful
    as Apex and solve complex business requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'That means that for solutions based on these tools, you should follow a software
    development process that is fit for purpose in relation to the complexity and
    importance of the solution in question. Specifically, when it comes to security,
    you should keep the following things in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Standards and guidelines for declarative solutions should be in place as they
    would be if you were writing code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make risk and threat assessments upfront for declarative solutions that deal
    with sensitive data or deploy a lot of power
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Train developers and configurators to understand the issues and create general
    awareness about what relying on declarative tools does and does not accomplish
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep an eye on the long-term trend toward declarative tools and update your
    guidelines as needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitor the external environment for issues or exploits related to declarative
    functionality on Salesforce
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With that said, we will finish our discussion of security-related anti-patterns
    by taking a look at how you can really muck up your sharing model in Salesforce.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing isn’t always caring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Salesforce has one of the most powerful and complicated sharing architectures
    known to man. This is both a blessing and a curse. In this section, however, we
    will focus on showing how it can go wrong and what to do to prevent it.
  prefs: []
  type: TYPE_NORMAL
- en: Spaghetti Sharing Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Spaghetti Sharing Model does to the security of a Salesforce org what spaghetti
    code does to the maintainability of* *an application.*'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: GlobalCo is a conglomerate with numerous different business lines selling products
    across a number of B2B verticals. Most of GlobalCo’s organization is run within
    the business units, but IT has become a strong global function, as it has made
    it possible to collaborate effectively across business units using simple tools
    such as Slack for collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: A few years back, GlobalCo adopted Salesforce Sales Cloud and Service Cloud
    as their corporate CRM. Huan was the lead architect on that project and now sits
    in the global Salesforce Center of Excellence. While some subsidiaries still use
    other CRMs operationally, all basic data about customer transactions must make
    its way to Salesforce. To encourage the standardization of processes and data,
    GlobalCo adopted a strong single-org strategy for its Salesforce environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, while GlobalCo would like to be able to share as much data as
    possible globally, a number of regulations prevent them from going as far as they
    would like. There are a number of problems:'
  prefs: []
  type: TYPE_NORMAL
- en: Some countries require their data to be isolated from others, creating country
    data silos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Competition law in a variety of jurisdictions also prevents some subsidiaries
    from sharing data with specific other subsidiaries to prevent collusion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Salespeople in some jurisdictions are somewhat paranoid about who can see their
    opportunities for fear of someone else stealing them, leading to a number of extra
    protections being put in place
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, executives in certain business units are used to keeping sensitive
    opportunities and customer support cases secret and only sharing among a select
    few, which has also been at least partially accommodated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After go-live, there have been a lot of complaints that the structure GlobalCo
    put in place to meet these requirements was excessively rigid. There is a call
    for a number of exceptions from at least half a dozen countries.
  prefs: []
  type: TYPE_NORMAL
- en: '![img](img/B30991_03_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – Sharing mechanisms
  prefs: []
  type: TYPE_NORMAL
- en: Huan leads the team to investigate the requirements. Initially, he thinks the
    problem is solvable by making minor adjustments to the organizational hierarchy
    and enterprise territory management. This, however, proves too simplistic and
    so he devises a number of additional public groups to capture more refinements
    to the model.
  prefs: []
  type: TYPE_NORMAL
- en: Users, however, are still complaining, so Huan gets creative with the use of
    Account and Opportunity teams. However, because the process needed would be too
    onerous to manage manually, the team ends up implementing a number of automations
    to automatically add team members to Account and Opportunity teams based on certain
    criteria.
  prefs: []
  type: TYPE_NORMAL
- en: Even that, however, turns out to not be able to capture the full extent of the
    business requirements for when certain records should and shouldn’t be shared
    between specified business units and countries. Huan specifies an Apex-based sharing
    mechanism and gives it to the development team to implement.
  prefs: []
  type: TYPE_NORMAL
- en: The complete adjustment to the sharing model goes live, globally, over a weekend.
    Smoke testing is fine, but everyone is holding their breath as the testing of
    the model is difficult and no one has been able to definitively say that all the
    important scenarios have been tested.
  prefs: []
  type: TYPE_NORMAL
- en: While there is no disaster, a steady trickle of access issues makes its way
    to the team over the week following go-live. There are a lot of cases, where either
    someone has access who shouldn’t have or someone lacks access they should have.
  prefs: []
  type: TYPE_NORMAL
- en: What’s much worse, however, is that the team is finding it nearly impossible
    to pinpoint the errors. There are just so many moving parts that figuring out
    what goes wrong in specific cases becomes too complex. Every time the team thinks
    they’ve fixes one issue, it seems another two appear as a consequence.
  prefs: []
  type: TYPE_NORMAL
- en: After several frustrating weeks of trying to resolve the problem, the change
    management board makes a decision to roll back the changes to the sharing model
    and find a set of manual workarounds until a more stable technical solution can
    be found.
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In classical software applications, there is a well-known concept called **spaghetti
    code** . It happens when programmers work without design practices or the necessary
    experience to implement a system. Instead, they just do one thing at a time in
    a way that works for now with no thought for the larger picture.
  prefs: []
  type: TYPE_NORMAL
- en: Over time, this leads to code that resembles a portion of spaghetti on a plate.
    Everything is tangled up with everything else, changes to one part of the system
    impact other parts in seemingly random ways, and even the original writers of
    the code don’t really understand what is going on.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, on Salesforce, we rarely see spaghetti code to this extent. It can
    occur, but in my experience, it is quite rare. What does occur frequently is the
    Spaghetti Sharing Model anti-pattern. That is, sharing models are so complicated
    that even their designers can’t reliably tell in a specific case why someone has
    or hasn’t got access to a given record.
  prefs: []
  type: TYPE_NORMAL
- en: The Spaghetti Sharing Model anti-pattern arises from an honest attempt to give
    the business what it wants in terms of record sharing. The problem is that for
    large, global organizations, the level of complexity experienced in this area
    is so large that it is nearly impossible to get right.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, we saw some of the reasons why:'
  prefs: []
  type: TYPE_NORMAL
- en: Privacy laws differ between countries and determine what can and cannot be shared
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Competition law can restrict visibility between subsidiaries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concerns about bonuses and commissions are extremely important to sales teams
    and can lead to serious concerns about data sharing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executives often want to keep certain data a secret for a variety of business
    reasons, while sharing other data that is less sensitive of the same type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are more scenarios than this concerning, for instance, the protection
    of sensitive health or financial data according to certain laws and standards
    or internal political factors within the organization that may impact sharing
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, if you find yourself in an organization with this kind of requirements
    setup for data sharing, you are in danger of ending up in the Spaghetti Sharing
    Model anti-pattern, simply by trying to accommodate the requirements you are given.
  prefs: []
  type: TYPE_NORMAL
- en: Proposed solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Spaghetti Sharing Model anti-pattern suggests that you address sharing requirements
    in an incremental, iterative way, seeking as closely as possible to meet the business
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'This seems eminently sensible because of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: It is exactly what we would do for most other types of requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It fits with the dominant agile approaches to software development that are
    used by most Salesforce implementation teams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can nearly always achieve your goal in the short term
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It takes a long time before the complexity reaches a level to make the process
    go off the rails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unfortunately, this process can break down in organizations of a certain size
    and complexity and results in the anti-pattern we are discussing, as we’ll see
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The results of the Spaghetti Sharing Model anti-pattern are a situation where
    some or more of the following characteristics are present:'
  prefs: []
  type: TYPE_NORMAL
- en: Records are shared with some users without anyone fully understanding why
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Record access is missing from some users without anyone fully understanding
    why
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pinpointing access issues is extremely difficult
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making changes to the sharing model is considered entirely off-limits due to
    complexity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes to sharing often lead to new issues that are difficult to understand
    and fix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is worth reflecting on why sharing is more prone to the Spaghetti Sharing
    Model anti-pattern than other configuration areas. The answer lies mostly in the
    vast number of mechanisms that are available to control sharing on Salesforce
    and their interactions. Depending on how you count, there are more than 20 different
    ways of extending the sharing of objects and records in Salesforce.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows a sampling of mechanisms that can be used to control
    sharing:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Mechanism** | **What it’s** **used for** |'
  prefs: []
  type: TYPE_TB
- en: '| Ownership | Access to the record owner, user, or queue |'
  prefs: []
  type: TYPE_TB
- en: '| Profile | Access (or not) to an object at the basic level |'
  prefs: []
  type: TYPE_TB
- en: '| Permission Set | Access (or not) to an object at the basic level |'
  prefs: []
  type: TYPE_TB
- en: '| Org-Wide Default (Internal) | Default internal sharing level |'
  prefs: []
  type: TYPE_TB
- en: '| Org-Wide Default (External) | Default external sharing level |'
  prefs: []
  type: TYPE_TB
- en: '| Role Hierarchy | Access to subordinates’ records |'
  prefs: []
  type: TYPE_TB
- en: '| Grant Access Using Hierarchies | Share (or not) with role hierarchy |'
  prefs: []
  type: TYPE_TB
- en: '| Public Groups | Share with a defined group of users |'
  prefs: []
  type: TYPE_TB
- en: '| Ownership-Based Sharing Rule | Share based on a configured rule based on
    record ownership |'
  prefs: []
  type: TYPE_TB
- en: '| Criteria-Based Sharing Rule | Share based on a configured rule based on record
    field values |'
  prefs: []
  type: TYPE_TB
- en: '| Guest User Sharing Rule | Special sharing with the guest user |'
  prefs: []
  type: TYPE_TB
- en: '| Account Teams | Share based on membership in an account team |'
  prefs: []
  type: TYPE_TB
- en: '| Opportunity Teams | Share based on membership in an opportunity team |'
  prefs: []
  type: TYPE_TB
- en: '| Case Teams | Share based on membership in a case team |'
  prefs: []
  type: TYPE_TB
- en: '| Manual Sharing | Share records manually |'
  prefs: []
  type: TYPE_TB
- en: '| Implicit Sharing | Automated sharing between parents and children for certain
    standard objects |'
  prefs: []
  type: TYPE_TB
- en: '| Territory Hierarchy | Share based on configured territories and territory
    membership |'
  prefs: []
  type: TYPE_TB
- en: '| External Account Hierarchy | Grant access based on account hierarchy |'
  prefs: []
  type: TYPE_TB
- en: '| Sharing Group | Share records owned by portal users |'
  prefs: []
  type: TYPE_TB
- en: '| Sharing Set | Share records with portal users based on matches between the
    Account or Contact field |'
  prefs: []
  type: TYPE_TB
- en: '| Manager Groups | Share records with the management chain |'
  prefs: []
  type: TYPE_TB
- en: '| Apex Sharing | Share programmatically |'
  prefs: []
  type: TYPE_TB
- en: '| Restriction Rule | Restrict access to specific types of records |'
  prefs: []
  type: TYPE_TB
- en: Table 3.1 – Salesforce sharing mechanisms
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, this vast number of mechanisms, if used injudiciously, can lead
    to the Spaghetti Sharing Model anti-pattern, simply because their interaction
    becomes opaque to a human-level intelligence.
  prefs: []
  type: TYPE_NORMAL
- en: Better solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we have seen, the Spaghetti Sharing Model anti-pattern can occur just from
    people doing their jobs and incrementally seeking to create value for the business
    by meeting their requirements. That means this anti-pattern can occur without
    anyone doing anything wrong or making a specifically wrong decision. Someone needs
    to step outside the day-to-day work in order to spot this issue prior to it occurring.
  prefs: []
  type: TYPE_NORMAL
- en: At the risk of provoking severe retaliation from agile fundamentalists, I will
    suggest that if you find yourself in an organization where there are highly complex
    sharing requirements, you need to stop, take a step back, and put in place an
    upfront design for the sharing architecture along with governance mechanisms to
    enforce it over time. For instance, you might introduce a principle that it is
    best to be parsimonious in using sharing mechanisms and make the adoption of new
    types of sharing subject to approval by an architecture review board or design
    authority.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes our presentation of security anti-patterns. We will now look
    at the key things to take away from the discussion.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing the takeaways
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will abstract a bit from the specific patterns and instead
    try to pull out the wider learning points you can use in your day-to-day work
    as a Salesforce architect or in preparing for the CTA Review Board exam.
  prefs: []
  type: TYPE_NORMAL
- en: 'When architecting Salesforce solutions, you should be mindful of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Security is not just a technical issue; the way you frame the problems and create
    awareness is even more important.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is easy to assume away complex security issues in various ways. While you
    may not be able to singlehandedly change this as an architect, you can be a part
    of raising awareness.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instituting sharing sessions and sending out relevant material is one good way
    that you can help make things better.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also ensure that security guidelines and practices on the technical
    level reflect the full threat picture.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not assume that something is Salesforce’s responsibility without good evidence.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not assume that because you are using a declarative feature, you cannot have
    a security gap.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find ways of monitoring the security stance of your Salesforce orgs on a frequent
    basis and act on the intelligence.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make security matters a recurring discussion in governance forums where you
    can influence the agenda.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t build sharing models incrementally unless your requirements are very simple.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instead, take the pain upfront and come up with a set of mechanisms that can
    work in your scenario.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regularly assess and update your understanding of the shared responsibility
    model as Salesforce introduces new features and services, especially AI-driven
    capabilities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement a continuous security monitoring strategy that includes automated
    tools and periodic manual reviews to stay ahead of evolving threats in your Salesforce
    environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop a comprehensive security training program for your Salesforce team that
    covers both declarative and programmatic development, emphasizing the potential
    risks in both areas.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establish a security-first culture within your Salesforce team by incorporating
    security considerations into your development life cycle, from requirements gathering
    to deployment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regularly audit and optimize your sharing model, using tools such as Salesforce
    Health Check and Optimizer, to prevent the gradual accumulation of unnecessary
    complexity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In preparing for the CTA Review Board exam, you should be mindful of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Security is embedded in a lot of areas, so even though it is a distinct domain,
    you should still cover security matters concisely where relevant in your solution
    run-through.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security is a complex area, so be as clear and concise as possible. It is very
    easy to get drawn into long discussions on security matters and you don’t have
    the time for that at a review board.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider including some comments on security when reviewing your governance
    model and potential risks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be parsimonious when picking security mechanisms. Having fewer mechanisms will
    make them easier to explain and make it less likely that you will have interactions
    that lead to unforeseen consequences.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilize permission set groups to organize and manage complex permission structures
    more efficiently, reducing the risk of overly complicated security models.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, don’t oversimplify or make assumptions that would point in the direction
    of not appreciating how things can go wrong in the security domain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing is particularly easy to get wrong, so be quite careful about designing
    exotic sharing solutions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t invent additional security requirements where it isn’t stated in the scenario.
    You can easily think yourself into additional implied requirements when reading
    many scenarios.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The one exception to this rule is dealing with privacy law, such as GDPR, if
    you have an org in a jurisdiction where it applies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When integrating with external systems, ensure proper API security measures,
    such as OAuth 2.0, IP restrictions, and regular token rotation, are followed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be prepared to discuss how you would approach security in a multi-cloud Salesforce
    implementation, considering the unique security challenges of each cloud.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practice explaining complex security concepts, such as the implications of AI
    on data security, in a clear and concise manner suitable for the time constraints
    of the review board.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be ready to explain how you would balance security requirements with other architectural
    concerns, such as performance and user experience, in a large-scale Salesforce
    implementation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have now covered the material for this chapter and are ready to proceed to
    the next one. First, however, we will summarize our learning.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen how there are many ways to compromise your security
    by following seemingly innocuous courses of action or failing to realize subtle
    distinctions in responsibilities and approaches.
  prefs: []
  type: TYPE_NORMAL
- en: These include both general security anti-patterns that affect many different
    platforms, such as Shared Belongs to Salesforce and Compliant Is Secure, and unique-to-Salesforce
    anti-patterns such as Declarative Is Always Safe and Spaghetti Sharing Model.
    These underscore the particular complexity of the security domain.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to security, you have to attend both to high-level issues of organizational
    culture and to the minutiae of how mechanisms are designed specifically for the
    technology you are using. That is what makes it both frustrating and highly interesting
    at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Having covered the security domain, we will move on to have a look at data next.
  prefs: []
  type: TYPE_NORMAL
