["```\n$ git clone https://github.com/PacktPublishing/Modern-DevOps-Practices-2e.git \\\nmodern-devops\n$ cd modern-devops/ch12\n```", "```\n$ cd ~\n$ git clone https://github.com/PacktPublishing/Modern-DevOps-Practices-2e.git \\\nmodern-devops\n$ git clone git@github.com:<your_account>/mdo-environments.git\n$ cd mdo-environments\n```", "```\n$ cp -r ~/modern-devops/ch12/.gitignore .\n```", "```\n$ git add --all\n$ git commit -m 'Added gitignore'\n$ git push\n```", "```\n$ cd ~ && rm -rf mdo-environments\n$ git clone git@github.com:<your_account>/mdo-environments.git\n$ cd mdo-environments\n```", "```\n$ git branch dev && git checkout dev\n```", "```\n$ cp -r ~/modern-devops/ch12/environments/terraform .\n$ cp -r ~/modern-devops/ch12/environments/.github .\n```", "```\nresource \"google_service_account\" \"main\" {\n  account_id   = \"gke-${var.cluster_name}-${var.branch}-sa\"\n  display_name = \"GKE Cluster ${var.cluster_name}-${var.branch} Service Account\"\n}\nresource \"google_container_cluster\" \"main\" {\n  name               = \"${var.cluster_name}-${var.branch}\"\n  location           = var.location\n  initial_node_count = 3\n  node_config {\n    service_account = google_service_account.main.email\n    oauth_scopes = [\n      \"https://www.googleapis.com/auth/cloud-platform\"\n    ]\n  }\n  timeouts {\n    create = \"30m\"\n    update = \"40m\"\n  }\n}\n```", "```\nprovider \"google\" {\n  project     = var.project_id\n  region      = \"us-central1\"\n  zone        = \"us-central1-c\"\n}\nterraform {\n  backend \"gcs\" {\n    prefix  = \"mdo-terraform\"\n  }\n}\n```", "```\nvariable project_id {}\nvariable branch {...\n  default     = \"dev\"\n}\nvariable cluster_name {...\n  default   = \"mdo-cluster\"\n}\nvariable \"location\" {...\n  default     = \"us-central1-a\"\n}\n```", "```\nname: Create Kubernetes Cluster\non: push\njobs:\n  deploy-terraform:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        working-directory: ./terraform\n    steps:\n    - uses: actions/checkout@v2\n    - name: Install Terraform\n      id: install-terraform\n      run: wget -O terraform.zip https://releases.hashicorp.com/terraform/1.5.5/\nterraform_1.5.5_linux_amd64.zip && unzip terraform.zip && chmod +x terraform && sudo mv \nterraform /usr/local/bin\n    - name: Apply Terraform\n      id: apply-terraform\n      run: terraform init -backend-config=\"bucket=tf-state-mdo-terraform-${{ secrets.\nPROJECT_ID }}\" && terraform workspace select ${GITHUB_REF##*/} ||  terraform workspace new \n${GITHUB_REF##*/} && terraform apply -auto-approve -var=\"project_id=${{ secrets.PROJECT_\nID  }}\" -var=\"branch=${GITHUB_REF##*/}\"\n      env:\n        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}\n```", "```\n$ PROJECT_ID=<project_id>\n$ gcloud iam service-accounts create terraform \\\n--description=\"Service Account for terraform\" \\\n--display-name=\"Terraform\"\n$ gcloud projects add-iam-policy-binding $PROJECT_ID \\\n--member=\"serviceAccount:terraform@$PROJECT_ID.iam.gserviceaccount.com\" \\\n--role=\"roles/editor\"\n$ gcloud iam service-accounts keys create key-file \\\n--iam-account=terraform@$PROJECT_ID.iam.gserviceaccount.com\n```", "```\n$ gsutil mb gs://tf-state-mdo-terraform-${PROJECT_ID}\n```", "```\n$ gcloud services enable iam.googleapis.com container.googleapis.com\n```", "```\n$ git add --all\n$ git commit -m 'Initial commit'\n$ git push --set-upstream origin dev\n```", "```\n$ gcloud container clusters list\nNAME: mdo-cluster-dev\nLOCATION: us-central1-a\nMASTER_VERSION: 1.27.3-gke.100\nMASTER_IP: x.x.x.x\nMACHINE_TYPE: e2-medium\nNODE_VERSION: 1.27.3-gke.100\nNUM_NODES: 3\nSTATUS: RUNNING\n```", "```\n$ cd ~/mdo-environments\n$ cp -r ~/modern-devops/ch12/environments-argocd-app/terraform .\n$ cp -r ~/modern-devops/ch12/environments-argocd-app/manifests .\n$ cp -r ~/modern-devops/ch12/environments-argocd-app/.github .\n```", "```\n.\n├── .github\n│   └── workflows\n│       └── create-cluster.yml\n├── manifests\n│   └── argocd\n│       ├── apps.yaml\n│       ├── install.yaml\n│       └── namespace.yaml\n└── terraform\n    ├── app.tf\n    ├── argocd.tf\n    ├── cluster.tf\n    ├── provider.tf\n    └── variables.tf\n```", "```\nresource \"time_sleep\" \"wait_30_seconds\" {\n  depends_on = [google_container_cluster.main]\n  create_duration = \"30s\"\n}\n```", "```\nmodule \"gke_auth\" {\n  depends_on           = [time_sleep.wait_30_seconds]\n  source               = \"terraform-google-modules/kubernetes-engine/google//modules/auth\"\n  project_id           = var.project_id\n  cluster_name         = google_container_cluster.main.name\n  location             = var.location\n  use_private_endpoint = false\n}\n```", "```\ndata \"kubectl_file_documents\" \"namespace\" {\n  content = file(\"../manifests/argocd/namespace.yaml\")\n}\ndata \"kubectl_file_documents\" \"argocd\" {\n  content = file(\"../manifests/argocd/install.yaml\")\n}\n```", "```\nresource \"kubectl_manifest\" \"namespace\" {\n  for_each  = data.kubectl_file_documents.namespace.manifests\n  yaml_body = each.value\n  override_namespace = \"argocd\"\n}\nresource \"kubectl_manifest\" \"argocd\" {\n  depends_on = [\n    kubectl_manifest.namespace,\n  ]\n  for_each  = data.kubectl_file_documents.argocd.manifests\n  yaml_body = each.value\n  override_namespace = \"argocd\"\n}\n```", "```\ndata \"kubectl_file_documents\" \"apps\" {\n    content = file(\"../manifests/argocd/apps.yaml\")\n}\nresource \"kubectl_manifest\" \"apps\" {\n  depends_on = [\n    kubectl_manifest.argocd,\n  ]\n  for_each  = data.kubectl_file_documents.apps.manifests\n  yaml_body = each.value\n  override_namespace = \"argocd\"\n}\n```", "```\n...\nprovider \"kubectl\" {\n  host                   = module.gke_auth.host\n  cluster_ca_certificate = module.gke_auth.cluster_ca_certificate\n  token                  = module.gke_auth.token\n  load_config_file       = false\n}\nterraform {\n  required_providers {\n    kubectl = {\n      source  = \"gavinbunney/kubectl\"\n      version = \">= 1.7.0\"\n    }\n  }...\n}\n```", "```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: blog-app\n  namespace: argocd\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/<your_github_repo>/mdo-environments.git\n    targetRevision: HEAD\n    path: manifests/nginx\n  destination:\n    server: https://kubernetes.default.svc\n  syncPolicy:\n    automated:\n      selfHeal: true\n```", "```\nmanifests\n└── argocd\n│   ├── apps.yaml\n│   ├── install.yaml\n│   └── namespace.yaml\n└── blog-app\n│   └── manifest.yaml\n└── <other-app>\n    └── manifest.yaml\n```", "```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: argo-apps\n  namespace: argocd\nspec:\n  generators:\n  - git:\n      repoURL: https://github.com/<your_github_repo>/mdo-environments.git\n      revision: HEAD\n      directories:\n      - path: manifests/*\n      - path: manifests/argocd\n        exclude: true\n  template:\n    metadata:\n      name: '{{path.basename}}'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/<your_github_repo>/mdo-environments.git\n        targetRevision: HEAD\n        path: '{{path}}'\n      destination:\n        server: https://kubernetes.default.svc\n      syncPolicy:\n        automated:\n          selfHeal: true\n```", "```\n$ git add --all\n$ git commit -m \"Added argocd configuration\"\n$ git push\n```", "```\n$ gcloud container clusters get-credentials \\\n mdo-cluster-dev --zone us-central1-a --project $PROJECT_ID\n```", "```\n$ kubectl get svc argocd-server -n argocd\nNAME          TYPE        EXTERNAL-IP  PORTS          AGE\nargocd-server LoadBalaner 34.122.51.25 80/TCP,443/TCP 6m15s\n```", "```\n$ kubectl patch secret argocd-secret -n argocd \\\n-p '{\"data\": {\"admin.password\": null, \"admin.passwordMtime\": null}}'\n$ kubectl scale deployment argocd-server --replicas 0 -n argocd\n$ kubectl scale deployment argocd-server --replicas 1 -n argocd\n```", "```\n$ kubectl -n argocd get secret argocd-initial-admin-secret \\\n-o jsonpath=\"{.data.password}\" | base64 -d && echo\n```", "```\n$ cd ~/mdo-environments/manifests & mkdir sealed-secrets\n$ cd sealed-secrets\n$ wget https://github.com/bitnami-labs/sealed-secrets\\\n/releases/download/v0.23.1/controller.yaml\n```", "```\n$ kubectl get deployment -n kube-system sealed-secrets-controller\nNAME                      READY UP-TO-DATE AVAILABLE AGE\nsealed-secrets-controller 1/1   1          1         6m4s\n```", "```\n$ KUBESEAL_VERSION='0.23.1'\n$ wget \"https://github.com/bitnami-labs/sealed-secrets/releases/download\\\n/v${KUBESEAL_VERSION:?}/kubeseal-${KUBESEAL_VERSION:?}-linux-amd64.tar.gz\"\n$ tar -xvzf kubeseal-${KUBESEAL_VERSION:?}-linux-amd64.tar.gz kubeseal\n$ sudo install -m 755 kubeseal /usr/local/bin/kubeseal\n$ rm -rf ./kubeseal*\n```", "```\n$ kubeseal --version\nkubeseal version: 0.23.1\n```", "```\n$ kubectl create secret generic mongodb-creds \\\n  --dry-run=client -o yaml --namespace=blog-app \\\n  --from-literal=MONGO_INITDB_ROOT_USERNAME=root \\\n  --from-literal=MONGO_INITDB_ROOT_PASSWORD=<your_pwd> \\\n  | kubeseal -o yaml > mongodb-creds-sealed.yaml\n```", "```\napiVersion: bitnami.com/v1alpha1\nkind: SealedSecret\nmetadata:\n  name: mongodb-creds\n  namespace: blog-app\nspec:\n  encryptedData:\n    MONGO_INITDB_ROOT_PASSWORD: AgB+tyskf72M/…\n    MONGO_INITDB_ROOT_USERNAME: AgA95xKJg8veOy8v/…\n  template:\n    metadata:\n      name: mongodb-creds\n      namespace: blog-app\n```", "```\n$ mkdir -p ~/mdo-environments/manifests/blog-app/\n$ mv mongodb-creds-sealed.yaml ~/mdo-environments/manifests/blog-app/\n```", "```\n$ cp ~/modern-devops/ch12/blog-app/blog-app.yaml \\\n ~/mdo-environments/manifests/blog-app/\n```", "```\n$ kubectl get svc -n blog-app\nNAME     TYPE         CLUSTER-IP    EXTERNAL-IP PORT(S)\nfrontend LoadBalancer 10.71.244.154 34.68.221.0 80:3203/TCP\nmongodb  ClusterIP    None          <none>      27017/TCP\nposts    ClusterIP    10.71.242.211 <none>      5000/TCP\nratings  ClusterIP    10.71.244.78  <none>      5000/TCP\nreviews  ClusterIP    10.71.247.128 <none>      5000/TCP\nusers    ClusterIP    10.71.241.25  <none>      5000/TCP\n```", "```\n$ kubectl get pod -n blog-app\nNAME                        READY   STATUS    RESTARTS\nfrontend-7cbdc4c6cd-4jzdw   1/1     Running   0\nmongodb-0                   1/1     Running   0\nposts-588d8bcd99-sphpm      1/1     Running   0\nratings-7dc45697b-wwfqd     1/1     Running   0\nreviews-68b7f9cb8f-2jgvv    1/1     Running   0\nusers-7cdd4cd94b-g67zw      1/1     Running   0\n```", "```\n$ kubectl get secret -n blog-app\nNAME            TYPE     DATA   AGE\nmongodb-creds   Opaque   2      80s\n```"]