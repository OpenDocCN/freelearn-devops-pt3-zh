- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Introduction to DevOps
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 介绍
- en: DevOps is not a product or tool that you can buy or install. DevOps is about
    culture and the way you write, release, and operate your software. DevOps is about
    shortening the time between a new idea and your first end user experiencing the
    value it delivers. In this book, you will learn about the tools and techniques
    you can use to apply that philosophy to your way of working. As the purpose of
    this book is to help you prepare for the AZ-400 certification exam, the core concepts
    and DevOps-related practices will be illustrated using Azure DevOps and its associated
    technologies.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 不是你可以购买或安装的产品或工具。DevOps 是关于文化以及你如何编写、发布和运营软件。DevOps 是关于缩短新想法与最终用户体验其带来的价值之间的时间。在本书中，你将学习如何利用工具和技术将这一理念应用于你的工作方式。本书的目的是帮助你准备
    AZ-400 认证考试，因此核心概念和与 DevOps 相关的实践将通过 Azure DevOps 及其相关技术来阐述。
- en: DevOps has gained popularity in recent years, with almost all software engineering
    teams adapting themselves to a new world of doing things using a newer set of
    tools that activate productivity and better collaboration across development and
    operations. DevOps is often seen as an extension of Agile, but its scope is much
    wider, wherein it complements Agile.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，DevOps 在软件工程领域越来越受欢迎，几乎所有软件工程团队都在适应一个新的工作方式，使用一组新的工具来激发生产力，并在开发和运维之间实现更好的协作。DevOps
    常被视为敏捷的延伸，但其范围要广得多，它补充了敏捷方法。
- en: In this first chapter, you will learn more about what DevOps is and how to recognize
    a successful DevOps team. By the end of this chapter, you will be familiar with
    the key terms and be equipped with a broader understanding of the high-level principles
    and practices of DevOps. You will also discover the benefits of DevOps as it applies
    to software engineering teams.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将更多地了解什么是 DevOps，以及如何识别一个成功的 DevOps 团队。到本章结束时，你将熟悉关键术语，并掌握 DevOps 的高层次原则和实践。你还将发现
    DevOps 对软件工程团队的益处。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is DevOps?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 DevOps？
- en: Creating your ideal DevOps organization
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建理想的 DevOps 组织
- en: Exploring DevOps practices and habits
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 DevOps 实践和习惯
- en: The five stages of the DevOps evolution
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 发展历程的五个阶段
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: There are no technical requirements for this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章没有技术要求。
- en: What is DevOps?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 DevOps？
- en: If you were to list all of the different definitions and descriptions of DevOps,
    there would be many. However, as different as these might be, they most likely
    share several concepts. These are collaboration, continuous delivery of business
    value, and breaking down silos.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你列出所有关于 DevOps 的不同定义和描述，会有很多。然而，尽管它们可能有所不同，它们最有可能共享几个概念。这些概念是协作、持续交付商业价值和打破孤岛。
- en: With all the technical discussion in the rest of this book, it is important
    not to overlook the value proposition for adopting DevOps – namely, that it will
    help you improve the way that you continuously deliver value to your end users.
    To do this, you must decrease the time between starting work on a new feature
    and the first user using it in production. This means that you not only have to
    write the software but also deliver and operate it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书其余部分涉及到的技术讨论中，重要的是不要忽视采用 DevOps 的价值主张——即它将帮助你改进持续向最终用户交付价值的方式。为了实现这一点，你必须减少从开始开发新功能到第一个用户在生产环境中使用该功能的时间。这意味着你不仅要编写软件，还要交付并运营它。
- en: Over the last decade, the way we write software has fundamentally changed. More
    and more companies are now adopting an agile way of working to increase the efficiency
    of their software development. More and more teams are now working in short iterations
    or sprints to create new increments of a product in quick succession. However,
    creating potentially shippable increments faster and faster does not create any
    value by itself. Only when each new version of your software is also released
    to production and used by your end users does it start delivering value.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的十年里，我们编写软件的方式发生了根本性的变化。越来越多的公司现在采用敏捷工作方式，以提高软件开发的效率。越来越多的团队现在通过短期迭代或冲刺，快速创建产品的新增量。然而，快速创建潜在可发布的增量本身并不能创造任何价值。只有当每个新版本的软件被发布到生产环境并被最终用户使用时，它才开始提供价值。
- en: In traditional organizations, developers and operators are often located in
    different departments, and taking software into production includes a hand-off,
    often with a formal ceremony around it. In such an organization, it can be hard
    to accelerate that delivery to production, along with the speed at which development
    can create new versions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的组织中，开发人员和运维人员通常位于不同的部门，将软件投入生产往往需要交接，并且通常伴随有正式的仪式。在这样的组织中，加速将软件交付到生产环境，以及开发人员快速创建新版本的速度，可能会变得很困难。
- en: 'Next to that, the development and operations departments often have conflicting
    goals. While a development department is rewarded for creating many changes as
    fast as possible, operations departments are rewarded for limiting downtime and
    preventing issues. The latter is often best achieved by making as few changes
    as possible. The conflict here is clear – both departments have optimizations
    for one subgoal, as shown in the following diagram:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，开发和运维部门往往存在目标冲突。开发部门的奖励是尽可能快速地创造许多变化，而运维部门则因减少停机时间和防止问题而获得奖励。后者通常通过尽可能少地做出更改来最佳实现。这里的冲突很明显——两个部门都有各自针对一个子目标的优化，如下图所示：
- en: '![Figure 1.1 – Conflicting goals between development and operations ](img/Figure_1.1.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – 开发与运维之间的目标冲突](img/Figure_1.1.jpg)'
- en: Figure 1.1 – Conflicting goals between development and operations
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 开发与运维之间的目标冲突
- en: This defeats the purpose of these subgoals, which comes from the shared, overarching
    goal of quickly taking in new versions while maintaining stability. It’s precisely
    this conflict between developmental and operational goals that is one of the things
    that should disappear in a DevOps culture. In such a culture, development and
    operations teams should work together on delivering new versions to production
    in a fast and reliable manner and share responsibility for both subgoals.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这违背了这些子目标的目的，这些子目标源于共同的、宏观的目标，即在保持稳定性的同时快速地引入新版本。正是开发和运维目标之间的冲突，应该成为DevOps文化中消失的一个问题。在这种文化中，开发和运维团队应该协同工作，以快速可靠的方式将新版本交付到生产环境，并共同承担这两个子目标的责任。
- en: 'While it is good to know that DevOps is a cultural movement, tools and automation
    are an important part of that culture. In this book, we will focus on these tools
    and how to use them to implement many of the practices that come with a DevOps
    culture. In other words, this book will be mostly about the products and processes
    associated with DevOps. If you want to learn more about the cultural side of things
    and the people, there are many other books you can read. A very good read is *The
    Phoenix Project: A Novel About IT, DevOps, And Helping Your Business Win*, by
    Gene Kim.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然知道DevOps是一个文化运动很重要，但工具和自动化在这种文化中扮演着重要角色。在本书中，我们将重点介绍这些工具以及如何使用它们来实现DevOps文化中的许多实践。换句话说，本书主要关注与DevOps相关的产品和流程。如果你想了解更多关于文化方面的内容和人群，还有许多其他书籍可以阅读。一本非常值得阅读的书是*《凤凰项目：IT、DevOps与帮助你的企业获胜的小说》*，作者为Gene
    Kim。
- en: The rest of this section will explore the relationship between DevOps and Agile
    to see how they complement each other. The focus will be on agile techniques and
    prices for work management. We will also discuss the goals and benefits of a DevOps
    culture.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的其余部分将探讨DevOps与敏捷之间的关系，看看它们如何相辅相成。重点将放在敏捷技术和工作管理的价格上。我们还将讨论DevOps文化的目标和好处。
- en: The relationship between DevOps and Agile
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps与敏捷的关系
- en: If you take a look at Agile, you may notice that part of it focuses on business
    value and shortening the time of delivering a new business value. From that perspective,
    adopting DevOps is a logical next step after Agile. Agile advocates that the software
    development teams’ responsibilities should extend forward by engaging with users
    and other stakeholders to deliver valuable and potentially shippable products
    quicker. DevOps is not just about something that might be shipped, but shipping
    it as well. With Agile and DevOps combined, you can create an end-to-end and continuous
    flow of value to your users.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看看敏捷开发，你可能会注意到它的一部分内容侧重于商业价值和缩短交付新商业价值的时间。从这个角度来看，采用DevOps是敏捷开发后的一个合乎逻辑的步骤。敏捷提倡软件开发团队的职责应向前延伸，通过与用户及其他利益相关者互动，更快地交付有价值且可能可以发布的产品。DevOps不仅仅是指可能发布的东西，而是实际发布它。通过结合敏捷与DevOps，你可以为用户创造一个端到端的、持续的价值流。
- en: You will need a common approach to managing the work to be done for everyone
    involved. In the next section, you will find some pointers on how to incorporate
    operational concerns in the way you manage your work.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要为所有参与者提供一个共同的工作管理方法。在下一节中，你将找到一些关于如何将运维方面的考量纳入你管理工作方式的指引。
- en: Agile work management
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 敏捷工作管理
- en: 'When you are starting to increase the collaboration between development and
    operations, you will quickly notice that they have to cope with different types
    of work. In development, a large part of the work is planned: user stories and
    bugs that are picked up from a backlog. On the other hand, for operations, a large
    part of their work is unplanned. They respond to warnings and alerts from systems
    and requests or tickets from users or developers.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始增加开发与运维之间的协作时，你会很快注意到他们必须应对不同类型的工作。在开发中，大部分工作是计划好的：从待办事项中提取的用户故事和 bug。另一方面，对于运维来说，很多工作是未计划的。他们需要响应来自系统的警告和提醒，以及来自用户或开发人员的请求或工单。
- en: 'Integrating these two, especially if developers and operators are located on
    the same team, can be challenging. To learn how to deal with this, let’s explore
    the following approach:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 将这两者整合在一起，尤其是当开发人员和运维人员位于同一团队时，可能会很具挑战性。为了学习如何应对这一点，我们可以探索以下方法：
- en: First, switch to a flow-based way of working for developers.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，为开发人员切换到基于流的工作方式。
- en: Next, allow for operations to also list their work in the same work management
    system as developers using synchronizations. You can also choose to implement
    *fastlaning*, a way to expedite urgent work.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，允许运维团队也通过同步将他们的工作列在与开发人员相同的工作管理系统中。你还可以选择实施*快速通道（fastlaning）*，一种加速处理紧急工作的方式。
- en: Finally, you may choose to decommission existing ticketing tools for operations
    if possible.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果可能的话，你可以选择停用现有的运维工单工具。
- en: Fastlaning is an approach to organizing work that allows for both planned and
    unplanned work by visualizing two separate lanes of work. To do this, the Scrum
    board is extended with a Kanban-like board on the top. This is the fast lane.
    On the Kanban board, urgent but unplanned work is added. Any work that’s added
    to this lane is picked up by the team with the highest priority. Only when there
    is no work remaining in the fast lane is work from the Scrum board, along with
    planned work, picked up. Whenever new work is added to the fast lane, this takes
    priority again. Often, there is the agreement that any work in progress is finished
    before switching to work in the fast lane.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 快速通道是一种组织工作的方式，它通过可视化两条独立的工作轨道，允许同时处理计划内和未计划的工作。为此，Scrum 看板上方扩展了一个类似 Kanban
    的看板，这就是快速通道。在 Kanban 看板上，添加了紧急但未计划的工作。任何添加到此通道的工作将由优先级最高的团队来处理。只有当快速通道中的工作都处理完毕后，才会处理
    Scrum 看板上的工作以及计划中的工作。每当有新的工作添加到快速通道时，它将再次优先处理。通常，团队会达成一致，所有正在进行中的工作在切换到快速通道工作之前必须完成。
- en: Important Note
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Dependency management is also an important aspect of agile work planning. Hence,
    teams often make use of the prioritization attribute to qualify more important
    work for the short term.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖管理也是敏捷工作计划中一个重要方面。因此，团队通常会利用优先级属性来确定短期内更重要的工作。
- en: Switching to a flow-based methodology
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 切换到基于流的工作方法
- en: The first thing to consider when switching to a flow-based methodology is transitioning
    the way developers work from batch-wise to flow-based. An example of a batch-wise
    way of working is Scrum. If you are using the Scrum framework, you are used to
    picking up a batch of work every 2 to 4 weeks and focusing on completing all of
    that work within that time window. Only when that batch is done do you deliver
    a potentially shippable product.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到基于流的工作方法时，首先需要考虑的是将开发人员的工作方式从批量处理转变为基于流的工作方式。批量工作方式的一个例子是 Scrum。如果你正在使用 Scrum
    框架，你已经习惯了每 2 到 4 周拾取一批工作，并集中精力在这个时间窗口内完成所有工作。只有当这一批工作完成后，才会交付一个潜在可交付的产品。
- en: When changing to a flow-based approach, you try to focus not on a batch, but
    just on one thing. You work on that one work item and drive it completely until
    it’s done before you start on the next. This way, there is no longer a sprint
    backlog, only a product backlog. The advantage of this approach is that you no
    longer decide which work to perform upfront; whenever you are free to start on
    new work, you can pick up the next item from the backlog. In an environment where
    priorities shift quickly, this allows you to react to change quickly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在转向基于流程的方法时，你的目标是专注于一个任务，而不是一个批次。你专注于完成这个单一的工作项，直到它完成再开始下一个。这样，就不再有冲刺待办事项列表，只有产品待办事项列表。这种方法的优点在于，你不再需要预先决定执行哪些工作；只要有空，你就可以从待办事项列表中选择下一个任务。在优先级迅速变化的环境中，这让你能够快速应对变化。
- en: These changes to the way developers organize their work make it easier to include
    operations in work management, but there is also another benefit. When developers
    are focusing on getting a single work item done instead of a whole sprint at once,
    you can also increase the number of times you can deliver a small portion of value
    to your users.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员组织工作方式的这些变化使得将操作工作纳入工作管理变得更容易，但也有另一个好处。当开发人员专注于完成单一的工作项而不是一次完成整个冲刺时，你还可以增加向用户交付小部分价值的频率。
- en: Synchronizing work items to one system
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将工作项同步到一个系统
- en: Once the development team has changed the way it organizes its work, it should
    be easier for developers to also list their planned work on the shared backlog
    and pull work from that backlog when they have time to work on it. They now also
    have a place where they can list their unplanned work.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦开发团队改变了工作组织的方式，开发人员应该能更容易地将他们计划中的工作列在共享的待办事项列表中，并在有空时从该列表中拉取工作。同时，他们现在也有一个地方可以列出他们的未计划工作。
- en: However, there may still be an existing ticketing system where requests for
    operations are dropped by users or automatically created by monitoring tools.
    While Azure DevOps has a great API to rework this integration to directly create
    work items in Azure DevOps, you may first choose to create a synchronization between
    your existing ticketing tool and Azure Boards. There are many integration options
    available and there is a lot of ongoing work in this area. This way, operators
    can slowly move from their old tool to the new one, since they are now in sync.
    Of course, the goal is for them to move over to the same tool, as the developers,
    completely.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，可能仍然存在一个现有的工单系统，其中用户会提交操作请求或监控工具会自动创建请求。虽然Azure DevOps有一个强大的API可以重新设计该集成，直接在Azure
    DevOps中创建工作项，但你可以首先选择在现有的工单工具和Azure Boards之间创建一个同步。这方面有很多集成选项，并且正在持续进行相关工作。通过这种方式，操作人员可以逐步从旧工具迁移到新工具，因为它们现在是同步的。当然，目标是让他们完全转移到与开发人员相同的工具。
- en: Fastlaning
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 快速通道
- en: 'With the work of developers and operators in the same work management tool,
    you will notice that you have a mix of planned and unplanned, often urgent, work
    in the system. To ensure that urgent work gets the attention and precedence it
    deserves, you can introduce what is called a **fast lane** to your sprint board.
    The following screenshot shows an example of an Azure board that has been set
    up for fastlaning production issues:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于开发人员和操作人员都在使用同一个工作管理工具，你会发现系统中混合了计划和未计划的工作，且这些工作往往是紧急的。为了确保紧急工作能得到应有的关注和优先处理，你可以在冲刺看板中引入一个所谓的**快速通道**。下面的截图展示了一个Azure看板的例子，该看板已为生产问题设置了快速通道：
- en: '![Figure 1.2 – Azure Board setup depicting the fast lane ](img/Figure_1.2.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – 展示快速通道的Azure看板设置](img/Figure_1.2.jpg)'
- en: Figure 1.2 – Azure Board setup depicting the fast lane
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – 展示快速通道的Azure看板设置
- en: The horizontal split in this board is only used to work on tasks in the regular
    lane when there is no work to be picked up in the fast lane.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 该看板中的水平分割线仅在快速通道中没有任务可选时，用于处理常规通道中的任务。
- en: You can find instructions on how to configure swim lanes in your Azure (Kanban)
    boards for expediting work at [https://docs.microsoft.com/en-us/azure/devops/boards/boards/expedite-work?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/boards/boards/expedite-work?view=azure-devops).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://docs.microsoft.com/en-us/azure/devops/boards/boards/expedite-work?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/boards/boards/expedite-work?view=azure-devops)找到如何在Azure（看板）中配置游泳道以加速工作的说明。
- en: Decommissioning other work management tools
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 停用其他工作管理工具
- en: After creating a shared work management system between development and operations,
    there is an opportunity to increase the amount of collaboration between them.
    When this collaboration is taking off, old ticketing systems that were used by
    operations may now slowly be decommissioned over time. Integrations from monitoring
    tools can be shifted to the new shared tools, and the number of tickets between
    developers and operators should slowly decrease as they find new ways of working
    together.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建了一个开发与运维之间的共享工作管理系统后，有机会增加它们之间的协作。当这种协作开始展开时，原本由运维使用的旧票务系统可能会随着时间的推移逐渐被淘汰。监控工具的集成可以迁移到新的共享工具中，开发人员与运维人员之间的票务数量应该会逐渐减少，因为他们找到了新的协作方式。
- en: Important Note
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Azure DevOps allows you to customize work item templates, as well as define
    life cycle states. Using this feature, teams can easily model their work item
    template types based on any existing taxonomy they might be using in their existing
    tools. This significantly reduces the learning curve in the adoption of the new
    shared work management tool. For more information on this, go to [https://docs.microsoft.com/en-us/azure/devops/boards/backlogs/work-item-template?view=azure-devops&tabs=browser#manage-work-item-templates](https://docs.microsoft.com/en-us/azure/devops/boards/backlogs/work-item-template?view=azure-devops&tabs=browser#manage-work-item-templates).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps允许你自定义工作项模板，并定义生命周期状态。通过这个功能，团队可以根据他们在现有工具中使用的任何现有分类法，轻松地建模他们的工作项模板类型。这大大减少了采用新共享工作管理工具时的学习曲线。欲了解更多信息，请访问[https://docs.microsoft.com/en-us/azure/devops/boards/backlogs/work-item-template?view=azure-devops&tabs=browser#manage-work-item-templates](https://docs.microsoft.com/en-us/azure/devops/boards/backlogs/work-item-template?view=azure-devops&tabs=browser#manage-work-item-templates)。
- en: Goals and benefits of a DevOps culture
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps文化的目标与好处
- en: At this point, you might be wondering about the point of it all. What are the
    benefits of DevOps and what’s in it for you, your colleagues, and your organization?
    The most common goal of adopting DevOps is to achieve a reduction in **cycle time**.
    Cycle time is the time between starting work on a new feature and the moment that
    the first user can use it. The way this is achieved, by automation, also serves
    the goals of lower change failure rate, lower **mean time to repair** (**MTTR**),
    and lower planned downtime.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可能会对这一切的意义产生疑问。DevOps的好处是什么？它对你、你的同事和你的组织有什么影响？采用DevOps的最常见目标是减少**周期时间**。周期时间是从开始开发一个新特性到第一个用户可以使用它的时间。这一目标通过自动化实现，同时也有助于降低更改失败率、降低**平均修复时间**（**MTTR**）和减少计划停机时间。
- en: Next to all that, there may be other benefits, such as increased employee satisfaction,
    less burnout and stress, and better employee retention. This is attributed to
    removing opposing goals between developers and operators.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些，还有其他的好处，比如提高员工满意度、减少倦怠和压力、以及更好的员工留存率。这归因于消除了开发人员和运维人员之间的对立目标。
- en: For a while, there was doubt about whether DevOps works, whether these goals
    can be met, and whether the extra benefits can be achieved since this was only
    shown using case studies. The downside of this is that case studies are often
    only available for successful cases, not for unsuccessful ones. This all changed
    in 2018 when the book *Accelerate* came out. This book shows, based on years of
    quantitative research, that modern development practices such as DevOps contribute
    to reaching IT goals and organizational goals.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一段时间以来，大家对于DevOps是否有效、这些目标是否能实现、以及额外的好处是否能实现产生了疑问，因为这些成果仅通过案例研究来展示。这样做的缺点是，案例研究通常只针对成功的案例，而不包括失败的案例。直到2018年，《Accelerate》一书发布，情况才发生了变化。这本书基于多年的定量研究，展示了现代开发实践，如DevOps，如何有助于实现IT目标和组织目标。
- en: Measuring results
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测量结果
- en: To measure where you currently stand as a team or organization and the impact
    DevOps has on you, there are several metrics that you can start recording. As
    always, when working with metrics or **key performance indicators** (**KPIs**),
    make sure that you do not encourage people to game the system by looking only
    at the numbers. Several interesting metrics are detailed in the following sections
    and if you go over them, you will notice that they are all about encouraging flow.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了衡量你目前作为一个团队或组织的现状，以及DevOps对你的影响，有几个指标可以开始记录。像往常一样，当处理指标或**关键绩效指标**（**KPIs**）时，确保不要鼓励人们只看数字，从而操控系统。一些有趣的指标将在以下章节中详细说明，如果你查看这些指标，你会发现它们都是关于鼓励流程的。
- en: Cycle time and lead time
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 周期时间和交付时间
- en: '**Cycle time** and **lead time** are metrics that come from Lean and Kanban
    and are used to measure the time needed to realize a change. Cycle time is the
    amount of time between starting work on a feature and users being able to use
    that feature in production. The lower the cycle time, the quicker you can react
    to changing requirements or insights. Lead time is the amount of time between
    requesting a feature and realizing that feature. It is the time between adding
    work to the backlog and when you start implementing it.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**周期时间**和**交付时间**是来自精益和看板的指标，用于衡量实现变更所需的时间。周期时间是从开始工作到用户能够在生产环境中使用某个特性之间的时间。周期时间越短，你对需求变化或洞察的反应就越快。交付时间是从请求一个特性到实现该特性之间的时间。它是从将工作添加到待办事项列表到你开始实施它之间的时间。'
- en: When you add cycle time and lead time together, you are calculating another
    metric, known as the **time to market**. This is often an important business metric
    when developing software. Hence, minimizing both cycle time and lead time will
    have a business impact.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将周期时间和交付时间加在一起时，你是在计算另一个指标，称为**上市时间**。这是在开发软件时一个重要的商业指标。因此，最小化周期时间和交付时间会对业务产生影响。
- en: The amount of work in progress
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在制工作量
- en: Another thing you can measure is the amount of work in progress at any point
    in time. DevOps focuses on the flow of value to the user. This implies that everyone
    should, if possible, be doing only one thing at a time and finish that before
    moving on to something else. This reduces the amount of time spent on task switching
    and the amount of time spent on not yet complete work. Measuring how many things
    a team works on in parallel and reporting on this can act as a source of encouragement.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以衡量的另一项内容是任何时刻在制工作量。DevOps专注于价值流向用户。这意味着每个人应尽可能一次只做一件事，并在开始做其他事情之前完成当前任务。这能减少任务切换所花费的时间，以及未完成工作的时间。衡量一个团队并行处理的事务数量，并报告这些内容，可以作为激励的来源。
- en: 'You can even go as far as putting actual limits on the amount of work that
    can be in progress. The following is a small part of *Figure 1.2*, showing that
    these work-in-progress limits can even be shown in the tool:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以将实际的工作量限制设定为在制工作量。以下是*图1.2*的一小部分，展示了这些在制工作量限制甚至可以在工具中显示：
- en: '![Figure 1.3 – Azure Boards depicting limits for each stage ](img/Figure_1.3.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3 – Azure Boards 显示每个阶段的限制](img/Figure_1.3.jpg)'
- en: Figure 1.3 – Azure Boards depicting limits for each stage
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – Azure Boards 显示每个阶段的限制
- en: The goal is to have as little work in progress at the same time as possible.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是尽可能减少同时进行的工作量。
- en: Mean time to recovery
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 平均恢复时间
- en: The third metric is the **mean time to recovery**. How long does it take you
    to restore a service in case of a (partial) outage? In the past, companies focused
    on reducing the **mean time between failures**. This used to be the mean indicator
    of the stability of a product. However, this metric encourages limiting the number
    of changes going to production. The unwanted consequence is often that outages,
    though they might be rare, last long and are hard to fix.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个指标是**平均恢复时间**。在发生（部分）故障时，恢复服务需要多长时间？过去，企业专注于减少**平均故障间隔时间**。这曾是衡量产品稳定性的主要指标。然而，这一指标鼓励限制生产环境中的变更数量。不良的结果往往是，尽管故障可能不常发生，但发生时却持续较长时间且难以修复。
- en: Measuring the mean time to recovery shifts the attention to how quickly you
    can remediate an outage. If you can fix outages quickly, you can achieve the same
    – namely, you can minimize the amount of downtime without sacrificing the rate
    of change. The goal is to minimize the time to recovery.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 衡量平均恢复时间将注意力转向你能多快修复故障。如果你能快速修复故障，你就能实现同样的目标——即在不牺牲变更速率的情况下，最小化停机时间。目标是最小化恢复时间。
- en: Change rate and change failure rate
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 变更率和变更失败率
- en: Finally, you can measure the number of changes that are delivered to production
    and the percentage of that which is not successful. Increasing the rate of change
    implies that you are delivering value to your users more often, hence realizing
    a flow of value. Also, by measuring not just the number of failures but also the
    percentage that fails, you are encouraging many small, successful changes instead
    of encouraging whether the number of changes is limited overall.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以衡量交付到生产环境的变更数量以及其中未成功的百分比。提高变更速率意味着你更频繁地为用户交付价值，从而实现价值流。同时，通过不仅仅衡量失败的次数，还要衡量失败的百分比，你鼓励许多小规模的成功变更，而不是仅仅鼓励总体变更次数的限制。
- en: 'Your goal should be to increase the rate of change while lowering the change
    failure rate. Apart from the four major KPIs listed in this section, many other
    metrics may be useful in measuring your DevOps maturity. All these metrics must
    be linked back to the important business **objectives and key results** (**OKRs**)
    that are expected. You can find more information about OKRs here: [https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/strategy/business-outcomes/okr](https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/strategy/business-outcomes/okr).'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你的目标应该是增加变更的速率，同时降低变更失败率。除了本节列出的四个主要KPI，许多其他度量标准可能对衡量DevOps成熟度也有帮助。所有这些度量标准都必须与期望的业务**目标和关键结果**（**OKRs**）相关联。你可以在这里找到更多关于OKR的信息：[https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/strategy/business-outcomes/okr](https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/strategy/business-outcomes/okr)。
- en: 'A representative sample, for illustration purposes, is depicted in the following
    table:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明，以下表格展示了一个典型的示例：
- en: '| **Objective** | **Key Results** |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| **目标** | **关键结果** |'
- en: '| Faster time to market |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 更快的市场上线时间 |'
- en: 'Deployment Frequency: Every week'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署频率：每周一次
- en: Deployment Time <= 4 hours
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署时间 <= 4小时
- en: 'Lead Time (Major Releases): Once every quarter'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交付时间（重大版本）：每季度一次
- en: '|'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Increase the business value that’s been realized while maintaining or reducing
    costs |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 提高已实现的业务价值，同时维持或降低成本 |'
- en: 'CI/CD processes: 100% automated'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI/CD流程：100%自动化
- en: 'Resource Utilization (95th percentile): 80%'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源利用率（95百分位）：80%
- en: Dashboards for monitoring both Health and Costs
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于监控健康状况和成本的仪表板
- en: '|'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Predictable and quality delivery and faster correction with fewer defects
    |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 可预测的高质量交付和更快速的修正，缺陷更少 |'
- en: High Availability > 99.9%
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高可用性：> 99.9%
- en: RTO < 1 hour, RPO < 15 mins
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RTO < 1小时，RPO < 15分钟
- en: '|'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Better processes across IT, automation, teamwork, and culture |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 改进IT、自动化、团队协作和文化的流程 |'
- en: MTTR < 1 hour
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MTTR < 1小时
- en: Lead Time (Bugs) < 8 hour
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交付时间（Bug）：< 8小时
- en: 'Scaled Agile: Feature Teams > 5'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大规模敏捷：特性团队 > 5
- en: Technical Debt < 1 week
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术债务 < 1周
- en: '|'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Improved customer engagement and ability to quickly respond to market demands
    |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| 提升客户参与度和快速响应市场需求的能力 |'
- en: 'CSAT: 4 or above'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSAT：4分或以上
- en: 'Product Planning: 50% of the backlog focuses on Customer Feedback'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品规划：50%的待办事项集中在客户反馈上
- en: '|'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Table 1.1 – Using the OKR approach for your DevOps maturity
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.1 – 使用OKR方法衡量你的DevOps成熟度
- en: At this point, you might be wondering, how do I help my organization foster
    this culture and reap all of these benefits? The next section will answer this.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你可能在想，如何帮助我的组织培养这种文化，并获得这些好处呢？接下来的章节将回答这个问题。
- en: Creating your ideal DevOps organization
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你理想的DevOps组织
- en: 'Well, maybe your organizational structure does not have to change at all. DevOps
    must start with a cultural change: openness, empathy, and collaboration are values
    that need to be encouraged. But still, changing your organizational structure
    may help accelerate this.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，也许你的组织结构根本不需要改变。DevOps 必须从文化变革开始：开放、同理心和协作是需要鼓励的价值观。但即便如此，改变组织结构可能有助于加速这一进程。
- en: Traditionally, developers and operators are often organized into disparate teams
    or even different departments – organized in teams with people that have similar
    skill sets and responsibilities. A common change in organizations is changing
    this structure by pivoting and organizing teams behind a common goal, a single
    product, or a group of features, for example.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，开发人员和运维人员通常被组织成不同的团队，甚至是不同的部门——这些团队成员拥有相似的技能和职责。组织结构的一个常见变化是通过调整，将团队围绕共同目标、单一产品或一组特性进行组织。
- en: Now, you will need teams with different skill sets and responsibilities, teams
    most likely with developers and operators. It is important to realize that forcing
    such a change upon these people may not be the best way forward. Often, it works
    best to start with changing the culture and encouraging cooperation – then, this
    organizational change may come about naturally.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将需要具有不同技能和职责的团队，这些团队很可能包含开发人员和运维人员。重要的是要意识到，强行对这些人进行这样的变化可能并不是最好的前进方式。通常，最有效的做法是先改变文化，鼓励合作——然后，这种组织变革可能会自然而然地发生。
- en: Finally, it is important to recognize one anti-pattern at this point. Some companies
    are trying to implement DevOps by hiring specialized DevOps engineers and positioning
    them between development and operations, interacting with both. While this, at
    first, may seem like a good idea, this goes against the DevOps values. If you
    do this, you are not breaking silos down, but you are adding a third one. You
    are not decreasing the number of hand-offs, you are most likely increasing them.
    Also, collaboration between developers and operations is often not enhanced by
    separating them using another organizational structure, and you may not see any
    increase in value to your end users at all.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在这一点上，重要的是要认识到一个反模式。一些公司试图通过招聘专门的 DevOps 工程师并将其置于开发与运维之间，与两者互动，从而实施 DevOps。虽然这开始时可能看起来是一个好主意，但这实际上违背了
    DevOps 的价值观。如果你这样做，你并没有打破孤岛，而是增加了第三个孤岛。你没有减少交接次数，很可能是增加了交接次数。此外，将开发人员和运维人员分开，使用另一种组织结构通常并不能促进他们之间的合作，你可能完全看不到对最终用户的任何价值提升。
- en: Now that you know what DevOps is and you have a clear understanding of how you
    can form a DevOps team, it is time to explore how to start achieving your goals.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经知道了什么是 DevOps，并且对如何组建 DevOps 团队有了清晰的认识，接下来是时候探索如何开始实现你的目标了。
- en: Exploring DevOps practices and habits
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 DevOps 实践和习惯
- en: 'Since you are not the first team going on this journey, you can learn from
    the experiences of those before you. One example is the Microsoft team that built
    Azure DevOps. Being in the rare position that they can use their product for developing
    another product, they have learned a great deal about what makes DevOps successful.
    From this, they have identified seven key DevOps practices and seven DevOps habits
    that many successful DevOps teams share:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你们不是第一支进行这项旅程的团队，你们可以从前人经验中汲取教训。一个例子是构建 Azure DevOps 的微软团队。由于他们处于一个罕见的位置，可以将自己的产品用于开发另一个产品，因此他们学到了很多关于什么使
    DevOps 成功的经验。从中，他们识别出了七个关键的 DevOps 实践和七个 DevOps 习惯，这些习惯是许多成功的 DevOps 团队所共有的：
- en: '| **DevOps Practices** | **DevOps Habits** |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| **DevOps 实践** | **DevOps 习惯** |'
- en: '| Configuration management | Team autonomy and enterprise alignment |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| 配置管理 | 团队自主权与企业对齐 |'
- en: '| Release management | Rigorous management of technical debt |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| 发布管理 | 对技术债务的严格管理 |'
- en: '| Continuous integration | Focus on the flow of customer value |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 持续集成 | 专注于客户价值流 |'
- en: '| Continuous deployment | Hypothesis-driven development |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 持续部署 | 假设驱动的开发 |'
- en: '| Infrastructure as Code | Evidence gathered in production |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 基础设施即代码 | 在生产环境中收集的证据 |'
- en: '| Test automation | Live-site culture |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 测试自动化 | 现场文化 |'
- en: '| Application performance monitoring | Myanage infrastructure as a flexible
    resource |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 应用性能监控 | 将基础设施管理为灵活资源 |'
- en: Table 1.2 – DevOps practices and habits
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.2 – DevOps 实践和习惯
- en: Now, it is important to realize that just copying the motions described here
    will not guarantee success. Just as with Agile, you will have to spend time to
    understand these practices and habits, where they come from, and how they contribute
    to a continuous flow of value to your end users.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，重要的是要意识到，仅仅复制这里描述的动作并不能保证成功。就像敏捷方法一样，你需要花时间去理解这些实践和习惯，它们的来源，以及它们如何为最终用户提供持续的价值流。
- en: Important Note
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'Microsoft Services has introduced a more comprehensive **DevOps Dojo** model
    that aims to categorize the maturity of your DevOps practices. It gives you a
    good structure on how you should prioritize the DevOps-related investments within
    your teams. You can read more about it here: [https://docs.microsoft.com/en-us/learn/paths/devops-dojo-white-belt-foundation/](https://docs.microsoft.com/en-us/learn/paths/devops-dojo-white-belt-foundation/).'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 微软服务推出了一种更为全面的 **DevOps Dojo** 模型，旨在对你的 DevOps 实践的成熟度进行分类。它为你提供了一个很好的结构，帮助你在团队中优先考虑与
    DevOps 相关的投资。你可以在这里阅读更多相关内容：[https://docs.microsoft.com/en-us/learn/paths/devops-dojo-white-belt-foundation/](https://docs.microsoft.com/en-us/learn/paths/devops-dojo-white-belt-foundation/)。
- en: The following sections explore all of these practices and habits in more detail.
    Keep these in the back of your mind while reading the rest of this book. While
    the rest of this book will mostly focus on the *technical means* of *how* to do
    things, do not forget that these are only means. The real value comes from your
    mindset and creating a culture that focuses on creating a continuous flow of value
    for your customers.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的章节将更详细地探讨所有这些实践和习惯。在阅读本书的其余部分时，请将这些放在心底。虽然本书的其余部分大多数将专注于*如何*做事的*技术手段*，但请不要忘记，这些仅仅是手段。真正的价值来自于你的心态，以及创建一个专注于为客户创造持续价值流的文化。
- en: DevOps practices
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps实践
- en: This section discusses all seven DevOps practices in turn. As you will quickly
    see, they are highly related, and it is quite hard to practice one without the
    other. For example, test automation is highly related to continuous integration
    and continuous deployment.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将依次讨论七项DevOps实践。正如你很快会发现的，它们彼此高度相关，要单独实践其中一项几乎是不可能的。例如，测试自动化与持续集成和持续部署密切相关。
- en: Important Note
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you plan on taking the AZ-400 exam, mastering all of these practices and
    performing them using Azure DevOps will help you significantly.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划参加AZ-400考试，掌握所有这些实践并通过Azure DevOps执行它们将对你大有帮助。
- en: Configuration management
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置管理
- en: Configuration management is about versioning the configuration of your application
    and the components it relies on, along with your application itself. Configuration
    is kept in source control and takes the form of, for example, JSON or YAML files
    that describe the desired configuration of your application. These files are the
    input for tools such as Ansible, Terraform, Puppet, or PowerShell DSC, which configure
    your environment and application. These tools are often invoked from a continuous
    deployment pipeline.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理是关于对你的应用程序及其依赖的组件进行版本控制，包括你的应用程序本身。配置保存在源代码控制中，通常以JSON或YAML文件的形式存在，这些文件描述了应用程序所需的配置。这些文件是像Ansible、Terraform、Puppet或PowerShell
    DSC等工具的输入，帮助配置你的环境和应用程序。这些工具通常从持续部署流水线中被调用。
- en: The desired state can also be reapplied at an interval, even if no changes have
    been made to the intended configuration. This way, it is ensured that the actual
    configuration stays correct and that manual changes are automatically revoked.
    We call this the *prevention of configuration drift*. Configuration drift occurs
    over time due to servers being added or removed over time, or manual, ad hoc interventions
    by administrators. Of course, this implies that intended updates to the configuration
    are done in source control and only applied using tools.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 即使配置没有变化，所需的状态也可以在一定时间间隔后重新应用。这样，可以确保实际配置保持正确，并且手动更改会自动被撤销。我们称之为*防止配置漂移*。配置漂移是由于随着时间的推移服务器被添加或移除，或管理员进行手动临时干预而发生的。当然，这意味着预期的配置更新需要在源代码控制中完成，并且只能通过工具应用。
- en: Configuration management or **Configuration as Code** (**CaC**) is highly related
    to **Infrastructure as Code** (**IaC**). The two are often intertwined and on
    some platforms, the difference between the two may even feel artificial. CaC will
    be discussed in detail in [*Chapter 8*](B18655_08.xhtml#_idTextAnchor542), *Implement
    Infrastructure and Configuration as Code*.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理或**配置即代码**（**CaC**）与**基础设施即代码**（**IaC**）密切相关。这两者通常交织在一起，在某些平台上，它们之间的差异甚至可能显得人为。CaC将在[*第8章*](B18655_08.xhtml#_idTextAnchor542)中详细讨论，*实施基础设施和配置即代码*。
- en: Release management
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布管理
- en: Release management is about being in control of which version of your software
    is deployed to which environment. Versions are often created using continuous
    integration and delivery pipelines. These versions, along with all of the configuration
    needed, are then stored as immutable artifacts in a repository. From here on,
    release management tools are used to plan and control how these versions are deployed
    to one or more environments. Examples of such controls include manual approvals
    and automated queries of open work and quality checks before allowing deployment
    to a new environment.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 发布管理是关于控制你的软件的哪个版本被部署到哪个环境。版本通常通过持续集成和交付流水线创建。这些版本以及所需的所有配置将作为不可变的工件存储在一个仓库中。从这里开始，发布管理工具用于规划和控制如何将这些版本部署到一个或多个环境中。此类控制的例子包括手动审批和在允许部署到新环境之前自动查询开放工作项和质量检查。
- en: Release management is related to continuous deployment and focuses more on controlling
    the flow of versions through the continuous deployment pipeline. [*Chapter 8*](B18655_08.xhtml#_idTextAnchor542),
    *Implement Infrastructure and Configuration as Code*, will cover CaC as part of
    release management.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 发布管理与持续部署相关，并更多关注通过持续部署流水线的版本流程控制。[*第 8 章*](B18655_08.xhtml#_idTextAnchor542)，*实施基础设施和配置即代码*，将作为发布管理的一部分进行讨论。
- en: Continuous integration
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 持续集成
- en: Continuous integration is a practice where every developer integrates their
    work with that of the other developers in the team at least once a day and preferably
    more often. This means that every developer should push their work to the repository
    at least once a day. A continuous integration build verifies that their work compiles
    and that all the unit tests run. It is important to understand that this verification
    should not run only on the code that the developer is working on in isolation.
    The real value comes when the work is also integrated with the work of others.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成是一种实践，每个开发人员每天至少一次与团队其他开发人员集成他们的工作，最好更频繁。这意味着每个开发人员应该每天至少将他们的工作推送到代码库中。持续集成构建验证他们的工作是否编译，并且所有单元测试是否运行。重要的是要理解，这种验证不应仅仅运行在开发人员孤立工作的代码上。当工作与他人的工作集成时才能真正体现其价值。
- en: When integrating changes often and fast, problems with merging changes are less
    frequent and if they occur, they are often less difficult to solve. In [*Chapter
    4*](B18655_04.xhtml#_idTextAnchor069), *Everything Starts with Source Control*,
    you will learn more about how to set up your source control repositories to make
    this possible. In [*Chapter 5*](B18655_05.xhtml#_idTextAnchor177), *Moving to
    Continuous Integration*, you will learn about setting up a continuous integration
    build.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当频繁快速地集成更改时，合并更改的问题较少，并且如果出现问题，解决起来通常较为简单。在[*第 4 章*](B18655_04.xhtml#_idTextAnchor069)，*一切始于源代码控制*中，你将学习如何设置你的源代码控制库以实现这一点。在[*第
    5 章*](B18655_05.xhtml#_idTextAnchor177)，*迁移到持续集成*中，你将了解如何设置持续集成构建。
- en: Continuous deployment
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 持续部署
- en: Continuous deployment is the practice of automatically deploying every new version
    of sufficient quality to production. When practicing continuous deployment, you
    have a fully automated pipeline that takes in every new version of your application
    (every commit), results in a new release, and starts deploying it to one or more
    environments. The first environment is often called **test** and the final environment
    is called **production**.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署是自动将每个新版本的足够质量部署到生产环境的实践。在实践持续部署时，你拥有一个完全自动化的流水线，接收每个应用程序的新版本（每个提交），生成一个新的发布，并开始将其部署到一个或多个环境中。第一个环境通常称为**测试**，最终环境称为**生产**。
- en: In this pipeline, multiple steps verify the quality of the software before letting
    it proceed to the next environment. If the quality is not sufficient, the release
    is aborted and will not propagate to the next environment. The premise behind
    this approach is that, in the pipeline, you try to prove that you cannot take
    the current version to the next environment. If you fail to prove so, you assume
    it is ready for further progression.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个流水线中，多个步骤会在软件进入下一个环境之前验证其质量。如果质量不足，发布将被中止，并且不会传播到下一个环境。这种方法背后的前提是，在流水线中，你试图证明当前版本无法进入下一个环境。如果你未能证明这一点，那么你就假定它已经准备好进一步进行。
- en: 'Only when a release has gone through all the environments in the pipeline is
    it deployed to production. Whenever a release cannot progress to the next environment,
    that release will be completely canceled. While you might be inclined to fix the
    reason for the failure and then restart deployment from the point where it failed,
    it is important not to do so. The changes you made at that point are not validated
    by all of the controls that the version has already passed through. The only way
    to validate the new version as a whole is by starting the pipeline from the start.
    You can see this clearly in the following diagram:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当一个发布通过了流水线中的所有环境后，它才会部署到生产环境。每当一个发布无法继续到下一个环境时，该发布将完全取消。虽然你可能倾向于修复失败的原因，然后从失败点重新启动部署，但重要的是不要这样做。此时所做的更改尚未通过版本已经通过的所有控制进行验证。验证新版本作为一个整体的唯一方法是从头开始启动流水线。你可以在下图中清楚地看到这一点：
- en: '![Figure 1.4 – Continuous deployment flow ](img/Figure_1.4.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – 持续部署流程](img/Figure_1.4.jpg)'
- en: Figure 1.4 – Continuous deployment flow
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 – 持续部署流程
- en: In [*Chapter 6*](B18655_06.xhtml#_idTextAnchor330), *Implementing Continuous
    Deployment and Release Management*, you will learn about setting up continuous
    deployment using.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第6章*](B18655_06.xhtml#_idTextAnchor330)《实现持续部署和发布管理》中，您将学习如何使用基础设施即代码设置持续部署。
- en: Important Note
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The preceding diagram can be found at [https://en.wikipedia.org/wiki/Continuous_delivery#/media/File:Continuous_Delivery_process_diagram.svg](https://en.wikipedia.org/wiki/Continuous_delivery#/media/File:Continuous_Delivery_process_diagram.svg).
    The image is by Grégoire Détrez, original by Jez Humble, under CC BY-SA 4.0, at
    [https://creativecommons.org/licenses/by-sa/4.0/](https://creativecommons.org/licenses/by-sa/4.0/).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的图示可以在[https://en.wikipedia.org/wiki/Continuous_delivery#/media/File:Continuous_Delivery_process_diagram.svg](https://en.wikipedia.org/wiki/Continuous_delivery#/media/File:Continuous_Delivery_process_diagram.svg)找到。该图片由Grégoire
    Détrez提供，原图由Jez Humble制作，采用CC BY-SA 4.0许可，详情见[https://creativecommons.org/licenses/by-sa/4.0/](https://creativecommons.org/licenses/by-sa/4.0/)。
- en: Infrastructure as Code
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基础设施即代码
- en: When writing an application, the binaries that you are building must be running
    somewhere on some application host. An example of such an application host can
    be a web server such as IIS or Apache. Next to an application host, we may need
    a database and some messaging solution. This is called the infrastructure for
    our application. When practicing IaC, you are keeping a description of this infrastructure
    in your source code repository, alongside your application code.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写应用程序时，您构建的二进制文件必须在某个应用程序主机上运行。此类应用程序主机的示例可以是像IIS或Apache这样的Web服务器。在应用程序主机旁边，我们可能需要一个数据库和一些消息传递解决方案。这就构成了我们应用程序的基础设施。在实践IaC时，您会将此基础设施的描述与应用程序代码一起保存在源代码库中。
- en: When the time comes to release a new version of the application and you need
    to make one or more changes to the infrastructure, you are executing this description
    of your desired infrastructure using tools such as Chef, Puppet, Terraform, Azure
    Bicep, PowerShell DSC, or Azure ARM templates. The execution of such a description
    is idempotent, which means that it can be executed more than once, and the result
    is the same. This is because your description of the infrastructure describes
    the *desired state* you want the infrastructure to be in and not a series of steps
    to be executed. Those steps to be executed, if there are any, are automatically
    determined by your tool of choice. Applying the desired state can also be done
    automatically in a continuous deployment pipeline and is often executed before
    the application code is updated.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当发布新版本的应用程序，并且需要对基础设施进行一项或多项更改时，您将使用Chef、Puppet、Terraform、Azure Bicep、PowerShell
    DSC或Azure ARM模板等工具执行对期望基础设施的描述。执行此类描述是幂等的，这意味着它可以执行多次，而结果始终相同。这是因为您对基础设施的描述是您希望基础设施处于的*期望状态*，而不是一系列需要执行的步骤。如果有任何需要执行的步骤，它们会由您选择的工具自动确定。期望状态的应用也可以在持续部署流水线中自动完成，并且通常在应用程序代码更新之前执行。
- en: The big advantage of this is that you can easily create a new environment where
    the infrastructure is guaranteed to be the same as in your other environments.
    Also, the problem of configuration drift, where the infrastructure between your
    different environments slowly diverges, is no longer possible since every time
    you apply the desired state again to every environment, it’s forced.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的一个大优势是，您可以轻松地创建一个新的环境，其中基础设施保证与其他环境中的相同。此外，配置漂移的问题（即不同环境之间的基础设施逐渐发生变化）也不再可能，因为每次您将期望的状态重新应用到每个环境时，都会强制执行。
- en: '[*Chapter 8*](B18655_08.xhtml#_idTextAnchor542), *Implement Infrastructure
    and Configuration as Code*, will discuss IaC in more detail.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第8章*](B18655_08.xhtml#_idTextAnchor542)《实现基础设施和配置即代码》将更详细地讨论IaC。'
- en: Test automation
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试自动化
- en: To continuously deliver value to your end users, you must release fast and often.
    This has implications for the way you test your application. You can no longer
    execute manual tests when you release your application every few minutes. This
    means that you must automate as many of your tests as possible.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了不断向最终用户交付价值，您必须快速并频繁地发布。这对您测试应用程序的方式有一定影响。当您每隔几分钟就发布一次应用程序时，您无法再执行手动测试。这意味着您必须尽可能地自动化测试。
- en: You will most likely want to create multiple test suites for the applications
    that you run at different stages of your delivery pipeline. Fast unit tests that
    run within a few minutes and that are executed whenever a new pull request is
    opened should give your team very quick feedback on the quality of their work,
    and it should catch most of the errors. Next, the team should run one or more
    slower test suites later in the pipeline to further increase your confidence in
    the quality of a version of your application.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 你很可能希望为不同阶段的应用创建多个测试套件，在你的交付管道中运行。快速的单元测试应该在几分钟内完成，并且每当有新的拉取请求时都会执行，这将为你的团队提供关于他们工作质量的快速反馈，通常也能捕捉到大多数错误。接下来，团队应该在管道后期运行一个或多个较慢的测试套件，以进一步提高你对应用版本质量的信心。
- en: All of this should limit the amount of manual testing to a bare minimum and
    allow you to automatically deploy new versions of your application with confidence.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些应该将手动测试的量限制到最少，并让你能够自动部署新版本的应用，且充满信心。
- en: '[*Chapter 10*](B18655_10.xhtml#_idTextAnchor760), *Integrating Continuous Testing*,
    will cover test automation in detail.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第10章*](B18655_10.xhtml#_idTextAnchor760)，*持续测试集成*，将详细讲解测试自动化。'
- en: Application performance monitoring
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用性能监控
- en: This last practice is all about learning how your application is doing in production.
    Gathering metrics such as response times and the number of requests will tell
    you about how the systems are performing. Capturing errors is also part of performance
    monitoring and allows you to start fixing problems without having to wait on your
    customers to contact you about them.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的这一项实践完全是关于了解你的应用在生产环境中的表现。收集诸如响应时间和请求数量等指标将告诉你系统的性能情况。捕获错误也是性能监控的一部分，它能让你在无需等待客户联系我们的情况下，开始解决问题。
- en: In addition to that, you can gather information about which parts of the application
    are more or less frequently used and whether new features are being picked up
    by users. Learning about usage patterns provides you with great insights into
    how customers use your applications and common scenarios they are going through.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，你还可以收集哪些应用部分被更频繁或不那么频繁使用的信息，以及用户是否在采纳新功能。了解使用模式将为你提供宝贵的见解，帮助你了解客户如何使用你的应用，以及他们常见的场景。
- en: '[*Chapter 11*](B18655_11.xhtml#_idTextAnchor889), *Managing Security and Compliance*,
    and [*Chapter 12*](B18655_12.xhtml#_idTextAnchor978), *Application Monitoring*,
    will go into detail about both your application and your users’ behavior in production.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第11章*](B18655_11.xhtml#_idTextAnchor889)，*安全性与合规管理*，以及 [*第12章*](B18655_12.xhtml#_idTextAnchor978)，*应用监控*，将详细介绍你的应用以及用户在生产环境中的行为。'
- en: DevOps habits
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps习惯
- en: The seven habits of successful DevOps teams are more concerned with culture
    and your attitude while developing and delivering software, and less with technical
    means than DevOps practices are. Still, it is important to know and understand
    these habits since they will help make DevOps adoption easier.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的DevOps团队的七大习惯更关注的是文化和开发交付软件过程中的态度，而不是像DevOps实践那样关注技术手段。不过，了解和理解这些习惯仍然非常重要，因为它们将帮助你更轻松地进行DevOps的采用。
- en: You will notice that developing these habits will reinforce the use of the practices
    enumerated previously and the tools you use to implement them. And of course,
    this holds the other way around as well.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现，培养这些习惯将强化前面列出的实践和你用来实施这些实践的工具。当然，反过来也适用。
- en: Team autonomy and enterprise alignment
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 团队自主性与企业对齐
- en: An important part of working Agile is creating teams that are largely self-directed
    and can make decisions without (too many) dependencies outside the team. Such
    a team will often include multiple roles, including a product owner that owns
    one or more features and is empowered to decide on their way forward.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在敏捷工作中，一个重要的部分是创建那些在很大程度上由团队自主管理并能够做出决策的团队，团队在做决策时（通常不需要太多）外部依赖。这类团队通常会包括多个角色，其中包括负责一个或多个功能并有权决定前进方向的产品负责人。
- en: However, this autonomy also comes with the responsibility to align the work
    of the team with the direction the whole product is taking. It is important to
    develop ways of aligning the work of tens or hundreds of teams with each other,
    in such a way that everyone can sail their course but the fleet as a whole stays
    together as well.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种自主性也意味着团队有责任将工作与整个产品的方向保持一致。开发将数十个或数百个团队的工作协同对齐的方式非常重要，确保每个团队可以按照自己的方向航行，但整体上船队能够保持一致。
- en: The best-case scenario is that teams take it upon themselves to align to the
    larger vision, instead of taking directions now and then.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 最理想的情况是，团队能够主动自发地与更大愿景对齐，而不是时不时接受外部指示。
- en: Rigorous management of technical debt
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对技术债务的严格管理
- en: Another habit is that of rigorous management of technical debt. The term *debt*
    in itself suggests that there is a cost (interest) associated with the delay in
    addressing an issue. To keep moving at a constant pace and not slowly lose speed
    over time, it is crucial to keep the number of bugs or architectural issues to
    a minimum and only tolerate so much. Within some teams, this is even formalized
    in agreements. For example, a team can agree that the number of unfixed bugs should
    never exceed the number of team members. This means that if a team has four members
    and a fifth bug is reported, no new work will be undertaken until at least one
    bug has been fixed.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个习惯是对技术债务进行严格管理。*债务*这个词本身就意味着处理问题的延迟会产生成本（利息）。为了保持持续的进展，并防止随着时间的推移逐渐失去速度，保持bug数量或架构问题最小化是至关重要的，且只能容忍一定的数量。在一些团队中，这甚至已被正式化为协议。例如，一个团队可以达成一致，规定未解决的bug数量永远不能超过团队成员的数量。这意味着，如果一个团队有四名成员并报告了第五个bug，那么在至少修复一个bug之前，团队将不会承担任何新工作。
- en: Focusing on the flow of customer value
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 聚焦于客户价值的流动
- en: It is important to accept that users receive no value from code that has been
    written until they are using it. Focusing on the flow of value to a user means
    that code must be written, tested, and delivered and should be running in production
    before you are done. Focusing on this habit can drive cooperation between disciplines
    and teams.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要接受这样的事实：直到用户使用代码之前，他们无法从已编写的代码中获得任何价值。专注于为用户提供价值的流动意味着代码必须编写、测试、交付并且在生产环境中运行，直到完成。专注于这一习惯可以推动学科和团队之间的合作。
- en: Hypothesis-driven development
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 假设驱动的开发
- en: In many modern development methodologies, there is a product owner who is responsible
    for ordering all of the work in the backlog, based on the business value. This
    owner, as the expert, is responsible for maximizing the value that’s delivered
    by the development team by ordering all the items based on the business value
    (divided by effort).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多现代开发方法论中，通常有一个产品负责人，负责根据业务价值排序所有待办事项。作为专家，这个负责人负责通过根据业务价值（按工作量划分）来排序所有项目，最大化开发团队交付的价值。
- en: However, recent research has shown that even though the product owner is an
    expert, they cannot correctly predict which features will bring the most value
    to users. Roughly one-third of the work from a team adds value for users, while
    another third decreases the value. For this reason, you can switch your backlog
    from features or user stories to the hypothesis you want to prove or disprove.
    You only create a minimal implementation or even just a hint of a feature in the
    product and then measure whether it is picked up by users. Only when this happens
    can you expand the implementation of the feature.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最近的研究表明，即使产品负责人是专家，他们也无法正确预测哪些功能将为用户带来最大价值。大约三分之一的团队工作为用户带来了价值，而另三分之一则减少了价值。因此，你可以将待办事项从功能或用户故事转向你希望证明或反驳的假设。你只需创建一个最小的实现，甚至仅仅是功能的一个提示，然后衡量用户是否会接受它。只有当这种情况发生时，你才能扩展该功能的实现。
- en: Evidence gathered in production
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在生产环境中收集的证据
- en: Performance measurements should be taken in your production environment, not
    (just) in an artificial load test environment. There is nothing wrong with executing
    load tests before going to production if they deliver value to you. However, the
    real performance effort is done in the production environment. It should be measured
    there and compared with previous measurements.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 性能测量应在生产环境中进行，而不是（仅仅）在人工负载测试环境中进行。如果负载测试在投入生产之前能够为你带来价值，那么进行负载测试是没有问题的。然而，真正的性能工作是在生产环境中完成的，应该在那里进行测量，并与之前的测量结果进行比较。
- en: This also holds for usage statistics, patterns, and many, many other performance
    indicators. They can all be automatically gathered using production metrics.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这同样适用于使用统计数据、模式和许多其他性能指标。它们都可以通过生产度量自动收集。
- en: Live-site culture
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生产环境文化
- en: A live-site culture promotes the idea that anything that happens in the production
    environment takes precedence over anything else. Next, anything that threatens
    production, is about to go to production, or hinders going to production at any
    time gets priority. Only when these are all in order is the attention shifted
    to future work.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现场文化倡导这样一种理念：生产环境中发生的任何事情优先于其他任何事情。接下来，任何威胁生产环境、即将进入生产环境，或者在任何时候妨碍生产环境的事情，都要优先处理。只有在这些问题都处理妥当后，才会将注意力转向未来的工作。
- en: Also, a part of a live-site culture is ensuring that anything that disturbed
    the operation of the service is thoroughly analyzed – not to find out who to blame
    or fire but to find out how to prevent this from happening again. Prevention is
    preferably done by shifting left; for example, by detecting an indicator of a
    repeat incident earlier in the pipeline.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现场文化的一个组成部分是确保对任何扰乱服务运行的事件进行彻底分析——并非为了找出谁应该负责或被解雇，而是为了找出如何防止类似事件的再次发生。预防最好通过“左移”来实现；例如，通过在管道中更早地检测到重复事件的指示符。
- en: Managing infrastructure as a flexible resource
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将基础设施管理作为灵活的资源
- en: Finally, a successful DevOps team treats its servers and infrastructure as mutable
    assets that can be continually changed, upgraded, tuned, or even decommissioned
    to meet the demands of the business. The ability to do this is fueled by configuration
    and IaC. This may even go so far as creating a new production environment for
    every new deployment and just deleting the old production environment after switching
    all traffic from the old environment to the new one.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，一个成功的 DevOps 团队将其服务器和基础设施视为可以持续更改、升级、调整，甚至停用的可变资产，以满足业务需求。实现这一点的能力得益于配置管理和基础设施即代码（IaC）。这甚至可能发展到为每个新部署创建一个新的生产环境，并在将所有流量从旧环境切换到新环境后删除旧生产环境。
- en: Besides keeping these DevOps practices and habits in mind, there are certain
    stages that you will go through while trying to move to a DevOps culture in your
    organization. The next section will take you through them.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 除了牢记这些 DevOps 实践和习惯外，你还会经历一些阶段，尝试将 DevOps 文化引入组织中。接下来的部分将带你了解这些阶段。
- en: The five stages of the DevOps evolution
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 演化的五个阶段
- en: When you are trying to move to a DevOps culture in your organization, it is
    going to take time. There are motions you have to go through while everyone in
    your organization embraces the changes they have to make to their ways of working.
    Others that have gone before you have gone through the following five steps or
    stages, which may help you. Knowing about them can help you accelerate your journey.
    These steps were first published in the *2018 State of DevOps Report* and are
    discussed in the following sections.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当你尝试将 DevOps 文化引入组织时，这将需要时间。你需要经历一些过程，直到组织中的每个人都接受他们在工作方式上必须做出的改变。那些在你之前走过这条路的人，经历了以下五个步骤或阶段，这可能对你有所帮助。了解这些步骤可以帮助你加快进程。这些步骤首次发布在
    *2018 年 DevOps 状态报告* 中，接下来的部分将对其进行讨论。
- en: Normalizing the technology stack
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准化技术栈
- en: A common first step on the road to a DevOps culture is adopting. At a minimum,
    there are good tools for source control and often, a company standard and continuous
    integration and delivery are rolled out. Teams also work together to normalize
    the stack they develop software for. For example, one or two cloud vendors are
    chosen, and other deployment platforms are phased out. The same goes for tools
    for other purposes – they are standardized where possible. Homebrewed solutions
    are replaced with industry standards.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 迈向 DevOps 文化的一个常见第一步是采纳。至少，有好的源代码控制工具，通常会推出公司标准并进行持续集成和交付。团队也会共同合作，规范他们开发软件的技术栈。例如，选择一到两个云供应商，逐步淘汰其他部署平台。其他目的的工具也是如此——它们在可能的情况下进行标准化。自制的解决方案会被行业标准所取代。
- en: Standardizing and reducing variability
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准化并减少变异性
- en: At this stage, teams work on further reducing the variation between and within
    applications and the development and operations teams that work on them, working
    together on aligning operating systems, libraries, and tools. Also, in this stage,
    deployment processes are changed to reduce the amount of variation between them,
    and configuration and infrastructure are often moved to source control.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，团队致力于进一步减少应用程序之间以及开发与运维团队之间的差异，共同努力对齐操作系统、库和工具。此外，在这一阶段，部署过程也会被调整，以减少它们之间的差异，配置和基础设施通常会被移入源代码控制。
- en: Expanding DevOps practices
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展 DevOps 实践
- en: The remaining issues between development and operations are cleaned up, ensuring
    that the outputs of the development team are precisely what the operations team
    expects. Also, collaboration starts to grow between the two and they can work
    together without external dependencies on creating and delivering changes.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 开发和运维之间的剩余问题被清除，确保开发团队的输出正是运维团队所期望的。同时，两者之间的协作开始增长，他们可以一起工作，不再依赖外部的变更创建和交付。
- en: Automating infrastructure delivery
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化基础设施交付
- en: At this stage, the infrastructure that is used by developers and operations
    becomes fully aligned. Everything is deployed from source control and the same
    scripts or solutions are used by both teams.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一阶段，开发人员和运维部门使用的基础设施完全对齐。所有内容都从源代码管理中部署，并且两个团队使用相同的脚本或解决方案。
- en: Providing self-service capabilities
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供自助服务功能
- en: Before DevOps, virtual machines or hosting environments were often requested
    from operations, by developers manually, or through ticketing systems. Provisioning
    was done manually by operators, which could take days or sometimes even weeks.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevOps之前，虚拟机或托管环境通常由开发人员通过手动方式或通过工单系统向运维部门请求。运维人员手动进行资源配置，这可能需要几天，甚至几周时间。
- en: Self-service capabilities mean that environments are no longer created manually,
    but through self-service APIs that operations teams make available to developers.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 自助服务功能意味着环境不再由手动创建，而是通过运维团队提供给开发人员的自助API来创建。
- en: This way, developers can create and destroy environments on their own. They
    can create and test changes on their own and send them off or schedule them for
    automated deployment.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，开发人员可以自行创建和销毁环境。他们可以自己创建并测试更改，然后将其提交或安排自动部署。
- en: Summary
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned what DevOps is (and what it is not) and its relationship
    with Agile. Moving to a DevOps culture helps you break down conflicting targets
    for developers on one side and operators on the other. This empowers them to work
    together on continuously delivering value to your end users, organizing their
    work in a single backlog, and working off a single board, while respecting the
    differences in their ways of working. Organizing developers and operators in product-oriented
    teams is the next important step in creating like-minded, goal-oriented teams.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，你了解了什么是DevOps（以及什么不是DevOps），以及它与敏捷的关系。转向DevOps文化有助于打破开发人员和运维人员之间的目标冲突。这使得他们能够协同工作，持续地为最终用户提供价值，将工作组织在同一个待办事项列表中，并在同一个看板上进行操作，同时尊重他们各自的工作方式差异。将开发人员和运维人员组织成以产品为导向的团队，是创建志同道合、目标导向团队的下一个重要步骤。
- en: Moving to DevOps can bring many benefits and you now know how these can be measured
    so that you can continuously keep improving. Next, you learned about the DevOps
    habits and practices that many successful DevOps teams exhibit. Mastering these
    yourself and with your team will enable you to go through a DevOps evaluation.
    All this helps continuously deliver value to your users.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 转向DevOps可以带来许多好处，而你现在已经知道如何衡量这些好处，从而不断地进行改进。接下来，你了解了许多成功的DevOps团队所展示的DevOps习惯和实践。掌握这些习惯和实践，无论是你个人还是你的团队，都将帮助你通过DevOps评估。所有这些都能帮助你持续地为用户提供价值。
- en: In the next chapter, we will discuss **Site Reliability Engineering** (**SRE**)
    and how it complements DevOps for managing the reliability and scalability of
    your application.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论**站点可靠性工程**（**SRE**），以及它如何补充DevOps，帮助管理应用程序的可靠性和可扩展性。
- en: Self-practice exercise
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自我练习
- en: 'Make use of the concepts presented in this chapter to complete the following
    activities:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 利用本章中介绍的概念完成以下活动：
- en: Identify 2-3 DevOps-related metrics that may be important for your team.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 识别对你的团队可能重要的2-3个DevOps相关指标。
- en: For each metric, identify the DevOps practices that apply.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个指标，识别出适用的DevOps实践。
- en: Define the current baseline for these metrics and list the areas of improvement.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义这些指标的当前基准，并列出改进领域。
- en: Questions
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'As we conclude, here is a list of questions for you to test your knowledge
    regarding this chapter’s material. You can find the answers in the *Assessments*
    section:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束时，这里有一份问题列表，帮助你测试自己对本章内容的理解。你可以在*评估*部分找到答案：
- en: 'True or false: Development and operations departments often have conflicting
    goals.'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 判断对错：开发和运维部门经常有冲突的目标。
- en: 'True or false: The seven DevOps practices discussed in this chapter are unrelated
    and one can be easily practiced without the other.'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真假：本章讨论的七种DevOps实践没有关联性，可以轻松单独实践。
- en: Which of the following is not a part of the five stages of DevOps evolution?
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项不属于DevOps进化的五个阶段？
- en: Normalizing the technology stack
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 规范化技术栈
- en: Automating infrastructure delivery
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动化基础设施交付
- en: Standardizing and reducing variability
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标准化和减少变异性
- en: Hiring dedicated automation teams
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 招聘专门的自动化团队
- en: What is fastlaning?
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是快速通道？
- en: Describe in your own words, in a few lines, what the essence of DevOps is.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用你自己的话简述DevOps的核心是什么。
- en: Further reading
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'There are many other resources that you may find helpful to learn more about
    DevOps culture and the DevOps way of thinking. Some of them are as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他资源可以帮助您更深入了解DevOps文化和DevOps思维方式。以下是其中一些：
- en: '*The Phoenix Project*, by *Gene Kim*, *Kevin Behr*, and *George Spafford*.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《凤凰项目》*，作者*吉恩·金*、*凯文·贝尔*和*乔治·斯帕福德*。'
- en: '*Effective DevOps*, by *Jennifer Davis* and *Katherine Daniels*.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《高效DevOps》*，作者*詹妮弗·戴维斯*和*凯瑟琳·丹尼尔斯*。'
- en: '*Accelerate*, by *Nicole Forsgren*, *Jez Humble*, and *Gene Kim*.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《加速》*，作者*尼科尔·福斯格伦*、*杰兹·汉布尔*和*吉恩·金*。'
- en: '*Interview with Sam Guckenheimer*, available at [https://devops.com/11626/](https://devops.com/11626/).'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*与Sam Guckenheimer的访谈*，详情请见[https://devops.com/11626/](https://devops.com/11626/)。'
- en: '*Microsoft Case Study on their DevOps Journey*, available at [http://stories.visualstudio.com/devops/](http://stories.visualstudio.com/devops/).'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Microsoft对其DevOps之旅的案例研究*，详情请见[http://stories.visualstudio.com/devops/](http://stories.visualstudio.com/devops/)。'
- en: The *2018 State of DevOps Report*, available at [http://info.puppet.com/Eficode-Puppet-State-of-DevOps-Report.xhtml](http://info.puppet.com/Eficode-Puppet-State-of-DevOps-Report.xhtml).
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*2018年DevOps现状报告*，详情请见[http://info.puppet.com/Eficode-Puppet-State-of-DevOps-Report.xhtml](http://info.puppet.com/Eficode-Puppet-State-of-DevOps-Report.xhtml)。'
- en: More information on assessing existing development processes can be found at
    [https://docs.microsoft.com/en-us/learn/modules/assess-your-development-process/index](https://docs.microsoft.com/en-us/learn/modules/assess-your-development-process/index).
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于评估现有开发流程的信息，请访问[https://docs.microsoft.com/zh-cn/learn/modules/assess-your-development-process/index](https://docs.microsoft.com/zh-cn/learn/modules/assess-your-development-process/index)。
- en: More information about different Agile approaches and how to support them using
    Azure Boards can be found at [https://docs.microsoft.com/en-us/learn/modules/choose-an-agile-approach/index](https://docs.microsoft.com/en-us/learn/modules/choose-an-agile-approach/index).
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于不同敏捷方法的更多信息以及如何使用Azure Boards支持它们，请访问[https://docs.microsoft.com/zh-cn/learn/modules/choose-an-agile-approach/index](https://docs.microsoft.com/zh-cn/learn/modules/choose-an-agile-approach/index)。
