["```\n$ git clone https://github.com/PacktPublishing/Modern-DevOps-Practices-2e.git \\\nmodern-devops\n```", "```\n$ PROJECT_ID=<YOUR_PROJECT_ID>\n$ gcloud services enable iam.googleapis.com \\\n container.googleapis.com \\\n binaryauthorization.googleapis.com \\\n containeranalysis.googleapis.com \\\n secretmanager.googleapis.com \\\n cloudresourcemanager.googleapis.com \\\n cloudkms.googleapis.com\n```", "```\nname: Dev Continuous Delivery Workflow\non:\n  push:\n    branches: [ dev ]\njobs:\n  create-environment-and-deploy-app:\n    name: Create Environment and Deploy App\n    uses: ./.github/workflows/create-cluster.yml\n    secrets: inherit\n  run-tests:\n    name: Run Integration Tests\n    needs: [create-environment-and-deploy-app]\n    uses: ./.github/workflows/run-tests.yml\n    secrets: inherit\n  binary-auth:\n    name: Attest Images\n    needs: [run-tests]\n    uses: ./.github/workflows/attest-images.yml\n    secrets: inherit\n  raise-pull-request:\n    name: Raise Pull Request\n    needs: [binary-auth]\n    uses: ./.github/workflows/raise-pr.yml\n    secrets: inherit\n```", "```\nname: Prod Continuous Delivery Workflow\non:\n  push:\n    branches: [ prod ]\njobs:\n  create-environment-and-deploy-app:\n    name: Create Environment and Deploy App\n    uses: ./.github/workflows/create-cluster.yml\n    secrets: inherit\n  run-tests:\n    name: Run Integration Tests\n    needs: [create-environment-and-deploy-app]\n    uses: ./.github/workflows/run-tests.yml\n    secrets: inherit\n```", "```\n$ git clone git@github.com:<your_github_user>/mdo-posts.git\n$ cd mdo-posts/.github/workflows/\n```", "```\n- name: Install Grype\n  id: install-grype\n  run: curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s \n-- -b /usr/local/bin\n```", "```\n$ grype <container-image>\n```", "```\n$ grype -f critical <container-image>\n```", "```\n- name: Scan Image for Vulnerabilities\n  id: vul-scan\n  run: grype -f critical ${{ secrets.DOCKER_USER  }}/mdo-posts:$(git rev-parse --short \n\"$GITHUB_SHA\")\n```", "```\n$ cp ~/modern-devops/ch13/grype/build.yaml .\n$ git add --all\n$ git commit -m \"Added grype\"\n$ git push\n```", "```\n$ cd ~/mdo-posts && cp ~/modern-devops/ch13/grype/Dockerfile .\n$ git add --all\n$ git commit -m \"Updated base image\"\n$ git push\n```", "```\n$ echo -ne \\\n'{\"MONGO_INITDB_ROOT_USERNAME\": \"root\", \"MONGO_INITDB_ROOT_PASSWORD\": \"itsasecret\"}'  \\\n| gcloud secrets create external-secrets --locations=us-central1 \\\n--replication-policy=user-managed --data-file=-\nCreated version [1] of the secret [external-secrets].\n```", "```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: external-secrets\n  namespace: argocd\nspec:\n  project: default\n  source:\n    chart: external-secrets/external-secrets\n    repoURL: https://charts.external-secrets.io\n    targetRevision: 0.9.4\n    helm:\n      releaseName: external-secrets\n  destination:\n    server: \"https://kubernetes.default.svc\"\n    namespace: external-secrets\n```", "```\ndata \"kubectl_file_documents\" \"external-secrets\" {\n    content = file(\"../manifests/argocd/external-secrets.yaml\")\n}\nresource \"kubectl_manifest\" \"external-secrets\" {\n  depends_on = [\n    kubectl_manifest.argocd,\n  ]\n  for_each  = data.kubectl_file_documents.external-secrets.manifests\n  yaml_body = each.value\n  override_namespace = \"argocd\"\n}\n```", "```\n$ gcloud iam service-accounts create terraform \\\n --description=\"Service Account for terraform\" \\\n --display-name=\"Terraform\"\n$ gcloud projects add-iam-policy-binding $PROJECT_ID \\\n--member=\"serviceAccount:terraform@$PROJECT_ID.iam.gserviceaccount.com\" \\ \n--role=\"roles/editor\"\n$ gcloud iam service-accounts keys create key-file \\\n--iam-account=terraform@$PROJECT_ID.iam.gserviceaccount.com\n```", "```\n$ gsutil mb gs://tf-state-mdo-terraform-${PROJECT_ID}\n```", "```\n$ cd ~ && git clone git@github.com:<your_github_user>/mdo-environments.git\n$ cd mdo-environments/\n$ git checkout dev\n$ cp -r ~/modern-devops/ch13/baseline/* .\n$ cp -r ~/modern-devops/ch13/baseline/.github .\n```", "```\n$ cp ~/modern-devops/ch13/install-external-secrets/app.tf terraform/app.tf\n$ cp ~/modern-devops/ch13/install-external-secrets/external-secrets.yaml \\\n  manifests/argocd/\n```", "```\n$ git add --all\n$ git commit -m \"Install external secrets operator\"\n$ git push\n```", "```\n$ gcloud container clusters get-credentials \\\n mdo-cluster-dev --zone us-central1-a --project $PROJECT_ID\n```", "```\n$ kubectl get svc argocd-server -n argocd\nNAME          TYPE        EXTERNAL-IP  PORTS          AGE\nargocd-server LoadBalaner 34.122.51.25 80/TCP,443/TCP 6m15s\n```", "```\n$ kubectl patch secret argocd-secret -n argocd \\\n-p '{\"data\": {\"admin.password\": null, \"admin.passwordMtime\": null}}'\n$ kubectl scale deployment argocd-server --replicas 0 -n argocd\n$ kubectl scale deployment argocd-server --replicas 1 -n argocd\n```", "```\n$ kubectl -n argocd get secret argocd-initial-admin-secret \\\n -o jsonpath=\"{.data.password}\" | base64 -d && echo\n```", "```\n$ rm -rf manifests/sealed-secrets\n$ git add --all\n$ git commit -m \"Removed sealed secrets\"\n$ git push\n```", "```\n$ cd ~\n$ gcloud iam service-accounts create external-secrets\n```", "```\n$ gcloud secrets add-iam-policy-binding external-secrets \\\n --member \"serviceAccount:external-secrets@$PROJECT_ID.iam.gserviceaccount.com\" \\\n --role \"roles/secretmanager.secretAccessor\"\n```", "```\n$ gcloud iam service-accounts keys create key.json \\\n--iam-account=external-secrets@$PROJECT_ID.iam.gserviceaccount.com\n```", "```\napiVersion: v1\ndata:\n  secret-access-credentials: SECRET_ACCESS_CREDS_PH\nkind: Secret\nmetadata:\n  name: gcpsm-secret\ntype: Opaque\n```", "```\napiVersion: external-secrets.io/v1alpha1\nkind: ClusterSecretStore\nmetadata:\n  name: gcp-backend\nspec:\n  provider:\n      gcpsm:\n        auth:\n          secretRef:\n            secretAccessKeySecretRef:\n              name: gcpsm-secret\n              key: secret-access-credentials\n        projectID: PROJECT_ID_PH\n```", "```\napiVersion: external-secrets.io/v1alpha1\nkind: ExternalSecret\nmetadata:\n  name: mongodb-creds\n  namespace: blog-app\nspec:\n  secretStoreRef:\n    kind: SecretStore\n    name: gcp-backend\n  target:\n    name: mongodb-creds\n  data:\n  - secretKey: MONGO_INITDB_ROOT_USERNAME\n    remoteRef:\n      key: external-secrets\n      property:  MONGO_INITDB_ROOT_USERNAME\n  - secretKey: MONGO_INITDB_ROOT_PASSWORD\n    remoteRef:\n      key: external-secrets\n      property:  MONGO_INITDB_ROOT_PASSWORD\n```", "```\n$ cd ~/mdo-environments\n$ cp ~/modern-devops/ch13/configure-external-secrets/app.tf terraform/app.tf\n$ cp ~/modern-devops/ch13/configure-external-secrets/gcpsm-secret.yaml \\\nmanifests/argocd/\n$ cp ~/modern-devops/ch13/configure-external-secrets/mongodb-creds-external.yaml \\\nmanifests/blog-app/ \n$ cp -r ~/modern-devops/ch13/configure-external-secrets/.github .\n$ git add --all\n$ git commit -m \"Configure External Secrets\"\n$ git push\n```", "```\n$ kubectl get secret gcpsm-secret\nNAME           TYPE     DATA   AGE\ngcpsm-secret   Opaque   1      1m\n$ kubectl get clustersecretstore gcp-backend\nNAME          AGE   STATUS   CAPABILITIES   READY\ngcp-backend   19m   Valid    ReadWrite      True\n$ kubectl get externalsecret -n blog-app mongodb-creds\nNAME          STORE       REFRESHINTERVAL STATUS      READY\nmongodb-creds gcp-backend 1h0m0s          SecretSynced True\n$ kubectl get secret -n blog-app mongodb-creds\nNAME            TYPE     DATA   AGE\nmongodb-creds   Opaque   2      4m45s\n```", "```\n$ kubectl get svc -n blog-app frontend\nNAME     TYPE         EXTERNAL-IP  PORT(S)      AGE\nfrontend LoadBalancer 34.122.58.73 80:30867/TCP 153m\n```", "```\n.\n├── create-cluster.yml\n├── dev-cd-workflow.yaml\n└── prod-cd-workflow.yaml\n```", "```\njobs:\n  create-environment-and-deploy-app:\n    name: Create Environment and Deploy App\n    uses: ./.github/workflows/create-cluster.yml\n    secrets: inherit\n```", "```\n  run-tests:\n    name: Run Integration Tests\n    needs: [deploy-app]\n    uses: ./.github/workflows/run-tests.yml\n    secrets: inherit\n```", "```\nname: Run Integration Tests\non: [workflow_call]\njobs:\n  test-application:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        working-directory: ./tests\n    steps:\n    - uses: actions/checkout@v2\n    - name: Extract branch name\n      run: echo \"branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}\" >> $GITHUB_OUTPUT\n      id: extract_branch\n    - id: gcloud-auth\n      name: Authenticate with gcloud\n      uses: 'google-github-actions/auth@v1'\n      with:\n        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'\n    - name: Set up Cloud SDK\n      id: setup-gcloud-sdk\n      uses: 'google-github-actions/setup-gcloud@v1'\n    - name: Get kubectl credentials\n      id: 'get-credentials'\n      uses: 'google-github-actions/get-gke-credentials@v1'\n      with:\n        cluster_name: mdo-cluster-${{ steps.extract_branch.outputs.branch }}\n        location: ${{ secrets.CLUSTER_LOCATION }}\n    - name: Compute Application URL\n      id: compute-application-url\n      run: external_ip=$(kubectl get svc -n blog-app frontend --output jsonpath='{.status.\nloadBalancer.ingress[0].ip}') && echo ${external_ip} && sed -i \"s/localhost/${external_\nip}/g\" integration-test.py\n    - id: run-integration-test\n      name: Run Integration Test\n      run: python3 integration-test.py\n```", "```\n$ cp -r ~/modern-devops/ch13/integration-tests/.github .\n$ cp -r ~/modern-devops/ch13/integration-tests/tests .\n$ git add --all\n$ git commit -m \"Added tests\"\n$ git push\n```", "```\nATTESTOR_NAME=quality-assurance-attestor\nKMS_KEY_LOCATION=us-central1\nKMS_KEYRING_NAME=qa-attestor-keyring\nKMS_KEY_NAME=quality-assurance-attestor-key\nKMS_KEY_VERSION=1\n```", "```\nresource \"google_kms_key_ring\" \"qa-attestor-keyring\" {\n  count = var.branch == \"dev\" ? 1 : 0\n  name     = \"qa-attestor-keyring\"\n  location = var.region\n  lifecycle {\n    prevent_destroy = false\n  }\n}\n```", "```\nmodule \"qa-attestor\" {\n  count = var.branch == \"dev\" ? 1 : 0\n  source = \"terraform-google-modules/kubernetes-engine/google//modules/binary-\nauthorization\"\n  attestor-name = \"quality-assurance\"\n  project_id    = var.project_id\n  keyring-id    = google_kms_key_ring.qa-attestor-keyring[0].id\n}\n```", "```\nresource \"google_binary_authorization_policy\" \"policy\" {\n  count = var.branch == \"dev\" ? 1 : 0\n  admission_whitelist_patterns {\n    name_pattern = \"gcr.io/google_containers/*\"...\n    name_pattern = \"gcr.io/google-containers/*\"...\n    name_pattern = \"k8s.gcr.io/**\"...\n    name_pattern = \"gke.gcr.io/**\"...\n    name_pattern = \"gcr.io/stackdriver-agents/*\"...\n    name_pattern = \"quay.io/argoproj/*\"...\n    name_pattern = \"ghcr.io/dexidp/*\"...\n    name_pattern = \"docker.io/redis[@:]*\"...\n    name_pattern = \"ghcr.io/external-secrets/*\"\n  }\n  global_policy_evaluation_mode = \"ENABLE\"\n  default_admission_rule {\n    evaluation_mode  = \"REQUIRE_ATTESTATION\"\n    enforcement_mode = \"ENFORCED_BLOCK_AND_AUDIT_LOG\"\n    require_attestations_by = [\n      module.qa-attestor[0].attestor\n    ]\n  }\n}\n```", "```\nresource \"google_container_cluster\" \"main\" {\n...\n  dynamic \"binary_authorization\" {\n    for_each = var.branch == \"prod\" ? [1] : []\n    content {\n      evaluation_mode = \"PROJECT_SINGLETON_POLICY_ENFORCE\"\n    }\n  }\n...\n}\n```", "```\n  binary-auth:\n    name: Attest Images\n    needs: [run-tests]\n    uses: ./.github/workflows/attest-images.yml\n    secrets: inherit\n```", "```\n...\n    steps:\n    - uses: actions/checkout@v2\n    - id: gcloud-auth ...\n    - name: Set up Cloud SDK ...\n    - name: Install gcloud beta\n      id: install-gcloud-beta\n      run: gcloud components install beta\n    - name: Attest Images\n      run: |\n        for image in $(cat ./images); do\n          no_of_slash=$(echo $image | tr -cd '/' | wc -c)\n          prefix=\"\"\n          if [ $no_of_slash -eq 1 ]; then\n            prefix=\"docker.io/\"\n          fi\n          if [ $no_of_slash -eq 0 ]; then\n            prefix=\"docker.io/library/\"\n          fi\n          image_to_attest=$image\n          if [[ $image =~ \"@\" ]]; then\n            echo \"Image $image has DIGEST\"\n            image_to_attest=\"${prefix}${image}\"\n          else\n            echo \"All images should be in the SHA256 digest format\"\n            exit 1\n          fi\n          echo \"Processing $image\"\n          attestation_present=$(gcloud beta container binauthz attestations list \n--attestor-project=\"${{ secrets.PROJECT_ID }}\" --attestor=\"${{ secrets.ATTESTOR_NAME }}\" \n--artifact-url=\"${image_to_attest}\")\n          if [ -z \"${attestation_present// }\" ]; then\n            gcloud beta container binauthz attestations sign-and-create --artifact-\nurl=\"${image_to_attest}\" --attestor=\"${{ secrets.ATTESTOR_NAME }}\" --attestor-project=\"${{ \nsecrets.PROJECT_ID }}\" --keyversion-project=\"${{ secrets.PROJECT_ID }}\" --keyversion-\nlocation=\"${{ secrets.KMS_KEY_LOCATION }}\" --keyversion-keyring=\"${{ secrets.KMS_KEYRING_\nNAME }}\" --keyversion-key=\"${{ secrets.KMS_KEY_NAME }}\" --keyversion=\"${{ secrets.KMS_KEY_\nVERSION }}\"\n          fi\n        done\n```", "```\n<repo_url>/<image_name>@sha256:<sha256-digest>\n```", "```\n$ grep -ir \"image:\" ./manifests/blog-app |\\\n awk {'print $3'} | sort -t: -u -k1,1 > ./images\n$ for image in $(cat ./images); do\n  no_of_slash=$(echo $image | tr -cd '/' | wc -c)\n  prefix=\"\"\n  if [ $no_of_slash -eq 1 ]; then\n    prefix=\"docker.io/\"\n  fi\n  if [ $no_of_slash -eq 0 ]; then\n    prefix=\"docker.io/library/\"\n  fi\n  image_to_attest=$image\n  if [[ $image =~ \"@\" ]]; then\n    echo \"Image $image has DIGEST\"\n    image_to_attest=\"${prefix}${image}\"\n  else\n    DIGEST=$(docker pull $image | grep Digest | awk {'print $2'})\n    image_name=$(echo $image | awk -F ':' {'print $1'})\n    image_to_attest=\"${prefix}${image_name}@${DIGEST}\"\n  fi\n  escaped_image=$(printf '%s\\n' \"${image}\" | sed -e 's/[]\\/$*.^[]/\\\\&/g')\n  escaped_image_to_attest=$(printf '%s\\n' \"${image_to_attest}\" | \\\n sed -e 's/[]\\/$*.^[]/\\\\&/g')\n  echo \"Processing $image\"\ngrep -rl $image ./manifests | \\\nxargs sed -i \"s/${escaped_image}/${escaped_image_to_attest}/g\"\ndone\n```", "```\n$ cat manifests/blog-app/blog-app.yaml | grep \"image:\"\nimage: docker.io/library/mongo@sha256:2a1093b275d9bc...\nimage: docker.io/bharamicrosystems/mdo-posts@sha256:b5bc...\nimage: docker.io/bharamicrosystems/mdo-reviews@sha256:073..\nimage: docker.io/bharamicrosystems/mdo-ratings@sha256:271..\nimage: docker.io/bharamicrosystems/mdo-users@sha256:5f5a...\nimage: docker.io/bharamicrosystems/mdo-frontend@sha256:87..\n```", "```\n$ cp ~/modern-devops/ch13/binaryauth/binaryauth.tf terraform/\n$ cp ~/modern-devops/ch13/binaryauth/cluster.tf terraform/\n$ cp ~/modern-devops/ch13/binaryauth/variables.tf terraform/\n$ cp -r ~/modern-devops/ch13/binaryauth/.github .\n$ git add --all\n$ git commit -m \"Enabled Binary Auth\"\n$ git push\n```", "```\n$ gcloud beta container binauthz attestations list \\\n --attestor-project=\"$PROJECT_ID\" \\\n --attestor=\"quality-assurance-attestor\" | grep resourceUri\nresourceUri: docker.io/bharamicrosystems/mdo-ratings@\nsha256:271981faefafb86c2d30f7d3ce39cd8b977b7dd07...\nresourceUri: docker.io/library/mongo@sha256:2a1093b275d9bc546135ec2e2...\nresourceUri: docker.io/bharamicrosystems/mdo-posts@\nsha256:b5bc1fc976a93a88cc312d24916bd1423dbb3efe25e...\nresourceUri: docker.io/bharamicrosystems/mdo-frontend@\nsha256:873526fe6de10e04c42566bbaa47b76c18f265fd...\nresourceUri: docker.io/bharamicrosystems/mdo-users@\nsha256:5f5aa595bc03c53b86dadf39c928eff4b3f05533239...\nresourceUri: docker.io/bharamicrosystems/mdo-reviews@\nsha256:07370e90859000ff809b1cd1fd2fc45a14c5ad46e...\n```", "```\n  raise-pull-request:\n    name: Raise Pull Request\n    needs: [binary-auth]\n    uses: ./.github/workflows/raise-pr.yml\n    secrets: inherit\n```", "```\n...\n    steps:\n      - uses: actions/checkout@v2\n      - name: Raise a Pull Request\n        id: pull-request\n        uses: repo-sync/pull-request@v2\n        with:\n          destination_branch: prod\n          github_token: ${{ secrets.GH_TOKEN }}\n```", "```\n$ cd ~/mdo-environments/.github/workflows\n$ cp ~/modern-devops/ch13/raise-pr/.github/workflows/dev-cd-workflow.yml .\n$ cp ~/modern-devops/ch13/raise-pr/.github/workflows/raise-pr.yml .\n```", "```\n$ git add --all\n$ git commit -m \"Added PR Gating\"\n$ git push\n```", "```\n$ gcloud container clusters get-credentials \\\nmdo-cluster-prod --zone us-central1-a --project ${PROJECT_ID}\n```", "```\n$ kubectl run nginx --image=nginx\nError from server (VIOLATES_POLICY): admission webhook \"imagepolicywebhook.image-policy.\nk8s.io\" denied the request: Image nginx denied by Binary Authorization default admission \nrule. Image nginx denied by attestor projects/<PROJECT_ID>/attestors/quality-assurance-\nattestor: Expected digest with sha256 scheme, but got tag or malformed digest\n```", "```\n$ DIGEST=$(docker pull nginx | grep Digest | awk {'print $2'})\n```", "```\n$ kubectl run nginx --image=nginx@$DIGEST\nError from server (VIOLATES_POLICY): admission webhook \"imagepolicywebhook.image-\npolicy.k8s.io\" denied the request: Image nginx@sha256:6926dd8... denied by Binary \nAuthorization default admission rule. Image nginx@sha256:6926dd8... denied by attestor \nprojects/<PROJECT_ID>/attestors/quality-assurance-attestor: No attestations found that \nwere valid and signed by a key trusted by the attestor\n```"]