- en: <st c="0">2</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">2</st>
- en: <st c="2">Understanding Platform Architecture to Build Platform as a Product</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">理解平台架构以构建平台作为产品</st>
- en: <st c="68">In this chapter, you will be guided through all the relevant groundwork
    and approaches to create your platform architecture.</st> <st c="194">First, you
    will learn about the principles and how they become a guiding part of your platform
    strategy.</st> <st c="299">This will help you to stay on track and focus on what
    matters most.</st> <st c="367">We will round this up by defining the purpose of</st>
    <st c="416">your platform.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="68">在这一章中，你将被引导完成所有相关的基础工作和创建平台架构的方法。</st> <st c="194">首先，你将学习到平台原则，以及它们如何成为你平台战略的引导部分。</st>
    <st c="299">这将帮助你保持正确的方向，专注于最重要的事情。</st> <st c="367">我们将通过定义你平台的目标来结束这部分内容。</st>
- en: <st c="430">From here, we will begin the process of defining your architecture.</st>
    <st c="499">You will learn about the components of a platform, platform composability,
    and how to handle dependencies.</st> <st c="606">Next, you will work on reference
    architectures and how to create them for your demands.</st> <st c="694">To deliver
    new perspectives to you, we have gathered a couple of platform-as-a-product</st>
    <st c="781">use cases.</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="430">从这里开始，我们将定义你的架构。</st> <st c="499">你将学习到平台的组成部分、平台的可组合性，以及如何处理依赖关系。</st>
    <st c="606">接下来，你将学习如何为你的需求创建参考架构。</st> <st c="694">为了给你带来新的视角，我们收集了几个平台作为产品的</st>
    <st c="781">用例。</st>
- en: <st c="791">Last, you will learn how to start your platform journey with the</st>
    **<st c="857">Thinnest Viable Platform</st>** <st c="881">(</st>**<st c="883">TVP</st>**<st
    c="886">) and how you can make platform adoption visible through relevant</st>
    **<st c="953">key performance</st>** **<st c="969">indicators</st>** <st c="979">(</st>**<st
    c="981">KPIs</st>**<st c="985">).</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="791">最后，你将学习如何用</st> **<st c="857">最简可行平台</st>** <st c="881">(</st>**<st
    c="883">TVP</st>**<st c="886">) 开始你的平台之旅，以及如何通过相关的</st> **<st c="953">关键绩效</st>**
    **<st c="969">指标</st>** <st c="979">(</st>**<st c="981">KPIs</st>**<st c="985">)
    使平台的采用变得可视化。</st>
- en: <st c="988">What you will learn in</st> [*<st c="1012">Chapter 2</st>*](B31164_02.xhtml#_idTextAnchor055)
    <st c="1021">is</st> <st c="1025">as follows:</st>
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="988">你将在</st> [*<st c="1012">第2章</st>*](B31164_02.xhtml#_idTextAnchor055)
    <st c="1021">学习到以下内容：</st>
- en: <st c="1036">Understanding platform principles and defining the purpose of your
    platform</st> <st c="1113">and team</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1036">理解平台原则并定义你的平台</st> <st c="1113">和团队的目标</st>
- en: <st c="1121">Exploring platform architecture – layers, components,</st> <st
    c="1176">and meta-dependencies</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1121">探索平台架构——层次、组件，</st> <st c="1176">以及元依赖关系</st>
- en: <st c="1197">Exploring platform as a product – use cases</st> <st c="1242">and
    implementations</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1197">探索平台作为产品——用例</st> <st c="1242">和实现</st>
- en: <st c="1261">Understanding TVPs</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1261">理解TVP（平台作为产品）</st>
- en: <st c="1280">Looking at the relevant KPIs to make</st> <st c="1318">adoption
    transparent</st>
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1280">通过相关的KPI来使</st> <st c="1318">采用过程透明化</st>
- en: <st c="1338">Understanding platform principles and defining the purpose of your
    platform and team</st>
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1338">理解平台原则并定义你的平台和团队的目标</st>
- en: <st c="1423">You need two</st> <st c="1437">primary things to develop the right
    architecture for your platform and follow it.</st> <st c="1519">First, you have
    to define the guardrails that will guide you in your direction and the steps taken
    to develop and run</st> <st c="1637">your</st> **<st c="1642">Internal Development
    Platform</st>** <st c="1671">(</st>**<st c="1673">IDP</st>**<st c="1676">) as
    a product.</st> <st c="1693">Second, you need to understand what you are aiming
    for.</st> <st c="1749">This is not meant as architecture, but as the identified
    and defined purposes that are standing behind</st> <st c="1852">your platform.</st>
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1423">你需要两样</st> <st c="1437">主要的东西来为你的平台开发合适的架构并遵循它。</st> <st c="1519">首先，你必须定义引导你前进的护栏，以及开发和运行</st>
    <st c="1637">你的</st> **<st c="1642">内部开发平台</st>** <st c="1671">(</st>**<st c="1673">IDP</st>**<st
    c="1676">) 作为产品的步骤。</st> <st c="1693">第二，你需要理解你的目标是什么。</st> <st c="1749">这不仅仅是架构，更是支撑你平台的已识别和定义的目的。</st>
- en: <st c="1866">Introducing principles as guardrails for decision-making</st>
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="1866">将原则作为决策的护栏进行引入</st>
- en: '*<st c="1923">Principles</st>* <st c="1934">might</st> <st c="1941">sound like
    an old-school approach from the forgotten times of enterprise architects and very
    stiff organizations.</st> <st c="2055">In times when everything becomes agile,
    principles are the cornerstones for active decision-making.</st> <st c="2155">They
    help cut discussions short and focus on the platform delivery.</st> <st c="2223">How
    are principles different from capabilities or attributes?</st> <st c="2285">A
    platform’s capabilities are the functionalities an IDP can provide or offer.</st>
    <st c="2364">Think about it like you require file storage, and with the specification
    of a resource definition that you apply within your platform, the system provides
    you with an S3 compliant bucket.</st> <st c="2552">Attributes are a superset of
    provided capabilities and are actively or passively consumed.</st> <st c="2643">If
    you define a secure platform, that is the attribute, then this might combine the
    hardening</st> <st c="2737">of the nodes,</st> **<st c="2751">Common Vulnerabilities
    and Exposures</st>** <st c="2787">(</st>**<st c="2789">CVE</st>**<st c="2792">)
    scans, and things such as network encryption and strict</st> **<st c="2851">role-based
    access control</st>** <st c="2876">(</st>**<st c="2878">RBAC</st>**<st c="2882">)
    rules.</st> <st c="2892">A</st> <st c="2894">principle helps you decide HOW you
    are going to achieve those capabilities and attributes.</st> <st c="2985">Therefore,
    you will usually encounter two types</st> <st c="3033">of principles:</st>'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="1923">原则</st>* <st c="1934">可能听起来像是来自被遗忘的企业架构师时代的老派方法，或者非常僵化的组织。</st>
    <st c="2055">在一切变得敏捷的时代，原则是积极决策的基石。</st> <st c="2155">它们有助于缩短讨论时间，并专注于平台交付。</st>
    <st c="2223">原则与能力或属性有何不同？</st> <st c="2285">平台的能力是IDP可以提供或提供的功能。</st> <st c="2364">想象一下你需要文件存储，通过在平台内应用资源定义的规范，系统为你提供一个符合S3标准的存储桶。</st>
    <st c="2552">属性是所提供能力的超集，可以主动或被动消费。</st> <st c="2643">如果你定义了一个安全平台，那就是属性，那么这可能结合了节点的硬化</st>
    <st c="2737">、</st> **<st c="2751">常见漏洞和暴露</st>** <st c="2787">(</st>**<st c="2789">CVE</st>**<st
    c="2792">) 扫描，以及网络加密和严格的</st> **<st c="2851">基于角色的访问控制</st>** <st c="2876">(</st>**<st
    c="2878">RBAC</st>**<st c="2882">) 规则等。</st> <st c="2892">一个</st> <st c="2894">原则帮助你决定如何实现这些能力和属性。</st>
    <st c="2985">因此，你通常会遇到两种类型</st> <st c="3033">的原则：</st>'
- en: '**<st c="3047">General principles</st>**<st c="3066">: These</st> <st c="3075">are
    organization-wide counting orientation points.</st> <st c="3126">A common one
    from recent years is this:</st> *<st c="3166">Data is an asset</st>*<st c="3182">.
    This translates to the</st> <st c="3207">following meaning:</st>'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="3047">通用原则</st>**<st c="3066">：这些</st> <st c="3075">是面向全组织的计数方向点。</st>
    <st c="3126">近年来的一个常见例子是：</st> *<st c="3166">数据是资产</st>*<st c="3182">。这意味着：</st>
    <st c="3207">以下含义：</st>'
- en: '*<st c="3225">All data is valuable to an organization.</st>* <st c="3267">It’s
    a measurable resource to which we apply practices to protect and</st> <st c="3337">use
    it:</st>'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*<st c="3225">所有数据对组织都具有价值。</st>* <st c="3267">它是一个可衡量的资源，我们采取措施保护并</st> <st
    c="3337">使用它：</st>'
- en: <st c="3344">For each data source, someone</st> <st c="3375">is responsible</st>
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="3344">对于每个数据源，某人</st> <st c="3375">负责</st>
- en: <st c="3389">Data is made available</st> <st c="3413">to everyone</st>
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="3389">数据对每个人可用</st> <st c="3413">。</st>
- en: <st c="3424">We will protect data from loss and</st> <st c="3460">security threats</st>
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="3424">我们将保护数据免受丢失和</st> <st c="3460">安全威胁</st>
- en: '**<st c="3476">Specific principles</st>**<st c="3496">: These</st> <st c="3504">are
    use-case-oriented principles that can be relevant to others but are meant to target
    just a small group of people/specialists.</st> <st c="3635">An example from the
    security branch is this:</st> *<st c="3680">Any activity is defined by an identity</st>*<st
    c="3718">. This can be interpreted</st> <st c="3744">as follows:</st>'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="3476">具体原则</st>**<st c="3496">：这些</st> <st c="3504">是面向特定用例的原则，可能与其他人相关，但旨在针对少数人或专家。</st>
    <st c="3635">来自安全领域的一个例子是：</st> *<st c="3680">任何活动都由身份定义</st>*<st c="3718">。这可以解释为：</st>
    <st c="3744">如下：</st>'
- en: <st c="3755">For every process in a system, an identity</st> <st c="3799">is
    logged</st>
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="3755">系统中的每个过程都会记录一个身份</st> <st c="3799">。</st>
- en: <st c="3808">Unknown identities are immediately to</st> <st c="3847">be reported</st>
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="3808">未知身份应立即</st> <st c="3847">报告</st>
- en: <st c="3858">Every system requires</st> <st c="3881">user authentication</st>
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="3858">每个系统都需要</st> <st c="3881">用户身份验证</st>
- en: <st c="3900">Having</st> <st c="3908">those two principles in mind will drive
    your decisions in different directions when you design the architecture for your
    scenario.</st> <st c="4039">What you will encounter is that specific principles
    look like they describe the obvious expectations of a department.</st> <st c="4157">But
    never assume or implicitly expect something if you want to be sure that it is
    done the way you</st> <st c="4256">want it.</st>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3900">牢记</st> <st c="3908">这两个原则将在你设计场景架构时，引导你做出不同的决策。</st> <st c="4039">你会发现，特定原则看似描述了一个部门的显而易见的期望。</st>
    <st c="4157">但如果你想确保事情按照你期望的方式完成，绝不要假设或隐性地期望某些事情。</st> <st c="4256">你想要它的样子。</st>
- en: <st c="4264">Important note</st>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4264">重要提示</st>
- en: <st c="4279">Define</st> *<st c="4287">explicit</st>* <st c="4295">rules, guidelines,
    and frameworks if you have certain expectations of the outcome of one’s activities.</st>
    *<st c="4399">Implicitly</st>* <st c="4409">requires that one can read your mind
    and have the same worldview</st> <st c="4475">as you.</st>
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4279">定义</st> *<st c="4287">明确</st>* <st c="4295">规则、指南和框架，如果你对某个人的活动结果有特定的期望。</st>
    *<st c="4399">隐性</st>* <st c="4409">要求对方能够读懂你的心思，并拥有与你相同的世界观</st> <st c="4475">。</st>
- en: <st c="4482">Examples of platform and platform engineering principles</st>
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="4482">平台和平台工程原则示例</st>
- en: <st c="4539">Before moving over to helping you define your own principles, we
    would like to give you some input</st> <st c="4639">on</st> <st c="4642">possible
    principles:</st>
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4539">在帮助你定义自己原则之前，我们想给你提供一些关于</st> <st c="4639">可能原则的</st> <st c="4642">建议：</st>
- en: '**<st c="4662">Focus on common problems</st>**<st c="4687">: Identify and prioritize
    problems that when solved help many departments or people in your organization.</st>
    <st c="4794">Prevent others from reinventing the wheel by eliminating shared issues
    and snowballing problems that, when cascading down, become bigger</st> <st c="4931">and
    bigger.</st>'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="4662">关注共性问题</st>**<st c="4687">：识别并优先解决那些能够帮助你组织中多个部门或人员的问题。</st>
    <st c="4794">通过消除共享问题和滚雪球效应的难题，防止他人重新发明轮子，这些问题如果没有处理，会逐渐变得更大</st> <st c="4931">和更严重。</st>'
- en: '**<st c="4942">Don’t reinvent the wheel</st>**<st c="4967">: Research the market
    for potential solutions that solve your demands.</st> <st c="5039">Periodically
    recheck homegrown solutions for standard replacements.</st> <st c="5107">The market
    develops faster than we do.</st> <st c="5146">Focus on creating value, not</st>
    <st c="5175">internal dependencies.</st>'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="4942">不要重新发明轮子</st>**<st c="4967">：研究市场上能够满足你需求的潜在解决方案。</st> <st c="5039">定期检查自制的解决方案，寻找标准化的替代品。</st>
    <st c="5107">市场发展比我们快。</st> <st c="5146">专注于创造价值，而不是</st> <st c="5175">内部依赖。</st>'
- en: '**<st c="5197">Each customer is important</st>**<st c="5224">: Every user of
    your platform is relevant, from large systems to small products.</st> <st c="5306">Gather
    and evaluate every feedback equally.</st> <st c="5350">Address everyone’s needs
    and demands in the same way and provide the same class of service.</st> <st c="5442">Consider
    those inputs as the primary way to define your</st> <st c="5498">development path.</st>'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="5197">每个客户都很重要</st>**<st c="5224">：你平台上的每个用户都至关重要，从大型系统到小型产品。</st>
    <st c="5306">平等地收集和评估每一条反馈。</st> <st c="5350">以同样的方式满足每个人的需求和要求，并提供相同水平的服务。</st>
    <st c="5442">将这些反馈视为定义你</st> <st c="5498">发展路径的主要方式。</st>'
- en: '**<st c="5515">Eliminate waste</st>**<st c="5531">: We will build our platform
    to be as resource-efficient as possible and help our customers be as optimized
    as possible.</st> <st c="5653">We drive transparency on resource consumption and
    provide options to scale, reduce, and rightsize workload.</st> <st c="5761">Together,
    we develop best practices for developers to understand how they can configure
    and use advanced technologies for</st> <st c="5883">more flexibility.</st>'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="5515">消除浪费</st>**<st c="5531">：我们将构建一个尽可能高效利用资源的平台，并帮助我们的客户尽可能优化资源。</st>
    <st c="5653">我们推动资源消耗的透明度，并提供扩展、减少和调整工作负载的选项。</st> <st c="5761">我们共同开发最佳实践，帮助开发人员了解如何配置和使用先进技术以实现</st>
    <st c="5883">更大的灵活性。</st>'
- en: '**<st c="5900">A platform is a product</st>**<st c="5924">: Recall your product
    mindset for every decision.</st> <st c="5975">Focus on what provides real value
    to your internal customers, such as developers, operations, security, and others.</st>
    <st c="6091">Ensure features ship fast and have a short feedback loop.</st> <st
    c="6149">Recognize distractions from non-value-driven technologies.</st> <st c="6208">Your
    highest goal is to make your customers want to use your platform, not to</st>
    <st c="6286">force them.</st>'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="5900">平台就是一种产品</st>**<st c="5924">：每个决策都要保持产品思维。</st> <st c="5975">关注为你的内部客户（如开发人员、运营人员、安全人员等）提供真正价值的内容。</st>
    <st c="6091">确保功能能够快速发布，并且有短的反馈循环。</st> <st c="6149">识别那些由非价值驱动的技术带来的干扰。</st>
    <st c="6208">你最高的目标是让你的客户愿意使用你的平台，而不是</st> <st c="6286">强迫他们。</st>'
- en: '**<st c="6297">Inner source</st>**<st c="6310">: Every line of code of your
    platform is accessible to your internal organization.</st> <st c="6394">Issues
    and problems are tracked publicly and their resolution is</st> <st c="6458">documented.</st>
    <st c="6471">Where relevant, maintain a FAQ.</st> <st c="6503">Everyone can propose
    a feature, a bugfix, lines of code, and documentation to improve your platform.</st>
    <st c="6604">Drive community events and foster exchange between you and</st> <st
    c="6663">all users.</st>'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="6297">内部源代码</st>**<st c="6310">：你平台的每一行代码都对你的内部组织开放。</st> <st c="6394">问题和故障会公开跟踪，并且它们的解决方案会</st>
    <st c="6458">被记录。</st> <st c="6471">在相关情况下，保持一个常见问题解答（FAQ）。</st> <st c="6503">任何人都可以提出功能、修复漏洞、提交代码和文档，以改进你的平台。</st>
    <st c="6604">推动社区活动，促进你与</st> <st c="6663">所有用户之间的交流。</st>'
- en: <st c="6673">Those principles try to cover some different viewpoints and levels
    of detail.</st> <st c="6752">Which is the right one for you is difficult to say.</st>
    <st c="6804">Don’t be afraid to adjust wording or the principles over time if
    you recognize that they</st> <st c="6893">don’t work.</st>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6673">这些原则试图涵盖不同的观点和细节层次。</st> <st c="6752">哪个适合你很难说。</st> <st c="6804">如果你发现它们</st>
    <st c="6893">不起作用，不要害怕随着时间调整措辞或原则。</st>
- en: <st c="6904">Product mindset as the core principle</st>
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6904">产品思维作为核心原则</st>
- en: <st c="6942">Your internal customers should want to use your platform.</st>
    <st c="7001">They shouldn’t be</st> <st c="7019">fo</st><st c="7021">rced to.</st>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6942">你的内部客户应该希望使用你的平台。</st> <st c="7001">他们不应该被</st> <st c="7019">强迫使用。</st>
- en: <st c="7030">Defining your own principles</st>
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="7030">定义你自己的原则</st>
- en: <st c="7059">After you</st> <st c="7070">adapt to the idea of principles, all
    of them look good, right?</st> <st c="7133">Now, the challenge is to define and
    write them in a way that will be adapted by your team.</st> <st c="7224">They
    need to fit into your wording and your organization’s internal approach to defining</st>
    <st c="7313">similar elements.</st>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7059">一旦你</st> <st c="7070">适应了原则的理念，所有原则看起来都不错，对吧？</st> <st c="7133">现在，挑战是以团队能够采纳的方式定义并写出这些原则。</st>
    <st c="7224">它们需要融入你的用词，并与公司内部定义</st> <st c="7313">类似元素的方式相契合。</st>
- en: <st c="7330">Principles can be derived from your corporate values, customer
    feedback, or a team’s internal workshop.</st> <st c="7435">Whatever you do, it
    is important to have transparency about the origin of the principles; otherwise,
    the team may feel excluded.</st> <st c="7564">You will also need to iterate over
    them a couple of times to sharpen the wording and boil it down to the elemental
    things.</st> <st c="7687">As with all principles, they shouldn’t be too long,
    but they should also not be too short.</st> <st c="7778">The sentences should
    be structured short and crisp without any nesting or conditions.</st> <st c="7864">Conditions
    are either a sign that you are unsure about the principle or that it can be two
    principles.</st> <st c="7967">The right length is when you address one topic,
    give it two or three explaining sentences, and maybe a motivation</st> <st c="8081">or
    rationalization.</st>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7330">原则可以来源于你的公司价值观、客户反馈或团队的内部研讨会。</st> <st c="7435">无论你做什么，关于原则的来源保持透明非常重要；否则，团队可能会感到被排除在外。</st>
    <st c="7564">你还需要对它们进行几轮迭代，精炼措辞，并将其浓缩到最基本的内容。</st> <st c="7687">与所有原则一样，它们不应过长，但也不应过短。</st>
    <st c="7778">句子应简洁明了，不应包含嵌套或条件。</st> <st c="7864">条件往往意味着你对原则不确定，或者说明它可以分成两个原则。</st>
    <st c="7967">合适的长度是：你只处理一个主题，给出两到三句解释，也许还加上一些动机</st> <st c="8081">或合理化。</st>
- en: <st c="8100">I have seen two ways of writing that are very efficient in defining
    a principle and finding frequent quotations and adaptation, and sometimes, it’s
    in Slack/Teams channel descriptions or</st> <st c="8288">email</st> <st c="8293">footers.</st>
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8100">我看到过两种非常高效的写作方式，它们在定义原则和寻找常见引用及适应性时非常有效，有时，这些原则出现在 Slack/Teams
    的频道描述或</st> <st c="8288">电子邮件</st> <st c="8293">页脚中。</st>
- en: <st c="8302">Command and rationalize</st>
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <st c="8302">命令和合理化</st>
- en: <st c="8326">The</st> **<st c="8331">command and rationalization</st>** <st
    c="8358">approach usually works well for organizations that have</st> <st c="8415">stronger
    hierarchies, where the platform team may have just been formed or where the whole
    initiative is looked at with a skeptical eye.</st> <st c="8552">This requires
    a more strict direction for initialization.</st> <st c="8610">However, I believe
    that those principles should be reworked over time and the input of the platform
    engineering team and end user should</st> <st c="8747">be gathered.</st>
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8326">**<st c="8331">命令和合理化</st>**<st c="8358">方法通常适用于那些层级较强的组织，在这些组织中，平台团队可能刚刚成立，或者整个倡议会被持怀疑态度审视。</st>
    <st c="8415">这要求在初始化时有更严格的指导。</st> <st c="8552">然而，我认为这些原则应随着时间的推移进行调整，并应收集平台工程团队和最终用户的意见。</st>
- en: <st c="8759">Here is an outline showing how to</st> <st c="8794">write it:</st>
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8759">以下是一个大纲，展示如何</st> <st c="8794">编写它：</st>
- en: '**<st c="8803">Title</st>**<st c="8809">: Every principle has something like
    a title that should stick in</st> <st c="8876">one’s head.</st>'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="8803">标题</st>**<st c="8809">：每个原则都有类似标题的内容，应该牢记在</st> <st c="8876">脑海中。</st>'
- en: <st c="8887">The title should be followed by the list</st> <st c="8929">of commands:</st>
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="8887">标题后应跟随</st> <st c="8929">命令列表：</st>
- en: <st c="8941">The initial command sets</st> <st c="8967">the direction</st>
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="8941">初始命令设定了</st> <st c="8967">方向</st>。
- en: <st c="8980">Then, there should be a direction on why</st> <st c="9022">that’s
    relevant</st>
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="8980">接着，应说明为什么</st> <st c="9022">这很重要</st>。
- en: <st c="9037">After that, there should be some more detailed actions</st> <st
    c="9093">to consider</st>
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="9037">之后，应该考虑一些更详细的操作</st> <st c="9093">步骤</st>。
- en: <st c="9104">Then, there should be another action</st> <st c="9142">or rationale</st>
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="9104">然后，应再给出一个行动</st> <st c="9142">或理由</st>。
- en: <st c="9154">Here, the responsibility should be handed over to</st> <st c="9205">the
    reader</st>
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="9154">在这里，责任应交给</st> <st c="9205">读者</st>。
- en: <st c="9215">Here’s an example based on the</st> <st c="9247">preceding outline:</st>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9215">这是基于前述大纲的一个示例：</st>
- en: '**<st c="9265">Title</st>**<st c="9271">:</st> *<st c="9274">Self-Service First</st>*<st
    c="9292">:</st>'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9265">标题</st>**<st c="9271">:</st> *<st c="9274">自服务优先</st>*<st c="9292">:</st>'
- en: <st c="9294">Every platform capability must be utilizable by the end user without
    interacting with the platform</st> <st c="9393">engineering team</st>
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="9294">每个平台功能必须能够由最终用户使用，而无需与平台</st> <st c="9393">工程团队</st>进行交互。
- en: <st c="9409">This enables the self-determination of the user and offloads work
    from the platform and</st> <st c="9498">DevOps teams</st>
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="9409">这使得用户能够自我决定，并减轻平台和</st> <st c="9498">DevOps 团队</st>的工作负担。
- en: <st c="9510">Don’t prescribe specific ways, but guide through</st> <st c="9560">best
    practices</st>
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="9510">不要规定具体方法，而是通过</st> <st c="9560">最佳实践</st>进行引导。
- en: <st c="9574">Open the possibility of full transparency of your end user’s deployments
    and allow fine-grained access to</st> <st c="9681">operational data</st>
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="9574">打开最终用户部署完全透明的可能性，并允许对</st> <st c="9681">操作数据</st>进行细粒度的访问。</st>
- en: <st c="9697">You are providing a highly valuable set of tools and automation
    that simplify the software’s development</st> <st c="9803">and operation</st>
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="9697">你提供的是一套极有价值的工具和自动化系统，简化了软件的开发</st> <st c="9803">和运营</st>。
- en: <st c="9816">As you can see, this style tells the reader what to do.</st> <st
    c="9873">The title is strong and says,</st> *<st c="9903">Whatever you do, first
    think about making it self-service available</st>*<st c="9970">. Take care with
    such number-style naming first.</st> <st c="10019">This doesn’t work if you name
    every principle with first, primary, or</st> <st c="10089">overarching.</st> <st
    c="10102">However, here, you can see that from all of the potential principles
    you are writing down, this one will always be first, and will most likely overrule</st>
    <st c="10254">other principles.</st>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9816">正如你所见，这种风格告诉读者该做什么。</st> <st c="9873">标题很有力地表达了，</st> *<st c="9903">无论你做什么，首先要考虑让它可自服务化</st>*<st
    c="9970">。首先处理这样的数字风格命名。</st> <st c="10019">如果每个原则都以“首先”，“首要”或</st> <st c="10089">“总体”命名，这样的做法就行不通了。</st>
    <st c="10102">然而，在这里，你可以看到，所有你写下的潜在原则中，这个原则永远是第一位的，并且很可能会凌驾于</st> <st c="10254">其他原则之上。</st>
- en: <st c="10271">Sentences II-IV detail and rationalize the first sentence.</st>
    <st c="10331">They provide supportive arguments and guidelines to consider.</st>
    <st c="10393">The closing statement is as important as the title or first sentence.</st>
    <st c="10463">This must be a handover statement.</st> <st c="10498">It is like
    a call to action, but not in a way that asks someone to do something – this is
    what happened in the sentences before.</st> <st c="10627">It must be addressed
    on a personal level, with a direct speech toward the reader.</st> <st c="10709">Have
    a look at the list of examples for other ideas on how to close</st> <st c="10777">a
    principle.</st>
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10271">第二至第四句详细说明并合理化了第一句。</st> <st c="10331">它们提供了支持的论点和考虑的指导原则。</st>
    <st c="10393">结束语和标题或第一句话一样重要。</st> <st c="10463">这必须是一个交接语句。</st> <st c="10498">它像是号召行动，但并不是要求别人做什么——这是前面句子所要表达的。</st>
    <st c="10627">它必须以个人层面来表达，直接对读者说话。</st> <st c="10709">请查看下面的示例列表，了解如何为原则做结尾的其他想法。</st>
    <st c="10777">一个原则的结束语。</st>
- en: <st c="10789">Platform teams will grow their internal trust and motivation over
    time, which demands a different style</st> <st c="10894">of</st> <st c="10896">principles.</st>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10789">平台团队将随着时间的推移增长他们的内部信任和动力，这需要一种不同风格的</st> <st c="10894">原则。</st>
- en: <st c="10908">We will …</st>
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <st c="10908">我们将…</st>
- en: <st c="10918">Mature platform engineering teams</st> <st c="10953">and young
    organizations require principles that call their</st> *<st c="11012">WE</st>*
    <st c="11014">feeling.</st> <st c="11024">This is almost like a vow of brotherhood
    and sisterhood.</st> <st c="11081">However, you also need to know your team well
    and handle it with care.</st> <st c="11152">Not everyone likes this way of defining
    principles, as they are calling for strong bonds and communication.</st> <st c="11260">This
    is just a personal question and nothing negative, but you might lose valuable
    team members if you ignore it.</st> <st c="11374">This is how I would define a</st>
    *<st c="11403">We</st>* *<st c="11406">will</st>* <st c="11410">principle:</st>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10918">成熟的平台工程团队</st> <st c="10953">和年轻的组织需要能够触动他们</st> *<st c="11012">我们</st>*
    <st c="11014">情感的原则。</st> <st c="11024">这几乎就像是兄弟姐妹般的誓言。</st> <st c="11081">然而，你也需要充分了解你的团队，并谨慎处理。</st>
    <st c="11152">并非每个人都喜欢这种定义原则的方式，因为它们呼吁强大的纽带和沟通。</st> <st c="11260">这只是一个个人问题，没有负面影响，但如果忽视它，你可能会失去宝贵的团队成员。</st>
    <st c="11374">这就是我如何定义</st> *<st c="11403">我们</st>* *<st c="11406">将</st>* <st
    c="11410">的原则：</st>
- en: '**<st c="11421">Outline</st>**<st c="11429">:</st>'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="11421">大纲</st>**<st c="11429">：</st>'
- en: '**<st c="11431">Title</st>**<st c="11436">: No changes to the title; bold,
    short, and crisp,</st> <st c="11488">that’s it:</st>'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**<st c="11431">标题</st>**<st c="11436">：标题保持不变；简洁有力，简短精炼，</st> <st c="11488">就是这样：</st>'
- en: <st c="11498">The first sentence usually combines the will of the principle
    and includes a help statement to</st> <st c="11594">rationalize it</st>
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="11498">第一句话通常结合了原则的意图，并包括帮助说明，以</st> <st c="11594">合理化它</st>
- en: <st c="11608">The next</st> <st c="11617">sentences are all defining some more
    targets</st> <st c="11663">or approaches</st>
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="11608">接下来的</st> <st c="11617">句子都在定义更多的目标</st> <st c="11663">或方法</st>
- en: <st c="11676">Each sentence will start with “we,” “together,” “as a team,” “for
    our customer,” and</st> <st c="11762">so on</st>
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="11676">每个句子将以“我们”，“一起”，“作为一个团队”，“为了我们的客户”等开始，</st> <st c="11762">以此类推</st>
- en: '**<st c="11767">Example</st>**<st c="11775">:</st>'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="11767">示例</st>**<st c="11775">：</st>'
- en: '**<st c="11777">Title</st>**<st c="11782">:</st> *<st c="11785">Self-Service
    First</st>*<st c="11803">:</st>'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**<st c="11777">标题</st>**<st c="11782">：</st> *<st c="11785">自服务优先</st>*<st
    c="11803">：</st>'
- en: <st c="11805">We will provide our customers with every platform capability as
    a self-service, focusing on their</st> **<st c="11903">user experience</st>**
    <st c="11918">(</st>**<st c="11920">UX</st>**<st c="11922">) and enabling self-determined</st>
    <st c="11954">software development</st>
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="11805">我们将以自服务的方式为客户提供每一项平台功能，专注于他们的**<st c="11903">用户体验</st>** <st c="11918">（</st>**<st
    c="11920">UX</st>**<st c="11922">）并支持自主决定</st> <st c="11954">软件开发</st>
- en: <st c="11974">We provide best practices and cooperate in the definition of approaches
    that</st> <st c="12052">work best</st>
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="11974">我们提供最佳实践，并在定义最有效的方法上进行合作。</st> <st c="12052">这些方法最有效。</st>
- en: <st c="12061">Together, we create a transparent, value-generating environment
    that fosters automation and end-user-centric capabilities to simplify software
    development</st> <st c="12217">and operation</st>
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="12061">我们共同创造一个透明、创造价值的环境，促进自动化和以最终用户为中心的功能，以简化软件开发</st> <st c="12217">和操作</st>
- en: <st c="12230">What are your thoughts on this approach?</st> <st c="12272">I
    kept the principle the same so you can make a side-to-side comparison.</st> <st
    c="12345">Which one are you in</st> <st c="12366">favor of?</st>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12230">你对这种方法有何看法？</st> <st c="12272">我保持了相同的原则，这样你可以做一个并排对比。</st> <st
    c="12345">你支持哪一个？</st>
- en: <st c="12375">You can see that the</st> *<st c="12397">we will</st>* <st c="12404">is
    shorter, and a bit more complicated.</st> <st c="12445">That’s because you want
    to address the team, tell them what to focus on, and provide a reasoning behind
    it in one sentence.</st> <st c="12569">Cutting those into short sentences wouldn’t
    give the same feeling and might send the</st> <st c="12654">wrong message.</st>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12375">你可以看到，</st> *<st c="12397">我们将</st>* <st c="12404">更加简洁，但稍显复杂。</st>
    <st c="12445">这是因为你需要直接面对团队，告诉他们需要关注什么，并用一句话解释背后的理由。</st> <st c="12569">将其切割成短句会失去同样的效果，可能会传达错误的信息。</st>
- en: <st c="12668">A combination of both approaches can work well and help you to
    identify which type suits your team better.</st> <st c="12776">However, it is
    not unusual for platform teams to be happy with the mix.</st> <st c="12848">It
    might feel heavy if you have four to six principles that all are calling your</st>
    *<st c="12929">we</st>* <st c="12931">feeling, but it may also feel very pressuring
    to have a list</st> <st c="12993">of commands.</st>
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12668">两种方法的结合可以很好地发挥作用，帮助你识别哪种方式更适合你的团队。</st> <st c="12776">然而，平台团队对这种混合方式感到满意并不罕见。</st>
    <st c="12848">如果你有四到六个原则都在呼唤你的</st> *<st c="12929">我们</st>* <st c="12931">的感受，这可能会感到沉重，但如果有一长串</st>
    <st c="12993">命令</st>，它可能会给你带来很大的压力。</st>
- en: <st c="13005">Here is a summary</st> <st c="13024">of this in the</st> <st c="13039">following
    list:</st>
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13005">以下是这部分内容的总结：</st> <st c="13024">在下面的列表中：</st> <st c="13039">：</st>
- en: <st c="13054">Principles are helpful guardrails in your architectural and</st>
    <st c="13115">engineering decisions</st>
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="13054">原则是你在架构和</st> <st c="13115">工程决策中的有益护栏</st>
- en: <st c="13136">Between four to six principles</st> <st c="13168">work best</st>
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="13136">四到六个原则</st> <st c="13168">是最有效的</st>
- en: <st c="13177">If you are unsure, start with less and involve the end user and
    the platform engineers to identify the</st> <st c="13281">next principles</st>
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="13177">如果你不确定，可以从较少的原则开始，并与最终用户和平台工程师一起识别</st> <st c="13281">接下来的原则</st>
- en: <st c="13296">Frequently check your principles to see if they still suit your
    team, but don’t change them e</st><st c="13390">very</st> <st c="13396">few months</st>
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="13296">经常检查你的原则，看看它们是否仍然适合你的团队，但不要每</st><st c="13390">几</st> <st c="13396">个月就改变它们</st>
- en: <st c="13406">Developing the purpose of your platform as a product</st>
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="13406">将平台的目标发展成一种产品</st>
- en: <st c="13459">For a successful</st> <st c="13476">start to creating a platform,
    we need to define its purpose and target and how we can structure or restructure
    the platform engineering team.</st> <st c="13619">This step also helps you do
    a first iteration of your previously defined principles.</st> <st c="13704">Reflect
    on your own perception and challenge your initial definition.</st> <st c="13774">This
    will allow you to learn how to integrate two different forces and</st> <st c="13845">contradictory
    targets.</st>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13459">要成功地</st> <st c="13476">开始构建一个平台，我们需要定义其目标和方向，以及如何构建或重构平台工程团队。</st>
    <st c="13619">这一步骤还帮助你对之前定义的原则进行首次迭代。</st> <st c="13704">反思你自己的看法，并挑战你最初的定义。</st>
    <st c="13774">这将帮助你学习如何整合两种不同的力量和</st> <st c="13845">相互矛盾的目标。</st>
- en: <st c="13867">It might seem simple to start with a platform as a product.</st>
    <st c="13928">Changing the mindset, talking with customers, and providing some
    good features are all that you need.</st> <st c="14030">This is, however, only
    one part of the story.</st> <st c="14076">We have to make you aware that a cloud-native
    platform has the potential to become your organization’s powerhouse of software
    development, delivery, and operation.</st> <st c="14240">Therefore, we will introduce
    you to different concepts that you can also find in other organizational theories
    and practices, such as Kanban, Lean Inception, or</st> <st c="14401">T</st><st
    c="14402">eam Topologies.</st>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13867">一开始将平台作为产品看似简单。</st> <st c="13928">改变思维方式、与客户沟通并提供一些良好的功能，这些就是你需要做的。</st>
    <st c="14030">然而，这只是故事的一部分。</st> <st c="14076">我们需要让你意识到，云原生平台有潜力成为你组织的软件开发、交付和运营的核心动力。</st>
    <st c="14240">因此，我们将向你介绍一些不同的概念，这些概念你也能在其他组织理论和实践中找到，例如看板（Kanban）、精益起步（Lean Inception）或</st>
    <st c="14401">团队拓扑学（T</st><st c="14402">eam Topologies）</st>。
- en: <st c="14417">Understanding your own value</st>
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="14417">理解你自己的价值</st>
- en: '<st c="14446">If humans</st> <st c="14456">are really bad at one thing, then
    it is in doing estimations.</st> <st c="14519">Without a scale or any reference
    points, we have a hard time estimating correctly.</st> <st c="14602">Say, I’m
    going to ask you, what is the value of a platform for your organization?</st>
    <st c="14684">You might come up with arguments such as a faster software development
    cycle, less operational overhead, and happy engineers that reduce recruiting costs.</st>
    <st c="14839">None of it is wrong, yet nothing about it is precise.</st> <st c="14893">In
    business terms, the value of a platform as a product lies in its enablement of
    time to market, or optimizing flexibility in the cost of delay.</st> <st c="15039">In
    other words: the longer you need to put a service out into the market, the less
    value you create.</st> <st c="15140">A good platform will allow you to optimize
    this value by providing high flexibility and speed to the</st> <st c="15241">implementing
    teams.</st>'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14446">如果人类</st> <st c="14456">在某一方面确实非常糟糕，那就是做估算。</st> <st c="14519">没有尺度或参考点时，我们很难做出正确的估算。</st>
    <st c="14602">比如，我问你，平台对你组织的价值是什么？</st> <st c="14684">你可能会提出这样的论点，比如更快的软件开发周期、更少的运营开销、以及减少招聘成本的快乐工程师。</st>
    <st c="14839">这些说法都没有错，但也没有什么是精确的。</st> <st c="14893">用商业术语来说，平台作为产品的价值在于它促进了市场时间的缩短，或者优化了延迟成本的灵活性。</st>
    <st c="15039">换句话说：你将服务推向市场所需的时间越长，你创造的价值就越少。</st> <st c="15140">一个好的平台将通过提供高度的灵活性和速度来帮助你优化这个价值，</st>
    <st c="15241">从而为实施团队提供支持。</st>
- en: <st c="15260">In the</st> <st c="15267">theory of</st> **<st c="15278">cost
    of delay</st>** <st c="15291">[1], it is assumed that the capacities</st> <st
    c="15330">are fixed.</st> <st c="15342">If you want to implement three projects,
    you need to decide with which you will start.</st> <st c="15429">Each project
    brings a different value.</st> <st c="15468">If you start with all three simultaneously,
    the assumption goes so far that you will finish with everything at the same time,
    but you are not faster or slower than if you would do them one after the other.</st>
    <st c="15674">With an IDP that fosters self-service, a high level of automation
    and autonomy, reliability, and so on; you reduce the dependency on the available
    capacities, allowing multiple projects to be implemented simultaneously.</st>
    <st c="15894">Thinking further, that’s one of the reasons why public cloud providers
    are such a success.</st> <st c="15985">However, these benefits become an obstacle
    with rising complexity and wrong</st> <st c="16061">role definitions.</st>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15260">在</st> <st c="15267">延迟成本</st> **<st c="15278">成本理论（cost of delay）</st>**
    <st c="15291">[1]中，假设容量</st> <st c="15330">是固定的。</st> <st c="15342">如果你想实施三个项目，你需要决定从哪个项目开始。</st>
    <st c="15429">每个项目带来的价值不同。</st> <st c="15468">如果你同时启动所有三个项目，假设的情况是你能在同一时间完成所有项目，但无论是依次进行还是同时进行，你的速度都不会更快或更慢。</st>
    <st c="15674">有了一个支持自助服务、高度自动化和自治、可靠性等的IDP，你可以减少对可用容量的依赖，从而允许多个项目同时实施。</st> <st
    c="15894">进一步思考，这也是为什么公共云服务提供商如此成功的原因之一。</st> <st c="15985">然而，随着复杂性的增加和角色定义的错误，这些好处变成了障碍。</st>
- en: '![Figure 2.1: Cost of delay without and with a platform](img/B31164_02_01.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1：没有平台与有平台的延迟成本](img/B31164_02_01.jpg)'
- en: '<st c="16432">Figure 2.1: Cost of delay without and with a platform</st>'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16432">图 2.1：没有平台与有平台的延迟成本</st>
- en: <st c="16485">The preceding figure shows the difference between implementing
    projects without and with a platform.</st> <st c="16587">On the left side, we
    can see at least two delays, which means the second project starts providing value
    late in the year or period.</st> <st c="16719">This delay can be caused by manual
    processes, dependencies on other teams and team members, or various technical
    steps that aren’t integrated with each other.</st> <st c="16878">On the right
    side, a simultaneous start of the projects will result in a substantial value
    increase due to a very good platform.</st> <st c="17007">Remember that the area
    below the lines represents</st> <st c="17057">the value.</st>
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16485">前面的图展示了在没有平台和有平台的情况下实施项目的区别。</st> <st c="16587">左侧我们可以看到至少有两个延迟，这意味着第二个项目在年末或某个期间开始提供价值。</st>
    <st c="16719">这种延迟可能是由手动流程、对其他团队和团队成员的依赖，或者没有彼此集成的各种技术步骤所导致的。</st> <st c="16878">右侧，项目的同时启动将由于非常好的平台带来显著的价值增长。</st>
    <st c="17007">请记住，下面的区域代表的是</st> <st c="17057">价值。</st>
- en: <st c="17067">Important note</st>
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17067">重要提示</st>
- en: <st c="17082">Cloud-native platforms, such as IDPs, are breaking the theory
    of cost of delay, allowing a fast and early value generation.</st> <st c="17207">The
    better the platform, the fewer dependencies on capacities you have, and the more
    efficient teams can implement and operate their products, the more value your
    organizati</st><st c="17380">on</st> <st c="17384">can generate.</st>
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17082">云原生平台，如IDP，正在打破延迟成本理论，使得快速且早期的价值生成成为可能。</st> <st c="17207">平台越好，对能力的依赖越少，团队实现和运营产品的效率越高，你的组织能创造的价值就越多。</st>
- en: <st c="17397">From a system to a platform as a product</st>
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="17397">从系统到平台作为产品</st>
- en: '<st c="17438">In the end, a product is nothing more than an object with services
    made of your customer’s demand, your</st> *<st c="17543">business</st>* <st c="17551">interests,
    some technology, and a holistic UX.</st> <st c="17599">If one of these elements
    is lacking, your product will fail.</st> <st c="17660">In a project world, we
    have three cornerstones constantly pulling on each other: time, money, and scope.</st>
    <st c="17765">This is known</st> <st c="17778">as the</st> **<st c="17786">iron
    triangle</st>**<st c="17799">. Finding a balance between those directions requires
    careful adjustments.</st> <st c="17874">But as we want to get rid of the project
    perspective, we will introduce you here to the product iron triangle.</st> <st
    c="17985">This consists of feasibility, desirability,</st> <st c="18029">and viability.</st>'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17438">最终，一个产品无非是由客户需求、你的</st> *<st c="17543">业务</st>* <st c="17551">利益、一些技术以及整体用户体验（UX）构成的服务对象。</st>
    <st c="17599">如果缺少这些元素中的任何一个，你的产品将会失败。</st> <st c="17660">在项目的世界里，我们有三个基石在不断拉扯着彼此：时间、金钱和范围。</st>
    <st c="17765">这被称为</st> <st c="17778">**铁三角**</st> <st c="17799">。在这三个方向之间找到平衡需要仔细的调整。</st>
    <st c="17874">但由于我们希望摆脱项目视角，我们将在这里介绍产品的铁三角。</st> <st c="17985">它由可行性、可取性</st>
    <st c="18029">和可行性组成。</st>
- en: '![Figure 2.2: The iron triangle of products](img/B31164_02_02.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图2.2：产品的铁三角](img/B31164_02_02.jpg)'
- en: '<st c="18098">Figure 2.2: The iron triangle of products</st>'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18098">图2.2：产品的铁三角</st>
- en: <st c="18139">We can find</st> <st c="18152">within that balance different forces
    pulling on the product.</st> <st c="18213">So, we have to ask ourselves the</st>
    <st c="18246">following questions:</st>
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18139">我们可以在这种平衡中找到不同的力量在拉扯产品。</st> <st c="18213">所以，我们必须问自己以下问题：</st>
- en: <st c="18266">What need or job do we solve for the customer</st> <st c="18313">and
    user?</st>
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="18266">我们为客户</st> <st c="18313">和用户解决了什么需求或任务？</st>
- en: <st c="18322">What does our customer want?</st> <st c="18352">(Usually, they</st>
    <st c="18367">don’t know.)</st>
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="18322">我们的客户想要什么？</st> <st c="18352">(通常，他们</st> <st c="18367">并不知道。）</st>
- en: <st c="18379">How can we make</st> <st c="18396">it work?</st>
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="18379">我们如何使</st> <st c="18396">它运作起来？</st>
- en: <st c="18404">Which technology should</st> <st c="18429">we use?</st>
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="18404">我们应该使用什么技术？</st> <st c="18429">该使用什么技术？</st>
- en: <st c="18436">How can we make a sustainable business</st> <st c="18476">from
    it?</st>
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="18436">我们如何才能从中建立一个可持续的业务</st> <st c="18476">呢？</st>
- en: <st c="18484">We can now combine this product perspective with a</st> <st c="18536">platform
    perspective.</st>
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18484">我们现在可以将这种产品视角与</st> <st c="18536">平台视角结合起来。</st>
- en: <st c="18557">“</st>*<st c="18559">A digital platform is a foundation of self-service
    APIs, tools, services, knowledge and support which are arranged as a compelling
    internal product</st>*<st c="18706">” Even</st> *<st c="18714">Bottcher</st>*
    <st c="18722">once described a platform like that</st> *<st c="18759">[2]</st>*<st
    c="18762">. Furthermore, he said, “</st>*<st c="18787">Autonomous delivery teams
    can make use of the platform to deliver product features at a higher pace, with</st>*
    *<st c="18894">reduced coordination</st>*<st c="18914">.”</st>
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18557">“</st>*<st c="18559">数字平台是一个由自服务API、工具、服务、知识和支持组成的基础，这些要素被安排成一个引人注目的内部产品</st>*<st
    c="18706">” 甚至</st> *<st c="18714">Bottcher</st>* <st c="18722">曾这样描述过一个平台</st>
    *<st c="18759">[2]</st>*<st c="18762">。此外，他还说，“</st>*<st c="18787">自主交付团队可以利用平台以更快的速度交付产品功能，同时</st>*
    *<st c="18894">减少协调</st>*<st c="18914">。”</st>
- en: <st c="18916">Platforms and products have a huge overlap.</st> <st c="18961">Both
    do</st> <st c="18969">the following:</st>
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18916">平台和产品有很大的重叠。</st> <st c="18961">两者都</st> <st c="18969">具备以下特点：</st>
- en: <st c="18983">They must advocate for their usefulness and market it to</st>
    <st c="19041">internal teams</st>
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="18983">他们必须倡导其有用性并将其推广到</st> <st c="19041">内部团队</st>
- en: <st c="19055">They should be carefully designed</st> <st c="19090">and accurate</st>
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="19055">它们应该经过精心设计</st> <st c="19090">并且准确</st>
- en: <st c="19102">They are designed with the user in mind or, even better, co-designed
    with users/devs (with a focus</st> <st c="19202">on UX/DevEx).</st>
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="19102">它们是以用户为中心设计的，或者更好的是，与用户/开发者共同设计（关注</st> <st c="19202">UX/DevEx</st>）。</st>
- en: <st c="19215">They evolve offered capabilities with time and need a</st> <st
    c="19270">clear roadmap.</st>
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="19215">他们随着时间推移不断发展提供的能力，并且需要一份</st> <st c="19270">清晰的路线图。</st>
- en: <st c="19284">When developing</st> <st c="19301">a clear vision and purpose
    for your platform as a product, these aspects should be considered and checked.</st>
    <st c="19408">You will naturally find that for the product iron triangle, two
    roles will be</st> <st c="19486">immediately assigned.</st>
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19284">在开发</st> <st c="19301">平台作为产品的清晰愿景和目标时，应考虑并检查这些方面。</st> <st c="19408">你会自然发现，对于产品铁三角，两个角色会被</st>
    <st c="19486">立即分配。</st>
- en: <st c="19507">The platform’s product owner will handle viability, while the
    platform engineer will handle feasibility.</st> <st c="19613">But almost every
    organization lacks the role of the person who handles desirability.</st> <st c="19698">This</st>
    <st c="19702">role is commonly known as</st> **<st c="19729">Developer</st>**
    **<st c="19739">Experience</st>** <st c="19749">(</st>**<st c="19751">DevX</st>**<st
    c="19755">).</st>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19507">平台的产品负责人将处理可行性，而平台工程师将处理可行性。</st> <st c="19613">但几乎每个组织都缺少负责可取性的人。</st>
    <st c="19698">这个</st> <st c="19702">角色通常被称为</st> **<st c="19729">开发者</st>** **<st
    c="19739">体验</st>** <st c="19749">(</st>**<st c="19751">DevX</st>**<st c="19755">)。</st>
- en: <st c="19758">Without a DevX, a platform engineering team</st> <st c="19803">is
    incomplete.</st>
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19758">没有DevX，一个平台工程团队</st> <st c="19803">是不完整的。</st>
- en: <st c="19817">Important note</st>
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19817">重要提示</st>
- en: <st c="19832">The platform’s product owner handles viability.</st> <st c="19881">The
    platform engineers handle feasibility.</st> <st c="19924">The DevX handles the
    desirability.</st> <st c="19959">These roles define the success of a p</st><st
    c="19996">latform as</st> <st c="20008">a product.</st>
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19832">平台的产品负责人处理可行性。</st> <st c="19881">平台工程师处理可行性。</st> <st c="19924">DevX负责可取性。</st>
    <st c="19959">这些角色定义了平台作为</st><st c="19996">一个产品的成功。</st>
- en: <st c="20018">Stakeholders and their impact on your backlog</st>
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="20018">利益相关者及其对你的待办事项的影响</st>
- en: <st c="20064">Talking</st> <st c="20072">about stakeholders and customers in
    an inner corporate world unfolds a landscape of individuals with many interests.</st>
    <st c="20190">To focus on what matters, I recommend you categorize them into</st>
    <st c="20253">three groups:</st>
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20064">谈论</st> <st c="20072">利益相关者和客户时，企业内部世界展开了一幅由许多有不同利益的人组成的景象。</st>
    <st c="20190">为了聚焦重要内容，我建议将他们分为</st> <st c="20253">三组：</st>
- en: '**<st c="20266">Users</st>**<st c="20272">: The group of people who are really
    going to use your platform/product.</st> <st c="20346">In our case, it will be
    developers</st> <st c="20381">or DevOps.</st>'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="20266">用户</st>**<st c="20272">：真正会使用你的平台/产品的一群人。</st> <st c="20346">在我们的案例中，使用者将是开发者</st>
    <st c="20381">或DevOps人员。</st>'
- en: '**<st c="20391">Customers</st>**<st c="20401">: People who have budget power
    and/or make decisions for a whole team, department,</st> <st c="20485">or similar.</st>'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="20391">客户</st>**<st c="20401">：具有预算决策权和/或为整个团队、部门做出决策的人，</st> <st
    c="20485">或类似角色。</st>'
- en: '**<st c="20496">Influencers</st>**<st c="20508">: Other people who have an
    interest in your platform, such as security or</st> <st c="20583">operations teams.</st>'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="20496">影响者</st>**<st c="20508">：其他对你的平台感兴趣的人，如安全团队或</st> <st c="20583">运维团队。</st>'
- en: <st c="20600">You are</st> <st c="20608">building your platform for those stakeholder
    groups, not for yourself!</st> <st c="20680">While defining the purpose of your
    platform, you should look at the different stakeholder groups from different perspectives.</st>
    <st c="20806">Their needs might change over time, which you can find out with
    frequent iterations and probes.</st> <st c="20902">When you define features for
    the backlog, make clear from which stakeholders those requirements are coming.</st>
    <st c="21010">If some time has passed, usually six months is a good time frame,
    then you should reprioritize the feature requests with your stakeholders.</st>
    <st c="21150">This, on the other hand, will also impact the purpose of your platform.</st>
    <st c="21222">Let’s look at</st> <st c="21236">an example.</st>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20600">你正在</st> <st c="20608">为那些利益相关者群体构建平台，而不是为了自己！</st> <st c="20680">在定义平台的目标时，你应当从不同的角度来看待不同的利益相关者群体。</st>
    <st c="20806">他们的需求可能会随着时间变化，你可以通过频繁的迭代和调查来了解这些变化。</st> <st c="20902">当你为待办事项定义功能时，要明确这些需求来自哪些利益相关者。</st>
    <st c="21010">如果已经过去一段时间，通常六个月是一个合适的时间框架，那么你应该与利益相关者一起重新优先排序功能请求。</st> <st c="21150">另一方面，这也会影响平台的目标。</st>
    <st c="21222">让我们看一个</st> <st c="21236">例子。</st>
- en: <st c="21247">Some while ago, we were asked to stabilize the customer’s platform.</st>
    <st c="21316">We knew a little about the workload, but the overall system was
    unreliable and barely served as a useful system.</st> <st c="21429">Fast forward,
    after a couple of weeks of work had passed, new stakeholders had popped up.</st>
    <st c="21519">They became interested in the platform as it automatically adjusted
    its size to fit the workload, and people are generally happy with the fast and
    uncomplicated onboarding.</st> <st c="21692">Besides, a single tenant deployment
    for strict isolation was given during the former implementation.</st> <st c="21793">The
    new stakeholders were from a data science department and were looking for an easy
    approach to run their models without becoming experts.</st> <st c="21934">The
    cloud provider they used was already too complex, as they just focused on machine
    learning.</st> <st c="22030">The platform owner agreed to provide a couple of
    weeks of capacity to implement the tooling on top of the platform needed by the
    data scientists.</st> <st c="22176">Now, being far away from perfection, the implementation
    and platform were good enough to be easy to use, cheap, and ensured any data protection
    regulations.</st> <st c="22333">Fast forward again to the modern day, and the
    platform team’s main purpose is to provide for data science teams’ isolated environments,
    which come with a whole bunch of tools and are torn down when their job is done.</st>
    <st c="22550">Also, the platform can still run any other workloads, there is currently
    no demand</st> <st c="22633">for it.</st>
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21247">不久前，我们被要求稳定客户的平台。</st> <st c="21316">我们对工作负载了解不多，但整体系统不可靠，几乎无法作为一个有用的系统。</st>
    <st c="21429">几周后，经过一段时间的工作，新利益相关者出现了。</st> <st c="21519">他们对平台产生了兴趣，因为它可以自动调整大小以适应工作负载，并且人们普遍对快速且简便的入驻过程感到满意。</st>
    <st c="21692">此外，在之前的实现过程中，提供了严格隔离的单租户部署。</st> <st c="21793">这些新利益相关者来自数据科学部门，他们希望能够轻松运行自己的模型，而不必成为专家。</st>
    <st c="21934">他们使用的云服务提供商已经过于复杂，因为他们只专注于机器学习。</st> <st c="22030">平台所有者同意提供几周的资源，用于在平台上实施数据科学家所需的工具。</st>
    <st c="22176">尽管离完美还很远，但实现和平台足够好，易于使用，成本低廉，并且确保了所有的数据保护法规。</st> <st c="22333">再过一段时间，平台团队的主要目标是为数据科学团队提供隔离的环境，这些环境配备了一整套工具，并且在完成任务后被拆除。</st>
    <st c="22550">此外，平台仍然可以运行任何其他工作负载，目前对此没有需求。</st> <st c="22633">暂无需求。</st>
- en: <st c="22640">This real-world example shows that sometimes the external influence
    is stronger than your own drive, but it can lead to higher acceptance and adoption
    throughout</st> <st c="22803">the organization.</st>
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22640">这个现实世界的例子表明，有时外部影响力比你自己的推动力更强，但它能导致更高的接受度和整个组织的采纳。</st> <st c="22803">该组织的采纳情况。</st>
- en: <st c="22820">Important note</st>
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22820">重要提示</st>
- en: <st c="22835">In the end, you built a platform as a product for your stakeholders,
    primarily the users</st><st c="22924">, and not</st> <st c="22934">for yourself.</st>
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22835">最终，你建立了一个平台，作为一个面向利益相关者的产品，主要是面向用户</st><st c="22924">，而不是</st>
    <st c="22934">为了你自己。</st>
- en: <st c="22947">Challenging Conway’s law</st>
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="22947">挑战康威定律</st>
- en: '[PRE0]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="23138">I believe one</st> <st c="23152">of the top purposes of a platform
    is to do things better than they currently are.</st> <st c="23235">For this, we
    have to challenge an organization’s status quo.</st> <st c="23296">Companies reorganize
    themselves continuously, exchanging responsibilities and adjusting their structures.</st>
    <st c="23402">But in the end, the organization will stay the same.</st> <st c="23455">That’s
    Conways’ fault – at least he described his observations of organizations.</st>
    <st c="23536">Platforms are here to disrupt and harmonize; utilizing, on the one
    hand, the DevOps methodologies to identify bottlenecks and disrupt those structures,
    and, on the other hand, harmonizing the efforts of the specialist teams into a</st>
    <st c="23767">unified environment.</st>
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23138">我认为平台的主要目标之一是比目前的状态做得更好。</st> <st c="23152">为此，我们必须挑战组织的现状。</st>
    <st c="23235">公司会不断进行重组，交换责任并调整结构。</st> <st c="23296">但最终，组织结构保持不变。</st> <st c="23402">这就是康威的定律——至少他描述了他对组织的观察。</st>
    <st c="23455">平台的存在是为了颠覆和协调；一方面，运用 DevOps 方法学识别瓶颈并打破这些结构，另一方面，协调专业团队的努力，形成一个</st>
    <st c="23767">统一的环境。</st>
- en: <st c="23787">As a platform team, you should first define your target and an
    ideology you want to follow to fulfill your purpose before you are forced to follow
    your organization’s structure.</st> <st c="23966">Sadly, this leads to political
    games – how to gain more power, how to have the most users, and who has the best
    connections for driving decisions.</st> <st c="24113">But don’t be too naive to
    believe that having a nice platform with some fantastic features will be enough
    to</st> <st c="24222">be successful.</st>
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23787">作为一个平台团队，你应该首先定义你的目标和你希望遵循的理念，以便在被迫遵循组织结构之前实现你的目标。</st> <st c="23966">可惜的是，这往往导致政治游戏——如何获得更多权力，如何拥有最多用户，以及谁有最好的资源来推动决策。</st>
    <st c="24113">但不要太天真，以为拥有一个不错的平台和一些出色的功能就足以</st> <st c="24222">取得成功。</st>
- en: <st c="24236">Therefore, you will need a good definition of your team’s purpose
    to keep the direction in stormy times, move on when everything wants to hold you
    back, or keep you in line when you have too much speed and traction.</st> <st
    c="24453">It’s there to help you keep</st> <st c="24481">a balance.</st>
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24236">因此，你需要对团队的目标有清晰的定义，以便在风雨飘摇时保持方向，在一切都想拖住你时继续前进，或者在你过于迅速和具有牵引力时保持你在正轨上。</st>
    <st c="24453">它旨在帮助你保持</st> <st c="24481">平衡。</st>
- en: <st c="24491">To bring this all together and save it for your team and afterworld,
    you can use</st> *<st c="24573">The Platform Engineering Purpose Canvas</st>*
    <st c="24612">as a starting point.</st> <st c="24634">You can use the following
    template (</st>[<st c="24670">https://miro.com/miroverse/platform-engineering-purpose-canvas-template/</st>](https://miro.com/miroverse/platform-engineering-purpose-canvas-template/)<st
    c="24743">) or go ahead and create it on</st> <st c="24775">your own.</st>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24491">为了将这一切汇聚起来并为你的团队和未来保存，你可以使用</st> *<st c="24573">平台工程目标画布</st>*
    <st c="24612">作为起点。</st> <st c="24634">你可以使用以下模板（</st>[<st c="24670">https://miro.com/miroverse/platform-engineering-purpose-canvas-template/</st>](https://miro.com/miroverse/platform-engineering-purpose-canvas-template/)<st
    c="24743">），或者自己创建一个。</st>
- en: "![Figure 2.3: Platform Engineering Purpose Canvas \uFEFF[3] (The image is intended\
    \ as a visual reference; the textual information isn't essential.)](img/B31164_02_03.jpg)"
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: "![图 2.3：平台工程目标画布 \uFEFF[3]（此图仅作为视觉参考，文本信息并非关键内容。）](img/B31164_02_03.jpg)"
- en: '<st c="25716">Figure 2.3: Platform Engineering Purpose Canvas [3] (The image
    is intended as a visual reference; the textual information isn''t essential.)</st>'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25716">图 2.3：平台工程目标画布 [3]（此图仅作为视觉参考，文本信息并非关键内容。）</st>
- en: <st c="25855">As we focus on</st> <st c="25871">designing and creating a platform
    as a product, we will not go any further into the details of platform engineering
    teams, how to set them up, and provide the right change management approaches.</st>
    <st c="26066">There are other books and methods that focus on this; therefore,
    we recommend that you check out</st> *<st c="26163">Team Topologies</st>* <st
    c="26178">if you are also interested in team</st> <st c="26214">development</st>
    *<st c="26226">[4]</st>*<st c="26229">.</st>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25855">由于我们专注于</st> <st c="25871">设计和创建一个作为产品的平台，我们将不会进一步探讨平台工程团队的详细信息，如何建立它们以及提供正确的变更管理方法。</st>
    <st c="26066">还有其他专注于此的书籍和方法；因此，我们建议您查看</st> *<st c="26163">团队拓扑</st>* <st c="26178">如果您对团队</st>
    <st c="26214">开发也感兴趣 *<st c="26226">[4]</st>*<st c="26229">。</st>
- en: <st c="26230">Equipped with your platform purpose, we can take on the next challenge
    of creating your platform architecture step by step.</st> <st c="26355">In the
    next section, we will create a reference architecture and other diagrams for you</st><st
    c="26442">r platform as</st> <st c="26457">a product.</st>
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26230">凭借您的平台目的，我们可以逐步接受创建您的平台架构的下一个挑战。</st> <st c="26355">在接下来的部分，我们将为您创建一个参考架构和其他图表</st><st
    c="26442">，以产品的形式呈现。</st>
- en: <st c="26467">Exploring platform architecture – layers, components, and meta-dependencies</st>
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="26467">探索平台架构 – 层次结构、组件和元依赖关系</st>
- en: <st c="26543">The navigation</st> <st c="26558">for your platform journey is
    defined by the reference architecture on which you can align your whole implementation.</st>
    <st c="26676">Architecture, and especially architectural diagrams, are not made
    for eternity.</st> <st c="26756">They are a</st> <st c="26767">framework, a blueprint
    you have to orient on, but they can and should be changed over time due to the
    evolution of the given market solutions, whether they are open or</st> <st c="26935">closed
    source.</st>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26543">您的平台旅程的导航由参考架构定义，您可以根据这一架构来调整整体实施。</st> <st c="26676">架构，特别是架构图，不是永恒的。</st>
    <st c="26756">它们是</st> <st c="26767">一个框架，一个蓝图，您必须根据它们进行定位，但是随着市场解决方案的演变，无论它们是开源的还是</st>
    <st c="26935">闭源的，它们可以并且应该随时间变化。</st>
- en: <st c="26949">To make certain parts better understandable, we have to give you
    some tools and products on hand.</st> <st c="27048">Therefore, we</st> <st c="27061">are
    in favor of highlighting open source over commercial solutions.</st> <st c="27130">We
    don’t want to give you any bias, so always be aware that for everything we mention,
    there are at least a handful of options available.</st> <st c="27268">Some tools
    we might use as a reference are chosen because we know them better or because
    we see them more often used in the community</st> <st c="27402">than others.</st>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26949">为了使某些部分更易于理解，我们必须为您提供一些现成的工具和产品。</st> <st c="27048">因此，我们</st>
    <st c="27061">更倾向于突出开源解决方案而不是商业解决方案。</st> <st c="27130">我们不希望给您任何偏见，因此请始终注意，对于我们提到的每件事情，至少有数种选择可供选择。</st>
    <st c="27268">我们可能选择某些工具作为参考，因为我们更了解它们，或者因为我们看到它们在社区中更常用</st> <st c="27402">比其他工具。</st>
- en: <st c="27414">Creating architecture should never include only one perspective.</st>
    <st c="27480">As with every previous topic, we have to consider the different
    angles from which stakeholders look at a platform.</st> <st c="27595">I don’t
    want to give you a full set of the traditional enterprise architecture management
    tools on hand, but I would like to provide you with certain relevan</st><st c="27752">t
    visualizations</st> <st c="27770">and tools.</st>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27414">创建架构永远不应该只包括一个视角。</st> <st c="27480">与以往每个主题一样，我们必须考虑各利益相关者从不同角度看待平台的情况。</st>
    <st c="27595">我不想为您提供传统企业架构管理工具的完整集合，但我愿意为您提供一些相关的可视化</st><st c="27752">和工具。</st>
- en: <st c="27780">Platform component model</st>
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="27780">平台组件模型</st>
- en: '*<st c="27805">Stephan Schneider</st>* <st c="27823">and</st> *<st c="27828">Mike
    Gatto</st>* <st c="27838">introduced</st> <st c="27850">the first version of an
    IDP reference architecture model in 2023</st> *<st c="27915">[5]</st>*<st c="27918">,
    which the community reworked multiple times.</st> <st c="27965">Unfortunately,
    this model lacks some important perspectives, either because of the naming or
    simply because a so-called plane is missing.</st> <st c="28103">Therefore, we
    developed a more holistic approach to the model, which includes the</st> <st c="28185">following
    planes:</st>'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="27805">Stephan Schneider</st>* <st c="27823">和</st> *<st c="27828">Mike
    Gatto</st>* <st c="27838">在2023年首次提出了IDP参考架构模型</st> *<st c="27915">[5]</st>*<st
    c="27918">，该模型经过社区多次改进。</st> <st c="27965">不幸的是，该模型缺乏一些重要的视角，要么是由于命名问题，要么是因为缺少一个所谓的plane。</st>
    <st c="28103">因此，我们开发了一个更为全面的模型，其中包括以下几个plane：</st>'
- en: '**<st c="28202">The developer experience plane</st>**<st c="28233">: This covers
    all first-row components needed for software development and</st> <st c="28309">infrastructure
    engineering</st>'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="28202">开发者体验plane</st>**<st c="28233">：这个plane涵盖了软件开发和基础设施工程所需的所有第一层组件</st>'
- en: '**<st c="28335">The automation and orchestration plane</st>**<st c="28374">:
    This clusters the tools to build, test, deploy, store, and orchestrate applications</st>
    <st c="28461">and infrastructure</st>'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="28335">自动化与编排plane</st>**<st c="28374">：该plane集成了构建、测试、部署、存储和编排应用程序以及基础设施的工具</st>
    <st c="28461">。'
- en: '**<st c="28479">The observability plane</st>**<st c="28503">: This includes
    any tool needed to provide transparency and visibility of what’s happening in
    the platform and</st> <st c="28615">its apps</st>'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="28479">可观察性plane</st>**<st c="28503">：该plane包括任何需要的工具，以提供平台及其应用程序发生的透明性和可视化</st>'
- en: '**<st c="28623">The security and identity plane</st>**<st c="28655">: This
    plane contains security-enforcing and supervising systems, user and account management
    solutions, and secrets and certificate</st> <st c="28789">handling tools</st>'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="28623">安全与身份plane</st>**<st c="28655">：该plane包含安全执行和监控系统、用户与账户管理解决方案，以及密钥和证书管理工具</st>'
- en: '**<st c="28803">The resource plane</st>**<st c="28822">: This is a container
    for all computational resources that can be utilized for</st> <st c="28902">a
    platform</st>'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="28803">资源plane</st>**<st c="28822">：这是一个容器，包含所有可以用于平台的计算资源</st>'
- en: '**<st c="28912">The capability plane</st>**<st c="28933">: The</st> <st c="28939">plane
    within or on top of the platform, such as Kubernetes, that provides services for</st>
    <st c="29027">the users</st>'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="28912">能力plane</st>**<st c="28933">：该plane位于平台内或平台上方，例如Kubernetes，提供面向用户的服务</st>'
- en: '![Figure 2.4: Platform reference components](img/B31164_02_04.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图2.4：平台参考组件](img/B31164_02_04.jpg)'
- en: '<st c="29957">Figure 2.4: Platform reference components</st>'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="29957">图2.4：平台参考组件</st>
- en: <st c="29998">This perspective</st> <st c="30016">on the components shows that
    a platform is definitely more than a single server on which I just install some
    container orchestration or developer portal.</st> <st c="30170">Often, those components
    have multiple places to live.</st> <st c="30224">This is a kind of link, looping
    the relevant elements together.</st> <st c="30288">For example, to enforce security,
    we will find relevant elements in the resource plane to adhere to compliance and
    deliver hardened configurations, such as external systems to collect data and
    analyze them, on top of the capability plane within Kubernetes to scan containers
    and protect networks, but also in the CI/CD to deliver only hardened containers.</st>
    <st c="30644">You can see that a single topic can liv</st><st c="30683">e anywhere
    within</st> <st c="30702">a platform.</st>
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="29998">这个组件视角</st> <st c="30016">表明，平台肯定不只是一个单一的服务器，我只是安装一些容器编排或开发者门户的地方。</st>
    <st c="30170">通常，这些组件有多个可能的部署位置。</st> <st c="30224">这是一种链接，将相关的元素联系在一起。</st> <st
    c="30288">例如，为了加强安全性，我们将在资源plane中找到相关的元素来遵守合规性并提供加固的配置，比如收集数据并分析的外部系统，位于Kubernetes中的能力plane之上，扫描容器并保护网络，此外还会出现在CI/CD中，以便只交付加固过的容器。</st>
    <st c="30644">你可以看到，单一的主题可以存在于平台的任何地方。</st>
- en: <st c="30713">Platform composability</st>
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="30713">平台的可组合性</st>
- en: '<st c="30736">A</st> <st c="30738">platform consists of many parts that are
    constantly evolving.</st> <st c="30801">Alongside this development, your users
    and organization might also evolve.</st> <st c="30876">A huge problem we frequently
    discover is the reluctance to replace some parts of a platform.</st> <st c="30969">While
    there are often arguments about priority or budget, the most common problem is
    that it can’t be replaced easily.</st> <st c="31088">Sometimes, this is because
    the platform and component are old and literally screwed into each other, and
    sometimes it is because the technology choice wasn’t good and introduces a chain
    of dependencies that become hard to replace.</st> <st c="31319">But there is also
    a third reason: forcing your own way of doing things into the</st> <st c="31399">wrong
    tool.</st>'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="30736">一个</st> <st c="30738">平台由许多不断发展的部分组成。</st> <st c="30801">随着这一发展，你的用户和组织可能也会发生变化。</st>
    <st c="30876">我们经常发现的一个巨大问题是，平台的某些部分不愿意被替换。</st> <st c="30969">虽然常常会有关于优先级或预算的争论，但最常见的问题是它无法轻易替换。</st>
    <st c="31088">有时，这是因为平台和组件已经陈旧，实际上是相互紧密结合的；有时则是因为技术选择不当，引入了一系列依赖关系，使得替换变得困难。</st>
    <st c="31319">但也有第三个原因：将自己做事的方式强行塞入</st> <st c="31399">错误的工具中。</st>
- en: <st c="31410">Composability is a principle, maybe an ideology, and definitely
    an approach and decision-making that platforms should be built on.</st> <st c="31542">Components
    are composable when they interact with each other without the need to develop
    something in between for translation, such as scripts or serverless functions.</st>
    <st c="31710">Composable components can be replaced with the least effort possible
    and with the smallest to no impact on the platform functionality.</st> <st c="31845">Kubernetes
    is an environment that drastically supports this approach and becomes, therefore,
    the de facto standard to create your platform.</st> <st c="31985">However, the
    components of a platform are distributed, and not all of them run on Kubernetes.</st>
    <st c="32079">This makes it a challenge to find the</st> <st c="32117">right tools.</st>
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="31410">组件化是一项原则，也许是一种意识形态，肯定是一种平台构建的方式和决策。</st> <st c="31542">当组件能够相互作用而无需在其间开发中介来进行翻译时，例如脚本或无服务器函数时，组件就是可组合的。</st>
    <st c="31710">可组合的组件可以以最小的努力，且对平台功能影响最小甚至没有影响地被替换。</st> <st c="31845">Kubernetes
    是一个极力支持这种方法的环境，因此它成为了构建平台的事实标准。</st> <st c="31985">然而，平台的组件是分布式的，并不是所有的组件都运行在
    Kubernetes 上。</st> <st c="32079">这使得找到</st> <st c="32117">正确的工具</st> <st c="32129">变得具有挑战性。</st>
- en: <st c="32129">Composability also helps in the right adjustment of a platform.</st>
    <st c="32194">A generic, one-size-fits-all platform always sounds good on paper,
    but it is unrealistic and increases complexity.</st> <st c="32309">The more components
    you have to bring into a platform, the more likely it becomes that they don’t
    play together well.</st> <st c="32427">Therefore, being able to provide adjustments
    for certain use cases without changing the entire architecture will increase its
    useability.</st> <st c="32565">Another strong benefit of composability is the
    separation</st> <st c="32623">of concerns.</st>
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32194">一个通用的、一刀切的平台听起来总是不错，但它是不现实的，并且增加了复杂性。</st> <st c="32309">你需要将更多组件引入平台时，组件之间难以协作的可能性也会增大。</st>
    <st c="32427">因此，能够为特定的使用场景提供调整，而无需改变整个架构，将提高其可用性。</st> <st c="32565">组件化的另一个重要好处是关注点的分离。</st>
- en: <st c="32635">In</st> [*<st c="32639">Chapter 1</st>*](B31164_01.xhtml#_idTextAnchor014)<st
    c="32648">, we</st> <st c="32652">highlighted the purpose of a platform as an
    abstraction layer for Plug and Play specialized solutions.</st> <st c="32756">Strictly
    enforcing composability will cause a lot of work on the organizational level,
    but it will allow specialized teams to provide their core capabilities right into</st>
    <st c="32925">your platform.</st>
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32635">在</st> [*<st c="32639">第一章</st>*](B31164_01.xhtml#_idTextAnchor014)<st
    c="32648">中，我们</st> <st c="32652">强调了平台作为即插即用专用解决方案的抽象层的目的。</st> <st c="32756">严格执行组件化将会给组织层面带来大量工作，但它将允许专业团队将其核心能力直接提供到</st>
    <st c="32925">你的平台。</st>
- en: <st c="32939">To evaluate if a component for your platform is composable, you
    have to look for</st> <st c="33021">four abilities:</st>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32939">要评估平台的一个组件是否可组合，你需要寻找</st> <st c="33021">四种能力：</st>
- en: '**<st c="33036">Orchestrateable</st>**<st c="33052">: It can run in a modern
    dynamic environment, such as Kubernetes, without</st> <st c="33127">being impacted</st>'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="33036">可编排的</st>**<st c="33052">：它可以在现代动态环境中运行，例如 Kubernetes，而不</st>
    <st c="33127">受到影响</st>'
- en: '**<st c="33141">Modular</st>**<st c="33149">: It doesn’t require any other
    tools or has technical pre-conditions, but can utilize those to extend</st> <st
    c="33252">its capabilities</st>'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="33141">模块化</st>**<st c="33149">：它不需要任何其他工具或技术前提条件，但可以利用这些工具来扩展</st>
    <st c="33252">其功能</st>'
- en: '**<st c="33268">Discoverable</st>**<st c="33281">: It needs to interact with
    other components following standardized APIs, or following concepts such as the
    custom resource definition</st> <st c="33417">of Kubernetes</st>'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="33268">可发现的</st>**<st c="33281">：它需要与其他组件进行交互，遵循标准化的 API，或遵循像 Kubernetes
    的自定义资源定义这样的概念</st> <st c="33417">。</st>'
- en: '**<st c="33430">Autonomous</st>**<st c="33441">: It must be independent from
    other extern inputs and operates</st> <st c="33505">by itself</st>'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="33430">自主的</st>**<st c="33441">：它必须独立于其他外部输入并自主运行</st> <st c="33505">。</st>'
- en: <st c="33514">Now, we know what to look for when designing the platform and
    choosing platform components.</st> <st c="33607">In the next section, you will
    learn about the things between those components t</st><st c="33686">hat keep the</st>
    <st c="33700">platform together.</st>
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="33514">现在，我们知道在设计平台和选择平台组件时应该关注什么。</st> <st c="33607">在接下来的部分中，你将了解那些使组件之间保持联系的东西。</st>
- en: <st c="33718">Dependencies and the hidden glue</st>
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="33718">依赖关系和隐藏的胶水</st>
- en: <st c="33751">No matter how</st> <st c="33766">composable the platform</st>
    <st c="33790">components are, there will always be dependencies and some</st>
    *<st c="33849">hidden glue</st>*<st c="33860">. This hidden glue is the information
    that flows between the components and makes them react to each other.</st> <st
    c="33968">As architects, it is our job to ensure that the information is not contradictory.</st>
    <st c="34050">This information is im</st><st c="34072">portant but not</st> <st
    c="34089">well understood.</st>
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="33751">无论平台的</st> <st c="33766">组件多么可组合</st> <st c="33790">，总会存在依赖关系和一些</st>
    *<st c="33849">隐藏的胶水</st>*<st c="33860">。这些隐藏的胶水是组件之间流动的信息，使它们相互响应。</st> <st c="33968">作为架构师，我们的工作是确保这些信息不相互矛盾。</st>
    <st c="34050">这些信息很重要，但并不</st> <st c="34072">为人所充分理解。</st>
- en: <st c="34105">Managing and handling dependencies</st>
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="34105">管理和处理依赖关系</st>
- en: <st c="34140">First, let us build on</st> <st c="34163">the composability by
    visualizing dependencies between components.</st> <st c="34230">For this, we can
    use a simple dependency matrix.</st> <st c="34279">This tool can help you make
    decisions and plan future components.</st> <st c="34345">Also, it requires some
    maintenance effort; many platforms depend on the</st> <st c="34416">knowledge
    of single engineers and, as the platform becomes more complex over time, documentation
    does too.</st> <st c="34524">Mapping dependencies is therefore the shortest way</st>
    <st c="34575">to transparency.</st>
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="34140">首先，让我们通过可视化组件之间的依赖关系来构建可组合性。</st> <st c="34163">为此，我们可以使用一个简单的依赖矩阵。</st>
    <st c="34230">这个工具可以帮助你做决策并规划未来的组件。</st> <st c="34279">此外，它需要一些维护工作；许多平台依赖于单个工程师的知识，并且随着平台随着时间的推移变得更加复杂，文档也会变得更复杂。</st>
    <st c="34345">因此，映射依赖关系是实现透明度的最短路径。</st>
- en: <st c="34591">In the following example, we have</st> **<st c="34626">tools A-C</st>**<st
    c="34635">, such as</st> **<st c="34645">container network interfaces</st>** <st
    c="34673">(</st>**<st c="34675">CNI</st>**<st c="34678">)</st> **<st c="34681">1-3</st>**<st
    c="34684">. Now, those</st> <st c="34696">tools can be any kind of tool from the
    reference components list we talked</st> <st c="34772">about before.</st>
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="34591">在下面的例子中，我们有</st> **<st c="34626">工具 A-C</st>**<st c="34635">，例如</st>
    **<st c="34645">容器网络接口</st>** <st c="34673">（</st>**<st c="34675">CNI</st>**<st
    c="34678">）</st> **<st c="34681">1-3</st>**<st c="34684">。现在，这些</st> <st c="34696">工具可以是我们之前提到的参考组件列表中的任何工具。</st>
- en: <st c="34785">In the dependencies, I prefer to be explicit about which kind
    of dependencies we have there.</st> <st c="34879">Therefore, you can use things
    such as</st> <st c="34917">the following:</st>
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="34785">在依赖关系中，我更倾向于明确指出我们拥有的依赖类型。</st> <st c="34879">因此，你可以使用如下内容：</st>
    <st c="34917">以下内容：</st>
- en: '**<st c="34931">Unidirectional and bi-directional dependencies</st>**<st c="34978">:
    You can use these to describe whether</st> <st c="35018">tool B</st> <st c="35025">depends
    on tool A or tool C depends on tool B as tool B depends on</st> <st c="35093">tool
    C.</st>'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="34931">单向和双向依赖</st>**<st c="34978">：你可以使用这些来描述</st> <st c="35018">工具
    B 是否依赖于工具 A，或者工具 C 是否依赖于工具 B，就像工具 B 依赖于</st> <st c="35093">工具 C 一样。</st>'
- en: '**<st c="35100">Enhancing dependencies</st>**<st c="35123">: Enhancing</st>
    <st c="35136">dependencies unlocks more capabilities and features if established,
    but it doesn’t have to be.</st> <st c="35231">For example, if you have a tool
    with manual user management, now you can utilize</st> **<st c="35312">single sign-on</st>**
    <st c="35326">(</st>**<st c="35328">SSO</st>**<st c="35331">) for it, which reduces
    your</st> <st c="35361">manual efforts.</st>'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="35100">增强依赖</st>**<st c="35123">：增强依赖会解锁更多的能力和功能，如果建立了，但并非必须。</st>
    <st c="35231">例如，如果你有一个手动用户管理的工具，现在你可以利用</st> **<st c="35312">单点登录</st>** <st
    c="35326">(</st>**<st c="35328">SSO</st>**<st c="35331">) 来减少你的</st> <st c="35361">人工工作量。</st>'
- en: '**<st c="35376">Conflicting dependencies</st>**<st c="35401">: As</st> <st
    c="35406">the name suggests, those two things don’t play</st> <st c="35454">well
    together.</st>'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="35376">冲突依赖</st>**<st c="35401">：顾名思义，这两者无法</st> <st c="35406">很好地协同工作。</st>'
- en: '![Figure 2.5: Dependency matrix](img/B31164_02_05.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5：依赖矩阵](img/B31164_02_05.jpg)'
- en: '<st c="35639">Figure 2.5: Dependency matrix</st>'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="35639">图 2.5：依赖矩阵</st>
- en: <st c="35668">Have you</st> <st c="35678">seen it?</st> <st c="35687">In the
    example of bi-directional dependencies, the relation between tools B and C is
    not correctly</st> <st c="35786">shown.</st> <st c="35793">In the column of tool
    C, the bi-directional market for tool B is missing.</st> <st c="35867">When you
    implement your dependency matrix, you need to give clear guidance on how to track
    those relationships.</st> <st c="35979">I think it is most useful to set the marks
    for both tools.</st> <st c="36038">However, then you have to be clear about the
    reading direction or you have to introduce more markers.</st> <st c="36140">For
    example, you could use</st> *<st c="36167">(u)</st>* <st c="36170">to define an</st>
    <st c="36184">incoming dependency.</st>
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="35668">你</st> <st c="35678">看过了吗？</st> <st c="35687">在双向依赖的示例中，工具 B 和
    C 之间的关系没有正确</st> <st c="35786">显示。</st> <st c="35793">在工具 C 的列中，工具 B 的双向市场缺失。</st>
    <st c="35867">当你实现依赖矩阵时，需要提供明确的指导，以跟踪这些关系。</st> <st c="35979">我认为最有用的是为两个工具都设置标记。</st>
    <st c="36038">然而，你必须明确阅读方向，或者引入更多的标记。</st> <st c="36140">例如，你可以使用</st> *<st c="36167">(u)</st>*
    <st c="36170">来定义一个</st> <st c="36184">传入依赖关系。</st>
- en: <st c="36204">Dependency management is a continuous task.</st> <st c="36249">Over
    time, you run the risk of forgetting to add new tools.</st> <st c="36309">Therefore,
    whatever method you use to implement new features, it might be a good idea to
    create an automatic sub-task to update the dependency matrix, too.</st> <st c="36465">A
    big benefit is also to evaluate this matrix from time to time, which might identify
    potential</st> <st c="36560">bottlenecks or problems you can</st> <st c="36593">work
    on.</st>
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="36204">依赖管理是一个持续的任务。</st> <st c="36249">随着时间的推移，你可能会忘记添加新工具。</st> <st
    c="36309">因此，无论你使用什么方法来实现新功能，创建一个自动子任务来更新依赖矩阵可能是个好主意。</st> <st c="36465">一个很大的好处是定期评估这个矩阵，这可能会发现潜在的</st>
    <st c="36560">瓶颈或问题，</st> <st c="36593">你可以着手解决。</st>
- en: <st c="36601">Applications x platform – a reciprocal influence</st>
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="36601">应用 x 平台 – 相互影响</st>
- en: <st c="36650">The</st> **<st c="36655">reciprocal influence</st>** <st c="36675">is</st>
    <st c="36679">defined as related to each other in such a way that</st> <st c="36730">one
    completes the other or is the equal of the other.</st> <st c="36785">You have
    a certain kind of mutual influence in the relationship between the platform and
    your users’ applications.</st> <st c="36900">For example, an application needs
    to scale drastically.</st> <st c="36956">As a platform, you support this behavior
    but also guarantee that it doesn’t have an impact on other applications.</st>
    <st c="37070">On the other hand, the application decided to go with your platform
    because you support its demand.</st> <st c="37170">A platform without a user is
    useless.</st> <st c="37208">To perform best as an application, you should run
    on</st> <st c="37261">that platform.</st>
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="36650">这个</st> **<st c="36655">相互影响</st>** <st c="36675">是</st> <st c="36679">这样定义的：它们之间是相互关联的，以至于</st>
    <st c="36730">一个补充另一个，或者等同于另一个。</st> <st c="36785">在平台与用户应用之间，你有某种程度的相互影响。</st>
    <st c="36900">例如，一个应用需要大幅扩展。</st> <st c="36956">作为平台，你支持这种行为，但同时确保它不会影响到其他应用。</st>
    <st c="37070">另一方面，该应用选择你的平台是因为你支持它的需求。</st> <st c="37170">没有用户的平台是没用的。</st> <st
    c="37208">为了作为应用发挥最佳效果，你应该在</st> <st c="37261">该平台上运行。</st>
- en: <st c="37275">However, this example</st> <st c="37298">is very generic.</st>
    <st c="37315">Reciprocal influence also affects elements outside the layers defined
    in YAML files.</st> <st c="37400">It is also the demand and requirements it causes
    without asking for it; it is the team dynamics between both implementing parties;
    it is also the effect one solution has on others in the way</st> <st c="37591">they
    work.</st>
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37275">然而，这个例子</st> <st c="37298">非常通用。</st> <st c="37315">相互影响也会影响到
    YAML 文件中定义的层级之外的元素。</st> <st c="37400">它也是没有被要求却自然而然产生的需求和要求；它是两个实施方之间的团队动态；它还体现了一个解决方案如何影响其他解决方案的方式</st>
    <st c="37591">他们的工作。</st>
- en: <st c="37601">Therefore,</st> *<st c="37613">dependency</st>* <st c="37623">would
    be the wrong word to describe this relationship.</st> <st c="37679">It is a coexistence,
    a collaboration, pulling together in the same direction.</st> <st c="37757">For
    a platform engineering team, and you as an architect especially, you have to keep
    this reciprocal influence in mind when you design your solution.</st> <st c="37908">To
    make this your own superpower, you have to educate the platform engineers and
    users about these effects and focus on how they can get the best out of the platform
    without feeling</st> <st c="38090">any restrictions.</st>
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37601">因此，</st> *<st c="37613">依赖</st>* <st c="37623">这个词并不适合用来描述这种关系。</st>
    <st c="37679">它是一种共存，一种协作，朝着相同的方向一起前进。</st> <st c="37757">对于平台工程团队，尤其是作为架构师的你来说，在设计解决方案时，必须始终牢记这种相互影响。</st>
    <st c="37908">要让这一点成为你的超能力，你需要教育平台工程师和用户了解这些影响，并专注于如何让他们从平台中获得最佳效果，同时不会感到</st>
    <st c="38090">任何限制。</st>
- en: <st c="38107">Reciprocal influence</st>
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38107">相互影响</st>
- en: <st c="38128">The reciprocal influence is the invisible play between the application
    and the platform.</st> <st c="38218">Understand it as a joint force that makes
    the platform and the users’ application better together than they would be without</st>
    <st c="38343">each other.</st>
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38128">相互影响是应用与平台之间的无形互动。</st> <st c="38218">将其理解为一种共同的力量，使得平台和用户的应用能够比没有彼此时更好地融合在一起。</st>
    <st c="38343">相互依赖。</st>
- en: <st c="38354">Another place where such reciproca</st><st c="38389">l influence
    becomes visible is</st> <st c="38421">in processes.</st>
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38354">另一个地方这种相互影响变得可见的是</st> <st c="38389">在过程当中。</st> <st c="38421">在过程中。</st>
- en: <st c="38434">Opportunities of process definitions for a platform</st>
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="38434">平台的过程定义机会</st>
- en: <st c="38486">Platform engineering</st> <st c="38507">lends many approaches
    from the DevOps methodology.</st> <st c="38559">In a DevOps role, some parts focus
    on automation.</st> <st c="38609">Those automated steps translate into defining
    processes.</st> <st c="38666">So, we also could say that platform engineers create
    technical processes for them to be implemented as a platform as a product to make
    it function in a user-oriented way.</st> <st c="38837">However, those procedures
    are not very common in explicit design decisions.</st> <st c="38913">The form
    of the process (or how the process looks like) depends on the way certain components
    work.</st> <st c="39013">With respect to platform composability, this might be
    a given approach, but could we improve the platform by explicitly designing</st>
    <st c="39143">the processes?</st>
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38486">平台工程</st> <st c="38507">借鉴了许多DevOps方法论中的做法。</st> <st c="38559">在DevOps角色中，一些部分侧重于自动化。</st>
    <st c="38609">这些自动化步骤转换为定义流程。</st> <st c="38666">因此，我们也可以说，平台工程师为其创建技术流程，以便作为产品在用户导向的方式中实施。</st>
    <st c="38837">然而，这些程序在明确的设计决策中并不常见。</st> <st c="38913">流程的形式（或流程的样子）取决于某些组件的工作方式。</st>
    <st c="39013">关于平台可组合性，这可能是一种固有的方法，但我们能否通过明确设计</st> <st c="39143">流程来改善平台？</st>
- en: <st c="39157">It shouldn’t be turned into a business process modeling.</st>
    <st c="39215">Too many advanced features that are backed into tools such as GitOps
    or operators on Kubernetes can have multiple</st> <st c="39328">variables based
    on decision paths.</st> <st c="39364">It would be hilarious to draw all of those.</st>
    <st c="39408">However, it is helpful for the process to be documented and designed
    to understand the platform.</st> <st c="39505">The difficulty is in the multiple
    entry points processes, which can start at</st> <st c="39582">the following:</st>
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39157">它不应该变成业务流程建模。</st> <st c="39215">许多先进功能，诸如GitOps或Kubernetes上的操作员，支持的工具可能具有多个</st>
    <st c="39328">基于决策路径的变量。</st> <st c="39364">如果要将这些都绘制出来，那将是非常可笑的。</st> <st c="39408">然而，文档化并设计流程对于理解平台是有帮助的。</st>
    <st c="39505">困难之处在于多个入口点的流程，这些流程可以从以下开始：</st>
- en: <st c="39596">Infrastructure provisioning</st>
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="39596">基础设施配置</st>
- en: <st c="39624">User onboarding</st>
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="39624">用户引导</st>
- en: <st c="39640">Application deployment</st>
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="39640">应用部署</st>
- en: <st c="39663">Incident handling</st>
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="39663">事件处理</st>
- en: <st c="39681">Each requires its own</st> <st c="39704">process definition.</st>
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39681">每个都需要自己的</st> <st c="39704">流程定义。</st>
- en: <st c="39723">You have the opportunity to find optimization potentials with
    a focus on user-friendliness and handling.</st> <st c="39829">Leveraging the process
    perspective differentiates user-centricity in your platform development from the
    more common, pure, tech-focused definition of features.</st> <st c="39989">Unfortunately,
    we can’t give you more insight at this point in time as this discipline is still
    fresh, and there is barely any knowledge sharing happening around it.</st> <st
    c="40155">In</st> [*<st c="40158">Chapter 3</st>*](B31164_03.xhtml#_idTextAnchor133)<st
    c="40167">, we will dig deeper into</st> <st c="40193">this topic.</st>
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39723">你有机会在关注用户友好性和操作性的基础上发现优化潜力。</st> <st c="39829">利用流程视角可以将以用户为中心的平台开发与更常见的、纯粹的技术驱动特性定义区分开来。</st>
    <st c="39989">不幸的是，目前我们无法为你提供更多的见解，因为这一领域仍然是新兴的，几乎没有相关的知识分享。</st> <st c="40155">在</st>
    [*<st c="40158">第3章</st>*](B31164_03.xhtml#_idTextAnchor133)<st c="40167">中，我们将深入探讨</st>
    <st c="40193">这个话题。</st>
- en: <st c="40204">The vendor lock-in discussion</st>
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="40204">供应商锁定讨论</st>
- en: '<st c="40234">To conclude</st> <st c="40246">the topic of dependencies, we
    have to touch on the discussion on vendor lock-in.</st> <st c="40328">It is part
    of strategic and architectural decisions and often pushes for strange outcomes.</st>
    <st c="40419">At this point, you should be fully aware that you will always have
    dependencies, and a vendor lock-in is nothing more than that.</st> <st c="40548">As
    open source brings a fantastic foundation to avoid proprietary software, it is
    also used as an argument to build things by yourself.</st> <st c="40684">The important
    question to ask is this: With which speed and service quality do you want to provide
    the platform to your users?</st> *<st c="40811">What are your expected operational
    costs?</st>* <st c="40852">In addition to that, you have to consider aspects</st>
    <st c="40902">of the available team, skill sets, and which costs your</st> <st
    c="40958">organization prefers (</st>**<st c="40981">operational expenses</st>**
    <st c="41002">(</st>**<st c="41004">OPEX</st>**<st c="41008">) or</st> **<st c="41014">capitalized</st>**
    **<st c="41026">expenses</st>** <st c="41034">(</st>**<st c="41036">CAPEX</st>**<st
    c="41041">)).</st>'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="40234">总结</st> <st c="40246">关于依赖性的主题，我们必须触及关于供应商锁定的讨论。</st> <st c="40328">这是战略和架构决策的一部分，并经常推动产生奇怪的结果。</st>
    <st c="40419">此时，您应该充分意识到，您总是会有依赖性，而供应商锁定仅仅是其中之一。</st> <st c="40548">正如开源为避免专有软件带来了良好的基础一样，它也被用作自行构建事物的论据。</st>
    <st c="40684">要问的重要问题是：您希望为用户提供平台的速度和服务质量是多少？</st> *<st c="40811">您预期的运营成本是多少？</st>*
    <st c="40852">除此之外，您还必须考虑</st> <st c="40902">团队的可用性、技能集以及您的</st> <st c="40958">组织更倾向于的成本（</st>**<st
    c="40981">运营费用</st>** <st c="41002">（</st>**<st c="41004">OPEX</st>**<st c="41008">）或</st>
    **<st c="41014">资本支出</st>** **<st c="41026">（</st>**<st c="41036">CAPEX</st>**<st
    c="41041">）。</st>
- en: <st c="41045">Some different perspectives on vendor lock-in are</st> <st c="41096">as
    follows:</st>
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="41045">有关供应商锁定的一些不同观点如下：</st>
- en: '**<st c="41107">Better build it yourself</st>**<st c="41132">: Building certain
    capabilities entirely by yourself might feel like your ultimate freedom and avoid
    any kind of vendors.</st> <st c="41255">The truth is you just become your own
    vendor.</st> <st c="41301">At some point, you don’t want or can’t invest anymore
    in your development (common project behavior).</st> <st c="41402">With that, you
    as your own vendor retire from your own market and everything that you were afraid
    of</st> <st c="41503">becomes true.</st>'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="41107">最好自己构建</st>**<st c="41132">：完全自己构建某些能力可能会让您感到终极自由，避免任何类型的供应商。</st>
    <st c="41255">事实上，您只是成为了自己的供应商。</st> <st c="41301">在某些时候，您可能不想或无法再投资于您的开发（常见的项目行为）。</st>
    <st c="41402">因此，您作为自己的供应商从自己的市场中退役，并且您害怕的一切都成为了现实。</st>'
- en: '**<st c="41516">Picking best in class per problem, not per context</st>**<st
    c="41567">: In the range of observability, a large number of options exist for
    monitoring, logging, and tracing.</st> <st c="41671">A</st> <st c="41673">common
    approach to this is to pick the open source tool that fits the best reach case.</st>
    <st c="41760">Around this, you then have to implement a log collector and agents
    to forward metrics.</st> <st c="41847">What you have achieved is a fully composable
    observability solution.</st> <st c="41916">On the other hand, you are losing in
    comparison to a single vendor solution capabilities, such as context awareness,
    scalability, or operability.</st> <st c="42062">I don’t want to say proprietary
    software is better; however, I have seen organizations that use 10-14 different
    tools, in different versions, running on the largest scale and having high operational
    costs far too often.</st> <st c="42282">In fact, for a toolset, that practice
    isn’t considered helpful when it comes to incidents.</st> <st c="42373">In this
    case, we unfortunately tend to avoid looking at the truth and finding excuses
    for why it is this</st> <st c="42478">way better.</st>'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="41516">选择每个问题中的最佳工具，而不是每个上下文中的最佳工具</st>**<st c="41567">：在可观察性范围内，有许多选项可用于监控、日志记录和跟踪。</st>
    <st c="41671">针对这个问题的常见方法是选择最适合的开源工具。</st> <st c="41760">在此基础上，您需要实现日志收集器和代理来转发指标。</st>
    <st c="41847">您所实现的是一个完全可组合的可观察性解决方案。</st> <st c="41916">另一方面，与单一供应商解决方案相比，您可能会失去上下文意识、可扩展性或操作性等能力。</st>
    <st c="42062">我不想说专有软件更好；然而，我见过许多组织使用10-14种不同版本的工具，运行在最大规模上，并拥有高昂的运营成本。</st> <st
    c="42282">实际上，对于工具集来说，这种做法在处理事故时并不有益。</st> <st c="42373">在这种情况下，我们不幸地倾向于回避真相，并为为何事情会变得这样找借口。</st>
    <st c="42478">它更好。</st>'
- en: '**<st c="42489">Focusing on the wrong things</st>**<st c="42518">: People still
    focus on the tasks of deploying Kubernetes.</st> <st c="42578">It’s considered
    a challenge, and it becomes a never-ending story.</st> <st c="42644">Consider
    utilizing tools, opinionated platforms, or commercial solutions to get your container
    orchestration done, and focus on the value-generating part of</st> <st c="42801">your
    platform.</st>'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="42489">专注于错误的事情</st>**<st c="42518">：人们仍然关注部署 Kubernetes 的任务。</st>
    <st c="42578">这被认为是一个挑战，并且变成了一个永无止境的故事。</st> <st c="42644">考虑利用工具、有明确观点的平台或商业解决方案来完成容器编排，并专注于</st>
    <st c="42801">你平台中创造价值的部分。</st>'
- en: <st c="42815">Vendor lock-in is an emotional discussion point on the agenda
    of an architect defining a target.</st> <st c="42913">You have to keep your eyes
    and mind open and truly consider what is important and what is just there to feed
    the ego.</st> <st c="43031">Complex and unmanageable solutions are nothing that
    will make one win awards</st> <st c="43108">for them.</st>
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="42815">供应商锁定是架构师在定义目标时议程上的一个情感讨论点。</st> <st c="42913">你必须保持眼界开阔，真正考虑什么是重要的，什么仅仅是满足自尊心的东西。</st>
    <st c="43031">复杂且无法管理的解决方案并不会为你赢得奖项</st> <st c="43108">。</st>
- en: <st c="43117">Until now, you have learned about dependencies and how to handle
    them.</st> <st c="43189">In the upcomin</st><st c="43203">g section, we will learn
    how to make</st> <st c="43241">them visible.</st>
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="43117">到目前为止，你已经了解了依赖关系以及如何处理它们。</st> <st c="43189">在接下来的章节中，我们将学习如何让</st>
    <st c="43203">它们可见。</st>
- en: <st c="43254">Reference architectures</st>
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="43254">参考架构</st>
- en: <st c="43278">Reference architectures</st> <st c="43303">are valuable</st> <st
    c="43316">assets for a platform engineering team, your platform, and interested
    users.</st> <st c="43393">They build the foundation for discussions and decision
    processes and help to define future work with some foresight.</st> <st c="43510">Unfortunately,
    many platform</st> <st c="43539">teams can’t provide a clear picture of</st> <st
    c="43578">their system.</st>
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="43278">参考架构</st> <st c="43303">对平台工程团队、你的平台和相关用户来说是非常宝贵的</st> <st c="43316">资产。</st>
    <st c="43393">它们为讨论和决策过程奠定基础，并帮助通过前瞻性思维定义未来的工作。</st> <st c="43510">不幸的是，许多平台</st>
    <st c="43539">团队无法清晰地描绘出</st> <st c="43578">他们的系统。</st>
- en: <st c="43591">Provider-specific reference architectures</st>
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="43591">特定供应商的参考架构</st>
- en: <st c="43633">Now, those</st> <st c="43644">reference architectures might change
    and look differently for different providers you might use.</st> <st c="43742">The
    platform engineering community</st> *<st c="43777">[6]</st>* <st c="43780">has
    collected a couple of options and templates to build on.</st> <st c="43842">A
    good starting point is the single cloud provider template, here with a flavor
    of AWS.</st> <st c="43930">However, the capability plane is still missing.</st>
    <st c="43978">The focus here is on the cloud provider as it often defines a huge
    amount of components for your platform.</st> <st c="44085">As you can see in the
    next figure, the</st> **<st c="44124">cloud service provider</st>** <st c="44146">(</st>**<st
    c="44148">CSP</st>**<st c="44151">) services</st> <st c="44163">can be found at
    any part of the architecture.</st> <st c="44209">You could draw an even more opinionated
    target utilizing a CSP CI/CD, secrets management, and</st> <st c="44303">cloud
    IDPs.</st>
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="43633">现在，这些</st> <st c="43644">参考架构可能会因你使用的不同供应商而有所变化。</st> <st c="43742">平台工程社区</st>
    *<st c="43777">[6]</st>* <st c="43780">已经收集了一些可供构建的选项和模板。</st> <st c="43842">一个好的起点是单一云提供商模板，这里以
    AWS 为例。</st> <st c="43930">然而，能力平面仍然缺失。</st> <st c="43978">这里的重点是云服务提供商，因为它通常会为你的平台定义大量的组件。</st>
    <st c="44085">正如你在下图中看到的，</st> **<st c="44124">云服务提供商</st>** <st c="44146">(</st>**<st
    c="44148">CSP</st>**<st c="44151">) 服务</st> <st c="44163">可以在架构的任何部分找到。</st> <st
    c="44209">你甚至可以绘制出一个更具观点的目标，利用 CSP 的 CI/CD、密钥管理和</st> <st c="44303">云身份提供者（IDP）</st>。
- en: '![Figure 2.6: AWS reference architecture by platformengineering.org](img/B31164_02_06.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6：由 platformengineering.org 提供的 AWS 参考架构](img/B31164_02_06.jpg)'
- en: '<st c="44722">Figure 2.6: AWS reference architecture by platformengineering.org</st>'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44722">图 2.6：由 platformengineering.org 提供的 AWS 参考架构</st>
- en: <st c="44787">In comparison to the single-provider platform, a multi-provider
    platform comes with its own complexity.</st> <st c="44892">Besides the resources
    used by each provider, we also have to consider where to store and distribute
    container images, how to provide observability, and</st> <st c="45043">how to
    manage secrets and certificates across the providers.</st> <st c="45105">You can
    see in the following reference architecture that it isn’t simple to meet the expectations.</st>
    <st c="45204">With a multi-cloud platform strategy, you will grow a large number
    of issues that you have to take care of.</st> <st c="45312">Costs will drastically
    increase, implementations and platform behavior will slightly change with each
    CSP, and it will become difficult to define an approach that feels at all right.</st>
    <st c="45495">Aspects such as availability, security, scalability, and efficiency
    stand in conflict by being built on</st> <st c="45599">multiple environments.</st>
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44787">与单一供应商平台相比，多供应商平台自带一定的复杂性。</st> <st c="44892">除了每个供应商使用的资源外，我们还必须考虑存储和分发容器镜像的位置、如何提供可观察性，以及</st>
    <st c="45043">如何跨供应商管理机密和证书。</st> <st c="45105">你可以在以下的参考架构中看到，满足这些期望并不简单。</st>
    <st c="45204">通过多云平台策略，你将面临大量需要处理的问题。</st> <st c="45312">成本将急剧增加，实施和平台行为会随着每个云服务提供商（CSP）的不同而略有变化，而且很难定义一种完全合适的方法。</st>
    <st c="45495">可用性、安全性、可扩展性和效率等方面会因构建在</st> <st c="45599">多个环境上而产生冲突。</st>
- en: '![Figure 2.7: Multi-provider reference architecture by platformengineering.org](img/B31164_02_07.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7：由 platformengineering.org 提供的多供应商参考架构](img/B31164_02_07.jpg)'
- en: '<st c="46044">Figure 2.7: Multi-provider reference architecture by platformengineering.org</st>'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="46044">图 2.7：由 platformengineering.org 提供的多供应商参考架构</st>
- en: <st c="46120">However, not every platform needs to run in the cloud.</st> <st
    c="46176">The number of options is endless.</st> <st c="46210">What we often see
    in mature enterprises are hybrid, on-premises, or cloud-extended environments
    that rely on established solutions such as VMware Tanzu or Red Hat OpenShift.</st>
    <st c="46384">In the following figure, we see how a platform would look with OpenShift
    as</st> <st c="46460">its core.</st>
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="46120">然而，并非每个平台都需要在云端运行。</st> <st c="46176">可选择的方案是无穷无尽的。</st> <st c="46210">我们在成熟企业中常见的是混合、私有云或扩展至云的环境，这些环境依赖于像
    VMware Tanzu 或 Red Hat OpenShift 这样的成熟解决方案。</st> <st c="46384">在以下图中，我们可以看到一个以
    OpenShift 为核心的平台架构。</st>
- en: '![Figure 2.8: OpenShift reference architecture by platformengineering.org](img/B31164_02_08.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.8：由 platformengineering.org 提供的 OpenShift 参考架构](img/B31164_02_08.jpg)'
- en: '<st c="47108">Figure 2.8: OpenShift reference architecture by platformengineering.org</st>'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="47108">图 2.8：由 platformengineering.org 提供的 OpenShift 参考架构</st>
- en: <st c="47179">It is</st> <st c="47185">important to adjust your reference architecture
    to the environments it will</st> <st c="47262">run within.</st>
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="47179">调整</st> <st c="47185">参考架构以适应其运行环境</st> <st c="47262">非常重要。</st>
- en: <st c="47273">Important note</st>
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="47273">重要提示</st>
- en: <st c="47288">The environment you choose for your platform automatically prescribes
    some parts of your platform, whether we like it or not!</st> <st c="47415">Increasing
    the number of cloud and infrastructure providers exponentiall</st><st c="47487">y
    increases the challenges for your</st> <st c="47524">platform design.</st>
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="47288">你为平台选择的环境会自动规定平台的一些部分，无论我们喜欢与否！</st> <st c="47415">增加云和基础设施提供商的数量会呈指数级增加你平台设计的挑战。</st>
    <st c="47487">这将显著增加你平台设计的挑战。</st>
- en: <st c="47540">Extending the reference architectures with a capability plane</st>
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="47540">通过能力平面扩展参考架构</st>
- en: <st c="47602">The weak</st> <st c="47612">spot of most reference architectures
    is their lack of a view of the capabilities provided by components running on
    the actual platform runtime.</st> <st c="47756">This perspective is required because
    users cannot use the platform’s features and functionalities</st> <st c="47854">without
    it.</st>
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="47602">大多数参考架构的弱点在于它们缺乏对实际平台运行时上运行的组件所提供的能力的视图。</st> <st c="47756">这种视角是必需的，因为没有它，用户无法使用平台的功能和特性。</st>
    <st c="47854">没有它，用户将无法使用平台的功能和特性。</st>
- en: <st c="47865">In the next figure, we</st> <st c="47888">have some references
    for the</st> <st c="47918">capability plane:</st>
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="47865">在下一个图中，我们</st> <st c="47888">将提供一些关于</st> <st c="47918">能力平面的参考：</st>
- en: '**<st c="47935">User Space</st>**<st c="47946">: The actual environment the
    user sees and can use to host</st> <st c="48006">their applications</st>'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="47935">用户空间</st>**<st c="47946">：用户实际看到并可以用于托管其应用程序的环境</st>'
- en: '**<st c="48024">Scale and Schedule</st>**<st c="48043">: Capabilities that
    support the user app in reacting to events, downscaling, or providing custom</st>
    <st c="48141">scheduling options</st>'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="48024">规模与调度</st>**<st c="48043">：支持用户应用响应事件、缩小规模或提供自定义调度选项的能力</st>'
- en: '**<st c="48159">Network</st>**<st c="48167">: To handle the ingress and egress,
    automatically manage DNS entries or cluster</st> <st c="48248">load balancing</st>'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="48159">网络</st>**<st c="48167">：处理进出流量，自动管理 DNS 条目或集群</st> <st c="48248">负载均衡</st>'
- en: '**<st c="48262">Heavy Babies</st>**<st c="48275">: Things</st> <st c="48285">you</st>
    <st c="48289">usually prefer to have managed rather than to operate by yourself,
    such as a framework for batch processing or</st> <st c="48400">message streaming</st>'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="48262">重量级任务</st>**<st c="48275">：通常更倾向于交由管理，而不是自己操作的事物，比如批处理框架或</st>
    <st c="48400">消息流处理</st>'
- en: '**<st c="48417">Resource Integration</st>**<st c="48438">: A vital component
    that bridges the actual infrastructure resources into the platform runtime; storage
    or GPU integration, but also resource control, such as with the</st> <st c="48607">tool
    Crossplane</st>'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="48417">资源集成</st>**<st c="48438">：一个至关重要的组件，将实际的基础设施资源连接到平台运行时；存储或
    GPU 集成，也包括资源控制，例如使用</st> <st c="48607">Crossplane 工具</st>'
- en: '**<st c="48622">Security and Compliance</st>**<st c="48646">: Provided capabilities
    to manage and store secrets, actively scan clusters and applications for CVEs</st>
    <st c="48749">and vulnerabilities</st>'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="48622">安全与合规</st>**<st c="48646">：提供管理和存储机密、主动扫描集群和应用程序中的 CVE</st>
    <st c="48749">漏洞的能力</st>'
- en: '**<st c="48768">Observability</st>**<st c="48782">: This provides a simple
    and fast observability entry, unifies data collection, or helps to handle</st>
    <st c="48882">the costs</st>'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="48768">可观察性</st>**<st c="48782">：提供一个简单且快速的可观察性入口，统一数据收集，或帮助处理</st>
    <st c="48882">成本</st>'
- en: '![Figure 2.9: The capability plane with example tools](img/B31164_02_09.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.9：带有示例工具的能力平面](img/B31164_02_09.jpg)'
- en: '<st c="49226">Figure 2.9: The capability plane with example tools</st>'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="49226">图 2.9：带有示例工具的能力平面</st>
- en: <st c="49277">The capability plane</st> <st c="49298">is crucial for the actual
    application deployment and operation.</st> <st c="49363">It is the space where</st>
    <st c="49385">you have the greatest technical interaction, and if the user</st><st
    c="49445">’s app fails here, all other efforts invested</st> <st c="49492">are
    wasted.</st>
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="49277">能力平面</st> <st c="49298">对于实际的应用部署和运行至关重要。</st> <st c="49363">它是你与技术互动最密切的空间，如果用户的应用在这里失败，所有其他的努力都将付诸东流。</st>
- en: <st c="49503">A platform architecture goes beyond references</st>
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="49503">平台架构超越了参考模型</st>
- en: <st c="49550">Recapitulating</st> <st c="49566">the reference architectures,
    they provide a simple-to-understand concept of the platform.</st> <st c="49656">What
    they don’t provide is the actual architecture of the platform.</st> <st c="49724">Where
    is the source code versioning running?</st> <st c="49769">Where are the CI/CD
    pipeline components?</st> <st c="49810">Where is the container registry?</st>
    <st c="49843">How is the</st> <st c="49854">IDP hosted?</st>
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="49550">总结参考架构，它们提供了一个易于理解的平台概念。</st> <st c="49656">它们没有提供的是平台的实际架构。</st>
    <st c="49724">源代码版本管理在哪里运行？</st> <st c="49769">CI/CD 管道组件在哪里？</st> <st c="49810">容器注册中心在哪里？</st>
    <st c="49843">IDP 如何托管？</st>
- en: <st c="49865">Therefore, we have to provide, as platform architects, an actual
    platform architecture that visualizes where those components are located.</st>
    <st c="50005">This gives deep insight into further dependencies, network communication
    and requirements, availability, and the scalability of the platform with all its
    components, or simply whether there are too many pieces built into it that actually
    do not help the</st> <st c="50259">platform’s stability.</st>
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="49865">因此，作为平台架构师，我们必须提供一个实际的架构，展示这些组件的位置。</st> <st c="50005">这为进一步的依赖关系、网络通信和需求、可用性以及平台的可扩展性提供了深刻的洞察，或者简单来说，是否平台中有太多其实并不帮助平台稳定性的组件。</st>
- en: <st c="50280">The following diagram shows what such an architecture could look
    like.</st> <st c="50352">You will also see that different components and network
    connections are spread around.</st> <st c="50439">However, when talking about
    a platform architecture, this is how it should technically</st> <st c="50526">be
    represented.</st>
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="50280">以下图表展示了这种架构可能的样子。</st> <st c="50352">你还会看到不同的组件和网络连接分布在各个位置。</st>
    <st c="50439">然而，当谈到平台架构时，这就是它应该如何在技术上</st> <st c="50526">被表示。</st>
- en: '![Figure 2.10: Platform architecture](img/B31164_02_10.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.10：平台架构](img/B31164_02_10.jpg)'
- en: '<st c="50860">Figure 2.10: Platform architecture</st>'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="50860">图 2.10：平台架构</st>
- en: <st c="50894">It becomes</st> <st c="50906">difficult to find the right approach
    to show the infrastructure and platform components in one diagram.</st> <st c="51010">It
    isn’t the cleanest approach, but it is necessary to highlight all dependencies
    and reciprocal influence.</st> <st c="51118">Keep it as simple as possible but
    as detailed as required.</st> <st c="51177">You might even split it into dif</st><st
    c="51209">ferent diagrams to highlight certain pieces</st> <st c="51254">of information.</st>
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="50894">很难找到合适的方法将基础设施和平台组件在一张图表中展示。</st> <st c="50906">这不是最干净的方式，但它有必要突出所有的依赖关系和相互影响。</st>
    <st c="51010">尽可能保持简单，但也要详细到足够的程度。</st> <st c="51118">你甚至可以将其拆分成不同的图表，以突出某些信息。</st>
- en: <st c="51269">Owning your architectures</st>
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="51269">拥有你的架构</st>
- en: <st c="51295">It seems</st> <st c="51305">like a lot of paperwork to manage
    and handle different versions and variations of an architecture.</st> <st c="51404">However,
    you might already have experienced that a platform changes faster than the diagrams.</st>
    <st c="51498">The important thing is that neither the diagram, as a result of
    your work as an architect, slows down the development of the platform nor does
    the platform development slow down the diagrams.</st> <st c="51690">I have seen
    projects where architects became an outstanding hierarchical institution.</st>
    <st c="51776">All of those projects failed and had difficulties in doing the right
    thing.</st> <st c="51852">As an architect, you are not all-knowing, but you are
    also not the platform engineering team.</st> <st c="51946">Working together, aligned,
    and in sync is the key, almost like the platform you want</st> <st c="52031">to
    build.</st>
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="51295">看起来</st> <st c="51305">管理和处理不同版本和变种的架构似乎需要大量文书工作。</st> <st c="51404">然而，你可能已经体验过，平台变化的速度远快于图表的更新。</st>
    <st c="51498">重要的是，图表作为你作为架构师工作的结果，不应拖慢平台的发展，而平台的发展也不应拖慢图表的更新。</st> <st c="51690">我见过一些项目，架构师变成了一个杰出的等级制度。</st>
    <st c="51776">所有这些项目都失败了，并且在做出正确决策时遇到了困难。</st> <st c="51852">作为架构师，你并非无所不知，但你也不是平台工程团队。</st>
    <st c="51946">共同合作，保持一致和同步是关键，几乎就像你希望构建的平台一样。</st> <st c="52031">要建立的平台。</st>
- en: <st c="52040">The same thing counts for your architectures.</st> <st c="52087">You
    have to own them but not rule them.</st> <st c="52127">An architecture must be
    a playground for ideas, a communicator for future developments, and a source of
    truth regarding the capabilities of the platform.</st> <st c="52281">That’s just</st>
    <st c="52293">possible if you are responsible for driving it with the input</st>
    <st c="52355">of others.</st>
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="52040">同样的道理适用于你的架构。</st> <st c="52087">你必须拥有它们，但不是支配它们。</st> <st c="52127">一个架构必须是一个思想的游乐场，是未来发展的沟通工具，是关于平台能力的真实来源。</st>
    <st c="52281">这只有在你负责推动它，并且听取他人意见时</st> <st c="52293">才是可能的。</st>
- en: '<st c="52365">Later in this book, we will cover a relevant topic when we talk
    a</st><st c="52431">bout owning your architecture: dealing with</st> <st c="52476">technical
    debts.</st>'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="52365">在本书的后续章节中，我们会讨论一个相关的话题，关于拥有你的架构：如何应对</st><st c="52431">技术债务。</st>
- en: <st c="52492">Opinionated platforms and the cost of quality</st>
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="52492">有主见的平台与质量的成本</st>
- en: '<st c="52538">While</st> <st c="52544">architecting a platform, two issues
    will arise: opinionated tools and the cost of quality.</st> <st c="52636">Both
    have very good arguments to</st> <st c="52668">be cons</st><st c="52676">idered,
    but they also have very strong arguments</st> <st c="52726">against them.</st>'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="52538">在构建平台时，会出现两个问题：有主见的工具和质量的成本。</st> <st c="52636">这两者都有很强的论点需要</st>
    <st c="52668">考虑，但它们也有强烈的反对理由。</st>
- en: <st c="52739">Opinionated tools and products</st>
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="52739">有主见的工具和产品</st>
- en: <st c="52770">Opinionated</st> <st c="52782">tools, products, and services emphasize
    a strict concept and don’t provide alternatives.</st> <st c="52872">Practically
    everything comes with an opinion, but the question is how flexible and composable
    they are.</st> <st c="52976">A strong opinion on how something should be done
    makes the following decisions easier as the solution space shrinks.</st> <st c="53093">With
    a growing user base on such an approach, it might become dominant and eventually
    a de facto standard.</st> <st c="53200">We have to carefully consider them in
    our architecture and clarify an understanding of their potential</st> <st c="53303">future
    impact.</st>
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="52770">有观点的</st> <st c="52782">工具、产品和服务强调一个严格的概念，并且不提供替代方案。</st> <st
    c="52872">几乎所有的东西都有其观点，但问题是它们的灵活性和可组合性如何。</st> <st c="52976">对于如何做某件事的强烈观点使得后续的决策变得更容易，因为解决方案空间缩小了。</st>
    <st c="53093">随着这种方法用户基础的增长，它可能会变得主导，最终成为事实上的标准。</st> <st c="53200">我们必须在架构中仔细考虑这些因素，并澄清对它们潜在</st>
    <st c="53303">未来影响的理解。</st>
- en: <st c="53317">Now, the strict implementation of a concept can come with many
    benefits.</st> <st c="53391">For example, every solution is opinionated in the
    space of provisioning Kubernetes clusters.</st> <st c="53484">However, they provide
    a holistic solution that is consistent and usually ready for production.</st>
    <st c="53579">Such tools can also be faster in integration when they cover a large
    field of topics and pre-integrate other tools.</st> <st c="53695">This can also
    be, on the other hand, a downside, as if you like to implement other options,
    it will cause more effort to do so.</st> <st c="53823">Yet, even in some cases,
    it is almost impossible or way</st> <st c="53879">too expensive.</st>
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="53317">现在，严格执行一个概念可以带来很多好处。</st> <st c="53391">例如，每个解决方案在提供 Kubernetes
    集群的领域内都有其观点。</st> <st c="53484">然而，它们提供的是一个一致且通常已经准备好投入生产的整体解决方案。</st> <st c="53579">这样的工具在集成时也可能更快，因为它们覆盖了广泛的主题并预先集成了其他工具。</st>
    <st c="53695">另一方面，这也可能是一个缺点，因为如果你想实现其他选项，会付出更多的努力。</st> <st c="53823">然而，在某些情况下，这几乎是不可能的，或者成本</st>
    <st c="53879">过于昂贵。</st>
- en: <st c="53893">You should also differentiate between the visible and big concepts
    and the more invisible, hidden ones.</st> <st c="53998">The first ones are easy
    to identify and evaluate.</st> <st c="54048">They come with a large</st> <st c="54070">stack
    of pre-defined integrations and are usually based on a single vendor’s technology.</st>
    <st c="54160">The small and hidden opinionated tools are more difficult,</st>
    <st c="54219">as they reveal their downside the more extensively you</st> <st
    c="54274">use them.</st>
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="53893">你还应该区分可见的大概念和那些更隐蔽的、隐藏的概念。</st> <st c="53998">前者容易识别和评估。</st>
    <st c="54048">它们附带大量的预定义集成，通常基于单一供应商的技术。</st> <st c="54160">而那些小型和隐藏的有观点的工具则更难以识别，</st>
    <st c="54219">因为你使用得越广泛，它们的缺点就越显现出来。</st>
- en: <st c="54283">The cost of quality</st>
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="54283">质量的成本</st>
- en: <st c="54303">There is</st> <st c="54313">this saying:</st> *<st c="54326">Better
    to buy expensive once than cheap often</st>*<st c="54371">. With platforms done
    right, this saying is wrong.</st> <st c="54422">Following a product mindset means
    a continuous investment.</st> <st c="54481">It is more like a garden you have
    to take care of day by day rather than a watch where you have a</st> <st c="54579">one-time
    investment.</st>
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="54303">有一句话说：</st> *<st c="54326">与其频繁购买便宜的，不如一次性购买昂贵的</st>*<st c="54371">。但在平台做得正确的情况下，这句话是错的。</st>
    <st c="54422">采用产品思维意味着持续的投资。</st> <st c="54481">这更像是你每天都要照料的花园，而不是你一次性投资的手表。</st>
- en: <st c="54599">The cost of quality is a multi-dimensional problem.</st> <st c="54652">A
    high-quality platform, most likely very opinionated, might be, for some use cases,
    the perfect fit.</st> <st c="54754">But the quality doesn’t come for free and
    is based on high investments or operational fees.</st> <st c="54846">Within larger
    companies, you have something like internal cost sharing.</st> <st c="54918">That
    also means that you have to share the costs of quality.</st> <st c="54979">We
    frequently see in the end-user community that such platforms lead to frustration.</st>
    <st c="55064">The entry level due to costs is then too high for hosting simple
    applications, or too opinionated to run a very complex application system on it.</st>
    <st c="55210">This causes others to start building from scratch their own platform
    and solutions for their application.</st> <st c="55316">As you can see, this is
    a strange problem.</st> <st c="55359">Due to the high costs of the platform, the
    operational costs for a user become high too, while the opinionated solution doesn’t
    actually give what one needs.</st> <st c="55517">That is called the</st> **<st
    c="55536">cost</st>** **<st c="55541">of quality</st>**<st c="55551">.</st>
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="54599">质量的成本是一个多维度的问题。</st> <st c="54652">一个高质量的平台，很可能非常有偏见，对于某些用例来说，可能是完美的选择。</st>
    <st c="54754">但质量不是免费的，它基于高投资或运营费用。</st> <st c="54846">在大型公司中，你会遇到类似内部成本分摊的情况。</st>
    <st c="54918">这也意味着你必须分担质量成本。</st> <st c="54979">我们在最终用户社区中经常看到，像这样的平台往往会导致沮丧。</st>
    <st c="55064">由于成本过高，入门门槛对托管简单应用程序来说太高，或者它的偏见性使得运行一个非常复杂的应用系统变得不可能。</st> <st c="55210">这导致其他人开始从零开始为他们的应用程序构建自己的平台和解决方案。</st>
    <st c="55316">如你所见，这是一个奇怪的问题。</st> <st c="55359">由于平台的高成本，用户的运营成本也变得很高，而偏见性的解决方案并没有真正提供所需的功能。</st>
    <st c="55517">这就是所谓的</st> **<st c="55536">质量的成本</st>** **<st c="55541">成本</st>**<st
    c="55551">。</st>
- en: <st c="55552">However, you also can’t go around this issue by plugging and playing
    some random tools fast together to provide a cheap and as open as possible platform
    too.</st> <st c="55711">This might lead to an initial fast ramp-up of projects
    to adopt the platform, but I can promise this way, the faster they come to you,
    the faster they will leave your solution.</st> <st c="55888">Remember, with a
    product mindset, you want to enable your users to do things by themself, while
    your platform takes away all heavy lifts.</st> <st c="56026">Ideally, your user
    also doesn’t need to become an expert in all the</st> <st c="56094">technologies
    used.</st>
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="55552">然而，你也不能通过快速拼接一些随机工具来绕过这个问题，提供一个既便宜又尽可能开放的平台。</st> <st c="55711">这可能会导致平台的项目初期快速上手，但我可以保证，这条路走得越快，用户离开你的解决方案的速度也越快。</st>
    <st c="55888">记住，以产品思维方式看，你希望让用户能够自己做事，而你的平台则消除了所有繁重的工作。</st> <st c="56026">理想情况下，你的用户也不需要成为所有</st>
    <st c="56094">使用技术的专家。</st>
- en: <st c="56112">On a strategic level, the problem of the cost of quality affects
    many decisions.</st> <st c="56194">We have seen platforms that went through years
    of development only to be challenged in the end by their</st> <st c="56298">performance/price
    ratio.</st>
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="56112">从战略层面来看，质量成本的问题影响了许多决策。</st> <st c="56194">我们见过一些平台经过多年开发，最终却因为其</st>
    <st c="56298">性能/价格比</st> <st c="56359">而遭遇挑战。</st>
- en: <st c="56322">You will need to find the golden path for your platform.</st>
    <st c="56380">However, don’t assume that a perfect platform matches what others
    need.</st> <st c="56452">If you phase this issue, it is a clear sign that</st>
    <st c="56501">you have lost track of a product mindset with a</st> <st c="56549">user
    orientation.</st>
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="56322">你需要为你的平台找到黄金路径。</st> <st c="56380">然而，不要以为一个完美的平台就符合他人的需求。</st>
    <st c="56452">如果你遇到这个问题，这显然是一个信号，说明</st> <st c="56501">你已经失去了以产品为导向的思维方式，缺乏</st>
    <st c="56549">用户导向的视角。</st>
- en: <st c="56566">Creating your own architecture</st>
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="56566">创建你自己的架构</st>
- en: <st c="56597">It’s time for action.</st> <st c="56620">So far, we have covered
    all relevant input sources, topics of concern, and perspectives to consider so
    that we can start putting together an architecture.</st> <st c="56775">Therefore,
    we prepared a template that you can find in the GitHub repository for this book
    or as a</st> `<st c="56874">Miro</st>` <st c="56878">template for</st> <st c="56892">collaborative
    working.</st>
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="56597">行动的时候到了。</st> <st c="56620">到目前为止，我们已经涵盖了所有相关的输入源、关注的主题和需要考虑的视角，现在可以开始构建架构了。</st>
    <st c="56775">因此，我们准备了一个模板，你可以在本书的 GitHub 仓库中找到，或者作为一个</st> `<st c="56874">Miro</st>`
    <st c="56878">协作工作的</st> <st c="56892">模板。</st>
- en: <st c="56914">Within those</st> <st c="56928">templates, you will be guided
    through different steps and architecture diagrams to build your</st> <st c="57022">platform
    architecture:</st>
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些模板中，你将通过不同的步骤和架构图来构建你的平台架构：
- en: <st c="57044">Create your</st> <st c="57057">reference architecture.</st>
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建你的参考架构。
- en: <st c="57080">Focus on the capability plane</st> <st c="57111">and components.</st>
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 专注于能力层面及其组件。
- en: <st c="57126">Define the infrastructure architecture for</st> <st c="57170">the
    platform.</st>
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义平台的基础设施架构。
- en: <st c="57183">Visualize the control flow of</st> <st c="57214">the platform.</st>
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可视化平台的控制流。
- en: <st c="57227">As architecture is a living artifact, you have to rework it repeatedly,
    following the</st> *<st c="57314">PLAN, DO, CHECK,</st>* *<st c="57331">ACT</st>*
    <st c="57334">cycle.</st>
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 由于架构是一个动态的产物，你需要反复修改它，遵循*PLAN, DO, CHECK,* *ACT* 循环。
- en: <st c="57341">Take your time going through</st> <st c="57371">the templates:</st>
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 花时间浏览这些模板：
- en: '**<st c="57385">GitHub</st>**<st c="57392">:</st> [<st c="57395">https://github.com/PacktPublishing/Platform-Engineering-for-Architects/tree/main/Chapter02</st>](https://github.com/PacktPublishing/Platform-Engineering-for-Architects/tree/main/Chapter02)'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="57385">GitHub</st>**<st c="57392">：</st> [<st c="57395">https://github.com/PacktPublishing/Platform-Engineering-for-Architects/tree/main/Chapter02</st>](https://github.com/PacktPublishing/Platform-Engineering-for-Architects/tree/main/Chapter02)'
- en: '**<st c="57485">Miro</st>**<st c="57490">:</st> [<st c="57493">https://miro.com/miroverse/platform-architecture-workshop</st>](https://miro.com/miroverse/platform-architecture-workshop
    )'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="57485">Miro</st>**<st c="57490">：</st> [<st c="57493">https://miro.com/miroverse/platform-architecture-workshop</st>](https://miro.com/miroverse/platform-architecture-workshop)'
- en: <st c="57550">Creating your reference architecture</st>
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建你的参考架构
- en: <st c="57587">The reference architecture</st> <st c="57614">outlines your planned
    components, categorizes them, and anchors them at the forefront of your platform
    implementation.</st> <st c="57734">This is also your source of help in defining
    the dependencies map at</st> <st c="57803">some point.</st>
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 参考架构概述了你计划的组件，将其分类并将其作为平台实施的核心部分。这也是你在某个阶段定义依赖关系图的帮助来源。
- en: '<st c="57814">To fill your reference architecture diagram with some life, it
    is good practice to either start with the already fixed components or the given
    infrastructure.</st> <st c="57974">Fixed components can be, for example, CI/CD
    tools or security solutions.</st> <st c="58047">To start, the infrastructure becomes
    relevant as it influences the resources provided.</st> <st c="58134">If you go
    on with a public cloud provider, many services can be used as a managed solution.</st>
    <st c="58226">In some cases, this also defines</st> <st c="58258">which</st> **<st
    c="58265">Infrastructure as Code</st>** <st c="58287">(</st>**<st c="58289">IaC</st>**<st
    c="58292">) you are going to use, or the other way around, if you take just an
    infrastructure-as-a-service provider, it means you have to think about potential
    services that are running somewhere</st> <st c="58479">else in the platform.</st>
    <st c="58501">Most likely, they will end up in the capability plane, which then
    causes this question: Do we need a dedicated cluster for shared services or do
    we implement an approach that the service will be deployed on site of the</st>
    <st c="58720">users’ namespace?</st>'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给你的参考架构图注入活力，最好从已经确定的组件或给定的基础设施开始。这些固定组件可以是，比如CI/CD工具或安全解决方案。首先，基础设施变得重要，因为它影响所提供的资源。如果你选择使用公有云服务商，很多服务可以作为托管解决方案使用。在某些情况下，这也决定了你将使用**基础设施即代码**（**IaC**）工具，或者反过来，如果你仅选择基础设施即服务提供商，这意味着你需要考虑平台中其他地方可能运行的服务。它们很可能会最终出现在能力层面，这就引出了一个问题：我们是否需要为共享服务专门部署一个集群，还是采用服务部署在用户命名空间中的方法？
- en: <st c="58737">Next, take on the automation and orchestration plane.</st> <st
    c="58792">For some reason, this plane is relatively pre-decided and provides a
    solid ground for decisions for the developer experience plane.</st> <st c="58924">You
    should be sure that the given solutions are on a newer release and can integrate
    with other cloud-native services without</st> <st c="59050">any scripting.</st>
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: <st c="59064">Last but not least, you have to come up with the observability
    and the security plane.</st> <st c="59152">As said, it can be that you have already
    defined solutions in place.</st> <st c="59221">But especially for organizations
    where this platform engineering and cloud-native journey is new, you might challenge
    the given solutions.</st> <st c="59360">Security tools need to be able to understand
    the cloud and Kubernetes.</st> <st c="59431">They need to be integrated into those
    platforms and be able to handle their very dynamic nature.</st> <st c="59528">The
    same reason counts for observability and operational solutions.</st> <st c="59596">You
    don’t want to get an alert every time pods get killed or moved around in</st>
    <st c="59673">the cluster.</st>
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="59685">Most importantly, you bring all the perspectives together in
    the end: the platform principles and purpose, its key users, composability, and
    the reciprocal influence between all of those moving components.</st> <st c="59892">But
    your design doesn’t need to be perfect.</st> <st c="59936">Before you go too deep
    into the design pro</st><st c="59978">cess, read on, as we cover the topic of
    the TVP later in</st> <st c="60036">this chapter.</st>'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60049">Focusing on the capability plane and components</st>
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="60097">When the</st> <st c="60106">reference architecture is standing,
    we have to extend it in the next step with the capability plane.</st> <st c="60208">Certainly,
    this is a big step in itself, because there are literally hundreds of open source
    solutions available, for any demand within the capability plane.</st> <st c="60366">In
    case you have never seen the CNCF landscape, the following snapshot shows around
    a third of the total available CNCF-listed open source</st> <st c="60505">projects</st>
    *<st c="60514">[7]</st>*<st c="60517">.</st>
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.11: CNCF \uFEFFlandscape (The image is intended as a visual reference;\
    \ the textual information isn't essential.)](img/B31164_02_11.jpg)"
  id: totrans-268
  prefs: []
  type: TYPE_IMG
- en: '<st c="60602">Figure 2.11: CNCF landscape (The image is intended as a visual
    reference; the textual information isn''t essential.)</st>'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60717">Be aware that</st> <st c="60732">there are at least a handful
    of other open source organizations that also manage dozens of projects, which
    you can count within the</st> <st c="60864">cloud-native space.</st>
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60883">The good and the bad thing about the cloud native universe is
    that for every micro-problem, you have at least three ± 1 options to</st> <st
    c="61015">solve it.</st>
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: <st c="61024">For the capability plane, it is also recommended to work from
    the</st> <st c="61091">bottom up:</st>
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="61024">对于能力平面，建议从</st> <st c="61091">底层向上工作：</st>
- en: <st c="61101">Which integrations into the resources do</st> <st c="61143">we
    need?</st>
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="61101">我们需要哪些资源的集成？</st>
- en: <st c="61151">How do we provide the operational data to the observability solution?</st>
    <st c="61222">Do we need to split between infrastructure and application space,
    and if</st> <st c="61295">so, how?</st>
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="61151">我们如何将操作数据提供给可观察性解决方案？</st> <st c="61222">我们需要在基础架构和应用空间之间拆分吗？如果需要，如何拆分？</st>
- en: <st c="61303">Ensure that security and compliance measures are correctly transported
    into the</st> <st c="61384">user’s land.</st>
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="61303">确保安全和合规性措施正确地转移到</st> <st c="61384">用户的领域。</st>
- en: <st c="61396">How do we handle network traffic?</st> <st c="61431">Do we need
    an encryption within</st> <st c="61463">the cluster?</st>
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="61396">我们如何处理网络流量？</st> <st c="61431">我们需要在</st> <st c="61463">集群内进行加密吗？</st>
- en: <st c="61475">Do we expose an API, or do we integrate it with a</st> <st c="61526">cloud
    API?</st>
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="61475">我们是暴露一个API，还是将其与</st> <st c="61526">云API集成？</st>
- en: <st c="61536">What might be required for scaling and scheduling?</st> <st c="61588">Are
    there additional features that need to</st> <st c="61631">be provided?</st>
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="61536">扩展和调度可能需要什么？</st> <st c="61588">是否有其他功能需要</st> <st c="61631">提供？</st>
- en: <st c="61643">Expect to work</st> <st c="61658">in the capability plane most
    of the time.</st> <st c="61701">With every new user and product, new requirements
    will come up.</st> <st c="61765">The best part is when you can observe how the
    products are evolving and demand more</st> <st c="61849">advanced features.</st>
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="61643">预计大部分时间在能力平面上工作。</st> <st c="61658">随着每个新用户和新产品的加入，会有新的需求出现。</st>
    <st c="61701">每当新用户和新产品出现时，新的需求就会随之而来。</st> <st c="61765">最棒的部分是当你能观察到产品的演变，并且要求更多</st>
    <st c="61849">高级功能。</st>
- en: <st c="61867">Again, focus first on the essentials.</st> <st c="61906">Getting
    your network management and storage integration right is more important than providing
    a machine learning workb</st><st c="62025">ench solution or new container runtimes,
    such</st> <st c="62072">as</st> **<st c="62075">WebAssembly</st>** <st c="62086">(</st>**<st
    c="62088">Wasm</st>**<st c="62092">)</st> *<st c="62095">[8]</st>*<st c="62098">.</st>
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="61867">再次强调，首先关注核心要素。</st> <st c="61906">正确整合网络管理和存储比提供机器学习工作台解决方案或新的容器运行时更为重要，</st><st
    c="62025">例如</st> **<st c="62075">WebAssembly</st>** <st c="62086">(</st>**<st
    c="62088">Wasm</st>**<st c="62092">)</st> *<st c="62095">[8]</st>*<st c="62098">。</st>
- en: <st c="62099">Defining the infrastructure architecture for the platform</st>
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="62099">为平台定义基础架构架构</st>
- en: <st c="62157">After the</st> <st c="62167">fun part of defining the reference
    architecture, we have to go straight into the serious architecture definition.</st>
    <st c="62282">What sounds like a joke is fairly often skipped, yet many platforms
    can’t provide this view.</st> <st c="62375">In fact, this diagram is more relevant
    than the reference architecture for the implementation, architectural discussion,
    and security and compliance checks.</st> <st c="62532">However, it is also more
    complicated</st> <st c="62569">to understand.</st>
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="62157">在定义参考架构的有趣部分之后，我们必须直接进入严肃的架构定义。</st> <st c="62167">听起来像笑话的部分往往被跳过，但许多平台无法提供这个视图。</st>
    <st c="62282">事实上，这个图表比参考架构更相关，因为它涉及实现、架构讨论以及安全与合规性检查。</st> <st c="62375">然而，它也更加复杂</st>
    <st c="62532">理解。</st> <st c="62569">。</st>
- en: <st c="62583">As explained previously, we have to combine on one side an infrastructure
    architecture with the respective components of the platform.</st> <st c="62719">This
    helps us understand where everything in our system’s landscape is located and
    which connections</st> <st c="62820">are required.</st>
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="62583">如前所述，我们必须将一侧的基础架构架构与平台的相关组件结合起来。</st> <st c="62719">这有助于我们理解系统中每个部分的位置以及所需的连接</st>
    <st c="62820">。</st>
- en: <st c="62833">The diagram has to highlight the different environments in which
    computing infrastructure is used, which managed services are consumed, how those
    are connected to each other, and which external connections exist.</st> <st c="63047">Every
    organization has its own way of drawing such diagrams, following given standards,
    or being more simplified.</st> <st c="63161">Our template tries to give a</st>
    <st c="63190">middle ground.</st>
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="62833">该图必须突出显示计算基础设施使用的不同环境，消耗的托管服务，它们之间的连接方式，以及存在的外部连接。</st> <st c="63047">每个组织都有自己绘制此类图表的方式，遵循特定的标准，或者做得更简化。</st>
    <st c="63161">我们的模板尝试提供一个</st> <st c="63190">中间方案。</st>
- en: <st c="63204">You might also vary with the highlights on the architectural diagram.</st>
    <st c="63275">We often see huge relevance in visualizing the exact network connection,
    network isolation, or protocols.</st> <st c="63381">The combination of an isolated
    environment with a corresponding control flow and how updates are played into
    it will utilize both types of diagrams to</st> <st c="63532">maximize understanding.</st>
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="63204">你也可以在架构图中对突出部分进行不同的调整。</st> <st c="63275">我们经常看到，在可视化精确的网络连接、网络隔离或协议方面具有巨大的相关性。</st>
    <st c="63381">将一个隔离环境与相应的控制流结合，并展示如何将更新导入其中，将利用两种图表类型来</st> <st c="63532">最大化理解。</st>
- en: <st c="63555">Remember to include things like management environments/clusters,
    staging environments for integration testing, or even one step before the development
    environment in the diagram.</st> <st c="63736">For continuity purposes, backup
    and recovery might be helpful too.</st> <st c="63803">You</st> <st c="63806">see,
    the more you work on it, the more details will float into it.</st> <st c="63874">When
    a diagram becomes too complex, you should provide</st> <st c="63929">different
    versions.</st>
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="63555">记得在图表中包含诸如管理环境/集群、集成测试的暂存环境，甚至是开发环境之前的一个步骤。</st> <st c="63736">为了保证连贯性，备份和恢复也可能是有帮助的。</st>
    <st c="63803">你看，越是投入工作，更多的细节就会浮现出来。</st> <st c="63874">当图表变得过于复杂时，你应该提供</st>
    <st c="63929">不同的版本。</st>
- en: <st c="63948">Visualizing the control flow of the platform</st>
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="63948">可视化平台的控制流</st>
- en: <st c="63993">What</st> <st c="63999">might be new to you is the</st> **<st
    c="64026">control flow</st>**<st c="64038">. It is</st> <st c="64045">the first
    good step of a process-like approach to get clearance on certain relevant paths
    to manage the platform and user deliverables.</st> <st c="64182">There are multiple
    flows within a platform; these three are the</st> <st c="64246">most prominent:</st>
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="63993">可能</st> <st c="63999">对你来说比较新的可能是</st> **<st c="64026">控制流</st>**<st
    c="64038">。它是</st> <st c="64045">一个像流程一样的方法的第一步，旨在帮助我们澄清管理平台和用户交付物的相关路径。</st>
    <st c="64182">平台内有多个流；其中这三个是</st> <st c="64246">最为突出的：</st>
- en: '**<st c="64261">Infrastructure provisioning</st>**<st c="64289">: This flow
    visualizes the importance of the infrastructure test environments and how changes
    on that level can impact them, from committing the IaC manifest in a versioning
    system through deployment, testing, and</st> <st c="64504">final rollout.</st>'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="64261">基础设施提供</st>**<st c="64289">：此流可视化了基础设施测试环境的重要性，以及在该层级上的变化如何影响它们，从在版本管理系统中提交IaC清单，到部署、测试，再到</st>
    <st c="64504">最终发布。</st>'
- en: '**<st c="64518">Code to deployment</st>**<st c="64537">: This is most relevant
    for the platform users.</st> <st c="64586">How does one’s committed code get picked
    up to be built, integrated, scanned, and tested?</st> <st c="64676">What does
    the development and life-setting procedure</st> <st c="64729">look like?</st>'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="64518">从代码到部署</st>**<st c="64537">：这对于平台用户最为相关。</st> <st c="64586">一个人提交的代码是如何被拾取，构建、集成、扫描和测试的？</st>
    <st c="64676">开发和生命周期设置程序</st> <st c="64729">是什么样的？</st>'
- en: '**<st c="64739">Platform capability management</st>**<st c="64770">: Especially
    relevant for the platform engineers taking care of the</st> <st c="64839">cluster-delivered
    components.</st>'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="64739">平台能力管理</st>**<st c="64770">：这对于负责</st> <st c="64839">集群交付组件的平台注册工程师尤为重要。</st>'
- en: <st c="64868">There are many other smaller control flows that can help us understand
    the platform, such as secrets and certificate management or</st> <st c="65000">user
    management.</st>
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="64868">有许多其他较小的控制流可以帮助我们理解平台，例如秘密和证书管理，或者</st> <st c="65000">用户管理。</st>
- en: <st c="65016">Moving on from the paperwork to real use cases, we will have a
    look at some examples of different platform flavors and implementations.</st>
    <st c="65153">In the next part, you will</st> <st c="65180">extend your perspective
    from generalistic platforms to</st> <st c="65235">specialized solutions.</st>
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="65016">从纸面工作到实际使用案例，我们将看一些不同平台风格和实现的示例。</st> <st c="65153">在下一部分，你将</st>
    <st c="65180">把视角从通用平台扩展到</st> <st c="65235">专门化解决方案。</st>
- en: <st c="65257">Exploring platform as a product – use cases and implementations</st>
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="65257">探索平台作为产品——使用案例和实现</st>
- en: <st c="65321">We talked a lot about the platform’s purpose, such as</st> *<st
    c="65376">self-service first</st>*<st c="65394">. But how do we achieve this and</st>
    <st c="65427">what use cases do we want to provide as</st> <st c="65467">a self-service?</st>
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="65321">我们谈到了平台的目的，比如</st> *<st c="65376">优先考虑自服务</st>*<st c="65394">。但是我们如何实现这一点，</st>
    <st c="65427">我们希望提供哪些使用案例作为</st> <st c="65467">自服务？</st>
- en: <st c="65482">Every organization</st> <st c="65502">has slightly different use
    cases and implementations for a platform.</st> <st c="65571">That’s because every
    organization has a different technology stack and a different legacy/existing
    set of tools and processes that are candidates</st> <st c="65717">for optimization.</st>
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="65482">每个组织</st> <st c="65502">的使用案例和平台实现都有些不同。</st> <st c="65571">这是因为每个组织的技术栈不同，遗留/现有的工具和流程也各不相同，这些都是优化的候选项。</st>
- en: <st c="65734">In this section, we discuss use cases we have seen in organizations
    we have worked with over the years.</st> <st c="65839">We can assume that some
    of thos</st><st c="65870">e will be good candidates for your own future platform</st>
    <st c="65926">engineering initiative.</st>
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="65734">在这一部分，我们讨论了在我们多年来与组织合作中看到的使用案例。</st> <st c="65839">我们可以假设其中一些案例</st><st
    c="65870">将是你自己未来平台工程计划的好候选者。</st>
- en: <st c="65949">Finding the experts and the bottlenecks they cause</st>
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="65949">寻找专家以及他们引起的瓶颈</st>
- en: <st c="66000">There is a</st> <st c="66012">great blog post from</st> *<st c="66033">Thoughtworks</st>*
    <st c="66045">with a quote that allows us to get started with our search for good
    use</st> <st c="66118">cases</st> *<st c="66124">[9]</st>*<st c="66127">.</st>
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="66000">有一篇</st> <st c="66012">来自</st> *<st c="66033">Thoughtworks</st>*
    <st c="66045">的精彩博客文章，其中有一段引用，帮助我们开始寻找好的使用案例</st> <st c="66118">案例</st> *<st c="66124">[9]</st>*<st
    c="66127">。</st>
- en: <st c="66128">What makes something a platform?</st>
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="66128">是什么使某个东西成为平台？</st>
- en: <st c="66161">Platforms are a means of centralizing expertise whilst decentralizing
    innovation to the customer</st> <st c="66259">or user.</st>
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="66161">平台是集中专业知识的手段，同时将创新下放到客户</st> <st c="66259">或用户。</st>
- en: <st c="66267">In other words, in any IT organization that is producing, shipping,
    and operating software to support its business, we can find experts on topics
    such as provisioning infrastructure, access control, building and deploying artifacts,
    observability, quality engineering, release</st> <st c="66545">management, capacity
    planning,</st> **<st c="66576">site reliability engineering</st>** <st c="66604">(</st>**<st
    c="66606">SRE</st>**<st c="66609">), incident response, data analytics, automation,
    business insights, and</st> <st c="66683">so on.</st>
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="66267">换句话说，在任何生产、运输和操作软件以支持其业务的IT组织中，我们可以找到诸如基础设施配置、访问控制、构建和部署工件、可观测性、质量工程、发布</st>
    <st c="66545">管理、容量规划、</st> **<st c="66576">网站可靠性工程</st>** <st c="66604">(</st>**<st
    c="66606">SRE</st>**<st c="66609">)、事件响应、数据分析、自动化、业务洞察等方面的专家</st> <st c="66683">等等。</st>
- en: <st c="66689">The goal of our platform is to identify use cases and which expertise
    they require, and then provide those use cases in a simple way as a self-service
    for everyone to consume without needing to go to the expert</st> <st c="66901">every
    time.</st>
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="66689">我们的平台目标是识别使用案例以及它们所需的专业知识，然后以简单的方式将这些使用案例作为自服务提供给每个人使用，无需每次都去找专家</st>
    <st c="66901">。</st>
- en: <st c="66912">Centralize expertise through a self-service</st>
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="66912">通过自服务来集中专业知识</st>
- en: <st c="66956">Allow everyone to get their job done without having to be an expert
    or ask an expert in all the areas needed to get their</st> <st c="67079">job done!</st>
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="66956">允许每个人完成工作，而不必成为专家或在所有需要的领域请教专家来完成他们的</st> <st c="67079">工作！</st>
- en: <st c="67088">If we now</st> <st c="67098">look at the full</st> **<st c="67116">software
    development life cycle</st>** <st c="67147">(</st>**<st c="67149">SDLC</st>**<st
    c="67153">) within</st> <st c="67163">those organizations and list all the tasks,
    experts, and time needed from the initial idea of a new app or feature until it
    is released to end users, we will be able to identify a lot of bottlenecks that
    slow the SDLC down.</st> <st c="67387">This is either because certain tasks are
    manual, or because they require somebody with expert knowledge to get a task done.</st>
    <st c="67511">As experts are typically rare, they become shared resources that
    teams will have to wait for when they want to get their new feature out</st> <st
    c="67648">the door.</st>
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="67088">如果我们现在</st> <st c="67098">查看整个</st> **<st c="67116">软件开发生命周期</st>**
    <st c="67147">(</st>**<st c="67149">SDLC</st>**<st c="67153">)，并列出从新应用或功能的初步构想到它发布到最终用户所需的所有任务、专家和时间，我们将能够识别出许多阻碍SDLC进展的瓶颈。</st>
    <st c="67387">这要么是因为某些任务是手动的，要么是因为这些任务需要某个专家来完成。</st> <st c="67511">由于专家通常比较稀缺，他们成为了共享资源，团队在发布新功能时往往需要等待这些专家。</st>
    <st c="67648">这会导致项目进度拖延。</st>
- en: <st c="67657">In</st> [*<st c="67661">Chapter 3</st>*](B31164_03.xhtml#_idTextAnchor133)<st
    c="67670">, in the</st> *<st c="67679">Understanding the existing SDLC</st>* <st
    c="67710">section, we will have a closer look at how to best understand the current
    SDLC or the</st> *<st c="67797">Value Creation Journey</st>* <st c="67819">within
    an organization.</st> <st c="67844">You will learn about different approaches
    to understanding the life cycle of an artifact, the tasks involved, the dependencies,
    and how to track time to identify good candidates for automating those as part
    of a</st> <st c="68056">platform offering.</st>
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="67657">在</st> [*<st c="67661">第3章</st>*](B31164_03.xhtml#_idTextAnchor133)<st
    c="67670">中，在</st> *<st c="67679">理解现有SDLC</st>* <st c="67710">一节，我们将更详细地研究如何最好地理解当前的SDLC或组织中的</st>
    *<st c="67797">价值创造之旅</st>* <st c="67819">。</st> <st c="67844">你将了解不同的方法来理解一个工件的生命周期、所涉及的任务、依赖关系，以及如何跟踪时间，以识别出那些适合自动化的任务，作为</st>
    <st c="68056">平台服务的一部分。</st>
- en: <st c="68074">Let us now explore some of those use c</st><st c="68113">ases
    and implementation options from organizations we have worked with in</st> <st
    c="68188">the past!</st>
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="68074">现在让我们来探索一些我们曾与之合作过的组织中的这些用例和实施选项！</st>
- en: <st c="68197">Centralizing expertise as a self-service use case</st>
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="68197">将专业知识集中作为自助服务用例</st>
- en: <st c="68247">While</st> <st c="68254">there are many more of those use cases,
    here are a couple of examples that you will l</st><st c="68339">ikely find yourself
    implementing as a self-service feature as part of</st> <st c="68410">your platform.</st>
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="68247">虽然</st> <st c="68254">还有许多其他的用例，但以下是一些你可能会在平台中实施的自助服务功能示例。</st>
- en: <st c="68424">Provisioning compliant environments</st>
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="68424">提供合规的环境</st>
- en: <st c="68460">Depending</st> <st c="68470">on the industry, there are certain
    regulations on how data has to be stored, how environments have to be secured,
    and what type of reporting needs to happen.</st> <st c="68629">To make sure that
    every environment that is requested by any team in an organization is compliant
    with all those rules, we can implement this as a self-service capability of</st>
    <st c="68803">our platform.</st>
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="68460">根据行业的不同，数据存储、环境安全性以及所需的报告类型等方面都有一定的规定。</st> <st c="68629">为了确保组织中任何团队请求的每个环境都符合所有这些规定，我们可以将其作为我们平台的自助服务功能来实施。</st>
- en: '<st c="68816">Here is a user story for that use case: “</st>*<st c="68858">As
    a data scientist, I want to validate my new data models against a</st>* *<st c="68928">production-like
    dataset!</st>*<st c="68952">”</st>'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="68816">这是该用例的一个用户故事：“</st>*<st c="68858">作为一名数据科学家，我希望将我的新数据模型与一个</st>*
    *<st c="68928">类似生产的数据集进行验证！</st>*<st c="68952">”</st>
- en: '<st c="68954">There are</st> <st c="68964">several details that have to be
    worked out in order to break this story into its individual tasks, such as the
    following: Where do these data sets come from?</st> <st c="69122">Does the data
    scientist want to choose one from multiple available ones?</st> <st c="69195">What’s
    the output of the validation, where is it stored, and who has access to it?</st>
    <st c="69278">How do you select the data model?</st> <st c="69312">How long does
    this validation run and do we need a max time to shut down the environment to
    avoid unnecessary costs?</st> <st c="69429">What type of auditing data do we need
    to produce as this is about accessing</st> <st c="69505">production data?</st>'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="68954">为了将这个故事分解成具体任务，有</st> <st c="68964">一些细节需要解决，例如：这些数据集来自哪里？</st>
    <st c="69122">数据科学家是否希望从多个可用的数据集里选择一个？</st> <st c="69195">验证的输出是什么？它存储在哪里？谁可以访问它？</st>
    <st c="69278">你如何选择数据模型？</st> <st c="69312">这个验证运行多长时间？我们是否需要设置最大时间来关闭环境，以避免不必要的成本？</st>
    <st c="69429">我们需要生成什么类型的审计数据，因为这涉及访问</st> <st c="69505">生产数据？</st>
- en: '<st c="69521">Another similar user story could be this: “</st>*<st c="69565">As
    a QA engineer, I want to run my manual tests against the latest version of our
    software connected to a production database, using a browser/OS combination that
    matches what 80% of our end</st>* *<st c="69757">users use!</st>*<st c="69767">”</st>'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="69521">另一个类似的用户故事可能是：“</st>*<st c="69565">作为一名QA工程师，我希望使用与80%终端用户相匹配的浏览器/操作系统组合，在连接到生产数据库的最新版本软件上运行我的手动测试！</st>*<st
    c="69757">”</st>
- en: '<st c="69769">Similar to the previous user story, we need to ask some additional
    questions, such as the following: What is the software product you want to test
    and how can it automatically be deployed?</st> <st c="69958">Where can we find
    the data about the browser/OS usage of our production users?</st> <st c="70037">How
    long does this environment need to be available?</st> <st c="70090">Can we set
    an expiration time for that provisioned environment?</st> <st c="70154">What data
    is the engineer allowed to see and which data are they not allowed to see, as
    we are dealing with having access to</st> <st c="70279">production data?</st>'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="69769">与前面的用户故事类似，我们需要提出一些额外的问题，例如：你想测试的软件产品是什么？它如何能够自动部署？</st> <st c="69958">我们在哪里可以找到生产用户浏览器/操作系统使用的数据？</st>
    <st c="70037">这个环境需要保持可用多长时间？</st> <st c="70090">我们可以为这个配置的环境设置过期时间吗？</st> <st
    c="70154">工程师可以看到哪些数据，哪些数据不能看到？因为我们正在处理访问</st> <st c="70279">生产数据的问题。</st>
- en: <st c="70295">The implementation of such a use case can vary widely but we should
    always start and think about the</st> *<st c="70397">end user journey</st>*<st
    c="70413">. We probably want our data scientist or quality engineer to log on
    to our internal development platform portal.</st> <st c="70526">There, they can
    select the use case of</st> *<st c="70565">provisioning a compliant environment</st>*<st
    c="70601">. Then, they can fill out the relevant data to answer all those questions
    that came up.</st> <st c="70689">That input can then b</st><st c="70710">e used
    to create that environment and make it available to the team that</st> <st c="70784">requested
    it.</st>
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="70295">这样的用例实现可能会有很大差异，但我们应该始终从*<st c="70397">终端用户的旅程</st>*开始考虑。</st>
    我们可能希望我们的数据科学家或质量工程师登录到我们的内部开发平台门户。</st> <st c="70526">在那里，他们可以选择</st> *<st c="70565">配置符合要求的环境</st>*<st
    c="70601">的用例。</st> 然后，他们可以填写相关数据，以回答所有提出的问题。</st> <st c="70689">这些输入可以用来创建该环境，并使其可供</st>
    <st c="70710">请求该环境的团队使用。</st> '
- en: <st c="70797">Running performance and resiliency tests</st>
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="70797">进行性能和韧性测试</st>
- en: <st c="70838">Performance and resiliency testing should</st> <st c="70881">be
    part of every release of software to ensure that new features do not impact the
    UX by becoming super slow.</st> <st c="70991">We also want to make sure that our
    new software is resilient against unforeseen scenarios, such as a network connectivity
    issue, a slow or unavailable backend service or data, or an unexpectedly</st>
    <st c="71186">high load.</st>
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="70838">性能和韧性测试应该</st> <st c="70881">成为每个软件版本发布的一部分，以确保新功能不会通过变得超级慢来影响用户体验（UX）。</st>
    <st c="70991">我们还希望确保我们的新软件能够应对不可预见的情况，例如网络连接问题、缓慢或不可用的后端服务或数据，或者异常</st> <st c="71186">高负载。</st>
- en: <st c="71196">While there</st> <st c="71208">are many tools that can generate
    traffic (load testing tools) or simulate problems (chaos engineering), those tools
    and the environments they need often take a lot of expertise to set up, configure,
    run, and later analyze</st> <st c="71431">the results.</st>
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="71196">虽然有很多工具可以生成流量（负载测试工具）或模拟问题（混沌工程），但这些工具及其所需的环境往往需要大量专业知识来设置、配置、运行和后续分析</st>
- en: '<st c="71443">Instead of having our performance, site reliability, or chaos
    engineers become the bottleneck, we can strive to centralize that expertise and
    provide this as a self-service to our engineering teams.</st> <st c="71643">Here
    would be the right user story: “</st>*<st c="71680">As a development team, we
    want to know whether the latest version of our software has any performance or</st>*
    *<st c="71786">resiliency degradations!</st>*<st c="71810">”</st>'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="71443">与其让我们的性能、站点可靠性或混沌工程师成为瓶颈，我们可以努力将这些专业知识集中化，并将其提供为我们工程团队的自助服务。</st>
    <st c="71643">这里将是正确的用户故事：“</st>*<st c="71680">作为开发团队，我们希望知道我们软件的最新版本是否存在任何性能或</st>*
    *<st c="71786">可靠性下降！</st>*<st c="71810">”</st>
- en: '<st c="71812">There could be multiple iterations of this self-service capability
    that we could implement.</st> <st c="71904">Starting with provisioning the environment
    that contains the relevant tools, all the developers need to do is execute the
    tests and wait for the results.</st> <st c="72058">Ideally, though, we want to
    end up in a situation where this can be fully automated and even integrated into
    our development process.</st> <st c="72192">We should aim for something like this:
    “</st>*<st c="72232">As a development team, we want to get a performance and resiliency
    indicator on major Pull Requests so we know whether the latest code change is
    good enough to be promoted</st>* *<st c="72405">to production!</st>*<st c="72419">”</st>'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="71812">我们可以实现这种自助服务能力的多个迭代。</st> <st c="71904">从提供包含相关工具的环境开始，所有开发人员需要做的就是执行测试并等待结果。</st>
    <st c="72058">但理想情况下，我们希望最终达到这样的情况，即完全自动化甚至集成到我们的开发流程中。</st> <st c="72192">我们应该朝着这样的目标努力：“</st>*<st
    c="72232">作为开发团队，我们希望在主要拉取请求上获得性能和可靠性指标，以便知道最新的代码更改是否足够好，可以提升</st>* *<st c="72405">到生产环境！</st>*<st
    c="72419">”</st>
- en: <st c="72421">Like in the previous example, we could start with a portal where
    teams can request the performance testing environment.</st> <st c="72541">To fulfill
    the second, fully automated user story, we need to think about providing an API
    that can be called from the CI/CD pipeline system that get</st><st c="72690">s
    all relevant input parameters and then returns the actual result of the</st> <st
    c="72765">executed test.</st>
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="72421">就像在前面的例子中，我们可以从一个门户开始，团队可以请求性能测试环境。</st> <st c="72541">要满足第二个完全自动化的用户故事，我们需要考虑提供一个可以从
    CI/CD 流水线系统调用的 API，获取所有相关的输入参数，然后返回执行测试的实际结果。</st>
- en: <st c="72779">Onboarding of a new application</st>
  id: totrans-324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="72779">新应用的入职</st>
- en: <st c="72811">Creating</st> <st c="72820">new applications or services is what
    development teams do.</st> <st c="72880">To do so, they typically have to go through
    a lot of different steps, such as creating a new Git repository, adding boilerplate
    code and metadata settings, configuring the build (CI) pipelines, and many</st>
    <st c="73083">more steps.</st>
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="72811">创建</st> <st c="72820">新的应用程序或服务是开发团队的工作。</st> <st c="72880">为此，他们通常必须经历许多不同的步骤，例如创建一个新的
    Git 仓库，添加样板代码和元数据设置，配置构建（CI）流水线等等。</st> <st c="73083">更多的步骤。</st>
- en: <st c="73094">If every development team always started from scratch, we would
    not only end up with multiple different ways of doing essentially the same thing,
    but we would also have a lot of duplicated work across all development teams that
    take the time away from</st> <st c="73347">actual coding.</st>
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="73094">如果每个开发团队总是从头开始，我们不仅会出现多种本质上相同的做事方式，而且还会在所有开发团队中产生大量重复的工作，这会分散实际编码的时间。</st>
    <st c="73347"> </st>
- en: '<st c="73361">A good user story for a platform self-service feature would be
    this: “</st>*<st c="73432">As a development team, we want to create a new application
    based on a fully configured template so that we can focus on writing code and
    not deal with how we build, deploy,</st>* *<st c="73606">and operate!</st>*<st
    c="73618">”</st>'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="73361">一个适合平台自助功能的良好用户故事可能是这样的：“</st>*<st c="73432">作为开发团队，我们希望基于一个完全配置的模板创建一个新的应用程序，这样我们就可以专注于编写代码，而不用担心如何构建、部署，</st>*
    *<st c="73606">和运行！</st>*<st c="73618">”</st>
- en: <st c="73620">Looking</st> <st c="73628">at the full SDLC, our self-service
    can even start a step earlier, with the feature requirement that was created by
    the product</st> <st c="73754">team with tools such as</st> **<st c="73779">Jira</st>**<st
    c="73783">. The following shows the end-to-end onboarding workflow of a new application
    in one of the organizations the authors have</st> <st c="73906">worked with:</st>
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="73620">查看</st> <st c="73628">整个SDLC，我们的自服务甚至可以从产品团队使用诸如</st> **<st c="73779">Jira</st>**<st
    c="73783">等工具创建的特性需求开始，</st> <st c="73754">以下展示了作者曾与之合作的某个组织中新应用的端到端入职流程：</st>
- en: '![Figure 2.12: End-to-end application onboarding as a self-service (The image
    is intended as a visual reference; the textual information isn''t essential.)](img/B31164_02_12.jpg)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![图2.12：作为自服务的端到端应用入职（该图像仅作为视觉参考，文本信息并不重要。）](img/B31164_02_12.jpg)'
- en: '<st c="74311">Figure 2.12: End-to-end application onboarding as a self-service
    (The image is intended as a visual reference; the textual information isn''t essential.)</st>'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="74311">图2.12：作为自服务的端到端应用入职（该图像仅作为视觉参考，文本信息并不重要。）</st>
- en: <st c="74463">For development teams, the journey starts on the Jira ticket.</st>
    <st c="74526">They then go to Backstage, the IDP chosen by this organization,
    where they walk through the self-service</st> *<st c="74631">Application Onboarding</st>*
    <st c="74653">wizard.</st> <st c="74662">That wizard creates a new Git repository
    that is pre-loaded with ready-to-go code templates, pipelines, deployment instructions,
    observability configuration, ownership, and more.</st> <st c="74841">Once code
    gets committed, the pipelines automatically deploy the art</st><st c="74909">ifact
    in a development code space that gets automatically connected to Visual</st> <st
    c="74988">Studio Code!</st>
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="74463">对于开发团队而言，旅程从Jira工单开始。</st> <st c="74526">接着，他们前往该组织选择的IDP——Backstage，在那里他们将走过自服务</st>
    *<st c="74631">应用程序入职</st>* <st c="74653">向导。</st> <st c="74662">该向导会创建一个新的Git仓库，并预先加载好现成的代码模板、管道、部署说明、可观察性配置、所有权等内容。</st>
    <st c="74841">一旦代码提交，管道会自动将构建物部署到开发代码空间，并自动连接到Visual</st> <st c="74909">Studio
    Code！</st>
- en: <st c="75000">Access to observability data for incident response</st>
  id: totrans-332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="75000">访问可观察数据以应对事故响应</st>
- en: <st c="75051">Once new software gets deployed into production, the focus for
    developers typically</st> <st c="75135">shifts to the next application or feature.</st>
    <st c="75179">When disaster strikes, though, it’s time for them to support the
    operations or SRE team with troubleshooting to fix any issue that</st> <st c="75310">came
    up.</st>
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="75051">一旦新软件部署到生产环境，开发人员通常会将焦点转向下一个应用或功能。</st> <st c="75135">然而，当灾难发生时，他们需要支持运维或SRE团队进行故障排除，以修复出现的任何问题。</st>
- en: <st c="75318">In many organizations, access to telemetry or observable data
    in production is limited to selected teams that take care of those production
    environments.</st> <st c="75473">There are also compliance reasons as not everyone
    should have access to potentially sensitive data.</st> <st c="75573">But when
    sitting in the so-called</st> *<st c="75607">War Room</st>*<st c="75615">, it’s
    important to quickly access the relevant observability data without having to
    fill out too many request forms, copying things from one environment to the other,
    or converting data from the production observability tool to what developers are</st>
    <st c="75864">used to.</st>
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="75318">在许多组织中，生产环境中的遥测或可观察数据仅限于由专门团队负责的生产环境访问。</st> <st c="75473">还有合规性原因，毕竟不是每个人都应该访问可能敏感的数据。</st>
    <st c="75573">但当身处所谓的</st> *<st c="75607">战情室</st>*<st c="75615">时，快速访问相关的可观察数据非常重要，而不必填写太多请求表单、将数据从一个环境复制到另一个环境，或将生产可观察工具中的数据转换为开发人员常用的格式。</st>
- en: '<st c="75872">In</st> [*<st c="75876">Chapter 3</st>*](B31164_03.xhtml#_idTextAnchor133)<st
    c="75885">, we walk through this use case in more detail so we’ll keep it to the
    user story here: “</st>*<st c="75974">As a development team, we want to get easy
    access to the relevant observability data for a production incident to solve the</st>*
    *<st c="76099">problem fast!”</st>*'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="75872">在</st> [*<st c="75876">第3章</st>*](B31164_03.xhtml#_idTextAnchor133)<st
    c="75885">，我们会更详细地讲解此用例，在这里我们简要描述用户故事：“</st>*<st c="75974">作为开发团队，我们希望能轻松访问生产事故相关的可观察数据，以便快速解决</st>*
    *<st c="76099">问题！”</st>*
- en: <st c="76113">Now that we have a couple of use cases, let’s see ho</st><st c="76166">w
    we can translate those ideas into something our users can actually use and</st>
    <st c="76244">benefit from.</st>
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: <st c="76257">Understanding TVPs</st>
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="76276">In product management, we typically talk about a</st> **<st c="76326">minimum
    viable product</st>** <st c="76348">(</st>**<st c="76350">MVP</st>**<st c="76353">).</st>
    <st c="76357">The</st> <st c="76361">MVP defines the simplest version of a product
    that you need to build to sell it to a market.</st> <st c="76454">The concept
    of the MVP was initially introduced</st> <st c="76502">through the</st> *<st c="76514">Lean
    Startup</st>* <st c="76527">movement driven by</st> *<st c="76546">Eric Ries</st>*
    *<st c="76555">[10]</st>*<st c="76560">. I encourage everyone to either read the
    book or the excellent blog posts on the</st> [<st c="76642">theleanstartup.com</st>](https://theleanstartup.com)
    <st c="76660">website.</st>
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: <st c="76669">The</st> *<st c="76674">minimum</st>* <st c="76681">in MVP refers
    to a version of a product that helps the start-up team validate the hypothesis
    that their idea really solves a problem or pain.</st> <st c="76824">All of those
    Lean Startup ideas can directly be applied to platform engineering</st> <st c="76904">like
    this:</st>
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: <st c="76914">Our team is</st> <st c="76927">the start-up</st>
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="76939">Our platform is</st> <st c="76956">the product</st>
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="76967">Our target market is our</st> <st c="76993">internal users</st>
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="77007">Our hypothesis is that it delivers</st> <st c="77043">the purpose</st>
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="77054">In Lean Startup, the</st> <st c="77075">MVP is</st> <st c="77083">also
    defined as the first version of a product that is</st> *<st c="77138">good enough</st>*
    <st c="77149">to ship.</st> <st c="77159">It is good enough because it already
    solves problems, while it might not be feature-complete.</st> <st c="77253">It
    is good enough to get it into the hands of users, validate our hypothesis, and
    get early feedback on which we can iterate and make the next</st> <st c="77396">version
    better.</st>
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: <st c="77411">Now, let’s dive deeper into how we can</st> <st c="77451">apply
    all those Lean Startup ideas and define our own MVP – or, as we like to call it,</st>
    <st c="77538">our TVP!</st>
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: <st c="77546">Finding your TVP use case</st>
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="77572">In a</st> <st c="77578">previous section, we already explored
    which use cases we could provide as a self-service through our platform.</st>
    <st c="77689">We identified them by looking into where experts are currently needed
    to get a job done or where there is a lot of manual</st> <st c="77811">work involved.</st>
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="77825">As with any new software product, there are probably a lot of
    great features we want to implement.</st> <st c="77925">The question is this:
    Which is the one we should start with?</st> <st c="77986">To answer this, it’s
    best to prioritize based on several dimensions.</st> <st c="78055">One such approach
    is the</st> *<st c="78080">ICE scoring</st>* <st c="78091">model but feel free
    to use any scoring model that you are familiar with or already use in your organization</st>
    *<st c="78200">[11]</st>*<st c="78204">.</st> **<st c="78206">ICE</st>** <st c="78209">stands</st>
    <st c="78216">for</st> **<st c="78221">impact</st>** <st c="78227">(the impact
    we will have with this feature),</st> **<st c="78273">confidence</st>** <st c="78283">(how
    confident we are that we really achieve the desired impact), and</st> **<st c="78354">ease</st>**
    <st c="78358">(the level of effort that goes into implementing this).</st> <st
    c="78415">We give every indicator a value between 1-10 and then multiply the numbers.</st>
    <st c="78491">If we do this for every feature idea, we can easily compare and
    come up with a first prioritized list.</st> <st c="78594">Here is how this could
    look like for the four use cases we discussed earlier using some fictitious numbers
    for the</st> <st c="78709">ICE scoring:</st>'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '| **<st c="78721">Use Case</st>** | **<st c="78730">Impact</st>** | **<st c="78737">Confidence</st>**
    | **<st c="78748">Ease</st>** | **<st c="78753">Score</st>** |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
- en: '| <st c="78759">Provision</st> <st c="78770">Compliant Environments</st> |
    <st c="78792">6 (</st><st c="78796">good impact)</st> | <st c="78809">5 (</st><st
    c="78813">middle confidence)</st> | <st c="78832">2 (</st><st c="78836">not easy)</st>
    | <st c="78846">60</st> |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
- en: '| <st c="78849">Running Performance and</st> <st c="78874">Resilience Tests</st>
    | <st c="78890">6</st> | <st c="78892">5</st> | <st c="78893">5</st> | <st c="78894">150</st>
    |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
- en: '| <st c="78897">Onboarding of a</st> <st c="78914">new application</st> | <st
    c="78929">8</st> | <st c="78931">7</st> | <st c="78932">3</st> | <st c="78933">168</st>
    |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
- en: '| <st c="78936">Access to</st> <st c="78947">Observability Data</st> | <st
    c="78965">8</st> | <st c="78967">8</st> | <st c="78968">3</st> | <st c="78969">172</st>
    |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
- en: '<st c="78972">Table 2.1: ICE scoring example</st>'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: <st c="79003">As we said, the</st> <st c="79019">ICE scores in the preceding
    table are just fictitious.</st> <st c="79075">However, the examples should give
    you an indication of how this scoring works.</st> <st c="79154">Another form of
    it includes reach as well, so that is called RICE.</st> **<st c="79221">RICE</st>**
    <st c="79225">is</st> <st c="79229">simply multiplying reach, impact, and confidence
    and dividing the result by effort – giving us an</st> <st c="79327">easy-to-use
    score.</st>
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: <st c="79345">Based on the preceding example, we could argue to either start
    with</st> *<st c="79414">Onboarding of a New Application</st>* <st c="79445">or</st>
    *<st c="79449">Access to Observability Data</st>* <st c="79477">as they scored
    highest.</st> <st c="79502">On the other hand, we could also argue that</st> *<st
    c="79546">Running Performance and Resiliency Tests</st>* <st c="79586">would be
    a better candidate as it seems to be the easiest</st> <st c="79645">to implement.</st>
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: <st c="79658">Whether you use ICE, RICE, or any other model, it should help
    you make a decision on which use case to tackle first with the goal of quickly
    making an impact.</st> <st c="79818">Before we start implementing, let’s talk
    about how good that first implementation has</st> <st c="79904">to be</st><st
    c="79909">!</st>
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: <st c="79910">Good enough versus perfectly done!</st>
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="79944">We probably</st> <st c="79956">all agree that a product is hardly
    ever perfect or done!</st> <st c="80014">There is always the one or the other
    feature that we would like to see or that annoying bug that we hope somebody can
    finally fix.</st> <st c="80145">When starting with a new product, such as our
    platform, we need to change that thinking and be good with a first release that
    is</st> *<st c="80274">good enough</st>*<st c="80285">. This doesn’t mean we are
    taking shortcuts; it just means we need to set aside our perfectionist mentality
    and have the courage to say, “</st>*<st c="80423">It’s good enough – let’s</st>*
    *<st c="80449">ship it!</st>*<st c="80457">”</st>
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="80459">In the Lean Startup, there</st> <st c="80485">is a reference
    to the launch of Google Maps</st> *<st c="80530">[12]</st>*<st c="80534">. Seems
    that the team was demoing their new dynamic web (using AJAX) map solution to the
    Google senior management team.</st> <st c="80654">Their approach was the first
    of its kind.</st> <st c="80696">The management team was very impressed, even though
    the development team still considered it just an early prototype.</st> <st c="80814">Larry
    and Sergey, so the rumor goes, simply said, “</st>*<st c="80865">It is already
    good enough.</st> <st c="80893">Ship it.</st>*<st c="80901">” While the development
    team had reservations and fears, they went ahead as asked.</st> <st c="80985">The
    rest – as we all know – is history: Google Maps was and is still a huge success.</st>
    <st c="81070">This success was driven by the fact that the solution just did one
    thing – but that thing was done extremely well and was a key differentiator to
    everything else out there.</st> <st c="81243">Shipping it just with a limited
    feature set was what caught their competition by surprise and gave them</st> <st
    c="81347">a leadway.</st>'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="81357">How does this translate to our TVP?</st> <st c="81394">Unlike
    the Google example, we do not have to fear competition – or do we?</st> <st c="81468">We
    actually do: our competition is the development teams that either waste their
    time by doing things the same way or starting their own initiative to build tooling
    and automation to solve the problem just for them instead of thinking about how
    to do this at scale for the</st> <st c="81741">whole organization.</st>'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="81357">这如何转化为我们的TVP呢？</st> <st c="81394">与Google的例子不同，我们不必害怕竞争——或者我们真的有吗？</st>
    <st c="81468">事实上，我们是有竞争的：我们的竞争对手是那些开发团队，要么浪费时间按旧有方式做事，要么启动自己的项目，构建工具和自动化来解决问题，但只是为自己服务，而不是考虑如何为整个组织规模化解决这个问题。</st>
    <st c="81741">整个组织。</st>
- en: <st c="81760">That means that we must not be perfect to deliver the first implementation
    of our TVP, but it must be good enough to help us show that we provide value.</st>
    <st c="81914">What that value is is what we need to specify in our hypothesis
    for the use cases</st> <st c="81996">we impleme</st><st c="82006">nt.</st>
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="81760">这意味着我们不必完美无缺地交付我们的TVP第一次实施，但它必须足够好，以帮助我们展示提供的价值。</st> <st c="81914">我们需要在假设中明确指出，这个价值是什么，具体是为哪些用例</st>
    <st c="81996">我们实施</st><st c="82006">的。</st>
- en: <st c="82010">TVP – validating our hypothesis</st>
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="82010">TVP – 验证我们的假设</st>
- en: <st c="82042">So, we</st> <st c="82049">picked our use case and we know that
    our first delivery has to be good enough for our end users to use it and get value
    out of it.</st> <st c="82181">But what is that value?</st> <st c="82205">How can
    we measure and prove that our platform capability is actually having</st> <st
    c="82282">an impact?</st>
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="82042">因此，我们</st> <st c="82049">选择了我们的用例，我们知道我们的第一次交付必须足够好，以便最终用户可以使用并从中获得价值。</st>
    <st c="82181">但是，那个价值是什么呢？</st> <st c="82205">我们如何衡量并证明我们的平台功能确实有</st> <st c="82282">影响呢？</st>
- en: <st c="82292">This is where our product hypothesis comes in.</st> <st c="82340">Looking
    at the same use cases from previously, we could come up with the following assumptions
    on the impact we want</st> <st c="82457">to have:</st>
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="82292">这是我们的产品假设所在。</st> <st c="82340">回顾之前提到的相同用例，我们可以提出以下我们希望达到的假设影响：</st>
    <st c="82457">有：</st>
- en: '| **<st c="82465">Use Case</st>** | **<st c="82474">Hypothesis</st>** |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="82465">用例</st>** | **<st c="82474">假设</st>** |'
- en: '| <st c="82485">Provision</st> <st c="82496">Compliant Environments</st> |
    <st c="82518">80% fewer compliance violations when validating new</st> <st c="82571">data
    models</st> |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| <st c="82485">提供</st> <st c="82496">合规环境</st> | <st c="82518">验证新</st> <st
    c="82571">数据模型</st> <st c="82582">时合规违规减少80%</st> |'
- en: '| <st c="82582">Running Performance and</st> <st c="82607">Resilience Tests</st>
    | <st c="82623">50% fewer scalability issues in production as we identify and
    fix those</st> <st c="82696">problems earlier</st> |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| <st c="82582">性能和</st> <st c="82607">弹性测试</st> | <st c="82623">在生产环境中，识别并修复问题后，扩展性问题减少50%</st>
    |'
- en: '| <st c="82712">Onboarding of a</st> <st c="82729">new application</st> | <st
    c="82744">20% reduction of lead time of a</st> <st c="82777">new application</st>
    |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| <st c="82712">新应用程序的</st> <st c="82729">引导</st> | <st c="82744">新应用程序的交付时间减少20%</st>
    |'
- en: '| <st c="82792">Access to</st> <st c="82803">Observability Data</st> | <st
    c="82821">50% reduction of troubleshooting time in</st> <st c="82863">production
    issues</st> |  |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| <st c="82792">访问</st> <st c="82803">可观察性数据</st> | <st c="82821">生产问题的故障排除时间减少50%</st>
    |  |'
- en: '<st c="82880">Table 2.2: Product hypothesis to validate use cases</st>'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="82880">表2.2：验证用例的产品假设</st>
- en: <st c="82932">The</st> <st c="82937">hypothesis is also a great way to pitch
    the idea to those people within the organization who need to provide the funding
    for our efforts.</st> <st c="83075">In the end, we are selling internally – and
    we need to make a strong case for why we would invest time and money in building
    a new internal development platform.</st> <st c="83237">Those value statements
    that we call hypothesis will most likely resonate really well with</st> <st c="83327">your
    leadership.</st>
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="82932">这个</st> <st c="82937">假设也是一个很好的方式，可以向组织内需要为我们工作提供资金的人推介这个想法。</st>
    <st c="83075">最终，我们是在做内部推销——我们需要充分论证为何我们要投资时间和金钱来建立一个新的内部开发平台。</st> <st c="83237">我们所称之为假设的价值声明，很可能会与</st>
    <st c="83327">你的领导层产生共鸣。</st>
- en: '<st c="83343">The last question that remains is this: How can we measure and
    validate our hypothesis?</st> <st c="83432">For some, it should be easy to assume
    we have things such as</st> *<st c="83493">number of tickets for compliance violations</st>*<st
    c="83536">,</st> *<st c="83538">tickets for scalability-related product issues</st>*<st
    c="83584">, or</st> *<st c="83589">development time booked on incident response
    tickets</st>*<st c="83641">. The trickier ones will be around lead time, as how
    an organization defines lead time first needs to be explained.</st> <st c="83757">Does
    it start with the creation of the initial feature request or when the developer
    started to work on it?</st> <st c="83865">Also, how do we measure the full end-to-end
    stream?</st> <st c="83917">While all of this is possible, we must make sure we
    know how to measure the status quo to then be able to compare it to the numbers
    once we have our TVP in place to validate</st> <st c="84091">our hypothesis.</st>'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: <st c="84106">Build, measure, and learn</st>
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="84132">We know what we want to build, what our hypothesis is, and how
    we measure it.</st> <st c="84211">Now, it’s time to put this into motion.</st>
    <st c="84251">Like with any agile product development, we want to</st> <st c="84302">build,
    measure, and learn.</st> <st c="84330">We want to</st> <st c="84340">involve our
    end users as soon as possible.</st> <st c="84384">The</st> <st c="84388">best
    way to do so is to already include and learn from them when we are still in the
    prototyping phase.</st> <st c="84492">Continuous feedback helps us make important
    decisions early instead of waiting until we have a final version that our users
    reject because we missed something</st> <st c="84651">very obvious.</st>
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: <st c="84664">The process can best be visualized with the following diagram
    that you also find in lots of literature inspired by the Lean</st> <st c="84789">Startup
    movement:</st>
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13: Build, measure, and learn to get to your TVP](img/B31164_02_13.jpg)'
  id: totrans-377
  prefs: []
  type: TYPE_IMG
- en: '<st c="84848">Figure 2.13: Build, measure, and learn to get to your TVP</st>'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: <st c="84905">It is a continuous loop that tries to minimize the time between
    the build, measure, and learn stages so that we can course correct or pivot in
    case the feedback from our measurement indicates that we are off the</st> <st
    c="85118">wrong path.</st>
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: <st c="85129">A couple of milestones that are good to consider in that loop
    are</st> <st c="85196">as follows:</st>
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="85207">First prototype</st>**<st c="85223">: Show this to interested
    and potential individual power users.</st> <st c="85288">They will give you great</st>
    <st c="85313">early feedback.</st>'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="85328">Good enough</st>**<st c="85340">: Once you reach a stage that
    delivers on the promise of the user story, expand it to a group of early adopters
    to get</st> <st c="85460">broader feedback.</st>'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="85477">Hypothesis achieved</st>**<st c="85497">: Once you proved the
    hypothesis with your first early adopters, it’s time to open and promote this
    to the rest of the org.</st> <st c="85622">Use your early adopters to promote
    the new capabilities</st> <st c="85678">for you!</st>'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="85686">Here we are.</st> <st c="85700">We have</st> <st c="85708">our
    TVP!</st>
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: <st c="85716">The TVP</st>
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: <st c="85724">The TVP is that version of our platform that provides value to
    our end users.</st> <st c="85803">It allows the platform engineering team to validate
    our hypothesis that it fulfills the purpose of our use cases (e.g., reducing cognitive
    load).</st> <st c="85949">It allows us to collect the maximum amount of validated
    learning with the least effort for our next</st> <st c="86049">product iteration.</st>
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: <st c="86067">When you start introducing a platform, it’s important to track
    its adoption and identify whether you are on the right path.</st> <st c="86192">Next,
    we will help you define KPIs to</st> <st c="86230">do s</st><st c="86234">o.</st>
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: <st c="86237">Looking at the relevant KPIs to make adoption transparent</st>
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="86295">Do good things and talk about it.</st> <st c="86330">(Georg Volkmar
    Earl of Zedtwitz-Arnim, 1978.)</st>
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: <st c="86375">A common issue</st> <st c="86390">we see across many platform
    implementations is the lack of evidence of its benefits.</st> <st c="86476">In
    theory, that all makes sense, but let’s put some numbers behind it.</st> <st c="86547">In
    addition, they help to understand if you are going in the</st> <st c="86608">right
    direction.</st>
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: <st c="86624">Therefore, it is helpful to define different</st> **<st c="86670">KPIs</st>**
    <st c="86674">based on which one can understand the progress of platform adoption.</st>
    <st c="86744">In the first step, you should reflect on what you measure already.</st>
    <st c="86811">Very often, we just need to combine available numbers in the right
    way to be able to define new</st> <st c="86907">performance indicators.</st>
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: <st c="86930">First, we need to understand the metrics, logs, and traces, define
    how we get the values they represent, and what they mean.</st> <st c="87056">While
    all of them can be relevant sources, most will not be relevant to your platform’s
    adoption.</st> <st c="87154">This just represents the system’s side.</st> <st
    c="87194">Meanwhile, it should be clear that we are more interested in the user
    and their</st> <st c="87273">experience.</st> <st c="87286">Support channels,
    ticket systems, open pull requests, the number of onboarding requests, and other
    user interactive tools will be helpful in understanding the adaptation.</st> <st
    c="87457">The importance of those numbers will change over time.</st> <st c="87512">For
    example, the number of people requesting access to the platform will usually look
    like a hill with two flat sides.</st> <st c="87631">On the one side, because people
    are too shy to try new things, adoption starts slow.</st> <st c="87716">On the
    other side of the hill, fewer new projects will be onboarded to the platform.</st>
    <st c="87801">Another example could be the number of support requests.</st> <st
    c="87858">They usually grow with the number of users.</st> <st c="87902">However,
    as a platform targets self-service, those numbers can be expected to decrease
    to a minimum over time while your platform becomes better and users understand
    how to</st> <st c="88075">use it.</st>
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: <st c="88082">That’s why, secondly, you have to define the current context of
    your platform’s KPI.</st> <st c="88168">It might seem to be obvious that a mature
    platform might have different KPIs or that your stakeholders have to read those
    KPIs differently but believe me, it is not.</st> <st c="88334">It is on you to
    make this transparent, clear, and understandable</st> <st c="88399">to everyone.</st>
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: <st c="88411">Important note</st>
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: <st c="88426">KPIs and their current context of maturity need to be</st> <st
    c="88481">explicitly specified.</st>
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: <st c="88502">As an example, the following diagram highlights how the KPIs could
    look compared to an environment where a platform is poorly integrated.</st> <st
    c="88641">The numbers are based on a few measurements taken from different projects
    and generalized here.</st> <st c="88737">On the left side, there is no visible
    direction of improvement, or they keep developing up and down.</st> <st c="88838">The
    most obvious is an increase in support requests.</st> <st c="88891">Placing this
    in the context of fewer applications using it is a bad sign.</st> <st c="88965">Now,
    on the right side, we can see an improvement for any KPI.</st> <st c="89028">Most
    numbers will not go down to zero, but they will stay steady independently of platform
    growth, end-user growth, or other</st> <st c="89153">long-term impacts.</st>
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.14: Comparing platform impact (left: no platform, right: with platform)](img/B31164_02_14.jpg)'
  id: totrans-397
  prefs: []
  type: TYPE_IMG
- en: '<st c="89433">Figure 2.14: Comparing platform impact (left: no platform, right:
    with platform)</st>'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: <st c="89513">These numbers</st> <st c="89527">are missing context.</st> <st
    c="89549">When you declare a certain state of the platform through its life cycle,
    numbers become more meaningful.</st> <st c="89654">In the next figure, we added
    an example</st> <st c="89694">of segmentation.</st>
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: <st c="89710">With the first adoption support requests, costs per change are
    increasing, while only a few applications are being migrated.</st> <st c="89836">During
    the ramp-up phase, you can see that the number of new applications is increasing
    fast, and at the same time, the support requests go up.</st> <st c="89980">The
    cost per change stagnates.</st> <st c="90011">In the next segment of optimization,
    we can now see heavy changes.</st> <st c="90078">Cost per change and support requests
    are dropping steeply.</st> <st c="90137">The number of new applications is at
    its peak and slowly going down due to the fact that most applications that could
    use a platform</st> <st c="90270">have migrated.</st>
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: <st c="90284">Over the three phases, the time per release drops down.</st> <st
    c="90341">That’s an effect of the automation and self-service and starts flattening
    out in the last segment.</st> <st c="90440">This is similar to almost all other
    KPIs that have found a steady development.</st> <st c="90519">In comparison to
    the other diagrams, we also changed the representation of the number of added
    applications.</st> <st c="90628">Now, you can see the number of migrated apps
    per quarter as well as the overall number</st> <st c="90715">of applications.</st>
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15: Example KPIs with the segmentation of the platform life cycle](img/B31164_02_15.jpg)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
- en: '<st c="90968">Figure 2.15: Example KPIs with the segmentation of the platform
    life cycle</st>'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: <st c="91042">Usually, when companies see such numbers, they would stop investing
    in it.</st> <st c="91118">With a product mindset, those numbers mean you are able
    to provide continuous improvements and innovation for a static set of costs, while
    customers are satisfied and enabled for</st> <st c="91297">fast developme</st><st
    c="91311">nt.</st>
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: <st c="91315">Defining platform adoption KPIs</st>
  id: totrans-405
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="91347">We</st> <st c="91351">can use many technical numbers as a foundation
    for our KPIs.</st> <st c="91412">Those are easy to access and correlate.</st>
    <st c="91452">On the other hand, the interpretation of the numbers is up to you.</st>
    <st c="91519">The reduction of service requests can be because you have fantastic
    documentation, but also because no one uses the platform.</st> <st c="91645">As
    shown before, that’s why it needs to provide a full picture.</st> <st c="91709">It
    might become complicated because every new KPI might add more details to the data.</st>
    <st c="91795">At some point, you will need to</st> <st c="91827">cut this.</st>
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: <st c="91836">For developers and DevOps teams, there are already a couple of
    frameworks that we can use as</st> <st c="91930">a foundat</st><st c="91939">ion.</st>
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: <st c="91944">DORA metrics</st>
  id: totrans-408
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**<st c="91957">DevOps Research and Assessment</st>** <st c="91988">(</st>**<st
    c="91990">DORA</st>**<st c="91994">) is a start-up created by Gene Kim and Jez
    Humble, whom</st> <st c="92051">you might know from</st> *<st c="92072">The DevOps
    Handbook</st>*<st c="92091">. The DORA metrics are a set of four KPIs that can
    be used to measure the performance of a DevOps team and the impact of a platform</st>
    <st c="92223">on its users.</st> <st c="92237">Although they do not always fit
    well, they are widely adopted and used, for example, by systems such as</st> <st
    c="92341">GitLab</st> *<st c="92348">[13]</st>*<st c="92352">.</st>'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: <st c="92353">The DORA metrics are</st> <st c="92375">as follows:</st>
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="92386">Deployment frequency</st>**<st c="92407">: How often an organization
    successfully releases</st> <st c="92458">to production</st>'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="92471">Lead time for changes</st>**<st c="92493">: The amount of time
    it takes a commitment to get</st> <st c="92544">into production</st>'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="92559">Time to restore services</st>**<st c="92584">: The percentage
    of deployments causing a failure</st> <st c="92635">in production</st>'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="92648">Change failure rate</st>**<st c="92668">: How long it takes
    an organization to recover from a failure</st> <st c="92731">in production</st>'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="92744">I often saw that organizations change the term from</st> *<st
    c="92797">production</st>* <st c="92807">to</st> *<st c="92811">release</st>*
    <st c="92818">or</st> *<st c="92822">productive release</st>*<st c="92840">. That’s
    because most companies have multiple stages a release goes through before it goes
    live in front of an end user.</st> <st c="92961">Due to every organization’s specifics,
    there are multiple solutions to measure those numbers, but in the end, it’s common
    to implement your own approach</st> <st c="93114">for it.</st>
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: <st c="93121">To measure the number of releases, you can run a simple API call
    against your favorite source code versioning system that supports you with your
    releases.</st> <st c="93277">These numbers can be dumped into a database and be
    visualized by a</st> <st c="93344">Grafana dashboard.</st>
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: <st c="93362">It is more complicated to identify the lead time.</st> <st c="93413">For
    this, you have to track commits and when they end up in a release.</st> <st c="93484">However,
    both metrics are simple to get and calculate.</st> <st c="93539">The change failure
    rate, on the other hand, becomes more problematic.</st> <st c="93609">For this,
    it is required that you include information about your releases throughout the
    whole deployment and production chain so that if a failure occurs, you can identify
    in the logs to which release this issue belongs.</st> <st c="93831">In addition,
    you then also have to qualify if it is really an issue caused by the release</st>
    <st c="93921">or not.</st>
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: <st c="93928">The time to</st> <st c="93941">restore service follows the same
    procedure.</st> <st c="93985">You need to identify when an incident occurs when
    it was closed successfully, and when it was resolved by a restore.</st> <st c="94102">Your
    incident management system can provide both of</st> <st c="94154">those metrics.</st>
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: <st c="94168">Now, what’s so</st> <st c="94184">special about the DORA metrics
    is that they have researched thousands of companies to give an overview of how
    good or bad you are compared to others.</st> <st c="94334">From their last report
    in 2023, we can find the following categories and share of companies falling into
    those</st> <st c="94445">categories</st> *<st c="94456">[14]</st>*<st c="94460">.</st>
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **<st c="94461">Elite</st>** | **<st c="94467">High</st>** | **<st c="94472">Medium</st>**
    | **<st c="94479">Low</st>** |'
  id: totrans-420
  prefs: []
  type: TYPE_TB
- en: '| **<st c="94483">Deployment</st>** **<st c="94495">frequency</st>** | <st
    c="94504">On-demand</st> | <st c="94514">Between once a day and once</st> <st
    c="94543">a week</st> | <st c="94549">Between once a week and once</st> <st c="94579">per
    month</st> | <st c="94588">Between once per week and once</st> <st c="94620">per
    month</st> |'
  id: totrans-421
  prefs: []
  type: TYPE_TB
- en: '| **<st c="94629">Change</st>** **<st c="94637">lead time</st>** | <st c="94646">Less
    than</st> <st c="94657">one day</st> | <st c="94664">Between one day and</st>
    <st c="94685">one week</st> | <st c="94693">Between one week and</st> <st c="94715">one
    month</st> | <st c="94724">Between one week and</st> <st c="94746">one month</st>
    |'
  id: totrans-422
  prefs: []
  type: TYPE_TB
- en: '| **<st c="94755">Change</st>** **<st c="94763">failure rate</st>** | <st c="94775">5%</st>
    | <st c="94778">10%</st> | <st c="94782">15%</st> | <st c="94786">64%</st> |'
  id: totrans-423
  prefs: []
  type: TYPE_TB
- en: '| **<st c="94790">Failed deployment</st>** **<st c="94809">recovery time</st>**
    | <st c="94822">Less than</st> <st c="94833">one hour</st> | <st c="94841">Less
    than</st> <st c="94852">one day</st> | <st c="94859">Between one day and</st>
    <st c="94880">one week</st> | <st c="94888">Between one month and</st> <st c="94911">six
    months</st> |'
  id: totrans-424
  prefs: []
  type: TYPE_TB
- en: '| **<st c="94921">%</st>** **<st c="94924">of respondents</st>** | <st c="94938">18%</st>
    | <st c="94942">31%</st> | <st c="94946">33%</st> | <st c="94950">17%</st> |'
  id: totrans-425
  prefs: []
  type: TYPE_TB
- en: '<st c="94954">Table 2.3: DORA metrics for different maturity levels</st>'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: <st c="95008">What is</st> <st c="95017">good</st> <st c="95021">about the DORA
    metrics is that most companies will be able to gather such numbers.</st> <st c="95105">On
    the other hand, we as platform engineers are missing some aspects around direct
    and</st> <st c="95192">personal feedback.</st>
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: <st c="95210">The following figure is an end-user Grafana dashboard that shows
    real-time data.</st> <st c="95292">In the top-left corner, you can see the number
    of deployed apps to production is 105 and the total deployments is 1.847\.</st>
    <st c="95413">In the top-right corner, it shows the lead time for a change in
    hours, 612.5, the change failure rate of 0.522%, the deployment frequency of 5.02,
    and the MTTR of 199\.</st> <st c="95581">The graphs at the bottom show the deployments</st>
    <st c="95627">per application.</st>
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.16: Real example of a DORA \uFEFFdashboard (The image is intended\
    \ as a visual reference; the textual information isn't essential.)](img/B31164_02_16.jpg)"
  id: totrans-429
  prefs: []
  type: TYPE_IMG
- en: '<st c="95645">Figure 2.16: Real example of a DORA dashboard (The image is intended
    as a visual reference; the textual information isn''t essential.)</st>'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: <st c="95778">How can you get started with DORA?</st> <st c="95814">One way</st>
    <st c="95822">is to leverage</st> **<st c="95837">Keptn</st>**<st c="95842">,
    a CNCF Incubation project, which provides automated observability into application-aware
    deployments on Kubernetes.</st> <st c="95960">Keptn can be enabled on a namespace
    level via annotation and will create Prometheus metrics as well as OpenTelemetry
    traces to make deployments observable.</st> <st c="96116">Those metrics include
    the duration for deployments and deployment</st> <st c="96182">success and failure
    and provide dimensions for deployment, application, environment, and version.</st>
    <st c="96280">Out of the box, this</st> <st c="96301">gives you some of the core
    DORA metrics that you can put on your dashboard, as shown in the</st> <st c="96393">following
    figure:</st>
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.17: Keptn provides automated deployment observability to report
    some of the DORA metrics](img/B31164_02_17.jpg)'
  id: totrans-432
  prefs: []
  type: TYPE_IMG
- en: '<st c="96597">Figure 2.17: Keptn provides automated deployment observability
    to report some of the DORA metrics</st>'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: <st c="96694">Keptn provides additional capabilities, such as SLO-based deployment
    success validation, and also traces deployments across multiple stages to identify
    additional metrics, such as, “</st>*<st c="96877">Where do deployments stall in
    the</st>* *<st c="96912">promotion process?</st>*<st c="96930">”</st>
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: <st c="96932">To learn more, check out the Keptn website and DORA</st> <st c="96984">tutorials</st>
    *<st c="96994">[15</st><st c="96997">]</st>*<st c="96999">.</st>
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: <st c="97000">SPACE framework</st>
  id: totrans-436
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="97016">The</st> **<st c="97021">SPACE framework</st>** <st c="97036">combines</st>
    <st c="97046">five dimensions</st> <st c="97062">that assess a developer’s team
    productivity.</st> <st c="97107">GitHub, Microsoft, and the University of Victoria
    developed this approach.</st> <st c="97182">It focuses on the way teams work together
    and their outcomes.</st> <st c="97244">Looking at the five dimensions</st> <st
    c="97274">will make</st> <st c="97285">this clear:</st>
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="97296">Satisfaction and well-being</st>**<st c="97324">: Collect information
    about overall fulfillment, happiness, and work-related</st> <st c="97402">mental
    health.</st>'
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="97416">Performance</st>**<st c="97428">: Output-oriented metrics,
    such as tasks completed or</st> <st c="97483">releases published</st>'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="97501">Activity</st>**<st c="97510">: Focusing on activities such
    as the number of commits, merge requests, or</st> <st c="97586">code reviews</st>'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="97598">Communication and collaboration</st>**<st c="97630">: We will
    examine the teams’ communication behavior and alignment, as well as usage review
    and</st> <st c="97726">commenting mechanisms</st>'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="97747">Efficiency and flow</st>**<st c="97767">: How smooth the development
    and deployment</st> <st c="97812">process go</st>'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="97822">You might</st> <st c="97833">get the feeling that you could use
    some or all of the DORA metrics to answer performance, efficiency, and maybe activity,
    and you are right.</st> <st c="97974">But there are more approaches you</st> <st
    c="98008">can take.</st>
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: <st c="98017">For satisfaction and well-being, we</st> <st c="98053">can use
    methods</st> <st c="98070">such as the</st> **<st c="98082">employee satisfaction
    score</st>** <st c="98109">(</st>**<st c="98111">ESS</st>**<st c="98114">), the</st>
    **<st c="98122">employee net promoter score</st>** <st c="98149">(</st>**<st c="98151">eNPS</st>**<st
    c="98155">), or the</st> **<st c="98166">employee engagement index</st>** <st
    c="98191">(</st>**<st c="98193">EEI</st>**<st c="98196">).</st> <st c="98200">For</st>
    <st c="98203">the beginning, you can start with a</st> <st c="98240">simple survey.</st>
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: <st c="98254">Ideas for performance metrics are lead time, time from incident
    to recovery, number of releases, and test code coverage.</st> <st c="98376">To
    be pragmatic, use the DORA metrics for</st> <st c="98418">the beginning.</st>
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: <st c="98432">To measure activity, you can take</st> <st c="98467">the following:</st>
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: <st c="98481">Deployment frequency</st>
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="98502">Lines</st> <st c="98509">of code</st>
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="98516">Commits</st>
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="98524">Number of</st> <st c="98535">pull requests</st>
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="98548">Number</st> <st c="98556">of reviews</st>
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="98566">Issues/tasks completed</st>
  id: totrans-452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="98589">Story</st> <st c="98596">points solved</st>
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="98609">Those numbers are not always comfortable to gather.</st> <st c="98662">In
    some countries, it would be explicitly forbidden to evaluate someone’s performance
    and it is only allowed for a certain number of people.</st> <st c="98803">This
    also puts SPACE frequently into criticism.</st> <st c="98851">Therefore, if you
    would like to use SPACE, and we have to admit that the metrics are helpful to
    gather insights into the development cycle, our key customer, you should talk
    to your data protection team, who are responsible for setting this</st> <st c="99092">up
    right.</st>
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: <st c="99101">Similar issues</st> <st c="99117">occur with the communication
    and collaboration dimension.</st> <st c="99175">If you don’t want to look into
    the user statistics of your communication tool, merge requests, merge times, or
    the number of comments at commits, merge requests, or issue tickets, are a good
    beginning.</st> <st c="99377">You can also evaluate the quality of meetings by
    asking</st> <st c="99433">for feedback.</st>
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: <st c="99446">The last dimension of efficiency and flow can be based again on
    DORA metrics.</st> <st c="99525">In addition, it is helpful to evaluate how many
    hand-offs you have in a development cycle, how many focus hours a developer really
    has, and what their</st> <st c="99676">velocities are.</st>
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: <st c="99691">The SPACE framework</st> <st c="99711">can be used at individual,
    team, and organization levels.</st> <st c="99770">The following diagram from Michael
    Kaufmann’s book,</st> *<st c="99822">Accelerate DevOps with GitHub</st>*<st c="99851">,
    gives further examples of</st> <st c="99879">those levels.</st>
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.18: Examples of SPACE metrics by Michael Kaufmann [16]](img/B31164_02_18.jpg)'
  id: totrans-458
  prefs: []
  type: TYPE_IMG
- en: '<st c="100648">Figure 2.18: Examples of SPACE metrics by Michael Kaufmann [16]</st>'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: <st c="100711">With the SPACE framework, we</st> <st c="100740">now get deep
    insights into the development, which is helpful for us as platform engineers,
    and it extends the DORA metrics.</st> <st c="100865">We can build those</st> <st
    c="100884">metrics on each other.</st> <st c="100907">This allows the product
    owner, architects, and platform engineers to evaluate if they do the right thing
    in the right way.</st> <st c="101030">However, we are missing input from the</st>
    **<st c="101069">developer experience</st>** <st c="101089">(</st>**<st c="101091">Dev</st><st
    c="101094">Ex</st>**<st c="101097">) experts.</st>
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: <st c="101108">DevEx framework</st>
  id: totrans-461
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="101124">SPACE and</st> <st c="101134">DORA lack the DevEx perspective.</st>
    <st c="101168">Also, while</st> <st c="101180">we are looking into satisfaction
    and flow, it doesn’t give us a full picture of our platform engineering team.</st>
    <st c="101291">This is where the</st> **<st c="101309">DevEx framework</st>**
    <st c="101324">comes into play</st> *<st c="101341">[17]</st>*<st c="101345">.
    It limits the perspective back to just three dimensions.</st> <st c="101404">All
    of them together build the foundation for DevEx and can extend its scope</st>
    <st c="101481">of action.</st>
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.19: The three core dimensions of DevEx](img/B31164_02_19.jpg)'
  id: totrans-463
  prefs: []
  type: TYPE_IMG
- en: '<st c="101512">Figure 2.19: The three core dimensions of DevEx</st>'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: <st c="101559">From a</st> <st c="101567">developer’s perspective, the flow
    state is when they focus 100% on writing code and literally forget about time,
    hunger, and other needs.</st> <st c="101705">The easier a flow state is to achieve
    and maintain, the better</st> <st c="101768">the DevEx.</st>
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: <st c="101778">We talked about cognitive load a lot.</st> <st c="101817">In
    short, a good DevEx includes a very low</st> <st c="101860">cognitive load.</st>
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: <st c="101875">Finally, the feedback loop measures how fast and with which quality
    a developer receives feedback on their action.</st> <st c="101991">The better
    this feedback is, the more continuous and actionable a developer can react with
    minimal friction and loss on</st> <st c="102111">the transaction.</st>
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: <st c="102127">To</st> <st c="102131">measure</st> <st c="102139">those is difficult
    as an answer lies between actual metrics and</st> <st c="102203">subjective feedback:</st>
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="102223">Flow state</st>**<st c="102234">:</st>'
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="102236">Metrics</st>**<st c="102243">: Re-opened commits, number of
    change requests, number of committed per</st> <st c="102316">pull request.</st>'
  id: totrans-470
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="102329">Subjective feedback</st>**<st c="102349">: How often do they
    feel interrupted?</st> <st c="102388">Do they feel continuously stressed or under
    pressure?</st> <st c="102442">How high is their level of</st> <st c="102469">decision
    autonomy?</st>'
  id: totrans-471
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="102487">Cognitive load</st>**<st c="102502">:</st>'
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="102504">Metrics</st>**<st c="102511">: Number of reopened bugs, debugging
    time, number of dependencies for a component, and time to solve</st> <st c="102613">technical
    problems</st>'
  id: totrans-473
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="102631">Subjective feedback</st>**<st c="102651">: The time spent
    coding versus the time spent on other tasks; the technical scope for their component,
    and how often they have to</st> <st c="102782">switch context</st>'
  id: totrans-474
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="102796">Feedback loop</st>**<st c="102810">:</st>'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="102812">Metrics</st>**<st c="102819">: Cycle time, deployment frequency,</st>
    **<st c="102856">mean time to resolution</st>** <st c="102879">(</st>**<st c="102881">MTTR</st>**<st
    c="102885">), number of bugs, and level of</st> <st c="102918">test automation</st>'
  id: totrans-476
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="102933">Subjective feedback</st>**<st c="102953">: Effectiveness of
    code reviews, internal team communication, and quality</st> <st c="103028">of
    feedback</st>'
  id: totrans-477
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="103039">As you can</st> <st c="103050">see in those examples, there is
    a lot of room for interpretation.</st> <st c="103117">When you define your platform’s
    KPIs, you have to ensure that those metrics are clearly described.</st> <st c="103216">You
    have to be especially precise by explaining how you interpret which feedback and
    metrics in</st> <st c="103312">which way.</st>
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: <st c="103322">Important note</st>
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: <st c="103337">Architects must understand those KPIs and their meaning so that
    they can effectively impro</st><st c="103428">ve</st> <st c="103432">the platform.</st>
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: <st c="103445">Using performance metrics</st>
  id: totrans-481
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="103471">With the</st> <st c="103481">previous framework, some performance
    metrics were highlighted, such as the number of issues closed or story points.</st>
    <st c="103597">These metrics work well on a team level but can also lead to</st>
    <st c="103658">many misunderstandings.</st>
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="103681">However, there is a way that’s not abstract and unclear, like
    a story point, and it is a bulletproof approach to talking with users and stakeholders
    about the platform and its efficiency: costs.</st> <st c="103877">I know this
    is not an innovative KPI, yet it is often done incorrectly by many teams and is
    feared by product owners.</st> <st c="103995">What I also don’t mean by it is
    to report the team’s costs, infrastructure, or licenses.</st> <st c="104084">You
    can use the cost metrics as proof of the performance of your platform and t</st><st
    c="104163">he</st> <st c="104167">platform team.</st>'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: <st c="104181">Cost per change</st>
  id: totrans-484
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**<st c="104197">Cost per change</st>** <st c="104213">is an</st> <st c="104220">efficient
    way to highlight a platform’s improvement and power.</st> <st c="104283">Within
    the end-user community of the cloud-native ecosystem, we see examples of this
    KPI used to discuss how well a platform</st> <st c="104408">is running.</st>'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: <st c="104419">Let’s compare two different values for the cost</st> <st c="104468">per
    change:</st>
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="104479">$500 per change</st>**<st c="104495">: $15,000 per month or
    $180,000 per year by 30</st> <st c="104543">changes monthly</st>'
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="104558">$80 per change</st>**<st c="104573">: $2,400 per month or
    $28,800 per year by 30</st> <st c="104619">changes monthly</st>'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="104634">Now, obviously, there is a drastic difference between both numbers.</st>
    <st c="104703">But you should consider that you will always start with higher
    costs and very few changes.</st> <st c="104794">Ideally, the platform team and
    the platform become better over time to stabilize overall costs, but the number
    of changes increases.</st> <st c="104927">This leads to lower costs per change.</st>
    <st c="104965">The following chart represents this in order to visualize it better.</st>
    <st c="105034">The dotted line shows an example of the overall costs.</st> <st
    c="105089">They increase slightly over time as the platform becomes more effective.</st>
    <st c="105162">The dark line shows the changes per year, and the dashed line is
    the cost per change.</st> <st c="105248">As you can see, the cost per change drops
    drastically the more changes you are able to make.</st> <st c="105341">It is a
    very basic number, but a strong communication tool for your platform and its platform</st>
    <st c="105435">engineering team.</st>
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.20: Total costs\uFEFF per year example](img/B31164_02_20.jpg)"
  id: totrans-490
  prefs: []
  type: TYPE_IMG
- en: '<st c="105610">Figure 2.20: Total costs</st> <st c="105634">per year example</st>'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: <st c="105651">Costs per project/product</st>
  id: totrans-492
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="105677">Related</st> <st c="105685">to cost per change is cost per project,
    product, or application.</st> <st c="105751">We can look at these costs from two</st>
    <st c="105787">different directions:</st>
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="105808">Total shared costs</st>**<st c="105827">: Looking only at
    aspects such as team costs, additional efforts, or costs that are</st> <st c="105912">not
    causation-based</st>'
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="105931">Balanced causation-based costs</st>**<st c="105962">: The
    causation-based costs include, besides the shared costs, the real costs of infrastructure
    and services consumed by</st> <st c="106084">a project</st>'
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="106093">To highlight the performance of the platform and the team, I
    would recommend going with the total shared costs.</st> <st c="106206">Such numbers
    are simple to get and split between the projects so that you can track them on
    a monthly basis without too much effort.</st> <st c="106339">An alternative to
    that is the</st> *<st c="106369">introduction costs per project</st>*<st c="106399">.
    For this metric, you need to calculate the effort that goes into the onboarding
    for each project using the platform.</st> <st c="106518">However, I personally
    wouldn’t spend the effort on these metrics.</st> <st c="106584">They are more
    rhetorical numbers and don’t provide insights into your platform performance,
    but more about how efficient you are</st> <st c="106713">in</st> <st c="106716">the
    onboarding.</st>
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: <st c="106731">User/product overhead costs</st>
  id: totrans-497
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="106759">The</st> <st c="106764">overhead costs perspective is very similar
    to the cost per change.</st> <st c="106831">Here, you sum up all direct and shared
    costs and reduce them by only the consumed resources.</st> <st c="106924">So,
    it is important to differentiate between tools such as agents, network traffic,
    and maybe personal user-related costs from the actual resources used by the product.</st>
    <st c="107093">Calculating this is complicated, but the result is a performance
    metric of your platform’s and platform team’s</st> <st c="107204">overhead costs.</st>
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: <st c="107219">It’s a metric that splits the minds.</st> <st c="107257">On the
    one hand, it should be as small as possible to be able to sell the platform internally.</st>
    <st c="107352">On the other hand, that number represents the costs of the actual
    value of the platform.</st> <st c="107441">So, I believe we would need to hide
    the middle ground that is not too costly but als</st><st c="107525">o not</st>
    <st c="107532">too expensive.</st>
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: <st c="107546">Summary</st>
  id: totrans-500
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="107554">This chapter taught you about the defining platform principles
    and how to develop your platform team purpose.</st> <st c="107665">You now have
    the tools in your hands to document and design a platform architecture, followed
    by end-user examples for different platforms.</st> <st c="107805">This chapter
    gave you additional perspectives on the capabilities of platforms.</st> <st c="107885">With
    the approach of the TVP, you learned how to focus on single milestones without
    overarching and to adapt faster to the demands.</st> <st c="108017">Finally, we
    introduced you to a couple of approaches to measure your platform adoption and</st>
    <st c="108108">performance metrics.</st>
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: <st c="108128">In</st> [*<st c="108132">Chapter 3</st>*](B31164_03.xhtml#_idTextAnchor133)<st
    c="108141">, we will discuss the details of building the foundation for platforms.</st>
    <st c="108213">First, we will introduce you to our reference and example company
    and explain certain details.</st> <st c="108308">You will learn about infrastructure
    foundations, multi-cloud and</st> **<st c="108373">Software as a Service</st>**
    <st c="108394">(</st>**<st c="108396">SaaS</st>**<st c="108400">) challenges,
    and creating a reference architecture</st> <st c="108452">for</st> <st c="108457">the
    foundation.</st>
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: <st c="108472">Further readings</st>
  id: totrans-503
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '<st c="108489">[1]</st> *<st c="108494">Cost of Delay: the Economic Impact
    of a Delay in Project</st>* *<st c="108551">Delivery</st>*<st c="108559">:</st>
    [<st c="108562">https://businessmap.io/lean-management/value-waste/cost-of-delay</st>](https://businessmap.io/lean-management/value-waste/cost-of-delay
    )'
  id: totrans-504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="108626">[2]</st> *<st c="108631">Evan Bottcher, What I Talk About When
    I Talk About Platforms</st>*<st c="108691">:</st> [<st c="108694">https://martinfowler.com/articles/talk-about-platforms.html</st>](https://martinfowler.com/articles/talk-about-platforms.html
    )
  id: totrans-505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="108753">[3]</st> *<st c="108758">Miro Template, The Platform Engineering
    Purpose</st>* *<st c="108806">Canvas</st>*<st c="108812">:</st> [<st c="108815">https://miro.com/miroverse/platform-engineering-purpose-canvas-template</st>](https://miro.com/miroverse/platform-engineering-purpose-canvas-template
    )
  id: totrans-506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="108886">[4]</st> **<st c="108891">Team</st>** **<st c="108896">Topologies</st>**<st
    c="108906">:</st> [<st c="108909">https://teamtopologies.com/</st>](https://teamtopologies.com/
    )
  id: totrans-507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '<st c="108936">[5]</st> *<st c="108941">PlatformCon2023, Platform as Code:
    Simplifying developer platform design with reference</st>* *<st c="109029">architectures</st>*<st
    c="109042">:</st> [<st c="109045">https://youtu.be/AimSwK8Mw-U?si=1CDAJb1gLtlCgeyH</st>](https://youtu.be/AimSwK8Mw-U?si=1CDAJb1gLtlCgeyH
    )'
  id: totrans-508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="109093">[6]</st> **<st c="109098">PlatformEngineering.ORG</st>** **<st
    c="109122">toolings</st>**<st c="109130">:</st> [<st c="109133">https://platformengineering.org/platform-tooling</st>](https://platformengineering.org/platform-tooling
    )
  id: totrans-509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="109181">[7]</st> **<st c="109186">CNCF</st>** **<st c="109191">landscape</st>**<st
    c="109200">:</st> [<st c="109203">https://landscape.cncf.io/</st>](https://landscape.cncf.io/
    )
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="109229">[8]</st> **<st c="109234">Wasm</st>** **<st c="109239">examples
    sources</st>**<st c="109255">:</st>
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="109257">General</st>** **<st c="109265">page</st>**<st c="109269">:</st>
    [<st c="109272">https://webassembly.org/</st>](https://webassembly.org/ )'
  id: totrans-512
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="109296">A simple Kubernetes operator to run Wasm –</st>** **<st c="109340">kwasm</st>**<st
    c="109345">:</st> [<st c="109348">https://kwasm.sh/</st>](https://kwasm.sh/ )'
  id: totrans-513
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="109365">An enterprise-grade operator and development toolkit for</st>**
    **<st c="109423">Wasm</st>**<st c="109427">:</st> [<st c="109430">https://www.spinkube.dev/</st>](https://www.spinkube.dev/)'
  id: totrans-514
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="109455">[9]</st> **<st c="109460">ThoughtWorks platform tech strategy</st>**
    **<st c="109496">layers</st>**<st c="109502">:</st> [<st c="109505">https://www.thoughtworks.com/insights/blog/platform-tech-strategy-three-layers</st>](https://www.thoughtworks.com/insights/blog/platform-tech-strategy-three-layers
    )
  id: totrans-515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="109583">[10]</st> **<st c="109589">The Lean</st>** **<st c="109598">Startup</st>**<st
    c="109605">:</st> [<st c="109608">https://theleanstartup.com</st>](https://theleanstartup.com
    )
  id: totrans-516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="109634">[11]</st> *<st c="109640">ICE Scoring</st>* *<st c="109652">Model</st>*<st
    c="109657">:</st> [<st c="109660">https://www.productplan.com/glossary/ice-scoring-model/</st>](https://www.productplan.com/glossary/ice-scoring-model/
    )
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="109715">[12]</st> **<st c="109721">Startup lessons Google</st>** **<st
    c="109744">Maps</st>**<st c="109748">:</st> [<st c="109751">https://www.startuplessonslearned.com/2010/09/good-enough-never-is-or-is-it.html</st>](https://www.startuplessonslearned.com/2010/09/good-enough-never-is-or-is-it.html
    )
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="109831">[13]</st> **<st c="109837">GitLab DORA</st>** **<st c="109849">metrics</st>**<st
    c="109856">:</st> [<st c="109859">https://docs.gitlab.com/ee/user/analytics/dora_metrics.html</st>](https://docs.gitlab.com/ee/user/analytics/dora_metrics.html
    )
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="109918">[14]</st> **<st c="109924">DORA report</st>** **<st c="109936">2023</st>**<st
    c="109940">:</st> [<st c="109943">https://cloud.google.com/devops/state-of-devops</st>](https://cloud.google.com/devops/state-of-devops
    )
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="109990">[15]</st> **<st c="109996">DORA</st>** **<st c="110001">tutorial</st>**<st
    c="110009">:</st> [<st c="110012">https://keptn.sh/stable/docs/guides/dora/</st>](https://keptn.sh/stable/docs/guides/dora/
    )
  id: totrans-521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="110053">[16]</st> *<st c="110059">Michael Kaufmann, Accelerate DevOps
    with</st>* *<st c="110100">GitHub</st>*<st c="110106">:</st> [<st c="110109">https://www.packtpub.com/product/accelerate-devops-with-github</st>](https://www.packtpub.com/product/accelerate-devops-with-github
    )
  id: totrans-522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="110171">[17]</st> **<st c="110177">DevEx</st>** **<st c="110183">framework</st>**<st
    c="110192">:</st> [<st c="110195">https://queue.acm.org/detail.cfm?id=3595878</st>](https://queue.acm.org/detail.cfm?id=3595878)
  id: totrans-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
