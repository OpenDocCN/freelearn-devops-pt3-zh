- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mobile DevOps Fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is no doubt that Mobile DevOps is quickly becoming a key part of the mobile
    development process, enabling teams and organizations to quickly develop and release
    mobile applications. We will discuss the fundamentals of Mobile DevOps and how
    it can help your team to reach your mobile development goals through the use of
    this process.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Mobile continuous integration/continuous delivery (CI/CD) fundamentals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing between self-hosted and cloud-based continuous integration/continuous
    delivery (CI/CD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do we need a Mobile DevOps engineer?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sounds interesting! Let’s begin our journey toward Mobile DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of Mobile DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Businesses are increasingly relying on mobile applications today. DevOps is
    an essential part of the mobile development process because it manages the development
    and release of mobile applications. To streamline the development process and
    improve the quality of mobile apps, CI, **continuous testing** (**CT**), CD, and
    continuous deployment techniques are used.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is an approach to developing mobile applications that *emphasizes collaboration*
    between development, quality, product, and operations teams to ensure mobile applications
    are delivered *quickly, frequently, and reliably*, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Mobile DevOps](img/Figure_3.1_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Mobile DevOps
  prefs: []
  type: TYPE_NORMAL
- en: With Mobile DevOps, teams can *collaborate more effectively and efficiently*
    as they *develop and release mobile applications faster* and with fewer errors
    (as much as possible) since they can work together more. This helps *reduce the
    time required to develop a mobile app*, while also ensuring that the app *complies
    with quality, security, and performance* standards at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 1*](B18113_01.xhtml#_idTextAnchor014), *Resolving Challenges in
    Mobile DevOps*, we discussed how traditional mobile app development was often
    *slow, error-prone, and siloed*. It was common for developers to work in isolation,
    handing off their work to the quality team for testing, and then passing it on
    to operations teams for deployment and release. The process was often slow, resulting
    in *critical issues, delays, poor user experiences,* *and dissatisfaction*.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, Mobile DevOps is shifting the way mobile apps are developed and
    maintained. It involves the use of DevOps principles and practices to improve
    the speed, security, and quality of mobile app development.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many advantages of Mobile DevOps can be summarized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Faster development cycles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved collaboration between different teams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Better QA practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Efficient deployment process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick response to customer feedback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cost savings through automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduced deployment time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring applications are secure and compliant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Mobile DevOps process has proven invaluable to organizations seeking to
    maximize their mobile development efforts.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s deep-dive and learn more about Mobile DevOps fundamentals.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile CI/CD fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are familiar with the fundamentals of DevOps for web apps, backend services,
    or other types of apps, you already know the concepts of **CI/CD**. In mobile,
    it’s the same but with specific tasks that are required to build, test, and release
    the mobile apps.
  prefs: []
  type: TYPE_NORMAL
- en: But before jumping to the CI/CD part, I’d like to give you an idea about the
    preparation stage, which is the planning stage or phase.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous planning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a team, we should agree together about the process that we will use to implement
    Mobile DevOps and CI/CD. The **continuous planning stage** involves gathering
    requirements from stakeholders, creating a project plan, and determining the necessary
    resources. This is an important step in ensuring that the app meets the needs
    of the users and aligns with the overall business objectives.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we need to clearly define what you want to achieve with your mobile CI/CD
    strategy. This may include improving the speed and quality of your releases, increasing
    collaboration between team members, or reducing the risk of errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the frameworks that can be used to improve DevOps practices is **CALMS**
    ([https://www.atlassian.com/devops/frameworks/calms-framework](https://www.atlassian.com/devops/frameworks/calms-framework)),
    as shown in *Figure 3**.2*. It can be applied to Mobile DevOps as well, to optimize
    the process of developing, testing, and releasing mobile apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – CALMS framework](img/Figure_3.2_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – CALMS framework
  prefs: []
  type: TYPE_NORMAL
- en: 'CALMS can be used to achieve the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Teams can identify and resolve issues more quickly and deliver higher-quality
    apps by working together and sharing knowledge and resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaboration and communication can boost team morale and productivity, resulting
    in greater efficiency and productivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Team members can avoid misunderstandings and errors by keeping everyone informed
    about project goals and progress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication and collaboration between team members can facilitate faster decision-making,
    resulting in more efficient project progress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are five main components of CALMS, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Culture**: Essentially, this refers to the values and beliefs of the team,
    as well as the overall work environment and dynamics of the team. Every team needs
    a positive culture to succeed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automation**: Automating workflows reduces the need for manual intervention
    and minimizes the chance of error by using tools and processes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lean**: Throughout the development process, the lean approach seeks to maximize
    value and minimize waste. As part of this process, unnecessary steps are identified
    and eliminated, workflows are streamlined, and processes are continuously improved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Measurement**: Identifying areas for improvement requires collecting and
    analyzing data. The metrics can include lead and cycle times, as well as defect
    rates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sharing**: Collaboration and efficiency are improved when knowledge and resources
    are shared within and across departments. Regular team meetings, pair programming,
    and code reviews can all contribute to this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we’ve determined what your mobile CI/CD strategy should achieve, let’s
    learn more about the CI/CD process.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps culture is a critical component of building a capable engineering team
    for organizations. It contributes greatly to signaling a company’s quality to
    in-demand engineers with a wide range of job options.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Continuous integration** (**CI**) makes incremental code changes regularly
    and reliably. CI enables *automated build and test procedures* to make code updates
    reliable before they are *merged* into the repository or specially merged to the
    main or the master branch, and we must always do that to keep the main or master
    branch green at all times without conflicts or errors because it’s the main source
    for our business. If we need to release a new version, this is the baseline, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – The CI process](img/Figure_3.3_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – The CI process
  prefs: []
  type: TYPE_NORMAL
- en: 'The process of CI for mobile apps mainly comprises the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloning the source code from the repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the app binaries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running different test types such as unit tests, integration tests, UI tests,
    and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and deploying the artifacts (`.aab` or `.ipa`) based on the app type
    that can be later used in the distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The practice of **continuous testing** (**CT**) involves testing software as
    part of the development process instead of waiting until the end of the cycle
    to test it. A high-quality app is especially important for mobile apps, which
    are often used by many users and use a large amount of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Mobile apps can be continuously tested in different ways, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Decide on a clear mobile testing strategy before you begin testing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throughout the development process, ensure that tests are applied in the initial
    phase and progressively.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Follow an automated testing process that involves the use of different testing
    tools to execute tests such as unit, integration, UI, and so on on the app without
    the need for human intervention. This is especially useful for running a large
    number of tests in a consistent and timely manner.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tests can be run on a wide variety of devices and operating systems using cloud-based
    testing without having to own or maintain the devices. By testing your app across
    a variety of devices, you can ensure that it works properly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure you test the UI on a real mobile device, not just on an emulator or
    simulator.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform sufficient performance, stress, and security testing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conduct tests to assess app interoperability, battery consumption, and **fault**
    **tolerance** (**FT**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [*Chapter 5*](B18113_05.xhtml#_idTextAnchor138), *Implementing a Robust Mobile
    App Testing Strategy*, we will deep-dive into mobile testing strategies, tools,
    and frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous Delivery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once this process is finished without errors, the code can be quickly and easily
    deployed through the **Continuous Delivery** (**CD**) process; otherwise, if there
    is any error, the process will be stopped and the error reported back to the developer
    to fix it, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – The CI/CD process](img/Figure_3.4_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – The CI/CD process
  prefs: []
  type: TYPE_NORMAL
- en: Once the code commits or changes have been merged into the central branch (main,
    master, and so on), CD automatically delivers the builds that pass the CI checks
    to production environments (such as staging), where they will be tested and reviewed
    before being released into production.
  prefs: []
  type: TYPE_NORMAL
- en: '*The goal is to automate development and deployment processes to ensure the
    rapid, reliable, and budget-friendly delivery of* *mobile apps.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The process of CI/CD for mobile apps mainly comprises the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Release the build to the QA teams to do additional checks and tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Release the build to the Beta testers if the company or the team is already
    participating in the program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If everything is good, after that, the release manager or anyone responsible
    for the release process can approve the build and release it to the app stores
    or the production environments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous deployment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Continuous deployment is often part of the CI/CD pipeline, which means that
    the code that is deployed to the repository will automatically be deployed to
    production or, in our cases for the mobile apps, to the App Store. CI/CD pipelines
    are often referred to as the combination of these practices, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – The CI/continuous deployment process](img/Figure_3.5_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – The CI/continuous deployment process
  prefs: []
  type: TYPE_NORMAL
- en: The continuous deployment process automates the deployment of your app build,
    preventing human intervention. The only thing that will prevent a new change from
    being deployed into production is a failed build or test. This is used to speed
    up the app production and to get customer feedback faster.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous monitoring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After we release the mobile apps to production, this is not the end of the CI/CD
    life cycle, but we have another stage. **Continuous monitoring** (**CM**) involves
    monitoring the app’s performance and gathering data on user behavior, as shown
    in *Figure 3**.6*.
  prefs: []
  type: TYPE_NORMAL
- en: 'This helps organizations improve the user experience, identify potential issues,
    and optimize the performance of their mobile applications. The data collected
    can include information on device performance, network conditions, app crashes,
    user behavior, and more. The analysis of this data is typically done using advanced
    analytics tools and techniques to provide insights into the mobile app performance
    and user experience. In [*Chapter 7*](B18113_07.xhtml#_idTextAnchor265), *Establishing
    Mobile App Monitoring, Observability, and Analytics*, we will deep-dive into monitoring
    and analytics tools for mobile apps and learn more about how to use them effectively
    with mobile CI/CD and DevOps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – The full process of CI/CD](img/Figure_3.6_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – The full process of CI/CD
  prefs: []
  type: TYPE_NORMAL
- en: Effective and specific mobile CI/CD platforms consist of a progression of different
    Mobile DevOps tools used to address a particular business challenge. By connecting
    the mobile developers, quality engineers, and customers, they ensure a profitable
    cycle.
  prefs: []
  type: TYPE_NORMAL
- en: It is not easy to build Mobile DevOps processes, as we discovered. Automating
    processes requires continuous experimentation and refinement.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, I highly recommend *starting small and building the Mobile DevOps
    toolchain and CI/CD pipelines incrementally* once you decide to embark on the
    Mobile DevOps journey.
  prefs: []
  type: TYPE_NORMAL
- en: Based on my previous experience, I believe if you try to implement all the processes
    and steps at once, you will fail and be frustrated. Instead, take it slowly and
    build it step by step; success is the sum of small efforts.
  prefs: []
  type: TYPE_NORMAL
- en: 'In my opinion, as shown in *Figure 3**.7*, there are three phases to the Mobile
    DevOps journey:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The beginning phase/the CI phase**: Implement only the minimal CI pipeline
    by cloning the source code, running the static analysis code or lint, and running
    unit tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keeping the promise phase—mobile CI/CD partial pipeline**: Continuously improve
    the pipeline from the first phase by adding a few other steps, such as running
    UI tests on cloud devices, generating UI test reports, and running security or
    performance tests depending on the requirements. This stage can also contain releasing
    the app to the QA teams or the stakeholders and sending notifications to different
    teams about the statuses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The sustain phase—fully automated mobile CI/CD pipeline**: Add more steps
    toward the fully mobile CI/CD, such as steps to release the apps to the beta testers
    and the app stores as well as enhance the UI testing to reduce the build time
    by running them in parallel, or add other steps to improve the quality of the
    CI/CD pipeline:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Mobile DevOps implementation phases](img/Figure_3.7_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – Mobile DevOps implementation phases
  prefs: []
  type: TYPE_NORMAL
- en: Using this approach will always help the team to improve the Mobile DevOps process
    and enhance the performance of the release process. These duties can be the responsibilities
    of the platform engineering team, the internal developer productivity team, or
    the mobile engineering team, depending on the team topologies inside the organization.
    In [*Chapter 4*](B18113_04.xhtml#_idTextAnchor118), *Achieving Continuous Integration
    and Delivery with Mobile DevOps*, we will get started with the implementation
    phase of mobile CI/CD pipelines with different platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Now we’ve discussed the fundamentals of Mobile DevOps and explained each stage
    of the process, let’s explore together the benefits of Mobile DevOps and CI/CD
    for mobile app development.
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of CI/CD for mobile app development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Having mobile CI/CD has more positive effects than only making an existing
    process a little more efficient for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: It allows developers to focus on writing code and monitoring mobile apps in
    production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A faster deployment time and faster delivery to markets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All versions of the mobile apps are accessible to QA and product stakeholders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The test results, code change logs, and release logs are always available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhanced communication and productivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved employee engagement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customers are more satisfied
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine which tools and technologies will be used in your mobile CI/CD pipeline.
    A version control system, build automation tool, testing framework, or deployment
    platform may be included in this list.
  prefs: []
  type: TYPE_NORMAL
- en: The tools and infrastructure of Mobile DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we discussed before, Mobile DevOps is a set of practices, tools, and infrastructure
    aimed at streamlining the development and release of mobile applications. It enables
    continuous integration, testing, delivery, and monitoring, ensuring that developers
    can rapidly iterate, deploy, and maintain high-quality mobile apps. The key components
    of Mobile DevOps infrastructure are set out here:'
  prefs: []
  type: TYPE_NORMAL
- en: A version control management system, such as GitHub, allows teams to track changes
    to their code bases and collaborate on them. In [*Chapter 9*](B18113_09.xhtml#_idTextAnchor342),
    *Mobile DevOps Best Practices*, we will learn more about the different types of
    Git repositories such as monorepos, and how to use them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools that automate the build and test processes, such as Gradle, Gradle Enterprise
    for Android, or Fastlane for iOS, allow developers to focus on writing code instead
    of building and testing. In [*Chapter 4*](B18113_04.xhtml#_idTextAnchor118)*,
    Achieving Continuous Integration and Delivery with Mobile DevOps*, we will learn
    more about the different build tools for mobile apps in practice and also how
    to use caching to speed up the build time with those tools.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Labs for testing apps on a wide range of physical devices**: These labs are
    often hosted in the cloud, allowing teams to test apps on a range of devices.
    In [*Chapter 5*](B18113_05.xhtml#_idTextAnchor138), *Implementing a Robust Mobile
    App Testing Strategy*, we will learn the best practices when using cloud devices
    to accelerate the testing processes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infrastructure for deploying and managing backend services for mobile apps is
    provided by cloud platforms such as **Amazon Web Services** (**AWS**), **Google**
    **Cloud Platform** (**GCP**), or Azure. In [*Chapter 9*](B18113_09.xhtml#_idTextAnchor342),
    *Mobile DevOps Best Practices*, we will learn more about how to use cloud services
    with mobile apps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing tools such as Appium, Espresso, XCUITest, and Detox automate the testing
    of mobile apps across different platforms and devices. In [*Chapter 5*](B18113_05.xhtml#_idTextAnchor138),
    *Implementing a Robust Mobile App Testing Strategy*, we will learn the difference
    between the testing tools and what is a suitable tool or framework for our team.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing the mobile app distribution process, such as automatically managing
    code signing, certificates, provisioning profiles, and key stores is made easier
    using tools such as fastlane and others. In [*Chapter 6*](B18113_06.xhtml#_idTextAnchor210),
    *Mobile App Release Management*, we will learn how to distribute our apps automatically
    to Beta users or the App Store using different tools such as Firebase App Distribution,
    fastlane, TestFlight, and more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In my opinion, mobile CI/CD pipelines are like LEGO toys—you’re always working
    with different tools, configurations, and dependencies. All you need to do is
    decide how you want your pipeline to look.
  prefs: []
  type: TYPE_NORMAL
- en: When you play with LEGO, you can feel like an architect. You can create different
    results by building different shapes and structures.
  prefs: []
  type: TYPE_NORMAL
- en: The idea behind building a mobile CI/CD pipeline for your specific needs and
    requirements is knowing how to use the pieces correctly. There is no set-in-stone
    template required for building a mobile CI/CD pipeline. Instead, you should always
    implement the steps that fit your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Through Mobile DevOps, developers, testers, product managers, and release management
    teams can work together more effectively.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps and CI/CD are based on the philosophy of rapid development, testing,
    and release, which allows technology to be iterated quickly.
  prefs: []
  type: TYPE_NORMAL
- en: It is a philosophy that closely aligns with the needs of companies, from start-ups
    to enterprises. They need to be able to deliver products to market quickly and
    constantly improve their quality in order to gain a competitive edge.
  prefs: []
  type: TYPE_NORMAL
- en: Developing a mobile CI/CD strategy is an essential part of ensuring the successful
    delivery of mobile applications. It involves creating a process that automates
    the development, testing, and deployment of applications, helping to ensure the
    applications are of high quality and are released quickly.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, the team or the organization should choose which Mobile DevOps
    and CI/CD platforms are suitable for the business and **return on investment**
    (**ROI**). Let’s compare the options between self-hosted and cloud-based CI/CD
    to know which option or choice is a suitable fit for our organization.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing between self-hosted and cloud-based CI/CD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With **self-hosted CI/CD**, organizations retain full control over their environment
    and data. As a bonus, this approach can be more cost-effective in the long run
    since organizations can avoid cloud service costs by using existing infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if the team already uses CI/CD platforms for web apps and APIs
    and backend services, it needs to incorporate the mobile part.
  prefs: []
  type: TYPE_NORMAL
- en: This requires educating the DevOps team about the mobile apps requirements to
    be able to add the mobile part to the existing CI/CD platform, such as provisioning
    the required hardware and software as well as implementing the processes and the
    prerequisites that are necessary to support mobile release processes to app stores,
    such as signing apps, uploading certificates, provisioning profiles, and creating
    key stores.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, setting up a self-hosted CI/CD solution can be *time-consuming*
    and may require *specialized expertise*. Additionally, teams will need to take
    on the responsibility of *maintaining and updating their environment and infrastructure*,
    which can be a burden on resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, **cloud-based CI/CD** solutions have several advantages
    over self-hosted solutions, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The process of setting up and maintaining them is generally easier*, and they
    are more scalable. As cloud-based services can be *accessed remotely*, they are
    also more accessible. In addition, they can be more *flexible* since they can
    *easily be integrated with other tools and services*. Cloud-based CI/CD eliminates
    the need for on-site infrastructure by providing off-site hosting. By allowing
    CI/CD to be used immediately, cloud-based CI/CD can *both reduce costs and time*
    spent on setup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CI/CD in the cloud is also scalable, allowing for easy expansion or reduction
    of resources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to its benefits, cloud-based CI/CD also has some drawbacks. The
    lack of control over data can pose a security concern. Furthermore, cloud-based
    services can quickly add up in costs, especially if organizations need to use
    multiple services because it’s required to have monitoring on the cost of machines
    and builds.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s important to note that it also depends on the specific needs and requirements
    of the project, as well as the size and resources of the organization. As shown
    in the following screenshot, self-hosted CI/CD can be time-consuming but it’s
    more customizable; on the other hand, cloud CI/CD can help developers to save
    time by managing required tasks such as updating the infrastructure or stacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Self-hosted versus cloud-hosted (PaaS) CI/CD](img/Figure_3.8_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – Self-hosted versus cloud-hosted (PaaS) CI/CD
  prefs: []
  type: TYPE_NORMAL
- en: A cloud-based CI/CD solution might be the best option for a *small team or start-up*,
    while a larger organization might prefer to have *more control over its environment
    and choose a self-hosted solution*, but it always depends on the team’s expectations
    and needs.
  prefs: []
  type: TYPE_NORMAL
- en: The cloud-based version of CI/CD is often referred to as **CI/CD as a service**.
    CI/CD tools are developed, maintained, and hosted by a dedicated organization
    that offers internet access to customers.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, self-hosted CI/CD means you either build your own CI/CD tool or
    use a third-party CI/CD tool (usually open source) hosted on your infrastructure.
    It can be on-premise servers or IaaS platforms such as AWS, **GCP**, or Microsoft
    Azure.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a summary, this comparison table outlines the main differences between self-hosted
    and cloud-based CI/CD solutions, including factors such as control, cost, scalability,
    and security. The choice between the two depends on the specific needs and requirements
    of the project and organization:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Criteria** | **Self-Hosted CI/CD** | **Cloud-Based CI/CD** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Control | Full control over environment and data | Less control over data
    and environment |'
  prefs: []
  type: TYPE_TB
- en: '| Cost | More cost-effective in the long run; uses existing infrastructure
    | Costs can add up quickly; requires monitoring of machine and build costs |'
  prefs: []
  type: TYPE_TB
- en: '| Setup and maintenance | Time-consuming setup; requires specialized expertise;
    team maintains infrastructure | Easier setup; less maintenance required; hosted
    off-site |'
  prefs: []
  type: TYPE_TB
- en: '| Scalability | Limited by existing infrastructure | Highly scalable; can expand
    or reduce resources easily |'
  prefs: []
  type: TYPE_TB
- en: '| Accessibility | Access limited to an on-premises or internal network | Can
    be accessed remotely; more accessible |'
  prefs: []
  type: TYPE_TB
- en: '| Flexibility and integration | Customizable; may require more manual integration
    with other tools and services | Easier integration with other tools and services;
    more flexible |'
  prefs: []
  type: TYPE_TB
- en: '| Security | Higher control over data security | Potential security concerns
    due to less control over data |'
  prefs: []
  type: TYPE_TB
- en: '| Suitability | Better for larger organizations with resources to manage the
    environment and data | Better for small teams or start-ups that need immediate
    access and lower upfront investment |'
  prefs: []
  type: TYPE_TB
- en: '| Implementation | Build your own CI/CD tool or use a third-party tool hosted
    on your infrastructure | CI/CD as a service provided by a dedicated organization
    with internet access for customers |'
  prefs: []
  type: TYPE_TB
- en: Table 3.1 – Differences between self-hosted and cloud-based CI/CD solutions
  prefs: []
  type: TYPE_NORMAL
- en: Mobile-specific CI/CD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Mobile CI/CD PaaS** refers to the use of a cloud-based platform as a service
    to automate the build, test, and deployment of mobile apps. Mobile CI/CD PaaS
    providers offer a range of tools and services to help organizations streamline
    and optimize their mobile app development and release process. Different platforms
    on the market provide us with this type of service, such as **Bitrise** ([https://www.bitrise.io/](https://www.bitrise.io/)),
    **Codemagic** ([https://codemagic.io/](https://codemagic.io/)), or **Xcode Cloud**
    ([https://developer.apple.com/xcode-cloud/](https://developer.apple.com/xcode-cloud/))
    from Apple. All the platforms available in the market will be discussed and examples
    will be shown in [*Chapter 4*](B18113_04.xhtml#_idTextAnchor118), *Achieving Continuous
    Integration and Delivery with* *Mobile DevOps*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mobile CI/CD as a service has the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: These platforms often come with tools for managing code changes and collaborating
    on projects that integrate with version control systems such as GitHub, Bitbucket,
    and GitLab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developers can focus on writing code by automating the build and test processes
    with mobile CI/CD as a service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Integration of cloud devices: These platforms offer tools for testing and deploying
    mobile apps across a variety of devices and platforms'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Identify and resolve issues with mobile apps using monitoring and analytics
    tools: Mobile-CI/CD-as-a-service platforms often provide tools for tracking the
    performance and usage of mobile apps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In comparison to setting up and maintaining an in-house mobile CI/CD infrastructure,
    mobile CI/CD PaaS involves a monthly subscription fee rather than an upfront investment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizations can adjust their mobile CI/CD capabilities as needed with mobile
    CI/CD-as-a-service scalability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For organizations that are new to mobile CI/CD or do not have in-house expertise
    in this field, a mobile CI/CD PaaS can be very valuable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It typically frees up IT staff to focus on other tasks by allowing mobile CI/CD-as-a-service
    providers to maintain and update the infrastructure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The integrity of the mobile CI/CD process and sensitive data is protected by
    robust security measures offered by many providers of mobile CI/CD as a service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The release processes may also need to be accelerated since mobile requires
    fast machines with high performance to build, test, and release apps. In [*Chapter
    4*](B18113_04.xhtml#_idTextAnchor118), *Achieving Continuous Integration and Delivery
    with Mobile DevOps*, we will deep-dive more and learn about the different mobile
    CI/CD platforms and the pros and cons of each one.
  prefs: []
  type: TYPE_NORMAL
- en: After discussing the pros and cons of self-hosted and cloud-hosted CI/CD for
    our team, each team should decide for itself which is the best option. It’s time
    to discuss whether we need a Mobile DevOps engineer for our team or whether we
    can manage it by ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: As we discussed Mobile DevOps and CI/CD fundamentals and learned about self-hosted
    and cloud CI/CD platforms, you may have been thinking, *Do we need a mobile SRE
    or DevOps engineer*? This is an important question, so let’s answer it.
  prefs: []
  type: TYPE_NORMAL
- en: Do we need a Mobile DevOps engineer?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The best answer always is that it depends on the team’s objectives, goals,
    scale, skill sets, and experience. You can have different team members responsible
    for the Mobile DevOps stages, but don’t forget that we mentioned previously that
    it’s a team effort and collaboration. However, if the team already has a DevOps
    engineer responsible for the DevOps implementation in general in the company,
    it can also help the mobile team, or involve it in the mobile part by doing the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Understand DevOps practices for mobile, such as code signing and releasing mobile
    apps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn the basics of mobile app development. Learn a new programming language,
    such as Kotlin or Swift, and gain experience building mobile apps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create, deploy, and manage mobile apps in the cloud as you develop your knowledge
    of cloud computing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contribute to open source projects or work on personal projects to get hands-on
    experience working on Mobile DevOps projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep up to date with the latest trends and best practices in Mobile DevOps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the other hand, experienced mobile developers may be able to take the responsibility
    of implementing Mobile DevOps because they are familiar with the mobile development
    process, most of the challenges, and the need to increase their knowledge of CI/CD
    for mobile applications.
  prefs: []
  type: TYPE_NORMAL
- en: There is an opinion that it’s a way of doing things and a process you use at
    work. By understanding these four essential DevOps practices, even solo or indie
    developers can improve their productivity.
  prefs: []
  type: TYPE_NORMAL
- en: But for me, I believe that it can be a combination of both approaches because
    we can have both DevOps engineers and experienced mobile engineers working together
    to assist the mobile teams in achieving their goals and delivering apps more quickly
    and reliably. It is imperative that someone takes care of the infrastructure of
    the servers and someone takes care of the tools and frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mobile DevOps is a crucial practice for the development of high-quality mobile
    apps. It is a powerful process that can help teams develop and deploy mobile applications
    quickly and efficiently. By leveraging automation, testing, and continuous deployment,
    teams can ensure that their applications are stable, secure, and up to date. With
    Mobile DevOps, teams can achieve their mobile development goals more quickly and
    efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile DevOps also helps to simplify the development process by automating repetitive
    tasks. This allows developers to focus on the creative aspects of development,
    such as creating innovative features without having to worry about mundane tasks.
    Additionally, it ensures that the mobile app follows best practices and is optimized
    for specific platforms and devices. This allows organizations to create high-quality
    mobile applications that are well suited to their users’ needs.
  prefs: []
  type: TYPE_NORMAL
- en: By using automation, version control, cloud services, monitoring and analytics,
    and security, developers can streamline the development process and improve the
    overall quality of the app. With the help of these practices, mobile app developers
    can deliver better apps faster and with more reliability.
  prefs: []
  type: TYPE_NORMAL
- en: CI/CD pipeline implementation will be discussed in the next chapter, starting
    with the CI part, exploring different CI providers and the steps that need to
    be followed, and then integrating the CD part to create the automated CI/CD pipeline
    that we will be using for our mobile app development.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2: Implementing the Mobile DevOps Environment'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mobile DevOps relies on automated processes for the continuous integration and
    delivery of mobile apps. This means that code changes are automatically built,
    tested, and deployed to staging and production environments, without the need
    for manual intervention.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B18113_04.xhtml#_idTextAnchor118)*, Achieving Continuous Integration
    and Delivery with Mobile DevOps*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18113_05.xhtml#_idTextAnchor138)*, Implementing a Robust Mobile
    App Testing Strategy*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18113_06.xhtml#_idTextAnchor210)*, Mobile App Release Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
