["```\n    bolt --verbose plan run pecdm::provision --params @params.json\n    ```", "```\n/etc/puppetlabs/code/environments/$environment/modules: /opt/puppetlabs/puppet/modules\n```", "```\nC:/ProgramData/PuppetLabs/code/environments/production/modules;C:/ProgramData/PuppetLabs/code/modules\n```", "```\nInfo: Applying configuration version '1663239677'\n```", "```\npuppet config print codedir\npuppet config print --environment production modulepath\n```", "```\nnode /.exampleapp.com$ {\n  if $facts['os']['family'] {\n    include role::example_common_windows\n  else\n    include role::example_common_linux\n  }\n}\nnode 'server1.exampleapp.com' {\n  include role::oracle\n}\nnode 'server2.exampleapp.com','server3.exampleapp.com' {\n  include role::apache\n}\nnode default {\n  include role::common\n}\n```", "```\nnode default {\n  $role = getvar('trusted.extensions.pp_role')\n  if ($role == undef) {\n    fail(\"${trusted['certname']} does not have a pp_role trusted fact\")\n  }\n  elsif (!defined($role)) {\n    fail(\"${role} is not a valid role class\")\n  }\n  else {\n    include($role)\n  }\n}\n```", "```\ndatadir: data \ndata_hash: yaml_data \n  - name: \"Node data\" \n    path: \"nodes/%{trusted.certname}.yaml\"\n  - name: \"OS defaults\" \n    path: \"os/%{facts.os.family}.yaml\" \n  - name: \"Common data\" \n    path: \"common.yaml\n```", "```\nnode default {\nlookup( {\n  'name'          => 'classes',\n  'value_type'    => Array,\n  'default_value' => [],\n  'merge'         => {\n    'strategy' => 'unique',\n  },\n} ).each | $classification | {\n  include $classification\n}\n```", "```\n---\nclasses:\n  - role::core\n```", "```\n---\nclasses:\n  - role::core::redhat\n```", "```\n---\nclasses:\n  - role::docker\n```", "```\nnode default {\nlookup( {\n  'name'          => 'classes',\n  'value_type'    => Hash,\n  'default_value' => []\n  'merge' =>\n    'strategy' =>  'deep',\n}).each | $classification | {\n  include $classification\n}\n```", "```\n---\nclasses:\nbase profile: profile::core\nsecurity profile: profile::security\n```", "```\n---\nclasses:\nsecurity_profile: profile::security::legacy\n```", "```\npsick::firstrun::linux_classes\npsick::pre::linux_classes\npsick::base::linux_classes\npsick::profiles::linux_classes\n```", "```\n---\nclasses:\n  role::core::windows\n  sqlserver_instance:\n    features:\n      - SQL\n    source: E:/\n    sql_sysadmin_accounts:\n      - myuser\nparameters:\n  dns_servers:\n    - 2001:4860:4860::8888\n     - 2001:4860:4860::8844\n  mail_server: mail.example.com\n  vault_enabled: true\nenvironment: uat\n```", "```\nnode_terminus = exec\nexternal_nodes = /etc/puppetlabs/puppet/node.rb\n```", "```\nnode_group { 'PE Database':,\n  rule => ['or',\n    ['and', ['=', ['trusted', 'extensions', peadm::oid('peadm_role')], 'puppet/puppetdb-database']],\n    ['=', 'name', $primary_host],\n  ]\n}\n```", "```\nmod 'dsc-octopusdsc'\nmod 'puppetlabs-chocolatey', '6.2.0'\nmod 'puppetlabs-stdlib' , :latest\n```", "```\nmod 'exampleorg-examplemodule1',\n  :git => 'https://internalgitservice.com/exampleorg/examplemodule1',\n  :tag =>  'v.0.1'\nmod 'exampleorg-examplemodule2',\n  :git => 'https://internalgitservice.com/exampleorg/examplemodule2',\n  :commit => '68a140bd096a55019b3d5c8c347436b318779161'\nmod 'anotherorg-anothermodule',\n  :git => 'https://internalgitservice.com/anotherorg/anothermodule',\n  :branch => :control_branch,\n  :default_branch => 'main'\n```", "```\npuppet-access login --lifetime 2h\npuppet code deploy production --wait\n```"]