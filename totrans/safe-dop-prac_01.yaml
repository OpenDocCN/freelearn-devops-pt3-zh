- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Introducing SAFe® and DevOps
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入 SAFe® 和 DevOps
- en: Developing products in many organizations—especially ones that work on software-based
    systems or complex systems involving both hardware and software and further enabled
    by networking technologies, known as cyber-physical systems—has changed over the
    past 10 to 20 years. Factors such as changes in technology, movement to geographically
    distributed or remote development, the push for faster **time-to-market** (**TTM**),
    understanding the customer needs, and pressures to reduce the occurrence and severity
    of production failures are opportunities, challenges, or a mixture of both that
    these organizations face.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 许多组织，特别是那些从事基于软件的系统或涉及硬件和软件的复杂系统开发的组织，以及通过网络技术进一步增强的网络物理系统，过去 10 到 20 年中的产品开发方式发生了变化。诸如技术变革、向地理分布或远程开发的转变、推动更快的**上市时间**（**TTM**）、理解客户需求、以及减少生产失败的发生频率和严重性的压力，都是这些组织面临的机会、挑战，或者两者的混合。
- en: To address these challenges and take advantage of the opportunities, mindsets
    derived from Lean manufacturing began to emerge and evolve. These mindsets, combined
    with practices from emerging frameworks, began to allow organizations to move
    past the challenges and improve business outcomes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些挑战并利用机会，源自精益制造的思维方式开始出现并逐步发展。这些思维方式与新兴框架中的实践结合起来，开始帮助组织克服挑战并改善业务成果。
- en: 'In this chapter, we’re going to highlight the historical challenges and popular
    mindsets and approaches that have allowed many organizations to overcome these
    obstacles. These challenges, approaches, and frameworks are described in the following
    topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点介绍历史上的挑战、流行的思维方式和方法，正是这些让许多组织克服了这些障碍。这些挑战、方法和框架在以下主题中有所描述：
- en: Challenges organizations face in product development
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织在产品开发中面临的挑战
- en: An introduction to Agile
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《敏捷概述》
- en: An introduction to **DevOps**
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DevOps** 简介'
- en: Scaling DevOps with SAFe®
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 SAFe® 扩展 DevOps
- en: Challenges organizations face in product development
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织在产品开发中面临的挑战
- en: Product development today is enabled by a marriage of technology and society.
    Every product is a combination of hardware and software that is further enhanced
    by a connection to the internet. New product enhancements are only a software
    release away. We truly live in the *age of software* *and digital*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当今的产品开发得益于技术与社会的结合。每个产品都是硬件和软件的组合，并通过与互联网的连接进一步增强。新的产品改进只需一次软件发布即可实现。我们真正生活在*软件时代*和*数字时代*。
- en: 'It is against this backdrop that we look at challenges in product development
    and find that not only have these challenges not changed but the challenges also
    grow even more daunting thanks to the reliance on technology and software. Some
    of these classic challenges are presented here:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正是在这样的背景下，我们审视产品开发中的挑战，发现这些挑战不仅没有改变，而且由于对技术和软件的依赖，这些挑战变得更加严峻。以下是一些经典挑战：
- en: TTM pressures
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TTM 压力
- en: Understanding customer wants
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解客户需求
- en: Security and compliance
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性与合规性
- en: Ensuring quality
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保质量
- en: Competition
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 竞争
- en: These challenges don’t appear in isolation. Sometimes several challenges appear,
    or they appear all at once. Let’s examine how these challenges, alone or together,
    impede product development.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些挑战并非孤立存在。有时会同时出现几个挑战，或者它们可能一并出现。让我们来看看这些挑战是如何单独或共同作用，妨碍产品开发的。
- en: TTM pressures
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TTM 压力
- en: TTM is the measure of the length of time it takes for a new product or new product
    feature to launch from an initial idea. It is usually seen as a measure of how
    innovative a company is.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: TTM 是衡量从最初的构想到新产品或新产品特性发布所需时间长度的标准。它通常被视为衡量公司创新能力的指标。
- en: A growing trend is that the length of TTM has decreased in recent years. Advances
    in technology have increased the pace of innovation. This increased pace of innovation
    has forced product development cycles to decrease from yearly cycles to 6-month
    or quarterly cycles. This trend will continue to happen and will force organizations
    to consider whether they can deliver features more frequently.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个日益增长的趋势是，近年来 TTM 的时间长度已经缩短。技术的进步加速了创新的步伐。这一创新步伐的加快迫使产品开发周期从年度周期缩短到 6 个月或季度周期。这个趋势将继续下去，并迫使组织考虑是否能够更频繁地交付新特性。
- en: Understanding customer wants
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解客户需求
- en: Henry Ford is quoted as saying, “*If I had asked people what they wanted, they
    would have said faster horses.*” It often seems as if that statement is true today.
    Often, in the beginning, customers have no idea which features they want with
    a product. If a product requires long development cycles, the customer preferences
    may change, often to the point that what ultimately gets delivered is not what
    the customer needs or wants.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 亨利·福特曾说过：“*如果我问人们他们想要什么，他们会说更快的马*。”今天，这句话似乎依然适用。通常在开始时，客户并不知道他们想要产品的哪些功能。如果一个产品需要长时间的开发周期，客户的偏好可能会发生变化，通常变化到最终交付的产品并不是客户所需要或想要的。
- en: 'Often, what spurs a change in customer wants or requirements could be features
    offered by similar products provided by competitors. The added pressure from competitors
    provides a challenge: understand the desires of your customer and release a product
    or feature that meets those desires before your competition does.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，促使客户需求或要求发生变化的原因可能是竞争对手的类似产品提供的功能。来自竞争对手的压力提供了一个挑战：理解客户的需求，并在竞争对手之前发布能够满足这些需求的产品或功能。
- en: Security and compliance
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全与合规
- en: One challenge that organizations face doesn’t come from the marketplace. Products
    using software face growing threats from hackers and other *bad actors* that seek
    to take advantage of vulnerabilities in the software. Damages, if they are able
    to exploit these vulnerabilities, range from reputation to money in the form of
    ransomware payment or litigation.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 组织面临的一个挑战并非来自市场。使用软件的产品面临着来自黑客和其他*恶意行为者*的日益增长的威胁，他们试图利用软件中的漏洞。如果他们能够利用这些漏洞，造成的损害可能从声誉受损到金钱损失，如勒索软件支付或诉讼费用。
- en: In addition, because of the threats of these bad actors, regulations intended
    to ensure privacy and security have been enacted. Products may have to comply
    with region-specific (for example, the **General Data Protection Regulation**
    (**GDPR**)) or industry-specific (for example, the **Health Insurance Portability
    and Accountability Act** (**HIPAA**)) regulatory standards so that a customer’s
    confidential data is not exposed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，因应这些恶意行为者的威胁，已经颁布了旨在确保隐私和安全的法规。产品可能需要遵守地区性（例如**通用数据保护条例**（**GDPR**））或行业性（例如**健康保险可携带性和责任法案**（**HIPAA**））的监管标准，以确保客户的机密数据不被泄露。
- en: Ensuring quality
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确保质量
- en: One thing that is important for organizations is maintaining quality while doing
    product development. Organizations that do not apply rigor in ensuring that products
    are developed with built-in quality soon find themselves open to other challenges.
    Rework means longer lead times and delays in bringing products to market. Customer
    experience with *buggy software* or a low-quality product may drive them to competitors’
    products. Inadequate attention to quality may also allow security vulnerabilities
    to go unnoticed, allowing exploits to occur.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于组织而言，保持质量在产品开发过程中至关重要。没有在确保产品具有内建质量方面严格执行的组织，很快会发现自己面临其他挑战。返工意味着更长的交付周期和产品上市的延迟。客户体验到*有缺陷的软件*或低质量的产品时，可能会转向竞争对手的产品。不充分关注质量还可能导致安全漏洞未被察觉，从而允许恶意攻击发生。
- en: Vigilance toward maintaining quality during product development is ideally done
    by creating, setting up, and executing tests at all levels throughout development.
    Testing could even be done in pre-production and production environments and automated
    as much as possible. An *approval/inspection-based* approach only defers the discovery
    of problems until it may be too late or too costly to fix them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在产品开发过程中，保持质量的警觉性理想的做法是创建、设置并执行各级别的测试，贯穿整个开发过程。测试甚至可以在预生产和生产环境中进行，并尽可能地自动化。基于*审批/检查*的方法仅仅是将问题的发现推迟，直到可能太晚或者修复成本过高。
- en: Competition
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 竞争
- en: Some of the challenges previously mentioned talked about the part that competition
    plays. The truth of the matter is that your competitors face the same challenges
    that you do. If your competition has found a way to master these challenges, they
    have a distinct advantage in the market.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到的一些挑战讨论了竞争所扮演的角色。事实是，你的竞争对手也面临着与你一样的挑战。如果你的竞争对手已经找到了应对这些挑战的方法，他们在市场上将具有明显的优势。
- en: But it’s important to remember that this race isn’t about being first. The challenge
    is to be first with the product or feature and be able to convey why this lines
    up with customer desires. A famous example comes from Apple. Apple was a couple
    of years behind other competitors in the marketplace for digital music players
    when it released the iPod. What made the iPod a runaway product sensation was
    the marketing that touted the memory size not in terms of **megabytes** (**MB**),
    but in terms of the number of songs. This simple message connected with the marketplace,
    beyond technology aficionados and music diehards, to even casual music listeners.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但需要记住的是，这场竞争并不是关于谁先到达终点。挑战在于能够率先推出产品或功能，并能够清晰传达其与客户需求的契合度。一个著名的例子来自苹果。苹果在发布iPod时，比其他竞争对手在数字音乐播放器市场上晚了几年。然而，正是这种营销方式让iPod成为一款现象级产品。苹果宣传其内存容量时，不以**兆字节**(**MB**)为单位，而是以可容纳的歌曲数量为单位。这一简单的信息深深打动了市场，不仅是技术爱好者和音乐发烧友，甚至是普通的音乐听众也能产生共鸣。
- en: The incredibly successful launch of the iPod drove Apple on a path of innovation
    that catapulted it to its current place as one of several technology giants. The
    makers of the first commercial **MPEG-1 Audio Layer 3** (**MP3**) player no longer
    provide support for their product.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: iPod的极度成功推动了苹果走上了一条创新之路，使其迅速跃升为全球科技巨头之一。首个商业**MPEG-1 音频层3**(**MP3**)播放器的制造商，如今已不再提供对其产品的支持。
- en: Meeting the challenges
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 面对挑战
- en: These challenges have plagued product development since the early history of
    man. The exact form of challenge, however, changes with every generation and with
    every shift in technology.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这些挑战自人类历史早期就一直困扰着产品开发。然而，挑战的具体形式随着每一代人和每一次技术变革而变化。
- en: TTM cycles will always drive when to release products; however, with the aid
    of technology, these cycles are shrinking. A customer’s requirements may always
    remain a mystery, often even to the customer. Competition changes will ebb and
    flow, with the emergence of new disruptors and the disappearance of the *also-rans*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: TTM周期将始终决定何时发布产品；然而，借助技术的帮助，这些周期正在缩短。客户的需求可能始终保持神秘，往往连客户自己都无法完全理解。竞争格局会随新型颠覆者的出现和*落后者*的消失而不断波动。
- en: 'As these ever-present challenges take on new forms, those organizations that
    have mastered these challenges do so through new mindsets and practices revolving
    around three areas: people, process, and technology.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 随着这些无处不在的挑战呈现出新的形式，那些已经掌握这些挑战的组织通过围绕三大领域的新思维和实践来应对：人员、流程和技术。
- en: A focus on people involves looking at the mindset, values, and principles that
    people hold in common to form an organizational culture. This culture is the most
    important counterpoint to challenges because it informs everybody on how they
    will meet these challenges.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 关注人员涉及考察人们共同持有的思维方式、价值观和原则，从而形成一种组织文化。这种文化是应对挑战的最重要对策，因为它为每个人提供了如何应对这些挑战的指引。
- en: With the culture established, a focus on the process implements practices that
    are modeled on the right mindset, values, and principles. Successful application
    of the practices promotes a feedback loop, encouraging the culture and reinforcing
    the mindset, values, and principles.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在确立文化之后，关注流程就实施了基于正确思维方式、价值观和原则的实践。成功应用这些实践能够促进反馈循环，进一步推动文化建设，并加强思维方式、价值观和原则。
- en: Finally, tools aid the process. They allow practices to be repeatable and automatic,
    strengthening the process, and allowing the application of the process to be successful.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，工具帮助了流程的实施。它们使得实践可重复且自动化，强化了流程的执行力，从而使得流程的应用能够取得成功。
- en: The remainder of this book will highlight the combination of people, processes,
    and tools that have helped organizations meet these challenges seen in modern
    product development. These combinations are set up as frameworks, meant to be
    flexible enough to apply to different organizations in different industries. These
    combinations started with software development but warrant a look as the creation
    of software is prevalent in every organization today.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的其余部分将重点介绍帮助组织应对现代产品开发中所面临挑战的人员、流程和工具的结合。这些结合构建成灵活的框架，旨在能够适应不同行业、不同组织的应用。这些结合最初源自软件开发，但鉴于软件的创造在当今每个组织中都广泛存在，因此值得关注。
- en: We begin our examination with a look at Agile development or the transition
    from large-scale delivery of software to incremental delivery of software in short
    design cycles.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从敏捷开发的探讨开始，或者说从大规模软件交付到短周期设计的增量交付的过渡。
- en: An introduction to Agile
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏捷简介
- en: To understand the context in which these challenges lie, it is important to
    understand the dominant product development process, known colloquially as **Waterfall**.
    Waterfall was used for many years to develop cathedrals and rocket ships, but
    when the process was used for developing software, the strains of it were beginning
    to show, highlighting inadequacies against the challenges of meeting a shrinking
    TTM and satisfying customer needs. Something had to be done.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解这些挑战所处的背景，重要的是理解主流的产品开发过程，通常被称为**瀑布模型**。瀑布模型曾被用于许多年的大教堂和火箭飞船的开发，但当这一过程用于软件开发时，逐渐显露出其局限性，特别是在应对缩短的产品上市时间（TTM）和满足客户需求方面。必须采取一些措施。
- en: Next, let’s look at the emergence of Agile methods from the initial attempts
    to incorporate Lean thinking into software development, to the creation of the
    Agile Manifesto and the emergence of Agile practices and frameworks.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看敏捷方法的兴起，从最初尝试将精益思维融入软件开发，到敏捷宣言的创建以及敏捷实践和框架的出现。
- en: The rise and fall of Waterfall
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 瀑布模型的兴起与衰退
- en: The method known as Waterfall had its origins in traditional product development.
    Workers would divide up the work into specific phases, not moving to the next
    phase until the current phase was completed.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 被称为瀑布模型的方法源于传统的产品开发。工作人员将工作划分为特定的阶段，直到当前阶段完成才会进入下一阶段。
- en: 'In 1970, Winston W. Royce first proposed a diagram and model for this method
    when product development moved to software, as depicted here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 1970年，温斯顿·W·罗伊斯（Winston W. Royce）首次提出了这一方法的图表和模型，当时产品开发已转向软件，如图所示：
- en: '![Figure 1.1 – Waterfall diagram](img/B18756_01_01.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – 瀑布模型图](img/B18756_01_01.jpg)'
- en: Figure 1.1 – Waterfall diagram
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 瀑布模型图
- en: Although Royce never advocated this approach and actually preferred a more incremental
    approach to development, his diagram caught on and many in the industry called
    the approach *Waterfall* because the arrows from one phase to the next resembled
    waterfalls.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管罗伊斯从未倡导这种方法，实际上他更倾向于采用增量开发的方法，但他的图表流行开来，行业内许多人称这种方法为*瀑布模型*，因为从一个阶段到另一个阶段的箭头形态像瀑布。
- en: In software development, this approach began to exhibit drawbacks. If a requirement,
    problem, or constraint appeared in the latter phases, the additional work drove
    the process backward, requiring an enormous amount of rework. Many times, the
    end customer would not have ideas on requirements early on, leading to rework
    or a final product that failed to meet customer expectations.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，这种方法开始显示出弊端。如果在后期阶段出现需求、问题或限制，额外的工作会将流程推回，导致大量返工。许多时候，最终客户在初期并不会有明确的需求，这就导致了返工或最终产品未能满足客户期望。
- en: The delays introduced by rework also put pressure on fixed-time projects. To
    meet the deadlines, some of the later phases (often testing) would be curtailed
    or eliminated to deliver a product. With the lack of testing, errors or *bugs*
    would remain undiscovered until the product was released, resulting in low-quality
    software and low customer value.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 返工引入的延迟也对固定时间项目造成了压力。为了赶上截止日期，某些后期阶段（通常是测试）会被缩短或取消，以便交付产品。由于缺乏测试，错误或*bug*在产品发布前未被发现，从而导致低质量的软件和低客户价值。
- en: TTM pressures on product development cycles reduced the time available to create
    new software or update existing software. The model was falling apart, but what
    could be done differently?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 产品开发周期中的TTM压力减少了开发新软件或更新现有软件的时间。这个模型开始崩溃，但还能做些什么不同的尝试呢？
- en: The emergence of Agile
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 敏捷方法的兴起
- en: In the early 21st century, other methods such as **Extreme Programming** (**XP**),
    Scrum, and Crystal began to emerge. These methods advocated *incremental delivery*,
    where a bit of the intended functionality would go through all stages (requirements,
    design, coding, and testing) in small design cycles, often no longer than a month.
    At the end of each design cycle, teams would solicit customer feedback, often
    incorporating that feedback into the next design cycle.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在21世纪初，其他方法如**极限编程**（**XP**）、Scrum和Crystal开始涌现。这些方法倡导*增量交付*，即一小部分预期功能在小的设计周期中经过所有阶段（需求、设计、编码和测试），通常不超过一个月。在每个设计周期结束时，团队会征求客户反馈，并通常将这些反馈融入下一个设计周期。
- en: 'A representation of incremental delivery, containing short design cycles and
    delivery of packages of value, is shown in the following diagram:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了增量交付的表示，包含短周期的设计和有价值的包的交付：
- en: '![Figure 1.2 – Incremental (Agile) development diagram](img/B18756_01_02.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – 增量式（敏捷）开发图](img/B18756_01_02.jpg)'
- en: Figure 1.2 – Incremental (Agile) development diagram
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – 增量式（敏捷）开发图
- en: Between February 11 and 13, 2001, a group of software development experts, some
    of whom created `agilemanifesto.org`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 2001年2月11日至13日，一群软件开发专家，其中一些人创建了`agilemanifesto.org`。
- en: The Agile Manifesto contains a set of values and a list of principles, but it
    must be noted that the authors of the manifesto talk about the values as a set
    of preferences. It is possible for Agile teams to have processes, tools, documentation,
    contracts, and plans. It’s only when those items interfere with the items on the
    left half of each statement of value that the team should re-evaluate the process,
    tool, or contract, and plan and adjust.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷宣言包含一套价值观和一系列原则，但需要注意的是，宣言的作者们谈论这些价值时，将其视为一组偏好。敏捷团队可以有流程、工具、文档、合同和计划。只有当这些内容妨碍了每个价值声明左侧的项目时，团队才应重新评估流程、工具、合同和计划，并进行调整。
- en: 'The value set shows what is important, stating the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 价值观设定展示了什么是重要的，说明如下：
- en: '*We are uncovering better ways of developing software by doing it and helping
    others do it. Through this work we have come* *to value:*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*通过实践和帮助他人实践，我们发现了更好的软件开发方式。通过这项工作，我们开始* *重视：*'
- en: '*Individuals and interactions over processes* *and tools*'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*个人和互动优于* *流程和工具*'
- en: '*Working software over* *comprehensive documentation*'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*工作的软件优于* *详尽的文档*'
- en: '*Customer collaboration over* *contract negotiation*'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*客户协作优于* *合同谈判*'
- en: '*Responding to change over following* *a plan*'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*响应变化优于* *遵循计划*'
- en: That is, while there is value in the items on the right, we value the items
    on the left more.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，尽管右边的内容也有价值，但我们更看重左边的内容。
- en: 'The 12 principles of the Agile Manifesto elaborate and provide context to these
    values, stating the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷宣言的12条原则详细阐述并提供了这些价值的背景，说明如下：
- en: Our highest priority is to satisfy the customer through early and continuous
    delivery of valuable software.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的最高优先级是通过早期和持续交付有价值的软件来满足客户。
- en: Welcome changing requirements, even late in development. Agile processes harness
    change for the customer’s competitive advantage.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 欢迎变更需求，即使在开发后期。敏捷流程利用变化为客户创造竞争优势。
- en: Deliver working software frequently, from a couple of weeks to a couple of months,
    with a preference for a shorter timescale.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 经常交付工作的软件，从几周到几个月，优先考虑较短的时间尺度。
- en: Business people and developers must work together daily throughout the project.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 商业人员和开发人员必须在整个项目过程中每天都共同工作。
- en: Build projects around motivated individuals. Give them the environment and support
    they need, and trust them to get the job done.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 围绕有动力的个体构建项目。为他们提供所需的环境和支持，并信任他们完成工作。
- en: The most efficient and effective method of conveying information to and within
    a development team is face-to-face conversation.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 传递信息给开发团队及团队内信息传递的最有效方法是面对面的交流。
- en: Working software is the primary measure of progress.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作的软件是进展的主要衡量标准。
- en: Agile processes promote sustainable development. The sponsors, developers, and
    users should be able to maintain a constant pace indefinitely.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 敏捷流程促进可持续发展。赞助人、开发人员和用户应该能够维持一个持续的节奏，无限期地进行下去。
- en: Continuous attention to technical excellence and good design enhances agility.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续关注技术卓越和良好设计能够增强敏捷性。
- en: Simplicity—the art of maximizing the amount of work not done—is essential.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简单性——最大化未完成工作的艺术——至关重要。
- en: The best architectures, requirements, and designs emerge from self-organizing
    teams.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最好的架构、需求和设计源自自组织的团队。
- en: At regular intervals, the team reflects on how to become more effective, then
    tunes and adjusts its behavior accordingly.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 团队定期反思如何变得更加高效，然后调整和优化行为。
- en: The addition of Lean
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 精益的加入
- en: Around the same time, others were looking at other ways of developing software
    with shorter TTM. They looked at applying principles from **Lean manufacturing**.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在同一时期，其他人也在寻找以更短的**时间到市场（TTM）**来开发软件的方法。他们开始研究如何将**精益生产**的原则应用到软件开发中。
- en: Lean manufacturing looks to apply practices to reduce waste. The methods were
    invented by Taiichi Ohno and used to create the **Toyota Production System** (**TPS**).
    Along with the removal of waste, Lean manufacturing looks to build in quality
    and strive for **Kaizen**, or continuous improvement.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 精益生产旨在应用实践以减少浪费。这些方法由大野耐一（Taiichi Ohno）发明，用于创建**丰田生产系统**（**TPS**）。除了消除浪费，精益生产还力图构建质量并追求**改善（Kaizen）**，即持续改进。
- en: 'The application of the principles found in Lean manufacturing was used by Mary
    and Tom Poppendieck to describe Lean software development in their book, *Lean
    Software Development: An Agile Toolkit*. These principles are summarized as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 精益生产原则的应用被玛丽和汤姆·波本迪克（Mary and Tom Poppendieck）用于在他们的书籍《*精益软件开发：敏捷工具包*》中描述精益软件开发。这些原则总结如下：
- en: Removing waste
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消除浪费
- en: Emphasizing feedback and learning
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强调反馈和学习
- en: Waiting until the last possible moment for decisions
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等到最后一刻再做决定
- en: Frequently delivering
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经常交付
- en: Making sure the team is empowered
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保团队有权决策
- en: Meeting users’ perceptions and expectations
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 满足用户的感知和期望
- en: Employing systemic thinking
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运用系统思维
- en: In addition to the work by the Poppendiecks, David J. Anderson adapted **Kanban**,
    another tool from the TPS for software development at Microsoft. This adaptation
    of Kanban was modified as a framework of practices suitable for software development.
    Kanban soon rose in popularity not only as an alternative to Scrum or XP—many
    of the practices are used in conjunction with Scrum or XP to facilitate the execution
    of tasks.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 除了波本迪克夫妇的工作外，大卫·J·安德森（David J. Anderson）在微软改编了**看板（Kanban）**，这是丰田生产系统中的另一个工具，专门用于软件开发。看板的这一改编被调整为适用于软件开发的实践框架。看板很快在开发中流行起来，不仅作为Scrum或XP的替代方案——许多实践都与Scrum或XP结合使用，以促进任务的执行。
- en: Software development teams did see that the change to Agile development was
    producing results and overcoming challenges in product development, but the results
    were only seen in development and not in the overall organization. Clearly, changes
    needed to be made in other parts of the organization. Let’s examine the changes
    that development and operations made together in the DevOps movement.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发团队确实发现，转向敏捷开发正在产生结果并克服产品开发中的挑战，但这些结果仅在开发中看到，而不是整个组织层面。显然，其他部门也需要进行变革。让我们来看看开发和运维如何在DevOps运动中共同进行改变。
- en: An introduction to DevOps
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps的介绍
- en: As development teams began to adopt Agile methods and deliver software features
    incrementally, they faced a challenge in delivering value from the outside. Operations
    teams, the ones that maintain the development and production platforms where code
    executes, often do not release new packages from the development teams as they
    emerge. Rather, operations teams insist on collecting features and deploying them
    in specified *release windows* to minimize the risk that a single new change would
    bring down the production environment. But instead of minimizing the risk, it
    compounds the risk by straining the time allowed for the release windows, with
    mismatched configurations between development and production environments and
    untracked manual intervention in production environments. Bundling releases into
    release packages also moved delivery away from small increments to larger monoliths
    that may diminish customer value.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 随着开发团队开始采用敏捷方法并增量交付软件功能，他们面临着从外部交付价值的挑战。运维团队，即维护开发和生产平台（代码执行的地方）的团队，通常不会在新包出现时立即从开发团队发布它们。相反，运维团队坚持收集功能并在指定的*发布窗口*中部署它们，以最小化单个新变更可能导致生产环境崩溃的风险。但这种做法并没有最小化风险，反而通过压缩发布窗口的时间，导致开发与生产环境之间的配置不匹配，并且生产环境中存在无法追踪的手动干预，从而加剧了风险。将发布捆绑成发布包还将交付从小增量转向了较大的单体发布，这可能降低了客户价值。
- en: At this point, it becomes necessary to view the perspective of a typical operations
    team. Its job is to ensure that the organization’s production environment, the
    one that may be producing an organization’s revenue, is as operational as possible.
    Any change to that environment, even ones for new features, is seen as a risk
    to that stability.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在此时，必须从典型的运维团队的角度来看待问题。其工作是确保组织的生产环境——也就是可能产生收入的环境——尽可能地高效运行。任何对该环境的改动，甚至是为了新增功能的改动，都被视为对稳定性的风险。
- en: 'In 2009, John Allspaw and Paul Hammond gave a talk titled *10+ Deploys per
    Day: Dev and Ops Cooperation at Flickr* during the *O’Reilly Velocity* conference.
    In this talk, they outlined the methods they used to get an unheard-of 10 deployments
    a day. These methods still form the basic pillars of **development-operations**
    (**DevOps**) today. We will talk about the incorporation of the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 2009年，John Allspaw 和 Paul Hammond 在 *O'Reilly Velocity* 大会上做了一场题为 *每天部署 10+
    次：Flickr 的开发与运维合作* 的演讲。在这场演讲中，他们概述了实现前所未有的每天 10 次部署的方式。这些方法至今仍然是 **开发-运维**（**DevOps**）的基本支柱。我们将讨论以下内容的整合：
- en: Tools and technology
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具和技术
- en: People and process
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人员和流程
- en: DevOps tools and technology
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 工具和技术
- en: During the talk, Allspaw and Hammond identified technologies and what they did
    with them to align both the development and operations teams. But not only were
    the tools noteworthy—it was also how the teams used the tools together in a collaborative
    way.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在讲座中，Allspaw 和 Hammond 识别了各种技术，并介绍了他们如何利用这些技术来协调开发和运维团队。然而，值得注意的并不仅仅是这些工具——更重要的是团队们如何协作使用这些工具。
- en: 'These technologies included the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术包括以下内容：
- en: Automated infrastructure
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化基础设施
- en: Common version control
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用版本控制
- en: One-button builds/deployment
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一键构建/部署
- en: Feature flags
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能标志
- en: Shared metrics
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享度量
- en: '**Instant messaging** (**IM**) robots on shared channels'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**即时通讯**（**IM**）机器人在共享频道中'
- en: The use of tools and technologies continues to play a key role in DevOps today.
    We’ll explore how these tools enabled a quick release process into production
    and quick resolutions if problems happened in production.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 工具和技术的使用继续在 DevOps 中发挥着关键作用。我们将探讨这些工具如何使生产环境中的快速发布过程得以实现，并且在生产环境出现问题时能迅速解决。
- en: Automated infrastructure
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动化基础设施
- en: As software became more complex, the environments to execute them became more
    complex as well. Operations teams were faced with configuring servers that grew
    over time from tens to hundreds or thousands. The task required automation. **Configuration
    management** (**CM**) tools such as Chef and Puppet began to emerge.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 随着软件变得更加复杂，执行这些软件的环境也变得更加复杂。运维团队面临的任务是配置不断增长的服务器，数量从几十台增加到几百台甚至几千台。这一任务需要自动化。**配置管理**（**CM**）工具，如
    Chef 和 Puppet 开始出现。
- en: CM allowed operations teams to standardize environmental configurations such
    as versions of an operating system, software applications, and code libraries.
    It allowed them to easily find those machines that did not have the standard configuration
    and correct them. As servers moved from physical hardware to **virtual machines**
    (**VMs**), CM allowed for the creation and maintenance of standard images that
    were differentiated by what role they played in the server environment.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理使运维团队能够标准化环境配置，如操作系统版本、软件应用和代码库。它还帮助他们轻松找到那些没有标准配置的机器并进行修正。当服务器从物理硬件转移到
    **虚拟机**（**VMs**）时，配置管理使得创建和维护按其在服务器环境中扮演的角色区分的标准镜像成为可能。
- en: CM also helps developers. Automated CM can make every server provisioned uniform
    between the multiple environments an organization has for software development
    and release. Consistency between development, staging, and production environments
    eliminated a problem colloquially known as “*works on my machine”* where even
    subtle differences between development, testing, and production environments led
    to the possibility that code would work on development but would fail in production.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理（CM）同样对开发者有帮助。自动化配置管理可以确保组织用于软件开发和发布的多个环境中的每台服务器配置一致。开发、测试和生产环境之间的一致性消除了一个问题，这个问题通常被称为“*在我的机器上能运行*”，即即便是开发、测试和生产环境之间的细微差别，也可能导致代码在开发环境中能运行，但在生产环境中失败。
- en: Common version control
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用版本控制
- en: '**A version control systems** (**VCS**) such as Git are is a popular tool in
    software development for managing source code. With version control, developers
    can make changes to source code on a private sandbox called a branch. When ready
    to share source code changes, developers can merge their changes back to the main
    branch of the source code repository, making sure those changes do not conflict
    with other changes from other developers. The VCS records all changes that happen
    to the source code, including those from other branches. Because the version control
    contains a comprehensive history of the source code’s evolution, it is possible
    to find a version of the source code from a specific point in time.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**版本控制系统**（**VCS**）如 Git 是软件开发中常用的工具，用于管理源代码。通过版本控制，开发者可以在一个称为分支的私有沙箱中修改源代码。当准备好共享源代码更改时，开发者可以将更改合并回源代码库的主分支，确保这些更改不会与其他开发者的更改产生冲突。VCS
    会记录所有源代码的更改，包括来自其他分支的更改。因为版本控制包含了源代码演变的全面历史，所以可以根据特定时间点找到源代码的某个版本。'
- en: Soon, version control became important for storing more than source code. Testing
    tools required test scripts and test data that could be version-controlled as
    the tests changed. CM tools used text files to define ideal configurations for
    servers and VMs. Operations could also have scripts that would perform the configuration
    tasks automatically. All these could be version-controlled to record the evolution
    of the environment.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 很快，版本控制不仅仅用于存储源代码，它也开始用于存储更多内容。测试工具需要版本控制的测试脚本和测试数据，随着测试的变化，版本控制也在其中。配置管理工具（CM
    工具）使用文本文件来定义服务器和虚拟机的理想配置。运维还可以拥有执行自动配置任务的脚本。所有这些内容都可以通过版本控制来记录环境的演变。
- en: Making sure that both development and operations were not only using version
    control but using the *same* version control tool became important. Having all
    versions of the artifacts (code, tests, configuration files, scripting, and so
    on) developed allowed for an easy understanding of which version of which artifact
    was used in a release using tags or labels. A common version control tool ensured
    that one side (development or operations) was not denied access to view this understanding
    if a problem occurred.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 确保开发和运维不仅使用版本控制，而且使用*相同*的版本控制工具变得十分重要。开发的所有工件（代码、测试、配置文件、脚本等）都要有版本，这样通过标签或标记可以轻松理解某个发布中使用的是哪个版本的哪个工件。使用统一的版本控制工具可以确保一方（开发或运维）在发生问题时不会被拒绝查看这一信息。
- en: One-button builds/deployment
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一键构建/部署
- en: Building a release from source code could be a time-intensive task for developers.
    They would have to pull their changes from version control, add in the required
    code libraries, compile the changes together into a build package, and upload
    that build package into an environment to test whether the changes worked. A smart
    developer would often automate these tasks by setting up build scripts, but could
    this process be easier?
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 从源代码构建一个发布版本可能是一个耗时的任务。开发者需要从版本控制中拉取更改，添加必要的代码库，将更改编译成一个构建包，并将该构建包上传到环境中，以测试更改是否有效。一个聪明的开发者通常会通过设置构建脚本来自动化这些任务，但这个过程是否能变得更简单呢？
- en: '**Continuous integration** (**CI**) tools such as Hudson (later named Jenkins)
    emerged that allowed developers to go through all the steps of a build process
    and execute build scripts by just pushing a button. A page could easily show not
    only build success but if a build failure occurred, it could also show in which
    step of the process that failure occurred. Automating the build through CI also
    made sure that the build process between developers was consistent by ensuring
    that all steps were followed and a step was not omitted.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）工具如 Hudson（后改名为 Jenkins）应运而生，它允许开发者通过按一个按钮完成构建过程的所有步骤并执行构建脚本。一个页面不仅可以显示构建是否成功，还能在构建失败时，显示失败发生在哪个步骤。通过
    CI 自动化构建，也确保了开发者之间构建过程的一致性，保证所有步骤都被执行，并且没有遗漏任何步骤。'
- en: Could that same consistency be applied to operations teams when they deployed
    releases? **Continuous deployment** (**CD**) tools take a build package and run
    tests against it in the current level environment, and if they pass, apply it
    to a specific environment. These tools can also connect with **CM** tools to create
    instances of the environment with the new build package “on the fly.” Any new
    deployment would be recorded showing who pushed the button, when it was pushed,
    and which artifacts and artifact changes were deployed to a particular environment.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当运维团队部署发布时，是否可以应用相同的一致性？**持续部署**（**CD**）工具获取一个构建包并对其在当前级别环境中运行测试，如果测试通过，则将其应用于特定环境。这些工具还可以与**CM**工具连接，以在需要时创建带有新构建包的环境实例。任何新的部署都将被记录，显示谁按下按钮，何时按下按钮，以及部署到特定环境的哪些工件和工件变更。
- en: Can a tool used for CI also be used for CD? This is a common way of implementing
    the same automation that can be used by both development and operations.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 用于 CI 的工具也能用于 CD 吗？这是实施可以由开发和运维双方使用的相同自动化的常见方式。
- en: Feature flags
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特性标志
- en: 'Flickr, the company Allspaw and Hammond worked for, was a photo-sharing and
    rating website. Its software differed from traditional desktop-based software
    because it was concerned with supporting only one release: the release on its
    production environment. The company did not have to worry about supporting multiple
    versions of the released software. This allowed it to have the main branch of
    its version code repository as the specific version it would support and examine
    if problems arose.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Flickr，Allspaw 和 Hammond 所工作的公司，是一个照片分享和评分网站。其软件与传统的基于桌面的软件不同，因为它只关注支持其生产环境中的一个版本发布。公司不必担心支持发布软件的多个版本。这使得它将版本代码仓库的主分支作为它将支持并检查问题是否出现的特定版本。
- en: 'To handle problems introduced by buggy new features, it set up conditional
    branches in code called **feature flags**. Based on the value of a variable, the
    code for a new feature would be visible or invisible. The feature flag acts as
    an *on-off switch*, indicating which code is released, and thus visible, as illustrated
    in the following diagram:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理由有缺陷的新功能引入的问题，它在代码中设置了称为**特性标志**的条件分支。根据变量的值，新功能的代码将可见或不可见。特性标志充当*开关*，指示发布的代码以及其可见性，如下图所示：
- en: "![Figure 1.3 – Illustration of \uFEFFa feature flag](img/B18756_01_03.jpg)"
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 特性标志的插图](img/B18756_01_03.jpg)'
- en: Figure 1.3 – Illustration of a feature flag
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 特性标志的插图
- en: Having feature flags in the code allowed for deployments to production environments
    to be more flexible. Newly deployed code could be present in production but not
    be seen until thoroughly tested. “Dark launches” could result from this where
    operations could evaluate the performance of the new feature with the existing
    software against production data and load. Test customers could evaluate new features
    in a subset of the production environment where those feature flags were activated.
    Finally, the behavior of the environment could be quickly changed by changing
    the value of the feature flag(s), propagating the change through CI and CD, and
    allowing the change in production. This method of recovery is called *roll-forward*
    or *fix-forward*.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中设置特性标志允许更灵活地部署到生产环境。新部署的代码可以存在于生产环境中，但在经过彻底测试之前不可见。这种情况可能导致“暗启动”，在此期间运维人员可以评估新功能在现有软件和生产数据负载下的性能。测试客户可以在启用这些特性标志的生产环境子集中评估新功能。最后，通过更改特性标志的值，通过
    CI 和 CD 传播更改，并允许在生产中进行更改，可以快速改变环境的行为。这种恢复方法称为*向前滚动*或*修复向前*。
- en: Shared metrics
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 共享指标
- en: To ensure stability, operations collects the performance of every environment
    and reviews the metrics such data collection produces. These metrics can be displayed
    as specific views on a dashboard. Dashboard views not only give an indication
    of performance now but also allow operations to identify trends and take corrective
    action.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保稳定性，运维收集每个环境的性能，并审查这些数据收集产生的指标。这些指标可以显示为仪表板上的特定视图。仪表板视图不仅提供当前性能的指示，还允许运维识别趋势并采取纠正措施。
- en: Flickr made these dashboards not only for operations but also for developers
    as well. Developers could see the performance of the application in the context
    of the environment. Allowing developers access to this contextual data ensured
    they could see the effects of their new features and whether those features provided
    value.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Flickr不仅为运维人员制作了这些仪表板，还为开发人员提供了这些仪表板。开发人员可以在环境的上下文中看到应用程序的性能。让开发人员访问这些上下文数据，确保他们能够看到新功能的效果，以及这些功能是否提供了价值。
- en: Shared metrics also allowed for adaptive feedback loops to occur in the environment.
    The performance metric could be evaluated by the application, and the evaluation
    could generate a notification that additional resources would be required.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 共享指标还允许在环境中发生适应性反馈回路。性能指标可以通过应用程序进行评估，评估结果可以生成通知，指示需要额外的资源。
- en: IM robots on shared channels
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在共享频道上的IM机器人
- en: Communication between development and operations was paramount. The use of standard
    email was discouraged in favor of instant messaging and chat mechanisms that allowed
    for ongoing real-time communications of the systems between development and operations.
    Notifications about development events such as build status and operations events—for
    example, deployment status, system alerts, and monitoring messages—could be inserted
    into the channel by chat robots to give both development and operations personnel
    notice of specific events that occurred. Chats could also be searchable to provide
    a timeline of events for troubleshooting when problems arose.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 开发与运维之间的沟通至关重要。使用标准电子邮件被不鼓励，取而代之的是即时消息和聊天机制，这些机制允许开发与运维之间进行持续的实时通信。关于开发事件（如构建状态）和运维事件（例如，部署状态、系统警报和监控消息）的通知可以通过聊天机器人插入到频道中，提醒开发和运维人员发生的具体事件。聊天内容也可以被搜索，以便在出现问题时提供事件的时间线，帮助排查问题。
- en: DevOps people and processes
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps人员和流程
- en: It’s worth noting that other organizations besides Flickr were using the same
    tools and technologies. What made a difference to Flickr was how the people from
    distinct groups worked together in shared processes to leverage the tools and
    technologies. These people and processes formed an organizational culture that
    allowed them to deploy rapidly.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，除了Flickr之外，其他组织也在使用相同的工具和技术。Flickr的不同之处在于，来自不同小组的人们如何在共享流程中合作，利用这些工具和技术。这些人和流程形成了一种组织文化，使他们能够快速部署。
- en: 'Allspaw and Hammond made note of specific touchpoints during the talk. These
    included the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Allspaw和Hammond在谈话中记录了具体的接触点。这些包括以下内容：
- en: Respect
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尊重
- en: Trust
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信任
- en: Learning from failure
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从失败中学习
- en: No “fingerpointing”
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不“指责”
- en: Having these touchpoints form that organizational culture was just as important
    as the application of tools and technology.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这些接触点的形成与组织文化一样重要，正如工具和技术的应用一样重要。
- en: Respect
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 尊重
- en: It was important that people from different groups within Flickr operated from
    a place of respect. That respect meant moving past stereotypes about developers
    or operations people and looking at common goals.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Flickr内部不同小组的人们从尊重的角度运作至关重要。这种尊重意味着超越对开发人员或运维人员的刻板印象，关注共同的目标。
- en: The respect extended to other people’s expertise, opinions, and recommendations.
    There’s a fundamental understanding that different people have different backgrounds
    and experiences that shape their opinions and responsibilities. A key part of
    problem-solving is to listen to those different perspectives that may give different
    and better solutions to a problem. Understanding the differing responsibilities
    allows you to understand another person’s perspective.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 尊重他人的专业知识、观点和建议。基本的理解是，不同的人有着不同的背景和经验，这些背景和经验塑造了他们的观点和责任。解决问题的一个关键部分是倾听那些可能提供不同和更好的解决方案的不同观点。理解不同的责任可以帮助你理解另一个人的视角。
- en: Another important extension of that respect that Allspaw and Hammond highlighted
    was not just giving a response but understanding the reasons and motivations others
    would have for solving these problems. It’s not enough to answer a question—you
    should also understand why the question is being asked before giving an answer.
    Allowing everyone to understand the context allows the group to create unique
    solutions to problems.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Allspaw 和 Hammond 强调的尊重的另一个重要延伸是，不仅仅是给出一个回答，而是要理解别人解决这些问题的原因和动机。仅仅回答一个问题是不够的——你还应该在回答之前理解这个问题被提出来的原因。让每个人都理解背景，可以帮助小组共同创造出独特的解决方案。
- en: To have this respect shown, there must be transparency. Hiding information between
    groups does not allow for the free exchange required to create innovative solutions
    to problems. Also, at some point, whatever you hide will be found out, creating
    conflict.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要表现出这种尊重，必须有透明度。小组之间隐藏信息会阻碍自由交换，从而无法创造出创新的解决方案。而且，最终无论你隐藏什么，都将被发现，从而引发冲突。
- en: An important part of respect is empathy. Knowing what effects to operations
    there may be from a code change is important before having that discussion with
    operations personnel. This allows room for any hidden assumptions to be unearthed
    and for creative solutions to flow.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 尊重的重要组成部分是同理心。在与运维人员讨论之前，了解代码变更对运维可能带来的影响是非常重要的。这为揭示任何潜在的假设并激发创造性解决方案提供了空间。
- en: Trust
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 信任
- en: Armed with transparency and empathy to build respect, people from one group
    need to trust the other groups. If a development person has that understanding
    of what impact to operations their feature will have, it is then incumbent on
    them to have that conversation with operations personnel to confirm those impacts
    or at least make them aware of potential impacts.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有透明度和同理心来建立尊重后，一个小组的人需要信任其他小组。如果开发人员了解他们的功能对运维的影响，那么他们就有责任与运维人员进行沟通，确认这些影响，或者至少让他们意识到潜在的影响。
- en: Conversely, operations people need to have developers involved to discuss together
    what effects any infrastructure changes will have on current or future features.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，运维人员需要让开发人员参与进来，共同讨论任何基础设施变更对当前或未来功能的影响。
- en: Ultimately, this comes to an understanding that everyone should trust that everyone
    else is doing their best for the good of the business.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，这意味着每个人都应该相信其他人都在尽最大努力为业务的利益而工作。
- en: Examples of the manifestation of trust are not only the sharing of data through
    version control, IM chat mechanisms, and metrics/dashboards, but also lie in the
    construction of shared runbooks and escalation plans that are created when readying
    a new release. The construction of these plans allows discussion to flow on risks,
    impacts, and responsibilities.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 信任的体现不仅仅是通过版本控制、即时消息聊天机制、度量和仪表板共享数据，还体现在构建共享的运行手册和升级计划中，这些计划是在准备新版本时创建的。构建这些计划使得有关风险、影响和责任的讨论得以顺畅进行。
- en: Finally, including mechanisms to allow the other group to operate is an important
    part of leveraging that trust. For developers, that meant setting up controls
    in software for operations people to manipulate. For operations people, that meant
    allowing appropriate access to the production environment so that developers could
    directly see the effects new changes had in the production environment.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，包含允许另一组人员操作的机制，是利用信任的重要部分。对于开发人员来说，这意味着在软件中设置运维人员可以操作的控制功能。对于运维人员来说，这意味着允许适当的访问权限进入生产环境，以便开发人员能够直接看到新变更在生产环境中的影响。
- en: Learning from failure
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从失败中学习
- en: Failures will happen. How an organization deals with that failure is the difference
    between a successful organization and an organization that will not remain operational
    for long. Successful organizations focus more on how to respond to failures, foreseen
    and unforeseen, more than expending energy to prevent the next failure.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 失败是不可避免的。一个组织如何应对失败，决定了它是一个成功的组织，还是一个很快无法继续运营的组织。成功的组织更加关注如何应对已知和未知的失败，而不是花力气去防止下一次失败的发生。
- en: Preparation for responding to failure is a responsibility that falls on everyone.
    Each person, developer, or operations team member must know how they would react
    in an emergency. Ways of practicing emergencies include having junior employees
    “shadow” senior employees to see how they would react. At Flickr, those junior
    employees were put in the same “what-if” scenario as the exact outage occurred
    to see which solutions they could develop.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 对失败的应对准备是每个人的责任。每个开发人员或运维团队成员必须知道在紧急情况下他们会如何反应。应急演练的方法包括让初级员工“跟随”高级员工，观察他们如何反应。在
    Flickr，这些初级员工被置于与实际停机事件相同的“假设”场景中，看看他们能提出哪些解决方案。
- en: No “fingerpointing”
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无“指责”
- en: At Flickr, they discovered that when people were afraid of getting blamed for
    production failures, the first reaction would be to try to individually fix the
    problem, find who to blame, or conceal the evidence. That always led to a delay
    in finding a solution to the problem. They instituted a *no fngerpointing* rule.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Flickr，他们发现，当人们害怕因生产故障被指责时，第一反应往往是尝试单独修复问题、找出责任人或掩盖证据。这总是导致解决问题的延迟。因此，他们实施了*无指责*规则。
- en: The results were dramatic. Resolution times to fix problems rapidly decreased.
    The focus then shifted from who caused the problem to what the solution was.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是显著的。解决问题的时间迅速减少。焦点从谁造成了问题转移到了什么是解决方案。
- en: The DevOps movement begins
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 运动的开始
- en: The response to Allspaw and Hammond’s talk was swift and impactful. People started
    to look at ways to better align development and operations. Patrick Debois, having
    missed the *O’Reilly Velocity* conference where Allspaw and Hammond gave their
    talk, organized the first *DevOpsDays* conference in Ghent, Belgium to keep the
    conversation happening. The conversation continues and has become a movement through
    successive DevOpsDays conferences, messages on Twitter highlighted with “#DevOps,”
    blogs, and meetups.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 对 Allspaw 和 Hammond 演讲的反应迅速且具有影响力。人们开始寻求更好地对齐开发和运维的方式。Patrick Debois 没有参加 *O'Reilly
    Velocity* 大会，那里 Allspaw 和 Hammond 发表了演讲，他在比利时根特组织了第一次 *DevOpsDays* 大会，继续推动这一对话。这一对话不断发展，并通过后续的
    DevOpsDays 大会、在 Twitter 上以“#DevOps”标记的信息、博客和聚会，成为了一场运动。
- en: The response drives the creation of new tools for version control, change management,
    CI, CD, CM, automated testing, and artifact management. Technology evolves from
    VMs to containers to reduce the differences between development, test, staging,
    and production environments.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这一响应推动了版本控制、变更管理、持续集成（CI）、持续交付（CD）、配置管理（CM）、自动化测试和工件管理等新工具的创造。技术从虚拟机（VM）发展到容器，旨在减少开发、测试、预生产和生产环境之间的差异。
- en: The DevOps movement continues to grow. As with the adoption of Agile, DevOps
    is open to all and decentralized. There is no one way to “do DevOps.” DevOps can
    be applied to environments of any type such as legacy mainframes, physical hardware,
    cloud environments, containers, and Kubernetes clusters. DevOps works in any industry,
    whether finance, manufacturing, or aerospace.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 运动持续增长。与敏捷方法的采用类似，DevOps 是开放的、去中心化的。没有一种“做 DevOps”的方式。DevOps 可以应用于任何类型的环境，如遗留主机、物理硬件、云环境、容器和
    Kubernetes 集群。DevOps 在任何行业中都能发挥作用，无论是金融、制造业还是航空航天。
- en: Since the original talk by Allspaw and Hammond, organizations that have adopted
    DevOps principles and practices have seen incredible gains in deployment frequency,
    while also being able to reduce the probability of production failures and recovery
    times when an errant production failure does occur. According to the 2021 *State
    of DevOps* report, “*elite*” organizations can release on-demand, which may happen
    multiple times a day. This is 973 times more frequent than organizations rated
    as “*low*.” Elite organizations are also a third less likely to release failures
    and are 6,570 times faster at recovering from a failure should it occur.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 Allspaw 和 Hammond 的首次演讲以来，采纳 DevOps 原则和实践的组织在部署频率上取得了惊人的进展，同时还能够减少生产故障的概率，以及发生故障时的恢复时间。根据
    2021 年的 *DevOps 状态* 报告，所谓的“*精英*”组织可以按需发布，这可能一天发生多次。这比那些被评为“*低*”的组织频繁 973 倍。精英组织发布故障的可能性也低了三分之一，且在发生故障时，恢复速度比其他组织快
    6,570 倍。
- en: Some organizations are medium-to-large-sized companies working in industries
    such as finance, aerospace, manufacturing, and insurance. The products they create
    may be systems of systems of systems. They may not know how to incorporate Agile
    and DevOps approaches. For these companies, one framework to consider is the **Scaled
    Agile** **Framework®** (SAFe®).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 一些组织是中型到大型的公司，所在行业包括金融、航空航天、制造业和保险等。他们所创建的产品可能是系统的系统的系统。他们可能不知道如何融入敏捷和DevOps方法。对于这些公司，可以考虑的一种框架是**Scaled
    Agile** **Framework®**（SAFe®）。
- en: Scaling DevOps with SAFe®
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SAFe®扩展DevOps
- en: SAFe® is one of the more popular adopted platforms used to incorporate the Agile
    mindset and practices according to recent *State of Agile* surveys, taken annually.
    As stated on `scaledagileframework.com` by Scaled Agile Inc, the creator and maintainer
    of SAFe®, the framework is “*a knowledge base of proven integrated principles,
    practices, and competencies for achieving business agility using Lean, Agile,*
    *and DevOps*.”
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: SAFe®是根据最近的*敏捷状态*调查（每年进行）采用的较为流行的框架之一，用于融入敏捷思维模式和实践。如`scaledagileframework.com`所述，SAFe®的创建者和维护者Scaled
    Agile Inc表示，该框架是“*一套经过验证的集成原理、实践和能力的知识库，用于通过精益、敏捷和DevOps实现业务敏捷性*。”
- en: 'Organizations can choose to operate in one of four SAFe® configurations. Almost
    all organizations start with a foundational configuration called *Essential SAFe*.
    In Essential SAFe, 5 to 12 teams—each comprised of a Scrum Master, Product Owner,
    and 3 to 9 additional team members—join together to form a *team of teams* called
    an **Agile Release Train** (**ART**). The ART works to develop a product or solution.
    Guiding the work on the ART are three special roles, as outlined here:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 组织可以选择在四种SAFe®配置中运作。几乎所有组织都从一种称为*Essential SAFe*的基础配置开始。在Essential SAFe中，5到12个团队——每个团队由一名Scrum
    Master、产品负责人和3到9名额外成员组成——联合起来形成一个叫做**敏捷发布列车**（**ART**）的*团队中的团队*。ART的工作是开发产品或解决方案。ART的工作由以下三个特殊角色指导：
- en: '**Release Train Engineer** (**RTE**): This is the *Chief Scrum Master* of the
    ART. The RTE acts to remove impediments, facilitate ART events, and ensure that
    the train is executing.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布列车工程师**（**RTE**）：这是ART的*首席Scrum Master*。RTE负责移除障碍、促进ART事件，并确保列车顺利运行。'
- en: '**Product Management** (**PM**): PM is responsible for guiding the evolution
    of the product by creating and maintaining a product vision and guiding the creation
    of features that go in a prioritized program backlog.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品管理**（**PM**）：PM负责通过创建和维护产品愿景来引导产品的演变，并引导创建优先级程序待办事项中的功能。'
- en: '**System Architect** (**SA**): The SA maintains the architecture of the product
    by creating architectural work called enablers. They act as the focal point for
    teams on the ART in terms of balancing emergent design from the teams with the
    intentional architecture beginnings of the product.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统架构师**（**SA**）：SA通过创建称为“启用器”的架构工作来维护产品的架构。他们是ART中团队平衡团队的渐进设计与产品初期的有意架构之间的焦点。'
- en: 'The following diagram illustrates an ART and the roles within it:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了一个ART及其内部角色：
- en: '![Figure 1.4 – An ART with main roles](img/B18756_01_04.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – 一个包含主要角色的ART](img/B18756_01_04.jpg)'
- en: Figure 1.4 – An ART with main roles
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 一个包含主要角色的ART
- en: 'Just as with stories, the work a team performs is timeboxed on a Scrum team,
    and the work of an ART is timeboxed as well. Features should be completed within
    a **Program Increment** (**PI**), which is a period of time between 8 to 12 weeks.
    The PI is a grouping of sprints where teams in the ART perform by breaking down
    features into stories and delivering those stories, sprint after sprint in the
    PI. You can see an illustration of this in the following diagram:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 就像故事一样，Scrum团队的工作是有时间限制的，ART的工作也是有时间限制的。功能应在**程序增量**（**PI**）内完成，PI是一个持续8到12周的时间段。PI是多个冲刺的组合，ART中的团队通过将功能分解为故事并在PI中一个接一个地交付这些故事来进行工作。你可以在以下图示中看到这一点：
- en: '![Figure 1.5 – A 10-week PI with five iterations (sprints)](img/B18756_01_05.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – 一个包含五次迭代（冲刺）的10周PI](img/B18756_01_05.jpg)'
- en: Figure 1.5 – A 10-week PI with five iterations (sprints)
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 一个包含五次迭代（冲刺）的10周PI
- en: 'It is against this backdrop of Essential SAFe and the ART that we apply DevOps.
    ARTs look at adopting the same practices that Allspaw and Hammond mentioned in
    their talk in 2009, as well as newer practices that have emerged since then. This
    book will cover the approach to DevOps as outlined in the SAFe. The aspects of
    this include the following:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在Essential SAFe和ART的背景下，我们应用DevOps。ARTs着眼于采用Allspaw和Hammond在2009年演讲中提到的相同实践，以及自那时以来出现的新实践。本书将介绍SAFe中概述的DevOps方法，其中包括以下几个方面：
- en: Modeling the DevOps approach using **Culture, Automation, Lean Flow, Measurement,
    and** **Recovery** (**CALMR**)
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**文化、自动化、精益流、度量和** **恢复**（**CALMR**）来建模DevOps方法
- en: Setting up and maintaining value streams
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置和维护价值流
- en: Applying the **CD** pipeline against the value stream
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**CD**流水线应用于价值流
- en: Including built-in quality and security in the process
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在流程中包括内建的质量和安全性
- en: Looking at CALMR
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看CALMR
- en: 'After Allspaw and Hammond’s talk, people tried to organize the practices mentioned
    and create a model that would exemplify the DevOps approach. During *DevOpsDays
    2010*, John Willis and Damon Edwards coined a **CAMS** approach, where each letter
    signified a significant factor or *pillar* to DevOps. The letters, and the factors
    they represent, are set out here:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在Allspaw和Hammond的演讲之后，人们尝试组织所提到的实践，并创建一个模型来体现DevOps方法。在*DevOpsDays 2010*上，John
    Willis和Damon Edwards提出了**CAMS**方法，其中每个字母代表DevOps的一个重要因素或*支柱*。这些字母及其代表的因素如下：
- en: (**C**)ulture
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (**C**)文化
- en: (**A**)utomation
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (**A**)自动化
- en: (**M**)easurement
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (**M**)度量
- en: (**S**)haring
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (**S**)共享
- en: Later, Jez Humble added an **L**, for **Lean Flow**, to evolve this to the **CALMS**
    approach.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 后来，Jez Humble 在此基础上增加了一个**L**，代表**精益流**，以发展为**CALMS**方法。
- en: 'Scaled Agile, realizing that the desired culture would have **Sharing** as
    a key component, removed the **S** from its model, and replaced it with an **R**,
    for **Recovery**. The **CALMR** model can be summarized as such:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在认识到所期望的文化中，**共享**是一个关键组成部分后，Scaled Agile从其模型中移除了**S**，并用**R**替换，代表**恢复**。**CALMR**模型可以总结如下：
- en: '**Culture**: Create a culture of shared responsibility among all groups (development,
    operations, security, business, and others).'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文化**：在所有团队之间创建共同责任的文化（包括开发、运维、安全、业务等团队）。'
- en: '**Automation**: Leverage automation as much as you can on your Continuous Delivery
    Pipeline.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化**：在持续交付流水线中尽可能多地利用自动化。'
- en: '**Lean Flow**: Work with small batch sizes, visualize all your work, and avoid
    too much **Work in** **Progress** (**WIP**).'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**精益流**：使用小批量工作，视觉化所有工作，避免过多的**进行中工作**（**WIP**）。'
- en: '**Measurement**: Measure your flow, your quality, and your performance in all
    environments, and whether you are achieving value.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**度量**：在所有环境中衡量你的流动、质量和性能，并评估是否达到了预期的价值。'
- en: '**Recovery**: Create low-risk releases. Devote energy to preparing how to recover
    from failure.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恢复**：创建低风险的发布版本。投入精力准备如何从失败中恢复。'
- en: '*Part 1: Approach – A Look at SAFe® and DevOps through CALMR* will examine
    each factor of the CALMR approach and see how the teams and the entire ART use
    values, principles, and practices to implement these factors.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '*第1部分：方法——通过CALMR观察SAFe®和DevOps*将考察CALMR方法中的每个因素，了解团队和整个ART如何运用价值观、原则和实践来实现这些因素。'
- en: Mapping your value stream
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制你的价值流图
- en: Value streams are a concept from Lean manufacturing where you look at the holistic
    process of creating a product from initial conception to delivery. For a value
    stream, you evaluate the steps needed in the process and the people and resources
    involved at each step. Each step in the process has its lead time (time waiting
    before the step can begin) and its cycle time (time spent on each step).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 价值流是精益制造中的一个概念，它关注从产品的初始构想到交付的整体过程。在价值流中，你评估整个过程所需的步骤，以及每个步骤中涉及的人员和资源。每个过程步骤都有其前置时间（步骤开始前的等待时间）和周期时间（每个步骤的时间消耗）。
- en: The first part of organizing value streams is to identify the present state
    of the value stream. Each step—as well as the people, resources, and lead and
    cycle times—is determined to identify and map the entire value stream. After this
    identification, questions are raised on solutions that can be employed to reduce
    time through the Value Stream steps.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 组织价值流的第一步是识别价值流的当前状态。每个步骤——以及相关的人员、资源、前置时间和周期时间——都需要被确定，以便识别和绘制整个价值流图。完成此识别后，会提出一系列问题，探讨可以采用的解决方案，以减少在价值流步骤中的时间。
- en: After the initial identification, the next step is to identify and amplify the
    feedback loops that each step may require. Metrics play a valuable part here to
    see whether the value stream, as realized by an ART, is executing its process,
    whether a solution under development has problems in any environment, and whether
    a solution is delivering its promised value.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在初步识别后，下一步是识别并放大每个步骤可能需要的反馈循环。度量在这里起着重要作用，可以帮助判断由 ART 实现的价值流是否在执行其过程，正在开发的解决方案在任何环境下是否存在问题，以及解决方案是否交付了承诺的价值。
- en: At this point, taking the first step of value-stream identification and mapping
    and the second step of finding feedback for each step yields the third step of
    value-stream management. During the initial value-stream mapping exercise, a potential
    “future state” or optimized value stream may be identified. It’s up to the ART
    to make incremental changes to obtain this optimal value stream. Only by adopting
    an attitude of continuous learning and working toward continuous improvement can
    they do that.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，采取价值流识别和映射的第一步，以及为每个步骤寻找反馈的第二步，最终得出了第三步——价值流管理。在初步的价值流映射过程中，可能会识别出一个潜在的“未来状态”或优化后的价值流。由
    ART 来进行增量式变更以实现这个最优的价值流。只有通过持续学习的态度，并不断朝着持续改进的方向努力，他们才能做到这一点。
- en: '*Part 2: Implement – Moving towards Value Streams* dives into the three ways
    of doing value-stream management, modeled after the *Three Ways* identified in
    *The Phoenix Project*. We will examine the steps to identify a value stream and
    map an initial and potential future value stream. We will see how metrics form
    feedback loops for steps in the value stream. Finally, we will evaluate tools
    and techniques from Lean thinking to improve the value stream in the context of
    Continuous Improvement.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '*第二部分：实施 – 向价值流迈进* 详细介绍了三种价值流管理方法，这些方法借鉴了《凤凰项目》中的*三种方法*。我们将探讨识别价值流并绘制初步和潜在未来价值流的步骤。我们还将看到度量如何为价值流中的每个步骤形成反馈循环。最后，我们将评估来自精益思维的工具和技术，以便在持续改进的背景下改进价值流。'
- en: Running your value stream through the Continuous Delivery Pipeline
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过持续交付管道运行你的价值流
- en: 'A Continuous Delivery Pipeline is the implementation of the value stream for
    an ART. It marries the people and their functions, with the process of delivering
    products from initial concept to release, and includes the tools to automate tasks,
    mostly in the form of a CI/CD pipeline. In SAFe, the Continuous Delivery Pipeline
    is divided up into four aspects. Each aspect is run concurrently by members of
    the ART throughout each PI, as illustrated in the following diagram:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付管道是 ART 实现价值流的方式。它将人及其职能与从初步构想到发布的产品交付过程相结合，并包括用于自动化任务的工具，通常以 CI/CD 管道的形式存在。在
    SAFe 中，持续交付管道被分为四个方面。每个方面由 ART 成员在每个 PI 中并行执行，如下图所示：
- en: '![Figure 1.6 – The Continuous Delivery Pipeline](img/B18756_01_06.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – 持续交付管道](img/B18756_01_06.jpg)'
- en: Figure 1.6 – The Continuous Delivery Pipeline
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – 持续交付管道
- en: The first phase is **Continuous Exploration** (**CE**). In this phase, PM works
    with customers, stakeholders, UX, the SA, and other groups such as compliance
    and security to determine upcoming features based on hypotheses of benefits to
    the customer that will show real value. These features are examined to determine
    feasibility and what, if any, changes to the architecture are required to meet
    **Non-Functional Requirements** (**NFRs**) such as security, reliability, performance,
    and compliance. After this definition and refinement, the feature is placed in
    the Program Backlog and prioritized for inclusion in an upcoming PI.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 第一阶段是**持续探索**（**CE**）。在这个阶段，PM 与客户、利益相关者、UX、SA 以及合规性和安全等其他小组合作，基于对客户带来真实价值的假设来确定即将推出的功能。这些功能将被检查以确定可行性，以及是否需要对架构进行任何更改，以满足**非功能性需求**（**NFRs**），如安全性、可靠性、性能和合规性。在定义和完善后，该功能将被放入项目待办列表，并优先考虑纳入即将到来的
    PI 中。
- en: 'During the execution of a PI, development teams will incorporate the second
    phase of the Continuous Delivery Pipeline: **CI**. Once code changes have entered
    version control, the CI/CD pipeline comes into play. The pipeline may run several
    layers of testing, including linting to examine code quality and unit testing
    to examine proper functionality. If the tests pass, the code changes may be merged
    into a higher-level branch and a package created. That package may undergo additional
    testing to validate the correct behavior of the system. Passing that testing,
    the package that includes changes may be deployed—automatically, if possible—into
    a staging environment that resembles production.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行 PI 的过程中，开发团队将纳入持续交付流水线的第二阶段：**CI**。一旦代码更改进入版本控制，CI/CD 流水线就会启动。流水线可能会进行多层测试，包括代码质量检查（linting）和功能单元测试。如果测试通过，代码更改可能会合并到更高层级的分支，并创建一个软件包。该软件包可能会经过额外的测试，以验证系统行为是否正确。通过测试后，包含更改的包可能会被部署——如果可能的话，自动部署——到一个类似生产环境的暂存环境中。
- en: Depending on the organization, the third stage, **CD**, may be automated and
    take over. Deployment of the package created in the CI phase may be performed
    automatically in the production environment. Feature flags may prevent changes
    from being released as testing continues to ensure the changes will work with
    existing functionality and in the production environment. Measurements continue
    to be taken in the production environment by continuous monitoring to verify proper
    operation and response to problems in production happen here.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 根据组织的不同，第三阶段 **CD** 可能会实现自动化并接管。CI 阶段创建的软件包可能会在生产环境中自动部署。功能标志可能会防止更改被发布，直到继续进行测试以确保这些更改与现有功能以及生产环境兼容。在生产环境中，持续监控会持续进行，以验证系统是否正常运行，并在出现问题时进行响应。
- en: Finally, in the fourth phase, **Release on Demand**, the new feature is enabled,
    allowing customers to take advantage of the changes. The production environment
    continues to be monitored for adverse effects, and the ART continues to respond
    to any deployment failures that happen. Measurement here includes the evaluation
    of leading indicator metrics to evaluate the amount of value truly delivered by
    the new feature and whether the initial hypothesis is true or false. Finally,
    the ART reflects and applies lessons learned to improve both the Continuous Delivery
    Pipeline, and the value stream.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在第四阶段，**按需发布**，新功能会被启用，允许客户利用这些更改。生产环境会继续监控是否有不良影响，ART 也会继续响应任何发生的部署失败。这里的衡量标准包括评估前瞻性指标，以评估新功能所带来的实际价值，并验证最初的假设是否成立。最后，ART
    会反思并应用学到的经验教训，以改进持续交付流水线和价值流。
- en: 'We will examine all four stages of the Continuous Delivery Pipeline in *Part
    3: Optimize – Enabling a Continuous Delivery Pipeline*. We will examine the people
    and processes that happen with CE. We will investigate the tools and technologies
    that make up CI and CD. Finally, we will see how Release on Demand closes the
    loop for our ART in delivering value to our customers.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在*第 3 部分：优化——启用持续交付流水线*中，深入探讨持续交付流水线的所有四个阶段。我们将研究与 CE 相关的人员和流程。我们将调查构成 CI
    和 CD 的工具与技术。最后，我们将了解如何通过按需发布来闭环 ART，为客户提供价值。
- en: Including security in the process
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在过程中包括安全性
- en: There is a growing realization that collaborating with and involving other groups
    in the organization can improve product quality and speed up product development.
    One such group collaborating with development and operations is security.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 人们越来越意识到，与组织中其他团队的合作和参与可以提高产品质量并加速产品开发。与开发和运维团队合作的一个团队就是安全团队。
- en: '**DevSecOps** is a growing trend in DevOps circles where information security
    practices are folded in throughout the continuous delivery process. In SAFe, we
    include the information security practices espoused by DevSecOps so that security
    is not considered an afterthought.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '**DevSecOps** 是 DevOps 领域中日益增长的趋势，信息安全实践在整个持续交付过程中得到融合。在 SAFe 中，我们包括了 DevSecOps
    提倡的信息安全实践，以确保安全性不会成为事后的考虑。'
- en: Throughout *Parts 1 to 3*, you will see where security has active involvement
    and where continuous testing is performed so that solutions comply with any approvals
    that are mandated at the end of development. These secure solutions have long
    been incorporated into product design, development, and deployment.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第 1 到第 3 部分*中，你将看到安全在其中的积极参与，以及持续测试的执行，以确保解决方案符合开发结束时必须经过的任何批准。这些安全解决方案早已融入到产品设计、开发和部署中。
- en: Summary
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the problems many organizations face when developing
    products today. We saw how the modern pressures of faster TTM, changing requirements
    and unknown customer desires, and problems in production deployments wear out
    both the development and operations groups. We also looked at the responses that
    development and operations groups have created.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了许多组织在今天开发产品时所面临的问题。我们看到了现代快速市场推出（TTM）、不断变化的需求和未知的客户需求、以及生产部署中的问题如何使开发和运维团队疲惫不堪。我们还讨论了开发和运维团队所提出的应对策略。
- en: Development began to look at incorporating an Agile mindset to allow for quick,
    frequent releases of small increments of value that would allow customer feedback
    to drive the next development increment. This outlook required an examination
    of values and principles to change the mindset as well as the incorporation of
    Lean thinking from the manufacturing world.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 开发开始着眼于将敏捷思维融入其中，以实现快速、频繁发布小幅增量的价值，并通过客户反馈驱动下一个开发增量。这一思路要求审视价值和原则，改变思维方式，同时引入制造业中的精益思想。
- en: As development began to reap the benefits of the change to an Agile mindset
    and incorporate Agile practices, the bottlenecks for the release of new products
    and new functionality fell to operations—those that maintained the existing production
    environment. A new way of working together, the DevOps movement, sought to tear
    down the walls of confusion between development and operations through the application
    of tools and technology and by setting up a culture based on respect, trust, empathy,
    and transparency.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 随着开发开始收获敏捷思维转变的好处，并融入敏捷实践，发布新产品和新功能的瓶颈转向了运维——即那些维护现有生产环境的人。DevOps 运动作为一种新的协作方式，旨在通过工具和技术的应用、以及建立基于尊重、信任、同理心和透明度的文化，打破开发与运维之间的困惑壁垒。
- en: One approach that incorporates DevOps principles and practices in development
    is SAFe. DevOps using SAFe is employed for a *team of teams* or an ART. The ART
    embraces DevOps by adopting the CALMR model. The team identifies the way it works
    and maps that as a value stream. Finally, it employs a Continuous Delivery Pipeline
    to deliver its work to production, measure its worth, and improve the value stream.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 一种将 DevOps 原则和实践融入开发的方式是 SAFe。使用 SAFe 的 DevOps 适用于*团队中的团队*或 ART。ART 通过采纳 CALMR
    模型来拥抱 DevOps。团队识别其工作方式，并将其映射为价值流。最后，它使用持续交付流水线将工作交付到生产环境，衡量其价值，并改进价值流。
- en: 'In our next chapter, we will begin our examination of the CALMR approach by
    looking at the first and most key factor: culture.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始审视 CALMR 方法，首先探讨最关键的因素：文化。
- en: Questions
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Test your knowledge of the concepts in this chapter by answering these questions.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答这些问题来测试你对本章概念的理解。
- en: What does the M stand for in CALMR?
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CALMR 中的 M 代表什么？
- en: Monitoring
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监控
- en: Multitasking
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多任务处理
- en: Measurement
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 衡量
- en: Mission
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使命
- en: Which are phases in the Continuous Delivery Pipeline (pick two)?
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在持续交付流水线中，哪些是阶段？（选择两个）
- en: Continuous Improvement
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续改进
- en: Release on Time
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准时发布
- en: Continuous Exploration
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续探索
- en: Release on Demand
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按需发布
- en: Continuous Delivery
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续交付
- en: What kind of culture is important in CALMR?
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 CALMR 中，哪种文化很重要？
- en: Independent
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 独立
- en: Shared responsibility
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 共享责任
- en: Bureaucratic
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 官僚主义
- en: Open
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开放
- en: What has been the traditional focus for operations?
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运维的传统关注点是什么？
- en: Revenue
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收入
- en: Stability
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 稳定性
- en: Velocity
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 速度
- en: Compliance
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 合规性
- en: Which term describes incorporating information security practices in CD?
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个术语描述了将信息安全实践融入持续交付（CD）？
- en: SecureOps
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安全运维
- en: DevSecurity
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发安全
- en: DevSecOps
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: DevSecOps
- en: OpSec
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安全操作
- en: Further reading
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'For more information, refer to the following resources:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请参阅以下资源：
- en: '[https://leadinganswers.typepad.com/leading_answers/files/original_waterfall_paper_winston_royce.pdf](https://leadinganswers.typepad.com/leading_answers/files/original_waterfall_paper_winston_royce.pdf)—The
    original paper by Winston W. Royce diagramming what has come to be known as the
    Waterfall method. Note that in the paper, he advocates alternate paths to allow
    for additional testing and customer feedback.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://agilemanifesto.org](https://agilemanifesto.org)—Manifesto for Agile
    Software Development, or quite simply, the Agile Manifesto.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Lean Software Development: An Agile Toolkit* by *Mary Poppendieck and* *Tom
    Poppendieck*.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Kanban: Successful Evolutionary Change for Your Technology Business* by *David*
    *J. Anderson*.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/watch?v=LdOe18KhtT4](https://www.youtube.com/watch?v=LdOe18KhtT4)—A
    recording of the *10+ Deploys Per Day: Dev and Ops Cooperation at Flickr* talk
    given by John Allspaw and Paul Hammond at the 2009 *O’Reilly Velocity* conference
    that ushered in the DevOps movement.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://cloud.google.com/blog/products/devops-sre/announcing-dora-2021-accelerate-state-of-devops-report](https://cloud.google.com/blog/products/devops-sre/announcing-dora-2021-accelerate-state-of-devops-report)—Findings
    from the *2021 Accelerate State of* *DevOps* report.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Part 1 Approach – A Look at DevOps and SAFe® through CALMR
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A year after the Flickr presentation at the O’Reilly Velocity conference and
    the initial DevOpsDays conference, John Willis and Damon Edwards tried to define
    the important elements of this new movement called DevOps at the 2010 DevOpsDays
    conference. They eventually settled on **Culture, Automation, Measuring, and**
    **Sharing** (**CAMS**).
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: CAMS remained the approach to DevOps until Jez Humble decided that a Lean Flow
    was also essential to DevOps and needed to be added to the model. CAMS then became
    CALMS.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: 'Scaled Agile incorporated DevOps into the Scaled Agile Framework® in 2018\.
    When they did this, they evaluated the current CALMS model and made a realization:
    sharing is an important part of culture. By establishing that the Culture was
    one of shared responsibility, it defined the kind of Culture needed for DevOps.
    It also allowed Recovery to be added to the model, which became CALMR.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: In *Part 1*, we will examine Scaled Agile’s CALMR approach to DevOps. We will
    examine what characteristics form a Culture of Shared Responsibility. We will
    then examine the kinds of technology used for automation and who is responsible
    for setting them up. We will look at how a Lean Flow allows us to deploy quickly
    and with a high level of quality. We will then look at ensuring quality and security
    by continuously measuring the progress, correctness, and value of the product
    under development. Finally, we will look at preventing production failures and
    what corrective measures we can take if a production failure does occur.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: 'This part of the book comprises the following chapters:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B18756_02.xhtml#_idTextAnchor040), *Culture of Shared Responsibility*'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第二章*](B18756_02.xhtml#_idTextAnchor040), *共享责任文化*'
- en: '[*Chapter 3*](B18756_03.xhtml#_idTextAnchor066), *Automation for Efficiency
    and Quality*'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第三章*](B18756_03.xhtml#_idTextAnchor066), *提高效率和质量的自动化*'
- en: '[*Chapter 4*](B18756_04.xhtml#_idTextAnchor086), *Leveraging Lean Flow to Keep
    the Work Moving*'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第四章*](B18756_04.xhtml#_idTextAnchor086), *利用精益流动保持工作进展*'
- en: '[*Chapter 5*](B18756_05.xhtml#_idTextAnchor114), *Measuring the Process and
    Solution*'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第五章*](B18756_05.xhtml#_idTextAnchor114), *衡量过程和解决方案*'
- en: '[*Chapter 6*](B18756_06.xhtml#_idTextAnchor138), *Recovering from Production
    Failures*'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第六章*](B18756_06.xhtml#_idTextAnchor138), *从生产故障中恢复*'
