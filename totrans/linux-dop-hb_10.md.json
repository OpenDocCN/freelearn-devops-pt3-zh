["```\n{\n    “Version”: “2012-10-17”,\n    “Statement”: [\n        {\n            “Sid”: “CloudWatchLogsPermissions”,\n            “Effect”: “Allow”,\n            “Action”: [\n                “logs:CreateLogStream”,\n                “logs:CreateLogGroup”,\n                “logs:PutLogEvents”\n            ],\n            “Resource”: “arn:aws:logs:*:*:*”\n        },\n        {\n            “Sid”: “CloudWatchMetricsPermissions”,\n            “Effect”: “Allow”,\n            “Action”: [\n                “cloudwatch:PutMetricData”\n            ],\n            “Resource”: “*”\n        }\n    ]\n}\n```", "```\n{\n  “Version”: “2012-10-17”,\n  “Statement”: [\n    {\n      “Effect”: “Allow”,\n      “Principal”: { “Service”: “ec2.amazonaws.com”},\n      “Action”: “sts:AssumeRole”\n    }\n  ]\n}\n```", "```\nadmin@myhome:~$ aws iam create-instance-profile --instance-profile-name DefaultInstanceProfile\n{\n    “InstanceProfile”: {\n        “Path”: “/”,\n        “InstanceProfileName”: “DefaultInstanceProfile”,\n        “InstanceProfileId”: “AIPAZZUIKRXR3HEDBS72R”,\n        “Arn”: “arn:aws:iam::673522028003:instance-profile/DefaultInstanceProfile”,\n        “CreateDate”: “2023-03-07T10:59:01+00:00”,\n        “Roles”: []\n    }\n}\n```", "```\nadmin@myhome:~$ aws iam create-role --role-name DefaultInstanceProfile --assume-role-policy-document file://trust-policy.json\n{\n    “Role”: {\n        “Path”: “/”,\n        “RoleName”: “DefaultInstanceProfile”,\n        “RoleId”: “AROAZZUIKRXRYB6HO35BL”,\n        “Arn”: “arn:aws:iam::673522028003:role/DefaultInstanceProfile”,\n        “CreateDate”: “2023-03-07T11:13:54+00:00”,\n        “AssumeRolePolicyDocument”: {\n            “Version”: “2012-10-17”,\n            “Statement”: [\n                {\n                    “Effect”: “Allow”,\n                    “Principal”: {\n                        “Service”: “ec2.amazonaws.com”\n                    },\n                    “Action”: “sts:AssumeRole”\n                }\n            ]\n        }\n    }\n}\n```", "```\nadmin@myhome:~$ aws iam add-role-to-instance-profile --role-name DefaultInstanceProfile --instance-profile-name DefaultInstanceProfile\n```", "```\nadmin@myhome:~$ aws iam put-role-policy --policy-name DefaultInstanceProfilePolicy --role-name DefaultInstanceProfile --policy-document file://policy.json\n```", "```\n    admin@myhome:~$ aws ec2 describe-vpcs --filters     “Name=isDefault,Values=true” --query “Vpcs[0].VpcId” --output text\n    vpc-0030a3a495df38a0e\n```", "```\n    admin@myhome:~$ aws ec2 describe-subnets --filters     “Name=vpc-id,Values=vpc-0030a3a495df38a0e”     “Name=map-public-ip-on-launch,Values=true” --query     “Subnets[0].SubnetId” --output text     subnet-0704b611fe8a6a169\n```", "```\n    admin@myhome:~$ aws ec2 describe-images --owners     099720109477 --filters “Name=name,Values=*ubuntu/images/    hvm-ssd/ubuntu-focal-20.04*” “Name=state,Values=available”    “Name=architecture,Values=x86_64” --query “reverse(sort_by(Images,    &CreationDate))[:1].ImageId” --output text\n    ami-0a3823a4502bba678\n```", "```\nadmin@myhome:~$ aws ec2 import-key-pair --key-name admin-key --public-key-material fileb://home/admin/.ssh/admin-key.pub\n{\n    “KeyFingerprint”: “12:97:23:0f:d6:2f:2b:28:4d:a0:ad:62:a7:20:e3:f8”,\n    “KeyName”: “admin-key”,\n    “KeyPairId”: “key-0831b2bc5c2a08d82”\n}\n```", "```\nadmin@myhome:~$ aws ec2 run-instances --image-id ami-0abbe417ed83c0b29 --count 1 --instance-type t2.micro --key-name admin-key --subnet-id subnet-0704b611fe8a6a169 --associate-public-ip-address --iam-instance-profile Name=DefaultInstanceProfile\n{\n    “Groups”: [],\n    “Instances”: [\n        {\n            “AmiLaunchIndex”: 0,\n            “ImageId”: “ami-0abbe417ed83c0b29”,\n            “InstanceId”: “i-06f35cbb39f6e5cdb”,\n            “InstanceType”: “t2.micro”,\n            “KeyName”: “admin-key”,\n            “LaunchTime”: “2023-03-08T14:12:00+00:00”,\n            “Monitoring”: {\n                “State”: “disabled”\n            },\n            “Placement”: {\n                “AvailabilityZone”: “eu-central-1a”,\n                “GroupName”: “”,\n                “Tenancy”: “default”\n            },\n            “PrivateDnsName”: “ip-172-31-17-127.eu-central-1.compute.internal”,\n            “PrivateIpAddress”: “172.31.17.127”,\n            “ProductCodes”: [],\n            “PublicDnsName”: “”,\n            “State”: {\n                “Code”: 0,\n                “Name”: “pending”\n            },\n            “StateTransitionReason”: “”,\n            “SubnetId”: “subnet-0704b611fe8a6a169”,\n            “VpcId”: “vpc-0030a3a495df38a0e”,\n            “Architecture”: “x86_64”,\n            “BlockDeviceMappings”: [],\n            “ClientToken”: “5e4a0dd0-665b-4878-b852-0a6ff21c09d3”,\n            “EbsOptimized”: false,\n            “EnaSupport”: true,\n            “Hypervisor”: “xen”,\n            “IamInstanceProfile”: {\n                “Arn”: “arn:aws:iam::673522028003:instance-profile/DefaultInstanceProfile”,\n                “Id”: “AIPAZZUIKRXR3HEDBS72R”\n            },\n# output cut for readability\n```", "```\nadmin@myhome:~$ aws ec2 create-security-group --group-name ssh-access-sg --description “Security group for SSH access” --vpc-id vpc-0030a3a495df38a0e\n{\n    “GroupId”: “sg-076f8fad4e60192d8”\n}\n```", "```\nadmin@myhome:~$ aws ec2 authorize-security-group-ingress --group-id sg-076f8fad4e60192d8 --protocol tcp --port 22 --cidr 0.0.0.0/0\n{\n    “Return”: true,\n    “SecurityGroupRules”: [\n        {\n            “SecurityGroupRuleId”: “sgr-0f3b4be7d2b01a7f6”,\n            “GroupId”: “sg-076f8fad4e60192d8”,\n            “GroupOwnerId”: “673522028003”,\n            “IsEgress”: false,\n            “IpProtocol”: “tcp”,\n            “FromPort”: 22,\n            “ToPort”: 22,\n            “CidrIpv4”: “0.0.0.0/0”\n        }\n    ]\n}\n```", "```\nadmin@myhome:~$ aws ec2 modify-instance-attribute --instance-id i-06f35cbb39f6e5cdb --groups  sg-076f8fad4e60192d8\n```", "```\nadmin@myhome:~$ ssh -i ~/.ssh/admin-key ubuntu@3.121.74.46\nubuntu@ip-172-31-17-127:~$ wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb\nubuntu@ip-172-31-17-127:~$ sudo dpkg -i -E ./amazon-cloudwatch-agent.deb\n```", "```\nubuntu@ip-172-31-17-127:~$ sudo -i\nroot@ip-172-31-17-127:~# /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard\n================================================================\n= Welcome to the Amazon CloudWatch Agent Configuration Manager =\n=                                                              =\n= CloudWatch Agent allows you to collect metrics and logs from =\n= your host and send them to CloudWatch. Additional CloudWatch =\n= charges may apply.                                           =\n================================================================\nOn which OS are you planning to use the agent?\n1\\. linux\n2\\. windows\n3\\. darwin\ndefault choice: [1]:\n```", "```\nDo you want to monitor metrics from CollectD? WARNING: CollectD must be installed or the Agent will fail to start\n1\\. yes\n2\\. no\ndefault choice: [1]:\n```", "```\nroot@ip-172-31-17-127:~# apt install -y collectd\n```", "```\nDo you want to monitor any log files?\n1\\. yes\n2\\. no\ndefault choice: [1]:\n2\n```", "```\nDo you want to store the config in the SSM parameter store?\n1\\. yes\n2\\. no\ndefault choice: [1]:\n2\nProgram exits now.\n```", "```\nroot@ip-172-31-17-127:~# /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json\nroot@ip-172-31-17-127:~# systemctl status amazon-cloudwatch-agent\namazon-cloudwatch-agent.service - Amazon CloudWatch Agent\n     Loaded: loaded (/etc/systemd/system/amazon-cloudwatch-agent.service; enabled; vendor preset: enabled)\n     Active: active (running) since Wed 2023-03-08 15:00:30 UTC; 4min 54s ago\n   Main PID: 20130 (amazon-cloudwat)\n      Tasks: 6 (limit: 1141)\n     Memory: 14.3M\n     CGroup: /system.slice/amazon-cloudwatch-agent.service\n             └─20130 /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent -config /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.toml -envconfig /opt/aws/amazon-cloudwatch-agent/e>\nMar 08 15:00:30 ip-172-31-17-127 systemd[1]: Started Amazon CloudWatch Agent.\nMar 08 15:00:30 ip-172-31-17-127 start-amazon-cloudwatch-agent[20130]: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json does not exist or cannot read. Skipping it.\nMar 08 15:00:30 ip-172-31-17-127 start-amazon-cloudwatch-agent[20130]: I! Detecting run_as_user...\n```", "```\nfrom flask import Flask\napp = Flask(__name__)\n@app.route(‘/’)\ndef hello_world():\n    return ‘Hello World!’\nif __name__ == ‘__main__’:\n    app.run()\n```", "```\nfrom aws_xray_sdk.core import xray_recorder\nfrom aws_xray_sdk.ext.flask.middleware import XRayMiddleware\nxray_recorder.configure(service=’FlaskHelloWorldApp’)\napp = Flask(__name__)\nXRayMiddleware(app, xray_recorder)\n```", "```\n$ pip install prometheus_client\n```", "```\nfrom flask import Flask\nfrom prometheus_client import Counter, Histogram, start_http_server\napp = Flask(__name__)\n# Define Prometheus metrics\nREQUEST_COUNT = Counter(‘hello_world_request_count’, ‘Hello World Request Count’)\nREQUEST_LATENCY = Histogram(‘hello_world_request_latency_seconds’, ‘Hello World Request Latency’,\n                            bins=[0.1, 0.2, 0.5, 1.0, 5.0, 10.0, 30.0, 60.0])\n# Instrument Flask routes with Prometheus metrics\n@app.route(‘/’)\n@REQUEST_LATENCY.time()\ndef hello():\n    REQUEST_COUNT.inc()\n    return “Hello World!”\n# Start the Prometheus server on port 8000\nif __name__ == ‘__main__’:\n    start_http_server(8000)\n    app.run(debug=True)\n```"]