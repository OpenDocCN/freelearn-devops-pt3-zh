- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Getting the Ball Rolling with Kubernetes and the Top Three Cloud Platforms
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Kubernetes 和三大云平台快速入门
- en: When starting your Kubernetes journey, the typical first step is to create a
    Kubernetes cluster to work with. The reason why is that if you, for example, start
    by creating a Kubernetes Manifest (more on this in later chapters), you’ll have
    nowhere to deploy the Manifest to because you don’t have a Kubernetes cluster.
    The other reality when it comes to Kubernetes is there’s a ton of cloud-native
    operations management – things such as monitoring a cluster, automating the deployment
    of a cluster, and scaling a cluster. Because of that, understanding cluster creation
    is a crucial step in your Kubernetes journey.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始你的 Kubernetes 之旅时，典型的第一步是创建一个 Kubernetes 集群。原因是，如果你从创建 Kubernetes Manifest（后续章节会详细介绍）开始，你将没有地方可以部署该
    Manifest，因为你没有 Kubernetes 集群。另一点是，Kubernetes 需要大量的云原生运维管理 – 比如监控集群、自动化部署集群和扩展集群等。因此，理解集群创建是
    Kubernetes 之旅中至关重要的一步。
- en: In the previous chapter, you learned not only about why Kubernetes is important
    but also the backstory of why engineers want to use orchestration in today’s world.
    In this chapter, you’re going to hit the ground running by creating and managing
    your very own Kubernetes clusters in the three major clouds – Azure, **Amazon
    Web Services** (**AWS**), and **Google Cloud** **Platform** (**GCP**).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你不仅了解了 Kubernetes 为什么如此重要，还了解了为什么工程师在当今世界中想要使用容器编排技术。在本章中，你将通过在三大云平台上创建和管理你自己的
    Kubernetes 集群，迅速上手 – 包括 Azure、**Amazon Web Services**（**AWS**）和 **Google Cloud
    Platform**（**GCP**）。
- en: By the end of this chapter, you’ll be able to fully create, deploy, manage,
    and automate Kubernetes clusters running in the three major clouds. The skills
    that you will pick up from this chapter will also translate across other Kubernetes
    cluster deployments. For example, you’ll be using Terraform to automate the Kubernetes
    cluster creation, and you can use Terraform to deploy Kubernetes clusters in other
    clouds and on-premises environments.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够在三大云平台中完全创建、部署、管理和自动化 Kubernetes 集群。你在本章中学到的技能还可以应用到其他 Kubernetes
    集群部署中。例如，你将使用 Terraform 自动化 Kubernetes 集群的创建，并且可以使用 Terraform 在其他云平台和本地环境中部署 Kubernetes
    集群。
- en: 'In this chapter, we’re going to cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Azure Kubernetes Service
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Kubernetes Service
- en: AWS EKS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS EKS
- en: GKE
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GKE
- en: With each of the topics, you’ll learn how to properly run them in a production-level
    environment. Throughout the rest of the chapter, you’ll be working in depth with
    various amounts of hands-on-driven labs, creating resources automatically and
    manually.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个主题中，你将学习如何在生产环境中正确运行它们。在本章的其余部分，你将深入参与多个以实践为主的实验室，自动化和手动创建资源。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For the purpose of this chapter, you should already know how to navigate through
    each cloud portal and have a general understanding of how you can automate the
    creation of cloud infrastructure. Although it would be great to dive into those
    topics in this book, these topics are huge and there are whole books out there
    dedicated just to them. Because of that, you should know about automated workflows,
    Terraform, and the cloud prior to getting started.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开始之前，你应该已经知道如何浏览每个云平台的控制台，并对如何自动化创建云基础设施有一般的理解。虽然深入这些主题会非常有帮助，但这些内容非常庞大，市面上有专门的书籍来讲解它们。因此，在开始之前，你应该了解自动化工作流、Terraform
    以及云的基本知识。
- en: 'To work inside the cloud, you will need the following, all of which you can
    sign up for and get free credit:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要在云中工作，你将需要以下内容，所有这些你都可以注册并获得免费额度：
- en: An Azure account
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Azure 账户
- en: An AWS account
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 AWS 账户
- en: A GCP account
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 GCP 账户
- en: An infrastructure automation tool such as Terraform
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个基础设施自动化工具，如 Terraform
- en: 'The code for this chapter is in the GitHub repository or directory found here:
    [https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch2](https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch2).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在 GitHub 仓库或目录中找到：[https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch2](https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch2)。
- en: Azure Kubernetes Service
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Kubernetes Service
- en: 'When you’re using Microsoft Azure, you have a few options to choose from when
    using containers and Kubernetes:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Microsoft Azure 时，你有几种选择可以在容器和 Kubernetes 中使用：
- en: '**Azure Kubernetes** **Service** (**AKS**)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Kubernetes** **服务** (**AKS**)'
- en: Azure Container Instances
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 容器实例
- en: '**Azure Container** **Apps** (**ACA**)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure 容器** **应用** (**ACA**)'
- en: AKS is the primary way to run Kubernetes workloads inside Azure. You do not
    have to worry about managing the Control Plane or API Server and instead, simply
    handle deploying your apps, scaling, and managing or maintaining the cloud infrastructure.
    However, there is still maintenance and management that you need to do for worker
    nodes – for example, if you want to scale Kubernetes clusters, utilize a multi-cloud
    model, or implement some sort of hybrid-cloud model, you would be solely responsible
    for implementing that setup. AKS abstracts the need to worry about managing and
    scaling the Control Plane or API Server, but you’re responsible for everything
    else (scaling workloads, monitoring, and observability).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: AKS 是在 Azure 中运行 Kubernetes 工作负载的主要方式。你无需担心管理控制平面或 API 服务器，而是只需处理应用程序的部署、扩展和管理或维护云基础设施。然而，仍然有一些工作是需要你管理的，特别是对于工作节点。例如，如果你想扩展
    Kubernetes 集群、采用多云模型或实施某种混合云模型，你将完全负责实施该设置。AKS 抽象了管理和扩展控制平面或 API 服务器的需求，但其他所有事情（如扩展工作负载、监控和可观测性）都由你负责。
- en: Important note
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: There’s a new service that recently went **Generally Available** (**GA**) at
    Microsoft Build 2022 called ACA. Although we won’t be going into detail about
    ACA in this book, you should know that it’s essentially *serverless Kubernetes*.
    It’s drastically different in comparison to AKS, so if you’re planning on using
    ACA, ensure that you learn about those tech spaces prior.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有一项新的服务最近在 2022 年微软 Build 大会上发布，称为 ACA，并且已**全面可用**(**GA**)。虽然我们在本书中不会详细讲解 ACA，但你应该知道它本质上是
    *无服务器 Kubernetes*。与 AKS 相比，它有很大的不同，因此，如果你计划使用 ACA，请确保提前了解这些技术领域。
- en: In the following section, you’re going to learn how to create an AKS cluster
    manually first. After that, you’ll take what you learned from a manual perspective
    and learn how to automate it with Terraform. Then, you’ll learn about scaling
    AKS clusters from a vertical-autoscaling perspective. Finally, you’ll wrap up
    with serverless Kubernetes. Let’s dive right in!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，你将首先学习如何手动创建 AKS 集群。之后，你将从手动角度学到的内容应用到 Terraform 中，学习如何自动化这一过程。接着，你将学习从垂直自动扩展的角度来扩展
    AKS 集群。最后，你将学习无服务器 Kubernetes。我们开始吧！
- en: Creating an AKS cluster manually
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动创建 AKS 集群
- en: 'Before managing an AKS cluster, you have to learn how to create one. In today’s
    world, you’ll most likely never do this process manually because of the need for
    every organization to strive toward an automated and repeatable mindset. However,
    because you cannot automate something without doing it manually first, you’ll
    learn how to do that in this section:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在管理 AKS 集群之前，你需要学习如何创建一个。在当今的世界里，你很可能永远不会手动执行这个过程，因为每个组织都需要追求自动化和可重复的思维方式。然而，因为你无法在没有先手动做一遍的情况下进行自动化，所以你将在本节中学习如何手动完成这一过程：
- en: Log in to the Azure portal.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 Azure 门户。
- en: '![Figure 2.1 – The Azure portal'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.1 – Azure 门户'
- en: '](img/B19116_02_01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_02_01.jpg)'
- en: Figure 2.1 – The Azure portal
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – Azure 门户
- en: 'Search for `azure` `kubernetes services`:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索 `azure` `kubernetes services`：
- en: '![Figure 2.2 – Searching for AKS'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.2 – 搜索 AKS'
- en: '](img/B19116_02_02.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_02_02.jpg)'
- en: Figure 2.2 – Searching for AKS
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – 搜索 AKS
- en: 'Click on the **Create** dropdown and choose the **Create a Kubernetes** **cluster**
    option:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建** 下拉菜单，选择 **创建 Kubernetes** **集群** 选项：
- en: '![Figure 2.3 – Creating an AKS cluster'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.3 – 创建 AKS 集群'
- en: '](img/B19116_02_03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_02_03.jpg)'
- en: Figure 2.3 – Creating an AKS cluster
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – 创建 AKS 集群
- en: 'Choose the options for your Kubernetes cluster, including the name of the cluster
    and your Azure resource group:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 Kubernetes 集群的选项，包括集群的名称和你的 Azure 资源组：
- en: '![Figure 2.4 – Adding cluster details before its creation'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.4 – 在创建集群之前添加集群详细信息'
- en: '](img/B19116_02_04.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_02_04.jpg)'
- en: Figure 2.4 – Adding cluster details before its creation
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – 在创建集群之前添加集群详细信息
- en: 'Under the **Primary node pool** section, you can choose what **Virtual Machine**
    (**VM**) size you want for your Kubernetes worker nodes, how many should be available,
    and whether or not you want to autoscale. One of the biggest powers behind cloud
    Kubernetes services such as AKS is autoscaling. In production, it’s recommended
    to autoscale when needed. However, you also have to understand that it comes with
    a cost, as extra VMs will be provisioned. Leave everything as the default for
    now and scroll down to the **Primary node** **pool** section:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**主节点池**部分，你可以选择希望为 Kubernetes 工作节点提供的**虚拟机**（**VM**）大小、节点数量以及是否希望启用自动扩展。云
    Kubernetes 服务（如 AKS）的一大优势就是自动扩展。在生产环境中，建议根据需要启用自动扩展。然而，你也需要明白这会带来额外的成本，因为会预配置额外的虚拟机。现在暂时保持默认设置，向下滚动到**主节点池**部分：
- en: '![Figure 2.5 – Specifying the worker node size, node count, and scale method'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.5 – 指定工作节点大小、节点数量和扩展方法'
- en: '](img/B19116_02_05.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_02_05.jpg)'
- en: Figure 2.5 – Specifying the worker node size, node count, and scale method
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – 指定工作节点大小、节点数量和扩展方法
- en: Once you have chosen your options, which in a dev environment could be one node,
    but will vary in production, click the blue **Review + create** button. Your AKS
    cluster is now created.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦选择了你的选项，在开发环境中可能只有一个节点，但在生产环境中会有所不同，点击蓝色的**审查 + 创建**按钮。你的 AKS 集群现在已经创建。
- en: Now that you know how to create an AKS cluster manually, it’s time to learn
    how to create it with Terraform so you can ensure repeatable processes throughout
    your environment.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何手动创建 AKS 集群了，接下来学习如何使用 Terraform 创建它，以确保你在环境中的过程是可重复的。
- en: Creating an AKS cluster with automation
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用自动化创建 AKS 集群
- en: In many production-level cases, you’ll run the following Terraform code within
    a CI/CD pipeline to ensure repeatability. For the purpose of this section, you
    can run it locally. You’ll first see the `main.tf` configuration and then you’ll
    take a look at `variables.tf`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多生产级别的情况下，你将在 CI/CD 管道中运行以下 Terraform 代码以确保可重复性。为了本节的目的，你可以在本地运行它。你首先会看到 `main.tf`
    配置文件，然后会查看 `variables.tf`。
- en: Let’s break down the code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步解析代码。
- en: 'First, there’s the Terraform provider itself. The `azurerm` Terraform provider
    is used to make API calls to Azure programmatically:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是 Terraform 提供程序本身。`azurerm` Terraform 提供程序用于通过 API 调用来编程访问 Azure：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, there’s the `azurerm_kubernetes_cluster` Terraform resource block, which
    is used to create the AKS cluster. There are a few key parameters, including the
    name and `default_node_pool` parameter block. You can specify the VM size, node
    count, and name of the node pool:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 `azurerm_kubernetes_cluster` Terraform 资源块，用于创建 AKS 集群。这里有几个关键参数，包括名称和
    `default_node_pool` 参数块。你可以指定虚拟机大小、节点数量以及节点池名称：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Putting it all together, you’ll have a Terraform configuration that creates
    an AKS cluster in Azure.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 把所有内容整合在一起，你将拥有一个 Terraform 配置，用于在 Azure 中创建 AKS 集群。
- en: Now that you have the Terraform configuration, you’ll need variables to pass
    in. The variables allow your code to stay repeatable – in accordance with the
    **Don’t Repeat Yourself** (**DRY**) principle – so that you don’t have to continuously
    change hardcoded values or create new configurations for each environment.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了 Terraform 配置，接下来需要传入变量。这些变量使你的代码保持可重复性——遵循 **不要重复自己**（**DRY**）原则——这样你就不必不断更改硬编码的值或为每个环境创建新的配置。
- en: 'There are four variables:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个变量：
- en: '`name`: Name of the AKS cluster'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：AKS 集群的名称'
- en: '`resource_group_name`: The resource group that AKS will reside in'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resource_group_name`：AKS 将所在的资源组'
- en: '`location`: The region that the AKS cluster will reside in'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`location`：AKS 集群所在的区域'
- en: '`node_count`: How many Kubernetes worker nodes will be in the AKS cluster'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node_count`：AKS 集群中将有多少个 Kubernetes 工作节点'
- en: 'These variables can be seen in the following code block:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块中可以看到这些变量：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Putting both the `main.tf` and `variables.tf` configuration files in the same
    directory will create a Terraform module for creating an AKS cluster. You can
    use this for almost any environment, change configurations (such as the node count)
    depending on your needs, and make your process repeatable.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `main.tf` 和 `variables.tf` 配置文件放在同一目录下，将创建一个用于创建 AKS 集群的 Terraform 模块。你可以在几乎任何环境中使用它，根据需要更改配置（例如节点数量），并使你的过程保持可重复。
- en: Scaling an AKS cluster
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展 AKS 集群
- en: Scaling an AKS cluster is made possible by implementing the Kubernetes Cluster
    Autoscaler. Much like autoscaling groups for Azure VMs, AKS decides on how and
    why to scale the cluster based on the worker node load, which is the Azure VMs
    in the background. The Cluster Autoscaler is typically deployed to the Kubernetes
    cluster with the `cluster-autoscaler` container image.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展AKS集群是通过实现Kubernetes集群自动扩展器来实现的。就像Azure虚拟机的自动扩展组一样，AKS根据工作节点的负载决定如何以及为什么扩展集群，而工作节点就是后台的Azure虚拟机。集群自动扩展器通常会以`cluster-autoscaler`容器镜像的形式部署到Kubernetes集群。
- en: 'Log in to the Azure portal and go to the AKS service. Once there, go to **Settings**
    | **Node pools**:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到Azure门户，进入AKS服务。在那里，进入**设置** | **节点池**：
- en: '![Figure 2.6 – Node pools settings'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.6 – 节点池设置'
- en: '](img/B19116_02_06.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_02_06.jpg)'
- en: Figure 2.6 – Node pools settings
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6 – 节点池设置
- en: 'Click on the three dots as per the following screenshot and choose the **Scale
    node** **pool** option:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下截图点击三个点，然后选择**扩展节点池**选项：
- en: '![Figure 2.7 – Scaling node pools'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.7 – 扩展节点池'
- en: '](img/B19116_02_07.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_02_07.jpg)'
- en: Figure 2.7 – Scaling node pools
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7 – 扩展节点池
- en: 'The **Scale node pool** pane will come up and you’ll see the option to automatically
    scale the node pool or manually scale it and choose how many nodes you want to
    make available:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**扩展节点池**窗格会弹出，你将看到自动扩展节点池或手动扩展的选项，并选择你希望提供的节点数量：'
- en: '![Figure 2.8 – Specifying the node count and scale method'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.8 – 指定节点数量和扩展方法'
- en: '](img/B19116_02_08.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_02_08.jpg)'
- en: Figure 2.8 – Specifying the node count and scale method
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8 – 指定节点数量和扩展方法
- en: 'From an automation and repeatability standpoint, you can do the same thing.
    The following is an example of creating the `azurerm_kubernetes_cluster_node_pool`
    Terraform resource with the `enable_auto_scaling` parameter set to `true`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 从自动化和可重复性的角度来看，你可以做同样的事情。以下是使用`enable_auto_scaling`参数设置为`true`时，创建`azurerm_kubernetes_cluster_node_pool`
    Terraform资源的示例：
- en: '[PRE3]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Node pools are simply Azure VMs that run as Kubernetes worker nodes. When thinking
    about autoscaling, remember that horizontal autoscaling comes at a cost. Although
    it’s very much needed, you should limit the amount of Kubernetes worker nodes
    that are available. That way, you can keep track of costs and how many resources
    your containerized apps need.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 节点池实际上是作为Kubernetes工作节点运行的Azure虚拟机。在考虑自动扩展时，记住水平自动扩展是有成本的。虽然它非常必要，但你应该限制可用的Kubernetes工作节点数量。这样，你可以跟踪成本以及容器化应用所需的资源。
- en: AKS and Virtual Kubelet
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AKS和虚拟Kubelet
- en: To wrap things up with AKS, there is Virtual Kubelet. Virtual Kubelet isn’t
    AKS-specific. Virtual Kubelet allows you to take Kubernetes and connect it to
    other APIs. A kubelet is the node agent that runs on each node. It’s responsible
    for registering the node with Kubernetes. AKS Virtual Kubelet registers serverless
    container platforms.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在总结AKS时，还有虚拟Kubelet。虚拟Kubelet不是AKS特有的。虚拟Kubelet允许你将Kubernetes连接到其他API。Kubelet是运行在每个节点上的节点代理，负责将节点注册到Kubernetes。AKS虚拟Kubelet注册无服务器容器平台。
- en: In Azure, it’s **Azure Container Instances** (**ACI**). ACI is a way to run
    containers without using Kubernetes. If someone using Kubernetes doesn’t want
    to scale out worker nodes due to cost or management, they can use ACI bursting,
    which uses Virtual Kubelet. It essentially tells Kubernetes to send Deployments,
    Pods, and other workloads to ACI instead of keeping them on the local Kubernetes
    cluster.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure中，它是**Azure容器实例**（**ACI**）。ACI是一种无需使用Kubernetes即可运行容器的方式。如果某个使用Kubernetes的人由于成本或管理原因不想扩展工作节点，他们可以使用ACI扩展，它使用虚拟Kubelet。它本质上告诉Kubernetes将部署、Pod和其他工作负载发送到ACI，而不是将它们保留在本地Kubernetes集群中。
- en: Now that ACA is GA, chances are you’ll see less of this type of implementation.
    However, it’s still a great use case for teams that want to scale, but don’t want
    the overhead of managing large AKS clusters.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，ACA已经GA，你可能会看到这种类型的实现减少。然而，对于那些想要扩展，但不想管理大型AKS集群的团队来说，它仍然是一个很好的用例。
- en: Managing and maintaining AKS clusters
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理和维护AKS集群
- en: 'Once a Kubernetes cluster is created and running, the mindset shift moves from
    day-one Ops to day-two Ops. Day-two Ops will be focused on the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Kubernetes集群创建并运行，思维模式将从第一天的运维转向第二天的运维。第二天的运维将专注于以下内容：
- en: Managing the cluster
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理集群
- en: Monitoring and maintaining the cluster
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控和维护集群
- en: Deploying applications and getting services running
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署应用程序并启动服务
- en: When managing an AKS cluster, the biggest thing to think about is where the
    configuration exists and what tools you’re using to manage it. For example, the
    Terraform configuration could be in GitHub and you could be managing the cluster
    via Azure Monitor and the rest of the Azure configurations that are available
    in the AKS cluster. Day-two Ops is about making sure the cluster and your configurations
    are running as you expect. The focus is really on the question “*is my environment
    working and performing* *as intended?*”
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在管理 AKS 集群时，最需要考虑的是配置存放的位置以及你正在使用哪些工具来管理它。例如，Terraform 配置可能存放在 GitHub 中，而你可能通过
    Azure Monitor 和 AKS 集群中可用的其他 Azure 配置来管理集群。第二天操作（Day-two Ops）是确保集群和配置按照预期运行。重点实际上是在“*我的环境是否按预期工作并且表现良好*”这个问题上。
- en: When it comes to monitoring, alerting, and overall observability, there are
    several options. Azure Monitor and Azure Insights are built into Azure, but if
    you have a multi-cloud or a hybrid-cloud environment, you may want to look at
    other options. That’s where a combination of Prometheus and Grafana can come into
    play. Whichever tool you choose (because there are several) isn’t important. What’s
    important is what you monitor. You’ll need a combination of monitoring the cluster
    itself and the Kubernetes resources (for example, Pods, Services, or Ingresses)
    inside of the cluster.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在监控、告警和整体可观察性方面，有几个选择。Azure Monitor 和 Azure Insights 已集成在 Azure 中，但如果你有一个多云或混合云环境，你可能需要查看其他选项。此时，Prometheus
    和 Grafana 的组合就派上用场了。你选择哪个工具（因为有好几个工具）并不重要，重要的是你监控的内容。你需要同时监控集群本身和集群内的 Kubernetes
    资源（例如 Pods、Services 或 Ingresses）。
- en: Because managing Kubernetes clusters doesn’t differ all that much (other than
    the native cloud tools), it’s safe to assume that whether you’re using AKS, EKS,
    or GKE, the path forward will be the same.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 因为管理 Kubernetes 集群的方式差别不大（除了原生云工具），所以可以安全地假设，无论你使用的是 AKS、EKS 还是 GKE，前进的路径都将是相同的。
- en: AWS EKS
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS EKS
- en: 'When you’re using AWS, you have a few options to choose from when using containers
    and Kubernetes:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 AWS 时，你有一些选择可以用来使用容器和 Kubernetes：
- en: EKS
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EKS
- en: EKS with Fargate profiles
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Fargate 配置文件的 EKS
- en: '**Elastic Container** **Service** (**ECS**)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性容器** **服务**（**ECS**）'
- en: EKS is the primary way to run Kubernetes workloads inside AWS. If you don’t
    want to go the Kubernetes route but still want scalability, you can use ECS, which
    gives you the ability to scale and create reliable microservices but without Kubernetes.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: EKS 是在 AWS 内运行 Kubernetes 工作负载的主要方式。如果你不想走 Kubernetes 路线，但仍然希望具有可扩展性，你可以使用 ECS，它能够让你扩展并创建可靠的微服务，但无需使用
    Kubernetes。
- en: As with AKS, you don’t have to worry about managing the Control Plane or API
    Server when it comes to EKS. You only have to worry about managing and scaling
    worker nodes. If you want to, you can even take it a step further and implement
    EKS with Fargate profiles, which abstracts the Control Plane or API Server and
    the worker nodes to ensure a fully *serverless* *Kubernetes* experience.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 与 AKS 一样，在 EKS 中，你无需担心管理控制平面或 API 服务器。你只需要关注管理和扩展工作节点。如果你愿意，你甚至可以更进一步，使用 Fargate
    配置文件实现 EKS，它将控制平面或 API 服务器以及工作节点抽象化，确保实现一个完全的 *无服务器* *Kubernetes* 体验。
- en: As with AKS, in the following few sections, you’re going to learn how to create
    an EKS cluster manually first. After that, you’ll take what you learned from a
    manual perspective and learn how to automate it with Terraform. Then, you’ll learn
    about scaling EKS clusters from a vertical-autoscaling perspective. Finally, you’ll
    wrap up with serverless Kubernetes.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 与 AKS 一样，在接下来的几个部分中，你将首先学习如何手动创建 EKS 集群。之后，你将从手动角度学到的内容自动化使用 Terraform。然后，你将学习如何从垂直自动扩展的角度扩展
    EKS 集群。最后，你将结束于无服务器 Kubernetes。
- en: Creating an EKS cluster manually
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动创建 EKS 集群
- en: 'Much like AKS clusters, before creating EKS clusters from an automated perspective,
    you must learn how to manually deploy them. In this section, you’ll learn how
    to deploy an EKS cluster with a node group in the AWS Console:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与 AKS 集群类似，在从自动化角度创建 EKS 集群之前，你必须学习如何手动部署它们。在本节中，你将学习如何在 AWS 控制台中使用节点组部署 EKS
    集群：
- en: 'Log in to the AWS portal and search for the EKS service:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录 AWS 门户并搜索 EKS 服务：
- en: '![Figure 2.9 – The AWS portal'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.9 – AWS 门户'
- en: '](img/B19116_02_09.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_02_09.jpg)'
- en: Figure 2.9 – The AWS portal
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9 – AWS 门户
- en: 'Click the orange **Add cluster** button and choose the **Create** option:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击橙色的 **添加集群** 按钮并选择 **创建** 选项：
- en: '![Figure 2.10 – Adding a cluster'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.10 – 添加集群'
- en: '](img/B19116_02_10.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_02_10.jpg)'
- en: Figure 2.10 – Adding a cluster
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10 – 添加集群
- en: 'When configuring an EKS cluster, you’ll have to provide a few options to uniquely
    identify it, which include the following:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置EKS集群时，您需要提供一些选项来唯一标识它，包括以下内容：
- en: The EKS cluster name
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: EKS集群名称
- en: The Kubernetes API version
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes API 版本
- en: The IAM role
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: IAM角色
- en: 'The IAM role is very important because there are specific policies that must
    be attached to the role that you’re assigning to the EKS cluster. Those policies
    include the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: IAM角色非常重要，因为必须将特定的策略附加到分配给EKS集群的角色。这些策略包括以下内容：
- en: '`AmazonEC2ContainerRegistryReadOnly`'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AmazonEC2ContainerRegistryReadOnly`'
- en: '`AmazonEKSClusterPolicy`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AmazonEKSClusterPolicy`'
- en: 'Without the proceeding policies, the EKS cluster will not work as expected:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 没有前述策略，EKS集群将无法按预期工作：
- en: '![Figure 2.11 – Configuring a cluster'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.11 – 配置集群'
- en: '](img/B19116_02_11.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_02_11.jpg)'
- en: Figure 2.11 – Configuring a cluster
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11 – 配置集群
- en: 'Next, you’ll need to set up networking. The absolute minimum amount of subnets
    that you want to use is two public subnets with different CIDRs in different availability
    zones. For a full list of recommendations, check out the AWS docs ([https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html](https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html)):'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要设置网络。您希望使用的最少子网数量是两个公共子网，这些子网在不同的可用区中具有不同的CIDR。有关完整的推荐列表，请查看AWS文档（[https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html](https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html)）：
- en: '![Figure 2.12 – Specifying the network configuration'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.12 – 指定网络配置'
- en: '](img/B19116_02_12.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_02_12.jpg)'
- en: Figure 2.12 – Specifying the network configuration
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12 – 指定网络配置
- en: 'When configuring the cluster endpoint access, you have three options:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置集群端点访问时，您有三个选项：
- en: '**Public** means the EKS cluster is essentially open to the world'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共**意味着EKS集群基本上对外开放'
- en: '**Public and private** means the API Server or Control Plane is open to the
    outside world, but worker node traffic will remain internal'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共和私有**意味着API服务器或控制平面对外部开放，但工作节点流量将保持内部。'
- en: '**Private** means the EKS cluster is only available inside the AWS **Virtual
    Private** **Cloud** (**VPC**):'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**私有**意味着EKS集群仅在AWS **虚拟私有** **云**（**VPC**）内部可用：'
- en: '![Figure 2.13 – Configuring cluster API access'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.13 – 配置集群 API 访问'
- en: '](img/B19116_02_13.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_02_13.jpg)'
- en: Figure 2.13 – Configuring cluster API access
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.13 – 配置集群 API 访问
- en: 'The last piece from a networking perspective is choosing the **Container Networking
    Interface** (**CNI**) and the version of CoreDNS. Choosing the latest typically
    makes the most sense:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从网络角度来看，最后一步是选择**容器网络接口**（**CNI**）和CoreDNS的版本。选择最新版本通常是最合适的：
- en: '![Figure 2.14 – Network add-ons'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.14 – 网络附加组件'
- en: '](img/B19116_02_14.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_02_14.jpg)'
- en: Figure 2.14 – Network add-ons
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.14 – 网络附加组件
- en: Click the orange **Next** button.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击橙色的**下一步**按钮。
- en: 'The final piece when creating the EKS cluster is the API logging. Regardless
    of where you plan to keep logs, traces, and metrics from an observability perspective,
    you must turn this option *on* if you want your cluster to record any type of
    logs:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建EKS集群的最后一步是API日志记录。无论您计划将日志、追踪和指标保存在何处，从可观察性角度来看，如果您希望集群记录任何类型的日志，都必须将此选项设置为*开启*：
- en: '![Figure 2.15 – Configuring observability'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.15 – 配置可观察性'
- en: '](img/B19116_02_15.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_02_15.jpg)'
- en: Figure 2.15 – Configuring observability
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.15 – 配置可观察性
- en: After you choose your logging options, click the orange **Next** button and
    you’ll be at the last page to review and create your EKS cluster.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择日志选项后，点击橙色的**下一步**按钮，您将进入最后一页，审核并创建您的EKS集群。
- en: Now that you know how to create an EKS cluster manually, it’s time to learn
    how to create it with Terraform so you can ensure repeatable processes throughout
    your environment.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了如何手动创建EKS集群，是时候学习如何使用Terraform创建它，以确保在您的环境中实现可重复的流程。
- en: Creating an EKS cluster with Terraform
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Terraform创建EKS集群
- en: In many production-level cases, you’ll run the following Terraform code within
    a CI/CD pipeline to ensure repeatability. For the purposes of this section, you
    can run it locally.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多生产级案例中，您将在CI/CD流水线中运行以下Terraform代码，以确保可重复性。对于本节的目的，您可以在本地运行它。
- en: First, you’ll see the `main.tf` configuration and then you’ll take a look at
    `variables.tf`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您将看到`main.tf`配置，然后查看`variables.tf`。
- en: 'Because the `main.tf` configuration for AWS EKS is much longer than EKS, let’s
    break it down into chunks for an easier explanation:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 AWS EKS 的 `main.tf` 配置比 EKS 本身要长得多，所以我们将其分成几个部分，以便更容易理解：
- en: 'First, there’s the Terraform provider block. To ensure repeatability throughout
    your team, you can use an S3 bucket backend for storing your `TFSTATE`. The Terraform
    block also includes the AWS Terraform provider:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先是 Terraform 提供者块。为了确保整个团队的可重复性，你可以使用 S3 存储桶作为 `TFSTATE` 的后端。Terraform 块还包括
    AWS Terraform 提供者：
- en: '[PRE4]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, the first resource is created. The resources allow an IAM role to be
    attached to the EKS cluster. For EKS to access various components and services
    from AWS, plus worker nodes, there are a few policies that need to be attached:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建第一个资源。该资源允许将 IAM 角色附加到 EKS 集群。为了让 EKS 访问 AWS 的各种组件和服务以及工作节点，需要附加一些策略：
- en: '[PRE16]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Following the IAM role are the IAM policies that have to be attached to the
    role. The two policies that you’ll need for a successful EKS deployment are the
    following:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IAM 角色后面是需要附加到角色的 IAM 策略。成功部署 EKS 所需的两项策略如下：
- en: '`AmazonEKSClusterPolicy`: This provides Kubernetes with the permissions it
    requires to manage resources on your behalf:'
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AmazonEKSClusterPolicy`：为 Kubernetes 提供所需的权限，以便代表你管理资源：'
- en: '[PRE34]'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '`AmazonEC2ContainerRegistryReadOnly`: This provides read-only access to Elastic
    Container Registry if you decide to put your container images there:'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AmazonEC2ContainerRegistryReadOnly`：如果你决定将容器镜像放置在 Elastic Container Registry
    中，这个策略将提供只读访问权限：'
- en: '[PRE38]'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Once the IAM role and policies are defined, it’s time to create the EKS cluster
    itself. The EKS cluster resource will create EKS itself, enable logging, and attach
    the IAM role that you created earlier:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦定义了 IAM 角色和策略，就该创建 EKS 集群本身了。EKS 集群资源将创建 EKS 本身，启用日志记录，并附加你之前创建的 IAM 角色：
- en: '[PRE42]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The next resource is another IAM role, which is for the worker nodes. When
    creating an EKS cluster, you’ll have multiple resources that are created because
    you’re creating two sets of services:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个资源是另一个 IAM 角色，用于工作节点。创建 EKS 集群时，你将创建多个资源，因为你正在创建两套服务：
- en: The EKS cluster itself with all of its permissions and policies that are needed
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: EKS 集群本身及其所需的所有权限和策略：
- en: 'The Kubernetes worker nodes with all of the permissions and policies needed:'
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 工作节点具备所需的所有权限和策略：
- en: '[PRE53]'
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Once the IAM role for the worker nodes is created, there are a few policies
    that you’ll need to attach:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建了工作节点的 IAM 角色，接下来需要附加一些策略：
- en: '`AmazonEKSWorkerNodePolicy`: This provides Kubernetes the permissions it requires
    to manage resources on your behalf:'
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AmazonEKSWorkerNodePolicy`：为 Kubernetes 提供所需的权限，以便代表你管理资源：'
- en: '[PRE66]'
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '`AmazonEKS_CNI_Policy`: This attaches the CNI policy for Kubernetes internal
    networking (kubeproxy):'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AmazonEKS_CNI_Policy`：为 Kubernetes 内部网络（kubeproxy）附加 CNI 策略：'
- en: '[PRE70]'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '`EC2InstanceProfileForImageBuilderECRContainerBuilds`: EC2 Image Builder uses
    a service-linked role to grant permissions to other AWS services on your behalf:'
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EC2InstanceProfileForImageBuilderECRContainerBuilds`：EC2 Image Builder 使用服务关联角色授权其他
    AWS 服务代表你执行操作：'
- en: '[PRE74]'
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '`AmazonEC2ContainerRegistryReadOnly`: This provides read-only access to Elastic
    Container Registry if you decide to put your container images there:'
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AmazonEC2ContainerRegistryReadOnly`：如果你决定将容器镜像放在 Elastic Container Registry
    中，这个策略将提供只读访问权限：'
- en: '[PRE78]'
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '`CloudWatchAgentServerPolicy`: This allows the worker nodes to run the CloudWatch
    agent for monitoring, logging, tracing, and metrics:'
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CloudWatchAgentServerPolicy`：允许工作节点运行 CloudWatch 代理进行监控、日志记录、追踪和指标收集：'
- en: '[PRE82]'
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'The final part once the IAM role and policies have been created is to create
    the EKS node group resource, which is the Kubernetes worker nodes. You’ll define
    the following:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 IAM 角色和策略后，最后一步是创建 EKS 节点组资源，也就是 Kubernetes 工作节点。你将定义以下内容：
- en: 'The IAM role and subnet IDs:'
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: IAM 角色和子网 ID：
- en: '[PRE86]'
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'The desired scale size for autoscaling:'
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动扩展所需的目标规模大小：
- en: '[PRE92]'
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'The policies that the resource depends on:'
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源所依赖的策略：
- en: '[PRE97]'
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Now that you have the Terraform configuration, you’ll need variables to pass
    in. The variables allow your code to stay repeatable, so you don’t have to continuously
    change hardcoded values or create new configurations for each environment.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经有了 Terraform 配置，你需要传入变量。变量让你的代码保持可重复性，这样你就不需要不断更改硬编码值或为每个环境创建新的配置：
- en: 'The two variables you’ll need are for the subnet IDs in the VPC of your choosing
    that will work with EKS. You can pass in two public subnet IDs that are in different
    availability zones:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要的两个变量是你选择的 VPC 中的子网 ID，这些子网将与 EKS 一起使用。你可以传入两个位于不同可用区的公共子网 ID：
- en: '[PRE102]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Putting it all together, you’ll have a Terraform configuration that creates
    an AKS cluster.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 综合来看，你将拥有一个 Terraform 配置，它创建了一个 AKS 集群。
- en: Scaling an EKS cluster
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展 EKS 集群
- en: Scaling an EKS cluster is made possible by implementing the Kubernetes Cluster
    Autoscaler. Much like autoscaling EC2 instances, EKS decides on how and why to
    scale the cluster based on a load perspective. The Cluster Autoscaler is typically
    deployed to the Kubernetes cluster using the `cluster-autoscaler` container image.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展 EKS 集群的可能性是通过实现 Kubernetes 集群自动扩展器（Cluster Autoscaler）来实现的。与自动扩展 EC2 实例类似，EKS
    根据负载的视角决定如何以及为何扩展集群。集群自动扩展器通常使用 `cluster-autoscaler` 容器镜像部署到 Kubernetes 集群中。
- en: Inside the Kubernetes GitHub repo, under the `cluster-autoscaler` directory,
    there’s a list of cloud providers. One of those cloud providers is AWS. Inside
    the AWS directory, there’s an example Kubernetes Manifest called `cluster-autoscaler-autodiscover.yaml`,
    which shows that it’s using the `cluster-autoscaler` container image. It runs
    as a Kubernetes Deployment on your cluster and listens for certain resource limits.
    To autoscale the cluster, you’ll need an IAM role with the `AmazonEKSClusterAutoscalerPolicy`
    policy attached to it.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 的 GitHub 仓库中，`cluster-autoscaler` 目录下有一个云提供商列表。其中一个云提供商是 AWS。在
    AWS 目录下，有一个名为 `cluster-autoscaler-autodiscover.yaml` 的 Kubernetes Manifest 示例，显示它正在使用
    `cluster-autoscaler` 容器镜像。它作为 Kubernetes Deployment 运行在你的集群上，并监听某些资源限制。为了自动扩展集群，你需要一个附加了
    `AmazonEKSClusterAutoscalerPolicy` 策略的 IAM 角色。
- en: Now that you know about scaling an EKS cluster and how it’s possible with `cluster-autoscaler`,
    let’s talk about serverless Kubernetes with AWS Fargate profiles and how they
    can help automate day-one Ops.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你了解了如何通过 `cluster-autoscaler` 扩展 EKS 集群，并知道了如何实现，接下来让我们来谈谈 AWS Fargate 配置文件的无服务器
    Kubernetes，以及它们如何帮助自动化日常操作。
- en: EKS Fargate profiles
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EKS Fargate 配置文件
- en: The content around Fargate profiles is pretty similar to AKS Virtual Kubelet
    and ACI bursting. However, you don’t need to deploy Virtual Kubelet manually as
    you do in AKS. Instead, you can set up Fargate profiles to act as your Kubernetes
    worker nodes. Virtual Kubelet is still running on Fargate to interact with the
    EKS API Server or Control Plane, but it’s sort of done automatically.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Fargate 配置文件的内容与 AKS 虚拟 Kubelet 和 ACI 爆发类似。然而，你不需要像在 AKS 中那样手动部署虚拟 Kubelet。相反，你可以设置
    Fargate 配置文件，作为你的 Kubernetes 工作节点。虚拟 Kubelet 仍然在 Fargate 上运行，与 EKS API 服务器或控制平面交互，但这一切几乎是自动完成的。
- en: The biggest difference here is that you don’t have to manage the worker nodes.
    Instead, Fargate profiles are like serverless Kubernetes. You deploy the EKS cluster,
    which is the API Server or Control Plane. Then, you deploy a Fargate profile,
    which is where your Kubernetes resources (for example, Deployments, Pods, and
    Services) run. You don’t have to worry about cluster management or maintaining
    EC2 instances that would otherwise be running as your Kubernetes worker nodes.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这里最大的区别在于，你不需要管理工作节点。相反，Fargate 配置文件就像是无服务器 Kubernetes。你部署的是 EKS 集群，它是 API 服务器或控制平面。然后，你部署一个
    Fargate 配置文件，这是你的 Kubernetes 资源（例如，Deployments、Pods 和 Services）运行的地方。你不需要担心集群管理或维护
    EC2 实例，后者通常作为 Kubernetes 工作节点运行。
- en: 'To add a Fargate profile on your EKS cluster, you go into the **Compute** tab
    of the EKS cluster and you’ll see an option for adding or creating a Fargate profile,
    as seen in the following screenshot:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 EKS 集群上添加 Fargate 配置文件，你进入 EKS 集群的 **计算** 选项卡，然后你会看到一个添加或创建 Fargate 配置文件的选项，如下图所示：
- en: '![Figure 2.16 – Fargate profiles and compute'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.16 – Fargate 配置文件和计算'
- en: '](img/B19116_02_16.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_02_16.jpg)'
- en: Figure 2.16 – Fargate profiles and compute
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.16 – Fargate 配置文件和计算
- en: Now that you know how to create an EKS cluster manually and automatically, and
    are also familiar with the day-two Ops considerations with autoscaling and serverless
    Kubernetes, it’s time to learn about the final *big 3* Kubernetes service – GKE.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何手动和自动创建 EKS 集群，并且熟悉了自动扩展和无服务器 Kubernetes 的日二操作考虑事项，接下来是时候学习最后一个 *大 3*
    Kubernetes 服务 —— GKE。
- en: GKE
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GKE
- en: 'When you’re using GCP, you have a few options to choose from when using containers
    and Kubernetes:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 GCP 时，在使用容器和 Kubernetes 时，你有几个选项可以选择：
- en: GKE
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GKE
- en: GKE Autopilot
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GKE 自动驾驶
- en: Google Cloud Run
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud Run
- en: GKE is the primary way to run Kubernetes workloads inside of GCP. If you don’t
    want to go the Kubernetes route but still want scalability, you can use Google
    Cloud Run. Cloud Run gives you the ability to scale and create reliable microservices,
    but without Kubernetes. It supports Node.js, Go, Java, Kotlin, Scala, Python,
    .NET, and Docker.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: GKE 是在 GCP 内部运行 Kubernetes 工作负载的主要方式。如果您不想走 Kubernetes 路线，但仍然希望具备可扩展性，您可以使用
    Google Cloud Run。Cloud Run 使您能够扩展并创建可靠的微服务，但无需 Kubernetes。它支持 Node.js、Go、Java、Kotlin、Scala、Python、.NET
    和 Docker。
- en: As with AKS and EKS, you don’t have to worry about managing the Control Plane
    or API Server when it comes to GKE. You only have to worry about managing and
    scaling worker nodes. If you want to, you can even take it a step further and
    implement GKE Autopilot, which abstracts both the Control Plane or API Server
    and the worker nodes to ensure a fully *serverless* *Kubernetes* experience.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 与 AKS 和 EKS 一样，使用 GKE 时，您无需担心管理控制平面或 API 服务器。您只需要关注管理和扩展工作节点。如果您愿意，您甚至可以进一步实施
    GKE Autopilot，它将控制平面和 API 服务器以及工作节点抽象化，从而确保一个完全的 *无服务器* *Kubernetes* 体验。
- en: There have been many debates inside of container and DevOps communities around
    which Kubernetes service in the cloud is the superior choice. Although we’re not
    here to pick sides, a lot of engineers love GKE and believe it’s a spectacular
    way to implement Kubernetes. Since Kubernetes originated at Google, it makes sense
    that the GKE service would be incredibly reliable with well-thought-out features
    and implementations.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器和 DevOps 社区中，关于哪种云端 Kubernetes 服务是更优选择的讨论一直不断。虽然我们不打算站队，但很多工程师钟爱 GKE，并认为它是实现
    Kubernetes 的一种卓越方式。由于 Kubernetes 起源于 Google，因此 GKE 服务在具有深思熟虑的特性和实现上，肯定是非常可靠的。
- en: In the following section, you will learn about creating a GKE cluster automatically
    using Terraform and how to think about serverless Kubernetes using GKE Autopilot.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下部分，您将学习如何使用 Terraform 自动创建 GKE 集群，并了解如何通过 GKE Autopilot 思考无服务器 Kubernetes。
- en: Important note
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: We’re skipping a section on scaling the GKE cluster because it’s the same concept
    as the other clouds. It uses the Kubernetes Autoscaler in the background. All
    the autoscalers are considered horizontal autoscalers, as they create new worker
    nodes or VMs to run Kubernetes workloads.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们跳过了关于 GKE 集群扩展的部分，因为它与其他云的概念相同。它在后台使用 Kubernetes Autoscaler。所有的自动扩展器都被视为水平自动扩展器，因为它们创建新的工作节点或虚拟机来运行
    Kubernetes 工作负载。
- en: Creating a GKE cluster with Terraform
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Terraform 创建 GKE 集群
- en: Throughout this chapter, you’ve learned several manual ways of creating a Kubernetes
    cluster in the cloud. Instead of continuing down the manual road, let’s jump right
    into automating the repeatable process of creating a GKE cluster with Terraform.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经学习了几种在云中创建 Kubernetes 集群的手动方式。与其继续沿着手动操作的路走，不如直接开始使用 Terraform 自动化创建
    GKE 集群的可重复过程。
- en: 'What you’ll find with GKE is that it’s much less code compared to EKS, for
    example. You’ll see the `main.tf` configuration first and then you’ll take a look
    at `variables.tf`. Let’s break down the following code:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 GKE，您会发现与 EKS 等相比，它所需的代码要少得多。首先，您会看到 `main.tf` 配置文件，然后查看 `variables.tf` 文件。让我们解析以下代码：
- en: 'First, you have the Google Terraform provider, for which you’ll need to specify
    the GCP project ID and the region in which you want to deploy the GKE cluster:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要使用 Google Terraform 提供程序，在其中指定您要部署 GKE 集群的 GCP 项目 ID 和区域：
- en: '[PRE103]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Next, you’ll create the `google_container_cluster` resource, which is the GKE
    cluster. It’ll specify the cluster name, region, and worker node count:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将创建 `google_container_cluster` 资源，即 GKE 集群。它将指定集群名称、区域和工作节点数：
- en: '[PRE107]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'The final resource to create is the `google_container_node_pool` resource,
    which is for creating the Kubernetes worker nodes. Here is where you can specify:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终要创建的资源是 `google_container_node_pool` 资源，它用于创建 Kubernetes 工作节点。在这里，您可以指定：
- en: 'The worker node count:'
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作节点数量：
- en: '[PRE115]'
  id: totrans-315
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-316
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-317
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-319
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'The GCP scopes (or services) that you want GKE to have access to:'
  id: totrans-320
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您希望 GKE 拥有访问权限的 GCP 范围（或服务）：
- en: '[PRE120]'
  id: totrans-321
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-322
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-323
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-324
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-325
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'The VM type or size:'
  id: totrans-329
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟机类型或大小：
- en: '[PRE128]'
  id: totrans-330
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-332
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-333
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-335
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-336
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: Putting it all together, you’ll have a `main.tf` configuration that you can
    use to set up a GKE cluster.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有内容结合在一起，您将拥有一个 `main.tf` 配置文件，可以用来设置 GKE 集群。
- en: 'Next, let’s take a look at `variables.tf`, which will contain the following:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们看看 `variables.tf`，它将包含以下内容：
- en: 'The GCP project ID:'
  id: totrans-339
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GCP 项目 ID：
- en: '[PRE135]'
  id: totrans-340
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-341
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-342
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'The GCP region:'
  id: totrans-344
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GCP 区域：
- en: '[PRE139]'
  id: totrans-345
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-346
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-347
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-348
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'The GCP VPC name that GKE will exist in:'
  id: totrans-349
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GKE 所在的 GCP VPC 名称：
- en: '[PRE143]'
  id: totrans-350
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-351
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-352
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-353
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'The subnet name inside of the VPC that you want GKE to be attached to:'
  id: totrans-354
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你希望 GKE 附加到的 VPC 内子网名称：
- en: '[PRE147]'
  id: totrans-355
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-356
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-357
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-358
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'The code count (Kubernetes worker nodes):'
  id: totrans-359
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码计数（Kubernetes 工作节点）：
- en: '[PRE151]'
  id: totrans-360
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-361
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-363
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'The GKE cluster name:'
  id: totrans-364
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GKE 集群名称：
- en: '[PRE155]'
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-366
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-367
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-368
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: You’re now ready to put the proceeding code into the appropriate `main.tf` and
    `variables.tf` configuration files to create your GKE environment.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以将接下来的代码放入适当的 `main.tf` 和 `variables.tf` 配置文件中，以创建你的 GKE 环境。
- en: GKE Autopilot
  id: totrans-370
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GKE 自动驾驶模式
- en: To wrap up the *GKE* section, let’s quickly talk about GKE Autopilot. Autopilot
    is the same concept as EKS Fargate. It’s serverless Kubernetes, which means you
    don’t have to worry about managing the worker nodes for your GKE cluster. Instead,
    you only have to worry about deploying the application(s) and setting up any monitoring,
    logging, traces, alerts, and metrics you’d like to capture from the GKE cluster.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结 *GKE* 部分，我们快速讨论一下 GKE 自动驾驶模式。自动驾驶模式和 EKS Fargate 的概念相同。它是无服务器 Kubernetes，这意味着你不必担心管理
    GKE 集群的工作节点。相反，你只需关注部署应用程序，并设置任何你希望从 GKE 集群捕获的监控、日志、追踪、警报和指标。
- en: A quick note on multi-cloud
  id: totrans-372
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于多云的一点说明
- en: Many engineers just getting started with Kubernetes may not come across it too
    much, but multi-cloud is very much a reality. Just as organizations didn’t want
    to rely on one data center for redundancy, some organizations don’t want only
    one cloud for redundancy. Instead, they want to think about the multi-cloud approach
    – for example, scaling out Kubernetes workloads from AKS to GKE.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 很多刚开始接触 Kubernetes 的工程师可能不会遇到太多相关问题，但多云环境确实是现实存在的。就像组织不希望仅依赖一个数据中心进行冗余一样，有些组织也不希望仅依赖一个云进行冗余。相反，他们希望考虑多云方法——例如，将
    Kubernetes 工作负载从 AKS 扩展到 GKE。
- en: This implementation can be rather advanced and require a ton of security-related
    permissions, authentication and authorization capabilities between clouds, and
    heavy networking knowledge to ensure Kubernetes clusters between clouds can communicate
    with each other. Because of that, it’s highly recommended to do extensive research
    before implementing this and ensure that all of the proper testing went as expected.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实现可能相当复杂，需要大量的与安全相关的权限、跨云的认证和授权能力，以及大量的网络知识，以确保不同云之间的 Kubernetes 集群能够相互通信。因此，强烈建议在实施之前进行充分的研究，并确保所有适当的测试都按预期进行。
- en: Summary
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Although a multi-cloud approach may not be at the forefront of everyone’s mind,
    it’s still super crucial to understand how the three clouds work with Kubernetes.
    The reason why is that chances are, throughout your Kubernetes journey, you’ll
    work in one cloud, but when the need arises to work in other clouds, you should
    be prepared.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然多云方法可能不是每个人都关注的焦点，但理解三大云如何与 Kubernetes 一起工作依然非常关键。原因在于，几乎可以肯定，在你使用 Kubernetes
    的过程中，你可能会先在一个云中工作，但当需要使用其他云时，你应该做好准备。
- en: In this chapter, you learned about setting up, managing, and maintaining Kubernetes
    clusters across Azure, AWS, and GCP. One of the biggest takeaways is that at the
    end of the day, the setup of Kubernetes across the clouds isn’t really so different.
    They’re all sort of doing the same thing with different service names.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何在 Azure、AWS 和 GCP 中设置、管理和维护 Kubernetes 集群。最大的收获之一是，最终在多个云中设置 Kubernetes
    并没有太大区别。它们基本上是在做相同的事情，只是服务名称不同。
- en: Further reading
  id: totrans-378
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Building Google Cloud Platform Solutions* by Ted Hunter, Steven Porter, and
    Legorie Rajan PS:'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*构建 Google 云平台解决方案* 由 Ted Hunter、Steven Porter 和 Legorie Rajan PS 编写：'
- en: '[https://www.packtpub.com/product/building-google-cloud-platform-solutions/9781838647438](https://www.packtpub.com/product/building-google-cloud-platform-solutions/9781838647438)'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/product/building-google-cloud-platform-solutions/9781838647438](https://www.packtpub.com/product/building-google-cloud-platform-solutions/9781838647438)'
- en: '*Hands-On Kubernetes on Azure – Second Edition* by Nills Franssens, Shivakumar
    Gopalakrishnan, and Gunther Lenz:'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 Azure 上实践 Kubernetes – 第二版* 由 Nills Franssens、Shivakumar Gopalakrishnan
    和 Gunther Lenz 编写：'
- en: '[https://www.packtpub.com/product/hands-on-kubernetes-on-azure-second-edition/9781800209671](https://www.packtpub.com/product/hands-on-kubernetes-on-azure-second-edition/9781800209671)'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/product/hands-on-kubernetes-on-azure-second-edition/9781800209671](https://www.packtpub.com/product/hands-on-kubernetes-on-azure-second-edition/9781800209671)'
- en: '*Learning AWS – Second Edition* by Aurobindo Sarkar and Amit Shah:'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习 AWS – 第二版* 由 Aurobindo Sarkar 和 Amit Shah 编写：'
- en: '[https://www.packtpub.com/product/learning-aws-second-edition/9781787281066](https://www.packtpub.com/product/learning-aws-second-edition/9781787281066)'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/product/learning-aws-second-edition/9781787281066](https://www.packtpub.com/product/learning-aws-second-edition/9781787281066)'
