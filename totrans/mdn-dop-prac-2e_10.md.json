["```\n$ git clone https://github.com/PacktPublishing/Modern-DevOps-Practices-2e.git \\\n   modern-devops\n$ cd modern-devops/ch10\n```", "```\n$ wget -O- https://apt.releases.hashicorp.com/gpg | sudo \\\ngpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n$ echo \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \\\nhttps://apt.releases.hashicorp.com $(lsb_release -cs) main\" | \\ \nsudo tee /etc/apt/sources.list.d/hashicorp.list\n$ sudo apt update && sudo apt install -y packer\n```", "```\n$ packer --version\n1.9.2\n```", "```\n├── ansible\n│   ├── dbserver-playbook.yaml\n│   ├── roles\n│   │   ├── apache\n│   │   ├── common\n│   │   └── mysql\n│   └── webserver-playbook.yaml\n├── packer\n│   ├── dbserver.pkr.hcl\n│   ├── plugins.pkr.hcl\n│   ├── variables.pkr.hcl\n│   ├── variables.pkrvars.hcl\n│   └── webserver.pkr.hcl\n└── terraform\n    ├── main.tf\n    ├── outputs.tf\n    ├── terraform.tfvars\n    └── vars.tf\n```", "```\n---\n- hosts: default\n  become: true\n  roles:\n    - common\n    - apache\n```", "```\n---\n- hosts: default\n  become: true\n  roles:\n    - common\n    - mysql\n```", "```\n$ az login\n```", "```\n$ export SUBSCRIPTION_ID=<SUBSCRIPTION_ID>\n```", "```\n$ az account set --subscription=\"${SUBSCRIPTION_ID}\"\n```", "```\n$ az ad sp create-for-rbac --role=\"Contributor\" \\\n--scopes=\"/subscriptions/${SUBSCRIPTION_ID}\"\n{\"appId\": \"00000000-0000-0000-0000-00000\", \"name\": \"http://azure-\ncli-2021-01-07-05-59-24\",  \"password\": \"xxxxxxxxxxxxxxxxxxxxxxxx\", \"tenant\": \"00000000-\n0000-0000-0000-0000000000000\"}\n```", "```\nclient_id = \"<VALUE_OF_APP_ID>\"\nclient_secret = \"<VALUE_OF_PASSWORD>\"\ntenant_id = \"<VALUE_OF_TENANT>\"\nsubscription_id = \"<SUBSCRIPTION_ID>\"\n```", "```\n$ az group create -n packer-rg -l eastus\n```", "```\n$ cd ~/modern-devops/ch10/packer\n```", "```\nvariable \"client_id\" {\n  type    = string\n}\nvariable \"client_secret\" {\n  type    = string\n}\nvariable \"subscription_id\" {\n  type    = string\n}\nvariable \"tenant_id\" {\n  type    = string\n}\n```", "```\npacker {\n  required_plugins {\n    ansible = {\n      source  = \"github.com/hashicorp/ansible\"\n      version = \"=1.1.0\"\n    }\n    azure = {\n      source  = \"github.com/hashicorp/azure\"\n      version = \"=1.4.5\"\n    }\n  }\n}\n```", "```\nsource \"azure-arm\" \"webserver\" {\n  client_id                         = var.client_id\n  client_secret                     = var.client_secret\n  image_offer                       = \"UbuntuServer\"\n  image_publisher                   = \"Canonical\"\n  image_sku                         = \"18.04-LTS\"\n  location                          = \"East US\"\n  managed_image_name                = \"apache-webserver\"\n  managed_image_resource_group_name = \"packer-rg\"\n  os_type                           = \"Linux\"\n  subscription_id                   = var.subscription_id\n  tenant_id                         = var.tenant_id\n  vm_size                           = \"Standard_DS2_v2\"\nazure-arm and consists of client_id, client_secret, tenant_id, and subscription_id, which helps Packer authenticate with the Azure API server. These attributes’ values are sourced from the variables.pkr.hcl file.\n\t\t\tTip\n\t\t\tThe managed image name can also contain a version. That will help you build a new image for every new version you want to deploy.\n\n\t\t\t\t*   `build`: The `build` block consists of `sources` and `provisioner` attributes. It contains all the sources we want to use, and the `provisioner` attribute allows us to configure the build VM to achieve the desired configuration. We’ve defined the following `build` block:\n\n```", "```\nsource \"azure-arm\" \"dbserver\" {\n  ...\n  managed_image_name                = \"mysql-dbserver\"\n  ...\n}\nbuild {\n  sources = [\"source.azure-arm.dbserver\"]\n  provisioner \"ansible\" {\n    playbook_file = \"../ansible/dbserver-playbook.yaml\"\n  }\n}\n```", "```\n$ packer init .\nInstalled plugin github.com/hashicorp/ansible v1.1.0 in \"~/.config/packer/plugins/github.\ncom/hashicorp/ansible/packer-plugin-ansible_v1.1.0_x5.0_linux_amd64\"\nInstalled plugin github.com/hashicorp/azure v1.4.5 in \"~/.config/packer/plugins/github.\ncom/hashicorp/azure/packer-plugin-azure_v1.4.5_x5.0_linux_amd64\"\n```", "```\n$ packer build -var-file=\"variables.pkrvars.hcl\" .\n```", "```\n==> azure-arm.webserver: Creating resource group ...\n==> azure-arm.webserver:  -> ResourceGroupName : 'pkr-Resource-Group-7dfj1c2iej'\n==> azure-arm.webserver:  -> Location          : 'East US'\n==> azure-arm.dbserver: Creating resource group ...\n==> azure-arm.dbserver:  -> ResourceGroupName : 'pkr-Resource-Group-11xqpuxsm3'\n==> azure-arm.dbserver:  -> Location          : 'East US'\n```", "```\n==> azure-arm.webserver: Validating deployment template ...\n==> azure-arm.webserver: Deploying deployment template ...\n==> azure-arm.webserver:  -> DeploymentName : 'pkrdp7dfj1c2iej'\n==> azure-arm.webserver: Getting the VM's IP address ...\n==> azure-arm.webserver:  -> IP Address : '104.41.158.85'\n==> azure-arm.dbserver: Validating deployment template ...\n==> azure-arm.dbserver: Deploying deployment template ...\n==> azure-arm.dbserver:  -> DeploymentName : 'pkrdp11xqpuxsm3'\n==> azure-arm.dbserver: Getting the VM's IP address ...\n==> azure-arm.dbserver:  -> IP Address : '40.114.7.11'\n```", "```\n==> azure-arm.webserver: Waiting for SSH to become available...\n==> azure-arm.dbserver: Waiting for SSH to become available...\n==> azure-arm.webserver: Connected to SSH!\n==> azure-arm.dbserver: Connected to SSH!\n==> azure-arm.webserver: Provisioning with Ansible...\n==> azure-arm.dbserver: Provisioning with Ansible...\n==> azure-arm.webserver: Executing Ansible: ansible-playbook -e packer_build_\nname=\"webserver\" -e packer_builder_type=azure-arm --ssh-extra-args '-o IdentitiesOnly=yes' \n-e ansible_ssh_private_key_file=/tmp/ansible-key328774773 -i /tmp/packer-provisioner-\nansible747322992 ~/ansible/webserver-playbook.yaml\n==> azure-arm.dbserver: Executing Ansible: ansible-playbook -e packer_build_\nname=\"dbserver\" -e packer_builder_type=azure-arm --ssh-extra-args '-o IdentitiesOnly=yes' \n-e ansible_ssh_private_key_file=/tmp/ansible-key906086565 -i /tmp/packer-provisioner-\nansible3847259155 ~/ansible/dbserver-playbook.yaml\nazure-arm.webserver: PLAY RECAP *********************************************************\n**\nazure-arm.webserver: default: ok=7 changed=5 unreachable=0 failed=0 skipped=0 rescued=0 \nignored=0\nazure-arm.dbserver: PLAY RECAP ***********************************************************\nazure-arm.dbserver: default: ok=11 changed=7 unreachable=0 failed=0 skipped=0 rescued=0 \nignored=0\n```", "```\n==> azure-arm.webserver: Querying the machine's properties\n==> azure-arm.dbserver: Querying the machine's properties\n==> azure-arm.webserver: Querying the machine's additional disks properties ...\n==> azure-arm.dbserver: Querying the machine's additional disks properties ...\n==> azure-arm.webserver: Powering off machine ...\n==> azure-arm.dbserver: Powering off machine ...\n==> azure-arm.webserver: Generalizing machine ...\n==> azure-arm.dbserver: Generalizing machine ...\n==> azure-arm.webserver: Capturing image ...\n==> azure-arm.dbserver: Capturing image ...\n==> azure-arm.webserver: -> Image ResourceGroupName: 'packer-rg'\n==> azure-arm.dbserver: -> Image ResourceGroupName: 'packer-rg'\n==> azure-arm.webserver: -> Image Name: 'apache-webserver'\n==> azure-arm.webserver:  -> Image Location: 'East US'\n==> azure-arm.dbserver: -> Image Name: 'mysql-dbserver'\n==> azure-arm.dbserver:  -> Image Location: 'East US'\n```", "```\n==> azure-arm.webserver: Deleting Virtual Machine deployment and its attached resources...\n==> azure-arm.dbserver: Deleting Virtual Machine deployment and its attached resources...\n==> azure-arm.webserver: Cleanup requested, deleting resource group ...\n==> azure-arm.dbserver: Cleanup requested, deleting resource group ...\n==> azure-arm.webserver: Resource group has been deleted.\n==> azure-arm.dbserver: Resource group has been deleted.\n```", "```\n==> Builds finished. The artifacts of successful builds are:\n--> azure-arm: Azure.ResourceManagement.VMImage:\nOSType: Linux\nManagedImageResourceGroupName: packer-rg\nManagedImageName: apache-webserver\nManagedImageId: /subscriptions/Id/resourceGroups/packer-rg/providers/Microsoft.Compute/\nimages/apache-webserver\nManagedImageLocation: West Europe\nOSType: Linux\nManagedImageResourceGroupName: packer-rg\nManagedImageName: mysql-dbserver\nManagedImageId: /subscriptions/Id/resourceGroups/packer-rg/providers/Microsoft.Compute/\nimages/mysql-dbserver\n```", "```\n$ cd ~/modern-devops/ch10/terraform\n```", "```\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"azurerm\"\n    }\n  }\n}\nprovider \"azurerm\" {\n  subscription_id = var.subscription_id\n  client_id       = var.client_id\n  client_secret   = var.client_secret\n  tenant_id       = var.tenant_id\n}\n```", "```\ndata \"azurerm_image\" \"websig\" {\n  name            = \"apache-webserver\"\n  resource_group_name = \"packer-rg\"\n}\ndata \"azurerm_image\" \"dbsig\" {\n  name            = \"mysql-dbserver\"\n  resource_group_name = \"packer-rg\"\n}\n```", "```\nresource \"azurerm_resource_group\" \"main\" {\n  name     = var.rg_name\n  location = var.location\n}\nresource \"azurerm_virtual_network\" \"main\" {\n  name                = \"lampvnet\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = var.location\n  resource_group_name = azurerm_resource_group.main.name\n}\nresource \"azurerm_subnet\" \"main\" {\n  name                 = \"lampsub\"\n  resource_group_name  = azurerm_resource_group.main.name\n  virtual_network_name = azurerm_virtual_network.main.name\n  address_prefixes       = [\"10.0.2.0/24\"]\n}\n```", "```\nresource \"azurerm_public_ip\" \"main\" {\n  name                = \"webip\"\n  location            = var.location\n  resource_group_name = azurerm_resource_group.main.name\n  allocation_method   = \"Static\"\n  domain_name_label   = azurerm_resource_group.main.name\n}\nresource \"azurerm_lb\" \"main\" {\n  name                = \"web-lb\"\n  location            = var.location\n  resource_group_name = azurerm_resource_group.main.name\n  frontend_ip_configuration {\n    name                 = \"PublicIPAddress\"\n    public_ip_address_id = azurerm_public_ip.main.id\n  }\n  tags = {}\n}\n```", "```\nresource \"azurerm_lb_backend_address_pool\" \"bpepool\" {\n  loadbalancer_id     = azurerm_lb.main.id\n  name                = \"BackEndAddressPool\"\n}\n```", "```\nresource \"azurerm_lb_probe\" \"main\" {\n  loadbalancer_id     = azurerm_lb.main.id\n  name                = \"http-running-probe\"\n  port                = 80\n}\n```", "```\nresource \"azurerm_lb_rule\" \"lbnatrule\" {\n  resource_group_name            = azurerm_resource_group.main.name\n  loadbalancer_id                = azurerm_lb.main.id\n  name                           = \"http\"\n  protocol                       = \"Tcp\"\n  frontend_port                  = 80\n  backend_port                   = 80\n  backend_address_pool_ids       = [ azurerm_lb_backend_address_pool.bpepool.id ]\n  frontend_ip_configuration_name = \"PublicIPAddress\"\n  probe_id                       = azurerm_lb_probe.main.id\n}\n```", "```\nresource \"azurerm_virtual_machine_scale_set\" \"main\" {\n  name                = \"webscaleset\"\n  location            = var.location\n  resource_group_name = azurerm_resource_group.main.name\n  upgrade_policy_mode = \"Manual\"\n  sku {\n    name     = \"Standard_DS1_v2\"\n    tier     = \"Standard\"\n    capacity = 2\n  }\n  storage_profile_image_reference {\n    id=data.azurerm_image.websig.id\n  }\n```", "```\n  storage_profile_os_disk {\n    name              = \"\"\n    caching           = \"ReadWrite\"\n    create_option     = \"FromImage\"\n    managed_disk_type = \"Standard_LRS\"\n  }\n  storage_profile_data_disk {\n    lun          = 0\n    caching        = \"ReadWrite\"\n    create_option  = \"Empty\"\n    disk_size_gb   = 10\n  }\n```", "```\n  os_profile {\n    computer_name_prefix = \"web\"\n    admin_username       = var.admin_username\n    admin_password       = var.admin_password\n  }\n  os_profile_linux_config {\n    disable_password_authentication = false\n  }\n```", "```\n  network_profile {\n    name    = \"webnp\"\n    primary = true\n    ip_configuration {\n      name      = \"IPConfiguration\"\n      subnet_id = azurerm_subnet.main.id\n      load_balancer_backend_address_pool_ids = [azurerm_lb_backend_address_pool.bpepool.id]\n      primary = true\n    }\n  }\n  tags = {}\n}\n```", "```\nresource \"azurerm_network_security_group\" \"db_nsg\" {\n    name                = \"db-nsg\"\n    location            = var.location\n    resource_group_name = azurerm_resource_group.main.name\n    security_rule {\n        name                       = \"SSH\"\n        priority                   = 1001\n        direction                  = \"Inbound\"\n        access                     = \"Allow\"\n        protocol                   = \"Tcp\"\n        source_port_range          = \"*\"\n        destination_port_range     = \"22\"\n        source_address_prefix      = \"*\"\n        destination_address_prefix = \"*\"\n    }\n    security_rule {\n        name                       = \"SQL\"\n        priority                   = 1002\n        direction                  = \"Inbound\"\n        access                     = \"Allow\"\n        protocol                   = \"Tcp\"\n        source_port_range          = \"*\"\n        destination_port_range     = \"3306\"\n        source_address_prefix      = \"*\"\n        destination_address_prefix = \"*\"\n    }\n    tags = {}\n}\n```", "```\nresource \"azurerm_network_interface\" \"db\" {\n  name                = \"db-nic\"\n  location            = var.location\n  resource_group_name = azurerm_resource_group.main.name\n  ip_configuration {\n    name                          = \"db-ipconfiguration\"\n    subnet_id                     = azurerm_subnet.main.id\n    private_ip_address_allocation = \"Dynamic\"\n  }\n}\n```", "```\nresource \"azurerm_network_interface_security_group_association\" \"db\" {\n    network_interface_id      = azurerm_network_interface.db.id\n    network_security_group_id = azurerm_network_security_group.db_nsg.id\n}\n```", "```\nresource \"azurerm_virtual_machine\" \"db\" {\n  name                  = \"db\"\n  location              = var.location\n  resource_group_name   = azurerm_resource_group.main.name\n  network_interface_ids = [azurerm_network_interface.db.id]\n  vm_size               = var.vm_size\n  delete_os_disk_on_termination = true\n  storage_image_reference {\n    id   = data.azurerm_image.dbsig.id\n  }\n  storage_os_disk {\n    name              = \"db-osdisk\"\n    caching           = \"ReadWrite\"\n    create_option     = \"FromImage\"\n    managed_disk_type = \"Standard_LRS\"\n  }\n  os_profile {\n    computer_name  = \"db\"\n    admin_username = var.admin_username\n    admin_password = var.admin_password\n  }\n  os_profile_linux_config {\n    disable_password_authentication = false\n  }\n  tags = {}\n}\n```", "```\n$ terraform init\n```", "```\n$ terraform apply\nApply complete! Resources: 13 added, 0 changed, 0 destroyed.\nOutputs:\nweb_ip_addr = \"40.115.61.69\"\n```", "```\n\n```"]