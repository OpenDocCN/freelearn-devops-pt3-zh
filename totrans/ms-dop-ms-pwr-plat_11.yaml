- en: <st c="0">11</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="3">Managing the Environment Life Cycle with Design Best Practices</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="66">Every organization should prioritize building resilient solutions
    on top of governed and secure environments when developing any kind of business
    application.</st> <st c="226">Implementing</st> **<st c="239">DevOps</st>** <st
    c="245">in an uncontrolled and ungoverned environment can lead to non-compliant
    and inconsistent processes that can affect the efficiency and reliability of the
    application workloads.</st> <st c="422">Ungoverned environments are more prone
    to vulnerabilities, even if the potential harm is done inadvertently by</st> <st
    c="533">internal employees.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="552">This chapter focuses on exploring proven best practices and guidelines
    that can help organizations build environments that foster responsible innovation
    while ensuring compliance and security.</st> <st c="746">We will look into different
    design principles that touch areas of governance, compliance, security, and automation
    and look for ways how to automatically configure Power Platform environments to
    make them less prone</st> <st c="962">to misconfigurations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="983">We will look into the</st> **<st c="1006">Power Platform Well-Architected
    framework</st>** <st c="1047">and</st> **<st c="1052">Power Platform landing zones</st>**
    <st c="1080">and explain how landing zones can be deployed in organizations.</st>
    <st c="1145">We will continue with understanding what it means to describe application
    workloads with code and how environments can be managed with an automated approach
    instead of manually.</st> <st c="1323">As operation teams are here to set a governed
    workspace for everyone to innovate, we will finish the chapter by looking at Power
    Platform</st> **<st c="1461">Center of Excellence</st>** <st c="1481">(</st>**<st
    c="1483">CoE</st>**<st c="1486">), which helps organizations nurture app makers
    and improve adoption while looking</st> <st c="1570">at governance.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1584">As we can see, this chapter switches gears a bit and talks more
    about the capabilities that would be more relevant to operations teams.</st> <st
    c="1721">These are very important aspects of the adoption of the platform as well
    as the successful adoption of the DevOps approach.</st> <st c="1845">Nevertheless,
    it might be still valuable for developers and app makers to be aware of</st> <st
    c="1931">these options.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1945">We will cover the following</st> <st c="1974">main topics:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1986">Building on the design</st> <st c="2010">best practices</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2024">Automating environment life</st> <st c="2053">cycle management</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2069">Power</st> <st c="2076">Platform CoE</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2088">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2111">To follow along with this chapter, we recommend having the following</st>
    <st c="2181">in place:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="2190">Power Platform subscription</st>**<st c="2218">: We can sign
    up for a Power Platform development plan (</st>[<st c="2275">https://powerapps.microsoft.com/en-us/developerplan/</st>](https://powerapps.microsoft.com/en-us/developerplan/)<st
    c="2328">), if we already have a Microsoft Entra ID work account, or we can join
    the</st> **<st c="2405">Microsoft 365 Developer</st>** **<st c="2429">Program</st>**
    <st c="2436">(</st>[<st c="2438">https://developer.microsoft.com/en-us/microsoft-365/dev-program</st>](https://developer.microsoft.com/en-us/microsoft-365/dev-program)<st
    c="2501">).</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2504">Azure subscription</st>**<st c="2523">: We can provision a free
    Azure account following the guidance on this website:</st> [<st c="2604">https://azure.microsoft.com/en-us/free</st>](https://azure.microsoft.com/en-us/free)<st
    c="2642">. Once provisioned, the Azure portal can be accessed via the following</st>
    <st c="2713">URL:</st> [<st c="2718">https://portal.azure.com/</st>](https://portal.azure.com/)<st
    c="2743">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2744">Azure DevOps Services</st>**<st c="2766">: We can create a DevOps
    organization any time for</st> <st c="2818">free:</st> [<st c="2824">https://learn.microsoft.com/en-us/azure/devops/user-guide/sign-up-invite-teammates</st>](https://learn.microsoft.com/en-us/azure/devops/user-guide/sign-up-invite-teammates)<st
    c="2906">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2907">Visual Studio Code</st>**<st c="2926">: This could be the other
    IDE of choice or text</st> <st c="2975">editing tool.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2988">Terraform</st>**<st c="2998">: The installation guidance for
    Terraform can be found</st> <st c="3054">here:</st> [<st c="3060">https://developer.hashicorp.com/terraform/install</st>](https://developer.hashicorp.com/terraform/install)<st
    c="3109">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="3110">Samples</st>**<st c="3118">: The samples discussed in this chapter
    are located in the repository</st> <st c="3189">at</st> [<st c="3192">https://github.com/PacktPublishing/Mastering-DevOps-on-Microsoft-Power-Platform/tree/main/Chapter11</st>](https://github.com/PacktPublishing/Mastering-DevOps-on-Microsoft-Power-Platform/tree/main/Chapter11)<st
    c="3291">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="3292">Building on the design best practices</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="3330">This section focuses on the guidelines and best practices defined
    in the Power Platform Well-Architected framework, as well as the reference implementation
    known as a Power Platform</st> **<st c="3513">landing zone</st>**<st c="3525">.
    Following these practices will help organizations build robust, scalable, and
    secure Power</st> <st c="3618">Platform workloads.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3637">Power Platform Well-Architected</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**<st c="3669">Power Platform Well-Architected</st>** <st c="3701">is a</st>
    <st c="3707">framework that brings together best practices and recommendations
    that help organizations</st> <st c="3797">of every size design, build, and achieve
    the most optimal architecture design for their workload running on</st> <st c="3905">Power
    Platform.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3920">In the context of the framework, the term</st> **<st c="3963">workload</st>**
    <st c="3971">refers to the entire business solution that is built on the Power
    Platform.</st> <st c="4048">This solution is mapped to the business requirements,
    and it encompasses the application, data, and surrounding infrastructure that
    is supporting</st> <st c="4194">its operation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4208">Power Platform Well-Architected contains guidance that should be
    applied throughout all stages of the business solution development.</st> <st c="4342">These
    recommendations are applicable even as the enhancements options for the existing
    DevOps or DevSecOps process for Power Platform.</st> <st c="4477">A key objective
    of the Well-Architected framework is to allow organizations to continuously evaluate
    their business solution against the guidance and, through the received score,
    verify the stance of the organization with each pillar of the framework.</st>
    <st c="4729">This helps organizations to continue improving while keeping the
    workload aligned with the</st> <st c="4820">business requirements.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4842">Power Platform Well-Architected framework is built on</st> <st
    c="4897">the guidance of the Microsoft</st> **<st c="4927">Azure Well-Architected
    Framework</st>** <st c="4959">(</st>**<st c="4961">Azure WAF</st>**<st c="4970">).</st>
    <st c="4974">Similarly to Azure landing zones, which we will meet later in this
    section, Power Platform Well-Architected can also be used together with Azure
    WAF to help with the architectural design of the workloads that are spanning across
    Power Platform and Azure.</st> <st c="5229">This is significant for organizations
    that have already adopted Microsoft Azure services and have workloads</st> <st
    c="5337">in Azure.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5346">Power Platform Well-Architected consists of five foundational pillars
    that aim to enhance the quality of Power Platform workloads.</st> <st c="5478">These
    five pillars are organized around</st> <st c="5518">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="5532">Reliability</st>**<st c="5544">: Making</st> <st c="5554">sure
    that the workloads, used for running our business solutions, are meeting the uptime
    and that we have a recovery plan</st> <st c="5676">in place</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="5684">Security</st>**<st c="5693">: This</st> <st c="5700">helps with
    protecting the services from various threats</st> <st c="5757">and vulnerabilities</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="5776">Operational excellence</st>**<st c="5799">: This</st> <st c="5806">focuses
    on promoting responsible development and safe</st> <st c="5861">deployment practices</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="5881">Performance efficiency</st>**<st c="5904">: This</st> <st c="5912">focuses
    on making sure the workload is scalable and through health monitoring, we gain
    insights into the</st> <st c="6017">performance efficiency</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="6039">Experience optimization</st>**<st c="6063">: This</st> <st c="6070">is
    done to make the workload on which the solution is running easy</st> <st c="6138">to
    use</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6144">Each pillar has its own design principles, checklist, design recommendations,
    trade-offs, and set of assessment questions.</st> <st c="6268">For each pillar,
    some recommendations are easily achievable, while others require proper planning
    from the infrastructure and application standpoint to enable them.</st> <st c="6433">We
    also need to be aware that for every pillar there are trade-offs, where we might
    be losing characteristics of one pillar to benefit</st> <st c="6568">the other.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6578">The Power Platform Well-Architected assessment</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6625">Whether</st> <st c="6633">we are building new workloads or already
    have one up and running but would like to understand potential improvement points,
    Power Platform Well-Architected provides an assessment for each of the pillars
    that gives us recommendations and supporting material to help improve workload’s
    design.</st> <st c="6926">Recommendations that are received from the assessment
    tool should be exported and added to the project backlog in the DevOps tool, such
    as Azure Boards or GitHub Issues.</st> <st c="7096">We should be following a continuous
    improvement process by regularly assessing our environments.</st> <st c="7193">The
    Power Platform Well-Architected assessment can be found</st> <st c="7253">here:</st>
    [<st c="7259">https://aka.ms/powa/assessment</st>](https://aka.ms/powa/assessment)<st
    c="7289">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7290">Reliability</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="7302">This pillar focuses on</st> <st c="7326">making sure that we are
    building a resilient and reliable workload that is capable of recovering from
    any potential operational failures in a</st> <st c="7468">reasonable timeframe.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7489">When we are</st> <st c="7501">building our workload on Power Platform,
    it is on us to gather and document all business requirements.</st> <st c="7605">Business
    requirements will help us decide which tools and technologies will be supporting
    the workload as well as how both the infrastructure and application design will
    look.</st> <st c="7781">These decisions around technology and following the business
    requirements will be crucial for creating a recovery plan in case of an outage.</st>
    <st c="7922">To support the workload to be more resilient, we should incorporate
    monitoring capabilities, through which the workload can identify and act on operational
    failures.</st> <st c="8088">It will also serve as insights into the usage and
    can be used to improve</st> <st c="8161">the workload.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8174">Recommendation examples</st>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: <st c="8198">There</st> <st c="8205">are currently eight recommendation practices
    in the context of the reliability pillar, with some of them directly relevant
    to developers, for instance, implementing robust error handling and transient
    fault handling mechanisms in the business solution.</st> <st c="8458">Other recommendations
    are more for IT operations teams, such as continuously capturing the uptime to
    measure the solution’s</st> <st c="8582">health indicators.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8600">One of the recommendations might be particularly interesting since
    it connects DevOps practices with application resiliency testing by applying the
    principles of chaos engineering.</st> **<st c="8782">Chaos engineering</st>**
    <st c="8799">is a</st> <st c="8805">practice that helps organizations harden their
    workloads by systematically introducing controlled disruptions to the entire application
    workload to simulate</st> <st c="8962">real-world outages.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8981">Related to chaos engineering is another interesting practice for
    testing our workload called</st> **<st c="9075">fault injection testing</st>**<st
    c="9098">. This</st> <st c="9105">practice helps us to identify how our solution
    would respond to a specific component or dependency failure.</st> <st c="9213">In
    this case, the test is more intentional with injecting the fault into a specific
    component during the</st> <st c="9318">testing process.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9334">If we want to conduct such tests, it is good to know what our baseline
    behavior is.</st> <st c="9419">Depending on the experiment and what we plan to
    test, we can build a hypothesis of an experiment for which we measure the baseline
    behavior.</st> <st c="9560">Baseline behavior will serve as a benchmark to which
    we will compare the outcome of the performed experiment.</st> <st c="9670">To
    measure the baseline, we can simply just run and test our application/flow normally
    as is, without any interruptions.</st> <st c="9791">We then start by injecting
    the fault into the system and gathering insights from the analytics and telemetry
    data that we gathered by monitoring the workload.</st> <st c="9950">As an example
    of fault injection, we can introduce delays into the backend service or Power
    Automate flow, or return (mock) error codes when retrieving results from our Power
    Automate flow or backend service, to mimic service failures.</st> <st c="10186">Insights
    that we gathered are then documented and as we learn from them, we can build a
    remediation plan and improve</st> <st c="10303">our workload.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10316">As we</st> <st c="10323">can see, these practices are disruptive,
    therefore they should be performed in pre-production</st> <st c="10417">environments.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10430">Both of these testing practices are connected and should be part
    of the continuous improvement process that DevOps promotes.</st> <st c="10556">We</st>
    <st c="10558">can build our own fault injection tests using</st> **<st c="10605">Power
    Apps Test Engine</st>**<st c="10627">, for example, by using the connector mocking
    capability.</st> <st c="10685">The test can be called through PAC CLI, which allows
    us to automatize it within the CI/CD pipelines.</st> <st c="10786">We have shown
    an example of such in</st> [*<st c="10822">Chapter 8</st>*](B22208_08.xhtml#_idTextAnchor134)<st
    c="10831">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10832">For those cases where we might have backend systems on Azure or
    are utilizing Azure API Management to securely expose APIs through custom connectors,
    we can utilize a service called</st> **<st c="11015">Azure Chaos Studio</st>**
    <st c="11033">for</st> <st c="11038">running experiments against the services
    that are running on Azure.</st> **<st c="11106">Azure Chaos Studio</st>** <st
    c="11124">is a managed chaos engineering experimentation platform that allows
    us to set up different experiments, with the targets being in Azure.</st> <st
    c="11262">With this tool, we can define experiments that will simulate real-life
    disruptions, such as network connectivity issues and backend service</st> <st
    c="11401">performance degradations.</st> <st c="11428">More on Azure Chaos Studio
    can be found</st> <st c="11468">here:</st> [<st c="11474">https://azure.microsoft.com/en-us/products/chaos-studio</st>](https://azure.microsoft.com/en-us/products/chaos-studio)<st
    c="11529">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11530">Security</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="11539">The</st> <st c="11543">next pillar in Well-Architected is related
    to security.</st> <st c="11600">It</st> <st c="11602">focuses on building workloads
    that can withstand potential attacks and integrates three essential security principles
    – confidentiality, integrity, and availability.</st> <st c="11769">When designing
    a business solution or workload architecture, we recommend adopting</st> <st c="11852">the</st>
    **<st c="11856">Microsoft Zero Trust model</st>** <st c="11882">to mitigate security
    risks.</st> <st c="11911">The</st> <st c="11914">Microsoft Zero Trust model centers
    around three</st> <st c="11963">key principles:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="11978">Verify explicitly</st>**<st c="11996">: Ensure</st> <st c="12005">the
    access is granted only to the trusted entities by performing authentication and
    authorization based on various data points.</st> <st c="12134">Doing so will allow
    entities to access only what they are entrusted to access and perform only those
    actions that are available</st> <st c="12262">to them.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="12270">Least privilege access</st>**<st c="12293">: Follows</st> <st
    c="12303">the principle of least privilege.</st> <st c="12338">By limiting permissions
    to the identities, we</st> <st c="12384">are restricting what can be done for
    how long and over</st> <st c="12439">which resources.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="12455">Assume breach</st>**<st c="12469">: Workloads</st> <st c="12481">should
    be designed in a way that we assume a breach can happen.</st> <st c="12546">With
    this in mind, we are implementing controls to lower the risk and potential damage
    if it comes</st> <st c="12645">to this.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="12653">Recommendation examples</st>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: <st c="12677">This</st> <st c="12683">security pillar focuses on 10 recommendations.</st>
    <st c="12730">Some of them were already covered in</st> [*<st c="12767">Chapter
    7</st>*](B22208_07.xhtml#_idTextAnchor115) <st c="12776">when we talked about
    DevSecOps.</st> <st c="12809">This included practices such as threat modeling,
    static application security testing, and application secrets protection.</st>
    <st c="12931">We also mentioned that it is important to start hardening our security
    posture on the identity level, as it is the first line of defense.</st> <st c="13069">Since
    all Power Platform products utilize Microsoft Entra ID, we can build identity
    perimeter through configuring conditional access control, access permissions through
    security roles, and more.</st> <st c="13264">To understand who did what in the
    system, we should be enabling audit logs for relevant environments.</st> <st c="13366">Keeping
    an audit trail is important for preventing any potential repudiation attack.</st>
    <st c="13451">However, instead of manually reviewing the logs to try and find
    common attack patterns, we can utilize tools that are</st> <st c="13569">purposely
    built.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="13585">Microsoft Sentinel</st>** <st c="13604">is a cloud</st> **<st
    c="13616">security information and event management</st>** <st c="13657">(</st>**<st
    c="13659">SIEM</st>**<st c="13663">) tool in</st> <st c="13674">Microsoft Azure
    that helps monitor and detect potential threats</st> <st c="13738">by analyzing
    activity logs from different Power Platform services.</st> <st c="13805">By using
    the solution for Power Platform, we can now use</st> <st c="13862">Microsoft Sentinel
    to detect different anomalies that are related to Power Platform, including Dataverse.</st>
    <st c="13968">Through different data connectors, the solution ingests and analyzes
    activity logs and inventory data.</st> <st c="14071">Data connectors collect data</st>
    <st c="14100">from different data sources, allowing Sentinel to use built-in analytics
    rules to detect</st> <st c="14189">the following:</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14203">Whether multiple Power Apps applications</st> <st c="14245">were
    deleted</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="14257">Whether any compromised user, flagged by Entra ID, accessed</st>
    <st c="14318">Power Platform</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="14332">Whether apps were shared with newly created</st> <st c="14377">guest
    users</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="14388">Whether the DLP policy got updated or removed</st> <st c="14435">and
    more</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="14443">Where departing employees create or modify Power Automate flows,</st>
    <st c="14509">and more</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="14517">The installation of the solution is done in the Microsoft Sentinel
    service in the Azure portal.</st> <st c="14614">To use the Azure portal, we are
    required to log in to our Azure subscription.</st> <st c="14692">There, we would
    need to provision a Log Analytics workspace and Microsoft Sentinel services.</st>
    <st c="14785">Once we have done that, we can proceed to our Sentinel service.</st>
    <st c="14849">In the left navigation bar under</st> **<st c="14882">Content management</st>**
    <st c="14900">|</st> **<st c="14903">Content hub</st>**<st c="14914">, we can
    find a list of all solutions available for Microsoft Sentinel.</st> <st c="14986">Using
    the search, we can easily find the Power Platform solution.</st> <st c="15052">Select
    it and click</st> **<st c="15072">Install</st>**<st c="15079">. Once installed,
    we need to enable data connectors, as can be seen in</st> *<st c="15150">Figure
    11</st>**<st c="15159">.1</st>*<st c="15161">. To complete the process, we need
    to follow a series of steps, such as</st> <st c="15233">creating an</st> **<st
    c="15245">Azure Data Lake Storage Gen2</st>** <st c="15273">instance, which will
    be used for Power Platform self-service analytics, and making sure that we have
    all the necessary permissions to deploy the required components to Azure.</st>
    <st c="15449">All seven data connectors have to be configured since each has its
    own purpose.</st> <st c="15529">We recommend following the guidance mentioned
    in the note following</st> *<st c="15597">Figure 11</st>**<st c="15606">.1</st>*
    <st c="15608">to verify whether the installa</st><st c="15639">tion</st> <st c="15645">completed
    successfully:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B22208_11_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="17486">Figure 11.1 – Microsoft Sentinel solution for Power Platform</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17546">Microsoft Sentinel solution for Power Platform – prerequisites
    and installation</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17626">This solution helps us detect and respond to potential threats
    and incidents related to Power Platform.</st> <st c="17731">The solution is currently
    in preview.</st> <st c="17769">Information about the prerequisites and how they
    can be deployed is accessible</st> <st c="17848">here:</st> [<st c="17854">https://learn.microsoft.com/en-us/azure/sentinel/business-applications/deploy-power-platform-solution</st>](https://learn.microsoft.com/en-us/azure/sentinel/business-applications/deploy-power-platform-solution)<st
    c="17955">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17956">In the</st> <st c="17964">context of Power Platform Well-Architected,
    one additional practice recommended by the security pillar involved</st> <st c="18076">conducting</st>
    **<st c="18087">simulated attacks</st>**<st c="18104">. These simulations serve
    different purposes.</st> <st c="18150">Of course, through such an exercise, we
    would like to identify any potential threats, but by doing so we can also verify
    the preparedness of our engineers and the remediation processes, especially with
    the war game exercise, where we have red and blue teams.</st> <st c="18409">This
    involves first attempting to deliver a simulated attack, while the other team
    is trying to identify and defend from</st> <st c="18530">the attack.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18541">Apart from simulated attacks, the</st> **<st c="18576">Security</st>**
    <st c="18584">workspace in Power Pages is a place where we can run security scans
    to assess websites for any potential security vulnerabilities.</st> <st c="18716">It
    is a one-stop shop to also find information on all configured roles and permissions
    related to the pages.</st> <st c="18825">We can also configure additional rules
    for the web application firewall that protects</st> <st c="18910">our websites.</st>
    <st c="18925">More information about security scans can be found</st> <st c="18976">here:</st>
    [<st c="18982">https://learn.microsoft.com/en-gb/power-pages/security/security-scan</st>](https://learn.microsoft.com/en-gb/power-pages/security/security-scan)<st
    c="19050">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B22208_11_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="20121">Figure 11.2 – A Power Pages security scan</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20162">To understand</st> <st c="20177">the overall security posture
    of our Power Platform tenant, Microsoft recently introduced the</st> **<st c="20270">Security</st>**
    <st c="20278">hub in the Power Platform admin center.</st> <st c="20319">It allows
    administrators to quickly act on the identified recommendations for improving
    the security posture, such as applying DLP policies to the environment, configuring
    t</st><st c="20492">enant isolation,</st> <st c="20510">and auditing.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B22208_11_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="22366">Figure 11.3 – The Power Platform Security hub</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22411">Operational excellence</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="22434">This</st> <st c="22440">pillar emphasizes creating a work environment
    that prioritizes operational excellence.</st> <st c="22527">With this, we mean
    bringing development best practices to workload teams by implementing a fusion
    development approach and adopting a DevOps culture.</st> <st c="22677">Doing so
    will allow workload teams to follow processes that are automated and repeatable
    and will lead to safe development and deployment practices.</st> <st c="22826">Processes
    have to follow compliance and governance standards that are set within the organization
    to be efficient and effective.</st> <st c="22955">Building consistent processes
    that are aligned with organizational policies will most probably lead to additional
    time and cost when delivering</st> <st c="23099">the project.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23111">There are currently 11 recommendations for this pillar that are
    focused on the fusion development approach and building DevOps practices, standardizing
    development practices, building a monitoring system, finding automation opportunities
    for reducing manual tasks, and implementing a</st> <st c="23396">testing strategy.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23413">Since many of these recommendations were already covered throughout
    the book, we will skip to the next pillar.</st> <st c="23525">For in-depth guidance,
    follow the provided link in</st> *<st c="23576">Further reading</st>*<st c="23591">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23592">Performance efficiency</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="23615">The</st> <st c="23619">next pillar concentrates on</st> <st c="23648">recommendations
    and understanding trade-offs that are related to building scalable and performant
    workloads without sacrificing user experience.</st> <st c="23793">Design principles
    help us set performance targets around the business requirements for the workload
    that we are developing.</st> <st c="23917">When defining performance objectives,
    we should consider how users will perceive our solution and what would be an unacceptable
    performance for them.</st> <st c="24067">We should set targets that are achievable
    and</st> <st c="24113">document them.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24127">To make sure that the performance targets are met, we are continuously
    monitoring the workload throughout its life cycle to understand whether we are
    reaching the agreed targets.</st> <st c="24307">In case the targets are not met
    properly, we should optimize the workload.</st> <st c="24382">For monitoring,
    we are using the built-in capabilities of Power Platform.</st> <st c="24456">As
    we have already seen throughout this book, Power Platform can extend with</st>
    **<st c="24533">Azure Application Insights</st>**<st c="24559">. Azure Application
    Insights, being</st> <st c="24594">an application performance monitoring tool
    that is part of Azure Monitor, allows us to not only gather telemetry data from
    our Power Platform applications but also from other services that might be running
    on the Azure cloud or in an on-premises environment.</st> <st c="24854">This helps
    us understand the broader picture and bottlenecks in our solution architecture
    since users could blame Power Platform for poor performance since this is the
    interaction for them.</st> <st c="25044">However, the performance issues might
    be in other backend systems or with database systems, where procedures are taking
    a long time to execute</st> <st c="25187">various queries.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25203">One of the important aspects of planning for performant workloads
    is also to consider Power Platform request limits.</st> <st c="25321">As Power
    Platform</st> <st c="25338">is a</st> **<st c="25344">software-as-a-service</st>**
    <st c="25365">(</st>**<st c="25367">SaaS</st>**<st c="25371">) platform, services
    and the backend systems that are powering the services have predefined limits
    to make sure that quality and service-level agreements are met for every Power
    Platform user.</st> <st c="25565">Power Platform has</st> **<st c="25584">service
    protection limitations</st>** <st c="25614">in place</st> <st c="25623">that protect
    Power Platform services from an abnormal or excessive number of requests.</st>
    <st c="25711">These resource limitations should be considered by the solution
    architect when designing the architecture for</st> <st c="25821">the workload.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25834">Power Platform request limits</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25864">Although</st> <st c="25873">Power Platform request limits have
    been increasing and it is highly unlikely that the request limit will be reached
    by regular users, it is worth noting that these limits exist and should be considered
    when preparing architecture design.</st> <st c="26112">More information about
    the request limits can be found</st> <st c="26167">here:</st> [<st c="26173">https://learn.microsoft.com/en-us/power-platform/admin/api-request-limits-allocations</st>](https://learn.microsoft.com/en-us/power-platform/admin/api-request-limits-allocations)<st
    c="26258">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26259">Recommendation examples</st>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: <st c="26283">Currently, this</st> <st c="26299">pillar contains 10 recommendations
    that focus on monitoring the workload, operations, and user behavior, which will
    help us analyze and improve the performance of the Power Platform workload.</st>
    <st c="26492">A large portion of this pillar focuses on optimizing business logic,
    custom code, and data performance, as well as understanding the performance of
    the business process flows and finding potential optimization opportunities.</st>
    <st c="26717">Capturing telemetry data in Azure Monitor allows us to gain insights
    into the performance and set alerts to be informed about the current state of
    the workload.</st> <st c="26878">Such analytical data could serve us also as a
    deployment gate in CI/CD pipelines – a common example of that would be a backend
    service that is being used through a custom connector in Power Platform.</st>
    <st c="27078">If the utilization of the service is high for some time due to high
    peak or performance issues, we can stop and postpone the deployment of our workload
    until this</st> <st c="27241">gets resolved.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27255">One important DevOps practice is implementing</st> <st c="27302">the</st>
    **<st c="27306">feedback loop</st>**<st c="27319">. Apart from setting up monitoring
    to gather performance bottlenecks, see how the workload is operating during peak
    times, and see whether any errors occurred, we can use Azure Application Insights
    to gain insights into user behavior and use this information to plan application
    improvements.</st> <st c="27612">We should also consider implementing channels
    through which users will be able to share their feedback and suggestions to the
    workload team regarding the developed business solution.</st> <st c="27795">This
    will help us to make sure that the solution is relevant to their needs.</st> <st
    c="27872">Such a practice already exists in many off-the-shelf products, where
    some sort of feedback button is implemented in</st> <st c="27988">the application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28004">Something similar can also be implemented in the business solutions
    developed in Power Platform.</st> <st c="28102">An example of this with step-by-step
    guidance is available on this</st> <st c="28169">website:</st> [<st c="28178">https://learn.microsoft.com/en-us/power-apps/maker/canvas-apps/application-insights#create-custom-trace-events</st>](https://learn.microsoft.com/en-us/power-apps/maker/canvas-apps/application-insights#create-custom-trace-events)<st
    c="28288">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28289">Experience optimization</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="28313">The</st> <st c="28318">last of the core pillars of the Power Platform
    Well-Architected framework focuses on the user</st> <st c="28411">experience and
    what developers should consider during development.</st> <st c="28479">Applications
    should be built in a way that they are aligned with the user expectations as well
    as designed to meet any specific requirements.</st> <st c="28621">Interaction
    with the application should be simple and logical for users to complete the work
    that is required most effectively.</st> <st c="28749">Processes around application
    should also be simple to understand</st> <st c="28814">and intuitive.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28828">We should build user-friendly applications that are inclusive
    and can be used by users with disabilities.</st> <st c="28935">If the application
    will be used by users worldwide, we should consider providing localized versions
    to improve</st> <st c="29046">user engagement.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29062">Recommendation examples</st>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: <st c="29086">This</st> <st c="29092">pillar contains nine recommendations that
    are focused on building applications that are inclusive, engaging, and intuitive.</st>
    <st c="29216">Here, we can find guidelines on how to build</st> <st c="29260">applications
    to be responsive, how to build reusable components utilizing</st> **<st c="29335">Fluent
    Design</st>** <st c="29348">using the</st> **<st c="29359">Power Platform Creator
    Kit</st>**<st c="29385">, how to implement robust</st> <st c="29410">error-handling
    controls, and more.</st> <st c="29446">In the context of this pillar, DevOps practices
    help us to follow standardized processes through which we can bring changes more
    rapidly to</st> <st c="29586">the users.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29596">In-depth guidance on Power Platform Well-Architected</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29649">This section</st> <st c="29663">went through some of the Power
    Platform Well-Architected core pillars and shared some recommendation examples.</st>
    <st c="29774">Each pillar has its own set of design principles, recommendations,
    and, more importantly, trade-offs, which workload teams should be familiar with</st>
    <st c="29921">when following this guidance.</st> <st c="29951">To get more information
    about the tools available and the assessment, please navigate to this</st> <st
    c="30045">URL:</st> [<st c="30050">https://learn.microsoft.com/en-us/power-platform/well-architected/</st>](https://learn.microsoft.com/en-us/power-platform/well-architected/)<st
    c="30116">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30117">We have</st> <st c="30125">briefly touched on some of the recommendations
    that help us understand what the purpose of Power Platform Well-Architected is.</st>
    <st c="30253">Going through each pillar and understanding recommendations through
    a set of best practices and guidelines for making informed decisions on the design
    of the modern applications in Power Platform would greatly help everyone when
    building in Power Platform, from simple to very complex</st> <st c="30538">business
    solutions.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30557">In the next part, we will look at how to follow architecture best
    practices with a reference implementation that is described in</st> *<st c="30687">Power
    Platform</st>* *<st c="30702">landing zones</st>*<st c="30715">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30716">Power Platform landing zones</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="30745">When starting</st> <st c="30759">the Power Platform adoption journey,
    it is common to start working in a default, personal productivity environment
    and gradually expand from there.</st> <st c="30908">As we have seen in the Power
    Platform adoption maturity model, this kind of approach aligns with the early
    stages of organizational maturity.</st> <st c="31050">However, as organizations
    become more familiar with the platform, they start looking for ways to protect
    their tenant, set up an environment strategy, and build policies around them.</st>
    <st c="31233">Often, organizations inquire about the optimal architecture design
    to set up Power Platform to handle enterprise-scale scenarios.</st> <st c="31363">This
    is where landing zones can be a valuable resource to</st> <st c="31421">turn to.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="31429">Landing zones</st>** <st c="31443">serve as reference implementations
    that establish well-managed environments for running specific workloads.</st>
    <st c="31552">They follow best practices for building a strong, secure, and scalable
    foundation that will be used inside the organization to grow further as the companies
    continue with the adoption of certain technologies.</st> <st c="31761">They follow
    key design principles that span across different design areas, such as licensing,
    security, governance, automation, and DevOps.</st> <st c="31901">Through landing
    zones, Microsoft provides a reference implementation for various technologies
    and services.</st> <st c="32009">One of the most widely known is Azure landing
    zones, the umbrella landing zone that helps organizations set up Azure environments</st>
    <st c="32139">and services.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32152">Power Platform landing zones</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**<st c="32181">Power Platform landing zones</st>** <st c="32210">represent
    a reference implementation that organizations can</st> <st c="32271">use to build
    their initial Power Platform architecture design within their Power Platform tenant.</st>
    <st c="32369">It can be seen also as a methodology that includes guidelines on
    an architectural design, following implementation best practices.</st> <st c="32500">In
    the context of Power Platform, a landing zone would represent an environment with
    all the supporting services, policies, and security roles configured to provide
    organizations with a starting point that is aligned with best practices and recommendations.</st>
    <st c="32758">Through available controls, organizations can decide which security
    policies and governance requirements should be provisioned to match the</st> <st
    c="32898">organization’s requirements.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32926">Power Platform landing zones extend Azure landing zones in a way
    that can be plugged into the existing Azure subscriptions, which allows customers
    that have already adopted Azure cloud services to unlock new application modernization
    scenarios using the LCNC development platform, such as Microsoft Power Platform.</st>
    <st c="33242">The central point that connects Azure subscriptions with Power Platform
    environments is Microsoft Entra ID, an identity and access</st> <st c="33373">management
    system:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B22208_11_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="33494">Figure 11.4 – Extending Azure landing zones with Power Platform
    landing zones</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33571">Design principles and critical design areas</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="33615">Power Platform landing zone architecture is built on five design
    principles.</st> <st c="33693">These principles serve as a</st> <st c="33721">guideline
    when any further design decisions need to</st> <st c="33773">be taken:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="33782">Environment democratization</st>**<st c="33810">: Environments
    serve as a unit of management, with security and policy boundaries.</st> <st c="33894">They
    are created to support business units and developers and address</st> <st c="33964">business
    requirements.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="33986">Policy-driven governance</st>**<st c="34011">: Implementing
    DLP policies gives app makers flexibility to create application workloads while</st>
    <st c="34107">staying compliant.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="34125">Single control and management plane</st>**<st c="34161">: Power
    Platform management is done through native Power Platform admin tools, to provide
    a</st> <st c="34254">consistent experience.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="34276">Persona agnostic</st>**<st c="34293">: Any makers are welcome
    to innovate in Power Platform and are treated equally from the perspective</st>
    <st c="34394">of capabilities.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="34410">Power Platform native design and platform roadmap alignment</st>**<st
    c="34470">: Whenever possible, native services and capabilities should be used,
    which will ensure that once new features are released, applications can benefit
    from these new capabilities.</st> <st c="34650">The Power Platform roadmap allows
    admins and makers to be informed about the new capabilities and adopt</st> <st
    c="34754">them accordingly.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="34771">Next to the design principles, the Power Platform landing zone
    architecture includes design areas that play an important part in the design decisions.</st>
    <st c="34923">They serve as a compass for deciding on the architecture’s design.</st>
    <st c="34990">There are eight design areas that include considerations and recommendations,
    which we should consider when planning the architectural design.</st> <st c="35133">We
    can see that some of these design areas are similar to the recommendations in
    the Well-Architected pillars, such as platform automation</st> <st c="35272">and
    DevOps.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="35283">Here are the</st> <st c="35297">critical design areas for</st>
    <st c="35323">Power Platform:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="35338">Licensing and AD tenants</st>**<st c="35363">: Since licenses
    are the first point of control for allowing users access to Power Platform services,
    this design area focuses on understanding how licenses impact environment access,
    which licensing model would be most appropriate (including a pay-as-you-go plan),
    and the recommendations around assigning licenses</st> <st c="35680">to users.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="35689">Identity and access management</st>**<st c="35720">: Identity
    and access management together</st> <st c="35763">with</st> **<st c="35768">role-based
    access control</st>** <st c="35793">(</st>**<st c="35795">RBAC</st>**<st c="35799">)
    play an important part in enabling users’ ability to operate with Power Platform.</st>
    <st c="35884">This design area focuses on possible controls to secure access to
    tenants through conditional access policies and multifactor authentication, as
    well as other authorization rules that are aligned with the organization’s security
    and</st> <st c="36117">regulatory requirements.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="36141">Environments</st>**<st c="36154">: Environments play an important
    part in isolating data and application workloads.</st> <st c="36238">This</st>
    <st c="36242">design area covers the importance of good environment strategy and
    configuration options, such as selecting the geo-location of the environment,
    enabling auditing, and other controls for monitoring the behavior of users’ environments.</st>
    <st c="36478">Additionally, it focuses also on enabling managed environments to
    provide an additional set of premium capabilities</st> <st c="36594">and control.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="36606">Security, governance, and compliance</st>**<st c="36643">:
    Next to licenses and RBAC, this design area focuses on providing recommendations
    around DLP policies that define the classification of connectors and their usage
    policy.</st> <st c="36816">Controlling the usage of connectors plays an important
    part in safe</st> <st c="36884">platform adoption.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="36902">Management and monitoring</st>**<st c="36928">: With the use
    of the admin center and other first-party tools, administrators are equipped with
    the tools needed to manage Power Platform environments and build automation tasks.</st>
    <st c="37109">For monitoring performance and reviewing audit trails, Power Platform
    can connect with other services such as Azure Monitor, Microsoft Entra ID, and
    Microsoft Purview to enable additional monitoring and</st> <st c="37312">auditing
    capabilities.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="37334">Business continuity and disaster recovery</st>**<st c="37376">:
    Organizations should have scenarios in place to ensure resilient environments
    with continuous availability.</st> <st c="37487">Among continuous availability,
    here we also focus on backups and the environment</st> <st c="37568">restoring
    process.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="37586">Connectivity and interoperability</st>**<st c="37620">: This
    design area touches on possible connectivity models to and from the Power Platform
    services.</st> <st c="37721">As data can be located outside of the Power Platform,
    it’s important to understand the possibilities to connect to it, either through
    the</st> <st c="37859">on-premises data gateway or</st> **<st c="37887">virtual
    network</st>** <st c="37902">(</st>**<st c="37904">VNet</st>**<st c="37908">)
    data gateway (when using Azure data services).</st> <st c="37958">Both of these
    services have their own limitations and requirements, including licensing requirements,
    which</st> <st c="38065">can impact decisions.</st> <st c="38088">Where needed,
    Azure ExpressRoute can be used to connect organizations with Microsoft cloud services
    using private connectivity between the organization’s on-premises network and
    Microsoft cloud services.</st> <st c="38292">This also makes connections more
    predictable, which is more suitable for mission-critical applications.</st> <st
    c="38396">Organizations that have strict regulatory requirements might be also
    interested</st> <st c="38476">in ExpressRoute.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="38492">Platform automation and DevOps</st>**<st c="38523">: Power
    Platform landing zones are encouraging organizations to implement DevOps practices
    so that IT admin teams and pro-developers collaborate to not only manage the application
    life cycle, but also manage Power Platform holistically through environment life
    cycle management, security monitoring, cost management,</st> <st c="38841">and
    more.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="38850">As we can see, Power Platform landing zones provide a great insight
    into a set of design considerations and recommendations that can serve as a starting
    point for organizations to build an architectural design that incorporates these
    design considerations.</st> <st c="39108">Combined with Power Platform Well-Architected,
    we now have extensive guidance to drive decisions on architecture guidance for
    modern application solutions on</st> <st c="39266">Power Platform.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39281">To see these design areas in action, we can take a look at the</st>
    <st c="39345">reference implementation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39370">Deploying a Power Platform landing zone reference implementation</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="39435">A</st> <st c="39438">Power Platform landing zone reference implementation
    is a modular architecture reference that uses design principles and critical design
    areas to help organizations build environments that will support application workloads.</st>
    <st c="39663">This reference implementation can be customized so that only needed
    parts of it are deployed to the</st> <st c="39763">organization’s tenant.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39785">To deploy a Power Platform landing zone reference implementation,
    we need an Azure subscription and a Power Platform tenant.</st> <st c="39911">We
    have provided links to guidance in the</st> *<st c="39953">Technical requirements</st>*
    <st c="39975">part of this chapter to provision them</st> <st c="40015">if needed.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40025">As part of the</st> <st c="40041">prerequisites before deploying
    landing zones, we need to first create a</st> **<st c="40113">user-assigned managed
    identity</st>** <st c="40143">(</st>**<st c="40145">UMI</st>**<st c="40148">),
    which</st> <st c="40157">has permission to use the Power Platform APIs.</st> <st
    c="40205">This can be done by going to the Azure portal and creating a</st> <st
    c="40266">new UMI:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40274">On the Azure portal, we should search for</st> `<st c="40317">Managed
    Identities</st>` <st c="40335">and open the</st> **<st c="40349">Managed Identities</st>**
    <st c="40367">page, which presents all the managed identities in</st> <st c="40419">your
    tenant:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22208_11_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="40785">Figure 11.5 – Managed Identities</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40817">To create a new UMI, we then click</st> <st c="40853">on</st>
    **<st c="40856">Create</st>**<st c="40862">:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22208_11_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="41300">Figure 11.6 – Creating a new managed identity</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41345">At this stage, we need to provide all the details for creating
    the managed identity.</st> <st c="41431">This</st> <st c="41435">includes selecting</st>
    **<st c="41455">Azure Subscription</st>**<st c="41473">, where we either already
    have a resource group or we can provide a new resource group from this</st> <st
    c="41570">screen directly.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41586">By providing managed identity instance details, such as selecting
    the Azure region in which the UMI will be provisioned and the name, we are ready
    to create the UMI by</st> <st c="41755">clicking</st> **<st c="41764">Next</st>**<st
    c="41768">:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22208_11_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="42135">Figure 11.7 – Provisioning a new UMI</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42171">On the next screen, we can add tags.</st> <st c="42209">We recommend
    adding tags to the Azure resources</st> <st c="42257">to be able to categorize
    them later and map them to the correct cost center in the organization.</st> <st
    c="42354">Once completed, we proceed by clicking</st> **<st c="42393">Review +
    create</st>**<st c="42408">. This will launch a validation</st> <st c="42440">process
    to validate the</st> **<st c="42464">Azure Resource Manager</st>** <st c="42486">(</st>**<st
    c="42488">ARM</st>**<st c="42491">) template.</st> <st c="42504">Once the validation
    process completes, we can provision resources by</st> <st c="42573">clicking</st>
    **<st c="42582">Create</st>**<st c="42588">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="42589">Once a new UMI is created, we proceed with opening the resource,
    and on the</st> **<st c="42666">Overview</st>** <st c="42674">screen of</st> **<st
    c="42685">Managed Identity</st>**<st c="42701">, we find and copy the</st> **<st
    c="42724">Client ID</st>** <st c="42733">information.</st> <st c="42747">This
    will be required for the next step</st> <st c="42787">in PowerShell:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22208_11_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="43313">Figure 11.8 – The managed identity Overview information</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43368">Now, we are</st> <st c="43380">ready to run a local PowerShell
    session or proceed</st> <st c="43431">with</st> **<st c="43437">Azure Cloud Shell</st>**<st
    c="43454">. Azure Cloud Shell comes with many tools and modules preinstalled,
    which simplifies the management, especially if we are working on a device where
    we have</st> <st c="43610">limited permissions.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43630">The following code shows us how to use the</st> `<st c="43674">PowerOps</st>`
    <st c="43682">PowerShell module to access Power Platform APIs and register newly
    created UMI as an admin management application.</st> <st c="43798">This is a prerequisite
    for the successful deployment of a Power Platform landing zone reference implementation
    through</st> <st c="43917">ARM templates.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43931">If we are running these commands locally, we should make sure
    that we install both the</st> `<st c="44019">Az.Accounts</st>` <st c="44030">and</st>
    `<st c="44035">PowerOps</st>` <st c="44043">modules.</st> <st c="44053">With Azure
    Cloud Shell, this step is</st> <st c="44090">not required:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="44180">Once the modules are installed, we need to connect to our Azure
    tenant.</st> <st c="44253">We do this using the</st> `<st c="44274">Connect-AzAccount</st>`
    <st c="44291">command.</st> <st c="44301">If our Azure administrator is configured
    with multifactor authentication, we need to use the special flag with a command
    that will provide us the interactive authentication with</st> <st c="44479">device
    code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: <st c="44534">Once connected to Azure, we need to make sure we are using the
    right Azure subscription.</st> <st c="44624">If the one that we will be working
    in is the default, then we do not need to perform this command.</st> <st c="44723">If
    we have multiple subscriptions, we should make sure that we are in the right Azure
    subscription.</st> <st c="44823">The Azure subscription ID can be found in the
    Azure portal or by using</st> `<st c="44894">Get-AzSubscription</st>`<st c="44912">,
    which returns a list of all subscriptions, their IDs, and their states.</st> <st
    c="44986">To set the current working context, we use the command with the</st>
    <st c="45049">subscription ID:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <st c="45116">Finally, we are ready to perform the registration of the UMI.</st>
    <st c="45179">We can copy the client ID from the previously created identity on
    the</st> <st c="45249">Azure portal:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <st c="45352">Once the registration process is done, we can proceed with the
    deployment setup.</st> <st c="45434">On the GitHub repository that hosts Power
    Platform landing zones implementation guidance (</st>[<st c="45524">https://github.com/microsoft/industry/tree/main/foundations/powerPlatform</st>](https://github.com/microsoft/industry/tree/main/foundations/powerPlatform)<st
    c="45598">), we will find a</st> **<st c="45617">Deploy to Microsoft Cloud</st>**
    <st c="45642">button.</st> <st c="45651">By selecting this option, we are transferred
    to the Azure portal, where deployment of Power Platform</st> <st c="45752">landing
    zones through a custom ARM template</st> <st c="45796">will initiate:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B22208_11_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="47001">Figure 11.9 – The Power Platform landing zones deployment template
    in the Azure portal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="47087">Looking at</st> *<st c="47099">Figure 11</st>**<st c="47108">.9</st>*<st
    c="47110">, we can see that the first tab in the process of setting up a</st>
    <st c="47173">landing zone reference implementation is</st> **<st c="47214">Deployment
    Setup</st>**<st c="47230">. This is where we connect to the newly created UMI
    and select our Azure subscription as well</st> <st c="47324">as location.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="47336">The next tab,</st> **<st c="47351">Security, Governance, and Compliance</st>**<st
    c="47387">, allows tenant-wide DLP policy configuration, by selecting different
    levels of restrictions for connectors.</st> <st c="47496">The DLP policy created
    in this step will serve as a baseline policy and new DLP policies can be added
    later.</st> <st c="47605">Additional policies such as tenant isolation and guest
    users and sharing settings can be</st> <st c="47694">applied here.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="47707">The next tab is</st> **<st c="47724">Admin Environment and Settings</st>**<st
    c="47754">, which allows organizations to create separate admin environments that
    will be used for administration purposes only – for example, we can create a separate
    environment in which we will</st> <st c="47941">deploy a</st> **<st c="47950">CoE
    Starter Kit</st>**<st c="47965">. Creating separate admin environments will result
    in having separate development, test, and production environments, to support
    the application life cycle management of our business solutions.</st> <st c="48159">Here,
    we can also find a policy to disallow users to create different types of environments</st>
    <st c="48251">by themselves.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="48265">Continuing forward, we have</st> **<st c="48294">Management and
    Monitoring</st>**<st c="48319">. Here, we can configure</st> <st c="48343">additional
    Azure services to be used for monitoring purposes, such as Application Insights
    in Azure Monitor.</st> <st c="48453">Additionally, we can enable tenant-level
    analytics for</st> <st c="48508">Power Platform.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="48523">The final step in the process is to configure additional landing
    zones (environments) that will be specific to citizen developers, pro-developers,
    or industry solutions.</st> <st c="48694">If we want, we can skip this step and
    later, as we realize that the demand has increased and more specific environments
    would be needed, we can use the</st> **<st c="48846">Landing Zones vending machine
    template</st>** <st c="48884">option available on the same Power Platform landing
    zones GitHub repository, to provision</st> <st c="48975">more environments.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="48993">At the end of the process, we can review all the configuration
    options we have made and finish the provisioning process by selecting the</st>
    **<st c="49131">Create</st>** <st c="49137">button.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="49145">These tabs hold configuration settings that address critical design
    areas for the reference implementation.</st> <st c="49254">These are the things
    that we should consider when creating our own architectural design.</st> <st c="49343">Even
    if we are coming from a smaller organization where implementing landing zones
    seems too much to handle, we should still be following critical design areas and
    look at the landing zone reference implementation as our north star, our guidance
    on where we should be heading to implement best practices and guardrails in our
    environments to protect organizational data.</st> <st c="49714">We can start small,
    but as we grow our adoption, we will see the benefits of landing zones through
    the standardized and consistent approach for provisioning</st> <st c="49871">governed
    environments.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="49893">Now that we have looked at how a landing zone reference implementation
    can be used to provision new environments, we will move toward the idea of creating
    and managing environments automatically using various tools, while still including
    the important parts of design areas, such as adding DLP policies</st> <st c="50197">and
    licensing.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="50211">Automating environment life cycle management</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="50256">So far, we</st> <st c="50268">have used the Power Platform admin
    center for managing environments and the Power Platform tenant.</st> <st c="50367">Those
    that are coming from the world of cloud services and DevOps might know that Azure
    cloud services can be managed in a more descriptive way and through CI/CD pipelines,
    rather than using the Azure portal for the management.</st> <st c="50595">Doing
    things manually through the portal also doesn’t scale well.</st> <st c="50661">One
    of the recommendations in both Well-Architected and critical design areas mentioned
    that we should look to automate whatever is possible and where human intervention
    is not required.</st> <st c="50848">In this section, we will experiment with the
    idea of managing environments in a similar fashion as other Azure cloud services.</st>
    <st c="50975">We will look at how we can enable a more automated way of managing
    the environment following well-known practices from the custom development and</st>
    <st c="51121">DevOps world.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="51134">Infrastructure as code (IaC) over ClickOps</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="51177">Let’s start</st> <st c="51189">first by explaining what IaC</st>
    <st c="51219">and</st> **<st c="51223">configuration as code</st>** <st c="51244">(</st>**<st
    c="51246">CaC</st>**<st c="51249">) are since they are both touching</st> <st
    c="51284">infrastructure, yet they are different.</st> <st c="51325">Both are
    well-known DevOps practices that automate IT operations and help with consistent
    software delivery.</st> <st c="51434">These two practices allow DevOps teams to
    use DevOps practices to not only deliver the application but also the underlying
    infrastructure and required configuration on which the application will be deployed.</st>
    <st c="51642">Both are using some sort of script or code templates through which
    they can manage the underlying infrastructure.</st> <st c="51756">IaC</st> <st
    c="51760">is all about provisioning infrastructure; this could be servers, databases,
    specific</st> **<st c="51845">platform-as-a-service</st>** <st c="51866">(</st>**<st
    c="51868">PaaS</st>**<st c="51872">) services, and other components.</st> <st
    c="51907">CaC, on the other hand, is about managing the settings and configuration
    of the system components that our application requires on that infrastructure,
    for example, setting up server configuration, installing and configuring database
    server, and configuring</st> <st c="52165">network settings.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="52182">Different tools use different languages to describe or configure
    the infrastructure.</st> <st c="52268">The tool usually defines what type of approach
    is used with the code.</st> <st c="52338">This means that the code is described
    in a</st> *<st c="52381">declarative</st>* <st c="52392">(functional) or in an</st>
    *<st c="52415">imperative</st>* <st c="52425">(procedural) way.</st> <st c="52444">If
    the approach is declarative, then in the code we describe</st> *<st c="52505">what</st>*
    <st c="52509">we want the target environment to be and the tool will perform the
    required steps to get to the desired state.</st> <st c="52621">If the approach
    is imperative, we describe</st> *<st c="52664">how</st>* <st c="52667">we can
    get to the target environment, which means that we need to define a set of commands,
    in the appropriate order, that will lead us to the</st> <st c="52811">desired
    state.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="52825">In the Power Platform landing zones, we have used a reference
    implementation that we configured through the Azure portal, however, in the backend,
    the configuration from the portal is mapped to an ARM template, which describes
    the state of the Power Platform environment that we wish to have.</st> <st c="53119">The
    ARM template is a JSON file type following a JSON deployment template schema,
    where in a declarative way we describe the infrastructure that ARM then provisions
    in our</st> <st c="53291">target subscription.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="53311">Example of ARM template file – Power Platform landing zone ARM
    template</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="53383">The landing zone ARM template file can be accessed</st> <st c="53435">here:</st>
    [<st c="53441">https://github.com/microsoft/industry/blob/main/foundations/powerPlatform/landingZones/ppNorthStarLzs-arm.json</st>](https://github.com/microsoft/industry/blob/main/foundations/powerPlatform/landingZones/ppNorthStarLzs-arm.json)<st
    c="53551">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="53552">Azure offers one more way of</st> <st c="53581">describing IaC
    – using</st> **<st c="53605">Bicep</st>**<st c="53610">. However, on the market,
    there are other tools available that support IaC, one of which is</st> **<st c="53702">Terraform</st>**<st
    c="53711">, which</st> <st c="53718">we will take a closer look at because of
    its connection with</st> <st c="53780">Power Platform.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="53795">IaC deployments are repeatable and prevent configuration drifts
    or missing dependencies since all information about the infrastructure is provided
    in the IaC files.</st> <st c="53961">ARM, Bicep, Terraform, and other IaC tools
    support idempotent operations.</st> <st c="54035">This means that even if we are
    applying configuration multiple times, the result will be the same,</st> <st c="54134">as
    described.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="54147">This is also one of the main reasons why the IaC approach has
    all the advantages over ClickOps.</st> <st c="54244">Now, what is ClickOps?</st>
    <st c="54267">The</st> <st c="54270">term</st> **<st c="54276">ClickOps</st>**
    <st c="54284">comes from</st> **<st c="54296">clickable operations</st>** <st
    c="54316">and it is used for a process where people click through configuration
    options on a configuration portal.</st> <st c="54422">In the case of Power Platform,
    when administrators click through different options in the Power Platform admin
    center to provision and</st> <st c="54557">configure environments.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="54580">Although it is possible to automate manual operations</st> <st
    c="54634">using</st> **<st c="54641">user interface</st>** <st c="54655">(</st>**<st
    c="54657">UI</st>**<st c="54659">) automation tools</st> <st c="54679">or</st>
    **<st c="54682">robotic process automation</st>** <st c="54708">(</st>**<st c="54710">RPA</st>**<st
    c="54713">) tools with a recorded set of manual operations, ClickOps in general
    is error prone.</st> <st c="54800">Either engineers forget some steps, make mistakes
    along the way, or the website changes and the automated UI approach fails.</st>
    <st c="54925">The approach is also not scalable as it is slow and can lead to
    configuration drifts, where we might have different states</st> <st c="55048">of
    environments.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="55064">As IaC code can be version-controlled and supported by SDLC, the
    clickable approach lacks this sort of collaboration as well</st> <st c="55190">as
    transparency.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="55206">Power Platform management with Terraform</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="55247">We</st> <st c="55251">now understand that there must be a better
    way to automate platform management that will be more scalable than the ClickOps
    approach.</st> <st c="55385">The critical design area around platform automation
    and DevOps, in the Power Platform landing zones, mentions a recommendation for
    building a cross-functional team that will build and manage functions to support
    environment provisioning with DLP, RBAC, and other capabilities.</st> <st c="55662">This
    team would also take care of the management of landing zone template files.</st>
    <st c="55743">However, we will also take a look at another option – building IaC
    templates with Terraform.</st> <st c="55836">Doing so, using Terraform files,
    the platform operations team will take care of the environment provisioning, platform
    management, billing, and DLP policy creation.</st> <st c="56001">This will help
    us to automatize tasks around environment management and move away</st> <st c="56083">from
    ClickOps.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="56097">Terraform</st>** <st c="56107">is</st> <st c="56111">an IaC
    tool created</st> <st c="56131">by</st> **<st c="56134">HashiCorp</st>** <st c="56143">that
    uses declarative configuration language to provision and manage infrastructure
    in multi-cloud environments.</st> <st c="56257">The language that Terraform uses
    is also known as</st> **<st c="56307">HashiCorp Configuration Language</st>**
    <st c="56339">(</st>**<st c="56341">HCL</st>**<st c="56344">).</st> <st c="56348">Terraform</st>
    <st c="56358">consists of core elements as well as plugin extensions called</st>
    **<st c="56420">providers</st>**<st c="56429">, which</st> <st c="56437">are used
    to perform operations against various cloud services, including Azure and Power
    Platform.</st> <st c="56536">To use Terraform, we would require the tool itself
    and a Terraform configuration file.</st> <st c="56623">The workload team first
    creates a branch for work on the Terraform file, which defines infrastructure
    and configuration files.</st> <st c="56750">Usually, we separate the IaC configuration
    into</st> <st c="56798">different files:</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="56814">terraform.tf</st>` <st c="56827">is the configuration file that
    defines all used providers, the remote backend, and the Terraform version that
    should</st> <st c="56945">be used.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="56953">main.tf</st>` <st c="56961">will include used resources and</st>
    <st c="56994">data sources.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="57007">variables.tf</st>` <st c="57020">describes all variables that
    are used in</st> <st c="57062">the configuration.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="57080">variables.tfvar</st>` <st c="57096">is used to specify actual
    values for different environments.</st> <st c="57158">We could also have variables
    with default values in the</st> `<st c="57214">variables.tf</st>` <st c="57226">file,
    however, this approach gives us flexibility when dealing with</st> <st c="57295">different
    environments.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="57318">output.tf</st>` <st c="57328">could be used to store output
    variables from the</st> <st c="57378">created resources</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="57395">After</st> <st c="57402">configuration files are written, three
    main steps define the core Terraform workflow and should take place to apply this
    configuration to the cloud service, which also includes</st> <st c="57579">Power
    Platform:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="57671">terraform.tf</st>` <st c="57683">configuration file provided.</st>
    <st c="57713">Here is where specified providers will get installed.</st> <st c="57767">To
    launch this step, we use the</st> `<st c="57799">terraform init</st>` <st c="57813">command.</st>
    <st c="57823">This command creates a Terraform lock file, which holds the information
    of the provider used in this workspace.</st> <st c="57935">This file can be also
    version-controlled, should we wish to use the same provider version in</st> <st
    c="58028">different environments.</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<st c="58219">main.tf</st>` <st c="58226">file.</st> <st c="58233">The plan
    will include steps to either provision, update, or remove infrastructure or its
    components.</st> <st c="58334">In this step, we use the</st> `<st c="58359">terraform
    plan</st>` <st c="58373">command.</st> <st c="58383">If we use the</st> `<st c="58397">-out</st>`
    <st c="58401">flag, the plan will be saved to a file, which allows us to reuse
    the same plan if needed.</st> <st c="58492">To have a flexible IaC configuration
    file, we recommend storing variables outside of</st> `<st c="58577">main.tf</st>`
    <st c="58584">in a separate variables file.</st> <st c="58615">We declare variables
    and provide optional default values with</st> `<st c="58677">variables.tf</st>`<st
    c="58689">, where the actual values for separate environments are set with the</st>
    `<st c="58758">variables.tfvars</st>` <st c="58774">file.</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<st c="59029">terraform</st>` `<st c="59039">apply</st>` <st c="59044">command.</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="59053">As part of the</st> <st c="59068">DevOps practice, it is recommended
    to store the Terraform configuration files in the source code repository to allow
    collaboration and version control and follow branch strategy as well as pull requests
    to</st> <st c="59275">merge changes.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="59289">If we would like to remove the infrastructure that we have created,
    we can clean up resources by using the</st> `<st c="59397">terraform destroy</st>`
    <st c="59414">command.</st> <st c="59424">This will permanently delete all created
    resources.</st> <st c="59476">To protect the production workload from accidental
    deletion, we can set</st> `<st c="59548">prevent_destroy = true</st>` <st c="59570">inside
    the</st> `<st c="59582">lifecycle</st>` <st c="59591">block in the resource that
    we</st> <st c="59622">are building.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="59635">Power Platform Terraform Provider</st>** <st c="59669">is a</st>
    <st c="59675">Terraform plugin that allows management of the Power Platform environment
    and additional resources following the IaC approach.</st> <st c="59802">It defines
    a set of resources that Terraform can manage and data sources that can be used
    to retrieve information from Power Platform.</st> <st c="59937">Using Power Platform
    provider, organizations can follow the same approach and utilize already existing
    knowledge to manage Power Platform in the same way as they do it now for Azure
    services, using the IaC approach.</st> <st c="60153">This is especially important
    for organizations with workloads that span over the boundaries of Power Platform
    toward other cloud providers, such as the Microsoft</st> <st c="60315">Azure cloud.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60327">Such an approach helps to unlock scenarios of deploying and managing
    Power Platform at scale.</st> <st c="60422">It gives us the ability to provision
    different types of environments in a completely automated way, which allows developers
    to be more flexible with deploying</st> <st c="60581">their workloads.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60597">Experimental feature</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60618">Power Platform Terraform Provider is currently in</st> *<st c="60669">experimental
    mode</st>* <st c="60686">and it should not be used by a production user.</st>
    <st c="60735">However, we believe that going forward, this will be one of the
    key capabilities for the platform operations team to manage environments</st>
    <st c="60872">at scale.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60881">Using Power Platform Terraform Provider</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="60921">This</st> <st c="60926">provider</st> <st c="60936">requires Terraform
    version</st> `<st c="60963">>= 0.13</st>` <st c="60970">(when considering the
    latest version of the provider).</st> <st c="61026">Current Terraform versions
    are way past version 1.8, so this requirement should not be a problem.</st> <st
    c="61124">To enable this Power Platform provider, we need to add the following
    code snippet to the</st> `<st c="61213">terraform.tf</st>` <st c="61225">configuration
    file:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: <st c="61432">With this, we are making sure that Terraform will install needed
    providers when running the</st> `<st c="61525">terraform init</st>` <st c="61539">command,
    to initialize</st> <st c="61563">a workspace.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="61575">For Terraform to access Power Platform, we would need to authenticate
    the provider to Power Platform.</st> <st c="61678">We can utilize Azure CLI, a
    service principle with OpenID Connect, or a service principle with a client secret.</st>
    <st c="61790">All options would require us to first do the</st> *<st c="61835">app
    registration process</st>* <st c="61859">in Microsoft Entra ID for Power Platform
    Terraform Provider.</st> <st c="61921">During the app registration process, we
    need to give API permissions against Dataverse, the Power Apps service, and Power
    Platform API.</st> <st c="62057">Power Platform API is a preview feature and is
    available to manage environments, billing policies, Power Pages management, and
    more.</st> <st c="62190">If we authenticate with Azure CLI, we should also configure
    the</st> **<st c="62254">Expose API</st>** <st c="62264">section during the app</st>
    <st c="62288">registration process.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="62309">API permissions – app registration process</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="62352">Terraform has thoroughly documented which API permissions should
    be set during the app registration process.</st> <st c="62462">The link to the
    APIs is available</st> <st c="62496">here:</st> [<st c="62502">https://registry.terraform.io/providers/microsoft/power-platform/latest/docs/guides/app_registration</st>](https://registry.terraform.io/providers/microsoft/power-platform/latest/docs/guides/app_registration)<st
    c="62602">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="62603">If Power Platform API</st> <st c="62626">does not appear on the
    list of APIs for which we can give API permissions, during the app registration
    process, we might need to make it visible with the following commands</st> <st
    c="62799">in PowerShell:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`<st c="62958">AppId</st>` <st c="62964">is the</st> <st c="62971">value of
    the API service when we are using the Azure public cloud.</st> <st c="63039">In
    any other case, it needs to be updated with the correct</st> `<st c="63098">AppId</st>`
    <st c="63103">of</st> <st c="63107">the service.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="63119">After this intervention, the Power Platform API should be visible
    in the list and we</st> <st c="63204">can add API permission in our app registration
    process, as shown in</st> *<st c="63273">Figure 11</st>**<st c="63282">.10</st>*<st
    c="63285">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B22208_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="64785">Figure 11.10 – API permissions for Power Platform provider for
    Terraform</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="64857">App registration process – Power Platform API</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="64903">For additional help regarding the app registration process, here
    is the</st> <st c="64976">link:</st> [<st c="64982">https://learn.microsoft.com/en-us/power-platform/admin/programmability-authentication-v2</st>](https://learn.microsoft.com/en-us/power-platform/admin/programmability-authentication-v2)<st
    c="65070">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="65071">Separately, we</st> <st c="65086">can work on preparing the</st>
    `<st c="65113">main.tf</st>` <st c="65120">file and any supporting</st> <st c="65144">configuration
    files.</st> <st c="65166">The example Terraform files are uploaded to the GitHub
    repository for this book in</st> `<st c="65249">Chapter11</st>` <st c="65258">folder.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="65266">Note that when planning to use Terraform to manage Power Platform
    environments, the service principle should be added as an app user on the Power
    Platform environments to be able to make changes to the existing environments.</st>
    <st c="65492">We can do that by going to</st> **<st c="65519">Power Platform admin
    center</st>** <st c="65546">|</st> **<st c="65549">Environments</st>**<st c="65561">,
    selecting the environment, and clicking</st> **<st c="65603">See all</st>** <st
    c="65610">underneath</st> **<st c="65622">Users</st>** <st c="65627">in the</st>
    **<st c="65635">Access</st>** <st c="65641">sections.</st> <st c="65652">Then,
    click on</st> **<st c="65667">app users list</st>** <st c="65681">|</st> **<st
    c="65684">New app user</st>** <st c="65696">and use the wizard to add the newly
    created service principal to</st> <st c="65762">your environment.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="65779">After</st> <st c="65786">preparing all Terraform configuration
    files, we are now ready to run the next steps in</st> <st c="65873">the workflow:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <st c="65947">If the plan</st> <st c="65960">completes successfully, we should
    see a longer output with the entire plan of changes in the terminal and at the
    end something like this (using the provided</st> <st c="66117">example files):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: <st c="66267">Here,</st> `<st c="66274"><outfile></st>` <st c="66283">represents
    the name of the out file from the</st> <st c="66329">previous step.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="66343">Now, we can proceed with applying the plan to our environment
    using the</st> <st c="66416">following command:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: <st c="66460">If we wish to perform these steps in a DevOps pipeline, since
    we would like to automatize the steps during the CI/CD pipeline, we can use script
    tasks or specific Terraform tasks in Azure DevOps or actions in GitHub.</st> <st
    c="66678">Most probably, we will need to first install Terraform tasks/actions
    from the available marketplace.</st> <st c="66779">Once this is complete, we will
    be able to use them.</st> <st c="66831">Now, we can create a DevOps pipeline where,
    in the planning stage, we will use the</st> `<st c="66914">terraform plan</st>`
    <st c="66928">command to prepare the</st> `<st c="66952">tfstate</st>` <st c="66959">file
    and then in the deploy stage, we will use the same</st> `<st c="67016">tfstate</st>`
    <st c="67023">file to apply configurations to the Power</st> <st c="67066">Platform
    service.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="67083">When creating the Terraform plan, the</st> `<st c="67122">tfstate</st>`
    <st c="67129">file can either get stored locally or somewhere centrally in some
    sort of storage repository, from where it can be accessed.</st> <st c="67255">Since
    we are using a multi-stage pipeline and DevOps service, we have decided to use
    an Azure Storage account where we will be storing the Terraform</st> <st c="67404">state
    file.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="67415">Here we have</st> <st c="67428">a simple, single-stage DevOps
    pipeline, where we are utilizing Terraform tasks to perform all steps of the Terraform
    workflow.</st> <st c="67556">In the GitHub repository, we have uploaded a</st>
    `<st c="67601">simple-tf-iac.yml</st>` <st c="67618">pipeline file that can serve
    as a reference for the Azure DevOps</st> <st c="67683">pipeline using Terraform
    tasks.</st> <st c="67716">An example of a Terraform task is</st> <st c="67750">as
    follows:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: <st c="68120">Although IaC is bringing benefits to the environment life cycle
    management, there are always pros and cons to every approach, and the same is
    true with IaC.</st> <st c="68278">It might be that we do not have resources knowledgeable
    on IaC and Terraform, maybe we do not want to use Terraform Power Platform provider,
    because it is currently still in an experimental mode (it should not be used in
    production workloads), or maybe because we do not want to bring another tool in
    the portfolio, or any other reason.</st> <st c="68615">In such cases, we can always
    revert to utilizing more traditional ways to manage Power</st> <st c="68702">Platform
    tenants.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="68719">Traditional automated environment management approaches</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="68775">Apart from</st> <st c="68786">using an IaC approach with Terraform
    Provider, there are other options available to manage the environment life cycle,
    as well as the Power Platform tenant, which has been with us for many years now.</st>
    <st c="68987">We will be mentioning some of the</st> <st c="69021">examples ahead:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="69036">By now, we are already familiar with</st> <st c="69073">the</st>
    **<st c="69078">Power Platform Build Tools</st>** <st c="69104">and</st> **<st
    c="69109">Power Platform Actions</st>** <st c="69131">for Azure DevOps</st> <st
    c="69149">and</st> <st c="69152">GitHub.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="69160">Power Platform Build Tools provides tasks that can be used for
    the Power Platform tenant management, including environment management.</st> <st
    c="69296">We can create new environments, configure governance settings, and configure
    environment settings, such as changing the environment to managed environments,
    and</st> <st c="69457">so on.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="69463">Following such an approach allows us to build DevOps pipelines
    that do not focus only on provisioning the application solution but rather focus
    on configuring the end-to-end solution life cycle with provisioning of the environment,
    configuring the environment, deploying an application to the environment, testing
    an application, and potentially removing the environment if it is not needed any
    longer.</st> <st c="69867">This brings additional flexibility to holistic</st>
    <st c="69914">solution management.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="69934">The next option is with PAC CLI.</st> <st c="69968">We can install
    PAC CLI onto the build agent/runner that is running the CI/CD pipeline and use
    PAC CLI tasks to run automated tasks for managing environment life cycles.</st>
    <st c="70137">Using command-line or Bash tasks, we can write scripts that will
    use PAC CLI for operations and will perform operations on our Power</st> <st c="70270">Platform
    tenant.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="70286">For those administrators who would like to build automated flows
    outside of CI/CD pipelines, we would recommend creating</st> <st c="70408">Power
    Automate flows using the</st> **<st c="70439">Power Platform for Admins</st>**
    <st c="70464">connector, which focuses on environment life cycle management and
    DLP policies.</st> *<st c="70545">Figure 11</st>**<st c="70554">.11</st>* <st
    c="70557">shows an example that is part of the bigger</st> *<st c="70602">Create
    Approved Environment</st>* <st c="70629">process flow, which belongs to the CoE
    Starter Kit.</st> <st c="70682">It nicely demonstrates the usage of</st> <st c="70718">the
    Power Platform Management connector to build an environment</st> <st c="70781">life
    cycle</st> <st c="70793">using workflows:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B22208_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="70978">Figure 11.11 – Environment management with Power Automate</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="71035">DLP considerations when managing environments</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="71081">In the</st> <st c="71089">Power Platform landing zone part, we
    addressed critical design areas and what should be considered when designing Power
    Platform architecture.</st> <st c="71232">This includes licensing and managing
    identities in Entra ID, but there is one very important area that goes together
    with the environment life cycle management.</st> **<st c="71393">Data loss prevention</st>**
    <st c="71413">(</st>**<st c="71415">DLP</st>**<st c="71418">) is one of the most</st>
    <st c="71439">important parts of protecting data from leaving certain boundaries.</st>
    <st c="71508">DLP policies help us to set guardrails that will make sure our data
    is protected and isn’t shared with</st> <st c="71611">unnecessary audiences.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="71633">When creating an environment strategy in an organization, we should
    also agree on a minimum set of DLP policies that should be in place to protect
    users from non-compliant usage.</st> <st c="71813">These can be set on a tenant
    level or environment level.</st> <st c="71870">Tenant-level policies could be
    associated with all or only specific environments and are acting as organization-wide
    policies across</st> <st c="72003">multiple environments.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="72025">Setting up DLP policies should be done automatically when creating
    environments.</st> <st c="72107">It can also be done after adjusting the policies
    based on the workload or</st> <st c="72181">organizational requirements.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="72209">Creating</st> <st c="72219">and assigning DLP policies can be
    done in different ways.</st> <st c="72277">We have touched on two examples, first
    with Terraform, and the other with connectors in Power Automate flows.</st> <st
    c="72387">Both support creating and assigning DLP policies.</st> <st c="72437">In
    Terraform, we can achieve it by creating a</st> `<st c="72483">powerplatform_data_loss_prevention_policy</st>`
    <st c="72524">resource in which, through a set of parameters, we specify a list
    of all business (sensitive), non-business (non-sensitive), blocked, and custom
    connectors patterns.</st> <st c="72691">This will define which connectors are
    grouped and what kind of sensitivity label they have.</st> <st c="72783">We can
    also specify the list of environments for which the DLP policy</st> <st c="72853">is
    applied.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="72864">When using Power Automate, we achieve the same outcome by creating
    flows that use the</st> **<st c="72951">Power Platform for Admins</st>** <st c="72976">connector,
    which</st> <st c="72993">are actions for creating and managing DLP policies.</st>
    <st c="73046">Through visual experience, they provide all the</st> <st c="73094">required
    information.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B22208_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="73210">Figure 11.12 – The Power Platform for Admins connector</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="73264">The approach of using Power Platform for Admins connector is well
    established in the process of management environments and other tenant settings.</st>
    <st c="73412">We can find this approach in many flows that are part of the CoE
    Starter Kit.</st> <st c="73490">Let us look at what is available in the CoE Starter
    Kit and how it can</st> <st c="73561">be used.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="73569">Power Platform CoE</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="73588">Another</st> <st c="73597">section that focuses on delivering
    guidance and best practices for Power Platform will focus on adopting and understanding
    the existing usage.</st> <st c="73740">As organizations mature in Power Platform
    usage, the number of workloads running on Power Platform can drastically increase.</st>
    <st c="73865">Organizations should invest in fostering this growth while keeping
    the environments governed and secure.</st> <st c="73970">This section will talk
    about the Power Platform CoE, what it is, and why organizations should be creating
    such teams in their environment.</st> <st c="74109">We will look at what tools
    are available for CoE teams and go through environment management examples to
    understand how it is</st> <st c="74235">all connected.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="74249">CoE extends beyond a specific team in the organization; it demonstrates
    a cultural commitment in the organization that helps drive innovation and continuous
    improvement.</st> <st c="74420">The CoE team acts as a hub of knowledge that is
    focused on improving the adoption of Power Platform while making sure that the
    usage is aligned with internal governance and</st> <st c="74593">compliance standards.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="74614">CoE teams could be represented by one or more people, depending
    on the size and maturity of the organization.</st> <st c="74725">It can start
    by forming a team of enthusiastic Power Platform individuals who are committed
    to supporting the organization’s business strategy using the LCNC platform.</st>
    <st c="74893">From there, it can grow to a larger and more diverse team, represented
    by personas from different departments with different skills.</st> <st c="75026">It
    can include app makers, DevOps engineers, IT teams, support engineers, training
    experts, and business representatives.</st> <st c="75148">CoE teams should not
    be confused with fusion teams.</st> **<st c="75200">Fusion teams</st>** <st c="75212">are</st>
    <st c="75216">focused on accelerating the development of business solutions using
    LCNC and code-first development, while CoE teams aim to drive governance and adoption
    on the LCNC platform following best practices</st> <st c="75417">and guidance.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="75430">CoE teams follow a continuous process, through which they gain
    a view into the current situation.</st> <st c="75529">Where needed, they establish
    security and governance practices to control the environment.</st> <st c="75620">Finally,
    they are supporting the employee community by helping improve its adoption.</st>
    <st c="75705">To facilitate their work, CoE teams are leveraging the capabilities
    of the Power Platform admin center as well as the CoE</st> <st c="75827">Starter
    Kit.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="75839">Microsoft also</st> <st c="75855">provides the Automation Kit,
    which is a complementing suite of tools to the CoE Starter Kit, designed to increase
    the adoption of the Power Automate automation platform.</st> <st c="76025">This
    kit provides ready-made solutions for managing automation projects, as well as</st>
    <st c="76109">gaining insights into the savings and estimated</st> **<st c="76157">return
    on</st>** **<st c="76167">investment</st>** <st c="76177">(</st>**<st c="76179">ROI</st>**<st
    c="76182">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="76185">Installation of the CoE Starter Kit and Automation Kit</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="76240">Setting up the</st> <st c="76256">CoE Starter Kit and Automation
    Kit is a lengthier process with many steps.</st> <st c="76331">We will not go
    into the details of installation but rather provide a link to the documentation
    website where a step-by-step approach is provided.</st> <st c="76477">We</st>
    <st c="76479">would recommend following it and installing the CoE Starter Kit
    in a</st> <st c="76549">separate environment.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="76570">CoE Starter Kit</st>** **<st c="76587">installation</st>**<st
    c="76599">:</st> [<st c="76602">https://learn.microsoft.com/en-us/power-platform/guidance/coe/setup</st>](https://learn.microsoft.com/en-us/power-platform/guidance/coe/setup)<st
    c="76669">.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="76670">Automation Kit</st>** **<st c="76686">installation</st>**<st
    c="76698">:</st> [<st c="76701">https://learn.microsoft.com/en-us/power-automate/guidance/automation-kit/setup/prerequisites</st>](https://learn.microsoft.com/en-us/power-automate/guidance/automation-kit/setup/prerequisites)<st
    c="76793">.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="76794">The CoE Starter Kit</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="76814">The</st> <st c="76818">CoE Starter Kit provides different modules
    that include a set of ready-made applications and flows to help with admin, governance,
    and adoption activities.</st> <st c="76975">These modules are separated into</st>
    <st c="77008">different components:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="77029">Core components</st>**<st c="77045">: This is where the main
    application</st> **<st c="77083">CoE Admin Command Center</st>** <st c="77107">is</st>
    <st c="77111">placed.</st> <st c="77119">This application is a central control
    plane for accessing other admin-related applications.</st> <st c="77211">Here,
    we can find the</st> **<st c="77233">Set App Permissions</st>** <st c="77252">and</st>
    **<st c="77257">Set Flow Permissions</st>** <st c="77277">settings, for discovering
    applications and flows and changing user access and</st> <st c="77356">ownership
    permissions.</st> <st c="77379">The</st> **<st c="77383">DLP Editor</st>** <st
    c="77393">helps oversee all DLP policies and understand which apps/flows are impacted
    by it.</st> <st c="77477">The</st> **<st c="77481">CoE Power BI report</st>**
    <st c="77500">with</st> <st c="77505">its dashboard provides a comprehensive overview
    of the current situation in Power Platform.</st> <st c="77598">One more important
    set of components is</st> <st c="77638">related to</st> **<st c="77649">environment</st>**
    **<st c="77661">request management</st>**<st c="77679">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="77680">Governance</st>**<st c="77691">: This group is focused on making
    sure the Power Platform components are governed and compliant.</st> <st c="77789">Many
    flows are part of the auditing process and are reviewing the states of apps, flows,
    and bots and informing admins or owners about the steps to take to make sure they
    are compliant.</st> <st c="77975">The</st> **<st c="77979">Developer Compliance
    Center</st>** <st c="78006">is</st> <st c="78009">included in this group and provides
    an app for makers to understand the compliance status of their applications, flows,
    bots, solutions, and</st> <st c="78151">so on.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="78157">Nurture</st>**<st c="78165">: Components</st> <st c="78178">in
    this group are nurturing the internal Power Platform community.</st> <st c="78246">Components
    such as</st> **<st c="78265">Video hub</st>**<st c="78274">, to find and watch
    training video content,</st> **<st c="78318">Nurture apps for makers</st>**<st
    c="78341">, to find training events, and the</st> **<st c="78376">Solution Assessment</st>**
    <st c="78395">page in</st> **<st c="78404">Nurture apps for makers</st>**<st c="78427">,
    to help makers understand the licensing and governance implications of their</st>
    <st c="78506">planned solutions.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="78524">Theming</st>**<st c="78532">: This group helps makers create
    and manage themes for canvas apps.</st> **<st c="78601">Theme Editor</st>** <st
    c="78613">and</st> **<st c="78618">Theme Gallery</st>** <st c="78631">allow the
    creation and browsing of published themes that will be used across canvas apps.</st>
    <st c="78722">Here, we would like to once again mention</st> **<st c="78764">Power
    Platform Creator Kit</st>**<st c="78790">, which is not part of the CoE Starter
    Kit, but is richer from a capability standpoint, as it allows the use of the Fluent
    UI framework, which will help organizations create consistent modern applications
    across both model-driven and</st> <st c="79024">canvas apps.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="79036">Innovation Backlog</st>**<st c="79055">: This contains the</st>
    **<st c="79076">Innovation Backlog</st>** <st c="79094">application for adding
    innovative ideas and voting on</st> <st c="79149">existing ones.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="79163">Each of these component groups has an additional set of tables,
    flows, and applications, which we have not mentioned, but are supporting the overall
    CoE experience.</st> <st c="79329">These components can be used in different ways.</st>
    <st c="79377">We can use CoE Power BI dashboard just to have a holistic overview
    of the current situation in Power Platform, or we can use it in a way to drive
    some conclusion and action from it.</st> <st c="79559">Through the dashboard,
    we can identify, for example, orphaned apps and take action on reassigning ownership
    or retiring them if they are not needed anymore.</st> <st c="79716">We can also
    see the adoption of services over time and which connectors and apps are mostly
    used.</st> <st c="79814">Some of this information is also already</st> <st c="79855">available
    in</st> **<st c="79868">Power Platform admin center</st>** <st c="79895">|</st>
    **<st c="79898">Analytics</st>**<st c="79907">, where we can track usage and activity
    across Dataverse, Power Apps, and Power Automate.</st> <st c="79997">More information
    on the CoE Starter Kit and its components can be found</st> <st c="80069">here:</st>
    [<st c="80075">https://learn.microsoft.com/en-us/power-platform/guidance/coe/starter-kit-explained</st>](https://learn.microsoft.com/en-us/power-platform/guidance/coe/starter-kit-explained)<st
    c="80158">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="80159">Example of environment management</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="80193">Since we</st> <st c="80202">have already seen briefly what environment
    management could look like through CI/CD pipelines and by building flows in Power
    Automate, we will look at how the CoE Starter Kit supports the environment</st>
    <st c="80403">request process.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="80419">If we have configured the setting in Power Platform that only
    administrators can create environments, then for regular users, there is no way
    to create their own development environment for a particular project.</st> <st
    c="80632">They should use the existing environments that are probably shared across
    business units or organizations, depending on the organizational environment policy.</st>
    <st c="80791">If app makers believe that their project requires isolation, then
    they should request their own environment.</st> <st c="80900">The creation of
    the environment could be done through a Power Platform landing zone reference
    implementation, automated through DevOps pipelines, Power Automate flows, or manually.</st>
    <st c="81081">However, in all of these cases, administrators would need to launch
    the process, which makes them a bottleneck in the entire process.</st> <st c="81215">Therefore,
    in the CoE Starter Kit, we can find an environment request management process
    that will help anyone to request new environments and associated</st> <st c="81369">DLP
    policies:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B22208_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="81645">Figure 11.13 – Environment management process</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="81690">Using the</st> **<st c="81701">Maker - Environment Request</st>**
    <st c="81728">application, app makers can submit new environment requests.</st>
    <st c="81790">They select which connectors would be required and who would be
    the owners, and</st> <st c="81870">they provide more information about the environment,
    such as environment type, whether Dataverse is required, and whether other data
    is required to provision the environment.</st> <st c="82045">After the request
    is submitted, it is up to the administrators to review the request.</st> <st c="82131">Through
    their</st> **<st c="82145">Admin – Environment Request</st>** <st c="82172">application,
    administrators can review which connectors were selected, whether any DLP policies
    are impacting the selected connectors, and which modifications to DLP policies
    would be needed.</st> <st c="82365">Once the administrator reviews the process
    and approves the creation, the Power Platform for Admins connector in Power Automate
    flow starts, gathers all data, and provisions an environment together with supporting
    DLP policies.</st> <st c="82593">If the environment was set with an expiration
    date, the environment would automatically be deleted after this date, unless the
    owner of the environment requests an extension of the expiration date before that.</st>
    <st c="82803">For the deletion of the environment, again, the Power Platform for
    Admins connector is used withing a Power Automate flow to remove</st> <st c="82935">the
    environment.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="82951">This represents a real-world example of how the Power Platform
    operations team can set up an environment life cycle management process with a
    combination of application and Power Automate flows.</st> <st c="83147">With the
    CoE Starter Kit, we are already getting such flows and they can be reused by anyone,
    but can also serve as an idea in case organizations would like to build their
    own platform</st> <st c="83332">management processes.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="83353">Summary</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="83361">In this chapter, we focused mostly on the operations part of the
    Power Platform management.</st> <st c="83454">We went through different design
    best practices and guidelines.</st> <st c="83518">We started with Power Platform
    Well-Architected and learned about how its purpose is to design application workloads
    that are resilient, reliable, and efficient, and give users a great user experience.</st>
    <st c="83720">From there, we moved on to Power Platform landing zones, which help
    administrators spin up needed environments that follow proven architecture designs
    and allow organizations to scale rapidly to support efforts in digital transformation
    while giving app makers a place to innovate.</st> <st c="84002">We looked into
    the design principles and design areas that the operations team should consider
    when planning the</st> <st c="84115">architecture design.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="84135">From design best practices, we moved to the actual implementation
    of one of these recommendations – platform automation.</st> <st c="84257">We experimented
    with the idea of how it looks if a low-code/no-code platform such as Power Platform
    would incorporate the same concept of describing the infrastructure as it comes
    from the world of pro-development, where infrastructure workloads and system configurations
    are written in IaC files.</st> <st c="84555">We’ve demonstrated, with Terraform,
    how IaC files can be created and used with Terraform to manage Power Platform
    environments.</st> <st c="84683">Since Power Platform Terraform Provider is still
    in experimentation mode and organizations might prefer other ways to manage environments,
    we have looked at how other tools can help us with this challenge, including using
    Power Platform for Admins connector in Power Automate, which is also very much
    used in the management flows within the CoE Starter Kit.</st> <st c="85041">On
    a very high level, we touched on what the CoE is and what kind of tools the CoE
    Starter Kit brings to the organizations.</st> <st c="85165">Through an example
    of environment management requests, we have seen how these best practices can
    be implemented in</st> <st c="85280">real life.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="85290">In the next chapter, we will look beyond DevOps and into the innovative
    things that generative AI is bringing into Power Platform.</st> <st c="85422">We
    will look at how</st> **<st c="85442">ChatOps</st>** <st c="85449">connects people,
    processes, and tools and can improve the way we do</st> <st c="85518">DevOps processes.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="85535">Further reading</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="85551">Power Platform landing</st> <st c="85575">zones:</st> [<st c="85582">https://github.com/microsoft/industry/tree/main/foundations/powerPlatform</st>](https://github.com/microsoft/industry/tree/main/foundations/powerPlatform)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="85655">Power Platform</st> <st c="85671">Well-Architected:</st> [<st
    c="85689">https://learn.microsoft.com/en-us/power-platform/well-architected/</st>](https://learn.microsoft.com/en-us/power-platform/well-architected/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="85755">Microsoft Zero-Trust</st> <st c="85777">model</st><st c="85782">:</st>
    [<st c="85785">https://www.microsoft.com/en-us/security/business/zero-trust</st>](https://www.microsoft.com/en-us/security/business/zero-trust)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="85845">Terraform</st> <st c="85856">documentation:</st> [<st c="85871">https://developer.hashicorp.com/terraform</st>](https://developer.hashicorp.com/terraform)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="85912">Power Platform Terraform</st> <st c="85938">Provider:</st> [<st
    c="85948">https://playbook.microsoft.com/business-applications/Enterprise-Solutions/Power-Platform-Terraform-Provider/</st>](https://playbook.microsoft.com/business-applications/Enterprise-Solutions/Power-Platform-Terraform-Provider/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="86056">Power Platform for Admins</st> <st c="86083">connector:</st> [<st
    c="86094">https://learn.microsoft.com/en-us/connectors/powerplatformforadmins/</st>](https://learn.microsoft.com/en-us/connectors/powerplatformforadmins/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="86162">Power Platform</st> <st c="86178">CoE:</st> [<st c="86183">https://learn.microsoft.com/en-us/power-platform/guidance/coe/starter-kit</st>](https://learn.microsoft.com/en-us/power-platform/guidance/coe/starter-kit)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="86256">Power Platform Automation</st> <st c="86283">Kit:</st> [<st c="86288">https://learn.microsoft.com/en-us/power-automate/guidance/automation-kit/overview/introduction</st>](https://learn.microsoft.com/en-us/power-automate/guidance/automation-kit/overview/introduction)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
