- en: '[*Chapter 14*](B17124_14_Final_SK_ePub.xhtml#_idTextAnchor346): Implementing
    Security in AWS'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Architecting and implementing security solutions in your cloud journey is going
    to be of paramount importance if you are to convince businesses to migrate their
    on-premises workloads to the cloud. There are always going to be some businesses
    who just feel that managing all things IT within the confines of their data center
    is most secure. However, this is far from the truth, given that companies couldn't
    possibly afford to spend the kind of money that cloud providers such as AWS do
    to offer highly secure environments for their clients to work in.
  prefs: []
  type: TYPE_NORMAL
- en: AWS enables businesses to design and run their applications in the cloud, with
    stringent security services and controls on offer. Businesses are encouraged to
    use the vast array of security tools from AWS and follow security guidelines and
    principles when architecting their applications for the cloud. The onus on designing
    and implementing security measures falls on both the customer and AWS in what
    we call the **Shared Responsibility Model**, which we will discuss in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: AWS offers several security tools and services that can help clients protect
    data, enforce authentication and authorization protocols, secure network and application
    access, monitor and detect threats, and enforce compliance and privacy measures.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Shared Responsibility Model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to the AWS compliance programs and AWS Artifact
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS vulnerability scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of data encryption services on AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protecting cloud resources and applications with AWS WAF and AWS Shield
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assessing and securing your EC2 instances with AWS Inspector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other AWS security services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start by understanding the principles behind the Shared Responsibility
    Model.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Shared Responsibility Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS offers public cloud services that allow customers to build isolated environments
    within the cloud platform. AWS manages and secures all the underlying infrastructure
    such as network, storage, and compute services, as well as host hypervisor software,
    among others. AWS also takes care of physical security, which includes access
    to its data centers, where your workloads are hosted. AWS gives the customer access
    to those infrastructure components to build their cloud applications and solutions.
    One customer's approach to designing an application architecture will be different
    from another and to facilitate different requirements, AWS shares security and
    compliance responsibilities with the customer.
  prefs: []
  type: TYPE_NORMAL
- en: While the customer can rest assured that all the underlying physical infrastructure,
    access to data center buildings, and host hypervisor systems are secured and stringently
    managed by AWS, how their applications are designed, built, and deployed on AWS
    is the customer's responsibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is known as the **AWS Shared Responsibility Model**. You must understand
    your responsibilities as a customer to ensure that your applications are highly
    secure and meet any compliance or regulatory requirements. The Shared Responsibility
    Model is based on the concept of *security of the cloud*, which is AWS''s responsibility,
    and *security in the cloud*, which is the customer''s responsibility. The following
    diagram illustrates a basic understanding of the demarcation of responsibility
    between AWS and the customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – AWS Shared Responsibility Model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_14_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.1 – AWS Shared Responsibility Model
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's understand the responsibilities of AWS and the customer in more
    detail.
  prefs: []
  type: TYPE_NORMAL
- en: Security of the cloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS is responsible for the *cloud* itself. It will enforce strict security protocols
    and measures for the underlying global infrastructure – its data centers, which
    are located in Availability Zones within Regions, and its points of presence infrastructure,
    which are its **edge** locations. AWS is also responsible for the underlying compute,
    storage, network, and database services, among others. This includes the **hypervisor**
    software that's used to enable customers to launch their EC2 instances.
  prefs: []
  type: TYPE_NORMAL
- en: Security in the cloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The customer is responsible for security *in* the cloud. At a simple level,
    this refers to the fact that the customer is responsible for how their applications
    are configured, as well as how their data is managed and accessed. The customer's
    responsibility varies based on the type of service that the customer chooses.
    Because different services fall within different cloud computing models (IaaS,
    PaaS, and SaaS), the level of responsibility on the customer will differ. For
    example, Amazon EC2 falls within the IaaS computing model. Here, the customer
    is responsible for every aspect of security from the EC2 instance's guest operating
    system and above. The customer will need to ensure that the EC2 instance is patched,
    has antivirus software installed, and has properly configured security groups
    to ensure only the required network traffic is allowed into the instance. Any
    applications that are installed on the EC2 instance also need to be maintained
    and secured, which is the customer's responsibility.
  prefs: []
  type: TYPE_NORMAL
- en: This is in contrast to a managed service such as Amazon RDS, where the underlying
    database instance and attached storage are abstracted from the customer. The maintenance
    and how the database software is patched is also AWS's responsibility. The customer
    can only configure specific service-level components, including creating security
    groups to enable connections to the database on specific ports and from specific
    sources, enabling multi-AZ, and defining backup retention periods. However, the
    customer does not need to patch or install antivirus software on the database
    instance itself or determine where to store the backups.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram illustrates the level of responsibility that a customer
    might have in enforcing security measures, depending on the cloud computing model
    used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2 – The customer''s responsibility varies, depending on the type
    of cloud computing model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_14_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.2 – The customer's responsibility varies, depending on the type of
    cloud computing model
  prefs: []
  type: TYPE_NORMAL
- en: Where possible, AWS always recommends considering opting for managed versions
    of their products and services rather than adopting a data center mindset management
    approach. For example, if you require a MySQL database solution, it makes sense
    to opt for Amazon RDS rather than to provision EC2 instances and deploy the MySQL
    database software on those instances. By hosting your databases on EC2 instances,
    you become solely responsible for all the management and maintenance tasks associated
    with the upkeep of the database solution.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, you need to take full responsibility for the applications and data
    you put in the cloud to ensure that your solutions are secure and reliable.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed the importance of the AWS Shared Responsibility
    Model and how you can share security responsibility with AWS for the applications
    and workloads that you deploy in the cloud. In the next section, we will quickly
    review some key compliance programs that AWS adheres to, which can help you fulfill
    your regulatory requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the AWS compliance programs and AWS Artifact
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on the nature of your business and the applications you plan to host
    on AWS, you need to ensure that you meet any compliance or regulatory requirements.
    For example, if you plan to process and store credit card information, you must
    ensure that your application meets the **Payment Card Industry Data Security Standard**
    (**PCI DSS**). This allows you to store, process, or transmit **cardholder data**
    (**CHD**) or **sensitive authentication data** (**SAD**).
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, if you are in the health care industry and based in the US, you are
    subject to the US **Health Insurance Portability and Accountability Act** (**HIPAA**)
    of 1996\. This means that in addition to various business processes, any applications
    that are hosted on AWS must also be aligned with HIPAA compliance with regards
    to how **personal health information** (**PHI**) is processed and maintained.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, AWS needs to ensure that its services are aligned with HIPAA
    compliance if its healthcare customers are to consume those services for their
    applications. Let's take the example of Amazon Athena, which, as discussed in
    [*Chapter 11*](B17124_11_Final_SK_ePub.xhtml#_idTextAnchor276), *Analytics on
    AWS*, is an interactive query service that enables you to analyze data held directly
    in Amazon S3 using standard SQL. AWS confirms that Amazon Athena can be used to
    process data containing PHI. Features such as encrypting data in transit between
    Amazon Athena and Amazon S3 are provided by default. Furthermore, Amazon Athena
    uses AWS CloudTrail to log all API calls so that an audit trail is maintained.
    The customer is required to ensure that they meet HIPAA compliance by enabling
    encryption at rest while the data resides in Amazon S3\. The customer can also
    use server-side encryption to encrypt query results from and within Amazon Athena.
    Again, this feature is offered by AWS for the customer to configure.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, compliance is a shared responsibility between AWS and the customer.
    As another example, AWS manages and controls the components of the host operating
    system and virtualization layer down to the physical infrastructure for Amazon
    EC2\. The customer is responsible for the guest operating system (which will include
    patching, performing security updates, and more), as well as any applications
    that have been installed and their security group configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's learn where customers can obtain information that confirms that
    AWS meets various compliance requirements.
  prefs: []
  type: TYPE_NORMAL
- en: About AWS Artifact
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Customers have access to various compliance reports to confirm whether the services
    offered by AWS meet their specific and regulatory requirements. These reports
    are available via a portal on AWS known as **AWS Artifact**. These reports include
    AWS **System and Organization Controls** (**SOC**) reports, **Payment Card Industry**
    (**PCI**) reports, and certifications from accreditation bodies across different
    Regions.
  prefs: []
  type: TYPE_NORMAL
- en: Customers can download these reports and submit security and compliance documents
    to their auditors. These can be used to demonstrate how various AWS services and
    their underlying infrastructure fulfill the security and compliance requirements
    that the customer is consuming.
  prefs: []
  type: TYPE_NORMAL
- en: These **artifacts** can also be used by the customers to evaluate their application
    architecture and cloud configurations and assess the effectiveness of their business's
    internal controls.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, customers can review, accept, and track the status of various AWS agreements
    such as the Business Associate Addendum, where the customer is subject to HIPAA
    guidelines to ensure that PHI information is properly safeguarded. If you have
    multiple AWS accounts, you can accept agreements on behalf of those accounts and
    manage them with your AWS organizations.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed AWS compliant and the Artifact service, which
    allows you to gain confirmation from AWS on how they meet compliance requirements.
    AWS Artifact is your single source of truth and gives you access to various compliance
    documents such as AWS ISO certifications, PCI and SOC reports, and more.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss how AWS allows you to proactively test
    your cloud deployments for vulnerabilities and protects your applications in the
    cloud.
  prefs: []
  type: TYPE_NORMAL
- en: AWS vulnerability scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an AWS customer, you are going to be consuming various services to build
    and deploy your cloud applications. You want to make sure that your cloud solutions
    are highly secure and protected. To that end, you will follow key guidelines and
    industry best practices while implementing security controls and procedures at
    the different levels of your cloud ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: But how you can confirm that the level of protection you have implemented is
    sufficient and whether the controls you have put in place work?
  prefs: []
  type: TYPE_NORMAL
- en: AWS allows its customers to conduct **penetration testing** on their workloads
    in the AWS cloud. Also known as *pen testing*, this is a simulated cyber-attack
    against your computer systems to check for vulnerabilities. This is usually conducted
    by your internal or appointed security team.
  prefs: []
  type: TYPE_NORMAL
- en: As a customer, you need to follow the service policy for penetration testing,
    which includes permitted services and prohibited activities. For example, you
    are prohibited from using any tools to perform **denial of service** (**DoS**)
    attacks or simulations, even if it is against your AWS assets. **Distributed denial
    of service** (**DDoS**) simulation testing can only be carried out by an **AWS
    Partner Network** (**APN**) partner that has been pre-approved by AWS to conduct
    DDoS simulation tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table gives you a quick view of some of the permitted services
    you can run tests against, as well as their prohibited activities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 14.1 – AWS permitted services and prohibitive activities for penetration
    testing'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Table_14.1.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 14.1 – AWS permitted services and prohibitive activities for penetration
    testing
  prefs: []
  type: TYPE_NORMAL
- en: You can also perform **network stress testing** and other simulated events where
    you will need to request authorization from AWS by filling in a simulated events
    form.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we provided a quick overview of how customers can perform penetration
    testing against their workloads on AWS. In the next section, we will provide a
    quick overview of encryption services on AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of data encryption services on AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Encrypting your data is a critical step in ensuring that you protect its integrity
    and avoid data being readable by unauthorized parties. AWS enables you to encrypt
    your data both in transit (while it is being transmitted from a source to a destination)
    and at rest (while it resides on a disk).
  prefs: []
  type: TYPE_NORMAL
- en: To protect data in transit, you must transmit the data using **Secure Socket
    Layer/Transport Layer Security** (**SSL/TLS**) or some form of client-side encryption.
    SSL/TLS requires you to make use of certificates, which are used to encrypt and
    decrypt the data.
  prefs: []
  type: TYPE_NORMAL
- en: To protect data at rest, you must create and use encryption keys to encrypt
    and decrypt your data. Encryption keys are data files containing a long series
    of numbers or letters that is used by a cryptographic algorithm to encode and
    decode data. Examples of algorithms you may have heard of include **Triple DES**
    or **Advanced Encryption Standard** (**AES-256**) bit encryption.
  prefs: []
  type: TYPE_NORMAL
- en: An encryption key can either be **symmetric** (where you use the same key to
    encrypt and decrypt the data) or **asymmetric**, which is a public/private key
    combination. Here, you use the public key to encrypt the data, and only users
    or applications that have access to the private key can decrypt the data.
  prefs: []
  type: TYPE_NORMAL
- en: AWS takes away a lot of the overhead of creating and managing encryption keys
    with its **Key Management Service** (**KMS**). You can use KMS to add encryption
    services for your data that's held in various AWS services, including Amazon EBS
    volumes, Amazon RDS, Amazon S3, and others.
  prefs: []
  type: TYPE_NORMAL
- en: With AWS KMS, you create and manage **customer master keys** (**CMKs**), which
    are stored within the KMS service and used to encrypt and decrypt your data. AWS
    KMS will create the *material* that's used to generate these CMKs. A key material
    is a secret string of bits that's used in a cryptographic algorithm. With KMS,
    this material cannot be extracted, exported, or viewed in any way. You can also
    configure multi-Region CMKs, which let you encrypt data in one AWS Region and
    decrypt it in a different AWS Region.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of CMKs, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Customer-managed CMKs**: These are CMKs that you create, own, and manage.
    You can rotate their cryptographic material, add tags, specify key policies and
    create aliases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS-managed CMKs**: These are CMKs that are created, managed, and used on
    your behalf by an AWS service that is integrated with AWS KMS. You cannot manage
    these CMKs, rotate them, or change their key policies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS KMS also comes with additional features, including a built-in auditing feature
    since it integrates with Amazon CloudTrail. Using AWS KMS, you can record and
    track all API requests, including key management actions and the usage of your
    keys.
  prefs: []
  type: TYPE_NORMAL
- en: With Amazon S3, additional encryption options are offered. We will look at this
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon S3 encryption
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To protect data at rest in Amazon S3, you have the following types of encryptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Server-side encryption**: Amazon S3 will encrypt your data before saving
    it to disk and decrypt it when you attempt to access your data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client-side encryption**: You encrypt the data on the client side before
    uploading it to Amazon S3\. With client-side encryption, you manage the encryption
    process, keys, and tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Concerning server-side encryption, Amazon S3 will encrypt your data at the
    object level as it writes it to disks, and then decrypt it when you access those
    objects. This process is transparent to the user as AWS does all the heavy lifting
    for you. There are three options available with server-side encryption:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Server-Side Encryption with Amazon S3-Managed Keys** (**SSE-S3**): Amazon
    S3 encrypts each object with a unique key and then encrypts the key with a *master
    key*. It uses AES-256 to encrypt your data. Key rotation is managed by AWS as
    a backend process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server-Side Encryption with CMKs Stored in AWS KMS** (**SSE-KMS**): This
    is similar to SSE-S3 but with additional features such as separate permission
    requirements for using the CMK and the ability to provision an audit trail that
    shows when your CMK was used and by whom. As a customer, you can create and manage
    these CMKs or use AWS-managed CMKs that are unique to your account, service, and
    Region.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server-Side Encryption with Customer-Provided Keys** (**SSE-C**): You manage
    the encryption keys and AWS will manage the process of encrypting and decrypting
    objects using your keys.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As well as protecting data at rest, you can protect your data in transit using
    SSL/TLS, as we discussed previously.
  prefs: []
  type: TYPE_NORMAL
- en: AWS KMS is backed by the **Federation Information Processing Standard** (**FIPS**)
    140-2 **hardware security modules** (**HSMs**), which KMS manages. FIPS 140-2
    is a security accreditation program for validating cryptographic modules. AWS
    KMS uses HSMs, which are multi-tenanted. If you must host your own isolated HSMs
    for additional regulatory requirements, then you should consider using **AWS CloudHSM**,
    which we will discuss briefly next.
  prefs: []
  type: TYPE_NORMAL
- en: AWS CloudHSM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS CloudHSM is a dedicated **hardware security module** (**HSM**) that allows
    you to generate and manage encryption keys in the cloud. You are provided with
    dedicated FIPS 140-2 Level 3-validated HSM devices. These are placed in your VPC
    and are fully managed for you by AWS. This is particularly useful if you must
    manage your own cryptographic keys. You are responsible for generating, storing,
    importing, exporting, and managing your cryptographic keys as AWS does not have
    access to your keys. You can use CloudHSM for both symmetric and asymmetric key
    pairs.
  prefs: []
  type: TYPE_NORMAL
- en: AWS CloudHSM also lets you integrate with your applications using industry-standard
    APIs such as the PKCS#11, **Java Cryptography Extension** (**JCE**), and **Microsoft
    CryptoNG** (**CNG**) libraries.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you were provided with an overview of the encryption services
    in AWS. We discussed AWS KMS, which allows you to also create and manage your
    CMKs to encrypt and decrypt data. AWS KMS also offers auditing capabilities, which
    allow you to enforce compliance requirements.
  prefs: []
  type: TYPE_NORMAL
- en: We also looked at the different encryption options available for Amazon S3\.
    To implement data at rest with Amazon S3, you need to decide on either **server-side
    encryption** or **client-side encryption**. With **server-side encryption**, you
    can either implement **SS3-S3**, which uses Amazon S3-managed keys, SS3-KMS, which
    enables you to create CMKs and offers an audit trail of when the keys are used
    and by whom, or SS3-C, which is where you manage the encryption keys as a customer.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you learned about the AWS CloudHSM service, which offers dedicated
    HSMs to enable you to generate and manage keys that are isolated from other AWS
    customers. CloudHSM devices are FIPS 140-2 Level 3 compliant and useful if you
    need to fulfill extra regulatory requirements.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at a couple of AWS security firewall solutions,
    namely **AWS Web Application Firewall** (**AWS WAF**) and AWS Shield.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting cloud resources and applications with AWS WAF and AWS Shield
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS offers various security tools and services to help protect your cloud workloads
    from attacks. We will look at two of these services in this section – AWS WAF
    and AWS Shield.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting applications with AWS WAF
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS WAF is a web application firewall designed to protect any applications that
    are made available via Amazon CloudFront, the Amazon API Gateway REST API, application
    load balancers, or the AWS AppSync GraphQL API.
  prefs: []
  type: TYPE_NORMAL
- en: AWS WAF can help protect applications at layer 7 of the **Open Systems Interconnection**
    (**OSI**) model, which helps you monitor and protect traffic over HTTP and HTTPS.
    This allows you to protect your content from common web exploits, such as **SQL
    injection** and **cross-site scripting**.
  prefs: []
  type: TYPE_NORMAL
- en: You use AWS WAF to control access to your content by specifying **web access
    control lists** (**web ACLs**). You define rules that specify an inspection criterion
    with an action to take if a web request meets the criteria.
  prefs: []
  type: TYPE_NORMAL
- en: When using AWS WAF, you are charged based on the web ACLs and rule groups you
    create and for the number of HTTP(S) requests that AWS WAF inspects.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at the AWS Shield service.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting network attacks with AWS Shield
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**AWS Shield** is a fully managed service that offers protection against **DDoS**
    attacks. This is a type of attack where the perpetrator attempts to overwhelm
    your network and servers using a flood of internet traffic, preventing authorized
    users from accessing your service.'
  prefs: []
  type: TYPE_NORMAL
- en: 'AWS offers two tiers of the Shield service, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS Shield Standard**: This is available at no additional cost for AWS customers
    and protects against common network and transport layer DDoS attacks on your websites
    and applications. AWS Shield Standard can be used with Amazon CloudFront and Route
    53 to provide layered protection against all known infrastructure attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS Shield Advanced**: This provides additional protection against attacks
    on your EC2 instances, elastic load balancers, CloudFront, Global Accelerator,
    and Route 53 resources. The service also offers detection and real-time visibility
    into attacks, allowing you to protect against large and sophisticated DDoS attacks.
    In addition, AWS Shield Advanced gives you access to the AWS **Shield Response
    Team** (**SRT**) 24/7 to assist you in handling such attacks. AWS Shield is a
    chargeable service at the rate of $3,000 per **AWS organization** and on a per-GB
    fee on data transfer out, depending on the service being used, such as elastic
    load balancers or CloudFront, Route 53, Global Accelerator, and elastic IPs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The cost of AWS Shield Advanced includes the charges of AWS WAF and some other
    services.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this section, we discussed two key firewall tools offered by AWS. AWS WAF
    protects your applications from common web exploits at layer 7 of the OSI model,
    whereas AWS Shield offers protection against DDoS attacks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at the AWS Inspector service, which can be
    used to protect your EC2 instances.
  prefs: []
  type: TYPE_NORMAL
- en: Assessing and securing your EC2 instances with AWS Inspector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**AWS Inspector** is a security tool that''s used to assess the network accessibility
    and application security state of your EC2 instances. You can use AWS Inspector
    to detect open network ports, any root logins being enabled, and vulnerable software
    versions on your EC2 instances. You can then take appropriate action, as per the
    best practices.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The AWS Inspector service uses *rules packages*, which are a collection of
    security checks that are used in your *assessment runs*. There are two types of
    rules packages, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Network reachability rules package**: Designed to check for access to your
    EC2 instances from the internet and identify open ports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Host assessment rules packages**: Designed to check for software vulnerabilities
    and insecure configurations, including **Common Vulnerabilities and Exposures**
    (**CVE**), **Center for Internet Security** (**CIS**), as well as other security
    best practices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need to perform a host assessment to get a detailed analysis of your
    host, application configurations, and filesystem access, you will need to install
    the **AWS Inspector agent**. The AWS Inspector agent will collect telemetry data
    formatted as JSON documents from its assessment of your EC2 instances and store
    it in a managed S3 bucket for up to 30 days.
  prefs: []
  type: TYPE_NORMAL
- en: 'These findings can then be viewed in the AWS Inspector dashboard, as per the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.3 – AWS Inspector dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_14_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.3 – AWS Inspector dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then drill down into these findings and see specific recommendations
    for your EC2 instances. The following screenshot shows findings stating that automatic
    Windows updates should be enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.4 – AWS Inspector – Findings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_14_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.4 – AWS Inspector – Findings
  prefs: []
  type: TYPE_NORMAL
- en: You can install the Amazon Inspector agent using the **Systems Manager Run Command**
    on multiple instances, manually install it on each EC2 instance, or configure
    an AMI that's prebaked with the agent installed.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are just using AWS Inspector to check for network ports that can be reached
    from outside the VPC, you do not need to install the AWS Inspector agent.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about the AWS Inspector service, which allows you
    to perform an automatic security assessment of your EC2 instances to identify
    exposure, vulnerabilities, and deviations from best practices.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss additional security services offered by
    AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Other AWS security services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will examine a few additional security tools and services
    on AWS. We will start by looking at Amazon Macie, which recognizes sensitive data
    such as **personally identifiable information** (**PII**).
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Macie
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon Macie uses machine learning and pattern matching techniques to detect
    and alert you to any sensitive data, such as PII, stored in Amazon S3\. You can
    also use Macie to send alerts on S3 buckets that are unencrypted, publicly accessible,
    and shared with other AWS accounts outside of your AWS organizations.
  prefs: []
  type: TYPE_NORMAL
- en: 'AWS Macie will monitor how your data is accessed in Amazon S3, identify any
    anomalies, and generate alerts if it detects unauthorized access. AWS Macie also
    provides you with a dashboard that provides a summary of all its findings, as
    per the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.5 – Amazon Macie – Summary'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_14_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.5 – Amazon Macie – Summary
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at AWS GuardDuty, which is designed to detect malicious activity
    and unauthorized behavior against your AWS accounts.
  prefs: []
  type: TYPE_NORMAL
- en: AWS GuardDuty
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**AWS GuardDuty** is a threat detection service that can analyze and detect
    malicious activity against your AWS accounts and application workloads. The service
    uses various intelligence feeds to be aware of malicious IP addresses and domains.
    It also uses machine learning to help detect anomalies by analyzing data from
    your CloudTrail event logs, Amazon VPC Flow Logs, and DNS logs.'
  prefs: []
  type: TYPE_NORMAL
- en: AWS GuardDuty can detect the use of exposed credentials, any communication with
    malicious IP addresses and domains, as well as irregular activities carried out
    in your AWS account. This includes EC2 instances being launched in Regions you
    do not normally work in.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the threats that AWS GuardDuty can detect include EC2 instance compromises,
    such as those associated with cryptocurrency mining, or S3 bucket compromises,
    such as unusual S3 API activity from a remote host or unauthorized access from
    known malicious IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Pricing for Amazon GuardDuty is based on the number of CloudTrail events and
    the volume of VPC Flow Logs and DNS log data to be analyzed. There is a free 30-day
    trial available for the service.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at another service, Amazon Detective, that can help identify
    the root cause of potential security issues or suspicious activities.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Detective
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Several different AWS services can be used to identify potential security issues,
    such as the previously discussed Amazon Macie and Amazon GuardDuty. However, if
    you are trying to determine the root cause of those security findings, you would
    generally need to process vast amounts of logs and use an **Extract, Transform,
    and Load** (**ETL**) solution to perform the necessary deep-dive analysis required.
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon Detective** can extract time-based events such as logins, network
    traffic from AWS CloudTrail and Amazon VPC Flow Logs, as well as ingesting your
    GuardDuty findings. Amazon Detective then helps by producing visualizations using
    the information that''s been ingested, which can help you identify resource behaviors
    over time and interactions between those resources, ultimately assisting in identifying
    the root cause of your security issues.'
  prefs: []
  type: TYPE_NORMAL
- en: This pricing is based on the volume of data that's ingested from AWS CloudTrail
    logs, Amazon VPC Flow Logs, and Amazon GuardDuty findings. Amazon Detective is
    available as a 30-day free trial.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at the **AWS Certificate Manager** (**ACM**) service, which
    enables you to create, store, and renew SSL/TLS certificates.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Certificate Manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To protect your AWS resources with secure encryption and verify the identity
    of websites over the internet, you need to provision and manage **SSL/TSL** certificates.
    Certificates are issued by a **certificate authority** (**CA**), which is a trustworthy
    third party that will authenticate both ends of the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: '**ACM** enables you to create, manage, and deploy your SSL/TLS certificates
    for use with AWS resources and is integrated with several AWS services that need
    to use SSL/TLS connectivity for secure communications. You can use ACM to issue
    and manage certificates for your elastic load balancers, Amazon CloudFront distributions,and
    APIs on an API gateway. AWS ACM can also manage all your certificate renewals.'
  prefs: []
  type: TYPE_NORMAL
- en: For ACM-integrated services, there is no charge for provisioning certificates
    for your elastic load balancers and API gateways. If you need private certificates,
    **ACM Private CA** lets you pay monthly for the services and certificates you
    create.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at the AWS Secrets Manager service, which protects the secrets
    you need to access applications, databases, and other AWS services.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Secrets Manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [*Chapter 13*](B17124_13_Final_SK_ePub.xhtml#_idTextAnchor317), *Management
    and Governance on AWS*, we looked at the **AWS Systems Manager** (**ASM**) Parameter
    Store service. This service can be used to securely store parameter values such
    as your database username and passwords, rather than you having to hardcode this
    information in your application. Storing such sensitive information in your application
    code is not a best practice and carries an administrative overhead. With the SSM
    Parameter Store, your applications can retrieve the necessary parameters to make
    calls to the database.
  prefs: []
  type: TYPE_NORMAL
- en: However, the service does have some limitations, and this is where AWS Secrets
    Manager comes to the rescue. In addition to allowing you to store *secrets information*,
    the service also makes it easy to manage and rotate those database credentials.
    AWS Secrets Manager offers native support for rotating credentials for databases
    hosted on Amazon RDS, Amazon DocumentDB, and clusters hosted on Amazon Redshift.
    This rotation can be automated via a schedule, which adds another layer of security.
    Furthermore, you can use AWS Secrets Manager to rotate other secrets by modifying
    sample Lambda functions. This can be used, for example, to rotate OAuth refresh
    tokens, which are used to authorize applications or passwords used for MySQL databases
    that are hosted on-premises. Your applications then retrieve secrets by replacing
    hardcoded secrets with a call to Secrets Manager APIs.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Secrets Manager also encrypts your *secrets* using encryption keys, which
    you create and manage with Amazon KMS. The service also enables you to replicate
    your secrets across AWS Regions for multi-Region application support and disaster
    recovery purposes.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of costs, you are charged based on the number of secrets that are managed
    in Secrets Manager and the number of Secrets Manager API calls that are made.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at another identity service that enables you to use external
    public identity providers to grant access to your AWS resources, namely Amazon
    Cognito.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Cognito
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To authenticate users and grant them access to your AWS resources, you need
    to create and manage their identities and offer a mechanism for authentication
    and authorization. AWS IAM is an identity and access management solution you are
    already familiar with but is designed for users who typically work with your AWS
    services to build solutions, such as internal staff members. If you are building
    applications that need to authenticate against backend resources, you could use
    IAM user accounts, but there are several limitations, including the maximum 5,000
    IAM user accounts that you can create per AWS account.
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon Cognito** lets you set up identity and access control solutions for
    your web and mobile applications using standards such as OAuth 2.0, SAML 2.0,
    and OpenID Connect. With Amazon Cognito, you can create **user pools** and **identity
    pools**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon Cognito user pools**: Used for verifying your users'' identities,
    you can create user pools to host millions of users or federate their access via
    a third-party **identity provider** (**IdP**), such as Apple, Facebook, Google,
    or Amazon, and Microsoft Active Directory. In the case of the latter, the user
    pool will manage tokens issued by your third-party IdP. You use user pools to
    set up the *sign-up* and *sign-in* features for your web pages or app. You can
    also use user pools to track the user devices, locations, and IP addresses of
    your users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Cognito identity pools**: These allow you to define authorization
    by creating identities for users who need access to specific AWS services, such
    as an Amazon S3 bucket or a DynamoDB table. You can also use identity pools to
    generate temporary AWS credentials for unauthenticated users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will look at AWS Directory Service, which is particularly useful if
    you wish to use the Microsoft Active Directory IAM service.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Directory Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**AWS Directory Service for Microsoft Active Directory** (also known as **AWS
    Managed Microsoft AD**) is a fully managed Active Directory service on the AWS
    platform. The service enables you to use standard tools such as Active Directory
    Users and Computers and take advantage of features such as trusts, **Distributed
    File System** (**DFS**), Group Policy, and **single sign-on** (**SSO**).'
  prefs: []
  type: TYPE_NORMAL
- en: You can deploy Microsoft Active Directory-aware applications on your EC2 instance,
    as well as joining your Windows EC2 instances to the Active Directory domain.
    You can also join and manage **Amazon RDS for SQL Server** instances to a domain
    that provides seamless authentication services to your SQL databases running on
    Amazon RDS.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, you can join **Amazon WorkSpaces** to the domain. Amazon WorkSpaces
    is an end user computing service that enables you to deploy virtual Linux and
    Windows desktops in the cloud. AWS manages the virtual desktops, including security
    patching and managing the operating system. With Amazon WorkSpaces, you can consider
    migrating away from your on-premises desktop infrastructure to a **virtual desktop
    infrastructure** (**VDI**) solution. This enables you to manage your **total cost
    of ownership** (**TCO**) and opt for an OPEX mode of investment in IT.
  prefs: []
  type: TYPE_NORMAL
- en: Another service that integrates with AWS Managed Microsoft AD is **Amazon WorkDocs**.
    Amazon WorkDocs is a content creation, storage, and collaboration service. Amazon
    WorkDocs enables you to store Microsoft Word, PowerPoint, Excel, and various other
    document types. You and your colleagues can use Amazon WorkDocs for collaboration
    and to share work documents. Like other collaboration tools such as Microsoft
    SharePoint, the service also enables you to access APIs so that you can develop
    content-rich applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at several AWS security tools and services to help
    you design and architect security measures that will help protect your applications
    and workloads on AWS. You must examine the vast array of security services on
    offer and align their usage with your specific business objectives, all while
    considering any compliance or regulatory requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will conduct an exercise to demonstrate one of the security tools we
    covered in this section. Specifically, you will learn how to use Amazon Macie
    for a simple real-world example.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 14.1 – preventing data leaks with Amazon Macie
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this exercise, you will use Amazon Macie to monitor a single Amazon S3 bucket
    and identify whether any PII was stored in the bucket. Imagine a scenario where
    a user in your organization has uploaded a sensitive file to the wrong Amazon
    S3 bucket. In our example, we have a *product details* bucket, which would contain
    product information that can be accessed by the marketing team. However, because
    of poorly configured access policies, a member of the HR team has uploaded sensitive
    employee information into this bucket.
  prefs: []
  type: TYPE_NORMAL
- en: This could result in data leaks. While you want to ensure that users are restricted
    to which buckets they can access, sometimes, accidents do happen. Amazon Macie
    can detect content that's uploaded to S3 buckets and identify specific types of
    sensitive data. You can then take the appropriate action.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 – creating a new Amazon S3 bucket
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to Amazon S3 and click on the **Buckets** link from the left-hand menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the right-hand pane, click the **Create bucket** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a bucket name and select the **us-east-1** Region to create your bucket
    in. I have named my bucket **justdessertsproducts**, so you will need to select
    a different name that is unique to your bucket. We are going to assume that someone
    has accidentally uploaded sensitive PII to this bucket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create bucket** button at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create a simple CSV file using Excel or Google Sheets and upload it to
    the S3 bucket. Ensure that the CSV file contains some data that you can classify
    as PII. For example, in the following screenshot, you will note that I have added
    some dummy data that contains sensitive employee information. In this example,
    **EmployeeID** can be used to identify a specific employee and their salary information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.6 – Salary information of employees'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_14_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.6 – Salary information of employees
  prefs: []
  type: TYPE_NORMAL
- en: When using Amazon Macie to identify information that may be PII-related, you
    would need to be able to identify the format of the data so that Amazon Macie
    knows what to look for. Note that the format of the `EmployeeID` data, as per
    the preceding screenshot, is *two characters* (*capital letters*), followed by
    a *hyphen* (*-*) and then *four numbers*.
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 – configuring Amazon Macie to identify sensitive employee data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the AWS Management Console, search for Amazon Macie in the top search bar
    and click on the service from the filtered search results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If this is the first time you have navigated to the Amazon Macie console, you
    will see a splash screen, as shown in the following screenshot:![Figure 14.7 –
    Amazon Macie
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_14_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.7 – Amazon Macie
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Get started** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon Macie requires permission to access information about the data that you
    store in Amazon S3\. You will be provided with the option to enable Amazon Macie
    with the necessary access, which will create an IAM role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go ahead and click the **Enable Macie** button, as per the following screenshot:![Figure
    14.8 – Enable Macie
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_14_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.8 – Enable Macie
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once enabled, Amazon Macie will analyze your environment and, after a short
    time, provide a dashboard, as shown in the following screenshot:![Figure 14.9
    – Amazon Macie – Summary
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_14_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.9 – Amazon Macie – Summary
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: While several items from the preceding summary need to be examined, for this
    exercise, we are primarily interested in ensuring that PII is not uploaded to
    the specific bucket we configured earlier. For this, we need to create an **Amazon
    Macie job**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the left-hand menu, select the **Jobs** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the right-hand pane, click the `csv` and then click the **Include** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Step 4, Select managed data identifiers**, select **None** and then click
    **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For **Step 5, Select custom data identifiers**, click on the **Manage custom
    identifiers** link to open the **Custom data identifiers** web page in another
    browser tab, as per the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.10 – Creating custom data identifiers'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_14_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.10 – Creating custom data identifiers
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Give the identifier a name and an optional description.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, you will need to provide a `EmployeeID` format. Regex is short for *regular
    expression*, which is a sequence of characters that specifies a search pattern.
    Often, you can use regex patterns to search for specific types of data or to validate
    data. For this exercise, your regex pattern will be *[A-Z]{2}-[0-9]{4}*. Input
    this pattern into the **Regular expression** text box.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, click the **Submit** button, which will create the custom data identifier
    for this exercise.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Navigate back to the **Job creation** wizard, which should still be visible
    in the previous browser tab. You should still be in **Step 5**. Click on the refresh
    icon to access the **EmployeeID** custom data identifier, as per the following
    screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 14.11 – Select custom data identifiers'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17124_14_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.11 – Select custom data identifiers
  prefs: []
  type: TYPE_NORMAL
- en: Select the **EmployeeID** custom data identifier and click the **Next** button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For **Step 6**, provide a name for the job and then click on the **Next** button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For **Step 7**, review the configuration settings and then click the **Submit**
    button at the bottom of the page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your job has now been created and will be in the **Active (Running)** state,
    as per the following screenshot:![Figure 14.12 – Amazon Macie S3 job created
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_14_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.12 – Amazon Macie S3 job created
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The job will take a few minutes to complete. Once the job completes, click on
    the **Show results** drop-down arrow and select **Show findings**. You will see
    that it has found the CSV file we uploaded earlier, as per the following screenshot:![Figure
    14.13 – Macie findings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_14_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.13 – Macie findings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the findings. Then, from the **Actions** drop-down list, select **Export
    (JSON)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be able to review the JSON file, which clearly shows that it identified
    four counts of PII data, as per the following screenshot:![Figure 14.14 – Amazon
    Macie job findings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17124_14_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.14 – Amazon Macie job findings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The JSON will also highlight the columns and rows where the PII data was identified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, Amazon Macie is an extremely powerful tool that can help you
    understand your data access patterns and alert you of potential data breaches.
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, you will clean up the resources you created.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 14.2 – cleaning up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, you will clean up the resources you created in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Amazon Macie console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the left-hand menu, select **Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the right-hand pane, click on the **Disable Macie** button. Amazon
    Macie will permanently delete all your existing findings, classification jobs,
    and other Macie resources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the dialog box that appears, type **Disable** in the text box and click the
    **Disable** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the Amazon S3 console, you will need to empty the S3 bucket you created
    and then delete the bucket, as you did previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will provide a summary of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security in the cloud is a shared responsibility between the customer and AWS.
    AWS will take responsibility for the security *of* the cloud, while the customer
    is responsible for security *in* the cloud. This distinction must be understood.
    You have access to a vast array of security tools and services that can help you
    build a highly robust and secure environment, within which you can host your application
    workloads.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter also discussed concepts related to compliance and how AWS services
    are aligned with various regulatory bodies. As a customer, you are responsible
    for ensuring that your applications are built while following any necessary protocols.
    So, for example, if you are in the healthcare industry and based in the US, then
    your application processes and workflows must adhere to HIPAA compliance.
  prefs: []
  type: TYPE_NORMAL
- en: We also discussed encryption and how you must implement encryption both at rest
    and in transit. AWS offers KMS services to help you manage your encryption needs.
    If you have specific requirements to create, manage, and rotate your encryption
    keys using dedicated FIPS 140-2 Level 3 hardware security modules, then you can
    also opt for the AWS CloudHSM service.
  prefs: []
  type: TYPE_NORMAL
- en: AWS also offers several tools to protect your network and applications with
    firewall solutions such as AWS Shield and AWS WAF. AWS Shield offers protection
    against DDoS attacks, whereas AWS WAF is an application tier firewall design that
    can protect you from common web exploits such as SQL injection and cross-site
    scripting.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we examined various specific AWS security tools and services, including
    AWS Inspector, Amazon Macie, and AWS Secrets Manager. These tools can help you
    build a complete end-to-end secure environment to protect your data, grant access
    to authorized users, and prevent attacks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss the principles of billing and pricing on
    AWS. You will learn about cloud economics and how to architect solutions that
    are cost-effective for your business. We will discuss cost management strategies,
    as well as looking at various tools that can help you monitor costs and compare
    pricing options.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of the topics covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following is part of the customers' responsibility regarding the
    Shared Security Model? (Choose 2.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Patch Windows EC2 instances with the latest security patches.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure NACL to only allow inbound ports `80` and `443` to Linux web servers
    from the internet.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the network cabling in the `us-east-1` data centers.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Upgrade the underlying infrastructure support for the Lambda service.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Upgrade the biometric readers in the London Region.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which service in AWS protects your virtual network and resources from common
    DDoS attacks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS WAF
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Shield
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Detective
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon Macie
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following AWS Security tools can protect your web applications
    or APIs against common web exploits that may affect availability, compromise security,
    or consume excessive resources?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS WAF
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS GuardDuty
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Shield
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS NACL
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which AWS service uses machine learning to classify sensitive information stored
    in your Amazon S3 buckets and monitor access patterns for anomalies that indicate
    risks or suspicious behavior, such as large quantities of source code being downloaded?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon Macie
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon X-Ray
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Shield
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS WAF
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which AWS service enables companies looking to migrate to the AWS cloud to obtain
    copies of various compliance documents such as ISO certifications, **PCI, and
    SOC** reports?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Artifact
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS Config
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS CloudWatch
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS security reports
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To fulfill strict compliance requirements, you need to create and manage your
    encryption keys using FIPS 140-2 Level 3-validated HSM devices. Which type of
    encryption service would you recommend?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS KMS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS CloudHSM
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Certificate Manager
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: BitLocker
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
