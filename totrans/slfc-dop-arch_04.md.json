["```\npublic class ShoppingCart {\n    public static Decimal calculateTotal(List<Product__c> products) {\n        Decimal total = 0;\n        if (products != null) {\n            for (Product__c p : products) {\n                if (p.Price__c != null) {\n                    total += p.Price__c;\n                }\n            }\n        }\n        return total;\n    }\n}\n```", "```\n@isTest\nprivate class ShoppingCartTest {\n    @isTest\n    static void SingleProduct() {\n        // Create a single product\n        Product__c p = new Product__c(Description__c='Product A', \n        Price__c=100);\n        insert p;\n        // Calculate the total price\n        Decimal total = ShoppingCart.calculateTotal(new \n        List<Product__c>{p});\n        // Verify that the total is correct\n        Assert.areEqual(100, total, 'Total should be 100');\n    }\n    @isTest\n    static void testMultipleProducts() {\n        // Create multiple products\n        List<Product__c> products = new List<Product__c>{\n            new Product__c(Description__c='Product A', Price__c=100),\n            new Product__c(Description__c='Product B', Price__c=50)\n        };\n        insert products;\n        // Calculate the total price\n        Decimal total = ShoppingCart.calculateTotal(products);\n        // Verify that the total is correct\n        Assert.areEqual(150, total, 'Total should be 150');\n    }\n    @isTest\n    static void testNullProducts() {\n        // Calculate the total price with null products\n        Decimal total = ShoppingCart.calculateTotal(null);\n        // Verify that the total is zero\n        Assert.areEqual(0, total, 'Total should be 0');\n    }\n    @isTest\n    static void testProductsWithoutPrice() {\n        // Create a product without a price\n        Product__c p = new Product__c(Description__c='Product A');\n        insert p;\n        // Calculate the total price\n        Decimal total = ShoppingCart.calculateTotal(new \n        List<Product__c>{p});\n        // Verify that the total is zero\n        Assert.areEqual(0, total, 'Total should be 0');\n    }\n}\n```", "```\ntrigger ProductTrigger on Product__c (before insert, before update, after insert, after update)\n{\n  if (trigger.isBefore)\n  {\n    if (trigger.isInsert)\n    {\n      //before insert logic\n    }\n    else if (trigger.isUpdate)\n    {\n      //before update logic\n    }\n    }\n  else if (trigger.isAfter)\n  {\n    if(trigger.isInsert)\n    {\n      //after insert logic\n    }\n    else if (trigger.isUpdate)\n    {\n      //after update logic\n    }\n  }\n}\npublic with sharing class ProductTriggerHandler\n  {\n    public static void beforeInsert(List<Product__c> products)\n  {\n    Decimal total = 0.0;\n    for(Product__c prod : products)\n    {\n      total += prod.Price__c;\n    }\n    System.debug(total);\n  }\n}\n@isTest\npublic with sharing class ProductTriggerHandlerTest\n{\n    @TestSetup\n    static void setup()\n    {\n        // Create multiple products\n        List<Product__c> products = new List<Product__c>{\n            new Product__c(Description__c='Product A', Price__c=100),\n            new Product__c(Description__c='Product B', Price__c=50)\n        };\n        insert products;\n    }\n    @isTest\n    static void testTotal()\n    {\n        List<Product__c> products = [SELECT Id, Description__c, \n        Price__c from Product__c];\n        Decimal total = 0.0;\n        test.startTest();\n        for(Product__c prod : products)\n        {\n            total += prod.Price__c;\n        }\n        Assert.areEqual(150, total, 'Total should be 150');\n    }\n}\n```", "```\n sf force lightning lwc test setup\n```", "```\nimport { createElement } from 'lwc';\nimport teamComponent from 'c/teamComponent';\ndescribe('c-team-component', () => {\n    afterEach(() => {\n        // The jsdom instance is shared across test cases in a single \n        // file so reset the DOM\n        while (document.body.firstChild) {\n            document.body.removeChild(document.body.firstChild);\n        }\n    });\n    it('renders the correct message', () => {\n        const element = createElement('c-team-component', {\n            is: teamComponent\n        });\n        document.body.appendChild(element);\n        const pElement = element.shadowRoot.querySelector('p');\n        expect(pElement.textContent).toBe('Welcome to the team!');\n    });\n});\n```", "```\nSELECT count_distinct(FlowVersionId)\nFROM FlowTestCoverage\n```", "```\nSELECT count_distinct(Id)\nFROM Flow\nWHERE Status = 'Active' AND Id NOT IN (\n    SELECT FlowVersionId\n    FROM FlowTestCoverage )\n```"]