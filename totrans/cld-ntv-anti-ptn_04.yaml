- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FinOps – How to Avoid a Bill Shock
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*“FinOps is the practice of bringing financial accountability to the variable
    spend model of cloud, enabling distributed teams to make business trade-offs between
    speed, cost,* *and quality.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*– J.R. Storment, Executive Director of the* *FinOps Foundation*'
  prefs: []
  type: TYPE_NORMAL
- en: How do we know what the return value should be for the money we put into something?
    To explore this quote further, we can compare similarities with when we build
    a house and need to set a budget. We know how many rooms we need, how much garage
    space we need, and what insulation level, air conditioning, or heating capacity,
    depending on the climate zone. Those are immediate build expenses. However, there
    are also long-term considerations that we need to consider. Do we want better
    insulation and a solar system to reduce the ongoing electricity cost? This means
    there is more upfront cost, but there is a long-term benefit of ongoing cost reduction.
  prefs: []
  type: TYPE_NORMAL
- en: In the same way, we need to consider the short- and long-term benefits of FinOps.
    It becomes more complex because our cloud landscape is more dynamic than a static
    building construction. FinOps needs to be an ongoing discipline. But how do we
    strike the right balance between paying the right price, implementing the right
    solution, meeting timelines, and getting the right value?
  prefs: []
  type: TYPE_NORMAL
- en: “*Price is what you pay; value is what you get*” – this is a famous quote by
    Warren Buffett. In other words, we need to focus on the value we receive from
    an investment rather than just looking at the price. In our case, the investment
    is all the effort we put into building an enterprise cloud platform and the applications
    we run on top of it. We need to assess the value gained, such as business agility
    and increased resilience, instead of solely focusing on cost reduction.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter’s goal is to understand how we can get good value out of our cloud
    native landscape. We will focus on the following areas:'
  prefs: []
  type: TYPE_NORMAL
- en: Missing out on the power of good tagging practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not leveraging cloud native tooling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ignoring non-obvious **cloud service provider** (**CSP**) costs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Focusing on cost savings over driving value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a lot to unpack, and we will go through it step by step. Before we
    can measure the value, improve our cost governance, and deal with cost ownership,
    we will look into enabling cost allocation in the cloud. It all starts with metadata,
    also called tagging or labeling within the scope of cloud resource management.
    Let’s dive into it.
  prefs: []
  type: TYPE_NORMAL
- en: Missing out on the power of good tagging practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Tags** are key-value pairs that act as metadata for cloud resources. **Tagging**
    is the practice of assigning tags to cloud resources to describe them. Tags help
    organize, manage, and track resources efficiently.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tags are helpful not only in providing a cost breakdown but also in managing,
    identifying, organizing, searching for, and filtering resources. The benefits
    of tagging are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Resource management**: Tags help organize resources by categories, based
    on products or projects, environments, cost centers, business units, and others.
    This makes it easier to search for particular resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security and compliance**: Tags can be used to enforce identity and access
    policies and control access to resources. For example, if a resource tag describes
    a database holding credit card information, we can implement a policy ensuring
    that humans cannot read the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automation**: Tags can be used to drive deployment and auto-scaling behavior
    or automated shutdown of resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operational efficiencies**: Tags can be useful for troubleshooting during
    an incident since they provide additional context. They can also be useful for
    fine-grained monitoring and to drive alerting behavior.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost management**: Tags help allocate and track costs. We can use them to
    break down costs and organize our resources. For the remainder of this section,
    we will focus on this aspect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if tagging is as simple as describing key-value pairs, many things can
    still go wrong, and we will discuss two anti-patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Common anti-patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tagging-related anti-patterns often start with shortcomings in our tagging standards
    or tagging enforcement, and we will look into these areas next.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of tagging standards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first one is the lack of tagging standards, which I have seen many times.
    There are several reasons why this anti-pattern can occur. It could be that cloud
    native adoption did not get enough focus because an organization is trying to
    increase its cloud footprint organically and is never gaining momentum for cloud
    migrations. It could be because a company is trapped in a reactive mode and cannot
    operate strategically or because of competing priorities.
  prefs: []
  type: TYPE_NORMAL
- en: This is how things usually unfold. An organization is adopting the cloud. However,
    the cloud adoption model has gaps, especially in governance, automation, standardization,
    and service catalog offerings. As a result, decentralized product teams are provisioning
    cloud resources and managing them differently. Applying tags is optional. Even
    though teams will eventually decide to apply tags, the tags between teams will
    not be consistent.
  prefs: []
  type: TYPE_NORMAL
- en: That means we will have resources that are not tagged at all or only have some
    tags, and there is a high chance that the tags themselves are inconsistent, whether
    it is the key, the value, or both. Therefore, we will miss out on many FinOps
    guardrails, which we will analyze after the second variation of this anti-pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of tagging enforcement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The second variation is that there are mandated tagging standards but they are
    not enforced. As a result, we will probably have better tagging coverage than
    the previous variation. However, we still rely on human perfection.
  prefs: []
  type: TYPE_NORMAL
- en: Every engineer must ensure they have all tags assigned to each cloud resource.
    That means the key and the value need to be a perfect match.
  prefs: []
  type: TYPE_NORMAL
- en: 'During a consulting engagement, I analyzed the tags in place across different
    cloud environments. Over time, the tag for the cost center had changed multiple
    times. The customer used the following combinations for the key: “cost-centre”
    (UK spelling), “cost-center” (US spelling), “costcentre” (all lower case), “CostCentre”
    (Pascal case syntax), “costcentre,” and “costcenter.”'
  prefs: []
  type: TYPE_NORMAL
- en: Because tags are case-sensitive in AWS, this resulted in six different tag categories.
    Therefore, the billing report also visualized them in six different variations,
    requiring manual rectification to achieve a cost breakdown. Another common mistake
    is to use names for the product owner tag value. The individual then leaves the
    organization and their account gets deactivated. We then have an invalid tag and
    do not even know in which department the previous application owner was. This
    makes it hard to track down the new application owner, assuming there is no ownership
    vacuum.
  prefs: []
  type: TYPE_NORMAL
- en: As we can imagine, this is not an exciting activity that must be performed every
    month and adds the risk of human error.
  prefs: []
  type: TYPE_NORMAL
- en: Consequences of poor tagging practices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several impacts if consequences” we do not have sufficient tagging
    in place:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cost allocation becomes challenging**: We cannot allocate cost to cost centers,
    profit centers, or departments. This makes it difficult to track and manage budgets.
    A common result of unclear cost allocation is the lack of ownership and accountability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost optimization becomes challenging**: Without sufficient tagging, we will
    have difficulties identifying the owner of underutilized or unused resources.
    Therefore, no one will act to right-size resources or turn off unnecessary ones.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inaccurate financial reporting**: Financial reports rely on accurate tagging.
    This means we need to manually allocate costs or accept inaccuracy. In the latter
    case, that means we cannot fairly distribute the cost.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Incomplete tagging also results in imprecise budgeting**: This can lead to
    budget overruns and insufficient forecasting. Without a correct reflection of
    our current spending, we will struggle to predict future expenses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Insufficient showback or chargeback processes**: “Chargeback consequences”
    models, where costs are billed back to the departments or product teams that incurred
    them, rely heavily on accurate tagging. Without accurate tagging, implementing
    a fair and transparent chargeback system is challenging and requires a lot of
    human data wrangling. With showback models, departments are shown their cloud
    spending without actual billing. Insufficient tagging can reduce transparency,
    leading to disputes, confusion, and potentially mistrust.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lack of ownership**: Without a functioning chargeback process, there cannot
    be clear ownership, which is critical for good value realization. Therefore, we
    will miss out on good FinOps practices, including overspending, because we have
    underutilized cloud resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lack of policy enforcement**: Cloud governance policies often depend on tags
    to enforce rules and best practices. Insufficient tagging can weaken governance,
    leading to uncontrolled costs. Tags provide visibility into how resources are
    being used across the organization. Without them, it is difficult to ensure resources
    are consequences” used efficiently and according to policies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spotting untagged resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Common root causes of inadequate tagging are inconsistent deployment methods,
    a lack of leveraging a policy-as-code framework, a lack of tagging standards,
    and a lack of automation that misses out on tagging enforcement. Validating the
    tag keys and values will bring us certainty. There are different ways how to do
    that depending on the CSP We will look into it now by starting with AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Untagged resources in AWS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we have access to the console or cloud shell, we can do the validation ourselves.
    If we want to find untagged resources in our AWS account, we can use the resource
    search feature in the AWS Resource Explorer with a filter query that uses the
    `tag:none` value. As we can see, this is fairly straightforward, and we will now
    explore how to solve this problem in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Untagged resources in Azure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In Azure, we can use PowerShell commands for this as in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding snippet, the following occurs:'
  prefs: []
  type: TYPE_NORMAL
- en: The first command gets all resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second command filters all resources that are not tagged
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third command displays all untagged resources in a table format showing
    the resource name, resource type, resource group name, and location (Region)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will now look into the required steps in GCP.
  prefs: []
  type: TYPE_NORMAL
- en: Untagged resources in GCP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In GCP, we can also use the cloud shell to search for unlabeled resources,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If we have not enabled the cloud asset API yet, we can do this with the first
    command. The second command lists all Google Kubernetes Engine node pools that
    do not have a tag. In the scope, we need to replace `project_name` with our project
    name. The `labels:*` filter reduces the search result to unlabeled resources.
  prefs: []
  type: TYPE_NORMAL
- en: If we don’t have access to the console or cloud shell, we can ask someone with
    permission to run the preceding commands and validate the tagging coverage and
    accuracy. Otherwise, we can also contact the person managing the CSP’s bill and
    validate with them how accurate the current cost breakdown is. It is a good idea
    to validate both options since there might be different opinions within our organization.
    In that case, it will be helpful to set up a workshop and go through the evidence,
    including the last bill, and the cost dashboards from our CSP, and run some commands
    to validate the tags.
  prefs: []
  type: TYPE_NORMAL
- en: Once we understand our current status and shortcomings, we must identify our
    target state. For this chapter, we will solely focus on FinOps-related tags and
    not tags that might be helpful for security, compliance, observability, or other
    operational aspects. *What does good look like, and where do* *we start?*
  prefs: []
  type: TYPE_NORMAL
- en: Adopting a tagging taxonomy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start by defining a tagging taxonomy and establishing standards for
    tag keys, values, and syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Tag keys
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We need to know what information we want to extract from our tags and specify
    the valid and required tag values and keys. Typically, information includes the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cost center and/or business domain/unit or portfolio name**: If there is
    no 1:1 mapping between cost centers and business units and both are relevant for
    a showback or chargeback approach, we will need both.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dev`, `test`, `uat`, `preprod`, and `prod`. should also be addressed in our
    tagging strategy. This gives us good insight to validate how much cost we spend
    per environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Business owner**: This should be the job title or role, not the name of an
    individual. It helps us identify the business owner if we have a showback model
    and need to deliver a cost breakdown. If we have a chargeback model, we know who
    to send the billing information to and provide cost recommendations and forecast
    insights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Technical owner**: This needs to be a job title or owner as well, and the
    information is useful for the same reasons as the business owner. Sometimes this
    could be the same job function across the organization, in which case, we can
    consolidate those two tag values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application and/or service identifier**: This information is useful for linking
    information to our application inventory. In that case, we can answer cost-related
    questions about our application inventory. Adding an application function tag
    is helpful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The term *application function* is sometimes called *application role*, and
    it describes whether a component represents a database, presentation layer, business
    logic, or data tier. It is not necessary for an accurate showback or chargeback
    model, but it gives us good insight into where we spend our money. It will tell
    us whether the CSP cost occurred on the presentation layer, the business logic
    layer, the integration layer, or the data layer. This provides us with additional
    data points when we are considering refactoring our application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tag values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We also need to standardize our tagging values. We must agree on whether we
    want single values or can have lists in the key. The values need to be clearly
    defined. Examples are the correct format for a cost center, which is a combination
    of two digits and four characters, or valid application functions, like `db` for
    the database, `api` for the API layer, `int` for the integration layer, and so
    on. Ideally, those tags are assigned as part of the CI/CD pipeline. In that case,
    we can validate both the key and the value with our policy-as-code framework.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The tagging syntax is also important for keys and values. Syntax examples are
    everything in lowercase (`costcenter`), camel case (`costCenter`), pascal case
    (`CostCenter`), snake case (`cost_center`), and kebab case (`cost-center`). No
    matter what syntax we use, it needs to be consistent, and we need to check that
    the syntax is supported by our CSP. This applies to both the tag key and value.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous improvement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once we have established our taxonomy, we need to continue establishing other
    tagging best practices to achieve a good cost-control governance model.
  prefs: []
  type: TYPE_NORMAL
- en: Tagging automation and enforcement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We want to make sure every resource that supports tagging has a valid tag. We
    can use tools such as AWS Tag Policies and AWS Config, Azure Policy, or Google
    Cloud Resource Manager. This will ensure compliance and prevent untagged resources.
    If we have a service catalog, the tags should be a mandatory input parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the application function, we can include default tags in the service catalog
    item, for example, the database or API gateway. There are different ways we can
    ensure a good tagging implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: We can implement policies with **OPA** or the policy frameworks of our CSP to
    make sure untagged resources can never be deployed except to a sandpit environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we use the development frameworks of our CSP, we can also validate tags
    and labels in a similar approach to unit tests. The AWS **cloud development kit**
    (**CDK**) supports assertions, which we can use to validate tags. The **Azure
    Resource Manager** (**ARM**) template test toolkit can be used to validate the
    structure and properties of Bicep or ARM templates. In GCP, we can write unit
    tests with the Google Cloud SDK to validate labels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some **infrastructure as code** (**IaC**) tools, such as Terraform, support
    tag declaration on a deployment level. This way, we can define common tags like
    *cost center* on a deployment level and only need to define fine-grained tags
    not defined on a deployment or service catalog level.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we have a policy-as-code framework, we can enforce tagging and deny the creation
    of untagged or insufficiently tagged cloud resources. That policy could be skipped
    for sandpit environments where we automatically tear down resources regularly.
    If we have a mature DevSecOps culture in place, we want to warrant that tags can
    only be modified by our CI/CD pipelines. In that case, we can use guardrails to
    make sure tags cannot be modified by human access.
  prefs: []
  type: TYPE_NORMAL
- en: Regular audits using cloud native tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We should conduct regular audits of tags to ensure they are correctly applied
    and up to date. CSPs offer tools such as AWS Tag Editor, Azure Cost Management,
    and Google Cloud’s Resource Manager. Once we generate compliance reports, we can
    identify missing or incorrect tags and take corrective actions.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous improvement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any findings in our tooling or audits need to be addressed to ensure they are
    permanently remediated and do not become a permanent burden. Once we have our
    tagging established, we can get valuable insight. The following Azure diagram
    illustrates how the tag inheritance feature can be used. When enabled, tag inheritance
    applies billing, resource group, and subscription tags to child resource usage
    records. In that case, we do not have to tag every resource. This is a very powerful
    feature.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B22364_04_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.1 – Azure example showing tag inheritance (source: [https://learn.microsoft.com/en-us/azure/cost-management-billing/costs/enable-tag-inheritance](https://learn.microsoft.com/en-us/azure/cost-management-billing/costs/enable-tag-inheritance))'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we know how to set our organization up for a solid tagging implementation.
    Once we have established a robust tagging framework and procedure, many other
    FinOps-related services can leverage it and provide good visibility. This includes
    cost anomaly detections, budgets and cost alerts, rightsizing recommendations,
    and planning for a committed spend discount plan.
  prefs: []
  type: TYPE_NORMAL
- en: We have stepped through tagging anti-patterns and how to remediate them and
    turn them into best practices utilizing cloud native services. We have not discussed
    third-party tools, so we will now explore whether there is a space for them.
  prefs: []
  type: TYPE_NORMAL
- en: Not leveraging CSP FinOps services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The major CSPs offer various FinOps services, including cost analysis tools,
    cost reports, budget management, rightsizing recommendations, savings plans, cost
    trend analysis, forecasting, and alerting. The offerings are mature but not always
    used. That is especially the case if cost savings do not become a high priority
    because other challenges like security, resilience, and compliance must be tackled
    first. Before we explore the anti-pattern, we want to make it clear that commercial
    third-party cost management tools can have their place.
  prefs: []
  type: TYPE_NORMAL
- en: Two main drivers can trigger us to consider third-party tools for cost management
    and FinOps practices. The first one is if we have a multi-cloud or poly-cloud
    strategy. In that case, we might want a unified view across multiple clouds. This
    will depend on our operating model. If we are prepared to use different FinOps
    services per cloud (for example, GCP and Azure), then we don’t need to go down
    that track. This will add cost management complexity if a team is using several
    cloud platforms. This could be a centralized cloud platform team that is responsible
    for creating cost dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: The second driver is whether we want to include more than our CSP platform in
    our FinOps approach – for example, to include CI/CD tooling or SaaS monitoring
    solutions. In that case, we must define our requirements and assess the benefit
    of third-party tools. Some CI/CD tools have native cost control features, such
    as GitHub with a Plans and Usage feature. If we are OK with looking into several
    dashboards, we probably do not need to invest in another FinOps third-party tool.
    We need to consider the cost trade-off. How much additional time do we spend on
    our processes compared to license fees for a commercial offering? Now, it is time
    to explore how we can find ourselves in the anti-pattern of not leveraging cloud
    native FinOps services.
  prefs: []
  type: TYPE_NORMAL
- en: Common anti-patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The power and scope of FinOps services that are provided by our CSP are often
    overlooked, and we will explore two related anti-patterns next.
  prefs: []
  type: TYPE_NORMAL
- en: Billing will sort itself out
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Not using any cost control services is common at the beginning of cloud adoption
    or when an organization tries to grow its cloud presence organically without implementing
    a chargeback model.
  prefs: []
  type: TYPE_NORMAL
- en: My very first cloud experience on a production scale was at a government organization.
    My manager knew that I had AWS experience. He gave me his credit card so I could
    create an AWS account for a project team. That happened again several times. A
    few months later, in December, we had the end-of-year celebration, which was paid
    for with the same credit card. Consequently, the credit limit was reached and
    the monthly AWS payment bounced in January.
  prefs: []
  type: TYPE_NORMAL
- en: In February, AWS tried to charge for February and January, which resulted in
    another bounced payment, and the same happened in March. By that time, we had
    already received several automated warning emails that AWS accounts would be closed
    if we were not paying.
  prefs: []
  type: TYPE_NORMAL
- en: If we had given cost management a higher priority, we could have had alerts
    and reacted proactively. Instead, we were reacting to emails we got from AWS and
    involved procurement. They were not prepared to react swiftly since the government
    organization had strict processes in place. Eventually, the payment method was
    moved from credit card payments to an ongoing purchase order. However, cost controls
    were only implemented a year later using the cloud native capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'After a couple of months, a project manager asked me to change the billing
    currency from **US dollars** (**USD**) to Australian dollars, which I did. Unfortunately,
    the procurement department was not prepared to pay the next invoice since the
    currency did not match the currency in the purchase order. This is another hiccup
    we can avoid if we are familiar with our internal cost management practices. Collaboration
    between departments helps to cross those organizational boundaries. An approach
    we have seen working well is having a cross-functional team that has regular cadence
    meetings with extended team delegates. Those delegates include procurement, finance,
    and recruitment. This helps to catch any surprises early and address them swiftly.
    This story should make one thing very clear: *tooling is only a part of a successful
    FinOps adoption*. It is critical to have clear processes and responsibilities
    defined as part of our operating model. Now is the time to investigate another
    variation of this anti-pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: Rushing into a third-party product
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We already explored the reasons why a commercial third-party offering might
    make sense. We will now examine a scenario where one is not required. Both scenarios
    have one thing in common: a low cloud adoption maturity level. In this variation,
    we want to achieve quick wins.'
  prefs: []
  type: TYPE_NORMAL
- en: That could be the case because value realization has never become a high priority
    due to other burning issues, like security, compliance, and reliability (especially
    after outages). Another driver could be that we are changing our financial approach
    from a cost center to a profit center approach. Because we need to rush, we are
    not considering the long-term cost impact enough.
  prefs: []
  type: TYPE_NORMAL
- en: In a previous company, I was in a situation where we had already implemented
    the foundational cost management capabilities in a development organization, including
    cost breakdown, forecast, budget alerts, anomaly detection, and committed savings
    plan. Unfortunately, the cloud platform team was totally swamped with helping
    other teams and did not have enough time to fine-tune to rigorously test those
    features to release them into the production organization for all business units.
  prefs: []
  type: TYPE_NORMAL
- en: In the meantime, a new financial year commenced, and the company changed from
    a cost center to a profit center approach. That meant the costs needed to be distributed
    accurately. However, there were gaps in the tagging implementation for legacy
    applications. Therefore, a team manager had to spend more than a day per month
    getting the cloud bill splitting right. The **leadership team** (**LT**) became
    aware of that but they only knew half the story. They underestimated the business
    benefit of the existing cost management service catalog items that were already
    deployed in the production organization.
  prefs: []
  type: TYPE_NORMAL
- en: One of the LT members attended a conference and saw a presentation of a FinOps
    tool with a nice user interface. He was curious and asked some questions after
    the presentation. That was enough for the sales team to flag the company as a
    hot opportunity. The vendor followed up with a lunch invite. Judging by how much
    the product appreciation increased, it must have been a very good lunch. As a
    next step, there was a very strong desire to implement a proof of value. Because
    the company was operating in a very regulated environment, this resulted in a
    comprehensive vendor selection process.
  prefs: []
  type: TYPE_NORMAL
- en: This pattern results in locking ourselves into an ongoing expense. Third-party
    FinOps license fees are typically based on our cloud spending. The higher the
    cloud spending, the more we pay for our commercial tool.
  prefs: []
  type: TYPE_NORMAL
- en: Impacts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By going through the anti-pattern, we have already seen some of its consequences,
    and we want to briefly summarize them now:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lack of value optimization**: If we are not using a FinOps tool, we cannot
    optimize the value of our cloud native stack. We will not be able to optimize
    our resources and make the right financial trade-off decisions, for instance,
    about whether to opt for a savings plan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lack of cost visibility**: We will not be able to provide an efficient and
    correct charge-back approach. Therefore, we cannot direct ownership toward the
    business stakeholder, which means there is no motivation to optimize the value
    realization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Increased vendor management effort**: If we use a third-party product, we
    will have an additional vendor that needs to be managed. We have talked about
    partnerships before. Is this a strategic partnership?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Increased ongoing cost**: If we use third-party tools, we will be charged
    a license fee, which is typically based on our cloud spending. The more we spend,
    the more we pay for the license. The provider has no incentive to reduce our cloud
    costs because that would also reduce their revenue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manual overhead and delays in financial reporting**: We will have an increased
    manual effort to manage our financial reporting, which will also take longer.
    Hence, it will be difficult to understand real-time expenses or adjust budgets
    and forecasts accordingly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if we have the right tooling in place, we still need to establish mature
    processes and responsibilities that align with our operating model. Otherwise,
    we will not unlock the potential of our tooling. We will explore the process and
    cloud native services next.
  prefs: []
  type: TYPE_NORMAL
- en: Cost management seen through the SDLC lens
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are now stepping through FinOps capabilities, and we will align them with
    a simplified overview of a **software development life cycle** (**SDLC**). The
    following table provides an overview of the SDLC phases and a logical name of
    the FinOps service for this phase. We will go through each of the phases and discuss
    what we need to consider for establishing a good business value for our application
    stack.
  prefs: []
  type: TYPE_NORMAL
- en: We have already looked into tagging, which needs to be established during the
    *implement and test* phase, which makes up the majority of this phase. Therefore,
    we will merge this phase with the *deploy* phase when we go through the SDLC.
    We can see that the *maintain and improve* phase has the longest list of considerations.
    We need to take those insights on board to plan and design for improvements in
    our iterative delivery.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Plan &** **design** | **Implement &** **test** | **Deploy** | **Maintain
    &** **improve** |'
  prefs: []
  type: TYPE_TB
- en: '| Design principles | Tag policies | Preventive guardrails | Detective guardrails
    |'
  prefs: []
  type: TYPE_TB
- en: '| Cost calculator | Tagging | Organization setup | Cost explorer |'
  prefs: []
  type: TYPE_TB
- en: '| Budget and alerts | Tagging enforcement | Automated cost estimate | Advisory
    tools |'
  prefs: []
  type: TYPE_TB
- en: '| Architecting for cost efficiencies | Data life cycles |  | Cost anomaly detection
    |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |  | Rightsizing recommendations |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |  | Committed spend |'
  prefs: []
  type: TYPE_TB
- en: Table 4.1 – SDLC phases and supporting FinOps services
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now look into FinOps services that support the first phase: *plan*
    *and design*.'
  prefs: []
  type: TYPE_NORMAL
- en: Plan and design
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'FinOps considerations and tooling for the *plan and design* phase are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Design principles**: Internal guiding principles and SLAs, such as RTO and
    RPO, will drive our cost model. The individual Well-Architected Frameworks from
    the CSPs will also provide guidance. If a solution needs to be resilient, it will
    have a fail-over database, which adds to the cost. Once familiar with our requirements,
    we can start designing a solution with a drawing tool. There are many options
    available. Diagrams.net is a free drawing solution, and Lucid Chart is a popular
    commercial offering with enterprise collaboration features. The diagram will help
    us fully visualize the services we want to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost calculator**: We can then use our CSP’s pricing calculator. AWS Pricing
    Calculator, Azure Pricing Calculator, and Google Cloud Pricing Calculator provide
    a user-friendly user interface and support most of their cloud services. They
    all support committed spending savings plans, provide a shareable URL for the
    calculation, and reports can be exported. With all cost calculators, we need to
    be careful to select the correct region, since prices differ. We will also need
    volume estimates. For API services, we typically need to estimate how many API
    calls we have; for data services, we need to know the data volume and growth and
    whether we need a fail-over database or an additional read-only database. For
    any egress data, for example, from one cloud to another, we also need to know
    the volume numbers. If we implement a new solution, then some of these numbers
    will be covered in the business case and design. For other metrics, we do have
    to make rough estimates, and we can fine-tune them either during the *design*
    phase or build feedback loops once the solution is deployed and used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Budgets and alerts**: All major CSPs have budget and alert services. There
    are different ways in which budgets can be defined – either in a static manner,
    where we define a monthly budget, or a monthly percentage increase. There are
    also ways to create dynamic budgets. The ML-empowered service can learn from previous
    spending and estimate cost trends for the next months. This is a good method to
    reduce human effort and still be in a position to leverage cost guardrails. The
    following AWS screenshot shows a budget definition for 12 months. The **Auto-fill
    budget amounts** feature prepopulates the last 11 months based on the initial
    budget figure and the monthly percentage increase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B22364_04_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.2 – AWS example – budget definition (source: AWS console)'
  prefs: []
  type: TYPE_NORMAL
- en: The budget can then be used to configure triggered alerts if we are either hitting
    a certain threshold or if the trend indicates that we will be above the expected
    amount at the end of a defined period. These alerts help uncover unexpected costs
    before we receive the next bill.
  prefs: []
  type: TYPE_NORMAL
- en: '**Architecting for cost efficiency**: When we use cost management and forecast
    tools, we can establish cost transparency. This enables us to include financial
    aspects in our architecture decisions. For example, we might shift toward a serverless
    architecture and move to smaller instances for our containers because horizontal
    scaling has more cost savings potential. Being able to make informed decisions
    will also help us plan for the right guardrails that we can utilize during later
    stages in the SDLC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement, test, and deploy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are measurements we can take that help us during the *deploy* phase.
    The first one is part of the *implement and test* phase, and the others are part
    of the deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data life cycles**: We can establish data life cycles in our application
    code. Examples are different storage tiers that the data will reside in during
    its lifetime. For operational data, we can define that the data needs to be in
    the hot storage tier for 3 months, then it gets moved to an infrequent access
    tier, and then it goes to an archive for another 6 months. For regulated workloads,
    such as PCI-relevant applications, we can make sure that the data is only deleted
    after 7 months. By establishing predefined life cycles, we can reduce the cost
    and also establish standardization across the organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Preventive guardrails**: The first deployment-related measurement in this
    group is preventive or proactive guardrails. We can limit the size of instances
    we allow in development environments. Guardrails will ensure that instances above
    a certain size cannot be deployed. It is important to communicate those restrictions
    so that they are understood and do not cause frustrations amongst the development
    teams.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another use case for cost-related deployment guardrails is denying the creation
    of high-cost services in workload accounts because they are already established
    in shared accounts and can be consumed from there. Preventive guardrails can be
    established via AWS Service Control Policies, Azure Policy, GCP Organization Policy
    Service, or **Open Policy Agent** (**OPA**) policies. We also need to review access
    controls to ensure that only authorized individuals are able to deploy to production.
    This will help accidental or unauthorized spending. We also looked into the benefits
    of guardrails and non-cost-related guardrails in [*Chapter 3*](B22364_03.xhtml#_idTextAnchor085).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Organization setup**: Setting up an organizational structure for your cloud
    environments can also help with cost control and breakdown. This feature is offered
    in different ways depending on the CSP. In AWS, it is called AWS Organizations,
    Microsoft calls it Azure Management Groups, and within GCP, it is called Google
    Cloud Resource Manager.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can apply preventive guardrails at an **organizational unit** (**OU**) level.
    In that case, none of the accounts under our “development” OU can deploy super
    large instances. We can also use the OU structure for a cost breakdown, for instance,
    if we have all shared services, such as application logging or a data lake, under
    a shared services OU.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Automated cost estimate**: Some deployment tools provide cost estimates for
    the stack that will be deployed. HCP Terraform provides this feature, and there
    are also some open source tools that we can embed in our CI/CD pipelines. The
    developer can review the estimated cost before proceeding with the deployment.
    This helps to catch little errors such as picking the wrong instance type, but
    those errors can have a big cost impact.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintain and improve
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will now explore the measures we need to take during the *maintain and improve*
    phase. Most importantly, we need to establish the right processes, ownership,
    and accountability to utilize the tooling. There is no point in having nice dashboards
    and automated recommendations if no one is looking at them, or not taking any
    action. With the insights and learnings we gain during this phase, we can establish
    a feedback loop that will help us improve our FinOps practices going forward:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Detective guardrails**: Detective guardrails allow the deployment, but a
    non-compliant rule will be flagged on a dashboard and can trigger a notification.
    We could do this for very large instances in our development OU. That way, we
    are not blocking the team from deployment but can still provide visibility of
    this finding. It is also a common practice to test guardrails first in detective
    mode before turning them into preventive guardrails.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost explorer and usage reports**: AWS Cost Explorer, Azure Cost Management,
    and GCP Cost Management have many features in common that will help us gain cost
    insight. All three offerings provide a cost breakdown by service, cloud resource,
    project, account, or resource group. Customizable cost reports and dashboards
    help visualize spending patterns and identify cost drivers. The following screenshot
    from the AWS console shows a cost and usage report. We can see a breakdown based
    on services, and we can modify the timeframe granularity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B22364_04_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.3 – AWS example – cost and usage report (source: AWS console)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Advisory tools**: These tools provide insight into where we can reduce our
    spending. AWS Trusted Advisor gives insights into various improvement areas, for
    example, underutilized instances. Azure Advisor takes a similar approach and also
    provides cost recommendations, for instance, purchasing Azure Reservations. GCP
    has a similar offering with the Google Cloud Recommender, and cost-related recommendations
    include deleting unused disks. Those insights will help to get an initial overview
    of where we have areas for improvement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rightsizing recommendations**: Rightsizing recommendations help us to adjust
    the sizing of our workloads. This will help to reduce the costs and use the funds
    gained otherwise. AWS has rightsizing recommendations and the Compute Optimizer
    service to help with that. This feature is partly included in GCP Cloud Recommender
    and Azure Advisor, which we already discussed. GCP and Azure also have Rightsizing
    Recommendations as part of the Azure Cost Management and Billing Services and
    Google Cloud Active Assist. It is critical to test the rightsizing first in the
    lower environments before rushing into a production change to avoid sizing issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost anomaly detection**: These services help us identify unusual traffic
    spikes and unusual spending patterns. We can trigger alerts to get notified immediately
    and investigate. The reason for an unusual pattern could be an error in a deployment.
    The AWS offering is called AWS Cost Anomaly Detection, Azure and GCP have this
    feature as part of the Azure Cost Management and Billing and Google Cloud Cost
    Management service, respectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Committed spend**: Committed spending plans are another way to reduce our
    cloud bill. Committed spending can be applied to various resource types, such
    as instances (virtual machines), containers, or FaaS. Plans can have a one-, two-,
    or three-year time span. It is recommended to go with a one-year plan since computing
    technology always evolves. In a year, we can then get a plan for a newer instance
    generation that is more powerful and can handle more load. There are several strategies
    we might want to apply to our savings plan:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First of all, if we have a decentralized governance model, then the business
    units or product portfolios will be responsible for setting up their plans. They
    are the ones who know their applications the best, but also the business target
    and expected growth.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The second strategic aspect is that we might want to have more than one savings
    plan. That way, we can stagger them and adjust them more frequently. One savings
    plan could start in January and the other one in July. This gives us the flexibility
    to update twice every year.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The following GCP screenshot shows the **committed use discounts** (**CUDs**).
    It shows us the potential cost savings when we opt for a general-purpose memory
    instance and a Cloud SQL Database VM.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B22364_04_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.4 – GCP example – Committed use discounts (source: https://cloud.google.com/static/billing/docs/images/cud-dashboard.png?dcb_=0.5258774275081315)'
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see, there is a lot to digest if we want to leverage all the tooling
    our CSPs give us. Before moving on to the next section, we want to reiterate a
    couple of callouts:'
  prefs: []
  type: TYPE_NORMAL
- en: We always test sizing-related changes in lower environments before a production
    change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools are great, but we need ownership and accountability to ensure actions
    are being taken
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need to understand what our applications are doing to make informed trade-off
    decisions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we move on to cloud cost, which is not obvious and might be overlooked
    when we define our cloud strategy or design.
  prefs: []
  type: TYPE_NORMAL
- en: Ignoring non-obvious CSP cost
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: “*The real cost of a four-dollar-a-day coffee habit over 20 years is $51,833.79\.
    That’s the power of the Compound Effect*,” says Darren Hardy, author of *The*
    *Compound Effect*.
  prefs: []
  type: TYPE_NORMAL
- en: Those four dollars might not include a service tax and then the compound effect
    is even higher. Where are we going with this? Cost models in the cloud are far
    more complex than a cup of coffee. There is a fair chance that we have had coffee
    cost surprises in the past, but there is a nearly 100% chance that we have had
    some sort of cost eye-openers in the cloud, either because we left an instance
    running after a demo or because there were some cost aspects we didn’t consider.
  prefs: []
  type: TYPE_NORMAL
- en: Different abstraction levels, such as IaaS, PaaS, or fully managed services,
    have different price components. So do database and storage solutions, API offerings,
    or logging and monitoring solutions. The more cloud resource types we use, the
    more complex the cost landscape becomes. That is even more so the case when we
    have a hybrid cloud landscape, especially if we use several CSPs for a poly-cloud
    or multi-cloud strategy. These complex scenarios increase the likeliness of unexpected
    costs, especially if we do not create cost estimates during the design and do
    not validate the real cost against the planned cost. The problem is that the longer
    we wait to uncover unexpected costs, the more we will evolve our architecture,
    but potentially toward a direction we might regret when we see the cost impacts.
    The longer we wait, the harder it will be to remediate. Therefore, we want to
    uncover some common mistakes that lead to this anti-pattern. Let’s start with
    the first one.
  prefs: []
  type: TYPE_NORMAL
- en: Common anti-patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some of the ongoing CSP costs are not obvious and so can unnecessarily increase
    our bill if we do not address that in our architecture. We will talk about two
    common anti-patterns next.
  prefs: []
  type: TYPE_NORMAL
- en: Ignoring data transfer cost
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ingesting data into our cloud typically does not result in data transfer fees
    because CSPs want to attract customers to bring more applications into their cloud.
    However, this is different for other transfer cost types, and some have the potential
    to be underestimated or even overlooked. We will go through common categories
    that can cause surprises. The prices themselves keep changing, so we will look
    into areas that need to be considered rather than particular prices:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Egress transfer fees**: These are fees that occur when we export data from
    our CSP to either the internet, another cloud platform, or our data center. In
    a previous engagement, a cloud consultancy was helping with a large-scale data
    lake solution. The solution required ongoing data exports to a data analytics
    platform that had not been migrated to the cloud yet and was still running on-premises.
    The consultancy provided a cost forecast. The CSP called out that they could not
    see the egress data transfer cost in the cost estimate. Somehow, that fact got
    missed. Design decisions were based on the fact that egress data fees were not
    factored into the ongoing cost. It turned out that the egress fees would have
    been several hundred thousand USD per year. This resulted in a big dispute. The
    consultancy had to rectify things at their own expense and risk, and they had
    to compensate parts of the already occurred egress data fees.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This scenario also highlights that a multi-cloud DR (disaster recovery) strategy
    is a very expensive exercise. When we want to recover in a different cloud platform,
    we need to make sure that the data is continuously replicated. This gets often
    forgotten when risk and business continuity teams want to minimize the risk of
    a CSP going into receivership. A possible outcome is a multi-cloud cost disaster,
    which is hard to recover from. It is also worthwhile noting that different regions
    have different prices. For example, exporting data from the US region to the public
    internet might be cheaper compared to exporting data from an Asian or South American
    region to the internet.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Transfer fees between regions and cross-region architecture impacts**: Data
    transfer between regions involves transfer fees. Similar to the preceding example,
    the price depends on the origin and destination regions. Cross-region replications
    are common when we have ambitious DR goals. A complete region outage can happen,
    but it is very unlikely. A cross-region DR strategy can protect us from that risk.
    Data transfer fees within the same continent are usually lower compared to cross-continent
    data replications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data transfer fees within the same region (across AZs)**: Several cloud native
    services also charge data transfer fees within a region. These fees are lower
    compared to cross-region and egress transfer fees. AWS charges an intra-region
    data transfer fee if several EC2 instances (virtual machines) are deployed across
    several AZs and need to transfer data between each other. This was at least the
    case when this book was written, and it could change at any time. Azure has dropped
    the intra-region transfer fee for virtual machines and GCP does generally not
    charge this fee. We have already pointed out that these things can change quickly.
    Therefore, it is important to use our CSP’s cost calculator and try several combinations
    of data transfer volumes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not considering long-term storage costs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When we rush deadlines or do not have predefined service catalog items we can
    use, it is just too easy to forget about the cost aspects of a solution. We focus
    on technical details to solve the immediate problem that is required for a launch
    or a proof of value outcome. We will now look into common pitfalls that will drive
    up the CSP bill:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data life cycle**: A common error is forgetting to configure a data life
    cycle for blob storage or shared drives. In that scenario, the accumulated data
    increases continuously. Because blob storage is fairly cheap, it can take a while
    until we realize the continuously increasing cost. The price for data hosted in
    databases, fully managed logging services, or disk volumes is higher, and the
    bill shock might be more obvious. The following diagram illustrates the possible
    transitions for AWS S3, which is a blob storage service. We can see how the *Standard*
    tier can transition into cheaper tiers. The cheapest one is called *S3 Glacier
    Deep Archive* and requires data retrieval time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B22364_04_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.5 – AWS example – data life cycle transitions for blob storage (source:
    [https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-transition-general-considerations.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-transition-general-considerations.html))'
  prefs: []
  type: TYPE_NORMAL
- en: '**Disk back-ups and unattached volumes**: During a previous project, we were
    tasked with establishing a self-healing mechanism for a **data warehouse** (**DWH**)
    solution. Parts of the DWH landscape were hosted on virtual instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That itself is already an anti-pattern, but it was an old third-party product
    that had never been architected for the cloud by the vendor. We were addressing
    the self-healing scenario of addressing instance failures and also disk volume
    failures. For that purpose, we automated a combination of hourly snapshots (i.e.,
    incremental backups) and full backups for all three volumes for an instance in
    a test environment. All of a sudden, priorities changed, and we had to help out
    for a couple of days in a different problem space. Because we were trying to achieve
    quick DR results, we did not implement a backup data life cycle during our testing.
    By the time we got back to focus on the auto-healing solution, there were already
    hundreds of backups that had been taken.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The next CSP bill was significantly higher. The first reaction of the product
    owner was that virtual high-volume disks were much too expensive. They are pricier
    than slower ones. But the real problem was that there was no data life cycle in
    place. This gap can bite very quickly, and in that case, it did.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Standby databases or read replica databases**: These are two different use
    cases. Standby **databases** (**DBs**), also called secondary DBs, help improve
    availability. If the primary database fails, the standby DB can take over the
    data load after an automated DNS fail-over from the primary DB to the secondary
    DB. If the data volume of the primary database increases, the secondary or read
    replica database size will increase, too. This means we pay more for storage for
    several databases, which we need to factor into our costs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logging**: It is rare to see a clear logging strategy that has been rigorously
    implemented. Sometimes, we see production environments that even log the “info”
    log level. This produces a lot of log volume, and we need to pay the price for
    it. If this anti-pattern is paired with a missing data life cycle, then it becomes
    even worse. We need to have a clear understanding of what needs to be logged,
    where the log files need to be shipped to, and how long we need the log files
    in hot versus infrequent or cold storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have covered data-related cost issues, we will look into a couple
    of other cost factors.
  prefs: []
  type: TYPE_NORMAL
- en: Other non-obvious cost factors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data transfer cost and long-term storage cost are very common gotchas, but there
    are also others, and we will analyze them now.
  prefs: []
  type: TYPE_NORMAL
- en: Idle or overprovisioned resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Idle resources can occur when we create a proof of concept and forget to clean
    up afterward. They can also be the consequence of a manual scale-up event, for
    example, for a product launch, a stress test, or a sales event like that on Black
    Friday. Then, the team forgets to scale down once the event has passed, and the
    next monthly bill will be a harsh reminder to scale back again. The main CSPs
    offer rightsizing recommendations. These are visible in the console, as we can
    see in the next GCP screenshot. They also provide API support, and we can implement
    automated alerts if a rightsizing recommendation is detected. We could also automate
    the actual rightsizing, but this would require upfront testing prior to a workload
    adjustment in production.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B22364_04_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.6 – GCP example – rightsizing recommendation (source: [https://cloud.google.com/compute/docs/instances/apply-machine-type-recommendations-for-instances](https://cloud.google.com/compute/docs/instances/apply-machine-type-recommendations-for-instances))'
  prefs: []
  type: TYPE_NORMAL
- en: Compliance tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Compliance is required for regulated industries, and it is not trivial. Any
    services that support compliance automation come with a price. If not all our
    workloads are regulated, then it makes sense to differentiate where and when to
    use compliance tools.
  prefs: []
  type: TYPE_NORMAL
- en: If we use compliance tools from a vendor and also from our CSP, we need to make
    sure that we are not doubling up too much. Often, we cannot avoid some degree
    of overlap, because we must avoid gaps.
  prefs: []
  type: TYPE_NORMAL
- en: Machine learning services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Machine learning** (**ML**) services require a lot of CPU power to train
    models. Rightsizing and continuous utilization verification are important here.
    For example, we need to find the right balance between the amount of training
    data we require versus the benefit of a higher accuracy level in our learning
    model. Otherwise, a cost surprise is nearly guaranteed.'
  prefs: []
  type: TYPE_NORMAL
- en: Public IPv4 addresses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IPv4 addresses are limited, so the main CSPs started charging for public IPv4
    addresses assigned to virtual machines. The charge is minimal, but we need to
    consider it for large-scale deployments.
  prefs: []
  type: TYPE_NORMAL
- en: After stepping through the most commonly overlooked cost aspects, we will now
    explore what the consequences are.
  prefs: []
  type: TYPE_NORMAL
- en: Impacts of missing non-obvious cost
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have a good understanding of the cost factors we need to consider,
    we will explore the consequences of not addressing them. Here is a spoiler alert:
    The impacts go beyond an increased CSP bill.'
  prefs: []
  type: TYPE_NORMAL
- en: The cross-region inconsistency price tag
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An aspect that is often overlooked is that there is not necessarily a feature
    parity between regions. A service might not exist in the secondary region, or
    the service does exist but only has a subset of features.
  prefs: []
  type: TYPE_NORMAL
- en: I encountered that during a previous consultant engagement when the serverless
    DB offering existed in both regions, but one region was lacking several features,
    including an out-of-the-box point-in-time recovery. Therefore, the second region
    required a different design, different IaC, and different DR testing scenarios.
    This additional design, build, and operational effort is not visible on the cloud
    bill. However, our teams will need to dedicate more time and pay great attention
    to detail, and the operations risk increases.
  prefs: []
  type: TYPE_NORMAL
- en: Architectural multi-region DR strategy impacts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we have not considered multi-region data transfer fees, we will realize that
    the cost of our multi-region DR strategy significantly exceeds the budget. This
    will depend on the risk/cost trade-off decision we need to make. If we decide
    to rectify the solution and move to a single-region DR solution, then we need
    to adjust our architecture and implementation and migrate the existing backups
    to the primary region.
  prefs: []
  type: TYPE_NORMAL
- en: Architectural multi-cloud strategy impacts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we have a multi-cloud strategy where we need to continuously transfer data
    between CSPs, the data transfer fees will be shocking. If we haven’t considered
    this in our CSP selection process, then we have made an architecture decision
    that is difficult to revert, especially if we have progressed in our cloud adoption
    for a significant amount of time.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we need to make a trade-off decision between long-term cost savings,
    reducing operational complexity, and increased migration and testing efforts.
    Another critical point to consider is the architectural benefits we could gain.
  prefs: []
  type: TYPE_NORMAL
- en: A common consequence of multi-cloud adoptions is that only the common denominator
    is used across clouds to make sure we have a consistent approach. For example,
    everything needs to be on a virtual machine or a container. Therefore, we cannot
    utilize the full cloud native potential, such as managed API gateways or DBs.
    This increases the operational complexity. By unwinding a multi-cloud strategy,
    we can leverage those benefits.
  prefs: []
  type: TYPE_NORMAL
- en: Increased cloud runtime cost
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the most obvious impact. The cost will be higher than we budgeted for.
    If we don’t adjust our architecture, this will have a long-term impact that will
    only get worse when we move more applications to the cloud or when the applications
    become more popular and create more traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Other impacts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we have many idle resources, such as disk volumes that are not attached to
    a virtual machine, it will be difficult to identify the right resources during
    an incident. The idle resources will still be relevant for an external audit and
    will trigger additional administrative effort. If we have idle virtual machines
    running, this will also unnecessarily increase the carbon footprint impacting
    potential sustainability goals.
  prefs: []
  type: TYPE_NORMAL
- en: Those are the key impacts, and we definitely want to avoid them if the business
    benefits do not match or exceed the additional cost. Some signs should trigger
    us to investigate further, and we will look into them next.
  prefs: []
  type: TYPE_NORMAL
- en: Indicators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several indicators for this anti-pattern. We will go through them
    now and start with the most obvious one:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bill shock**: We received our CSP bill, and we can see that the cost trend
    is steeper than expected or that there is a big spike that does not match the
    cost trend of the previous months.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lack of insight**: Earlier in this chapter, we discussed FinOps tooling.
    If we are missing out on mechanisms like budgets, alerts, and rightsizing recommendations,
    then there is probably some hidden cost that we are not aware of. Enabling those
    features will help us gain clarity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lack of ownership and accountability**: If product teams are not motivated
    to optimize value generation, they will not be motivated to identify unexpected
    costs and consider them in architecture decisions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No committed spending plan or spot instances**: If we do not have a committed
    spending plan such as the AWS Savings Plan, Azure Reservations, or GCP committed
    use contracts, we pay the full price for compute power, fpr example, instances,
    containers, and FaaS. If we have workloads that can have outages, such as batch
    job operations, or instances in a lower environment, then we need to consider
    leveraging AWS spot instances, Azure Spot Virtual Machines, or GCP Preemptible
    VMs. Both those measures should be combined and if neither of them exists, we
    are overspending, even though it is not visible in our cloud bill.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lack of strategy assessment**: If we have a multi-cloud or multi-region strategy
    and the business value never got reassessed, then there is a chance that we lack
    current insights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Untracked trial services**: CSPs and SaaS providers offer free trials. If
    we do not track the time or free-tier usage, we will have to pay extra after the
    limits are reached.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No deployment cost forecast**: Some deployment tools provide a cost forecast
    before the deployment is performed. Those estimates might not be 100% accurate
    because the data transfers and volumes will vary, but they give valuable insight
    if we get something fundamentally wrong. If we accidentally deploy a too-large
    instance, we can see the unexpected additional cost.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remediations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s have a look now at how we can get to a target state that gets us into
    good shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Upfront cost calculations**: When we need to architect a new solution, we
    create a solution diagram that shows all the components that trigger cost. This
    overview will show what cloud services we need to consider. We will need non-functional
    requirements such as volume metrics, number of requests, data growth, RTOs, and
    RPOs to come up with solid estimates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A data flow diagram can also help to identify the data transfer fees. The same
    applies when we want to enhance existing architecture. If the current state is
    already deployed and launched, then we can work out the actual cost from the CSP
    bill. We can then compare it with the target state to identify how our costs will
    change.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Establish FinOps tooling**: We discussed this in the previous section, *Not
    leveraging CSP FinOps services*, so we will keep it short here. FinOps tooling
    helps us establish good cost insight and uncover non-obvious costs. Now that we
    understand data transfer, storage, and other cost gotchas, we know what to look
    out for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Well-architected reviews**: Once a solution’s design has matured, we can
    perform a well-architected review. The well-architected framework from our CSP
    will guide us to ask the right questions and validate our design. We could also
    involve a consultancy to get an independent opinion. We can do the same for workloads
    that are already deployed. In that case, we can also use previously discussed
    advisory tooling to help us validate the current state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service catalog**: A service catalog will help us achieve a good self-service
    experience with a repeatable outcome. This can also help us with our cost approach.
    Storage service catalog items can have a built-in data life cycle. The user only
    needs to select which standardized life cycle they need. That way, we can ensure
    that a life cycle is always in place.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lack of guardrails**: Preventive guardrails can prevent certain cost impacts,
    including the deployment of really large instances to a development environment.
    Another preventive guardrail could be that users can only deploy product catalog
    items or endorsed cloud services. Detective guardrails can notify us if a guardrail
    is not compliant.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encryption keys**: Customer-managed keys come with an additional cost for
    the actual key storage or versioning and also for each operation, including key
    creation, encryption, and decryption. Some regulatory frameworks require customer-managed
    keys, and some mandate even a dedicated key store solution. This means the physical
    storage is dedicated to one cloud customer. Dedicated services come with an additional
    price tag and that includes AWS CloudHSM (**HSM** stands for **hardware security
    module**), Azure Dedicated HSM, and Google Cloud HSM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Other architecture considerations**: If we use a **content distribution network**
    (**CDN**), we need to pay an additional fee. However, it will provide additional
    protection at the edge. Because data is cached at the edge, not every request
    needs to fetch data from our backend systems. Therefore, depending on our architecture,
    it can reduce the data transfer fees for our backend components, but the overall
    cost will still be higher compared to not using a CDN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After gaining a solid understanding of unexpected costs and how to spot and
    remediate them, we will explore how to focus on driving business value.
  prefs: []
  type: TYPE_NORMAL
- en: Focusing on cost savings over driving value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: “*It’s not whether you’re right or wrong that’s important, but how much money
    you make when you’re right and how much you lose when you’re wrong*,” is a quote
    by George Soros, one of the most successful global investors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Making strategic cloud decisions is different from trading. However, we must
    make the right decisions to optimize our cloud value. Instead of buying and selling,
    we need to put the right capabilities in place and move on from them when the
    time comes. This will help us increase our ROI. To prepare for that, we must evolve
    our architecture, ways of working, and cultural approach while ensuring our teams
    have access to training during this continuous transformation journey. These are
    the critical internal and external factors we need to consider when driving value
    for our cloud native stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changing business requirements and competitive advantage**: Requirements
    can change because our business evolves, the market we operate advances, or we
    try to branch out into new market segments. Either way, we want to release new
    features quickly. Therefore, we must innovate faster, experiment, and maximize
    the output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Technology advances**: We previously discussed Wardley Mapping. Cloud services,
    such as FaaS, have become commodities. To support business agility, we must avoid
    undifferentiated heavy lifting and refresh our technology stack. If we can use
    fully managed services like FaaS instead of containers or instances, then we do
    not manage patching, auto-scaling, and the security of the operating system and
    applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compliance and security requirements are changing**: We must protect our
    customer data, implement more controls, and ensure customer data can be deleted
    when requested. Therefore, we can rely on low-budget manual solutions because
    they do not scale. We need to drive automation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vendor and partner ecosystem**: Reducing software vendor or consultancy fees
    can result in higher long-term costs. We need to understand how well the third-party
    roadmap aligns with our organization for SaaS solutions. For consultancies, we
    need to understand how their strategic approach aligns with our vision. We discussed
    that in detail in [*Chapter 2*](B22364_02.xhtml#_idTextAnchor055).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Talent and skill availability**: When we determine what technology or framework
    we use, we must consider whether we already have the skills in-house or sufficient
    skilled resources in our job market. Saving five percent on licensing or operational
    cloud costs can be outweighed by not finding resources or paying a higher consultant
    rate or salary. The availability of skilled professionals who understand cloud
    native technologies can influence how effectively we can build and maintain our
    architecture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Training and collaboration**: We must ensure our teams are well trained in
    architecting and implementing the cloud native stack in the best possible way
    for our business. Saving money on training and collaboration will result in technical
    debt and a considerable price tag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing business value is a prominent driver. However, during the early stages
    of cloud adoption, businesses often focus too much on cost reduction. In this
    section, we will explore how a cost focus can hold us back in our cloud adoption.
    Let’s look into the common anti-patterns now.
  prefs: []
  type: TYPE_NORMAL
- en: Common anti-patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now explore two common anti-patterns and the consequences that come
    with them. We will start with the impacts of focusing solely on cost reduction
    instead of looking at the holistic picture.
  prefs: []
  type: TYPE_NORMAL
- en: Penny pinching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Going for a bargain can sometimes be tempting; everyone has done it before.
    The comparison is easy when we get the same product and quality for a reduced
    price. It becomes more complex when dealing with cloud native solutions and the
    long-term operational aspects we must consider.
  prefs: []
  type: TYPE_NORMAL
- en: A couple of years ago, I worked with an engineer who ran a cloud hosting business
    on the side. His target group was small businesses that needed managed applications.
    The engineer was managing parts of the top half of the shared responsibility model,
    which is security in the cloud. The customer offering included a standard three-tier
    web architecture with public and private subnets. The private subnets needed outbound
    connectivity to the internet for some reason. This was also a security anti-pattern,
    but we now focus on leveraging business value.
  prefs: []
  type: TYPE_NORMAL
- en: To establish the connectivity from the private subnet to the internet, a **NAT
    gateway** (**NAT-GW**) solution was required. The engineer compared the prices
    of the CSPs’ fully managed NAT-GW services and the cost of hand-crafting a NAT-GW
    solution from scratch. A fully managed service comes with additional costs that
    cover ongoing patching, high availability, security controls, out-of-the-box logging
    and monitoring integration, and much more. Nevertheless, he decided to go ahead
    with the hand-crafted solution. That meant he had to manage the ongoing image
    updates for the virtual machine, the ongoing patching process, the security controls,
    the logging and monitoring, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: That solution would also result in a lot of additional compliance effort for
    a regulated solution since they needed proof of things such as least privilege
    enforcement, log integrity, logging of elevated user access, and much more, even
    though this was only a small-scale hosting business with only 100 customers.
  prefs: []
  type: TYPE_NORMAL
- en: This approach does not scale if we want to grow our customer base and business
    value. The lesson learned might take a while until we realize the consequences
    of building up technical debt. This is also a common consequence of poorly planned
    cloud migrations where a *lift and shift* migration plan is prioritized over strategic
    value gain by refactoring an application to leverage all cloud native benefits.
  prefs: []
  type: TYPE_NORMAL
- en: Not investing in continuous improvement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a previous engagement, I worked for a customer that had to meet several regulatory
    requirements because they were a financial services organization. Collecting the
    required evidence manually for an external audit took 3.5 months in one year.
    This was a full-time effort for one cloud team member assigned to the audit. This
    time span covered the cloud stack. Other teams were involved in the on-premises
    workloads.
  prefs: []
  type: TYPE_NORMAL
- en: Screenshots, log file examples, and process descriptions were to be provided
    for all environments handling credit card information. The cloud team relied mainly
    on external resources from consultancies. Therefore, the internal staff was reduced
    to a bare minimum.
  prefs: []
  type: TYPE_NORMAL
- en: We already knew we had to improve our approach for the next year and shift toward
    automation. We evaluated several SaaS tools that could help improve the security
    and compliance posture and reduce the audit effort to the bare minimum. If our
    organization is in good shape, we can provide the external auditor with read-only
    access to the compliance automation tool. They can then validate that the required
    controls are in place. This means the overall effort on both sides is reduced,
    but we can also get ongoing assurance insights that help us continuously improve.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, the company decided not to invest in continuous improvement and
    allocated the budget to other initiatives. The following external audit was even
    more challenging. Instead of the previous version of the compliance framework,
    we had to adhere to a new version, which was more thorough. It increased the overall
    effort, and we had to hire a contractor for 3.5 months to meet the audit timeline
    and ensure the under-staffed cloud team was still functioning and could continue
    maturing the cloud platform.
  prefs: []
  type: TYPE_NORMAL
- en: The key takeaway is that the overall spending for an additional temporary resource
    to add a couple of band-aids could have been invested into a strategic improvement
    that would have resulted in a sustainable solution and reduced the long-term effort.
    Getting things wrong is not unusual, but we need to use what we have learned to
    improve. Making the same error twice in a row is painful to watch. In hindsight,
    it felt like watching a car crash in slow motion. Thankfully, no physical harm
    occurred, but the pain was not forgotten. Let’s move on and summarize and quantify
    the impacts of focusing on cost savings rather than driving value.
  prefs: []
  type: TYPE_NORMAL
- en: Impacts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Focusing on cost saving over driving value has some significant negative long-term
    impacts, and we will explore them now:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Missed business opportunities**: If we do not drive the improvement of our
    value chain, we will miss out on customer experience improvements that can differentiate
    us from the competition. If we do not continuously improve our cloud native stack,
    we will increase our tech debt, and the time to market for current features will
    decrease. This will be a disadvantage if we want to innovate, react to market
    changes, or comply with regulatory requirements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Increased operational complexity**: Without continuous improvement, we will
    miss out on fully leveraging the cloud potential. Managed services are being innovated
    and improved at a much quicker pace compared to what we could achieve ourselves.
    If we do not refresh our architecture, it will be out of date soon. These operational
    benefits of managed services include built-in observability and resilience. The
    avoidable increased operational complexity will burden our teams since the operational
    effort will be unnecessarily high.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Decreased productivity**: Penny-pinching can negatively impact a team’s morale.
    The result will be less engagement, motivation, and collaboration. Therefore,
    productivity will be lower than it could be when we aim for value creation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compromised security and compliance**: Solely focusing on cost reduction
    can lead to underinvestment in security tools, monitoring, and compliance services.
    This increases the risk of security breaches, data loss, and non-compliance with
    regulations, which can have significant impacts. Not enabling services such as
    network firewalls, intrusion detection systems, or vulnerability scanning will
    expose our applications to vulnerabilities and result in non-compliance with regulatory
    frameworks like PCI-DSS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reduced user experience**: Cost-cutting measures can negatively impact service
    reliability and availability, leading to dissatisfied customers and potential
    churn. Reducing redundancy or backup frequencies to save costs might result in
    service outages or data loss, impacting reliability and customer experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Loss of revenue and growth potential**: Minimizing cloud spending can impact
    our architecture and restrict our ability to scale quickly for demand peaks. This
    can limit our ability to leverage ad hoc market opportunities, such as trading
    spikes due to business news or temporary retail peaks like on Black Friday.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Focusing on cost optimization has significant impacts and can damage our business
    and reputation in the long term. But how can we realize we are on the wrong path
    and must react? We will look into this next.
  prefs: []
  type: TYPE_NORMAL
- en: Problem indicators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is not always easy to realize whether we are already en route for this anti-pattern,
    and therefore, we will explore some of the early signs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Service downgrades and performance issues**: Growing complaints about slow
    application performance, higher latency, or frequent service outages can indicate
    a focus on cost reduction. Performance degradation due to under-provisioned resources,
    such as a lack of auto-scaling or edge computing, indicates that cost is prioritized
    over business outcomes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reducing security controls**: Reducing investment in cloud security tools,
    services, or personnel or a noticeable decline in security monitoring and compliance
    activities are signs of cost reaction. These measures can increase the risk of
    data breaches and compliance failures, demonstrating a dangerous trade-off between
    cost savings and essential security controls.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lack of standardization**: Immature standardizations include a lack of coding
    standards, standardized CI/CD pipelines, container-based images, service catalog
    offerings, and others. The consequence is increased operational complexity and
    a slower time to market, which will decrease value creation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lack of chargeback and accountability**: Without a chargeback model, we do
    not have clear responsibilities. Therefore, the product teams will not drive the
    ROI. In that case, we will likely have a centralized cost-focused governance approach.
    An immature operating model also falls under this category.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What does good look like, and how do we get there?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to tackle the following problem spaces to achieve a valuable outcome.
    If we tackle these challenges in time and sufficiently, they become enabling areas:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ownership and accountability**: Clear demarcation of responsibilities is
    required. The cloud platform team might be responsible for establishing all network
    infrastructure and managing the service catalog. The product team will be responsible
    for the application, data, and ongoing optimizations. This includes right-sizing
    compute instances and deciding which backup and data life cycle plans must be
    used to meet all requirements and avoid underutilization. Establishing a chargeback
    model will help drive economic behavior. This brings us to the next point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Committed spend and spot virtual machines**: Ownership and accountability
    will also trigger cost-saving thinking within product teams because cloud costs
    saved can be spent on innovation. If the teams understand their responsibility,
    they will be interested in leveraging cost-commit plans to leverage discounts.
    It will also trigger spot instances for test environments or batch jobs that can
    afford interruptions. Spot virtual machines are cheaper to run compared to on-demand
    instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Taking a long-term delivery view**: Projects have a short-term view because
    they only plan for the project’s time span. Afterward, the project will be moved
    to BAU status, and an operations team will operate it. However, the solution might
    not necessarily improve over time. This results in insufficient legacy architectures
    that do not leverage the latest cloud native features. Moving to a product team
    approach brings operational responsibility closer to the product team. The product
    team will be very interested in reducing the operational complexity and continuously
    improving the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Technical debt register**: It will help us keep track of any tactical decisions
    we make. This could be an old Java runtime that we are using or a DB engine that
    is not our strategic choice. If we later create a new application container image
    with a newer runtime, we can remediate the technical debt because we will have
    clear visibility.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data insights**: Rather than just focusing on the total cloud cost, we get
    a better picture when we have data points and can build correlations. That way,
    we can find out how much the online sales number increases because we can release
    more frequently, as we invested more into our CI/CD pipeline maturity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Partner ecosystem**: Having a partner strategy in place is a good starting
    point, but we also need to make sure we build a good relationship. Partners such
    as CSPs, SaaS vendors, or consultancies are experts in the field, and they can
    provide valuable advice on what we can improve or where we can co-innovate to
    create new business opportunities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Investing in long-term gains**: A short-sighted view of expenses will result
    in missed strategic opportunities. If we assess the value of mature CI/CD pipelines
    that provide repeatable, secure, and reliable outcomes, we can reduce our time
    to market. Examples include automated performance, reliability, or regression
    tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Temporary environments and auto-destroy**: Establishing sandpits where developers
    can experiment with new cloud services or the CI/CD toolchain will contribute
    to education. Sandpits bring the risk of a cost surprise because, typically, not
    all resources get destroyed after they are no longer needed. We can implement
    an auto-destroy mechanism to make sure resources can be removed at certain time
    intervals, for example, every weekend. We can do this with cloud native CI/CD
    tooling, SaaS solutions, or open source solutions such as AWS Nuke. The implementation
    is an upfront investment, but it will eventually pay off. The same applies to
    temporary environments that can be shut down outside business hours.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We explored a lot in this chapter and will now summarize what we learned so
    that we can digest the information quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We started with tagging, our daily bread and butter, to achieve an accurate
    cost breakdown. We need clear tagging standards and enforcement to establish a
    functioning chargeback model. We explored cloud native FinOps services such as
    cost explorers, budgets, alerts, and cost anomaly detections. Those are valuable
    features for gaining early insight and cost alerts rather than passively waiting
    for the next cloud bill shock. We explored data transfer fees and how they can
    occur within our cloud platform and for hybrid or multi-cloud traffic. We then
    closed by exploring business value creation instead of taking a short-term cost
    minimization stance. Only a long-term perspective can help us maximize the business
    value we can achieve with our cloud native stack.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are ready to tackle the next challenge, which is security and compliance
    goals.
  prefs: []
  type: TYPE_NORMAL
