- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rethinking Governance in a Cloud Native Paradigm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the fast-paced world of cloud native architectures, traditional governance
    approaches often struggle to keep up with the demands of agility, scalability,
    and rapid innovation. As organizations embrace cloud native practices, they inadvertently
    fall into anti-patterns, which are inefficient or misguided behaviors that can
    slow progress, increase risk, and stifle innovation. These anti-patterns arise
    from a failure to adapt governance models to the fluid, decentralized nature of
    cloud environments. This chapter explores how organizations must evolve their
    governance strategies to avoid these pitfalls and build resilient, adaptable systems.
    This chapter will cover the following anti-patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning will happen miraculously
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The culture doesn’t need to change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Centralized governance will scale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our business is too special for guardrails or standards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Missing feedback loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning will happen miraculously
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the traditional IT world, governance focuses on a centralized structure of
    control. This changes with cloud native. Cloud native environments require agility,
    scalability, and decentralized decision-making. Effective cloud governance ensures
    compliance, security, and efficient operations, which accelerates innovation.
    Organizations can leverage automated policies, continuous monitoring, and the
    adoption of new services without compromising security, aligning cloud strategies
    with business objectives.
  prefs: []
  type: TYPE_NORMAL
- en: Organizations tend to see *governance* as an all-encompassing word for the technical
    and non-technical control mechanism for managing infrastructure and defining frameworks
    on which applications are run. While the all-encompassing aspect tends to lean
    toward the application of best practices (imagine, if you will, the use of playbooks/runbooks),
    what tend to be forgotten about are the non-technical aspects of governance, which,
    in turn, when mismanaged lead to anti-patterns and a breakdown of structure. One
    of the major factors of this is the pattern covered in this section, dubbed *learning
    will* *happen miraculously*.
  prefs: []
  type: TYPE_NORMAL
- en: The cost of ignoring learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Both upskilling and current stack knowledge in traditional organizations tend
    to be limited by the mindset of *learn in your own time* or *we do not have time
    to train you*. Here is where engineers turn to one of two choices. Either engineers
    will extend their tenure with a company for decades at a time working on one system,
    or they will look for other roles, thus leading to high talent turnover.
  prefs: []
  type: TYPE_NORMAL
- en: High talent turnover is a major challenge for engineering teams. Each new hire
    requires onboarding, during which senior engineers must dedicate time to training,
    impacting overall productivity. At a regular turnover rate of 2-3 years, this
    is expected, but once it turns into a 6-to-12-month turnover, it becomes a time
    sink and an overall loss. The 2021 Great Resignation is a good reference to this
    point. Each new engineer has an initial period where they are onboarded; without
    the necessary learning material, such as documentation, present, this then becomes
    a burden.
  prefs: []
  type: TYPE_NORMAL
- en: Time spent handholding, rather than having proper documentation present, leads
    many engineers to move on to greener pastures, as *death by documentation* is
    very commonly found among tech-debt-heavy organizations.
  prefs: []
  type: TYPE_NORMAL
- en: This is a position you should avoid ending up in as time and money are lost,
    as well as losing out on innovation. It has led many organizations’ infrastructure
    and software teams to fold.
  prefs: []
  type: TYPE_NORMAL
- en: Having worked on the product and consulting side of IT, with a stint at a managed
    services provider, we have come across instances of this. We can see why traditional
    organizations behave this way. For them, it’s **business as usual** (**BAU**)
    that matters most; looking through a short-term lens, this makes some sense. On
    a basic level, what an organization focuses on is ensuring that their product
    is creating value, whether that is monetary or otherwise. When faced with a task
    such as upskilling or creating documentation, it’s easy to just push engineers
    to “learn in their own time,” because, well, the eight hours of the workday should
    really be spent on the product, in their eyes. I do want to note here that learning
    outside of hours is critical to career growth; even just an hour a day will pay
    dividends in the future. However, it should not be the only source of education.
  prefs: []
  type: TYPE_NORMAL
- en: In the long term, it fails; engineering talent ends up being locked into the
    bounded context of what their product is, and nothing else. How can you innovate
    or create value outside of your typical knowledge set if you are put in a position
    where there is nothing to gain from it? For consulting organizations, this is
    great; this is where they step in and provide value and execute what otherwise
    could and should have been done by internal engineering talent. For cloud organizations,
    this is a balance that needs to be addressed. Without the freedom to learn during
    work hours, barriers are created so that when it comes to service/product improvement,
    outside help is traditionally required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take, for example, the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1: Consumer and producer](img/B22364_03_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 - Consumer and producer
  prefs: []
  type: TYPE_NORMAL
- en: Technically, the bound context of the producer-to-consumer setup is a functional
    model; however, it invites no room for improvement within a BAU or *learn while
    doing* way of working. The services in this model may be known, but not to the
    extent where suggestions can be made to improve the design.
  prefs: []
  type: TYPE_NORMAL
- en: Addressing the anti-pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When faced with a shared drive full of Word docs or countless Confluence pages,
    the concept of learning while working on the system, building or supporting seem
    like the better choice. But organizations tend to take this concept too far. Not
    long after an engineer starts to understand the product they are working on, their
    entire time ends up being focused on it, leaving no room for growing their skill
    sets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Providing resources and support for ongoing education and professional development
    is vital. Organizations aim to balance workloads to ensure employees have time
    to learn and apply new skills without excessive context switching. What we have
    seen in the decision-making process for learning/self-education at traditional
    organizations has been as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2: Traditional self-study decision tree](img/B22364_03_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 - Traditional self-study decision tree
  prefs: []
  type: TYPE_NORMAL
- en: Most fall into a never-ending cycle of postpone self-study -> evaluate later,
    promising the self-study but never delivering. Going beyond this, cloud native
    organizations work on addressing the root of the problem. One of the primary reasons
    the *learning will happen miraculously* mindset persists is the overwhelming burden
    of unmanageable BAU tasks. This challenge is often rooted in accumulated technical
    debt, which is not a new phenomenon. By recognizing and actively addressing this
    issue, organizations can gradually free up time for self-directed learning and
    professional development. It is essential that this initiative is spearheaded
    and supported by leadership, who must remain vigilant about the dangers of a growing
    backlog. Such backlogs should be treated as critical issues requiring immediate
    and sustained attention.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3: Evaluating the reasons why “REDRAW PLEASE”](img/B22364_03_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 - Evaluating the reasons why “REDRAW PLEASE”
  prefs: []
  type: TYPE_NORMAL
- en: This approach is rooted in the belief that knowledge and experience are foundational
    to creating a lasting impact. When employees are encouraged to learn and grow
    during work hours, they are better equipped to explore new technologies, implement
    innovative features, and drive the organization forward. Without this commitment
    to continuous learning, companies risk stagnation and limit their ability to create
    distinctive solutions. By integrating education into the daily work environment,
    organizations not only empower their employees but also ensure their long-term
    growth and adaptability in an ever-evolving landscape. This support can come in
    the form of access to training materials, workshops, and dedicated time for learning
    within the work schedule. This can be easily achieved by blocking out the calendar
    for training. If that time needs to be repurposed (e.g., for an incident), then
    that time block gets moved in the calendar. Be strict on rejecting meetings during
    that allocated time.
  prefs: []
  type: TYPE_NORMAL
- en: The following tables provide a set of holistic options, some internal and others
    external. *Table 3.1* presents a fair few options, some much harder to achieve
    than others, but of the lot, certifications and training are the best places to
    start.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Category** | **Description** | **Frequency** | **Participants** | **Methods**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Onboarding bootcamp | Intensive program for new hires focusing on cloud native
    tools and practices. | First month of employment | New engineers | Hands-on labs,
    workshops, mentoring |'
  prefs: []
  type: TYPE_TB
- en: '| Continuous learning hours | Designated time during the week for self-paced
    learning and exploration. | Weekly | All engineers | Online courses, reading,
    experimentation |'
  prefs: []
  type: TYPE_TB
- en: '| Certification and training | Support for achieving industry-recognized certifications
    (e.g., cloud vendors such as AWS or Kubernetes). | Ongoing | Interested engineers
    | Online courses, external training providers |'
  prefs: []
  type: TYPE_TB
- en: '| Tech talks and brown bags | Informal sessions where engineers share knowledge
    on specific topics. | Bi-weekly | All engineers | Presentations, live demos, Q&A
    sessions |'
  prefs: []
  type: TYPE_TB
- en: '| Tech debt days | Dedicated time to address technical debt while learning
    about legacy systems. | Quarterly | All engineers | Pair programming, refactoring
    sessions, Confluence/ documentation bounties |'
  prefs: []
  type: TYPE_TB
- en: '| Mentorship programs | Pairing less experienced engineers with senior engineers
    for guided learning. | Ongoing | Junior and senior engineers | One-on-one mentoring,
    code reviews |'
  prefs: []
  type: TYPE_TB
- en: '| Technical writing | A centralized repository for documentation, best practices,
    and lessons learned advertising engineering excellence. | Ongoing | All engineers
    | Blogs/white papers, internal documentation |'
  prefs: []
  type: TYPE_TB
- en: Table 3.1 - Internal learning options
  prefs: []
  type: TYPE_NORMAL
- en: Cloud native vendors tend to have their own certification paths. With AWS, we
    can run through certification training via platforms such as AWS Skill Builder,
    Tutorial Dojo, or Learn.Cantrill; with Azure, Pluralsight and Microsoft Learn;
    and the same for GCP but with Google Cloud Training and Whizlabs. The learnings
    you gain can and should be double-dipped. Say our learnings of how S3 buckets
    can become a great way to host Static sites via the AWS Developer certificate,
    a simple blog can be encouraged via that or the outcome of the education leads
    to internal product recommendations, in particular ones like the S3 Static hosting.
  prefs: []
  type: TYPE_NORMAL
- en: 'To counteract the development of anti-patterns in cloud native environments,
    innovative learning events play a critical role. Regularly scheduled activities,
    such as hackathons, game days, learning communities, and external conferences,
    ensure continuous educational engagement and operational readiness among engineers.
    These events foster a proactive culture of innovation, collaboration, and security
    awareness, essential for navigating the complexities of cloud native technologies.
    This community approach will also provide external insights that would otherwise
    not be had. *Table 3.2* details the frequency, participants, and methods of these
    transformative events:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Category** | **Description** | **Frequency** | **Participants** | **Methods**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Hackathons | Events focused on building prototypes and experimenting with
    new technologies | Quarterly | Cross-functional teams | Collaborative coding,
    problem-solving |'
  prefs: []
  type: TYPE_TB
- en: '| Game days | Events where critical events, security events, and similar are
    simulated to gauge reactions | Annually | Engineers | All-day DR tests, security
    simulations via pen testing or testing |'
  prefs: []
  type: TYPE_TB
- en: '| Learning communities | Specialized groups focusing on specific technologies
    (e.g., DevOps, security) | Monthly meetups | Engineers with shared interests |
    Discussions, collaborative projects |'
  prefs: []
  type: TYPE_TB
- en: '| External conferences | Attendance at industry conferences to stay updated
    with the latest trends | Annually | Selected engineers | Keynotes, workshops,
    networking |'
  prefs: []
  type: TYPE_TB
- en: Table 3.2 - External learning options
  prefs: []
  type: TYPE_NORMAL
- en: In cloud native environments, the myth that “learning will happen miraculously”
    must be dispelled for organizations to succeed. Governance is about not only technical
    controls but also fostering a culture of continuous learning. The shift from traditional,
    centralized control to agile innovation requires addressing the human element,
    ensuring engineers have the time and resources to develop their skills.
  prefs: []
  type: TYPE_NORMAL
- en: Learning cannot be left to the margins or expected to happen outside work hours.
    To embed learning into the organization’s fabric, companies must offer structured
    development opportunities and integrate learning into daily workflows. This allows
    engineers to refine their skills while contributing to business goals, leading
    to more innovation and a stronger workforce. Sustained success in a cloud native
    world depends on making learning an integral part of the job. When organizations
    prioritize learning as a core strategy, they empower teams to drive technological
    change and ensure long-term success. In the next section, we will explore how
    this transformation cannot happen without a shift in culture.
  prefs: []
  type: TYPE_NORMAL
- en: The culture doesn’t need to change
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The driving force for a successful organizational culture over time is change.
    Marc Benioff, CEO of Salesforce, said it best: “*The only constant in the technology
    industry is change*.” We may assume that Marc is only referring to the tech we
    build and work on here. However, what is implied here is that the culture as well
    as the tech behind the industry changes. Adopting a cloud native approach is more
    than just implementing new technology; it’s about embracing a fundamental shift
    in organizational culture. Many organizations mistakenly believe they can simply
    overlay cloud technology onto their existing practices without making significant
    cultural changes.'
  prefs: []
  type: TYPE_NORMAL
- en: This section aims to equip readers with the skills to understand the cultural
    impact of cloud native adoption. It will also address the dangers of underestimating
    cultural change, overlooking key stakeholders, and neglecting change management,
    which can lead to a lack of buy-in and resistance from employees.
  prefs: []
  type: TYPE_NORMAL
- en: The cultural impact of cloud native adoption
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When an organization adopts the cloud native paradigm, it must go beyond technology
    and address impacts on how teams work, communicate, and approach problem-solving.
    Cloud native adoption encourages practices such as continuous integration, continuous
    delivery/deployment, and various engineering cultures, such as DevOps/SecOps or
    platform engineering. These practices necessitate a collaborative, flexible, and
    proactive culture that can adapt to rapid changes, unlike that of a traditional
    IT organization.
  prefs: []
  type: TYPE_NORMAL
- en: Spotify – the impact of cultural change
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Spotify offers an excellent case study of how embracing a cloud native culture
    can lead to transformative success. When Spotify decided to move to the cloud,
    it understood that this shift required more than just technological change; it
    demanded a fundamental rethinking of their organizational culture. To achieve
    this, Spotify adopted a unique model centered around autonomy, collaboration,
    and continuous improvement. The approach to cloud native is best exemplified by
    their creation of “squads”: small, cross-functional teams that operate with a
    high degree of autonomy.'
  prefs: []
  type: TYPE_NORMAL
- en: Each squad is responsible for a specific aspect of Spotify’s service and has
    the freedom to decide how they achieve their goals. This structure allows teams
    to experiment, iterate, and innovate quickly without being bogged down by bureaucratic
    processes. The squad model also promotes a culture of accountability, where teams
    own their work from start to finish, fostering a sense of ownership and pride
    in the outcomes. In addition to squads, Spotify introduced the concepts of **tribes**,
    **chapters**, and **guilds** to maintain alignment across the organization while
    preserving autonomy. The following table goes into detail about each one.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Concept** | **Description** | **Impact** |'
  prefs: []
  type: TYPE_TB
- en: '| Squads | Small, autonomous, cross-functional teams responsible for specific
    aspects of Spotify’s service | Promotes rapid experimentation, innovation, and
    ownership |'
  prefs: []
  type: TYPE_TB
- en: '| Tribes | Groups of related squads working within a broader area of Spotify’s
    service | Ensures alignment and collaboration across squads |'
  prefs: []
  type: TYPE_TB
- en: '| Chapters | Discipline-specific groups within tribes that ensure consistency
    in practices (e.g., frontend developers) | Maintains best practices and technical
    standards |'
  prefs: []
  type: TYPE_TB
- en: '| Guilds | Informal communities of interest that span the organization, fostering
    knowledge sharing and collaboration | Encourages cross-functional learning and
    innovation |'
  prefs: []
  type: TYPE_TB
- en: Table 3.3 - Spotify teams model explained
  prefs: []
  type: TYPE_NORMAL
- en: Take note of the approach; the concepts presented do not create silos, but instead
    create overlapping groupings where intercommunication is encouraged and endorsed.
  prefs: []
  type: TYPE_NORMAL
- en: Spotify’s success story illustrates the power of aligning cultural change with
    technological change. Their cloud native transformation wasn’t just about adopting
    new technologies; it was about fostering a culture that values autonomy, collaboration,
    continuous improvement, and learning from failures. This cultural shift has been
    instrumental in enabling Spotify to innovate at scale, maintain high service reliability,
    and remain a leader in the competitive music streaming industry.
  prefs: []
  type: TYPE_NORMAL
- en: To truly understand the success of a change in culture, our learning needs to
    focus on the risks of not changing.
  prefs: []
  type: TYPE_NORMAL
- en: The hidden costs of ignoring cultural change
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Organizations tend to focus heavily on the technical aspects, sidelining the
    human element, which can lead to a cascade of issues. These issues are caused
    by a combination of leadership decisions, fear of the unknown, and lack of buy-in
    by leadership. Let’s take a closer look at the implications of these issues.
  prefs: []
  type: TYPE_NORMAL
- en: Resistance to change
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Employees accustomed to traditional workflows may resist adopting new cloud-based
    practices, delaying progress and causing inefficiencies. For example, in a multi-cloud
    consultation with a fintech organization, despite the inefficiencies of legacy
    processes, such as taking two days to provision a new AWS account and relying
    on custom scripts, engineering teams were reluctant to adopt cloud native solutions
    to streamline workflows. The organization also resisted third-party cloud management,
    so we used native tools from each cloud vendor for the respective cloud teams.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is clear that engineers’ hesitancy often stems from multiple factors, with
    the learning curve being one of the most significant. With every change comes
    the inevitable question: “How do we adapt?” This fear is entirely valid.'
  prefs: []
  type: TYPE_NORMAL
- en: Consider the example from the *Learning will happen miraculously* section of
    a long-tenured engineer at a traditional organization. While the business may
    highly value their deep experience and loyalty, their resistance to change can
    become a significant roadblock for the broader organizational culture. This resistance
    is not just about reluctance; it’s rooted in years of established practices that
    have become second nature to them. Their deep expertise, while invaluable, often
    ties them to legacy systems and processes that are comfortable but outdated. This
    hesitation stems from a fear of the unknown, a strong preference for familiar
    routines, and a general reluctance to embrace change. Let’s look at how we can
    overcome this resistance to change.
  prefs: []
  type: TYPE_NORMAL
- en: Overcoming resistance to change
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Overcoming this resistance requires persistent and thoughtful efforts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Providing post-project support**: Addressing concerns head-on, reassuring
    engineers that their expertise is still valued and that the new tools are there
    to enhance, not replace, their work.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Offering comprehensive training and support**: This includes not only surface-level
    introductions but also deep diving into the new systems, with hands-on workshops,
    detailed documentation in Confluence, and Markdown files in GitHub, tailored to
    bridge the gap between old and new ways of working.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fostering an environment that values continuous improvement**: Creating a
    culture where learning and adaptation are seen as ongoing processes, not one-time
    events. This helps in gradually easing the engineers into the new methodologies,
    ensuring they don’t feel overwhelmed or sidelined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For change to be successful, clear actions, not just words, are required to
    overcome resistance from experienced engineers. It requires building a solid foundation,
    anchored in clear communication, robust support systems, and a commitment to continuous
    improvement. This foundation serves as the necessary icebreaker to overcome resistance,
    allowing the organization to transition smoothly and ensuring that even the most
    experienced team members feel secure and valued during the transformation.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now address the lack of buy-in.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of buy-in
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After overcoming the initial resistance to implementation, the next critical
    hurdle in driving cultural change is securing buy-in from both employees and key
    stakeholders. Without a deep understanding of the benefits that cloud native adoption
    can bring, resistance is almost inevitable. This lack of buy-in often manifests
    as half-hearted implementation efforts, where the enthusiasm needed to drive the
    project forward is notably absent, leading to a high risk of failure.
  prefs: []
  type: TYPE_NORMAL
- en: 'During our engagement with a fintech company, we encountered this exact scenario.
    Their on-premises infrastructure was plagued by inefficiencies, including the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Lengthy deployment times
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limited scalability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accumulating technical debt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of resilience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The existing systems, though flawed, were familiar and comfortable, creating
    a false sense of security that cloud native solutions appeared to threaten. The
    resistance wasn’t just about the technology; it was about challenging the status
    quo and moving away from long-established routines that, despite their inefficiencies,
    had become deeply ingrained in the company’s operational fabric.
  prefs: []
  type: TYPE_NORMAL
- en: 'We clearly outlined the numerous advantages of transitioning to cloud services,
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Improved agility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cost savings to the operating model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhanced security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rapid scalability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We explained that the move to cloud native is meticulously designed to streamline
    operations, reduce risk, and ensure compliance. However, there was still resistance
    to making the change. This lack of enthusiasm wasn’t just a minor obstacle; it
    was a significant roadblock that resulted in a lukewarm implementation. Teams
    were hesitant to fully engage with the new tools and processes, treating the transformation
    as a superficial change rather than a fundamental shift in how the organization
    operates.
  prefs: []
  type: TYPE_NORMAL
- en: Overcoming lack of buy-in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To overcome this challenge, it was essential to build a compelling case for
    cloud cultural change by focusing on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Strategy** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Connecting technical benefits to broader organizational goals | Ensuring
    that the advantages of cloud adoption were clearly tied to the company’s overall
    objectives, helping employees see the bigger picture |'
  prefs: []
  type: TYPE_TB
- en: '| Extensive training and support | Providing in-depth training sessions to
    demystify the new tools and processes, aiming to change mindsets and reduce the
    intimidation factor |'
  prefs: []
  type: TYPE_TB
- en: '| Creating a culture of continuous improvement | Fostering an environment that
    values learning and adaptation, encouraging teams to embrace change as an opportunity
    for growth rather than a threat |'
  prefs: []
  type: TYPE_TB
- en: '| Reinforcing long-term benefits | Consistently highlighting the long-term
    gains of cloud adoption, shifting the organization’s perspective from short-term
    discomfort to future advantages |'
  prefs: []
  type: TYPE_TB
- en: Table 3.4 - Strategies of change
  prefs: []
  type: TYPE_NORMAL
- en: In the end, overcoming the lack of buy-in required more than technical solutions;
    it demanded a holistic approach addressing the cultural and psychological aspects
    of change. By aligning the cloud native strategy with the organization’s core
    values and ensuring that every team member felt included and valued, we could
    turn skepticism into support and transform what initially seemed like insurmountable
    resistance into a collective drive toward successful cloud native adoption.
  prefs: []
  type: TYPE_NORMAL
- en: The next section addresses poor communication and features a case study from
    Grammarly.
  prefs: []
  type: TYPE_NORMAL
- en: Poor communication – a case study
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A failure to clearly communicate the reasons for change and its benefits can
    lead to confusion and anxiety among engineers. This was evident during an engagement
    that we led to set up cloud foundations on AWS and deliver a **minimum viable
    product** (**MVP**) in a short timeframe. The project sponsor, the head of architecture,
    was delighted with the outcome. Although leadership was ecstatic, during an all-hands
    meeting, it became evident that the broader team was unclear on the project’s
    purpose and rationale.
  prefs: []
  type: TYPE_NORMAL
- en: The questions raised by the audience revealed a glaring communication gap. The
    project sponsors had failed to adequately inform the wider organization about
    the cloud native transformation, resulting in unnecessary anxiety and concerns.
    This experience underscores the vital importance of clear and consistent communication
    throughout the cloud native adoption journey. Leaders must ensure that everyone
    within the organization understands not only the reasons for the change but also
    the benefits it brings and how it will impact their roles. This alignment is critical
    to the success of any transformation initiative and helps to mitigate resistance
    by fostering a sense of shared purpose and commitment to the new direction. Take,
    for example, Grammarly, who have publicly posted their findings on just this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Grammarly, over a two-week period in October 2022, found the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 15% of workers say poor communication made them consider changing teams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 25% of workers say poor communication strains their relationships with their
    current team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 22% of workers say poor communication has made them consider finding a new job
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These factors all lead back to being blockers for cloud native cultural change.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4: Snippet from Grammarly case study  (https://www.grammarly.com/blog/poor-communication-work-stress/)](img/B22364_03_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 - Snippet from Grammarly case study ([https://www.grammarly.com/blog/poor-communication-work-stress/](https://www.grammarly.com/blog/poor-communication-work-stress/))
  prefs: []
  type: TYPE_NORMAL
- en: Overcoming poor communication
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Leadership plays a pivotal role in fostering buy-in for cloud native adoption.
    It’s not just about mandating change; it’s about communicating a vision that resonates
    across the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Leaders must clearly and persuasively articulate the benefits of cloud native
    adoption, linking these advantages to both the organization’s broader goals and
    the personal aspirations of team members. By doing so, they can transform skepticism
    into enthusiasm, turning obstacles into opportunities for growth. An inspirational
    leader leads by example, embracing the change themselves and demonstrating its
    value in tangible ways.
  prefs: []
  type: TYPE_NORMAL
- en: Patience and persistence are also key, as buy-in is not achieved overnight;
    it requires continuous engagement, ongoing education, and celebrating small wins
    that collectively build momentum for the broader transformation. To address all
    that we have read so far, the next section will give us strategies and frameworks
    that can be adopted.
  prefs: []
  type: TYPE_NORMAL
- en: Effective strategies for cultural change in cloud native adoption
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To successfully adopt a cloud native approach, effective strategies include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Promote cross-functional collaboration**: Break down silos by encouraging
    cross-functional teams to work together. Adopt an agile and DevOps/DevSecOps/modern
    engineering culture to foster innovation and ensure diverse perspectives are considered
    in decision-making.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encourage experimentation and learning**: Create a safe environment for employees
    to experiment and learn from failures. Promote a growth mindset and provide opportunities
    for continuous learning and development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Empower teams with autonomy**: Give teams the autonomy to make decisions
    and take ownership of their projects. This empowerment can lead to increased innovation,
    faster problem-solving, and greater job satisfaction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Foster open communication**: Maintain open, transparent, and consistent communication.
    Regularly update employees on the progress of cloud initiatives and provide forums
    for feedback and discussion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Change management frameworks**: Utilize structured approaches such as Prosci’s
    ADKAR Model and Kotter’s 8-Step Change Model to manage change effectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The journey toward cloud native adoption emphasizes the need for cultural evolution
    alongside technological advancements. As demonstrated by companies such as Spotify,
    successful cloud native adoption extends beyond technology to foster a culture
    of autonomy, collaboration, and continuous improvement.
  prefs: []
  type: TYPE_NORMAL
- en: Overcoming resistance, rooted in fear, entrenched practices, or misunderstanding,
    is crucial. Through educational initiatives, leadership endorsement, and cultural
    reengineering, organizations can align new tools with their core objectives, helping
    every stakeholder embrace the transition.
  prefs: []
  type: TYPE_NORMAL
- en: The next section will discuss the *centralized governance will scale* anti-pattern.
    The lessons from these cultural shifts highlight the importance of scalable governance
    structures in supporting complex cloud environments.
  prefs: []
  type: TYPE_NORMAL
- en: Centralized governance will scale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reflecting on the history of the IT industry reveals that centralized governance
    has long been the norm. Traditionally, every component within an organization
    was deemed critical, leading to a governance structure where all decisions, improvements,
    and oversight originated from a single point of authority. Initially, this model
    functioned effectively, managed by a small team led by a senior engineer or program
    manager.
  prefs: []
  type: TYPE_NORMAL
- en: However, as organizations grew, this centralized approach often became cumbersome
    and slow-moving. As organizations embrace cloud native more broadly, the importance
    of robust governance frameworks becomes increasingly apparent. Effective governance
    is essential for maintaining security, ensuring compliance, and optimizing operational
    efficiency. A common assertion within the field is that centralized governance
    can be effectively scaled across diverse organizational structures.
  prefs: []
  type: TYPE_NORMAL
- en: This section delves into the nuances of this approach, the dangers of insufficient
    decentralized governance guidelines, and the challenges posed by entrenched bureaucracy
    and the lack of a dedicated **cloud center of excellence** (**CCoE**) or **community
    of** **practice** (**COP**).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will gain insights into the best practices for establishing
    a CCoE in the cloud and the critical anti-patterns that organizations should strive
    to avoid. This section will explore how organizations can successfully transition
    from rigid, centralized systems to more dynamic, decentralized governance frameworks
    that better support their evolving needs.
  prefs: []
  type: TYPE_NORMAL
- en: Centralized governance – navigating challenges and crafting solutions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While governance implementation is indispensable, an absence of decentralized
    governance guidelines can turn an anchor into a shackle, removing agility and
    any potential for innovation in the long and short term. It’s paramount to embrace
    standardization, be it in technologies or practices, empowering engineering teams
    to navigate these established frameworks. A benefit of decentralized governance
    is its ability to hasten decision-making, amplify autonomy, and swiftly pivot
    in response to the ever-dynamic market landscape. The following subsection provides
    some insights into the absence of decentralized governance.
  prefs: []
  type: TYPE_NORMAL
- en: Challenges posed by the absence of decentralized governance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The lack of decentralized governance can lead to several challenges:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Inhibited innovation**: Excessive centralized oversight, lacking flexibility,
    can deter teams from proactively improving existing processes. This rigid control
    stifles the exploratory mindset essential for technological advancement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operational bottlenecks**: Centralized decision-making often introduces delays,
    impeding agility when rapid responses are crucial, especially in dynamic fields
    such as serverless computing and AI development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Declining team engagement**: Without the autonomy to drive meaningful change,
    teams may experience diminished motivation and engagement, leading to reduced
    productivity and innovation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure illustrates the contrast between centralized and decentralized
    governance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5: Centralized versus decentralized (Redraw please)](img/B22364_03_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 - Centralized versus decentralized (Redraw please)
  prefs: []
  type: TYPE_NORMAL
- en: Centralized models, reminiscent of traditional IT frameworks, typically concentrate
    authority and decision-making at the core of the organization. This central dependency
    creates a bottleneck, where every decision, no matter how trivial, must be escalated
    up the hierarchy, often leading to delays and reduced responsiveness. In contrast,
    a decentralized cloud native model distributes authority closer to the sources
    of information and action. This proximity empowers teams to make decisions quickly
    based on their direct understanding of the issues, fostering a more agile and
    responsive environment.
  prefs: []
  type: TYPE_NORMAL
- en: When decision-making is removed from those involved in the day-to-day operations,
    it can lead to a sense of disempowerment among team members, who may feel their
    expertise and insights are undervalued. This can reduce job satisfaction and increase
    turnover, further destabilizing the organization. Centralized models struggle
    to scale effectively in dynamic environments. As organizations grow and operations
    become more complex, the central bodies become overwhelmed with decision requests,
    leading to slower response times and potential missed opportunities in fast-moving
    sectors. For example, we have worked with large critical infrastructure organizations
    such as large telecom companies, where engineers on the ground might discover
    innovative ways to optimize network traffic, but their inability to implement
    changes without lengthy approval processes can lead to frustration and a sense
    that their technical expertise is undervalued. This detachment not only hampers
    innovation but can also lead to decreased job satisfaction and increased turnover,
    further destabilizing the organization.
  prefs: []
  type: TYPE_NORMAL
- en: At scale, decentralized governance has seen much success. Take the AWS example
    that follows.
  prefs: []
  type: TYPE_NORMAL
- en: Two-pizza team – decentralized governance
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Decentralized governance** is well illustrated by AWS’s *two-pizza team*
    framework. This model champions small, nimble teams that wield the autonomy to
    make swift decisions, thus creating a culture of innovation and agility while
    ensuring alignment with broader organizational goals.'
  prefs: []
  type: TYPE_NORMAL
- en: Take, for instance, the team behind Lambda, the serverless computing service
    from AWS. Their capacity to swiftly integrate customer feedback into new feature
    additions exemplifies the competitive edge fostered by decentralized governance,
    bolstering AWS’s stature as a frontrunner in the serverless computing arena.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each two-pizza team, dedicated to specific services or features, thrives on
    the autonomy to innovate and drive their agenda forward, making rapid adjustments
    to better meet customer demands and stay ahead in the market. The advantages of
    the two-pizza team are highlighted in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Advantage** | **Success Metric** |'
  prefs: []
  type: TYPE_TB
- en: '| Increased agility | Smaller teams move faster and adapt quickly without cumbersome
    processes. |'
  prefs: []
  type: TYPE_TB
- en: '| Enhanced autonomy | Having fewer team members reduces misunderstandings and
    enhances alignment on fast-moving projects. |'
  prefs: []
  type: TYPE_TB
- en: '| Improved communication | Having fewer team members reduces misunderstandings
    and enhances alignment on fast-moving projects. |'
  prefs: []
  type: TYPE_TB
- en: '| Greater accountability | Clear responsibilities within small teams improve
    accountability for actions and results. |'
  prefs: []
  type: TYPE_TB
- en: '| Faster decision-making | Streamlined decision processes due to fewer bureaucratic
    layers and necessary approvals. |'
  prefs: []
  type: TYPE_TB
- en: '| Increased focus | Smaller teams focus more intensely on specific objectives
    without broader organizational distractions. |'
  prefs: []
  type: TYPE_TB
- en: Table 3.5 - Detailed advantages of the two-pizza model
  prefs: []
  type: TYPE_NORMAL
- en: Centralized governance solutions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Following a detailed exploration of the challenges posed by centralized governance,
    it becomes imperative to address one of its most debilitating factors: **calcified**
    **bureaucracy**. This phenomenon represents processes that become so rigid and
    outdated that they severely hamper an organization’s ability to innovate and adapt,
    qualities that are crucial in the rapidly evolving landscape of cloud technology.'
  prefs: []
  type: TYPE_NORMAL
- en: Symptoms of calcified bureaucracy
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One of the most glaring signs of this calcified bureaucracy is slow decision-making.
    In many traditional organizations, decision-making processes become bogged down
    by an accumulation of management layers and procedural steps that no longer contribute
    value. These layers are remnants of past structures, held in place by sheer inertia
    rather than necessity, leading to delays that are not only frustrating but also
    costly in terms of lost opportunities. This symptom is mostly felt by larger and
    older organizations; we have heard this multiple times from those who work within
    or have contracted with government bodies where by sheer bureaucracy, change is
    stifled.
  prefs: []
  type: TYPE_NORMAL
- en: Another symptom is resistance to change. Although we looked into this component
    in depth in an earlier section, it also relates to centralized governance. Traditional
    organizations often exhibit a profound reluctance to adopt new technologies or
    methodologies, rooted in a fear of disruption. This fear is not unfounded, as
    new technologies can unsettle established roles and processes. But the resistance
    also stems from comfort with the status quo and an avoidance of the unknown. Such
    resistance can prevent organizations from staying competitive in industries where
    technological adaptability is key to survival.
  prefs: []
  type: TYPE_NORMAL
- en: Strategies for disrupting calcified bureaucracy
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To combat the inertia of calcified bureaucracy, especially in settings that
    require the high agility provided by cloud technologies, organizations can adopt
    several effective strategies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Streamline processes**: It is crucial to conduct regular reviews of all processes
    with the aim of streamlining them. This involves cutting out redundant steps and
    simplifying procedures to enhance operational efficiency and responsiveness.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Empower teams**: Delegating decision-making authority directly to the teams
    on the frontlines can dramatically increase agility. This empowerment allows those
    who are most intimately familiar with the issues at hand to implement solutions
    swiftly and effectively, without the delay of climbing up and down the hierarchical
    ladder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Promote a culture of continuous improvement**: Cultivating an organizational
    mindset that values the continuous evaluation and refinement of processes ensures
    that they remain relevant and effective. This culture encourages innovation and
    the willingness to experiment, which are vital for leveraging cloud technologies
    to their fullest potential.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By addressing the symptoms and root causes of calcified bureaucracy, organizations
    can not only enhance their adaptability and efficiency but also foster an environment
    that is conducive to innovation and rapid technological adoption.
  prefs: []
  type: TYPE_NORMAL
- en: The transition from a calcified to a dynamic and responsive bureaucracy is not
    just a shift in processes but a transformation in organizational culture, aligning
    it with the demands of the cloud era.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will delve into the critical role of a CCoE in
    navigating the complexities of cloud governance and ensuring that organizations
    maintain agility while avoiding the pitfalls of bureaucratic stagnation. These
    frameworks are essential for clarifying roles, streamlining decision-making, and
    fostering a culture of continuous improvement in cloud native environments.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of a CCoE
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The purpose of a CCoE is to establish a centralized team or function that plays
    a critical role in driving cloud adoption, governance, and best practices across
    an organization. We might ask ourselves here: “*Why do we need a centralized team
    if we move to a cloud native organizational structure?*” Simply put, by establishing
    a CCoE, organizations can effectively manage their cloud environments, optimize
    business operations, and deliver enhanced value to their customers and communities.'
  prefs: []
  type: TYPE_NORMAL
- en: By tightly linking cloud initiatives with the organization’s broader business
    objectives, the CCoE ensures that cloud adoption is not just a technological shift
    but a strategic move aligned with long-term goals. A key function of the CCoE
    is the development and enforcement of best practices and standards for cloud usage.
    These standards are essential for maintaining consistency and efficiency across
    the organization.
  prefs: []
  type: TYPE_NORMAL
- en: The CCoE establishes guidelines for resource provisioning, cost optimization,
    and security controls, ensuring that all cloud activities align with the organization’s
    operational and strategic needs. AWS offers an insightful whitepaper on the topic
    of structuring a CcoE. Let’s dive deeper into its key recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: CCoE structure
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'AWS has released a whitepaper for setting up a CCoE to transform organizations.
    Based on this whitepaper, the CCoE is typically divided into two teams:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cloud business office (CBO)**: The CBO aligns the products and services offered
    by the CCoE with the needs of enterprise customers and leadership. It acts as
    a bridge between technical teams and business stakeholders, ensuring that cloud
    initiatives are aligned with organizational goals and priorities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud engineering**: This team codifies the differences between standard
    cloud service configurations and the organization’s enterprise standards. They
    package and continuously improve these codified patterns as self-service deployable
    products for customers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s explore the strategies for building an effective CCoE.
  prefs: []
  type: TYPE_NORMAL
- en: Recommended strategies for creating a CCoE
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following are some of the recommended strategies for creating a CCoE:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Define clear goals and a long-term vision**: The CCoE should have clearly
    defined, measurable goals that align with the organization’s overall business
    objectives. Establishing a long-term roadmap with ambitious projects will drive
    cloud adoption and innovation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Develop deep cloud expertise**: The CCoE needs detailed knowledge of the
    target cloud platform, including its services, performance, monitoring, cost optimization,
    and security best practices. This expertise is essential for guiding the organization
    through successful cloud adoption.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Establish cloud governance and policies**: The CCoE is responsible for developing
    and enforcing cloud governance policies to ensure cost-effectiveness, security,
    and compliance. This includes defining cloud architecture principles, deployment
    standards, and automation practices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Measure success and iterate**: The CCoE should collect metrics and KPIs related
    to cloud projects and compare them to established goals. This data helps determine
    whether the CCoE is providing the intended value and identifies areas for improvement.
    The CCoE strategy should be adapted as conditions develop.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In summary, a well-established CCoE is vital for managing cloud environments
    effectively. It ensures that organizations can optimize their operations, innovate
    rapidly, and deliver significant value to their customers while maintaining compliance
    and security. Without such a centralized function, organizations risk falling
    into fragmented efforts, missed opportunities, and increased friction and inefficiencies,
    especially in global projects.
  prefs: []
  type: TYPE_NORMAL
- en: As we conclude our examination of centralized governance and the importance
    of establishing clear roles and responsibilities, it’s critical to recognize that
    not all organizations are alike. While a well-structured governance framework
    is essential for maintaining security, compliance, and operational efficiency
    in cloud environments, some organizations may resist standardization, believing
    that their unique business needs are too specialized for such practices.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore this mindset in detail, discussing the
    risks and challenges associated with rejecting standardized governance frameworks
    and how it can lead to inefficiencies, increased risk, and missed opportunities
    in cloud operations.
  prefs: []
  type: TYPE_NORMAL
- en: Our business is too special for guardrails or standards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a common misconception. In our experience, nearly every organization
    believes its IT environment is too unique or complex for the implementation of
    standardized guardrails or governance practices. However, when audit time approaches,
    these same organizations often find themselves scrambling to establish the very
    controls they initially resisted. The perceived complexity masked a deeper hesitation
    to implement the necessary controls. Regardless of how specialized a business
    may seem, when it comes to compliance with government, financial, or industry-specific
    standards, these requirements must be met.
  prefs: []
  type: TYPE_NORMAL
- en: The true challenge lies not in the uniqueness of the business but in its willingness
    to overcome this reluctance and establish the essential governance structures.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ll explore the importance of data insights, the critical
    role of **governance, risk, and compliance** (**GRC**) policies, and the necessity
    of a clear **responsible, accountable, consulted, and informed** (**RACI**) model.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the concept and benefits of guardrails
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Guardrails** in cloud governance are critical tools and predefined policies
    and practices that direct teams toward the compliant and secure usage of cloud
    resources, fostering an environment where innovation flourishes without compromising
    on safety.'
  prefs: []
  type: TYPE_NORMAL
- en: As the foundational elements of centralized governance, these guardrails offer
    a well-balanced approach, allowing for flexibility in operations while ensuring
    that essential controls are firmly in place. They function as both guidelines
    and boundaries, empowering teams to effectively utilize cloud resources within
    a framework that enforces crucial safeguards to comply with regulations, standards,
    and organizational policies.
  prefs: []
  type: TYPE_NORMAL
- en: By promoting consistency, scalability, and accountability across the organization,
    guardrails ensure a uniform approach to managing cloud resources. The strengths
    of guardrails and details on why to use them are outlined next.
  prefs: []
  type: TYPE_NORMAL
- en: Key strengths of guardrails
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are a range of benefits offered by guardrails:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enhanced security**: Guardrails enforce security protocols across an organization,
    ensuring practices are followed that protect sensitive information and critical
    systems. These protocols might include mandatory encryption for data in transit
    and at rest, restricted access based on the principle of least privilege, and
    automated security updates. By standardizing security measures, guardrails reduce
    risks and strengthen the cloud environment’s security.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compliance assurance**: Automate compliance with regulatory requirements,
    lowering the risk of breaches and fines. Guardrails enforce data sovereignty laws
    by restricting data storage to specific regions or ensuring adherence to regulations
    such as HIPAA or PCI-DSS. This automation minimizes manual oversight, helping
    organizations maintain compliance with ease.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consistency and standardization**: Enforce standardized policies and procedures
    across all teams, ensuring the consistent deployment and management of cloud resources.
    This reduces configuration errors, improves interoperability between cloud services,
    and simplifies onboarding and training for new team members.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Audit and reporting**: Guardrails improve governance by offering audit trails
    and detailed reports on cloud usage and compliance. These features help organizations
    identify inefficiencies, manage risks, and provide accountability for internal
    audits or external reviews, supporting the continuous improvement of cloud strategies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guardrails streamline the path to production in a cloud native environment by
    integrating compliance directly into the deployment process. Tools such as AWS
    Config conformity rules, AWS SCP, and Azure Policy regulatory rules allow developers
    and engineers to focus more narrowly when releasing updates or new features. This
    focus does not create silos but instead establishes clear boundaries on permissible
    actions. Consider the following diagram, which illustrates a group of AWS accounts
    within an AWS organization.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6: AWS organization OU with member accounts (Redraw Please)](img/B22364_03_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 - AWS organization OU with member accounts (Redraw Please)
  prefs: []
  type: TYPE_NORMAL
- en: In this example, apply account-level rules specifying that only explicit resources
    can be deployed, such as Lambda functions or Fargate tasks. This setup forms a
    consistent guardrail, ensuring that deviations only occur with explicit approval,
    thus maintaining compliance and control during deployment. To optimize the use
    of guardrails, it is essential to distinguish between the different types of guardrails
    to consider. The next section will provide a detailed overview.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding which guardrails to use
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As our understanding of guardrails grows, to better utilize them, we should
    look at segmenting them into two sections: proactive and detective.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Proactive guardrails** are essential in cloud governance because they prevent
    issues before they occur, while detective guardrails identify and address issues
    after they have happened. Proactive guardrails play a crucial role in securing
    the cloud environment and ensuring compliance, minimizing the reliance on reactive
    measures. Essentially, both preventative and proactive guardrails are designed
    to stop the creation of non-compliant resources in the environment. For simplicity,
    we’ll refer to them collectively as proactive guardrails.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The benefits of proactive guardrails include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Minimize security breaches**: Implementing proactive measures and best practices
    from the start significantly reduces security incidents. For example, enforcing
    IAM policies that grant only necessary permissions can prevent excessive privileges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ensure continuous compliance**: Automated checks during deployment verify
    adherence to regulations, maintaining continuous compliance. For instance, guardrails
    can enforce GDPR compliance by tagging personal data and restricting deployment
    to approved regions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reduce operational overhead**: Proactive guardrails prevent issues before
    they occur, reducing the need for manual intervention and saving resources. For
    example, enforcing resource tagging ensures accurate cost allocation from the
    start, streamlining cost analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standardize deployments**: Guardrails ensure consistent configurations across
    the cloud, reducing complexity and improving manageability. For example, IaC templates
    with guardrails standardize security groups, patching schedules, and monitoring
    for all web servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Accelerate secure development**: Embedding security and compliance checks
    in the deployment process speeds up secure application delivery. For example,
    guardrails in CI/CD pipelines automatically scan code for vulnerabilities and
    compliance before deployment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Detective guardrails** work by detecting resources that violate security
    policies after they’ve been provisioned. When combined with automated remediation,
    they are known as **remediation controls**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The benefits of detective guardrails include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Identify issues**: These guardrails continuously monitor the cloud environment
    to detect and flag non-compliant resources or actions after they’ve occurred,
    providing insights into potential security breaches, misconfigurations, or policy
    violations that may have slipped through preventative measures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Address after the fact**: Detective guardrails allow for the identification
    and remediation of issues post-deployment. While they are not ideal for serious
    security issues, they are useful for identifying and resolving minor compliance
    deviations or overlooked settings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitor and report violations**: Detective guardrails provide ongoing monitoring
    and detailed reports on violations, helping organizations maintain visibility
    into their cloud environment. For example, AWS Config rules can monitor and report
    on resource configurations that violate organizational policies, while AWS CloudTrail
    can log unauthorized API calls or changes to critical resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By understanding and implementing both detective and proactive guardrails, organizations
    can build a secure, compliant, and efficient cloud environment that not only protects
    against potential threats but also optimizes operations and costs.
  prefs: []
  type: TYPE_NORMAL
- en: The next section will detail the RACI model, further explaining how roles and
    responsibilities can be delineated to enhance organizational efficiency and clarity
    in cloud governance.
  prefs: []
  type: TYPE_NORMAL
- en: RACI model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is essential to clearly delineate roles and responsibilities within the organization.
    This clarity is crucial to avoid the pitfalls of ambiguous accountability and
    inefficiency that can derail cloud initiatives. The **RACI model** is a responsibility
    assignment matrix that serves as an effective tool to define these roles and responsibilities,
    ensuring that every task within the cloud operating model is executed with precision
    and accountability.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will explore the RACI model for cloud governance, illustrating
    its components and detailing how a poorly implemented RACI model can lead to further
    cloud native anti-patterns.
  prefs: []
  type: TYPE_NORMAL
- en: 'The RACI model helps in clarifying who is responsible, accountable, consulted,
    and informed for various tasks within a cloud governance framework. The following
    is a table outlining how the RACI model can be applied to key tasks in cloud governance:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Task** | **Responsible (R)** | **Accountable (A)** | **Consulted (C)**
    | **Informed (I)** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Define cloud governance framework | Platform engineering team | CIO/CTO |
    Security team, compliance team | All stakeholders |'
  prefs: []
  type: TYPE_TB
- en: '| Establish governance policies | Platform engineering team | CIO/CTO | Legal
    team, security team | All employees |'
  prefs: []
  type: TYPE_TB
- en: '| Implement security controls | Security team | CISO | Platform engineering
    team | All stakeholders |'
  prefs: []
  type: TYPE_TB
- en: '| Monitor compliance | Security and compliance team | Compliance officer |
    Security and platform engineering team | All stakeholders |'
  prefs: []
  type: TYPE_TB
- en: '| Cloud resource provisioning | Platform engineering team, operations team
    | Platform engineering manager | Application owners, security team | All stakeholders
    |'
  prefs: []
  type: TYPE_TB
- en: Table 3.6 - RACI breakdown example
  prefs: []
  type: TYPE_NORMAL
- en: 'Understanding and addressing the following anti-patterns in cloud governance
    RACI models is crucial, as these pitfalls can significantly undermine the effectiveness
    of cloud operations, leading to operational inefficiencies, unclear accountability,
    and increased risk. By recognizing these common mistakes, organizations can better
    align their governance structures with their strategic objectives, ensuring smoother
    execution, enhanced collaboration, and more reliable compliance across cloud environments.
    The following table highlights the typical challenges with the RACI model and
    the solutions that should be applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Challenge** | **Solution** |'
  prefs: []
  type: TYPE_TB
- en: '| Overloading and ambiguous roles | Clarify and limit roles by ensuring each
    has a well-defined scope. Avoid assigning too many tasks to one role and review
    roles regularly to prevent bottlenecks. |'
  prefs: []
  type: TYPE_TB
- en: '| Using RACI as a catch-all | Use RACI selectively by focusing on key governance
    areas. Avoid excessive granularity and ensure it remains practical for addressing
    specific issues. |'
  prefs: []
  type: TYPE_TB
- en: '| Lack of collaboration | Foster cross-team collaboration by involving all
    relevant teams, including the CCoE, in RACI development. Encourage open dialogue
    to cover all responsibilities. |'
  prefs: []
  type: TYPE_TB
- en: '| Not keeping RACI updated | Regularly review and update RACI to align with
    evolving governance practices. Ensure it reflects changes in cloud strategy and
    responsibilities. |'
  prefs: []
  type: TYPE_TB
- en: Table 3.7 - Resolving challenges with the RACI model
  prefs: []
  type: TYPE_NORMAL
- en: This leads us to the importance of a robust cloud GRC framework. While the RACI
    model helps clarify roles and responsibilities, cloud native GRC policies provide
    the necessary structure to address the complexities of modern cloud operations,
    particularly for organizations that consider themselves too unique for standardized
    guardrails and practices.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will delve into how cloud native GRC frameworks can
    fix these issues, offering a comprehensive approach to governance that balances
    the need for flexibility with the demands of compliance and security.
  prefs: []
  type: TYPE_NORMAL
- en: The necessity of endorsed GRC policies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: No business is too special or unique to bypass the need for robust GRC policies.
    These frameworks are essential for effectively managing risks, ensuring compliance,
    and establishing a solid governance structure within any organization. Without
    endorsed and consistently enforced GRC policies, businesses are likely to encounter
    inconsistent implementations, increased operational overhead, and vulnerabilities
    that could have been easily mitigated.
  prefs: []
  type: TYPE_NORMAL
- en: Key elements of GRC policies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following are the key elements of GRC policies, with a description of each:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Key Element** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Governance | Establishes the framework for decision-making, accountability,
    and oversight within the organization. This includes defining roles and responsibilities,
    setting strategic objectives, and creating processes for monitoring and reporting.
    Effective governance ensures that cloud initiatives align with overall business
    goals and that there is clear accountability for cloud-related decisions. |'
  prefs: []
  type: TYPE_TB
- en: '| Risk management | Involves identifying, assessing, and mitigating risks that
    could impact the organization. In cloud native governance, risk management covers
    concerns such as data security, vendor lock-in, and compliance risks associated
    with cloud adoption. |'
  prefs: []
  type: TYPE_TB
- en: '| Compliance | Ensures adherence to regulatory requirements, industry standards,
    and internal policies. In cloud environments, compliance may involve ensuring
    data residency requirements are met, maintaining proper access controls, and implementing
    necessary encryption standards. |'
  prefs: []
  type: TYPE_TB
- en: Table 3.8 - Elements of GRC policies
  prefs: []
  type: TYPE_NORMAL
- en: The critical importance of enforcing GRC policies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even the most meticulously crafted GRC policies are rendered ineffective without
    proper enforcement. When these policies are not consistently applied or accountability
    is unclear, they devolve into mere guidelines, lacking the power to drive real
    governance or mitigate risks effectively. This lack of enforcement can create
    significant governance gaps, leading to increased operational overhead, vulnerabilities,
    and diminished trust in the organization’s ability to handle incidents and maintain
    compliance.
  prefs: []
  type: TYPE_NORMAL
- en: Note the following challenges of enforcing GRRC policies.
  prefs: []
  type: TYPE_NORMAL
- en: Challenges in enforcing GRC policies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Following are the challenges in enforcing GRC policies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Inconsistent application**: When GRC policies are applied inconsistently
    across different teams, departments, or projects, it creates discrepancies in
    how governance is executed. These inconsistencies can result in gaps where certain
    areas of the organization are inadequately governed, leading to vulnerabilities
    that can be exploited. The inconsistency also makes it difficult to measure the
    effectiveness of policies, as different teams may interpret and implement them
    in varying ways.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lack of accountability**: Without clearly defined roles and responsibilities,
    enforcing GRC policies becomes a challenge. When accountability is not established,
    there is no clear ownership of compliance, making it easy for non-compliance issues
    to go unnoticed or unresolved. This lack of accountability can lead to a culture
    where policies are seen as optional, further undermining the governance framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Increased operational overhead**: Inconsistent enforcement of GRC policies
    necessitates additional resources to manage and correct deviations from established
    standards. This reactive approach is not only resource-intensive but also inefficient,
    as it often involves addressing issues after they have already caused disruptions.
    The need for continuous corrections increases operational costs and diverts resources
    from more strategic initiatives.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Complexity across layers**: Enforcing GRC policies across various layers
    of the organization, such as network, infrastructure, operating systems, applications,
    data, edge computing, and **web application firewalls** (**WAFs**), adds a significant
    level of complexity. Each layer may have its own unique requirements and challenges,
    making it difficult to ensure cohesive policy enforcement. Additionally, managing
    cross-layer controls, such as credential scanning and ensuring consistent policy
    application, requires sophisticated coordination and monitoring. The complexity
    is compounded in environments where different layers are managed by separate teams,
    potentially leading to gaps in enforcement and increased risk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without rigorous enforcement, even the best-intentioned GRC policies fail to
    provide the security, compliance, and risk mitigation that organizations need
    to operate safely and efficiently in the cloud. Consistent enforcement ensures
    that GRC policies are more than just theoretical guidelines; they become integral
    parts of the organization’s operational fabric, driving compliance, reducing risks,
    and fostering confidence in the organization’s ability to navigate the complexities
    of modern cloud environments. With this in mind, we proceed to our final section,
    on missing feedback loops.
  prefs: []
  type: TYPE_NORMAL
- en: Missing feedback loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the dynamic realm of cloud computing, feedback loops are essential due to
    the rapidly evolving nature of the field. **Feedback loops** facilitate continuous
    improvement, allowing organizations to adapt and refine their cloud governance
    practices over time.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we delve into the critical consequences of missing feedback
    loops, emphasizing the importance of a robust change management process and the
    necessity of shifting left to foster a proactive culture. We’ll explore how these
    concepts can be seamlessly integrated into an operating model, supported by real-world
    examples and discussions on cloud anti-patterns to illustrate these key points.
  prefs: []
  type: TYPE_NORMAL
- en: What are feedback loops?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Think of feedback loops as the radar system of cloud governance. Just as a radar
    scans the environment to detect changes and potential threats, feedback loops
    monitor the effectiveness of our cloud strategies in real time. They provide us
    with continuous insights into how well our governance frameworks are performing,
    highlighting both successes and areas for improvement.
  prefs: []
  type: TYPE_NORMAL
- en: In the fast-paced world of cloud computing, where new technologies and threats
    emerge regularly, these loops are vital to ensuring our policies and practices
    remain relevant, effective, and aligned with our overall business objectives.
    Feedback loops operate by collecting data from every layer of our cloud infrastructure,
    from network configurations to application performance, and security incidents
    to compliance checks. This data is then analyzed to identify patterns, trends,
    and anomalies, providing us with actionable insights. By integrating these insights
    back into our governance strategies, we can make informed adjustments that enhance
    our cloud environment’s security, compliance, and efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: Why we can’t ignore feedback loops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whether you are a Dev/DevOps/DevSecOps/platform engineer, feedback loops are
    essential throughout the entire cloud native organization for not only efficiency
    but also responsiveness. In the case of alarms, they are immediate feedback providers
    when, say, CPU/memory or storage has hit a critical point, potentially bringing
    down our entire app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, feedback loops are nothing new to a traditional IT organization; they
    have been around for some time via monitoring tools such as Nagios and Zabbix.
    However, they only address a portion of the entire feedback system. With cloud
    native, we want that to be from end to end – deployment tooling, operating systems,
    containers, serverless function invocations, all of it. The question to ask is
    how much of it makes sense and will impact our organization if left ignored. To
    better understand this, let us look at why we can’t ignore feedback loops:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Continuous improvement**: Feedback loops are critical for identifying weaknesses
    in our governance framework before they escalate into larger issues. Whether it
    is tightening security controls, optimizing resource allocation, or refining compliance
    practices, feedback loops give us the ability to make continuous, data-driven
    improvements that keep our cloud environment secure, compliant, and efficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Improved responsiveness**: Feedback loops enable us to pivot quickly in response
    to new challenges, whether it is a sudden change in compliance requirements, a
    new security threat, or a shift in business strategy. With regular feedback reviews,
    we can adapt our governance practices on the fly, ensuring that our cloud operations
    remain agile and aligned with our organizational goals. Here, we want a proactive
    setup with a reactive response mechanism.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enhanced decision-making**: Gone are the days when decisions were made based
    on intuition or incomplete information. Feedback loops equip us with the hard
    data needed to make informed decisions. By monitoring key metrics, such as compliance
    rates, security incidents, and cost trends, we can gain a clear understanding
    of what’s working and what needs adjustment. This data-driven approach empowers
    us to make decisions that are not only effective but also aligned with our long-term
    strategic objectives.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we implement these feedback loops, we’re not just creating a reactive cloud
    governance framework; we are building a proactive organization that is equipped
    to handle it.
  prefs: []
  type: TYPE_NORMAL
- en: Cost of time and effort
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the fast-paced world of cloud native development, missing feedback loops
    can severely hinder the efficiency and effectiveness of the development process.
    A lack of timely feedback not only slows down the development cycle but also increases
    the pressure on developers, leading to frustration, errors, and missed deadlines.
  prefs: []
  type: TYPE_NORMAL
- en: Consider a scenario where a development team uses GitHub Actions to automate
    the deployment of their applications to AWS. While GitHub Actions offers a streamlined
    way to build, test, and deploy code, the absence of robust feedback loops in this
    process can lead to significant challenges.
  prefs: []
  type: TYPE_NORMAL
- en: Without immediate feedback, the team might push changes to the main branch and
    initiate the deployment process, only to discover much later that the deployment
    failed due to a misconfiguration in the infrastructure or a bug in the code. This
    delay in discovering the issue means that developers are left in the dark for
    longer periods, unaware that their changes have introduced a problem. Consequently,
    they continue to work under the false assumption that everything is functioning
    correctly, which compounds the issue.
  prefs: []
  type: TYPE_NORMAL
- en: Slowed development cycle and increased pressure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The absence of feedback loops in this deployment process slows down the entire
    development cycle. Instead of receiving immediate notifications about deployment
    failures or performance issues, developers only learn about these problems after
    they have had a chance to manifest and potentially affect the production environment.
    This delayed feedback forces the team into a reactive mode, where they must scramble
    to diagnose and fix issues long after they have been introduced. The lack of proactive
    alerts means that problems are often discovered at the worst possible time, during
    critical production hours or just before a major release.
  prefs: []
  type: TYPE_NORMAL
- en: This reactive approach not only slows down the development process but also
    places increased pressure on developers. With no early warning system, developers
    are forced to take on the additional burden of troubleshooting and resolving issues
    that could have been prevented or caught earlier in the pipeline. The stress of
    constantly firefighting can lead to burnout, reduced productivity, and a decline
    in code quality as developers rush to meet deadlines. To avoid these pitfalls,
    it is essential to implement robust feedback loops throughout the development
    and deployment process.
  prefs: []
  type: TYPE_NORMAL
- en: This exact scenario happened to a client of ours. We had built their pipeline
    from end to end, as an MVP, to show how well GitHub Actions and Kubernetes work
    together. To ensure consistency, we provided tests post-container build to ensure
    that the app could run. Given that it was a Docker container, portability was
    critical, so rather than testing on another cluster, we tested in the pipeline.
    Post-MVP, more pipelines were built but did not include the testing we had created
    patterns for prior, and containers were shipped to Kubernetes clusters. Without
    proper testing, chaos ensued.
  prefs: []
  type: TYPE_NORMAL
- en: We would assume that non-production environments and test environments are not
    entirely business critical, yet in this case, the new containers brought down
    the clusters as they had caused other dependent APIs to fail, thus impacting other
    teams. In the case of GitHub Actions, integrating feedback mechanisms such as
    automated testing, infrastructure checks, and real-time monitoring can provide
    developers with the information they need to make informed decisions quickly.
    For instance, if a deployment fails due to a configuration error, an immediate
    notification should be sent to the development team, detailing the cause of the
    failure and suggesting possible fixes.
  prefs: []
  type: TYPE_NORMAL
- en: 'By incorporating these feedback loops, the development process becomes more
    agile and responsive. Developers can address issues as they arise, reducing the
    risk of problems escalating into major incidents. This proactive approach not
    only accelerates the development cycle but also relieves the pressure on developers,
    allowing them to focus on writing high-quality code and innovating without the
    constant fear of unforeseen issues derailing their progress. The following diagram
    provides insights into where to apply feedback in the development pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7: CI/CD pipeline with feedback loop (Redraw please)](img/B22364_03_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 - CI/CD pipeline with feedback loop (Redraw please)
  prefs: []
  type: TYPE_NORMAL
- en: Feedback loops give us the ability to adapt to change, for better or worse.
    This leads us nicely on to our next section, on change management. Building on
    our discussion of feedback loops in cloud governance, it’s essential to understand
    how adopting the shift-left approach further enhances these practices by proactively
    addressing potential issues early in the development process.
  prefs: []
  type: TYPE_NORMAL
- en: The role of change management in cloud governance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just as in traditional IT organizations, in cloud native organizations, change
    management is still critical; it is how they are invoked and run that is different.
    With a proper feedback loop system, we can rely on when we make changes, the impact
    of success and failures are known, prior to getting there change management will
    need to run its course.
  prefs: []
  type: TYPE_NORMAL
- en: In traditional IT organizations, for most environments, from development to
    production, changes would require some form of change request via an **IT service
    management system** (**ITSM**). The change request would then need to be brought
    in front of a **change advisory board** (**CAB**), where then, and only then,
    can the change proceed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cloud native organizations cannot get rid of change management altogether as
    no change management leads to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Inconsistent implementations**: We’ve seen time and again that changes are
    implemented inconsistently across teams and environments, leading to significant
    gaps in governance and security. It is like building a house without a blueprint:
    it may look stable on the surface, but it is only a matter of time before it collapses
    under the weight of these inconsistencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resistance to change**: Engineers push back against new processes because
    they feel uninformed or uninvolved. It is like trying to force a square peg into
    a round hole: it just doesn’t fit. The result is lower adoption rates and the
    potential for conflict, which can derail even the best-laid plans.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operations disruptions**: It can cause interruptions that lead to downtime,
    inefficiencies, and a heightened risk of errors. It is like navigating a stormy
    sea without a compass: without clear direction, we’re likely to get lost and struggle
    to stay on course.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By understanding these difficulties, we can develop a well-organized change
    management procedure that confronts these concerns directly.
  prefs: []
  type: TYPE_NORMAL
- en: The GitOps model is one that cloud native organizations are adopting or have
    adopted to adhere to a modern management process. In a GitOps model, change management
    is deeply integrated into the version control system, leveraging Git as the single
    source of truth for all infrastructure and application configurations. This approach
    to change management ensures that every modification to the system, whether it
    is a code update, configuration adjustment, or infrastructure change, is tracked,
    auditable, and reversible. The process is inherently collaborative, with changes
    proposed, reviewed, and approved through **pull requests** (**PRs**), ensuring
    that all stakeholders have visibility and input before any changes are implemented.
  prefs: []
  type: TYPE_NORMAL
- en: When a change is proposed via a PR, it triggers a series of automated processes,
    including testing, validation, and deployment. This not only speeds up the change
    process but also reduces the risk of errors, as every change is thoroughly reviewed
    and tested before being merged into the main branch and applied to the live environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table details this further:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Stage** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Pull request | A developer or engineer proposes a change by creating a PR
    in the Git repository. The PR includes the specific changes to code, configurations,
    or **infrastructure as code** (**IaC**) files. |'
  prefs: []
  type: TYPE_TB
- en: '| Automated testing | The PR triggers automated testing pipelines that run
    unit tests, integration tests, and security scans to ensure the change doesn’t
    introduce any issues. |'
  prefs: []
  type: TYPE_TB
- en: '| Code review | Team members review the PR, providing feedback and suggesting
    improvements. The review process ensures that multiple stakeholders agree on the
    change before it is merged. |'
  prefs: []
  type: TYPE_TB
- en: '| Approval process | Once the reviews are complete and any requested changes
    are made, the PR is approved by authorized personnel, such as senior developers
    or team leads. |'
  prefs: []
  type: TYPE_TB
- en: '| Automated deployment | After approval, the change is automatically merged
    into the main branch. This merge triggers a deployment pipeline that applies the
    change to the relevant environments (e.g., staging, production). |'
  prefs: []
  type: TYPE_TB
- en: '| Monitoring and rollback/ forward | Post-deployment monitoring ensures that
    the change behaves as expected. If issues arise, the change can be quickly rolled
    back by reverting the PR, restoring the system to its previous state. |'
  prefs: []
  type: TYPE_TB
- en: Table 3.9 - Details of a GitOps change request
  prefs: []
  type: TYPE_NORMAL
- en: Integrating change management into the operating model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To effectively integrate change management into a cloud governance operating
    model, organizations will adopt the following practices:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Define clear objectives**: The first step in any successful change initiative
    is to define clear objectives. What do we want to achieve with this change? Articulating
    our objectives will simplify the remaining steps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Engage stakeholders**: This includes executives, IT teams, and end users
    – anyone who will be affected by the change. By involving them from the beginning
    and consistently, we will ensure their support and comprehensive preparation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Provide training and support**: Now that we have our team in place, it’s
    time to provide them with the training and resources they need to succeed. This
    could involve workshops, webinars, or even personal coaching sessions. By investing
    in our team’s development, we will reduce resistance to change and improve implementation
    success.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitor and review**: Finally, it’s crucial to continuously monitor the impact
    of changes and gather feedback from stakeholders. This will help us identify areas
    for further improvement and make data-driven decisions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The shift-left principle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This approach is about integrating quality and security practices early in the
    development life cycle, rather than waiting until the end to address these critical
    aspects. By shifting these processes to the left, closer to the beginning of the
    development cycle, we gain the foresight to prevent problems before they even
    arise.
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of shifting left
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The benefits of shifting left include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Early detection of issues**: Imagine discovering a bug during the design
    phase rather than after deployment to production. The shift-left approach enables
    us to identify and resolve issues early, saving considerable time, effort, and
    headaches down the line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Improved quality and security**: By embedding quality and security practices
    from the outset, we ensure these elements are integral to the development process.
    It’s like having a superhero team of quality and security experts working tirelessly
    to keep our applications safe and secure, from day one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Faster time to market**: Late-stage defects have a notorious way of delaying
    releases. With shift left, we can bid farewell to those last-minute problems.
    By addressing issues early, we can deliver our applications to market faster than
    ever before.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a previous consulting engagement, we enhanced the development process for
    a multinational finance group preparing to launch operations in Australia. This
    approach ensured full compliance with Australian cybersecurity controls and PCI-DSS
    requirements while safeguarding against the storage of **personally identifiable
    information** (**PII**) on public cloud infrastructure. To achieve this, we integrated
    security and compliance checks directly into our CI/CD pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Bitbucket pipelines were employed to automate build and deployment processes,
    and AWS Config with Security Hub was incorporated to continuously monitor resources
    for any deviations from established policies.
  prefs: []
  type: TYPE_NORMAL
- en: 'For those unfamiliar with AWS Config, it is a service that provides a detailed
    view of the configuration of AWS resources within your account. Similar services
    exist across other cloud platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: In Microsoft Azure, the equivalent service is Azure Policy, which allows you
    to create, assign, and manage policies to enforce rules across your resource configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Google Cloud Platform, Cloud Asset Inventory offers a way to view, monitor,
    and analyze all Google Cloud and Anthos assets across projects and services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These services are crucial to ensuring compliance with organizational guidelines
    and regulatory standards. AWS Config, for example, leverages **function as a service**
    (**FaaS**) to correct any detected issues. The same can be run in Azure and Google,
    via Azure Functions and Cloud Run.
  prefs: []
  type: TYPE_NORMAL
- en: By shifting left and implementing automated governance checks, we could detect
    and address security vulnerabilities and compliance violations early in the development
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Excellence in cloud governance goes beyond implementing best practices; it necessitates
    fostering a culture of proactive engagement and innovation, where teams are equipped
    and empowered to anticipate challenges and drive continuous improvement.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a proactive culture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cultivating a proactive culture in cloud governance begins with leadership.
    As leaders, we must model the behaviors we want to see in our teams by engaging
    in the technical details, emphasizing the importance of quality and security,
    and actively supporting our teams. This sets a clear standard for proactive behavior,
    which is essential for maintaining robust cloud governance.
  prefs: []
  type: TYPE_NORMAL
- en: However, leading by example is only the first step. To empower our teams, we
    must provide them with the necessary knowledge and tools to implement best practices
    from the outset. This includes investing in comprehensive training programs, offering
    access to the latest cloud governance technologies, and curating a library of
    technical resources. Importantly, recognizing and rewarding proactive behavior,
    such as identifying security vulnerabilities early or suggesting improvements,
    reinforces the value of these actions and helps embed a proactive mindset across
    the organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'The strategies are discussed here in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lead by example**: Effective cloud governance starts with leadership. As
    leaders, it’s essential to model the proactive behaviors we expect from our teams.
    This involves engaging directly with technical details, demonstrating the importance
    of quality and security, and actively supporting our teams. By doing so, we set
    a standard that encourages others to follow suit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Provide training and resources**: Leadership alone isn’t enough; we must
    also empower our teams with the knowledge and tools they need to succeed. This
    includes investing in comprehensive training programs, curating a library of up-to-date
    technical resources, and ensuring access to the latest cloud governance tools
    and technologies. Properly equipped, teams are better positioned to implement
    best practices from the outset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recognize and reward proactive behavior**: Finally, it’s crucial to acknowledge
    and reward those who demonstrate proactive behavior. Whether it’s identifying
    potential security vulnerabilities early or suggesting enhancements to the cloud
    governance framework, celebrating these contributions reinforces their value and
    encourages a culture of continuous improvement across the organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A proactive culture requires an environment that you can play/build on. The
    sandbox environment here becomes critical to achieving a proactive culture and
    helps avoid one of the earlier anti-patterns, *learning will* *happen miraculously*.
  prefs: []
  type: TYPE_NORMAL
- en: Empower and uplift
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By integrating sandbox environments into our development process and fostering
    a proactive culture, we significantly reduce the likelihood of unexpected issues
    in production. This approach ensures that changes are thoroughly tested and validated,
    leading to more reliable and confident production releases. We achieve this by
    doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Automated testing**: Implementing automated testing within sandbox environments
    ensures that changes meet our quality and security standards. This early detection
    of potential issues reduces the risk of surprises when changes are moved to production.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous integration and continuous delivery (CI/CD)**: Utilizing CI/CD
    pipelines to automate the deployment of changes from sandbox to production ensures
    consistency and reliability. This streamlined process minimizes the risk of human
    error and enhances the efficiency of our development cycle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regular feedback and review**: Continuously gathering feedback from sandbox
    testing allows us to refine and improve our development process. By using this
    data to make informed, data-driven decisions, we can optimize our cloud governance
    framework and ensure ongoing improvement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In cloud computing, the lack of feedback loops and effective change management
    hampers efficiency, causing inconsistent implementations, resistance to change,
    and operational issues. A GitOps-driven approach, where every change is tracked
    and reviewed through PRs, ensures transparency, accountability, and alignment
    with business goals.
  prefs: []
  type: TYPE_NORMAL
- en: Feedback loops are crucial for continuous improvement and faster decision-making,
    while the “shift-left” principle catches issues early in development. Strong leadership,
    proper training, and sandbox environments for testing build a resilient governance
    framework that reduces risk, speeds up innovation, and improves production confidence.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In cloud native environments, governance must evolve to keep pace with the agility
    and innovation that these architectures demand. Traditional governance models,
    often centralized and rigid, are ill suited for the decentralized, fast-moving
    nature of cloud technologies. As outlined in this chapter, organizations must
    shift from outdated, control-heavy methods to more adaptable and flexible governance
    strategies.
  prefs: []
  type: TYPE_NORMAL
- en: This includes addressing critical anti-patterns, such as the assumption that
    learning happens on its own or the belief that a centralized approach will scale
    effectively. By fostering a culture of continuous learning, encouraging feedback
    loops, and establishing clear, decentralized governance practices, organizations
    can avoid these pitfalls. Ultimately, cloud native governance is about empowering
    teams with the autonomy to innovate while maintaining security, compliance, and
    operational efficiency.
  prefs: []
  type: TYPE_NORMAL
