- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: A Practical Pipeline for Technical Release Managers
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向技术发布经理的实用管道
- en: This chapter will be a little different from the rest of this book. In this
    chapter, you will be shown how to build a docker image containing a simple web
    application that deploys to AWS ECS using GitHub Actions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章与本书的其他章节略有不同。在本章中，您将学习如何构建一个包含简单 Web 应用程序的 Docker 镜像，该镜像使用 GitHub Actions
    部署到 AWS ECS。
- en: The testing that’s involved with this exercise includes **HTML scanning**, **NodeJS
    scanning**, **credential scanning**, and **dependency scanning**. In addition
    to **static application security testing** (**SAST**), the pipeline features the
    use of OWASP ZAProxy, a dynamic application security scanner. Together, these
    quality checks ensure the proper implementation of the **Document Object Model**
    (**DOM**), checking for known vulnerabilities in the code, and actively checking
    for security vulnerabilities in the deployed application in the cloud.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本次练习涉及的测试包括**HTML 扫描**、**NodeJS 扫描**、**凭证扫描**和**依赖扫描**。除了**静态应用程序安全测试**（**SAST**）外，管道还使用了
    OWASP ZAProxy，这是一个动态应用程序安全扫描工具。通过这些质量检查，确保正确实现**文档对象模型**（**DOM**），检查代码中的已知漏洞，并主动检查已部署应用程序在云端的安全漏洞。
- en: The strategy to accomplish this will be broken down into two parts. First, you
    will be shown how to provision the necessary ECS infrastructure. Second, you will
    be shown how to configure the GitHub Actions workflow that is necessary to test,
    build, and then deploy the Docker container to ECS. Together, these two exercises
    will culminate in your successful utilization of the fundamental concepts used
    in contemporary application delivery.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此任务的策略将分为两部分。首先，您将学习如何配置所需的 ECS 基础设施。其次，您将学习如何配置 GitHub Actions 工作流，以便测试、构建并将
    Docker 容器部署到 ECS。通过这两个练习，您将成功掌握当代应用程序交付中使用的基本概念。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要主题：
- en: Examining the pipeline code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查管道代码
- en: Provisioning the AWS infrastructure
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 AWS 基础设施
- en: Configuring the GitHub Actions workflow
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 GitHub Actions 工作流
- en: Before we proceed with the exercises included in this chapter, it is pertinent
    that you review the GitHub Actions workflow file. Understanding a CI/CD pipeline
    at its lowest levels is the only way for you to fully comprehend all of the actions
    that it performs. Having awareness of these intricacies ensures that you gain
    the context needed to guarantee secure and expeditious software releases. This
    will also leave you adequately prepared to communicate each step so that you can
    produce a release to leadership and stakeholders. Simply understanding how a pipeline
    functions at a high level is insufficient for a DevOps release manager.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行本章包含的练习之前，您需要先审查 GitHub Actions 工作流文件。在最底层了解 CI/CD 管道是您完全理解其执行的所有操作的唯一途径。了解这些细节确保您能获得必要的上下文，以保证软件的安全和快速发布。这也使您做好准备，能够向领导和相关方清晰地传达每一步操作。仅仅从高层次理解管道如何运行，对
    DevOps 发布经理来说是不够的。
- en: You can find the entire GitHub Actions workflow file at [https://github.com/PacktPublishing/Embracing-DevOps-Release-Management/blob/main/.github/workflows/aws.yml](https://github.com/PacktPublishing/Embracing-DevOps-Release-Management/blob/main/.github/workflows/aws.yml).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/PacktPublishing/Embracing-DevOps-Release-Management/blob/main/.github/workflows/aws.yml](https://github.com/PacktPublishing/Embracing-DevOps-Release-Management/blob/main/.github/workflows/aws.yml)找到完整的
    GitHub Actions 工作流文件。
- en: 'The following is an abridged version of the GitHub Actions workflow script
    for this chapter’s exercises:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章练习所用的 GitHub Actions 工作流脚本的简化版本：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now that you have had the opportunity to review the pipeline code in this GitHub
    Actions workflow, you have a fundamental awareness of each step involved and what
    work is performed in each one. Let’s proceed with the first set of activities
    required to produce a fully functioning CI/CD pipeline: provisioning the cloud
    infrastructure.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经有机会查看此 GitHub Actions 工作流中的管道代码，并且对每个步骤及其执行的工作有了基本的了解。接下来，让我们开始实现一个完整
    CI/CD 管道所需的第一组活动：配置云基础设施。
- en: Provisioning the AWS infrastructure
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 AWS 基础设施
- en: To ensure that this exercise is approachable for as wide of an audience as possible,
    we will be using ClickOps to provision all of the necessary infrastructure in
    AWS. ClickOps is the term used to describe the process of manually provisioning
    cloud resources using the provider’s native web console. As its name suggests,
    this process involves inputting all the necessary information using a keyboard
    and mouse. ClickOps is widely considered to be an anti-pattern in the world of
    DevOps, primarily because it is drastically more inefficient and prone to errors
    than using **Infrastructure as Code** (**IaC**). However, it is extremely helpful
    for individuals who do not know how to script, write code, or use the command-line
    interface.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保尽可能广泛的受众能够完成本练习，我们将使用 ClickOps 在 AWS 中配置所有必要的基础设施。ClickOps 是指使用提供商的原生 Web
    控制台手动配置云资源的过程。顾名思义，这一过程需要通过键盘和鼠标输入所有必要的信息。ClickOps 被广泛认为是 DevOps 世界中的一种反模式，主要因为它比使用
    **基础设施即代码**（**IaC**）更低效、更容易出错。然而，对于那些不知道如何编写脚本、写代码或使用命令行界面的人来说，它非常有用。
- en: Prerequisites
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前提条件
- en: 'To complete this phase of the guide, you will need to ensure the following
    prerequisites are met:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本指南的这一部分，您需要确保以下前提条件得到满足：
- en: You must possess an active **AWS account** that is in good standing ([https://console.aws.amazon.com/console/home?nc2=h_ct&src=header-signin](https://console.aws.amazon.com/console/home?nc2=h_ct&src=header-signin)).
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须拥有一个有效且状态良好的 **AWS 账户**（[https://console.aws.amazon.com/console/home?nc2=h_ct&src=header-signin](https://console.aws.amazon.com/console/home?nc2=h_ct&src=header-signin)）。
- en: Important
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 重要
- en: Note that by following this guide, you will be charged by **Amazon Web Services**
    (**AWS**) for the resources that you create during the exercise. You will continue
    to be charged until all of the resources have been terminated.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，通过遵循本指南，您将在操作过程中为所创建的资源支付 **Amazon Web Services**（**AWS**）的费用。直到所有资源被终止前，您将继续被收费。
- en: It is strongly advised that you terminate all of these resources after you have
    completed this guide to avoid being billed in the future.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议在完成本指南后终止所有这些资源，以避免未来继续被收费。
- en: 'Your AWS IAM user holds an active set of access keys. To learn more about creating
    IAM access keys, see *Managing access keys for IAM* *users*: [https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的 AWS IAM 用户拥有有效的访问密钥。有关如何创建 IAM 访问密钥的更多信息，请参阅 *管理 IAM 用户的访问密钥*：[https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html)。
- en: 'Your AWS IAM user must be granted the necessary roles that permit it the ability
    to provision ECS, ECR, and VPC resources in AWS. For more information, see *Identity-based
    policy examples for AWS* *ECS*: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security_iam_id-based-policy-examples.html#IAM_cluster_policies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security_iam_id-based-policy-examples.html#IAM_cluster_policies).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的 AWS IAM 用户必须被授予必要的角色，以便能够在 AWS 中配置 ECS、ECR 和 VPC 资源。有关更多信息，请参阅 *基于身份的 AWS
    策略示例* *ECS*：[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security_iam_id-based-policy-examples.html#IAM_cluster_policies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security_iam_id-based-policy-examples.html#IAM_cluster_policies)。
- en: 'The `AmazonEC2ContainerRegistryFullAccess`, `AmazonEC2FullAccess`, and `AmazonECS_FullAccess`
    policies. These are all you’ll need to follow this guide, in addition to being
    an administrative user in your AWS account:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AmazonEC2ContainerRegistryFullAccess`、`AmazonEC2FullAccess` 和 `AmazonECS_FullAccess`
    策略。除了成为 AWS 账户中的管理员用户外，这些就是您在跟随本指南时所需要的全部权限：'
- en: Note
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Granting full access, like we are doing here, is not a best practice for security
    reasons. We are simply making an exception for this demo to make getting through
    it easier for beginners who are unfamiliar with IAM. As a result, it is strongly
    advisable to remove these permissions from your IAM user after this exercise is
    completed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 授予完全访问权限（如我们在这里所做的）由于安全原因并不是最佳实践。我们仅在本次演示中做出例外，以便让不熟悉 IAM 的初学者更容易通过此过程。因此，强烈建议在完成本次操作后，移除
    IAM 用户的这些权限。
- en: '![Figure 7.1: An example of the necessary IAM Pplicies for your AWS user](img/B21803_07_01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1：您的 AWS 用户所需 IAM 策略示例](img/B21803_07_01.jpg)'
- en: 'Figure 7.1: An example of the necessary IAM Pplicies for your AWS user'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1：您的 AWS 用户所需 IAM 策略示例
- en: 'The preceding screenshot depicts the AWS IAM policies that are necessary to
    complete this exercise (mentioned previously). You must add these policies to
    your chosen IAM user. This can be implemented via the **Add permission** menu
    in the AWS console. For assistance with this process, please consult the official
    AWS documentation regarding the management of identity-based policies:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示了完成此练习所需的AWS IAM策略（前面提到过）。您必须将这些策略添加到所选的IAM用户。可以通过AWS控制台中的**添加权限**菜单来实现此操作。有关此过程的帮助，请查阅有关身份管理策略的官方AWS文档：
- en: '[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security_iam_id-based-policy-examples.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security_iam_id-based-policy-examples.html)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security_iam_id-based-policy-examples.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security_iam_id-based-policy-examples.html)'
- en: '[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security_iam_id-based-policy-examples.html#IAM_cluster_policies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security_iam_id-based-policy-examples.html#IAM_cluster_policies)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security_iam_id-based-policy-examples.html#IAM_cluster_policies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security_iam_id-based-policy-examples.html#IAM_cluster_policies)'
- en: Step 1 – fork the repository
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤1 – 分叉仓库
- en: 'Follow these steps to fork the repository:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤分叉仓库：
- en: 'Click on the drop-down arrow in the fork box and choose **Create a new fork**.
    Alternatively, go to [https://github.com/PacktPublishing/Embracing-DevOps-Release-Management/fork](https://github.com/PacktPublishing/Embracing-DevOps-Release-Management/fork):'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击分叉框中的下拉箭头并选择**创建新分叉**。或者，访问[https://github.com/PacktPublishing/Embracing-DevOps-Release-Management/fork](https://github.com/PacktPublishing/Embracing-DevOps-Release-Management/fork)：
- en: '![Figure 7.2: Forking the repository in GitHub](img/B21803_07_02.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2：在GitHub中分叉仓库](img/B21803_07_02.jpg)'
- en: 'Figure 7.2: Forking the repository in GitHub'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2：在GitHub中分叉仓库
- en: '![Figure 7.3: Confirming the new fork of this repository](img/B21803_07_03.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图7.3：确认此仓库的新分叉](img/B21803_07_03.jpg)'
- en: 'Figure 7.3: Confirming the new fork of this repository'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3：确认此仓库的新分叉
- en: On the fork repository page, specify a value for **Owner** and select **Create
    fork**.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在分叉仓库页面上，指定**所有者**值并选择**创建分叉**。
- en: Step 2 – create a default VPC
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤2 – 创建默认VPC
- en: Before we move forward, please note that creating multiple default VPCs in the
    same region is not possible. If you have mistakenly deleted your default VPC,
    creating a new one is possible. However, it is important to note that restoring
    a previously deleted default VPC is not available, nor can you designate a current
    non-default VPC as a default VPC.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请注意，在同一地区内创建多个默认VPC是不可能的。如果您不小心删除了默认VPC，则可以创建一个新的。然而，重要的是要注意，无法恢复先前删除的默认VPC，也无法将当前非默认VPC指定为默认VPC。
- en: 'To establish a default VPC via the AWS console, follow these steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过AWS控制台建立默认VPC，请按照以下步骤操作：
- en: Access the Amazon VPC console by navigating to [https://console.aws.amazon.com/vpc/](https://console.aws.amazon.com/vpc/).
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问[https://console.aws.amazon.com/vpc/](https://console.aws.amazon.com/vpc/)进入Amazon
    VPC控制台。
- en: 'Select **Your VPCs** from the navigation pane:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从导航窗格中选择**您的VPC**：
- en: '![Figure 7.4: Creating a default VPC](img/B21803_07_04.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图7.4：创建默认VPC](img/B21803_07_04.jpg)'
- en: 'Figure 7.4: Creating a default VPC'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4：创建默认VPC
- en: Select **Actions** and then create the default VPC.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**操作**，然后创建默认VPC。
- en: 'Select the **Create default VPC** option. Please close the confirmation message
    afterward:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**创建默认VPC**选项。请在确认信息后关闭该消息：
- en: '![Figure 7.5: Confirming your new default VPC](img/B21803_07_05.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图7.5：确认您的新默认VPC](img/B21803_07_05.jpg)'
- en: 'Figure 7.5: Confirming your new default VPC'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5：确认您的新默认VPC
- en: Step 3 – create an HTTP rule in the default security group
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤3 – 在默认安全组中创建HTTP规则
- en: Whenever a rule is added to a security group, it is automatically applied to
    all resources linked to that group.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 每当向安全组添加规则时，它会自动应用到所有与该组关联的资源。
- en: 'To establish a new security group rule via the AWS console, follow these steps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过AWS控制台建立新的安全组规则，请按照以下步骤操作：
- en: Access the Amazon VPC console by navigating to [https://console.aws.amazon.com/vpc/](https://console.aws.amazon.com/vpc/).
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问[https://console.aws.amazon.com/vpc/](https://console.aws.amazon.com/vpc/)进入Amazon
    VPC控制台。
- en: 'Select **Security groups** from the navigation pane:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从导航窗格中选择**安全组**：
- en: '![Figure 7.6: Accessing the Security groups menu](img/B21803_07_06.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图7.6：访问安全组菜单](img/B21803_07_06.jpg)'
- en: 'Figure 7.6: Accessing the Security groups menu'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6：访问安全组菜单
- en: Select the desired security group.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所需的安全组。
- en: 'Select **Actions**, then **Edit** **inbound rules**:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**操作**，然后选择**编辑** **入站规则**：
- en: '![Figure 7.7: Editing the inbound rules of the default security group](img/B21803_07_07.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图7.7：编辑默认安全组的入站规则](img/B21803_07_07.jpg)'
- en: 'Figure 7.7: Editing the inbound rules of the default security group'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7：编辑默认安全组的入站规则
- en: 'Select **Add rule** and then proceed as follows:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**添加规则**，然后按以下步骤操作：
- en: For **Type**, select the **HTTP** protocol.
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于**类型**，请选择**HTTP**协议。
- en: 'For **Source type** (inbound rules), do the following to allow traffic:'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于**来源类型**（入站规则），请执行以下操作以允许流量：
- en: Select **Anywhere-IPv4** to enable incoming traffic arriving from any IPv4 address
    (inbound rules). After doing this, a rule gets automatically added for the 0.0.0.0/0
    IPv4 CIDR block.
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择**IPv4任何位置**以允许来自任何IPv4地址的传入流量（入站规则）。完成此操作后，将自动为0.0.0.0/0 IPv4 CIDR块添加规则。
- en: 'Please provide a short **Description** of this **Security** **group** rule:'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请提供此**安全组**规则的简短**描述**：
- en: '![Figure 7.8: Adding an HTTP rule to the default security group](img/B21803_07_08.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图7.8：向默认安全组添加HTTP规则](img/B21803_07_08.jpg)'
- en: 'Figure 7.8: Adding an HTTP rule to the default security group'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.8：向默认安全组添加HTTP规则
- en: Select **Save rules**.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**保存规则**。
- en: Step 4 – create an ECR registry
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4步 – 创建一个ECR注册表
- en: 'Begin using Amazon ECR by setting up a repository in the Amazon ECR console.
    The Amazon ECR console provides a step-by-step guide to help you create your initial
    repository. Before starting, please ensure that you have followed all the necessary
    steps outlined in the *Amazon ECR setup* *guide*: [https://docs.aws.amazon.com/AmazonECR/latest/userguide/get-set-up-for-amazon-ecr.html](https://docs.aws.amazon.com/AmazonECR/latest/userguide/get-set-up-for-amazon-ecr.html).'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用Amazon ECR，在Amazon ECR控制台中设置一个仓库。Amazon ECR控制台提供了逐步指南，帮助您创建初始仓库。在开始之前，请确保您已按照*Amazon
    ECR设置指南*中概述的所有必要步骤操作：[https://docs.aws.amazon.com/AmazonECR/latest/userguide/get-set-up-for-amazon-ecr.html](https://docs.aws.amazon.com/AmazonECR/latest/userguide/get-set-up-for-amazon-ecr.html)。
- en: 'To establish an image repository via the AWS console, follow these steps:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过AWS控制台建立镜像仓库，请按照以下步骤操作：
- en: A repository is a storage location for Docker or **Open Container Initiative**
    (**OCI**) images within Amazon ECR. When interacting with Amazon ECR, you need
    to provide the repository and registry location to indicate the destination or
    source of the image.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仓库是Amazon ECR中Docker或**Open Container Initiative** (**OCI**)镜像的存储位置。在与Amazon
    ECR交互时，您需要提供仓库和注册表位置，以指示镜像的目的地或来源。
- en: You can access the Amazon ECR console by navigating to [https://console.aws.amazon.com/ecr/](https://console.aws.amazon.com/ecr/).
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以通过访问[https://console.aws.amazon.com/ecr/](https://console.aws.amazon.com/ecr/)来访问Amazon
    ECR控制台。
- en: 'To ensure that this exercise goes smoothly, it is strongly suggested that you
    choose the **us-east-1** region:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为确保本练习顺利进行，强烈建议您选择**us-east-1**地区：
- en: '![Figure 7.9: Selecting the correct AWS region to operate un](img/B21803_07_09.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图7.9：选择正确的AWS地区以操作un](img/B21803_07_09.jpg)'
- en: 'Figure 7.9: Selecting the correct AWS region to operate un'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9：选择正确的AWS地区以操作un
- en: Select **Get Started**.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**开始**。
- en: Select **Private** under **Visibility settings**.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**可见性设置**下选择**私有**。
- en: To ensure that this exercise goes smoothly, it is strongly suggested that you
    choose `embracing-devops-release-management` as your **Repository** **name** value.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为确保本练习顺利进行，强烈建议您选择`embracing-devops-release-management`作为您的**仓库名称**值。
- en: Important
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Note the 12-digit number shown at the beginning of your ECR repository name.
    This is your AWS account number, and you will need it to complete future steps
    in this guide.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注意显示在ECR仓库名称开头的12位数字。这是您的AWS账户号码，您将需要它来完成本指南中的后续步骤。
- en: 'Alternatively, you can browse your **AWS account page** to obtain your AWS
    account number: [https://console.aws.amazon.com/billing/home?#/account](https://console.aws.amazon.com/billing/home?#/account).'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以浏览您的**AWS账户页面**以获取您的AWS账户号码：[https://console.aws.amazon.com/billing/home?#/account](https://console.aws.amazon.com/billing/home?#/account)。
- en: 'For **Tag immutability**, choose to leave it disabled:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**标记不可变性**，请选择保持禁用状态：
- en: '![Figure 7.10: Establishing an ECR repository (registry)](img/B21803_07_10.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图7.10：建立ECR仓库（注册表）](img/B21803_07_10.jpg)'
- en: 'Figure 7.10: Establishing an ECR repository (registry)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.10：建立ECR仓库（注册表）
- en: Select **Scan on push** to enable the image scanning feature for this repository.
    If an ECR repository has **Scan on push** enabled, it will begin scanning images
    automatically whenever there is a push request; otherwise, users will have to
    manually initiate the scanning process.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**推送时扫描**来启用该仓库的图像扫描功能。如果 ECR 仓库启用了**推送时扫描**，每当有推送请求时，它将自动开始扫描图像；否则，用户必须手动启动扫描过程。
- en: 'For the **KMS encryption** setting, opt to leave it disabled:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**KMS 加密**设置，选择禁用它：
- en: '![Figure 7.11: Finishing the ECR repository creation process](img/B21803_07_11.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.11: 完成 ECR 仓库创建过程](img/B21803_07_11.jpg)'
- en: 'Figure 7.11: Finishing the ECR repository creation process'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '图 7.11: 完成 ECR 仓库创建过程'
- en: Choose **Create repository**.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**创建仓库**。
- en: Step 5 – create an ECS cluster
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第五步 – 创建 ECS 集群
- en: Creating an Amazon ECS cluster can easily be done through the user-friendly
    Amazon ECS console.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过用户友好的 Amazon ECS 控制台，可以轻松创建一个 Amazon ECS 集群。
- en: Make sure that you’ve implemented the prerequisite steps while *setting up Amazon
    ECS* ([https://docs.aws.amazon.com/AmazonECS/latest/developerguide/get-set-up-for-amazon-ecs.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/get-set-up-for-amazon-ecs.html))
    and assigned the correct IAM permission to your chosen IAM user before proceeding.
    For additional details and assistance, refer to the *Cluster Examples* section
    of the documentation ([https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security_iam_id-based-policy-examples.html#IAM_cluster_policies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security_iam_id-based-policy-examples.html#IAM_cluster_policies)).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续操作之前，确保你已经完成了*设置 Amazon ECS*的前提步骤（[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/get-set-up-for-amazon-ecs.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/get-set-up-for-amazon-ecs.html)），并为所选的
    IAM 用户分配了正确的 IAM 权限。更多详细信息和帮助，请参考文档中的*集群示例*部分（[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security_iam_id-based-policy-examples.html#IAM_cluster_policies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security_iam_id-based-policy-examples.html#IAM_cluster_policies)）。
- en: The Amazon ECS console offers a straightforward method for generating the necessary
    resources for an Amazon ECS cluster through the creation of an AWS CloudFormation
    stack.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon ECS 控制台通过创建 AWS CloudFormation 堆栈，提供了一种简便的方法来生成 Amazon ECS 集群所需的资源。
- en: 'To establish an ECS Cluster via the AWS console, follow these steps:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过 AWS 控制台建立 ECS 集群，请按照以下步骤操作：
- en: Access the Amazon ECS console by navigating to [https://console.aws.amazon.com/ecs/v2](https://console.aws.amazon.com/ecs/v2).
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问 [https://console.aws.amazon.com/ecs/v2](https://console.aws.amazon.com/ecs/v2)
    来进入 Amazon ECS 控制台。
- en: To ensure that this exercise goes smoothly, it is strongly suggested that you
    choose the **us-east-1** region.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为确保本次操作顺利进行，强烈建议选择**us-east-1**区域。
- en: Select **Clusters** from the navigation pane.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从导航窗格选择**集群**。
- en: 'Select **Create cluster** from the **Clusters** page:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**集群**页面选择**创建集群**：
- en: '![Figure 7.12: Establishing an ECS cluster](img/B21803_07_12.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.12: 建立 ECS 集群](img/B21803_07_12.jpg)'
- en: 'Figure 7.12: Establishing an ECS cluster'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '图 7.12: 建立 ECS 集群'
- en: Within the `embracing-devops-release-management` as your cluster name so that
    this exercise goes smoothly.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `embracing-devops-release-management` 作为集群名称，以确保此次操作顺利进行。
- en: 'Expand **Infrastructure**, then select **AWS** **Fargate (serverless)**:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**基础设施**，然后选择**AWS** **Fargate（无服务器）**：
- en: '![Figure 7.13: Configuring your ECS cluster as AWS Fargate (serverless)](img/B21803_07_13.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.13: 将 ECS 集群配置为 AWS Fargate（无服务器）](img/B21803_07_13.jpg)'
- en: 'Figure 7.13: Configuring your ECS cluster as AWS Fargate (serverless)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '图 7.13: 将 ECS 集群配置为 AWS Fargate（无服务器）'
- en: Expand **Monitoring**, and then toggle **Use Container Insights** on to enable
    Container Insights.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**监控**，然后切换**启用容器洞察**来启用容器洞察。
- en: Expand **Tags** and then configure your tags to assist with identifying your
    cluster.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**标签**，然后配置标签以帮助识别你的集群。
- en: 'To add a tag, select **Add tag** and do the following:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加标签，选择**添加标签**并执行以下操作：
- en: Input the key name in the **Key** field
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**密钥**字段中输入密钥名称
- en: Input the value name in the **Value** field
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**值**字段中输入值名称
- en: 'To remove a tag, select **Remove** to the right of the tag’s key and value:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要删除标签，选择标签键和值右侧的**删除**：
- en: '![Figure 7.14: Tagging the ECS cluster infrastructure](img/B21803_07_14.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.14: 对 ECS 集群基础设施进行标签标记](img/B21803_07_14.jpg)'
- en: 'Figure 7.14: Tagging the ECS cluster infrastructure'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '图 7.14: 对 ECS 集群基础设施进行标签标记'
- en: Select **Create**.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**创建**。
- en: Step 6 – create an ECS task definition
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第六步 – 创建 ECS 任务定义
- en: You can create a task definition by using the console or by editing a JSON file.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过控制台或编辑 JSON 文件来创建任务定义。
- en: 'To establish a task definition via the AWS console JSON editor, follow these
    steps:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过 AWS 控制台 JSON 编辑器建立任务定义，请按照以下步骤操作：
- en: 'To ensure that this exercise goes smoothly, it is strongly suggested that you
    choose the **us-east-1** region:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为确保此操作顺利进行，强烈建议你选择**us-east-1**区域：
- en: '![Figure 7.15: Selecting the correct AWS region to operate in](img/B21803_07_15.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.15：选择正确的 AWS 区域进行操作](img/B21803_07_15.jpg)'
- en: 'Figure 7.15: Selecting the correct AWS region to operate in'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.15：选择正确的 AWS 区域进行操作
- en: 'First, edit the `ECS Task Definition` file in your forked repository:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在你 fork 的仓库中编辑 `ECS 任务定义` 文件：
- en: From GitHub, click on the `task-definition.json` file within this book’s repository
    ([https://github.com/PacktPublishing/Embracing-DevOps-Release-Management/blob/main/chapter07/task-definition.json](https://github.com/PacktPublishing/Embracing-DevOps-Release-Management/blob/main/chapter07/task-definition.json)).
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GitHub 上，点击此书仓库中的 `task-definition.json` 文件（[https://github.com/PacktPublishing/Embracing-DevOps-Release-Management/blob/main/chapter07/task-definition.json](https://github.com/PacktPublishing/Embracing-DevOps-Release-Management/blob/main/chapter07/task-definition.json)）。
- en: 'From the `task-definition.json` file page, click on the pencil icon to edit
    the file:'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `task-definition.json` 文件页面，点击铅笔图标以编辑文件：
- en: '![Figure 7.16: Editing the ECS task definition in the GitHub text editor](img/B21803_07_16.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.16：在 GitHub 文本编辑器中编辑 ECS 任务定义](img/B21803_07_16.jpg)'
- en: 'Figure 7.16: Editing the ECS task definition in the GitHub text editor'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.16：在 GitHub 文本编辑器中编辑 ECS 任务定义
- en: 'Locate the two placeholders for your AWS account ID, which is represented as
    a string of 12 consecutive “X” characters:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到表示你 AWS 账户 ID 的两个占位符，它由 12 个连续的“X”字符组成：
- en: '![Figure 7.17: Locating the AWS ID number placeholders](img/B21803_07_17.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.17：定位到 AWS ID 占位符](img/B21803_07_17.jpg)'
- en: 'Figure 7.17: Locating the AWS ID number placeholders'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.17：定位到 AWS ID 占位符
- en: 'Replace the two placeholders for your AWS account ID with your actual AWS account
    ID and select **Commit changes**:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用你实际的 AWS 账户 ID 替换两个占位符，并选择**提交更改**：
- en: Note
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can browse your **AWS account page** to obtain your AWS account number:
    https://console.aws.amazon.com/billing/home?#/account.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以浏览你的**AWS 账户页面**以获取 AWS 账户号码： https://console.aws.amazon.com/billing/home?#/account。
- en: '![Figure 7.18: Replacing the placeholders with your AWS ID number](img/B21803_07_18.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.18：用你的 AWS ID 替换占位符](img/B21803_07_18.jpg)'
- en: 'Figure 7.18: Replacing the placeholders with your AWS ID number'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.18：用你的 AWS ID 替换占位符
- en: 'Within the commit confirmation menu, add a meaningful commit message and select
    **Commit directly to the** **main branch**:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提交确认菜单中，添加有意义的提交信息，并选择**直接提交到** **主分支**：
- en: '![Figure 7.19: Committing your changes in the GitHub text editor](img/B21803_07_19.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.19：在 GitHub 文本编辑器中提交你的更改](img/B21803_07_19.jpg)'
- en: 'Figure 7.19: Committing your changes in the GitHub text editor'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.19：在 GitHub 文本编辑器中提交你的更改
- en: Then, choose **Commit changes**.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择**提交更改**。
- en: Access the Amazon ECS console by navigating to [https://console.aws.amazon.com/ecs/v2](https://console.aws.amazon.com/ecs/v2).
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问 [https://console.aws.amazon.com/ecs/v2](https://console.aws.amazon.com/ecs/v2)
    进入 Amazon ECS 控制台。
- en: Select **Task definitions** from the navigation pane.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从导航窗格中选择**任务定义**。
- en: 'Select **Create new task definition with JSON** from the menu on the **Create
    new task** **definition** page:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**创建新任务** **定义**页面的菜单中选择**使用 JSON 创建新任务定义**：
- en: '![Figure 7.20: Creating a new task definition with JSON](img/B21803_07_20.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.20：使用 JSON 创建新任务定义](img/B21803_07_20.jpg)'
- en: 'Figure 7.20: Creating a new task definition with JSON'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.20：使用 JSON 创建新任务定义
- en: Modify your JSON file in the JSON editor window.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 JSON 编辑器窗口中修改你的 JSON 文件。
- en: 'Copy the `task-definition.json` file from the repository that you edited earlier
    and paste it into the JSON editor box:'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 复制之前编辑的 `task-definition.json` 文件，并将其粘贴到 JSON 编辑器框中：
- en: '![Figure 7.21: Copying the task-definition.json file that you edited earlier](img/B21803_07_21.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.21：复制你之前编辑的 task-definition.json 文件](img/B21803_07_21.jpg)'
- en: 'Figure 7.21: Copying the task-definition.json file that you edited earlier'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.21：复制你之前编辑的 task-definition.json 文件
- en: Note
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If there is content in the JSON editor box before you paste your customized
    `task-definition.json` file into it, ensure that it is removed first. The JSON
    editor box must be empty before adding your `task-definition.json` file’s contents
    to it.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果JSON编辑器框中已有内容，在粘贴自定义的`task-definition.json`文件之前，请确保先将其删除。JSON编辑器框必须为空，才能将`task-definition.json`文件的内容添加进去。
- en: '![Figure 7.22: Confirming and creating the ECS task definition](img/B21803_07_22.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图7.22：确认并创建ECS任务定义](img/B21803_07_22.jpg)'
- en: 'Figure 7.22: Confirming and creating the ECS task definition'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.22：确认并创建ECS任务定义
- en: Select **Create**.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**创建**。
- en: Step 7 – create an ECS service
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第7步 – 创建ECS服务
- en: The console enables rapid creation and deployment of a service.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台支持快速创建和部署服务。
- en: 'To establish an ECS service via the AWS console, follow these steps:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 通过AWS控制台建立ECS服务，请按照以下步骤操作：
- en: 'To ensure that this exercise goes smoothly, it is strongly suggested that you
    choose the **us-east-1** region:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为确保本练习顺利进行，强烈建议选择**us-east-1**区域：
- en: '![Figure 7.23: Selecting the correct AWS region to operate in](img/B21803_07_23.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图7.23：选择正确的AWS区域进行操作](img/B21803_07_23.jpg)'
- en: 'Figure 7.23: Selecting the correct AWS region to operate in'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.23：选择正确的AWS区域进行操作
- en: Access the Amazon ECS console by navigating to [https://console.aws.amazon.com/ecs/v2](https://console.aws.amazon.com/ecs/v2).
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问[https://console.aws.amazon.com/ecs/v2](https://console.aws.amazon.com/ecs/v2)，进入Amazon
    ECS控制台。
- en: Select **Clusters** from the navigation pane.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从导航窗格中选择**集群**。
- en: On the **Clusters** page, select the cluster that you would like to create a
    service in.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**集群**页面，选择要在其中创建服务的集群。
- en: 'Select the **Create** option from the **Services** tab:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**服务**选项卡中选择**创建**选项：
- en: '![Figure 7.24: Creating a new ECS service for your ECS task](img/B21803_07_24.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图7.24：为ECS任务创建新ECS服务](img/B21803_07_24.jpg)'
- en: 'Figure 7.24: Creating a new ECS service for your ECS task'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.24：为ECS任务创建新ECS服务
- en: 'Provide details about your application’s deployment in the **Deployment** **configuration**
    section:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**部署配置**部分提供关于应用程序部署的详细信息：
- en: '![Figure 7.25: Configuring your new ECS service’s launch type](img/B21803_07_25.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图7.25：配置新ECS服务的启动类型](img/B21803_07_25.jpg)'
- en: 'Figure 7.25: Configuring your new ECS service’s launch type'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.25：配置新ECS服务的启动类型
- en: Under **Compute options**, select **Launch type**.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**计算选项**下，选择**启动类型**。
- en: 'Select **Service** under **Application type**:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**应用类型**下选择**服务**：
- en: '![Figure 7.26: Naming and configuring the ECS service](img/B21803_07_26.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图7.26：命名和配置ECS服务](img/B21803_07_26.jpg)'
- en: 'Figure 7.26: Naming and configuring the ECS service'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.26：命名和配置ECS服务
- en: Within the **Task definition** area, select the version and family that you
    wish to apply.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**任务定义**区域，选择您希望应用的版本和系列。
- en: To ensure that this exercise goes smoothly, it is strongly suggested that you
    choose `embracing-devops-release-management` under **Service name**.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为确保本练习顺利进行，强烈建议在**服务名称**下选择`embracing-devops-release-management`。
- en: To specify your **Desired tasks**, input the number of tasks to be initiated
    and managed within the service.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要指定**期望任务**，输入要在服务中启动和管理的任务数量。
- en: 'For **Networking**, the default VPC and its associated networking should automatically
    populate within the fields. However, ensure that the configuration is configured
    similar to the following:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**网络**，默认的VPC及其关联的网络配置应自动填充到字段中。然而，确保配置与以下内容相似：
- en: '![Figure 7.27: Selecting the default VPC for networking – Public IP!](img/B21803_07_27.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图7.27：选择默认VPC进行网络配置 – 公共IP！](img/B21803_07_27.jpg)'
- en: 'Figure 7.27: Selecting the default VPC for networking – Public IP!'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.27：选择默认VPC进行网络配置 – 公共IP！
- en: Tagging resources is a great way to locate cloud infrastructure after you’ve
    provisioned it. This is particularly useful after you have created hundreds or
    thousands of resources.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为资源打标签是定位云基础设施的好方法，特别是在创建了数百或数千个资源之后，打标签特别有用。
- en: To add tags to your ECS service, expand **Tags** and then configure your tags
    to assist with identifying your service and tasks.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要为ECS服务添加标签，展开**标签**，然后配置标签以帮助识别服务和任务。
- en: 'To add a tag, select **Add tag** and then do the following:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加标签，选择**添加标签**，然后执行以下操作：
- en: Input the key name in the **Key** field
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**密钥**字段中输入密钥名称。
- en: Input the value name in the **Value** field
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**值**字段中输入值名称。
- en: To remove a tag, select the **Remove** option to the right of the tag’s key
    and value.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要移除标签，选择标签键值对右侧的**移除**选项。
- en: Select **Create**.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**创建**。
- en: This concludes the first portion of this guide, *Provisioning the AWS infrastructure*.
    In this section, you have provisioned the infrastructure that is necessary to
    support the CICD pipeline operations that are outlined in the second portion of
    this guide, *Configure the GitHub* *Actions Workflow*.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着本指南的第一部分——*AWS基础设施的配置*——的结束。在这一部分中，你已配置了支持第二部分指南中概述的CICD流水线操作所需的基础设施，即*配置GitHub*
    *Actions工作流*。
- en: 'Let’s briefly review what you’ve accomplished so far:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要回顾一下你迄今为止的成就：
- en: You’ve ensured that your AWS IAM user has the necessary permissions assigned
    so that it can provision the required cloud resources within your AWS account.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经确保你的AWS IAM用户已分配必要的权限，以便能够在你的AWS账户内配置所需的云资源。
- en: You’ve ensured that your AWS account is equipped with a default VPC and associated
    default networking resources.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经确保你的AWS账户配备了默认VPC及相关的默认网络资源。
- en: You’ve modified the *default security group* within your default VPC so that
    it includes an HTTP rule. This is required to allow users to browse your web app
    on port 80, which we will be deploying in the second portion of this guide.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经修改了默认VPC中的*默认安全组*，以便它包含一个HTTP规则。这是为了允许用户通过80端口访问你的网页应用，我们将在本指南的第二部分进行部署。
- en: You’ve created the necessary *ECS registry* to store Docker images being produced
    by your GitHub workflow. We will configure this in the next section of this guide.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经创建了必要的*ECS注册表*，用于存储由GitHub工作流生成的Docker镜像。我们将在本指南的下一部分进行配置。
- en: You’ve created the necessary *ECS cluster* that will host the Docker containers
    being produced and deployed by your GitHub actions workflow. We will configure
    this in the next section of this guide.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经创建了必要的*ECS集群*，用于托管由GitHub Actions工作流生成并部署的Docker容器。我们将在本指南的下一部分进行配置。
- en: You’ve created the necessary *ECS task definition* that will manage the operational
    activity of your web app deployment. This ensures that the web app deployment
    is running with all of the appropriate configurations and operates with resiliency
    in the face of unexpected system issues.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经创建了必要的*ECS任务定义*，它将管理你的网页应用部署的操作活动。这确保了网页应用部署在所有适当配置下运行，并能在遇到意外的系统问题时保持弹性。
- en: You’ve created the necessary *ECS service* that is associated with your configured
    ECS task definition. This is required to ensure that the required networking infrastructure
    is set up so that users can browse your web app running in ECS, from their local
    web browser.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经创建了与配置的ECS任务定义关联的必要*ECS服务*。这是为了确保所需的网络基础设施已经搭建好，以便用户能够从本地网页浏览器访问在ECS中运行的网页应用。
- en: In the next portion of this guide, *Configuring the GitHub Actions workflow*,
    you will be shown how to configure a GitHub Actions workflow. In this second exercise,
    you will enable the necessary backend settings, learn how to configure input parameters
    and inject secrets into the build process, and understand how to initiate a pipeline
    run and analyze the build logs. Finally, you will be shown how to access the web
    application that you deployed into ECS, verifying its existence.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本指南的下一部分——*配置GitHub Actions工作流*——你将学习如何配置GitHub Actions工作流。在这一部分中，你将启用必要的后端设置，学习如何配置输入参数并将秘密信息注入构建过程中，了解如何启动流水线运行并分析构建日志。最后，你将学习如何访问部署到ECS中的网页应用，并验证它的存在。
- en: Configuring the GitHub Actions workflow
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置GitHub Actions工作流
- en: Several configurations will need to be made if you wish to successfully run
    the GitHub Actions workflow and achieve a successful deployment. Primarily among
    these are input parameters, which take the form of variables and secrets. Notably,
    secrets function almost identically to variables, except they are masked in the
    logs and visible to no one, once they have been configured in the repository settings.
    Once you can successfully initiate a pipeline run, examine the logging output
    to verify any issues, failures, and successes. Finally, you will be able to observe
    the functioning web application running in AWS EC2.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果希望成功运行 GitHub Actions 工作流并实现成功的部署，则需要进行多个配置。主要的配置项是输入参数，它们以变量和密钥的形式存在。值得注意的是，密钥与变量几乎完全相同，唯一的区别是，密钥在日志中会被掩码，且配置完毕后不会对任何人可见。成功启动流水线运行后，您可以查看日志输出，验证任何问题、失败和成功。最后，您将能够看到在
    AWS EC2 中运行的功能性 Web 应用程序。
- en: Prerequisites
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: To complete this phase of the guide, you will need to ensure you have an active
    *GitHub account* ([https://github.com/](https://github.com/)) that is in good
    standing.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本阶段的指南，您需要确保拥有一个有效的 *GitHub 账户*（[https://github.com/](https://github.com/)），并且账户状态良好。
- en: Step 1 – configure the necessary GitHub repository variables and secrets
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 1 – 配置所需的 GitHub 仓库变量和密钥
- en: Configuring the backend for GitHub Actions is a simple process, but it does
    help to know what to look for. In this step, you will enable GitHub Issues for
    this repository, which allows the pipeline to raise an issue automatically if
    one is flagged during a build. Crucially, we will also be configuring pipeline
    variables and secrets so that they can be injected into the pipeline during a
    run. This is a standard technique in DevOps, allowing the same CI/CD pipeline
    script to be run in multiple environments with settings unique to each use case,
    including yours!
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 GitHub Actions 后端是一个简单的过程，但了解需要关注的内容会有所帮助。在此步骤中，您将为此仓库启用 GitHub Issues，这样如果在构建过程中标记到问题，流水线可以自动提出问题。关键的是，我们还将配置流水线变量和密钥，以便在运行过程中可以将其注入到流水线中。这是
    DevOps 中的标准技术，允许相同的 CI/CD 流水线脚本在多个环境中运行，并根据每个用例的独特设置进行配置，包括您的！
- en: 'To establish the necessary GitHub repository variables and secrets, follow
    these steps:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 为了建立所需的 GitHub 仓库变量和密钥，请按照以下步骤操作：
- en: 'In GitHub, navigate to the `embracing-devops-release-management` repository:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GitHub 中，导航到 `embracing-devops-release-management` 仓库：
- en: '![Figure 7.28: Navigating to the Settings menu in your forked repository](img/B21803_07_28.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.28：导航到您分叉仓库中的设置菜单](img/B21803_07_28.jpg)'
- en: 'Figure 7.28: Navigating to the Settings menu in your forked repository'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.28：导航到您分叉仓库中的设置菜单
- en: 'Enable GitHub **Issues** for this repository:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此仓库启用 GitHub **Issues**：
- en: '![Figure 7.29: Enabling GitHub Issues for your forked repository](img/B21803_07_29.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.29：为您的分叉仓库启用 GitHub Issues](img/B21803_07_29.jpg)'
- en: 'Figure 7.29: Enabling GitHub Issues for your forked repository'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.29：为您的分叉仓库启用 GitHub Issues
- en: 'In the **Security** section of the repository menu, navigate to the **Secrets
    and** **variables** option:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仓库菜单的 **Security** 部分，导航到 **Secrets and** **variables** 选项：
- en: '![Figure 7.30: Accessing the Secrets and variables option for Actions](img/B21803_07_30.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.30：访问 GitHub Actions 的密钥和变量选项](img/B21803_07_30.jpg)'
- en: 'Figure 7.30: Accessing the Secrets and variables option for Actions'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.30：访问 GitHub Actions 的密钥和变量选项
- en: Then, select **Actions**.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择 **Actions**。
- en: In the **Actions secrets and variables** menu, choose the **Secrets** tab.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Actions 密钥和变量** 菜单中，选择 **Secrets** 标签。
- en: 'Then, select **New** **repository secret**:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择 **新建** **仓库密钥**：
- en: '![Figure 7.31: Adding secrets to your GitHub Actions repository](img/B21803_07_31.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.31：向 GitHub Actions 仓库添加密钥](img/B21803_07_31.jpg)'
- en: 'Figure 7.31: Adding secrets to your GitHub Actions repository'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.31：向 GitHub Actions 仓库添加密钥
- en: You will need to provide the GitHub Actions workflow permission to provision
    resources in your AWS account. To do this, you will need to provide AWS access
    keys so that AWS CLI operations can be run within the pipeline.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要为 GitHub Actions 工作流提供在您的 AWS 账户中配置资源的权限。为此，您需要提供 AWS 访问密钥，以便在流水线中运行 AWS
    CLI 操作。
- en: 'Create a new repository secret for your AWS access key ID and then follow these
    steps:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的 AWS 访问密钥 ID 创建一个新的仓库密钥，然后按照以下步骤操作：
- en: In the `AWS_ACCESS_KEY_ID`.
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `AWS_ACCESS_KEY_ID` 中。
- en: In the **Secret** field, enter the value for your AWS access key ID.
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Secret** 字段中，输入您的 AWS 访问密钥 ID 的值。
- en: 'Choose **Add secret**:'
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **添加密钥**：
- en: Note
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: A secret is an environment variable you establish in a repository, organization,
    or environment. With GitHub Actions, you can integrate the secrets you provide
    into your workflows. If you deliberately include a secret in a workflow, then
    GitHub Actions will be able to read the secret during a pipeline run.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥是你在仓库、组织或环境中设置的环境变量。通过GitHub Actions，你可以将你提供的密钥集成到你的工作流中。如果你故意在工作流中包含密钥，那么GitHub
    Actions将在管道运行过程中读取该密钥。
- en: '![Figure 7.32: Adding your AWS access key ID as a pipeline secret](img/B21803_07_32.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.32：将AWS访问密钥ID添加为管道密钥](img/B21803_07_32.jpg)'
- en: 'Figure 7.32: Adding your AWS access key ID as a pipeline secret'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.32：将AWS访问密钥ID添加为管道密钥
- en: Warning
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: GitHub will automatically redact any mention of secrets from any logs that may
    have been generated by a job. It is advisable to refrain from intentionally publishing
    secrets to the log.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub会自动从作业生成的任何日志中删除对密钥的任何提及。建议不要故意将密钥发布到日志中。
- en: 'Create a new repository secret for your AWS secret access key ID:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的AWS秘密访问密钥ID创建一个新的仓库密钥：
- en: In the `AWS_SECRET_ACCESS_KEY`.
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AWS_SECRET_ACCESS_KEY`中。
- en: In the **Secret** field, enter the value for your AWS secret access key.
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Secret**字段中，输入你的AWS秘密访问密钥的值。
- en: 'Choose **Add secret**:'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**添加密钥**：
- en: '![Figure 7.33: Adding your AWS secret access key as a pipeline secret](img/B21803_07_33.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.33：将AWS秘密访问密钥添加为管道密钥](img/B21803_07_33.jpg)'
- en: 'Figure 7.33: Adding your AWS secret access key as a pipeline secret'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.33：将AWS秘密访问密钥添加为管道密钥
- en: In the **Actions secrets and variables** menu, select the **Variables** tab.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Actions密钥和变量**菜单中，选择**变量**标签。
- en: 'Then, select **New** **repository variable**:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择**新建** **仓库变量**：
- en: '![Figure 7.34: Adding variables to your GitHub Actions repository](img/B21803_07_34.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.34：向GitHub Actions仓库添加变量](img/B21803_07_34.jpg)'
- en: 'Figure 7.34: Adding variables to your GitHub Actions repository'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.34：向GitHub Actions仓库添加变量
- en: Create a new repository variable for your `ECR_REGISTRY`.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的`ECR_REGISTRY`创建一个新的仓库变量。
- en: In the `XXXXXXXXXXXX.dkr.ecr.us-east-1.amazonaws.com` as your ECR repository
    address.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`XXXXXXXXXXXX.dkr.ecr.us-east-1.amazonaws.com`中作为你的ECR仓库地址。
- en: Note
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Don’t forget to use your own AWS account ID in the full ECR repository address
    when entering it into the text box.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了在输入文本框时，使用你自己的AWS账户ID，填入完整的ECR仓库地址。
- en: One technique to store and reuse configuration information that isn’t sensitive
    is through variables. Variables are a great way to save configuration information
    such as compiler flags, usernames, and server names. The runner that executes
    your workflow is responsible for interpolating variables and they can be created,
    read, and modified by commands that run in actions or workflow phases.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 存储和重用非敏感配置信息的一种技术是通过变量。变量是保存配置信息的好方法，例如编译器标志、用户名和服务器名称。执行你工作流的runner负责插入变量，这些变量可以在操作或工作流阶段的命令中创建、读取和修改。
- en: 'Choose **Add variable**:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**添加变量**：
- en: '![Figure 7.35: An example of filling in a GitHub Actions repository variable](img/B21803_07_35.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.35：填写GitHub Actions仓库变量的示例](img/B21803_07_35.jpg)'
- en: 'Figure 7.35: An example of filling in a GitHub Actions repository variable'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.35：填写GitHub Actions仓库变量的示例
- en: Warning
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: By default, variables render unmasked in your build outputs. If you need greater
    security for sensitive information, such as passwords, use secrets instead.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，变量会在构建输出中显示未掩码的内容。如果你需要对敏感信息（如密码）进行更高的安全保护，请使用密钥。
- en: Enter the remaining necessary repository variables for the pipeline to operate
    successfully.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入管道成功运行所需的其他仓库变量。
- en: 'Repeat the process mentioned in *Step 11* until all remaining repository variables
    have been added:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复*步骤 11*中提到的过程，直到所有剩余的仓库变量都已添加：
- en: '![Figure 7.36: An illustration of all the necessary pipeline variables](img/B21803_07_36.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.36：所有必要的管道变量示意图](img/B21803_07_36.jpg)'
- en: 'Figure 7.36: An illustration of all the necessary pipeline variables'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.36：所有必要的管道变量示意图
- en: 'The following table contains all of the required *variable* names and their
    *suggested values*:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格包含所有必需的*变量*名称及其*建议值*：
- en: '| **Variable Name** | **Variable Value** |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| **变量名称** | **变量值** |'
- en: '| **ECR_REGISTRY** | `XXXXXXXXXXXX.dkr.ecr.us-east-1.amazonaws.com` |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| **ECR_REGISTRY** | `XXXXXXXXXXXX.dkr.ecr.us-east-1.amazonaws.com` |'
- en: '| **MY_AWS_REGION** | `us-east-1` |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| **MY_AWS_REGION** | `us-east-1` |'
- en: '| **MY_CONTAINER_NAME** | `embracing-devops-release-management` |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| **MY_CONTAINER_NAME** | `embracing-devops-release-management` |'
- en: '| **MY_ECR_REPOSITORY** | `embracing-devops-release-management` |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| **MY_ECR_REPOSITORY** | `embracing-devops-release-management` |'
- en: '| **MY_ECS_CLUSTER** | `embracing-devops-release-management` |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| **MY_ECS_CLUSTER** | `embracing-devops-release-management` |'
- en: '| **MY_ECS_SERVICE** | `embracing-devops-release-management` |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| **MY_ECS_SERVICE** | `embracing-devops-release-management` |'
- en: '| **MY_ECS_TASK_DEFINITION** | `./``chapter07/task-definition.json` |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| **MY_ECS_TASK_DEFINITION** | `./``chapter07/task-definition.json` |'
- en: 'Table 7.1: A handy chart containing all of the necessary variables'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7.1：一个包含所有必要变量的实用图表
- en: Note
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Ensure that `./` is appended to the beginning of the value that’s been set for
    MY`_ECS_TASK_DEFINITION`. This is a necessary filesystem path and it is a valid
    syntax that’s required for GitHub Actions to pick up the `task-definition.json`
    file and use it in the pipeline.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在为 MY`_ECS_TASK_DEFINITION` 设置的值前面加上 `./`。这是一个必要的文件系统路径，是 GitHub Actions 获取
    `task-definition.json` 文件并在管道中使用它所需的有效语法。
- en: Step 2 – kick off a GitHub Actions workflow
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 2 – 启动 GitHub Actions 工作流
- en: 'It is finally time to execute the pipeline. This is where the rubber meets
    the road and we accomplish what we have set out to do. Proceed with the following
    steps to initiate the GitHub Actions workflow and deploy your Docker container
    to ECS:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 终于到了执行管道的时候。这是关键时刻，我们将完成我们设定的目标。按照以下步骤来启动 GitHub Actions 工作流并将你的 Docker 容器部署到
    ECS：
- en: 'Navigate to the GitHub **Actions** menu:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 GitHub **Actions** 菜单：
- en: '![Figure 7.37: Accessing the GitHub Actions menu](img/B21803_07_37.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.37：访问 GitHub Actions 菜单](img/B21803_07_37.jpg)'
- en: 'Figure 7.37: Accessing the GitHub Actions menu'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.37：访问 GitHub Actions 菜单
- en: 'Select **I understand my workflows, go ahead and** **enable them**:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **I understand my workflows, go ahead and** **enable them**：
- en: '![Figure 7.38: Enabling GitHub Actions for usage](img/B21803_07_38.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.38：启用 GitHub Actions 使用权限](img/B21803_07_38.jpg)'
- en: 'Figure 7.38: Enabling GitHub Actions for usage'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.38：启用 GitHub Actions 使用权限
- en: 'From the **All workflows** menu, under **Actions**, choose the workflow for
    this exercise and **Deploy to** **Amazon ECS**:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **All workflows** 菜单中，在 **Actions** 下选择本次练习的工作流，并选择 **Deploy to** **Amazon
    ECS**：
- en: '![Figure 7.39: Navigating to the Deploy to Amazon ECS workflow menu](img/B21803_07_39.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.39：导航到 Deploy to Amazon ECS 工作流菜单](img/B21803_07_39.jpg)'
- en: 'Figure 7.39: Navigating to the Deploy to Amazon ECS workflow menu'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.39：导航到 Deploy to Amazon ECS 工作流菜单
- en: 'In the **Deploy to Amazon ECS** workflow menu, choose **Run workflow**, then
    select **Run workflow**:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Deploy to Amazon ECS** 工作流菜单中，选择 **Run workflow**，然后点击 **Run workflow**：
- en: '![Figure 7.40: Initiating a GitHub Actions workflow run](img/B21803_07_40.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.40：启动 GitHub Actions 工作流运行](img/B21803_07_40.jpg)'
- en: 'Figure 7.40: Initiating a GitHub Actions workflow run'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.40：启动 GitHub Actions 工作流运行
- en: The preceding screenshot shows the main menu for the `Deploy to Amazon ECS`
    GitHub Actions workflow that you have configured, built, and deployed throughout
    this exercise. This is where you can initiate new workflow runs and find a history
    of current and previous workflow runs.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的截图展示了你在本次练习中配置、构建并部署的 `Deploy to Amazon ECS` GitHub Actions 工作流的主菜单。在这里，你可以启动新的工作流运行，并查看当前和之前的工作流运行历史。
- en: 'After the pipeline run has been initiated, a new entry will be added to the
    build history for this GitHub Actions workflow. While the workflow is running,
    a yellow indicator will appear to the left of the entry in the build history.
    Upon completing the pipeline, the yellow indicator will transition to red for
    a failing build, or green for a passing build:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在管道运行启动后，会在该 GitHub Actions 工作流的构建历史中新增一条记录。当工作流运行时，构建历史中该条记录左侧会显示黄色指示器。管道完成后，如果构建失败，黄色指示器会变为红色；如果构建成功，则变为绿色：
- en: '![Figure 7.41: A GitHub Actions workflow actively running](img/B21803_07_41.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.41：一个正在运行的 GitHub Actions 工作流](img/B21803_07_41.jpg)'
- en: 'Figure 7.41: A GitHub Actions workflow actively running'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.41：一个正在运行的 GitHub Actions 工作流
- en: Step 3 – analyze deployment logs
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 3 – 分析部署日志
- en: In this step, we will scrutinize the build logs from the GitHub Actions workflow
    that was run in the previous step. There are three prominent phases in this pipeline.
    The first phase features static code analysis testing. The second phase includes
    building the web app into the Docker image. Finally, the last phase features dynamic
    application security testing to evaluate the container after it has been deployed
    to ECS. All these activities will be recorded in the GitHub Actions build logs
    after completion.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，我们将仔细审查在上一步骤中运行的GitHub Actions工作流的构建日志。此管道中有三个主要阶段。第一阶段进行静态代码分析测试。第二阶段将Web应用程序构建成Docker镜像。最后，最后阶段进行动态应用安全测试，以评估部署到ECS后的容器。所有这些活动将在完成后记录在GitHub
    Actions构建日志中。
- en: Once the GitHub Actions workflow has been initiated, click on the pipeline phases
    to observe the logs for failures, issues, and successes!
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦GitHub Actions工作流启动，点击管道阶段以查看失败、问题和成功的日志！
- en: '![Figure 7.42: The detailed menu of a single workflow in the build history
    area](img/B21803_07_42.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.42：构建历史区域中单个工作流的详细菜单](img/B21803_07_42.jpg)'
- en: 'Figure 7.42: The detailed menu of a single workflow in the build history area'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.42：构建历史区域中单个工作流的详细菜单
- en: 'As shown in the following screenshot, the pipeline has been divided into two
    primary phases, **Test** and **Build & Deploy**. However, it should be noted that,
    within the **Build & Deploy** phase of the pipeline, a dynamic application security
    test occurs after the deployment has been completed and before the end of the
    pipeline phase. You can access the details and history for each of these individual
    phases to observe the build logs that are associated with each phase:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，管道已分为两个主要阶段：**测试**和**构建与部署**。然而，需要注意的是，在管道的**构建与部署**阶段，在部署完成后和管道阶段结束之前，会进行动态应用安全测试。你可以访问每个阶段的详细信息和历史记录，以查看与每个阶段相关的构建日志：
- en: '![Figure 7.43: Examining the different pipeline phases of the workflow](img/B21803_07_43.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.43：检查工作流的不同管道阶段](img/B21803_07_43.jpg)'
- en: 'Figure 7.43: Examining the different pipeline phases of the workflow'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.43：检查工作流的不同管道阶段
- en: Having a graphical representation of each phase of the pipeline is convenient
    to quickly assess its status and organize by logical separation of duties. In
    this dashboard, you can quickly see who triggered the pipeline, what git commit
    was associated with the changes, how long the pipeline ran for, and how many artifacts
    were produced as a result, all at a glance! This is useful enough when you’re
    looking at just a single pipeline run, but it makes things exponentially easier
    to understand when you’re parsing hundreds or tens of hundreds of build logs in
    the history.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 每个管道阶段的图形表示非常方便，可以快速评估其状态并通过职责的逻辑划分进行组织。在这个仪表盘中，你可以快速查看谁触发了管道、与更改相关的Git提交、管道运行的时间以及结果产生了多少工件，所有信息一目了然！当你查看单次管道运行时，这些信息足够有用，但当你在历史记录中解析数百个或数千个构建日志时，这些信息使得理解变得更加容易。
- en: 'The following screenshot shows the activities associated with the **Test**
    phase of the GitHub Actions workflow. As you can see, this includes two SASTs
    conducted by separate tools – HTMLTest and SAST SCAN. Together, these tests check
    the repository and try to identify any potential issues with relation to the DOM,
    NodeJS, JSON, YAML, software dependencies, and credentials existing in the source
    code. If all tests pass, the **Test** stage of the GitHub Actions workflow will
    conclude with a green checkmark and the pipeline will move forward to the **Build
    &** **Deploy** stage:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了与GitHub Actions工作流的**测试**阶段相关的活动。正如你所看到的，包括由不同工具进行的两个SAST——HTMLTest和SAST
    SCAN。两个测试一起检查代码库并尝试识别与DOM、NodeJS、JSON、YAML、软件依赖项以及源代码中存在的凭证相关的潜在问题。如果所有测试通过，GitHub
    Actions工作流的**测试**阶段将以绿色勾号结束，管道将继续进入**构建与部署**阶段：
- en: '![Figure 7.44: An illustration of the SAST scans running in the pipeline](img/B21803_07_44.jpg)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.44：管道中运行的SAST扫描示意图](img/B21803_07_44.jpg)'
- en: 'Figure 7.44: An illustration of the SAST scans running in the pipeline'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.44：管道中运行的SAST扫描示意图
- en: 'The following screenshot shows the application build phase of the GitHub Actions
    workflow. In the **Build & Deploy** phase, the AWS credentials are configured,
    the web app is built and tagged as a new Docker image, and the new Docker image
    is published to the ECR repository (registry). After, the ECS task definition
    gets updated to reflect the new Docker image tag. Finally, the new Docker container
    gets deployed to ECS:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了 GitHub Actions 工作流中的应用构建阶段。在 **构建与部署** 阶段，配置了 AWS 凭证，web 应用被构建并标记为新的
    Docker 镜像，然后将新的 Docker 镜像发布到 ECR 仓库（注册表）。接着，更新 ECS 任务定义，以反映新的 Docker 镜像标签。最后，新的
    Docker 容器被部署到 ECS：
- en: '![Figure 7.45: The Build & Deploy phase operating in the GitHub Actions workflow](img/B21803_07_45.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.45：GitHub Actions 工作流中的构建与部署阶段](img/B21803_07_45.jpg)'
- en: 'Figure 7.45: The Build & Deploy phase operating in the GitHub Actions workflow'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.45：GitHub Actions 工作流中的构建与部署阶段
- en: '![Figure 7.46: Preparing to deploy the newly built Docker image in ECS](img/B21803_07_46.jpg)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.46：准备在 ECS 中部署新构建的 Docker 镜像](img/B21803_07_46.jpg)'
- en: 'Figure 7.46: Preparing to deploy the newly built Docker image in ECS'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.46：准备在 ECS 中部署新构建的 Docker 镜像
- en: 'As shown in the following screenshot, the application is already deployed and
    running in ECS. Thereafter, an automated script is executed during the workflow
    run to dynamically capture the web application’s public IP address, which then
    gets stored as an environment variable in the shell. This is performed using the
    AWS CLI, and it is executed on the GitHub Actions runner. After the IP address
    is captured as an environment variable, it is used as the target of the OWASP
    ZAProxy scanner to perform DAST against the application. If any issues are identified
    by the OWASP ZAProxy, a new GitHub issue is automatically opened in the repository
    for manual review:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，应用程序已经部署并运行在 ECS 中。随后，在工作流运行期间执行了一个自动化脚本，动态捕获 web 应用的公共 IP 地址，并将其作为环境变量存储在
    shell 中。这个过程是通过 AWS CLI 完成的，并且在 GitHub Actions 运行器上执行。捕获 IP 地址后，它会作为 OWASP ZAProxy
    扫描器的目标，进行 DAST 扫描。如果 OWASP ZAProxy 检测到任何问题，会自动在仓库中打开一个新的 GitHub 问题以供人工审查：
- en: '![Figure 7.47: Running a DAST scan in the workflow](img/B21803_07_47.jpg)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.47：在工作流中运行 DAST 扫描](img/B21803_07_47.jpg)'
- en: 'Figure 7.47: Running a DAST scan in the workflow'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.47：在工作流中运行 DAST 扫描
- en: 'As shown in the following screenshot, the OWASP ZAProxy has completed its scan,
    and the results are displayed in the build logs. After all of the operations in
    the GitHub Actions workflow are complete, the pipeline cleans up the build environment
    and unsets any secrets and environment variables that were used. At this point,
    the GitHub Actions runner is gracefully decommissioned:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，OWASP ZAProxy 已完成扫描，扫描结果显示在构建日志中。在 GitHub Actions 工作流中的所有操作完成后，管道会清理构建环境，并取消设置所有使用过的机密和环境变量。此时，GitHub
    Actions 运行器将被优雅地停用：
- en: '![Figure 7.48: Viewing the results of the OWASP ZAProxy web app scan](img/B21803_07_48.jpg)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.48：查看 OWASP ZAProxy web 应用扫描结果](img/B21803_07_48.jpg)'
- en: 'Figure 7.48: Viewing the results of the OWASP ZAProxy web app scan'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.48：查看 OWASP ZAProxy web 应用扫描结果
- en: Step 4 – observe the deployed application running in AWS ECS
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 4 – 观察在 AWS ECS 中运行的已部署应用程序
- en: Now that the GitHub Actions workflow has been completed and the web app has
    been deployed to ECS, let’s open a browser window and observe our handy work.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 GitHub Actions 工作流已经完成，web 应用已部署到 ECS，让我们打开浏览器窗口，查看我们的成果。
- en: 'There are two easy ways that you can obtain the public IP address of your running
    web application:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过两种简单的方法获取正在运行的 web 应用的公共 IP 地址：
- en: 'After looking in the deployment logs, you can find the IP address that was
    used to scan the running web application when an automated scan was performed
    with OWASP ZAProxy:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看部署日志后，你可以找到用于扫描运行中 web 应用的 IP 地址，这个 IP 地址是在使用 OWASP ZAProxy 进行自动扫描时获得的：
- en: '![Figure 7.49: Locating the public IPv4 address of the deployed web app](img/B21803_07_49.jpg)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.49：查找已部署 web 应用的公共 IPv4 地址](img/B21803_07_49.jpg)'
- en: 'Figure 7.49: Locating the public IPv4 address of the deployed web app'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.49：查找已部署 web 应用的公共 IPv4 地址
- en: 'Open the AWS web console and get the ECS service IP address: [https://console.aws.amazon.com/ecs/v2](https://console.aws.amazon.com/ecs/v2):'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 AWS Web 控制台，获取 ECS 服务的 IP 地址：[https://console.aws.amazon.com/ecs/v2](https://console.aws.amazon.com/ecs/v2)：
- en: Note
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Don’t forget to select the correct AWS region that your ECS cluster was deployed
    in.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了选择正确的 AWS 区域，确保你的 ECS 集群已部署在该区域。
- en: '![Figure 7.50: Navigating to the ECS Clusters menu in AWS](img/B21803_07_50.jpg)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.50：在 AWS 中导航到 ECS 集群菜单](img/B21803_07_50.jpg)'
- en: 'Figure 7.50: Navigating to the ECS Clusters menu in AWS'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.50：在 AWS 中导航到 ECS 集群菜单
- en: 'Navigate to your ECS cluster:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的 ECS 集群：
- en: '![Figure 7.51: Accessing the ECS cluster of your web app](img/B21803_07_51.jpg)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.51：访问你的 Web 应用的 ECS 集群](img/B21803_07_51.jpg)'
- en: 'Figure 7.51: Accessing the ECS cluster of your web app'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.51：访问你的 Web 应用的 ECS 集群
- en: 'Click on the ECS task associated with your web app deployment:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击与 Web 应用部署相关的 ECS 任务：
- en: '![Figure 7.52: Navigating to the ECS Tasks menu of your web app](img/B21803_07_52.jpg)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.52：导航到你的 Web 应用的 ECS 任务菜单](img/B21803_07_52.jpg)'
- en: 'Figure 7.52: Navigating to the ECS Tasks menu of your web app'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.52：导航到你的 Web 应用的 ECS 任务菜单
- en: 'Click on the current deployment hash number associated with your ECS task’s
    deployment:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击与你的 ECS 任务部署相关的当前部署哈希值：
- en: '![Figure 7.53: Accessing the latest version of your ECS task](img/B21803_07_53.jpg)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.53：访问你 ECS 任务的最新版本](img/B21803_07_53.jpg)'
- en: 'Figure 7.53: Accessing the latest version of your ECS task'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.53：访问你 ECS 任务的最新版本
- en: 'Look under the **Public IP** heading to obtain your web app’s public IP address:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**公网 IP**标题下查找，以获取你的 Web 应用的公网 IP 地址：
- en: '![Figure 7.54: Locating the current public IPv4 address of your web app](img/B21803_07_54.jpg)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.54：查找你的 Web 应用当前的公网 IPv4 地址](img/B21803_07_54.jpg)'
- en: 'Figure 7.54: Locating the current public IPv4 address of your web app'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.54：查找你的 Web 应用当前的公网 IPv4 地址
- en: 'If everything has gone correctly and your GitHub Actions workflow has run successfully,
    you should be able to browse the web app and experience it for yourself. The following
    screenshot provides an example of what you should see upon accessing the web application
    with your web browser:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，并且你的 GitHub Actions 工作流已成功运行，你应该能够浏览 Web 应用并亲自体验。以下截图展示了你在用 Web 浏览器访问
    Web 应用时应该看到的内容：
- en: '![Figure 7.55: Browsing your web app running in AWS ECS!](img/B21803_07_55.jpg)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.55：在 AWS ECS 中浏览你的 Web 应用！](img/B21803_07_55.jpg)'
- en: 'Figure 7.55: Browsing your web app running in AWS ECS!'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.55：在 AWS ECS 中浏览你的 Web 应用！
- en: The web application that you deployed into ECS is a simple website that was
    built using the Bootstrap web kit.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 你部署到 ECS 中的 Web 应用是一个简单的网站，使用 Bootstrap 网页框架构建。
- en: Summary
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This concludes [*Chapter 7*](B21803_07.xhtml#_idTextAnchor120). In this chapter,
    you have been shown a simple example of CI/CD pipeline code, written as a GitHub
    Actions workflow. After being exposed to CI/CD pipeline syntax, you now have a
    fundamental understanding of the way that pipelines are composed and how they
    can be versioned. This means that you are equipped with the ability to read, write,
    and comprehend pipeline files and can determine what activities occur within each
    step therein. Additionally, you have been shown how to provision AWS infrastructure
    using ClickOps. By leveraging this foundational knowledge, you are poised to build
    your skills and move toward advanced infrastructure deployment strategies, namely
    IaC. Not only that, but you have gained essential knowledge that is needed to
    configure the backend of GitHub Actions. As a result of these activities, you
    can now prepare end-to-end workflows that cover DevOps release management principles
    such as testing, building, and deploying applications as Docker containers into
    the cloud! Finally, you have been given a primer on writing useful documentation
    that accompanies your software releases, including changelogs.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了[*第 7 章*](B21803_07.xhtml#_idTextAnchor120)。在这一章中，你已看到一个简单的 CI/CD 流水线代码示例，该代码作为
    GitHub Actions 工作流编写。在接触到 CI/CD 流水线语法后，你现在对流水线的构成方式以及如何进行版本控制有了基本的理解。这意味着你具备了阅读、编写和理解流水线文件的能力，并能够确定每个步骤中执行的活动。此外，你还了解了如何使用
    ClickOps 配置 AWS 基础设施。凭借这些基础知识，你可以提升自己的技能，并朝着更先进的基础设施部署策略——即基础设施即代码（IaC）迈进。不仅如此，你还获得了配置
    GitHub Actions 后端所需的基本知识。因此，通过这些活动，你现在可以准备涵盖 DevOps 发布管理原则（如测试、构建和将应用作为 Docker
    容器部署到云中的端到端工作流）！最后，你还获得了撰写附带软件发布的有用文档（包括更新日志）的基础知识。
- en: In the next chapter, we’ll discuss how CI/CD pipelines enforce good DevOps release
    management. The topics include balancing CI/CD governance with speed to market,
    developing your team’s branching strategy, constructing release pipelines, and
    implementing a change approval process that is appropriate for DevOps release
    management.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论 CI/CD 流水线如何促进良好的 DevOps 发布管理。主题包括平衡 CI/CD 治理与市场速度、制定团队的分支策略、构建发布流水线，并实现适合
    DevOps 发布管理的变更审批流程。
- en: Resources
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 要深入了解本章所涉及的主题，请查看以下资源：
- en: '[https://docs.aws.amazon.com/AmazonECS/latest/userguide/getting-started-fargate.html](https://docs.aws.amazon.com/AmazonECS/latest/userguide/getting-started-fargate.html)'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.aws.amazon.com/AmazonECS/latest/userguide/getting-started-fargate.html](https://docs.aws.amazon.com/AmazonECS/latest/userguide/getting-started-fargate.html)'
- en: '[https://docs.aws.amazon.com/AmazonECS/latest/userguide/create-container-image.html](https://docs.aws.amazon.com/AmazonECS/latest/userguide/create-container-image.html)'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.aws.amazon.com/AmazonECS/latest/userguide/create-container-image.html](https://docs.aws.amazon.com/AmazonECS/latest/userguide/create-container-image.html)'
- en: '[https://docs.aws.amazon.com/AmazonECS/latest/userguide/get-set-up-for-amazon-ecs.html](https://docs.aws.amazon.com/AmazonECS/latest/userguide/get-set-up-for-amazon-ecs.html)'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.aws.amazon.com/AmazonECS/latest/userguide/get-set-up-for-amazon-ecs.html](https://docs.aws.amazon.com/AmazonECS/latest/userguide/get-set-up-for-amazon-ecs.html)'
- en: '[https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-amazon-elastic-container-service](https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-amazon-elastic-container-service)'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-amazon-elastic-container-service](https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-amazon-elastic-container-service)'
- en: '[https://earthly.dev/blog/github-actions-and-docker/](https://earthly.dev/blog/github-actions-and-docker/)'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://earthly.dev/blog/github-actions-and-docker/](https://earthly.dev/blog/github-actions-and-docker/)'
- en: Questions
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题，测试你对本章内容的掌握情况：
- en: What is a GitHub Actions Workflow?
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 GitHub Actions 工作流？
- en: What is ClickOps?
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 ClickOps？
- en: What is an AWS access key?
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 AWS 访问密钥？
- en: What is an AWS IAM policy?
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 AWS IAM 策略？
- en: What is a GitHub repository “fork”?
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 GitHub 仓库的 “fork”？
- en: What is an AWS security group?
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 AWS 安全组？
- en: What is an ECS cluster?
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 ECS 集群？
- en: What is a container image repository?
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是容器镜像仓库？
- en: What is an environment variable?
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是环境变量？
- en: What is a `README.md` file?
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 `README.md` 文件？
