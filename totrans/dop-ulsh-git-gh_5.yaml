- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Driving CI/CD with GitHub
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 GitHub 推动 CI/CD
- en: This chapter is designed to unravel the layers of GitHub Actions, from its core
    concepts to advanced deployment strategies. You will encounter a detailed exploration
    of GitHub Actions’ capabilities, structure, and best practices. We delve into
    the essence of workflows, jobs, steps, and actions, each dissected to reveal their
    importance in automation. Practical insights on reducing redundancy, managing
    secrets and variables, and the art of debugging will enhance your workflows’ efficiency
    and security. Permissions and approval processes are also covered, ensuring that
    you wield control over your **Continuous Integration/Continuous Delivery** (**CI/CD**)
    pipeline with precision.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在剖析 GitHub Actions 的各个层面，从核心概念到高级部署策略。您将详细了解 GitHub Actions 的功能、结构和最佳实践。我们将深入探讨工作流、任务、步骤和动作的本质，逐一解析它们在自动化中的重要性。关于减少冗余、管理密钥和变量、调试技巧等实用见解，将提升您的工作流效率和安全性。权限和审批流程也被覆盖，确保您能够精准掌控您的**持续集成/持续交付**
    (**CI/CD**) 流水线。
- en: Deployment strategies unfold with clarity, presenting blue-green, rolling, and
    canary deployments, each with their steps, real-world applications, and switchover
    methods. The world of feature release strategies is also demystified, providing
    you with a detailed explanation of feature flags and release trains.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 部署策略清晰展开，呈现了蓝绿部署、滚动部署和金丝雀部署，每种部署策略都有其步骤、实际应用和切换方法。功能发布策略的世界也被揭示，为您提供了详细的功能标志和发布列车的解释。
- en: 'We will cover the following main topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: GitHub Actions – Mastering workflow automation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub Actions – 精通工作流自动化
- en: Deployment strategies
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署策略
- en: Feature release strategies
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能发布策略
- en: GitHub Actions – Mastering workflow automation
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub Actions – 精通工作流自动化
- en: 'GitHub Actions represents a transformative shift in how software development
    and deployment processes are automated. As a native feature of GitHub, this world-class
    CI/CD platform facilitates the creation, management, and execution of workflows
    directly within your GitHub repository. GitHub Actions provides a simple and clear
    workflow, as the following screenshot shows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 代表了软件开发和部署过程自动化的变革性转变。作为 GitHub 的原生功能，这一世界级的 CI/CD 平台使得在您的 GitHub
    仓库中直接创建、管理和执行工作流成为可能。GitHub Actions 提供了简单明了的工作流，以下截图展示了这一点：
- en: '![Figure 5.1 – GitHub Actions built-in visualization](img/B21203_05_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – GitHub Actions 内置可视化](img/B21203_05_01.jpg)'
- en: Figure 5.1 – GitHub Actions built-in visualization
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – GitHub Actions 内置可视化
- en: This chapter delves into the intricacies of GitHub Actions, providing a detailed
    understanding of its capabilities, implementation, and best practices.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨 GitHub Actions 的复杂性，提供对其功能、实现和最佳实践的详细理解。
- en: Comprehensive overview of GitHub Actions
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitHub Actions 综合概述
- en: 'GitHub Actions offers a wide range of benefits to enhance your software development
    workflow. Here is a closer look at what it brings to the table:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 提供了广泛的优势，以增强您的软件开发工作流程。以下是它为您带来的具体内容：
- en: '**Automation**: GitHub Actions automates repetitive tasks such as code building,
    testing, and deployment. It responds to events such as code pushes and issue creation,
    reducing the need for manual intervention.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化**：GitHub Actions 自动化了诸如代码构建、测试和部署等重复任务。它响应诸如代码推送和问题创建等事件，减少了人工干预的需求。'
- en: '**Versatility**: It can be used for various purposes, including building containerized
    applications, deploying web services, managing dependencies, and more. This flexibility
    makes it adaptable to different development needs.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多功能性**：它可以用于多种用途，包括构建容器化应用程序、部署 Web 服务、管理依赖关系等。这种灵活性使其能够适应不同的开发需求。'
- en: '**CI/CD automation**: GitHub Actions streamlines the CI and CD processes. It
    automatically builds and tests code changes, ensuring code quality, and simplifies
    the deployment pipeline, leading to faster and more reliable releases.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CI/CD 自动化**：GitHub Actions 简化了 CI 和 CD 流程。它自动构建并测试代码变更，确保代码质量，简化部署管道，从而加速并提高发布的可靠性。'
- en: '**Improved collaboration**: It automates code review processes, performs automated
    testing, and sends notifications based on workflow results. This fosters better
    collaboration among team members, as they can focus on addressing critical issues
    and improvements.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进协作**：它自动化代码审查流程，执行自动化测试，并根据工作流结果发送通知。这促进了团队成员之间更好的协作，因为他们可以专注于解决关键问题和改进。'
- en: '**Customization**: GitHub Actions allows for workflow customization through
    YAML configuration. Developers can tailor workflows to suit their specific requirements
    and seamlessly integrate with third-party tools and services for extended functionality.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义**：GitHub Actions 允许通过 YAML 配置文件进行工作流的自定义。开发人员可以根据自己的特定需求调整工作流，并无缝集成第三方工具和服务以扩展功能。'
- en: 'Creating workflows is as simple as placing a YAML file in the `.github/workflows`
    directory of your repository, as shown in the following screenshot. This setup
    enables CI tasks, feedback integration into pull requests, and defining conditions
    for pull request merging:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 创建工作流只需将一个 YAML 文件放入仓库的 `.github/workflows` 目录中，如下图所示。这一设置使得 CI 任务、拉取请求中的反馈集成以及拉取请求合并条件得以定义：
- en: '![Figure 5.2 – Easy development experience with YAML](img/B21203_05_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – 使用 YAML 轻松的开发体验](img/B21203_05_02.jpg)'
- en: Figure 5.2 – Easy development experience with YAML
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – 使用 YAML 轻松的开发体验
- en: To illustrate the power and versatility of GitHub workflows, let’s consider
    a typical CI workflow for a Node.js application. Triggered by every push to the
    `main` branch and pull requests, this workflow may include jobs such as **build**,
    **test**, and **deploy**. Each job serves a specific purpose – building the project,
    running tests, and deploying the application, respectively. Within these jobs,
    steps, and actions are carefully orchestrated to ensure that each phase of the
    CI process is executed flawlessly. From checking out the code and setting up the
    Node.js environment to running tests and deploying the application, each step
    and action plays a critical role. We will now delve into the detailed structure.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示 GitHub 工作流的强大功能和灵活性，我们以一个典型的 Node.js 应用程序的 CI 工作流为例。每当推送到 `main` 分支或提交拉取请求时，这个工作流会被触发，可能包括
    **构建**、**测试** 和 **部署** 等任务。每个任务都有其特定的目的——分别是构建项目、运行测试和部署应用程序。在这些任务中，步骤和动作被精心编排，确保
    CI 过程中的每个环节都能顺利执行。从检出代码、设置 Node.js 环境到运行测试和部署应用程序，每个步骤和动作都扮演着至关重要的角色。接下来，我们将详细探讨其结构。
- en: 'The following is a typical example of a GitHub Actions workflow. The workflow
    is written in YAML, which may seem difficult. But if you look at each line one
    by one, it is simple and very easy. Note that this example is for building a Node.js
    application and will not work if you just paste this file. If you want to try
    it, try copying the entire project from the Packt repository ([https://github.com/PacktPublishing/DevOps-Unleashed-with-Git-and-GitHub/tree/main/chapter5](https://github.com/PacktPublishing/DevOps-Unleashed-with-Git-and-GitHub/tree/main/chapter5)):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个典型的 GitHub Actions 工作流示例。该工作流是用 YAML 编写的，可能看起来有些困难。但如果你逐行查看，它其实非常简单且易于理解。请注意，这个示例是用来构建
    Node.js 应用程序的，如果你只是直接粘贴此文件，它是无法正常工作的。如果你想尝试，可以从 Packt 仓库复制整个项目 ([https://github.com/PacktPublishing/DevOps-Unleashed-with-Git-and-GitHub/tree/main/chapter5](https://github.com/PacktPublishing/DevOps-Unleashed-with-Git-and-GitHub/tree/main/chapter5))：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Deep diving into GitHub workflow structure
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深入剖析 GitHub 工作流结构
- en: The GitHub workflow stands as the epitome of modern automation in software development,
    a feature that fundamentally transforms the landscape of how developers approach
    CI/CD processes. This exploration delves into the intricacies of GitHub workflows,
    breaking down their structure and functionality to understand how they revolutionize
    software development practices.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 工作流代表了现代软件开发自动化的典范，这一功能从根本上改变了开发者处理 CI/CD 流程的方式。本章节将深入探讨 GitHub 工作流的复杂性，解析其结构和功能，帮助理解它们如何革新软件开发实践。
- en: When you see a YAML file, you may think that it is difficult to understand.
    Yes, it might be more intuitive if you could tweak it in the GUI. But the GitHub
    Actions workflow is really simple.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当你看到 YAML 文件时，可能会觉得它很难理解。没错，如果能在 GUI 中调整它，可能会更直观。但 GitHub Actions 工作流其实非常简单。
- en: 'The workflow can be broken down into the following elements:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流可以分解为以下几个元素：
- en: '**Workflow**: The backbone of automation, defining the entire process'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作流**：自动化的骨架，定义整个过程'
- en: '**Job**: A group of steps executed in the same environment'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务**：在相同环境中执行的一组步骤'
- en: '**Steps**: The smallest unit of a workflow, each representing an individual
    task'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤**：工作流中的最小单元，每个步骤代表一个独立任务'
- en: '**Actions**: Reusable unit, combined into steps, to perform specific tasks'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动作**：可重用的单元，组合成步骤以执行特定任务'
- en: 'It would be easier to understand if we think of each of these as the following
    blocks:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将这些看作以下模块，它会更容易理解：
- en: '![Figure 5.3 – GitHub Actions workflow structure](img/B21203_05_03.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – GitHub Actions 工作流结构](img/B21203_05_03.jpg)'
- en: Figure 5.3 – GitHub Actions workflow structure
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – GitHub Actions 工作流结构
- en: We will cover these elements in detail in the following subsections.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以下子节中详细介绍这些元素。
- en: Workflow – The automation framework
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作流 – 自动化框架
- en: At the heart of GitHub Actions lies the concept of the `.github/workflows` directory
    of a GitHub repository, is the blueprint of your automation strategy. It is here
    where the magic begins—with each GitHub event, such as a push or a pull request,
    these workflows spring into action, setting the cogs of automation in motion.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 的核心是 GitHub 仓库中 `.github/workflows` 目录的概念，这是你的自动化策略的蓝图。正是在这里，魔法开始了——每当发生
    GitHub 事件（如推送或拉取请求）时，这些工作流就会启动，推动自动化的齿轮运转。
- en: A GitHub Actions workflow can engage with a variety of event types, each triggering
    different automated sequences that are defined in the YAML file. The following
    subsections cover detailed explanations of the event types that can be used to
    trigger workflows.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 工作流可以与各种事件类型进行交互，每种事件都会触发在 YAML 文件中定义的不同自动化序列。以下子节将详细解释可以用来触发工作流的事件类型。
- en: Webhook events trigger
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Webhook 事件触发
- en: 'A variety of triggers are possible, but we will mention a few typical ones
    here:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种触发器可以使用，但我们将在此提及一些典型的触发器：
- en: '`main` branch.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main` 分支。'
- en: '**Issue operations**: Similar to pull requests, workflows can react to issue
    activities such as creation, assignment, labeling, and closing. This is ideal
    for automatic issue response templates, prioritization, and triaging.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题操作**：与拉取请求类似，工作流可以对问题活动（如创建、分配、标签和关闭）做出反应。这对于自动问题响应模板、优先级排序和问题分类非常理想。'
- en: '**Push events and others**: Perhaps the most common trigger, a push event,
    occurs when commits are pushed to the repository. Workflows initiated by push
    events can handle a multitude of tasks, including code scans, building, testing,
    and deploying applications.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推送事件及其他事件**：推送事件可能是最常见的触发器，当提交被推送到仓库时会触发。由推送事件启动的工作流可以处理许多任务，包括代码扫描、构建、测试和应用程序部署。'
- en: 'The following example triggers an event when pushed to `main`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例会在推送到 `main` 时触发事件：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Scheduled events trigger
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定时事件触发
- en: 'Workflows can be scheduled to run at specific times using the Cron syntax.
    This feature is akin to an alarm clock that activates your workflows at predetermined
    intervals, useful for nightly builds, regular cleanups, or periodic syncing tasks.
    In this example, the workflow is triggered daily at 5:30 and 17:30 UTC:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流可以使用 Cron 语法设置为在特定时间运行。这个功能类似于一个闹钟，它会在预定的时间间隔触发你的工作流，非常适合夜间构建、定期清理或周期性同步任务。在此示例中，工作流每天在
    UTC 时间 5:30 和 17:30 触发：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Manual events trigger
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 手动事件触发
- en: '`workflow_dispatch` allows workflows to be manually triggered from the GitHub
    UI or API. This offers the flexibility to run workflows on demand, which is particularly
    useful for ad hoc tasks such as manual deployments, data imports, or any operation
    where manual oversight is necessary before execution.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`workflow_dispatch` 允许通过 GitHub UI 或 API 手动触发工作流。这提供了按需运行工作流的灵活性，特别适用于临时任务，如手动部署、数据导入或任何在执行前需要人工监督的操作。'
- en: 'The following is an example of a setup for manual operation:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是手动操作设置的示例：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Job – The execution unit
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务 – 执行单元
- en: Within each workflow, we encounter **jobs**. Think of a job as a coherent group
    of steps that execute collectively on the same runner. A runner in GitHub Actions
    is a server that has the GitHub Actions runner application installed. It is essentially
    where your jobs are executed. Each runner can be thought of as a clean, isolated
    **Virtual Machine** (**VM**) that is provisioned for each job or workflow run.
    The beauty of jobs in a GitHub workflow is their ability to run concurrently across
    different runners unless they are explicitly defined to be dependent on one another.
    Each job can operate on a variety of GitHub-hosted VMs, each catering to different
    operating systems, or even on self-hosted machines, offering an unprecedented
    level of flexibility.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个工作流中，我们会遇到 **任务**。可以将任务看作是一个包含多个步骤的连贯组，这些步骤在同一个 runner 上一起执行。GitHub Actions
    中的 runner 是安装了 GitHub Actions runner 应用程序的服务器。它本质上是执行你任务的地方。每个 runner 可以看作是一个干净、隔离的
    **虚拟机**（**VM**），它为每个任务或工作流运行提供资源。GitHub 工作流中任务的魅力在于，除非明确指定彼此依赖，否则它们可以在不同的 runner
    上并行运行。每个任务可以在各种 GitHub 托管的虚拟机上运行，这些虚拟机支持不同的操作系统，或者甚至在自托管的机器上运行，提供了前所未有的灵活性。
- en: 'In the following example, the `build` job is a fundamental component of the
    workflow process, generally responsible for compiling code or generating build
    artifacts. The name `build` can be replaced with any job name you like. In your
    setup, the `runs-on` key specifies the execution environment for the following
    example job, which is the `ubuntu-latest` runner. This choice instructs GitHub
    Actions to execute the `build` job on the most recent version of Ubuntu Linux
    available on the platform. Apart from this, you can choose macOS and Windows.
    Also, your local machines or on-premises machines can be registered as self-hosted
    runners, giving you the flexibility to use them in a variety of environments,
    including those with strict network requirements or larger workloads:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，`build` 作业是工作流过程中的一个基本组件，通常负责编译代码或生成构建产物。`build` 这个名称可以替换为任何你喜欢的作业名称。在你的配置中，`runs-on`
    键指定了以下示例作业的执行环境，即 `ubuntu-latest` 运行器。这个选择指示 GitHub Actions 在平台上执行 `build` 作业，使用的是最新版本的
    Ubuntu Linux。除此之外，你还可以选择 macOS 和 Windows。此外，你的本地计算机或内部部署的计算机可以注册为自托管运行器，使你能够在多种环境中使用它们，包括那些有严格网络要求或更大工作负载的环境：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `strategy` feature in GitHub Actions simplifies testing across multiple
    environments using the `matrix` option. This option allows you to define a combination
    of different configurations (such as operating systems, programming language versions,
    or dependencies) that you want your workflow to run on. Instead of setting up
    multiple jobs manually for each configuration, the matrix option dynamically generates
    a job for each combination you specify. This approach avoids the redundancy of
    manual setup and ensures your code works on various versions of dependencies,
    such as Node.js. It is a proactive way to catch compatibility issues early, affirming
    your application’s stability across different environments. This is optional,
    but good to keep in mind:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 中的 `strategy` 功能通过使用 `matrix` 选项简化了跨多个环境的测试。这个选项允许你定义一组不同的配置（如操作系统、编程语言版本或依赖项），并指定你的工作流要在哪些配置上运行。无需为每个配置手动设置多个作业，`matrix`
    选项会动态生成每个你指定的配置组合的作业。这种方法避免了手动设置的冗余，并确保你的代码在不同版本的依赖项（如 Node.js）上都能正常工作。这是一种主动发现兼容性问题的方式，确保你的应用在不同环境中的稳定性。虽然这是可选的，但值得牢记：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In addition, container settings can be made as follows. If you want a specific
    container environment, you can use this to implement CI/CD in a flexible environment:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以按如下方式进行容器设置。如果你需要特定的容器环境，可以使用它来在灵活的环境中实现 CI/CD：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can also specify the conditions under which jobs will run as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以按照如下方式指定作业运行的条件：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Steps – The building blocks
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 – 构建模块
- en: 'Diving deeper, each job comprises **steps**, fundamental tasks, or operations.
    Each step in a job is executed sequentially, ensuring a controlled progression
    of tasks. These steps can be as simple as a script or command execution or as
    complex as running a series of actions. Steps are the building blocks of a workflow,
    piecing together the larger picture of automation:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 深入来看，每个作业包含 **步骤**，即基本任务或操作。每个作业中的步骤按顺序执行，确保任务有序进行。这些步骤可以是简单的脚本或命令执行，也可以是执行一系列操作的复杂过程。步骤是工作流的构建模块，将自动化的大图拼接在一起：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Actions – Customized task executors
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作 – 定制的任务执行器
- en: The most granular elements within these steps are **actions**. Actions are the
    workhorses of GitHub workflows, encapsulating specific functionalities in reusable
    units. From custom actions tailor-made for specific tasks to a plethora of ready-to-use
    actions available in GitHub Marketplace, the possibilities are endless. Actions
    come in various forms, including JavaScript actions for direct execution on the
    runner, Docker container actions for containerized operations, and composite run
    steps actions, which combine multiple run commands. This versatility allows for
    a high degree of customization, enabling developers to craft workflows that align
    perfectly with their development needs.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤中最细粒度的元素是 **操作**。操作是 GitHub 工作流的核心，封装了可重用的特定功能。从为特定任务量身定制的自定义操作到 GitHub
    市场上丰富的现成操作，可能性是无限的。操作有多种形式，包括用于在运行器上直接执行的 JavaScript 操作、用于容器化操作的 Docker 容器操作，以及组合运行步骤操作，它们结合了多个运行命令。这种多样性使得高度定制成为可能，开发者可以根据自身的开发需求精确地制定工作流。
- en: 'The following snippet from a GitHub Actions workflow is tailored for Node.js
    projects, utilizing a series of commands and actions to prepare the runtime environment
    and build the application:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 GitHub Actions 工作流中的一个代码片段，专门为 Node.js 项目定制，利用一系列命令和操作来准备运行时环境并构建应用程序：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let’s take a closer look at the GitHub Actions specifics:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看 GitHub Actions 的具体内容：
- en: '`name`: This is essentially a label for readability within the workflow file.
    It helps you and anyone else reading the workflow understand what the step is
    intended to do. Here, it specifies that the step will set up Node.js version 14.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：这本质上是一个标签，用于提高工作流文件的可读性。它帮助你和任何阅读工作流的人理解该步骤的目的。这里，它指定该步骤将设置 Node.js
    版本 14。'
- en: '`uses`: This key specifies an action to be used. Actions are reusable pieces
    of code that can perform complex tasks. `actions/setup-node@v3` refers to the
    third major version of the `setup-node` action, which is designed to configure
    a Node.js environment. When you specify an action with `uses`, GitHub Actions
    will fetch that piece of code and execute it as part of the step.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uses`：这个键指定要使用的操作。操作是可重用的代码块，可以执行复杂的任务。`actions/setup-node@v3` 指的是 `setup-node`
    操作的第三个主版本，它用于配置 Node.js 环境。当你通过 `uses` 指定一个操作时，GitHub Actions 会获取该代码并作为步骤的一部分执行。'
- en: '`with`: This part of the step feeds input parameters to the action specified
    in `uses`. It customizes the behavior of the action. For `setup-node`, you are
    providing two pieces of information: the Node.js version (`node-version: ''14''`)
    and the package manager cache settings (`cache: ''npm''`). The `cache` option
    tells the action to cache the dependencies, which can speed up future job runs.
    This is a predefined parameter in the action that is available in the marketplace
    or is open source. You can create your own and distribute it to the world, or
    create it for internal use and have your internal users use it.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with`：该步骤的这一部分向`uses`指定的操作传递输入参数。它自定义了操作的行为。对于`setup-node`，你提供了两项信息：Node.js
    版本（`node-version: ''14''`）和包管理器缓存设置（`cache: ''npm''`）。`cache`选项告诉操作缓存依赖项，这可以加速未来作业的执行。这是操作中的一个预定义参数，通常在市场中可用，或者是开源的。你可以创建自己的操作并分发给全世界，或者仅为内部使用创建并供内部用户使用。'
- en: '`run`: This is a directive for running command-line scripts, and it is where
    you can execute shell commands. In this case, `npm ci` is a command that installs
    all dependencies for your project as specified in your `package-lock.json` file.
    And after that, it builds and tests the project.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`run`：这是一个运行命令行脚本的指令，它是你可以执行 shell 命令的地方。在这种情况下，`npm ci` 是一个命令，它会根据你的 `package-lock.json`
    文件安装项目的所有依赖项。之后，它会构建并测试项目。'
- en: GitHub Actions may seem complicated at first, but once you get the hang of it,
    it is easy. It is essentially a mechanism to control the flow of scripts.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 起初可能看起来很复杂，但一旦掌握了它，其实很简单。它本质上是一种控制脚本流的机制。
- en: Furthermore, GitHub workflows are not just about the tasks they perform; they
    are about streamlining and simplifying the development process. The ability to
    reuse parts of workflows, such as setup and test steps, in different contexts,
    such as pull request validation, exemplifies the platform’s emphasis on efficiency
    and reusability. This aspect is crucial in an era where Agile development and
    rapid iteration are the norms.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，GitHub 工作流不仅仅是执行任务；它们还简化和优化了开发过程。能够在不同的上下文中重用工作流的部分内容，例如在拉取请求验证中重用设置和测试步骤，体现了该平台对效率和可重用性的重视。在如今敏捷开发和快速迭代为常态的时代，这一方面尤为重要。
- en: 'Now, let’s embark on the journey of utilizing GitHub Actions. With a vast array
    of templates readily available, the best way to start is by diving right in and
    trying them out. These templates cater to a wide range of automation needs, from
    streamlining repetitive tasks and automating code testing and building in CI to
    facilitating code deployment across various environments and implementing crucial
    security checks and measures. The large selection of GitHub Actions templates
    is easily accessible at GitHub, as shown in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始使用 GitHub Actions。由于有大量现成的模板可供选择，最好的方式是直接开始尝试它们。这些模板涵盖了广泛的自动化需求，从简化重复任务、在
    CI 中自动化代码测试和构建，到在不同环境之间进行代码部署、实施关键的安全检查和措施。GitHub 上可以轻松访问大量的 GitHub Actions 模板，如下图所示：
- en: '![Figure 5.4 – Extensive templates for GitHub Actions](img/B21203_05_04.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – GitHub Actions 的广泛模板](img/B21203_05_04.jpg)'
- en: Figure 5.4 – Extensive templates for GitHub Actions
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – GitHub Actions 的广泛模板
- en: By leveraging these templates, you will be able to harness the full potential
    of GitHub Actions efficiently and effectively. Embrace this powerful tool and
    watch as it transforms your development workflow, making it more streamlined,
    secure, and robust.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用这些模板，你将能够高效、有效地发挥 GitHub Actions 的全部潜力。拥抱这一强大的工具，观察它如何改变你的开发工作流，使其更加简洁、安全和强大。
- en: GitHub Actions best practices
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitHub Actions 最佳实践
- en: There are several best practices for GitHub Actions that are worth discussing.
    These include reducing redundancy, which helps streamline your workflows by eliminating
    unnecessary repetition. Secrets and variable management are crucial for maintaining
    security and efficiency in your actions. Debugging GitHub Actions workflows is
    an essential skill, allowing you to identify and fix issues quickly. Managing
    permissions effectively ensures that the right levels of access are maintained,
    while the implementation of approval processes with environments helps in controlling
    the deployment flow and maintaining the integrity of different deployment stages.
    Learning and applying these best practices can significantly enhance your proficiency
    with GitHub Actions.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个值得讨论的 GitHub Actions 最佳实践。它们包括减少冗余，这有助于通过消除不必要的重复来简化工作流。秘密和变量管理对于保持动作的安全性和效率至关重要。调试
    GitHub Actions 工作流是一个必要技能，能够快速识别和修复问题。有效管理权限确保了保持正确的访问级别，而通过环境实施审批流程有助于控制部署流程并维护不同部署阶段的完整性。学习并应用这些最佳实践可以显著提高你在
    GitHub Actions 中的熟练度。
- en: Now, let’s look at them one by one.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们一一查看它们。
- en: Reducing redundancy
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 减少冗余
- en: 'Harnessing the power of GitHub Actions efficiently demands a focus on reducing
    redundancy, a crucial best practice in workflow automation. This involves three
    key options:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 高效地利用 GitHub Actions 的力量需要专注于减少冗余，这是工作流自动化中的一个关键最佳实践。这包括三个主要选项：
- en: '**Utilizing GitHub Marketplace**: Here, you can tap into a vast array of existing
    actions created by the community, suitable for a wide range of common automation
    tasks. This approach saves time and leverages the collective expertise of other
    developers.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用 GitHub Marketplace**：在这里，你可以访问由社区创建的各种现有动作，适用于广泛的常见自动化任务。这种方式节省了时间，并利用了其他开发者的集体智慧。'
- en: '**Creating custom actions**: For unique requirements not covered by Marketplace
    actions, custom actions offer a tailored solution. They allow you to address the
    specific needs of your project with precision.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建自定义动作**：对于 Marketplace 动作无法覆盖的独特需求，自定义动作提供了量身定制的解决方案。它们使你能够精准地解决项目的具体需求。'
- en: '**Implementing reusable workflows**: Develop workflows that can be applied
    across multiple projects. This not only streamlines the workflow setup process
    but also ensures consistency and easier maintenance.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现可重用的工作流**：开发可以在多个项目中应用的工作流。这不仅简化了工作流设置过程，还确保了一致性和更容易的维护。'
- en: 'By integrating these, you can optimize your use of GitHub Actions, leading
    to more efficient, consistent, and maintainable automation processes in your **Software
    Development Life Cycle** (**SDLC**). Various actions are available as open source
    projects, as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过集成这些内容，你可以优化 GitHub Actions 的使用，从而实现更高效、一致和可维护的自动化流程，在你的**软件开发生命周期**（**SDLC**）中。以下是作为开源项目提供的各种动作：
- en: '![Figure 5.5 – Actions in GitHub Marketplace](img/B21203_05_05.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.5 – GitHub Marketplace 中的动作](img/B21203_05_05.jpg)'
- en: Figure 5.5 – Actions in GitHub Marketplace
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – GitHub Marketplace 中的动作
- en: Custom actions and reusable workflows are the next areas of learning for the
    reader. We will not go into depth here, but for extended use of GitHub Actions,
    there are links to detailed resources in the *Further reading* section at the
    end of the chapter.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义动作和可重用工作流是读者接下来需要学习的内容。我们这里不深入探讨，但对于 GitHub Actions 的扩展使用，章节末尾的*进一步阅读*部分提供了详细资源的链接。
- en: Secrets and variable management
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 秘密和变量管理
- en: 'In GitHub Actions, managing secrets and variables is essential for both security
    and workflow customization:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub Actions 中，管理秘密和变量对安全性和工作流定制至关重要：
- en: '`${{ secrets.NAME }}`, ensuring they are not exposed in logs or to unauthorized
    users. Once a secret is registered, it cannot be retrieved, and the registered
    value will not appear in the console output of GitHub Actions.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${{ secrets.NAME }}`，确保它们不会暴露在日志中或对未经授权的用户开放。一旦注册了一个秘密，它无法被检索，且注册值不会出现在 GitHub
    Actions 的控制台输出中。'
- en: '`${{ env.My_Variable }}`. You set environment variables directly in your workflow
    files, and they can be different for each job or step.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${{ env.My_Variable }}`。您可以直接在工作流程文件中设置环境变量，每个作业或步骤可以有不同的设置。'
- en: 'The following is an example of using a registered secret in GitHub Actions,
    allowing you to inject values from outside the workflow in a flexible manner:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在 GitHub Actions 中使用注册的秘密的示例，允许您以灵活的方式从工作流程外部注入值：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Proper management of secrets and variables is key to maintaining the security
    and efficiency of your GitHub Actions workflows. Secrets and variables can be
    set from the GitHub configuration page as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 正确管理秘密和变量对于维护 GitHub Actions 工作流程的安全性和效率至关重要。可以通过 GitHub 配置页面如下设置秘密和变量：
- en: '![Figure 5.6 – Secrets and variables configuration for GitHub Actions](img/B21203_05_06.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.6 – GitHub Actions 的秘密和变量配置](img/B21203_05_06.jpg)'
- en: Figure 5.6 – Secrets and variables configuration for GitHub Actions
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 – GitHub Actions 的秘密和变量配置
- en: Debugging GitHub Actions workflows
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调试 GitHub Actions 工作流程
- en: 'Debugging in GitHub Actions is an essential practice to ensure your workflows
    run as expected and to identify and resolve any issues that arise. Here are some
    key points to help you effectively debug your GitHub Actions workflows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub Actions 中进行调试是一种重要的实践，以确保您的工作流程按预期运行，并识别和解决可能出现的任何问题。以下是一些关键点，帮助您有效地调试
    GitHub Actions 工作流程：
- en: '`ACTIONS_STEP_DEBUG` with the value `true`. This will provide you with more
    detailed information during the execution of your actions, making it easier to
    pinpoint where and why a problem is occurring.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ACTIONS_STEP_DEBUG` 的值为 `true`。这将在执行操作期间为您提供更详细的信息，帮助您更容易地定位问题发生的位置和原因。'
- en: '**Run logs access**: GitHub Actions automatically generates logs for each run.
    These logs can be accessed in the **Actions** tab of your GitHub repository. They
    provide a detailed record of what happened during each step of your workflow.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行日志访问**：GitHub Actions 自动为每次运行生成日志。这些日志可以在您的 GitHub 仓库的**操作**选项卡中访问。它们详细记录了工作流程的每个步骤中发生的情况。'
- en: '`act` ([https://github.com/nektos/act](https://github.com/nektos/act)) allow
    you to run your workflows locally on your machine. This can be particularly helpful
    for testing complex workflows without having to push changes to your repository.
    It enables a faster iteration cycle in fixing and optimizing your actions.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`act` ([https://github.com/nektos/act](https://github.com/nektos/act)) 允许您在本地机器上运行工作流程。这对于测试复杂的工作流程而无需推送更改到您的仓库非常有帮助。它可以加快修复和优化操作的迭代周期。'
- en: '`workflow_dispatch` event trigger in your workflow file allows you to manually
    trigger workflows. This can be useful for testing changes without the need to
    trigger workflows on push or pull request events.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的工作流程文件中使用 `workflow_dispatch` 事件触发器可以手动触发工作流程。这对于在推送或拉取请求事件上触发工作流程之外进行更改测试非常有用。
- en: 'Other things to keep in mind when creating GitHub Actions workflows include
    the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 GitHub Actions 工作流程时需要牢记的其他事项包括以下内容：
- en: '**Simplifying workflows**: Break down complex workflows into smaller, more
    manageable parts to isolate and identify issues.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化工作流程**：将复杂的工作流程分解为更小、更易管理的部分，以便隔离和识别问题。'
- en: '**Utilizing action outputs**: Use outputs from actions for diagnostic purposes.
    These can give insights into the behavior of different steps.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用操作输出**：使用操作的输出进行诊断目的。这些输出可以揭示不同步骤的行为。'
- en: '**Iterative approach**: When making changes to a workflow, do it incrementally.
    Test each change thoroughly before implementing the next. This approach helps
    isolate the impact of each change, making debugging easier.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**迭代方法**：在对工作流程进行更改时，逐步进行。在实施下一个更改之前，彻底测试每个更改。这种方法有助于隔离每个更改的影响，使调试变得更容易。'
- en: Debugging GitHub Actions workflows effectively requires a combination of utilizing
    detailed logs, testing workflows locally, simplifying complex setups, and manually
    triggering workflows. These practices help to quickly identify and resolve issues,
    ensuring your CI/CD processes are robust and reliable.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 有效地调试 GitHub Actions 工作流程需要结合使用详细日志、本地测试工作流程、简化复杂设置以及手动触发工作流程。这些实践有助于快速识别和解决问题，确保您的
    CI/CD 过程健壮可靠。
- en: Permissions
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 权限
- en: 'Managing permissions in GitHub Actions is critical for maintaining the security
    and integrity of your workflow processes. This section focuses on setting and
    managing the appropriate permissions for actions within your GitHub workflows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub Actions中管理权限对于维护工作流过程的安全性和完整性至关重要。本节内容将重点讲解如何为GitHub工作流中的操作设置和管理适当的权限：
- en: '`GITHUB_TOKEN`, a special GitHub-generated token used by workflows. By default,
    this token is scoped to the repository containing your workflow, ensuring actions
    cannot inadvertently affect other repositories or sensitive data.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GITHUB_TOKEN`，一个由GitHub生成的特殊令牌，供工作流使用。默认情况下，这个令牌的作用范围限于包含工作流的仓库，确保操作不会无意中影响其他仓库或敏感数据。'
- en: '`GITHUB_TOKEN` within your workflow file for specific jobs or the entire workflow.
    This allows you to restrict or extend the token’s capabilities based on the needs
    of individual jobs, enhancing security and minimizing risk. Permissions are set
    in the workflow file using the permissions key. You can specify permissions for
    various GitHub API scopes, such as contents, issues, deployments, and more. The
    following is an example of such a setup:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在工作流文件中使用`GITHUB_TOKEN`来为特定任务或整个工作流提供令牌。这允许你根据单个任务的需求，限制或扩展令牌的功能，增强安全性并降低风险。权限在工作流文件中使用permissions键进行设置。你可以为各种GitHub
    API范围指定权限，如内容、问题、部署等。以下是此类设置的示例：
- en: '[PRE11]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Minimal access**: Apply the **Principle of Least Privilege** (**PoLP**) by
    granting permissions that are only just sufficient for a particular action or
    job to function. Avoid giving broad or admin-level permissions unless absolutely
    necessary.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小权限**：遵循**最小权限原则**（**PoLP**），只授予执行特定操作或任务所需的最低权限。除非绝对必要，否则避免授予广泛的或管理员级别的权限。'
- en: By meticulously managing permissions in GitHub Actions, you can safeguard your
    workflows against unauthorized access, mistakes, and potential security vulnerabilities.
    This involves setting precise token permissions, securely managing secrets, and
    regularly auditing access levels to align with PoLP. Implementing these practices
    will significantly strengthen the security posture of your CI/CD pipeline.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过细致地管理GitHub Actions中的权限，你可以保护工作流免受未经授权的访问、错误和潜在的安全漏洞。这涉及到设置精确的令牌权限、安全管理机密以及定期审查访问级别，以符合PoLP。实施这些做法将显著增强你的CI/CD流水线的安全性。
- en: Approval processes with environments
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 环境中的审批流程
- en: In the dynamic world of software deployment and CI, GitHub Actions brings a
    crucial element of control and oversight through its **Environments** feature.
    This innovative functionality significantly elevates the way teams handle their
    deployment workflows, particularly in terms of approval processes and adherence
    to specific operational conditions.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件部署和持续集成（CI）的动态世界中，GitHub Actions通过其**环境**功能带来了至关重要的控制和监督元素。这一创新功能显著提升了团队处理部署工作流的方式，尤其是在审批流程和遵循特定操作条件方面。
- en: Environments in GitHub Actions serve as dedicated spaces within the workflow,
    each tailored to specific stages such as testing, staging, or production. What
    sets these environments apart is their capacity to be customized with unique rules
    and access controls. They become not just segments of the workflow but controlled
    realms, each with its distinct set of permissions and secrets. This ensures that
    sensitive information and actions are confined to where they are most relevant,
    bolstering the security of the entire process.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions中的环境作为工作流中的专用空间，每个环境都针对特定阶段，如测试、预发布或生产进行定制。这些环境的特点在于它们可以通过独特的规则和访问控制进行定制。它们不仅仅是工作流的部分，而是被控制的领域，每个领域都有其独特的权限和秘密。这确保了敏感信息和操作仅限于最相关的区域，从而增强了整个过程的安全性。
- en: 'Central to the value of environments is their role in facilitating approval
    workflows. Imagine a scenario where any deployment to production requires a careful
    review. Environments make this possible by integrating a manual approval process.
    When a deployment reaches the production stage, it triggers a pause in the workflow,
    awaiting the green light from authorized personnel. This pause is not just a halt
    in operations; it is a gatekeeper ensuring that every change undergoes scrutiny
    before it affects the live environment. The approval flow with **Environments**
    is seamlessly integrated into the GitHub Actions experience, as shown in the following
    screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 环境的核心价值在于它们在促进审批工作流中的作用。假设有一个场景，任何部署到生产环境的操作都需要经过仔细审查。环境通过集成手动审批流程使这一点成为可能。当部署到达生产阶段时，它会触发工作流的暂停，等待授权人员的批准。这种暂停不仅仅是操作的中止；它是一个关卡，确保每个更改在影响生产环境之前都经过审查。带有**环境**的审批流程无缝集成到
    GitHub Actions 的体验中，如下图所示：
- en: '![Figure 5.7 – Approval on Environments](img/B21203_05_07.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.7 – 环境中的审批](img/B21203_05_07.jpg)'
- en: Figure 5.7 – Approval on Environments
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – 环境中的审批
- en: Beyond mere approval, environments in GitHub Actions allow for sophisticated
    condition settings. Jobs within an environment can be configured to run only in
    specific circumstances, such as on certain branches or in response to particular
    events. This level of detail in control ensures that the workflow adheres to the
    precise operational standards of a project, avoiding any unintended deployments
    or actions.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 除了单纯的审批外，GitHub Actions 中的环境还允许进行复杂的条件设置。环境中的作业可以配置为仅在特定情况下运行，例如在某些分支上或响应特定事件时。这样的控制细节确保了工作流遵循项目的精确操作标准，避免了任何意外的部署或操作。
- en: The introduction of protection rules within these environments further fortifies
    the workflow. By setting requirements such as mandatory reviewers for changes,
    organizations can enforce compliance and maintain high-security standards. This
    is not just about keeping the workflow secure; it is about aligning it with organizational
    protocols and best practices.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些环境中引入保护规则进一步强化了工作流的安全性。通过设置诸如强制审核者等要求，组织可以强制执行合规性并维持高安全标准。这不仅仅是为了确保工作流的安全性；更是为了将其与组织的协议和最佳实践对齐。
- en: 'An environment, therefore, is not just an addition to GitHub Actions; it is
    a paradigm shift in how deployment workflows are managed. It introduces a layer
    of security, control, and compliance that is indispensable in modern software
    development. Environments ensure that every step in the CI/CD pipeline, especially
    those involving sensitive stages such as production, is executed under stringent
    scrutiny and within the bounds of defined operational guidelines. This is GitHub
    Actions not just facilitating automation, but doing so with a keen eye on safety,
    reliability, and organizational integrity. From the **Environments** configuration,
    you can add protection rule settings such as adding an approver:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，环境不仅仅是 GitHub Actions 的一个附加功能；它是在管理部署工作流方面的一个范式转变。它引入了一个安全性、控制性和合规性层面，这在现代软件开发中是不可或缺的。环境确保了
    CI/CD 流水线中的每一步，特别是涉及敏感阶段（如生产环境）的步骤，都会在严格审查和定义的操作指南范围内执行。这不仅仅是 GitHub Actions 促进自动化，而是在关注安全性、可靠性和组织完整性的同时进行自动化。从**环境**配置中，你可以添加保护规则设置，例如添加审批人：
- en: '![Figure 5.8 – Environments configuration](img/B21203_05_08.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8 – 环境配置](img/B21203_05_08.jpg)'
- en: Figure 5.8 – Environments configuration
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – 环境配置
- en: GitHub Actions stands out as a versatile tool, adaptable to a wide range of
    development scenarios, making it an indispensable asset for modern software development
    teams. Whether it is automating routine tasks, ensuring code quality, or deploying
    applications, GitHub Actions provides the tools and flexibility required for high-quality
    software delivery.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 作为一个多功能工具，适应广泛的开发场景，使其成为现代软件开发团队不可或缺的资产。无论是自动化常规任务、确保代码质量还是部署应用程序，GitHub
    Actions 提供了高质量软件交付所需的工具和灵活性。
- en: Now, let’s look at some applied practices for deploying with GitHub Actions.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一些使用 GitHub Actions 部署的应用实践。
- en: Deployment strategies
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署策略
- en: It is important to embrace *failure* as a system in DevOps. In the dynamic world
    of DevOps, embracing failure is not just recommended; it is essential. Contrary
    to traditional perspectives where failure is often seen as a setback, in DevOps,
    failure assumes a transformative role. It is not merely an incident or an unexpected
    result; it is an integral part of DevOps.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevOps中，重要的是要将*失败*视为系统的一部分。在DevOps的动态世界中，拥抱失败不仅是推荐的做法，而是至关重要的。与传统观点中将失败视为挫折不同，在DevOps中，失败承担着转变的角色。它不仅仅是一个事件或意外结果，它是DevOps不可或缺的一部分。
- en: In conventional deployment methodologies, extensive checks and balances are
    the norm, aimed at minimizing the occurrence of failure. However, the fast-paced
    nature of modern development such as Agile alters this approach significantly.
    In modern development, the landscape is ever-evolving, and services undergo constant
    changes. If these changes are not made swiftly and effectively, it could lead
    to service degradation or failure. Therefore, it becomes crucial to build a system
    that is resilient and can adapt to these rapid changes.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的部署方法中，广泛的检查和平衡是常态，旨在尽量减少故障的发生。然而，现代开发的快速节奏，如敏捷开发，显著改变了这一方法。在现代开发中，环境不断变化，服务也在不断更新。如果这些变化不能迅速有效地进行，可能会导致服务退化或故障。因此，构建一个具有韧性、能适应这些快速变化的系统变得至关重要。
- en: In this context, the goal is not to prevent failure outright, but to create
    an environment where failures are manageable and their impacts are minimized.
    This involves adopting strategies that anticipate failures and implement mechanisms
    to quickly recover or roll back changes when necessary. It is about building robustness
    and resilience into the system, ensuring that it can withstand and recover from
    failures, rather than simply aiming for a failure-free operation. This section
    delves into how to accept failure as a systemic necessity in DevOps.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种背景下，目标不是完全避免失败，而是创造一个可以管理失败并最小化其影响的环境。这涉及到采用预见性策略，实施机制，在必要时迅速恢复或回滚变更。关键是将健壮性和韧性融入系统中，确保系统能够承受并从失败中恢复，而不仅仅是追求无故障的运行。本节将深入探讨如何将失败作为DevOps中的系统性必要性加以接受。
- en: Traditionally, the realms of infrastructure and application deployment have
    existed as separate domains. However, the advent of DevOps has ushered in an era
    where these boundaries blur into a unified landscape. Nowadays, infrastructure
    configuration is also defined by **Infrastructure as Code** (**IaC**). This means
    that infrastructure and apps can be released at the same time. You need to deploy
    both infrastructure and apps stably in both aspects in the context of DevOps.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，基础设施和应用程序部署的领域是分开的。然而，DevOps的出现带来了一个时代，打破了这些边界，形成了一个统一的环境。如今，基础设施配置也通过**基础设施即代码**（**IaC**）来定义。这意味着基础设施和应用程序可以同时发布。在DevOps的背景下，你需要在这两个方面都稳定地部署基础设施和应用程序。
- en: Let’s look at some practices that are particularly common when deploying services.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些在部署服务时特别常见的实践。
- en: Blue-green deployment
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 蓝绿部署
- en: 'Blue-green deployment is a strategy in software deployment that minimizes downtime
    and risk by maintaining two identical production environments. This method allows
    for safe and seamless transitions between software versions. As shown in the following
    diagram, the load balancer or **Platform as a Service** (**PaaS**) services’ capabilities
    switch traffic:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝绿部署是一种软件部署策略，通过维护两个相同的生产环境来最小化停机时间和风险。这种方法允许在软件版本之间进行安全和平滑的过渡。如下面的图示所示，负载均衡器或**平台即服务**（**PaaS**）服务的功能切换流量：
- en: '![Figure 5.9 – Blue-green deployment](img/B21203_05_09.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.9 – 蓝绿部署](img/B21203_05_09.jpg)'
- en: Figure 5.9 – Blue-green deployment
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – 蓝绿部署
- en: In this strategy, the blue environment hosts the current live version, while
    the green environment is used for the new version. Once the new version in the
    green environment is fully tested and ready, traffic is switched over from blue
    to green.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种策略中，蓝色环境承载当前的在线版本，而绿色环境用于新的版本。一旦绿色环境中的新版本完全测试并准备好，流量就会从蓝色切换到绿色。
- en: 'Key benefits of this approach include the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的关键好处包括以下几点：
- en: '**Easy rollback**: If issues are discovered in the green environment after
    going live, traffic can be quickly redirected back to the stable blue environment.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轻松回滚**：如果在绿色环境上线后发现问题，可以快速将流量重新引导回稳定的蓝色环境。'
- en: '**Minimal downtime**: Blue-green deployment allows you to release new versions
    of your software without any downtime for end users. The new version is deployed
    alongside the old one, and the switch is made instantly.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小化停机时间**：蓝绿部署使您能够在没有任何停机时间的情况下发布新版本的软件。新版本与旧版本并行部署，且切换瞬时完成。'
- en: '**Easy testing**: Developers and **Quality Assurance** (**QA**) teams can thoroughly
    test the new version in a production-like environment without affecting end users.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简便测试**：开发人员和**质量保证**（**QA**）团队可以在类似生产的环境中彻底测试新版本，而不会影响最终用户。'
- en: The terminology of blue-green is often perceived as a synonym for environments
    such as staging, QA, and production, but it is not exact. Unlike a traditional
    staging-to-production promotion, both the blue and green environments in this
    method are production-grade.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝绿的术语常常被视为类似于诸如预发布、质量保证和生产等环境的同义词，但它并不完全相同。与传统的预发布到生产的升级方式不同，这种方法中的蓝色和绿色环境都是生产级别的。
- en: 'Despite its advantages, there are notable challenges:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有其优点，但也存在一些显著的挑战：
- en: '**Requirement of two production environments**: This can be resource-intensive
    and costly. Maintaining two full-scale production environments can be expensive,
    even in a cloud computing context.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**需要两个生产环境**：这可能会消耗大量资源并且成本较高。即使在云计算环境中，维护两个完整的生产环境也可能是昂贵的。'
- en: '**Challenges with irreversible changes**: If changes such as database schema
    updates are not backward compatible, rollback can be complicated.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不可逆更改的挑战**：如果某些更改（如数据库架构更新）不向后兼容，回滚可能会变得复杂。'
- en: '**Stateful application considerations**: Synchronizing stateful data between
    environments can be complex.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有状态应用程序的考虑**：在不同环境之间同步有状态数据可能会比较复杂。'
- en: Typical steps
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常见步骤
- en: 'A practical example of blue-green deployment for a web application, where the
    current live version is 1.3 in the blue environment and the goal is to deploy
    version 1.4, can be outlined as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝绿部署在Web应用程序中的一个实际示例，其中当前实时版本为1.3，在蓝色环境中，目标是部署版本1.4，具体步骤如下：
- en: '**Deployment**: Initiate by deploying the new version, 1.4, to the green environment.
    This environment is a replica of the existing blue environment but hosts the new
    version.'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**部署**：首先将新版本1.4部署到绿色环境。该环境是现有蓝色环境的副本，但托管的是新版本。'
- en: '**Validation**: Conduct comprehensive testing in the green environment. This
    step is critical to ensure that the new version operates correctly and meets all
    necessary requirements.'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**验证**：在绿色环境中进行全面测试。此步骤至关重要，以确保新版本正常运行并满足所有必要的要求。'
- en: '**Traffic switch**: Once validation is successful, the next step is to switch
    user traffic. This is done by updating the load balancer settings to redirect
    traffic from the blue environment (version 1.3) to the green environment (version
    1.4).'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**流量切换**：验证成功后，下一步是切换用户流量。这是通过更新负载均衡器设置，将流量从蓝色环境（版本1.3）重定向到绿色环境（版本1.4）。'
- en: '**Monitoring**: After the traffic switch, closely monitor the green environment
    for any operational issues or unexpected behavior. This monitoring phase is crucial
    to quickly identify and address any problems that may arise post-deployment.'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**监控**：流量切换后，密切监控绿色环境中的任何操作问题或异常行为。这个监控阶段对于迅速识别和解决部署后可能出现的任何问题至关重要。'
- en: '**Finalization**: If the green environment with version 1.4 runs smoothly and
    no significant issues are detected, the deployment is deemed successful, and the
    green environment becomes the new production environment. However, if there are
    critical problems, you have the option to promptly revert traffic to the stable
    blue environment (version 1.3), minimizing disruption and risk.'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最终确认**：如果绿色环境中的版本1.4运行顺利且没有发现重大问题，则视为部署成功，绿色环境将成为新的生产环境。然而，如果出现严重问题，您可以选择及时将流量切换回稳定的蓝色环境（版本1.3），以最小化干扰和风险。'
- en: This methodical approach ensures a smooth transition between application versions,
    maintaining system stability and availability throughout the deployment process.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这种系统化的方法确保了应用版本之间的平稳过渡，在整个部署过程中保持系统的稳定性和可用性。
- en: Real-world scenario
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实际场景
- en: Achieving a successful blue-green deployment strategy requires a comprehensive
    understanding of your infrastructure and the tools available within your platform.
    The implementation approach can differ significantly based on whether you are
    using **Infrastructure as a Service** (**IaaS**) with VMs or PaaS with load balancers.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 实现成功的蓝绿部署策略需要对基础设施和平台内可用的工具有全面的了解。实施方法可能会根据你使用的是**基础设施即服务**（**IaaS**）与虚拟机（VM）还是带有负载均衡器的PaaS而有所不同。
- en: 'Here is a closer look at the different methods:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是不同方法的详细介绍：
- en: '**DNS load balancers**: In this approach, the changeover between blue and green
    environments is managed through DNS rewriting. This method is often used when
    the environments are hosted on different servers or clusters.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DNS 负载均衡器**：在这种方法中，蓝绿环境之间的切换是通过DNS重写来管理的。该方法通常用于环境托管在不同的服务器或集群上时。'
- en: '**Layer 4 network load balancers**: These perform the switchover by **Network
    Address Translation** (**NAT**) translation. It is a suitable option for switching
    between environments hosted within the same network infrastructure.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第四层网络负载均衡器**：这些负载均衡器通过**网络地址转换**（**NAT**）进行切换。这是一种适合在同一网络基础设施中切换环境的选项。'
- en: '**Layer 7 application load balancers**: Here, the routing to different application
    versions is managed at the application layer. This method provides more granular
    control over traffic distribution and is often used in complex deployments.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第七层应用负载均衡器**：在这里，不同应用版本的路由是在应用层进行管理的。该方法提供了更细粒度的流量分配控制，通常用于复杂的部署中。'
- en: Many PaaS solutions come with built-in load-balancing capabilities, simplifying
    the blue-green deployment process. In these setups, the load balancer can be easily
    configured to switch traffic between the blue and green environments. In such
    cases, users can set up switching simply by configuration without being aware
    of the presence of a load balancer.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 许多PaaS解决方案自带负载均衡功能，简化了蓝绿部署过程。在这些设置中，负载均衡器可以轻松配置以在蓝绿环境之间切换流量。在这种情况下，用户可以仅通过配置来设置切换，而无需意识到负载均衡器的存在。
- en: In more advanced environments, such as **Kubernetes** (**k8s**), network resources
    are managed as IaC, providing the capability for dynamic allocation. This enables
    the implementation of blue-green deployments through modifications to IaC configuration,
    typically achieved by editing YAML files. While numerous PaaS offerings abstract
    away network configuration complexities from users, certain platforms, such as
    Kubernetes, maintain network configurations internally within a single cluster,
    thereby enabling the same blue-green deployment approach to be applied seamlessly
    within the cluster.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在更先进的环境中，如**Kubernetes**（**k8s**），网络资源作为基础设施即代码（IaC）进行管理，提供动态分配的能力。这使得通过修改IaC配置来实现蓝绿部署成为可能，通常通过编辑YAML文件来实现。尽管许多PaaS解决方案会将网络配置的复杂性抽象化，某些平台，如Kubernetes，仍然在单一集群内维护网络配置，从而使得同样的蓝绿部署方法可以在集群内无缝应用。
- en: Switching methods
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 切换方法
- en: 'Now, how do we switch environments? There are several possible ways, so let’s
    take a look:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何切换环境呢？有几种可能的方式，让我们来看一下：
- en: '**Separate script or graphical UI (GUI) for load balancer configuration**:
    Some teams prefer to handle the switchover separately from the main deployment
    script. This can be done using a dedicated script or through a GUI, providing
    more control and oversight during the switch.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单独的脚本或图形用户界面（GUI）用于负载均衡器配置**：一些团队倾向于将切换过程与主要的部署脚本分开处理。这可以通过专用脚本或通过GUI完成，从而在切换过程中提供更多的控制和监督。'
- en: '**Load balancing configuration in deployment script**: This method involves
    scripting the load balancer setting changes directly in the deployment script.
    It is a streamlined approach that can automate the switchover process as part
    of the deployment pipeline.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在部署脚本中配置负载均衡**：这种方法涉及在部署脚本中直接编写负载均衡器设置的变化。这是一种简化的方式，可以将切换过程作为部署管道的一部分进行自动化。'
- en: '**Automation**: Automation encompasses the automated testing of the new version,
    ensuring that the switch only occurs when the new version performs successfully.
    This involves setting specific conditions for the release to proceed, often relying
    on components such as **End-To-End** (**E2E**) tests and monitoring for errors
    in the new environment.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化**：自动化包括对新版本进行自动化测试，确保只有在新版本成功运行时才会进行切换。这涉及为发布设置特定条件，通常依赖于**端到端**（**E2E**）测试和对新环境中的错误进行监控。'
- en: It is important to note that the timing of the switchover and the handling of
    existing connections can vary based on the system and service used. Each method
    has its nuances and requires careful planning to ensure a smooth transition with
    minimal disruption to the users.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，切换时机和现有连接的处理可能会根据所使用的系统和服务有所不同。每种方法都有其独特之处，需要精心规划，以确保平稳过渡，并尽量减少对用户的干扰。
- en: Rolling deployment
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滚动部署
- en: A rolling deployment is a deployment strategy used in distributed systems whereby
    updates are applied incrementally across the nodes of a cluster. This method reduces
    downtime and ensures **High Availability** (**HA**) while updating applications
    or systems.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动部署是一种用于分布式系统的部署策略，通过逐步在集群的节点上应用更新。该方法减少了停机时间，并确保在更新应用程序或系统时保持**高可用性**（**HA**）。
- en: 'It is used in clusters such as Kubernetes for stable releases with no downtime.
    A rolling deployment involves gradual releases, as shown in the following diagram:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 它用于像 Kubernetes 这样的集群中，进行稳定版本发布且不产生停机时间。滚动部署涉及逐步发布，如下图所示：
- en: '![Figure 5.10 – Rolling deployment](img/B21203_05_10.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.10 – 滚动部署](img/B21203_05_10.jpg)'
- en: Figure 5.10 – Rolling deployment
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10 – 滚动部署
- en: This way, we can safely update each release one by one.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们可以安全地逐个更新每个版本。
- en: Typical steps
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 典型步骤
- en: 'The process of a cluster rolling deployment generally involves the following
    steps:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 集群滚动部署的过程通常包括以下步骤：
- en: '**Preparation**: Before starting the update, ensure the system is ready for
    the upgrade. This includes taking backups of critical data and preparing the new
    version of the software or configuration to be deployed.'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**准备工作**：在开始更新之前，确保系统准备好进行升级。这包括对关键数据进行备份，并准备好要部署的新版本软件或配置。'
- en: '**Update the first node**: Begin the rolling update by selecting a single node.
    Instead of taking this node out of service before applying the update, the update
    is applied while the node is still in service. A new instance with the updated
    configuration or software is started alongside the existing ones.'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更新第一个节点**：通过选择一个单独的节点开始滚动更新。在应用更新之前，不是将该节点下线，而是在节点仍在服务时应用更新。一个带有更新配置或软件的新实例会与现有实例一起启动。'
- en: '**Health check**: Once the new instance is up and running, perform a thorough
    health check. This step is crucial to ensure that the new instance is correctly
    configured and capable of handling the intended workload without issues.'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**健康检查**：新实例启动并运行后，进行彻底的健康检查。这一步骤至关重要，以确保新实例配置正确，能够顺利处理预期的工作负载且没有问题。'
- en: '**Traffic shift**: After confirming that the new instance is healthy, gradually
    redirect traffic from the old instance to the new instance. This may involve adjusting
    load balancer settings or service discovery configurations to point to the new
    instance.'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**流量切换**：在确认新实例健康后，逐步将流量从旧实例切换到新实例。这可能涉及调整负载均衡器设置或服务发现配置，以指向新实例。'
- en: '**Remove old instance**: Once the new instance is successfully handling traffic,
    the old instance can be safely removed from service. This ensures there is no
    downtime, as the service continues uninterrupted during the update.'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**移除旧实例**：一旦新实例成功处理流量，旧实例就可以安全地从服务中移除。这可以确保没有停机时间，因为服务在更新过程中持续不中断。'
- en: '**Gradual rollout**: Continue with the rolling update by repeating the process
    for each node in the cluster. Update nodes one by one, ensuring each new instance
    is healthy and capable of handling traffic before decommissioning the old ones.'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**渐进式发布**：继续进行滚动更新，通过逐个节点地重复此过程。逐一更新每个节点，确保每个新实例在停用旧实例之前都能健康运行并处理流量。'
- en: '**Monitoring**: Throughout the update process, continuously monitor the system
    for any issues. Pay close attention to performance metrics and error logs to quickly
    identify and address any problems.'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**监控**：在更新过程中，持续监控系统是否存在问题。特别关注性能指标和错误日志，以便快速识别和解决任何问题。'
- en: '**Finalization**: After all nodes have been updated and old instances removed,
    the rolling update is complete. Conduct a final review to ensure the entire system
    is stable, performing as expected, and that all instances are running the new
    version.'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**完成操作**：在所有节点更新并删除旧实例后，滚动更新完成。进行最后审核以确保整个系统稳定，按预期运行，并且所有实例都在运行新版本。'
- en: Real-world scenario
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实际应用场景
- en: In real-world scenarios, a cluster rolling deployment is particularly vital
    in environments where continuous availability is crucial. This approach is commonly
    used in cloud computing services, data centers, and large-scale web applications.
    For example, updating a Kubernetes cluster or a database cluster often employs
    this strategy to avoid downtime and service disruptions. Also, be aware that rolling
    upgrades include both the application context and the infrastructure context.
    In the case of Kubernetes, in addition to cluster-side upgrades, there is also
    such a procedure for application upgrades.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际应用场景中，集群滚动部署在连续可用性至关重要的环境中尤为重要。此方法通常用于云计算服务、数据中心和大型网络应用程序。例如，更新Kubernetes集群或数据库集群经常使用此策略，以避免停机和服务中断。此外，请注意滚动升级包括应用上下文和基础设施上下文。在Kubernetes的情况下，除了集群端升级外，还存在应用升级的相应过程。
- en: This may be done through in-place upgrades while the service is running, but
    in mission-critical services, such as financial services, it may be applied in
    conjunction with other release strategies. This is like a blue-green deployment
    with a cloud load balancer in front of the cluster itself and distributed.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过在服务运行时进行现场升级完成，但在金融服务等关键服务中，可能与其他发布策略结合使用。这类似于云负载均衡器前面的蓝绿部署和分布式集群本身。
- en: While it is true that some of these have a discourse of losing the benefits
    of rolling upgrades in some cases, it means that the configurations that open
    source projects and service vendors generally consider best practices do not necessarily
    match configurations that can realistically be taken.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管某些情况下确实存在失去滚动升级优势的论述，但这意味着开源项目和服务供应商通常认为的最佳配置实践未必与实际可采用的配置相匹配。
- en: Switchover methods
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 切换方法
- en: The method of a rolling deployment varies in difficulty depending on whether
    the system supports it as a feature. In a cluster orchestrator such as Kubernetes,
    updates can be rolled out using automated orchestrators, which manage the process
    of updating nodes and conducting health checks, while there are cases where a
    rolling deployment is still a reality, traditionally done by hand.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动部署的方法难易程度因系统是否支持作为特性而异。在诸如Kubernetes之类的集群编排器中，可以使用自动编排器推出更新节点并进行健康检查的流程管理器，同时也存在通过手工传统实现滚动部署的情况。
- en: For example, if a single-tenant service is hosted in an isolated environment
    for an individual company and each environment requires updates, then deploying
    customers in several tiers is categorized and updates are done gradually. While
    this is also a type of rolling deployment, explicitly referring to DevOps practices
    will often refer to automated practices.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果单租户服务托管在为个别公司提供隔离环境的环境中，并且每个环境都需要更新，则将客户分层部署并逐步进行更新。虽然这也是一种滚动部署类型，但明确引用DevOps实践通常会涉及自动化实践。
- en: A cluster rolling deployment is essential for maintaining the reliability and
    stability of distributed systems during upgrades or maintenance. By updating nodes
    sequentially, this strategy minimizes the risk of system-wide failures and ensures
    that services remain available to users throughout the process.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 集群滚动部署对于在升级或维护过程中维护分布式系统的可靠性和稳定性至关重要。通过顺序更新节点，此策略最小化了系统范围故障的风险，并确保在整个过程中服务仍然对用户可用。
- en: Canary deployment
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 金丝雀部署
- en: A canary deployment is a technique whereby new versions of the software are
    rolled out gradually to a small subset of users before being deployed to the entire
    user base. This approach allows developers to test the new version in a real-world
    environment with minimal risk.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 金丝雀部署是一种技术，通过逐步向用户的一小部分推出新软件版本，然后再向整个用户群体部署。此方法允许开发人员在实际环境中以最小风险测试新版本。
- en: 'In a canary deployment, instead of releasing a new version to all users at
    once, the update is first introduced to a small group of users – the **canaries**.
    This group acts as an early indicator for any potential issues, hence the name
    *canary*, akin to the canaries used in coal mines to detect harmful gases. By
    monitoring the behavior and performance of the software with these initial users,
    developers can identify and address any issues before a full rollout. As shown
    in the following diagram, the switching is implemented gradually, and once stability
    is confirmed, the range is expanded:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在金丝雀部署中，新的版本不会一次性发布给所有用户，而是首先向一小部分用户——**金丝雀**——推出。这个小组充当潜在问题的早期指示器，因此得名*金丝雀*，类似于过去矿井中用来检测有害气体的金丝雀。通过监控这些初始用户的软件行为和表现，开发人员可以在全面发布前识别并解决任何问题。如图所示，切换是逐步进行的，一旦确认稳定性，范围就会扩大：
- en: '![Figure 5.11 – Canary deployment](img/B21203_05_11.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.11 – 金丝雀部署](img/B21203_05_11.jpg)'
- en: Figure 5.11 – Canary deployment
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.11 – 金丝雀部署
- en: This is essentially the same as a rolling deployment but differs in duration
    and the activities and objectives associated with it. Rolling deployments are
    intended to replace older versions of applications sequentially with newer versions
    by completely replacing the infrastructure on which the application is running,
    and health checks are performed and completely replaced within a short period
    of time. In most cases, this is done in a few minutes to a few hours. For large
    systems, it might take several days.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这本质上与滚动部署相同，但在持续时间以及与之相关的活动和目标上有所不同。滚动部署的目的是通过完全替换应用运行基础设施，逐步用新版本替换旧版本，并在短时间内执行健康检查并完全替换。在大多数情况下，这通常在几分钟到几小时内完成。对于大型系统，可能需要几天时间。
- en: Canary releases, on the other hand, take a relatively long period of time to
    observe how the system behaves in response to user behavior and to use that feedback
    for a stable release.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，金丝雀发布需要较长的时间来观察系统如何响应用户行为，并利用这些反馈进行稳定版本的发布。
- en: Although canary releases are sometimes confused with beta releases targeted
    at a subset of users, it should be noted that canary releases are clearly a practice
    with release stability as a major objective. The methodology for targeted beta
    releases is covered in the *Feature* *flag* section.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管金丝雀发布有时会与面向用户子集的测试版发布混淆，但需要注意的是，金丝雀发布显然是一种以发布稳定性为主要目标的实践。面向用户子集的测试版发布方法将在*功能*
    *标志*部分中详细介绍。
- en: 'Key benefits of a canary deployment include the following:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 金丝雀部署的关键好处包括以下几点：
- en: '**Risk mitigation**: By limiting the exposure of the new version, any negative
    impact is contained and affects only a small portion of the user base'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**风险缓解**：通过限制新版本的曝光，任何负面影响都能被控制，且只影响少部分用户群体。'
- en: '**Real-world testing**: Provides an opportunity to observe how the new version
    performs under real-world conditions'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**真实世界测试**：提供一个观察新版本在真实环境中表现的机会。'
- en: '**User observation**: Early observation from a subset of users can be invaluable
    for making adjustments before the wider release'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户观察**：从一部分用户那里进行早期观察，对于在更广泛发布前进行调整至关重要。'
- en: '**Gradual rollout**: Offers a controlled way to manage the release process,
    reducing the likelihood of widespread issues'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**逐步发布**：提供一种受控方式来管理发布过程，降低广泛问题发生的可能性。'
- en: 'However, it also has its challenges:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它也有其挑战：
- en: '**Segmentation**: Deciding which users should be part of the canary group can
    be challenging.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分组**：决定哪些用户应该属于金丝雀组可能具有挑战性。'
- en: '**Monitoring complexity**: Requires robust monitoring tools to effectively
    track the performance of the new version.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控复杂性**：需要强大的监控工具来有效跟踪新版本的性能。'
- en: '**Consistent user experience**: Ensuring a consistent experience for all users,
    regardless of the version they are using, can be difficult. For example, when
    a new backend service is developed, it must be released with the assurance that
    the current service will continue to work properly.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致的用户体验**：确保所有用户都能获得一致的体验，无论他们使用的是哪个版本，这可能很困难。例如，当开发一个新的后端服务时，必须确保它的发布不会影响当前服务的正常运行。'
- en: Typical steps
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 典型步骤
- en: 'Let’s take a look at each of these steps:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这些步骤：
- en: '**Deployment**: Initially, deploy the new version to a small percentage of
    your infrastructure, which will serve a fraction of your user base.'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**部署**：最初，将新版本部署到基础设施的少部分部分，这部分将服务于你的一小部分用户。'
- en: '**Monitoring and analysis**: Observe the behavior of the application closely.
    Use metrics, logs, and user feedback to evaluate performance and identify any
    issues.'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**监控和分析**：密切观察应用程序的行为。使用度量指标、日志和用户反馈来评估性能并识别问题。'
- en: '**Expansion**: If the initial deployment is successful, gradually increase
    the percentage of users accessing the new version. Continue monitoring and analyzing
    user feedback and system performance.'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**扩展**：如果初始部署成功，逐步增加访问新版本的用户比例。继续监控并分析用户反馈和系统性能。'
- en: '**Full rollout**: Once confident that the new version is stable and well received,
    proceed with the full rollout to all users.'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**全面发布**：一旦确认新版本稳定且获得良好反馈，即可进行全量发布，推向所有用户。'
- en: '**Roll back if necessary**: If significant issues are identified during the
    canary phase, roll back the changes quickly to minimize impact.'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**必要时回滚**：如果在金丝雀阶段发现重大问题，迅速回滚更改以最小化影响。'
- en: Real-world scenario
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现实世界场景
- en: Canary releases will be applied differently depending on the number of users
    and services to be deployed.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 金丝雀发布将根据用户数量和要部署的服务进行不同的应用。
- en: For example, when Microsoft applies canary releases to deploy Azure features,
    the canaries can be selected from a particular data center or a particular cluster
    of data centers. This is because it clearly narrows down the affected users and
    minimizes the impact. Another advantage of this clear user focus is that the situation
    can be observed on an ongoing basis. When stability is confirmed by deploying
    to a particular cluster or data center, the next step is to expand the deployment
    to a wider target.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当微软应用金丝雀发布来部署Azure功能时，金丝雀可以从特定的数据中心或数据中心集群中选择。这是因为它能够清晰地缩小受影响的用户范围，最小化影响。这个清晰的用户焦点的另一个好处是可以持续观察情况。当通过部署到特定集群或数据中心来确认稳定性时，下一步是将部署范围扩展到更广泛的目标。
- en: In the absence of the ability to target specific data centers or clusters, canary
    releases are frequently executed in a more randomized manner, leveraging the capabilities
    of cloud platforms. For instance, consider the approach of directing a random
    subset of users, say 5%, to a newly configured environment. This method employs
    a weight-based distribution strategy, where initially a small percentage such
    as 5% is chosen, subsequently increasing to 10%, 25%, and eventually 100% as confidence
    in the new environment grows. During this process, the load balancer is configured
    to allocate the defined percentage of user requests to the staging or new environment.
    Many cloud load balancers use this weight-based method.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在无法针对特定数据中心或集群进行定位的情况下，金丝雀发布通常以更随机的方式执行，利用云平台的能力。例如，考虑将一部分用户（例如5%）随机引导到一个新配置的环境中。这种方法采用基于权重的分配策略，最初选择一个小比例（如5%），然后逐步增加到10%、25%，最终达到100%，随着对新环境的信心逐步增强。在此过程中，负载均衡器配置为将定义的用户请求比例分配到暂存环境或新环境中。许多云负载均衡器使用这种基于权重的方法。
- en: To enhance user experience consistency, some services use cookies to ensure
    subsequent requests from the same client are directed to the same instance. However,
    the primary method of traffic allocation under this model is largely random. For
    instance, in the scenario where 5% of users are routed to a new environment and
    an error exists in the new version, there is a proportional 5% likelihood of users
    encountering the error, but all the users have that possibility.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高用户体验的一致性，一些服务使用cookies来确保来自同一客户端的后续请求被引导到相同的实例。然而，在这种模型下，流量分配的主要方法仍然是随机的。例如，在5%的用户被引导到新环境且新版本存在错误的情况下，用户遇到错误的可能性是5%，但所有用户都有这种可能性。
- en: Alternatively, a more deterministic method involves the use of header-based
    routing. This technique involves inserting specific information into the request
    header, which is then utilized to direct traffic. This approach reduces randomness
    by enabling targeted trials for specific users or user groups. The feasibility
    of implementing this method depends on the capabilities of the cloud service being
    used.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，一种更确定性的方法是使用基于头部的路由。这种技术涉及将特定信息插入请求头中，然后利用这些信息来引导流量。通过为特定用户或用户群体进行定向试验，这种方法减少了随机性。这种方法的可行性取决于所使用云服务的功能。
- en: Both methods provide mechanisms for the gradual exposure of new updates or features,
    but each with its own level of control. For example, DNS load balancers do not
    read header information, so they basically only distribute weights, but they may
    be able to distribute by country. Layer 7 application load balancers, on the other
    hand, can read header information and other information.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Canary selection methods
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In canary deployments, managing how users are exposed to the new version is
    crucial. Various methods can be employed to control this exposure:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '**Weight-based approach**: This method involves allocating a certain percentage
    of traffic to the new version. For example, initially, 5% of users may be directed
    to the new environment, gradually increasing to 25%, 50%, and ultimately 100%
    as confidence in the new version grows. Load balancers are often configured to
    handle this distribution of traffic based on predefined weights.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Header-based routing**: This technique utilizes specific information added
    to the request headers to direct traffic to the appropriate version. This method
    is less random than weight-based routing and allows for more targeted testing,
    such as exposing the new version to certain user groups or individuals based on
    header criteria.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cookie-based routing**: Some services use cookies to ensure that subsequent
    requests from the same client are consistently directed to the same version (either
    new or old). This approach helps maintain a consistent user experience and is
    particularly useful for session persistence.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Geography-based distribution**: In some cases, traffic can be distributed
    based on the geographical location of the users. Some DNS load balancers, for
    example, can route traffic differently based on the country or region, which can
    be useful for global services looking to roll out updates in specific areas first.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing the right switchover method is a critical decision in canary deployments,
    as it directly impacts the ability to effectively test the new version and respond
    to any issues that may arise during the initial rollout phase.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: A canary deployment is a strategic approach to software releases, offering a
    balanced mix of risk mitigation and real-world testing. By gradually introducing
    changes, it allows for a more measured and informed approach to software deployment.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: We have seen how to deploy applications and how to release them seamlessly and
    securely. Now that we have looked at strategies for how to deploy, we will next
    look at how to release at a more functional level.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: Feature release strategies
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have focused on releasing the infrastructure and the service as a
    whole, but now, we will focus on releasing the features within the service. For
    feature releases, we introduce a release style called the feature flag and release
    train.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Feature flag
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Feature flag deployment is a technique used in software development and delivery
    that involves toggling on or off certain features of an application without deploying
    new code. This method allows for more granular control over feature release, testing,
    and rollback, enabling a more dynamic and flexible approach to software management.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'The main drawback of using feature flags for anything is that feature flags
    can easily become a technical liability. Unused feature flags can clutter up the
    code base. Feature flags enable features for specific users or groups, as shown
    in the following diagram:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12 – Feature flag](img/B21203_05_12.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
- en: Figure 5.12 – Feature flag
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: Dark launches are typically released to user groups that do not know they are
    being tested and have not been told about the new feature at all. The advantage
    of this, on the other hand, is that it can be applied to any user group that wishes
    to do so, and not just to certain categories of users.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: Typical steps
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The implementation of feature flags typically involves the following steps:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '**Implementation of feature flags in code**: Developers write conditional code
    for new features, controlled by feature flags. These flags can be toggled on or
    off, determining whether the feature is active.'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Integration with feature management system**: The feature flags are then
    integrated with a feature management system, which allows for controlling and
    changing the flags without needing to modify the code base.'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Testing**: Before enabling the feature for all users, it is often tested
    with a limited audience, similar to a canary release. This testing can be targeted
    based on user segments, geography, or other criteria.'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Gradual rollout**: After initial testing, the feature can be gradually rolled
    out to more users, allowing for careful monitoring of its impact and performance.'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Monitoring and feedback**: Continuous monitoring is essential to quickly
    identify any issues. Feedback from users during the rollout phase is also valuable
    for further refinement.'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Full rollout or rollback**: Depending on the feedback and performance, the
    feature can be fully rolled out to all users or rolled back by simply toggling
    the feature flag off.'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Real-world scenario
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Feature flags are an integral tool for modern software teams, enabling them
    to deliver features more efficiently and with greater control. This approach reduces
    risks associated with deploying new features and allows for more Agile product
    development and iteration. Their application extends across various aspects of
    software development, including A/B testing and dark launches.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: The following subsections are real-world examples illustrating these applications.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: A/B testing
  id: totrans-260
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s say a software team at an e-commerce company might use feature flags
    to test two different checkout page designs. They would create two variants: Design
    A (the current design) and Design B (the new design). By employing feature flags,
    they can expose Design B to a small, randomized group of users while the rest
    continue to see Design A. The team then monitors **Key Performance Indicators**
    (**KPIs**) such as conversion rates, **Average Order Value** (**AOV**), and user
    feedback. This data helps them understand which design performs better in terms
    of user engagement and sales conversion. Based on the results, they can decide
    to either roll out Design B to all users, iterate on it, or revert to Design A,
    all with minimal disruption to the overall user experience.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: Dark launch
  id: totrans-262
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A social media platform might use dark launches to test a new feature, such
    as an enhanced image recognition algorithm. They release the feature *in the dark*,
    meaning it is live but not visible to users. The platform then collects data on
    how the new algorithm performs in terms of accuracy and speed compared to the
    old one, without users being aware of the change.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: This approach allows the platform to gather real-world data on the feature’s
    performance and iron out any issues before making it visible to users. If the
    new algorithm does not perform as expected, they can refine or roll it back without
    impacting the user experience.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: Feature flag deployment empowers teams to test and release features with higher
    confidence and control. By decoupling deployment from release, it allows for more
    flexibility, quicker iteration, and reduced risk in software development processes.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Release train
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A release train is a concept in software development that emphasizes regular,
    scheduled deliveries of new features, enhancements, and fixes. It aligns multiple
    teams and processes to ensure a coordinated and predictable release cycle, significantly
    improving the efficiency and reliability of software deployments. As shown in
    the following diagram, the release train only releases those that meet the deadline:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13 – Release train](img/B21203_05_13.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
- en: Figure 5.13 – Release train
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: Typical steps
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The release train approach typically involves the following steps:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '**Planning and coordination**: Establish a release schedule that all teams
    adhere to. This schedule includes fixed intervals (for example, bi-weekly, monthly)
    at which new features and updates are released.'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Development and testing**: Teams work on their respective features and fixes
    within the defined timeline. CI and **Continuous Testing** (**CT**) are employed
    to ensure code quality and compatibility.'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Integration and staging**: All features, enhancements, and fixes are integrated
    into a staging environment. This stage is crucial for identifying any integration
    issues and ensuring that all components work together seamlessly.'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Release review**: Conduct a review meeting with all stakeholders to ensure
    that the release is ready to be deployed. This meeting assesses the quality, functionality,
    and potential impact of the release.'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Deployment**: Once approved, the release is deployed to production according
    to the schedule. The deployment process is typically automated to reduce human
    error and increase efficiency.'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Monitoring and feedback**: After the release, continuous monitoring is essential
    to quickly identify and address any post-deployment issues. Feedback from users
    and stakeholders is collected for future improvements.'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Real-world scenario
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a large software organization, the release train approach can significantly
    streamline the deployment process. For instance, a company developing a suite
    of business applications might have multiple teams working on different modules
    such as finance, HR, and operations. By adopting the release train model, the
    organization ensures that updates across all modules are released in a coordinated
    manner. Every month, new features and updates from each team are integrated, tested,
    and then deployed simultaneously. This synchronization avoids complexities and
    conflicts that can arise when different teams deploy updates independently.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, this approach provides customers with a predictable update schedule,
    enabling them to plan for the adoption of new features and updates. It also allows
    for more efficient allocation of resources within the organization, as teams can
    plan their workloads in accordance with the release schedule.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: In essence, the release train model fosters a disciplined, predictable, and
    efficient release process, benefiting both the development teams and the end users.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has equipped you with the knowledge and skills to transform your
    development workflow into a model of automation excellence. The journey through
    the pages of this chapter has taken you from the foundational elements of GitHub
    Actions to strategic deployment and release techniques that stand at the forefront
    of modern software practices. To go further from here, you need to deepen such
    things as testing and concurrency. These things are not only connected to how
    the pipeline is put together but also to the philosophy of testing and integration.
    I hope you will continue to learn more.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: By embracing the practices and strategies outlined herein, you are now poised
    to craft workflows that are not only efficient and robust but also secure and
    compliant with the highest standards. Let this chapter be a constant companion
    as you continue to innovate and excel in the evolving landscape of software development.
    In the upcoming chapter, we will delve into the critical areas of DevOps metrics,
    DevSecOps, and scaling collaboration, exploring how these concepts play a pivotal
    role in enhancing the efficiency and security of software development and deployment
    processes.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*About custom* *actions*: [https://docs.github.com/en/actions/creating-actions/about-custom-actions](https://docs.github.com/en/actions/creating-actions/about-custom-actions)'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Reusing* *workflows*: [https://docs.github.com/en/actions/using-workflows/reusing-workflows](https://docs.github.com/en/actions/using-workflows/reusing-workflows)'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Part 3: Beyond DevOps'
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part provides a detailed examination of DevOps, emphasizing the role of
    metrics, the incorporation of DevSecOps practices, and strategies for scaling
    collaboration in organizations. It then shifts focus to the integration of AI
    in software development, exploring tools such as GitHub Copilot and best practices
    for coding with AI assistance, including prompt crafting and AI-friendly programming
    principles. Finally, it reflects on the transformative impact of technologies
    such as Git, GitHub, DevOps, and AI in software development, contemplating the
    future influence of AI on software engineering practices.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B21203_06.xhtml#_idTextAnchor125)*, Enriching DevOps Implementation*'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B21203_07.xhtml#_idTextAnchor141)*, Accelerate Productivity with
    AI*'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B21203_08.xhtml#_idTextAnchor157)*, Reflection and Conclusion*'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
