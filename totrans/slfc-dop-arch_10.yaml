- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Monitoring for Changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore some vital aspects of managing your Salesforce
    environment. The key to maintaining a stable and smooth-running Salesforce environment
    lies in efficient change management and monitoring. However, with the increasing
    complexity and volume of data, manual change control becomes less feasible. Hence,
    the need for automation and comprehensive environment monitoring arises.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will delve into the importance of monitoring your Salesforce environment.
    We will examine how uncontrolled changes, even those made with good intentions,
    can lead to instability and disrupt the smooth functioning of your Salesforce
    environment. We will also discuss how monitoring tools can help us detect changes
    across our environments, giving us the ability to see the who, what, when, and
    where of all changes, both intentional and unintentional.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to metadata monitoring, we will also explore how monitoring other
    factors, such as data metrics, can help us spot potential issues before they become
    user-impacting. We will discuss how monitoring changes can provide us with crucial
    insights into the health of our environments, and how this can boost our confidence
    that our environments align with the source of truth.
  prefs: []
  type: TYPE_NORMAL
- en: We will also learn about different types of monitoring, such as metadata monitoring,
    data monitoring, posture monitoring, and operational monitoring and observability.
    Each of these types of monitoring has its unique importance and role in maintaining
    a stable Salesforce environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: How to manage your environments through different kinds of monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How metadata monitoring works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How and why to monitor for relevant data changes in your environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a comprehensive understanding of the
    importance of environment monitoring in Salesforce and how it can help you maintain
    a stable and efficient Salesforce environment. The knowledge you will gain from
    this chapter will be instrumental in helping you avoid instability and disruptions
    in your Salesforce environment.
  prefs: []
  type: TYPE_NORMAL
- en: How to manage your Salesforce environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing your Salesforce environment is crucial for the stability and effectiveness
    of your organization’s operations. The importance of this task cannot be overstated
    – a well-managed Salesforce environment ensures seamless workflows, data integrity,
    and optimal performance. The consequences of neglecting this aspect can be severe.
    You can experience a cascade of issues starting with minor data discrepancies,
    which can escalate into major workflow disruptions. Eventually, these problems
    can lead to a substantial loss in customer trust and a notable drop in revenue.
  prefs: []
  type: TYPE_NORMAL
- en: This underscores that, without vigilant management, the risk of operational
    disruptions, compromised data security, and, ultimately, financial and reputational
    damage increases significantly. In the following sections, we will delve into
    the different types of monitoring that are necessary for maintaining the health
    and alignment of your Salesforce environments, illustrating why proactive and
    comprehensive management is not just beneficial but essential for any enterprise
    leveraging Salesforce.
  prefs: []
  type: TYPE_NORMAL
- en: The need for monitoring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We strive to maintain stability and integrity across our Salesforce environments.
    But uncontrolled changes, no matter how well-intentioned, can undermine our efforts.
    A developer tweaks a validation rule directly in production. An admin deletes
    some ostensibly outdated fields in a sandbox. Changes occur outside the pipeline
    that cause environments to drift out of sync. Before we know it, we’re battling
    instability instead of innovating.
  prefs: []
  type: TYPE_NORMAL
- en: Change management is non-negotiable for enterprise Salesforce development. However,
    manual change control has limitations. As environments and team sizes grow, we
    need automation to stay on top of changes. Comprehensive environment monitoring
    gives us that advantage.
  prefs: []
  type: TYPE_NORMAL
- en: In the context of DevOps and system monitoring, it is crucial to emphasize the
    significance of a robust deployment process as the primary line of defense against
    unforeseen system alterations. An efficient and straightforward deployment process
    minimizes the likelihood of circumventing source control, thereby reducing the
    risk of unexpected changes. While monitoring remains an essential aspect, refining
    the deployment process can substantially decrease the frequency and severity of
    anomalies detected during monitoring. This approach underlines the interdependence
    between deployment strategies and monitoring efficacy, illustrating that improvements
    in deployment procedures can lead to a more stable and predictable system behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Robust monitoring goes beyond production and examines changes throughout our
    environments. Sandboxes, especially developer sandboxes, are hotbeds of experimentation.
    Changes here may intentionally fall outside the pipeline at first. But we still
    need visibility. Staging and testing sandboxes also require oversight to prevent
    unvalidated changes from proliferating.
  prefs: []
  type: TYPE_NORMAL
- en: With automated monitoring, we can detect changes across all our environments,
    not just production. The most advanced tools capture point-in-time snapshots of
    metadata and compare them to identify modifications. This allows us to see the
    who, what, when, and where of all changes, both intended and unintended.
  prefs: []
  type: TYPE_NORMAL
- en: Metadata monitoring focuses specifically on changes to components such as custom
    objects, fields, Apex classes, and Lightning pages. But keeping tabs on other
    environmental factors is also key. Data metrics can help us spot many problems
    before they impact the user.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring changes gives us crucial insights into the health of our environments.
    We gain confidence that environments align with the source of truth. We can validate
    that the intended changes propagate properly through the pipeline. We can also
    rapidly respond to unintended changes before they create stability issues.
  prefs: []
  type: TYPE_NORMAL
- en: By combining proactive monitoring with streamlined remediation, we can take
    control of changes in Salesforce. Our development teams gain the freedom to innovate
    without jeopardizing stability. Architects sleep easier knowing environments align
    with design, and our users enjoy maximum uptime and productivity. In the following
    sections, we’ll dive into these topics in greater detail.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring different kinds of monitoring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Effective monitoring is the cornerstone of maintaining and improving the performance,
    security, and reliability of systems. Different kinds of monitoring cater to diverse
    aspects of Salesforce environments, each serving a unique purpose and providing
    distinct insights. Understanding these varieties is not just about gathering data;
    it’s about strategically utilizing this information to make informed decisions
    and proactively manage systems.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ll delve into the various forms of monitoring – from metadata
    and data pattern monitoring to posture monitoring and operational observability.
    Each type plays a critical role in understanding and optimizing a Salesforce environment.
  prefs: []
  type: TYPE_NORMAL
- en: Metadata monitoring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Metadata monitoring** refers to the practice of tracking changes made to
    Salesforce metadata components such as custom objects, fields, workflows, and
    Apex code. By monitoring metadata, admins can stay aware of configuration changes
    being made across their orgs with relatively low latency. This gives visibility
    into who made what changes and when, which is useful for troubleshooting, compliance,
    and change management. The goal of metadata monitoring is to maintain control
    and transparency over customizations as teams scale their Salesforce development.
    Rather than manual checks, automated tools can watch metadata around the clock
    and alert the required people on important updates.'
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring changes and patterns in Salesforce data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to monitoring metadata, it’s important to monitor changes and patterns
    in Salesforce data itself. Configuration data, such as CPQ configurations, should
    be tracked as though it were metadata. Data anomalies such as spikes, drops, or
    outliers should be monitored for potential data quality issues or business changes.
    Ongoing data behavior such as growth trends, usage patterns, and data flows should
    be analyzed to inform capacity planning and optimization. Automated tools can
    apply logic to surface insights from production data in real time. The goal is
    to gain visibility into both data stability and change to proactively identify
    and address potential problems.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring posture
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Posture monitoring** refers to evaluating the overall security health of
    a Salesforce org. This includes tracking configuration settings such as user permissions,
    credential policies, and sharing rules to detect risky settings that could enable
    access exposures or breaches. Posture monitoring also means analyzing usage patterns
    to identify abnormal end user or integration behavior that could signal compromised
    credentials or attacks. Tools can automatically check configurations against security
    benchmarks and alert when potential vulnerabilities are introduced. The goal is
    to achieve ongoing visibility into the security standing of Salesforce orgs and
    prompt notifications of changes that induce risk. Posture monitoring enables admins
    to proactively remediate issues before they can be exploited and maintain the
    secure posture of their instances.'
  prefs: []
  type: TYPE_NORMAL
- en: Operational monitoring and observability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Operational monitoring** refers to tracking the performance, availability,
    and overall health of applications and infrastructure in production environments.
    This includes monitoring metrics such as response times, error rates, and resource
    utilization to detect problems and optimize configurations. Observability builds
    on operational monitoring by incorporating additional signals such as logs, traces,
    and custom telemetry to gain deeper context and insights into system behavior.'
  prefs: []
  type: TYPE_NORMAL
- en: Together, operational monitoring and observability provide the real-time visibility
    required to keep applications and services running smoothly. However, the focus
    is on monitoring the current state rather than changes over time. While important
    disciplines in their own right, operational monitoring and observability are distinct
    from the change monitoring we have covered. Change monitoring, for instance, might
    focus on how customizations evolve over time, while operational monitoring might
    focus on whether the deployed customizations keep functioning within their performance
    parameters and continue to meet their acceptance criteria.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of change monitoring is tracking alterations to configurations, data,
    and security to identify risks, issues, and improvement opportunities proactively
    through alerts and audit trails. In contrast, operational monitoring and observability
    aim to facilitate rapid troubleshooting and optimization reactively when performance
    problems or outages occur in production. Since our focus is on change monitoring
    rather than current state visibility, we will not be covering the specifics of
    operational monitoring or observability practices in this book. However, they
    are complementary disciplines that are part of a comprehensive monitoring strategy.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we introduced an extensive range of topics, from the necessity
    of metadata and data pattern monitoring to the critical aspects of posture monitoring
    and operational observability. We learned that each form of monitoring plays a
    pivotal role in not only safeguarding the integrity and security of our Salesforce
    orgs but also in enhancing their performance and reliability. We will now move
    on to monitoring the changes to our organization’s metadata.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring metadata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll delve into the pivotal role of metadata monitoring within
    the Salesforce platform, an aspect that stands as the cornerstone of environment
    control and management. Metadata, the underlying structure defining every component
    in your Salesforce org, undergoes constant evolution as your organization customizes
    and expands.
  prefs: []
  type: TYPE_NORMAL
- en: By providing a comprehensive overview of how and why metadata should be monitored,
    we aim to underscore the necessity of implementing robust metadata monitoring
    strategies, thus ensuring a more controlled, transparent, and efficient Salesforce
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Why monitor metadata?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Monitoring changes made to metadata is an essential discipline. As you customize
    and expand your org, the associated metadata evolves as well. This happens because
    everything in the core Salesforce platform exists as metadata, so any change you
    make results in changing that metadata. This also means your metadata gets more
    complex as your level of customization increases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tracking these metadata changes provides the following multifaceted benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enabling collaboration**: With visibility into metadata alterations, developers
    can avoid costly overwrites of parallel work in progress. Developers and admins
    share a common understanding of the current state across connected orgs, reducing
    misalignments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Accelerating development**: Identifying misalignments early prevents cascading
    reworks. If a new field was added to a sandbox but not production, catching this
    early prevents wasted efforts building on top of the discrepant metadata.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Supporting compliance**: Detailed metadata change history satisfies governance
    processes requiring audit trails of modifications. On-demand reports can validate
    that proper protocols were followed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without comprehensive monitoring, metadata changes can accumulate in the shadows
    and go unchecked. Perhaps a developer adds a field in a sandbox but neglects to
    deploy it to production. An admin directly adjusts a validation rule in production
    to fix a bug. These small undetected misalignments slowly snowball into major
    headaches.
  prefs: []
  type: TYPE_NORMAL
- en: Manual tracking and loose version control workflows have blind spots. Metadata
    alterations inevitably slip by unnoticed. Automated solutions can close these
    gaps by regularly cataloging metadata state across all connected orgs down to
    the most granular components, but they come at a cost. Comparisons reveal precise
    differences, highlighting each metadata addition, deletion, or modification in
    any environment.
  prefs: []
  type: TYPE_NORMAL
- en: With a more comprehensive view, architects can gain more visibility into the
    shape and stability of their Salesforce environments. Developers proceed with
    confidence, assured parallel work will not be overwritten. Products and admins
    collaborate from a shared source of truth. Compliance teams have an audit trail
    of modifications.
  prefs: []
  type: TYPE_NORMAL
- en: As architects, we often work as stewards of the long-term health of the environments
    we work with, and diligently tracking changes to metadata can be an important
    part of that. Fortunately, solutions exist to fit robust metadata oversight seamlessly
    into modern development practices. We will explore this in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring metadata in production
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Monitoring metadata changes in production orgs is critical for maintaining transparency
    and control as environments scale and evolve. The main objective is to gain ongoing
    visibility into customizations being made across the org by various teams and
    individuals. Even if these components are deployed through a CI/CD pipeline, we
    still need the security of knowing that the metadata in production is as expected.
    By tracking all metadata component additions, edits, deletions, and deployments,
    admins can stay aware of new features and configurations entering the org in real
    time rather than manually piecing together change activity after the fact.
  prefs: []
  type: TYPE_NORMAL
- en: With metadata change visibility, admins can identify who made what changes,
    when to support auditing, when to troubleshoot, and change management processes.
    Monitoring metadata enables identifying consequences and tracing the causes back
    to a specific configuration change that introduced an issue. It also supports
    compliance by providing documentation of all customizations. Additionally, monitoring
    metadata changes helps surface unnecessary duplications that should be consolidated,
    as well as orphaned components that can be removed. The overarching goal is maintaining
    a well-managed, transparent organizational structure as complexity increases over
    time through ongoing visibility.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, some minor metadata customizations, such as reports and documents,
    can safely be changed directly in production, but monitoring this metadata is
    still required to maintain visibility and control over changes being made across
    environments. Even for allowable production changes, tracking who made what changes
    and when is critical for auditing, troubleshooting, and governance.
  prefs: []
  type: TYPE_NORMAL
- en: A wide range of metadata components should be monitored to maintain full visibility
    into customizations in a Salesforce production org. At a high level, any configurable
    items built on the Salesforce platform to extend functionality or tailor the system
    to business needs should be tracked. This spans both declarative tools accessible
    to admins as well as programmatic components developed by engineers.
  prefs: []
  type: TYPE_NORMAL
- en: Specific examples include custom objects, fields, page layouts, validation and
    workflow rules, Visualforce pages, Lightning components, Apex triggers and classes,
    permissions sets, profiles, sharing rules, and more. Monitoring should also cover
    clicks-not-code configurations such as approval processes, assignment rules, email
    templates, and flows. Higher-level changes to the overall app structure via the
    Lightning App Builder, Experience Builder, and Community Builder are important
    to capture as well. Comprehensive metadata monitoring is not limited just to business
    logic and end user components, but also operational settings such as authentication,
    integration, and security configurations. The goal is to track all custom-defined
    metadata so that any changes are detected to maintain transparency over the evolving
    shape of production orgs.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can monitor production metadata using a manual or semi-automated process,
    which can be viable given the typically small number of production orgs in a typical
    environment landscape. This work can involve several tools that you can combine
    to suit your particular needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Monitor deployments**: From this item in **Setup**, you can track all the
    change set and metadata API deployments to your org'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Setup audit trail**: Here, you can see all the **Setup** changes that have
    been made to the org. This is usually a good starting point if you insist on a
    manual process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SOQL queries against metadata objects**: There are system objects representing
    different types of metadata that can be used by an admin via the developer console'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event Monitoring**: If you have Shield, the Event Monitoring module gives
    you very detailed logs that can be exported and analyzed in an analytics tool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the manual process for monitoring seems daunting or impractical, there are
    a fairly large number of vendors that provide out-of-the-box solutions for this
    scenario, including Gearset, Panaya, Salto, and Elements.cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Having now covered the process of monitoring metadata in production, let’s look
    at how to monitor metadata in our sandbox environments.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring metadata in sandboxes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sandboxes play a critical role in Salesforce development and testing workflows.
    The metadata that’s monitored in sandboxes depends on its intended purpose.
  prefs: []
  type: TYPE_NORMAL
- en: '**Full-copy sandboxes** contain a replica of the production metadata and data.
    All of the same metadata components monitored in production should be tracked
    here as well. Full-copy sandboxes allow the production environment to be emulated
    accurately for rigorous testing. Changes here should only be deployed to production
    after verification.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Developer and Developer Pro sandboxes** only contain metadata with small
    data volumes. Monitoring should focus on code components such as Apex, Lightning,
    and key configuration components to facilitate development isolated from production
    data. As new features are built, metadata and behavior differences from production
    will emerge and require alignment before release.'
  prefs: []
  type: TYPE_NORMAL
- en: Sandbox refreshes and deletions can wipe out configuration variations between
    environments. Ongoing metadata monitoring provides continuity through these events
    to maintain visibility into changes. The extent of monitoring coverage should
    align with the role of each sandbox. However, comprehensive visibility in both
    production and sandboxes is key to managing metadata seamlessly across the org
    landscape.
  prefs: []
  type: TYPE_NORMAL
- en: While manual methods may seem sufficient for small orgs and deployments, relying
    solely on ad hoc monitoring and scripts quickly becomes impractical as the Salesforce
    footprint grows. The diversity of metadata and configurations across sandboxes
    and production orgs makes manual tracking burdensome. Developers waste time piecing
    together changes rather than building, while admins lack visibility into the testing
    and release process.
  prefs: []
  type: TYPE_NORMAL
- en: Attempting to manually monitor metadata faces limitations at every step. Gathering
    metadata from multiple sandboxes and production requires repeatedly executing
    retrieve calls or downloads. Consolidating these results to compare across environments
    involves tedious parsing and analysis. Tracking changes over time forces manual
    versioning and change management. Even with rigorous discipline, gaps inevitably
    arise in capturing metadata snapshots. Source tracking via SFDX, where source
    changes are automatically flagged, can assist with this task and is a welcome
    addition to the DevOps toolkit, but when scaling, this isn’t necessarily enough.
  prefs: []
  type: TYPE_NORMAL
- en: Building custom scripts and tools can automate portions of metadata collection
    and comparison. The various Salesforce APIs provide access to metadata for retrieval.
    However, robustly monitoring all metadata types involves carefully orchestrating
    API calls across the Metadata, Tooling, and REST APIs. However, objects and components
    may require specialized logic. Maintaining scripts also demands ongoing development,
    especially as APIs evolve.
  prefs: []
  type: TYPE_NORMAL
- en: The complexity quickly exceeds an admin or developer’s bandwidth. The learning
    curve and overhead divert focus from critical tasks. Even if successful, a custom
    solution only automates metadata capture, not sophisticated monitoring and analytics.
    Edge cases will lead to blindspots in tracking metadata configurations. Instead,
    relying on an existing, proven third-party solution is a smart investment.
  prefs: []
  type: TYPE_NORMAL
- en: Purpose-built tools for metadata management are far better equipped for comprehensive
    monitoring. They provide out-of-the-box support for all metadata types across
    Salesforce APIs. Automated snapshot collection and comparison powers change tracking
    across environments. Usage analytics identify trends and hotspots to guide optimization.
    Integration with **integrated development environments** (**IDEs**) and release
    management systems enables end-to-end visibility from development through deployment.
  prefs: []
  type: TYPE_NORMAL
- en: A note on scratch orgs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Scratch orgs** have a more transient and disposable nature than sandboxes.
    They are spun up on demand to facilitate development or testing and then deleted
    once work is complete. This ephemeral life cycle means comprehensive metadata
    monitoring in scratch orgs provides less long-term value. The focus should be
    tracking changes made during short-term usage of a given scratch org instance,
    rather than preserving history through refresh or deletion. Lightweight change
    awareness helps coordinate work within a scratch org across members of a development
    team. However, meticulous monitoring and governance practices for scratch orgs
    can hinder agility. While configuring and customizing scratch orgs should not
    go entirely unchecked, the monitoring objective is pragmatic change visibility
    rather than exhaustive audit trails. The ephemeral nature of scratch orgs shifts
    priorities toward agility over governance compared to production and sandbox environments.'
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring data behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Monitoring data behavior within Salesforce environments is not just a best practice,
    but a necessity for maintaining system health and ensuring business continuity.
    Therefore, it’s crucial to understand why this aspect demands as much attention
    as metadata monitoring. Data in Salesforce isn’t just a collection of numbers
    and text; it represents the real-time interaction of users and processes within
    your system. By closely monitoring these data changes and trends, we gain invaluable
    insights into the operational effectiveness and potential risks lurking within
    our environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will explore the multi-faceted importance of data monitoring
    in Salesforce. We will discuss key reasons for monitoring data behavior, such
    as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The prevention of configuration drift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining visibility as user needs evolve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying optimization opportunities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling audit trails for compliance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forecasting capacity requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these elements plays a pivotal role in comprehensive environment management,
    ensuring that your Salesforce implementation remains robust, compliant, and aligned
    with your business objectives.
  prefs: []
  type: TYPE_NORMAL
- en: Why monitor your data?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Keeping close tabs on changes and trends in your Salesforce data is just as
    critical as monitoring metadata for comprehensive environment management. Metadata
    represents the structure and components of your implementation. However, data
    provides crucial visibility into how users and processes are utilizing Salesforce
    in reality.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring data alongside metadata gives a more complete picture of the environment’s
    state. Without monitoring data in addition to metadata, blind spots exist that
    can allow issues to emerge gradually over time.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several key reasons why data change monitoring should be a priority:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Catch configuration drift**: Salesforce configuration data like those for
    CPQ require oversight. Data monitoring ensures configurations remain aligned accurately.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maintain visibility as usage evolves**: Regular data loads, ongoing usage,
    and changing needs cause Salesforce data to continuously evolve. Monitoring helps
    ensure alignment as data changes. Often, data anomalies reveal underlying issues
    with the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identify optimization opportunities**: Usage metrics reveal data access patterns
    to optimize indexing, storage, and more. Monitoring guides strategic optimization
    like archiving.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable audit trails**: Change monitoring provides audit trails required to
    demonstrate compliance with data governance policies and chains of custody.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Forecast capacity requirements**: Historical growth trends help accurately
    project future storage needs based on how data is used over time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without monitoring, small misalignments in configuration data can slowly compound
    over time. Settings can drift out of sync across orgs and out of compliance with
    governance policies. Proactive oversight prevents this by maintaining continuity
    and control as configurations change.
  prefs: []
  type: TYPE_NORMAL
- en: The volume and diversity of data can make manual inspections impractical over
    time. Automated ongoing monitoring provides administrators and architects with
    full traceability into both metadata and data. As always, this may come at a cost.
  prefs: []
  type: TYPE_NORMAL
- en: However, with comprehensive visibility enabling early optimization, planning,
    and issue resolution, environments can support growing complexity while delivering
    more successful business outcomes. Monitoring data alongside metadata provides
    a holistic view of the environment’s state, which is key to managing Salesforce
    implementations at scale.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring configuration data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to standard business data, Salesforce orgs contain configuration
    data that requires just as much oversight as metadata for environment management.
  prefs: []
  type: TYPE_NORMAL
- en: '**Configuration data** encompasses custom settings, rules, and records that
    control behavior in Salesforce rather than just capturing business transactions.
    Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: CPQ quotes, products, price books, and discount schedules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Billing charges, subscriptions, and payment methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Community membership types, moderation rules, and themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Einstein recommendation settings and usage metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This configuration data can be just as integral to environment stability as
    standard metadata. But unlike metadata, changes to configuration records are not
    captured in deployment logs or monitored by default.
  prefs: []
  type: TYPE_NORMAL
- en: Without oversight, configuration data can drift out of compliance with business
    rules. Critical settings may be altered that impact system behavior or contractual
    terms. Values can become inaccurate or outdated if they’re not kept in sync across
    connected orgs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, monitoring configuration data is essential for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining alignment across environments as configuration data changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing transparency over modifications to critical settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling audit trails for compliance requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing unwanted configuration drift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alerting on risky or improper adjustments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full visibility into configuration data changes allows architects to ensure
    stability and integrity.
  prefs: []
  type: TYPE_NORMAL
- en: Certain types of configuration data may be subject to strict governance policies.
    For example, auditors may require reviewing all changes made to CPQ pricing and
    discounting rules that could affect revenue recognition.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring configuration data satisfies compliance needs by providing comprehensive
    audit trails. Queries can instantly validate that proper protocols were followed
    for config record modifications.
  prefs: []
  type: TYPE_NORMAL
- en: Without monitoring, configuration data gaps can lead to obscure errors or unchecked
    drift. The impacts often emerge slowly over time as small misalignments compound.
    Proactive oversight prevents these issues by providing continuity and control
    as configuration data changes.
  prefs: []
  type: TYPE_NORMAL
- en: While native Salesforce tools such as field history tracking provide limited
    insights, comprehensive monitoring requires purpose-built solutions. The diversity
    of configuration data demands automation for efficient collection, comparison,
    and alerting.
  prefs: []
  type: TYPE_NORMAL
- en: With the ability to track configuration records alongside standard metadata,
    architects gain a more complete picture of the environment’s state. Monitoring
    configuration data closes blind spots that could otherwise allow critical settings
    to gradually drift out of compliance. Maintaining alignment of configurations
    and business rules throughout your Salesforce environments is key to stability.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring data anomalies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to standard business data and configuration data, monitoring for
    irregularities and anomalies is key for identifying potential issues early. Unusual
    data behaviors could signify emerging problems that require intervention.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some common data anomalies that warrant alerts:'
  prefs: []
  type: TYPE_NORMAL
- en: Sudden spikes or dips in record volumes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skewed data distributions or improbable outliers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bulk deletions or updates of records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bottlenecks around specific records or users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Missing or invalid values in certain fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slow processing for particular data types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watching for statistically improbable outliers reveals potential data errors
    such as invalid entries or integrity issues before they propagate. Inconsistent
    data distributions can indicate quality problems needing remediation.
  prefs: []
  type: TYPE_NORMAL
- en: Sudden drops in record counts or storage could represent batch deletion scripts
    that inadvertently wipe out important data. Transactional spikes may signal integration
    errors that duplicate records.
  prefs: []
  type: TYPE_NORMAL
- en: Performance lags when loading specific record types could indicate flawed data
    models needing optimization. Bottlenecks updating particular records may reveal
    product catalog errors impacting order processing.
  prefs: []
  type: TYPE_NORMAL
- en: Proactive monitoring helps surface anomalous behaviors early before they disrupt
    processes and decisions. Setting expected baselines aids in detecting significant
    deviations.
  prefs: []
  type: TYPE_NORMAL
- en: Tools that automatically flag irregularities against historical norms such as
    DynaTrace or Odaseva allow rapid triage to determine appropriate responses. Alerts
    empower admins to quickly identify root causes and resolve potential data issues.
  prefs: []
  type: TYPE_NORMAL
- en: The volume and diversity of data make manual inspection for anomalies impractical.
    Automated solutions are necessary to baseline expected ranges and reliably detect
    outliers.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, monitoring data anomalies could alert on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Case volumes exceeding the 7-day average by 40%
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More than 10% of contact records missing phone or email
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nightly batch processing taking over 50% longer than usual
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By augmenting change monitoring with automated anomaly detection, administrators
    can catch problems before they impact end users. Hard-to-spot data issues can
    be surfaced through monitoring before causing operational disruptions.
  prefs: []
  type: TYPE_NORMAL
- en: In Salesforce, it is often quite easy to do a level of anomaly detection with
    standard reports. Event Monitoring also includes some anomaly detection built
    in. This means that the implementation challenges associated with data monitoring
    can, in some cases, be less than for metadata monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: In general, it is critical to monitor data in production environments and full-copy
    sandboxes. Other environments may not require the same level of scrutiny, although
    you may have cases where it makes sense to do more comprehensive data monitoring,
    even in lower environments.
  prefs: []
  type: TYPE_NORMAL
- en: Handling incidents revealed through anomaly alerts may require collaboration
    across teams. However, identifying and resolving problems early helps maintain
    data integrity and health.
  prefs: []
  type: TYPE_NORMAL
- en: Watching for unusual data behaviors provides unique visibility that’s unattainable
    through metadata monitoring alone. Combined with change tracking, anomaly detection
    produces a more complete view of the Salesforce environment state.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring data quality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to tracking changes and anomalies, monitoring **Salesforce data
    quality** is important for maintaining the fidelity and integrity of environments.
    Data quality is a big topic, much of which is not directly relevant to monitoring
    for changes. Therefore, we will only cover a sliver here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Allowing data quality issues to accumulate over time without oversight puts
    environment stability at risk. Some common data quality dimensions to monitor
    include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Completeness**: Missing values in required fields'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Validity**: Improper data formats or invalid entries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Accuracy**: Incorrect or outdated values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consistency**: Contradictions across related records'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Low data quality can lead to several compounding issues, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Processing failures from invalid data, which may directly impact deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Difficulty reporting on incomplete records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bad decisions due to inaccurate information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declining trust in data by business users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poor performance in reports or queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dedicated monitoring ensures data quality assurance is a part of ongoing operations.
    Data issues can be quickly detected and resolved as they emerge rather than after
    the fact.
  prefs: []
  type: TYPE_NORMAL
- en: For example, monitoring could alert if more than 5% of records in an object
    are missing essential fields such as phone, address, or correct owner. Failing
    to meet completeness thresholds triggers corrective processes.
  prefs: []
  type: TYPE_NORMAL
- en: Continuously tracking key quality metrics highlights areas needing improvement.
    Data stewards can be notified automatically to implement fixes and optimize entry
    workflows.
  prefs: []
  type: TYPE_NORMAL
- en: The Salesforce Labs Data Quality Dashboards provide a free starting point for
    monitoring key quality metrics across standard and custom objects. Architects
    can also build custom-quality dashboards suited to their specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring data volumes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tracking storage consumption, record counts, and transaction volumes provides
    key insights into data growth trends over time. Historical metrics enable accurately
    forecasting infrastructure needs and licensing costs as data expands. Noticing
    surges in volume can also reveal potential processing issues worth investigating.
    Though simple, monitoring key volume metrics provides critical visibility that
    guides optimization and planning.
  prefs: []
  type: TYPE_NORMAL
- en: Salesforce provides native functionality to view current storage usage across
    your org, down to the per-user and per-record type level. From **Setup**, administrators
    can access storage usage reports showing available and used data space, top users
    by utilization, and largest files. Clicking on a user reveals a breakdown of their
    stored data by record type.
  prefs: []
  type: TYPE_NORMAL
- en: Storage totals are calculated asynchronously, so usage may not update immediately
    after large imports or file uploads. Individual users can also view personal storage
    utilization details in their account information.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we delved into key areas such as the prevention of configuration
    drift, maintaining visibility as user needs evolve, identifying optimization opportunities,
    enabling audit trails for compliance, and forecasting capacity requirements. These
    insights are not only critical for ensuring the operational effectiveness of your
    Salesforce system but also play a pivotal role in aligning it with your business
    objectives. Now, let’s summarize what we’ve learned.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing your Salesforce environments, which include both metadata and data,
    is a crucial aspect of Salesforce DevOps. This chapter emphasized the importance
    of monitoring your environments, not only for the sake of maintaining stability
    and integrity but also for understanding and overseeing changes across every aspect
    of your Salesforce orgs.
  prefs: []
  type: TYPE_NORMAL
- en: We started by discussing the need for monitoring, detailing how uncontrolled
    changes can lead to instability and how automated change control can help maintain
    order. Then, we explored different types of monitoring, including metadata monitoring,
    data monitoring, posture monitoring, and operational monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: We dove deep into the specifics of metadata monitoring, discussing the importance
    of monitoring metadata in production and sandbox environments, and the various
    tools and methods you can use to do so. We also touched upon the need for monitoring
    data behavior, including configuration data, data anomalies, data quality, and
    data volumes.
  prefs: []
  type: TYPE_NORMAL
- en: What we covered in this chapter emphasizes that monitoring in Salesforce is
    not just a tool but a necessary practice to ensure system stability, data integrity,
    and compliance with governance policies. It provides detailed visibility into
    the who, what, when, and where of changes, thus allowing for better control and
    prevention of issues.
  prefs: []
  type: TYPE_NORMAL
- en: In real-life scenarios, these monitoring strategies are pivotal. They prevent
    minor issues from escalating into significant workflow disruptions, enhance collaboration
    and compliance by providing real-time visibility into changes, and offer strategic
    decision-making insights for capacity planning, optimization, and identifying
    business trends.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will change track and begin exploring specific DevOps
    tools.
  prefs: []
  type: TYPE_NORMAL
