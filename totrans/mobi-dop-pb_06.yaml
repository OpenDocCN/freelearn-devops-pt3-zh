- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mobile App Release Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now in the sustain phase of our Mobile DevOps and CI/CD progress. Once
    the application has been successfully developed and tested, it is ready to be
    released to app stores. This typically involves releasing the mobile application
    to beta testing or production and making it available to users. Mobile app release
    management is essential for businesses to optimize the user experience and maintain
    high quality. It involves planning and implementing new features/updates and hotfixes.
  prefs: []
  type: TYPE_NORMAL
- en: 'But releasing mobile apps requires different processes, steps, and tools. In
    this chapter, we will explore the various stages of the release management process
    for mobile applications and cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Challenges in mobile app release management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The definition of releasing mobile applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the entire CI/CD process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring compliance with app store guidelines and regulations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Releasing and distributing mobile applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorporating user feedback with beta testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App store submission
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App Store Optimization (ASO)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring and reporting on release progress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a release train
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, we’ll discuss the biggest challenges we face when releasing mobile apps
    so that we know how to tackle them with the relevant release strategy, process,
    and tooling.
  prefs: []
  type: TYPE_NORMAL
- en: Challenges in mobile app release management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an app developer, it is crucial to understand the mobile app release management
    process to ensure smooth deployment and high user satisfaction.
  prefs: []
  type: TYPE_NORMAL
- en: Having a process in place for releasing apps is essential for businesses, from
    start-ups to enterprises, as it is the best way to ensure the app’s success in
    the long run. Not only does this help to keep users engaged but it also helps
    foster a strong relationship between the business and its customers.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, businesses can reduce the risk of user dissatisfaction and costly
    technical issues by ensuring that an app remains up to date and bug-free.
  prefs: []
  type: TYPE_NORMAL
- en: As a mobile-first company, customer feedback and ratings on app stores are very
    important because it gives us an indicator of the app’s quality, features, and
    overall performance – we can’t ignore them because this will help us improve our
    development and release process.
  prefs: []
  type: TYPE_NORMAL
- en: 'As discussed in the previous chapters, mobile development is unique, and as
    a result, the release process will be unique and challenging due to the following
    reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: There is no straightforward process for releasing new features or hotfixes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are no prerequisite tools, services, or platforms to help us release mobile
    apps smoothly and frequently; mostly, we do this manually, which consumes the
    team’s time and effort, and the releases can be delayed for months.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing on multiple devices, platforms, and configurations can be time-consuming
    and complex. Because of that, in [*Chapter 5*](B18113_05.xhtml#_idTextAnchor138),
    *Implementing a Robust Mobile App Testing Strategy*, we recommended using test
    automation and cloud device testing since manual testing can take weeks to be
    confident about the new release.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are specific policies and review procedures for each app store. It can
    be challenging to navigate these procedures and ensure compliance with app store
    rules, which may cause delays when launching apps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may need to revert to a previous version when bugs are found after a release
    has been deployed. It can be difficult to manage several software versions and
    handle rollbacks efficiently.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Releasing cross-platform apps is challenging because you manage two apps with
    different requirements, guides, and processes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The definition of releasing mobile applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a mobile application is released, it becomes accessible to customers who
    can download, install, and use it on their devices. This involves several stages,
    including building, testing, and releasing the app on app stores or other distribution
    platforms. The end goal is to provide customers with a dependable, secure, and
    functional app that meets their needs and expectations.
  prefs: []
  type: TYPE_NORMAL
- en: Developing a solid release strategy for mobile apps is crucial for ensuring
    a successful launch and long-term success. Here’s a step-by-step guide to defining
    a release strategy for your mobile app.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a release strategy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having a **release strategy** for a mobile application is essential to ensure
    successful release management. This strategy should consider various aspects,
    such as the frequency of releases, the types of released features, the testing
    and validation process, the risks associated with each release, and the best methods
    for mitigating them.
  prefs: []
  type: TYPE_NORMAL
- en: '*Release with confidence and make your app launch successfully with tools and
    strategies to help publish, manage, and distribute your app worldwide.*'
  prefs: []
  type: TYPE_NORMAL
- en: A mobile app release strategy is a well-planned approach to launching, updating,
    and maintaining a mobile application. It outlines the key steps, milestones, and
    resources required to ensure a smooth release process while minimizing disruptions
    and maximizing user satisfaction. A well-defined release strategy can help you
    manage expectations, allocate resources, and measure success.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the release management process for mobile apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Release management for mobile apps involves planning, scheduling, coordinating,
    and deploying new versions or updates of a mobile application to users. This process
    is crucial if you wish to regularly update the app with new features, bug fixes,
    and security patches. But there are different steps we should consider before,
    during, and after the release process; let’s explore them together:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before the release:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plan the release
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Build and test the app
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Prepare the release:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Manage code signing
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Prepare `versionCode` and `versionName`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Release the app
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose the right release channel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Beta testing
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: App store submission
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Launch the app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In-app update
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitor the app’s performance
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Post-release:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Handle user feedback and reviews
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyze app performance data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Plan for future releases
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile release train
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: App Store Optimization (ASO)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn more about each stage, let’s take a closer look at each one.
  prefs: []
  type: TYPE_NORMAL
- en: Before the release
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the initial stage where we should, as a team, define and agree on the
    release process, including the rollout strategy, the responsibilities, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Planning the release
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once the release strategy has been defined, developing an implementation process
    is essential. This process should include *scheduling releases*, *managing code
    changes*, and *ensuring the app meets quality standards*. It should also include
    steps to ensure the app is tested and validated before release.
  prefs: []
  type: TYPE_NORMAL
- en: Building and testing the app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned in the previous chapters, we should use a **continuous integration**
    (**CI**) pipeline to build and test mobile apps and ensure we don’t have any blockers
    or issues that can delay the release process. We can then move on to **continuous
    delivery and continuous deployment** (**CD**) to release the apps to app stores.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous delivery and deployment (CD)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned in [*Chapter 3*](B18113_03.xhtml#_idTextAnchor083), *Mobile DevOps
    Fundamentals*, **continuous delivery** automatically delivers the builds that
    pass the CI checks to production environments (such as *staging*), where they
    will be tested and reviewed before being released into production.
  prefs: []
  type: TYPE_NORMAL
- en: '*The goal is to automate development and deployment processes to ensure the
    rapid, reliable, and budget-friendly delivery of* *mobile apps.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The process of CI/CD for mobile apps mainly comprises the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Release the build to the QA teams so that they can do additional checks and
    tests, such as exploratory testing, to ensure that the build meets the expectations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Release the build to beta testers if the company or the team is already participating
    in the program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If everything is fine after that, the release manager or the person responsible
    for the release process can approve the build and release it to the relevant app
    stores or production environments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'These steps can be seen in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.1 – The continuous delivery process](img/Figure_06.01_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – The continuous delivery process
  prefs: []
  type: TYPE_NORMAL
- en: '**Continuous deployment** is often part of the CI/CD pipeline, which means
    that the code that’s deployed to the repository will be automatically deployed
    to production – or in our case, the mobile apps will be deployed to the relevant
    app stores. CI/CD pipelines are often referred to as the combination of these
    practices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – The continuous deployment process](img/Figure_06.02_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – The continuous deployment process
  prefs: []
  type: TYPE_NORMAL
- en: The continuous deployment process automates the process of deploying your app
    build, preventing human intervention. The only thing that will prevent a new change
    from being deployed into production is a failed build or test. This is used to
    speed up app production and get customer feedback faster.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To learn how the GitHub Mobile Team automates its release process with GitHub
    Actions, go to [https://github.blog/2022-01-12-how-we-ship-github-mobile-every-week/](https://github.blog/2022-01-12-how-we-ship-github-mobile-every-week/).
  prefs: []
  type: TYPE_NORMAL
- en: Preparing a release version and tag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to perform different steps here based on the application. For example,
    in `versionCode` and `versionName` in the app-level `build.gradle` file.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to generate a signed APK or app bundle using the **Generate
    Signed Bundle / APK...** option in the **Build** menu; we will cover code signing
    and generating bundle files later in this section. This can also be done on the
    CI server automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, for **iOS applications**, there are different steps, involving updating
    the version and build numbers in the **General** tab of your app’s target settings.
    Once you’ve done this, select **Generic iOS Device** as the build target, archive
    the app from **Product**, then select the **Archive** menu. We will cover how
    to code-sign and archive the app later in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve done this, the release tag and release notes will be ready in the
    GitHub repository for the next release.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the release
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Releasing any app to the Apple App Store, Google Play Store, or any other store
    requires certificates, provisioning profiles, or **Keystores** to identify that
    the apps have been built by a trusted company or developer.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, we need to manage the code-signing process before building the
    app for release.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your developer account
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first step in the process is setting up an *Apple developer account*. This
    requires you to provide your name, address, and contact details. You’ll also need
    to provide payment information and agree to the *Apple Developer Program License
    Agreement*. Once your account has been set up, you can access the *Apple Developer
    Portal*. The same steps must be followed for a Google developer account so that
    you can release the app to the Google Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: Managing code signing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Code signing** is the process of digitally signing an application’s executable
    code, ensuring its integrity and authenticity. This process plays a crucial role
    in the Android app development life cycle as it helps confirm that the app comes
    from a trusted source and hasn’t been tampered with since it was signed.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explain the required code-signing steps for Android and iOS.
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s start with the steps for code signing for Android Apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'To sign an Android app ([https://developer.android.com/studio/publish/app-signing](https://developer.android.com/studio/publish/app-signing)),
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up a developer account ([https://play.google.com/console/](https://play.google.com/console/)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a unique private-public key pair using the keytool utility ([https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign the app with their private key and embed the public key into a self-signed
    certificate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android Studio or the *apksigner* tool is used to package and sign the app using
    the generated key pair.
  prefs: []
  type: TYPE_NORMAL
- en: The Android system verifies the app’s signature during installation to ensure
    its integrity and authenticity.
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate a private-public key pair and self-signed certificate, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a Terminal or command prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Provide the required information when prompted, such as your name, organization,
    and location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a strong password for your keystore and key pair.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your key pair and self-signed certificate will be stored in the specified `.jks`
    file, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – keytool output](img/Figure_06.03_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – keytool output
  prefs: []
  type: TYPE_NORMAL
- en: 'To sign your app in Android Studio, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Android Studio, open the **Build** menu and select **Generate Signed Bundle
    /** **APK...**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Generate Signed Bundle / APK…](img/Figure_06.04_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Generate Signed Bundle / APK…
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose `.aab` (the Android App Bundle). Then, click **Next**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Selecting Android App Bundle or APK](img/Figure_06.05_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Selecting Android App Bundle or APK
  prefs: []
  type: TYPE_NORMAL
- en: 'Click `my-release-key.jks`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.6 – Selecting \uFEFFKey store path](img/Figure_06.06_B18113.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Selecting Key store path
  prefs: []
  type: TYPE_NORMAL
- en: Enter the keystore and key pair passwords and the key alias.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose your **Destination Folder** and **Build Variants** parameters and then
    click **Finish**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Selecting Build Variants](img/Figure_06.07_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Selecting Build Variants
  prefs: []
  type: TYPE_NORMAL
- en: 'Android Studio will create a signed App Bundle ready for distribution, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Gradle running the tasks](img/Figure_06.08_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Gradle running the tasks
  prefs: []
  type: TYPE_NORMAL
- en: 'In the release folder, you can find the generated `.aab` file, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – The .aab file](img/Figure_06.09_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – The .aab file
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Keep your signing key and keystore file secure – they are used to identify and
    verify your app. You cannot update or maintain your app if you lose your signing
    key or Keystore file.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s look at the steps for code signing for iOS apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'To sign an iOS app, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or create an Apple Developer Account ([https://developer.apple.com/](https://developer.apple.com/))
    if you don’t already have one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Apple Developer Portal and select **Certificates, Identifiers & Profiles**
    from the dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Certificates** are digital files that are used to verify the identity of
    the app developer and sign the app code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of certificates:'
  prefs: []
  type: TYPE_NORMAL
- en: A **development certificate**, which is used during the app development process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **App Store (Distribution) Certificate**, which is used to distribute the
    apps to the Apple App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identifiers** are unique identifiers for your app that are used to associate
    your app with your developer account, enable certain app features such as push
    notifications, and create provisioning profiles.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three types of identifiers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**App ID**: This identifies a specific app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bundle ID**: This identifies the app within a particular app group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Team ID**: This identifies the developer or organization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Provisioning profiles** are files that contain information about your app,
    your certificate, and your device identifiers. These profiles allow your app to
    run on iOS devices and access certain app features, such as push notifications,
    in-app purchases, and iCloud.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of provisioning profiles:'
  prefs: []
  type: TYPE_NORMAL
- en: A **Development Provisioning Profile**, which is used during the app development
    process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A **Distribution Provisioning Profile**, which is used to distribute your app
    on the App Store, as shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Apple Developer certificates](img/Figure_06.10_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Apple Developer certificates
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Apple Developer portal, open the **Certificates, Identifiers & Profiles**
    ([https://developer.apple.com/account/resources/certificates/list](https://developer.apple.com/account/resources/certificates/list))
    page, then click on the **+** button to create a new certificate. Choose **iOS
    App Development** and click **Continue**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11 – Creating a new Apple Developer certificate](img/Figure_06.11_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – Creating a new Apple Developer certificate
  prefs: []
  type: TYPE_NORMAL
- en: Follow the on-screen instructions to generate a **Certificate Signing Request**
    (**CSR**) ([https://developer.apple.com/help/account/create-certificates/create-a-certificate-signing-request](https://developer.apple.com/help/account/create-certificates/create-a-certificate-signing-request))
    from your Mac’s Keychain Access app. Upload the CSR and download the generated
    development certificate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you’ll need to create an App ID. This unique identifier links your app
    to its provisioning profile and certificates. Click **Identifiers** and then the
    **+** button. Fill in the necessary details and click **Continue** to register
    your App ID, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.12 – Creating an app identifier](img/Figure_06.12_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.12 – Creating an app identifier
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s create a provisioning profile. Click **Profiles** and then the **+**
    button. Choose **iOS App Development** and click **Continue**. Select the App
    ID you just created, the development certificate, and the devices you want to
    use for testing. Give your provisioning profile a name and click **Generate**,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13 – Register a New Provisioning Profile](img/Figure_06.13_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – Register a New Provisioning Profile
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the App ID we created previously and configure the provisioning profile,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.14 – Generate a Provisioning Profile | Select \uFEFFan App ID](img/Figure_06.14_B18113.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – Generate a Provisioning Profile | Select an App ID
  prefs: []
  type: TYPE_NORMAL
- en: Open your Xcode project and go to the **Signing & Capabilities** tab. Click
    the **Team** drop-down menu and select your developer account. Xcode should automatically
    handle the provisioning profile and certificate for you. If not, click **Import
    Profile** and locate your downloaded provisioning profile.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve set up your account, provisioning profile, App ID, and certificates,
    you’ll need to prepare your app for release. This involves completing tasks such
    as creating screenshots and setting up the app’s metadata.
  prefs: []
  type: TYPE_NORMAL
- en: 'But before that, you need to upload and save your credentials to your CI provider
    to sign the app automatically in the release process. For example, **Bitrise**
    provides a tab in the Workflow Editor where you can upload your provisioning profile
    and code-signing certificate so that they can be used in the iOS CI/CD pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Bitrise’s iOS Code Signing & Files tab](img/Figure_06.15_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.15 – Bitrise’s iOS Code Signing & Files tab
  prefs: []
  type: TYPE_NORMAL
- en: 'For Android, you can upload the Keystore file to sign your apps in the CI/CD
    pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.16 – Bitrise’s Android Code Signing & Files tab](img/Figure_06.16_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.16 – Bitrise’s Android Code Signing & Files tab
  prefs: []
  type: TYPE_NORMAL
- en: This should also be the same case with GitHub Actions; you can store the credentials
    on GitHub Secrets ([https://docs.github.com/en/actions/reference/encrypted-secrets](https://docs.github.com/en/actions/reference/encrypted-secrets))
    so that they can be quickly passed into GitHub Actions directly. You can also
    use Codemagic for iOS ([https://docs.codemagic.io/yaml-code-signing/signing-ios/](https://docs.codemagic.io/yaml-code-signing/signing-ios/))
    and Android ([https://docs.codemagic.io/yaml-code-signing/signing-android/](https://docs.codemagic.io/yaml-code-signing/signing-android/))
    using the same approach or any other CI provider.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can connect to an Apple service (such as App Store Connect
    or the Apple Developer Portal) with the API key to automatically upload iOS apps
    to the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Managing certificates and profiles in large mobile teams using fastlane match
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a large and scalable mobile team, it is crucial to manage certificates and
    profiles in a centralized and secure manner to prevent conflicts and guarantee
    that all team members are utilizing the latest, uniform files.
  prefs: []
  type: TYPE_NORMAL
- en: Tools such as **fastlane** and **fastlane match** ([https://docs.fastlane.tools/actions/match/](https://docs.fastlane.tools/actions/match/))
    can be used to manage certificates and profiles in a large team. These tools automatically
    download the latest versions of developers’ signing certificates and provisioning
    profiles when they build and release apps from a Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Files should be stored and accessed according to the **Matchfile** in the repository.
    Once the certificates and profiles have been downloaded, team members can build
    and release their app using fastlane match, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.17 – How fastlane match works](img/Figure_06.17_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.17 – How fastlane match works
  prefs: []
  type: TYPE_NORMAL
- en: Using fastlane match helps eliminate many common issues related to code signing,
    such as expired certificates or mismatched provisioning profiles. It’s a recommended
    approach to managing code signing securely and collaboratively. In [*Chapter 9*](B18113_09.xhtml#_idTextAnchor342),
    *Mobile DevOps Best Practices*, we will discuss how to use fastlane in building,
    testing, and releasing mobile apps.
  prefs: []
  type: TYPE_NORMAL
- en: Releasing the app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **release candidate** (**RC**) build is ready to go out to our beta testers
    when the following criteria have been met:'
  prefs: []
  type: TYPE_NORMAL
- en: A *branch* is created for addressing any hotfixes needed for the release candidate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *build* is generated with a proper version number and uploaded to TestFlight/Firebase
    App Distribution, depending on the application’s type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All *unit*, *UI*, and *snapshot tests* have passed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An issue is created to track the *release process*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Release notes* are ready'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The build can be automatically submitted to the App Store or Google Play Store
    if there are no issues or can be manually approved by the release manager and
    stakeholders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This workflow or pipeline can be implemented with your CI provider, as discussed
    in [*Chapter 4*](B18113_04.xhtml#_idTextAnchor118), *Achieving Continuous Integration
    and Delivery with Mobile DevOps*, but as mentioned previously, it should support
    integration with different tools and services to make the release process easy.
  prefs: []
  type: TYPE_NORMAL
- en: 'The team needs to generate an app binary for a given build. Then, it must define
    a job that contains multiple steps for generating a build, going through the test
    cases, and then archiving and uploading it to TestFlight for iOS or Firebase App
    Distribution for Android. You can create a dedicated branch for each version you
    ship so that you can go back and cherry-pick any changes you want to include,
    as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.18 – Mobile release cycle](img/Figure_06.18_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.18 – Mobile release cycle
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s learn more about the different release stages, such as beta testing
    and app store submission.
  prefs: []
  type: TYPE_NORMAL
- en: Beta testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mobile app beta testing is a crucial stage in the creation process. Before the
    official release, it enables developers to test their apps on actual mobile devices
    and gather user feedback. A limited group of users who are willing to test the
    release and offer comments on its features, usability, and overall user experience
    is often used for beta testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The beta testing phase of the mobile app development process is crucial because
    it gives developers a chance to evaluate the usability and functionality of their
    app before making it available to the general public. However, it can be intimidating
    to build up an effective beta testing program due to the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fear of negative feedback**: When putting an app in the hands of beta testers,
    there is a fear that they might provide negative feedback or encounter critical
    bugs that could potentially undermine the confidence of the development team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lack of resources**: Creating a proper beta testing program requires resources,
    such as time, money, and personnel. Coordinating with testers, managing feedback,
    and implementing changes can be resource-intensive, especially for smaller development
    teams or indie developers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identifying the right testers**: Finding the right pool of beta testers who
    are genuinely interested in providing valuable feedback and representing the target
    audience can be challenging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time constraints**: The beta testing phase can introduce delays, which might
    be perceived as a barrier to rapid deployment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are different steps to setting up the beta testing program for your apps.
    Let’s take a look.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the scope of the app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first step in setting up a successful mobile app beta testing program is
    to define the scope of the app. This should include a clear description of the
    features of the app, its target users, and the platforms on which it will be available.
    This is essential to ensure the app is tested in the correct environment.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, developers should consider what metrics they want to track during
    beta testing. This could include the number of downloads, usage statistics, and
    user feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Once the scope of the app has been established, it is time to set up the beta
    testing program.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for launch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once the beta testing program has been set up, preparing for the app’s launch
    is essential. This involves ensuring that any issues that were identified during
    the testing phase are addressed and that the app is ready for public release.
    Developers should also consider how they will market the app and what steps they
    will take to ensure a successful launch.
  prefs: []
  type: TYPE_NORMAL
- en: For iOS, developers need to create an App Store Connect account ([https://appstoreconnect.apple.com/login](https://appstoreconnect.apple.com/login))
    and submit their app through the platform. For Android, they need a Google Play
    Console account ([https://play.google.com/console/about/](https://play.google.com/console/about/))
    and must submit their app through the platform. This includes providing necessary
    metadata, such as the app’s name, description, keywords, screenshots, app icons,
    and pricing information.
  prefs: []
  type: TYPE_NORMAL
- en: Developers also need to provide a test account with login credentials, if their
    app requires authentication, to access content or features of the app store. This
    allows them to test the apps during the beta testing and app store submission
    phases.
  prefs: []
  type: TYPE_NORMAL
- en: By allowing a group of users to test the app before it is made available, developers
    can gain invaluable feedback on the product’s performance and make any necessary
    adjustments or enhancements before the definitive version is released.
  prefs: []
  type: TYPE_NORMAL
- en: Recruiting testers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can reach out to users in your target audience who have expressed interest
    in testing apps. You can also post on app-related forums and social media or use
    a service such as TestFlight to find testers. Here are some effective methods
    for recruiting testers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Provide clear instructions**: Once you have recruited your testers, provide
    them with clear instructions on how to install and use the app and how to provide
    feedback'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitor feedback**: Monitor the responses from the testers and make any necessary
    changes to the app before releasing it to the public'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beta testing tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Beta testing is an essential phase in the development of mobile apps. It allows
    developers to gather valuable feedback from a limited group of users before the
    app’s full release, identify and fix issues, and ensure a smoother launch. There
    are several tools available for conducting beta testing on mobile apps. Here are
    some popular ones:'
  prefs: []
  type: TYPE_NORMAL
- en: TestFlight
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Play beta testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebase App Distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s take a closer look.
  prefs: []
  type: TYPE_NORMAL
- en: TestFlight
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**TestFlight** ([https://developer.apple.com/testflight/](https://developer.apple.com/testflight/))
    is an invaluable tool for iOS app developers, allowing them to beta-test their
    apps before they release them on the app store. It is now an integrated part of
    the iOS app development ecosystem.'
  prefs: []
  type: TYPE_NORMAL
- en: TestFlight makes it simple for developers to invite beta testers to try out
    their apps. All you need is the tester’s email address, and they’ll receive an
    invitation to download the app through TestFlight.
  prefs: []
  type: TYPE_NORMAL
- en: TestFlight’s integration with the iOS development environment makes distributing
    and testing apps for iPhone, iPad, and other Apple devices easy. It is free, making
    it accessible to developers of all sizes, from individuals to large companies.
  prefs: []
  type: TYPE_NORMAL
- en: Developers can distribute multiple app builds simultaneously, allowing them
    to test different versions and identify the most successful one.
  prefs: []
  type: TYPE_NORMAL
- en: TestFlight makes it easy for beta testers to provide feedback directly within
    the app. This ensures that developers receive valuable insights and can make the
    necessary improvements before launching the app publicly.
  prefs: []
  type: TYPE_NORMAL
- en: Developers can invite up to 10,000 external testers, enabling them to collect
    a vast amount of feedback and identify potential issues. More information about
    testing apps with TestFlight can be found at [https://testflight.apple.com/](https://testflight.apple.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the general steps you must follow to use beta testing with TestFlight:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new version in Xcode and ensure that it meets all app store guidelines
    and requirements, including screenshots and metadata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload your app to App Store Connect and select the version you want to distribute
    to beta testers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Invite beta testers to test your app by sending them an email invitation from
    App Store Connect. You can invite up to 10,000 testers per app. Once you have
    invited them, they will receive an email invitation to test your app. They will
    need to accept the invitation and install TestFlight on their iOS device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the beta testers have accepted the invitation and installed TestFlight,
    you can add them to a group in App Store Connect. This allows you to manage the
    distribution of different app versions to different groups of testers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have added beta testers to a group, you can distribute the app to them
    by selecting the app version you want to distribute in App Store Connect and selecting
    the group of testers to which you want to distribute it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Beta testers can provide feedback on the app through the TestFlight app, including
    screenshots, comments, and ratings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Monitor the app’s performance and track issues reported by beta testers, and
    then fix any issues that are found.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the beta testing phase is completed and all issues have been resolved,
    the app is ready to be released to the relevant app store.
  prefs: []
  type: TYPE_NORMAL
- en: Google Play beta testing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Google Play beta testing** ([https://support.google.com/googleplay/android-developer/answer/9845334?hl=en&visit_id=638185357369512451-3818777855&rd=1](https://support.google.com/googleplay/android-developer/answer/9845334?hl=en&visit_id=638185357369512451-3818777855&rd=1))
    is an essential tool for Android app developers, offering a straightforward way
    to beta-test apps before they’re released on the Google Play Store. Its easy setup,
    seamless integration with the Google Play Store, and support for a large tester
    base make it a go-to choice for Android app testing.'
  prefs: []
  type: TYPE_NORMAL
- en: Google Play beta testing allows developers to distribute their apps to testers
    via email invitations or by sharing a link. Testers can easily access the app
    through the Google Play Store, just like any other app.
  prefs: []
  type: TYPE_NORMAL
- en: Testers can provide feedback directly within the app, giving developers essential
    insights into improving the app before it’s released to the public.
  prefs: []
  type: TYPE_NORMAL
- en: Google Play beta testing also supports staged rollouts, allowing developers
    to release app updates to a percentage of users and gradually increase that percentage
    over time.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can test your app with specific groups or open your test to Google Play
    users with Play Console, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.19 – Google Play Console](img/Figure_06.19_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.19 – Google Play Console
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three types of testing with Google Play:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Internal testing**: Up to 100 testers can quickly access your app for initial
    quality assurance checks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 6.20 – Google Play Console – Internal testing](img/Figure_06.20_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.20 – Google Play Console – Internal testing
  prefs: []
  type: TYPE_NORMAL
- en: '**Open testing**: This allows you to run a test with a large group of people
    and surface the test version of your app on Google Play:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 6.21 – Google Play Console – Open testing](img/Figure_06.21_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.21 – Google Play Console – Open testing
  prefs: []
  type: TYPE_NORMAL
- en: '**Closed testing**: This allows you to gather more targeted feedback from a
    wider range of testers during pre-release testing:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 6.22 – Google Play Console – Closed testing](img/Figure_06.22_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.22 – Google Play Console – Closed testing
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the general steps to implement beta testing with Google Play Console:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure it is ready for testing by creating a beta build and signing it with
    a Keystore.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a list of beta testers by adding their Google email addresses to the
    Google Play Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload the beta build of the app to the Google Play Console, where beta testers
    can access it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Send out beta testing invites to the testers via email, which will contain a
    link to download the beta build of the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Monitor the feedback from beta testers on the Google Play Console and address
    any reported issues or bugs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Based on the feedback received, we can make changes and improvements to the
    app before releasing it to the general public.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once it has been tested and all issues have been addressed, it can be released
    to the public via the Google Play Store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Firebase App Distribution
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Firebase App Distribution** ([https://firebase.google.com/docs/app-distribution](https://firebase.google.com/docs/app-distribution))
    can distribute your apps to trusted testers via a hassle-free process by promptly
    getting your apps onto testers’ devices. By doing this, you can receive feedback
    early and frequently and align it with your goals for mobile DevOps and CI/CD.'
  prefs: []
  type: TYPE_NORMAL
- en: Firebase App Distribution allows developers to distribute and test their apps
    on both iOS and Android devices, making it a versatile choice for multi-platform
    app development. However, iOS developers usually prefer to use TestFlight because
    it’s free and integrated more with Apple’s services and apps.
  prefs: []
  type: TYPE_NORMAL
- en: Distributing your app to testers is simple with Firebase App Distribution. You
    can invite testers via email or share a link, giving them quick access to the
    app.
  prefs: []
  type: TYPE_NORMAL
- en: Firebase App Distribution integrates seamlessly with **Crashlytics** ([https://firebase.google.com/products/crashlytics](https://firebase.google.com/products/crashlytics)),
    a real-time crash reporting tool. It helps developers identify and fix issues
    quickly, improving app stability and performance.
  prefs: []
  type: TYPE_NORMAL
- en: Firebase App Distribution supports popular CI/CD tools, allowing developers
    to automate the process of building, testing, and distributing their apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general steps for using Android beta testing with Firebase App Distribution
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Firebase account and project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the Firebase SDK to your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a signed release build of your App Bundle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the Firebase CLI, Gradle, or CI server to upload your app’s build to Firebase
    App Distribution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Invite testers by adding their email addresses or by creating tester groups
    in the Firebase console. You can also import a CSV file with the email addresses
    of your testers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once your build has been uploaded and testers have been added, distribute your
    app to the selected testers. They will receive an email invitation with instructions
    on how to access and install the beta version of your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the beta testing stage has been completed, we can move to the final stage,
    which is submitting the apps to the app stores.
  prefs: []
  type: TYPE_NORMAL
- en: Submitting the app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before submitting an app for review, developers must ensure it complies with
    the *App Store Review Guidelines*, which cover a wide range of topics, such as
    user privacy, content, design, and functionality. Developers should also test
    their apps extensively on different devices and iOS versions to ensure a smooth
    user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Submitting the app means uploading it to an app store (such as App Store or
    Google Play) for review and approval and making it available for users.
  prefs: []
  type: TYPE_NORMAL
- en: Once your app is ready, you’ll need to submit it to the relevant app store.
    This involves uploading your app, providing *screenshots* and other *metadata*,
    and submitting the app for review. The review process can take up to a week, and
    your app may only be accepted if it meets the app store’s guidelines.
  prefs: []
  type: TYPE_NORMAL
- en: The review process typically takes a few days, but the time frame can vary,
    depending on the app’s complexity and the volume of submissions. During the review
    process, Apple’s team evaluates the app against the App Store Review Guidelines,
    checking for functionality, performance, design, and content issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the review process, there are several possible outcomes:'
  prefs: []
  type: TYPE_NORMAL
- en: If the app meets all the guidelines, it will be *approved* and published on
    the Apple App Store. You will receive a notification, and the app will be available
    for download.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the app doesn’t meet the guidelines, it will be *rejected*, and you will
    receive feedback on the specific issues that need to be addressed. Then, you can
    make the necessary changes and resubmit your app for review.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the app’s metadata doesn’t meet the guidelines, it will be *rejected*, but
    the binary won’t need to be re-reviewed or built again. You can update the metadata
    and resubmit it for review.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are now ready for our app to be released. But before that, we need to know
    which mobile app distribution platforms we can use to make it public.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile app distribution platforms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Mobile app distribution platforms** are digital marketplaces where developers
    can publish, distribute, and sell their mobile applications to users. These platforms
    are essential for developers to reach a wide audience and gain exposure for their
    apps. Some of the most popular mobile app distribution platforms include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Apple App Store** ([https://www.apple.com/de/app-store/](https://www.apple.com/de/app-store/)):
    The official app store for iOS devices such as iPhones, iPads, and iPod Touches.
    Developers can submit their apps for review and, if approved, make them available
    for download.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Play Store** ([https://play.google.com/store/apps](https://play.google.com/store/apps)):
    The official app store for Android devices, which offers a wide variety of apps,
    games, and other digital content for users to download. Like the Apple App Store,
    developers can submit their apps for review and, if approved, make them available
    for download.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Appstore** ([https://www.amazon.com/mobile-apps/b?ie=UTF8&node=2350149011](https://www.amazon.com/mobile-apps/b?ie=UTF8&node=2350149011)):
    This app store by Amazon is an alternative marketplace for Android apps, featuring
    a broad selection of apps and games, including some that are exclusive to the
    platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Store** ([https://apps.microsoft.com/store/apps](https://apps.microsoft.com/store/apps)):
    The app store for Windows devices, including devices such as Windows Phone, Surface
    tablets, and Windows PCs. Developers can distribute both mobile and desktop applications
    through this platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Samsung Galaxy Store** ([https://galaxystore.samsung.com/apps](https://galaxystore.samsung.com/apps)):
    The app store by Samsung, which offers a variety of apps and games specifically
    tailored for Samsung devices, including exclusive content and promotions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Huawei AppGallery** ([https://appgallery.huawei.com/](https://appgallery.huawei.com/)):
    Huawei’s official app store, which offers a selection of apps and games for Huawei
    and Honor devices. After being cut off from Google services, Huawei has been developing
    its app store as an alternative to the Google Play Store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It’s important to note that all these app stores have guidelines and policies
    you should follow when submitting your app:'
  prefs: []
  type: TYPE_NORMAL
- en: App Store ([https://developer.apple.com/app-store/review/](https://developer.apple.com/app-store/review/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Play ([https://play.google.com/console/about/guides/releasewithconfidence/](https://play.google.com/console/about/guides/releasewithconfidence/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Appstore ([https://developer.amazon.com/docs/app-submission/understanding-submission.html](https://developer.amazon.com/docs/app-submission/understanding-submission.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Huawei AppGallery ([https://developer.huawei.com/consumer/en/doc/distribution/app/50104](https://developer.huawei.com/consumer/en/doc/distribution/app/50104))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft App Store ([https://learn.microsoft.com/en-us/windows/apps/publish/publish-your-app/create-app-submission?pivots=store-installer-msix](https://learn.microsoft.com/en-us/windows/apps/publish/publish-your-app/create-app-submission?pivots=store-installer-msix))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure your app meets all the requirements and guidelines to complete the review
    process on time.
  prefs: []
  type: TYPE_NORMAL
- en: App Store submission
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Uploading an iOS app to the Apple App Store involves the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You will need to configure your Xcode project to build and archive your app
    with the necessary provisioning profile and certificates. Make sure that you have
    the required provisioning profile and certificate for app distribution, not only
    development.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **App Store Connect** website and log in with your Apple Developer
    account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **My Apps** and select the app you want to submit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left sidebar, click on the **App Store** tab, scroll down to the **Metadata**
    section, and click the **Edit** button. Here, you can add the necessary metadata
    for your app, including the app’s name, subtitle, description, keywords, and category.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down to the **Screenshots & Videos** section and click the **Edit** button.
    Here, you can add screenshots of your app for each device type and language you
    support. Ensure your screenshots meet the App Store guidelines, including the
    correct size and resolution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can upload screenshots by dragging and dropping them into the **Screenshot**
    section or by clicking the **+** button and selecting them from your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will also need to set the price of your app or choose to make it available
    for free. You can also choose which countries or regions where your app will be
    available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have completed all the necessary steps, you can submit your app to
    the App Store for review. Ensure you have tested your app thoroughly and meet
    all of Apple’s guidelines and policies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apple will review your app to ensure it meets all its technical, design, and
    content requirements. The review process typically takes several days, although
    it can take longer if there are any issues with your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once your app has been approved, you can release it on the App Store. You can
    choose to release it immediately or schedule a release date in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Tips for App Store submission
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When submitting an app to the App Store, there are a few things you can do
    to increase your chances of acceptance. First, you should ensure that all required
    information is included and accurate. This includes screenshots, videos, contact
    information, a description of the app, and a privacy policy:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the app is compatible with the latest iOS version and devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use beta testing tools to test your app before submitting it to the App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invest in quality design and development services to ensure your app meets the
    App Store’s standards for quality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Follow the App Store’s guidelines for submitting apps, including providing a
    complete and accurate description of your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By following these tips, app developers can increase their chances of having
    their app accepted by the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Google Play Store submission
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Google Play Store ([https://play.google.com/store/apps](https://play.google.com/store/apps))
    is the official app distribution platform for Android devices. Like the Apple
    App Store, developers can submit their apps to the Play Store for approval and
    distribution to Android users.
  prefs: []
  type: TYPE_NORMAL
- en: Releasing an Android application can be exciting, but it’s essential to understand
    the process involved to ensure your application’s success.
  prefs: []
  type: TYPE_NORMAL
- en: 'Uploading an Android app to the Google Play Store involves the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Google Play Console, navigate to the **All applications** tab, and click
    on the **Create app** button. Choose a default language and enter a title for
    your app. This will create a draft listing for your app, which you can update
    later with more details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Accept the Developer Program Policies and US export laws, then click the **Create**
    **app** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.23 – Google Play Console – Create app](img/Figure_06.23_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.23 – Google Play Console – Create app
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to sign your APK or AAB with a secure certificate, create a version
    code, and update the app’s version name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the **Release overview** section in the Google Play Console, and
    then to **Production**. Create a new release by selecting the appropriate release
    track (alpha, beta, or production). Upload your AAB and fill out the necessary
    details, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.24 – Google Play Console – Release dashboard](img/Figure_06.24_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.24 – Google Play Console – Release dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can create a new production release, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.25 – Google Play Console – Create production release](img/Figure_06.25_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.25 – Google Play Console – Create production release
  prefs: []
  type: TYPE_NORMAL
- en: 'If your app has in-app products, subscriptions, or utilizes any other Google
    Play services, configure them accordingly in the **Monetize** section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.26 – Google Play Console – Monetize](img/Figure_06.26_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.26 – Google Play Console – Monetize
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, under **In-app products**, you can add the Google payment details,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.27 – Google Play Console – In-app products](img/Figure_06.27_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.27 – Google Play Console – In-app products
  prefs: []
  type: TYPE_NORMAL
- en: After submission, Google will review your app, which usually takes a few hours
    to a few days. Once approved, your app will be live on the Google Play Store,
    and you can start tracking its performance, managing updates, and responding to
    user feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you can upload Android apps to another app store instead of Google
    Play Store, such as Amazon Appstore, Huawei AppGallery, and Samsung Galaxy Store.
  prefs: []
  type: TYPE_NORMAL
- en: To upload an app to Amazon Appstore, you will need to have an Amazon Developer
    account ([https://developer.amazon.com/](https://developer.amazon.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Uploading an Android app to Amazon Appstore involves the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to configure your APK and sign it with a valid certificate. Ensure
    that your app meets Amazon’s technical and design guidelines ([https://developer.amazon.com/docs/app-submission/understanding-submission.html](https://developer.amazon.com/docs/app-submission/understanding-submission.html))
    and is built with a valid signing certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.28 – Amazon Developer dashboard](img/Figure_06.28_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.28 – Amazon Developer dashboard
  prefs: []
  type: TYPE_NORMAL
- en: Once your app is ready to be uploaded, you will need to provide some information
    about the app. This includes the app’s name, description, keywords, screenshots,
    and other metadata to help users discover and download your app. Amazon Appstore
    currently has a staged rollout ([https://developer.amazon.com/docs/app-submission/release-updates-in-staged-rollouts.html](https://developer.amazon.com/docs/app-submission/release-updates-in-staged-rollouts.html))
    that lets you gradually introduce new versions of your app to the marketplace
    in an incremental way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have completed all the necessary steps, you can submit your app to
    Amazon Appstore for review. Ensure you have tested your app thoroughly and meet
    all of Amazon’s guidelines and policies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon will review your app to ensure it meets all of its technical, design,
    and content requirements. The review process typically takes several hours, although
    it can take longer if there are any issues with your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once your app has been approved, you can release it on Amazon Appstore. You
    can choose to release it immediately or schedule a release date in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Completing the CI/CD workflow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To complete the CI/CD workflow that we created in [*Chapter 4*](B18113_04.xhtml#_idTextAnchor118),
    *Achieving Continuous Integration and Delivery with Mobile DevOps*, you can add
    the required steps to your pipeline to release the iOS and Android apps to TestFlight,
    App Store, Firebase App Distribution, Google Play Store, or any other distribution
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, here’s a high-level overview of the workflow of building, testing,
    and releasing an iOS app to the App Store with Bitrise using steps such as **Xcode
    Archive & Export for iOS** and **Deploy to App Store Connect**, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.29 – Bitrise iOS CI/CD workflow](img/Figure_06.29_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.29 – Bitrise iOS CI/CD workflow
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a high-level overview of the YAML file for building, testing, and releasing
    an iOS app to the App Store with Codemagic: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-6/codemagic-iOS.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-6/codemagic-iOS.yml).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, you can perform the same steps with GitHub Actions for building,
    testing, and releasing an iOS app to the App Store: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-6/.github/ios.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-6/.github/ios.yml).'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s examine some examples of building, testing, and releasing Android
    apps with Bitrise, Codemagic, and GitHub Actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll start with Bitrise. The following screenshot shows the high-level Android
    CI/CD workflow for Firebase App Distribution and Google Play:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.30 – Bitrise Android CI/CD workflow for Firebase App Distribution
    and Google Play](img/Figure_06.30_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.30 – Bitrise Android CI/CD workflow for Firebase App Distribution and
    Google Play
  prefs: []
  type: TYPE_NORMAL
- en: In terms of Codemagic, you can find the YAML file at [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-6/codemagic-android.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-6/codemagic-android.yml).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, for GitHub Actions, you can find the YAML file at [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-6/.github/android.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-6/.github/android.yml).
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, we can upload Android apps to another app store such as Huawei
    App Gallery for Huawei devices. Here is an example of the workflow for building,
    testing, and deploying an Android app to Huawei AppGallery with Bitrise:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.31 – Bitrise Android CI/CD workflow for Huawei App Gallery](img/Figure_06.31_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.31 – Bitrise Android CI/CD workflow for Huawei App Gallery
  prefs: []
  type: TYPE_NORMAL
- en: Once we’ve released and deployed an app to the different app stores, we need
    to wait for the quality team to send us feedback about the releases. If it’s approved,
    it can be released to different stores; otherwise, we will be given reasons for
    the rejection. In this case, we must fix them and upload another release.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s look at some common reasons for app rejection and how to avoid them.
  prefs: []
  type: TYPE_NORMAL
- en: When does the App Store reject apps?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Developing an app can be a time-consuming and expensive process. App developers
    want their apps to be accepted by the App Store, but sometimes, they get rejected.
  prefs: []
  type: TYPE_NORMAL
- en: When an app is rejected, it can be a frustrating experience for the developer.
    It is important to understand why the app was rejected to prevent it from happening
    again.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at the most common reasons ([https://developer.apple.com/app-store/review/#common-app-rejections](https://developer.apple.com/app-store/review/#common-app-rejections))
    why the App Store rejects apps and what app developers can do to increase their
    chances of acceptance.
  prefs: []
  type: TYPE_NORMAL
- en: Incomplete or incorrect information
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One of the most common reasons for rejection is *incomplete or incorrect information*.
    For example, the App Store will reject the app if the app developer does not submit
    all the required screenshots and videos. The app developer should also ensure
    the app’s name, description, and keywords are accurate and up to date and provide
    complete and accurate information to ensure the app is accepted.
  prefs: []
  type: TYPE_NORMAL
- en: Poor quality
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The App Store also rejects apps that do not meet their standards for quality.
    This includes apps that are difficult to use, have too many bugs, or need to provide
    a better user experience. Due to this, in [*Chapter 5*](B18113_05.xhtml#_idTextAnchor138),
    *Implementing a Robust Mobile App Testing Strategy*, we recommended using test
    automation in DevOps and CI/CD pipelines to act as a gate of quality for mobile
    apps.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, the App Store has specific design guidelines ([https://developer.apple.com/app-store/review/guidelines/#design](https://developer.apple.com/app-store/review/guidelines/#design))
    that must be followed for an app to be accepted. For example, the app should be
    easy to navigate, have a straightforward user interface, and be free of typos
    and other errors. It might be rejected if the app’s design does not meet the App
    Store’s standards.
  prefs: []
  type: TYPE_NORMAL
- en: Unacceptable content
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The App Store also rejects apps that contain illegal content. This includes
    apps that contain offensive or inappropriate language, content that violates copyright
    or trademarks, and apps that promote hate or violence. App developers should make
    sure that their apps do not contain any content that could be deemed offensive
    or illegal.
  prefs: []
  type: TYPE_NORMAL
- en: As you may have noticed, we discussed the process of releasing mobile apps manually
    just to understand the flow and the prerequisites for each app.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s explore different automation tools that can help mobile teams release
    their apps automatically instead of following the manual process discussed here.
  prefs: []
  type: TYPE_NORMAL
- en: Automating your release pipeline with an automated release tool
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: At the time of writing, there are different tools on the market to help mobile
    teams accelerate and automate the mobile app release process. This includes different
    out-of-the-box solutions such as Runway and the release management add-on from
    Bitrise.
  prefs: []
  type: TYPE_NORMAL
- en: Runway
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Runway.team** ([https://www.runway.team/](https://www.runway.team/)) is a
    platform that simplifies the process of shipping your mobile apps. It boasts a
    user-friendly interface, making it easy for developers to upload and distribute
    their mobile apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.32 – Runway dashboard](img/Figure_06.32_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.32 – Runway dashboard
  prefs: []
  type: TYPE_NORMAL
- en: With a few clicks, you can push your app to different app stores, eliminating
    the headache of manual submissions. Runway offers integration between different
    CI/CD platforms, such as Bitrise, Codemagic, GitHub Actions, and more, automating
    the process of building, testing, and releasing your app. This saves you time
    and effort and ensures a high-quality product by catching issues early on.
  prefs: []
  type: TYPE_NORMAL
- en: 'It works with Android and iOS, making it a versatile choice for developers
    working on multi-platform apps. You can manage your app releases for both platforms
    in one central location, as shown here for iOS apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.33 – Runway dashboard for iOS submission](img/Figure_06.33_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.33 – Runway dashboard for iOS submission
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also do the same for Android apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.34 – Runway dashboard for Android submission](img/Figure_06.34_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.34 – Runway dashboard for Android submission
  prefs: []
  type: TYPE_NORMAL
- en: 'It lets you set up different release channels (for example, alpha, beta, and
    production), allowing you to test your app with different user groups before going
    live:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.35 – Runway dashboard for Android rollout summary](img/Figure_06.35_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.35 – Runway dashboard for Android rollout summary
  prefs: []
  type: TYPE_NORMAL
- en: 'Integrations are core to Runway, and it puts a lot of work into making them
    a seamless, robust, and secure part of the experience:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.36 – Runway’s integration with distribution services](img/Figure_06.36_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.36 – Runway’s integration with distribution services
  prefs: []
  type: TYPE_NORMAL
- en: You can take a tour of the platform via its sandbox solutions for iOS ([https://demo.runway.team/dashboard/org/demo/app/appollo-ios](https://demo.runway.team/dashboard/org/demo/app/appollo-ios))
    and Android ([https://demo.runway.team/dashboard/org/demo/app/appollo-android](https://demo.runway.team/dashboard/org/demo/app/appollo-android)).
  prefs: []
  type: TYPE_NORMAL
- en: The Bitrise Release Management add-on
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In **Bitrise Release Management** ([https://devcenter.bitrise.io/en/release-management.html](https://devcenter.bitrise.io/en/release-management.html)),
    you can see how your app is released. In this way, all team members can understand
    the progress of upcoming releases, enabling them to coordinate their work more
    effectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'With release management, you can automate tasks related to a specific release,
    such as monitoring feature readiness or submitting your app for App Store review:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.37 – Bitrise Release Management add-on](img/Figure_06.37_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.37 – Bitrise Release Management add-on
  prefs: []
  type: TYPE_NORMAL
- en: 'You can always check the status of the submission process. For example, the
    following screenshot shows that we submitted the app to TestFlight, and that the
    next step is submitting the app to the App Store:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.38 – Bitrise release management stages](img/Figure_06.38_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.38 – Bitrise release management stages
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, other tools can help you in releasing mobile apps, such as TestFairy
    ([https://testfairy.com/app-distrubution](https://testfairy.com/app-distrubution))
    and AppCenter ([https://learn.microsoft.com/en-us/appcenter/distribution/](https://learn.microsoft.com/en-us/appcenter/distribution/)).
  prefs: []
  type: TYPE_NORMAL
- en: Launching the app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the app has been approved by the App Store team, you can notify your users
    of the new release in a variety of ways and also try to optimize your apps using
    **ASO**. Let’s explore how we can use the in-app update together.
  prefs: []
  type: TYPE_NORMAL
- en: In-app update
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Users can update their apps directly through their apps without visiting the
    app store, and this is a great way to update them with the latest features and
    bug fixes. In-app updates enable users to update their apps directly within their
    apps without them having to go to the app store.
  prefs: []
  type: TYPE_NORMAL
- en: By regularly updating your app, you can keep users engaged and reduce the chances
    of them abandoning your app as a result of bugs or a lack of new features.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of in-app updates:'
  prefs: []
  type: TYPE_NORMAL
- en: Using **flexible in-app** updates means that the user can continue to use the
    app while the update is downloading and installing in the background. Once the
    update is complete, the user is prompted to restart the app so that they can use
    the updated version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **immediate in-app** update requires the user to update the app before the
    updated version can be used. Once the user agrees to update, the updated app is
    downloaded and installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In-app updates can be a powerful tool for app developers who are looking to
    improve the user experience and ensure that more users are using the latest version
    of the app. Developers can increase user engagement, reduce churn, and stay competitive
    in the fast-moving mobile app market by implementing in-app updates.
  prefs: []
  type: TYPE_NORMAL
- en: App Store Optimization (ASO)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ASO aims to optimize mobile apps for better visibility and higher ranking in
    app stores. The process involves researching keywords, writing compelling titles
    and descriptions, building links, and creating screenshots and videos.
  prefs: []
  type: TYPE_NORMAL
- en: 'ASO is influenced by the following factors:'
  prefs: []
  type: TYPE_NORMAL
- en: An *app’s title* plays a vital role in search engine optimization as it is the
    first thing users see when they search for your app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *app’s description* should clearly explain what it is and why it is useful.
    It should use keywords throughout but make sure it reads naturally and doesn’t
    sound spammy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The app keyword is the term or phrase that users might search for in the app
    store. Include relevant keywords in the app’s description, title, and other metadata
    to improve the app’s visibility.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can increase your app’s visibility in search engine results by encouraging
    users to rate and review it and responding to negative feedback.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure the app icon is eye-catching and reflects the app’s purpose when users
    browse the app store.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Videos and screenshots can help users understand what the app does. You should
    use high-quality images and videos to showcase the essential features of your
    app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimize the app store metadata for each language if your app is available in
    multiple languages. App visibility can be improved in different regions by doing
    this.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure your app is regularly updated with new features, bug fixes, and performance
    improvements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conduct A/B testing on app icons, screenshots, and descriptions to find the
    best-performing combination.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ASO is an ongoing process, and it’s essential to monitor and update your app
    store listing regularly to ensure that it is up to date and reflects any changes
    to your app.
  prefs: []
  type: TYPE_NORMAL
- en: Iterate and optimize your app store listing based on the data collected.
  prefs: []
  type: TYPE_NORMAL
- en: Following this checklist can improve your app’s visibility and conversion rate,
    leading to increased downloads and user engagement. Different tools on the market
    can help you with ASO, such as **appfigures** ([https://appfigures.com/aso-tools](https://appfigures.com/aso-tools)).
    They have interesting insight into the Top Ranked iOS App Store Apps ([https://appfigures.com/top-apps/ios-app-store/united-states/iphone/top-overall](https://appfigures.com/top-apps/ios-app-store/united-states/iphone/top-overall)),
    Google Play Apps ([https://appfigures.com/top-apps/google-play/united-states/top-overall](https://appfigures.com/top-apps/google-play/united-states/top-overall)),
    and other stores. Additionally, they have different resources and guides about
    ASO ([https://appfigures.com/resources/guides](https://appfigures.com/resources/guides)).
  prefs: []
  type: TYPE_NORMAL
- en: Post-release
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once a mobile app has been released to different app stores, developers must
    still perform various maintenance tasks. This includes monitoring app reviews,
    responding to user inquiries, and updating the app with bug fixes and new features.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring app performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As soon as the app is released, it must be closely monitored to ensure it meets
    the release strategy requirements. As part of this process, you can monitor user
    feedback and usage analytics, handle user feedback and reviews, and analyze the
    app and bug reports. By doing so, we can identify potential issues and ensure
    users have the best experience possible. We will explore mobile app monitoring
    in [*Chapter 7*](B18113_07.xhtml#_idTextAnchor265), *Establishing Mobile App Monitoring,
    Observability,* *and Analytics*.
  prefs: []
  type: TYPE_NORMAL
- en: Planning for future releases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Keeping your mobile application updated and improving it after releasing the
    current version is essential to maintaining user engagement. To plan for future
    releases, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Update your product roadmap with new features, enhancements, and bug fixes based
    on feedback and analysis. Your business goals should align with the features that
    benefit your users the most.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the best practices for coding and design when implementing the planned
    features and enhancements. Make sure all bugs and issues are identified and fixed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementing a release train
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The mobile release train is a process that accelerates your release cycles.
    This approach will help you release more consistently and allows distributed teams
    to work more aligned around app development.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have CI/CD in place, you can build trains.
  prefs: []
  type: TYPE_NORMAL
- en: 'During the development phase, your teams have time to review, build, test,
    and merge features to the main branch that should be part of the train, as shown
    in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.39 – Mobile release train](img/Figure_06.39_B18113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.39 – Mobile release train
  prefs: []
  type: TYPE_NORMAL
- en: During the release train, a wide range of stakeholders may be involved, including
    development teams, quality assurance teams, and product management, as well as
    multiple iterations and testing phases before the final release is completed.
  prefs: []
  type: TYPE_NORMAL
- en: How to implement the release train
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To implement the release train, you must perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Adopt a schedule for fixed release trains (for example, 2 weeks or 1 week).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Determine who will manage the release (the release manager).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increase release confidence with feature flags and staged rollouts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify the scope of the release train. The release schedule includes the features
    and functionality that will be included in each release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plan and prioritize features according to a clear process. A wide range of stakeholders,
    including product managers, developers, and users, should be involved in this
    process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remember, it’s an ongoing process since we are in the sustain stage, which requires
    support from outside for us to stay on track.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mobile app release management is a crucial app development process that requires
    careful planning, testing, and execution. Following the best practices outlined
    in this chapter can ensure a smooth release process and maximize user satisfaction.
  prefs: []
  type: TYPE_NORMAL
- en: Release management for mobile apps involves the process of planning, scheduling,
    coordinating, and deploying new versions or updates of a mobile application to
    users. This process is crucial for regularly updating the app with new features,
    bug fixes, and security patches. However, there are different steps we should
    consider before, during, and after the release process. Let’s explore them together.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile app release management is essential for businesses to optimize the user
    experience and maintain high quality. It involves planning and implementing new
    features/updates and hotfixes.
  prefs: []
  type: TYPE_NORMAL
- en: However, releasing mobile apps requires different processes, steps, and tools.
    We discovered various stages of the release management process for mobile applications
    throughout the topics that were covered in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will continue adding more features to our mobile app
    and CI/CD pipeline to make sure that we are releasing quickly and frequently to
    our users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 3: Monitoring, Optimizing, and Securing Mobile DevOps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mobile DevOps involves monitoring the performance and usage of mobile apps in
    production environments and using that data to provide feedback to development
    teams. This can help identify and resolve issues quickly and improve the overall
    user experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18113_07.xhtml#_idTextAnchor265)*, Establishing Mobile App Monitoring,
    Observability, and Analytics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B18113_08.xhtml#_idTextAnchor306)*, Keeping Mobile Apps and DevOps
    Secure*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18113_09.xhtml#_idTextAnchor342)*, Mobile DevOps Best Practices*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
