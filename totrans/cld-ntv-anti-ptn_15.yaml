- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Transitioning to Cloud Native Good Habits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Transitioning to a cloud native architecture is more than a technical undertaking;
    it is a strategic transformation that touches every corner of an organization.
    It involves shifting from legacy mindsets and processes to a modern approach prioritizing
    agility, resilience, and innovation. This chapter goes beyond the technical steps
    of cloud adoption and dives into the crucial elements that make a transformation
    successful: aligning stakeholders, defining a strategic and flexible roadmap,
    and establishing a culture of continuous improvement. It is not just about leveraging
    the latest technologies; it is about integrating them into a cohesive strategy
    that supports and prepares our organization’s goals for the future.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As we navigate this transition, we must ensure that every piece of the puzzle
    fits together seamlessly, from stakeholder engagement to execution. We’ll explore
    how to rally support and unify our team around a shared vision, transforming buy-in
    into momentum. This chapter is meant to act as a guide in crafting a detailed
    yet adaptable roadmap that keeps our organization moving forward with precision
    and purpose. Finally, we’ll emphasize the importance of building a feedback loop
    and fostering a culture of continuous improvement, ensuring that the organization
    not only adapts to change but thrives in an ever-evolving cloud landscape. Here’s
    what we will cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Stakeholder alignment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your roadmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous improvement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start by exploring the crucial step of stakeholder alignment, the foundation
    upon which a successful cloud native transformation is built.
  prefs: []
  type: TYPE_NORMAL
- en: Stakeholder alignment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building on the stakeholder alignment fundamentals we established in [*Chapter
    14*](B22364_14.xhtml#_idTextAnchor367), transitioning to a cloud native organization
    involves more than just technical changes; it requires transforming how people
    and teams collaborate, make decisions, and align with the overall vision. In this
    section, we explore the critical aspects of stakeholder alignment, emphasizing
    the importance of engaging the right people, managing dependencies, and ensuring
    that teams are structured for success. This section builds on the insights from
    [*Chapter 2*](B22364_02.xhtml#_idTextAnchor055), *Strategizing Your Shift to Cloud
    native*, focusing on practical strategies for aligning stakeholders effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Stakeholder management considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A successful cloud native transformation hinges on effective stakeholder management.
    Without it, misalignment, conflicts, and failed initiatives are likely outcomes.
    To navigate these challenges, it is essential to understand the needs and expectations
    of each stakeholder group and manage them accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Stakeholder Group** | **Considerations** |'
  prefs: []
  type: TYPE_TB
- en: '| Executive leadership | As discussed in [*Chapter 14*](B22364_14.xhtml#_idTextAnchor367),
    engage early to secure sponsorship and resources. Demonstrate ROl and strategic
    advantages. |'
  prefs: []
  type: TYPE_TB
- en: '| Technical teams | Involve architects, developers, and SREs to ensure buy-in
    on technical decisions and implementation. |'
  prefs: []
  type: TYPE_TB
- en: '| Operations and security | Integrate operations and security teams to align
    with DevSecOps practices, fostering collaboration. |'
  prefs: []
  type: TYPE_TB
- en: '| Business stakeholders | Ensure business leaders understand how cloud native
    solutions align with the goals and metrics. This extends beyond senior leadership
    and encompasses change management and HR domains for cultural changes. |'
  prefs: []
  type: TYPE_TB
- en: Table 15.1 - Stakeholders and considerations
  prefs: []
  type: TYPE_NORMAL
- en: Establishing consistent communication is crucial for successful stakeholder
    engagement. Regular updates through various channels, such as meetings, newsletters,
    dashboards, or project management tools, keep stakeholders informed and involved
    throughout the transformation process. Transparent insights into cloud native
    initiatives’ progress, challenges, and achievements foster trust and create a
    sense of shared ownership, making stakeholders feel integral to the journey. By
    building this level of engagement, we encourage a collaborative atmosphere where
    stakeholders provide valuable insights and feedback, which are crucial for refining
    strategies and overcoming obstacles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, interactive workshops and training sessions are essential for
    building a shared understanding of cloud native principles, particularly for non-technical
    stakeholders who may be less familiar with the complexities involved. These sessions
    aim to demystify cloud native concepts such as microservices, containerization,
    and CI/CD, while illustrating the business value in practical terms, as can be
    found in [*Chapter 7*](B22364_07.xhtml#_idTextAnchor198), *Expressing Your Business
    Goals as Application Code*. Workshops also focus on aligning different departments
    around shared objectives, promoting early cross-functional collaboration. Supporting
    this alignment further requires clear roles and responsibilities using frameworks
    like **RACI** (which stands for **Responsible, Accountable, Consulted, Informed**),
    which help manage expectations by specifying responsibilities and decision-making
    authority. Establishing these boundaries upfront reduces ambiguity, enhances coordination,
    ensures that efforts are structured toward a unified goal, and establishes a solid
    trust foundation. This foundation of clear communication and mutual understanding
    sets the stage for the next crucial step: identifying the right people to drive
    the transformation.'
  prefs: []
  type: TYPE_NORMAL
- en: Identifying the required people
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Building an effective cloud native team goes beyond filling roles; it requires
    assembling individuals with the skills, mindset, and collaborative spirit necessary
    to navigate the transformation’s complexities. This process involves creating
    a balance of technical experts, strategic thinkers, and cross-functional collaborators
    who work together seamlessly. Each role should be filled by individuals who possess
    not only technical expertise but also the adaptability to learn and grow as the
    organization evolves, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cloud architects and platform engineers**: Vital for designing and managing
    cloud native architectures that align with business needs, as discussed in [*Chapter
    7*](B22364_07.xhtml#_idTextAnchor198).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security engineers**: Play a critical role in embedding security measures
    throughout the lifecycle, as emphasized in [*Chapter 5*](B22364_05.xhtml#_idTextAnchor136)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Product owners and business analysts**: Ensure that implementations align
    with business objectives and deliver measurable outcomes, covered in [*Chapter
    3*](B22364_03.xhtml#_idTextAnchor085)*.*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Understanding these specific skills and responsibilities is crucial to building
    a cohesive team capable of addressing the challenges of the transformation. The
    following are the key roles needed for a successful cloud native journey and the
    organization’s required skills:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Role** | **Description** | **Key Skills** |'
  prefs: []
  type: TYPE_TB
- en: '| Cloud architect | Designs the cloud architecture and ensures it aligns with
    cloud native best practices | Solution design, cloud platforms, and automation
    |'
  prefs: []
  type: TYPE_TB
- en: '| Platform engineer | Manages cloud infrastructure, focusing on automation
    and **infrastructure as code** (**laC**) practices | laC (Terraform, CloudFormation/CDK,
    ARM/Bicep), automation, and scripting |'
  prefs: []
  type: TYPE_TB
- en: '| Developer/SRE | Builds, deploys, and maintains cloud native applications
    with a focus on scalability and reliability | CI/CD, containerization, and microservices
    |'
  prefs: []
  type: TYPE_TB
- en: '| Security engineer | Implements continuous security controls and monitors
    cloud native environments for threats and vulnerabilities | DevSecOps, automation,
    and threat detection |'
  prefs: []
  type: TYPE_TB
- en: '| Product owner | Ensures technical implementations align with business objectives,
    bridging the gap | Business analysis and stakeholder management |'
  prefs: []
  type: TYPE_TB
- en: Table 15.2 - Critical roles for the cloud native journey
  prefs: []
  type: TYPE_NORMAL
- en: Once these roles are established, it is vital to anticipate and manage potential
    challenges that may arise when trying to align these stakeholders effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Common challenges in stakeholder alignment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even with a structured approach, cloud native transformations often encounter
    significant challenges in aligning stakeholders. These challenges typically arise
    from varying levels of familiarity with cloud native technologies, resistance
    to change, or conflicting departmental goals. [*Chapter 2*](B22364_02.xhtml#_idTextAnchor055)
    highlights the importance of aligning strategies with business objectives. Building
    on that foundation, here, we explore specific challenges that emerge when bringing
    stakeholders together and provide strategies for overcoming them.
  prefs: []
  type: TYPE_NORMAL
- en: Resistance to change
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Resistance is a frequent challenge in cloud native transformations, particularly
    when stakeholders are unfamiliar with or hesitant about new approaches. Concerns
    often stem from disruptions to established workflows or perceived risks associated
    with cloud native practices. To address this, leverage evidence-based case studies
    and data to demonstrate tangible benefits such as improved time to market, enhanced
    agility, and overall business value. By aligning these success stories with the
    organization’s strategic goals, as emphasized in [*Chapter 2*](B22364_02.xhtml#_idTextAnchor055),
    we can mitigate resistance and build confidence among stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: Conflicting priorities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Conflicting priorities are common, especially between departments with different
    goals. Development teams may prioritize rapid releases, while operations teams
    emphasize system stability. These conflicts can create friction and slow progress.
    The solution is to facilitate collaborative workshops where stakeholders align
    on a balanced approach that addresses both technical and business needs. The following
    table details workshops designed to align these priorities:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Workshop** | **Focus** | **Outcome** |'
  prefs: []
  type: TYPE_TB
- en: '| **Objectives and key results** (**OKR**) alignment workshop | Align development
    and operations teams around shared goals and metrics | A unified set of OKR that
    balance speed and stability, providing a clear, measurable path forward |'
  prefs: []
  type: TYPE_TB
- en: '| Cross-functional planning session | Bring together development, operations,
    security, and business unit representatives to map out the cloud native roadmap
    | An agreed-upon action plan that integrates technical and business needs for
    a smoother implementation |'
  prefs: []
  type: TYPE_TB
- en: '| Release strategy and deployment workshop | Establish a common understanding
    of deployment practices, including blue-green deployments, CI/CD, and automation
    techniques | A deployment strategy that aligns development and operations for
    efficient, reliable, and secure rollouts |'
  prefs: []
  type: TYPE_TB
- en: '| Risk management and stability workshop | Develop strategies to mitigate risks
    associated with rapid deployments while ensuring operational stability | A risk
    mitigation framework that balances the need for speed with the focus on minimizing
    disruptions |'
  prefs: []
  type: TYPE_TB
- en: '| Cultural integration and collaboration workshop | Address cultural differences
    between development and operations teams, promoting communication, shared responsibility,
    and collaboration | Improved team cohesion and a culture that supports cross-functional
    collaboration for cloud native success |'
  prefs: []
  type: TYPE_TB
- en: '| Technical and business alignment session | Engage technical and business
    stakeholders to discuss how cloud native practices meet business and technical
    requirements | A balanced strategy that ensures technical efficiency while delivering
    business value across departments |'
  prefs: []
  type: TYPE_TB
- en: Table 15.3 - Collaborative workshops
  prefs: []
  type: TYPE_NORMAL
- en: Without executive support, cloud native initiatives risk stalling due to insufficient
    resources or unclear direction. As outlined in [*Chapter 2*](B22364_02.xhtml#_idTextAnchor055),
    securing executive sponsorship early is a critical factor for success. Emphasize
    the strategic value of cloud native adoption and demonstrate how it aligns with
    business goals, such as increased scalability, resilience, and cost efficiency.
    Present these advantages in terms that resonate with executive leaders to secure
    the necessary backing and resources.
  prefs: []
  type: TYPE_NORMAL
- en: Role dependencies and impacts of hiring strategies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A successful cloud native transformation requires assembling the right team
    and understanding dependencies between roles to ensure coordination. This section
    explores the impacts of hiring strategies, skill gaps, and team organization to
    build a cohesive and adaptable structure. We begin by assessing skill gaps. Evaluating
    our team’s skills is essential before launching the transformation to identify
    any gaps. This helps determine where upskilling or hiring is needed. Key areas
    include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cloud architecture**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Current assessment**: Evaluate whether teams are familiar with cloud native
    architecture patterns (e.g., microservices, serverless, and CI/CD skills for test
    automation)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Actions needed**: Provide training programs and certifications, such as AWS
    Certified Solutions Architect or domain-specific technologies such as Kubernetes
    or serverless'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security expertise**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Current assessment**: Assess whether security teams know cloud native security
    practices (e.g., zero trust and automated threat detection)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Actions needed**: Hire DevSecOps specialists or offer focused training sessions
    to build internal expertise'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collaboration skills**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Current assessment**: Review the team’s readiness for cross-functional work
    as required by DevOps and platform engineering models'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Actions needed**: Implement workshops and team-building activities to encourage
    collaborative behavior'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Understanding the dependencies between roles and teams is critical for ensuring
    the cloud native transformation is cohesive and well-coordinated. The following
    are the key dependencies and their impact on team structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cross-functional collaboration**: As emphasized in [*Chapter 2*](B22364_02.xhtml#_idTextAnchor055),
    effective collaboration between development, operations, and security teams is
    central. Organize product-oriented squads to reduce silos and foster efficiency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Decentralized governance**: Decentralized governance, discussed in [*Chapter
    3*](B22364_03.xhtml#_idTextAnchor085), empowers teams to make quick, effective
    decisions while aligning with objectives and minimizing bottlenecks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shared responsibility model**: Define clear responsibilities between cloud
    providers and internal teams to manage security, compliance, and operations effectively.
    More on this can be found in [*Chapter 1*](B22364_01.xhtml#_idTextAnchor015),
    *Benefits of Cloud native and* *Common Misunderstandings*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Impacts on hiring and organizational structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The shift to cloud native often necessitates rethinking organizational structure
    and hiring strategies. Moving from traditional silos to product-centric models
    can optimize for cloud native best practices.
  prefs: []
  type: TYPE_NORMAL
- en: 'To align with cloud native best practices, organizations should move away from
    traditional siloed structures and instead adopt product-centric teams. These teams
    own the entire life cycle of a product or service, enhancing accountability and
    responsiveness. Here’s how the shift affects the organizational structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Traditional Model** | **Product-Centric Model** |'
  prefs: []
  type: TYPE_TB
- en: '| Siloed departments (e.g., development, operations, and security) | Cross-functional
    teams with shared product ownership |'
  prefs: []
  type: TYPE_TB
- en: '| Specialized skills focus | Generalist skills that adapt to changing needs
    |'
  prefs: []
  type: TYPE_TB
- en: '| Longer decision-making cycles | Decentralized, faster decision-making |'
  prefs: []
  type: TYPE_TB
- en: Table 15.4 - Model comparisons
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the benefits of **product teams**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enhanced ownership**: Teams own the entire life cycle, enabling quicker decision-making'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Alignment with objectives**: Close alignment with business goals and customer
    outcomes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collaborative culture**: Promotes continuous learning and innovation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiring considerations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The move to a product-centric, cloud native environment often requires hiring
    new talent or developing existing employees. The following strategies can guide
    this process:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Skills diversity**: Hiring for cloud native roles should focus on a diverse
    skill set. Candidates with backgrounds in network engineering, security, data
    management, and automation bring essential expertise that strengthens the team’s
    capabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cultural fit**: Cloud native environments thrive on collaboration, agility,
    and a mindset that encourages continuous learning. Prioritize candidates who embrace
    these values, ensuring they can adapt to the fast-paced and evolving nature of
    cloud native practices.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Balancing specialists and generalists**: While generalists are valuable for
    their adaptability and broad knowledge base, having specialists in critical areas
    like security, FinOps, and platform engineering ensures that deep expertise is
    available when needed.'
  prefs: []
  type: TYPE_NORMAL
- en: Upskilling and training programs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When hiring externally isn’t feasible, upskilling existing team members can
    be a highly effective strategy. Developing a comprehensive training program that
    builds both technical and soft skills is key:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Certification programs**: Offer certification pathways such as a certification
    from the big three cloud service providers to help team members gain the necessary
    cloud native skills. These programs provide a structured way for staff to develop
    expertise in critical areas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internal cloud academies**: Establish internal academies where experienced
    cloud engineers mentor other team members, sharing their knowledge through hands-on
    experience. This approach fosters a learning culture and ensures knowledge transfer
    within the organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hands-on workshops and labs**: Facilitate practical workshops and labs where
    teams can apply their knowledge in simulated cloud native scenarios, building
    CI/CD pipelines or deploying serverless applications. These sessions reinforce
    learning and improve team confidence and competence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Achieving stakeholder alignment is foundational for any cloud native transformation.
    Organizations can set up a smooth transition by managing stakeholders effectively,
    assembling the right team, and addressing hiring impacts and people dependencies.
    Drawing on strategies from *Chapters 2* and *7*, this section provides the tools
    needed to build a coalition of support, ensuring a unified approach across all
    levels of the organization. With these foundations in place, organizations are
    well prepared for the next phases of their cloud native journey. Next, we will
    look at establishing a roadmap and how to approach these.
  prefs: []
  type: TYPE_NORMAL
- en: Your roadmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A successful cloud native transformation doesn’t happen by chance; it results
    from a well-thought-out and meticulously designed **roadmap**. Just as a building
    needs blueprints before construction begins, a cloud native transformation requires
    a detailed plan that aligns technical initiatives with strategic business goals.
    Expanding on [*Chapter 14*](B22364_14.xhtml#_idTextAnchor367), this roadmap is
    a guide, helping us navigate complex changes while ensuring that every step is
    purposeful and aligned with our organization’s objectives.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section will outline building a practical roadmap that drives our cloud
    native transformation. We will explore the essential components of a successful
    plan, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Migration planning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transition architectures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delivery initiatives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these is necessary to turn strategy into reality. By the end of this
    section, we will clearly understand how to create a roadmap that supports and
    accelerates our journey to becoming a cloud native organization.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the migration path
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every cloud native transformation begins with a **migration plan**. This plan
    is not a simple checklist but a dynamic strategy that evolves based on business
    needs, technical requirements, and the organization’s willingness to change. The
    migration plan should address which workloads and applications will be moved to
    the cloud and how they will be adapted to fit cloud native architectures. This
    section builds on previous chapters, emphasizing the importance of a well-structured
    migration approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build a successful migration plan, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Assess and classify applications**: Comprehensively assess your existing
    applications and systems. Determine which are best suited for a cloud native environment
    and classify them as the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rehost (lift and shift)**: For applications that can be moved with minimal
    changes'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Refactor/replatform**: For applications that need modification to run efficiently
    in the cloud'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rebuild**: For legacy systems that may require significant redevelopment
    using cloud native technologies'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Retire or replace**: For applications that are obsolete or can be replaced
    by SaaS or PaaS solutions'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B22364_02.xhtml#_idTextAnchor055) goes into much more detail.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Define prioritization criteria**: Not all applications must move to the cloud
    simultaneously. Develop a prioritization framework based on business impact, technical
    complexity, regulatory requirements, and current system dependencies. Applications
    that offer the most value with the least risk should be prioritized early in the
    migration. The AWS **Cloud Adoption Framework** (**CAF**), *Microsoft Cloud Adoption
    Framework for Azure*, and Google’s own CAF are great input and reference structure
    points.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Establish a phased approach**: Adopting a phased migration strategy allows
    us to manage risks and learn from each stage before moving on to the next, as
    follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Phase 1**: Migrate non-critical applications to gain familiarity with cloud
    native processes'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Phase 2**: Move critical applications that require moderate refactoring'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Phase 3**: Address complex legacy systems that need significant reengineering
    or replacement'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: By structuring the migration into phases, organizations can build momentum,
    refine processes, and manage changes systematically. This phased approach aligns
    with the incremental nature of cloud native adoption discussed in earlier chapters,
    ensuring flexibility and controlled risk management.
  prefs: []
  type: TYPE_NORMAL
- en: A solid migration plan must be supported by transition architectures that guide
    the organization through each journey phase. Transition architectures act as intermediary
    states between the current and target cloud native state, ensuring that each phase
    of the migration is controlled and manageable. This aligns with the strategies
    outlined in *Chapter 17*, *Expressing Your Business Goals in Application Code*,
    where adapting applications to cloud native environments is emphasized.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the vital elements of transition architectures:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Element** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Interim state design | Develop architecture blueprints for each migration
    phase, showing how applications and systems will function temporarily before reaching
    the final cloud native state |'
  prefs: []
  type: TYPE_TB
- en: '| Temporary services | Utilize temporary services or hybrid architectures (e.g.,
    a mix of on-premises and cloud resources) to ensure continuity during the transition
    |'
  prefs: []
  type: TYPE_TB
- en: '| Integration points | Establish integration points between legacy systems
    and cloud native components, such as API gateways or data synchronization tools,
    to maintain consistency and minimize disruption |'
  prefs: []
  type: TYPE_TB
- en: Table 15.5 - Transition architectures
  prefs: []
  type: TYPE_NORMAL
- en: If we cannot move from current state to target state architecture in a single
    release, we require transition architectures. They enable us to mitigate risks
    and solve technology dependencies as we plan ahead. Transition architectures should
    be tailored to the specific needs of each migration phase. For instance, in the
    early phases, a hybrid cloud model may maintain legacy systems while testing new
    cloud native capabilities. Later, as applications become fully cloud native, they
    can decommission these temporary setups.
  prefs: []
  type: TYPE_NORMAL
- en: Building for flexibility and agility
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A critical aspect of the migration plan and transition architectures is ensuring
    flexibility and agility. Cloud native environments are dynamic, so the roadmap
    must allow for adjustments as new requirements, technologies, and insights emerge.
    Embrace the following practices to create a resilient roadmap:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Modular planning**: Break down the migration into modular components that
    can be executed independently. This approach minimizes disruption and enables
    teams to work in parallel, accelerating the overall migration timeline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Feedback loops**: Establish feedback loops where teams review progress and
    outcomes from each migration phase. Regular retrospectives and performance reviews
    help refine the plan and adapt future phases based on lessons learned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automation and orchestration**: Use **infrastructure as code** (**IaC**)
    and orchestration tools to automate deployments and transitions. Automating key
    elements reduces manual effort, mitigates risk, and speeds up migration activities,
    ensuring that each transition is efficient and consistent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Planning ahead for your migration beyond the technical is critical; the delivery
    initiatives must also be addressed.
  prefs: []
  type: TYPE_NORMAL
- en: Planning delivery initiatives
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Much like we started with developing a comprehensive migration plan and transition
    architectures in [*Chapter 14*](B22364_14.xhtml#_idTextAnchor367), the next step
    is defining and executing delivery initiatives. These initiatives translate strategy
    into action, ensuring that cloud native principles and practices are embedded
    into the organization’s operations and culture. This step is where the roadmap
    transitions from planning to execution, aligning with the delivery strategies
    covered in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Delivery initiatives should be structured to cover various aspects of the cloud
    native transformation, including development, infrastructure, security, and operations.
    To ensure a holistic approach, consider the following delivery initiatives:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Infrastructure modernization**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Objective**: Transition from legacy infrastructure to a fully automated and
    scalable cloud native environment, as discussed in [*Chapter 7*](B22364_07.xhtml#_idTextAnchor198)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Actions**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement IaC using tools like Terraform, AWS CloudFormation, ARM templates,
    or Azure Bicep
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Build CI/CD pipelines to automate the deployment and scaling of infrastructure
    components
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduce container orchestration platforms (e.g., Kubernetes) for managing
    microservices and workloads at scale
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Development** **practice enhancement**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Objective**: Establish cloud native development practices to improve agility
    and reduce time to market, as discussed in [*Chapter 5*](B22364_05.xhtml#_idTextAnchor136)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Actions**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adopt microservices architectures to break down monolithic applications
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement CI/CD practices for automated testing, integration, and deployment
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Leverage serverless computing where appropriate to increase development speed
    and reduce operational overhead
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security** **integration (DevSecOps)**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Objective**: Embed security practices throughout the development life cycle
    to minimize vulnerabilities, as discussed in [*Chapter 11*](B22364_11.xhtml#_idTextAnchor292),
    *Running It Without Breaking It*, and [*Chapter 5*](B22364_05.xhtml#_idTextAnchor136)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Actions**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Automate security scans and compliance checks as part of the CI/CD pipeline
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement a zero-trust architecture to secure cloud native applications and
    infrastructure; [*Chapter 9*](B22364_09.xhtml#_idTextAnchor250), *Ignoring Latency
    and Bandwidth*, provides an in-depth overview of the zero-trust architecture
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop a security monitoring strategy using cloud native threat detection and
    response tools
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: By structuring these initiatives, we can ensure that cloud native principles
    are implemented and operationalized, setting a foundation for a robust and resilient
    cloud environment.
  prefs: []
  type: TYPE_NORMAL
- en: Phased delivery – aligning initiatives with migration phases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To maintain coherence between the migration plan and delivery initiatives,
    the initiatives have to be aligned with the phases of the migration. This approach
    ensures that each phase migrates systems and builds the necessary capabilities
    to support cloud native operations. By aligning each delivery initiative with
    a specific phase, we create a structured, systematic progression that minimizes
    risks, maximizes efficiency, and allows for iterative learning and adaptation.
    This phased delivery approach echoes the incremental strategies discussed in earlier
    chapters, ensuring a smooth transformation journey. The following is a detailed
    table of reference for a phased move to cloud native:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Phase** | **Key Activities** | **Details** **and Actions** | **Outcomes**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Phase 1** | Establish foundational cloud infrastructure | **IaC implementation**:
    Deploy foundational infrastructure using IaC tools such as Terraform, automating
    network setup, security groups, and VPCs**CI/CD pipeline setup**: Build CI/CD
    pipelines to automate deployments for infrastructure components, ensuring consistency
    and repeatability**Container orchestration**: Set up a container orchestration
    platform (e.g., Kubernetes) for managing workloads, supporting microservices,
    and providing scalability**Security controls**: Integrate basic security controls,
    such as firewalls and identity management, to establish a secure baseline environment.
    | A scalable, automated environment using IaC and CI/CD pipelines, providing the
    base for deploying applications and scaling resources efficiently |'
  prefs: []
  type: TYPE_TB
- en: '| **Phase 2** | Refactor and deploy business-critical applications | **Application
    refactoring**: Adapt critical applications for cloud native environments, breaking
    monoliths into microservices where appropriate**Platform redesign**: For suitable
    workloads, implement cloud native architectures to reduce operational overhead
    and enhance scalability**Enhanced security**: Integrate advanced security practices
    such as zero-trust architectures and automate security scans within CI/CD pipelines
    (refer to [*Chapter 5*](B22364_05.xhtml#_idTextAnchor136))**Observability setup**:
    Deploy monitoring and logging tools (e.g., Prometheus or Grafana) to ensure visibility
    and real-time tracking of application performance and health | Cloud native applications
    with improved agility, deployed through automated pipelines and monitored securely,
    providing immediate insights into system performance and stability |'
  prefs: []
  type: TYPE_TB
- en: '| **Phase 3** | Rebuild or replace legacy systems entirely | **System rebuilds**:
    For legacy systems unsuitable for simple refactoring, address the rehost in the
    cloud or managed/SaaS offerings (i.e., utilizing DocumentDB for AWS – a managed
    MongoDB-like database – instead of self-hosting MongoDB)**Data migration**: Migrate
    databases to managed cloud services like Amazon RDS or Google Cloud databases,
    ensuring data consistency and availability**Infrastructure optimization**: Optimize
    infrastructure usage with auto-scaling groups, load balancers, and caching mechanisms,
    ensuring efficient resource utilization and cost management (building on insights
    from [*Chapter 4*](B22364_04.xhtml#_idTextAnchor112), *How to Avoid a* *Bill Shock*)
    | Fully integrated cloud native systems that leverage microservices, serverless
    computing, and cloud native security, achieving enhanced performance, scalability,
    and cost efficiency |'
  prefs: []
  type: TYPE_TB
- en: '| **Phase 4** | Optimize and automate cloud native operations | **Full automation**:
    Automate the management and scaling of applications using advanced orchestration
    tools like Helm for Kubernetes, enabling hands-off operations**DevSecOps integration**:
    Expand DevSecOps practices, embedding security controls deeper into CI/CD pipelines
    and automating compliance checks**Cloud cost optimization**: Implement FinOps
    practices to continuously optimize cloud spend by using tools such as AWS Cost
    Explorer to identify savings opportunities and establish cost guardrails, as discussed
    in [*Chapter 4*](B22364_04.xhtml#_idTextAnchor112)**Performance tuning**: Perform
    application performance tuning, leveraging insights from monitoring tools to adjust
    resources dynamically and ensure optimal application performance | Highly automated
    cloud native operations with a focus on efficiency, security, and cost optimization,
    enabling continuous delivery and rapid scaling in response to business needs |'
  prefs: []
  type: TYPE_TB
- en: Table 15.6 - Phased delivery example
  prefs: []
  type: TYPE_NORMAL
- en: To ensure a seamless evolution from current-state systems to the target architecture,
    it is crucial to embed structured transition strategies within delivery initiatives.
  prefs: []
  type: TYPE_NORMAL
- en: Building transition architectures into delivery initiatives
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Transition architectures play a vital role in the execution of delivery initiatives.
    We can manage dependencies and mitigate disruptions by integrating transition
    designs into the delivery process. Here’s how to incorporate these architectures
    effectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Temporary integration layers**: Use API gateways or middleware solutions
    as temporary layers between legacy systems and new cloud native components. This
    approach ensures continuity of service while systems are incrementally migrated
    and refactored. The **facade approach** or **strangler fig pattern** by Martin
    Fowler are well suited here. [*Chapter 7*](B22364_07.xhtml#_idTextAnchor198) provides
    further insights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hybrid deployment models**: For workloads that cannot be moved immediately,
    implement hybrid deployment models where components operate across on-premises
    and cloud environments. These models allow for gradual shifts without compromising
    the availability of critical systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Iterative rollouts**: Instead of migrating everything simultaneously, implement
    iterative rollouts where components or services are moved in controlled batches.
    We can adjust subsequent phases based on performance and insights from monitoring
    each rollout phase and capturing key metrics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transition architectures should be viewed as temporary solutions that evolve
    as the migration progresses, eventually phasing out as the organization reaches
    its cloud native target state.
  prefs: []
  type: TYPE_NORMAL
- en: Measuring success and adjusting the roadmap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The success of our roadmap hinges on the ability to measure progress, capture
    important metrics, and make necessary adjustments. Establishing measurable outcomes
    that align with our organization’s business objectives is part of our delivery
    initiatives. Common metrics include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Deployment frequency**: How often can new features or updates be deployed?
    Increased frequency indicates a successful transition to cloud native practices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time to recovery** (**TTR**): Measure the time it takes to recover services
    from an incident. Faster recovery times demonstrate improved resilience and cloud
    native maturity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application performance**: Monitor application response times, throughput,
    and resource usage to assess whether cloud native refactoring has optimized performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By tracking these metrics, we can identify areas of improvement, refine our
    roadmap, and ensure that each phase and initiative delivers measurable value.
  prefs: []
  type: TYPE_NORMAL
- en: As cloud native environments are dynamic, our roadmap should incorporate continuous
    feedback loops to adapt to changes, innovations, and lessons learned. These loops
    involve regularly assessing the outcomes of each phase and initiative, ensuring
    that adjustments can be made based on real-world performance data.
  prefs: []
  type: TYPE_NORMAL
- en: Good habits for continuous feedback
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following are good habits you can follow to get continuous feedback:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Retrospectives**: Hold retrospective sessions after each phase to review
    successes, challenges, and areas for improvement. Use this feedback to refine
    upcoming phases and adjust the roadmap as necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automated monitoring and alerts**: Implement automated monitoring systems
    that provide real-time data on application performance, security incidents, and
    infrastructure health. Automated alerts help teams quickly respond and adjust
    strategies based on emerging trends or issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross-functional review boards**: Establish review boards of representatives
    from development, operations, business, and security teams. These boards provide
    holistic insights, ensuring that technical and business goals remain aligned throughout
    the transformation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a cloud native roadmap requires careful planning, strategic alignment,
    and the flexibility to adapt. Developing a comprehensive migration plan, designing
    effective transition architectures, and structuring delivery initiatives, we create
    a path that supports and accelerates our cloud native journey. This section has
    laid out the foundational elements needed to craft a roadmap that transforms our
    organization methodically and efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the roadmap has been established, the focus shifts to ensuring continuous
    improvement throughout the cloud native journey. The following section will delve
    into strategies for creating a culture of ongoing evolution and refinement to
    maximize the benefits of our transformation.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous improvement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The journey to becoming a cloud native organization doesn’t end with migration
    or a well-structured roadmap; it is an ongoing commitment to continuous improvement.
    In a dynamic cloud environment, processes, technologies, and organizational goals
    evolve constantly, requiring teams to adapt quickly. **Continuous improvement**
    is the mechanism that keeps the cloud native environment optimized, resilient,
    and aligned with both operational needs and business objectives. By embedding
    continuous improvement, a cloud native organization can consistently innovate
    and respond to changing demands, ensuring sustained success in the cloud native
    landscape.
  prefs: []
  type: TYPE_NORMAL
- en: 'This final section explores how to embed a culture of continuous improvement
    into cloud native practices. We will address the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**New or modified building blocks**: Essential technical and operational components
    that support continuous optimization and cloud native success'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cultural impact on teams and ways of working**: The shift in team dynamics
    and mindset needed for fostering a continuous improvement culture'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Technology dependencies**: Understanding and managing interdependencies to
    maintain an adaptable, high-performance cloud environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These components create an ecosystem where cloud native practices can mature
    and evolve, keeping the organization competitive and agile.
  prefs: []
  type: TYPE_NORMAL
- en: Establishing new or modified building blocks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A cloud native environment is only as strong as the building blocks it is built
    on. As the organization transitions, modifying existing building blocks or introducing
    new ones may be necessary to support continuous improvement effectively. Building
    blocks refer to technical and operational components, like tools, infrastructure,
    processes, and governance frameworks, that enable cloud native success.
  prefs: []
  type: TYPE_NORMAL
- en: The essential tools and infrastructure during the initial migration phase may
    require adjustments or replacements to meet the demands of a mature, continuously
    improving cloud native environment. New tools may need to be introduced to address
    automation, observability, or security gaps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are examples of key building blocks for continuous improvement:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enhanced CI/CD pipelines**: As discussed in [*Chapter 5*](B22364_05.xhtml#_idTextAnchor136),
    cloud native environments expand, and CI/CD pipelines need to evolve to support
    higher deployment frequencies, integrated testing, and improved rollback capabilities.
    Advanced automation and orchestration tools, such as Argo CD and Flux for Kubernetes,
    can help make pipelines more efficient, secure, and resilient while supporting
    a GitOps-native approach. For more on GitOps strategies, see [*Chapter 3*](B22364_03.xhtml#_idTextAnchor085).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Observability and monitoring tools**: Real-time observability is essential.
    Upgrading or implementing tools like Prometheus, Grafana, and New Relic enables
    teams to monitor metrics, trace requests across distributed systems, and capture
    logs, providing a comprehensive view of system health. [*Chapter 10*](B22364_10.xhtml#_idTextAnchor270),
    *Observing Your Architecture*, offers more profound insights into building an
    effective observability strategy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automated policy enforcement**: Policy enforcement ensures ongoing compliance
    with security, cost management, and operational standards. Tools such as AWS Config
    and Kubernetes OPA Gatekeeper can streamline this process, minimizing the need
    for manual intervention. [*Chapter 4*](B22364_04.xhtml#_idTextAnchor112) and [*Chapter
    2*](B22364_02.xhtml#_idTextAnchor055) explore preventative guardrails in more
    detail, highlighting ways to maintain compliance proactively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each new or enhanced building block plays a role in reducing friction and increasing
    iteration speed. This adaptability ensures that the environment can seamlessly
    handle new applications, services, and workloads.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and modifying governance frameworks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **governance framework** provides oversight and structure, ensuring that cloud
    native practices align with organizational objectives. However, as the cloud native
    environment develops, the governance framework must adapt to changing needs. Early
    governance efforts might have been focused on establishing compliance and security
    standards; now, they should shift toward supporting innovation and flexibility.
    In a continuously evolving environment, the ability to adjust governance practices
    in response to new tools, processes, and services is crucial. Adapting the governance
    framework allows teams to work autonomously, make agile decisions, and leverage
    innovative solutions without facing constraints.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, adaptive governance frameworks create a more inclusive environment
    where team feedback is integrated into governance adjustments. By encouraging
    regular feedback loops, teams can highlight gaps or opportunities for policy improvement,
    enhancing the relevance and impact of governance practices. To foster a governance
    framework that aligns with continuous improvement, consider the following key
    practices, each designed to promote flexibility, autonomy, and responsiveness
    in a maturing cloud native environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Consideration** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Dynamic guardrails | Leverage flexible guardrails, as discussed in [*Chapter
    5*](B22364_05.xhtml#_idTextAnchor136), that adapt to new tools, processes, and
    services, enabling teams to innovate within organizational boundaries without
    restrictive policies |'
  prefs: []
  type: TYPE_TB
- en: '| Decentralized decision-making | Encourage autonomous decision-making within
    a defined framework, reducing bottlenecks and accelerating innovation cycles,
    as discussed in [*Chapter 3*](B22364_03.xhtml#_idTextAnchor085) |'
  prefs: []
  type: TYPE_TB
- en: '| Feedback-driven adjustments | Gather regular feedback from teams on governance
    policies and refine frameworks accordingly, ensuring alignment with evolving needs
    and fostering continuous improvement |'
  prefs: []
  type: TYPE_TB
- en: Table 15.7 - Governance framework practices
  prefs: []
  type: TYPE_NORMAL
- en: Governance frameworks that adapt to continuous improvement not only promote
    operational efficiency but also support a culture of innovation and experimentation.
  prefs: []
  type: TYPE_NORMAL
- en: Embracing a culture of continuous improvement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A successful cloud native transformation relies as much on culture as it does
    on technology. Without a continuous improvement mindset, the teams may struggle
    to keep up with the pace of change that cloud native environments require. Embedding
    a culture of continuous improvement helps ensure that teams are proactive, engaged,
    and committed to refining both processes and the technology stack.
  prefs: []
  type: TYPE_NORMAL
- en: A cloud native organization thrives on cross-functional collaboration, which
    promotes faster decision-making and better alignment with business goals. In a
    continuously improving environment, collaboration across **development, security,
    and operations** (**DevSecOps**) becomes even more critical.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are strategies for building a collaborative culture:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cross-functional squads**: Create product-oriented squads that include members
    from development, operations, and security teams. These squads allow for shared
    responsibility and foster a culture where teams collaborate closely to solve challenges
    and deliver value. More on this can be found in [*Chapter 1*](B22364_01.xhtml#_idTextAnchor015).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regular retrospectives**: Conduct regular retrospectives to evaluate successes
    and identify areas for improvement. Retrospectives provide a safe space for team
    members to voice concerns, celebrate wins, and generate ideas for refining processes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Knowledge sharing sessions**: Encourage knowledge sharing by hosting internal
    workshops, lunch-and-learns, or tech talks. These sessions build a collective
    knowledge base, ensuring teams stay informed about new tools, best practices,
    and evolving cloud native concepts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedding a collaborative culture helps reduce silos and supports continuous
    learning and innovation. This collaborative foundation not only accelerates decision-making
    and streamlines workflows but also fosters a culture where team members feel empowered
    to contribute ideas and improvements, further driving innovation and adaptability
    across the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Empowering teams for autonomy and accountability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Along the cloud native journey, empowering teams to make decisions and take
    ownership of domains becomes essential. Autonomy not only speeds up processes
    but also fosters accountability, as team members feel directly responsible for
    the success of initiatives. The following approaches can be utilized to foster
    team autonomy:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Decentralized decision-making**: Allow teams to make decisions within the
    domains without waiting for centralized approvals. For example, teams can own
    CI/CD pipelines, choosing tools and processes that best meet the organization’s
    needs. Another approach can be found in [*Chapter 2*](B22364_02.xhtml#_idTextAnchor055),
    which approaches decision-making via top-down and bottom-up adoption.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clear ownership models**: Assign clear ownership for applications, services,
    or components within the cloud environment. Ownership can extend to maintenance,
    updates, and improvements, ensuring that every system has a dedicated team monitoring
    and enhancing its performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Define success metrics**: Establish specific success metrics for each team,
    such as DORA metrics (deployment frequency, change failure rate, and time to restore
    service) that align with business goals. Metrics encourage teams to improve processes
    to meet or exceed expectations continuously and identify bottlenecks where possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an autonomous and accountable environment reduces dependencies on other
    teams and drives continuous improvement from the ground up.
  prefs: []
  type: TYPE_NORMAL
- en: Addressing technology dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a continuously evolving cloud native environment, technology dependencies
    are a critical factor. Dependencies between tools, platforms, and services can
    impact performance, scalability, and flexibility. Effectively managing these dependencies
    is essential to enable seamless improvements and ensure that cloud native systems
    remain agile.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the cloud native environment matures, dependencies between services, databases,
    and infrastructure components become more complex. A clear understanding of these
    dependencies helps avoid issues when updating or introducing new elements to the
    system. The following steps can be used to manage dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dependency mapping**: Create a visual map of dependencies between services,
    databases, APIs, and third-party tools. Use dependency mapping tools such as service
    discovery tools (e.g., AWS Cloud Map, GCP service discovery, or Azure API Center).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regular dependency audits**: Conduct regular audits to identify outdated,
    unsupported, or underperforming components. Dependencies that are no longer compatible
    with the cloud native architecture should be upgraded or replaced.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Establish dependency owners**: Assign owners to critical dependencies, such
    as databases or external APIs. Ownership ensures that dependencies are monitored,
    updated, and optimized regularly, minimizing the risk of performance degradation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By mapping and managing dependencies, we can reduce unexpected failures, improve
    system resilience, and streamline updates across the environment.
  prefs: []
  type: TYPE_NORMAL
- en: Proactively managing third-party integrations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Many cloud native environments rely on third-party serviceslike SaaS applications
    or data providers. Managing these integrations effectively is essential for maintaining
    system performance, ensuring data consistency, and avoiding disruptions. The following
    are important considerations for third-party dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Service-level agreements** (**SLAs**): Review SLAs for third-party services
    to understand their performance guarantees, availability, and support levels.
    Ensure that SLAs align with operational requirements, especially for mission-critical
    integrations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Proactive monitoring**: Implement monitoring tools that track the performance
    and availability of third-party services. If an integration starts to underperform,
    automated alerts can help teams respond before users are affected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fallback mechanisms**: For essential services, establish fallback mechanisms,
    such as failover instances or backup providers, to ensure continuity during outages.
    This is particularly important for services that support high-availability applications
    or critical functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proactively managing third-party integrations ensures that dependencies do not
    become points of failure, supporting continuous improvement in performance and
    reliability.
  prefs: []
  type: TYPE_NORMAL
- en: Embedding feedback loops for continuous improvement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Feedback loops are vital to continuous improvement, providing data-driven insights
    that inform decisions and drive enhancements. By embedding feedback mechanisms
    across processes, infrastructure, and applications, the teams gain insights to
    make informed, real-time adjustments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuous monitoring is essential for capturing real-time feedback on system
    performance, security, and user experience. An observability stack, including
    monitoring, logging, and tracing, offers a complete view of the cloud native environment,
    allowing teams to detect and address issues proactively. The following are key
    components of an observability stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Real-time monitoring**: Use tools like Prometheus and Datadog to monitor
    infrastructure and application health. Real-time monitoring provides instant alerts
    for issues such as increased latency or CPU usage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Centralized logging**: Implement a centralized logging solution such as the
    **Loki, Grafana, Tempo, and Mimir** (**LGTM**) Stack (a popular open source monitoring
    stack) to aggregate and analyze logs. Centralized logging enables teams to identify
    patterns, troubleshoot errors, and gain insights across the environment. This
    extends to the big three cloud service providers who have their own cloud native
    solutions like Amazon CloudWatch, Azure Monitor, and the GCP operations suite.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Distributed tracing**: Tools such as Jaeger or OpenTelemetry enable end-to-end
    tracing across microservices. Tracing provides visibility into request flows,
    helping teams identify bottlenecks and optimize application performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real-time observability enhances the feedback process, equipping teams with
    actionable insights to maintain high availability and performance standards.
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging DORA metrics for performance insights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**DevOps Research and Assessment** (**DORA**) metrics are invaluable for measuring
    the success of continuous improvement efforts, as they provide quantifiable insights
    into software delivery and operational performance. These metrics include the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Deployment frequency**: This measures how often code is deployed, reflecting
    agility and responsiveness'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lead time for changes**: This tracks the time from code commit to deployment,
    indicating pipeline efficiency'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Change failure rate**: This represents the percentage of changes that lead
    to failures in production, showing the quality of testing and validation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mean time to restore** (**MTTR)**: This measures the time to recover from
    production failures, highlighting resilience'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is how DORA metrics can be used to drive improvements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Set performance baselines**: Use DORA metrics to establish performance baselines
    and track improvements over time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identify areas for optimization**: High change failure rates, for instance,
    may suggest the need for more robust testing or code review processes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Celebrate successes**: When metrics show improvement, celebrate these milestones
    to reinforce a culture of continuous improvement and motivate teams'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The cloud native technology landscape evolves rapidly, with new tools, frameworks,
    and methodologies emerging frequently. As part of continuous improvement, regularly
    evaluate and optimize the technology stack to take advantage of advancements and
    ensure that the environment remains efficient and competitive. The following strategies
    can be used for stack optimization:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Evaluate new tools**: Periodically review the latest tools and technologies
    that could enhance productivity or performance. For example, service meshes like
    Linkerd or newer CI/CD tools may offer improved features that support continuous
    improvement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Optimize resource allocation**: Regularly analyze resource usage to identify
    areas for cost savings. Leveraging auto-scaling, reserved instances, or spot instances
    can reduce cloud spend without compromising performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Refine CI/CD pipelines**: As pipelines evolve, look for ways to optimize
    them, such as integrating new testing frameworks or adding quality gates that
    reduce the need for manual intervention.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By embracing continuous improvement in the technology stack, we can ensure that
    the environment remains agile, efficient, and capable of meeting business demands.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Executing continuous improvement in a cloud native organization is an ongoing,
    iterative process requiring a commitment to enhancing technical and cultural practices.
    By establishing new or modified building blocks, embracing a culture of collaboration
    and autonomy, managing technology dependencies, and embedding feedback loops,
    organizations can create an environment where cloud native practices evolve alongside
    business needs.
  prefs: []
  type: TYPE_NORMAL
- en: With continuous improvement embedded into the organization’s DNA, our cloud
    native journey remains flexible, resilient, and capable of driving sustained growth
    and innovation. This chapter concludes the foundational strategies and insights
    for building, executing, and optimizing the cloud native transformation, empowering
    teams to lead with agility and confidence in a constantly evolving digital landscape.
  prefs: []
  type: TYPE_NORMAL
