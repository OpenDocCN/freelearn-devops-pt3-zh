- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Elevating Team Collaboration with GitHub
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提升团队协作与 GitHub
- en: Congratulations on reaching this pivotal chapter of our journey! Now, it is
    time to delve deeper, moving beyond the perception of GitHub as merely a code
    hosting platform. GitHub is where the world builds software, where development
    processes are streamlined, and where the spirit of DevOps truly comes to life.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你来到了我们旅程中的这一关键章节！现在，是时候更深入地探索了，超越将 GitHub 仅视为一个代码托管平台的认知。GitHub 是全球开发者构建软件的地方，是开发流程简化的舞台，也是
    DevOps 精神真正展现的地方。
- en: In this chapter, we will dive into the practical aspects of using GitHub, transforming
    theory into action. Our focus will be on specific GitHub features crucial for
    teamwork and collaboration in a DevOps environment. Each section is crafted to
    enhance your understanding and skills, ensuring a smooth transition from traditional
    systems to modern DevOps practices. Let’s embark on this exciting journey with
    GitHub, a powerful ally in the DevOps toolkit.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨使用 GitHub 的实践内容，将理论转化为实际操作。我们的重点将是 GitHub 中对于团队合作和 DevOps 环境中协作至关重要的具体功能。每一节都旨在提升你的理解和技能，确保从传统系统到现代
    DevOps 实践的平稳过渡。让我们与 GitHub 一起，踏上这段激动人心的旅程，GitHub 是 DevOps 工具包中的强大助手。
- en: 'We will cover the following main headings in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: Getting started with GitHub
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用 GitHub
- en: Issues – Collaboration excellence at GitHub
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题 – GitHub 上的协作卓越
- en: Pull request excellence
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拉取请求卓越
- en: Getting the best out of GitHub
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大化利用 GitHub
- en: GitHub repository excellence
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 仓库卓越
- en: We will start with a hands-on experience working with GitHub. If you want to
    grasp the big picture of GitHub again, please go back to [*Chapter 1*](B21203_01.xhtml#_idTextAnchor014)
    to see what GitHub is all about.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从与 GitHub 的实践体验开始。如果你想再次了解 GitHub 的全貌，请回到 [*第一章*](B21203_01.xhtml#_idTextAnchor014)
    了解 GitHub 的全部内容。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Configuration instructions for proceeding with this section can be found in
    the following repository. Please make sure the Git and SSH tools are installed.
    For Windows users, it is recommended to use PowerShell. I also encourage you to
    get the most up-to-date information written about the different commands and environments:
    [https://github.com/PacktPublishing/DevOps-Unleashed-with-Git-and-GitHub](https://github.com/PacktPublishing/DevOps-Unleashed-with-Git-and-GitHub).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 继续本节所需的配置说明可以在以下仓库中找到。请确保已安装 Git 和 SSH 工具。对于 Windows 用户，推荐使用 PowerShell。我还建议你查阅最新的有关不同命令和环境的信息：[https://github.com/PacktPublishing/DevOps-Unleashed-with-Git-and-GitHub](https://github.com/PacktPublishing/DevOps-Unleashed-with-Git-and-GitHub)。
- en: Getting started with GitHub
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 GitHub
- en: Now, let’s get started with the GitHub experience. This section explains how
    to get started with GitHub and covers basic repository operations. You will also
    learn how to use Git to interact with remote repositories, completing the journey
    of Git basics here!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始 GitHub 的体验。本节将介绍如何开始使用 GitHub，并涵盖基本的仓库操作。你还将学习如何使用 Git 与远程仓库进行交互，在这里完成
    Git 基础的学习之旅！
- en: Setting up your GitHub account
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置你的 GitHub 账户
- en: Embarking on your GitHub journey begins with a simple sign-up process. Navigate
    to the GitHub website and register by providing a username, email, and password.
    This step is your gateway to the realms of collaborative development, offering
    a suite of features for team collaboration and project management.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 开始你的 GitHub 之旅首先需要一个简单的注册过程。访问 GitHub 网站，提供用户名、电子邮件和密码进行注册。这一步是进入协作开发世界的入口，GitHub
    提供了一套完整的功能来支持团队协作和项目管理。
- en: Once registered, you are all set to create repositories and push your code to
    GitHub, marking the start of your Git journey. GitHub serves not just as a tool
    but as a cornerstone in your DevOps journey, fostering collaboration and driving
    innovation. If you already have a GitHub account, feel free to move to the next
    steps.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注册后，你就可以创建仓库并将代码推送到 GitHub，标志着你的 Git 之旅的开始。GitHub 不仅是一个工具，它还是你 DevOps 旅程的基石，促进协作并推动创新。如果你已经有
    GitHub 账户，随时可以跳过注册，进入下一步。
- en: 'To sign up, visit [https://github.com/](https://github.com/) and click the
    **Sign up** button located at the top right of the page:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要注册，请访问 [https://github.com/](https://github.com/) 并点击页面右上角的 **注册** 按钮：
- en: '![Figure 4.1 – Home page of github.com](img/B21203_04_001.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1 – github.com 首页](img/B21203_04_001.jpg)'
- en: Figure 4.1 – Home page of github.com
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – github.com 首页
- en: 'Enter your email, choose a password, and select a unique username. After completing
    a few confirmation steps, you will receive a confirmation email. Use the code
    provided to finalize your GitHub account setup:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 输入你的电子邮件，选择一个密码，并选择一个独特的用户名。在完成几个确认步骤后，你将收到一封确认邮件。使用提供的验证码来完成你的 GitHub 账户设置：
- en: '![Figure 4.2 – Registration page on github.com and confirmation email](img/B21203_04_002.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2 – GitHub.com 上的注册页面和确认邮件](img/B21203_04_002.jpg)'
- en: Figure 4.2 – Registration page on github.com and confirmation email
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – GitHub.com 上的注册页面和确认邮件
- en: With these steps, your GitHub account is ready, paving the way to create your
    first repository. The account creation experience is current at the time of writing.
    It may change in the future, but it is basically a straightforward way.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些步骤，你的 GitHub 账户就准备好了，为创建你的第一个仓库铺平了道路。账户创建过程是当前撰写时的情况，未来可能会有所变化，但基本上这是一个直接的方式。
- en: Creating your first GitHub repository
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建你的第一个 GitHub 仓库
- en: 'When logging in to GitHub, the menu for creating a new repository varies depending
    on your user status. New users are directly presented with a **Create repository**
    button, while existing users will find the **New** button within their list of
    repositories:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当登录 GitHub 时，创建新仓库的菜单会根据你的用户身份有所不同。新用户会直接看到**创建仓库**按钮，而现有用户则会在他们的仓库列表中找到**新建**按钮：
- en: '![Figure 4.3 – The button to create a new repository](img/B21203_04_003.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – 创建新仓库的按钮](img/B21203_04_003.jpg)'
- en: Figure 4.3 – The button to create a new repository
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – 创建新仓库的按钮
- en: 'Then, the repository creation settings screen appears:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，仓库创建设置页面会出现：
- en: '![Figure 4.4 – Creating a new repository](img/B21203_04_004.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – 创建新仓库](img/B21203_04_004.jpg)'
- en: Figure 4.4 – Creating a new repository
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 创建新仓库
- en: 'Creating a repository involves a few key decisions:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 创建仓库涉及几个关键决策：
- en: '**Repository location**: Choose the owner (yourself or an organization you
    are part of) and provide a unique name for your repository under the selected
    owner.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仓库位置**：选择仓库的所有者（你自己或你所在的组织），并为选定所有者下的仓库提供一个独特的名称。'
- en: '**Visibility**: Decide whether your repository will be public or private. With
    a **public** repository, your project is accessible to anyone around the world,
    making it a part of the open source community where sharing and collaboration
    are encouraged. On the other hand, a **private** repository is for work you want
    to keep to yourself or share with selected individuals, offering confidentiality.
    For members of organizations under a GitHub Enterprise plan, there is an option
    to create **internal** repositories. These repositories are perfect for InnerSource
    initiatives as they are only visible within your enterprise, providing a secure
    environment for collaborative projects.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可见性**：决定你的仓库是公开的还是私有的。使用**公开**仓库，任何人都可以访问你的项目，使其成为开源社区的一部分，鼓励共享和协作。另一方面，**私有**仓库是为了那些你希望保密或者只与你选择的人分享的工作，提供了保密性。对于在
    GitHub 企业计划下的组织成员，还有一个选项可以创建**内部**仓库。这些仓库非常适合内部源（InnerSource）项目，因为它们仅在你的企业内部可见，提供了一个安全的协作环境。'
- en: '`README.md`, `.gitignore`, or `LICENSE` file. Including a `README.md` file
    is like providing a welcoming guidebook for your project; it is where you explain
    what your project is about, how to use it, and any other important information
    a visitor should know. If your project is open source, picking the right license
    from the get-go is especially essential. It sets the rules for how others can
    use and contribute to your project. Selecting these options means GitHub will
    automatically run the `git init` command inside. If you are planning to push an
    existing project to GitHub, leave these unchecked.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.md`、`.gitignore` 或 `LICENSE` 文件。包含一个 `README.md` 文件就像是为你的项目提供了一个欢迎指南；这是你解释项目内容、使用方法以及访客需要知道的其他重要信息的地方。如果你的项目是开源的，选择合适的许可证尤其重要。它为他人如何使用和贡献你的项目设定了规则。选择这些选项意味着
    GitHub 会自动运行 `git init` 命令。如果你打算将现有项目推送到 GitHub，可以不勾选这些选项。'
- en: 'For this example, leave all initialization checkboxes unchecked, resulting
    in a blank repository. This sets the stage for uploading your local files in the
    next steps. After filling in the repository details, click the **Create repository**
    button. This action will bring your new repository to life:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，保持所有初始化复选框未选中，结果是一个空的仓库。这为接下来的步骤上传本地文件做好了准备。填写完仓库详细信息后，点击**创建仓库**按钮。此操作将使你的新仓库正式创建：
- en: '![Figure 4.5 – Created repository](img/B21203_04_005.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5 – 创建的仓库](img/B21203_04_005.jpg)'
- en: Figure 4.5 – Created repository
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 创建的仓库
- en: Congratulations on creating your new GitHub repository! This milestone marks
    a significant step in your journey as a developer, opening doors to collaboration,
    innovation, and growth in the world of DevOps and open source development.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你创建了新的 GitHub 仓库！这一里程碑标志着你作为开发者旅程中的一个重要步骤，为你在 DevOps 和开源开发的世界中打开了合作、创新和成长的大门。
- en: 'Next, we will connect your local repository to a remote repository, which includes
    generating and registering an SSH key for GitHub. The details of setting up SSH
    connections will be crucial in upcoming sections, so make sure to take note of
    the SSH URL string. Click the **SSH** button and then the copy icon to copy the
    values as shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将把你的本地仓库连接到远程仓库，其中包括为 GitHub 生成并注册 SSH 密钥。设置 SSH 连接的细节将在接下来的部分中非常重要，因此务必注意
    SSH URL 字符串。点击**SSH**按钮，然后点击复制图标，将值复制如下截图所示：
- en: '![Figure 4.6 – Information on SSH connection](img/B21203_04_006.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6 – SSH 连接信息](img/B21203_04_006.jpg)'
- en: Figure 4.6 – Information on SSH connection
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – SSH 连接信息
- en: Registering your SSH key
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册你的 SSH 密钥
- en: 'Now, it is time to set up your SSH keys. To do this, navigate to the settings
    by clicking the top-right menu button on GitHub:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候设置你的 SSH 密钥了。为此，请通过点击 GitHub 右上角的菜单按钮进入设置：
- en: '![Figure 4.7 – Opening the menu](img/B21203_04_007.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.7 – 打开菜单](img/B21203_04_007.jpg)'
- en: Figure 4.7 – Opening the menu
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – 打开菜单
- en: 'From this menu bar, you have the ability to navigate to various sections of
    your GitHub account. You can view your profile and manage the repositories and
    organizations you are a part of. Now, select **Settings** in the menu bar:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个菜单栏，你可以访问 GitHub 账户的各个部分。你可以查看个人资料并管理自己参与的仓库和组织。现在，选择菜单栏中的**设置**：
- en: '![Figure 4.8 – Clicking Settings in the menu bar to open the setting](img/B21203_04_008.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.8 – 在菜单栏点击设置打开设置](img/B21203_04_008.jpg)'
- en: Figure 4.8 – Clicking Settings in the menu bar to open the setting
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – 在菜单栏点击设置打开设置
- en: 'Once you are in the **Settings** section, look for **SSH and GPG keys** in
    the left-hand menu. Here, you will have the option to create a new SSH key:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入**设置**部分，在左侧菜单中查找**SSH 和 GPG 密钥**。在这里，你可以创建一个新的 SSH 密钥：
- en: '![Figure 4.9 – Settings](img/B21203_04_009.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.9 – 设置](img/B21203_04_009.jpg)'
- en: Figure 4.9 – Settings
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – 设置
- en: After clicking on the **New SSH key** button, you will be prompted to input
    a title and select the key type. At this stage, you should choose **Authentication
    Key**. Then, you can input the SSH key into the given field.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**新建 SSH 密钥**按钮后，系统会提示你输入标题并选择密钥类型。此时，你应该选择**认证密钥**。然后，可以将 SSH 密钥粘贴到指定的字段中。
- en: Now, here you will need your SSH key to register! Let’s see how to make one
    next. You can skip this process if you have already registered
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你需要你的 SSH 密钥进行注册！接下来我们来看看如何生成一个。如果你已经注册过，可以跳过此过程。
- en: Creating your SSH key is a crucial step in setting up a secure environment for
    managing your code on GitHub. This process is especially important if you are
    new to SSH keys or do not already have one. You can check if you have an existing
    key by navigating to the `~/.ssh` directory in your terminal. This directory typically
    holds your SSH configuration files and keys. If you find no existing keys or want
    to create a new one specifically for GitHub, let’s create it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 创建你的 SSH 密钥是设置一个安全环境以管理 GitHub 上代码的重要步骤。如果你对 SSH 密钥不熟悉或尚未拥有密钥，这一步尤其重要。你可以通过在终端中进入
    `~/.ssh` 目录来检查是否已有密钥。该目录通常包含你的 SSH 配置文件和密钥。如果你没有现有的密钥或想为 GitHub 专门创建一个新密钥，那么我们来创建一个吧。
- en: 'First, open your terminal and navigate to the SSH directory:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开你的终端并进入 SSH 目录：
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, generate a new SSH key with the `ssh-keygen` command. You will be using
    an RSA key for this purpose:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用 `ssh-keygen` 命令生成新的 SSH 密钥。你将使用 RSA 密钥来实现这一目的：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This command initiates the process of key generation and shows up the following
    message:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令启动了密钥生成过程，并显示如下信息：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When prompted, enter the filename in which to save the key. Here’s an example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在提示时，输入保存密钥的文件名。以下是一个示例：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this scenario, I will use `git_key` as the key name.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我将使用 `git_key` 作为密钥名称。
- en: 'Next, you will be asked to enter a passphrase. This adds an extra layer of
    security:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，系统会要求你输入一个密码短语。这为你的密钥增加了一层额外的安全保护：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For further insight, adding a passphrase to your SSH key is a key security step.
    If someone gets your private key without permission, they still cannot use it
    without the passphrase. This protects against unauthorized use. You need to enter
    the passphrase every time you use the key, making sure only people with both the
    key and passphrase can get in. This extra layer of security makes your SSH connections
    much safer and is advised for protecting important information and access. After
    these steps, you will see a confirmation that your identification (private key)
    and your public key have been saved. A unique key fingerprint and a random art
    image will also be displayed.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步增强安全性，为你的 SSH 密钥添加一个密码短语是一个关键步骤。如果有人未经授权获得了你的私钥，他们仍然无法使用它，因为没有密码短语。这可以防止未经授权的使用。每次使用密钥时，你都需要输入密码短语，确保只有同时拥有密钥和密码短语的人才能访问。这个额外的安全层使你的
    SSH 连接更安全，建议用于保护重要信息和访问权限。完成这些步骤后，你将看到一个确认消息，表明你的身份（私钥）和公钥已保存。同时，还会显示一个唯一的密钥指纹和一张随机艺术图像。
- en: 'Now, you need to check and copy your new public SSH key:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你需要检查并复制你的新公有 SSH 密钥：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Copy the displayed SSH key (begins with `ssh-rsa`):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 复制显示的 SSH 密钥（以 `ssh-rsa` 开头）：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, let’s add this SSH key to your GitHub account. Again, navigate to GitHub
    settings, find the **SSH and GPG keys** section, and paste and save your key there:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将这个 SSH 密钥添加到你的 GitHub 账户中。再次进入 GitHub 设置，找到**SSH 和 GPG 密钥**部分，然后将你的密钥粘贴并保存到那里：
- en: '![Figure 4.10 – Adding a new SSH key](img/B21203_04_010.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.10 – 添加一个新的 SSH 密钥](img/B21203_04_010.jpg)'
- en: Figure 4.10 – Adding a new SSH key
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 – 添加一个新的 SSH 密钥
- en: 'To set up or modify your SSH connections, let’s start by creating a configuration
    file using the `touch` command, which creates a new file or updates the last modified
    time of an existing one:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置或修改你的 SSH 连接，首先使用 `touch` 命令创建一个配置文件，该命令会创建一个新文件或更新现有文件的最后修改时间：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, with the config file ready, it is time to add specific configurations
    for GitHub SSH connections. Ensure you replace `git_rsa` with the name of your
    private SSH key file. For those who have followed the earlier steps to create
    a new key, your filename should be `git_rsa`. If you are an experienced Git user,
    you might already have some SSH configurations in this file. In such a scenario,
    you should update or replace the existing configurations. For those adding new
    configurations, input these lines:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，配置文件准备好了，是时候为 GitHub SSH 连接添加特定的配置了。确保将 `git_rsa` 替换为你的私有 SSH 密钥文件的名称。如果你按照之前的步骤创建了新密钥，那么你的文件名应该是
    `git_rsa`。如果你是一个有经验的 Git 用户，可能已经在这个文件中有一些 SSH 配置。在这种情况下，你应该更新或替换现有的配置。对于那些添加新配置的人，输入以下行：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After inputting these lines, save and close the file. This configuration instructs
    your system on which SSH key to use for GitHub and under which user account.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 输入这些行后，保存并关闭文件。此配置指示你的系统在 GitHub 上使用哪个 SSH 密钥，并且是在哪个用户账户下。
- en: It is also recommended to verify your SSH connection to GitHub to ensure everything
    is set up correctly. You can do this by running the `ssh -T git@github.com` command.
    This step helps confirm that your system can successfully communicate with GitHub
    using the SSH key specified in your configuration.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 还建议验证你与 GitHub 的 SSH 连接，以确保一切设置正确。你可以通过运行 `ssh -T git@github.com` 命令来完成此操作。此步骤有助于确认你的系统能够成功地使用配置中指定的
    SSH 密钥与 GitHub 通信。
- en: git remote – Connecting local and remote repositories
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: git remote – 连接本地和远程仓库
- en: 'It is time to bridge your local development with the world of GitHub. If you
    are continuing from an existing repository in an earlier section, simply move
    into that directory with the `cd` command, like so:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候将本地开发与 GitHub 世界连接起来了。如果你正在继续之前章节中的现有仓库，只需使用 `cd` 命令进入该目录，如下所示：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For those who want to create a new project, setting up a fresh repository is
    a straightforward affair. Begin by creating a new directory, initializing a Git
    repository, and preparing a `README` file—the hallmark of any new project:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些想要创建新项目的人，设置一个新的仓库是非常简单的。首先创建一个新目录，初始化一个 Git 仓库，并准备一个 `README` 文件——这是任何新项目的标志：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Remember to use the SSH URL you noted in the previous section.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 记得使用你在上一节中记录的 SSH URL。
- en: 'Connecting your local repository to a remote repository on GitHub involves
    adding a remote URL. This linkage allows you to push your local changes to GitHub.
    Establish this connection with the `git remote add` command, ensuring to replace
    `[Username]` and `[Repository]` with your GitHub username and the repository’s
    name:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 将本地仓库连接到 GitHub 上的远程仓库涉及添加一个远程 URL。这种链接允许您将本地更改推送到 GitHub。使用 `git remote add`
    命令建立这种连接，确保用您的 GitHub 用户名和仓库名替换 `[Username]` 和 `[Repository]`：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For cases where your repository already has a remote URL but needs an update,
    `git remote set-url` is the command of choice. This command updates your Git configuration
    to the new remote repository URL:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于已经有远程 URL 但需要更新的情况，`git remote set-url` 是首选命令。该命令将您的 Git 配置更新为新的远程仓库 URL：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With these steps, you have successfully linked your local and remote repositories.
    This connection is a pivotal point in managing your project, ensuring that your
    local developments are mirrored on GitHub for further progress and collaboration.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些步骤，您已成功将本地和远程仓库连接起来。这一连接是管理项目的关键点，确保您的本地开发在 GitHub 上得到进一步的推进和协作。
- en: As we move forward, the next step will be to push your local code to GitHub.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的进展，下一步将是将您的本地代码推送到 GitHub 上。
- en: git push – Making your code count
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: git push – 让您的代码生效
- en: 'Finally, it is time to push your local commits to the remote repository. This
    step updates the remote repository with the changes you have made locally:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，是时候将您的本地提交推送到远程仓库了。此步骤将会用您本地所做的更改更新远程仓库：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When you use `-u` or `--set-upstream` with `git push`, you are effectively setting
    the upstream for the current branch in your local repository to the `main` origin.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用 `-u` 或 `--set-upstream` 与 `git push` 一起使用时，实际上是在将当前分支在本地仓库的上游设置为 `main`
    远程。
- en: By specifying this upstream, you simplify your future interactions with the
    remote repository. Once the upstream is set, you can use `git push` without additional
    parameters to push to the same branch on the remote repository. This means that
    a subsequent `git push` operation will automatically know to push your commits
    to the `main` origin.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定此上游，您简化了与远程仓库的未来交互。一旦设置了上游，您可以直接使用 `git push` 推送到远程仓库的同一个分支，而无需额外的参数。这意味着随后的
    `git push` 操作将自动知道将提交推送到 `main` 远程。
- en: Examining code on GitHub
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 GitHub 上检查代码
- en: Now, let’s examine what the pushed code looks like on GitHub.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来查看在 GitHub 上推送的代码是什么样子的。
- en: 'When you visit a GitHub repository, the first thing that greets you is the
    repository’s main page. Here, you can see the most recently updated files, the
    `README.md` file (if available), and various repository details. This view provides
    a quick snapshot of the project’s contents and purpose:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当您访问 GitHub 仓库时，迎接您的第一件事是仓库的主页面。在这里，您可以看到最近更新的文件、`README.md` 文件（如果有）、以及各种仓库细节。此视图提供了项目内容和目的的快速快照：
- en: '![Figure 4.11 – GitHub repository page after pushing the code](img/B21203_04_011.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.11 – 推送代码后的 GitHub 仓库页面](img/B21203_04_011.jpg)'
- en: Figure 4.11 – GitHub repository page after pushing the code
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – 推送代码后的 GitHub 仓库页面
- en: Editing code on GitHub
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 GitHub 上编辑代码
- en: 'One of the key features is the ability to interact with code directly on GitHub.
    You can add or edit files using the interface itself, which is particularly useful
    for small changes or quick fixes. Here’s how to do that:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个关键功能是直接与 GitHub 上的代码进行交互。您可以使用界面本身添加或编辑文件，这对于小改动或快速修复特别有用。以下是如何操作：
- en: 'Click the *edit* button in the upper-right corner to enter the edit mode:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击右上角的 *编辑* 按钮进入编辑模式：
- en: '![Figure 4.12 – Entering the edit mode](img/B21203_04_012.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.12 – 进入编辑模式](img/B21203_04_012.jpg)'
- en: Figure 4.12 – Entering the edit mode
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12 – 进入编辑模式
- en: 'You can then edit and commit your changes. Remember that this commits directly
    to your code base:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您可以编辑并提交您的更改。请记住，这将直接提交到您的代码库：
- en: '![Figure 4.13 – Edit page on GitHub](img/B21203_04_013.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.13 – GitHub 上的编辑页面](img/B21203_04_013.jpg)'
- en: Figure 4.13 – Edit page on GitHub
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13 – GitHub 上的编辑页面
- en: 'This action commits your changes directly to your remote repository. However,
    you also have the flexibility to select a destination and branch for your commit.
    While the default is typically the branch you are currently working on, you have
    the option to create a new branch simultaneously, which can be particularly useful
    when starting a new contribution. If you choose to create a new branch, you can
    still merge it later into the mainline:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个操作会将你的更改直接提交到远程仓库。不过，你也可以灵活选择目标和分支来进行提交。虽然默认情况下通常是你当前工作的分支，但你也可以选择同时创建一个新分支，这在开始新的贡献时特别有用。如果你选择创建一个新分支，之后仍然可以将其合并到主分支：
- en: '![Figure 4.14 – Committing changes](img/B21203_04_014.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.14 – 提交更改](img/B21203_04_014.jpg)'
- en: Figure 4.14 – Committing changes
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.14 – 提交更改
- en: 'Now, you should see the changes reflected, as in the following screenshot:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你应该能看到更改的反映，如下图所示：
- en: '![Figure 4.15 – After the commit, you will return to the code screen](img/B21203_04_015.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.15 – 提交后，你将返回到代码界面](img/B21203_04_015.jpg)'
- en: Figure 4.15 – After the commit, you will return to the code screen
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.15 – 提交后，你将返回到代码界面
- en: Reviewing code and changes on GitHub
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 GitHub 上审查代码和更改
- en: 'Now, let’s look inside GitHub via the code we just updated. For a closer look
    at the code, GitHub provides several views in the file browser:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过刚刚更新的代码查看 GitHub。为了更仔细地查看代码，GitHub 提供了几种文件浏览器视图：
- en: '**Preview** mode is the default, available for certain file types such as Markdown,
    and displays the file as it would appear in its formatted state:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预览**模式是默认模式，适用于某些文件类型（如 Markdown），并显示文件在格式化状态下的样子：'
- en: '![Figure 4.16 – Preview mode](img/B21203_04_016.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.16 – 预览模式](img/B21203_04_016.jpg)'
- en: Figure 4.16 – Preview mode
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.16 – 预览模式
- en: '**Code** mode shows the contents of the file as it is in the latest commit,
    with beautiful syntax highlighting:'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码**模式显示文件的最新提交内容，并具有美观的语法高亮：'
- en: '![Figure 4.17 – Code mode](img/B21203_04_017.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.17 – 代码模式](img/B21203_04_017.jpg)'
- en: Figure 4.17 – Code mode
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.17 – 代码模式
- en: '**Blame** mode is particularly insightful, as it breaks down the file by lines,
    showing who last modified each line and in which commit. This is invaluable for
    understanding the evolution of code and tracking changes:'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**blame**模式特别有用，因为它按行显示文件，展示了每一行最后由谁修改，并在何次提交中进行修改。这对于理解代码的演变和跟踪更改非常有价值：'
- en: '![Figure 4.18 – Blame mode](img/B21203_04_018.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.18 – blame 模式](img/B21203_04_018.jpg)'
- en: Figure 4.18 – Blame mode
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.18 – blame 模式
- en: 'This is useful when you do not want to get code locally and review it but want
    to take a look at the code on GitHub first. Within the GitHub repository interface,
    you have the ability to explore the commit history of the project. This feature
    allows you to delve into the specifics of each commit, examining changes made:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当你不想在本地获取代码并进行审查，而是希望先查看 GitHub 上的代码时，这非常有用。在 GitHub 仓库界面中，你可以探索项目的提交历史。这个功能允许你深入了解每个提交的具体内容，查看所做的更改：
- en: '![Figure 4.19 – Change history on GitHub](img/B21203_04_019.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.19 – GitHub 上的更改历史](img/B21203_04_019.jpg)'
- en: Figure 4.19 – Change history on GitHub
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.19 – GitHub 上的更改历史
- en: 'Additionally, GitHub offers the functionality to comment on these changes,
    enabling you to engage in discussions or provide feedback on specific alterations
    made in the repository:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，GitHub 提供了对这些更改进行评论的功能，使你能够参与讨论或对仓库中的具体修改提供反馈：
- en: '![Figure 4.20 – GitHub commit view](img/B21203_04_020.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.20 – GitHub 提交视图](img/B21203_04_020.jpg)'
- en: Figure 4.20 – GitHub commit view
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.20 – GitHub 提交视图
- en: Managing branches on GitHub
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 GitHub 上管理分支
- en: Managing branches on GitHub is easy. Here is a brief overview of branch management
    on GitHub.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 上管理分支非常简单。以下是 GitHub 上分支管理的简要概述。
- en: 'First, navigating between different branches in a repository is a common task.
    On GitHub, you can easily switch between branches using the branch drop-down menu,
    typically found at the top of the repository page. This feature allows you to
    swiftly move from one branch to another, enabling you to review different versions
    or stages of the project efficiently:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在仓库中不同分支之间切换是一个常见任务。在 GitHub 上，你可以通过分支下拉菜单轻松切换分支，通常该菜单位于仓库页面的顶部。这个功能允许你快速从一个分支切换到另一个分支，帮助你高效地审查项目的不同版本或阶段：
- en: '![Figure 4.21 – Switching branches on GitHub](img/B21203_04_021.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.21 – 在 GitHub 上切换分支](img/B21203_04_021.jpg)'
- en: Figure 4.21 – Switching branches on GitHub
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.21 – 在 GitHub 上切换分支
- en: 'With repositories that have multiple branches, finding a specific branch can
    become challenging. GitHub provides a search functionality within the branch drop-down
    menu. This feature allows you to quickly filter and find the branch you are looking
    for, saving time and improving your workflow:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 对于拥有多个分支的仓库，查找特定分支可能会变得有些困难。GitHub 提供了一个分支下拉菜单中的搜索功能。这个功能允许你快速筛选并找到你需要的分支，节省时间并提高工作效率：
- en: '![Figure 4.22 – Searching for branches on GitHub](img/B21203_04_022.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.22 – 在 GitHub 上搜索分支](img/B21203_04_022.jpg)'
- en: Figure 4.22 – Searching for branches on GitHub
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.22 – 在 GitHub 上搜索分支
- en: 'Starting a new line of development is often done by creating a new branch.
    GitHub simplifies this process to create a new branch. You can name the new branch
    and base it on an existing one, making it straightforward to branch off for new
    features or experiments:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 启动一个新的开发线通常是通过创建一个新的分支来完成的。GitHub 简化了创建新分支的过程。你可以命名新分支，并基于现有分支，这使得为新特性或实验创建分支变得非常简单：
- en: '![Figure 4.23 – Creating a branch on GitHub](img/B21203_04_023.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.23 – 在 GitHub 上创建分支](img/B21203_04_023.jpg)'
- en: Figure 4.23 – Creating a branch on GitHub
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.23 – 在 GitHub 上创建分支
- en: GitHub branch management features provide a seamless and efficient way to handle
    multiple lines of development within a single repository. Whether you are switching
    to view different project states, searching for a specific branch, or creating
    a new branch for development, the GitHub interface makes these tasks intuitive
    and accessible. This streamlined approach to branch management is integral to
    maintaining an organized and productive development environment.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 的分支管理功能提供了一种无缝高效的方式来处理一个仓库内的多个开发线。无论你是切换查看不同的项目状态，搜索特定的分支，还是为开发创建一个新的分支，GitHub
    界面都使这些任务直观且易于访问。这种精简的分支管理方法对于保持一个有序且高效的开发环境至关重要。
- en: git pull – Bridging local and remote work
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: git pull – 桥接本地和远程工作
- en: Now that we have seen how GitHub manages the code we push, let’s get back to
    the command line. Get the new changes made to the local repository. We have edited
    `README.md` on GitHub, but how do we bring those changes to our local environment?
    The answer lies in the `git` `pull` command.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过 GitHub 如何管理我们推送的代码，让我们回到命令行。获取本地仓库中新做的更改。我们已经在 GitHub 上编辑了 `README.md`，但我们如何将这些更改带到本地环境呢？答案就在
    `git pull` 命令中。
- en: In the realm of version control with Git, staying updated with the latest changes
    in a remote repository is crucial for seamless collaboration and development.
    The `git pull` command is the tool designed precisely for this purpose. It serves
    as a bridge, bringing changes made remotely on platforms such as GitHub into your
    local working directory.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Git 进行版本控制的过程中，保持与远程仓库最新更改的同步对无缝的协作和开发至关重要。`git pull` 命令就是专门为这个目的设计的工具。它充当了一个桥梁，将远程平台（如
    GitHub）上做出的更改带入到你本地的工作目录中。
- en: Using `git pull` is particularly important when working in a collaborative environment.
    Suppose your team members are committing changes to a shared repository on GitHub.
    In that case, regularly pulling these changes ensures that everyone’s work aligns
    and reduces the likelihood of conflicts or inconsistencies.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `git pull` 在协作环境中尤为重要。假设你的团队成员正在向 GitHub 上的共享仓库提交更改，在这种情况下，定期拉取这些更改可以确保每个人的工作保持一致，减少冲突或不一致的可能性。
- en: 'To use `git pull`, navigate to your repository’s directory in your command
    line or terminal and enter the following command:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `git pull`，请在命令行或终端中进入你的仓库目录，并输入以下命令：
- en: '[PRE14]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: It is a simple yet powerful command that maintains the harmony of your collaborative
    efforts and keeps your local repository up to date with the latest developments.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单却强大的命令，能够保持你合作工作的和谐，并确保你的本地仓库与最新的开发保持同步。
- en: When you execute `git pull`, what essentially happens is a two-step process.
    First, Git fetches the updates from the remote repository—this includes all commits
    and branches that have been pushed since your last update. Then, it merges these
    updates into your local repository. This merge is critical as it integrates remote
    changes with your local work, keeping your local repository in sync with its remote
    counterpart.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当你执行 `git pull` 时，实际上发生的是一个两步的过程。首先，Git 从远程仓库获取更新——这包括自上次更新以来所有的提交和分支。然后，它将这些更新合并到你的本地仓库中。这次合并至关重要，因为它将远程更改与本地工作整合，确保你的本地仓库与远程仓库保持同步。
- en: 'The `git pull` command might come across as straightforward at first glance,
    but it is actually a combination of two fundamental Git commands: `git fetch`
    and `git merge`. This dual nature makes `git pull` a powerful tool in the Git
    arsenal.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 乍看之下，`git pull` 命令似乎很简单，但实际上它是两个基本 Git 命令的结合：`git fetch` 和 `git merge`。这种双重性质使得
    `git pull` 成为 Git 工具中的一把利器。
- en: 'Moving on, let’s delve deeper into the first component of this process: `git
    fetch`. This command is an essential piece of the version control puzzle, allowing
    you to see what others have been working on without merging those changes into
    your own work just yet.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们深入了解这个过程的第一个组成部分：`git fetch`。这个命令是版本控制谜题中的一个关键部分，允许你查看别人正在做的工作，但还没有将这些变更集成到你的工作中。
- en: git fetch – Syncing without disruption
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: git fetch – 同步而不中断
- en: '`git fetch` plays a crucial role in how developers interact with remote repositories.
    At its core, `git fetch` is about safely and efficiently updating your local repository
    with changes from its remote counterpart.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`git fetch` 在开发者与远程仓库互动中起到至关重要的作用。`git fetch` 的核心功能是安全且高效地将远程仓库的变更更新到你的本地仓库。'
- en: When you run `git fetch`, Git contacts the specified remote repository and pulls
    down all data from it that you do not have yet. This includes new commits, branches,
    and tags. The beauty of `git fetch` is that it does this without making any changes
    to your working files. It is like taking a sneak peek at what others have been
    doing without actually integrating their changes into your work. This feature
    makes it a non-destructive operation, ensuring your current development work remains
    untouched.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行 `git fetch` 时，Git 会联系指定的远程仓库并下载你尚未拥有的所有数据。这包括新的提交、分支和标签。`git fetch` 的美妙之处在于，它在不更改你的工作文件的情况下执行这些操作。就像偷偷看别人在做什么，而不会实际将他们的变更集成到你的工作中。这个特性使它成为一个非破坏性操作，确保你当前的开发工作不受影响。
- en: The fetched data is stored in your local repository, but it is kept separate
    from your actual project files. To incorporate these fetched changes into your
    work, you would typically follow up with a `git merge` command, which merges the
    fetched branch into your current branch. Yes—`git fetch` can show its true power
    when used with `git merge`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取的数据被存储在你的本地仓库中，但与你的实际项目文件分开。要将这些拉取的变更合并到你的工作中，你通常会跟进一个 `git merge` 命令，将拉取的分支合并到你当前的分支中。没错——`git
    fetch` 在与 `git merge` 结合使用时可以显示其真正的威力。
- en: Fetch versus pull
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: fetch 与 pull
- en: Let’s come back to `git pull` here a little bit. When you run `git pull`, it
    first initiates a `git fetch` operation. This part of the process reaches out
    to the remote repository and pulls in all new data it finds. This data includes
    commits, files, and references updated in the remote repository since your last
    fetch. It is a vital step to ensure you have all the latest information from the
    remote repository, but it does not automatically integrate these changes into
    your working files.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微深入了解一下 `git pull`。当你运行 `git pull` 时，它首先启动一个 `git fetch` 操作。这一部分的过程会访问远程仓库并拉取所有新数据。这些数据包括自上次拉取以来在远程仓库中更新的提交、文件和引用。这是一个至关重要的步骤，确保你获取到远程仓库的所有最新信息，但它并不会自动将这些变更集成到你的工作文件中。
- en: The second part of the `git pull` command is where `git merge` comes into play.
    After fetching updates, `git merge` takes these newly downloaded references and
    incorporates them into your local repository. This merging process is what actually
    updates your current working files with changes from the remote repository. It
    is a seamless integration of remote changes with your local work, keeping your
    repository in perfect sync with its remote counterpart.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`git pull` 命令的第二部分是 `git merge` 的作用。在拉取更新后，`git merge` 将这些新下载的引用并入你的本地仓库。这个合并过程实际上是将远程仓库的变更更新到你当前的工作文件中。这是一种无缝集成远程变更与本地工作的方法，保持你的仓库与远程仓库完美同步。'
- en: Understanding the dual nature of `git pull` as a combination of fetching and
    merging operations reveals its true power in managing and synchronizing code changes
    in a collaborative environment.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 `git pull` 作为获取和合并操作的双重性质，揭示了它在协作环境中管理和同步代码变更的真正威力。
- en: Also, knowing the difference between `git fetch` and `git pull` is crucial.
    It allows you to more accurately control when and how changes from your remote
    repository are incorporated into your local work. This clear understanding is
    essential for smooth collaboration and adept repository management as it lets
    you strategically decide whether to just review changes or fully integrate them.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，了解`git fetch`与`git pull`之间的区别非常重要。它可以让你更准确地控制何时以及如何将远程仓库的更改合并到本地工作中。清晰地理解这点对于顺利的协作和高效的仓库管理至关重要，因为它让你可以战略性地决定是仅仅查看更改还是完全合并它们。
- en: git clone – Bringing GitHub repos to your workspace
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: git clone – 将GitHub仓库带到你的工作空间
- en: 'Speaking of cloning and downloading, these options are readily available for
    every repository. By going to the repository page and pressing the **< > Code**
    button, you will see that there are those options. Cloning creates a local copy
    of the repository on your machine, allowing you to work on the project offline,
    while downloading provides a ZIP file of the project for backup or review purposes:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 说到克隆和下载，这些选项对于每个仓库都是随时可用的。只需进入仓库页面并点击**< > 代码**按钮，你就能看到这些选项。克隆会在你的机器上创建一个仓库的本地副本，让你能够离线工作，而下载则提供一个项目的ZIP文件，便于备份或审查：
- en: '![Figure 4.24 – git clone](img/B21203_04_024.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.24 – git clone](img/B21203_04_024.jpg)'
- en: Figure 4.24 – git clone
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.24 – git clone
- en: 'Running the `git clone` command is a straightforward process, making it easily
    accessible for anyone wanting to engage with a project hosted on a platform such
    as GitHub. To clone a repository, all you need is the URL of the repository you
    want to clone:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`git clone`命令是一个简单的过程，使任何想要参与GitHub上托管项目的人都能轻松接触到。要克隆一个仓库，你只需要该仓库的URL：
- en: '[PRE15]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`git clone` stands out as a core command, enabling you to create a precise
    local copy of an existing repository. This process involves more than just duplicating
    current files; it replicates the repository in its entirety. This includes all
    file versions, the full commit history, and all branches. By using `git clone`,
    you bring a complete, functional version of the project onto your local machine.
    This not only gives you the ability to work offline but also provides a comprehensive
    view of the project’s development history, aiding in understanding and effective
    contribution.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`git clone`是一个核心命令，使你能够创建现有仓库的精确本地副本。这个过程不仅仅是复制当前文件；它完整地复制了整个仓库，包括所有文件版本、完整的提交历史和所有分支。通过使用`git
    clone`，你可以将项目的完整、功能齐全的版本带到本地机器上。这不仅让你可以离线工作，还为你提供了项目开发历史的全面视图，有助于理解和高效贡献。'
- en: Forking – More than just copying code
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fork – 不只是复制代码
- en: 'In addition to `git clone`, there is another way to duplicate a repository
    on GitHub. This is especially useful for open source development. The concept
    of forking in Git, particularly on platforms such as GitHub, is a cornerstone
    of collaborative and open source development. Forking a repository means creating
    your own personal copy of someone else’s project under your account:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`git clone`，还有另一种方法可以在GitHub上复制一个仓库。这对于开源开发尤其有用。在Git中，特别是在像GitHub这样的平台注册上，**Fork（分叉）**的概念是协作和开源开发的基石。Fork一个仓库意味着在你的账户下创建一个属于你自己的副本：
- en: '![Figure 4.25 – Forking on GitHub](img/B21203_04_025.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.25 – 在GitHub上Fork](img/B21203_04_025.jpg)'
- en: Figure 4.25 – Forking on GitHub
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.25 – 在GitHub上Fork
- en: When you fork a repository, you create a personal copy of someone else’s project
    within your GitHub account. While this copy starts as a mirror of the original,
    it operates independently, meaning you can make modifications, additions, or experiments
    without affecting the original project. However, it is important to understand
    that this independence has limits. For example, if the original repository is
    deleted or its visibility changes, it can affect the fork’s status. Despite these
    dependencies, forking remains a pivotal practice in open source development, enabling
    developers to contribute through pull requests without needing direct write access
    to the source repository.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 当你Fork一个仓库时，你就在自己的GitHub账户内创建了一个属于你个人的副本。虽然这个副本最初与原仓库是镜像关系，但它独立运行，这意味着你可以进行修改、添加或实验，而不会影响原项目。然而，理解这种独立性是有局限的也很重要。例如，如果原始仓库被删除或其可见性发生变化，可能会影响分叉的状态。尽管存在这些依赖关系，Fork仍然是开源开发中的重要实践，它使开发者可以通过拉取请求进行贡献，而无需对源仓库拥有直接的写入权限。
- en: 'Forking is particularly significant in the open source world. It allows developers
    to contribute to projects by making changes in their forks and then proposing
    these changes to the original project through a process called a **pull request**.
    This is how you can contribute to a project without having direct writing access
    to the source repository. When you fork, a copy is made in your new environment,
    as shown in the following screenshot:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Fork操作在开源世界中尤其重要。它允许开发者通过在自己的分支上进行更改，然后通过称为**pull request**的过程向原始项目提出这些更改，从而为项目作出贡献。这就是你如何在没有直接写入源代码库权限的情况下，参与到项目中的方式。当你进行Fork时，会在你的新环境中创建一个副本，如下图所示：
- en: '![Figure 4.26 – The forked repository is managed under your environment](img/B21203_04_026.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.26 – 被Fork的代码库在你的环境中进行管理](img/B21203_04_026.jpg)'
- en: Figure 4.26 – The forked repository is managed under your environment
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.26 – 被Fork的代码库在你的环境中进行管理
- en: Forking provides a unique platform where anyone, regardless of their relationship
    or level of trust with the original project maintainers, can freely experiment
    and contribute. This approach significantly lowers barriers to entry in collaborative
    coding.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Fork提供了一个独特的平台，任何人，无论与原始项目维护者的关系如何，或是信任程度如何，都可以自由地进行实验并做出贡献。这种方式显著降低了协作编码的门槛。
- en: By forking a repository, you create an environment where you can add your ideas,
    enhancements, or fixes to the project without impacting the upstream repository.
    This is particularly empowering for new contributors who might not yet have gained
    the trust of the project maintainers for direct access to the main repository.
    It allows them to demonstrate their capabilities and contributions in a separate,
    personal space.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Fork一个代码库，你可以创建一个环境，在其中为项目添加你的创意、增强功能或修复问题，而不影响上游的代码库。这对那些尚未获得项目维护者信任、无法直接访问主代码库的新贡献者尤为重要。它让他们能够在一个独立的个人空间中展示他们的能力和贡献。
- en: 'This independent yet connected nature of a fork is crucial. It enables a two-phase
    contribution process: first, in your own fork, where you freely experiment and
    make changes, and second, via a pull request, where you propose these changes
    to be merged into the original project. This workflow fosters a culture of open
    collaboration, where ideas and contributions are freely exchanged, and the best
    ones are seamlessly integrated into projects.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Fork操作的这种独立而又相互关联的特性至关重要。它使得贡献过程分为两个阶段：首先，在你自己的Fork中自由地进行实验和更改；其次，通过pull request，提出将这些更改合并到原始项目中。这种工作流促进了开放协作的文化，大家可以自由地交流创意和贡献，最好的创意将无缝地融入项目中。
- en: In essence, forking is more than just copying a repository; it is about participating
    in a larger community. Whether you are contributing to an existing project, starting
    a new one based on someone else’s work, or just experimenting, forking is an essential
    aspect of working with Git and GitHub.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，Fork不仅仅是复制一个代码库；它更是参与到一个更大社区中的方式。无论你是在为一个现有项目做贡献，基于他人的工作启动一个新项目，还是仅仅进行实验，Fork都是使用Git和GitHub时不可或缺的一部分。
- en: You have learned the basics of Git commands and how to manage Git repositories,
    both individually and in a collaborative remote environment. Now, you are ready
    to dive into GitHub Issues and pull requests, essential tools for communication
    in GitHub. These features, although seemingly straightforward, play a crucial
    role in the success of open source projects. They serve as platforms for idea
    generation, discussions, and reviews, fostering a culture of communal development
    and innovation. As we proceed, we will explore how these functionalities enhance
    communication and collaboration, contributing to development on GitHub.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学会了Git命令的基础知识，并且了解了如何在单独的和协作的远程环境中管理Git代码库。现在，你准备好深入了解GitHub Issues和pull
    requests，它们是GitHub上沟通的关键工具。这些功能虽然看起来很简单，但在开源项目的成功中起着至关重要的作用。它们作为创意生成、讨论和审查的平台，促进了共同开发和创新的文化。接下来，我们将探讨这些功能如何增强沟通与协作，助力GitHub上的开发。
- en: Issues – Collaboration excellence at GitHub
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Issues – GitHub上的协作卓越
- en: GitHub Issues stands as a multifaceted tool within the GitHub ecosystem, essential
    for orchestrating collaborative efforts. It functions not merely as a place to
    report problems but as a comprehensive system for tracking various types of tasks
    and activities related to your projects. This includes managing bugs, proposing
    enhancements, and monitoring other essential tasks within your GitHub repositories.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Issues 作为 GitHub 生态系统中的一个多面工具，必不可少于协调协作努力。它不仅仅是一个报告问题的地方，它是一个全面的系统，用于跟踪与项目相关的各种任务和活动。这包括管理
    bugs、提出改进建议以及监控 GitHub 仓库中的其他重要任务。
- en: In the DevOps environment, GitHub Issues plays a crucial role by facilitating
    continuous feedback and seamless collaboration. It acts as a transparent, efficient
    platform where developers can flag issues, team members can suggest new features,
    and stakeholders can engage in meaningful discussions about potential enhancements.
    This functionality is in perfect harmony with the core principles of DevOps, which
    emphasize breaking down organizational barriers, promoting open communication,
    and nurturing a culture of continuous improvement and adaptation.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 环境中，GitHub Issues 扮演着至关重要的角色，它通过促进持续反馈和无缝协作，提供了一个透明且高效的平台，开发人员可以标记问题，团队成员可以建议新功能，而利益相关者可以参与关于潜在改进的有意义讨论。这一功能与
    DevOps 的核心原则高度契合，DevOps 强调打破组织障碍，促进开放沟通，并培养持续改进和适应的文化。
- en: By leveraging GitHub Issues, teams can create a shared, accessible space that
    fosters collaboration and ensures that everyone involved in a project is on the
    same page. It is not just about tracking problems; it is about building a dynamic,
    responsive environment where ideas can flourish and be efficiently managed.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用 GitHub Issues，团队可以创建一个共享、可访问的空间，促进协作，并确保项目中的每个成员都在同一页上。这不仅仅是为了追踪问题；它是关于构建一个动态、响应迅速的环境，在这个环境中，创意能够蓬勃发展并被高效管理。
- en: What makes GitHub Issues unique
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitHub Issues 的独特之处
- en: Let’s now look at the unique role of GitHub Issues in fostering transparency
    and enhancing developer experience.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下 GitHub Issues 在促进透明度和提升开发者体验中的独特作用。
- en: GitHub Issues stands as a unique tool in the landscape of software development,
    particularly in its approach to transparency and collaboration. This tool, integral
    to GitHub, has redefined how development teams, and indeed broader open source
    communities, communicate and collaborate on projects. The significance of GitHub
    Issues lies not just in its functionality as a bug-tracking or feature-request
    tool, but in its role in cultivating an open, transparent, and community-driven
    approach to software development, echoing the ethos of the open source movement.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Issues 是软件开发领域中的一个独特工具，尤其是在透明度和协作方面。作为 GitHub 的一部分，它重新定义了开发团队，甚至更广泛的开源社区，在项目中沟通和协作的方式。GitHub
    Issues 的重要性不仅体现在它作为 bug 跟踪或功能请求工具的功能上，还体现在它在培养一种开放、透明且由社区驱动的软件开发方法中的作用，这种方法与开源运动的精神相呼应。
- en: The importance of transparency in development
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发中的透明度重要性
- en: 'Transparency in software development is about making the entire process of
    creating, modifying, and maintaining software visible and understandable to all
    stakeholders involved, from developers to end users. This transparency is crucial
    for several reasons:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发中的透明度是指让所有相关方（从开发人员到最终用户）能够看到并理解软件的创建、修改和维护过程。这种透明度至关重要，原因如下：
- en: '**Improved collaboration**: When all aspects of a project are visible, team
    members can collaborate more effectively. Everyone has access to the same information,
    leading to better decision-making and a shared understanding of goals and challenges.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进的协作**：当项目的各个方面都对所有人可见时，团队成员能够更有效地协作。每个人都能访问相同的信息，从而做出更好的决策，并对目标和挑战有共同的理解。'
- en: '**Increased accountability**: Transparency leads to a clearer allocation of
    responsibilities. Team members are more accountable for their work when it is
    visible to others, fostering a sense of ownership and commitment.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高的责任感**：透明度使责任分配更加清晰。当团队成员的工作对他人可见时，他们会对自己的工作更加负责，从而培养出更强的责任感和承诺感。'
- en: '**Enhanced quality and innovation**: Open access to project data allows for
    more eyes on the project, resulting in more feedback, ideas, and critiques. This
    collective scrutiny not only enhances quality but also spurs innovation.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强的质量与创新**：项目数据的开放访问使得更多的人可以参与项目的审视，从而带来更多的反馈、创意和批评。这种集体的审查不仅提升了质量，还激发了创新。'
- en: '**Trust building**: Transparency builds trust among team members and with external
    stakeholders, including users and customers. Trust is crucial for long-term project
    success and for establishing reliable, user-focused software.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**建立信任**：透明性建立了团队成员之间以及与外部利益相关者（包括用户和客户）之间的信任。信任对长期项目的成功至关重要，并且对建立可靠的、以用户为中心的软件至关重要。'
- en: GitHub Issues – A catalyst for transparent collaboration
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GitHub Issues – 透明协作的催化剂
- en: GitHub Issues exemplifies this transparent approach. Unlike tools that allow
    for detailed, hierarchical permissions, GitHub Issues typically operates on a
    more open-access model. Every issue, its discussion thread, and the decisions
    made are visible to all team members, and often to the public in open source projects.
    This openness prevents information silos and encourages a bottom-up culture where
    ideas and feedback can come from any level within the organization or the community.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Issues体现了这种透明的做法。与允许详细分层权限的工具不同，GitHub Issues通常采用更为开放的访问模型。每个问题、其讨论线程以及作出的决策对所有团队成员可见，并且在开源项目中通常对公众开放。这种开放性避免了信息孤岛，鼓励了一种自下而上的文化，任何级别的组织或社区成员都可以提出想法和反馈。
- en: This approach aligns seamlessly with the ethos of open source development, which
    values community contribution, shared responsibility, and open dialogue. By adopting
    a similar model internally, companies can reap the benefits of this open source
    approach, breaking down organizational silos and fostering a community-like atmosphere
    within teams. It encourages developers to take initiative, contribute ideas, and
    engage in healthy, constructive debates.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法与开源开发的精神完全契合，开源开发强调社区贡献、共同责任和开放对话。通过在内部采用类似的模型，公司可以获得开源方法的好处，打破组织壁垒，培养团队内部的社区氛围。这鼓励开发者主动提出想法，参与健康的、建设性的辩论。
- en: Open source as a model for internal collaboration
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开源作为内部协作的模型
- en: The open source way of working, facilitated by tools such as GitHub Issues,
    is an excellent strategy for enhancing the developer experience. It brings the
    collaborative, transparent nature of open source communities into the internal
    workings of an organization. Developers feel more engaged and valued when they
    can see the impact of their work and contribute to discussions beyond their immediate
    tasks. This open environment nurtures a sense of community, improves morale, and
    can significantly boost innovation and productivity.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 开源的工作方式，借助像GitHub Issues这样的工具，成为提升开发者体验的绝佳策略。它将开源社区的协作性、透明性带入组织的内部运作。当开发者能够看到自己工作的影响，并参与到超出自己直接任务的讨论时，他们会感到更加投入和被重视。这种开放的环境培养了社区感，提升了士气，并能显著提升创新力和生产力。
- en: Moreover, the transparency and openness fostered by GitHub Issues and the open
    source model provide invaluable learning opportunities. Developers can learn from
    each other, gain insights from different perspectives, and grow by being exposed
    to a variety of challenges and solutions. This environment is conducive to personal
    and professional development, crucial for retaining talent and keeping teams motivated
    and productive.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，GitHub Issues和开源模型所促进的透明性和开放性提供了宝贵的学习机会。开发者可以相互学习，从不同的角度获得见解，并通过接触各种挑战和解决方案来成长。这种环境有利于个人和职业发展，对于留住人才、保持团队的动力和生产力至关重要。
- en: GitHub Issues is a collaboration catalyst
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GitHub Issues是协作的催化剂
- en: In summary, GitHub Issues plays a pivotal role in promoting transparency and
    a community-driven approach to software development. Drawing inspiration from
    open source practices helps break down organizational barriers, fosters a collaborative
    and transparent work culture, and significantly enhances the developer experience.
    In an era where software development is increasingly about community and collaboration,
    GitHub Issues stands as a beacon, guiding teams toward a more open, inclusive,
    and effective way of working.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，GitHub Issues在促进透明度和社区驱动的软件开发方法中发挥着关键作用。从开源实践中汲取灵感有助于打破组织障碍，培养协作和透明的工作文化，并显著提升开发者体验。在软件开发日益注重社区和协作的时代，GitHub
    Issues成为了一个灯塔，引导团队走向一种更加开放、包容和高效的工作方式。
- en: Let’s take a look at an issue from that perspective.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从这个角度来看一下一个问题。
- en: Crafting an issue – Essentials for a well-structured issue
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 制作一个问题 – 构建一个结构良好的问题的基本要素
- en: 'Creating your first issue on GitHub may initially seem challenging because
    of its simplicity, but mastering this skill is crucial for effective collaboration.
    A well-structured issue is key: it should be clear, concise, and actionable. The
    goal is to provide enough context to make your point understandable without bombarding
    your collaborators with excessive information. Begin by clearly identifying the
    issue, explaining its importance, and outlining the desired outcome.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 上创建你的第一个问题，起初可能会觉得挑战性很大，因为它的简单性，但掌握这一技能对有效的协作至关重要。一个结构良好的问题是关键：它应该清晰、简洁并具有可操作性。目标是提供足够的上下文，使你的观点易于理解，同时避免用过多的信息轰炸合作者。首先要清楚地识别问题，解释其重要性，并概述期望的结果。
- en: 'The process begins in your GitHub repository. If you have an existing repository
    or have just created one, you will find the **Issues** tab in the repository menu.
    Here, you can initiate a new issue:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这一过程从你的 GitHub 仓库开始。如果你已经有了一个现有仓库或刚刚创建了一个仓库，你会在仓库菜单中找到**Issues**选项卡。在这里，你可以创建一个新的问题：
- en: '![Figure 4.27 – New issue](img/B21203_04_027.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.27 – 新问题](img/B21203_04_027.jpg)'
- en: Figure 4.27 – New issue
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.27 – 新问题
- en: 'Creating an issue is straightforward. The interface presents fields for the
    title and main description, along with metadata options such as assignees and
    labels. The focus should be on the content of the issue. GitHub supports Markdown
    for documentation formatting, so it is beneficial to familiarize yourself with
    Markdown syntax. However, remember that simplicity is key—Markdown is not as feature-rich
    as Microsoft Word, but it is perfect for creating clean, straightforward documentation:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 创建问题是简单的。界面展示了标题和主要描述的字段，以及分配者和标签等元数据选项。重点应该放在问题的内容上。GitHub 支持 Markdown 进行文档格式化，因此熟悉
    Markdown 语法是很有益的。然而，请记住，简洁是关键——Markdown 的功能不如 Microsoft Word 丰富，但它非常适合创建干净、简洁的文档：
- en: '![Figure 4.28 – Creating an issue on GitHub](img/B21203_04_028.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.28 – 在 GitHub 上创建问题](img/B21203_04_028.jpg)'
- en: Figure 4.28 – Creating an issue on GitHub
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.28 – 在 GitHub 上创建问题
- en: 'Within an issue, you can assign it to team members and also mention individuals
    or teams directly in the content for notifications:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个问题中，你可以将其分配给团队成员，还可以在内容中直接提到个人或团队以发送通知：
- en: '![Figure 4.29 – Assigning an issue to other users](img/B21203_04_029.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.29 – 将问题分配给其他用户](img/B21203_04_029.jpg)'
- en: Figure 4.29 – Assigning an issue to other users
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.29 – 将问题分配给其他用户
- en: Labeling tasks (for example, as a bug, documentation, or enhancement) is also
    possible. While custom labels can be created, it is advisable to start with default
    labels and enhance them gradually. Overusing labels can lead to confusion and
    categorization challenges. If your team or organization has specific labeling
    standards, it is best to adhere to those.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 任务标记（例如，作为 bug、文档或增强功能）也是可能的。虽然可以创建自定义标签，但建议先从默认标签开始，并逐步增强它们。过度使用标签可能导致混乱和分类上的挑战。如果你的团队或组织有特定的标签标准，最好遵循这些标准。
- en: 'The approach to using issues in GitHub is not top-down but rather encourages
    a community-driven, bottom-up style. Imposing strict rules from the outset can
    limit the freedom necessary for fostering an open, agile, and collaborative culture.
    Balance is crucial; as you and your team become more accustomed to GitHub workflow,
    you can adjust your approach accordingly:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 上使用问题的方法并非自上而下，而是鼓励一种社区驱动的、自下而上的风格。从一开始就强制执行严格的规则可能会限制促进开放、灵活和协作文化所需的自由。平衡非常重要；随着你和你的团队越来越习惯
    GitHub 的工作流程，你可以相应地调整方法：
- en: '![Figure 4.30 – Many types of labels can be applied](img/B21203_04_030.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.30 – 可以应用多种标签](img/B21203_04_030.jpg)'
- en: Figure 4.30 – Many types of labels can be applied
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.30 – 可以应用多种标签
- en: 'Finally, you will see the submitted issue:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你会看到提交的问题：
- en: '![Figure 4.31 – After submission of the issue](img/B21203_04_031.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.31 – 提交问题后](img/B21203_04_031.jpg)'
- en: Figure 4.31 – After submission of the issue
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.31 – 提交问题后
- en: So, as you can see, managing issues on GitHub is straightforward. The key lies
    in fostering collaboration and communication. In the following section, we delve
    into effective communication techniques and explore how to enhance collaboration
    within your organization using GitHub.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，管理 GitHub 上的问题非常简单。关键在于促进协作和沟通。在接下来的部分，我们将深入探讨有效的沟通技巧，并探索如何通过 GitHub 增强组织内的协作。
- en: Effective communication
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有效沟通
- en: 'Now, there are a few things that go into making a great issue: the title, the
    way the description is written, and the basic way replies are made. Even if we
    actually try to write clearly, we tend to write messily in the midst of a busy
    workday. The accumulation of such contextual deficiencies can lead to miscommunication.
    By following some of the rules that will be covered, you will be able to communicate
    more wonderfully with your peers.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，构建一个优秀问题有几个要素：标题、描述的写作方式以及回复的基本方式。即使我们努力清晰地写作，在忙碌的工作日中，我们也容易写得杂乱无章。这种语境上的缺失会导致沟通不畅。通过遵循将要介绍的一些规则，你将能够与同事更好地沟通。
- en: Writing effective titles – Key principles for clarity and impact
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写有效标题——清晰度和影响力的关键原则
- en: The title of your issue is the first thing collaborators see, making it crucial
    for capturing attention and conveying the issue’s essence. Aim for a title that
    is concise yet descriptive. Avoid vague titles such as “*Problem*” or “*Feature
    Request*”—be specific. For instance, “*Fix Broken Link in README*” is far more
    informative. But why is clarity so important?
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 问题的标题是合作者首先看到的内容，因此它对吸引注意力和传达问题的本质至关重要。目标是创建一个简洁而富有描述性的标题。避免使用模糊的标题，如“*问题*”或“*功能请求*”——要具体。例如，“*修复README中的断链*”要比“*问题*”更具信息性。但为什么清晰性如此重要呢？
- en: When working within an organization, you are often part of multiple repositories,
    each potentially containing a multitude of unresolved issues. To effectively manage
    and attract attention to these issues, the title plays a crucial role. It should
    be engaging yet accurate, clear but not exaggerated.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在组织内部工作时，你通常会参与多个代码库，每个库中可能包含大量未解决的问题。为了有效地管理并引起人们对这些问题的关注，标题起着至关重要的作用。它应当具有吸引力且准确无误，清晰但不夸张。
- en: 'Here are guidelines to ensure your issue titles stand out while remaining truthful
    and easy to understand:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些确保你的问题标题既突出又易于理解的指南：
- en: '**Concise and clear description**: Ensure your title is brief yet descriptive,
    using straightforward language that avoids technical jargon. This clarity helps
    team members quickly understand the issue.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简洁明了的描述**：确保标题简洁而富有描述性，使用简单的语言，避免使用技术术语。这种清晰性有助于团队成员快速理解问题。'
- en: '**Begin with a categorical keyword**: Start with a term such as “*Fix*,” “*Enhance*,”
    or “*Optimize*” to immediately convey the nature of the issue.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**以类别关键字开始**：使用“*修复*”、“*增强*”或“*优化*”等术语，以便立即传达问题的性质。'
- en: '**Summarize the core issue**: The title should succinctly capture the main
    problem or request without extraneous details.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**概括核心问题**：标题应简明扼要地概括主要问题或请求，避免冗余细节。'
- en: '**Neutral and specific**: Focus on the issue, not on who reported or will resolve
    it. If applicable, include the specific component or feature affected for better
    categorization.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中立且具体**：聚焦于问题本身，而不是谁报告或将解决它。如果适用，包含受影响的特定组件或功能，以便更好地分类。'
- en: '**Clarity over priority**: Avoid using the title to indicate urgency or severity.
    Instead, employ labels or the issue’s content for this purpose, ensuring the title
    remains unambiguous and focused.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清晰优于优先级**：避免在标题中使用表示紧急或严重的措辞。相反，使用标签或问题内容来传达这一点，确保标题保持明确且聚焦。'
- en: Of course, there are exceptions, and these guidelines should be customized for
    each project, but effective titles on GitHub issues **speed up triage** by quickly
    sorting and identifying issues, **enhance discoverability** for easy issue location,
    and **facilitate clear communication** across the team, ensuring everyone understands
    the issue at a glance. This streamlined approach is key to efficient repository
    management.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，也存在一些例外情况，这些指南应根据每个项目的需要进行定制，但在 GitHub 问题中，**加速问题分类**，通过快速排序和识别问题，**提高可发现性**，便于轻松查找问题，并且**促进团队间清晰沟通**，确保每个人都能一目了然地理解问题。这种简化的方法是高效管理代码库的关键。
- en: Providing context in descriptions – Strategies for clear and concise communication
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提供描述中的上下文——清晰简洁沟通的策略
- en: Effective issue descriptions are the cornerstone of collaborative problem-solving
    in DevOps. To craft a compelling and clear issue description, begin by outlining
    the present scenario. This sets the stage for understanding. Next, succinctly
    state the problem or the enhancement you are suggesting. Conclude by articulating
    the preferred outcome or solution. This methodical approach ensures both comprehension
    and a constructive dialogue direction.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的问题描述是 DevOps 协作解决问题的基石。要写出引人注目且清晰的问题描述，首先概述当前的情况，为理解打下基础。接着简洁地陈述你所提出的问题或改进。最后，阐明你希望达到的结果或解决方案。这种有条理的方法确保了理解并为建设性的对话方向提供保障。
- en: Context is pivotal in issue descriptions. It gives your teammates insight into
    your perspective and the circumstances in which a problem arose or the necessity
    for a feature emerged. If possible, include steps that can reproduce the issue.
    This is not just about explaining a problem; it is about bringing your collaborators
    into your experience, enabling them to gauge the issue effectively.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 背景在问题描述中至关重要。它能为你的团队成员提供对你的观点和问题产生或特性需求出现时的背景的理解。如果可能，提供可以复现问题的步骤。这不仅仅是解释一个问题，而是将你的协作者带入你的经验中，使他们能够有效地评估问题。
- en: You can also leverage Markdown to enhance your issue’s readability and engagement.
    This simple markup language allows you to structure your issue with headers, organize
    points with bullet lists or numbered lists, and include code snippets using code
    blocks and syntax highlighting. These elements not only make your issue straightforward
    to navigate but also more appealing and easier to engage with.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以利用 Markdown 来提升问题的可读性和互动性。这种简单的标记语言允许你通过标题来构建问题，用项目符号或编号列表来组织要点，并使用代码块和语法高亮来包含代码片段。这些元素不仅使问题更易于导航，而且更加吸引人且便于互动。
- en: 'Here are guidelines to ensure your issue description is clear, concise, and
    effectively communicates the problem or enhancement you are addressing:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是确保你的问题描述清晰、简洁并有效传达你所处理的问题或改进的指南：
- en: '**Context and clarity**: Start with a clear background of the current situation,
    and define the problem or enhancement in specific terms. This sets the stage for
    understanding the issue.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**背景和清晰度**：从清晰的当前情况背景开始，并用具体的术语定义问题或改进点。这为理解问题打下基础。'
- en: '**Outcome and reproduction steps**: Describe the desired outcome for resolution
    and, if reporting a bug, provide detailed steps for reproducing it. This clarity
    helps others visualize the solution and understand the issue’s scope.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结果和复现步骤**：描述期望的解决结果，并在报告 bug 时提供详细的复现步骤。这种清晰度有助于其他人形象化解决方案并理解问题的范围。'
- en: '**Beautiful Markdown and emojis**: Employ Markdown and emojis to structure
    your description, making it reader-friendly with headers, lists, and code blocks.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**美丽的 Markdown 和表情符号**：使用 Markdown 和表情符号来组织你的描述，使其通过标题、列表和代码块变得更易读。'
- en: '**Visual aids and solutions**: Include screenshots or links for additional
    context. Suggesting potential solutions or workarounds can also help in initiating
    the problem-solving process.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视觉辅助和解决方案**：包括截图或链接提供额外的上下文。建议潜在的解决方案或替代方法也能帮助启动问题解决过程。'
- en: '**Focus and collaboration**: Keep the description focused on the issue, avoiding
    unrelated topics. Encourage feedback and be open to suggestions, promoting a collaborative
    approach to resolving the issue.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聚焦与协作**：确保描述聚焦于问题本身，避免涉及无关话题。鼓励反馈并愿意接受建议，促进解决问题的协作方法。'
- en: Good issue descriptions **improve understanding** by providing a clear comprehension
    of the issue, **facilitate efficient problem-solving** by enabling quick assessment
    and resolution, and **enhance collaboration** by inviting constructive feedback
    and joint solution-finding. This concise approach streamlines project progress
    and teamwork.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的问题描述**提升理解**，通过提供清晰的理解帮助团队成员快速把握问题，**促进高效问题解决**，通过快速评估和解决方案的制定，**加强协作**，通过邀请建设性反馈和共同寻找解决方案。这种简洁的方法简化了项目进展和团队合作。
- en: Issue replies for a collaborative culture
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题回复促进协作文化
- en: GitHub issues are more than just a tool for tracking bugs; they serve as a hub
    for collaboration and documentation. When you respond to an issue, you are not
    just addressing a specific problem or query, but you are also contributing to
    the project’s passive documentation.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Issues不仅仅是一个跟踪bug的工具；它们是协作和文档的中心。当你回复一个问题时，你不仅仅是在解决一个特定的问题或疑问，而是在为项目的被动文档做出贡献。
- en: 'Replying to an issue is easy. Just write your reply in Markdown and reply.
    But even here, you need to have a philosophy:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 回复问题很简单。只需在Markdown中写下你的回复并提交即可。但即便如此，你也需要有一个哲学：
- en: '![Figure 4.32 – Commenting on an issue](img/B21203_04_032.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.32 – 评论问题](img/B21203_04_032.jpg)'
- en: Figure 4.32 – Commenting on an issue
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.32 – 评论问题
- en: 'On GitHub, commenting on an issue is really important, not just a mail reply.
    Let’s look at the following perspectives:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub上，评论一个问题非常重要，不仅仅是邮件回复。我们来看看以下几个视角：
- en: '**Passive documentation**: Passive documentation is a concept emerging from
    the InnerSource context, where documentation is not actively created but rather
    evolves naturally through interactions within the repository. In GitHub, every
    issue, pull request, and discussion thread becomes part of this passive documentation.
    This process is organic and bottom-up; as team members engage in conversations,
    ask for features, resolve problems, or implement solutions, their interactions
    get recorded. This creates a comprehensive, evolving record of decisions, discussions,
    and changes, contributing to a living document that captures the project’s history
    and rationale.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**被动文档**：被动文档是一个来自InnerSource背景的概念，文档并非主动创建，而是通过仓库内的互动自然演变。在GitHub中，每一个问题、拉取请求和讨论线程都成为这种被动文档的一部分。这个过程是有机的，自下而上的；当团队成员参与讨论、请求功能、解决问题或实施解决方案时，他们的互动会被记录下来。这形成了一个全面、不断发展的记录，记录了决策、讨论和变化，成为一个活文档，捕捉项目的历史和理由。'
- en: '**Centralizing communication for transparency**: In a collaborative environment,
    communication often happens through various channels such as Slack, Teams, Jira,
    and GitHub. However, centralizing project-related discussions on GitHub has significant
    advantages. It not only creates valuable documentation but also fosters a transparent
    culture. All decision-making processes and collaborations are visible and accessible
    to all team members, fostering inclusivity and understanding. When conversations
    occur on other platforms such as Slack, guiding those discussions back to GitHub
    ensures that crucial information and decisions are documented and shared within
    the entire team. This approach prevents silos and ensures that everyone, regardless
    of when they join the project, has access to the same information.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中沟通以提高透明度**：在协作环境中，沟通通常通过多个渠道进行，如Slack、Teams、Jira和GitHub。然而，将与项目相关的讨论集中在GitHub上具有显著的优势。它不仅创造了有价值的文档，还促进了透明的文化。所有的决策过程和协作对所有团队成员都是可见和可访问的，促进了包容性和理解。当讨论发生在Slack等其他平台时，将这些讨论引导回GitHub，确保关键信息和决策得以记录，并在整个团队中共享。这种方法避免了信息孤岛，确保每个人，无论何时加入项目，都能访问到相同的信息。'
- en: '**Embracing positive and inclusive communication**: Effective collaboration
    is rooted in positive and inclusive communication. When replying to issues, it
    is important to acknowledge and praise good behavior, thank team members for their
    contributions, and maintain a respectful and supportive tone. This not only encourages
    a healthy team dynamic but also boosts morale and fosters a sense of belonging
    and appreciation. Inclusive communication means ensuring that everyone’s voice
    is heard and valued and their contributions are recognized. This approach not
    only strengthens team cohesion but also drives better problem-solving and innovation.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拥抱积极和包容性的沟通**：有效的协作建立在积极和包容性的沟通基础上。在回复问题时，重要的是要肯定并表扬良好的行为，感谢团队成员的贡献，并保持尊重和支持的语气。这不仅鼓励健康的团队氛围，还能提升士气，培养归属感和感激之情。包容性沟通意味着确保每个人的声音都被听到和重视，他们的贡献得到认可。这种方法不仅加强了团队凝聚力，还推动了更好的问题解决和创新。'
- en: In GitHub, replying to issues is more than just a response; it is an integral
    part of building passive documentation, fostering team transparency, and encouraging
    positive, inclusive communication. By treating issue replies as contributions
    to a living document, we create a rich history of the project’s evolution. Centralizing
    communication on GitHub ensures that all team members have equal access to information,
    aiding in transparent decision-making. Lastly, embracing a positive communication
    style strengthens team bonds and ensures that everyone feels valued and heard.
    This holistic approach to issue replies is not only about solving problems but
    also about building a strong, inclusive, and transparent team culture.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 中，回复问题不仅仅是一个回应；它是构建被动文档、促进团队透明度并鼓励积极包容性沟通的重要组成部分。通过将问题回复视为对一个活文档的贡献，我们创造了项目演变的丰富历史。将沟通集中在
    GitHub 上，确保所有团队成员都能平等地获取信息，有助于透明的决策制定。最后，采取积极的沟通风格可以增强团队凝聚力，确保每个人都感到被重视和倾听。对问题回复的这种全面方法，不仅仅是解决问题，更是建立强大、包容和透明的团队文化。
- en: Now, let’s look at pull requests in the next section. This has a very similar
    interface to GitHub Issues, with the main difference being that it involves implementation
    in addition to comments.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下下一节的拉取请求。这与 GitHub 问题的界面非常相似，主要的区别在于它除了评论外，还涉及到实现。
- en: Now, let’s get down to the heart of engineering collaboration.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入探讨工程协作的核心。
- en: Pull request excellence
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拉取请求的卓越
- en: The GitHub pull requests feature stands as a pivotal innovation in the landscape
    of software development, one that can be credited with significantly shaping the
    **Open Source Software** (**OSS**) movement. Its introduction marked a transformative
    moment, redefining how collaboration, code integration, and **Quality Assurance**
    (**QA**) are conducted in software projects, particularly in OSS.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 的拉取请求功能是软件开发领域的一项关键创新，可以说它对**开源软件**（**OSS**）运动的形成起到了重要作用。它的引入标志着一个转折点，重新定义了在软件项目，尤其是开源软件项目中如何进行协作、代码集成和**质量保证**（**QA**）。
- en: Pull requests in GitHub are more than just a feature; they are a foundational
    mechanism for collaboration in the world of software development. A pull request
    is essentially a request to merge a set of changes from one branch of a repository
    to another, typically from a feature or topic branch into the main or master branch.
    But the significance of pull requests goes well beyond mere code merging; they
    are a nexus for discussion, review, and refinement of code in a collaborative
    project setting.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 中的拉取请求不仅仅是一个功能；它是软件开发领域协作的基础机制。拉取请求本质上是一个请求，将一组更改从仓库的一个分支合并到另一个分支，通常是从功能分支或主题分支合并到主分支或主干分支。但拉取请求的意义远不止于代码合并；它们是讨论、审查和完善代码的枢纽，尤其是在协作项目中。
- en: What makes pull requests unique?
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么使拉取请求与众不同？
- en: The pull request model transformed collaborative coding. It shifted the focus
    from individual code patches sent in isolation to a more interactive and community-driven
    approach. Developers could now not only submit changes but also engage in discussions
    about those changes directly within the GitHub platform. This fostered a culture
    of collaborative review and continuous feedback, essential for maintaining high
    code quality and aligning contributions with the project’s goals. Pull requests
    introduced a structured, transparent method for code reviews. Code changes are
    now easily visible and discussable within the context of a pull request, allowing
    for more detailed and productive feedback. This process ensures that changes are
    thoroughly vetted, leading to higher code quality and more robust software projects.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取请求模型改变了协作编码的方式。它将焦点从单独提交的代码补丁转移到更加互动和社区驱动的方式。开发者现在不仅可以提交更改，还可以直接在 GitHub 平台上参与关于这些更改的讨论。这促进了协作审查和持续反馈的文化，这对于维持高质量的代码和确保贡献与项目目标一致至关重要。拉取请求引入了一种结构化、透明的代码审查方法。代码更改现在可以在拉取请求的上下文中轻松查看和讨论，从而允许更详细和高效的反馈。这个过程确保了更改经过充分审查，从而提高了代码质量和软件项目的健壮性。
- en: Pull requests have not only revolutionized the way code is reviewed and merged
    but also significantly streamlined development workflows in GitHub. By integrating
    seamlessly with GitHub native features and a plethora of third-party tools, they
    support and enhance **Continuous Integration** (**CI**) and **Continuous Deployment**
    (**CD**) practices. This integration transforms the development process, making
    it more efficient, reliable, and automated.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取请求不仅革新了代码审查和合并的方式，还显著简化了 GitHub 中的开发工作流程。通过与 GitHub 原生功能和大量第三方工具无缝集成，拉取请求支持并增强了**持续集成**（**CI**）和**持续部署**（**CD**）实践。这一集成改变了开发过程，使其更加高效、可靠和自动化。
- en: A fascinating development in the use of pull requests is the integration of
    pre-release testing within the pull request thread itself. This advancement has
    led to a more comprehensive and cohesive approach to ensuring code quality and
    project management. Whenever a developer initiates a pull request, it triggers
    a series of automated checks and tests. These can range from code quality assessments
    and security vulnerability scans to performance tests. The results of these tests
    are then displayed directly in the pull request, providing immediate and actionable
    feedback.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关于拉取请求的有趣发展是预发布测试的集成，这一过程发生在拉取请求的讨论线程中。这一进展促成了一种更全面、更紧密的方式来确保代码质量和项目管理。每当开发者发起拉取请求时，它会触发一系列自动化检查和测试。这些测试可以涵盖从代码质量评估和安全漏洞扫描到性能测试等多个方面。这些测试的结果会直接显示在拉取请求中，提供即时且可操作的反馈。
- en: Beyond the command line
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 超越命令行
- en: When discussing the historical context and evolution of GitHub pull requests,
    it is important to note that the term *pull request* itself has roots in the `git
    request-pull` command in Git. This connection might lead some to view GitHub’s
    contribution as primarily providing a user interface for an existing concept rather
    than inventing something entirely new. However, a deeper exploration of the history
    and development of pull requests reveals a more significant impact.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论 GitHub 拉取请求的历史背景和演变时，值得注意的是，*拉取请求*这一术语本身源于 Git 中的 `git request-pull` 命令。这一联系可能使一些人认为
    GitHub 的贡献主要是为现有概念提供了用户界面，而不是发明了一种全新的东西。然而，深入探讨拉取请求的历史和发展，会发现它具有更为深远的影响。
- en: GitHub took a basic command-line function and transformed it into a rich, interactive,
    and collaborative feature within its web interface. This transformation was not
    just about adding a user interface layer; it was about reimagining how collaboration
    around code changes could be done.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 将一个基本的命令行功能转变为其网页界面中的一个丰富、互动且协作的功能。这一转变不仅仅是增加了一个用户界面层；更是重新构想了围绕代码更改进行协作的方式。
- en: Crafting a pull request
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建拉取请求
- en: 'Begin by selecting or creating a repository on GitHub. For this demonstration,
    we will focus on the GitHub user interface rather than the command-line interface.
    Consider a repository with only a `README.md` file as a starting point. The goal
    is to add detailed content to this file and submit a pull request for merging:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 GitHub 上选择或创建一个仓库。为了演示，我们将重点关注 GitHub 的用户界面，而非命令行界面。考虑一个仅包含 `README.md`
    文件的仓库作为起点。目标是向该文件中添加详细内容并提交一个拉取请求进行合并：
- en: '![Figure 4.33 – Repository page](img/B21203_04_033.jpg)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.33 – 仓库页面](img/B21203_04_033.jpg)'
- en: Figure 4.33 – Repository page
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.33 – 仓库页面
- en: 'The first step involves creating a branch named `adding-details-to-readme`.
    This branch is where you will make your edits before merging them into the main
    branch. While you can create and push new branches using Git commands, GitHub
    also offers an intuitive interface for this purpose. Use the branch drop-down
    button in the top-left corner to create a branch derived from the main branch:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建一个名为 `adding-details-to-readme` 的分支。这个分支是你在将更改合并到主分支之前进行编辑的地方。虽然你可以使用
    Git 命令创建并推送新分支，GitHub 也提供了一个直观的界面来实现这一功能。使用左上角的分支下拉按钮从主分支创建一个新分支：
- en: '![Figure 4.34 – Creating a new branch via the drop-down menu](img/B21203_04_034.jpg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.34 – 通过下拉菜单创建新分支](img/B21203_04_034.jpg)'
- en: Figure 4.34 – Creating a new branch via the drop-down menu
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.34 – 通过下拉菜单创建新分支
- en: 'Once a branch is created, you can make changes on any branch, not just the
    main or master branches:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了分支，你可以在任何分支上进行更改，而不仅仅是主分支或主干分支：
- en: '![Figure 4.35 – Branch creation notification](img/B21203_04_035.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.35 – 分支创建通知](img/B21203_04_035.jpg)'
- en: Figure 4.35 – Branch creation notification
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.35 – 分支创建通知
- en: 'Then, let’s edit `README.md`. Ensure you are on the correct branch by checking
    the drop-down menu in the top-left corner before starting your edits. Then, use
    the edit button in the top-right corner to begin editing the `README` file:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们编辑`README.md`。在开始编辑之前，请通过检查左上角的下拉菜单确保您位于正确的分支上。接着，点击右上角的编辑按钮开始编辑`README`文件：
- en: '![Figure 4.36 – Clicking the edit button](img/B21203_04_036.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.36 – 点击编辑按钮](img/B21203_04_036.jpg)'
- en: Figure 4.36 – Clicking the edit button
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.36 – 点击编辑按钮
- en: 'The `README.md` file is the face and gateway of your repository, welcoming
    team members and new contributors. Here, let your imagination run wild and craft
    a compelling `README`:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`README.md`文件是您仓库的“面孔”和“门户”，欢迎团队成员和新贡献者。在这里，发挥您的想象力，撰写一份引人注目的`README`：'
- en: '![Figure 4.37 – Editing the README.md file](img/B21203_04_037.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.37 – 编辑 README.md 文件](img/B21203_04_037.jpg)'
- en: Figure 4.37 – Editing the README.md file
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.37 – 编辑 README.md 文件
- en: Well, now we are all set. Let’s get your commit reflected. Since you are already
    in the branch for editing, you may commit your edits as they are. However, if
    you open the edit window and commit it while still in the `main` branch, you still
    have the option of creating a new branch. But it is safer to consciously create
    a branch initially and commit. On the other hand, there is a branch protection
    policy configuration at GitHub that prevents you from committing directly to the
    team’s shared environment, such as `main`, `production`, and `release`, which
    will be covered in this chapter later.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们已经准备就绪。让我们开始提交您的更改。既然您已经在编辑分支上，您可以直接提交您的编辑内容。不过，如果您在`main`分支上打开编辑窗口并提交，您仍然可以选择创建一个新的分支。但最好在开始时有意识地创建一个分支并提交。另外，GitHub
    上有分支保护策略配置，防止您直接提交到团队共享环境中，比如`main`、`production`和`release`分支，关于这部分内容将在本章后续讲解。
- en: 'The title becomes the Git commit message, so think about this carefully as
    you read the previous chapters and commit it:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 标题会成为 Git 提交消息，因此在阅读前几章并进行提交时，请仔细考虑这一点：
- en: '![Figure 4.38 – Committing changes](img/B21203_04_038.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.38 – 提交更改](img/B21203_04_038.jpg)'
- en: Figure 4.38 – Committing changes
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.38 – 提交更改
- en: 'Once your changes are committed, you will likely see an alert on the repository’s
    home page for creating a pull request. You can also create a pull request from
    the **New pull request** button if an alert does not appear or you wish to select
    a different branch:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦更改提交，您可能会在仓库主页看到创建拉取请求的通知。如果没有出现通知，或者您希望选择不同的分支，您也可以通过点击**新建拉取请求**按钮来创建拉取请求：
- en: '![Figure 4.39 – Pull request alert](img/B21203_04_039.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.39 – 拉取请求通知](img/B21203_04_039.jpg)'
- en: Figure 4.39 – Pull request alert
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.39 – 拉取请求通知
- en: 'If you do not see this alert or want to select a different branch, you can
    start the same process by clicking the **New pull request** button under the **Pull**
    **requests** tab:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有看到此通知，或者想选择不同的分支，可以通过点击**拉取请求**标签下的**新建拉取请求**按钮来开始相同的流程：
- en: '![](img/B21203_04_040.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21203_04_040.jpg)'
- en: Figure 4.40 – Clicking the New pull request button
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.40 – 点击新建拉取请求按钮
- en: When navigating the interface, you may find yourself on the pull request page
    whether by following an alert or by clicking the **New pull request** button.
    Regardless of how you arrive, this is the place where you will check the history
    of your changes.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览界面时，您可能会发现自己进入了拉取请求页面，无论是通过跟随通知还是点击**新建拉取请求**按钮。无论您如何到达，这都是您查看更改历史记录的地方。
- en: 'The way changes are presented in GitHub can vary. As illustrated in the screenshot,
    differences (or diffs) can be displayed inline, interspersed within each line
    of the code:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 中，更改的展示方式可能有所不同。如截图所示，差异（或 diff）可以以内联方式展示，交错在每行代码中：
- en: '![Figure 4.41 – Reviewing changes screen in the unified mode](img/B21203_04_041.jpg)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.41 – 统一模式下查看更改页面](img/B21203_04_041.jpg)'
- en: Figure 4.41 – Reviewing changes screen in the unified mode
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.41 – 统一模式下查看更改页面
- en: 'Alternatively, GitHub offers a split view, showcasing differences side by side.
    This bifurcated display allows for a clearer comparison between the original and
    modified code:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，GitHub 提供了分屏视图，显示原始代码和修改代码的差异。这种分裂式显示方式可以让您更清楚地对比原始代码和修改后的代码：
- en: '![Figure 4.42 – Reviewing changes screen in the split mode](img/B21203_04_042.jpg)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.42 – 分屏模式下查看更改页面](img/B21203_04_042.jpg)'
- en: Figure 4.42 – Reviewing changes screen in the split mode
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.42 – 分屏模式下查看更改页面
- en: 'When satisfied, let’s write your pull request. A good pull request includes
    a clear title, a detailed description, and designated reviewers. As for reviewers,
    you can specify individuals or teams. The content here is somewhat like what you
    would write in an issue:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 当你满意时，开始编写拉取请求。一个好的拉取请求包括清晰的标题、详细的描述和指定的评审者。至于评审者，你可以指定个人或团队。这里的内容有点像你在问题中会写的内容：
- en: '![Figure 4.43 – You can check the differences between the commits](img/B21203_04_043.jpg)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.43 – 你可以查看提交之间的差异](img/B21203_04_043.jpg)'
- en: Figure 4.43 – You can check the differences between the commits
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.43 – 你可以查看提交之间的差异
- en: Now, your writing skills are put to the test once again. The content to be concerned
    with when writing here is the same as what we were concerned with regarding issues
    in the previous section. Write in an easy-to-read, Markdown format. However, in
    this context, understanding the distinct objectives of these tools is crucial.
    The primary aim of a pull request is to be merged, typically addressed to specific
    individuals authorized to approve it. In contrast, an issue can be directed toward
    a wider and undefined audience. Therefore, when writing a description for this
    pull request, it is crucial to consider who will be reviewing it and how to write
    it.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的写作技巧再次受到考验。写作时需要关注的内容与我们在上一节中关于问题时所关注的内容相同。写作时使用易读的 Markdown 格式。然而，在这种情况下，理解这些工具的不同目标至关重要。拉取请求的主要目的是合并，通常是针对有权批准的特定个人。相反，问题可以面向更广泛且未定义的受众。因此，编写这个拉取请求的描述时，考虑谁将进行评审以及如何写作是非常重要的。
- en: If the review is to be conducted by a specific person, there might be some shared
    understanding or context, which could reduce the need for extensive comments in
    the review. The basic technique is the same as for an issue, but it is important
    to tailor your approach to your target audience.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 如果评审是由特定人员进行的，可能会有一些共享的理解或背景，这可以减少评审时需要大量评论的情况。基本的技巧和处理问题时一样，但要根据你的目标受众调整写作方式。
- en: 'You might notice that there are two options available when creating a pull
    request, which can be accessed via the drop-down button on the right. You can
    either create a standard pull request or opt for a draft pull request. Draft pull
    requests may not be applicable to private repositories depending on your plan,
    but anyone can try it for public repositories. I encourage you to check it:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到在创建拉取请求时有两个可用选项，可以通过右侧的下拉按钮访问。你可以选择创建标准拉取请求或选择草稿拉取请求。根据你的计划，草稿拉取请求可能不适用于私有仓库，但任何人都可以在公共仓库中尝试使用。我鼓励你查看：
- en: '![Figure 4.44 – There is another option: Create a draft pull request](img/B21203_04_044.jpg)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.44 – 另一个选项：创建草稿拉取请求](img/B21203_04_044.jpg)'
- en: 'Figure 4.44 – There is another option: Create a draft pull request'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.44 – 另一个选项：创建草稿拉取请求
- en: Both draft and regular pull requests do not differ much in terms of the user
    interface. However, a draft pull request is used to indicate that the pull request
    is not yet finalized or that the overall work is still in progress, incomplete,
    or in a specific stage of development.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 草稿拉取请求和常规拉取请求在用户界面上没有太大区别。然而，草稿拉取请求用于表示该拉取请求尚未完成，或者整体工作仍在进行中、未完成，或者处于开发的特定阶段。
- en: It allows for intermediate reviews, signifying that it is not intended for formal
    review yet. Reviewers usually appreciate receiving interim results or reports.
    Early reviews can provide valuable insights and share progress with the team,
    which is beneficial.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许进行中期评审，表明该拉取请求尚不打算进行正式评审。评审者通常会欣赏收到中期结果或报告。早期评审可以提供宝贵的见解，并与团队分享进展，这对项目有益。
- en: 'In the case of a draft pull request, the merge cannot be done immediately by
    mistake, as follows:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在草稿拉取请求的情况下，不会因错误而立即进行合并，如下所示：
- en: '![Figure 4.45 – Draft pull request explicitly indicates it is not ready for
    review](img/B21203_04_045.jpg)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.45 – 草稿拉取请求明确表示尚未准备好进行评审](img/B21203_04_045.jpg)'
- en: Figure 4.45 – Draft pull request explicitly indicates it is not ready for review
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.45 – 草稿拉取请求明确表示尚未准备好进行评审
- en: In an extreme scenario, you can create a pull request even without writing a
    single line of code with the `git empty commit` command. This can be incredibly
    useful from the early stages of development, allowing team members or a pair-programming
    partner to review the code, helping to identify mistakes early. Therefore, it
    is highly recommended to make use of draft pull requests as well.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在极端情况下，你甚至可以通过`git empty commit`命令创建一个拉取请求，而不写一行代码。这在开发的早期阶段非常有用，可以让团队成员或配对编程的伙伴提前审查代码，帮助尽早发现错误。因此，强烈建议同时利用草稿拉取请求。
- en: An empty commit in Git is a commit that does not contain any changes; it is
    like sending a message without altering any files. This can be particularly useful
    for initiating discussions in the early stages of development without the need
    for actual code changes. To create an empty commit, you can use the `git commit
    --allow-empty -m "Your message"` command, which enables you to make a commit with
    a message but no content changes. This feature is handy for creating pull requests
    that serve as placeholders for future code reviews or to mark specific milestones
    in the development process. It is recommended to keep this empty commit in mind
    along with the draft pull request.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在Git中，空提交是指不包含任何更改的提交；就像发送了一条消息但没有修改任何文件。这在开发的早期阶段尤其有用，可以在不需要实际代码更改的情况下发起讨论。要创建一个空提交，可以使用`git
    commit --allow-empty -m "Your message"`命令，这样就可以进行一次提交，包含消息但不包含任何内容更改。这个功能对于创建作为未来代码审查占位符的拉取请求或标记开发过程中特定的里程碑非常有用。建议你在使用草稿拉取请求时记住这个空提交。
- en: 'Now, once you have conducted appropriate communication and completed the review,
    it is time to merge. The great thing about GitHub here is not the command interface,
    but the ability to perform merges on the user interface. You can go ahead and
    merge as it is, but let’s look at the options before doing so:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦你进行了适当的沟通并完成了审查，就到了合并的时候。这里GitHub的伟大之处并不是命令行界面，而是能够在用户界面上进行合并。你可以直接进行合并，但在执行之前，让我们先看看可选的选项：
- en: '![Figure 4.46 – Merge can be done with the web user interface](img/B21203_04_046.jpg)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.46 – 可以通过网页用户界面进行合并](img/B21203_04_046.jpg)'
- en: Figure 4.46 – Merge can be done with the web user interface
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.46 – 可以通过网页用户界面进行合并
- en: Upon inspecting the **Merge** dropdown, you will find three options. These are
    creating a merge commit, then squashing to combine commits into one and merge,
    and finally, performing a rebase merge. While these merging techniques were covered
    in a previous chapter and will not be elaborated on here, the beauty of GitHub
    lies in the flexibility it offers to choose each of these options for managing
    your Git history. If you want to preserve the history of contributions, you will
    first incorporate the commits, ensuring as much of the change history remains
    as possible. On the other hand, if you prefer a cleaner history, options such
    as **Squash and merge** and **Rebase and merge** are also available to consider.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查**合并**下拉菜单时，你会发现三个选项。这些选项分别是创建一个合并提交，然后将提交合并为一个并执行合并，最后是执行变基合并。虽然这些合并技术在之前的章节中已经讲解过，并在这里不会详细展开，但GitHub的美妙之处在于它提供的灵活性，允许你选择每个选项来管理你的Git历史记录。如果你想保留贡献历史，首先需要合并提交，确保尽可能多地保留变更历史。另一方面，如果你更倾向于一个干净的历史，像**合并并压缩**和**变基合并**等选项也是可以考虑的。
- en: 'It is important to note, however, that GitHub’s `git rebase` command. **Rebase
    and merge** on GitHub effectively reapplies each commit from the feature branch
    onto the base branch individually, without creating a merge commit. This allows
    for a linear history while preserving the chronological order of commits. Whether
    you aim to maintain a detailed record of contributions or prefer a streamlined
    history, GitHub provides the tools to accommodate your project’s needs:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，重要的是要注意GitHub的`git rebase`命令。GitHub上的**变基合并**实际上是将特性分支上的每个提交单独重新应用到基础分支上，而不创建合并提交。这可以保持线性的历史，同时保留提交的时间顺序。无论你是希望保留详细的贡献记录，还是更倾向于简化的历史，GitHub都提供了满足你项目需求的工具：
- en: '![Figure 4.47 – Merge options](img/B21203_04_047.jpg)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.47 – 合并选项](img/B21203_04_047.jpg)'
- en: Figure 4.47 – Merge options
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.47 – 合并选项
- en: 'This time, we chose to create a merge commit. Creating a merge commit is easy;
    simply write a title and a description. Then, click on the **Confirm merge** button
    to merge:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们选择了创建一个合并提交。创建合并提交很简单；只需写一个标题和描述。然后，点击**确认合并**按钮进行合并：
- en: '![Figure 4.48 – Creating a merge commit](img/B21203_04_048.jpg)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.48 – 创建合并提交](img/B21203_04_048.jpg)'
- en: Figure 4.48 – Creating a merge commit
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.48 – 创建合并提交
- en: 'Then, you will confirm that the merge was successfully done on the GitHub platform:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你将确认在 GitHub 平台上是否已成功完成合并：
- en: '![Figure 4.49 – Checking if the merge was successful](img/B21203_04_049.jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.49 – 检查合并是否成功](img/B21203_04_049.jpg)'
- en: Figure 4.49 – Checking if the merge was successful
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.49 – 检查合并是否成功
- en: You have observed the simplicity of managing pull requests on GitHub. This platform
    demonstrates how intricate actions and reviews, traditionally executed via the
    command line, can be efficiently conducted within a unified platform enhanced
    by a streamlined user interface.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经观察到在 GitHub 上管理拉取请求的简便性。这个平台展示了传统上通过命令行执行的复杂操作和审查，如何在一个统一的平台中高效进行，并通过精简的用户界面得到增强。
- en: Moving forward, we will delve deeper into the nuances of proficient pull request
    management. Our focus will be on how you can adeptly leverage these features within
    a DevOps-centric communication framework to drive the success of your projects
    or products. Additionally, we will discuss key aspects that call for your attention
    and consideration.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将深入探讨熟练的拉取请求管理技巧。我们的重点将放在如何在以 DevOps 为中心的沟通框架中巧妙地利用这些功能，从而推动项目或产品的成功。此外，我们还将讨论需要你关注和考虑的关键方面。
- en: Pull request review 101
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拉取请求审查基础
- en: First and foremost, it is essential to grasp how to conduct reviews on GitHub
    and then explore best practices that merit attention. When you begin learning
    GitHub, you might not immediately engage in full-fledged code reviews. However,
    understanding how reviews should be conducted can influence your expectations
    and the content you include when writing a pull request.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，掌握如何在 GitHub 上进行审查至关重要，然后再探索值得关注的最佳实践。当你开始学习 GitHub 时，可能不会立即进行全面的代码审查。然而，了解审查应该如何进行，可以影响你的期望以及在编写拉取请求时所包含的内容。
- en: Remember—these are practices that can be gradually improved and, ultimately,
    should be optimized for your team.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住——这些都是可以逐步改进的实践，最终应该针对你的团队进行优化。
- en: Review basics
  id: totrans-337
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 审查基础
- en: 'Accessing the review interface on GitHub is straightforward. From the pull
    request page, open the **Files changed** tab to see how many files have been modified:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 上访问审查界面非常简单。从拉取请求页面，打开**更改的文件**标签，查看哪些文件已被修改：
- en: '![Figure 4.50 – Tab for reviewing pull requests](img/B21203_04_050.jpg)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.50 – 审查拉取请求的标签](img/B21203_04_050.jpg)'
- en: Figure 4.50 – Tab for reviewing pull requests
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.50 – 审查拉取请求的标签
- en: 'Once you have opened the `-` indicate deletions, while those with `+` are additions:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你打开后，`-` 表示删除，而 `+` 表示添加：
- en: '![Figure 4.51 – Viewing line-by-line differences on GitHub](img/B21203_04_051.jpg)'
  id: totrans-342
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.51 – 在 GitHub 上查看逐行差异](img/B21203_04_051.jpg)'
- en: Figure 4.51 – Viewing line-by-line differences on GitHub
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.51 – 在 GitHub 上查看逐行差异
- en: 'To comment on specific line changes, use the **+** button on the left. This
    also allows for selecting multiple lines, facilitating efficient discussion initiation:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 若要评论特定行的更改，使用左侧的**+**按钮。这也允许选择多行，便于高效启动讨论：
- en: '![Figure 4.52 – Reviewing changes](img/B21203_04_052.jpg)'
  id: totrans-345
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.52 – 审查更改](img/B21203_04_052.jpg)'
- en: Figure 4.52 – Reviewing changes
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.52 – 审查更改
- en: 'When reviewing, you may want to propose specific changes. This can be done
    by pressing the **Suggestion** button on the screen, which copies the content
    of the relevant line. Edit this content in your comment, but be aware that while
    comments can be added to deleted lines, suggestions cannot:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查时，你可能想要提出具体的更改。这可以通过点击屏幕上的**建议**按钮来完成，按钮会复制相关行的内容。你可以在评论中编辑这些内容，但请注意，虽然可以对已删除的行添加评论，但不能对已删除的行提出建议：
- en: '![Figure 4.53 – Proposing changes using the Suggestion button](img/B21203_04_053.jpg)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.53 – 使用建议按钮提出更改](img/B21203_04_053.jpg)'
- en: Figure 4.53 – Proposing changes using the Suggestion button
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.53 – 使用建议按钮提出更改
- en: 'If you find a suggestion to be good, press the **Add single comment** button
    to comment. For multiple review comments, use the **Start a review** button, which
    is handy when there are many edits. Review comments, including suggestions, appear
    both in the pull request thread and interspersed between code differences, making
    code reviews more straightforward:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为某个建议不错，可以按下**添加单条评论**按钮进行评论。如果有多个评论建议，请使用**开始审查**按钮，这在有很多修改时非常方便。评论建议会同时出现在拉取请求线程中，并与代码差异交错显示，使得代码审查更加直接：
- en: '![Figure 4.54 – Suggestion appears as a comment](img/B21203_04_054.jpg)'
  id: totrans-351
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.54 – 建议作为评论出现](img/B21203_04_054.jpg)'
- en: Figure 4.54 – Suggestion appears as a comment
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.54 – 建议作为评论出现
- en: 'After completing the review, you will see **Commit suggestion** and **Add suggestion
    to batch** buttons. GitHub’s brilliance lies in allowing these changes to be committed
    directly through the user interface, rather than needing to do so via the command-line
    interface or an editor. **Commit suggestion** commits an individual change, while
    **Add suggestion to batch** enables recording multiple changes as a single commit.
    This prevents unnecessary commits when your pull requests receive many changes.
    Pressing the **Commit suggestion** button brings up a screen for entering a commit
    message and description, after which the change is committed to the pull request
    branch:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 完成审查后，你会看到**提交建议**和**将建议添加到批次**按钮。GitHub的亮点在于它允许通过用户界面直接提交这些更改，而无需通过命令行界面或编辑器进行提交。**提交建议**会提交单个更改，而**将建议添加到批次**则能将多个更改记录为一次提交。这可以防止当你的拉取请求收到许多修改时产生不必要的提交。按下**提交建议**按钮后，会弹出一个界面，用于输入提交信息和描述，之后该更改会提交到拉取请求分支：
- en: '![Figure 4.55 – Committing changes](img/B21203_04_055.jpg)'
  id: totrans-354
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.55 – 提交更改](img/B21203_04_055.jpg)'
- en: Figure 4.55 – Committing changes
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.55 – 提交更改
- en: 'Once the review is complete, it is time for you to conduct a review. Note that
    approving a review does not automatically merge the pull request, but it does
    mark it as approved by you. Here, you can choose between **Commit**, **Approve**,
    and **Request changes**. The **Comment** option is for just only making a comment,
    **Approve** indicates approval, and **Request changes** is used to suggest necessary
    amendments:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦审查完成，就该进行审核了。请注意，批准审查并不会自动合并拉取请求，但它会标记为你已批准。在这里，你可以选择**提交**、**批准**和**请求更改**。**评论**选项仅用于发表评论，**批准**表示批准，**请求更改**用于建议必要的修改：
- en: '![Figure 4.56 – Three options for the review](img/B21203_04_056.jpg)'
  id: totrans-357
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.56 – 审查的三种选项](img/B21203_04_056.jpg)'
- en: Figure 4.56 – Three options for the review
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.56 – 审查的三种选项
- en: 'If you approve, your comment and approval status are posted in the thread like
    this:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你批准了，评论和批准状态将像这样发布在线程中：
- en: '![Figure 4.57 – Post-review status](img/B21203_04_057.jpg)'
  id: totrans-360
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.57 – 审查后的状态](img/B21203_04_057.jpg)'
- en: Figure 4.57 – Post-review status
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.57 – 审查后的状态
- en: Thus, GitHub simplifies the review process and enables many functionalities
    through its GUI. The blend of code changes and related comments enriches the context,
    allowing reviewers, reviewees, and current or future team members seeking historical
    context to understand and interact with the information effectively.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，GitHub简化了审查过程，并通过其图形用户界面（GUI）启用了许多功能。代码更改与相关评论的结合丰富了上下文，使得审查者、被审查者以及当前或未来需要查看历史背景的团队成员能够有效理解和互动这些信息。
- en: Mastering this feature can lead to highly transparent communication within your
    team.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握此功能可以实现团队内部高度透明的沟通。
- en: Let’s look at what to consider when reviewing or being reviewed
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看在审查或被审查时需要考虑的事项。
- en: Review best practices
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 审查最佳实践
- en: 'In the dynamic landscape of software development, GitHub reviews stand as a
    pivotal component in bridging individual effort and collective excellence. These
    reviews extend beyond mere code examination to fostering a collaborative and learning-rich
    environment. Mastering GitHub reviews is crucial for teams aiming for high-quality
    development processes. Here are some guidelines on how to achieve that:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发的动态环境中，GitHub审查作为连接个人努力与集体卓越的关键环节。这些审查不仅仅是对代码的检查，更是促进协作与学习丰富环境的途径。掌握GitHub审查对于寻求高质量开发流程的团队至关重要。以下是一些实现这一目标的指导原则：
- en: '**Cultivating the reviewer’s mindset**: The effectiveness of GitHub reviews
    starts with the reviewer’s mindset. Emphasizing prompt feedback is key, as it
    maintains the momentum of development. However, speed should be balanced with
    thoroughness, recognizing that the code is a collective asset of the team. This
    mindset fosters a constructive and ego-free approach to reviews, seeing them not
    just as a task but as an opportunity for meaningful dialogue and documentation
    for current and future team members.'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**培养审阅者的心态**：GitHub 审阅的有效性始于审阅者的心态。强调及时反馈是关键，因为它能保持开发的动力。然而，速度需要与彻底性相平衡，认识到代码是团队的共同资产。这种心态促进了一种建设性且没有自我的审阅方式，将审阅视为一个有意义的对话和文档记录的机会，而不仅仅是一个任务，服务于当前和未来的团队成员。'
- en: '**Enhancing communication in reviews**: Effective communication is central
    to GitHub reviews. Utilizing Markdown for clarity and structured feedback ensures
    that reviews are accessible and understandable. Being specific and concise in
    comments avoids confusion and expedites the review process. Positive reinforcement
    and constructive feedback, often supplemented with emojis, create a welcoming
    and psychologically safe review environment, encouraging prompt and enthusiastic
    adoption of changes.'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强审阅中的沟通**：有效的沟通是 GitHub 审阅的核心。利用 Markdown 提供清晰且结构化的反馈，确保审阅内容易于访问和理解。在评论中具体而简洁地表述，避免混淆，加快审阅过程。积极的强化和建设性的反馈，常常辅以表情符号，营造出一个欢迎且心理上安全的审阅环境，鼓励快速且积极地采纳变更。'
- en: '**Promoting diversity and authorship in reviews**: Diversity in the review
    process introduces varied perspectives, enriching the review and safeguarding
    against blind spots. Encouraging developers to revise their code based on feedback
    fosters empowerment and skill development. Additionally, preserving authorship,
    even in practices such as squash merging, is crucial for maintaining individual
    motivation and accountability.'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在审阅中促进多样性和作者权**：审阅过程中的多样性引入了不同的视角，丰富了审阅内容并防止盲点。鼓励开发者根据反馈修改代码能够增强其自主性和技能发展。此外，即便在像
    squash 合并这样的做法中，保持作者权也对保持个人动力和责任感至关重要。'
- en: '**Maintaining standards in urgent scenarios**: Even in urgent scenarios, such
    as hotfixes, the quality and thoroughness of reviews should not be compromised.
    Upholding standards under pressure is essential, as each review contributes to
    the team’s overall work ethic and code quality.'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在紧急情况下保持标准**：即便在紧急情况下，如热修复，审阅的质量和彻底性也不应妥协。在压力下保持标准至关重要，因为每一次审阅都对团队的整体工作态度和代码质量有所贡献。'
- en: '**Integrating automation for efficiency**: Incorporating automation into the
    review process, through automated tests, syntax checks, and linter rules, streamlines
    the review process. This allows human reviewers to focus on more complex aspects
    of the code. Employing templates for reviews also ensures consistency and thoroughness,
    maintaining a high quality of review across the board.'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**整合自动化以提高效率**：通过自动化测试、语法检查和 linter 规则将自动化融入审阅过程，有助于简化审阅流程。这使得人工审阅者可以将注意力集中在代码的更复杂方面。采用审阅模板也能确保一致性和彻底性，维持高质量的审阅标准。'
- en: In conclusion, reviews on GitHub are more than just a mechanism for code QA;
    they are a vital part of fostering team growth, learning, and collaboration. By
    adopting these best practices, teams elevate not just their code but also their
    working environment, promoting mutual respect, continuous improvement, and a collaborative
    spirit. A well-executed review is indeed a step toward a more cohesive, efficient,
    and resilient development process.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，GitHub 上的审阅不仅仅是代码质量保证的机制；它是促进团队成长、学习和协作的关键部分。通过采用这些最佳实践，团队不仅提升了代码质量，还改善了工作环境，促进了相互尊重、持续改进和协作精神。一次执行良好的审阅，确实是朝着更具凝聚力、高效性和韧性的开发过程迈进的一步。
- en: We have now gone through an overview of pull requests, basic usage, and best
    practices. So far, it seems like you have a pretty good grasp of how to collaborate
    on GitHub. From here, we will look at other features of GitHub to help you collaborate
    better.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经回顾了拉取请求的概述、基本用法和最佳实践。到目前为止，看来你已经对如何在 GitHub 上协作有了不错的理解。从这里开始，我们将探讨 GitHub
    的其他功能，帮助你更好地进行协作。
- en: Getting the best out of GitHub
  id: totrans-374
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发挥 GitHub 的最大效能
- en: Exploring additional features in GitHub can greatly enhance your repository
    management experience. While a detailed exploration of each feature would be extensive,
    a brief introduction to each can highlight their significance.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 GitHub 中的其他功能可以大大提升你的仓库管理体验。尽管每个功能的详细探索可能会非常庞大，但简要介绍每个功能可以突出它们的重要性。
- en: GitHub Projects – Managing your issues and pull requests in one place
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitHub Projects – 在一个地方管理你的问题和拉取请求
- en: GitHub Projects is a tool that allows you to manage issues, issue drafts, and
    pull requests in one place.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Projects 是一个工具，可以让你在一个地方管理问题、问题草稿和拉取请求。
- en: 'GitHub Projects will allow for more flexible management than just GitHub issues
    and pull requests. It represents a significant evolution in how development teams
    can organize, track, and manage their work on GitHub. Unlike the linear and somewhat
    limited scope of issues and pull requests, GitHub Projects offers a multifaceted
    approach to project management, aligning seamlessly with the collaborative and
    iterative nature of modern software development:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Projects 将提供比仅仅管理 GitHub 问题和拉取请求更灵活的管理方式。它代表了开发团队在 GitHub 上组织、跟踪和管理工作的一次重要进化。与问题和拉取请求的线性且有些受限的范围不同，GitHub
    Projects 提供了多方面的项目管理方法，与现代软件开发的协作和迭代特性无缝对接：
- en: '![Figure 4.58 – GitHub Projects table view](img/B21203_04_058.jpg)'
  id: totrans-379
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.58 – GitHub Projects 表格视图](img/B21203_04_058.jpg)'
- en: Figure 4.58 – GitHub Projects table view
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.58 – GitHub Projects 表格视图
- en: 'At the heart of GitHub Projects lies the Kanban board, a highly visual tool
    that enhances workflow visualization. This board allows teams to create custom
    columns that mirror their workflow stages—from **To Do** to **In Progress** and
    **Done**. The simplicity of dragging and dropping issues and pull requests across
    these columns significantly improves workflow transparency and helps in tracking
    the progress of tasks more intuitively:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Projects 的核心是看板（Kanban board），这是一种高度可视化的工具，可以增强工作流的可视化。这个看板允许团队创建自定义的列，以反映他们的工作流阶段——从**待办**到**进行中**再到**完成**。拖放问题和拉取请求到这些列的简便操作显著提高了工作流程的透明度，并帮助更直观地跟踪任务的进展：
- en: '![Figure 4.59 – GitHub Projects Kanban board view](img/B21203_04_059.jpg)'
  id: totrans-382
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.59 – GitHub Projects 看板视图](img/B21203_04_059.jpg)'
- en: Figure 4.59 – GitHub Projects Kanban board view
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.59 – GitHub Projects 看板视图
- en: Collaboration is further enhanced through tools such as assignees and milestones.
    Assignees ensure that responsibilities are clearly defined, while milestones help
    in tracking progress toward key objectives or deadlines. This structured approach
    to collaboration ensures that every team member is aligned with the project goals
    and understands their role in achieving them.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指派人和里程碑等工具，协作进一步得到增强。指派人确保责任明确，而里程碑有助于跟踪关键目标或截止日期的进展。这种结构化的协作方式确保每个团队成员都与项目目标保持一致，并理解自己在实现这些目标中的角色。
- en: 'Integrated project reporting is another facet that sets GitHub Projects apart.
    It provides a comprehensive overview of the project’s progress. DevOps metrics
    are invaluable for assessing team performance and identifying areas for improvement.
    This data-driven approach to project management enables teams to make informed
    decisions and optimize their workflows:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 集成项目报告是 GitHub Projects 的另一大特色，它提供了项目进展的全面概览。DevOps 指标对评估团队表现和识别改进领域至关重要。这种基于数据的项目管理方法使团队能够做出明智的决策，并优化工作流程：
- en: '![Figure 4.60 – GitHub Projects status chart](img/B21203_04_060.jpg)'
  id: totrans-386
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.60 – GitHub Projects 状态图](img/B21203_04_060.jpg)'
- en: Figure 4.60 – GitHub Projects status chart
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.60 – GitHub Projects 状态图
- en: GitHub Projects also offers a range of project templates—from predefined ones
    for common project types such as bug tracker or Kanban to the ability to create
    custom templates tailored to specific team workflows. These templates save time
    and provide a consistent structure that teams can rely on.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Projects 还提供了一系列项目模板——从预定义的常见项目类型（如错误追踪器或看板）到能够创建自定义模板，以适应特定团队工作流程的能力。这些模板节省时间，并提供一致的结构，团队可以依赖它们。
- en: Moreover, the inclusion of issue and pull request filters within the project
    board enhances the ability to manage tasks efficiently. Teams can filter by labels,
    assignees, milestones, and more, allowing them to quickly find and focus on tasks
    that matter most.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，项目板中包含问题和拉取请求的筛选器，增强了有效管理任务的能力。团队可以按标签、指派人、里程碑等进行筛选，使他们能够快速找到并专注于最重要的任务。
- en: One of the most significant advantages of GitHub Projects is its ability to
    manage issues and pull requests from multiple repositories in a single project.
    This feature is particularly beneficial for larger projects that span multiple
    repositories, providing a holistic view and cohesive management experience.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 项目最显著的优势之一是其能够在单一项目中管理来自多个代码库的问题和拉取请求。这个功能对于跨多个代码库的大型项目尤为有利，它提供了一个整体视图和连贯的管理体验。
- en: GitHub Projects goes beyond the traditional confines of issue tracking and pull
    request management, offering a comprehensive, flexible, and highly collaborative
    platform for project management. By using its features, development teams can
    enhance their productivity, improve collaboration, and drive their projects toward
    successful outcomes, all within the familiar ecosystem of GitHub. This alignment
    with the principles of DevOps culture—prioritizing collaboration, efficiency,
    and transparency—makes GitHub Projects a great tool in the modern software development
    landscape.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 项目超越了传统的问题跟踪和拉取请求管理，提供了一个全面、灵活且高度协作的平台来进行项目管理。通过使用其功能，开发团队可以提高生产力、改善协作，并推动项目走向成功，所有这一切都在熟悉的
    GitHub 生态系统中进行。与 DevOps 文化的原则——优先考虑协作、效率和透明度——保持一致，使得 GitHub 项目成为现代软件开发领域中的一款优秀工具。
- en: GitHub Codespaces – Transforming development workflows with cloud-based environments
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitHub Codespaces —— 利用基于云的环境改变开发工作流
- en: GitHub Codespaces revolutionizes the way developers work by offering fully configurable,
    cloud-based development environments directly within GitHub. It marks a significant
    step in the evolution of development workflows, making it easier for teams to
    collaborate and streamline their DevOps practices.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Codespaces 通过在 GitHub 内直接提供完全可配置的基于云的开发环境，彻底改变了开发者的工作方式。这标志着开发工作流演变的一个重要步骤，使团队更容易协作并简化其
    DevOps 实践。
- en: 'GitHub Codespaces streamlines development with critical features:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Codespaces 通过关键功能简化开发：
- en: '**Quick Start and Uniform Workspaces**: Enables instant setup of cloud-based
    environments, aligning team efforts and reducing setup complexity'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速启动和统一工作空间**：实现基于云的环境的即时设置，协调团队努力并减少设置复杂性'
- en: '**Collaboration and Pull Request Integration**: Facilitates easier code reviews
    and discussions within the Codespaces environment, enhancing teamwork across locations'
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协作与拉取请求集成**：促进在 Codespaces 环境内更轻松的代码审查和讨论，加强跨地点的团队合作'
- en: '**Secure and Isolated Environments**: Offers secure, containerized workspaces
    for each user, protecting project integrity and data security'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全与隔离的环境**：为每个用户提供安全的、容器化的工作空间，保护项目的完整性和数据安全'
- en: 'As an implementation of Visual Studio Code available in the browser, GitHub
    Codespaces offers the features and extensions available in VS Code. Although there
    are limitations to the extensions available in the Codespaces version, this familiarity
    is a tremendous advantage. It allows developers to leverage a powerful and popular
    development tool with the added benefits of cloud accessibility and integration:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种可以在浏览器中使用的 Visual Studio Code 实现，GitHub Codespaces 提供了与 VS Code 中相同的功能和扩展。虽然在
    Codespaces 版本中可用的扩展存在一些限制，但这种熟悉感是一个巨大的优势。它使开发者能够利用这个功能强大且广受欢迎的开发工具，同时享受云端可访问性和集成的额外好处：
- en: '![Figure 4.61 – GitHub Codespaces](img/B21203_04_061.jpg)'
  id: totrans-399
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.61 – GitHub Codespaces](img/B21203_04_061.jpg)'
- en: Figure 4.61 – GitHub Codespaces
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.61 – GitHub Codespaces
- en: Starting a new codespace is straightforward. With just a few clicks, developers
    can spin up a development environment that is automatically configured with the
    settings and tools specified in the repository’s `.devcontainer` configuration.
    This ensures consistency across development environments, a fundamental aspect
    of DevOps practices that emphasizes reproducibility and reduces “*works on my*
    *machine*” issues.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 启动一个新的 codespace 非常简单。开发者只需点击几下，就可以启动一个自动配置好仓库 `.devcontainer` 配置中指定的设置和工具的开发环境。这确保了开发环境的一致性，这是
    DevOps 实践中的一个关键方面，强调可复现性并减少了“*在我的机器上可用*”的问题。
- en: One of the most significant benefits of GitHub Codespaces is the elimination
    of the need to clone heavy files and set up complex development environments locally.
    This not only saves significant new engineers’ onboarding time but also simplifies
    the process of switching between different projects, each with its unique environment
    requirements. By hosting the development environment in the cloud, Codespaces
    significantly reduces the overhead of managing local development setups.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Codespaces的一个重要好处是无需克隆大型文件并在本地设置复杂的开发环境。这不仅节省了新工程师的入职时间，还简化了在不同项目间切换的过程，每个项目都有其独特的环境需求。通过将开发环境托管在云端，Codespaces大大减少了管理本地开发环境的开销。
- en: 'Performance and customization are key aspects of GitHub Codespaces. Developers
    can choose hardware specifications for their codespaces, ensuring they have the
    necessary resources for their tasks. Customization extends to the development
    environment itself, with support for Visual Studio Code extensions and personalized
    editor settings, reinforcing the DevOps focus on developer experience. From an
    administrative perspective, GitHub Codespaces allows organization leaders to set
    specific policies regarding the development environment, including constraints
    on the types of machines users can select for their codespaces. This capability
    ensures that development environments align with organizational standards and
    resource management strategies, offering a balanced approach to cost and performance
    within the company’s guidelines:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 性能和定制化是GitHub Codespaces的关键特点。开发者可以为他们的Codespaces选择硬件规格，确保他们拥有完成任务所需的资源。定制化还扩展到开发环境本身，支持Visual
    Studio Code扩展和个性化的编辑器设置，进一步强化了DevOps对开发者体验的关注。从管理角度来看，GitHub Codespaces允许组织领导者设定与开发环境相关的特定政策，包括对用户选择机器类型的限制。这一功能确保开发环境与组织的标准和资源管理策略相符，在公司指导方针内提供了成本与性能的平衡方法。
- en: '![Figure 4.62 – Restricting access to machine types](img/B21203_04_062.jpg)'
  id: totrans-404
  prefs: []
  type: TYPE_IMG
  zh: '![图4.62 – 限制机器类型的访问](img/B21203_04_062.jpg)'
- en: Figure 4.62 – Restricting access to machine types
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.62 – 限制机器类型的访问
- en: Also, it offers a remarkable blend of collaboration and security, striking a
    perfect balance for modern development teams. Integrating pull requests directly
    into the Codespaces environment significantly enhances the collaborative process,
    making it easier for teams to propose, discuss, and merge changes efficiently,
    regardless of their physical locations. This streamlined workflow for code reviews
    and collaboration is coupled with a powerful security advantage. Codespaces reduce
    the risks associated with employees downloading whole source code data locally,
    addressing common security concerns that arise from local file storage and management.
    Each user’s workspace is securely isolated, further mitigating potential security
    issues tied to local development practices. This thoughtful integration of collaboration
    and security within Codespaces not only boosts productivity but also strengthens
    the safeguarding of project data, offering a secure, collaborative development
    solution.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它提供了出色的协作与安全性平衡，为现代开发团队提供了完美的支持。将拉取请求直接集成到Codespaces环境中，显著提升了协作过程，使团队能够更高效地提出、讨论和合并更改，无论其物理位置如何。这种简化的代码审查和协作工作流程与强大的安全优势相结合。Codespaces减少了员工将整个源代码数据下载到本地所带来的风险，解决了本地文件存储和管理所引发的常见安全问题。每个用户的工作区都被安全隔离，进一步缓解了与本地开发实践相关的潜在安全问题。Codespaces中协作与安全性的深思熟虑的结合，不仅提高了生产力，还加强了项目数据的保护，提供了一个安全且协作的开发解决方案。
- en: GitHub Codespaces is more than just a development environment; it is a catalyst
    for enhancing DevOps practices. By offering a flexible, collaborative, and integrated
    platform, it empowers teams to innovate faster, collaborate more effectively,
    and deliver higher-quality software, all within the GitHub ecosystem. This makes
    GitHub Codespaces an indispensable tool in the modern software development and
    DevOps landscape.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Codespaces不仅仅是一个开发环境；它是提升DevOps实践的催化剂。通过提供一个灵活、协作和集成的平台，它使团队能够更快速地创新、更有效地协作，并交付更高质量的软件，所有这一切都在GitHub生态系统内进行。这使得GitHub
    Codespaces成为现代软件开发和DevOps领域中不可或缺的工具。
- en: GitHub Discussions – Fostering community and collaboration
  id: totrans-408
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitHub讨论区 – 促进社区和协作
- en: 'GitHub Discussions serves as a vital platform for building and nurturing community
    within GitHub repositories. It represents a significant advancement in how developers,
    contributors, and users interact and collaborate. This feature extends beyond
    the traditional issue and pull request communication, offering a dedicated space
    for questions, ideas, and discussions. GitHub Discussions creates an environment
    where the broader community—including those who may not be directly involved in
    code contributions—can engage, share insights, and provide feedback:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Discussions 作为一个重要的平台，在 GitHub 仓库内构建和培养社区方面发挥着重要作用。它代表了开发者、贡献者和用户之间互动与协作方式的重大进步。这个功能超越了传统的问题和拉取请求通信，提供了一个专门的空间，用于提问、想法和讨论。GitHub
    Discussions 创造了一个环境，使更广泛的社区——包括那些可能未直接参与代码贡献的人——能够互动、分享见解并提供反馈：
- en: '![Figure 4.63 – GitHub Discussions thread](img/B21203_04_063.jpg)'
  id: totrans-410
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.63 – GitHub 讨论线程](img/B21203_04_063.jpg)'
- en: Figure 4.63 – GitHub Discussions thread
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.63 – GitHub 讨论线程
- en: 'A key aspect of GitHub Discussions is its ability to organize communication
    effectively. Discussions can be categorized into different types, such as Q&As,
    announcements, or general discussions. This categorization helps to maintain clarity
    and focus, making it easier for users to find relevant conversations and contribute
    meaningfully:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Discussions 的一个关键特点是其高效组织沟通的能力。讨论可以按不同类型进行分类，如问答、公告或一般讨论。这种分类有助于保持清晰性和重点，使用户更容易找到相关的对话并有意义地参与其中：
- en: '![Figure 4.64 – GitHub Discussions categories](img/B21203_04_064.jpg)'
  id: totrans-413
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.64 – GitHub 讨论类别](img/B21203_04_064.jpg)'
- en: Figure 4.64 – GitHub Discussions categories
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.64 – GitHub 讨论类别
- en: GitHub Discussions also plays a crucial role in knowledge sharing and preservation.
    Unlike transient communication channels such as chat rooms, discussions are persistent
    and searchable, making them a valuable resource for current and future community
    members. This archival quality ensures that knowledge shared in discussions continues
    to benefit the community long after conversations have taken place.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Discussions 在知识共享和保存方面也起着至关重要的作用。与即时通信渠道（如聊天室）不同，讨论是持久的并且可以搜索，这使得它们成为当前和未来社区成员的宝贵资源。这种档案化特性确保了在讨论中共享的知识，在对话结束后仍能继续造福社区。
- en: In summary, GitHub Discussions is not only a powerful tool for fostering community
    engagement and collaboration but also plays a crucial role in maintaining the
    organization and clarity of GitHub issues. As projects grow and evolve, the volume
    and diversity of issues can become overwhelming, leading to clutter and confusion.
    GitHub Discussions acts as a catalyst for communication, enabling teams to channel
    various topics and conversations into a more structured and appropriate space.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，GitHub Discussions 不仅是促进社区参与和协作的强大工具，而且在维护 GitHub 问题的组织性和清晰度方面起着至关重要的作用。随着项目的增长和发展，问题的数量和多样性可能变得压倒性，导致杂乱无章和混乱。GitHub
    Discussions 作为沟通的催化剂，使团队能够将各种话题和对话引导到更有结构和更合适的空间。
- en: This capability of GitHub Discussions to segregate broad, general discussions
    from more specific, technical conversations typically housed in GitHub Issues
    is invaluable. It helps in keeping the **Issues** section focused and manageable,
    reducing noise and making it easier for teams to track and address specific code-related
    tasks.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Discussions 将广泛的一般性讨论与通常位于 GitHub Issues 中的更具体、技术性的对话区分开来的能力极为宝贵。它有助于保持**Issues**部分的专注和可管理性，减少噪音，并使团队更容易跟踪和处理特定的与代码相关的任务。
- en: Moreover, by providing a dedicated platform for wide-ranging discussions, GitHub
    Discussions smooths the path for collaboration in numerous ways. It not only ensures
    that valuable insights and ideas are shared and preserved but also prevents the
    dilution of technical discussions in the **Issues** section. This distinction
    between general discussions and specific issues is essential for maintaining an
    efficient workflow and aligning with DevOps practices, which emphasize streamlined
    processes and clear communication.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，通过为广泛的讨论提供专门的平台，GitHub Discussions 在多方面促进了协作的顺利进行。它不仅确保了宝贵的见解和想法得到共享和保存，还避免了在**Issues**部分中技术讨论的稀释。这种将一般讨论和特定问题区分开的做法对于维持高效的工作流程并与
    DevOps 实践保持一致至关重要，后者强调简化的流程和清晰的沟通。
- en: Therefore, GitHub Discussions is more than a mere addition to the GitHub ecosystem;
    it is an integral component that enhances the overall functionality and effectiveness
    of project management on the platform. It aids in keeping GitHub issues clean
    and focused while offering a robust environment for broader, community-driven
    conversations, thereby smoothing collaboration and driving projects toward success.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，GitHub Discussions 不仅仅是 GitHub 生态系统中的一个附加功能；它是一个增强项目管理整体功能和有效性的核心组成部分。它有助于保持
    GitHub 问题的简洁和专注，同时为更广泛的社区驱动对话提供了一个强大的环境，从而促进协作并推动项目成功。
- en: GitHub repository excellence
  id: totrans-420
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub 仓库卓越性
- en: There are many configurations in GitHub repositories that can promote collaboration.
    These settings can reduce the need to fear failure and make the review process
    more standardized. We will not cover all of them here, but some of the major ones
    are particularly important.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 仓库中有许多配置可以促进协作。这些设置可以减少对失败的恐惧，并使审查过程更加规范化。我们不会在这里涵盖所有配置，但其中一些主要设置尤其重要。
- en: Repository rules – Streamlining workflow and ensuring code quality
  id: totrans-422
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仓库规则 – 简化工作流程并确保代码质量
- en: Branch rules are important for managing a repository in a way that strikes a
    balance between security and collaboration. While GitHub allows setting permissions
    for the repository or specific functions, it does not offer code-based permissions.
    Relying solely on write permissions can restrict participation and hinder open
    communication. Branch rules allow repository administrators to enforce specific
    policies on branches, particularly critical ones such as the main or master branches.
    These policies include requirements for pull request reviews, status checks, and
    restrictions on who can push to the branch. By setting up these rules, teams can
    ensure that the code merged into important branches meets predetermined quality
    standards and that the process aligns with the team’s workflow.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 分支规则对于以平衡安全性和协作的方式管理仓库至关重要。虽然 GitHub 允许为仓库或特定功能设置权限，但并未提供基于代码的权限。仅依赖写权限可能会限制参与并阻碍开放沟通。分支规则允许仓库管理员对分支执行特定政策，尤其是对于主分支或主分支等关键分支。这些政策包括拉取请求审查要求、状态检查和对谁可以推送到该分支的限制。通过设置这些规则，团队可以确保合并到重要分支的代码符合预定的质量标准，并且流程与团队的工作流程保持一致。
- en: 'The ruleset allows for a variety of settings. They can be applied only to specific
    branches, or administrators can be authorized to bypass them:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 规则集允许多种设置。这些设置可以仅应用于特定分支，或者管理员可以授权绕过这些规则：
- en: '![Figure 4.65 – Setting up branch rules in GitHub](img/B21203_04_065.jpg)'
  id: totrans-425
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.65 – 在 GitHub 中设置分支规则](img/B21203_04_065.jpg)'
- en: Figure 4.65 – Setting up branch rules in GitHub
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.65 – 在 GitHub 中设置分支规则
- en: 'One of the primary benefits of branch rules is the enforcement of code review.
    By requiring that pull requests receive a certain number of approvals before merging,
    teams can ensure that every change is scrutinized and validated. This peer review
    process not only improves code quality but also fosters knowledge sharing and
    collaboration among team members:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 分支规则的主要好处之一是强制执行代码审查。通过要求拉取请求在合并之前获得一定数量的批准，团队可以确保每个变更都经过审查和验证。这个同行审查过程不仅提高了代码质量，还促进了团队成员之间的知识共享和协作：
- en: '![Figure 4.66 – Code review requirements in branch rules](img/B21203_04_066.jpg)'
  id: totrans-428
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.66 – 分支规则中的代码审查要求](img/B21203_04_066.jpg)'
- en: Figure 4.66 – Code review requirements in branch rules
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.66 – 分支规则中的代码审查要求
- en: 'Status checks are another critical part of branch rules. These checks can include
    automated tests, code linter results, or any other type of automated process that
    verifies the quality and functionality of the code. By requiring these checks
    to pass before merging, teams can prevent bugs and issues from making their way
    into the main code base, thus maintaining high standards of code quality:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 状态检查是分支规则中的另一个关键部分。这些检查可以包括自动化测试、代码检查结果或任何其他验证代码质量和功能性的自动化过程。通过要求这些检查在合并之前通过，团队可以防止错误和问题进入主代码库，从而保持高标准的代码质量：
- en: '![Figure 4.67 – Status checks in branch rules](img/B21203_04_067.jpg)'
  id: totrans-431
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.67 – 分支规则中的状态检查](img/B21203_04_067.jpg)'
- en: Figure 4.67 – Status checks in branch rules
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.67 – 分支规则中的状态检查
- en: Branch rules are a fundamental configuration in GitHub for safeguarding code
    quality and enforcing workflow discipline. They enable teams to automate and enforce
    critical aspects of their development process, aligning with the principles of
    DevOps. By utilizing branch rules, teams can ensure that their code base remains
    stable, secure, and consistent, thereby supporting the delivery of high-quality
    software in a collaborative environment. This makes branch rules an essential
    element in modern software development and an invaluable asset in the DevOps toolkit.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 分支规则是GitHub中保护代码质量和执行工作流纪律的基本配置。它们使团队能够自动化和强制执行开发过程中的关键方面，符合DevOps的原则。通过使用分支规则，团队可以确保其代码库保持稳定、安全和一致，从而支持在协作环境中交付高质量的软件。这使得分支规则成为现代软件开发中的一个核心元素，也是DevOps工具包中宝贵的资产。
- en: CODEOWNERS – Streamlined review and ownership
  id: totrans-434
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CODEOWNERS – 精简审查和所有权管理
- en: 'The `CODEOWNERS` file in GitHub is a simple yet powerful tool for automatically
    assigning reviewers to pull requests and clarifying ownership of specific code
    areas. This file, placed in the root, `docs/`, or `.github/` directory of the
    repository, lists individuals or teams alongside file patterns. When changes are
    made to files matching these patterns, the specified code owners are requested
    for review:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub中的`CODEOWNERS`文件是一个简单而强大的工具，用于自动分配拉取请求的审阅者，并明确特定代码区域的所有权。该文件放置在根目录、`docs/`目录或`.github/`目录中，列出个人或团队以及文件模式。当对匹配这些模式的文件进行更改时，会请求指定的代码所有者进行审阅：
- en: '![Figure 4.68 – Example of a CODEOWNERS file](img/B21203_04_068.jpg)'
  id: totrans-436
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.68 – CODEOWNERS 文件示例](img/B21203_04_068.jpg)'
- en: Figure 4.68 – Example of a CODEOWNERS file
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.68 – CODEOWNERS 文件示例
- en: 'The benefits of using a `CODEOWNERS` file include the following:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`CODEOWNERS`文件的好处包括：
- en: '**Automated reviewer assignment**: Streamlines the pull request process by
    automatically assigning the right reviewers, ensuring that changes are checked
    by the appropriate experts'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化审阅者分配**：通过自动分配合适的审阅者来简化拉取请求流程，确保变更由相关领域的专家进行审查'
- en: '**Clear ownership**: Clarifies who is responsible for specific parts of the
    code base, aiding in quicker decision-making and more efficient maintenance'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**明确所有权**：明确谁负责代码库的特定部分，有助于更快的决策和更高效的维护'
- en: This aspect of `CODEOWNERS` is particularly important as it directly relates
    to deployment safety. In environments where CI/CD is the norm, ensuring that only
    well-reviewed and approved code is deployed is critical. This adds a layer of
    security and efficiency to the deployment process, embodying the preventive and
    proactive principles central to effective DevOps practices.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '`CODEOWNERS` 这一部分特别重要，因为它直接关系到部署安全。在CI/CD是常态的环境中，确保只有经过充分审查和批准的代码被部署至关重要。这为部署过程增加了一层安全性和效率，体现了有效的DevOps实践中的预防性和主动性原则。'
- en: Issue and pull request templates
  id: totrans-442
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题和拉取请求模板
- en: 'Templates in GitHub enhance collaboration and maintain consistency across various
    aspects of project management:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub中的模板增强了协作并保持项目管理各个方面的一致性：
- en: '![Figure 4.69 – Issue template menu](img/B21203_04_069.jpg)'
  id: totrans-444
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.69 – 问题模板菜单](img/B21203_04_069.jpg)'
- en: Figure 4.69 – Issue template menu
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.69 – 问题模板菜单
- en: 'Issue templates guide contributors in creating detailed and structured issue
    reports. By providing specific templates for different types of issues (bug reports,
    feature requests, and so on), you ensure that all necessary information is included,
    facilitating easier understanding and quicker resolution:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 问题模板帮助贡献者创建详细且结构化的问题报告。通过为不同类型的问题（如漏洞报告、功能请求等）提供特定模板，可以确保所有必要的信息都被包含在内，从而促进更易理解和更快的解决：
- en: '![Figure 4.70 – Example of an issue template](img/B21203_04_070.jpg)'
  id: totrans-447
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.70 – 问题模板示例](img/B21203_04_070.jpg)'
- en: Figure 4.70 – Example of an issue template
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.70 – 问题模板示例
- en: Pull request templates ensure that every pull request adheres to the project’s
    standards and requirements. These templates typically include checklists, sections
    for describing changes, referencing relevant issues, and any additional notes.
    This standardization simplifies the review process and enhances the quality of
    contributions.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取请求模板确保每个拉取请求都符合项目的标准和要求。这些模板通常包括检查清单、描述变更的部分、引用相关问题和任何附加备注。通过标准化，简化了审查过程并提高了贡献的质量。
- en: Each of these components plays a vital role in shaping a well-organized, accessible,
    and contributor-friendly GitHub repository. By implementing these standard base
    documentations and templates, you lay down a strong foundation for collaboration
    and project management, resonating with the best practices in DevOps and open
    source culture.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件中的每一个都在构建一个井然有序、可访问且对贡献者友好的GitHub仓库中发挥着至关重要的作用。通过实施这些标准的基础文档和模板，你为协作和项目管理奠定了坚实的基础，与DevOps和开源文化中的最佳实践相呼应。
- en: Summary
  id: totrans-451
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have gained valuable insights into fundamental aspects
    of collaborating on GitHub, setting a strong foundation for DevOps practices.
    While we have explored various topics around Git, GitHub, and DevOps, this chapter
    has specifically focused on how to effectively use GitHub for collaboration, a
    crucial skill in the world of DevOps.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你已经获得了关于在GitHub上协作的基本知识，为DevOps实践打下了坚实的基础。虽然我们已经探讨了与Git、GitHub和DevOps相关的各种主题，但本章特别集中在如何有效使用GitHub进行协作，这是DevOps世界中的一项关键技能。
- en: This knowledge is not just theoretical but highly practical, setting the stage
    for the next phase of our journey—applying these Git techniques and GitHub skills
    in the actual DevOps release process. As we transition to the next chapter, we
    will build upon this foundation, diving deeper into how these skills and practices
    are directly applied and leveraged in DevOps workflows, ultimately enhancing the
    efficiency and effectiveness of the software development and deployment process.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 这些知识不仅是理论性的，而且具有很高的实用性，为我们旅程的下一阶段奠定了基础——在实际的DevOps发布过程中应用这些Git技巧和GitHub技能。当我们过渡到下一章时，我们将基于这个基础，深入探讨这些技能和实践如何在DevOps工作流中直接应用和利用，最终提升软件开发和部署过程的效率与效果。
- en: Ready to embark on this next phase? Let’s move forward to the next chapter,
    where we will see these principles in action, witnessing the transformative impact
    of Git and GitHub in the realm of DevOps.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好开始下一阶段了吗？让我们进入下一章，在这里我们将看到这些原则的实际应用，见证Git和GitHub在DevOps领域的变革性影响。
