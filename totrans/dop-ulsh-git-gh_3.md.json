["```\n# Initialize a new repository\n$ mkdir try-fast-forward-merge\n$ cd try-fast-forward-merge\n$ git init\n# Add and commit initial README.md to master\n$ echo \"# My Project\" > README.md\n$ git add README.md\n$ git commit -m \"Initial commit on master\"\n# Create and switch to a new branch 'add-description'\n$ git checkout -b add-description\n# Make changes to add a description, add and commit changes\n$ echo \"This project is an example of how to use Git.\" >> README.md\n$ git add README.md\n$ git commit -m \"Add project description to README.md\"\n```", "```\n# Switch back to 'main' and perform a Fast-Forward merge\n$ git checkout main\n$ git merge add-description\n# View the linear history\n$ git log --graph --oneline\n* 26d90bf (HEAD -> main, add-description) Add project description to README.md\n* 37ecd54 Add project description to README.md\n* a1164b9 Initial commit on master\n```", "```\n# Initialize a new repository\n$ mkdir try-no-fast-forward-merge\n$ cd try-no-fast-forward-merge\n$ git init\n# Add and commit initial README.md to master\n$ echo \"# My Project\" > README.md\n$ git add README.md\n$ git commit -m \"Initial commit on main\"\n# Create and switch to a new branch 'add-feature'\n$ git checkout -b add-feature\n# Make changes, add and commit them\n$ echo \"Adding a new feature...\" >> README.md\n$ git add README.md\n$ git commit -m \"Implement a new feature\"\n```", "```\n$ git checkout main\n$ git merge --no-ff add-feature\n```", "```\ngit merge branch 'add-feature'\n```", "```\n# View the history\n$ git log --graph --oneline\n*   f58977f (HEAD -> main) Merge branch 'add-feature'\n|\\\n| * a48c0a9 (add-feature) Implement new feature\n|/\n* fe93feb Initial commit on main\n```", "```\n# Initialize a new repository\n$ mkdir try-squash-merge\n$ cd try-squash-merge\n$ git init\n# Add and commit initial README.md to main\n$ echo \"# My Project\" > README.md\n$ git add README.md\n$ git commit -m \"Initial commit on main\"\n# Create and switch to a new branch 'add-multiple-files\n$ git checkout -b add-basic-files\n# Make some changes, add and commit them\n$ echo \"# HOW TO CONTRIBUTE\" >> CONTRIBUTING.md\n$ git add CONTRIBUTING.md\n$ git commit -m \"Add CONTRIBUTING.md\"\n$ echo \"# LICENSE\" >> LICENSE.txt\n$ git add LICENSE.txt\n$ git commit -m \"Add LICENSE.txt\"\n```", "```\n# Switch back to 'main' and perform a squash merge\n$ git checkout main\n$ git merge --squash add-basic-files\n```", "```\n$ git add .\n$ git commit -m \"Add repository standard docs\"\n$ git log --graph --oneline\n* 6eb6df3 (HEAD -> main) Add repository standard docs\n* ffc2ed5 Add CONTRIBUTING.md\n* 2c5ad11 Initial commit on main\n```", "```\n# Initialize a new repository\n$ mkdir try-git-rebase\n$ cd try-git-rebase\n$ git init\n# Add and commit initial README.md to main\n$ echo \"# My Rebase Project\" > README.md\n$ git add README.md\n$ git commit -m \"Initial commit on main\"\n# Create and switch to a new branch 'new-feature'\n$ git checkout -b new-feature\n# Make some changes, add and commit them\n$ echo \"This is a new feature.\" >> NewFeature.md\n$ git add NewFeature.md\n$ git commit -m \"Add new feature\"\n```", "```\n# Switch back to 'main' and add new commits\n$ git checkout main\n$ echo \"Updates to the project.\" >> Updates.md\n$ git add Updates.md\n$ git commit -m \"Update main\"\n```", "```\n# Switch to 'new-feature' and rebase onto main\ngit checkout new-feature\ngit rebase main\n```", "```\n$ git log --graph --online\n* 43ea59e (HEAD -> new-feature) Add new feature\n* 16e1878 (main) Update main\n* 3021494 Initial commit on main\n```", "```\n# Switch to 'main' and perform fast-forward-merge\n$ git checkout main\n$ git merge new-feature\n```", "```\n# Initialize a new repository\n$ mkdir try-cherry-pick\n$ cd try-cherry-pick\n$ git init\n# Add and commit initial README.md to main\n$ echo \"# My Project\" > README.md\n$ git add README.md\n$ git commit -m \"Initial commit\"\n# Create and switch to a new branch 'add-base-documents'\n$ git checkout -b add-base-documents\n# Make changes and commit\n# Add CONTRIBUTING.md\n$ echo \"# CONTRIBUTING\" >> CONTRIBUTING.md\n$ git add CONTRIBUTING.md\n$ git commit -m \"Add CONTRIBUTING.md\"\n# Add LICENSE.txt\n$ echo \"LICENSE\" >> LICENSE.txt\n$ git add LICENSE.txt\n$ git commit -m \"Add LICENSE.txt\"\n# Take a look at the 'add-base-documents' branch log\n$ git log add-base-documents --graph --oneline\n* 02ee2b4 (HEAD -> add-base-documents) Add LICENSE.txt\n* a80e8ad Add CONTRIBUTING.md\n* cfb060a (main) Initial commit\n```", "```\n# Now switch back to the 'main' branch and cherry-pick the commit\n$ git checkout main\n$ git cherry-pick a80e8ad\n[main 9a36741] Add CONTRIBUTING.md\nDate: Sun Oct 29 16:04:56 2023 +0900\n1 file changed, 1 insertion(+)\ncreate mode 100644 CONTRIBUTING.md\n# Let's check the 'main' branch log\n$ git log --graph --oneline\n* 9a36741 (HEAD -> main) Add CONTRIBUTING.md\n* cfb060a Initial commit\n```", "```\n    <<<<<<< HEAD\n    Someone's change is here\n    =======\n    Your change is here\n    >>>>>>> branch-you-want-to-merge\n    ```", "```\n    checkout --theirs: This command will retain the files from the merged branch, discarding the ones in your current branch:\n\n    ```", "```\n\n    ```", "```\n$ git diff feature-branch..main\n```", "```\n$ git merge --no-commit --no-ff feature-branch\n$ git diff --cached\n```", "```\n$ git merge --abort\n```", "```\n    # For example, if you chose vimdiff, you would run:\n    $ git config --global merge.tool vimdiff\n    $ git mergetool\n    ```", "```\n    git reset --soft command:\n    ```", "```\n    git reset --mixed command:\n    ```", "```\n    git reset --hard command:\n    ```", "```\n$ git revert <commit_hash>\n```", "```\n    -n or --no-commit flags:\n\n    ```", "```\n\n    This will apply the revert changes to your working directory but will not commit them. You can then make further changes and commit manually.\n    ```", "```\n$ git checkout <branch_name>\n```", "```\n$ git checkout -- <file_name>\n```", "```\n$ git checkout <branch_name> -- <file_name>\n```", "```\n# Remove untracked files and directories\n$ git clean -fd\n```", "```\n# Stash changes with a description\n$ git stash save \"WIP: New Feature\"\n# Reapply the stashed changes\n$ git stash apply stash@{0}\n```", "```\n# Ignore all log files\n*.log\n# Ignore personal config files\nconfig/personal/\n```", "```\n$ git blame file.txt\n```", "```\n$ git blame -L 5,10 README.md\n$ git blame -L 5,+5 README.md\n```", "```\n$ git bisect start\n$ git bisect bad   # If the current version is bad\n$ git bisect good <Last known good version commit hash>\n```", "```\n$ git bisect good # or\n$ git bisect bad\n```", "```\n# Exit bisect mode and return to your branch\n$ git bisect reset\n```", "```\n$ git tag -a v1.0 -m \"Initial stable release\"\n```", "```\n$ git tag v2.4.4 32de0b2\n```"]