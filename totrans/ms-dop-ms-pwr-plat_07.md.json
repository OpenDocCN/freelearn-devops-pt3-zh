["```\n    <st c=\"31896\">git clone https://github.com/microsoft/PowerApps-Samples</st>\n    ```", "```\n    <st c=\"32015\">codeql.exe pack download codeql/javascript-queries --dir ./codeql-pack/javascript</st>\n    ```", "```\n    <st c=\"32356\">codeql-pack</st> and export the results in a CSV file:\n\n    ```", "```\n\n    ```", "```\n    <st c=\"32900\">codeql github upload-results</st> to upload our SARIF file to one of our GitHub repositories (we cannot upload back the results to the original repository due to lack of privileges). We need to create a PAT token that grants us access to the repo (<st c=\"33143\">security_event</st>):\n\n    ```", "```\n\n    <st c=\"33429\">We also need to have a commit hash ID to which we upload the</st> <st c=\"33491\">SARIF result.</st>\n    ```", "```\n codeql.exe pack download codeql/csharp-queries --dir ./codeql-pack/csharp\ncodeql.exe database create --language=csharp --source-root . codeql-database <st c=\"33993\">--command \"dotnet build .\\dataverse\\DiscoveryService\\DiscoveryService.sln\"</st> --overwrite\ncodeql.exe database analyze .\\codeql-database .\\codeql-pack\\csharp\\codeql\\csharp-queries\\0.8.12\\codeql-suites\\csharp-code-scanning.qls --format=csv --output=csharp-results.csv\n```", "```\n     trigger:\n    - none\n    pool:\n      vmImage: ubuntu-latest\n    steps: <st c=\"37748\">- task: PowerPlatformToolInstaller@2</st>\n     <st c=\"37784\">inputs:</st>\n     <st c=\"37792\">DefaultVersion: true</st>\n    <st c=\"37813\">- task: AdvancedSecurity-Codeql-Init@1</st>\n     <st c=\"37852\">inputs:</st>\n     <st c=\"37860\">languages: 'javascript'</st>\n     <st c=\"37884\">querysuite: 'code-scanning'</st>\n    <st c=\"37912\">- task: AdvancedSecurity-Codeql-Analyze@1</st>\n     <st c=\"37954\">inputs:</st>\n     <st c=\"37962\">WaitForProcessing: true</st>\n    ```", "```\n name: \"CodeQL\"\non:\n  workflow_dispatch:\njobs:\n  analyze:\n    name: Analyze javascript\n    runs-on: ubuntu-latest\n    timeout-minutes: 120\n    permissions:\n      # required for all workflows\n      security-events: write\n      # only required for workflows in private repositories\n      actions: read\n      contents: read\n    steps: <st c=\"39835\">- name: Checkout repository</st>\n <st c=\"39862\">uses: actions/checkout@v4</st>\n <st c=\"39888\">- name: Initialize CodeQL</st>\n <st c=\"39914\">uses: github/codeql-action/init@v3</st>\n <st c=\"39949\">with:</st>\n <st c=\"39955\">languages: javascript-typescript</st>\n <st c=\"39988\">build-mode: none</st>\n <st c=\"40005\">- name: Perform CodeQL Analysis</st>\n <st c=\"40037\">uses: github/codeql-action/analyze@v3</st>\n <st c=\"40075\">with:</st>\n <st c=\"40081\">category: \"/language:javascript-typescript\"</st>\n```", "```\n    <st c=\"41833\">pac solution check</st> call on that blob using <st c=\"41944\">Microsoft.PowerApps.Checker.PowerShell</st>, and respectively the <st c=\"42005\">Get-PowerAppsCheckerRulesets</st> cmdlet for fetching the pre-built rulesets and the <st c=\"42085\">Invoke-PowerAppsChecker</st> cmdlet for submitting the analysis job to the Power Platform backbone. However, these cmdlets are in the pre-release version and they might change.\n    ```", "```\n trigger:\n- none\npool:\n  vmImage: ubuntu-latest\nvariables:\n solutionName: \"PacktCopilotSolution\"\nsteps:\n- task: PowerPlatformToolInstaller@2\n  inputs:\n    DefaultVersion: true\n- task: PowerPlatformPackSolution@2\n  inputs:\n    SolutionSourceFolder: '$(System.DefaultWorkingDirectory)/src/$(solutionName)'\n    SolutionOutputFile: '$(Build.ArtifactStagingDirectory)/Solution/$(solutionName).zip'\n    SolutionType: 'Unmanaged' <st c=\"43915\">- task: PowerPlatformChecker@2</st>\n <st c=\"43945\">inputs:</st>\n <st c=\"43953\">authenticationType: 'PowerPlatformSPN'</st>\n <st c=\"43992\">PowerPlatformSPN: 'dev-US_XXX_Y'</st>\n <st c=\"44025\">FilesToAnalyze: '$(Build.ArtifactStagingDirectory)/Solution/$(solutionName).zip'</st>\n <st c=\"44106\">RuleSet: '0ad12346-e108-40b8-a956-9a8f95ea18c9'</st>\n<st c=\"44328\">PowerPlatformChecker@2</st> task to perform the solution check. The <st c=\"44391\">RuleSet</st> GUID is the solution checker ruleset. There is only one other and that is AppSource certification for submitting solutions for Microsoft AppSource. We need to define a service connection, as we did in *<st c=\"44600\">Chapter 6</st>*, to connect to an environment because the <st c=\"44652\">AppChecker</st> service job executes solution validations in environments. Although we reference here a local unmanaged solution, that solution is uploaded to the environment before the analysis. The results are not stored in the environment but exported as a SARIF file. The build task also publishes the SARIF result to the artifacts of pipeline results.\n\t\t\t<st c=\"45003\">In the case of GitHub, we can use the following workflow to achieve the same result (see</st> `<st c=\"45093\">.github/workflows/solution-checker.yml</st>` <st c=\"45131\">in the</st> `<st c=\"45139\">Chapter07</st>` <st c=\"45148\">folder of the</st> <st c=\"45163\">GitHub repo):</st>\n\n```", "```\n     #!/bin/bash\n    set -e\n    # Variables\n    SERVICE_PRINCIPAL_APP_ID=\"<your-service-principal-app-id>\"\n    SERVICE_PRINCIPAL_SECRET=\"<your-service-principal-password>\"\n    TENANT_ID=\"<your-tenant-id>\"\n    GROUP_NAME=\"<your-group-name>\"\n    # Login as the service principal <st c=\"51061\">az login --service-principal -u $SERVICE_PRINCIPAL_APP_ID -p $SERVICE_PRINCIPAL_SECRET --tenant $TENANT_ID</st> # Create the AAD group <st c=\"51191\">az ad group create --display-name $GROUP_NAME --mail-nickname $GROUP_NAME</st> # get the user object id <st c=\"51290\">AADObjectID=$(az ad user show \\</st>\n     <st c=\"51321\">--id $userPrincipalName \\</st>\n     <st c=\"51347\">--query id \\</st>\n     <st c=\"51360\">--output tsv)</st> # add a member to the group <st c=\"51727\">pac admin create</st> commands to create Power Platform developer environments. To create a sandbox or a production environment, we can use the following script (see <st c=\"51888\">create-powerplatform-env.sh</st> in the <st c=\"51923\">Chapter07</st> folder of the GitHub repo):\n\n    ```", "```\n\n    ```", "```\n    <st c=\"53424\">AzureKeyVault@2</st> build task.\n    ```", "```\n<st c=\"56144\">echo $(System.AccessToken) | az devops login --organization $(System.CollectionUri)</st>\n<st c=\"56228\">az devops project create --name ${{ parameters.projectName }} --org $(System.CollectionUri)</st>\n<st c=\"56320\">aadAdminGroupId=$(az ad group show --group $(AADGroupForAdmin) --query id -o tsv)</st> echo \"Admin group id: $aadAdminGroupId\" <st c=\"56443\">azureDevopsAdminGroupDescriptor=$(az devops security group list --organization $(System.CollectionUri) --project ${{parameters.projectName}} | jq -r '.graphGroups[] | select(.displayName==\"Project Administrators\") | .descriptor')</st> echo \"Azure DevOps Admin Group Descriptor: $azureDevopsAdminGroupDescriptor\"\n# Add the AAD group to the Administrators groups in Azure DevOps\ncollectionUri=$(System.CollectionUri)\norgnamewithouthttps=${collectionUri//https:\\/\\//} <st c=\"56903\">curl -u :$(System.AccessToken) \\</st>\n <st c=\"56935\">-H \"Content-Type: application/json\" \\</st>\n <st c=\"56973\">-d \"{\\\"originId\\\": \\\"$aadAdminGroupId\\\"}\" \\</st>\n<st c=\"57306\">az devops security group membership add --group-id $azureDevopsAdminGroupId --member-id $aadAdminGroupId --org $(System.CollectionUri)</st> command doesnâ€™t work across projects.\n\n\t\t\t\t1.  <st c=\"57478\">Create a</st> <st c=\"57488\">Git repository:</st>\n\n    <st c=\"57503\">When</st> <st c=\"57509\">creating a new Azure DevOps project, a default Git repository with the name of</st> `<st c=\"57588\">project</st>` <st c=\"57595\">and a default team is created.</st> <st c=\"57627\">To create a repository, we can use the</st> `<st c=\"57666\">az repos create</st>` <st c=\"57681\">command with the appropriate parameters.</st> <st c=\"57723\">We need the following variables in our</st> <st c=\"57762\">Bash script:</st>\n\n    ```", "```\n\n    ```", "```\n    <st c=\"58754\">az repos policy work-item-linking create</st> \\ <st c=\"58798\">....--branch \"refs/heads/main\" \\</st>\n     <st c=\"58830\">--enabled true --organization $organization --project $project \\</st>\n     <st c=\"58895\">--repository $repositoryId --blocking true --detect false</st>\n    ```", "```\n\n    \t\t\t\t2.  <st c=\"58953\">Create service connections for Power</st> <st c=\"58991\">Platform environments:</st>\n\n    <st c=\"59013\">We did this exercise in</st> [*<st c=\"59038\">Chapter 6</st>*](B22208_06.xhtml#_idTextAnchor103)<st c=\"59047\">, in the</st> *<st c=\"59056\">Branches and</st>* *<st c=\"59069\">environments</st>* <st c=\"59081\">subsection</st><st c=\"59092\">.</st>\n\n\t\t\t\t3.  <st c=\"59093\">Create CI/CD pipelines on</st> <st c=\"59120\">pipeline templates:</st>\n\n    <st c=\"59139\">To create an Azure pipeline that uses a pipeline template from a different Git repository in a different Azure DevOps project, we can use the</st> `<st c=\"59282\">resources</st>` <st c=\"59291\">keyword in our pipeline YAML file to specify the repository containing the template.</st> <st c=\"59377\">Then, we can reference the template in our pipeline.</st> <st c=\"59430\">Here is an example for this (see</st> `<st c=\"59463\">.pipelines/azure-pipelines-using-template.yml</st>` <st c=\"59508\">in the</st> `<st c=\"59516\">Chapter07</st>` <st c=\"59525\">folder of the</st> <st c=\"59540\">GitHub repo):</st>\n\n    ```", "```\n\n\t\t\t<st c=\"61357\">At the end of these steps, we have the new Azure DevOps project and the new Git repository with pipelines in place that use the service connections to connect to the Power Platform</st> <st c=\"61539\">environments and leverage pipeline templates located in a centralized repository governed by Microsoft</st> <st c=\"61642\">Entra ID.</st>\n\t\t\t<st c=\"61651\">We can realize the same approach in GitHub.</st> <st c=\"61696\">The only difference here is that we need to configure our GitHub organization to use Microsoft Entra ID through the</st> **<st c=\"61812\">SAML protocol</st>**<st c=\"61825\">. GitHub</st> <st c=\"61833\">can provision enterprise accounts with the help of</st> <st c=\"61884\">a</st> **<st c=\"61887\">system for cross-domain identity management</st>** <st c=\"61930\">(</st>**<st c=\"61932\">SCIM</st>**<st c=\"61936\">) configuration.</st> <st c=\"61954\">This means we can add Microsoft Entra ID accounts to GitHub Enterprise organizations and, respectively, repositories, and those users can</st> <st c=\"62092\">sign in.</st>\n\t\t\t<st c=\"62100\">Microsoft Entra ID</st>\n\t\t\t<st c=\"62119\">Regarding</st> <st c=\"62130\">the DevOps tools we use, the main security takeaway is that we need to embrace Microsoft Entra ID accounts and, respectively, groups to manage access to projects, repositories, pipelines, work items, workflows, and so on.</st> <st c=\"62352\">From the administration perspective, we want to manage only memberships of Entra ID groups to grant or remove access to DevOps services and we do not allow individuals account-level access to</st> <st c=\"62544\">our services.</st>\n\t\t\t<st c=\"62557\">Of course, there are many other tasks that we can introduce in our development life cycle stages.</st> <st c=\"62656\">One of the most crucial activities is Inventory Management as discussed in the</st> *<st c=\"62735\">Setup</st>* <st c=\"62740\">section of this chapter.</st> <st c=\"62766\">Inventory Management can be realized within Power Platform on Dataverse as well.</st> <st c=\"62847\">The setup of new development projects can be managed with the help of Power Automate cloud flows that execute those previously discussed Azure DevOps pipelines behind the scenes.</st> <st c=\"63026\">The Inventory Management repository can store the metadata about our projects, such as who the owners are, where the source code/solution packages are located, which Entra ID groups are created, which Power Platform environments are spun up, and</st> <st c=\"63272\">so on.</st>\n\t\t\t<st c=\"63278\">However, as illustrated in the following figure, there are numerous additional tasks, including those activities we discussed at the beginning of the chapter in conjunction with custom development projects, that occur at different stages of the SDLC of Power</st> <st c=\"63538\">Platform solutions:</st>\n\t\t\t![Figure 7.9 â€“ DevSecOps activities in Power Platform solutions](img/B22208_07_9.jpg)\n\n\t\t\t<st c=\"64669\">Figure 7.9 â€“ DevSecOps activities in Power Platform solutions</st>\n\t\t\t<st c=\"64730\">For instance, we</st> <st c=\"64748\">can introduce more security analysis tasks in our pipelines, such as using GHAS or CodeQL for SAST, we can create our own build farms for our dedicated builds, apply code signing for our binary components or even for our Power Apps native mobile apps (wrap the app), perform DAST, execute test automation during CI/CD steps, and also set up advanced monitoring to read and analyze the DevOps audit logs or even the application logs.</st> <st c=\"65181\">This is only the tip of the iceberg since projects and organizations are continuously improving their DevSecOps practices and, with that, their security postures</st> <st c=\"65343\">as well.</st>\n\t\t\t<st c=\"65351\">We now delve into our final topic, the security of our established</st> <st c=\"65419\">DevOps processes.</st>\n\t\t\t<st c=\"65436\">Security of DevOps processes</st>\n\t\t\t<st c=\"65465\">Creating DevSecOps processes</st> <st c=\"65495\">and setting up whole development projects fully automated from scratch is necessary to infuse security tasks in every phase and stage of the development life cycle.</st> <st c=\"65660\">On the other hand, we need to consider our established DevSecOps processes for security vulnerabilities and the attack surface as well.</st> <st c=\"65796\">In the previous sections, we have seen that with the help of Microsoft Entra ID groups, we can control and guardrail access to our running projects, but it is only one of the first steps to create more secure methods in those processes.</st> <st c=\"66033\">We need to continuously monitor the activities of our engineers and DevOps teams, such as accessing repositories and executing workflows/pipelines by logging them to Log Analytics</st> <st c=\"66213\">workspaces.</st> <st c=\"66225\">We can then use threat intelligence tools such as Microsoft Azure Sentinel to discover unusual patterns throughout the application life cycle.</st> <st c=\"66368\">We can also create threat models using Microsoftâ€™s Threat Modeling Tool on our own CI/CD pipelines to play around with security scenarios, such as how to avoid vulnerable code injections through DevOps tools, or how to avoid granting access to a developer in production environments via DevOps pipelines or GitHub workflows from risk and</st> <st c=\"66706\">probability perspectives.</st>\n\t\t\t<st c=\"66731\">Mission-critical workloads operating in highly regulated industries and environments, such as the US government cloud or deployments in the financial sector, require even more guardrails in place.</st> <st c=\"66929\">We can fully isolate Power Platform development tenants from production ones.</st> <st c=\"67007\">The handover between these separate tenants can happen through</st> **<st c=\"67070\">Azure Service Bus</st>** <st c=\"67087\">or</st> <st c=\"67090\">other messaging queue services, as the following</st> <st c=\"67140\">figure shows:</st>\n\t\t\t![Figure 7.10 â€“ Isolated tenants](img/B22208_07_10.jpg)\n\n\t\t\t<st c=\"67188\">Figure 7.10 â€“ Isolated tenants</st>\n\t\t\t<st c=\"67218\">On the development side, Azure pipelines or GitHub workflows build the managed and unmanaged solutions and place them in Azure Blob Storage.</st> <st c=\"67360\">They also queue new messages in the message queue that contain the metadata information about the deployment, such as which solution from which blob container with which version the production side pipelines should deploy to.</st> <st c=\"67586\">They also contain the SAS tokens to access Blob Storage from the production tenant.</st> <st c=\"67670\">On the production side, Power Automate cloud flows pick up the queue message triggered by the Service Bus condition and execute the deployment based on the queue message to the targeted environments.</st> <st c=\"67870\">With that, there is no direct, synchronous connection between development and production tenants.</st> <st c=\"67968\">We</st> <st c=\"67971\">apply</st> <st c=\"67977\">the</st> **<st c=\"67981\">asynchronous design pattern</st>** <st c=\"68008\">here (pulling model) to terminate the original synchronous deployment call to our</st> <st c=\"68091\">production environment.</st>\n\t\t\t<st c=\"68114\">Summary</st>\n\t\t\t<st c=\"68122\">In this chapter, we explored the DevSecOps process, delving into its evolution, the concept of a shift-left mindset, and the integration of security tasks within our SDLC.</st> <st c=\"68295\">We then acquainted ourselves with the security architecture and guiding principles underpinning Power Platform.</st> <st c=\"68407\">Our journey continued with an examination of GHAS, leveraging CodeQL to conduct SAST.</st> <st c=\"68493\">We also investigated the solution checker, utilizing Azure DevOps build tasks and GitHub Actions to perform the platformâ€™s built-in analysis.</st> <st c=\"68635\">Our deep dive extended into the realms of the Azure CLI, Azure DevOps scripts, pipelines, and pipeline templates, enabling us to construct an Azure DevOps project embedded with security from the ground up in a fully automated manner.</st> <st c=\"68869\">Lastly, we dedicated time to understanding the security threats that could potentially compromise our DevOps pipelines or workflows and discussed strategies to mitigate</st> <st c=\"69038\">these risks.</st>\n\t\t\t<st c=\"69050\">In the next chapter, we will craft a tangible solution, applying every aspect of DevOps and ALM through practical,</st> <st c=\"69166\">hands-on walkthroughs.</st>\n\t\t\t<st c=\"69188\">Further reading</st>\n\n\t\t\t\t*   <st c=\"69204\">DevSecOps</st> <st c=\"69215\">controls:</st> [<st c=\"69225\">https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/secure/devsecops-controls</st>](https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/secure/devsecops-controls)\n\t\t\t\t*   **<st c=\"69315\">Security Development Life Cycle</st>**<st c=\"69347\">(</st>**<st c=\"69349\">SDL</st>**<st c=\"69352\">)</st> <st c=\"69355\">Practices:</st> [<st c=\"69366\">https://www.microsoft.com/en-us/securityengineering/sdl/practices</st>](https://www.microsoft.com/en-us/securityengineering/sdl/practices)\n\t\t\t\t*   <st c=\"69431\">Threat</st> <st c=\"69439\">Modeling:</st> [<st c=\"69449\">https://www.microsoft.com/en-us/securityengineering/sdl/threatmodeling</st>](https://www.microsoft.com/en-us/securityengineering/sdl/threatmodeling)\n\t\t\t\t*   <st c=\"69519\">Microsoft threat modeling</st> <st c=\"69546\">tool:</st> [<st c=\"69552\">https://aka.ms/threatmodelingtool</st>](https://aka.ms/threatmodelingtool)\n\t\t\t\t*   <st c=\"69585\">GitHub</st> <st c=\"69593\">Dependabot:</st> [<st c=\"69605\">https://docs.github.com/en/code-security/dependabot</st>](https://docs.github.com/en/code-security/dependabot)\n\t\t\t\t*   <st c=\"69656\">CodeQL:</st> [<st c=\"69665\">https://docs.github.com/en/code-security/code-scanning/introduction-to-code-scanning/about-code-scanning-with-codeql</st>](https://docs.github.com/en/code-security/code-scanning/introduction-to-code-scanning/about-code-scanning-with-codeql)\n\t\t\t\t*   <st c=\"69781\">Security in Power</st> <st c=\"69800\">Platform:</st> [<st c=\"69810\">https://learn.microsoft.com/en-us/power-platform/admin/security/overview</st>](https://learn.microsoft.com/en-us/power-platform/admin/security/overview)\n\t\t\t\t*   <st c=\"69882\">GitHub Advanced Security for Azure</st> <st c=\"69918\">DevOps:</st> [<st c=\"69926\">https://azure.microsoft.com/en-us/products/devops/github-advanced-security</st>](https://azure.microsoft.com/en-us/products/devops/github-advanced-security)\n\t\t\t\t*   <st c=\"70000\">CodeQL CLI</st> <st c=\"70012\">binaries:</st> [<st c=\"70022\">https://github.com/github/codeql-cli-binaries</st>](https://github.com/github/codeql-cli-binaries)\n\t\t\t\t*   <st c=\"70067\">CodeQL query</st> <st c=\"70081\">packs:</st> [<st c=\"70088\">https://github.com/github/codeql</st>](https://github.com/github/codeql)\n\t\t\t\t*   <st c=\"70120\">CodeQL</st> <st c=\"70128\">analysis:</st> [<st c=\"70138\">https://docs.github.com/en/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis</st>](https://docs.github.com/en/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis)\n\t\t\t\t*   <st c=\"70265\">Solution</st> <st c=\"70275\">checker:</st> [<st c=\"70284\">https://learn.microsoft.com/en-us/power-apps/maker/data-platform/use-powerapps-checker</st>](https://learn.microsoft.com/en-us/power-apps/maker/data-platform/use-powerapps-checker)\n\t\t\t\t*   <st c=\"70370\">PAC CLI for solution</st> <st c=\"70392\">checker:</st> [<st c=\"70401\">https://learn.microsoft.com/en-us/power-platform/developer/cli/reference/solution#pac-solution-check</st>](https://learn.microsoft.com/en-us/power-platform/developer/cli/reference/solution#pac-solution-check)\n\t\t\t\t*   <st c=\"70501\">Microsoft.PowerApps.Checker.PowerShell</st> <st c=\"70541\">module:</st> [<st c=\"70549\">https://learn.microsoft.com/en-us/powershell/module/microsoft.powerapps.checker.powershell/invoke-powerappschecker?view=pa-ps-latest</st>](https://learn.microsoft.com/en-us/powershell/module/microsoft.powerapps.checker.powershell/invoke-powerappschecker?view=pa-ps-latest)\n\t\t\t\t*   <st c=\"70681\">System access</st> <st c=\"70696\">token:</st> [<st c=\"70703\">https://learn.microsoft.com/en-us/azure/devops/pipelines/process/access-tokens?view=azure-devops&tabs=yaml</st>](https://learn.microsoft.com/en-us/azure/devops/pipelines/process/access-tokens?view=azure-devops&tabs=yaml)\n\t\t\t\t*   <st c=\"70809\">Work item branch</st> <st c=\"70827\">policy:</st> [<st c=\"70835\">https://learn.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-7.1&tabs=HTTP#work-item-policy</st>](https://learn.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-7.1&tabs=HTTP#work-item-policy)\n\t\t\t\t*   <st c=\"70973\">GitHub enterprise</st> <st c=\"70992\">accounts:</st> [<st c=\"71002\">https://docs.github.com/en/enterprise-cloud@latest/admin/managing-your-enterprise-account/about-enterprise-accounts</st>](mailto:https://docs.github.com/en/enterprise-cloud@latest/admin/managing-your-enterprise-account/about-enterprise-accounts)\n\n```", "```\n\n```"]