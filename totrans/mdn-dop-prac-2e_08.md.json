["```\n$ git clone https://github.com/PacktPublishing/Modern-DevOps-Practices-2e.git \\\n  modern-devops\n$ cd modern-devops/ch8\n```", "```\n$ wget -O- https://apt.releases.hashicorp.com/gpg | \\\n  sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n$ echo \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \\ \nhttps://apt.releases.hashicorp.com $(lsb_release -cs) main\" | \\ \nsudo tee /etc/apt/sources.list.d/hashicorp.list\n$ sudo apt update && sudo apt install terraform\n```", "```\n$ terraform version\nTerraform v1.5.2\n```", "```\n$ cd ~/modern-devops/ch8/terraform-exercise/\n```", "```\n$ curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n```", "```\n$ az --version\nazure-cli                         2.49.0\n```", "```\n$ az login\nTo sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter \nthe code XXXXXXXXX to authenticate:\n[\n  {\n    \"id\": \"00000000-0000-0000-0000-0000000000000\",\n    ...\n  }\n]\n```", "```\n$ export SUBSCRIPTION_ID=\"<SUBSCRIPTION_ID>\"\n$ az account set --subscription=\"$SUBSCRIPTION_ID\"\n```", "```\n$ az ad sp create-for-rbac --role=\"Contributor\" \\\n --scopes=\"/subscriptions/$SUBSCRIPTION_ID\"\nCreating 'Contributor' role assignment under scope '/subscriptions/<SUBSCRIPTION_ID>'\nThe output includes credentials that you must protect. Ensure you do not include these \ncredentials in your code or check the credentials into your source control (for more \ninformation, see https://aka.ms/azadsp-cli):\n{\n  \"appId\": \"00000000-0000-0000-0000-0000000000000\",\n  \"displayName\": \"azure-cli-2023-07-02-09-13-40\",\n  \"password\": \"00000000000.xx-00000000000000000\",\n  \"tenant\": \"00000000-0000-0000-0000-0000000000000\"\n}\n```", "```\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"azurerm\"\n      version = \"=3.55.0\"\n    }\n  }\n}\nprovider \"azurerm\" {\n  subscription_id = var.subscription_id\n  client_id       = var.client_id\n  client_secret   = var.client_secret\n  tenant_id       = var.tenant_id\n  features {}\n}\n```", "```\nvariable \"subscription_id\" {\n  type        = string\n  description = \"The azure subscription id\"\n}\nvariable \"app_id\" {\n  type        = string\n  description = \"The azure service principal appId\"\n}\nvariable \"password\" {\n  type        = string\n  description = \"The azure service principal password\"\n  sensitive   = true\n}\nvariable \"tenant\" {\n  type        = string\n  description = \"The azure tenant id\"\n}\n```", "```\nsubscription_id = \"<SUBSCRIPTION_ID>\"\napp_id          = \"<SERVICE_PRINCIPAL_APP_ID>\"\npassword        = \"<SERVICE_PRINCIPAL_PASSWORD>\"\ntenant          = \"<TENANT_ID>\"\n```", "```\n*.tfvars\n.terraform*\n```", "```\n$ cd ~/modern-devops/ch8/terraform-exercise\n```", "```\n$ terraform init\nInitializing the backend...\nInitializing provider plugins...\n- Finding hashicorp/azurerm versions matching \"3.63.0\"...\n- Installing hashicorp/azurerm v3.63.0...\n- Installed hashicorp/azurerm v3.63.0 (signed by HashiCorp)\nTerraform has created a lock file, .terraform.lock.hcl, to record the provider selections \nit made previously. Include this file in your version control repository so that Terraform \ncan guarantee to make the same selections by default when you run terraform init in the \nfuture.\nTerraform has been successfully initialized!\n```", "```\nresource \"azurerm_resource_group\" \"rg\" {\n  name     = var.rg_name\n  location = var.rg_location\n}\n```", "```\nvariable \"rg_name\" {\n  type        = string\n  description = \"The resource group name\"\n}\nvariable \"rg_location\" {\n  type        = string\n  description = \"The resource group location\"\n}\n```", "```\nrg_name=terraform-exercise\nrg_location=\"West Europe\"\n```", "```\n$ terraform fmt\nterraform.tfvars\nvars.tf\n```", "```\n$ terraform validate\nSuccess! The configuration is valid.\n```", "```\n$ terraform plan\nTerraform used the selected providers to generate the following execution plan. Resource \nactions are indicated with the following symbols:  + create\nTerraform will perform the following actions:\n  # azurerm_resource_group.rg will be created\n  + resource \"azurerm_resource_group\" \"rg\" {\n      + id       = (known after apply)\n      + location = \"westeurope\"\n      + name     = \"terraform-exercise\"\n    }\nPlan: 1 to add, 0 to change, 0 to destroy.\nNote: You didn't use the -out option to save this plan, so Terraform can't guarantee to \ntake exactly these actions if you run terraform apply now.\n```", "```\n$ terraform plan -out rg_terraform_exercise.tfplan\n```", "```\n$ terraform apply \"rg_terraform_exercise.tfplan\"\nazurerm_resource_group.rg: Creating...\nazurerm_resource_group.rg: Creation complete after 2s [id=/subscriptions/id/\nresourceGroups/terraform-exercise]\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\n```", "```\n$ az group list\n...\n    \"id\": \"/subscriptions/id/resourceGroups/terraform-exercise\",\n    \"location\": \"westeurope\",\n    \"name\": \"terraform-exercise\",\n...\n```", "```\n$ terraform taint <resource>\n```", "```\n$ terraform plan -destroy\nTerraform used the selected providers to generate the following execution plan. Resource \nactions are indicated with the following symbols:\n  - destroy\nTerraform will perform the following actions:\n  # azurerm_resource_group.rg will be destroyed\n  - resource \"azurerm_resource_group\" \"rg\" {\n      - id = \"/subscriptions/id/resourceGroups/terraform-exercise\" -> null\n      - location = \"westeurope\" -> null\n      - name = \"terraform-exercise\" -> null\n      - tags = {} -> null\n    }\nPlan: 0 to add, 0 to change, 1 to destroy.\n```", "```\n$ terraform destroy\nTerraform will perform the following actions:\n  # azurerm_resource_group.rg will be destroyed\nDo you really want to destroy all resources?\nTerraform will destroy all your managed infrastructure, as shown above. There is no undo. \nOnly yes will be accepted to confirm.\n  Enter a value:\n```", "```\n  Enter a value: yes\nazurerm_resource_group.rg: Destroying... [id=/subscriptions/id/resourceGroups/terraform-\nexercise]\nazurerm_resource_group.rg: Still destroying... [id=/subscriptions/id/resourceGroups/\nterraform-exercise, 10s elapsed]\nazurerm_resource_group.rg: Destruction complete after 1m20s\n```", "```\n$ cd ~/modern-devops/ch8/terraform-modules/\n```", "```\n.\n├── main.tf\n├── modules\n│   └── resource_group\n│       ├── main.tf\n│       └── vars.tf\n├── terraform.tfvars\n└── vars.tf\n```", "```\nresource \"azurerm_resource_group\" \"rg\" {\n  name     = var.name\n  location = var.location\n}\n```", "```\nvariable \"name\" {\n  type        = string\n  description = \"The resource group name\"\n}\nvariable \"location\" {\n  type        = string\n  description = \"The resource group location\"\n}\n```", "```\nterraform {\n  required_providers {\n    ...\n  }\n}\nprovider \"azurerm\" {\n  ...\n}\nmodule \"rg\" {\n  source  = \"./modules/resource_group\"\n  name     = var.rg_name\n  location = var.rg_location\n}\n```", "```\n$ terraform init\nInitializing the backend...\nInitializing modules...\n- rg in modules/resource_group\nInitializing provider plugins...\n...\nTerraform has been successfully initialized!\n```", "```\n$ terraform plan\nTerraform will perform the following actions:\n  # module.rg.azurerm_resource_group.rg will be created\n  + resource \"azurerm_resource_group\" \"rg\" {\n      + id       = (known after apply)\n      + location = \"westeurope\"\n      + name     = \"terraform-exercise\"\n    }\nPlan: 1 to add, 0 to change, 0 to destroy.\n```", "```\n$ terraform apply\nmodule.rg.azurerm_resource_group.rg: Creating...\nmodule.rg.azurerm_resource_group.rg: Creation complete after 4s [id=/subscriptions/id/\nresourceGroups/terraform-exercise]\n```", "```\n$ terraform destroy\n```", "```\n$ cd ~/modern-devops/ch8/terraform-backend/\n```", "```\n$ az group create --name $RESOURCE_GROUP --location westeurope\n```", "```\n$ az storage account create --resource-group $RESOURCE_GROUP \\\n--name $STORAGE_ACCOUNT_NAME --sku Standard_LRS \\\n--encryption-services BLOB\n```", "```\n$ ACCOUNT_KEY=$(az storage account keys list \\\n--resource-group tfstate --account-name $STORAGE_ACCOUNT_NAME \\\n--query '[0].value' -o tsv)\n```", "```\n$ az storage container create --name $CONTAINER_NAME \\\n--account-name $STORAGE_ACCOUNT_NAME --account-key $ACCOUNT_KEY\n```", "```\n$ echo $STORAGE_ACCOUNT_NAME\ntfstate28099\n```", "```\nterraform {\n  backend \"azurerm\" {\n    resource_group_name   = \"tfstate\"\n    storage_account_name  = \"tfstate28099\"\n    container_name        = \"tfstate\"\n    key                   = \"example.tfstate\"\n  }\n}\n```", "```\n$ terraform init\nInitializing the backend...\nBackend configuration changed!\nTerraform has detected that the configuration specified for the backend has changed. \nTerraform will now check for existing state in the backends.\nSuccessfully configured the backend azurerm! Terraform will automatically use this backend \nunless the backend configuration changes.\n```", "```\n$ terraform plan\nAcquiring state lock. This may take a few moments...\nTerraform will perform the following actions:\n  # azurerm_resource_group.rg will be created\n  + resource \"azurerm_resource_group\" \"rg\" {\n    \t...\n    }\nPlan: 1 to add, 0 to change, 0 to destroy.\n```", "```\n$ terraform apply -auto-approve\nAcquiring state lock. This may take a few moments...\nazurerm_resource_group.rg: Creating...\nazurerm_resource_group.rg: Creation complete after 2s [id=/subscriptions/id/\nresourceGroups/terraform-exercise]\nReleasing state lock. This may take a few moments...\n```", "```\n├── dev\n│   ├── backend.tf\n│   ├── main.tf\n│   ├── terraform.tfvars\n│   └── vars.tf\n├── prod\n│   ├── backend.tf\n│   ├── main.tf\n│   ├── terraform.tfvars\n│   └── vars.tf\n└── test\n    ├── backend.tf\n    ├── main.tf\n    ├── terraform.tfvars\n    └── vars.tf\n```", "```\n├── backend.tf\n├── main.tf\n├── terraform.tfvars\n└── vars.tf\n```", "```\n$ cd ~/modern-devops/ch8/terraform-workspaces/\n```", "```\n...\nresource \"azurerm_resource_group\" \"main\" {\n  name     = \"${var.rg_prefix}-${terraform.workspace}\"\n  location = var.rg_location\n}\nresource \"azurerm_virtual_network\" \"main\" {\n  ...\n}\nresource \"azurerm_subnet\" \"internal\" {\n  ...\n}\nresource \"azurerm_network_interface\" \"main\" {\n...\n}\nresource \"azurerm_virtual_machine\" \"main\" {\n  ...\n}\n...\n```", "```\n$ terraform init\n```", "```\n$ terraform workspace new dev\nCreated and switched to workspace \"dev\"!\n```", "```\n$ terraform plan -out dev.tfplan\nAcquiring state lock. This may take a few moments...\nTerraform will perform the following actions:\n  + resource \"azurerm_network_interface\" \"main\" {\n      ...\n    }\n  + resource \"azurerm_resource_group\" \"main\" {\n      + id       = (known after apply)\n      + location = \"westeurope\"\n      + name     = \"terraform-ws-dev\"\n    }\n  + resource \"azurerm_subnet\" \"internal\" {\n      ...\n    }\n  + resource \"azurerm_virtual_machine\" \"main\" {\n\t...\n    }\n  + resource \"azurerm_virtual_network\" \"main\" {\n\t...\n    }\nPlan: 5 to add, 0 to change, 0 to destroy.\n```", "```\n$ terraform apply \"dev.tfplan\"\nAcquiring state lock. This may take a few moments...\nazurerm_resource_group.main: Creating...\nazurerm_virtual_network.main: Creating...\nazurerm_subnet.internal: Creating...\nazurerm_network_interface.main: Creating...\nazurerm_virtual_machine.main: Creating...\nApply complete! Resources: 5 added, 0 changed, 0 destroyed.\nReleasing state lock. This may take a few moments...\n```", "```\n$ terraform workspace new test\n```", "```\n$ terraform plan -out test.tfplan\n...\n  + resource \"azurerm_resource_group\" \"main\" {\n      + id       = (known after apply)\n      + location = \"westeurope\"\n      + name     = \"terraform-ws-test\"\n    }\n...\n```", "```\n$ terraform apply test.tfplan\n```", "```\n$ az group list | grep name | grep terraform-ws\n    \"name\": \"terraform-ws-dev\",\n    \"name\": \"terraform-ws-test\",\n```", "```\n|-- terraform.tfstate.d\n    |-- dev\n    |   `-- terraform.tfstate\n    `-- test\n        `-- terraform.tfstate\n```", "```\n$ terraform destroy --auto-approve\n```", "```\n$ terraform workspace select dev\nSwitched to workspace \"dev\".\n```", "```\n$ terraform destroy --auto-approve\n```", "```\n$ cd ~/modern-devops/ch8/terraform-workspaces/\n```", "```\noutput \"vm_ip_addr\" {\n  value = azurerm_network_interface.main.private_ip_address\n}\n```", "```\n$ terraform apply --auto-approve\n...\nOutputs:\nvm_ip_addr = \"10.0.2.4\"\n```", "```\n$ terraform output\nvm_ip_addr = \"10.0.2.4\"\n```", "```\n$ terraform show\n```", "```\n$ terraform state list\nazurerm_network_interface.main\nazurerm_resource_group.main\nazurerm_subnet.internal\nazurerm_virtual_machine.main\nazurerm_virtual_network.main\n```", "```\n$ terraform state rm azurerm_virtual_machine.main\nAcquiring state lock. This may take a few moments...\nRemoved azurerm_virtual_machine.main\nSuccessfully removed 1 resource instance(s).\nReleasing state lock. This may take a few moments...\n```", "```\nterraform import <resource> <resource_id>\n```", "```\n$ terraform import azurerm_virtual_machine.main \\\n\"/subscriptions/<SUBSCRIPTION_ID>/resourceGroups\\\n/terraform-ws-dev/providers/Microsoft.Compute/virtualMachines/httpd\"\nAcquiring state lock. This may take a few moments...\nazurerm_virtual_machine.main: Importing from ID \"/subscriptions/id/resourceGroups/\nterraform-ws-dev/providers/Microsoft.Compute/virtualMachines/httpd\"...\nazurerm_virtual_machine.main: Import prepared!\n  Prepared azurerm_virtual_machine for import\nazurerm_virtual_machine.main: Refreshing state... [id=/subscriptions/1de491b5-f572-\n459b-a568-c4a35d5ac7a9/resourceGroups/terraform-ws-dev/providers/Microsoft.Compute/\nvirtualMachines/httpd]\nImport successful!\n```", "```\n$ terraform state list | grep azurerm_virtual_machine\nazurerm_virtual_machine.main\n```", "```\n$ terraform console\nAcquiring state lock. This may take a few moments...\n> azurerm_virtual_machine.main.resource_group_name\n\"terraform-ws-dev\"\n> azurerm_virtual_machine.main.id\n\"/subscriptions/id/resourceGroups/terraform-ws-dev/providers/Microsoft.Compute/\nvirtualMachines/httpd\"\n> exit\nReleasing state lock. This may take a few moments...\n```", "```\n$ terraform graph > vm.dot\n```", "```\n$ sudo apt install graphviz -y\n```", "```\n$ cat vm.dot | dot -T png -o vm.png\n```", "```\n$ terraform destroy --auto-approve\n```"]