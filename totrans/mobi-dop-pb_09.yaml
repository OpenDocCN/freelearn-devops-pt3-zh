- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Mobile DevOps Best Practices
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动 DevOps 最佳实践
- en: As discussed in the previous chapters, it is essential to use the mobile DevOps
    process in order to develop and release quality mobile applications frequently
    and quickly to your customers. It is possible to speed up the development and
    distribution of mobile applications by combining the best practices of developers,
    test engineers, release experts, and other stakeholders. As a result of the shorter
    delivery times, quality and user experience will also be improved.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前几章所讨论的那样，采用移动 DevOps 流程对于频繁且快速地开发和发布高质量的移动应用至关重要。通过结合开发者、测试工程师、发布专家和其他相关人员的最佳实践，可以加快移动应用的开发和分发。因此，较短的交付时间也将提高质量和用户体验。
- en: Throughout this chapter, we will explore a range of essential topics that will
    empower mobile app developers and DevOps teams to implement efficient and effective
    **continuous integration/continuous delivery** (**CI/CD**) pipelines; we will
    delve into the fundamental practices that drive successful mobile app development.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨一系列关键主题，帮助移动应用开发者和 DevOps 团队实施高效且有效的**持续集成/持续交付**（**CI/CD**）流水线；我们将深入研究推动成功移动应用开发的基本实践。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Best practices for CI/CD in mobile app development
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动应用开发中的 CI/CD 最佳实践
- en: Managing mobile app versions and releases
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理移动应用版本和发布
- en: Managing mobile app infrastructure
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理移动应用基础设施
- en: The A/B testing and feature flags
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: A/B 测试和功能标记
- en: Remote and dependency caching for mobile apps
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动应用的远程与依赖缓存
- en: Execution of CI builds and tests in parallel
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI 构建和测试并行执行
- en: Automating build, test, and release with fastlane
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 fastlane 自动化构建、测试和发布
- en: Mock APIs
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟 API
- en: ChatOps for mobile DevOps collaboration
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动 DevOps 协作的 ChatOps
- en: Best practices for CI/CD in mobile app development
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动应用开发中的 CI/CD 最佳实践
- en: Keeping your mobile DevOps processes effective, efficient, and aligned with
    your overall strategy for developing mobile apps requires you and your team to
    review and refine them regularly. There is no silver bullet, so we should always
    refine our mobile DevOps processes based on team and business growth.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 保持移动 DevOps 流程的有效性、高效性，并与您整体的移动应用开发战略对齐，需要您和您的团队定期审查和优化这些流程。没有万灵药，因此我们应根据团队和业务的成长不断优化我们的移动
    DevOps 流程。
- en: There are various practices that can be added to mobile DevOps processes to
    optimize CI/CD pipelines, code review processes, development speed, and so on.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多实践可以添加到移动 DevOps 流程中，以优化 CI/CD 流水线、代码审查流程、开发速度等。
- en: We discussed, in the previous chapters, the different stages when implementing
    CI/CD pipelines or workflows for mobile apps.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们讨论了实施 CI/CD 流水线或工作流时的不同阶段。
- en: 'Here are some best practices to ensure a successful CI/CD pipeline for mobile
    apps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是确保移动应用 CI/CD 流水线成功的一些最佳实践：
- en: '**Automate as much as possible**: Automate building, testing, code analysis,
    releasing, and other tasks to reduce manual intervention, minimize errors, and
    accelerate the development process.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尽可能实现自动化：** 自动化构建、测试、代码分析、发布和其他任务，以减少人工干预、最小化错误并加速开发过程。'
- en: '**Implement a testing strategy:** Use a mix of unit tests, integration tests,
    UI tests, and end-to-end tests to ensure high-quality code. Test various devices,
    screen sizes, and operating systems using emulators or real devices.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施测试策略：** 采用单元测试、集成测试、UI 测试和端到端测试的组合，以确保高质量代码。使用模拟器或真实设备测试各种设备、屏幕尺寸和操作系统。'
- en: '**Optimize build and test times:** Use caching, parallelization, and incremental
    builds to reduce build times. Parallelize test execution and prioritize critical
    tests to speed up test runs.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优化构建和测试时间：** 使用缓存、并行化和增量构建来减少构建时间。并行化测试执行，优先执行关键测试，以加快测试运行速度。'
- en: '**Adopt a well-defined branching strategy**: When dealing with large or complex
    code, it’s helpful to use a branching strategy such as GitFlow or trunk-based
    development. This can maintain a tidy commit history and make integration and
    deployment easier.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**采用明确的分支策略：** 在处理大型或复杂代码时，使用如 GitFlow 或基于主干的开发等分支策略非常有帮助。这可以保持清晰的提交历史，并简化集成和部署。'
- en: '**Enforce good commit practices**: This includes atomic commits, descriptive
    commit messages, and frequent code reviews to maintain code quality and ensure
    easy traceability of changes. This helps ensure the code’s quality and correctness
    and can improve collaboration among team members. There are different tools that
    can be used to improve and automate the code review process, such as the following:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行良好的提交规范**：这包括原子提交、描述性的提交信息和频繁的代码审查，以保持代码质量并确保变更的可追溯性。这有助于确保代码的质量和正确性，并改善团队成员之间的协作。有多种工具可以用来改进和自动化代码审查过程，例如以下工具：'
- en: '**What The Diff** ([https://whatthediff.ai/](https://whatthediff.ai/)): This
    is an AI-powered code that acts as a review assistant. Its purpose is to assist
    your team in writing better pull request descriptions, and it can even help to
    speed up the reviewing and merging process. Additionally, it can keep your non-technical
    team members informed and involved.'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**What The Diff** ([https://whatthediff.ai/](https://whatthediff.ai/))：这是一个由
    AI 驱动的代码审查助手。它的目的是帮助团队编写更好的拉取请求描述，甚至可以加速审查和合并过程。此外，它还能让非技术团队成员保持信息同步并参与其中。'
- en: '**Danger** ([https://github.com/danger/danger](https://github.com/danger/danger)):
    This is an incredible tool that can help your team automate code review conventions.
    By adding another logical step to the process, Danger can assist with linting
    those routine tasks during your daily code review.'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Danger** ([https://github.com/danger/danger](https://github.com/danger/danger))：这是一个非常棒的工具，可以帮助你的团队自动化代码审查规范。通过在流程中加入一个额外的逻辑步骤，Danger
    可以在日常代码审查过程中帮助执行这些常规任务的 lint 检查。'
- en: '**MergeQueue** ([https://mergequeue.com/](https://mergequeue.com/)): A faster
    way to automate merge workflows, manage queues in large teams, and never worry
    about build failures again.'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MergeQueue** ([https://mergequeue.com/](https://mergequeue.com/))：一种更快速的方式来自动化合并工作流程，管理大型团队中的队列，并且再也不用担心构建失败了。'
- en: '**Keep an eye on essential CI/CD metrics**: It is important to monitor the
    CI/CD metrics such as build times, test execution times, deployment frequency,
    and code quality. These metrics will be discussed further in this chapter to help
    identify bottlenecks and areas for improvement.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关注关键的 CI/CD 指标**：监控 CI/CD 指标非常重要，例如构建时间、测试执行时间、部署频率和代码质量。本章将进一步讨论这些指标，以帮助识别瓶颈和改进领域。'
- en: '**Incorporate security measures into your CI/CD pipeline**: To ensure safety
    in your CI/CD pipeline, it is important to include security measures. This can
    be done by utilizing both static and dynamic code analysis tools, scanning dependencies
    for any vulnerabilities, and enforcing access control through the principle of
    least privilege.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将安全措施纳入 CI/CD 流程**：为了确保 CI/CD 流程的安全性，重要的是要加入安全措施。可以通过使用静态和动态代码分析工具，扫描依赖项中的漏洞，以及通过最小权限原则来实施访问控制。'
- en: '**Prepare a well-defined rollback strategy**: It is important to have a clear
    and defined plan in place for rolling back to a previous stable version in the
    event of any issues during deployment. This may require submitting a new update
    to the app store for mobile applications.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**制定明确的回滚策略**：在部署过程中遇到任何问题时，拥有一个清晰且明确的回滚计划是非常重要的。这可能需要为移动应用提交一个新的更新到应用商店。'
- en: '**Establish clear communication channels**: It is important to establish clear
    communication channels among team members in order to keep everyone informed about
    the project’s progress and any potential issues that may arise.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**建立清晰的沟通渠道**：在团队成员之间建立清晰的沟通渠道，以确保每个人都能了解项目的进展和任何可能出现的问题。'
- en: '**Collaborate with cross-functional teams**: Work together with cross-functional
    teams to ensure all aspects of the development and deployment processes are taken
    into consideration. This involves collaborating with designers, developers, testers,
    and operations teams.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与跨职能团队合作**：与跨职能团队合作，确保开发和部署过程的各个方面都得到充分考虑。这涉及与设计师、开发人员、测试人员和运维团队的协作。'
- en: In addition, we should keep an eye on the performance of our CI builds and CI
    servers overall as we improve our mobile DevOps processes and CI/CD implementation.
    Let’s look at a few metrics to track the CI/CD.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，随着我们改进移动 DevOps 流程和 CI/CD 实施，我们还应关注 CI 构建和 CI 服务器的整体性能。让我们看看一些要跟踪的 CI/CD
    指标。
- en: Key metrics to track for CI/CD in mobile app development
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动应用开发中需要跟踪的关键 CI/CD 指标
- en: Tracking key metrics in your CI/CD pipeline can help you measure the effectiveness
    of your development and deployment process, identify bottlenecks, and optimize
    the pipeline.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的CI/CD管道中跟踪关键指标可以帮助你衡量开发和部署过程的有效性，识别瓶颈，并优化管道。
- en: 'Here are some essential metrics to track for CI/CD in mobile app development:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是移动应用开发中需要跟踪的一些基本指标：
- en: '**Build success rate**: Measure the time taken for each build, including compilation,
    packaging, and any other build-related tasks. Tracking this metric can help you
    identify inefficiencies and improve build performance – for example, you have
    the option to incorporate caching steps to decrease the build time of the app
    in case the app modules haven''t undergone any changes from the previous build.
    This will prevent the app from being built from scratch and start the process
    from where it last left off. We will discuss caching later in this chapter.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建成功率**：衡量每次构建所需的时间，包括编译、打包和其他任何与构建相关的任务。跟踪此指标可以帮助你识别低效环节并改进构建性能——例如，你可以选择加入缓存步骤，以减少应用程序构建时间，前提是应用模块没有从上次构建以来发生任何变化。这样可以防止应用程序从头开始构建，并从上次构建中断的地方继续。我们将在本章稍后讨论缓存。'
- en: '**Deployment frequency**: Track how often you deploy new releases or updates
    to your mobile app. High deployment frequency indicates a mature CI/CD process
    and faster delivery of features and bug fixes to users.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署频率**：跟踪你部署新版本或更新到移动应用的频率。高部署频率表明成熟的CI/CD过程，并能更快地将功能和漏洞修复交付给用户。'
- en: '**Lead time for changes**: Measure the time a code change takes from commit
    to production. Shorter lead times can indicate an efficient pipeline and faster
    value delivery to users; we will discuss different tools that help in the code
    commit process later in this chapter.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更改的领先时间**：衡量从提交到生产的代码更改所需的时间。较短的领先时间表明管道高效，并能更快地向用户交付价值；我们将在本章稍后讨论帮助代码提交过程的不同工具。'
- en: '**Change failure rate**: Monitor the percentage of changes that results in
    failures or require rollbacks. A low change failure rate indicates that your testing
    and release processes effectively catch issues before they reach production.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更改失败率**：监控导致失败或需要回滚的更改百分比。较低的更改失败率表明你的测试和发布过程有效地在生产前捕捉到了问题。'
- en: '**Mean time to recovery** (**MTTR**): Measure the average time it takes to
    fix issues or recover from a failure in production. A short MTTR indicates that
    your team effectively identifies and addresses problems quickly.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平均恢复时间**（**MTTR**）：衡量修复问题或从生产中的故障中恢复所需的平均时间。较短的MTTR表明你的团队能够迅速有效地识别和解决问题。'
- en: '**Test execution time**: Monitor the time taken to execute your test suite.
    Long test execution times can slow down the development process. Identifying slow
    tests or optimizing test parallelization can reduce execution time. We will discuss
    parallelization later in this chapter.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试执行时间**：监控执行测试套件所需的时间。较长的测试执行时间可能会减慢开发进程。识别慢速测试或优化测试并行化可以减少执行时间。我们将在本章稍后讨论并行化。'
- en: '**Test coverage**: Track the percentage of your code base covered by tests
    to ensure that you have adequate testing in place to catch issues and maintain
    high code quality.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试覆盖率**：跟踪代码库中被测试覆盖的百分比，以确保你有足够的测试来捕捉问题并保持高代码质量。'
- en: '**Test pass/fail rate**: Monitor the percentage of tests that pass or fail
    in each build. A high pass rate indicates a stable code base, while a high failure
    rate may indicate issues with the code or testing process. Flaky tests produce
    inconsistent results, passing in some runs and failing in others without any apparent
    reason. Address flaky tests as soon as possible to avoid false negatives and maintain
    confidence in your test suite. Here is an example of how Slack teams handle the
    flaky tests art scale: [https://slack.engineering/handling-flaky-tests-at-scale-auto-detection-suppression/](https://slack.engineering/handling-flaky-tests-at-scale-auto-detection-suppression/).'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试通过/失败率**：监控每次构建中测试的通过或失败百分比。高通过率表明代码库稳定，而高失败率可能表明代码或测试过程存在问题。易波动的测试会产生不一致的结果，在某些运行中通过，在另一些运行中失败，且没有明显原因。尽早解决易波动的测试，以避免虚假的负面结果，并保持对测试套件的信心。以下是Slack团队如何在大规模中处理易波动测试的一个例子：[https://slack.engineering/handling-flaky-tests-at-scale-auto-detection-suppression/](https://slack.engineering/handling-flaky-tests-at-scale-auto-detection-suppression/)。'
- en: '**Code quality metrics**: Track metrics related to code quality, such as code
    complexity, code duplication, and adherence to coding standards. These metrics
    can help you maintain a clean and maintainable code base.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码质量指标**：跟踪与代码质量相关的指标，如代码复杂度、代码重复性和遵循编码标准的情况。这些指标可以帮助你保持干净且易于维护的代码库。'
- en: Tracking key metrics for CI/CD in mobile app development is crucial for evaluating
    the efficiency of the development and deployment process. By monitoring these
    metrics, teams can identify bottlenecks, optimize their pipeline, and ensure a
    smooth and reliable delivery of features and updates to users.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动应用开发中，跟踪 CI/CD 的关键指标对于评估开发和部署过程的效率至关重要。通过监控这些指标，团队可以识别瓶颈，优化流水线，并确保功能和更新的平稳、可靠交付给用户。
- en: These metrics provide valuable insights into the overall health and effectiveness
    of the CI/CD pipeline, enabling teams to make data-driven improvements and maintain
    a stable and high-quality code base.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指标为 CI/CD 流水线的整体健康和有效性提供了宝贵的见解，使团队能够进行数据驱动的改进，并保持稳定且高质量的代码库。
- en: With a well-monitored CI/CD pipeline and a clear understanding of key metrics,
    let’s explore together the essential strategies for managing mobile app versions
    and releases.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过精心监控的 CI/CD 流水线和清晰理解的关键指标，让我们一起探索管理移动应用版本和发布的基本策略。
- en: Managing mobile app versions and releases
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动应用版本和发布管理
- en: 'Managing versions and releases of a mobile app can be a complicated task, but
    there are some best practices that can help simplify it:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 管理移动应用的版本和发布可能是一个复杂的任务，但有一些最佳实践可以帮助简化这一过程：
- en: '**Follow semantic versioning**: It’s essential to adopt a clear and consistent
    version numbering system. Semantic versioning ([https://semver.org/](https://semver.org/))
    is a widely recognized standard used by developers. A version number consists
    of three parts: **MAJOR.MINOR.PATCH**. **MAJOR** version changes indicate breaking
    changes, **MINOR** version changes introduce new features, and **PATCH** version
    changes address bugs and issues.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**遵循语义化版本控制**：采用明确且一致的版本编号系统至关重要。语义化版本控制（[https://semver.org/](https://semver.org/)）是开发人员广泛认可的标准。版本号由三个部分组成：**主版本.次版本.修订版本**。**主版本**的更改表示有破坏性变化，**次版本**的更改引入新功能，**修订版本**的更改修复错误和问题。'
- en: '**Comprehensive release notes**: Provide thorough release notes for each release,
    including new features, bug fixes, known issues, and additional instructions or
    requirements.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全面的发布说明**：为每个发布提供详细的发布说明，包括新功能、修复的 bug、已知问题以及额外的说明或要求。'
- en: '**Streamlined branching strategy**: Adopt a clear and well-defined branching
    strategy, such as **GitFlow** or **trunk-based development**, to avoid confusion
    and maintain a clean commit history. This will help ensure a smooth integration
    and deployment process.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化的分支策略**：采用明确且定义良好的分支策略，如**GitFlow**或**基于主干的开发**，以避免混淆并保持清晰的提交历史。这将有助于确保顺利的集成和部署过程。'
- en: 'Now, let’s examine the two strategies for organizing and managing source code
    in version control systems: *monorepo* and *multi-repo*.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们一起看一下用于组织和管理版本控制系统中源代码的两种策略：*单一仓库*和*多仓库*。
- en: Monorepo
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单一仓库
- en: A **monorepo** ([https://monorepo.tools/](https://monorepo.tools/)) is a single
    repository containing multiple distinct projects with well-defined relationships.
    This approach is designed to make it easier to manage and develop large, complex
    software systems by providing a single, unified source of truth for all the code
    and resources required by the project.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**单一仓库**（[https://monorepo.tools/](https://monorepo.tools/)）是一个包含多个不同项目并具有明确关系的单一仓库。这种方法旨在通过为项目提供一个统一的代码和资源的源，简化管理和开发大型复杂软件系统的过程。'
- en: 'There’s a difference between a *monolith* and a *monorepo*; a good monorepo
    is the opposite of a monolith, as shown in the following figure:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*单体应用*和*单一仓库*之间存在差异；一个好的单一仓库与单体应用正好相反，如下图所示：'
- en: '![Figure 9.1 – Monolith versus multi-repo versus monorepo](img/Figure_09.1_B18113.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.1 – 单体应用与多仓库与单一仓库的对比](img/Figure_09.1_B18113.jpg)'
- en: Figure 9.1 – Monolith versus multi-repo versus monorepo
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1 – 单体应用与多仓库与单一仓库的对比
- en: 'A monorepo offers several benefits for project development:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 单一仓库为项目开发提供了若干优势：
- en: Firstly, storing all code in a single repository makes it easier to understand
    how different system pieces fit together and depend on one another. This also
    simplifies dependency management, reducing complexity in the development process
    and facilitating seamless building and deployment of changes.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，将所有代码存储在一个单一的仓库中，可以更容易地理解不同系统组件是如何互相配合并依赖于彼此的。这也简化了依赖管理，减少了开发过程的复杂性，并促进了变更的无缝构建和部署。
- en: A monorepo enhances collaboration between developers by providing a centralized
    location for all relevant code and resources. This improves communication, minimizes
    conflicts, and enables smoother collaboration on the project.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单一仓库通过提供一个集中存储所有相关代码和资源的位置，增强了开发者之间的协作。这改善了沟通，减少了冲突，并促进了项目上的顺利协作。
- en: 'However, there are some challenges associated with monorepos:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，单一仓库也有一些挑战：
- en: They can become large in size, making it more difficult to clone and work with
    the repository due to increased disk space requirements and longer cloning times
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可能变得很大，增加了磁盘空间需求和克隆时间，从而使得克隆和使用仓库变得更加困难。
- en: They can be more complex, particularly for large and complex projects, as changes
    impact the entire repository
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可能更复杂，尤其是对于大型和复杂的项目，因为更改会影响整个仓库。
- en: Security enforcement may pose difficulties as well, as all code is stored in
    a single location and accessible to multiple developers. This can be particularly
    challenging for sensitive projects, necessitating careful authorization processes.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 安全执行也可能带来困难，因为所有代码都存储在一个位置并对多个开发者开放。这对于敏感项目尤其具有挑战性，需要谨慎的授权流程。
- en: Multi-repo
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多仓库
- en: Multi-repo is a development approach where each component of a project is stored
    in its own separate repository. It promotes modularity and allows teams to work
    independently on specific components. While it offers flexibility, coordinating
    changes across repositories can be challenging.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 多仓库是一种开发方法，其中项目的每个组件存储在自己的独立仓库中。它促进了模块化，并允许团队在特定组件上独立工作。虽然它提供了灵活性，但在多个仓库之间协调更改可能具有挑战性。
- en: 'Here are some characteristics and challenges associated with multi-repo:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是与多仓库相关的一些特点和挑战：
- en: In a multi-repo approach, each project, library, or module has its own separate
    repository. This keeps the code base for each project isolated and independent.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多仓库方法中，每个项目、库或模块都有自己独立的仓库。这使得每个项目的代码库保持隔离和独立。
- en: Each repository has its own version control history, allowing projects to be
    versioned independently. This provides flexibility in managing release cycles
    and updates.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个仓库都有自己的版本控制历史，允许项目独立版本化。这为管理发布周期和更新提供了灵活性。
- en: Dependencies between projects must be explicitly managed and versioned, enhancing
    visibility and control over inter-project dependencies.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目之间的依赖关系必须显式地进行管理和版本控制，从而增强了对项目间依赖关系的可视性和控制。
- en: Each repository contains only the code for a specific project, keeping the repository
    size smaller and potentially improving performance.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个仓库只包含特定项目的代码，保持仓库的大小较小，可能提高性能。
- en: The multi-repo approach allows for a more decentralized development process,
    as each team can manage its repositories independently.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多仓库方法允许更去中心化的开发过程，因为每个团队可以独立管理自己的仓库。
- en: Managing dependencies, versions, and configurations across multiple repositories
    can be more complex and time-consuming compared to a monorepo.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理多个仓库之间的依赖关系、版本和配置，比单一仓库更加复杂且耗时。
- en: Making changes across multiple projects can be challenging, as it may require
    coordinating commits and releases across multiple repositories.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多个项目中进行更改可能是具有挑战性的，因为这可能需要在多个仓库之间协调提交和发布。
- en: As a result, the choice between monorepo and multi-repo depends on factors such
    as team size, project complexity, development processes, and tooling preferences.
    Some organizations prefer the simplicity and unified approach of a monorepo, while
    others prefer a multi-repo setup’s independence and decentralized nature.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，选择单一仓库（monorepo）和多仓库（multi-repo）之间的决策，取决于团队规模、项目复杂性、开发流程和工具偏好等因素。有些组织偏好单一仓库的简化和统一方式，而另一些则偏爱多仓库设置的独立性和去中心化特性。
- en: Since mobile applications rely on backend services, databases, and configuration
    management, the team should consider automating the release and managing of these
    to prevent any issues. Let’s examine the concepts behind managing mobile app infrastructure
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 由于移动应用依赖于后端服务、数据库和配置管理，因此团队应考虑自动化发布和管理这些服务，以防止出现任何问题。让我们来探讨一下管理移动应用基础设施的概念。
- en: Managing mobile app infrastructure
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理移动应用基础设施
- en: Managing mobile app infrastructure is a critical aspect of successful app development
    and deployment. It involves overseeing the underlying systems, servers, databases,
    and cloud resources that support the app’s functionality and user experience.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 管理移动应用基础设施是成功开发和部署应用的关键方面。它涉及监督支撑应用功能和用户体验的底层系统、服务器、数据库和云资源。
- en: Efficient infrastructure management ensures scalability, reliability, and performance.
    Tasks include provisioning and configuring servers, setting up databases, monitoring
    resource utilization, and implementing security measures. Embracing modern **infrastructure-as-code**
    (**IaC**) practices allows teams to automate infrastructure provisioning and configuration,
    making it easier to maintain consistency and deploy changes seamlessly.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 高效的基础设施管理确保了可扩展性、可靠性和性能。任务包括配置和部署服务器、设置数据库、监控资源利用率和实施安全措施。采用现代的**基础设施即代码**（**IaC**）实践，可以让团队自动化基础设施的配置和部署，从而更容易保持一致性并无缝地进行变更部署。
- en: A well-managed mobile app infrastructure is vital for delivering a smooth and
    reliable user experience while efficiently handling increasing user demands and
    scaling with the growth of the app. Let’s discuss how to manage the infrastructure
    of mobile apps.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一个良好管理的移动应用基础设施对于提供流畅且可靠的用户体验至关重要，同时能够高效处理日益增长的用户需求并随着应用的扩展进行扩展。让我们讨论一下如何管理移动应用的基础设施。
- en: IaC for mobile apps
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动应用的基础设施即代码（IaC）
- en: '**IaC** is a powerful approach that allows you to define and manage your app’s
    infrastructure using code, bringing benefits such as reproducibility and scalability.
    While IaC is commonly associated with server-based infrastructure, it can also
    be applied to mobile apps, as shown in the following figure:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**IaC** 是一种强大的方法，它允许你通过代码定义和管理应用的基础设施，带来了可重现性和可扩展性等好处。虽然 IaC 通常与基于服务器的基础设施相关，但它也可以应用于移动应用，如下图所示：'
- en: '![Figure 9.2 – IaC](img/Figure_09.2_B18113.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.2 – 基础设施即代码 (IaC)](img/Figure_09.2_B18113.jpg)'
- en: Figure 9.2 – IaC
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2 – 基础设施即代码 (IaC)
- en: 'Here’s how you can utilize IaC for mobile apps in more detail:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何更详细地利用 IaC 管理移动应用的说明：
- en: IaC enables you to create reproducible environments easily. You can spin up
    identical infrastructure setups for different environments such as development,
    testing, staging, and production. By using the same infrastructure code, you ensure
    consistency across environments, reducing the chances of configuration drift and
    environment-related issues.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IaC 使你能够轻松创建可重现的环境。你可以为不同的环境（如开发、测试、预生产和生产）启动相同的基础设施设置。通过使用相同的基础设施代码，确保环境之间的一致性，减少配置漂移和环境相关问题的可能性。
- en: Define the infrastructure components required to support your mobile app. This
    may include server resources, databases, storage services, **content delivery
    networks** (**CDNs**), and other necessary resources. Determine the configuration
    settings, dependencies, and relationships between these components.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义支持移动应用所需的基础设施组件。这可能包括服务器资源、数据库、存储服务、**内容分发网络**（**CDN**）以及其他必要的资源。确定这些组件之间的配置设置、依赖关系和相互关系。
- en: Select an IaC tool that supports mobile app infrastructure provisioning. Popular
    options include Terraform and AWS CloudFormation. These tools allow you to describe
    and manage your IaC and support various cloud providers and services.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个支持移动应用基础设施配置的 IaC 工具。常见的选择包括 Terraform 和 AWS CloudFormation。这些工具允许你描述和管理你的
    IaC，并支持多种云提供商和服务。
- en: Store your infrastructure code in a version control system (e.g., Git) to track
    changes, enable collaboration, and maintain a history of infrastructure modifications.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将基础设施代码存储在版本控制系统（如 Git）中，以便跟踪更改、实现协作，并维护基础设施修改的历史记录。
- en: Utilize IaC to define auto-scaling capabilities for your mobile app’s infrastructure.
    This allows your app to automatically scale resources up or down based on demand,
    ensuring optimal performance and cost efficiency. Specify scaling policies and
    thresholds within your infrastructure code.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用IaC为移动应用的基础设施定义自动扩展能力。这使得您的应用能够根据需求自动增加或减少资源，从而确保最佳性能和成本效率。在基础设施代码中指定扩展策略和阈值。
- en: With IaC, you can manage configuration settings and variables as code, making
    it easier to maintain consistency and avoid manual errors. For example, you can
    define environment-specific configuration values (e.g., API endpoints and database
    credentials) within your infrastructure code and use them consistently across
    different environments.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 借助IaC，您可以将配置设置和变量作为代码进行管理，使得保持一致性变得更容易，同时避免手动错误。例如，您可以在基础设施代码中定义特定于环境的配置值（例如API端点和数据库凭据），并在不同环境中始终如一地使用它们。
- en: With IaC, you can version and track these changes, ensuring transparency and
    simplifying deployment. Instead of manually modifying resources, you modify the
    infrastructure code and apply the changes, and the IaC tool handles the updates.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 借助IaC，您可以对这些变化进行版本控制和跟踪，确保透明性并简化部署。您无需手动修改资源，而是修改基础设施代码并应用更改，IaC工具将处理更新。
- en: Apply testing principles to your infrastructure code. Write automated tests
    to validate the correctness and integrity of your infrastructure definitions.
    This helps catch potential issues before provisioning or modifying the infrastructure.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将测试原则应用于基础设施代码。编写自动化测试以验证基础设施定义的正确性和完整性。这有助于在配置或修改基础设施之前捕捉潜在问题。
- en: Integrate your infrastructure code into your CI/CD pipeline. This allows you
    to automate the provisioning and updating of your mobile app’s infrastructure
    alongside your application code, ensuring consistent and reliable deployments.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将基础设施代码集成到您的CI/CD流水线中。这使您能够自动化移动应用基础设施的配置和更新，同时处理应用代码，确保一致性和可靠的部署。
- en: After IaC, let’s explore configuration management for mobile apps and how to
    use it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在IaC之后，我们来探讨一下移动应用的配置管理以及如何使用它。
- en: Configuration management for mobile apps
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动应用的配置管理
- en: 'Manage configuration settings and variables for different environments to ensure
    consistency and avoid manual errors with the following steps:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 管理不同环境的配置设置和变量，确保一致性并避免手动错误，具体步骤如下：
- en: Identify the configuration settings and variables your mobile app requires.
    These can include API endpoints, database connection strings, feature flags, logging
    levels, credentials, and any other values that may vary across environments.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定移动应用所需的配置设置和变量。这些可以包括API端点、数据库连接字符串、功能标志、日志级别、凭据以及任何可能在不同环境之间变化的值。
- en: Separate the configuration settings from your application code. Hardcoding configuration
    values directly into the code can make it challenging to update them when moving
    between environments. Instead, abstract the configuration values into separate
    configuration files or externalize them through environment variables.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将配置设置与应用代码分开。将配置值直接硬编码到代码中，会使在不同环境之间迁移时更新这些配置变得困难。相反，应将配置值抽象到单独的配置文件中，或通过环境变量将其外部化。
- en: Use configuration files specific to each environment. For example, you can have
    separate configuration files for development, testing, staging, and production
    environments. These files can be JSON, XML, YAML, or properties files. Each file
    contains the corresponding values for that environment.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用特定于每个环境的配置文件。例如，您可以为开发、测试、预发布和生产环境分别设置配置文件。这些文件可以是JSON、XML、YAML或属性文件。每个文件都包含该环境的相应值。
- en: Leverage environment variables to store configuration values. Environment variables
    are set at the system level and can be accessed by your mobile app during runtime.
    This approach provides flexibility and allows for easy configuration changes without
    modifying files.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用环境变量存储配置值。环境变量在系统级别设置，您的移动应用可以在运行时访问这些变量。此方法提供了灵活性，并且可以轻松更改配置，而无需修改文件。
- en: Use a centralized configuration management solution to store and manage your
    configuration settings. Solutions include AWS Secrets Manager secrets, Parameter
    Store parameters, or HashiCorp Vault for configuration values. They allow you
    to store different configurations for each environment and provide APIs for retrieving
    values at runtime.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用集中式配置管理解决方案来存储和管理您的配置设置。这些解决方案包括AWS Secrets Manager的机密、Parameter Store的参数或HashiCorp
    Vault的配置值。它们允许您为每个环境存储不同的配置，并提供在运行时检索值的API。
- en: Automate the deployment of configuration settings to different environments
    as part of your CI/CD pipeline. This ensures that the correct configuration values
    are deployed with your mobile app, reducing the risk of human error during manual
    configuration updates.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化配置设置在不同环境中的部署，作为CI/CD管道的一部分。这确保了正确的配置值与移动应用一起部署，减少了在手动更新配置时发生人为错误的风险。
- en: Store your configuration files or scripts in version control to track changes,
    maintain a history, and enable collaboration. This allows you to revert to previous
    configurations if needed and provides an audit trail of configuration modifications.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将配置文件或脚本存储在版本控制中，以跟踪变更、维护历史记录并启用协作。这使得在需要时可以恢复到先前的配置，并提供配置修改的审计跟踪。
- en: Avoid storing sensitive information directly in configuration files or environment
    variables. Instead, use secure storage mechanisms provided by your chosen configuration
    management solution or encrypt the sensitive values before storing them.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免直接将敏感信息存储在配置文件或环境变量中。相反，使用您选择的配置管理解决方案提供的安全存储机制，或在存储之前加密敏感值。
- en: Include configuration testing as part of your automated testing strategy. Write
    tests that validate the correctness and integrity of your configuration settings.
    This helps catch configuration-related issues early in development and ensures
    that the app behaves as expected in different environments.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将配置测试纳入自动化测试策略的一部分。编写测试用例，以验证配置设置的正确性和完整性。这有助于在开发早期捕捉到与配置相关的问题，并确保应用在不同环境中按预期行为运行。
- en: Establish a change management process for modifying configuration settings.
    Implement approval workflows to ensure that changes are reviewed and approved
    by the appropriate stakeholders before being applied to production environments.
    This helps maintain control and prevent unauthorized or unplanned changes.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为修改配置设置建立变更管理流程。实施审批工作流，确保在将变更应用于生产环境之前，相关利益相关者已对其进行审查和批准。这有助于保持控制并防止未经授权或计划外的变更。
- en: Optimize your build process to reduce build times, as long as it can slow the
    development cycle and increase developer waiting times. Use techniques such as
    caching, parallelization, and incremental builds to speed up the process. In the
    next section, we’ll dive into remote and dependency caching for mobile apps and
    explore the benefits.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 优化构建过程以减少构建时间，因为构建时间过长会拖慢开发周期并增加开发者的等待时间。使用缓存、并行化和增量构建等技术来加速过程。在下一部分中，我们将深入探讨移动应用的远程和依赖缓存，并探索其带来的好处。
- en: Remote and dependency caching
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程和依赖缓存
- en: Building and releasing mobile apps often involves downloading dependencies and
    assets to the CI servers or the local machines to be able to build the apps, which
    can be time-consuming and data-intensive. However, with the advent of remote and
    dependency caching solutions, developers now have a powerful tool to enhance their
    productivity.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 构建和发布移动应用通常需要下载依赖项和资源到CI服务器或本地机器上，以便能够构建应用，这可能是耗时且数据密集的。然而，随着远程和依赖缓存解决方案的出现，开发人员现在拥有了一种强大的工具来提高生产力。
- en: Remote and dependency caching for mobile apps refers to *storing and retrieving
    frequently used dependencies and assets from a remote server*. Instead of downloading
    these resources every time an app is built, developers can leverage caching to
    significantly reduce the time and bandwidth required for the build process. This
    optimization technique can significantly streamline app development workflows,
    resulting in faster build times, improved iteration cycles, and reduced data consumption.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用的远程和依赖缓存是指*从远程服务器存储和获取常用的依赖项和资源*。开发者无需每次构建应用时都下载这些资源，而是可以利用缓存显著减少构建过程中所需的时间和带宽。这种优化技术可以显著简化应用开发工作流程，缩短构建时间，提高迭代周期，并减少数据消耗。
- en: 'Here are some benefits of remote and dependency caching:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是远程和依赖缓存的一些好处：
- en: It eliminates the need to download the same resources repeatedly, enabling developers
    to save valuable time during the build process. This acceleration can be particularly
    noticeable when working on large-scale projects with numerous dependencies.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它消除了重复下载相同资源的需求，使开发人员在构建过程中节省宝贵的时间。当处理依赖项较多的大型项目时，这种加速效果尤为明显。
- en: Caching facilitates collaboration among team members by ensuring that everyone
    has access to the same set of dependencies and assets. This helps avoid versioning
    conflicts and ensures consistent development environments across the team.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存有助于团队成员之间的协作，确保每个人都能访问相同的依赖和资源。这有助于避免版本冲突，确保团队内一致的开发环境。
- en: Developers can rapidly iterate on their apps without waiting for resource downloads,
    enabling quicker testing and debugging cycles.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员可以快速迭代他们的应用程序，无需等待资源下载，从而加快测试和调试的周期。
- en: Some caching solutions provide offline support, allowing developers to continue
    working on their projects even when an internet connection is unavailable. This
    feature is particularly useful for developers on the go or in areas with intermittent
    connectivity.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些缓存解决方案提供离线支持，使得开发人员即使在没有互联网连接时也能继续进行项目工作。这个功能对于经常外出的开发人员或在网络连接不稳定的地区特别有用。
- en: But depending on the caching solution chosen, developers may need to monitor
    and manage the cache to prevent it from growing too large or becoming cluttered
    with outdated resources. Efficient cache management strategies are crucial to
    maintain optimal performance.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 但根据选择的缓存解决方案，开发人员可能需要监控和管理缓存，以防止缓存增长过大或堆满过时的资源。有效的缓存管理策略对于保持最佳性能至关重要。
- en: 'When it comes to remote and dependency caching for mobile apps, several tools
    and platforms offer similar functionality, including the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动应用的远程和依赖缓存方面，一些工具和平台提供了类似的功能，包括以下内容：
- en: '**Gradle''s build cache** ([https://docs.gradle.org/current/userguide/build_cache.html](https://docs.gradle.org/current/userguide/build_cache.html)):
    Gradle is a popular build automation system that provides a build cache feature
    that can be leveraged to cache dependencies and resources. It integrates seamlessly
    with Gradle-based Android projects and is well suited to large-scale builds.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gradle 构建缓存** ([https://docs.gradle.org/current/userguide/build_cache.html](https://docs.gradle.org/current/userguide/build_cache.html))：Gradle
    是一个流行的构建自动化系统，提供了一个构建缓存功能，可以用来缓存依赖和资源。它与基于 Gradle 的 Android 项目无缝集成，适用于大规模构建。'
- en: '`npm` package manager includes a caching mechanism that allows for efficient
    dependency resolution and retrieval. npm’s cache significantly reduces the time
    required to fetch and install frequently used packages.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm` 包管理器包括一个缓存机制，可以有效地解析和获取依赖。npm 的缓存显著减少了获取和安装常用包所需的时间。'
- en: '`Bazel.build` utilizes a sophisticated dependency graph and caching mechanism
    to intelligently determine what needs to be rebuilt, significantly reducing build
    times and improving developer productivity. You can read examples of how Reddit
    uses Bazel with the iOS app ([https://www.reddit.com/r/RedditEng/comments/syz5dw/ios_and_bazel_at_reddit_a_journey/](https://www.reddit.com/r/RedditEng/comments/syz5dw/ios_and_bazel_at_reddit_a_journey/))
    and how Square uses Bazel with Apple Silicon ([https://developer.squareup.com/blog/getting-squares-ios-build-ready-for-apple-silicon-with-bazel/](https://developer.squareup.com/blog/getting-squares-ios-build-ready-for-apple-silicon-with-bazel/)).'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Bazel.build` 利用复杂的依赖图和缓存机制，智能地确定需要重新构建的内容，大幅减少构建时间，提高开发人员的生产力。你可以阅读 Reddit
    如何在 iOS 应用中使用 Bazel 的例子 ([https://www.reddit.com/r/RedditEng/comments/syz5dw/ios_and_bazel_at_reddit_a_journey/](https://www.reddit.com/r/RedditEng/comments/syz5dw/ios_and_bazel_at_reddit_a_journey/))，以及
    Square 如何在 Apple Silicon 上使用 Bazel 的例子 ([https://developer.squareup.com/blog/getting-squares-ios-build-ready-for-apple-silicon-with-bazel/](https://developer.squareup.com/blog/getting-squares-ios-build-ready-for-apple-silicon-with-bazel/))。'
- en: '**Tuist** ([https://tuist.io/](https://tuist.io/)): Tuist is a command-line
    tool that simplifies the process of setting up and maintaining iOS projects using
    a declarative approach. Tuist caching ([https://docs.tuist.io/building-at-scale/caching](https://docs.tuist.io/building-at-scale/caching))
    optimizes build times by storing and reusing previously built dependencies, assets,
    and intermediate build artifacts. This caching mechanism can greatly reduce the
    time required to build and iterate on iOS projects.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tuist**（[https://tuist.io/](https://tuist.io/)）：Tuist 是一个命令行工具，使用声明式方法简化
    iOS 项目的设置和维护过程。Tuist 缓存（[https://docs.tuist.io/building-at-scale/caching](https://docs.tuist.io/building-at-scale/caching)）通过存储和重用先前构建的依赖项、资产和中间构建工件来优化构建时间。这种缓存机制可以大大减少构建和迭代
    iOS 项目所需的时间。'
- en: '**BuildBuddy** ([https://www.buildbuddy.io/](https://www.buildbuddy.io/)):
    BuildBuddy is a cloud-based build execution platform that helps developers offload
    and distribute their builds to remote machines. It offers a user-friendly interface,
    extensive build insights, and collaboration features to streamline the development
    workflow. By utilizing BuildBuddy, teams can reduce build times, save infrastructure
    costs, and enhance developer efficiency. Here is an example of how to use Remote
    Build Execution with GitHub Actions: [https://www.buildbuddy.io/docs/rbe-github-actions](https://www.buildbuddy.io/docs/rbe-github-actions).'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BuildBuddy**（[https://www.buildbuddy.io/](https://www.buildbuddy.io/)）：BuildBuddy
    是一个基于云的构建执行平台，帮助开发人员将构建卸载并分发到远程机器。它提供了一个用户友好的界面、广泛的构建洞察和协作功能，以简化开发工作流。通过使用 BuildBuddy，团队可以减少构建时间，节省基础设施成本，并提高开发人员效率。以下是如何使用
    GitHub Actions 进行远程构建执行的示例：[https://www.buildbuddy.io/docs/rbe-github-actions](https://www.buildbuddy.io/docs/rbe-github-actions)。'
- en: '**XCRemoteCache** ([https://github.com/spotify/XCRemoteCache](https://github.com/spotify/XCRemoteCache)):
    XCRemoteCache is a remote cache tool for Xcode projects. It reuses target artifacts
    generated on a remote machine, served from a simple REST server.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XCRemoteCache**（[https://github.com/spotify/XCRemoteCache](https://github.com/spotify/XCRemoteCache)）：XCRemoteCache
    是一个 Xcode 项目的远程缓存工具。它重用在远程机器上生成的目标工件，并通过一个简单的 REST 服务器提供服务。'
- en: '**Carthage cache**: Carthage, a dependency manager for iOS apps, offers a caching
    feature to speed up dependency retrieval and build times. It provides compatibility
    with Xcode and simplifies sharing dependencies across team members. Additionally,
    you can use Rome ([https://github.com/tmspzz/Rome](https://github.com/tmspzz/Rome)),
    the shared cache for frameworks built with Carthage that allows developers on
    Apple platforms to use Amazon’s S3, a local folder, or your own custom engine.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Carthage 缓存**：Carthage 是一个 iOS 应用的依赖管理工具，提供缓存功能以加速依赖项的获取和构建时间。它与 Xcode 兼容，并简化了团队成员之间共享依赖项的过程。此外，你还可以使用
    Rome（[https://github.com/tmspzz/Rome](https://github.com/tmspzz/Rome)），这是一个为使用
    Carthage 构建的框架提供的共享缓存，允许苹果平台的开发人员使用 Amazon 的 S3、本地文件夹或自定义引擎。'
- en: You can also use the Cocoapods cache ([https://cocoapods.org/pods/Cache](https://cocoapods.org/pods/Cache))
    or the **Swift Package Manager** (**SPM**) ([https://github.com/apple/swift-package-manager](https://github.com/apple/swift-package-manager))
    cache if you are using it in your iOS apps.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 iOS 应用中使用，你还可以使用 Cocoapods 缓存（[https://cocoapods.org/pods/Cache](https://cocoapods.org/pods/Cache)）或
    **Swift 包管理器**（**SPM**）（[https://github.com/apple/swift-package-manager](https://github.com/apple/swift-package-manager)）缓存。
- en: Remote and dependency caching for mobile apps is a game-changer in mobile app
    development and mobile DevOps, offering tangible benefits in terms of time savings,
    bandwidth conservation, collaboration, and iteration efficiency.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用的远程和依赖缓存是移动应用开发和移动 DevOps 中的游戏规则改变者，它在节省时间、带宽节约、协作和迭代效率方面提供了实际的好处。
- en: Mobile CI/CD systems use caching to transfer data between isolated builds. As
    CI builds run in ephemeral, isolated virtual machines, a typical CI workflow must
    take extra steps to bootstrap the local environment ordinarily available to the
    developer.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 移动 CI/CD 系统使用缓存来在隔离的构建之间传输数据。由于 CI 构建运行在短暂的、隔离的虚拟机中，典型的 CI 工作流必须采取额外的步骤来引导开发人员通常可用的本地环境。
- en: 'Caching these operations will make your CI workflows faster since installing
    CLI tools and downloading third-party dependencies take time, as shown in the
    following figure:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存这些操作将使你的 CI 工作流更快，因为安装 CLI 工具和下载第三方依赖项需要时间，如下图所示：
- en: '![Figure 9.3 – Caching between the CI builds machines](img/Figure_09.3_B18113.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.3 – CI 构建机器之间的缓存](img/Figure_09.3_B18113.jpg)'
- en: Figure 9.3 – Caching between the CI builds machines
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3 – CI 构建机器之间的缓存
- en: While there may be some initial setup complexities and considerations around
    cache management, the overall advantages make caching a valuable addition to any
    developer’s toolkit.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然初始的设置可能会有一些复杂性，并且需要考虑缓存管理的问题，但总体的优势使得缓存成为任何开发者工具包中的宝贵补充。
- en: 'Here’s an example of how you can use GitHub Actions to set up a simple Gradle
    cache pipeline for an Android app build to speed up build times:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个如何使用GitHub Actions设置一个简单的Gradle缓存管道来加速Android应用构建时间的示例：
- en: Inside the `.github/workflows` directory, create a YAML file – for example,
    `android_build.yml`.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`.github/workflows`目录下，创建一个YAML文件，例如`android_build.yml`。
- en: 'Add the following `android_build.yml` file: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/.github/android_build.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/.github/android_build.yml).
    The workflow caches the Gradle dependencies based on the contents of your Gradle
    files.'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`android_build.yml`文件：[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/.github/android_build.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/.github/android_build.yml)。该工作流根据Gradle文件的内容缓存Gradle依赖项。
- en: Depending on your app’s complexity and needs, you might want to add more steps,
    such as running tests, deploying artifacts, or integrating with other services.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据应用的复杂性和需求，您可能需要添加更多的步骤，例如运行测试、部署构件或与其他服务集成。
- en: Let’s look at an example of how to use caching in the CI/CD workflow on Bitrise.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个如何在Bitrise的CI/CD工作流中使用缓存的示例。
- en: Bitrise offers features known as **Cache Pull Step** and **Cache Push Step**,
    which enable you to cache and retrieve particular directories or files between
    builds, based on the app dependencies in your apps.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Bitrise提供了**缓存拉取步骤**和**缓存推送步骤**，这些功能可以基于应用的依赖关系，在构建之间缓存和检索特定的目录或文件。
- en: 'To set up caching for your iOS project, you need to add these steps to your
    Bitrise workflow: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/bitrise.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/bitrise.yml).'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要为您的iOS项目设置缓存，您需要将以下步骤添加到您的Bitrise工作流中：[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/bitrise.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/bitrise.yml)。
- en: 'You can learn more about Bitrise dependencies and caching at the following
    link: [https://devcenter.bitrise.io/en/dependencies-and-caching.html](https://devcenter.bitrise.io/en/dependencies-and-caching.html).'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下链接了解更多关于Bitrise依赖和缓存的内容：[https://devcenter.bitrise.io/en/dependencies-and-caching.html](https://devcenter.bitrise.io/en/dependencies-and-caching.html)。
- en: Finally, by comparing and selecting the most suitable caching solution based
    on your project’s requirements, you can optimize your app development process
    and unlock greater productivity.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过根据项目的需求对比并选择最合适的缓存解决方案，您可以优化应用开发过程，解锁更高的生产力。
- en: It is important to always search for the appropriate caching solution for both
    your mobile app and CI provider.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你的移动应用和CI提供商，始终寻找合适的缓存解决方案是非常重要的。
- en: Execution of CI builds and tests in parallel
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并行执行CI构建和测试
- en: Leveraging parallel execution for CI builds and tests in mobile app development
    can significantly enhance developer productivity, shorten feedback loops, and
    improve overall efficiency. Consider the capabilities of tools such as Fastlane,
    Firebase Test Lab, and CI tools to achieve optimal parallelization and accelerate
    your mobile app development process.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动应用开发中利用并行执行进行CI构建和测试，可以显著提高开发者生产力，缩短反馈周期，提升整体效率。考虑使用Fastlane、Firebase Test
    Lab以及CI工具的能力，以实现最佳并行化并加速您的移动应用开发过程。
- en: 'Some of the benefits of parallel execution for mobile app CI builds are as
    follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用CI构建中并行执行的一些好处如下：
- en: '**Faster feedback**: Parallel execution reduces the time required to build
    steps and test suites, providing quicker feedback on code changes. This enables
    developers to iterate faster and catch issues early in the development cycle.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更快的反馈**：并行执行减少了构建步骤和测试套件所需的时间，提供了更快速的代码更改反馈。这使得开发者能够更快地进行迭代，并在开发周期的早期捕捉到问题。'
- en: '**Improved efficiency**: By utilizing parallel execution, you can fully utilize
    available resources and distribute the workload across multiple agents or devices.
    This improves resource efficiency and maximizes the utilization of your CI infrastructure.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高效率**：通过利用并行执行，您可以充分利用可用资源，并将工作负载分配到多个代理或设备上。这提高了资源效率，并最大化了CI基础设施的利用。'
- en: '**Scalability**: Parallel execution allows your CI pipeline to scale seamlessly
    as your mobile app project grows. It enables you to handle larger code bases,
    increased test suites, and support for multiple platforms and configurations without
    sacrificing speed or performance.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：并行执行使您的CI流水线能够随着移动应用项目的增长无缝扩展。它使您能够处理更大的代码库、增加的测试套件，并支持多个平台和配置，而不会牺牲速度或性能。'
- en: '**Time and cost savings**: By reducing build and test times through parallel
    execution, you save valuable developer time and potentially reduce costs associated
    with maintaining CI infrastructure.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间和成本节省**：通过并行执行来减少构建和测试时间，您节省了宝贵的开发时间，并可能降低与维护CI基础设施相关的成本。'
- en: Most of the CI/CD tools support parallel builds or splitting the CI pipeline
    or workflow into small patches or tasks to run in parallel to save the build time.
    For example, with GitHub Actions, you can use Matrix ([https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs](https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs))
    to test your code in multiple versions of a language or on multiple operating
    systems.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数CI/CD工具支持并行构建，或者将CI流水线或工作流拆分成小的补丁或任务，以并行运行，从而节省构建时间。例如，在GitHub Actions中，您可以使用Matrix（[https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs](https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs)）在多种语言版本或多个操作系统上测试您的代码。
- en: With Bitrise, you can use Build Pipelines ([https://bitrise.io/why/features/pipeline](https://bitrise.io/why/features/pipeline)),
    which helps you organize your entire mobile CI/CD build process and allows you
    to set up advanced configurations with multiple tasks and tests running in parallel
    and/or sequentially.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Bitrise，您可以使用构建流水线（[https://bitrise.io/why/features/pipeline](https://bitrise.io/why/features/pipeline)），它帮助您组织整个移动CI/CD构建过程，并允许您设置多个任务和测试的高级配置，可以并行和/或顺序执行。
- en: 'In parallel execution, multiple UI tests are executed simultaneously on different
    devices or simulators, as shown in the following figure:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在并行执行中，多个UI测试在不同的设备或模拟器上同时执行，如下图所示：
- en: "![Figure 9.4 – Parallel \uFEFFUI tests execution](img/Figure_09.4_B18113.jpg)"
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.4 – 并行 UI 测试执行](img/Figure_09.4_B18113.jpg)'
- en: Figure 9.4 – Parallel UI tests execution
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4 – 并行 UI 测试执行
- en: Parallel execution for mobile app UI testing helps improve the speed and quality
    of your testing process, leading to more reliable and robust mobile applications.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用UI测试的并行执行有助于提高测试过程的速度和质量，从而使您的移动应用更加可靠和健壮。
- en: 'Here are some benefits of parallel execution for mobile app UI testing:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是并行执行在移动应用UI测试中的一些好处：
- en: By running UI tests in parallel, you can significantly reduce the overall execution
    time. Instead of executing tests sequentially, parallel execution allows multiple
    tests concurrently on different devices or simulators. This helps save time and
    improves the efficiency of your testing process.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过并行运行UI测试，您可以显著减少整体执行时间。与按顺序执行测试不同，并行执行允许在不同设备或模拟器上并发执行多个测试。这有助于节省时间，并提高测试过程的效率。
- en: With parallel execution, you can execute tests on multiple devices or simulators
    simultaneously. This allows you to cover a broader range of device configurations,
    operating systems, and screen sizes in less time. It helps ensure your app is
    tested on various devices and increases the likelihood of catching device-specific
    issues.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过并行执行，您可以在多个设备或模拟器上同时执行测试。这使得您能够在更短的时间内覆盖更广泛的设备配置、操作系统和屏幕尺寸。它有助于确保您的应用在各种设备上都经过测试，并增加捕捉到设备特定问题的可能性。
- en: Parallel execution provides scalability for your UI testing process. As your
    test suite grows, executing tests in parallel allows you to handle more tests
    without significantly increasing execution time. You can easily add more devices
    or simulators to your testing infrastructure and distribute the test workload
    across them.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行执行为您的UI测试过程提供了可扩展性。随着测试套件的增长，并行执行测试可以让您处理更多的测试，而不会显著增加执行时间。您可以轻松地向测试基础设施中添加更多设备或模拟器，并将测试工作负载分配到它们上。
- en: Parallel execution makes efficient use of available resources. By utilizing
    multiple devices or simulators concurrently, you can maximize the utilization
    of your testing infrastructure. This helps optimize resource allocation and ensures
    tests are executed without unnecessary wait times.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行执行充分利用可用资源。通过同时使用多个设备或模拟器，您可以最大化测试基础设施的利用率。这有助于优化资源分配，并确保测试在没有不必要等待时间的情况下执行。
- en: Parallel execution is well suited for integration into CI/CD pipelines. You
    can achieve faster feedback cycles and builds by executing tests in parallel.
    It allows you to integrate UI testing seamlessly into your CI/CD workflows and
    ensure that your app remains stable and functional with each code change.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行执行非常适合集成到CI/CD流水线中。通过并行执行测试，你可以实现更快的反馈周期和构建过程。它允许你将UI测试无缝集成到CI/CD工作流程中，并确保每次代码更改后，应用保持稳定和功能正常。
- en: It is possible to run parallel Android and iOS tests using Flank ([https://flank.github.io/flank/](https://flank.github.io/flank/)),
    which is compatible with the gcloud CLI. Flank provides extra features to accelerate
    velocity and increase quality.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Flank（[https://flank.github.io/flank/](https://flank.github.io/flank/)）可以运行并行的Android和iOS测试，它与gcloud
    CLI兼容。Flank提供额外的功能来加速速度并提高质量。
- en: One useful practice for mobile teams to safely release features quickly is to
    implement feature flags. Let’s discuss this concept and how it can be utilized.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 移动团队安全快速发布功能的一种有用做法是实现特性标志。让我们讨论一下这一概念及其如何被利用。
- en: A/B testing and feature flags
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A/B测试与特性标志
- en: A/B testing and feature flags are powerful techniques used in mobile app development
    to experiment, validate, and roll out new features or variations to a subset of
    users. Let’s delve into how A/B testing and feature flags can benefit mobile apps
    and the tools available for implementing them.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: A/B测试和特性标志是移动应用开发中常用的强大技术，用于实验、验证和逐步推出新功能或变体给一部分用户。让我们深入探讨A/B测试和特性标志如何为移动应用带来好处以及可用的实施工具。
- en: A/B testing for mobile apps
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动应用的A/B测试
- en: A/B testing involves presenting different versions of an app or specific features
    to different user groups to evaluate their impact on user experience, engagement,
    or **key performance** **indicators** (**KPIs**).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: A/B测试涉及向不同用户组展示应用的不同版本或特定功能，以评估其对用户体验、参与度或**关键绩效** **指标**（**KPI**）的影响。
- en: 'Here’s how it works:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的工作原理：
- en: '**Experimentation**: A/B testing tools enable developers to define experiments,
    create alternative variations (A and B), and assign users randomly to each variation.
    For example, you might test different app layouts, navigation structures, or button
    placements.'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实验**：A/B测试工具使开发者能够定义实验，创建不同的变体（A和B），并将用户随机分配到每个变体中。例如，你可能会测试不同的应用布局、导航结构或按钮位置。'
- en: '**Measurement**: Metrics and analytics are essential for evaluating the success
    of A/B tests. By monitoring user interactions, conversions, or other relevant
    KPIs, you can assess which variation performs better and drives the desired user
    behavior.'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**衡量**：指标和分析对于评估A/B测试的成功至关重要。通过监测用户交互、转化率或其他相关KPI，你可以评估哪个变体表现更好并推动所需的用户行为。'
- en: '**Analysis and iteration**: Analyzing the test results helps you make data-driven
    decisions. You can refine and iterate on the tested features or versions based
    on the insights gained to improve the app’s performance and user experience, as
    shown in the following figure:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**分析与迭代**：分析测试结果帮助你做出数据驱动的决策。你可以根据获得的见解来改进并迭代测试过的功能或版本，从而提升应用的性能和用户体验，如下图所示：'
- en: '![Figure 9.5 – How A/B testing works](img/Figure_09.5_B18113.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图9.5 – A/B测试的工作原理](img/Figure_09.5_B18113.jpg)'
- en: Figure 9.5 – How A/B testing works
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 – A/B测试的工作原理
- en: Feature flags for mobile apps
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动应用的特性标志
- en: Feature flags, or toggles, enable developers to control the visibility and behavior
    of specific features or code sections within an app. Feature flags provide flexibility,
    allowing developers to roll out new features gradually, test them in production,
    or enable/disable them dynamically.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 特性标志（或开关）使开发者能够控制应用程序中特定功能或代码段的可见性和行为。特性标志提供了灵活性，允许开发者逐步推出新功能，在生产环境中进行测试，或动态启用/禁用它们。
- en: 'Here’s how feature flags work:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这是特性标志的工作原理：
- en: Feature flag libraries or SDKs are integrated into the app’s code base to enable
    runtime control over feature availability. Flags can be configured to turn features
    on or off based on predefined conditions, such as user segments, device types,
    or app versions.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特性标志库或SDK被集成到应用程序的代码库中，以实现对功能可用性的运行时控制。标志可以根据预定义条件（如用户群体、设备类型或应用版本）配置为启用或禁用功能。
- en: 'Feature flags enable developers to conduct targeted tests by selecting features
    for specific user groups. This helps assess feature performance, gather feedback,
    and make data-driven decisions before releasing the features to a broader audience,
    as shown in the following figure:'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能标记使开发者能够通过为特定用户群体选择功能来进行有针对性的测试。这有助于评估功能性能，收集反馈，并在将功能发布给更广泛的受众之前做出数据驱动的决策，如下图所示：
- en: '![Figure 9.6 – How feature flags work](img/Figure_09.6_B18113.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.6 – 功能标记的工作原理](img/Figure_09.6_B18113.jpg)'
- en: Figure 9.6 – How feature flags work
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6 – 功能标记的工作原理
- en: 'Here are some of the most popular tools for flagging features in mobile apps:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些最受欢迎的移动应用功能标记工具：
- en: '**LaunchDarkly** ([https://launchdarkly.com](https://launchdarkly.com)) is
    a feature management platform that provides robust feature flagging capabilities.
    It allows you to control feature availability, target specific user segments,
    and easily manage flags through a web-based dashboard.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LaunchDarkly** ([https://launchdarkly.com](https://launchdarkly.com)) 是一个功能管理平台，提供强大的功能标记能力。它允许您控制功能的可用性，定位特定的用户群体，并通过基于
    Web 的仪表盘轻松管理标记。'
- en: '**ConfigCat** ([https://configcat.com/](https://configcat.com/)) offers a feature
    flag and configuration management platform that supports mobile app development.
    It allows you to create feature flags, control their visibility, and dynamically
    update configurations without requiring app updates.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ConfigCat** ([https://configcat.com/](https://configcat.com/)) 提供了一个支持移动应用开发的功能标记和配置管理平台。它允许您创建功能标记，控制其可见性，并动态更新配置，无需应用更新。'
- en: '**Flagsmith** ([https://flagsmith.com/](https://flagsmith.com/)) is an open
    source feature flagging and remote configuration platform. It provides a range
    of features, including A/B testing, targeting rules, and integration with various
    development frameworks for mobile app implementation.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Flagsmith** ([https://flagsmith.com/](https://flagsmith.com/)) 是一个开源功能标记和远程配置平台。它提供了一系列功能，包括
    A/B 测试、目标规则，并与各种开发框架集成，适用于移动应用实现。'
- en: '**Firebase Remote Config** ([https://firebase.google.com/products/remote-config](https://firebase.google.com/products/remote-config))
    is a cloud-based service that allows developers to dynamically configure and customize
    their applications without requiring a new release or an app update. It enables
    developers to remotely control and personalize various aspects of their app, such
    as text, images, colors, and behavior, allowing for targeted content delivery
    and A/B testing.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Firebase 远程配置** ([https://firebase.google.com/products/remote-config](https://firebase.google.com/products/remote-config))
    是一个基于云的服务，允许开发者动态配置和定制应用程序，无需新发布或应用更新。它使开发者能够远程控制和个性化应用程序的各个方面，如文本、图像、颜色和行为，从而实现有针对性的内容推送和
    A/B 测试。'
- en: '**Optimizely** ([https://www.optimizely.com](https://www.optimizely.com)) is
    a powerful experimentation and personalization platform that enables businesses
    to make data-driven decisions and enhance their digital experiences.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Optimizely** ([https://www.optimizely.com](https://www.optimizely.com)) 是一个强大的实验和个性化平台，帮助企业做出数据驱动的决策，并提升数字化体验。'
- en: 'Some of the benefits of A/B testing and feature flags for mobile apps are as
    follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 A/B 测试和功能标记在移动应用中的一些好处：
- en: They help you make informed decisions based on real user data, improving the
    chances of successful feature launches and updates.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们帮助您基于真实的用户数据做出明智的决策，提高功能发布和更新成功的机会。
- en: By gradually rolling out features or enabling them for specific user segments,
    you mitigate risks associated with bugs, performance issues, or negative user
    reactions. This ensures a smoother and safer deployment process.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过逐步推出功能或仅对特定用户群体启用功能，您可以降低与 bug、性能问题或负面用户反应相关的风险。这确保了更平滑、更安全的部署过程。
- en: They allow for quick iteration and refinement of features based on user feedback
    and measurable results. This iterative process enhances the development cycle
    and speeds up feature delivery.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们允许根据用户反馈和可衡量的结果快速迭代和优化功能。这个迭代过程增强了开发周期，并加速了功能交付。
- en: Feature flags enable personalized experiences by tailoring app features to specific
    user groups or individual users. This customization enhances user satisfaction
    and engagement.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能标记通过根据特定用户群体或个别用户定制应用功能，来提供个性化体验。这种定制化增强了用户的满意度和参与度。
- en: A/B testing and feature flags offer mobile app developers valuable techniques
    for experimentation, validation, and controlled rollouts. Consider using tools
    such as Firebase Remote Config, Optimizely, LaunchDarkly, ConfigCat, or Flagsmith
    to implement these strategies and unlock the benefits of data-driven decision-making
    and flexible feature management in your mobile app development process.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: A/B 测试和功能标志为移动应用开发者提供了宝贵的实验、验证和控制发布的技术。可以考虑使用像 Firebase Remote Config、Optimizely、LaunchDarkly、ConfigCat
    或 Flagsmith 这样的工具来实现这些策略，并在移动应用开发过程中解锁数据驱动决策和灵活功能管理的好处。
- en: Next, we will examine the use of mock APIs for mobile UI testing, which can
    save you time and effort by allowing you to test your app’s UI without setting
    up a real API or waiting for network responses. It can also help you test the
    app’s behavior in different scenarios and conditions that may be difficult to
    set up with a real API.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨在移动 UI 测试中使用模拟 API，这可以通过让你在不设置真实 API 或等待网络响应的情况下测试应用 UI，节省时间和精力。它还可以帮助你在不同的场景和条件下测试应用行为，而这些可能是通过真实
    API 很难设置的。
- en: Mock APIs
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟 API
- en: '**Mock APIs** are vital in simplifying mobile app development by decoupling
    backend dependencies, speeding up development cycles, and enhancing testability.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**模拟 API** 在简化移动应用开发中至关重要，它通过解耦后端依赖、加速开发周期并增强可测试性，帮助提升开发效率。'
- en: When selecting a mock API solution, consider its integration with your development
    workflow, customization options, documentation, and community support. By leveraging
    mock APIs, mobile app developers can streamline development, improve app quality,
    and iterate more efficiently.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择模拟 API 解决方案时，考虑其与开发工作流的集成、定制选项、文档和社区支持。通过利用模拟 API，移动应用开发者可以简化开发流程，提高应用质量，并更高效地进行迭代。
- en: A mock API for mobile UI testing is a simulated API that allows you to test
    the UI of your mobile app without having to connect to a real API. It can be helpful
    in a number of different situations, such as when the real API is not yet available,
    when you want to test the app’s behavior in different scenarios that may not be
    possible to set up with a real API, or when you want to test the app’s performance
    without being slowed down by network latency.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 用于移动 UI 测试的模拟 API 是一种模拟的 API，允许你在不连接真实 API 的情况下测试移动应用的 UI。在许多不同的情况下，它都非常有用，例如当真实
    API 尚不可用时，当你想要测试应用在不同场景下的行为，而这些场景可能无法通过真实 API 设置，或是你希望在不受网络延迟影响的情况下测试应用性能时。
- en: '![Figure 9.7 – How a mock server works](img/Figure_09.7_B18113.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.7 – 模拟服务器的工作原理](img/Figure_09.7_B18113.jpg)'
- en: Figure 9.7 – How a mock server works
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.7 – 模拟服务器的工作原理
- en: You can create a mock API for mobile UI testing using several tools, such as
    **WireMock** ([https://wiremock.org/](https://wiremock.org/)), the open source
    tool that allows you to create a mock API by defining the HTTP requests and responses
    it should return. It can be run as a standalone server, or it can be used as a
    Java library in your test code.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用多个工具为移动 UI 测试创建模拟 API，例如 **WireMock**（[https://wiremock.org/](https://wiremock.org/)），这是一款开源工具，允许你通过定义
    HTTP 请求和响应来创建模拟 API。它可以作为独立服务器运行，也可以作为 Java 库在你的测试代码中使用。
- en: 'Here’s an example of setting up a simple mock API endpoint that returns a JSON
    response: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/mockTest.kt](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/mockTest.kt).'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个设置简单模拟 API 端点返回 JSON 响应的示例：[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/mockTest.kt](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/mockTest.kt)。
- en: 'Here’s an example of how you can incorporate the WireMock server into your
    Android test setup: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/MyApiTest.kt](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/MyApiTest.kt).'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个如何将 WireMock 服务器整合到 Android 测试设置中的示例：[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/MyApiTest.kt](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/MyApiTest.kt)。
- en: Run the Android tests. The requests made to the specified API endpoint on the
    local mock server (e.g., `http://localhost:8080/api/endpoint` or `http://mock-server.com/api/endpoint`)
    will be intercepted by WireMock, which will respond with the configured mock response.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 Android 测试。对本地模拟服务器上指定 API 端点（例如 `http://localhost:8080/api/endpoint` 或 `http://mock-server.com/api/endpoint`）发出的请求将被
    WireMock 拦截，并返回配置的模拟响应。
- en: Building, testing, and releasing with fastlane
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 fastlane 进行构建、测试和发布
- en: '**fastlane** ([https://fastlane.tools/](https://fastlane.tools/)) is a powerful
    automation tool specifically designed to streamline the process of building, testing,
    and releasing mobile apps. It provides different features and integrations to
    automate repetitive tasks, saving mobile developers valuable time and effort.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '**fastlane** ([https://fastlane.tools/](https://fastlane.tools/)) 是一款功能强大的自动化工具，专门设计用于简化构建、测试和发布移动应用的过程。它提供了多种功能和集成，能够自动化重复任务，从而为移动开发者节省宝贵的时间和精力。'
- en: 'Let’s dive into the key aspects of using fastlane for building, testing, and
    releasing mobile apps:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解使用 fastlane 构建、测试和发布移动应用的关键方面：
- en: fastlane simplifies the build configuration process. You can define your build
    settings, such as code signing, provisioning profiles, and build flavors, in a
    readable manner using fastlane’s configuration files (Fastfile) ([https://docs.fastlane.tools/advanced/Fastfile/](https://docs.fastlane.tools/advanced/Fastfile/)).
    This eliminates the need for manual configuration and reduces the chances of errors.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: fastlane 简化了构建配置过程。你可以通过 fastlane 的配置文件（Fastfile） ([https://docs.fastlane.tools/advanced/Fastfile/](https://docs.fastlane.tools/advanced/Fastfile/))
    以可读的方式定义构建设置，例如代码签名、配置文件和构建风味。这消除了手动配置的需要，并减少了出错的可能性。
- en: fastlane integrates with popular testing frameworks such as XCTest and Espresso,
    enabling you to run unit, UI, and other custom tests as part of your build process.
    It can also handle test reporting and generate comprehensive test result reports.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: fastlane 与流行的测试框架（如 XCTest 和 Espresso）集成，允许你在构建过程中运行单元测试、UI 测试以及其他自定义测试。它还可以处理测试报告并生成详细的测试结果报告。
- en: fastlane seamlessly integrates with popular CI/CD platforms such as GitHub Actions,
    Codemagic, and Bitrise. It provides dedicated plugins and integrations that facilitate
    the smooth incorporation of fastlane into your CI workflows. This ensures the
    consistent and automated building, testing, and releasing of your mobile apps
    as part of your CI pipeline.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: fastlane 与流行的 CI/CD 平台（如 GitHub Actions、Codemagic 和 Bitrise）无缝集成。它提供了专门的插件和集成功能，帮助将
    fastlane 平滑地融入到 CI 工作流中。这确保了你可以在 CI 流程中持续、自动化地构建、测试和发布移动应用。
- en: fastlane simplifies releasing your app to app stores. With its App Store Connect
    and Google Play plugins, you can automate the entire release process, including
    versioning, code signing, metadata management, and uploading your app bundles
    or APKs.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: fastlane 简化了将应用发布到应用商店的过程。通过其 App Store Connect 和 Google Play 插件，你可以自动化整个发布流程，包括版本控制、代码签名、元数据管理，以及上传应用包或
    APK 文件。
- en: fastlane’s extensibility allows you to extend its functionality by creating
    custom actions or utilizing numerous existing plugins. fastlane’s plugin ecosystem
    ([https://docs.fastlane.tools/plugins/available-plugins/](https://docs.fastlane.tools/plugins/available-plugins/))
    provides a wide range of pre-built plugins that integrate with third-party services
    such as Slack, Firebase App Distribution, Sentry, BrowserStack, and more. These
    plugins enable you to incorporate additional functionality, such as crash reporting,
    beta testing, or analytics, into your fastlane workflows.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: fastlane 的可扩展性允许你通过创建自定义动作或使用许多现有插件来扩展其功能。fastlane 的插件生态系统 ([https://docs.fastlane.tools/plugins/available-plugins/](https://docs.fastlane.tools/plugins/available-plugins/))
    提供了大量的预构建插件，这些插件可以与第三方服务如 Slack、Firebase App Distribution、Sentry、BrowserStack
    等集成。这些插件使你能够将额外的功能（如崩溃报告、beta 测试或分析）融入到 fastlane 的工作流中。
- en: fastlane has a vibrant and active community that actively contributes to its
    development. Regular updates, new features, and bug fixes are released, ensuring
    you have access to the latest improvements and enhancements
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: fastlane 拥有一个充满活力和积极参与的社区，社区成员积极贡献开发工作。定期发布更新、新功能和修复漏洞，确保你可以访问到最新的改进和增强功能。
- en: 'Getting started with fastlane is relatively straightforward. Here’s a step-by-step
    guide to help get you up and running with fastlane:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用 fastlane 相对简单。以下是一步一步的指南，帮助你快速上手：
- en: Ensure you have Ruby installed on your system. You can check this by running
    `ruby -v` in your Terminal. If Ruby is not installed, you can install it using
    a package manager such as **Homebrew** (for macOS) or **Chocolatey** (for Windows).
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的系统上已安装 Ruby。你可以通过在终端运行 `ruby -v` 来检查。如果 Ruby 未安装，你可以使用包管理工具进行安装，例如 **Homebrew**（适用于
    macOS）或 **Chocolatey**（适用于 Windows）。
- en: Install fastlane by running `gem install fastlane` in your Terminal. This command
    will fetch and install the latest version of fastlane.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端运行 `gem install fastlane` 来安装 fastlane。此命令将获取并安装 fastlane 的最新版本。
- en: Navigate to your mobile app project’s directory using the Terminal.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用终端导航到您的移动应用项目目录。
- en: Run `fastlane init` in the project directory. This command initializes fastlane
    and creates a new fastlane folder with configuration files.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录中运行 `fastlane init`。此命令初始化 fastlane 并创建一个新的 fastlane 文件夹，其中包含配置文件。
- en: fastlane uses a Fastfile to define and manage automation tasks. Open the Fastfile
    located in the fastlane directory using a text editor.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: fastlane 使用 Fastfile 来定义和管理自动化任务。使用文本编辑器打开位于 fastlane 目录中的 Fastfile。
- en: fastlane provides a wide range of built-in actions that cover common tasks.
    For example, you can use the scan action to run tests, and the delivery action
    to upload your app to the App Store.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: fastlane 提供了广泛的内置操作，涵盖了常见任务。例如，您可以使用 scan 操作运行测试，使用 delivery 操作将您的应用上传到 App
    Store。
- en: fastlane allows you to store sensitive information, such as code-signing certificates
    and API keys, securely. Create a new `.env file` in the fastlane directory and
    add the necessary environment variables for your project.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: fastlane 允许您安全地存储敏感信息，如代码签名证书和 API 密钥。在 fastlane 目录中创建一个新的 `.env file`，并添加项目所需的环境变量。
- en: Update the `Appfile` located in the fastlane directory with relevant information,
    such as your app’s bundle identifier and Apple Developer account details.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新位于 fastlane 目录中的 `Appfile`，添加相关信息，如您的应用的包标识符和 Apple 开发者帐户详细信息。
- en: To execute a specific lane, run `fastlane <lane_name>` in the terminal. For
    example, fastlane beta will execute the beta lane defined in your Fastfile.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要执行特定的 lane，请在终端中运行 `fastlane <lane_name>`。例如，运行 fastlane beta 将执行您在 Fastfile
    中定义的 beta lane。
- en: Here’s an example of a Fastfile for an iOS app that includes lanes for building,
    testing, and releasing the app to TestFlight and the App Store ([https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/fastlane/Fastfile%20](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/fastlane/Fastfile%20)).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 iOS 应用的 Fastfile 示例，包含用于构建、测试和将应用发布到 TestFlight 和 App Store 的 lanes（[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/fastlane/Fastfile%20](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/fastlane/Fastfile%20)）。
- en: 'Here is a basic example of how to use fastlane with GitHub Actions to automate
    your iOS app deployment process:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基本示例，展示了如何使用 fastlane 和 GitHub Actions 自动化您的 iOS 应用部署过程：
- en: Create a `.github/workflows` directory in your GitHub repository if it doesn’t
    exist. Inside this directory, create a YAML file (e.g., `i0S-fastlane.yml`).
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `.github/workflows` 目录不存在，请在 GitHub 仓库中创建该目录。在该目录下创建一个 YAML 文件（例如，`i0S-fastlane.yml`）。
- en: 'Configure a GitHub Actions workflow such as this example: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/.github/iOS-fastlane.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/.github/iOS-fastlane.yml).'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置一个 GitHub Actions 工作流，例如这个示例：[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/.github/iOS-fastlane.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-9/.github/iOS-fastlane.yml)。
- en: Replace `./path/to/your/project` with the actual path to your iOS project directory,
    and replace `your_lane` with the fastlane lane you want to run (e.g., beta, release,
    etc.).
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `./path/to/your/project` 替换为您的 iOS 项目目录的实际路径，并将 `your_lane` 替换为您要运行的 fastlane
    lane（例如，beta、release 等）。
- en: Now, whenever you push changes to the `main` branch, the GitHub Actions workflow
    will be triggered, and it will execute the defined steps, which include setting
    up the environment, installing dependencies, and running your fastlane lane.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当您将更改推送到 `main` 分支时，GitHub Actions 工作流将被触发，并执行定义的步骤，这些步骤包括设置环境、安装依赖项并运行您的
    fastlane lane。
- en: This is a basic example, and you might need to adapt it to your specific project
    setup and requirements.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基本示例，您可能需要根据您的项目设置和需求进行调整。
- en: Make sure to review the fastlane and GitHub Actions documentation ([https://docs.fastlane.tools/best-practices/continuous-integration/github/](https://docs.fastlane.tools/best-practices/continuous-integration/github/))
    for more advanced configurations and options.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 确保查看 fastlane 和 GitHub Actions 文档（[https://docs.fastlane.tools/best-practices/continuous-integration/github/](https://docs.fastlane.tools/best-practices/continuous-integration/github/)）以了解更多高级配置和选项。
- en: When using Bitrise, Codemagic, or any other CI providers, the process is similar.
    You will need to replace the pipeline steps with the fastlane commands and ensure
    that the necessary prerequisites for fastlane are installed on the VMs.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Bitrise、Codemagic 或任何其他 CI 提供商时，过程类似。您需要将管道步骤替换为 fastlane 命令，并确保在虚拟机上安装了
    fastlane 所需的必要先决条件。
- en: Remember that fastlane is highly customizable, so feel free to adapt it to your
    specific project requirements. Don’t hesitate to refer to the official fastlane
    documentation ([https://docs.fastlane.tools](https://docs.fastlane.tools)) for
    more detailed information and examples.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，fastlane高度可定制，因此可以根据你的具体项目需求进行调整。不要犹豫，参考官方fastlane文档（[https://docs.fastlane.tools](https://docs.fastlane.tools)）以获取更详细的信息和示例。
- en: The next section will explore ChatOps and how to include chat tools in team
    conversations in order to accelerate the mobile DevOps life cycle.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分将探讨ChatOps，以及如何将聊天工具纳入团队对话中，从而加速移动DevOps生命周期。
- en: ChatOps for mobile DevOps collaboration
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动DevOps协作中的ChatOps
- en: In today’s fast-paced world of software development, effective collaboration
    and communication are key to achieving seamless mobile DevOps. With the rise of
    remote work and distributed teams, having a reliable and feature-rich platform
    that fosters real-time interaction is crucial.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今快节奏的软件开发世界中，有效的协作与沟通是实现无缝移动DevOps的关键。随着远程工作和分布式团队的兴起，拥有一个可靠且功能丰富的平台，以促进实时互动变得尤为重要。
- en: 'ChatOps is a collaborative approach that brings together development, operations,
    and other teams by using chat platforms as the central hub for communication and
    automation. It enables seamless collaboration and integrates various tools, making
    it easier to manage the software development and deployment processes, as shown
    in the following figure:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: ChatOps是一种协作方法，通过使用聊天平台作为沟通和自动化的核心枢纽，将开发、运维及其他团队结合在一起。它能实现无缝协作并整合各种工具，使得管理软件开发和部署过程变得更加便捷，如下图所示：
- en: '![Figure 9.8 – How ChatOps works](img/Figure_09.8_B18113.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![图9.8 – ChatOps的工作原理](img/Figure_09.8_B18113.jpg)'
- en: Figure 9.8 – How ChatOps works
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8 – ChatOps的工作原理
- en: Collaborating on mobile DevOps projects can be made more efficient and transparent
    by implementing ChatOps. This will improve communication and enable faster decision-making
    within the development team.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动DevOps项目中，实施ChatOps可以使协作更加高效和透明。这将改善沟通并加快开发团队的决策过程。
- en: 'The benefits that can be derived from ChatOps are as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: ChatOps带来的好处如下：
- en: Communication and the deployment of bots for automated tasks improve the agility
    of cross-functional teams, resulting in a shorter time to resolution.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 沟通与自动化任务的机器人部署提高了跨职能团队的敏捷性，从而缩短了问题解决的时间。
- en: ChatOps allows us to combine skilled workers across various fields into a team
    without affecting organizational structures.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ChatOps允许我们将不同领域的熟练工人组合成一个团队，而不影响组织结构。
- en: 'Automation: Integrating bots is one of the most important achievements. They
    are our helpers that perform tasks according to programmed commands. In this way,
    bots can be assigned functions such as the search and deployment of code, and
    server reset, drastically reducing the time spent on an issue.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化：集成机器人是最重要的成就之一。它们是根据预定命令执行任务的助手。通过这种方式，机器人可以被分配执行如代码搜索、部署和服务器重置等功能，大大减少了处理问题的时间。
- en: Together, let’s explore various tools and services that can aid in implementing
    ChatOps for our mobile DevOps processes.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一起探索可以帮助实现ChatOps的各种工具和服务，以优化我们的移动DevOps流程。
- en: Slack
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Slack
- en: '**Slack** ([https://slack.com/](https://slack.com/)) is a popular communication
    tool known for its versatility and integration capabilities. Slack proves to be
    a powerful tool for ChatOps in mobile DevOps collaboration. Utilizing Slack for
    DevOps, also known as **SlackOps**, is the practice of utilizing the popular team
    collaboration tool Slack to streamline and enhance communication, collaboration,
    and automation within DevOps processes. DevOps is an approach that combines software
    **development** (**Dev**) and IT **operations** (**Ops**) to foster a culture
    of collaboration, CI/CD, and automation. SlackOps takes advantage of Slack’s real-time
    messaging, channels, integrations, and bots to improve the efficiency and effectiveness
    of DevOps teams. Here are a few benefits of using Slack with DevOps:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**Slack** ([https://slack.com/](https://slack.com/)) 是一个因其多功能性和集成能力而广受欢迎的沟通工具。Slack被证明是移动DevOps协作中ChatOps的一个强大工具。利用Slack进行DevOps，也被称为**SlackOps**，是指利用这一流行的团队协作工具Slack，来简化并增强DevOps流程中的沟通、协作和自动化。DevOps是一种结合软件**开发**（**Dev**）和IT**运维**（**Ops**）的方式，旨在促进协作文化、持续集成/持续交付（CI/CD）以及自动化。SlackOps利用Slack的实时消息、频道、集成和机器人功能，提升DevOps团队的效率和效能。以下是使用Slack与DevOps的一些好处：'
- en: It provides a centralized space for teams to communicate, share ideas, and discuss
    project updates. It offers real-time messaging and voice and video calling, allowing
    quick and efficient collaboration.
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为团队提供了一个集中的空间，便于沟通、分享想法和讨论项目更新。它提供实时消息和语音、视频通话，便于快速高效的协作。
- en: One of Slack’s greatest strengths is its extensive integration ecosystem. It
    seamlessly connects with various tools and platforms used in the DevOps ecosystem,
    such as GitHub Actions for CI/CD pipelines, GitHub for version control systems,
    Jira for project management tools, and monitoring services. This integration capability
    allows for automated notifications and updates, reducing the need for context-switching
    across different applications.
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Slack 的最大优势之一是其广泛的集成生态系统。它能够与 DevOps 生态系统中使用的各种工具和平台无缝连接，例如 GitHub Actions 用于
    CI/CD 管道，GitHub 用于版本控制系统，Jira 用于项目管理工具以及监控服务。这种集成能力可以实现自动化通知和更新，减少在不同应用程序之间切换的需要。
- en: Slack’s mobile app delivers a smooth user experience, enabling team members
    to stay connected and engaged. It provides push notifications, intuitive navigation,
    and access to all essential features, ensuring uninterrupted collaboration regardless
    of location.
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Slack 的移动应用提供流畅的用户体验，使团队成员能够保持联系和参与。它提供推送通知、直观的导航和访问所有基本功能，确保无论身处何地都能持续协作。
- en: Mobile DevOps teams can use Slack to simplify workflows, automate the release
    process, share the test results, and stay productive.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 移动 DevOps 团队可以使用 Slack 简化工作流程、自动化发布过程、共享测试结果，并保持高效。
- en: AWS Chatbot
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS Chatbot
- en: '**AWS Chatbot** ([https://aws.amazon.com/chatbot/](https://aws.amazon.com/chatbot/)),
    a service provided by **Amazon Web Services** (**AWS**), aims to streamline these
    processes by integrating them with popular chat platforms. It can integrate with
    popular messaging services such as Slack, Microsoft Teams, and Amazon Chime. You
    need to choose the messaging service you want to use and connect AWS Chatbot to
    it. This will enable you to receive notifications and alerts from AWS services
    in your messaging service.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS Chatbot** ([https://aws.amazon.com/chatbot/](https://aws.amazon.com/chatbot/))
    是 **亚马逊网络服务**（**AWS**）提供的一个服务，旨在通过将其与流行的聊天平台集成来简化这些过程。它可以与流行的消息服务集成，如 Slack、Microsoft
    Teams 和 Amazon Chime。你需要选择你想使用的消息服务并将 AWS Chatbot 连接到它。这将使你能够在消息服务中接收来自 AWS 服务的通知和警报。'
- en: 'To begin, it’s important to create an AWS Chatbot within your AWS account.
    This can easily be done by accessing the AWS Management Console and selecting
    the AWS Chatbot service. From there, you can create a new chatbot and customize
    its settings according to your needs. Keep in mind that AWS Chatbot offers several
    advantages, including the following:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，重要的是要在你的 AWS 账户中创建一个 AWS Chatbot。这可以通过访问 AWS 管理控制台并选择 AWS Chatbot 服务来轻松完成。然后，你可以创建一个新的聊天机器人，并根据需要自定义其设置。请记住，AWS
    Chatbot 提供了多个优势，包括以下几点：
- en: Integrates seamlessly with popular chat platforms such as Slack, Microsoft Teams,
    and Amazon Chime. This integration lets teams receive real-time notifications,
    alerts, and updates directly in their preferred chat environment, reducing context
    switching and keeping everyone informed.
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与流行的聊天平台如 Slack、Microsoft Teams 和 Amazon Chime 无缝集成。这种集成使团队能够直接在他们首选的聊天环境中接收实时通知、警报和更新，减少上下文切换，让每个人保持信息同步。
- en: Teams can define custom workflows for ChatOps, automating repetitive tasks and
    facilitating collaboration. By using chat commands, team members can perform actions
    on AWS resources, retrieve information, initiate deployments, and execute predefined
    scripts. This capability empowers teams to efficiently manage their infrastructure
    without leaving the chat environment.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队可以为 ChatOps 定义自定义工作流程，自动化重复任务并促进协作。通过使用聊天命令，团队成员可以对 AWS 资源执行操作、检索信息、启动部署并执行预定义脚本。这种能力使团队能够高效管理基础设施，无需离开聊天环境。
- en: In conclusion, adopting mobile DevOps best practices is a crucial step toward
    achieving streamlined and high-quality mobile application development. By combining
    the expertise of developers, test engineers, release specialists, and other stakeholders,
    organizations can accelerate the development and deployment process, resulting
    in faster delivery times and improved user experiences.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，采用移动 DevOps 最佳实践是实现高效、高质量移动应用开发的关键一步。通过结合开发人员、测试工程师、发布专家和其他利益相关者的专业知识，组织可以加速开发和部署过程，从而缩短交付时间并改善用户体验。
- en: Summary
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we focused on the best practices of mobile DevOps to accelerate
    the development and release process of high-quality mobile applications. By combining
    the expertise of developers, test engineers, release experts, and other stakeholders,
    organizations can streamline the mobile app development process and deliver frequent
    updates to customers, thereby enhancing both speed and quality.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们重点讨论了移动 DevOps 的最佳实践，旨在加速高质量移动应用的开发与发布过程。通过结合开发人员、测试工程师、发布专家及其他利益相关者的专业知识，组织可以优化移动应用开发流程，并向客户提供频繁的更新，从而提高速度和质量。
- en: In this chapter, you gained essential skills in the best practices for CI/CD,
    mobile app versioning, IaC, configuration management, A/B testing, remote and
    dependency caching, parallel CI builds, fastlane automation, API mocking, and
    ChatOps collaboration. These skills will empower you to excel in mobile app development
    and streamline your processes effectively.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你掌握了 CI/CD 最佳实践、移动应用版本管理、基础设施即代码（IaC）、配置管理、A/B 测试、远程与依赖缓存、并行 CI 构建、fastlane
    自动化、API 模拟和 ChatOps 协作等关键技能。这些技能将帮助你在移动应用开发中脱颖而出，并有效地优化你的流程。
- en: In the next chapter, we’ll discuss how platform engineering and **developer
    experience** (**DevX**) can increase productivity.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将讨论平台工程和**开发者体验**（**DevX**）如何提高生产力。
- en: 'Part 4: Moving Beyond Mobile DevOps and the Future of DevOps'
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四部分：超越移动 DevOps 与 DevOps 的未来
- en: The future of Mobile DevOps is likely to involve a continued focus on improving
    the speed and quality of mobile app development. This will likely involve the
    use of newer technologies and practices that help to improve the speed and quality
    of mobile app development.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 移动 DevOps 的未来可能会继续专注于提升移动应用开发的速度和质量。这可能涉及使用更新的技术和实践，以帮助提高移动应用开发的速度和质量。
- en: 'This part has the following chapters:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 10*](B18113_10.xhtml#_idTextAnchor377)*, Improving Productivity with
    Developer Experience and Platform Engineering*'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B18113_10.xhtml#_idTextAnchor377)*，通过开发者体验与平台工程提高生产力*'
- en: '[*Chapter 11*](B18113_11.xhtml#_idTextAnchor410)*, Predicting the Future of
    Mobile DevOps*'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B18113_11.xhtml#_idTextAnchor410)*，预测移动 DevOps 的未来*'
