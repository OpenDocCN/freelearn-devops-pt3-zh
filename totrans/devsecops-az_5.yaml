- en: <st c="0">5</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Implementing Source Control Security</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '<st c="38">In the previous chapter, we divided the DevOps code development
    process into two key phases: the pre-commit phase and the source control management
    phase.</st> <st c="194">This division was made to simplify our discussion of security
    integration.</st> <st c="269">We’ve already discussed the security practices in
    the pre-commit phase.</st> <st c="341">Next, we will shift our focus to the security
    aspects within</st> <st c="402">source control.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="417">Source</st> <st c="425">control in DevOps is a way to organize and
    track the code for a project using a</st> **<st c="505">source control management</st>**
    <st c="530">(</st>**<st c="532">SCM</st>**<st c="535">) system such as</st> <st
    c="553">Git or</st> **<st c="560">Team Foundation Version Control</st>** <st c="591">(</st>**<st
    c="593">TFVC</st>**<st c="597">).</st> <st c="601">When implementing DevSecOps
    in source control, it is important to consider how the code repository is managed
    and secured.</st> <st c="724">If access to the code repository is compromised
    or protections can be easily bypassed, it is hard to trust the code stored in
    it.</st> <st c="854">By the end of this chapter, you will have gained a solid
    understanding of the following</st> <st c="942">key areas:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="952">Understanding the post-commit phase</st> <st c="989">of DevOps</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="998">Securing the source</st> <st c="1019">code environment</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1035">Addressing common coding security issues in</st> <st c="1080">source
    control</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1094">These topics will equip you with the necessary knowledge and skills
    to integrate security practices into the source control phase of a DevOps workflow.</st>
    <st c="1247">Let’s</st> <st c="1253">dive in!</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1261">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1284">To follow along with the instructions in this chapter, you will
    need</st> <st c="1354">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1368">A PC with</st> <st c="1379">internet connection</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1398">An active</st> <st c="1409">Azure subscription</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1427">An Azure</st> <st c="1437">DevOps organization</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1456">A GitHub</st> <st c="1466">Enterprise organization</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1489">Understanding the post-commit phase of DevOps</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1535">After committing code changes locally, the developer’s next step
    is to synchronize these changes with</st> <st c="1638">the central remote repository,
    as indicated in</st> *<st c="1685">Figure 5</st>**<st c="1693">.1</st>* <st c="1695">(</st>`<st
    c="1730">git push</st>` <st c="1738">operation.</st> <st c="1750">The central
    repository serves as the collective storage for code contributed by all developers
    working on</st> <st c="1856">a project:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – The code development phase of DevOps](img/B19710_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="2059">Figure 5.1 – The code development phase of DevOps</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="2108">The central repository can be hosted on a source control platform
    that is either self-hosted or cloud-hosted.</st> <st c="2219">According to the
    2022 Stack Overflow Developer Survey, GitHub leads as the most favored source
    control platform for both personal and professional projects.</st> <st c="2376">Other
    platforms such as GitLab, Bitbucket, and Azure Repos are more common in professional
    environments (</st>*<st c="2481">Figure 5</st>**<st c="2490">.2</st>*<st c="2492">).</st>
    <st c="2496">In</st> [*<st c="2499">Chapter 1</st>*](B19710_01.xhtml#_idTextAnchor016)<st
    c="2508">, we provided an overview of Microsoft’s two DevOps platforms: GitHub
    and Azure DevOps.</st> <st c="2596">Both platforms offer source control</st> <st
    c="2632">management services.</st> <st c="2653">In GitHub, we have</st> **<st
    c="2672">GitHub repositories</st>**<st c="2691">, and in Azure DevOps, we</st>
    <st c="2717">have</st> **<st c="2722">Azure Repos</st>**<st c="2733">. Both GitHub
    repositories and Azure Repos have self-hosted and cloud-hosted options.</st> <st
    c="2819">Self-hosted versions offer more control but require more management,
    and the cloud-hosted</st> <st c="2909">versions have less management overhead
    but may offer less control in</st> <st c="2978">certain scenarios:</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Stack Overflow’s source control platform survey (2022)](img/B19710_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="3183">Figure 5.2 – Stack Overflow’s source control platform survey (2022)</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3250">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3255">You might</st> <st c="3266">encounter the terms</st> *<st c="3286">version
    control</st>* <st c="3301">and</st> *<st c="3306">source control</st>* <st c="3320">in
    various</st> <st c="3332">documentation and articles.</st> <st c="3360">Both terms
    refer to the same thing and can be used interchangeably.</st> <st c="3428">Throughout
    this book, we will use the term</st> *<st c="3471">source control</st>* <st c="3485">for
    consistency.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3502">Understanding the security measures in the source control management
    phase</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="3577">Given its</st> <st c="3588">critical role as the</st> *<st c="3609">source
    of truth</st>* <st c="3624">for code that will be deployed to production, it is
    essential to ensure that code is protected and tested for security in source control.</st>
    <st c="3763">In this phase, there are two primary categories of security measures
    that we will</st> <st c="3845">focus on:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="3854">Securing the SCM environment</st>**<st c="3883">: This category
    emphasizes safeguarding the environment where the code is stored.</st> <st c="3966">It
    involves ensuring the integrity and security of the source control itself, protecting
    it against unauthorized access, data breaches, and other potential security threats
    to the</st> <st c="4146">SCM system.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="4157">Addressing common coding security issues</st>**<st c="4198">:
    This mirrors the objectives discussed in the previous chapter but is applied in
    the context of source control.</st> <st c="4312">It focuses on identifying and
    rectifying common security vulnerabilities in code both before and after it is
    merged into the main code base.</st> <st c="4453">This includes frequently reviewing
    code for security flaws (both third-party and first-party), implementing automated
    security scans, and ensuring best coding practices are followed to</st> <st c="4638">minimize
    risks.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4653">The following figure shows the two categories we</st> <st c="4703">have
    discussed:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – The two primary categories of security measures in the source
    control phase of DevOps](img/B19710_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="4795">Figure 5.3 – The two primary categories of security measures in
    the source control phase of DevOps</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4893">Let’s start</st> <st c="4906">by addressing the first category
    – securing the source code</st> <st c="4966">management environment.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4989">Securing the source code management environment</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="5037">In a DevOps workflow, securing the source code management platform
    is essential for maintaining</st> <st c="5134">the integrity of software releases.</st>
    <st c="5170">To achieve this, we strongly recommend adhering to the guidelines
    outlined in the</st> *<st c="5252">Source Code</st>* <st c="5263">section</st>
    <st c="5272">of the</st> *<st c="5279">Center for Internet Security (CIS) Software
    Supply Chain</st>* *<st c="5336">Security Guide</st>*<st c="5350">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5351">CIS Software Supply Chain Security Guide</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="5392">The</st> *<st c="5397">CIS Software Supply Chain Security Guide</st>*
    <st c="5437">provides a comprehensive framework</st> <st c="5473">for secure software
    supply chain management.</st> <st c="5518">At the time of writing, the guide consists
    of 100+ recommendations organized into five main categories: Source Code, Build
    pipelines, Dependencies, Artifacts, and Deployment.</st> <st c="5693">To access
    the full guide, you can download it</st> <st c="5739">from</st> [<st c="5744">https://www.cisecurity.org/insights/white-papers/cis-software-supply-chain-security-guide</st>](https://www.cisecurity.org/insights/white-papers/cis-software-supply-chain-security-guide)<st
    c="5833">.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5834">The guide</st> <st c="5845">offers a set of recommendations across</st>
    *<st c="5884">five key areas</st>* <st c="5898">to securely manage source</st>
    <st c="5925">code platforms:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="5940">Managing code repositories securely</st>**<st c="5976">: This
    section includes 7 recommendations that focus on the security of code repositories,
    ensuring they are properly set up, maintained, and protected against unauthorized
    access</st> <st c="6157">or breaches.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="6169">Managing code contributions securely</st>**<st c="6206">: This
    section includes 13 recommendations that focus on safely handling code contributions.</st>
    <st c="6300">This includes guidelines for reviewing, accepting, and merging contributions
    from various developers/contributors in a</st> <st c="6419">secure manner.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="6433">Managing code changes securely</st>**<st c="6464">: This section
    includes 19 recommendations on securely managing code changes in the repository.</st>
    <st c="6561">It covers guidelines on reviewing, testing, and approving changes
    to ensure that they don’t</st> <st c="6653">introduce vulnerabilities.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="6679">Managing code risks securely</st>**<st c="6708">: This section
    includes 6 recommendations with guidelines on identifying, assessing, and mitigating
    risks associated with code development.</st> <st c="6849">It includes practices
    for regular security audits and</st> <st c="6903">risk assessments.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="6920">Managing third-party integrations securely</st>**<st c="6963">:
    The final section has 3 recommendations that focus on securely integrating third-party
    tools into source control repositories.</st> <st c="7093">It emphasizes the importance
    of vetting these integrations for security vulnerabilities and maintaining</st>
    <st c="7197">their updates.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="7211">Due to limited space in this book, we cannot cover the implementation
    of all recommendations.</st> <st c="7306">However, we will focus on a few</st>
    <st c="7338">key ones.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7347">Managing code repositories securely</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="7383">The starting point of securing code repositories is ensuring that
    these repositories are created</st> <st c="7481">and maintained securely, protecting
    the code at all stages of its life cycle.</st> <st c="7559">Rather than enforcing
    a one-size-fits-all repository life cycle model (which rarely works), it is more
    effective to focus on defining organization</st> *<st c="7706">standards</st>*
    <st c="7715">for how a repository should be set up and operated securely.</st>
    <st c="7777">To achieve the best security results, the engineering and security
    teams need to work together to set these standards.</st> <st c="7896">They should
    consider how different teams work to make these standards practical</st> <st c="7976">and
    effective.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7990">As the organization matures, these standards should be turned into
    automated processes.</st> <st c="8079">This way, new secure repositories can be
    set up quickly and in line with the organization’s security needs, while reducing
    the chance of mistakes that often happen with manual steps.</st> <st c="8262">This
    approach not only boosts security but also makes the process of setting up repositories</st>
    <st c="8355">more efficient.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8370">The following are some guidelines to follow in this area.</st>
    <st c="8429">We will discuss how to implement them in both GitHub and</st> <st
    c="8486">Azure DevOps.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8499">Recommendation 1 – Ensuring repository creation is limited to specific
    members</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="8578">In GitHub, when</st> <st c="8595">setting up repositories within
    an organization, there are three visibility options:</st> **<st c="8679">Public</st>**<st
    c="8685">,</st> **<st c="8687">Private</st>**<st c="8694">, and</st> **<st c="8700">Internal</st>**<st
    c="8708">.</st> **<st c="8710">Public</st>** <st c="8716">repositories are visible
    to everyone, including non-organization members.</st> **<st c="8791">Private</st>**
    <st c="8798">repositories are visible only to organization members who have been
    given access.</st> <st c="8881">Finally,</st> **<st c="8890">Internal</st>** <st
    c="8898">repositories are visible to all members of any organization within the
    same enterprise.</st> <st c="8987">No matter which visibility option is used,
    it is important to secure the code so that only authorized users can access and</st>
    <st c="9110">modify it.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9120">By default, all members of an organization can create repositories
    of any of these types (</st>*<st c="9211">Figure 5</st>**<st c="9220">.4</st>*<st
    c="9222">).</st> <st c="9226">However, it is good practice to modify this default
    setting to</st> <st c="9289">enhance security:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Default repository creation permission in a GitHub organization](img/B19710_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="9477">Figure 5.4 – Default repository creation permission in a GitHub
    organization</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9553">We can</st> <st c="9561">either prevent members from being able
    to create repositories altogether or we can restrict the types of repositories
    they are allowed to create.</st> <st c="9707">This change can be made either at
    the organization level or at the enterprise level if you have an enterprise account
    and wish to apply changes across</st> <st c="9858">multiple organizations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="9936">https://github.com/enterprises/{ENTERPRISE_NAME}</st>`<st c="9985">)
    go to</st> `<st c="10051">ENTERPRISE_NAME</st>` <st c="10066">is a placeholder
    for your valid GitHub</st> <st c="10106">Enterprise name.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="10122">Organization level</st>**<st c="10141">: From the</st> **<st
    c="10153">Organization settings</st>** <st c="10174">page, go to</st> **<st c="10187">Member
    privileges</st>** <st c="10204">|</st> **<st c="10207">Repository creation</st>**<st
    c="10226">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Modifying the default repository creation permission for members](img/B19710_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="10656">Figure 5.5 – Modifying the default repository creation permission
    for members</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10733">Regardless of this setting, certain roles at the organization
    level still retain the permission to create repositories.</st> <st c="10854">These
    roles include</st> **<st c="10874">Owners</st>**<st c="10880">,</st> **<st c="10882">Moderators</st>**<st
    c="10892">, and</st> **<st c="10898">Security Managers</st>** <st c="10915">(</st>*<st
    c="10917">Figure 5</st>**<st c="10925">.4</st>*<st c="10927">).</st> <st c="10931">Also,
    at the enterprise level, the role of</st> **<st c="10974">Enterprise Owner</st>**
    <st c="10990">has the privilege to modify permissions at the organization level,
    so it can be leveraged as a path to create</st> <st c="11101">a repository.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11114">In Azure DevOps, the process for managing repository creation
    permission is slightly different from GitHub due to the platform’s structure.</st>
    <st c="11255">Repositories in Azure Repos can be set as</st> **<st c="11297">Public</st>**
    <st c="11303">or</st> **<st c="11307">Private</st>**<st c="11314">. A</st> **<st
    c="11318">Public</st>** <st c="11324">repository is accessible to everyone, including
    those outside of an organization.</st> <st c="11407">On the other hand, a</st>
    **<st c="11428">Private</st>** <st c="11435">repository is only visible to organization
    members who have been specifically granted access.</st> <st c="11530">Azure DevOps
    does not have</st> <st c="11557">an</st> *<st c="11560">internal</st>* <st c="11568">visibility
    option like GitHub, mainly because it doesn’t support an enterprise account structure.</st>
    <st c="11667">To enhance security, you can restrict the creation of public repositories
    by disabling the option to create public projects within your Azure DevOps organization.</st>
    <st c="11830">This change affects all members of the organization, regardless
    of their role or permission level, preventing anyone from creating public repositories.</st>
    <st c="11982">To implement this, we can navigate to</st> **<st c="12020">Azure
    DevOps</st>** <st c="12032">|</st> **<st c="12035">Organization settings</st>**
    <st c="12056">|</st> **<st c="12059">Security</st>** <st c="12067">|</st> **<st
    c="12070">Policies</st>** <st c="12078">|</st> **<st c="12081">Security policies</st>**
    <st c="12098">|</st> **<st c="12101">Allow public projects</st>**<st c="12122">.
    Microsoft recently announced that this is now disabled</st> <st c="12179">by default.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12190">By default, only users who are assigned the following roles can
    create repositories in</st> <st c="12278">Azure DevOps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="12291">Organization level</st>**<st c="12310">: Project Collection
    Administrators; Project Collection Service Accounts; Project Collection Valid
    Users; Project Collection Build Administrators; Project Collection Build Service
    Accounts; Project Collection Proxy Service Accounts; Project Collection Test</st>
    <st c="12568">Service Accounts</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="12584">Project level</st>**<st c="12598">:</st> <st c="12601">Project
    Administrators</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="12623">We can tightly control assignments into the roles to implement</st>
    <st c="12687">this recommendation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12707">Recommendation 2 – Ensuring sensitive repository operations are
    limited to specific members</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="12799">Certain</st> <st c="12808">repository operations are considered
    to be high-risk or sensitive because of the potential impact they could have if
    they’re exploited in a malicious attack.</st> <st c="12966">This includes operations
    such as repository deletion, forking, and visibility change.</st> <st c="13052">It
    is recommended to restrict the number of members that are allowed to perform</st>
    <st c="13132">these operations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13149">To restrict who can delete repositories and change their visibility
    on GitHub, go to</st> **<st c="13235">Organization</st>** <st c="13247">|</st>
    **<st c="13250">Settings</st>** <st c="13258">|</st> **<st c="13261">Access</st>**
    <st c="13267">|</st> **<st c="13270">Member privileges</st>** <st c="13287">|</st>
    **<st c="13290">Admin repository permissions</st>**<st c="13318">. Uncheck the
    options for</st> **<st c="13344">Allow members to delete or transfer repositories
    for this organization</st>** <st c="13414">and</st> **<st c="13419">Allow members
    to change repository visibilities for this organization</st>**<st c="13488">,
    then save</st> <st c="13500">your changes.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13513">To</st> <st c="13517">restrict who can delete repositories in
    an Azure DevOps project, go to</st> **<st c="13588">Project Settings</st>** <st
    c="13604">|</st> **<st c="13607">Repos</st>** <st c="13612">|</st> **<st c="13615">Repositories</st>**
    <st c="13627">|</st> **<st c="13630">Security</st>** <st c="13638">and edit the
    permissions for the user or group (</st>*<st c="13687">Figure 5</st>**<st c="13696">.6</st>*<st
    c="13698">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Configuring the permission to delete repositories](img/B19710_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="14423">Figure 5.6 – Configuring the permission to delete repositories</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14485">By default, the contributors role in an Azure DevOps project can</st>
    <st c="14551">fork repositories.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14569">Recommendation 3 – Ensuring inactive repositories are reviewed
    and archived periodically</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="14658">Inactive repositories can become security liabilities or clutter.</st>
    <st c="14725">For example, they might lead</st> <st c="14754">to false alarms,
    making security teams spend valuable time on non-issues.</st> <st c="14828">It
    is recommended to regularly review such repositories to determine if they should
    be archived.</st> <st c="14925">Doing so not only improves security but also helps
    in keeping the monitoring environment clean of</st> <st c="15023">unnecessary
    distractions.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15048">To review recent repository-related activities in GitHub, go to
    the repository, then click on</st> **<st c="15143">Insights</st>**<st c="15151">.
    Review the</st> **<st c="15164">Pulse</st>**<st c="15169">,</st> **<st c="15171">Commits</st>**<st
    c="15178">, and</st> **<st c="15184">Code</st>** **<st c="15189">frequency</st>**
    <st c="15198">areas:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Reviewing recent code repository activity in GitHub](img/B19710_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="15585">Figure 5.7 – Reviewing recent code repository activity in GitHub</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15649">To review recent repository-related activities for an Azure DevOps
    project, navigate to an Azure DevOps project, select</st> **<st c="15770">Overview</st>**
    <st c="15778">|</st> **<st c="15781">Summary</st>**<st c="15788">, and review
    the</st> **<st c="15805">Project stats</st>** <st c="15818">area, especially the
    recent commits and</st> <st c="15859">pull requests:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Azure DevOps project summary](img/B19710_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="16301">Figure 5.8 – Azure DevOps project summary</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16342">This</st> <st c="16348">information can also be retrieved via
    the API to generate an automated report, though you can also implement third-party
    solutions that surface the information in a</st> <st c="16513">streamlined way.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16529">Recommendation 4 – Repositories should be created with auditing
    enabled</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="16601">In the event of a security breach, auditing is important for identifying
    and analyzing the attacker’s</st> <st c="16704">actions within our environment.</st>
    <st c="16736">From a proactive perspective, we can use the logs to monitor for
    access patterns that are suspicious, indicative of malicious activity, or violate
    key</st> <st c="16887">organization policies.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16909">To enable event logging for repository activities in GitHub Enterprise,
    follow</st> <st c="16989">these steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17001">Go to your GitHub</st> <st c="17020">organization’s</st> **<st
    c="17035">Settings</st>**<st c="17043">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="17044">Select the</st> **<st c="17056">Archive</st>** <st c="17063">|</st>
    **<st c="17066">Logs</st>** <st c="17070">|</st> **<st c="17073">Audit</st>**
    **<st c="17079">log</st>** <st c="17082">section.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="17091">Audit logging is enabled by default.</st> <st c="17129">However,
    to ensure that source IP information is also logged, click</st> **<st c="17197">Settings</st>**
    <st c="17205">and enable the</st> **<st c="17221">Enable source IP</st>** **<st
    c="17238">disclosure</st>** <st c="17248">option:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Reviewing GitHub audit log settings](img/B19710_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="17815">Figure 5.9 – Reviewing GitHub audit log settings</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17863">By</st> <st c="17867">default, GitHub tracks various repository
    events, including creation, modification, deletion, and other significant actions.</st>
    <st c="17992">For a full understanding of the events that are captured by GitHub’s
    audit log, refer to GitHub’s official documentation on</st> *<st c="18116">audit
    log events</st>* <st c="18132">here:</st> [<st c="18139">https://docs.github.com/en/enterprise-cloud@latest/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/audit-log-events-for-your-organization</st>](mailto:https://docs.github.com/en/enterprise-cloud@latest/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/audit-log-events-for-your-organization)<st
    c="18324">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18325">To set up event logging for repository-related activities in Azure
    Repos, follow</st> <st c="18407">these steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18419">Navigate to</st> **<st c="18432">Organization Settings</st>**<st
    c="18453">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="18454">Select</st> **<st c="18462">Security</st>**<st c="18470">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="18471">Go</st> <st c="18475">to</st> **<st c="18478">Policies</st>**<st
    c="18486">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="18487">Enable the</st> **<st c="18499">Log Audit</st>** **<st c="18509">Events</st>**
    <st c="18515">option:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Enabling audit logs in Azure DevOps](img/B19710_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="18856">Figure 5.10 – Enabling audit logs in Azure DevOps</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18905">By turning on this feature, we will be able to log various events
    related to repositories, such</st> <st c="19002">as creation, forking, modification,
    enabling, disabling, deletion, and undeletion.</st> <st c="19085">For a comprehensive
    list of all the events that Azure DevOps audits, please refer to the official</st>
    <st c="19183">documentation:</st> [<st c="19198">https://learn.microsoft.com/en-us/azure/devops/organizations/audit/auditing-events?view=azure-devops</st>](https://learn.microsoft.com/en-us/azure/devops/organizations/audit/auditing-events?view=azure-devops)<st
    c="19298">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19299">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19304">Many organizations send these logs to a SIEM solution for further
    aggregation and analysis.</st> <st c="19397">For example, the Sentinel Connector
    for GitHub can be used to ingest GitHub audit logs</st> <st c="19484">into Microsoft
    Sentinel.</st> <st c="19509">More information is available</st> <st c="19539">here:</st>
    [<st c="19545">https://learn.microsoft.com/en-us/azure/sentinel/data-connectors/github-enterprise-audit-log</st>](https://learn.microsoft.com/en-us/azure/sentinel/data-connectors/github-enterprise-audit-log)<st
    c="19637">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19638">Addressing common coding security issues in source control</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '<st c="19697">Securing</st> <st c="19707">our source control platform is crucial,
    but it is equally important to continuously test code for security and compliance
    within source control systems.</st> <st c="19860">This is necessary even if we
    already have pre-commit or IDE security integrations in place.</st> <st c="19952">The
    reason is simple: pre-commit code security measures can be bypassed; developers
    might disable git hooks or bypass</st> <st c="20070">checks by changing the configurations</st>
    <st c="20108">of</st> **<st c="20111">static application security testing</st>**
    <st c="20146">(</st>**<st c="20148">SAST</st>**<st c="20152">) or</st> **<st c="20158">software
    composition analysis</st>** <st c="20187">(</st>**<st c="20189">SCA</st>**<st
    c="20192">) tools.</st> <st c="20202">Security integrations in source control
    systems, however, provide more enforceable and</st> <st c="20289">reliable protection.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20309">Also, scanning code in source control systems provides a wider
    coverage than IDE scans.</st> <st c="20398">It</st> <st c="20401">captures commits
    that might not be present in the developer’s workspace at pre-commit.</st> <st
    c="20488">This increases the chances of detecting vulnerabilities that have been
    missed in pre-commit scans.</st> <st c="20587">A third reason is that vulnerabilities
    are dynamic.</st> <st c="20639">For example, a dependency might have passed security
    checks in the development and pre-commit phases, but new vulnerabilities have
    since been uncovered.</st> <st c="20792">We need to have a routine process for
    regularly scanning the code in our source control systems to detect and resolve</st>
    <st c="20910">these issues.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20923">When it comes to addressing common coding security issues in source
    control, the focus is generally on the same issues we discussed in the pre-commit
    phase:</st> *<st c="21081">detecting vulnerabilities in both first-party code
    and third-party dependencies</st>* <st c="21160">(direct and transitive) and</st>
    *<st c="21189">identifying/preventing secrets in code commits</st>*<st c="21235">.
    If you need a refresher on these issues, feel free to review the</st> *<st c="21302">Addressing
    common development security mistakes</st>* <st c="21349">section of</st> [*<st
    c="21361">Chapter 4</st>*](B19710_04.xhtml#_idTextAnchor072)<st c="21370">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21371">However, the points where we integrate these security measures
    differ and the tools we use may be different.</st> <st c="21481">The following
    figure shows four of these integration points that we will cover in</st> <st c="21563">this
    chapter:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Code security integration points in source control](img/B19710_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="21936">Figure 5.11 – Code security integration points in source control</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22000">Speaking</st> <st c="22010">of tooling, the GitHub Enterprise
    platform has a great suite of tools (</st>**<st c="22081">GitHub code security</st>**<st
    c="22102">) for integrating security scans within its source control system.</st>
    <st c="22170">It includes various tools for identifying and resolving code security
    issues in</st> <st c="22250">source control.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22265">Understanding GitHub code security</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="22300">GitHub</st> <st c="22308">code security is</st> *<st c="22325">not</st>*
    <st c="22328">a tool; it is a collection of features</st> <st c="22368">provided
    by the GitHub platform to identify and fix code security issues in source control.</st>
    <st c="22460">The following figure provides an overview of</st> <st c="22505">these
    features:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12 – GitHub code security features](img/B19710_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="22707">Figure 5.12 – GitHub code security features</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22750">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22755">In the preceding figure, the star denotes the features that are
    available for both GitHub Enterprise and</st> <st c="22861">Azure DevOps.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22874">In the</st> <st c="22882">next few sections, we will cover some
    of the code security integrations that we can implement in source control.</st>
    <st c="22995">Some of these integrations can be implemented using GitHub code
    security capabilities.</st> <st c="23082">We will expand more on them in the</st>
    <st c="23117">relevant sections.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23135">Recommendation 1 – Implementing dependency tracking in source
    control</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="23205">One</st> <st c="23210">of the starting points for integrating
    code security in source control is to constantly</st> <st c="23298">assess and
    track dependencies that are used across the projects in your organization.</st>
    <st c="23384">Having a centralized location to check if a package is in use across
    an organization’s projects is beneficial during a security incident.</st> <st
    c="23522">It allows us to quickly determine if we are impacted by a newly disclosed
    vulnerability, as in the case of Log4j vulnerability disclosure (</st>**<st c="23661">CVE-2021-44228</st>**<st
    c="23676">).</st> <st c="23680">The GitHub platform has a native capability that
    we can use for</st> <st c="23744">this called</st> **<st c="23756">dependency
    graph</st>**<st c="23772">. Unfortunately, this capability isn’t directly available
    in Azure DevOps yet.</st> <st c="23851">However, multiple third-party solutions
    can be used to implement</st> <st c="23916">similar functionality.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23938">Understanding and implementing the dependency graph in GitHub
    Enterprise</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="24011">The dependency graph provides a summary of direct and transitive
    dependencies that are</st> <st c="24099">referenced in a GitHub</st> <st c="24122">code
    repository.</st> <st c="24139">It does this by analyzing the dependencies listed
    in the manifest and locking files within</st> <st c="24230">each repository.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24246">As previously discussed, detecting dependencies through manifest
    file analysis has limitations, including noise from unused dependencies that are
    yet to be cleaned up and phantom dependencies that may be used in code but not
    listed in the manifest files.</st> <st c="24502">If you need a refresher on this,
    please see</st> *<st c="24546">The challenges of SCA tools</st>* <st c="24573">section
    of</st> [*<st c="24585">Chapter 4</st>*](B19710_04.xhtml#_idTextAnchor072)<st
    c="24594">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24595">At the time of writing, the dependency graph supports 14 package
    manager types across 13 languages.</st> <st c="24696">This includes NuGet (.NET),
    pip (Python), and npm (JavaScript).</st> <st c="24760">The full and current list
    is available</st> <st c="24799">at</st> [<st c="24802">https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/about-the-dependency-graph#supported-package-ecosystems</st>](https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/about-the-dependency-graph#supported-package-ecosystems)<st
    c="24961">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24962">The dependency graph is automatically generated for all public
    repositories in a GitHub Enterprise organization.</st> <st c="25076">It can also
    be enabled for private and forked repositories either at the organization level
    or directly at the repository level.</st> <st c="25205">To enable it at the organization
    level, organization admins can navigate to</st> **<st c="25281">Organization</st>**
    <st c="25293">|</st> **<st c="25296">Settings</st>** <st c="25304">|</st> **<st
    c="25307">Security</st>** <st c="25315">|</st> **<st c="25318">Code security</st>**
    <st c="25331">|</st> **<st c="25334">Configurations</st>**<st c="25348">|</st>
    **<st c="25351">New Configuration</st>** <st c="25368">|</st> **<st c="25371">Dependency
    graph</st>**<st c="25387">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13 – Enabling the dependency graph for private repositories at the
    organization level](img/B19710_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="25535">Figure 5.13 – Enabling the dependency graph for private repositories
    at the organization level</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25629">After creating a new code security configuration, we can apply
    it to individual repositories, all repositories, or repositories with no existing
    configuration by going to</st> **<st c="25801">Organization</st>** <st c="25813">|</st>
    **<st c="25816">Settings</st>** <st c="25824">|</st> **<st c="25827">Security</st>**
    <st c="25835">|</st> **<st c="25838">Code security</st>** <st c="25851">|</st>
    **<st c="25854">Configuration</st>** <st c="25867">and then choosing</st> **<st
    c="25886">Apply configuration</st>** <st c="25905">or</st> **<st c="25909">Apply
    to</st>**<st c="25917">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14 – Applying code security configuration to repositories](img/B19710_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="26512">Figure 5.14 – Applying code security configuration to repositories</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26578">Once</st> <st c="26584">enabled, we can review</st> <st c="26607">discovered
    dependencies at the repository level by navigating to</st> **<st c="26672">Repository</st>**
    <st c="26682">|</st> **<st c="26685">Insights</st>** <st c="26693">|</st> **<st
    c="26696">Dependency graph</st>** <st c="26712">|</st> **<st c="26715">Dependencies</st>**<st
    c="26727">. At the organization level, we can do this by navigating to</st> **<st
    c="26788">Organization</st>** <st c="26800">|</st> **<st c="26803">Insights</st>**
    <st c="26811">|</st> **<st c="26814">Dependencies</st>**<st c="26826">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.15 – Reviewing dependency insights](img/B19710_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="27333">Figure 5.15 – Reviewing dependency insights</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27376">For</st> <st c="27381">each dependency, we can</st> <st c="27405">review
    the license information and the vulnerability’s severity.</st> <st c="27470">We
    can also search for a specific dependency using the provided</st> <st c="27534">search
    bar.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27545">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27550">The dependency graph also has an API that can be used to submit
    project dependencies.</st> <st c="27637">This is typically used to submit dependencies
    that have not been identified by the standard process of scanning manifest and
    lock files.</st> <st c="27774">These could be dependencies referenced directly
    in code or those from unsupported manifest file types or languages.</st> <st c="27890">This
    way, the dependency graph will have a more accurate picture of the dependencies
    that are being used in the project.</st> <st c="28011">For more details on using
    the API, go</st> <st c="28049">to</st> [<st c="28052">https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/using-the-dependency-submission-api</st>](https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/using-the-dependency-submission-api)<st
    c="28191">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28192">Recommendation 2 – Implementing dependency vulnerability assessment
    and management in source control</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="28293">Identifying</st> <st c="28306">the packages that are used in our
    projects is an important first step.</st> <st c="28377">However, we also need</st>
    <st c="28399">to implement processes to detect vulnerabilities in the packages,
    prioritize the vulnerabilities, and automatically fix them when possible.</st>
    <st c="28539">This is important even if we have</st> <st c="28573">pre-commit
    checks in place, as discussed in the previous chapter.</st> <st c="28639">Pre-commit
    checks can be bypassed so that implementing a similar check</st> <st c="28710">in
    source control serves as another layer of security.</st> <st c="28765">Also, vulnerabilities
    are dynamic.</st> <st c="28800">A package that passed vulnerability checks during
    development might have new vulnerabilities that have been identified since then.</st>
    <st c="28931">Regularly performing dependency vulnerability checks in source control
    ensures we stay ahead of</st> <st c="29027">these issues.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29040">GitHub Enterprise offers features such as Dependabot alerts, Dependabot
    security updates, dependency version updates, and Dependabot auto-triage rules,
    which can address some of these needs, though there may be gaps and limitations.</st>
    <st c="29274">Unfortunately, these capabilities are not yet directly available
    in Azure DevOps, but various third-party SCA solutions exist that integrate directly
    with Azure Repos to implement similar functionalities.</st> <st c="29479">The
    main thing is that you have the processes implemented using the tools that fit
    your</st> <st c="29567">use cases.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29577">Understanding and implementing Dependabot alerts in GitHub Enterprise</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="29647">Identifying</st> <st c="29660">packages in our</st> <st c="29676">projects
    with the dependency graph is an important first step.</st> <st c="29739">However,
    Dependabot takes this further by alerting and notifying us when vulnerabilities
    are detected in packages that have been identified.</st> <st c="29880">Dependabot
    offers three features for managing vulnerabilities in</st> <st c="29945">project
    dependencies:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="29966">Dependabot alerts</st>**<st c="29984">: This</st> <st c="29992">feature</st>
    <st c="30000">generates alerts and notifications for vulnerabilities identified
    in our</st> <st c="30073">repository’s dependencies.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="30099">Dependabot security updates</st>**<st c="30127">: This</st>
    <st c="30135">feature automatically creates pull requests to update dependencies</st>
    <st c="30202">with known</st> <st c="30213">security vulnerabilities.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="30238">Dependabot version updates</st>**<st c="30265">: This</st>
    <st c="30273">feature</st> <st c="30281">automatically creates pull requests to
    update your dependencies to the</st> <st c="30352">latest versions.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="30368">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30373">Dependabot features require the dependency graph to</st> <st c="30426">be
    enabled.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30437">To get</st> <st c="30445">notifications from Dependabot alerts,
    it must be enabled.</st> <st c="30503">You can do this at the enterprise, organization,
    or</st> <st c="30555">repository levels.</st> <st c="30574">To enable Dependabot
    alerts for future repositories, follow</st> <st c="30634">these steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="30646">Enterprise level</st>**<st c="30663">: Go to</st> **<st c="30672">Enterprise</st>**
    <st c="30682">|</st> **<st c="30685">Settings</st>** <st c="30693">|</st> **<st
    c="30696">Code security and analysis</st>** <st c="30722">|</st> **<st c="30725">Dependabot</st>**
    <st c="30735">|</st> **<st c="30738">Dependabot alerts</st>**<st c="30755">:</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="30757">To enable it for all existing repositories, click on</st> **<st
    c="30810">Enable all</st>** <st c="30821">(</st>*<st c="30822">Figure 5</st>**<st
    c="30830">.16</st>*<st c="30833">).</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="30836">To automatically enable it for all new repositories that are created
    in your enterprise, toggle</st> **<st c="30933">Automatically enable for new</st>**
    **<st c="30962">repositories</st>** <st c="30974">on:</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.16 – Enabling Dependabot alerts at the organization level](img/B19710_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="31329">Figure 5.16 – Enabling Dependabot alerts at the organization level</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31395">To enable Dependabot alerts at the repository level, navigate
    to</st> **<st c="31461">Repository</st>** <st c="31471">|</st> **<st c="31474">Settings</st>**
    <st c="31482">|</st> **<st c="31485">Security</st>** <st c="31493">|</st> **<st
    c="31496">Code security and analysis</st>** <st c="31522">|</st> **<st c="31525">Dependabot</st>**
    <st c="31535">|</st> **<st c="31538">Dependabot alerts</st>** <st c="31555">|</st>
    **<st c="31558">Enable</st>**<st c="31564">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="31565">Once</st> **<st c="31571">Dependabot alerts</st>** <st c="31588">has
    been enabled, we can review the raised alerts at any</st> <st c="31646">of the
    scopes – enterprise, organization,</st> <st c="31688">and repository:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="31703">To</st> <st c="31707">review Dependabot alerts at the enterprise
    level, we can navigate to</st> **<st c="31776">Enterprise</st>** <st c="31786">|</st>
    **<st c="31789">Code Security</st>** <st c="31802">|</st> **<st c="31805">Dependabot
    alerts</st>**<st c="31822">.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="31823">To review at the organization level, navigate to</st> **<st c="31873">Organization</st>**
    <st c="31885">|</st> **<st c="31888">Security</st>** <st c="31896">|</st> **<st
    c="31899">Alerts</st>** <st c="31905">|</st> **<st c="31908">Dependabot</st>**
    <st c="31918">(</st>*<st c="31920">Figure 5.17</st>*<st c="31931">):</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 5.17 – Reviewing Dependabot alerts at the organization level](img/B19710_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="32466">Figure 5.17 – Reviewing Dependabot alerts at the organization
    level</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32533">To review at the repository level, navigate to</st> **<st c="32581">Repository</st>**
    <st c="32591">|</st> **<st c="32594">Security</st>** <st c="32602">|</st> **<st
    c="32605">Vulnerability alerts</st>** <st c="32625">|</st> **<st c="32628">Dependabot</st>**<st
    c="32638">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="32639">To review the status of Dependabot features (alerts, security
    updates, and more) across repositories in an enterprise or within an organization,
    we can navigate to</st> **<st c="32804">Enterprise</st>** <st c="32814">|</st>
    **<st c="32817">Code Security</st>** <st c="32830">|</st> **<st c="32833">Coverage</st>**
    *<st c="32841">or</st>* **<st c="32844">Organization</st>** <st c="32857">|</st>
    **<st c="32860">Security</st>** <st c="32868">|</st> **<st c="32871">Coverage</st>**
    <st c="32879">(</st>*<st c="32881">Figure 5</st>**<st c="32889">.18</st>*<st c="32892">):</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.18 – Reviewing Dependabot coverage in an organization](img/B19710_05_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="34034">Figure 5.18 – Reviewing Dependabot coverage in an organization</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34096">Understanding vulnerability prioritization</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="34139">Simply identifying vulnerabilities does not fix them.</st> <st
    c="34194">Surfacing a scan report with a list of unprioritized</st> <st c="34247">vulnerabilities
    to the engineering team and instructing them to</st> *<st c="34311">fix these
    issues urgently</st>* <st c="34336">is not an effective security strategy and
    will not work in a DevSecOps framework.</st> <st c="34419">It is also not practical
    to “</st>*<st c="34448">just focus on all critical and high vulnerabilities</st>*<st
    c="34500">” as this is usually a high number.</st> <st c="34537">According to</st>
    [<st c="34550">https://www.cvedetails.com/</st>](https://www.cvedetails.com/)<st
    c="34577">, 55% of CVEs have a CVSS score of 7</st> <st c="34614">and above.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34624">When a vulnerability is identified in an OSS package in your software
    stack, it is important to perform a risk assessment to determine if it poses a
    real threat.</st> <st c="34787">This assessment should guide how developers prioritize
    fixing the issue.</st> <st c="34860">However, accurate prioritization often depends
    on a deep understanding of the environment where the software operates and its
    interaction with other components.</st> <st c="35021">This information might be
    limited in the early, pre-commit stage of development, making it challenging to
    fully assess the impact and urgency of</st> <st c="35166">a vulnerability.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="35182">In a DevSecOps workflow, where speed is a critical factor, this
    risk assessment should be quick and, preferably, automated.</st> <st c="35307">This
    is where the value of a good SCA tool becomes evident.</st> <st c="35367">A good
    SCA tool does more than just identify vulnerabilities; it should also provide
    a meaningful risk assessment to help developers prioritize what should be fixed
    before proceeding, even with the limited context available at this early stage.</st>
    <st c="35612">There are several methods that SCA tools use in prioritizing risks
    of discovered vulnerabilities in this phase.</st> <st c="35724">We’ll provide
    a summary of some of these methods and the value that they</st> <st c="35797">provide
    next.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="35810">Understanding vulnerability severity scoring</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="35855">Severity</st> <st c="35865">scoring methods provide standardized
    ways to evaluate the impact and urgency of known vulnerabilities.</st> <st c="35968">The
    most widely used framework is the</st> **<st c="36006">Common Vulnerability Scoring
    System</st>** <st c="36041">(</st>**<st c="36043">CVSS</st>**<st c="36047">) version
    3.1\.</st> <st c="36063">It assigns</st> <st c="36074">scores to vulnerabilities
    based on various metric groups (base score metrics, temporal score metrics, and
    environmental score metrics).</st> <st c="36210">The base score metric (which
    is the most widely used) measures the technical severity of a vulnerability,</st>
    <st c="36316">not risk.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="36325">However, one limitation of the CVSS 3.1 framework’s base score
    metrics is its focus on technical severity rather than the actual risk of exploitation.</st>
    <st c="36477">For example, only 10% of vulnerabilities in open source libraries
    are exploitable.</st> <st c="36560">Why should your developers spend valuable
    time focusing on vulnerabilities that are not exploitable?</st> <st c="36661">This
    is where newer</st> <st c="36681">scoring methods such as the</st> **<st c="36709">Exploit
    Prediction Scoring System</st>** <st c="36742">(</st>**<st c="36744">EPSS</st>**<st
    c="36748">) become valuable.</st> <st c="36768">EPSS aims to predict the likelihood
    of a vulnerability being exploited, drawing on various data sources such as cybersecurity
    advisories, social media, and public mentions.</st> <st c="36941">This prediction
    is vital because two vulnerabilities with identical CVSS scores might differ significantly
    in their real-world exploitation likelihood.</st> <st c="37093">Prioritizing remediation
    based on EPSS can be more effective in managing</st> <st c="37166">actual risks.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37179">In practice, combining CVSS and EPSS offers a comprehensive approach
    to vulnerability prioritization.</st> <st c="37282">While CVSS provides a baseline
    understanding of severity, EPSS adds the dimension of exploit likelihood.</st>
    <st c="37387">This dual perspective helps developers determine what’s important
    to address before proceeding with</st> <st c="37487">their commits.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37501">Understanding dependency path analysis and vulnerability context
    analysis</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="37575">While CVSS</st> <st c="37587">and EPSS provide a solid starting
    point for prioritizing</st> <st c="37644">vulnerabilities, they should be part
    of a larger strategy.</st> <st c="37703">CVSS and EPSS help score security vulnerabilities,
    but they both focus on innate and external attributes of the OSS package vulnerabilities
    without considering if the vulnerable functions are used in your code or how they
    are used.</st> <st c="37935">For example, many of the open source packages that
    developers import may not be used in the final application, thereby posing no
    immediate risk of being exploited.</st> <st c="38099">However, vulnerability ranking
    scores do not capture or account</st> <st c="38163">for this.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38172">So, even if EPSS scores a vulnerability as likely to be exploited
    and CVSS scores it as critical, it might not matter if your code does not call
    the vulnerable functions.</st> <st c="38344">Without this prioritization technique,
    developers could end up spending too much time fixing vulnerabilities that may
    not be exploitable in the context of</st> <st c="38499">your code.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38509">Both dependency path analysis and vulnerability context analysis
    are advanced techniques for prioritizing vulnerabilities based on the specific
    ways your software project uses the vulnerable OSS package.</st> <st c="38714">Here’s
    how</st> <st c="38725">they work:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="38735">Dependency path analysis</st>**<st c="38760">: This method
    examines the dependency tree of your</st> <st c="38812">project.</st> <st c="38821">The
    dependency tree is a map of how different software components (such as libraries
    and packages) are connected and depend on each other in your application.</st>
    <st c="38980">By analyzing this tree, you can see how a vulnerable component fits
    into your overall</st> <st c="39066">application structure.</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**<st c="39088">Understanding vulnerability pathways</st>**<st c="39125">:
    This part of the analysis looks at the potential</st> <st c="39177">routes through
    which a vulnerability could be exploited.</st> <st c="39234">It is like tracing
    the paths an attacker could take through the interconnected components of</st>
    <st c="39327">your software.</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**<st c="39341">Vulnerability context analysis</st>**<st c="39372">: This step
    goes deeper into the specifics of a vulnerability.</st> <st c="39436">It</st>
    <st c="39439">considers where in your code base the vulnerability is located,
    which functions are affected, and how your application uses the vulnerable component.</st>
    <st c="39589">This context is crucial because a vulnerability in a part of the
    code that’s never used or executed might not be a</st> <st c="39704">real threat.</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**<st c="39716">Impact assessment</st>**<st c="39734">: After</st> <st c="39743">analyzing
    both the dependency paths and the context, you get a clear picture of whether
    a vulnerability is just theoretically dangerous or a real, practical risk in</st>
    <st c="39908">your application.</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="39925">The main thing to watch out for is that many SCA tools (including
    Dependabot) haven’t implemented these techniques as they can be complex and time-consuming,
    especially in large projects with many dependencies.</st> <st c="40137">An example
    of a vendor implementation of this prioritization</st> <st c="40198">technique
    is the</st> *<st c="40215">reachability analysis</st>* <st c="40236">method used
    by</st> <st c="40252">Endor Labs.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40263">No matter which combination of techniques your tools use, we cannot
    emphasize enough the importance of working with your development team to ensure
    this process is as smooth as possible.</st> <st c="40451">Ideally, your SCA tool
    or process should focus on clearly presenting the prioritized risks that need
    fixing to your development team, without overloading them with unnecessary information.</st>
    <st c="40640">The prioritized risks need to be aligned with your organization’s
    risk appetite and balance the impact of fixing vulnerabilities on</st> <st c="40772">developer
    productivity.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40795">Fixing prioritized vulnerabilities</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="40830">When a vulnerability is identified as high/critical by CVSS, exploitable
    by EPSS, and further</st> <st c="40925">analysis confirms that the vulnerable
    function is called in the code, the next step is for developers to fix it and
    then recommit the code.</st> <st c="41065">This depends on the availability of
    an official fix.</st> <st c="41118">Most SCA tools will highlight this as part
    of the scan result.</st> <st c="41181">They will even highlight the version of
    the package that has the security fix.</st> <st c="41260">If an official fix is
    available, the development team can upgrade their package to the new version with
    the security fix (</st>*<st c="41382">Figure 5</st>**<st c="41391">.19</st>*<st
    c="41394">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.19 – Decision-making on fixing prioritized vulnerabilities](img/B19710_05_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="41761">Figure 5.19 – Decision-making on fixing prioritized vulnerabilities</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41828">However, this new version might bring its own set of issues, such
    as bugs, compatibility problems, performance degradation, or even new vulnerabilities.</st>
    <st c="41982">This can lead to unexpected</st> <st c="42010">behavior in previously
    stable code.</st> <st c="42046">Therefore, it is important to perform basic automated
    build tests before</st> <st c="42119">applying it.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42131">On the other hand, if there is no official fix, your approach
    depends on whether the OSS package is</st> <st c="42232">still maintained:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="42249">For maintained packages</st>**<st c="42273">: It is important
    to get the guidance of the project maintainers.</st> <st c="42340">They might
    offer an estimated timeline for a fix or recommend temporary measures to mitigate
    the vulnerability.</st> <st c="42452">In this case, the developers can flag this
    as a work item and carry on with</st> <st c="42528">their work.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="42539">For unmaintained packages</st>**<st c="42565">: This situation
    is trickier.</st> <st c="42596">Without an expected update from the original developers,
    you have</st> <st c="42662">several options:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="42678">Fork the dependency</st>**<st c="42698">: You can create and
    maintain your own version of the dependency, applying necessary security fixes.</st>
    <st c="42800">However, this requires</st> <st c="42823">continuous maintenance.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="42846">Mitigate the risk</st>**<st c="42864">: Seek</st> <st c="42872">alternatives
    to mitigate the risk without updating</st> <st c="42923">the library.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="42935">Replace the dependency</st>**<st c="42958">: Find and switch
    to an actively maintained alternative.</st> <st c="43016">Relying on an unmaintained
    component in your code base is typically not a viable</st> <st c="43097">long-term
    strategy.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="43116">Understanding and implementing Dependabot security and version
    updates in GitHub Enterprise</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="43208">Earlier in this chapter, we discussed how to implement Dependabot
    alerts to get notifications</st> <st c="43303">of vulnerabilities in packages
    that are used in our projects.</st> <st c="43365">For each alert, we can manually
    create a Dependabot security update pull request (</st>*<st c="43447">Figure 5</st>**<st
    c="43456">.20</st>*<st c="43459">).</st> <st c="43463">This action generates a
    pull request that triggers a GitHub Actions workflow.</st> <st c="43541">The workflow
    tests the patched package version against our code base to confirm compatibility
    before merging.</st> <st c="43651">While this is a good feature, having to manually
    manage this for multiple packages in a project can be a drain on developer productivity
    and cause friction in the development process.</st> <st c="43835">This is where
    the other features of Dependabot come in –</st> **<st c="43892">Dependabot security
    updates</st>** <st c="43919">and</st> **<st c="43924">Dependabot</st>** **<st
    c="43935">version updates</st>**<st c="43950">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.20 – Manually creating a Dependabot security update pull request](img/B19710_05_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="44334">Figure 5.20 – Manually creating a Dependabot security update pull
    request</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="44407">Dependabot security updates</st>** <st c="44435">can automate
    this process for us by automatically creating</st> <st c="44495">pull requests
    to update dependencies with known security vulnerabilities.</st> <st c="44569">To
    enable this feature at the repository level, navigate to</st> **<st c="44629">Repository</st>**
    <st c="44639">|</st> **<st c="44642">Settings</st>** <st c="44650">|</st> **<st
    c="44653">Code security and analysis</st>** <st c="44679">|</st> **<st c="44682">Dependabot
    security updates</st>** <st c="44709">|</st> **<st c="44712">Enable all</st>**<st
    c="44722">:</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.21 – Enabling Dependabot security updates at the organization level](img/B19710_05_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="45079">Figure 5.21 – Enabling Dependabot security updates at the organization
    level</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="45155">Dependabot version updates</st>** <st c="45182">can take this
    further by automatically creating pull requests to update dependencies even if
    they don’t have security vulnerabilities.</st> <st c="45318">To enable this feature,
    navigate to</st> **<st c="45354">Repository</st>** <st c="45364">|</st> **<st
    c="45367">Settings</st>** <st c="45375">|</st> **<st c="45378">Security</st>**
    <st c="45386">|</st> **<st c="45389">Code security and analysis</st>** <st c="45415">|</st>
    **<st c="45418">Dependabot version updates</st>** <st c="45444">|</st> **<st c="45447">Enable
    all</st>**<st c="45457">.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="45458">Recommendation 3 – Implementing an open source license compliance
    scan</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="45529">Open source licensing is a critical aspect of any software project.</st>
    <st c="45598">When open source packages</st> <st c="45624">are used in your projects,
    it is a good practice to regularly assess their license risk rating.</st> <st
    c="45720">This rating should consider the impact of the package’s license terms
    on your organization’s compliance, intellectual property, and exclusive rights.</st>
    <st c="45870">You can rate the risk from LOW to HIGH, with a HIGH risk indicating
    a potential impact on your organization’s compliance.</st> <st c="45992">As mentioned
    earlier, the dependency graph displays the license information for each identified
    dependency but to enforce specific license types, we need to implement</st> **<st
    c="46159">Dependency Review Action</st>**<st c="46183">. We will cover this in
    the next chapter when we discuss how to implement security in the BUILD and TEST
    phases of DevOps.</st> <st c="46306">For now, let’s examine various open source
    license categories and their governing rules.</st> *<st c="46395">Figure 5</st>**<st
    c="46403">.22</st>* <st c="46406">shows a spectrum of open</st> <st c="46432">source
    licenses:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.22 – Open source license categories](img/B19710_05_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="46547">Figure 5.22 – Open source license categories</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="46591">On the left, we have</st> **<st c="46613">attribution</st>** <st
    c="46624">licenses, which are more permissive, while on the right, we have</st>
    **<st c="46690">copyleft</st>** <st c="46698">licenses, which are more restrictive.</st>
    <st c="46737">Let’s explore these license types in</st> <st c="46774">more detail:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="46786">Attribution licenses</st>**<st c="46807">: These</st> <st c="46816">are
    very flexible.</st> <st c="46835">We are allowed to use the library for any purpose,
    including commercial software.</st> <st c="46917">The main requirement is to give
    credit to the original package creator.</st> <st c="46989">This type of license
    generally poses a</st> **<st c="47028">low risk</st>** <st c="47036">in terms
    of compliance and intellectual property rights.</st> <st c="47094">It is worth
    noting that not all permissive licenses are merely attribution licenses.</st>
    <st c="47179">For example, the MIT License and the Apache License are permissive
    but include additional terms beyond</st> <st c="47282">simple attribution.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="47301">Copyleft licenses</st>**<st c="47319">: These are more restrictive.</st>
    <st c="47350">You can only use these libraries in projects</st> <st c="47395">that
    have the same license terms.</st> <st c="47429">This can be tricky for commercial
    software.</st> <st c="47473">They are often called “viral” licenses because they
    can</st> <st c="47529">extend their terms to other software components used in
    your project.</st> <st c="47599">The GNU</st> **<st c="47607">General Public License</st>**
    <st c="47629">(</st>**<st c="47631">GPL</st>**<st c="47634">) is a well-known
    example.</st> <st c="47662">If you implement a package with the GPL license, any
    derived work must also be distributed under the GPL license terms.</st> <st c="47782">This
    ensures that the freedoms of the GPL are maintained in all derivative works.</st>
    <st c="47864">These licenses</st> <st c="47879">typically have a</st> **<st c="47896">high
    risk rating</st>** <st c="47912">due to their potential impact on compliance,
    intellectual property, and</st> <st c="47985">exclusive rights.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="48002">Downstream or weak copyleft licenses</st>**<st c="48039">:
    These are a middle ground.</st> <st c="48069">They are more permissive than the
    strong copyleft licenses.</st> <st c="48129">Unlike the copyleft licenses, they</st>
    *<st c="48164">do not</st>* <st c="48170">require that the entire derived project
    carry the same license</st> <st c="48234">terms.</st> <st c="48241">A common example
    is the GNU</st> **<st c="48269">Lesser General Public License</st>** <st c="48298">(</st>**<st
    c="48300">LGPL</st>**<st c="48304">).</st> <st c="48308">Unlike the GPL, LGPL
    lets you link libraries with non-LGPL software without having to license the entire
    combined work under LGPL.</st> <st c="48439">However, any changes to the LGPL-licensed
    component must be released under LGPL.</st> <st c="48520">This makes LGPL more
    suitable for mixing with proprietary software, while still keeping improvements
    to the LGPL component open.</st> <st c="48649">These</st> <st c="48655">licenses
    have a</st> **<st c="48671">moderate risk rating</st>** <st c="48691">as they
    are more permissive for proprietary integration but still ensure openness for
    the</st> <st c="48782">LGPL-licensed components.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="48807">Recommendation 4 – Implementing secret protection in source control</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="48875">We previously</st> <st c="48890">discussed GitHub Advanced Security.</st>
    <st c="48926">One of the capabilities that it offers is secret scanning.</st>
    <st c="48985">This means we can implement this capability to continuously scan
    our code bases, to detect exposed credentials.</st> <st c="49097">In addition</st>
    <st c="49109">to this, it also offers</st> **<st c="49133">push protection</st>**<st
    c="49148">, which enables pre-receive secret scanning for both GitHub Enterprise
    and Azure DevOps platforms.</st> <st c="49247">This functionality blocks code
    commits that contain secrets, to prevent accidental</st> <st c="49330">secret
    exposure.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="49346">Push protection should be automatically enabled for all repositories.</st>
    <st c="49417">To audit if this capability is</st> <st c="49448">enabled across
    our GitHub organization, we can use the DevOps Security feature of Microsoft Defender
    for Cloud, which includes a recommendation for this (</st>*<st c="49602">Figure
    5</st>**<st c="49611">.23</st>*<st c="49614">).</st> <st c="49618">At the time
    of writing (April 2024), an equivalent recommendation is yet to be added for</st>
    <st c="49707">Azure DevOps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.23 – Microsoft Defender for Cloud push protection recommendation](img/B19710_05_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="50367">Figure 5.23 – Microsoft Defender for Cloud push protection recommendation</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="50440">Hands-on exercise – Performing pre-receive checks and dependency
    reviews</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="50513">In this</st> <st c="50522">exercise, we will be performing pre-receive
    checks on GitHub and Azure DevOps.</st> <st c="50601">We will also review the
    dependencies of the</st> `<st c="50645">eShopOnWeb</st>` <st c="50655">application
    for any</st> <st c="50676">security vulnerabilities.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="50701">We’ll undertake the</st> <st c="50722">following tasks:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="50738">Task 1</st>**<st c="50745">: Enabling push protection on</st>
    <st c="50776">Azure DevOps</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="50788">Task 2</st>**<st c="50795">: Enabling push protection</st>
    <st c="50823">on GitHub</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="50832">Task 3</st>**<st c="50839">: Reviewing dependencies</st> <st
    c="50865">on GitHub</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="50874">Let’s begin!</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="50887">Task 1 – Enabling push protection on Azure DevOps</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="50937">This task</st> <st c="50948">aims to configure pre-receive conditions
    to enforce repository or organization policies before the push is accepted into
    the repository.</st> <st c="51085">For this task, we will enable push protection
    to block any commits that</st> <st c="51157">have secrets:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="51170">On the Azure portal home page, in the search box, type</st> `<st
    c="51226">Azure DevOps Organizations</st>` <st c="51252">and select the</st> **<st
    c="51268">Azure DevOps Organizations</st>**<st c="51294">. Choose one of your
    existing organizations or</st> **<st c="51341">Create</st>** **<st c="51348">new
    organization</st>**<st c="51364">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="51365">Create a private project and name</st> <st c="51400">it</st> `<st
    c="51403">eShopOnWeb</st>`<st c="51413">:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.24 – Creating a private project on Azure DevOps](img/B19710_05_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="51784">Figure 5.24 – Creating a private project on Azure DevOps</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="51840">Click on</st> **<st c="51850">Repos</st>** <st c="51855">on the
    left and select</st> **<st c="51879">Import</st>** <st c="51885">from the</st>
    **<st c="51895">Import a</st>** **<st c="51904">repository</st>** <st c="51914">section.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="51923">Under</st> `<st c="51992">.git</st>`<st c="51996">, then</st>
    <st c="52003">click</st> **<st c="52009">Import</st>**<st c="52015">:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.25 – Cloning eShopOnWeb](img/B19710_05_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="52157">Figure 5.25 – Cloning eShopOnWeb</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="52189">We will</st> <st c="52198">be using the secret scanning push protection
    functionality of</st> **<st c="52260">GitHub Advanced Security</st>** <st c="52284">on
    Azure DevOps.</st> <st c="52302">Push protection prevents credentials from being
    committed in the first place in the source code.</st> <st c="52399">Another feature
    of</st> **<st c="52418">GitHub Advanced Security</st>** <st c="52442">is</st>
    **<st c="52446">Secret scanning</st>**<st c="52461">, which scans for secrets
    within your existing</st> <st c="52508">source code.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="52520">When</st> **<st c="52526">GitHub Advanced Security</st>** <st
    c="52550">for Azure DevOps is enabled, secret scanning starts in the background,
    and it generates secret scanning alerts.</st> <st c="52663">You can find these
    by going to the</st> **<st c="52698">Advanced Security</st>** <st c="52715">tab’s</st>
    **<st c="52722">Repos</st>** <st c="52727">|</st> **<st c="52730">Advanced Security</st>**
    <st c="52747">area, then clicking the</st> **<st c="52772">Secrets</st>** <st
    c="52779">tab.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="52784">First, we need to enable</st> **<st c="52810">GitHub Advanced
    Security</st>**<st c="52834">. You can enable</st> **<st c="52851">Advanced Security</st>**
    <st c="52868">at the organization, project, or repository level.</st> <st c="52920">We
    will enable it for our repository by navigating to</st> **<st c="52974">Project
    Settings</st>** <st c="52990">|</st> **<st c="52993">Repos</st>** <st c="52998">|</st>
    **<st c="53001">Repositories</st>** <st c="53013">and selecting the</st> **<st
    c="53032">eShopOnWeb</st>** <st c="53042">repository.</st> <st c="53055">Under</st>
    **<st c="53061">Settings</st>**<st c="53069">, toggle the</st> **<st c="53082">Advanced
    Security</st>** <st c="53099">button.</st> <st c="53108">A popup to enable and
    begin billing will appear.</st> <st c="53157">Click the</st> **<st c="53167">Begin</st>**
    **<st c="53173">Billing</st>** <st c="53180">button:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.26 – Enabling Advanced Security](img/B19710_05_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="54052">Figure 5.26 – Enabling Advanced Security</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="54092">Secret</st> <st c="54100">scanning push protection and repository
    scanning are now</st> <st c="54157">enabled automatically:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.27 – Secret scanning push protection and secret scanning repo scanning
    enabled once Advanced Security and Block secrets on push are checked](img/B19710_05_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="54574">Figure 5.27 – Secret scanning push protection and secret scanning
    repo scanning enabled once Advanced Security and Block secrets on push are checked</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="54722">Push protection alerts are issued by push protection whenever
    secrets are identified before a commit.</st> <st c="54825">These alerts are issued
    via the command line, Azure DevOps web interface, and even through</st> <st c="54916">your
    IDE.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="54925">Let’s try to commit a file with secrets and see if</st> <st c="54977">it’s
    blocked:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="54990">Navigate to</st> **<st c="55003">Repos</st>**<st c="55008">, select
    the three dots at the top right, and choose</st> **<st c="55061">New</st>** <st
    c="55064">|</st> **<st c="55067">File</st>**<st c="55071">:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.28 – Creating a new file](img/B19710_05_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="55223">Figure 5.28 – Creating a new file</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="55256">Name the file</st> `<st c="55271">secrets.txt</st>` <st c="55282">and
    click the</st> **<st c="55297">Create</st>** <st c="55303">button.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="55311">Add the</st> <st c="55320">following content to the new file created,
    then click the</st> **<st c="55378">Commit</st>** <st c="55385">button:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*<st c="55457">Figure 5</st>**<st c="55466">.29</st>* <st c="55469">shows the
    secrets file created.</st> <st c="55502">Add the slack</st> <st c="55516">API
    token.</st>'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.29 – Adding secrets to the secrets.txt file](img/B19710_05_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="55650">Figure 5.29 – Adding secrets to the secrets.txt file</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="55702">We’ll see that the push was rejected because it</st> <st c="55751">contains
    secrets:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.30 – File with secrets blocked by Advanced Security](img/B19710_05_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="56208">Figure 5.30 – File with secrets blocked by Advanced Security</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="56268">Now, let’s</st> <st c="56280">learn how to enable push protection</st>
    <st c="56316">on GitHub.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="56326">Task 2 – Enabling push protection on GitHub</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="56370">At this</st> <st c="56379">point, we need to learn how to prevent
    secrets from being committed on GitHub repositories through push protection.</st>
    <st c="56495">Let’s</st> <st c="56501">get started:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="56513">Navigate to the GitHub repository</st> <st c="56548">for</st>
    [<st c="56552">https://github.com/PacktPublishing/eShopContainers</st>](https://github.com/PacktPublishing/eShopContainers)<st
    c="56602">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="56603">Fork the repository to your GitHub.</st> <st c="56640">Make sure
    the repository</st> <st c="56665">is public.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="56675">Now, select the</st> **<st c="56692">Settings</st>** <st c="56700">tab.</st>
    <st c="56706">In the left sidebar, under</st> **<st c="56733">Security</st>**<st
    c="56741">, click</st> **<st c="56749">Code security</st>** **<st c="56763">and
    analysis</st>**<st c="56775">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="56776">Under</st> **<st c="56783">Secret scanning</st>**<st c="56798">,
    enable</st> **<st c="56807">Push protection</st>** <st c="56822">by</st> <st c="56826">clicking</st>
    **<st c="56835">Enable</st>**<st c="56841">:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.31 – Enabling push protection on GitHub](img/B19710_05_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="57131">Figure 5.31 – Enabling push protection on GitHub</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="57179">Secret</st> <st c="57187">scanning as push protection is available
    at the enterprise, organization, and</st> <st c="57265">repository levels.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="57283">Now, let’s try to commit a file with secrets and see if it will</st>
    <st c="57348">be rejected.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="57360">Add a new file by clicking</st> **<st c="57388">Add file</st>**
    <st c="57396">|</st> **<st c="57399">Create</st>** **<st c="57406">new file</st>**<st
    c="57414">:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.32 – Adding a new file on GitHub](img/B19710_05_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="57886">Figure 5.32 – Adding a new file on GitHub</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="57927">Name the file</st> `<st c="57942">secrets.txt</st>`<st c="57953">,
    add the following secrets, and then click</st> **<st c="57997">Commit changes…</st>**<st
    c="58012">:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*<st c="58189">Figure 5</st>**<st c="58198">.33</st>* <st c="58201">shows the
    secrets file</st> <st c="58225">with secrets.</st>'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.33 – Adding secrets to the new file](img/B19710_05_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="58520">Figure 5.33 – Adding secrets to the new file</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="58564">The commit</st> <st c="58576">will be rejected because the secrets
    were detected using</st> <st c="58633">push protection:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.34 – Commit rejected due to secrets in the source code](img/B19710_05_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="59457">Figure 5.34 – Commit rejected due to secrets in the source code</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="59520">You can now try to commit using other platforms, such as VS Code.</st>
    <st c="59587">The commits will</st> <st c="59604">be rejected.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="59616">Task 3 – Reviewing dependencies on GitHub</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="59658">For this</st> <st c="59668">task, we’ll check on the security
    vulnerabilities available in our dependencies.</st> <st c="59749">We will</st>
    <st c="59757">review the dependency graph, export the dependencies as a</st> **<st
    c="59815">software bill of materials</st>** <st c="59841">(</st>**<st c="59843">SBOM</st>**<st
    c="59847">), and perform a dependency review using Dependabot.</st> <st c="59901">Follow</st>
    <st c="59908">these steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="59920">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="59925">The tool that we’ll be using for this task works for the GitHub
    platform.</st> <st c="60000">For other SCM platforms, Microsoft has a public one
    for SBOM generation that can be accessed</st> <st c="60093">here:</st> [<st c="60099">https://github.com/microsoft/sbom-tool</st>](https://github.com/microsoft/sbom-tool)<st
    c="60137">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60138">First, let’s configure the dependency graph so that it can identify
    all our project dependencies and dependents.</st> <st c="60252">Each dependency
    will have license information and its vulnerability severity specified.</st> <st
    c="60340">The dependency graph is automatically generated for all public repositories
    and can be enabled for private repositories</st> <st c="60460">as well.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="60468">To enable the dependency graph on a private repository, navigate
    to</st> **<st c="60537">Settings</st>** <st c="60545">|</st> **<st c="60548">Code
    security and analysis</st>** <st c="60574">(under</st> **<st c="60582">Security</st>**<st
    c="60590">) |</st> **<st c="60595">Dependency graph</st>** <st c="60611">and</st>
    <st c="60616">click</st> **<st c="60622">Enable</st>**<st c="60628">:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.35 – Dependency graph](img/B19710_05_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="60685">Figure 5.35 – Dependency graph</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60715">You can view the dependency graph by navigating</st> <st c="60764">to</st>
    **<st c="60767">Insights</st>**<st c="60775">:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.36 – Insights](img/B19710_05_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="60863">Figure 5.36 – Insights</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60885">Then, click</st> **<st c="60898">Dependency graph</st>**<st c="60914">:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.37 – Dependency graph under Insights](img/B19710_05_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="61078">Figure 5.37 – Dependency graph under Insights</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="61123">After</st> <st c="61130">clicking the</st> **<st c="61143">Dependency
    graph</st>** <st c="61159">option on the sidebar, the list of dependencies will
    be listed with details of their versions and security severity.</st> <st c="61277">For
    each of the dependencies, there will be details of the manifest file it was found
    in, as well as</st> <st c="61378">its license:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.38 – Dependency graph details](img/B19710_05_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="62145">Figure 5.38 – Dependency graph details</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="62183">You can</st> <st c="62192">also export an SBO</st><st c="62210">M
    for your repository from the dependency graph.</st> <st c="62260">SBOMs show open
    source usage and supply chain vulnerabilities.</st> <st c="62323">The SBOM will
    be generated in SPDX format via the GitHub user interface or the</st> <st c="62402">REST
    API.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="62411">An SBOM is a structured and machine-readable list detailing a
    project’s dependencies, along with relevant information such as versions, package
    identifiers, and licenses.</st> <st c="62583">SBOMs play a crucial role in mitigating
    supply chain risks by doing</st> <st c="62651">the following:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="62665">Enhancing transparency regarding the dependencies that are employed
    in</st> <st c="62737">your repository</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="62752">Facilitating early detection of vulnerabilities within the</st>
    <st c="62812">development process</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="62831">Offering insights into potential license compliance, security,
    or quality issues present in your</st> <st c="62929">code base</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="62938">Empowering adherence to various data protection standards for</st>
    <st c="63001">improved compliance</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="63020">To generate the SBOM, click</st> **<st c="63049">Export SBOM</st>**<st
    c="63060">:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.39 – Export SBOM](img/B19710_05_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="63852">Figure 5.39 – Export SBOM</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="63877">The</st> <st c="63882">export will be in a machine-readable format
    so that the data can be</st> <st c="63950">processed further.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="63968">Lastly, let’s enable Dependabot.</st> <st c="64002">You can enable
    it by going to</st> **<st c="64032">Settings</st>** <st c="64040">|</st> **<st
    c="64043">Code security and analysis</st>** <st c="64069">|</st> **<st c="64072">Dependency
    alerts</st>** <st c="64089">and choosing</st> **<st c="64103">Enable all or directly</st>**
    <st c="64125">from the</st> **<st c="64135">Dependency graph</st>** <st c="64151">page,
    as</st> <st c="64161">shown here:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.40 – Enabling Dependabot from the Dependency graph page](img/B19710_05_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="64411">Figure 5.40 – Enabling Dependabot from the Dependency graph page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="64475">Either of the two options work.</st> <st c="64508">This will prompt
    a new workflow and the security vulnerabilities from Dependabot will be available
    in the</st> **<st c="64614">Security</st>** <st c="64622">tab:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.41 – Dependabot alerts on GitHub (126 Dependabot alerts on the left)](img/B19710_05_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="65335">Figure 5.41 – Dependabot alerts on GitHub (126 Dependabot alerts
    on the left)</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="65412">Go through</st> <st c="65424">the issues found by Dependabot and
    review the severity of the</st> <st c="65486">security vulnerabilities.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="65511">Summary</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="65519">In this chapter, we examined two primary security concerns for
    the source control phase of DevOps.</st> <st c="65619">First, we looked at guidelines
    that we can follow to implement a protected source control environment.</st> <st
    c="65722">Second, we tackled how to integrate security tools to identify and remediate
    common coding errors that can lead to</st> <st c="65837">security issues.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="65853">In the upcoming chapter, we will discuss implementing security
    in the BUILD and TEST phases</st> <st c="65946">of DevOps.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="0">Part 3: Securing the Build, Test, Release, and Operate Phases of
    DevOps</st>'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="72">In this part, you will explore the best security practices in the
    Build, Test, Release, and Operate phases in the</st> <st c="187">Azure cloud.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="199">This part contains the</st> <st c="223">following chapters:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[*<st c="242">Chapter 6</st>*](B19710_06.xhtml#_idTextAnchor122)<st c="252">,</st>
    *<st c="254">Implementing Security in the Build Phase of DevOps</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*<st c="304">Chapter 7</st>*](B19710_07.xhtml#_idTextAnchor145)<st c="314">,</st>
    *<st c="316">Implementing Security in the Test and Release Phases of DevOps</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*<st c="378">Chapter 8</st>*](B19710_08.xhtml#_idTextAnchor168)<st c="388">,</st>
    *<st c="390">Continuous Security Monitoring on Azure</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
