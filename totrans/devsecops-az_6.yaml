- en: <st c="0">6</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">6</st>
- en: <st c="2">Implementing Security in the Build Phase of DevOps</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">在DevOps的构建阶段实施安全措施</st>
- en: <st c="52">The goal of the</st> **<st c="69">build</st>** <st c="74">phase is</st>
    <st c="83">to make sure the code compiles successfully and is ready to use.</st>
    <st c="149">Implementing DevSecOps for these phases should include checking for
    vulnerabilities in the code before it is compiled, protecting the build process
    against security vulnerabilities and misconfigurations that could compromise the
    integrity of the code, and ensuring that the compiled application does not contain
    any security vulnerabilities that could compromise system or</st> <st c="522">user
    data.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="52">构建</st> **<st c="69">阶段的目标是</st>** <st c="74">确保代码成功编译并准备就绪。</st>
    <st c="83">实施DevSecOps的这些阶段应包括在编译之前检查代码中的漏洞，保护构建过程免受可能危及代码完整性的安全漏洞和配置错误，并确保编译后的应用程序不包含可能危害系统或</st>
    <st c="522">用户数据的安全漏洞。</st>
- en: <st c="532">By the end of this chapter, you will have a solid understanding
    of</st> <st c="600">the following:</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="532">通过本章的学习，您将对以下内容有一个坚实的理解：</st>
- en: <st c="614">Hardening our build process to make it</st> <st c="654">more secure</st>
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="614">加强我们的构建过程以使其</st> **<st c="654">更加安全</st>**
- en: <st c="665">Integrating SAST, SCA, and secret scanning into the</st> <st c="718">build
    process</st>
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="665">将SAST、SCA和密钥扫描集成到</st> **<st c="718">构建过程</st>**
- en: <st c="731">Let’s</st> <st c="738">get started!</st>
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="731">让我们</st> **<st c="738">开始吧！</st>**
- en: <st c="750">Technical requirements</st>
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="750">技术要求</st>
- en: <st c="773">To follow along with the instructions in this chapter, you will
    need</st> <st c="843">the following:</st>
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="773">要按照本章的说明进行操作，您需要</st> **<st c="843">以下内容：</st>**
- en: <st c="857">A PC with an</st> <st c="871">internet connection</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="857">一台带有</st> **<st c="871">互联网连接的</st>** <st c="883">PC</st>
- en: <st c="890">An active</st> <st c="901">Azure subscription</st>
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="890">一个活跃的</st> **<st c="901">Azure订阅</st>**
- en: <st c="919">An Azure</st> <st c="929">DevOps organization</st>
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="919">一个</st> **<st c="929">Azure DevOps组织</st>**
- en: <st c="948">A GitHub</st> <st c="958">Enterprise organization</st>
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="948">一个</st> **<st c="958">GitHub企业组织</st>**
- en: <st c="981">Understanding the continuous build and test phases of DevOps</st>
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="981">理解DevOps的持续构建和测试阶段</st>
- en: <st c="1042">In the opening</st> <st c="1058">chapter of this book, we talked
    about the five core practices of DevOps.</st> <st c="1131">The third practice
    that we covered</st> <st c="1166">was</st> **<st c="1170">continuous integration</st>**<st
    c="1192">, or</st> **<st c="1197">CI</st>** <st c="1199">for short.</st> <st c="1211">CI
    is a development practice where developers integrate source code changes frequently
    by committing and pushing code into a shared repository.</st> <st c="1355">Each
    code commit then goes through an automated code validation process.</st> <st c="1428">The
    goal is to ensure that new code changes are continuously validated to ensure they
    integrate well with the existing code base and do not introduce</st> <st c="1578">any
    errors.</st>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1042">在本书的开篇</st> <st c="1058">章节中，我们讨论了DevOps的五个核心实践。</st> <st c="1131">我们涵盖的第三个实践是</st>
    **<st c="1166">持续集成</st>**<st c="1192">，或者简称</st> **<st c="1197">CI</st>** <st
    c="1199">。</st> <st c="1211">CI是一种开发实践，开发人员通过将代码提交并推送到共享存储库中频繁地集成源代码更改。</st> <st
    c="1355">然后，每个代码提交都会经历自动化的代码验证过程。</st> <st c="1428">其目标是确保新的代码更改持续验证，以确保其与现有代码库良好集成并不引入</st>
    <st c="1578">任何错误。</st>
- en: '*<st c="1589">Figure 6</st>**<st c="1598">.1</st>* <st c="1600">shows an example
    of this.</st> <st c="1627">In this scenario, a developer commits code changes
    to a feature branch they are working on (for example,</st> `<st c="1732">chatbot</st>`
    <st c="1739">or</st> `<st c="1743">search</st>`<st c="1749">) and pushes the changes
    to the central repository (marked as</st> **<st c="1812">1</st>** <st c="1813">in</st>
    *<st c="1817">Figure 6</st>**<st c="1825">.1</st>*<st c="1827">).</st> <st c="1831">This
    push action initiates an automated build and test process (marked as</st> **<st
    c="1905">2</st>** <st c="1906">in</st> *<st c="1910">Figure 6</st>**<st c="1918">.1</st>*<st
    c="1920">).</st> <st c="1924">The CI system pulls the latest code (including the
    new changes) from source control, compiles it to ensure that it builds successfully,
    and prepares it for testing (marked as</st> **<st c="2099">3</st>** <st c="2100">in</st>
    *<st c="2104">Figure 6</st>**<st c="2112">.1</st>*<st c="2114">).</st> <st c="2118">If
    the build succeeds, it runs automated tests to verify code quality (marked as</st>
    **<st c="2199">4</st>** <st c="2200">in</st> *<st c="2204">Figure 6</st>**<st
    c="2212">.1</st>*<st c="2214">).</st> <st c="2218">If the build or test fails,
    the CI system alerts the developer with information on the issues that were identified
    and preferably guidance on how to correct the issues (marked as</st> **<st c="2397">5</st>**
    <st c="2398">in</st> *<st c="2402">Figure 6</st>**<st c="2410">.1</st>*<st c="2412">).</st>'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="1589">图 6</st>**<st c="1598">.1</st>* <st c="1600">展示了这个示例。</st> <st
    c="1627">在这种情况下，开发人员将代码更改提交到他们正在开发的功能分支（例如，</st> `<st c="1732">聊天机器人</st>` <st
    c="1739">或</st> `<st c="1743">搜索</st>`<st c="1749">），并将更改推送到中央代码库（标记为</st> **<st
    c="1812">1</st>** <st c="1813">在</st> *<st c="1817">图 6</st>**<st c="1825">.1</st>*<st
    c="1827">）。</st> <st c="1831">此推送操作触发了自动构建和测试过程（标记为</st> **<st c="1905">2</st>**
    <st c="1906">在</st> *<st c="1910">图 6</st>**<st c="1918">.1</st>*<st c="1920">）。</st>
    <st c="1924">CI 系统从源代码管理中拉取最新的代码（包括新的更改），编译以确保构建成功，并为测试做准备（标记为</st> **<st c="2099">3</st>**
    <st c="2100">在</st> *<st c="2104">图 6</st>**<st c="2112">.1</st>*<st c="2114">）。</st>
    <st c="2118">如果构建成功，它会运行自动化测试来验证代码质量（标记为</st> **<st c="2199">4</st>** <st c="2200">在</st>
    *<st c="2204">图 6</st>**<st c="2212">.1</st>*<st c="2214">）。</st> <st c="2218">如果构建或测试失败，CI
    系统会提醒开发人员，提供关于已识别问题的信息，并最好提供如何修复这些问题的指导（标记为</st> **<st c="2397">5</st>** <st c="2398">在</st>
    *<st c="2402">图 6</st>**<st c="2410">.1</st>*<st c="2412">）。</st>'
- en: '![Figure 6.1 – CI example scenario](img/B19710_06_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – CI 示例场景](img/B19710_06_01.jpg)'
- en: <st c="2567">Figure 6.1 – CI example scenario</st>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2567">图 6.1 – CI 示例场景</st>
- en: <st c="2599">If the CI process is successful, the developer can</st> <st c="2651">create
    a</st> **<st c="2660">Pull Request</st>** <st c="2672">(</st>**<st c="2674">PR</st>**<st
    c="2676">) to merge changes from the feature branch into the main branch (marked
    as</st> *<st c="2752">6</st>* <st c="2753">in</st> *<st c="2757">Figure 6</st>**<st
    c="2765">.2</st>*<st c="2767">).</st> <st c="2771">The main branch represents
    the code base that will be deployed to production and is usually protected with
    branch protection policies (marked as</st> **<st c="2916">7</st>** <st c="2917">in</st>
    *<st c="2921">Figure 6</st>**<st c="2929">.2</st>*<st c="2931">).</st> <st c="2935">This
    can include policies such as minimum number of reviewers, automated build and
    test pipeline status, and other necessary conditions that need to be met.</st>
    <st c="3092">As part of the PR process, the code is reviewed by other developers
    or automated systems to ensure it meets the team’s standards</st> <st c="3221">and
    practices.</st>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2599">如果 CI 过程成功，开发人员可以</st> <st c="2651">创建一个</st> **<st c="2660">拉取请求</st>**
    <st c="2672">(</st>**<st c="2674">PR</st>**<st c="2676">) 将功能分支中的更改合并到主分支中（标记为</st>
    *<st c="2752">6</st>* <st c="2753">在</st> *<st c="2757">图 6</st>**<st c="2765">.2</st>*<st
    c="2767">）。</st> <st c="2771">主分支代表将部署到生产环境的代码库，通常会受到分支保护策略的保护（标记为</st> **<st
    c="2916">7</st>** <st c="2917">在</st> *<st c="2921">图 6</st>**<st c="2929">.2</st>*<st
    c="2931">）。</st> <st c="2935">这可能包括如最少审阅者数量、自动化构建和测试管道状态，以及需要满足的其他必要条件。</st> <st
    c="3092">作为 PR 过程的一部分，代码会被其他开发人员或自动化系统审查，以确保其符合团队的标准</st> <st c="3221">和实践。</st>
- en: <st c="3235">If the CI process completes successfully, the developer can submit
    a PR to merge/combine their feature branch changes into the main branch (marked
    as</st> **<st c="3386">10</st>** <st c="3388">in</st> *<st c="3392">Figure 6</st>**<st
    c="3400">.2</st>*<st c="3402">).</st> <st c="3406">The main branch is the code
    that will go into production and is usually secured with branch protection rules,
    such as requiring a certain number of reviewers (marked as</st> **<st c="3575">8</st>**
    <st c="3576">in</st> *<st c="3580">Figure 6</st>**<st c="3588">.2</st>*<st c="3590">)
    and passing automated tests (marked as</st> **<st c="3632">9</st>** <st c="3633">in</st>
    *<st c="3637">Figure 6</st>**<st c="3645">.2</st>*<st c="3647">).</st> <st c="3651">During
    the PR process, the code goes through another build, additional automated checks,
    and review by</st> <st c="3753">other developers to ensure it adheres to the team’s</st>
    <st c="3806">quality standards.</st>
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3235">如果CI过程成功完成，开发人员可以提交PR，将其功能分支的更改合并到主分支（标记为</st> **<st c="3386">10</st>**
    <st c="3388">在</st> *<st c="3392">图6</st>**<st c="3400">.2</st>*<st c="3402">）。</st>
    <st c="3406">主分支是将要进入生产的代码，通常会使用分支保护规则进行保护，例如要求一定数量的审阅者（标记为</st> **<st c="3575">8</st>**
    <st c="3576">在</st> *<st c="3580">图6</st>**<st c="3588">.2</st>*<st c="3590">）并通过自动化测试（标记为</st>
    **<st c="3632">9</st>** <st c="3633">在</st> *<st c="3637">图6</st>**<st c="3645">.2</st>*<st
    c="3647">）。</st> <st c="3651">在PR过程中，代码将经过另一次构建、额外的自动化检查，并由</st> <st c="3753">其他开发人员进行审查，以确保其符合团队的</st>
    <st c="3806">质量标准。</st>
- en: '![Figure 6.2 – PR example scenario](img/B19710_06_02.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – PR 示例场景](img/B19710_06_02.jpg)'
- en: <st c="3989">Figure 6.2 – PR example scenario</st>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3989">图 6.2 – PR 示例场景</st>
- en: <st c="4021">When the PR meets all criteria set by the branch protection rules,
    including successful automated tests (marked as</st> **<st c="4137">7</st>** <st
    c="4138">in</st> *<st c="4142">Figure 6</st>**<st c="4150">.2</st>*<st c="4152">)
    and approval by the defined number of reviewers (marked as</st> **<st c="4214">8</st>**
    <st c="4215">in</st> *<st c="4219">Figure 6</st>**<st c="4227">.2</st>*<st c="4229">),
    the code changes are then merged into the main branch (marked as</st> **<st c="4298">9</st>**
    <st c="4299">in</st> *<st c="4303">Figure 6</st>**<st c="4311">.2</st>*<st c="4313">).</st>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4021">当PR满足分支保护规则所设定的所有标准，包括成功的自动化测试（标记为</st> **<st c="4137">7</st>**
    <st c="4138">在</st> *<st c="4142">图6</st>**<st c="4150">.2</st>*<st c="4152">）以及定义的审阅者数量批准（标记为</st>
    **<st c="4214">8</st>** <st c="4215">在</st> *<st c="4219">图6</st>**<st c="4227">.2</st>*<st
    c="4229">），代码更改随后会被合并到主分支（标记为</st> **<st c="4298">9</st>** <st c="4299">在</st>
    *<st c="4303">图6</st>**<st c="4311">.2</st>*<st c="4313">）。</st>
- en: <st c="4316">After changes are merged, another pipeline can be triggered to
    validate that the new code integrates well in the larger context of the entire
    project and to publish an artifact that can be deployed (marked as</st> **<st
    c="4526">1</st>** <st c="4527">in</st> *<st c="4531">Figure 6</st>**<st c="4539">.3</st>*<st
    c="4541">).</st> <st c="4545">This process involves running an additional set
    of tests on the merged code to ensure it works correctly with the existing code
    base.</st> <st c="4679">It may also include additional validation steps such as
    deploying the code to a staging environment for further end-to-end tests, smoke
    tests, or other checks before production.</st> <st c="4857">If these validations
    are successful, the code is then packaged and prepared for deployment (marked
    as</st> **<st c="4959">2</st>** <st c="4960">in</st> *<st c="4964">Figure 6</st>**<st
    c="4972">.3</st>*<st c="4974">).</st>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4316">在更改合并后，可以触发另一个流水线，验证新代码是否能够在整个项目的大环境中良好集成，并发布一个可以部署的构件（标记为</st>
    **<st c="4526">1</st>** <st c="4527">在</st> *<st c="4531">图6</st>**<st c="4539">.3</st>*<st
    c="4541">）。</st> <st c="4545">该过程包括在合并后的代码上运行额外的测试，以确保它与现有的代码库正确协作。</st> <st c="4679">它可能还包括额外的验证步骤，例如将代码部署到暂存环境中，进行端到端测试、冒烟测试或在生产之前的其他检查。</st>
    <st c="4857">如果这些验证成功，则代码将被打包并准备好部署（标记为</st> **<st c="4959">2</st>** <st c="4960">在</st>
    *<st c="4964">图6</st>**<st c="4972">.3</st>*<st c="4974">）。</st>
- en: '![Figure 6.3 – CI combined with PR scenario](img/B19710_06_03.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – CI 与 PR 场景结合](img/B19710_06_03.jpg)'
- en: <st c="5239">Figure 6.3 – CI combined with PR scenario</st>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5239">图 6.3 – CI 与 PR 场景结合</st>
- en: <st c="5280">The scenario described is only an example of how an organization
    might set up CI for feature and main</st> <st c="5382">branches, along with PRs
    for various automated code assessments in a DevOps setting.</st> <st c="5468">Each
    organization may use different methods to</st> <st c="5515">achieve this.</st>
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5280">所描述的场景仅是一个示例，展示了组织如何为功能分支和主分支以及在 DevOps 环境中的各种自动化代码评估设置 CI。</st>
    <st c="5382">每个组织可能使用不同的方法来</st> <st c="5468">实现这一目标。</st> <st c="5515">实现这一目标。</st>
- en: <st c="5528">Understanding build system options</st>
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="5528">了解构建系统选项</st>
- en: <st c="5563">To automate builds</st> <st c="5582">and tests, development and
    DevOps teams</st> <st c="5623">use a build environment.</st> <st c="5648">This
    environment is used to define everything related to the automation of the organization’s
    software build—the orchestrator, the pipeline executor, and the location where
    build</st> <st c="5827">workers operate.</st>
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5563">为了自动化构建</st> <st c="5582">和测试，开发和 DevOps 团队</st> <st c="5623">使用构建环境。</st>
    <st c="5648">该环境用于定义与组织软件构建自动化相关的所有内容——调度器、流水线执行器以及构建</st> <st c="5827">工作者操作的地点。</st>
- en: <st c="5843">Microsoft offers two services for this:</st> **<st c="5884">GitHub
    Actions</st>** <st c="5898">and</st> **<st c="5903">Azure Pipelines</st>**<st
    c="5918">. GitHub Actions is available within</st> <st c="5954">the</st> <st c="5958">GitHub
    platform, while Azure Pipelines is a part of the Azure DevOps platform.</st> <st
    c="6038">Both services are tightly integrated with the Azure cloud and rank among
    the top four CI tools, according to a recent survey by JetBrains (</st>*<st c="6177">Figure
    6</st>**<st c="6186">.4</st>*<st c="6188">).</st>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5843">Microsoft 提供了两项服务：</st> **<st c="5884">GitHub Actions</st>** <st
    c="5898">和</st> **<st c="5903">Azure Pipelines</st>**<st c="5918">。GitHub Actions
    可在</st> <st c="5954">GitHub 平台内使用，而 Azure Pipelines 是 Azure DevOps 平台的一部分。</st>
    <st c="6038">这两项服务都与 Azure 云深度集成，并且根据 JetBrains 最近的调查，它们位列前四大 CI 工具（</st>*<st
    c="6177">图 6</st>**<st c="6186">.4</st>*<st c="6188">）。</st>
- en: '![Figure 6.4 – JetBrains Developer Ecosystem report 2022](img/B19710_06_04.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – JetBrains 开发者生态系统报告 2022](img/B19710_06_04.jpg)'
- en: <st c="6476">Figure 6.4 – JetBrains Developer Ecosystem report 2022</st>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6476">图 6.4 – JetBrains 开发者生态系统报告 2022</st>
- en: <st c="6530">Using a build</st> <st c="6544">system, developers create</st>
    `<st c="6907">.github/workflows</st>` <st c="6924">folder of the code repository.</st>
    <st c="6956">In Azure Pipelines, they are called</st> **<st c="6992">pipelines</st>**
    <st c="7001">and</st> <st c="7005">can either be created visually using the web
    console or with code</st> <st c="7072">using YAML.</st>
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6530">使用构建</st> <st c="6544">系统，开发人员创建</st> `<st c="6907">.github/workflows</st>`
    <st c="6924">代码库中的文件夹。</st> <st c="6956">在 Azure Pipelines 中，它们被称为</st> **<st
    c="6992">流水线</st>** <st c="7001">并且</st> <st c="7005">可以通过网页控制台可视化创建，也可以使用</st>
    <st c="7072">YAML 代码创建。</st>
- en: <st c="7083">A pipeline definition usually has six core components to it regardless
    of whether you are using GitHub Actions or Azure Pipelines, as shown in the</st>
    <st c="7231">following diagram:</st>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7083">无论使用 GitHub Actions 还是 Azure Pipelines，流水线定义通常包含六个核心组件，如下图所示：</st>
    <st c="7231">以下图所示：</st>
- en: '![Figure 6.5 – Six core components of a pipeline definition](img/B19710_06_05.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.5 – 流水线定义的六个核心组件](img/B19710_06_05.jpg)'
- en: <st c="7422">Figure 6.5 – Six core components of a pipeline definition</st>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7422">图 6.5 – 流水线定义的六个核心组件</st>
- en: <st c="7479">Here is a brief</st> <st c="7496">description</st> <st c="7507">of
    these</st> <st c="7517">six components:</st>
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7479">以下是这六个组件的简要</st> <st c="7496">描述：</st>
- en: '**<st c="7532">Trigger</st>**<st c="7540">: A trigger is a</st> <st c="7558">condition
    or an event that starts the execution of a pipeline.</st> <st c="7621">This can
    be when someone pushes code to a repository (CI trigger) or creates a PR (PR trigger),
    at a scheduled time or when another build finishes.</st> <st c="7769">At the time
    of writing, GitHub Actions supports 36 events that can start a pipeline (workflow),
    while Azure Pipelines offers different triggers based on where your code is stored.</st>
    <st c="7949">If the code is in Azure Repos, developers can use triggers such as
    code pushes or PRs.</st> <st c="8036">If the code is in third-party repositories
    such as Bitbucket or GitLab, Azure Pipelines can still work with them, but the
    available triggers might be</st> <st c="8186">more limited.</st>'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**<st c="7532">触发器</st>**<st c="7540">：触发器是启动流水线执行的</st> <st c="7558">条件或事件。</st>
    <st c="7621">这可以是在某人将代码推送到仓库时（CI 触发器），或者创建了一个拉取请求（PR 触发器），也可以是在预定的时间或其他构建完成时。</st>
    <st c="7769">在写作时，GitHub Actions 支持 36 种事件，可以启动一个流水线（工作流），而 Azure Pipelines 提供了根据代码存储位置不同而有不同的触发器。</st>
    <st c="7949">如果代码在 Azure Repos 中，开发人员可以使用触发器，例如代码推送或 PR。</st> <st c="8036">如果代码在第三方仓库中，例如
    Bitbucket 或 GitLab，Azure Pipelines 仍然可以与它们一起工作，但可用的触发器可能会</st> <st c="8186">更加有限。</st>'
- en: '**<st c="8199">Pipeline/workflow</st>**<st c="8217">: A pipeline or workflow
    is a set of automated steps that handle the building, testing, and deployment
    of code (we will cover testing and deployment in the next chapter).</st> <st c="8389">Azure
    DevOps calls this a pipeline, while GitHub Actions uses the term workflow.</st>
    <st c="8470">These processes include various stages, jobs, and steps that take
    code from its raw state through building, testing, and eventually deployment.</st>
    <st c="8614">The exact structure and components can vary depending on</st> <st
    c="8671">the project.</st>'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**<st c="8199">流水线/工作流</st>**<st c="8217">：流水线或工作流是一组自动化步骤，用于处理代码的构建、测试和部署（我们将在下一章讨论测试和部署）。</st>
    <st c="8389">Azure DevOps 将此称为流水线，而 GitHub Actions 使用工作流一词。</st> <st c="8470">这些过程包括各种阶段、作业和步骤，将代码从原始状态带到构建、测试，最终到部署。</st>
    <st c="8614">具体结构和组件可能会根据</st> <st c="8671">项目的不同而有所变化。</st>'
- en: '**<st c="8683">Stage</st>**<st c="8689">: Stages are used to organize the pipeline
    into clear, logical phases.</st> <st c="8761">For example, a pipeline might be
    divided into three stages: build, test, and deploy.</st> <st c="8846">These represent
    the three key phases of taking code from development to production.</st> <st c="8930">When
    multiple stages are defined in Azure DevOps, they run sequentially by default,
    which means that the next stage begins only after the previous one finishes.</st>
    <st c="9091">This default behavior can be modified.</st> <st c="9130">For example,
    developers can configure stages to run in parallel or based on specific conditions.</st>
    <st c="9227">Technically, GitHub Actions does not support stages but</st> **<st
    c="9283">jobs</st>** <st c="9287">can be used for the same purpose of organizing
    workflows into</st> <st c="9350">different phases.</st>'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**<st c="8683">阶段</st>**<st c="8689">：阶段用于将流水线组织成清晰的、逻辑明确的阶段。</st> <st c="8761">例如，流水线可能会分为三个阶段：构建、测试和部署。</st>
    <st c="8846">这些阶段代表了将代码从开发到生产的三个关键步骤。</st> <st c="8930">当在 Azure DevOps 中定义多个阶段时，默认情况下它们是按顺序运行的，这意味着下一个阶段仅在上一个阶段完成后才会开始。</st>
    <st c="9091">这个默认行为是可以修改的。</st> <st c="9130">例如，开发人员可以配置阶段以并行运行或基于特定条件运行。</st>
    <st c="9227">从技术上讲，GitHub Actions 不支持阶段，但</st> **<st c="9283">作业</st>** <st c="9287">可以用于相同的目的，即将工作流组织成</st>
    <st c="9350">不同的阶段。</st>'
- en: '**<st c="9367">Job</st>**<st c="9371">: A pipeline or workflow is made up of
    jobs.</st> <st c="9417">Each job contains steps that run in a defined order.</st>
    <st c="9470">There are three</st> <st c="9485">main</st> <st c="9491">types of</st>
    <st c="9500">jobs:</st> **<st c="9506">agentless jobs</st>**<st c="9520">,</st>
    **<st c="9522">agent jobs</st>**<st c="9532">, and</st> **<st c="9538">container
    jobs</st>**<st c="9552">. Agentless jobs run directly on the platform without
    needing a specific</st> <st c="9625">system or environment set up to run them.</st>
    <st c="9667">They are typically used for simpler tasks, such as adding a delay
    or making simple REST API calls.</st> <st c="9766">Agent jobs need a computer
    to run on, while container jobs require a container to run on.</st> <st c="9856">Most</st>
    <st c="9860">jobs that involve building or testing code use agents or containers,
    not agentless jobs.</st> <st c="9950">Azure DevOps supports all three types, but
    GitHub Actions only works with agent and</st> <st c="10034">container jobs.</st>'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**<st c="9367">作业</st>**<st c="9371">：一个管道或工作流由作业组成。</st> <st c="9417">每个作业包含按顺序运行的步骤。</st>
    <st c="9470">有三</st> <st c="9485">个</st> <st c="9491">主要</st> <st c="9500">类型的</st>
    **<st c="9506">无代理作业</st>**<st c="9520">，</st> **<st c="9522">代理作业</st>**<st c="9532">和</st>
    **<st c="9538">容器作业</st>**<st c="9552">。无代理作业直接在平台上运行，无需特定的</st> <st c="9625">系统或环境设置来运行它们。</st>
    <st c="9667">它们通常用于较简单的任务，如添加延迟或进行简单的 REST API 调用。</st> <st c="9766">代理作业需要计算机来运行，而容器作业则需要容器来运行。</st>
    <st c="9856">大多数</st> <st c="9860">涉及构建或测试代码的作业使用代理或容器，而不是无代理作业。</st> <st c="9950">Azure
    DevOps 支持这三种类型，但 GitHub Actions 仅支持代理和</st> <st c="10034">容器作业。</st>'
- en: '**<st c="10049">Steps</st>**<st c="10055">: These are individual tasks within
    a job.</st> <st c="10099">They can be</st> **<st c="10111">predefined scripts</st>**
    <st c="10129">(called</st> *<st c="10138">tasks</st>* <st c="10143">in Azure</st>
    <st c="10152">DevOps or</st> *<st c="10163">actions</st>* <st c="10170">in GitHub
    Actions) or</st> **<st c="10193">custom scripts</st>** <st c="10207">written by
    developers.</st> <st c="10231">Both Azure DevOps and GitHub Actions allow installing
    additional tasks/actions through marketplace extensions.</st> <st c="10342">A
    common first step in most workflows/pipelines is</st> *<st c="10393">checkout</st>*<st
    c="10401">, which downloads the source code from</st> <st c="10440">the repository.</st>'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**<st c="10049">步骤</st>**<st c="10055">：这些是作业内部的单独任务。</st> <st c="10099">它们可以是</st>
    **<st c="10111">预定义脚本</st>** <st c="10129">(在 Azure</st> *<st c="10138">DevOps
    中称为</st>* *<st c="10143">任务</st>* <st c="10152">或在 GitHub Actions 中称为</st> *<st
    c="10163">操作</st>* <st c="10170">)或</st> **<st c="10193">开发者编写的自定义脚本</st>** <st
    c="10207">。</st> <st c="10231">Azure DevOps 和 GitHub Actions 都允许通过市场扩展安装额外的任务/操作。</st>
    <st c="10342">大多数工作流程/管道中的常见第一步是</st> *<st c="10393">checkout</st>*<st c="10401">，从</st>
    <st c="10440">代码库下载源代码。</st>'
- en: '**<st c="10455">Agent/runner</st>**<st c="10468">: This is the compute system
    that runs automated tasks.</st> <st c="10525">It can be a physical system, a virtual
    machine, or container that is set up to run GitHub workflows or Azure DevOps pipeline
    jobs.</st> <st c="10656">In GitHub Actions, it is called a</st> *<st c="10690">runner</st>*<st
    c="10696">. In Azure</st> <st c="10706">DevOps, it is called</st> <st c="10728">an</st>
    *<st c="10731">agent</st>*<st c="10736">.</st>'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**<st c="10455">代理/运行器</st>**<st c="10468">：这是运行自动化任务的计算系统。</st> <st c="10525">它可以是物理系统、虚拟机或容器，用于运行
    GitHub 工作流或 Azure DevOps 管道作业。</st> <st c="10656">在 GitHub Actions 中称为</st> *<st
    c="10690">运行器</st>*<st c="10696">。在 Azure</st> <st c="10706">DevOps 中称为</st> *<st
    c="10728">代理</st>*<st c="10736">。</st>'
- en: <st c="10737">Now that we have</st> <st c="10754">some understanding of the
    core components of a pipeline, let us turn our attention to securing the</st>
    <st c="10854">build phase.</st>
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10737">现在我们已经</st> <st c="10754">对管道的核心组件有了一些理解，让我们把注意力转向保护</st> <st
    c="10854">构建阶段。</st>
- en: <st c="10866">Understanding the security measures in the build phase</st>
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="10866">构建阶段中安全措施的理解</st>
- en: <st c="10921">A CI system has broad</st> <st c="10944">access to an organization’s
    source code and service</st> <st c="10996">credentials used during the build process.</st>
    <st c="11039">A compromise might lead to serious security breaches, such as malicious
    code alteration or credential theft, leading to unauthorized access to sensitive
    services such as cloud infrastructure and databases.</st> <st c="11245">To guard
    against these threats, focus should be directed toward two</st> <st c="11313">main
    areas:</st>
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10921">CI系统广泛</st> <st c="10944">访问组织的源代码和在构建过程中使用的服务</st> <st c="10996">凭证。</st>
    <st c="11039">若发生泄露，可能导致严重的安全漏洞，如恶意代码篡改或凭证盗窃，从而导致未经授权的访问敏感服务，如云基础设施和数据库。</st>
    <st c="11245">为防范这些威胁，应将重点放在两个</st> <st c="11313">主要领域：</st>
- en: '**<st c="11324">Securing CI environments and processes</st>**<st c="11363">:
    This involves implementing measures to protect the build and test environments
    from unauthorized access, code injections, and other threats that could compromise</st>
    <st c="11528">the system.</st>'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="11324">保护CI环境和流程</st>**<st c="11363">：这包括采取措施保护构建和测试环境免受未经授权的访问、代码注入以及可能危及</st>
    <st c="11528">系统的其他威胁。</st>'
- en: '**<st c="11539">Addressing common coding security issues</st>**<st c="11580">:
    Building on principles from previous chapter discussions, this aspect focuses
    on identifying and resolving typical security vulnerabilities within the code
    (first-party and third-party) during the build and test phases.</st> <st c="11803">It
    involves integrating security code reviews, automated security scanning, and enforcing
    best coding practices as part of our continuous tests to reduce potential</st>
    <st c="11967">security risks.</st>'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="11539">解决常见的编码安全问题</st>**<st c="11580">：基于前一章讨论的原则，本节重点在于识别和解决在构建和测试阶段（包括第一方和第三方代码）中常见的安全漏洞。</st>
    <st c="11803">它涉及将安全代码审查、自动化安全扫描和执行最佳编码实践作为我们持续测试的一部分，以减少潜在的</st> <st c="11967">安全风险。</st>'
- en: '![Figure 6.6 – Two primary categories of security measures in the build and
    test phases of DevOps](img/B19710_06_06.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6 – DevOps构建和测试阶段的两大主要安全措施类别](img/B19710_06_06.jpg)'
- en: <st c="12063">Figure 6.6 – Two primary categories of security measures in the
    build and test phases of DevOps</st>
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12063">图 6.6 – DevOps构建和测试阶段的两大主要安全措施类别</st>
- en: <st c="12158">Let us start by</st> <st c="12175">addressing the first category—securing
    CI</st> <st c="12217">environments</st> <st c="12230">and processes.</st>
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12158">让我们从</st> <st c="12175">处理第一类问题——保护CI环境</st> <st c="12217">和流程开始。</st>
- en: <st c="12244">Securing CI environments and processes</st>
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="12244">保护CI环境和流程</st>
- en: <st c="12283">In a DevOps workflow, securing</st> <st c="12315">the source code
    management platform is essential for maintaining the integrity of software releases.</st>
    <st c="12416">For example, we want to make sure that only trusted and verified
    contributors are allowed to make any changes to the code, and that third-party
    plugins are rigorously evaluated and monitored for security vulnerabilities.</st>
    <st c="12637">To achieve this, we strongly recommend adhering to the guidelines
    outlined in the</st> *<st c="12719">Source Code</st>* <st c="12730">section of</st>
    <st c="12742">the</st> **<st c="12746">Center for Internet Security</st>** <st
    c="12774">(</st>**<st c="12776">CIS</st>**<st c="12779">) Software Supply Chain</st>
    <st c="12804">Security Guide.</st>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12283">在DevOps工作流中，确保</st> <st c="12315">源代码管理平台的安全性对于维护软件发布的完整性至关重要。</st>
    <st c="12416">例如，我们需要确保只有受信任和经过验证的贡献者可以对代码进行任何更改，并且第三方插件需要经过严格评估和监控，以发现安全漏洞。</st>
    <st c="12637">为了实现这一目标，我们强烈建议遵循</st> *<st c="12719">源代码</st>* <st c="12730">部分中概述的指南，</st>
    **<st c="12746">互联网安全中心</st>** <st c="12774">(</st>**<st c="12776">CIS</st>**<st
    c="12779">) 软件供应链</st> <st c="12804">安全指南。</st>
- en: <st c="12819">CIS Software Supply Chain Security Guide</st>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12819">CIS软件供应链安全指南</st>
- en: '<st c="12860">The CIS Software Supply Chain Security Guide provides</st> <st
    c="12915">a comprehensive framework for secure software supply chain management.</st>
    <st c="12986">The guide currently consists of 100+ recommendations organized into
    five main categories: source code, build pipelines, dependencies, artifacts, and
    deployment.</st> <st c="13147">To access the full guide, you can download it from
    this</st> <st c="13203">link:</st> [<st c="13209">https://www.cisecurity.org/insights/white-papers/cis-software-supply-chain-security-guide</st>](https://www.cisecurity.org/insights/white-papers/cis-software-supply-chain-security-guide)<st
    c="13298">.</st>'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12860">CIS软件供应链安全指南提供了</st> <st c="12915">一个全面的框架，帮助安全地管理软件供应链。</st>
    <st c="12986">该指南目前包括100多条推荐，分为五大类：源代码、构建流水线、依赖关系、工件和部署。</st> <st c="13147">要访问完整的指南，您可以从此</st>
    <st c="13203">链接下载：</st> [<st c="13209">https://www.cisecurity.org/insights/white-papers/cis-software-supply-chain-security-guide</st>](https://www.cisecurity.org/insights/white-papers/cis-software-supply-chain-security-guide)<st
    c="13298">。</st>
- en: <st c="13299">The guide offers a set</st> <st c="13322">of recommendations across</st>
    *<st c="13349">four key areas</st>* <st c="13363">to secure the build phase</st>
    <st c="13390">of DevOps:</st>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13299">本指南提供了一套</st> <st c="13322">针对*四个关键领域*的推荐</st> <st c="13349">，旨在保障DevOps的构建阶段</st>
    <st c="13363">的安全性：</st>
- en: '**<st c="13400">Securing the build environment</st>**<st c="13431">: This</st>
    <st c="13438">section includes six recommendations, focusing on single-responsibility
    pipelines, immutable infrastructure, logging, automation of environment creation,
    restricted access, and authentication requirements for</st> <st c="13648">build
    environments.</st>'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="13400">保障构建环境的安全</st>**<st c="13431">：本节包含六条推荐，重点是单一责任的流水线、不变的基础设施、日志记录、环境创建自动化、访问限制和构建环境的身份验证要求。</st>'
- en: '**<st c="13667">Securing the build worker</st>**<st c="13693">: This section
    includes eight recommendations, focusing on ensuring build workers are single-use,
    passing environments and commands securely, segregating duties, minimizing network
    connectivity, enforcing runtime security, scanning for vulnerabilities, maintaining
    configurations in version control, and monitoring</st> <st c="14009">resource
    consumption.</st>'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="13667">保障构建工作者的安全</st>**<st c="13693">：本节包含八条推荐，重点是确保构建工作者是一次性使用的，安全地传递环境和命令，分离职责，最小化网络连接，执行运行时安全，扫描漏洞，维护版本控制中的配置，并监控</st>
    <st c="14009">资源消耗。</st>'
- en: '**<st c="14030">Securing the pipeline instructions</st>**<st c="14065">: This
    section includes eight recommendations, focusing on defining build steps as code,
    specifying input/output for build stages, securing output storage, tracking and
    reviewing pipeline file changes, minimizing access to build triggers, scanning
    pipelines for misconfigurations and vulnerabilities, and preventing sensitive</st>
    <st c="14392">data exposure.</st>'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="14030">保障流水线指令的安全</st>**<st c="14065">：本节包含八条推荐，重点是将构建步骤定义为代码，为构建阶段指定输入/输出，保障输出存储的安全，跟踪和审查流水线文件变更，最小化对构建触发器的访问，扫描流水线中的配置错误和漏洞，防止敏感</st>
    <st c="14392">数据泄露。</st>'
- en: '**<st c="14406">Securing the pipeline integrity</st>**<st c="14438">: This
    section includes six recommendations, encompassing the signing of all release
    artifacts, locking external dependencies, validating dependencies before use,
    creating reproducible builds, and producing and signing</st> <st c="14657">a</st>
    **<st c="14660">Software Bill of Materials</st>** <st c="14686">(</st>**<st c="14688">SBOM</st>**<st
    c="14692">) for</st> <st c="14699">each build.</st>'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="14406">保障流水线完整性的安全</st>**<st c="14438">：本节包含六条推荐，涵盖了对所有发布工件进行签名、锁定外部依赖、在使用前验证依赖、创建可重现的构建，并为每个构建生成并签署</st>
    <st c="14657">一份</st> **<st c="14660">软件材料清单</st>** <st c="14686">(</st>**<st
    c="14688">SBOM</st>**<st c="14692">)</st> <st c="14699">。</st>'
- en: <st c="14710">To keep this chapter concise, we will not cover all aspects in
    detail.</st> <st c="14782">Instead, we will focus on areas that we consider to
    be</st> <st c="14837">key recommendations.</st>
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14710">为了保持本章简洁，我们不会详细涵盖所有方面。</st> <st c="14782">相反，我们将专注于我们认为是</st>
    <st c="14837">关键推荐的领域。</st>
- en: <st c="14857">Note</st>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14857">注意</st>
- en: <st c="14862">Microsoft Defender for Cloud’s Defender CSPM plan includes a DevOps
    security capability that offers a subset of assessments for some of these recommendations.</st>
    <st c="15022">You can find more information at this link:</st> [<st c="15066">https://learn.microsoft.com/en-us/azure/defender-for-cloud/recommendations-reference</st>](https://learn.microsoft.com/en-us/azure/defender-for-cloud/recommendations-reference)<st
    c="15150">. In a hands-on exercise later in this chapter, you will use this capability
    to assess the security posture of your DevOps</st> <st c="15273">build</st> <st
    c="15278">platforms.</st>
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14862">Microsoft Defender for Cloud 的 Defender CSPM 计划包括一个 DevOps 安全功能，提供一些针对这些建议的评估子集。</st>
    <st c="15022">你可以通过此链接获取更多信息：</st> [<st c="15066">https://learn.microsoft.com/en-us/azure/defender-for-cloud/recommendations-reference</st>](https://learn.microsoft.com/en-us/azure/defender-for-cloud/recommendations-reference)<st
    c="15150">。在本章稍后的实操练习中，你将使用此功能来评估你的 DevOps</st> <st c="15273">构建</st> <st c="15278">平台的安全态势。</st>
- en: <st c="15289">Securing the build services and workers</st>
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="15289">保护构建服务和工作者</st>
- en: <st c="15329">Earlier in this chapter, we established that developers and DevOps
    teams use</st> **<st c="15407">build services</st>** <st c="15421">such as</st>
    <st c="15429">GitHub Actions and Azure Pipelines to define automated processes
    for building software.</st> <st c="15518">These processes run on</st> <st c="15541">systems
    called</st> **<st c="15556">build workers</st>**<st c="15569">. Different platforms
    have different names for these workers.</st> <st c="15631">In Azure Pipelines,
    they are</st> <st c="15660">known as</st> *<st c="15669">agents</st>*<st c="15675">,
    and in GitHub Actions, they are</st> <st c="15709">called</st> *<st c="15716">runners</st>*<st
    c="15723">.</st>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15329">在本章前面，我们已明确开发人员和 DevOps 团队使用</st> **<st c="15407">构建服务</st>**
    <st c="15421">例如</st> <st c="15429">GitHub Actions 和 Azure Pipelines 来定义构建软件的自动化流程。</st>
    <st c="15518">这些流程运行在</st> <st c="15541">被称为</st> **<st c="15556">构建工作者</st>**<st
    c="15569">的系统上。不同的平台对这些工作者有不同的名称。</st> <st c="15631">在 Azure Pipelines 中，它们被称为</st>
    <st c="15660">*代理*（*agents*），在 GitHub Actions 中，它们被称为</st> <st c="15709">*运行器*（*runners*）</st>
    <st c="15723">。</st>
- en: <st c="15724">We need to keep the build services, the automated processes, and
    the build workers secure as part of our build phase security efforts.</st> <st
    c="15860">If an attacker gains access to the build service or workers, they could
    insert malicious code or manipulate the build process, leading to</st> <st c="15998">compromised
    software.</st>
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15724">作为构建阶段安全努力的一部分，我们需要确保构建服务、自动化流程和构建工作者的安全。</st> <st c="15860">如果攻击者获取了构建服务或工作者的访问权限，他们可能会插入恶意代码或操控构建过程，从而导致</st>
    <st c="15998">软件受到危害。</st>
- en: <st c="16019">Securing the build workers</st>
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="16019">保护构建工作者</st>
- en: <st c="16046">There are two main</st> <st c="16066">types of build</st> <st
    c="16081">workers:</st> **<st c="16090">platform-hosted workers</st>** <st c="16113">and</st>
    **<st c="16118">self-hosted workers</st>**<st c="16137">. Platform-hosted</st>
    <st c="16154">workers are virtual machines provided and managed by the platform
    provider (Microsoft-hosted/GitHub-hosted).</st> <st c="16264">Self-hosted workers
    are compute resources provided and managed by the customer.</st> *<st c="16344">Figure
    6</st>**<st c="16352">.7</st>* <st c="16354">shows the differences between these
    worker options across GitHub Actions and Azure Pipelines.</st> <st c="16449">They
    all support macOS, Ubuntu, or Windows operating systems, but they vary in their
    capabilities, such as supporting jobs in containers or operating in</st> <st c="16602">private
    networks.</st>
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16046">构建工作者主要有两种类型：</st> <st c="16066">**<st c="16090">平台托管工作者</st>**</st>
    <st c="16113">和</st> **<st c="16118">自托管工作者</st>**<st c="16137">。平台托管工作者是由平台提供商（如微软托管/
    GitHub 托管）提供和管理的虚拟机。</st> <st c="16264">自托管工作者是由客户提供和管理的计算资源。</st> *<st c="16344">图
    6</st>**<st c="16352">.7</st>* <st c="16354">展示了这些工作者选项在 GitHub Actions 和 Azure
    Pipelines 中的区别。</st> <st c="16449">它们都支持 macOS、Ubuntu 或 Windows 操作系统，但它们在功能上有所不同，例如支持容器中的作业或在</st>
    <st c="16602">私有网络中运行。</st>
- en: '![Figure 6.7 – Build worker options for Azure Pipelines and GitHub Actions](img/B19710_06_07.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7 – Azure Pipelines 和 GitHub Actions 的构建工作者选项](img/B19710_06_07.jpg)'
- en: <st c="17362">Figure 6.7 – Build worker options for Azure Pipelines and GitHub
    Actions</st>
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17362">图 6.7 – Azure Pipelines 和 GitHub Actions 的构建工作者选项</st>
- en: <st c="17434">The advantage of platform-hosted workers is that they require
    no management from developers.</st> <st c="17528">The platform takes care of all
    the maintenance, including updating the operating system and any pre-installed
    software.</st> <st c="17648">This means developers do not have to worry about
    these aspects, but it also limits their control over the software that comes pre-installed
    on these workers and network connectivity.</st> <st c="17831">On the other hand,
    self-hosted workers give developers more control and flexibility.</st> <st c="17916">They
    can pre-install whatever tooling they need for building and testing software and
    the workers can be connected to internal networks.</st> <st c="18053">However,
    this</st> <st c="18067">flexibility comes with the responsibility of maintaining,
    updating, and securing</st> <st c="18148">these systems.</st>
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17434">平台托管工人的优势在于它们无需开发者进行管理。</st> <st c="17528">平台负责所有维护工作，包括更新操作系统和任何预装的软件。</st>
    <st c="17648">这意味着开发者不必担心这些方面，但也限制了他们对这些工人上预装的软件和网络连接的控制。</st> <st c="17831">另一方面，自托管工人则为开发者提供了更多的控制权和灵活性。</st>
    <st c="17916">他们可以预先安装构建和测试软件所需的任何工具，并且这些工人可以连接到内部网络。</st> <st c="18053">然而，这种</st>
    <st c="18067">灵活性伴随着维护、更新和保护</st> <st c="18148">这些系统的责任。</st>
- en: <st c="18162">Using appropriate worker types based on trust level and security
    requirements</st>
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="18162">根据信任级别和安全要求使用合适的工人类型</st>
- en: <st c="18240">Each type of</st> <st c="18254">worker is suitable for different
    scenarios.</st> <st c="18298">For example, self-hosted workers, particularly those
    with access to a company’s internal network, should never be used to build code
    from untrusted sources, such as public repositories or code with external contributions.</st>
    <st c="18520">This can be abused to leak internal secrets or move laterally in</st>
    <st c="18585">the environment.</st>
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18240">每种类型的</st> <st c="18254">工人适用于不同的场景。</st> <st c="18298">例如，自托管的工人，尤其是那些可以访问公司内部网络的工人，绝不应被用于从不受信任的来源（如公共仓库或包含外部贡献的代码）构建代码。</st>
    <st c="18520">这可能会被滥用，泄露内部机密或在</st> <st c="18585">环境中横向移动。</st>
- en: <st c="18601">Self-hosted workers should never be used to build code from untrusted
    sources, such as public repositories or external contributions.</st>
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18601">自托管工人绝不应被用于从不受信任的来源（如公共仓库或外部贡献）构建代码。</st>
- en: <st c="18735">A recent example is the supply chain attack on PyTorch, demonstrated
    by security researcher John Stawinski.</st> <st c="18844">The attack used Gato,
    a GitHub exploitation tool developed by Praetorian, to identify self-hosted runners
    in PyTorch’s public repository.</st> <st c="18982">By exploiting a misconfiguration
    that allowed PR workflows without approval, the researcher installed</st> <st
    c="19084">persistent</st> **<st c="19095">Command and Control</st>** <st c="19114">(</st>**<st
    c="19116">C2</st>**<st c="19118">) on a self-hosted runner, compromised</st> <st
    c="19158">sensitive tokens, and modified</st> <st c="19189">repository releases.</st>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18735">一个最近的例子是 PyTorch 的供应链攻击，由安全研究员 John Stawinski 演示。</st> <st c="18844">该攻击使用了
    Gato，这是 Praetorian 开发的 GitHub 利用工具，用于识别 PyTorch 公共仓库中的自托管运行器。</st> <st c="18982">通过利用一个错误配置，允许未批准的
    PR 工作流，研究员在自托管运行器上安装了</st> <st c="19084">持久</st> **<st c="19095">命令与控制</st>**
    <st c="19114">(</st>**<st c="19116">C2</st>**<st c="19118">) ，并破坏了</st> <st c="19158">敏感令牌，修改了</st>
    <st c="19189">仓库发布。</st>
- en: <st c="19209">Note</st>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19209">注意</st>
- en: <st c="19214">To read more about John Stawinski’s research, please refer to
    this</st> <st c="19282">document:</st> [<st c="19292">https://johnstawinski.com/2024/01/11/playing-with-fire-how-we-executed-a-critical-supply-chain-attack-on-pytorch</st>](https://johnstawinski.com/2024/01/11/playing-with-fire-how-we-executed-a-critical-supply-chain-attack-on-pytorch)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19214">要了解更多关于 John Stawinski 研究的信息，请参考此</st> <st c="19282">文档：</st>
    [<st c="19292">https://johnstawinski.com/2024/01/11/playing-with-fire-how-we-executed-a-critical-supply-chain-attack-on-pytorch</st>](https://johnstawinski.com/2024/01/11/playing-with-fire-how-we-executed-a-critical-supply-chain-attack-on-pytorch)
- en: <st c="19404">You can also access the Gato tool</st> <st c="19439">here:</st>
    [<st c="19445">https://github.com/praetorian-inc/gato</st>](https://github.com/praetorian-inc/gato)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19404">你也可以通过以下链接访问 Gato 工具：</st> [<st c="19445">https://github.com/praetorian-inc/gato</st>](https://github.com/praetorian-inc/gato)
- en: <st c="19483">Implementing single-use build workers</st>
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="19483">实施一次性构建工人</st>
- en: <st c="19521">Where possible, we</st> <st c="19541">want to ensure that each
    build job uses a fresh, clean environment that is discarded after the build is
    complete.</st> <st c="19655">This approach enhances security by isolating each
    build job, preventing risks from leftover artifacts or exposed secrets from previous
    builds on the same worker.</st> *<st c="19817">Figure 6</st>**<st c="19825">.8</st>*
    <st c="19827">shows an example of this where project A’s build job is compromised
    and modified to drop a persistent malicious service on the build worker.</st>
    <st c="19969">When project B’s build job runs on the same worker, the malicious
    service can steal secrets used by</st> <st c="20069">project B.</st>
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19521">在可能的情况下，我们</st> <st c="19541">希望确保每个构建作业都使用一个全新的、干净的环境，并在构建完成后丢弃。</st>
    <st c="19655">这种方法通过隔离每个构建作业来增强安全性，防止残留的工件或先前构建中暴露的秘密在同一工人上造成风险。</st> *<st c="19817">图
    6</st>**<st c="19825">.8</st>* <st c="19827">展示了一个例子，其中项目 A 的构建作业被攻陷并修改，以在构建工人上放置一个持久的恶意服务。</st>
    <st c="19969">当项目 B 的构建作业在同一工人上运行时，恶意服务可以窃取项目 B 使用的秘密。</st>
- en: '![Figure 6.8 – Secret exposure risk with persistent build workers](img/B19710_06_08.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – 使用持久化构建工人的秘密暴露风险](img/B19710_06_08.jpg)'
- en: <st c="20244">Figure 6.8 – Secret exposure risk with persistent build workers</st>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20244">图 6.8 – 使用持久化构建工人的秘密暴露风险</st>
- en: <st c="20307">Platform-hosted workers on Azure Pipelines and GitHub Actions
    already implement this practice by default.</st> <st c="20414">They allocate a
    new virtual machine for each job and discard it afterward.</st> <st c="20489">However,
    self-hosted workers don’t automatically follow</st> <st c="20545">this pattern.</st>
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20307">Azure Pipelines 和 GitHub Actions 上的平台托管工人默认已经实现了这一做法。</st> <st
    c="20414">它们为每个作业分配一个新的虚拟机，并在作业完成后丢弃它。</st> <st c="20489">然而，自托管工人不会自动遵循</st>
    <st c="20545">这种模式。</st>
- en: <st c="20558">It is important to work with your development teams to understand
    common build process patterns as there may be scenarios where a chain of jobs
    could be required to run on the same build worker.</st> <st c="20754">Avoid enforcing
    this practice without proper team discussion and engagement.</st> <st c="20831">This
    goes against the collaborative spirit of DevSecOps.</st> <st c="20888">It is better
    to engage with</st> <st c="20915">teams to find a balance between security needs
    and</st> <st c="20967">workflow efficiency.</st>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20558">与您的开发团队合作，了解常见的构建过程模式是非常重要的，因为可能会出现需要一系列作业在同一构建工人上运行的场景。</st>
    <st c="20754">避免在没有适当团队讨论和参与的情况下强制执行此做法。</st> <st c="20831">这违背了 DevSecOps 的协作精神。</st>
    <st c="20888">最好与</st> <st c="20915">团队合作，找到安全需求与</st> <st c="20967">工作流效率之间的平衡。</st>
- en: <st c="20987">Minimizing the network connectivity of build workers</st>
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="20987">最小化构建工人的网络连接</st>
- en: <st c="21040">For your most</st> <st c="21055">sensitive and critical workloads,
    you may want to enforce them to run on build workers that have restricted network
    connectivity and runtime security measures such as EDR enabled.</st> <st c="21235">This
    can be an added layer of defense to prevent lateral movement, persistence, or
    backdooring attacks on compromised</st> <st c="21353">build workers.</st>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21040">对于您的最</st> <st c="21055">敏感和关键的工作负载，您可能希望强制它们在网络连接受限且启用了运行时安全措施（如
    EDR）的构建工人上运行。</st> <st c="21235">这可以作为额外的防御层，防止横向移动、持久性或后门攻击对被攻陷</st> <st c="21353">的构建工人进行攻击。</st>
- en: <st c="21367">In the past, limiting network connectivity for platform-hosted
    workers was challenging, leading some organizations to prefer self-hosted workers.</st>
    <st c="21514">However, Microsoft recently introduced a new feature allowing GitHub-hosted
    runners to operate within a private Azure virtual network.</st> <st c="21649">This
    combines the benefits of GitHub-managed infrastructure for CI/CD with full control
    over build workers’</st> <st c="21757">networking policies.</st>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21367">过去，限制平台托管工人的网络连接是一个挑战，导致一些组织更倾向于选择自托管工人。</st> <st c="21514">然而，微软最近推出了一项新功能，允许
    GitHub 托管的运行器在私有 Azure 虚拟网络中运行。</st> <st c="21649">这结合了 GitHub 管理的 CI/CD 基础设施的好处，并完全控制构建工人的</st>
    <st c="21757">网络策略。</st>
- en: <st c="21777">Organization owners can set this up at the enterprise or organization
    level.</st> <st c="21855">To configure at the enterprise level, go to</st> **<st
    c="21899">Settings</st>** <st c="21907">|</st> **<st c="21910">Hosted compute
    networking</st>** <st c="21935">|</st> **<st c="21938">New network configuration</st>**
    <st c="21963">|</st> **<st c="21966">Azure private network</st>** <st c="21987">|</st>
    **<st c="21990">Add Azure Virtual Network</st>**<st c="22015">. There are certain
    prerequisites needed but they are documented</st> <st c="22080">here:</st> [<st
    c="22086">https://docs.github.com/en/enterprise-cloud@latest/admin/configuration/configuring-private-networking-for-hosted-compute-products/configuring-private-networking-for-github-hosted-runners-in-your-enterprise</st>](mailto:https://docs.github.com/en/enterprise-cloud@latest/admin/configuration/configuring-private-networking-for-hosted-compute-products/configuring-private-networking-for-github-hosted-runners-in-your-enterprise)<st
    c="22291">.</st>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21777">组织所有者可以在企业或组织级别进行设置。</st> <st c="21855">要在企业级别进行配置，前往</st> **<st
    c="21899">设置</st>** <st c="21907">|</st> **<st c="21910">托管计算网络</st>** <st c="21935">|</st>
    **<st c="21938">新建网络配置</st>** <st c="21963">|</st> **<st c="21966">Azure 私有网络</st>**
    <st c="21987">|</st> **<st c="21990">添加 Azure 虚拟网络</st>**<st c="22015">。有一些先决条件，但已在文档中</st>
    <st c="22080">列出：</st> [<st c="22086">https://docs.github.com/en/enterprise-cloud@latest/admin/configuration/configuring-private-networking-for-hosted-compute-products/configuring-private-networking-for-github-hosted-runners-in-your-enterprise</st>](mailto:https://docs.github.com/en/enterprise-cloud@latest/admin/configuration/configuring-private-networking-for-hosted-compute-products/configuring-private-networking-for-github-hosted-runners-in-your-enterprise)<st
    c="22291">.</st>
- en: <st c="22292">Implementing secure access to build environments and workers</st>
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="22292">实现对构建环境和工作节点的安全访问</st>
- en: <st c="22353">Another key security</st> <st c="22374">practice is to ensure
    secure access to build and test resources.</st> <st c="22440">This includes safeguarding
    network and user access to build service.</st> <st c="22509">It is not sufficient
    to implement secure access; we need to employ the strongest possible</st> <st
    c="22599">authentication methods.</st>
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22353">另一个关键的安全</st> <st c="22374">措施是确保安全访问构建和测试资源。</st> <st c="22440">这包括保护网络和用户访问构建服务。</st>
    <st c="22509">仅实施安全访问是不够的；我们需要采用最强的</st> <st c="22599">身份验证方法。</st>
- en: <st c="22622">Restricting network access to your build service environment</st>
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="22622">限制网络访问到构建服务环境</st>
- en: <st c="22683">One primary area</st> <st c="22701">of defense is to ensure that
    users/admins can only connect to our build environment from trusted networks.</st>
    <st c="22808">By default, Azure DevOps and GitHub Enterprise Cloud support connections
    from any IP address, but we can</st> <st c="22913">modify this.</st>
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22683">一个主要的防护领域</st> <st c="22701">是确保用户/管理员只能从受信任的网络连接到我们的构建环境。</st>
    <st c="22808">默认情况下，Azure DevOps 和 GitHub Enterprise Cloud 支持来自任何 IP 地址的连接，但我们可以</st>
    <st c="22913">进行修改。</st>
- en: <st c="22925">GitHub Enterprise supports direct network access restrictions
    through the IP allow list feature found at</st> **<st c="23031">Settings</st>**
    <st c="23039">|</st> **<st c="23042">Authentication Security</st>** <st c="23065">|</st>
    **<st c="23068">Enable the IP allow list</st>** <st c="23092">(</st>*<st c="23094">Figure
    6</st>**<st c="23102">.9</st>*<st c="23104">).</st> <st c="23108">This can be
    done at the enterprise or organization level.</st> <st c="23166">Once enabled,
    GitHub Enterprise will only accept connections from IP addresses on the allow
    list, regardless of the user’s</st> <st c="23289">role, permissions, or connection
    method (web UI, APIs,</st> <st c="23344">or Git).</st>
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22925">GitHub Enterprise 通过 IP 允许列表功能支持直接网络访问限制，功能可在</st> **<st c="23031">设置</st>**
    <st c="23039">|</st> **<st c="23042">身份验证安全</st>** <st c="23065">|</st> **<st
    c="23068">启用 IP 允许列表</st>** <st c="23092">(</st>*<st c="23094">图 6.9</st>*<st
    c="23102">).</st> <st c="23108">此功能可以在企业或组织级别进行设置。</st> <st c="23166">启用后，GitHub
    Enterprise 仅接受来自允许列表中 IP 地址的连接，无论用户的</st> <st c="23289">角色、权限或连接方式（Web UI、API
    或 Git）。</st>
- en: '![Figure 6.9 – Configuring IP allow list for GitHub](img/B19710_06_09.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.9 – 配置 GitHub 的 IP 允许列表](img/B19710_06_09.jpg)'
- en: <st c="23790">Figure 6.9 – Configuring IP allow list for GitHub</st>
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23790">图 6.9 – 配置 GitHub 的 IP 允许列表</st>
- en: <st c="23839">We also have the option to automatically include IP addresses
    used by GitHub Apps that we have installed to the IP allow list.</st> <st c="23967">This
    feature ensures that connections from installed GitHub Apps are not blocked.</st>
    <st c="24049">To enable this, we can select the</st> **<st c="24083">Enable IP
    allow list configuration for installed GitHub Apps</st>** <st c="24143">setting
    (</st>*<st c="24153">Figure 6</st>**<st c="24162">.9</st>*<st c="24164">).</st>
    <st c="24168">If this option is enabled, IP addresses specified by GitHub App
    creators will automatically be added to our allow list.</st> <st c="24288">Also,
    updates made by the GitHub App creators will be automatically reflected in our
    list (</st>*<st c="24379">Figure 6</st>**<st c="24388">.10</st>*<st c="24391">).</st>
    <st c="24395">This requires us to have a cautious approach to installing GitHub
    Apps, as a compromised app could potentially be used to bypass our network restriction
    rules.</st> <st c="24555">Only enable this setting when you have a process for
    validating GitHub Apps that are installed in</st> <st c="24653">your organization.</st>
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23839">我们还可以选择自动将我们安装的 GitHub 应用使用的 IP 地址加入到 IP 允许列表中。</st> <st c="23967">此功能确保来自安装的
    GitHub 应用的连接不会被阻止。</st> <st c="24049">要启用此功能，我们可以选择</st> **<st c="24083">为安装的
    GitHub 应用启用 IP 允许列表配置</st>** <st c="24143">设置（</st>*<st c="24153">图 6</st>**<st
    c="24162">.9</st>*<st c="24164">）。</st> <st c="24168">如果启用了此选项，GitHub 应用创建者指定的
    IP 地址将自动添加到我们的允许列表中。</st> <st c="24288">此外，GitHub 应用创建者所做的更新将自动反映在我们的列表中（</st>*<st
    c="24379">图 6</st>**<st c="24388">.10</st>*<st c="24391">）。</st> <st c="24395">这要求我们在安装
    GitHub 应用时采取谨慎的态度，因为被攻破的应用可能会被用来绕过我们的网络限制规则。</st> <st c="24555">只有在你有验证已安装 GitHub
    应用的流程时，才应启用此设置。</st> <st c="24653">你的组织应确保有此流程。</st>
- en: '![Figure 6.10 – GitHub App creator IP list updates are automatically allowed](img/B19710_06_10.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.10 – GitHub 应用创建者的 IP 列表更新将自动允许](img/B19710_06_10.jpg)'
- en: <st c="24970">Figure 6.10 – GitHub App creator IP list updates are automatically
    allowed</st>
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24970">图 6.10 – GitHub 应用创建者的 IP 列表更新将自动允许</st>
- en: <st c="25044">Note</st>
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25044">注意</st>
- en: <st c="25049">If teams are using self-hosted runners or larger GitHub-hosted
    runners with static IP addresses, we must add our runners’ IP address or range
    to the IP allow list to allow connection with the GitHub</st> <st c="25249">Enterprise
    platform.</st>
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25049">如果团队使用的是自托管的 runner 或者具有静态 IP 地址的大型 GitHub 托管 runner，我们必须将我们的
    runner 的 IP 地址或范围添加到 IP 允许列表中，以便与 GitHub</st> <st c="25249">企业平台建立连接。</st>
- en: <st c="25269">Azure DevOps</st> <st c="25282">does</st> <st c="25288">not have
    the option to directly limit network access as GitHub Enterprise does.</st> <st
    c="25368">However, since it can integrate with Entra ID for sign-in, we can implement
    Microsoft Entra</st> **<st c="25460">Conditional Access Policies</st>** <st c="25487">(</st>**<st
    c="25489">CAPs</st>**<st c="25493">) for</st> <st c="25499">IP restrictions.</st>
    <st c="25517">This approach also works for GitHub Enterprise accounts with</st>
    **<st c="25578">Enterprise Managed Users</st>** <st c="25602">(</st>**<st c="25604">EMU</st>**<st
    c="25607">) authenticated</st> <st c="25624">through Microsoft Entra ID.</st>
    *<st c="25652">Figure 6</st>**<st c="25660">.11</st>* <st c="25663">shows how</st>
    <st c="25674">it works:</st>
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25269">Azure DevOps</st> <st c="25282">没有像 GitHub Enterprise 那样直接限制网络访问的选项。</st>
    <st c="25368">然而，由于它可以与 Entra ID 集成进行登录，我们可以实现 Microsoft Entra</st> **<st c="25460">条件访问策略</st>**
    <st c="25487">(</st>**<st c="25489">CAPs</st>**<st c="25493">) 来进行</st> <st c="25499">IP
    限制。</st> <st c="25517">这种方法同样适用于通过 Microsoft Entra ID 认证的 GitHub 企业帐户，其</st> **<st
    c="25578">企业托管用户</st>** <st c="25602">(</st>**<st c="25604">EMU</st>**<st c="25607">)进行认证。</st>
    <st c="25624">*<st c="25652">图 6</st>**<st c="25660">.11</st>* <st c="25663">展示了其工作原理：</st>
- en: '![Figure 6.11 – Implementing Entra CAPs for IP restrictions](img/B19710_06_11.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.11 – 实现 Entra CAPs 进行 IP 限制](img/B19710_06_11.jpg)'
- en: <st c="26076">Figure 6.11 – Implementing Entra CAPs for IP restrictions</st>
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26076">图 6.11 – 实现 Entra CAPs 进行 IP 限制</st>
- en: <st c="26133">Here are</st> <st c="26142">the</st> <st c="26146">steps:</st>
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26133">以下是</st> <st c="26142">步骤：</st>
- en: <st c="26153">A user tries to access Azure DevOps or GitHub Enterprise with
    an EMU, using a supported</st> <st c="26242">client application.</st>
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="26153">用户尝试使用 EMU 和受支持的</st> <st c="26242">客户端应用程序访问 Azure DevOps 或 GitHub
    企业版。</st>
- en: <st c="26261">The connection request is redirected to Entra ID</st> <st c="26311">for
    authentication.</st>
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="26261">连接请求将被重定向到 Entra ID</st> <st c="26311">进行认证。</st>
- en: <st c="26330">Entra ID authenticates the user’s identity and may ask for</st>
    **<st c="26390">Multi-Factor Authentication</st>** <st c="26417">(</st>**<st c="26419">MFA</st>**<st
    c="26422">) if it</st> <st c="26431">is configured.</st>
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="26330">Entra ID 验证用户身份，并且如果配置了</st> **<st c="26390">多因素身份验证</st>** <st
    c="26417">（</st>**<st c="26419">MFA</st>**<st c="26422">），可能会要求进行身份验证。</st>
- en: <st c="26445">Conditional Access checks whether the sign-in request meets configured</st>
    <st c="26517">IP restrictions.</st>
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="26445">条件访问检查登录请求是否符合配置的</st> <st c="26517">IP 限制。</st>
- en: <st c="26533">If the IP restriction is met, the client gets an access token
    for Azure DevOps or GitHub Enterprise.</st> <st c="26635">If not, the access attempt</st>
    <st c="26662">is blocked.</st>
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="26533">如果满足 IP 限制，客户端将获得 Azure DevOps 或 GitHub Enterprise 的访问令牌。</st>
    <st c="26635">如果不满足，访问尝试</st> <st c="26662">将被阻止。</st>
- en: <st c="26673">If this option is implemented for Azure DevOps, we can activate
    the</st> **<st c="26742">Enable IP Conditional Access policy validation</st>**
    <st c="26788">setting in</st> **<st c="26800">Organization Settings</st>** <st
    c="26821">|</st> **<st c="26824">Security</st>** <st c="26832">|</st> **<st c="26835">Policies</st>**
    <st c="26843">(</st>*<st c="26845">Figure 6</st>**<st c="26853">.12</st>*<st c="26856">).</st>
    <st c="26860">This extends the IP restriction check from Entra CAPs to both web
    interactions and non-interactive flows.</st> <st c="26966">This includes actions
    from third-party clients, such as using</st> <st c="27028">a</st> **<st c="27030">Personal
    Access Token</st>** <st c="27051">(</st>**<st c="27053">PAT</st>**<st c="27056">)
    for</st> <st c="27063">Git operations.</st>
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26673">如果此选项在 Azure DevOps 中实施，我们可以启用</st> **<st c="26742">启用 IP 条件访问策略验证</st>**
    <st c="26788">设置，位于</st> **<st c="26800">组织设置</st>** <st c="26821">|</st> **<st
    c="26824">安全</st>** <st c="26832">|</st> **<st c="26835">策略</st>** <st c="26843">（</st>*<st
    c="26845">图 6</st>**<st c="26853">.12</st>*<st c="26856">）。</st> <st c="26860">这将把
    IP 限制检查从 Entra CAPs 扩展到 Web 交互和非交互式流程。</st> <st c="26966">这包括来自第三方客户端的操作，例如使用</st>
    <st c="27028">个人访问令牌</st> **<st c="27030">Personal Access Token</st>** <st c="27051">（</st>**<st
    c="27053">PAT</st>**<st c="27056">）进行</st> <st c="27063">Git 操作。</st>
- en: '![Figure 6.12 – Enabling IP CAP validation in Azure DevOps](img/B19710_06_12.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.12 – 在 Azure DevOps 中启用 IP CAP 验证](img/B19710_06_12.jpg)'
- en: <st c="27275">Figure 6.12 – Enabling IP CAP validation in Azure DevOps</st>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27275">图 6.12 – 在 Azure DevOps 中启用 IP CAP 验证</st>
- en: <st c="27331">Now that we have some understanding of securing network access
    to our build environments, let us</st> <st c="27429">review the</st> <st c="27440">options
    that are available to secure user and</st> <st c="27486">service access.</st>
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27331">现在我们对如何保护网络访问构建环境有了初步了解，接下来让我们</st> <st c="27429">回顾一下</st> <st
    c="27440">保护用户和</st> <st c="27486">服务访问的可用选项。</st>
- en: <st c="27501">Understanding GitHub authentication options</st>
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="27501">理解 GitHub 身份验证选项</st>
- en: <st c="27545">GitHub Enterprise</st> <st c="27564">offers several authentication
    mechanisms for users and applications to access build environments, depending
    on the authentication scenario.</st> <st c="27704">Users can authenticate via
    a username and password when accessing GitHub Actions through the web console
    or use a</st> <st c="27817">PAT for</st> **<st c="27826">Command-Line Interface</st>**
    <st c="27848">(</st>**<st c="27850">CLI</st>**<st c="27853">) access (</st>*<st
    c="27864">Figure 6</st>**<st c="27873">.13</st>*<st c="27876">).</st>
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27545">GitHub Enterprise</st> <st c="27564">提供了多种身份验证机制，供用户和应用程序访问构建环境，具体取决于身份验证场景。</st>
    <st c="27704">用户在通过 Web 控制台访问 GitHub Actions 时，可以使用用户名和密码进行身份验证，或者使用</st> <st
    c="27817">PAT 进行</st> **<st c="27826">命令行界面</st>** <st c="27848">（</st>**<st c="27850">CLI</st>**<st
    c="27853">）访问（</st>*<st c="27864">图 6</st>**<st c="27873">.13</st>*<st c="27876">）。</st>
- en: '![Figure 6.13 – GitHub Enterprise authentication options](img/B19710_06_13.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.13 – GitHub Enterprise 身份验证选项](img/B19710_06_13.jpg)'
- en: <st c="28286">Figure 6.13 – GitHub Enterprise authentication options</st>
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28286">图 6.13 – GitHub Enterprise 身份验证选项</st>
- en: <st c="28340">There are three primary authentication</st> <st c="28379">options
    for using a username</st> <st c="28409">and password:</st>
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28340">使用用户名</st> <st c="28379">和密码有三种主要的身份验证</st> <st c="28409">选项：</st>
- en: '**<st c="28422">Personal GitHub identity</st>**<st c="28447">: Users can authenticate
    with their personal GitHub identity.</st> <st c="28510">With</st> <st c="28515">this
    option, the user maintains control of their identity (since it is their personal
    account), and can use the same identity to contribute to other enterprises, organizations,
    and repositories outside of</st> <st c="28720">the organization.</st>'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="28422">个人 GitHub 身份</st>**<st c="28447">：用户可以使用他们的个人 GitHub 身份进行身份验证。</st>
    <st c="28510">通过</st> <st c="28515">此选项，用户保持对其身份的控制（因为这是他们的个人账户），并且可以使用相同的身份为其他企业、组织以及
    GitHub 以外的仓库做贡献。</st> <st c="28720">该身份适用于组织外的资源。</st>'
- en: '**<st c="28737">External Identity Provider (IdP) with SAML Single Sign-On (SSO)</st>**<st
    c="28801">: Users can</st> <st c="28813">authenticate</st> <st c="28827">with
    an identity from an external SAML provider that is linked to their GitHub identity.</st>
    <st c="28916">Authentication is managed by the external provider, but access is
    granted to the organization’s resources in GitHub Enterprise.</st> <st c="29044">This
    option can be configured at either the enterprise level</st> *<st c="29105">or</st>*
    <st c="29107">the</st> <st c="29112">organization level.</st>'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="28737">外部身份提供者（IdP）与 SAML 单点登录（SSO）</st>**<st c="28801">：用户可以</st>
    <st c="28813">通过与其 GitHub 身份相关联的外部 SAML 提供者进行身份验证。</st> <st c="28916">身份验证由外部提供者管理，但访问权限会授予
    GitHub 企业版中的组织资源。</st> <st c="29044">此选项可以在企业层级</st> *<st c="29105">或</st>* <st
    c="29107">组织层级进行配置。</st>'
- en: '**<st c="29131">Enterprise Managed Users (EMU)</st>**<st c="29162">: This option
    is similar to the SSO option, but it allows</st> <st c="29220">for more control
    for enterprise users.</st> <st c="29260">With EMU, users will access GitHub organization
    resources, including the build environment, using a single identity created and
    managed by the external IdP.</st> <st c="29417">Users do not need to have a personal</st>
    <st c="29454">GitHub identity.</st>'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="29131">企业管理用户（EMU）</st>**<st c="29162">：此选项类似于 SSO 选项，但它为企业用户提供了更多控制权。</st>
    <st c="29260">使用 EMU，用户将通过由外部 IdP 创建和管理的单一身份访问 GitHub 组织资源，包括构建环境。</st> <st c="29417">用户无需拥有个人</st>
    <st c="29454">GitHub 身份。</st>'
- en: <st c="29470">The recommendation</st> <st c="29489">for an enterprise is to
    use either the SAML SSO option or the EMU option.</st> <st c="29564">Both options
    rely on an external IdP and offer increased security compared to using a personal
    GitHub identity.</st> <st c="29676">However, there are still distinctions in how
    they function, as summarized in</st> *<st c="29753">Figure 6</st>**<st c="29761">.14</st>*<st
    c="29764">.</st>
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="29470">企业的推荐方案</st> <st c="29489">是选择使用 SAML SSO 选项或 EMU 选项。</st> <st
    c="29564">这两种选项都依赖于外部身份提供者（IdP），并且相较于使用个人 GitHub 身份，提供了更高的安全性。</st> <st c="29676">然而，它们的运作方式仍然存在区别，如</st>
    *<st c="29753">图 6</st>**<st c="29761">.14</st>*<st c="29764">所总结。</st>
- en: '![Figure 6.14 – Comparing GitHub EMU with SAML SSO](img/B19710_06_14.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.14 – 比较 GitHub EMU 与 SAML SSO](img/B19710_06_14.jpg)'
- en: <st c="30318">Figure 6.14 – Comparing GitHub EMU with SAML SSO</st>
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="30318">图 6.14 – 比较 GitHub EMU 与 SAML SSO</st>
- en: <st c="30366">For example, implementing EMU involves a more complex setup process
    that requires coordination with the GitHub team to enable an enterprise account
    with EMU.</st> <st c="30525">In contrast, setting up SAML SSO is more straightforward
    and can be done independently, without contacting the</st> <st c="30635">GitHub
    team.</st>
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="30366">例如，实施 EMU 涉及更复杂的设置过程，需要与 GitHub 团队协调，以启用带有 EMU 的企业账户。</st> <st
    c="30525">相比之下，设置 SAML SSO 更为直接，可以独立完成，无需联系</st> <st c="30635">GitHub 团队。</st>
- en: '<st c="30648">Another differentiation</st> <st c="30673">is that EMU support
    is limited to two IdPs—Entra ID and Okta.</st> <st c="30735">EMU can only be used
    with an unsupported IdP by federating it to one of the two supported IdPs.</st>
    <st c="30831">In contrast, SAML SSO supports a broader range of IdPs.</st> <st
    c="30887">Microsoft officially supports six IdPs for</st> <st c="30930">SAML SSO:
    Entra ID,</st> **<st c="30950">Active Directory Federation Services</st>** <st
    c="30986">(</st>**<st c="30988">ADFS</st>**<st c="30992">), Okta, OneLogin, PingOne,
    and Shibboleth.</st> <st c="31037">SAML SSO is technically compatible with any
    IdP that implements the SAML 2.0 protocol, but support is limited if they are
    not</st> <st c="31163">officially listed.</st>'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="30648">另一个区别</st> <st c="30673">是，EMU 支持仅限于两个 IdP—Entra ID 和 Okta。</st>
    <st c="30735">如果要使用不受支持的 IdP，EMU 只能通过联合到两个支持的 IdP 之一来使用。</st> <st c="30831">相比之下，SAML
    SSO 支持更广泛的 IdP。</st> <st c="30887">Microsoft 官方支持六个 IdP 用于</st> <st c="30930">SAML
    SSO：Entra ID、</st> **<st c="30950">Active Directory 联合身份验证服务</st>** <st c="30986">(</st>**<st
    c="30988">ADFS</st>**<st c="30992">)、Okta、OneLogin、PingOne 和 Shibboleth。</st>
    <st c="31037">SAML SSO 在技术上兼容任何实现 SAML 2.0 协议的 IdP，但如果它们未被</st> <st c="31163">官方列出，支持将受到限制。</st>
- en: <st c="31181">Another key difference is that EMU implementation requires SCIM
    while SAML SSO does not require SCIM.</st> **<st c="31284">SCIM</st>** <st c="31288">stands
    for</st> **<st c="31300">System for Cross-domain Identity Management</st>** <st
    c="31343">and EMU</st> <st c="31351">uses it to create managed user accounts in</st>
    <st c="31395">GitHub Enterprise.</st>
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="31181">另一个关键区别是，EMU 实施需要 SCIM，而 SAML SSO 不需要 SCIM。</st> **<st c="31284">SCIM</st>**
    <st c="31288">代表</st> **<st c="31300">跨域身份管理系统</st>** <st c="31343">和 EMU</st>
    <st c="31351">使用它在</st> <st c="31395">GitHub Enterprise 中创建托管用户帐户。</st>
- en: <st c="31413">Also, EMU identities cannot be used to access or contribute to
    external organizations.</st> <st c="31501">They can view public resources such
    as repositories, gists, or pages but they cannot be used to make changes to them.</st>
    <st c="31619">This is to prevent enterprise members from accidentally leaking
    corporate-owned content to the public.</st> <st c="31722">Also, the content they
    create is only visible to other members of the enterprise.</st> <st c="31804">SAML
    SSO identities don’t have</st> <st c="31835">this restriction.</st>
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="31413">此外，EMU 身份不能用于访问或贡献给外部组织。</st> <st c="31501">他们可以查看公共资源，如存储库、要点或页面，但不能用于对其进行更改。</st>
    <st c="31619">这是为了防止企业成员意外地向公众泄露企业拥有的内容。</st> <st c="31722">此外，他们创建的内容仅对企业其他成员可见。</st>
    <st c="31804">SAML SSO 身份没有</st> <st c="31835">这种限制。</st>
- en: <st c="31852">Lastly, EMU identities are restricted from creating starter workflows
    for GitHub Actions or installing GitHub</st> <st c="31963">Apps, whereas SAML
    SSO identities do not have</st> <st c="32009">such restrictions.</st>
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="31852">最后，EMU 身份受到限制，不能为 GitHub Actions 创建启动工作流程或安装 GitHub</st> <st c="31963">应用程序，而
    SAML SSO 身份则没有</st> <st c="32009">这些限制。</st>
- en: <st c="32027">Understanding Azure DevOps authentication options</st>
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="32027">理解 Azure DevOps 的身份验证选项</st>
- en: <st c="32077">Similar to GitHub</st> <st c="32096">Enterprise, Azure DevOps
    offers several authentication methods depending on the</st> <st c="32176">use
    case (</st>*<st c="32186">Figure 6</st>**<st c="32195">.15</st>*<st c="32198">).</st>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32077">与 GitHub 相似，Azure DevOps 根据</st> <st c="32096">用例提供多种身份验证方法（</st>*<st
    c="32186">图 6</st>**<st c="32195">.15</st>*<st c="32198">）。</st>
- en: '![Figure 6.15 – Azure DevOps authentication options](img/B19710_06_15.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.15 – Azure DevOps 的身份验证选项](img/B19710_06_15.jpg)'
- en: <st c="32534">Figure 6.15 – Azure DevOps authentication options</st>
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32534">图 6.15 – Azure DevOps 的身份验证选项</st>
- en: <st c="32583">Most organizations will have their Azure DevOps organization connected
    with their Entra ID tenant, allowing users to sign in using their Entra</st> <st
    c="32727">ID credentials.</st>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32583">大多数组织将其 Azure DevOps 组织连接到其 Entra ID 租户，允许用户使用其 Entra</st> <st
    c="32727">ID 凭据登录。</st>
- en: <st c="32742">Safeguarding the use of PATs in GitHub and Azure DevOps</st>
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="32742">保护在 GitHub 和 Azure DevOps 中使用 PATs</st>
- en: <st c="32798">PATs are user-generated, long-lived tokens used for authentication
    within GitHub Enterprise or</st> <st c="32894">Azure</st> <st c="32900">DevOps
    environments.</st> <st c="32921">They are typically used to authenticate using
    command-line tools or when making API calls using basic authentication.</st> <st
    c="33039">The tokens are directly linked to the account of the user who generated
    them, and they become inactive if the user’s access</st> <st c="33163">is revoked.</st>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32798">PAT 是用户生成的、长期有效的令牌，用于在 GitHub Enterprise 或</st> <st c="32894">Azure</st>
    <st c="32900">DevOps 环境中进行身份验证。</st> <st c="32921">通常用于使用命令行工具进行身份验证或在使用基本身份验证进行
    API 调用时。</st> <st c="33039">这些令牌与生成它们的用户帐户直接相关联，并且如果用户的访问权限被撤销，令牌将失效。</st>
- en: <st c="33174">GitHub supports two types of PATs:</st> **<st c="33210">fine-grained</st>**
    <st c="33222">and</st> **<st c="33227">classic</st>**<st c="33234">. Fine-grained</st>
    <st c="33248">PATs</st> <st c="33254">allow granular control on the scope of access
    than classic PATs.</st> <st c="33319">For example, fine-grained PATs can be used
    to specify access on a per-repository level (</st>*<st c="33407">Figure 6</st>**<st
    c="33416">.16</st>*<st c="33419">).</st> <st c="33423">It also allows for more
    fine-tuned permissions for both account-level and</st> <st c="33497">repository-level
    resources.</st>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="33174">GitHub 支持两种类型的 PAT：</st> **<st c="33210">精细粒度</st>** <st c="33222">和</st>
    **<st c="33227">经典</st>**<st c="33234">。精细粒度</st> <st c="33248">PAT</st> <st c="33254">比经典
    PAT 提供了更细粒度的访问控制。</st> <st c="33319">例如，精细粒度 PAT 可以用于指定按仓库级别的访问（</st>*<st c="33407">图
    6</st>**<st c="33416">.16</st>*<st c="33419">）。</st> <st c="33423">它还允许对账户级别和</st>
    <st c="33497">仓库级别的资源进行更精细的权限设置。</st>
- en: '![Figure 6.16 – Fine-grained PATs support access on a per-repository level](img/B19710_06_16.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.16 – 精细粒度 PAT 支持按仓库级别的访问](img/B19710_06_16.jpg)'
- en: <st c="33875">Figure 6.16 – Fine-grained PATs support access on a per-repository
    level</st>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="33875">图 6.16 – 精细粒度 PAT 支持按仓库级别的访问</st>
- en: '<st c="33947">Azure DevOps also supports two types of PAT: global-scoped and
    organization-scoped (</st>*<st c="34032">Figure 6</st>**<st c="34041">.17</st>*<st
    c="34044">).</st> **<st c="34048">Global-scoped PATs</st>** <st c="34066">can
    be</st> <st c="34073">used to grant broad access to resources in all organizations
    to</st> <st c="34138">which the user has permission.</st> **<st c="34169">Organization-scoped
    PATs</st>** <st c="34193">restrict</st> <st c="34203">access to resources within
    a</st> <st c="34232">single organization.</st>'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="33947">Azure DevOps 还支持两种类型的 PAT：全局级和组织级（</st>*<st c="34032">图 6</st>**<st
    c="34041">.17</st>*<st c="34044">）。</st> **<st c="34048">全局级 PAT</st>** <st c="34066">可以</st>
    <st c="34073">用于授予用户有权限的所有组织中的资源的广泛访问权限。</st> **<st c="34169">组织级 PAT</st>** <st
    c="34193">限制</st> <st c="34203">对单个组织内资源的访问。</st>
- en: '![Figure 6.17 – Organization- and global-scoped PATs in Azure DevOps](img/B19710_06_17.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.17 – Azure DevOps 中的组织级和全局级 PATs](img/B19710_06_17.jpg)'
- en: <st c="34562">Figure 6.17 – Organization- and global-scoped PATs in Azure DevOps</st>
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="34562">图 6.17 – Azure DevOps 中的组织级和全局级 PATs</st>
- en: <st c="34628">Both GitHub Enterprise and Azure DevOps support policies that
    can be used to govern the use of PATs in</st> <st c="34731">our</st> <st c="34736">environments.</st>
    *<st c="34750">Figure 6</st>**<st c="34758">.18</st>* <st c="34761">outlines the
    differences between the token types and policy support across the</st> <st c="34841">two
    platforms.</st>
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="34628">GitHub Enterprise 和 Azure DevOps 都支持可以用来管理 PAT 使用的策略，</st> <st
    c="34731">在我们的</st> <st c="34736">环境中。</st> *<st c="34750">图 6</st>**<st c="34758">.18</st>*
    <st c="34761">概述了这两个平台中令牌类型和策略支持的区别。</st>
- en: '![Figure 6.18 – Comparing Azure DevOps and GitHub PATs](img/B19710_06_18.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.18 – 比较 Azure DevOps 和 GitHub PATs](img/B19710_06_18.jpg)'
- en: <st c="35422">Figure 6.18 – Comparing Azure DevOps and GitHub PATs</st>
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="35422">图 6.18 – 比较 Azure DevOps 和 GitHub PATs</st>
- en: <st c="35474">For example, Azure</st> <st c="35493">DevOps supports the following
    policies that can be used to control the use of PATs.</st> <st c="35578">These
    policies can be configured from</st> **<st c="35616">Organization Settings</st>**
    <st c="35637">|</st> **<st c="35640">General</st>** <st c="35647">|</st> **<st
    c="35650">Microsoft Entra</st>** <st c="35665">|</st> **<st c="35668">Policies</st>**
    <st c="35676">(</st>*<st c="35678">Figure 6</st>**<st c="35686">.19</st>*<st c="35689">):</st>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="35474">例如，Azure</st> <st c="35493">DevOps支持以下策略，用于控制PAT的使用。</st> <st
    c="35578">这些策略可从</st> **<st c="35616">组织设置</st>** <st c="35637">|</st> **<st c="35640">常规</st>**
    <st c="35647">|</st> **<st c="35650">Microsoft Entra</st>** <st c="35665">|</st>
    **<st c="35668">策略</st>** <st c="35676">(</st>*<st c="35678">图 6</st>**<st c="35686">.19</st>*<st
    c="35689">)配置：</st>
- en: '**<st c="35692">Restrict global personal access token creation</st>**<st c="35739">:
    When enabled, this policy blocks the creation of global-scoped PATs for all users,
    allowing only</st> <st c="35839">organization-scoped PATs.</st>'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="35692">限制全局个人访问令牌创建</st>**<st c="35739">：启用此策略后，将阻止所有用户创建全局范围的PAT，仅允许组织范围的PAT。</st>'
- en: '**<st c="35864">Restrict full-scoped personal access token creation</st>**<st
    c="35916">: When enabled, this policy will</st> <st c="35950">block</st> <st c="35955">the
    creation of full access tokens for all users.</st> <st c="36006">PAT creation
    will only be allowed if access is limited to</st> <st c="36064">specific scopes.</st>'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="35864">限制完全范围的个人访问令牌创建</st>**<st c="35916">：启用此策略后，</st> <st c="35950">将阻止</st>
    <st c="35955">所有用户创建完全访问令牌。</st> <st c="36006">只有限定于特定范围的PAT才允许创建。</st>'
- en: '**<st c="36080">Enforce maximum personal access token lifespan</st>**<st c="36127">:
    We can use this policy to set a maximum allowed lifetime for new PATs.</st> <st
    c="36201">We can specify any value from 1 to</st> <st c="36236">365 days.</st>'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="36080">强制执行最大个人访问令牌生存期限</st>**<st c="36127">：我们可以使用此策略为新的PAT设置最大允许的生存期限。</st>
    <st c="36201">我们可以指定从1到</st> <st c="36236">365天的任何值。</st>'
- en: '**<st c="36245">Automatically revoke leaked personal access tokens</st>**<st
    c="36296">: This policy is enabled by default, and it is recommended to leave
    it enabled.</st> <st c="36377">It automatically revokes PATs detected in public
    GitHub repositories.</st> <st c="36447">It also notifies the token owner and logs
    an event in the organization’s audit log.</st> <st c="36531">It is advisable to
    keep this policy enabled or at a minimum implement a process that achieves</st>
    <st c="36625">something similar.</st>'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="36245">自动撤销泄露的个人访问令牌</st>**<st c="36296">：此策略默认启用，并建议保持启用状态。</st>
    <st c="36377">它会自动撤销在公共GitHub仓库中检测到的PAT。</st> <st c="36447">还会通知令牌所有者并在组织的审计日志中记录事件。</st>
    <st c="36531">建议保持此策略启用，或者至少实施类似的流程。</st>'
- en: '![Figure 6.19 – PAT governance policies in Azure DevOps](img/B19710_06_19.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.19 – Azure DevOps中的PAT治理策略](img/B19710_06_19.jpg)'
- en: <st c="38231">Figure 6.19 – PAT governance policies in Azure DevOps</st>
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38231">图 6.19 – Azure DevOps中的PAT治理策略</st>
- en: <st c="38284">GitHub Enterprise</st> <st c="38302">also supports the</st> <st
    c="38321">following</st> <st c="38330">policies that can be used to control the
    use of PATs.</st> <st c="38385">These policies can be configured at the organization
    level from</st> **<st c="38449">Organization</st>** <st c="38461">|</st> **<st
    c="38464">Settings</st>** <st c="38472">|</st> **<st c="38475">Third-party access</st>**
    <st c="38493">|</st> **<st c="38496">Personal access tokens</st>** <st c="38518">or
    at the enterprise level from</st> **<st c="38551">Enterprise</st>** <st c="38561">|</st>
    **<st c="38564">Policies</st>** <st c="38572">|</st> **<st c="38575">Personal
    access tokens</st>** <st c="38597">(</st>*<st c="38599">Figure 6</st>**<st c="38607">.20</st>*<st
    c="38610">):</st>
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38284">GitHub企业版</st> <st c="38302">还支持以下</st> <st c="38321">用于控制PAT使用的</st>
    <st c="38330">策略。</st> <st c="38385">这些策略可以在组织级别从</st> **<st c="38449">组织</st>**
    <st c="38461">|</st> **<st c="38464">设置</st>** <st c="38472">|</st> **<st c="38475">第三方访问</st>**
    <st c="38493">|</st> **<st c="38496">个人访问令牌</st>** <st c="38518">或在企业级别从</st>
    **<st c="38551">企业</st>** <st c="38561">|</st> **<st c="38564">策略</st>** <st c="38572">|</st>
    **<st c="38575">个人访问令牌</st>** <st c="38597">(</st>*<st c="38599">图 6</st>**<st
    c="38607">.20</st>*<st c="38610">)配置：</st>
- en: '**<st c="38613">Restrict access via fine-grained personal access tokens</st>**<st
    c="38669">: This policy can be used to enable or restrict the creation of</st>
    <st c="38734">fine-grained PATs</st>'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="38613">限制通过细粒度个人访问令牌访问</st>**<st c="38669">：此策略可用于启用或限制</st> <st c="38734">细粒度PAT的创建</st>'
- en: '**<st c="38751">Require approval of fine-grained personal access tokens</st>**<st
    c="38807">: This policy can be used to require administrator review and approval
    of PATs that</st> <st c="38892">are created</st>'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="38751">要求批准细粒度个人访问令牌</st>**<st c="38807">：此策略可用于要求管理员审核和批准创建的 PAT</st>
    <st c="38892">。</st>'
- en: '**<st c="38903">Restrict access via personal access tokens (classic)</st>**<st
    c="38956">: This policy can be used to allow or restrict the creation of</st>
    <st c="39020">classic PATs</st>'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="38903">通过个人访问令牌（经典）限制访问</st>**<st c="38956">：此策略可用于允许或限制创建</st> <st
    c="39020">经典 PAT</st>'
- en: '![Figure 6.20 – PAT governance policies in GitHub Enterprise Cloud](img/B19710_06_20.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.20 – GitHub 企业云中的 PAT 治理策略](img/B19710_06_20.jpg)'
- en: <st c="39787">Figure 6.20 – PAT governance policies in GitHub Enterprise Cloud</st>
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39787">图 6.20 – GitHub 企业云中的 PAT 治理策略</st>
- en: <st c="39851">Now that you</st> <st c="39864">understand how to</st> <st c="39883">securely</st>
    <st c="39891">manage PATs in your DevOps environment, let’s review another type
    of token that has been exploited in recent attacks:</st> <st c="40010">pipeline
    tokens.</st>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39851">现在你</st> <st c="39864">理解了如何在 DevOps 环境中</st> <st c="39883">安全地</st>
    <st c="39891">管理 PAT，让我们回顾一下最近的攻击中被利用的另一种令牌：</st> <st c="40010">管道令牌。</st>
- en: <st c="40026">Safeguarding the use of pipeline tokens in GitHub and Azure DevOps</st>
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="40026">保护 GitHub 和 Azure DevOps 中管道令牌的使用</st>
- en: <st c="40093">There are</st> <st c="40104">scenarios where we need to access</st>
    <st c="40138">GitHub Enterprise or Azure DevOps resources in an automated pipeline,
    for example, when there is a need to make changes to the platform by calling its
    API.</st> <st c="40294">Both GitHub Enterprise and Azure DevOps provide a special
    access token for workflows/pipelines to use for such scenarios.</st> <st c="40416">In
    GitHub Enterprise, this token is referenced as a secret called</st> `<st c="40482">GITHUB_TOKEN</st>`<st
    c="40494">. In Azure DevOps, it is referenced as a special variable</st> <st c="40552">called</st>
    `<st c="40559">System.AccessToken</st>`<st c="40577">.</st>
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="40093">在某些场景中，我们需要在自动化管道中访问</st> <st c="40104">GitHub 企业或 Azure DevOps
    资源，例如，在需要通过调用其 API 来更改平台时。</st> <st c="40294">GitHub 企业和 Azure DevOps 都为这种场景提供了专门的访问令牌供工作流/管道使用。</st>
    <st c="40416">在 GitHub 企业中，该令牌被称为一个名为</st> `<st c="40482">GITHUB_TOKEN</st>`<st
    c="40494">的密钥。在 Azure DevOps 中，它被称为一个名为</st> `<st c="40559">System.AccessToken</st>`<st
    c="40577">的特殊变量。</st>
- en: <st c="40578">As a good security practice, these tokens should be granted the
    minimum access that is required to ensure the impact</st> <st c="40695">of a</st>
    **<st c="40701">Poisoned Pipeline Execution</st>** <st c="40728">(</st>**<st c="40730">PPE</st>**<st
    c="40733">) attack that compromises the token</st> <st c="40770">is limited.</st>
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="40578">作为良好的安全实践，这些令牌应授予确保影响的最低访问权限</st> <st c="40695">的</st> **<st c="40701">中毒管道执行</st>**
    <st c="40728">(</st>**<st c="40730">PPE</st>**<st c="40733">) 攻击，该攻击会妥协令牌</st>
    <st c="40770">的影响被限制。</st>
- en: <st c="40781">With GitHub, the default permissions for the token can be configured
    to be either</st> *<st c="40864">permissive</st>* <st c="40874">or</st> *<st c="40878">restrictive</st>*<st
    c="40889">, at the enterprise, organization, or repository level.</st> <st c="40945">The
    permissive option (marked as</st> *<st c="40978">1</st>* <st c="40979">in</st>
    *<st c="40983">Figure 6</st>**<st c="40991">.21</st>*<st c="40994">), grants read
    and write access to all scopes in the repository while the restrictive option
    (marked as</st> *<st c="41099">2</st>* <st c="41100">in</st> *<st c="41104">Figure
    6</st>**<st c="41112">.21</st>*<st c="41115">) limits the access to read-only
    for the contents and packages scopes.</st> <st c="41187">Opting for the permissive
    option increases the risk of privilege escalation or lateral movement by attackers
    in a PPE attack.</st> <st c="41313">This type of attack will be discussed later
    in</st> <st c="41360">the chapter.</st>
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="40781">在 GitHub 中，令牌的默认权限可以配置为</st> *<st c="40864">宽松</st>* <st c="40874">或</st>
    *<st c="40878">严格</st>*<st c="40889">，可以在企业、组织或仓库级别进行设置。</st> <st c="40945">宽松选项（标记为</st>
    *<st c="40978">1</st>* <st c="40979">在</st> *<st c="40983">图 6</st>**<st c="40991">.21</st>*<st
    c="40994">）授予对仓库中所有范围的读写访问权限，而严格选项（标记为</st> *<st c="41099">2</st>* <st c="41100">在</st>
    *<st c="41104">图 6</st>**<st c="41112">.21</st>*<st c="41115">）限制对内容和包范围的只读访问。</st>
    <st c="41187">选择宽松选项会增加在 PPE 攻击中攻击者提升权限或横向移动的风险。</st> <st c="41313">这种类型的攻击将在</st>
    <st c="41360">本章后续讨论。</st>
- en: '![Figure 6.21 – Configuring default permission for GitHub workflow tokens](img/B19710_06_21.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.21 – 配置 GitHub 工作流令牌的默认权限](img/B19710_06_21.jpg)'
- en: <st c="41986">Figure 6.21 – Configuring default permission for GitHub workflow
    tokens</st>
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="41986">图 6.21 – 配置 GitHub 工作流令牌的默认权限</st>
- en: <st c="42057">The configuration for</st> <st c="42079">this can be set</st>
    <st c="42096">at</st> <st c="42098">the enterprise, organization, or</st> <st
    c="42132">repository level:</st>
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="42057">此配置可以在</st> <st c="42079">企业、组织或</st> <st c="42096">仓库级别进行设置：</st>
- en: '**<st c="42149">Enterprise</st>**<st c="42160">:</st> **<st c="42163">Enterprise</st>**
    <st c="42173">|</st> **<st c="42176">Settings</st>** <st c="42184">|</st> **<st
    c="42187">Policies</st>** <st c="42195">|</st> **<st c="42198">Actions</st>**
    <st c="42205">|</st> **<st c="42208">Policies</st>** <st c="42216">|</st> **<st
    c="42219">Workflow permissions</st>**'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="42149">企业</st>**<st c="42160">:</st> **<st c="42163">企业</st>** <st
    c="42173">|</st> **<st c="42176">设置</st>** <st c="42184">|</st> **<st c="42187">策略</st>**
    <st c="42195">|</st> **<st c="42198">操作</st>** <st c="42205">|</st> **<st c="42208">策略</st>**
    <st c="42216">|</st> **<st c="42219">工作流权限</st>**'
- en: '**<st c="42239">Organization</st>**<st c="42252">:</st> **<st c="42255">Organization</st>**
    <st c="42267">|</st> **<st c="42270">Settings</st>** <st c="42278">|</st> **<st
    c="42281">Code, planning, and automation</st>** <st c="42311">|</st> **<st c="42314">Actions</st>**
    <st c="42321">|</st> **<st c="42324">General</st>** <st c="42331">|</st> **<st
    c="42334">Workflow permissions</st>**'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="42239">组织</st>**<st c="42252">:</st> **<st c="42255">组织</st>** <st
    c="42267">|</st> **<st c="42270">设置</st>** <st c="42278">|</st> **<st c="42281">代码、规划与自动化</st>**
    <st c="42311">|</st> **<st c="42314">操作</st>** <st c="42321">|</st> **<st c="42324">常规</st>**
    <st c="42331">|</st> **<st c="42334">工作流权限</st>**'
- en: '**<st c="42354">Repository</st>**<st c="42365">:</st> **<st c="42368">Repository</st>**
    <st c="42378">|</st> **<st c="42381">Settings</st>** <st c="42389">|</st> **<st
    c="42392">Code and automation</st>** <st c="42411">|</st> **<st c="42414">Actions</st>**
    <st c="42421">|</st> **<st c="42424">General</st>** <st c="42431">|</st> **<st
    c="42434">Workflow permissions</st>**'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="42354">仓库</st>**<st c="42365">:</st> **<st c="42368">仓库</st>** <st
    c="42378">|</st> **<st c="42381">设置</st>** <st c="42389">|</st> **<st c="42392">代码与自动化</st>**
    <st c="42411">|</st> **<st c="42414">操作</st>** <st c="42421">|</st> **<st c="42424">常规</st>**
    <st c="42431">|</st> **<st c="42434">工作流权限</st>**'
- en: <st c="42454">Regardless of the default permissions set at the enterprise, organization,
    or repository level, anyone with write access to a repository can modify permissions
    at the workflow level.</st> <st c="42638">For example, if the default permission
    for</st> `<st c="42681">GITHUB_TOKEN</st>` <st c="42693">is restrictive, a workflow
    owner may want to elevate the permissions to allow some actions and commands to
    run successfully in the workflow.</st> <st c="42835">Conversely, if the default
    permission is permissive, a workflow owner can decrease the</st> `<st c="42922">GITHUB_TOKEN</st>`
    <st c="42934">permissions by editing the workflow file.</st> <st c="42977">An
    example of setting permissions in a workflow file is shown in</st> *<st c="43042">Figure
    6</st>**<st c="43050">.22</st>*<st c="43053">.</st>
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="42454">无论是在企业、组织还是仓库级别设置的默认权限如何，任何具有写权限的用户都可以在工作流级别修改权限。</st> <st c="42638">例如，如果</st>
    `<st c="42681">GITHUB_TOKEN</st>` <st c="42693">的默认权限较为严格，工作流拥有者可能希望提高权限，以允许某些操作和命令在工作流中成功运行。</st>
    <st c="42835">相反，如果默认权限较宽松，工作流拥有者可以通过编辑工作流文件来降低</st> `<st c="42922">GITHUB_TOKEN</st>`
    <st c="42934">的权限。</st> <st c="42977">在工作流文件中设置权限的示例如下所示：</st> *<st c="43042">图
    6</st>**<st c="43050">.22</st>*<st c="43053">。</st>
- en: '![Figure 6.22 – Configuring permission for the GitHub workflow token in a workflow
    file](img/B19710_06_22.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.22 – 在工作流文件中配置 GitHub 工作流令牌的权限](img/B19710_06_22.jpg)'
- en: <st c="43278">Figure 6.22 – Configuring permission for the GitHub workflow token
    in a workflow file</st>
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="43278">图 6.22 – 在工作流文件中配置 GitHub 工作流令牌的权限</st>
- en: <st c="43363">For Azure DevOps, we can manage the access that the token (</st>`<st
    c="43423">System.AccessToken</st>`<st c="43442">) has using the job authorization
    scope policies (</st>*<st c="43493">Figure 6</st>**<st c="43502">.23</st>*<st
    c="43505">).</st> <st c="43509">These</st> <st c="43515">policies can be</st>
    <st c="43531">configured</st> <st c="43541">at the organization or project level.</st>
    <st c="43580">For the organization level, navigate to</st> **<st c="43620">Organization
    settings</st>** <st c="43641">|</st> **<st c="43644">Pipelines</st>** <st c="43653">|</st>
    **<st c="43656">Settings</st>**<st c="43664">. For the project level, go to</st>
    **<st c="43695">Project settings</st>** <st c="43711">|</st> **<st c="43714">Pipelines</st>**
    <st c="43723">|</st> **<st c="43726">Settings</st>**<st c="43734">. Note that
    settings at the organization level cannot be overridden at the</st> <st c="43809">project
    level.</st>
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="43363">对于 Azure DevOps，我们可以通过作业授权范围策略来管理令牌（</st>`<st c="43423">System.AccessToken</st>`<st
    c="43442">）的访问权限（</st>*<st c="43493">图 6</st>**<st c="43502">.23</st>*<st c="43505">）。</st>
    <st c="43509">这些</st> <st c="43515">策略可以在</st> <st c="43531">组织或项目级别进行配置。</st>
    <st c="43580">对于组织级别，导航到</st> **<st c="43620">组织设置</st>** <st c="43641">|</st>
    **<st c="43644">管道</st>** <st c="43653">|</st> **<st c="43656">设置</st>**<st c="43664">。对于项目级别，转到</st>
    **<st c="43695">项目设置</st>** <st c="43711">|</st> **<st c="43714">管道</st>** <st
    c="43723">|</st> **<st c="43726">设置</st>**<st c="43734">。请注意，组织级别的设置不能在</st> <st
    c="43809">项目级别被覆盖。</st>
- en: '![Figure 6.23 – Configuring job authorization scope policies in Azure DevOps](img/B19710_06_23.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.23 – 在 Azure DevOps 中配置作业授权范围策略](img/B19710_06_23.jpg)'
- en: <st c="44396">Figure 6.23 – Configuring job authorization scope policies in
    Azure DevOps</st>
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44396">图 6.23 – 在 Azure DevOps 中配置作业授权范围策略</st>
- en: <st c="44470">The available settings include</st> <st c="44502">the following:</st>
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44470">可用的设置包括</st> <st c="44502">以下内容：</st>
- en: '**<st c="44516">Limit job authorization scope to current project for non-release
    pipelines</st>**<st c="44591">: We can enable this setting to restrict the token’s
    access to the project where the pipeline is running.</st> <st c="44698">This setting
    only applies to YAML and classic build pipelines.</st> <st c="44761">If this setting
    is disabled, the access token will have organization-wide access that grants permissions
    to resources across different projects in the organization.</st> <st c="44926">This
    increases the potential impact in the case of a successful</st> <st c="44990">PPE
    attack.</st>'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="44516">将作业授权范围限制为当前项目（仅适用于非发布管道）</st>**<st c="44591">：我们可以启用此设置，限制令牌的访问权限仅限于运行管道的项目。</st>
    <st c="44698">此设置仅适用于 YAML 和经典构建管道。</st> <st c="44761">如果禁用此设置，访问令牌将具有组织范围的访问权限，并授予访问组织中不同项目的资源的权限。</st>
    <st c="44926">这会增加在成功发生</st> <st c="44990">PPE 攻击时的潜在影响。</st>'
- en: '**<st c="45001">Limit job authorization scope to current project for release
    pipelines</st>**<st c="45072">: We can enable this setting to restrict the token’s
    access to the project where the pipeline is running.</st> <st c="45179">This setting
    only applies to classic</st> <st c="45216">release pipelines.</st>'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="45001">将作业授权范围限制为当前项目（仅适用于发布管道）</st>**<st c="45072">：我们可以启用此设置，限制令牌的访问权限仅限于运行管道的项目。</st>
    <st c="45179">此设置仅适用于经典</st> <st c="45216">发布管道。</st>'
- en: <st c="45234">If both settings are disabled at the organization and project
    levels, then every pipeline job will have access to an organization-wide access
    token.</st> <st c="45384">This means if an adversary compromises any pipeline
    in any project, they could exploit the token to gain access to all repositories
    in our organization!</st> <st c="45537">This is why it is recommended to enable
    these settings to restrict</st> <st c="45603">the scope of access</st> <st c="45623">and</st>
    <st c="45627">to ensure that successful attacks are contained to a</st> <st c="45681">single
    project.</st>
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="45234">如果在组织级别和项目级别都禁用这些设置，那么每个管道作业将可以访问组织范围的访问令牌。</st> <st c="45384">这意味着，如果攻击者破坏了任何项目中的任何管道，他们可能会利用令牌来访问我们组织中的所有代码库！</st>
    <st c="45537">这就是为什么建议启用这些设置以限制</st> <st c="45603">访问范围</st> <st c="45623">并</st>
    <st c="45627">确保成功的攻击仅限于一个</st> <st c="45681">单一项目。</st>
- en: <st c="45696">Protecting the build environment from malicious code executions</st>
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="45696">保护构建环境免受恶意代码执行</st>
- en: <st c="45760">Securing the pipeline</st> <st c="45783">configuration is an important
    aspect of securing the build environment.</st> <st c="45855">The pipeline defines
    the process that code goes through before it is deployed into production.</st>
    <st c="45950">If compromised, attackers could change this configuration file to
    bypass security checks or to execute</st> <st c="46053">malicious code.</st>
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="45760">确保管道</st> <st c="45783">配置是确保构建环境安全的重要方面。</st> <st c="45855">管道定义了代码在部署到生产环境之前的处理流程。</st>
    <st c="45950">如果管道被攻破，攻击者可能会修改配置文件，绕过安全检查或执行</st> <st c="46053">恶意代码。</st>
- en: <st c="46068">The primary challenge is balancing security with the promotion
    of innovation and collaboration.</st> <st c="46165">As we previously discussed,
    the DevOps culture emphasizes teamwork and collaboration.</st> <st c="46251">For
    this reason, it is common for development teams to store the pipeline configuration
    files alongside source code in the same repository.</st> <st c="46391">This approach
    allows and encourages members of the team to contribute their tests to the build
    process, similar to code contributions.</st> <st c="46526">While this approach
    is great for collaboration, it also has risks associated with it.</st> <st c="46612">For
    example, if a developer’s credential is compromised by an attacker, it could be
    used to modify the configuration file to bypass security checks or to execute
    malicious code that steals</st> <st c="46801">sensitive credentials.</st>
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="46068">主要挑战在于在安全性与促进创新和协作之间取得平衡。</st> <st c="46165">正如我们之前讨论的，DevOps文化强调团队合作与协作。</st>
    <st c="46251">因此，开发团队通常将管道配置文件与源代码存储在同一个代码仓库中。</st> <st c="46391">这种做法允许并鼓励团队成员将他们的测试贡献到构建过程中，类似于代码贡献。</st>
    <st c="46526">虽然这种做法有助于协作，但也伴随着一定的风险。</st> <st c="46612">例如，如果开发人员的凭证被攻击者泄露，攻击者可能利用这些凭证修改配置文件，从而绕过安全检查或执行窃取</st>
    <st c="46801">敏感凭证的恶意代码。</st>
- en: <st c="46823">To address this challenge, a balanced approach is necessary.</st>
    <st c="46885">Developers could be granted permission to modify CI pipeline configurations
    for feature branches.</st> <st c="46983">However, strict access controls must
    be enforced for modifying the pipeline configuration files that are associated
    with the main branch.</st> <st c="47121">This approach provides flexibility for
    development teams without compromising the integrity of the</st> <st c="47220">main
    branch.</st>
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="46823">为了解决这一挑战，需要采取平衡的方式。</st> <st c="46885">开发人员可以被授权修改功能分支的CI管道配置。</st>
    <st c="46983">然而，必须严格控制访问权限，以修改与主分支相关联的管道配置文件。</st> <st c="47121">这种方式在不破坏主分支完整性的前提下，为开发团队提供了灵活性。</st>
    <st c="47220">主分支。</st>
- en: <st c="47232">Organizations that fail to guard the integrity of their main pipeline
    configuration files are at risk of PPE attacks.</st> <st c="47351">In such attacks,
    an attacker gains access to modify a pipeline configuration and uses this access
    to execute malicious code (thus</st> *<st c="47481">poisoning</st>* <st c="47490">the
    CI pipeline).</st> <st c="47509">The typical goal of this attack is to access
    and steal sensitive credentials.</st> <st c="47587">There are two types of PPE</st>
    <st c="47613">attacks:</st> **<st c="47623">direct</st>** <st c="47629">(also
    known as</st> **<st c="47645">D-PPE</st>**<st c="47650">) and</st> **<st c="47657">indirect</st>**
    <st c="47665">(also known</st> <st c="47678">as</st> **<st c="47681">I-PPE</st>**<st
    c="47686">).</st>
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="47232">未能保障主管道配置文件完整性的组织面临PPE攻击的风险。</st> <st c="47351">在这种攻击中，攻击者获得访问权限修改管道配置，并利用此访问权限执行恶意代码（从而</st>
    *<st c="47481">污染</st>* <st c="47490">CI管道）。</st> <st c="47509">这种攻击的典型目标是访问并窃取敏感凭证。</st>
    <st c="47587">PPE攻击有两种类型：</st> <st c="47613">攻击：</st> **<st c="47623">直接</st>**
    <st c="47629">(也称为</st> **<st c="47645">D-PPE</st>**<st c="47650">) 和</st> **<st
    c="47657">间接</st>** <st c="47665">(也称为</st> <st c="47678">I-PPE</st>**<st c="47681">)。</st>
- en: <st c="47689">Understanding direct and indirect PPE</st>
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="47689">理解直接和间接PPE</st>
- en: <st c="47727">In a direct PPE scenario, an</st> <st c="47757">attacker</st>
    <st c="47766">gains</st> <st c="47771">permission to the source control repository
    where the pipeline configuration is stored.</st> <st c="47860">This can be through
    compromised credentials such as a developer’s credentials, access tokens, SSH
    keys, or OAuth tokens.</st> <st c="47981">Once inside, the attacker modifies the
    pipeline configuration to execute malicious commands.</st> *<st c="48074">Figure
    6</st>**<st c="48082">.24</st>* <st c="48085">shows an example of this where a
    malicious command has been injected into a pipeline configuration to extract an
    environment variable with a sensitive credential (</st>`<st c="48249">AZURE_STORAGE_CONNECTION_STRING</st>`<st
    c="48281">) and sends it to an external server</st> <st c="48319">using</st> `<st
    c="48325">curl</st>`<st c="48329">:</st>
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="47727">在直接PPE场景中，攻击者</st> <st c="47757">获得</st> <st c="47766">权限访问存储管道配置的源代码仓库。</st>
    <st c="47860">这可以通过被攻破的凭证，例如开发者的凭证、访问令牌、SSH密钥或OAuth令牌。</st> <st c="47981">一旦进入，攻击者修改管道配置以执行恶意命令。</st>
    *<st c="48074">图 6</st>**<st c="48082">.24</st>* <st c="48085">展示了一个示例，其中恶意命令已被注入到管道配置中，用于提取带有敏感凭证的环境变量（</st>`<st
    c="48249">AZURE_STORAGE_CONNECTION_STRING</st>`<st c="48281">）并使用</st> `<st c="48325">curl</st>`<st
    c="48329">发送到外部服务器</st> <st c="48319">：</st>
- en: '![Figure 6.24 – Sample direct PPE](img/B19710_06_24.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.24 – 示例直接PPE](img/B19710_06_24.jpg)'
- en: <st c="48611">Figure 6.24 – Sample direct PPE</st>
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="48611">图 6.24 – 示例直接PPE</st>
- en: <st c="48642">For direct PPE to be possible, an attacker needs to gain access
    to modify the pipeline configuration file.</st> <st c="48750">In situations where
    this access is not possible, this may be because the pipeline configuration file
    is in a separate or protected repository, or it is defined using classic build
    pipeline methods (in Azure Pipelines), not YAML.</st> <st c="48979">In these cases,
    attackers can still poison the pipeline by injecting malicious code into files,
    code, or scripts that the pipeline configuration</st> <st c="49124">file uses.</st>
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="48642">为了实现直接PPE，攻击者需要获得修改管道配置文件的访问权限。</st> <st c="48750">在无法获得此访问权限的情况下，可能是因为管道配置文件位于一个独立或受保护的仓库中，或者它是通过经典构建管道方法（如Azure
    Pipelines）定义的，而不是YAML。</st> <st c="48979">在这些情况下，攻击者仍然可以通过向管道配置文件使用的文件、代码或脚本中注入恶意代码来污染管道。</st>
- en: <st c="49134">Pipelines that process unreviewed code are at a greater risk of
    PPE attacks.</st> <st c="49212">This includes pipelines activated by code from
    any repository branch or from PRs that have not been reviewed/validated.</st>
    <st c="49332">Using SAST tools to check pipeline configurations for harmful elements
    is a good and recommended practice.</st> <st c="49439">These tools should be used
    often to scan the</st> <st c="49483">repository</st> <st c="49494">where</st>
    <st c="49501">the pipeline configuration</st> <st c="49528">is stored.</st>
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="49134">处理未经审查代码的管道面临更大的PPE攻击风险。</st> <st c="49212">这包括由任何仓库分支或未经审查/验证的PR激活的管道。</st>
    <st c="49332">使用SAST工具检查管道配置中的有害元素是一个好的且推荐的做法。</st> <st c="49439">这些工具应经常用于扫描</st>
    <st c="49483">仓库</st> <st c="49494">其中</st> <st c="49501">存储管道配置的</st> <st c="49528">位置。</st>
- en: <st c="49538">Setting up an approval process for marketplace extensions</st>
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="49538">为市场扩展设置审批流程</st>
- en: <st c="49596">Both</st> <st c="49601">GitHub</st> <st c="49609">and Azure DevOps
    provide marketplaces for integrating additional tools to enhance and customize
    the CI/CD process.</st> <st c="49724">GitHub’s marketplace (</st>[<st c="49746">https://github.com/marketplace</st>](https://github.com/marketplace)<st
    c="49777">) allows developers to install</st> *<st c="49809">actions</st>* <st
    c="49816">and</st> *<st c="49821">apps</st>*<st c="49825">, while the Azure DevOps
    marketplace (</st>[<st c="49863">https://marketplace.visualstudio.com/azuredevops</st>](https://marketplace.visualstudio.com/azuredevops)<st
    c="49912">)</st> <st c="49915">offers</st> *<st c="49922">extensions</st>*<st
    c="49932">.</st>
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="49596">GitHub</st> <st c="49601">和Azure DevOps都提供了市场，供开发者集成额外工具，以增强和定制CI/CD流程。</st>
    <st c="49724">GitHub的市场（</st>[<st c="49746">https://github.com/marketplace</st>](https://github.com/marketplace)<st
    c="49777">）允许开发者安装</st> *<st c="49809">动作</st>* <st c="49816">和</st> *<st c="49821">应用</st>*<st
    c="49825">，而Azure DevOps市场（</st>[<st c="49863">https://marketplace.visualstudio.com/azuredevops</st>](https://marketplace.visualstudio.com/azuredevops)<st
    c="49912">）提供</st> *<st c="49922">扩展</st>*<st c="49932">。</st>
- en: <st c="49933">At the time of writing, the GitHub Marketplace hosts over 21,000
    actions and more than 850 apps, while the Azure DevOps marketplace lists over
    2,200 extensions.</st> <st c="50095">These numbers are</st> <st c="50113">continually
    increasing.</st>
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="49933">截至本文写作时，GitHub Marketplace 上已托管超过21,000个操作和超过850个应用，而 Azure DevOps
    Marketplace 上列出了超过2,200个扩展。</st> <st c="50095">这些数字</st> <st c="50113">还在不断增加。</st>
- en: <st c="50136">While the available additional tools (actions, apps, and extensions)
    are great for customizing and improving CI/CD experiences, there is also a risk
    of installing vulnerable or malicious ones.</st> <st c="50330">A recent analysis
    conducted by security researchers Rob Bos and Jesse Houwing has shed light on
    these risks.</st> <st c="50439">Their studies revealed that 35% of the tasks in
    the Azure DevOps marketplace and 30% of the actions in the GitHub Marketplace
    have security issues, mostly due to direct vulnerabilities or</st> <st c="50627">vulnerable
    dependencies.</st>
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="50136">虽然这些可用的附加工具（操作、应用和扩展）对于自定义和改善 CI/CD 体验非常有帮助，但也存在安装易受攻击或恶意工具的风险。</st>
    <st c="50330">安全研究人员 Rob Bos 和 Jesse Houwing 近期进行的分析揭示了这些风险。</st> <st c="50439">他们的研究表明，Azure
    DevOps Marketplace 中35%的任务和 GitHub Marketplace 中30%的操作存在安全问题，主要是由于直接漏洞或</st> <st
    c="50627">易受攻击的依赖关系。</st>
- en: <st c="50651">Given these findings, it is recommended to implement an approval
    process to ensure that any tools (actions, apps, or extensions) from the public
    marketplaces are thoroughly evaluated for security risks before installation.</st>
    <st c="50875">Taking this precautionary step can help mitigate the threat of integrating
    potentially harmful or compromised tools into CI/CD pipelines.</st> <st c="51013">In
    this section, we will cover actions in GitHub Enterprise and extensions in Azure
    DevOps.</st> <st c="51105">We will discuss GitHub Apps later in</st> <st c="51142">this
    chapter.</st>
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="50651">鉴于这些发现，建议实施审批流程，以确保来自公共市场的任何工具（操作、应用或扩展）在安装之前都经过彻底的安全风险评估。</st>
    <st c="50875">采取这种预防措施有助于减轻将潜在有害或被妥协工具集成到 CI/CD 流水线中的威胁。</st> <st c="51013">在本节中，我们将介绍
    GitHub Enterprise 中的操作和 Azure DevOps 中的扩展。</st> <st c="51105">稍后我们将讨论 GitHub 应用程序</st>
    <st c="51142">在本章中。</st>
- en: <st c="51155">Note</st>
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="51155">注意</st>
- en: <st c="51160">Check out the full reports by Rob Bos and Jesse Houwing using</st>
    <st c="51223">these links:</st>
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="51160">查看 Rob Bos 和 Jesse Houwing 的完整报告，链接如下：</st>
- en: '[<st c="51235">https://devopsjournal.io/blog/2022/09/18/Analysing-the-GitHub-marketplace</st>](https://devopsjournal.io/blog/2022/09/18/Analysing-the-GitHub-marketplace)'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[<st c="51235">https://devopsjournal.io/blog/2022/09/18/Analysing-the-GitHub-marketplace</st>](https://devopsjournal.io/blog/2022/09/18/Analysing-the-GitHub-marketplace)'
- en: '[<st c="51309">https://jessehouwing.net/security-state-of-the-azure-devops-marketplace/</st>](https://jessehouwing.net/security-state-of-the-azure-devops-marketplace/)'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[<st c="51309">https://jessehouwing.net/security-state-of-the-azure-devops-marketplace/</st>](https://jessehouwing.net/security-state-of-the-azure-devops-marketplace/)'
- en: <st c="51382">GitHub Enterprise has policies that we can use to control the
    actions that can be used in our</st> <st c="51476">workflows.</st> <st c="51488">This</st>
    <st c="51493">can be configured at the enterprise, organization, or</st> <st c="51547">repository
    level:</st>
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="51382">GitHub Enterprise 有可用于控制可在工作流中使用的操作的策略。</st> <st c="51476">这些设置可以在企业、组织或</st>
    <st c="51547">仓库级别进行配置：</st>
- en: '**<st c="51564">Enterprise-level configuration</st>**<st c="51595">:</st> **<st
    c="51598">Enterprise</st>** <st c="51608">|</st> **<st c="51611">Settings</st>**
    <st c="51619">|</st> **<st c="51622">Policies</st>** <st c="51630">|</st> **<st
    c="51633">Actions</st>** <st c="51640">|</st> **<st c="51643">Policies</st>**'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="51564">企业级别配置</st>**<st c="51595">:</st> **<st c="51598">企业</st>**
    <st c="51608">|</st> **<st c="51611">设置</st>** <st c="51619">|</st> **<st c="51622">策略</st>**
    <st c="51630">|</st> **<st c="51633">操作</st>** <st c="51640">|</st> **<st c="51643">策略</st>**'
- en: '**<st c="51651">Organization-level configuration</st>**<st c="51684">:</st>
    **<st c="51687">Organization</st>** <st c="51699">|</st> **<st c="51702">Settings</st>**
    <st c="51710">|</st> **<st c="51713">Code, planning, and automation</st>** <st
    c="51743">|</st> **<st c="51746">Actions</st>** <st c="51753">|</st> **<st c="51756">General</st>**
    <st c="51763">|</st> **<st c="51766">Policies</st>**'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="51651">组织级别配置</st>**<st c="51684">:</st> **<st c="51687">组织</st>**
    <st c="51699">|</st> **<st c="51702">设置</st>** <st c="51710">|</st> **<st c="51713">代码、规划与自动化</st>**
    <st c="51743">|</st> **<st c="51746">操作</st>** <st c="51753">|</st> **<st c="51756">常规</st>**
    <st c="51763">|</st> **<st c="51766">策略</st>**'
- en: '**<st c="51774">Repository-level configuration</st>**<st c="51805">:</st> **<st
    c="51808">Repository</st>** <st c="51818">|</st> **<st c="51821">Actions</st>**
    <st c="51828">|</st> **<st c="51831">General</st>** <st c="51838">|</st> **<st
    c="51841">Actions</st>**'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="51774">仓库级配置</st>**<st c="51805">：</st> **<st c="51808">仓库</st>**
    <st c="51818">|</st> **<st c="51821">操作</st>** <st c="51828">|</st> **<st c="51831">通用</st>**
    <st c="51838">|</st> **<st c="51841">操作</st>**'
- en: <st c="51848">The policy called</st> **<st c="51867">Allow enterprise, and select
    non-enterprise, actions and reusable workflows</st>** <st c="51942">offers several
    options to control actions that developers will be allowed to use in workflows
    (</st>*<st c="52038">Figure 6</st>**<st c="52047">.25</st>*<st c="52050">):</st>
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="51848">名为</st> **<st c="51867">允许企业及部分非企业操作和可重用工作流</st>** <st c="51942">的策略提供了多个选项，用于控制开发者在工作流中可以使用的操作（</st>*<st
    c="52038">图 6</st>**<st c="52047">.25</st>*<st c="52050">）：</st>
- en: '![Figure 6.25 – Defining actions that can be used in workflows](img/B19710_06_25.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.25 – 定义可以在工作流中使用的操作](img/B19710_06_25.jpg)'
- en: <st c="53172">Figure 6.25 – Defining actions that can be used in workflows</st>
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="53172">图 6.25 – 定义可以在工作流中使用的操作</st>
- en: '**<st c="53232">Allow actions created by GitHub</st>**<st c="53264">: This
    setting permits the use of all actions developed</st> <st c="53321">by</st> <st
    c="53324">GitHub.</st> <st c="53332">These are the actions available in the actions
    (</st>[<st c="53380">https://github.com/actions</st>](https://github.com/actions)<st
    c="53407">) and GitHub (</st>[<st c="53422">https://github.com/github</st>](https://github.com/github)<st
    c="53448">) organizations.</st>'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="53232">允许 GitHub 创建的操作</st>**<st c="53264">：此设置允许使用由</st> <st c="53321">GitHub</st>
    <st c="53324">开发的所有操作。</st> <st c="53332">这些操作可以在 actions（</st>[<st c="53380">https://github.com/actions</st>](https://github.com/actions)<st
    c="53407">）和 GitHub（</st>[<st c="53422">https://github.com/github</st>](https://github.com/github)<st
    c="53448">）组织中找到。</st>'
- en: '**<st c="53465">Allow actions by Marketplace verified creators</st>**<st c="53512">:
    This setting permits the use of actions from the GitHub Marketplace only if the
    creators are verified.</st> <st c="53618">This is indicated by the</st> *<st c="53643">verified
    creator</st>* <st c="53659">badge (</st>*<st c="53667">Figure 6</st>**<st c="53676">.26</st>*<st
    c="53679">).</st> <st c="53683">It is worth calling out that using actions from
    verified creators still carries risks.</st> <st c="53770">The badge signifies
    that the action’s creators have had their identities confirmed by GitHub, usually
    by going through a domain validation process.</st> <st c="53918">It does not signify
    that the action has passed any</st> <st c="53969">security checks.</st>'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="53465">允许由市场验证的创建者提供的操作</st>**<st c="53512">：此设置仅允许使用来自 GitHub 市场的操作，前提是这些创建者已通过验证。</st>
    <st c="53618">这一点可以通过</st> *<st c="53643">验证的创建者</st>* <st c="53659">徽章表示（</st>*<st
    c="53667">图 6</st>**<st c="53676">.26</st>*<st c="53679">）。</st> <st c="53683">需要注意的是，使用来自验证创建者的操作仍然存在风险。</st>
    <st c="53770">该徽章表明操作的创建者已经通过 GitHub 确认了其身份，通常是通过域验证过程。</st> <st c="53918">但这并不意味着该操作已经通过任何</st>
    <st c="53969">安全检查。</st>'
- en: '![Figure 6.26 – GitHub actions verified creators](img/B19710_06_26.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.26 – GitHub Actions 验证的创建者](img/B19710_06_26.jpg)'
- en: <st c="54276">Figure 6.26 – GitHub actions verified creators</st>
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="54276">图 6.26 – GitHub Actions 验证的创建者</st>
- en: '**<st c="54322">Allow specified actions and reusable workflows</st>**<st c="54369">:
    This setting can be used to restrict workflows to only use actions from specified,
    approved organizations and repositories.</st> <st c="54496">Approved actions are
    specified using the</st> <st c="54537">following syntax:</st>'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="54322">允许指定的操作和可重用工作流</st>**<st c="54369">：此设置可用于将工作流限制为仅使用来自指定、批准的组织和仓库中的操作。</st>
    <st c="54496">已批准的操作通过以下语法指定：</st>'
- en: '[PRE0]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="54605">Wildcards are supported in the syntax, which opens up a lot of
    use cases.</st> <st c="54680">For example, specifying a wildcard such as</st>
    `<st c="54723">azure/webapps-deploy@*</st>` <st c="54745">allows the use</st>
    <st c="54761">of any</st> <st c="54767">version of the</st> `<st c="54783">webapps-deploy</st>`
    <st c="54797">action within the</st> `<st c="54816">azure</st>` <st c="54821">organization.</st>
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="54605">语法中支持通配符，这为许多用例提供了可能性。</st> <st c="54680">例如，指定通配符，如</st> `<st
    c="54723">azure/webapps-deploy@*</st>` <st c="54745">允许使用</st> <st c="54761">任何</st>
    <st c="54767">版本的</st> `<st c="54783">webapps-deploy</st>` <st c="54797">操作，前提是该操作来自</st>
    `<st c="54816">azure</st>` <st c="54821">组织。</st>
- en: <st c="54835">To allow only a specific version of the action, we can specify</st>
    `<st c="54899">TAG-OR-SHA</st>`<st c="54909">. For example,</st> `<st c="54924">azure/webapps-deploy@v3.0.1</st>`
    <st c="54951">will only allow the use of version</st> `<st c="54987">3.0.1</st>`<st
    c="54992">. However, specifying a tag still has associated risks.</st> <st c="55048">If
    the creator’s repository is compromised, an attacker could easily modify the tag
    to reference malicious code.</st> <st c="55161">To mitigate this risk, a commit
    SHA can be used, for example,</st> `<st c="55223">azure/webapps-deploy@b45824004798750b8e136effc585c3cd6082bd6432</st>`<st
    c="55286">. This defines a specific commit and ensures</st> <st c="55331">stricter
    integrity.</st>
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="55350">We can also apply a wildcard to an entire organization.</st> <st
    c="55407">By specifying</st> `<st c="55421">azure/*</st>`<st c="55428">, any action
    within the Azure organization will be allowed.</st> <st c="55488">This opens up
    the option to implement a form of an</st> *<st c="55539">internal marketplace</st>*<st
    c="55559">. The steps to implement this include</st> <st c="55597">the following:</st>
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="55611">Establish an organization to host approved actions, for</st> <st
    c="55668">example,</st> `<st c="55677">MY-ORG</st>`<st c="55683">.</st>
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="55684">Approve the entire organization’s actions by adding them to the
    approved list, for</st> <st c="55768">example,</st> `<st c="55777">MY-ORG/*</st>`<st
    c="55785">.</st>
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="55786">Perform a security review of GitHub actions that</st> <st c="55836">are
    requested.</st>
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="55850">Fork approved actions into this organization, making them available
    for developers</st> <st c="55934">to use.</st>
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="55941">Note</st>
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: <st c="55946">The maximum number of action definitions that we can specify in
    the</st> `<st c="56073">1000</st>`<st c="56077">.</st>
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: <st c="56078">For Azure DevOps, by default, organization owners and project
    collection administrators can install extensions from the marketplace.</st> <st
    c="56212">To permit additional users to install extensions</st> <st c="56260">without</st>
    <st c="56269">adding them to these privileged roles, assign them as extension
    managers.</st> <st c="56343">This assignment is managed by going to</st> **<st
    c="56382">Organization settings</st>** <st c="56403">|</st> **<st c="56406">General</st>**
    <st c="56413">|</st> **<st c="56416">Extensions</st>** <st c="56426">|</st> **<st
    c="56429">Security</st>** <st c="56437">(top-right corner) |</st> **<st c="56459">Add</st>**<st
    c="56462">, then adding the user or group as a manager (</st>*<st c="56508">Figure
    6</st>**<st c="56517">.27</st>*<st c="56520">).</st>
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.27 – Adding extension managers in Azure DevOps](img/B19710_06_27.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
- en: <st c="56677">Figure 6.27 – Adding extension managers in Azure DevOps</st>
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: <st c="56732">Users without extension installation permissions can submit extension
    requests (</st>*<st c="56813">Figure 6</st>**<st c="56822">.28</st>*<st c="56825">).</st>
    <st c="56829">Project collection administrators are then notified via email of
    these requests.</st> <st c="56910">Upon approval, Azure DevOps automatically installs
    the requested extension.</st> <st c="56986">To submit requests, users must have
    contributor roles within</st> <st c="57047">their organization.</st>
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.28 – User experience of requesting for an extension to be added
    to the organization in Azure DevOps](img/B19710_06_28.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
- en: <st c="57350">Figure 6.28 – User experience of requesting for an extension to
    be added to the organization in Azure DevOps</st>
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: <st c="57458">Now that</st> <st c="57468">we</st> <st c="57471">understand how
    to secure our build services and workers, let’s review how to integrate security
    assessments into the</st> <st c="57588">build process.</st>
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: <st c="57602">Addressing common coding security issues</st>
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="57643">Integrating</st> <st c="57655">security into CI and build phases
    helps find vulnerabilities that previous source code analysis might have missed.</st>
    <st c="57771">It can be helpful in catching risks that bypass pre-commit or source
    control checks, either due to insufficient context or because developers might
    have skipped these checks.</st> <st c="57946">This is even more important because
    some issues only appear when code is compiled, linked, or run in</st> <st c="58047">specific
    environments.</st>
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: <st c="58069">The dynamic nature of software means that during build and integration,
    code interacts with various dependencies, libraries, and runtime environments,
    potentially introducing vulnerabilities not visible by only assessing the source
    code.</st> <st c="58308">Third-party components added during building can bring
    their own security risks.</st> <st c="58389">Some security issues, such as buffer
    overflows or memory management problems in compiled languages, may only surface
    during compilation and linking.</st> <st c="58538">Also, build processes often
    involve configuration files and environment settings, which can lead to security
    issues arising</st> <st c="58662">from misconfigurations.</st>
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: <st c="58685">Security integration in the build phase addresses many of the
    same issues covered in earlier development stages, but in a more comprehensive
    context.</st> <st c="58836">This includes conducting vulnerability scans on both
    first-party and third-party code, detecting potential secret leaks, and assessing
    license compliance.</st> <st c="58991">These checks are similar to those performed
    earlier, but they can be more thorough during the build phase due to the complete
    integration of</st> <st c="59132">all components.</st>
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: <st c="59147">The build phase also introduces opportunities for additional security
    measures.</st> <st c="59228">Malware assessments can be performed to ensure that
    no malicious code has been inadvertently introduced during development or through
    third-party dependencies.</st> <st c="59388">Runtime environment checks</st> <st
    c="59414">are also possible at this stage, allowing teams to identify potential
    security issues that might only appear when the software is executed in its</st>
    <st c="59561">intended environment.</st>
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="59147">构建阶段还引入了额外的安全措施机会。</st> <st c="59228">可以执行恶意软件评估，以确保在开发过程中或通过第三方依赖项未意外引入恶意代码。</st>
    <st c="59388">运行时环境检查</st> <st c="59414">也可以在此阶段进行，允许团队识别只有在其</st> <st c="59561">预期环境中执行软件时才可能出现的潜在安全问题。</st>
- en: <st c="59582">Implementing the Microsoft Security DevOps extension</st>
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="59582">实施 Microsoft Security DevOps 扩展</st>
- en: <st c="59635">When integrating</st> <st c="59652">security</st> <st c="59662">checks
    into the build process, tools are typically available as command-line utilities
    or marketplace extensions.</st> <st c="59776">Marketplace extensions simplify
    organization-wide tool adoption but may have limited compatibility across DevOps
    platforms.</st> <st c="59900">Command-line tools offer greater flexibility but
    often require installation on build workers, either during the workflow or as
    part of the self-hosted</st> <st c="60051">worker image.</st>
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="59635">将安全检查集成到构建过程中时，工具通常作为命令行实用程序或市场扩展提供。</st> <st c="59776">市场扩展简化了整个组织范围内工具的采用，但在
    DevOps 平台之间的兼容性可能有限。</st> <st c="59900">命令行工具提供更大的灵活性，但通常需要在构建工作器上安装，可以在工作流程中或作为自托管</st>
    <st c="60051">工作器镜像的一部分安装。</st>
- en: <st c="60064">For Azure DevOps, Microsoft offers an extension called</st> **<st
    c="60120">Microsoft Security DevOps</st>**<st c="60145">, which brings together
    multiple static analysis tools for security assessment in build and deployment
    pipelines.</st> *<st c="60259">Figure 6</st>**<st c="60267">.29</st>* <st c="60270">shows
    a list of tools bundled with this extension.</st> <st c="60322">Some tools in
    the Microsoft Security DevOps extension have commercial variants with significantly
    more capabilities than the open source options included.</st> <st c="60477">For
    example, Trivy has a commercial version, detailed in this comparison:</st> [<st
    c="60551">https://github.com/aquasecurity/resources/blob/main/trivy-aqua.md</st>](https://github.com/aquasecurity/resources/blob/main/trivy-aqua.md)<st
    c="60616">. Checkov, by Palo Alto Networks, also has more capabilities in its
    commercial offering within Prisma Cloud compared to the open</st> <st c="60745">source
    version.</st>
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="60064">对于 Azure DevOps，微软提供了一个名为</st> **<st c="60120">Microsoft Security
    DevOps</st>**<st c="60145">的扩展，将多个静态分析工具集成到构建和部署管道中，用于安全评估。</st> *<st c="60259">图
    6</st>**<st c="60267">.29</st>* <st c="60270">展示了该扩展中捆绑的工具列表。</st> <st c="60322">Microsoft
    Security DevOps 扩展中的某些工具具有商业版本，其功能显著优于包含的开源选项。</st> <st c="60477">例如，Trivy 有一个商业版本，在此比较中详细说明：</st>
    [<st c="60551">https://github.com/aquasecurity/resources/blob/main/trivy-aqua.md</st>](https://github.com/aquasecurity/resources/blob/main/trivy-aqua.md)<st
    c="60616">。Palo Alto Networks 的 Checkov 在 Prisma Cloud 内的商业版本与开源版本相比，也具有更多功能。</st>
- en: '![Figure 6.29 – Microsoft DevOps extension tools](img/B19710_06_29.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.29 – Microsoft DevOps 扩展工具](img/B19710_06_29.jpg)'
- en: <st c="61951">Figure 6.29 – Microsoft DevOps extension tools</st>
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="61951">图 6.29 – Microsoft DevOps 扩展工具
- en: <st c="61997">To implement the</st> <st c="62015">Microsoft</st> <st c="62025">Security
    DevOps extension, first install it in your Azure DevOps organization.</st> <st
    c="62104">Then, incorporate the extension into your pipeline by adding a task
    that executes the desired security checks.</st> <st c="62215">Configure the task
    parameters to specify which tools to run and any custom settings.</st> <st c="62300">Finally,
    integrate the task results into your build process, potentially by setting quality
    gates or generating reports based on the</st> <st c="62433">security findings.</st>
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="61997">要实现 Microsoft</st> <st c="62015">Security DevOps 扩展，首先在 Azure
    DevOps 组织中安装它。</st> <st c="62104">然后，通过添加执行所需安全检查的任务将该扩展集成到流水线中。</st> <st c="62215">配置任务参数以指定要运行的工具和任何自定义设置。</st>
    <st c="62300">最后，将任务结果集成到构建过程中，可能通过设置质量门或基于</st> <st c="62433">安全发现生成报告。</st>
- en: <st c="62451">This approach allows for comprehensive security scanning within
    Azure DevOps pipelines, using a curated set of open source</st> <st c="62575">analysis
    tools.</st>
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="62451">这种方法允许在 Azure DevOps 管道中进行全面的安全扫描，使用一套精选的开源</st> <st c="62575">分析工具。</st>
- en: <st c="62590">Integrating GitHub Advanced Security code-scanning capabilities
    into pipelines</st>
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="62590">将 GitHub 高级安全代码扫描功能集成到管道中</st>
- en: <st c="62669">Another</st> <st c="62678">solution</st> <st c="62687">that</st>
    <st c="62692">can be implemented as part of our build phase security</st> <st
    c="62746">assessment is</st> **<st c="62761">GitHub Advanced Security</st>** <st
    c="62785">(</st>**<st c="62787">GHAS</st>**<st c="62791">) code scanning for first-party
    code vulnerability detection.</st> <st c="62854">Implementing GHAS code scanning
    in GitHub workflows or</st> **<st c="62909">GitHub Advanced Security for Azure
    DevOps</st>** <st c="62950">(</st>**<st c="62952">GHAzDO</st>**<st c="62958">)
    code</st> <st c="62965">scanning in Azure DevOps pipelines follows similar steps.</st>
    <st c="63024">For both platforms, we can implement the CodeQL actions/tasks in
    the</st> <st c="63093">following order:</st>
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="62669">另一个</st> <st c="62678">可以作为构建阶段安全评估一部分实施的</st> <st c="62687">解决方案是</st>
    **<st c="62761">GitHub 高级安全</st>** <st c="62785">（</st>**<st c="62787">GHAS</st>**<st
    c="62791">）代码扫描，用于检测第一方代码漏洞。</st> <st c="62854">在 GitHub 工作流中实施 GHAS 代码扫描或</st>
    **<st c="62909">GitHub 高级安全用于 Azure DevOps</st>** <st c="62950">（</st>**<st c="62952">GHAzDO</st>**<st
    c="62958">）代码扫描，步骤相似。</st> <st c="62965">对于这两个平台，我们可以按照以下顺序实施 CodeQL 操作/任务：</st>
- en: '`<st c="63216">github/codeql-action/init</st>` <st c="63241">action.</st> <st
    c="63250">For Azure DevOps, the equivalent pipeline task is</st> `<st c="63300">AdvancedSecurity-Codeql-Autobuild</st>`<st
    c="63333">. This step involves specifying the programming languages that we want
    CodeQL to analyze and the ruleset (referred to as the CodeQL query suite) to use
    for the analysis.</st> <st c="63503">The language options available for analysis
    are C#, C++, Go, Java, JavaScript, Python, Ruby, and Swift (note: Swift support
    is in beta at the time of writing).</st> <st c="63663">For the CodeQL query suite
    (ruleset), we can choose from</st> <st c="63720">these options:</st>'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<st c="63216">github/codeql-action/init</st>` <st c="63241">操作。</st> <st c="63250">对于
    Azure DevOps，相应的管道任务是</st> `<st c="63300">AdvancedSecurity-Codeql-Autobuild</st>`<st
    c="63333">。此步骤涉及指定我们希望 CodeQL 分析的编程语言和用于分析的规则集（称为 CodeQL 查询套件）。</st> <st c="63503">可用于分析的语言选项包括
    C#、C++、Go、Java、JavaScript、Python、Ruby 和 Swift（注意：Swift 支持在本文撰写时处于 beta 阶段）。</st>
    <st c="63663">对于 CodeQL 查询套件（规则集），我们可以选择以下选项：</st>'
- en: '`<st c="63734">code-scanning</st>`<st c="63748">: This is the default ruleset
    used by CodeQL code scanning.</st> <st c="63809">The queries in this ruleset have
    better accuracy and fewer false positives than others.</st> <st c="63897">It is
    designed to detect severe security issues and minimize</st> <st c="63958">incorrect
    alerts.</st>'
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="63734">code-scanning</st>`<st c="63748">：这是 CodeQL 代码扫描使用的默认规则集。</st>
    <st c="63809">此规则集中的查询比其他规则集具有更好的准确性和更少的误报。</st> <st c="63897">它旨在检测严重的安全问题，并尽量减少</st>
    <st c="63958">不正确的警报。</st>'
- en: '`<st c="63975">security-extended</st>`<st c="63993">: This ruleset includes
    all queries from the default suite, plus extra queries that are slightly less
    accurate and severe.</st> <st c="64117">This ruleset could potentially detect
    more security issues but it could also result in an increase in false-positive
    or low-severity detections.</st> <st c="64262">For example, it might flag code
    patterns that have a minor security risk or are less likely to pose</st> <st c="64362">significant
    threats.</st>'
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="63975">security-extended</st>`<st c="63993">：此规则集包括来自默认套件的所有查询，以及额外的查询，这些查询的准确性稍差，严重性也较低。</st>
    <st c="64117">这个规则集可能会检测到更多的安全问题，但也可能导致误报或低严重性检测的增加。</st> <st c="64262">例如，它可能会标记出那些具有轻微安全风险或不太可能构成</st>
    <st c="64362">重大威胁的代码模式。</st>'
- en: '`<st c="64382">security-and-quality</st>`<st c="64403">: This ruleset includes
    all queries from the security-extended suite and adds queries that detect code
    quality issues.</st> <st c="64523">The ruleset goes beyond security to assess
    quality issues such as dead code, duplicate code, or other coding patterns that
    could make the software more difficult to maintain and evolve</st> <st c="64708">over
    time.</st>'
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="64382">security-and-quality</st>`<st c="64403">：此规则集包括来自 security-extended
    套件的所有查询，并添加了检测代码质量问题的查询。</st> <st c="64523">该规则集不仅评估安全性，还评估如死代码、重复代码或其他可能使软件更难维护和演化</st>
    <st c="64708">的编码模式。</st>'
- en: '`<st c="64718">security-experimental</st>`<st c="64740">: This ruleset includes
    queries that are either in development or provided by the community but are not
    yet part of the main query suites described previously.</st> <st c="64901">The
    queries in this ruleset can be unstable and may change or produce unpredictable
    results.</st> <st c="64994">It is not recommended to use this query suite for
    production use cases (feel free to use them</st> <st c="65088">in test/dev).</st>'
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="64718">security-experimental</st>`<st c="64740">：该规则集包括正在开发中的查询或由社区提供但尚未成为之前描述的主要查询套件一部分的查询。</st>
    <st c="64901">此规则集中的查询可能不稳定，并可能发生变化或产生不可预测的结果。</st> <st c="64994">不建议将此查询套件用于生产用例（可以在测试/开发中使用）。</st>'
- en: '*<st c="65101">Figure 6</st>**<st c="65110">.30</st>* <st c="65113">shows this
    step in a GitHub workflow (marked as</st> *<st c="65162">1</st>*<st c="65163">)
    and</st> <st c="65169">an Azure</st> <st c="65177">DevOps</st> <st c="65184">pipeline
    (marked</st> <st c="65202">as</st> *<st c="65205">2</st>*<st c="65206">).</st>'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*<st c="65101">图 6</st>**<st c="65110">.30</st>* <st c="65113">展示了 GitHub 工作流中的这一步骤（标记为</st>
    *<st c="65162">1</st>*<st c="65163">）以及</st> <st c="65169">Azure</st> <st c="65177">DevOps</st>
    <st c="65184">流水线（标记为</st> <st c="65202">2</st>*<st c="65206">）。</st>'
- en: '![Figure 6.30 – Sample initialization of CodeQL](img/B19710_06_30.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.30 – CodeQL 初始化示例](img/B19710_06_30.jpg)'
- en: <st c="65565">Figure 6.30 – Sample initialization of CodeQL</st>
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="65565">图 6.30 – CodeQL 初始化示例</st>
- en: '`<st c="65790">github/codeql-action/autobuild</st>` <st c="65820">action.</st>
    <st c="65829">For Azure DevOps, the equivalent pipeline task is</st> `<st c="65879">AdvancedSecurity-Codeql-Autobuild</st>`<st
    c="65912">. This step compiles or interprets the code in a way that prepares it
    for detailed analysis.</st> <st c="66005">It ensures that the CodeQL tool can
    analyze the built artifacts of the code base.</st> <st c="66087">The autobuild
    process varies depending on the programming language of the code base, with specific
    build procedures for languages such as C#, C++, Go, Java, JavaScript, Python,
    Ruby, and Swift.</st> <st c="66281">This step is automated but can be customized
    if the default build process does not suit the</st> <st c="66373">project’s requirements.</st>'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<st c="65790">github/codeql-action/autobuild</st>` <st c="65820">动作。</st>
    <st c="65829">对于 Azure DevOps，相应的流水线任务是</st> `<st c="65879">AdvancedSecurity-Codeql-Autobuild</st>`<st
    c="65912">。此步骤以某种方式编译或解释代码，为详细分析做好准备。</st> <st c="66005">它确保 CodeQL 工具能够分析代码库的构建产物。</st>
    <st c="66087">自动构建过程会根据代码库的编程语言有所不同，针对 C#、C++、Go、Java、JavaScript、Python、Ruby 和
    Swift 等语言有特定的构建程序。</st> <st c="66281">此步骤是自动化的，但如果默认的构建过程不适合</st> <st c="66373">项目的需求，可以进行自定义。</st>'
- en: '`<st c="66527">github/codeql-action/analyze</st>` <st c="66555">action.</st>
    <st c="66564">For Azure DevOps, the equivalent is the</st> `<st c="66604">AdvancedSecurity-Codeql-Analysis</st>`
    <st c="66636">pipeline task.</st> <st c="66652">This step conducts an in-depth
    analysis of the code to identify potential security vulnerabilities or code quality
    issues, based on the ruleset (query suite) selected during the initialization
    step.</st> <st c="66851">The analysis leverages the CodeQL database, which was
    generated during the build process, to query the code base for patterns that match
    known vulnerabilities or poor coding practices.</st> <st c="67036">The results
    of the analysis are then compiled into a report, highlighting any security issues
    or code quality concerns that were detected.</st> <st c="67175">This enables developers
    to address these issues before the</st> <st c="67233">code</st> <st c="67238">is</st>
    <st c="67241">deployed, improving the security and quality of</st> <st c="67290">the
    software.</st>'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<st c="66527">github/codeql-action/analyze</st>` <st c="66555">动作。</st> <st
    c="66564">对于 Azure DevOps，相应的任务是</st> `<st c="66604">AdvancedSecurity-Codeql-Analysis</st>`
    <st c="66636">流水线任务。</st> <st c="66652">此步骤对代码进行深入分析，以识别潜在的安全漏洞或代码质量问题，分析基于在初始化步骤中选择的规则集（查询套件）。</st>
    <st c="66851">分析利用在构建过程中生成的 CodeQL 数据库，通过查询代码库，寻找与已知漏洞或不良编码实践匹配的模式。</st> <st c="67036">分析结果将被汇总成报告，突出显示检测到的任何安全问题或代码质量问题。</st>
    <st c="67175">这使得开发人员能够在</st> <st c="67233">代码</st> <st c="67238">部署之前解决这些问题，从而提高</st>
    <st c="67290">软件的安全性和质量。</st>'
- en: <st c="67303">Integrating GHAS dependency-scanning capabilities into pipelines</st>
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="67303">将 GHAS 依赖性扫描功能集成到流水线中</st>
- en: <st c="67368">GHAzDO</st> <st c="67375">provides</st> <st c="67384">dependency-scanning</st>
    <st c="67404">capability that can be integrated into the pipeline.</st> <st c="67458">In
    a YAML pipeline, we can use the</st> `<st c="67493">AdvancedSecurity-Dependency-Scanning</st>`
    <st c="67529">task, as shown in</st> *<st c="67548">Figure 6</st>**<st c="67556">.31</st>*<st
    c="67559">.</st>
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.31 – Implementing GHAzDO Dependency Scanning in an Azure DevOps
    pipeline](img/B19710_06_31.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
- en: <st c="67978">Figure 6.31 – Implementing GHAzDO Dependency Scanning in an Azure
    DevOps pipeline</st>
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: <st c="68059">Let’s see this in</st> <st c="68077">action.</st> <st c="68086">We</st>
    <st c="68088">will now</st> <st c="68098">perform these security scans on</st>
    <st c="68130">Azure DevOps.</st>
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: <st c="68143">Hands-on exercises – Integrating security within the build phase</st>
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="68208">In this exercise, we</st> <st c="68229">will be integrating security
    within the build phase of our pipeline.</st> <st c="68299">We will practically
    integrate</st> <st c="68328">SAST,</st> **<st c="68335">Software Composition Analysis
    (SCA)</st>**<st c="68370">, and secret scanning using several tools, such as</st>
    **<st c="68421">GitHub Advanced Security (GHAS)</st>**<st c="68452">. We</st>
    <st c="68456">will also enable DevOps Security in Microsoft Defender</st> <st
    c="68512">for Cloud.</st>
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: <st c="68522">Below are the</st> <st c="68537">hands-on exercises:</st>
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="68556">Exercise 1 –</st>** <st c="68569">Integrating SAST, SCA, and
    secret scanning into the</st> <st c="68622">build process</st>'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="68635">Exercise 2 –</st>** <st c="68649">Onboarding your DevOps platforms
    to DevOps Security in Microsoft Defender</st> <st c="68723">for Cloud</st>'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="68732">Prerequisites</st>
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="68746">Before diving into the security tasks, let’s first create a test
    environment and service connections needed for our application</st> <st c="68875">to
    run.</st>
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: <st c="68882">Task 1 – Creating a test environment</st>
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="68919">Navigate to</st> <st c="68931">your DevOps instance (</st>[<st
    c="68954">https://dev.azure.com</st>](https://dev.azure.com)<st c="68976">) and
    choose the organization you used in the</st> <st c="69023">previous chapter.</st>
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="69040">Select the</st> **<st c="69052">eShopOnWeb</st>** <st c="69062">private
    project we were using in the</st> <st c="69100">previous chapter.</st>
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="69117">Navigate to</st> **<st c="69130">Pipelines</st>** <st c="69139">and
    then</st> <st c="69149">select</st> **<st c="69156">Environments</st>**<st c="69168">.</st>
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.32 – Creating a new environment](img/B19710_06_32.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
- en: <st c="69307">Figure 6.32 – Creating a new environment</st>
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: <st c="69347">Select</st> **<st c="69355">Create environment</st>**<st c="69373">.</st>
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.33 – Create environment](img/B19710_06_33.jpg)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
- en: <st c="69512">Figure 6.33 – Create environment</st>
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: <st c="69544">Add the name and</st> <st c="69562">description of the new environment
    and click the</st> **<st c="69611">Create</st>** <st c="69618">button.</st>
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.34 – Create a test environment](img/B19710_06_34.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
- en: <st c="69807">Figure 6.34 – Create a test environment</st>
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: <st c="69846">Let’s configure the environment security by navigating to the
    menu (</st>**<st c="69915">⋮</st>**<st c="69917">) at the top right and</st> <st
    c="69940">the</st><st c="69943">n</st> **<st c="69946">Security</st>**<st c="69954">.</st>
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.35 – Setting the test environment’s security](img/B19710_06_35.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
- en: <st c="69983">Figure 6.35 – Setting the test environment’s security</st>
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: <st c="70036">Navigate to the</st> **<st c="70053">Pipeline permission</st>**
    <st c="70072">section.</st> <st c="70082">Click on the</st> **<st c="70095">:</st>**
    <st c="70096">button then</st> **<st c="70109">Open access</st>**<st c="70120">.
    This</st> <st c="70127">will allow all pipelines in the project to use</st> <st
    c="70174">this resource.</st>
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.36 – Setting pipeline permissions](img/B19710_06_36.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
- en: <st c="70395">Figure 6.36 – Setting pipeline permissions</st>
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: <st c="70437">Now let’s create the</st> <st c="70459">service connection.</st>
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: <st c="70478">Task 2 – Creating an Azure Resource Manager service connection
    and Docker Registry service connection.</st>
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="70581">Navigate to</st> **<st c="70594">Project Settings</st>** <st c="70610">and
    then</st> **<st c="70620">Service connections</st>**<st c="70639">.</st>
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.37 – Setting service connections](img/B19710_06_37.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
- en: <st c="70975">Figure 6.37 – Setting service connections</st>
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: <st c="71016">Select</st> **<st c="71024">Create service connection</st>** <st
    c="71049">and choose</st> **<st c="71061">Azure Resource Manager</st>** <st c="71083">from
    the</st> <st c="71092">options, then</st> <st c="71107">click</st> **<st c="71113">Next</st>**<st
    c="71117">.</st>
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.38 – Azure Resource Manager service connection](img/B19710_06_38.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
- en: <st c="71344">Figure 6.38 – Azure Resource Manager service connection</st>
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: <st c="71399">Next, we choose</st> <st c="71416">the authentication type as</st>
    **<st c="71443">Service principal (automatic)</st>** <st c="71472">and then</st>
    <st c="71482">select</st> **<st c="71489">Next</st>**<st c="71493">.</st>
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.39 – Set authentication type](img/B19710_06_39.jpg)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
- en: <st c="71823">Figure 6.39 – Set authentication type</st>
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: <st c="71860">Next, select the subscription and give it the service connection
    name</st> `<st c="71931">eShopOnWeb</st>`<st c="71941">, then</st> <st c="71948">select</st>
    **<st c="71955">Save</st>**<st c="71959">.</st>
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.40 – Set Subscription and Service connection name](img/B19710_06_40.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
- en: <st c="72241">Figure 6.40 – Set Subscription and Service connection name</st>
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: <st c="72299">Make sure to name</st> <st c="72317">the service connection correctly
    as this is what is set in the</st> <st c="72381">YAML pipeline.</st>
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: <st c="72395">Open the</st> **<st c="72405">eShopOnWeb</st>** <st c="72415">service
    connection, select the menu icon (</st>**<st c="72458">⋮</st>**<st c="72460">)
    at the top right, then</st> <st c="72485">click</st> **<st c="72491">Security</st>**<st
    c="72499">.</st>
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.41 – eShopOnW\uFEFFeb service connection Security setting](img/B19710_06_41.jpg)"
  id: totrans-298
  prefs: []
  type: TYPE_IMG
- en: <st c="72881">Figure 6.41 – eShopOnW</st><st c="72903">eb service connection
    Security setting</st>
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: <st c="72942">Under</st> **<st c="72949">Pipeline permissions</st>**<st c="72969">,
    click on the ⋮ button, then select the</st> **<st c="73010">Open access</st>**
    <st c="73021">option.</st> <st c="73030">This will allow all pipelines in the
    project to use</st> <st c="73082">this resource.</st>
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.42 – eShopOnWeb service connection pipeline permissions](img/B19710_06_42.jpg)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
- en: <st c="73303">Figure 6.42 – eShopOnWeb service connection pipeline permissions</st>
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: <st c="73367">To set the correct permissions, first copy the service principal's
    display name, which can be found by clicking</st> **<st c="73480">Manage Service
    Principal</st>** <st c="73504">as shown in</st> *<st c="73517">Figure 6</st>**<st
    c="73525">.41</st>*<st c="73528">.</st>
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="73529">Then head over to the Azure portal and open the Azure Bash CLI
    and run the</st> <st c="73605">following commands:</st>
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="73936">Followed by this command:</st>
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="74094">Let’s now set up our pipeline</st> <st c="74125">with the security
    scans and deploy the</st> <st c="74164">Azure resources.</st>
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: <st c="74180">Exercise 1 – Integrating SAST, SCA, and secret scanning into the
    build process</st>
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '<st c="74259">The aim of this task is to integrate GHAS into Azure DevOps and
    perform</st> **<st c="74332">Static Application Security Testing</st>** <st c="74367">(</st>**<st
    c="74369">SAST</st>**<st c="74373">) using</st> <st c="74381">GHAS’s code scanning,
    software composition analysis using dependency scanning, and secrets identification
    using secret scanning.</st> <st c="74511">Secret scanning has two components:
    push protection (which we covered in the previous chapter) and</st> <st c="74610">repo
    scanning.</st>'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: <st c="74624">In the previous chapter, we enabled advanced security by navigating
    to</st> **<st c="74696">Project Settings</st>** <st c="74712">|</st> **<st c="74715">Repositories</st>**
    <st c="74727">|</st> **<st c="74730">Advanced Security</st>**<st c="74747">. In
    this chapter, we will configure code scanning and dependency scanning in</st>
    <st c="74825">the pipeline.</st>
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: <st c="74838">First, we need to make sure we have the right</st> **<st c="74885">Advanced
    Security</st>** <st c="74902">permissions set.</st> *<st c="74920">Figure 6</st>**<st
    c="74928">.43</st>* <st c="74931">shows the permissions to be enabled.</st> <st
    c="74969">Navigate to</st> **<st c="74981">Security</st>** <st c="74989">then</st>
    **<st c="74995">Project Administrators</st>** <st c="75017">and</st> <st c="75021">set
    the</st> **<st c="75030">Advanced Security</st>** <st c="75047">permissions</st>
    <st c="75060">to</st> **<st c="75063">Allow</st>**<st c="75068">.</st>
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.43 – Set Advanced Security permissions](img/B19710_06_43.jpg)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
- en: <st c="75575">Figure 6.43 – Set Advanced Security permissions</st>
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: <st c="75622">We will first set dependency scanning and then code scanning.</st>
    <st c="75685">These two scans will be set in your pipeline, unlike secret scanning,
    which we configured from the portal settings (</st>**<st c="75801">Project Settings</st>**
    <st c="75818">|</st> **<st c="75821">Repos</st>** <st c="75826">|</st> **<st c="75829">Repositories</st>**
    <st c="75841">|</st> **<st c="75844">eShopOnWeb</st>** <st c="75854">|</st> **<st
    c="75857">Settings</st>** <st c="75865">|</st> **<st c="75868">Advanced Security
    (Block secrets</st>** **<st c="75901">on push)</st>**<st c="75909">).</st>
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: <st c="75912">Let’s create a pipeline where we will configure our dependency
    scanning and</st> <st c="75989">code scanning:</st>
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: <st c="76003">Navigate to</st> **<st c="76016">Pipelines</st>** <st c="76025">|</st>
    **<st c="76028">Pipelines</st>** <st c="76037">|</st> **<st c="76040">Create Pipeline</st>**<st
    c="76055">.</st>
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.44 – Create Pipeline](img/B19710_06_44.jpg)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
- en: <st c="76325">Figure 6.44 – Create Pipeline</st>
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: <st c="76354">Select the location of your code,</st> `<st c="76465">azure-pipelines.yml</st>`<st
    c="76484">. We will configure all the tasks for dependency scanning and code scanning
    in this pipeline.</st> <st c="76578">The</st> <st c="76582">tasks have been added
    to the</st> `<st c="76611">azure-pipelines.yml</st>` <st c="76630">file.</st>
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="76636">The tasks are</st> <st c="76651">as follows:</st>
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="76662">ms.advancedsecurity-tasks.codeql.init.AdvancedSecurity-Codeql-Init@1</st>`<st
    c="76731">: This task is used to initialize CodeQL for code scanning.</st> <st
    c="76792">You can learn more about this task</st> <st c="76827">here:</st> [<st
    c="76833">https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/advanced-security-codeql-init-v1</st>](https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/advanced-security-codeql-init-v1)<st
    c="76938">.</st>'
  id: totrans-322
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="76939">ms.advancedsecurity-tasks.dependency-scanning.AdvancedSecurity-Dependency-Scanning@1</st>`<st
    c="77024">: This task performs dependency scanning to identify any vulnerabilities
    in third-party components.</st> <st c="77125">Visit</st> [<st c="77131">https://learn.microsoft.com/azure/devops/pipelines/tasks/reference/advanced-security-dependency-scanning-v1?view=azure-pipelines</st>](https://learn.microsoft.com/azure/devops/pipelines/tasks/reference/advanced-security-dependency-scanning-v1?view=azure-pipelines)
    <st c="77259">to learn more about</st> <st c="77280">this task.</st>'
  id: totrans-323
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '<st c="77290">ms.advancedsecurity-tasks.codeql.analyze.AdvancedSecurity-Codeql-Analyze@1:
    This task performs CodeQL analysis.</st> <st c="77403">To learn more about this
    task, check</st> <st c="77440">out</st> [<st c="77444">https://learn.microsoft.com/azure/devops/pipelines/tasks/reference/advanced-security-codeql-analyze-v1</st>](https://learn.microsoft.com/azure/devops/pipelines/tasks/reference/advanced-security-codeql-analyze-v1)<st
    c="77546">.</st>'
  id: totrans-324
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="77547">ms.advancedsecurity-tasks.codeql.enhance.AdvancedSecurity-Publish@1</st>`<st
    c="77615">: This task is used to publish the results of the dependency and code
    scanning.</st> <st c="77696">More details about this task can be found</st> <st
    c="77738">at</st> [<st c="77741">https://learn.microsoft.com/en-us/azur</st><st
    c="77779">e/devops/pipelines/tasks/reference/advanced-security-publish-v1?view=azure-pipelines</st>](https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/advanced-security-publish-v1?view=azure-pipelines)<st
    c="77864">.</st>'
  id: totrans-325
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="77865">Go ahead and run the pipeline after adding the correct Service
    Connection name, Azure Subscription ID, Azure Resource Group name, and location
    in</st> <st c="78012">the</st> `<st c="78016">azure-pipelines.yml</st>`<st c="78035">file
    in the</st> `<st c="78048">variables</st>` <st c="78057">section.</st>
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="78066">The build stage should take approximately 10 minutes to complete.</st>
    <st c="78133">Click on the various tasks to check on the</st> <st c="78175">details.</st>
    <st c="78185">We can see that the dependency scanning and CodeQL tasks</st> <st
    c="78242">were successful.</st>
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.45 – Build stage successful](img/B19710_06_45.jpg)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
- en: <st c="78641">Figure 6.45 – Build stage successful</st>
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: <st c="78677">We can see the dependency-scanning and code-scanning results under</st>
    **<st c="78745">Repos</st>** <st c="78750">|</st> **<st c="78753">Advanced Security</st>**<st
    c="78770">.</st>
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.46 – Advanced Security](img/B19710_06_46.jpg)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
- en: <st c="78911">Figure 6.46 – Advanced Security</st>
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: <st c="78942">The</st> **<st c="78947">Advanced Security</st>** <st c="78964">dashboard
    is now filled with the vulnerabilities found during the dependency-scanning</st>
    <st c="79051">and code-scanning tasks.</st> <st c="79076">Go through the</st>
    **<st c="79091">Dependencies</st>**<st c="79103">,</st> **<st c="79105">Code scanning</st>**<st
    c="79118">, and</st> **<st c="79124">Secrets</st>** <st c="79131">tabs.</st>
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.47 – Advanced Security dashboard](img/B19710_06_47.jpg)'
  id: totrans-334
  prefs: []
  type: TYPE_IMG
- en: <st c="79909">Figure 6.47 – Advanced Security dashboard</st>
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: <st c="79950">We have now successfully</st> <st c="79976">completed SAST, SCA,
    and secret scanning on</st> <st c="80020">Azure DevOps.</st>
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: <st c="80033">Exercise 2 – Onboarding your DevOps platforms to DevOps Security
    in Microsoft Defender for Cloud</st>
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="80130">In this exercise, we will connect both our GitHub Enterprise organization
    and our Azure DevOps organization to Microsoft Defender for Cloud.</st> <st c="80272">The
    Microsoft Defender for Cloud – Defender CSPM plan has a</st> **<st c="80332">DevOps</st>**
    **<st c="80339">Security</st>** <st c="80347">capability.</st>
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.48 – Practice environment](img/B19710_06_48.jpg)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
- en: <st c="80547">Figure 6.48 – Practice environment</st>
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: <st c="80581">To complete these exercises, you will need access to an Azure
    subscription, and I will be walking you through how to sign up for one if you
    do not have an existing subscription.</st> <st c="80760">If you have an existing</st>
    <st c="80784">subscription that you can use, feel free to skip the</st> *<st c="80837">Task</st>*
    *<st c="80842">1</st>* <st c="80843">section.</st>
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="80852">Task 1</st>** <st c="80859">– Enabling Microsoft Defender for
    Cloud</st> <st c="80900">free trial</st>'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="80910">Task 2</st>** <st c="80917">– Connecting your GitHub Enterprise
    organization to Microsoft Defender</st> <st c="80989">for Cloud</st>'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="80998">Task 3</st>** <st c="81005">– Connecting your Azure DevOps
    organization to Microsoft Defender</st> <st c="81072">for Cloud</st>'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="81081">Task 1 – Enabling Microsoft Defender for Cloud Free Trial</st>
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="81139">To set up a free trial subscription, follow</st> <st c="81184">these
    steps:</st>
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: <st c="81196">Open a browser window and browse</st> <st c="81230">to</st> [<st
    c="81233">https://portal.azure.com/</st>](https://portal.azure.com/)<st c="81258">.</st>
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="81259">Sign in with</st> <st c="81273">your credentials.</st>
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="81290">In the search menu at the top, search for</st> `<st c="81333">Microsoft
    Defender for Cloud</st>` <st c="81361">(</st>**<st c="81363">1</st>**<st c="81364">),
    then select the</st> **<st c="81383">Microsoft Defender for Cloud</st>** <st c="81411">service
    (</st>**<st c="81421">2</st>**<st c="81423">).</st>
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.49 – Search for Microsoft Defender for Cloud](img/B19710_06_49.jpg)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
- en: <st c="81643">Figure 6.49 – Search for Microsoft Defender for Cloud</st>
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: <st c="81696">Now, let’s add our GitHub</st> <st c="81723">environment to Microsoft
    Defender</st> <st c="81757">for Cloud.</st>
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: <st c="81767">Task 2 – Connecting your GitHub Enterprise organization to Microsoft
    Defender for Cloud</st>
  id: totrans-353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="81855">In the</st> **<st c="81863">Microsoft Defender for Cloud</st>**
    <st c="81891">window, select</st> **<st c="81907">Environment settings</st>**
    <st c="81927">(in the</st> **<st c="81936">Management</st>** <st c="81946">section).</st>
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="81956">In the</st> **<st c="81964">Microsoft Defender for Cloud | Environment
    settings</st>** <st c="82015">window, select</st> **<st c="82031">+Add environment</st>**<st
    c="82047">, then</st> <st c="82054">select</st> **<st c="82061">GitHub</st>**<st
    c="82067">.</st>
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.50 – Add a new GitHub environment](img/B19710_06_50.jpg)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
- en: <st c="82428">Figure 6.50 – Add a new GitHub environment</st>
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: <st c="82470">In the</st> `<st c="82578">GH-Ent-Connector</st>`
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**<st c="82594">Subscription</st>**<st c="82607">: Select your</st> <st c="82622">Azure
    subscription</st>'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**<st c="82640">Resource group</st>**<st c="82655">:</st> **<st c="82658">Create
    new</st>** <st c="82668">|</st> **<st c="82671">DevSecOpsRG</st>** <st c="82682">|</st>
    **<st c="82685">OK</st>**'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**<st c="82687">Location</st>**<st c="82696">: Select one of the following
    regions –</st> **<st c="82737">East US</st>**<st c="82744">,</st> **<st c="82746">Central
    US</st>**<st c="82756">,</st> **<st c="82758">West Europe</st>**<st c="82769">,</st>
    **<st c="82771">UK South</st>**<st c="82779">,</st> **<st c="82781">Australia
    East</st>**<st c="82795">,</st> **<st c="82797">East Asia</st>**'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '<st c="82806">Click</st> <st c="82812">on</st> **<st c="82816">Next : Configure</st>**
    **<st c="82833">access ></st>**'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.51 – GitHub connection configuration](img/B19710_06_51.jpg)'
  id: totrans-363
  prefs: []
  type: TYPE_IMG
- en: <st c="83228">Figure 6.51 – GitHub connection configuration</st>
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: <st c="83273">In the</st> **<st c="83281">Configure access</st>** <st c="83297">window,
    under</st> **<st c="83312">Authorize DevOps Security</st>**<st c="83337">, click
    on</st> **<st c="83348">Authorize</st>** <st c="83357">to grant your Azure subscription
    access to your GitHub repositories.</st> <st c="83427">A new window will open
    (you may need to allow pop-ups if your browser setting is set to</st> <st c="83515">block
    it).</st>
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="83525">Sign in to your GitHub account, if necessary, with an account
    that has permissions to the repositories that you want to protect.</st> <st c="83655">Click
    on</st> **<st c="83664">Authorize Microsoft</st>** **<st c="83684">Security DevOps</st>**<st
    c="83699">.</st>
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.52 – Authorize Microsoft Security DevOps](img/B19710_06_52.jpg)'
  id: totrans-367
  prefs: []
  type: TYPE_IMG
- en: <st c="83963">Figure 6.52 – Authorize Microsoft Security DevOps</st>
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: <st c="84012">Still in</st> <st c="84021">the</st> **<st c="84026">Configure
    access</st>** <st c="84042">window, under</st> **<st c="84057">Install DevOps
    security app</st>**<st c="84084">, click on</st> **<st c="84095">Install</st>**
    <st c="84102">to install the GitHub application.</st> <st c="84138">A new window
    will open (you may need to allow pop-ups if your browser setting is set to</st>
    <st c="84226">block it).</st>
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.53 – Install DevOps Security app](img/B19710_06_53.jpg)'
  id: totrans-370
  prefs: []
  type: TYPE_IMG
- en: <st c="84496">Figure 6.53 – Install DevOps Security app</st>
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: <st c="84537">In the</st> **<st c="84545">Install Microsoft Security DevOps</st>**
    <st c="84578">window, select the GitHub organization</st> <st c="84617">that you
    want</st> <st c="84632">to onboard.</st>
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.54 – Select the GitHub organization to be onboarded](img/B19710_06_54.jpg)'
  id: totrans-373
  prefs: []
  type: TYPE_IMG
- en: <st c="84792">Figure 6.54 – Select the GitHub organization to be onboarded</st>
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: <st c="84852">Select</st> **<st c="84860">All repositories</st>**<st c="84876">,
    review the permissions that will be granted, then click on</st> **<st c="84937">Install</st>**<st
    c="84944">. If prompted to complete an MFA request, enter your</st> **<st c="84997">Authentication
    code</st>**<st c="85016">, then</st> <st c="85023">click</st> **<st c="85029">Verify</st>**<st
    c="85035">.</st>
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.55 – Select All repositories](img/B19710_06_55.jpg)'
  id: totrans-376
  prefs: []
  type: TYPE_IMG
- en: <st c="85396">Figure 6.55 – Select All repositories</st>
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="85433">Back in</st> <st c="85441">the</st> **<st c="85446">GitHub connection</st>**
    <st c="85463">window, click on</st> **<st c="85481">Next : Review and</st>** **<st
    c="85499">generate ></st>**<st c="85509">.</st>'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.56 – Click on review and generate](img/B19710_06_56.jpg)'
  id: totrans-379
  prefs: []
  type: TYPE_IMG
- en: <st c="85853">Figure 6.56 – Click on review and generate</st>
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: <st c="85895">In the</st> **<st c="85903">Review and generate</st>** <st c="85922">pane,
    click</st> <st c="85935">on</st> **<st c="85938">Create</st>**<st c="85944">.</st>
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="85945">Task 3 – Connecting your Azure DevOps organization to Microsoft
    Defender for Cloud</st>
  id: totrans-382
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="86028">Follow</st> <st c="86036">these steps:</st>
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: <st c="86048">Open a browser window and browse</st> <st c="86082">to</st> [<st
    c="86085">https://portal.azure.com/</st>](https://portal.azure.com/)<st c="86110">.</st>
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="86111">In the</st> **<st c="86119">Microsoft Defender for Cloud</st>**
    <st c="86147">window, select</st> **<st c="86163">Environment settings</st>**
    <st c="86183">(in the</st> **<st c="86192">Management</st>** <st c="86202">section).</st>
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="86212">In</st> <st c="86216">the</st> **<st c="86220">Microsoft Defender
    for Cloud | Environment settings</st>** <st c="86271">window, select</st> **<st
    c="86287">+Add environment</st>**<st c="86303">, then select</st> **<st c="86317">Azure
    DevOps</st>**<st c="86329">.</st>
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.57 – Add Azure DevOps environment](img/B19710_06_57.jpg)'
  id: totrans-387
  prefs: []
  type: TYPE_IMG
- en: <st c="86725">Figure 6.57 – Add Azure DevOps environment</st>
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: <st c="86767">In the</st> `<st c="86881">AzDevOps-Connector</st>`
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**<st c="86899">Subscription</st>**<st c="86912">: Select your</st> <st c="86927">Azure
    subscription</st>'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**<st c="86945">Resource</st>** **<st c="86955">group</st>**<st c="86960">:</st>
    **<st c="86963">DevSecOpsRG</st>**'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**<st c="86974">Location</st>**<st c="86983">: Select one of the following
    regions –</st> **<st c="87024">East US</st>**<st c="87031">,</st> **<st c="87033">Central
    US</st>**<st c="87043">,</st> **<st c="87045">West Europe</st>**<st c="87056">,</st>
    **<st c="87058">UK South</st>**<st c="87066">,</st> **<st c="87068">Australia
    East</st>**<st c="87082">,</st> **<st c="87084">East Asia</st>**'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '<st c="87093">Click on</st> **<st c="87103">Next : Configure</st>** **<st c="87120">access
    ></st>**'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.58 – Azure DevOps connection settings](img/B19710_06_58.jpg)'
  id: totrans-394
  prefs: []
  type: TYPE_IMG
- en: <st c="87629">Figure 6.58 – Azure DevOps connection settings</st>
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: <st c="87675">In the</st> **<st c="87683">Configure access</st>** <st c="87699">window,
    under</st> **<st c="87714">Authorize DevOps Security</st>**<st c="87739">, click
    on</st> **<st c="87750">Authorize</st>** <st c="87759">to</st> <st c="87763">grant
    your Azure subscription access to your Azure DevOps organization.</st> <st c="87835">A
    new window will open (you may need to allow pop-ups if your browser setting is
    set to</st> <st c="87923">block it).</st>
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="87933">Sign in to your Azure DevOps organization (if prompted).</st>
    <st c="87991">Review the permissions that will be granted, then click</st> <st
    c="88047">on</st> **<st c="88050">Accept</st>**<st c="88056">.</st>
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.59 – Review permissions to be granted](img/B19710_06_59.jpg)'
  id: totrans-398
  prefs: []
  type: TYPE_IMG
- en: <st c="88453">Figure 6.59 – Review permissions to be granted</st>
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="88499">Still in</st> <st c="88508">the</st> **<st c="88513">Configure
    access</st>** <st c="88529">window, click on</st> **<st c="88547">Next : Review
    and</st>** **<st c="88565">generate ></st>**<st c="88575">.</st>'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.60 – Review and generate the connection](img/B19710_06_60.jpg)'
  id: totrans-401
  prefs: []
  type: TYPE_IMG
- en: <st c="88821">Figure 6.60 – Review and generate the connection</st>
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: <st c="88869">In the</st> **<st c="88877">Review and generate</st>** <st c="88896">window,
    click on</st> **<st c="88914">Create</st>** <st c="88920">to create</st> <st c="88931">the
    connection.</st>
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.61 – Create the Azure DevOps connection](img/B19710_06_61.jpg)'
  id: totrans-404
  prefs: []
  type: TYPE_IMG
- en: <st c="89289">Figure 6.61 – Create the Azure DevOps connection</st>
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: <st c="89337">Bonus exercise</st>
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: <st c="89352">After adding the Azure DevOps organization to Microsoft Defender
    for Cloud, configure the Microsoft Security DevOps Azure DevOps extension.</st>
    <st c="89493">Follow the guide from Microsoft DevOps security</st> <st c="89541">here:</st>
    [<st c="89547">https://learn.microsoft.com/en-us/azure/defender-for-cloud/azure-devops-extension</st>](https://learn.microsoft.com/en-us/azure/defender-for-cloud/azure-devops-extension)
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: <st c="89628">After configuring</st> <st c="89646">this extension, you will
    receive many more security insights on Microsoft Defender for Cloud.</st> *<st
    c="89741">Figure 6</st>**<st c="89749">.62</st>* <st c="89752">shows the DevOps
    security findings on Microsoft Defender</st> <st c="89810">for Cloud.</st>
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.62 – DevOps security findings on Microsoft Defender for Cloud](img/B19710_06_62.jpg)'
  id: totrans-409
  prefs: []
  type: TYPE_IMG
- en: <st c="90941">Figure 6.62 – DevOps security findings on Microsoft Defender for
    Cloud</st>
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: <st c="91011">Congratulations!</st> <st c="91029">You</st> <st c="91032">have
    successfully completed the hands-on exercises in</st> <st c="91087">this chapter.</st>
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: <st c="91100">Summary</st>
  id: totrans-412
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="91108">In this chapter, we examined how to harden our build process to
    make it more secure, and how to implement the native capabilities of GitHub Advanced
    security to assess and address common coding security issues within a build pipeline.</st>
    <st c="91344">We discussed securing access to the build service and workers, protecting
    the build environment from malicious code, and implementing code and</st> <st
    c="91487">dependency scans.</st>
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: <st c="91504">In the next chapter, we will cover how to implement security in
    the test and release phases of DevSecOps, to build integrity into software release
    processes and to ensure that only code that passes key security criteria is released.</st>
    <st c="91738">See</st> <st c="91742">you there!</st>
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
