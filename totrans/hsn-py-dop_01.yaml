- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Introducing DevOps Principles
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 DevOps 原则
- en: Obey the principles without being bound by them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循原则，但不被其束缚。
- en: – Bruce Lee
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: – 李小龙
- en: '**DevOps** has numerous definitions, most of which are focused on culture and
    procedure. If you’ve gotten to the point where you have purchased this book as
    a part of your journey in the DevOps field, you have probably heard at least about
    100 of these definitions. Since this is a book that focuses more on the hands-on,
    on-the-ground aspect of DevOps, we’ll keep those abstractions and definitions
    to a minimum, or rather, explain them through actions rather than words whenever
    possible.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**DevOps** 有许多定义，其中大多数侧重于文化和程序。如果您已经购买了这本书，作为您进入 DevOps 领域的一部分旅程，您可能至少听说过其中的
    100 种定义。由于这本书更多地关注 DevOps 的实践和实际操作，我们会尽量将这些抽象概念和定义保持在最低限度，或者尽可能通过行动而非言语来解释它们。'
- en: 'However, since this is a DevOps book, I am obliged to take a shot at this:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于这是一本关于 DevOps 的书，我必须对此做出回应：
- en: '*DevOps is a series of principles and practices that aims to set a culture
    that supports the automation of repetitive work and continuous delivery of a product
    while integrating the software development and IT operation aspects of* *product
    delivery.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*DevOps 是一系列旨在设定一种支持自动化重复工作和持续交付产品的文化的原则和实践，同时融合软件开发和 IT 运维方面的* *产品交付。*'
- en: Not bad. It’s probably incomplete, but that’s the nature of the beast, and that
    is perhaps what makes this definition somewhat appropriate. Any DevOps engineer
    would tell you that the work is never complete. Its principles are similar in
    many ways to the Japanese philosophy of **Ikigai**. It gives the engineers a purpose;
    an avenue for improvement on their systems which gives them the same thrill as
    a swordsman honing their skills or an artist painting their masterpiece. Satisfied,
    yet unsatisfied at the same time. Zen.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 不错。可能不完整，但这就是事物的本质，也许这正是使这个定义适当的原因。任何 DevOps 工程师都会告诉你，工作永远不完美。它的原则在许多方面与日本哲学中的
    **Ikigai（生死志）** 相似。它赋予工程师一个目标；一个改进系统的途径，这给他们带来了和剑客磨练技艺或艺术家绘画杰作时相同的兴奋感。满足，但同时又不满足。禅。
- en: 'Philosophical musings aside, I believe DevOps principles are critical to any
    modern software team. To work on such teams, it is better to start with the principles
    as they help explain a lot of how the tools used in DevOps were shaped, how and
    why software teams are constructed the way they are, and to facilitate DevOps
    principles. If I had to sum it up in one word: time.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 除了哲学性的沉思，我相信 DevOps 原则对任何现代软件团队都是至关重要的。在这些团队中工作，最好从原则入手，因为它们有助于解释 DevOps 中使用的工具如何形成、软件团队为何以这种方式构建以及如何促进
    DevOps 原则。如果我必须用一个词总结：时间。
- en: In this chapter, you will learn about the basic principles that define DevOps
    as a philosophy and a mindset. It is important to think of this just as much as
    an exercise in ideology as it is in technology. This chapter will give you the
    context you need to understand why DevOps principles and tools exist and the underlying
    philosophies behind them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习定义 DevOps 作为一种理念和思维方式的基本原则。将其视为一种思想练习和技术练习同样重要。本章将为您提供所需的背景，以便理解为什么
    DevOps 原则和工具存在以及它们背后的基本哲学。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Exploring automation
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索自动化
- en: Understanding logging and monitoring
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解日志记录与监控
- en: Incident and event response
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件和事件响应
- en: Understanding high availability
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解高可用性
- en: Delving into infrastructure as a code
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入探讨基础设施即代码
- en: Exploring automation
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索自动化
- en: We’re going to start with why **automation** is needed in life in general and
    then we’ll move toward a more specific definition that relates to DevOps and other
    tech team activities. Automation is for the lazy, but many do not realize how
    hard you must work and how much you must study to truly be lazy. To achieve automation,
    it requires a mindset, an attitude, a frustration with present circumstances.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从为什么**自动化**在生活中普遍需要开始，然后逐步过渡到一个更具体的定义，这与 DevOps 和其他技术团队活动相关。自动化是为懒人而生，但许多人没有意识到，要真正变得懒惰，你必须付出多少努力和学习。要实现自动化，它需要一种思维方式、一种态度、一种对现状的挫败感。
- en: Automation and how it relates to the world
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化及其与世界的关系
- en: In Tim Ferris’s book *The 4-Hour Workweek*, he has an entire section dedicated
    to automating the workflow which emphasizes the fact that the principle of automation
    helps you clean up your life and remove or automate any unnecessary tasks or distractions.
    DevOps hopes to do something similar but in your professional life. Automation
    is the primary basis that frees up our time to do other things we want.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Tim Ferris 的书籍《*每周工作四小时*》中，他专门有一章讲述了自动化工作流程，强调了自动化原则有助于清理生活、去除或自动化不必要的任务或干扰。DevOps
    希望在你的职业生涯中做类似的事情。自动化是释放我们时间做其他事情的基础。
- en: 'One of the things mankind has always tried to automate even further is transportation.
    We have evolved from walking to horses to cars to planes to self-driving versions
    of those things. The reason for that is the same reason DevOps became a prominent
    culture: to save time.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 人类一直试图进一步自动化的一个领域就是交通工具。我们从步行、骑马、汽车、飞机，到自驾版本的这些交通工具演变而来。这背后的原因与 DevOps 成为一种流行文化的原因相同：节省时间。
- en: How automation evolves from the perspective of an operations engineer
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从运维工程师的角度来看自动化是如何演变的
- en: You may have heard the famous story of the build engineer who automated his
    entire job down to the second (if you haven’t looked it up, it’s a great read).
    What he did was he automated any task within the server environment that required
    his attention for more than 90 seconds (solid DevOps principles from this guy
    if you ask me). This included automatically texting his wife if he was late, automated
    rollback of database servers based on a specific e-mail sent by a client’s database
    administrator, and Secure Shelling into the coffee machine to automatically serve
    him coffee, further proving my point that most things can be automated.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听过那个关于构建工程师的著名故事，他将自己的工作完全自动化到了秒（如果你没查过，值得一读）。他做的是自动化任何需要他在服务器环境中关注超过 90
    秒的任务（如果你问我，这家伙有很扎实的 DevOps 原则）。这些任务包括：如果他迟到，自动发送短信给妻子；根据客户数据库管理员发送的特定电子邮件自动回滚数据库服务器；以及通过安全外壳连接到咖啡机，自动为他冲咖啡，进一步证明了我的观点：大多数事情都可以自动化。
- en: 'You don’t need to automate your workspace or your life to this extent if you
    don’t want to, but here’s the lesson you should take away from this: use automation
    to save time and prevent yourself from being hassled, because a) your time is
    precious and b) an automated task does the job perfectly every time if you set
    it correctly just once.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想，你不需要将工作区或生活自动化到这种程度，但这里有一个你应该从中学到的教训：使用自动化来节省时间，避免自己被麻烦困扰，因为 a) 你的时间很宝贵，b)
    如果你正确设置一次，自动化任务每次都能完美完成。
- en: 'Let’s take ourselves through the life of a young software engineer named John.
    Let’s say John is a Flask developer. John has just joined his first big-boy software
    team and they are producing something already in production with a development
    and testing environment. John has only worked on `localhost:5000` his entire programming
    journey and knows nothing past that (a lot of entry-level coders don’t). John
    knows you use Git for version control and that the source code you push up there
    goes… somewhere. Then it shows up in the application. Here’s John’s journey figuring
    it out (and then being bored by it):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们跟随一位年轻的软件工程师 John 的人生历程。假设 John 是一名 Flask 开发者。John 刚刚加入了他的第一个大软件团队，他们正在生产一个已经上线的项目，且有开发和测试环境。John
    在整个编程过程中只接触过 `localhost:5000`，对其他的内容一无所知（很多初级程序员也是如此）。John 知道使用 Git 进行版本控制，并且知道你推送到上面的源代码会……传到某个地方。然后它会出现在应用程序中。以下是
    John 探索这一过程的经历（然后因此感到无聊）：
- en: John gets access to the repository and sets up the code locally. While it’s
    nothing he’s never done before, he starts contributing code.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: John 获得了对代码仓库的访问权限，并在本地设置了代码。虽然这不是他从未做过的事情，但他开始贡献代码。
- en: A month later, an Operations guy who was managing the deployment of the specific
    service John was working on leaves. John is asked if he can take over the deployments
    while they hire a replacement. John, being young and naïve, agrees.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个月后，负责管理 John 所在项目部署的运维人员离开了。John 被问是否能接管部署工作，直到他们找到替代人选。John 年轻且天真，同意了。
- en: Two months later, with no replacement yet, John has figured out how deployment
    servers such as Nginx or Apache work and how to copy his code onto a server environment
    and deploy it in a way that it can reach the public internet (it turns out it
    was essentially just `localhost` in disguise. Who knew?). He may have even been
    allowed to modify the DNS records all by himself.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个月后，仍然没有替代者，约翰已经弄明白了部署服务器，如 Nginx 或 Apache，是如何工作的，如何将代码复制到服务器环境并以能连接到公共互联网的方式部署它（结果证明，它其实就是伪装的`localhost`，谁知道呢？）。他甚至可能已经被允许独立修改
    DNS 记录。
- en: Four months later, John is tired, he spends half his time pulling code into
    the server, solving merge conflicts, restarting the server, and debugging the
    server. The server is a herd of goats, and he is but one hand with many mouths
    to feed. It becomes difficult for him to push new features and finish his pre-assigned
    tasks. This is when he starts wondering if there is a better way.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个月后，约翰感到疲惫，他花了一半的时间将代码拉到服务器、解决合并冲突、重启服务器和调试服务器。服务器就像一群山羊，而他只是那只喂养许多嘴巴的手。对他来说，推动新功能并完成预先分配的任务变得越来越困难。这时他开始怀疑是否有更好的方法。
- en: He learns about bash scripting and runbooks. He learns that you can add triggers
    to both the repository and the server to perform certain tasks when the code has
    been updated. He also learns about playbooks that can be run when a common error
    starts popping up.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他学习了 Bash 脚本和运行手册。他了解到，可以在代码更新时，向代码库和服务器添加触发器来执行某些任务。他还了解了当常见错误开始频繁出现时，可以运行的操作手册。
- en: Six months later, John has automated practically every part of the deployment
    and maintenance procedures for the application. It runs itself. The process has
    made John a better coder as well as he now writes his code with the challenges
    of deployment and automation in mind.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 六个月后，约翰几乎自动化了应用程序的每个部署和维护环节。它自动运行了。这个过程让约翰成为了一个更好的程序员，因为他现在在编写代码时，会考虑到部署和自动化的挑战。
- en: Eight months later, John has nothing to do. He’s automated all relevant tasks,
    and he doesn’t need that Ops guy that HR never got back to him about. He is now
    a DevOps engineer.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 八个月后，约翰没有任何事情可做。他已经自动化了所有相关任务，不再需要那个 HR 从未回应过的 Ops 人员。他现在是一名 DevOps 工程师。
- en: His manager asks him why his worklog seems empty. John tells him that DevOps
    tasks are measured by difficulty and complexity and not work hours. The manager
    is confused.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他的经理问他为什么工作日志看起来很空。约翰告诉他，DevOps 任务是根据难度和复杂度来衡量的，而不是工作小时数。经理感到困惑。
- en: 'Now, at this point, one of two things happens: either the manager listens and
    John pushes his enterprise toward a DevOps philosophy that will transform it into
    a modern IT company (there are antiquated IT companies, weird as that may seem),
    or he leaves for a place that appreciates his talents, which would be pretty easy
    to do if he markets them correctly.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，在这个阶段，会发生两种情况中的一种：要么经理听取建议，约翰将企业引导向 DevOps 思想，使其转型为现代 IT 公司（尽管有些 IT 公司已经过时，虽然听起来有点奇怪），要么他离开，去到一个欣赏他才华的地方，如果他正确地推销自己，离开会很容易。
- en: 'This may seem like a fantasy, but it’s how many DevOps engineers are forged:
    in the fires of incompetence. This tale is, however, meant to be more analogous
    to companies as a whole and whether they transform to use DevOps principles or
    not. The ones that do become more agile and capable of delivering new features
    and using resources toward something as opposed to using them just to maintain
    something.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来像是幻想，但它正是许多 DevOps 工程师在无能的火焰中锻造出来的方式。然而，这个故事更像是对整体公司的一种类比，讨论它们是否会转变为使用
    DevOps 原则。那些转变的公司变得更加灵活，能够交付新功能，并将资源用于有意义的事情，而不仅仅是用于维持现状。
- en: Automation is born out of a desire to not do the same things differently (usually
    for the worse) over and over again. This concept is at the heart of DevOps, since
    the people who automate realize how important it is to have consistency in repetitive
    tasks and why it is a time and potentially a lifesaver.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化源自一种不想一次又一次地做相同的事情（通常会做得更差）的愿望。这个概念是 DevOps 的核心，因为那些进行自动化的人意识到在重复性任务中保持一致性是多么重要，并且它是节省时间甚至可能挽救生命的关键。
- en: But for a task to be reliably done in the same way over and over again, it must
    be observed so that it can be kept on the correct path. That is where logging
    and monitoring come in.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 但为了让任务能够可靠地以相同的方式反复执行，必须对其进行观察，以确保它保持在正确的轨道上。这就是日志记录和监控的作用所在。
- en: Understanding logging and monitoring
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解日志记录和监控
- en: 'Switching to a more grounded topic, one of the driving principles of DevOps
    is logging and monitoring instances, endpoints, services, and whatever else you
    can track and trace. This is necessary because regardless of whatever you do,
    how clean your code is, or how good your server configuration is, something will
    fail, go wrong, or just inexplicably stop working altogether. This will happen.
    It’s a fact of life. It is in fact, Murphy’s law:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 转到一个更具体的话题，DevOps 的一个核心原则是记录和监控实例、端点、服务，以及你能追踪和追踪的其他内容。这是必要的，因为无论你做什么，无论你的代码有多干净，服务器配置有多好，总会有某些事情失败、出错，或者莫名其妙地完全停止工作。这是必然的。这是生活的一个事实。事实上，这就是墨菲定律：
- en: Anything that can go wrong will go wrong at the worst possible time.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 任何可能出错的事情都会在最糟糕的时刻出错。
- en: Familiarizing yourself with this truth is important for a DevOps engineer. Once
    you have acknowledged it, then you can deal with it. Logging and monitoring come
    in because when something *does* go wrong, you need the appropriate data to respond
    to that event, sometimes automatically.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉这个事实对 DevOps 工程师来说非常重要。一旦你意识到这一点，你就能处理它。日志记录和监控的作用在于，当事情*确实*出错时，你需要合适的数据来应对这个事件，有时甚至是自动响应。
- en: The rest of this section has been laid out in terms of logging, monitoring,
    and alerts. Each one of these aspects plays an important role in keeping the DevOps
    train (workload) on the right track.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的其余部分围绕日志记录、监控和警报展开。这些方面中的每一个在确保 DevOps 工作负载顺利进行方面都扮演着重要角色。
- en: Logging
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志记录
- en: 'If you are not from a technical background or are new to logging principles,
    think of logging in this way:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有技术背景或是刚接触日志记录原则，可以这样理解日志记录：
- en: '*Every day after school, a schoolboy would go to an old woman selling matches
    and give her money for one matchbox. However, he’d take no matchboxes in return.
    Then one day, as the boy went about his usual routine, he saw the woman about
    to speak up and he said, “I know you’re probably wondering why I give you money
    for the matchbox but don’t take one in return. Would you like me to tell you?”
    The woman replied, “No, I just wanted to tell you that the price of matches has*
    *gone up.”*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*每天放学后，一个男孩会去找一个卖火柴的老太太，给她钱买一盒火柴。但是，他并不拿回火柴盒。一天，男孩照常走着，看到老太太快要开口说话了，于是他说：“我知道你可能在想，为什么我给你钱买火柴盒，却不拿火柴盒。你想让我告诉你原因吗？”老太太回答：“不，我只是想告诉你，火柴的价格已经*
    *涨了。”*'
- en: In this case, the woman is the logger, and the boy is the person viewing the
    log. The woman doesn’t care about the reason. She’s just collecting the data,
    and when the data changes, she collects the changed data. The boy checks in every
    day and goes about his routine uninterrupted until something changes in the log.
    Once the log changes, the boy decides whether to react or not depending on what
    he would consider to be an appropriate response.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，老太太是日志记录者，男孩是查看日志的人。老太太并不关心原因，她只是收集数据，当数据发生变化时，她收集变化后的数据。男孩每天检查日志，按部就班，直到日志发生变化。一旦日志发生变化，男孩根据自己的判断决定是否采取相应的措施。
- en: In subsequent chapters, you’ll learn about logs, how to analyze them (usually
    with Python), and appropriate responses to logs. But at present, all you need
    to know is that good bookkeeping/logging has built empires because history and
    the lessons that we learn from it are important. They give us perspective and
    the appropriate lessons that we need to respond to future events.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在后续章节中，你将学习如何分析日志（通常使用 Python），以及如何对日志作出合适的响应。但目前，你需要知道的是，良好的账务管理/日志记录已经帮助建立了帝国，因为历史和我们从中学到的教训非常重要。它们给我们提供了视角和应对未来事件所需的适当教训。
- en: Monitoring
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控
- en: 'When you look at the title of this section, *Understanding logging and monitoring*,
    some of you might wonder, what’s the difference? Well, that’s valid. It took me
    a while to figure that out as well. And I believe that it comes down to a couple
    of things:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当你看到这一节的标题《理解日志记录和监控》时，你可能会想，二者有什么区别？嗯，这是合理的。我花了一段时间才弄明白。我认为，这归结为几个方面：
- en: '**Monitoring** looks at a specific metric (usually generated by logs) and whether
    or not that metric has passed a certain threshold. However, **logging** is simply
    collecting the data without generating any insight or information from it.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**监控**关注的是特定的指标（通常由日志生成），以及该指标是否超过某个阈值。然而，**日志记录**仅仅是收集数据，而没有从中产生任何洞察或信息。'
- en: Monitoring is active and focuses on the current state of an instance or object
    that is being monitored, whereas logging is passive and focuses more on the collection
    of largely historical data.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监控是主动的，专注于当前正在监控的实例或对象的状态，而日志记录是被动的，更多关注于大量历史数据的收集。
- en: In many ways, it is like the differences between a transactional database and
    a data warehouse. One functions on current data while the other is about storing
    historical data to find trends. Both are intertwined with each other nearly inexorably
    and thus are usually spoken of together. Now that you have logged and monitored
    all the data, you might ask yourself, what is it for? The next section will help
    with that.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多方面，这就像事务型数据库与数据仓库之间的区别。一个处理当前数据，而另一个则是存储历史数据以发现趋势。两者几乎是不可分割的，因此通常会一起讨论。现在你已经记录和监控了所有数据，可能会问自己，这些数据的意义何在？接下来的部分将帮助解答这个问题。
- en: Alerts
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 警报
- en: You cannot have a conversation about logging and monitoring without bringing
    up the concept of alerts. A **logged metric** is monitored by a monitoring service.
    This service looks at the data produced from the logs and measures it against
    a threshold that is set for that metric. If the threshold is crossed for a sustained,
    defined period of time, an **alert** or alarm is raised.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你无法谈论日志记录和监控而不提及警报的概念。**日志度量**通过监控服务进行监控。该服务查看从日志中产生的数据，并将其与为该度量设定的阈值进行比较。如果阈值在持续、定义的时间段内被突破，就会触发**警报**或警钟。
- en: Most of the time, these alerts or alarms are either connected to a notification
    system that can inform the necessary personnel regarding the heightened alarm
    state, or a response system that can automatically trigger a response to the event.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，这些警报或警钟要么连接到通知系统，能够通知相关人员警报状态的提升，要么连接到响应系统，可以自动触发对事件的响应。
- en: Now that you have learned about the powers of observation and insight that you
    gain from logging and monitoring, it is time to learn how to wield that power.
    Let’s find out the actions we should take when we find significant and concerning
    insights through logging and monitoring.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了通过日志记录和监控获得的观察力和洞察力的力量，是时候学习如何运用这种力量了。让我们来看看当我们通过日志记录和监控发现重要且令人担忧的洞察时，我们应该采取什么行动。
- en: Incident and event response
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件和响应
- en: 'I’m going to put Murphy’s Law here again because I cannot state this enough:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我再一次提一下墨菲定律，因为我认为这句话非常重要：
- en: Anything that can go wrong will go wrong at the worst possible time.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 任何可能出错的事情都会在最糟糕的时刻出错。
- en: Dealing with **incident and event response** involves either a lot of work or
    zero work. It depends on how prepared you are and how unique the incident or event
    is. Incident and event response covers a lot of ground from automation and cost
    control, to cybersecurity.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 处理**事件和响应**涉及大量工作或没有工作。这取决于你有多准备，以及事件或问题的独特性。事件和响应涵盖了从自动化、成本控制到网络安全的广泛内容。
- en: How a DevOps engineer responds to an event depends on a great number of things.
    In terms of dealing with clients and customers, a **Service Level Objective**
    (**SLO**) is used when a response is necessary. However, this is largely on production
    environments and requires the definition of a **Service Level Indicator** (**SLI**).
    It also involves the creation of an error budget to determine the right time to
    add new features and what the right time is to work on the maintenance of a system.
    Lower-priority development environments are used to stress test potential production
    cases and the effectiveness of incident response strategies. These objectives
    will be further explored in the *Understanding high* *availability* section.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 工程师如何响应事件取决于许多因素。在处理客户和顾客时，当需要响应时，使用**服务级别目标**（**SLO**）。然而，这通常是在生产环境中，并且需要定义**服务级别指标**（**SLI**）。这还涉及创建错误预算，以确定何时添加新功能以及何时进行系统维护。较低优先级的开发环境用于对潜在的生产案例和事件响应策略的有效性进行压力测试。这些目标将在*理解高*
    *可用性*部分中进一步探讨。
- en: If you work on the **Site Reliability Engineering** (**SRE**) side of DevOps,
    then incidents are going to be your bread and butter. A large part of the job
    description for that role involves having the correct metrics set up so that you
    can respond to a situation. Many SRE teams are set up these days to have active
    personnel around the globe who can monitor sites according to their active time
    zones. The response to the incident itself is done by an **incident response team**
    which I will cover in detail in the next section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在DevOps的**网站可靠性工程**（**SRE**）方面工作，那么事件将是你的主要工作内容。这个角色的工作描述中有很大一部分包括建立正确的指标，以便你可以响应情况。如今，许多SRE团队都设置了全球范围内的活跃人员，可以根据其活跃时区监控站点。对事件本身的响应由**事件响应团队**完成，我将在下一节详细介绍。
- en: Another part of incident response is the understanding of what caused the incident,
    how long it took to recover, and what could have been done better in the future.
    This is covered by **post-mortems**, which usually assist in the creation of a
    clear, unbiased report that can help with future incidents. The incident response
    team is responsible for the creation of this document.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 事件响应的另一部分是理解事件的原因，恢复所需的时间以及未来可能做得更好的地方。这由**事后分析**来完成，通常帮助创建一份清晰、公正的报告，可以帮助应对未来的事件。事件响应团队负责创建此文档。
- en: How to respond to an incident (in life and DevOps)
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何应对事件（生活和DevOps中）
- en: Incidents happen, and the people who are responsible for dealing with these
    incidents need to handle them. Firefighters have to battle fires, doctors have
    to treat the sick, and DevOps engineers have to contend with a number of incidents
    that can occur when running the sites that they manage and deploy.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 事件总是会发生，负责处理这些事件的人需要处理它们。消防员必须对抗火灾，医生必须治疗病人，DevOps工程师必须处理管理和部署其管理的站点可能发生的各种事件。
- en: 'Now, in life, how would you deal with an incident or something that affects
    your life or your work that you need to deal with? There’s one approach that I
    read in a book called *Mental Strength* by Iain Stuart Abernathy that I subsequently
    found everywhere among the DevOps courses and experts that I met: **Specific,
    Measurable, Achievable, Realistic, and Time-bound** (**SMART**). If a solution
    to a problem has to follow all of these principles, it will have a good chance
    of working. You can apply this to your own life along with your DevOps journey.
    It’s all problem-solving, after all.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在生活中，你如何处理影响你的生活或工作的事件？我在Ian Stuart Abernathy的书《心理力量》中读到了一个方法，后来发现在我所遇到的DevOps课程和专家中随处可见：**具体（Specific）、可衡量（Measurable）、可实现（Achievable）、现实（Realistic）和时限（Time-bound）**（**SMART**）。如果一个问题的解决方案必须遵循所有这些原则，那么它将有很大的成功机会。你可以将这些应用到自己的生活和DevOps旅程中。毕竟，这都是问题解决的一部分。
- en: 'To define the SMART principle in brief, let’s go over each of the components
    one by one:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 简要定义SMART原则，我们逐个来看每个组成部分：
- en: 'Specific: Know exactly what is happening'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具体性：确切地知道正在发生什么
- en: 'Measurable: Measure its impact'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可衡量性：衡量其影响
- en: 'Achievable: Think of what your goal is for mitigation'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可实现性：考虑你为缓解目标是什么
- en: 'Realistic: Be realistic with your expectations and what you can do'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现实性：对你的期望和你能做到的事情要实际
- en: 'Time-bound: Time is of the essence, so don’t waste it'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时效性：时间非常宝贵，不要浪费
- en: 'Here are some common incidents DevOps engineers may have to deal with:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些DevOps工程师可能需要处理的常见事件：
- en: The production website or application goes down
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产网站或应用程序崩溃了
- en: There is a mass spike in traffic suggesting a distributed denial-of-service
    attack
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一大批流量激增，表明可能是分布式拒绝服务攻击
- en: There is a mass spike in traffic suggesting an influx of new users that will
    require an upscale in resources
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一大批流量激增，表明有大量新用户需要扩展资源
- en: There is an error in building the latest code in the code pipeline
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在代码流水线中构建最新代码时出现错误
- en: Someone deleted the production database (seriously, this can happen)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有人删除了生产数据库（是真的，这种事情可能发生）
- en: Dealing with incidents involves first dividing the incident based on the type
    of response that can be provided and whether this type of incident has been anticipated
    and prepared for. If the response is manual, then time isn’t a factor. Usually,
    this occurs if an incident doesn’t affect the workload but must be addressed,
    such as a potential anomaly or a data breach. The stakeholders need to be told
    so that they can make an informed decision on the matter. Automatic responses
    are for common errors or incidents that you know occur from time to time and have
    the appropriate response for. For example, if you need to add more computing power
    or more servers in response to increased traffic or if you have to restart an
    instance if a certain metric goes awry (this happens quite a bit with Kubernetes).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 处理事件首先需要根据可以提供的响应类型以及是否已预见并为此类事件做准备来划分事件。如果响应是手动的，那么时间就不是一个因素。通常，这种情况发生在事件不影响工作负载但仍然需要处理时，比如潜在的异常或数据泄露。相关方需要被告知，以便他们可以就此事做出知情决定。自动响应适用于那些你知道会时不时发生的常见错误或事件，并且有适当的响应措施。例如，如果你需要增加计算能力或增加更多服务器来应对流量增加，或者如果某个指标出现异常需要重启实例（这在
    Kubernetes 中时常发生）。
- en: We deal with these incidents in order to provide the maximum availability possible
    for any application or site that we manage. This practice of aiming for maximum
    availability will be covered in the next section on site reliability engineering.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们处理这些事件的目的是为了为我们管理的任何应用程序或网站提供最大可用性。追求最大可用性的做法将在下一节的站点可靠性工程中介绍。
- en: Site reliability engineering
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 站点可靠性工程
- en: So, **site reliability engineering** (**SRE**) is considered a form of DevOps
    by many and is considered to be separate from DevOps by others. I’m putting this
    section in here because, regardless of your opinion on the subject, you as a DevOps
    Engineer will have to deal with the concepts of site reliability, how to maintain
    it, and how to retain customer trust.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，**站点可靠性工程**（**SRE**）被许多人视为一种 DevOps 形式，而被其他人视为与 DevOps 分开的概念。我将这一部分放在这里，因为无论你对这个话题有什么看法，作为
    DevOps 工程师，你将不得不面对站点可靠性、如何保持其稳定性以及如何维持客户信任的相关概念。
- en: 'SRE as a concept is more rigid and inflexible than the DevOps philosophy as
    a whole. It is the evolution of the data center technicians of the past who practically
    lived in data centers for the course of their careers, maintaining server racks
    and configurations to ensure whatever product that was being delivered by their
    servers would continue to be delivered. That was their job: not creating anything
    new, but finding solutions to maintain their old infrastructure.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个概念，SRE 比整个 DevOps 思想更加僵化和不灵活。它是过去数据中心技术员的进化，他们几乎一生都在数据中心工作，维护服务器机架和配置，以确保他们的服务器持续提供所需的产品。那就是他们的工作：不是创造新东西，而是找到方法来维持旧的基础设施。
- en: 'SRE is similar, but the engineer has been taken out of the data center and
    placed inside a remote work desk at an office or their own home. They still live
    fairly close to their data center or the cloud region containing the resources
    that they manage, but they differ from their predecessors in a couple of ways:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: SRE（站点可靠性工程）类似于此，但工程师已不再身处数据中心，而是坐在办公室或自己家中的远程工作桌前。他们仍然生活在离数据中心或管理的资源所在云区域相对较近的地方，但与他们的前辈相比有几个不同之处：
- en: Their teams are likely scattered across their regions as opposed to being in
    a singular place.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 他们的团队可能分散在各个地区，而不是集中在一个地方。
- en: Their emphasis is now on what we call *predictive maintenance*, i.e. they do
    not wait for something to go wrong to respond.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 他们现在的重点是我们所称的*预测性维护*，即他们不会等到问题发生才做出响应。
- en: Incident response teams
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件响应团队
- en: This new trend of SRE also helped produce incident response teams, which can
    be quickly created from within the ranks of the DevOps team to monitor and deal
    with an incident. They can do so while communicating with stakeholders to keep
    them informed about the situation and finding the root cause of the incident.
    These teams also produce reports that can help the DevOps team deal with and mitigate
    such potential situations in the future. In a world where an outage of a few minutes
    can sometimes cause millions of dollars of loss and damage, incident response
    teams have become a prominent part of any DevOps engineer’s world.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这种新的SRE趋势也促成了事件响应团队的产生，这些团队可以迅速从DevOps团队内部组建，来监控和处理事件。在处理事件的同时，它们还会与利益相关者进行沟通，确保他们了解情况，并找出事件的根本原因。这些团队还会生成报告，帮助DevOps团队应对和缓解未来可能发生的类似情况。在一个几分钟的停机可能会导致数百万美元损失和损害的世界里，事件响应团队已经成为任何DevOps工程师世界中的重要组成部分。
- en: 'Usually, an incident response team is made up of the following members:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，事件响应团队由以下成员组成：
- en: '**Incident commander** (**IC**): An incident commander leads the response to
    the incident and is responsible for a post-incident response plan'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件指挥官**（**IC**）：事件指挥官负责领导事件响应，并负责事件后的响应计划'
- en: '**Communications leader** (**CL**): A communications leader is the public-facing
    member of the team who is responsible for communicating the incident and the progress
    made to mitigate the incident to the stakeholders'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**沟通领导**（**CL**）：沟通领导是团队中负责向利益相关者沟通事件及事件缓解进展的公共成员'
- en: '**Operations leader** (**OL**): Sometimes synonymous with the incident commander,
    the OL leads the technical resolution of the incident by looking at logs, errors,
    and metrics and figures out a way to bring the site or application back online'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运营领导**（**OL**）：有时与事件指挥官同义，OL通过查看日志、错误和指标来领导事件的技术解决，并找到使网站或应用恢复上线的方法'
- en: '**Team members**: Team members under the CL and OL who are coordinated by their
    respective leaders for whatever purpose they may require'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**团队成员**：由各自领导协调的CL和OL下的团队成员，以执行他们所需要的任务'
- en: '![Figure 1.1 – A typical incident response team structure](img/B21320_01_01.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – 一个典型的事件响应团队结构](img/B21320_01_01.jpg)'
- en: Figure 1.1 – A typical incident response team structure
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 一个典型的事件响应团队结构
- en: As you can see in *Figure 1**.1*, the structure of the incident response team
    is fairly simple and is usually quite effective in mitigating an incident when
    such a case arises. But what happens after the incident? Another incident? That’s
    a possibility and the fact that it’s a possibility is the exact reason we need
    to gain insight from the current incident. We do this with post-mortems.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在*图1.1*中看到的，事件响应团队的结构相当简单，通常在发生此类事件时非常有效地缓解问题。但是事件发生之后会发生什么呢？另一个事件？这也是一种可能性，事实上，它之所以成为可能，正是我们需要从当前事件中获得洞察的原因。我们通过死后分析来实现这一点。
- en: Post-mortems
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 死后分析
- en: An incident happens. It affects business value and the users of the application,
    and then it goes away or is solved. But what’s to say it doesn’t happen again?
    What could be done to mitigate it before it even has the chance to happen again?
    Post-mortems are the answer to all of that. Any good DevOps team will perform
    a post-mortem after an incident has occurred. This post-mortem will be led by
    the incident response team that handled the situation.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 事件发生了。它影响了业务价值和应用用户，然后它消失或解决了。但谁能说它不会再发生？在它有机会再次发生之前，能做些什么来缓解它？死后分析就是所有这些问题的答案。任何优秀的DevOps团队都会在事件发生后进行死后分析。这项死后分析将由处理该事件的事件响应团队主导。
- en: Post-mortems sound macabre, but they are an essential part of the healing process
    and improvement of a workload and a DevOps team. They let the DevOps team understand
    the incident that occurred and how it happened, and they dissect the response
    made by the response team. Exercises such as these create a solid foundation for
    faster response times in the future as well as for learning experiences and team
    growth.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 死后分析听起来有些令人毛骨悚然，但它们是恢复过程和工作负载与DevOps团队改进的关键部分。它们让DevOps团队了解发生的事件以及它是如何发生的，并且对响应团队做出的回应进行剖析。像这样的练习为未来更快的响应时间、学习经验和团队成长打下了坚实的基础。
- en: One of the aspects of post-mortems that is constantly emphasized is that they
    must be blameless, i.e., there mustn’t be any placing of responsibility for the
    cause of the incident upon an individual. If an incident has occurred, it is the
    process that must be modified, not the person. This approach creates an environment
    of openness and makes sure that the results of the post-mortem are factual, objective,
    and unbiased.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在事后总结中，常常强调的一个方面是必须无责怪性地进行，也就是说，不能将事件发生的责任归咎于个人。如果发生了事件，应该修改的是过程，而不是人。这样的方法能够创造一个开放的环境，确保事后总结的结果是事实性的、客观的，并且不带偏见。
- en: So, you may ask yourself, why go through all of this? The reason is often contractual
    and obligatory. In a modern technological landscape, things such as these are
    necessary and expected to deliver value and availability to the end user. So let’s
    understand exactly what that availability means.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，你可能会问自己，为什么要经历这一切？原因通常是合同性的和强制性的。在现代技术环境中，这些事情是必要的，也是预期的，目的是为最终用户提供价值和可用性。那么让我们来准确理解一下什么是可用性。
- en: Understanding high availability
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解高可用性
- en: I’m not going to state Murphy’s Law a third time, but understand that it applies
    here as well. Things will go wrong and they will fall apart. Never forget that.
    One of the reasons DevOps as a concept and culture became so popular was that
    its techniques delivered a highly available product with very little downtime,
    maintenance time, and vulnerability to app-breaking errors.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会再说一次“墨菲定律”，但要明白它在这里同样适用。事情会出错，它们会崩溃。永远不要忘记这一点。DevOps作为一个概念和文化之所以如此受欢迎，其中一个原因就是它的方法能够提供一个高度可用的产品，几乎没有停机时间、维护时间，也几乎不受应用程序崩溃错误的影响。
- en: 'One of the reasons DevOps succeeds in its mission for high availability is
    the ability to understand failure, react to failure, and recover from failure.
    Here’s a famous quote from Werner Vogel, the CTO of Amazon:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps能够在其高可用性使命中取得成功的一个原因是，它能够理解失败、应对失败并从失败中恢复。以下是亚马逊首席技术官Werner Vogel的名言：
- en: Everything fails, all the time.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都会失败，而且是时时刻刻都在失败。
- en: This is, in fact, the foundation of the best practice guides, tutorials, and
    documentation that AWS makes for DevOps operations, and it’s true. Sometimes,
    things fail because of a mistake that has been made. Sometimes, they fail because
    of circumstances that are completely out of our control, and sometimes, things
    fail for no reason. But the point is that things fail, and when they do, DevOps
    engineers need to deal with those failures. Additionally, they need to figure
    out how to deal with them as fast as possible with as little disturbance to the
    customer as possible.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，这正是AWS为DevOps运维提供的最佳实践指南、教程和文档的基础，这一点是正确的。有时，事情会因为某个错误而失败；有时，它们会因为完全超出我们控制范围的情况而失败；还有时，事情失败是没有任何原因的。但关键是，事情会失败，而当它们失败时，DevOps工程师需要处理这些失败。此外，他们还需要尽可能快地处理这些问题，并且尽量减少对客户的干扰。
- en: 'A little advice for people who may have never worked on a solid project before,
    or at least been the guy facing the guy giving orders: *ask for specifics*. It’s
    one of the tenets of DevOps, Agile, and any other functional strategy and is vital
    to any sort of working relationship between all the stakeholders and participants
    of a project. If you tell people exactly what you want, and if you give them metrics
    that define that thing, it becomes easier to produce it. So, in DevOps, there
    are metrics and measurements that help define the requirements for the availability
    of services as well as agreements to maintain those services.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些可能从未参与过大型项目的人，或者至少没有站在执行者面前的人，我有个小建议：*要求具体信息*。这是DevOps、敏捷以及任何其他功能性战略的基本原则，对于项目所有利益相关者和参与者之间的任何工作关系都至关重要。如果你告诉别人你具体需要什么，并且给出衡量这些需求的指标，那么生产出来的结果就会更容易。因此，在DevOps中，有一些指标和测量方式有助于界定服务的可用性要求以及维护这些服务的协议。
- en: There are a number of acronyms, metrics, and indicators that are associated
    with high availability. These are going to be explored in this section and they
    will help define exactly what high availability means in a workload.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多与高可用性相关的缩略语、指标和指标。在本节中将对这些内容进行探讨，它们将有助于准确界定工作负载中高可用性的含义。
- en: SLIs, SLOs, and SLAs
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SLIs、SLOs 和 SLAs
- en: Agreements of service, terms of services, contracts, and many other types of
    agreements are designed so that two parties in agreement with one another can
    draw out that agreement and are then beholden to it. You need a contract when
    one party pays another for a service, when two parties exchange services, when
    one party agrees to a user agreement drawn up by the other party (ever read one
    of those?), and for a lot of other reasons.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 服务协议、服务条款、合同以及许多其他类型的协议都是为了让两方达成协议并且必须遵守。你需要合同的场景包括一方支付另一方服务费用、双方交换服务、当一方同意另一方制定的用户协议时（你读过这样的协议吗？），以及许多其他原因。
- en: 'Let’s break down what each of these are:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一解析这些内容：
- en: '**Service level indicators** (**SLIs**): These are metrics that can be used
    to numerically define the level of service that is being provided by a product.
    For instance, if you were to run a website, you could use the uptime (the amount
    of time the website is available for service) as an SLI.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务级别指标**（**SLIs**）：这些是可以用来数值化定义产品提供的服务水平的指标。例如，如果你运营一个网站，你可以使用正常运行时间（网站可用服务的时间量）作为SLI。'
- en: '**Service level objectives** (**SLOs**): These provide a specific number to
    the aforementioned SLIs. That number is an objective that the DevOps team must
    meet for their client. Going back to the previous example in the SLI definition:
    if uptime is the SLI, then having an uptime of 99% a month is the SLO. Typically,
    a month has 30 days, which is 720 hours, so the website should have a minimum
    uptime of 712.8 hours in that month with a tolerable downtime of 7.2 hours.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务级别目标**（**SLOs**）：这些为前述的SLI提供了一个具体的数值。这个数值是DevOps团队必须为客户达到的目标。回到前面的SLI定义示例：如果正常运行时间是SLI，那么一个月正常运行99%的时间就是SLO。通常一个月有30天，即720小时，因此该网站在该月应该有至少712.8小时的正常运行时间，允许的停机时间为7.2小时。'
- en: '**Service level agreements** (**SLAs**): These are contracts that enforce an
    SLO. In an SLA, there is a defined SLO (hope you’re keeping up now) for an SLI
    which must be achieved by the DevOps team. If this SLA is not fulfilled, the party
    that contracted the DevOps team is entitled to some compensation. Concluding that
    example, if there is an SLA for that website with an SLO of 99% uptime, then that
    is defined in the agreement and that is the metric that needs to be fulfilled
    by the DevOps team. However, most SLAs have more than one SLO.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务级别协议**（**SLAs**）：这些是执行SLO的合同。在SLA中，会为某个SLI定义一个SLO（希望你现在理解了），该SLO必须由DevOps团队实现。如果这个SLA没有得到满足，那么与DevOps团队签订合同的那一方有权获得某些赔偿。以这个示例为结尾，如果该网站的SLA有一个99%的正常运行时间的SLO，那么这是协议中定义的，DevOps团队需要满足这个指标。然而，大多数SLA都有多个SLO。'
- en: To put it simply, SLIs (are measured for) -> SLOs (are defined in) -> SLAs.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，SLI（通过测量）-> SLO（通过定义）-> SLA。
- en: One of the more prominent examples of an SLA that the AWS team likes to show
    off is the 11 9s (99.999999999%) of durability for Amazon’s **Secure Storage Service**
    (**S3**) (other cloud object storage services do the same as well). This means
    that any S3 bucket loses one object every 10,000 years. It also has a 99.9% availability
    for its standard-tierSLA. This is equivalent to being down for 44 minutes out
    of a calendar month of 30 days.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: AWS团队喜欢展示的一个显著示例是亚马逊**安全存储服务**（**S3**）的11个9（99.999999999%）的耐用性（其他云对象存储服务也提供类似的服务）。这意味着每个S3桶每10,000年才会丢失一个对象。它的标准层SLA也有99.9%的可用性。这相当于在30天的日历月内停机44分钟。
- en: Now, these three abbreviations are related to availability, but in an ancillary
    way. The next two abbreviations will be much more focused on what availability
    actually entails contractually and goal-wise.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这三个缩写与可用性相关，但属于附属关系。接下来的两个缩写将更加专注于合同和目标层面上的可用性实际含义。
- en: RTOs and RPOs
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RTO和RPO
- en: These two abbreviations are much more availability-focused than the other three.
    **Recovery Time Objectives** (**RTOs**) and **Recovery Point Objectives** (**RPOs**)
    are used as measuring sticks to measure the borders of availability. If an application
    fails to fall within its RTO or RPO then it hasn’t fulfilled its guarantee of
    availability. RTOs and RPOs are largely concerned with recovering operations after
    a disaster. There are financial, medical, and other critical systems in this world
    that wouldn’t be able to function if their underlying systems went down for even
    a few minutes. And given the *everything fails all the time* motto, that disaster
    or failure is not unrealistic.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个缩写比其他三个更侧重于可用性。**恢复时间目标**（**RTOs**）和**恢复点目标**（**RPOs**）被用作衡量可用性的标准。如果一个应用程序未能在其RTO或RPO范围内运行，则未能履行其可用性保证。RTO和RPO主要关注在灾难发生后恢复操作。世界上有一些金融、医疗等关键系统，如果它们的底层系统停机几分钟，就无法正常运作。考虑到*一切都会失败*的格言，这种灾难或失败并不不现实。
- en: An RTO is placed on a service when there is a need for a service to constantly
    be up and the time used in RTO is the amount of time that a service can afford
    to be offline before it recovers and comes online again. The fulfillment of an
    RTO is defined in the SLA as the maximum time that a system will be down before
    it is available again. To be compliant with the SLA that the DevOps has, they
    must recover the system within that time frame.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务需要保持持续运行时，会设置一个RTO。RTO中的时间指的是服务在恢复并重新上线之前，能够容忍的最大离线时间。RTO的完成在SLA中定义为系统下线后重新可用的最大时间。为了遵守DevOps的SLA，他们必须在该时间框架内恢复系统。
- en: 'Now, you may think this is easy: just turn the thing on and off again, right?
    Well, in many cases that’ll do the job, but remember that this is not about just
    doing the job, it’s about doing the job within a set amount of time.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能会觉得这很简单：只是把东西关了再开，没错吧？实际上，在许多情况下，这样做确实可以解决问题，但记住，这不仅仅是完成工作，而是在规定的时间内完成工作。
- en: 'In most cases, when a server goes down, restarting the server will do the trick.
    But how long does that trick take? If your RTO is five minutes and you take six
    minutes to restart your server, you have violated your RTO (and in a lot of critical
    enterprise systems, the RTO is lower than that). This is why, whenever you define
    RTOs initially, you should do two things: propose for more time than you have
    and think with automation.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，当服务器宕机时，重新启动服务器就能解决问题。但这个过程需要多长时间呢？如果你的RTO是五分钟，而你花了六分钟来重启服务器，那么你就违反了RTO（在许多关键的企业系统中，RTO甚至更短）。这就是为什么，当你初次定义RTO时，应该做两件事：提出比实际需求更多的时间，并考虑自动化。
- en: Modern SLAs of 99% (seven hours a month) or even 99.9% (44 minutes a month)
    are achieved through the removal of human interaction (specifically, hesitation)
    from the process of recovery. Services automatically recover through constant
    monitoring of their health so when an instance shows signs of unhealthiness, it
    can either be corrected or replaced. This concept is what gave rise to the popularity
    of Kubernetes which in its production form has the best recovery and health check
    concepts on the market.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现代的服务水平协议（SLA）达到99%（每月7小时）甚至99.9%（每月44分钟），是通过消除人为干预（特别是犹豫）来实现的。服务通过持续监控其健康状况自动恢复，因此当某个实例出现不健康的迹象时，可以进行修复或替换。这个概念促成了Kubernetes的流行，它在生产环境中拥有市场上最好的恢复和健康检查概念。
- en: RPOs are different in that they are largely related to data and define a specific
    date or time (point) which the data in a database or instance can be restored
    from. The RPO is the maximum tolerable difference of time between the present
    and the date of the backup or recovery point. For example, a database of users
    on a smaller internal application can have an RPO of one day. But a business-critical
    application may have an RPO of only a few minutes (if that).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: RPO与数据相关，定义了一个特定的日期或时间（点），可以从中恢复数据库或实例中的数据。RPO是当前时间与备份或恢复点之间最大可容忍的时间差。例如，一个较小的内部应用程序中的用户数据库可以有一天的RPO。但一个关键业务应用程序的RPO可能只有几分钟（如果有的话）。
- en: RPOs are maintained through constant backups and replicas of databases. The
    database in most applications that you use isn’t the primary database but a **read
    replica** that is often placed in a different geographical region. This alleviates
    the load from the primary database, leaving it open for exclusive use for writing
    operations. If the database does go down, it can usually be recovered very quickly
    by promoting one of the read replicas into the new primary. The read will have
    all of the necessary data, so consistency is usually not a problem. In the event
    of a disaster in a data center, such backup and recovery options become very important
    for restoring system functions.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: RPO通过不断备份和复制数据库来保持。你使用的大多数应用中的数据库并非主数据库，而是**只读副本**，通常放置在不同的地理区域。这减轻了主数据库的负载，使其可以专门用于写操作。如果数据库出现故障，通常可以通过将一个只读副本提升为新的主数据库来迅速恢复。只读副本将包含所有必要的数据，因此一致性通常不是问题。在数据中心发生灾难时，类似的备份和恢复选项对于恢复系统功能变得至关重要。
- en: Based on these objectives and agreements, we can come up with metrics that can
    affect team behavior, like our next topic.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这些目标和协议，我们可以提出一些能够影响团队行为的度量标准，就像我们接下来的话题一样。
- en: Error budgets
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误预算
- en: 'In a team following DevOps principles, error budgets become a very important
    part of the direction that the team takes in the future. An error budget is calculated
    with this formula: *Error budget = 1-SLA (**in decimal)*'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在遵循DevOps原则的团队中，错误预算成为团队未来发展方向的一个重要部分。错误预算通过以下公式计算：*错误预算 = 1 - SLA（**以小数形式表示）*
- en: 'What this basically means is that *an error budget is the percentage left over
    from the SLA*. So, if there is an SLA of 99%, then the error budget would be 1%.
    It is the downtime to our uptime. In this case, the error budget per month would
    be around 7.2 hours. According to this budget, we can define how our team can
    progress based on team goals:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上意味着*错误预算是SLA剩余的百分比*。因此，如果SLA为99%，则错误预算为1%。它是我们的停机时间与正常运行时间之比。在这种情况下，每月的错误预算大约为7.2小时。根据此预算，我们可以根据团队目标定义团队的进展：
- en: If the team’s goal is reliability, then the objective should be to tighten the
    error budget. Doing this will help the team deliver a higher SLO and gain more
    trust from their customers. If you tighten an SLO from 99% to 99.9%, you are reducing
    the tolerable downtime from 7.2 hours to 44 minutes, so you need to ensure that
    you can deliver on such a promise. Inversely, if you cannot deliver on such an
    SLO, then you shouldn’t promise it in any sort of agreement.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果团队的目标是可靠性，那么目标应该是收紧错误预算。这样做将有助于团队提供更高的SLO，并获得客户更多的信任。如果将SLO从99%收紧到99.9%，则表示容忍的停机时间从7.2小时减少到44分钟，因此你需要确保能够履行这一承诺。反过来，如果无法履行这样的SLO，就不应该在任何协议中做出承诺。
- en: If the team’s goal is developing new features, then it mustn’t come at the cost
    of a decreased SLO. If a large amount of the error budget is being consumed every
    month, then the team should pivot from working on new features to making the system
    more reliable.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果团队的目标是开发新特性，那么绝不应以降低SLO为代价。如果每个月消耗大量错误预算，则团队应当从开发新特性转向提高系统的可靠性。
- en: All these statistics exist to help us have metrics that can be used to maintain
    high availability. But we aren’t the ones who will use them, we will simply configure
    them to be used automatically.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些统计数据的存在是为了帮助我们拥有可用于保持高可用性的度量标准。但我们并不是直接使用它们，而是将它们配置为自动使用。
- en: How to automate for high availability?
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现高可用性的自动化？
- en: Now that you know the rules of the game, you need to figure out how to work
    within the rules and deliver on the promises that you have given your customers.
    To accomplish this, you simply have to accomplish the things that have been set
    in your SLAs. Not particularly difficult on a small scale, but we’re not here
    to think small.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了游戏规则，你需要弄清楚如何在这些规则内工作并履行对客户的承诺。为了实现这一目标，你只需要完成SLA中设定的事项。对于小规模的工作来说，这并不特别困难，但我们不是来做小事的。
- en: 'There are some essentials that every DevOps engineer needs to know to accomplish
    high availability:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些每个DevOps工程师都需要了解的基本知识，以实现高可用性：
- en: Using desired state configurations on virtual machines to prevent state drift
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用虚拟机上的期望状态配置以防止状态漂移
- en: How to properly backup data and recover it quickly in the event of a disaster
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在灾难发生时正确备份数据并快速恢复
- en: How to automate recovery of servers and instances with minimal downtime
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何实现最小停机时间的服务器和实例恢复自动化
- en: How to properly monitor workloads for signs of errors or disruptions
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何正确监控工作负载，察觉错误或中断的迹象
- en: How to succeed, even when you fail
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何成功，即使你失败了
- en: Sounds easy, doesn’t it? Well, in a way it is. All these things are interconnected
    and woven into the fabric of DevOps and depend upon each other. To recover success
    from failure is one of the most important skills to learn in life, not just in
    DevOps.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来很简单，不是吗？嗯，从某种角度来看确实如此。所有这些事情是相互关联的，编织在DevOps的框架中，彼此依赖。从失败中恢复成功是生活中最重要的技能之一，不仅仅是在DevOps中。
- en: This concept of failure and recovering back to a successful state has been taken
    even further by the DevOps community through the development of tools that maintain
    the necessary state of the workload through code.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps社区通过开发工具，使得在代码中维持工作负载的必要状态，这一失败并恢复到成功状态的概念得到了更进一步的深化。
- en: Delving into infrastructure as a code
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解基础设施即代码
- en: Finally, in a book about Python, we get to a section about code. So far, I’ve
    given you a lot of information about what needs to be accomplished but to accomplish
    the things we want especially in this book, we must have a method, a tool, a weapon,
    i.e., code.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在一本关于Python的书中，我们进入了有关代码的章节。到目前为止，我已经给了你很多关于需要完成什么的说明，但要完成我们想要的东西，尤其是在这本书中，我们必须拥有一种方法、一种工具、一种武器，即代码。
- en: Now the word “code” scares a lot of people in the tech industry, even developers.
    It’s weird being afraid of the thing that is under everything you work with. But
    that’s the reality sometimes. If you, dear reader, are such a person, first off,
    it’s a brave thing to purchase this book, and secondly, all you are doing is denying
    yourself the opportunity to solve all the problems you have in the world. Seriously.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，“代码”这个词吓坏了许多科技行业的人，甚至是开发者。对自己所使用的每一项工作的基础感到害怕，确实有些奇怪。但有时候，这就是现实。如果你，亲爱的读者，是这样的人，首先，购买这本书本身就是一件勇敢的事情，其次，你所做的只是在拒绝自己解决世界上所有问题的机会。说真的。
- en: Now, the reason is that code is the weapon of choice in almost every situation.
    It is the solution to all your automation problems, monitoring problems, response
    problems, contract problems, and maybe other problems that you may have that I
    don’t know about. And a lot of it requires a minimal amount of code.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，原因在于，代码几乎在每种情况下都是首选武器。它是所有自动化问题、监控问题、响应问题、合同问题，甚至可能是我不了解的其他问题的解决方案。并且很多时候，只需要少量代码。
- en: Important note
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'Remember this: the amateur writes no code, the novice writes a lot of code
    and the expert writes code in a way that it seems like they’ve written nothing
    at all, so expect a lot of code in this book.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这一点：业余爱好者不写代码，新手写很多代码，专家写代码的方式让人觉得他们根本没写什么代码，所以在本书中，你会看到很多代码。
- en: Let me explain further. To maintain the consistency of service required by DevOps,
    you need something constant; something that your resources can fall back on that
    they can use to maintain themselves to a standard. You can write code for that.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我进一步解释。为了维持DevOps所需的服务一致性，你需要某种恒定的东西；一种资源可以回退并用来维持自己标准的东西。你可以为此编写代码。
- en: In addition to that, you need to be able to automate repetitive tasks and tasks
    that require reactions faster than what a human being can provide. You need to
    free up your own time while also not wasting your client’s time. You can write
    code for that.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，你还需要能够自动化重复性任务和那些需要比人类反应更快的任务。你需要释放自己的时间，同时又不浪费客户的时间。你可以为此编写代码。
- en: You also need to be flexible and capable of dynamically creating resources regardless
    of the change in environment as well as the ability to switch over to backups,
    failovers, and alternates seamlessly. You can write code for that.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要灵活，并且能够在环境变化的情况下动态创建资源，同时具备无缝切换到备份、容错和备用方案的能力。你可以为此编写代码。
- en: '**Infrastructure as code** (**IaC**) is particularly useful for that last part.
    In fact, you can use it to encapsulate and formulate the other two as well. IaC
    is the orchestrator. It gives the cloud services a proverbial *shopping list*
    of things it wants and the configuration it wants them in and in exchange for
    that, and it gets the exact configuration that was coded on it.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**基础设施即代码** (**IaC**) 对于最后这一部分尤其有用。事实上，你可以利用它来封装并制定其他两者的内容。IaC是协调者。它为云服务提供了一个比喻性的*购物清单*，列出了它想要的内容以及所需的配置，作为交换，它获得了按照编码要求配置的精确环境。'
- en: The fact that IaC is a *get-exactly-what-you-want* system is a word of caution
    because as with everything involving computers, it will do *exactly* what you
    want, which means you need to be very specific and precise when using these frameworks.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 是一个 *得到你想要的* 系统，这一点需要提醒，因为与所有涉及计算机的事情一样，它将 *完全* 按照你的要求去做，这意味着你需要在使用这些框架时非常具体和精确。
- en: Let’s look at a little sample that we will use to demonstrate the concept behind
    IaC using some simple pseudocode (without any of that pesky syntax).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个小示例，用来展示使用一些简单的伪代码（没有那些烦人的语法）来演示 IaC 背后的概念。
- en: Pseudocode
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 伪代码
- en: I’m not going to write any actual code for IaC in this chapter (you can find
    that in the chapter dedicated to IaC), I’m just going to give a quick overview
    of the concept behind IaC using some pseudocode definitions. These will help you
    understand how singular IaC definitions work in securing resources.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 本章不会涉及到实际的 IaC 代码（你可以在专门讲解 IaC 的章节找到相关内容），我只会简要概述 IaC 背后的概念，并使用一些伪代码定义。这些将帮助你理解单个
    IaC 定义在资源安全中的工作原理。
- en: 'An example pseudocode – to create a virtual machine - broken down into the
    simplest pieces would be something like the following:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 一个创建虚拟机的伪代码示例——将其拆解成最简单的部分，看起来应该是如下所示：
- en: '`Module Name` (Usually descriptive of the service being deployed)'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`模块名称`（通常是对正在部署服务的描述）'
- en: '`VM Name` (say `VM1`)'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`虚拟机名称`（例如 `VM1`）'
- en: '`Resources allocated` (Specifications, or class of VM) (say 1 GB RAM)'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`分配的资源`（规格或虚拟机类型）（例如 1GB 内存）'
- en: Internal networking and IP addresses (in `VPC1`)
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部网络和 IP 地址（在`VPC1`中）
- en: 'Tags (say `"``Department": "Accounting"`)'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '标签（例如 `"Department": "Accounting"`）'
- en: This example will create a VM named `VM1`, with 1 GB of RAM in a VPC or equivalent
    network named `VPC1` with a tag of key `Department` with an `Accounting` value.
    Once launched, that is exactly what will happen. Oops, I needed 2 GB of RAM. What
    do I do now?
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将创建一个名为 `VM1` 的虚拟机，配备 1GB 内存，并放置在一个名为 `VPC1` 的 VPC 或等效网络中，标签键为 `Department`，值为
    `Accounting`。一旦启动，事情将按预期发生。哦，我需要 2GB 内存，怎么办？
- en: 'That’s easy, just change your code:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 很简单，只需更改你的代码：
- en: '`Module Name` (Usually descriptive of the service being deployed)'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`模块名称`（通常是对正在部署服务的描述）'
- en: '`VM Name` (say `VM1`)'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`虚拟机名称`（例如 `VM1`）'
- en: '`Resources allocated` (Specifications, or class of VM) (now its 2GB RAM)'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`分配的资源`（规格或虚拟机类型）（现在是 2GB 内存）'
- en: Internal networking and IP addresses (in `VPC1`)
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部网络和 IP 地址（在`VPC1`中）
- en: 'Tags (say `"``Department": "Accounting"`)'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '标签（例如 `"Department": "Accounting"`）'
- en: 'And that’s how easy that is. You can see why it’s popular. It is stable enough
    to be reliable, but flexible enough to be reusable. Now, here are a couple of
    other pointers that will help you understand how most IaC templates work:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这么简单。你可以看到为什么它这么受欢迎。它足够稳定可靠，同时又足够灵活，可以重用。现在，以下是一些其他提示，可以帮助你理解大多数 IaC 模板是如何工作的：
- en: If you had renamed the VM, it would have been redeployed with the new name
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你重命名了虚拟机，它会使用新名称重新部署
- en: If you had renamed the module, most templates would by default tear down and
    decommission the old VM in the old module and create a new one from scratch
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你重命名了模块，大多数模板默认会拆除并停用旧模块中的虚拟机，并从头创建一个新的虚拟机
- en: Changing the network or VPC would logically move the VM to the other network
    whose network rules it would now follow
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改网络或 VPC 会逻辑上将虚拟机移至另一个网络，并遵循该网络的网络规则
- en: Most templates would allow you to loop or iterate over multiple VMs
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数模板允许你循环或迭代多个虚拟机
- en: IaC, man what a concept. It’s a very interesting – and very popular – solution
    to a common problem. It can solve a lot of DevOps headaches and should be in the
    arsenal of every DevOps engineer.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: IaC，哇，真是一个好概念。这是一个非常有趣且非常流行的解决方案，用于解决常见问题。它可以解决很多 DevOps 中的头痛问题，并应该成为每个 DevOps
    工程师的武器库中的一部分。
- en: Summary
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The concept of DevOps is exciting, vast, and has room to get creative. It is
    a discipline where the world is essentially at your command. Effective DevOps
    requires effective structure and adaptation of that structure to a challenge as
    we learned in our *Exploring* *automation* section.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 的概念令人兴奋、广阔，并且充满创意的空间。它是一个几乎完全由你掌控的领域。有效的 DevOps 需要有效的结构，并且要能适应这些结构以应对挑战，正如我们在
    *探索* *自动化* 章节中学到的那样。
- en: But remember, *anything that can go wrong will go wrong*, so plan for success
    but prepare for the fact that failure is a common occurrence. In such cases of
    failure – as we learned in the sections about monitoring and event response –
    the ability to recover is what matters, and the speed of that recovery also matters
    quite often. If an incident to be recovered from is new, it must be reported and
    understood so that such incidents can be mitigated in the future.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 但请记住，*凡是可能出错的事情都会出错*，所以要为成功做好规划，但也要准备好面对失败这一常见的情况。在失败的情况下——正如我们在监控和事件响应部分所学到的——恢复的能力是关键，而且恢复的速度往往也非常重要。如果要从中恢复的事件是新的，它必须被报告并理解，这样才能在未来减少此类事件的发生。
- en: And lastly, as we covered in *Delving into infrastructure as a code*, code is
    your friend. Be nice to your friends and play with them. You’ll learn how to in
    this book.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，正如我们在*深入了解基础设施即代码*中所提到的，代码是你的朋友。对待朋友要友善，和它们一起玩。你将在本书中学到如何做到这一点。
