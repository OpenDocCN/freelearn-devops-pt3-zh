["```\nbolt --verbose plan run pecdm::provision –params @params.json\n```", "```\nexport FACTER_example_string='substring'\npuppet apply -e 'notify{ \"${example_string[3]}\": }'\n```", "```\n$Matches = Select-String -Path \"$PSHOME\\code\\*.sh\" -Pattern '\\?\n…\n…\n$Matches = $Matches + Select-String -Path \"$PSHOME\\code\\*.pp\" -Pattern '\\?\n```", "```\n$example_variable = 'this is a value'\n```", "```\n$database_id = $dbname\n$base_directory = '/opt'\n$database_directory = \"${base_directory}/database/${database_id}\"\n```", "```\nnotify{'debug variable':\n  message => \"The database directory is ${database_directory}\"\n}\n```", "```\nclass example (\n  String example_string = 'hello world',\n  Integer example_integer = 1\n) {\n}\n```", "```\n$example_integer =~ Integer\n```", "```\nservice { 'defragsvc':\n  ensure => stopped\n}\n```", "```\n$sed_command = '/usr/bin/sed -i \\'s/old/new/g\\''\n$intall_dir = 'c:\\Program Files(x86)\\exampleapp\\\\'\n```", "```\n$make_file_content = \"hello:\\n\\techo \\\"hello world\\\"\"\nfile '/home/david/makefile' : {\n  content => $make_file_content\n}\n```", "```\n@(END:pp)\n@(END:ruby)\n```", "```\nexec { 'create databases':\n  command => @(\"Database Commands\"/L)\n    sudo -u postgres psql \\\n    -c \"CREATE DATABASE ${database1} ENCODING 'utf8' LC_COLLATE 'en_US.UTF-8' LC_CTYPE 'en_US.UTF-8'\" \\\n    -c \"CREATE DATABASE ${database2} ENCODING 'utf8' LC_COLLATE 'en_US.UTF-8' LC_CTYPE 'en_US.UTF-8'\" \\\n    -c \"CREATE DATABASE ${database3} ENCODING 'utf8' LC_COLLATE 'en_US.UTF-8' LC_CTYPE 'en_US.UTF-8'\"\n    |-\"Database Commands\"\n```", "```\n$example_string = 'substring'\n```", "```\nnotify { \"${example_string[3]}\" :}\n```", "```\nnotify { \"${example_string[-6]}\" :}\n```", "```\nnotify { \"${example_string[3,6]}\" :}\n```", "```\nnotify { \"${example_string[-4,-1]}\" :}\n```", "```\nnotify { \"${example_string[-4,4]}\" :}\n```", "```\n$hostname = flkoracprd00034\n$location = $hostname[0,3]\n$role =$hostname[3,3]\n$environment = $hostname[6,3]\n$id = $hostname[-5,5]\n```", "```\nString[<Minimum length>, <Maximum Length>] $variable_name\n```", "```\nclass 'database': {\n  String[4,4] database_id,\n  String[6,8] username = 'dbuser' ,\n  String description,\n}:\n```", "```\n$integer = 42\n$negative_integer = -84\n$float = 32.3333\n$scientific float = 3e5\n$octal = 0678\n$hex = 0x\n```", "```\n$a = 5\n$b = 3\n$addition = $a + $b\n$subtraction = $a - $b\n$division = $a / $b\n$multiplication = $a * $b\n$modulo = $a % $b\n$shift_left = $a << $b\n$shift_right = $a >> $b\n$negate = -$a\n```", "```\n$bodmas_example = ($a + $b) * -$a\n```", "```\n$string_integer='1'\n$string_float='1.1'\n$converted_integer=Integer($string_integer)\n$converted_float=Float($string_float)\n```", "```\n$string_from_integer = String(342)\n```", "```\nInteger[<Minimum Value>, <Maximum Value>]\n```", "```\nFloat[<Minimum Value>, <Maximum Value>]\n```", "```\nClass application::filesystem (\nFloat[0.1, 99.9] percentage_application,\nInteger[100, 10000] volume_group_size\n) {\n}\n```", "```\n  notify {\"Print $test1\":}\n```", "```\nClass exampleapp (\n  Boolean manage_users = true\n) {\n  $install_ssh = true\n  $install_telnet = false\n}\n```", "```\n$example_array = ['first','second','third']\n```", "```\n$example_boolean = false\n$mixed_example_array = [ 1, $example_boolean , 'example']\n```", "```\n$example_array = ['first','second','third']\n$second_index = $example_arrary [1]\n```", "```\nnotify{ \"The first element is ${example_array[-1]}\"\n```", "```\n$sub_array =  example_array[1,1]\n```", "```\n$negative_sub_array = example_array[0, -1]\n$empty_sub_array = example_array[1, -3]\n$second_element_array = example_array[1, -2]\n```", "```\n$nested_array= ['first',['nest_first','nest_second','nest_third'],'third']\n$sub_string = $nested_array[0][1]\n$nest_second = $nested_array[1][2]\n```", "```\nnotify {\"Print ${nested_array[1][0]}\":}\n```", "```\n$example_array=[1,2]\n$new_array=$example_array << 'three'\n$append_nest=$example_array << [3,4]\n```", "```\n$combined_1 = $example_array + 1\n$combined_2 = $example_array + [1,2]\n$combined_3 = $example_array + [[1,2]]\n```", "```\n$converts = $example_array + {test => 'value'}\n$nested_hash =$example_array + [{test => 'value'}]\n```", "```\n$another_example_array = ['one','two','one','three','four','three',['one','three','four']]\n$remove_string = $another_example_array – 'one'\n```", "```\n$another_example_array = ['one','two','one','three','four','three',['one','three','four']]\n$remove_array = $another_example_array – ['one','three','four']\n```", "```\n$remove_nested_array = $another_example_array – [['one','three','four']]\n```", "```\nArray[<Data Type>, <Minimum Size>, <Maximum Size>]\n```", "```\nclass 'database': {\n  Array[default,1,6] db_uids,\n  Array[string,0,5] user_names,\n  Array extra_flags,\n}\n```", "```\n$my_car = { make => 'skoda', model => 'rapid', year => 2014 }\n```", "```\n$my_car = { make  => 'skoda',\n            model => 'rapid',\n            year  => 2014\n          }\n```", "```\nnotify {\"Print ${my_car[model]}\":}\n```", "```\n$package_list = { packages  => { httpd  => 'latest',\n                          cowsay => 4.0\n                        }\n                  services => { httpd => 'running',\n                                nginx => 'stopped'\n                              }\n                 }\n```", "```\nnotify {\"Print ${package_list[packages][httpd]} ${package_list[services][httpd]}\":}\n```", "```\n$app_db    = { database => 'oracle', version = > 11}\n$app_web = { web_server => 'httpd', version => 12 }\n$combined_app = $app_db + $app_web\n```", "```\n$software_versions = { oracle => 11, httpd => 12, cowsay => 9}\n$no_cowsay = $software_versions – cowsay\n$only_cowsay = $software_versions – { oracle => 'anything' , httpd => 'anything' }\n$only_oracle = $software_versions – [httpd,cowsay]\n```", "```\nHash[<Key type>, <Value type>, <Minimum size>, <Maximum size>]\n```", "```\nClass kernel_overrides (\n  Hash[String,integer,1,10] tunables\n)\n```", "```\n$server_cmdb = {\n  'nfs_share_servers => {\n     prod =>  ['prdnfs01','prdnfs02','prdnfs02']\n     dev => [ 'devnfs01','devnfs02,'devnfs03']\n  }\n}\n```", "```\n$server_cmdb[nfs_share_servers][prod][2]\n```", "```\n$secret_string = Sensitive('password')\nnotify {\"Print ${secret_string}\":}\n$single_sensitive_array = [Sensitive('password'),'password']\nnotify {\"Print ${single_sensitive_array}\":}\n$secret_array = Sensitive(['password','password'])\nnotify {\"Print ${secret_array}\":}\n```", "```\nnotify {\"Print ${secret_string.unwrap}\":}\n```", "```\nuser { 'max'\n  id => 7\n  password => $secret_string\n}\nexec {'secure curl':\n  command => Sensitive(\"C:\\\\Windows\\\\System32\\\\curl.exe -u david:${secret_string.unwrap} http://example.com\")\n}\n```", "```\nOptional <type> <variable name>\n```", "```\nclass oracle (\n  Optional Integer orace_uid\n)\n```", "```\nEnum[<string>,*<string>]\n```", "```\nclass regional (\n  Enum['Scotland,'England','Wales','Northern Ireland'] uk_region\n)\n```", "```\nVariant[<type>,*<type>]\n```", "```\nclass user_accounts(\n  Variant[Boolean, Enum['true', 'false']] create_user_home\n  Variant[String,Array[String]] user_names\n)\n```", "```\nPattern[<regexcp>*<regexcp>]\n```", "```\nDefine server_access (\n  Pattern[/^edi/,/^gla/,/^abe/] hostname\n)\n```", "```\nTuple[ <type>, *<type>,  <minimum size>, <maximum size>]\n```", "```\nclass exampleapp (\nTuple [ string, integer, string, 3 , 10 ] user_declaration\nTuple [ integer, float, integer] calculation\nTuple [ uri, string , integer, 2] file_dowload\n)\n```", "```\nHash[<*optional *undef String name>, <Value type>, *(<*optional *undef String name >,<value type>)\n```", "```\nclass skeleton (\nStruct[{mode => Enum[file, link],\n        path => String config_file\nStruct[{mode            => Enum[file, link],\n        path            => String,\n        Optional[owner] => String}] application_binary\nStruct[{mode            => Enum[file, link],\n        path            => String,\n        owner           => Optional[String]}] application_startup\n)\n```", "```\n$global = 'world'\nnode default {\n  $node = 'mynode'\n  include local\n  include also_local\n}\nclass local\n{\n$global = 'override'\n  notify {\"Print ${global}\":}\n  notify {\"Print ${::global}\":}\n  notify {\"Print ${node}\":}\n}\nclass also_local {\n  notify {\"Print another ${local::global}\":}\n  notify {\"Print another ${global}\":}\n}\n```"]