- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Cost of Unclear Objectives and Strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every functioning organization has a **business strategy**. We need it from
    the first day onward. If we run a start-up, we will need it to get funding, and
    if we run an established business, we will know that it is required to set a vision
    and objectives that employees can follow. It is common knowledge that a strategy
    is needed. But why do we have so many **anti-patterns** that revolve around the
    strategic aspects? In all fairness, it is a fast-moving world: innovation cycles
    are fast. We need to make sure we refresh our architecture so we can build on
    top of other technologies to add business value.'
  prefs: []
  type: TYPE_NORMAL
- en: This means we need to create an organizational mindset for continuous change
    and technology adoption. Consumer markets are competitive. Twenty years ago, it
    was enough to have quarterly or monthly releases of our applications. Now, we
    need continuous incremental changes. Regulatory frameworks are asking for more
    rigor, and the number of cyber breaches is increasing. Because of changing external
    factors, we need to be ready for continuous internal change.
  prefs: []
  type: TYPE_NORMAL
- en: “*The only constant in life is change*” is a famous quote by the Greek philosopher
    Heraclitus. To some degree, that is against human nature. But we need to be ready
    for continuous change and continuous improvement. Therefore, we need guidance
    regarding the types and magnitude of changes that benefit our organization. That
    is why we need a strategy. Not only do we need a strategy but we also need one
    that is up to date and covers all relevant concerns.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover strategic challenges and why there are
    significant consequences if we do not address them. The following are common strategic
    challenges addressed in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Lack of clear objectives and strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of migration strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outsourcing of cloud knowledge and governance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of a partnership strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gaps in our Cloud Adoption Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We now have a clear picture of the learning objectives for this chapter. Let’s
    start with the very first anti-patterns in this book, find out why they put organizations
    at risk, and then see how those anti-patterns can be turned into best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of clear objectives and strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: “*What we need to do is always lean into the future; when the world changes
    around you and when it changes against you – what used to be a tailwind is now
    a headwind – you have to lean into that and figure out what to do because complaining
    isn’t a strategy*” is a quote by Jeff Bezos, the Amazon CEO.
  prefs: []
  type: TYPE_NORMAL
- en: 'Someone who can grow their business from a little bookshop to a global online
    giant, release Kindle devices, expand the company to a global **cloud service
    provider** (**CSP**), and then shift focus to space flights probably knows a fair
    bit about strategy and its importance. An incomplete strategy will hold us back
    during our cloud adoption and we will not be able to leverage the full benefit
    of the cloud. Therefore, we will now cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Common strategic anti-patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding business goals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining technology objectives and principles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining our strategy foundations and leveraging guardrails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will start with common strategic anti-patterns next.
  prefs: []
  type: TYPE_NORMAL
- en: Common anti-patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now step through two common anti-patterns and why they are holding back
    a cloud adoption journey.
  prefs: []
  type: TYPE_NORMAL
- en: The bottom-up strategy trap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first variation of this anti-pattern starts with a **bottom-up cloud adoption
    approach** and typically provides some quick wins. Stakeholders of a digital transformation
    initiative realize that the lead times to release an application should be shorter.
    Those include waiting times such as onboarding a new vendor because various departments,
    including Legal, Procurement, and Tax, need approval, or a supplier can only deliver
    the required hardware in a few weeks. Then, the software products need to be installed,
    configured, tested, and registered in the asset registry. The sponsor then requests
    a **value stream map** that lays out the current process and timelines and compares
    them to what can be done.
  prefs: []
  type: TYPE_NORMAL
- en: It turns out the teams can deliver the product in half the time if they leverage
    a **cloud native approach**. That sounds great, doesn’t it? Especially when we
    see quick wins and get confidence that the critical go-live deadline can be met.
    But long-term operational thoughts won’t get enough consideration. Standardization
    across the organization will hardly be considered because the actual viewpoint
    is the initiative, which might be a project, product, or program of a business
    domain (group of projects).
  prefs: []
  type: TYPE_NORMAL
- en: The lack of standardization will impact the cultural aspects, such as **DevSecOps**
    and technology. In this scenario, we will have a business alignment with a project/product
    or product portfolio but not across the enterprise. This misalignment will result
    in an inhomogeneous culture and inconsistent technology stack across the organization.
    It is only sustainable if a business unit does not have synergies with other business
    units. In other words, the business unit is entirely self-sufficient and cannot
    leverage the common building blocks of other business units. This scenario is
    very often not the case, and it illustrates the bottom-up variation of this anti-pattern.
    Even in this case, **siloing** is still a genuine concern since it can have a
    negative impact on collaboration, learning, and productivity.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now look into the top-down variation of this anti-pattern, which brings
    different challenges.
  prefs: []
  type: TYPE_NORMAL
- en: The top-down strategy trap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The technology leadership team has researched and found that words such as *poly-cloud*
    or *multi-cloud* sound excellent for unlocking all the benefits of cloud native
    and reducing **vendor lock-in**. What do those two words mean? **Poly-cloud**
    wants to leverage the strength of a particular CSP. For example, customer-facing
    APIs might be hosted in **AWS** because of their scalability, **GCP** might be
    used for ML and AI, and **Azure** might be used for authentication and authorization.
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary driver for **multi-cloud** is to avoid vendor lock-in, and cloud
    segmentation is usually driven by capability strength in a broader picture. Poly-cloud
    and multi-cloud adoptions result in a very steep learning curve. Common scenarios
    are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the usage, it might mean the data team needs to learn how to manage
    data in multiple clouds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the data is managed in one cloud and everything else in other clouds, then
    the network team needs to be skilled in all the involved clouds to establish redundant
    links between clouds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can imagine how complex the operating model becomes when several CSPs are
    involved. Some foundational constructs, such as **availability zones**, differ
    between CSPs. Even the term *Private Link*, a service name that AWS and Azure
    use, works very differently. CSPs also charge **data egress fees**. If we have
    an application running in Azure and the data resides in AWS, we must pay egress
    data fees in AWS. Another common side effect of this scenario is that only the
    **common denominator** is implemented to achieve consistency across cloud platforms,
    which prevents us from utilizing the CSP features to their fullest extent. The
    **top-down approach** has good intentions, too, but it does not consider the cultural
    challenges, the steep learning curve, and the required high degree of collaboration
    and change management to a full extent.
  prefs: []
  type: TYPE_NORMAL
- en: 'During a consulting engagement, I helped a university with its multi-cloud
    governance framework. They wanted to adopt a multi-cloud approach using Azure
    and AWS. After a couple of days on-site, I discovered this was their third attempt.
    The first two attempts had already failed over the last three years. And now they
    have tried the same multi-cloud adoption again. One month later, the engagement
    was put on hold again. The historic phrase “*There is only one way to eat an elephant:
    one bit at a time*” showed its relevancy again. In our context, it means that
    we are more likely to be successful if we take small steps toward a target architecture
    that can evolve over time. If we start our cloud native adoption journey, it needs
    to be step by step so we can gain momentum, and a sound cloud strategy needs to
    address precisely that. For impactful cloud adoption, we need a clear understanding
    of our business goals and follow on from there. Let’s discuss what we need to
    consider for that.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the business goals and our current state
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How do we move from lacking clear objectives and strategy to a well-architected
    cloud native strategy? We will start by discussing the strategic aspects.
  prefs: []
  type: TYPE_NORMAL
- en: Strategic aspects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will need a strong business strategy, and the cloud native strategy needs
    to be an extension of this. It is crucial to understand that to achieve good business
    outcomes. We often hear that the technology strategy needs to align with the business
    strategy. Nearly every business relies on technology. That’s why the technology
    strategy should instead be an extension. This thinking will automatically ensure
    alignment. This way, we can ensure that our technology decisions provide the best
    business outcome, whether that requires new features or improving our compliance
    posture. When we start the strategic improvement initiative, we first need to
    understand where we are today and where we want to be. As in our top-down scenario,
    we likely set unrealistic goals when we only know where we want to be. How do
    we know where we are compared to everything around us? In the real world, we use
    maps to find out where we are and locate where we want to be, and the map will
    guide us there. Nowadays, it will likely be a navigation app or system, but the
    result is the same.
  prefs: []
  type: TYPE_NORMAL
- en: Know where we are
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Wardley Mapping**, named after Simon Wardley, is a strategic framework that
    visually represents the components of a business or system, its maturity stages,
    and its value to the users. They help to understand an organization’s environment,
    identify potential changes, and make informed decisions about where to invest
    resources. In a Wardley map, we position components of our value chain. A component
    might be a data repository or something unrelated to cloud.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Wardley maps have two dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: The vertical dimension describes the **visibility to end users** such as customers
    or internal users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The horizontal dimension represents the **evolution of commoditization** ranging
    from *genesis* through *custom build* to *product* and *commodity*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Wardley map might help us identify that we rely too much on custom-built components
    rather than leveraging features that are already a product or a commodity, such
    as **FaaS**. Now that we know what our business strategy is and what our current
    standpoint is, we are in a much better position to understand what our technology
    objectives need to be, and we will discuss that now.
  prefs: []
  type: TYPE_NORMAL
- en: Defining technology objectives and principles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With a good cloud native mindset, we want to support the business in achieving
    our goal while being highly efficient. Typical drivers for objectives are **business
    agility**, **time-to-market**, and **global reach**. Let’s see how we can address
    these.
  prefs: []
  type: TYPE_NORMAL
- en: Addressing our objectives
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can achieve these objectives by moving to commodities where they are available
    and focusing on custom builds where there is a niche need. Increasing resilience
    is another common objective, meaning we must architect for **fault tolerance**
    and **recovery**. Enhancing security and compliance would require embedding security
    and compliance in our **shift left approach**. After defining the objectives,
    we need to get stakeholder buy-in, which we explore next.
  prefs: []
  type: TYPE_NORMAL
- en: Collaboration and buy-in
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we are in a position to articulate objectives, we can collaborate and
    document them. We will need leadership buy-in to ensure actions will be taken
    to implement our goals. Building a strong connection to the **chief information
    officer** (**CIO**) and other members of the leadership team is important. We
    must establish trust, provide visibility of the new direction, and ensure the
    leadership team understands our intentions. The strategy must support our development
    teams but also requires support from the top.
  prefs: []
  type: TYPE_NORMAL
- en: Stakeholder management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The more hierarchy levels an organization has, the longer it takes until everyone
    receives and digests the information. Even though objectives don’t provide clear
    guidance, it is important to communicate them early. That way, people will not
    be surprised when they receive directions about the next level of detail. If we
    get trapped in this anti-pattern, we will probably not have a functioning **community
    of practice**. In the interim, we must use other communication and collaboration
    forums such as architecture and engineering stand-up. As a next step, we will
    define principles to provide early visibility for our stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: Defining principles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Defining a holistic strategy takes time, but we don’t want to leave the stakeholders
    in the dark during that process. Otherwise, the **technical debt** will continue
    to build up. An excellent way to provide early visibility is by articulating **cloud
    native principles**. Those principles enable organizations to establish resilient,
    scalable, and secure architectures, faster innovation, cost efficiency, and increased
    agility. Let’s go through some principal examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSP selection**: This will articulate our only CSP or give unambiguous guidance
    when we use A over B. An example is “*Use GCP for every product managed under
    this business domain, otherwise use AWS*.” We will talk about cloud platform selection
    frameworks later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CI/CD standardization articulation**: Do this to instantiate cloud resources.
    Use **Terraform** for every infrastructure component created through CSP APIs,
    such as an API gateway.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitHub Actions usage**: Use these for everything application-related, such
    as deployments of new serverless functions (FaaS).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SaaS usage**: Use SaaS first, then serverless containerized services, and
    **IaaS** as a last resort if nothing else is viable. This can include content
    management systems or CI/CD platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once we have gone through this phase, we will ensure to continue the stakeholder
    engagement, which we will discuss next.
  prefs: []
  type: TYPE_NORMAL
- en: Continuing the stakeholder engagement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This guidance will help prefer commodities when custom-built is not required,
    as described in Wardley Mapping earlier. Until we can draft a strategy, it is
    beneficial to continue socializing the guiding principles and getting the agreement
    through our existing governance forums. The forum members need to agree to those
    principles. Acceptance will ensure actions are being taken and make it easier
    to get a strategy sign-off later. We are now ready to define our strategy foundations.
  prefs: []
  type: TYPE_NORMAL
- en: Defining our strategy foundations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we move toward defining or reshaping our existing strategy, we need to
    check that we cover the aspects related to people, processes, and technology.
    The strategy should start with the vision, and we will explore this next:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vision**: It needs to be clear who the sponsor is, and we will document that
    in the strategy. The Head of Cloud Platform could sponsor the cloud platform,
    whereas the Head of Products sponsors product development. Then, we add the guiding
    principles we have already worked out to the strategy. We need to be very clear
    about who our CSPs are. If this is not a guiding principle, we need to clarify
    it. This area can cause confusion if it is not clearly articulated. We want to
    avoid the need to make case-by-case decisions for individual workloads. Those
    details are needed to scale and deliver a consistent support model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**People**: Once we have a clear picture of the current tooling and the target
    state, we can identify new skills that the teams will require to get the most
    out of the tooling. Since DevSecOps is also about a cultural change, we need to
    identify what training is required. Are individuals already well-versed in **Agile**,
    or do they need further upskilling? Classroom training can be helpful, but the
    best hands-on experience will come with an Agile coach embedded in the team. It
    is the same with the DevSecOps adoption from a cross-functional team point of
    view. If this is new to the teams, augmenting DevSecOps consultants can achieve
    a fast learning curve. People need to experience this cultural change to understand
    how it works best for the team. Job descriptions must be updated, and the Human
    Resources department needs to be consulted. That is a big change for the organization,
    and a change manager will be required to help with the organizational transformation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Process**: The criticality of processes is often underestimated. I have seen
    many cases where organizations implement tooling but the expected outcomes were
    not achieved because the processes were not mature enough to turn the technology
    adoption into a success story. For example, if we have a vulnerability tooling
    in place, it will provide the visibility that we need. However, it does not mean
    that the vulnerabilities will be remediated. There need to be processes, such
    as automated ticket generation for critical alerts, and escalation procedures.
    Otherwise, other things will take priority, and the actual root cause never gets
    fixed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Technology**: At this stage, we must also articulate the core technology
    stacks for **container orchestration**, security tools, CI/CD, and observability.
    The tooling needs to align with the cloud native vision. Legacy on-premises CI/CD
    tooling can be a burden when moving to a DevSecOps model due to the increased
    complexity of networking, operations, security, and compliance management. For
    example, we need to update on-premises firewall rules every time we connect to
    a new build agent, we need to patch the actual servers and certificates, and we
    need to provide more compliance evidence compared to a SaaS solution. When exploring
    new tooling, evaluating whether it also integrates out of the box is important.
    If we move to a new tooling, such as a new CI/CD toolchain, we also need to think
    about a **migration strategy**, which we will do in the next section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To reduce the risk of breaking changes we will need guardrails, which are our
    next discussion point.
  prefs: []
  type: TYPE_NORMAL
- en: Adding guardrails to our strategy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to consider the **quality controls** we want to establish. Since we
    are focusing on the strategy now, we can discuss it in great detail in [*Chapter
    5*](B22364_05.xhtml#_idTextAnchor136), *Delivering Rapidly and Continuously Without
    Compromising Security*, but holistic coverage is important for now and we will
    look into some guardrail examples next.
  prefs: []
  type: TYPE_NORMAL
- en: Guardrail examples throughout our SDLC
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Quality controls for the early SDLC (software development lifecycle) stage
    include repository and pipeline creation via updates to a configuration file in
    a CI/CD platform repository:'
  prefs: []
  type: TYPE_NORMAL
- en: The change requires a pull request approval
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The approval will trigger a **pipeline run** that validates whether the new
    repository and pipeline names align with the naming standards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If that is the case, the pipeline creates two new resources: a Git repository
    and a new CI/CD pipeline'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During the development phase, other **guardrails** will include **code scanning**,
    **linting**, **documentation generation**, and **least** **privilege enforcement**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value of pre-deployment guardrails
  prefs: []
  type: TYPE_NORMAL
- en: Guardrails can validate **data sovereignty**, **encryption**, **reliability**,
    and various governance, compliance, and cost aspects prior to deployment.
  prefs: []
  type: TYPE_NORMAL
- en: A popular **policy-as-code framework** for this purpose is **Open Policy Agent**
    (**OPA**). As a next step, we can map the required guardrails to our SDLC to get
    a solid end-to-end picture.
  prefs: []
  type: TYPE_NORMAL
- en: A holistic end-to-end view across the SDLC
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Guardrails can be set up throughout our SDCL phases, and the following figure
    gives us an idea of what a guardrail mapping can look like.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Mapping guardrails to our SDLC](img/B22364_02_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Mapping guardrails to our SDLC
  prefs: []
  type: TYPE_NORMAL
- en: The guardrails can also include **cost optimization controls**, such as budget
    alerts, underutilization and rightsizing alerts, and **anomaly detection**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implementing these guardrails can take years, depending on how much human resources
    can be allocated. Therefore, it is critical to work out the priorities and technical
    dependencies. This will help us articulate a roadmap. To visualize the progress
    of a guardrail area, I like to add a little **Harvey ball** in front of each box.
    A Harvey ball is a round ideogram that visualizes levels of maturity, or in our
    case, we can also use them to show progress. If an area is 25 percent complete,
    it would be color-coded from the top to the right edge of the circle to the right,
    like a period on a clock from 12 pm to 3 pm. The following diagram illustrates
    examples of different progress stages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Harvey ball examples](img/B22364_02_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Harvey ball examples
  prefs: []
  type: TYPE_NORMAL
- en: There is still more we need to include in our strategy, which we will explore
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing our strategy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: “*Strategy without tactics is the slowest route to victory. Tactics without
    strategy is the noise before defeat*,” said Sun Tzu, the author of *The Art* *of
    War*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The quote illustrates the requirement for a multifaceted approach. Our strategy
    must include an overarching view of cloud native initiatives covering CI/CD, including
    security tooling, observability, and all cloud native capabilities. When we define
    timelines for the roadmap, we need to consider our organization’s **maturity level**.
    If we have gone through the Wardley Mapping process, we will have a good understanding
    of where we are, but we also need to factor in where we are on our cultural journey:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Update frequency**: Because the roadmap is often updated more frequently
    than the strategy, the roadmap is sometimes maintained in a separate document.
    However, it can also be part of the strategy document. CSP features and services
    change all the time, as might our business objectives or regulatory requirements.
    Therefore, we need to update our strategy regularly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Change management**: When we continue with our strategy, we need to double-check
    that the previously mentioned change management and training aspects are covered.
    For the technology aspects, it will be very helpful to cross-check our strategy
    with the *Well-Architected Framework* of our CSP. We will also cover another framework,
    called the Cloud Adoption Framework, in a later section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Endorsement**: The sponsor and the governing body must sign off on the strategy.
    That might be the Head of Cloud and the architecture community. Only if the strategy
    gets a sign-off can people be held accountable, and only then will people follow
    the articulated directions. I have seen many organizations that only have draft
    strategies. People consider drafts more as a recommendation rather than a guideline.
    We want our cloud native journey to support the business, so we will need the
    buy-in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After stepping through strategic mistakes and best practices to define our
    objectives and strategy, we are ready to look into the next strategy aspect: setting
    ourselves up for a successful cloud migration journey.'
  prefs: []
  type: TYPE_NORMAL
- en: Lack of migration strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some common misunderstandings we discussed in the previous chapter contribute
    to this anti-pattern and these include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Confusion regarding cloud benefits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Underestimating skill gaps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Underestimating cultural change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of standardization and service catalog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, not having a **well-defined cloud native strategy** will also contribute
    to this anti-pattern, especially if we think moving to the cloud automatically
    reduces operational costs. Without clear guidance, we do not know what our target
    state should look like after the migration. Underestimating the **skill gap**
    and **cultural change** are also frequent contributors. Another significant contributor
    to this anti-pattern is the absence of a **service catalog.** After exploring
    the anti-pattern, we will discuss a migration framework for our applications,
    how to start on the business case, and how to kick off the implementation and
    gain momentum. Let’s get started with the variations of this anti-pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Common anti-pattern variations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s step through three common variations of this anti-pattern, starting with
    the myth of organic growth of the cloud footprint.
  prefs: []
  type: TYPE_NORMAL
- en: Growing the cloud footprint organically
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This anti-pattern starts when an organization wants to organically grow its
    presence in the cloud. As a consequence, there is no migration initiative, which
    results in a **slow cloud up-ramp**, typically only for new applications. Some
    existing on-premises applications might be extended to a hybrid cloud solution
    because of on-premises scalability issues.
  prefs: []
  type: TYPE_NORMAL
- en: A typical case involves a **content distribution network** (**CDN**), a web
    application firewall, an API gateway, and a queue in the cloud. The cloud native
    components can handle peak loads, and the on-premises app can pull from the queue.
    What was initially intended to be temporary can easily become permanent because
    there is no strong desire to move the rest into the cloud. After all, the team
    members have never gained sufficient migration experience. The burden here is
    that **troubleshooting** becomes more complex because errors can occur on both
    sides. It is the same with evidence collection for **compliance audits**. We have
    seen organizations that started their cloud adoption 8 years ago but only had
    20% of the workloads in the cloud, and the rest was still on-premises. The vast
    majority of the cloud applications were new applications. The problem is that
    organic growth is unlikely to gain momentum.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, we will deal with legacy applications for a long time and won’t be
    able to fully unlock the potential of cloud native stacks.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of migration guidance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another variation of this anti-pattern is not having a migration decision framework.
    Without a framework that guides us to which cloud platform to migrate to, we will
    need to make case-by-case decisions, which will take too long, and the decisions
    will not be consistent. We also do not know what the actual migration treatment
    should look like. A **treatment plan** will describe what refactoring steps we
    take to make an application more cloud-friendly. Organizations that do not have
    that framework in place make case-by-case decisions. This brings several problems.
    The decisions will not be consistent because there is a **lack of standardization**,
    which will increase the operational complexity. The decision process will take
    longer because it is not standardized. The migration process will take longer
    because every migration is treated differently. This can be a big burden on the
    application teams. Because of all the disadvantages, migrations will be perceived
    as painful and energy-draining. This will then reduce the willingness to migrate
    more applications. This results in the same outcome as the previous variation
    of this anti-pattern: we cannot leverage the full cloud native advantages because
    we are stuck in the legacy on-premises world for too long. It also means that
    we still need to continue with our data center refresh program. Once the hardware
    is renewed, we have spent considerable funding that could have been used for migrations.'
  prefs: []
  type: TYPE_NORMAL
- en: We can see how this turns into a long-winded story that doesn’t seem to end.
    But how can we fix it? How can we develop a structured migration strategy that
    helps us standardize migrations, flattens the learning curve, speeds up the migration
    progress, and delivers robust cloud native solutions that support business agility?
    We have seen that a slow organic approach does not help us gain momentum. Only
    once we gain momentum can we accelerate the cloud migration, increase migration
    efficiency, and improve our applications’ operational efficiency and business
    agility. Now is the time to explore a framework that will help us achieve repeatable
    outcomes and gain momentum.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of a service catalog
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A service catalog contains blueprints that can be deployed in a self-service
    fashion. The service catalog offers reusable building blocks. Without a service
    catalog, we will have inconsistent and slow migrations. We need to set priorities
    for our service catalog items to make sure that high-impact items are implemented
    first. We also need to make sure that we address our requirements properly, including
    non-functional requirements. Otherwise, we will run into issues when we ramp up
    our migration journey.
  prefs: []
  type: TYPE_NORMAL
- en: An example of a service catalog item is a **publish and subscribe pattern**.
    This service catalog item can be referenced in a CI/CD pipeline. Then, it will
    create a queue and a notification construct, optionally with **dead letter queues**
    (**DLQs**). The DLQ can be enabled via an input parameter to the service catalog
    call. The main CSPs have their native service catalog offerings. SaaS CI/CD solutions,
    such as Terraform Cloud, also offer that.
  prefs: []
  type: TYPE_NORMAL
- en: The advantages of service catalogs are that they promote standardization and
    can have reliability and security default configuration. In the context of migration,
    they speed up migration significantly and help standardize our migration approach,
    simplifying the operational aspect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Service catalogs also provide several advantages, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: They can accelerate on-premises to cloud migrations significantly because building
    blocks can be reused
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They promote standardization and can have reliability and security default configurations
    built in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They can help reduce the operational complexity due to standardization, which
    brings consistency across environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To stay away from the migration anti-patterns, we need a framework for our migration
    journey, which we will explore next.
  prefs: []
  type: TYPE_NORMAL
- en: A framework to navigate our migration journey
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need a robust framework that helps us with decisions and standardized treatments
    to gain momentum. In 2010, Gartner published the concept of using *R models for
    cloud migration strategies*. The model provided a framework to classify applications
    based on their migration suitability. Gartner’s framework had 5 Rs. AWS released
    a framework with 6 Rs, and later on, an updated version with 7 Rs, and the model
    is called *The 7 Rs for migration*. This is now a de facto framework for cloud
    migration. Microsoft adopted a very similar framework in their Cloud Adoption
    Framework shortly after that, and the terminology is also very similar. GCP uses
    a different grouping. We will stick to the AWS and Azure terminology for the remainder
    of this book. We will step through the variations in a common order of priorities,
    with the first one having the highest priority:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Refactor**: This means the application is re-architected to leverage its
    full cloud native potential. This has the biggest potential to improve resilience,
    scalability, performance, and operational complexity. Refactoring requires more
    time and effort but can have a long-term return on investment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Replatforming**: This means that an application is slightly modified for
    the migration. It is also referred to as *lift, shift, and tinker*. Those slight
    modifications could be an operating system upgrade or moving the database to a
    cloud native managed database service such as **AWS RDS**, **Azure SQL**, or **GCP
    Cloud SQL**. The CSPs offer database migration services for this purpose. This
    reduces operational complexity and it has the potential to reduce the run cost
    and improve resilience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repurchasing**: This is also known as *shop and drop*, meaning an existing
    on-premises application is replaced with a **commercial off-the-shelf** (**COTS**)
    solution, typically a SaaS product. It is worthwhile to compare the vendor’s website
    offering with the offerings in the CSP’s marketplace. Sometimes, the licensing
    models differ.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rehosting**: This stands for shifting an application from on-premises cloud
    native virtual machines, such as **AWS EC2**, **Azure VMs**, or **Google’s GCE**.
    With this migration path, the CSP’s hypervisor is used. This path is often called
    *lift and shift* and brings us a step closer to a cloud native solution than the
    *Relocate* strategy. CSPs have migration services that help with this migration
    type, including **AWS Server Migration Service**, **Azure Migrate**, and **GCP
    Migrate for** **Compute Engine**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Relocate**: This means that an application is moved to the cloud without
    architectural changes, using the same virtualization hypervisor as on-premises.
    **VMWare** has partnerships with the major CSPs to simplify this migration type.
    The *Relocate* strategy is often used when the goal is to move quickly, for instance,
    because of a data center exit strategy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Retain**: This means that an application is not being moved. This is also
    called the *do-nothing* decision. This is often done when it is too hard to tackle
    a migration now or when the application has a set decommissioning date and new
    features are not required. An example is legacy mortgage systems because the mortgage
    contracts have such a long runtime. Any new mortgage applications will be managed
    by a newer application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Retire**: This refers to the decommissioning of systems. This usually happens
    with small bespoke legacy systems that are performing small jobs. The decommissioning
    happens often toward the tail end of a migration initiative because the functionality
    can be absorbed by other applications. This is the desired target state for applications
    that become obsolete by a cloud migration initiative.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram provides an overview of the 7 Rs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – The 7 Rs](img/B22364_02_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – The 7 Rs
  prefs: []
  type: TYPE_NORMAL
- en: '(source: [https://aws.amazon.com/blogs/enterprise-strategy/new-possibilities-seven-strategies-to-accelerate-your-application-migration-to-aws/](https://aws.amazon.com/blogs/enterprise-strategy/new-possibilities-seven-strategies-to-accelerate-your-application-migration-to-aws/))'
  prefs: []
  type: TYPE_NORMAL
- en: The diagram summarizes the framework and it provides good guidance to navigate
    through the migration options. The framework provides repeatable guidance for
    our target state. Now, we need to categorize our migration candidates to start
    with a business case, which will be our next step.
  prefs: []
  type: TYPE_NORMAL
- en: Transitioning into the business case
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Later, we will investigate how to create a 7R decision tree tailored to our
    organization’s needs, but first, we need to start building out a **migration strawman**.
    This is an initial, simplified draft of a migration plan. It outlines a list of
    applications, a timeline of business goals, and the 7 Rs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will look into some of the strawman aspects, starting with the creation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating the strawman**: The creation of the strawman is often done in a
    one-day workshop. If it is an on-site workshop, it can be done on a whiteboard
    that has a drawn timeline representing the business goals and seven sticky notes
    in different colors. We can then go through the application list and have the
    application name on a sticky note near the colored sticky, depending on which
    migration path suits best. Of course, this can also be done on a virtual board
    with tools such as **Miro** or **Mural**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Purpose**: The purpose of the strawman is to come to a basic structure that
    can be reviewed and refined later on. It will also help to identify challenges
    early and build the foundation for a detailed and comprehensive migration plan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Timelines and resources**: At this stage, we can define high-level timelines
    and the required resources for the migration paths. They won’t be accurate, but
    they will help steer conversations about priorities and which of the 7 Rs should
    be favored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost benefits**: We also need to look up the data center cost savings we
    can achieve by reducing our on-premises footprint. The numbers are usually known
    since they are in the budget.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Other benefits**: The strawman will be a valuable input to our migration
    business case. Since we have high-level effort estimates, we can quantify the
    **migration cost**. We will also quantify the business benefits, such as **increased
    business agility**, **improved resilience**, and **reduced** **technical debt**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Business case**: A signed-off business case is critical to gain momentum.
    This is the sticky point where a lot of organizations fail. Because there is no
    allocated budget for migrations, they get stuck in the *lack of migration* *strategy*
    anti-pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will fast forward to the next steps because we will step through the migration
    details in [*Chapter 12*](B22364_12.xhtml#_idTextAnchor320). The next goal is
    to accelerate our migration journey, and we will look into how to do that next.
  prefs: []
  type: TYPE_NORMAL
- en: Kicking off the implementation and gaining momentum
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will kick off a **migration acceleration initiative**, starting with the
    funding request:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Funding**: Our CSP can help us identify a consultancy for that purpose. Our
    CSP can provide funding or credits for this through their initiatives: AWS **Migration
    Acceleration Program** (**MAP**), **Azure Migration and Modernization Program**
    (**AAMP**), and GCP **Rapid Migration and Modernization** **Program** (**RaMP**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Readiness assessment**: The next step is a **migration readiness assessment**,
    which analyzes whether our current cloud landscape is ready for the migration
    initiative and what the gaps are. The assessment considers things such as the
    operating model, the maturity of the landing zone, and other factors usually defined
    in the **cloud adoption framework** (**CAF**), which we will discuss in a later
    section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Migration planning**: Before the actual migration starts, there will be migration
    planning. An approach we have seen working is implementing a proof of concept
    by picking four to five applications we want to migrate first. They should have
    different migration paths; for example, one *Rehost*, two *Replatform*, and one
    *Refactor* candidate. The applications must be complex enough to verify our approach
    and migration toolset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Proof of concept**: The proof of concept will help in articulating our treatment
    plan, which is an extension of the 7 Rs. It will also add to our organization’s
    context. We shouldn’t start this journey alone. We should have the support of
    a consultancy that has done that many times before. The consultants must be embedded
    in our teams to ensure the knowledge transfer works.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Treatment plan**: The treatment plan will become a valuable extension of
    our migration strategy and a feedback loop to validate that the strategy is aligned
    with the more detailed findings we gained during this process. It will also articulate
    a **cloud placement decision** if our organization has a poly- or multi-cloud
    strategy. What else can we see in a treatment plan? Typically, we have guiding
    questions that step through the required business benefits, such as increased
    business agility.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simplified treatment plan example**: The following illustration is a very
    simplified view, but it shows us how **prescriptive guidance** can work. Please
    note that the order of migration path types does not reflect our priorities, but
    it works best for eliminating options. We are also not considering the *Relocate*
    option, since that is mostly relevant for data center exit strategies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.4 – A treatment plan example](img/B22364_02_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – A treatment plan example
  prefs: []
  type: TYPE_NORMAL
- en: The preceding diagram shows a simplified version that can be easily tailored
    to our organizational needs.
  prefs: []
  type: TYPE_NORMAL
- en: '**Organizational context**: The treatment plan will differ for every organization
    because it addresses the company’s context, business strategy, and cloud native
    strategy. Once we decide on the migration path, we must identify the required
    change areas: **data storage and database**, **application refactoring**, and
    **CI/CD changes**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quantifying the change**: As a next step, we can quantify the change. We
    can retest the decision by reviewing the treatment plan with the insight gained.
    This process will be much smoother if a certified CSP partner helps us because
    they have done this many times.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every consultancy will have a different variation of this framework and use
    different tooling to capture all the findings. That doesn’t matter. The critical
    success factors are having prescriptive guidance and a repeatable approach to
    the migration path decision. This will help to get a good migration strategy implemented.
    We will talk about migration factories and tooling in [*Chapter 12*](B22364_12.xhtml#_idTextAnchor320).
    We have enough to start a migration strategy and build a feedback loop using the
    treatment plan.
  prefs: []
  type: TYPE_NORMAL
- en: If we get external help for our migration acceleration or other cloud native
    initiatives, we will need sufficient knowledge in our organization to be able
    to govern those initiatives, and we will explore this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Outsourcing of cloud knowledge and governance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It can take years for an organization to realize they are stuck in this anti-pattern
    because a lot falls under the umbrella of knowledge when we talk about cloud native.
    Let’s elaborate on our understanding of cloud knowledge before we go through how
    this anti-pattern can start and its impacts.
  prefs: []
  type: TYPE_NORMAL
- en: What does it take to govern cloud native initiatives?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cloud native initiatives can be complex and critical to the success of a business.
    Therefore, we need a sound governance approach, which we will explore now.
  prefs: []
  type: TYPE_NORMAL
- en: People and organizational aspects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From a cultural and soft skill viewpoint, we need to understand DevSecOps practices,
    which we discussed in [*Chapter 1*](B22364_01.xhtml#_idTextAnchor015). We need
    to understand how the change management process works in our organization. We
    need to know what communication channels to use for **effective communication**
    and **collaboration** and how to use our collaboration tools for documentation
    and teamwork.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to understand **business drivers** and how we can support them, and
    articulate our cloud native strategy. This includes aspects such as **business
    agility** or **resilience** requirements. We have to know our stakeholders, how
    to engage them, and how to manage relationships and expectations. This includes
    our business partners, such as SaaS vendors and CSPs. Understanding governance
    frameworks, how to balance centralized and decentralized governance, the required
    governance controls, and how to establish a mature level of governance and compliance
    automation are also critical. In this section, we will step through these aspects
    in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: What it takes to govern cloud native initiatives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drivers for outsourcing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common anti-patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indicators for these anti-patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technology aspects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From a technology point of view, we need to understand the services our CSP
    offers and the best practices for combining and orchestrating them. It also includes
    knowing the well-architected framework and how to apply it strategically and for
    individual initiatives. It is also critical to know how to define **reusable architecture
    building blocks** that align with **best practices** and **business goals** and
    how to turn them into **reusable artifacts** in our service catalog.
  prefs: []
  type: TYPE_NORMAL
- en: We need to stay on top of new cloud native developments to ensure we don’t get
    stuck with old technologies, as we discussed earlier when we looked at Wardley
    maps. We need to be able to validate whether our **CI/CD toolchain** meets our
    needs and how to use the toolchain to establish consistent architectures. Understanding
    networking concepts and how to connect applications to business partners, public
    internet, on-premises, and, potentially, other CSPs is crucial. We also need to
    know **deployment best practices**, such as blue-green, to decide what deployment
    architecture is needed. Of course, we also need to understand **data best practices,**
    **microservices**, **container technology**, **cost management**, and many more
    aspects. We must also make sense of business and technology dependencies to build
    roadmaps.
  prefs: []
  type: TYPE_NORMAL
- en: Operational aspects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We need operational knowledge to understand best practices for **logging**,
    **monitoring**, and **alerting**, as well as how to leverage our observability
    tools and establish **centralized logging** where needed, such as security or
    audit logs. Operational knowledge includes **managing scalability**, **optimizing
    high availability performance**, **optimizing cloud resource utilization**, **cloud
    cost management**, and **FinOps best practices**. Knowledge of security and compliance
    is also required to implement the right controls. These include data and network
    traffic segmentation, encryption, network security controls, and others. We need
    to know how to assess trade-offs such as security versus cost.
  prefs: []
  type: TYPE_NORMAL
- en: This is not an exhaustive list of the knowledge required to deliver our strategy
    successfully. However, it is a good starting point for understanding what is required
    and why cloud native knowledge is critical for the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Drivers for outsourcing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The never-ending learning is a big challenge. It is a challenge that some organizations
    try to avoid. Outsourcing a problem sounds tempting, and this decision can have
    several drivers. Sometimes, decisions are made without fully understanding the
    problem space. These are some typical cases:'
  prefs: []
  type: TYPE_NORMAL
- en: Technology is not our core business. Why should we deal with all that complexity?
    Let’s outsource it. Good contract and vendor management practices will do the
    trick.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want lean teams to scale up and down in case we need to react to peak seasons
    or sudden market reactions. We can do that more easily when we have temporary
    external resources, such as consultants from a business partner or freelancers.
    Freelancers are individual contractors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiring highly skilled technology talent is very time-consuming. If we sign an
    agreement with a big consultancy, they will give us the best people in the market.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want to reduce administrative overheads. We do not need to manage training
    initiatives, performance reviews, or leave approvals if we have fewer permanent
    staff and more freelancers or consultants.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both outsourcing scenarios (freelancers and consultancies) have many similarities.
    We will now examine how this anti-pattern can unfold in reality.
  prefs: []
  type: TYPE_NORMAL
- en: Common anti-patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section will cover a few common strategy anti-patterns that are holding
    back organizations.
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge outsourcing to freelancers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I once freelanced for a government organization, and more than 75% of individuals
    in the information and technology department were freelancers. Every individual
    contractor brings their own experience, knowledge artifacts, favorite programming
    languages, coding styles, libraries, tooling, and design patterns. Unknowingly,
    they might even have their favorite anti-patterns they keep using.
  prefs: []
  type: TYPE_NORMAL
- en: The motivation to be a freelancer is typically independence and a higher remuneration,
    depending on the job market. The next election had an indirect impact on the government
    organization. Contracts of freelancers that had been there for more than three
    years could not be extended. New contractors were brought on board, and they had
    a smorgasbord of tools, frameworks, and coding practices in front of them. The
    problem was that they couldn’t pick and choose. They had to digest it all. Therefore,
    the learning curve is steep and there are many unknowns. This increases the time
    until new team members can be productive, and it also brings additional risk because
    of the unknowns. The situation can only be fixed by allocating time and budget
    to remediation initiatives.
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge outsourcing to consultancies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another time, I was employed by a consulting firm that had a cloud/DevOps engagement
    with a bank. The customer had a lot of different consultancies in the mix. Business
    units could decide which consultancy they want to bring in. One third party specializing
    in software engineering and APIs was attached to one business unit and a different
    one to another, and there were consultancies specializing in AWS and a different
    one in Azure. Some consultancies had been there for years, and their technology
    frameworks had changed during the long-term engagement. Having many consultancies
    in the vendor mix, combined with changing technology stacks and patterns, made
    it obvious that there are many moving parts. It became obvious that there was
    no overarching governance. The CI/CD toolchain and applications became unmanageable.
    Of course, consultancies also have to rotate their staff, because one of the personal
    drivers of a consultant is to get new challenges frequently and not get stuck
    in one place. This needs to be considered in project plans since there is extra
    time that needs to be allocated for handovers. One of the big global consultancies
    also brought in many junior consultants to maximize its profit, and the senior
    consultants did not challenge the quality shortcomings.
  prefs: []
  type: TYPE_NORMAL
- en: If we end up with these types of anti-patterns, not only will the frameworks
    and technology be inconsistent but so will the quality, levels of automation,
    observability granularity, log statements, deployment architectures, recovery
    procedures, and more. As a result, the organization becomes paralyzed and cannot
    react swiftly to market changes. It is critical to understand that consultants
    and freelancers need to be treated as accelerators, not as replacements for internal
    knowledge. So, how can we spot this anti-pattern to make sure we can take the
    right measures? We will find out now when we investigate the indicators.
  prefs: []
  type: TYPE_NORMAL
- en: Anti-pattern indicators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cultural indicators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are examples of cultural observations that indicate problems with knowledge
    outsourcing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ramp-up time**: It takes new joiners an unreasonable amount of time to become
    productive and understand the landscape. This is an especially strong indicator
    if even senior developers or engineers take longer than three months to get up
    to speed. They have usually broad experience with tooling. If they take a long
    time, this is a hint that either the CI/CD landscape is defragmented or out of
    date, or processes and ways of working are not as agile as they should be. In
    this scenario, it is a good idea to ask the new joiners what the challenges are
    and capture structured feedback. We could also engage a third party to assess
    the current CI/CD and cloud landscape and come up with recommendations and priorities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource bottlenecks**: Initiatives are impacted if the most knowledgeable
    person is away. This strongly indicates that knowledge is not being shared across
    the organization, which is a major risk for the organization, especially when
    that individual leaves the organization or requires unplanned leave. Pair programming,
    shadowing, and reverse-shadowing can close that knowledge gap. We also need a
    clear definition of ready, which means the requirements are ready to start the
    design or a design is ready for implementation. This will depend on the definitions
    within a team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Outsourcing everything**: It becomes obvious that most cloud engagements
    need to be outsourced. This could be because of internal resource constraints
    or lacking internal skills and experience. Let’s explore this in more detail:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lack of internal resources**: If we do not have the resources, we must validate
    that enough time is allocated for our team members to collaborate with the external
    partner. We must understand and influence decisions to align with our vision,
    best practices, and operational needs. Otherwise, we will have the technology
    and framework sprawl, and the team will not know the internals of the application
    or product produced by the consulting firm. Even if the team has the required
    training in the cloud platform and CI/CD, they will not know enough about what
    has been delivered and deployed into production.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lack of skills**: If the internal team cannot implement a new cloud initiative
    because of a lack of skills and experience, it is obvious that more training is
    required. We will need a combination of standardized learning for cloud and CI/CD,
    but we also need contextual learning on how to apply those things in our organization.
    This can be learned with team augmentation and working alongside an external party.
    The knowledge transfer must be addressed in the **statement of work** (**SoW**),
    and it needs to be regularly validated during a consulting engagement.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DevSecOps culture**: Another giveaway for a knowledge gap is the absence
    of a DevSecOps culture or manual steps in the CI/CD process. We talked about the
    DevSecOps culture earlier, and we can improve or establish it through team augmentation.
    The main reasons for a lack of automation and relying on manual steps in the CI/CD
    process are insufficient knowledge or cutting quality corners due to rushed deadlines.
    Both are risks to the organization and need to be addressed by allocating enough
    time to fix the issue and ensuring the teams have the required knowledge or can
    gain it through the previously discussed learning methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we can see, the root cause of this problem category is quite often a lack
    of training and experience to establish an effective governance procedure. But
    there are also other areas that indicate problems, and we will look into them
    now.
  prefs: []
  type: TYPE_NORMAL
- en: Indicators in our documents and systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following indicators can be found in existing documentation, including
    contracts, and in systems that we use:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Outsourcing contracts are missing fundamental information**: Before the engagement
    starts, a mutual contract is signed between both parties, commonly known as the
    SoW. If the SoW does not reference internal CI/CD practices such as code scanning,
    branching model, CI/CD workflows, coding style guides, and observability standards,
    this should raise alarm bells. Standards and frameworks must be referenced in
    a SoW if they are in place. Otherwise, the outcome will not meet our expectations,
    and we will need to deal with technical debt, governance challenges, maintenance
    complexity, and avoidable operational complexity. It is time to act immediately
    if we don’t have those standards. If internal team members do not know how to
    articulate those standards, the next engagement with our trusted cloud consultancy
    should be establishing or maturing those standards. This engagement will need
    full support from the technology and business teams. It is a very strong sign
    that we do not have the knowledge to govern our cloud native initiatives. This
    means that governance happens outside of the organization. This is a guarantee
    for failure since this approach will not meet our organization’s needs and strategic
    direction. We need to make this standardization engagement a priority. More importantly,
    we need someone who can work closely with the consultancy and learn all about
    the best practices while also doing some theory education such as a classroom
    or online course.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Analyzing the training budget and skill certifications**: Numbers don’t lie.
    Our team members cannot reimburse expenses for training or conferences without
    a dedicated training budget for ongoing learning unless we use some creative accounting
    techniques. Some team members might be willing to absorb those expenses. From
    a corporate point of view, it would be fair to budget for it and pay those expenses.
    How else could our company expect to remain abreast of the rapid pace of innovation
    in the technology space without supporting our employees in remaining up to date
    with our knowledge? In the end, we will achieve a better corporate outcome. We
    need to work out a training plan that aligns with the experience level of our
    team structure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud native skills are not reflected in job descriptions**: If the required
    experience level is not articulated in the job description or is not quantifiable,
    then we need to work on a skill matrix for each experience level. Then, we can
    work out a gap analysis to see which areas need improvement. This will help to
    look up what training we need and what the cost will be. It is important to cover
    the following areas in the training plan: DevSecOps and Agile, security, CI/CD,
    governance, and technology, including development, operations, and observability.
    It is important to get those numbers into the next budget. If any budget during
    the current financial year can be repurposed, we are already in a better position
    because we have worked out the training numbers, gaps, and benefits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Over-privileged user permissions**: Another way to indicate we are heading
    toward this anti-pattern is to validate human permissions in our identity and
    access management roles. If no one has the skills to validate this, that should
    ring alarm bells. If we discover that humans have permissions that should not
    be needed in a mature DevSecOps culture, this is a strong indicator of the immediate
    need for training. If humans require write permissions to change either database
    schemes or ingest data into a database, there could be two reasons for this: either
    the permissions are not required or we are not following least privilege best
    practices. The likely option is that our teams are not following DevSecOps best
    practices. In this case, we have to allocate time to establish those capabilities.
    In our example, we will need data ingestion patterns articulating how tooling
    can help to import data. If the team doesn’t have experience in that area, it
    will highlight another need for training. By now, we know that learning includes
    generalized learning provided in a course and pairing up with externals who have
    done that before.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similar to the cultural indicator category, we can see that a lack of training
    and experience is causing problems, and we will later explain how this impacts
    operations and delivery. We now have a good understanding of how to spot indicators
    within our documentation and systems and we will move on to operational and delivery
    indicators.
  prefs: []
  type: TYPE_NORMAL
- en: Operational and delivery indicators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following indicators become obvious while we operate our applications or
    when we want to implement changes or new features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Every little change takes an unreasonable amount of time**: This indicates
    technology and framework sprawl as a result of governance gaps. Those gaps are
    likely due to a need for more knowledge to govern technology and process decisions.
    We must upskill our team to govern initiatives, review outcomes, and make recommendations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No long-term fix for outages**: There are outages, and the teams can fix
    them quickly but do not know how to improve the situation strategically. This
    indicates a lack of observability and, potentially, a shortcoming in technology
    refreshes. Both could have happened due to a timeline rush, a lack of observability
    experience, or tooling. This will require a root cause analysis to determine what
    actions need to be taken.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Significant findings in advisory tools**: An advisory scanning tool, such
    as a **cloud native application protection platform** (**CNAPP**) shows many findings.
    These include unencrypted storage, unattached disk volumes, underutilized instances,
    missing access logs, reliability gaps, and keys that have not been rotated for
    over a year. This shows we either operate reactively due to time constraints or
    have not adopted best practices. The first one could mean that we do not have
    mature risk management procedures and ownership definitions in place, such as
    an operating model, and a RACI (responsible, accountable, consulted, informed)
    matrix that shows responsibilities, accountability, and who needs to be consulted
    or informed. The second possible reason, a lack of best practice adoption, is
    another sign that training is required and that the team needs to be given time
    to implement these best practices. Quite often, a combination of both reasons
    applies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have explored internal indicators, the problems they cause, and how to remediate
    them. Recovering from these problems can take a long time, depending on the company’s
    size, degree of sprawl, and complexity. It is important to continuously look out
    for these indicators. But there are also some external indicators for this anti-pattern,
    and we will go through them next.
  prefs: []
  type: TYPE_NORMAL
- en: External indicators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following signals are potentially provided by third parties:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Significant finding in audits**: Audits reveal many remediation-required
    findings, including least privilege approach gaps and vulnerabilities in containers
    and virtual machines. The root causes are the same as those as the findings surfaced
    by an advisory tool, such as a CNAPP solution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Over-relying on penetration tests**: Penetration tests include findings that
    could have been avoided with a mature DevSecOps culture, such as out-of-date images,
    lack of network security controls, or installed malware because we are exposed
    to supply chain attacks. This indicates we have not addressed practices such as
    vulnerability scanning in our DevSecOps culture and CI/CD toolchain. This is usually
    not a technology issue, since most CSPs offer that service. It is very likely
    a sign that more DevSecOps upskilling is required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Partner feedback**: A CSP or software vendor provides feedback that we are
    not utilizing the tool enough or correctly. We need a functional relationship
    with the third party for them to be honest enough with their feedback. The feedback
    from the CSP could be that our virtual machine uptake needs to be lowered if we
    have a serverless strategy. This can be a sign that our serverless strategy has
    not been communicated well or that our teams don’t know how to write serverless
    applications and would rather run apps in the traditional way on virtual machines.
    A vendor might provide feedback if we have a committed spend and significantly
    underutilize the tool. One of my previous customers had a committed spend for
    security and compliance SaaS products but they only utilized 10 % of the license
    volume. The reason was that only the people who initiated the purchase knew how
    to leverage the tool but left shortly after the purchase. Luckily, the vendor
    reached out, and we were able to run some training sessions. This helped with
    the tool ramp-up and creating visibility of the current maturity level for compliance
    and security.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lessons learned
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What is the lesson learned from feedback coming from either CSPs or software
    vendors? They often provide training, and we need to make sure that we utilize
    that training. Only then can we guarantee that we get good value from our purchase.
    If the product is our strategic choice, we need to make sure we build good relationships.
    This will make sure that we get honest feedback, and we can also get answers to
    questions we might have. We will discuss this in more detail in the next section,
    where we explore partnership strategies.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of partnership strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: “*Partnership is not a legal contract between two equal individuals. It’s an
    emotional alliance between two people who are committed to each other’s success*”
    is a quote by Warren Buffet. We rely on partnerships in our daily lives, for example,
    with work colleagues, friends, a spouse, and others. On an organizational level,
    partnerships have the same significance. We want to avoid making partner decisions
    based on gut feeling and instead rely on logical and strategic thinking and decision-making.
    No matter what market we operate in, there will be competition, and we want to
    be ahead of the curve. We won’t be able to achieve all our goals alone. Let’s
    look into some anti-patterns that can reduce the value of partnerships, burden
    our organization, and hold us back.
  prefs: []
  type: TYPE_NORMAL
- en: We will look into two anti-patterns, one for professional services and one for
    technology partners. We will identify indicators and partner selection considerations
    and how to improve the partnership with our CSP (cloud service provider). Let’s
    start with the anti-patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Common anti-patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Panic-driven partner selection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a previous role, I worked for an organization that had a tiny cloud platform
    team, considering the cloud native ambitions they had. Let’s refer to them as
    the customer to distinguish between the consultancy and the customer. The customer
    relied heavily on a cloud consultancy. The local consultancy has less than 500
    employees and operates only in a small part of Asia Pacific. Their consultants
    are highly skilled, have a wealth of cloud native knowledge, and contribute to
    the community via meetup talks, conference presentations, and blog posts. They
    have won several AWS partner awards and have demonstrated true dedication. They
    could operate with little guidance, were productive, applied best practices, and
    were always willing to transfer knowledge or work in a team-augmentation approach.
    The small cloud consultancy was a great cultural fit and understood the customer’s
    business objectives. They also had all the required technology expertise.
  prefs: []
  type: TYPE_NORMAL
- en: Later, the customer had two on-premises outages within a year. Because of service-level
    agreement breaches, they had to pay penalties for the outages. Additionally, those
    outages received media attention, which added more pressure.
  prefs: []
  type: TYPE_NORMAL
- en: Only 25% of the applications ran in the cloud, and the majority were hosted
    on-premises. The leadership team brought in one of the big global consultancies
    to investigate resilience issues across the organization. The international firm
    was known for its expertise in process design and management consulting. The international
    global consultancy started with on-premises analysis and design recommendations.
    Unfortunately, once the global consultancy commenced the cloud discovery workshops,
    the budget for the local cloud consultancy was repurposed. The giant consulting
    firm tried reusing slides that were previously used for businesses 20 to 50 times
    the size of the customer. The slides were very generic and did not address the
    customer context. During the first cloud workshops with the new partner, it became
    apparent that their cloud experience could not match expectations. The experience
    gaps were significant. The majority of their consultants were very on-premises
    focused. The people who had some cloud experience were graduates who only had
    very little time to learn from errors and anti-patterns.
  prefs: []
  type: TYPE_NORMAL
- en: The recommendation slides produced after the discovery phase did not reflect
    reality. The chosen language was ambiguous. The consultancy did not understand
    the current automation and compliance gaps, which became obvious during the play-back
    sessions. When we (the customer) tried to clarify misunderstandings, we realized
    the consultancy did not understand the fundamental concepts of cloud native. We
    agreed that the cloud team needed to be pulled into the review process earlier
    to improve the quality. The consultancy brought in more consultants to capture
    detailed requirements in the following engagement phase.
  prefs: []
  type: TYPE_NORMAL
- en: We had review sessions where there were 2 members from the cloud team and 12
    from the consultancy. The consultancy produced design artifacts that were missing
    a majority of compliance and security requirements. After a while, some team members
    of the customer’s cloud team spent 50% of their time reviewing and providing feedback.
    The mentality of the consultancy was very different compared to the previous strategic
    cloud consultancy. Their behavior was passive, and their main driver was to move
    stories from “in progress” to “done” on the Jira board. The quality was so low
    that it did not add value, and the cloud team spent more time hand-holding the
    consultants to get the quality to an acceptable level. After 6 months, 25% of
    the intended scope was delivered. It was an exhausting experience and negatively
    impacted the motivation of team members. This anti-pattern is avoidable if we
    choose the right vendor for the suitable problem space. Choosing the right partner
    requires some planning and collection of data points to see how the velocity can
    improve over time. But those things do not happen if we make reactive decisions.
  prefs: []
  type: TYPE_NORMAL
- en: You snooze, you lose
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another common variation of the *lack of partnership* anti-pattern is being
    in a passive mode instead of a proactive mode. That typically happens when we
    do not have a cloud migration strategy and want to grow our cloud presence organically.
    As a consequence, we don’t gain momentum. The migration approach will be slow,
    as we already covered in the *lack of migration strategy* anti-pattern. Because
    of that, we will not invest enough time and budget into strategic relationships.
    When this happens, we might have all required license agreements in place, but
    we are not necessarily using the tools and platforms correctly. We are probably
    also not focusing on building enough cloud native knowledge within our organization.
    We don’t have regular collaboration sessions with our partners. We will miss out
    on the training that our teams could get. We will also not receive valuable feedback
    or leverage the partner for reviews. All those things will hold us back. Let’s
    summarize the benefits of strategic partnerships to make sure we leverage them.
  prefs: []
  type: TYPE_NORMAL
- en: The value of strategic partnerships
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A partnership is a mutual relationship. Partners will want to help us since
    they want a successful customer story, too. What are we missing out on if we do
    not build strong strategic partnerships?
  prefs: []
  type: TYPE_NORMAL
- en: Partners can help us with a training plan, training sessions, and lab environments
    so that our team members can follow the instructor for more hands-on experience.
    With a functioning partnership, we can leverage those benefits.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we don’t have a strong relationship with our partners, they won’t provide
    valuable feedback to improve and be more effective in our working methods. Partners
    have seen many customer stories and seen first-hand what has gone wrong and what
    worked. They want to help us because a customer’s success also means they have
    a good customer story.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will not receive roadmap insights, which can be helpful to avoid building
    up technical debt and avoiding bespoke solutions if we know there will be an out-of-the-box
    feature soon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will also not receive the support we need. The turnaround time for questions
    we ask will be slower than desirable, or the quality might be lower because stronger
    relationships get more attention.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our innovation will not be as accelerated as it could be if we have a partner
    who can speed up transformations and ensure we use best practices. The latter
    might also impact security and reliability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other areas for improvement could be a lack of cost efficiencies that an SME
    (subject matter expert) from the partner could spot or slower support response
    times because we are not on a premium partnership contract. AWS, Azure, and GCP
    have different response times depending on the support level we choose. A higher
    support level also comes with a higher cost; we must assess the benefits.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What indicators show that we are on our way to this anti-pattern or are already
    impacted by it? We’ll look at these next.
  prefs: []
  type: TYPE_NORMAL
- en: General indicators for this anti-pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Undocumented vendor onboarding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A potential sign of a weak relationship is if the vendor onboarding was never
    documented and has never gone through a formal endorsement process. That is a
    sign that the partner was never assessed to ensure they met our legal and compliance
    requirements. We might not know their entire service offering besides the SaaS
    solution we purchased. In this case, we might miss out on free training that can
    be provided to our teams. If we have never done the due diligence check, the vendor
    might not fit our objectives. We must assess whether we want to invest more time
    and budget into this partnership. If we think the product meets our needs but
    don’t get much support from the vendor, we need to reach out for conversations
    about what else they can bring to the table. We will only get roadmap insights
    if we have a **non-disclosure agreement** (**NDA**) with the provider. If there
    is no NDA in place, then that is a sign that we either don’t have meaningful discussions
    about achieving our business objectives or have a legal issue.
  prefs: []
  type: TYPE_NORMAL
- en: Passive behavior
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we think our business partner is passive, that is another sign of a weak
    relationship. The symptoms could show in a variety of ways. Their response time
    could be faster when we ask questions. They might not show up to meetings or be
    frequently late. We might receive negative feedback from stakeholders within our
    organization. The partner might never provide feedback about how we use their
    tool, or they don’t offer any roadmap insights. We can see that many aspects can
    hold back our journey if we don’t build strong relationships with our partners.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of cadence
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another indicator that we didn’t build a strong relationship is if there is
    no regular cadence with the vendor. We might not need a strong relationship for
    a small SaaS solution. Still, it is critical for a partnership with our CSP and
    vendors of our core CI/CD toolchain or security and observability products. A
    weak partnership can significantly impact our productivity, reliability, security,
    and ways of working. What can this cadence look like? Let’s start with our CSP.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s examine the key areas we want to address when establishing new partnerships
    or reassessing existing ones and the key benefits of strong partnerships.
  prefs: []
  type: TYPE_NORMAL
- en: Considerations for selecting a partner
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Considerations for selecting a CSP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We want to leverage the expertise of our partners, who could be CSPs, consultancies,
    or technology vendors:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Subject matter experts** (**SMEs**): They have specialized knowledge and
    a team of SMEs. First, we need to clearly understand our objectives. CSPs have
    technical SMEs for security, serverless, network reliability, and others. They
    also have SMEs for non-technical areas such as compliance, change management,
    training and education, or particular industries. They might offer classroom training
    or subscriptions to their online training platform as part of the support agreement.
    We discussed cadence meetings with account managers and solutions architects from
    our CSP when we assessed indicators of this anti-pattern. These recurring proactive
    sessions will help improve our architecture and utilize cloud native features
    effectively and efficiently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Partner ecosystem**: There is also an ecosystem around CSPs, and professional
    service organizations are part of that. There is also a significant community
    aspect. CSPs have community programs such as **Google Cloud Innovators**, **AWS
    Heroes and Community Builders**, and **Microsoft Most Valuable Professionals**.
    Individuals contribute content such as meetup presentations, blog posts, videos,
    and so on. If our team members are passionate about their cloud platform, they
    will use those information channels and continue their learning journey. Or, even
    better, they might contribute. When our employees contribute to the community,
    our brand name gets known within the cloud community. This will help the organization
    hire technical talent and be perceived as a technology expert in our industry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Considerations for selecting a consulting partner
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When looking for a new consulting partner, we need to assess their current
    expertise area and their strategic growth area:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Strategic alignment**: If we are looking for a **professional service partner**,
    we must ensure their strategic goals meet ours. If the consultancy wants to expand
    its AI and ML practice but we want to focus on IoT, then there is a misalignment.
    We need to validate the technology aspects where we need guidance, including CSP
    services, CI/CD, data capabilities, observability, and so on. We will check whether
    they have sufficient certifications for our CSP and customer success stories.
    The consultancy needs to sufficiently cover our time zone and potentially be on-site
    if this is required for workshops. If we want them to help us with a cultural
    DevSecOps transformation, we must validate and compare their cultural values with
    ours. We might need help with training, stakeholder engagement, or change management,
    and we need to validate those capabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Current focus areas**: Consultancies are often structured by practices. Individuals
    in a practice can go deeper in a particular area and help us with in-depth knowledge
    we don’t have in-house. We can also use team augmentation to upskill our team
    members, increase our maturity level, and help us avoid anti-patterns. Our partners’
    expertise can help us build momentum, gain speed, and achieve agility. Partners
    have tools and frameworks to help us accelerate our cloud native adoption. If
    we get help increasing our efficiencies, we can focus more on innovation and things
    that differentiate us from the competition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Considerations for selecting a software vendor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We must also perform a due diligence assessment if we are looking for a **software
    vendor partnership**. If innovation is at our forefront, we must select a vendor
    that invests enough in innovation and delivers fast innovation cycles:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Public information**: Websites such as **Forrester**, **G2**, and **Gartner**
    publish market research and indicate vendors’ innovation for a particular problem
    space. We don’t want to rely on one opinion; it is good to get several views.
    Vendors are usually prepared to give existing customer references and establish
    contact with an existing customer. That way, we can find out how a different organization
    adopted a product or service, their challenges, and how it helped them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Architecture fit**: We also need to validate the architecture fit. Does the
    product or product suite meet our integration needs? **Integration** to the source
    code repository is essential. For instance, if we have a least privilege scanning
    solution that can identify machine role policies that need to be updated. In this
    scenario, it would be very helpful to point us to the corresponding code and suggest
    the code change. That will save a lot of time if we have hundreds or thousands
    of Git repositories, and it saves us from going on a treasure hunt.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compliance and security**: If compliance and security are vital, we must
    validate that these requirements can be met. Is everything encrypted at rest and
    in transit? What data is stored? Is the data stored in my region? Are you **SOC2**
    or **PCI-compliant**? Do they meet our legal requirements, and can the jurisdiction
    be in the country we operate in? Do they meet our security requirements? For example,
    they only use strong cipher suites for encryption. Can they provide training,
    and do they have integration partners? These are just some examples of things
    we need to assess.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A technology vendor will know the best practices for their tools and how to
    use them without building up technical debt. They can also provide insights into
    their roadmap, which is helpful when we want to make strategic design decisions.
    For example, if a particular feature is being released soon, we can avoid custom
    code, or we might be able to join a preview program.
  prefs: []
  type: TYPE_NORMAL
- en: Improving our CSP partnership
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a few aspects to consider for improving a CSP partnership:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Different roles**: Depending on our support plan, there might be more than
    one contact person, and the concern areas will be split between them. If we are
    unsure who to contact for what particular area, we need to ask our CSP for clarity.
    That is important to make sure we get help promptly and can also set up cadence
    meetings with the right people in the room. For example, an **account manager**
    might oversee commercial agreements, legal sign-offs, or training plans. That
    would be our contact person whenever we need help with our support plan, want
    to ensure we get the best volume discounts, or need help finding a professional
    service organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The right contact for the right problem space**: When we set up a cadence
    with the account manager, we need the right people from our teams in those meetings.
    They are managers who manage commercials and can contact the legal or procurement
    teams with any questions or formalities. They can also help to structure bigger
    initiatives such as a migration program. Sometimes, there is a split between a
    **business account manager** and a technical or delivery manager. The **technical
    account manager** will then be the contact for more technical questions and high-level
    architecture questions. A potential further contact person could be a solution
    architect with all the experience to help us with architecture or engineering
    questions. They also have internal connections to SMEs for all cloud native services
    and industry experts. We can set up various cadence meetings/workshops.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cadence**: If we are rapidly building new architecture patterns or adopting
    new services, we will need frequent meetings with our **solutions architect**
    (**SA**), maybe weekly or twice weekly. The meetings with the account manager
    might only be required every two weeks. It is always good to talk the SA through
    your thinking because they might have ideas for approaching things differently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Example of an architecture cadence*: We always found it helpful to talk our
    SA through new patterns to challenge our thinking and get feedback. Sometimes,
    the patterns were so problem-space-specific or complex due to regulatory requirements
    that the SA had to add SMEs to our workshop. We will only get this benefit if
    we develop a strong partnership. The SA was our first point of contact whenever
    we had questions regarding the cloud services roadmap. Our organization was typically
    represented by the lead cloud architect and the lead cloud platform engineer in
    these meetings. To ensure those meetings and workshops are productive, having
    the right areas represented and not too many people is essential.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Those are some common aspects and assessment areas for a partnership evaluation.
    Bigger organizations typically have a third-party assessment framework in place,
    but not necessarily the small ones. Either way, **holistic due diligence** is
    required to make an informed decision. A business partner could also identify
    risks we have yet to spot and help us mitigate them. There are many reasons why
    our organization can benefit from good strategic partnerships. We know they are
    crucial for cloud native transformations, and we can now move on to the last anti-pattern
    in this chapter, which is a lack of CAF.
  prefs: []
  type: TYPE_NORMAL
- en: The cloud adoption runaway train
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*“It is not the strongest of the species that survive, nor the most intelligent,
    but the one most responsive* *to change.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*–* *Charles Darwin*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Everything around us changes all the time. Therefore, we need to adapt and
    adopt. Even though these two words have very different meanings, they quite often
    go hand in hand. **Adapt** means that we adjust or accommodate. **Adopt** means
    we take something as our own, such as a methodology that has been proven successful.
    A CAF helps us along our cloud journey. There is no official definition of a CAF,
    and every CSP has its own definition. Therefore, we will go with a definition
    that is precinct and hits the middle ground of the definition the major CSPs use:
    *A CAF provides best practices, tools, and guidance that help with effective cloud
    adoption. It addresses the different life cycle phases and ensures organizations
    achieve their business goals by leveraging cloud* *native technology.*'
  prefs: []
  type: TYPE_NORMAL
- en: The different CAFs of the main CSPs all have the same goal and want to help
    organizations plan and implement their cloud adoption journey. However, all frameworks
    have a different structure, approach, terminology, and specific guidance for the
    CSP services. We will discuss them in this section and also common anti-patterns.
    Then, we will close off with a summary and the key learnings from this chapter.
    Let’s dive into the CAFs now.
  prefs: []
  type: TYPE_NORMAL
- en: CAFs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS CAF
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'AWS organizes the CAF into six perspectives: business, people, governance,
    platform, security, and operations. It also outlines the **cloud transformation
    value chain**, represented by transformation domains. **Technology transformation**
    enables **process transformation**, which enables **organizational transformation**,
    which in turn enables **product transformation**. This leads to **business outcomes**,
    as outlined in the following figure.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – AWS CAF (source: https://d1.awsstatic.com/whitepapers/aws-caf-ebook.pdf)](img/B22364_02_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.5 – AWS CAF (source: https://d1.awsstatic.com/whitepapers/aws-caf-ebook.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: The previous diagram provides a crisp summary of the AWS CAF, which strongly
    emphasizes operational excellence and security, and it includes resource references
    such as the **AWS Well-Architected Framework**, **AIOps**, and **AWS** **Prescriptive
    Guidance**.
  prefs: []
  type: TYPE_NORMAL
- en: Azure CAF
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Azure CAF** is structured by the phases: define, plan, ready, adopt,
    secure, manage, and govern. The following diagram outlines the phases and how
    the framework uses methodologies to overcome blockers.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Azure CAF (source: https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/_images/caf-overview-graphic.png)](img/B22364_02_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.6 – Azure CAF (source: https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/_images/caf-overview-graphic.png)'
  prefs: []
  type: TYPE_NORMAL
- en: The CAF provides detailed governance and management guidance and narratives
    with a strong enterprise focus. It references **Azure Blueprints** and **Azure
    Policy** for governance and compliance. It also references the **Well-Architected
    Framework** and the **Microsoft Learn** training platform. It also references
    architecture templates, including best practices and considerations for scalability,
    availability, security, resilience, and other aspects of design.
  prefs: []
  type: TYPE_NORMAL
- en: GCP CAF
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **GCP CAF** is organized into four realms: lead, learn, scale, and secure.
    The lead realm states we need a top-down sponsor mandate and *bottom-up momentum
    from our teams’ cross-functional collaboration*. The GCP CAF emphasizes continuous
    learning and innovation and strongly focuses on leveraging data, ML, and AI capabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see all realms in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – GCP CAF (source: https://services.google.com/fh/files/misc/google_cloud_adoption_framework_whitepaper.pdf)](img/B22364_02_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.7 – GCP CAF (source: https://services.google.com/fh/files/misc/google_cloud_adoption_framework_whitepaper.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: Communalities between CAFs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All three CAFs have a similar coverage area and address the strengths of the
    individual CSP.
  prefs: []
  type: TYPE_NORMAL
- en: 'After comparing the different CAFs, two things become apparent:'
  prefs: []
  type: TYPE_NORMAL
- en: First, cloud adoption is complex, and there is much to consider. That is why
    some aspects of a CAF are often forgotten, resulting in an incomplete picture
    of our cloud adoption journey. Therefore, we might forget or insufficiently address
    aspects such as training, cultural impact, or change management. Those are common
    reasons why cloud adoption initiatives fail and need to be relaunched. That is
    not only a costly exercise but also can lead to people leaving the organization
    because of frustrations that are beyond their control.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, this chapter has already examined areas within the scope of a CAF, including
    strategy, learning, and the consequences of a lack of cloud knowledge, including
    governance gaps. In [*Chapter 1*](B22364_01.xhtml#_idTextAnchor015), we also examined
    some cultural aspects. Therefore, we will now focus on two strategic anti-patterns
    that we have not discussed yet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common anti-patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ignoring blueprints and CI/CD best practices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first variation of this anti-pattern is ignoring blueprints. This is a
    very common scenario that we have seen multiple times. Let’s illustrate this anti-pattern
    with a scenario and explore the individual steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The cloud adoption is initiated bottom-up. The leadership team understands it
    brings great opportunities but does not get involved in governance. However, enough
    rigor is in place to ensure that common frameworks, CI/CD tools, and programming
    languages are used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The product team starts developing the first service catalog items to ensure
    the code can be reused by other teams. CSPs use different terminology for this
    purpose. Instead of service catalog items, they might use terms such as *products*,
    *blueprints*, *solutions*, or *modules*. For clarity, we will use the terms *product
    catalog item* and *module*. That way, it is clear that they have been implemented
    by our organization and not a CSP. Service catalog items can include API gateways,
    database services, and many more.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The team was excited since they were much further ahead in cloud adoption than
    the rest of the company. After a while, the team encountered a deployment issue.
    The deployment was successful, but there was something wrong with the deployment
    artifact, and some of the API functions responded with errors. The Golang code
    base that was released was a newer version than the one that had been tested in
    UAT (user acceptance testing) before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A team member fixed the issue by releasing the latest tested version, and the
    application performed stable again. Luckily this could be fixed within minutes.
    During a root cause analysis, the team found that a build artifact from the development
    environment had somehow been released to production.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Everyone thought they were practicing good environment promotion, which meant
    build artifacts could only be deployed to the next higher environment after testing
    it. We could only deploy a build artifact from development to the test environment,
    not to UAT or production. It turned out the guardrails were not in place to enforce
    the use of predefined workflows that validate environment promotion. A new team
    joiner was unaware of this best practice and set up a custom CI/CD pipeline for
    the deployment. We cannot blame the new joiner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We could have protected him and our organization by leveraging guardrails, which
    was missed in this first incident. CAFs explain CI/CD best practices, including
    environment promotion.
  prefs: []
  type: TYPE_NORMAL
- en: The value of CAFs
  prefs: []
  type: TYPE_NORMAL
- en: CAFs provide comprehensive guidance on implementing CI/CD pipelines, emphasizing
    automated testing, integration, and deployment strategies to ensure seamless environment
    promotion and reliable software delivery.
  prefs: []
  type: TYPE_NORMAL
- en: The AWS CAF describes CI/CD and environment promotion preliminary in the two
    perspectives platform and operations. The Azure CAF covers environment promotion
    under the *ready*, *adopt*, and *manage* stages. The GCP CAF describes CI/CD in
    the *scale* realm. We will now explore what can happen if we do not follow operational
    best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Ignoring operational best practices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The second variation of this anti-pattern is ignoring operational best practices.
    We will look into a scenario that I have seen unfolding several times:'
  prefs: []
  type: TYPE_NORMAL
- en: The partner portal team is building a public-facing website for partner integrations.
    The solution utilizes service catalog items, including one for **Transport Layer
    Security** (**TLS**) certificate management.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We fast-forward and skip the next 13 months. The product owner for partner solutions
    receives a call. The TLS certificate expired, and a third party wants to know
    what happened to the website. The product owner is checking with the team.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They can confirm that the certificate expired but are unsure how it happened.
    The third-party certificate provider has a default 13-month expiry time for issued
    certificates. The TLS module did not support automatic third-party certificate
    rotation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unfortunately, this was not documented in the module documentation. It took
    a couple of days to get a new certificate issued and imported. For now, this was
    done manually to get out of this misery. Hopefully, there will be a better mechanism
    before the next expiry. I have observed this anti-pattern multiple times.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This scenario happens mainly when the security or network team mandates third-party
    certificates. This brings additional complexity compared to using cloud native
    generated certificates, as AWS does with the Amazon Certificate Manager.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, even if the CSP does not provide that capability, they will still describe
    best practices regarding certificate management and renewal in their CAF.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need to ensure we are across the holistic picture and put the required rigor
    and automation in place. We also want to ensure we read and understand CAF guidelines
    in conjunction with the Well-Architected Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Ignoring coding best practices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We are coming to the last anti-pattern variation in this chapter. We will go
    through an event that was somehow confronting and, at the same time, it made me
    feel sorry for the person who got more attention than they were hoping for:'
  prefs: []
  type: TYPE_NORMAL
- en: Years ago, I was consulting with a government department. The government department
    was rushing into the cloud. Some timelines had already been announced by the media,
    and things had to happen quickly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There was hardly any governance. About 80% of the project team were freelancers,
    including the interim CIO, and the rest were consultants. Of course, there was
    no training provided, exactly as we described in the knowledge outsourcing anti-pattern.
    There were no mandated patterns or best practices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The expectation was that all team members needed to be on-site for production
    releases. Communication was poor overall, and planned releases were sometimes
    not communicated to everyone. Therefore, critical team members missed out and
    received phone calls on a Sunday questioning why they were not there for the go-live
    when they didn’t even know about it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In other words, it was the wild west. No one in charge was interested in understanding
    the holistic picture, let alone in defining a CAF. Everyone just wanted to survive.
    When an organization falls into this reactive mode, it becomes very vulnerable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It became worse when freelancers were unhappy and resigned within a one-week
    notice period. New people turned up frequently. One day, the interim CIO came
    in very stressed. He got emails from the CSP in the middle of the night informing
    him that cloud credentials had been leaked on a public GitHub repository.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A phone call from the federal police who were concerned about the government’s
    security woke him up. As a result, every project team member had to sign an agreement
    that they do not leak confidential information, and they had to complete the paperwork
    for a police clearance report. He also explained what happened.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A JavaScript freelancer who had started two months ago wanted to showcase his
    skills on his personal public GitHub repository. Unfortunately, the developer
    forgot to remove the access keys from the code. The keys should never have been
    in the code in the first place. That morning, the federal police raided the developer’s
    home and confiscated all devices. There was no malicious intent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This happened solely because of a lack of guardrails, training, and best practices
    for CI/CD and security. All these areas are described in CAFs.
  prefs: []
  type: TYPE_NORMAL
- en: The development security best practices are described in the security pillar
    and also in the *ready*, *adopt*, and *manage* stages in the Azure CAF. The AWS
    CAF describes this from the security perspective and the GCP CAF includes it in
    the *security* realm.
  prefs: []
  type: TYPE_NORMAL
- en: 'This was a par excellence showcase of being stuck in the reactive mode, not
    stepping through the CAF and Well-Architected Framework-provided guidance steps,
    and just starting the cloud journey without enough consideration. This incident
    should not discourage us from going cloud native. It should encourage us to look
    at the bigger picture: the opportunities, the risks, making sensible decisions,
    but most of all, leverage the prescriptive guidance, including the CAF, and the
    Well-Architected Frameworks our CSP gives us.'
  prefs: []
  type: TYPE_NORMAL
- en: These frameworks are crucial because they provide structured guidance to ensure
    a smooth and efficient transition to the cloud. They help align our business objectives
    with our cloud strategy, ensuring that your investments deliver maximum value.
    A CAF offers best practices for managing security, compliance, and operational
    excellence, essential for maintaining robust and secure cloud environments.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered strategic aspects of our cloud adoption journey.
    We started with objectives and strategy. We called out that the cloud native strategy
    should be seen as an extension of the business strategy. We investigated bottom-up
    and bottom-down anti-patterns. We discussed how to get started on a migration
    strategy, including building a strawman, starting a business case, and gaining
    momentum. We explored the risks of knowledge outsourcing and how a lack of knowledge
    could result in mediocre quality, bringing reliability, security, compliance,
    and operational complexity challenges. We discussed the value of partnerships
    and, finally, we looked into the value of a CAF. By following a CAF, we can avoid
    common pitfalls, such as architecture gaps due to blueprint ignorance, deployment
    issues, and leaked secrets. The knowledge gained prepares us to explore the next
    problem space – rethinking governance, which we will do in the next chapter.
  prefs: []
  type: TYPE_NORMAL
