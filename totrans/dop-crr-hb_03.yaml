- en: '*Chapter 2*: Essential Skills for a DevOps Practitioner'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第二章*：DevOps 实践者的必备技能'
- en: The most common question heard from individuals looking to land their first
    DevOps role is, *What are the important skills?* The list of important skills
    is rather lengthy for a DevOps generalist, the type of role most common for individuals
    looking for their first role in DevOps. This chapter is geared toward individuals
    looking for their first role in DevOps. Individuals who already have careers in
    DevOps can skip this chapter or use it as a refresher.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些想要获得首个 DevOps 职位的人来说，最常听到的问题是，*什么是重要的技能？* 对于一个 DevOps 通才来说，重要技能的列表相当冗长，这也是大多数寻求第一份
    DevOps 工作的人所期望的角色。本章面向那些寻求第一份 DevOps 工作的人。已经有 DevOps 职业生涯的人可以跳过本章，或将其作为复习材料。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: Scripting, coding, and programming
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本编写、编码与编程
- en: Source code management
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码管理
- en: Infrastructure management
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施管理
- en: CI/CD concepts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI/CD 概念
- en: Soft skills
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软技能
- en: Cloud-native frameworks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云原生框架
- en: Beginner DevOps certifications
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初学者 DevOps 认证
- en: Scripting, coding, and programming
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本编写、编码与编程
- en: 'There are DevOps engineers who are highly skilled at programming. However,
    you don''t have to be a great programmer. To be a great DevOps engineer, debugging
    code, automation through scripting, and working in text-only terminals are also
    important skills. In this section, we will cover the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 DevOps 工程师非常擅长编程。然而，你不必成为一个优秀的程序员。要成为一名出色的 DevOps 工程师，调试代码、通过脚本实现自动化以及在仅有文本的终端中工作也是重要的技能。本节将涵盖以下内容：
- en: Navigating the command line
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览命令行
- en: Scripting
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本编写
- en: Modifying legacy code versus writing new code
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改遗留代码与编写新代码
- en: Navigating the command line
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览命令行
- en: Command-line navigation is possibly the most essential skill for anyone looking
    to get a job in the field of DevOps. Command line is a generic term that applies
    to a text-based interface. The most common command-line shell that comes with
    most Linux distributions is **Bash**. While having a basic knowledge of the usage
    of the command line is essential to land a job as a DevOps engineer, mastery of
    it can help you stand apart from other applicants. There is no way to master the
    terminal without making it a part of your regular daily routine. There are many
    well-written, resourceful blogs, articles, and cheat sheets that cover the command
    syntax. The focus of this section will be on techniques to quickly improve your
    comfort level when using the command line.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行导航可能是任何想要在 DevOps 领域找到工作的人的最基本技能。命令行是一个通用术语，指的是基于文本的界面。大多数 Linux 发行版默认提供的命令行外壳是
    **Bash**。虽然掌握基本的命令行使用知识对获得 DevOps 工程师职位至关重要，但精通命令行能帮助你在其他申请者中脱颖而出。没有哪种方法能够在不将终端作为日常常规工具的情况下精通它。许多写得很好的、内容丰富的博客、文章和备忘单都覆盖了命令语法。本节的重点将是如何通过技巧来快速提高使用命令行的舒适度。
- en: All navigation can be done through the command line and it is often much quicker.
    Even if you're not sure where you are, `pwd` will output the current path you
    are at in the terminal. If you would like to see what files and folders are in
    the current directory, use the `ls` command. To navigate to a particular folder,
    use the `cd` command. If you want to find a particular string of text in a text
    file, you can use the `grep` command. `grep` is case sensitive by default, but
    like most commands, there are flags that can be applied to change its behavior;
    for example, `grep - i` makes the search insensitive to case. If there are multiple
    results, you can pipe your results with `sort` to sort the results alphabetically,
    or even in reverse order.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所有导航操作都可以通过命令行完成，且通常更为迅速。即使你不确定当前所在的位置，`pwd` 命令也会输出你在终端中的当前路径。如果你想查看当前目录中的文件和文件夹，可以使用
    `ls` 命令。要进入特定的文件夹，使用 `cd` 命令。如果你想在文本文件中查找特定的字符串，可以使用 `grep` 命令。默认情况下，`grep` 是区分大小写的，但像大多数命令一样，可以使用标志来改变其行为；例如，`grep
    -i` 会使搜索不区分大小写。如果有多个结果，你可以使用 `sort` 将结果按字母顺序或反向顺序排序。
- en: '*Figure 2.1* shows the Bashterminal window, where some basic commands have
    been executed and output can be seen:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2.1* 显示了 Bash 终端窗口，已执行一些基本命令并显示了输出：'
- en: '![Figure 2.1 – Bash terminal with basic commands'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.1 – Bash 终端与基本命令'
- en: '](img/Figure_2.01_B18117.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.01_B18117.jpg)'
- en: Figure 2.1 – Bash terminal with basic commands
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – Bash 终端与基本命令
- en: As you can see in the preceding Bash terminal, there are some unique colors,
    the current directory is preceded by an arrow, and the branch that is checked
    out is shown for `git` folders. You can configure the appearance as well as setting
    aliases and custom functions within the `.bashrc` file.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前面的Bash终端中看到的，终端显示了独特的颜色，当前目录前有一个箭头，并且`git`文件夹中显示了当前检出的分支。你可以配置外观，也可以在`.bashrc`文件中设置别名和自定义函数。
- en: 'Pro Tip: Play Around and Have Fun'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 专业提示：多玩玩，享受其中的乐趣
- en: Learning about the terminal should be fun, and we will expand on it in the next
    section. Till then, google commands, create your own, and be creative! The power
    of the terminal comes from its flexibility; the terminal can be customized to
    fit your needs and most of this customization is done through the `.bashrc` file.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 学习终端应该是有趣的，我们将在下一部分深入探讨。到那时，先在谷歌上查找命令，创造属于自己的命令，发挥创意！终端的强大之处在于它的灵活性；终端可以根据你的需求进行定制，而大多数这种定制都是通过`.bashrc`文件完成的。
- en: 'The `.bashrc` file is the central area to set up aliases, functions, and customize
    the look and feel of your terminal. The `.bashrc` file is a shell script that
    loads when the terminal is loaded. If you are using Bash, you will have a `.bashrc`
    file, and a `.zshrc` file if you are using `zsh`. Within the `.bashrc` file, it
    is possible to do the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`.bashrc`文件是设置别名、函数以及自定义终端外观和感觉的核心区域。`.bashrc`文件是一个在终端加载时运行的Shell脚本。如果你使用的是Bash，你会有一个`.bashrc`文件，如果你使用的是`zsh`，则会有一个`.zshrc`文件。在`.bashrc`文件中，可以执行以下操作：'
- en: 'Load modules:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载模块：
- en: '[PRE0]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Modify an environment variable:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改环境变量：
- en: '[PRE1]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Activate a Python environment:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 激活Python环境：
- en: '[PRE2]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Set aliases:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置别名：
- en: 'Aliases are nicknames for commands, groups of commands, or scripts and can
    be added to the `.bashrc` file. Aliases are often created to make commonly used
    commands shorter. It is best practice to add aliases to a separate file called
    `.bash_aliases`, and then load `.bash_aliases` into `.bashrc`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 别名是命令、命令组或脚本的别名，可以添加到`.bashrc`文件中。别名通常用于将常用命令缩短。最佳实践是将别名添加到一个名为`.bash_aliases`的单独文件中，然后将`.bash_aliases`加载到`.bashrc`文件中：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If your list of aliases is short, you can add them directly to the `.bashrc`
    file:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的别名列表很短，你可以直接将它们添加到`.bashrc`文件中：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Aliases can also be used to call functions:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 别名也可以用来调用函数：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Another useful skill all DevOps engineers should have, and master, is the use
    of text editors within the terminal.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另一项所有DevOps工程师都应该掌握的有用技能是，在终端中使用文本编辑器。
- en: 'Text editors are command-line tools that allow you to directly edit files from
    the terminal window. Common flavors are vim, emacs, and nano. Most Linux distributions
    have vim installed by default. In the following example, we will show you how
    to edit your `.bashrc` file. To open your file in `vi`, type `vi </path/to/file>`.
    In the following example, the command was `sudo vi .zshrc`, which opens the .`zshrc`
    file in `vim` with sudo privileges:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 文本编辑器是命令行工具，可以直接在终端窗口中编辑文件。常见的有vim、emacs和nano。大多数Linux发行版默认安装了vim。在以下示例中，我们将向你展示如何编辑你的`.bashrc`文件。要在`vi`中打开文件，输入
    `vi </path/to/file>`。在以下示例中，命令是 `sudo vi .zshrc`，它以sudo权限打开`.zshrc`文件：
- en: '![Figure 2.2 – Bash terminal with the vi editor open'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.2 – 启动了vi编辑器的Bash终端](img/Figure_2.02_B18117.jpg)'
- en: '](img/Figure_2.02_B18117.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.02_B18117.jpg)'
- en: Figure 2.2 – Bash terminal with the vi editor open
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2 – 启动了vi编辑器的Bash终端
- en: At this point, the file is opened in read-only mode. To enter edit mode, type
    *I*. To make your change, enter *esc* followed by *w* to save the file and *q*
    to close the editor.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，文件已以只读模式打开。要进入编辑模式，输入 *I*。修改后，按 *esc* 再输入 *w* 保存文件，并按 *q* 关闭编辑器。
- en: Text editors are powerful but require some time to be mastered. If you need
    information on `vi` commands, you can find great resources on various online forums.
    A particular favorite of mine is [https://ryanstutorials.net/linuxtutorial/cheatsheetvi.php](https://ryanstutorials.net/linuxtutorial/cheatsheetvi.php).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 文本编辑器功能强大，但需要一定时间来掌握。如果你需要关于`vi`命令的信息，可以在各种在线论坛找到很棒的资源。我特别喜欢的一个是 [https://ryanstutorials.net/linuxtutorial/cheatsheetvi.php](https://ryanstutorials.net/linuxtutorial/cheatsheetvi.php)。
- en: Scripting
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脚本编写
- en: Scripts are something DevOps engineers must be capable of creating and maintaining.
    The secret to getting a DevOps job is being able to solve scripting problems,
    which means practice. There are several scripting languages currently used by
    DevOps engineers. No one of them is better than another; instead, each of them
    is best suited for distinct types of jobs.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本是 DevOps 工程师必须能够创建和维护的东西。获得 DevOps 工作的秘诀在于能够解决脚本问题，这意味着需要不断练习。目前 DevOps 工程师使用的脚本语言有多种，每种语言都有其最适合的工作类型，没有一种比另一种更好。
- en: 'Pro Tip: Google Is Your Best Friend when Learning a New Language'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 专业提示：在学习新语言时，谷歌是你最好的朋友
- en: If you are struggling with something, chances are someone else has already struggled
    with it, solved it, and written about it. Don't work harder; instead, work smarter
    and more efficiently.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在某个问题上遇到困难，很可能别人也曾遇到过这个问题，并且已经解决并写下了相关内容。不要做更辛苦的工作，而要做更聪明、更高效的工作。
- en: Python
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python
- en: 'Python is heavily used in infrastructure automation and provisioning and has
    become an all-purpose scripting language in DevOps. It is favored by many because
    it is easy to get started with. However, it gets exponentially more difficult
    as your proficiency progresses. The following is the most basic Python script
    (`helloworld.py`):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Python 在基础设施自动化和配置中被广泛使用，并且已成为 DevOps 中的全能脚本语言。它被许多人青睐，因为它容易入门。然而，随着你熟练度的提高，Python
    会变得更加复杂。以下是最基本的 Python 脚本（`helloworld.py`）：
- en: '![Figure 2.3 – hello_world.py'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.3 – hello_world.py'
- en: '](img/Figure_2.03_B18117.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.03_B18117.jpg)'
- en: Figure 2.3 – hello_world.py
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – hello_world.py
- en: Bash
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Bash
- en: 'Bash is the most used scripting language in the Unix/Linux environment and
    has a strong community that provides support. It is used to automate Linux servers
    around the world. The following is the most basic shell script (`helloworld.sh`):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Bash 是 Unix/Linux 环境中最常用的脚本语言，并且有一个强大的社区提供支持。它被用于全球 Linux 服务器的自动化。以下是最基本的 shell
    脚本（`helloworld.sh`）：
- en: '![Figure 2.4 – hello_world.sh'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.4 – hello_world.sh'
- en: '](img/Figure_2.04_B18117.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.04_B18117.jpg)'
- en: Figure 2.4 – hello_world.sh
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – hello_world.sh
- en: JavaScript
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JavaScript
- en: 'JavaScript is used as DevOps scripting to create network-centric applications.
    It is a lightweight DevOps scripting Language. JavaScript offers numerous advantages,
    including less server interaction, increased interactivity, immediate feedback
    to visitors, and richer interfaces. The following is the most basic JavaScript
    script (`helloworld.js`):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 用作 DevOps 脚本语言，用于创建以网络为中心的应用程序。它是一种轻量级的 DevOps 脚本语言。JavaScript 提供了许多优势，包括更少的服务器交互、更高的互动性、对访客的即时反馈以及更丰富的界面。以下是最基本的
    JavaScript 脚本（`helloworld.js`）：
- en: '![Figure 2.5 – hello_world.sh'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.5 – hello_world.sh'
- en: '](img/Figure_2.05_B18117.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.05_B18117.jpg)'
- en: Figure 2.5 – hello_world.sh
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – hello_world.sh
- en: Go
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Go
- en: 'Go was introduced in 2009 and has drastically changed the DevOps landscape
    since its inception. Built on C, Go was created to be readable by humans and scalable.
    The following is the most basic Go script:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Go 于 2009 年推出，并且自问世以来大大改变了 DevOps 的格局。Go 是基于 C 构建的，旨在便于人类阅读并且具有可扩展性。以下是最基本的
    Go 脚本：
- en: '![Figure 2.6 – hello_world.go'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.6 – hello_world.go'
- en: '](img/Figure_2.06_B18117.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.06_B18117.jpg)'
- en: Figure 2.6 – hello_world.go
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – hello_world.go
- en: 'Pro Tip: Focus on Learning One Language at a Time'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 专业提示：专注于一次学习一种语言
- en: You set yourself up for disappointment if you try to learn multiple coding languages
    simultaneously. Unless circumstances require you to learn a new language, get
    proficiency in one language before moving on to the next.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试同时学习多种编程语言，那么你注定会让自己失望。除非有特殊情况需要你学习新语言，否则先精通一种语言再转向下一种。
- en: 'There are tons of books and online resources you can choose from when learning
    new languages. A great way to practice is forking a project from GitHub and making
    changes to it. This is some of the most useful experience you can give yourself.
    If you would like to challenge yourself, you can try online sites designed specifically
    to prepare users for technical interviews, also offering a great way to upskill
    your coding game. Here are a couple of favorites:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习新语言时，你可以选择大量的书籍和在线资源。一个很好的练习方法是从 GitHub 上 fork 一个项目并进行修改。这是你可以给自己带来的一些最有用的经验。如果你想挑战自己，可以尝试一些专门为用户准备技术面试的在线网站，这也是提升编码技能的一个好方法。这里有几个受欢迎的推荐：
- en: 'LeetCode: [https://leetcode.com/](https://leetcode.com/)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 'LeetCode: [https://leetcode.com/](https://leetcode.com/)'
- en: 'AlgoExpert: [https://www.algoexpert.io/](https://www.algoexpert.io/)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 'AlgoExpert: [https://www.algoexpert.io/](https://www.algoexpert.io/)'
- en: Other sites built around the type of problems you may see in an interview exist.
    Coding challenge sites can also help tremendously to increase your chances of
    success.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些网站围绕你可能在面试中遇到的问题类型建立。编码挑战网站也能大大提高你成功的机会。
- en: Now that we have covered various scripting languages, we need to cover when
    to modify existing code and when to write new code.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了各种脚本语言，接下来需要讨论的是何时修改现有代码以及何时编写新代码。
- en: In this section, you learned about navigating text-based shells such as Bash,
    as well as how to modify existing files and create files using text editors within
    a shell. We also covered various scripting languages used by DevOps engineers
    and the best use cases for each.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你了解了如何在基于文本的 shell（如 Bash）中导航，以及如何使用文本编辑器修改现有文件和创建新文件。我们还介绍了 DevOps 工程师使用的各种脚本语言及其最佳使用场景。
- en: In the next section, we will cover version control and source code management.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论版本控制和源代码管理。
- en: Source code management
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源代码管理
- en: '`git`.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`git`。'
- en: Git
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git
- en: 'An astounding 87% of developers use `git` as their version control. Git is
    a distributed version control software initially designed by Linus Torvalds to
    manage the Linux kernel. The difference between `git` and `svn` is that the complete
    code history is stored on each individual node when using `git` versus a single
    source server when using `svn`. There are several things to consider when learning
    `git`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 令人吃惊的是，87% 的开发人员使用 `git` 作为他们的版本控制工具。Git 是一种分布式版本控制软件，最初由 Linus Torvalds 设计，用于管理
    Linux 内核。`git` 与 `svn` 的区别在于，使用 `git` 时，完整的代码历史会存储在每个独立节点上，而使用 `svn` 时，则是存储在单一的源服务器上。在学习
    `git` 时，需要考虑以下几个方面：
- en: '`git` versions available.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git` 可用版本。'
- en: Getting Started with Git
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 开始使用 Git
- en: 'Windows: [https://gitforwindows.org/](https://gitforwindows.org/)'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'Windows: [https://gitforwindows.org/](https://gitforwindows.org/)'
- en: 'macOS: [https://git-scm.com/download/mac](https://git-scm.com/download/mac)'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'macOS: [https://git-scm.com/download/mac](https://git-scm.com/download/mac)'
- en: 'Linux: [https://git-scm.com/download/linux](https://git-scm.com/download/linux)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'Linux: [https://git-scm.com/download/linux](https://git-scm.com/download/linux)'
- en: '**Second**: There are multiple branching strategies. It is recommended that
    you spend time learning and practice managing your own projects using various
    strategies. Some common strategies are defined as follows:'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第二**：有多种分支策略。建议你花时间学习并练习使用不同策略管理自己的项目。一些常见的策略定义如下：'
- en: '![](img/Figure_2.07_B18117.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_2.07_B18117.jpg)'
- en: Figure 2.7 – Basic git workflow
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – 基本的 git 工作流
- en: The basic `git` workflow has one branch, the main or *Master* branch. Developers
    commit directly to this branch and all deployments, regardless of the environment,
    are made from this branch. This is a workflow that is not recommended unless you
    need to get set up quickly or are working on a private side project.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的 `git` 工作流只有一个分支，即主分支或 *Master* 分支。开发人员直接向该分支提交代码，所有部署，无论是哪个环境，都是从该分支进行的。除非你需要快速设置或正在进行私人项目，否则不建议使用这种工作流。
- en: 'The following diagram is a graphical representation of the `git` feature branch
    workflow:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示为 `git` 特性分支工作流的图形表示：
- en: '![Figure 2.8 – Git feature branch workflow'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.8 – Git 特性分支工作流'
- en: '](img/Figure_2.08_B18117.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.08_B18117.jpg)'
- en: Figure 2.8 – Git feature branch workflow
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8 – Git 特性分支工作流
- en: The `git` feature branch workflow becomes necessary whenever there is more than
    one person working from the same code base. Both feature *A* and feature *B* can
    be created without the worry of affecting the other's ability to merge back to
    the *Master* branch.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 每当多人在相同代码库上工作时，`git` 特性分支工作流就变得必不可少。特性 *A* 和特性 *B* 都可以独立创建，而无需担心会影响到其他人的合并操作。
- en: '![Figure 2.9 – Git feature branch workflow with a Develop branch'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.9 – 带有 Develop 分支的 Git 特性分支工作流'
- en: '](img/Figure_2.09_B18117.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.09_B18117.jpg)'
- en: Figure 2.9 – Git feature branch workflow with a Develop branch
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9 – 带有 Develop 分支的 Git 特性分支工作流
- en: The `git` feature workflow with the *Develop* branch is one of the most popular
    branching strategies. The *Master* branch is always in a state that is ready to
    be deployed to production, and developers can work on their own features without
    worrying about merge conflicts from other developers.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 带有 *Develop* 分支的 `git` 特性工作流是最流行的分支策略之一。*Master* 分支始终保持在一个可以部署到生产环境的状态，开发人员可以独立进行特性开发，而无需担心其他开发人员的合并冲突。
- en: '`git` commands and there is no way to memorize them all. We have included two
    approaches to help you feel more confident when starting out.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git`命令有很多，几乎不可能记住所有。我们提供了两种方法来帮助你在刚开始时更有信心。'
- en: 'Add commonly used `git` commands as aliases to your `.bash_profile` file. The
    following is a snippet of code that can be added to your `.bashrc` file that combines
    three commands associated with `git` into a single `gp` alias:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 将常用的`git`命令作为别名添加到你的`.bash_profile`文件中。以下是可以添加到`.bashrc`文件中的代码片段，它将与`git`相关的三个命令合并成一个`gp`别名：
- en: '![Figure 2.10 – Git function example for .bashrc'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.10 – Git函数示例（.bashrc）'
- en: '](img/Figure_2.10_B18117.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.10_B18117.jpg)'
- en: Figure 2.10 – Git function example for .bashrc
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10 – Git函数示例（.bashrc）
- en: 'The preceding `gp` alias takes two parameters: `$1=file,` or the path of files
    to the stage, and `$2=commit message`. The following output shows what is seen
    when you execute the `gp` alias. Let''s break this down:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的`gp`别名有两个参数：`$1=file`，或待暂存文件的路径，`$2=commit message`。以下输出显示了执行`gp`别名时的结果。我们来分解一下：
- en: '`shell_favorites` is a local working directory tracked by `git`.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shell_favorites`是由`git`跟踪的本地工作目录。'
- en: The `git stage` command moves `README.md` into the local staging area.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git stage`命令将`README.md`文件移动到本地暂存区。'
- en: The `git commit –m` command commits the `README.md` file to the local repository
    with a commit message, which is `test100721` in our example.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git commit –m`命令将`README.md`文件提交到本地仓库，并附上提交信息，在我们的示例中提交信息是`test100721`。'
- en: The `git push` command pushes the changes that are in your local repository
    to the remote repository that `shell_favorites` is tracked to.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git push`命令将本地仓库中的更改推送到`git`所跟踪的远程仓库。'
- en: 'In the following figure, you can see the output the `gp` alias would result
    in:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，你可以看到执行`gp`别名时的输出结果：
- en: '![Figure 2.11 – git push terminal output'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.11 – git push终端输出'
- en: '](img/Figure_2.11_B18117.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.11_B18117.jpg)'
- en: Figure 2.11 – git push terminal output
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11 – git push终端输出
- en: Pretty sweet, no? Adding `git` aliases won't make you a better developer but
    it can simplify your life.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 相当不错，不是吗？添加`git`别名并不会让你成为更好的开发人员，但它确实能简化你的生活。
- en: 'My next secret to success with `git` for beginners is having a list of commonly
    used `git` commands close at hand at all times – a `git` cheat sheet. A favorite
    of mine is the one by the education group of GitHub: [https://education.github.com/git-cheat-sheet-education.pdf](https://education.github.com/git-cheat-sheet-education.pdf).'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我给初学者的成功秘诀之一是随时手边有一份常用的`git`命令清单——一个`git`备忘单。我最喜欢的是GitHub教育组提供的：[https://education.github.com/git-cheat-sheet-education.pdf](https://education.github.com/git-cheat-sheet-education.pdf)。
- en: SCM
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SCM
- en: Popular SCM tools include GitHub, GitL[ab, and Bitbucket.](https://www.github.com)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 流行的SCM工具包括GitHub、GitL[ab和Bitbucket。](https://www.github.com)
- en: '[Gi](https://www.github.com)tHub: [https://www.github.com](https://www.github.com)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[Gi](https://www.github.com)tHub: [https://www.github.com](https://www.github.com)'
- en: 'GitLab: [https://about.gitlab.com/](https://about.gitlab.com/)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 'GitLab: [https://about.gitlab.com/](https://about.gitlab.com/)'
- en: 'Bitbucket: [https://bitbucket.org/](https://bitbucket.org/)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 'Bitbucket: [https://bitbucket.org/](https://bitbucket.org/)'
- en: Each of these SCM tools has unique features to help improve developers' experiences
    and are designed to be user-friendly and easy to use. The reason these solutions
    tend to be easy to use is the rich UI each has developed for the user. You can
    use any of these tools for free by signing up on their websites! Regardless of
    the SCM tool you choose, the version control is still `git`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 每种SCM工具都有独特的功能，帮助改善开发人员的体验，并且设计上都非常用户友好且易于使用。这些解决方案之所以容易使用，是因为每个工具都为用户开发了丰富的UI。你可以通过在它们的网站上注册，免费使用这些工具！无论你选择哪个SCM工具，版本控制仍然是`git`。
- en: 'In the following table, we will compare the three most popular SCM tools available
    as of 2021:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下表中，我们将比较2021年最流行的三种SCM工具：
- en: '![Table 2.1 – SCM comparison'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '![表 2.1 – SCM 比较'
- en: '](img/Figure_2.Table_01.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.Table_01.jpg)'
- en: Table 2.1 – SCM comparison
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.1 – SCM 比较
- en: At the end of the day, there really is no bad choice as long as you are learning.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 到头来，只要你在学习，就没有什么选择是错误的。
- en: In this section, you learned about `git`, common `git` patterns, and common
    `git` commands. We also discussed options available for source code management
    software.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你了解了`git`、常见的`git`模式和常用的`git`命令。我们还讨论了源代码管理软件的可选项。
- en: In the next section, you will learn about infrastructure tools and techniques
    needed to be successful as a DevOps engineer.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，你将学习作为一名DevOps工程师所需的基础设施工具和技巧。
- en: Infrastructure management
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础设施管理
- en: 'Gartner defines IT infrastructure this way:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 高德纳（Gartner）这样定义 IT 基础设施：
- en: IT infrastructure is the system of hardware, software, facilities, and service
    components that support the delivery of business systems and IT-enabled processes.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: IT 基础设施是由硬件、软件、设施和服务组件组成的系统，支持业务系统和 IT 启用的过程交付。
- en: 'Infrastructure management can be broken down into three key stages: *capacity
    planning*, *infrastructure provisioning*, and *deployment,* as can be seen in
    the following diagram:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施管理可以分为三个关键阶段：*容量规划*、*基础设施配置* 和 *部署*，如以下图所示：
- en: '![Figure 2.12 – Infrastructure management stages'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.12 – 基础设施管理阶段'
- en: '](img/Figure_2.12_B18117.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.12_B18117.jpg)'
- en: Figure 2.12 – Infrastructure management stages
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12 – 基础设施管理阶段
- en: The first stage in infrastructure management is capacity planning, which will
    be covered next.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施管理的第一阶段是容量规划，接下来将对此进行详细讲解。
- en: Capacity planning
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容量规划
- en: Capacity planning is the first step in infrastructure management and is followed
    by provisioning and deployment. Several tools can help with collecting the data
    needed to accurately plan resources as collecting accurate data is crucial to
    do so. Tools used during capacity planning are Splunk, the **ELK** (**Elasticsearch,
    Logstash, Kibana**) Stack, and New Relic. Continuous capacity planning is required
    to scale up and scale down resources based on demand in production.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 容量规划是基础设施管理的第一步，随后是配置和部署。为了准确规划资源，收集准确的数据是至关重要的。容量规划中使用的工具包括 Splunk、**ELK**（**Elasticsearch,
    Logstash, Kibana**）栈和 New Relic。根据生产环境中的需求，持续的容量规划是必要的，以便根据需求自动扩展或缩减资源。
- en: Auto-scaling resources have two benefits, cost savings and better performance.
    When a resource is scaled down, it is removed from usage, which means it no longer
    incurs charges. When resources are scaled up, additional resources are added before
    performance degradation occurs.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 自动扩展资源具有两个好处：节省成本和提高性能。当资源被缩减时，它将不再被使用，从而不会产生费用。当资源被扩展时，额外的资源会在性能下降之前被添加进来。
- en: Infrastructure provisioning
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础设施配置
- en: After capacity numbers are successfully collected and analyzed, we can move
    on to infrastructure provisioning. Provisioning involves the creation, allocation,
    and deletion of infrastructure resources based on the derived capacity numbers
    from capacity planning. Infrastructure resources include servers, containers,
    storage, networks, IPs, and load balancers that can be created and managed on
    cloud service providers such as AWS, Azure, GCP, or on-premises.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功收集和分析了容量数据后，我们可以进入基础设施配置阶段。配置包括根据容量规划得出的容量数据，创建、分配和删除基础设施资源。基础设施资源包括服务器、容器、存储、网络、IP
    和负载均衡器，这些都可以在 AWS、Azure、GCP 等云服务提供商或本地部署的环境中创建和管理。
- en: A DevOps engineer needs to know how to manage infrastructure resources in the
    cloud and on-premises environments depending on the company's architecture. In
    the following examples, you will be shown boilerplate code for creating AWS EC2
    instances using CloudFormation, Terraform, and Ansible.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 工程师需要了解如何根据公司架构在云环境和本地环境中管理基础设施资源。在接下来的示例中，您将看到用于通过 CloudFormation、Terraform
    和 Ansible 创建 AWS EC2 实例的模板代码。
- en: 'If the organization is managing resources on AWS, then AWS CloudFormation may
    be used to automate the creation/allocation/deletion of infrastructure resources.
    The following is a boiler template for CloudFormation used to provision an EC2
    instance:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果组织在 AWS 上管理资源，则可以使用 AWS CloudFormation 来自动化基础设施资源的创建/分配/删除。以下是用于配置 EC2 实例的
    CloudFormation 模板示例：
- en: '![Figure 2.13 – CloudFormation example'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.13 – CloudFormation 示例'
- en: '](img/Figure_2.13_B18117.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.13_B18117.jpg)'
- en: Figure 2.13 – CloudFormation example
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.13 – CloudFormation 示例
- en: 'To learn more about CloudFormation, visit [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html).
    If your organization is managing resources across multiple cloud services, providers
    such as AWS, Azure, GCP, and Terraform can be used to automate the creation/allocation/deletion
    of infrastructure resources. The following is a Terraform file that could be used
    to provide an EC2 instance:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 CloudFormation 的信息，请访问 [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html)。如果您的组织在多个云服务中管理资源，可以使用
    AWS、Azure、GCP 和 Terraform 等提供商来自动化基础设施资源的创建/分配/删除。以下是可以用来提供 EC2 实例的 Terraform
    文件：
- en: '![Figure 2.14 – Terraform example'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.14 – Terraform 示例'
- en: '](img/Figure_2.14_B18117.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.14_B18117.jpg)'
- en: Figure 2.14 – Terraform example
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.14 – Terraform 示例
- en: 'Ansible can also be used to provide resources spread across various environments
    both on-premises and in the cloud. The following example will create an EC2 instance
    with the following variables passed in: `MY_KEY`, `EC2_TYPE`, `IMAGE`, `GROUP`,
    `COUNT`, and `VPC_SUBNET`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 还可以用于提供分布在各种环境中的资源，包括本地和云端。以下示例将在传入的变量 `MY_KEY`、`EC2_TYPE`、`IMAGE`、`GROUP`、`COUNT`
    和 `VPC_SUBNET` 下创建一个 EC2 实例：
- en: '![Figure 2.15 – Ansible example'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.15 – Ansible 示例'
- en: '](img/Figure_2.15_B18117.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.15_B18117.jpg)'
- en: Figure 2.15 – Ansible example
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.15 – Ansible 示例
- en: Now, we will talk about deployment.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将讨论部署。
- en: Deployment
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署
- en: After infrastructure has been provisioned, proceed to the deployment stage.
    Deployment involves installing, configuring, releasing, and managing software
    services on the servers or containers that serve the production workload. Deployment
    is a process that occurs within the servers or containers that are created or
    allocated during the automated provisioning of infrastructure resources. A DevOps
    engineer can use automation tools such as Chef, Ansible, and Salt to automate
    the deployment of software services.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在基础设施已配置完毕后，进入部署阶段。部署涉及在服务器或容器上安装、配置、发布和管理软件服务，这些服务器或容器用于承载生产工作负载。部署是在自动化配置基础设施资源时创建或分配的服务器或容器内部进行的过程。DevOps
    工程师可以使用像 Chef、Ansible 和 Salt 这样的自动化工具来自动化软件服务的部署。
- en: CI/CD concepts
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI/CD 概念
- en: '**Continuous Integration** (**CI**) and **Continuous Delivery** (**CD**) are
    synonymous with DevOps. This is because every practice discussed in [*Chapter
    1*](B18117_01_ePub.xhtml#_idTextAnchor013), *Career Paths* – plan, code, build,
    test, release, deploy, and operate – is included in the infinite CI/CD loop, as
    shown in *Figure 2.16*:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）和**持续交付**（**CD**）是与 DevOps 同义的。这是因为在[*第1章*](B18117_01_ePub.xhtml#_idTextAnchor013)《职业路径》中讨论的每一项实践——计划、编码、构建、测试、发布、部署和运维——都包含在无限的
    CI/CD 循环中，如*图 2.16*所示：'
- en: '![Figure 2.16 – Infinite CI/CD loop'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.16 – 无限 CI/CD 循环'
- en: '](img/Figure_2.16_B18117.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.16_B18117.jpg)'
- en: Figure 2.16 – Infinite CI/CD loop
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.16 – 无限 CI/CD 循环
- en: Let's first examine CI and the related practices and tools associated with it.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先探讨持续集成（CI）以及与之相关的实践和工具。
- en: Continuous integration
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续集成
- en: Continuous integration is the process of merging code changes from multiple
    developers into a single branch on a regular and frequent basis. To do this effectively,
    you need some form of automation that builds your code and executes a battery
    of tests against it. CI servers help to effectively integrate your code using
    CI pipelines.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成是将多个开发人员的代码更改定期且频繁地合并到单一分支的过程。为了有效地做到这一点，您需要某种形式的自动化工具来构建您的代码并执行一系列测试。CI
    服务器帮助通过 CI 流水线有效地集成您的代码。
- en: 'After a developer makes a change, code changes are committed to a source code
    management system by using `git`. The CI server has a built-in listener (hook)
    to trigger a build whenever code is committed. The pipeline creates a new build
    and runs a battery of tests against the build. The tests include static code analysis,
    dynamic code analysis, secret detection, and vulnerability scans, as well as functional
    and integration tests. The following figure shows how a CI server interacts with
    several aspects of the development life cycle:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发人员进行更改后，代码更改会通过 `git` 提交到源代码管理系统。CI 服务器具有内置的监听器（钩子），当代码被提交时，它会触发构建。流水线创建一个新的构建，并对构建执行一系列测试。这些测试包括静态代码分析、动态代码分析、秘密检测、漏洞扫描以及功能测试和集成测试。下图展示了
    CI 服务器如何与开发生命周期的多个方面进行交互：
- en: '![Figure 2.17 – CI pipeline'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.17 – CI 流水线'
- en: '](img/Figure_2.17_B18117.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.17_B18117.jpg)'
- en: Figure 2.17 – CI pipeline
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Continuous integration servers include Jenkins, **Travis CI**, **CircleCI**,
    and **GitLab**.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Each of these offers similar functionality with slight differences in the user
    interface and the language required to write the pipeline.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first CI software we will discuss is the most widely used, Jenkins. Jenkins
    has a large community and many features due to it being open source, which is
    why it is also free to use. Some drawbacks to Jenkins are the overhead to maintain
    it as well as a complex pipeline design. Jenkins pipelines use **Groovy**, which
    is an offshoot of Java. The following is the controller-agent architecture used
    with Jenkins CI:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.18 – Jenkins architecture'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.18_B18117.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.18 – Jenkins architecture
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: GitLab
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'GitLab is both an SCM and CI tool. GitLab CI is new as of 2014, but its user
    base has grown exponentially since its release. GitLab CI uses the runner concept,
    which means each job runs in its own container-based executor. It offers a wide
    range of security tools. It can be difficult to manage if you run it on-premises.
    You can see in the following diagram that there are many servers that need to
    be managed and configured. However, GitLab also offers a **Software as a Service**
    (**SaaS**) option for smaller companies looking to get started more quickly. GitLab
    is YML-based, making it quite easy to write and understand pipelines. The following
    architecture diagram is one viable option to implement GitLab within an organization:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.19 – GitLab architecture'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.19_B18117.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.19 – GitLab architecture
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Continuous delivery
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Continuous delivery is an extension of continuous integration. After the build
    stage, code changes are delivered to higher environments such as stage, test,
    preprod, and prod. With continuous delivery, an automated release process must
    be in place as well. The following diagram shows the CI server stages identified
    as being a CI or CD task:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.20 – CI/CD pipeline'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.20_B18117.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.20 – CI/CD pipeline
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Continuous integration and continuous delivery are advanced skills that you
    will gain over time. If you are looking for entry-level DevOps engineering roles,
    chances are they are not going to require you to have practical experience with
    CI/CD. However, it will be expected that you are able to discuss it and show an
    interest in it as it will likely be a large portion of your job. A good way to
    get started with CI/CD is to incorporate a pipeline into one of your code repositories.
    Have fun learning!
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Cloud-native frameworks
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud-native is an approach to software development that leverages the capabilities
    of the cloud, both public and private. DevOps engineers will be involved in the
    use of cloud-native technologies in any career they choose, making it a very important
    and sought-after skill.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: 'The Cloud Native Computing Foundation''s (CNCF) Cloud-Native Definition:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Cloud-native technologies allow everyone to use immutable technologies with
    modern environments. Containers, service meshes, microservices, immutable infrastructure,
    and declarative APIs personify this approach and enable independent applications
    that are fault-tolerant and easy to manage. With automation, they enable engineers
    to make frequent changes with little disruption.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生技术使每个人都能在现代环境中使用不可变技术。容器、服务网格、微服务、不可变基础设施和声明式 API 体现了这一方法，并使得独立的应用程序具有容错能力且易于管理。通过自动化，它们使工程师能够在几乎不干扰的情况下频繁更改。
- en: Cloud-native has several advantages, including faster development times and
    the ability to respond to customers more quickly.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生有多个优点，包括更快的开发时间和更快速响应客户的能力。
- en: Containers
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器
- en: 'A container is a lightweight purpose-built application that has been packaged
    with all the required dependencies for runtime so it can easily be run on any
    operating system in any environment with few changes needed. Multiple containers
    can run on the same machine while running as segmented processes in the user space.
    Containers take up less space than VMs, can handle more applications, and require
    fewer VMs and operating systems. The following is a diagram that compares the
    infrastructure needed for multiple VMs versus multiple containers:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是一种轻量级的、专门构建的应用程序，它已经打包了所有运行时所需的依赖项，因此可以在任何操作系统和任何环境中运行，所需的更改很少。多个容器可以在同一台机器上运行，并作为用户空间中的分段进程运行。容器占用的空间比虚拟机少，可以处理更多的应用程序，并且需要更少的虚拟机和操作系统。以下是比较多个虚拟机与多个容器所需基础设施的图示：
- en: '![Figure 2.21 – Container and VM comparison'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.21 – 容器与虚拟机比较'
- en: '](img/Figure_2.21_B18117.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.21_B18117.jpg)'
- en: Figure 2.21 – Container and VM comparison
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.21 – 容器与虚拟机比较
- en: Docker exercise
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker 练习
- en: In the following exercise, we will go through a basic Docker example, which
    can be done on your own computer.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，我们将通过一个基本的 Docker 示例，这个示例可以在你的计算机上完成。
- en: 'The steps are as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤如下：
- en: 'Follow this tutorial to install Docker on your machine: [https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/).'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照此教程在你的机器上安装 Docker：[https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/)。
- en: 'Create a Dockerfile:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 Dockerfile：
- en: '[PRE6]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add content to the Dockerfile using the `vi` editor:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `vi` 编辑器向 Dockerfile 添加内容：
- en: '![Figure 2.22 – Dockerfile'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.22 – Dockerfile'
- en: '](img/Figure_2.22_B18117.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.22_B18117.jpg)'
- en: Figure 2.22 – Dockerfile
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.22 – Dockerfile
- en: After you have added the previous four lines to your file, make sure to save
    the file using `:w` and then exit `vi` using `:q`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在将前四行添加到文件后，确保使用 `:w` 保存文件，然后使用 `:q` 退出 `vi`。
- en: 'The following is the Docker image:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Docker 镜像：
- en: '![Figure 2.23 – Docker images'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.23 – Docker 镜像'
- en: '](img/Figure_2.23_B18117.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.23_B18117.jpg)'
- en: Figure 2.23 – Docker images
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.23 – Docker 镜像
- en: If you would like to see what exactly is happening during the build, you can
    omit the `–- quiet` command. After the image is built and tagged, you can see
    that the base alpine image along with the DevOps book image is available.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看构建过程中究竟发生了什么，可以省略 `--quiet` 命令。镜像构建并打标签后，你可以看到基础的 alpine 镜像以及 DevOps 书籍镜像可用。
- en: 'Run your container with the interactive terminal command:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用交互式终端命令运行你的容器：
- en: '![Figure 2.24 – interactive terminal command'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.24 – 交互式终端命令'
- en: '](img/Figure_2.24_B18117.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.24_B18117.jpg)'
- en: Figure 2.24 – interactive terminal command
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.24 – 交互式终端命令
- en: The `–it` command runs the container with an interactive terminal, meaning a
    terminal session for the container will be opened, allowing you to interact with
    the container.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`–it` 命令以交互式终端方式运行容器，这意味着会为容器打开一个终端会话，允许你与容器进行交互。'
- en: 'Stop and remove all containers and images from your machine:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止并删除你机器上的所有容器和镜像：
- en: '![Figure 2.25 – Docker image removal'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.25 – Docker 镜像删除'
- en: '](img/Figure_2.25_B18117.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.25_B18117.jpg)'
- en: Figure 2.25 – Docker image removal
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.25 – Docker 镜像删除
- en: In this chapter, you learned about containers and the role they play in DevOps.
    If you followed along with the exercise, you will have created a Dockerfile, created
    a Docker image, and run the Docker image on your computer! Hopefully, this has
    made you interested in continuing to learn more about Docker as the rabbit hole
    goes deep!
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了容器以及它们在 DevOps 中所扮演的角色。如果你跟着练习走，你将会创建一个 Dockerfile，创建一个 Docker 镜像，并在你的计算机上运行
    Docker 镜像！希望这能激发你继续深入学习 Docker，因为这是一条深不见底的兔子洞！
- en: Microservice architecture
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微服务架构
- en: Before looking at the desired architecture, we'll cover other dated architectures.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看所需架构之前，我们将介绍其他过时的架构。
- en: Monolithic
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单体架构
- en: We will first cover the monolithic architecture, which shares a single code
    base and database. Because nothing is separate, everything must be released/deployed
    at the same time, which leads to long lead times between customer requests and
    them making it to production. I have worked at several companies and every one
    of them has had monolithic applications. There is a good chance you will run across
    this in your career.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先介绍单体架构，它共享单一的代码库和数据库。由于没有任何分离，所有内容都必须同时发布/部署，这导致了客户请求和生产上线之间的长时间延迟。我曾在多家公司工作，每一家公司都有单体应用。很有可能你在职业生涯中会遇到这种情况。
- en: Service-oriented
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 面向服务的架构
- en: '**Service-oriented architecture** (**SOA**) was a step in the right direction
    – it broke code down by services, which decreased the effort and time it took
    to get changes to production. Service-oriented architecture is prone to similar
    problems that a monolithic architecture has, such as interdependencies that require
    the entire application to be rebuilt even when a single service is checked in.
    Most of the companies I have worked with have had applications that use SOA.'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '**面向服务的架构** (**SOA**) 是朝着正确方向迈出的第一步——它通过服务拆分代码，从而减少了将更改部署到生产环境所需的努力和时间。面向服务的架构容易遇到与单体架构类似的问题，例如依赖关系，要求即使是一个服务进行修改，也需要重建整个应用。我曾与多家公司合作，它们的应用都使用了
    SOA。'
- en: Microservice
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 微服务
- en: Microservice architecture has exploded in popularity due to large tech giants
    such as Amazon, Netflix, and Google publishing success stories about its use.
    The key differences between SOA and microservices are the communication protocols,
    storage, and size. Firstly, microservices use a language-agnostic protocol to
    communicate with the UI, resulting in a higher number of remote calls but also
    much higher fault tolerance. Secondly, each microservice has its own storage/database,
    which means each microservice can be designed with the right-fit database for
    its needs versus using the same database that is used for the entire application.
    Lastly, the size and lack of interdependence are what really separates a microservice
    from an SOA. A microservice can be deployed at any time and have no effect on
    other components. SOA shares a database and individual services still maintain
    some dependencies, which does not allow for the deployment of the service individually.
    Most companies are striving for a microservice architecture, which is why it is
    a key skill to have.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构因大型科技巨头如亚马逊、Netflix 和谷歌发布了其成功案例而受到广泛关注。SOA 和微服务的关键区别在于通信协议、存储和规模。首先，微服务使用与语言无关的协议与
    UI 进行通信，虽然导致更多的远程调用，但也大大提高了容错性。其次，每个微服务都有自己的存储/数据库，这意味着每个微服务可以为其需求设计合适的数据库，而不是使用整个应用程序共享的数据库。最后，规模和缺乏相互依赖性是微服务与
    SOA 之间的真正区别。微服务可以随时部署，而不会影响其他组件。SOA 共享数据库，各个服务之间仍然存在一定的依赖关系，这使得无法单独部署某个服务。大多数公司都在努力实现微服务架构，这也是一个非常关键的技能。
- en: 'In the following diagram, you can see how monolithic, SOA, and microservice
    architecture compare:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，您可以看到单体架构、SOA 和微服务架构的对比：
- en: '![Figure 2.26 – Architecture comparison'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.26 – 架构对比'
- en: '](img/Figure_2.26_B18117.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.26_B18117.jpg)'
- en: Figure 2.26 – Architecture comparison
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.26 – 架构对比
- en: Next, we will move on and discuss the importance of soft skills for DevOps engineers.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论软技能对于 DevOps 工程师的重要性。
- en: Soft skills
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软技能
- en: Soft skills are defined as *personal attributes that enable someone to interact
    effectively and harmoniously with other people*. The tides are changing, and DevOps
    engineers can no longer expect to succeed solely based on technical abilities.
    The following are a few of the most important soft skills for a DevOps engineer.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 软技能被定义为*能够使一个人有效且和谐地与他人互动的个人特质*。潮流正在发生变化，DevOps 工程师不能再仅仅依赖技术能力来取得成功。以下是 DevOps
    工程师最重要的几项软技能。
- en: Empathy
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 同理心
- en: With regard to DevOps, empathy is the ability to understand coworkers' and clients'
    points of view, or rather, the ability to view a situation from someone else's
    shoes. Approach your colleagues with a calm demeanor. This will lead to a much
    more pleasant work environment where new ideas flourish. If your idea differs
    from your colleague's or client's, start with positive feedback about their idea
    and work your way on to what you disagree with. Developing empathy with your coworkers
    ensures everyone's ideas are heard and issues that may be present can be resolved.
    Developing empathy with clients ensures all feedback is captured and a satisfactory
    end solution is reached.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 中，同理心是指理解同事和客户观点的能力，或者说是站在他人立场看问题的能力。以冷静的态度与同事沟通，这将有助于创造一个更愉快的工作环境，使新想法得以蓬勃发展。如果你的想法与同事或客户的不同，可以先对他们的观点给予积极反馈，然后再表达你的不同意见。与同事培养同理心确保每个人的想法都能被听到，存在的问题也能够得到解决。与客户培养同理心可以确保所有反馈都被采纳，最终达成令人满意的解决方案。
- en: Teamwork
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 团队合作
- en: Working in a team setting allows for multiple sets of eyes to view code at the
    same time. Working together ensures everyone remains on the same page and that
    a coherent product is delivered.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在团队合作中，多个视角能够同时审视代码。协作可以确保每个人都保持一致，最终交付一个连贯的产品。
- en: Adaptability
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 适应能力
- en: Tech is continuously changing and, as a DevOps engineer, you must prove you
    are good at changing gears, whether it be learning a new language or quickly shifting
    priorities. During an interview, you can discuss how you are learning a new programming
    language or how you have partnered with various departments while solutioning
    your last project. If you are unwilling to change, you will not succeed in DevOps.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 技术不断变化，作为一名 DevOps 工程师，你必须证明自己能够快速转换思路，无论是学习一门新语言还是迅速调整优先级。在面试中，你可以讨论自己如何学习一门新的编程语言，或者如何在解决上一个项目时与不同部门合作。如果你不愿意改变，你在
    DevOps 中不会成功。
- en: Good communication
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 良好的沟通能力
- en: Good communication includes everything from in-person conversation to Slack
    messages. As a DevOps engineer, you will likely be working with team members who
    are fully remote, in different time zones, and coming from different cultures.
    So, you must be able to communicate effectively in each of these cases. Remember,
    people are busy, so pick the method that is going to be most efficient and effective.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的沟通包括从面对面的交流到 Slack 消息的各种方式。作为一名 DevOps 工程师，你可能需要与完全远程办公的团队成员合作，他们可能处于不同的时区并且来自不同的文化背景。因此，你必须能够在这些情况下有效沟通。记住，人们都很忙，所以选择最有效和高效的沟通方式。
- en: Without strong soft skills, it will be difficult to land a job. DevOps is a
    team sport that requires you to collaborate with many different people in an environment
    that changes quickly. There is no room for drama or ego; everyone's opinion matters,
    and you need to respect that.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有强大的软技能，找工作将会非常困难。DevOps 是一项团队运动，需要你与不同的人合作，在快速变化的环境中适应。没有戏剧性冲突或自我膨胀的空间；每个人的意见都很重要，你需要尊重这些意见。
- en: Beginner DevOps certifications
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初级 DevOps 认证
- en: 'Like other industries, DevOps has seen an increase in the number of certifications
    that are available to practitioners. Certificates are a great way to showcase
    the knowledge you have, but they do not replace experience and are not required
    or mandatory to get a job as a DevOps engineer. DevOps certifications can help
    you stand apart from other candidates during the interview process. They also
    show your desire to continuously learn. When it comes to review time, you can
    use new certifications you have received since your last review as leverage for
    more merit. The following is a list of different certificates you can opt for:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 和其他行业一样，DevOps 的认证数量也在不断增加。证书是展示你知识的好方式，但它们无法替代经验，也不是获得 DevOps 工程师职位的必需条件。DevOps
    认证可以帮助你在面试过程中脱颖而出，还能展示你持续学习的欲望。当到达绩效评估时，你可以利用自上次评估以来获得的新认证作为争取更多成绩的筹码。以下是你可以选择的不同证书列表：
- en: AWS certifications
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS 认证
- en: 'AWS offers a few entry-level certifications for DevOps engineers, starting
    with the AWS Cloud Practitioner certification, which requires about 6 months of
    hands-on experience with AWS. After you finish your AWS Cloud Practitioner exam,
    you can begin preparing for the AWS Associate Architect exam. The following are
    the certifications offered:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 提供了一些针对 DevOps 工程师的入门级认证，从 AWS 云实践者认证开始，这需要大约 6 个月的 AWS 实操经验。完成 AWS 云实践者考试后，你可以开始为
    AWS 助理架构师考试做准备。以下是提供的认证：
- en: AWS Cloud Practitioner ([https://aws.amazon.com/certification/certified-cloud-practitioner/](https://aws.amazon.com/certification/certified-cloud-practitioner/))
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 云实践者 ([https://aws.amazon.com/certification/certified-cloud-practitioner/](https://aws.amazon.com/certification/certified-cloud-practitioner/))
- en: AWS Associate Architect ([https://aws.amazon.com/certification/certified-solutions-architect-associate/](https://aws.amazon.com/certification/certified-solutions-architect-associate/))
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 助理架构师 ([https://aws.amazon.com/certification/certified-solutions-architect-associate/](https://aws.amazon.com/certification/certified-solutions-architect-associate/))
- en: Google Cloud certifications
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Google Cloud 认证
- en: For Google, there is no generic beginner certification, but the Associate Cloud
    Engineer certification is a good introduction to GCP.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Google，并没有通用的初级认证，但助理云工程师认证是进入 GCP 的一个良好入门。
- en: Associate Cloud Engineer ([https://cloud.google.com/certification/cloud-engineer](https://cloud.google.com/certification/cloud-engineer))
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 助理云工程师 ([https://cloud.google.com/certification/cloud-engineer](https://cloud.google.com/certification/cloud-engineer))
- en: Azure certifications
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure 认证
- en: For Azure, there is a fundamentals certification that covers a lot of the basics.
    There are several more, but we will cover more cloud certifications in the *Specialized
    competencies* section in the next chapter.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Azure，存在一个基础认证，涵盖了很多基础内容。还有其他多个认证，但我们将在下一章的 *专业能力* 部分介绍更多云认证。
- en: Fundamentals ([https://docs.microsoft.com/en-us/learn/certifications/exams/az-900](https://docs.microsoft.com/en-us/learn/certifications/exams/az-900))
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 基础知识 ([https://docs.microsoft.com/en-us/learn/certifications/exams/az-900](https://docs.microsoft.com/en-us/learn/certifications/exams/az-900))
- en: Other resources
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他资源
- en: For beginner content, there are a lot of courses from Udemy, EdX, and Coursera
    as well, depending on the specific areas you are interested in. Certifications
    that cover Docker, Terraform, and Kubernetes, as well as the advanced cloud specialties
    and professional certifications, will be covered in the following chapter.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 对于初学者内容，Udemy、EdX 和 Coursera 上有许多课程，具体取决于你感兴趣的领域。涵盖 Docker、Terraform 和 Kubernetes
    的认证，以及高级云专业认证和职业认证，将在下一章中讲解。
- en: Summary
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned the basic skills required to succeed as an entry-level
    DevOps engineer. The skills included navigation of a text-only terminal such as
    Bash, automation using various scripting languages, and understanding Git and
    source code management. You also learned about the basics of infrastructure management
    tools such as Ansible and Terraform, as well as gaining an understanding of CI
    and CD and pipelines.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了成为初级 DevOps 工程师所需的基本技能。这些技能包括操作仅文本终端如 Bash，使用各种脚本语言进行自动化，以及理解 Git 和源代码管理。你还了解了
    Ansible 和 Terraform 等基础设施管理工具的基础知识，并获得了对 CI、CD 和流水线的基本理解。
- en: In the next chapter, you will dive deeper into the skills required for various
    DevOps specialty roles.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将更深入地了解各类 DevOps 专业角色所需的技能。
