["```\nadmin@myhome:~$ docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres\n```", "```\nadmin@myhome:~$ docker run -p 8080:80 -v /your/webpage:/usr/share/nginx/html:ro -d nginx\n```", "```\nadmin@myhome:~$ docker run -p 8080:80 -v ./config/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx\n```", "```\nadmin@myhome:~$ docker run -d ubuntu while true; do sleep 1; done\n```", "```\nadmin@myhome:~$ docker run -d ubuntu sleep infinity\n```", "```\nadmin@myhome:~$ docker run -d ubuntu tail -f /dev/null\n```", "```\nadmin@myhome:~$ docker exec -it container_name /bin/bash\n```", "```\nadmin@myhome:~$ docker image prune\nDeleted Images:\ndeleted:\nsha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef\ndeleted:sha256:c937c4dd0c2eaf57972d4f80f55058b3685f87420a9a9fb9ef0dfe3c7c3e60bc\nTotal reclaimed space: 65.03MB\n```", "```\nadmin@myhome:~$ docker container prune\nWARNING! This will remove all stopped containers.\nAre you sure you want to continue? [y/N] y\nDeleted Containers:\n8c922b2d9708fcee6959af04c8f29d2d6850b3a3b3f3b966b0c360f6f30ed6c8\n6d90b6cbc47dd99b2f78a086e959a1d18b7e0cf4778b823d6b0c6b0f6b64b6c64\nTotal reclaimed space: 0B\n```", "```\n0 3 * * * docker image prune -f\n```", "```\n0 4 * * 7 docker container prune -f\n```", "```\nadmin@myhome:~$ docker run -v my_data:/app/data <image_name>\n```", "```\nadmin@myhome:~$ docker run -v /host/data:/app/data <image_name>\n```", "```\nadmin@myhome:~$ docker run -v /local/data:/app/data:ro,Z --user 1000:1000 <image_name>\n```", "```\nadmin@myhome:~$ docker network create production-network\nfd1144b9a9fb8cc2d9f65c913cef343ebd20a6b30c4b3ba94fdb1fb50aa1333c\nadmin@myhome:~$ docker network create shared-network\na544f0d39196b95d772e591b9071be38bafbfe49c0fdf54282c55e0a6ebe05ad\n```", "```\nadmin@myhome:~$ docker run -itd --name prod-container --network production-network alpine sh\nUnable to find image 'alpine:latest' locally\nlatest: Pulling from library/alpine\n8921db27df28: Pull complete\nDigest:sha256:f271e74b17ced29b915d351685fd4644785c6d1559dd1f2d4189a5e851ef753a\nStatus: Downloaded newer image for alpine:latest\n287be9c1c76bd8aa058aded284124f666d7ee76c73204f9c73136aa0329d6bb8\n```", "```\nadmin@myhome:~$ docker run -itd --name shared-container --network shared-network alpine sh\n38974225686ebe9c0049147801e5bc777e552541a9f7b2eb2e681d5da9b8060b\n```", "```\nadmin@myhome:~$ docker ps\nCONTAINER ID    IMAGE    COMMAND   CREATED     STATUS    PORTS   NAMES\n38974225686e   alpine    \"sh\"      4 seconds ago    Up 3 seconds              shared-container\n287be9c1c76b   alpine    \"sh\"      16 seconds ago   Up 14 seconds             prod-container\n```", "```\nadmin@myhome:~$ docker network connect shared-network prod-container\n```", "```\nadmin@myhome:~$ docker exec -it prod-container /bin/sh\n/ # ping shared-container\nPING shared-container (172.24.0.2): 56 data bytes\n64 bytes from 172.24.0.2: seq=0 ttl=64 time=0.267 ms\n64 bytes from 172.24.0.2: seq=1 ttl=64 time=0.171 ms\n^C\n--- shared-container ping statistics ---\n2 packets transmitted, 2 packets received, 0% packet loss\nround-trip min/avg/max = 0.171/0.219/0.267 ms\n/ # ping prod-container\nPING prod-container (172.23.0.2): 56 data bytes\n64 bytes from 172.23.0.2: seq=0 ttl=64 time=0.167 ms\n64 bytes from 172.23.0.2: seq=1 ttl=64 time=0.410 ms\n64 bytes from 172.23.0.2: seq=2 ttl=64 time=0.108 ms\n^C\n5 packets transmitted, 5 packets received, 0% packet loss\nround-trip min/avg/max = 0.108/0.188/0.410 ms\n```", "```\n{\n    \"defaultAction\": \"SCMP_ACT_ALLOW\",\n    \"syscalls\": [\n        {\n            \"name\": \"accept\",\n            \"action\": \"SCMP_ACT_ALLOW\"\n        },\n        {\n            \"name\": \"bind\",\n            \"action\": \"SCMP_ACT_ALLOW\"\n        },\n        {\n            \"name\": \"connect\",\n            \"action\": \"SCMP_ACT_ALLOW\"\n        },\n        {\n            \"name\": \"listen\",\n            \"action\": \"SCMP_ACT_ALLOW\"\n        },\n        {\n            \"name\": \"sendto\",\n            \"action\": \"SCMP_ACT_ALLOW\"\n        },\n        {\n            \"name\": \"recvfrom\",\n            \"action\": \"SCMP_ACT_ALLOW\"\n        },\n        {\n            \"name\": \"read\",\n            \"action\": \"SCMP_ACT_ALLOW\"\n        },\n        {\n            \"name\": \"write\",\n            \"action\": \"SCMP_ACT_ALLOW\"\n        }\n    ]\n}\n```", "```\nadmin@myhome:~$ sudo apt-get install -y -qq apt-transport-https ca-certificates curl\nadmin@myhome:~$ sudo mkdir -p /etc/apt/keyrings && sudo chmod -R 0755 /etc/apt/keyrings\nadmin@myhome:~$ curl -fsSL \"https://download.docker.com/linux/ubuntu/gpg\" | sudo gpg --dearmor --yes -o /etc/apt/keyrings/docker.gpg\nadmin@myhome:~$ sudo chmod a+r /etc/apt/keyrings/docker.gpg\nadmin@myhome:~$ echo \"deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu jammy stable\" | sudo tee /etc/apt/sources.list.d/docker.list\nadmin@myhome:~$ sudo apt-get update\nadmin@myhome:~$ sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-scan-plugin docker-compose-plugin docker-ce-rootless-extras docker-buildx-plugin\n```", "```\nadmin@myhome~$ dockerd-rootless-setuptool.sh  --help\nUsage: /usr/bin/dockerd-rootless-setuptool.sh [OPTIONS] COMMAND\nA setup tool for Rootless Docker (dockerd-rootless.sh).\nDocumentation: https://docs.docker.com/go/rootless/\nOptions:\n  -f, --force                Ignore rootful Docker (/var/run/docker.sock)\n      --skip-iptables        Ignore missing iptables\nCommands:\n  check        Check prerequisites\n  install      Install systemd unit (if systemd is available) and show how to manage the service\n  uninstall    Uninstall systemd unit\n```", "```\nadmin@myhome~$ sudo adduser dockeruser\nAdding user `dockeruser' ...\nAdding new group `dockeruser' (1001) ...\nAdding new user `dockeruser' (1001) with group `dockeruser' ...\nCreating home directory `/home/dockeruser' ...\nCopying files from `/etc/skel' ...\nNew password:\nRetype new password:\npasswd: password updated successfully\nChanging the user information for dockeruser\nEnter the new value, or press ENTER for the default\n     Full Name []:\n     Room Number []:\n     Work Phone []:\n     Home Phone []:\n     Other []:\nIs the information correct? [Y/n] y\n```", "```\nadmin@myhome~$ sudo apt install -y uidmap\nadmin@myhome~$ echo \"dockeruser:100000:65536\" | sudo tee /etc/subuid\nadmin@myhome~$ echo \"dockeruser:100000:65536\" | sudo tee /etc/subgid\n```", "```\nadmin@myhome~$ sudo -i -u dockeruser\n```", "```\n$ export XDG_RUNTIME_DIR=/run/user/$UID\n$ echo 'export XDG_RUNTIME_DIR=/run/user/$UID' >> ~/.bashrc\n$ systemctl --user show-environment\nHOME=/home/dockeruser\nLANG=en_US.UTF-8\nLOGNAME=dockeruser\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin\nSHELL=/bin/bash\nSYSTEMD_EXEC_PID=720\nUSER=dockeruser\nXDG_RUNTIME_DIR=/run/user/1001\nXDG_DATA_DIRS=/usr/local/share/:/usr/share/:/var/lib/snapd/desktop\nDBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1001/bus\n```", "```\n$ dockerd-rootless-setuptool.sh install\n[INFO] Creating  [condensed for brevity]\n     Active: active (running) since Fri 2023-02-17 14:19:04 UTC; 3s ago\n+ DOCKER_HOST=unix:///run/user/1001/docker.sock /usr/bin/docker version\nClient: Docker Engine - Community\n Version:           23.0.1\n[condensed for brevity]\nServer: Docker Engine - Community\n Engine:\n  Version:          23.0.1\n [condensed for brevity]\n rootlesskit:\n  Version:          1.1.0\n [condensed for brevity]\n+ systemctl --user enable docker.service\nCreated symlink /home/dockeruser/.config/systemd/user/default.target.wants/docker.service → /home/dockeruser/.config/systemd/user/docker.service.\n[INFO] Installed docker.service successfully.\n```", "```\ndockeruser@vagrant:~$ export DOCKER_HOST=unix:///run/user/1001/docker.sock\ndockeruser@vagrant:~$ docker ps\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\n```", "```\nadmin@myhome:~/$ docker trust key generate devops\nGenerating key for devops...\nEnter passphrase for new devops key with ID 6b6b768:\nRepeat passphrase for new devops key with ID 6b6b768:\nSuccessfully generated and loaded private key. Corresponding public key available: /home/admin/devops.pub\n```", "```\nadmin@myhome:~/$ docker trust signer add --key devops.pub private-registry.mycompany.tld/registries/pythonapps\nAdding signer \"devops\" to private-registry.mycompany.tld/registries/pythonapps/my-python-app...\nInitializing signed repository for private-registry.mycompany.tld/registries/pythonapps/my-python-app...\nYou are about to create a new root signing key passphrase. This passphrase\nwill be used to protect the most sensitive key in your signing system. Please\nchoose a long, complex passphrase and be careful to keep the password and the\nkey file itself secure and backed up. It is highly recommended that you use a\npassword manager to generate the passphrase and keep it safe. There will be no\nway to recover this key. You can find the key in your config directory.\nEnter passphrase for new root key with ID a23d653:\nRepeat passphrase for new root key with ID a23d653:\nEnter passphrase for new repository key with ID de78215:\nRepeat passphrase for new repository key with ID de78215:\nSuccessfully initialized \"private-registry.mycompany.tld/registries/pythonapps/my-python-app\"\nSuccessfully added signer: devops to private-registry.mycompany.tld/registries/pythonapps/my-python-app\n```", "```\nadmin@myhome:~/$ docker trust sign private-registry.mycompany.tld/registries/pythonapps/my-python-app:2.9BETA\nSigning and pushing trust data for local image private-registry.mycompany.tld/registries/pythonapps/my-python-app:2.9BETA, may overwrite remote trust data\nThe push refers to repository [private-registry.mycompany.tld/registries/pythonapps]\nc5ff2d88f679: Mounted from library/ubuntu\nlatest: digest:sha256:41c1003bfccce22a81a49062ddb088ea6478eabea1457430e6235828298593e6 size: 529\nSigning and pushing trust metadata\nEnter passphrase for devops key with ID 6b6b768:\nSuccessfully signed private-registry.mycompany.tld/registries/pythonapps/my-python-app:2.9BETA\n```", "```\nadmin@myhome:~/$ docker trust inspect --pretty private-registry.mycompany.tld/registries/pythonapps/my-python-app:2.9BETA\nSignatures for private-registry.mycompany.tld/registries/pythonapps/my-python-app:2.9BETA\nSIGNED TAG    DIGEST                  SIGNERS\nlatest       41c1003bfccce22a81a49062ddb088ea6478eabea1457430e6235828298593e6   devops\nList of signers and their keys for private-registry.mycompany.tld/registries/pythonapps/my-python-app:2.9BETA\nSIGNER    KEYS\ndevops    6b6b7688a444\nAdministrative keys for private-registry.mycompany.tld/registries/pythonapps/my-python-app:2.9BETA\n  Repository Key: de782153295086a2f13e432db342c879d8d8d9fdd55a77f685b79075a44a5c37\n  Root Key: c6d5d339c75b77121439a97e893bc68a804368a48d4fd167d4d9ba0114a7336b\n```", "```\nname: Build and Push Docker Image\non:\n  push:\n    branches:\n      - main\nenv:\n  AWS_REGION: eu-central-1\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Configure AWS credentials\n      uses: aws-actions/configure-aws-credentials@v1\n      with:\n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: ${{ env.AWS_REGION }}\n    - name: Build Docker image\n      uses: docker/build-push-action@v2\n      with:\n        push: true\n        tags: ${{ env.AWS_REGION }}/my-image:${{ env.GITHUB_SHA }}\n    - name: Push Docker image to AWS ECR\n      uses: aws-actions/amazon-ecr-push-action@v1\n      with:\n        region: ${{ env.AWS_REGION }}\n        registry-url: ${{ env.AWS_REGISTRY_URL }}\n        tags: ${{ env.AWS_REGION }}/my-image:${{ env.GITHUB_SHA }}\n```", "```\nversion: '3'\nservices:\n  db:\n    image: mariadb\n    environment:\n      MYSQL_ROOT_PASSWORD: example\n      MYSQL_DATABASE: example_db\n```", "```\nversion: '3'\nservices:\n  db:\n    image: mariadb\n    env_file:\n      - db.env\n```", "```\nMYSQL_ROOT_PASSWORD=example\nMYSQL_DATABASE=example_db\n```", "```\nversion: '3'\n```", "```\nservices:\n  web:\n    image: nginx:latest\n    depends_on:\n      - wordpress\n    ports:\n      - 80:80\n    volumes:\n      - ./nginx.conf:/etc/nginx/conf.d/default.conf\n      - wordpress:/var/www/html\n    networks:\n      - wordpress\n```", "```\n  wordpress:\n    image: wordpress:php8.2-fpm-alpine\n    depends_on:\n      - db\n    environment:\n      WORDPRESS_DB_HOST: db:3306\n      WORDPRESS_DB_USER: example_user\n      WORDPRESS_DB_NAME: example_database\n      WORDPRESS_DB_PASSWORD: example_password\n    restart: unless-stopped\n    volumes:\n      - wordpress:/var/www/html\n    networks:\n      - wordpress\n```", "```\n  db:\n    image: mariadb:10.4\n    environment:\n      MYSQL_ROOT_PASSWORD: example_password\n      MYSQL_DATABASE: example_database\n      MYSQL_USER: example_user\n      MYSQL_PASSWORD: example_password\n    restart: unless-stopped\n    volumes:\n      - dbdata:/var/lib/mysql\n    networks:\n      - wordpress\n```", "```\nvolumes:\n  wordpress:\n  dbdata:\n```", "```\nnetworks:\n  wordpress:\n    name: wordpress\n    driver: bridge\n```", "```\nserver {\n    listen 80;\n    listen [::]:80;\n    index index.php index.htm index.xhtml;\n    server_name _;\n    error_log  /dev/stderr;\n    access_log /dev/stdout;\n    root /var/www/html;\n    location / {\n        try_files $uri $uri/ /index.php;\n    }\n    location ~ \\.php$ {\n      include fastcgi_params;\n      fastcgi_intercept_errors on;\n      fastcgi_pass wordpress:9000;\n      fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    }\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico)$ {\n      expires max;\n      log_not_found off;\n    }\n}\n```", "```\n# Build stage\nFROM golang:alpine AS build\nRUN apk add --no-cache git\nWORKDIR /app\nCOPY . .\nRUN go mod download\nRUN go build -o /go/bin/app\n# Final stage\nFROM alpine\nCOPY --from=build /go/bin/app /go/bin/app\nEXPOSE 8080\nENTRYPOINT [\"/go/bin/app\"]\n```", "```\nADD my-tar-file.tar.gz /app\n```", "```\nADD https://yourdomain.tld/configurations/nginx.conf /etc/nginx/nginx.conf\n```", "```\nADD --keep-git-dir=true https://github.com/your-user-or-organization/some-repo.git#main /app/code\n```", "```\nARG SSH_PRIVATE_KEY\nRUN mkdir /root/.ssh/\nRUN echo \"${SSH_PRIVATE_KEY}\" > /root/.ssh/id_rsa\n# make sure your domain is accepted\nRUN touch /root/.ssh/known_hosts\nRUN ssh-keyscan gitlab.com >> /root/.ssh/known_hosts\nRUN git clone git@gitlab.com:your-user/your-repo.git\n```", "```\nFROM python:3.9-alpine\nWORKDIR /app\nRUN --mount=type=secret,id=ssh_id_rsa,dst=~/id_rsa chmod 400 ~/id_rsa \\\n  && ssh-agent bash -c 'ssh-add ~/id_rsa; git clone git@gitlab.com:your-user/your-repo.git' && rm -f ~/id_rsa\n  # Rest of the build process follows…\n```", "```\nADD data.tar.gz /data/\n```", "```\nadmin@myhome:~/$ echo \"mysecretpassword\" | docker secret create mysql_password -\n```", "```\nversion: '3'\nservices:\n  db:\n    image: mysql\n    environment:\n      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_password\n    secrets:\n      - mysql_password\n    volumes:\n      - db_data:/var/lib/mysql\nsecrets:\n  mysql_password:\n    external: true\nvolumes:\n  db_data:\n```", "```\nadmin@myhome:~/$ docker stack deploy -c docker-compose.yml myapp\n```", "```\nadmin@myhome:~/$ docker swarm init\nSwarm initialized: current node (i050z7b0tjoew7hxlz419cd8l) is now a manager.\nTo add a worker to this swarm, run the following command:\n    docker swarm join --token SWMTKN-1-0hu2dmht259tb4skyetrpzl2qhxgeddij3bc1wof3jxh7febmd-6pzkhrh4ak345m8022hauviil 10.0.2.15:2377\nTo add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.\n```", "```\nadmin@myhome:~/$ docker swarm join --token <token> <manager-ip>\n```", "```\nadmin@myhome:~/$ docker swarm join --token SWMTKN-1-0hu2dmht259tb4skyetrpzl2qhxgeddij3bc1wof3jxh7febmd-6pzkhrh4ak345m8022hauviil 10.0.2.15\n```", "```\nadmin@myhome:~/$ docker node ls\nID                      HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION\ni050z7b0tjoew7hxlz419cd8l *   myhome    Ready     Active         Leader           23.0.1\n```", "```\n  wordpress:\n    image: wordpress:php8.2-fpm-alpine\n    depends_on:\n      - db\n    environment:\n      WORDPRESS_DB_HOST: db:3306\n      WORDPRESS_DB_USER_FILE: /run/secrets/mysql_user\n      WORDPRESS_DB_NAME: example_database\n      WORDPRESS_DB_PASSWORD_FILE: /run/secrets/mysql_password\n```", "```\n    secrets:\n      - mysql_user\n      - mysql_password\n  db:\n    image: mariadb:10.4\n    environment:\n      MYSQL_ROOT_PASSWORD: example_password\n      MYSQL_DATABASE: example_database\n      MYSQL_USER_FILE: /run/secrets/mysql_user\n      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password\n```", "```\n  mysql_user:\n    external: true\n  mysql_password:\n    external: true\n```", "```\nadmin@myhome:~/$ echo \"root\" | docker secret create mysql_user -\nvhjhswo2qg3bug9w7id08y34f\necho \"mysqlpwd\" | docker secret create mysql_password -\noy9hsbzmzrh0jrgjo6bgsydol\n```", "```\nadmin@myhome:~/$ docker stack deploy -c docker-compose.yml wordpress\nIgnoring unsupported options: restart\nCreating network wordpress_wordpress\nCreating service wordpress_web\nCreating service wordpress_wordpress\nCreating service wordpress_db\n```", "```\nadmin@myhome:~/$ root@vagrant:~# docker stack ls\nNAME        SERVICES\nwordpress   3\nroot@vagrant:~# docker ps\nCONTAINER ID     IMAGE     CREATED      STATUS       PORTS      NAMES\n7ea803c289b0   mariadb:10.4                  \"docker-entrypoint.s…\"   28 seconds ago   Up 27 seconds   3306/tcp   wordpress_db.1.dogyh5rf52zzsiq0t95nrhuhc\ned25de3273a2   wordpress:php8.2-fpm-alpine   \"docker-entrypoint.s…\"   33 seconds ago   Up 31 seconds   9000/tcp   wordpress_wordpress.1.xmmljnd640ff9xs1249jpym45\n```"]