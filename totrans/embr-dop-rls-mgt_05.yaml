- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding What Makes DevOps Release Management Unique
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps culture is holistic and involves looking at every piece of a value stream
    and optimizing it. The DevOps philosophy seeks to eliminate silos or individual
    teams working in isolation. As a result, businesses that embrace the DevOps culture
    improve the transparency of their end-to-end operations. This goes against the
    grain of many established businesses, where individuals and teams have distinct
    roles and responsibilities with little cross-collaboration, if any.
  prefs: []
  type: TYPE_NORMAL
- en: The DevOps philosophy is about collective responsibility, encouraging IT personnel
    to work toward finding solutions promptly, along with remaining committed to lifelong
    learning. *Gene Kim*, *Jez Humble*, *Patrick Debois*, and *John Willis*, authors
    of *The DevOps Handbook*, outline these tenets in their book. Employees should
    be able to spend the majority of their time perfecting DevOps-related tasks such
    as infrastructure automation, network security, application monitoring, and patching.
    The drive for continuous improvement is intrinsic to DevOps culture. If your team
    is doing DevOps correctly, *crunch time and burnout* are rare occurrences; otherwise,
    your business unit is being aggressively underfunded.
  prefs: []
  type: TYPE_NORMAL
- en: However, executive leadership is often risk averse, so when a process proves
    to be effective, they will typically cling to it tightly and put the blinders
    on. DevOps teams are simultaneously tasked with optimizing for efficiency given
    a set of processes. This is why DevOps teams must work hand-in-hand with business
    development teams to ensure that the company’s products are stable, performant,
    and secure.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this fifth chapter, you will gain insights into the unique aspects of DevOps,
    and as such, we will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is holistic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps integrates CI/CD, QA, security, and feedback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps incorporates business teams into the development process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The three ways of DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do traditional release management methodologies stack up against DevOps?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A case study of how DocuSign transitioned from Agile to DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps is holistic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps initiatives are holistic, as opposed to the isolated strategies of the
    past. DevOps considers the entire value stream and all of the individuals involved,
    rather than simply one person or a specific component of it. We’re turning the
    traditional model on its head by designing our systems and procedures around our
    people. This is the reason why elite-performing DevOps teams can demonstrate a
    correlation between investment in information technology and financial performance.
    The underlying objective of these investments is in the growth and empowerment
    of individuals, enabling them to enhance processes and choose suitable technologies
    for themselves. Empowering your workforce directly correlates to strengthening
    your productivity and making your company resilient.
  prefs: []
  type: TYPE_NORMAL
- en: The field of DevOps has undergone significant expansion, extending its scope
    beyond the mere processes of release and deployment. At the time of writing, it
    encompasses various stakeholders, including product owners, project managers,
    and all facets of the software development life cycle. This primary factor has
    contributed to its growth as a holistic methodology, encompassing the relationship
    between the business operations team and clients, as well as the stages of product
    release and production monitoring. DevOps release management is a logical progression
    within the IT industry, emphasizing its effectiveness in enhancing organizational
    performance across various industries.
  prefs: []
  type: TYPE_NORMAL
- en: The implementation of DevOps has expanded to encompass various departments within
    a business, including customer support, marketing, product owners, project managers,
    program managers, developers, quality assurance teams, release or build teams,
    and infrastructure teams. The primary objective of DevOps is to enhance customer
    satisfaction and expedite delivery. Therefore, it is crucial for all parties involved
    to possess comprehensive visibility across the entire process, encompassing operations,
    planning, integration, testing, monitoring, delivery, and feedback. Efficient
    integration of processes and tools is necessary to automate the smooth exchange
    and execution of information. This method also enables all stakeholders to make
    a more effective contribution to the success and efficient implementation of the
    product.
  prefs: []
  type: TYPE_NORMAL
- en: The success of a DevOps initiative depends on the efforts of many people working
    together effectively. This means that an organization must remove all silos of
    information and execution as attainable. It is common for start-up companies to
    embrace the use of DevOps due to the advantages of building their company’s operations
    from the ground up. However, recent macroeconomic indicators reveal that larger,
    more mature businesses are increasingly adopting DevOps practices, especially
    to optimize efficiency and achieve greater frequency and higher quality software
    releases.
  prefs: []
  type: TYPE_NORMAL
- en: The DevOps field encompasses a wide range of tools, with a significant portion
    of them being open source in origin. This has supplied engineers with an unprecedented
    amount of tools that can be selected to partake in hacking or experimentation.
    This phenomenon often presents unique difficulties since an excessive number of
    toolsets inside a workflow can lead to the creation of isolated silos of knowledge
    and implementation, resulting in both ambiguity and wastefulness. The scenario
    is becoming rampant and problematic, necessitating a pivot toward solutions that
    offer superior integration and execution capabilities across a range of technologies.
    The best approach for this scenario would be to use a platform that provides extensive
    integration capabilities, such as GitLab, GitHub Actions, Plutora, and even Zapier.
  prefs: []
  type: TYPE_NORMAL
- en: To provide a comprehensive solution, beginning with client inception to receiving
    product feedback, businesses need a comprehensive integration platform that allows
    for effortless integration and execution across diverse tools, including in-house,
    proprietary tools. This approach is especially useful for mature companies because
    it gives them the freedom to keep their present investments in tools and procedures
    while simultaneously introducing new technologies in a targeted manner. Rather
    than attempting everything from the beginning, mature companies can manage changes
    while concentrating on efficiency, automation, collaboration, a higher standard
    for releases, and greater release frequency.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps release management ensures that all parties involved are aware of what
    features will be made available and when. This approach features the inclusion
    of robust traceability capabilities, analytics, and dashboards that aid in awareness
    of the left-to-right movement of information and task execution. A good way to
    minimize dependence on other teams and promote self-service is with the use of
    tight integrations of data systems, CI/CD-based kiosks, and support from operations
    specialists to automate routine business processes.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps allows the team to improve their productivity and effectiveness by incorporating
    better end-to-end visibility and robust methods of collaboration, empowering everyone
    on the team. Being inclusive to everyone has the added benefit of improving the
    climate of mutual trust and cooperation. This approach allows DevOps organizations
    to expand beyond the build and release phases of software development and permeate
    the whole software development life cycle. This is especially helpful for large
    businesses since it protects their existing investments and improves their cash
    flow. This offers organizations the possibility to test out new tools and techniques
    frequently while also keeping the ones that are fruitful. In a nutshell, being
    holistic is excellent for speeding up digital transformations in large organizations.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know why DevOps is a holistic practice, let’s dive deeper and discuss
    how this extends beyond people and carefully considers processes and technology.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps integrates CI/CD, QA, security, and feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps is an umbrella term of techniques that eliminate communication barriers
    between the software development and operations teams to improve product delivery,
    speed, and quality. The software must match the requirements and expectations
    of its end users and stakeholders, which is why **quality assurance** (**QA**)
    is an essential aspect of DevOps. However, incorporating QA into DevOps workflows
    can be difficult because it necessitates a change in mentality, company culture,
    and software.
  prefs: []
  type: TYPE_NORMAL
- en: Critically, you must establish quality targets and **key performance indicators**
    (**KPIs**) before developing a DevOps testing pipeline. The importance of knowing
    your KPIs cannot be overstated; each unique business has its own. Aligning quality
    objectives with business objectives and customer needs is a challenge for any
    company. Share your quality objectives with your staff and other interested parties
    to best determine what you want to accomplish in terms of quality as it can help
    you focus your QA efforts and keep everyone on your team aligned.
  prefs: []
  type: TYPE_NORMAL
- en: As you learned in the previous chapter, **automation** is a fundamental tenet
    of the DevOps philosophy as it facilitates accelerated and standardized software
    deployment. Furthermore, automation provides an essential function in the field
    of testing due to its ability to mitigate manual errors, optimize time and resource
    use, and offer prompt feedback. Notably, it is wise to maximize the use of automation
    throughout the entire range of testing processes while encompassing numerous categories,
    such as unit testing, integration testing, functional testing, performance testing,
    security testing, and regression testing. In addition, it is advised to utilize
    automation-supporting technologies and frameworks such as **JUnit**, **Cucumber**,
    **Selenium**, **Cypress**, **TestNG**, **SonarQube**, **Nessus**, **linters**,
    as well as many others.
  prefs: []
  type: TYPE_NORMAL
- en: Once again, it should be stated that integration is an essential ingredient
    of DevOps, wherein the compatibility and interoperability of testing tools with
    development and deployment systems is vital. In this manner, it is practical to
    establish a cohesive and uninterrupted testing pipeline that operates across the
    entirety of the software development life cycle. It is advisable to incorporate
    testing tools with monitoring and reporting technologies, such as Splunk, Grafana,
    or ELK, to gather and analyze data concerning software quality and performance.
    Of course, reaching for more comprehensive SaaS products with superior tracing
    capabilities is well and good. By incorporating testing tools into your workflow,
    you will improve the efficiency, transparency, and collaboration of your testing
    process among all stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: Feedback serves an extremely important purpose in the context of DevOps as it
    accelerates the identification and resolution of issues, enhances process efficiency,
    and enables learning from past mistakes. It is recommended to incorporate feedback
    loops at each phase of the testing pipeline, starting from code reviews to production
    deployments. It is advisable to actively promote the solicitation of feedback
    from many sources, including team members, consumers, and stakeholders. Implementing
    technologies and platforms that are specifically designed to simplify the collection
    and management of feedback, such as GitHub, Bitbucket, Confluence, Jira, Slack,
    or Teams, can be particularly beneficial. The implementation of feedback loops
    has the promise to cultivate a culture characterized by ongoing development and
    innovation.
  prefs: []
  type: TYPE_NORMAL
- en: You may have heard of a frequently used buzzword called **shift-left**. When
    developing software, taking a *shift-left approach* entails beginning the testing
    phase of the process as early as possible in the cycle, rather than delaying it
    until the very end. By doing so, you will be able to find and fix software flaws
    more quickly, cut down on unnecessary rework and wastefulness, and provide software
    of a higher quality. When you are choosing a shift-left approach, one of the things
    that you must do is involve your quality assurance team as early on in the process
    as possible and incorporate them into the planning, design, and development phases.
    In short, you can boost the success of your testing, as well as its effectiveness
    and coverage, if you *shift left*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Phases such as plan, code, build, test, release, and deploy are typically included
    in a DevOps pipeline, but the distinctions between them can blur on occasion.
    When adopting the tactics known as *DevSecOps*, each phase of the DevOps release
    management life cycle is subjected to its own unique set of security standards
    and assessments. Let’s discuss the security checks that are performed by integrating
    DevSecOps into the CI/CD pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Plan**: During the initial stage of project development, it is important
    to conduct a comprehensive security analysis and formulate a strategic plan. It
    is necessary to determine the many circumstances that dictate how testing will
    be conducted, including the specific locations, and consider how these activities
    will impact delivery timeframes. One aspect of this is the use of threat modeling
    to examine possible security risks and devise countermeasures. Another approach
    is to proactively incorporate security into product design from the start. This
    means making important decisions about data hygiene and other security measures
    early on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code**: The DevOps release management model’s coding stage is the ideal time
    to establish guidelines that encourage defensive programming and equip developers
    to deal with security and compliance concerns straightaway. Constraints for handling
    potentially risky areas of code, such as operations within the bounds of a memory
    buffer, NULL pointer references, or more general standards for things such as
    input validation and deserialization of untrusted data could fall under this category.
    Furthermore, it is recommended to employ linting tools to flag programming errors,
    bugs, stylistic errors, and suspicious constructs. Also, don’t forget to add security
    controls to your version control repositories to enhance password and API key
    security or prevent unauthorized modifications to code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build**: By including automated security checks in the build stage, a typical
    pipeline can detect vulnerabilities in source code before they reach the main
    branch or production environments. For example, you can execute **static application
    security testing** (**SAST**) tools such as *SonarQube*, *SAST-Scan*, *Snyk*,
    *Prisma Cloud*, and others to analyze the code. If any vulnerabilities are identified
    by the tool, the build will halt, and a report will be dispatched that notifies
    the team of the resulting pipeline failure. These actions allow developers to
    immediately resolve the problem before moving forward.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Furthermore, to find vulnerabilities in software dependencies and to keep track
    of open source components in the code base, the pipeline should also include **software
    composition analysis** (**SCA**) tools. Together, these technologies effectively
    and efficiently identify code vulnerabilities so that they can be rectified before
    deployment in a production environment. You can find many of these tools on the
    market, both commercial and open source, which are specifically designed to scrutinize
    the most popular programming languages in use today.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Test**: DevOps practitioners commonly establish a suite of automated test
    cases that are designed to implement strong quality assurance protocols within
    the development process. A test case is a document that outlines a series of conditions
    or operations that are used to confirm the anticipated functionality of a software
    application and may be carried out manually or by using automated tools such as
    *Selenium*, *Cypress*, *Playwright*, *Puppeteer*, *Taiko*, *Appium*, *Espresso*,
    and *XCUITest*. To manage the schedules and outcomes of the testing process, you
    should use a test case management tool such as *BrowserStack*, *Testiny*, *JIRA*
    and *Xray*, *LambdaTest*, *Pivotal Tracker*, *TestRail*, *Kualitee*, *TestCollab*,
    *Zephyr*, and many others. These tools manage and track any problems identified
    throughout the testing stage of a pipeline. Building in basic unit tests to check
    for security vulnerabilities, such as how the program handles invalid or unexpected
    input, is a standard part of this process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, it is typical to incorporate application security checks that
    scan the program for vulnerabilities while it runs. By incorporating security
    measures alongside functionality, the test phase becomes more comprehensive. During
    application testing, **dynamic application security testing** (**DAST**) technologies
    are used to actively test a running application for security vulnerabilities.
    Some examples include *Acunetix*, *Appknox*, *Checkmarx*, *Detectify*, *Intruder*,
    *Rapid7*, and *Veracode Dynamic Analysis*, among others. These tools are designed
    to identify issues commonly linked with user authentication, authorization, cross-site
    request forgery, buffer overflows, SQL injection, API-related endpoints, and multitudes
    of other vulnerabilities. As you can see, there are too many QA tools to cover
    in this book. You will need to work with your team and evaluate them to determine
    which tools align with your organization’s working style and strategic objectives.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Release**: During the release stage, security analysis tools are utilized
    to conduct automated security testing and penetration testing. Tools such as *Astra
    Pentest*, *Burp Suite*, *Metasploit*, *Nessus*, and *OWASP ZAProxy* are used to
    identify any potential issues that may not have been evident in previous stages.
    Certain organizations also adhere to the principle of least privilege, ensuring
    that individuals and tools are granted access to only the necessary resources
    they need to perform their duties, but no more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deploy**: Upon the successful execution of the earlier tests during runtime,
    it is imperative to proceed with the delivery of a secure infrastructure or the
    construction of a production environment for the final deployment. During the
    deployment phase, ensure that the code is only deployed to production after successfully
    passing security checks at every preceding stage. It is a wise choice to apply
    additional automated tests to application code and the underlying infrastructure
    as an additional safety net if any unauthorized code changes are deployed in the
    production environment, either intentionally or unintentionally. This can help
    identify and address runtime security concerns in production software, no matter
    the circumstances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operate and monitor**: During the operations and monitoring phases of a DevOps
    pipeline, organizations commonly rely on application and infrastructure metrics
    to detect any abnormal activity that may suggest that there has been a security
    incident. When a breach happens, logging, monitoring, and alerting can help identify
    the problem, assess its impact, and aid with recovery.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embracing DevSecOps requires a change in culture, where security becomes a fundamental
    consideration for all stakeholders involved in the software development life cycle.
    To achieve this, organizations frequently implement novel methods and establish
    a DevSecOps toolchain that incorporates automated security checks throughout the
    entirety of the software development life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: DevSecOps-centric tooling expands on existing DevOps methods such as CI/CD,
    automated testing practices, system monitoring, and streamlined configuration
    management by seamlessly incorporating security-focused tools and techniques.
    Next, we’ll examine the critical elements within the context of a DevSecOps toolchain
    that distinguish it as a unique subset within the overall DevOps umbrella of practices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In terms of webhook-centric security strategies, the primary objective of any
    DevSecOps methodology is to identify and address code concerns proactively by
    initiating automated inspections triggered by pre-commit and merge webhooks. Organizations
    may choose to deploy many types of assessments as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Analyze source code**: SAST is a method for finding potentially vulnerable
    source code by analyzing it while it is at rest – that is, without running the
    program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Analyze application vulnerabilities**: DAST works by creating and deploying
    the software to a sandboxed environment. Dynamic application scanning technologies
    can monitor how it reacts to identified vulnerabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secrets scanning**: Sometimes, secrets manage to make their way into a commit,
    no matter how strict the security policies are. Secrets can be identified before
    a commit is made using secret scanning tools that are embedded directly into a
    software developer’s IDE as a plugin, though they can be analyzed directly in
    the version control platform, such as GitHub, if the feature is available. Additionally,
    many secret scanning products are compatible with SCA tools, which are employed
    to identify any vulnerabilities that may exist inside an arbitrary code base’s
    open source software dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Runtime application self-protection** (**RASP**): Runtime verification tools
    or RASPs continuously monitor and detect direct threats that are affecting your
    applications while they are actively running in production. Often, they will provide
    real-time reporting that indicates if and where any vulnerabilities were found,
    along with a timestamp.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In terms of configuration management, adopting infrastructure as code is a common
    way for DevSecOps to achieve its overarching goal of eliminating uncertainty with
    system configuration. Automated configuration file scanning, version-controlled
    infrastructure, and automatic service rollouts are all possible with tools such
    as Docker, Terraform, and Ansible, which employ declarative configuration files
    written in **Yet Another Markup Language** (**YAML**) syntax.
  prefs: []
  type: TYPE_NORMAL
- en: '**Orchestrate container-based microservices**: To better handle sophisticated,
    cloud-native apps, companies may choose to adopt a microservices architecture
    in certain circumstances. To do this safely and efficiently, you’ll need container
    orchestration platforms to manage many containers and scale them up or down as
    needed. To govern how containers communicate with one another, container orchestration
    technologies, such as configuration management solutions, frequently make use
    of YAML file formats for their configurations. These can also be analyzed using
    security scanners to detect and remediate vulnerabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitoring and reporting**: The measurement process, which consists of recording
    all information at the application and infrastructure level, is one of the most
    straightforward yet extremely effective components of the DevSecOps toolkit. Top-tier
    tools offer immediate insights when problems arise and feature a robust reporting
    system to detect issues at an early stage. Identifying a potential compromise
    can be challenging if outbound data is being sent from an unexpected port. Without
    proper monitoring and reporting, it becomes difficult to detect such incidents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As often as we accidentally write security flaws, we import open source software
    libraries into our projects that have security flaws in them too. There are a
    lot of programmers who write code every day, and manual reviews can’t keep up.
    This is where DevSecOps truly shines. It ensures that our software deliverables
    are always automatically secured.
  prefs: []
  type: TYPE_NORMAL
- en: To validate every commit your crew makes, you can employ continuous delivery
    pipelines to achieve the *continuous everything* paradigm. Your continuous pipelines
    will benefit from the addition of automated security checks, which provide early
    warning notifications and easily keep an eye out for security flaws at any point
    in the software delivery life cycle. Many continuous security techniques are capable
    of scaling alongside the growth of an organization, be it big or small.
  prefs: []
  type: TYPE_NORMAL
- en: People and culture are just as important as tools and processes when it comes
    to DevOps. If you want to meet your quality targets and provide value to your
    clients, you will need to collaborate with not only colleagues on your immediate
    team but also any other teams that you work with cross-functionally. You should
    also work to grow a culture that prioritizes trust, openness, and accountability.
    This culture should be an environment in which everyone contributes to and takes
    ownership of quality. In addition to this, you need to stimulate a culture of
    learning in which everyone is open to acquiring new knowledge, techniques, and
    methods. By participating in collaborative efforts with your team, it is possible
    to establish a DevOps organization that exhibits elite delivery velocity and agility.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you understand how DevOps holistically blends people, processes, and
    technology, let’s expand this theme further by discussing how to include the feedback
    and cooperation of non-technical team members, such as the business unit.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps incorporates business teams into the development process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The term **DevOps** refers to more than simply the technical procedures and
    tools that allow you to consistently deploy your applications into production
    – it goes well beyond that in scope. As mentioned previously, it is a comprehensive
    strategy in which the entirety of the organization needs to recognize the legitimacy
    of the DevOps methodology. To ensure that DevOps is incorporated into every project,
    it is necessary for sales and marketing to make it an inherent component of their
    workflows, and it must be treated seriously. Similarly, it is important to place
    effective DevOps practices across a wide variety of departments. This ensures
    that subsequent teammates who take ownership of the project in the future have
    an established framework to operate within.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps principles should be represented throughout all stages of a product’s
    lifespan, from development to maintenance. These principles take into account
    every step of the production process, bringing about a cultural shift from the
    beginning to the end of the value stream. When a company implements DevOps, it
    has ripple effects throughout the company because it is a way of thinking, acting,
    and being that has to permeate every level of culture. This involves breaking
    down silos and fostering a cooperative atmosphere that extends far beyond the
    typical working environment in traditional organizations. Admittedly, making the
    switch to DevOps can be challenging. For it to be successful, training is essential,
    as is strong support from senior management.
  prefs: []
  type: TYPE_NORMAL
- en: Put another way, the tight cooperation and constant feedback that characterize
    the DevOps culture should not be confined to just development, testing, and operations.
    Otherwise, the business will end up in a position where they promote and sell
    deliverables that the group is unable to provide. This is why it is so important
    to engage other departments and keep them in the loop, such as accounting, marketing,
    and sales, along with others. To accomplish the goals of increased efficiency,
    cost-effectiveness, and improved quality, it is important to involve the entirety
    of the production line. For instance, it is not feasible for the sales department
    to engage in a contract that operates in isolation from the product delivery team,
    who is unknowingly producing incremental portions of functional software that
    lack requirements or context. All stakeholders within the firm must possess a
    shared perspective and depth of awareness to coordinate customer demand with current
    delivery capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to underscore that merely establishing job designations such
    as *DevOps engineer* and *director of DevOps*, as well as developing training
    and certification initiatives for DevOps, does not provide a sufficient level
    of knowledge or experience. The concept of DevOps can be understood as a cultural
    paradigm rather than the mere existence of isolated individuals or teams engaged
    in tool development or collaboration within their respective domains. This implies
    that all individuals within the organization are collectively engaged in the adoption
    and implementation of a unified DevOps methodology. The DevOps philosophy requires
    everyone in an organization to act as per its tenets and guiding principles.
  prefs: []
  type: TYPE_NORMAL
- en: Support from a qualified DevOps coach is crucial in transforming a company into
    a DevOps-oriented entity. This transformation is achieved via the adoption of
    a comprehensive strategy that encompasses systems thinking and prioritizes the
    customer’s requests for quality products and services.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have considered how DevOps release management includes the business
    unit in the development process, let’s change gears a bit and discuss *the three
    ways* of DevOps, which is all about discovering more effective ways to add value
    to the company at a faster rate.
  prefs: []
  type: TYPE_NORMAL
- en: The three ways of DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The three ways of DevOps, from *Gene Kim’s* book, *The DevOps Handbook*, encompass
    three fundamental concepts that articulate the tenets and philosophies that guide
    the processes, procedures, practices, and prescriptive measures necessary for
    an organization to effectively embrace the DevOps culture and implement the necessary
    changes. If your organization is new to DevOps, the three ways of DevOps offers
    a great starting place because they are philosophical and non-technical.
  prefs: []
  type: TYPE_NORMAL
- en: The first way – flow/systems thinking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Attention is paid to the performance of a whole system rather than the performance
    of a particular silo of work or department. This can be a large division such
    as development or IT operations, or it can be as small as a single contributor
    such as a site reliability engineer or software developer. The various revenue
    streams that are made feasible by information technology are emphasized prominently
    here. Notably, the creation of work requirements heralds the beginning of a new
    task – for instance, a task generated by the business or IT departments, after
    which it gets built-in development phases, which are then tailored for implementation
    in specific IT operations environments. At this point, the customer will receive
    value in the form of a service, marking the conclusion of an iteration of the
    value delivery process.
  prefs: []
  type: TYPE_NORMAL
- en: When adhered to properly, the first way ensures that defects are never passed
    on to subsequent stages of production, that local optimization never leads to
    company-wide outages, that flow is continuously improved, and that a comprehensive
    understanding of the system is continually pursued. The amount of work that has
    been started but is not yet finished is referred to as **work-in-progress** (**WIP**).
    When you have a lot of WIP, it’s a sign that you’re multitasking, which will almost
    always slow down the flow of work. You should reduce batch sizes to limit WIP.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following practices are included in **the** **first way**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Continuous integration**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous delivery**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous deployment**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value stream** **mapping** (**VSM**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kanban**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Theory of** **constraints** (**TOC**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Value stream mapping
  prefs: []
  type: TYPE_NORMAL
- en: Value stream mapping is a lean management technique that’s used to analyze the
    present state and devise a future state for the sequence of activities involved
    in delivering a product or service from its initial stage to the consumer. A value
    stream map is a graphical tool that presents all essential stages in a particular
    process and effectively measures the time and volume consumed at each step. Value
    stream maps visually depict the movement of both physical resources and data as
    they advance through the operational sequence.
  prefs: []
  type: TYPE_NORMAL
- en: The objective of value stream mapping is to discover and eliminate or minimize
    “waste” in value streams, therefore enhancing the efficiency of a certain value
    stream. The purpose of waste removal is to enhance productivity by establishing
    more efficient processes, hence facilitating the identification of waste and quality
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: TOC
  prefs: []
  type: TYPE_NORMAL
- en: TOC is an approach to management that perceives any controllable system as being
    restricted in its ability to achieve more of its objectives due to a minimal number
    of constraints. Within the TOC, there is consistently a minimum of one constraint.
    TOC employs a focusing process to discover this constraint and subsequently reorganizes
    the remaining aspects of the business accordingly. The TOC applies the widely
    used phrase “a chain is only as strong as its weakest link.” Consequently, organizations
    and processes are susceptible to failure or disruption due to the presence of
    a “weak” individual or component, which has the potential to impair or negatively
    impact the whole outcome.
  prefs: []
  type: TYPE_NORMAL
- en: The second way – amplify feedback loops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The second way of DevOps focuses on the creation of rapid feedback loops, which
    enables you to quickly construct secure, feature-rich systems that customers love.
    Whether you like it or not, the complexity of software cannot be avoided. Even
    seemingly insignificant alterations can result in enormously significant impacts.
    When we do not receive timely feedback, we create a gap between cause and effect.
    Errors may be introduced unnoticed, and they may not be recognized until much
    later when the time and resources required to correct them have increased.
  prefs: []
  type: TYPE_NORMAL
- en: Although it may seem contradictory, having more people look at a problem does
    not always result in better solutions. The efficiency of the approval processes
    will deteriorate as we move the decision-making process farther away from the
    location where the work is being conducted. The results of implementing the second
    way include gaining an awareness of, and providing a response to, both internal
    and external consumers, reducing the length of all feedback loops while simultaneously
    amplifying their impact, and integrating knowledge in locations where it is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following practices are included in **the** **second way**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Automated testing**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Peer review of** **production changes**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitoring and** **notification practices**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**“At a glance” dashboards and** **status updates**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Production logs**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Process measurements**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Post-mortems**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shared** **on-call rotation**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Change, incident, problem, and** **knowledge management**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third way – a culture of continual experimentation and learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The concept behind the third way is to establish a culture that encourages two
    distinct tenets. The first is ongoing experimentation, taking calculated risks,
    and the acquisition of knowledge from such experiences. The second is an awareness
    that the only way to achieve mastery is through practice and meaningful repetition,
    which are equally necessary.
  prefs: []
  type: TYPE_NORMAL
- en: In work environments characterized by low levels of trust, it is common for
    incidents to be accompanied by a recurring pattern of blame and guilt. Naturally,
    this hinders both the individuals and the entire organization from acquiring knowledge
    and skills. The threat of punishment for mistakes serves as a motivating factor
    for individuals to remain within their familiar, comfortable circumstances. This
    environment, commonly referred to as the comfort zone, is characterized by reducing
    the likelihood of encountering challenges or complications for the sake of avoiding
    stress. In the pursuit of knowledge and understanding, individuals are often advised
    against engaging in experimentation, exploring fresh concepts, and raising speculative
    inquiries. Within this context, instead of assuming responsibility for their actions,
    individuals often find it more convenient to conceal their failures and avoid
    acknowledging them. As a result, in contemporary society, individuals commonly
    demonstrate a reduced inclination to vocalize their thoughts or suggest innovative
    approaches to address prevailing issues. Innovation is often met with resistance
    by individuals or groups, and this is a tragedy. The quest for progress requires
    conducting experimentation and embracing risk, even if it entails venturing further
    into risky areas than previously researched. We must possess a high level of proficiency
    in the skills that will enable us to rectify stability issues that are caused
    when we’ve pushed our limits and broken things.
  prefs: []
  type: TYPE_NORMAL
- en: The results of implementing the third way can be summarized as devoting time
    for the improvement of daily work, developing routines that reward the team for
    taking chances, and incidentally generating defects into the system to pursue
    increased levels of resilience, efficiency, and professionalism.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following practices are included in **the** **third way**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Experimentation** **and learning**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plan-do-check-act (****Deming Cycle)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Improvement Kata**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improvement Kata
  prefs: []
  type: TYPE_NORMAL
- en: According to Toyota Kata, management is the methodical effort to achieve desired
    conditions by effectively harnessing people’s abilities in a coordinated manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Improvement Kata is a systematic approach for transitioning from the present
    state to a desired state in an imaginative, meaningful, and guided manner. The
    model is structured into four parts:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Given the examination of an ambition or trajectory.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Comprehend the present state.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Provide a precise definition of the future objective state.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Progress gradually toward the desired state, revealing and addressing any
    difficulties encountered along the way.
  prefs: []
  type: TYPE_NORMAL
- en: The Improvement Kata differs from approaches that aim to forecast the trajectory
    and concentrate on execution as it capitalizes on the discoveries made during
    the process. Teams utilizing the Improvement Kata acquire knowledge as they attempt
    to achieve a desired state and adjust their approach based on the insights they
    gain.
  prefs: []
  type: TYPE_NORMAL
- en: 'The three ways have little to do with contemporary technology. They are all
    about discovering more effective ways to add value to the company at a faster
    rate. This brings us full circle to the ABCs of **Information and Communications
    Technology** (**ICT**), which stands for **attitudes**, **behaviors**, and **cultures**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1: The three ways of DevOps (image inspired by Gene Kim, “The Three
    Ways: The Principles Underpinning DevOps”)](img/B21803_05_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.1: The three ways of DevOps (image inspired by Gene Kim, “The Three
    Ways: The Principles Underpinning DevOps”)'
  prefs: []
  type: TYPE_NORMAL
- en: The previous illustration represents *the three ways* of DevOps. Respectively,
    from top to bottom, they are flow/systems thinking, feedback loops being amplified,
    and a culture of continual experimentation and learning.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you are familiar with the standout features that make DevOps release
    management unique, let’s wrap up this chapter by discussing the ways that DevOps
    release management compares with legacy release management methodologies and traditional
    workflows.
  prefs: []
  type: TYPE_NORMAL
- en: How do traditional release management methodologies stack up against DevOps?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Planning large releases, which requires a greater amount of work and risk, is
    a common focus of traditional methodologies. Complexity often arises fast while
    working in longer cycles with fewer releases. In this setting, you will have strict
    deadlines and a laundry list of extras to meet. Big releases may be spectacular,
    but they are certainly an inefficient method of production. However, DevOps uses
    a different strategy; smaller releases are more manageable since they are simpler
    to comprehend and test. If things don’t go as planned, there is less damage to
    manage. Essentially, DevOps allows your company to quickly adapt to fluctuating
    client demands by enabling faster, lighter releases.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to managing any kind of development, traditional techniques commonly
    make use of planning and scheduling systems. Many moving parts are normally associated
    with a development cycle. This is especially true when using traditional methods
    as scheduling can be an especially tough challenge. The DevOps methodology is
    founded upon the principles of frequent and incremental software releases, as
    well as the utilization of automation techniques by a specialized team. This approach
    significantly enhances the efficiency of scheduling processes. The focus will
    usually center on short-term planning, typically for the next several weeks. It
    is this that will give you an elevated level of awareness on the proper allotment
    of your team’s time. Moreover, the establishment of a specialized team will facilitate
    efficient coordination, eliminating the need for allocating individuals in various
    capacities.
  prefs: []
  type: TYPE_NORMAL
- en: Conventional approaches typically make a big deal out of an anticipated release
    of a new product version or upgrade. When a business adopts conventional approaches,
    significantly more effort and resources are invested in a single release, raising
    the stakes and the potential for failure. In this context, engineers will frequently
    spend many hours in isolation before a major release. This is often referred to
    as “crunch time.” The developers labored for weeks, if not months, preparing for
    this release, and now they are making one last effort to fix any problems that
    may have popped up to launch on time. On the other hand, instead of throwing a
    huge party every time a new release or upgrade is rolled out, DevOps teams operate
    in shorter, more regular cycles. Because less effort will have been needed since
    the last development cycle, the risks of a release are significantly reduced.
    The use of automated testing ensures that their environments are consistent and
    reliable. Only when DevOps is sure the transition will be successful do they promote
    a product version to the next stage. Notably, getting new features into production
    more quickly is made possible by ousting the concept of a release window entirely.
  prefs: []
  type: TYPE_NORMAL
- en: When preparing for a release in the past, multiple people would need to be involved
    to compile all of the necessary information and data, resulting in a lengthy report
    that was then presented to upper management. In many cases, lengthy reports represent
    a bottleneck since the reader isn’t sure which pieces of information are the most
    important or if those reports are still relevant by the time they receive them.
    In contrast, when automated operations are carried out inside of the DevOps-centric
    team, it is possible for you to swiftly collate new information and respond to
    it effectively. This means that you won’t have to waste time sitting down and
    clicking through multiple pages of data. If you delegate the task of collecting
    application data to a DevOps-oriented team, you can ensure that each member of
    that team has a greater awareness of the information and data that is associated
    with the task at hand. Not only does this minimize the time required to obtain
    the information, but it also minimizes the time required to get approval from
    management.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, organizations that follow traditional methods often avoid taking
    any unnecessary risks. Because the culture is centered on employees doing all
    they can to avoid causing damage to the company, those employees are under an
    enormous amount of pressure to ensure that everything is flawless. However, in
    actuality, nothing will ever reach the pinnacle of perfection. DevOps engenders
    a culture that diverges significantly from conventional methods. The group embraces
    a culture of early failure recognition, acknowledging the inevitability of setbacks.
    Therefore, a robust framework and systematic approach are established to facilitate
    managed failure through ongoing testing, incremental deployments, and automation.
    The DevOps team embraces the perspective that the earlier a failure occurs, the
    lesser its consequences and the faster the eventual recovery.
  prefs: []
  type: TYPE_NORMAL
- en: Notably, conventional strategies make use of a price-per-performance model,
    which examines the quantity of work that can be accomplished with the least amount
    of financial investment. Adopting this strategy comes with several risks, the
    most significant being that it is tricky to reduce expenses while still maintaining
    the same capacity as before. This is the reason why many businesses that use legacy
    strategies are forced to outsource operations frequently. This concept of efficiency
    was expanded a lot further by DevOps, which added the notion of “flow,” given
    that the amount of time spent on new applications should be the strategic metric.
    This motivates the team to analyze cycle times to find any areas of waste and
    estimate genuine productivity. This allows developers to focus their attention
    on activities that offer the greatest value to the customer.
  prefs: []
  type: TYPE_NORMAL
- en: With legacy methods, each individual performs their assigned work-in-progress
    before passing it over to their colleagues further down the value chain. In this
    setting, they’ll be so concerned with finishing on time that they won’t bother
    making sure their work can be used in real-world conditions. When this approach
    is taken, quality often suffers, and no one is held responsible. In contrast,
    DevOps emphasizes the establishment of a cross-functional organization in which
    all members share responsibility for the successful completion of tasks. Since
    producing high-quality software is the shared objective of the team, all members
    will agree on what constitutes a job well done. Instead of stressing out about
    the minutia of their work, they are motivated by the greater picture.
  prefs: []
  type: TYPE_NORMAL
- en: A case study of how DocuSign transitioned from Agile to DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DocuSign is a pioneer in electronic signatures and digital transaction management.
    Few innovations have had as much impact on the way agreements are made, signed,
    and managed as DocuSign in the age of digital transformation. The history of product
    management at DocuSign has been characterized by eliminating obstacles, inventing
    creative solutions, and constantly adapting to meet the constantly evolving expectations
    of its customers. This innovative company was founded by Tom Gonser, who paved
    the way for a solution that revolutionized global business practices.
  prefs: []
  type: TYPE_NORMAL
- en: In this case study, we’ll reveal how DocuSign transformed from an Agile business
    to a DevOps powerhouse.
  prefs: []
  type: TYPE_NORMAL
- en: The genesis of DocuSign
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The tale of DocuSign started in the late 1990s, when Tom Gonser, a visionary
    entrepreneur and skilled software engineer, identified the shortcomings and complexities
    inherent in the conventional method of signing agreements. Inspired by the growing
    power of the internet and irritated by the laborious paper-based processes, Gonser
    dreamed of a digital alternative that could transform the way that businesses
    and individuals fulfilled and conveyed agreements.
  prefs: []
  type: TYPE_NORMAL
- en: With the help of co-founders Court Lorenzini and Eric Ranft, as well as other
    individuals, Tom Gonser founded DocuSign in 2003 to revolutionize the traditional
    method of signing contracts by transforming it into an online process that was
    simplified, secure, and fast. Their goal was to develop a system that would make
    it possible for individuals and corporations to digitally sign papers from any
    location in the world, freeing them from the limitations that were imposed by
    physical paperwork and geographical constraints.
  prefs: []
  type: TYPE_NORMAL
- en: With determination and a strong conviction in the game-changing potential of
    the internet, Gonser and his team built the foundation of the platform’s technology,
    utilizing algorithmic cryptography and e-signature techniques to guarantee the
    legality and legitimacy of digital contracts. In only a few years of its existence,
    DocuSign quickly rose to prominence in the e-signature industry thanks to its
    early success and user-friendly interface.
  prefs: []
  type: TYPE_NORMAL
- en: The transformation to DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DocuSign has consistently embraced an Agile approach to development since its
    inception. However, progressing into DevOps processes proved to be quite challenging.
    Given the nature of their business, dealing with contracts and signatures, continuous
    integration and delivery pose significant challenges. Their entire existence revolves
    around the intricate transactional process of exchanging signatures and approvals,
    which is extremely difficult to test for from a software development standpoint.
    In the event of any errors occurring, such as a misattributed approval, it would
    pose a major threat to their business. To enhance the efficiency of modern development,
    they utilized a highly efficient strategy known as an application *mockup*, or
    *mock* for short. Specifically, they use a mock for their internal API. The tool
    provides a simulated endpoint and delivers simulated responses. Using this approach,
    DocuSign was able to seamlessly integrate its application testing approach with
    incident management and thoroughly test the application using simulations that
    closely resembled real-world transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Obstacles encountered by DocuSign’s product team
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the most important parts of the DevOps release management life cycle
    is continuous integration. This is the stage where new features and updated code
    are added to and merged with the original codebase. At each part of this process,
    we find and fix errors in the code using unit testing, and we update the source
    code appropriately. Let’s examine the unique challenges faced by the development
    team at DocuSign and discover how they overcame them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Regulations concerning compliance and security**: DocuSign operates in the
    domain of confidential papers and legal contracts and must cope with the difficulty
    of complying with constantly changing requirements regarding compliance and security.
    Product managers oversee the intricate domain of worldwide legislation, guaranteeing
    that the platform adheres to diverse industry compliance standards, legal frameworks,
    and linguistic complexities while upholding data security.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Improving the user experience in the face of complexity**: Digitally signing
    documents is an extremely important process, and it presents a considerable challenge
    to simplify it without losing its functionality or security. Product management
    must pay careful attention to strike a balance between efforts to improve the
    customer experience and the complexities of handling confidential documents and
    verifying their legitimacy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Difficulties associated with integration and interoperability**: The challenge
    for DocuSign’s product management was to achieve frictionless integration as well
    as compatibility with a wide variety of platforms and applications developed by
    other companies. This is because organizations are using a vast array of digital
    solutions. One of the most important things that DocuSign needed to do was make
    sure that it could easily integrate with the workflows and systems that its users
    already had in place.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The developers at DocuSign successfully established the principles of DevOps
    release management in their organization by creating a custom, in-house test framework
    that centered around their transactional mockup-based strategy. This allowed the
    team to tackle the highly challenging task of performing automated integration
    testing against a complex application featuring intricate approval processes,
    secure graphical interfaces, and strongly encrypted API transactions within a
    CI/CD pipeline. With the success of these innovative testing strategies, DocuSign
    was able to rapidly mature its business model so that it included new product
    lines and maintained its position as the industry-dominant e-signature product
    company that it is today.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This concludes [*Chapter 5*](B21803_05.xhtml#_idTextAnchor078). At this point,
    you have a firm grasp on the meaning of what makes DevOps release management unique.
    You learned how DevOps is a holistic practice, taking every component of a value
    stream into account while formulating solutions or improving the overall system.
    DevOps is unique in that it integrates CI/CD, QA, security, and feedback. Through
    the use of well-crafted, automated pipelines and a carefully selected patchwork
    of testing and approval processes, DevOps release management stands alone compared
    to other release management models. A critically important feature that is unique
    to the DevOps philosophy is incorporating business teams into the development
    process. You also explored *the three ways of DevOps*, a vitally important notion
    that was popularized by *Gene Kim*, author of *The DevOps Handbook*. At this point,
    you are well poised to distinguish traditional release management methodologies
    and DevOps ones.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be reviewing the basics of CI/CD. Today’s release
    managers must be fluent with CI/CD procedures, DevOps, and automated deployment
    technologies. You need to have an understanding of how the CI/CD pipeline operates
    and be capable of recognizing problems at an early stage, which is essential to
    DevOps release management.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What are *the three ways* *of DevOps*?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does *shift-left* mean?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are tight feedback loops and why are they important?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is eliminating silos or individual teams working in isolation necessary
    for the success of your organization?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is DevSecOps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why are job designations such as *DevOps engineer* and *director of DevOps*
    a myth?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can using DevOps release management minimize dependence on other teams?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is *crunch time* and how does DevOps prevent it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the primary objective of DevOps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the significance of having a comprehensive tools integration platform?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
