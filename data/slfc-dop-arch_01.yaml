- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: A Brief History of Deploying Salesforce Changes
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Salesforce 变更部署的简史
- en: With Salesforce’s own delivery model coming in the form of three major releases
    per year, the platform has evolved substantially since it was first made available
    back in 2000\. From its early days as a predominantly sales tool, Salesforce has
    evolved to become a development platform in its own right. With this change came
    the need to bring true development best practices to your customizations and the
    need to deliver them effectively.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce 的交付模式每年发布三次主要版本，自 2000 年首次推出以来，平台经历了显著的发展。从最初作为一个主要的销售工具开始，Salesforce
    已发展成一个独立的开发平台。随着这一变化，平台对自定义开发最佳实践的需求应运而生，并且需要高效地交付这些自定义功能。
- en: 'In this chapter, we’ll be looking at the history of making and delivering changes
    on the Salesforce platform, to understand the current shortcomings of the built-in
    tools. This will help set the context for the necessity of a DevOps process and
    where the current state of the art sits today. We’ll be covering the following
    main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将探讨在 Salesforce 平台上进行变更和交付的历史，以了解内置工具当前的不足之处。这将为理解 DevOps 流程的必要性提供背景，并展示现阶段的技术现状。我们将讨论以下主要内容：
- en: The beginnings of customizing Salesforce
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义 Salesforce 的开端
- en: Apex and Visualforce
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apex 和 Visualforce
- en: Sandboxes and change sets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 沙盒和变更集
- en: SFDX and scratch orgs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SFDX 和暂存组织
- en: DevOps Center
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 中心
- en: Unlike the rest of this book, this chapter does not necessarily provide actionable
    steps or best practice guidance that you can apply to your Salesforce implementations.
    However, one of the fundamental principles of being a good Salesforce architect
    is to understand the *why* of our decisions. By looking at the history of Salesforce
    as a development platform, and how it has continued to steer toward contemporary
    software development approaches and tooling, we can better understand the need
    for DevOps in the Salesforce ecosystem.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书的其他章节不同，本章并不一定提供可操作的步骤或最佳实践指南，供您在 Salesforce 实施中应用。然而，成为一名优秀 Salesforce 架构师的基本原则之一就是理解我们决策背后的
    *原因*。通过回顾 Salesforce 作为开发平台的发展历史，以及它如何不断朝着现代软件开发方法和工具迈进，我们能更好地理解在 Salesforce 生态系统中实施
    DevOps 的必要性。
- en: An introduction to the history of Salesforce as a development platform
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Salesforce 作为开发平台的历史介绍
- en: For any sufficiently complex IT system, it is important to consider the full
    range of architectural considerations in both the implementation phase and the
    day-to-day running of the system. These considerations are not just technical
    aspects but those that sit at the business level as well – strong governance,
    accurate and up-to-date documentation, definable metrics, and a demonstrable return
    on investment to the business.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何足够复杂的 IT 系统，在实施阶段和日常运营中，考虑全面的架构因素都至关重要。这些考虑不仅仅是技术层面的内容，还包括业务层面的因素——强有力的治理、准确且及时更新的文档、可定义的指标，以及能够向企业展示的投资回报。
- en: As Salesforce has grown, so has the need to apply these architectural factors
    to the work we do on the platform. Salesforce has become a *first-class citizen*
    in many organizations, acting as the digital hub to run a business. A proper change
    management process is therefore critical to avoid interruptions of service, and
    DevOps is the perfect approach to that requirement. DevOps promises faster, more
    accurate software releases, fewer errors, less downtime, and a faster path to
    recovery when problems occur.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Salesforce 的发展，应用这些架构因素的需求也随之增加。Salesforce 在许多组织中已经成为 *一等公民*，作为企业运作的数字枢纽。因此，一个适当的变更管理过程对于避免服务中断至关重要，而
    DevOps 是满足这一要求的完美方法。DevOps 承诺更快、更准确的软件发布、更少的错误、更少的停机时间以及在问题发生时更快的恢复路径。
- en: We can reasonably pinpoint Salesforce first becoming a development platform
    in 2003\. At the company’s inaugural edition of Dreamforce, their flagship conference
    that continues annually to the present day, they announced a fundamental shift
    in how customers can customize the platform. Dubbed **sforce 2.0**, it was initially
    positioned as an *on-demand application server* and included some key capabilities,
    which we’ll explore next.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以合理地将 2003 年视为 Salesforce 成为开发平台的起点。在公司首届 Dreamforce 大会——这一至今每年仍持续举办的旗舰会议上，他们宣布了客户如何自定义平台的根本性变化。这个被称为
    **sforce 2.0** 的版本，最初被定位为 *按需应用服务器*，并包含一些关键功能，我们将接下来详细探讨。
- en: Custom objects
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义对象
- en: The first major innovation introduced at this time was the ability to create
    additional custom objects, much like database tables, to complement the built-in
    objects provided by Salesforce for their core CRM capabilities. These custom objects
    could themselves contain custom fields and together provided the early framework
    for developing custom business applications on the platform.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此时引入的第一个重大创新是能够创建额外的自定义对象，类似于数据库表，用来补充 Salesforce 为其核心 CRM 功能提供的内置对象。这些自定义对象本身可以包含自定义字段，并共同为在平台上开发自定义业务应用提供了早期框架。
- en: Suddenly, Salesforce had moved from being just a sales CRM system and started
    moving toward becoming a platform to develop custom business applications. Salesforce
    teams were now able to start tailoring processes and applications to the core
    needs of their business, regardless of which industry they worked in. For example,
    some Salesforce customers would leverage this capability to start building out
    the ability to handle support cases for their business – something that didn’t
    become a core platform capability until the announcement of Service Cloud in 2009.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 突然，Salesforce 不再仅仅是一个销售 CRM 系统，而是开始向成为一个开发自定义业务应用的平台转型。Salesforce 团队现在可以开始根据他们业务的核心需求定制流程和应用，无论他们所属的行业是什么。例如，一些
    Salesforce 客户将利用这一能力来构建处理业务支持案例的能力——这项功能直到 2009 年 Service Cloud 发布时才成为平台的核心能力。
- en: S-Controls
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: S-Controls
- en: S-Controls (initially called *sforce controls*) were one of the two programmatic
    elements of the new customization capabilities. Combining both functionality and
    user interface elements in one container, S-Controls could contain any items that
    could be displayed in a browser, such as Java applets, ActiveX controls, and web
    forms.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: S-Controls（最初称为 *sforce controls*）是新定制功能中两个编程元素之一。S-Controls 将功能和用户界面元素结合在一个容器中，可以包含任何可以在浏览器中显示的项目，例如
    Java 小程序、ActiveX 控件和网页表单。
- en: While they’ve been long since deprecated, S-Controls were the first method made
    available for developers to customize the platform in a programmatic way, and
    they allowed them to bring skillsets and programming languages from other non-Salesforce
    development into the platform. They enabled Salesforce developers to harness HTML
    and JavaScript for the creation of custom pages and user interface components.
    In this sense, they could be potentially viewed as an early forerunner of Lightning
    Web Components but without much of the best practice we use today.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 S-Controls 已经被弃用很久，但它们是开发者首次可以用编程方式定制平台的工具，它们使开发者能够将其他非 Salesforce 开发的技能和编程语言带入平台。它们使
    Salesforce 开发者能够利用 HTML 和 JavaScript 创建自定义页面和用户界面组件。从这个角度来看，它们可以被视为 Lightning
    Web Components 的早期先驱，尽管当时并没有我们今天使用的最佳实践。
- en: SOQL
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SOQL
- en: Sforce 2.0 also introduced **Sforce Object Query Language** (**SOQL**), which
    provided a means of querying data from both standard and custom objects, with
    a syntax like the industry standard, SQL. This provided developers with a powerful
    mechanism with which to query the data in their Salesforce organization programmatically
    and act upon the results of these queries.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Sforce 2.0 还引入了 **Sforce 对象查询语言** (**SOQL**)，它提供了一种从标准对象和自定义对象中查询数据的方式，语法类似于行业标准的
    SQL。这为开发者提供了一个强大的机制，能够通过编程查询 Salesforce 组织中的数据，并对查询结果进行操作。
- en: If we were to look at SOQL from an architect’s perspective, we can see how this
    aligns with the need to ensure that your data quality is of as high a standard
    as your metadata. Clean, actionable data to drive business decisions should always
    be one of the key deliverables for an architect. SOQL provided an additional means
    of working with this data, whether operationally for the day-to-day business or
    as the beginning of a means to extract data from the platform for archival purposes.
    This latter use case is something that we’ll explore later as we look at the importance
    of backups in a well-architected Salesforce DevOps strategy.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从架构师的角度看 SOQL，我们可以看到它如何与确保数据质量与元数据质量同等重要的需求相一致。干净、可操作的数据是推动业务决策的关键交付物之一，应始终是架构师的重要任务之一。SOQL
    提供了一种额外的方式来处理这些数据，无论是日常业务中的操作数据，还是作为从平台中提取数据进行归档的手段。我们稍后将探讨这一后者的使用案例，特别是在分析良好架构的
    Salesforce DevOps 策略中备份的重要性时。
- en: Sforce web services
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Sforce Web 服务
- en: One of the other fundamental new capabilities of sforce 2.0 was the ability
    to integrate Salesforce with other platforms, thanks to the exposing of the object
    model and business logic via web service APIs. Using the standards at the time,
    SOAP and WSDL, it was now possible to interact with your Salesforce organization
    from more traditional development environments and systems, over a network.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: sforce 2.0 的另一个基本新功能是能够将 Salesforce 与其他平台集成，这得益于通过 Web 服务 API 曝露了对象模型和业务逻辑。使用当时的标准
    SOAP 和 WSDL，现在可以通过网络从更传统的开发环境和系统与 Salesforce 组织进行交互。
- en: Workflows
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作流
- en: The last major element introduced with sforce 2.0 was a business process automation
    engine called workflows. By defining workflow rules that responded to changes
    in your data, business logic could be triggered for things such as escalations,
    notifications, and automatic updates to data in response to events. Workflows
    were still very much a config, not code, means of delivering functionality, but
    as we’ll see later, being a low-code solution does not mean that it should be
    ignored when it comes to DevOps.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: sforce 2.0 引入的最后一个重大元素是一个名为工作流的业务过程自动化引擎。通过定义响应数据变化的工作流规则，可以触发业务逻辑，处理诸如升级、通知和根据事件自动更新数据等操作。工作流仍然是一个配置而非代码的功能实现方式，但正如我们稍后看到的，作为一种低代码解决方案，并不意味着在
    DevOps 中应该被忽视。
- en: Apex and Visualforce
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Apex 和 Visualforce
- en: At the 2006 edition of Dreamforce, Salesforce’s flagship conference, co-founder
    Parker Harris revealed the most significant change to the Salesforce platform
    to date. Customers were now able to develop custom solutions using Salesforce’s
    own programming language, called **Apex**, right within Salesforce itself.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2006 年的 Dreamforce 大会——Salesforce 的旗舰会议上，联合创始人 Parker Harris 揭示了迄今为止 Salesforce
    平台最重要的变化。客户现在可以使用 Salesforce 自己的编程语言——**Apex**，直接在 Salesforce 内部开发自定义解决方案。
- en: A variant of the popular Java programming language, Apex enabled automation
    through code for the first time. Originally limited to triggers only, developers
    could now take a programmatic approach to responding to data changes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 作为流行的 Java 编程语言的变体，Apex 首次通过代码实现自动化。最初仅限于触发器，开发者现在可以通过编程方式响应数据变化。
- en: Later in the evolution of the platform, Apex would adopt more of the object-oriented
    paradigm with the arrival of Apex classes, allowing developers to build a more
    structured, decoupled implementation than triggers alone could deliver.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在平台演变的后期，Apex 引入了更多面向对象的范式，随着 Apex 类的到来，允许开发者构建比仅使用触发器更结构化、解耦的实现方式。
- en: Alongside Apex, the other major innovation to the Salesforce platform was Visualforce,
    introduced in 2008\. Taking cues from other contemporary UI languages such as
    ASP or PHP, Visualforce blended HTML with programmatic elements and markup that
    connected back to your logic written in Apex. Visualforce went on to quickly supersede
    the S-Controls that were previously introduced, becoming the standard way to write
    custom user interfaces and pages in your Salesforce implementation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Apex，Salesforce 平台的另一项重大创新是 Visualforce，后者于 2008 年推出。Visualforce 从当时的其他 UI
    语言，如 ASP 或 PHP 中汲取灵感，将 HTML 与编程元素和标记结合在一起，这些标记又连接回你在 Apex 中编写的逻辑。Visualforce 很快取代了之前推出的
    S-Controls，成为在 Salesforce 实现中编写自定义用户界面和页面的标准方式。
- en: With all these advances in the platform for development and customization, Salesforce
    then turned its attention to how to deliver them. Let’s look at how this was initially
    introduced in the next section.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 随着平台在开发和定制方面的所有这些进展，Salesforce 随后将注意力转向了如何交付这些功能。让我们在下一节中看看这些功能最初是如何被引入的。
- en: Sandboxes and change sets
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 沙箱和变更集
- en: As Salesforce continued to mature, the need to be able to safely make changes
    outside of production and move them across when ready became obvious. However,
    the pace of DevOps innovation did not seem to keep up with the rise of Salesforce
    as a development platform.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Salesforce 的不断成熟，需要能够在生产环境外安全地进行更改，并在准备好时将其迁移到生产环境的需求变得愈加明显。然而，DevOps 创新的步伐似乎未能跟上
    Salesforce 作为开发平台崛起的步伐。
- en: Sandboxes were introduced in the winter 2006 release, allowing customers to
    try out changes and enhancements in a safe environment away from production –
    but with a catch. The original implementation of sandboxes did not allow you to
    move those changes *back* to production, meaning that you had to recreate those
    changes again in your production environment manually. This would be both time-consuming
    and error-prone.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 沙盒功能在 2006 年冬季发布时推出，使客户能够在远离生产环境的安全环境中尝试更改和增强功能——但也有一个限制。沙盒的原始实现并不允许你将这些更改*回传*到生产环境，这意味着你必须手动重新创建这些更改到生产环境中。这将既耗时又容易出错。
- en: In recognition of this shortcoming, change sets were initially introduced in
    beta for the winter 2010 release, some four years after sandboxes, and finally,
    they became generally available in the Spring 2011 release. Change sets finally
    allowed the code and configuration work done in sandbox environments to be packaged
    up and moved between environments, whether from sandbox to sandbox, sandbox to
    production, or even production to sandbox. This opened up new possibilities to
    plan Salesforce environments as part of a mature application development life
    cycle – you could now have dev, QA, UAT, and staging environments ahead of production
    go-live. This was the first significant step toward achieving a DevOps process
    that matched those on other development platforms.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对这一不足，变更集最初在 2010 年冬季发布的 beta 版本中推出，距沙盒发布已有约四年，最终它们在 2011 年春季发布中成为了正式版本。变更集最终允许在沙盒环境中进行的代码和配置工作打包并在环境之间迁移，无论是从沙盒到沙盒，沙盒到生产，还是生产到沙盒。这为将
    Salesforce 环境作为成熟应用程序开发生命周期的一部分进行规划开辟了新可能——现在，你可以在生产上线前拥有开发、QA、UAT 和预发布环境。这是迈向与其他开发平台相匹配的
    DevOps 过程的第一步。
- en: Metadata and Tooling APIs
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元数据和工具 API
- en: To open the platform to better tooling for development and deployment, Salesforce
    introduced two important APIs – Metadata API in the Spring 2008 release and Tooling
    API in the Spring 2013 release. While they both fulfilled similar functions, there
    were some important differences in their aims and functionality.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为开发和部署提供更好的工具，Salesforce 在 2008 年春季发布了两个重要的 API——元数据 API 和 2013 年春季发布的工具 API。尽管它们都履行了相似的功能，但它们的目标和功能上有一些重要的区别。
- en: Metadata API
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元数据 API
- en: At the simplest level, metadata is data that describes the *structure* of your
    data, but for the Salesforce platform, that is a bit of an oversimplification.
    The term *metadata* covers many of the configuration and customization elements
    of Salesforce as well – at the time of writing, Salesforce’s own Metadata Coverage
    Report, available at [https://developer.salesforce.com/docs/metadata-coverage](https://developer.salesforce.com/docs/metadata-coverage),
    indicates 601 metadata types in the platform, the vast majority of which are covered
    in Metadata API.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在最简单的层面上，元数据是描述你数据*结构*的数据，但对于 Salesforce 平台来说，这有些过于简化。*元数据*一词还涵盖了 Salesforce
    的许多配置和自定义元素——截至写作时，Salesforce 自己的元数据覆盖报告可在 [https://developer.salesforce.com/docs/metadata-coverage](https://developer.salesforce.com/docs/metadata-coverage)
    查阅，报告显示平台上有 601 种元数据类型，其中绝大多数都在元数据 API 中得到支持。
- en: Metadata API can be used to move this metadata between environments. You can
    retrieve the metadata as XML files from one Salesforce organization and deploy
    it into another. Much like change sets, the source and target for these operations
    can be sandboxes, production, or, as we’ll learn about shortly, scratch orgs.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据 API 可以用来在环境之间移动这些元数据。你可以从一个 Salesforce 组织中检索元数据作为 XML 文件，并将其部署到另一个组织中。就像变更集一样，这些操作的源和目标可以是沙盒、生产环境，或者正如我们稍后会学习的那样，临时组织。
- en: Additionally, Metadata API allows you to create, update, and delete metadata
    within a Salesforce org, and this unlocks a fundamental capability for both Salesforce
    development and to adopt a DevOps approach on the platform.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，元数据 API 允许你在 Salesforce 组织中创建、更新和删除元数据，这为 Salesforce 开发和在平台上采用 DevOps 方法解锁了一个基本能力。
- en: The Metadata API underpins most DevOps tools on the platform, whether that’s
    Salesforce’s own SFDX, the new DevOps Center, or the various third-party Salesforce
    DevOps solutions available. They all leverage Metadata API to coordinate the movement
    of your code and config between environments.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 平台上的大多数 DevOps 工具都依赖于元数据 API，无论是 Salesforce 自家的 SFDX、新的 DevOps 中心，还是各种可用的第三方
    Salesforce DevOps 解决方案。它们都利用元数据 API 来协调代码和配置在不同环境之间的迁移。
- en: Tooling API
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具 API
- en: While Metadata API did much of the heavy work of managing metadata, Salesforce
    introduced Tooling API to provide further capabilities that better aligned to
    DevOps practices, such as smaller and more focused metadata retrieval and deployment,
    the ability to run unit tests and view both the test results and the associated
    code coverage, and support for some additional code debugging capabilities.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Metadata API 大部分处理了元数据管理的繁重工作，Salesforce 推出了 Tooling API，提供了更多功能，更好地对接了 DevOps
    实践，比如更小更精确的元数据检索和部署，运行单元测试并查看测试结果及相关代码覆盖率，以及支持一些额外的代码调试能力。
- en: Being able to manage unit test cycles makes Tooling API another strong candidate
    for use in DevOps processes and tools. As architects, we need to ensure that we
    not only deliver code *quickly* but also that it is of the right quality – it
    doesn’t break in isolation, it doesn’t break existing code, it fulfills the requirements
    for which it was created, and it deploys between Salesforce organizations seamlessly.
    These are all factors of the Change Failure Rate, one of the fundamental DevOps
    metrics that we’ll explore in the next chapter as we look at what the key considerations
    to develop a DevOps culture as architects are.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 能够管理单元测试周期使 Tooling API 成为在 DevOps 过程和工具中另一个强有力的选择。作为架构师，我们需要确保我们不仅能够快速交付代码，而且代码质量符合要求——它不会在孤立环境中出现问题，不会破坏现有代码，并且能够在
    Salesforce 组织之间无缝部署。这些都是变更失败率的因素，是我们在下一章中将要探讨的基本 DevOps 指标之一，因为我们将研究作为架构师开发 DevOps
    文化的关键考虑因素。
- en: Tooling API is primarily targeted at those wishing to create additional development
    tools or apps for the platform, and its arrival heralded Salesforce development
    support in some of the popular IDEs of the day, which we will look at next.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Tooling API 主要面向希望为平台创建额外开发工具或应用程序的人群，并且其到来预示着 Salesforce 开发支持在当时流行的 IDE 中，我们将在接下来看到。
- en: The Force.com IDE and Mavensmate
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Force.com IDE 和 Mavensmate
- en: With new tools that leveraged Metadata and Tooling APIs, it was no longer necessary
    to develop for the Salesforce platform from within the platform. To assist developers
    with this approach, Salesforce started looking at how best to deliver a standardized
    developer experience that matched the standards of the time. Let’s run through
    the tools available at that time.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用了利用元数据和工具 API 的新工具，不再需要在 Salesforce 平台内部开发。为了帮助开发人员采用这种方法，Salesforce 开始研究如何提供符合当时标准的标准化开发人员体验。让我们来看看当时可用的工具。
- en: The Force.com IDE
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Force.com IDE
- en: One of the early IDEs that took advantage of this was Salesforce’s own Force.com
    IDE.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 早期利用这一特性的 IDE 之一就是 Salesforce 自己的 Force.com IDE。
- en: Built on top of the modular plugin architecture of the popular Eclipse development
    environment that was predominantly used for Java, the Force.com IDE took advantage
    of the new APIs to allow developers to not only code with a proper editor but
    also to save their changes back in their development organizations, directly from
    the IDE, without having to switch back to the Salesforce user interface.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 基于流行的 Eclipse 开发环境的模块化插件架构构建，Force.com IDE 利用新的 API 允许开发人员不仅使用适当的编辑器编码，还可以直接从
    IDE 将更改保存回他们的开发组织，而无需切换回 Salesforce 用户界面。
- en: The Force.com IDE became very popular very quickly, as it was the first attempt
    to provide a modern environment for Salesforce developers, with some of the niceties
    that developers on other platforms such as Java or .NET had come to expect. However,
    it developed a reputation for being slow and unstable equally as quickly.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Force.com IDE 很快变得非常流行，因为它是为 Salesforce 开发人员提供现代环境的首次尝试，并具备其他平台（如 Java 或 .NET）开发人员期望的一些便利条件。然而，它同样迅速地因为速度慢和不稳定而声名狼藉。
- en: Mavensmate
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mavensmate
- en: As an antidote to the heavyweight installation of Eclipse and the plugin, and
    as a potential means to improve speed and stability, 2013 saw the arrival of another
    development tool for Salesforce – Mavensmate.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 Eclipse 和插件的重量级安装的解毒剂，并作为提高速度和稳定性的潜在手段，2013 年见证了另一款 Salesforce 开发工具的到来——Mavensmate。
- en: Mavensmate took the same plugin approach as the Force.com IDE, in that it effectively
    extended another editor called **Sublime Text** (and later, support was added
    for the rival Atom editor), but both the underlying editor and the Mavensmate
    plugin on the top were considerably more lightweight. This made working with Salesforce
    development easier, faster, and more stable than ever before, and Mavensmate became
    the choice of Salesforce developers everywhere on the basis of its speed and ease
    of use – not just for development but also to deploy changes, thanks to the use
    of the Metadata and Tooling APIs.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Mavensmate采用了与Force.com IDE相同的插件方式，它有效地扩展了另一款编辑器**Sublime Text**（后来还添加了对竞争对手Atom编辑器的支持），但无论是底层的编辑器还是上层的Mavensmate插件，都要轻量得多。这使得使用Salesforce进行开发更加简单、快速和稳定，Mavensmate因其速度和易用性成为了全球Salesforce开发者的首选——不仅仅是用于开发，还可以通过使用Metadata和Tooling
    API进行变更部署。
- en: Introducing SFDX
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入SFDX
- en: The state of Salesforce change management had largely remained stable for several
    years. For the majority of Salesforce developers and admins, change sets remained
    the definitive means of delivering change from sandbox to production.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce的变更管理状态在多年间大致保持稳定。对于大多数Salesforce开发者和管理员来说，变更集仍然是将更改从沙箱环境部署到生产环境的最终方式。
- en: All this changed again when Salesforce released its SFDX toolchain in 2018\.
    SFDX offered the promise of modern development and deployment practices, seen
    on other platforms, delivered through a command-line tool. Suddenly, the potential
    existed for advanced, scriptable deployments, more robust IDE integration, and
    a new way to manage changes. Most importantly, it represented the move toward
    a source-driven development model for Salesforce, rather than the traditional
    organization-based model.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这一切在2018年Salesforce发布其SFDX工具链时发生了变化。SFDX承诺带来了现代化的开发和部署实践，这些实践在其他平台上已有实现，并通过命令行工具提供。突然之间，存在了高级可脚本化部署、更强大的IDE集成以及管理变更的新方式的潜力。最重要的是，它标志着Salesforce朝着源代码驱动的开发模式转变，而不是传统的基于组织的模式。
- en: The SFDX **command-line interface** (**CLI**) was coupled with the introduction
    of scratch orgs. These are ephemeral development environments that can be spun
    up and torn down easily from SFDX, created using different configurations (or
    *org shapes*), and populated with test data. The ability to create them from a
    command lent itself to a new era of automated testing, as we shall see later,
    but it also reinforced the principle that organizations are now secondary to source
    code. If a scratch org expires, it’s not a major issue because another one can
    be easily recreated from the source code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: SFDX的**命令行界面**（**CLI**）与scratch orgs的引入紧密结合。这些是临时的开发环境，可以轻松地从SFDX创建和销毁，使用不同的配置（或*组织形态*）创建，并填充测试数据。从命令创建scratch
    org的能力为自动化测试开辟了新纪元，正如我们稍后将看到的那样，但它也强调了一个原则：现在，组织已不再是首要的，源代码才是核心。如果一个scratch org过期了，这并不是一个大问题，因为可以轻松地从源代码重新创建一个。
- en: Finally, Salesforce had recognized the need for tight integration with development
    tools and provided extensions for the popular **Visual Studio** (**VS**) Code
    environment, easing both development and deployment on the Salesforce platform,
    right from the IDE. Additionally, by building on open standards such as the **Open
    Command Line Interface Framework** (**OCLIF**), it opened the tool up to extension
    via plugins, which were contributed from both inside and outside Salesforce, extending
    the capabilities of the SFDX CLI and filling some of the gaps that the tool didn’t
    cover natively.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，Salesforce意识到与开发工具紧密集成的必要性，并为流行的**Visual Studio**（**VS**）Code环境提供了扩展，使得在Salesforce平台上的开发和部署变得更加简便，直接从IDE中操作。此外，通过构建基于开放标准的**Open
    Command Line Interface Framework**（**OCLIF**），它使工具能够通过插件进行扩展，这些插件来自Salesforce内部和外部，扩展了SFDX
    CLI的功能，填补了该工具本身无法覆盖的一些空白。
- en: SFDX continues to be the Salesforce-recommended approach for developers working
    with the platform, especially around integrating it into CI/CD pipelines and other
    automation. As of December 2022, Salesforce is continuing a drive toward a unified
    CLI that combines the SFDX command line and the newer SF command line, which introduced
    a newer structure and a cleaner approach. This consolidation will hopefully result
    in an even more efficient command-line toolset that will increase the ease of
    building a robust DevOps pipeline.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: SFDX 继续是 Salesforce 推荐的开发者使用平台的方式，特别是在将其集成到 CI/CD 流水线和其他自动化工具中。截止到 2022 年 12
    月，Salesforce 正在推动统一命令行界面的发展，将 SFDX 命令行和更新的 SF 命令行结合起来，后者引入了更新的结构和更简洁的方法。这一整合有望带来一个更高效的命令行工具集，提升构建强大
    DevOps 流水线的便利性。
- en: DevOps Center
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 中心
- en: Salesforce has long acknowledged that the platform has outgrown change sets,
    but SFDX was (and still is) perceived by its customers as a tool solely for developers
    and those comfortable with the command line, despite the VS Code extensions that
    made it easier to work with. A considerable ecosystem of third-party providers
    such as Gearset, Copado, AutoRABIT, and Flosum had sprung up to provide platforms
    for robust DevOps that better matched the wider IT industry’s best practices.
    These tools gave Salesforce developers and admins capabilities such as organization-to-organization
    comparisons, version control capabilities, static code analysis, and deployment
    pipelines.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce 长期以来一直承认平台已经超出了变更集的局限，但 SFDX（至今依然如此）在客户眼中被视为仅供开发人员和那些熟悉命令行的用户使用的工具，尽管
    VS Code 扩展让它变得更易于使用。一个由第三方提供商如 Gearset、Copado、AutoRABIT 和 Flosum 等组成的庞大生态系统已崛起，为提供符合更广泛
    IT 行业最佳实践的强大 DevOps 平台提供支持。这些工具为 Salesforce 开发人员和管理员提供了诸如组织间比较、版本控制、静态代码分析和部署流水线等功能。
- en: Salesforce entered this space with the release of DevOps Center, which became
    generally available in December 2022\. While not as feature-rich as the incumbent
    solutions from the third-party ecosystem, it represented a change of messaging
    from Salesforce to all users – a move away from change set deployments to something
    that was easy enough to work with, whether you were a low-code or pro-code admin
    or developer.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce 通过发布 DevOps 中心进入了这一领域，该产品在 2022 年 12 月正式发布。虽然它的功能不如第三方生态系统中的现有解决方案丰富，但它代表了
    Salesforce 对所有用户信息传递的变化——从变更集部署转向更易于操作的方式，无论你是低代码还是专业代码的管理员或开发人员。
- en: We’ll be exploring the specifics of DevOps Center (and indeed, the leading solutions
    in the third-party Salesforce DevOps space) in a later chapter, but it’s important
    to see how much of a fundamental shift in thinking this new product is, particularly
    when viewed in the context of the history of creating and delivering changes to
    the platform described earlier.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面的章节中深入探讨 DevOps 中心的具体内容（以及第三方 Salesforce DevOps 领域的领先解决方案），但重要的是要看到这个新产品在思维方式上的根本转变，特别是当它放在上述平台变更创建和交付历史的背景下来看。
- en: 'DevOps Center introduces much of the best practice in Salesforce DevOps that’s
    slowly been established, incrementally, over the years and packages it up in an
    easy-to-understand native interface, right within the platform:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 中心将 Salesforce DevOps 中经过多年逐步建立的最佳实践集中整合，并通过平台内易于理解的本地界面呈现：
- en: It guides Salesforce practitioners toward a model in which source control is
    the version of truth for changes, rather than sandbox organizations
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它引导 Salesforce 从业人员向一种模型转变，在该模型中，源代码管理是变更的真实版本，而不是沙箱组织。
- en: It encourages the concept of isolated, incremental change through work items,
    or user stories – a concept popularized by the agile movement and popular in the
    DevOps strategy of many other platforms and organizations
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它鼓励通过工作项或用户故事来实现孤立的、增量的变更——这一概念是敏捷运动推广的，并且在许多其他平台和组织的 DevOps 策略中广泛应用。
- en: Most importantly, it gives better visibility and accountability for change delivery
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最重要的是，它为变更交付提供了更好的可见性和问责制
- en: These are factors of the overall architecture of a DevOps process, which we
    shall delve into later in this book. It doesn’t cover every aspect thoroughly
    in the initial release, and it should very much be considered a DevOps *tool*
    rather than a DevOps *solution*, but as a means of educating Salesforce users
    on the basics of DevOps and weaning them off change sets, it’s a very solid start.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是 DevOps 流程总体架构的因素，稍后在本书中我们将深入探讨。它并没有在初始版本中全面覆盖每个方面，应该被视为一个 DevOps *工具*，而不是一个
    DevOps *解决方案*，但作为一种教育 Salesforce 用户了解 DevOps 基础并帮助他们逐步摆脱变更集的方式，它是一个非常坚实的起点。
- en: Summary
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at the history of Salesforce as a development platform
    and saw how features were added over the years. We also explored the approach
    to delivering those changes on Salesforce, from change sets, through the various
    APIs and tools that utilized them, to the arrival of DevOps Center.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了 Salesforce 作为开发平台的发展历史，并了解了多年来如何添加新功能。我们还探讨了如何在 Salesforce 上交付这些更改的方式，从变更集到使用它们的各种
    API 和工具，再到 DevOps Center 的出现。
- en: Armed with this knowledge, we can not only better appreciate how far the platform
    has come but also understand the reasoning behind some of the design choices we
    have today, gaining a little knowledge of older implementations, which can often
    prove useful when faced with having to work on older Salesforce organizations.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有这些知识后，我们不仅能够更好地理解平台的发展历程，还能理解一些设计选择背后的理由，了解一些较旧的实现方式，这在需要处理旧版 Salesforce 组织时常常会非常有用。
- en: As architects, it’s important to not take DevOps tooling for granted, and having
    the ability to work with a variety of different approaches and solutions, no matter
    how old, will help us to work with and improve the state of Salesforce DevOps
    for the implementations we deliver. In subsequent chapters, we’ll look at some
    of the most recent tooling and, more importantly, the techniques and processes
    that shape modern Salesforce DevOps.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 作为架构师，重要的是不要把 DevOps 工具当作理所当然，能够使用各种不同的方式和解决方案，不管它们有多古老，都将帮助我们改进 Salesforce
    DevOps 的现状，以便更好地交付我们的实施方案。在接下来的章节中，我们将讨论一些最新的工具，更重要的是，讨论塑造现代 Salesforce DevOps
    的技术和流程。
