- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Running Kubernetes with Other Cloud Pals
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与其他云服务伙伴一起运行Kubernetes
- en: Chances are that throughout this book, and perhaps even so far, you’re going
    to get whiplash by finding out about the number of places and different ways you
    can deploy Kubernetes. The reality is, you’re going to get even more whiplash
    in the real world. Whether you’re a full-time Kubernetes engineer or a consultant,
    every company that you go to is going to feel a bit different in the ways you’re
    deploying Kubernetes and where you’re deploying it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能在本书的整个过程中，甚至到目前为止，你会因为发现有那么多地方和不同的方式可以部署Kubernetes而感到目不暇接。现实是，在实际工作中，你将会遇到更多这种“鞭打”的情况。无论你是全职Kubernetes工程师还是顾问，每个你去的公司，在部署Kubernetes的方式和地点上都会有所不同。
- en: In the previous chapter, you learned about the three major Kubernetes cloud
    services – AKS, EKS, and GKE. However, there are a ton of other great options
    in the wild that are on private clouds and **Platform-as-a-Service** (**PaaS**)
    solutions. Although you’ll see a lot of organizations, ranging from start-ups
    to Fortune 200 companies and up, using popular Kubernetes cloud-based services
    such as AKS, EKS, and GKE, more and more organizations are starting to use private
    clouds for secondary Kubernetes clusters or even to save money because the larger
    cloud providers are typically far more expensive. Taking it to another level,
    some organizations are completely ditching the idea of having a Kubernetes cluster
    in the cloud and going PaaS, and you’ll see why in the upcoming sections.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你了解了三大Kubernetes云服务——AKS、EKS和GKE。然而，在私有云和**平台即服务**（**PaaS**）解决方案中，仍有许多其他出色的选项。虽然你会看到许多组织，从初创公司到财富200强及以上，都在使用流行的Kubernetes云服务，如AKS、EKS和GKE，但越来越多的组织开始为次级Kubernetes集群使用私有云，甚至是为了节省成本，因为大型云服务提供商通常价格更高。更进一步，一些组织完全放弃了在云中部署Kubernetes集群的想法，转而使用PaaS，接下来的章节会向你解释原因。
- en: By the end of this chapter and with the help of the previous chapter, you’ll
    be able to identify what solution your organization should go with and why it
    would be useful. From an individual perspective, you’ll walk away from this chapter
    with the know-how of multiple managed Kubernetes offerings. That way, you’ll be
    far more marketable in the job space and use all the different platforms.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，结合上一章的内容，你将能够确定你的组织应该选择哪种解决方案，并理解其使用价值。从个人角度来看，你将掌握多种托管Kubernetes服务的知识。这样，你在求职市场中将更具竞争力，并能够使用所有不同的平台。
- en: 'In this chapter, we’re going to cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding Linode Kubernetes Engine
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Linode Kubernetes引擎
- en: Exploring DigitalOcean Managed Kubernetes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索DigitalOcean托管Kubernetes
- en: What is Kubernetes PaaS and how does it differ?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Kubernetes PaaS，它与其他服务有何不同？
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you should already know a bit about cloud technologies. The
    gist is that all clouds are more or less the same. There are differences in the
    names of the services, but they’re all doing the same thing more or less.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你应该已经了解一些云技术。关键是所有的云服务或多或少都是相同的。服务名称上有所不同，但它们做的事情基本相同。
- en: If you’re comfortable with the cloud and have worked in a few cloud-based services,
    you’ll be successful in navigating this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对云服务已经比较熟悉，并且曾在一些云服务平台上工作过，那么你在阅读本章时会非常顺利。
- en: 'To work inside the cloud-based services, you will need the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要在云服务中工作，你将需要以下内容：
- en: A Linode account
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Linode账户
- en: A DigitalOcean account
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个DigitalOcean账户
- en: A Red Hat account
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Red Hat账户
- en: An AWS account (for the final section of this chapter)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个AWS账户（用于本章的最后部分）
- en: You can sign up for all of these services and get free credit. Just ensure that
    you shut down the Kubernetes environments when you’ve finished running them to
    save money.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以注册所有这些服务并获得免费额度。只需确保在完成操作后关闭Kubernetes环境以节省费用。
- en: The code for this chapter can be found in this book’s GitHub repository at [https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch3](https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch3).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在本书的GitHub仓库找到，地址是[https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch3](https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch3)。
- en: Understanding Linode Kubernetes Engine
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Linode Kubernetes引擎
- en: Linode, recently acquired by Akami Technologies, is a developer-friendly private
    cloud that is very well-known for its easy dashboard and feature-rich platform
    that isn’t overly complex. Linode focuses on ease of use with a cloud -for -all
    mindset. Some key callouts for Linode include transparent pricing with almost
    zero guesswork, easily scalable workloads, a full/public API, and a GUI-based
    cloud manager. Most of all, Linode is known for its *always human* customer support.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Linode，最近被 Akami Technologies 收购，是一个开发者友好的私有云平台，因其简洁的仪表盘和功能丰富的平台而广为人知，同时又不会过于复杂。Linode
    专注于易用性，秉持“为所有人提供云服务”的理念。Linode 的一些关键特点包括透明定价，几乎无需猜测，工作负载易于扩展，提供完整/公开的 API，以及基于图形界面的云管理器。最重要的是，Linode
    以其*始终有人*的客户支持而闻名。
- en: When it comes to comparing Linode and other private cloud providers, Linode
    sticks out by offering cloud GPUs and high outbound transfer speeds, along with
    its customer support.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在比较 Linode 与其他私有云提供商时，Linode 通过提供云 GPU 和高速的出站传输速率，以及出色的客户支持脱颖而出。
- en: In this section, you’re going to learn about why you’d want to use **Linode
    Kubernetes Engine** (**LKE**) and how to set up the LKE portal, create a Kubernetes
    cluster in LKE manually, take the same manual process to automate it, and deploy
    your Kubernetes workloads.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将了解为什么你要使用**Linode Kubernetes Engine**（**LKE**），以及如何设置 LKE 门户、手动创建 LKE
    中的 Kubernetes 集群、将相同的手动过程自动化，并部署你的 Kubernetes 工作负载。
- en: Why LKE?
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么选择 LKE？
- en: When you’re choosing a cloud, the last thing you want is to have to guess how
    much your monthly bill is going to be. This is why people are nervous about the
    cloud and even more nervous about serverless technologies. The monthly cost can
    be unknown, which isn’t the best answer to give to a CFO. With Linode, costs are
    bundled together, so you know exactly what you’re going to pay for, and that’s
    very important for billing administrators and engineers alike. When it comes to
    scaling, both horizontally and vertically, the last thing that any engineer wants
    to have to sit and figure out manually is how much the environment is going to
    cost the company every month.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当你选择云服务时，最后你不希望的事情就是不得不猜测每月账单的金额。这也是人们对云服务以及无服务器技术感到担忧的原因。月度费用可能是未知的，这对于 CFO
    来说并不是一个最佳答案。使用 Linode 时，费用是捆绑在一起的，所以你确切知道自己要为哪些服务付费，这对于账单管理员和工程师来说都非常重要。在扩展方面，无论是水平扩展还是垂直扩展，任何工程师都不希望需要坐下来手动计算环境每月会给公司带来多少费用。
- en: Another large cost saving is with the Control Plane. Much like any Kubernetes
    cloud service, the idea is to abstract the Kubernetes Control Plane/API server
    away from you. That way, you don’t have to worry about managing anything other
    than worker nodes and the application(s). Linode doesn’t charge for the Control
    Plane, whereas other clouds do. For example, EKS and GKE charge a per cluster
    management fee of $10 per hour or $73.00 per month. Although this may not seem
    like a lot, for a start-up that’s getting by with bootstrap funding and has enough
    bills, they most likely don’t want one more.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个显著的成本节省来源是控制平面。与任何 Kubernetes 云服务类似，思想是将 Kubernetes 控制平面/API 服务器抽象化，这样你就不需要担心管理除工作节点和应用程序外的其他任何事情。Linode
    不收取控制平面费用，而其他云服务提供商则收取。例如，EKS 和 GKE 每个集群的管理费用为每小时 $10 或每月 $73.00。虽然这看起来不多，但对于那些依靠启动资金并且账单已够多的初创公司来说，他们可能不想再增加一项费用。
- en: Setting up LKE manually
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动设置 LKE
- en: Now that you know the theory behind why you’d want to choose Linode, along with
    some pricing metrics and other aspects that make Linode great, it’s time to get
    hands-on and learn about setting up LKE.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经了解了选择 Linode 的背后理论，以及一些定价指标和其他使 Linode 优秀的方面，是时候亲自动手，了解如何设置 LKE 了。
- en: 'For this section, ensure that you are signed into Linode via a web browser
    of your choosing. Follow these steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，确保你已通过选择的网页浏览器登录到 Linode。按照以下步骤操作：
- en: 'On the Linode dashboard, choose **Kubernetes**:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Linode 仪表盘中，选择**Kubernetes**：
- en: '![Figure 3.1 – The LKE portal'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.1 – LKE 门户'
- en: '](img/B19116_03_01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_01.jpg)'
- en: Figure 3.1 – The LKE portal
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – LKE 门户
- en: 'Click the blue **Create** **Cluster** button:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的**创建** **集群**按钮：
- en: '![Figure 3.2 – The Create Cluster button'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.2 – 创建集群按钮'
- en: '](img/B19116_03_02.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_02.jpg)'
- en: Figure 3.2 – The Create Cluster button
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – 创建集群按钮
- en: 'Choose a name for your cluster, what region/location you want the LKE cluster
    to reside in, and the Kubernetes API version:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你的集群名称、LKE 集群所在的区域/位置，以及 Kubernetes API 版本：
- en: '![Figure 3.3 – Adding a Cluster label, region, and Kubernetes version'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.3 – 添加集群标签、区域和Kubernetes版本'
- en: '](img/B19116_03_03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_03.jpg)'
- en: Figure 3.3 – Adding a Cluster label, region, and Kubernetes version
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 – 添加集群标签、区域和Kubernetes版本
- en: 'When choosing node pools, you have a few options:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择节点池时，你有几个选项：
- en: '**Dedicated CPU**: Good for workloads where consistent performance is crucial
    for daily workflows'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**专用CPU**：适用于对一致性性能要求较高的工作负载，尤其是日常工作流程'
- en: '**Shared CPU**: Good for medium workflows, such as a secret engine (something
    that isn’t getting a lot of traffic)'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共享CPU**：适用于中等工作负载，如秘密引擎（流量较小的应用）'
- en: '**High Memory**: Good for RAM-intensive applications, such as older Java applications,
    in-memory databases, and cached data'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高内存**：适用于对内存要求高的应用程序，如较旧的Java应用程序、内存数据库和缓存数据'
- en: 'For this section, you can choose **Shared CPU** as it’s the most cost-effective:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这一部分，你可以选择**共享CPU**，因为它是最具成本效益的：
- en: '![Figure 3.4 – Worker node size'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.4 – 工作节点大小'
- en: '](img/B19116_03_04.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_04.jpg)'
- en: Figure 3.4 – Worker node size
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 – 工作节点大小
- en: 'To continue to keep things cost-effective, choose the **Linode 2 GB** option
    and ensure you scale it down to *1* node:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了保持成本效益，选择**Linode 2 GB**选项，并确保将其缩减为*1*个节点：
- en: '![Figure 3.5 – The Add Node Pools page'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.5 – 添加节点池页面'
- en: '](img/B19116_03_05.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_05.jpg)'
- en: Figure 3.5 – The Add Node Pools page
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 – 添加节点池页面
- en: 'In any production-level environment, you always want to think about **high
    availability** (**HA**). When it comes to Kubernetes, it’s no different. LKE offers
    the ability to enable HA for the Kubernetes Control Plane. For production environments,
    you’ll 100% want to implement this. For lab/dev environments (which is what you’re
    building now for learning purposes), you don’t have to enable HA. Once done, click
    the blue **Create** **Cluster** button:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任何生产级环境中，你总是要考虑**高可用性**（**HA**）。对于Kubernetes来说也不例外。LKE提供了启用Kubernetes控制平面的HA功能。对于生产环境，你100%会想要实现这一点。而对于实验/开发环境（即你现在为了学习而构建的环境），你不必启用HA。完成后，点击蓝色的**创建**
    **集群**按钮：
- en: '![Figure 3.6 – HA Control Plane'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.6 – HA控制平面'
- en: '](img/B19116_03_06.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_06.jpg)'
- en: Figure 3.6 – HA Control Plane
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6 – HA控制平面
- en: Now that you’re familiar with the manual process of creating an LKE cluster,
    it’s time to learn how to automate it and make the process repeatable for production-level
    environments.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经熟悉了手动创建LKE集群的过程，是时候学习如何将其自动化，并使该过程在生产级环境中可重复。
- en: Automating LKE deployments
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化LKE部署
- en: Now that you know how to create an LKE cluster manually, it’s time to learn
    how to create it with Terraform so you can ensure repeatable processes throughout
    your environment. In many production-level cases, you’ll run the following Terraform
    code within a CI/CD pipeline to ensure repeatability. For this section, you can
    run it locally.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何手动创建LKE集群，是时候学习如何使用Terraform创建它，以确保在你的环境中实现可重复的过程。在许多生产级案例中，你将在CI/CD管道中运行以下Terraform代码，以确保可重复性。对于这一部分，你可以在本地运行它。
- en: First, you’ll see the `main.tf` configuration and then look at `variables.tf`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你会看到`main.tf`配置，然后查看`variables.tf`。
- en: 'First, there’s the Terraform provider. The provider will utilize the newest
    version of the Linode Terraform provider. For Terraform to interact with the Linode
    API, you’ll need to pass in an API key that you can create from your Linode account:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是Terraform提供程序。该提供程序将使用最新版本的Linode Terraform提供程序。为了让Terraform与Linode API进行交互，你需要传入一个API密钥，该密钥可以在你的Linode账户中创建：
- en: '[PRE0]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, there’s the `linode_lke_cluster` resource, which will create the LKE
    cluster. Within the dynamic block, you’ll see a `for_each` loop that specifies
    how many worker nodes will be created based on the pool amount. The pool amount
    is the number of worker nodes you want to deploy (between 3 to 4 is recommended
    for production):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`linode_lke_cluster`资源，它将创建LKE集群。在动态块内，你会看到一个`for_each`循环，指定了基于池数量将创建多少个工作节点。池数量是你希望部署的工作节点的数量（建议生产环境中设置为3到4个）：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The last piece of code is the output of `kubeconfig`, which contains all of
    the authentication and authorization configurations to connect to the Kubernetes
    cluster:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一段代码是`kubeconfig`的输出，其中包含所有用于连接Kubernetes集群的身份验证和授权配置：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now that you have the main Terraform configuration, you’ll need variables to
    pass in. These variables allow your code to stay repeatable so that you don’t
    have to continuously change hardcoded values or create new configurations for
    each environment. The reason why is that due to formatting, it may look out of
    the ordinary on your page while you’re reading this chapter.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了主要的 Terraform 配置，你还需要传递一些变量。这些变量使得你的代码保持可重复性，这样你就不必不断地更改硬编码的值或为每个环境创建新的配置。之所以这么做，是因为由于格式问题，在你阅读本章时，它可能会显得有些不寻常。
- en: For this section, you can take a look at the variables on GitHub at [https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/blob/main/Ch3/LKE/variables.tf](https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/blob/main/Ch3/LKE/variables.tf).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，你可以在 GitHub 上查看变量，地址是 [https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/blob/main/Ch3/LKE/variables.tf](https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/blob/main/Ch3/LKE/variables.tf)。
- en: Although these are all standard Terraform variables and don’t require much explanation,
    the one variable to point out is the `pools` variable. Notice how there’s a list
    type specified for the variable, which includes how many worker nodes and the
    size of the worker nodes on Linode. The reason why the variable is a list type
    is that in the `main.tf` configuration, the `dynamic “pool”` block calls for a
    list when using the `for` loop.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些都是标准的 Terraform 变量，不需要太多解释，但有一个变量需要特别注意，那就是`pools`变量。请注意，变量指定了列表类型，其中包括
    Linode 上工人节点的数量和大小。之所以将变量设为列表类型，是因为在`main.tf`配置中，`dynamic “pool”`块在使用`for`循环时需要调用一个列表。
- en: One thing to keep in mind when it comes to LKE is understanding Linode. Although
    Linode is a great cloud provider, the truth is, it’s not going to have as many
    services and features for Kubernetes as, for example, EKS. Taking EKS as an example,
    there are IAM roles and RBAC-related permissions you can configure, DNS management
    with Route53, Secrets management, a container registry, and Fargate profiles for
    serverless Kubernetes. Even Azure and GCP have very similar services. With a provider
    such as Linode, however, they don’t. That’s not to discount Linode or say that
    they aren’t a good Kubernetes provider because the truth is, they very much are.
    However, a situation such as Linode not having IAM/RBAC built-in capabilities
    may be a deal breaker for many production engineering and security teams.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 LKE 时，需要牢记的一点是理解 Linode。尽管 Linode 是一个很棒的云服务提供商，但事实上，它在 Kubernetes 的服务和功能方面不如
    EKS。例如，EKS 提供了可以配置的 IAM 角色和 RBAC 相关的权限、与 Route53 的 DNS 管理、Secrets 管理、容器注册表以及用于无服务器
    Kubernetes 的 Fargate 配置文件。即使是 Azure 和 GCP 也有类似的服务。然而，像 Linode 这样的提供商并没有这些服务。这并不是说
    Linode 不好，或者它不是一个优秀的 Kubernetes 提供商，事实上，它非常优秀。然而，Linode 不具备内建的 IAM/RBAC 功能，可能会成为许多生产工程和安全团队的决定性障碍。
- en: Now that you know how to create an LKE cluster both manually and automatically,
    it’s time to move on to the next section.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了如何手动和自动创建 LKE 集群，接下来是时候进入下一部分了。
- en: Exploring DigitalOcean Managed Kubernetes
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 DigitalOcean 托管的 Kubernetes
- en: DigitalOcean, much like Linode, markets toward the notion of an easy cloud to
    use compared to other large clouds with (what feels like) millions of services
    to choose from. DigitalOcean’s slogan is *Simpler cloud. Happier devs. Better
    results*. Over the years, DigitalOcean wasn’t only known for its cloud platform,
    but its blogs and how-to guides. DigitalOcean, for many engineers, became the
    standard go-to online location for learning how to do something in a hands-on
    fashion. Many writers use the DigitalOcean Technical Writing Guidelines that DigitalOcean
    created for writer/blogger best practices.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: DigitalOcean 和 Linode 类似，面向的市场是易于使用的云，相较于其他大型云服务（它们似乎有成千上万的服务可供选择）。DigitalOcean
    的口号是 *更简单的云。更开心的开发者。更好的结果*。多年来，DigitalOcean 不仅以其云平台闻名，还以其博客和操作指南而著称。对于许多工程师来说，DigitalOcean
    成为学习如何动手实践的标准在线位置。许多作者使用 DigitalOcean 为作者/博主创建的技术写作指南，以遵循最佳实践。
- en: In this section, you’re going to learn about why you’d want to use **DigitalOcean
    Managed Kubernetes**, the pros of the Kubernetes service, setting up DigitalOcean
    Managed Kubernetes manually, and taking the same manual process, but doing it
    in an automated fashion with Terraform.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，你将学习为什么要使用**DigitalOcean 托管的 Kubernetes**，Kubernetes 服务的优点，如何手动设置 DigitalOcean
    托管的 Kubernetes，并将相同的手动过程以自动化的方式通过 Terraform 实现。
- en: Why DigitalOcean Kubernetes Engine?
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么选择DigitalOcean Kubernetes引擎？
- en: Since DigitalOcean was founded in 2011, developers around the globe have been
    using it for its ease of use and straightforward deployments. A lot of engineers
    even use DigitalOcean for hosting their projects (personal websites, blogs, servers,
    and so on). It’s far easier in many cases than having to worry about creating
    a bunch of services in a large public cloud.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 自2011年DigitalOcean成立以来，全球开发者一直在使用它，因其易于使用和简单的部署方式。许多工程师甚至使用DigitalOcean来托管他们的项目（个人网站、博客、服务器等等）。在许多情况下，它比在大型公共云中创建一堆服务要简单得多。
- en: From an ease-of-use perspective, DigitalOcean Kubernetes Engine does not disappoint.
    Much like any other Kubernetes service, the purpose is to abstract away the need
    to manage the underlying Control Plane/API server. The whole idea here is to lower
    the barrier of entry when it comes to using a Kubernetes service.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 从易用性的角度来看，DigitalOcean Kubernetes引擎表现不负众望。与其他任何Kubernetes服务类似，其目的是抽象掉管理底层控制平面/API服务器的需求。这里的核心思想是降低使用Kubernetes服务时的进入门槛。
- en: Compared to other products such as EKS/GKE/AKS, DigitalOcean Kubernetes Engine
    is more focused on the Day Two operations piece of Kubernetes. The complexities
    of a lot of the Kubernetes services out in the wild sometimes make engineers run
    away because they want something that *just works* out of the box.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他产品如EKS/GKE/AKS相比，DigitalOcean Kubernetes引擎更侧重于Kubernetes的Day Two操作部分。许多Kubernetes服务的复杂性有时会让工程师望而却步，因为他们希望有一个*开箱即用*的解决方案。
- en: Important note
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: DigitalOcean Managed Kubernetes, although easy to use, appears to be a bit out
    of date from a Kubernetes API perspective compared to its counterparts. Whereas
    many Kubernetes services offer Kubernetes API version v1.23 and above, DigitalOcean
    only offers up to v1.22.8 at the time of writing. Keep this in mind and remember
    to check as you may need different API versions.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管DigitalOcean托管Kubernetes易于使用，但与其他同类产品相比，它从Kubernetes API的角度来看有些过时。许多Kubernetes服务提供v1.23及以上版本的Kubernetes
    API，而DigitalOcean在撰写本文时只提供到v1.22.8。请记住这一点，并时常检查，因为你可能需要不同的API版本。
- en: Setting up DigitalOcean Managed Kubernetes manually
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动设置DigitalOcean托管Kubernetes
- en: Now that you know the theory behind why you’d want to choose DigitalOcean, along
    with some pricing metrics and other aspects that make DigitalOcean great, it’s
    time to get hands-on and learn about setting up DigitalOcean Kubernetes Engine.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了为什么要选择DigitalOcean的理论基础，以及一些定价指标和其他使DigitalOcean出色的因素，接下来是实际操作，学习如何设置DigitalOcean
    Kubernetes引擎。
- en: 'For this section, ensure that you are signed into DigitalOcean via a web browser
    of your choosing. Follow these steps:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节内容，确保你已通过选择的Web浏览器登录到DigitalOcean。按照以下步骤操作：
- en: 'On the DigitalOcean dashboard, choose **Kubernetes**:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在DigitalOcean仪表板上，选择**Kubernetes**：
- en: '![Figure 3.7 – DigitalOcean Managed Kubernetes'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.7 – DigitalOcean托管Kubernetes'
- en: '](img/B19116_03_07.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_07.jpg)'
- en: Figure 3.7 – DigitalOcean Managed Kubernetes
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7 – DigitalOcean托管Kubernetes
- en: 'Click the blue **Create a Kubernetes** **Cluster** button:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的**创建Kubernetes** **集群**按钮：
- en: '![Figure 3.8 – The Create a Kubernetes Cluster button'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.8 – 创建Kubernetes集群按钮'
- en: '](img/B19116_03_08.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_08.jpg)'
- en: Figure 3.8 – The Create a Kubernetes Cluster button
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8 – 创建Kubernetes集群按钮
- en: 'Choose your region, VPC name, and Kubernetes API version. The recommended API
    version, in general, is to always go with the latest unless you have a specific
    reason not to (the same rule applies to any Kubernetes environment):'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你的地区、VPC名称和Kubernetes API版本。一般建议的API版本是始终使用最新版本，除非你有特定的理由不使用最新版本（这个规则适用于任何Kubernetes环境）：
- en: '![Figure 3.9 – Adding cluster details'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.9 – 添加集群详细信息'
- en: '](img/B19116_03_09.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_09.jpg)'
- en: Figure 3.9 – Adding cluster details
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.9 – 添加集群详细信息
- en: 'Choose the cluster capacity. The two very important sections here are as follows:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择集群容量。这里有两个非常重要的部分：
- en: '**Machine type**: For this, you’ll have to choose what’s best for you and your
    production environment. Although DigitalOcean doesn’t have as many options as
    Linode, you can choose from a basic node, Intel-based node, or AMD-based node
    from a CPU perspective.'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机器类型**：在这一步，你需要选择最适合你和你的生产环境的选项。虽然DigitalOcean没有Linode那么多的选项，但你可以从基本节点、基于Intel的节点或基于AMD的节点中选择（从CPU角度来看）。'
- en: '**High availability Control Plane**: For this, you’ll always want to ensure
    that the Control Plane is highly available. The Control Plane holds the scheduler,
    etcd, and many other important Kubernetes components. Without them, Kubernetes
    wouldn’t work.'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高可用性控制平面**：对于这一点，你总是希望确保控制平面具有高可用性。控制平面包含调度器、etcd 以及许多其他重要的 Kubernetes 组件。没有它们，Kubernetes
    就无法工作。'
- en: '![Figure 3.10 – Worker node size'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.10 – 工作节点大小'
- en: '](img/B19116_03_10.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_10.jpg)'
- en: Figure 3.10 – Worker node size
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10 – 工作节点大小
- en: 'Confirm your cluster by reviewing the monthly charge and clicking the green
    **Create** **Cluster** button:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过查看每月费用并点击绿色的 **创建** **集群** 按钮，确认你的集群：
- en: '![Figure 3.11 – Finalizing the cluster'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.11 – 完成集群'
- en: '](img/B19116_03_11.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_11.jpg)'
- en: Figure 3.11 – Finalizing the cluster
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11 – 完成集群
- en: Now that you’re familiar with the manual process of creating a DigitalOcean
    Kubernetes Engine cluster, it’s time to learn how to automate it and make the
    process repeatable for production-level environments.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经熟悉了手动创建 DigitalOcean Kubernetes 引擎集群的过程，是时候学习如何自动化它，并使这一过程在生产级环境中可重复执行。
- en: Automating DigitalOcean Managed Kubernetes
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化 DigitalOcean 管理的 Kubernetes
- en: From an automation perspective, you have a few options. Two of the most popular
    are the DigitalOcean CLI and **Infrastructure as Code** (**IaC**). In this section,
    you’ll learn how to create a DigitalOcean Managed Kubernetes cluster using Terraform.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 从自动化的角度来看，你有几种选择。最流行的两种是 DigitalOcean CLI 和 **基础设施即代码**（**IaC**）。在本节中，你将学习如何使用
    Terraform 创建一个 DigitalOcean 管理的 Kubernetes 集群。
- en: In many production-level cases, you’ll run the following Terraform code within
    a CI/CD pipeline to ensure repeatability. For this section, you can run it locally.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多生产级案例中，你将在 CI/CD 流水线中运行以下 Terraform 代码，以确保可重复性。对于本节内容，你可以在本地运行它。
- en: Like we did for LKE, first, we’ll see the `main.tf` configuration and then you’ll
    take a look at `variables.tf`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们为 LKE 所做的那样，首先，我们将查看 `main.tf` 配置，然后你将查看 `variables.tf`。
- en: 'The Terraform configuration starts as all others do: with the provider. The
    DigitalOcean Terraform provider requires you to pass in a DigitalOcean API token,
    which you can generate from the DigitalOcean UI:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 配置像所有其他配置一样开始：从提供商开始。DigitalOcean Terraform 提供商要求你传入一个 DigitalOcean
    API 令牌，你可以从 DigitalOcean UI 生成它：
- en: '[PRE3]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, one resource block is needed, which is used to create the entire cluster
    and the node pools. These are DigitalOcean Droplets that end up being Kubernetes
    worker nodes. It also creates horizontal auto-scaling. For some DigitalOcean accounts,
    the maximum Droplet amount is three, so you’ll most likely want to increase that
    for production environments:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，需要一个资源块，用于创建整个集群和节点池。这些是 DigitalOcean Droplets，最终将成为 Kubernetes 工作节点。它还创建了水平自动扩展。对于某些
    DigitalOcean 账户，最大 Droplet 数量为三，因此你很可能需要为生产环境增加这个数量：
- en: '[PRE4]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now that you have the Terraform configuration, you’ll need variables to pass
    in. These variables allow your code to stay repeatable so that you don’t have
    to continuously change hardcoded values or create new configurations for each
    environment.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了 Terraform 配置，你需要传递变量。这些变量允许你的代码保持可重复性，这样你就不需要不断更改硬编码值或为每个环境创建新配置。
- en: 'There are four variables, as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个变量，如下所示：
- en: '`region`: The region that the DigitalOcean Kubernetes Engine cluster will run
    in.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`region`：DigitalOcean Kubernetes 引擎集群运行的区域。'
- en: '`cluster_name`: The name of the Kubernetes cluster.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cluster_name`：Kubernetes 集群的名称。'
- en: '`K8s_version`: The Kubernetes API version.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`K8s_version`：Kubernetes API 版本。'
- en: '`do_token`: The DigitalOcean API token. For production-level environments,
    you’ll want to store this in some type of secret store and have Terraform retrieve
    it with a data block. Writing an API token into a variable and pushing it up to
    source control is a big no-no:'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_token`：DigitalOcean API 令牌。对于生产级环境，你会希望将其存储在某种类型的密钥存储中，并让 Terraform 通过数据块提取它。将
    API 令牌写入变量并推送到源代码控制中是绝对不允许的：'
- en: '[PRE5]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Wrapping up this section on DigitalOcean, one thing to keep in mind is the same
    piece that was said in the *Understanding Linode Kubernetes Engine* section –
    bigger cloud providers are going to have more services that can tie into the managed
    Kubernetes offerings. This is something you’ll have to keep in mind as you decide
    what’s going to work best for your environment.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分关于 DigitalOcean 的内容总结时，需要记住的一个点是，在 *理解 Linode Kubernetes 引擎* 部分中提到的相同内容——更大的云服务商将拥有更多可以与托管的
    Kubernetes 服务相结合的服务。在你决定什么最适合你的环境时，这一点需要特别注意。
- en: In the next and final section of this chapter, you’ll learn about PaaS with
    OpenShift from a theoretical and hands-on perspective.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的下一节也是最后一节中，你将从理论和实践的角度了解 OpenShift 上的 PaaS。
- en: What is Kubernetes PaaS and how does it differ?
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Kubernetes PaaS，它有什么不同？
- en: Deploying Kubernetes clusters in different ways felt to engineers like it came
    in waves. First, there were raw Kubernetes clusters. You’d have to deploy everything
    manually, ranging from the Control Plane to the **Certificate Authority** (**CA**)
    and everything in between. After that, there were Kubernetes services in the cloud,
    such as AKS, GKE, and EKS. Now, there are serverless Kubernetes such as GKE AutoPilot
    and EKS Fargate, which you learned about in the previous chapter.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 工程师们感觉到，以不同方式部署 Kubernetes 集群好像是逐步发展的。最初是原生 Kubernetes 集群。你必须手动部署所有东西，从控制平面到
    **证书授权机构** (**CA**) 及其间的一切。之后，出现了云中的 Kubernetes 服务，如 AKS、GKE 和 EKS。现在，有了无服务器 Kubernetes，如
    GKE AutoPilot 和 EKS Fargate，正如你在上一章中所学到的那样。
- en: Another option that stands out, especially in the enterprise, is PaaS-based
    Kubernetes solutions such as Red Hat’s **OpenShift**.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个特别突出的选项，尤其是在企业中，是基于 PaaS 的 Kubernetes 解决方案，例如 Red Hat 的 **OpenShift**。
- en: In this section, you’re going to learn about why you’d want to use OpenShift,
    how enterprises are utilizing PaaS-based Kubernetes such as OpenShift, and how
    to get started with a Dev environment right on your local computer with OpenShift,
    develop and deploy production-ready OpenShift clusters in major cloud providers,
    and deploy production-ready applications inside of OpenShift.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将了解为什么要使用 OpenShift，企业如何利用基于 PaaS 的 Kubernetes（如 OpenShift），以及如何在本地计算机上使用
    OpenShift 设置 Dev 环境，开发和部署生产就绪的 OpenShift 集群到主要的云服务商，并在 OpenShift 内部部署生产就绪的应用程序。
- en: OpenShift
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenShift
- en: OpenShift is an odd paradox between full-blown Kubernetes and its own orchestration
    system. Underneath the hood, OpenShift uses Kubernetes. If you write a Kubernetes
    manifest for a Deployment, Pod, and so on, you can use it on OpenShift. Fundamentally,
    nothing changes when it comes to Kubernetes and OpenShift. However, there are
    differences in how you manage OpenShift versus how you manage Kubernetes. OpenShift
    is a PaaS, whereas Kubernetes can be managed with a cloud provider, so it sort
    of feels like **Software as a Service** (**SaaS**) and can be managed from a bare-metal
    perspective. Because Kubernetes is such a versatile platform, it can’t be put
    into one category.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 是一个充满矛盾的存在，介于完整的 Kubernetes 和它自己独立的调度系统之间。OpenShift 在底层使用 Kubernetes。如果你为
    Deployment、Pod 等编写 Kubernetes 清单，你可以在 OpenShift 上使用它。从本质上讲，Kubernetes 和 OpenShift
    在功能上没有区别。然而，在管理 OpenShift 和管理 Kubernetes 的方式上有所不同。OpenShift 是一个 PaaS，而 Kubernetes
    可以由云服务商进行管理，所以它在某种程度上感觉像是 **软件即服务** (**SaaS**)，并且可以从裸机角度进行管理。由于 Kubernetes 是一个非常灵活的平台，它不能被归类为单一类别。
- en: 'One thing you must remember when it comes to OpenShift is that it’s enterprise-specific.
    There’s no reason that an engineer would run OpenShift for a lab environment other
    than to learn (which is what you’re doing in this chapter). With Kubernetes, you
    have far more deployment options and options regarding where you can deploy it.
    With OpenShift, you’re limited to a certain type of virtual machine and where/how
    you can deploy it. This isn’t necessarily a bad thing in the slightest. OpenShift
    wasn’t meant for engineers to do labs with like minikube and Docker Desktop. It
    was built with enterprise customers in mind. If you’re interested in diving deeper
    into this topic, I highly recommend reading this blog post from Tomasz Cholewa
    on comparing Kubernetes with OpenShift: [https://blog.cloudowski.com/articles/10-differences-between-openshift-and-kubernetes/](https://blog.cloudowski.com/articles/10-differences-between-openshift-and-kubernetes/).'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 OpenShift 时必须记住的一点是，它是企业专用的。除非是为了学习（这正是你在本章所做的），否则工程师不太可能在实验环境中使用 OpenShift。使用
    Kubernetes，你有更多的部署选择以及关于部署位置的选择。而 OpenShift 限制了你使用某种类型的虚拟机，以及部署的位置/方式。这并不意味着它是坏事。OpenShift
    不是为了让工程师像使用 minikube 和 Docker Desktop 那样做实验而设计的，它是为了企业客户而构建的。如果你有兴趣深入了解这个话题，我强烈推荐阅读
    Tomasz Cholewa 关于 Kubernetes 和 OpenShift 比较的这篇博客：[https://blog.cloudowski.com/articles/10-differences-between-openshift-and-kubernetes/](https://blog.cloudowski.com/articles/10-differences-between-openshift-and-kubernetes/)。
- en: The definition of OpenShift, as per Red Hat, is that “*Red Hat OpenShift delivers
    a complete application platform for both traditional and cloud-native applications,
    allowing them to run anywhere. Built on Red Hat Enterprise Linux and compatible
    with Red Hat Ansible Automation Platform, Red Hat OpenShift enables automation
    inside and outside your* *Kubernetes clusters.*”
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 Red Hat 的定义，OpenShift “*Red Hat OpenShift 为传统和云原生应用提供了完整的应用平台，使它们能够在任何地方运行。基于
    Red Hat Enterprise Linux，并兼容 Red Hat Ansible Automation Platform，Red Hat OpenShift
    实现了在 Kubernetes 集群内外的自动化*。”
- en: Simply put, it allows you to orchestrate and manage containerized applications
    in a PaaS environment.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，它允许您在 PaaS 环境中编排和管理容器化应用程序。
- en: OpenShift in the enterprise
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenShift 在企业中的应用
- en: At this point, you may be wondering why anyone would want to use OpenShift over
    a standard Kubernetes deployment. Kubernetes has a ton of support, is supported
    by all major cloud providers, and is the latest and greatest. When it comes to
    the enterprise, Kubernetes is thought of a bit differently.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可能会想知道为什么有人会选择在标准 Kubernetes 部署之上使用 OpenShift。Kubernetes 获得了大量支持，被所有主要的云提供商支持，并且是最新最好的技术。在企业环境中，Kubernetes
    的认知有所不同。
- en: To leadership teams, Kubernetes is often thought of as a black box of magic
    and mystery that’s going to cost them a ton of money to maintain and support.
    The reality is that in enterprise environments, leadership teams want the ability
    to call a support number or contact an account executive when something breaks.
    They want the *enterprise software* so that if (when) something goes wrong, they
    know that the engineering teams have someone to call. Even though engineers will
    most likely spend more time waiting to hear back from support than doing it themselves,
    *enterprise licensing* gives leadership teams peace of mind. However, with peace
    of mind comes cost. OpenShift licensing is very expensive and remember, you have
    to run it somewhere, which will cost you money as well. If you run OpenShift in,
    for example, AWS, you’re paying for the cloud infrastructure running in AWS, OpenShift
    licensing, and Red Hat support. If you decide to go the OpenShift route, ensure
    that your leadership teams understand the cost.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 对于领导团队来说，Kubernetes 往往被认为是一个神秘的黑盒子，会花费大量金钱来维护和支持。事实上，在企业环境中，领导团队希望在出现问题时能够拨打支持电话或联系客户经理。他们希望有*企业软件*，这样如果（或者说当）出现问题，工程团队就知道有人可以联系。尽管工程师们很可能会花更多的时间等待支持回复，而不是自己动手解决，*企业许可*给领导团队带来了安心感。然而，安心也伴随着成本。OpenShift
    许可费用非常昂贵，而且还要记住，你需要在某个地方运行它，这也会产生费用。例如，如果你在 AWS 上运行 OpenShift，你需要支付在 AWS 上运行的云基础设施费用、OpenShift
    许可费用和 Red Hat 支持费用。如果你决定选择 OpenShift，确保你的领导团队了解这些成本。
- en: From a technical and engineering perspective, OpenShift isn’t doing anything
    differently than what Kubernetes can do. Sure, to have Kubernetes do exactly what
    OpenShift does would require some work and engineering efforts to build it, but
    it’s all very much doable. Although OpenShift is a great platform, it’s not doing
    anything overly extraordinary compared to Kubernetes.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术和工程的角度来看，OpenShift 和 Kubernetes 并没有做什么不同的事情。当然，要让 Kubernetes 像 OpenShift
    一样工作，需要一些工作和工程努力来构建，但这些都是完全可行的。虽然 OpenShift 是一个很棒的平台，但与 Kubernetes 相比，并没有做什么特别出众的事情。
- en: Getting started with OpenShift Sandbox
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用 OpenShift 沙盒
- en: 'Before spending money on OpenShift, you can test it out using OpenShift ReadyContainers
    in a sandbox environment. Although the sandbox environment is not production-ready,
    it’s a great way to test out and familiarize yourself with how OpenShift works.
    It’s also great for lab environments! Follow these steps:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在花费资金购买 OpenShift 之前，您可以在沙盒环境中使用 OpenShift ReadyContainers 进行测试。虽然沙盒环境不适合生产使用，但这是一个测试和熟悉
    OpenShift 工作方式的好方法。它也非常适合实验室环境！请按照以下步骤操作：
- en: Important note
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you’re on an M1 Mac, OpenShift ReadyContainers are not currently supported
    for ARM devices, so this lab won’t work for you.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 M1 Mac，OpenShift ReadyContainers 目前不支持 ARM 设备，因此这个实验不适合你。
- en: 'Log into the Red Hat console: [https://console.redhat.com/](https://console.redhat.com/).'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录红帽控制台：[https://console.redhat.com/](https://console.redhat.com/)。
- en: 'Click on **OpenShift**:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **OpenShift**：
- en: '![Figure 3.12 – Red Hat console'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.12 – 红帽控制台'
- en: '](img/B19116_03_12.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_12.jpg)'
- en: Figure 3.12 – Red Hat console
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12 – 红帽控制台
- en: 'Choose the **Clusters** option:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Clusters** 选项：
- en: '![Figure 3.13 – Clusters'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.13 – 集群'
- en: '](img/B19116_03_13.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_13.jpg)'
- en: Figure 3.13 – Clusters
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – 集群
- en: 'Under the **Clusters** option, you’ll see three options – **Cloud**, **Datacenter**,
    and **Local**. Choose **Local**:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Clusters** 选项下，你会看到三个选项 – **Cloud**、**Datacenter** 和 **Local**。选择 **Local**：
- en: '![Figure 3.14 – Local cluster'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.14 – 本地集群'
- en: '](img/B19116_03_14.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_14.jpg)'
- en: Figure 3.14 – Local cluster
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14 – 本地集群
- en: 'Download OpenShift locally by clicking the blue **Download OpenShift** **Local**
    button:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色 **Download OpenShift** **Local** 按钮下载 OpenShift 本地：
- en: '![Figure 3.15 – Download OpenShift Local'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.15 – 下载 OpenShift 本地'
- en: '](img/B19116_03_15.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_15.jpg)'
- en: Figure 3.15 – Download OpenShift Local
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15 – 下载 OpenShift 本地
- en: 'Once OpenShift Local has been installed, you will need to run two commands
    (the instructions for installing CRC can be found at [https://crc.dev/crc/#minimum-system-requirements-operating-system_gsg](https://crc.dev/crc/#minimum-system-requirements-operating-system_gsg)):'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦安装了 OpenShift Local，你将需要运行两个命令（安装 CRC 的说明可以在这里找到：[https://crc.dev/crc/#minimum-system-requirements-operating-system_gsg](https://crc.dev/crc/#minimum-system-requirements-operating-system_gsg)）：
- en: '`crc setup`: Set up the configuration to authenticate to Red Hat'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`crc setup`: 设置配置以进行 Red Hat 认证'
- en: '`crc start`: Start the local OpenShift cluster:'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`crc start`: 启动本地 OpenShift 集群：'
- en: '![Figure 3.16 – OpenShift Local setup'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.16 – OpenShift 本地设置'
- en: '](img/B19116_03_16.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_16.jpg)'
- en: Figure 3.16 – OpenShift Local setup
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.16 – OpenShift 本地设置
- en: 'Once you run the `crc start` command, you’ll see an output on your terminal
    similar to the following:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你运行 `crc start` 命令后，你会在终端上看到类似以下的输出：
- en: '![Figure 3.17 – Starting OpenShift Local'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.17 – 启动 OpenShift 本地'
- en: '](img/B19116_03_17.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_17.jpg)'
- en: Figure 3.17 – Starting OpenShift Local
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.17 – 启动 OpenShift 本地
- en: 'Depending on when you’re reading this and based on version changes, you may
    need some configurations, including passing in an OpenShift token to authenticate
    from your localhost. To keep these steps brief and since this information is already
    available from Red Hat, you can follow the installation instructions here: [https://access.redhat.com/documentation/en-us/red_hat_openshift_local/2.5/html/getting_started_guide/installation_gsg#installing_gsg](https://access.redhat.com/documentation/en-us/red_hat_openshift_local/2.5/html/getting_started_guide/installation_gsg#installing_gsg).'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你阅读的时间和基于版本变化，你可能需要一些配置，包括在本地主机传递 OpenShift 令牌进行身份验证。为了简化这些步骤，因为这些信息已经在 Red
    Hat 提供的安装指南中可用，你可以在这里按照安装说明操作：[https://access.redhat.com/documentation/en-us/red_hat_openshift_local/2.5/html/getting_started_guide/installation_gsg#installing_gsg](https://access.redhat.com/documentation/en-us/red_hat_openshift_local/2.5/html/getting_started_guide/installation_gsg#installing_gsg)。
- en: 'Although we didn’t touch on it in this section, there’s a second lab environment
    option known as OpenShift Sandbox, which is different than ReadyContainers. You
    can set up OpenShift Sandbox here: [https://developers.redhat.com/developer-sandbox](https://developers.redhat.com/developer-sandbox).'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在本节中我们没有涉及到，但还有第二个实验环境选项称为 OpenShift Sandbox，它不同于 ReadyContainers。你可以在这里设置
    OpenShift Sandbox：[https://developers.redhat.com/developer-sandbox](https://developers.redhat.com/developer-sandbox)。
- en: Now that you know how to get an OpenShift sandbox up and running, let’s learn
    how to set up a production-ready OpenShift cluster on AWS.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何启动和运行 OpenShift 沙盒了，让我们学习如何在 AWS 上设置一个生产就绪的 OpenShift 集群。
- en: OpenShift on AWS
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 AWS 上的 OpenShift
- en: CodeReady containers are amazing because they allow you to utilize your local
    computer to learn OpenShift, much like Minikube allows you to learn Kubernetes
    and Docker Desktop allows you to learn Docker for free.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: CodeReady containers 非常棒，因为它们允许你利用本地计算机学习 OpenShift，就像 Minikube 让你免费学习 Kubernetes
    和 Docker Desktop 让你免费学习 Docker 一样。
- en: Now that you know about the free version, let’s quickly dive into how to deploy
    OpenShift to the cloud. In this example, you’ll learn about AWS, but the other
    cloud providers that are supported have the same workflow.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了免费版本，让我们快速看看如何将 OpenShift 部署到云端。在本例中，你将学习 AWS，但其他支持的云提供商有相同的工作流程。
- en: 'For this section, ensure that you are logged into your AWS console via the
    AWS CLI and that you are also logged into your Red Hat account. Follow these steps:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节，确保你通过 AWS CLI 登录到 AWS 控制台，并且你也已经登录到你的 Red Hat 账户。按照以下步骤操作：
- en: 'Log into the Red Hat console: [https://console.redhat.com/](https://console.redhat.com/).'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 Red Hat 控制台：[https://console.redhat.com/](https://console.redhat.com/)
- en: 'Click on **OpenShift**:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **OpenShift**：
- en: '![Figure 3.18 – OpenShift manager'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.18 – OpenShift 管理器'
- en: '](img/B19116_03_18.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_18.jpg)'
- en: Figure 3.18 – OpenShift manager
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.18 – OpenShift 管理器
- en: 'Click the **Clusters** button and then click the blue **Create** **cluster**
    button:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Clusters** 按钮，然后点击蓝色 **Create** **cluster** 按钮：
- en: '![Figure 3.19 – Creating a cluster'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.19 – 创建集群'
- en: '](img/B19116_03_19.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_19.jpg)'
- en: Figure 3.19 – Creating a cluster
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.19 – 创建集群
- en: 'You’ll see several options to choose from, including Azure and IBM Cloud. Click
    the blue **Create cluster** button under the AWS option:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到多个选项，包括 Azure 和 IBM Cloud。点击 AWS 选项下的蓝色 **创建集群** 按钮：
- en: '![Figure 3.20 – AWS ROSA'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.20 – AWS ROSA'
- en: '](img/B19116_03_20.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_20.jpg)'
- en: Figure 3.20 – AWS ROSA
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.20 – AWS ROSA
- en: 'The first page you’ll see associates your AWS account with Red Hat if you haven’t
    done so already. To do that, click the **Select an account** button and go through
    the walk-through of configuring ROSA, which is the Red Hat OpenShift service on
    AWS:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个页面将关联你的 AWS 账户与 Red Hat，如果你还没有完成这一步。点击 **选择账户** 按钮，并按照引导完成配置 ROSA 的流程，ROSA
    是 AWS 上的 Red Hat OpenShift 服务：
- en: '![Figure 3.21 – The Create a ROSA Cluster page'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.21 – 创建 ROSA 集群页面'
- en: '](img/B19116_03_21.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_21.jpg)'
- en: Figure 3.21 – The Create a ROSA Cluster page
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.21 – 创建 ROSA 集群页面
- en: 'Once you’ve set up the AWS account permissions and roles for ROSA, the next
    page is all about configuring the cluster, which includes the cluster name, OpenShift
    version, region, and availability options. One of the cool options that OpenShift
    gives you is the ability to encrypt etcd and create persistent volumes with customer
    keys. This added security is typically looked at closely within the enterprise:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你为 ROSA 设置了 AWS 账户权限和角色，下一页将是配置集群的页面，其中包括集群名称、OpenShift 版本、区域和可用性选项。OpenShift
    提供的一个很酷的选项是能够加密 etcd 并使用客户密钥创建持久卷。这个附加的安全性通常在企业中受到密切关注：
- en: '![Figure 3.22 – Adding cluster details'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.22 – 添加集群详细信息'
- en: '](img/B19116_03_22.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_22.jpg)'
- en: Figure 3.22 – Adding cluster details
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.22 – 添加集群详细信息
- en: 'Choose your machine pool, which includes the AWS EC2 instance size and autoscaling
    capabilities:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你的机器池，其中包括 AWS EC2 实例的大小和自动扩展功能：
- en: '![Figure 3.23 – Worker node size'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.23 – 工作节点大小'
- en: '](img/B19116_03_23.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_23.jpg)'
- en: Figure 3.23 – Worker node size
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.23 – 工作节点大小
- en: 'Next are your networking options, which include whether you want the Kubernetes
    Control Plane/API server to be public or private, and whether you want to create
    a new AWS VPC for OpenShift or install the ROSA cluster into an existing VPC.
    Once you choose the **Virtual Private Cloud (VPC)** option, you’ll have to choose
    the CIDR ranges for the internal Kubernetes Pod networking and cluster IP ranges:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是网络选项，包括你是否希望 Kubernetes 控制平面/API 服务器是公开的还是私有的，以及是否希望为 OpenShift 创建一个新的 AWS
    VPC，还是将 ROSA 集群安装到现有的 VPC 中。一旦选择 **虚拟私有云 (VPC)** 选项，你需要选择 Kubernetes Pod 内部网络和集群
    IP 范围的 CIDR：
- en: '![Figure 3.24 – Networking configuration'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.24 – 网络配置'
- en: '](img/B19116_03_24.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_24.jpg)'
- en: Figure 3.24 – Networking configuration
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.24 – 网络配置
- en: 'For cluster roles and policies, you have the option to manually set up the
    roles and policies or have OpenShift automatically do it for you:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于集群角色和策略，你可以选择手动设置角色和策略，或者让 OpenShift 自动为你设置：
- en: '![Figure 3.25 – Cluster roles and policies'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.25 – 集群角色和策略'
- en: '](img/B19116_03_25.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_03_25.jpg)'
- en: Figure 3.25 – Cluster roles and policies
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.25 – 集群角色和策略
- en: For the last step, you can choose how you want to implement updates for the
    ROSA cluster. The updates that occur are based on CVE scores from the **National
    Vulnerability** **Database** (**NVD**):![Figure 3.26 – Vulnerability scanning
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于最后一步，你可以选择如何为 ROSA 集群实施更新。更新的发生是基于来自 **国家漏洞数据库** (**NVD**) 的 CVE 分数：![图 3.26
    – 漏洞扫描
- en: '](img/B19116_03_26.jpg)'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B19116_03_26.jpg)'
- en: Figure 3.26 – Vulnerability scanning
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.26 – 漏洞扫描
- en: Once you’ve filled in all your options, you can officially create your ROSA
    cluster.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦填写完所有选项，你就可以正式创建你的 ROSA 集群。
- en: Now that you know how to get up and running with OpenShift on-premises and in
    the cloud, let’s summarize this chapter.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何在本地和云端启动 OpenShift，让我们总结一下本章内容。
- en: Summary
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Regardless of what option you decide to go with when deploying Kubernetes, whether
    it’s in a big cloud, a smaller cloud, or a PaaS solution, the goal is always the
    same and never changes – build an orchestration platform that can manage your
    containerized applications.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择在哪个环境中部署 Kubernetes，无论是在大型云平台、小型云平台还是 PaaS 解决方案中，目标始终是相同的，永远不会改变——构建一个能够管理容器化应用的
    orchestration 平台。
- en: There are a lot of fancy tools out there, tons of different platforms, and many
    promises that each new and fancy platform will make your life easier from a Kubernetes
    perspective. The truth is, in one way or another, they all have the same goal.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 市面上有很多炫酷的工具，各种不同的平台，以及许多承诺每一个新平台都能从 Kubernetes 角度让你的生活变得更轻松。事实是，无论如何，它们都有一个共同的目标。
- en: The goal is to use Kubernetes to orchestrate and manage containerized applications.
    Ensure that as you go through each platform and tool, you have this in mind –
    *orchestrate my containerized applications*. If you keep that in mind, it’ll make
    choosing and getting through the marketing fluff much easier.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是使用 Kubernetes 来编排和管理容器化应用。确保在使用每个平台和工具时，记住这一点——*编排我的容器化应用*。如果你牢牢记住这一点，选择和排除市场营销噪音将变得更加容易。
- en: In the next chapter, we’ll be learning about on-premises Kubernetes and how
    understanding the underlying components of Kubernetes clusters is important, as
    well as why.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习本地 Kubernetes，并了解理解 Kubernetes 集群的底层组件为什么重要，以及为什么它如此重要。
- en: Further reading
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resource:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于本章涉及的主题，请查看以下资源：
- en: '*Learning OpenShift*, by Denis Zuev, Artemii Kropachev, and Aleksey Usov: [https://www.packtpub.com/product/learn-openshift/9781788992329](https://www.packtpub.com/product/learn-openshift/9781788992329)'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习 OpenShift*，作者：Denis Zuev、Artemii Kropachev 和 Aleksey Usov：[https://www.packtpub.com/product/learn-openshift/9781788992329](https://www.packtpub.com/product/learn-openshift/9781788992329)'
