- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: The Simplest Ways to Start Using DevOps in Python Immediately
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 立即开始在 Python 中使用 DevOps 的最简单方式
- en: Things don’t just happen. They are made to happen.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 事情不会自己发生。它们是被创造出来的。
- en: – John F. Kennedy
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: —— 约翰·F·肯尼迪
- en: Over the past couple of chapters, you’ve probably been thinking, all these principles
    and philosophies are fine, but I want to get my hands dirty! If that’s what you
    want, then this is the chapter for you. In this chapter, you will learn how to
    use Python and its libraries to serve the purposes of your workloads.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几章中，你可能一直在思考，所有这些原则和理念倒是不错，但我想亲自动手！如果你想这样做，那这一章就适合你。在本章中，你将学习如何使用 Python
    及其库来为你的工作负载服务。
- en: Now, I’m not suggesting that you switch to Python-based alternatives from what
    you are currently using. In fact, most of the tools and techniques that we are
    about to discuss are meant to be in support of existing infrastructure and methods
    as opposed to a replacement for them.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我并不是建议你从当前使用的工具转向基于 Python 的替代品。事实上，我们即将讨论的大多数工具和技术，旨在支持现有的基础设施和方法，而不是替代它们。
- en: This chapter is meant to give you a good grasp of the possibilities that the
    Python programming language provides DevOps as well as the ways that you can integrate
    it into your pre-existing systems and infrastructure.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在让你充分了解 Python 编程语言为 DevOps 提供的各种可能性，以及如何将其集成到你现有的系统和基础设施中。
- en: 'In this chapter, we are going to learn about a few simple implementations of
    Python in different aspects of API calls:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习在 API 调用的不同方面中，如何使用 Python 的一些简单实现：
- en: Making API calls and the different ways that API calls are made
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行 API 调用以及不同的 API 调用方式
- en: How Python can help analyze, construct, and optimize your workload’s networking
    resources
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 如何帮助分析、构建和优化你工作负载的网络资源
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'There are a few technical requirements that may need to be fulfilled if you
    want to get the most out of this chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想充分利用本章内容，有几个技术要求可能需要满足：
- en: A GitHub account
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 GitHub 账户
- en: A Replit account (which has a single sign-on with GitHub)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Replit 账户（与 GitHub 单点登录）
- en: A Hugging Face account
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Hugging Face 账户
- en: A Google account
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Google 账户
- en: Any computing device with an internet connection and a command line interface
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何带有互联网连接和命令行界面的计算设备
- en: The ability to tolerate my writing style
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够容忍我的写作风格
- en: Well, if you can get those in hand, then you are ready to start your journey
    in this chapter. Let’s get going.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，如果你能拿到这些，那你就准备好开始本章的旅程了。我们开始吧。
- en: Introducing API calls
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入 API 调用
- en: 'To define API calls, let’s start with what an **Application Programming Interface**
    (**API**) is. An API is a software interface that offers your application access
    to functions and processes from other applications. Think of it like this: when
    a user tries to get information from an application, they do so through the **user
    interface** (**UI**). The API has a similar function for software, so you could
    call API the UI of software.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义 API 调用，让我们从 **应用程序编程接口**（**API**）开始。API 是一种软件接口，提供了你应用程序访问其他应用程序功能和过程的能力。可以这样理解：当用户尝试从一个应用程序获取信息时，他们是通过
    **用户界面**（**UI**）来实现的。API 对于软件有类似的功能，所以你可以把 API 看作是软件的 UI。
- en: 'Now, API calls are made for a number of reasons:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，API 调用是出于多种原因进行的：
- en: You don’t want to write the underlying logic for a big feature yourself (trust
    me, a lot of the time, you don’t.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不想为一个大功能自己编写底层逻辑（相信我，很多时候你并不想）。
- en: The API gives access to resources that you ordinarily would not have (i.e.,
    creating a Virtual Machine using the API of a cloud provider)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 提供了你通常无法访问的资源（例如，通过云提供商的 API 创建虚拟机）
- en: You just want to get some information into your application (public APIs are
    very good for this)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你只是想把一些信息引入到你的应用程序中（公共 API 非常适合这个用途）
- en: 'Any coding library that you use for code is technically an API. You pull the
    library in and you call it to perform a function for your application. So, you
    can see why the definition of APIs can be confusing sometimes. But the point is
    this: more things are APIs than are not APIs. Everything you see in an app or
    a website comes from APIs.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你用于编码的任何库，技术上来说都是一个 API。你把这个库拉进来，然后调用它为你的应用执行某个功能。所以，你可以理解为什么 API 的定义有时会令人困惑。但重点是：更多的东西是
    API，而不是不是 API。你在应用或网站中看到的一切，都是通过 API 实现的。
- en: So, let’s dive into a couple of examples of how to use APIs to our benefit in
    DevOps.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们深入探讨一些如何在 DevOps 中利用 API 获得好处的例子。
- en: Exercise 1 – calling a Hugging Face Transformer API
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1 – 调用 Hugging Face Transformer API
- en: 'I chose this exercise because it is free, it will introduce you to a lot of
    integral tools and concepts behind APIs, and **Hugging Face APIs** are quite popular,
    so you will get hands-on experience with those. The API that we will be using
    specifically is a transformer that turns a written prompt into an image. It’s
    a great API to learn and find out how APIs in general work. For this lesson, I
    am using a Google Colab notebook, which is a Jupyter Notebook hosted by Google.
    It’s pretty useful when you want to recreate runtimes for certain sections of
    code. It’s like having your own little test section that you can divide into even
    smaller sections if you want to. Let’s make a notebook to further explore our
    Hugging Face API:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择这个练习是因为它是免费的，它将向你介绍许多 API 背后的核心工具和概念，并且 **Hugging Face API** 相当流行，你将亲身体验这些
    API。我们将使用的 API 具体是一个将文本提示转换为图像的 transformer。这是一个很棒的 API，可以帮助你了解和学习 API 的工作原理。对于这节课，我使用的是
    Google Colab 笔记本，它是由 Google 托管的 Jupyter Notebook。它非常有用，当你想为某些代码部分重新创建运行时环境时，可以使用它。它就像是一个你可以分成更小部分的测试区域。如果你愿意，我们可以创建一个笔记本来进一步探索
    Hugging Face API：
- en: 'To open a Colab notebook, you can go to [colab.research.google.com](http://colab.research.google.com)
    and create a new notebook. The end result should be something like this:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要打开 Colab 笔记本，你可以访问 [colab.research.google.com](http://colab.research.google.com)，然后创建一个新的笔记本。最终结果应该是这样：
- en: '![Figure 3.1 – Initial notebook created with Google Colab](img/B21320_03_1.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1 – 使用 Google Colab 创建的初始笔记本](img/B21320_03_1.jpg)'
- en: Figure 3.1 – Initial notebook created with Google Colab
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – 使用 Google Colab 创建的初始笔记本
- en: 'The first thing we need to do is install the correct libraries. These libraries
    contain the functions and modules with which we call our APIs. You can install
    them directly in the notebook if you’d like. We are going to install the `huggingface_hub`
    and `transformers[agents]` libraries. Here is the command for this:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是安装正确的库。这些库包含了我们调用 API 所需的函数和模块。如果你愿意，你可以直接在笔记本中安装它们。我们将安装 `huggingface_hub`
    和 `transformers[agents]` 库。以下是安装命令：
- en: '[PRE0]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When you put this command in the cell and press play, it will install the libraries
    in your runtime:'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你将此命令输入到单元格中并按下播放按钮时，它将在你的运行环境中安装所需的库：
- en: '![Figure 3.2 – Installing required libraries](img/B21320_03_2.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2 – 安装所需的库](img/B21320_03_2.jpg)'
- en: Figure 3.2 – Installing required libraries
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – 安装所需的库
- en: The next thing that you need to do is log in to `huggingface_hub` using an API
    key.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是使用 API 密钥登录 `huggingface_hub`。
- en: This is where the concept of the API key comes from. An API key is like a login
    but for your software. Most companies only allow full access to their APIs through
    the purchase of an API key. A lot of open source projects such as Hugging Face
    have API keys to promote and track user interaction and sometimes upgrade their
    users to a premium version if they want.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这就是 API 密钥的概念来源。API 密钥就像是软件的登录凭证。大多数公司只有通过购买 API 密钥才允许完全访问其 API。像 Hugging Face
    这样的许多开源项目也使用 API 密钥来推广和跟踪用户交互，有时还会为用户提供高级版本，如果他们需要的话。
- en: 'To get a Hugging Face API key, you must first go to the [huggingface.co](http://huggingface.co)
    web page and sign up or log in if you’ve already signed up. After doing that,
    go to your profile and then to the **Settings** tab and into the **Access Tokens**
    tab from there. You can generate an access token for use there:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取 Hugging Face API 密钥，首先必须访问 [huggingface.co](http://huggingface.co) 网站并注册账户，或者如果你已经注册过，直接登录。完成后，进入个人资料页面，点击
    **设置** 标签，然后进入 **访问令牌** 标签。在这里，你可以生成一个访问令牌进行使用：
- en: "![Figure 3.3 – Generating an access token for the \uFEFFHugging Face API](img/B21320_03_3.jpg)"
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – 为 Hugging Face API 生成访问令牌](img/B21320_03_3.jpg)'
- en: Figure 3.3 – Generating an access token for the Hugging Face API
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – 为 Hugging Face API 生成访问令牌
- en: 'You can copy this token for use in your next section of code. Here, you import
    the Hugging Face login module for the login API, and you input your key to use
    the API:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以复制这个令牌，并在下一部分代码中使用它。在这里，你导入 Hugging Face 登录模块以调用登录 API，并输入你的密钥来使用 API：
- en: '[PRE1]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You’ll get this message if you’ve loaded it correctly. If so, congratulations,
    you successfully called the login API:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你正确加载了它，你会看到此消息。如果是这样，恭喜你，成功调用了登录 API：
- en: '![Figure 3.4 – Successful login and initialization](img/B21320_03_4.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4 – 成功登录并初始化](img/B21320_03_4.jpg)'
- en: Figure 3.4 – Successful login and initialization
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – 成功登录并初始化
- en: 'Now comes the fun part. We are going to use the Hugging Face Transformer API
    to take a line of text and turn it into an image. But first, we must import a
    Hugging Face agent using the `HfAgent` API (see the pattern?):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来到有趣的部分。我们将使用Hugging Face Transformer API将一行文本转换成图像。但首先，我们必须使用`HfAgent` API导入一个Hugging
    Face代理（看到模式了吗？）：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We are using the `starcoderbase` model for this. Once you run this and get
    the agent, you can simply type in a prompt to generate an image:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用`starcoderbase`模型。一旦你运行它并获取了代理，你只需简单地输入提示即可生成一幅图像：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'But remember, if you don’t want to wait half an hour for your image, use the
    GPU runtime by going to the **runtime** tab and selecting it:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 但请记住，如果你不想等待半个小时来获取你的图像，可以转到**runtime**标签并选择GPU运行时：
- en: '![Figure 3.5 – Choosing a GPU for faster image processing](img/B21320_03_5.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.5 – 选择GPU以加快图像处理速度](img/B21320_03_5.jpg)'
- en: Figure 3.5 – Choosing a GPU for faster image processing
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – 选择GPU以加快图像处理速度
- en: 'The end product will leave you shocked and satisfied. You’ll get something
    like this:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终产品将让你感到震惊和满意。你将得到如下内容：
- en: '![Figure 3.6 – Your final result (beautiful, isn’t it?)](img/B21320_03_6.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.6 – 你的最终结果（很漂亮，不是吗？）](img/B21320_03_6.jpg)'
- en: Figure 3.6 – Your final result (beautiful, isn’t it?)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – 你的最终结果（很漂亮，不是吗？）
- en: So, we have completed this exercise and successfully called an API that has
    given us a visibly satisfying conclusion. What more could one ask for? Now, if
    only other people could witness the fruits of your labor!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们完成了这个练习，并成功调用了一个API，给我们带来了一个视觉上令人满意的结论。还有什么比这更让人期待的呢？现在，如果其他人也能见证你的劳动成果就好了！
- en: Well, that’s what calling APIs is all about. APIs are meant to be consumed by
    your target audience and so now, we are going to see how we can distribute our
    APIs.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，这就是调用API的全部意义所在。API旨在供目标受众使用，因此现在，我们将看看如何分发我们的API。
- en: Exercise 2 – creating and releasing an API for consumption
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2 – 创建和发布一个供消费的API
- en: Deploying applications is one of the most frequent tasks that a DevOps engineer
    might encounter. It is important to have a good, fast deployment, but before that,
    it is important to have a deployment in the first place. Deploying smaller and
    larger applications are alike in a lot of ways. One major way in which they differ
    is the lengths you must go through to maintain availability on larger applications.
    We won’t be discussing that in this section. We will instead just try to get an
    API up for adding two numbers. Like I said, let’s keep it simple and begin creating
    a new **Replit Repl** and start coding in it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 部署应用程序是DevOps工程师可能会遇到的最频繁的任务之一。拥有一个良好且快速的部署非常重要，但在此之前，首先要有一个部署。在许多方面，部署较小和较大的应用程序是相似的。它们之间主要的不同之处在于你必须为保持较大应用程序的可用性而采取的措施。我们在本节不会讨论这一点。我们将尝试为加法API准备一个API，就像我说的那样，让我们保持简单并开始在一个新的**Replit
    Repl**中进行编码。
- en: 'Sign up for an account at [replit.com](http://replit.com). You can create small
    virtual environments for practically every application framework and code base
    there. Once you have signed up, you can create a **Repl**, which is a small virtual
    server, by clicking the **Create** **Repl** button:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[replit.com](http://replit.com)注册一个账号。你可以为几乎每个应用程序框架和代码库创建小型虚拟环境。注册后，你可以通过点击**创建**
    **Repl**按钮来创建一个**Repl**，这是一个小型虚拟服务器：
- en: '![Figure 3.7 – Button to create a Repl](img/B21320_03_7.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.7 – 创建Repl的按钮](img/B21320_03_7.jpg)'
- en: Figure 3.7 – Button to create a Repl
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – 创建Repl的按钮
- en: 'Once you have done that, search for and create a Repl with the **Flask** template.
    The name is not relevant:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦完成，搜索并创建一个带有**Flask**模板的Repl。名称不重要：
- en: '![Figure 3.8 – Initializing a Flask Repl](img/B21320_03_8.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.8 – 初始化Flask Repl](img/B21320_03_8.jpg)'
- en: Figure 3.8 – Initializing a Flask Repl
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – 初始化Flask Repl
- en: 'This will give you an IDE that contains boilerplate Flask code that is pre-initialized
    and installed with the basic Flask libraries:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为您提供一个包含预初始化和安装了基本Flask库的样板Flask代码的IDE：
- en: '![Figure 3.9 – Initial Flask framework](img/B21320_03_9.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.9 – 初始Flask框架](img/B21320_03_9.jpg)'
- en: Figure 3.9 – Initial Flask framework
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – 初始Flask框架
- en: 'Concerning the preceding figure, when you click the `"/"` has already been
    defined. So, if you open the URL in a new tab, you’ll get something like this:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于前述的图，当你点击`"/"`时已经定义。因此，如果你在新标签页中打开该网址，你将会得到如下内容：
- en: '![Figure 3.10 – Initial Flask web page](img/B21320_03_10.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.10 – 初始Flask网页](img/B21320_03_10.jpg)'
- en: Figure 3.10 – Initial Flask web page
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10 – 初始Flask网页
- en: 'This function just returns a string on a webpage. Typically, APIs are written
    in a JSON format. So, let’s turn this into JSON. In Flask, that is pretty easy.
    You can just pass a variable that is a dictionary in the return type:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数只是返回一个网页上的字符串。通常，API是以JSON格式编写的。所以，我们将它转换为JSON格式。在Flask中，这是非常简单的。你只需在返回类型中传递一个字典变量：
- en: '![Figure 3.11 – Writing a simple JSON API in Flask](img/B21320_03_11.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.11 – 在Flask中编写简单的JSON API](img/B21320_03_11.jpg)'
- en: Figure 3.11 – Writing a simple JSON API in Flask
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11 – 在Flask中编写简单的JSON API
- en: 'Once that’s done, you’ll get a return value in JSON:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，你将得到一个JSON格式的返回值：
- en: '![Figure 3.12 – JSON API result](img/B21320_03_12.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.12 – JSON API结果](img/B21320_03_12.jpg)'
- en: Figure 3.12 – JSON API result
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12 – JSON API结果
- en: 'This API, as it is, only returns static values. To have it take user input,
    simply add `request` parameters in the URL itself. Let’s modify our application
    to take two parameters, `num1` and `num2`, which will be added, and their sums
    shown in the JSON return value:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个API目前只返回静态值。要让它接受用户输入，只需在URL中添加`request`参数。让我们修改应用程序，使其接受两个参数，`num1`和`num2`，它们将被加在一起，并在JSON返回值中显示它们的和：
- en: '![Figure 3.13 – Flask API code to add two numbers](img/B21320_03_13.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.13 – Flask API代码，用于将两个数字相加](img/B21320_03_13.jpg)'
- en: Figure 3.13 – Flask API code to add two numbers
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – Flask API代码，用于将两个数字相加
- en: 'The end result requires a URL in the form of `<your_url_here>/?num1=<number>&num2=<number>`.
    The result would look something like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果需要一个URL，格式为`<your_url_here>/?num1=<number>&num2=<number>`。结果将类似于以下内容：
- en: '![Figure 3.14 – Flask API call to add two numbers](img/B21320_03_14.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.14 – Flask API调用以将两个数字相加](img/B21320_03_14.jpg)'
- en: Figure 3.14 – Flask API call to add two numbers
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14 – Flask API调用以将两个数字相加
- en: So, now you have learned how to make an API in Python that adds two numbers
    and deploys the API. That’s a really big step. The only thing that gets exponentially
    more complex in the programming world is business logic. Security and networking
    are important too, but they usually follow a set formula. As long as you can deploy
    your logic to your end user, you’re good.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在你已经学会了如何在Python中创建一个API来将两个数字相加并部署该API。这是一个非常大的进步。编程世界中唯一会呈指数级复杂化的事情就是业务逻辑。安全性和网络同样重要，但它们通常遵循一定的公式。只要你能将你的逻辑部署到最终用户，你就可以了。
- en: Now, that you have learned the art of the API, we are going to dive into what
    delivers APIs to their end users. We are diving into networking. Networking is
    such an integral part of DevOps and application development in general that sometimes
    it’s not mentioned at all. So, let’s look at a few useful ways that we can use
    Python on the networking side.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经掌握了API的技巧，接下来我们将深入探讨如何将API交付给最终用户。我们将讨论网络。网络是DevOps和应用程序开发中不可或缺的一部分，以至于有时候它根本没有被提及。那么，接下来让我们看看一些我们可以在网络方面使用Python的有用方法。
- en: Networking
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络
- en: No, this is not about growing your LinkedIn connections, although that’s something
    I’d recommend doing too. Computer networks are essential to the functioning of
    every application these days because they are the only way to deliver constant
    value to the user while keeping them connected to your environment. Almost every
    device these days is connected to a network, which is why understanding the network
    of devices and the network of networks (it’s something called the internet, ever
    heard of it?) is very important.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 不，这不是在说如何扩展你的LinkedIn人脉，尽管我也推荐你去做这个。计算机网络对于当前每个应用程序的正常运行至关重要，因为它们是将持续价值交付给用户并保持他们与环境连接的唯一方式。如今，几乎每个设备都连接到网络，这也是为什么理解设备的网络和网络的网络（有个名字叫互联网，你听说过吗？）非常重要的原因。
- en: I am now going to demonstrate two examples of how to use Python for networking
    insights and data collection.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我将演示两个如何使用Python进行网络分析和数据收集的例子。
- en: Exercise 1 – using Scapy to sniff packets and visualize packet size over time
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1 – 使用Scapy捕获数据包并可视化数据包大小随时间的变化
- en: '**Scapy** is a Python library that can be used to replicate, simulate, and
    manipulate the data packets that are sent over a computer network. Scapy is a
    very useful tool in the belt of any developer or DevOps professional.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**Scapy**是一个Python库，可用于复制、模拟和操作通过计算机网络发送的数据包。Scapy是任何开发者或DevOps专业人士工具箱中的一款非常有用的工具。'
- en: 'In this exercise, we are going to use Scapy to collect a list of packets and
    get their timestamps and packet sizes. We are then going to map these onto a chart
    that we make using the **matplotlib library**. You can use the previously mentioned
    Google Colab for this exercise. So, let’s initialize the notebook and start writing
    our code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用 Scapy 收集数据包列表，并获取它们的时间戳和数据包大小。然后，我们将这些信息映射到我们使用**matplotlib 库**制作的图表上。您可以使用前面提到的
    Google Colab 来进行这个练习。那么，让我们初始化笔记本并开始编写代码：
- en: 'First, we need to install the `matplotlib` and `scapy` libraries:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要安装 `matplotlib` 和 `scapy` 库：
- en: '[PRE4]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, let’s write the code to use Scapy’s `sniff` module to get a list of packet
    sizes over timestamps:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们编写代码，使用 Scapy 的 `sniff` 模块获取时间戳上数据包大小的列表：
- en: '[PRE5]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You will get a list of the length of the last `100` packets that went through
    your network along with the timestamp and the type of traffic. If you refer to
    the following diagram, the packet sizes are stored in the `packet_sizes` array
    and the timestamps of the packet are stored in the `timestamps` variable:'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将获得最近通过您的网络的 `100` 个数据包的长度列表，并附带时间戳和流量类型。如果您参考以下示意图，数据包大小存储在 `packet_sizes`
    数组中，数据包的时间戳存储在 `timestamps` 变量中：
- en: '![Figure 3.15 – Sniffing packets in your computing device](img/B21320_03_15.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.15 – 在您的计算设备中嗅探数据包](img/B21320_03_15.jpg)'
- en: Figure 3.15 – Sniffing packets in your computing device
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15 – 在您的计算设备中嗅探数据包
- en: 'Let’s now write the code to plot the packet size over time using `matplotlib`:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们编写代码，使用 `matplotlib` 绘制随时间变化的数据包大小：
- en: '[PRE6]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will give us a chart with time on the *x*-axis and packet size on the
    *y*-axis:'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将给我们一个图表，*x* 轴为时间，*y* 轴为数据包大小：
- en: '![Figure 3.16 – Chart of packet size over time](img/B21320_03_16.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.16 – 随时间变化的数据包大小图表](img/B21320_03_16.jpg)'
- en: Figure 3.16 – Chart of packet size over time
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.16 – 随时间变化的数据包大小图表
- en: The preceding chart shows a pattern of network activity that seems to involve
    several correlated packets. So, you can see the network analysis library coming
    in handy already.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的图表显示了网络活动模式，看起来涉及多个相关的数据包。所以，您可以看到网络分析库已经开始派上用场了。
- en: So, we have now tracked our network activity and generated data insights from
    it using Python. Let’s look at one more network implementation, this time focusing
    on the routing rules that your device (or the device you are running your workload
    on) has.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在我们已经追踪了我们的网络活动，并通过 Python 生成了数据洞察。让我们看看另一个网络实现，这次重点关注您的设备（或您运行工作负载的设备）所拥有的路由规则。
- en: Exercise 2 – generating a routing table for your device
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2 – 为您的设备生成路由表
- en: Routing tables define the routes that certain web traffic takes within your
    devices. These tables exist in practically every device, and they define the routes
    by which those devices access computer networks. You can use the **netifaces Python
    library** to generate a routing table showing all the available routes and destinations
    that your device contains. The netifaces library in this case is used to collect
    the network interfaces (hence the name *netifaces*) of your operating system.
    You will then parse this information and display it in a tabular form. You can
    once again use Google Colab for this, though for more interesting results, you
    could try running the code locally.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 路由表定义了某些网络流量在您的设备中所经过的路径。这些表几乎存在于每个设备中，并且定义了设备访问计算机网络的路径。您可以使用**netifaces Python
    库**来生成路由表，显示设备中所有可用的路径和目的地。在这种情况下，netifaces 库用于收集操作系统的网络接口（因此得名 *netifaces*）。然后，您将解析这些信息并以表格形式展示。您仍然可以使用
    Google Colab 来完成此操作，尽管为了获得更有趣的结果，您可以尝试在本地运行代码。
- en: 'Let’s begin the steps to generate a routing table for your device. If you’ve
    been following along so far, you know the first step is installing the library:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们开始为您的设备生成路由表的步骤。如果您一直跟随到现在，您已经知道第一步是安装库：
- en: '[PRE7]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, write code to generate the routing table:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，编写代码来生成路由表：
- en: '[PRE8]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It’s a lot of code, but fairly easy to make sense of. It also provides you
    with detailed information about where the network traffic goes from your network
    interfaces. If you tried it on Colab as I suggested, you’d get something like
    this:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码很多，但相当容易理解。它还为您提供了有关网络流量从网络接口到哪里去的详细信息。如果您按照我建议的在 Colab 上试过，您会得到类似这样的结果：
- en: '![Figure 3.17 – Route table on Colab](img/B21320_03_17.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.17 – Colab 上的路由表](img/B21320_03_17.jpg)'
- en: Figure 3.17 – Route table on Colab
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.17 – Colab 上的路由表
- en: 'And if you’ve done it on your personal computer, you might get something like
    this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在个人计算机上操作，可能会得到如下所示的结果：
- en: '![Figure 3.18 – Route table on a personal computer](img/B21320_03_18.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.18 – 个人计算机上的路由表](img/B21320_03_18.jpg)'
- en: Figure 3.18 – Route table on a personal computer
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.18 – 个人计算机上的路由表
- en: A bit more baggage was added there.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这里增加了一些额外的负担。
- en: But that is the gist of it, and these are just a couple of ways you can use
    Python to facilitate the networking aspect of DevOps.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 但这就是要点，这只是你可以使用 Python 来促进 DevOps 网络部分的一些方法。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned a thing or two about the hands-on part of this
    book. You’ve learned about APIs and computer networks, which practically means
    you’re halfway there as far as the Python DevOps implementation goes.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学到了一些关于本书动手部分的内容。你了解了 API 和计算机网络，这几乎意味着在 Python DevOps 实现方面，你已经走了一半的路。
- en: In this chapter, not only did you learn about these important DevOps concepts,
    but you also learned how you can implement them in your DevOps process. You can
    take this code and implement it directly in your DevOps workload right now if
    that benefits you.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你不仅了解了这些重要的 DevOps 概念，还学到了如何在你的 DevOps 流程中实现它们。如果对你有帮助，你可以直接将这段代码应用到你的
    DevOps 工作负载中。
- en: These fundamentals that you have learned will help you enhance, monitor, and
    diagnose problems on practically any DevOps workload that you may encounter. In
    the next chapter, we will discuss the creation of resources in a DevOps workload
    and how and where Python can be of assistance in the process.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你所学到的这些基础知识将帮助你在几乎任何你可能遇到的 DevOps 工作负载中进行增强、监控和故障诊断。在下一章中，我们将讨论如何在 DevOps 工作负载中创建资源，以及
    Python 在这一过程中如何提供帮助和发挥作用。
