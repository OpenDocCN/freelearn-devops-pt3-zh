- en: '*Chapter 1*: Career Paths'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第一章*：职业路径'
- en: A DevOps career path is never linear, does not have a single point of entry,
    and can diverge at any moment. DevOps careers are rooted in Lean, Agile, and **Extreme
    Programming** (**XP**), making it as much a culture fit between a candidate and
    employer as a technical fit. In this chapter, you will get a history lesson on
    DevOps that will aid in discussions with recruiters and hiring teams in the future.
    You will also be introduced to different skill profiles, which will help in determining
    the direction you take your career.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 的职业路径从来不是线性的，没有单一的进入点，随时可能分岔。DevOps 职业根植于精益（Lean）、敏捷（Agile）和**极限编程**（**XP**），因此它既是技术上的匹配，也是候选人与雇主之间文化上的契合。在这一章中，你将学习
    DevOps 的历史，这将有助于你未来与招聘人员和招聘团队的讨论。你还将了解不同的技能档案，这将帮助你确定职业发展的方向。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Why you should pursue a career in DevOps
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么你应该追求 DevOps 职业
- en: Overview of DevOps history
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 历史概述
- en: DevOps culture
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 文化
- en: DevOps career paths
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 职业路径
- en: Reading 200+ pages on a career you are not sure you want to pursue seems silly;
    time is a resource that is in short supply. In this section, we will cover why
    you should pursue a career in DevOps; specifically, why you should choose DevOps
    over other IT-related careers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读超过 200 页关于你不确定是否想从事的职业的资料似乎有些傻；时间是有限的资源。在本节中，我们将讨论为什么你应该追求 DevOps 职业，特别是为什么应该选择
    DevOps 而不是其他 IT 相关的职业。
- en: Earning potential
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 收入潜力
- en: 'DevOps is constantly ranked as one of the highest-paying professions, with
    a median salary of $100,000\. Entry-level DevOps engineers can expect to earn
    anywhere from $75,000 up to $145,000\. As you progress in your career, you can
    expect to earn more. Look at the following graph:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 一直被评为收入最高的职业之一，年薪中位数为 100,000 美元。入门级的 DevOps 工程师年薪大致在 75,000 美元到 145,000
    美元之间。随着你职业发展的推进，收入也会逐渐增加。看看下面的图表：
- en: '![Figure 1.1 – DevOps salaries'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.1 – DevOps 薪资'
- en: '](img/Figure_1.01_B18117.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.01_B18117.jpg)'
- en: Figure 1.1 – DevOps salaries
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – DevOps 薪资
- en: Another reason you should consider a career in DevOps is you will never get
    bored as it is ever-evolving, which allows many opportunities to learn new skills.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该考虑 DevOps 职业生涯的另一个原因是，它不断发展变化，永远不会让你感到无聊，这也为你提供了许多学习新技能的机会。
- en: Constant learning opportunities
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续学习的机会
- en: Part of your job as a DevOps engineer is to stay up to date with the latest
    tools, technology, and trends that are occurring in the industry. DevOps engineers
    get paid to learn! It is one of my favorite things about my role as a DevOps engineer.
    As a DevOps engineer, you will ward off boredom while at the same time future-proofing
    your career.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 DevOps 工程师，你的一部分工作就是与行业中最新的工具、技术和趋势保持同步。DevOps 工程师是被支付来学习的！这也是我作为 DevOps
    工程师角色中最喜欢的一部分。作为一名 DevOps 工程师，你将在避免无聊的同时，为你的职业生涯做好未来准备。
- en: Impact on the company
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对公司影响
- en: As a DevOps engineer, you will be delivering features used and felt by every
    part of the company. There is no other technical position where your efforts will
    have such a significant impact on the business.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名 DevOps 工程师，你将交付公司每个部门都能使用并感受到的功能。没有其他技术职位能够像这个岗位一样，对业务产生如此深远的影响。
- en: Flexibility
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 灵活性
- en: As a DevOps engineer, you will have the flexibility to work where you want,
    when you want. Remote work has become increasingly accepted across the technology
    industry; DevOps teams were doing this before it was considered cool. Collaboration
    tools including Slack and Jira have made asynchronous work possible. What this
    means is you do not have to work the same hours as the rest of your team – at
    least not all the time.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名 DevOps 工程师，你将拥有在任何地方、任何时间工作的灵活性。远程工作已经在技术行业中逐渐被接受；而 DevOps 团队早在这一趋势成为流行之前就已经开始了这种方式。包括
    Slack 和 Jira 在内的协作工具使得异步工作成为可能。这意味着你不必和团队的其他成员在相同的工作时间内工作——至少不是一直如此。
- en: So, Why Should You Pursue a Career in DevOps?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么你应该追求 DevOps 职业呢？
- en: As a DevOps engineer, you will be highly compensated, constantly learn and apply
    cutting-edge technology to solve problems impacting the entire business, and have
    the flexibility to work where and when you want.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名 DevOps 工程师，你将获得丰厚的薪酬，不断学习并运用前沿技术解决影响整个业务的问题，同时还能享有灵活的工作地点和时间选择。
- en: Overview of DevOps history
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 历史概述
- en: You are reading a book on DevOps, likely meaning you have a basic understanding
    of what DevOps is; if not, there's no need to worry – that will be covered as
    well. The history of DevOps is less known even within DevOps communities. First,
    we'll go back to understand key elements that came before DevOps that laid the
    groundwork and created the environment needed for DevOps to grow.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你正在阅读一本关于DevOps的书，这意味着你大概对DevOps有所了解；如果没有，也无需担心——这部分内容会在书中涵盖。即便是在DevOps社区内部，DevOps的历史也是较为未知的。首先，我们将回顾DevOps之前的一些关键元素，它们为DevOps的诞生打下了基础，并创造了DevOps成长所需的环境。
- en: Lean manufacturing
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 精益制造
- en: Lean manufacturing is a production method aimed primarily at reducing cycle
    times within the production system as well as response times from suppliers and
    to customers.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 精益制造是一种主要旨在减少生产系统内的周期时间以及供应商和客户响应时间的生产方式。
- en: 'The term **Lean** was coined in 1988 by *John Krafcik* and defined in 1996
    by *James Womack* and *Daniel Jones*. Lean manufacturing is well-established as
    a set of best practices for manufacturing. Often branded as the *Toyota Manufacturing
    Method*, Lean manufacturing strives for process optimization across the manufacturing
    floor. *Continuous improvement* is the mantra for Lean manufacturing and practitioners
    continually evaluate ways to do the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**精益**这个术语是由*John Krafcik*在1988年提出的，并由*James Womack*和*Daniel Jones*在1996年进行了定义。精益制造已成为一套公认的最佳制造实践。通常被称为*丰田生产方式*，精益制造旨在实现生产车间的过程优化。*持续改进*是精益制造的口号，实践者不断评估以下方法的改进：'
- en: Keep inventory at a minimum.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持最低库存。
- en: Minimize the queue of orders.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化订单排队。
- en: Maximize efficiency in the manufacturing process.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大化制造过程的效率。
- en: Agile
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 敏捷
- en: In the early 2000s, traditional waterfall methods were evolving and being replaced
    by Agile, which required a large culture shift that focused on team empowerment.
    Agile is based around 4 core values and 12 principles. Some were adopted into
    DevOps as it evolved ([https://kissflow.com/project/agile/values-and-principles-of-agile-manifesto/](https://kissflow.com/project/agile/values-and-principles-of-agile-manifesto/)).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在2000年代初期，传统的瀑布方法正在演变并被敏捷方法取代，这要求进行一个以团队赋能为核心的大规模文化转变。敏捷基于4个核心价值观和12个原则。一些原则在DevOps发展过程中被采纳（[https://kissflow.com/project/agile/values-and-principles-of-agile-manifesto/](https://kissflow.com/project/agile/values-and-principles-of-agile-manifesto/)）。
- en: Extreme programming
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 极限编程
- en: '**XP** aims to improve software quality and responsiveness to changing customer
    requirements. If you are thinking that sounds a lot like Agile, you wouldn''t
    be wrong; it is a type of Agile software development. The biggest difference between
    XP and other Agile frameworks is the emphasis placed on the code and development
    ([https://en.wikipedia.org/wiki/Extreme_programming](https://en.wikipedia.org/wiki/Extreme_programming)).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**XP**旨在提高软件质量和对变化客户需求的响应能力。如果你觉得这听起来很像敏捷，你是对的；它是一种敏捷软件开发方法。XP与其他敏捷框架的最大区别在于，它特别强调代码和开发（[https://en.wikipedia.org/wiki/Extreme_programming](https://en.wikipedia.org/wiki/Extreme_programming)）。'
- en: The main contribution XP gave DevOps was **Continuous Integration** (**CI**).
    CI was a term introduced in 2001 by *Grady Brooch* and was published as the Brooch
    method soon after.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: XP对DevOps的主要贡献是**持续集成**（**CI**）。CI是*Grady Brooch*于2001年提出的一个术语，并很快以Brooch方法发布。
- en: DevOps
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps
- en: The exact inception of DevOps will forever be debated; it is widely accepted
    that between 2007 and 2008 is when the movement started. It was a perfect storm
    of events that allowed and triggered the DevOps movement. The dysfunction in the
    software industry, namely between IT operations and software development communities,
    was the spark that ignited the movement, but it was the pioneers of Agile, Lean,
    and XP who were responsible for the initial fuel of the DevOps movement.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps的确切起源将永远是一个争论的话题；普遍接受的看法是，DevOps运动始于2007年至2008年之间。这一时期的事件汇聚成了一场完美的风暴，促使了DevOps运动的诞生。软件行业中的功能失调，尤其是IT运维与软件开发社区之间的矛盾，成为了点燃这一运动的火花，但正是精益、敏捷和XP的先驱们为DevOps运动提供了最初的动力。
- en: In a world absent of DevOps, developers and IT operations belonged to different
    corporate hierarchies and **Key Performance Indicators** (**KPIs**) for IT operations
    and development were asynchronous and detrimental to the other. These conditions
    created teams siloed from one another, causing a breakdown in communication, and
    ultimately leading to failed deployments, missed deadlines, and angry customers.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有 DevOps 的世界里，开发人员和 IT 运维属于不同的企业层级，且 IT 运维和开发的**关键绩效指标**（**KPI**）是不同步的，且对彼此产生负面影响。这些条件导致了团队之间的壁垒，造成了沟通障碍，最终导致了部署失败、错过截止日期和客户的不满。
- en: In 2008 Andrew Shafer, a software engineer, tried to put together a meetup session
    entitled *Agile Infrastructure* at an Agile conference in Canada. Patrick Debois,
    an Agile practitioner, was the only one there. The two had a long conversation,
    which today is known as the spark that ignited a fire that became a movement known
    as **DevOps**. Andrew and Patrick formed a discussion group for other people to
    post their ideas for how to solve this divide between development and operations
    later that year. In 2009, the first DevOpsDays was held, in Belgium, which turned
    DevOps into a buzzword forever cemented in history. The DevOps movement continued
    with local meetups around the globe. Around 2010, open source software focused
    on DevOps began growing in popularity; Jenkins CI server software and Chef infrastructure
    provisioning software were a couple of pioneers.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 2008 年，软件工程师 Andrew Shafer 尝试在加拿大的一个敏捷会议上组织一个名为 *敏捷基础设施* 的聚会。敏捷实践者 Patrick Debois
    是唯一参加的人。两人进行了长时间的对话，这段对话如今被认为是点燃了一个火花，最终发展成了名为 **DevOps** 的运动。Andrew 和 Patrick
    在那年晚些时候组建了一个讨论小组，供其他人发布他们如何解决开发与运维之间鸿沟的想法。2009 年，第一次 DevOpsDays 在比利时举行，这一事件让 DevOps
    成为一个永载史册的流行词汇。DevOps 运动随后在全球各地的本地聚会中继续发展。大约在 2010 年，专注于 DevOps 的开源软件开始流行起来；Jenkins
    CI 服务器软件和 Chef 基础设施配置软件是其中的几个先驱。
- en: Pro Tip
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 专业提示
- en: Understanding the history behind the job title you are applying for will make
    you seem more serious about the role and conversation much more natural. Dig deeper
    and read some books such as *The DevOps Handbook* and *The Phoenix Project*. They
    will only increase your chances of success further.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 了解你所申请的职位背后的历史，会让你显得更为认真，且对话也会更加自然。深入了解，阅读一些书籍，如《*DevOps 手册*》和《*凤凰项目*》。这些书籍只会进一步增加你成功的机会。
- en: 'The following diagram gives a timeline of key dates in the history of DevOps:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了 DevOps 历史中的关键日期时间线：
- en: '![Figure 1.2 – History of DevOps timeline'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.2 – DevOps 历史时间线'
- en: '](img/Figure_1.02_B18117.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.02_B18117.jpg)'
- en: Figure 1.2 – History of DevOps timeline
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – DevOps 历史时间线
- en: Now that we have learned about the history of DevOps, let's look at DevOps culture
    in the next section.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 DevOps 的历史，让我们在下一节中了解 DevOps 文化。
- en: DevOps culture
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 文化
- en: DevOps is a set of practices that combines software development and IT operations.
    It aims to shorten the systems development life cycle and provide continuous delivery
    with high software quality. DevOps is complementary with Agile software development;
    several DevOps aspects came from the Agile methodology ([https://en.wikipedia.org/wiki/DevOps](https://en.wikipedia.org/wiki/DevOps)).
    Diving deeper into that definition, we learn DevOps is a multi-faceted practice.
    DevOps has seven guiding principles that combine to form DevOps culture. DevOps
    culture aims to decrease cycle time, apply incremental changes, and create a more
    streamlined development process.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 是一套结合软件开发和 IT 运维的实践。它旨在缩短系统开发生命周期，并提供高质量的软件持续交付。DevOps 与敏捷软件开发是互补的；DevOps
    的几个方面源自于敏捷方法论（[https://en.wikipedia.org/wiki/DevOps](https://en.wikipedia.org/wiki/DevOps)）。深入理解这个定义，我们会发现
    DevOps 是一种多面向的实践。DevOps 有七个指导原则，它们共同构成了 DevOps 文化。DevOps 文化旨在减少周期时间，应用增量变化，并创建更精简的开发流程。
- en: 'The following diagram gives a graphical representation of the seven principles
    of DevOps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了 DevOps 七个原则的图示：
- en: '![Figure 1.3 – DevOps culture – principles'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.3 – DevOps 文化 – 原则'
- en: '](img/Figure_1.03_B18117.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.03_B18117.jpg)'
- en: Figure 1.3 – DevOps culture – principles
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – DevOps 文化 – 原则
- en: Now we will take a deeper dive into each of the seven principles of DevOps.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将更深入地探讨 DevOps 的七个原则。
- en: Customer-centric
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以客户为中心
- en: Test often, get end user feedback frequently, and fail fast. The feedback loop
    between the customer and end users of products needs to be as short as possible.
    All actions taken by a team should be focused on the experience of the end user.
    This is also where the saying *shift-left* comes from, meaning *the sooner a feature
    is tested for bugs, the quicker it will be resolved*, and fewer downstream dependencies
    will be compromised.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 经常进行测试，频繁获取最终用户的反馈，并快速失败。客户与最终用户之间的反馈循环应尽可能短。团队所采取的所有行动应当集中在最终用户的体验上。这也正是*shift-left*（左移）这一说法的由来，意味着*越早测试功能中的错误，问题就能越快解决*，并且下游依赖的风险会减少。
- en: A Tale of Two Start-Ups Bidding to Develop a Fitness Tracker for a Large Insurance
    Company
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 两家初创公司竞标为一家大型保险公司开发健身追踪器的故事
- en: '**Need**: A wearable device that will track users'' fitness.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**需求**：一种可穿戴设备，用于追踪用户的健身情况。'
- en: '**Acceptance Criteria**: A wearable watch-like device that tracks various workouts.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**验收标准**：一款像手表一样的可穿戴设备，能够追踪多种运动。'
- en: '**Company X** employs test-driven development and has weekly demos where they
    receive feedback. During a demo, they showcase a device and describe plans to
    track running and cycling. They learn that a big portion of their customers are
    swimmers. The team takes the feedback and shifts priority from running and cycling
    to swimming. The customer is impressed.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**X公司**采用测试驱动开发，并且每周进行演示，收集反馈。在一次演示中，他们展示了一个设备并描述了追踪跑步和骑行的计划。随后他们得知，许多客户是游泳爱好者。团队根据反馈调整了优先级，将重点从跑步和骑行转向游泳。客户对这一调整印象深刻。'
- en: '**Company Y** does not feel it is necessary to have demos as their past applications
    have done relatively well. The team focuses on the running and cycling workout
    tracking ability. During acceptance, they receive feedback that the watch must
    have the ability to track swimming. The development team is unable to meet the
    requirements in the given time frame. The customer is not impressed.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**Y公司**认为不需要演示，因为他们过去的应用程序表现相对良好。团队将重点放在跑步和骑行的追踪能力上。在验收时，他们收到了客户的反馈，要求这款手表必须具备游泳追踪功能。开发团队未能在规定的时间内满足需求，客户对此感到失望。'
- en: '**Outcome**: Company X is awarded the contract and goes on to be a billion-dollar
    company. Company Y is not awarded the contract and receives poor press leading
    to another failed start-up.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**结果**：X公司获得了合同，之后发展成为一家价值十亿美元的公司。Y公司未能获得合同，并且因媒体报道不佳，导致又一次初创公司失败。'
- en: Foster collaboration
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 培养协作精神
- en: The collaboration between the development team and IT operations teams is the
    most basic must for DevOps. Removal of silos ensures collaboration and alignment
    across entire organizations, ensuring a singular focus on the customer.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 开发团队与IT运维团队之间的协作是DevOps的最基本要求。消除部门壁垒能够确保全公司范围内的协作与统一，从而专注于客户需求。
- en: A collaborative culture is most effective when implemented using a top-down
    approach; executive sponsorship should be lined up ahead of any major culture
    shift. Another, much slower, approach is grassroots initiatives within an organization.
    A group of like-minded individuals with a platform to share on is all it takes
    to start a revolution. The trouble with the latter approach is overtime burnout
    can occur if you work tirelessly to make a change and see no results time and
    time again. Instead start with something you do have control over, such as your
    team.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 协作文化在采用自上而下的方法时最为有效；高层领导的支持应当在任何重大文化转型之前就安排好。另一种更慢的方式是组织内的草根倡议。只需要一群志同道合的人，提供一个平台来分享意见，就能掀起一场变革。然而，这种方法的问题是，长期的过度工作可能会导致倦怠感，尤其是当你不断为改变努力却始终未见成效时。相反，可以从你能掌控的事情做起，例如从你的团队开始。
- en: Robert Weidner is a senior director at Optum and is one of only 26 Certified
    Enterprise Coaches in the world and is also my mentor and former manager. While
    working under Robert, our team was empowered to choose what micro team we worked
    in. We were also encouraged to hop over and help any other micro team who needed
    our support. When it came to stack ranking the team and fitting us to the bell
    curve for our bonus, we did our reviews of each team member during an offsite
    with the entire team present and in the hot seat while receiving feedback. It
    was frightening, but it worked because the team trusted each other.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 罗伯特·魏德纳（Robert Weidner）是Optum的高级总监，世界上仅有26位认证的企业教练之一，同时也是我的导师和前经理。在罗伯特的领导下，我们的团队有权选择我们所工作的微团队。我们还被鼓励帮助任何需要我们支持的其他微团队。在对团队进行绩效排名，并将其适应于奖金的正态曲线时，我们在一次外出活动中对每位团队成员进行评审，所有团队成员在场并在热座上接受反馈。那时是令人害怕的，但它奏效了，因为团队彼此信任。
- en: End-to-end ownership
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 端到端所有权
- en: 'Feature teams ensure end-to-end responsibility by giving the team a vertical
    slice of a product, a feature. The feature, **Feature 1: Button X***,* has two
    user stories: one for development and one for testing. The definition of done
    for the feature also requires the feature to be deployed successfully. This can
    be seen in *Figure 1.4*. The final piece to note is the ongoing support of *Button
    X* also remains with the team. Our company has started to call this **You Build
    It, You Own It** (**YBYO**). The rationale behind this concept is that the team
    who built something is going to have the most knowledge about it when there is
    a production issue.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 特性团队通过为团队提供产品的垂直切片（即特性）来确保端到端的责任。这个特性，**特性 1：按钮 X**，有两个用户故事：一个用于开发，一个用于测试。特性的完成定义还要求特性成功部署。这可以在*图
    1.4*中看到。最后需要注意的一点是，*按钮 X*的持续支持也仍由该团队负责。我们公司已经开始称其为**你建造它，你拥有它**（**YBYO**）。这一概念的背后逻辑是，建造某个功能的团队将是对该功能最了解的团队，尤其是在出现生产问题时。
- en: '![Figure 1.4 – Feature-centered team (E2E ownership)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.4 – 以特性为中心的团队（端到端所有权）'
- en: '](img/Figure_1.04_B18117.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.04_B18117.jpg)'
- en: Figure 1.4 – Feature-centered team (E2E ownership)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 以特性为中心的团队（端到端所有权）
- en: 'In traditional development methods such as waterfall, teams are broken down
    and created at the activity level, also known as a horizontal slice of work. Ownership
    of a feature is split among various teams. In the following example, three teams
    must interact with the feature before it makes it to the end user, and another
    team is responsible for ongoing support. This is problematic; the operational
    support team is oftentimes not aware of the most recent changes the development
    team made, leading to extended downtimes and outages:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的开发方法中，如瀑布模型，团队通常在活动层面被拆分和创建，这也被称为工作中的水平切片。特性（Feature）的所有权在不同的团队之间划分。在以下示例中，三个团队必须与特性进行交互，才能将其交付给最终用户，而另一个团队则负责持续的支持。这是一个问题，因为操作支持团队通常不了解开发团队最近做出的更改，从而导致长时间的停机和故障：
- en: '![Figure 1.5 – Waterfall teams'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.5 – 瀑布式团队'
- en: '](img/Figure_1.05_B18117.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.05_B18117.jpg)'
- en: Figure 1.5 – Waterfall teams
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 瀑布式团队
- en: Now, we'll talk about continuous improvement.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将讨论持续改进。
- en: Continuous improvement
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续改进
- en: 'Continuous improvement was inherited from Lean. The entire team should be encouraged
    and, more importantly, empowered to make changes without fear of failure. Teams
    instead use failure as opportunities to improve on flawed processes. This is also
    known as `continous_improvement.sh`) to ensure your team is empowered to make
    improvements, continuously:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 持续改进继承自精益方法。整个团队应当受到鼓励，更重要的是，应该有权利在不怕失败的情况下做出改变。团队将失败视为改进有缺陷流程的机会。这也被称为`continous_improvement.sh`，以确保你的团队能够不断地进行改进：
- en: '![Figure 1.6 – Continuous improvement shell script'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.6 – 持续改进脚本'
- en: '](img/Figure_1.06_B18117.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.06_B18117.jpg)'
- en: Figure 1.6 – Continuous improvement shell script
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – 持续改进脚本
- en: The preceding script is a simple script that defines the flow of how the continuous
    improvement flow would operate if it were a shell script.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 上述脚本是一个简单的脚本，定义了如果持续改进流程是一个 shell 脚本，它的操作流程会是什么样子。
- en: Automate everything
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化一切
- en: 'While doing research for this book, I noticed two common wordings: *automate
    everything* and *automate (almost) everything*. Further research revealed a common
    theme in types of processes that should not be automated, items with no payback,
    and items including a high degree of design or visual inspection, as seen in the
    following list ([https://dzone.com/articles/what-to-automate-and-what-not-to-automate](https://dzone.com/articles/what-to-automate-and-what-not-to-automate)):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在为本书进行研究时，我注意到两种常见的说法：*自动化一切*和*自动化（几乎）一切*。进一步的研究揭示了不应自动化的流程类型，包括没有回报的事项和需要高度设计或视觉检查的事项，如下所示（[https://dzone.com/articles/what-to-automate-and-what-not-to-automate](https://dzone.com/articles/what-to-automate-and-what-not-to-automate)）：
- en: Automation with no ROI
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无投资回报的自动化
- en: Design
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计
- en: Final QC of an application
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序的最终质量检查
- en: 'Processes should have the least amount of manual intervention possible. The
    reason for this is simple: humans are error-prone while machines (computers) are
    excellent at executing high-volume repeatable tasks.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 流程应该尽可能减少人工干预。原因很简单：人类容易出错，而机器（计算机）擅长执行高频次、可重复的任务。
- en: Next, we will cover continuous learning, a DevOps principle that is important
    for individuals looking to enter the field of DevOps, as well as those looking
    to stay relevant in the ever-changing field of technology.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论持续学习，这是一个对希望进入DevOps领域的人以及那些希望在不断变化的技术领域保持竞争力的人的重要DevOps原则。
- en: Continuous learning
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续学习
- en: Technology is evolving at an astonishing rate; the most well-known example of
    this is Moore's law. Moore's law is the observation that the number of transistors
    in a dense **Integrated Circuit** (**IC**) doubles about every 2 years ([https://en.wikipedia.org/wiki/Moore%27s_law](https://en.wikipedia.org/wiki/Moore%27s_law)).
    The number of transistors that fit into a microprocessor reached over 10 billion
    in 2017\. It was under 10,000 in 1971( [https://ourworldindata.org/technological-progress](https://ourworldindata.org/technological-progress)).
    Being a continuous learner is a personal attribute that will get you hired.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 技术正以前所未有的速度发展；最著名的例子就是摩尔定律。摩尔定律是一个观察结果，即密集**集成电路**（**IC**）中的晶体管数量大约每2年翻一番（[https://en.wikipedia.org/wiki/Moore%27s_law](https://en.wikipedia.org/wiki/Moore%27s_law)）。到2017年，微处理器中可容纳的晶体管数量已经超过100亿，而在1971年这一数字不到1万（[https://ourworldindata.org/technological-progress](https://ourworldindata.org/technological-progress)）。成为一个持续学习者是一个能让你被聘用的个人特质。
- en: 'Pro Tip: You Must Be a Continuous Learner If You Wish to Succeed in DevOps'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：如果你希望在DevOps中取得成功，必须是一个持续学习者
- en: Creating a public project using a new technology is a great way to showcase
    this to potential hiring managers. Another way is to make sure to leave digital
    breadcrumbs of the most recent articles you have read, whether it be a post on
    LinkedIn or a tweet on Twitter.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新技术创建一个公共项目是向潜在招聘经理展示这一点的好方法。另一种方式是确保留下你最近阅读的文章的数字足迹，无论是在LinkedIn上的帖子，还是在Twitter上的推文。
- en: An example that sticks out is an interview for a senior DevOps engineer role
    that was down to the final two candidates. Both candidates had tenure with the
    organization, exceeded the qualifications, interviewed well, and had advanced
    degrees. The candidate that received an offer displayed a hunger for knowledge
    throughout the interview process in subtle ways. The candidate chose to focus
    not on their degree but on a side project that had the purpose of teaching the
    candidate Golang. The theory of data science was being demonstrated with the application
    and it was cool. What stuck out, and continues to, was the candidate's desire
    to learn new things.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一个突出的例子是一个高级DevOps工程师职位的面试，最终剩下两位候选人。两位候选人在组织中都有一定的任期，超出了职位要求，面试表现良好，并且都拥有高等学位。最终获得录用的候选人在面试过程中通过细微的方式表现出对知识的渴望。该候选人选择将焦点放在一个侧项目上，而不是他们的学位，该项目的目的是教候选人Golang。数据科学的理论通过该应用得到了展示，而且很酷。最令我印象深刻的是，候选人有学习新事物的强烈愿望，这也是他们继续脱颖而出的原因。
- en: In summary, the combination of development and operation along with the seven
    DevOps principles, when applied together, form the DevOps culture. DevOps is a
    completely unique derivative of Lean, Agile, and XP aiming to shorten the feedback
    loop between development and the end user.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，开发与运维的结合以及七个DevOps原则的共同应用，形成了DevOps文化。DevOps是精益、敏捷和XP的完全独特衍生物，旨在缩短开发与最终用户之间的反馈循环。
- en: 'Take a look at the following visual depiction of DevOps culture broken down
    into the practices and principles:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 请看下面的 DevOps 文化图示，其中将其划分为不同的实践和原则：
- en: '![Figure 1.7 – DevOps culture chart'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.7 – DevOps 文化图表'
- en: '](img/Figure_1.07_B18117.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.07_B18117.jpg)'
- en: Figure 1.7 – DevOps culture chart
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7 – DevOps 文化图表
- en: In summary, DevOps culture contains seven guiding principles, as seen in *Figure
    1.7*. In the next section, different career paths for a DevOps engineer will be
    discussed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，DevOps 文化包含七项指导原则，如 *图 1.7* 所示。在接下来的部分中，将讨论 DevOps 工程师的不同职业路径。
- en: DevOps career paths
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 职业路径
- en: The field of DevOps is dense and is challenging to navigate, even for experienced
    practitioners. DevOps consists of eight core practices and follows seven basic
    principles. Unsurprisingly, there are numerous career paths in the field of DevOps.
    The generalist is the most common DevOps role.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 领域内容庞杂，即使对于经验丰富的从业者来说，也具有挑战性。DevOps 包含八个核心实践，并遵循七项基本原则。不足为奇的是，DevOps
    领域有着众多的职业路径，而通才是最常见的 DevOps 角色。
- en: A **DevOps generalist** is comparable to a Swiss Army knife, which is designed
    to handle as many tasks as possible. It can cut rope, open a can, cut wire, and
    if needed, the Swiss Army knife could fillet a fish. A DevOps generalist can create
    a deployment pipeline, write infrastructure as code scripts, and manage an **Elastic
    Kubernetes Service** (**EKS**) cluster in **Amazon Web Services** (**AWS**) if
    necessary.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**DevOps 通才**可以类比为瑞士军刀，它被设计用来处理尽可能多的任务。它可以切绳子、开罐、剪电线，必要时，瑞士军刀甚至能片鱼。DevOps 通才可以创建部署管道，编写基础设施即代码脚本，并且如果需要，还能在
    **Amazon Web Services** (**AWS**) 中管理 **Elastic Kubernetes Service** (**EKS**)
    集群。'
- en: A **DevOps specialist** is comparable to a fish fillet knife, which is singularly
    designed to fillet fish most effectively. The knife's profile, blade material,
    and ergonomics are finely tuned for a singular task, slicing fish. For example,
    a DevOps cloud specialist has spent their career focused on becoming an expert
    in cloud infrastructure, cloud architecture, and cloud security, and managing
    an EKS cluster in AWS is what they do in their sleep. It is likely that they would
    find a more cost-efficient way to do it than a non-cloud specialist.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**DevOps 专家**可以类比为一把鱼片刀，它专为最有效地片鱼而设计。刀刃的形状、刀材和人机工程学都经过精细调校，以完成唯一的任务——片鱼。例如，一个
    DevOps 云专家将自己的职业生涯集中在云基础设施、云架构和云安全领域，并且管理 AWS 中的 EKS 集群已经是他们的“呼吸”般的技能。他们很可能会比非云专家找到更具成本效益的方式来完成这项工作。'
- en: A **DevOps specializing generalist** is comparable to an **Everyday Carry**
    (**EDC**) knife with a trailing point blade. This knife has ergonomics similar
    to a Swiss Army knife but a blade profile giving it the ability to fillet fish
    at a comparable level to a fillet knife. A DevOps specializing generalist who
    spent the past 10 years working in an AWS environment would be able to complete
    most DevOps tasks but would excel at those that involved AWS services.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**DevOps 专精的通才**可以类比为一把带有弯刀的**日常携带（EDC）**小刀。这把刀的设计与瑞士军刀相似，但刀刃的形状使其在切割鱼肉方面与专门的鱼片刀相当。一个在
    AWS 环境中工作了 10 年的 DevOps 专精通才，能够完成大多数 DevOps 任务，尤其擅长涉及 AWS 服务的任务。'
- en: 'Common skill profile shapes for a generalist, specialist, and specializing
    generalist can be seen in the following diagram:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通才、专家和专精通才的常见技能轮廓形状可以在以下图表中看到：
- en: '![Figure 1.8 – Skill profiles'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.8 – 技能轮廓'
- en: '](img/Figure_1.08_B18117.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.08_B18117.jpg)'
- en: Figure 1.8 – Skill profiles
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8 – 技能轮廓
- en: The profile of your skill set can be very useful when determining how to classify
    yourself. Start with a comb. Each prong (skill) has a similar length (depth).
    The comb shape is typical of a generalist. The second common profile is the *T*
    shape. A *T* has a single line (skill) that has a full length (depth). The *T*
    shape is typical of a specialist. An *E*-shaped profile, sometimes referred to
    as an unequal comb, has prongs (skills) of differing lengths (depths). Oftentimes,
    one or several skills have a definitively greater depth than the rest. The *E*
    shape is common for a specialized generalist.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你的技能组合的特点在确定如何自我定位时非常有用。首先从一个梳子开始。每个齿（技能）的长度（深度）相似。梳子的形状是典型的通才。第二个常见的形状是*T*形。*T*形有一条完整长度（深度）的线（技能）。*T*形是专才的典型形状。*E*形轮廓，有时被称为不对称的梳子，具有长度（深度）不同的齿（技能）。通常，有一个或多个技能的深度显著大于其他技能。*E*形是专精通才的典型形状。
- en: A mentor told me the unequal comb (*E* shape) skill profile is the only true
    measure of an individual's skills. The comb shape is flawed because it assumes
    all skills have an equal depth, which is impossible. The *T* shape has a lack
    of detail; it shows a singular skill the individual is highly adept at but does
    not account for the other skills possessed by the individual.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一位导师曾告诉我，*E* 型的技能档案才是衡量个人技能的唯一真正标准。这个梳子形状存在缺陷，因为它假设所有技能的深度是相同的，这显然不可能。*T* 型则缺乏细节；它展示了个人擅长的某一项技能，但没有考虑到个人其他的技能。
- en: Pro Tip
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 专业提示
- en: For this chapter, do not focus on what is required for the example skills listed
    as they will be covered in the next chapter. Instead, focus on how the skill profiles
    relate to the different types of DevOps engineers' specific requirements.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章内容，不要过多关注示例中列出的技能要求，因为这些将在下一章详细讨论。请集中精力理解技能档案与不同类型 DevOps 工程师特定需求之间的关系。
- en: 'Common skill profiles fitted to the *E* profile can be seen in the following
    diagram:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了与 *E* 型档案匹配的常见技能档案：
- en: '![Figure 1.9 – Skill profiles (E profile fitted)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.9 – 技能档案（适配 *E* 型档案）'
- en: '](img/Figure_1.09_B18117.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.09_B18117.jpg)'
- en: Figure 1.9 – Skill profiles (E profile fitted)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9 – 技能档案（适配 *E* 型档案)
- en: In the following sections, we will take a look at skill profiles for a DevOps
    generalist, specializing DevOps generalist, as well as several skill profiles
    for DevOps specialties. We will begin by looking at the skill profile for the
    DevOps generalist.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将查看 DevOps 通才、专精 DevOps 通才以及几种 DevOps 专业领域的技能档案。我们将首先看看 DevOps 通才的技能档案。
- en: DevOps generalist
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 通才
- en: Google's Ben Fried stated, *Generalists, not specialists, will scale the web*
    ([https://devops.com/specialists-vs-generalists-enterprise-devops/](https://devops.com/specialists-vs-generalists-enterprise-devops/)).
    This is a quote from back in 2011 but still holds true to an extent today. A generalist
    understands the entire **Software Development Life Cycle** (**SDLC**). The generalist
    has broad knowledge across domains and skill areas but lacks a deep understanding
    of any domain. This is common in small companies, start-ups, or vertically integrated
    companies having only a handful of products and tools to support. There needs
    to be almost no handoff of work, leading to fewer places to drop the ball or forget
    something.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌的 Ben Fried 曾表示，*通才，而非专家，将推动互联网的扩展*（[https://devops.com/specialists-vs-generalists-enterprise-devops/](https://devops.com/specialists-vs-generalists-enterprise-devops/)）。这句话最早出现在
    2011 年，但直到今天，在某种程度上依然适用。通才理解整个**软件开发生命周期**（**SDLC**）。通才在多个领域和技能方面具有广泛的知识，但对任何单一领域的理解较为浅显。这在小型公司、初创公司或产品和工具数量有限的垂直整合型公司中很常见。几乎不需要工作交接，这减少了疏漏或遗忘的风险。
- en: 'The following is a sample skill profile for a DevOps generalist. Take note
    of the relatively flat shape:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 DevOps 通才的示例技能档案。请注意其相对平坦的形状：
- en: '![Figure 1.10 – DevOps generalist skill profile'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.10 – DevOps 通才技能档案'
- en: '](img/Figure_1.10_B18117.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.10_B18117.jpg)'
- en: Figure 1.10 – DevOps generalist skill profile
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.10 – DevOps 通才技能档案
- en: 'The DevOps generalist is one of the first to feel the pains of growing or introducing
    new software, especially in smaller companies or organizations with a small DevOps
    department. When a new tool is introduced, the DevOps engineer needs to understand
    the tool before it is implemented. Next, an environment must be provisioned for
    the new tool, oftentimes unlike the environment the existing tool uses, or at
    least with quirks and subtle differences. Finally, the tool is implemented. At
    this point, both the new and existing tool need to be supported by the DevOps
    engineer. The comb shape that was used graphically to describe the generalist
    has an inherent flaw: it assumes a generalist does not have a deep understanding
    of any domain.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 通才通常是最先感受到公司扩展或引入新软件时的困境，尤其是在小公司或 DevOps 部门较小的组织中。当引入一款新工具时，DevOps 工程师需要在实施之前了解该工具。接下来，需要为新工具配置一个环境，这个环境通常与现有工具使用的环境不同，或至少有一些独特的差异。最后，工具被实施。在这一点上，新工具和现有工具都需要
    DevOps 工程师进行支持。用图形表示的梳子形状来描述通才有一个固有的缺陷：它假设通才对任何领域都没有深入的理解。
- en: DevOps specializing generalist
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 专精通才
- en: If you stay working in the same industry or with the same type of projects long
    enough, you will eventually become a specializing generalist. The specialized
    generalist is also referred to as a master general. In the preceding example,
    the DevOps engineer has all the required skills but has a much deeper understanding
    and knowledge in the domain of programming and developing code. This is typical
    for software engineers who transition into a DevOps role. This could also be a
    skill profile you evolve over time if you enjoy certain skills, or if you just
    happen to always be assigned to tasks that require those skills. Regardless of
    how your skill profile evolved, knowing you have a deeper understanding of certain
    areas can be beneficial both when looking for a job as well as when it comes time
    to ask for a promotion.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你长时间在同一行业或同类型的项目中工作，你最终会变成一个专业化的通才。专业化通才也被称为“全能大师”。在前面的例子中，DevOps 工程师具备所有所需技能，但在编程和开发代码领域有更深入的理解和知识。这是软件工程师转型为
    DevOps 角色的典型情况。如果你喜欢某些技能，或者总是被指派需要这些技能的任务，这也可能是你随着时间推移演化的技能概述。无论你的技能概述如何演变，了解自己在某些领域有更深入的理解，无论在找工作时还是要求晋升时，都会带来好处。
- en: 'In the following figure is the skill profile of a DevOps engineer who has knowledge
    in many domains with a deeper understanding of the **Build** and **Deploy** domains:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了一位具备多领域知识、并对**构建**和**部署**领域有更深入理解的 DevOps 工程师的技能概述：
- en: '![Figure 1.11 – DevOps specializing generalist skill profile'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.11 – DevOps 专业化通才技能概述'
- en: '](img/Figure_1.11_B18117.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.11_B18117.jpg)'
- en: Figure 1.11 – DevOps specializing generalist skill profile
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.11 – DevOps 专业化通才技能概述
- en: Understanding your own skill profile can be very helpful both for a manager
    of a team when planning capacity, as well as an engineer when choosing which roles
    to apply for, which is likely what you are interested in. In the next chapter,
    we will take a deeper dive into how you can create your own skills profile.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 了解自己的技能概述对于团队经理在进行产能规划时，以及工程师在选择申请的职位时非常有帮助，这也是你可能感兴趣的内容。在下一章中，我们将深入探讨如何创建自己的技能概述。
- en: A specialist has a very deep understanding of a singular domain. This does not
    mean they are not capable of doing other things; however, it is usually not efficient
    to have a specialist work across domains. Specialists are more common in large
    organizations that define specialists by the tools they support. If we apply this
    to our previous example, DevOps engineering team *A* would specialize in tool
    *A*. When a new tool is introduced into the company, a new team would be formed
    and talent would be hired with correct skills or existing employees would be up-skilled
    to join the team. Specialists who possess deep knowledge in one of the DevOps
    domains are the ones that will be focused on in this book going forward.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 专家在某一领域有非常深刻的理解。这并不意味着他们不能做其他事情；然而，通常让专家跨领域工作效率较低。专家在大型组织中较为常见，这些组织通过支持的工具来定义专家。如果我们将其应用到之前的例子中，DevOps
    工程团队 *A* 会专注于工具 *A*。当公司引入新工具时，会组建一个新团队，招聘具备正确技能的人才，或者通过提升现有员工的技能来加入该团队。那些在某个 DevOps
    领域拥有深厚知识的专家，将是本书接下来重点关注的对象。
- en: DevOps security specialist
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 安全专家
- en: 'A DevOps engineer specializing in security is known to be in the niche field
    of DevSecOps. DevOps security specialists have a deep understanding of areas such
    as penetration testing, cloud security, chaos engineering, and continuous verification
    as seen in the following example skill profile:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一名专注于安全的 DevOps 工程师被称为处于 DevSecOps 这一细分领域。DevOps 安全专家对渗透测试、云安全、混沌工程和持续验证等领域有深入理解，如下例所示的技能概述：
- en: '![Figure 1.12 – DevOps security specialist skill profile'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.12 – DevOps 安全专家技能概述'
- en: '](img/Figure_1.12_B18117.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.12_B18117.jpg)'
- en: Figure 1.12 – DevOps security specialist skill profile
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12 – DevOps 安全专家技能概述
- en: Now, we will talk about DevOps cloud specialists.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将讨论 DevOps 云专家。
- en: DevOps cloud specialists
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 云专家
- en: One of the fastest-growing fields is cloud engineering and cloud engineers are
    some of the highest paid. What is the difference between a cloud specialist, a
    cloud engineer, and a DevOps cloud specialist? you might be asking, and the honest
    answer is nothing. Titles are meaningless and, oftentimes, they differ between
    companies and sometimes even between departments in larger organizations. A DevOps
    cloud specialist has traditional DevOps skills but has a very deep knowledge of
    the cloud tools, architectures, best practices, and management of entire cloud
    environments, sometimes multi-cloud environments.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个增长最快的领域是云工程，而云工程师也是收入最高的职业之一。你可能会问，云专家、云工程师和 DevOps 云专家有什么区别？诚实的回答是，没什么区别。职位名称没有意义，而且通常在不同公司之间、甚至在大型组织内部的不同部门之间有所不同。DevOps
    云专家具备传统的 DevOps 技能，但在云工具、架构、最佳实践和整个云环境的管理方面有非常深入的知识，有时甚至涉及多云环境。
- en: The wide-scale adoption of the cloud has made a strong understanding of the
    cloud something even entry-level jobs oftentimes require.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 云的广泛应用使得对云的深入理解成为许多入门级职位通常也要求具备的技能。
- en: '![Figure 1.13 – DevOps cloud engineer specialist skill profile'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.13 – DevOps 云工程师专家技能档案'
- en: '](img/Figure_1.13_B18117.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.13_B18117.jpg)'
- en: Figure 1.13 – DevOps cloud engineer specialist skill profile
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13 – DevOps 云工程师专家技能档案
- en: In this section, skill profiles for DevOps generalists and DevOps specialists
    were covered.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了 DevOps 通才和 DevOps 专家的技能档案。
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小结
- en: In this chapter, you gained insight into the history and goals of DevOps. DevOps
    was founded around 2008 when a developer and Agilist met at a conference and decided
    there needed to be a better way of developing software. The goal of DevOps is
    to remove silos between development and IT operation teams as well as shortening
    the feedback loop between developers and customers. DevOps is a mix of Lean, Agile,
    and XP methodologies.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了 DevOps 的历史和目标。DevOps 起源于 2008 年左右，当时一位开发者和一位敏捷专家在一次会议上碰面，决定要找到一种更好的软件开发方式。DevOps
    的目标是打破开发与 IT 运维团队之间的壁垒，缩短开发者与客户之间的反馈循环。DevOps 是精益、敏捷和 XP 方法论的结合。
- en: 'You also learned about the numerous career paths to choose from in the field
    of DevOps. Career paths in DevOps are defined by the depth of knowledge required.
    Three skill profiles were discussed: DevOps generalist, DevOps specializing generalist,
    and DevOps specialist. A DevOps specialist has a much greater depth of knowledge
    than a generalist.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你还了解了 DevOps 领域中众多职业发展的路径。DevOps 职业路径的定义依据所需的知识深度。我们讨论了三种技能档案：DevOps 通才、DevOps
    专注型通才和 DevOps 专家。DevOps 专家比通才拥有更深的知识。
- en: In the next chapter, we will cover specific skills required for a DevOps generalist.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论作为 DevOps 通才所需的具体技能。
