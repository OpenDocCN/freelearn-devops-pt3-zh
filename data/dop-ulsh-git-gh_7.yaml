- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Accelerate Productivity with AI
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用 AI 加速生产力
- en: In this chapter, we embark on a journey to explore the exciting realm of AI-powered
    software development. In reality, although the application of large language models
    in coding is gradually becoming more apparent, it remains largely in the research
    and development phase. While we have focused on practical content so far, this
    chapter shifts our attention to the theories that facilitate a wonderful collaboration
    with AI. We aim to provide insights that will help you understand the context
    of AI in development correctly and master its use. With this foundation, let’s
    explore the world of AI-powered coding together.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始探索充满激动人心的 AI 驱动软件开发领域。实际上，尽管大型语言模型在编程中的应用逐渐变得越来越明显，但它仍然主要处于研发阶段。虽然到目前为止我们侧重于实践内容，但本章将把我们的注意力转向有助于与
    AI 进行出色协作的理论。我们的目标是提供帮助你正确理解 AI 在开发中的背景，并掌握其使用的洞察力。有了这个基础，让我们一起探索 AI 驱动编程的世界。
- en: The essence of AI’s role in coding fundamentally boils down to the age-old notion
    of *how to write good code*, which, in turn, relies on knowledge, skills, and
    experience. If you are looking for a universal magical technique to make AI write
    remarkable code, you might find that, in reality, such a thing probably does not
    exist. Furthermore, even when mentioning specific product features, it is important
    to recognize that the rapid pace of evolution in this field may quickly render
    newly acquired skills obsolete.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: AI 在编程中的角色本质上归结于古老的观点——*如何编写优质代码*，而这一点又依赖于知识、技能和经验。如果你在寻找一种通用的魔法技巧，让 AI 编写出卓越的代码，你可能会发现，实际上这样的技巧可能并不存在。此外，即使是在提到特定产品功能时，也需要意识到这个领域快速发展的步伐可能很快使新获得的技能变得过时。
- en: This book has consistently focused on the theme of collaboration. In this context,
    we maintain that focus, aiming to understand how to collaborate effectively with
    AI. The gateway to all communication starts with understanding your counterpart.
    By gaining a correct understanding of AI, setting appropriate expectations, and
    focusing on extracting the right information from AI, you will be able to refine
    your interactions with AI tools, regardless of how these tools evolve. As the
    author, it is my belief that we should aim to fundamentally understand AI rather
    than focusing solely on individual tips and tricks.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书始终关注协作主题。在这个背景下，我们继续保持这一焦点，旨在理解如何与 AI 进行有效的合作。所有沟通的入口都始于了解你的对方。通过正确理解 AI、设定合理的期望，并专注于从
    AI 中提取正确的信息，你将能够优化与 AI 工具的互动，无论这些工具如何发展。作为作者，我认为我们应该旨在从根本上理解 AI，而不是单纯关注个别技巧和窍门。
- en: We will explore best practices for engaging with AI tools, with an emphasis
    on the subtleties of coding with AI assistance. AI-powered coding represents an
    exciting frontier with many uncharted territories. We encourage you to grasp the
    fundamentals and embark on coding alongside AI.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探索与 AI 工具互动的最佳实践，重点关注使用 AI 协助编程的细微差别。AI 驱动的编程代表了一个令人兴奋的前沿领域，充满了许多未知的领域。我们鼓励你掌握基础，并与
    AI 一起开始编程。
- en: 'We will cover the following main headings in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: AI innovation in coding
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编程中的 AI 创新
- en: Exploring the capabilities and interaction with AI in coding
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 AI 在编程中的能力与互动
- en: Strategies for maximizing AI efficiency
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大化 AI 效率的策略
- en: AI innovation in coding
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程中的 AI 创新
- en: The introduction of LLMs by OpenAI has marked a pivotal moment in the evolution
    of software development. We delve into the aftermath of this groundbreaking innovation,
    exploring how it has reshaped the coding landscape.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: OpenAI 推出的 LLM（大型语言模型）标志着软件开发演变中的一个关键时刻。我们将深入探讨这一具有突破性创新的后续影响，探索它如何重塑编程领域。
- en: The impact of LLMs on coding
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LLM 对编程的影响
- en: We can say the advent of LLMs has fundamentally changed how programming is approached
    and executed. With the capacity to understand and generate human-like text, these
    models have opened up new avenues in coding, making it more efficient and accessible.
    LLMs have significantly sped up the process of writing code. Developers can now
    leverage AI to quickly generate code snippets, reducing the time spent on routine
    or repetitive coding tasks. The introduction of LLMs has enabled developers to
    tackle coding challenges more creatively. By providing suggestions and alternative
    solutions, these models have become valuable tools in the problem-solving arsenal
    of programmers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以说，LLM的出现从根本上改变了编程的方式和执行过程。凭借理解和生成类人文本的能力，这些模型为编码开辟了新的领域，使其更加高效且易于访问。LLM显著加快了编写代码的过程。开发者现在可以利用AI快速生成代码片段，减少在常规或重复编程任务上花费的时间。LLM的引入使得开发者能够更具创造性地解决编程挑战。通过提供建议和替代方案，这些模型已成为程序员问题解决工具箱中的宝贵工具。
- en: LLMs have introduced a new realm of AI-powered development, where developers
    collaborate with AI tools to enhance their coding workflow. This collaboration
    ranges from generating code snippets to offering insights into complex coding
    problems. For novice developers, AI serves as an educational tool, helping them
    learn coding patterns and best practices. This reduces the entry barriers to programming,
    making it more approachable for beginners. Additionally, for experienced developers,
    this AI integration is a powerful catalyst, enabling them to achieve more by augmenting
    their skills with advanced code suggestions, automating routine tasks, and providing
    deeper insights into code optimization and problem-solving. The combination of
    seasoned developer expertise and AI efficiency creates a synergy that pushes the
    boundaries of what can be accomplished in software development.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: LLM引入了AI驱动开发的新领域，开发者与AI工具合作，提升他们的编码工作流。这种合作涵盖了从生成代码片段到为复杂的编码问题提供见解。对于初学者来说，AI作为一种教育工具，帮助他们学习编码模式和最佳实践。这降低了编程的入门门槛，使其对初学者更加亲近。此外，对于经验丰富的开发者来说，这种AI集成是一个强大的催化剂，通过高级代码建议、自动化常规任务和提供更深层次的代码优化和问题解决见解，帮助他们取得更大的成就。经验丰富的开发者的专业知识与AI的高效性相结合，创造了一种协同效应，推动了软件开发领域的边界。
- en: The introduction of modern LLMs has revolutionized coding, transforming it from
    a purely manual endeavor to a more collaborative, efficient, and innovative process.
    This change has not only accelerated development but has also opened up new possibilities
    for creativity and problem-solving in the realm of software engineering. Additionally,
    this area is being extended right now to a variety of tasks, not only coding but
    also review and documentation.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现代LLM的引入彻底改变了编码，将其从纯粹的手工工作转变为更加协作、高效和创新的过程。这一变化不仅加速了开发，还为软件工程领域的创造力和问题解决开辟了新的可能性。此外，这一领域目前正扩展到各种任务，不仅限于编码，还包括审查和文档编写。
- en: Understanding LLMs – A basic introduction
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解LLM – 基本介绍
- en: In the context of AI-powered programming, LLMs have emerged as a pivotal innovation,
    reshaping our approach to software development. But what are LLMs? Let’s get to
    know this first.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在AI驱动的编程背景下，LLM作为一个关键创新浮出水面，重塑了我们对软件开发的方式。那么，LLM到底是什么呢？让我们先了解一下它。
- en: LLMs are advanced AI models designed to understand, interpret, and generate
    human-like text. These models are large not only in their size (often comprising
    billions of parameters) but also in their scope of training data and capabilities.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: LLM是先进的AI模型，旨在理解、解释和生成类人文本。这些模型不仅在规模上庞大（通常包含数十亿个参数），而且在训练数据的范围和能力上也极为广泛。
- en: LLMs such as **Generative Pre-trained Transformer** (**GPT**) are trained on
    vast datasets comprising a wide range of internet text. This training enables
    them to predict and generate text based on the input they receive, making them
    highly versatile in language understanding and generation. The core technology
    behind LLMs involves neural network architectures, specifically transformer models,
    which have revolutionized **Natural Language Processing** (**NLP**). These networks
    are adept at handling sequential data, making them ideal for language tasks.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 像**生成预训练变换器**（**GPT**）这样的LLMs，是在包含广泛互联网文本的大型数据集上进行训练的。这种训练使它们能够根据接收到的输入预测并生成文本，从而在语言理解和生成方面表现出极高的灵活性。LLMs背后的核心技术涉及神经网络架构，特别是变换器模型，它们彻底改变了**自然语言处理**（**NLP**）领域。这些网络擅长处理序列数据，使它们在语言任务中具有理想的应用前景。
- en: 'To fully harness their potential, it is essential to understand what LLMs are
    fundamentally designed to do and what they are not. While AI may seem like magic,
    it is more akin to a mirror reflecting your own input; it is not a panacea that
    solves everything. You must approach it with the right expectations, guide it
    properly, and cleverly extract value. Now it is time to take a look at the essential
    characteristics of LLMs:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分发挥它们的潜力，理解LLMs的基本设计目标和它们的局限性是至关重要的。虽然人工智能看起来像魔法，但它更像是一面反映你自己输入的镜子；它并不是解决所有问题的灵丹妙药。你必须以正确的期望来面对它，正确引导它，并巧妙地提取其中的价值。现在，让我们来看看LLMs的几个基本特征：
- en: '**Word prediction engines**: At their core, LLMs are sophisticated engines
    designed to predict the next word in a sequence. This prediction capability is
    based on the extensive training they receive from vast datasets, enabling them
    to generate contextually relevant and coherent text.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**词预测引擎**：从本质上讲，LLMs是设计用来预测序列中下一个单词的复杂引擎。这种预测能力基于它们从大量数据集中获得的广泛训练，使它们能够生成上下文相关且连贯的文本。'
- en: '**Probabilistic, not deterministic**: Unlike deterministic models that always
    produce the same output for a given input, LLMs are probabilistic models. This
    means that they predict what comes next based on the probability of various possible
    continuations, leading to potential variations in output for the same input. This
    aspect underscores the inherently stochastic nature of LLMs, highlighting that
    the same “*context*” or input can lead to different outcomes, depending on the
    probabilistic determination of what comes next.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**概率性，而非确定性**：与那些对给定输入始终产生相同输出的确定性模型不同，LLMs是概率模型。这意味着它们基于各种可能的延续的概率来预测接下来会发生什么，从而使得相同的输入可能产生不同的输出。这一特点强调了LLMs固有的随机性，突显出相同的“*上下文*”或输入可能会根据概率性判断产生不同的结果。'
- en: '**Not a Google search alternative**: It is crucial to note that LLMs are not
    replacements for search engines such as Google. They do not learn in the traditional
    sense or retain information for future output. Each response generated by a typical
    LLM is based on the input provided at that moment, without any memory of past
    interactions.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不是谷歌搜索的替代品**：需要特别注意的是，LLMs（大语言模型）并不是谷歌等搜索引擎的替代品。它们不像传统意义上的学习，或者说，它们不会为未来的输出保留信息。每次由典型LLM生成的回应，都是基于当时提供的输入，而没有对过去互动的记忆。'
- en: '**Generation, not retrieval**: LLMs operate by generating responses each time
    rather than retrieving stored information. This means that their outputs are created
    anew based on the patterns they have learned during training.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成，而非检索**：LLMs的工作方式是每次生成响应，而非从存储的信息中检索。这意味着它们的输出是基于它们在训练过程中学到的模式重新生成的。'
- en: LLMs have a critical role in the context of coding, primarily due to their ability
    to predict the next sequence of characters or words. These models are not just
    versatile in handling natural languages, such as English, but extend their capabilities
    to a wide array of programming languages. In fact, the application of LLMs to
    programming languages is where their effectiveness is most recognized and highly
    anticipated.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: LLMs在编程方面具有重要作用，主要得益于它们预测下一个字符或单词的能力。这些模型不仅能处理像英语这样的自然语言，还能扩展到各种编程语言。事实上，LLMs在编程语言中的应用，是它们效果最显著且最为人们期待的领域。
- en: LLMs’ adaptability to different programming languages stems from their training
    on diverse datasets, which include not only natural language texts but also vast
    repositories of code. This enables them to understand the syntax and semantics
    of various programming languages, making them incredibly useful for tasks such
    as code completion, bug fixing, and even generating entire blocks of functional
    code.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: LLM对不同编程语言的适应性来源于其在多样化数据集上的训练，这些数据集不仅包括自然语言文本，还包括大量的代码库。这使得它们能够理解各种编程语言的语法和语义，从而在代码补全、修复bug，甚至生成完整的功能代码块等任务中变得非常有用。
- en: Moreover, LLMs can assist developers in translating requirements into code,
    providing suggestions based on best practices, and even offering creative solutions
    to complex programming challenges. Their predictive ability ensures that they
    can recommend the most relevant code snippets, streamline the coding process,
    and significantly enhance coding efficiency and accuracy.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，LLM还可以帮助开发者将需求转化为代码，提供基于最佳实践的建议，甚至为复杂的编程挑战提供创造性解决方案。它们的预测能力确保能够推荐最相关的代码片段，简化编码过程，显著提高编码效率和准确性。
- en: 'In addition to the key capability, understanding the limitations and handling
    misconceptions is also important:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 除了关键能力之外，理解局限性和处理误解也是非常重要的：
- en: '**Not infallible**: The accuracy of LLMs is not absolute. While they can produce
    remarkably relevant and sophisticated outputs, there are instances where their
    predictions can be off the mark. They can sometimes create outputs that seem plausible
    but are actually inaccurate or nonsensical; a phenomenon sometimes referred to
    as **hallucination**.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并非万无一失**：LLM的准确性并非绝对。尽管它们能够生成非常相关和复杂的输出，但有时它们的预测也可能不准确。它们有时会生成看似合理但实际上不准确或毫无意义的输出，这种现象有时被称为**幻觉**。'
- en: '**Need for human oversight**: This potential for error underscores the importance
    of human oversight. Users of LLMs should be vigilant and discerning, capable of
    identifying and correcting instances where the model’s output may be misleading
    or incorrect.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**需要人类监督**：这种错误的潜力凸显了人类监督的重要性。LLM的用户应保持警觉和敏锐，能够识别和纠正模型输出中可能存在的误导或错误。'
- en: '**Appropriate use and expectation setting**: Understanding these limitations
    is key to setting realistic expectations and finding the most effective use cases
    for LLMs. They should be viewed as tools that augment and assist in tasks such
    as coding or text generation rather than as standalone solutions that operate
    with complete autonomy and accuracy.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**适当使用和设定期望**：理解这些局限性是设定现实期望并找到LLM最有效使用场景的关键。它们应被视为增强和辅助任务的工具，比如编码或文本生成，而不是作为具有完全自主性和准确性的独立解决方案。'
- en: In essence, LLM is a powerful innovation, offering significant capabilities
    in text generation and language understanding. However, their effective use requires
    an awareness of their limitations and the critical role of human oversight in
    guiding their output.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，LLM是一项强大的创新，在文本生成和语言理解方面提供了显著的能力。然而，它们的有效使用需要意识到其局限性，并认识到人类监督在引导其输出中的关键作用。
- en: Application of LLMs in coding
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LLM在编码中的应用
- en: The integration of LLMs in the world of coding has seen one of its most significant
    applications in the form of AI-powered coding tools such as GitHub Copilot. This
    section explores how AI is redefining the coding experience.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: LLM在编码领域的集成最显著的应用之一是AI驱动的编码工具，如GitHub Copilot。本节探讨了AI如何重新定义编码体验。
- en: AI-powered tools designed to assist developers in writing code leverage the
    power of LLMs to provide real-time code suggestions, automating some aspects of
    coding and enhancing overall productivity. These tools, trained on a vast array
    of code repositories, interpret the context from the current coding environment
    and offer suggestions for the next lines of code, function implementations, or
    even entire classes and modules.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 旨在帮助开发者编写代码的AI工具利用LLM的强大功能提供实时代码建议，自动化一些编码过程，并提高整体生产力。这些工具在大量代码库的训练基础上，能够解读当前编码环境中的上下文，并提供下一行代码、函数实现，甚至是整个类和模块的建议。
- en: The fundamental capability of these AI tools is that they work as plugins to
    editors such as Visual Studio Code, providing AI assistance as you code within
    the editor. The vision behind these tools includes integrating AI into all phases
    of the software development cycle, with a significant focus on their integration
    into the editor as a major feature. This approach represents a broader effort
    to harness AI for enhancing software development processes, aiming to make coding
    more efficient and accessible to developers at all skill levels.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这些人工智能工具的基本功能是作为插件工作在编辑器中，如 Visual Studio Code，在你编码时提供人工智能协助。这些工具背后的愿景包括将人工智能融入软件开发周期的所有阶段，特别强调其作为主要功能集成到编辑器中的作用。这种方法代表了一个更广泛的努力，旨在利用人工智能提升软件开发过程，目标是使编码更加高效，并让各个技能层次的开发人员都能更轻松地进行开发。
- en: Transforming the coding process
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转变编码过程
- en: 'AI-powered tools assist in enhancing the development process by streamlining
    a variety of coding tasks. Traditionally, coding involves research, reading documentation,
    and ensuring the correctness of the code. These tools help optimize these activities
    in several key areas:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 基于人工智能的工具通过简化各种编码任务来提升开发过程。传统的编码包括研究、阅读文档以及确保代码的正确性。这些工具帮助在几个关键领域优化这些活动：
- en: '**Increasing speed and efficiency**: Developers can speed up the coding process
    with these tools. They help reduce the time spent on repetitive code patterns
    and offer quick solutions and suggestions, freeing up developers to tackle more
    complex and innovative work.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高速度和效率**：开发人员可以借助这些工具加快编码过程。它们帮助减少重复代码模式所花费的时间，并提供快速的解决方案和建议，从而解放开发人员，让他们有更多时间处理更复杂和创新的工作。'
- en: '**Facilitating learning and exploration**: For newcomers or those delving into
    new programming languages or frameworks, these AI tools serve as educational aids.
    They provide syntactically accurate code snippets and show best practices in action.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**促进学习和探索**：对于新手或正在学习新编程语言或框架的人来说，这些人工智能工具充当了教育辅助工具。它们提供语法正确的代码片段，并展示最佳实践的实际操作。'
- en: '**Reducing cognitive load**: AI-powered tools tackle the more routine aspects
    of coding, alleviating the mental burden developers face. This reduction in cognitive
    load enables developers to concentrate their mental energy on tackling more intricate
    and challenging problems.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减轻认知负担**：人工智能工具处理编码中更为常规的部分，减轻了开发人员面临的心理负担。这种认知负担的减少使开发人员能够将精力集中在更复杂和具有挑战性的问题上。'
- en: '**Expanding possibilities**: Through their suggestions, these tools not only
    assist with code completion but also stimulate creative thinking. They introduce
    developers to alternative problem-solving approaches and expose them to new coding
    patterns and practices they might not have previously encountered or considered.
    This expansion of possibilities can lead to more innovative solutions and a broadening
    of the developer’s skill set.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拓展可能性**：通过提供建议，这些工具不仅协助代码完成，还激发了创意思维。它们为开发人员介绍了替代的解决问题方法，并展示了他们可能以前未曾遇到或考虑过的新编码模式和实践。这种可能性的扩展可以促使更具创新性的解决方案，并扩展开发人员的技能。'
- en: By minimizing the need for frequent diversions to look up information and by
    offering pertinent code suggestions, these AI-powered tools support a more focused
    and efficient workflow. This not only leads to better code quality but also enhances
    developer productivity, establishing these tools as essential components in contemporary
    software development.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过减少频繁查找信息的需要，并提供相关的代码建议，这些人工智能工具支持更加专注和高效的工作流程。这不仅提高了代码质量，还增强了开发人员的生产力，使这些工具成为现代软件开发中不可或缺的组件。
- en: Collaborative code creation
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 协作式代码创建
- en: 'When comparing code completion tools to chat-based tools, it is clear that
    each provides a unique set of offerings to developers. Here are the major differences:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在比较代码补全工具与基于聊天的工具时，可以清楚地看到每种工具为开发人员提供了不同的功能。以下是主要的区别：
- en: '**Code completion experience**: Tools equipped with code completion capabilities
    can predict the next words or code blocks directly within the editor. They offer
    incremental suggestions that users can quickly accept or reject, streamlining
    the coding process. This is somewhat similar to mob programming alongside an experienced
    engineer or engaging in pair programming with real-time screen sharing, which
    promotes an interactive and dynamic coding environment:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码补全体验**：具备代码补全功能的工具能够在编辑器中直接预测下一个词语或代码块。它们提供逐步的建议，用户可以快速接受或拒绝，从而简化编码过程。这有点像和一位经验丰富的工程师一起进行集体编程，或者和他人进行配对编程并实时共享屏幕，这种互动性和动态性促进了编码环境的活跃：'
- en: '![Figure 7.1 – Code completion experience in GitHub Copilot](img/B21203_07_01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – GitHub Copilot 中的代码补全体验](img/B21203_07_01.jpg)'
- en: Figure 7.1 – Code completion experience in GitHub Copilot
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – GitHub Copilot 中的代码补全体验
- en: '**Chat experience**: In contrast, the chat experience resembles consulting
    with a senior engineer via platforms such as Slack or Teams or even delegating
    implementation tasks. Some tools also feature a chat interface, enabling developers
    to tap into both direct code assistance and conversational guidance:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聊天体验**：与此相对，聊天体验类似于通过像Slack或Teams这样的平台与高级工程师咨询，甚至是委派实现任务。一些工具还具有聊天界面，开发者可以通过这些界面获得直接的代码帮助和对话式指导：'
- en: '![Figure 7.2 – Chat experience in GitHub Copilot](img/B21203_07_02.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – GitHub Copilot 中的聊天体验](img/B21203_07_02.jpg)'
- en: Figure 7.2 – Chat experience in GitHub Copilot
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – GitHub Copilot 中的聊天体验
- en: GitHub Copilot, the developer-centric designed tool, supports both chat and
    code completion experiences. ChatGPT, known for its versatility beyond coding,
    requires users to carefully craft prompts to guide their responses. In contrast,
    AI-powered developer tools stand out for enhancing the developer experience within
    the editor, focusing on how engineers can seamlessly integrate their current work
    context with AI assistance.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Copilot，这款以开发者为中心设计的工具，支持聊天和代码补全两种体验。以多功能性著称的ChatGPT，要求用户精心设计提示语来引导其响应。相比之下，人工智能驱动的开发者工具则通过增强开发者在编辑器中的体验脱颖而出，专注于工程师如何将当前的工作背景与人工智能帮助无缝结合。
- en: They are engineered to support developers by intuitively understanding the context
    of their work and making it easier to communicate this context to the AI with
    fewer prompts. The more code developers write, the more these tools can tailor
    their assistance to align with the developers’ objectives and the specifics of
    their work context.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 它们旨在通过直观地理解开发者工作的背景，支持开发者，并使得开发者可以通过更少的提示语将这些背景信息更容易地传达给人工智能。开发者编写的代码越多，这些工具就越能根据开发者的目标和工作背景的具体情况，量身定制其帮助。
- en: Prompt and context
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提示语与背景
- en: The concept of **prompts** has gained widespread attention with the advent of
    generative AI technologies. Among the various terms you might have encountered,
    “Prompt Engineering” stands out as a particularly common reference. However, what
    is prompt engineering really? Prompt engineering is the art of designing inputs
    or prompts for AI models to generate desired outputs. It is about crafting questions
    or statements in a way that guides the AI to understand and respond in a specific
    manner. This is crucial because the quality and relevance of AI outputs are highly
    dependent on how the prompts are structured. At the same time, however, it is
    also true that there are excessive expectations for this, and it was treated like
    a buzzword in the early days.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示语**的概念随着生成性人工智能技术的出现而引起了广泛关注。在你可能遇到的各种术语中，“提示语工程”作为一个特别常见的术语脱颖而出。然而，什么是提示语工程呢？提示语工程是为人工智能模型设计输入或提示语，以生成期望的输出。它是通过设计问题或陈述的方式，来引导人工智能理解并以特定的方式作出响应。这一点至关重要，因为人工智能输出的质量和相关性高度依赖于提示语的结构。然而，另一方面，确实也存在对这一领域过高的期望，早期它甚至被当作一个流行词来使用。'
- en: The term prompt engineering seems to me to be a mixture of diverse things. I
    will explain them here.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，提示语工程这个术语似乎是多种事物的结合体。我将在这里解释它们。
- en: Two types of prompt engineering
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 两种类型的提示语工程
- en: In the evolution of AI and machine learning, prompt engineering has emerged
    as an important discipline that shapes how we interact with and extract value
    from AI models. There are two types of prompt engineering. Although not an academic
    classification, I will refer to them here as **reusable prompt engineering** and
    **disposable prompt engineering**, each for different applications and requirements.
    It is important to recognize the difference between these and to know and use
    these objectives in your daily interactions with the AI.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在人工智能和机器学习的发展过程中，提示工程已成为一门重要的学科，影响着我们与AI模型互动以及从中提取价值的方式。提示工程有两种类型。虽然这不是一个学术分类，但我将在这里称之为**可重复使用的提示工程**和**一次性提示工程**，它们适用于不同的应用和需求。认识到它们之间的区别，并在日常与AI互动中了解并使用这些目标，至关重要。
- en: Reusable prompt engineering
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 可重复使用的提示工程
- en: Reusable prompt engineering is designed for scenarios where prompts are repeatedly
    used in similar contexts. This is common in consumer-facing AI applications, automated
    systems, and AI-to-machine interactions. The aim here is to create prompts that
    consistently elicit accurate and relevant responses from AI, regardless of minor
    variations in input or context.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 可重复使用的提示工程是为那些在相似情境中反复使用的提示设计的。这在面向消费者的AI应用、自动化系统以及AI与机器的互动中较为常见。这里的目标是创建能够始终如一地从AI中获取准确且相关回应的提示，不管输入或上下文中有多小的变化。
- en: In reusable prompt engineering, near-perfect accuracy is essential. This is
    particularly true for machine consumers, where AI responses trigger other functions
    or processes. Similarly, in B2C applications, high accuracy is crucial to maintain
    user engagement and prevent frustration or confusion.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在可重复使用的提示工程中，接近完美的准确性是必不可少的。这一点在机器消费者中尤其重要，因为AI的回应会触发其他功能或过程。同样，在B2C应用中，高准确性对保持用户参与度、防止用户沮丧或困惑至关重要。
- en: The primary challenge in this type of prompt engineering is maintaining stability
    and consistency in AI responses. This often requires a deep understanding of the
    AI model’s capabilities and limitations. Engineers who build prompts must also
    consider the variability in user inputs and contexts, ensuring that the AI can
    handle these variations without significant loss of accuracy.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的提示工程面临的主要挑战是保持AI回应的稳定性和一致性。这通常需要深入理解AI模型的能力和局限性。构建提示的工程师还必须考虑用户输入和上下文的变化，确保AI能够处理这些变化，而不会显著降低准确性。
- en: In reusable prompt engineering, the emphasis is primarily on *how*—crafting
    prompts to ensure reliable and accurate responses. This focus is critical because
    the *what* and *why* can often be unpredictable, particularly in scenarios involving
    a broad and diverse user base. The prompts must be designed to handle a wide range
    of inputs from an unspecified number of users, each with their unique needs and
    ways of interacting with the AI system.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在可重复使用的提示工程中，重点主要是*如何*——设计提示以确保可靠且准确的回应。这一重点至关重要，因为*什么*和*为什么*往往是不可预测的，尤其是在涉及广泛多样用户群体的情境中。提示必须设计得能够处理来自不特定用户的大量输入，每个用户有其独特的需求和与AI系统互动的方式。
- en: The term prompt engineering in the world is used in this context, especially
    in a narrow sense. It is about how to refine the instructions to the AI in order
    to extract information from it with a high degree of accuracy. However, in the
    actual development field, there is no need to spend time refining prompts that
    are used only once. Prompt engineering in development requires a different context.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个世界上，提示工程这个术语在狭义上通常是这样使用的。它是关于如何完善向AI提供的指令，以便从中提取高度准确的信息。然而，在实际的开发领域中，并不需要花费时间去完善只使用一次的提示。开发中的提示工程需要的是不同的语境。
- en: Disposable prompt engineering
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 一次性提示工程
- en: Disposable prompt engineering is characterized by the creation of one-time-use
    prompts. These are typically crafted by developers or users for specific, often
    unique, situations. Here, the emphasis shifts from broad applicability and consistency
    to specificity and immediate relevance.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一次性提示工程的特点是创建一次性使用的提示。这些提示通常由开发者或用户为特定的、往往是独特的情境设计。在这种情况下，重点从广泛适用性和一致性转向了具体性和即时相关性。
- en: This type involves a high degree of creativity and adaptability. Developers
    create prompts on the fly, tailoring them to specific tasks or problems. This
    requires a deep understanding of the context and objectives (the why and what)
    and a flexible approach to interacting with the AI.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的工程涉及高度的创造性和适应性。开发者会即时创建提示，根据具体任务或问题进行调整。这要求开发者深入理解上下文和目标（即“为什么”和“做什么”），并采取灵活的方法与AI互动。
- en: In disposable prompt engineering, context is king. The prompts are often designed
    to address specific issues or to generate unique outputs. As such, the engineer
    must provide the AI with sufficient context to understand and respond appropriately
    to the task at hand. In the context of development, you will need to give new
    instructions to the AI each time you do something creative with each development
    task. After all, you will find that when you use AIs in your development, you
    have little need to master each and every type of prompt engineering. What is
    more important is the context.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在一次性提示工程中，**上下文**是关键。提示通常是为了应对特定问题或生成独特输出而设计的。因此，工程师必须为AI提供足够的上下文，以便其理解并适当响应当前任务。在开发的背景下，每当你在开发任务中做些创造性工作时，你都需要为AI提供新的指令。毕竟，你会发现，当你在开发中使用AI时，你几乎不需要掌握每一种类型的提示工程。更重要的是**上下文**。
- en: In summary, it is important to acknowledge that mastering the intricate techniques
    of prompt engineering may not be efficient for every goal. Again, for daily tasks
    requiring fresh ideas and essentially serving as one-off needs, dedicating extensive
    time to perfecting prompts might not be essential. Conversely, in projects such
    as developing an app infused with AI, the quality of prompts is crucial. In these
    instances, it is beneficial to continually refine them to ensure optimal interaction
    with the AI component. This process often involves trial and error, along with
    a sophisticated understanding of how the AI model may interpret various prompts.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，需要认识到，掌握复杂的提示工程技术并非每个目标都能高效实现。再说一次，对于那些需要新思路并且本质上是一次性需求的日常任务，花大量时间去完善提示可能并非必要。相反，对于像开发一个注入了AI的应用程序这样的项目，提示的质量至关重要。在这些情况下，不断优化提示，以确保与AI组件的最佳互动是非常有益的。这个过程通常涉及反复试验，并且需要对AI模型如何理解不同提示有深刻的认识。
- en: The importance of context
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**上下文的重要性**'
- en: In AI-powered development, particularly in programming, the context in which
    a piece of code exists is paramount. Context includes the surrounding information
    and environment of the code, extending beyond the immediate codebase to encompass
    project specifications, coding standards, and intended functionality. The effectiveness
    of AI hinges on its ability to interpret and respond to this context.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在AI驱动的开发中，特别是在编程中，一段代码所处的上下文至关重要。上下文包括代码的周围信息和环境，超出了直接的代码库，涵盖了项目规范、编码标准和预期功能。AI的有效性依赖于其解读和响应这种上下文的能力。
- en: The context provided to an AI system determines the relevance and accuracy of
    its responses and suggestions. In the absence of adequate context, AI tools may
    generate outputs that are technically correct but misaligned with the project’s
    goals or requirements.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 提供给AI系统的上下文决定了其回应和建议的相关性与准确性。如果没有足够的上下文，AI工具可能会生成技术上正确但与项目目标或需求不符的输出。
- en: As developers integrate AI into their workflow, it is essential to recognize
    their role in providing clear and relevant context. This responsibility involves
    understanding that AI, while powerful, is not infallible or omniscient. It requires
    input that accurately reflects the problem at hand and the desired outcomes.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 随着开发者将AI整合到工作流程中，理解它们在提供清晰和相关上下文中的角色变得至关重要。这个责任意味着要理解，尽管AI强大，但它并非无所不知或无所不能。它需要准确反映当前问题和期望结果的输入。
- en: Developers should approach AI as a collaborative tool, guiding it through a
    well-defined context to ensure that its contributions are aligned with project
    objectives. This involves critically evaluating AI suggestions and adapting them
    to fit the specific nuances of their projects.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者应将AI视为协作工具，带领其通过明确的上下文，以确保其贡献与项目目标一致。这需要对AI的建议进行批判性评估，并根据项目的具体细微差别调整这些建议。
- en: 'The following would be important to include context:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要包括的上下文内容：
- en: '**Provide detailed comments**: Incorporate comprehensive comments into the
    code that explain not just what the code does but also the purpose behind it.
    This helps AI tools understand the intent behind the code.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提供详细注释**：在代码中加入全面的注释，不仅解释代码的功能，还要阐明其背后的目的。这有助于 AI 工具理解代码的意图。'
- en: '**Use descriptive naming conventions**: Choose variable and function names
    that clearly indicate their purpose and usage. This aids AI in generating more
    relevant and readable code.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用描述性的命名规范**：选择能够清晰指示其目的和用法的变量和函数名称。这有助于 AI 生成更相关且可读的代码。'
- en: '**Document code thoroughly**: Ensure that the codebase is well-documented,
    outlining the broader project objectives, coding standards, and specific functionalities.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**彻底文档化代码**：确保代码库有良好的文档记录，概述更广泛的项目目标、编码标准以及具体功能。'
- en: '**Frame problems clearly**: When seeking AI assistance, define the problem
    as specifically as possible. This includes stating the desired outcomes and any
    relevant constraints or considerations.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清晰地框定问题**：寻求 AI 帮助时，尽可能具体地定义问题。这包括陈述期望的结果以及任何相关的限制或考虑因素。'
- en: Effectively leveraging AI in programming requires a balanced approach that recognizes
    AI as a powerful assistant but not a complete substitute for human expertise.
    By providing clear, detailed context and maintaining critical oversight, developers
    can maximize the benefits of AI-powered tools. This approach ensures that AI serves
    as a catalyst for enhanced productivity and creativity in software development,
    complementing human capabilities rather than attempting to replace them.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有效地利用 AI 进行编程需要一种平衡的方法，认识到 AI 是一个强大的助手，但并非完全替代人类专业知识。通过提供清晰、详细的语境并保持关键的监督，开发者可以最大化
    AI 工具的效益。这种方法确保 AI 作为提升软件开发生产力和创造力的催化剂，补充人类能力，而非试图取而代之。
- en: The paramount importance of context in AI-powered programming cannot be overstated.
    As AI continues to evolve, its capacity to interpret and utilize context will
    determine the extent of its impact on software development.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AI 驱动的编程中，语境的重要性不可过分强调。随着 AI 的不断发展，它解释和利用语境的能力将决定其对软件开发的影响程度。
- en: For developers to truly harness the potential of AI in programming, a deep understanding
    of programming and technology is essential. While prompt engineering significantly
    amplifies productivity, it is not a standalone solution. The ability to provide
    clear and detailed context to AI is a skill that synergizes with a developer’s
    technical expertise. Ultimately, the effectiveness of AI tools in augmenting development
    work hinges on the developer’s foundational knowledge and experience in coding.
    This combination of technical proficiency and skillful prompt engineering is key
    to maximizing the benefits of AI in software development.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让开发者真正发挥 AI 在编程中的潜力，必须具备深厚的编程和技术理解。尽管提示工程大大提高了生产力，但它并非独立解决方案。提供清晰、详细的语境给 AI
    是与开发者技术专长相辅相成的技能。最终，AI 工具在增强开发工作中的有效性取决于开发者在编码方面的基础知识和经验。这种技术精通与巧妙提示工程的结合是最大化
    AI 在软件开发中效益的关键。
- en: Exploring the capabilities and interaction with AI in coding
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 AI 在编码中的能力与互动
- en: This section is dedicated to providing developers with in-depth insights and
    strategies for effectively leveraging AI within their coding projects, focusing
    on its features and interaction dynamics. Whether it involves integrating AI for
    routine coding tasks or utilizing it for the more intricate and imaginative facets
    of programming, this section intends to offer comprehensive guidance on making
    AI a transformative element in your coding practices.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 本节致力于为开发者提供深入的见解和策略，帮助他们在编码项目中有效利用 AI，重点介绍其功能和交互动态。无论是将 AI 用于常规的编码任务，还是用于更复杂和富有创意的编程方面，本节旨在为如何使
    AI 成为你编码实践中的变革性元素提供全面的指导。
- en: Let’s explore the expansive capabilities of AI in coding and learn the best
    practices for interacting with AI tools, enhancing not only the productivity and
    quality of your projects but also your overall experience as a developer.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索 AI 在编码中的广泛能力，并学习与 AI 工具交互的最佳实践，不仅提高项目的生产力和质量，还提升你作为开发者的整体体验。
- en: Code completion – The foundation of AI-powered coding
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码补全 —— AI 驱动编码的基础
- en: Unlike ChatGPT, which requires full context in the prompt for each interaction,
    code completion in programming environments is deeply integrated with the code
    editor. AI-powered coding tools dynamically collect necessary data from the code
    you are writing and seamlessly communicate with the backend LLM. This integration
    offers an experience akin to pair programming or mob programming with an AI collaborator.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 与需要在每次交互中提供完整上下文的 ChatGPT 不同，编程环境中的代码补全与代码编辑器深度集成。AI 驱动的编码工具会动态收集你正在编写的代码中的必要数据，并与后端的大型语言模型（LLM）无缝通信。这种集成提供了类似于与
    AI 合作的结对编程或集体编程的体验。
- en: The typical AI tool continuously analyzes the code within the editor, understanding
    the immediate context to offer relevant suggestions. This contextual awareness
    is key to the effectiveness of code completion. In AI tools, where context is
    important, the most important thing is how the context was collected from the
    editor. Sometimes, humans tend to focus on the accuracy of the model behind it.
    That is never a mistake; the smarter the AI, the better. However, as AI develops
    in the future, any tool will be able to perform certain tasks. What will stand
    out in that case is its excellence as a data collection tool. Therefore, in code
    completion, it is important to know how the AI-powered coding assistant tool collects
    information from the editor and to determine whether code completion should take
    this into account.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的 AI 工具会持续分析编辑器中的代码，理解当前的上下文，从而提供相关的建议。这种上下文意识是代码补全有效性的关键。在 AI 工具中，上下文很重要，最重要的是如何从编辑器中收集上下文。有时，人们倾向于关注其背后模型的准确性。这并不算错误；AI
    越智能，效果越好。然而，随着 AI 技术的发展，任何工具都能执行某些任务。在这种情况下，真正突出的是它作为数据收集工具的优越性。因此，在代码补全中，了解 AI
    驱动的编码助手工具如何从编辑器中收集信息并判断是否应该考虑这些信息，显得尤为重要。
- en: As developers type code, an AI-powered coding tool suggests potential code snippets
    that complete or extend the code. Typically, this functionality is not just about
    speeding up the typing process; it is about offering intelligent, contextually
    relevant suggestions that can improve code quality and efficiency.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发者输入代码时，AI 驱动的编码工具会建议可能的代码片段，以补全或扩展代码。通常，这种功能不仅仅是加快输入过程；更重要的是，它能够提供智能的、上下文相关的建议，从而提高代码质量和工作效率。
- en: 'Here is an example of code completion in action. Let’s create a file `calc.js`
    and write the following in JavaScript:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码自动补全的一个示例。我们来创建一个文件`calc.js`，并在其中写下以下 JavaScript 代码：
- en: '[PRE0]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For example, AI code-completion would complement the contents of a function
    as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，AI 代码补全会补充函数内容，如下所示：
- en: '[PRE1]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The AI model behind code completion has been exposed to a vast array of code,
    but it is important to clarify that this exposure means it has been “*trained
    on data*” rather than having fundamentally “*learned*” in the traditional sense.
    Essentially, it has become adept at recognizing patterns unique to coding through
    the analysis of these extensive code repositories. By utilizing LLMs, the model
    can discern patterns, best practices, and common coding paradigms to generate
    suggestions. As a predictive engine for the next word or sequence in code, the
    quality of its suggestions is directly influenced by the quality of the input
    code. In essence, the output quality reflects the quality of the code data it
    was trained on, highlighting that its capability to provide relevant suggestions
    depends on recognizing patterns within the training data.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 代码补全背后的 AI 模型已经接触了大量的代码，但需要澄清的是，这种接触意味着它是“*在数据上训练*”的，而不是以传统意义上“*学习*”的方式。实际上，它通过分析这些庞大的代码库，变得擅长于识别编程中独特的模式。通过使用
    LLM，模型能够辨别模式、最佳实践和常见的编程范式，从而生成建议。作为预测代码中下一个单词或序列的引擎，它的建议质量直接受输入代码质量的影响。本质上，输出质量反映了它所训练的代码数据的质量，这表明它提供相关建议的能力依赖于识别训练数据中的模式。
- en: Code generation—the ability of AI-powered coding tools to interpret and respond
    to natural language—is remarkable. The breakthrough with AI is its capacity to
    understand natural language as it is presented, offering code suggestions based
    on that understanding rather than relying on static analysis, as with traditional
    non-AI code completion tools such as IntelliSense. Developers can detail the functionality,
    parameters, and expected outcomes of a code segment through comments, directing
    the AI to generate relevant code.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 代码生成——AI驱动的编码工具能够理解并响应自然语言的能力——非常了不起。AI的突破在于它能够理解自然语言的呈现方式，并根据这种理解提供代码建议，而不像传统的非AI代码补全工具（如IntelliSense）那样依赖静态分析。开发人员可以通过注释详细描述代码段的功能、参数和预期结果，从而指导AI生成相关代码。
- en: When we talk about “*code generation*,” it includes what was referred to in
    the previous section as code completion, but here we are discussing it in a broader
    sense, focusing on generating code from natural language and various types of
    information.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论“*代码生成*”时，它包括了前面部分提到的代码补全，但这里我们讨论的是更广泛的概念，重点是从自然语言和各种信息生成代码。
- en: The effectiveness of this feature depends on the precision and clarity of the
    instructions provided. Well-defined and explicit comments empower AI-powered coding
    tools to produce more accurate and suitable code responses.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能的有效性取决于提供的指令的精确性和清晰度。明确定义和具体的注释能够使AI驱动的编码工具生成更准确、更合适的代码响应。
- en: This is where the importance of your knowledge, experience, and approach to
    prompt crafting becomes evident. It is crucial to leverage your critical thinking
    and logical writing skills in a manner that the AI can comprehend.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这时，你的知识、经验以及构建提示的方式变得尤为重要。必须利用你的批判性思维和逻辑写作技巧，以便AI能够理解。
- en: 'For example, let’s create a JavaScript file named `calc.js`, as follows, and
    write the comments you want to implement:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们创建一个名为`calc.js`的JavaScript文件，如下所示，并写入你想实现的注释：
- en: '[PRE2]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If AI-powered tools can generate code, it will look like the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果AI驱动的工具能够生成代码，它将如下所示：
- en: '[PRE3]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Providing examples within other sections of the code or in comments can be extremely
    helpful. Additionally, one of the strengths of AI-powered coding tools lies in
    their ability to generate code based on structured examples. This feature proves
    especially beneficial in situations such as developing models from given data
    examples.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的其他部分或注释中提供示例是非常有帮助的。此外，AI驱动的编码工具的一个优势在于它们能够根据结构化的示例生成代码。这一功能在例如从给定数据示例中开发模型等情境中尤为有用。
- en: 'For instance, consider the following comment:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，考虑以下注释：
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, AI can produce the following model. The following example will output
    Python if you write Python in the file `user.py`, but similarly, if you write
    a specific language, such as `user.js` or `user.rb`, the same implementation would
    be carried out for a different language:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，AI可以生成以下模型。如果你在`user.py`文件中写Python，下面的示例将输出Python，但同样，如果你写入特定语言，如`user.js`或`user.rb`，则会为不同语言执行相同的实现：
- en: '[PRE5]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This indicates that the distance between the definition of the implementation
    and the implementation itself is getting very close.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明实现定义与实现本身之间的距离正在变得非常接近。
- en: When it comes to definitions, table definitions can be turned into SQL queries
    for database tables, cloud infrastructure definitions can be turned into YAML
    files for Terraform, and so on.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义方面，表定义可以转化为数据库表的SQL查询，云基础设施定义可以转化为Terraform的YAML文件，等等。
- en: For example, from a given JSON example, it is possible to generate commands
    to create a model for Ruby on Rails.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，从给定的JSON示例中，可以生成用于创建Ruby on Rails模型的命令。
- en: 'Here is the given JSON example:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是给定的JSON示例：
- en: '[PRE6]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'All you have to do is provide the prompt “*Generate a rails command to create
    a new user*” for this example, and AI will create a ready-to-use command in CLI
    as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需提供提示“*生成一个rails命令来创建一个新用户*”作为示例，AI就会创建一个准备好使用的命令，输出如下：
- en: '[PRE7]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The code generation capability represents a significant advancement in AI-powered
    coding. By interpreting descriptive comments and structured examples, AI can generate
    accurate and functional code, reducing manual coding efforts and enhancing the
    efficiency of the development process.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 代码生成能力代表了AI驱动编码的一个重要进步。通过解释描述性注释和结构化示例，AI可以生成准确且有效的代码，从而减少手动编码的工作量，提升开发过程的效率。
- en: Code explanation
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码解释
- en: AI has the capability to analyze existing code and automatically generate explanations
    that clarify the code’s functionality. This feature proves to be invaluable for
    understanding code that is not adequately documented or for demystifying complex
    algorithms for other developers. These generated explanations assist in simplifying
    complex code into more comprehensible segments, thereby facilitating a better
    understanding of the logic and intent behind the code for others.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: AI具有分析现有代码并自动生成解释的能力，从而阐明代码的功能。这一特性对于理解没有充分文档说明的代码或为其他开发者解密复杂算法非常有价值。这些生成的解释有助于将复杂代码简化为更易理解的部分，从而帮助他人更好地理解代码背后的逻辑和意图。
- en: Such a capability is instrumental in reducing the onboarding time for new team
    members, accelerating the comprehension of code for first-time viewers, and proving
    useful in scenarios where there is a noticeable gap between the specification
    and the actual code. Moreover, it enhances the value of the code by providing
    explanations for previously unmaintained or obscure code, thereby making its functionality
    clearer.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这种能力对于减少新团队成员的入职时间，加快首次查看代码的人员对代码的理解，以及在规范与实际代码之间存在明显差距的情况下都非常有用。此外，它通过为之前未维护或模糊不清的代码提供解释，从而提升了代码的价值，使其功能更加清晰。
- en: 'Here is an example of writing an algorithm in Python by creating a file, `eratosthenes.py`,
    and specifically considering generating explanations for the Sieve of the Eratosthenes
    algorithm, which was originally presented without explanation:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个通过创建文件`eratosthenes.py`并特别考虑生成埃拉托斯特尼筛法算法的解释的Python算法编写示例，该算法最初是在没有解释的情况下提出的：
- en: '[PRE8]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you write a comment at the beginning of a line, the AI will recognize that
    you write a comment on every new line, and the AI will automatically complete
    the rest by simply breaking the line. AI can generate the following comments:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在行首写下注释，AI会识别出你在每一新行写注释，并会通过简单地换行来自动完成其余部分。AI可以生成以下注释：
- en: '[PRE9]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In extreme cases, you do not need any specific prompt. Sometimes, all you have
    to do when you use GitHub Copilot is press *Tab* and *Enter*. However, if more
    formatting is done, it can go beyond explanation and have various possibilities,
    such as deriving documentation from code or reverse engineering table definitions
    from a database migration implementation, for example.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在极端情况下，你不需要任何特定的提示。有时，在使用GitHub Copilot时，只需按*Tab*和*Enter*即可。然而，如果进行了更多格式化，它可以超越简单的解释，具有各种可能性，例如从代码中推导文档，或者例如从数据库迁移实现中逆向工程表定义。
- en: Code explanation by AI significantly elevates the overall quality of code by
    enhancing its readability and understandability. This feature plays a crucial
    role in narrowing the gap between intricate code and comprehensive documentation,
    offering an automated solution to make code accessible and intelligible to a broad
    spectrum of developers. By saving time and facilitating better code maintenance
    and collaboration, this capability highlights the transformative influence of
    AI in the coding process.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: AI对代码的解释显著提高了代码的整体质量，通过增强其可读性和可理解性。这一特性在缩小复杂代码与全面文档之间的差距方面发挥着至关重要的作用，提供了一种自动化解决方案，使代码对广泛的开发者更具可访问性和可理解性。通过节省时间并促进更好的代码维护与协作，这一能力突显了AI在编码过程中的变革性影响。
- en: Strategies for maximizing AI efficiency
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最大化AI效率的策略
- en: In this section, we delve into strategies aimed at boosting your mastery of
    AI tools within the realm of programming. By embracing an approach that emphasizes
    specificity, context awareness, and consistency, you will find significant enhancements
    in how you interact with AI, leading to streamlined coding processes and improved
    output quality. Specifically, offering clear, detailed instructions enhances the
    efficacy of AI tools, enabling them to better align with your expectations. A
    deep understanding and communication of the working context lead to more precise
    and applicable AI-generated suggestions. Furthermore, upholding a uniform coding
    style and adhering to established naming conventions greatly aid AI’s interpretation
    of your code, culminating in superior quality outcomes. These strategies collectively
    refine your engagement with AI, transforming it into a more efficient and effective
    partnership in programming.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 本节内容将深入探讨旨在提升你在编程领域内掌握AI工具的策略。通过采纳一种强调具体性、上下文意识和一致性的方法，你会发现与AI的互动得到显著改善，从而简化编码流程并提高输出质量。具体来说，提供清晰、详细的指令可以提高AI工具的效率，使其更好地与预期目标对齐。深入理解并传达工作背景能够使AI生成更精确且适用的建议。此外，保持统一的编码风格并遵循既定的命名约定，会极大地帮助AI理解你的代码，最终获得更高质量的成果。这些策略将共同优化你与AI的合作，使其成为编程中更高效、更有效的伙伴。
- en: 'Moreover, I want to touch upon the iterative process of improving interactions
    with AI. This process involves the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我还想谈谈与AI互动的迭代过程。这个过程包括以下内容：
- en: Requesting a suggestion from AI
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请求AI提供建议
- en: Reviewing the results critically
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 批判性地审查结果
- en: Making a decision to accept, reject, or manually adjust the suggestion
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 决定接受、拒绝或手动调整建议
- en: Applying the change or feedback for continuous improvement (kaizen)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用变更或反馈进行持续改进（kaizen）
- en: By keeping these three principles in mind at each phase of interaction with
    AI, you will foster a more productive and harmonious collaboration. These practices
    blend traditional software engineering principles with the innovative capabilities
    of AI, ensuring that your code remains both human-friendly and optimized for AI
    assistance.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在每个与AI互动的阶段都牢记这三个原则，你将促进更高效、更和谐的合作。这些做法将传统的软件工程原则与AI的创新能力结合起来，确保你的代码既对人类友好，又能优化AI的辅助作用。
- en: Be specific
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 具体明确
- en: The clarity and specificity of instructions play a crucial role in the effectiveness
    of the tool.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 指令的清晰性和具体性在工具的有效性中起着至关重要的作用。
- en: AI-powered coding tools are designed to respond to the nuances of the instructions
    provided by the developer. Their ability to generate useful and accurate code
    is greatly enhanced when the prompts or comments are specific and clear. The more
    detailed the instruction, the better the AI can understand the intended outcome.
    This understanding directly influences the relevance and accuracy of the code
    suggestions provided by the AI tool.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 基于AI的编码工具旨在响应开发者提供的指令细节。其生成有用且准确代码的能力，在提示或评论具体且清晰时得到极大提升。指令越详细，AI就越能理解预期结果。这种理解直接影响AI工具提供的代码建议的相关性和准确性。
- en: In the example of a vague prompt, a developer might instruct an AI with a statement
    such as “*Sort this list*.” Such a prompt is unclear because it does not specify
    the contents of the list or how it should be sorted. The AI, faced with this ambiguity,
    might struggle to provide an accurate solution. However, when the instruction
    is more specific, such as “*Sort this list of integers in ascending order*,” it
    becomes much clearer. This specific prompt gives the AI precise information about
    the type of data in the list, which is integers, and the desired sorting criterion,
    which is ascending order. With these details, the AI is better equipped to generate
    a more accurate and relevant piece of code, aligned with the developer’s intent.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在模糊提示的例子中，开发者可能会用“*对这个列表进行排序*”这样的语句来指示AI。这个提示不明确，因为它没有指定列表的内容或排序的方式。面对这种模糊性，AI可能会很难提供准确的解决方案。然而，当指令更具体时，例如“*按升序排序这个整数列表*”，就变得更加清晰了。这个具体的提示向AI提供了关于列表中数据类型（整数）以及排序标准（升序）的精确信息。有了这些细节，AI能够更好地生成一段更准确、更相关的代码，符合开发者的意图。
- en: 'The following two points can be considered to elicit better results:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两点可以帮助获得更好的结果：
- en: '**Tailoring prompts to the task**: When using AI tools, it is important to
    tailor the prompts to the specific task at hand. This includes specifying data
    types, desired outcomes, constraints, and any other relevant details that could
    impact code generation.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**根据任务定制提示**：在使用AI工具时，重要的是根据当前任务定制提示。这包括指定数据类型、期望结果、约束条件以及任何可能影响代码生成的相关细节。'
- en: '**Avoiding ambiguity**: Specific instructions help in avoiding ambiguity, ensuring
    that the AI tool does not misinterpret the task or provide irrelevant code snippets.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免歧义**：具体的指令有助于避免歧义，确保AI工具不会误解任务或提供无关的代码片段。'
- en: Being specific in instructions is a key best practice when working with AI tools
    in software development. Detailed prompts enable these tools to provide more accurate
    and useful code suggestions, thereby enhancing the efficiency and effectiveness
    of the development process. By focusing on clarity and precision in their interactions
    with AI, developers can harness the full potential of these tools, leading to
    more productive and successful coding experiences.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在与AI工具合作进行软件开发时，具体指令是一个关键的最佳实践。详细的提示使得这些工具能够提供更准确和有用的代码建议，从而提高开发过程的效率和效果。通过在与AI互动时专注于清晰和精准，开发人员可以充分发挥这些工具的潜力，从而带来更高效、更成功的编程体验。
- en: Be context-aware
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关注上下文
- en: Embracing context awareness is paramount. This approach not only enhances the
    efficiency with which tools are utilized but also improves the precision of information
    relayed to AI. Context awareness in software design entails being mindful of the
    boundaries that delineate work, systems, and processes.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 接受上下文意识至关重要。这种方法不仅提高了工具使用的效率，还改善了向AI传递信息的准确性。在软件设计中，上下文意识意味着要意识到划定工作、系统和过程的边界。
- en: The significance of recognizing these boundaries is highlighted when taking
    into account the inherent limitations of both humans and AI. Simply put, this
    underscores that both entities have a finite capacity for processing information
    and must operate within appropriate contexts to function effectively.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑到人类和AI固有的局限性时，认识到这些边界的重要性尤为突出。简单来说，这强调了两个实体在处理信息时都有有限的能力，必须在适当的上下文中运行才能有效发挥作用。
- en: '**Human limitations**: Humans have a cognitive threshold. When information
    overload occurs, selecting relevant information becomes challenging, leading to
    what is known as cognitive overload. By being mindful of one’s current context
    and processing information within limited contexts, humans can manage information
    more efficiently. Humans cannot provide AI with unlimited information, nor can
    they effectively sift through vast amounts of information received from AI.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**人类的局限性**：人类有一个认知阈值。当信息过载时，选择相关信息变得困难，从而导致所谓的认知过载。通过关注当前上下文并在有限的上下文内处理信息，人类可以更有效地管理信息。人类不能向AI提供无限的信息，也不能有效地筛选从AI收到的大量信息。'
- en: '**AI limitations**: Similarly, AI has its own limits in recognition, primarily
    defined by the token limits of current models. Tokens, the smallest units recognized
    by AI, such as characters or words, have a numerical limit in AI models at the
    time of writing. While AI can continue to generate contextually appropriate information,
    the generation must eventually terminate to ensure the output remains accurate
    and as intended, necessitating an awareness of AI’s performance boundaries.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AI的局限性**：同样，AI在识别上也有其局限，主要由当前模型的令牌限制定义。令牌是AI识别的最小单位，如字符或单词，在撰写时AI模型中有其数字限制。虽然AI可以继续生成符合上下文的相关信息，但生成最终必须终止，以确保输出的准确性和预期效果，因此需要意识到AI的性能边界。'
- en: Here, I provide a practical checklist of items for use during interactions with
    AI. This checklist is vital for ensuring effective collaboration with AI, focusing
    on the right context for your development efforts. Getting into the habit of thinking
    about this in every interaction with the AI will help you have good interactions.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我提供了一份在与AI互动时使用的实用清单。这份清单对于确保与AI的有效协作至关重要，重点关注为开发工作提供正确的上下文。养成在每次与AI互动时都考虑这些因素的习惯，将有助于你进行更好的互动。
- en: 'Checklist for every AI interaction:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 每次与AI互动的清单：
- en: '**Does AI know it? – Explicit context provision**: Check if the AI is already
    familiar with the context of your task. If your task ventures beyond AI’s pre-existing
    knowledge, provide additional, detailed context to bridge the gap.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AI 知道吗？——明确的上下文提供**：检查 AI 是否已经熟悉你任务的上下文。如果你的任务超出了 AI 的既有知识范围，提供额外的、详细的上下文以弥补这一差距。'
- en: '**Is AI Capable? – Assessing AI limits**: Verify that your expectations align
    with what AI, such as GPT-4, can realistically achieve. Understanding the capabilities
    and limitations, especially regarding token counts and context expansiveness,
    is crucial.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AI 能力如何？——评估 AI 的限制**：验证你的期望是否符合 AI，如 GPT-4，能够现实实现的范围。了解其能力和局限性，特别是在标记数和上下文扩展性方面，是至关重要的。'
- en: '`#file` and `#editor` to specify the relevant context and using an agent feature
    such as `@workspace` to expand context can enhance accuracy. Please verify the
    accuracy of your approach. The implementation of the specific tool is not covered
    here, but for GitHub Copilot, please refer to the documentation on the latest
    implementation in the *Further* *reading* section.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`#file`和`#editor`来指定相关的上下文，利用代理特性如`@workspace`来扩展上下文，可以提高准确性。请验证你方法的准确性。具体工具的实现不在此讨论，但对于
    GitHub Copilot，请参考*进一步阅读*部分中的最新实现文档。
- en: '**How can I optimize It? – Quality management**: Evaluate and adjust the volume
    of text, characters, and data you are sending to AI. The goal is to optimize the
    amount of information—increasing what’s necessary and reducing what’s not—to ensure
    quality and efficiency.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如何优化它？——质量管理**：评估并调整发送给 AI 的文本、字符和数据的量。目标是优化信息的数量——增加必要的部分，减少不必要的部分——以确保质量和效率。'
- en: The importance of being context-aware cannot be overstated—it involves providing
    information in just the right measure and utilizing prompts and coding techniques
    to convey intentions with precision. AI-powered development tools such as GitHub
    Copilot stand as aids for engineers, facilitating the provision of rich context
    to AI, thus enhancing the tool’s utility and effectiveness.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文感知的重要性不容忽视——它意味着提供恰到好处的信息，并利用提示和编码技术以精确传达意图。AI 驱动的开发工具，如 GitHub Copilot，是工程师的辅助工具，帮助将丰富的上下文传递给
    AI，从而提升工具的效用和效果。
- en: Reflecting on this, it becomes evident that applying these ideas to architecture
    and programming is not a new concept. This principle aligns with methodologies
    that have been in practice for a long time. By embracing a domain-driven development
    approach, one can engage in context-aware design. Additionally, the principle
    of loose coupling in architecture, which has been explored in various contexts,
    has evolved from language-specific domain separation to service-oriented architecture
    and further into microservices architecture.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 反思这一点，不难发现，将这些理念应用于架构和编程并不是一个新概念。这一原则与长期以来已经在实践中的方法论相契合。通过采用领域驱动开发的方法，可以进行上下文感知设计。此外，架构中的松散耦合原则，在不同场景中已有广泛探索，它从特定语言的领域分离演变为面向服务架构，进一步发展为微服务架构。
- en: In summary, incorporating a context-aware approach into AI-powered coding can
    be considered a good strategy in the era of AI software development. Ultimately,
    this approach boils down to adopting good, existing architectural practices that
    are loosely coupled, boundary-conscious, and user-friendly for humans. By focusing
    on the integration of comprehensive context, allowing AI tools to gain a richer
    understanding of the project, developers can enhance the precision and usefulness
    of AI-generated suggestions. This not only enables developers to more effectively
    handle AI but also makes it easier for anyone to navigate and utilize AI capabilities
    to their fullest potential.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，将上下文感知的方法融入到 AI 驱动的编码中，可以视为在 AI 软件开发时代的一种良好策略。归根结底，这种方法的核心是采用良好的、现有的架构实践，这些实践松散耦合、关注边界，并且对人类友好。通过聚焦于综合上下文的整合，使得
    AI 工具能够更深入地理解项目，开发者可以提升 AI 生成建议的精准性和实用性。这不仅使开发者能更有效地操作 AI，还使任何人都能更轻松地导航并充分利用 AI
    的能力。
- en: Be consistent
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持一致性
- en: In an AI-enhanced programming environment, maintaining a consistent coding style
    and adopting AI-readable naming conventions are pivotal. This section explores
    how these practices enhance interactions with AI-powered coding tools and contribute
    to better code quality.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在AI增强的编程环境中，保持一致的编码风格并采用AI可读的命名约定至关重要。本节探讨了这些做法如何增强与AI驱动的编码工具的交互，并促进更好的代码质量。
- en: A consistent coding style, encompassing aspects such as indentation, naming
    conventions, and comment writing, is essential in software development. It not
    only ensures code readability for human developers but also plays a significant
    role in how effectively AI-powered coding tools can interpret and suggest code.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 一致的编码风格，涵盖缩进、命名约定和注释写作等方面，在软件开发中至关重要。它不仅确保了代码对人类开发者的可读性，还在AI驱动的编码工具如何有效地解释和建议代码方面发挥了重要作用。
- en: 'For example, the following code in Python could be considered a consistent
    code:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下Python代码可以被认为是一种一致的代码：
- en: '[PRE10]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This example demonstrates a clear and consistent use of `snake_case` naming
    and straightforward function naming, facilitating both human understanding and
    AI interpretation.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子展示了清晰一致地使用`snake_case`命名法和简洁的函数命名，便于人类理解并有助于AI解读。
- en: 'In contrast, the following code can be a bad example for AI:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，下面的代码可能是AI的一个不良示例：
- en: '[PRE11]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this example, the inconsistent naming and lack of clarity might result in
    less effective suggestions from AI. If one were to try to complete this content
    with auto-completion, the AI might be able to give an accurate answer for a simple
    example such as this, but if there were countless such random, meaningless notations
    scattered throughout the code base, mistakes could be made.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，不一致的命名和缺乏清晰度可能导致AI给出的建议效果不佳。如果尝试通过自动补全来完成这个内容，AI可能会针对这样一个简单的例子给出准确的答案，但如果在代码库中散布着无数这样的随机且无意义的标记，就可能会出现错误。
- en: AI’s capability to interpret both natural and programming languages suggests
    that it reads code not only in its technical syntax but also as a form of natural
    language. This underscores the importance of clear and meaningful naming conventions
    in programming. By naming variables and functions in a way that is easily understandable,
    developers not only aid human comprehension but also enhance the ability of AI
    models to accurately discern the purpose and context of the code.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: AI能够理解自然语言和编程语言，表明它不仅在技术语法上阅读代码，还将其视作一种自然语言。这凸显了编程中清晰且有意义的命名约定的重要性。通过以易于理解的方式命名变量和函数，开发者不仅帮助人类理解，还增强了AI模型准确辨识代码目的和上下文的能力。
- en: For example, effective AI-readable naming conventions involve using specific
    and descriptive names for variables and functions. This practice extends beyond
    just aiding human collaborators; it allows AI tools to interpret code with higher
    accuracy. Such clarity in naming is beneficial in reducing the ambiguity that
    might otherwise lead to inaccurate or irrelevant code suggestions by AI systems.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，AI可读的有效命名约定涉及使用特定且具描述性的名称来命名变量和函数。这一做法不仅帮助人类协作者，还使得AI工具能够更准确地解读代码。命名中的清晰性有助于减少模糊性，否则这些模糊性可能会导致AI系统给出不准确或不相关的代码建议。
- en: Concreteness and context are crucial. Avoid generic names and strive to provide
    clear context, which can be achieved through methods such as type hinting or adding
    explanatory comments. These practices significantly enhance the precision of AI-generated
    suggestions, leading to more relevant and functional code outputs.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 具体性和上下文至关重要。避免使用通用名称，并努力提供清晰的上下文，这可以通过类型提示或添加解释性注释等方法实现。这些做法显著提升了AI生成建议的准确性，从而导致更相关和更有功能性的代码输出。
- en: 'At this stage, it is clear that code that is easily understandable by AI is
    also inherently more comprehensible to humans. In essence, the advent of AI in
    coding does not always necessitate a reinvention of best practices in software
    engineering. The principles outlined in respected resources like O’Reilly’s *The
    Art of Readable Code: Simple and Practical Techniques for Writing Better Code*
    remain relevant and applicable in the AI era. Maintaining these tried and tested
    practices ensures that code remains accessible and understandable, both for human
    collaborators and AI tools.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，很明显，AI容易理解的代码本身对人类来说也更加易于理解。从本质上讲，AI在编码中的出现并不总是需要重新发明软件工程中的最佳实践。像 O'Reilly
    的 *可读代码的艺术：编写更好代码的简单实用技巧* 这样的权威资源中列出的原则，在AI时代仍然是相关且适用的。保持这些经过验证的实践，确保代码对人类合作者和AI工具都保持可访问性和可理解性。
- en: Summary
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: AI can help you code. However, you may have noticed that no matter how advanced
    AI gets, the approach to coding does not really change much. All you have to do
    is be the great engineer that you always have been. Additionally, using AI well
    will help you improve your skills.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: AI可以帮助你编写代码。然而，你可能已经注意到，无论AI有多先进，编码的方法其实变化不大。你所需要做的只是保持你一直以来优秀的工程师身份。另外，善用AI将帮助你提升技能。
- en: AI will do more than you expect if you approach things with curiosity, so let’s
    work with AI to create a great future, and I hope this chapter will give you a
    hint.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以好奇心去面对事物，AI将会做得比你预期的更多，所以让我们与AI一起创造美好的未来，我希望这一章能给你一些启发。
- en: Further reading
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: '*GitHub Copilot optimization with prompt crafting and context* *setting* ([https://code.visualstudio.com/docs/copilot/prompt-crafting](https://code.visualstudio.com/docs/copilot/prompt-crafting))'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*GitHub Copilot优化：通过提示设计和上下文* *设置*（[https://code.visualstudio.com/docs/copilot/prompt-crafting](https://code.visualstudio.com/docs/copilot/prompt-crafting))'
- en: '*The Art of Readable Code: Simple and Practical Techniques for Writing Better
    Code* by Dustin Boswell and Trevor Foucher ([https://www.oreilly.com/library/view/the-art-of/9781449318482/](https://www.oreilly.com/library/view/the-art-of/9781449318482/))'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*可读代码的艺术：编写更好代码的简单实用技巧*，作者：达斯汀·博斯威尔（Dustin Boswell）和特雷弗·福舍尔（Trevor Foucher）（[https://www.oreilly.com/library/view/the-art-of/9781449318482/](https://www.oreilly.com/library/view/the-art-of/9781449318482/))'
