- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: A Brief Introduction to Release Management
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布管理简介
- en: A new or improved software product is referred to as a **release** in the discipline
    of software engineering. This comprises any and all associated procedures and
    artifacts that are necessary for its development.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件工程领域，新发布或改进的软件产品被称为**发布**。这包括与其开发相关的所有程序和工件。
- en: A release is the climax of the software development and engineering process,
    and it represents an iteration of the product that is both comprehensive and fully
    functional. Before software products are made available to the general public,
    they will typically go through the alpha and beta testing phases. A release is
    typically reserved for the final, polished version of the software, though it
    can also be used to describe the debut of an alpha or beta version as well. You
    may also encounter the phrases “launches” and “increments” when discussing releases
    as well.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 发布是软件开发和工程过程的高潮，它代表了产品的一个迭代版本，既全面又完全功能化。在软件产品向公众发布之前，通常会经过 alpha 和 beta 测试阶段。发布通常用于描述软件的最终、完善版本，尽管它也可以用来描述
    alpha 或 beta 版本的首次发布。您也可能会在讨论发布时遇到“启动”和“增量”这两个词。
- en: Most companies use a system of sequential numbers or letters to label their
    releases. The term **software versioning** describes this naming convention. Each
    organization consistently applies its own internal standard, but **semantic versioning**
    (**semver**) is the common industry-wide standard for how these unique IDs should
    evolve from release to release.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数公司使用顺序号或字母来标记它们的发布版本。术语**软件版本控制**描述了这种命名约定。每个组织都会一致地应用自己的内部标准，但**语义版本控制**（**semver**）是业内广泛使用的标准，规定了这些唯一标识符如何从一次发布到下一次发布演变。
- en: In this chapter, we will define release management and learn its cultural significance
    and technical perspective. Further, we’ll review a brief history of release management
    and understand how it evolved over the years. Finally, you’ll look at the standard
    six phases of any release management model. It is important to note that **Waterfall**
    was the original release management standard, but using Waterfall is not obligatory.
    Release management is agnostic of your chosen model and is adaptable to many kinds
    of SDLC models, which we will cover more in [*Chapter 3*](B21803_03.xhtml#_idTextAnchor051).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将定义发布管理，并了解其文化意义和技术视角。此外，我们将回顾发布管理的简短历史，了解它如何随着时间的推移而演变。最后，您将学习任何发布管理模型的标准六个阶段。需要注意的是，**瀑布模型**是最初的发布管理标准，但使用瀑布模型并非强制性要求。发布管理与您选择的模型无关，并且可以适应许多类型的SDLC模型，我们将在[*第3章*](B21803_03.xhtml#_idTextAnchor051)中进一步讨论这一点。
- en: 'These are the main topics that we will cover in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将覆盖以下主要内容：
- en: What is release management, and how did it evolve?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是发布管理，它是如何演变的？
- en: Dissecting the release management life cycle
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解剖发布管理生命周期
- en: What is release management, and how did it evolve?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是发布管理，它是如何演变的？
- en: '**Release management** is a comprehensive set of activities that involve strategic
    planning, conceptualization, scheduling, rigorous testing, seamless deployment,
    and the effective control of a software release. The primary objective of this
    practice is to facilitate the quick delivery of essential application features
    and enhancements to the customer by software development teams while simultaneously
    upholding the integrity, confidentiality, and availability of an established production
    environment.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**发布管理**是一整套活动，涉及战略规划、构思、调度、严格测试、无缝部署以及有效控制软件发布的过程。此实践的主要目标是通过软件开发团队快速交付关键的应用功能和改进，同时保持已建立的生产环境的完整性、机密性和可用性，从而满足客户需求。'
- en: In the competitive landscape of business and IT, product releases that lack
    quality or features are the quickest way to give your competitor an advantage.
    Modern enterprises are dynamic, and multitudes of changes get completed at varying
    paces. Enterprises need release control and deployment automation to orchestrate
    all of these changes so that the final product delivers the exceptional value
    that their customers expect. Successful release management enhances the frequency
    with which releases are completed and decreases the frequency with which quality
    issues arise for a business. As a result, businesses can provide software more
    quickly while also reducing the associated risks, yielding increased productivity,
    communication, and co-operation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在商业和IT的竞争环境中，缺乏质量或功能的产品发布是让竞争对手获得优势的最快方式。现代企业是动态的，各种变化以不同的速度完成。企业需要发布控制和自动化部署来协调所有这些变化，以确保最终产品提供客户所期望的卓越价值。成功的发布管理提高了发布的频率，并减少了质量问题发生的频率，从而使企业能够更快地提供软件，同时减少相关的风险，提高生产力、沟通和合作。
- en: Because of these enhancements, the team is now able to generate high-quality
    software on a consistent basis in far less time than before, which enables the
    organization to be more responsive to the demands of customers or changes in the
    operational environment. Standardizing and streamlining the development and operations
    process is another benefit of release management. The group establishes release
    controls that can be audited, resulting in a central location from which all releases
    can be retrieved. The maturity of an organization can be further improved by instituting
    a standard, written procedure for all releases to follow. Teams can learn more
    from past releases and apply that knowledge to future iterations if they standardize
    and concentrate on the product.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些改进，团队现在能够在比以前更短的时间内持续生成高质量的软件，这使得组织能够更好地应对客户需求或运营环境的变化。标准化和简化开发和运营流程是发布管理的另一个好处。团队建立了可以审计的发布控制，从而形成一个可以提取所有发布内容的集中位置。通过制定标准化、书面的发布流程，组织的成熟度可以进一步提高。如果团队标准化并专注于产品，他们可以从过去的发布中学习，并将这些知识应用到未来的迭代中。
- en: The improved communication between operations and developers is well-received
    because it results in fewer surprises. Now, cross-functional teams will not have
    to worry about operations being left to **patch and pray** or **fight fires**
    because of missed deadlines after a release has been **thrown over the wall**
    from development. As a result, more time is available for automating business
    processes or fixing incompatibilities in the configurations of integrations in
    the development and production environments.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 运营和开发人员之间的沟通改进得到了广泛欢迎，因为它减少了意外情况的发生。现在，跨职能团队不必再担心发布后，运营因错过截止日期而被迫**修补和祈祷**或**应急处理**，而是能够减少这些问题。这样，团队可以有更多的时间来自动化业务流程或修复开发和生产环境中集成配置的不兼容问题。
- en: Definitions
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义
- en: 'Let’s quickly define some of the key terms that you might come across in the
    course of this book:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速定义在本书中可能会遇到的一些关键术语：
- en: '**Patch and pray**: In software development, a tactic known as “patch and pray”
    refers to the uses of brittle solutions, sometimes known as “patches,” for resolving
    defects or vulnerabilities without solving the deeper, more underlying source
    of the problem.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**修补和祈祷**：在软件开发中，所谓的“修补和祈祷”策略指的是使用脆弱的解决方案，有时被称为“补丁”，来解决缺陷或漏洞，而并没有解决问题的更深层次根源。'
- en: It is notorious that organizations employ this technique to make rigorous deadlines,
    give higher priority to other activities, or compensate for lack of resources;
    nonetheless, this strategy might result in long-term technical debt as well as
    significant security concerns.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 组织普遍采用这种技术来设定严格的截止日期、优先处理其他活动，或弥补资源不足；然而，这种策略可能导致长期的技术债务以及显著的安全隐患。
- en: '**Fight fires**: In the field of computer science, firefighting involves allocating
    resources to solve an unforeseen issue. The word indicates bug hunting rather
    than feature integration. Firefighting may involve adding engineers to fix problems
    with code discovered near a product’s release deadlines during software development.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灭火**：在计算机科学领域，灭火是指分配资源来解决突发问题。这个词语表示的是调试，而非功能集成。灭火可能涉及在软件开发的产品发布临近时，增加工程师来修复发现的代码问题。'
- en: Plenty of businesses are ready for firefighting situations, but recurring emergencies
    indicate poor planning or inefficiency and wasted resources that could be used
    elsewhere. Comprehensive **disaster recovery planning** (**DRP**) anticipates
    and perhaps prevents catastrophes, minimizing firefighting.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 很多企业已经做好了应对突发状况的准备，但频繁的紧急情况往往表明计划不周、效率低下，以及浪费本可以用于其他地方的资源。全面的**灾难恢复规划**（**DRP**）可以预见并或许避免灾难，从而最大限度地减少应急响应。
- en: '**Thrown over the wall**: This is business slang for completing your part of
    a project and then passing it off to the next group. This phrase is usually said
    when there is little communication between two groups or little to no time for
    technical briefings just prior to a new deployment.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**抛到墙外**：这是商业术语，指的是完成了项目的一部分后将其交给下一个小组。这句话通常是在两个小组之间沟通很少，或者在新部署前几乎没有时间进行技术简报时使用的。'
- en: In a nutshell, release management fosters collaboration amongst departments
    within an IT firm. This allows for more comprehensive improvements to the product
    distribution process.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，发布管理促进了IT公司内部各部门之间的协作。这使得产品分发过程得以进行更全面的改进。
- en: Now that you understand the meaning of release management, let’s expand on this
    topic. In the sections ahead, we will review the history of release management
    to see how new models emerged over time and how they aligned with contemporary
    software development philosophies of their day. Later, we’ll wrap up this chapter
    by examining the six standard phases that any release management model should
    include.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，既然你已经理解了发布管理的含义，我们来扩展一下这个话题。在接下来的章节中，我们将回顾发布管理的历史，看看新的模型是如何随着时间的推移出现的，并且如何与当时的当代软件开发理念对接。稍后，我们将通过审视任何发布管理模型应该包括的六个标准阶段来结束本章。
- en: A brief history of release management
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布管理的简史
- en: The transition in focus of software engineering from project-based to product-based
    offerings is responsible for the growing importance of release management. From
    the inception of release management, tasks were executed within the framework
    of a project-based development paradigm. In this approach, software developers
    treated each release as an independent project rather than as a product. Once
    the software was finished being developed, it generally signaled the end of the
    developers’ role in the process, and then they would be disbanded.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程的焦点从基于项目转向基于产品的转变，促使发布管理的重要性日益增加。从发布管理的初期，任务是在基于项目的开发框架内执行的。在这种方法中，软件开发人员将每次发布视为一个独立的项目，而不是一个产品。一旦软件开发完成，通常意味着开发人员在过程中的角色也结束，他们会解散。
- en: Over the course of time, the process of software development gradually evolved
    to bear a greater resemblance to the product cycle, wherein products undergo support,
    enhancement, and many relaunches across an extended lifespan. Within this particular
    structure, the primary objective of development was not the release itself, but
    rather, the release served as a demarcation point for the start of support and
    revision activities. Because of this complexity, phase co-ordination has become
    more important than ever. For this reason, modern release management draws ideas
    from business-oriented product management, which includes post-sale support and
    enhancements.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，软件开发的过程逐渐演变，变得更加类似于产品周期，在这个过程中，产品会经历支持、增强和多次重新发布，跨越较长的生命周期。在这个特定的结构中，开发的主要目标不是发布本身，而是发布作为支持和修订活动开始的分界点。由于这种复杂性，阶段协调变得比以往任何时候都更为重要。因此，现代发布管理借鉴了以业务为导向的产品管理理念，其中包括售后支持和增强。
- en: The evolution from software to release management
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从软件到发布管理的演变
- en: When British computer scientist Tom Kilburn created the first piece of software
    in 1948, he used eight words of working storage and 17 words of instructions,
    for a total of 25 words. Since then, software development processes have advanced
    significantly.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当英国计算机科学家汤姆·基尔本在1948年创建第一段软件时，他使用了8个工作存储字和17个指令字，共计25个字。从那时起，软件开发过程已经取得了显著进展。
- en: 'In spite of his coworker’s mockery, in 1953, Paul Niquette proposed the concept
    of a computer whose program could be kept separate from the physical components
    of the device. From that point forward, this revolutionized the way that people
    conceived computation:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管同事们嘲笑他，1953年，保罗·尼凯特提出了一个概念：计算机的程序可以与设备的物理组件分开存储。从那时起，这一思想彻底改变了人们对计算的认知：
- en: When I first said ‘software’ out loud, people around me said, “Huh?” From the
    very beginning I found the word too informal to write and often embarrassing to
    say. Nevertheless, with smirking trepidation I did occasionally feature the word
    ‘software’ in speeches and lectures and media interviews throughout the fifties.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我第一次大声说出“软件”这个词时，周围的人都说：“哈？”从一开始，我就觉得这个词太不正式，不敢写出来，甚至说出来也常常让我觉得尴尬。然而，带着带有些许得意的恐惧，我确实在五十年代时偶尔在演讲、讲座和媒体采访中使用过“软件”这个词。
- en: '(Paul Niquette, Introduction: The Software Age).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: （保罗·尼凯特，《导言：软件时代》）。
- en: In the first half of the twentieth century, when inventions such as the **electronic
    numerical integrator and computer** (**ENIAC**) sped up the development of computing,
    software wasn’t complex enough to require a framework such as the **software development
    life cycle** (**SDLC**). Simple tools such as go-to lines and if/then expressions
    were used in the first software implementations. The requirement for developing
    models eventually led to the SDLC, which, in turn, was inspired by the idea of
    **structured programming**.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在20世纪上半叶，当**电子数值积分器和计算机**（**ENIAC**）等发明加速了计算机的发展时，软件尚不复杂到需要像**软件开发生命周期**（**SDLC**）这样的框架。最初的软件实现中使用了简单的工具，如跳转语句和if/then表达式。随着开发模型的需求不断增加，最终导致了SDLC的出现，而SDLC又受到**结构化编程**思想的启发。
- en: Structured programming is a programming paradigm that seeks to enhance the clarity,
    quality, and efficiency of a computer program by employing structured control
    flow components such as selection (if/then/else) and repetition (while and for),
    as well as block structures and subroutines. The emergence of the **ALGOL 58**
    and **ALGOL 60** programming languages in the late 1950s marked a significant
    development in the field. Notably, ALGOL 60 introduced support for block structures
    in 1960, further enhancing its capabilities.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化编程是一种编程范式，通过采用结构化控制流组件，如选择（if/then/else）和重复（while和for），以及块结构和子程序，来提高计算机程序的清晰度、质量和效率。1950年代末，**ALGOL
    58**和**ALGOL 60**编程语言的出现标志着该领域的一个重要发展。值得注意的是，ALGOL 60在1960年引入了对块结构的支持，进一步增强了其功能。
- en: The **software development methodology**, commonly referred to as **SDM**, did
    not come into practice until the 1960s. The **systems development life cycle**
    (**SDLC**) can be regarded as the earliest publicized release management methodology
    and framework for constructing mainframes and other analog information systems,
    pre-dating the **software development life cycle**. The primary objective of the
    systems development life cycle is to systematically and meticulously pursue the
    development of information systems. This entails adhering strictly and sequentially
    to each stage of the life cycle, from the initial conception of the idea to the
    final delivery of the system within the specific framework being employed. Notably,
    by switching out systems for software, a new form of SDLC was born. It aspires
    to be the definitive standard in the industry by detailing the inputs, outputs,
    and steps involved in creating and maintaining software systems.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**软件开发方法论**，通常被称为**SDM**，直到1960年代才开始实践。**系统开发生命周期**（**SDLC**）可以看作是最早公开发布的发布管理方法论和框架，用于构建大型计算机和其他模拟信息系统，早于**软件开发生命周期**的提出。系统开发生命周期的主要目标是系统地、精细地推进信息系统的开发。这意味着严格且按顺序遵循生命周期的每个阶段，从最初的构思到最终在所采用的特定框架内交付系统。值得注意的是，通过将系统替换为软件，诞生了一种新的SDLC形式。它力求成为行业的最终标准，通过详细列出创建和维护软件系统的输入、输出和步骤。'
- en: 'The term **Waterfall** came many years after its formal SDLC specification
    was invented (you can see an illustration of the Six phases of the Waterfall release
    management model in *Figure 3**.2* in [*Chapter 3*](B21803_03.xhtml#_idTextAnchor051)).
    The first known presentation describing the use of Waterfall’s phases in software
    engineering was held by Herbert D. Benington on June 29, 1956, although the term
    Waterfall wasn’t used at the time. The earliest formal, detailed illustration
    of the **Waterfall model** can be traced back to a 1970 essay by Winston W. Royce,
    but the name Waterfall is not used in Royce’s article itself. The phrase Waterfall
    was allegedly first documented in a research piece published in 1976 by Thomas
    E. Bell and T.A. Thayer. By 1985, the **Waterfall release management methodology**
    was codified by the United States Department of Defense in DoD-STD-2167A. The
    DOD’s standards for working with software development contractors stated that
    “*the contractor shall implement a software development cycle that includes the
    following six phases: Software Requirement Analysis, Preliminary Design, Detailed
    Design, Coding and Unit Testing, Integration,* *and Testing*.”'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**瀑布模型**这一术语是在其正式的 SDLC 规范被发明多年后才出现的（你可以在[*第 3 章*](B21803_03.xhtml#_idTextAnchor051)的*图
    3.2*中看到瀑布发布管理模型的六个阶段示意图）。首次描述在软件工程中使用瀑布模型各阶段的报告是由赫伯特·D·贝宁顿（Herbert D. Benington）于1956年6月29日举行的，尽管当时并未使用“瀑布”这一术语。最早的正式、详细的**瀑布模型**示意图可以追溯到温斯顿·W·罗伊斯（Winston
    W. Royce）于1970年发表的文章，但罗伊斯的文章中并没有使用“瀑布”这一名称。瀑布这一术语据称首次出现在托马斯·E·贝尔（Thomas E. Bell）和T.A.塞耶（T.A.
    Thayer）于1976年发表的研究论文中。到1985年，**瀑布发布管理方法**被美国国防部在DoD-STD-2167A标准中正式规范。美国国防部针对与软件开发承包商合作的标准中指出：“*承包商应实施一个包括以下六个阶段的软件开发周期：软件需求分析、初步设计、详细设计、编码与单元测试、集成和测试*。”'
- en: Beginning with NASA’s Project Mercury in the 1960s, **iterative and incremental
    development** (**IID**) was one of the earliest and closest competitors to Waterfall
    release management. Some of the Mercury team went on to form a new IBM subsidiary
    that was responsible for creating the core avionics software system for the space
    shuttle, which operated from 1977 until 1980\. Over the course of 31 months, the
    team performed 17 iterations of IID, with each iteration lasting about 8 weeks
    on average. They decided against using a Waterfall development approach because
    the requirements for the shuttle program were well-known to shift halfway through
    the creation of the software.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 从1960年代NASA的水星计划开始，**迭代和增量开发**（**IID**）成为瀑布发布管理的最早也是最接近的竞争者之一。部分水星计划团队成员后来成立了IBM的一个子公司，负责为航天飞机创建核心的航空电子软件系统，该系统从1977年运行到1980年。在31个月的时间里，该团队进行了17次IID迭代，每次迭代的持续时间平均为8周。他们决定放弃使用瀑布开发方法，因为航天飞机计划的需求在软件开发过程中已知会发生变化。
- en: 'In his 1986 study, Barry Boehm initially outlined the **spiral model** and
    provided the now-famous diagram, which has been used in numerous subsequent publications
    that discuss it:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在1986年的研究中，巴里·博厄姆（Barry Boehm）首次概述了**螺旋模型**，并提供了如今广为人知的示意图，后续有许多出版物采用了这一图表进行讨论：
- en: '![Figure 2.1: The spiral release management model (image credit: static.hlt.bme.hu)](img/B21803_02_1.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1：螺旋发布管理模型（图片来源：static.hlt.bme.hu）](img/B21803_02_1.jpg)'
- en: 'Figure 2.1: The spiral release management model (image credit: static.hlt.bme.hu)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1：螺旋发布管理模型（图片来源：static.hlt.bme.hu）
- en: The **IT Infrastructure Library** (**ITIL**) started during the 1980s in response
    to the decentralization of data centers and the use of geographically diversified
    architectures. This behavior resulted in variations in processes and deployments,
    leading to inconsistent or unsatisfactory management of IT services inside enterprises.
    The **Central Computer and Telecommunications Agency** (**CCTA**) of the United
    Kingdom recognized the significance of viewing information technology as a service
    and using consistent procedures across the entirety of the information technology
    service life cycle. As a result of this, the CCTA established the Government Information
    Technology Infrastructure Management methodology. By 1989, CCTA published ITIL
    version 1.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**IT基础设施库**（**ITIL**）始于1980年代，响应数据中心的去中心化和地理多样化架构的使用。这种行为导致了流程和部署的差异，进而引发了企业内部IT服务管理的不一致或不满意。英国的**中央计算机与电信机构**（**CCTA**）认识到将信息技术视为一种服务，并在整个信息技术服务生命周期内使用一致的程序的重要性。因此，CCTA制定了政府信息技术基础设施管理方法论。到1989年，CCTA发布了ITIL版本1。'
- en: The **V-model** concept emerged concurrently, albeit independently, in Germany
    and the United States during the latter part of the 1980s. The US V-model, which
    was outlined in the 1991 proceedings of the **National Council on Systems Engineering**
    (**NCOSE**), currently known as INCOSE since 1995, was designed specifically for
    satellite systems that encompassed hardware, software, and human interaction.
    The German V-model was initially formulated by IABG, a research and development
    organization located in Ottobrunn, in collaboration with the Federal Office for
    Defense Technology and Procurement in Koblenz. This joint effort was undertaken
    by the Federal Ministry of Defense. In the summer of 1992, the Federal Ministry
    of the Interior assumed control of the civilian public authority’s domain.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**V模型**概念在1980年代后期同时出现在德国和美国，尽管是独立发展的。美国的V模型在1991年《国家系统工程委员会》（**NCOSE**，自1995年起更名为INCOSE）的会议记录中进行了阐述，专门为涵盖硬件、软件和人机交互的卫星系统设计。德国的V模型最初由IABG（位于奥托布伦的研究与开发机构）制定，并与位于科布伦茨的联邦国防技术与采购局合作。这项联合工作由联邦国防部主导。1992年夏，联邦内政部接管了民用公共权威领域的管理。'
- en: Jacobson, Booch, and Rumbaugh (1999) introduced the concept of the **unified
    process** in their book titled *Unified Software Development Process*. This seminal
    work presented the initial discourse of an agile framework for software development.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Jacobson、Booch和Rumbaugh（1999）在其名为《统一软件开发过程》的著作中提出了**统一过程**的概念。这部开创性的著作首次提出了一个敏捷框架的软件开发方法论。
- en: The inception of the **Agile release model** took place in a renowned resort
    located in Snowbird, Utah, in 2001\. A group of 17 prominent software engineers
    convened to engage in discourse about lightweight development methodologies, subsequently
    culminating in the joint development of the **Manifesto for Agile Software Development**
    (aka. The Agile Manifesto). In 2009, a collective associated with Robert C. Martin,
    co-author of the Agile Manifesto, developed an expansion of software development
    principles known as the **Software Craftsmanship Manifesto**. This manifesto aimed
    to guide the practice of agile software development in accordance with principles
    of professional conduct and mastery.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**敏捷发布模型**的起源发生在2001年，美国犹他州Snowbird的一家著名度假村。17位著名软件工程师聚集一堂，讨论轻量级开发方法论，最终共同制定了**敏捷软件开发宣言**（即“敏捷宣言”）。2009年，与敏捷宣言共同作者之一罗伯特·C·马丁（Robert
    C. Martin）相关的一群人，发展出了一个软件开发原则的扩展，称为**软件工艺宣言**。该宣言旨在根据职业道德和精通的原则，引导敏捷软件开发的实践。'
- en: In 2007, an IT consultant named Patrick Debois established the DevOps methodology
    after realizing that the **development** (**Dev**) and **operations** (**Ops**)
    teams were not co-operating very effectively with one another. Although he has
    always found the gaps and disputes between Dev and Ops uncomfortable, the continual
    switching and back and forth on a large data center migration project where he
    was responsible for testing was particularly frustrating for him. One day, he
    was completely immersed in the flow of Agile software development. The following
    day, he was involved in firefighting and experienced firsthand the uncertainty
    that comes with traditional operations. He was sure there was a more effective
    approach somehow.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 2007年，一位名叫Patrick Debois的IT顾问在意识到**开发**（**Dev**）和**运维**（**Ops**）团队之间的合作效率不高后，提出了DevOps方法论。尽管他一直觉得Dev和Ops之间的分歧和矛盾令人不悦，但在一个他负责测试的大型数据中心迁移项目中，团队间的不断切换和反复工作令他尤为沮丧。有一天，他完全沉浸在敏捷软件开发的流程中。第二天，他又参与了紧急问题处理，亲身体验了传统运维带来的不确定性。他确信一定有一种更高效的方法。
- en: Andrew Shafer organized a gathering of **birds of a feather** (**BoF**) the
    next year at the 2008 Agile Conference to discuss **Agile infrastructure**. Andrew
    was under the impression that no one would show up to the meeting, so he decided
    not to attend it himself. When Patrick Debois showed up, he immediately went in
    search of Andrew so that he could discuss Agile infrastructure as the solution
    to making operations as agile as the developers were. This is the point at which
    the DevOps movement began.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Andrew Shafer在2008年敏捷大会上组织了一次**志同道合者**（**BoF**）聚会，讨论**敏捷基础设施**。Andrew原以为没有人会参加这次会议，所以他决定自己不去参加。当Patrick
    Debois出现时，他立刻去找Andrew，讨论将敏捷基础设施作为让运维像开发人员一样敏捷的解决方案。这就是DevOps运动的起点。
- en: At the Velocity conference in 2009, John Allspaw and Paul Hammond gave a presentation
    titled “*10+ deploys per day - Dev and Ops Cooperation at Flickr*,” and after
    that, the concept began to acquire popularity among development teams. This discussion
    opened people’s eyes to the possibilities that may be realized by using these
    early DevOps approaches. Additionally, Patrick organized and presided over the
    first DevOpsDays conference, which took place in Ghent, Belgium, in October 2009\.
    The conference was dubbed *The conference that brings development and operations
    together*. This is where the term **DevOps** was first publicly mentioned. The
    *DevOpsDays conference* is now a regional event that takes place internationally
    on a regular basis in a variety of locales.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在2009年的Velocity大会上，John Allspaw和Paul Hammond做了一个题为“*每天部署10次以上 - Flickr上的开发与运维合作*”的演讲，之后这个概念开始在开发团队中获得普及。此次讨论让人们看到了通过采用这些早期的DevOps方法，可能实现的各种可能性。此外，Patrick还组织并主持了2009年10月在比利时根特举行的第一次DevOpsDays大会。此次大会被称为*将开发与运维结合的大会*，也是**DevOps**一词首次公开亮相的地方。如今，*DevOpsDays大会*已经成为一个在多个地区定期举办的国际性活动。
- en: 'In the following diagram, you’ll see a timeline of release management history.
    It started in 1953 when the term “software” was coined. From there, you’ll see
    the evolution from Waterfall to DevOps. Ironically or not, you’ll still see both
    of these models being used up until the present day. One thing to notice is how
    fast progress accelerated over time, starting at a rate from decades to only years.
    Knowing where you’ve been is key to understanding how you’ve gotten to where you
    are now. The history of release management has culminated in the creation of DevOps.
    It is vital to know this in order to appreciate why DevOps has grown to be one
    of the most widely adopted release management models in software development history:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，您将看到发布管理历史的时间线。从1953年“软件”一词首次提出开始，您可以看到从瀑布模型到DevOps的演变。讽刺的是，或许也不那么讽刺，您将发现这两种模型一直被使用，直到今天。一个值得注意的地方是，随着时间的推移，进展的速度是如何加快的，从几十年到仅仅几年。了解过去的历程对于理解现在的成就至关重要。发布管理的历史最终促成了DevOps的诞生。了解这一点对于理解为什么DevOps已成为软件开发历史上最广泛采用的发布管理模型之一非常重要：
- en: '![Figure 2.2: Timeline of release management history](img/B21803_02_2.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图2.2：发布管理历史时间线](img/B21803_02_2.jpg)'
- en: 'Figure 2.2: Timeline of release management history'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2：发布管理历史时间线
- en: So far, you’ve learned about the purpose of release management and its history.
    Now you know how new models emerged over time and why they reflected the philosophies
    of the day. Now, let’s wrap up this chapter by examining the six standard phases
    that any release management model should include.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经了解了发布管理的目的及其历史。现在，你知道了新模型是如何随着时间的推移而出现的，以及它们为什么反映了当时的哲学思想。接下来，让我们通过研究发布管理模型应该包括的六个标准阶段来总结本章内容。
- en: Dissecting the release management life cycle
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解剖发布管理生命周期
- en: 'The release management life cycle encompasses various distinct stages:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 发布管理生命周期包括多个不同的阶段：
- en: '![Figure 2.3: The six standard phases of release management](img/B21803_02_3.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3：发布管理的六个标准阶段](img/B21803_02_3.jpg)'
- en: 'Figure 2.3: The six standard phases of release management'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3：发布管理的六个标准阶段
- en: The variability of this process is contingent upon the chosen release management
    model, product design, the team, and the organization, as it is all influenced
    by the unique project requirements. Nevertheless, it is essential for organizations
    and teams, regardless of their scale, to adhere to a set of universally applicable
    procedures in order to achieve financial sustainability and provide users with
    high-quality results.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这一过程的变动性取决于所选择的发布管理模型、产品设计、团队和组织，因为它们都受到特定项目需求的影响。尽管如此，组织和团队无论规模大小，都必须遵循一套普遍适用的程序，以实现财务可持续性并为用户提供高质量的成果。
- en: Now, let’s have a look at what a standard procedure for release management consists
    of.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看发布管理的标准程序包括哪些内容。
- en: Request
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 请求
- en: Requests for new features or modifications to current functionality are the
    first steps in the release management process. No promise can be made that any
    and all requests will result in a new release. Each request is analyzed to determine
    if it makes sense, if it can be implemented, and if the current version of the
    application can be modified to accommodate it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对新功能请求或现有功能修改的请求是发布管理过程中的第一步。不能保证所有的请求都会导致新的发布。每个请求都需要经过分析，以确定它是否合理，是否可以实施，以及当前版本的应用是否可以修改以适应该请求。
- en: Whether you are starting from scratch or want to improve an already established
    product, knowing what is expected of you is essential. Do not assume that you
    already know what features and functionality your client wants to be included
    in an application or related product. As an example, customers may request that
    you incorporate a new feature into their mobile app. You will need to sit down
    with them to have a meeting in order to fully grasp their needs, desires, and
    motivations.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是从零开始，还是想要改善已经建立的产品，了解对你的期望是至关重要的。不要假设你已经知道客户希望在应用程序或相关产品中包含哪些功能和特性。举个例子，客户可能要求你将一项新功能集成到他们的移动应用中。你需要与他们坐下来开会，全面了解他们的需求、愿望和动机。
- en: Whatever your goal is, make sure you understand it thoroughly before proceeding
    to planning and development. If you have any doubts, consult with your team or
    the customer before proceeding in order to come up with an appropriate release
    strategy that meets the need.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你的目标是什么，确保在进行计划和开发之前充分理解它。如果你有任何疑虑，在继续之前与你的团队或客户进行咨询，以制定出符合需求的合适发布策略。
- en: Plan
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计划
- en: After you have a complete understanding of the requirements for the release,
    the next step is planning. In order to build and release what you intend to do,
    you will need to have thorough planning and preparations that are based on the
    needs of all stakeholders involved. In terms of the technology, the deadline,
    the staff, and the resources, your preparation needs to be reasonable and practical.
    If you are developing a new version of an app for release, for instance, you need
    to test it thoroughly on a wide variety of platforms and devices before releasing
    it to the customer.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在你完全理解发布需求后，下一步是计划。为了构建和发布你打算做的内容，你需要进行全面的规划和准备，这些准备工作应基于所有相关方的需求。在技术、截止日期、人员和资源方面，你的准备需要合理且务实。例如，如果你正在开发一个应用程序的新版本进行发布，你需要在各种平台和设备上进行充分的测试，然后才能发布给客户。
- en: Planning is easier if you stay in regular contact with the client. The project
    schedule and expected delivery date of the finished product can be discussed.
    You must not commit to an impossible deadline. When confirming the due date, take
    into account the available resources (money, time, and personnel). In addition,
    it is wise to consider which technologies you will be using before the release
    and plan accordingly. Consider whether your choices are cost-effective, fit your
    budget, and make use of the talents of your staff. Pick tools that will allow
    you to quickly and easily design a high-quality product and get it out to customers.
    Planning also requires the efficient allocation and utilization of available resources
    to prevent waste and ensure the efficient construction of a product.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你与客户保持定期联系，规划就会变得更加容易。项目的进度和最终交付日期可以进行讨论。你不能承诺一个不可能完成的截止日期。在确认截止日期时，要考虑到可用资源（资金、时间和人员）。此外，在发布之前，考虑你将使用哪些技术并进行相应规划是明智的。考虑你的选择是否具备成本效益，是否符合预算，并且是否能充分利用团队成员的才能。选择那些能够帮助你快速且轻松地设计高质量产品并将其推向客户的工具。规划还需要高效地分配和利用现有资源，以防止浪费，并确保产品的高效构建。
- en: You have a variety of options available to you for outlining your plan, one
    of which is the use of a release management checklist. The process’s roles and
    responsibilities ought to be outlined in the checklist in something approximating
    chronological order. If your team looks at the checklist, they should easily be
    able to determine what stage they are currently in as well as what their part
    or task in the process is. To create a solid release plan, hold a meeting with
    your development and operations teams to discuss the requirements, obstacles,
    and strategies for overcoming them, including the most efficient means of achieving
    the objective. When in doubt, include your customer in the conversation.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择多种方式来概述你的计划，其中之一是使用发布管理检查清单。在检查清单中，应按大致的时间顺序概述各个角色和责任。如果你的团队查看该清单，他们应该能够轻松地确定当前所处的阶段，以及他们在过程中的任务或角色。为了制定一个稳固的发布计划，与你的开发团队和运营团队召开会议，讨论需求、障碍和克服障碍的策略，包括实现目标的最有效方法。如有疑问，邀请客户参与讨论。
- en: Design and Build
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计与构建
- en: After the strategy is complete, the following step is to design and develop
    the product. Plans and strategies developed in response to these specified requirements
    can now be put into action. In order to complete this step, your programmers will
    need to write the code that will eventually be able to convert to the features
    or functionalities that you plan to add to your product.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在战略完成后，接下来的步骤是设计和开发产品。根据这些具体需求制定的计划和策略现在可以付诸实践。为了完成这一阶段，程序员需要编写代码，这些代码最终将转化为你计划添加到产品中的特性或功能。
- en: This stage can repeat itself multiple times over the course of the whole release
    cycle, much like the continuous development strategy in DevOps. After the developer
    has finished writing the code, there is a possibility that it contains a number
    of problems, faults, and defects that need to be tested. Multiple rounds of testing
    will be performed on the code before it is finally accepted. The whole list of
    problems that need to be resolved and optimized should be provided to the developers
    so that they can prioritize their backlog and produce software that performs as
    it was intended. One way to help with this is through the use of bug-tracking
    tools, such as **FindBugs**, **Eslint**, and **Sonarlint**.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个发布周期中，这一阶段可能会反复进行，类似于DevOps中的持续开发策略。在开发者完成编写代码后，代码中可能存在许多问题、故障和缺陷，需要进行测试。在最终接受之前，代码将经历多轮测试。所有需要解决和优化的问题列表应该提供给开发者，以便他们能够优先处理待办事项，并生成符合预期的高效软件。帮助解决这一问题的一个方法是使用缺陷跟踪工具，如**FindBugs**、**Eslint**和**Sonarlint**。
- en: Testing
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试
- en: As stated previously, testing code is necessary to guarantee there are no errors
    or defects that could compromise the software’s functionality, speed, or safety.
    Manual testing is better than no testing at all, but automated testing should
    be implemented where possible.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，测试代码是保证没有错误或缺陷的必要步骤，这些错误或缺陷可能会影响软件的功能、速度或安全性。手动测试总比没有测试要好，但在可能的情况下，应实施自动化测试。
- en: The terms functional testing and non-functional testing are sometimes used incorrectly
    as interchangeable concepts. As mentioned in [*Chapter 1*](B21803_01.xhtml#_idTextAnchor015),
    there are many different types of testing that can be performed, and they all
    usually fall under these two categories. When problems are found, the code is
    then sent back to the developers so that they can fix the issues and resubmit
    the code for further review.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 功能测试和非功能测试这两个术语有时被误用为可以互换的概念。如在[*第1章*](B21803_01.xhtml#_idTextAnchor015)中提到的，实际上可以进行多种类型的测试，通常都归属于这两个类别。当发现问题时，代码会被送回开发人员，以便他们修复问题并重新提交代码进行进一步审查。
- en: User acceptance testing is the final step before releasing the software product
    to the end users, during which the customer will verify that it meets their needs
    and operates as intended. The next steps are dependent on the user’s acceptance.
    Otherwise, comments from users are used to revise the code, which is then tested
    further before being released.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 用户验收测试是将软件产品发布给最终用户之前的最后一步，在此过程中，客户将验证软件是否符合他们的需求并按预期运行。接下来的步骤取决于用户的验收情况。否则，用户的反馈将用于修订代码，然后再进行进一步测试，最终发布。
- en: Deployment
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署
- en: After the software development team has confirmed that the product has been
    developed in accordance with specifications and is bug-free, they will then get
    it ready to be released to the public or deployed for a client.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发团队确认产品已经按照规格开发并且没有错误后，他们将准备将其发布到公众或部署给客户。
- en: Additionally, the QA team will be in charge of carrying out the final tests
    to guarantee that the finished product satisfies all of the product release plan’s
    business requirements and minimal standards. After that, it will be examined by
    the management or the owner of the product to ensure that it may be shipped out.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，质量保证（QA）团队将负责执行最终测试，以确保成品符合所有产品发布计划的业务需求和最低标准。然后，管理层或产品负责人将检查该产品，确保它可以发布。
- en: At this point, the documentation that was required to assist other developers
    in comprehending the software and learning how to utilize it has been completed.
    In addition, the teams complete all of the required documentation in order to
    hand off the finished product to the customer. In addition to this, companies
    should think about providing their consumers or staff with training on how to
    utilize the new product so that they can operate with it productively.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一阶段，已完成帮助其他开发人员理解软件并学习如何使用它所需的文档。此外，团队还完成了所有必要的文档，以便将完成的产品交给客户。除此之外，公司还应考虑为消费者或员工提供培训，教他们如何有效地使用新产品。
- en: Post-deployment
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署后
- en: Regardless of whether the release has been developed for internal use or for
    customers, the duties associated with it extend beyond the deployment phase. Irrespective
    of the current efficiency and functionality of the software, regular maintenance
    is necessary to ensure optimal performance.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 无论发布是为内部使用还是为客户开发的，与其相关的任务都超出了部署阶段。无论软件当前的效率和功能如何，定期维护仍然是必要的，以确保最佳性能。
- en: Furthermore, security problems can arise at any time. When that happens, it
    can have a devastating impact on your company and its reputation. Many different
    things can have an effect on your software, leading to performance issues, crashes,
    security holes, usability problems, and so on. Therefore, even after the software
    has been made available to end users, you should never stop monitoring it. You
    need to set aside some time to investigate the system’s performance, security,
    usability, and stability in order to identify any problems and correct them before
    they can have an impact on users.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，安全问题可能随时发生。一旦发生，这可能会对您的公司及其声誉产生毁灭性的影响。许多不同的因素可能会影响您的软件，导致性能问题、崩溃、安全漏洞、可用性问题等。因此，即使软件已提供给最终用户，您也不应停止监控。您需要抽出一些时间，调查系统的性能、安全性、可用性和稳定性，以便在问题对用户产生影响之前发现并修正它们。
- en: From initial conception to final deployment and maintenance, this is what a
    release management process looks like.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 从最初的构想到最终的部署和维护，这就是发布管理过程的样子。
- en: Summary
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Now that we have arrived at the end of this chapter let’s quickly revisit the
    main takeaways from this lesson. You now know the meaning of release management
    and its history.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经到达本章的结尾，让我们快速回顾一下本课的主要要点。你现在已经了解了发布管理的含义及其历史。
- en: Understanding where you are in your release management process is vital. You
    should approach this from both a quantitative and qualitative perspective. Gathering
    some fundamental data, such as the average release timings, the kinds and priority
    of releases, the number of errors, and the number of delayed releases, is an important
    step in the quantitative analysis process. These are used to determine performance
    baselines as well as the present state of release management. In terms of the
    quality of the information, talk to the people who are involved in the release
    management process, particularly in the areas where development interacts with
    operations, and find out what their thoughts are. They will be able to point out
    realities that are not clearly reflected in the data and statistics.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 了解你在发布管理过程中所处的位置至关重要。你应该从定量和定性两个角度来审视这个问题。收集一些基本数据，例如平均发布时间、发布类型及优先级、错误数量和延迟发布的数量，是定量分析过程中的重要步骤。这些数据用于确定性能基准和发布管理的当前状态。在信息质量方面，与你的发布管理流程中相关的人员进行沟通，特别是在开发与运维交互的领域，了解他们的看法。他们能够指出数据和统计数字中未明确反映的实际情况。
- en: Establishing a regular release cycle leads to the creation of consistency, enabling
    you to gain control over your release management tasks and duties. Instead of
    focusing on trying to establish a culture right from the start, put lightweight
    release processes in place. Because of this, you are able to set up the infrastructure
    for releases at an earlier stage, test it, and make adjustments to it as required.
    Over the course of time, the procedures that are most effective will eventually
    become your organization’s standard. Following the completion of your initial
    research, you will be better positioned to initiate more stringent quality criteria
    and make improvements to efficiency. Eliminating downtime and testing for regressions
    are two ways to reduce the impact that releases have on your users. At that point,
    you can also begin to think about normalizing and automating procedures, such
    as testing and verification, which are both essential steps in the development
    process.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 建立常规的发布周期有助于创造一致性，使你能够掌控发布管理任务和职责。与其从一开始就专注于建立文化，不如先实施轻量级的发布流程。这样，你能够在早期阶段设置发布的基础设施，进行测试，并根据需要进行调整。随着时间的推移，最有效的流程最终会成为你组织的标准。在完成初步研究后，你将能更好地启动更严格的质量标准并提高效率。消除停机时间和回归测试是减少发布对用户影响的两种方式。到那时，你还可以开始考虑规范化和自动化流程，比如测试和验证，这两者都是开发过程中的关键步骤。
- en: It takes time for a truly collaborative culture of release management to mature,
    and it requires a well-managed infrastructure as a foundation on which to mature.
    You can nurture this culture by making investments in your team and investing
    in release management tools and approaches that enable people to take a holistic
    view of every phase of the release management process. Both of these types of
    investments will help you build a culture of excellence and make work more visible.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的协作文化在发布管理中需要时间来成熟，而且它需要一个良好管理的基础设施作为成熟的基础。你可以通过对团队的投资以及投资于发布管理工具和方法，来培养这种文化，使人们能够全面了解发布管理过程的每个阶段。这两种投资都将帮助你建立卓越的文化，并使工作更加可见。
- en: This concludes [*Chapter 2*](B21803_02.xhtml#_idTextAnchor036). In this chapter,
    we have learned what release management is from both a cultural and technical
    perspective. Then, we explored a brief history of release management and how the
    various models have originated over time. Finally, you’ve seen the standard six
    phases of release management that any model should have.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是[*第二章*](B21803_02.xhtml#_idTextAnchor036)的结束。在这一章中，我们从文化和技术两个角度学习了发布管理的定义。然后，我们简要回顾了发布管理的历史，以及不同模型如何随着时间的推移而诞生。最后，你看到了任何模型应该具备的六个标准发布管理阶段。
- en: In [*Chapter 3*](B21803_03.xhtml#_idTextAnchor051), we will dive deep into the
    mechanics of the most common release management Models. The significant point
    to make here is that it’s nearly impossible to fully appreciate the meaning of
    DevOps if you aren’t familiar with the release management models that came before
    it.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第3章*](B21803_03.xhtml#_idTextAnchor051)中，我们将深入探讨最常见的发布管理模型的机制。这里需要特别强调的是，如果你不了解DevOps之前的发布管理模型，那么几乎不可能完全理解DevOps的含义。
- en: Questions
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题，测试你对本章的理解：
- en: Which came first, the software development life cycle or the systems development
    life cycle?
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是软件开发生命周期先出现，还是系统开发生命周期先出现？
- en: What is the difference between the systems development life cycle and the software
    development life cycle?
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统开发生命周期和软件开发生命周期有什么区别？
- en: What year was the term software first coined, and who coined it?
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “软件”这一术语首次是在何时由谁提出的？
- en: Who is credited with drafting the first specification of the Waterfall release
    management model?
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 谁被认为是撰写第一个瀑布发布管理模型规范的人？
- en: Who is credited with coining the term Waterfall, and what year was it coined?
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 谁被认为是“瀑布模型”这一术语的创始人，并且这个术语是在什么年份提出的？
- en: What are the six standard phases of any release management model?
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何发布管理模型的六个标准阶段是什么？
- en: Who is credited with creating the DevOps methodology?
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 谁被认为是DevOps方法论的创始人？
- en: What year did the first DevOpsDays event take place and where?
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个DevOpsDays活动在哪一年举行，地点在哪里？
- en: What year did structured programming proliferate and become mainstream?
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结构化编程在哪一年普及并成为主流？
- en: What year was iterative and incremental software development first utilized?
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 迭代式和增量式软件开发在哪一年首次被使用？
