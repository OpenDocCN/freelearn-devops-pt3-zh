- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Understanding Key Performance Indicators (KPIs) for Your Production Service
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解生产服务的关键绩效指标（KPI）
- en: In the previous chapters, we looked at the core concepts of modern DevOps –
    **Continuous Integration** (**CI**) and **Continuous Deployment/Delivery** (**CD**).
    We also looked at various tools and techniques that can help us enable a mature
    and secure DevOps channel across our organization. In this rather theory-focused
    chapter, we’ll try to understand some **key performance indicators** (**KPIs**)
    for operating our application in production.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们讨论了现代DevOps的核心概念——**持续集成**（**CI**）和**持续部署/交付**（**CD**）。我们还探讨了各种工具和技术，这些工具和技术可以帮助我们在组织内实现一个成熟且安全的DevOps渠道。在这一章中，尽管重点是理论，我们将试图理解一些运营生产应用程序时的**关键绩效指标**（**KPI**）。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将讨论以下主要话题：
- en: Understanding the importance of reliability
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解可靠性的重要性
- en: SLOs, SLAs, and SLIs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务水平目标（SLO）、服务水平协议（SLA）和服务水平指标（SLI）
- en: Error budgets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误预算
- en: Recovery Time Objective (RPO) and Recovery Point Objective (RTO)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恢复时间目标（RPO）和恢复点目标（RTO）
- en: Running distributed applications in production
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在生产环境中运行分布式应用程序
- en: So, let’s get started!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们开始吧！
- en: Understanding the importance of reliability
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解可靠性的重要性
- en: Developing software is one thing, and running it in production is another. The
    reason behind such a disparity is that most development teams cannot simulate
    production conditions in non-production environments. Therefore, many bugs are
    uncovered when the software is already running in production. Most issues encountered
    are non-functional – for example, the services could not scale properly with additional
    traffic, the amount of resources assigned to the application was suboptimal, thereby
    crashing the site, and many more. These issues need to be managed to make the
    software more reliable.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 开发软件是一回事，而在生产环境中运行它是另一回事。这种差距的原因在于，大多数开发团队无法在非生产环境中模拟生产条件。因此，许多漏洞只有在软件已投入生产时才被发现。大多数遇到的问题都是非功能性问题——例如，服务可能无法随着额外的流量适当扩展，分配给应用程序的资源不足，导致网站崩溃，等等。这些问题需要得到管理，以提高软件的可靠性。
- en: 'To understand the importance of software reliability, let’s look at an example
    retail banking application. Software reliability is critically important for several
    reasons:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解软件可靠性的重要性，我们来看一个零售银行应用的例子。软件可靠性对于多个原因至关重要：
- en: '**User satisfaction**: Reliable software ensures a positive user experience.
    Users expect software to work as intended, and when it doesn’t, it can lead to
    frustration, loss of trust, and a poor reputation for the software or the organization
    behind it. For a bank’s retail customer, it might mean customers cannot do essential
    transactions and, therefore, may face hassles in payments and receipts, leading
    to a loss in user satisfaction.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户满意度**：可靠的软件能够确保良好的用户体验。用户希望软件能够按预期工作，而当它无法按预期工作时，可能会导致沮丧、失去信任以及软件或背后组织的声誉受损。对于银行的零售客户来说，这可能意味着客户无法进行必要的交易，因此可能会在支付和收款过程中遇到麻烦，导致用户满意度下降。'
- en: '**Business reputation**: Software failures can tarnish a company’s reputation
    and brand image. For our bank, if the issues are frequent, customers will look
    for other options, resulting in considerable churn and loss of business.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**商业声誉**：软件故障可能会损害公司的声誉和品牌形象。对于我们的银行来说，如果问题频繁出现，客户会寻找其他选择，导致客户流失和业务损失。'
- en: '**Financial impact**: Software failures can be costly. They can result in lost
    sales, customer support expenses, and even legal liabilities in cases where software
    failures cause harm or financial losses to users. This becomes especially critical
    for banking applications as customers'' money is involved. If transactions don’t
    happen in time, it can result in a loss of customer business, which will hurt
    the bank in the long run.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**财务影响**：软件故障可能会非常昂贵。它们可能导致销售损失、客户支持费用，甚至在软件故障导致用户损失或财务损害时，还可能引发法律责任。对于银行应用程序来说，特别关键的是，这涉及到客户的资金。如果交易未能及时完成，可能会导致客户流失，从长远来看，会对银行造成伤害。'
- en: '**Competitive advantage**: Reliable software can provide a competitive edge.
    Users are more likely to choose and stick with a bank with robust online banking
    software that consistently meets their needs and expectations.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**竞争优势**：可靠的软件可以提供竞争优势。用户更倾向于选择并坚持使用一款能持续满足他们需求和期望的银行在线银行软件。'
- en: '**Productivity and efficiency**: Within organizations, reliable software is
    essential for maintaining productivity. Imagine the pain that the customer support
    and front office staff would have in such a disruption! You would also need more
    resources to manage these issues, which can disrupt operations, leading to wasted
    time and resources.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产力与效率**：在组织内部，可靠的软件对保持生产力至关重要。试想一下，客户支持和前台工作人员在这种中断中的痛苦！你还需要更多资源来管理这些问题，这会干扰操作，导致时间和资源的浪费。'
- en: '**Security**: Reliable software is often more secure. Attackers can exploit
    vulnerabilities and bugs in unreliable software. In the case of a bank, security
    is of prime importance because any breach can result in direct financial impact
    and loss. Ensuring reliability is a fundamental part of cybersecurity.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：可靠的软件通常更安全。攻击者可以利用不可靠软件中的漏洞和错误。对于银行来说，安全性至关重要，因为任何安全漏洞都可能导致直接的财务损失。确保可靠性是网络安全的基础部分。'
- en: '**Compliance**: In some industries, especially banking, there are regulatory
    requirements related to software reliability. Failing to meet these requirements
    can result in legal and financial penalties.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合规性**：在一些行业，特别是银行业，有与软件可靠性相关的监管要求。未能满足这些要求可能导致法律和财务处罚。'
- en: '**Customer trust**: Trust is a critical factor in software usage, especially
    in the case of a banking application. Users must trust that their money and data
    will be handled securely and that the software will perform as expected. Software
    reliability is a key factor in building and maintaining this trust.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户信任**：信任是软件使用中的关键因素，尤其是在银行应用的情况下。用户必须相信他们的资金和数据会被安全处理，并且软件会按预期执行。软件可靠性是建立和维持这种信任的关键因素。'
- en: '**Maintainability**: Reliable software is typically easier to maintain. When
    software is unreliable, fixing bugs and updating becomes more challenging, potentially
    leading to a downward spiral of increasing unreliability.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可维护性**：可靠的软件通常更易于维护。当软件不可靠时，修复漏洞和更新变得更加困难，这可能导致可靠性不断下降的恶性循环。'
- en: '**Scaling and growth**: As software usage grows, reliability becomes even more
    critical. Software that works well for a small user base may struggle to meet
    the demands of a larger user base without proper reliability measures in place.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展性与增长**：随着软件使用量的增加，可靠性变得更加关键。适用于小规模用户群体的软件，在没有适当的可靠性措施的情况下，可能难以满足大规模用户群体的需求。'
- en: In summary, software reliability is not just a technical concern; it has wide-reaching
    implications for user satisfaction, business success, and even legal and financial
    aspects. Therefore, investing in ensuring the reliability of software is a prudent
    and strategic decision for organizations.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，软件可靠性不仅仅是一个技术问题；它对用户满意度、商业成功甚至法律和财务方面都有深远的影响。因此，投资确保软件可靠性是组织的一项明智和战略性的决策。
- en: Historically, running and managing software in production was the job of the
    Ops team, and most organizations still use it. The Ops team comprises a bunch
    of **system administrators** (**SysAdmins**) who must deal with the day-to-day
    issues of running the software in production. They implement scaling and fault
    tolerance with software, patch and upgrade software, work on support tickets,
    and keep the systems running so the software application functions well.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，运行和管理生产中的软件是运维团队的工作，至今大多数组织仍然如此。运维团队由一群**系统管理员**（**SysAdmins**）组成，他们必须处理运行生产中软件的日常问题。他们通过软件实现扩展和容错，修补和升级软件，处理支持票务，保持系统运行，确保软件应用程序的顺利运行。
- en: We’ve all experienced the divide between Dev and Ops teams, each with its own
    goals, rules, and priorities. Often, they found themselves at odds because what
    benefited Dev (software changes and rapid releases) created challenges for Ops
    (stability and reliability).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都经历过开发和运维团队之间的鸿沟，每个团队都有自己的目标、规则和优先事项。通常，他们会因为开发团队受益的东西（软件更改和快速发布）给运维团队带来挑战（稳定性和可靠性）而发生冲突。
- en: However, the emergence of DevOps has changed this dynamic. In the words of Andrew
    Shafer and Patrick Debois, DevOps is a culture and practice in software engineering
    aimed at bridging the gap between software development and operations.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，DevOps 的出现改变了这一动态。用 Andrew Shafer 和 Patrick Debois 的话说，DevOps 是一种文化和实践，旨在弥合软件开发与运维之间的差距。
- en: Looking at DevOps from an Ops perspective, Google came up with **site reliability
    engineering** (**SRE**) as an approach that embodies DevOps principles. It encourages
    shared ownership, the use of common tools and practices, and a commitment to learning
    from failures to prevent recurring issues. The primary objective is to develop
    and maintain a dependable application without sacrificing the speed of delivery
    – a balance that was once thought contradictory (that is, *create better* *software
    faster*).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从运维的角度看待 DevOps，Google 提出了**网站可靠性工程**（**SRE**）作为一种体现 DevOps 原则的方法。它鼓励共享所有权，使用共同的工具和实践，并承诺从失败中学习，以防止问题反复出现。其主要目标是开发和维护一个可靠的应用程序，同时不牺牲交付速度——这一平衡曾被认为是矛盾的（即，*更快地创建更好的软件*）。
- en: The idea of SRE is a novel thought about what would happen if we allowed software
    engineers to run the production environment. So, Google devised the following
    approach for running its Ops team.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: SRE 的理念是关于如果允许软件工程师来管理生产环境，会发生什么的新思考。因此，Google 为其运维团队设计了以下方法。
- en: 'For Google, an ideal candidate for joining the SRE team should exhibit two
    key characteristics:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Google 来说，加入 SRE 团队的理想候选人应该具备两个关键特征：
- en: Firstly, they quickly become disinterested in manual tasks and seek opportunities
    to automate them
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，他们很快对手动任务失去兴趣，寻求将其自动化的机会。
- en: Secondly, they possess the requisite skills to develop software solutions, even
    when faced with complex challenges
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，他们具备开发软件解决方案所需的技能，即使面临复杂的挑战。
- en: Additionally, SREs should share an academic and intellectual background with
    the broader development organization. Essentially, SRE work, traditionally within
    the purview of operations teams, is carried out by engineers with strong software
    expertise. This strategy hinges on the natural inclination and capability of these
    engineers to design and implement automation solutions, thus reducing reliance
    on manual labor.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，SRE（网站可靠性工程）人员应与更广泛的开发团队共享学术和智力背景。本质上，SRE 工作，传统上由运维团队承担，是由具有强大软件专业知识的工程师来完成的。这一策略依赖于这些工程师天生的倾向和能力，设计并实施自动化解决方案，从而减少对人工劳动的依赖。
- en: By design, SRE teams maintain a strong engineering focus. Without continuous
    engineering efforts, the operational workload escalates, necessitating an expansion
    of the team to manage the increasing demands. In contrast, a conventional operations-centric
    group scales in direct proportion to the growth of the service. If the services
    they support thrive, operational demands surge with increased traffic, compelling
    the hiring of additional personnel to perform repetitive tasks.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从设计上讲，SRE 团队保持着强大的工程聚焦。如果没有持续的工程努力，操作工作量会急剧增加，迫使团队扩大以应对日益增长的需求。相比之下，传统的以运维为中心的团队会直接按照服务的增长来扩展。如果他们支持的服务繁荣发展，操作需求将随流量增加而激增，迫使雇佣更多人员来执行重复性工作。
- en: To avert this scenario, the team responsible for service management must incorporate
    coding into their responsibilities; otherwise, they risk becoming overwhelmed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，负责服务管理的团队必须将编码纳入其职责范围；否则，他们将面临被淹没的风险。
- en: Accordingly, Google establishes a 50% upper limit on the aggregate “Ops” work
    allocated to all SREs, encompassing activities such as handling tickets, on-call
    duties, and manual tasks. This constraint guarantees that SRE teams allocate a
    substantial portion of their schedules to enhancing the stability and functionality
    of the service. While this limit serves as an upper bound, the ideal outcome is
    that, over time, SREs carry minimal operational loads and primarily engage in
    development endeavors as the service evolves to a self-sustaining state. Google’s
    objective is to create systems that are not merely automated but inherently self-regulating.
    However, practical considerations such as scaling and introducing new features
    continually challenge SREs.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Google 为分配给所有 SRE 的总“运维”工作设定了 50% 的上限，包括处理工单、值班任务和手动工作等活动。这个限制保证了 SRE 团队将大量时间用于提升服务的稳定性和功能性。虽然这个上限作为一个上界存在，但理想的结果是，随着服务逐步发展为自我维持的状态，SRE
    承担的操作性工作量最小化，主要从事开发工作。Google 的目标是创建不仅仅是自动化的系统，而是固有的自我调节系统。然而，实际问题如扩展和引入新功能持续对
    SRE 提出挑战。
- en: SREs are meticulous in their approach, relying on measurable metrics to track
    progress toward specific goals. For instance, stating that a website is *running
    slowly* is vague and unhelpful in an engineering context. However, declaring that
    the 95th percentile of response time has exceeded the **service-level objective**
    (**SLO**) by 10% provides precise information. SREs also focus on reducing repetitive
    tasks, known as **toil**, by automating them to prevent burnout. Now, let’s look
    at some of the key SRE performance indicators.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: SRE 在其方法上非常细致，依赖可衡量的指标来跟踪向特定目标的进展。例如，简单地说一个网站*运行缓慢*在工程背景下是模糊且无帮助的。然而，声明响应时间的第
    95 百分位已超出**服务级目标**（**SLO**）10%则提供了精确的信息。SRE 还专注于通过自动化减少重复性任务，这些任务被称为**劳累**，以防止倦怠。现在，让我们来看看一些关键的
    SRE 性能指标。
- en: Understanding SLIs, SLOs, and SLAs
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 SLI、SLO 和 SLA
- en: 'In the realm of site reliability, three crucial parameters guide SREs: the
    **indicators of availability** – **service-level indicators** (**SLIs**), the
    **definition of availability** –SLOs, and the **consequences of unavailability**
    – **service-level agreements** (**SLAs**). Let’s start by exploring SLIs in detail.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在网站可靠性领域，有三个关键参数指导 SRE：**可用性指标** —— **服务级指标**（**SLI**），**可用性定义** —— SLO，以及**不可用的后果**
    —— **服务级协议**（**SLA**）。让我们首先详细探索 SLI。
- en: SLIs
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SLI
- en: SLIs serve as quantifiable reliability metrics. Google defines them as “*carefully
    defined quantitative measures of some aspect of the level of service provided.*”
    Common examples include request latency, failure rate, and data throughput. SLIs
    are specific to user journeys, which are sequences of actions users perform to
    achieve specific goals. For instance, a user journey for our sample Blog App might
    involve creating a new blog post.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: SLI 作为可量化的可靠性指标。谷歌将其定义为“*仔细定义的某个服务水平方面的定量衡量标准*”。常见的例子包括请求延迟、失败率和数据吞吐量。SLI 特定于用户旅程，即用户为实现特定目标而执行的一系列操作。例如，我们示例中的博客应用的用户旅程可能包括创建一篇新的博客文章。
- en: 'Google, the original advocate of SRE, has identified four golden signals that
    apply to most user journeys:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌，作为 SRE 的初创倡导者，已确定了四个黄金信号，适用于大多数用户旅程：
- en: '**Latency**: This measures the time it takes for your service to respond to
    user requests'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**延迟**：衡量服务响应用户请求所需的时间'
- en: '**Errors**: This indicates the percentage of failed requests, highlighting
    issues in service reliability'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误**：表示失败请求的百分比，突显了服务可靠性的问题'
- en: '**Traffic**: Traffic represents the demand directed toward your service, reflecting
    its usage'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流量**：流量代表指向你服务的需求，反映了服务的使用情况'
- en: '**Saturation**: Saturation assesses how fully your infrastructure components
    are utilized'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**饱和度**：饱和度评估你的基础设施组件的使用情况'
- en: 'One recommended approach by Google to calculate SLIs is by determining the
    ratio of good events to valid events:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌推荐的一种计算 SLI 的方法是通过确定良好事件与有效事件的比率：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A perfect SLI score of 100 implies everything functions correctly, while a score
    of 0 signifies widespread issues.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 完美的 SLI 得分为 100，意味着一切正常，而得分为 0 则表示存在广泛的问题。
- en: A valuable SLI should align closely with the user experience. For example, a
    lower SLI value should correspond to decreased customer satisfaction. If this
    alignment is absent, the SLI may not provide meaningful insights or be worth measuring.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有价值的 SLI 应该与用户体验紧密对齐。例如，较低的 SLI 值应与客户满意度下降相对应。如果这种对齐缺失，则该 SLI 可能无法提供有意义的见解或不值得衡量。
- en: 'Let’s look at the following figure to understand this better:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下图形更好地理解这一点：
- en: '![Figure 14.1 – Good versus bad SLI](img/B19877_14_1.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.1 – 好的与不好的 SLI](img/B19877_14_1.jpg)'
- en: Figure 14.1 – Good versus bad SLI
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.1 – 好的与不好的 SLI
- en: As we can see, the CPU Utilisation SLI does not reflect customer satisfaction
    in any way; that is, there is no direct correlation between increasing CPU Utilisation
    and decreased customer satisfaction except after it crosses the 80% threshold.
    In contrast, the Latency SLI directly correlates with customer satisfaction, which
    reduces with increasing latency and significantly after the 300ms and 500ms levels.
    Therefore, it is a good idea to use Latency as an SLI over CPU Utilization.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，CPU 使用率 SLI 并不直接反映客户满意度；换句话说，除非 CPU 使用率超过 80% 阈值，否则增加 CPU 使用率与客户满意度下降之间没有直接关系。相比之下，延迟
    SLI 与客户满意度直接相关，随着延迟的增加，客户满意度下降，特别是在 300ms 和 500ms 级别之后。因此，使用延迟作为 SLI 比使用 CPU 使用率更为合适。
- en: It’s also advisable to limit the number of SLIs to a manageable quantity. Too
    many SLIs can lead to team confusion and trigger numerous false alarms. It’s best
    to focus on four or five metrics directly linked to customer satisfaction. For
    instance, instead of monitoring CPU and memory usage, prioritize metrics such
    as request latency and error rate.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，建议将SLI的数量限制在一个可管理的范围内。SLI过多会导致团队混乱，并引发大量误报。最好专注于四个或五个与客户满意度直接相关的指标。例如，与其监控CPU和内存使用情况，不如优先考虑请求延迟和错误率等指标。
- en: Furthermore, prioritizing user journeys is essential, giving higher importance
    to journeys that significantly impact customers and lower importance to those
    with less of a customer impact. For example, ensuring a seamless create and update
    post experience in our Blog App is more critical than the reviews and ratings
    service. SLIs alone do not make much sense as they are just measurable indicators.
    We need to set objectives for SLIs. So, let’s look at SLOs.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，优先考虑用户旅程至关重要，应该给予对客户影响较大的旅程更高的优先级，而对客户影响较小的旅程则给予较低的优先级。例如，确保我们的博客应用中创建和更新帖子体验的流畅性，比评论和评分服务更为关键。仅凭SLI（服务级别指标）并没有太多意义，因为它们只是可衡量的指标。我们需要为SLI设定目标。因此，让我们来看看SLO（服务级别目标）。
- en: SLOs
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SLOs
- en: Google’s definition of SLOs states that they “*establish a target level for
    the reliability of your service.*” They specify the percentage of compliance with
    SLIs required to consider your site reliable. SLOs are formulated by combining
    one or more SLIs.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌对SLO的定义指出，它们“*为你的服务可靠性设定了目标水平*”。它们指定了考虑你的网站是否可靠所需遵循的SLI合规百分比。SLO是通过结合一个或多个SLI来制定的。
- en: For instance, if you have an SLI that mandates *request latency to remain below
    500ms within the last 15 minutes with a 95th percentile measurement*, an SLO would
    necessitate *the SLI to be met 99% of the time for a* *99% SLO*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你有一个SLI，要求*在过去15分钟内请求延迟保持低于500毫秒，且按95百分位测量*，那么一个SLO就需要*在99%的时间内满足该SLI，以实现*
    *99%的SLO*。
- en: While every organization aims for 100% reliability, setting a 100% SLO is not
    a practical goal. A system with a 100% SLO tends to be costly, technically complex,
    and often unnecessary for most applications to be deemed acceptable by their users.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管每个组织都追求100%的可靠性，但设定100%的SLO并不是一个实际的目标。拥有100%SLO的系统往往成本高昂、技术复杂，并且对于大多数应用程序而言，用户接受度通常不需要如此高的可靠性。
- en: In the realm of software services and systems, the pursuit of 100% availability
    is generally misguided because users cannot feel any practical distinction between
    a system that is 100% available and one that is 99.999% available. Multiple intermediary
    systems exist between the user and the service, such as their personal computer,
    home Wi-Fi, **Internet Service Provider** (**ISP**), and the power grid, and these
    collectively exhibit availability far lower than 99.999%. Consequently, the negligible
    difference between 99.999% and 100% availability becomes indistinguishable amidst
    the background noise of other sources of unavailability. Thus, investing substantial
    effort to attain that last 0.001% availability yields no noticeable benefit to
    the end user.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件服务和系统领域，追求100%的可用性通常是错误的，因为用户无法在一个100%可用的系统和一个99.999%可用的系统之间感知到任何实际差异。用户与服务之间存在多个中间系统，如他们的个人电脑、家庭Wi-Fi、**互联网服务提供商**（**ISP**）和电力网，这些系统的可用性远低于99.999%。因此，99.999%与100%之间的微小差异在其他不可用来源的背景噪声中变得难以察觉。因此，投入大量精力去实现最后的0.001%的可用性，对最终用户没有明显的好处。
- en: 'In light of this understanding, a question arises: if 100% is an inappropriate
    reliability target, what constitutes the right reliability target for a system?
    Interestingly, this is not a technical inquiry but rather a product-related one,
    necessitating consideration of the following factors:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这一理解，一个问题浮现：如果100%不是一个合适的可靠性目标，那么系统的正确可靠性目标是什么？有趣的是，这并不是一个技术性的问题，而是一个与产品相关的问题，需要考虑以下几个因素：
- en: '**User satisfaction**: Determining the level of availability that aligns with
    user contentment, considering their typical usage patterns and expectations'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户满意度**：确定与用户满意度相符的可用性水平，考虑用户的典型使用模式和期望。'
- en: '**Alternatives**: Evaluating the availability of alternatives available to
    dissatisfied users, should they seek alternatives due to dissatisfaction with
    the product’s current level of availability'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**替代方案**：评估不满意用户在产品当前可用性水平不满意时是否会寻找替代方案，以及这些替代方案的可用性。'
- en: '**User behavior**: Examining how users’ utilization of the product varies at
    different availability levels, recognizing that user behavior may change in response
    to fluctuations in availability'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户行为**：研究用户在不同可用性水平下对产品的使用变化，认识到用户行为可能会因可用性的波动而发生变化。'
- en: Moreover, a completely reliable application leaves no room for the introduction
    of new features, as any new addition has the potential to disrupt the existing
    service. Therefore, some margin for error must be built into your SLO.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，一个完全可靠的应用程序不留有引入新功能的空间，因为任何新的添加都有可能干扰现有服务。因此，必须在你的SLO中留出一定的容错空间。
- en: SLOs represent internal objectives that require consensus among the team and
    internal stakeholders, including developers, product managers, SREs, and CTOs.
    They necessitate the commitment of the entire organization. Not meeting an SLO
    does not carry explicit or implicit penalties.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: SLO代表内部目标，需要团队和内部利益相关者（包括开发人员、产品经理、SRE和CTO）之间达成共识。它们需要整个组织的承诺。未能满足SLO不会带来显式或隐式的惩罚。
- en: For example, a customer cannot claim damages if an SLO is not met, but it may
    lead to dissatisfaction within organizational leadership. This does not imply
    that failing to meet an SLO should be consequence-free. Falling short of an SLO
    typically results in fewer changes and reduced feature development, potentially
    indicating a decline in quality and increased emphasis on the development and
    testing functions.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果未满足SLO，客户不能要求赔偿，但这可能会导致组织领导层的不满。这并不意味着未能满足SLO就应该没有后果。未达SLO通常会导致较少的变化和减少的功能开发，可能表明质量下降，且更加注重开发和测试职能。
- en: SLOs should be realistic, with the team actively working to meet them. They
    should align with the customer experience, ensuring that if the service complies
    with the SLO, customers do not perceive any service quality issues. If performance
    falls below the defined SLOs, it may affect the customer experience, but not to
    the extent that customers raise support tickets.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: SLO应当是现实可行的，团队应积极努力达成它们。它们应与客户体验保持一致，确保当服务符合SLO时，客户不会察觉到任何服务质量问题。如果性能低于定义的SLO，可能会影响客户体验，但不会到客户提出支持工单的程度。
- en: 'Some organizations implement two types of SLOs: **achievable** and **aspirational**.
    The achievable SLO represents a target the entire team should reach, while the
    aspirational SLO sets a higher goal and is part of an ongoing improvement process.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一些组织实施两种类型的SLO：**可实现的**和**理想的**。可实现的SLO代表整个团队应该达到的目标，而理想的SLO设定了更高的目标，是持续改进过程的一部分。
- en: SLAs
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SLA
- en: According to Google, SLAs are “*formal or implicit agreements with your users
    that outline the repercussions of meeting (or failing to meet) the* *contained
    SLOs.*”
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Google的说法，SLA是“*与用户的正式或隐式协议，概述了满足（或未能满足）所包含SLO时的后果。*”
- en: These agreements are of a more structured nature and represent business-level
    commitments made to customers, specifying the actions that will be taken if the
    organization fails to fulfill the SLA. SLAs can be either explicit or implicit.
    An explicit SLA entails well-defined consequences, often in terms of service credits,
    in case the expected reliability is not achieved. Implicit SLAs are evaluated
    in terms of potential damage to the organization’s reputation and the likelihood
    of customers switching to alternatives.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这些协议具有更为结构化的性质，代表了对客户做出的业务层级承诺，明确了如果组织未能履行SLA时将采取的措施。SLA可以是显式的，也可以是隐式的。显式SLA涉及明确定义的后果，通常是通过服务信用的方式来补偿未达预期可靠性时的损失。隐式SLA则是通过评估对组织声誉的潜在损害和客户转向替代方案的可能性来进行评估。
- en: SLAs are typically established at a level that is sufficient to prevent customers
    from seeking alternatives, and consequently, they tend to have lower thresholds
    compared to SLOs. For instance, when considering the request latency SLI, the
    SLO might be defined at a *300ms* SLI value, while the SLA could be set at a *500ms*
    SLI value. This distinction arises from the fact that SLOs are internal targets
    related to reliability, whereas SLAs are external commitments. By striving to
    meet the SLO, the team automatically satisfies the SLA, providing an added layer
    of protection for the organization in case of unexpected failures.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: SLA 通常设定在足以防止客户寻找替代方案的水平，因此，它们的阈值通常比 SLO 低。例如，在考虑请求延迟 SLI 时，SLO 可能定义为 *300ms*
    的 SLI 值，而 SLA 可能设定为 *500ms* 的 SLI 值。这种区别源于 SLO 是与可靠性相关的内部目标，而 SLA 则是外部承诺。通过努力实现
    SLO，团队自动满足 SLA，为组织提供了一层额外的保护，以防出现意外故障。
- en: 'To understand the correlation between SLIs, SLOs, and SLAs, let’s look at the
    following figure:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解 SLIs、SLOs 和 SLAs 之间的关系，我们来看下图：
- en: '![Figure 14.2 – SLIs, SLOs, and SLAs](img/B19877_14_2.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.2 – SLIs、SLOs 和 SLAs](img/B19877_14_2.jpg)'
- en: Figure 14.2 – SLIs, SLOs, and SLAs
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.2 – SLIs、SLOs 和 SLAs
- en: This figure shows how customer experience changes with the level of latency.
    If we keep the latency SLO at *300ms* and meet it, everything is good! Anything
    between *300ms* to *500ms* and the customer starts experiencing some degradation
    in performance, but that is not enough for them to lose their cool and start raising
    support tickets. Therefore, keeping the SLA at *500ms* is a good strategy. As
    soon we cross the *500ms* threshold, unhappiness sinks in, and the customer starts
    raising support tickets for service slowness. If things cross the *10s* mark,
    then it is a cause of worry for your Ops team, and *Everything is burning* at
    this stage. However, as we know, the wording of SLOs is slightly different from
    what we imagine here. When we say that we have an SLO for *300ms* latency, it
    does not mean anything. A realistic SLO for an SLI mandating *request latency
    to remain below 300ms within the last 15 minutes with a 95th percentile measurement*
    would be to meet *the SLI x% of the time*. What should that x be? Should it be
    *99%*, or should it be *95%*? How do we decide this number? Well, for that, we’ll
    have to look at **error budgets**.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这张图展示了随着延迟水平变化，客户体验如何变化。如果我们将延迟 SLO 保持在 *300ms* 并满足它，一切正常！在 *300ms* 到 *500ms*
    之间，客户开始感受到性能下降，但这不足以让他们失去冷静并开始提交支持工单。因此，将 SLA 设定为 *500ms* 是一个不错的策略。一旦超越 *500ms*
    阈值，不满情绪就会出现，客户开始因服务延迟而提交支持工单。如果延迟超过 *10s*，那么这将成为运维团队的关注问题，*一切都在着火*。然而，正如我们所知，SLO
    的措辞与我们在此想象的略有不同。当我们说我们有一个 *300ms* 延迟的 SLO 时，这并不意味着什么。一个现实的 SLO 对于要求 *请求延迟在过去 15
    分钟内保持低于 300ms 且按 95 分位测量* 的 SLI 来说，就是要在 *x% 的时间内* 达到 SLI。那么这个 x 应该是多少呢？应该是 *99%*，还是
    *95%*？我们该如何决定这个数字呢？要回答这个问题，我们需要看看 **误差预算**。
- en: Error budgets
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 误差预算
- en: As defined by Liz Fong-Jones and Seth Vargo, error budgets represent “*a quantitative
    measure shared between product and SRE teams to balance innovation* *and stability.*”
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 Liz Fong-Jones 和 Seth Vargo 的定义，误差预算表示 “*产品团队和 SRE 团队之间共享的量化衡量标准，用于平衡创新*
    *和稳定性。*”
- en: In simpler terms, an error budget quantifies the level of risk that can be taken
    to introduce new features, conduct service maintenance, perform routine enhancements,
    manage network and infrastructure disruptions, and respond to unforeseen situations.
    Typically, the monitoring system measures the uptime of your service, while SLOs
    establish the target you aim to achieve. The error budget is the difference between
    these two metrics and represents the time available to deploy new releases, provided
    it falls within the error budget limits.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，误差预算量化了在引入新功能、进行服务维护、执行例行改进、管理网络和基础设施中断以及应对突发情况时，可以承受的风险水平。通常，监控系统会测量服务的正常运行时间，而
    SLO 则设定了你希望达到的目标。误差预算是这两个指标之间的差值，表示在误差预算范围内可以用于发布新版本的时间。
- en: 'This is precisely why a *100%* SLO is not usually set initially. Error budgets
    serve the crucial purpose of helping teams strike a balance between innovation
    and reliability. The rationale behind error budgets lies in the SRE perspective
    that failures are a natural and expected part of system operations. Consequently,
    whenever a new change is introduced into production, there is an inherent risk
    of disrupting the service. Therefore, a higher error budget allows for introducing
    more features:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是为什么通常不会一开始就设定*100%*的 SLO。错误预算起着至关重要的作用，帮助团队在创新与可靠性之间找到平衡。错误预算的基本理念来源于 SRE
    视角，即故障是系统操作中自然且预期的一部分。因此，每当将新变化引入生产环境时，总会存在破坏服务的风险。因此，较高的错误预算允许引入更多的功能：
- en: '[PRE1]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For instance, if your SLO is *99%*, your error budget would be *1%*. If you
    calculate this over a month, assuming *30 days/month* and *24 hours/day*, you
    will have a *7.2-hour* error budget to allocate for maintenance or other activities.
    For a *99.9%* SLO, the error budget would be *43.2 minutes* per month, and for
    a *99.99%* SLO, it would be *4.32 minutes* monthly. You can refer to the following
    figure for more details:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你的 SLO 是*99%*，那么你的错误预算将是*1%*。如果你将此计算在一个月内，假设*30 天/月*和*24 小时/天*，那么你将有一个*7.2
    小时*的错误预算，用于维护或其他活动。对于*99.9%*的 SLO，错误预算为每月*43.2 分钟*，而对于*99.99%*的 SLO，则为每月*4.32
    分钟*。你可以参考下图获取更多细节：
- en: '![Figure 14.3 – Error budgets versus SLOs](img/B19877_14_3.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.3 – 错误预算与 SLO 比较](img/B19877_14_3.jpg)'
- en: Figure 14.3 – Error budgets versus SLOs
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.3 – 错误预算与 SLO 比较
- en: These periods represent actual downtime, but if your services have redundancy,
    high availability measures, and disaster recovery plans in place, you can potentially
    extend these durations because the service remains operational while you patch
    or address issues with one server.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这些时间段表示实际的停机时间，但如果你的服务有冗余、高可用性措施和灾难恢复计划，那么你可以将这些时长延长，因为服务仍然可以正常运行，同时你可以修补或处理某一台服务器的问题。
- en: Now, whether you want to keep on adding *9s* within your SLO or aim for a lower
    number would depend on your end users, business criticality, and availability
    requirements. A higher SLO is more costly and requires more resources than a lower
    SLO. However, sometimes, just architecting your application correctly can help
    you get to a better SLO target.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是否想在 SLO 中继续增加*9*，还是追求一个较低的数字，取决于你的终端用户、业务重要性和可用性需求。较高的 SLO 比较低的 SLO 更昂贵，且需要更多资源。然而，有时仅仅正确架构你的应用程序就能帮助你达到更好的
    SLO 目标。
- en: Now that we understand SLOs, SLIs, SLAs, and error budgets, let’s talk about
    disaster recovery.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 SLO、SLI、SLA 和错误预算，让我们谈谈灾难恢复。
- en: Disaster recovery, RTO, and RPO
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 灾难恢复、RTO 和 RPO
- en: '**Disaster recovery** is a comprehensive strategy that’s designed to ensure
    an organization’s resilience in the face of unexpected, disruptive events, such
    as natural disasters, cyberattacks, or system failures. It involves the planning,
    policies, procedures, and technologies necessary to quickly and effectively restore
    critical IT systems, data, and operations to a functional state. A well-implemented
    disaster recovery plan enables businesses to minimize downtime, data loss, and
    financial impact, helping them maintain business continuity, protect their reputation,
    and swiftly recover from adversities, ultimately safeguarding their long-term
    success.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**灾难恢复**是一项综合策略，旨在确保组织在面对突发、破坏性事件（如自然灾害、网络攻击或系统故障）时的韧性。它涉及到必要的规划、政策、程序和技术，以快速有效地恢复关键的
    IT 系统、数据和运营至正常状态。实施良好的灾难恢复计划能帮助企业最大限度地减少停机时间、数据丢失和财务影响，确保业务连续性，保护声誉，并迅速从逆境中恢复，从而最终保障企业的长期成功。'
- en: Every organization incorporates disaster recovery to varying degrees. Some opt
    for periodic backups or snapshots, while others invest in creating failover replicas
    of their production environment. Although failover replicas offer increased resilience,
    they come at the expense of doubling infrastructure costs. The choice of disaster
    recovery mechanism that an organization adopts hinges on two crucial KPIs – **Recovery
    Time Objective** (**RTO)** and **Recovery Point** **Objective** (**RPO)**.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 每个组织在不同程度上都包含了灾难恢复。有些选择定期备份或快照，而其他组织则投资于创建生产环境的故障切换副本。尽管故障切换副本提供了更高的韧性，但也会导致基础设施成本翻倍。组织采用的灾难恢复机制选择，依赖于两个关键的
    KPI —— **恢复时间目标**（**RTO**）和 **恢复点目标**（**RPO**）。
- en: RTO and RPO are crucial metrics in disaster recovery and business continuity
    planning. RTO represents the maximum acceptable downtime for a system or application,
    specifying the time within which it should be restored after a disruption. It
    quantifies the acceptable duration of service unavailability and drives the urgency
    of recovery efforts.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: RTO 和 RPO 是灾难恢复和业务连续性规划中的关键指标。RTO 表示系统或应用程序的最大可接受停机时间，指定在发生中断后，系统应该在多长时间内恢复。它量化了服务不可用的可接受时长，并推动恢复工作的紧迫性。
- en: 'On the other hand, RPO defines the maximum tolerable data loss in the event
    of a disaster. It signifies the point in time to which data must be recovered
    to ensure business continuity. Achieving a low RPO means that data loss is minimized,
    often by frequent data backups and replication. The following figure explains
    RTO and RPO beautifully:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，RPO 定义了在灾难发生时，最大可容忍的数据丢失量。它标示了数据必须恢复到的时间点，以确保业务连续性。实现较低的 RPO 意味着数据丢失最小化，通常通过频繁的数据备份和复制来实现。下图很好地解释了
    RTO 和 RPO：
- en: '![Figure 14.4 – RTO and RPO](img/B19877_14_4.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.4 – RTO 和 RPO](img/B19877_14_4.jpg)'
- en: Figure 14.4 – RTO and RPO
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.4 – RTO 和 RPO
- en: A shorter RTO and RPO demand a more robust disaster recovery plan, which, in
    turn, results in higher costs for both infrastructure and human resources. Therefore,
    balancing RTO and RPO is essential to ensure a resilient IT infrastructure. Organizations
    must align their recovery strategies with these objectives to minimize downtime
    and data loss, thereby safeguarding business operations and data integrity during
    unforeseen disruptions.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 较短的 RTO 和 RPO 需要一个更强大的灾难恢复计划，这将导致更高的基础设施和人力资源成本。因此，平衡 RTO 和 RPO 对于确保一个有韧性的 IT
    基础设施至关重要。组织必须将其恢复策略与这些目标对齐，以最小化停机时间和数据丢失，从而在不可预见的中断期间保护业务运营和数据完整性。
- en: Running distributed applications in production
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行分布式应用程序于生产环境中
- en: So far, we’ve been discussing KPIs for running an application in production,
    taking inspiration from SRE principles. Now, let’s understand how we will put
    these thoughts in a single place to run a distributed application in production.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在讨论运行应用程序于生产环境中的 KPI，并从 SRE 原则中获得灵感。现在，让我们理解如何将这些思路集中到一个地方，以便运行分布式应用程序于生产环境中。
- en: A **distributed application** or a **microservice** is inherently different
    from a monolith. While managing a monolith revolves around ensuring all operational
    aspects of one application, the complexity increases manyfold with microservices.
    Therefore, we should take a different approach to it.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**分布式应用程序** 或 **微服务** 与单体应用本质上不同。管理单体应用的工作是确保一个应用的所有操作方面，而随着微服务的出现，复杂性呈指数级增长。因此，我们应该采取不同的方式来处理它。'
- en: 'From the perspective of SRE, running a distributed application in production
    entails focusing on ensuring the application’s *reliability*, *scalability*, and
    *performance*. Here’s how SREs approach this task:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 从 SRE 的角度来看，运行分布式应用程序于生产环境中意味着专注于确保应用程序的 *可靠性*、*可扩展性* 和 *性能*。以下是 SRE 如何处理这一任务：
- en: '**SLOs**: SREs begin by defining clear SLOs that outline the desired level
    of reliability for the distributed application. SLOs specify the acceptable levels
    of *latency*, *error rates*, and *availability*. These SLOs are crucial in guiding
    the team’s efforts and in determining whether the system is meeting its reliability
    goals.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SLO**：SRE 从定义明确的 SLO 开始，SLO 规定了分布式应用程序所需的可靠性水平。SLO 指定了可接受的 *延迟*、*错误率* 和 *可用性*
    水平。这些 SLO 在指导团队的工作以及判断系统是否达到了其可靠性目标方面起着至关重要的作用。'
- en: '**SLIs**: SREs establish SLIs, which are quantifiable metrics that are used
    to measure the reliability of the application. These metrics could include response
    times, error rates, and other performance indicators. SLIs provide a concrete
    way to assess whether the application meets its SLOs.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SLI**：SRE 会建立 SLI，SLI 是用于衡量应用程序可靠性的可量化指标。这些指标可能包括响应时间、错误率和其他性能指标。SLI 提供了一种具体的方法来评估应用程序是否达到了其
    SLO。'
- en: '**Error budgets**: Error budgets are a key concept in SRE. They represent the
    permissible amount of downtime or errors that can occur before the SLOs are violated.
    SREs use error budgets to strike a balance between reliability and innovation.
    If the error budget is exhausted, it may necessitate a focus on stability and
    reliability over introducing new features.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误预算**：错误预算是 SRE 中的一个关键概念。它们表示在违反 SLO（服务级别目标）之前，允许发生的停机或错误的最大数量。SRE 通过错误预算来平衡可靠性和创新。如果错误预算用尽，可能需要将重点放在稳定性和可靠性上，而不是推出新特性。'
- en: '**Monitoring and alerting**: SREs implement robust monitoring and alerting
    systems to continuously track the application’s performance and health. They set
    up alerts based on SLIs and SLOs, enabling them to respond proactively to incidents
    or deviations from desired performance levels. In the realm of distributed applications,
    using a service mesh such as **Istio** or **Linkerd** can help. They help you
    visualize parts of your application through a single pane of glass and allow you
    to monitor your application and alert on it with ease.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控和警报**：SRE实施强大的监控和警报系统，持续跟踪应用程序的性能和健康状况。他们根据服务级指标（SLIs）和服务级目标（SLOs）设置警报，使他们能够主动响应事件或性能水平的偏差。在分布式应用领域，使用如**Istio**或**Linkerd**的服务网格可以提供帮助。它们帮助你通过单一视图来可视化应用程序的各个部分，并让你轻松监控应用程序并发出警报。'
- en: '**Capacity planning**: SREs ensure that the infrastructure supporting the distributed
    application can handle the expected load and traffic. They perform capacity planning
    exercises to scale resources as needed, preventing performance bottlenecks during
    traffic spikes. With modern public cloud platforms, automating scalability with
    traffic is all the more easy to implement, especially with distributed applications.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容量规划**：SRE确保支撑分布式应用程序的基础设施能够应对预期的负载和流量。他们进行容量规划，以便根据需要扩展资源，防止流量激增时出现性能瓶颈。借助现代公有云平台，自动化流量的可扩展性变得更加容易实现，尤其是在分布式应用的情况下。'
- en: '**Automated remediation**: Automation is a cornerstone of SRE practices. SREs
    develop automated systems for incident response and remediation. This includes
    *auto-scaling*, *self-healing mechanisms*, and *automated rollback procedures*
    to minimize downtime.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化修复**：自动化是SRE实践的基石。SRE开发自动化系统用于事件响应和修复。这包括*自动扩展*、*自愈机制*和*自动回滚程序*，以最小化停机时间。'
- en: '**Chaos engineering**: SREs often employ chaos engineering practices to introduce
    controlled failures into the system deliberately. This helps identify weaknesses
    and vulnerabilities in the distributed application, allowing for proactive mitigation
    of potential issues. Some of the most popular chaos engineering tools are Chaos
    Monkey, Gremlin, Chaos Toolkit, Chaos Blade, Pumba, ToxiProxy, and Chaos Mesh.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混沌工程**：SRE经常采用混沌工程实践，故意将受控故障引入系统。这有助于识别分布式应用中的弱点和漏洞，从而提前采取措施减轻潜在问题。一些最流行的混沌工程工具包括
    Chaos Monkey、Gremlin、Chaos Toolkit、Chaos Blade、Pumba、ToxiProxy 和 Chaos Mesh。'
- en: '**On-call and incident management**: SREs maintain on-call rotations to ensure
    24/7 coverage. They follow well-defined incident management processes to resolve
    issues quickly and learn from incidents to prevent recurrence. Most SRE development
    backlogs come from this process as they learn from failures and, therefore, automate
    repeatable tasks.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**值班和事件管理**：SRE（站点可靠性工程师）保持值班轮换，以确保全天候覆盖。他们遵循明确的事件管理流程，迅速解决问题，并从事件中吸取经验教训，防止问题的重复发生。大多数SRE开发积压来自于此过程，因为他们从失败中学习，因此会自动化可重复的任务。'
- en: '**Continuous improvement**: SRE is a culture of continuous improvement. SRE
    teams regularly conduct **post-incident reviews** (**PIRs**) and **root cause
    analyses** (**RCAs**) to identify areas for enhancement. Lessons learned from
    incidents are used to refine SLOs and improve the overall reliability of the application.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续改进**：SRE是一种持续改进的文化。SRE团队定期进行**事件后复盘**（**PIRs**）和**根本原因分析**（**RCAs**），以识别改进的领域。从事件中学到的经验教训被用来优化SLOs，并提高应用程序的整体可靠性。'
- en: '**Documentation and knowledge sharing**: SREs document *best practices*, *runbooks*,
    and *operational procedures*. They emphasize knowledge sharing across teams to
    ensure that expertise is not siloed and that all team members can effectively
    manage and troubleshoot the distributed application. They also aim to automate
    the runbooks to ensure that manual processes are kept at a minimum.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档编写和知识共享**：SRE编写*最佳实践*、*运行手册*和*操作流程*。他们强调跨团队的知识共享，确保专业知识不被孤立，并且所有团队成员都能够有效地管理和排查分布式应用程序的问题。他们还致力于自动化运行手册，以确保手动过程保持在最低限度。'
- en: In summary, SRE’s approach to running a distributed application in production
    focuses on *reliability*, *automation*, and *continuous improvement*. It sets
    clear goals, establishes metrics for measurement, and employs proactive monitoring
    and incident management practices to deliver a highly available and performant
    service to end users.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，SRE 在生产环境中运行分布式应用程序的方法专注于 *可靠性*、*自动化* 和 *持续改进*。它设定明确的目标，建立度量标准，并采用主动监控和事件管理实践，向最终用户提供高度可用和高性能的服务。
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'This chapter covered SRE and the KPIs for running our service in production.
    We started by understanding software reliability and examined how to manage an
    application in production using SRE. We discussed the three crucial parameters
    that guide SREs: SLI, SLO, and SLA. We also explored error budgets and their importance
    in introducing changes within the system. Then, we looked at software disaster
    recovery, RPO, and RTO and how they define how complex or costly our disaster
    recovery measures will be. Finally, we looked at how DevOps or SRE will use these
    concepts to manage a distributed application in production.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 SRE 和在生产环境中运行服务的关键绩效指标（KPI）。我们从理解软件可靠性开始，探讨了如何利用 SRE 管理生产环境中的应用程序。我们讨论了
    SRE 的三个关键参数：SLI、SLO 和 SLA。我们还探索了错误预算及其在系统变更引入中的重要性。接着，我们讲解了软件灾难恢复、RPO 和 RTO 以及它们如何定义我们的灾难恢复措施的复杂性或成本。最后，我们了解了
    DevOps 或 SRE 如何使用这些概念来管理生产环境中的分布式应用。
- en: In the next chapter, we will put what we’ve learned to practical use and explore
    how to manage all these aspects using a service mesh called Istio.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把所学的知识应用于实际，探索如何使用名为 Istio 的服务网格来管理所有这些方面。
- en: Questions
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题，测试您对本章内容的掌握情况：
- en: Which of the following is a good example of an SLI?
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项是 SLI 的良好示例？
- en: A. The response time should not exceed 300ms.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: A. 响应时间不应超过 300 毫秒。
- en: B. The 95th percentile of response time in a 15-minute window should not exceed
    300ms.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: B. 15 分钟窗口中的响应时间的第 95 百分位应不超过 300 毫秒。
- en: C. 99% of all requests should respond within 300ms.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C. 99% 的所有请求应在 300 毫秒内响应。
- en: D. The number of failures should not exceed 1%.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: D. 故障数量不应超过 1%。
- en: A mature organization should have a 100% SLO. (True/False)
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个成熟的组织应当有 100% 的 SLO。（对/错）
- en: SLOs are not tied to any customer-initiated punitive action. (True/False)
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SLO 与任何客户发起的惩罚性措施无关。（对/错）
- en: Which of the following should you consider while deciding on an SLO? (Choose
    three)
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在决定 SLO 时，您应考虑以下哪些因素？（选择三项）
- en: A. User satisfaction
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: A. 用户满意度
- en: B. Alternatives
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: B. 替代方案
- en: C. User behavior
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C. 用户行为
- en: D. System capacity
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: D. 系统容量
- en: SLAs are generally kept to a stricter SLI value than SLOs. (True/False)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SLA 通常保持比 SLO 更严格的 SLI 值。（对/错）
- en: Which of the following should you consider while defining SLIs?
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在定义 SLI 时，您应考虑以下哪些因素？
- en: A. CPU, memory, and disk utilization
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: A. CPU、内存和磁盘利用率
- en: B. Latency, errors, traffic, and saturation
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: B. 延迟、错误、流量和饱和度
- en: C. Utilization, capacity, and scale
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C. 利用率、容量和规模
- en: An error budget of 1% provides how much scope for downtime per month?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1% 的错误预算每月提供多少停机时间？
- en: A. 72 hours
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: A. 72 小时
- en: B. 43.2 minutes
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: B. 43.2 分钟
- en: C. 7.2 hours
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C. 7.2 小时
- en: D. 4.32 minutes
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: D. 4.32 分钟
- en: An SRE is a software developer doing Ops. (True/False)
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SRE 是一名从事运维的开发人员。（对/错）
- en: What minimum percent of the time should an SRE allocate to development work?
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SRE 应分配多少最小时间用于开发工作？
- en: A. 30%
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: A. 30%
- en: B. 40%
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: B. 40%
- en: C. 50%
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C. 50%
- en: D. 60%
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: D. 60%
- en: Answers
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: 'Here are the answers to this chapter’s questions:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章问题的答案：
- en: B
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: B
- en: 'False'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错
- en: 'True'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对
- en: A, B, C
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: A, B, C
- en: 'False'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错
- en: B
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: B
- en: C
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C
- en: 'True'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对
- en: C
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C
