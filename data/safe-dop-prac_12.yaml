- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Continuous Deployment to Production
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续部署到生产环境
- en: As we continue our journey through the Continuous Delivery Pipeline, we have
    designed features to test a benefit hypothesis during Continuous Exploration.
    Implementation of these features happened during Continuous Integration where
    we created stories, developed changes and tests, and put our changes through the
    build and test process. Ultimately, our change is placed in a staging environment.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续沿着持续交付管道前进时，我们设计了特性来测试在持续探索过程中获得的效益假设。这些特性的实现发生在持续集成阶段，我们在这一阶段创建了故事、开发了变更和测试，并将变更通过构建和测试过程。最终，我们的变更被放置在一个预发布环境中。
- en: With Continuous Deployment, we complete the journey of the change to the production
    environment. However, the activities don’t end with the deployment to production.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在持续部署中，我们完成了变更到生产环境的整个过程。然而，活动并不在部署到生产环境后就结束。
- en: 'In this chapter, we will take a look at the practices that enable the following
    actions in Continuous Deployment:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨使得在持续部署中能够实现以下操作的实践：
- en: Deploying a change to production
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将变更部署到生产环境
- en: Verifying proper operation of changes in the production environment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证变更在生产环境中的正常运行
- en: Monitoring the production environment
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控生产环境
- en: Responding to and recovering from production failures
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应和从生产故障中恢复
- en: It’s important to remember that we separate deployment from release. We viewed
    the architectural concerns of enabling new changes to be automatically deployed
    to production environments in [*Chapter 10*](B18756_10.xhtml#_idTextAnchor221),
    *Continuous Exploration and Finding New Features*. While we continuously deploy
    to production, those changes are not visible to the customer until we release
    them. We talk about allowing only select people to view those changes in production
    in this chapter. We will talk about releasing on demand in our next chapter, [*Chapter
    13*](B18756_13.xhtml#_idTextAnchor292), *Releasing on Demand to* *Realize Value*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的是，我们将部署与发布分开。我们在[*第10章*](B18756_10.xhtml#_idTextAnchor221)，*持续探索与发现新特性*中看到了使得新变更能够自动部署到生产环境的架构问题。虽然我们持续将变更部署到生产环境，但直到我们发布这些变更，客户才会看到它们。本章将讨论如何只允许特定人员查看生产环境中的这些变更。我们将在下一章，[*第13章*](B18756_13.xhtml#_idTextAnchor292)，*按需发布以实现价值*中讨论按需发布。
- en: 'Let’s begin our exploration of Continuous Deployment by looking at the first
    activity: deploying to the production environment.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从第一项活动开始，探索持续部署：将变更部署到生产环境。
- en: Deploying to production
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到生产环境
- en: The goal of deployment is to get our solution in terms of a new product or enhancements
    to an existing product into a production environment. With Continuous Deployment,
    we want to move this solution as frequently as we can while minimizing the risk
    to our production environment.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 部署的目标是将我们的解决方案（无论是新产品还是对现有产品的增强功能）投入生产环境。在持续部署中，我们希望尽可能频繁地推动这一解决方案，同时将对生产环境的风险降到最低。
- en: 'The following practices allow us to deploy more frequently and reduce the risk
    of failures in the production environment:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下实践使我们能够更频繁地部署并降低生产环境中的故障风险：
- en: Setting up dark launches
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置暗启动
- en: Employing feature flags
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用特性标志
- en: Automating deployment
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化部署
- en: Infrastructure as code
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施即代码
- en: Selective deployment
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择性部署
- en: Self-service deployment
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自助部署
- en: Version control
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制
- en: Blue/green deployment
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝绿部署
- en: We have looked at version control in previous chapters, notably [*Chapter 11*](B18756_11.xhtml#_idTextAnchor244),
    *Continuous Integration of Solution Development*. We have also discussed blue/green
    deployment in that same chapter.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的章节中，特别是[*第11章*](B18756_11.xhtml#_idTextAnchor244)，*解决方案开发的持续集成*中已经讨论过版本控制。我们也在同一章中讨论了蓝绿部署。
- en: Let’s examine the remaining practices and how they can increase deployment frequency
    while reducing risk.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看其余的实践，它们是如何在降低风险的同时增加部署频率的。
- en: Increasing deployment frequency
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增加部署频率
- en: We saw in [*Chapter 1*](B18756_01.xhtml#_idTextAnchor014), *Introducing SAFe®
    and DevOps*, the set of practices that allowed Flickr to announce at the Velocity
    conference that they were able to perform 10 deploys in a day. They accomplished
    this with the creation of scripts that would deploy upon passage of all tests.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第一章*](B18756_01.xhtml#_idTextAnchor014)，*介绍SAFe®和DevOps*中看到了一组实践，这些实践使得Flickr能够在Velocity大会上宣布他们可以一天进行10次部署。他们通过创建脚本，确保在所有测试通过后进行自动部署。
- en: Today’s automation and practices are an evolution of Flickr’s initial successes
    with automated deployment. To that end, we will examine which practices are in
    use today and how.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当今的自动化和实践是Flickr最初成功的自动化部署的演变。为此，我们将研究今天正在使用哪些实践以及如何使用。
- en: Let’s begin our exploration with a look at today’s deployment automation.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从今天的部署自动化开始探索。
- en: Deployment automation
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署自动化
- en: The scripting that allowed Flickr to automate their deployments reduced the
    time from code commit to deployment from days to hours. With the modern evolution
    of that scripting, the CI/CD pipeline further reduces the time of deployment from
    hours to minutes or even seconds. Let’s see how that is done.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 允许Flickr自动化其部署的脚本将从代码提交到部署的时间从天缩短到了小时。随着这一脚本的现代演变，CI/CD管道进一步将部署时间从小时缩短到分钟甚至秒钟。让我们来看看它是如何做到的。
- en: In the overall Continuous Delivery Pipeline, we saw the introduction of automation
    during Continuous Integration. The automation allows for building, testing, merging,
    and packaging operations without manual intervention as much as possible, as shown
    in the following diagram.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在整体的持续交付管道中，我们看到在持续集成过程中引入了自动化。自动化可以尽可能地在不需要人工干预的情况下完成构建、测试、合并和打包操作，如下图所示。
- en: "![Figure 12.1 – CI and CD \uFEFFautomation](img/B18756_12_01.jpg)"
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图12.1 – CI和CD自动化](img/B18756_12_01.jpg)'
- en: Figure 12.1 – CI and CD automation
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – CI和CD自动化
- en: We continue the use of automation in Continuous Deployment as illustrated in
    the preceding diagram. In Continuous Deployment, we take the application packaged
    at the tail end of Continuous Integration and deploy it to the test environment.
    After system-level testing is performed on the test environment, the application
    package is then deployed to the production environment. Such automation may be
    done by tools that combine Continuous Integration and Continuous Deployment, such
    as Jenkins and pipelines from GitLab and Bitbucket. Continuous Deployment automation
    may be separate from Continuous Integration in tools such as ArgoCD. Several pieces
    in terms of technology and practices help enable effective automation in Continuous
    Deployment.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续在持续部署过程中使用自动化，如前面的图所示。在持续部署中，我们将应用程序包从持续集成的尾部提取并部署到测试环境。在测试环境中执行系统级测试后，应用程序包将被部署到生产环境。这种自动化可以通过将持续集成和持续部署结合在一起的工具来完成，如Jenkins以及GitLab和Bitbucket的管道。持续部署自动化也可以在像ArgoCD这样的工具中与持续集成分开进行。多个技术和实践方面的支持有助于在持续部署中实现有效的自动化。
- en: The first important piece is version control. We’ve seen the importance of version
    control for text-based artifacts as the trigger for the CI/CD pipeline and as
    a way of connecting all artifacts together for understanding everything involved
    in a particular deployment or release.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个重要的部分是版本控制。我们已经看到版本控制对文本工件的重要性，它是CI/CD管道的触发器，并且能够将所有工件连接起来，以便理解特定部署或发布过程中涉及的一切。
- en: Artifact repositories can act as version control for large, binary-based artifacts
    that can’t be stored in text-based version control systems. They store intermediate
    builds, code libraries, virtual machine images, and Docker containers that may
    be created as part of a build process. If a component does not require a rebuild
    and test, its artifacts may be directly retrieved from the artifact repository,
    saving time and effort.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 工件库可以充当大规模二进制工件的版本控制工具，这些工件无法存储在基于文本的版本控制系统中。它们存储中间构建、代码库、虚拟机镜像和可能作为构建过程的一部分创建的Docker容器。如果某个组件不需要重建和测试，其工件可以直接从工件库中获取，从而节省时间和精力。
- en: The size of changes is another factor that can also reduce the time automation
    takes to deploy to production. We’ve seen in [*Chapter 4*](B18756_04.xhtml#_idTextAnchor086),
    *Leveraging* *Lean Flow to Keep the Work Moving*, that batch size is an important
    factor in encouraging flow. A small independent change will go through much faster
    than a large change that may start a lot of rebuilding and testing in the CI/CD
    pipeline.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 更改的大小是另一个可以减少自动化部署到生产环境所需时间的因素。我们在[*第4章*](B18756_04.xhtml#_idTextAnchor086)，*利用*
    *精益流程保持工作持续推进*中看到，批量大小是促进流程流动的一个重要因素。一个小的独立更改会比一个大型更改处理得更快，因为后者可能会启动大量的重建和测试流程，影响CI/CD管道的效率。
- en: Automating as many steps as possible, including the push to deployment, will
    dramatically reduce the lead time for deployment. Allowing automation to proceed
    to further steps in building and testing throughout the Continuous Integration
    and Continuous Deployment stages keeps the momentum happening without delays because
    manual actions are needed to proceed to the next step. This may reduce the deployment
    time to seconds instead of minutes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化尽可能多的步骤，包括部署推送，将显著减少部署的前置时间。允许自动化继续进行构建和测试的后续步骤，贯穿整个持续集成和持续部署阶段，能够保持持续的工作进度，避免由于需要手动操作才能进行下一步而导致的延误。这可能将部署时间缩短到秒级，而非分钟级。
- en: Infrastructure as code
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基础设施即代码
- en: A key part of deployment automation is the creation and configuration of resources
    in production environments. **Infrastructure as Code** (**IaC**) allows us to
    define the desired infrastructure in terms of the resources and their configuration
    in terms of text-based descriptions. These configuration files are used by tools
    in conjunction with configuration management to create new resources, update resource
    configurations, or even tear them down if required. As mentioned in [*Chapter
    3*](B18756_03.xhtml#_idTextAnchor066), *Automation for Efficiency and Quality*,
    popular IaC tools include Hashicorp’s Terraform and AWS CloudFormation for Amazon
    Web Services environments.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 部署自动化的关键部分是创建和配置生产环境中的资源。**基础设施即代码**（**IaC**）使我们能够通过基于文本的描述来定义所需的基础设施及其资源配置。这些配置文件与配置管理工具一起使用，用于创建新资源、更新资源配置，或者在需要时销毁资源。如[*第3章*](B18756_03.xhtml#_idTextAnchor066)中提到的，*提高效率与质量的自动化*，流行的IaC工具包括Hashicorp的Terraform和适用于Amazon
    Web Services环境的AWS CloudFormation。
- en: Version control plays a key part in establishing a smooth IaC process by ensuring
    that the evolution of configuration files is recorded and maintained. If a change
    to a product requires a change to the configuration in the production environment,
    the changes to the configuration file are created and tested in the staging environment.
    Tags in version control would serve to link together all artifacts associated
    with the change, from source code to tests to configuration file changes.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制在建立顺畅的基础设施即代码（IaC）流程中扮演着关键角色，确保配置文件的演变得到记录和维护。如果产品的更改需要对生产环境中的配置进行更改，则配置文件的更改会在预发布环境中创建并进行测试。版本控制中的标签将用于将所有与更改相关的工件连接起来，从源代码到测试，再到配置文件的更改。
- en: This process of building and testing the configuration files is no different
    than developing the product or its tests. This helps ensure that the resulting
    resources created in the production environment are reliable and in sync with
    any product changes.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 构建和测试配置文件的过程与开发产品或其测试没有区别。这有助于确保在生产环境中创建的资源是可靠的，并与任何产品更改保持同步。
- en: Selective deployment
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择性部署
- en: 'In some organizations, a production environment can be separated into multiple
    production environments. This separation can be based on some of the following
    factors:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些组织中，生产环境可能会被划分为多个生产环境。这种划分可能基于以下一些因素：
- en: Infrastructure/resources
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施/资源
- en: Geography
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地理
- en: Customer
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户
- en: A selective deployment takes advantage of the separation by allowing deployment
    to happen at one instance of the production environment. An example of a selective
    deployment to an environment dedicated to a single customer is shown in the following
    illustration.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 选择性部署利用了环境隔离，通过仅在生产环境的某一个实例上进行部署来实现。以下示例展示了一个面向单个客户的环境的选择性部署。
- en: '![Figure 12.2 – Selective deployment to Customer A’s production environment](img/B18756_12_02.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图12.2 – 向客户A的生产环境进行选择性部署](img/B18756_12_02.jpg)'
- en: Figure 12.2 – Selective deployment to Customer A’s production environment
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – 向客户A的生产环境进行选择性部署
- en: Our preceding example allows for testing to occur in a limited production capacity
    with Customer A, while other customers in other production environments do not
    see the change. Deployment in one of several environments allows for a flexible
    release strategy, such as a canary release where changes are released to specific
    regions or customers before releasing to the entire customer base. We will discuss
    canary releases in more detail in [*Chapter 13*](B18756_13.xhtml#_idTextAnchor292),
    *Releasing on Demand to* *Realize Value*.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们前面的例子允许在有限的生产能力中与客户A进行测试，而其他生产环境中的客户看不到变化。在多个环境中的部署允许灵活的发布策略，例如金丝雀发布，其中变化首先发布到特定区域或客户，然后才发布到整个客户群。我们将在[**第13章**](B18756_13.xhtml#_idTextAnchor292)中更详细地讨论金丝雀发布，*按需发布以实现价值*。
- en: An example of real-world selective deployment happens at Facebook. As Facebook
    grew in popularity, the release engineering team kept up with the development
    activity by working on a *push from master* system that allowed for changes to
    be released more frequently. As detailed in [https://engineering.fb.com/2017/08/31/web/rapid-release-at-massive-scale/](https://engineering.fb.com/2017/08/31/web/rapid-release-at-massive-scale/),
    deployments started with 50% Facebook employees, then 0.1% of the Facebook production
    traffic, eventually rolling out to 10% of Facebook production traffic.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一个现实世界中选择性部署的例子发生在Facebook。随着Facebook的流行增长，发布工程团队通过开发一个*从主分支推送*系统来跟上开发活动，这使得发布更频繁。正如在[https://engineering.fb.com/2017/08/31/web/rapid-release-at-massive-scale/](https://engineering.fb.com/2017/08/31/web/rapid-release-at-massive-scale/)中详细介绍的那样，部署开始时针对50%的Facebook员工，然后是0.1%的Facebook生产流量，最终推广到10%的Facebook生产流量。
- en: Self-service deployment
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自助部署
- en: There may be justifiable reasons that your organization cannot allow automation
    to deploy to your production environment. Generally, this is done to adhere to
    compliance policies.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 可能有正当理由，导致你的组织无法允许自动化部署到生产环境中。通常，这是为了遵守合规政策。
- en: If this is the case, self-service deployment (often called one-button deployment)
    allows anyone, usually developers, to deploy changes that have passed Continuous
    Integration into production. This method still uses automation to perform the
    actual deployment, so developers do not have unrestricted access to the production
    environment.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这种情况，自助部署（通常称为一键部署）允许任何人，通常是开发人员，将通过持续集成的更改部署到生产环境中。这种方法仍然使用自动化来执行实际部署，因此开发人员没有对生产环境的无限制访问权限。
- en: The deployment using automation is still recorded and audited so that the complete
    activities are tracked. This traceability of every automated deployment may give
    confidence to business compliance offices to allow a move to automating deployment.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自动化的部署仍然会被记录和审计，以便追踪完整的活动。每次自动化部署的可追溯性可能会让业务合规部门对自动化部署的推进充满信心。
- en: Reducing risk
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 降低风险
- en: 'Jez Humble, in the book *Continuous Delivery: Reliable Software Releases through
    Build, Test, and Deployment Automation*, famously said the following about deployment:
    “*If it hurts, do it more frequently, and bring the pain forward*.” We have seen
    key methods for doing deployment more frequently. We will now look at practices
    that may help us deal with the pain of deployments.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Jez Humble在《*持续交付：通过构建、测试和部署自动化实现可靠的软件发布*》一书中著名地说过以下关于部署的话：“*如果它让你痛苦，就更频繁地做它，并把痛苦提前*。”我们已经看到了一些更频繁进行部署的关键方法。现在我们将看看一些可能帮助我们应对部署痛苦的实践。
- en: 'The following practices allow us to mitigate the risk of introducing failures
    in the production environment:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下实践可以帮助我们降低在生产环境中引入故障的风险：
- en: Dark launches
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黑暗启动
- en: Feature flags
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能标志
- en: Blue/green deployments
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝绿部署
- en: Version control
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制
- en: Blue/green deployments and version control were discussed in previous chapters.
    For this chapter, let’s focus our exploration on the other mitigations.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝绿部署和版本控制在前几章中已有讨论。在本章中，让我们将重点放在其他的风险缓解措施上。
- en: Feature flags
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 功能标志
- en: Feature flags (or feature toggles) are the primary mechanism for implementing
    both dark launches and canary releases. By selecting the visibility of the feature
    in terms of whether the flag is enabled or disabled, you effectively separate
    the deployment of new features with the release of the feature where it is available
    to all users.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 功能标志（或功能切换）是实现黑暗启动和金丝雀发布的主要机制。通过选择功能的可见性，即是否启用或禁用标志，你可以有效地将新功能的部署与功能的发布分离，后者使功能对所有用户可用。
- en: Feature flags also allow for quick rollbacks should problems arise in production.
    At the first sign of a problem, simply disable the feature flag.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 功能标志还允许在生产中出现问题时迅速回滚。只需在发现问题的第一时间禁用功能标志。
- en: 'When setting up feature flags, it is important to test the behavior of the
    feature flag at both positions: test the effects when the feature flag is enabled,
    and then when it is disabled. This testing should be done in the staging environment,
    well before it is deployed to production.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 设置功能标志时，重要的是要测试功能标志在两个状态下的行为：测试功能标志启用时的效果，然后是禁用时的效果。这个测试应该在预生产环境中完成，远在部署到生产环境之前。
- en: The presence of feature flags does add to the overall complexity of the solution
    by adding more permutations for testing behavior. Too many feature flags in play,
    especially obsolete feature flags for features long released, introduce more complexity
    in testing and technical debt. Obsolete feature flags should be removed at the
    first opportunity.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 功能标志的存在确实增加了整体解决方案的复杂性，因为它增加了更多的行为测试组合。使用过多的功能标志，尤其是对于那些已经发布很久的过时功能标志，会增加测试的复杂性并产生技术债务。过时的功能标志应该在第一时间被移除。
- en: Dark launches
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 暗推出
- en: Dark launches allow features in the production environment to be visible to
    only developers, testers, and generally beta or select customers and not to the
    entire customer pool of users. To allow for dark launches, organizations typically
    use feature flags to allow or disallow the visibility of the feature based on
    the group that requires visibility.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 暗推出允许在生产环境中仅对开发人员、测试人员以及通常是beta或特定客户可见新功能，而不是对所有客户群体可见。为了实现暗推出，组织通常使用功能标志，根据需要可见性的用户群体来允许或禁止功能的可见性。
- en: An example of a dark launch for developers and testers using feature flags is
    detailed in the following illustration.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下插图详细展示了开发人员和测试人员如何使用功能标志进行暗推出的示例。
- en: '![Figure 12.3 – Example of a dark launch using feature flags](img/B18756_12_03.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图12.3 - 使用功能标志进行暗推出的示例](img/B18756_12_03.jpg)'
- en: Figure 12.3 – Example of a dark launch using feature flags
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – 使用功能标志进行暗推出的示例
- en: In our preceding example, a new feature is visible to the developers and testers
    in the production environment. This visibility allows them to run experiments
    on this feature without affecting the customers, who do not see the feature.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的示例中，新功能在生产环境中对开发人员和测试人员可见。这种可见性使他们可以在不影响客户的情况下对该功能进行实验，而客户并不会看到该功能。
- en: 'Developers and testers can use dark launches in the following ways:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员和测试人员可以通过以下方式使用暗推出：
- en: Testing new application infrastructure
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试新的应用基础设施
- en: Dynamically control which early customers can see new features
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态控制哪些早期客户可以看到新功能
- en: Experimentation of new features
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能的实验
- en: Dark launches are often synonymous with canary releases. The primary difference
    between a dark launch and a canary release is that the feature flag allows visibility
    to a select group of customers to determine their reaction to the new feature
    in canary releases.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 暗推出通常与金丝雀发布同义。暗推出和金丝雀发布之间的主要区别在于，功能标志允许选择一部分客户查看新功能，以了解他们对金丝雀发布中新功能的反应。
- en: We now need to see that these changes do not adversely affect our current production
    environment, even if these deployed changes are not released. To do this, we need
    to test. Let’s examine our testing process in production.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要确认这些变更不会对我们当前的生产环境产生不良影响，即使这些部署的变更没有正式发布。为此，我们需要进行测试。让我们来看看我们在生产环境中的测试过程。
- en: Verifying proper operation
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证功能的正常运行
- en: The changes to the product, in the form of new features, are now in the production
    environment, but this doesn’t mean that the work is over. In fact, it has only
    begun. We need to see that our features function as we expect. This is true from
    a functional perspective, but also from other perspectives relating to NFRs.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 产品的变更，以新功能的形式，已经进入生产环境，但这并不意味着工作已经完成。实际上，工作才刚刚开始。我们需要确保我们的功能按预期运行。这不仅从功能角度来看是对的，还涉及到与非功能性需求（NFR）相关的其他方面。
- en: 'The following practices allow us to verify correct behavior in the production
    environment:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下做法帮助我们验证生产环境中的正确行为：
- en: Production testing
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产环境测试
- en: Test automation in production
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在生产环境中的测试自动化
- en: Test data management
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试数据管理
- en: Testing NFRs
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试非功能性需求（NFR）
- en: Some of these practices were introduced in the previous chapter but now that
    we are looking at the production environment, we can examine them closely. Let’s
    look at all these practices and their application to production.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有些做法在前一章已经介绍过，但现在我们看到生产环境，我们可以更仔细地检查这些做法。让我们看看所有这些做法及其在生产中的应用。
- en: Production testing
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生产测试
- en: 'With feature flags in place as part of a dark launch, testing can continue
    against the resources of the production environment. While testing in the production
    environment is no greater simulation of the conditions that the production environment
    has, the tester should still approach testing in the production environment with
    caution. Production testing offers the following advantages:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在功能开关的配合下进行暗发布，测试可以继续在生产环境的资源上进行。尽管在生产环境中的测试并不完全模拟生产环境的条件，但测试人员仍然应谨慎进行生产环境中的测试。生产测试有以下优势：
- en: Allows for monitoring application performance in real-time, realistic scenarios
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许在实时、真实的场景中监控应用程序性能
- en: Monitoring application performance against real-time traffic
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控应用程序在实时流量下的性能
- en: Further detection of bugs and malicious attacks
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进一步检测漏洞和恶意攻击
- en: Helps maintain the quality of the application
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有助于维护应用程序的质量
- en: The tests run in production really should be the ones near the top of the testing
    pyramid in combination with a subset of tests run in the previous stage of Continuous
    Integration as a sanity check. We are really looking to confirm that the behavior
    of the features we are about to release is what we expect. All other aspects of
    the testing pyramid should have been covered in the tests run in test environments
    and in the staging environment. Testing in production complements the earlier
    testing. It is not meant to substitute for earlier testing.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产中运行的测试应该是测试金字塔顶部的测试，并结合前一阶段的持续集成中运行的部分测试作为基本的 sanity check。我们真正关注的是确认我们即将发布的功能行为是否符合预期。测试金字塔中的其他所有方面应该已经在测试环境和预发布环境中进行了测试。生产中的测试是对早期测试的补充，而不是替代。
- en: 'Successful testing in production requires a detailed understanding of the following
    factors:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的生产测试需要详细理解以下因素：
- en: Use real browsers and devices in the production environment. Emulators or simulators
    may have been used in testing environments, but they may not exhibit the same
    behavior as the “real thing.”
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在生产环境中使用真实浏览器和设备。测试环境中可能使用了仿真器或模拟器，但它们可能无法展现与“真实设备”相同的行为。
- en: Allow real traffic of the production environment for the measuring of application
    performance under load. This is, after all, the traffic the application will face.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许生产环境中的真实流量来衡量在负载下的应用程序性能。毕竟，这才是应用程序将面对的流量。
- en: Use feature flags to allow for a small population of developers, testers, and
    beta customers to experience the new feature. Feature flags also allow for the
    quick disabling of features to everyone if problems occur.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用功能开关让少部分开发者、测试人员和测试客户体验新功能。功能开关还允许在出现问题时快速禁用所有用户的该功能。
- en: While production testing is occurring, the monitoring of the production environment
    must be continuous. This allows for the rapid shutdown of any tests at the first
    sign of a problem. In addition, reversion of test operations may be necessary.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在进行生产测试时，必须持续监控生产环境。这可以在问题出现的第一时间快速关闭任何测试。此外，可能还需要恢复测试操作。
- en: Use dedicated test user accounts so logging can determine what test transactions
    are versus real transactions.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用专用的测试用户账户，以便日志能够区分测试交易和真实交易。
- en: A key test performed in production is an A/B test. In A/B testing, feature flags
    may direct beta customers to the new feature under test (option “A”) to gauge
    whether that new option has a change in behavior over the current application
    available to the rest of the user population (option “B”).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产中执行的关键测试之一是A/B测试。在A/B测试中，功能开关可能会将测试中的新功能（选项“A”）分配给测试用户，以此评估该新选项在行为上是否与当前应用程序（选项“B”）有所不同。
- en: Test automation in production
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生产环境中的自动化测试
- en: Feature flag management is important when testing in production. Feature flags
    will not only determine whether a feature is visible, but also to whom that feature
    is visible.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中进行测试时，功能开关管理非常重要。功能开关不仅决定功能是否可见，还决定该功能对哪些用户可见。
- en: A key use case of feature flag management occurs at Facebook. In the blog article
    at [https://www.facebook.com/notes/10158791573022200](https://www.facebook.com/notes/10158791573022200),
    an engineer at Meta, Facebook’s parent company, describes how they use Gatekeeper
    to establish A/B testing for every UI change with real Facebook users. Gatekeeper
    ensures that real users are subjected to the testing of a single UI element and
    that the A/B tests don’t conflict.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 功能标志管理的一个关键用例发生在 Facebook。在 [https://www.facebook.com/notes/10158791573022200](https://www.facebook.com/notes/10158791573022200)
    的博客文章中，Meta（Facebook 母公司）的一名工程师描述了他们如何使用 Gatekeeper 为每个 UI 变更建立 A/B 测试，测试对象为真实的
    Facebook 用户。Gatekeeper 确保真实用户参与单一 UI 元素的测试，并确保 A/B 测试之间不会发生冲突。
- en: Because they are evaluating small changes, Facebook knows that some users may
    have a less than ideal user experience, but Facebook is striving for a better
    overall product. To that end, if enough users don’t use the UI element change,
    it is regarded as a failed test and never makes its way to the entire Facebook
    population.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 Facebook 在评估小规模变化时知道一些用户可能会有不理想的用户体验，但 Facebook 仍然致力于提供更好的整体产品。为此，如果足够多的用户不使用该
    UI 元素变化，就会视为测试失败，并且不会向所有 Facebook 用户推广。
- en: Test data management
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试数据管理
- en: While A/B testing may work to determine whether a given feature will be used
    by the end users, other testing may have to occur in production to see whether
    the desired flow and messaging occur for that feature.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 A/B 测试可以用来确定特定功能是否会被最终用户使用，但其他测试可能需要在生产环境中进行，以查看该功能的预期流程和信息是否得以实现。
- en: 'Synthetic transactions use automated testing scripts to verify the end-to-end
    performance of our application in production. The scripts simulate the actions
    a user would make to complete a transaction. The synthetic transactions, and their
    responses made by the application, are recorded by synthetic monitoring tools.
    Allowing synthetic monitoring and testing with synthetic transactions allow testers
    behind feature flags to verify the following characteristics of the application:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 合成交易使用自动化测试脚本验证应用程序在生产环境中的端到端性能。脚本模拟用户完成交易时的操作。这些合成交易及应用程序作出的响应会被合成监控工具记录。允许合成监控和使用合成交易进行测试，能够让位于功能标志后的测试人员验证应用程序的以下特征：
- en: '**Functionality**: Is the application moving through the correct pathways?'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能性**：应用程序是否按正确的路径运行？'
- en: '**Availability**: Is the performance of the application in the production environment
    adequate?'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用性**：应用程序在生产环境中的性能是否足够？'
- en: '**Response time**: This is another measure of the application’s performance
    in the production environment.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应时间**：这是衡量应用程序在生产环境中性能的另一个指标。'
- en: Synthetic monitoring allows you to understand the key flows of your application
    and how well they are performing. These may also provide important things to check
    with monitoring tools when released.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 合成监控使你能够了解应用程序的关键流程以及它们的表现如何。这些内容还可以提供发布时用监控工具检查的重要事项。
- en: Testing NFRs
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试 NFRs
- en: Having the new features deployed into the production environment while visible
    to a select few through feature flags allows for the evaluation of key NFRs before
    release.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 将新功能部署到生产环境，并通过功能标志让少数用户可见，允许在发布之前评估关键的 NFRs。
- en: Synthetic transactions and monitoring allow for performance testing while in
    the production environment. The reception of a sample of the real traffic in the
    production environment allows for vulnerability testing.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 合成交易和监控允许在生产环境中进行性能测试。接收生产环境中真实流量的样本能够进行漏洞测试。
- en: Testing of NFRs in the production environment is one of the important last checks
    of a feature before release. This is an important step that cannot be missed.
    Synthetic transactions and feature flags can allow for low-risk testing of NFRs
    to ensure that the production environment remains robust.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中对 NFRs 的测试是发布前功能验证的重要最后一步。这是一个关键步骤，不能忽视。合成交易和功能标志可以使 NFRs 的低风险测试成为可能，从而确保生产环境的稳健性。
- en: As we examined performing tests in the production environment, we have discovered
    that a pivotal part of the verification is continuous monitoring. We will now
    discover what is needed for continuous monitoring to occur.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在生产环境中执行测试时，我们发现验证过程的关键部分是持续监控。接下来我们将探索进行持续监控所需的内容。
- en: Monitoring the production environment
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控生产环境
- en: Monitoring the production environment allows us to understand whether the NFRs
    of the environment are still being maintained as well as whether new functionality
    deployed as features are functional and performing based on the constraints identified
    in NFRs.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 监控生产环境让我们了解环境的NFR（非功能需求）是否仍然得到保持，以及部署的新功能是否按照NFR中识别的约束条件正常工作并执行。
- en: There are a few practices that are instrumental in providing continuous monitoring.
    Let’s examine what these practices are and how to ensure that they are established
    in our production environment.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些实践对提供持续监控至关重要。让我们看看这些实践是什么，以及如何确保它们在我们的生产环境中得到建立。
- en: Full-stack telemetry
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全栈遥测
- en: We need to monitor at various levels important measurements of our solution
    for a number of reasons. At the lower levels, we want to ensure that our production
    environment is stable and in no danger of failure. As we move to look at our system
    at higher levels, we want to ensure that we have measurements that allow us to
    determine whether our business hypothesis that started the development can be
    proven. Ultimately, at the business level, the measurements we take can gauge
    whether development is in line with our strategy or whether strategic alignments
    must be made.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在不同层级上监控我们解决方案的重要指标，原因有很多。在较低层级，我们希望确保我们的生产环境稳定，并且没有失败的风险。当我们提升到更高层次来审视我们的系统时，我们希望确保我们拥有可以判断最初启动开发的商业假设是否成立的衡量指标。最终，在商业层面，我们所做的衡量可以判断开发是否与我们的战略保持一致，或者是否需要做出战略上的调整。
- en: These measurements taken for the range of levels we want are called full-stack
    telemetry. An example detailing the levels and sample measurements is in the following
    table.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了满足我们所需的各个层级的度量标准，这些度量被称为全栈遥测。以下表格详细说明了各个层级和示例度量标准。
- en: '| **Level** **for Measurement** | **Sample Measurements** |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| **测量层级** | **示例度量标准** |'
- en: '| Business | Value Stream KPIs (Cycle Time, Lead Time) and Solution KPIs (revenue,
    NPS, and conversion rate). |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 商业 | 价值流关键绩效指标（Cycle Time, Lead Time）和解决方案关键绩效指标（收入、NPS、转化率）。 |'
- en: '| IT Service Management (ITSM) | Service Level Objectives and other Service
    KPIs (Server uptime and network availability). |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| IT 服务管理（ITSM） | 服务级别目标和其他服务KPI（服务器正常运行时间和网络可用性）。 |'
- en: '| Product or Solution | Garbage Collection metrics, Response Time, Availability,
    and Application logs. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 产品或解决方案 | 垃圾回收指标、响应时间、可用性和应用日志。 |'
- en: '| Infrastructure | CPU Utilization, RAM Utilization, Networking metrics, and
    Event logs. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 基础设施 | CPU 利用率、RAM 利用率、网络指标和事件日志。 |'
- en: Table 12.1 – Sample measurements for levels of the solution
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 表12.1 – 解决方案层级的样本度量标准
- en: The required measurements must be designed during the Continuous Exploration
    stage of the Continuous Delivery Pipeline to ensure they can be easily collected
    during Continuous Deployment and beyond. The planned measurements should include
    data for both business use for measuring the benefit hypothesis as well as technical
    data that can tell us the state of the system in production.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的度量标准必须在持续交付管道的持续探索阶段设计，以确保它们能够在持续部署及之后的阶段轻松收集。计划中的度量标准应包括用于衡量利益假设的商业数据，以及能够告诉我们生产环境中系统状态的技术数据。
- en: Visual displays
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可视化显示
- en: Mountains of data can be collected through full-stack telemetry. What makes
    the data useful is organizing the data so that users can tell the state of the
    environment at a glance as well as identify when action must be taken quickly.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 通过全栈遥测可以收集大量数据。使数据有用的是组织数据的方式，以便用户能够一目了然地了解环境状态，并及时识别何时需要采取快速行动。
- en: Dashboards provide a key way of visualizing data collected. The visualization
    is beneficial for identifying trends or understanding whether an important metric
    has exceeded a threshold that may indicate a failure in production.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表盘提供了一种可视化收集数据的关键方式。这种可视化有助于识别趋势，或理解某个重要指标是否已超出阈值，这可能表示生产中的故障。
- en: The following is an example dashboard. This is the public dashboard for the
    cloud version of Grafana, a product used to create dashboards.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例仪表盘。这是Grafana的云版本的公共仪表盘，Grafana是一款用于创建仪表盘的产品。
- en: '![Figure 12.4 – Example dashboard from grafana.org](img/B18756_12_04.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图12.4 – 来自grafana.org的示例仪表盘](img/B18756_12_04.jpg)'
- en: Figure 12.4 – Example dashboard from grafana.org
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4 – 来自grafana.org的示例仪表盘
- en: As important as it is to have a dashboard, it is just as important that the
    dashboards are visible to everyone in the organization. Transparency allows everyone
    on the value stream to have all the necessary information without waiting for
    approvals or debating whether they’re *allowed* to see individual measurements.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表盘的重要性毋庸置疑，但同样重要的是这些仪表盘要对组织中的每个人都可见。透明度使得价值流中的每个人都能获取所有必要的信息，而无需等待批准或争论是否被*允许*查看单独的度量数据。
- en: Federated monitoring
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 联邦监控
- en: Transparency in displaying data visualization may be difficult in complex organizations
    with many lines of business, business units, and other groups. To ensure information
    is not placed in silos, thought may be placed onto how to ensure the information
    is federated and easy to share and exchange. The following figure is an illustration
    of a dashboard that displays federated information.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在复杂的组织中，显示数据可视化的透明度可能会很困难，尤其是当涉及多个业务线、业务单元和其他小组时。为了确保信息不被孤立，可能需要考虑如何确保信息是联邦化的，并且容易共享和交流。以下图是显示联邦信息的仪表盘示意图。
- en: '![Figure 12.5 – Example of a federated dashboard](img/B18756_12_05.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.5 – 联邦仪表盘示例](img/B18756_12_05.jpg)'
- en: Figure 12.5 – Example of a federated dashboard
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.5 – 联邦仪表盘示例
- en: In the preceding figure, the dashboard displays the measurements for the selected
    system (System B). Information for the other systems is available by selecting
    the appropriate system in the control.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，仪表盘显示了所选系统（系统 B）的测量数据。通过在控制面板中选择相应的系统，可以查看其他系统的信息。
- en: Sharing information in a federated structure allows for more transparency while
    encouraging agility in individual business units. This data from other sources
    should be combined with the local business unit information, allowing for a more
    holistic view of the business unit’s system. Dashboards and other information
    display mechanisms can display the system data and allow ways to drill down and
    view the data and its source.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在联邦结构中共享信息可以提供更多的透明度，同时鼓励各个业务单元的敏捷性。来自其他来源的数据应与本地业务单元的信息结合，提供对业务单元系统的更全面视图。仪表盘和其他信息展示机制可以显示系统数据，并允许深入查看数据及其来源。
- en: With the wide variety of data shared and visible on dashboards, organizations
    can continuously monitor their production environment. This can prepare them for
    production failures that may occur when releasing new features. Let’s examine
    the practices they can employ when a production failure occurs.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 通过仪表盘上共享和可见的各种数据，组织可以持续监控其生产环境。这可以为他们做好准备，应对在发布新功能时可能发生的生产故障。让我们来看看发生生产故障时他们可以采用的做法。
- en: Responding and recovering when disaster strikes
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 灾难发生时的响应和恢复
- en: The ability to recover quickly is a key feature of a DevOps approach. One of
    the key DORA metrics is **Time to Restore Service**, with elite functioning DevOps
    organizations able to do so in minutes. Preparing for recovery is a major part
    of the CALMR approach.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 快速恢复的能力是DevOps方法的关键特性之一。DORA的关键指标之一是**恢复服务的时间**，表现卓越的DevOps组织能够在几分钟内完成恢复。准备恢复是CALMR方法的一个重要部分。
- en: 'To facilitate recovery, we look at the following practices:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 为了促进恢复，我们需要了解以下做法：
- en: Proactive detection
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主动检测
- en: Cross-team collaboration
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨团队协作
- en: Chaos engineering
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混沌工程
- en: Session replay
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话回放
- en: Rollback and fix forward
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回滚并向前修复
- en: Immutable infrastructure
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可变基础设施
- en: A proactive response is important in production because this is the environment
    where the end users are. Problems here are visible and affect our customers. Problems
    not immediately handled can affect other work in other parts of the Continuous
    Delivery Pipeline.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，主动响应至关重要，因为这里是最终用户所在的环境。这里的问题是显而易见的，并且会影响我们的客户。没有及时处理的问题可能会影响到持续交付管道中其他部分的工作。
- en: Let’s examine the practices that allow us to be proactive in the production
    environment.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看在生产环境中可以采取的主动做法。
- en: Proactive detection
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主动检测
- en: Because we are using feature flags to separate deployment from release, we can
    proactively test and look for problems without disrupting customers, or worse,
    having our customers discover the problems. Feature flags enabled for testers
    allow them to examine new features in the production environment.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们使用功能标志将部署与发布分离，所以可以主动测试并寻找问题，而不会干扰客户，或者更糟糕的是让客户发现问题。为测试人员启用功能标志，可以让他们在生产环境中检查新功能。
- en: With this unique opportunity to have new features in the production environment
    without disturbing customer traffic, testers can perform additional testing, employ
    “what-if” scenarios, and eventually plan disaster recovery procedures involving
    the release of the new feature.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这个独特机会，在不干扰客户流量的前提下将新功能放入生产环境，测试人员可以进行额外的测试，执行“假设”场景，并最终计划灾难恢复程序，涉及到新功能的发布。
- en: Cross-team collaboration
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨团队协作
- en: Problems that are visible to the customer and that have little information to
    start with may be a breeding ground for people to blame one another. The pressure
    increases on a very visible problem with feedback from angry customers. A solution
    may not be apparent early on. It is this type of stress that may test the idea
    of cross-team collaboration working, but it has shown itself the most effective
    way to solve such problems.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 对客户可见且初期信息较少的问题，可能会成为相互指责的温床。压力在一个非常显眼的问题上增加，伴随着愤怒客户的反馈。解决方案在早期可能并不明显。正是这种类型的压力，可能会考验跨团队协作的有效性，但它已被证明是解决此类问题最有效的方式。
- en: Having people from various disciplines in Development and Operations was one
    of the keys to the success at Flickr that we originally discussed in [*Chapter
    1*](B18756_01.xhtml#_idTextAnchor014), *Introducing SAFe® and DevOps*. This collaboration
    across the different groups is still key to this day.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有来自不同领域的开发和运维人员是我们在[*第一章*](B18756_01.xhtml#_idTextAnchor014)，*引入SAFe®和DevOps*中最初讨论的Flickr成功的关键之一。跨部门的协作至今仍然是成功的关键。
- en: To have true collaboration, we need to work toward the mission-based, psychologically-safe
    generative culture we identified in [*Chapter 2*](B18756_02.xhtml#_idTextAnchor040),
    *Culture of Shared Responsibility*. With the movement to that type of culture,
    collective ownership happens and teams work together across disciplines to identify
    the root cause of problems and find solutions quickly. The problems then become
    opportunities for learning.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现真正的协作，我们需要朝着我们在[*第二章*](B18756_02.xhtml#_idTextAnchor040)，*共同责任文化*中识别的以任务为导向、心理安全的创造性文化迈进。随着这种文化的转变，集体拥有感就会产生，团队在不同领域之间协作，共同识别问题的根本原因，并迅速找到解决方案。这样，问题就会成为学习的机会。
- en: Chaos engineering
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混沌工程
- en: A worthwhile exercise that you can do proactively before releasing the feature
    is to perform a chaos engineering exercise, taking advantage of the feature flag
    so the effects are not seen by active customers.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布功能之前，你可以主动进行一个混沌工程练习，利用功能标志来确保影响不会被现有用户看到，这是一项值得做的练习。
- en: The most famous example of chaos engineering is done by Netflix. As detailed
    in the blog article at [https://netflixtechblog.com/the-netflix-simian-army-16e57fbab116](https://netflixtechblog.com/the-netflix-simian-army-16e57fbab116),
    Netflix runs a set of tools they call the Simian Army to simulate production outages
    in the Amazon Web Services cloud. The most famous of these is Chaos Monkey, which
    simulates a virtual server going down. These experiments are run during the business
    day, with plenty of engineers watching and addressing problems found.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 最著名的混沌工程案例来自Netflix。正如在[https://netflixtechblog.com/the-netflix-simian-army-16e57fbab116](https://netflixtechblog.com/the-netflix-simian-army-16e57fbab116)的博客文章中所详细描述的那样，Netflix运行了一套名为“Simian
    Army”的工具，模拟亚马逊Web服务云中的生产故障。其中最著名的工具是Chaos Monkey，它模拟虚拟服务器宕机。实验通常在工作日进行，工程师们会实时监控并处理发现的问题。
- en: You can run an exercise that is similar to an execution of Chaos Monkey. Run
    the experiment to simulate an outage condition to see whether your new feature
    is resilient enough. At the end of the experiment, determine the next steps with
    a debrief.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以进行类似于Chaos Monkey执行的练习。通过模拟故障情况来测试新功能是否足够健壮。在实验结束后，通过复盘来确定下一步行动。
- en: The complete approach is detailed in [*Chapter 6*](B18756_06.xhtml#_idTextAnchor138),
    *Recovering**from Production Failures*. Chaos engineering exercises can be performed
    on existing features that have been already released if there is sufficient time
    available in the error budget. Exercises can be performed on unreleased features
    with robust feature flag management.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的方法详细介绍请参见[*第六章*](B18756_06.xhtml#_idTextAnchor138)，*从生产故障中恢复*。如果在错误预算中有足够的时间，可以对已经发布的现有功能进行混沌工程练习。如果功能管理非常健全，可以对未发布的功能进行练习。
- en: Session replay
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 会话重放
- en: 'A useful tool for troubleshooting is session replay. Session replay is the
    ability to record individual users’ transactions and replay those transactions.
    The ability to perform session replay has the following benefits:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有用的故障排除工具是会话回放。会话回放是记录单个用户交易并回放这些交易的能力。执行会话回放具有以下优点：
- en: Developers can understand where users may have problems with the usability of
    a website and it gives insight on how users are really using a given feature
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员可以了解用户在网站的可用性方面可能遇到的问题，并且可以洞察用户如何真正使用某个功能。
- en: Developers can see the actions used to perform a fraudulent transaction on a
    website, which can lead to closing vulnerabilities
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员可以查看用于在网站上执行欺诈性交易的操作，这有助于关闭潜在的漏洞。
- en: For a production failure, developers can see the exact sequence of actions that
    users perform to cause the failure
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于生产故障，开发人员可以查看用户执行的具体操作序列，从而导致故障发生。
- en: Session replay that is performed on the client side presents the action from
    the end user’s point of view. These tools allow developers to see the position
    of the cursor, what clicks are made, and what gets typed in a video-like replay
    session. Dynatrace and Datadog are examples of tools that offer session replay.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端执行的会话回放展示了终端用户的操作视角。这些工具允许开发人员看到光标的位置、点击的内容以及输入的内容，像视频回放一样。Dynatrace 和 Datadog
    是提供会话回放功能的工具示例。
- en: Server-side-based session replay captures all website traffic and includes input
    of what gets typed and what gets clicked. Scrolling and mouse movements are not
    captured.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 基于服务器的会话回放捕获所有网站流量，包括键入内容和点击的内容，但不包括滚动和鼠标移动。
- en: When using session replay, attention must be given to the session data. Such
    data typically contains private information such as passwords and may require
    large amounts of storage capability.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 使用会话回放时，必须关注会话数据。此类数据通常包含私人信息，如密码，并且可能需要大量存储空间。
- en: Rollback and fix forward
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回滚和向前修复
- en: When production failures do occur, two quick methods to return to a stable environment
    include rollback and fix forward.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当生产故障发生时，恢复稳定环境的两种快速方法包括回滚和向前修复。
- en: Rollback involves reverting the production to a previous iteration, one that
    doesn’t include the most recent change that probably caused the production failure.
    As we saw in [*Chapter 6*](B18756_06.xhtml#_idTextAnchor138), *Recovering from
    Production Failures*, two common methods of rolling back are blue/green deployments
    and feature flags.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚是将生产环境恢复到先前的版本，即不包含可能导致生产故障的最新更改的版本。正如我们在[*第六章*](B18756_06.xhtml#_idTextAnchor138)《从生产故障中恢复》中看到的那样，回滚的两种常见方法是蓝绿部署和功能标志。
- en: Blue/green deployment is an easy way to roll back a production environment to
    an idle environment and the formerly idle environment back to the active state.
    Attention must be paid to components that represent state, such as databases or
    volatile storage. Those components require careful reversion when the transition
    back occurs.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝绿部署是一种简便的方法，可以将生产环境回滚到空闲环境，并将原先空闲的环境恢复为活跃状态。在回滚过程中，必须特别注意表示状态的组件，如数据库或易变存储。这些组件在回滚时需要谨慎处理。
- en: Feature flags are an easy way to remove the visibility of the new feature when
    its release causes a production failure. A toggle of a feature flag back to off
    does not require an extensive code or configuration change.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 功能标志是一种简便的方法，用来在新功能发布导致生产环境故障时隐藏该功能的可见性。将功能标志切换回关闭状态不需要进行大量的代码或配置更改。
- en: Fixing forward is another method for getting the production environment stable
    after a production failure. To fix forward, you develop and propagate the fix
    for the failure through the Continuous Delivery Pipeline so that it is deployed
    and released to production. When performing a fix forward, it is recommended that
    you use the standard deployment process through the Continuous Delivery Pipeline
    and not skip any testing. Bypassing testing to create a “quick fix” can lead to
    greater technical debt.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 向前修复是解决生产环境稳定性的另一种方法。为了进行向前修复，你需要在持续交付流水线中开发并传播故障修复，以便将其部署并发布到生产环境。当执行向前修复时，建议你通过持续交付流水线使用标准部署流程，并且不要跳过任何测试。绕过测试进行“快速修复”可能会导致更大的技术负担。
- en: Immutable architecture
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可变架构
- en: A primary reason for automating deployment to testing, staging, and ultimately
    the production environment is to make the architecture immutable. That is, any
    change in the environment cannot be made manually.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化部署到测试、预发布环境，最终到生产环境的一个主要原因是为了使架构不可变。也就是说，环境中的任何变化都不能手动进行。
- en: Any change in any environment must be made through the Continuous Delivery Pipeline
    and every artifact needed for that change must be recorded in version control.
    The close coupling with version control and the Continuous Delivery Pipeline prevents
    configuration drift or the difference in changes between environments.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 任何环境中的变化必须通过持续交付管道进行，并且每个变化所需的工件必须记录在版本控制中。与版本控制和持续交付管道的紧密耦合防止了配置漂移或不同环境之间的变化差异。
- en: Summary
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we continued our exploration of the Continuous Delivery Pipeline
    into the production environment. Our feature after having finished design in Continuous
    Exploration and development and testing in Continuous Integration, now finds itself
    ready for deployment to production. Automation plays a key role here in executing
    the steps to bring the change into the production environment, possibly using
    IaC to create and configure new production resources.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们继续探索将持续交付管道引入生产环境的过程。在持续探索阶段完成设计后，我们的特性进入了持续集成阶段进行开发和测试，现在准备部署到生产环境。自动化在执行将变化引入生产环境的步骤中起着关键作用，可能使用基础设施即代码（IaC）来创建和配置新的生产资源。
- en: Even with the new change in production, testing is performed to build confidence
    before release. Feature flags allow engineers and select beta customers to perform
    testing on new changes in production while concealed from the general user population.
    Test data in the form of synthetic transactions allow functional testing and testing
    of NFRs to occur.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在生产环境中引入了新变化，测试仍然会进行，以便在发布之前建立信心。功能标志允许工程师和选定的测试客户在生产环境中对新变化进行测试，同时对普通用户隐藏。以合成事务形式存在的测试数据允许进行功能测试和非功能性需求（NFRs）测试。
- en: Monitoring in the production environment allows us to see the success or failure
    of the testing in production. We want to ensure we are looking at the correct
    measurements from system resources all the way to those metrics that may serve
    as leading indicators that the changes we want are realizing our benefit hypothesis.
    We want this data visible on dashboards and transparent to everyone. If monitoring
    indicates problems in production, we are ready to act. The entire value stream
    works together to find the root cause. We can roll back to a previous version
    or fix the problem and propagate the fix using the Continuous Delivery Pipeline.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中的监控让我们能够看到生产中测试的成功或失败。我们希望确保从系统资源到可能作为领先指标的那些度量数据都能反映出我们希望实现的收益假设。我们希望这些数据在仪表盘上可见，且对所有人透明。如果监控显示生产环境出现问题，我们将准备采取行动。整个价值流协同工作，找到根本原因。我们可以回滚到之前的版本，或修复问题，并通过持续交付管道传播修复。
- en: 'Our change is now in the production environment. We now wait for the last event:
    releasing to our users so they can use it to their advantage. For this, we will
    examine the last stage of our Continuous Delivery Pipeline, release on demand,
    in our next chapter.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的变化现在已经进入生产环境。接下来，我们等待最后一个事件：发布给我们的用户，以便他们能利用这些变化。为此，我们将在下一章中探讨我们的持续交付管道的最后阶段——按需发布。
- en: Questions
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What helps reduce the lead time to deploy to production? (pick 3)
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么有助于减少部署到生产环境的交付时间？（选择3项）
- en: Unit testing
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Small batches of change
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 小批量变化
- en: Version control
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 版本控制
- en: Behavior-driven development
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 行为驱动开发
- en: Automating deployment
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动化部署
- en: What practice allows you to perform canary releases?
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪种实践可以让你执行金丝雀发布？
- en: Infrastructure as code
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基础设施即代码
- en: Blue/green development
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 蓝绿开发
- en: Selective deployment
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择性部署
- en: Self-service deployment
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自助部署
- en: Feature flags allow … (pick 3)
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 功能标志允许……（选择3项）
- en: Testers to view unreleased features in production
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试人员在生产环境中查看未发布的特性
- en: You to run unit tests faster
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让你更快地运行单元测试
- en: Developers to start a deployment to production
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发人员开始部署到生产环境
- en: Rollback of a new feature in the event of a production failure
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在生产环境故障发生时回滚新特性
- en: A select group of customers to do A/B testing
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行A/B测试的精选客户群体
- en: The execution of a CI/CD pipeline
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: CI/CD管道的执行
- en: Running a synthetic transaction in production can help measure … (pick 3)
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在生产环境中运行合成事务可以帮助衡量……（选择3项）
- en: Cycle time
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 周期时间
- en: Functionality
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 功能性
- en: Scalability
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可扩展性
- en: Availability
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可用性
- en: Response time
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 响应时间
- en: What levels of operation should full-stack telemetry measure?
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 全栈遥测应该衡量哪些操作级别？
- en: IT service management
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: IT服务管理
- en: Business
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 商业
- en: Solution
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决方案
- en: Infrastructure
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基础设施
- en: All of the above
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述所有
- en: What information can be played back in a server-side session replay?
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器端会话重播中可以回放哪些信息？
- en: Scrolling down the web page
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动网页
- en: Input fields on a web form
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网页表单上的输入字段
- en: Moving the mouse cursor from left to right
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标光标从左向右移动
- en: Horizontal scrolling to a button
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 水平滚动到按钮
- en: How are changes to production made in an immutable architecture?
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在不可变架构中如何进行生产环境的更改？
- en: The administrator changes a file in the production environment.
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理员更改生产环境中的文件。
- en: The administrator changes a configuration file and executes the IaC tool to
    create the change.
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理员更改配置文件并执行IaC工具来创建更改。
- en: The administrator changes a configuration file, submits the change into version
    control, and executes the CI/CD pipeline.
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理员更改配置文件，将更改提交到版本控制，并执行CI/CD管道。
- en: The administrator restarts the production server.
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理员重新启动生产服务器。
- en: Name two practices that help enable immutable architecture.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请列举两个有助于实现不可变架构的实践。
- en: Feature flags
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 特性标志
- en: Version control
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 版本控制
- en: CI/CD pipeline
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: CI/CD管道
- en: Blue/green deployment
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 蓝绿部署
- en: Behavior-driven development
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 行为驱动开发
- en: Further reading
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'A summary from Scaled Agile feature guidance on Continuous Deployment in the
    Continuous Delivery Pipeline: [https://www.scaledagileframework.com/continuous-deployment/](https://www.scaledagileframework.com/continuous-deployment/'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自Scaled Agile特性指导的总结，关于持续交付管道中的持续部署：[https://www.scaledagileframework.com/continuous-deployment/](https://www.scaledagileframework.com/continuous-deployment/)
- en: )
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'A look from a Meta (Facebook’s parent company) engineer describing how Facebook
    performs testing, deployment, and release: [https://engineering.fb.com/2017/08/31/web/rapid-release-at-massive-scale/](https://engineering.fb.com/2017/08/31/web/rapid-release-at-massive-scale/)'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自Meta（Facebook母公司）工程师的观点，描述了Facebook如何进行测试、部署和发布：[https://engineering.fb.com/2017/08/31/web/rapid-release-at-massive-scale/](https://engineering.fb.com/2017/08/31/web/rapid-release-at-massive-scale/)
- en: '*Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment
    Automation* by Jez Humble and David Farley – The authoritative guide on creating
    a CI/CD pipeline and detailing integration, deployment, and release.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*持续交付：通过构建、测试和部署自动化实现可靠的软件发布*，作者Jez Humble和David Farley——关于创建CI/CD管道的权威指南，详细讲解了集成、部署和发布。'
- en: 'A blog article from LaunchDarkly, a vendor for feature flag management, describing
    the uses and benefits of feature flags: [https://launchdarkly.com/blog/guide-to-dark-launching/](https://launchdarkly.com/blog/guide-to-dark-launching/)'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自LaunchDarkly的博客文章，LaunchDarkly是特性标志管理的供应商，描述了特性标志的使用和好处：[https://launchdarkly.com/blog/guide-to-dark-launching/](https://launchdarkly.com/blog/guide-to-dark-launching/)
- en: 'An article describing the advantages of performing testing in production: [https://www.softwaretestingmaterial.com/testing-in-production/](https://www.softwaretestingmaterial.com/testing-in-production/)'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一篇文章描述了在生产环境中进行测试的优势：[https://www.softwaretestingmaterial.com/testing-in-production/](https://www.softwaretestingmaterial.com/testing-in-production/)
- en: 'A detailed blog article describing the uses and advantages of testing in production:
    [https://www.tothenew.com/blog/testing-in-production-environment-what-why-and-how/](https://www.tothenew.com/blog/testing-in-production-environment-what-why-and-how/)'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一篇详细的博客文章，描述了在生产环境中进行测试的用途和优势：[https://www.tothenew.com/blog/testing-in-production-environment-what-why-and-how/](https://www.tothenew.com/blog/testing-in-production-environment-what-why-and-how/)
- en: 'An article describing how testing is done in production at Facebook using Gatekeeper
    to monitor the user tests in production: [https://www.facebook.com/notes/10158791573022200/](https://www.facebook.com/notes/10158791573022200/)'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一篇文章描述了Facebook如何使用Gatekeeper监控生产环境中的用户测试：[https://www.facebook.com/notes/10158791573022200/](https://www.facebook.com/notes/10158791573022200/)
- en: 'A blog article describing the use of synthetic transactions in testing new
    features: [https://www.netreo.com/blog/synthetic-transactions/](https://www.netreo.com/blog/synthetic-transactions/)'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一篇博客文章，描述了在测试新特性时使用合成事务：[https://www.netreo.com/blog/synthetic-transactions/](https://www.netreo.com/blog/synthetic-transactions/)
- en: 'A blog article from Netflix engineers describing how they perform chaos engineering
    with the set of tools they call “the Simian Army”: [https://netflixtechblog.com/the-netflix-simian-army-16e57fbab116](https://netflixtechblog.com/the-netflix-simian-army-16e57fbab116)'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一篇来自Netflix工程师的博客文章，描述了他们如何使用一套称为“猴子军团”的工具进行混沌工程：[https://netflixtechblog.com/the-netflix-simian-army-16e57fbab116](https://netflixtechblog.com/the-netflix-simian-army-16e57fbab116)
