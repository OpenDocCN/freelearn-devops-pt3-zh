- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Understanding Event-Driven Architecture
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解事件驱动架构
- en: Al freir de los huevos lo vera. (It will be seen in the frying of the eggs.)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Al freir de los huevos lo vera.（“在煎蛋时会看到的。”）
- en: – Miguel de Cervantes (Don Quixote)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: – 米格尔·德·塞万提斯（《堂吉诃德》）
- en: In any application, everything can be divided into **events**. Events are triggered
    either by some interaction with an external actor (either another application
    or a user) or by other events. An application is basically the triggering of multiple
    sequences of events to perform some sort of function. Google Drive, for example,
    is an application, and its function is just storage. Of course, this is an oversimplification
    and there are a lot of things that go into storing, organizing, and serving files,
    but that is the basic gist of it. It functions based on a series of events, each
    of which comes from a certain source.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何应用中，一切都可以被划分为**事件**。事件是通过与外部行为者（另一个应用程序或用户）的某种交互，或通过其他事件触发的。一个应用程序本质上是触发多个事件序列以执行某种功能。例如，Google
    Drive 就是一个应用，它的功能就是存储。当然，这是一个过于简化的描述，存储、组织和提供文件的过程中有很多内容，但这就是其基本含义。它是基于一系列事件进行工作的，每个事件都来自于某个特定的来源。
- en: 'Now, different events require different technologies, frameworks, and libraries
    within the system to interact with each other in perfect harmony. When this harmony
    is naturally achieved, it is a thing of beauty. However, it almost never is. There
    is always some sort of bottleneck or some custom part that needs to be made, and
    it almost always concerns the data that comes from an event. You can have the
    perfect tool for your system but it’s useless if it cannot process the events
    that it receives. So, what conclusion did all the brainiacs come up with when
    they realized this? They figured out that there are no perfect systems, nor are
    there perfect events. What is required is a system that is not tightly bound to
    any sort of data processing, a system that can take a bit of human error. Not
    a less precise system, but one that works with the realities of the situation
    that it has been put in: a loosely coupled system.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，不同的事件需要系统中的不同技术、框架和库来完美地相互作用。当这种和谐自然地实现时，它是一种美丽的景象。然而，这几乎从来都不是这样。总会有某种瓶颈，或者需要制作某个自定义部分，而这几乎总是与来自事件的数据有关。你可以拥有适合你系统的完美工具，但如果它不能处理接收到的事件，那么它是没用的。那么，当所有聪明人意识到这一点时，他们得出了什么结论？他们意识到没有完美的系统，也没有完美的事件。所需要的是一个不与任何数据处理紧密绑定的系统，一个能够容忍一些人为错误的系统。不是一个不精确的系统，而是一个能够适应它所处现实情况的系统：一个松耦合的系统。
- en: Systems such as these are built so that they take events from multiple sources
    and process them for output in the simplest way possible. They break down every
    single event and event handler into their own components. These components then
    interact with other components based entirely on the input they receive and the
    output they give. If it can be helped, no component is fully dependent on the
    other. A system like this may seem inefficient, but when the goal is reliability
    in an unreliable world, it becomes quite appealing.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这类系统是为了能够从多个来源获取事件，并以尽可能简单的方式进行处理输出。它们将每一个事件和事件处理器分解为各自的组件。这些组件基于它们接收到的输入和它们产生的输出与其他组件进行交互。如果可以避免的话，任何组件都不应完全依赖于另一个组件。这样的系统可能看起来效率不高，但当目标是确保在不可靠的世界中实现可靠性时，它就变得非常有吸引力。
- en: 'So, now that I have finished my customary monologue, let’s look at how to break
    down that unnecessary monolith. In this chapter, you will learn about the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在我已经完成了惯常的独白，让我们看看如何打破那个不必要的巨型模块。在本章中，你将学习以下内容：
- en: The basic concepts behind and use of **Publisher/Subscriber** (**Pub/Sub**)
    architecture
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布者/订阅者**（**Pub/Sub**）架构的基本概念和使用'
- en: The general concept behind **loosely coupled architecture** and why Python is
    already well suited for it
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**松耦合架构**的基本概念，以及为什么 Python 已经非常适合它'
- en: The effective industry standard for breaking down a monolithic application into
    smaller loose components
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将单体应用分解为更小松散组件的有效行业标准
- en: There will also be some Python, as well as some other things. In fact, that
    is exactly what I am about to get into right now.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还会涉及一些 Python 以及其他一些内容。事实上，这正是我现在要深入探讨的内容。
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following may help you in fully benefiting from this chapter:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容可能有助于你充分受益于本章：
- en: Python installed with the `confluent-kafka` library
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装 `confluent-kafka` 库的 Python
- en: An AWS account
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 AWS 账户
- en: An open mind (figuratively, not literally; well, if you want to do so literally,
    it’s fine but I don’t recommend it)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开思维（比喻地讲，不是字面上的；如果你非要字面理解，也没问题，但我不推荐这样做）
- en: Introducing Pub/Sub and employing Kafka with Python using the confluent-kafka
    library
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入 Pub/Sub 并使用 confluent-kafka 库在 Python 中应用 Kafka
- en: 'Before we get into what the modern Pub/Sub model is, let’s go into a bit of
    detail about the technology that made this field possible: **Apache Kafka**, the
    third most famous Kafka after Franz and *Kafka on the Shore*. Originally designed
    for use in LinkedIn (a great website), it was made open source in early 2011\.
    The concept behind it was pretty simple: there is a log of information and events
    that any number of systems can consume, and data can be published to the log for
    consumption by these systems. Sound simple enough? Well, it is now, but it took
    some thinking to come up with it. But this is the system that is responsible for
    most modern data infrastructure that we see today. Have you ever gotten a notification
    on your phone? It is because of this library. Have you ever made a contactless
    payment with your phone or credit card? Chances are, Kafka’s in there. Ever gotten
    a notification for a YouTube video? Definitely Kafka.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨现代 Pub/Sub 模型之前，让我们先了解一些使这一领域成为可能的技术：**Apache Kafka**，继 Franz 和 *Kafka
    on the Shore* 之后的第三大著名 Kafka。最初为 LinkedIn（一个伟大的网站）设计，2011 年初开源。其背后的概念非常简单：有一个信息和事件的日志，任何数量的系统都可以消费该日志中的数据，并且数据可以发布到该日志中供这些系统消费。听起来很简单吧？现在是，但要想出这个想法也不是一件容易的事。但正是这个系统支撑着我们今天所看到的大多数现代数据基础设施。你曾收到过手机上的通知吗？那是因为这个库。你曾用手机或信用卡进行过无接触支付吗？很可能背后有
    Kafka。你曾收到过 YouTube 视频的通知吗？肯定是 Kafka。
- en: In most cases where raw unadulterated Kafka is used, the distributor of information
    is called the **producer** and the receiver of said information is called the
    **consumer**. In most modern nomenclature, as well as with most cloud services,
    they are instead called the **publisher** and the **subscriber**.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数使用原生 Kafka 的情况下，信息的分发者称为 **生产者**，而接收该信息的则称为 **消费者**。在大多数现代术语中，尤其是在大多数云服务中，它们分别被称为
    **发布者** 和 **订阅者**。
- en: "![Figure 8.1 – Events processing with the \uFEFFPub/\uFEFFSub model](img/B21320_08_1.jpg)"
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – 使用 Pub/Sub 模型的事件处理](img/B21320_08_1.jpg)'
- en: Figure 8.1 – Events processing with the Pub/Sub model
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – 使用 Pub/Sub 模型的事件处理
- en: 'Before we dive into the use of Kafka and Python in DevOps, we must first look
    at a sample usage of Kafka with Python using the `confluent-kafka` library:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨 Kafka 和 Python 在 DevOps 中的应用之前，我们首先需要看一下使用 `confluent-kafka` 库在 Python
    中应用 Kafka 的示例：
- en: 'Let’s first install the library using `pip`:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先使用 `pip` 安装这个库：
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, as mentioned before, Kafka is divided between a producer and a consumer.
    So, let’s first write a piece of code that creates a producer:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，Kafka 分为生产者和消费者。那么，首先让我们写一段代码来创建一个生产者：
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This code will configure a producer. Replace `host_name` with the name of an
    Apache Kafka cluster (online or locally). Next, we need to use the configured
    producer to send some data. Let’s look at that code now:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这段代码将配置一个生产者。将 `host_name` 替换为一个 Apache Kafka 集群的名称（可以是在线或本地的）。接下来，我们需要使用配置好的生产者来发送一些数据。让我们现在看一下这段代码：
- en: '[PRE2]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, `topic` is the location where the publisher or producer will distribute
    their content for it to be consumed. The `key` and the `value` elements are the
    keys and values that will be distributed by the producer.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，`topic` 是发布者或生产者将其内容分发到的地方，供消费。`key` 和 `value` 元素是生产者将分发的键和值。
- en: 'Let’s now add some code for a consumer that will pick up messages sent by the
    producer:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们为消费者添加一些代码，消费者将接收生产者发送的消息：
- en: '[PRE3]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The consumer now listens on the same host that the producer sends messages on.
    So, when the producer produces a message, the consumer can consume it. When a
    consumer is subscribed to a topic, that consumer is constantly listening to the
    message at certain intervals. Once the message arrives, it will begin the process
    of interpreting the message and sending it to the appropriate location.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 消费者现在在与生产者发送消息相同的主机上监听。因此，当生产者生产一条消息时，消费者就能消费它。当消费者订阅了一个主题时，该消费者会在特定时间间隔内不断监听该消息。一旦消息到达，它将开始解析消息并将其发送到适当的位置。
- en: 'To have the consumer continually listen to the producer for messages, we can
    place it in a loop:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让消费者持续监听生产者的消息，我们可以将其放入一个循环中：
- en: '[PRE4]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is simply understanding the way that these Pub/Sub mechanisms work. In
    application, it is much easier since some sort of mechanism to perform this will
    already be provided for you. This is, however, a good way to learn how to make
    custom Pub/Sub structures if you want to, and to just understand Pub/Sub structures
    in general.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是理解这些发布/订阅机制如何工作的方式。在实际应用中，这会变得更容易，因为某种执行这个机制的工具已经为你提供了。然而，如果你想了解如何创建自定义的发布/订阅结构，或者只是想一般性地了解发布/订阅结构，这是一个很好的学习方法。
- en: 'Here’s what the key takeaway from this should be: this is how the world works.
    Exactly like this. Most of the things that come to your phone come from this.
    Most of the things that go out of your phone go to this. It’s also true on a more
    fundamental level as well, as we will see in the next section.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里应该有的关键收获是：这就是世界的运作方式。就像这样。你手机上大部分的内容就是这样传递的。你手机上发出的内容也大多是通过这种方式传递的。在更基础的层面上，这同样成立，正如我们在下一节中将看到的那样。
- en: Understanding the importance of events and consequences
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解事件和后果的重要性
- en: Alright, so now you are in on the secret. Everything is push and pull. People
    just toss data out there and hope it hits something. And if you’ve also realized
    that that is the most effective approach toward growth and development, kudos
    to you. If you haven’t, well, we are about to go into a little story time.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，现在你已经知道了这个秘密。一切都是推送和拉取。人们只是把数据抛出去，希望它能碰到某个东西。如果你也意识到，这就是增长和发展的最有效方法，那么恭喜你。如果没有，那我们接下来要进入一个小故事时间。
- en: I currently live in Uppsala, Sweden, and for quite a while, I thought I was
    the only person from Nepal who lived here. Now, Uppsala is a big town by Swedish
    standards and a lot of students from all over the world live here as well. But,
    even if Nepalese people lived here, how would I have known them? Something that
    specific is very hard to find, even in this day and age. But then, the most remarkable
    set of coincidences (some may even say events, eh?) happened, which brought me
    into contact with other people from Nepal. I only realized just how remarkable
    they were once I backtracked through all of them.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我目前住在瑞典的乌普萨拉，曾经很长一段时间，我以为我在这里是唯一一个来自尼泊尔的人。现在，乌普萨拉按瑞典的标准算是一个大城市，来自世界各地的很多学生也住在这里。但即使尼泊尔人住在这里，我又怎么知道他们呢？即使在这个时代，这么具体的事情也很难找到。但随后，一系列极为巧合的事件（有些人甚至会说是“命运的安排”吧？）发生了，它们把我带到了其他来自尼泊尔的人身边。只有当我回顾这些事件时，我才意识到它们是多么令人瞩目。
- en: I had just recently gotten a job offer (the one that I currently have) in Stockholm
    and I was getting on the train to Stockholm to iron out the details. On the train,
    I met a friend of mine with whom I collaborate on projects at the student union
    in Uppsala. In fact, we had met just the other day to discuss those projects.
    I saw him and sat down next to him, and I saw that he was with two other friends.
    One of them was a teaching assistant on a project that I had to submit the very
    next day. That was cool, but that wasn’t even the most important event that happened
    on the train. His other friend and I got to talking and, through him, I got the
    number of another Nepalese person who was also living in Uppsala. What kismet!
    Through that person, I have actually managed to find almost a dozen others who
    live in the same town as me, who have come on the same journey.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我最近刚收到了一份工作邀请（就是我现在的工作），要去斯德哥尔摩，并且正在搭乘去斯德哥尔摩的火车来细化细节。在火车上，我遇到了一个朋友，他是我在乌普萨拉学生会合作项目中的合作者。事实上，我们前几天才见面讨论这些项目。我看到他坐在那，便坐到了他旁边，发现他还和另外两个朋友在一起。其中一个是我第二天就要提交的项目的助教。那挺酷的，但这甚至不是我在火车上遇到的最重要的事。另一位朋友和我开始聊天，经过他，我得到了一个在乌普萨拉生活的尼泊尔人的电话号码。真是命运！通过那个人，我实际上找到了将近十个住在和我同一个小镇的人，他们和我一样也走上了同样的旅程。
- en: 'So, here’s the thing: I skipped to the end of this story because, in a way,
    that’s how we live our lives, trying to finish something up and get to the end
    of the story to begin a new one. It is how we read, how we consume content, and
    basically, how we behave socially. But, over time, I contemplated the story, and
    I thought back to the set of events that had brought me up to that point, so let’s
    backtrack (and I promise there is a satisfying conclusion to this that isn’t just
    me bragging about my luck):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，事情是这样的：我跳到了故事的结尾，因为，从某种意义上说，这就是我们生活的方式，试图完成某些事情，走到故事的结尾，然后开始一个新的故事。这是我们阅读的方式，是我们消费内容的方式，基本上，也是我们社交的方式。但是，随着时间的推移，我反思了这个故事，回想起一系列将我带到那个时刻的事件，所以让我们倒回去（我保证，这个故事有一个令人满意的结局，并不仅仅是我在炫耀我的运气）：
- en: I met my friend who introduced me to his friend on the student union developer
    team
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我遇到了那位朋友，他把我介绍给了他在学生会开发团队的朋友。
- en: I joined that team to try and make some new friends in Uppsala, but the information
    for that came from a WhatsApp group that I joined based on a recommendation from
    another friend from my faculty
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我加入那个团队是为了在乌普萨拉结交一些新朋友，但得到这个信息是因为我加入了一个 WhatsApp 群组，那个群组是根据我另一个学长的推荐加入的。
- en: I became friends with him before we even joined the faculty because we ended
    up on a student nation tour (look up Uppsala student nations for a fun and interesting
    read)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们还没有加入学院之前，我就和他成为了朋友，因为我们最终一起参加了一个学生组织的旅行（如果你想了解更多有趣的内容，可以查一下乌普萨拉的学生社团）。
- en: I joined that tour because of the recommendation that I got on my first day
    in Uppsala during my orientation
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我参加那个旅行是因为在我第一天参加乌普萨拉的迎新活动时，得到了推荐。
- en: 'But this is the saner half of the event tree that led to this event. The other
    half is even more interesting:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但这是导致这一事件的事件树的理性一半，另一半更有趣：
- en: I was on that train because I went to sign a job contract.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我坐在那列火车上，因为我要去签工作合同。
- en: I got the offer for that job because I made a post about having all 11 Google
    Cloud certifications on the Google forums, and the company that I currently work
    for just happened to notice.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我获得那份工作的邀请，是因为我在 Google 论坛上发布了自己拥有所有 11 个 Google Cloud 认证的动态，而我现在工作的公司恰好注意到了。
- en: I made that post exclusively because I got all 11 of those certifications. I
    got the last one on the day before I left for Sweden. Had I only gotten 10, I
    wouldn’t have made it.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我发布那条动态是因为我获得了所有 11 个认证。我是在离开瑞典的前一天获得最后一个认证的。如果我只获得了 10 个，我就不会发布那条动态了。
- en: I got those certifications largely as a sort of reinforcement of the knowledge
    that I wanted to deliver with this book.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我获得那些认证，主要是作为我希望通过这本书传递的知识的一种补充。
- en: I got the offer for this book from my publisher after applying for it based
    on the link that I found in one of their other books, which was a Google Cloud
    examination book.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我收到出版社的这本书邀请是在我申请时通过他们其他书籍中的一个链接找到的，这本书是一本关于 Google Cloud 考试的书。
- en: 'So, in a roundabout way, writing this book helped me secure the job I have
    today, and it eventually led to me finding more Nepalese people in Uppsala. If
    you couldn’t be bothered with all of that, let me show it to you visually:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，间接地，写这本书帮助我获得了现在的工作，并最终让我在乌普萨拉找到了更多的尼泊尔人。如果你懒得了解这些，让我用图示给你展示：
- en: '![Figure 8.2 – The events that drove a part of my life](img/B21320_08_2.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – 驱动我生活一部分的事件](img/B21320_08_2.jpg)'
- en: Figure 8.2 – The events that drove a part of my life
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – 驱动我生活一部分的事件
- en: The events in our lives lead to the most extraordinary circumstances, and this
    was just one of the events that came about from this whole saga. Several other
    remarkable things happened through all of this that made me realize that the true
    consequences of our actions are truly unpredictable and yet, most of the time,
    a lot better or at least more exciting than anything we could have possibly planned.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生活中的事件会导致最非凡的情况，这只是从整个故事中出现的一个事件。在这一过程中发生了许多其他值得注意的事情，这让我意识到我们行动的真正后果是无法预测的，但大多数时候，这些后果比我们可能规划的要好得多，或者至少更令人兴奋。
- en: Self-indulgent? Probably. But that is the magic of DevOps. Conforming to tight
    structures and solid preconceived notions leads to fear and stunts growth. They
    hide and overshadow opportunities that spontaneity brings. There is no room to
    find, discover, and fail. Yes, fail, because in something so tightly packed as
    a monolith, failure can be disastrous. In something loosely coupled, failure is
    simply a growth opportunity. You can move pieces in and out and iterate to your
    best possible version. You may look at my story and say that a lot of it is luck
    and coincidence – for example, in finding the exact person I needed on the train
    or just happening to have my forum post viewed – but luck is simply an amalgamation
    of one’s sustained attempts. People sometimes get lucky once or twice, but people
    who are not afraid to fail and who go with the flow are found to be lucky a lot
    more. God hates a coward.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 自我放纵？可能吧。但这就是DevOps的魔力。遵循严格的结构和固有的先入为主的观念会导致恐惧并阻碍成长。它们隐藏并掩盖了自发性所带来的机会。没有空间去发现、探索和失败。是的，失败，因为在像单体架构这样紧凑的系统中，失败可能是灾难性的。而在松耦合的架构中，失败仅仅是一次成长的机会。你可以不断调整组件并反复迭代，直到达到最佳的版本。你可能会看我的故事，并说这其中有很多是运气和巧合——例如，在火车上碰到正好需要的人，或者恰巧我的论坛帖子被看到——但运气不过是持续尝试的结果。人们有时会幸运一次或两次，但那些不怕失败并顺其自然的人通常会变得更加幸运。上帝不喜欢懦夫。
- en: So, switching gears to something a little less philosophical, loosely coupled
    architecture is a sort of framework you can use to achieve this kind of meaningful
    event-based system in your workload. This entire passage was initially supposed
    to be the next section before it took a life of its own (spontaneity, amirite?).
    So, let’s dive into the actual nitty-gritty now and see what we can find.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们来转到一个稍微少一点哲学意味的话题，松耦合架构是一种框架，你可以用它来实现这种在工作负载中基于事件的有意义的系统。最初，这一段应该是下一节的内容，但它却自然而然地发展成了这样（这就是自发性，不是吗？）。那么，接下来我们就来深入挖掘，看看我们能发现什么。
- en: Exploring loosely coupled architecture
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索松耦合架构
- en: Alright, in a vacuum, loosely coupled architecture seems like a bad idea. You
    disperse your components so much that there is no rhyme or reason as to how any
    information gets from one place to another. You can’t count any sort of consistent
    time for all your data to collate into one place for the thing you want to happen
    to actually happen.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，在一个封闭的环境中，松耦合架构看起来像是个糟糕的主意。你把组件分散得太远，以至于信息从一个地方到另一个地方的传递没有任何规律可言。你无法为所有的数据找到一致的时间，确保它们能汇聚到一个地方，进而让你想要的事情最终发生。
- en: However, there are a few factors that make loosely coupled architecture so effective
    in a practical setting. These factors are both philosophical and architectural.
    Firstly, no matter how well you design a system, it will fail somewhere at some
    time. The loosely coupled architecture allows the system to fail gracefully and
    to recover from failures in a way that doesn’t affect other components and users
    of the system. Because each component is isolated, these components can be identified
    after a single failure (a lot of the time, a clone component will succeed). This
    failure can be logged and detected and the correct parties can be notified without
    any interruption to the system. The failed component will not disrupt activities
    and it is not considered to be a bad thing. In fact, failure teaches us the weaknesses
    and shortcomings of the system, which can then be worked on quickly because you
    are only working on that isolated component.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，松耦合架构在实际环境中之所以如此有效，有一些因素是不可忽视的。这些因素既有哲学上的，也有架构上的。首先，无论你如何设计一个系统，它总会在某个时间、某个地方出现故障。松耦合架构允许系统优雅地失败，并能够以不影响系统其他组件和用户的方式从失败中恢复。由于每个组件都是独立的，故障通常可以通过失败的单个组件来定位（很多时候，克隆组件会成功）。这个故障可以被记录、检测，并且可以通知相关方，而不会对系统造成任何中断。失败的组件不会干扰活动，也不被视为坏事。事实上，失败教会了我们系统的弱点和不足之处，这些不足可以迅速被解决，因为你只需处理那个孤立的组件。
- en: The next factor comes from availability. Loosely coupled architecture offers
    small components that are replicated for each individual use. Now, you would say
    that this is a limit in and of itself since even if you can divide the resources
    between users, there won’t be enough resources to go around. In the past, this
    would have been true, but with modern applications running on the cloud, there
    can be infinite provisioning for services that support a loose architecture. You
    can handle the volume of resources effectively because the scale for the services
    that can run this kind of architecture is nearly infinite. This results in an
    environment where an architecture that will provision based on use becomes the
    optimal architecture. A more tightly coupled architecture might suit more limited
    means, but that is not the case for scenarios with flexible resources and unknown
    loads.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个因素来自于可用性。松散耦合的架构提供了为每个单独的用途复制的小组件。现在，你可能会说，这本身就是一个限制，因为即使你可以将资源在用户之间进行划分，仍然无法提供足够的资源供每个人使用。在过去，这确实是事实，但随着现代应用程序在云端运行，支持松散架构的服务可以进行无限制的资源配置。你可以有效地处理资源的数量，因为能够运行这种架构的服务的规模几乎是无限的。这导致了一个环境，在这种环境中，基于使用情况进行配置的架构成为最优架构。更紧密耦合的架构可能适合资源有限的情况，但对于资源灵活且负载不确定的场景来说，情况则不同。
- en: 'Finally, the last factor that puts loosely coupled architecture in the lead
    is laziness. Yes, laziness. I have found in my life that the leading cause behind
    my laziness is not the fact that I don’t want to do something, but rather because
    my brain is overwhelmed with useless information about something that I might
    want to do. I started actually getting somewhere when instead of trying to figure
    out these minutiae in a way that was ineffective and useless, I just started doing
    things and figuring them out as I went along. That’s basically why loosely coupled
    architecture is good. There are fewer things to worry about and it is easier to
    work on. Instead of worrying about every single little thing before you even start
    implementing the system, you can just start implementing and worry about optimization
    later. This is perfect for someone like me who uses this approach for practically
    everything, and it’s the same for some of the biggest companies in the world as
    well. If you’ve heard of the Toyota way, it essentially follows the same principle:
    making mistakes and learning from them to get better. You can look it up; I encourage
    you to. But, in conclusion, this type of architecture is for the lazy, pragmatic
    developer who is just trying to get somewhere.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将松散耦合架构置于领先地位的最后一个因素是懒惰。是的，懒惰。我发现，在我的生活中，导致我懒惰的主要原因不是因为我不想做某事，而是因为我的大脑被关于某件我可能想做的事情的无用信息淹没。真正让我有所进展的是，当我不再试图以无效和无用的方式去弄清楚这些琐事，而是开始去做事情并在过程中搞明白它们时。基本上，这就是松散耦合架构之所以有效的原因。需要担心的事情更少，工作也更容易。你不需要在开始实现系统之前担心每一个细节，而是可以直接开始实现，优化的事情可以稍后再考虑。这对像我这样几乎在所有事情上都采用这种方法的人来说是完美的，对于一些全球最大的公司来说也是一样。如果你听说过丰田方式，它基本上遵循相同的原则：犯错并从中学习，变得更好。你可以去查阅一下；我鼓励你这么做。但总的来说，这种架构适合懒惰的、务实的开发者，他们只是在努力前进。
- en: 'For the past several paragraphs, you have endured my philosophical rants, and
    now we get to the more pragmatic part where I show you stuff and try to reinforce
    what I ranted about. So, that is what we’re going to get into right now. We are
    going to make a basic application (just a lambda function, actually) that is triggered
    when an image is uploaded into an S3 bucket, takes the image and resizes it to
    a standard size, deletes the original image, and replaces it with the resized
    one:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几段中，你已经忍受了我哲学性的漫谈，现在我们进入更实际的部分，我将展示一些东西并尝试强化我之前讨论的内容。所以，这就是我们现在要探讨的内容。我们将创建一个基本的应用程序（其实只是一个
    lambda 函数），当图片上传到 S3 存储桶时触发，获取该图片并将其调整为标准大小，删除原始图片，并用调整后的图片替换它：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is a simple code for a very simple yet important function. The trigger
    for the image conversion can be placed either at the lambda function or the S3
    bucket itself. If you have ever used one of those online services that convert
    your PDF to a Microsoft Word document or convert your WAVs into MP3s, they basically
    run on this concept. Even with a very minimal interface, they can be very effective
    and quite popular.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的代码，执行一个简单却重要的功能。图像转换的触发器可以放在lambda函数或S3存储桶本身。如果你曾使用过那种在线服务，将PDF转换成Microsoft
    Word文档或将WAV文件转换成MP3文件，它们基本上就是基于这个概念运行的。即使界面非常简单，它们也能非常有效且相当受欢迎。
- en: Perhaps before reading this book, you may have had the misconception that building
    some of these services might be difficult. In the world we live in, they are not.
    Once we have opened these horizons, everything becomes clearer, and one of the
    things that becomes clearest of all is the ability to move on from the old inefficient
    ways into newer, simpler ways. Let’s look at the path to that transition.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 或许在阅读本书之前，你可能曾误以为构建这些服务可能很困难。但在我们生活的这个世界里，它们并不难。一旦我们打开了这些视野，一切就变得更加清晰，而最清晰的一点就是能够从旧的低效方式转变为更新、更简单的方式。让我们来看看这一过渡的路径。
- en: Killing your monolith with the strangler fig
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用“缠绕无花果”杀死你的单体应用
- en: 'If you oppose killing anything (and I understand), simply change the word/s
    in your mind to happier ones (such as “sleeping” or “napping”). But the **strangler
    fig** is being talked about here because it is one of the most prominent methods
    in the **digital transformation** and/or modernization of applications. You may
    have heard the term digital transformation and immediately dismissed it as some
    buzzword, which, fair enough, most of the time when people use that word, it is.
    But open your eyes and ears for a moment and treat the term for what it actually
    is: it is changing old things into new things. It is basically changing your system
    from within while either maintaining the same functionality or increasing functionality.
    It is the breaking of the monolith into a loosely coupled architecture.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你反对“杀死”任何东西（我能理解），你只需在心里把这些词换成更令人愉快的词汇（例如“沉睡”或“小憩”）。但这里提到的**缠绕无花果**，正是因为它是**数字化转型**和/或应用现代化过程中最显著的方法之一。你可能听过“数字化转型”这个词，并且立刻把它当作一个时髦词抛之脑后，这也不无道理，因为大多数时候人们提到这个词时，确实就是一个空洞的流行语。但请睁开眼睛和耳朵，暂时抛开成见，理解这个词的真正含义：它是在将旧事物转变为新事物。基本上，它是在不改变或增加功能的情况下，从内部改变你的系统。它是将单体应用拆解为松耦合架构。
- en: 'For starters, let’s look at the potential structure of a monolithic application:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们来看一下单体应用的潜在结构：
- en: '![Figure 8.3 – A basic monolith](img/B21320_08_3.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3 – 一个基本的单体应用](img/B21320_08_3.jpg)'
- en: Figure 8.3 – A basic monolith
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 – 一个基本的单体应用
- en: 'It’s quite crude, but that is basically how most monolithic applications are
    structured. They have a user interface, which interacts with two different types
    of operations: operations on the database and generic data operations (**Misc**
    in the diagram). Even this monolith is rather more divided than regular monoliths
    since we have given it a separate database. The database can also be directly
    within the monolith sometimes.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常粗糙，但基本上大多数单体应用的结构就是这样。它们有一个用户界面，用户界面与两种不同类型的操作进行交互：对数据库的操作和通用数据操作（图中的**杂项**）。即便如此，这个单体应用也比普通的单体应用要更为分层，因为我们给它分配了一个独立的数据库。数据库有时也可能直接存在于单体应用内部。
- en: Breaking down this monolith is not just about making it disassociated; it is
    about making sure that each component can act as an individual entity in case
    it becomes of use in some other project or in a different way in the same project.
    But to continue with the breaking down of this monolith, we can keep that going
    by first removing the miscellaneous functions that require no interaction with
    the users or the database from the monolith.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 打破这个单体应用并不仅仅是使其解耦，而是确保每个组件能够作为独立的实体存在，以便它在其他项目中或在同一项目中的不同方式下可能派上用场。但为了继续拆解这个单体应用，我们可以通过首先从单体应用中移除那些不需要与用户或数据库交互的杂项功能来实现。
- en: '![Figure 8.4 – Removing miscellaneous APIs from the monolith](img/B21320_08_4.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图8.4 – 从单体应用中移除杂项API](img/B21320_08_4.jpg)'
- en: Figure 8.4 – Removing miscellaneous APIs from the monolith
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – 从单体应用中移除杂项API
- en: So, this diagram indicates that the separation between the monolith and the
    miscellaneous functions divides those functions into individual components. This
    is the foundation of serverless architecture. It is all about exclusively having
    individual functions as individual endpoints to call only for certain use cases.
    This stage helps get the easy stuff out of the way and also helps make it so that
    the people performing the transformation can practically start grasping the concept
    behind it. It’s a lot easier to manage random functions if they are just endpoints
    somewhere that you can call randomly and modify to suit certain needs.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这个图表表明，单体应用与杂项功能之间的分离将这些功能划分为独立的组件。这是无服务器架构的基础。其核心思想是将每个功能作为单独的端点，仅在特定用例下进行调用。这一阶段有助于将简单的事情处理掉，并且帮助执行转型的人实际开始理解其中的概念。如果这些随机功能只是某个可以随时调用并根据需求进行修改的端点，管理起来会容易得多。
- en: Now, the next step toward breaking down this monolith is the division of the
    user interface and the backend portion that performs the data operations. This
    involves placing an API or a backend for the frontend in between them.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，拆分单体应用的下一步是用户界面与执行数据操作的后端部分的划分。这涉及将一个前端的 API 或后端置于它们之间。
- en: '![Figure 8.5 – A fully decoupled architecture](img/B21320_08_5.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5 – 完全解耦的架构](img/B21320_08_5.jpg)'
- en: Figure 8.5 – A fully decoupled architecture
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – 完全解耦的架构
- en: 'The final structure after breaking down the monolith looks like *Figure 8**.5*.
    It’s a bit like my consequences diagram but not as foolish. There are a lot of
    moving parts here, but then again, there are a lot of moving parts in cars too;
    it’s what makes them work. More importantly, let’s look at this from the lens
    of the two things emphasized in this chapter, availability and failure:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在将单体应用拆分之后，最终的结构看起来像*图 8.5*。它有点像我的后果图，但不那么愚蠢。这里有很多活动的部分，但车子里也有很多活动的部件；这正是它们能运作的原因。更重要的是，让我们从本章强调的两个方面来看待这个问题：可用性和故障：
- en: If the user interface for some reason stops loading, it will fall back to a
    different region. This region will have the same capabilities; if it’s further
    from the user, it might be slower, but it will do the job.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用户界面由于某种原因停止加载，它将会回退到不同的区域。这个区域将具有相同的功能；如果它离用户更远，可能会更慢，但仍能完成工作。
- en: The API or backend for the frontend can receive calls from multiple user interfaces
    and can access multiple servers that have access to the database.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端的 API 或后端可以接收来自多个用户界面的调用，并可以访问多个可以访问数据库的服务器。
- en: The backend can then simply be there to connect to the database for operations.
    There is no need for anything there except for queries.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后端可以仅仅是用来连接数据库进行操作。除查询之外，那里不需要其他任何东西。
- en: The database itself becomes more secure due to the layers present and it becomes
    easier to increase its availability.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于存在层次结构，数据库本身变得更加安全，并且更容易提高其可用性。
- en: The miscellaneous functions are simply endpoints that can be put in or taken
    out as it suits the development team.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些杂项功能只是可以根据开发团队的需要随时添加或移除的端点。
- en: Well, that is quite the process, isn’t it? But it is one that gives results
    and helps make your application or workload more sustainable and futureproof.
    It doesn’t work for every workload, but it is fantastic in helping older systems
    use modern technology better.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这确实是一个相当复杂的过程，对吧？但是它是一个能够带来成果的过程，帮助让你的应用或工作负载变得更加可持续并具备未来适应性。它并不适用于每一个工作负载，但它非常适合帮助旧系统更好地使用现代技术。
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about the event-driven architecture that comprises
    a lot of modern application development. You also, hopefully, learned about actions
    and their consequences and how important positive actions are to development and
    your life in general. Lastly, you learned about a way to modernize older applications
    toward this new philosophy through the use of the strangler fig.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了事件驱动架构，它是现代应用开发的一个重要组成部分。你也希望了解了行动及其后果，以及积极行动对开发和你生活的重要性。最后，你学会了如何通过“入侵式重构”方法，利用
    strangler fig 来将旧应用程序现代化，转向这一新的理念。
- en: In the next chapter, you will get even more hands-on with Python and learn about
    the role that Python can play in **CI/CD** (short for **continuous integration/continuous
    delivery**). It’s a fun topic and will help you implement the Python skills and
    concepts you’ve been studying in this chapter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将更加深入地使用 Python，并了解 Python 在**CI/CD**（即**持续集成/持续交付**）中所能发挥的作用。这是一个有趣的话题，将帮助你将本章中学习的
    Python 技能和概念付诸实践。
