- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Extending and Executing Bitbucket Pipelines
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展和执行 Bitbucket Pipelines
- en: In [*Chapter 5*](B21937_05.xhtml#_idTextAnchor087), we started with an introduction
    to **Bitbucket Cloud**, a cloud-based **source code management** (**SCM**) tool
    from Atlassian that includes **Bitbucket Pipelines**. Bitbucket Pipelines allows
    for **continuous integration** and **deployment**, where source code is built,
    tested, and deployed automatically once a commit is made.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 5 章*](B21937_05.xhtml#_idTextAnchor087)中，我们首先介绍了 **Bitbucket Cloud**，这是一个基于云的
    **源代码管理**（**SCM**）工具，来自 Atlassian，其中包括 **Bitbucket Pipelines**。Bitbucket Pipelines
    支持 **持续集成** 和 **部署**，源代码在提交后会自动进行构建、测试和部署。
- en: 'In this chapter, we will start by looking at continuous integration using Bitbucket
    Pipelines. You will extend your knowledge of Bitbucket Pipelines by adding integrations
    to third-party tools that perform testing for syntax checking and security. You
    will also define and configure runners and the agents that perform the execution
    of Bitbucket Pipelines. Recipes in this chapter include the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将首先介绍使用 Bitbucket Pipelines 进行持续集成。通过将第三方工具集成到 Bitbucket Pipelines 中，您将扩展对其的了解，这些工具用于进行语法检查和安全测试。您还将定义并配置执行
    Bitbucket Pipelines 的运行器和代理。 本章中的配方包括以下内容：
- en: Configuring pipeline options
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置管道选项
- en: Conditional execution of pipelines
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道的条件执行
- en: Manual execution
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动执行
- en: Scheduled execution
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定时执行
- en: Defining variables
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义变量
- en: Defining a runner for a pipeline
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为管道定义运行器
- en: Connecting to Bitbucket Pipes
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到 Bitbucket Pipes
- en: Testing steps in Bitbucket Pipelines
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Bitbucket Pipelines 中测试步骤
- en: Security steps in Bitbucket Pipelines
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bitbucket Pipelines 中的安全步骤
- en: Reporting test results
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报告测试结果
- en: Let’s begin our examination of Bitbucket Pipelines by looking at its structure.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从查看 Bitbucket Pipelines 的结构开始，来进行初步分析。
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The recipes in this chapter require the setup of Bitbucket Cloud on a workspace,
    project, and repository. In addition, **self-hosted runners** require a machine
    running Linux, macOS, or Windows.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的配方需要在工作区、项目和仓库中设置 Bitbucket Cloud。此外，**自托管运行器**需要运行 Linux、macOS 或 Windows
    的机器。
- en: The sample code for this chapter can be found in the `Chapter6` folder of this
    book’s GitHub repository ([https://github.com/PacktPublishing/Atlassian-DevOps-Toolchain-Cookbook/tree/main/Chapter6](https://github.com/PacktPublishing/Atlassian-DevOps-Toolchain-Cookbook/tree/main/Chapter6)).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例代码可以在本书 GitHub 仓库的 `Chapter6` 文件夹中找到（[https://github.com/PacktPublishing/Atlassian-DevOps-Toolchain-Cookbook/tree/main/Chapter6](https://github.com/PacktPublishing/Atlassian-DevOps-Toolchain-Cookbook/tree/main/Chapter6)）。
- en: Configuring pipeline options
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置管道选项
- en: This recipe will show you the general structure of the `bitbucket-pipelines.yml`
    file and the options for general configuration. We created the file that describes
    the pipeline to execute (`bitbucket-pipelines.yml`) in [*Chapter 5*](B21937_05.xhtml#_idTextAnchor087).
    Let’s look at the configuration found in `bitbucket-pipelines.yml` now.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方将向您展示 `bitbucket-pipelines.yml` 文件的一般结构和配置选项。我们在 [*第 5 章*](B21937_05.xhtml#_idTextAnchor087)中创建了描述管道执行的文件（`bitbucket-pipelines.yml`）。现在让我们来看一下
    `bitbucket-pipelines.yml` 中的配置。
- en: 'A sample of the possible configurations and the general structure of the `bitbucket-pipelines.yml`
    file is detailed in the following code snippet:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段详细列出了可能的配置示例以及 `bitbucket-pipelines.yml` 文件的一般结构：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This recipe will show you the options for the general configuration of your
    pipelines. Subsequent recipes will demonstrate the applications, using the options
    outlined in the preceding code snippet.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方将向您展示管道的一般配置选项。随后的配方将演示如何应用前述代码片段中概述的选项。
- en: How to do it…
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We will evaluate the following configuration sections in this recipe:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本配方中评估以下配置部分：
- en: Global options
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局选项
- en: The `git` `clone` behavior
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git` `clone` 行为'
- en: '`definitions`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`definitions`'
- en: Subsequent recipes will talk about the configuration of the execution options
    for your pipelines.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 随后的配方将讨论管道执行选项的配置。
- en: Configuring global options
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置全局选项
- en: 'Global options specify behavior for all of the pipelines executed. The global
    options include the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 全局选项指定所有执行管道的行为。全局选项包括以下内容：
- en: '`docker`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker`'
- en: '`max-time`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max-time`'
- en: '`size`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size`'
- en: 'Let’s examine these options one by one:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一检查这些选项：
- en: 'If you want your pipelines to run Docker commands, specify the `docker` keyword
    followed by the `true` value, as seen in the following code snippet (we examine
    this in detail in [*Chapter 9*](B21937_09.xhtml#_idTextAnchor185)):'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您希望您的管道运行 Docker 命令，请指定 `docker` 关键字，并将其值设置为 `true`，如以下代码片段所示（我们将在 [*第 9 章*](B21937_09.xhtml#_idTextAnchor185)
    中详细讨论）：
- en: '[PRE1]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you need to allocate more time for steps to execute before timing out, specify
    the `max-time` keyword with an integer between `1` and `120`. The number specifies
    the wait time in minutes. The `max-time` option may also be used at the step level
    to set the timeout for the step. The following code snippet sets the max time
    to `5` minutes for all steps in the pipeline:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您需要为步骤执行分配更多时间，以避免超时，请指定 `max-time` 关键字，并设置一个介于 `1` 和 `120` 之间的整数。该数字表示等待时间，单位为分钟。`max-time`
    选项也可以在步骤级别使用，以设置该步骤的超时时间。以下代码片段将管道中所有步骤的最大时间设置为 `5` 分钟：
- en: '[PRE2]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `size` option can allocate additional memory to the entire pipeline or
    an individual step. If you are using runners on Bitbucket Cloud, your options
    are `1x` and `2x`, while self-hosted Docker runners have options of `1x`, `2x`,
    `4x`, and `8x`. The following code snippet sets the size of the entire pipeline
    to double the normal allotment:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size` 选项可以为整个管道或单个步骤分配额外内存。如果您使用的是 Bitbucket Cloud 上的运行器，选项为 `1x` 和 `2x`，而自托管的
    Docker 运行器则有 `1x`、`2x`、`4x` 和 `8x` 的选项。以下代码片段将整个管道的大小设置为正常配额的两倍：'
- en: '[PRE3]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We have seen how to configure global options relating to running Docker commands,
    wait times, and available runner memory. Let’s now look at options for configuring
    behavior when performing a `git clone` operation in the pipeline.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了如何配置与运行 Docker 命令、等待时间和可用运行器内存相关的全局选项。现在让我们看看在管道中执行 `git clone` 操作时配置行为的选项。
- en: The git clone behavior
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`git clone` 行为'
- en: 'The `clone:` section in `bitbucket-pipelines.yml` controls the copy of the
    repository through a `git clone` operation. It can be placed after the `options:`
    section to configure the `git clone` behavior for the entire pipeline or within
    a `step:` section to configure the `git clone` behavior for that step. The options
    available are outlined in the following list:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`bitbucket-pipelines.yml` 中的 `clone:` 部分控制通过 `git clone` 操作复制仓库。它可以放置在 `options:`
    部分之后，以配置整个管道的 `git clone` 行为，或放置在 `step:` 部分中，以配置该步骤的 `git clone` 行为。可用的选项列出如下：'
- en: '`depth`: This controls the depth of the clone operation.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`depth`：此选项控制克隆操作的深度。'
- en: '`lfs`: This allows support for Git **Large File System** (**LFS**) files.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lfs`：这允许支持 Git **大文件系统**（**LFS**）文件。'
- en: '`enabled`: This enables or disables the `git` `clone` operation.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enabled`：此选项启用或禁用 `git` `clone` 操作。'
- en: '`skip-ssl-verify`: This allows the skipping of the **Secure Sockets Layer**
    (**SSL**) verification on an individual step.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skip-ssl-verify`：这允许跳过单个步骤的 **安全套接字层**（**SSL**）验证。'
- en: 'Let’s look at these options in depth one by one:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一深入了解这些选项：
- en: 'You can enable or disable the `git clone` operations for a specified scope
    by adding the `enabled` keyword with `true` to enable and `false` to disable.
    Here is an example that disables cloning for all pipeline steps:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过添加 `enabled` 关键字并将其值设置为 `true` 来启用 `git clone` 操作，或者将其值设置为 `false` 来禁用该操作，具体范围指定如下。以下示例演示了如何禁用所有管道步骤的克隆操作：
- en: '[PRE4]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To control the number of commits to include in a `git clone` operation, use
    the `depth` keyword with the value of `full` to indicate a full clone operation
    or a positive integer that indicates how many commits to incorporate in the `git
    clone` operation. This feature sets up fast checkouts that don’t require the full
    history, especially for large repositories. The following code snippet illustrates
    a clone operation that clones the last five commits on all pipeline steps:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要控制 `git clone` 操作中包含的提交数量，请使用 `depth` 关键字，值为 `full` 表示完整克隆操作，或者使用一个正整数表示要在
    `git clone` 操作中包含的提交数量。此功能设置了快速检出，不需要完整历史记录，特别适用于大型仓库。以下代码片段演示了一个克隆操作，该操作克隆了所有管道步骤中的最后五个提交：
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Use the `lfs` option with the value of `true` to download all LFS files at
    the start of every step when set globally. If this is placed within a step, the
    download of all LFS files will start only at the beginning of that step. The following
    code snippet illustrates the downloading of all LFS files at every step:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `lfs` 选项并将其值设置为 `true`，可以在每个步骤开始时下载所有 LFS 文件（如果全局设置）。如果将其放在某个步骤内，所有 LFS 文件的下载将在该步骤开始时开始。以下代码片段演示了在每个步骤中下载所有
    LFS 文件：
- en: '[PRE6]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `skip-ssl-verify` option is available only within the scope of an individual
    step and only with self-hosted pipeline runners. Setting this option to `true`
    disables SSL verification for that step, allowing the use of self-signed certificates.
    This is illustrated in the following code snippet:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skip-ssl-verify`选项仅在单个步骤的作用域内有效，并且只适用于自托管的管道运行器。将此选项设置为`true`将禁用该步骤的SSL验证，允许使用自签名证书。以下代码片段展示了这一点：'
- en: '[PRE7]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We have now seen what options are available for all pipeline steps or an individual
    pipeline step for the `git clone` operations. Let’s now see what resources can
    be included in the pipeline by configuring the `definitions` section.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经了解了`git clone`操作的所有管道步骤或单个管道步骤可用的选项。接下来，我们将看看如何通过配置`definitions`部分将资源包含到管道中。
- en: Configuring definitions
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置定义
- en: 'The `definitions` section describes additional resources available for all
    pipeline steps. The following list outlines the type of resources available:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`definitions`部分描述了所有管道步骤可用的额外资源。以下列表概述了可用资源的类型：'
- en: Caches
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存
- en: Services
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务
- en: YAML anchors
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YAML锚点
- en: 'We examine how services are configured using Docker containers in [*Chapter
    9*](B21937_09.xhtml#_idTextAnchor185). Caches allow for the temporary storage
    of build dependencies and their directories. Let’s examine the uses of caches:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第9章*](B21937_09.xhtml#_idTextAnchor185)中讨论如何使用Docker容器配置服务。缓存允许暂时存储构建依赖项及其目录。让我们看看缓存的用途：
- en: 'In the `definitions` section, you can define a cache with a file name or directory
    path. The path can include wildcard characters expressed as a glob pattern. In
    the following code snippet, we define and use a cache for a Ruby build:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`definitions`部分，你可以通过文件名或目录路径来定义缓存。路径可以包括作为通配符表达的模式。以下代码片段展示了我们如何为Ruby构建定义并使用缓存：
- en: '[PRE8]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The files that should be monitored for changes can be specified in the `caches`
    definition block as a `key` section with a listing noted under the `files` keyword.
    Multiple files can be specified using wildcard characters in glob patterns. The
    `files` location will be specified by the `path` option. The following code snippet
    shows the implementation of a cache definition for a Ruby build using a node defined
    by the `key`, `files`, and `path` keyword:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以在`caches`定义块中的`key`部分指定需要监视更改的文件列表，并在`files`关键字下列出。多个文件可以使用通配符字符在glob模式中指定。`files`的位置将由`path`选项指定。以下代码片段展示了如何使用`key`、`files`和`path`关键字为Ruby构建实现缓存定义：
- en: '[PRE9]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'YAML anchors allow for the reuse of blocks of YAML lines. The anchor character
    (`&`) defines the reusable block. An alias character (`*`) serves as the instruction
    to use the reference. The following code snippet uses YAML anchors to reuse the
    definition of a step:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: YAML锚点允许重用YAML行块。锚点字符（`&`）定义可重用的块。别名字符（`*`）作为指令使用引用。以下代码片段展示了如何使用YAML锚点重用步骤定义：
- en: '[PRE10]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Important note
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: 'The names of YAML anchors and aliases cannot contain the following characters:
    `''[''`, `'']''`, `''{''`, `''}''`, and `'',''`.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: YAML锚点和别名的名称不能包含以下字符：`'['`、`']'`、`'{'`、`'}'`和`','`。
- en: See also
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'The following links provide more details on caches, especially pre-defined
    caches to use when building with standard languages and tools:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接提供了有关缓存的更多详细信息，特别是在使用标准语言和工具构建时可用的预定义缓存：
- en: '[https://support.atlassian.com/bitbucket-cloud/docs/cache-dependencies/#Pre-defined-caches](https://support.atlassian.com/bitbucket-cloud/docs/cache-dependencies/#Pre-defined-caches)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://support.atlassian.com/bitbucket-cloud/docs/cache-dependencies/#Pre-defined-caches](https://support.atlassian.com/bitbucket-cloud/docs/cache-dependencies/#Pre-defined-caches)'
- en: '[https://support.atlassian.com/bitbucket-cloud/docs/use-glob-patterns-on-the-pipelines-yaml-file/](https://support.atlassian.com/bitbucket-cloud/docs/use-glob-patterns-on-the-pipelines-yaml-file/)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://support.atlassian.com/bitbucket-cloud/docs/use-glob-patterns-on-the-pipelines-yaml-file/](https://support.atlassian.com/bitbucket-cloud/docs/use-glob-patterns-on-the-pipelines-yaml-file/)'
- en: We have seen how to configure options globally on a pipeline. We are now ready
    to examine the more modular parts of a pipeline’s structure.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何在管道上全局配置选项。现在我们准备好检查管道结构中更模块化的部分。
- en: Conditional execution of pipelines
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件执行管道
- en: 'We turn from specifying the definition options of a pipeline to specifying
    the execution of a pipeline. This requires us to look at the following sections
    of a pipeline’s structure:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从指定管道的定义选项转向指定管道的执行。这要求我们查看管道结构的以下部分：
- en: Pipelines
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道
- en: Parallel
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行
- en: Stage
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阶段
- en: Step
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步骤
- en: 'We will see how these sections are affected in the following use cases:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以下用例中看到这些部分如何受到影响：
- en: Commit against a branch
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交到一个分支
- en: Create a pull request
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建拉取请求
- en: Creating a tag
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建标签
- en: Before we examine our use cases, let’s visit our structure.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们检查用例之前，让我们先看看结构。
- en: Getting ready
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The `pipelines` section in the `bitbucket-pipelines.yml` file defines all the
    available pipeline definitions to build and deploy. It is defined only once in
    the file and is required.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`bitbucket-pipelines.yml`文件中的`pipelines`部分定义了所有可用的流水线定义，用于构建和部署。它在文件中只定义一次，并且是必需的。'
- en: Within the `pipelines` section are sections that define pipelines based on the
    conditional use cases mentioned in the preceding section. A pipeline can be thought
    of as a series of steps, defined by the `step` keyword. Pipelines are limited
    to 100 steps.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pipelines`部分中，有一些定义了基于前面部分提到的条件使用案例的流水线。一个流水线可以看作是由`step`关键字定义的一系列步骤。流水线的步骤数量最多为100个。
- en: 'The step details at a minimum the commands needed to run the step in a Docker
    container defined as the build environment. These commands are contained in the
    required `script` section. In addition, other options can be defined in the `step`
    section to further define the step’s behavior. An example of a simple one-command
    step is shown in the following code snippet:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤至少需要包含在定义为构建环境的Docker容器中运行步骤的命令。这些命令包含在必需的`script`部分中。此外，还可以在`step`部分中定义其他选项，以进一步定义步骤的行为。以下代码片段展示了一个简单的单命令步骤示例：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Steps are normally run sequentially. If you want to run multiple steps in parallel,
    group the steps together using the `parallel` keyword. A common use case is to
    allow testing steps to occur in parallel. An example is shown in the following
    code snippet:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤通常是按顺序执行的。如果要并行执行多个步骤，可以使用`parallel`关键字将步骤组合在一起。一种常见的用例是允许测试步骤并行执行。以下代码片段展示了一个示例：
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'A stage is a grouping of steps so that a certain function is performed. The
    stage section is defined by the `stage` keyword and includes its steps under the
    `steps` keyword. Stages help define the grouped steps of a distinct phase such
    as build, test, packaging, and publishing. One use of stages may be in deployment
    where they can show you which part of a deployment failed and allow for the use
    of common environments and environment variables. An example of a stage is shown
    in the following code snippet:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 阶段（stage）是步骤的分组，以便执行某个特定功能。阶段部分由`stage`关键字定义，并在`steps`关键字下包括其步骤。阶段有助于定义构建、测试、打包和发布等不同阶段的步骤。阶段的一个用途可能是在部署过程中，它可以显示部署的哪个部分失败，并允许使用公共环境和环境变量。以下代码片段展示了一个阶段示例：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `default` section defines the steps to be run on a pipeline on every push
    to the repository unless the push occurs on a defined branch-specific pipeline
    or the push is based on a `git tag` operation. Let’s revisit an example of our
    one-step pipeline and see that because of the `default` keyword, it will always
    run:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`default`部分定义了在每次推送到仓库时要运行的流水线步骤，除非推送发生在定义的特定分支流水线中，或者推送基于`git tag`操作。让我们重新审视我们的单步流水线示例，看看由于`default`关键字的存在，它将始终运行：'
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now that we understand the basic structure of our pipeline through the `pipelines`,
    `parallel`, `stage`, and `step` sections, let’s visit the use cases where we want
    the conditional execution of the pipeline steps.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们通过`pipelines`、`parallel`、`stage`和`step`部分理解了流水线的基本结构，让我们看看在什么情况下我们希望条件性地执行流水线步骤。
- en: How to do it…
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: The *Getting ready* section of this recipe showed us the pipeline structure
    inside of `bitbucket-pipelines.yml`. The `pipelines`, `parallel`, `stage`, and
    `step` sections allowed for the unconditional execution of pipeline steps.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的*准备工作*部分展示了`bitbucket-pipelines.yml`文件中的流水线结构。`pipelines`、`parallel`、`stage`和`step`部分允许无条件执行流水线步骤。
- en: 'We now want to run different pipeline steps based on the following use cases:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想要根据以下用例运行不同的流水线步骤：
- en: Commit to a specific branch
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交到特定分支
- en: Creation of a pull request
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建拉取请求
- en: Creation of a specific tag
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建特定标签
- en: 'Bitbucket Pipelines allows these conditional use cases through additional sections,
    denoted with specific keywords. Let’s examine these keywords one by one:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Bitbucket Pipelines通过额外的部分，使用特定的关键字，允许这些条件性用例的出现。让我们逐一检查这些关键字：
- en: 'The `branches` keyword allows the specification of the specific branches against
    which pipeline steps are to be performed. Branches can be identified by their
    name or grouped together using glob patterns. In this case, the `default` keyword
    identifies those steps to be performed against branches not defined in the `branches`
    section. The following code snippet illustrates a pipeline with different steps
    for any push to the main branch and any feature branch:'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`branches`关键字允许指定执行管道步骤的具体分支。分支可以通过其名称标识，或者使用 glob 模式将其分组。在这种情况下，`default`
    关键字表示那些针对未在 `branches` 部分定义的分支执行的步骤。以下代码片段展示了一个管道，其中包含针对主分支和任何特性分支的不同步骤：'
- en: '[PRE15]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Pull-request-specific pipelines are defined based on the working branch and
    the `pull-requests` keyword. These define the specific steps to run when the pull
    request to the destination branch is created. Working branches can be combined
    into similar branch categories using glob patterns. Executing the pull-requests
    pipeline merges the destination branch into the working branch before running.
    If the merge fails, the pipeline execution stops. Pipelines for pull requests
    to feature and hotfix branches are illustrated in the following code snippet:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 针对拉取请求的管道是基于工作分支和 `pull-requests` 关键字来定义的。这些管道定义了在向目标分支创建拉取请求时要执行的特定步骤。工作分支可以使用
    glob 模式组合成类似的分支类别。执行拉取请求管道会在运行前将目标分支合并到工作分支中。如果合并失败，管道执行将会停止。以下代码片段展示了针对特性分支和热修复分支的拉取请求管道：
- en: '[PRE16]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To set up a tag-specific pipeline, use the `tags` keyword to denote the section
    of steps to run when `git tag` matches the pattern defined in the `tags` section.
    Note that the glob patterns can be applied for the search parameters to broaden
    the tag search. The following code snippet runs pipeline operations depending
    on the tag matched in the search:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要设置基于标签的管道，可以使用 `tags` 关键字来表示在 `git tag` 匹配 `tags` 部分中定义的模式时要执行的步骤。注意，glob 模式可以应用于搜索参数，以扩大标签的搜索范围。以下代码片段根据搜索中匹配的标签来运行管道操作：
- en: '[PRE17]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We’ve now seen how to set up pipelines to conditionally run based on a branch,
    if a pull request is created, and if a tag is created.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了如何根据分支、是否创建拉取请求以及是否创建标签来设置有条件运行的管道。
- en: See also
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'The following links add more details to the sections we have discussed in this
    recipe:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接提供了更多关于我们在本篇食谱中讨论的部分的详细信息：
- en: '[https://support.atlassian.com/bitbucket-cloud/docs/step-options/](https://support.atlassian.com/bitbucket-cloud/docs/step-options/)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://support.atlassian.com/bitbucket-cloud/docs/step-options/](https://support.atlassian.com/bitbucket-cloud/docs/step-options/)'
- en: '[https://support.atlassian.com/bitbucket-cloud/docs/stage-options/](https://support.atlassian.com/bitbucket-cloud/docs/stage-options/)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://support.atlassian.com/bitbucket-cloud/docs/stage-options/](https://support.atlassian.com/bitbucket-cloud/docs/stage-options/)'
- en: '[https://support.atlassian.com/bitbucket-cloud/docs/parallel-step-options/](https://support.atlassian.com/bitbucket-cloud/docs/parallel-step-options/)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://support.atlassian.com/bitbucket-cloud/docs/parallel-step-options/](https://support.atlassian.com/bitbucket-cloud/docs/parallel-step-options/)'
- en: So far, we have talked about pipeline executions that are automatically run
    when a commit or pull request operation occurs. Can we run pipelines manually?
    We can! Let’s examine the means to do so in the next recipe.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论了在提交或拉取请求操作发生时自动运行的管道执行。我们能手动运行管道吗？当然可以！接下来，我们将探讨如何做到这一点。
- en: Manual execution
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动执行
- en: Although normally, pipelines are executed automatically on commit or pull requests,
    it is possible to manually run pipelines. Not only can they be used to rerun automated
    pipelines, but you can also run pipelines that can only be executed manually.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管通常情况下，管道会在提交或拉取请求时自动执行，但也可以手动运行管道。它们不仅可以用于重新运行自动化管道，还可以运行只能手动执行的管道。
- en: In addition, we can also specify that a single step in a pipeline should be
    executed manually. The execution of a pipeline will pause until action is completed
    by the user.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以指定管道中的某个步骤需要手动执行。管道的执行将会暂停，直到用户完成该步骤。
- en: Let’s look at defining manual-only pipelines.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下定义仅限手动的管道。
- en: Getting ready
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'You can set up pipelines that are intended to be only run manually. These pipelines
    are in their own section, denoted with the `custom` keyword. Each pipeline has
    a string that describes the name, as seen in the Bitbucket UI and its steps. The
    following code snippet describes two manual pipelines and an automated branch
    pipeline:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以设置仅用于手动运行的管道。这些管道位于它们自己的部分，以`custom`关键字表示。每个管道都有一个描述其名称和步骤的字符串，显示在 Bitbucket
    UI 中。以下代码片段描述了两个手动管道和一个自动分支管道：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: A manual pipeline can also contain variables that are set or updated when that
    manual pipeline is run. Variables can be described with the `variables` keyword
    and can be described using the following properties.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 手动管道也可以包含在运行时设置或更新的变量。可以使用`variables`关键字描述变量，并可以使用以下属性进行描述。
- en: '`name`: The variable’s name (this is required)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：变量的名称（这是必需的）'
- en: '`default`: The default value for the variable'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default`：变量的默认值'
- en: '`allowed-values`: A list of allowed values'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allowed-values`：允许的值列表'
- en: '`description`: A summary of the variable’s purpose and settings'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`：变量的用途和设置的总结'
- en: 'The following code snippet shows a manual pipeline with its variables:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了一个带有变量的手动管道：
- en: '[PRE19]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We’ve now defined pipelines that can be run manually. Let’s now examine how
    to run these pipelines, as well as the normally automated pipelines.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经定义了可以手动运行的管道。接下来，我们将检查如何运行这些管道以及通常自动运行的管道。
- en: How to do it…
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Manually executing pipelines is done at the Bitbucket GUI. From the repository
    view, you can trigger a pipeline run in three places. Let’s look at these options.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 手动执行管道是在 Bitbucket 图形界面（GUI）中完成的。在仓库视图中，你可以在三个位置触发管道运行。我们来看一下这些选项。
- en: Running from the Pipelines view
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从管道视图运行
- en: 'Run the following steps to manually execute a pipeline from the **Pipelines**
    view:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下步骤以手动执行**管道**视图中的管道：
- en: In the repository sidebar, select the **Pipelines** option.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仓库侧边栏中，选择**管道**选项。
- en: '![Figure 6.1 – Selecting the Pipelines view](img/B21937_06_01.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – 选择管道视图](img/B21937_06_01.jpg)'
- en: Figure 6.1 – Selecting the Pipelines view
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 选择管道视图
- en: On the **Pipelines** screen, click the **Run** **pipeline** button.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**管道**界面中，点击**运行** **管道**按钮。
- en: '![Figure 6.2 – Click the Run pipeline button](img/B21937_06_02.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – 点击运行管道按钮](img/B21937_06_02.jpg)'
- en: Figure 6.2 – Click the Run pipeline button
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 点击运行管道按钮
- en: In the window that appears, select the branch and the pipeline to run. Click
    **Run**.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出的窗口中，选择要运行的分支和管道。点击**运行**。
- en: '![Figure 6.3 – Run Pipeline](img/B21937_06_03.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – 运行管道](img/B21937_06_03.jpg)'
- en: Figure 6.3 – Run Pipeline
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 运行管道
- en: You have now manually run a pipeline from the **Pipelines** view.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经从**管道**视图手动运行了一个管道。
- en: Running from the Commits view
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从提交视图运行
- en: 'You can also manually run a pipeline from the **Commits** view. Follow these
    steps when in the Bitbucket repository:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以从**提交**视图手动运行一个管道。在 Bitbucket 仓库中，按照以下步骤操作：
- en: Select **Commits** in the repository sidebar.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仓库侧边栏中选择**提交**。
- en: '![Figure 6.4 – Selecting the Commits view](img/B21937_06_04.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – 选择提交视图](img/B21937_06_04.jpg)'
- en: Figure 6.4 – Selecting the Commits view
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – 选择提交视图
- en: In the **Commits** screen, select a commit by clicking on its hash.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**提交**界面中，通过点击提交哈希值来选择一个提交。
- en: '![Figure 6.5 – Selecting a commit](img/B21937_06_05.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.5 – 选择提交](img/B21937_06_05.jpg)'
- en: Figure 6.5 – Selecting a commit
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – 选择一个提交
- en: In the **Details** sidebar on the right, select **Run pipeline**.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧的**详情**侧边栏中，选择**运行管道**。
- en: '![Figure 6.6 – Select Run pipeline](img/B21937_06_06.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6 – 选择运行管道](img/B21937_06_06.jpg)'
- en: Figure 6.6 – Select Run pipeline
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – 选择运行管道
- en: In the window, select the pipeline to run and click **Run**.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在窗口中，选择要运行的管道并点击**运行**。
- en: '![Figure 6.7 – Run pipeline for commit](img/B21937_06_07.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7 – 为提交运行管道](img/B21937_06_07.jpg)'
- en: Figure 6.7 – Run pipeline for commit
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – 为提交运行管道
- en: You have now manually run a pipeline against a commit.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经手动运行了一个针对提交的管道。
- en: Run pipeline from the Branches view
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从分支视图运行管道
- en: 'The final place to manually run a pipeline is the **Branches** view. Let’s
    see how that’s done:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 手动运行管道的最后一个位置是**分支**视图。让我们来看一下如何操作：
- en: In the repository, select **Branches** from the repository sidebar.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仓库中，从仓库侧边栏选择**分支**。
- en: '![Figure 6.8 – Select the Branches view](img/B21937_06_08.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – 选择分支视图](img/B21937_06_08.jpg)'
- en: Figure 6.8 – Select the Branches view
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – 选择分支视图
- en: On the **Branches** page, find the branch of interest, select the more actions
    icon (**...**), and select **Run pipeline for** **a branch**.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**分支**页面中，找到感兴趣的分支，选择更多操作图标（**...**），然后选择**为分支运行管道**。
- en: '![Figure 6.9 – Select Run pipeline for a branch](img/B21937_06_09.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图6.9 – 选择为分支运行管道](img/B21937_06_09.jpg)'
- en: Figure 6.9 – Select Run pipeline for a branch
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 – 选择为分支运行管道
- en: In the window, select the pipeline to run and click the **Run** button.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在窗口中，选择要运行的管道，并点击**运行**按钮。
- en: '![Figure 6.10 – Run pipeline for a branch](img/B21937_06_10.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图6.10 – 为分支运行管道](img/B21937_06_10.jpg)'
- en: Figure 6.10 – Run pipeline for a branch
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10 – 为分支运行管道
- en: You have now manually run a pipeline against a branch.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经手动运行了一个针对某个分支的管道。
- en: You can also manually run individual steps of a pipeline. Let’s explore how
    that’s done in the next subsection.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以手动运行管道的个别步骤。让我们在接下来的小节中探讨如何操作。
- en: There’s more...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: 'Any pipeline step that is not the first in the pipeline can be specified as
    a manual step, requiring an individual to trigger the execution of that step.
    Let’s see how to create this configuration:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 任何不是管道中第一个步骤的步骤都可以指定为手动步骤，需要个体触发该步骤的执行。让我们来看一下如何创建这个配置：
- en: 'On the step that is to be run manually, add the `trigger: manual` keyword.
    This tells Bitbucket Pipelines that this is a manual step. The following code
    snippet shows a manual step in between two normally run (automatic) steps:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在需要手动运行的步骤上，添加`trigger: manual`关键字。这告诉Bitbucket管道这是一个手动步骤。以下代码片段显示了一个位于两个自动执行步骤之间的手动步骤：'
- en: '[PRE20]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: When running the pipeline, click into the pipeline execution from the **Pipelines**
    view.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行管道时，从**管道**视图中点击进入管道执行。
- en: '![Figure 6.11 – Select pipeline execution](img/B21937_06_11.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图6.11 – 选择管道执行](img/B21937_06_11.jpg)'
- en: Figure 6.11 – Select pipeline execution
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11 – 选择管道执行
- en: In the execution details, to run the manual step, click the **Run** button.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行详情中，点击**运行**按钮以执行手动步骤。
- en: '![Figure 6.12 – Running the manual step](img/B21937_06_12.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图6.12 – 运行手动步骤](img/B21937_06_12.jpg)'
- en: Figure 6.12 – Running the manual step
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.12 – 运行手动步骤
- en: We have now configured and executed a manual step in our pipeline.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经在管道中配置并执行了一个手动步骤。
- en: Another desirable feature of pipeline execution is scheduling the execution
    on a cadence. We will investigate how to do that in our next recipe.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 管道执行的另一个理想功能是按周期安排执行。我们将在下一节中探讨如何实现这一点。
- en: Scheduled execution
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定时执行
- en: Any pipeline defined in the `bitbucket-pipelines.yml` file can be set on a schedule
    to run on a regular cadence. Let’s see how to make the configurations.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 任何在`bitbucket-pipelines.yml`文件中定义的管道都可以设置为定期运行。让我们来看看如何进行配置。
- en: How to do it…
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Scheduling a pipeline is done on the Bitbucket UI, as seen in the following
    instructions:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在Bitbucket UI上进行管道调度，具体操作见以下说明：
- en: In the Bitbucket repository, select the **Pipelines** option in the repository
    sidebar.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Bitbucket仓库中，选择仓库侧边栏中的**管道**选项。
- en: '![Figure 6.13 – Select the Pipelines view](img/B21937_06_13.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图6.13 – 选择管道视图](img/B21937_06_13.jpg)'
- en: Figure 6.13 – Select the Pipelines view
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.13 – 选择管道视图
- en: In the **Pipelines** view, click the **Schedules** button.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**管道**视图中，点击**计划**按钮。
- en: '![Figure 6.14 – Click the Schedules button](img/B21937_06_14.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图6.14 – 点击“计划”按钮](img/B21937_06_14.jpg)'
- en: Figure 6.14 – Click the Schedules button
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.14 – 点击“计划”按钮
- en: To create a new schedule, click the **New schedule** button in the window that
    appears.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建新的计划，请点击出现的窗口中的**新建计划**按钮。
- en: '![Figure 6.15 – The New schedule button](img/B21937_06_15.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图6.15 – 新建计划按钮](img/B21937_06_15.jpg)'
- en: Figure 6.15 – The New schedule button
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.15 – 新建计划按钮
- en: In the **Create a schedule** window, select a branch, select a pipeline, and
    select the frequency to run the pipeline. Frequency can be hourly, daily, weekly,
    or monthly. All times are referred to local time but will be executed on a UTC
    offset to avoid daylight saving time misconfigurations. Click on the **Create**
    button when the configuration is complete.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建计划**窗口中，选择一个分支，选择一个管道，并选择运行管道的频率。频率可以是每小时、每天、每周或每月。所有时间均以本地时间为准，但将以UTC偏移量执行，以避免夏令时配置错误。配置完成后，点击**创建**按钮。
- en: '![Figure 6.16 – Create a new schedule](img/B21937_06_16.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图6.16 – 创建新计划](img/B21937_06_16.jpg)'
- en: Figure 6.16 – Create a new schedule
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.16 – 创建新计划
- en: On an existing schedule, you can click on the slider to disable the schedule.
    To delete the schedule, hover on the schedule and click on the trash can icon.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有的计划中，你可以点击滑块来禁用该计划。要删除计划，只需将鼠标悬停在该计划上，并点击垃圾桶图标。
- en: '![Figure 6.17 – Disabling and deleting schedules](img/B21937_06_17.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图6.17 – 禁用和删除计划](img/B21937_06_17.jpg)'
- en: Figure 6.17 – Disabling and deleting schedules
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.17 – 禁用和删除计划
- en: We have now seen how to run our pipelines on a regular cadence through scheduling.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经了解了如何通过计划定期运行流水线。
- en: In the chapter so far, we have looked at execution from conditional, to manual,
    to scheduled. We now pivot to looking at what we are executing and enhancements
    that make our pipelines more potent. The first step is showing how to integrate
    Bitbucket Pipelines with third-party tools. One way of doing that is using **Pipes**.
    Let’s see how to configure and use Pipes to integrate.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了从条件执行、手动执行到计划执行的过程。现在我们转向查看我们正在执行的内容，以及如何通过一些增强功能使我们的流水线更强大。第一步是展示如何将Bitbucket
    Pipelines与第三方工具集成。实现这一点的一种方式是使用**Pipes**。让我们看看如何配置和使用Pipes进行集成。
- en: Connecting to Bitbucket Pipes
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到Bitbucket Pipes
- en: When we perform continuous integration on our build, we may want to perform
    testing or security scans to ensure our resulting build has high quality and is
    secure. Bitbucket Pipelines allows for testing and security scans through the
    use of integrations. The integrations between Bitbucket Pipelines and an external
    tool or environment are called Bitbucket Pipes.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在构建过程中进行持续集成时，我们可能希望进行测试或安全扫描，以确保我们的最终构建质量高且安全。Bitbucket Pipelines通过使用集成工具来支持测试和安全扫描。Bitbucket
    Pipelines与外部工具或环境之间的集成被称为Bitbucket Pipes。
- en: We are going to see what pipes are available to Bitbucket Pipelines for integrating
    with third-party tools and environments. We will also see how to add pipes to
    your `bitbucket-pipelines.yml` to integrate our pipeline.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到Bitbucket Pipelines可用的Pipes，供与第三方工具和环境进行集成。我们还将看到如何将Pipes添加到`bitbucket-pipelines.yml`文件中，以集成我们的流水线。
- en: How to do it...
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The Bitbucket editor for `bitbucket-pipelines.yml` can display the Pipes available
    for use. The Pipes are then placed in the `script` section of the `bitbucket-pipelines.yml`
    file, as seen in the following instructions:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Bitbucket编辑器可以显示可用的Pipes。然后，这些Pipes会被放置在`bitbucket-pipelines.yml`文件的`script`部分，如以下指令所示：
- en: As we saw in the introduction to Bitbucket Pipelines in [*Chapter 5*](B21937_05.xhtml#_idTextAnchor087),
    when you edit the `bitbucket-pipelines.yml` file in the Bitbucket GUI, it opens
    a special editor that adds features for Pipes, templates, guidance on steps, and
    variables. An illustration of the help panel is shown in the following screenshot.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们在[*第5章*](B21937_05.xhtml#_idTextAnchor087)的Bitbucket Pipelines介绍中看到的，当你在Bitbucket
    GUI中编辑`bitbucket-pipelines.yml`文件时，它会打开一个特殊的编辑器，提供Pipes、模板、步骤指导和变量等功能。以下截图展示了帮助面板的界面。
- en: '![Figure 6.18 – The bitbucket-pipelines.yml editor help panel](img/B21937_06_18.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![图6.18 – bitbucket-pipelines.yml编辑器帮助面板](img/B21937_06_18.jpg)'
- en: Figure 6.18 – The bitbucket-pipelines.yml editor help panel
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.18 – bitbucket-pipelines.yml编辑器帮助面板
- en: Expand the **Add Pipes (Integrations)** section to view the available Pipes.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**添加Pipes（集成）**部分以查看可用的Pipes。
- en: '![Figure 6.19 – Viewing a selection of Pipes](img/B21937_06_19.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图6.19 – 查看Pipes的选择](img/B21937_06_19.jpg)'
- en: Figure 6.19 – Viewing a selection of Pipes
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.19 – 查看Pipes的选择
- en: You can search by keyword or view by category when you select **Explore more
    pipes**, found at the bottom of the Pipes section, as seen in the following illustration.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**探索更多Pipes**时，可以通过关键字搜索或按类别查看，如以下插图所示，该选项位于Pipes部分的底部。
- en: '![Figure 6.20 – The Explore more pipes button](img/B21937_06_20.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![图6.20 – 探索更多Pipes按钮](img/B21937_06_20.jpg)'
- en: Figure 6.20 – The Explore more pipes button
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.20 – 探索更多Pipes按钮
- en: Selecting **Explore more pipes** will open the **Discover pipes** window seen
    in the following illustration.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**探索更多Pipes**将打开**探索Pipes**窗口，如以下插图所示。
- en: '![Figure 6.21 – The Discover pipes window](img/B21937_06_21.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![图6.21 – 探索Pipes窗口](img/B21937_06_21.jpg)'
- en: Figure 6.21 – The Discover pipes window
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.21 – 探索Pipes窗口
- en: Selecting a pipe will open a window for the pipe. This window will contain code
    snippets to paste into the script section of the step where you want the pipe
    to run, details about the pipe, and other information. We show an example of this
    in the following illustration.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个管道会打开一个管道窗口。该窗口将包含代码片段，供你粘贴到你希望管道运行的步骤的脚本部分，还会显示有关管道的详细信息和其他信息。我们将在接下来的插图中展示这一示例。
- en: '![Figure 6.22 – Pipe window](img/B21937_06_22.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.22 – 管道窗口](img/B21937_06_22.jpg)'
- en: Figure 6.22 – Pipe window
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.22 – 管道窗口
- en: We will see the application of pipes later in this chapter and *Chapters 8*
    and *9*.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章以及*第8章*和*第9章*中看到管道的应用。
- en: Another feature that pipelines can use is variables. We started with defining
    variables in the *Enabling Bitbucket Pipelines* recipe in [*Chapter 5*](B21937_05.xhtml#_idTextAnchor087).
    Let’s look at another place to set a variable and how to use variables in your
    pipeline.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 管道的另一个功能是变量。我们从[*第5章*](B21937_05.xhtml#_idTextAnchor087)的*启用 Bitbucket Pipelines*中定义变量开始。接下来让我们看看如何在管道中设置变量并使用它们。
- en: Defining variables
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义变量
- en: Variables enhance the functionality of your pipelines by allowing you to store
    values such as names, needed parameters, and sometimes secrets. There are two
    ways you can define variables, the first of which was referenced in [*Chapter
    5*](B21937_05.xhtml#_idTextAnchor087). Let’s examine these methods.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 变量通过允许你存储诸如名称、所需参数以及有时的机密等值，增强了管道的功能。你可以通过两种方式来定义变量，第一种方式我们在[*第5章*](B21937_05.xhtml#_idTextAnchor087)中提到过。让我们来详细看看这些方法。
- en: How to do it...
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'As we saw in [*Chapter 5*](B21937_05.xhtml#_idTextAnchor087), we can define
    variables from the editor for `bitbucket-pipelines.yml`. Let’s see how you can
    do that:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[*第5章*](B21937_05.xhtml#_idTextAnchor087)中看到的，我们可以通过编辑器为`bitbucket-pipelines.yml`定义变量。让我们来看一下如何做到这一点：
- en: When editing `bitbucket-pipelines.yml`, select the **Add** **variables** option.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`bitbucket-pipelines.yml`时，选择**添加** **变量**选项。
- en: '![Figure 6.23 – Expand Add variables](img/B21937_06_23.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.23 – 展开添加变量](img/B21937_06_23.jpg)'
- en: Figure 6.23 – Expand Add variables
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.23 – 展开添加变量
- en: You can add variables for the repository, as well as any deployment environments
    you have defined.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以为仓库以及任何已定义的部署环境添加变量。
- en: '![Figure 6.24 – Add variables](img/B21937_06_24.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.24 – 添加变量](img/B21937_06_24.jpg)'
- en: Figure 6.24 – Add variables
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.24 – 添加变量
- en: To add a variable, give it a name, enter its value, and click **Add**. Make
    sure **Secured** is checked if you need a secured variable for storing passwords
    or secrets.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加变量，给它起个名字，输入其值，然后点击**添加**。如果需要一个安全的变量来存储密码或机密，请确保勾选**已加密**。
- en: '![Figure 6.25 – Variable saved](img/B21937_06_25.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.25 – 变量已保存](img/B21937_06_25.jpg)'
- en: Figure 6.25 – Variable saved
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.25 – 变量已保存
- en: 'To use the variable in `bitbucket-pipelines.yml`, add the variable name to
    the `script:` section, appended by a dollar sign (`$`) character. This is shown
    in the following code snippet:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在`bitbucket-pipelines.yml`中使用变量，请将变量名添加到`script:`部分，并在前面加上美元符号（`$`）。如下代码片段所示：
- en: '[PRE21]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We’ve seen how to add a variable from the `bitbucket-pipelines.yml` editor.
    Let’s see how to add variables from **Repository settings** in the following subsection.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何通过`bitbucket-pipelines.yml`编辑器添加变量。接下来，让我们看看如何通过**仓库设置**来添加变量，详细信息请见下一小节。
- en: There’s more…
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'Anyone with write access to the repository can create a repository variable.
    Let’s see how to do so from **Repository settings**:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 任何有写入权限的仓库成员都可以创建仓库变量。让我们看看如何通过**仓库设置**来实现：
- en: At the repository, select **Repository settings** from the repository sidebar.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仓库中，从仓库侧边栏选择**仓库设置**。
- en: '![Figure 6.26 – Select Repository settings](img/B21937_06_26.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.26 – 选择仓库设置](img/B21937_06_26.jpg)'
- en: Figure 6.26 – Select Repository settings
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.26 – 选择仓库设置
- en: In the **PIPELINES** section of the **Repository settings** sidebar, select
    **Repository variables**.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**仓库设置**侧边栏的**PIPELINES**部分，选择**仓库变量**。
- en: '![Figure 6.27 – Select Repository variables](img/B21937_06_27.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.27 – 选择仓库变量](img/B21937_06_27.jpg)'
- en: Figure 6.27 – Select Repository variables
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.27 – 选择仓库变量
- en: To add a variable, give it a name, enter its value, and click **Add**. Make
    sure **Secured** is checked if you need a secured variable for storing passwords
    or secrets.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加变量，给它起个名字，输入其值，然后点击**添加**。如果需要一个安全的变量来存储密码或机密，请确保勾选**已加密**。
- en: '![Figure 6.28 – Adding a repository variable](img/B21937_06_28.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.28 – 添加仓库变量](img/B21937_06_28.jpg)'
- en: Figure 6.28 – Adding a repository variable
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.28 – 添加仓库变量
- en: 'Just as in the previous section, to use the variable in `bitbucket-pipelines.yml`,
    add the variable name to the `script:` section, appended by a dollar sign (`$`)
    character. This is shown in the following code snippet:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与上一部分一样，要在 `bitbucket-pipelines.yml` 中使用变量，将变量名添加到 `script:` 部分，并在其后附加美元符号 (`$`)
    字符。以下代码片段展示了这一点：
- en: '[PRE22]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We’ve now seen how to add a variable in **Repository settings**.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何在 **仓库设置** 中添加变量。
- en: See also
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'The following link provides more information on variables, including pre-defined
    Bitbucket variables:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接提供了更多关于变量的信息，包括预定义的 Bitbucket 变量：
- en: '[https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/](https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/)'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/](https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/)'
- en: We can specify which runners to use when executing a pipeline. Let’s explore
    that now.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以指定在执行管道时使用哪些运行器。让我们现在来探索这个。
- en: Defining a runner for a pipeline
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为管道定义运行器
- en: In [*Chapter 5*](B21937_05.xhtml#_idTextAnchor087), we saw how to define a self-hosted
    runner. Bitbucket Pipelines allows the use of self-hosted runners to ensure not
    only are we using the correct platforms for building, but by specifying our own
    resources, we can avoid the build time limits of Bitbucket Cloud.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第5章*](B21937_05.xhtml#_idTextAnchor087)中，我们了解了如何定义自托管的运行器。Bitbucket Pipelines
    允许使用自托管的运行器，不仅能确保我们使用正确的平台进行构建，而且通过指定我们自己的资源，能够避免 Bitbucket Cloud 的构建时间限制。
- en: Now that we have runners defined, let’s see how to call them in `bitbucket-pipelines.yml`.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了运行器，让我们看看如何在 `bitbucket-pipelines.yml` 中调用它们。
- en: How to do it...
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Your self-hosted runners can be defined on a step basis in your `bitbucket-pipelines.yml`
    file. Let’s see how that’s done:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 你的自托管运行器可以在 `bitbucket-pipelines.yml` 文件中按步骤定义。让我们看看如何做到这一点：
- en: 'For a given step, define the runner to use for that step by adding the `runs-on`
    keyword followed by all the applicable labels. The following code snippet shows
    such an application:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于给定的步骤，通过添加 `runs-on` 关键字并跟随所有适用的标签来定义该步骤使用的运行器。以下代码片段展示了这样的应用：
- en: '[PRE23]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Windows-specific runners are used when the `windows` label is added in the
    `runs-on` section:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当在 `runs-on` 部分添加 `windows` 标签时，将使用 Windows 特定的运行器：
- en: '[PRE24]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Mac-specific runners are used when the `macos` label is added in the `runs-on`
    section:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当在 `runs-on` 部分添加 `macos` 标签时，将使用 Mac 特定的运行器：
- en: '[PRE25]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Linux shell runners are used when the `linux.shell` label is added in the `runs-on`
    section:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当在 `runs-on` 部分添加 `linux.shell` 标签时，将使用 Linux shell 运行器：
- en: '[PRE26]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Linux Docker ARM runners are used when the `linux.arm64` label is added in
    the `runs-on` section:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当在 `runs-on` 部分添加 `linux.arm64` 标签时，将使用 Linux Docker ARM 运行器：
- en: '[PRE27]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If you don’t specify a platform label, Bitbucket Pipelines assumes the step
    should be run by a Linux Docker runner.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你没有指定平台标签，Bitbucket Pipelines 将假定该步骤应由 Linux Docker 运行器执行。
- en: If all the matching runners are busy, your step may wait until one becomes available.
    If the runners in your repository do not match any of the labels in the step,
    the step will fail.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果所有匹配的运行器都在忙碌，你的步骤可能会等待直到有一个可用。如果你的仓库中的运行器与步骤中的任何标签不匹配，步骤将失败。
- en: We’re now ready to explore some real-life applications of testing steps in a
    pipeline that are part of continuous integration. Let’s see a testing example
    now.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备探索在管道中作为持续集成的一部分进行测试的实际应用。现在让我们看一个测试示例。
- en: Testing steps in Bitbucket Pipelines
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Bitbucket Pipelines 中进行测试步骤
- en: A key step that may be done on a pipeline for continuous integration typically
    comes post-build. Testing immediately after the build allows for defects to be
    found and sorted out, guaranteeing better quality in the code base.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在持续集成的管道中，一个关键步骤通常是在构建后进行的。构建后立即进行测试，可以发现并解决缺陷，从而保证代码库的更高质量。
- en: The testing steps in this recipe utilize a category of testing called **static
    analysis**. With static analysis, the files in the build are scanned to see whether
    they contain logical errors, security vulnerabilities, or other issues.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程中的测试步骤使用了一类被称为 **静态分析** 的测试。在静态分析中，构建中的文件将被扫描，以查看是否包含逻辑错误、安全漏洞或其他问题。
- en: '**Linting** is another type of scanning technique that performs tests by evaluating
    the syntax and structure of the code base. It can also determine whether the code
    base being evaluated meets specific coding standards.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linting** 是另一种扫描技术，通过评估代码库的语法和结构来执行测试。它还可以确定被评估的代码库是否符合特定的编码标准。'
- en: We will examine different methods of invoking linting and scanning from Bitbucket
    Pipelines.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨从 Bitbucket Pipelines 调用 linting 和扫描的不同方法。
- en: How to do it…
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Depending on the language, a linting utility may be part of the suite of tools
    for developing in that language. Let’s see how that works with Bitbucket Pipelines:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 根据语言的不同，linting 工具可能是开发该语言的工具套件的一部分。让我们看看 Bitbucket Pipelines 中是如何运作的：
- en: 'Tests that are part of a language’s development platform can be called as a
    part of the testing step’s `script` section. Execute the bundled tests by setting
    up steps inside the `script` section. The following code snippet features building
    and testing steps for a Node.js application using `image` section denotes a Docker
    image used as the build environment – we explain this in [*Chapter 9*](B21937_09.xhtml#_idTextAnchor185)):'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为语言开发平台一部分的测试可以在测试步骤的 `script` 部分中调用。通过在 `script` 部分设置步骤来执行捆绑的测试。以下代码片段展示了用于
    Node.js 应用程序的构建和测试步骤，其中 `image` 部分表示作为构建环境使用的 Docker 镜像——我们在 [*第 9 章*](B21937_09.xhtml#_idTextAnchor185)
    中对此进行了说明：
- en: '[PRE28]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We can extend our testing by adding linting applications. The following code
    snippet includes the installation and execution of ESLint, a commonly used linting
    application for JavaScript in our Node.js environment:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过添加 linting 应用程序来扩展测试。以下代码片段包含了 ESLint 的安装和执行，ESLint 是我们 Node.js 环境中常用的
    JavaScript linting 应用程序：
- en: '[PRE29]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We have now seen examples of running tests when a programming language’s development
    environment contains testing applications. Let’s look at integrating a third-party
    application into our Bitbucket Pipeline in the next subsection.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经看到了当编程语言的开发环境包含测试应用程序时如何运行测试。让我们在下一个小节中看看如何将第三方应用程序集成到我们的 Bitbucket Pipeline
    中。
- en: There’s more…
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'A popular application used for testing is **SonarCloud** from SonarSource.
    SonarCloud has a battery of tests to measure the security, reliability, and maintainability
    of a code base. After configuring SonarCloud to Bitbucket Cloud, you can set up
    test execution in Bitbucket Pipelines in the following manner:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常用的测试应用程序是来自 SonarSource 的 **SonarCloud**。SonarCloud 提供了一系列测试，用于衡量代码库的安全性、可靠性和可维护性。配置
    SonarCloud 与 Bitbucket Cloud 后，可以按照以下方式在 Bitbucket Pipelines 中设置测试执行：
- en: 'SonarCloud Scan utilizes pipes to run the SonarCloud code analyzer from Bitbucket
    Pipelines. The following code snippet demonstrates the invocation of the pipe
    in the testing step’s `script` section. This sample includes all the optional
    variables for the pipe. Note that `SONAR_TOKEN` uses a Bitbucket-secured variable:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SonarCloud 扫描利用管道从 Bitbucket Pipelines 运行 SonarCloud 代码分析器。以下代码片段展示了在测试步骤的 `script`
    部分中调用管道。这段示例包括了管道的所有可选变量。请注意，`SONAR_TOKEN` 使用的是 Bitbucket 安全变量：
- en: '[PRE30]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In addition to SonarCloud Scan, Bitbucket Pipelines can include a call to SonarCloud
    Quality Gate to perform checks against a defined quality gate before deployment
    or release. This call is also established as a pipe that can be added to a `script`
    section. The following code snippet shows the pipe with optional variables:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了 SonarCloud 扫描之外，Bitbucket Pipelines 还可以包括对 SonarCloud Quality Gate 的调用，以在部署或发布之前对定义的质量门进行检查。此调用也被建立为一个管道，可以添加到
    `script` 部分。以下代码片段展示了带有可选变量的管道：
- en: '[PRE31]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: You’ve now seen how Bitbucket Pipelines connects with SonarCloud analyzers using
    pipes.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经看到了 Bitbucket Pipelines 如何通过管道与 SonarCloud 分析器连接。
- en: See also
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'This link includes the steps needed to connect a Bitbucket workspace to a SonarCloud
    project: [https://docs.sonarsource.com/sonarcloud/getting-started/bitbucket-cloud/](https://docs.sonarsource.com/sonarcloud/getting-started/bitbucket-cloud/).'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 该链接包含将 Bitbucket 工作区连接到 SonarCloud 项目的所需步骤：[https://docs.sonarsource.com/sonarcloud/getting-started/bitbucket-cloud/](https://docs.sonarsource.com/sonarcloud/getting-started/bitbucket-cloud/)。
- en: A key tenet of DevSecOps is frequently running security scans and testing. Optimally,
    this should be part of continuous integration. Let’s look at an example of including
    security scanning in Bitbucket Pipelines.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: DevSecOps 的一个核心原则是频繁运行安全扫描和测试。最理想的是，这应该是持续集成的一部分。让我们看一个在 Bitbucket Pipelines
    中包含安全扫描的示例。
- en: Security steps in Bitbucket Pipelines
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bitbucket Pipelines 中的安全步骤
- en: As of this writing, **Snyk** is the only security provider that can deeply integrate
    with Bitbucket Cloud. Adding Snyk as a security provider allows additional security
    scans into the repository as steps of the development workflow. Part of this workflow
    includes running security scans in Bitbucket Pipelines. Let’s see how that’s done.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 截至本文写作时，**Snyk** 是唯一一个能够深入集成 Bitbucket Cloud 的安全提供商。将 Snyk 作为安全提供商，可以将额外的安全扫描添加到开发流程中的仓库步骤中。该流程的一部分包括在
    Bitbucket Pipelines 中运行安全扫描。让我们看看如何实现这一点。
- en: How to do it…
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Snyk uses pipes to integrate with pipelines defined in `bitbucket-pipelines.yml`.
    Let’s look at how to set it up:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: Snyk 使用管道与 `bitbucket-pipelines.yml` 中定义的流水线集成。我们来看看如何设置：
- en: 'Add the Snyk pipe to the `script` section of your testing step in the pipeline.
    Required variables include the Snyk token, the language used (`node`, `ruby`,
    `composer`, `dotnet`, or `docker`), and the image name if the language is set
    to `docker`. The following code snippet shows the usage for scanning a Node.js
    application:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Snyk 管道添加到流水线测试步骤的 `script` 部分。所需的变量包括 Snyk token、使用的语言（`node`、`ruby`、`composer`、`dotnet`
    或 `docker`），如果语言设置为 `docker`，还需要指定镜像名称。以下代码片段展示了扫描 Node.js 应用程序的用法：
- en: '[PRE32]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You can also use the Snyk CLI to run a scan using `snyk test`. Installation
    of the Snyk CLI can be done through `npm`. This is illustrated in the following
    code snippet:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以使用 Snyk CLI 通过 `snyk test` 运行扫描。可以通过 `npm` 安装 Snyk CLI。以下代码片段演示了安装过程：
- en: '[PRE33]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You’ve now set up Snyk to run security scans as part of a pipeline.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经成功设置了 Snyk，使其作为流水线的一部分运行安全扫描。
- en: See also
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'The following link details how to set up Snyk as a security provider for Bitbucket
    Cloud:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接详细说明了如何将 Snyk 设置为 Bitbucket Cloud 的安全提供商：
- en: '[https://support.atlassian.com/bitbucket-cloud/docs/add-and-configure-security-with-snyk/](https://support.atlassian.com/bitbucket-cloud/docs/add-and-configure-security-with-snyk/)'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://support.atlassian.com/bitbucket-cloud/docs/add-and-configure-security-with-snyk/](https://support.atlassian.com/bitbucket-cloud/docs/add-and-configure-security-with-snyk/)'
- en: On some tests, it’s possible for Bitbucket to detect the results output and
    display it. Our last recipe explores this.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些测试中，Bitbucket 可以自动检测结果输出并显示。我们在最后一个教程中探讨了这一点。
- en: Reporting test results
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报告测试结果
- en: Test results that output in JUnit and Maven Surefire XML formats will be automatically
    detected by the pipelines. Bitbucket Pipelines then displays any failed test results
    in a **Tests** tab. Successful executions can be shown in the log view in the
    **Build** tab. Let’s see how to set this up.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 输出为 JUnit 和 Maven Surefire XML 格式的测试结果将会被流水线自动检测到。Bitbucket Pipelines 随后会在 **Tests**
    标签中显示任何失败的测试结果。成功的执行结果可以在 **Build** 标签的日志视图中查看。我们来看看如何进行设置。
- en: Getting ready
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'When setting up test reporting, make sure the test results are generated in
    one of the following locations:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置测试报告时，请确保测试结果生成在以下位置之一：
- en: '`./**/``surefire-reports/**/*.xml`'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./**/``surefire-reports/**/*.xml`'
- en: '`./**/``failsafe-reports/**/*.xml`'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./**/``failsafe-reports/**/*.xml`'
- en: '`./**/``test-results/**/*.xml`'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./**/``test-results/**/*.xml`'
- en: '`./**/``test-reports/**/*.xml`'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./**/``test-reports/**/*.xml`'
- en: '`./**/``TestResults/**/*.xml`'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./**/``TestResults/**/*.xml`'
- en: Let’s now take a look at how to configure testing results on the pipeline.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何在流水线中配置测试结果。
- en: How to do it…
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Depending on the language, there are a number of different steps to follow
    to generate test results. Let’s look at each method:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 根据语言的不同，生成测试结果的方法各有不同。我们来看看每种方法：
- en: If you are using the Maven Surefire Plugin in your Maven build job, no special
    configuration is needed.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在 Maven 构建任务中使用 Maven Surefire 插件，则无需进行特殊配置。
- en: 'If you are using PHP and testing with PHPUnit, you should include the `--log-junit`
    parameter to generate the log output. The following code snippet illustrates the
    proper command setup:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用 PHP 并通过 PHPUnit 进行测试，应该包括 `--log-junit` 参数以生成日志输出。以下代码片段演示了正确的命令设置：
- en: '[PRE34]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If you are developing with .NET, you can use `JUnitTestLogger` to create the
    output in JUnit format. The following code snippet illustrates the setup:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用 .NET 开发，可以使用 `JUnitTestLogger` 以 JUnit 格式创建输出。以下代码片段演示了设置方法：
- en: '[PRE35]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '.NET development could also use the `trx2junit` utility to convert the test
    result files from Visual Studio test result format (`.trx`) to JUnit format (`.xml`).
    This is shown in the following code snippet:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: .NET 开发也可以使用 `trx2junit` 工具将 Visual Studio 测试结果文件（`.trx`）转换为 JUnit 格式（`.xml`）。以下代码片段演示了这一过程：
- en: '[PRE36]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: You’ve now seen how to prepare test results so they appear automatically in
    logs.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经了解了如何准备测试结果，以便它们能自动显示在日志中。
