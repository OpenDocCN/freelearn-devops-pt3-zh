- en: '*Chapter 3*: Teamwork and Collaborative Development'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第3章*：团队合作与协作开发'
- en: A high-performing team is more than the sum of its members, and it takes a high-performing
    team to build products that people love.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 高效能的团队不仅仅是其成员的总和，一个高效能的团队才能打造出人们喜爱的产品。
- en: In this chapter, you'll learn how to set up your team for high collaborative
    development using pull requests. You'll learn what a pull request is and which
    features can help you to get a good code review workflow for your team.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何通过拉取请求为你的团队设置高效的协作开发流程。你将了解什么是拉取请求，以及哪些功能能够帮助你为团队建立良好的代码审查工作流程。
- en: 'In this chapter, we will cover the following core topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下核心主题：
- en: Software development is a team sport
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件开发是一项团队运动
- en: 'The heart of collaboration: the pull request'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协作的核心：拉取请求
- en: 'Hands-on: Creating a pull request'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实操：创建拉取请求
- en: Proposing changes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提议变更
- en: Pull request reviews
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拉取请求审查
- en: 'Hands-on: Making suggestions'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实操：提出建议
- en: Best practices for code reviews
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码审查的最佳实践
- en: Software development is a team sport
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件开发是一项团队运动
- en: 'The designer and engineer Peter Skillman created an experiment: he challenged
    teams of four persons to compete against each other in the marshmallow challenge.
    The rules are simple—build the highest possible structure that can support a marshmallow
    using the following material:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 设计师兼工程师Peter Skillman设计了一个实验：他挑战四人一组的团队，在棉花糖挑战中互相竞争。规则很简单——使用以下材料，搭建一个能够支撑棉花糖的最高结构：
- en: 20 pieces of uncooked spaghetti
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20根未煮过的意大利面条
- en: 1 yard of transparent tape
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1码长的透明胶带
- en: 1 yard of string
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1码长的绳子
- en: 1 marshmallow
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1个棉花糖
- en: The experiment was not about the problem itself—it was about how the teams would
    work together to solve the problem. In the experiment, teams of business students
    from Stanford and the University of Tokyo competed against kindergartners. And
    guess who was the winner?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实验的目的并不是解决问题本身，而是观察各个团队如何合作解决问题。在实验中，斯坦福大学和东京大学的商学院学生队伍与幼儿园小朋友队伍展开竞争。猜猜谁赢了？
- en: 'The business students examined the materials, discussed the best strategy,
    and carefully picked the most promising ideas. They acted professionally and in
    a rational and intelligent way, and yet the kindergartners always won. They did
    not decide on the best strategy—they just got to work and started experimenting.
    They stood close together and communicated in short bursts: *Here, no, here!*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 商学院的学生们审查了材料，讨论了最佳策略，并精心挑选出最有前景的想法。他们表现得非常专业、理性且聪明，但幼儿园的小朋友们却总是赢得比赛。他们并没有决定最佳策略——他们只是开始动手，进行实验。他们站得很近，通过简短的交流合作：*这里，不，那里！*
- en: The kindergartners did not win because they were more intelligent or skilled.
    They won because they worked better together as a team (*Coyle D.(2018)*).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 幼儿园的小朋友们并不是因为更聪明或更有技能才获胜的，而是因为他们作为团队合作得更好(*Coyle D.(2018)*).
- en: 'And you can observe the same in sports: you can put the best players in one
    team, and yet if they don''t form a good team, they will lose to a team with less
    skilled individuals who work perfectly together.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在体育比赛中观察到类似的情况：即便你把最优秀的选手放到一个队里，如果他们不能形成良好的团队合作，仍然会输给一个由技能较差但合作无间的队伍。
- en: In software engineering, we want teams with high cohesion, not just individual
    experts that work together but team members that experiment together like the
    kindergartners in the marshmallow experiment. We do this by looking for so-called
    **E-shaped** team members as the evolution of **T-shaped** team members. **I-shaped**
    specialists have deep experience in one area but very little skills or experience
    in other areas. T-shaped people are generalists with deep experience in one area
    but also a broad set of skills across many areas. The evolution is E-shaped people—**E**
    for **experience**, **expertise**, **exploration**, and **execution**. They have
    deep experience in multiple areas with proven execution skills. They are always
    innovating and eager to learn new skills. E-shaped people are the best way to
    combine different areas of expertise into one high-collaborative team (*Kim G.,
    Humble J., Debois P. and Willis J.*).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件工程中，我们追求的是高凝聚力的团队，而不仅仅是能合作的个人专家，而是像“棉花糖实验”中的幼儿一样一起实验的团队成员。我们通过寻找所谓的**E形**团队成员来实现这一目标，E形是**T形**团队成员的进化。**I形**专家在某一领域有深厚的经验，但在其他领域的技能或经验很少。T形的人是通才，某一领域有深入的经验，同时在多个领域拥有广泛的技能。进化后的E形人——**E**代表**经验**、**专长**、**探索**和**执行**。他们在多个领域拥有深厚的经验和经过验证的执行能力。他们总是在创新，渴望学习新技能。E形的人是将不同领域的专长结合成一个高协作团队的最佳方式（*Kim
    G., Humble J., Debois P. 和 Willis J.*）。
- en: 'You can see very quickly how your team is collaborating by looking at some
    of the **pull requests**. Who does the code reviews, and on which topics? What
    are the issues people are discussing about? How is the tone? If you have ever
    seen pull requests of high-performing teams, you''ll know that you can easily
    spot things that are not going well. Here are some pull request anti-patterns
    that you can easily spot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过查看一些**拉取请求**，快速了解你的团队如何进行协作。谁在做代码审查，审查的主题是什么？人们讨论的是什么问题？讨论的语气如何？如果你曾看过高效团队的拉取请求，你就会发现，可以很容易看出一些不太顺利的地方。以下是你可以轻松发现的拉取请求反模式：
- en: Pull requests are too big and contain many changes (**batch size**).
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拉取请求太大，包含了许多更改（**批量大小**）。
- en: Pull requests are only created when a feature is already finished or on the
    last day of the sprint (**last-minute approvals**).
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有在功能已经完成或冲刺的最后一天时才创建拉取请求（**最后一分钟批准**）。
- en: Pull requests are approved without any comments. This is normally because people
    just approve to not mess with the other team members (**auto-approvals**).
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拉取请求被批准时没有任何评论。这通常是因为人们只是为了避免打扰其他团队成员而批准（**自动批准**）。
- en: Comments rarely contain questions. This normally means the discussions are about
    **irrelevant details**—such as formatting and style—and not about architectural
    design issues.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评论中很少包含问题。这通常意味着讨论的内容是**无关紧要的细节**——如格式和风格——而不是关于架构设计的问题。
- en: I'll show you later *the best practices for code reviews* and how you can avoid
    these anti-patterns. Let's first have a closer look at what a pull request is.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我稍后会向你展示*代码审查的最佳实践*，以及如何避免这些反模式。首先，我们先仔细看看什么是拉取请求。
- en: The heart of collaboration – the pull request
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 协作的核心——拉取请求
- en: 'A **pull request** is more than just a classical code review. It''s a way to
    do the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**拉取请求**不仅仅是传统的代码审查。它还是一种实现以下目标的方式：'
- en: Collaborate on code
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协作编写代码
- en: Share knowledge
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享知识
- en: Create shared ownership of the code
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建代码的共享所有权
- en: Collaborate across team boundaries
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨团队边界协作
- en: But what exactly is a pull request? A **pull request**—also known as a **merge
    request**— is a process of integrating changes from other branches into a target
    branch in your **Git** repository. The changes can come from a branch within your
    repository or from a **fork**—a copy of your repository. Pull request is often
    abbreviated to **PR**. People without write permissions can fork your repository
    and create pull requests. This allows owners of open source repositories to allow
    contributions without giving everyone write access to the repository. That's why
    in the open source world, pull requests are the default for integrating changes
    into the repository.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 那么拉取请求到底是什么呢？**拉取请求**，也称为**合并请求**，是将其他分支的更改整合到目标分支的过程，通常发生在**Git**仓库中。这些更改可以来自仓库中的其他分支，或者来自**fork**——你仓库的副本。拉取请求通常缩写为**PR**。没有写权限的人可以fork你的仓库并创建拉取请求。这允许开源仓库的所有者在不给予每个人写权限的情况下允许贡献。因此，在开源世界中，拉取请求是将更改整合到仓库中的默认方式。
- en: Pull requests can also be used to collaborate cross-team in an open source style
    called inner source (see [*Chapter 5*](B17827_05_Epub.xhtml#_idTextAnchor130),
    *Influence of Open and Inner Source on Software Delivery Performance*).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Pull 请求也可以用于跨团队协作，这种方式被称为内源（inner source），类似于开源风格（请参阅 [*第 5 章*](B17827_05_Epub.xhtml#_idTextAnchor130)，*开源和内源对软件交付性能的影响*）。
- en: About Git
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Git
- en: '`git – the stupid content tracker` (see Git man page in *Figure 3.1*).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`git – 愚蠢的内容跟踪器`（参见 *图 3.1* 中的 Git man 页面）。'
- en: Git was created in 2005 by Linus Torvalds as the RCS for the Linux kernel. Until
    2005, BitKeeper was used for that purpose, but due to a license change, BitKeeper
    could not be used any longer without costs for open source.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是由 Linus Torvalds 于 2005 年创建的，用作 Linux 内核的版本控制系统（RCS）。在 2005 年之前，BitKeeper
    被用于这个目的，但由于许可证的变化，BitKeeper 不再可以免费用于开源项目。
- en: Git is the most popular RCS today and there are many books on Git alone (see
    Chacon S. and Straub B., 2014; Kaufmann M., 2021; and many more). Git is at the
    heart of GitHub, but in this book, I focus on GitHub as a **DevOps** platform
    and not as an RCS.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是目前最流行的 RCS，并且有许多关于 Git 的书籍（参见 Chacon S. 和 Straub B., 2014；Kaufmann M.,
    2021；以及更多其他书籍）。Git 是 GitHub 的核心，但在本书中，我将 GitHub 作为 **DevOps** 平台而非 RCS 来讨论。
- en: In [*Chapter 11*](B17827_11_Epub.xhtml#_idTextAnchor249), *Trunk-Based Development*,
    I'll talk about branching workflows as this is related to engineering velocity,
    but I'll not dive deeper into branching and merging. Please refer to the *Further
    readings and references* section for that.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 11 章*](B17827_11_Epub.xhtml#_idTextAnchor249)，*基于主干的开发* 中，我将讨论分支工作流，因为它与工程速度相关，但我不会深入探讨分支和合并的问题。请参考
    *进一步阅读和参考文献* 部分了解更多信息。
- en: '*Figure 3.1* shows the `man` page for Git:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3.1* 显示了 Git 的 `man` 页面：'
- en: '![Figure 3.1 – The man page for Git – the stupid content tracker'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.1 – Git 的 man 页面 – 愚蠢的内容跟踪器'
- en: '](img/B17827_03_001.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_001.jpg)'
- en: Figure 3.1 – The man page for Git – the stupid content tracker
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – Git 的 man 页面 – 愚蠢的内容跟踪器
- en: 'Git versions text files on a per-line basis. This means the pull request focuses
    on lines changed: a line can be added, removed, or both—in this case, you can
    see the differences between the old and the new line. Before merging, the pull
    request allows you to do the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Git 在逐行的基础上对文本文件进行版本控制。这意味着 pull 请求专注于更改的行：一行可以被添加、删除，或者两者兼有——在这种情况下，你可以看到旧行和新行之间的差异。在合并之前，pull
    请求允许你执行以下操作：
- en: Review changes and comment on them
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查更改并对其发表评论
- en: Build and test the changes together with new code in the source repository without
    merging it first
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将更改与源代码库中的新代码一起构建和测试，而不必先合并它
- en: Only if the changes pass all checks do they get merged back automatically by
    the pull request.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当更改通过所有检查时，它们才会被 pull 请求自动合并回去。
- en: 'Since everything is code in modern software engineering, it is not only about
    source code. You can collaborate on the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于现代软件工程中的一切都是代码，这不仅仅是源代码。你可以在以下方面进行协作：
- en: Architecture, design, and concept documents
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构、设计和概念文档
- en: Source code
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码
- en: Tests
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试
- en: Infrastructure (as code)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施（作为代码）
- en: Configuration (as code)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置（作为代码）
- en: Documentation
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档
- en: Everything can be done in a text file. In the previous chapter, I already talked
    about **markdown** as the standard for human-readable files. It is perfect for
    collaborating on concept documents and documentation. You can also render markdown
    to **Portable Document Format** (**PDF**) documents if you require physical documents
    that can be archived or sent to customers. You can extend markdown with diagrams—for
    example, with *Mermaid* (see [https://mermaid-js.github.io/mermaid/](https://mermaid-js.github.io/mermaid/)).
    While **markdown** is for human-readable files, **YAML Ain't Markup Language**
    (**YAML**) is for machine-readable files. So, with a combination of source code,
    markdown, and YAML, you can automate the creation of all artifacts of your development
    life cycle and collaborate on changes just as you collaborate on the source code!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都可以在文本文件中完成。在上一章中，我已经讲过 **markdown** 作为人类可读文件的标准。它非常适合用于协作编写概念文档和文档。如果你需要可以归档或发送给客户的实体文档，你还可以将
    markdown 渲染为 **便携文档格式**（**PDF**）文档。你还可以通过图表扩展 markdown——例如，使用 *Mermaid*（请参阅 [https://mermaid-js.github.io/mermaid/](https://mermaid-js.github.io/mermaid/)）。虽然
    **markdown** 是为人类可读文件设计的，**YAML Ain't Markup Language**（**YAML**）则是为机器可读文件设计的。因此，通过结合源代码、markdown
    和 YAML，你可以自动化创建开发生命周期的所有工件，并像协作源代码一样协作处理更改！
- en: Example
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'At GitHub, everything is basically handled as markdown. Even the legal team
    and **human resources** (**HR**) use markdown, issues, and pull requests to collaborate
    on contracts. One example is the hiring process: job descriptions are stored as
    markdown and the complete hiring process is tracked using issues. Other examples
    are the GitHub site policies (such as *Terms of Service* or *Community Guidelines*).
    They are all in markdown and are open source ([https://github.com/github/site-policy](https://github.com/github/site-policy)).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 上，一切基本上都使用 Markdown 来处理。即使是法务团队和**人力资源**（**HR**）也使用 Markdown、问题和拉取请求来协作处理合同。一个例子是招聘过程：职位描述存储为
    Markdown，整个招聘过程通过问题进行跟踪。其他例子包括 GitHub 站点政策（如*服务条款*或*社区指南*）。它们都是用 Markdown 编写的，并且是开源的（[https://github.com/github/site-policy](https://github.com/github/site-policy)）。
- en: If you want to learn more about GitHub team collaboration, see [https://youtu.be/HyvZO5vvOas?t=3189](https://youtu.be/HyvZO5vvOas?t=3189).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于 GitHub 团队协作的信息，参考[https://youtu.be/HyvZO5vvOas?t=3189](https://youtu.be/HyvZO5vvOas?t=3189)。
- en: Hands-on – Creating a pull request
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实操 – 创建拉取请求
- en: 'If you are new to pull requests, it''s best to create one to experience what
    it is about. If you are already familiar with pull requests, you can skip this
    part and continue reading about the *pull request features*. Proceed as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是第一次使用拉取请求，最好创建一个来体验它的功能。如果你已经熟悉拉取请求，可以跳过这部分，继续阅读有关*拉取请求功能*的内容。按以下步骤操作：
- en: 'Open the following repository and create a fork by clicking **Fork** in the
    top-right corner of the repository: [https://github.com/wulfland/AccelerateDevOps](https://github.com/wulfland/AccelerateDevOps).'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开以下仓库，通过点击仓库右上角的**Fork**按钮来创建一个 fork：[https://github.com/wulfland/AccelerateDevOps](https://github.com/wulfland/AccelerateDevOps)。
- en: In the fork, navigate to `Chapter 3` | `ch3_pull-request/Create-PullRequest.md`).
    The file also contains instructions so that you don't have to switch between your
    browser and the book all the time.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在 fork 中，导航到`Chapter 3` | `ch3_pull-request/Create-PullRequest.md`）。该文件还包含说明，方便你无需在浏览器和书籍之间切换。
- en: Edit the file by clicking the **Edit** pencil icon above the file content.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击文件内容上方的**编辑**铅笔图标来编辑文件。
- en: Delete the row that is marked in the file.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除文件中标记的行。
- en: Add a few rows of random text.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加几行随机文本。
- en: Modify one line by removing letters that exceed the permitted length.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改一行，删除超出允许长度的字母。
- en: 'Commit your changes, but not directly to the `main` branch. Commit them to
    a new **branch** like in Figure 3.2:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交你的更改，但不要直接提交到`main`分支。将它们提交到一个新的**分支**，如图 3.2 所示：
- en: '![Figure 3.2 – Committing the changes to a new branch'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.2 – 提交更改到一个新分支'
- en: '](img/B17827_03_002.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_002.jpg)'
- en: Figure 3.2 – Committing the changes to a new branch
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – 提交更改到一个新分支
- en: 'You automatically get redirected to a page where you can create a pull request.
    Enter a title and a description. Note that you have full markdown support with
    all the features you know from the issues in [*Chapter 2*](B17827_02_Epub.xhtml#_idTextAnchor047),
    *Planning, Tracking, and Visualizing your Work*: emoticons (`:+1:`), mentions
    (`@`), references (`#`), task lists (`– [ ]`), and source code with syntax highlighting
    ([PRE0]). You also can assign assignees, labels, projects, and milestones.'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会自动被重定向到一个页面，在那里你可以创建一个拉取请求。输入标题和描述。注意，你可以使用完整的 Markdown 支持，具备你在[ *第 2 章*](B17827_02_Epub.xhtml#_idTextAnchor047)中熟悉的所有功能，*规划、跟踪和可视化你的工作*：表情符号（`:+1:`）、提及（`@`）、引用（`#`）、任务列表（`–
    [ ]`）和带有语法高亮的源代码（[PRE0]）。你还可以分配受托人、标签、项目和里程碑。
- en: At the top of the page, you see that the target branch (`base`) is `main` and
    that the source branch to integrate is the one you just created. The **Create
    pull request** button is a dropdown. You could also choose to create a draft pull
    request. For now, we skip this and create a pull request by clicking the **Create
    pull request** button, (see *Figure 3.3*).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面顶部，你会看到目标分支（`base`）是`main`，而要集成的源分支是你刚刚创建的那个。**创建拉取请求**按钮是一个下拉菜单。你也可以选择创建一个草稿拉取请求。现在，我们跳过这个步骤，通过点击**创建拉取请求**按钮来创建一个拉取请求（见*图
    3.3*）。
- en: '![Figure 3.3 – Creating a pull request for the changes you made to the file'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.3 – 为你对文件所做的更改创建拉取请求'
- en: '](img/B17827_03_003.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_003.jpg)'
- en: Figure 3.3 – Creating a pull request for the changes you made to the file
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – 为你对文件所做的更改创建拉取请求
- en: 'In the pull request, navigate to **Files changed** and note the changes you
    made to the file: deleted lines are red, added lines are green, and modified lines
    are a deleted line followed by an added line. If you hover with your mouse over
    the lines, you get a plus **+** icon on the left side. If you click the icon,
    you can add a single-line comment. If you hold the icon and pull it, you can add
    a comment for multiple lines. The comment has, again, the same markup support
    as issues with all the rich features! Add a comment and click **Add single comment**
    (see *Figure 3.4*):'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在拉取请求中，导航到**更改的文件**，注意你对文件所做的更改：删除的行为红色，添加的行为绿色，修改过的行是先删除一行然后添加一行。如果你将鼠标悬停在行上，左侧会出现一个加号**+**图标。如果你点击该图标，可以添加单行注释。如果你按住图标并拖动它，你可以为多行添加注释。该注释同样支持与问题相同的标记功能，并具有所有丰富的功能！添加注释后，点击**添加单行注释**（见*图
    3.4*）：
- en: '![Figure 3.4 – Adding a comment to a changed line'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.4 – 为更改的行添加注释'
- en: '](img/B17827_03_004.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_004.jpg)'
- en: Figure 3.4 – Adding a comment to a changed line
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – 为更改的行添加注释
- en: The important difference between a classical code review and a pull request
    is that you can update a pull request. This allows you to address comments and
    work together on issues until they are closed. To show this, you'll edit the file
    and commit to the new branch to see that the pull request will reflect the changes.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 经典的代码审查和拉取请求之间的重要区别在于，你可以更新拉取请求。这使得你能够回应评论并共同解决问题，直到问题被关闭。为了展示这一点，你将编辑文件并提交到新的分支，查看拉取请求是否会反映这些更改。
- en: 'You can edit the file directly from the pull request by opening the menu in
    the top-right corner and selecting **Edit file** (see *Figure 3.5*):'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以直接从拉取请求中编辑文件，方法是打开右上角的菜单并选择**编辑文件**（见*图 3.5*）：
- en: '![Figure 3.5 – Editing file from within the pull request'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.5 – 从拉取请求中编辑文件'
- en: '](img/B17827_03_005.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_005.jpg)'
- en: Figure 3.5 – Editing file from within the pull request
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – 从拉取请求中编辑文件
- en: 'Modify the file by adding a new line of text to it. Commit the changes to the
    branch you created before creating the pull request (see *Figure 3.6)*:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改文件，添加一行新文本。在创建拉取请求之前，将更改提交到你创建的分支（见*图 3.6*）：
- en: '![Figure 3.6 – Committing the changes to your branch'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.6 – 将更改提交到你的分支'
- en: '](img/B17827_03_006.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_006.jpg)'
- en: Figure 3.6 – Committing the changes to your branch
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – 将更改提交到你的分支
- en: 'Navigate back to the pull request and note that your changes are automatically
    displayed. You can see all changes in a file under **Files changed** or you can
    see changes in individual commits under **Commits** (see *Figure 3.7*):'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到拉取请求页面，注意到你的更改已自动显示。你可以在**更改的文件**下查看所有更改，或者你可以在**提交**下查看单独的提交更改（见*图 3.7*）：
- en: '![Figure 3.6 – Committing the changes to your branch'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.6 – 将更改提交到你的分支'
- en: '](img/B17827_03_007.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_007.jpg)'
- en: Figure 3.7 – Commenting on changes in individual commits
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – 在单独的提交中评论更改
- en: 'If you are new to pull requests on GitHub, the important takeaways are these:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你是GitHub拉取请求的新手，重要的要点如下：
- en: A pull request is about the **changes** in a branch to a base branch. If you
    update the branch, the pull request gets automatically updated.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拉取请求是关于将一个分支的**更改**合并到基础分支。如果你更新了分支，拉取请求会自动更新。
- en: 'You can **collaborate** on all changes using the rich features you already
    know from GitHub issues: task lists, mentions, references, source code, and so
    on.'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以利用GitHub问题中已知的丰富功能来**协作**所有更改：任务列表、提及、引用、源代码等。
- en: You can look at changes on a **per-file** base or a **per-commit** base. This
    helps separate important changes from unimportant ones (for example, refactoring).
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以按**每个文件**或**每个提交**查看更改。这有助于将重要的更改与不重要的更改（例如重构）区分开来。
- en: Proposing changes
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提出更改
- en: GitHub pull requests have a rich feature set that helps you to improve your
    collaboration flow.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub拉取请求具有丰富的功能集，可以帮助你改善协作流程。
- en: Draft pull requests
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草稿拉取请求
- en: 'When is the best time to create a pull request? You can argue about this, but
    I''d say: the earlier the better! Ideally, you create a pull request the moment
    you start working on something. This way, your team always knows what everybody
    is working on by just looking at the open pull requests. But if you open a pull
    request too early, the reviewers don''t know when to give feedback. That''s where
    **draft pull requests** come in handy. You can create your pull request early,
    but everyone knows that the work is still in progress and reviewers do not get
    notified yet, but you still can mention people in comments to get early feedback
    on code.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 什么时候是创建拉取请求的最佳时机？这可以争论，但我会说：越早越好！理想情况下，你应该在开始处理某个任务的瞬间就创建拉取请求。这样，团队成员通过查看打开的拉取请求，始终能知道每个人在做什么。但如果你创建拉取请求太早，审阅者就不知道何时给出反馈。**草稿拉取请求**在此时非常有用。你可以提前创建拉取请求，但大家都知道工作仍在进行中，审阅者不会收到通知，但你仍然可以在评论中提到人员，以便提前获取代码反馈。
- en: 'When creating a pull request, you can directly create it in a draft state (see
    *Figure 3.8*):'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建拉取请求时，你可以直接将其创建为草稿状态（见*图 3.8*）：
- en: '![Figure 3.8 – Creating a pull request as a draft'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.8 – 创建草稿拉取请求'
- en: '](img/B17827_03_008.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_008.jpg)'
- en: Figure 3.8 – Creating a pull request as a draft
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – 创建草稿拉取请求
- en: 'Draft pull requests are clearly marked as `draft:true` or `draft:false` as
    a search parameter:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 草稿拉取请求会明确标记为`draft:true`或`draft:false`作为搜索参数：
- en: '![Figure 3.9 – Draft pull requests are marked with their own symbol'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.9 – 草稿拉取请求会用自己的符号标记'
- en: '](img/B17827_03_009.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_009.jpg)'
- en: Figure 3.9 – Draft pull requests are marked with their own symbol
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – 草稿拉取请求会用自己的符号标记
- en: If your pull request is already in a review state, you can still change the
    state back at any time by clicking the link under **Reviewers** | **Still in progress?**
    | **Convert to draft**.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的拉取请求已经处于审查状态，你仍然可以随时通过点击**Reviewers** | **Still in progress?** | **Convert
    to draft**下方的链接将状态更改回草稿。
- en: 'If your pull request is ready to be reviewed, just click on **Ready for review**
    (see *Figure 3.10*):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的拉取请求准备好进行审查，只需点击**Ready for review**（见*图 3.10*）：
- en: '![Figure 3.10 – Removing the draft state of a pull request'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.10 – 移除拉取请求的草稿状态'
- en: '](img/B17827_03_010.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_010.jpg)'
- en: Figure 3.10 – Removing the draft state of a pull request
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10 – 移除拉取请求的草稿状态
- en: Draft pull requests are a great feature to collaborate early on changes using
    pull requests in a way that is transparent for the team.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 草稿拉取请求是一个很好的功能，能够以透明的方式在团队中及早合作进行变更。
- en: Code owners
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码所有者
- en: '**Code owners** are a good way to automatically add reviewers to a pull request
    if certain files in your repository are changed. This feature can also be used
    to collaborate across team boundaries or add approvals in early development stages
    instead of requiring them in the release pipeline. Let''s say you have infrastructure
    defined as code in your repository. You can use code owners to require a review
    from a person in the shared operations team, or you have files that define the
    look and feel of your application. Every time you change them, you might want
    to have approval from the design team. Code owners are not just about the approval;
    they can also be used to spread knowledge in communities of practice across team
    boundaries.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码所有者**是一种在仓库中的特定文件发生更改时自动将审阅者添加到拉取请求中的好方法。这个功能还可以跨团队边界协作，或在早期开发阶段添加审批，而不需要在发布流程中进行审批。假设你在仓库中定义了基础设施代码。你可以使用代码所有者来要求共享运维团队中的某个人进行审查，或者你有定义应用外观和体验的文件。每次更改这些文件时，你可能希望获得设计团队的审批。代码所有者不仅仅是关于审批；它们还可以用于在跨团队的实践社区中传播知识。'
- en: Code owners can be teams or individuals. They need write permissions in order
    to become a code owner. Code owners get added as a reviewer if a pull request
    moves out of the draft state.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 代码所有者可以是团队或个人。他们需要有写权限才能成为代码所有者。如果拉取请求脱离草稿状态，代码所有者会作为审阅者被添加进来。
- en: 'To define code owners, you create a file with the name `CODEOWNERS` either
    in the root of the repository, a `docs/` folder, or a `.github/` folder. The syntax
    of the file is simple, as outlined here:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义代码所有者，你需要在仓库的根目录、`docs/`文件夹或`.github/`文件夹中创建一个名为`CODEOWNERS`的文件。文件的语法非常简单，如下所示：
- en: Use `@username` or `@org/team-name` to define the code owners. You can also
    use the email addresses of users.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`@username`或`@org/team-name`来定义代码所有者。你也可以使用用户的电子邮件地址。
- en: 'Use patterns to match files to assign code owners. The order is important:
    the last matching pattern takes precedence.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模式匹配文件来分配代码所有者。顺序很重要：最后匹配的模式优先。
- en: Use `#` for comments, `!` to negate a pattern, and `[` `]` to define character
    ranges.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`#`进行注释，使用`!`来否定模式，使用`[` `]`定义字符范围。
- en: 'Here is an example of a code owner file:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个代码所有者文件的示例：
- en: '[PRE1]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'See the following page, *About code owners*, for more details: [https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-code-owners.](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-code-owners
    )'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息，请参见以下页面，*关于代码所有者*：[https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-code-owners](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-code-owners)。
- en: Code owners are a great way to get shared knowledge across team boundaries and
    to shift approvals from change boards in release pipelines to early approvals
    when changes happen.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 代码所有者是跨团队共享知识的一种好方法，它可以将审批从发布管道中的变更委员会转移到变更发生时的早期审批。
- en: Required reviews
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 所需审查
- en: 'You can require a given number of approvals before merging a pull request.
    This is set on a **branch protection rule** that can apply to one of many branches.
    You create branch protection rules under **Settings** | **Branches** | **Add rule**.
    In the rule, you can set the number of **required reviews** before merging, choose
    whether you want to dismiss approvals when changes are made to the code, and enforce
    approvals from code owners (see *Figure 3.11*):'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以要求在合并拉取请求之前获得指定数量的批准。这是在**分支保护规则**中设置的，该规则可以应用于多个分支之一。你可以在**设置** | **分支**
    | **添加规则**中创建分支保护规则。在规则中，你可以设置合并前所需的**审查数量**，选择是否在代码更改时取消批准，并强制要求代码所有者的批准（见*图
    3.11*）：
- en: '![Figure 3.11 – Required reviews for a specific branch'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.11 – 特定分支所需的审查'
- en: '](img/B17827_03_011.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_011.jpg)'
- en: Figure 3.11 – Required reviews for a specific branch
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11 – 特定分支所需的审查
- en: For more information on branch protection, see https://docs.github.com/en/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-rules.
    I will cover this topic in more detail in [*Chapter 7*](B17827_07_Epub.xhtml#_idTextAnchor175),
    *Trunk-Based Development*.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 有关分支保护的更多信息，请参见 https://docs.github.com/en/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-rules。我将在[*第7章*](B17827_07_Epub.xhtml#_idTextAnchor175)，“*基于主干的开发*”中更详细地讲解这一主题。
- en: Requesting a pull request review
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 请求拉取请求审查
- en: 'If your code is ready to be reviewed, you can manually add the required number
    of reviewers. GitHub provides you with **reviewers'' suggestions** based on the
    author of the code that you have changed (see *Figure 3.12*). You can just click
    on **Request** or you can manually search for people to perform the review:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的代码准备好进行审查，你可以手动添加所需的审查员数量。GitHub 会根据你修改的代码的作者提供**审查员建议**（见*图 3.12*）。你可以点击**请求**，或者手动搜索人员来进行审查：
- en: '![Figure 3.12 – Suggested reviewers'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.12 – 推荐的审查员'
- en: '](img/B17827_03_012.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_012.jpg)'
- en: Figure 3.12 – Suggested reviewers
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12 – 推荐的审查员
- en: 'You can also have GitHub automatically assign reviewers to your team. You configure
    this per team under **Settings** | **Code review assignment**. You can select
    the number of reviewers that automatically get assigned and select one of the
    following two algorithms:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以让 GitHub 自动为你的团队分配审查员。你可以在**设置** | **代码审查分配**中为每个团队进行配置。你可以选择自动分配的审查员数量，并选择以下两种算法之一：
- en: '**Round robin**: Chooses reviewers based on who received the least recent requests
    so far'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**循环轮询**：根据谁最近收到的请求最少来选择审查员'
- en: '**Load balance**: Chooses reviewers based upon each member''s total number
    of review requests considering outstanding reviews'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡**：根据每个成员的总审查请求数量来选择审查员，同时考虑待处理的审查'
- en: 'You can exclude certain members from reviews, and you can select to not notify
    the entire team when reviewers are assigned. See Figure 3.13 for how to configure
    code review assignments for your team:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以排除某些成员不参与审查，并且可以选择在分配审查员时不通知整个团队。有关如何为你的团队配置代码审查分配，请参见图 3.13：
- en: '![Figure 3.13 – Managing code review assignments for your team'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.13 – 管理团队的代码审查分配'
- en: '](img/B17827_03_013.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_013.jpg)'
- en: Figure 3.13 – Managing code review assignments for your team
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – 管理团队的代码审查分配
- en: Auto-merge
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动合并
- en: One of my favorite features from pull requests is **auto-merge**. This allows
    you to increase your velocity when working on small changes, especially if you
    have **continuous deployment** (**CD**) enabled. Auto-merge automatically merges
    your changes if all policies are met. If you have done your changes, you enable
    auto-merge and can work on other changes. If your pull request has the required
    number of approvals and all automatic checks pass, the pull request gets automatically
    merged and deployed to production.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我最喜欢的拉取请求功能之一是**自动合并**。这使你在处理小更改时可以提高工作效率，尤其是当你启用了**持续部署**（**CD**）时。如果你完成了更改，你启用自动合并，并且可以继续处理其他更改。如果你的拉取请求获得了所需的审批数量，并且所有自动检查都通过，拉取请求将会自动合并并部署到生产环境。
- en: Pull request reviews
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拉取请求审核
- en: 'If you have been selected for a review, you can comment on many changes, make
    suggestions, and in the end submit your review with one of the following notations:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你被选中进行审核，你可以对许多更改发表评论、提出建议，并最终通过以下符号之一提交你的审核：
- en: '**Comment**'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**评论**'
- en: '**Approve**'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**批准**'
- en: '**Request changes**'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求更改**'
- en: In the previous section, I focused on pull request features relevant to the
    author of a pull request. In this section, I describe a feature that helps reviewers
    to perform a review and give proper feedback to the author.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一部分中，我集中介绍了与拉取请求作者相关的功能。在本节中，我描述了一个帮助审阅者进行审核并向作者提供适当反馈的功能。
- en: Reviewing proposed changes in a pull request
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审核拉取请求中的提议更改
- en: You can start your review by looking at the changes one file at a time. If you
    hover over lines, you see the **+** icon on the left. It can be used to add a
    single-line comment, or by dragging it over multiple lines, you can create a multiline
    comment. If you have a comment, you select **Start review** to start the review
    process without submitting the comment yet. If you add more comments, the button
    changes to **Add review comment**; you can add as many comments to a review as
    you want. Comments are only visible to you until you submit the review! You can
    cancel a review at any time.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过一次查看一个文件来开始审核。如果你将鼠标悬停在行上，你会看到左侧的**+**图标。可以用它添加单行评论，或者通过拖动它覆盖多行，你可以创建多行评论。如果你有评论，可以选择**开始审核**来开始审核过程，但还不提交评论。如果你添加了更多评论，按钮会变为**添加审核评论**；你可以根据需要向审核添加任意数量的评论。评论在提交审核之前只对你可见！你可以随时取消审核。
- en: Marking files as viewed
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标记文件为已查看
- en: 'When reviewing, you see a progress bar at the top of the file. When you''re
    done with one file, you can select the **Viewed** checkbox. The file will be collapsed
    and the progress bar will show the progress (see *Figure 3.14*):'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在审核时，你会看到文件顶部的进度条。当你完成一个文件后，可以勾选**已查看**复选框。该文件将被折叠，进度条会显示进度（参见*图3.14*）：
- en: '![Figure 3.14 – Marking files as viewed'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.14 – 标记文件为已查看'
- en: '](img/B17827_03_014.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_014.jpg)'
- en: Figure 3.14 – Marking files as viewed
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.14 – 标记文件为已查看
- en: Hands-on – Making suggestions
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实践练习 – 提出建议
- en: 'The best way to give feedback is by making **suggestions** that the author
    of the pull request can easily integrate into their branch. This feature is so
    important that it is worth trying it out if you''ve never tried it. Here''s how
    you''d go about this:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 提供反馈的最佳方式是通过提出**建议**，这样拉取请求的作者可以轻松地将这些建议集成到他们的分支中。这个功能非常重要，如果你从未尝试过，值得一试。以下是操作步骤：
- en: 'Open the fork from the repository you created in the previous hands-on exercise:
    https://github.com/<your user name>/AccelerateDevOps.'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你在之前实践练习中创建的仓库的fork：https://github.com/<your user name>/AccelerateDevOps。
- en: In the fork, navigate to `Chapter 3` | `ch3_pull-request/Review-Changes.md`).
    The file also contains instructions so that you don't have to switch between your
    browser and the book all the time.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在fork中，导航至`Chapter 3` | `ch3_pull-request/Review-Changes.md`）。该文件还包含说明，以便你不必在浏览器和书本之间切换。
- en: Copy the sample source code by clicking the **Copy** icon in the top-right corner
    of the source code block.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击源代码块右上角的**复制**图标来复制示例源代码。
- en: 'Navigate to `src/app.js` (use the link in markdown). Select the branch you
    created in the previous hands-on exercise and edit the file by clicking the **Edit**
    icon (pencil) in the top-right corner (see *Figure 3.15*):'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至`src/app.js`（使用Markdown中的链接）。选择你在之前实践练习中创建的分支，点击右上角的**编辑**图标（铅笔）来编辑文件（参见*图3.15*）：
- en: '![Figure 3.15 – Editing code file to add sample code'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.15 – 编辑代码文件以添加示例代码'
- en: '](img/B17827_03_015.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_015.jpg)'
- en: Figure 3.15 – Editing code file to add sample code
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15 – 编辑代码文件以添加示例代码
- en: Delete *line 2* and insert the code by pressing *Ctrl* + *V*.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 *第 2 行* 并通过按 *Ctrl* + *V* 插入代码。
- en: Commit directly to the source branch of your pull request.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 直接提交到你的拉取请求源分支。
- en: 'Navigate back to the pull request and look for `src/app.js` under **Files changed**.
    Note that the nested loop in *lines 6* to *9* is not correctly indented. Mark
    *lines 6* to *9* and create a multiline comment. Click the **Suggestion** button
    and you''ll see that the code is in the suggestion block, including whitespaces
    (see *Figure 3.16*):'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回拉取请求，查找 **已更改的文件** 中的 `src/app.js`。注意 *第 6 行* 到 *第 9 行* 的嵌套循环没有正确缩进。标记 *第
    6 行* 到 *第 9 行* 并创建多行评论。点击 **建议** 按钮，你会看到代码出现在建议框中，包括空格（参见 *图 3.16*）：
- en: '![Figure 3.16 – Creating a suggestion for a multiline comment'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.16 – 创建多行评论的建议'
- en: '](img/B17827_03_016.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_016.jpg)'
- en: Figure 3.16 – Creating a suggestion for a multiline comment
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.16 – 创建多行评论的建议
- en: Note that the `suggestion` code block contains the complete code, including
    whitespaces. Add four blanks at the beginning of each line to fix the indentation.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，`suggestion` 代码块包含完整的代码，包括空格。为了修正缩进，请在每行开头添加四个空格。
- en: You can make the suggestion part of a review (**Start a review**) or submit
    the suggestion directly to the author (**Add single comment**). For this hands-on
    exercise, we add the suggestion as a single comment.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将建议作为审核的一部分提交（**开始审核**），或者直接将建议提交给作者（**添加单条评论**）。对于这个动手练习，我们将建议作为单条评论添加。
- en: Incorporating feedback into your pull request
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将反馈融入到你的拉取请求中
- en: Since you are the reviewer and author, you can directly switch roles. As the
    author, you see all suggestions for your pull request.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你既是审核员又是作者，你可以直接切换角色。作为作者，你可以看到所有针对你的拉取请求的建议。
- en: 'You can commit a suggestion directly to your branch, or you can batch multiple
    suggestions to one commit and then commit all the changes at once. Add the change
    to the batch and apply the batch at the top of the file (see *Figure 3.17*):'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将建议直接提交到你的分支，或者你也可以将多个建议批量处理成一个提交，然后一次性提交所有更改。将更改添加到批量处理并在文件顶部应用批量处理（参见 *图
    3.17*）：
- en: '![Figure 3.17 – Incorporating suggestions into your code'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.17 – 将建议融入到你的代码中'
- en: '](img/B17827_03_017.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_017.jpg)'
- en: Figure 3.17 – Incorporating suggestions into your code
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.17 – 将建议融入到你的代码中
- en: Suggestions are a great way to provide feedback and suggest code changes. They
    are really easy for an author to incorporate into their code.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 建议是一种提供反馈和建议代码更改的好方法。对于作者来说，这些建议非常容易融入到他们的代码中。
- en: Submitting a review
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提交审核
- en: 'If you have finished your review and added all your comments and suggestions,
    you can submit it. The author will be informed about the outcome and can answer
    your comments. You can leave a final comment and select one of these three options:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已完成审核并添加了所有评论和建议，你可以提交审核。作者会被通知审核结果，并且可以回应你的评论。你可以留下最终评论并选择以下三个选项之一：
- en: '**Approve**: Approves the changes. This is the only option that counts to the
    required reviewer count!'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**批准**：批准更改。这是唯一会计入所需审核员数量的选项！'
- en: '**Comment**: Submit feedback without approval or denial.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**评论**：提交反馈，但不做批准或拒绝。'
- en: '**Request changes**: Indicate that changes are needed for approval from your
    side.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求更改**：表示需要更改以获得你的批准。'
- en: 'Finish the review by clicking **Submit review** (see *Figure 3.18*):'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 完成审核后，点击 **提交审核**（参见 *图 3.18*）：
- en: '![Figure 3.18 – Finishing your review'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.18 – 完成你的审核'
- en: '](img/B17827_03_018.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_018.jpg)'
- en: Figure 3.18 – Finishing your review
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.18 – 完成你的审核
- en: Finishing your pull request
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成你的拉取请求
- en: 'If you want to abandon the changes in your branch, you can close a pull request
    without merging. To incorporate your changes into the base branch you have three
    **merge** options, outlined as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想放弃你分支中的更改，你可以在不合并的情况下关闭拉取请求。要将更改融入到基础分支中，你有三种 **合并** 选项，概述如下：
- en: '**Create a merge commit**: This is the default option. It creates a merge commit
    and displays all commits from your branch as a separate branch in the history.
    If you have many long-running branches, this can clutter the history. You can
    see a representation of this merge option here:'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建合并提交**：这是默认选项。它会创建一个合并提交，并将你分支的所有提交显示为历史记录中的一个独立分支。如果你有许多长期存在的分支，这可能会使历史记录显得杂乱无章。你可以在这里看到这种合并选项的表示：'
- en: '![Figure 3.19 – Git history if you do a merge commit'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.19 – 如果你做了合并提交，Git 历史记录'
- en: '](img/B17827_03_019.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_019.jpg)'
- en: Figure 3.19 – Git history if you do a merge commit
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.19 – 如果你做了合并提交，Git 历史是这样的
- en: '**Squash and merge**: All the commits from the branch will be combined into
    a single commit. This creates a clean, linear history and is a good merge method
    if you delete the branch after merging. It is not recommended if you keep working
    on the branch. You can see a representation of this merge option here:'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Squash 和合并**：分支的所有提交将合并为一个提交。这创建了一个干净的、线性的历史，如果在合并后删除分支，这是一个不错的合并方法。如果你还在继续工作，建议不要使用这种方法。你可以在这里看到这种合并选项的表示：'
- en: '![Figure 3.20 – Git history if you do a squash and merge'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.20 – 如果你做了 squash 和合并，Git 历史是这样的'
- en: '](img/B17827_03_020.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_020.jpg)'
- en: Figure 3.20 – Git history if you do a squash and merge
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.20 – 如果你做了 squash 和合并，Git 历史是这样的
- en: '**Rebase and merge**: Applies all the commits of the branch to the head of
    the base branch. This also creates a linear history but keeps the individual commits.
    It''s also not recommended if you keep working on the branch. You can see a representation
    of this merge option here:'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Rebase 和合并**：将分支的所有提交应用到基础分支的头部。这也创建了线性的历史，但保留了各个提交。如果你还在继续工作，建议不要使用这种方法。你可以在这里看到这种合并选项的表示：'
- en: '![Figure 3.21 – Git history seems linear if you do a rebase and merge'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.21 – 如果你做了 rebase 和合并，Git 历史看起来是线性的'
- en: '](img/B17827_03_021.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_021.jpg)'
- en: Figure 3.21 – Git history seems linear if you do a rebase and merge
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.21 – 如果你做了 rebase 和合并，Git 历史看起来是线性的
- en: 'Select the merge method you want and click **Merge pull request** (see *Figure
    3.22*):'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 选择你想要的合并方法，然后点击**合并拉取请求**（见 *图 3.22*）：
- en: '![Figure 3.22 – Finishing a pull request'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.22 – 完成一个拉取请求'
- en: '](img/B17827_03_022.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_03_022.jpg)'
- en: Figure 3.22 – Finishing a pull request
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.22 – 完成一个拉取请求
- en: Modify the merge message and click **Confirm merge**. After the merge, you can
    delete the branch if you want.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 修改合并信息并点击**确认合并**。合并后，如果需要，你可以删除分支。
- en: Best practices for code reviews
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码审查最佳实践
- en: Pull requests are a great way to collaborate on any kind of code. This chapter
    only scratches the surface of the possibilities you have for your collaboration
    workflow, but to get your teams to effectively collaborate, you should consider
    some best practices for effective code reviews.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取请求是协作任何代码的一个好方法。本章只触及了你在协作工作流中所能实现的可能性，但为了让你的团队能够有效地协作，你应该考虑一些有效的代码审查最佳实践。
- en: Teach Git
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 教 Git
- en: This one might look obvious, but make sure your teams are well trained in Git.
    Well-crafted commits with a **good commit message** that only serve **one purpose**
    are much easier to review than many changes spread randomly across multiple commits.
    In particular, mixing refactoring and business logic makes reviews a nightmare.
    If team members know how to fix up commits, patch changes they made in different
    commits, and how to craft good commit messages, the resulting pull request will
    be much easier to review.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来可能很显然，但请确保你的团队在 Git 上经过良好的培训。精心编写的提交和**良好的提交信息**，每个提交只做**一个目的**，比分散在多个提交中的许多变化更容易审查。特别是，重构和业务逻辑混在一起会让审查变成噩梦。如果团队成员知道如何修复提交、如何修补他们在不同提交中所做的更改，以及如何编写好的提交信息，那么生成的拉取请求将更容易审查。
- en: Link pull request to issue
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将拉取请求链接到问题
- en: Link the pull request to the corresponding issue that initiated the work. This
    helps to give context to the pull request. If you use third-party integration,
    link the pull request to the Jira ticket, Azure Boards work item, or any other
    source you have connected to GitHub.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 将拉取请求链接到发起工作对应的问题。这有助于为拉取请求提供背景。如果你使用第三方集成，将拉取请求链接到 Jira 票据、Azure Boards 工作项或任何你与
    GitHub 连接的其他来源。
- en: Use draft pull requests
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用草稿拉取请求
- en: Have the team members create a **draft pull request** right when they **start
    working** on something. This way, the team knows who is working on what. This
    also encourages people to use comments with mentions to ask people for feedback
    before the review starts. Early feedback on changes helps to get faster reviews
    at the end.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 当团队成员**开始工作**时，让他们立即创建**草稿拉取请求**。这样，团队就能知道谁在做什么。这也鼓励大家在审查开始之前，使用评论和提及来请求他人反馈。对变更的早期反馈有助于加快最终审查的速度。
- en: Have a minimum number of two approvers
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 至少需要两名审批人
- en: You should have a **minimum number** of two **required approvers**. The more
    the better, depending on team size. But one is not enough. Having multiple reviewers
    gives reviews some kind of dynamic. I noticed big changes in the review practice
    of some teams by just changing this from one to two!
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该有至少**两个必需的审批者**。越多越好，具体取决于团队的规模。但一个审批者是不够的。拥有多个审查员能给审查带来某种动态。我注意到通过仅将审批者从一个增加到两个，某些团队的审查实践发生了巨大的变化！
- en: Do peer reviews
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进行同伴审查
- en: Consider reviews to be **peer reviews**. Do not have senior architects review
    the code of others! Younger colleagues should also do reviews of peers to learn.
    A good practice is to add the entire team as reviewers and require a certain percentage
    of approvals (for example, 50%), and then people pick the pull requests they want.
    Or, you could use **automatic review assignments** to distribute reviews randomly
    in your team.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 将审查视为**同伴审查**。不要让高级架构师审查他人的代码！年轻的同事也应该做同伴审查，以便学习。一种好做法是将整个团队作为审查员，并要求一定比例的批准（例如，50%），然后让人们选择他们想要的拉取请求。或者，你可以使用**自动审查分配**，随机分配审查给团队成员。
- en: Automate review steps
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化审查步骤
- en: Many review steps can be automated, especially formatting. Have a good linter
    **check the formatting** of code (for example, [https://github.com/github/super-linter](https://github.com/github/super-linter)),
    or write some tests to check if the documentation is complete. Use static and
    dynamic code analysis to find issues automatically. The more you automate banal
    checks, the more the reviews can concentrate on important things.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 许多审查步骤可以自动化，特别是格式化。让一个好的代码检查工具**检查代码格式**（例如，[https://github.com/github/super-linter](https://github.com/github/super-linter)），或者编写一些测试来检查文档是否完整。使用静态和动态代码分析自动发现问题。你自动化检查琐碎任务的越多，审查就能越集中于重要事项。
- en: Deploy and test changes
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署并测试变更
- en: Build and test your changes automatically before merging. Install the code to
    test if necessary. The more confident people are that the changes will not break
    anything, the more they will trust in the process. Use **auto-merge** to automatically
    merge and release your changes if all approvals and validation pass. The high
    automation makes people work in smaller batch sizes, which makes reviews much
    easier.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在合并之前自动构建并测试你的变更。如有必要，安装代码进行测试。人们越有信心变更不会破坏任何东西，他们就越能信任这个过程。如果所有审批和验证通过，使用**自动合并**自动合并并发布你的变更。高度的自动化使得人们可以在更小的批次中工作，这使得审查变得更容易。
- en: Review guidelines/code of conduct
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查准则/行为规范
- en: Some engineers have a strong opinion on what is the right way to do something,
    and debates can run out of hand quickly. You want to have intense discussions
    to get the best solutions, but you want these to happen in an inclusive way so
    that everyone in the team can participate equally. Having **review guidelines**
    and a **code of conduct** in place helps as a gatekeeper. If people do not behave
    appropriately, you can point to the rules.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 一些工程师对做事的正确方式有强烈的看法，辩论可能很快失控。你希望进行激烈的讨论，以获得最佳的解决方案，但这些讨论需要以包容的方式进行，让团队中的每个人都能平等参与。有了**审查准则**和**行为规范**作为门卫，如果有人行为不当，你可以引用这些规则。
- en: Summary
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Software development is a team sport, and it is important to have a team with
    shared ownership for the code that collaborates tightly on new changes. A GitHub
    pull request can help to achieve this if it is used in the right way.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发是一项团队运动，拥有一个共同拥有代码的团队，并紧密协作进行新变更是非常重要的。如果正确使用，GitHub 拉取请求可以帮助实现这一点。
- en: In the next chapter, you will about asynchronous and synchronous work, and how
    asynchronous workflows can help you to collaborate from anywhere at any time.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将了解异步与同步工作，以及异步工作流如何帮助你随时随地进行协作。
- en: Further readings and references
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读和参考文献
- en: 'Here are the references from this chapter that you can also use to get more
    information on the topics:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的参考文献，你也可以使用它们获取更多关于这些主题的信息：
- en: '*Coyle D*. (2018). *The Culture Code: The Secrets of Highly Successful Groups*
    (1st ed.). *Cornerstone Digital*.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Coyle D*。（2018）。*《文化密码：高度成功团队的秘密》*（第1版）。*Cornerstone Digital*。'
- en: '*Kim G*., *Humble J.*, *Debois P.* and *Willis J.* (2016). *The DevOps Handbook:
    How to Create World-Class Agility, Reliability, and Security in Technology Organizations*
    (1st ed.). *IT Revolution Press*.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Kim G*., *Humble J.*, *Debois P.* 和 *Willis J.*（2016）。*《DevOps 手册：如何在技术组织中创造世界级的敏捷性、可靠性和安全性》*（第1版）。*IT
    Revolution Press*。'
- en: Scott Prugh (2014). *Continuous Delivery*. [https://www.scaledagileframework.com/guidance-continuous-delivery/](https://www.scaledagileframework.com/guidance-continuous-delivery/)
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scott Prugh (2014). *持续交付*. [https://www.scaledagileframework.com/guidance-continuous-delivery/](https://www.scaledagileframework.com/guidance-continuous-delivery/)
- en: '*Chacon S.* and *Straub B.* (2014). *Pro Git* (2nd ed.). *Apress*. [https://git-scm.com/book/de/v2](https://git-scm.com/book/de/v2)'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Chacon S.* 和 *Straub B.* (2014). *Pro Git* (第2版). *Apress*. [https://git-scm.com/book/de/v2](https://git-scm.com/book/de/v2)'
- en: '*Kaufmann M.* (2021). *Git für Dummies* (1st ed., German). *Wiley-VCH*.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Kaufmann M.* (2021). *Git für Dummies* (第1版，德文). *Wiley-VCH*.'
- en: 'Git: [https://en.wikipedia.org/wiki/Git](https://en.wikipedia.org/wiki/Git)'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Git: [https://en.wikipedia.org/wiki/Git](https://en.wikipedia.org/wiki/Git)'
- en: 'Pull requests: [https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests](https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '拉取请求: [https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests](https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)'
- en: 'Code owners: https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-code-owners'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '代码所有者: https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-code-owners'
- en: 'Branch protection: https://docs.github.com/en/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-rules'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '分支保护: https://docs.github.com/en/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-rules'
- en: 'Code review assignments: https://docs.github.com/en/organizations/organizing-members-into-teams/managing-code-review-assignment-for-your-team'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '代码审查分配: https://docs.github.com/en/organizations/organizing-members-into-teams/managing-code-review-assignment-for-your-team'
- en: 'Auto-merge: [https://docs.github.com/en/github/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request](https://docs.github.com/en/github/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request)'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '自动合并: [https://docs.github.com/en/github/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request](https://docs.github.com/en/github/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request)'
- en: 'Pull request reviews: [https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews](https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews)'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '拉取请求审查: [https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews](https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews)'
