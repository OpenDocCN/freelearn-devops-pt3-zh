- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Copado
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Copado
- en: This chapter will delve into the key features and capabilities of Copado, covering
    its underlying data model and administration. We will examine how Copado addresses
    the challenges of Salesforce development by automating and simplifying tasks such
    as version control, build automation, testing, and deployment. We will also look
    at how Copado integrates with native Salesforce objects for centralized reporting
    and process monitoring.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将深入探讨Copado的关键功能和能力，涵盖其底层数据模型和管理。我们将研究Copado如何通过自动化和简化任务，如版本控制、构建自动化、测试和部署，来解决Salesforce开发中的挑战。我们还将探讨Copado如何与Salesforce本地对象集成，以实现集中式报告和过程监控。
- en: In addition to exploring the technical capabilities of Copado, we will also
    discuss the platform’s strengths and weaknesses; understanding these is crucial
    for organizations considering Copado implementation, as it helps them align their
    expectations and plan their resources effectively.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 除了探索Copado的技术能力外，我们还将讨论平台的优势和不足；理解这些对考虑实施Copado的组织至关重要，因为它有助于他们对齐预期并有效规划资源。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: An overview of Copado
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Copado概述
- en: Understanding the strengths of Copado
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Copado的优势
- en: Exploring the weaknesses of Copado
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Copado的不足之处
- en: By the end of this chapter, you will have a comprehensive understanding of Copado
    and its role in Salesforce DevOps. The insights you gain will equip you to make
    informed decisions about leveraging Copado in your own Salesforce environment
    and help you navigate the complexities of Salesforce development with greater
    ease and efficiency.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将全面了解Copado及其在Salesforce DevOps中的角色。你将获得的见解将帮助你做出有关如何在自己的Salesforce环境中利用Copado的明智决策，并帮助你更轻松、高效地应对Salesforce开发中的复杂性。
- en: An overview of Copado
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Copado概述
- en: Copado provides an end-to-end platform for developing in **Salesforce** using
    **DevOps** principles and practices. As a native app built on the Salesforce platform,
    Copado aims to address gaps in the core Salesforce product that inhibit effective
    **continuous integration and delivery** (**CI/CD**). This overview will detail
    Copado’s underlying data model, key technical capabilities, and administration
    based on its publicly available documentation.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Copado提供一个端到端平台，用于在**Salesforce**中应用**DevOps**原则和实践进行开发。作为一个建立在Salesforce平台上的原生应用，Copado旨在解决Salesforce核心产品中的一些缺口，这些缺口妨碍了**持续集成和交付**（**CI/CD**）的有效实施。本概述将详细介绍Copado的底层数据模型、关键技术能力以及基于公开文档的管理。
- en: Copado allows teams to implement DevOps workflows entirely within Salesforce
    without the extensive use of external tools. It integrates version control, build
    automation, testing, and deployment while retaining native reporting and process
    visibility. The platform centers around a core abstraction layer that handles
    much of the complexity of tasks, such as branch management, automatically.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Copado允许团队完全在Salesforce内部实现DevOps工作流，而无需广泛使用外部工具。它集成了版本控制、构建自动化、测试和部署，同时保留了本地报告和过程可视性。平台围绕一个核心抽象层展开，自动处理许多复杂任务，如分支管理。
- en: Platform
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平台
- en: 'Copado utilizes a **user-story-centered data model**, that is to say, a deployment
    model centered around user stories, to associate any requirements with specific
    metadata changes. The user story entity relates code to its business purpose and
    scopes for work for incremental delivery. Stories flow through predefined pipelines
    that span the lower development environments up through to production, as is the
    case with other configuration management databases. The following screenshot shows
    a sample pipeline:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Copado利用**以用户故事为中心的数据模型**，即以用户故事为中心的部署模型，将任何需求与特定的元数据变更关联。用户故事实体将代码与其业务目的和工作范围相关联，以实现增量交付。故事通过预定义的管道流动，从低级开发环境一直延伸到生产环境，类似于其他配置管理数据库。以下截图展示了一个示例管道：
- en: '![Figure 13.1 – An example of a Copado pipeline](img/B19436_13_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图13.1 – Copado管道示例](img/B19436_13_01.jpg)'
- en: Figure 13.1 – An example of a Copado pipeline
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1 – Copado管道示例
- en: The Copado platform layers abstraction on top of complex **Git** branching and
    merging operations through the use of a semantic conflict resolution engine. This
    prevents developers from needing to handle merge conflicts and Git commands manually.
    Instead, the platform handles branching in a declarative way by using the pipelines
    flowing from the lower to higher environments.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Copado 平台通过使用语义冲突解决引擎，在复杂的**Git**分支和合并操作之上进行抽象。这避免了开发者需要手动处理合并冲突和 Git 命令。相反，平台通过使用从低环境到高环境流动的流水线以声明性方式处理分支。
- en: All user actions within Copado integrate with native Salesforce objects for
    centralized reporting and process monitoring. This retains auditability and visibility
    within the comfortable Salesforce interface that administrators already understand.
    No external dashboards or reports are needed to monitor the DevOps processes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Copado 中的所有用户操作都与本地 Salesforce 对象集成，以便集中报告和流程监控。这保留了审计性和可见性，用户可以在管理员已经熟悉的 Salesforce
    界面内进行操作。不需要外部仪表板或报告来监控 DevOps 流程。
- en: 'Copado’s capabilities cover the entire DevOps lifecycle, from the initial requirements
    through to production deployment:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Copado 的功能涵盖了整个 DevOps 生命周期，从初始需求到生产部署：
- en: Requirement management for user stories
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户故事的需求管理
- en: Automated version control
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化版本控制
- en: Continuous integration, triggering quality gates
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成，触发质量门控
- en: Co-ordinated promotion through the environments
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协调的环境间提升
- en: Deployment pipeline configuration
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署流水线配置
- en: Org syncing through back promotion
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过回传促进组织同步
- en: Built-in visibility and reporting
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置可见性和报告
- en: Together, these aim to provide a comprehensive system for development teams
    to implement agile, iterative DevOps patterns within Salesforce.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些功能共同为开发团队提供一个全面的系统，帮助团队在 Salesforce 中实现敏捷、迭代的 DevOps 模式。
- en: Version control
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 版本控制
- en: Copado integrates Git version control by automatically creating feature branches
    for each user story’s committed metadata components. The exact branch structure
    mirrors the progression of user stories flowing between different Salesforce sandboxes
    and environments defined in the pipelines.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Copado 通过自动为每个用户故事提交的元数据组件创建功能分支，来集成 Git 版本控制。精确的分支结构反映了用户故事在不同 Salesforce 沙箱和环境之间流动的进程，这些环境在流水线中有定义。
- en: 'The following screenshot shows integration with version control:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了与版本控制的集成：
- en: '![Figure 13.2 – Copado Git integration](img/B19436_13_02.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.2 – Copado Git 集成](img/B19436_13_02.jpg)'
- en: Figure 13.2 – Copado Git integration
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.2 – Copado Git 集成
- en: Bi-directional deployment and the merging of branches keep all environments
    and sandboxes in sync as changes flow upstream and downstream through testing
    and production. No manual Git operations are required on the part of the developers
    or administrators.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 双向部署和分支合并确保所有环境和沙箱在变化通过测试和生产过程中上下游流动时保持同步。开发者和管理员无需进行手动的 Git 操作。
- en: Copado’s conflict detection utilizes semantic analysis for metadata rather than
    just syntactic code reconciliation. This allows it to detect logical conflicts
    between components that may not be mergeable, such as conflicting field-level
    security rules. The platform alerts users to these conflicts early to avoid deployment
    failures.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Copado 的冲突检测利用语义分析来处理元数据，而不仅仅是语法代码对比。这使得它能够检测组件之间的逻辑冲突，这些冲突可能无法合并，比如冲突的字段级安全规则。平台会提前警告用户这些冲突，以避免部署失败。
- en: An administrator can define an organization’s branching strategy and environment
    topology through the pipelines in Copado without needing to know Git internals.
    The complexity is hidden below the abstraction layer.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员可以通过 Copado 中的流水线定义组织的分支策略和环境拓扑，而无需了解 Git 的内部机制。复杂性被隐藏在抽象层下。
- en: Build integration
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建集成
- en: Continuous integration is a key capability of Copado. Upon each code check-in
    or commit action, the platform can automatically trigger configured tests, validations,
    and other quality gates. These may include Apex tests, linting, static analysis,
    or any other custom steps.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成是 Copado 的关键功能。在每次代码提交或提交操作时，平台可以自动触发配置的测试、验证和其他质量门控。这些可以包括 Apex 测试、代码检查、静态分析或任何其他自定义步骤。
- en: The output of tests and validations is recorded directly onto related user stories
    within Salesforce for traceability. Developers can see the results immediately
    without a separate CI server. You can retain compliance on code quality through
    native reporting.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 测试和验证的输出直接记录到 Salesforce 中相关的用户故事中，以便追踪。开发人员可以立即看到结果，无需单独的 CI 服务器。您可以通过原生报告保持代码质量的合规性。
- en: Third-party tools, such as **Jira** and **Azure DevOps**, can integrate with
    Copado’s CI pipeline via built-in webhooks or custom **Apex** adapters. Custom
    plugins allow admins to modify and customize Copado’s standard CI/CD process to
    insert custom quality gates. For instance, you could configure a webhook to call
    out to your preferred security scanning tool via its API just before your code
    is deployed to your UAT or production environments.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方工具，如**Jira**和**Azure DevOps**，可以通过内置的 Webhooks 或自定义的**Apex**适配器与 Copado 的
    CI 管道集成。自定义插件允许管理员修改和定制 Copado 的标准 CI/CD 流程，以插入自定义质量门。例如，您可以配置一个 Webhook，在代码部署到
    UAT 或生产环境之前，通过其 API 调用您首选的安全扫描工具。
- en: Copado aims to promote shift-left testing and quality assurance by baking it
    into the commit process automatically. The mandatory gates keep all code checked
    in at a minimum quality bar through consistent, automated enforcement.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Copado 旨在通过将左移测试和质量保证自动嵌入提交过程中来推动左移测试。强制性门确保所有提交的代码通过一致的自动执行保持在最低质量标准上。
- en: Deployment
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署
- en: Within deployment, Copado introduces the concept of promotions for moving user
    stories between environments in the pipelines. Promotions pull metadata changes
    downstream using the pipelines defined through the declarative Copado interface.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署过程中，Copado 引入了“推广”概念，用于在管道中移动用户故事之间的环境。推广通过声明性的 Copado 界面定义的管道向下拉取元数据更改。
- en: 'The following screenshot shows a sample user story:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了一个示例用户故事：
- en: '![Figure 13.3 – A sample Copado user story](img/B19436_13_03.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.3 – 一个示例的 Copado 用户故事](img/B19436_13_03.jpg)'
- en: Figure 13.3 – A sample Copado user story
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.3 – 一个示例的 Copado 用户故事
- en: Permission schemes grant the approvals required for progression between pipeline
    stages. Mandatory manual approval gates can ensure that any changes are authorized.
    Copado’s selective rollback capability can also redeploy previous metadata commitments
    (as needed) to rapidly revert production.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 权限方案授予在管道阶段之间推进所需的批准。强制性的手动审批门可以确保任何更改都已获得授权。Copado 的选择性回滚功能还可以重新部署以前的元数据提交（根据需要），以快速恢复生产环境。
- en: Important note
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: “Stages” are categorized as collections of environments fulfilling similar business
    roles, such as development, testing, production, etc. They provide release managers
    with the ability to organize their pipelines and environments visually and systematically.
    Additionally, stages facilitate the configuration and execution of various functionalities
    when actions are carried out within them. For instance, in scenarios involving
    quality gate rules or automation rules or when using Copado’s **Continuous Delivery**
    and **Deployment** steps, one can choose particular stages at which to apply these
    processes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: “阶段”被分类为具有相似业务角色的环境集合，如开发、测试、生产等。它们为发布经理提供了以视觉和系统化的方式组织其管道和环境的能力。此外，阶段还便于在执行时配置和操作各种功能。例如，在涉及质量门规则、自动化规则或使用
    Copado 的**持续交付**和**部署**步骤的场景中，可以选择在特定阶段应用这些流程。
- en: Connection behaviors configure additional actions, such as automated email notifications,
    that execute on a per-stage basis in the pipelines. For example, you may want
    all production deployments to email a security auditor. Behaviors standardize
    these processes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 连接行为配置了额外的操作，例如在管道的每个阶段执行的自动电子邮件通知。例如，您可能希望所有生产部署都向安全审核员发送电子邮件。行为标准化了这些过程。
- en: Promotions couple code movement with approval and notification policies to avoid
    *shadow IT*, the performance of IT tasks by non-IT staff, and implement compliance.
    Rollback mitigates risk by allowing unsafe changes to be removed from the environment
    automatically if they are found to cause issues.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 推广将代码移动与审批和通知政策结合起来，以避免*影子 IT*（非 IT 员工执行 IT 任务），并实现合规性。回滚通过允许在发现问题时自动将不安全的更改从环境中移除，从而降低风险。
- en: Environments
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境
- en: Copado keeps Salesforce sandboxes in strict transactional sync without repetitive
    and manual refresh operations. Refreshing between lower environments creates significant
    friction in development workflows.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Copado 保持 Salesforce 沙盒在严格的事务同步状态中，无需重复的手动刷新操作。在低环境之间刷新会在开发工作流中造成显著的摩擦。
- en: Important note
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '**Back promotion** is a process designed to transfer user stories from higher
    to lower environments, serving three main purposes: it ensures synchronization
    across environments by maintaining consistent changes, facilitates the propagation
    of hotfixes from production to the lower environments, and helps reduce merge
    conflicts by recommending the back promotion of changes for streamlined integration.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**回退推广**是一个旨在将用户故事从高环境传输到低环境的过程，具有三个主要目的：它通过保持一致的更改确保跨环境的同步，促进将生产环境中的热修复传播到下游环境，并通过推荐回退推广来减少合并冲突，从而简化集成。'
- en: Instead, back promotions (see callout) automatically merge upstream code changes
    into lower environments on demand. The platform continuously monitors the state
    of each organization for deployment readiness before executing downstream distributions.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，回退推广（见提示）会根据需要自动将上游代码更改合并到下游环境。平台持续监控每个组织的部署准备状态，然后执行下游分发。
- en: Limited canary releases introduce a subset of new metadata to a sandbox before
    complete distribution for incremental rollout. This limits risk and allows testing
    smaller change batches.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有限的金丝雀发布将新元数据的子集引入沙盒，以便在完全分发之前进行增量发布。这限制了风险，并允许对较小的更改批次进行测试。
- en: Together, these capabilities allow developers to access the latest shared changes
    without refreshing, even as updates continually flow to production. It provides
    a tight inner development loop.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些功能的结合使开发人员能够在无需刷新页面的情况下访问最新的共享更改，即使更新持续流向生产环境。它提供了一个紧密的内部开发循环。
- en: Change management
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变更管理
- en: Change management, in this context, refers to the ability to control any changes
    to user permissions and access; this poses challenges in Salesforce because permissions
    and access controls sit across interconnected metadata entities such as profiles,
    permission sets, and field-level security rules.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在此语境中，变更管理指的是控制用户权限和访问权限的能力；这在 Salesforce 中构成挑战，因为权限和访问控制分布在各个互联的元数据实体中，如配置文件、权限集和字段级安全规则。
- en: Full profile deployment in Copado encapsulates all associated metadata to deploy
    profiles as a single atomic unit. This avoids permissions drifting out of sync
    as changes spread. Similarly, permission sets maintain consistent field-level
    access between environments.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Copado 中的完整配置文件部署将所有相关元数据封装为一个原子单元，作为一个整体来部署配置文件。这避免了随着更改传播，权限不同步的情况。类似地，权限集在各环境间保持一致的字段级访问。
- en: The platform tracks all modifications, attributing them to specific developers,
    user stories, and commitments for complete auditability. You can produce detailed
    reports on modifications to sensitive configurations or attributes, such as the
    record owner.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 该平台跟踪所有修改，将它们归因于特定的开发人员、用户故事和承诺，以便进行完全的审计。您可以生成关于敏感配置或属性（如记录所有者）的详细修改报告。
- en: In summary, change tracking preserves security compliance and configuration
    integrity as changes flow bi-directionally between lower and higher levels. Dependent
    metadata is deployed in a single package, avoiding the fragmentation that can
    come from multiple deployments.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，变更跟踪在变化双向流动的过程中保持安全合规性和配置完整性，避免了多次部署可能带来的碎片化。相关的元数据作为一个整体包部署。
- en: Administration
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理
- en: A key goal of Copado is enabling implementation without extensive training or
    specialization. All configurations leverage declarative, point-and-click customization
    similar to the core Salesforce interface. Users already familiar with Salesforce
    will find the tool intuitive.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Copado 的一个关键目标是实现无需 extensive 培训或专业化的实施。所有配置都利用类似于 Salesforce 核心界面的声明式、点选式自定义。已经熟悉
    Salesforce 的用户会发现该工具直观易用。
- en: Reporting integrates with Salesforce core objects, such as user stories and
    promotions, to generate process metrics and dashboards for visibility. Prebuilt
    templates ship out of the box.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 报告与 Salesforce 核心对象（如用户故事和推广）集成，生成流程指标和仪表盘，以便于可视化。预构建模板开箱即用。
- en: Admins oversee access control, usage policies, and other platform governance
    by using the same tools as the core of Salesforce. Change sets can push policies
    between environments and profiles control access.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员通过使用与Salesforce核心相同的工具来监督访问控制、使用策略和其他平台治理。变更集可以在环境之间推送策略，个人资料控制访问权限。
- en: Ultimately, the declarative nature of Copado administration keeps the learning
    curve low. Organizations can iteratively refine roles and permissions as practices
    mature without disruption.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，Copado管理的声明性特点保持了较低的学习曲线。随着实践的成熟，组织可以在不打断的情况下逐步优化角色和权限。
- en: Copado provides an extensible platform for implementing the continuous deployment
    of Salesforce applications using practices such as immutable infrastructure and
    infrastructure as code. Its core value comes from the native integration and automated
    handling of deployment complexities inherent to the Salesforce platform.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Copado提供了一个可扩展的平台，用于通过不可变基础设施和基础设施即代码等实践实施Salesforce应用程序的持续部署。它的核心价值来源于Salesforce平台固有的部署复杂性的本地集成和自动化处理。
- en: Overall, Copado aims to eliminate many of the repetitive tasks and barriers
    to implementing modern DevOps practices within Salesforce development. By providing
    version control, CI/CD, and environment management, it allows teams to scale agile
    and iterative development. The consolidation within Salesforce UIs simplifies
    adoption.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，Copado旨在消除在Salesforce开发中实施现代DevOps实践时的许多重复性任务和障碍。通过提供版本控制、CI/CD和环境管理，它使团队能够扩展敏捷和迭代开发。Salesforce
    UI中的整合简化了采用过程。
- en: Robotic testing
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机器人测试
- en: Designed to dramatically reduce the time and effort required for developing
    and deploying test cases, **Copado robotic testing** (**CRT**) offers detailed
    analyses of test cases, enhancing the effectiveness of testing processes. As a
    primarily cloud-based solution, it can be accessed via www.robotic.copado.com,
    and it also has the flexibility of being available as an on-premise service. To
    cater to a diverse user base, CRT offers a limited free version, which serves
    as an excellent resource for learning and understanding the framework.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 旨在显著减少开发和部署测试用例所需的时间和精力，**Copado机器人测试**（**CRT**）提供了测试用例的详细分析，增强了测试过程的有效性。作为一个主要的云解决方案，它可以通过www.robotic.copado.com访问，同时也具有作为本地服务的灵活性。为了满足多样化的用户群体，CRT提供了一个有限的免费版本，非常适合用来学习和理解该框架。
- en: One of the standout features of CRT is its versatility in writing test cases
    for a broad spectrum of applications. This includes web-based applications, mobile
    applications, Salesforce Apps, ServiceNow apps, SAP systems, simple websites,
    and REST APIs. Its dual nature as a low-code and pro-code platform makes it particularly
    accessible; users without extensive knowledge of test scripting languages or frameworks
    can still develop test cases efficiently, thanks to its keyword-driven development
    feature.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: CRT的突出特点之一是它在为广泛应用编写测试用例方面的多功能性。这包括基于Web的应用程序、移动应用程序、Salesforce应用、ServiceNow应用、SAP系统、简单网站和REST
    API。它作为低代码和专业代码平台的双重特性使其特别易于使用；即使用户没有广泛的测试脚本语言或框架知识，也能凭借其基于关键词的开发功能高效开发测试用例。
- en: CRT further streamlines the testing process with its capability to live test
    and video-stream test case executions. This feature significantly expedites the
    debugging process, allowing for real-time issue identification and resolution.
    Additionally, the framework provides the flexibility to schedule test case executions
    in alignment with organizational policies.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: CRT通过其实时测试和视频流测试用例执行的功能，进一步简化了测试过程。此功能显著加速了调试过程，允许实时识别和解决问题。此外，该框架还提供了根据组织政策安排测试用例执行的灵活性。
- en: In summary, Copado robotic testing stands out as a comprehensive, flexible,
    and efficient test automation framework suitable for a wide range of applications
    and user expertise levels. Its combination of live testing capabilities, integration
    options, and a structured approach to testing infrastructure makes it a valuable
    tool in the landscape of software development and quality assurance.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，Copado机器人测试作为一个全面、灵活且高效的自动化测试框架，在适应广泛应用和不同用户专业水平方面表现突出。其结合了实时测试能力、集成选项和对测试基础设施的结构化方法，使其成为软件开发和质量保证领域的宝贵工具。
- en: Understanding the strengths of Copado
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Copado的优势
- en: Founded in 2013, Copado has emerged as a leading end-to-end DevOps platform
    tailored for Salesforce development and release management. With substantial growth
    capital from Salesforce Ventures and other investors, Copado offers a comprehensive
    suite of capabilities to support and accelerate Salesforce deployments.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Copado 成立于2013年，已经发展成为一个领先的端到端 DevOps 平台，专为 Salesforce 开发和发布管理量身定制。凭借来自 Salesforce
    Ventures 和其他投资者的可观增长资本，Copado 提供了一整套全面的功能，支持并加速 Salesforce 部署。
- en: 'A key strength of Copado is its deep native integration with the Salesforce
    platform. Copado was originally constructed to solve a big need in the market
    right now: to help underpin the Salesforce DevOps lifecycle.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Copado 的一个关键优势是它与 Salesforce 平台的深度原生集成。Copado 最初是为了应对当前市场中的一个巨大需求而构建的：帮助支撑 Salesforce
    DevOps 生命周期。
- en: By building natively on Salesforce, Copado inherits the security, authentication,
    and other advantages of the platform while maintaining tight integration between
    development and operations. This contrasts with other tools that operate outside
    of Salesforce, leading to potential integration challenges.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过原生构建在 Salesforce 上，Copado 继承了该平台的安全性、认证以及其他优势，同时保持开发与运维之间的紧密集成。这与其他在 Salesforce
    外部运行的工具形成对比，后者可能会导致集成问题。
- en: Relatedly, Copado’s metadata intelligence gives it an edge in understanding
    dependencies, detecting conflicts, and merging changes within Salesforce environments.
    Copado’s secret sauce is its ability to build (on your behalf) a feature-specific
    branch by converting the one-to-one relationship between your user story in that
    feature-specific branch.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 与此相关，Copado 的元数据智能让它在理解依赖关系、检测冲突和合并 Salesforce 环境中的更改方面具有优势。Copado 的“秘密武器”在于它能够（代表你）通过转换用户故事之间的一对一关系，在特定功能的分支上构建分支。
- en: Important note
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: A merge conflict happens when two changes are made in separate environments
    to the same metadata components in a way that can’t be reconciled automatically.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 合并冲突发生在两个更改分别在不同环境中对相同的元数据组件进行修改，且无法自动和解时。
- en: Rather than operating on files, Copado works at the metadata API layer, giving
    it an advantage in merging and deploying changes. This helps address the merge
    conflicts that users commonly encounter with Salesforce metadata.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Copado 并非在文件层面工作，而是在元数据 API 层面操作，这使它在合并和部署更改时具有优势。这有助于解决用户在处理 Salesforce 元数据时常遇到的合并冲突问题。
- en: Copado also shines in providing end-to-end application lifecycle management,
    not just deployment. Its issue tracking, user stories, pipelines, and workflows
    support development teams in planning, co-ordinating, and tracking work from idea
    through to release. Jira tickets, for instance, become Copado user stories, connecting
    development work to downstream release processes. This can accelerate development
    by linking business requirements to developer efforts.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Copado 在提供端到端应用生命周期管理方面同样表现出色，不仅仅是部署。它的缺陷追踪、用户故事、流水线和工作流支持开发团队从构想到发布的规划、协调和跟踪工作。例如，Jira
    工单会转化为 Copado 用户故事，将开发工作与下游发布流程连接起来。这可以通过将业务需求与开发者的努力相连接，来加速开发。
- en: For larger development teams, Copado is difficult to match in terms of functionality
    and integration. It combines the advantages of Salesforce’s platform with Heroku’s
    scalable infrastructure for computationally intensive tasks, such as metadata
    processing. The Heroku architecture eases security audits while providing necessary
    performance. This allows Copado to offer **application lifecycle management**
    (**ALM**), testing, compliance, and other tools not found in most deployment-focused
    solutions.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对于较大的开发团队来说，Copado 在功能和集成方面难以匹敌。它结合了 Salesforce 平台的优势与 Heroku 可扩展的基础设施，用于计算密集型任务，如元数据处理。Heroku
    架构在提供必要性能的同时简化了安全审计。这使得 Copado 能够提供 **应用生命周期管理** (**ALM**)、测试、合规性和其他大多数部署工具无法提供的功能。
- en: Exploring the weaknesses of Copado
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Copado 的弱点
- en: Copado has emerged as a robust solution, offering a comprehensive suite of features
    that support all aspects of the Salesforce development lifecycle. However, as
    with any tool, it has its limitations and challenges. This section explores these
    potential weaknesses, providing a balanced view of the platform’s capabilities
    and limitations.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Copado 已经成为一个强大的解决方案，提供一整套支持 Salesforce 开发生命周期各个方面的功能。然而，和任何工具一样，它也有其局限性和挑战。本节将探讨这些潜在的弱点，提供平台能力与局限性的平衡视角。
- en: One of the key challenges often mentioned in relation to Copado is its complexity.
    The tool offers a wide range of features and capabilities, which can be overwhelming
    for new users. The learning curve associated with effectively leveraging all of
    the tool’s features can be steep, potentially slowing down implementation and
    adoption.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 与Copado相关的一个关键挑战是其复杂性。该工具提供了广泛的功能和能力，这对于新用户来说可能会感到不知所措。有效利用所有功能所需的学习曲线可能很陡峭，这可能会减慢实施和采纳的速度。
- en: A related issue is the potential difficulty of integrating Copado into existing
    Salesforce and CI/CD ecosystems, particularly those with complex tech stacks.
    Compatibility and seamless integration with various tools may require additional
    configuration and effort, which can be a challenge for teams with limited resources.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一个相关问题是，将Copado集成到现有的Salesforce和CI/CD生态系统中，尤其是那些具有复杂技术堆栈的系统，可能会有一定的困难。与各种工具的兼容性和无缝集成可能需要额外的配置和努力，对于资源有限的团队来说，这可能是一个挑战。
- en: Furthermore, Copado requires ongoing maintenance to keep it aligned with changes
    in Salesforce, your CI/CD pipeline, and your organization’s evolving needs. Managing
    these continuous changes can be time-consuming and may strain resources, especially
    for smaller teams.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Copado需要持续的维护，以使其与Salesforce、您的CI/CD管道以及组织不断变化的需求保持一致。管理这些持续的变化可能会耗时，并且可能会加剧资源压力，尤其是对于较小的团队来说。
- en: Another potential weakness of Copado is the way it handles backend processing.
    Although the use of Heroku for backend processing allows Copado to leverage Heroku’s
    power and speed for metadata retrieval, processing, and deployments, it also has
    a startup cost. If Heroku is being used to deploy metadata from a code repository,
    it has to clone that metadata first, leading to some performance cost for each
    job.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Copado的另一个潜在弱点是其处理后端处理的方式。尽管使用Heroku进行后端处理使Copado能够利用Heroku在元数据检索、处理和部署方面的强大功能和速度，但它也有启动成本。如果Heroku用于从代码库部署元数据，首先必须克隆该元数据，这就为每个作业带来了一定的性能成本。
- en: However, it is worth noting that Copado claims to have optimized this process,
    fetching only the minimal amount of history to enable the merge. But even with
    this optimization, the startup cost can still be a potential bottleneck, especially
    for larger deployments.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，值得注意的是，Copado声称已优化此过程，仅获取最小的历史记录来启用合并。但即便如此，启动成本仍可能成为潜在的瓶颈，尤其是在更大规模的部署中。
- en: Additionally, while Copado’s use of Salesforce as its user interface and for
    data storage offers some benefits, it also presents some challenges. For instance,
    all logs and other files are stored as attachments in the Salesforce package,
    which can make them difficult to read. Moreover, the UI, being built on Salesforce,
    can look slightly awkward to some users and may not always provide the most intuitive
    user experience.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，虽然Copado使用Salesforce作为其用户界面和数据存储提供了一些好处，但它也带来了一些挑战。例如，所有日志和其他文件都作为附件存储在Salesforce包中，这可能使得它们难以阅读。此外，由于UI是基于Salesforce构建的，一些用户可能觉得它看起来略显笨拙，并且可能并不总是提供最直观的用户体验。
- en: 'Moreover, Copado’s notifications about job results are not always obvious,
    which can lead to confusion or missed notifications. This can be particularly
    problematic in a DevOps environment, where timely notifications about deployments,
    tests, and other processes are crucial. See, for instance, the following screenshot
    of a notification that hasn’t been updated properly and, therefore, is marked
    as done but is neither finished nor successful:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Copado关于作业结果的通知并不总是显而易见，这可能导致混淆或错过通知。特别是在DevOps环境中，关于部署、测试和其他过程的及时通知至关重要。举例来说，下面是一个未正确更新的通知截图，因此，它被标记为完成，但既未完成也未成功：
- en: '![Figure 13.4 – A stalled Copado notification](img/B19436_13_04.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图13.4 – 一个停滞的Copado通知](img/B19436_13_04.jpg)'
- en: Figure 13.4 – A stalled Copado notification
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4 – 一个停滞的Copado通知
- en: Ultimately, while Copado is undoubtedly a powerful and comprehensive DevOps
    tool for Salesforce, it is not without its challenges. Understanding these potential
    weaknesses is crucial for organizations considering Copado implementation, as
    it allows them to plan for these challenges and ensure they have the necessary
    resources and strategies in place to overcome them.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，虽然Copado无疑是一个强大而全面的Salesforce DevOps工具，但它并非没有挑战。了解这些潜在的弱点对于考虑实施Copado的组织至关重要，因为这使得他们能够为这些挑战做好计划，并确保他们具备必要的资源和策略来克服这些挑战。
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In conclusion, Copado offers a robust and comprehensive suite of DevOps tools
    specifically designed for Salesforce. By offering deep, native integration with
    Salesforce, it effectively addresses gaps in the platform, automating complex
    tasks such as version control, CI/CD, and environment management.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，Copado 提供了一套强大且全面的 DevOps 工具，专门为 Salesforce 设计。通过深度的原生 Salesforce 集成，它有效地填补了平台中的空白，自动化了版本控制、CI/CD
    和环境管理等复杂任务。
- en: Its user-story-centered data model and seamless integration with third-party
    tools make it a valuable asset for agile and iterative development. However, like
    any tool, it has its limitations. The complexity and steep learning curve might
    pose challenges for new users. Additionally, the backend processing via Heroku,
    while being powerful, may introduce performance costs for larger deployments.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 它以用户故事为中心的数据模型和与第三方工具的无缝集成，使其成为敏捷和迭代开发的宝贵资产。然而，像任何工具一样，它也有其局限性。复杂性和陡峭的学习曲线可能对新用户构成挑战。此外，通过
    Heroku 进行的后台处理，虽然强大，但可能会为较大规模的部署带来性能成本。
- en: Despite these potential hurdles, with the right planning and resources, Copado
    can significantly streamline Salesforce development and release management, making
    it a noteworthy consideration for organizations looking to enhance their Salesforce
    DevOps lifecycle.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在这些潜在的障碍，但通过适当的规划和资源，Copado 可以显著简化 Salesforce 开发和发布管理，成为组织在提升 Salesforce
    DevOps 生命周期方面的一个值得关注的选择。
- en: To address the challenges posed by Copado’s complexity and learning curve, a
    strategic approach involving thorough training and resource allocation is essential.
    Organizations can invest in comprehensive training programs for their teams, focusing
    on hands-on experience and real-world scenarios to build proficiency. Utilizing
    Copado’s extensive documentation and community resources can also aid in this
    learning process. Moreover, phased implementation strategies can help teams gradually
    adapt to the tool’s intricacies, starting with basic functionalities and progressively
    moving to more advanced features.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决 Copado 的复杂性和学习曲线带来的挑战，采取一种战略性的方法，包括彻底的培训和资源分配是至关重要的。组织可以为团队投资全面的培训项目，重点培养实际操作经验和现实场景中的技能，以提高熟练度。利用
    Copado 丰富的文档和社区资源也能帮助这一学习过程。此外，逐步实施的策略有助于团队逐步适应工具的复杂性，从基本功能开始，逐步过渡到更高级的特性。
- en: Regarding the performance costs associated with backend processing via Heroku
    for larger deployments, optimizing the configuration and scaling strategies within
    Heroku can mitigate these issues. This might involve leveraging more efficient
    resource allocation, optimizing workflows for better performance, and ensuring
    that the Heroku environment is tailored to the specific needs of the deployment.
    Additionally, regularly monitoring and reviewing the performance metrics can help
    in identifying and addressing any inefficiencies promptly. By tackling these aspects,
    organizations can harness the full potential of Copado, making it a powerful asset
    in their Salesforce DevOps toolkit.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 关于通过 Heroku 进行后台处理时与较大规模部署相关的性能成本，优化 Heroku 内的配置和扩展策略可以缓解这些问题。这可能包括利用更高效的资源分配，优化工作流以提高性能，并确保
    Heroku 环境针对部署的特定需求进行定制。此外，定期监控和审查性能指标有助于及时识别并解决任何低效问题。通过解决这些方面，组织能够充分发挥 Copado
    的潜力，使其成为 Salesforce DevOps 工具包中的强大资产。
- en: With these measures in place, Copado’s strengths can be fully realized, overcoming
    its initial barriers to offer a streamlined and efficient solution for Salesforce
    development and release management. In moving forward, the next chapter will introduce
    Flosum, another tool in the Salesforce DevOps landscape, and explore its features
    and capabilities.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些措施，Copado 的优势能够得到充分体现，克服其初期的障碍，为 Salesforce 开发和发布管理提供一个简化且高效的解决方案。在接下来的章节中，将介绍
    Flosum，这是 Salesforce DevOps 领域中的另一款工具，并探索其特点和功能。
