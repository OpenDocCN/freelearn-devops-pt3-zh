- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Kubernetes in Today’s World
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes在今天的世界
- en: If you’re reading this book, chances are you’ve been, or still are, in the tech/IT
    world in some capacity, whether it’s from the operations side, the development
    side, or both – perhaps even technical leadership or product management. In any
    case, you’ve most likely heard about a platform/technology called **Kubernetes**.
    From how every company, both small and large, is talking about Kubernetes, a lot
    of engineers and leadership personnel think it’s going to solve many problems.
    Although that’s true, there’s a twist, and with everything that makes our lives
    easier, there are caveats.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在阅读这本书，那么很可能你曾经或者仍然在某个层面上身处于技术/IT领域，无论是从运维方面，开发方面，还是两者兼有——甚至可能是技术领导或产品管理。无论如何，你很可能已经听说过一种叫做**Kubernetes**的平台/技术。从每个公司，无论大小，都在讨论Kubernetes来看，许多工程师和领导人员认为它能够解决很多问题。虽然这是事实，但事情并不简单，像所有让我们生活更轻松的事物一样，Kubernetes也有一些陷阱。
- en: This chapter is primarily theoretical and will answer a lot of the questions
    you most likely have about moving to the cloud, hybrid environments, cloud-native/specific
    applications, and how Kubernetes is taking over the microservice ecosystem.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要是理论性的内容，将回答你关于迁移到云端、混合环境、云原生/特定应用程序以及Kubernetes如何接管微服务生态系统等问题的许多疑问。
- en: By the end of this chapter, you’ll be able to answer some of the questions about
    the pros and cons of implementing Kubernetes. You’ll have a solid understanding
    of why engineers and leadership teams alike are moving to Kubernetes. The gears
    will also start moving in your head concerning what your current application(s)
    look like and whether Kubernetes would be a good fit.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够回答一些关于实施Kubernetes的优缺点的问题。你将对为什么工程师和领导团队都在转向Kubernetes有一个扎实的理解。你也会开始思考你当前的应用程序是什么样子，以及Kubernetes是否适合它们。
- en: 'In this chapter, we’re going to cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The shift to the cloud
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向云端转型
- en: Kubernetes, the new cloud OS and data center
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes，新的云操作系统和数据中心
- en: Cloud-native applications and why they’re important
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云原生应用程序及其重要性
- en: Abstraction is easier, but with a twist
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象更容易了，但有个转折
- en: Start slow and go fast
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 慢慢开始，快速前进
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter will be more theory than hands-on, so you don’t have to worry about
    any coding or labs. To follow along with this chapter, and this book in general,
    you should have beginner-level knowledge of Kubernetes, intermediate knowledge
    of the cloud, and some experience with applications and architecture.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容更多是理论而非实践，所以你不必担心任何编码或实验。要跟上本章的内容，以及本书的内容，你应该具备Kubernetes初学者水平的知识，具有中级云计算知识，并且有一些应用程序和架构的经验。
- en: Moving forward, a lot of the chapters in this book will include labs and hands-on
    work. You can find the code for each exercise in this book’s GitHub repository
    at [https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know](https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，本书将包括实验和动手操作。你可以在本书的GitHub仓库中找到每个练习的代码：[https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know](https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know)。
- en: The shift to the cloud
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向云端转型
- en: 'Before diving into Kubernetes, there’s an important question to ask: Why use
    Kubernetes? The reality is that organizations have been deploying applications
    without Kubernetes for years. There wasn’t Kubernetes in the 1980s when engineers
    were writing software to floppy disks. So, why now?'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解Kubernetes之前，有一个重要的问题需要问：为什么使用Kubernetes？现实情况是，许多组织已经多年没有Kubernetes也在部署应用程序。1980年代，工程师们写软件到软盘上时并没有Kubernetes。那么，为什么现在需要它？
- en: 'The answer to this question is a complicated one and the best place to start
    is by thinking about what the cloud does for us – not necessarily what the cloud
    is, but instead what the cloud helps us think about when deploying software and
    systems from an architect, engineering, and management perspective. In this section,
    you’re going to learn about the following aspects of the cloud:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的答案是复杂的，最好的起点是思考云计算为我们做了什么——不仅仅是云计算本身是什么，更重要的是，从架构师、工程师和管理的角度来看，云计算在部署软件和系统时帮助我们思考了什么。在本节中，你将了解云计算的以下几个方面：
- en: Why organizations care about the cloud
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么组织关心云计算
- en: What the cloud did for engineers
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云计算为工程师做了什么
- en: How abstraction can help us learn from our mistakes
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象如何帮助我们从错误中学习
- en: How the cloud doesn’t exactly do what people think it does
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云计算并不完全是人们想象的那样
- en: Let’s take a closer look.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看。
- en: Why organizations care about the cloud
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么组织关心云计算
- en: 'Leadership teams in organizations, whether it’s the CIO, CTO, or someone in
    a technical leadership position, tend to tie Kubernetes to the cloud. However,
    this couldn’t be any further from the truth. The reason why could be anything
    from incredibly good technical marketing to not having enough experience from
    a hands-on perspective to truly understand what’s happening underneath the hood
    in a cloud environment. However, let’s digress from that and think about why everyone
    cares about the cloud. The best way to do this is with a visual, so let’s take
    a look at the following diagram:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 组织中的领导团队，无论是 CIO、CTO 还是其他技术领导者，通常会把 Kubernetes 与云计算联系在一起。然而，这其实与事实相去甚远。其原因可能是极其优秀的技术营销，也可能是由于没有足够的亲身经验，无法真正理解云环境下的底层运作。然而，让我们暂时离开这个话题，思考一下为什么每个人都关心云计算。最好的方法是通过一个视觉图示，所以让我们来看看以下图示：
- en: '![Figure 1.1 – Data center web app architecture'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.1 – 数据中心 Web 应用架构'
- en: '](img/B19116_01_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_01_01.jpg)'
- en: Figure 1.1 – Data center web app architecture
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 数据中心 Web 应用架构
- en: 'The preceding diagram is of a data center architecture. There are a lot of
    pieces, some marked and some not, including the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图示展示的是一个数据中心架构。它包含了很多组件，有些已经标出，有些则没有，包含以下内容：
- en: Servers
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器
- en: Network equipment
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络设备
- en: Connections between servers
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器之间的连接
- en: Ethernet cables and power cables
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太网电缆和电源电缆
- en: With all of that hardware not only comes costs of actually buying it, but also
    costs around hiring engineers to manage it, maintain it, and keep the lights on
    in the data center. Not to mention it takes about 4 to 6 months for a full data
    center to be up and running. With the time that it takes the data center to get
    up and running, on top of all of the costs and management of hardware, having
    cloud-based systems starts to make a lot of sense to senior leadership teams for
    any organization ranging from start-ups to the Fortune 500.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些硬件不仅带来了购买成本，还有雇佣工程师来管理、维护它并保持数据中心正常运转的费用。更不用说，建立一个完整的数据中心大约需要 4 到 6 个月的时间。考虑到数据中心建设所需的时间，再加上硬件的成本和管理，基于云的系统对于任何组织的高级领导团队来说，尤其是从初创企业到财富
    500 强企业，开始变得非常有意义。
- en: 'Now, let’s take a look at the architecture in *Figure 1**.2*. This diagram
    shows a few things, including the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看*图 1.2* 中的架构。该图展示了一些内容，包括以下几点：
- en: RDS (Amazon’s database service)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RDS（亚马逊的数据库服务）
- en: Load balancers
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载均衡器
- en: CDNs
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CDN（内容分发网络）
- en: S3 buckets (cloud storage in AWS)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: S3 存储桶（AWS 中的云存储）
- en: Route 53 (AWS DNS)
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Route 53（AWS 的 DNS 服务）
- en: The architecture diagram in *Figure 1**.2* is similar to *Figure 1**.1*, in
    that they are both data centers, but only *Figure 1**.2* is virtualized as exactly
    what you would see in a data center. You have network components, storage, databases,
    servers, and everything in between. The biggest difference is what you’re seeing
    here is virtualized. It’s a virtual data center with virtual services. Because
    there are engineers that work at AWS managing the hardware, networking, and other
    peripherals for you, you no longer have to do it. You only have to worry about
    the services themselves and making sure they’re working as expected.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1.2* 中的架构图与*图 1.1* 类似，它们都是数据中心，但只有*图 1.2* 是虚拟化的，完全体现了数据中心的样子。你可以看到网络组件、存储、数据库、服务器以及一切相关内容。最大不同在于，这里看到的是虚拟化的。这是一个虚拟数据中心，包含虚拟服务。因为有工程师在
    AWS 工作，管理硬件、网络和其他外围设备，你不再需要亲自去做这些。你只需关注服务本身，确保它们按预期工作。'
- en: 'No more buying hardware. No more replacing hard drives. No more waiting 4 to
    8 months for hardware to arrive at your data center so you can finally build it.
    Instead, an entire data center is only a few button clicks or a few lines of automation
    code away:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 不再需要购买硬件。不再需要更换硬盘。不再需要等待 4 到 8 个月，等硬件运送到你的数据中心，然后才能开始构建。相反，一个完整的数据中心只需要几次点击按钮或几行自动化代码就能实现：
- en: '![Figure 1.2 – Cloud web app architecture'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.2 – 云 Web 应用架构'
- en: '](img/B19116_01_02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_01_02.jpg)'
- en: Figure 1.2 – Cloud web app architecture
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 云 Web 应用架构
- en: Going off of the preceding diagram, here’s where Kubernetes comes into play.
    Regardless of what option you go with, on-premises or in the cloud, there’s still
    a ton of stuff to manage. Even though the cloud makes infrastructure easier, there
    are still major staffing needs and a big cost behind creating all of the cloud
    infrastructures.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的图示，Kubernetes 就是发挥作用的地方。无论你选择哪种方式，无论是本地部署还是云端，都有大量内容需要管理。即使云计算使基础设施管理变得更简单，创建所有云基础设施仍然需要大量的人员投入和巨大的成本。
- en: 'The following are a few pieces of the puzzle to manage:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要管理的几个组成部分：
- en: Load balancers
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载均衡器
- en: Virtual machines (or bare-metal servers)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟机（或裸机服务器）
- en: Network equipment (virtual or physical)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络设备（虚拟或物理）
- en: Subnets, private IPs, public IPs, and gateways
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子网、私有 IP、公有 IP 和网关
- en: Security for multiple pieces of virtualized hardware and services
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个虚拟化硬件和服务的安全性
- en: And that’s just to name the general categories. Within each category, there
    are multiple components (physical and/or virtual) to manage. With Kubernetes,
    it’s all abstracted away from you. There aren’t any firewalls or gateways because
    that’s managed via kube-proxy. There are no virtual machines that you have to
    deploy other than the Kubernetes nodes because the apps are running in Kubernetes
    Pods.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是概括了主要类别。每个类别内都有多个组件（物理和/或虚拟）需要管理。有了 Kubernetes，这些都被抽象化了。没有防火墙或网关，因为它们是通过
    kube-proxy 管理的。除了 Kubernetes 节点，你无需部署其他虚拟机，因为应用程序是在 Kubernetes Pods 中运行的。
- en: If you run Kubernetes in a Kubernetes service such as **Azure Kubernetes Service**
    (**AKS**) or GKE, the management of the Control Plane, sometimes referred to as
    the API server or the master nodes (a now deprecated way to describe Control Planes),
    is completely abstracted away from you.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 **Azure Kubernetes Service**（**AKS**）或 GKE 等 Kubernetes 服务中运行 Kubernetes，控制平面（有时被称为
    API 服务器或主节点，这种描述控制平面已被弃用）的管理完全由你抽象化处理。
- en: What AKS, GKE, or another one of the cloud Kubernetes services does underneath
    the hood is the same thing that you would do if you ran a raw Kubernetes cluster
    in a bunch of virtual machines. The underlying technology, how it works, and how
    it’s used don’t change. The only thing that changes is the abstraction.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: AKS、GKE 或其他云 Kubernetes 服务在后台做的事情和你在一堆虚拟机中运行原生 Kubernetes 集群时所做的事情是一样的。底层技术、运作方式以及使用方式都没有变化。唯一改变的是抽象层。
- en: That’s why the cloud is important for Kubernetes and that’s why CIOs, CTOs,
    and engineers should care.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么云计算对 Kubernetes 很重要，也就是为什么 CIO、CTO 和工程师应该关注它。
- en: What the cloud did for engineers
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云计算为工程师做了什么
- en: “*The cloud is just someone else’s computer,*” as some may say in passing or
    on funny stickers. As we all know, in every joke is a little truth. The truth
    is, it’s correct. When you’re interacting with the cloud, it’s not that you’re
    interacting with some magical service that is *just there*. Instead, you’re interacting
    with services that are managed by other engineers.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: “*云就是别人的计算机*”，正如有些人可能随口说或贴在有趣的贴纸上。正如我们所知，每个笑话中都有一些真理。真相就是，这是对的。当你与云互动时，并不是与某种神奇的服务互动，这些服务*就是存在*的。相反，你是在与由其他工程师管理的服务互动。
- en: 'For example, let’s say you’re working with Azure virtual machines or EC2 instances
    in AWS. From your perspective, you log into one of the portals or write some **Infrastructure
    as Code** (**IaC**) and in a few minutes, your new virtual server/cloud server
    is deployed. On the backend, there’s way more that goes into it. There are a ton
    of different parts, some of which include the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你正在使用 Azure 虚拟机或 AWS 中的 EC2 实例。从你的角度来看，你登录到其中一个门户或编写一些 **基础设施即代码**（**IaC**），几分钟后，你的新虚拟服务器/云服务器就部署好了。在后台，涉及的事情远不止这些。这里面有很多不同的部分，其中包括以下内容：
- en: Autoscaling the servers
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动扩展服务器
- en: Doing multiple checks to ensure that there’s enough hard disk, CPU, and RAM
    space on the physical/bare-metal server that’s being used
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行多次检查，确保所使用的物理/裸机服务器有足够的硬盘、CPU 和 RAM 空间。
- en: Networking setup
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络设置
- en: Lots of automation
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大量自动化
- en: Remember, because the cloud servers that you’re deploying are running on bare-metal
    servers, people have to be there to manage those servers and maintain them. The
    cloud is an abstraction layer that you don’t see. With that being said, the cloud
    has done a lot for engineers.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，因为你部署的云服务器运行在裸机服务器上，所以必须有人来管理这些服务器并进行维护。云计算是一个你看不见的抽象层。话虽如此，云计算确实为工程师做了很多事情。
- en: Let’s take a start-up company for example. Years ago, if a start-up company
    wanted to do anything in the tech space, they needed servers to host applications
    and websites. For a small company that’s working out of a tiny office or even
    from someone’s house, it’s not possible to have a layer of high availability,
    redundancy, and scalability. They simply cannot afford the hardware, the space,
    and the employees to do it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一个初创公司为例。几年前，如果一家初创公司想要在科技领域有所作为，他们需要服务器来托管应用程序和网站。对于一个在狭小办公室甚至某人家中办公的小公司来说，拥有高可用性、冗余性和可扩展性的一层是不可能的。他们根本无法负担硬件、空间和员工来实现这些目标。
- en: With the cloud, they no longer have to worry about having to do all of that.
    Instead, the start-up can focus on building applications and deploying them to
    the cloud. Deploying applications to the cloud is not easy and it certainly has
    its own complexity, but the idea behind it is to abstract away physical needs
    (servers, infrastructure, and so on) that your company may not want to/have to
    worry about.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 借助云计算，他们不再需要担心所有这些事情。相反，初创公司可以专注于构建应用程序并将其部署到云端。将应用程序部署到云端并不容易，确实有其自身的复杂性，但背后的理念是将那些公司可能不想/不必担心的物理需求（服务器、基础设施等）抽象化。
- en: Kubernetes, the new cloud OS and data center
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes，新的云操作系统和数据中心
- en: 'Kubernetes is a topic that’s on everyone’s mind, but at the same time, a lot
    of individuals don’t understand why. Is it the actual platform itself? Or what
    the platform does for engineers in today’s world? The answer to those questions
    is – sort of both. Kubernetes does several things, but the primary pieces include
    the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes是一个大家都在关注的话题，但与此同时，许多人并不理解为什么。是平台本身吗？还是平台在当今世界为工程师们做了些什么？这些问题的答案是——有点两者兼而有之。Kubernetes做了很多事情，但其中的主要部分包括以下几点：
- en: Deploying your containerized application
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署你的容器化应用程序
- en: Scaling your application
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展你的应用程序
- en: Ensuring that your application is highly available
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你的应用程序高度可用
- en: Giving you the ability to secure your application and the users accessing the
    application
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让你能够保护你的应用程序及其访问用户的安全
- en: These four points sound like what engineers have already been doing with computers
    since the inception of the first mainframe. The question now becomes, why is Kubernetes
    so popular?
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这四个要点听起来像是工程师自从第一台大型计算机问世以来就一直在做的事情。那么问题来了，为什么Kubernetes这么受欢迎？
- en: Kubernetes in the cloud
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云中的Kubernetes
- en: 'Everywhere you look, it feels like there’s a new way to utilize the Kubernetes
    platform or some new tool that’s supposed to make your life easier. Some of these
    platforms include the following (you’ll learn more about these in the upcoming
    chapters):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你往哪里看，都感觉总有一种新的方式可以利用Kubernetes平台，或者某个新的工具可以让你的生活更轻松。其中一些平台包括以下内容（你将在接下来的章节中了解更多）：
- en: Cloud Kubernetes services such as AKS, **Google Kubernetes Engine** (**GKE**),
    and Amazon **Elastic Kubernetes** **Service** (**EKS**)
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云Kubernetes服务，如AKS、**谷歌Kubernetes引擎**（**GKE**）和亚马逊**弹性Kubernetes服务**（**EKS**）
- en: '**Platform-as-a-Service** (**PaaS**) offerings such as OpenShift'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台即服务**（**PaaS**）如OpenShift'
- en: Serverless Kubernetes platforms such as Azure Container Apps and AWS Fargate
    profiles on EKS
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器Kubernetes平台，如Azure容器应用和AWS Fargate在EKS上的配置
- en: Although that’s not an extensive list, you can see that just the sheer number
    of platforms that are at your disposal can make it extremely difficult to pick
    and choose what you should ultimately go with. The semi-agreed-upon answer to
    this question is that it all depends on your current ecosystem. If you’re in AWS,
    use EKS. If you’re in Azure, use AKS. If you’re a Red Hat Enterprise customer,
    check out OpenShift. The reason why is that, at the end of the day, all of the
    Kubernetes services are doing the same thing. They’re all using Kubernetes under
    the hood and utilizing cloud services to make your life easier.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这并不是一个详尽的清单，但你可以看到，仅仅是平台的数量之多，就可能让选择最终该使用哪个变得非常困难。对此问题的半公认答案是，这完全取决于你当前的生态系统。如果你在AWS，使用EKS。如果你在Azure，使用AKS。如果你是Red
    Hat Enterprise客户，看看OpenShift。原因是，归根结底，所有这些Kubernetes服务都在做同样的事情。它们都在幕后使用Kubernetes，并利用云服务让你的生活更轻松。
- en: For example, if you’re using AKS, chances are you probably want to use **Azure
    Active Directory** (**AAD**) to manage who has access to what in the AKS cluster.
    Azure makes it extremely straightforward to implement this because the goal of
    a Kubernetes service in the cloud is to do exactly that. All public clouds in
    general are trying to make your life easier, regardless of what cloud you’re using.
    A great example of this is how you can use AAD inside of GKE via federation with
    Cloud Identity to map AAD tenants, users, and groups.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，如果你使用的是 AKS，可能你会想用 **Azure Active Directory** (**AAD**) 来管理谁能访问 AKS 集群中的哪些内容。Azure
    使得实现这一点非常简单，因为云中 Kubernetes 服务的目标正是实现这一点。无论你使用哪个云服务，所有公共云的目标都是让你的生活更轻松。一个很好的例子是，你可以通过与
    Cloud Identity 的联合，将 AAD 租户、用户和组映射到 GKE 中使用 AAD。
- en: Why Kubernetes?
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么选择 Kubernetes？
- en: 'The question from the beginning of this chapter around why people want to use
    Kubernetes has sort of been answered, but there’s still more to think about. Primarily,
    we must think about why everyone is flocking toward Kubernetes, especially Kubernetes
    services in the cloud. The answer to why people are using Kubernetes services
    in the cloud is typically something similar to one of the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 本章开始时提出的关于为什么人们想要使用 Kubernetes 的问题已经有了些许答案，但仍有更多需要思考的地方。首先，我们必须思考为什么每个人都趋向于使用
    Kubernetes，尤其是在云中使用 Kubernetes 服务的原因。人们使用云中 Kubernetes 服务的答案通常类似于以下几种：
- en: You don’t have to worry about the underlying infrastructure
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你无需担心底层基础设施
- en: Worker nodes and Control Planes are scaled for you *automagically*
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作节点和控制平面会*自动*进行扩展
- en: And although those are great answers, you’re still not any closer to the answer
    as to why you should use Kubernetes if all it’s doing is what everyone has been
    doing in tech for years. It’s not implementing anything new or out of the ordinary.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些回答很棒，但如果 Kubernetes 所做的仅仅是大家已经在技术行业做了多年的事情，你依然无法得到为什么要使用 Kubernetes 的答案。它并没有实现任何新颖或与众不同的东西。
- en: Simply put, the reason why people like Kubernetes is that it allows you to interact
    with your infrastructure via an API. When you run a Kubernetes command such as
    `kubectl apply -f deployment.yaml`, you’re interacting with the Kubernetes API.
    When you run a command such as `kubectl get deployments`, you’re interacting with
    an API. 99% of what you do when interacting with Kubernetes is all API-based.
    It’s a bunch of `GET` and `POST` requests. The reason why Kubernetes makes engineers’
    lives easier is that what you used to have to do to get an application up and
    running on multiple servers is now abstracted away and it’s all now at the programmatic
    level. All APIs.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，人们喜欢 Kubernetes 的原因是它允许你通过 API 与基础设施交互。当你运行类似 `kubectl apply -f deployment.yaml`
    的 Kubernetes 命令时，你实际上是在与 Kubernetes API 进行交互。当你运行类似 `kubectl get deployments`
    的命令时，你也是在与 API 交互。你与 Kubernetes 交互时所做的 99% 的事情都是基于 API 的。这是大量的 `GET` 和 `POST`
    请求。Kubernetes 让工程师生活更轻松的原因是，过去为了让一个应用程序在多台服务器上运行，你需要做的工作现在都被抽象化了，所有这些都变成了程序化层面的操作，都是
    API。
- en: Kubernetes as a data center
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes 作为数据中心
- en: Remember data centers? Those things that have the loud, big computers running
    with a bunch of fans and air conditioners? Perhaps you’re from the era of spending
    hours in a data center, racking and stacking servers, and taking a nap on the
    data center floor using your backpack as a pillow. If you’ve never done any of
    that, consider yourself a lucky person!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 记得数据中心吗？那些有着大而嘈杂的计算机运行、配有一堆风扇和空调的地方？也许你曾经是那个在数据中心里花费几个小时、安装和堆叠服务器，并用背包当枕头在数据中心地板上小睡的人。如果你从来没有做过这些事情，恭喜你算是一个幸运的人！
- en: 'When thinking about a data center, there are several components, but let’s
    think about the main ones that engineers care about:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们考虑数据中心时，有几个组件，但我们先来思考工程师关心的主要部分：
- en: Servers
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器
- en: Network equipment (firewalls, load balancers, routers, switches, gateways, and
    so on)
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络设备（防火墙、负载均衡器、路由器、交换机、网关等等）
- en: Outbound and inbound connectivity
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部和内部连接性
- en: Security
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性
- en: The ability to run software and virtualization on the servers
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在服务器上运行软件和虚拟化的能力
- en: Containerization platforms such as LXC and Docker were able to give us the fifth
    point mentioned here – virtualization of OSes and the ability to run software
    – but what about the rest? Engineers needed a way to orchestrate and manage the
    software and virtualized OSes. That’s where Kubernetes comes into play.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 像 LXC 和 Docker 这样的容器化平台能够为我们提供这里提到的第五点——操作系统虚拟化和运行软件的能力——但其他方面怎么办呢？工程师们需要一种方式来编排和管理软件与虚拟化的操作系统。这就是
    Kubernetes 的作用所在。
- en: 'Kubernetes fills every piece of the data center puzzle:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 填补了数据中心每一块拼图：
- en: Networking, including Pod-to-Pod communication, services, service meshes, Ingress,
    load balancing, and routing.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络，包括 Pod 到 Pod 的通信、服务、服务网格、Ingress、负载均衡和路由。
- en: Security and encryption between Pods and services
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pods 和服务之间的安全性与加密
- en: High availability for clusters
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群的高可用性
- en: The ability to deploy, manage, scale, and maintain applications of any kind
    (must be containerized)
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署、管理、扩展和维护各种应用的能力（必须是容器化的）
- en: Authentication and authorization capabilities from third-party tools such as
    AAD and IAM users/roles
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自第三方工具（如 AAD 和 IAM 用户/角色）的认证与授权能力
- en: Kubernetes is a one-stop shop for everything that you would find in a data center.
    The biggest difference is that the infrastructure (if you’re running in the cloud
    and not on-premises) is completely abstracted away. You don’t have to worry about
    the day-one operations; you only have to worry about getting an application deployed,
    orchestrated, and working as you and your team see fit.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是一个一站式的解决方案，涵盖了你在数据中心中会遇到的所有内容。最大的区别在于，基础设施（如果你是在云上运行而非本地部署）是完全抽象化的。你不需要担心第一天的操作；你只需要关心如何部署、编排并使应用按照你和团队的需求正常工作。
- en: One important piece of information to think about here is with new technology
    comes new problems. Kubernetes isn’t easy. Just because you don’t have to deal
    with sleeping on a data center floor doesn’t mean you won’t have an entirely new
    set of problems to understand and fix. Does Kubernetes make your life easier as
    an engineer? Yes. Does Kubernetes make your life harder? Yes. Although, the goal
    is to make your life a little less hard with Kubernetes, please keep in mind that
    it isn’t a magic box that you set and forget.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要考虑的一个重要信息是，新的技术带来新的问题。Kubernetes 并不简单。仅仅因为你不需要在数据中心地板上过夜，并不意味着你不会面临一套全新的问题，去理解并解决。Kubernetes
    会让你的工程师生活更轻松吗？是的。Kubernetes 会让你的生活更艰难吗？是的。尽管如此，目标是让你在使用 Kubernetes 时稍微轻松一点，请记住，它不是一个你设定好就能忘记的魔法盒子。
- en: Cloud-native apps and why they’re important
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云原生应用及其重要性
- en: When thinking about creating any type of application, automation code, or piece
    of software, there always needs to be some sort of standard. The thing is, there
    are many standards and there isn’t a one-size-fits-all solution. Sure, there are
    (what should be) mandatory standards for writing code such as storing the code
    in source control and running certain types of tests, but the workflows for each
    organization will be drastically different.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在思考创建任何类型的应用、自动化代码或软件时，总是需要某种标准。问题是，存在许多标准，并没有一个适用于所有的解决方案。当然，对于编写代码有一些（应该是）强制性的标准，比如将代码存储在源代码管理中并运行某些类型的测试，但每个组织的工作流将会截然不同。
- en: 'When it comes to cloud-native applications and applications running on Kubernetes,
    the thought process of workflows is the same as any other application, but there
    are true, standard processes that are automatically implemented for you. This
    includes things such as the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于云原生应用和在 Kubernetes 上运行的应用，工作流的思维方式与任何其他应用相同，但有一些真实的、标准化的流程会自动为你实现。这包括以下内容：
- en: Easy autoscaling
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单的自动扩展
- en: Self-healing
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自愈能力
- en: Networking out of the box
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开箱即用的网络
- en: And a lot more
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以及更多
- en: In the upcoming section, we’ll build on what you learned previously and dive
    into what cloud-native apps do for organizations.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将基于你之前学到的内容，深入探讨云原生应用如何为组织带来价值。
- en: What cloud-native apps do for organizations
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云原生应用为组织带来的价值
- en: 'By definition, a cloud-native application gives you the ability to do the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 从定义上来说，云原生应用使你能够做到以下几点：
- en: Easily scale
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松扩展
- en: Make highly available almost out of the box
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开箱即用地提供高可用性
- en: Deploy more efficiently
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更高效的部署
- en: Continuously make changes in a much easier fashion versus outside of Kubernetes
    in a bare-metal/data center environment
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相比于裸机/数据中心环境，Kubernetes 使得持续改动变得更加轻松
- en: When thinking about cloud-native applications and the preceding list, microservices
    typically come to mind. The idea behind microservices, which is a big piece of
    the idea behind cloud-native, is the ability to make changes faster and more efficiently.
    When you’re dealing with a monolithic application, the application has many dependencies
    and is essentially tied together. You can’t update one piece of the application
    without bringing down the rest of the application. Blue/green and canary deployments
    are far more complicated because of the tightly coupled monolithic application.
    Self-healing and scalability mean scaling the entire application, not just the
    pieces that need to be scaled, which means more resources (RAM, CPU, and so on)
    are typically consumed than what’s needed.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑云原生应用程序和前述内容时，通常会联想到微服务。微服务的背后理念，正是云原生背后的重要理念之一，即实现更快速、更高效的变更。当你在处理一个单体应用时，应用程序有很多依赖，基本上是紧密结合的。你不能更新应用程序的某一部分而不影响到其余部分。由于单体应用的紧密耦合，蓝绿部署和金丝雀部署会变得更加复杂。自我修复和可扩展性意味着需要扩展整个应用程序，而不仅仅是需要扩展的部分，这通常意味着消耗比实际需要更多的资源（如
    RAM、CPU 等）。
- en: Cloud-native and the microservice mindset aim to fix this problem. With microservices
    running inside Kubernetes, there are some extreme benefits. You can manage how
    many replicas (copies) of the application are running. That way, you can scale
    them out or scale them back when needed. Self-healing of Pods is far more efficient
    since if a piece of the application that’s running inside of a Pod goes down,
    it’s not a huge deal because it’ll come right back up automatically. The applications
    running inside of Pods, which have one or more containers running inside of the
    Pods, are loosely coupled, so updating/upgrading versions of the application in
    a blue/green or canary scenario utilizing a rolling update is far less likely
    to fail.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生和微服务思维方式旨在解决这个问题。在 Kubernetes 中运行微服务带来了一些极大的好处。你可以管理应用程序的副本（副本数）数量。这样，当需要时，你可以将它们扩展或缩减。Pod
    的自我修复效率更高，因为如果运行在 Pod 中的某个应用程序部分出现故障，这不是什么大问题，因为它会自动重新启动。运行在 Pod 中的应用程序，Pod 内包含一个或多个容器，采用松散耦合的方式，因此在蓝绿部署或金丝雀部署场景下，使用滚动更新来更新/升级应用程序版本时，失败的可能性要小得多。
- en: When it comes to teams, as in, individual engineers, microservices help a ton.
    With a monolithic application, there is a fair amount of coordination that has
    to happen between the team when changing anything in the code base. Although teamwork
    and communication are crucial, there shouldn’t be a reason to let everyone know
    about a code change in the development environment that you’re making to test
    a piece of functionality without breaking everyone else’s code. With how fast
    organizations want to move in today’s world, this process slows engineering teams
    down to a grinding halt. Not to mention, if an engineer wants to test how the
    functionality will work with the rest of the application, they shouldn’t have
    to worry about every piece of the application breaking. That’s really where microservices
    shine.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在团队方面，尤其是针对单个工程师，微服务帮助非常大。对于单体应用程序，在更改代码库中的任何内容时，团队之间必须进行相当多的协调。尽管团队合作和沟通至关重要，但不应该让每个人都知道你在开发环境中进行的代码更改，尤其是你在测试某个功能时，不想破坏其他人的代码。在当今这个组织希望快速推进的时代，这个过程会使工程团队的效率大幅下降，甚至停滞不前。更不用说，如果工程师想测试某个功能如何与其他应用程序集成时，他们不应该担心整个应用程序的崩溃。这正是微服务的优势所在。
- en: When the Kubernetes architecture was built, it was thought about in the same
    way as cloud-native applications – a loosely coupled architecture that is easily
    scalable and doesn’t have a ton of dependencies (hence, the microservice movement).
    Can you run monolithic applications on Kubernetes? Absolutely. Will they still
    self-heal and autoscale? Absolutely. The idea behind a cloud-native application
    environment and cloud-native Kubernetes is to use a microservice-style architecture,
    but you shouldn’t let that stop you from jumping into Kubernetes. The primary
    goal is to have independent services that can be accessed via an **Application
    Programming** **Interface** (**API**).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建 Kubernetes 架构时，其思想与云原生应用程序相同——一种松散耦合的架构，易于扩展，并且没有大量依赖（因此出现了微服务运动）。你可以在 Kubernetes
    上运行单片应用吗？完全可以。它们仍然会自我修复和自动扩展。云原生应用环境和云原生 Kubernetes 的理念是使用微服务风格的架构，但这不应阻止你开始使用
    Kubernetes。主要目标是拥有可以通过**应用程序编程** **接口**（**API**）访问的独立服务。
- en: 'The final piece of the puzzle is containerized applications. Before even running
    an application inside Kubernetes, it must be containerized. When the idea of containers
    was thought about way before Docker was around, the idea was to have the ability
    to split an entire application into tiny micro-sized pieces. When containers are
    built, they’re built with the same mindset as the following aspects:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的难题是容器化应用程序。甚至在将应用程序放入 Kubernetes 运行之前，它必须先进行容器化。在 Docker 出现之前，关于容器的想法早已存在，其思想是将整个应用程序分解为微小的微服务。构建容器时，它们与以下方面具有相同的思维模式：
- en: Self-contained execution environments
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自包含执行环境
- en: Virtualized OSes
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟化操作系统
- en: Microservice architecture with the ability to split up pieces of an entire application
    and consolidate it into a single container for the ability to easily scale, update,
    and swap out
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有将整个应用程序分割并合并到单个容器中的能力的微服务架构，以便轻松扩展、更新和替换
- en: The world is cloud-based
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 世界是基于云的
- en: One of the worst things that an organization can do in today’s world, from an
    engineering perspective, is to get left behind. The last thing an organization
    wants is to realize 10 years later that the systems and dependencies that they
    have in place are so old that no organization or software company is even supporting
    them anymore. The golden rule before 2015/2016 was to ensure that the architecture
    and the people/engineers running the architecture were up to date every 5 to 10
    years. Now, with how fast technology is moving, it’s more like every 2 to 5 years.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的工程视角下，组织可以做的最糟糕的事情之一是被抛在后面。组织最不希望看到的情况是，10年后意识到其系统和依赖关系如此老旧，以至于没有任何组织或软件公司支持它们。在2015/2016年之前的黄金法则是确保每5到10年进行一次架构更新和人员/工程师更新。现在，随着技术发展的速度加快，这个周期更像是每2到5年。
- en: When looking at organizations such as Microsoft, Google, and AWS, they’re releasing
    huge changes and updates all the time. When attending a conference such as Microsoft
    Build or the AWS Summit, the keynotes are filled with game-changing technology
    with tons of new services coming to the cloud platforms all the time. The reality
    is that if organizations don’t want to be left behind, they can’t wait more than
    5 years to start thinking about the newest technology.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当看到微软、谷歌和AWS等组织时，它们一直在不断发布重大的变化和更新。参加像微软 Build 或 AWS Summit 这样的会议时，主题演讲充斥着变革性技术，云平台上的大量新服务也随时都在推出。事实是，如果组织不想落后，就不能等待超过5年来考虑最新的技术。
- en: With that being said, many organizations can’t simply upgrade systems every
    6 months or every year because they’re too large and they don’t have enough people
    to make those migrations and updates. However, technology leaders need to start
    thinking about what this will look like because the future of the company will
    be on the line. For example, let’s look at the change in Windows Server over the
    past few years. Microsoft used to constantly talk about new Windows Server versions
    and features at every conference. Now, it’s all about Azure. The technology world
    is changing drastically.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，许多组织不能简单地每六个月或每年升级系统，因为它们规模太大，没有足够的人手进行这些迁移和更新。然而，技术领导者需要开始考虑这将会带来什么样的变化，因为公司的未来将会受到影响。例如，让我们看看过去几年中
    Windows Server 的变化。微软过去常常在每次会议上谈论新的 Windows Server 版本和功能。现在，一切都集中在 Azure 上。技术世界正在发生巨大的变化。
- en: Where Kubernetes fits in here is that it helps you make cloud-native and fast-moving
    decisions almost automatically. For example, let’s say (in a crazy world) Kubernetes
    goes away in 3 years. You still have your containerized applications and your
    code base that’s in source control and loosely coupled, which means you can run
    it anywhere else, such as in a serverless service or even a virtual machine if
    it comes down to it. With the way that the world is going, it’s not necessarily
    about always using Kubernetes to prevent an organization from going down. It’s
    about what Kubernetes does for engineers, which is that it allows you to manage
    infrastructure and applications at the API level.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes在这里的作用是，它几乎自动地帮助你做出云原生和快速发展的决策。例如，假设（在一个疯狂的世界里）Kubernetes在三年内消失了。你依然拥有容器化的应用程序和保存在源代码控制中的代码库，并且它们是松耦合的，这意味着你可以将它们运行在任何地方，比如在无服务器服务中，甚至是虚拟机中，万一需要这样做。根据当前的技术趋势，问题不在于是否始终使用Kubernetes来防止组织倒下，而是Kubernetes为工程师所做的事情，它让你能够在API层面管理基础设施和应用程序。
- en: Engineering talent is toward the cloud
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工程人才正向云计算发展
- en: One last small piece we will talk about is the future of engineers themselves.
    New technology professionals are all about learning the latest and greatest. Why?
    Because they want the ability to stay competitive and get jobs. They want to stay
    up to date so they can have a long and healthy career. What this means is that
    they aren’t interested in learning about how to run a data center, because the
    tech world is telling everyone to learn about the cloud.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后要讨论的一个小话题是工程师自身的未来。新一代技术专业人士热衷于学习最新最前沿的技术。为什么？因为他们希望能够保持竞争力并获得工作机会。他们希望保持与时俱进，从而拥有长久而健康的职业生涯。这意味着，他们不太愿意学习如何运行数据中心，因为科技界正在告诉每个人要学习云计算。
- en: As time goes on, it’s going to become increasingly difficult for organizations
    to find individuals that can manage and maintain legacy systems. With that being
    said, there’s no end in sight for legacy systems going away. That’s why organizations
    such as banks are still looking for COBOL developers. The thing is, no engineer
    wants to bet their career in their 20s on learning legacy pieces.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，组织越来越难以找到能够管理和维护遗留系统的人才。尽管如此，遗留系统的消失似乎没有尽头。因此，像银行这样的组织仍然在寻找COBOL开发人员。问题是，没有哪个工程师愿意在20多岁时把自己的职业生涯押注在学习这些遗留技术上。
- en: Abstraction is easier, but with a twist
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抽象更简单了，但有个小变化
- en: One of the biggest buzzwords in the technology space today is *abstraction*.
    Abstraction, at its highest level, involves removing certain pieces of work from
    you that you specifically need to do to get the job done. For example, if a developer
    needs to run code, they need to run code. They don’t need to build virtual machines
    or deploy networks. They simply need to run an application. Removing the need
    for a virtual machine or a network is abstracting away what the developer doesn’t
    need to spend time and focus on.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，技术领域最热门的词之一就是*抽象*。抽象，在最高层次上，意味着将你需要做的某些工作移除掉。例如，如果一个开发者需要运行代码，那么他只需要运行代码。他不需要构建虚拟机或部署网络，他只需要运行应用程序。去除虚拟机或网络的需求就是在抽象出开发者不需要花时间和精力去关注的部分。
- en: What abstraction does
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽象的作用
- en: Let’s take a look at what abstraction does from two sides – Dev and Ops.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从两个角度来看抽象的作用——开发和运维。
- en: From a Dev perspective, the goal of a developer is to plan out pieces of an
    application, write the code to make those pieces work, and deploy them to see
    how the pieces work together. However, to deploy the code, you used to need a
    server, an OS, and other components. With platforms such as Kubernetes, developers
    don’t need that anymore. Instead of having to worry about deploying virtual machines,
    developers simply have to write a Kubernetes manifest that contains a container
    image with the application inside of it. No more having to worry about day-one
    operations.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 从开发者的角度来看，开发者的目标是规划应用程序的各个部分，编写代码使这些部分能够正常工作，并将其部署以查看各部分如何协同工作。然而，为了部署代码，过去你需要一个服务器、一个操作系统以及其他组件。像Kubernetes这样的平台如今不再需要这些。开发者不再需要担心部署虚拟机，只需编写一个包含应用程序的容器镜像的Kubernetes清单。再也不需要为第一天的操作而烦恼。
- en: From an Ops perspective, infrastructure engineers or cloud engineers no longer
    have to worry about having to stop what they’re doing to order servers, deploy
    virtual machines, and fight to make an OS work as expected. Instead, they can
    write out a Kubernetes manifest and other API-driven techniques (such as IaC)
    to ensure that a Kubernetes cluster is up and running, operational, and ready
    to host developer code/container images.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 从运营的角度来看，基础设施工程师或云工程师不再需要担心为了订购服务器、部署虚拟机、并努力让操作系统按预期运行而中断当前的工作。相反，他们可以编写 Kubernetes
    清单以及其他基于 API 的技术（如 IaC）来确保 Kubernetes 集群能够启动并运行，保持运作，并准备好托管开发者的代码/容器镜像。
- en: What abstraction doesn’t do
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽象化不能做的事情
- en: One primary thing that abstraction doesn’t do is remove the need to think logically
    and from an architectural perspective for engineering-related work. Abstraction
    removes what’s now considered the *low-hanging fruit* of an environment. For example,
    a virtual machine with the need to deploy an OS and manage all the components
    can now be considered low-hanging fruit when the other option is to deploy a Kubernetes
    cluster and manage the infrastructure at the API level.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象化不能做的主要事情之一是去除工程相关工作中对逻辑思维和架构思考的需求。抽象化移除了现在被认为是环境中*低悬果实*的部分。例如，虚拟机需要部署操作系统并管理所有组件，现在可以视为低悬果实，因为另一种选择是部署
    Kubernetes 集群，并在 API 层面管理基础设施。
- en: The important piece to remember is that engineers and developers still need
    to think. Abstraction isn’t about having a solution where you press a button or
    two and poof, your application is up and running with scaling and plenty of high
    availability. Abstraction at this level still requires solid architecture, planning,
    and repeatable processes.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的重要一点是，工程师和开发者仍然需要思考。抽象化并不是让你按下一个或两个按钮，哗啦一下，应用程序就能运行，并具备扩展性和高度可用性。在这个层次上的抽象化仍然需要扎实的架构、规划和可重复的流程。
- en: Start slow and go fast
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从慢慢开始，快速前进
- en: The final part of this chapter will involve mapping out how you can start slow
    but, at the same time, go fast when implementing Kubernetes. The idea is that
    you want to understand what’s happening inside of your organization so that you
    truly know the need for Kubernetes. Once you know that, you can start implementing
    it as fast as possible without taking on technical debt and management worries.
    When thinking about how to start slow and go fast, the premise is to understand
    the *why* behind the conversation around Kubernetes and then once you know that,
    start iterating.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后部分将涉及如何在实现 Kubernetes 时，既能从慢开始，又能迅速前进的策略。这个想法是你要理解你组织内部发生了什么，才能真正了解 Kubernetes
    的需求。一旦你了解了这一点，就可以尽可能快地开始实施，而不必承担技术债务和管理上的困扰。当考虑如何从慢开始、快速前进时，前提是理解围绕 Kubernetes
    的对话背后的*为什么*，然后一旦你知道了这一点，就可以开始迭代。
- en: Understanding the engineering need for Kubernetes
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 Kubernetes 的工程需求
- en: 'Every good engineer has a lot of goals, but a few of the primary ones are as
    follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 每个优秀的工程师都有很多目标，但以下是一些主要目标：
- en: Make my life easier
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我的生活更轻松
- en: Remove the work that isn’t important
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除那些不重要的工作
- en: Conduct value-driven work for an organization
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为组织开展以价值为驱动的工作
- en: When it comes to putting out fires, waking up at 2:00 A.M. and rushing around
    to try to get a server up and running for a developer isn’t the most fun part
    of an engineer’s day. Instead, they want to focus on providing value to an organization.
    Abstraction helps a ton with removing what isn’t needed, as does removing toil.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决问题时，凌晨 2:00 醒来并急匆匆地去为开发者让服务器运行起来并不是工程师一天中最有趣的部分。相反，他们更想专注于为组织提供价值。抽象化帮助大量消除不必要的工作，正如去除琐事一样。
- en: The same goes for developers. They don’t want to worry about waiting days or
    weeks (or longer) to get a server up and running to host an application. They
    want a quick, efficient, and scalable way to host applications without having
    to sit around and wait.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者也是如此。他们不想担心等待数天或数周（甚至更久）才能让服务器运行并托管应用程序。他们希望有一种快速、高效且可扩展的方式来托管应用程序，而无需坐等。
- en: The goal is for an engineer to understand the need for Kubernetes. It’s easy
    to look at the latest and greatest technology so that it can be implemented. That’s
    typically the fun part for many engineers, both on the Ops and Dev sides. However,
    the most important piece is understanding that Kubernetes removes the low-hanging
    fruit for setting up environments and instead allows you to focus on value-driven
    work.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让工程师理解 Kubernetes 的必要性，目标是理解最新和最伟大的技术，以便能够实施它们。这对许多工程师来说通常是有趣的部分，无论是在运维还是开发方面。然而，最重要的部分是理解
    Kubernetes 可以消除设置环境的低效果果，而是允许您专注于价值驱动的工作。
- en: Understanding the business need for Kubernetes
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 Kubernetes 的业务需求
- en: 'There are always two sides to a tech plan in any organization – the technical/engineering
    side and the business side. On the business side, the primary important pieces
    are as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何组织的技术计划中，技术/工程方面和业务方面总有两面性。在业务方面，主要的重要部分如下：
- en: Will Kubernetes help us go faster?
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 是否帮助我们更快地前进？
- en: Will Kubernetes make us more efficient?
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 是否使我们更有效率？
- en: Will Kubernetes help us get to market faster?
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 是否帮助我们更快地进入市场？
- en: Will Kubernetes help us reduce downtime and engineering overhead?
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 是否帮助我们减少停机时间和工程开销？
- en: The answers to those questions are yes and no, and as an engineer, you have
    to be prepared to answer them. The golden rule is that Kubernetes removes the
    incredible complexity of racking and stacking a data center, much like the cloud.
    When talking about Kubernetes to the business, it isn’t a conversation around
    *implementing this Kubernetes thing and all our problems go away*. The conversation
    is more around *this Kubernetes thing will make our* *lives easier*.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题的答案是肯定的和否定的，作为一名工程师，您必须准备好回答这些问题。黄金法则是，Kubernetes 消除了机房架构和堆栈的复杂性，就像云一样。在与业务讨论
    Kubernetes 时，这不是关于“实施这个 Kubernetes 东西，然后所有问题都解决了”的对话。对话更多是围绕“这个 Kubernetes 东西将使我们的生活更轻松”。
- en: Planning is the hard part
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规划是困难的部分
- en: As engineers, both on the Dev and Ops sides, playing with new technology is
    fun. Learning new tricks, new platforms, and beefing up your resume to stay competitive
    in the market is what a lot of individuals think about. Although that’s great,
    you also must think about the *why* behind implementing Kubernetes.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 作为工程师，无论是在开发还是运维方面，玩耍新技术都是有趣的。学习新技巧、新平台，并加强您的简历以在市场上保持竞争力，这是许多人考虑的事情。虽然这很棒，但您也必须考虑实施
    Kubernetes 背后的原因。
- en: 'Before moving on to the next chapter, think about these three things:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入下一章之前，请考虑以下三点：
- en: Why do I feel like Kubernetes is important?
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我为什么觉得 Kubernetes 很重要？
- en: How can Kubernetes help my environment progress?
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 如何帮助我的环境进步？
- en: How can Kubernetes make deploying software easier?
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 如何使软件部署更容易？
- en: Now, let’s summarize what we’ve learned in this chapter.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们总结一下本章学到的内容。
- en: Summary
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Before you can even think about implementing Kubernetes, you need to learn about
    what the cloud is doing for engineers, what cloud-native applications are doing
    for engineers, and why organizations need to start thinking about Kubernetes.
    This is always the first step in any engineering-related decision since it impacts
    not only you but the organization as a whole. Because of the way that the tech
    world is changing, understanding the need for implementing cloud-based solutions
    and how to move fast but start slow is how organizations have successful Kubernetes
    deployments and a smooth on-ramp from traditional monolithic applications to implementing
    microservices.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在您甚至考虑实施 Kubernetes 之前，您需要了解云对工程师的作用，云原生应用对工程师的作用，以及为什么组织需要开始思考 Kubernetes。这始终是任何工程相关决策的第一步，因为它不仅影响您，还影响整个组织。由于技术世界的变化方式，理解实施基于云的解决方案的必要性以及如何快速移动但慢慢开始，是组织成功实施
    Kubernetes 部署和顺畅过渡传统单片应用程序到实施微服务的关键。
- en: Now that you know the *why* behind implementing cloud-native technologies such
    as Kubernetes and what cloud-native applications do for organizations, it’s time
    to start learning about how to get started with Kubernetes. We will start the
    next chapter by understanding how to implement a Kubernetes service in the top
    three clouds.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道了实施云原生技术（例如 Kubernetes）背后的原因以及云原生应用程序对组织的影响，现在是时候开始学习如何开始使用 Kubernetes。我们将通过了解如何在前三个云中实现
    Kubernetes 服务来开始下一章。
- en: Further reading
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解本章涵盖的更多主题，请查看以下资源：
- en: '*Architecting Cloud Computing Solutions*, by Kevin L. Jackson and Scott Goessling:
    [https://www.packtpub.com/cloud-networking/cloud-computing](https://www.packtpub.com/cloud-networking/cloud-computing)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*架构云计算解决方案*，由Kevin L. Jackson和Scott Goessling著作：[https://www.packtpub.com/cloud-networking/cloud-computing](https://www.packtpub.com/cloud-networking/cloud-computing)'
- en: '*vSphere Virtual Machine Management*, by Rebecca Fitzhugh: [https://www.packtpub.com/product/vsphere-virtual-machine-management/9781782172185](https://www.packtpub.com/product/vsphere-virtual-machine-management/9781782172185)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*vSphere虚拟机管理*，由Rebecca Fitzhugh著作：[https://www.packtpub.com/product/vsphere-virtual-machine-management/9781782172185](https://www.packtpub.com/product/vsphere-virtual-machine-management/9781782172185)'
- en: '*Cloud Native Architectures*, by Tom Laszewski, Kamal Arora, Erik Farr, and
    Piyum Zonooz: [https://www.packtpub.com/product/cloud-native-architectures/9781787280540](https://www.packtpub.com/product/cloud-native-architectures/9781787280540)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*云原生架构*，由Tom Laszewski、Kamal Arora、Erik Farr和Piyum Zonooz著作：[https://www.packtpub.com/product/cloud-native-architectures/9781787280540](https://www.packtpub.com/product/cloud-native-architectures/9781787280540)'
