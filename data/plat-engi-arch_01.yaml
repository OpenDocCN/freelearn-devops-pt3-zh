- en: <st c="0">1</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">1</st>
- en: <st c="2">Platform Engineering and the Art of Crafting Platforms</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">平台工程学与平台打造的艺术</st>
- en: <st c="56">In this first chapter, we will learn how to identify when our organization
    is in the right state to plan a platform.</st> <st c="174">For this, we will clarify
    why platforms have become such a relevant topic, how a product mindset fits into
    this, and what the checkpoints are to find out whether we are ready for a platform
    or not.</st> <st c="372">We will learn about the platform differences and which
    platform types are most</st> <st c="451">commonly built.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="56">在本章中，我们将学习如何判断我们的组织是否处于适合规划平台的状态。</st> <st c="174">为此，我们将澄清为什么平台成为如此重要的话题，产品思维如何融入其中，以及判断我们是否准备好构建平台的检查点是什么。</st>
    <st c="372">我们将了解平台之间的差异以及最常构建的哪些平台类型。</st> <st c="451">常见的平台类型。</st>
- en: '<st c="466">Next, we will delve into the three core elements of a platform:
    the pervasive cloud, the developer experience, and the main attributes of a platform.</st>
    <st c="617">Overall, we will see recurring elements of cloud-native engineering.</st>
    <st c="686">This leads us to the question of whether we really need yet another
    abstraction layer.</st> <st c="773">We will also consider whether a platform will
    help us to overcome the problem of a high cognitive load caused by overengineered
    complex systems and development processes or just end up being yet another layer.</st>
    <st c="983">We will reflect on some of those layers to find an answer</st> <st
    c="1041">for ourselves.</st>'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="466">接下来，我们将深入探讨平台的三个核心元素：普及的云、开发者体验和平台的主要特性。</st> <st c="617">总体而言，我们将看到云原生工程中的一些常见元素。</st>
    <st c="686">这引出了一个问题：我们是否真的需要另一个抽象层。</st> <st c="773">我们还将考虑，平台是否能帮助我们克服由于过度工程化复杂系统和开发流程所带来的高认知负担，还是最终只是成为又一层抽象层。</st>
    <st c="983">我们将反思一些这些层，以找到答案</st> <st c="1041">为我们自己。</st>
- en: <st c="1055">Finally, we will go into aspects that go beyond the technology
    and the implementation of platforms.</st> <st c="1156">It is crucial to understand
    the sociotechnical aspects and put the human, our actual stakeholders, at the
    center.</st> <st c="1270">This allows us to define a better platform product and
    find approaches for a</st> <st c="1347">close collaboration.</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1055">最后，我们将讨论超越技术和平台实现的方面。</st> <st c="1156">理解社会技术层面的内容并将人类，我们的实际利益相关者，置于中心是至关重要的。</st>
    <st c="1270">这使我们能够定义更好的平台产品，并为紧密合作找到方法。</st> <st c="1347">紧密合作。</st>
- en: <st c="1367">In this chapter, we’re going to cover the following</st> <st c="1420">main
    topics:</st>
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1367">在本章中，我们将讨论以下</st> <st c="1420">主要话题：</st>
- en: <st c="1432">The demand for platforms as</st> <st c="1461">a product</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1432">作为产品的需求</st> <st c="1461">平台作为产品</st>
- en: <st c="1470">Implementing developer- and</st> <st c="1499">product-focused solutions</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1470">实现以开发者和</st> <st c="1499">产品为中心的解决方案</st>
- en: <st c="1524">Do we need yet another</st> <st c="1548">abstraction layer?</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1524">我们是否需要另一个</st> <st c="1548">抽象层？</st>
- en: <st c="1566">Sociotechnical aspects</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1566">社会技术层面</st>
- en: <st c="1589">The demand for platforms as a product</st>
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1589">作为产品的需求</st>
- en: '<st c="1627">In the</st> <st c="1635">cloud-native environment, hardly any
    other topic has built up such a myth in recent years as the term</st> *<st c="1737">platform</st>*
    <st c="1745">and the associated role of the platform engineer.</st> <st c="1796">As
    with the introduction of the first usable CI/CD pipelines, this gold rush led
    to rapid adaptation, often without sense or reason.</st> <st c="1929">Now that
    we have arrived in the valley of knowledge, we can deal extensively with the question:
    do you need a platform, and if so, how do you design and implement it to ensure
    that it lasts into</st> <st c="2124">the future?</st>'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1627">在</st> <st c="1635">云原生环境中，近年来几乎没有其他话题像“平台”这一术语一样，给人留下如此深刻的印象，*<st
    c="1737">平台</st>* <st c="1745">以及平台工程师的角色也随之而来。</st> <st c="1796">就像第一个可用的CI/CD流水线的引入一样，这场淘金热导致了快速适应，往往没有明确的目的或理性。</st>
    <st c="1929">现在我们已经进入知识的谷底，可以深入思考一个问题：你需要一个平台吗？如果需要，如何设计和实施它，确保它能够持续发展到</st> <st
    c="2124">未来？</st>
- en: <st c="2135">To answer this</st> <st c="2151">question, we should first look
    at what constitutes such a platform.</st> <st c="2219">A platform is the combination
    of different capabilities that are required to master traditional and cloud-native
    environments so that it supports the end user in the development, delivery, and
    operation of an application.</st> <st c="2441">Platforms can be an enabler to
    turn non-cloud native infrastructures into valuable resources.</st> <st c="2535">However,
    most computing platforms today provide some sort of API that can be used to automate
    the deployment and instrumentation of the available resources and build the foundation
    of a platform.</st> <st c="2731">Platforms provide consistency across any kind
    of resources for the end users and grant access to its capabilities via a self-service
    API, templates, CLI, or other solutions.</st> <st c="2905">The following example
    also highlights that a platform is composed of</st> <st c="2974">many components:</st>
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2135">为了回答这个问题</st> <st c="2151">我们应该首先看看构成这样一个平台的要素。</st> <st c="2219">平台是不同能力的组合，这些能力是掌握传统和云原生环境所必需的，以便它能够在应用程序的开发、交付和运营中支持最终用户。</st>
    <st c="2441">平台可以作为推动力，将非云原生基础设施转化为有价值的资源。</st> <st c="2535">然而，今天大多数计算平台提供某种形式的
    API，可用于自动化部署和工具化可用资源，并构建平台的基础。</st> <st c="2731">平台为最终用户提供任何类型资源的一致性，并通过自服务 API、模板、CLI
    或其他解决方案授予其功能访问权限。</st> <st c="2905">以下示例还突出了平台由许多组件组成：</st> <st c="2974">许多组件：</st>
- en: '![Figure 1.1: Example of a platform/IDP](img/B31164_01_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1：平台/IDP 示例](img/B31164_01_01.jpg)'
- en: '<st c="3096">Figure 1.1: Example of a platform/IDP</st>'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3096">图 1.1：平台/IDP 示例</st>
- en: <st c="3133">We see usually the</st> <st c="3152">topic of platform appears
    in the context of cloud-native, but why is that so?</st> <st c="3231">Cloud-native
    technologies enable organizations to build and run scalable applications in public,
    private, and hybrid clouds.</st> <st c="3356">This approach is best illustrated
    by functionalities such as containers, standardized service provisioning, immutable
    infrastructure, and declarative APIs.</st> <st c="3512">Such functionalities realize
    loosely coupled systems that are resilient, manageable, and observable.</st> <st
    c="3613">These enable developers to make frequent changes with minimal effort.</st>
    <st c="3683">In short, a platform is an enabler for cloud-native computing and
    uses its tooling to</st> <st c="3769">instrumentalize it</st><st c="3787">.</st>
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3133">我们通常会看到</st> <st c="3152">平台的主题出现在云原生的背景下，但为什么会这样呢？</st> <st c="3231">云原生技术使组织能够在公共云、私有云和混合云中构建和运行可扩展的应用程序。</st>
    <st c="3356">这种方法通过容器、标准化服务提供、不可变基础设施和声明式 API 等功能得到了最好的体现。</st> <st c="3512">这些功能实现了松耦合的系统，这些系统具有弹性、可管理和可观察性。</st>
    <st c="3613">这些功能使开发者能够以最小的努力进行频繁的更改。</st> <st c="3683">简而言之，平台是云原生计算的推动力，并利用其工具将其</st>
    <st c="3769">工具化</st><st c="3787">。</st>
- en: <st c="3788">Companies and developers benefit from platforms in an equal manner</st>
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="3788">公司和开发者从平台中获益是平等的</st>
- en: <st c="3855">The experience</st> <st c="3871">of a software engineer on a cloud-native
    platform differs from developing software natively toward a cloud provider.</st>
    <st c="3988">Building systems focusing</st> <st c="4013">on one</st> **<st c="4021">Cloud
    Service Provider</st>** <st c="4043">(</st>**<st c="4045">CSP</st>**<st c="4048">)
    will bind you to the logic of that closed ecosystem.</st> <st c="4104">You will
    surely have a similar effect when you build on cloud-native platforms due to the
    fact that those are often Kubernetes-centric, utilizing the heavy unification
    of integrations toward the Kubernetes API.</st> <st c="4315">However, the catch
    is that cloud-native platforms deliver the same experience without you recognizing
    the underlying infrastructure.</st> <st c="4448">As most companies have at least
    two to three cloud or cloud-like service providers and already have difficulties
    in adapting those, a cloud-native platform is a game changer</st> *<st c="4622">[1]</st>*<st
    c="4625">. Developing software on a cloud-native platform changes the mindset
    and architecture.</st> <st c="4712">However, without adopting that mindset, the
    chance of failure</st> <st c="4774">is high.</st>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3855">软件工程师在云原生平台上的体验不同于在云服务提供商上本地开发软件。</st> <st c="3871">专注于构建面向某一</st>
    <st c="3988">云服务提供商</st> <st c="4013">(</st>**<st c="4021">云服务提供商</st>**<st c="4043">)（</st>**<st
    c="4045">CSP</st>**<st c="4048">）会将你绑定到该封闭生态系统的逻辑中。</st> <st c="4104">当你在云原生平台上构建时，必然会有类似的效果，因为这些平台通常是以Kubernetes为中心，利用Kubernetes
    API的高度集成统一性。</st> <st c="4315">然而，问题在于，云原生平台提供相同的体验，而你并不意识到底层基础设施的存在。</st> <st
    c="4448">由于大多数公司至少有两个到三个云或类似云的服务提供商，而且已经在适应这些服务时遇到困难，云原生平台无疑是一个颠覆性的游戏改变者</st>
    *<st c="4622">[1]</st>*<st c="4625">。 在云原生平台上开发软件改变了思维方式和架构。</st> <st c="4712">然而，如果不采纳这种思维方式，失败的概率</st>
    <st c="4774">会很高。</st>
- en: <st c="4782">However, there</st> <st c="4798">are more aspects to consider for
    a platform than just unified infrastructure management.</st> <st c="4887">Platforms
    have to be made for a purpose.</st> <st c="4928">The common definition of whom
    platforms are built for, and who the stakeholders for platform engineers are,
    states that those are exclusively developers.</st> <st c="5082">These definitions
    fall short of mentioning that a whole organization, operational teams, and other
    specialist teams also benefit from a platform.</st> <st c="5228">A platform provides
    software engineers with a simple access point to build, test, deploy, release,
    and operate their software.</st> <st c="5355">It provides deep insights into the
    usage and allows the caretaker and administrators to maintain the infrastructure,
    platform, and integrations fearlessly.</st> <st c="5511">To translate this into
    business terminology, a platform can provide a faster time to market, with more
    flexibility to change and adjust its components, while keeping reliability and</st>
    <st c="5693">robustness high.</st>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，<st c="4782">有更多方面需要考虑，平台不仅仅是统一的基础设施管理。</st> <st c="4798">平台必须是为了某个特定的目的而创建的。</st>
    <st c="4887">平台必须有明确的用途。</st> <st c="4928">关于平台面向谁构建，以及平台工程师的利益相关者是谁，通常的定义认为这些仅限于开发人员。</st>
    <st c="5082">这些定义忽略了一个事实，那就是整个组织、运维团队和其他专业团队同样从平台中受益。</st> <st c="5228">平台为软件工程师提供了一个简便的入口，来构建、测试、部署、发布和运营他们的软件。</st>
    <st c="5355">它深入提供使用情况的洞察，并允许看护者和管理员无所畏惧地维护基础设施、平台和集成。</st> <st c="5511">用商业术语来翻译，平台可以提供更快的市场进入时间，并且具备更大的灵活性来改变和调整其组件，同时保持高可靠性和</st>
    <st c="5693">强大的稳健性。</st>
- en: <st c="5709">What does this mean for a company now?</st> <st c="5749">Due to
    the shortage of IT professionals on the market, the fast pace of changes in IT,
    and the overload of training teams for cloud technologies and providers, a platform
    introduces the right breakpoints for competencies.</st> <st c="5971">We need these
    breakpoints to declutter the trend of putting multiple disciplines into a single
    role such as DevOps.</st> <st c="6087">Also, platform engineers utilizing DevOps
    methodologies are not DevOps.</st> <st c="6159">We actively need to protect this
    role from repeating the mistakes made with the DevOps role and stay sharp in its
    definition.</st> <st c="6285">Platform engineers integrate experts’ provided capabilities,
    simplify their usage of those capabilities through their platform for developers,
    and enable self-service for the engineers.</st> <st c="6471">However, no developer
    will need to become an expert in multiple topics such as security, observability,
    infrastructure configuration and automation, and so on.</st> <st c="6631">This
    is in contrast to a common picture of DevOps, who need to become experts with
    anything that is required within their silo for their application to keep them
    alive.</st> <st c="6800">We will need DevOps in the future for the advanced handling
    of applications, but we must make their lives</st> <st c="6906">easier, too.</st>
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5709">这对现在的公司意味着什么？</st> <st c="5749">由于市场上IT专业人员的短缺、IT变化的快速节奏，以及培训团队在云技术和云服务提供商方面的超负荷工作，平台为能力引入了合适的断点。</st>
    <st c="5971">我们需要这些断点，以避免将多个学科合并到一个角色中的趋势，例如DevOps。</st> <st c="6087">此外，利用DevOps方法论的平台工程师并不是DevOps。</st>
    <st c="6159">我们需要积极保护这个角色，避免重蹈DevOps角色的覆辙，并在定义上保持敏锐。</st> <st c="6285">平台工程师整合专家提供的能力，通过他们的平台简化这些能力的使用，帮助开发人员使用，并为工程师提供自助服务。</st>
    <st c="6471">然而，开发人员不需要成为多个领域的专家，例如安全性、可观测性、基础设施配置和自动化等。</st> <st c="6631">这与常见的DevOps角色有所不同，DevOps需要成为自己领域内所有必要方面的专家，以确保其应用的正常运行。</st>
    <st c="6800">未来我们仍然需要DevOps来处理更高级的应用管理，但我们也必须让他们的工作</st> <st c="6906">更轻松。</st>
- en: <st c="6918">The platform provides an integration layer for the bottom-up capabilities
    that require special knowledge such as security, databases, or even the deployment
    of VMs or bare-metal servers, as well as top-down usage by developers and DevOps.</st>
    <st c="7158">As visualized in the following figure, the platform engineering team
    is responsible for providing</st> <st c="7256">this layer.</st>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6918">该平台为需要专业知识的自下而上的能力提供集成层，例如安全性、数据库，甚至是虚拟机或裸金属服务器的部署，同时也提供开发人员和DevOps的自上而下使用。</st>
    <st c="7158">如下面的图所示，平台工程团队负责提供</st> <st c="7256">这一层。</st>
- en: '![Figure 1.2: Capabilities and responsibilities in a platform-driven organization](img/B31164_01_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2：平台驱动型组织中的能力与责任](img/B31164_01_02.jpg)'
- en: '<st c="7461">Figure 1.2: Capabilities and responsibilities in a platform-driven
    organization</st>'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7461">图 1.2：平台驱动型组织中的能力与责任</st>
- en: <st c="7540">Of course, this also</st> <st c="7561">means that another team
    of experts must be trained and educated.</st> <st c="7627">However, a comparably
    small team of platform engineers can usually build and run huge environments.</st>
    <st c="7727">A platform ideally reduces the cognitive load for any other team
    within the company and lets them focus on their core value again by simplifying
    the machinery around the development process.</st> <st c="7918">This platform
    helps to reduce the stress and improve transparency.</st> <st c="7985">Companies
    from all over the world frequently share their experience with platforms and platform
    teams, and the typical tenor is on how they solved problems they couldn’t tackle
    before, or how much this has improved the quality of their products</st> <st c="8230">and
    services.</st>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7540">当然，这也</st> <st c="7561">意味着必须培养和教育另一个专家团队。</st> <st c="7627">然而，相比之下，平台工程师的小团队通常能够构建并运行庞大的环境。</st>
    <st c="7727">理想情况下，平台减少了公司内其他团队的认知负担，让他们能够专注于核心价值，通过简化开发过程中的机制来帮助他们。</st> <st
    c="7918">这个平台有助于减轻压力并提高透明度。</st> <st c="7985">来自世界各地的公司常常分享他们在平台和平台团队方面的经验，通常的调子是讲述他们如何解决之前无法应对的问题，或者这种方法如何提高了他们产品</st>
    <st c="8230">和服务的质量。</st>
- en: <st c="8243">These platforms are often</st> <st c="8269">called</st> **<st c="8277">Internal
    Developer Platforms</st>** <st c="8305">(</st>**<st c="8307">IDPs</st>**<st c="8311">)
    because they are usually built for an enterprise’s internal development team.</st>
    <st c="8392">Throughout this book, we will use the terms platform, IDP, platform
    product, and cloud-native platform interchangeably.</st> <st c="8512">However,
    we’ll first highlight certain aspects just a little</st> <st c="8573">bit more:</st>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8243">这些平台通常被</st> <st c="8269">称为</st> **<st c="8277">内部开发者平台</st>**
    <st c="8305">(</st>**<st c="8307">IDP</st>**<st c="8311">)，因为它们通常是为企业的内部开发团队而构建的。</st>
    <st c="8392">在本书中，我们将交替使用平台、IDP、平台产品和云原生平台这些术语。</st> <st c="8512">然而，我们首先会稍微强调一些方面：</st>
- en: '**<st c="8582">Platform</st>**<st c="8591">: General term for the cross-cutting
    layer of technology that allows unification of services</st> <st c="8685">for
    developers.</st>'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="8582">平台</st>**<st c="8591">：统一服务的跨技术层的通用术语，允许开发者使用。</st> <st c="8685">这些平台通常被称为</st> '
- en: '**<st c="8700">IDP</st>**<st c="8704">: Emphasizing the aspect of developer,</st>
    **<st c="8744">Software Development Life Cycle</st>** <st c="8775">(</st>**<st
    c="8777">SDLC</st>**<st c="8781">), and</st> <st c="8789">tools needed to</st>
    <st c="8805">develop software</st>'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="8700">IDP</st>**<st c="8704">：强调开发者、</st> **<st c="8744">软件开发生命周期</st>**
    <st c="8775">(</st>**<st c="8777">SDLC</st>**<st c="8781">)，以及</st> <st c="8789">开发软件所需的工具</st>'
- en: '**<st c="8821">Platform product or platform as a product</st>**<st c="8863">:
    Highlighting the dedicated team taking care of the evolution ability and long-term
    commitment of a platform, as well as establishing a</st> <st c="9001">different
    mindset</st>'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="8821">平台产品或平台即产品</st>**<st c="8863">：强调专门的团队负责平台演进能力及其长期承诺，同时建立一种</st>
    <st c="9001">不同的思维方式</st>'
- en: '**<st c="9018">Cloud-native platform</st>**<st c="9040">: Focusing</st> <st
    c="9052">on the abstraction and enablement to use standardized APIs</st> <st c="9111">and
    integrations</st>'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9018">云原生平台</st>**<st c="9040">：专注于抽象和使能使用标准化 API</st> <st c="9052">以及集成</st>
    <st c="9111">的能力</st>'
- en: <st c="9127">That perspective</st> <st c="9144">might feel fine-grained, but
    the term platform itself often leads to more confusion.</st> <st c="9230">A cloud
    platform is also a platform, right?</st> <st c="9274">A</st> **<st c="9276">Software
    as a Service</st>** <st c="9297">(</st>**<st c="9299">SaaS</st>**<st c="9303">)
    could also be seen as a platform.</st> <st c="9340">Referencing a</st> <st c="9353">cloud-native
    platform or IDP gives the right direction and understanding.</st> <st c="9428">Depending
    on your organization’s maturity, it is therefore also essential to clarify these
    terms and establish a common understanding, language, and</st> <st c="9577">shared
    knowledge.</st>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9127">这种视角</st> <st c="9144">可能感觉很细致，但平台这一术语本身往往会导致更多的混淆。</st> <st c="9230">云平台也是一种平台，对吧？</st>
    <st c="9274">一个</st> **<st c="9276">软件即服务</st>** <st c="9297">(</st>**<st c="9299">SaaS</st>**<st
    c="9303">) 也可以视为平台。</st> <st c="9340">提到云原生平台或 IDP 可以引导我们走向正确的方向并获得更准确的理解。</st>
    <st c="9428">根据您组织的成熟度，明确这些术语并建立共同的理解、语言和</st> <st c="9577">共享知识也是至关重要的。</st>
- en: <st c="9594">Platform case studies and success stories</st>
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="9594">平台案例研究和成功故事</st>
- en: <st c="9636">To</st> <st c="9640">highlight the positive impact a platform can
    have, we can look at three totally different companies and their results from
    using IDPs.</st> <st c="9775">All of these cases primarily focus on Backstage
    as the developer portal and entry point for</st> <st c="9867">the IDP.</st>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9636">为了</st> <st c="9640">突出平台的积极影响，我们可以通过三个完全不同的公司及其使用 IDP 后的结果来进行展示。</st>
    <st c="9775">所有这些案例主要集中在 Backstage 作为开发者门户和进入点的角色，</st> <st c="9867">以及 IDP。</st>
- en: <st c="9875">Spotify, as the inventor of Backstage and the mother of the IDP
    movement, claims that the following is true of their internal</st> <st c="10002">Backstage
    users:</st>
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9875">作为 Backstage 的发明者和 IDP 运动的发源地，Spotify 声称以下说法适用于其内部的</st> <st c="10002">Backstage
    用户：</st>
- en: <st c="10018">2.3x more active</st> <st c="10036">on GitHub</st>
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10018">GitHub 上活跃度高出 2.3 倍</st> <st c="10036">更多</st>
- en: <st c="10045">2x more</st> <st c="10054">code changes</st>
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10045">代码更改多出 2 倍</st> <st c="10054">部署更改次数</st>
- en: <st c="10066">2x</st> <st c="10070">more deployments</st>
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10066">部署次数增加了 2 倍</st>
- en: <st c="10086">Onboarding time for new developers dropped from 60 days to</st>
    <st c="10146">20 days</st>
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10086">新开发者的入职时间从 60 天缩短至</st> <st c="10146">20 天</st>
- en: <st c="10153">The Expedia Group reports</st> <st c="10180">different numbers:</st>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10153">Expedia集团报告</st> <st c="10180">了不同的数据：</st>
- en: <st c="10198">It takes four minutes, on average, to create a new component</st>
    <st c="10260">or app</st>
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10198">平均而言，创建一个新组件</st> <st c="10260">或应用程序需要四分钟</st>
- en: <st c="10266">Over 4,000 users are using the IDP for at least 20 minutes</st>
    <st c="10326">per day</st>
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10266">超过4,000名用户每天至少使用IDP 20分钟</st> <st c="10326">以上</st>
- en: <st c="10333">The technical documentation is viewed over 50,000 times</st> <st
    c="10390">per month</st>
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10333">技术文档每月被查看超过50,000次</st> <st c="10390">每月</st>
- en: <st c="10399">Just over 15% of the internal developer tools are integrated with
    Backstage, already</st> <st c="10485">reducing context-switching</st>
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10399">超过15%的内部开发工具已与Backstage集成</st> <st c="10485">从而减少了上下文切换</st>
- en: <st c="10511">Now, the last</st> <st c="10526">company we should take a look
    at</st> <st c="10559">is Toyota:</st>
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10511">现在，最后一个</st> <st c="10526">我们应该关注的公司是丰田：</st>
- en: <st c="10569">Projects ship now weekly artifacts instead</st> <st c="10613">of
    monthly</st>
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10569">项目现在每周交付一次工件</st> <st c="10613">而不是每月</st>
- en: <st c="10623">8-12 weeks are saved on overhead efforts per team, resulting in
    over $5 million in reduced costs or time and budget used for</st> <st c="10749">value
    creation</st>
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10623">每个团队节省了8-12周的额外工作，从而减少了超过500万美元的成本或用于</st> <st c="10749">价值创造的时间和预算</st>
- en: <st c="10763">Standardize deployment templates reduce failure and speed</st>
    <st c="10822">up deployment</st>
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10763">标准化部署模板减少了失败并加速了部署</st> <st c="10822">部署速度</st>
- en: <st c="10835">All those numbers are interesting to understand in the context
    of a digital-native company, a travel technology corporation, and one of the biggest
    car manufacturers.</st> <st c="11003">Any of them can show a clear positive</st>
    <st c="11041">effect</st> *<st c="11048">[2]</st>*<st c="11051">.</st>
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10835">这些数据对于了解数字原生公司、旅游科技公司以及世界上最大的汽车制造商之一的背景非常有趣。</st> <st c="11003">这些数据中的任何一项都能清晰地展现出正面</st>
    <st c="11041">效果</st> *<st c="11048">[2]</st>*<st c="11051">。</st>
- en: <st c="11052">Projects versus products</st>
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="11052">项目与产品</st>
- en: '<st c="11077">Speaking</st> <st c="11087">of organization, introducing new
    solutions is commonly done as a project.</st> <st c="11161">So, at some point
    in time, someone decided to invest money in building their own platform.</st>
    <st c="11252">This approach faces one fundamental problem: the deadline.</st>
    <st c="11311">Projects are required to reach a target within a given time and
    budget frame.</st> <st c="11389">If the project runs out of time or money, it
    focuses on the operation and maintenance of it.</st> <st c="11482">These two parts
    of a life cycle are treated as separate things, causing a time period of rising
    sun and sunset.</st> <st c="11594">To explain this a bit, you can see heavy investments,
    communications, and excitement during the implementation phase.</st> <st c="11712">However,
    after hitting the deadline, the project turns into a dead object that requires
    maintenance.</st> <st c="11813">DevOps didn’t change this behavior; it simply
    often got new names, new roles, and different processes.</st> <st c="11916">However,
    in the end, budget, people, and attention are turned away to the next project,
    while just a fraction of the former budget stays.</st> <st c="12054">This is frustrating
    for engineers who have worked hard on the implementation, and it will become frustrating
    for the organization over time when costs for pure maintenance keep increasing.</st>
    <st c="12243">Still, the people who have built it might leave or join other projects.</st>
    <st c="12315">This short-term view on implementing systems has slowly killed many
    good projects and team spirits.</st> <st c="12415">More importantly, it shows
    that the business value of the solution isn’t clear.</st> <st c="12495">When an
    implementation, such as a platform, can provide explicit value, there shouldn’t
    be a reason to turn away attention and cause</st> <st c="12628">its sundown.</st>'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11077">谈到</st> <st c="11087">组织，引入新解决方案通常作为一个项目来进行。</st> <st c="11161">因此，在某个时间点，有人决定投资建立自己的平台。</st>
    <st c="11252">这种方法面临一个根本性的问题：截止日期。</st> <st c="11311">项目需要在规定的时间和预算框架内达成目标。</st>
    <st c="11389">如果项目耗尽时间或资金，它将专注于其运维。</st> <st c="11482">生命周期的这两个部分被当作不同的事情来处理，造成了朝阳与夕阳的时间段。</st>
    <st c="11594">简单来说，在实施阶段，你会看到大量的投资、沟通和兴奋。</st> <st c="11712">然而，在达到截止日期后，项目变成了一个需要维护的死物。</st>
    <st c="11813">DevOps并没有改变这种行为；它只是常常有了新的名称、新的角色和不同的流程。</st> <st c="11916">然而，最终，预算、人力和注意力被转移到下一个项目，而仅有一小部分原有的预算得以保留。</st>
    <st c="12054">这对于那些在实施过程中辛勤工作的工程师来说是令人沮丧的，随着纯粹运维成本的不断增加，这对于组织来说也将变得令人沮丧。</st>
    <st c="12243">然而，构建该平台的人可能会离开或加入其他项目。</st> <st c="12315">这种短期视角的系统实施方式，慢慢地扼杀了许多优秀的项目和团队精神。</st>
    <st c="12415">更重要的是，它显示了解决方案的商业价值并不明确。</st> <st c="12495">当一个实施方案（如平台）能够提供明确的价值时，就不应该有理由转移注意力并导致</st>
    <st c="12628">它的夕阳。</st>
- en: <st c="12640">While doing</st> <st c="12653">many implementations as projects
    is a valid approach, this is its death sentence with platform implementations.</st>
    <st c="12765">Regular implementations are feature complete; they can exist after
    they are done.</st> <st c="12847">But a platform will be always moving, always
    being upgraded and always be implementing new features.</st> <st c="12948">When
    working with open-source and cloud providers, you will learn early how fast tools
    and software are in their own development cycle.</st> <st c="13084">Features,
    fixes, and security patches are continuously published.</st> <st c="13150">This
    is a significant challenge for larger organizations as they are still used to
    far slower release cycles.</st> <st c="13260">The upside of keeping up the speed
    of this rapid development is that you, as an organization, can profit from new
    features and capabilities frequently.</st> <st c="13412">It is an innovation driver
    and enabler, allowing you to implement systems in other ways and solve problems
    you might not be aware of.</st> <st c="13546">Is a problem that isn’t painful
    for you a real problem?</st> <st c="13602">Organizations tend not to consider
    such things as issues since they are used to only identifying painful processes</st>
    <st c="13717">and approaches.</st>
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12640">尽管将许多实现作为项目来进行是一种有效的方式，但对于平台实现而言，这却是它的死刑。</st> <st c="12653">常规实现是功能完整的；完成后它们可以存在。</st>
    <st c="12765">但是，平台总是在不断发展、不断升级，并且总是实现新的功能。</st> <st c="12847">在与开源和云服务提供商合作时，你将会早早了解到它们在自身开发周期中的工具和软件的更新速度。</st>
    <st c="12948">功能、修复和安全补丁会持续发布。</st> <st c="13084">这对大公司来说是一个重大挑战，因为它们仍然习惯于远远慢于此的发布周期。</st>
    <st c="13150">保持与这种快速发展的速度同步的好处在于，作为一个组织，你可以频繁地从新的功能和能力中获利。</st> <st c="13260">它是创新的驱动力和使能器，使你能够以其他方式实现系统，并解决你可能没有意识到的问题。</st>
    <st c="13412">对于你来说，不痛苦的问题，真的算是个问题吗？</st> <st c="13546">组织通常不会将这类问题视为问题，因为它们习惯于只识别痛苦的过程</st>
    <st c="13602">和方法。</st>
- en: <st c="13732">Let us look at an example.</st> <st c="13760">In the current year
    (2024), the European Union released a law to improve companies’ reporting on their
    carbon emissions.</st> <st c="13881">On a high level, this also includes IT resources.</st>
    <st c="13931">Also, within the last few years, multiple open source foundations
    and projects have been started to bring transparency to the energy consumption
    of software.</st> <st c="14089">A year ago, we would only have been able to report
    very rough, highly estimated numbers when it comes to energy consumption for a
    data center, for a server, and with some manual processing, for a piece of software.</st>
    <st c="14304">Today, we can obtain fine-grained information for any application
    running on bare metal, hypervisor, or containerized within Kubernetes as tooling
    has evolved to provide this data.</st> <st c="14485">Public CSPs provide more
    and more insights into their own energy consumption.</st> <st c="14563">What can
    we expect for the coming year?</st> <st c="14603">We can expect even better numbers,
    including the regional carbon mix of the energy and end-to-end visibility and
    transparency of such numbers.</st> <st c="14746">With platforms and platform engineering
    teams, such transparency will naturally come over time.</st> <st c="14842">It
    doesn’t require a project turning IT upside down.</st> <st c="14895">Calling out
    the demand for it will result in platform engineering teams implementing those
    capabilities into the platform’s core to benefit everyone who uses that platform
    to build, deploy, release, and</st> <st c="15098">operate software.</st>
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13732">让我们看一个例子。</st> <st c="13760">在当前年份（2024年），欧盟发布了一项法律，旨在改善企业的碳排放报告。</st>
    <st c="13881">从高层次来看，这也包括IT资源。</st> <st c="13931">此外，在过去的几年里，多个开源基金会和项目已开始致力于为软件的能源消耗提供透明度。</st>
    <st c="14089">一年前，我们只能报告非常粗略、估算的数字，关于数据中心、服务器的能源消耗，以及经过一些人工处理后，某个软件的能源消耗。</st>
    <st c="14304">今天，我们可以为在裸金属、虚拟机管理程序或Kubernetes容器中运行的任何应用获取细粒度的信息，因为工具已经发展到可以提供这些数据。</st>
    <st c="14485">公共CSPs提供越来越多的关于其自身能源消耗的见解。</st> <st c="14563">我们可以期待来年会发生什么？</st>
    <st c="14603">我们可以期待更好的数字，包括能源的区域性碳混合，以及这些数字的端到端可见性和透明度。</st> <st c="14746">对于平台和平台工程团队来说，这种透明度将随着时间的推移自然到来。</st>
    <st c="14842">它不需要一个项目来彻底颠覆IT。</st> <st c="14895">提出这一需求将促使平台工程团队将这些功能实现到平台的核心中，惠及所有使用该平台进行构建、部署、发布和</st>
    <st c="15098">运营软件的人。</st>
- en: <st c="15115">This is called a product mindset and it feels natural for platforms
    to adapt to the demands of</st> <st c="15211">their</st> <st c="15217">environment.</st>
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15115">这被称为产品思维方式，对于平台来说，适应其环境的需求是自然而然的。</st> <st c="15211">他们</st> <st
    c="15217">的</st> <st c="15217">环境。</st>
- en: <st c="15229">Platform as a product</st>
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="15229">平台作为一个产品</st>
- en: <st c="15251">Platforms as a product</st> <st c="15275">are user-centric, listening
    to and actively researching the end user demand to keep improving their services.</st>
    <st c="15385">A product is also aware of its value.</st> <st c="15423">Similar
    to any app on your mobile phone, it uses its own value to refinance further development
    and new features.</st> <st c="15537">Here, there are no deadlines and no sunsets.</st>
    <st c="15582">The goal is just to strive to become better with every release.</st>
    <st c="15646">What this gives to an organization is an expert team that keeps
    actively working on central enablement for providing your business with a platform
    of</st> <st c="15796">value generation.</st>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15251">作为产品的</st> <st c="15275">平台是以用户为中心，倾听并积极研究最终用户的需求，不断改进其服务。</st>
    <st c="15385">一个产品也意识到它的价值。</st> <st c="15423">类似于你手机上的任何应用，它利用自身的价值来为进一步的开发和新功能提供资金。</st>
    <st c="15537">在这里，没有截止日期，也没有结束。</st> <st c="15582">目标仅仅是通过每次发布变得更好。</st> <st c="15646">这给组织带来的是一个专家团队，持续致力于为业务提供有价值的平台的核心能力。</st>
    <st c="15796">价值创造。</st>
- en: <st c="15813">Designing and developing a platform as a product goes beyond the
    pure engineering aspect.</st> <st c="15904">It faces organizational challenges
    that should be considered when you actively decide to build a platform.</st> <st
    c="16011">In fact, you have to deliver valid numbers on your benefits and show
    that your platform carries its own costs.</st> <st c="16122">This must be in the
    mindset of the product owner and platform engineers.</st> <st c="16195">The idea
    here is not to become business people but to be able to clearly communicate the
    reason for existence and, more importantly, to be a product that doesn’t have</st>
    <st c="16362">a deadline.</st>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15813">将平台设计和开发作为一个产品，超越了单纯的工程学层面。</st> <st c="15904">它面临着组织方面的挑战，这些挑战应当在你决定积极构建平台时考虑进去。</st>
    <st c="16011">事实上，你需要提供有效的数据来证明你的平台带来了好处，并且展示出平台能够覆盖其自身的成本。</st> <st c="16122">这必须在产品负责人和平台工程师的思维方式中。</st>
    <st c="16195">这里的想法不是要成为商业人士，而是要能够清楚地传达存在的理由，更重要的是，成为一个没有</st> <st c="16362">截止日期</st>的产品。</st>
- en: <st c="16373">Right now, you can find three different types of platforms</st>
    <st c="16433">as products:</st>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16373">现在，你可以找到三种不同类型的作为产品的平台：</st>
- en: '**<st c="16445">IDPs</st>**<st c="16450">:</st>'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="16445">IDP平台</st>**<st c="16450">：</st>'
- en: <st c="16452">Provide</st> <st c="16459">a best-in-class experience for</st>
    <st c="16491">software engineers</st>
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="16452">为</st> <st c="16459">软件工程师提供最佳体验</st>
- en: <st c="16509">Enable the development and operations teams for the end-to-end
    support and visibility of</st> <st c="16599">their software</st>
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="16509">为开发和运营团队提供端到端支持和可视化，</st> <st c="16599">支持他们的软件</st>
- en: <st c="16613">Bring governance, compliance,</st> <st c="16644">and security</st>
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="16613">引入治理、合规性</st> <st c="16644">和安全性</st>
- en: <st c="16656">Establish a self-service for the development teams and simplify
    the</st> <st c="16725">deployment process</st>
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="16656">为开发团队建立自助服务，并简化</st> <st c="16725">部署过程</st>
- en: '**<st c="16743">Data science and machine</st>** **<st c="16769">learning platforms</st>**<st
    c="16787">:</st>'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="16743">数据科学和机器学习平台</st>** **<st c="16769">：</st>**'
- en: <st c="16789">Similar</st> <st c="16797">to IDPs and often evolve out</st> <st
    c="16826">of those</st>
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="16789">与IDP平台类似，并且通常是从这些平台演变而来的</st> <st c="16797">。</st> <st c="16826">这些平台</st>
- en: <st c="16834">Leverage their scalability to research, analyze, and process</st>
    <st c="16896">data cost-efficiently</st>
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="16834">利用其可扩展性进行数据的研究、分析和处理，</st> <st c="16896">高效地降低数据成本</st>
- en: <st c="16917">Overcome complex implementation and make them</st> <st c="16964">generally
    available</st>
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="16917">克服了复杂的实施过程，并使它们</st> <st c="16964">普遍可用</st>
- en: <st c="16983">Provide direct, secure access to relevant</st> <st c="17026">data
    sources</st>
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="16983">提供直接、安全的访问相关的</st> <st c="17026">数据源</st>
- en: '**<st c="17038">Low-code/business platforms</st>**<st c="17066">:</st>'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="17038">低代码/商业平台</st>**<st c="17066">：</st>'
- en: <st c="17068">Strongly</st> <st c="17077">driven trend to provide platforms
    that bring solutions with which it is possible to implement new features with
    relatively less to almost no</st> <st c="17218">coding demand</st>
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强烈的趋势驱动着提供平台，这些平台能带来解决方案，使得可以在相对较少甚至几乎没有**编码需求**的情况下实现新特性。
- en: <st c="17231">We will see them more in the years</st> <st c="17267">to come</st>
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将在未来几年中更多地看到它们。
- en: <st c="17274">In our book, we will focus on the product-centric view of</st>
    <st c="17333">arch</st><st c="17337">itecting IDPs.</st>
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的书中，我们将专注于**产品中心化**的IDP架构视角。
- en: <st c="17352">Do you need a platform?</st>
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你需要一个平台吗？
- en: <st c="17376">Like</st> <st c="17382">with any other complex environment, we
    first have to ask – do we really need a platform?</st> <st c="17471">Do we know
    what we will use</st> <st c="17499">it for?</st>
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 和任何其他复杂环境一样，我们首先要问：我们真的需要一个平台吗？我们知道我们将如何使用它吗？
- en: <st c="17506">Although platforms can provide a lot of benefits, they are not
    always the answer to your organizational questions.</st> <st c="17622">The signs
    that you are not ready for a platform yet are</st> <st c="17678">as follows:</st>
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管平台可以提供很多好处，但它们并不总是你组织问题的答案。以下是你还未准备好使用平台的迹象：
- en: <st c="17689">You have only</st> <st c="17704">monolithic applications</st>
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你只有**单体应用程序**。
- en: <st c="17727">You don’t have your own</st> <st c="17752">development team</st>
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你没有自己的**开发团队**。
- en: <st c="17768">Your DevOps, SysAdmin, or infrastructure team is heavily overworked</st>
    <st c="17837">or siloed</st>
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的DevOps、SysAdmin或基础设施团队工作过度，或者被**孤立**。
- en: <st c="17846">You have very simple applications that can</st> <st c="17890">run
    anywhere</st>
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有非常简单的应用程序，这些应用可以**运行在任何地方**。
- en: <st c="17902">You are having a hard time providing a budget for training to
    grow the skills of</st> <st c="17984">your teams</st>
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你很难为培训提供预算，以帮助**你的团队**提升技能。
- en: <st c="17994">You usually run commercial,</st> <st c="18023">off-the-shelf solutions</st>
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你通常运行商业化的、**现成的解决方案**。
- en: <st c="18046">On the other hand, when does an IDP make sense to you?</st> <st
    c="18102">The following criteria are indicators that you’re ready for</st> <st
    c="18162">an IDP:</st>
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，什么时候使用IDP对你来说有意义呢？以下标准是你准备好使用**IDP**的指示：
- en: <st c="18169">You have requirements for multiple infrastructure environments
    or foster a</st> <st c="18245">multi-cloud strategy</st>
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有多个基础设施环境的需求，或者推动一个**多云战略**。
- en: <st c="18265">You require advanced control over your environments (security,
    compliance, and deep insights into infrastructure and</st> <st c="18383">application
    behavior)</st>
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要对你的环境进行高级控制（安全性、合规性，以及对基础设施和**应用行为**的深度洞察）。
- en: <st c="18404">Your development team is continuously overloaded with</st> <st
    c="18459">non-valuable tasks</st>
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的开发团队不断被**无价值的任务**所压垮。
- en: <st c="18477">You</st> <st c="18482">have a curious and interested DevOps or
    infrastructure team that has taken its first steps toward a platform without</st>
    <st c="18599">knowing it</st>
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有一个好奇且感兴趣的DevOps或基础设施团队，他们已经迈出了向平台过渡的第一步，尽管他们并没有意识到这一点。
- en: <st c="18609">Your application requires some kind of orchestration due to microservice
    architecture because many components or different integrations need to play</st>
    <st c="18759">well together</st>
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的应用程序由于微服务架构需要某种类型的编排，因为许多组件或不同的集成需要良好地**协同工作**。
- en: <st c="18772">You want to enable your organization to optimize your IT for costs,
    transparency, quality,</st> <st c="18864">or security</st>
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你希望让组织能够优化IT，以降低成本、提高透明度、质量，或**安全性**。
- en: <st c="18875">Before you define a platform product for your organization, you
    should answer all the points on the checklist.</st> <st c="18987">It makes sense
    to have multiple points illustrating why you need it.</st> <st c="19056">For example,
    having a team ask for an IDP, or having someone mention that they’ve heard of
    it in a conference, is not a strong foundation for making such a decision.</st>
    <st c="19222">The introduction of platforms is a journey, and from our experience,
    it can become the central focal point for one’s company in a relatively short
    amount of time.</st> <st c="19385">Under such pressure, you still need to have
    a purpose</st> <st c="19439">and direction.</st>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18875">在为你的组织定义一个平台产品之前，你应该回答清楚检查清单上的所有问题。</st> <st c="18987">有多个点来说明你为什么需要它是有道理的。</st>
    <st c="19056">例如，仅仅因为某个团队请求一个 IDP，或有人在会议上提到他们听说过它，并不足以作为做出此类决定的坚实基础。</st> <st
    c="19222">平台的引入是一个过程，根据我们的经验，它可以在相对较短的时间内成为公司核心的焦点。</st> <st c="19385">在这样的压力下，你仍然需要有明确的目的</st>
    <st c="19439">和方向。</st>
- en: <st c="19453">Now that we have learned how to define the purpose of our platform,
    we will need to discuss the question of whether we really need this additional</st>
    <st c="19600">abstraction layer.</st>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19453">现在我们已经学会了如何定义平台的目的，接下来我们需要讨论一个问题：我们真的需要这个额外的</st> <st c="19600">抽象层吗？</st>
- en: <st c="19619">Do we need yet another abstraction layer?</st>
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="19619">我们真的需要另一个抽象层吗？</st>
- en: <st c="19661">Let’s briefly s</st><st c="19677">ummarize what we have seen so
    far.</st> <st c="19713">A platform puts a bracket around, and a layer of abstraction
    on top of, your existing infrastructure and environments.</st> <st c="19832">The
    platform enhances it with further capabilities so that your development teams
    can utilize it in an automated,</st> <st c="19946">self-serving way.</st>
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19661">让我们简要总结一下到目前为止的内容。</st> <st c="19677">一个平台为你现有的基础设施和环境加上了一个括号，并在其上加了一层抽象。</st>
    <st c="19713">该平台通过进一步的功能增强它，使得你的开发团队能够以自动化的</st> <st c="19832">自助方式利用它。</st>
- en: <st c="19963">From a technical perspective, this represents the next layer of
    abstraction.</st> <st c="20041">Therefore, it is only right to discuss this new
    fabric we put on top.</st> <st c="20111">Going from the bottom to the top, we
    see the bare metal, followed by the hypervisor for virtualization; this is topped
    by cloud providers.</st> <st c="20250">Some might include containers, Kubernetes,
    or serverless components – and now, we will add our platform.</st> <st c="20355">These
    are at least four layers, each promising to make the layer underneath simpler
    and glued together by</st> <st c="20460">a hard-to-be-defined meta-level of scripts,</st>
    **<st c="20505">Infrastructure as Code</st>** <st c="20527">(</st>**<st c="20529">IaC</st>**<st
    c="20532">), cloud libraries, and automation.</st> <st c="20569">So, do we really
    need this yet another layer, or are we using it to keep ourselves</st> <st c="20652">busy</st>
    <st c="20657">building things?</st>
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19963">从技术角度来看，这代表着下一个抽象层次。</st> <st c="20041">因此，讨论我们放置在其上的这层新结构是有道理的。</st>
    <st c="20111">从底部到顶部，我们可以看到裸机，接着是虚拟化的超监视器；其上是云服务提供商。</st> <st c="20250">有些人可能会包括容器、Kubernetes
    或无服务器组件——而现在，我们将添加我们的平台。</st> <st c="20355">这些至少是四个层次，每一层都承诺让其下方的层次更简单，并通过</st>
    <st c="20460">一个难以定义的元级脚本、</st> **<st c="20505">基础设施即代码</st>** <st c="20527">(</st>**<st
    c="20529">IaC</st>**<st c="20532">)、云库和自动化将它们粘合在一起。</st> <st c="20569">那么，我们真的需要这一层额外的抽象层吗，还是我们只是在用它来让自己</st>
    <st c="20652">忙碌</st> <st c="20657">地建造东西？</st>
- en: <st c="20673">Declutter the abstraction layers</st>
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="20673">简化抽象层</st>
- en: <st c="20706">There is no</st> <st c="20719">simple answer to that question,
    but by looking into the purpose of each layer, you might be able to grow your
    own understanding</st> <st c="20847">of it.</st>
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20706">没有</st> <st c="20719">简单的答案，但通过探讨每一层的目的，你或许能够更好地理解它</st> <st c="20847">。</st>
- en: <st c="20853">Hypervisors were initially introduced to simplify the supply of
    hosts so that software could run and better utilize servers.</st> <st c="20979">Today,
    they still serve the same purpose but could be replaced by Kubernetes and container
    runtimes.</st> <st c="21080">A key argument against this replacement is that a
    virtual machine provides better isolation and higher security.</st> <st c="21193">Without
    getting too deep into this discussion, there are options to provide very solid
    isolation, such as with Kata containers.</st> <st c="21321">The only component
    that causes headaches is the container with the OS and its runtime.</st> <st c="21408">Looking
    some years into the future,</st> **<st c="21444">WebAssembly</st>** <st c="21455">(</st>**<st
    c="21457">Wasm</st>**<st c="21461">) could</st> <st c="21469">be one part of the
    answer to that problem.</st> <st c="21513">Without an operating system in the
    container and pure naked binary files, there are almost no gates open for attacks.</st>
    <st c="21631">However, let’s give it some</st> <st c="21659">more time.</st>
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20853">最初引入虚拟化技术的目的是简化主机供应，以便软件能够运行并更好地利用服务器。</st> <st c="20979">今天，它们仍然具有同样的作用，但可以被Kubernetes和容器运行时所取代。</st>
    <st c="21080">反对这种替代方案的一个关键论点是，虚拟机提供更好的隔离和更高的安全性。</st> <st c="21193">在不深入讨论的情况下，也有提供非常坚固隔离的选择，比如Kata容器。</st>
    <st c="21321">唯一令人头疼的组件是带有操作系统和其运行时的容器。</st> <st c="21408">展望未来几年，**<st c="21444">WebAssembly</st>**
    <st c="21455">(</st>**<st c="21457">Wasm</st>**<st c="21461">)可能会成为解决这一问题的一部分。</st>
    <st c="21469">在容器中没有操作系统，只有纯裸二进制文件，几乎没有攻击门路。</st> <st c="21631">然而，让我们再给它一些</st>
    <st c="21659">时间。</st>
- en: '**<st c="21669">Infrastructure as a Service</st>** <st c="21697">(</st>**<st
    c="21699">IaaS</st>**<st c="21703">) providers</st> <st c="21715">and public cloud
    providers enhance this with software-defined storage and networks, reducing the
    complexity of building your own data center and managing all physical dependencies.</st>
    <st c="21897">In addition, they provide further capabilities of commonly used
    scenarios, such as databases, load balancing, user management, message queues,
    or ML playgrounds and pre-trained AI models.</st> <st c="22085">This is a very
    useful implementation, which leads to a rapid development of the industry and
    an extension of what is possible.</st> <st c="22212">However, this also moved
    the whole industry in a problematic direction.</st> <st c="22284">The technology
    is developing faster than people and organizations, in particular, are able to
    adapt to it.</st> <st c="22391">We see that there is a shortage of professional
    engineers across the globe, while businesses are looking into providing more digital
    services every year.</st> <st c="22545">Solutions and their dependencies are therefore
    built natively to the cloud.</st> <st c="22621">The return on this effort can
    be significant.</st> <st c="22667">You are able to manage any kind of infrastructure
    and services with a relatively small group of people globally.</st> <st c="22780">Yet
    the reality also states that the average company has between two and three IaaS
    and public CPSs, plus (often) its own computing capacities, as well as around
    10 SaaS providers, which can go up to around 50 for major enterprises</st> *<st
    c="23012">[1]</st>*<st c="23015">. CSPs also have between 40 to 200 different
    services.</st> <st c="23070">In other words, we are able to achieve a lot today,
    but the complexity of those environments has also</st> <st c="23172">become significant.</st>'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="21669">基础设施即服务</st>** <st c="21697">(</st>**<st c="21699">IaaS</st>**<st
    c="21703">)提供商</st> <st c="21715">和公共云提供商通过软件定义的存储和网络增强了这一能力，减少了构建自己数据中心及管理所有物理依赖的复杂性。</st>
    <st c="21897">此外，它们还提供了常用场景的进一步功能，如数据库、负载均衡、用户管理、消息队列或者ML平台和预训练的AI模型。</st> <st
    c="22085">这是一个非常有用的实施方案，推动了行业的快速发展，扩展了可能性。</st> <st c="22212">然而，这也导致整个行业朝着一个问题导向发展。</st>
    <st c="22284">技术的发展速度超过了人们和组织，尤其是它们能够适应的速度。</st> <st c="22391">我们看到全球专业工程师的短缺，而企业每年都在考虑提供更多的数字服务。</st>
    <st c="22545">因此，解决方案及其依赖关系都是本地化到云端。</st> <st c="22621">这种努力的回报可能是显著的。</st> <st
    c="22667">你可以用一个相对较小的全球团队管理任何类型的基础设施和服务。</st> <st c="22780">然而，现实也表明，平均每家公司拥有两到三个IaaS和公共CPS，加上（通常还有）自己的计算能力，以及大约10个SaaS提供商，大企业可能达到50个</st>
    *<st c="23012">[1]</st>*<st c="23015">。CSPs还提供40到200种不同的服务。</st> <st c="23070">换句话说，今天我们能够取得很大成就，但这些环境的复杂性也</st>
    <st c="23172">变得相当重要。</st>'
- en: <st c="23191">To tame this</st> <st c="23204">scale, IaC and</st> **<st c="23220">Cloud
    Development Kits</st>** <st c="23242">(</st>**<st c="23244">CDKs</st>**<st c="23248">)
    have</st> <st c="23255">become the tools of choice to manage your landing zones
    and software integrations.</st> <st c="23339">The fun part of the story is that
    practices such as DevOps, which are commonly misinterpreted, have made things
    even worse.</st> <st c="23463">These misinterpretations have now led to the sudden
    expectation for developers to also set up and maintain the infrastructure for
    their</st> <st c="23599">software needs.</st>
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23191">为了驯服这个</st> <st c="23204">规模，IaC和</st> **<st c="23220">云开发工具包</st>**
    <st c="23242">(</st>**<st c="23244">CDKs</st>**<st c="23248">)已经成为管理你的着陆区和软件集成的首选工具。</st>
    <st c="23339">故事中有趣的部分是，像DevOps这样的实践经常被误解，已经使情况变得更糟。</st> <st c="23463">这些误解现在已经导致开发人员也期望设置和维护他们</st>
    <st c="23599">软件需求的基础设施。</st>
- en: <st c="23614">Last but not least, we have systems based on containers, Kubernetes,
    or serverless.</st> <st c="23699">Dozens of options exist for each of them to
    provision those environments, deploy the code, and run the components.</st> <st
    c="23814">It’s understandable that there are too many layers you have to take
    care of.</st> <st c="23891">However, their development is reasonable, as you don’t
    want to do things in the old way of getting software up and running.</st> <st
    c="24015">Pushing code to images and from there to a runtime you choose simplifies
    the</st> <st c="24092">provisioning process.</st>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23614">最后但并非最不重要的是，我们有基于容器、Kubernetes或无服务器的系统。</st> <st c="23699">每种环境都有几十种选项可供部署代码和运行组件。</st>
    <st c="23814">理解这些需要关注的层次太多了。</st> <st c="23891">然而，它们的发展是合理的，因为你不希望像以前那样运行软件。</st>
    <st c="24015">将代码推送到镜像，然后选择运行时简化了</st> <st c="24092">配置过程。</st>
- en: <st c="24113">Overall, to represent the level of complexity, we can think of
    a three-dimensional object such as a cube made of cubes.</st> <st c="24234">The
    following illustration shows the different service layers, representing different
    maturity of abstraction and how layer after layer comes together to form an</st>
    <st c="24396">IT environment.</st>
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24113">总体而言，要表示复杂性水平，我们可以想象一个三维对象，比如一个由立方体构成的立方体。</st> <st c="24234">下面的插图展示了不同的服务层，代表了抽象的不同成熟度，以及每一层如何组合形成一个</st>
    <st c="24396">IT环境。</st>
- en: '![Figure 1.3: The multi-dimensional complexity of computing abstraction and
    simplification](img/B31164_01_03.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![Figure 1.3: The multi-dimensional complexity of computing abstraction and
    simplification](img/B31164_01_03.jpg)'
- en: '<st c="24523">Figure 1.3: The multi-dimensional complexity of computing abstraction
    and simplification</st>'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24523">图 1.3：计算抽象和简化的多维复杂性</st>
- en: '<st c="24611">Now, that figure is</st> <st c="24632">oversimplified, considering
    the hundreds and thousands of options you have in each dimension.</st> <st c="24726">However,
    it still gives a first good hint: if you need a platform, build a wrapper around
    this construction and tame its immense comple</st><st c="24861">xity to harness</st>
    <st c="24878">its power.</st>'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24611">现在，这个图表</st> <st c="24632">过于简化，考虑到每个维度中你拥有的数百或数千个选项。</st> <st
    c="24726">然而，它仍然给出了一个很好的提示：如果你需要一个平台，建立一个包装器围绕这个结构，并驯服它的巨大复杂性以利用</st><st c="24861">它的力量。</st>
- en: <st c="24888">The cognitive load for software engineers and other IT professionals</st>
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="24888">对软件工程师和其他IT专业人员的认知负荷</st>
- en: <st c="24957">In order to manage all these layers, we need to know about and
    use many tools, as well as follow various processes.</st> <st c="25074">It becomes
    difficult to focus on the actual job and create value while spending a large amount
    of time on things that should simplify our work.</st> <st c="25218">This is called</st>
    <st c="25233">the</st> **<st c="25237">cognitive load</st>**<st c="25251">. Originally
    made famous by Daniel Bryant, that term puts a bracket around the job overload
    and mental stress of many developers, as</st> <st c="25384">well as other specialists
    within IT.</st> <st c="25421">Reducing the cognitive load brings more happiness
    and satisfaction, but also effectiveness and reliability, to the engineers.</st>
    <st c="25547">Looking at the following graphic simplifies the perspective on what
    needs to be handled as a professional across the different decades.</st> <st c="25683">However,
    going forward, we have to reduce this load.</st> <st c="25736">AI could be part
    of this, alongside new concepts for running computing processes, and platforms</st>
    <st c="25832">of course.</st>
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24957">为了管理所有这些层次，我们需要了解并使用许多工具，并遵循各种流程。</st> <st c="25074">在花费大量时间处理那些本应简化我们工作的事情时，专注于实际工作并创造价值变得困难。</st>
    <st c="25218">这就是所谓的</st> <st c="25233">**认知负荷**</st> <st c="25251">。最早由丹尼尔·布赖恩特（Daniel
    Bryant）提出，这个术语概括了许多开发者以及其他IT专家的工作过载和心理压力，</st> <st c="25384">以及其他IT领域的专业人士。</st>
    <st c="25421">减少认知负荷能带来更多的幸福感和满足感，同时也能提升工程师的效率和可靠性。</st> <st c="25547">看一下下面的图示，可以简化我们在不同时代作为专业人士需要处理的事务的视角。</st>
    <st c="25683">然而，往前看，我们必须减少这种负荷。</st> <st c="25736">人工智能可能是其中的一部分，此外，还有运行计算过程的新概念，以及</st>
    <st c="25832">平台，当然也在其中。</st>
- en: '![Figure 1.4: The extended cognitive load with a projection to an ideal future](img/B31164_01_04.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4：扩展的认知负荷及其对理想未来的预测](img/B31164_01_04.jpg)'
- en: '<st c="27264">Figure 1.4: The extended cognitive load with a projection to
    an ideal future</st>'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27264">图 1.4：扩展的认知负荷及其对理想未来的预测</st>
- en: <st c="27340">Not only</st> <st c="27350">does technology change over time but
    it also piles up.</st> <st c="27405">This means that we have to run and maintain
    legacy systems while changing architecture styles and introducing new programming
    paradigms and new tools.</st> <st c="27556">This also changes the responsibilities
    and extends them far beyond the typical borders of one’s job description from
    some years back.</st> <st c="27690">Breaking down this problem can reveal an answer
    to the question of whether we need a platform to solve our problems or whether
    implementing one will increase the</st> <st c="27852">complexity again.</st>
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27340">不仅仅是</st> <st c="27350">技术随时间变化，它还会不断积累。</st> <st c="27405">这意味着我们不仅要运行和维护遗留系统，还要改变架构风格，引入新的编程范式和新工具。</st>
    <st c="27556">这也改变了职责范围，并且大大超出了几年前职位描述中的典型边界。</st> <st c="27690">拆解这个问题可以揭示出是否需要一个平台来解决我们的难题，或者实施一个平台是否会再次增加</st>
    <st c="27852">复杂性。</st>
- en: <st c="27869">In the end, every organization is different.</st> <st c="27915">Some
    are stuck in the early 2000s, and others continuously try to adapt to what comes
    next.</st> <st c="28007">Even within the same organization, you can often find
    drastic differences.</st> <st c="28082">One department might run everything on
    some VMs in their own data center, while the next might deploy functions within
    a global CDN or edge provider.</st> <st c="28232">Therefore, it’s on you to draw
    up a vision, strategy, and goal for your platform, if you really</st> <st c="28328">need
    it.</st>
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27869">最终，每个组织都是不同的。</st> <st c="27915">有些组织停留在2000年代初，而有些组织则不断尝试适应未来的变化。</st>
    <st c="28007">即便在同一个组织内部，你也常常会发现巨大的差异。</st> <st c="28082">一个部门可能仍然在自己的数据中心上运行所有虚拟机，而下一个部门可能将功能部署在全球CDN或边缘提供商上。</st>
    <st c="28232">因此，如果你确实需要平台，制定一个愿景、战略和目标就落在了你身上。</st>
- en: <st c="28336">The complexity we experience and the act of putting pressure on
    engineers needs to be encountered because IT tends to become more complicated
    over time.</st> <st c="28490">In the upcoming section, we will focus on implementing
    the right solution for developers to overcome that troublesome direction we are
    heading toward, and which can even lead</st> <st c="28665">to burnout.</st>
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28336">我们所经历的复杂性以及对工程师施加压力的行为需要被面对，因为信息技术随着时间的推移往往变得更加复杂。</st> <st c="28490">在接下来的章节中，我们将重点讨论为开发者实施正确的解决方案，以克服我们正在走向的那个麻烦方向，而这个方向甚至可能导致</st>
    <st c="28665">职业倦怠。</st>
- en: <st c="28676">Implementing developer- and product-focused solutions</st>
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="28676">实施面向开发者和产品的解决方案</st>
- en: <st c="28730">Throughout</st> <st c="28741">the next few years, we will see
    an evolution of cloud computing.</st> <st c="28807">In this context, platforms
    will play a crucial role.</st> <st c="28860">On the one hand, the cloud will be
    everywhere, becoming an abstraction for infrastructure.</st> <st c="28951">It
    doesn’t matter whether this is in the form of edge computing or very specialized
    services or offers.</st> <st c="29055">On the other hand, as we have learned in
    the previous section, we have to focus on delivering environments that enable
    the best experience possible for developers and other roles, so those people can
    focus on generating value.</st> <st c="29282">Bringing these elements together
    practically is the key enablement for an IT organization to keep up the speed
    with the market while delivering cont</st><st c="29430">inuous value to</st> <st
    c="29447">your company.</st>
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28730">在接下来的几年里，我们将见证云计算的发展。</st> <st c="28807">在此背景下，平台将发挥至关重要的作用。</st>
    <st c="28860">一方面，云将无处不在，成为基础设施的抽象。</st> <st c="28951">无论它是边缘计算的形式，还是非常专业化的服务或产品，这都不重要。</st>
    <st c="29055">另一方面，正如我们在上一节中所了解到的，我们必须专注于提供能够为开发者和其他角色带来最佳体验的环境，这样他们就可以专注于创造价值。</st>
    <st c="29282">将这些元素实践性地结合起来是IT组织跟上市场步伐并为公司持续创造价值的关键能力。</st>
- en: <st c="29460">The pervasive cloud</st>
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="29460">普遍存在的云</st>
- en: <st c="29480">The</st> **<st c="29485">pervasive cloud</st>** <st c="29500">is
    not</st> <st c="29508">a single solution.</st> <st c="29527">It clusters a variety
    of cloud-computing capabilities that are undergoing a</st> <st c="29603">transformative
    shift to drive business and innovation significantly.</st> <st c="29672">The key
    advancements focus on the integration of cloud technologies anywhere, from private
    data centers over distributed computational networks to the edge.</st> <st c="29829">However,
    the pervasive cloud goes beyond that.</st> <st c="29876">It follows concepts to
    bridge physical gaps through sensors, IoT components, mobile devices, and other
    smart connected solutions.</st> <st c="30006">Therefore, it is known under other
    terms such as</st> **<st c="30055">ubiquitous computing</st>**<st c="30075">,</st>
    **<st c="30077">ambient intelligence</st>**<st c="30097">,</st> <st c="30099">or</st>
    **<st c="30102">everywhere</st>**<st c="30112">.</st>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="29480">普遍存在的云</st> **<st c="29485">并非</st>** <st c="29500">单一的解决方案。</st>
    <st c="29527">它聚集了多种正在经历</st> <st c="29603">转型性变革的云计算能力，以显著推动业务和创新。</st> <st c="29672">关键的进展专注于将云技术整合到任何地方，从私有数据中心、分布式计算网络到边缘计算。</st>
    <st c="29829">然而，普遍存在的云不仅限于此。</st> <st c="29876">它遵循通过传感器、物联网组件、移动设备和其他智能连接解决方案来弥合物理间隙的概念。</st>
    <st c="30006">因此，它也被称为</st> **<st c="30055">无处不在的计算</st>**<st c="30075">、</st>
    **<st c="30077">环境智能</st>**<st c="30097">、</st> <st c="30099">或</st> **<st c="30102">无所不在</st>**<st
    c="30112">。</st>
- en: <st c="30113">Gartner, the research company, assumes that six further technologies
    will shape the pervasive cloud and define its</st> <st c="30229">nature</st> *<st
    c="30236">[3]</st>*<st c="30239">:</st>
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="30113">Gartner，这家研究公司，认为以下六项技术将塑造普遍存在的云并定义其</st> <st c="30229">特性</st>
    *<st c="30236">[3]</st>*<st c="30239">：</st>
- en: '**<st c="30241">Augmented FinOps</st>**<st c="30257">: Combines</st> <st c="30269">DevOps
    methods with cost optimization</st> <st c="30307">and budgeting</st>'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="30241">增强型FinOps</st>**<st c="30257">：将</st> <st c="30269">DevOps方法与成本优化</st>
    <st c="30307">和预算管理相结合</st>'
- en: '**<st c="30320">Cloud Development Environments</st>** <st c="30351">(</st>**<st
    c="30353">CDEs</st>**<st c="30357">): Simplify and unify the development</st>
    <st c="30396">environment, reducing human errors and</st> <st c="30435">ensuring
    reproducibility</st>'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="30320">云开发环境</st>** <st c="30351">(</st>**<st c="30353">CDEs</st>**<st
    c="30357">)：简化和统一开发</st> <st c="30396">环境，减少人为错误并</st> <st c="30435">确保可重现性</st>'
- en: '**<st c="30459">Cloud sustainability</st>**<st c="30480">: Achieving</st> <st
    c="30493">environmental, social, and economic benefits, reducing the harmful impact
    of the strongly growing cloud computing tech, and leveraging its power</st> <st
    c="30638">for good</st>'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="30459">云可持续性</st>**<st c="30480">：实现</st> <st c="30493">环境、社会和经济效益，减少云计算技术快速增长带来的有害影响，并利用其力量</st>
    <st c="30638">造福社会</st>'
- en: '**<st c="30646">Cloud-native</st>**<st c="30659">: Implementing</st> <st c="30674">cloud
    characteristics as</st> <st c="30700">defined before</st>'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="30646">云原生</st>**<st c="30659">：实现之前定义的</st> <st c="30674">云特性</st>'
- en: '**<st c="30714">Cloud-out to the edge</st>**<st c="30736">: CSP</st> <st c="30743">capabilities
    extended to</st> <st c="30768">the edge</st>'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="30714">云端扩展至边缘</st>**<st c="30736">：CSP</st> <st c="30743">能力扩展至</st>
    <st c="30768">边缘</st>'
- en: '**<st c="30776">Wasm</st>**<st c="30781">: The</st> <st c="30788">potential
    ubiquitous runtime and binary format for everywhere, but not</st> <st c="30859">necessarily
    everything</st>'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="30776">Wasm</st>**<st c="30781">：一种潜在的无处不在的运行时和二进制格式，适用于各个地方，但不</st>
    <st c="30859">一定适用于所有事物</st>'
- en: <st c="30881">However, we</st> <st c="30894">need to ask why this is now relevant
    to us as platform engineers, architects,</st> <st c="30972">and developers.</st>
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="30881">然而，我们</st> <st c="30894">需要问自己，为什么这些现在对我们作为平台工程师、架构师</st> <st
    c="30972">和开发者有意义。</st>
- en: <st c="30987">First, you can find many of the technologies that we are already
    working on in these definitions and assumptions.</st> <st c="31102">Cloud-native,
    FinOps, edge, and CDEs are daily realities, while sustainable IT and Wasm have
    experienced heavy development in recent years.</st> <st c="31242">That’s all relevant
    in making it clear that we are not discussing sci-fi technologies that won’t be
    attainable within the next 100 years.</st> <st c="31380">It’s happening right
    now and it is ready to be used.</st> <st c="31433">We develop and innovate all
    of those foundations; it just might not be as visible and prominent</st> <st c="31529">as
    GenAI.</st>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="30987">首先，你可以在这些定义和假设中找到我们已经在使用的许多技术。</st> <st c="31102">云原生、FinOps、边缘计算和CDE已成为日常现实，而可持续IT和Wasm在近年来经历了大量开发。</st>
    <st c="31242">这一切都与明确表明我们讨论的不是未来100年内无法实现的科幻技术相关。</st> <st c="31380">它正在发生，且已准备好投入使用。</st>
    <st c="31433">我们开发并创新了所有这些基础；它们可能不像GenAI那样显而易见和突出。</st>
- en: <st c="31538">Second, to extract the maximum value from cloud investments, businesses
    must adopt automated operational scaling, leverage cloud-native platform tools,
    and implement effective governance.</st> <st c="31727">These platforms integrate
    essential services such as SaaS,</st> **<st c="31786">Platform as a Service</st>**
    <st c="31807">(</st>**<st c="31809">PaaS</st>**<st c="31813">), and</st> <st c="31820">IaaS
    to create comprehensive product offerings with modular capabilities.</st> <st
    c="31895">IT leaders are encouraged to utilize the modular nature of these platforms
    to maintain adaptability and agility in the face of rapid market disruptions.</st>
    <st c="32048">Imagine the complexity of such environments without a platform that
    tames this wide range of motion.</st> <st c="32149">Even so, with all that complexity,
    we need to keep the product mindset in focus, or else it will be hard to provide
    reliable IT services and solutions in</st> <st c="32303">the future.</st>
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="31538">其次，为了从云投资中提取最大价值，企业必须采用自动化的运营扩展，利用云原生平台工具，并实施有效的治理。</st> <st c="31727">这些平台集成了SaaS等关键服务，</st>
    **<st c="31786">平台即服务</st>** <st c="31807">(</st>**<st c="31809">PaaS</st>**<st
    c="31813">)，以及</st> <st c="31820">IaaS，以创造具有模块化功能的综合产品。</st> <st c="31895">鼓励IT领导者利用这些平台的模块化特性，以保持在快速变化的市场环境中的适应性和灵活性。</st>
    <st c="32048">想象一下，在没有一个能够驾驭这些广泛变化的的平台的情况下，环境会有多复杂。</st> <st c="32149">尽管如此，面对所有这些复杂性，我们仍然需要保持产品思维，否则在未来提供可靠的IT服务和解决方案将变得困难。</st>
- en: '![Figure 1.5: Cloud concepts are found everywhere in a pervasive cloud](img/B31164_01_05.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5：云概念在普遍的云中无处不在](img/B31164_01_05.jpg)'
- en: '<st c="32743">Figure 1.5: Cloud concepts are found everywhere in a pervasive
    cloud</st>'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32743">图 1.5：云概念在普遍的云中无处不在</st>
- en: <st c="32811">Looking</st> <st c="32819">at the preceding diagram, you can find
    elements of the pervasive cloud everywhere.</st> <st c="32903">We shouldn’t look
    at this figure as if those are separate items.</st> <st c="32968">Everything is
    connected.</st> <st c="32993">Apps on phones talk with services in the cloud or
    in local hubs, corporates have multiple networks connecting various computing
    environments with each other, and we have entirely skipped more progressive concepts</st>
    <st c="33205">such as</st> **<st c="33214">Web3</st>** <st c="33218">here.</st>
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32811">查看</st> <st c="32819">前面的图示，你可以发现无处不在的云元素。</st> <st c="32903">我们不应该把这张图看作是独立的项目。</st>
    <st c="32968">一切都是相互连接的。</st> <st c="32993">手机上的应用与云端或本地集线器中的服务进行通信，企业有多个网络将不同的计算环境连接在一起，而我们完全忽略了更进步的概念</st>
    <st c="33205">例如</st> **<st c="33214">Web3</st>** <st c="33218">在这里。</st>
- en: <st c="33224">Important note</st>
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="33224">重要提示</st>
- en: <st c="33239">IT as we know it today is undergoing a heavy transformation, both
    in the visible and invisible spectrum.</st> <st c="33345">With every step we take,
    we increase its complexity while facing demographic pressure and a shortage of
    professionals.</st> <st c="33464">Sooner or later, most companies will be required
    to have their own platform.</st> <st c="33541">If they</st> <st c="33548">don’t,
    they will buy it as</st> <st c="33576">a service.</st>
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="33239">信息技术正经历着一场重大的变革，无论是可见的还是不可见的领域。</st> <st c="33345">随着我们迈出的每一步，我们在增加其复杂性的同时，面临着人口压力和专业人才短缺的挑战。</st>
    <st c="33464">迟早，大多数公司将需要拥有自己的平台。</st> <st c="33541">如果他们</st> <st c="33548">没有，他们将购买</st>
    <st c="33576">作为服务。</st>
- en: <st c="33586">Focusing on developer experience</st>
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="33586">专注于开发者体验</st>
- en: <st c="33619">It is not sustainable</st> <st c="33642">to hope that every developer
    will be able to cover the extremely wide landscape of tools and technologies without
    burning out within a few years.</st> <st c="33788">Therefore, the quality of user
    experience is pivotal in determining the adoption and success of a platform.</st>
    <st c="33896">A well-designed platform means that it is intuitive, easy to navigate,
    and aligned with the developers’ expectations and workflows.</st> <st c="34028">Enhancing
    the experience involves streamlining interactions, minimizing friction points,
    and providing a visually, technically, and functionally pleasing environment.</st>
    <st c="34195">This not only improves user satisfaction but also boosts productivity
    and engagement.</st> <st c="34281">The question is how to</st> <st c="34304">achieve
    this.</st>
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="33619">希望每个开发者都能在没有过度疲劳的情况下，涵盖广泛的工具和技术领域，是不可持续的。</st> <st c="33642">因此，用户体验的质量在决定平台的采用和成功中至关重要。</st>
    <st c="33788">一个设计良好的平台意味着它是直观的，易于导航，并与开发者的期望和工作流相一致。</st> <st c="33896">提升体验包括简化互动、最小化摩擦点，并提供一个视觉、技术和功能上都令人愉悦的环境。</st>
    <st c="34028">这不仅提高了用户满意度，还提升了生产力和参与度。</st> <st c="34195">这不仅提升了用户满意度，还增强了生产力和参与度。</st>
    <st c="34281">问题是如何</st> <st c="34304">实现这一点。</st>
- en: <st c="34317">We must consider that every developer might have a different preference
    when designing the platform.</st> <st c="34419">It starts directly with the problem
    of the interaction between the platform and the user.</st> <st c="34509">Developers
    might ask various questions, such as the following.</st> <st c="34572">Do we need
    to set up a portal?</st> <st c="34603">Is pushing code on a Git service enough?</st>
    <st c="34644">Can I interact with the platform via CLI?</st> <st c="34686">It
    can be hard to tell, but successful platforms provide all of those interactions.</st>
    <st c="34770">Starting with an API-centric approach will enable any other path
    to be taken simultaneously.</st> <st c="34863">A strong API is the core of a good
    platform.</st> <st c="34908">In reality, most platforms still provide multiple
    different interfaces.</st> <st c="34980">The rapid development of tools to unify
    this will overcome such challenges and if considered to be built on greenfield,
    it can be then placed directly into</st> <st c="35136">the core.</st>
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="34317">我们必须考虑到每个开发者在设计平台时可能有不同的偏好。</st> <st c="34419">这直接涉及到平台与用户之间的互动问题。</st>
    <st c="34509">开发者可能会提出各种问题，例如：</st> <st c="34572">我们需要设置一个门户吗？</st> <st c="34603">在Git服务上推送代码就足够了吗？</st>
    <st c="34644">我可以通过CLI与平台互动吗？</st> <st c="34686">这些问题可能难以回答，但成功的平台提供了所有这些互动。</st>
    <st c="34770">从API中心的方法开始，将使得任何其他路径可以同时进行。</st> <st c="34863">强大的API是一个好平台的核心。</st>
    <st c="34908">实际上，大多数平台仍然提供多种不同的接口。</st> <st c="34980">快速发展的工具将统一这些接口，从而克服这些挑战。如果考虑到在全新环境下构建，它可以直接嵌入到</st>
    <st c="35136">核心中。</st>
- en: <st c="35145">An example of such a core is Kratix.</st> <st c="35183">The Apache
    2.0-licensed open source platform describes itself as a “</st>*<st c="35251">...
    platform framework for building composable IDPs</st>*<st c="35302">.” In the following
    figure, you can see how Kratix positions itself between all the common tools we
    use today and provides one</st> <st c="35429">entry point.</st>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="35145">这样一个核心的例子是Kratix。</st> <st c="35183">这个Apache 2.0许可的开源平台自称是一个“</st>*<st
    c="35251">... 用于构建可组合IDP的平台框架</st>*<st c="35302">。” 在下图中，你可以看到Kratix如何在我们今天使用的所有常见工具之间定位自己，并提供一个</st>
    <st c="35429">入口点。</st>
- en: '![Figure 1.6: Kratix overview as a central integration component](img/B31164_01_06.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图1.6：Kratix作为中央集成组件的概述](img/B31164_01_06.jpg)'
- en: '<st c="35854">Figure 1.6: Kratix overview as a central integration component</st>'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="35854">图1.6：Kratix作为中央集成组件的概述</st>
- en: <st c="35916">Kratix</st> <st c="35924">achieves this through the concept of</st>
    *<st c="35961">Promises</st>*<st c="35969">, which is technically a YAML document
    that defines a contract between the platform and the users.</st> <st c="36068">Every
    team has to go through a complex onboarding process, not because of the platform
    itself but because of other dependencies such as CI/CD, Git repositories, and
    linking everything together.</st> <st c="36262">With Kratix Promises, you encapsulate
    all those steps or combine multiple Promises</st> <st c="36345">into one.</st>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="35916">Kratix</st> <st c="35924">通过</st> *<st c="35961">Promises</st>*<st
    c="35969">的概念实现这一点，它本质上是一个YAML文档，定义了平台与用户之间的契约。</st> <st c="36068">每个团队都必须经历一个复杂的入职过程，这并非由于平台本身，而是由于其他依赖项，如CI/CD、Git仓库以及将一切连接在一起。</st>
    <st c="36262">通过Kratix Promises，你可以将所有这些步骤封装起来，或者将多个Promises</st> <st c="36345">合并为一个。</st>
- en: '<st c="36354">Now, Kratix supports simplifying the platform foundation for
    the developer experience, yet something is missing.</st> <st c="36468">The other
    side of the coin is a developer portal.</st> <st c="36518">Backstage is an example
    of an open source Apache 2.0-licensed solution developed by Spotify.</st> <st
    c="36611">Kratix and Backstage are working well together and integrating seamlessly.</st>
    <st c="36686">Backstage is a framework that enables GUIs to be declaratively created
    with the aim of unifying infrastructure tooling, services, and documentation to
    produce a fantastic developer experience.</st> <st c="36879">Backstage comes with
    three core features: the service definition, the Backstage service catalog, and
    its plugin system, through which you can enable further features such</st> <st
    c="37050">as docs.</st>'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="36354">目前，Kratix支持简化平台基础架构以提升开发者体验，但仍然缺少一些内容。</st> <st c="36468">问题的另一面是开发者门户。</st>
    <st c="36518">Backstage是一个由Spotify开发的开源Apache 2.0许可证解决方案的示例。</st> <st c="36611">Kratix与Backstage配合得很好，且实现了无缝集成。</st>
    <st c="36686">Backstage是一个框架，旨在声明式地创建图形用户界面，统一基础设施工具、服务和文档，从而提供极佳的开发者体验。</st>
    <st c="36879">Backstage有三个核心特性：服务定义、Backstage服务目录和插件系统，通过它你可以启用其他功能，例如文档。</st>
- en: '![Figure 1.7: Backstage’s three core features](img/B31164_01_07.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7：Backstage的三个核心特性](img/B31164_01_07.jpg)'
- en: '<st c="37287">Figure 1.7: Backstage’s three core features</st>'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37287">图 1.7：Backstage的三个核心特性</st>
- en: <st c="37330">At this point, we</st> <st c="37349">have seen the challenges
    that need to be solved, and we have taken a sneak peek into the solution space.</st>
    <st c="37454">That should give us a feeling of the current possibilities before
    we dive in</st><st c="37530">to details throughout the</st> <st c="37557">next
    chapters.</st>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37330">此时，我们</st> <st c="37349">已经看到了需要解决的挑战，并且我们已经对解决方案空间有了初步了解。</st>
    <st c="37454">这应该能让我们在深入探讨</st><st c="37530">接下来的章节中的细节之前，感受到当前的可能性。</st> <st
    c="37557">下一章将继续探讨具体内容。</st>
- en: <st c="37571">Attributes of platforms</st>
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="37571">平台的属性</st>
- en: <st c="37595">A platform</st> <st c="37607">must fulfill certain attributes
    and provide some core components that allow us to serve capabilities to the end
    user.</st> <st c="37725">So far, we have learned about all the complexity to handle,
    the integrations to take on, and the focus and mindset on the end user to create
    the best possible experience and product.</st> <st c="37908">All of this must
    be matched with a technical, processual, or methodical approach in the shape of
    attributes.</st> <st c="38017">For the development of an idea for your platform,
    we can only encourage you to look into attributes and then decide on the best
    solution for you, rather than taking a solution and constructing its usefulness
    around</st> <st c="38232">your case.</st>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37595">一个平台</st> <st c="37607">必须具备某些属性，并提供一些核心组件，使我们能够向最终用户提供功能。</st>
    <st c="37725">到目前为止，我们已经了解了需要处理的所有复杂性、需要集成的内容以及在创建最佳体验和产品时如何专注于最终用户的思维方式。</st>
    <st c="37908">所有这些都必须与技术、过程或方法论的方式相匹配，以形成属性。</st> <st c="38017">对于你平台的理念开发，我们只能鼓励你先研究这些属性，然后决定最适合你的解决方案，而不是先选择一个解决方案并围绕它构建对你情况的适用性。</st>
- en: <st c="38242">Some attributes, such as reducing the cognitive load, the platform
    as a product, or the developer/user experience, are well covered</st><st c="38374">.
    However, there is more to</st> <st c="38402">be considered:</st>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38242">一些属性，比如减少认知负担、将平台视为产品或开发者/用户体验，已经得到了很好的覆盖。</st><st c="38374">不过，仍然有更多需要考虑的：</st>
- en: '**<st c="38416">Flexibility, adjustability, and composability</st>**<st c="38462">:
    Platforms should offer flexibility in how they are used and integrated with other
    systems.</st> <st c="38556">By supporting modular and composable design, users
    can customize and extend the platform with optional features that suit their specific
    needs without being overwhelmed by unnecessary functionalities.</st> <st c="38757">This
    approach allows the platform to serve a broad user base with diverse requirements
    while</st> <st c="38849">maintaining simplicity</st> <st c="38873">and manageability.</st>'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="38416">灵活性、可调性和可组合性</st>**<st c="38462">：平台应该提供灵活性，允许它们以不同的方式被使用和与其他系统集成。</st>
    <st c="38556">通过支持模块化和可组合的设计，用户可以根据自己的具体需求自定义和扩展平台，添加可选功能，而不会被不必要的功能所困扰。</st>
    <st c="38757">这种方法使平台能够为拥有多样化需求的广泛用户群体提供服务，同时</st> <st c="38849">保持简洁性</st> <st
    c="38873">和可管理性。</st>'
- en: '**<st c="38891">Secure</st>**<st c="38898">: Security is a critical attribute
    that must be embedded in the design and architecture of the platform.</st> **<st
    c="39004">Secure by default</st>** <st c="39021">means</st> <st c="39027">that
    the platform employs the best security practices and configurations out of the
    box.</st> <st c="39117">Users should have robust</st> <st c="39142">security measures
    in place without needing to configure them extensively.</st> <st c="39216">This
    includes data encryption, secure access controls, and regular security</st> <st
    c="39291">updates to protect</st> <st c="39311">against vulnerabilities.</st>'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="38891">安全</st>**<st c="38898">：安全是必须嵌入平台设计和架构的关键属性。</st> **<st c="39004">默认安全</st>**
    <st c="39021">意味着</st> <st c="39027">平台在开箱即用时采用最佳安全实践和配置。</st> <st c="39117">用户应该拥有强大的</st>
    <st c="39142">安全措施，无需进行大量配置。</st> <st c="39216">这包括数据加密、安全访问控制以及定期安全</st> <st
    c="39291">更新以防范漏洞。</st>'
- en: '**<st c="39335">Self-service</st>**<st c="39348">: Enabling a self-service
    functionality allows users to perform tasks such as setting up environments, deploying
    applications, and accessing services without waiting for IT support.</st> <st
    c="39531">This capability not only accelerates workflows but also reduces the
    operational burden on platform teams.</st> <st c="39637">Self-service portals
    should be user-friendly and provide all necessary tools and permissions for</st>
    <st c="39733">users to manage their</st> <st c="39756">tasks independently.</st>'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="39335">自助服务</st>**<st c="39348">：启用自助服务功能使用户能够执行设置环境、部署应用程序和访问服务等任务，无需等待IT支持。</st>
    <st c="39531">这种能力不仅加速了工作流程，还减少了平台团队的运营负担。</st> <st c="39637">自助服务门户应用户友好，并提供所有必要的工具和权限，使</st>
    <st c="39733">用户能够独立管理他们的</st> <st c="39756">任务。</st>'
- en: '**<st c="39776">Documentation and support</st>**<st c="39802">: Effective documentation
    and onboarding are essential for empowering users and reducing the initial learning
    curve associated with a platform.</st> <st c="39947">Comprehensive, clear, and
    accessible documentation ensures that users can self-serve to solve problems and
    understand the platform’s capabilities without external help.</st> <st c="40116">Onboarding
    processes should guide new users through the platform’s core features and functionalities,
    making them feel competent and confident in using the platform from</st> <st c="40286">the
    start.</st>'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="39776">文档和支持</st>**<st c="39802">：有效的文档和入职培训对于赋予用户权力和减少与平台相关的初始学习曲线至关重要。</st>
    <st c="39947">全面、清晰和易于访问的文档确保用户能够自主解决问题并了解平台的能力，而无需外部帮助。</st> <st c="40116">入职过程应该指导新用户了解平台的核心功能和功能，使他们从</st>
    <st c="40286">一开始就感到能力和信心。</st>'
- en: <st c="40296">As you might have realized, those attributes, in some way, match
    the outline of this book and are therefore our lighthouses on the way to designing
    and planning</st> <st c="40458">a platform.</st>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="40296">你可能已经意识到，这些属性在某种程度上符合本书的大纲，因此它们是我们设计和规划的灯塔</st> <st c="40458">平台。</st>
- en: <st c="40469">Sometimes, such</st> <st c="40485">attributes might be too soft
    to be used as a reference to start an implementation.</st> <st c="40569">An alternative
    for this was described by the</st> <st c="40613">internal developer platform community
    (</st>[<st c="40653">https://internaldeveloperplatform.org/</st>](https://internaldeveloperplatform.org/)<st
    c="40692">) as the five core components of an IDP</st> *<st c="40733">[4]</st>*<st
    c="40736">, which we encourage you to check out as an</st> <st c="40780">alternative
    source:</st>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="40469">有时，这些</st> <st c="40485">属性可能过于软化，无法作为实施的参考点。</st> <st c="40569">这一问题的替代方案被内部开发者平台社区（</st>[<st
    c="40653">https://internaldeveloperplatform.org/</st>](https://internaldeveloperplatform.org/)<st
    c="40692">）描述为IDP的五个核心组件</st> *<st c="40733">[4]</st>*<st c="40736">，我们鼓励您查看作为</st>
    <st c="40780">替代来源：</st>
- en: '**<st c="40799">Application configuration management</st>**<st c="40836">:
    Manage the application configuration in a dynamic, scalable, and</st> <st c="40904">reliable
    way</st>'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="40799">应用配置管理</st>**<st c="40836">：以动态、可扩展和</st> <st c="40904">可靠的方式管理应用配置</st>'
- en: '**<st c="40916">Infrastructure orchestration</st>**<st c="40945">: Orchestrate
    infrastructure in a dynamic and intelligent way depending on</st> <st c="41021">the
    context</st>'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="40916">基础设施编排</st>**<st c="40945">：根据上下文以动态和智能的方式编排基础设施</st> <st c="41021">方式</st>'
- en: '**<st c="41032">Environment management</st>**<st c="41055">: Enable developers
    to create new and fully provisioned environments</st> <st c="41125">whenever needed</st>'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="41032">环境管理</st>**<st c="41055">：使开发者能够在需要时创建新的并且完全配置好的环境</st> <st
    c="41125">。'
- en: '**<st c="41140">Deployment management</st>**<st c="41162">: Implement a delivery
    pipeline for continuous delivery or even</st> <st c="41227">continuous deployment</st>'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="41140">部署管理</st>**<st c="41162">：实施持续交付或甚至持续部署的交付流水线</st> <st c="41227">。'
- en: '**<st c="41248">Role-based access control</st>**<st c="41274">: Manage who
    can do what in a</st> <st c="41305">scalable way</st>'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="41248">基于角色的访问控制</st>**<st c="41274">：以可扩展的方式管理谁可以做什么</st> <st c="41305">。'
- en: <st c="41317">In</st> [*<st c="41321">Chapter 2</st>*](B31164_02.xhtml#_idTextAnchor055)<st
    c="41330">, we will go into detail about the organizational and technical aspects,
    as well as the development, of an implementable plan for crafting your platform
    as</st> <st c="41486">a product.</st>
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="41317">在</st> [*<st c="41321">第2章</st>*](B31164_02.xhtml#_idTextAnchor055)<st
    c="41330">中，我们将详细讨论平台的组织和技术方面，以及制定一个可实施计划来将你的平台打造成一个</st> <st c="41486">产品。</st>
- en: <st c="41496">Focusing on the developer perspective means to impact the organization
    and with that, the people who are working for it.</st> <st c="41618">Next, we
    will look into the sociotechnical aspect that</st> <st c="41672">we have to consider
    while</st> <st c="41699">creating platforms.</st>
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="41496">关注开发者视角意味着影响组织，从而影响为其工作的人们。</st> <st c="41618">接下来，我们将探讨在</st>
    <st c="41672">创建平台时需要考虑的社会技术因素。</st>
- en: <st c="41718">Understanding the socio-technical aspects</st>
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="41718">理解社会技术方面</st>
- en: <st c="41760">Designing a</st> <st c="41773">successful platform involves much
    more than technical prowess; it requires a deep understanding of its users’ diverse
    needs, fostering and motivating collaboration from an early stage, and creating
    an open environment that welcomes a platform-centric culture.</st> <st c="42033">These
    sociotechnical aspects of platform engineering are crucial perspectives that emphasize
    not just the technical components of a platform but also the human elements—how
    individuals and groups interact with the system and how it influences their work
    and behaviors.</st> <st c="42302">Understanding this often invisible part</st>
    <st c="42341">of creating a platform is essential.</st> <st c="42379">It is the
    glue that defines that technologically robust systems are relevant, as well as
    defining the deeply integrated daily workflows and behaviors of the users.</st>
    <st c="42543">Respecting this almost meta level means enhancing productivity and
    driving adoption through high satisfaction.</st> <st c="42654">We have to acknowledge
    that every technical decision has consequences, both technologically and for humans.</st>
    <st c="42762">Therefore, it’s important to design platforms that resonate well
    with their users, foster a collaborative culture, drive innovation, and just make
    work easier on a daily basis.</st> <st c="42939">By focusing on these sociotechnical
    aspects, platform engineers can create more adaptable, sustainable, and user-centric
    systems that stand the test of time in an ever-evolving</st> <st c="43116">cloud-native
    landscape.</st>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="41760">设计一个</st> <st c="41773">成功的平台不仅仅涉及技术能力；它还需要深入理解用户的多样化需求，从早期阶段开始促进和激励协作，并创建一个欢迎平台文化的开放环境。</st>
    <st c="42033">平台工程的这些社会技术方面是至关重要的视角，它们不仅强调平台的技术组成部分，还强调人类元素——个人和团队如何与系统互动，系统如何影响他们的工作和行为。</st>
    <st c="42302">理解这一常常不可见的部分</st> <st c="42341">在创建平台时至关重要。</st> <st c="42379">它是将技术上强大的系统与深度整合的日常工作流和用户行为联系起来的粘合剂。</st>
    <st c="42543">尊重这一几乎元层面的因素意味着通过高满意度提高生产力并推动采用。</st> <st c="42654">我们必须承认，每一个技术决策都具有后果，既影响技术本身，也影响人类。</st>
    <st c="42762">因此，设计能够与用户产生共鸣的平台，促进协作文化，推动创新，并让日常工作变得更加轻松是很重要的。</st> <st c="42939">通过关注这些社会技术方面，平台工程师可以创建出更具适应性、可持续性和以用户为中心的系统，这些系统能够在不断发展的</st>
    <st c="43116">云原生环境中经得起时间的考验。</st>
- en: <st c="43139">However, we must be aware that we interact within a socio-technical
    system.</st> <st c="43216">The challenge is that we have continuous friction and
    optimization within our work, personal, and private environments.</st> <st c="43336">The
    work environment represents what’s happening in your professional context.</st>
    <st c="43415">The personal environment is an “I”-centric perspective that shares
    the experience with anyone who is in touch with you, which can be work or private
    elements.</st> <st c="43574">Lastly, the private environment is what others can
    estimate and observe, meaning what happens behind closed doors to you but can
    have an effect on your opinions and perspectives.</st> <st c="43753">This constant
    moving and adjusting happens between the company or project structure, the people,
    the technology, and their tasks.</st> <st c="43883">Within this, we have different
    influences and motivational drivers.</st> <st c="43951">The following representation
    should visualize this continuous movement.</st> <st c="44023">Subsystems and systems
    themselves have their own rules, activities,</st> <st c="44091">and powers.</st>
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="43139">然而，我们必须意识到，我们的互动是在一个社会技术系统中进行的。</st> <st c="43216">挑战在于，我们在工作、个人和私人环境中不断发生摩擦和优化。</st>
    <st c="43336">工作环境代表着你在专业领域中的所作所为。</st> <st c="43415">个人环境是一种以“我”为中心的视角，分享着与任何与你接触的人的经历，可以是工作或私人方面的内容。</st>
    <st c="43574">最后，私人环境是别人可以估计和观察到的内容，也就是发生在你关闭门后但可能对你的观点和视角产生影响的事。</st> <st c="43753">这种不断的变动和调整发生在公司或项目结构、人员、技术以及他们的任务之间。</st>
    <st c="43883">在此过程中，我们有不同的影响因素和激励驱动因素。</st> <st c="43951">以下的表示应能可视化这一持续的运动。</st>
    <st c="44023">子系统和系统本身有其自身的规则、活动，</st> <st c="44091">和权力。</st>
- en: '![Figure 1.8: Sociotechnical system, Trancossi et al.](img/B31164_01_08.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8：社会技术系统，Trancossi 等人。](img/B31164_01_08.jpg)'
- en: '<st c="44356">Figure 1.8: Sociotechnical system, Trancossi et al.</st>'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44356">图 1.8：社会技术系统，Trancossi 等人。</st>
- en: <st c="44407">When we</st> <st c="44415">are working on identifying the best
    approach to implement a platform, trying to find out the needs and demands, building
    a community, and advocating for openness, we must be aware that this all is influenced
    by and happening within a socio-technical system.</st> <st c="44674">We might
    sometimes be blocked or pushed into a different direction, or find it hard to
    motivate people.</st> <st c="44778">That’s the right time to spend some effort
    on understanding the subs</st><st c="44846">ystem and external systems that are</st>
    <st c="44883">pushing you.</st>
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44407">当我们</st> <st c="44415">在确定实施平台的最佳方法时，试图了解需求、建立社区，并倡导开放时，我们必须意识到这一切都受到并发生在一个社会技术系统内。</st>
    <st c="44674">有时我们可能会被阻塞或被推向不同的方向，或者发现很难激励人们。</st> <st c="44778">这是花些时间理解子系统和外部系统推动你的时机。</st>
    <st c="44846">这些子系统和外部系统正在</st> <st c="44883">推动你。</st>
- en: <st c="44895">Understand user needs in platform design</st>
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="44895">理解平台设计中的用户需求</st>
- en: <st c="44936">A platform</st> <st c="44947">design must inherently be flexible
    to accommodate a wider range of stakeholders than only developers.</st> <st c="45050">We
    can’t say it enough, but implementing a platform is an all-hands-on-deck decision.</st>
    <st c="45136">Software engineers, product owners, business stakeholders, and operative
    teams all have unique requirements and challenges they expect the platform to
    handle.</st> <st c="45295">Developers may seek straightforward tools for deployment
    and testing, while end users need intuitive interfaces and seamless interaction.</st>
    <st c="45433">Business stakeholders, meanwhile, are likely to be primarily focused
    on</st> **<st c="45505">Return on Investment</st>** <st c="45525">(</st>**<st
    c="45527">ROI</st>**<st c="45530">), security, governance, compliance, and scalability.</st>
    <st c="45585">As a platform engineer and architect, it is your responsibility
    to identify these demands and balance them throughout the</st> <st c="45707">platform’s
    lifecycle.</st>
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44936">平台</st> <st c="44947">设计必须本质上具有灵活性，以容纳比开发人员更广泛的利益相关者。</st> <st
    c="45050">我们不能说得太多，但实施一个平台是一个全员参与的决策。</st> <st c="45136">软件工程师、产品负责人、业务利益相关者和操作团队都有独特的需求和挑战，他们期望平台能够应对。</st>
    <st c="45295">开发人员可能寻求简便的部署和测试工具，而最终用户需要直观的界面和无缝的互动。</st> <st c="45433">与此同时，业务利益相关者很可能主要关注</st>
    **<st c="45505">投资回报率</st>** <st c="45525">(</st>**<st c="45527">ROI</st>**<st
    c="45530">)、安全性、治理、合规性和可扩展性。</st> <st c="45585">作为平台工程师和架构师，你有责任识别这些需求，并在平台生命周期中保持平衡。</st>
- en: <st c="45728">So, the first step</st> <st c="45748">in user-oriented platform
    design is to accurately identify and understand the different stakeholder groups
    interacting with the platform.</st> <st c="45886">In the early stages, you can
    do interviews and surveys to get a clear picture.</st> <st c="45965">Consider
    a 360-degree view and know that it’s better to interview one person too many than
    to interview too few people overall.</st> <st c="46093">In later stages, it’s
    helpful to be more data-driven and to use usage data for the different components
    of the platform.</st> <st c="46214">Service requests and open problems and issues
    at the help desk will be a good indicator of the useability of the platform.</st>
    <st c="46337">At this point, it becomes relevant to see the platform as a product
    and to have a product mindset, as you have to consider user feedback from the
    earliest stages of development and throughout the product life cycle, ensuring
    the platform is accessible, intuitive, and efficient.</st> <st c="46616">A false
    sense of vanity will definitely steer your efforts in a bad direction.</st> <st
    c="46695">It is helpful to define principles such as transparency or simplicity
    that will guide you through the development and decision process.</st> <st c="46831">In
    the upcoming chapter, we will tackle this topic</st> <st c="46882">in depth.</st>
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="45728">因此，第一步</st> <st c="45748">在以用户为导向的平台设计中，是准确识别和理解与平台互动的不同利益相关者群体。</st>
    <st c="45886">在早期阶段，可以通过访谈和调查来获得清晰的了解。</st> <st c="45965">考虑从360度角度来看，记住采访一个人多于采访太少的人通常更好。</st>
    <st c="46093">在后期阶段，更加依赖数据是有帮助的，可以使用平台各个组件的使用数据。</st> <st c="46214">服务请求和帮助台上的未解决问题将是衡量平台可用性的良好指标。</st>
    <st c="46337">此时，将平台视为产品并拥有产品思维是至关重要的，因为你必须从开发的最早阶段到整个产品生命周期中都考虑用户反馈，确保平台具有可访问性、直观性和高效性。</st>
    <st c="46616">虚荣心的错觉肯定会将你的努力引向错误的方向。</st> <st c="46695">定义诸如透明性或简洁性等原则会很有帮助，它们能指导你通过开发和决策过程。</st>
    <st c="46831">在接下来的章节中，我们将深入探讨这个话题</st> <st c="46882">。</st>
- en: <st c="46891">To remain relevant and efficient, platforms must evolve.</st>
    <st c="46949">Remember that projects die when they hit the deadline; products
    evolve with every release and piece of user feedback.</st> <st c="47067">Establishing
    robust release documentation and feedback loops is critical for this iterative
    process of improvement.</st> <st c="47183">Which channel suits your organization
    and users best is for you to decide, but there are many ways beyond surveys and
    interviews.</st> <st c="47313">Examples include direct interactions via communication
    tools, user forums, support solutions, even internal corporate social media, or
    in an extreme case, embedded feedback mechanisms within the platform itself.</st>
    <st c="47525">Regular updates and upgrades, defined by real user experiences and
    challenges, ensure that the platform remains aligned with user needs and industry
    stan</st><st c="47678">dards, fostering loyalty and</st> <st c="47708">sustained
    engagement.</st>
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="46891">为了保持相关性和效率，平台必须不断发展。</st> <st c="46949">记住，项目在遇到截止日期时就会结束；产品则随着每次发布和用户反馈不断发展。</st>
    <st c="47067">建立健全的发布文档和反馈循环对于这一迭代改进过程至关重要。</st> <st c="47183">哪个渠道最适合你的组织和用户是你需要决定的，但除了调查和访谈之外，还有许多其他方式。</st>
    <st c="47313">例如，通过沟通工具的直接互动、用户论坛、支持解决方案，甚至是内部企业社交媒体，或者在极端情况下，平台本身内嵌的反馈机制。</st>
    <st c="47525">由真实用户体验和挑战定义的定期更新和升级，确保平台始终与用户需求和行业标准保持一致，</st><st c="47678">促进忠诚度并</st>
    <st c="47708">保持持续的参与。</st>
- en: <st c="47729">Foster and enhance collaboration</st>
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="47729">促进和增强协作</st>
- en: <st c="47762">The issue</st> <st c="47773">of transparent, open feedback loops
    is that they require a well-set-up collaboration.</st> <st c="47859">Otherwise,
    it feels artificial, and in some sense like the traditional approach of requirements
    engineering.</st> <st c="47968">As platform engineers, we have to package these
    classic methods into a more personal and welcoming approach.</st> <st c="48077">Effective
    collaboration is the cornerstone of any successful platform.</st> <st c="48148">By
    integrating the right communication tools, creating a fantastic user experience
    through customization, and advocating for cross-functional teamwork, platforms
    can become more than just technology solutions—they can become a place for collaboration
    between different development teams and a driver for organizations</st> <st c="48466">and
    innovation.</st>
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="47762">透明且开放的反馈循环问题在于，它们需要良好的协作架构。</st> <st c="47773">否则，它会显得不自然，从某种意义上说，就像传统的需求工程方法。</st>
    <st c="47859">作为平台工程师，我们必须将这些经典方法包装成一种更具个人化和欢迎感的方式。</st> <st c="47968">有效的协作是任何成功平台的基石。</st>
    <st c="48077">通过整合合适的沟通工具，通过定制提供卓越的用户体验，并倡导跨职能团队合作，平台不仅能成为技术解决方案——它们还能成为不同开发团队之间的合作场所，并推动组织</st>
    <st c="48466">和创新。</st>
- en: <st c="48481">To foster</st> <st c="48492">collaboration, your team and the
    platform must be open and welcoming.</st> <st c="48562">Reduce any kind of barriers
    to onboarding a new product team and provide them with differently presented starting
    points.</st> <st c="48684">It must be clear how and where to reach your team for
    any kinds of questions.</st> <st c="48762">This is important in the early days
    of a new end user team joining your platform.</st> <st c="48844">Eliminate any
    kind of implicit expectation that it is clear where and how to find your team,
    as it usually isn’t, especially in larger organizations.</st> <st c="48994">This
    requires that you and your team become platform advocates, alongside internal
    public documentation and landing pages.</st> <st c="49117">You have to go out
    there, work with other teams together, listen to them talk about their challenges,
    and show them your solutions.</st> <st c="49249">Where possible, you have to inform
    your organization about new features and use cases, and</st> <st c="49339">keep
    showing them how simple it is to</st> <st c="49378">get started.</st>
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="48481">为了促进</st> <st c="48492">合作，你的团队和平台必须是开放和欢迎的。</st> <st c="48562">减少任何形式的障碍，使新产品团队能够顺利加入，并为他们提供不同呈现方式的起始点。</st>
    <st c="48684">必须清楚地说明如何以及在何处联系你的团队以解答各种问题。</st> <st c="48762">这在新用户团队加入你的平台的初期尤为重要。</st>
    <st c="48844">消除任何隐性期望，即大家清楚地知道如何以及在哪里找到你的团队，因为通常并非如此，尤其是在大型组织中。</st> <st c="48994">这要求你和你的团队成为平台的倡导者，并通过内部公共文档和登陆页面进行宣传。</st>
    <st c="49117">你必须走出去，与其他团队合作，倾听他们讨论挑战，展示你的解决方案。</st> <st c="49249">在可能的情况下，你必须向你的组织传达新功能和使用场景，并</st>
    <st c="49339">不断向他们展示如何轻松</st> <st c="49378">开始使用。</st>
- en: <st c="49390">Cultivating an open, platform-centric culture</st>
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="49390">培养开放的、以平台为中心的文化</st>
- en: <st c="49436">Cultivating</st> <st c="49448">an open and platform-centric culture
    might be the hardest part.</st> <st c="49513">It requires buy-in from other budget-managing
    roles within your organization, in addition to your engagement.</st> <st c="49623">Cultivation
    is based on training, motivation (which may be incentivized), and engagement with
    your community or user group.</st> <st c="49747">All of these activities go beyond
    your</st> <st c="49786">budget responsibility.</st>
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="49436">培养</st> <st c="49448">一种开放和以平台为中心的文化可能是最难的部分。</st> <st c="49513">这需要来自你组织内其他预算管理角色的支持，除了你自己的参与之外。</st>
    <st c="49623">培养依赖于培训、激励（可能会有激励措施）和与社区或用户群体的互动。</st> <st c="49747">所有这些活动超出了你的</st>
    <st c="49786">预算责任。</st>
- en: <st c="49808">Training might look like an expensive, time-consuming activity
    that quickly becomes outdated, but there is almost no better way to get into close
    and truly open contact with your end users.</st> <st c="49999">Comprehensive training
    programs combine different approaches</st> <st c="50060">and sources:</st>
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="49808">培训可能看起来是一个昂贵且耗时的活动，而且很快就会过时，但几乎没有比这更好的方式能与最终用户进行紧密且真正开放的接触。</st>
    <st c="49999">综合培训项目结合了不同的方法</st> <st c="50060">和来源：</st>
- en: <st c="50072">In-person workshops that focus on different components of</st>
    <st c="50131">your platform</st>
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="50072">专注于平台各个组件的面对面工作坊</st> <st c="50131">你的平台</st>
- en: <st c="50144">Hands-on sessions for onboarding and a good first project or specific
    integration that is</st> <st c="50235">less complicated</st>
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="50144">入职培训的实践环节，以及一个简单的首次项目或特定的集成，这些</st> <st c="50235">不会太复杂</st>
- en: <st c="50251">Do-it-yourself tutorials</st>
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="50251">自助教程</st>
- en: <st c="50276">Online/video tutorials</st> <st c="50300">for generics</st>
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="50276">在线/视频教程</st> <st c="50300">用于通用内容</st>
- en: <st c="50312">Online/video tutorials for</st> <st c="50340">your specifics</st>
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="50312">在线/视频教程用于</st> <st c="50340">你的特定需求</st>
- en: <st c="50354">As you</st> <st c="50362">can see, you don’t have to do it all
    yourself.</st> <st c="50409">Buy courses and training for common knowledge and
    provide your own to deepen this knowledge and teach your platform specifics.</st>
    <st c="50536">Additionally, consider creating a repository and wiki of resources
    such as FAQs, best practice guides, troubleshooting tips, code snippets and examples,
    use case recommendations, and post-mortems.</st> <st c="50733">This can help users
    feel more empowered and reduce the learning curve for new</st> <st c="50811">technology
    adoption.</st>
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="50354">如你</st> <st c="50362">所见，你不必一切亲力亲为。</st> <st c="50409">购买常见知识的课程和培训，并提供你自己的内容来深化这些知识，教授你的平台特性。</st>
    <st c="50536">此外，考虑创建一个资源库和维基，包括常见问题解答、最佳实践指南、故障排除技巧、代码片段和示例、用例推荐以及事后分析等。</st>
    <st c="50733">这可以帮助用户更有信心，并减少新</st> <st c="50811">技术采纳的学习曲线。</st>
- en: <st c="50831">To keep up the motivation, the training and platform usage can
    be combined with incentives.</st> <st c="50924">There are different motivational
    strategies such as gamification, recognition programs, and performance-based rewards
    that can encourage active use of the platform.</st> <st c="51089">For large organizations,
    we have even seen internal badge programs and</st> *<st c="51160">cloud driver
    licenses</st>*<st c="51181">, which could always be combined with official certifications.</st>
    <st c="51244">Yet at the same time, you need to be careful not to create artificially
    high barriers.</st> <st c="51331">That would be counterproductive.</st> <st c="51364">Ideally,
    your incentives should motivate new users and provide challenges for experts.</st>
    <st c="51451">For example, they can be integrated with existing performance metrics
    to reinforce a culture that values continuous improvement and effective use of
    technology.</st> <st c="51612">In this way, you can also influence corporate targets
    through defined KPIs, such as cost reduction, performance improvement,</st> <st
    c="51737">and stability.</st>
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="50831">为了保持动力，培训和平台使用可以结合激励措施。</st> <st c="50924">有不同的激励策略，如游戏化、表彰计划和基于绩效的奖励，可以鼓励平台的积极使用。</st>
    <st c="51089">对于大公司，我们甚至见过内部徽章计划和</st> *<st c="51160">云驾驶执照</st>*<st c="51181">，这些通常可以与官方认证结合。</st>
    <st c="51244">但同时，你需要小心不要设定过高的人工障碍。</st> <st c="51331">那样反而会适得其反。</st> <st c="51364">理想情况下，你的激励措施应该能够激发新用户的兴趣，并为专家提供挑战。</st>
    <st c="51451">例如，它们可以与现有的绩效指标整合，强化一个重视持续改进和有效利用技术的文化。</st> <st c="51612">通过这种方式，你还可以通过定义的KPI（如成本降低、绩效提升、</st>
    <st c="51737">和稳定性）影响企业目标。</st>
- en: <st c="51751">Finally, we have to combine all those approaches.</st> <st c="51802">The
    best way to do this is to create a community.</st> <st c="51852">We can establish
    such a community through user groups, regular meetups, and forums that enable
    users to share knowledge, solve problems collaboratively, and provide support
    to each other.</st> <st c="52040">To nurture a community, we highly recommend
    that you find support from your C-level and marketing team.</st> <st c="52144">It
    might sound easy to just bring people together, and as though all will be well
    once that happens.</st> <st c="52245">In truth, it is a whole discipline that
    requires exploring strategies for engaging community members, facilitating productive
    discussions, and fostering a sense of belonging and ownership</st> <st c="52433">among
    users.</st>
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="51751">最后，我们需要将所有这些方法结合起来。</st> <st c="51802">最好的方法是创建一个社区。</st> <st
    c="51852">我们可以通过用户小组、定期聚会和论坛来建立这样的社区，让用户分享知识、共同解决问题，并相互提供支持。</st> <st c="52040">为了培养一个社区，我们强烈建议你寻求C级高管和市场团队的支持。</st>
    <st c="52144">这听起来可能很简单，只要把人们聚集在一起，似乎一切都会顺利。</st> <st c="52245">实际上，这是一门完整的学科，需要探索吸引社区成员的策略、促进富有成效的讨论，并培养用户之间的归属感和责任感。</st>
    <st c="52433">在用户中。</st>
- en: <st c="52445">Without people and respecting their needs, your platform will
    either quickly be abandoned or never gain any traction in the first place.</st>
    <st c="52583">Strategic initiatives focused on training, incentives, and a thriving
    community can accelerate an open, platform-centric culture.</st> <st c="52713">To
    increase a platform’s effectiveness, you have to go beyond its pure technical
    deployment.</st> <st c="52806">This holistic approach ensures that the platform
    becomes a fundamental part of the organization, driving innovation and efficiency
    across all levels and stakeholders, from developers and operations to business
    and</st> <st c="53020">process owners.</st>
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="52445">没有人，且不尊重他们的需求，你的平台要么很快被放弃，要么从一开始就无法获得任何吸引力。</st> <st c="52583">专注于培训、激励和繁荣社区的战略举措可以加速开放、以平台为中心的文化。</st>
    <st c="52713">为了提高平台的有效性，你必须超越其纯粹的技术部署。</st> <st c="52806">这种整体性的方法确保了平台成为组织的基础组成部分，推动创新和效率在各个层级和利益相关者之间流动，从开发者和运营到业务和</st>
    <st c="53020">流程所有者。</st>
- en: <st c="53035">Summary</st>
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="53035">总结</st>
- en: <st c="53043">In this opening chapter, we have explored the role of platforms
    in modern software development, particularly within cloud-native environments.</st>
    <st c="53187">We’ve established that platforms are not just infrastructure elements
    but elemental products that require strategic planning and continuous refinement
    to align with evolving technological and</st> <st c="53379">business demands.</st>
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="53043">在本章开头，我们探讨了平台在现代软件开发中的作用，特别是在云原生环境中的作用。</st> <st c="53187">我们已经确定，平台不仅仅是基础设施元素，它们是需要战略规划和持续改进的基本产品，以适应不断变化的技术和</st>
    <st c="53379">业务需求。</st>
- en: <st c="53396">You have learned about the platform fundamentals, and you recognize
    the comprehensive nature of platforms that combine software development, operation,
    and deployment into a cohesive environment.</st> <st c="53593">To build on that,
    you saw why the platform as a product mindset is a key component.</st> <st c="53677">It
    entails continuous development, user engagement, and responsiveness to feedback,
    to maintain relevance</st> <st c="53783">and value.</st>
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="53396">你已经了解了平台的基础知识，并且意识到平台结合了软件开发、运营和部署，形成了一个紧密的环境，具有全面性。</st> <st
    c="53593">在此基础上，你看到了平台作为产品思维方式为何是一个关键组成部分。</st> <st c="53677">它包含了持续开发、用户参与以及对反馈的响应，以保持其相关性</st>
    <st c="53783">和价值。</st>
- en: <st c="53793">Then, we discussed the importance of simplifying the developer’s
    interactions with the platform, significantly reducing cognitive load and operational
    complexity.</st> <st c="53957">Two short tool examples should cause your curiosity
    and interest in the following chapters but also show you that all those complexities
    and challenges</st> <st c="54109">are solvable.</st>
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="53793">接下来，我们讨论了简化开发者与平台交互的重要性，显著减少了认知负荷和操作复杂性。</st> <st c="53957">两个简短的工具示例应该激发你对后续章节的好奇心和兴趣，同时也向你展示了所有这些复杂性和挑战</st>
    <st c="54109">都是可以解决的。</st>
- en: '<st c="54122">In the final part, we learned about the socio-technical aspects
    and the obvious relevance of the human factor.</st> <st c="54234">Platforms must
    consider both technical capabilities and human factors, ensuring that they support
    the workflows, collaboration, and productivity of their users.</st> <st c="54395">For
    this, we introduced the three pillars to build on: understanding the user needs
    before designing a solution, fostering and enhancing collaboration, and cultivating
    an open,</st> <st c="54572">platform-centric culture.</st>'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="54122">在最后部分，我们了解了社会技术层面的因素以及人类因素的显著相关性。</st> <st c="54234">平台必须同时考虑技术能力和人类因素，确保它们支持用户的工作流程、协作和生产力。</st>
    <st c="54395">为此，我们介绍了三个支柱：在设计解决方案之前理解用户需求、促进和增强协作，以及培养开放的、</st> <st c="54572">以平台为中心的文化。</st>
- en: <st c="54597">These lessons should motivate you to dive deeper into platform
    architectures and how to build them, as they enhance operational efficiency and
    foster innovation and agility within organizations.</st> <st c="54793">By internalizing
    these concepts, platform engineers and architects can design solutions that are
    robust, user-centric, and adaptive to change, while delivering true value for</st>
    <st c="54968">their organizations.</st>
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="54597">这些课程应该激励你深入了解平台架构以及如何构建它们，因为它们提高了运营效率，并在组织内促进了创新和敏捷性。</st> <st
    c="54793">通过内化这些概念，平台工程师和架构师可以设计出既稳健、以用户为中心，又能适应变化的解决方案，同时为</st> <st c="54968">他们的组织创造真正的价值。</st>
- en: <st c="54988">Moving on from the people aspects to the architecture, we will
    discover how to define the principles and purpose of a platform, how to define
    the platform architecture, and how to m</st><st c="55170">easure the platform’s
    success in the</st> <st c="55208">upcoming chapter.</st>
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="54988">从人力资源方面转向架构，我们将探讨如何定义平台的原则和目标，如何定义平台架构，以及如何衡量平台在</st><st c="55170">下一章中的成功。</st>
- en: <st c="55225">Further reading</st>
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="55225">进一步阅读</st>
- en: <st c="55241">[1] CNCF Annual Survey</st> <st c="55265">2023:</st> [<st c="55271">https://www.cncf.io/reports/cncf-annual-survey-2023</st>](https://www.cncf.io/reports/cncf-annual-survey-2023)
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="55241">[1] CNCF年度调查</st> <st c="55265">2023：</st> [<st c="55271">https://www.cncf.io/reports/cncf-annual-survey-2023</st>](https://www.cncf.io/reports/cncf-annual-survey-2023)
- en: <st c="55322">[2] Case studies on</st> <st c="55343">IDP success:</st>
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="55322">[2] 关于</st> <st c="55343">IDP成功的案例研究：</st>
- en: <st c="55355">Spotify:</st> [<st c="55365">https://engineering.atspotify.com/2024/04/supercharged-developer-portals/</st>](https://engineering.atspotify.com/2024/04/supercharged-developer-portals/)
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="55355">Spotify:</st> [<st c="55365">https://engineering.atspotify.com/2024/04/supercharged-developer-portals/</st>](https://engineering.atspotify.com/2024/04/supercharged-developer-portals/)
- en: <st c="55438">Expedia:</st> [<st c="55448">https://backstage.io/blog/2023/08/17/expedia-proof-of-value-metrics-2/</st>](https://backstage.io/blog/2023/08/17/expedia-proof-of-value-metrics-2/)
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="55438">Expedia:</st> [<st c="55448">https://backstage.io/blog/2023/08/17/expedia-proof-of-value-metrics-2/</st>](https://backstage.io/blog/2023/08/17/expedia-proof-of-value-metrics-2/)
- en: <st c="55518">Toyota:</st> [<st c="55527">https://backstage.spotify.com/discover/blog/adopter-spotlight-toyota/</st>](https://backstage.spotify.com/discover/blog/adopter-spotlight-toyota/)
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="55518">Toyota:</st> [<st c="55527">https://backstage.spotify.com/discover/blog/adopter-spotlight-toyota/</st>](https://backstage.spotify.com/discover/blog/adopter-spotlight-toyota/)
- en: <st c="55596">[3] Gartner 2023 hype cycle for emerging</st> <st c="55638">technologies:</st>
    [<st c="55652">https://www.gartner.com/en/articles/what-s-new-in-the-2023-gartner-hype-cycle-for-emerging-technologies</st>](https://www.gartner.com/en/articles/what-s-new-in-the-2023-gartner-hype-cycle-for-emerging-technologies)
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="55596">[3] Gartner 2023年新兴技术的炒作周期：</st> [<st c="55652">https://www.gartner.com/en/articles/what-s-new-in-the-2023-gartner-hype-cycle-for-emerging-technologies</st>](https://www.gartner.com/en/articles/what-s-new-in-the-2023-gartner-hype-cycle-for-emerging-technologies)
- en: <st c="55755">[4]</st> *<st c="55760">The 5 Core Components of an Internal Developer
    Platform (</st>**<st c="55817">IDP)</st>*<st c="55822">:</st> [<st c="55824">https://internaldeveloperplatform.org/core-components/</st>](https://internaldeveloperplatform.org/core-components/)
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="55755">[4]</st> *<st c="55760">内部开发者平台的5个核心组件（</st>**<st c="55817">IDP)</st>*<st
    c="55822">：</st> [<st c="55824">https://internaldeveloperplatform.org/core-components/</st>](https://internaldeveloperplatform.org/core-components/)
