- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: How Python Integrates with IaC Concepts
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python如何与IaC概念集成
- en: Never measure the height of a mountain until you have reached the top. Then
    you will see how low it was.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你永远不要在没有登顶之前测量山的高度。到达山顶时，你会发现它其实并不高。
- en: – Dag Hammarskjöld
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: —— 达格·哈马舍尔德
- en: So, as we approach this penultimate chapter, we get to the topic of **Infrastructure
    as Code** (**IaC**). It is quite the topic, indeed, one that has taken the IT
    world by storm. It is a response to the fact that there are now more resources
    available for applications and workloads than there ever were before and the only
    thing left to do is arrange them in the most optimal way. Sure, you might find
    a way to do this once manually and it might work. But having to do it over and
    over again with a guarantee that you won’t make mistakes? That’s foolish talk
    and a waste of manpower.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在我们接近这一倒数第二章时，我们将讨论**基础设施即代码**（**IaC**）这一话题。它的确是一个热门话题，已经在IT界掀起了风暴。这是对如今应用程序和工作负载资源比以往任何时候都要多的现实的回应，剩下要做的就是以最优化的方式排列它们。当然，你可能会发现手动完成一次就能成功。但如果要一遍又一遍地做，而且还保证不会出错？那简直是无稽之谈，是对人力的浪费。
- en: So, based on these observations, the concept of IaC emerged. It posited that
    if resource creation, provisioning, and updating were standardized in the form
    of code with constants and variables arranged in an organized way, you could standardize
    the replication of resources, making things such as backups, failovers, re-deployments
    and a whole lot of other operations activities easier.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这些观察，IaC的概念应运而生。它提出，如果资源的创建、配置和更新以代码的形式进行标准化，并且常量和变量按有序的方式排列，那么你就可以标准化资源的复制，使得备份、故障转移、重新部署以及许多其他操作变得更加容易。
- en: Of course, IaC has its detractors, because all good technology does. They believe
    that it is too fast, too powerful, capable of running up your cloud bill and putting
    up resources that become too hard to untangle and are not as easily customizable.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，IaC（基础设施即代码）也有其反对者，因为所有好的技术都会有批评者。他们认为它过于快速、强大，可能会导致云账单飙升，并且部署的资源可能变得难以解开，且不易于自定义。
- en: It’s an interesting thought, but when I look at IaC, I am reminded of the initial
    passage in Adam Smith’s *Wealth of Nations* where he talks about how the division
    of labor increases production more than any other factor. IaC concepts do the
    same, where the labor (resources) is separated from the schematics that build
    them, allowing them to be produced over and over again.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个有趣的观点，但当我看到IaC时，我想到了亚当·斯密在《国富论》中的开篇，他谈到劳动分工如何比任何其他因素更能提高生产力。IaC概念也做到了这一点，其中劳动（资源）与构建它们的方案分离，使得它们可以一遍又一遍地重复生产。
- en: Python as a language has been very friendly towards IaC, perhaps the second-most
    behind Go. There are a lot of native IaC libraries and stacks in Python (which
    we will cover), in addition to modules and APIs to interact with IaC tools not
    written in Python. The flexibility of Python and the desire for loose, yet strict
    replication that comes with IaC allowed Python to become such a huge part of the
    growing IaC trend.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python作为一种语言对于IaC非常友好，可能是仅次于Go的第二种语言。Python中有许多本地的IaC库和栈（我们将在后面讲解），此外，还有与非Python编写的IaC工具交互的模块和API。Python的灵活性以及IaC所需的松散但严格的复制需求，使得Python在快速发展的IaC趋势中占据了如此重要的位置。
- en: 'This chapter will help you with a concept in IaC that is considered unique
    to DevOps, one that was created to fuel the constant need for automation and standardization
    in a DevOps workload. It will help you understand why DevOps and coding need to
    be so closely related to each other. That is why, in this chapter, you will learn
    the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助你理解IaC中的一个概念，这个概念被认为是DevOps的独特之处，是为了解决DevOps工作负载中对自动化和标准化的持续需求而创造的。它将帮助你理解为什么DevOps和编码需要如此紧密地联系在一起。这就是为什么，在本章中，你将学习以下内容：
- en: The basics of **SaltStack** and how it is built in Python along with how to
    evaluate SaltStack modules at the code and command-line levels
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SaltStack**的基础知识，以及它是如何用Python构建的，还包括如何在代码和命令行级别评估SaltStack模块'
- en: The basics of **Ansible** and how to create your own automated Ansible module
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ansible**的基础知识，以及如何创建你自己的自动化Ansible模块'
- en: How you can use Python to interact with other IaC tools, such as Terraform,
    to add automation on top of already built automation
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Python与其他IaC工具（如Terraform）进行交互，在已经构建的自动化之上添加更多自动化功能
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In order to pursue this chapter to its logical conclusion, you will need to
    fulfill a few technical requirements:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将本章的内容推进到逻辑上的结论，您需要满足一些技术要求：
- en: Installation of Python with the **Salt library** and Ansible
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Python 和 **Salt 库** 以及 Ansible
- en: Installation of NPM and NodeJS with `cdktf`
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 NPM 和 NodeJS 与 `cdktf`
- en: Installation of Terraform CLI
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Terraform CLI
- en: An AWS and a GCP account
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 AWS 账户和一个 GCP 账户
- en: A GitHub account to retrieve the repository for this book ([https://github.com/PacktPublishing/Hands-On-Python-for-DevOps](https://github.com/PacktPublishing/Hands-On-Python-for-DevOps))
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于获取本书仓库的 GitHub 账户 ([https://github.com/PacktPublishing/Hands-On-Python-for-DevOps](https://github.com/PacktPublishing/Hands-On-Python-for-DevOps))
- en: A significant amount of patience and understanding
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大量的耐心和理解
- en: Automation and customization with Python’s Salt library
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 的 Salt 库进行自动化和定制
- en: We talk about all of these fancy architectures and frameworks that we want to
    make; we talk about all of these different tools that we want to use, all of these
    workflows, and they are fun. They are very exciting, but the thing that a lot
    of DevOps still boils down to is server management; the Ops side of DevOps. It
    is still important and relevant in today’s world and will be for as long as people
    use it, which is likely forever.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们谈论所有这些我们想要构建的炫酷架构和框架，谈论我们想要使用的各种工具，所有这些工作流程，它们很有趣，非常令人兴奋，但许多 DevOps 的核心还是服务器管理；即
    DevOps 的运营部分。它在今天的世界中依然重要，且随着人们的使用，它将永远保持相关。
- en: Server management in the modern day requires the creation of modern, custom
    environments based on the requirements of the application being hosted. It also
    requires a lot of automation features to be maintained and to stay in an optimized
    state based on present circumstances.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现代的服务器管理要求根据所托管应用的需求创建现代的、定制化的环境。它还要求具备大量的自动化特性，以便维护并根据当前的情况保持优化状态。
- en: The radio was never replaced by the television, and television in turn probably
    won’t be replaced by streaming completely. Everything changes, evolves, or reduces
    down, but the thing itself and the skills needed to use it will be relevant in
    one way or another. This is why the tools for server management will always be
    there and they will evolve.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 收音机从未被电视取代，电视也很可能不会完全被流媒体取代。一切都会变化、进化或减少，但本质和使用它所需的技能始终会以某种方式保持相关。这就是为什么服务器管理工具永远存在，并且它们会不断发展的原因。
- en: That’s what the Salt library (used interchangeably with SaltStack) is used for.
    In essence, it consists of a central server that can be used to send commands
    to all servers connected to it. The requirements are that the minion (server to
    be managed) is configured to receive commands from the master (server that does
    the managing). It’s a pretty simple concept, executed using only the finest Python
    code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 Salt 库（与 SaltStack 互换使用）的用途。它本质上由一个中央服务器组成，可以用来向所有连接到它的服务器发送命令。要求是 minion（待管理的服务器）必须配置为接收来自主服务器（负责管理的服务器）的命令。这是一个相当简单的概念，通过使用最精良的
    Python 代码来实现。
- en: So, let’s get into it. We will start with the installation of a Salt server
    and a minion, and then, we will see how we can customize the Python code that
    comprises Salt if needed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们开始吧。我们将从安装 Salt 服务器和 minion 开始，然后，我们将看看如何根据需要自定义构成 Salt 的 Python 代码。
- en: 'The architecture of the Salt library consists of, as we said, a master and
    several minions. So, let’s start by creating servers that mirror this configuration:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Salt 库的架构如我们所说，包括一个主服务器和多个 minion。所以，让我们从创建与这个配置相匹配的服务器开始：
- en: 'We will create one master server and a minion in GCP, and one minion in AWS
    to show cross-cloud functionality. For this exercise, we are using Ubuntu as our
    primary **operating system** (**OS**), but other OSs will work just as well. We
    will make a minion and a master Salt instance in GCP:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在 GCP 中创建一个主服务器和一个 minion，并在 AWS 中创建一个 minion，以展示跨云功能。在本练习中，我们使用 Ubuntu 作为主要的**操作系统**（**OS**），但其他操作系统同样适用。我们将在
    GCP 中创建一个 minion 和一个 Salt 主实例：
- en: '![Figure 12.1 – Salt instances in GCP](img/B21320_12_1.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.1 – GCP 中的 Salt 实例](img/B21320_12_1.jpg)'
- en: Figure 12.1 – Salt instances in GCP
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.1 – GCP 中的 Salt 实例
- en: 'We will also add a minion instance in AWS:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将在 AWS 中添加一个 minion 实例：
- en: '![Figure 12.2 – Salt instance in AWS](img/B21320_12_2.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.2 – AWS 中的 Salt 实例](img/B21320_12_2.jpg)'
- en: Figure 12.2 – Salt instance in AWS
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.2 – AWS 中的 Salt 实例
- en: 'Now, we can SSH into the `salt-master` instance and install the Salt master
    library:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过 SSH 连接到 `salt-master` 实例并安装 Salt 主库：
- en: '[PRE0]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Figure 12.3 – Salt master version](img/B21320_12_3.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.3 – Salt master版本](img/B21320_12_3.jpg)'
- en: Figure 12.3 – Salt master version
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.3 – Salt master版本
- en: 'Next, install the Salt minion library in both of the minion instances using
    the following command:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在两个minion实例中使用以下命令安装Salt minion库：
- en: '[PRE1]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Figure 12.4 – Salt minion version](img/B21320_12_4.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.4 – Salt minion版本](img/B21320_12_4.jpg)'
- en: Figure 12.4 – Salt minion version
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.4 – Salt minion版本
- en: 'Next, go back to the Salt master and run the following command:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，返回到Salt master并运行以下命令：
- en: '[PRE2]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After we have done so, we will insert the following lines at the bottom to
    account for interfacing between the master and the minions:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，我们将在底部插入以下行，以处理master与minion之间的接口：
- en: '[PRE3]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we will run `sudo systemctl start salt-master` to initialize the Salt
    master system module, then run the `sudo systemctl status salt-master` command
    to get the status of the Salt master. When we run the command, we get something
    like the following:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将运行`sudo systemctl start salt-master`来初始化Salt master系统模块，然后运行`sudo systemctl
    status salt-master`命令来获取Salt master的状态。当我们运行该命令时，得到的结果如下：
- en: '![Figure 12.5 – Running Salt master server](img/B21320_12_5.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.5 – 运行Salt master服务器](img/B21320_12_5.jpg)'
- en: Figure 12.5 – Running Salt master server
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.5 – 运行Salt master服务器
- en: That is a running Salt master; now, we need to configure our minions.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是正在运行的Salt master；现在，我们需要配置我们的minions。
- en: 'The steps to configuring the minions are similar to those for the master, but
    with a few differences, as we will explore here:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 配置minions的步骤与配置master类似，但有一些不同之处，我们将在这里探讨：
- en: 'On each minion, run `sudo nano /etc/salt/minion`, and in the `nano` file, enter
    the following:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个minion上，运行`sudo nano /etc/salt/minion`，然后在`nano`文件中输入以下内容：
- en: '[PRE4]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Replace `salt_master_ip` with the IP of your Salt master server.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`salt_master_ip`替换为你的Salt master服务器的IP地址。
- en: 'Then, run `sudo systemctl start salt-minion`, which will initialize the minion.
    Then, run `sudo systemctl status salt-minion` to check whether the minion is running:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，运行`sudo systemctl start salt-minion`，这将初始化minion。接着，运行`sudo systemctl status
    salt-minion`来检查minion是否在运行：
- en: '![Figure 12.6 – Running Salt minion](img/B21320_12_6.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.6 – 运行Salt minion](img/B21320_12_6.jpg)'
- en: Figure 12.6 – Running Salt minion
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.6 – 运行Salt minion
- en: 'Now, on the Salt master, you can run a little example command as follows:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在Salt master上，你可以运行一个小示例命令，如下所示：
- en: '[PRE5]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That’s the basics of it. Now, let’s move to the part where we look at the Python
    code a little closer.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是基本的内容。现在，让我们深入看一下Python代码的细节。
- en: 'Let’s break down a particular Salt module so that we can learn the intricacies
    behind it:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们拆解一个特定的Salt模块，以便学习其背后的细节：
- en: 'Each Salt module is a Python function that can be called. Let’s take one module
    as an example from the documentation, in this case, the one for network connections:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个Salt模块都是一个可以调用的Python函数。我们以文档中的一个模块为例，在这里是网络连接模块：
- en: "![Figure 12.7 – Salt module from\uFEFF the documentation](img/B21320_12_7.jpg)"
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.7 – 来自文档的Salt模块](img/B21320_12_7.jpg)'
- en: Figure 12.7 – Salt module from the documentation
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.7 – 来自文档的Salt模块
- en: This is great documentation! It shows you the function and the CLI version for
    it.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这是很棒的文档！它显示了该功能及其CLI版本。
- en: 'Let’s look at the function:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们来看一下这个功能：
- en: '[PRE6]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'connect function. An equivalent in code would be as follows:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: connect函数。代码中的等效内容如下所示：
- en: '[PRE7]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: These two commands are equivalent, but you can see the pragmatism in running
    them from the command line, as these commands are far more comfortable in that
    way than as functions.That stands true for a lot of command-line tools and is
    the reason that a lot of them exist in the first place.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这两个命令是等效的，但你可以看到从命令行运行它们的实用性，因为这些命令在命令行中执行比作为函数调用要更为方便。这对于许多命令行工具都适用，也是它们存在的原因之一。
- en: '[PRE8]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Next, we will look at Ansible, which has a similar idea to execute but takes
    a slightly different approach while still using Python.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将了解Ansible，它的执行思想与Salt类似，但采用了略微不同的方法，同时仍然使用Python。
- en: How Ansible works and the Python code behind it
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible是如何工作的，以及其背后的Python代码
- en: A lot of this section will be more of the same that you saw in the previous
    section, similar tools, similar implementations, and whatnot. But, like SaltStack,
    this too is an important and very common tool in the IaC realm, which is why it
    deserves the coverage that we are giving it. Ansible is powerful, its learning
    curve is probably not as steep as that of SaltStack, and it is easier on users
    who like more cleanly pre-packaged code that they don’t have to modify too much.
    Oh, and it’s also written in Python.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的大部分内容将会是你在上一节看到的相似内容，类似的工具、相似的实现等等。但像 SaltStack 一样，这也是基础设施即代码（IaC）领域中一个重要且常见的工具，这就是为什么它值得我们这么详细介绍的原因。Ansible
    功能强大，学习曲线可能没有 SaltStack 那么陡峭，而且它对那些喜欢清晰打包好的代码且不需要太多修改的用户来说更为友好。哦，另外它是用 Python
    编写的。
- en: Ansible is run and maintained by IBM under its Red Hat label (I like that tech
    companies have their own *DC Vertigo*-esque labels for their more risque stuff
    now; it really makes the things I say about it being an art even more true). It
    is meant to maintain and affect servers using SSH key pairs to access those servers.
    That simplifies some things, such as when you control a server and all the associated
    servers are in the same **virtual private** **cloud** (**VPC**).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 由 IBM 在其 Red Hat 品牌下运行和维护（我喜欢现在技术公司为其更为“前卫”的产品命名一些*DC Vertigo*风格的品牌，这真的使我所说的它是艺术的观点更加成立）。它旨在通过
    SSH 密钥对访问服务器，从而维护和管理服务器。这简化了一些操作，例如当你控制一台服务器时，所有相关的服务器都在同一个**虚拟私有** **云**（**VPC**）中。
- en: Ansible is a bit more flexible in terms of the OSs that you can control with
    it, but for this exercise, we will use old, reliable Ubuntu. With all that exposition
    out of the way, let’s get into the finicky details of Ansible and give you a little
    sample of how it works.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 在可以控制的操作系统方面更加灵活，但在本练习中，我们将使用旧而可靠的 Ubuntu。所有这些背景介绍结束后，让我们进入 Ansible
    的细节，给你一个它如何工作的简单示例。
- en: 'We will be reusing the same instances used during the Salt exercise for this,
    so let’s start with the master instance:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重用在 Salt 实验中使用的相同实例，所以让我们从主实例开始：
- en: 'Let’s start by using `pip` to install Ansible on the system:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先通过 `pip` 在系统上安装 Ansible：
- en: '[PRE9]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Figure 12.8 – Successful Ansible installation](img/B21320_12_8.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.8 - Ansible 安装成功](img/B21320_12_8.jpg)'
- en: Figure 12.8 – Successful Ansible installation
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.8 - Ansible 安装成功
- en: 'Once you have done this, make a directory to use as the common Ansible configuration
    directory and go into it:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，创建一个目录作为通用的 Ansible 配置目录，并进入该目录：
- en: '[PRE10]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The next thing to do is to create an `inventory.ini` file, which will serve
    the same function as the master IP in SaltStack but in reverse, with the IPs of
    the servers being controlled and placed in the controlling server.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的步骤是创建一个 `inventory.ini` 文件，它将起到与 SaltStack 中主 IP 相反的作用，将被控制的服务器的 IP 地址放入控制服务器中。
- en: 'Run `sudo nano inventory.ini`, which will create the inventory file, and place
    a list of IP addresses that you want to run in there:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `sudo nano inventory.ini`，这将创建一个清单文件，并在其中列出你希望运行的 IP 地址：
- en: '[PRE11]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, you can run the `ansible-inventory -i inventory.ini --list` command and
    this will give you the following list of hosts:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以运行 `ansible-inventory -i inventory.ini --list` 命令，这将给你以下主机列表：
- en: '![Figure 12.9 - Ansible inventory](img/B21320_12_9.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.9 - Ansible 清单](img/B21320_12_9.jpg)'
- en: Figure 12.9 - Ansible inventory
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.9 - Ansible 清单
- en: 'Next, you can ping these hosts to test your connection with the following command:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你可以通过以下命令对这些主机进行 ping 测试，以检查连接状态：
- en: '[PRE12]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, you can run playbooks and runbooks through a centralized command server
    and you can even sort the hosts into fleets just by changing the inventory list.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以通过集中命令服务器运行 playbooks 和 runbooks，甚至可以通过更改清单列表来将主机分组到不同的舰队中。
- en: Those are the basics of Ansible; now, let’s look a little deeper and find the
    Python behind the CLI as we did with SaltStack. We will do so by creating a custom
    module to use with Ansible. We’ll keep it local this time, but this is basically
    how you run custom operations with Ansible all the time.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这些就是 Ansible 的基础；现在，让我们深入了解一下并查看 Ansible CLI 背后的 Python，正如我们在 SaltStack 中所做的那样。我们将通过创建一个自定义模块来使用
    Ansible。这次我们会保持本地操作，但这基本上就是你如何通过 Ansible 运行自定义操作的方法。
- en: 'Now, let’s create a new Ansible module, custom-made by us:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个由我们自定义的 Ansible 模块：
- en: 'In the environment where you have installed Ansible, create a `hello_ansible.py`
    file and add the following code to it:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你已安装 Ansible 的环境中，创建一个 `hello_ansible.py` 文件，并将以下代码添加到文件中：
- en: '[PRE13]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'That gives us the Python code that will be executed and now we need to change
    the Python code’s permissions into something executable. We do this by using the
    following command:'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这给我们提供了将要执行的Python代码，现在我们需要将Python代码的权限更改为可执行的。我们可以使用以下命令来实现这一点：
- en: '[PRE14]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, we need to make a playbook to run the function locally, and for that,
    we can create a playbook called `hello.yml` and add some code to it:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要制作一个剧本来在本地运行该函数，为此，我们可以创建一个名为`hello.yml`的剧本，并向其中添加一些代码：
- en: '[PRE15]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, execute the YAML file:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，执行YAML文件：
- en: '[PRE16]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will give you a result as a string, shown as follows:'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将为你提供一个字符串形式的结果，如下所示：
- en: "![Figure 12.10 – Result of \uFEFFour Ansible module](img/B21320_12_10.jpg)"
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图12.10 – 我们的Ansible模块的结果](img/B21320_12_10.jpg)'
- en: Figure 12.10 – Result of our Ansible module
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.10 – 我们的Ansible模块的结果
- en: That is how you create a customized Ansible module. This module will give you
    the sum of two strings that you put into it, perhaps the most basic operation
    that you can do with a module. But everything else is the same, even for more
    complex operations. Just replace `join_strings` in the code with the function
    of your choice and add the variables needed to execute that function and return
    the resulting value. Maybe, for example, it could be a function to restart a server
    or run a particular CLI command; it can be practically anything that you can do
    on a command line in the OS that you are using.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是如何创建一个自定义的Ansible模块。这个模块将返回你输入的两个字符串的和，可能是你使用模块时能够做的最基本的操作。但其他一切都是相同的，即使是更复杂的操作。只需将代码中的`join_strings`替换为你选择的函数，并添加执行该函数所需的变量，最后返回结果值。例如，它可以是一个重新启动服务器或运行特定CLI命令的函数；几乎可以是你在使用的操作系统中可以执行的任何命令行操作。
- en: Now, even this is a little bit underpowered in terms of the resources that you
    can use and the way that you can use them. It is useful for more conventional
    systems, but for systems that require unconventional architectures, something
    like Terraform is better suited. We will now discuss how we can use Terraform
    with Python to automate IaC even further.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，即便如此，这在可用资源及其使用方式方面仍然略显不足。它适用于更传统的系统，但对于需要非常规架构的系统，像Terraform这样的工具更为合适。接下来，我们将讨论如何使用Terraform与Python结合，进一步实现IaC自动化。
- en: Automate the automation of IaC with Python
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python自动化IaC的自动化
- en: IaC has grown in popularity and in ways that people have never imagined. The
    most popular IaC framework currently is arguably Terraform. Terraform doesn’t
    just work on servers and more solid resources of the like, it works on APIs and
    looser infrastructure as well. Basically, anything that you can use in any major
    cloud, there is a Terraform API to use it. Terraform is the ultimate automation
    tool in many ways, and it can be further automated with the help of Python.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施即代码（IaC）已经变得越来越受欢迎，且以人们从未想象过的方式发展。当前最流行的IaC框架无疑是Terraform。Terraform不仅适用于服务器及其他更为稳定的资源，它同样适用于API和更松散的基础设施。基本上，任何可以在主要云平台中使用的资源，都有一个Terraform
    API可以使用。Terraform在许多方面都是终极自动化工具，并且可以通过Python进一步实现自动化。
- en: Terraform is, of course, written in Go, which is great because Go is a very
    good complement to Python. One is good where the other lacks and vice versa. While
    Go is good for singular implementations, Python is great at multiplying the effectiveness
    of that implementation. Basically, Go is the bullet and Python is the gun, and
    that is an effective combination. We will use this combination to great effect
    in this section.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform当然是用Go语言编写的，这非常好，因为Go是Python的一个非常好的补充。两者各有所长，一个弥补另一个的不足。Go适合单一实现，而Python在扩大该实现的有效性方面非常出色。基本上，Go是子弹，Python是枪，这是一个有效的组合。我们将在本节中充分利用这一组合。
- en: 'HashiCorp, the creator of Terraform, has created APIs that allow Python to
    interact with Terraform. These APIs are packaged in the `cdktf` library published
    by HashiCorp in a number of languages. Let’s take a look at the steps we need
    to perform to install and run the `cdktf` library:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform的创建者HashiCorp已经创建了允许Python与Terraform交互的API。这些API被打包在`cdktf`库中，并由HashiCorp在多种语言中发布。让我们看看安装和运行`cdktf`库所需的步骤：
- en: 'You need to first have NPM, NodeJS, and the Terraform CLI installed to install
    `cdktf-cli`:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你首先需要安装NPM、NodeJS和Terraform CLI，才能安装`cdktf-cli`：
- en: '[PRE17]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, you can use the `cdktf` to create a Python environment:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你可以使用`cdktf`创建一个Python环境：
- en: '[PRE18]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This will create a new Python template, which can be used then to run a Terraform
    template. In the template, you can find the `main.py` file in the `stacks` folder.
    In the folder, you can add this script:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将创建一个新的 Python 模板，之后可以用来运行 Terraform 模板。在模板中，你可以在`stacks`文件夹中找到`main.py`文件。在该文件夹中，你可以添加以下脚本：
- en: '[PRE19]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This code is simple enough to understand; it works exactly like an IaC module
    would, creating an S3 bucket with the name given at the time of your execution
    of the program. To execute the program, run the following command:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这段代码足够简单，易于理解；它的工作方式与 IaC 模块完全相同，在你执行程序时创建一个名称为指定名称的 S3 存储桶。要执行程序，运行以下命令：
- en: '[PRE20]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you want to revert the program and simply delete the resource that you created,
    you can just run the following command:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想撤销程序并仅删除你创建的资源，你只需运行以下命令：
- en: '[PRE21]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: That is basically all you need to do. The AWS, Google Cloud, and Azure modules
    for Terraform are usually included with the installation, as are the equivalent
    Python libraries when they are installed using `cdktf`. You can find the documentation
    for all of these libraries and what they do on HashiCorp’s GitHub and on its website.
    HashiCorp is very clear about the things that its products can do, even if it
    is sometimes difficult to collate all of that information in one place. So, using
    these references, you can practically create any resource you want; it is all
    up to your imagination.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上就是你需要做的所有事情。Terraform 的 AWS、Google Cloud 和 Azure 模块通常会随着安装一起提供，使用`cdktf`安装时，相应的
    Python 库也会包含在内。你可以在 HashiCorp 的 GitHub 和官方网站上找到这些库的文档以及它们的功能。HashiCorp 对其产品能做什么非常明确，尽管有时将所有这些信息整理到一个地方可能会有些困难。所以，通过这些参考资料，你几乎可以创建任何你想要的资源；一切都取决于你的想象力。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: So, that is the chapter, one that was a little more serious than the ones you
    might have been used to, but this is serious business. IaC is a concept to be
    taken seriously; it is very powerful and can be the solution to a lot of problems
    that require the application of DevOps principles.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这就是本章的内容，虽然比你可能习惯的章节要严肃一些，但这确实是严肃的事情。IaC 是一个值得认真对待的概念；它非常强大，可以解决许多需要应用 DevOps
    原则的问题。
- en: We initially looked at a very basic application of IaC using Python in SaltStack.
    It was quite rudimentary but very effective for simple projects. We closed it
    out by diving into the guts of SaltStack and understanding the logic behind its
    Python modules.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最初查看了使用 Python 在 SaltStack 中应用 IaC 的非常基础的案例。它虽然相当基础，但对于简单项目来说非常有效。我们通过深入了解
    SaltStack 的内部原理，理解了它 Python 模块背后的逻辑。
- en: After that, we looked at the slightly more flexible Ansible and discovered all
    of the conveniences that it provides as well as the customization possibilities.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们查看了稍微灵活一些的 Ansible，发现了它所提供的所有便利功能以及自定义的可能性。
- en: Lastly, we looked at Terraform and `cdktf`, which is used with Python Terraform
    and resource modules in order to perform Terraform’s resource creation.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看了 Terraform 和`cdktf`，它与 Python Terraform 及资源模块一起使用，用于执行 Terraform 的资源创建。
- en: All of this has hopefully helped you gain a new perspective on IaC and allowed
    you to understand its importance in DevOps and its integration with Python.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些内容希望能够帮助你获得一个新的视角，了解 IaC，并理解它在 DevOps 中的重要性以及它与 Python 的集成。
- en: In conclusion, IaC is powerful, vast, and useful to learn. In the next chapter,
    we will take all that you have learned here and in the previous chapters, and
    raise it all to a higher level.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，IaC 是强大的、广阔的，且值得学习。在下一章中，我们将把你在这里和前几章学到的所有内容提升到一个更高的层次。
