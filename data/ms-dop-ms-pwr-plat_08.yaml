- en: <st c="0">8</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">8</st>
- en: <st c="2">Demonstrating ALM and DevOps Implementation</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">展示 ALM 和 DevOps 实现</st>
- en: <st c="45">In this chapter, we will go through a hands-on exercise involving
    a real-world example, with code snippets and step-by-step instructions.</st> <st
    c="184">We will use one</st> <st c="199">of the templates available in the</st>
    **<st c="234">Power Platform Enterprise template</st>** <st c="268">to demonstrate
    the end-to-end scenario of DevOps processes.</st> <st c="329">This template is
    the</st> **<st c="350">Employee Kudos template</st>**<st c="373">, which we can
    use to praise</st> <st c="401">others for their outstanding achievements.</st>
    <st c="445">The available solution</st> <st c="467">provides a model-driven application
    (</st>**<st c="505">Kudos Administration App</st>**<st c="530">) to administer
    the kudos, opt out users, and create badges that can be used in the canvas app
    to fill out the kudos.</st> <st c="649">This latter canvas app, called the</st>
    **<st c="684">Kudos App</st>** <st c="693">in the solution, provides a user interface</st>
    <st c="736">for users in an organization.</st> <st c="767">Since the Kudos</st>
    <st c="782">solution depends on the</st> **<st c="807">Employee Experience Base</st>**
    <st c="831">solution, we will learn how we can manage two solutions</st> <st c="887">simultaneously
    by introducing multiple</st> **<st c="927">GitHub workflows</st>** <st c="943">in
    the release train and leveraging the deployment package.</st> <st c="1004">We
    will define the branch strategy for this application, and we will delve into the
    different GitHub workflows with</st> **<st c="1120">DevSecOps</st>** <st c="1129">tasks
    to manage the development</st> <st c="1161">of these solutions.</st> <st c="1182">We
    will introduce backlog management and use the branch policies to protect our main
    branch from accidental changes.</st> <st c="1299">We will create tests for the
    Kudos app and introduce</st> **<st c="1352">monitoring</st>** <st c="1362">to
    our app and flows.</st> <st c="1385">Finally, we will learn about</st> **<st c="1414">feature
    flags</st>** <st c="1427">and how we can use them to enable</st> <st c="1461">or
    disable certain features in</st> <st c="1493">our applications.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="45">在本章中，我们将通过一个动手练习，使用真实的例子，结合代码片段和逐步说明。</st> <st c="184">我们将使用</st>
    <st c="199">Power Platform 企业模板</st> **<st c="234">Power Platform 企业模板</st>**
    <st c="268">来演示 DevOps 流程的端到端场景。</st> <st c="329">该模板是</st> **<st c="350">员工奖励模板</st>**<st
    c="373">，我们可以用它来表扬</st> <st c="401">他人出色的成就。</st> <st c="445">可用的解决方案</st> <st
    c="467">提供了一个基于模型的应用程序（</st>**<st c="505">Kudos 管理应用</st>**<st c="530">），用于管理奖励、选择退出用户并创建徽章，这些徽章可以在画布应用中使用，填写奖励内容。</st>
    <st c="649">这个画布应用，称为</st> **<st c="684">Kudos 应用</st>** <st c="693">在解决方案中，提供了一个用户界面</st>
    <st c="736">供组织中的用户使用。</st> <st c="767">由于 Kudos</st> <st c="782">解决方案依赖于</st>
    **<st c="807">员工体验基础解决方案</st>** <st c="831">，我们将学习如何通过引入多个</st> **<st c="927">GitHub
    工作流</st>** <st c="943">在发布火车中同时管理两个解决方案，并利用部署包。</st> <st c="1004">我们将为此应用定义分支策略，并深入了解不同的
    GitHub 工作流，以及</st> **<st c="1120">DevSecOps</st>** <st c="1129">任务来管理这些解决方案的开发。</st>
    <st c="1161">我们将介绍待办事项管理，并使用分支策略来保护我们的主分支，避免意外更改。</st> <st c="1299">我们将为 Kudos
    应用创建测试，并引入</st> **<st c="1352">监控</st>** <st c="1362">到我们的应用和流程中。</st> <st c="1385">最后，我们将学习</st>
    **<st c="1414">功能开关</st>** <st c="1427">以及如何使用它们启用或禁用</st> <st c="1461">我们应用中的某些功能。</st>
- en: <st c="1510">In this chapter, we are going to cover the following</st> <st c="1564">main
    topics:</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1510">在本章中，我们将涵盖以下</st> <st c="1564">主要主题：</st>
- en: <st c="1576">Exercise – repository management and branch strategies for</st>
    <st c="1636">the applications</st>
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1576">练习 – 存储库管理和分支策略</st> <st c="1636">对于应用程序</st>
- en: <st c="1652">Exercise – building CD pipelines and a</st> <st c="1692">release
    train</st>
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1652">练习 – 构建 CD 流水线和一个</st> <st c="1692">发布火车</st>
- en: <st c="1705">Exercise – backlog management</st> <st c="1736">in GitHub</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1705">练习 – 待办事项管理</st> <st c="1736">在 GitHub 中</st>
- en: <st c="1745">Exercise –</st> <st c="1757">testing solutions</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1745">练习 –</st> <st c="1757">测试解决方案</st>
- en: <st c="1774">Exercise –</st> <st c="1786">monitoring applications</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1774">练习 –</st> <st c="1786">监控应用程序</st>
- en: <st c="1809">Exercise – introducing</st> <st c="1833">feature flags</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1809">练习 – 引入</st> <st c="1833">功能开关</st>
- en: <st c="1846">Technical requirements</st>
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1846">技术要求</st>
- en: <st c="1869">To delve into the details of DevSecOps approaches and tools, we
    need to have</st> <st c="1947">the following:</st>
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1869">要深入了解 DevSecOps 方法和工具，我们需要具备以下内容：</st>
- en: '**<st c="1961">A Microsoft Azure subscription</st>**<st c="1992">: We can sign
    up for a Microsoft Azure subscription through</st> [<st c="2053">https://azure.microsoft.com/en-us/free</st>](https://azure.microsoft.com/en-us/free)<st
    c="2091">. If we have a Visual Studio subscription or are Microsoft Certified
    Trainers, we can enroll in an MSDN-based subscription with a 150 USD</st> <st
    c="2229">monthly credit.</st>'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="1961">Microsoft Azure 订阅</st>**<st c="1992">：我们可以通过</st> [<st c="2053">https://azure.microsoft.com/en-us/free</st>](https://azure.microsoft.com/en-us/free)<st
    c="2091">注册 Microsoft Azure 订阅。如果我们拥有 Visual Studio 订阅或是 Microsoft 认证培训师，可以通过
    MSDN 订阅加入，每月获得 150 美元的信用额度。</st>'
- en: '**<st c="2244">A Power Platform subscription</st>**<st c="2274">: We can sign
    up for a Power Apps Developer Plan (</st>[<st c="2325">https://www.microsoft.com/en-us/power-platform/products/power-apps/free</st>](https://www.microsoft.com/en-us/power-platform/products/power-apps/free)<st
    c="2397">), if we already have a Microsoft Entra ID work account, or we can join
    the Microsoft 365 Developer</st> <st c="2498">Program (</st>[<st c="2507">https://developer.microsoft.com/en-us/microsoft-365/dev-program</st>](https://developer.microsoft.com/en-us/microsoft-365/dev-program)<st
    c="2571">).</st>'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="2244">Power Platform 订阅</st>**<st c="2274">：如果我们已经拥有 Microsoft Entra
    ID 工作账户，可以注册 Power Apps 开发者计划（</st>[<st c="2325">https://www.microsoft.com/en-us/power-platform/products/power-apps/free</st>](https://www.microsoft.com/en-us/power-platform/products/power-apps/free)<st
    c="2397">），或者可以加入 Microsoft 365 开发者计划（</st>[<st c="2507">https://developer.microsoft.com/en-us/microsoft-365/dev-program</st>](https://developer.microsoft.com/en-us/microsoft-365/dev-program)<st
    c="2571">）。</st>'
- en: '**<st c="2574">A GitHub handle and a public</st>** **<st c="2604">repository</st>**<st
    c="2614">: (</st>[<st c="2618">https://github.com/signup</st>](https://github.com/signup)<st
    c="2644">)</st>'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="2574">GitHub 账户和公共</st>** **<st c="2604">仓库</st>**<st c="2614">：（</st>[<st
    c="2618">https://github.com/signup</st>](https://github.com/signup)<st c="2644">）</st>'
- en: '**<st c="2646">GitHub Advanced Security features</st>** <st c="2679">are available
    for free for public</st> <st c="2714">repositories:</st> [<st c="2728">https://docs.github.com/en/get-started/learning-about-github/about-github-advanced-security#about-advanced-security-features</st>](https://docs.github.com/en/get-started/learning-about-github/about-github-advanced-security#about-advanced-security-features)<st
    c="2852">.</st>'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="2646">GitHub 高级安全功能</st>** <st c="2679">对于公共</st> <st c="2714">仓库免费提供：</st>
    [<st c="2728">https://docs.github.com/en/get-started/learning-about-github/about-github-advanced-security#about-advanced-security-features</st>](https://docs.github.com/en/get-started/learning-about-github/about-github-advanced-security#about-advanced-security-features)<st
    c="2852">。</st>'
- en: '**<st c="2853">Samples and walkthroughs</st>** <st c="2878">are discussed in
    this chapter and are located</st> <st c="2925">at</st> [<st c="2928">https://github.com/PacktPublishing/Mastering-DevOps-on-Microsoft-Power-Platform/tree/main/Chapter08</st>](https://github.com/PacktPublishing/Mastering-DevOps-on-Microsoft-Power-Platform/tree/main/Chapter08)<st
    c="3027">.</st>'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="2853">示例和操作指南</st>** <st c="2878">将在本章中讨论，并位于</st> <st c="2925">以下位置：</st>
    [<st c="2928">https://github.com/PacktPublishing/Mastering-DevOps-on-Microsoft-Power-Platform/tree/main/Chapter08</st>](https://github.com/PacktPublishing/Mastering-DevOps-on-Microsoft-Power-Platform/tree/main/Chapter08)<st
    c="3027">。</st>'
- en: '**<st c="3028">The Azure CLI</st>**<st c="3042">: We can install the Azure
    CLI directly on our machine by following the installation guide (</st>[<st c="3135">https://learn.microsoft.com/en-us/cli/azure/install-azure-cli#install</st>](https://learn.microsoft.com/en-us/cli/azure/install-azure-cli#install)<st
    c="3205">), or we can use</st> **<st c="3223">Azure Cloud Shell</st>** <st c="3240">from
    the Azure portal to get an interactive Bash or</st> <st c="3293">PowerShell session.</st>'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="3028">Azure CLI</st>**<st c="3042">：我们可以通过安装指南直接在机器上安装 Azure CLI（</st>[<st
    c="3135">https://learn.microsoft.com/en-us/cli/azure/install-azure-cli#install</st>](https://learn.microsoft.com/en-us/cli/azure/install-azure-cli#install)<st
    c="3205">），或者可以通过 Azure 门户使用</st> **<st c="3223">Azure Cloud Shell</st>** <st
    c="3240">获取交互式 Bash 或</st> <st c="3293">PowerShell 会话。</st>'
- en: '**<st c="3312">GitHub Codespaces</st>**<st c="3330">: GitHub provides 60-hour
    computing resources each month to individuals for free.</st> <st c="3413">To create
    and start GitHub Codespaces, it is enough to have a</st> **<st c="3475">GitHub
    handle</st>**<st c="3488">.</st>'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="3312">GitHub Codespaces</st>**<st c="3330">：GitHub 每月为个人提供 60 小时的计算资源，免费使用。</st>
    <st c="3413">要创建并启动 GitHub Codespaces，只需拥有一个</st> **<st c="3475">GitHub 账户</st>**<st
    c="3488">。</st>'
- en: '`<st c="3683">.devcontainer/devcontaine</st><st c="3708">r.json</st>`<st c="3715">.</st>'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="3683">.devcontainer/devcontaine</st><st c="3708">r.json</st>`<st c="3715">。</st>'
- en: <st c="3716">Exercise – repository management and branch strategies for the
    applications</st>
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="3716">练习 – 应用程序的仓库管理和分支策略</st>
- en: <st c="3792">Before we delve into the hands-on</st> <st c="3826">exercises,
    it is worth getting</st> <st c="3857">familiar with the Kudos app of the Power
    Platform Enterprise template.</st> <st c="3929">We can learn more about this solution
    by visiting the official documentation</st> <st c="4005">of the enterprise template:</st>
    [<st c="4034">https://learn.microsoft.com/en-us/power-platform/enterprise-templates/hr/employee-kudos/install-and-set-up</st>](https://learn.microsoft.com/en-us/power-platform/enterprise-templates/hr/employee-kudos/install-and-set-up)<st
    c="4140">. The source code of this solution we have prepared in the repository
    provided with the book contains the additional extensions and workflows we will
    use throughout</st> <st c="4305">the exercises.</st>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3792">在我们深入实际操作之前，</st> <st c="3826">值得先了解一下 Power Platform 企业模板中的 Kudos
    应用。</st> <st c="3857">我们可以通过访问企业模板的官方文档</st> <st c="3929">了解更多关于该解决方案的信息：</st>
    [<st c="4034">https://learn.microsoft.com/en-us/power-platform/enterprise-templates/hr/employee-kudos/install-and-set-up</st>](https://learn.microsoft.com/en-us/power-platform/enterprise-templates/hr/employee-kudos/install-and-set-up)<st
    c="4140">。我们为本书提供的仓库中包含了此解决方案的源代码，包含了我们将在整个练习过程中使用的额外扩展和工作流。</st>
- en: <st c="4319">In this exercise, we</st> <st c="4340">are going to create a public</st>
    **<st c="4370">GitHub repository</st>** <st c="4387">that will host our applications
    available in the chapter’s own GitHub repository, and we are going</st> <st c="4486">to
    set up our branch strategy and create</st> <st c="4527">the prerequisites to be
    able to deploy the Kudos app in our Power Platform production environment.</st>
    <st c="4627">We will take the</st> <st c="4644">following steps:</st>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4319">在本练习中，我们</st> <st c="4340">将创建一个公共的</st> **<st c="4370">GitHub
    仓库</st>** <st c="4387">，该仓库将托管本章的应用程序，并且我们将</st> <st c="4486">设置我们的分支策略并创建</st>
    <st c="4527">部署 Kudos 应用到 Power Platform 生产环境的前置条件。</st> <st c="4627">我们将采取以下步骤：</st>
- en: '| **<st c="4660">Step</st>** | **<st c="4665">Description</st>** |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="4660">步骤</st>** | **<st c="4665">描述</st>** |'
- en: '| <st c="4677">1.</st> | <st c="4680">Clone the sample repository in our own
    GitHub</st> <st c="4727">public repository.</st> |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| <st c="4677">1.</st> | <st c="4680">克隆示例仓库到我们自己的 GitHub</st> <st c="4727">公共仓库中。</st>
    |'
- en: '| <st c="4745">2.</st> | <st c="4748">Create our Power Platform production
    environment that will host the Kudos app and the service principal that we will
    use in GitHub workflows.</st> <st c="4891">The credentials of the service principal
    are stored in</st> <st c="4946">GitHub secrets.</st> |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| <st c="4745">2.</st> | <st c="4748">创建我们的 Power Platform 生产环境，该环境将托管 Kudos
    应用以及我们将在 GitHub 工作流中使用的服务主体。</st> <st c="4891">该服务主体的凭证存储在</st> <st c="4946">GitHub
    secrets 中。</st> |'
- en: '| <st c="4961">3.</st> | <st c="4964">Create a Microsoft Entra ID Group (Azure
    AD group) that will contain the users who can use</st> <st c="5056">the application.</st>
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| <st c="4961">3.</st> | <st c="4964">创建一个 Microsoft Entra ID 组（Azure AD 组），该组将包含可以使用</st>
    <st c="5056">该应用程序的用户。</st> |'
- en: '| <st c="5072">4.</st> | <st c="5075">Create the connections of the Kudos app
    in the</st> <st c="5123">production environment.</st> |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| <st c="5072">4.</st> | <st c="5075">在生产环境中创建 Kudos 应用的连接。</st> |'
- en: '| <st c="5146">5.</st> | <st c="5149">Create the deployment setting file to
    manage the connection references in the CI/CD workflows, and execute the</st>
    `<st c="5261">Release to Production</st>` <st c="5282">flow to deploy Kudos app
    in the</st> <st c="5315">production environment.</st> |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| <st c="5146">5.</st> | <st c="5149">创建部署设置文件，以管理 CI/CD 工作流中的连接引用，并执行`Release
    to Production` <st c="5282">流程，将 Kudos 应用部署到</st> <st c="5315">生产环境中。</st> |'
- en: '| <st c="5338">6.</st> | <st c="5341">Define our branch strategy based on the</st>
    <st c="5382">GitHub flow.</st> |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| <st c="5338">6.</st> | <st c="5341">基于 GitHub flow 定义我们的分支策略。</st> <st c="5382">|'
- en: '| <st c="5394">7.</st> | <st c="5397">Create our first branch protection rule
    to enforce pull requests</st> <st c="5463">on main.</st> |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| <st c="5394">7.</st> | <st c="5397">创建我们的第一个分支保护规则，以强制对主分支的拉取请求</st> <st
    c="5463">进行保护。</st> |'
- en: <st c="5471">Table 8.1 – Steps for the exercise</st>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5471">表 8.1 – 练习步骤</st>
- en: <st c="5506">To simplify the</st> <st c="5522">script executions</st> <st c="5540">in
    the</st> <st c="5547">upcoming steps</st> <st c="5562">and sections, we will use</st>
    **<st c="5589">GitHub Codespaces</st>**<st c="5606">. GitHub Codespaces provides
    computing resources</st> <st c="5654">and developer containers that are hosted
    in the GitHub cloud.</st> <st c="5717">We have prepared such a container with
    various tools, such</st> <st c="5775">as the GitHub CLI,</st> **<st c="5795">Git
    CLI</st>**<st c="5802">,</st> **<st c="5804">PAC CLI</st>**<st c="5811">, and
    Azure CLI, which are already</st> <st c="5845">pre-installed on it.</st> <st c="5867">Its
    configuration is located directly</st> <st c="5905">at</st> [<st c="5908">https://github.com/PacktPublishing/Mastering-DevOps-on-Microsoft-Power-Platform/blob/main/.devcontainer/devcontainer.json</st>](https://github.com/PacktPublishing/Mastering-DevOps-on-Microsoft-Power-Platform/blob/main/.devcontainer/devcontainer.json)<st
    c="6029">.</st>
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5506">为了简化接下来的</st> <st c="5522">脚本执行</st> <st c="5540">和</st> <st c="5547">后续步骤</st>
    <st c="5562">及章节的操作，我们将使用</st> **<st c="5589">GitHub Codespaces</st>**<st c="5606">。GitHub
    Codespaces 提供的计算资源</st> <st c="5654">和开发容器托管在 GitHub 云端。</st> <st c="5717">我们已经准备了一个包含各种工具的容器，例如
    GitHub CLI、</st> **<st c="5795">Git CLI</st>**<st c="5802">、</st> **<st c="5804">PAC
    CLI</st>**<st c="5811">以及 Azure CLI，这些工具已预装在其中。</st> <st c="5845">其配置文件位于以下位置：</st>
    <st c="5867">直接位于</st> [<st c="5908">https://github.com/PacktPublishing/Mastering-DevOps-on-Microsoft-Power-Platform/blob/main/.devcontainer/devcontainer.json</st>](https://github.com/PacktPublishing/Mastering-DevOps-on-Microsoft-Power-Platform/blob/main/.devcontainer/devcontainer.json)<st
    c="6029">。</st>
- en: <st c="6030">To start the container, we need to navigate to the book’s GitHub
    repository in the web browser (</st>[<st c="6127">https://github.com/PacktPublishing/Mastering-DevOps-on-Microsoft-Power-Platform</st>](https://github.com/PacktPublishing/Mastering-DevOps-on-Microsoft-Power-Platform)<st
    c="6207">) and click on the</st> **<st c="6227">Code</st>** <st c="6231">button
    and then the</st> **<st c="6252">Create codespace on main</st>** <st c="6276">button,
    as shown in the</st> <st c="6301">following figure:</st>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6030">要启动容器，我们需要在网页浏览器中导航至本书的 GitHub 仓库（</st>[<st c="6127">https://github.com/PacktPublishing/Mastering-DevOps-on-Microsoft-Power-Platform</st>](https://github.com/PacktPublishing/Mastering-DevOps-on-Microsoft-Power-Platform)<st
    c="6207">），然后点击</st> **<st c="6227">代码</st>** <st c="6231">按钮，再点击</st> **<st c="6252">在主分支上创建代码空间</st>**
    <st c="6276">按钮，如下图所示：</st>
- en: '![Figure 8.1 – Creating a codespace in GitHub](img/B22208_08_1.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – 在 GitHub 中创建代码空间](img/B22208_08_1.jpg)'
- en: <st c="7233">Figure 8.1 – Creating a codespace in GitHub</st>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7233">图 8.1 – 在 GitHub 中创建代码空间</st>
- en: <st c="7276">After clicking</st> <st c="7291">the button, the</st> `<st c="7308">devcontainer.json</st>`
    <st c="7325">file</st> <st c="7331">available under the</st> `<st c="7351">.devcontainer</st>`
    <st c="7364">folder is parsed, and</st> <st c="7386">based</st> <st c="7392">on
    that</st> <st c="7400">configuration, a new</st> **<st c="7422">Docker image</st>**
    <st c="7434">is created in the background.</st> <st c="7465">This image will run
    as a container, and in a new browser, Visual Studio Code will soon appear, having
    pre-installed the features described in the</st> <st c="7611">JSON file:</st>
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7276">点击按钮后，</st> <st c="7291">系统会解析</st> `<st c="7308">devcontainer.json</st>`
    <st c="7325">文件，</st> <st c="7331">该文件位于</st> `<st c="7351">.devcontainer</st>`
    <st c="7364">文件夹中，然后</st> <st c="7386">基于该配置，</st> <st c="7392">在后台创建一个新的</st>
    **<st c="7422">Docker 镜像</st>** <st c="7434">。</st> <st c="7465">该镜像将作为容器运行，并且在新的浏览器窗口中，Visual
    Studio Code 将很快启动，预装了在</st> <st c="7611">JSON 文件中描述的功能：</st>
- en: '![Figure 8.2 – A codespace in a browser](img/B22208_08_2.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – 浏览器中的代码空间](img/B22208_08_2.jpg)'
- en: <st c="8188">Figure 8.2 – A codespace in a browser</st>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8188">图 8.2 – 浏览器中的代码空间</st>
- en: <st c="8225">In the</st> <st c="8232">terminal</st> <st c="8242">window (usually</st>
    **<st c="8258">Bash</st>**<st c="8262">, but</st> **<st c="8268">PowerShell</st>**
    <st c="8278">is also available) on the screen, we</st> <st c="8315">will start
    the tasks to create our own</st> <st c="8354">repository, step</st> <st c="8372">by
    step:</st>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8225">在</st> <st c="8232">终端</st> <st c="8242">窗口（通常是</st> **<st c="8258">Bash</st>**<st
    c="8262">，但也可以使用</st> **<st c="8268">PowerShell</st>** <st c="8278">）中，我们</st>
    <st c="8315">将开始创建我们自己的</st> <st c="8354">代码库，按步骤进行：</st>
- en: '`<st c="8801">copilot suggest</st>` <st c="8816">or</st> `<st c="8820">copilot
    explain</st>` <st c="8835">parameters to interact with GitHub Copilot without
    switching context.</st> `<st c="8906">Gh copilot suggest</st>` <st c="8924">translates
    our natural language prompt to the correct GitHub CLI command with appropriate
    parameters, whereas</st> `<st c="9035">gh copilot explain</st>` <st c="9053">describes
    the command we are interested in by using natural language.</st> <st c="9124">We
    can use the following script to create a repository called</st> `<st c="9186">Kudos</st>`
    <st c="9191">in our own GitHub Enterprise organization, if available, or using
    our own GitHub handle after logging in (GitHub Codespaces provides, by default,
    limited access to GitHub</st> <st c="9363">administrative endpoints):</st>'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<st c="8801">copilot suggest</st>` <st c="8816">或</st> `<st c="8820">copilot
    explain</st>` <st c="8835">参数，用于在不切换上下文的情况下与 GitHub Copilot 进行交互。</st> `<st c="8906">Gh
    copilot suggest</st>` <st c="8924">将我们的自然语言提示转换为正确的 GitHub CLI 命令，并附带适当的参数，而</st>
    `<st c="9035">gh copilot explain</st>` <st c="9053">则用自然语言描述我们感兴趣的命令。</st> <st
    c="9124">我们可以使用以下脚本，在我们自己的 GitHub 企业组织中创建一个名为</st> `<st c="9186">Kudos</st>` <st
    c="9191">的仓库（如果可用），或者在登录后使用我们自己的 GitHub 账户（GitHub Codespaces 默认提供有限访问 GitHub</st>
    <st c="9363">管理端点的权限）：</st>'
- en: '[PRE0]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="10110">After cloning, we can copy the files and folder from</st> `<st
    c="10164">Chapter08</st>` <st c="10173">folder to our</st> `<st c="10188">Kudos</st>`
    <st c="10193">folder (the</st> <st c="10206">git repo):</st>
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="10110">克隆后，我们可以将</st> `<st c="10164">Chapter08</st>` <st c="10173">文件夹中的文件和文件夹复制到我们的</st>
    `<st c="10188">Kudos</st>` <st c="10193">文件夹中（即</st> <st c="10206">git 仓库）：</st>
- en: '[PRE1]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="10289">Then, we can use the following scripts to add, commit, and push
    the files to the</st> <st c="10371">new repository:</st>
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="10289">然后，我们可以使用以下脚本将文件添加、提交并推送到</st> <st c="10371">新仓库：</st>
- en: '[PRE2]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="10635">With</st> <st c="10640">that, we</st> <st c="10650">have everything
    in our new</st> <st c="10676">repository that we will use in</st> <st c="10707">our</st>
    <st c="10712">hands-on exercises:</st>
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="10635">这样，我们</st> <st c="10640">就拥有了新</st> <st c="10650">仓库中的一切，将在</st>
    <st c="10676">我们的</st> <st c="10707">动手操作练习中使用：</st>
- en: '![Figure 8.3 – Our own repository with the Kudos app](img/B22208_08_3.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – 我们自己的仓库与 Kudos 应用程序](img/B22208_08_3.jpg)'
- en: <st c="11338">Figure 8.3 – Our own repository with the Kudos app</st>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11338">图 8.3 – 我们自己的仓库与 Kudos 应用程序</st>
- en: <st c="11388">In our new repository, there</st> <st c="11417">is also a</st>
    `<st c="11428">.devcontainer</st>` <st c="11441">folder containing a GitHub Codespace
    definition.</st> <st c="11491">Here, let’s create our own codespace on the main
    branch and authenticate against GitHub once again to get write access to</st>
    <st c="11613">the repository:</st>
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11388">在我们的新仓库中，</st> <st c="11417">也有一个</st> `<st c="11428">.devcontainer</st>`
    <st c="11441">文件夹，里面包含 GitHub Codespace 定义。</st> <st c="11491">在这里，让我们在主分支上创建自己的
    codespace，并再次通过 GitHub 进行身份验证，以便获得对</st> <st c="11613">仓库的写权限：</st>
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="11678">In addition, if</st> <st c="11695">we have done every preparation</st>
    <st c="11725">step right and if we open up the</st> **<st c="11759">Actions</st>**
    <st c="11766">tab</st> <st c="11770">now, we should see the available GitHub workflows,
    as shown in the</st> <st c="11838">following figure:</st>
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11678">此外，如果</st> <st c="11695">我们已经正确完成了每个准备步骤，并且现在打开</st> **<st c="11759">Actions</st>**
    <st c="11766">标签</st> <st c="11770">，我们应该看到可用的 GitHub 工作流，如下图所示：</st>
- en: '![Figure 8.4 – GitHub workflows for the Kudos app](img/B22208_08_4.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4 – Kudos 应用程序的 GitHub 工作流](img/B22208_08_4.jpg)'
- en: <st c="12492">Figure 8.4 – GitHub workflows for the Kudos app</st>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12492">图 8.4 – Kudos 应用程序的 GitHub 工作流</st>
- en: <st c="12539">We will use these workflows soon to deploy our Kudos app to a
    Power Platform</st> <st c="12617">production environment.</st>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12539">我们将很快使用这些工作流，将我们的 Kudos 应用程序部署到 Power Platform</st> <st c="12617">生产环境中。</st>
- en: '`<st c="13033">pac admin create</st>` <st c="13049">command, whereas to create
    a service</st> <st c="13086">principal, we apply the</st> `<st c="13111">pac admin
    create-service-principal</st>` <st c="13145">command.</st> <st c="13155">So, let’s
    create the production environment for our Kudos application, using an interactive
    login to our Power Platform tenant in GitHub Codespaces</st> <st c="13303">or
    locally:</st>'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<st c="13033">pac admin create</st>` <st c="13049">命令，而创建服务主体时，我们应用</st> `<st
    c="13111">pac admin create-service-principal</st>` <st c="13145">命令。</st> <st
    c="13155">所以，让我们使用交互式登录在 GitHub Codespaces</st> <st c="13303">或本地创建我们的 Kudos 应用程序的生产环境：</st>'
- en: '[PRE4]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**<st c="14974">Create an AAD group</st>**<st c="14994">: If we use the service
    principal to deploy a solution to our target environment, then the applications
    within the solution are owned by the service principal.</st> <st c="15155">To
    give others access to the applications, we need</st> <st c="15205">to create a</st>
    **<st c="15218">Microsoft Entra ID security group</st>** <st c="15251">(which
    we learned how to do in</st> [*<st c="15283">Chapter 7</st>*](B22208_07.xhtml#_idTextAnchor115)<st
    c="15292">).</st> <st c="15296">We need to be assigned the</st> *<st c="15323">Groups
    Administrator</st>* <st c="15343">Microsoft Entra built-in role to manage group
    creation and member assignment.</st> <st c="15422">Let’s execute the following</st>
    <st c="15449">script to create a Microsoft Entra</st> <st c="15485">ID group:</st>'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**<st c="14974">创建 AAD 组</st>**<st c="14994">：如果我们使用服务主体将解决方案部署到目标环境，那么解决方案中的应用将归服务主体所有。</st>
    <st c="15155">为了让其他人访问这些应用，我们需要</st> <st c="15205">创建一个</st> **<st c="15218">Microsoft
    Entra ID 安全组</st>** <st c="15251">（我们在</st> [*<st c="15283">第7章</st>*](B22208_07.xhtml#_idTextAnchor115)<st
    c="15292">中学习了如何操作）。</st> <st c="15296">我们需要被分配</st> *<st c="15323">组管理员</st>*
    <st c="15343">Microsoft Entra 内置角色，才能管理组的创建和成员分配。</st> <st c="15422">让我们执行以下</st>
    <st c="15449">脚本来创建 Microsoft Entra</st> <st c="15485">ID 组：</st>'
- en: '[PRE5]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**<st c="16422">Prepare the Power Platform production environment</st>**<st
    c="16472">: The Kudos app contains four Power Automate cloud flows and Power Apps
    canvas apps that use connection references and their corresponding connections,
    created for</st> *<st c="16637">Dataverse</st>*<st c="16646">,</st> *<st c="16648">Office
    365 Outlook</st>*<st c="16666">, and</st> *<st c="16672">Office 365 Users</st>*
    <st c="16688">connectors.</st> <st c="16701">The</st> **<st c="16705">connection
    references</st>** <st c="16726">are used to make the connections</st> <st c="16759">adjustable
    in other environments.</st> <st c="16794">The</st> **<st c="16798">connectors</st>**
    <st c="16808">are the definitions</st> <st c="16828">of the</st> <st c="16836">connections;
    like classes in</st> **<st c="16865">object-oriented programming</st>** <st c="16892">(</st>**<st
    c="16894">OOP</st>**<st c="16897">), they are</st> **<st c="16910">OpenAPI-based</st>**
    **<st c="16923">REST API</st>** <st c="16932">specifications that</st> <st c="16952">are
    instantiated as</st> **<st c="16973">connections</st>** <st c="16984">(i.e., objects
    in OOP) in the environment.</st> <st c="17028">When we use solutions to create
    our flows, apps, and other Power Platform assets, then every time we initiate
    a new connection in a flow or an app, a</st> **<st c="17178">connection reference</st>**
    <st c="17198">is automatically created in the solution.</st> <st c="17241">If
    we work outside of the solution and create a flow under</st> **<st c="17300">My
    flows</st>**<st c="17308">, then direct connections are created instead of connection
    references.</st> <st c="17380">However, a Dataverse connection can be created
    by the PAC CLI on behalf of a service principal in our production environment
    with the</st> <st c="17514">following script:</st>'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**<st c="16422">准备 Power Platform 生产环境</st>**<st c="16472">：Kudos 应用程序包含四个
    Power Automate 云流和 Power Apps 画布应用，这些应用使用连接引用及其对应的连接，已为</st> *<st c="16637">Dataverse</st>*<st
    c="16646">、</st> *<st c="16648">Office 365 Outlook</st>*<st c="16666"> 和 </st>
    *<st c="16672">Office 365 Users</st>* <st c="16688">连接器创建。</st> <st c="16701">这些</st>
    **<st c="16705">连接引用</st>** <st c="16726">用于在其他环境中使连接</st> <st c="16759">可调整。</st>
    <st c="16794">这些</st> **<st c="16798">连接器</st>** <st c="16808">是连接的定义；就像</st>
    **<st c="16865">面向对象编程</st>** <st c="16892">（</st>**<st c="16894">OOP</st>**<st
    c="16897">）中的类一样，它们是基于</st> **<st c="16910">OpenAPI</st>** **<st c="16923">REST
    API</st>** <st c="16932">规范，</st> <st c="16952">并在环境中实例化为</st> **<st c="16973">连接</st>**
    <st c="16984">（即面向对象编程中的对象）。</st> <st c="17028">当我们使用解决方案创建流、应用及其他 Power Platform
    资产时，每次在流或应用中启动新的连接时，都会在解决方案中自动创建一个</st> **<st c="17178">连接引用</st>** <st c="17198">。</st>
    <st c="17241">如果我们在解决方案外工作并在</st> **<st c="17300">我的流</st>**<st c="17308">下创建流，则会创建直接连接，而不是连接引用。</st>
    <st c="17380">然而，PAC CLI 可以代表服务主体在我们的生产环境中创建 Dataverse 连接，使用以下脚本：</st>'
- en: '[PRE6]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <st c="17621">The</st> <st c="17626">Office 365 Outlook and Office 365 Users</st>
    <st c="17665">connectors require service accounts</st> <st c="17702">and real
    user accounts, not service principals, to authenticate in Outlook and Office 365
    APIs.</st> <st c="17798">We cannot assign O365 or M365 licenses to service principals.</st>
    <st c="17860">That’s why we need to create those</st> <st c="17895">connections
    in the target environment before deploying our solutions.</st> <st c="17965">We
    can create</st> <st c="17978">these connections in the</st> **<st c="18004">PowerApps
    maker portal</st>** <st c="18026">under the</st> **<st c="18037">Connections</st>**
    <st c="18048">blade by clicking the</st> **<st c="18071">+ New connection</st>**
    <st c="18087">button, as shown in the</st> <st c="18112">following figure:</st>
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="17621">Office 365 Outlook 和 Office 365 用户</st> <st c="17626">连接器需要服务账户</st>
    <st c="17665">和真实用户账户，而不是服务主体，用于在 Outlook 和 Office 365 API 中进行身份验证。</st> <st c="17702">我们不能将
    O365 或 M365 许可证分配给服务主体。</st> <st c="17860">这就是为什么我们需要在部署解决方案之前，在目标环境中创建这些</st>
    <st c="17895">连接。</st> <st c="17965">我们可以在</st> <st c="17978">**PowerApps 制作门户**</st>
    <st c="18026">中的</st> **<st c="18037">连接</st>** <st c="18048">面板，通过点击</st> **<st
    c="18071">+ 新建连接</st>** <st c="18087">按钮，如下图所示：</st>
- en: '![Figure 8.5 – Connections for the Kudos application](img/B22208_08_5.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5 – Kudos 应用的连接](img/B22208_08_5.jpg)'
- en: <st c="18589">Figure 8.5 – Connections for the Kudos application</st>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18589">图 8.5 – Kudos 应用的连接</st>
- en: <st c="18639">After creating the three</st> <st c="18665">connections, we should
    see the same result as displayed in the figure.</st> <st c="18736">Finally, we
    need to share these connections with the service principal and the application
    user that was created earlier in</st> *<st c="18860">step 2</st>*<st c="18866">,
    by clicking the three dots and selecting the</st> **<st c="18913">Share</st>**
    <st c="18918">menu element</st> <st c="18932">in</st> **<st c="18935">Connections</st>**<st
    c="18946">:</st>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18639">创建三个</st> <st c="18665">连接后，我们应该看到与图中显示相同的结果。</st> <st c="18736">最后，我们需要将这些连接与服务主体和之前在</st>
    *<st c="18860">步骤 2</st>*<st c="18866">中创建的应用用户共享，通过点击三个点并选择</st> **<st c="18913">共享</st>**
    <st c="18918">菜单项</st> <st c="18932">在</st> **<st c="18935">连接</st>**<st c="18946">：</st>
- en: '![Figure 8.6 – Sharing the connection with the service principal](img/B22208_08_6.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6 – 与服务主体共享连接](img/B22208_08_6.jpg)'
- en: <st c="19269">Figure 8.6 – Sharing the connection with the service principal</st>
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19269">图 8.6 – 与服务主体共享连接</st>
- en: <st c="19331">Let’s</st> <st c="19338">use these connections in our deployment
    by</st> <st c="19380">introducing the deployment</st> <st c="19408">settings</st>
    <st c="19417">file.</st>
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19331">让我们通过</st> <st c="19338">引入部署</st> <st c="19380">设置文件</st> <st
    c="19408">来在部署中使用这些连接。</st>
- en: '**<st c="19422">Deployment settings file</st>**<st c="19447">: To use</st>
    <st c="19457">these connections during the deployment of the solution, we need
    to use a so-called</st> **<st c="19541">deployment setting file</st>**<st c="19564">.
    This file has been already</st> <st c="19592">generated for the solution with
    the</st> <st c="19629">following script:</st>'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**<st c="19422">部署设置文件</st>**<st c="19447">：为了在解决方案部署期间使用这些连接，我们需要使用一个所谓的</st>
    **<st c="19541">部署设置文件</st>**<st c="19564">。该文件已经为解决方案生成，脚本如下：</st>'
- en: '[PRE7]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: <st c="19715">This command takes out the</st> `<st c="19842">\src\mpa_Kudos\deploymentSettings.json</st>`
    <st c="19880">file in the</st> <st c="19893">GitHub repository:</st>
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="19715">此命令提取</st> `<st c="19842">\src\mpa_Kudos\deploymentSettings.json</st>`
    <st c="19880">文件，该文件位于</st> <st c="19893">GitHub 仓库中：</st>
- en: '[PRE8]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: <st c="20403">The missing</st> `<st c="20416">ConnectionId</st>` <st c="20428">values
    are set</st> <st c="20443">during</st> <st c="20450">the GitHub workflow runs.</st>
    <st c="20477">These values</st> <st c="20490">are the incoming parameters of our
    workflows.</st> <st c="20536">To get these values from our Power Platform environment,
    we</st> <st c="20595">need to click on the connections in the</st> **<st c="20636">Power
    Apps maker portal</st>** <st c="20659">and copy the IDs of the connections</st>
    <st c="20695">from the corresponding URLs.</st> <st c="20725">The following figure
    shows the connection ID of the Dataverse connection, highlighted in</st> <st c="20814">the
    URL:</st>
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="20403">缺失的</st> `<st c="20416">ConnectionId</st>` <st c="20428">值会在</st>
    <st c="20443">GitHub工作流运行时</st> <st c="20450">设置。</st> <st c="20477">这些值</st>
    <st c="20490">是我们工作流的输入参数。</st> <st c="20536">要从我们的Power Platform环境中获取这些值，我们</st>
    <st c="20595">需要点击Power Apps maker portal中的连接</st> **<st c="20636">Power Apps创建者门户</st>**
    <st c="20659">并复制连接的ID</st> <st c="20695">从相应的URL中。</st> <st c="20725">下图展示了Dataverse连接的连接ID，突出显示在</st>
    <st c="20814">URL中：</st>
- en: '![Figure 8.7 – The connection ID in the URL](img/B22208_08_7.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图8.7 – URL中的连接ID](img/B22208_08_7.jpg)'
- en: <st c="21339">Figure 8.7 – The connection ID in the URL</st>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21339">图8.7 – URL中的连接ID</st>
- en: <st c="21380">The first</st> <st c="21390">GUID in the URL is the environment
    ID, whereas</st> <st c="21438">the second GUID is the connection</st> <st c="21472">ID.</st>
    <st c="21476">The following example highlights</st> <st c="21509">the</st> <st
    c="21513">second GUID:</st>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21380">第一个</st> <st c="21390">GUID在URL中是环境ID，而</st> <st c="21438">第二个GUID是连接</st>
    <st c="21472">ID。</st> <st c="21476">以下示例突出了</st> <st c="21509">第二个GUID：</st>
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: export GH_DEBUG=<st c="28488">gh</st> command executed will print the detailed
    trace in the standard output.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: export GH_DEBUG=<st c="28488">gh</st> 命令执行将会在标准输出中打印详细的跟踪信息。
- en: '[PRE10]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: az login <st c="28712">--debug</st>
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: az login <st c="28712">--debug</st>
- en: '[PRE11]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: <st c="28967">%userprofile%\.dotnet\tools\.store\microsoft.powerapps.cli.tool\1.30.7\microsoft.powerapps.cli.tool\1.30.7\tools\net6.0\any\logs\pac-log.txt</st>
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="28967">%userprofile%\.dotnet\tools\.store\microsoft.powerapps.cli.tool\1.30.7\microsoft.powerapps.cli.tool\1.30.7\tools\net6.0\any\logs\pac-log.txt</st>
- en: '[PRE12]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: ref=${{ github.ref }}
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ref=${{ github.ref }}
- en: branch="${ref#refs/heads/dev/}"
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: branch="${ref#refs/heads/dev/}"
- en: echo "$branch"
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: echo "$branch"
- en: Workflow is executed on the dev branch so we need to get the environment URL
    from the dev branch <st c="37439">rawOutput=$(pac admin list --name $branch |
    tail -n 2)</st>
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作流在dev分支上执行，所以我们需要从dev分支获取环境URL <st c="37439">rawOutput=$(pac admin list --name
    $branch | tail -n 2)</st>
- en: '<st c="37493">environmentURL=$(echo $rawOutput | cut -d '' '' -f 3)</st> echo
    "Environment URL: $environmentURL"'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="37493">environmentURL=$(echo $rawOutput | cut -d '' '' -f 3)</st> echo
    "Environment URL: $environmentURL"'
- en: setting the env.devEnvironmentURL
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置env.devEnvironmentURL
- en: echo "devEnvironmentURL=$environmentURL" >> "$GITHUB_ENV"
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: echo "devEnvironmentURL=$environmentURL" >> "$GITHUB_ENV"
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '- shell: bash'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '- shell: bash'
- en: 'run: |'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 'run: |'
- en: '# Find all Solution.xml files in the solution directory and its subdirectories
    <st c="40321">find</st> ${{ inputs.source_folder }} -type f -name "Solution.xml"
    | while read -r file; do'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '# 在解决方案目录及其子目录中查找所有Solution.xml文件 <st c="40321">find</st> ${{ inputs.source_folder
    }} -type f -name "Solution.xml" | while read -r file; do'
- en: '# Replace the content of the <Version> tag with version number provided in
    the input <st c="40493">sed</st> -i ''s|<Version>.*</Version>|<Version>${{ inputs.version_number
    }}</Version>|g'' "$file"'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '# 使用输入的版本号替换<Version>标签中的内容 <st c="40493">sed</st> -i ''s|<Version>.*</Version>|<Version>${{
    inputs.version_number }}</Version>|g'' "$file"'
- en: done
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: done
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'set-version-number:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 'set-version-number:'
- en: 'needs: [ commit-to-dev-kudos ]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'needs: [ commit-to-dev-kudos ]'
- en: 'name: Set the version numbers to 0.0.0.0'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: 将版本号设置为0.0.0.0'
- en: 'uses: jovadker/ppdemo/.github/workflows/set-version-number.yml@main'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'uses: jovadker/ppdemo/.github/workflows/set-version-number.yml@main'
- en: 'with:'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'with:'
- en: 'source_folder: src/'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'source_folder: src/'
- en: 'version_number: "0.0.0.0"'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'version_number: "0.0.0.0"'
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: pac solution init --publisher-name developer --publisher-prefix dev
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: pac solution init --publisher-name developer --publisher-prefix dev
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: pac package init --outputDirectory DeploymentPackage
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: pac package init --outputDirectory DeploymentPackage
- en: cd .\DeploymentPackage <st c="47048">pac package add-solution --path <<PATHTORELEASE>>\mpa_EmployeeExperienceBase_managed.zip</st>
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: cd .\DeploymentPackage <st c="47048">pac package add-solution --path <<PATHTORELEASE>>\mpa_EmployeeExperienceBase_managed.zip</st>
- en: <st c="47252">pac package add-solution</st> command adds the managed solutions
    that were previously built by <st c="47342">MSBuild</st> to this <st c="47358">.csproj</st>
    file as references. After setting up the deployment package, we can use the <st
    c="47442">dotnet publish -c Release</st> command to build the release version
    of the deployment package.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="47252">pac package add-solution</st> 命令将之前由 <st c="47342">MSBuild</st>
    构建的托管解决方案作为引用添加到此 <st c="47358">.csproj</st> 文件中。设置部署包后，我们可以使用 <st c="47442">dotnet
    publish -c Release</st> 命令来构建部署包的发布版本。
- en: <st c="47531">The deployment package</st>
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="47531">部署包</st>
- en: <st c="47554">We have created a folder structure in the GitHub repository where
    the two solutions and the</st> `<st c="47647">DeploymentPackage</st>` <st c="47664">folder
    are placed under the</st> `<st c="47693">src</st>` <st c="47696">folder.</st>
    <st c="47705">The</st> `<st c="47709">csproj</st>` <st c="47715">file in the</st>
    `<st c="47728">DeploymentPackage</st>` <st c="47745">folder references the release
    builds of the two solutions, Employee Experience Base</st> <st c="47830">and Kudos.</st>
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="47554">我们在 GitHub 仓库中创建了一个文件夹结构，其中两个解决方案和</st> `<st c="47647">DeploymentPackage</st>`
    <st c="47664">文件夹位于</st> `<st c="47693">src</st>` <st c="47696">文件夹下。</st> <st
    c="47705">在</st> `<st c="47709">csproj</st>` <st c="47715">文件中，</st> `<st c="47728">DeploymentPackage</st>`
    <st c="47745">文件夹引用了两个解决方案的发布构建，分别是 Employee Experience Base</st> <st c="47830">和
    Kudos。</st>
- en: <st c="47840">Finally, we can create our GitHub release</st> <st c="47882">by
    using the</st> *<st c="47896">GitHub Release</st>* <st c="47910">workflow, located
    under</st> `<st c="47935">/.github/workflows/create-release.yml</st>`<st c="47972">.
    The high-level steps and the key takeaways of the workflow are</st> <st c="48037">as
    follows:</st>
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="47840">最后，我们可以通过使用</st> *<st c="47896">GitHub Release</st>* <st c="47910">工作流来创建我们的
    GitHub 发布，该工作流位于</st> `<st c="47935">/.github/workflows/create-release.yml</st>`<st
    c="47972">。该工作流的高层步骤和关键要点如下：</st>
- en: '`<st c="48376">/.github/actions/set-version-number-action/action.yml</st>`<st
    c="48429">, and it sets the version number of Power Platform solutions.</st> <st
    c="48491">As we saw earlier, reusable workflows need to be run as jobs, which
    means the GitHub runner will clean up the local repository after finishing the
    reusable workflow job and moving on to the next job.</st> <st c="48691">If we
    don’t want to commit our version numbers, we need to run all actions within the
    same job.</st> <st c="48787">That’s why we have created this</st> <st c="48819">composite
    action.</st>'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<st c="48376">/.github/actions/set-version-number-action/action.yml</st>`<st
    c="48429">，它设置了 Power Platform 解决方案的版本号。</st> <st c="48491">正如我们之前所看到的，可重用的工作流需要作为作业运行，这意味着
    GitHub 运行器将在完成可重用工作流作业并继续下一个作业后清理本地仓库。</st> <st c="48691">如果我们不希望提交版本号，我们需要将所有操作都运行在同一个作业中。</st>
    <st c="48787">这就是为什么我们创建了这个</st> <st c="48819">复合操作。</st>'
- en: '`<st c="48932">MSBuild</st>` <st c="48939">and</st> `<st c="48944">dotnet</st>`
    <st c="48950">CLIs available</st> <st c="48965">for our build actions.</st> <st
    c="48989">We build the solutions with the</st> <st c="49021">following command:</st>'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<st c="48932">MSBuild</st>` <st c="48939">和</st> `<st c="48944">dotnet</st>`
    <st c="48950">CLI 可用于我们的构建操作。</st> <st c="48989">我们使用以下命令构建解决方案：</st>'
- en: '[PRE17]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`<st c="49610">gh cli</st>` <st c="49616">command to create a</st> <st c="49637">GitHub
    release:</st>'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<st c="49610">gh cli</st>` <st c="49616">命令用于创建一个</st> <st c="49637">GitHub
    发布：</st>'
- en: '[PRE18]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: <st c="49789">By using the</st> `<st c="49803">generate-notes</st>` <st c="49817">argument,
    the GitHub release notes will be automatically generated.</st> <st c="49886">We
    also attach our binaries to the created release by referring to the folder and
    its content,</st> `<st c="49981">${{</st>` `<st c="49985">env.solution_release_folder}}/*.*</st>`<st
    c="50018">.</st>
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="49789">通过使用</st> `<st c="49803">generate-notes</st>` <st c="49817">参数，GitHub
    发布说明将自动生成。</st> <st c="49886">我们还通过引用文件夹及其内容将二进制文件附加到创建的发布中，</st> `<st c="49981">${{</st>`
    `<st c="49985">env.solution_release_folder}}/*.*</st>`<st c="50018">。</st>
- en: <st c="50019">Let’s now execute this flow with its default parameters and, upon
    completion, check whether we can see on the main page of our GitHub repository,
    under</st> **<st c="50172">Releases</st>**<st c="50180">, a release called</st>
    **<st c="50199">Initial release</st>**<st c="50214">. By opening it, we should
    discover more details about our first release – for example, the</st> <st c="50306">attached
    assets:</st>
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="50019">现在，让我们使用默认参数执行此流程，并在完成后检查是否能在 GitHub 仓库的主页上看到</st> **<st c="50172">Releases</st>**<st
    c="50180">下的一个名为</st> **<st c="50199">Initial release</st>**<st c="50214">的发布。打开它后，我们应该能发现关于第一次发布的更多细节——例如，</st>
    <st c="50306">附加的资产：</st>
- en: '![Figure 8.22 – The GitHub release with the Power Platform package](img/B22208_08_22.jpg)'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 8.22 – 包含 Power Platform 包的 GitHub 发布](img/B22208_08_22.jpg)'
- en: <st c="50590">Figure 8.22 – The GitHub release with the Power Platform package</st>
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="50590">图 8.22 – 包含 Power Platform 包的 GitHub 发布</st>
- en: <st c="50654">The package deployer</st>
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="50654">包部署器</st>
- en: <st c="50675">The</st> `<st c="50680">.pdpkg</st>` <st c="50686">(</st> `<st
    c="50899">pac package deploy --package</st>` `<st c="50928">.\bin\Release\mpa_Kudos_DeploymentPackage.1.0.0.pdpkg.zip</st>`
    <st c="50985">on the other tenant.</st> <st c="51007">These packages</st> <st
    c="51021">can also upload data and prepare the target environment for</st> <st
    c="51082">the solutions.</st>
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="50675">该</st> `<st c="50680">.pdpkg</st>` <st c="50686">（</st> `<st c="50899">pac
    package deploy --package</st>` `<st c="50928">.\bin\Release\mpa_Kudos_DeploymentPackage.1.0.0.pdpkg.zip</st>`
    <st c="50985">在另一个租户上进行部署。</st> <st c="51007">这些包</st> <st c="51021">还可以上传数据并为</st>
    <st c="51082">解决方案准备目标环境。</st>
- en: <st c="51096">With GitHub releases, we can</st> <st c="51125">distribute our
    development project results to IT ops teams responsible for the production tenant,
    without directly connecting our developer tenant and workflows with the</st> <st
    c="51296">production one.</st>
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="51096">通过 GitHub 发布，我们可以</st> <st c="51125">将我们的开发项目结果分发给负责生产租户的 IT 运维团队，而无需直接将我们的开发租户和工作流与</st>
    <st c="51296">生产租户连接。</st>
- en: <st c="51311">If you encounter issues when attempting to run</st> <st c="51358">the
    workflows, consider the following</st> <st c="51397">troubleshooting options:</st>
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="51311">如果在尝试运行</st> <st c="51358">工作流时遇到问题，请考虑以下</st> <st c="51397">故障排除选项：</st>
- en: '**<st c="51421">Check the run logs</st>**<st c="51440">: The first step is
    to check the logs of the workflow run.</st> <st c="51500">GitHub provides detailed
    logs for each step of the workflow, which can help us identify where an</st> <st
    c="51597">error occurred.</st>'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="51421">检查运行日志</st>**<st c="51440">：第一步是检查工作流运行的日志。</st> <st c="51500">GitHub
    为每个工作流步骤提供详细日志，这可以帮助我们识别错误发生的地方。</st>'
- en: '`<st c="51699">ACTIONS_STEP_DEBUG</st>` <st c="51717">secret to enable step
    debug logs, which provide more detailed output for</st> <st c="51791">each step.</st>'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="51699">ACTIONS_STEP_DEBUG</st>` <st c="51717">密钥用于启用步骤调试日志，提供每个步骤的更详细输出。</st>
    <st c="51791">步骤日志的详细输出可以帮助我们诊断问题。</st>'
- en: '**<st c="51801">Run the workflow locally</st>**<st c="51826">: We can use tools
    such as</st> **<st c="51854">act</st>** <st c="51857">(</st>[<st c="51859">https://github.com/nektos/act</st>](https://github.com/nektos/act)<st
    c="51888">) to run our workflows locally on our machine.</st> <st c="51936">This
    can help us debug the workflow in an environment</st> <st c="51990">we control.</st>'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="51801">在本地运行工作流</st>**<st c="51826">：我们可以使用诸如</st> **<st c="51854">act</st>**
    <st c="51857">(</st>[<st c="51859">https://github.com/nektos/act</st>](https://github.com/nektos/act)<st
    c="51888">)等工具在本地机器上运行工作流。</st> <st c="51936">这可以帮助我们在受控的环境中调试工作流。</st>'
- en: '`<st c="52045">.yml</st>` <st c="52049">workflow file is correctly formatted
    and that all required fields are present.</st> <st c="52129">Syntax errors or
    missing fields can cause workflows to fail.</st> <st c="52190">We should very
    carefully change the indent of the lines in YML files because only one additional
    space can lead to a</st> <st c="52307">syntax error.</st>'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="52045">.yml</st>` <st c="52049">工作流文件格式正确，且所有必需字段都已包含。</st> <st c="52129">语法错误或缺失字段可能导致工作流失败。</st>
    <st c="52190">我们需要非常小心地更改 YML 文件中的行缩进，因为仅一个额外的空格就可能导致语法错误。</st>'
- en: '**<st c="52320">Check for external changes</st>**<st c="52347">: Sometimes,
    changes in external dependencies or an environment can cause workflows to fail.</st>
    <st c="52441">We need to ensure that all external services and dependencies</st>
    <st c="52503">are operational.</st>'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="52320">检查外部更改</st>**<st c="52347">：有时，外部依赖项或环境的变化会导致工作流失败。</st> <st
    c="52441">我们需要确保所有外部服务和依赖项</st> <st c="52503">都是正常运行的。</st>'
- en: <st c="52519">Now, let’s move on to the next topic and delve into</st> <st c="52572">backlog
    management.</st>
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="52519">现在，让我们进入下一个话题，深入了解</st> <st c="52572">待办事项管理。</st>
- en: <st c="52591">Exercise – backlog management in GitHub</st>
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="52591">练习 – GitHub 中的待办事项管理</st>
- en: <st c="52631">In</st> [*<st c="52635">Chapter 1</st>*](B22208_01.xhtml#_idTextAnchor014)<st
    c="52644">, we learned about why it is essential to track our activities, user
    stories, change requests, and bug fixes on any code base.</st> <st c="52771">Let’s
    recall the</st> <st c="52788">key takeaways:</st>
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="52631">在</st> [*<st c="52635">第 1 章</st>*](B22208_01.xhtml#_idTextAnchor014)<st
    c="52644">中，我们了解了为何跟踪我们的活动、用户故事、变更请求和 bug 修复在任何代码库中都是至关重要的。</st> <st c="52771">让我们回顾一下</st>
    <st c="52788">关键要点：</st>
- en: <st c="52802">We want to plan our developer work in every sprint ahead</st>
    <st c="52859">to laser-focus</st> <st c="52874">on the</st> <st c="52881">most
    critical</st> **<st c="52896">features</st>**<st c="52904">,</st> **<st c="52906">bugs</st>**<st
    c="52910">, and</st> **<st c="52916">defects</st>**<st c="52923">. The entire</st>
    **<st c="52936">sprint planning process</st>** <st c="52959">is based on a healthy</st>
    **<st c="52982">product backlog</st>** <st c="52997">that every developer</st>
    <st c="53018">and product owner</st> <st c="53036">needs</st> <st c="53043">to
    maintain.</st>
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="52802">我们希望在每个冲刺前规划好开发人员的工作</st> <st c="52859">以便集中精力</st> <st c="52874">处理最关键的</st>
    <st c="52881">功能</st> **<st c="52896">特性</st>**<st c="52904">,</st> **<st c="52906">缺陷</st>**<st
    c="52910">和</st> **<st c="52916">问题</st>**<st c="52923">。整个</st> **<st c="52936">冲刺规划过程</st>**
    <st c="52959">基于一个健康的</st> **<st c="52982">产品待办事项</st>** <st c="52997">，每个开发人员</st>
    <st c="53018">和产品负责人</st> <st c="53036">都需要</st> <st c="53043">维护它。</st>
- en: <st c="53055">Healthy backlog management allows only source code changes</st>
    <st c="53114">that are planned to avoid</st> **<st c="53141">gold plating</st>**
    <st c="53153">(developers adding extra features that are not part of the activity)
    and</st> **<st c="53227">scope creeping</st>** <st c="53241">(when a project team
    works on features</st> <st c="53280">that are requested by the customer without
    adjusting the project’s cost</st> <st c="53353">or timeline).</st>
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="53055">健康的待办事项管理只允许计划中的源代码更改</st> <st c="53114">，以避免</st> **<st c="53141">黄金镶嵌</st>**
    <st c="53153">(开发人员添加不属于活动范围的额外功能) 和</st> **<st c="53227">范围蔓延</st>** <st c="53241">(当项目团队在不调整项目成本或时间表的情况下，处理客户请求的功能)</st>
    <st c="53280">。</st>
- en: '**<st c="53366">Backlog management</st>** <st c="53385">provides</st> **<st
    c="53395">backward traceability</st>** <st c="53416">as well as the ability to
    trace</st> <st c="53448">back from the application running in production to the
    source</st> <st c="53510">code that produced the</st> **<st c="53534">binaries</st>**
    <st c="53542">of the application.</st> <st c="53563">We can use this information
    for root-cause analysis to discover which change, tracked by a work item, led
    to issues</st> <st c="53679">in production.</st>'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="53366">待办事项管理</st>** <st c="53385">提供</st> **<st c="53395">向后追溯性</st>**
    <st c="53416">以及追溯</st> <st c="53448">从生产环境中运行的应用程序到生成该应用程序的源代码</st> <st c="53510">的能力。</st>
    **<st c="53534">二进制文件</st>** <st c="53542">的生成。</st> <st c="53563">我们可以利用这些信息进行根本原因分析，发现哪个工作项跟踪的更改导致了生产环境中的问题。</st>'
- en: <st c="53693">Both Azure DevOps Services</st> <st c="53720">and GitHub provide
    these requirement engineering</st> <st c="53769">and issue management capabilities,
    with advanced project management features, such as scheduling our activities and
    assigning them to team members</st> <st c="53917">in sprints.</st>
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="53693">Azure DevOps 服务</st> <st c="53720">和 GitHub 提供了这些需求工程</st> <st
    c="53769">和问题管理功能，具备先进的项目管理特性，例如安排我们的活动并分配给团队成员</st> <st c="53917">在冲刺中。</st>
- en: <st c="53928">To maintain healthy backlog management in GitHub, we can</st>
    <st c="53985">improve the minimum</st> `<st c="54251">pull_request</st>` <st c="54263">action
    targeting the branch main and executes the</st> <st c="54314">following actions:</st>
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="53928">为了保持 GitHub 中健康的待办事项管理，我们可以</st> <st c="53985">改进最小</st> `<st
    c="54251">pull_request</st>` <st c="54263">操作，目标是 main 分支并执行以下操作：</st>
- en: '![Figure 8.23 – A pull request-triggered workflow for branch protection](img/B22208_08_23.jpg)'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 8.23 – 触发拉取请求的工作流，用于分支保护](img/B22208_08_23.jpg)'
- en: <st c="54475">Figure 8.23 – A pull request-triggered workflow for branch protection</st>
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="54475">图 8.23 – 触发拉取请求的工作流，用于分支保护</st>
- en: <st c="54544">The key part</st> <st c="54557">of our workflow</st> <st c="54573">looks
    as follows (located</st> <st c="54600">under</st> `<st c="54606">/.github/workflows/pr-check.yml</st>`<st
    c="54637">):</st>
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="54544">我们的工作流关键部分如下所示（位于</st> <st c="54600">`/.github/workflows/pr-check.yml`</st>
    <st c="54637">）：</st>
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: <st c="55574">We use</st> `<st c="55582">curl</st>` <st c="55586">to query the
    comments</st> <st c="55608">belonging to the issue</st> <st c="55631">via the
    REST API endpoint (</st>`<st c="55659">https://api.github.com/repos/${{ github.repository
    }}/issues/${{ github.event.pull_request.number }}/comments</st>`<st c="55769">),
    since every pull request is also modeled as an</st> `<st c="55910">no_comments</st>`<st
    c="55921">, accordingly.</st> <st c="55936">The next action consumes the output
    of the previous action and passes or fails the build.</st> <st c="56026">If the
    workflow fails, the pull request is blocked, and the merge is not allowed.</st>
    <st c="56108">The workflow also checks at the beginning whether there is a description
    added to the pull request with the same approach.</st> <st c="56231">We can correct
    our pull request by writing descriptions and adding comments in hindsight.</st>
    <st c="56321">Also, we can use GitHub Copilot to generate our pull request description,
    based on the changes between the child and</st> <st c="56438">parent branches:</st>
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="55574">我们使用</st> `<st c="55582">curl</st>` <st c="55586">通过REST API端点查询属于该问题的评论</st>
    <st c="55608">（</st><st c="55631">https://api.github.com/repos/${{ github.repository
    }}/issues/${{ github.event.pull_request.number }}/comments</st> <st c="55769">），因为每个拉取请求也被建模为一个</st>
    `<st c="55910">no_comments</st>`<st c="55921">，因此。</st> <st c="55936">下一步操作会使用前一步操作的输出，判断构建是否通过。</st>
    <st c="56026">如果工作流失败，拉取请求将被阻止，无法合并。</st> <st c="56108">工作流还会在开始时检查拉取请求是否添加了描述，采用相同的方法。</st>
    <st c="56231">我们可以通过回溯写描述并添加评论来修正我们的拉取请求。</st> <st c="56321">此外，我们还可以使用GitHub
    Copilot根据子分支和</st> <st c="56438">父分支之间的更改生成拉取请求描述：</st>
- en: '![Figure 8.24 – Using GitHub Copilot to generate PR descriptions](img/B22208_08_24.jpg)'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图8.24 – 使用GitHub Copilot生成PR描述](img/B22208_08_24.jpg)'
- en: <st c="57005">Figure 8.24 – Using GitHub Copilot to generate PR descriptions</st>
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="57005">图8.24 – 使用GitHub Copilot生成PR描述</st>
- en: <st c="57067">We just need to click</st> <st c="57089">on the Copilot</st> <st
    c="57104">icon, and then the underlying</st> **<st c="57135">GPT-4 model</st>**
    <st c="57146">generates the summary</st> <st c="57168">for the pull request –
    in our case,</st> **<st c="57205">The pull request includes a minor change to
    the</st>** **<st c="57253">Readme.md file…</st>**<st c="57268">.</st>
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="57067">我们只需要点击</st> <st c="57089">Copilot</st> <st c="57104">图标，然后底层的</st>
    **<st c="57135">GPT-4模型</st>** <st c="57146">会生成拉取请求的摘要</st> <st c="57168">——在我们的案例中，</st>
    **<st c="57205">该拉取请求对</st>** **<st c="57253">Readme.md文件进行了微小的更改……</st>**<st
    c="57268">。</st>
- en: <st c="57269">If we want to introduce more complex checks during the pull request
    in conjunction with backlog</st> <st c="57365">management, we can visit the</st>
    `<st c="57439">verify-linked-issue</st>` <st c="57458">(</st>[<st c="57460">https://github.com/marketplace/actions/verify-linked-issue</st>](https://github.com/marketplace/actions/verify-linked-issue)<st
    c="57518">), which checks whether pull requests have at least one linked</st>
    <st c="57582">issue attached.</st>
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="57269">如果我们想要在拉取请求中引入更复杂的检查，以配合待办事项管理</st>，我们可以访问<st c="57365">这个</st>
    `<st c="57439">verify-linked-issue</st>` <st c="57458">（</st>[<st c="57460">https://github.com/marketplace/actions/verify-linked-issue</st>](https://github.com/marketplace/actions/verify-linked-issue)<st
    c="57518">），它会检查拉取请求是否至少关联了一个</st> <st c="57582">问题。</st>
- en: <st c="57597">Now that we have established strict control of our repository
    and work management, let’s move on to the next topic,</st> **<st c="57714">quality
    assurance</st>**<st c="57731">.</st>
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="57597">现在我们已经建立了严格的仓库和工作管理控制，接下来我们进入下一个话题，</st> **<st c="57714">质量保证</st>**<st
    c="57731">。</st>
- en: <st c="57732">Exercise – testing solutions</st>
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="57732">练习 – 测试解决方案</st>
- en: <st c="57761">In</st> [*<st c="57765">Chapter 6</st>*](B22208_06.xhtml#_idTextAnchor103)<st
    c="57774">, we delved into the</st> **<st c="57795">quality assurance</st>** <st
    c="57812">(</st>**<st c="57814">QA</st>**<st c="57816">) topics and learned</st>
    <st c="57837">about the tools and frameworks</st> <st c="57868">that are available
    for end-to-end UI testing</st> <st c="57913">in PowerApps, such as</st> **<st
    c="57936">Power Apps Test Engine</st>**<st c="57958">, or open</st> <st c="57968">source</st>
    <st c="57974">web</st> <st c="57978">testing</st> <st c="57987">frameworks, such
    as</st> **<st c="58007">Selenium</st>**<st c="58015">,</st> **<st c="58017">Playwright</st>**<st
    c="58027">,</st> **<st c="58029">Appium</st>** <st c="58035">or</st> **<st c="58039">Cypress</st>**<st
    c="58046">. We also concluded that Power Automate cloud flows and</st> **<st c="58102">desktop
    flows</st>** <st c="58115">are considered</st> <st c="58130">our business logic
    layer, and we can test them through the UI components, as end-to-end tests.</st>
    <st c="58226">In this section, we are going to do</st> <st c="58262">the following:</st>
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="57761">在</st> [*<st c="57765">第 6 章</st>*](B22208_06.xhtml#_idTextAnchor103)<st
    c="57774">中，我们深入探讨了</st> **<st c="57795">质量保证</st>** <st c="57812">(</st>**<st
    c="57814">QA</st>**<st c="57816">) 主题，并了解了</st> <st c="57837">可用于端到端 UI 测试的工具和框架</st>
    <st c="57868">，例如</st> **<st c="57936">Power Apps 测试引擎</st>**<st c="57958">，或开源的</st>
    <st c="57968">Web</st> <st c="57974">测试框架，如</st> **<st c="58007">Selenium</st>**<st
    c="58015">、</st> **<st c="58017">Playwright</st>**<st c="58027">、</st> **<st c="58029">Appium</st>**
    <st c="58035">或</st> **<st c="58039">Cypress</st>**<st c="58046">。我们还得出结论，Power
    Automate 云流和</st> **<st c="58102">桌面流</st>** <st c="58115">被视为我们的业务逻辑层，我们可以通过
    UI 组件进行端到端测试。</st> <st c="58226">在本节中，我们将进行以下操作：</st>
- en: <st c="58276">Create a test in Power Apps Test Studio for the Kudos app in our
    Power Platform developer</st> <st c="58367">environment (</st>`<st c="58380">DEV-US_XXX_Z</st>`<st
    c="58393">).</st>
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="58276">在我们的 Power Platform 开发环境中，为 Kudos 应用创建一个 Power Apps 测试工作室的测试</st>
    <st c="58367">（</st>`<st c="58380">DEV-US_XXX_Z</st>`<st c="58393">）。</st>
- en: <st c="58396">Download it as a test suite</st> **<st c="58425">YAML file</st>**
    <st c="58434">and commit it to our developer</st> <st c="58465">branch (remember
    that this branch is</st> <st c="58503">still alive).</st>
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="58396">将其作为测试套件下载</st> **<st c="58425">YAML 文件</st>** <st c="58434">并提交到我们的开发</st>
    <st c="58465">分支（记得这个分支</st> <st c="58503">仍然存在）。</st>
- en: <st c="58516">Run it locally with the help of the</st> <st c="58553">PAC CLI.</st>
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="58516">在本地运行，借助</st> <st c="58553">PAC CLI。</st>
- en: <st c="58561">Introduce this step to our</st> *<st c="58589">Commit to dev branch</st>*
    <st c="58609">GitHub workflow.</st>
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="58561">将这一步引入到我们的</st> *<st c="58589">提交到开发分支</st>* <st c="58609">GitHub
    工作流中。</st>
- en: <st c="58626">We also have some prerequisites</st> <st c="58658">for this test</st>
    <st c="58673">automation scenario:</st>
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="58626">我们还有一些先决条件</st> <st c="58658">用于这个测试</st> <st c="58673">自动化场景：</st>
- en: <st c="58693">To be able to execute our test during the CI/CD process, we also</st>
    <st c="58758">need to have a user without</st> **<st c="58787">Multifactor Authentication</st>**
    <st c="58813">(</st>**<st c="58815">MFA</st>**<st c="58818">) in our development
    tenant; learn more about it in the link in the</st> *<st c="58887">Further reading</st>*
    <st c="58902">section (Power Apps</st> <st c="58923">Test Engine).</st>
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="58693">为了能够在 CI/CD 过程中执行我们的测试，我们还</st> <st c="58758">需要一个没有</st> **<st
    c="58787">多因素认证</st>** <st c="58813">(</st>**<st c="58815">MFA</st>**<st c="58818">)
    的用户在我们的开发租户中；可以通过</st> *<st c="58887">进一步阅读</st>* <st c="58902">部分中的链接了解更多信息（Power
    Apps</st> <st c="58923">测试引擎）。</st>
- en: <st c="58936">We also need to share the Kudos app</st> <st c="58972">under the</st>
    **<st c="58983">Solutions</st>** <st c="58992">blade with this</st> **<st c="59009">Microsoft
    Entra</st>** **<st c="59025">ID user</st>**<st c="59032">.</st>
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="58936">我们还需要在</st> **<st c="58983">解决方案</st>** <st c="58992">页面下共享 Kudos
    应用</st> **<st c="59009">Microsoft Entra</st>** **<st c="59025">ID 用户</st>**<st
    c="59032">。</st>
- en: <st c="59033">We must add this user</st> <st c="59055">to the developer environment
    (</st>`<st c="59086">DEV-US_XXX_Z</st>`<st c="59099">) in the</st> **<st c="59109">Power
    Platform Admin Center</st>**<st c="59136">, and we need</st> <st c="59149">to</st>
    <st c="59153">assign the built-in</st> **<st c="59173">Security Role</st>**<st
    c="59186">,</st> **<st c="59188">Basic User</st>**<st c="59198">, and the custom
    one,</st> **<st c="59220">Kudos Employee</st>**<st c="59234">, to this</st> <st
    c="59244">user.</st> <st c="59250">This latter one gives access to the custom
    tables created by the Kudos solution and contains the badges, as well as the already</st>
    <st c="59378">shared Kudos.</st>
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们必须将此用户添加到开发环境（`<st c="59086">DEV-US_XXX_Z</st>`）中，**<st c="59109">Power Platform
    管理中心</st>**，并且我们需要为该用户分配内置的**<st c="59173">安全角色</st>**，**<st c="59188">基本用户</st>**和自定义角色**<st
    c="59220">Kudos 员工</st>**，这样才能访问由 Kudos 解决方案创建的自定义表格，其中包含徽章以及已经<st c="59378">共享的
    Kudos。</st>
- en: <st c="59391">We need to start the app interactively once on behalf of our test
    user without MFA, granting them access to the connections used in the Kudos app,
    Office 365 Users, and Office</st> <st c="59568">365 Outlook.</st>
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要代表测试用户第一次交互式启动该应用，且不启用 MFA，授予他们对 Kudos 应用、Office 365 用户和 Office 365 Outlook
    中使用的连接的访问权限。</st>
- en: <st c="59580">Finally, we need to share the</st> *<st c="59611">Kudo App – Share
    Kudo with Sender</st>*<st c="59644">,</st> *<st c="59646">Assign to Recipient</st>*<st
    c="59665">, and</st> *<st c="59671">Kudos App - Notification email</st>* <st c="59701">cloud
    flows with this user as</st> *<st c="59732">Run only users</st>* <st c="59746">in
    the Power</st> <st c="59759">Automate cloud</st> <st c="59775">flow UI.</st>
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们需要与该用户共享*<st c="59611">Kudo 应用 – 与发送者共享 Kudo</st>*<st c="59644">，</st>*<st
    c="59646">分配给接收者</st>*<st c="59665">，以及</st>*<st c="59671">Kudos 应用 - 通知邮件</st>*<st
    c="59701">云流程，作为</st>*<st c="59732">仅限运行的用户</st>*<st c="59746">在 Power</st><st
    c="59759">Automate 云</st><st c="59775">流程 UI 中。</st>
- en: <st c="59783">We can easily record</st> <st c="59804">our tests by using the</st>
    `<st c="60514">/test/SmokeTestSuite.yaml</st>` <st c="60539">file to continue</st>
    <st c="60557">this exercise.</st>
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过使用<st c="59783">`/test/SmokeTestSuite.yaml`</st>文件来轻松记录<st c="59804">我们的测试，继续进行这项练习。</st>
- en: <st c="60571">Once we have our YAML file, we need to make some</st> <st c="60620">changes
    to be able to run in</st> `<st c="60924">0x0</st>`<st c="60927">, such as</st>
    `<st c="60937">102x768</st>` <st c="60944">pixels (</st>`<st c="60953">screenWidth</st>`
    `<st c="60966">X screenHeight</st>`<st c="60980">):</st>
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦我们有了 YAML 文件，我们需要进行一些<st c="60571">更改，以便能够在</st>`<st c="60924">0x0</st>`<st
    c="60927">中运行，像是</st>`<st c="60937">102x768</st>`<st c="60944">像素（</st>`<st c="60953">screenWidth</st>`
    `<st c="60966">X screenHeight</st>`<st c="60980">）：</st>
- en: '[PRE20]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: <st c="61184">Besides these updates, we can set</st> `<st c="61219">headless</st>`
    <st c="61227">parameter to</st> `<st c="61241">false</st>` <st c="61246">for local
    testing purposes to follow the UI actions in a Chromium-based browser.</st> <st
    c="61328">To execute this test YAML file locally, we can use the following script</st>
    <st c="61400">in Bash:</st>
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了这些更新之外，我们可以将<st c="61184">`headless`</st> <st c="61219">参数设置为</st>`<st c="61241">false</st>`<st
    c="61246">，以便在 Chromium 浏览器中进行本地测试，跟踪 UI 操作。</st><st c="61328">要在本地执行此测试 YAML
    文件，我们可以使用以下 Bash 脚本：</st>
- en: '[PRE21]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: <st c="61615">We need to set the test user</st> <st c="61644">email address
    and password as environment variables, and we also need to provide the test file
    location, the environment ID, and tenant ID.</st> <st c="61785">After successful
    execution, we will find the test results in the</st> `<st c="61850">TestOutput</st>`
    <st c="61860">folder with the video recording, as well in the</st> `<st c="61909">.</st>``<st
    c="61910">webm</st>` <st c="61915">format.</st>
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们需要将测试用户的电子邮件地址和密码设置为环境变量，并且还需要提供测试文件位置、环境 ID 和租户 ID。</st><st c="61785">成功执行后，我们将在</st>`<st
    c="61850">TestOutput</st>`<st c="61860">文件夹中找到测试结果及视频录制，文件格式也将是</st>`<st c="61909">.webm</st>`<st
    c="61915">。</st>
- en: <st c="61923">To execute this test in GitHub, we need</st> <st c="61963">to
    create two additional</st> `<st c="62092">TESTUSER</st>` <st c="62100">and</st>
    `<st c="62105">TESTUSERPSW</st>`<st c="62116">, and – similar to the other three
    ones (</st>`<st c="62157">PPAPPID</st>`<st c="62165">,</st> `<st c="62167">PPAPPSECRET</st>`<st
    c="62178">, and</st> `<st c="62184">PPTENANTID</st>`<st c="62194">) that we created
    at the beginning of</st> <st c="62233">this chapter.</st>
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="61923">要在 GitHub 中执行此测试，我们需要</st> <st c="61963">创建两个额外的</st> `<st c="62092">TESTUSER</st>`
    <st c="62100">和</st> `<st c="62105">TESTUSERPSW</st>`<st c="62116">，并且 – 与我们在本章开始时创建的其他三个（</st>`<st
    c="62157">PPAPPID</st>`<st c="62165">,</st> `<st c="62167">PPAPPSECRET</st>`<st
    c="62178">, 和</st> `<st c="62184">PPTENANTID</st>`<st c="62194">）类似。</st>
- en: <st c="62246">We have crafted a GitHub workflow in advance to execute our</st>
    `<st c="62307">SmokeTestSuite.yaml</st>` <st c="62326">file easily on the dev
    branch.</st> <st c="62358">This workflow is available under</st> `<st c="62391">/.github/workflows/run-test.yml</st>`
    <st c="62422">and uses the following Bash script to run</st> <st c="62465">the
    test:</st>
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="62246">我们提前创建了一个 GitHub 工作流，以便在开发分支上轻松执行我们的</st> `<st c="62307">SmokeTestSuite.yaml</st>`
    <st c="62326">文件。</st> <st c="62358">此工作流位于</st> `<st c="62391">/.github/workflows/run-test.yml</st>`
    <st c="62422">并使用以下 Bash 脚本运行</st> <st c="62465">测试：</st>
- en: '[PRE22]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '# Login interactively'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '# 交互式登录'
- en: az login
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: az login
- en: Select the right subscription
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择正确的订阅
- en: az account set --subscription baa70448-593c-4dc7-8a91-c92cf7eaf66e
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: az account set --subscription baa70448-593c-4dc7-8a91-c92cf7eaf66e
- en: az group create --location westeurope --resource-group KudosApp.AI.RG <st c="69077">workspace=$(az
    monitor log-analytics workspace create \</st>
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: az group create --location westeurope --resource-group KudosApp.AI.RG <st c="69077">workspace=$(az
    monitor log-analytics workspace create \</st>
- en: <st c="69132">--resource-group KudosApp.AI.RG \</st>
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="69132">--resource-group KudosApp.AI.RG \</st>
- en: <st c="69166">--workspace-name KudosWorkspace \</st>
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="69166">--workspace-name KudosWorkspace \</st>
- en: <st c="69200">--location westeurope --query id --output tsv)</st>
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="69200">--location westeurope --query id --output tsv)</st>
- en: <st c="69247">az monitor app-insights component create \</st>
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="69247">az monitor app-insights component create \</st>
- en: <st c="69290">--app KudosAppInsights \</st>
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="69290">--app KudosAppInsights \</st>
- en: <st c="69315">--location westeurope \</st>
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="69315">--location westeurope \</st>
- en: <st c="69339">--workspace $workspace \</st>
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="69339">--workspace $workspace \</st>
- en: <st c="69450">instrumentationKey</st> key as well. We can now add the key to
    the Kudos app and try it out to see how data is ingested into the <st c="69574">Application</st>
    <st c="69586">Insights</st> dashboard.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="69450">instrumentationKey</st> 密钥。我们现在可以将该密钥添加到 Kudos 应用并试用，查看数据如何被导入到<st
    c="69574">应用程序</st> <st c="69586">洞察</st> 仪表板。
- en: <st c="69605">Canvas app insights</st>
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="69605">Canvas 应用洞察</st>
- en: <st c="69625">To view telemetry</st> <st c="69643">information, we need to enable
    canvas app insights in the Power Platform admin center.</st> <st c="69731">Go
    to</st> **<st c="69737">Settings</st>**<st c="69745">, which lists all the tenant
    settings, and select the</st> **<st c="69799">Canvas app insights</st>** <st c="69818">item.</st>
    <st c="69825">In the</st> **<st c="69832">Canvas app insights</st>** <st c="69851">pane
    on the right side, we can turn this</st> <st c="69893">feature on.</st>
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="69625">要查看遥测</st> <st c="69643">信息，我们需要在 Power Platform 管理中心启用 Canvas
    应用洞察。</st> <st c="69731">转到</st> **<st c="69737">设置</st>**<st c="69745">，它列出了所有租户设置，然后选择</st>
    **<st c="69799">Canvas 应用洞察</st>** <st c="69818">项。</st> <st c="69825">在右侧的</st>
    **<st c="69832">Canvas 应用洞察</st>** <st c="69851">面板中，我们可以开启此</st> <st c="69893">功能。</st>
- en: <st c="69904">Of course, we don’t want to store directly the instrumentation
    key in the canvas app.</st> <st c="69991">The simplest way to make the instrumentation
    key independent from the app would be to introduce a new environment variable,
    but at the time of writing, it is not supported for the instrumentation key property.</st>
    <st c="70201">What we can do is update our deployment pipeline and replace the
    instrumentation</st> <st c="70281">key with the correct value, stored as a</st>
    `<st c="70580">json file</st>` <st c="70589">in our solution folder –</st> `<st
    c="70615">/src/mpa_Kudos/src/CanvasApps/src/mpa_KudosApp/AppInsightsKey.json</st>`<st
    c="70681">. This contains the instrumentation key that we can replace with the
    correct one inside our</st> <st c="70773">GitHub workflow.</st>
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="69904">当然，我们不希望直接在画布应用中存储仪表密钥。</st> <st c="69991">使仪表密钥与应用程序独立的最简单方法是引入一个新的环境变量，但在撰写本文时，仪表密钥属性尚不支持此方法。</st>
    <st c="70201">我们可以做的是更新我们的部署管道，并将仪表密钥替换为正确的值，该值存储为</st> `<st c="70580">json 文件</st>`
    <st c="70589">在我们的解决方案文件夹中 –</st> `<st c="70615">/src/mpa_Kudos/src/CanvasApps/src/mpa_KudosApp/AppInsightsKey.json</st>`<st
    c="70681">。这个文件包含了我们可以在</st> <st c="70773">GitHub 工作流中替换为正确的仪表密钥。</st>
- en: <st c="70789">Although we don’t have a custom chatbot in this solution,</st>
    **<st c="70848">Microsoft Copilot Studio</st>** <st c="70872">also supports this
    kind of integration</st> <st c="70911">with Azure Application Insights.</st> <st
    c="70945">We can configure the connection string of our Azure Application Insights
    instance under</st> **<st c="71033">Settings</st>** <st c="71041">in the</st>
    **<st c="71049">Copilot details</st>** <st c="71064">menu, under the</st> **<st
    c="71081">Advanced</st>** <st c="71089">tab, as shown in the</st> <st c="71111">following
    figure:</st>
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="70789">尽管我们的解决方案中没有自定义聊天机器人，</st> **<st c="70848">Microsoft Copilot Studio</st>**
    <st c="70872">同样支持这种与 Azure 应用程序洞察的集成</st> <st c="70911">。</st> <st c="70945">我们可以在</st>
    **<st c="71033">设置</st>** <st c="71041">中配置 Azure 应用程序洞察实例的连接字符串</st> <st c="71049">，位于</st>
    **<st c="71064">Copilot 详细信息</st>** <st c="71081">菜单下的</st> **<st c="71089">高级</st>**
    <st c="71089">标签页，如下图所示：</st>
- en: '![Figure 8.27 – Application Insights in Microsoft Copilot Studio](img/B22208_08_27.jpg)'
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 8.27 – Microsoft Copilot Studio 中的应用程序洞察](img/B22208_08_27.jpg)'
- en: <st c="72035">Figure 8.27 – Application Insights in Microsoft Copilot Studio</st>
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="72035">图 8.27 – Microsoft Copilot Studio 中的应用程序洞察</st>
- en: <st c="72097">Here, we should provide</st> <st c="72121">the entire connection
    string in the</st> <st c="72158">following format:</st>
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="72097">在这里，我们需要提供</st> <st c="72121">完整的连接字符串，格式如下：</st>
- en: '[PRE23]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: <st c="72422">We can find this string in the</st> **<st c="72454">Overview</st>**
    <st c="72462">blade of our Azure Application</st> <st c="72494">Insights instance.</st>
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="72422">我们可以在</st> **<st c="72454">概览</st>** <st c="72462">页找到此字符串，属于我们的
    Azure 应用程序</st> <st c="72494">洞察实例。</st>
- en: <st c="72512">In the case of</st> **<st c="72528">Power Pages websites</st>**<st
    c="72548">, we need to infuse the code snippet</st> <st c="72584">that tracks
    the user actions on the website and ingests the telemetry data into the Azure
    Application Insights endpoint.</st> <st c="72706">We just need to get the client-side
    JavaScript snippet available in the documentation</st> <st c="72791">and add it
    as a content snippet in our</st> **<st c="72831">Power Pages</st>** **<st c="72843">management</st>**
    <st c="72853">app:</st>
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="72512">对于</st> **<st c="72528">Power Pages 网站</st>**<st c="72548">，我们需要注入跟踪用户在网站上操作的代码片段，并将遥测数据发送到
    Azure 应用程序洞察终端。</st> <st c="72706">我们只需获取文档中提供的客户端 JavaScript 代码片段</st> <st c="72791">并将其作为内容片段添加到我们的</st>
    **<st c="72831">Power Pages</st>** **<st c="72843">管理</st>** <st c="72853">应用程序中：</st>
- en: '![Figure 8.28 – Application Insights in Power Pages](img/B22208_08_28.jpg)'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 8.28 – Power Pages 中的应用程序洞察](img/B22208_08_28.jpg)'
- en: <st c="73599">Figure 8.28 – Application Insights in Power Pages</st>
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="73599">图 8.28 – Power Pages 中的应用程序洞察</st>
- en: <st c="73648">The snippet itself</st> <st c="73667">is available here at</st>
    [<st c="73689">https://learn.microsoft.com/en-us/azure/azure-monitor/app/javascript-sdk?tabs=javascriptwebsdkloaderscript</st>](https://learn.microsoft.com/en-us/azure/azure-monitor/app/javascript-sdk?tabs=javascriptwebsdkloaderscript)<st
    c="73795">, and only the connection string should be updated with</st> <st c="73851">our
    one.</st>
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="73648">代码片段本身</st> <st c="73667">可以在此链接找到：</st> [<st c="73689">https://learn.microsoft.com/en-us/azure/azure-monitor/app/javascript-sdk?tabs=javascriptwebsdkloaderscript</st>](https://learn.microsoft.com/en-us/azure/azure-monitor/app/javascript-sdk?tabs=javascriptwebsdkloaderscript)<st
    c="73795">，只需要更新连接字符串为</st> <st c="73851">我们自己的。</st>
- en: <st c="73859">Besides canvas apps, custom</st> <st c="73887">chatbots, and Power
    Pages websites, Azure Application Insights as the common APM framework</st> <st
    c="73978">for Power Platform</st> <st c="73997">can be used to monitor</st> **<st
    c="74021">model-driven applications</st>**<st c="74046">, Power Automate cloud
    flows, and</st> **<st c="74080">Dataverse diagnostics and performance events</st>**<st
    c="74124">. This can be done using the</st> **<st c="74153">Export data to Application
    Insights</st>** <st c="74188">feature, which is available in the</st> <st c="74223">Power
    Platform admin center if we own paid/premium Dataverse licenses.</st> <st c="74295">For
    us, it means we can create export packages that push the telemetry data from the
    selected environment to our Application Insights service, without infusing the
    endpoint or the connection string to our Power Platform assets.</st> <st c="74523">We
    don’t need to prepare or create anything in our solutions; the environment and
    this export job will take care of the telemetry ingestion.</st> <st c="74664">It
    is recommended to use one Application Insights instance per environment, and note
    that this feature is turned on and supported in managed</st> <st c="74805">environments
    only.</st>
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="73859">除了画布应用、自定义</st> <st c="73887">聊天机器人和 Power Pages 网站外，Azure Application
    Insights 作为通用的 APM 框架</st> <st c="73978">可用于监控</st> **<st c="74021">模型驱动应用</st>**<st
    c="74046">、Power Automate 云流，以及</st> **<st c="74080">Dataverse 诊断和性能事件</st>**<st
    c="74124">。这可以通过使用</st> **<st c="74153">将数据导出到 Application Insights</st>** <st
    c="74188">功能实现，该功能可在</st> <st c="74223">Power Platform 管理中心中使用，如果我们拥有付费/高级 Dataverse
    许可证的话。</st> <st c="74295">对于我们来说，这意味着我们可以创建导出包，将选定环境中的遥测数据推送到我们的 Application Insights
    服务，而无需将端点或连接字符串注入到 Power Platform 资产中。</st> <st c="74523">我们无需在解决方案中准备或创建任何内容；环境和此导出作业将负责遥测数据的摄取。</st>
    <st c="74664">建议每个环境使用一个 Application Insights 实例，并且请注意，此功能仅在托管</st> <st c="74805">环境中开启和支持。</st>
- en: <st c="74823">Delayed ingestion of telemetry data</st>
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="74823">遥测数据的延迟摄取</st>
- en: <st c="74859">The timeframe set out in the</st> **<st c="74889">service level
    agreement</st>** <st c="74912">(</st>**<st c="74914">SLA</st>**<st c="74917">)
    for the delivery of telemetry data streams</st> <st c="74962">from Power Platform
    products supported by this feature to Application Insights is</st> <st c="75045">24
    hours.</st>
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="74859">在</st> **<st c="74889">服务级别协议</st>** <st c="74912">(</st>**<st
    c="74914">SLA</st>**<st c="74917">) 中规定的遥测数据流交付时间框架</st> <st c="74962">从支持此功能的
    Power Platform 产品到 Application Insights 的交付时间为</st> <st c="75045">24 小时。</st>
- en: <st c="75054">If we want to collect</st> <st c="75076">real-time telemetry from
    these Power Platform assets, we can create our own extensions, such as</st> <st
    c="75173">the following:</st>
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="75054">如果我们想要收集</st> <st c="75076">来自这些 Power Platform 资产的实时遥测数据，我们可以创建自己的扩展，例如</st>
    <st c="75173">以下内容：</st>
- en: <st c="75187">In model-driven apps, we can create a</st> **<st c="75226">Power
    Platform Component Framework</st>** <st c="75260">(</st>**<st c="75262">PCF</st>**<st
    c="75265">) control that is displayed</st> <st c="75293">in the UI and connects
    to the Application Insights endpoint</st> <st c="75353">with</st> <st c="75359">client-side
    JavaScript.</st>
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="75187">在模型驱动应用中，我们可以创建一个</st> **<st c="75226">Power Platform 组件框架</st>**
    <st c="75260">(</st>**<st c="75262">PCF</st>**<st c="75265">) 控件，该控件显示在 UI 中并通过客户端
    JavaScript 连接到 Application Insights 端点。</st>
- en: <st c="75382">With Power Automate cloud flows, we can use the information that
    is logged in Dataverse about the start time, durations, end time, status (e.g.,
    failing, canceling, or succeeding), and executed actions</st> <st c="75584">of
    cloud flows and send it, with the help of the</st> **<st c="75634">Dataverse plugin</st>**<st
    c="75650">, to the Application Insights endpoint.</st> <st c="75690">The other
    option to monitor these flows is to use the new built-in</st> **<st c="75757">Automation
    center</st>** <st c="75774">blade in</st> <st c="75784">Power Automate:</st>
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="75382">通过 Power Automate 云流，我们可以使用在 Dataverse 中记录的有关开始时间、持续时间、结束时间、状态（例如失败、取消或成功）和执行操作</st>
    <st c="75584">的信息，并借助</st> **<st c="75634">Dataverse 插件</st>**<st c="75650">将其发送到
    Application Insights 端点。</st> <st c="75690">监控这些流的另一个选项是使用 Power Automate 中新内置的</st>
    **<st c="75757">自动化中心</st>** <st c="75774">面板：</st>
- en: '![Figure 8.29 – The Power Automate Automation center](img/B22208_08_29.jpg)'
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 8.29 – Power Automate 自动化中心](img/B22208_08_29.jpg)'
- en: <st c="76747">Figure 8.29 – The Power Automate Automation center</st>
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="76747">图 8.29 – Power Automate 自动化中心</st>
- en: <st c="76797">Here, we can visualize the data logged in Dataverse, and we can
    use Copilot on the right-hand side to get help</st> <st c="76909">with troubleshooting.</st>
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="76797">在这里，我们可以可视化记录在 Dataverse 中的数据，并且可以在右侧使用 Copilot 获得</st> <st c="76909">故障排除的帮助。</st>
- en: <st c="76930">With Dataverse, we can develop a</st> **<st c="76964">custom Dataverse
    plugin</st>** <st c="76987">that sends this information</st> <st c="77015">to
    the Application  Insights</st> <st c="77043">endpoint, with the help of the</st>
    **<st c="77075">C# SDK</st>**<st c="77081">.</st>
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="76930">使用 Dataverse，我们可以开发一个</st> **<st c="76964">自定义 Dataverse 插件</st>**
    <st c="76987">，将这些信息发送到 Application Insights</st> <st c="77015">端点，并借助</st> **<st
    c="77075">C# SDK</st>**<st c="77081">。</st>
- en: <st c="77082">As we have seen, Azure Application</st> <st c="77117">Insights
    is an enterprise-ready application performance management PaaS solution that we
    can easily integrate into our Power Platform</st> <st c="77252">product portfolio.</st>
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="77082">正如我们所见，Azure Application</st> <st c="77117">Insights 是一个企业级的应用程序性能管理
    PaaS 解决方案，我们可以轻松地将其集成到我们的 Power Platform</st> <st c="77252">产品组合中。</st>
- en: <st c="77270">Now, we will delve into our final topic, the world of feature
    flags, and what they can bring to our Power</st> <st c="77377">Platform solutions.</st>
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="77270">现在，我们将深入探讨最后一个主题——功能标志的世界，以及它们能为我们的 Power</st> <st c="77377">Platform
    解决方案带来什么。</st>
- en: <st c="77396">Exercise – introducing feature flags</st>
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="77396">练习 - 引入功能标志</st>
- en: <st c="77433">In custom development projects,</st> **<st c="77466">feature flags</st>**
    <st c="77479">are used to turn on or off features</st> <st c="77515">of applications.</st>
    <st c="77533">Agile teams benefit from this concept very much because features
    with great impact and long development time, which span over multiple sprints,
    can be kept hidden from end users until they are fully developed.</st> <st c="77743">Consider
    features such as enabling the Copilot feature in Microsoft Azure or making GitHub
    Copilot available in public repositories.</st> <st c="77876">These features were
    developed behind feature flags before they were released to the public audience.</st>
    <st c="77977">We also very often use feature flags to turn on new features for
    a group of users (e.g., users who participate in beta-testing activities).</st>
    <st c="78117">The aforementioned Copilots were first available as a private preview
    for dedicated customers, then they went to the public preview stage, and finally,
    they became</st> <st c="78281">generally available.</st>
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="77433">在自定义开发项目中，</st> **<st c="77466">功能标志</st>** <st c="77479">用于启用或禁用应用程序的功能。</st>
    <st c="77515">敏捷团队非常受益于这一概念，因为具有重大影响和较长开发周期的功能，跨越多个冲刺，可以在完全开发之前对最终用户保持隐藏。</st>
    <st c="77743">考虑一些功能，例如启用 Microsoft Azure 中的 Copilot 功能或在公共仓库中提供 GitHub Copilot。</st>
    <st c="77876">这些功能在向公众发布之前，都是在功能标志下开发的。</st> <st c="77977">我们也经常使用功能标志来为一组用户（例如参与
    Beta 测试活动的用户）启用新功能。</st> <st c="78117">上述的 Copilot 功能最初是作为专门客户的私人预览版提供的，之后进入了公共预览阶段，最终它们变得</st>
    <st c="78281">全面可用。</st>
- en: <st c="78301">The solution-specific</st> **<st c="78324">environment variables</st>**
    <st c="78345">in Power Platform can provide this feature flag capability, if we</st>
    <st c="78411">use it in front of new features.</st> <st c="78445">To use environment
    variables in Power Platform solutions as feature flags, we can follow</st> <st
    c="78534">these steps:</st>
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="78301">特定于解决方案的</st> **<st c="78324">环境变量</st>** <st c="78345">在 Power
    Platform 中可以提供此功能标志能力，前提是我们</st> <st c="78411">在新功能前使用它。</st> <st c="78445">要在
    Power Platform 解决方案中将环境变量用作功能标志，我们可以按照</st> <st c="78534">以下步骤操作：</st>
- en: <st c="78546">Create an environment variable within our solution.</st> <st c="78599">This
    can be done by selecting</st> **<st c="78629">New</st>** <st c="78632">|</st>
    **<st c="78635">More</st>** <st c="78639">| the</st> **<st c="78646">Environment</st>**
    <st c="78657">variable in the solution we are</st> <st c="78690">working on.</st>
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="78546">在我们的解决方案中创建一个环境变量。</st> <st c="78599">这可以通过选择</st> **<st c="78629">新建</st>**
    <st c="78632">|</st> **<st c="78635">更多</st>** <st c="78639">| 解决方案中的</st> **<st
    c="78646">环境变量</st>** <st c="78657">来完成，我们正在</st> <st c="78690">进行的工作。</st>
- en: <st c="78701">Set the data type for the environment variable, which can be</st>
    `<st c="78763">Boolean</st>`<st c="78770">,</st> `<st c="78772">Option Set</st>`<st
    c="78782">, or</st> `<st c="78787">Text</st>`<st c="78791">, depending on what
    we need for the</st> <st c="78827">feature flag.</st>
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="78701">设置环境变量的数据类型，可以是</st> `<st c="78763">布尔值</st>`<st c="78770">、</st>
    `<st c="78772">选项集</st>`<st c="78782">，或</st> `<st c="78787">文本</st>`<st c="78791">，具体取决于我们为</st>
    <st c="78827">功能标志所需的类型。</st>
- en: <st c="78840">Use the environment variable in our solution components, such
    as Power Automate flows, Power Apps canvas apps, or custom connectors.</st> <st
    c="78974">For Power Apps, we can access the environment variable value using the</st>
    `<st c="79045">LookUp()</st>` <st c="79053">PowerFX function, and for Power Automate,
    we can use Dataverse’s</st> `<st c="79119">Perform an outbound action</st>` <st
    c="79145">with the action</st> <st c="79162">name</st> `<st c="79167">RetrieveEnvironmentVariableSecretValue</st>`<st
    c="79205">.</st>
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="78840">在我们的解决方案组件中使用环境变量，例如Power Automate流、Power Apps画布应用或自定义连接器。</st>
    <st c="78974">对于Power Apps，我们可以使用</st> `<st c="79045">LookUp()</st>` <st c="79053">PowerFX函数来访问环境变量的值，对于Power
    Automate，我们可以使用Dataverse的</st> `<st c="79119">执行外部操作</st>` <st c="79145">，并选择操作</st>
    <st c="79162">名称</st> `<st c="79167">RetrieveEnvironmentVariableSecretValue</st>`<st
    c="79205">。</st>
- en: <st c="79206">Deploy our solution to different environments, and change the
    environment variable value according to our feature flag settings.</st> <st c="79336">This
    allows us to enable or disable certain features or functionalities based on the</st>
    <st c="79421">environment settings.</st>
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="79206">将我们的解决方案部署到不同的环境，并根据我们的功能标志设置更改环境变量值。</st> <st c="79336">这使我们能够根据</st>
    <st c="79421">环境设置启用或禁用某些功能或功能。</st>
- en: <st c="79442">Let’s introduce a feature flag</st> <st c="79473">to our Kudos
    app solution to control which label needs to be displayed on the landing page
    – the original one, or the one that we created in the</st> *<st c="79619">Exercise
    – building CD pipelines and a release train</st>* <st c="79671">section earlier
    in</st> <st c="79691">this chapter:</st>
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="79442">让我们为我们的Kudos应用解决方案引入一个功能标志</st> <st c="79473">来控制登陆页面上需要显示哪个标签——是原始的标签，还是我们在</st>
    *<st c="79619">练习——构建CD管道和发布列车</st>* <st c="79671">一节中早些时候创建的标签：</st>
- en: '![Figure 8.30 – An environment variable as a feature flag](img/B22208_08_30.jpg)'
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 8.30 – 作为功能标志的环境变量](img/B22208_08_30.jpg)'
- en: <st c="80127">Figure 8.30 – An environment variable as a feature flag</st>
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="80127">图 8.30 – 作为功能标志的环境变量</st>
- en: <st c="80182">We define this</st> <st c="80198">environment variable with the</st>
    `<st c="80228">Boolean</st>` <st c="80235">data type and its default value is
    set to</st> `<st c="80427">featureFlagLabel</st>`<st c="80443">.</st>
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="80182">我们定义这个</st> <st c="80198">环境变量，数据类型为</st> `<st c="80228">布尔</st>`
    <st c="80235">，并将其默认值设置为</st> `<st c="80427">featureFlagLabel</st>`<st c="80443">。</st>
- en: <st c="80444">To read the value of an environment variable in a canvas app using
    PowerFX, we can use the</st> <st c="80536">following method:</st>
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="80444">要在画布应用中使用PowerFX读取环境变量的值，我们可以使用以下方法：</st>
- en: <st c="80553">Make sure we have added the</st> `<st c="80582">Environment Variable
    Values</st>` <st c="80609">table to our canvas app’s</st> <st c="80636">data sources.</st>
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="80553">确保我们已将</st> `<st c="80582">环境变量值</st>` <st c="80609">表添加到我们的画布应用的数据源中。</st>
- en: <st c="80649">Use the</st> `<st c="80658">LookUp()</st>` <st c="80666">function
    with the schema name of our environment variable – for example,</st> `<st c="80740">LookUp('Environment
    Variable Values', 'Environment Variable Definition'.'Schema Name' = "</st>``<st
    c="80829">YourEnvironmentVariableSchemaName").Value</st>`<st c="80871">.</st>
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="80649">使用</st> `<st c="80658">LookUp()</st>` <st c="80666">函数，结合我们环境变量的架构名称——例如，</st>
    `<st c="80740">LookUp('环境变量值', '环境变量定义'.'架构名称' = "</st>``<st c="80829">YourEnvironmentVariableSchemaName").Value</st>`<st
    c="80871">。</st>
- en: <st c="80872">This will retrieve the current value of the environment variable</st>
    <st c="80938">we specified.</st>
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="80872">这将检索我们指定的环境变量的当前值。</st> <st c="80938">。</st>
- en: <st c="80951">Let’s open our Kudos app to edit</st> <st c="80984">from our solution,
    and then introduce the new data source,</st> `<st c="81044">Environment Variable
    Values</st>`<st c="81071">. After that, we need to change the</st> `<st c="81107">Text</st>`
    <st c="81111">property of</st> `<st c="81124">lblTitle_LandingScreen</st>` <st
    c="81146">from static text to</st> <st c="81167">the following:</st>
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="80951">让我们打开我们的Kudos应用来编辑</st> <st c="80984">从我们的解决方案中，然后引入新的数据源，</st>
    `<st c="81044">环境变量值</st>`<st c="81071">。之后，我们需要将</st> `<st c="81107">文本</st>`
    <st c="81111">属性从</st> `<st c="81124">lblTitle_LandingScreen</st>` <st c="81146">的静态文本更改为</st>
    <st c="81167">以下内容：</st>
- en: '[PRE24]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: <st c="81513">As we learned in the first section of this chapter, deployment
    settings files do not only contain connection references but also environment
    variables.</st> <st c="81666">Our</st> `<st c="81670">deploymentSettings.json</st>`
    <st c="81693">file is located under</st> `<st c="81716">\src\mpa_Kudos\deploymentSettings.json</st>`<st
    c="81754">. With the help of the</st> `<st c="81777">cat</st>` <st c="81780">command,
    we have already updated this file in our GitHub workflows (</st>*<st c="81849">Release
    to Production</st>* <st c="81871">and</st> *<st c="81876">Import to dev</st>*<st
    c="81889">) regarding</st> <st c="81902">connection references:</st>
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="81513">正如我们在本章第一节中所学到的，部署设置文件不仅包含连接引用，还包含环境变量。</st> <st c="81666">我们的</st>
    `<st c="81670">deploymentSettings.json</st>` <st c="81693">文件位于</st> `<st c="81716">\src\mpa_Kudos\deploymentSettings.json</st>`<st
    c="81754">。在</st> `<st c="81777">cat</st>` <st c="81780">命令的帮助下，我们已经在 GitHub 工作流中更新了此文件（</st>*<st
    c="81849">发布到生产环境</st>* <st c="81871">和</st> *<st c="81876">导入到开发环境</st>*<st c="81889">），关于连接引用：</st>
- en: '[PRE25]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: <st c="82653">Similarly, we can update the values of environment variables in
    this JSON file to fully automate them in our deployment pipelines.</st> <st c="82785">We
    just need</st> <st c="82797">to replace the</st> `<st c="82813">.ConnectionReferences[]</st>`
    <st c="82836">array with the</st> `<st c="82852">.EnvironmentVariables[]</st>`
    <st c="82875">one to adjust</st> <st c="82890">our variables.</st>
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="82653">类似地，我们可以更新此 JSON 文件中的环境变量值，以便在部署管道中完全自动化它们。</st> <st c="82785">我们只需</st>
    <st c="82797">将</st> `<st c="82813">.ConnectionReferences[]</st>` <st c="82836">数组替换为</st>
    `<st c="82852">.EnvironmentVariables[]</st>` <st c="82875">数组来调整</st> <st c="82890">我们的变量。</st>
- en: <st c="82904">In this section, we learned how we can use environment variables
    to add feature flags to our applications and</st> <st c="83015">cloud flows.</st>
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="82904">在本节中，我们学习了如何利用环境变量将功能标志添加到我们的应用程序和</st> <st c="83015">云流中。</st>
- en: <st c="83027">Summary</st>
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="83027">总结</st>
- en: <st c="83035">In this chapter, we embarked on an exciting journey, diving into
    the practical application of DevOps and ALM principles.</st> <st c="83157">We
    explored a variety of hands-on exercises, from mastering repository branch strategies
    to constructing robust CD pipelines, managing backlogs effectively, and enforcing
    branch protection rules.</st> <st c="83353">We also delved into automated testing
    of our solutions, monitored our application’s performance in runtime with APM,
    and harnessed the power of feature flags.</st> <st c="83512">These exercises were
    not just theoretical; we also applied them to a real-world example, utilizing
    GitHub as our DevOps tool of choice.</st> <st c="83648">Through these practical
    walkthroughs, we’ve woven every thread of DevOps and ALM into a</st> [<st c="83735">hands-on</st>
    <st c="83745">experience tapestry.</st>](https://learn.microsoft.com/en-us/power-platform/enterprise-templates/overview)
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="83035">在本章中，我们踏上了一段激动人心的旅程，深入探讨了 DevOps 和 ALM 原则的实际应用。</st> <st c="83157">我们通过各种实践练习，掌握了从存储库分支策略到构建稳健的
    CD 管道、有效管理待办事项以及强制执行分支保护规则等内容。</st> <st c="83353">我们还深入探讨了解决方案的自动化测试，通过 APM 监控应用程序在运行时的性能，并利用功能标志的强大功能。</st>
    <st c="83512">这些练习不仅仅是理论上的；我们还将其应用于一个真实世界的例子，利用 GitHub 作为我们首选的 DevOps 工具。</st>
    <st c="83648">通过这些实践教程，我们将 DevOps 和 ALM 的每一个环节编织成了一个</st> [<st c="83735">实践</st>
    <st c="83745">经验的画卷。</st>](https://learn.microsoft.com/en-us/power-platform/enterprise-templates/overview)
- en: '[<st c="83765">In the forthcoming chapter, we will delve into</st>](https://learn.microsoft.com/en-us/power-platform/enterprise-templates/overview)
    <st c="83813">fusion architecture and see how we can leverage Azure PaaS services
    in our Power</st> <st c="83894">Platform solutions.</st>'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[<st c="83765">在接下来的章节中，我们将深入探讨</st>](https://learn.microsoft.com/en-us/power-platform/enterprise-templates/overview)
    <st c="83813">融合架构，并查看如何在我们的 Power</st> <st c="83894">Platform 解决方案中利用 Azure PaaS
    服务。</st>'
- en: <st c="83913">Further reading</st>
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="83913">进一步阅读</st>
- en: <st c="83929">Power Platform Enterprise</st> <st c="83956">template:</st> [<st
    c="83966">https://learn.microsoft.com/en-us/power-platform/enterprise-templates/overview</st>](https://learn.microsoft.com/en-us/power-platform/enterprise-templates/overview)
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="83929">Power Platform 企业版</st> <st c="83956">模板：</st> [<st c="83966">https://learn.microsoft.com/en-us/power-platform/enterprise-templates/overview</st>](https://learn.microsoft.com/en-us/power-platform/enterprise-templates/overview)
- en: <st c="84044">Kudos</st> <st c="84051">application:</st> [<st c="84064">https://learn.microsoft.com/en-us/power-platform/enterprise-templates/hr/employee-kudos/install-and-set-up</st>](https://learn.microsoft.com/en-us/power-platform/enterprise-templates/hr/employee-kudos/install-and-set-up)
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="84044">Kudos</st> 应用程序： [<st c="84064">https://learn.microsoft.com/zh-cn/power-platform/enterprise-templates/hr/employee-kudos/install-and-set-up</st>](https://learn.microsoft.com/zh-cn/power-platform/enterprise-templates/hr/employee-kudos/install-and-set-up)
- en: <st c="84170">The GitHub</st> <st c="84182">CLI:</st> <st c="84187">https://github.com/cli/cli</st>
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="84170">GitHub</st> CLI： [<st c="84187">https://github.com/cli/cli</st>](https://github.com/cli/cli)
- en: <st c="84213">The GitHub CLI with GitHub</st> <st c="84241">Copilot:</st> [<st
    c="84250">https://docs.github.com/en/copilot/github-copilot-in-the-cli/using-github-copilot-in-the-cli</st>](https://docs.github.com/en/copilot/github-copilot-in-the-cli/using-github-copilot-in-the-cli)
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="84213">GitHub CLI 与 GitHub</st> Copilot： [<st c="84250">https://docs.github.com/zh-cn/copilot/github-copilot-in-the-cli/using-github-copilot-in-the-cli</st>](https://docs.github.com/zh-cn/copilot/github-copilot-in-the-cli/using-github-copilot-in-the-cli)
- en: <st c="84342">Pre-populate connection</st> <st c="84367">references:</st> [<st
    c="84379">https://learn.microsoft.com/en-us/power-platform/alm/conn-ref-env-variables-build-tools#get-the-connection-reference-information</st>](https://learn.microsoft.com/en-us/power-platform/alm/conn-ref-env-variables-build-tools#get-the-connection-reference-information)
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="84342">预填充连接</st> 引用： [<st c="84379">https://learn.microsoft.com/zh-cn/power-platform/alm/conn-ref-env-variables-build-tools#get-the-connection-reference-information</st>](https://learn.microsoft.com/zh-cn/power-platform/alm/conn-ref-env-variables-build-tools#get-the-connection-reference-information)
- en: <st c="84507">GitHub</st> <st c="84515">environments:</st> [<st c="84529">https://docs.github.com/en/actions/learn-github-actions/variables#using-the-vars-context-to-access-configuration-variable-values</st>](https://docs.github.com/en/actions/learn-github-actions/variables#using-the-vars-context-to-access-configuration-variable-values)
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="84507">GitHub</st> 环境： [<st c="84529">https://docs.github.com/zh-cn/actions/learn-github-actions/variables#using-the-vars-context-to-access-configuration-variable-values</st>](https://docs.github.com/zh-cn/actions/learn-github-actions/variables#using-the-vars-context-to-access-configuration-variable-values)
- en: <st c="84657">GitHub</st> <st c="84665">outputs:</st> [<st c="84674">https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs</st>](https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs)
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="84657">GitHub</st> 输出： [<st c="84674">https://docs.github.com/zh-cn/actions/using-jobs/defining-outputs-for-jobs</st>](https://docs.github.com/zh-cn/actions/using-jobs/defining-outputs-for-jobs)
- en: <st c="84745">GitHub jobs and</st> <st c="84762">needs:</st> [<st c="84769">https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow</st>](https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow)
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="84745">GitHub 作业和</st> 需求： [<st c="84769">https://docs.github.com/zh-cn/actions/using-jobs/using-jobs-in-a-workflow</st>](https://docs.github.com/zh-cn/actions/using-jobs/using-jobs-in-a-workflow)
- en: <st c="84839">GitHub composite</st> <st c="84857">actions:</st> [<st c="84866">https://docs.github.com/en/actions/creating-actions/creating-a-composite-action</st>](https://docs.github.com/en/actions/creating-actions/creating-a-composite-action)
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="84839">GitHub 复合</st> 操作： [<st c="84866">https://docs.github.com/zh-cn/actions/creating-actions/creating-a-composite-action</st>](https://docs.github.com/zh-cn/actions/creating-actions/creating-a-composite-action)
- en: <st c="84945">GitHub pull</st> <st c="84958">requests:</st> [<st c="84968">https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests</st>](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="84945">GitHub 拉取</st> 请求： [<st c="84968">https://docs.github.com/zh-cn/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests</st>](https://docs.github.com/zh-cn/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)
- en: <st c="85111">GitHub</st> <st c="85119">Marketplace:</st> [<st c="85132">https://github.com/marketplace</st>](https://github.com/marketplace)
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="85111">GitHub</st> 市场： [<st c="85132">https://github.com/marketplace</st>](https://github.com/marketplace)
- en: <st c="85162">Power Apps Test</st> <st c="85179">Engine:</st> [<st c="85187">https://learn.microsoft.com/en-us/power-apps/developer/test-engine/overview</st>](https://learn.microsoft.com/en-us/power-apps/developer/test-engine/overview)
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="85162">Power Apps 测试</st> 引擎： [<st c="85187">https://learn.microsoft.com/zh-cn/power-apps/developer/test-engine/overview</st>](https://learn.microsoft.com/zh-cn/power-apps/developer/test-engine/overview)
- en: <st c="85262">Working with Power Apps Test</st> <st c="85292">Studio:</st> [<st
    c="85300">https://learn.microsoft.com/en-us/power-apps/maker/canvas-apps/working-with-test-studio</st>](https://learn.microsoft.com/en-us/power-apps/maker/canvas-apps/working-with-test-studio)
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="85262">使用 Power Apps 测试</st> <st c="85292">工作室：</st> [<st c="85300">https://learn.microsoft.com/en-us/power-apps/maker/canvas-apps/working-with-test-studio</st>](https://learn.microsoft.com/en-us/power-apps/maker/canvas-apps/working-with-test-studio)
- en: <st c="85387">Azure Application Insights</st> <st c="85415">overview:</st> [<st
    c="85425">https://learn.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview</st>](https://learn.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview)
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="85387">Azure 应用程序洞察</st> <st c="85415">概述：</st> [<st c="85425">https://learn.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview</st>](https://learn.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview)
- en: <st c="85504">Metric</st> <st c="85512">alerts:</st> [<st c="85520">https://learn.microsoft.com/en-us/azure/azure-monitor/alerts/tutorial-metric-alert</st>](https://learn.microsoft.com/en-us/azure/azure-monitor/alerts/tutorial-metric-alert)
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="85504">指标</st> <st c="85512">警报：</st> [<st c="85520">https://learn.microsoft.com/en-us/azure/azure-monitor/alerts/tutorial-metric-alert</st>](https://learn.microsoft.com/en-us/azure/azure-monitor/alerts/tutorial-metric-alert)
- en: <st c="85602">Action</st> <st c="85610">groups:</st> [<st c="85618">https://learn.microsoft.com/en-us/azure/azure-monitor/alerts/action-groups</st>](https://learn.microsoft.com/en-us/azure/azure-monitor/alerts/action-groups)
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="85602">操作</st> <st c="85610">组：</st> [<st c="85618">https://learn.microsoft.com/en-us/azure/azure-monitor/alerts/action-groups</st>](https://learn.microsoft.com/en-us/azure/azure-monitor/alerts/action-groups)
- en: <st c="85692">Power Apps with Application</st> <st c="85721">Insights:</st>
    [<st c="85731">https://learn.microsoft.com/en-us/power-apps/maker/canvas-apps/application-insights</st>](https://learn.microsoft.com/en-us/power-apps/maker/canvas-apps/application-insights)
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="85692">Power Apps 与应用程序</st> <st c="85721">洞察：</st> [<st c="85731">https://learn.microsoft.com/en-us/power-apps/maker/canvas-apps/application-insights</st>](https://learn.microsoft.com/en-us/power-apps/maker/canvas-apps/application-insights)
- en: <st c="85814">An overview of Application Insights</st> <st c="85851">integration:</st>
    [<st c="85864">https://learn.microsoft.com/en-us/power-platform/admin/overview-integration-application-insights</st>](https://learn.microsoft.com/en-us/power-platform/admin/overview-integration-application-insights)
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="85814">应用程序洞察</st> <st c="85851">集成概述：</st> [<st c="85864">https://learn.microsoft.com/en-us/power-platform/admin/overview-integration-application-insights</st>](https://learn.microsoft.com/en-us/power-platform/admin/overview-integration-application-insights)
- en: <st c="85960">Export data to Application</st> <st c="85988">Insights:</st> [<st
    c="85998">https://learn.microsoft.com/en-us/power-platform/admin/set-up-export-application-insights</st>](https://learn.microsoft.com/en-us/power-platform/admin/set-up-export-application-insights)
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="85960">将数据导出到应用程序</st> <st c="85988">洞察：</st> [<st c="85998">https://learn.microsoft.com/en-us/power-platform/admin/set-up-export-application-insights</st>](https://learn.microsoft.com/en-us/power-platform/admin/set-up-export-application-insights)
- en: <st c="86087">Power Pages and Application</st> <st c="86116">Insights:</st>
    [<st c="86126">https://learn.microsoft.com/en-us/power-pages/go-live/telemetry-monitoring</st>](https://learn.microsoft.com/en-us/power-pages/go-live/telemetry-monitoring)
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="86087">Power Pages 和应用程序</st> <st c="86116">洞察：</st> [<st c="86126">https://learn.microsoft.com/en-us/power-pages/go-live/telemetry-monitoring</st>](https://learn.microsoft.com/en-us/power-pages/go-live/telemetry-monitoring)
- en: <st c="86200">Environment</st> <st c="86213">variables:</st> [<st c="86224">https://learn.microsoft.com/en-us/power-apps/maker/data-platform/environmentvariables</st>](https://learn.microsoft.com/en-us/power-apps/maker/data-platform/environmentvariables)
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="86200">环境</st> <st c="86213">变量：</st> [<st c="86224">https://learn.microsoft.com/en-us/power-apps/maker/data-platform/environmentvariables</st>](https://learn.microsoft.com/en-us/power-apps/maker/data-platform/environmentvariables)
- en: <st c="86309">Power Automate automation</st> <st c="86336">center:</st> [<st
    c="86344">https://learn.microsoft.com/en-us/power-automate/automation-center-overview</st>](https://learn.microsoft.com/en-us/power-automate/automation-center-overview)
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="86309">Power Automate 自动化</st> <st c="86336">中心：</st> [<st c="86344">https://learn.microsoft.com/en-us/power-automate/automation-center-overview</st>](https://learn.microsoft.com/en-us/power-automate/automation-center-overview)
- en: '[PRE26]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: <st c="0">Part 3:Exploring DevOps Best Practices and the Road Ahead</st>
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">第 3 部分：探索 DevOps 最佳实践及未来发展</st>
- en: <st c="58">In this part, we will be exploring the possibilities of building
    fusion teams, where pro developers and DevOps engineers can help with the low-code/no-code
    development approach.</st> <st c="237">We will understand how culture plays a
    significant role in faster development cycles and the importance of building reusable
    components.</st> <st c="374">We will look at how Microsoft Azure cloud services
    can integrate with Power Platform solutions.</st> <st c="470">Pro developers will
    understand how extensible Power Platform is with the ability to utilize custom
    code components that can extend the capabilities of Power Platform.</st> <st c="637">We
    will conclude this chapter by investigating how artificial intelligence has changed
    the way we develop our business applications and how it enables us to build custom
    copilots that not only support our DevOps process but also enrich our</st> <st
    c="877">business solutions.</st>
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="58">在本部分中，我们将探索构建融合团队的可能性，在这些团队中，专业开发者和 DevOps 工程师可以帮助低代码/无代码开发方法的实施。</st>
    <st c="237">我们将了解文化如何在更快的开发周期中发挥重要作用，以及构建可重用组件的重要性。</st> <st c="374">我们将看看 Microsoft
    Azure 云服务如何与 Power Platform 解决方案进行集成。</st> <st c="470">专业开发者将了解 Power Platform
    的可扩展性，并能够利用自定义代码组件，扩展 Power Platform 的功能。</st> <st c="637">我们将通过研究人工智能如何改变我们开发业务应用程序的方式，来总结本章内容，探讨它如何帮助我们构建定制的副驾驶，不仅支持我们的
    DevOps 流程，还能丰富我们的</st> <st c="877">业务解决方案。</st>
- en: <st c="896">This part has the</st> <st c="915">following chapters:</st>
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="896">本部分包括以下章节：</st>
- en: '[*<st c="934">Chapter 9</st>*](B22208_09.xhtml#_idTextAnchor149)<st c="944">,</st>
    *<st c="946">Implementing the Fusion Development Approach</st>*'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*<st c="934">第 9 章</st>*](B22208_09.xhtml#_idTextAnchor149)<st c="944">，</st>
    *<st c="946">实施融合开发方法</st>*'
- en: '[*<st c="990">Chapter 10</st>*](B22208_10.xhtml#_idTextAnchor172)<st c="1001">,</st>
    *<st c="1003">Enabling Pro-Dev Extensibility in Power Platform</st>*'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*<st c="990">第 10 章</st>*](B22208_10.xhtml#_idTextAnchor172)<st c="1001">，</st>
    *<st c="1003">在 Power Platform 中实现专业开发者扩展性</st>*'
- en: '[*<st c="1051">Chapter 11</st>*](B22208_11.xhtml#_idTextAnchor208)<st c="1062">,</st>
    *<st c="1064">Managing the Environment Life Cycle with Design Best Practices</st>*'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*<st c="1051">第 11 章</st>*](B22208_11.xhtml#_idTextAnchor208)<st c="1062">，</st>
    *<st c="1064">通过设计最佳实践管理环境生命周期</st>*'
- en: '[*<st c="1126">Chapter 12</st>*](B22208_12.xhtml#_idTextAnchor231)<st c="1137">,</st>
    *<st c="1139">Looking Ahead with Copilots, ChatOps, and AI-Infused Applications</st>*'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*<st c="1126">第 12 章</st>*](B22208_12.xhtml#_idTextAnchor231)<st c="1137">，</st>
    *<st c="1139">展望副驾驶、ChatOps 和 AI 驱动的应用程序</st>*'
