- en: <st c="0">8</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">8</st>
- en: <st c="2">Continuous Security Monitoring on Azure</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">Azure 上的持续安全监控</st>
- en: <st c="41">In previous chapters, we emphasized that the main objective of DevSecOps
    is to make security a regular part of every phase of the software development
    process.</st> <st c="202">The outcome is that we can catch and fix most security
    issues before the software is deployed in production and goes live.</st> <st c="325">But
    what about security after the software is released?</st> <st c="381">A complete
    DevSecOps strategy should complement the security measures implemented earlier
    in the development process with</st> <st c="503">runtime security.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="41">在前几章中，我们强调了 DevSecOps 的主要目标是将安全性作为软件开发过程每个阶段的常规部分。</st> <st c="202">其结果是，我们可以在软件部署到生产环境并投入使用之前，捕获并修复大多数安全问题。</st>
    <st c="325">那么，软件发布后的安全性如何呢？</st> <st c="381">一个完整的 DevSecOps 策略应当在开发过程早期实施的安全措施基础上，补充运行时安全。</st>
- en: <st c="520">In this chapter, we will</st> <st c="546">cover some key aspects
    of implementing security</st> <st c="594">in the</st> **<st c="601">operate</st>**
    <st c="608">and</st> **<st c="613">monitor</st>** <st c="620">phases of DevOps,
    including implementing runtime vulnerability management, threat detection, and
    threat prevention.</st> <st c="737">By the end of this chapter, you will have
    a solid understanding of</st> <st c="804">the following:</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="520">在本章中，我们将</st> <st c="546">讨论在 DevOps 的</st> **<st c="601">操作</st>**
    <st c="608">和</st> **<st c="613">监控</st>** <st c="620">阶段实施安全性的一些关键方面，包括实施运行时漏洞管理、威胁检测和威胁防护。</st>
    <st c="737">在本章结束时，你将对以下内容有一个坚实的理解：</st>
- en: <st c="818">Understanding continuous monitoring</st> <st c="855">in DevOps</st>
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="818">理解 DevOps 中的持续监控</st> <st c="855">概念</st>
- en: <st c="864">Implementing runtime security gates to prevent</st> <st c="912">critical
    risks</st>
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="864">实施运行时安全门以防止</st> <st c="912">关键风险</st>
- en: <st c="926">Implementing continuous security monitoring for</st> <st c="975">runtime
    environments</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="926">为</st> <st c="975">运行时环境实施持续安全监控</st>
- en: <st c="995">The challenges of runtime protection in modern</st> <st c="1043">cloud
    environments</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="995">现代云环境中运行时保护的挑战</st> <st c="1043">问题</st>
- en: <st c="1061">Protecting applications running in Azure</st> <st c="1103">App
    Service</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1061">保护在 Azure 中运行的应用</st> <st c="1103">App Service</st>
- en: <st c="1114">Protecting container workloads</st> <st c="1146">in Azure</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1114">在 Azure 中保护容器工作负载</st>
- en: <st c="1154">Let’s</st> <st c="1161">get started.</st>
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1154">让我们</st> <st c="1161">开始吧。</st>
- en: <st c="1173">Technical requirements</st>
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1173">技术要求</st>
- en: <st c="1196">To follow along with the instructions in this chapter, you will
    need</st> <st c="1266">the following:</st>
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1196">要跟随本章中的指引，你将需要</st> <st c="1266">以下资源：</st>
- en: <st c="1280">A PC with an</st> <st c="1294">internet connection</st>
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1280">一台具有</st> <st c="1294">互联网连接的 PC</st>
- en: <st c="1313">An active</st> <st c="1324">Azure subscription</st>
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1313">一个有效的</st> <st c="1324">Azure 订阅</st>
- en: <st c="1342">An Azure</st> <st c="1352">DevOps organization</st>
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1342">一个 Azure</st> <st c="1352">DevOps 组织</st>
- en: <st c="1371">A GitHub</st> <st c="1381">enterprise organization</st>
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1371">一个 GitHub</st> <st c="1381">企业组织</st>
- en: <st c="1404">Understanding continuous monitoring in DevOps</st>
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1404">理解 DevOps 中的持续监控</st>
- en: <st c="1450">The fifth</st> <st c="1461">practice of DevOps that we introduced
    in the opening</st> <st c="1514">chapter of this book is</st> **<st c="1538">Continuous
    Monitoring</st>** <st c="1559">(</st>**<st c="1561">CM</st>**<st c="1563">).</st>
    <st c="1567">CM involves two main tasks –</st> **<st c="1596">gathering user feedback</st>**
    <st c="1619">and</st> **<st c="1624">collecting real-time telemetry data</st>**<st
    c="1659">. User feedback is used to set future</st> <st c="1697">priorities.</st>
    <st c="1709">Telemetry data is used to quickly detect and address operational
    issues, reduce downtime, and uphold service reliability</st> <st c="1830">and
    availability.</st>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1450">我们在本书开篇介绍的 DevOps 第五个实践是</st> **<st c="1538">持续监控</st>** <st c="1559">（</st>**<st
    c="1561">CM</st>**<st c="1563">）</st>。<st c="1567">CM 涉及两个主要任务——</st> **<st c="1596">收集用户反馈</st>**
    <st c="1619">和</st> **<st c="1624">收集实时遥测数据</st>**<st c="1659">。用户反馈用于设定未来的</st>
    <st c="1697">优先事项。</st> <st c="1709">遥测数据用于快速检测并解决操作问题，减少停机时间，维护服务的可靠性</st> <st
    c="1830">和可用性。</st>
- en: <st c="1847">To achieve</st> <st c="1859">this, CM relies on monitoring tools
    for data collection across applications, infrastructure, and networks.</st> <st
    c="1966">In Azure, Application Insights is a key service for CM.</st> <st c="2022">It
    has similar</st> **<st c="2037">Application Performance Management</st>** <st
    c="2071">(</st>**<st c="2073">APM</st>**<st c="2076">) capabilities to Dynatrace
    and Datadog APM.</st> <st c="2122">It can be used to collect data from running
    applications, using either a codeless or code-based approach.</st> <st c="2228">This
    data can then be analyzed to offer insights into application health, live metrics,
    transaction searches, and user behavior (</st>*<st c="2357">Figure 8</st>**<st
    c="2366">.1</st>*<st c="2368">).</st>
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1847">为了实现</st> <st c="1859">这一目标，CM 依赖于跨应用、基础设施和网络的数据收集监控工具。</st> <st
    c="1966">在 Azure 中，应用洞察是 CM 的关键服务。</st> <st c="2022">它具有类似的</st> **<st c="2037">应用性能管理</st>**
    <st c="2071">(</st>**<st c="2073">APM</st>**<st c="2076">) 功能，类似于 Dynatrace 和
    Datadog APM。</st> <st c="2122">它可以用于从运行中的应用收集数据，可以使用无代码或基于代码的方法。</st> <st c="2228">然后可以分析这些数据，以提供有关应用健康、实时指标、事务搜索和用户行为的洞察（</st>*<st
    c="2357">图 8</st>**<st c="2366">.1</st>*<st c="2368">）。</st>
- en: '![Figure 8.1 – An Azure Application Insights overview](img/B19710_08_1.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – Azure 应用洞察概述](img/B19710_08_1.jpg)'
- en: <st c="2742">Figure 8.1 – An Azure Application Insights overview</st>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2742">图 8.1 – Azure 应用洞察概述</st>
- en: <st c="2793">Implementing security in this phase involves extending data collection
    to include security logs and metrics.</st> <st c="2903">These logs and metrics
    can be analyzed to detect unauthorized access attempts, potential security breaches,
    and vulnerabilities.</st> <st c="3032">This process can be complex because modern
    cloud-native applications running on cloud platforms</st> <st c="3128">such as
    Azure often use managed services (e.g., App Service, Function Apps, Container
    Instances, and Container Apps).</st> <st c="3246">These</st> <st c="3252">services
    may have limitations on what security teams can do.</st> <st c="3313">Traditional
    methods, such as agent-based runtime monitoring, are often ineffective in these
    environments.</st> <st c="3419">Another challenge is the distributed nature of
    these applications, which can leave security teams unsure where to start with</st>
    <st c="3544">securing them.</st>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2793">在此阶段实施安全性涉及扩展数据收集，包含安全日志和指标。</st> <st c="2903">这些日志和指标可以分析以检测未经授权的访问尝试、潜在的安全漏洞和弱点。</st>
    <st c="3032">这一过程可能很复杂，因为在像 Azure 这样的云平台上运行的现代云原生应用</st> <st c="3128">通常使用托管服务（例如
    App Service、Function Apps、Container Instances 和 Container Apps）。</st> <st c="3246">这些</st>
    <st c="3252">服务可能对安全团队的操作有所限制。</st> <st c="3313">传统方法，如基于代理的运行时监控，往往在这些环境中无效。</st>
    <st c="3419">另一个挑战是这些应用的分布式特性，这可能使安全团队不确定从哪里开始进行</st> <st c="3544">安全防护。</st>
- en: <st c="3558">Understanding the interconnected risks of Azure and cloud-native
    applications</st>
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="3558">理解 Azure 和云原生应用的相互关联风险</st>
- en: <st c="3636">Modern cloud-native applications are distributed and complex, involving
    multiple technology</st> <st c="3729">stacks, microservices, and external API
    interactions.</st> <st c="3783">In cloud-native</st> <st c="3799">environments,
    code that has gone through the CI/CD pipeline is delivered to run as a container
    (although some organizations still run code directly on hosts).</st> <st c="3958">This
    container runs inside a node, which is managed by a cluster orchestrator such
    as Kubernetes, Service Fabric, or OpenShift, or by a platform service such as
    Azure Web Apps, Azure Container Instances, or Azure Functions.</st> <st c="4182">All
    of these operate on the Azure cloud platform (</st>*<st c="4232">Figure 8</st>**<st
    c="4241">.2</st>*<st c="4243">).</st>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3636">现代云原生应用是分布式和复杂的，涉及多个技术</st> <st c="3729">堆栈、微服务和外部 API 交互。</st>
    <st c="3783">在云原生</st> <st c="3799">环境中，通过 CI/CD 管道的代码会作为容器交付运行（尽管一些组织仍然直接在主机上运行代码）。</st>
    <st c="3958">该容器在节点内部运行，由集群协调器管理，例如 Kubernetes、Service Fabric 或 OpenShift，或由平台服务管理，如
    Azure Web Apps、Azure 容器实例或 Azure Functions。</st> <st c="4182">所有这些都运行在 Azure 云平台上（</st>*<st
    c="4232">图 8</st>**<st c="4241">.2</st>*<st c="4243">）。</st>
- en: '![Figure 8.2 – An intersection of risks for cloud-native applications](img/B19710_08_2.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – 云原生应用的风险交集](img/B19710_08_2.jpg)'
- en: <st c="4337">Figure 8.2 – An intersection of risks for cloud-native applications</st>
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4337">图 8.2 – 云原生应用的风险交集</st>
- en: <st c="4404">The reason why securing modern cloud-native applications is complex
    is that each part of this stack operates under different security models.</st>
    <st c="4547">The security model for container orchestrators such as Kubernetes
    and OpenShift is different from the security model for cloud services</st> <st
    c="4683">such as Function Apps and Container Apps, which in turn is different
    from the security model for Windows and Linux nodes.</st> <st c="4805">The scale
    of the cloud and the fast pace of development add to this complexity.</st> <st
    c="4885">Runtime cloud-native application security in Azure must be considered
    together due to their interconnectedness, creating an</st> **<st c="5009">intersection</st>**
    **<st c="5022">of risks</st>**<st c="5030">.</st>
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4404">保护现代云原生应用程序的复杂性在于，每个部分的安全模型都不同。</st> <st c="4547">例如，容器编排工具如 Kubernetes
    和 OpenShift 的安全模型与云服务</st> <st c="4683">（如函数应用和容器应用）的安全模型不同，而后者又与 Windows 和 Linux
    节点的安全模型不同。</st> <st c="4805">云的规模和快速发展的步伐使这一复杂性进一步加剧。</st> <st c="4885">Azure
    中的运行时云原生应用安全必须考虑其互联性，从而形成一个</st> **<st c="5009">风险交集</st>** **<st c="5022">。</st>**
- en: <st c="5031">A malicious</st> <st c="5044">user gaining shell access in a running
    container could exfiltrate source code, keys, tokens, and credentials, potentially
    compromising other services in a cloud platform.</st> <st c="5215">They could
    also exploit container permissions to compromise cluster nodes and access other
    workloads.</st> <st c="5317">Conversely, a weak cloud credential could be used
    to compromise containers in the registry and access source code, encryption keys,
    and sensitive data intended for</st> <st c="5481">the workload.</st>
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5031">恶意</st> <st c="5044">用户通过在运行中的容器中获取 shell 访问权限，可能会窃取源代码、密钥、令牌和凭证，进而可能危及云平台中的其他服务。</st>
    <st c="5215">他们还可能利用容器权限来破坏集群节点并访问其他工作负载。</st> <st c="5317">相反，弱云凭证可能被用来破坏注册表中的容器并访问源代码、加密密钥及用于</st>
    <st c="5481">工作负载的敏感数据。</st>
- en: <st c="5494">To mitigate these risks, our security efforts must focus on two
    key aspects – securing a runtime environment and implementing application security
    at runtime.</st> <st c="5654">Let’s examine these two aspects in detail, starting
    with the</st> <st c="5715">first one.</st>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5494">为了减轻这些风险，我们的安全工作必须集中在两个关键方面——保护运行时环境和在运行时实现应用安全。</st> <st c="5654">让我们详细探讨这两个方面，从</st>
    <st c="5715">第一个方面开始。</st>
- en: <st c="5725">Securing an application runtime environment</st>
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="5725">保护应用程序运行时环境</st>
- en: <st c="5769">Despite our best efforts to address security issues early on, unforeseen
    vulnerabilities can emerge</st> <st c="5870">in software production.</st> <st
    c="5894">Also, the complexity of modern applications means that some risks may
    only become apparent during</st> <st c="5992">actual operation.</st>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5769">尽管我们尽最大努力在早期解决安全问题，但在</st> <st c="5870">软件生产中，无法预见的漏洞可能会出现。</st>
    <st c="5894">此外，现代应用程序的复杂性意味着一些风险可能只在</st> <st c="5992">实际运行时才会显现。</st>
- en: <st c="6009">If we</st> <st c="6016">embrace a</st> **<st c="6026">zero trust</st>**
    <st c="6036">mindset (and we should), we need to accept that no system/process
    is perfectly secure and prepare for possible security breaches.</st> <st c="6167">This
    is known as an “assume breach” mentality.</st> <st c="6214">This is why DevSecOps
    does not stop at deployment.</st> <st c="6265">Runtime security should be integrated
    as a last line of defense to govern, identify, protect, detect, and respond to
    security issues as they happen in live applications and recover from them.</st>
    <st c="6457">The first point of this integration is the implementation of runtime
    gates and guardrails to prevent the most critical risks from being deployed if
    earlier checkpoints</st> <st c="6625">are bypassed.</st>
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6009">如果我们</st> <st c="6016">采纳</st> **<st c="6026">零信任</st>** <st c="6036">的思维方式（而我们应该采纳），我们需要接受没有任何系统或过程是完美安全的，并为可能的安全漏洞做好准备。</st>
    <st c="6167">这被称为“假设入侵”心态。</st> <st c="6214">这也是为什么 DevSecOps 不仅仅停留在部署阶段。</st>
    <st c="6265">运行时安全应作为最后一道防线整合进来，以便在实时应用程序中发生安全问题时进行管理、识别、保护、检测和响应，并从中恢复。</st>
    <st c="6457">这一整合的首要点是实施运行时门控和保护措施，以防止在早期检查点被绕过的情况下部署最关键的风险。</st> <st c="6625">。</st>
- en: <st c="6638">Implementing runtime security gates to stop critical risks</st>
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="6638">实施运行时安全门控以阻止关键风险</st>
- en: <st c="6697">Security</st> <st c="6707">gates serve an important purpose in
    DevSecOps.</st> <st c="6754">They prevent the most serious</st> <st c="6784">software
    risks from being deployed to our production cloud environment.</st> <st c="6856">In</st>
    [*<st c="6859">Chapter 7</st>*](B19710_07.xhtml#_idTextAnchor145)<st c="6868">,
    we covered how to set up security gates in our release pipelines (pipeline security
    gates).</st> <st c="6962">However, it is also possible to implement security gates
    at runtime (runtime security gates), but they have limitations.</st> <st c="7083">Runtime
    security gates work in fewer scenarios compared</st> <st c="7139">to pipeline
    security gates.</st> <st c="7167">Here are some examples of where runtime gates
    can be effective</st> <st c="7230">in Azure:</st>
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6697">安全</st> <st c="6707">门在 DevSecOps 中起着重要作用。</st> <st c="6754">它们防止了最严重的</st>
    <st c="6784">软件风险被部署到我们的生产云环境中。</st> <st c="6856">在</st> [*<st c="6859">第 7 章</st>*](B19710_07.xhtml#_idTextAnchor145)<st
    c="6868">中，我们介绍了如何在发布流水线中设置安全门（流水线安全门）。</st> <st c="6962">然而，也可以在运行时实现安全门（运行时安全门），但它们有一定的局限性。</st>
    <st c="7083">与流水线安全门相比，运行时安全门适用的场景较少。</st> <st c="7139">以下是在 Azure 中运行时安全门可能有效的一些例子：</st>
- en: '**<st c="7239">Azure Policy</st>**<st c="7252">: When creating resources on
    the Azure</st> <st c="7292">cloud platform</st>'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="7239">Azure 策略</st>**<st c="7252">：在 Azure</st> <st c="7292">云平台上创建资源时</st>'
- en: '**<st c="7306">The Kubernetes admission controller</st>**<st c="7342">: When
    deploying containerized solutions/applications to Kubernetes clusters (self-managed
    or managed)</st> <st c="7446">in Azure</st>'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="7306">Kubernetes 入驻控制器</st>**<st c="7342">：在将容器化解决方案/应用程序部署到 Kubernetes
    集群（自管理或托管）</st> <st c="7446">时</st>'
- en: '**<st c="7454">Anti-malware</st>**<st c="7467">: When deploying a packaged
    application to an Azure virtual machine that has an anti-malware/anti-exploit</st>
    <st c="7574">solution installed</st>'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="7454">反恶意软件</st>**<st c="7467">：当将打包应用程序部署到安装了反恶意软件/反漏洞解决方案的 Azure
    虚拟机时</st> <st c="7574">解决方案已安装</st>'
- en: '![Figure 8.3 – Pipeline security gates versus runtime security gates](img/B19710_08_3.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – 流水线安全门与运行时安全门](img/B19710_08_3.jpg)'
- en: <st c="7895">Figure 8.3 – Pipeline security gates versus runtime security gates</st>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7895">图 8.3 – 流水线安全门与运行时安全门</st>
- en: <st c="7961">For</st> <st c="7966">other Azure services, runtime security gates
    are not natively supported, except when we deploy third-party</st> <st c="8073">security
    solutions or create our own custom approach.</st> <st c="8127">For example, when
    deploying a web app to Azure App Service, a microservice to Azure Functions apps,
    or a containerized service to Azure Container Instances, the release pipeline
    security gates are our main defense against the deployment of critical risks.</st>
    <st c="8383">All of these operate on the Azure cloud platform (</st>*<st c="8433">Figure
    8</st>**<st c="8442">.3</st>*<st c="8444">).</st>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7961">对于</st> <st c="7966">其他 Azure 服务，运行时安全门不原生支持，除非我们部署第三方</st> <st
    c="8073">安全解决方案或创建自己的自定义方法。</st> <st c="8127">例如，当将 Web 应用程序部署到 Azure App Service，将微服务部署到
    Azure Functions 应用，或将容器化服务部署到 Azure 容器实例时，发布流水线安全门是我们防御关键风险部署的主要防线。</st> <st c="8383">所有这些操作都在
    Azure 云平台上运行（</st>*<st c="8433">图 8</st>**<st c="8442">.3</st>*<st c="8444">）。</st>
- en: <st c="8447">Implementing runtime security gates using Azure Policy</st>
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="8447">使用 Azure 策略实现运行时安全门</st>
- en: <st c="8502">Azure Policy is a configuration assessment and enforcement service
    in Azure.</st> <st c="8580">It can be used</st> <st c="8595">to review API requests
    before they are processed by the Azure management</st> <st c="8668">plane.</st>
    <st c="8675">It can also</st> <st c="8687">review the settings of resources created
    in Azure.</st> <st c="8738">For our use case as a runtime security gate, it can
    be used to do</st> <st c="8804">the following:</st>
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8502">Azure 策略是 Azure 中的一项配置评估和执行服务。</st> <st c="8580">它可用于</st> <st
    c="8595">在 API 请求被 Azure 管理平面处理之前审查它们。</st> <st c="8668">它还可以</st> <st c="8675">审查在
    Azure 中创建的资源的设置。</st> <st c="8687">对于我们的用例作为运行时安全门，它可以用于执行以下操作：</st>
- en: <st c="8818">Stop new Azure resources from being created if they violate our</st>
    <st c="8883">security policies</st>
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8818">如果新的 Azure 资源违反我们的</st> <st c="8883">安全策略</st>，请阻止其被创建
- en: <st c="8900">Prevent changes to existing resources if they violate our</st>
    <st c="8959">security policies</st>
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8900">如果现有资源违反我们的</st> <st c="8959">安全策略</st>，请阻止其更改
- en: <st c="8976">Note</st>
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8976">备注</st>
- en: <st c="8981">It is not our goal to repeat basic facts about Azure Policy or
    Microsoft Defender for Cloud.</st> <st c="9075">Instead, we will concentrate on
    specific use cases relevant to our discussion.</st> <st c="9154">If you want to
    learn more about these services, check out the book</st> *<st c="9221">Microsoft
    Azure Security Technologies Certification and Beyond</st>* <st c="9283">by</st>
    <st c="9287">Packt Publishing.</st>
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8981">我们的目标不是重复介绍 Azure Policy 或 Microsoft Defender for Cloud 的基础知识。</st>
    <st c="9075">相反，我们将重点讨论与我们讨论内容相关的具体用例。</st> <st c="9154">如果你想了解更多关于这些服务的信息，可以查看这本书</st>
    *<st c="9221">《Microsoft Azure 安全技术认证与实践》</st>* <st c="9283">，由</st> <st c="9287">Packt
    Publishing 出版。</st>
- en: <st c="9304">We can apply policies at different levels of our Azure hierarchy
    – management group, subscription, and resource group.</st> <st c="9424">To make
    assigning policies easier, Azure allows you to group</st> <st c="9485">policies
    as</st> **<st c="9497">initiatives</st>**<st c="9508">. An initiative is simply
    a group of policies that</st> <st c="9559">can be assigned as one entity.</st>
    <st c="9590">Microsoft provides a built-in initiative called the</st> **<st c="9642">Microsoft
    cloud security benchmark</st>** <st c="9676">(</st>*<st c="9678">Figure 8</st>**<st
    c="9686">.4</st>*<st c="9688">) with 241 security-related policies (at the time
    of writing).</st> <st c="9752">Most of the policies in this initiative are set
    to the</st> **<st c="9807">Audit</st>** <st c="9812">effect, which means they
    observe and report violations but do not</st> <st c="9879">block actions.</st>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9304">我们可以在 Azure 层级的不同级别上应用政策——管理组、订阅和资源组。</st> <st c="9424">为了简化政策的分配，Azure
    允许你将政策分组为</st> **<st c="9497">倡议</st>**<st c="9508">。倡议只是一个可以作为一个整体分配的政策组。</st>
    <st c="9559">微软提供了一个内置的倡议，叫做</st> **<st c="9642">微软云安全基准</st>** <st c="9676">(</st>*<st
    c="9678">图 8</st>**<st c="9686">.4</st>*<st c="9688">)，包含了241个与安全相关的政策（截至撰写时）。</st>
    <st c="9752">该倡议中的大部分政策都设置为</st> **<st c="9807">审计</st>** <st c="9812">效果，这意味着它们会观察并报告违规行为，但不会</st>
    <st c="9879">阻止操作。</st>
- en: '![Figure 8.4 – The Microsoft cloud security Azure Policy initiative](img/B19710_08_4.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4 – 微软云安全 Azure Policy 倡议](img/B19710_08_4.jpg)'
- en: <st c="10344">Figure 8.4 – The Microsoft cloud security Azure Policy initiative</st>
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10344">图 8.4 – 微软云安全 Azure Policy 倡议</st>
- en: <st c="10409">Start</st> <st c="10416">by reviewing the policies in this initiative.</st>
    <st c="10462">Identify the ones that pose the most</st> <st c="10499">significant
    risks.</st> <st c="10518">Then, evaluate</st> <st c="10533">the impact of preventing
    these risks from being created by setting the policies to the</st> **<st c="10620">Deny</st>**
    <st c="10624">effect.</st> <st c="10633">Changing a policy to</st> **<st c="10654">Deny</st>**
    <st c="10658">means it will block actions that do not comply, instead of just</st>
    <st c="10723">reporting them.</st>
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10409">首先</st> <st c="10416">回顾此倡议中的政策。</st> <st c="10462">识别出那些带来最大</st>
    <st c="10499">风险的政策。</st> <st c="10518">然后，评估</st> <st c="10533">通过将这些政策设置为</st>
    **<st c="10620">拒绝</st>** <st c="10624">效果来防止这些风险的影响。</st> <st c="10633">将政策更改为</st>
    **<st c="10654">拒绝</st>** <st c="10658">意味着它将阻止不符合要求的操作，而不仅仅是</st> <st c="10723">报告这些操作。</st>
- en: <st c="10738">Implementing runtime security gates using the Kubernetes admission
    controller</st>
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="10738">使用 Kubernetes 入驻控制器实施运行时安全门控</st>
- en: <st c="10816">The</st> <st c="10821">admission controller is a Kubernetes component
    that intercepts</st> <st c="10884">requests to the Kubernetes API server before
    they are processed.</st> <st c="10949">It is commonly</st> <st c="10964">used
    to enforce security and compliance checks.</st> <st c="11012">To make implementing
    the Admission</st> <st c="11047">Controller easier, the CNCF offers the</st> **<st
    c="11086">Open Policy Agent</st>** <st c="11103">(</st>**<st c="11105">OPA</st>**<st
    c="11108">), an open source policy engine.</st> <st c="11142">OPA uses the Rego
    language to define rules, from simple checks (such as ensuring all containers
    have resource limits) to complex, multi-step evaluations.</st> <st c="11296">The
    OPA Gatekeeper Library provides sample templates for common scenarios, such as
    enforcing container image sources, restricting privileged containers, and ensuring
    proper labels.</st> <st c="11477">These can be viewed</st> <st c="11497">on the
    OPA website</st> <st c="11516">here:</st> [<st c="11522">https://open-policy-agent.github.io/gatekeeper-library/website</st>](https://open-policy-agent.github.io/gatekeeper-library/website)<st
    c="11584">.</st>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10816">Admission控制器是一个Kubernetes组件，拦截</st> <st c="10821">对Kubernetes
    API服务器的请求，</st> <st c="10884">在它们被处理之前进行干预。</st> <st c="10949">它通常</st> <st c="10964">用于执行安全性和合规性检查。</st>
    <st c="11012">为了简化实施Admission</st> <st c="11047">控制器，CNCF提供了</st> **<st c="11086">Open
    Policy Agent</st>** <st c="11103">（</st>**<st c="11105">OPA</st>**<st c="11108">），一个开源策略引擎。</st>
    <st c="11142">OPA使用Rego语言来定义规则，从简单的检查（例如确保所有容器都有资源限制）到复杂的多步骤评估。</st> <st c="11296">OPA
    Gatekeeper库提供了常见场景的示例模板，例如强制执行容器镜像来源、限制特权容器以及确保正确的标签。</st> <st c="11477">这些模板可以在</st>
    <st c="11497">OPA网站上查看</st> <st c="11516">，网址如下：</st> [<st c="11522">https://open-policy-agent.github.io/gatekeeper-library/website</st>](https://open-policy-agent.github.io/gatekeeper-library/website)<st
    c="11584">。</st>
- en: <st c="11585">Azure</st> <st c="11592">Policy integrates with OPA to manage
    and enforce policies in</st> **<st c="11653">Azure Kubernetes Service</st>** <st
    c="11677">(</st>**<st c="11679">AKS</st>**<st c="11682">) clusters.</st> <st c="11695">This
    integration allows policies defined at the Azure level to be enforced within Kubernetes
    environments, providing a unified way to manage policies across Azure and Kubernetes.</st>
    <st c="11874">To use this capability, we need to deploy the Azure Policy add-on
    on our Kubernetes clusters.</st> <st c="11968">This can be done at the subscription
    level or for individual clusters.</st> <st c="12039">To enable it at the subscription
    level, we can assign the</st> **<st c="12097">Azure Kubernetes Service clusters
    should have the Azure Policy Add-on for Kubernetes installed</st>** <st c="12191">Azure
    Policy recommendation to our subscription or management group.</st> <st c="12261">It
    is good practice to apply governance</st> <st c="12301">policies at broader levels,
    such as the management group or subscription, to ensure new clusters will automatically
    have the</st> <st c="12426">add-on installed.</st>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11585">Azure</st> <st c="11592">Policy与OPA集成，以管理和执行</st> **<st c="11653">Azure
    Kubernetes Service</st>** <st c="11677">（</st>**<st c="11679">AKS</st>**<st c="11682">）集群中的策略。</st>
    <st c="11695">这种集成使得在Azure层面定义的策略能够在Kubernetes环境中强制执行，提供了一种在Azure和Kubernetes中跨平台管理策略的统一方式。</st>
    <st c="11874">要使用此功能，我们需要在Kubernetes集群中部署Azure Policy插件。</st> <st c="11968">可以在订阅级别或单个集群上执行此操作。</st>
    <st c="12039">要在订阅级别启用它，我们可以将</st> **<st c="12097">Azure Kubernetes Service集群应安装Azure
    Policy插件</st>** <st c="12191">Azure Policy推荐分配给我们的订阅或管理组。</st> <st c="12261">最好在更广泛的层级应用治理</st>
    <st c="12301">策略，例如管理组或订阅，以确保新集群会自动安装该插件。</st>
- en: <st c="12443">At the</st> <st c="12451">time of writing, there are 79 built-in
    Kubernetes-related policies covering areas such</st> <st c="12538">as security,
    authentication and access control, resource management, configuration management,
    compliance, and governance.</st> <st c="12661">For example, the</st> `<st c="13049">^[^/]+.azurecr.io/.+$</st>`
    <st c="13070">ensures that only images from an Azure container registry (</st>`<st
    c="13130">.azurecr.io/</st>`<st c="13142">) can be deployed to the covered</st>
    <st c="13176">Kubernetes clusters.</st>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12443">截至本文写作时，已经有79个内置的Kubernetes相关策略，涵盖了</st> <st c="12451">如安全性、身份验证和访问控制、资源管理、配置管理、合规性和治理等领域。</st>
    <st c="12661">例如，</st> `<st c="13049">^[^/]+.azurecr.io/.+$</st>` <st c="13070">确保只有来自Azure容器注册表（</st>`<st
    c="13130">.azurecr.io/</st>`<st c="13142">）的镜像可以部署到受覆盖的</st> <st c="13176">Kubernetes集群中。</st>
- en: '![Figure 8.5 – Assigning the Azure policy to restrict container registries
    or images permitted in the cluster](img/B19710_08_5.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5 – 为限制集群中允许的容器注册表或镜像分配 Azure 策略](img/B19710_08_5.jpg)'
- en: <st c="13474">Figure 8.5 – Assigning the Azure policy to restrict container
    registries or images permitted in the cluster</st>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13474">图 8.5 – 为限制集群中允许的容器注册表或镜像分配 Azure 策略</st>
- en: <st c="13581">For</st> <st c="13586">each policy that we assign, we can specify
    excluded namespaces, images, and containers.</st> <st c="13674">It</st> <st c="13677">is
    recommended to collaborate with development and DevOps teams who have detailed</st>
    <st c="13759">knowledge of the applications and Kubernetes operations to ensure</st>
    <st c="13825">appropriate exclusions.</st>
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13581">对于</st> <st c="13586">我们分配的每个策略，我们可以指定排除的命名空间、镜像和容器。</st> <st
    c="13674">建议与具有详细</st> <st c="13677">应用程序和 Kubernetes 操作知识的开发和 DevOps 团队合作，以确保</st>
    <st c="13759">适当的排除。</st>
- en: <st c="13848">Note</st>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13848">注意</st>
- en: <st c="13853">Policies with the</st> **<st c="13872">Deny</st>** <st c="13876">effect
    will not impact already deployed containers or resources retroactively.</st> <st
    c="13956">Existing containers will continue to run until they are restarted, updated,</st>
    <st c="14032">or replaced.</st>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13853">具有</st> **<st c="13872">拒绝</st>** <st c="13876">效果的策略不会追溯影响已部署的容器或资源。</st>
    <st c="13956">现有的容器将继续运行，直到它们被重启、更新</st> <st c="14032">或替换。</st>
- en: <st c="14044">In addition to the preceding policy, here are four additional
    policies to consider implementing at</st> <st c="14144">a minimum:</st>
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14044">除了前述策略之外，以下是建议至少考虑实施的四个额外策略：</st>
- en: '*<st c="14154">Policy</st>*<st c="14161">:</st> **<st c="14164">Kubernetes
    cluster pod FlexVolume volumes should only use</st>** **<st c="14222">allowed
    drivers</st>**<st c="14237">.</st>'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*<st c="14154">策略</st>*<st c="14161">:</st> **<st c="14164">Kubernetes 集群中的
    Pod FlexVolume 卷应该仅使用</st>** **<st c="14222">允许的驱动程序</st>**<st c="14237">。</st>'
- en: '*<st c="14238">Background</st>*<st c="14249">: In Kubernetes, a FlexVolume
    is a plugin mechanism that allows users to add storage to their pods using various
    storage drivers.</st> <st c="14380">These drivers are</st> <st c="14398">responsible
    for connecting the pod to the storage backend.</st> <st c="14457">However, if</st>
    <st c="14469">untrusted or malicious drivers are used, they can pose security</st>
    <st c="14533">risks.</st> <st c="14540">For example, malicious drivers might allow
    attackers to gain unauthorized access to sensitive data or exploit</st> <st c="14650">system
    resources.</st>'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*<st c="14238">背景</st>*<st c="14249">: 在 Kubernetes 中，FlexVolume 是一种插件机制，允许用户使用不同的存储驱动程序为他们的
    Pod 添加存储。</st> <st c="14380">这些驱动程序负责</st> <st c="14398">将 Pod 连接到存储后端。</st> <st
    c="14457">然而，如果</st> <st c="14469">使用不受信任或恶意的驱动程序，可能会带来安全</st> <st c="14533">风险。</st>
    <st c="14540">例如，恶意驱动程序可能允许攻击者未经授权访问敏感数据，或者利用</st> <st c="14650">系统资源。</st>'
- en: '*<st c="14667">What the policy does</st>*<st c="14688">: If assigned with a</st>
    **<st c="14710">Deny</st>** <st c="14714">effect, any application pod deployment
    using an unapproved FlexVolume driver will be blocked</st> <st c="14808">from
    deployment.</st>'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*<st c="14667">该策略的作用</st>*<st c="14688">: 如果分配了</st> **<st c="14710">拒绝</st>**
    <st c="14714">效果，任何使用未经批准的 FlexVolume 驱动程序的应用程序 Pod 部署将被阻止</st> <st c="14808">部署。</st>'
- en: '*<st c="14824">Policy</st>*<st c="14831">:</st> `<st c="14938">/proc</st>`
    <st c="14943">filesystem provides a mechanism for the kernel to expose information
    about the system and running processes to userspace.</st> <st c="15066">Instead
    of containing “real” files,</st> `<st c="15102">/proc</st>` <st c="15107">contains
    runtime system information (e.g., system memory, devices mounted, and hardware
    configuration) and details about each process running on the system.</st> <st
    c="15265">Exposing too much information or allowing unrestricted access can lead
    to information leakage and potential exploitation by malicious users.</st> <st
    c="15406">For example, a malicious process could alter kernel parameters to destabilize
    a system or weaken its</st> <st c="15507">security posture.</st>'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*<st c="14824">策略</st>*<st c="14831">:</st> `<st c="14938">/proc</st>` <st
    c="14943">文件系统为内核提供了一种机制，使其能够向用户空间暴露关于系统和正在运行的进程的信息。</st> <st c="15066">它不是包含“真实”文件，</st>
    `<st c="15102">/proc</st>` <st c="15107">包含的是运行时系统信息（例如，系统内存、已挂载设备和硬件配置）以及关于系统上每个进程的详细信息。</st>
    <st c="15265">暴露过多的信息或允许不受限制的访问可能会导致信息泄露并为恶意用户提供潜在的利用机会。</st> <st c="15406">例如，恶意进程可能会更改内核参数以破坏系统稳定性或削弱其</st>
    <st c="15507">安全性。</st>'
- en: <st c="15524">In Kubernetes, within the</st> `<st c="15551">SecurityContext</st>`
    <st c="15566">definition, we can use the</st> `<st c="15594">ProcMount</st>` <st
    c="15603">type to specify how the</st> `<st c="15628">/proc</st>` <st c="15633">filesystem
    is mounted in application containers (see the following example).</st> <st c="15711">There
    are three main ProcMount</st> <st c="15742">types –</st> `<st c="15807">Unmasked</st>`
    <st c="15815">option poses the most risk, as it provides</st> <st c="15859">full
    access to the</st> `<st c="15878">/proc</st>` <st c="15883">filesystem, allowing
    containers to see and manipulate all process information.</st> <st c="15963">This
    could</st> <st c="15974">be exploited to expose sensitive information</st> <st
    c="16019">and system details and, in a worst-case scenario, manipulate</st> <st
    c="16080">kernel parameters:</st>
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<st c="15524">在 Kubernetes 中，在</st>` `<st c="15551">SecurityContext</st>`
    `<st c="15566">定义中，我们可以使用</st>` `<st c="15594">ProcMount</st>` `<st c="15603">类型来指定</st>`
    `<st c="15628">/proc</st>` `<st c="15633">文件系统如何在应用容器中挂载（参见以下示例）。</st>` `<st c="15711">有三种主要的
    ProcMount</st>` `<st c="15742">类型 -</st>` `<st c="15807">Unmasked</st>` `<st c="15815">选项风险最大，因为它提供了对</st>`
    `<st c="15859">/proc</st>` `<st c="15878">文件系统的完全访问权限，允许容器查看并操作所有进程信息。</st>` `<st
    c="15963">这可能被利用来暴露敏感信息</st>` `<st c="15974">和系统细节，并且在最坏的情况下，操纵</st>` `<st c="16019">内核参数：</st>`'
- en: '[PRE0]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="16248">The</st> `<st c="16253">/proc</st>` <st c="16258">filesystem</st>
    <st c="16270">contains a variety of information about the processes</st> <st c="16324">running
    on a system.</st> <st c="16345">If containers use an inappropriate</st> `<st c="16380">ProcMount</st>`
    <st c="16389">type, it could expose sensitive information or system details to
    unauthorized users.</st> <st c="16475">For instance, a</st> `<st c="16491">ProcMount</st>`
    <st c="16500">type that allows full access to</st> `<st c="16533">/proc</st>`
    <st c="16538">can lead to information leakage and potential</st> <st c="16585">security
    breaches.</st>
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<st c="16248">The</st>` `<st c="16253">/proc</st>` `<st c="16258">文件系统</st>`
    `<st c="16270">包含了关于系统上运行的进程的各种信息。</st>` `<st c="16324">如果容器使用不当的</st>` `<st c="16345">ProcMount</st>`
    `<st c="16380">类型，可能会将敏感信息或系统细节暴露给未经授权的用户。</st>` `<st c="16475">例如，一个</st>` `<st
    c="16491">ProcMount</st>` `<st c="16500">类型，允许对</st>` `<st c="16533">/proc</st>`
    `<st c="16538">的完全访问，可能导致信息泄漏和潜在的</st>` `<st c="16585">安全漏洞。</st>`'
- en: '*<st c="16603">What the policy does</st>*<st c="16624">: This policy ensures
    that containers can only use specified ProcMount types, such as the</st> `<st
    c="16715">Default</st>` <st c="16722">ProcMount type, which restricts access.</st>
    <st c="16763">If a container tries to use an unapproved ProcMount type such as</st>
    `<st c="16828">Unmasked</st>` <st c="16836">(as shown in the preceding example),
    the deployment will</st> <st c="16894">be blocked.</st>'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`<st c="16603">策略的作用</st>`* `<st c="16624">: 该策略确保容器只能使用指定的 ProcMount 类型，例如</st>`
    `<st c="16715">Default</st>` `<st c="16722">ProcMount 类型，该类型限制了访问。</st>` `<st
    c="16763">如果容器尝试使用未经批准的 ProcMount 类型，例如</st>` `<st c="16828">Unmasked</st>` `<st
    c="16836">(如前面示例所示)，则部署将</st>` `<st c="16894">被阻止。</st>`'
- en: '*<st c="16905">Policy</st>*<st c="16912">:</st> `<st c="17624">runAsUser</st>`
    <st c="17633">and</st> `<st c="17638">runAsGroup</st>` <st c="17648">fields to
    ensure that containers run with specific approved user and group IDs (see the
    following example).</st> <st c="17757">This practice limits the potential damage
    an attacker can cause if they gain access to a container.</st> <st c="17857">For
    example, running a container with a non-root UID and GID reduces the risk of privilege
    escalation and protects sensitive</st> <st c="17982">system resources:</st>'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`<st c="16905">策略</st>`* `<st c="16912">:</st>` `<st c="17624">runAsUser</st>`
    `<st c="17633">和</st>` `<st c="17638">runAsGroup</st>` `<st c="17648">字段确保容器以特定的批准用户和组
    ID 运行（参见以下示例）。</st>` `<st c="17757">这种做法限制了攻击者如果获得容器访问权限时可能造成的潜在损害。</st>` `<st
    c="17857">例如，使用非 root UID 和 GID 运行容器可以降低特权提升的风险，并保护敏感</st>` `<st c="17982">系统资源：</st>`'
- en: '[PRE1]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*<st c="18156">What the policy does</st>*<st c="18177">: This policy ensures
    that Kubernetes pods and containers only run</st> <st c="18245">with approved
    user and group IDs.</st> <st c="18279">It enforces the</st> <st c="18295">use
    of non-root UIDs and GIDs, such as</st> `<st c="18334">1000</st>` <st c="18338">and</st>
    `<st c="18343">3000</st>`<st c="18347">, respectively, in the preceding example.</st>
    <st c="18389">If a container tries to run with an unapproved</st> <st c="18436">UID
    or GID, the deployment will</st> <st c="18468">be blocked.</st>'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*<st c="18156">该策略的作用</st>*<st c="18177">：此策略确保Kubernetes中的Pod和容器只能使用</st>
    <st c="18245">批准的用户和组ID。</st> <st c="18279">它强制使用非root UID和GID，例如</st> `<st c="18334">1000</st>`
    <st c="18338">和</st> `<st c="18343">3000</st>`<st c="18347">，分别在前面的示例中体现。</st>
    <st c="18389">如果容器尝试使用未批准的</st> <st c="18436">UID或GID，部署将</st> <st c="18468">被阻止。</st>'
- en: '*<st c="18479">Policy</st>*<st c="18486">:</st> `<st c="18925">CAP_SYS_ADMIN</st>`
    <st c="18938">capability has extensive control over the system, including the
    ability to modify system configurations and</st> <st c="19047">mount filesystems.</st>'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*<st c="18479">策略</st>*<st c="18486">：</st> `<st c="18925">CAP_SYS_ADMIN</st>`
    <st c="18938">权限对系统具有广泛的控制，包括修改系统配置和</st> <st c="19047">挂载文件系统的能力。</st>'
- en: <st c="19065">In Kubernetes, the</st> `<st c="19085">securityContext</st>` <st
    c="19100">definition allows you to specify capabilities that a container can add
    or drop (see the following example).</st> <st c="19209">There are two primary
    actions –</st> `<st c="19241">add</st>` <st c="19244">and</st> `<st c="19249">drop</st>`<st
    c="19253">. Adding capabilities to a container increases its privileges, which
    can potentially be exploited by malicious processes to compromise a system.</st>
    <st c="19398">Conversely, dropping capabilities reduces the attack surface by
    limiting the</st> <st c="19475">container’s privileges:</st>
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="19065">在Kubernetes中，</st> `<st c="19085">securityContext</st>` <st c="19100">定义允许你指定容器可以添加或移除的权限（参见以下示例）。</st>
    <st c="19209">主要有两个操作——</st> `<st c="19241">添加</st>` <st c="19244">和</st> `<st
    c="19249">移除</st>`<st c="19253">。向容器添加权限会增加其特权，这可能被恶意进程利用来危害系统。</st> <st c="19398">相反，移除权限通过限制</st>
    <st c="19475">容器的特权来减少攻击面：</st>
- en: '[PRE2]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="19687">In the</st> <st c="19695">preceding example, all capabilities
    are dropped, and</st> <st c="19748">only the</st> `<st c="19757">NET_BIND_SERVICE</st>`
    <st c="19773">capability is added, which</st> <st c="19801">allows the container
    to bind to privileged ports (those</st> <st c="19857">below</st> `<st c="19863">1024</st>`<st
    c="19867">).</st>
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="19687">在</st> <st c="19695">前面的示例中，所有权限都被移除，且</st> <st c="19748">仅添加了</st>
    `<st c="19757">NET_BIND_SERVICE</st>` <st c="19773">权限，允许容器绑定到特权端口（即</st> <st
    c="19857">低于</st> `<st c="19863">1024</st>`<st c="19867">的端口）。</st>
- en: <st c="19870">Granting unnecessary capabilities can lead to significant security
    risks.</st> <st c="19945">For example, a container with</st> `<st c="19975">CAP_NET_ADMIN</st>`
    <st c="19988">can manipulate network configurations, potentially disrupting network
    traffic or snooping on sensitive data.</st> <st c="20098">By controlling which
    capabilities can be used, we mitigate the risk of privilege escalation and</st>
    <st c="20194">system compromise.</st>
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="19870">授予不必要的权限可能会导致重大的安全风险。</st> <st c="19945">例如，具有</st> `<st c="19975">CAP_NET_ADMIN</st>`
    <st c="19988">权限的容器可以操控网络配置，可能会破坏网络流量或窃取敏感数据。</st> <st c="20098">通过控制可以使用的权限，我们可以减轻特权提升和</st>
    <st c="20194">系统受损的风险。</st>
- en: '*<st c="20212">What the policy does</st>*<st c="20233">: This policy ensures
    that containers can only use specified capabilities, thus preventing the use of
    dangerous or unnecessary privileges.</st> <st c="20373">If a container tries to
    add an unapproved capability, the deployment will</st> <st c="20447">be blocked.</st>'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*<st c="20212">该策略的作用</st>*<st c="20233">：此策略确保容器只能使用指定的权限，从而防止使用危险或不必要的特权。</st>
    <st c="20373">如果容器尝试添加未批准的权限，部署将</st> <st c="20447">被阻止。</st>'
- en: <st c="20458">We highly</st> <st c="20469">recommend going through the 79 built-in
    policies, identifying the ones that</st> <st c="20545">pose the most critical
    risks to your organization, and implementing them</st> <st c="20618">with a</st>
    **<st c="20625">Deny</st>** <st c="20629">effect.</st> <st c="20638">Custom policies
    can also be created if the built-in policies do not cover your use cases.</st>
    <st c="20728">Now that we have an understanding of</st> <st c="20765">implementing
    runtime security gates, let’s review how to implement continuous security monitoring
    for our</st> <st c="20871">runtime environments.</st>
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20458">我们强烈</st> <st c="20469">建议您查看 79 个内置策略，识别出对贵组织构成最严重风险的策略，并以</st>
    **<st c="20625">拒绝</st>** <st c="20629">效果实施它们。</st> <st c="20638">如果内置策略无法覆盖您的使用场景，还可以创建自定义策略。</st>
    <st c="20728">现在我们已经了解了</st> <st c="20765">如何实施运行时安全门控，让我们来回顾一下如何实施对我们</st> <st
    c="20871">运行时环境的持续安全监控。</st>
- en: <st c="20892">Implementing continuous security monitoring for runtime environments</st>
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="20892">实施针对运行时环境的持续安全监控</st>
- en: <st c="20961">Modern</st> <st c="20969">cloud runtime environments are not static;
    a simple API call can introduce a misconfiguration that leaves a resource running
    a critical application exposed</st> <st c="21125">and vulnerable.</st> <st c="21141">To
    protect them, the visibility and monitoring of runtime resource configurations
    must be continuous</st> <st c="21242">and agentless.</st> **<st c="21257">Cloud
    Security Posture Management</st>** <st c="21290">(</st>**<st c="21292">CSPM</st>**<st
    c="21296">) is the industry term for tools that help organizations monitor cloud
    resource configuration on an ongoing basis to detect any changes that might pose</st>
    <st c="21449">security risks.</st>
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20961">现代</st> <st c="20969">云运行时环境不是静态的；一个简单的 API 调用可能会引入配置错误，导致运行关键应用的资源暴露</st>
    <st c="21125">并且易受攻击。</st> <st c="21141">为了保护这些资源，必须持续监控运行时资源配置的可见性</st> <st c="21242">并且不依赖代理。</st>
    **<st c="21257">云安全态势管理</st>** <st c="21290">(</st>**<st c="21292">CSPM</st>**<st
    c="21296">) 是业内用于描述帮助组织持续监控云资源配置的工具的术语，以检测可能带来</st> <st c="21449">安全风险的变化。</st>
- en: <st c="21464">However, the challenges are more complex than just identifying
    misconfigurations.</st> <st c="21547">Not all exposed resources are misconfigured
    or vulnerable.</st> <st c="21606">Effective security requires context to prioritize
    risks, identify toxic combinations that could create attack paths, and understand
    the broader security landscape.</st> <st c="21770">First-generation CSPM solutions
    focused primarily on visibility and configuration assessment, which often resulted
    in excessive noise without addressing the nuanced complexities of modern cloud
    security.</st> <st c="21974">Newer CSPM solutions aim to solve more complex challenges
    such as prioritization, attack path detection, and contextual</st> <st c="22094">risk
    assessment.</st>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21464">然而，挑战比仅仅识别配置错误更为复杂。</st> <st c="21547">并非所有暴露的资源都是配置错误或易受攻击的。</st>
    <st c="21606">有效的安全性需要提供上下文，以优先考虑风险，识别可能创建攻击路径的有害组合，并理解更广泛的安全态势。</st> <st c="21770">第一代
    CSPM 解决方案主要集中在可见性和配置评估上，这常常导致噪音过大，却没有解决现代云安全的复杂性。</st> <st c="21974">更新的 CSPM
    解决方案旨在解决更复杂的挑战，如优先排序、攻击路径检测和上下文</st> <st c="22094">风险评估。</st>
- en: <st c="22110">At the core of implementing continuous security visibility and
    monitoring for runtime environments</st> <st c="22210">in the Azure Cloud is Microsoft’s</st>
    **<st c="22244">Cloud Native Application Protection Platform</st>** <st c="22288">(</st>**<st
    c="22290">CNAPP</st>**<st c="22295">) solution –</st> **<st c="22309">Microsoft
    Defender for</st>** **<st c="22332">Cloud</st>** <st c="22337">(</st>**<st c="22339">MDC</st>**<st
    c="22342">).</st>
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22110">在 Azure 云中实现运行时环境持续安全可见性和监控的核心</st> <st c="22210">是微软的</st> **<st
    c="22244">云原生应用保护平台</st>** <st c="22288">(</st>**<st c="22290">CNAPP</st>**<st
    c="22295">) 解决方案 –</st> **<st c="22309">Microsoft Defender for</st>** **<st c="22332">Cloud</st>**
    <st c="22337">(</st>**<st c="22339">MDC</st>**<st c="22342">)。</st>
- en: <st c="22345">Note</st>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22345">注意</st>
- en: <st c="22350">CNAPP is</st> <st c="22360">a security solution designed to protect
    cloud-native applications across their entire life cycle.</st> <st c="22458">It
    combines several security functions into one platform to prevent a tool overload.</st>
    <st c="22543">The main use case of a CNAPP is to provide capabilities to secure
    cloud-native applications right from when they are developed to when they are
    deployed to run in the cloud (also referred to</st> <st c="22734">as</st> *<st
    c="22737">code-to-cloud</st>*<st c="22750">).</st>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22350">CNAPP是</st> <st c="22360">一种旨在保护云原生应用程序整个生命周期的安全解决方案。</st> <st
    c="22458">它将多个安全功能集成到一个平台中，防止工具过载。</st> <st c="22543">CNAPP的主要使用场景是为云原生应用程序提供安全功能，从开发到部署到云中运行（也称为</st>
    <st c="22734">*代码到云*</st>）</st>。
- en: <st c="22753">MDC</st> <st c="22758">currently offers 10 protection plans that
    customers can enable, based on their</st> <st c="22837">security needs and budgets
    (</st>*<st c="22865">Figure 8</st>**<st c="22874">.6</st>*<st c="22876">).</st>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22753">MDC</st> <st c="22758">目前提供10种保护计划，客户可以根据自己的</st> <st c="22837">安全需求和预算来启用（</st>*<st
    c="22865">图 8</st>**<st c="22874">.6</st>*<st c="22876">）。</st>
- en: '![Figure 8.6 – MDC plans](img/B19710_08_6.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6 – MDC计划](img/B19710_08_6.jpg)'
- en: <st c="23211">Figure 8.6 – MDC plans</st>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23211">图 8.6 – MDC计划</st>
- en: <st c="23233">For continuous security monitoring of runtime environments, the
    Defender CSPM plan of MDC is a great solution that addresses these</st> <st c="23365">newer
    challenges:</st>
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23233">对于运行环境的持续安全监控，MDC的Defender CSPM计划是一个很好的解决方案，能够应对以下</st> <st c="23365">新挑战：</st>
- en: '**<st c="23382">Attack path management</st>**<st c="23405">: Individual cloud
    resource misconfigurations are risky, but</st> <st c="23467">combinations of linked
    misconfigurations can create critical attack paths that put entire applications
    at risk.</st> <st c="23579">MDC’s attack path management feature addresses this
    by analyzing our cloud</st> <st c="23654">resources to identify chains of chains
    of misconfigurations that attackers could exploit.</st> <st c="23744">For example,
    MDC might detect a clear text credential for a database, on a VM that is running
    a public web service.</st> <st c="23860">This creates a path for attackers to
    reach sensitive data on a critical database.</st> <st c="23942">By highlighting
    these interconnected risks, MDC enables security teams to prioritize fixes that
    disrupt entire attack paths, rather than just addressing</st> <st c="24095">isolated
    misconfigurations.</st>'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="23382">攻击路径管理</st>**<st c="23405">：单个云资源的配置错误是有风险的，但</st> <st c="23467">相关联的多个配置错误组合可能会创建出关键的攻击路径，从而使整个应用程序面临风险。</st>
    <st c="23579">MDC的攻击路径管理功能通过分析我们的云</st> <st c="23654">资源，识别攻击者可能利用的配置错误链条来应对此问题。</st>
    <st c="23744">例如，MDC可能会检测到一个数据库的明文凭证，该数据库运行在提供公共Web服务的虚拟机上。</st> <st c="23860">这为攻击者提供了一个路径，能够访问关键数据库中的敏感数据。</st>
    <st c="23942">通过突出显示这些互相关联的风险，MDC使安全团队能够优先修复能够破坏整个攻击路径的问题，而不仅仅是解决</st> <st c="24095">孤立的配置错误。</st>'
- en: '**<st c="24122">Risk prioritization</st>**<st c="24142">: Security teams often
    face an overwhelming number of alerts</st> <st c="24204">and recommendations after
    enabling CSPM solutions.</st> <st c="24255">Without proper prioritization, they
    might waste time on minor issues with little business benefits, while missing
    critical vulnerabilities.</st> <st c="24395">MDC’s risk prioritization helps solve
    this problem by sorting recommendations based on their potential impact and how
    easily they can be exploited.</st> <st c="24543">MDC uses a context-aware risk-prioritization
    engine to determine the risk level of each security recommendation.</st> <st c="24656">This
    risk level depends on factors such as resource configuration, network connections,
    and security posture.</st> <st c="24766">For example, an exposed storage account
    with sensitive data will be prioritized higher than one with</st> <st c="24867">generic
    data.</st>'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="24122">风险优先级排序</st>**<st c="24142">：安全团队在启用CSPM解决方案后，通常会面临大量的警报</st>
    <st c="24204">和建议。</st> <st c="24255">如果没有适当的优先级排序，他们可能会在对少数业务效益不大的小问题上浪费时间，同时忽略关键漏洞。</st>
    <st c="24395">MDC的风险优先级排序通过根据建议的潜在影响及其被利用的可能性来排序，帮助解决这一问题。</st> <st c="24543">MDC使用上下文感知的风险优先级排序引擎来确定每个安全建议的风险等级。</st>
    <st c="24656">该风险等级取决于资源配置、网络连接和安全态势等因素。</st> <st c="24766">例如，暴露的存储帐户如果存储有敏感数据，其优先级将高于存储有</st>
    <st c="24867">普通数据的存储帐户。</st>'
- en: '**<st c="24880">Infrastructure as Code (IaC) template mapping</st>**<st c="24926">:
    Security misconfigurations</st> <st c="24956">often originate in IaC templates.</st>
    <st c="24990">Without addressing the</st> <st c="25013">source, these issues can
    reappear after redeployments.</st> <st c="25068">MDC’s IaC template mapping solves
    this by linking cloud resources to their originating IaC templates.</st> <st c="25170">When
    MDC detects a security issue in a deployed resource, it identifies the corresponding
    IaC template, allowing developers to fix the root cause.</st> <st c="25317">For
    example, if MDC finds an overly permissive network security group, it can point
    to the exact line in the Terraform template that needs updating, preventing the
    issue from recurring in future</st> <st c="25512">deployments.</st> <st c="25525">It
    relies</st> <st c="25535">on capabilities from the popular open source IaC template-scanning
    tool Checkov</st> <st c="25615">for this.</st>'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="24880">基础设施即代码 (IaC) 模板映射</st>**<st c="24926">：安全配置错误</st> <st c="24956">通常起源于
    IaC 模板。</st> <st c="24990">如果不解决</st> <st c="25013">根源问题，这些问题可能会在重新部署后再次出现。</st>
    <st c="25068">MDC 的 IaC 模板映射通过将云资源与其原始 IaC 模板关联来解决这一问题。</st> <st c="25170">当 MDC
    检测到已部署资源中的安全问题时，它会识别相应的 IaC 模板，从而让开发人员修复根本原因。</st> <st c="25317">例如，如果 MDC 发现一个过于宽松的网络安全组，它可以指向
    Terraform 模板中需要更新的确切行，防止该问题在未来的</st> <st c="25512">部署中再次发生。</st> <st c="25525">它依赖</st>
    <st c="25535">于流行的开源 IaC 模板扫描工具 Checkov 的能力</st> <st c="25615">来实现这一点。</st>'
- en: '**<st c="25624">Data security posture management</st>**<st c="25657">: Effective
    risk management requires you</st> <st c="25699">to understand not just where vulnerabilities
    exist but also the sensitivity of the data at risk.</st> <st c="25796">MDC’s data
    security</st> <st c="25816">posture management feature addresses this by scanning
    and classifying data across your cloud environment.</st> <st c="25922">It then
    integrates this information with its security assessments, providing a more comprehensive
    view of risk.</st> <st c="26034">For example, if MDC detects two similarly misconfigured
    databases, with one containing customer financial data and the other holding non-sensitive
    marketing materials, it will prioritize the financial database for immediate attention.</st>
    <st c="26269">This context-aware approach ensures that security teams focus their
    efforts on protecting the most critical data first, significantly improving the
    overall</st> <st c="26425">security posture.</st>'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="25624">数据安全态势管理</st>**<st c="25657">：有效的风险管理要求你</st> <st c="25699">不仅要了解漏洞的存在位置，还要了解风险数据的敏感性。</st>
    <st c="25796">MDC 的数据安全</st> <st c="25816">态势管理功能通过扫描和分类云环境中的数据来解决这一问题。</st> <st
    c="25922">然后，它将这些信息与安全评估集成，提供更全面的风险视图。</st> <st c="26034">例如，如果 MDC 检测到两个配置错误的数据库，其中一个包含客户财务数据，而另一个包含非敏感的营销材料，它会优先关注财务数据库进行处理。</st>
    <st c="26269">这种情境感知的方法确保安全团队将工作重点放在优先保护最关键数据上，从而显著改善整体</st> <st c="26425">安全态势。</st>'
- en: <st c="26442">MDC has</st> <st c="26451">more capabilities than these, including
    recently added ones such as</st> **<st c="26519">AI Security Posture Management
    (AI-SPM)</st>**<st c="26558">. To read</st> <st c="26568">more about these capabilities,
    refer to this document:</st> [<st c="26623">https://learn.microsoft.com/en-us/azure/defender-for-cloud/defender-for-cloud-introduction</st>](https://learn.microsoft.com/en-us/azure/defender-for-cloud/defender-for-cloud-introduction)<st
    c="26713">. Later on, in the hands-on exercise of this chapter, you will implement
    the Defender CSPM plan</st> <st c="26809">of MDC.</st>
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26442">MDC 具有</st> <st c="26451">比这些更多的功能，包括最近新增的功能，如</st> **<st c="26519">AI
    安全态势管理 (AI-SPM)</st>**<st c="26558">。要了解</st> <st c="26568">更多关于这些功能的信息，请参阅以下文档：</st>
    [<st c="26623">https://learn.microsoft.com/en-us/azure/defender-for-cloud/defender-for-cloud-introduction</st>](https://learn.microsoft.com/en-us/azure/defender-for-cloud/defender-for-cloud-introduction)<st
    c="26713">。稍后，在本章的动手操作中，你将实施 MDC 的 Defender CSPM 计划</st> <st c="26809">。</st>
- en: <st c="26816">Protecting applications at runtime in Azure</st>
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="26816">在 Azure 中保护应用程序运行时</st>
- en: <st c="26860">Securing</st> <st c="26870">applications once they have been deployed
    to Azure services is not the same as traditional runtime security on-premises.</st>
    <st c="26991">Cloud services introduce new challenges that require a change in
    approach to a strategy that complements</st> <st c="27096">DevOps practices.</st>
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26860">确保</st> <st c="26870">应用程序在部署到 Azure 服务后仍然安全，与传统的本地运行时安全不同。</st>
    <st c="26991">云服务引入了新的挑战，需要转变策略，采用一种与</st> <st c="27096">DevOps 实践相辅相成的方式。</st>
- en: <st c="27113">In Azure’s shared responsibility model, Microsoft secures the
    underlying infrastructure, but developers and operations teams must secure the
    applications and data.</st> <st c="27278">This requires</st> <st c="27292">understanding
    Azure’s security features and integrating them with application-level protections.</st>
    <st c="27389">In this section, we will explore the challenges of protecting applications
    at runtime in Azure and discuss how to use Azure-native tools as a</st> <st c="27531">starting
    point.</st>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27113">在 Azure 的共享责任模型中，微软负责保护底层基础设施，但开发人员和运维团队必须保护应用程序和数据。</st> <st
    c="27278">这要求</st> <st c="27292">理解 Azure 的安全功能，并将其与应用层保护措施集成。</st> <st c="27389">在本节中，我们将探讨在
    Azure 中保护运行时应用程序的挑战，并讨论如何使用 Azure 原生工具作为</st> <st c="27531">起点。</st>
- en: <st c="27546">The challenges of runtime prot</st><st c="27577">ection in modern
    cloud environments</st>
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="27546">现代云环境中运行时保护的挑战</st><st c="27577"> </st>
- en: <st c="27613">The Azure cloud landscape provides many compute options to host
    applications and services, from traditional virtual machines to serverless functions.</st>
    *<st c="27764">Figure 8</st>**<st c="27772">.7</st>* <st c="27774">shows this
    range</st> <st c="27792">and how customer control varies between them.</st> <st
    c="27838">For example, virtual machines offer full OS control, while Azure Functions
    provides minimal operating system interaction.</st> <st c="27960">This variety
    makes consistent security</st> <st c="27999">measures challenging.</st>
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27613">Azure 云环境提供了多种计算选项，用于托管应用程序和服务，从传统的虚拟机到无服务器计算功能。</st> *<st c="27764">图
    8</st>**<st c="27772">.7</st>* <st c="27774">展示了这一范围</st> <st c="27792">以及客户在这些选项之间的控制差异。</st>
    <st c="27838">例如，虚拟机提供完全的操作系统控制，而 Azure Functions 提供最小的操作系统交互。</st> <st c="27960">这种多样性使得持续的安全性</st>
    <st c="27999">措施变得具有挑战性。</st>
- en: <st c="28020">A major challenge is supporting the various application and service
    runtime options used in your organization.</st> <st c="28132">Your current solution
    might be able to protect applications on VMs via installed agents, but what about
    services in containers?</st> <st c="28260">It might be able to secure an application
    running as a Linux container on Azure App Service, but does it support Windows
    containers?</st> <st c="28393">Your solution does not need to cover every use
    case, but you need to ensure that your critical assets are protected</st> <st
    c="28509">at runtime.</st>
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28020">一个主要的挑战是支持组织中使用的各种应用程序和服务运行时选项。</st> <st c="28132">当前的解决方案可能能够通过安装的代理来保护虚拟机上的应用程序，但容器中的服务怎么办？</st>
    <st c="28260">它可能能够保护在 Azure App Service 上运行的 Linux 容器中的应用程序，但它是否支持 Windows 容器？</st>
    <st c="28393">您的解决方案不需要覆盖所有使用场景，但您需要确保在运行时保护您的关键资产</st> <st c="28509">。</st>
- en: '![Figure 8.7 – Azure compute options](img/B19710_08_7.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7 – Azure 计算选项](img/B19710_08_7.jpg)'
- en: <st c="29365">Figure 8.7 – Azure compute options</st>
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="29365">图 8.7 – Azure 计算选项</st>
- en: <st c="29399">As more</st> <st c="29408">organizations move their applications
    from VMs to container services and serverless computing, there needs to be a shift
    in their application runtime protection strategy, due to the differences in how
    these environments operate and the unique challenges they present.</st> <st c="29676">Here
    are some additional challenges</st> <st c="29712">to consider:</st>
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="29399">随着更多</st> <st c="29408">组织将其应用程序从虚拟机迁移到容器服务和无服务器计算，必须调整其应用程序运行时保护策略，原因在于这些环境的运作方式差异以及它们所带来的独特挑战。</st>
    <st c="29676">以下是一些需要考虑的额外挑战</st> <st c="29712">：</st>
- en: '**<st c="29724">Limited OS access</st>**<st c="29742">: Most Azure compute
    services (with the exception of VMs) abstract the underlying operating system
    from customers.</st> <st c="29858">This makes it difficult to install traditional
    security solutions that rely on OS-level agents.</st> <st c="29954">These agent-based
    security solutions work well for applications on VMs but may not support containerized
    applications or serverless functions.</st> <st c="30097">Effective security solutions
    that can protect applications running in such environments must be able to do
    so, without</st> <st c="30216">persistent agents.</st>'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="29724">有限的操作系统访问权限</st>**<st c="29742">：大多数 Azure 计算服务（虚拟机除外）将底层操作系统从客户面前抽象化。</st>
    <st c="29858">这使得安装依赖于操作系统级代理的传统安全解决方案变得困难。</st> <st c="29954">这些基于代理的安全解决方案在虚拟机上的应用程序中工作良好，但可能不支持容器化应用程序或无服务器功能。</st>
    <st c="30097">能够保护在这些环境中运行的应用程序的有效安全解决方案必须能够做到这一点，而不需要</st> <st c="30216">持久化代理。</st>'
- en: '**<st c="30234">Autoscaling challenges</st>**<st c="30257">: Some compute services
    can automatically add new instances to process requests on demand.</st> <st c="30349">Services
    such as App Service, Function Apps, Container Apps, and Kubernetes Services can
    automatically add hundreds of instances, sometimes within minutes to process requests.</st>
    <st c="30525">And as the</st> <st c="30536">load goes away, the instances are
    terminated to save costs.</st> <st c="30596">Effective security solutions that
    can protect applications running in such environments need to handle rapid scaling,
    with the ability to start and</st> <st c="30744">stop near-instantaneously.</st>'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="30234">自动扩展挑战</st>**<st c="30257">：某些计算服务可以根据需求自动添加新的实例来处理请求。</st>
    <st c="30349">如 App Service、Function Apps、Container Apps 和 Kubernetes Services
    等服务可以自动添加数百个实例，有时在几分钟内就能处理请求。</st> <st c="30525">当负载消失时，这些实例会被终止，以节省成本。</st> <st
    c="30596">有效的安全解决方案必须能够保护在这种环境中运行的应用程序，并能够处理快速扩展，具备几乎即时启动和</st> <st c="30744">停止的能力。</st>'
- en: '**<st c="30770">Containerization complexities</st>**<st c="30800">: Containers
    are popular for their portability and efficiency, but they also present unique
    security challenges.</st> <st c="30914">Security solutions must be container-aware
    to protect both the host and the individual containers.</st> <st c="31013">Many
    traditional security providers are only beginning to add container awareness to</st>
    <st c="31098">their solutions.</st>'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="30770">容器化复杂性</st>**<st c="30800">：容器因其可移植性和高效性而广受欢迎，但它们也带来了独特的安全挑战。</st>
    <st c="30914">安全解决方案必须具备容器感知能力，以保护主机和各个容器。</st> <st c="31013">许多传统安全供应商才刚开始将容器感知能力添加到他们的解决方案中。</st>
    <st c="31098">这些解决方案正在逐步发展。</st>'
- en: '**<st c="31114">Serverless challenges</st>**<st c="31136">: Serverless computing
    such as Azure Functions changes how applications run and, consequently, how we
    secure them.</st> <st c="31252">For example, a financial services company may
    run its real-time fraud detection microservice on Azure Container Instances.</st>
    <st c="31375">These containers might spin up for milliseconds to process a transaction
    and then terminate.</st> <st c="31468">Traditional security models that assume
    long-lived servers struggle in</st> <st c="31539">this environment.</st>'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="31114">无服务器挑战</st>**<st c="31136">：无服务器计算，如 Azure Functions，改变了应用程序的运行方式，从而也改变了我们如何保护它们。</st>
    <st c="31252">例如，一家金融服务公司可能在 Azure 容器实例上运行其实时欺诈检测微服务。</st> <st c="31375">这些容器可能在毫秒级别内启动以处理事务，然后终止。</st>
    <st c="31468">假设有长期运行的服务器的传统安全模型在这种环境下面临困难。</st> <st c="31539">这个环境下的安全挑战很大。</st>'
- en: <st c="31556">These challenges highlight the need for new security tools designed
    for modern cloud architectures.</st> <st c="31657">As more companies adopt these
    technologies, the security industry is evolving quickly to address these</st>
    <st c="31760">unique issues.</st>
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="31556">这些挑战凸显了为现代云架构设计的新型安全工具的需求。</st> <st c="31657">随着越来越多的公司采用这些技术，安全行业正快速发展，以应对这些</st>
    <st c="31760">独特的安全问题。</st>
- en: <st c="31774">Protecting applications running in Azure App Service</st>
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="31774">保护运行在 Azure App Service 中的应用程序</st>
- en: <st c="31827">Azure</st> <st c="31834">App Service is a managed service used
    to host web applications, APIs, and mobile backend services in the Azure cloud.</st>
    <st c="31952">Using CI/CD pipelines, developers can deploy web or API services
    as code or as containers directly into the service.</st> *<st c="32069">Figure
    8</st>**<st c="32077">.8</st>* <st c="32079">shows examples of implementing the
    Azure App Service deployment action/task in both GitHub Actions (marked as</st>
    **<st c="32190">1</st>**<st c="32191">) and Azure Pipelines (marked</st> <st c="32221">as</st>
    **<st c="32224">2</st>**<st c="32225">).</st>
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="31827">Azure</st> <st c="31834">App Service 是一种托管服务，用于在 Azure 云中托管 Web
    应用程序、API 和移动后端服务。</st> <st c="31952">通过使用 CI/CD 管道，开发人员可以将 Web 或 API 服务作为代码或容器直接部署到服务中。</st>
    *<st c="32069">图 8</st>**<st c="32077">.8</st>* <st c="32079">展示了在 GitHub Actions（标记为</st>
    **<st c="32190">1</st>**<st c="32191">）和 Azure Pipelines（标记为</st> **<st c="32224">2</st>**<st
    c="32225">）中实现 Azure App Service 部署操作/任务的示例。</st>
- en: '![Figure 8.8 – The Azure App Service deployment task in GitHub Actions and
    Azure Pipelines](img/B19710_08_8.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.8 – GitHub Actions 和 Azure Pipelines 中的 Azure App Service 部署任务](img/B19710_08_8.jpg)'
- en: <st c="33140">Figure 8.8 – The Azure App Service deployment task in GitHub Actions
    and Azure Pipelines</st>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="33140">图 8.8 – GitHub Actions 和 Azure Pipelines 中的 Azure App Service
    部署任务</st>
- en: <st c="33228">For</st> <st c="33233">runtime protection of web and API applications
    deployed to Azure App Service, implementing the</st> **<st c="33328">Defender
    for App Service</st>** <st c="33352">plan of MDC is a great starting point.</st>
    <st c="33392">The plan provides runtime threat detection capabilities, mainly
    using behavioral analysis techniques in the five categories described in</st>
    *<st c="33529">Table 8.1</st>*<st c="33538">.</st>
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="33228">对于</st> <st c="33233">在 Azure App Service 部署的 Web 和 API 应用程序的运行时保护，实施</st>
    **<st c="33328">Defender for App Service</st>** <st c="33352">的 MDC 计划是一个很好的起点。</st>
    <st c="33392">该计划提供运行时威胁检测功能，主要通过行为分析技术来实现，涵盖以下五个类别，详见</st> *<st c="33529">表 8.1</st>*<st
    c="33538">。</st>
- en: '| **<st c="33539">Threats by MITRE</st>** **<st c="33557">ATT&CK tactics</st>**
    | **<st c="33571">Description</st>** |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="33539">MITRE 威胁</st>** **<st c="33557">ATT&CK 战术</st>** | **<st
    c="33571">描述</st>** |'
- en: '| --- | --- |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **<st c="33583">Pre-attack</st>** **<st c="33595">threat detection</st>**
    | <st c="33611">Detects scanners that probe our running applications for known
    vulnerabilities – for example, web fingerprinting attempts, using tools such as
    Nmap, BlindElephant, WPScan, Joomla Scanner, and</st> <st c="33804">Drupal Scanner.</st>
    |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="33583">攻击前</st>** **<st c="33595">威胁检测</st>** | <st c="33611">检测扫描程序扫描我们运行中的应用程序以寻找已知漏洞
    – 例如，使用 Nmap、BlindElephant、WPScan、Joomla Scanner 和</st> <st c="33804">Drupal Scanner
    等工具进行 Web 指纹识别的尝试。</st> |'
- en: '| **<st c="33819">Initial access</st>** **<st c="33835">threat detection</st>**
    | <st c="33851">Detects malicious network connection attempts from known malicious
    IP addresses or suspicious endpoints, such as</st> <st c="33965">the following:</st>'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '| **<st c="33819">初始访问</st>** **<st c="33835">威胁检测</st>** | <st c="33851">检测来自已知恶意
    IP 地址或可疑端点的恶意网络连接尝试，例如：</st> <st c="33965">例如：</st>'
- en: <st c="33979">Known malicious IP addresses connecting to the FTP endpoint of
    our</st> <st c="34047">App Service</st><st c="34058">.</st>
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="33979">已知恶意 IP 地址连接到我们的</st> <st c="34047">App Service</st><st c="34058">的
    FTP 端点。</st>
- en: <st c="34059">An app service resolving a known malicious</st> <st c="34103">DNS
    hostname</st><st c="34115">.</st>
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="34059">应用服务解析已知恶意</st> <st c="34103">DNS 主机名</st><st c="34115">。</st>
- en: <st c="34116">Connection to a sensitive web page hosted in the App Service from
    unusual IP addresses or</st> <st c="34207">User Agents</st><st c="34218">.</st>
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="34116">从不寻常的 IP 地址或</st> <st c="34207">用户代理</st><st c="34218">连接到托管在
    App Service 中的敏感网页。</st>
- en: <st c="34219">Defender for App Service detects these attempts by analyzing</st>
    <st c="34281">various service logs, such as DNS and FTP logs, and compares them
    against known malicious IP addresses and domain names in the Microsoft threat</st>
    <st c="34425">intelligence feed.</st> |
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="34219">Defender for App Service 通过分析</st> <st c="34281">各种服务日志，例如 DNS
    和 FTP 日志，并将其与 Microsoft 威胁情报源中的已知恶意 IP 地址和域名进行比较，从而检测这些尝试。</st> <st c="34425">。</st>
    |
- en: '| **<st c="34443">Attack execution</st>** **<st c="34461">threat detection</st>**
    | <st c="34477">Detects attempts to run malicious or suspicious commands and processes
    on the underlying OS of our app service VM instances after an attacker has exploited
    a vulnerability to gain access.</st> <st c="34666">This is done by analyzing running
    processes, the filesystem, and memory behavior on our app service VM instances.</st>
    <st c="34780">This detects events such as</st> <st c="34808">the following:</st>'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '| **<st c="34443">攻击执行</st>** **<st c="34461">威胁检测</st>** | <st c="34477">检测攻击者利用漏洞获得访问权限后，在我们应用服务的虚拟机实例上执行恶意或可疑命令和进程的尝试。</st>
    <st c="34666">这通过分析运行中的进程、文件系统和内存行为来完成。</st> <st c="34780">这可以检测到如下事件：</st> <st
    c="34808">例如：</st>'
- en: <st c="34822">Suspicious downloading of remote files – for example, using</st>
    `<st c="34883">curl</st>` <st c="34887">to download code from sites such as Pastebin
    and saving it</st> <st c="34947">to disk.</st>
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="34822">可疑的远程文件下载 – 例如，使用</st> `<st c="34883">curl</st>` <st c="34887">从像
    Pastebin 这样的站点下载代码并保存到磁盘。</st> <st c="34947">。</st>
- en: <st c="34955">Downloading of suspicious files, such as cryptomining executables
    or</st> <st c="35025">web shells</st><st c="35035">.</st>
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="34955">下载可疑文件，如加密矿工可执行文件或</st> <st c="35025">Web Shell</st><st c="35035">。</st>
- en: <st c="35036">The execution of suspicious processes or commands – for example,
    cryptominers, reverse shell tools, credential access tools, processes with known
    attacker tool names, malicious PowerShell PowerSploit cmdlets, attempts to exploit
    the PHP process to run operating system commands, and the</st> `<st c="35324">SVCHOST</st>`
    <st c="35331">process executed from abnormal paths (malware often uses</st> `<st
    c="35389">SVCHOST</st>` <st c="35396">to hide</st> <st c="35405">malicious activity).</st>
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="35036">可疑进程或命令的执行——例如，挖矿程序、反向Shell工具、凭证访问工具、已知攻击者工具名称的进程、恶意PowerShell
    PowerSploit cmdlets、尝试利用PHP进程执行操作系统命令，以及从异常路径执行的</st> `<st c="35324">SVCHOST</st>`
    <st c="35331">进程（恶意软件通常利用</st> `<st c="35389">SVCHOST</st>` <st c="35396">来隐藏</st>
    <st c="35405">恶意活动）。</st>
- en: <st c="35425">Abuse of built-in administrator tools such as</st> `<st c="35472">certutil.exe</st>`
    <st c="35484">to decode executables or download binary files, instead of its typical
    use to manage certificates.</st> <st c="35584">Attackers often misuse legitimate
    administrator tools for</st> <st c="35642">malicious purposes.</st>
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="35425">滥用内置管理员工具，如</st> `<st c="35472">certutil.exe</st>` <st c="35484">来解码可执行文件或下载二进制文件，而不是其通常用于管理证书的功能。</st>
    <st c="35584">攻击者通常滥用合法的管理员工具以达到</st> <st c="35642">恶意目的。</st>
- en: <st c="35661">Execution</st> <st c="35672">of various file-less attack techniques</st>
    <st c="35711">and toolkits.</st>
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="35661">执行</st> <st c="35672">各种无文件攻击技术</st> <st c="35711">和工具包。</st>
- en: <st c="35724">A PHP file found in the</st> `<st c="35749">/upload</st>` <st
    c="35756">folder.</st> <st c="35765">This folder typically does not contain PHP
    files, suggesting a possible exploit taking advantage of arbitrary file</st> <st
    c="35880">upload vulnerabilities.</st>
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="35724">在</st> `<st c="35749">/upload</st>` <st c="35756">文件夹中发现一个PHP文件。</st>
    <st c="35765">该文件夹通常不包含PHP文件，这表明可能存在利用任意文件</st> <st c="35880">上传漏洞的攻击。</st>
- en: <st c="35903">Analysis of host/device data, detecting a possible data</st> <st
    c="35960">egress condition.</st>
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="35903">主机/设备数据分析，检测可能的外部数据</st> <st c="35960">流出情况。</st>
- en: '|'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **<st c="35977">Dangling</st>** **<st c="35987">DNS detection</st>** | <st
    c="36000">Alerts when an App Service website is decommissioned but its custom
    domain (DNS entry) is</st> <st c="36091">not deleted.</st> |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="35977">悬挂</st>** **<st c="35987">DNS检测</st>** | <st c="36000">当应用服务网站已退役但其自定义域名（DNS记录）</st>
    <st c="36091">未被删除时，发出警报。</st> |'
- en: '| **<st c="36103">Post-compromise detection</st>** | <st c="36129">Detects
    whether our hosted apps have been found in identified attacks in the wild, such
    as</st> <st c="36221">the following:</st>'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '| **<st c="36103">后渗透检测</st>** | <st c="36129">检测我们托管的应用程序是否在实际攻击中被发现，如</st>
    <st c="36221">以下内容：</st>'
- en: <st c="36235">The URL of our app was used in a phishing attack that targeted
    Microsoft 365 customers, identified by the Microsoft threat</st> <st c="36359">intelligence
    team</st><st c="36376">.</st>
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="36235">我们的应用URL曾被用于针对Microsoft 365客户的钓鱼攻击，该攻击已被Microsoft威胁</st> <st c="36359">情报团队</st><st
    c="36376">识别。</st>
- en: <st c="36377">The URL of our web app is marked as malicious by Windows SmartScreen,
    due to activities spotted by the Microsoft threat</st> <st c="36498">intelligence
    team</st><st c="36515">.</st>
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="36377">由于Microsoft威胁</st> <st c="36498">情报团队</st><st c="36515">的监测，我们的Web应用URL被Windows
    SmartScreen标记为恶意。</st>
- en: '|'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: <st c="36516">Table 8.1 – The Defender for App Service plan threat detection
    categories</st>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="36516">表8.1 – 应用服务计划的威胁检测类别</st>
- en: <st c="36590">Even though Defender for App Service is a good starting point,
    it has its limitations.</st> <st c="36678">For example, it focuses on detecting
    threats rather than stopping them.</st> <st c="36750">This is partly because</st>
    <st c="36773">it analyzes logs instead of using an agent.</st> <st c="36817">When
    security solutions only detect threats without blocking them, the response time
    increases.</st> <st c="36913">The delay between detecting a threat and manual
    intervention gives threats more time to cause damage, potentially leading to data
    breaches or system compromises.</st> <st c="37075">It also increases the workload
    of the security team as they investigate and respond to</st> <st c="37162">every
    detection.</st>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="36590">尽管应用服务的Defender是一个很好的起点，但它也有其局限性。</st> <st c="36678">例如，它侧重于检测威胁，而不是阻止威胁。</st>
    <st c="36750">部分原因在于</st> <st c="36773">它分析日志而不是使用代理。</st> <st c="36817">当安全解决方案仅检测威胁而不阻止它们时，响应时间会增加。</st>
    <st c="36913">检测威胁与人工干预之间的延迟使威胁有更多时间造成损害，可能导致数据泄露或系统被攻陷。</st> <st c="37075">这还增加了安全团队的工作量，因为他们需要调查和响应</st>
    <st c="37162">每个检测到的事件。</st>
- en: <st c="37178">Another Defender for App Service limitation is that it is not
    able to identify known vulnerabilities in our applications at runtime.</st> <st
    c="37312">The ability to do this is critical.</st> <st c="37348">Trying to manually
    hunt down where you have running applications that are affected by the next big
    vulnerability (such as Log4j) is not optimal.</st> <st c="37493">To cover these
    gaps, we can use customized open source tooling or third-party security solutions.</st>
    <st c="37591">For example, some third-party solutions can run as a RASP agent
    alongside our applications to provide additional capabilities, such as blocking
    active threats and identifying known vulnerabilities</st> <st c="37788">in running
    applications.</st> <st c="37813">The challenge that you will need to solve is
    rolling out</st> <st c="37870">at scale.</st>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37178">另一个 App Service 的 Defender 限制是，它无法识别我们应用程序在运行时已知的漏洞。</st> <st
    c="37312">这种能力至关重要。</st> <st c="37348">手动追踪哪些正在运行的应用程序受到下一个重大漏洞（如 Log4j）影响并不是最优选择。</st>
    <st c="37493">为了解决这些问题，我们可以使用定制的开源工具或第三方安全解决方案。</st> <st c="37591">例如，一些第三方解决方案可以作为
    RASP 代理与我们的应用程序一起运行，以提供额外的功能，如阻止主动威胁和识别运行中的应用程序中已知的漏洞。</st> <st c="37788">在运行的应用程序中。</st>
    <st c="37813">您需要解决的挑战是如何大规模地推广这一解决方案。</st>
- en: <st c="37879">What is RASP?</st>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37879">什么是 RASP？</st>
- en: '**<st c="37893">Runtime Application Security Protection</st>** <st c="37933">(</st>**<st
    c="37935">RASP</st>**<st c="37939">) is a security technology that operates</st>
    <st c="37981">within an application itself to detect and prevent attacks in real
    time.</st> <st c="38054">It monitors the application’s behavior at runtime and
    can take immediate action against potential threats.</st> <st c="38161">RASP offers
    continuous protection in production environments, complementing other pre-deployment
    security measures such as SAST and DAST.</st> <st c="38299">Depending on the security
    provider’s implementation, RASP can sometimes be complex to deploy, and there
    can be concerns about its</st> <st c="38429">performance impact.</st>'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="37893">运行时应用程序安全保护</st>** <st c="37933">(</st>**<st c="37935">RASP</st>**<st
    c="37939">) 是一种在应用程序内部运行的安全技术，用于实时检测和防止攻击。</st> <st c="37981">它监控应用程序在运行时的行为，并能对潜在威胁采取即时行动。</st>
    <st c="38054">RASP 提供了在生产环境中的持续保护，补充了其他部署前的安全措施，如 SAST 和 DAST。</st> <st c="38161">根据安全供应商的实现，RASP
    有时可能比较复杂，且可能存在性能影响方面的担忧。</st>'
- en: <st c="38448">Azure App Service offers easier options to roll out security solutions
    such as Tinfoil Security (now part of Synopsys) and Signal Sciences WAF (now part
    of Fastly) using extensions.</st> <st c="38631">You can install them by going
    to your App Service instance →</st> **<st c="38692">Development Tools</st>** <st
    c="38709">→</st> **<st c="38712">Extensions</st>** <st c="38722">→</st> **<st
    c="38725">Add</st>** <st c="38728">(</st>*<st c="38730">Figure 8</st>**<st c="38738">.9</st>*<st
    c="38740">).</st>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38448">Azure App Service 提供了更简单的方式，通过扩展来推出诸如 Tinfoil Security（现已成为 Synopsys
    的一部分）和 Signal Sciences WAF（现已成为 Fastly 的一部分）等安全解决方案。</st> <st c="38631">您可以通过以下步骤进行安装：前往您的
    App Service 实例 →</st> **<st c="38692">开发工具</st>** <st c="38709">→</st> **<st c="38712">扩展</st>**
    <st c="38722">→</st> **<st c="38725">添加</st>** <st c="38728">(</st>*<st c="38730">图
    8.9</st>**<st c="38738">.)</st>
- en: '![Figure 8.9 – Adding some security extensions to Azure App Service](img/B19710_08_9.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.9 – 向 Azure App Service 添加一些安全扩展](img/B19710_08_9.jpg)'
- en: <st c="39664">Figure 8.9 – Adding some security extensions to Azure App Service</st>
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39664">图 8.9 – 向 Azure App Service 添加一些安全扩展</st>
- en: <st c="39729">Tinfoil Security provides vulnerability management capabilities,
    while Signal Sciences WAF provides threat prevention and detection for web</st>
    <st c="39870">application attacks.</st>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39729">Tinfoil Security 提供漏洞管理功能，而 Signal Sciences WAF 提供针对 Web 应用程序攻击的威胁预防和检测。</st>
- en: <st c="39890">Protecting serverless workloads at runtime in Azure</st>
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="39870">保护 Azure 中的无服务器工作负载在运行时的安全性</st>
- en: <st c="39942">Serverless</st> <st c="39954">workloads, such as Azure Functions,
    and containerized</st> <st c="40008">applications running on</st> **<st c="40032">Container-as-a-Service</st>**
    <st c="40054">(</st>**<st c="40056">CaaS</st>**<st c="40060">) resources, such
    as</st> **<st c="40082">Azure Container Apps</st>** <st c="40102">(</st>**<st
    c="40104">ACA</st>**<st c="40107">), present unique</st> <st c="40126">runtime
    security challenges due to their ephemeral nature.</st> <st c="40185">For example,
    the consumption plan of Azure Functions does not have reserved instances; instead,
    instances are dynamically allocated on demand, based on requests.</st> <st c="40347">With
    HTTP-triggered functions, Azure’s scale controller can allocate one instance per
    second, and the instances are removed once processing is complete.</st> <st c="40500">This
    transient nature makes traditional security measures less effective and calls
    for specialized security approaches to protect</st> <st c="40630">serverless environments.</st>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39942">无服务器</st> <st c="39954">工作负载，如 Azure Functions，以及运行在</st> **<st
    c="40032">容器即服务（CaaS）</st>** <st c="40054">资源上的容器化</st> <st c="40008">应用程序，例如</st>
    **<st c="40082">Azure 容器应用</st>** <st c="40102">(</st>**<st c="40104">ACA</st>**<st
    c="40107">)，由于其短暂的特性，面临独特的运行时安全挑战。</st> <st c="40126">例如，Azure Functions 的消费计划没有预留实例；相反，实例会根据请求按需动态分配。</st>
    <st c="40185">对于 HTTP 触发的函数，Azure 的规模控制器每秒可以分配一个实例，并且实例在处理完成后会被移除。</st> <st c="40347">这种瞬态特性使得传统的安全措施效果较差，因此需要专门的安全方法来保护</st>
    <st c="40630">无服务器环境。</st>
- en: <st c="40654">Currently, Azure does not offer a native solution for runtime
    vulnerability assessment, threat detection, and prevention specifically for serverless
    workloads.</st> <st c="40815">However, third-party</st> <st c="40836">security
    providers fill these gaps by offering RASP-like solutions.</st> <st c="40904">These
    solutions allow organizations to embed security directly into their serverless
    functions code or containers.</st> <st c="41019">This way, runtime security follows
    the application, regardless of the environment that it is deployed to.</st> <st
    c="41125">This approach typically requires code changes or a customized container</st>
    <st c="41197">build process.</st>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="40654">目前，Azure 没有为无服务器工作负载提供专门的运行时漏洞评估、威胁检测和防护的原生解决方案。</st> <st c="40815">然而，第三方</st>
    <st c="40836">安全供应商通过提供类似 RASP 的解决方案填补了这些空白。</st> <st c="40904">这些解决方案允许组织将安全直接嵌入到其无服务器函数代码或容器中。</st>
    <st c="41019">这样，运行时安全跟随应用程序，无论它被部署到哪个环境。</st> <st c="41125">这种方法通常需要代码更改或定制化的容器</st>
    <st c="41197">构建过程。</st>
- en: <st c="41211">For example, Prisma Cloud by Palo Alto Networks provides Serverless
    Defender, which can be embedded into the function code to monitor and protect
    the function at runtime.</st> <st c="41383">The following code sample shows an
    example of how the Serverless Defender library is added to C# function code, creating
    a new protected handler that wraps the original handler.</st> <st c="41561">When
    the function is invoked at runtime in the cloud, the protected handler is called,
    which then calls the function code.</st> <st c="41684">The protected handler will
    provide capabilities such as runtime vulnerability assessment, threat detection,
    and</st> <st c="41796">threat prevention:</st>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="41211">例如，Palo Alto Networks 的 Prisma Cloud 提供了 Serverless Defender，可以嵌入到函数代码中，以便在运行时监控和保护该函数。</st>
    <st c="41383">以下代码示例展示了如何将 Serverless Defender 库添加到 C# 函数代码中，创建一个新的受保护处理程序，该处理程序包装了原始处理程序。</st>
    <st c="41561">当函数在云端运行时被调用时，受保护的处理程序会被调用，进而调用函数代码。</st> <st c="41684">受保护的处理程序将提供运行时漏洞评估、威胁检测以及</st>
    <st c="41796">威胁防护等功能：</st>
- en: '[PRE3]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="42113">For</st> <st c="42118">serverless containerized workloads, the
    workflow can be automated to where the runtime security handler can be embedded
    directly inside the container image to establish a point of control.</st> <st
    c="42307">To make the process easier to adopt, some providers may offer the ability
    to automate</st> <st c="42393">this process directly in our</st> **<st c="42422">Continuous
    Deployment</st>** <st c="42444">(</st>**<st c="42445">CD</st>**<st c="42447">)
    pipeline.</st> *<st c="42460">Figure 8</st>**<st c="42468">.10</st>* <st c="42471">shows
    an example of a Palo Alto Prisma Cloud task in an Azure DevOps pipeline to automate
    this type of</st> <st c="42575">security embedding.</st>
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="42113">对于</st> <st c="42118">无服务器容器化工作负载，工作流可以自动化，使得运行时安全处理程序可以直接嵌入容器镜像中，从而建立控制点。</st>
    <st c="42307">为了让这一过程更容易被采用，一些服务提供商可能会提供将</st> <st c="42393">此过程自动化</st> **<st
    c="42422">持续部署</st>** <st c="42444">(</st>**<st c="42445">CD</st>**<st c="42447">)流水线的能力。</st>
    *<st c="42460">图 8</st>**<st c="42468">.10</st>* <st c="42471">展示了一个在 Azure DevOps
    流水线中自动化此类安全嵌入的 Palo Alto Prisma Cloud 任务示例。</st>
- en: '![Figure 8.10 – An example of the Prisma Cloud Serverless Defender embed task](img/B19710_08_10.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.10 – Prisma Cloud Serverless Defender 嵌入任务示例](img/B19710_08_10.jpg)'
- en: <st c="43068">Figure 8.10 – An example of the Prisma Cloud Serverless Defender
    embed task</st>
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="43068">图 8.10 – Prisma Cloud Serverless Defender 嵌入任务示例</st>
- en: <st c="43143">The task will accept an input of the Dockerfile that is used to
    containerize the application</st> <st c="43237">and rebuild it, embedding Prisma
    Cloud’s runtime security in the container image.</st> <st c="43319">When the container
    starts, the Prisma Cloud app-embedded Defender starts as the parent process in
    the container, and it immediately invokes the program as</st> <st c="43474">its
    child.</st>
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="43143">任务将接受一个用于容器化应用程序的 Dockerfile 输入</st> <st c="43237">并重新构建它，将 Prisma
    Cloud 的运行时安全性嵌入容器镜像中。</st> <st c="43319">当容器启动时，Prisma Cloud 应用内嵌的 Defender 会作为父进程在容器中启动，并立即调用程序作为</st>
    <st c="43474">它的子进程。</st>
- en: <st c="43484">Protecting container workloads in Azure</st>
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="43484">保护 Azure 中的容器工作负载</st>
- en: <st c="43524">The Azure</st> <st c="43535">cloud offers</st> <st c="43548">multiple
    services to run containerized applications</st> <st c="43600">and services.</st>
    <st c="43614">Some are container-exclusive, meaning</st> <st c="43652">they only
    run</st> <st c="43666">container workloads:</st>
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="43524">Azure</st> <st c="43535">云提供</st> <st c="43548">多种服务来运行容器化应用程序</st>
    <st c="43600">和服务。</st> <st c="43614">其中一些是容器专用的，意味着</st> <st c="43652">它们仅运行</st>
    <st c="43666">容器工作负载：</st>
- en: '**<st c="43686">Azure Container</st>** **<st c="43703">Instances</st>** <st
    c="43712">(</st>**<st c="43714">ACI</st>**<st c="43717">)</st>'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="43686">Azure 容器</st>** **<st c="43703">实例</st>** <st c="43712">(</st>**<st
    c="43714">ACI</st>**<st c="43717">)</st>'
- en: '**<st c="43719">Azure Container</st>** **<st c="43735">Apps</st>** <st c="43739">(</st>**<st
    c="43741">ACA</st>**<st c="43744">)</st>'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="43719">Azure 容器</st>** **<st c="43735">应用</st>** <st c="43739">(</st>**<st
    c="43741">ACA</st>**<st c="43744">)</st>'
- en: '**<st c="43746">Azure Kubernetes</st>** **<st c="43763">Service</st>** <st
    c="43770">(</st>**<st c="43772">AKS</st>**<st c="43775">)</st>'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="43746">Azure Kubernetes</st>** **<st c="43763">服务</st>** <st c="43770">(</st>**<st
    c="43772">AKS</st>**<st c="43775">)</st>'
- en: '**<st c="43777">Azure Red Hat</st>** **<st c="43791">OpenShift</st>** <st c="43800">(</st>**<st
    c="43802">ARO)</st>**'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="43777">Azure Red Hat</st>** **<st c="43791">OpenShift</st>** <st c="43800">(</st>**<st
    c="43802">ARO)</st>**'
- en: <st c="43806">Others</st> <st c="43814">are container-compatible, meaning they
    can run both code and</st> <st c="43875">container applications:</st>
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="43806">其他</st> <st c="43814">是兼容容器的，这意味着它们可以运行代码和</st> <st c="43875">容器应用程序：</st>
- en: <st c="43898">Azure</st> <st c="43905">App Service</st>
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="43898">Azure</st> <st c="43905">应用服务</st>
- en: <st c="43916">Azure Functions</st>
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="43916">Azure 函数</st>
- en: <st c="43932">Azure</st> <st c="43939">Service Fabric</st>
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="43932">Azure</st> <st c="43939">服务网格</st>
- en: <st c="43953">Azure Batch</st>
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="43953">Azure 批处理</st>
- en: <st c="43965">Azure</st> <st c="43972">Spring Apps</st>
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="43965">Azure</st> <st c="43972">Spring 应用</st>
- en: <st c="43983">Developers can deploy containerized applications to these services
    using CI/CD pipelines.</st> *<st c="44074">Figure 8</st>**<st c="44082">.11</st>*
    <st c="44085">shows examples of implementing the Kubernetes workload deployment
    action/task in both GitHub Actions (marked as</st> **<st c="44198">1</st>**<st
    c="44199">) and Azure Pipelines (marked</st> <st c="44229">as</st> **<st c="44232">2</st>**<st
    c="44233">).</st>
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="43983">开发人员可以通过 CI/CD 管道将容器化应用程序部署到这些服务中。</st> *<st c="44074">图 8</st>**<st
    c="44082">.11</st>* <st c="44085">展示了在 GitHub Actions（标记为</st> **<st c="44198">1</st>**<st
    c="44199">）和 Azure Pipelines（标记为</st> **<st c="44232">2</st>**<st c="44233">）中实现
    Kubernetes 工作负载部署操作/任务的示例。</st>
- en: '![Figure 8.11 – The Kubernetes workload deployment task in GitHub Actions and
    Azure Pipelines](img/B19710_08_11.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.11 – GitHub Actions 和 Azure Pipelines 中的 Kubernetes 工作负载部署任务](img/B19710_08_11.jpg)'
- en: <st c="45457">Figure 8.11 – The Kubernetes workload deployment task in GitHub
    Actions and Azure Pipelines</st>
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="45457">图 8.11 – GitHub Actions 和 Azure Pipelines 中的 Kubernetes 工作负载部署任务</st>
- en: <st c="45548">For</st> <st c="45553">vulnerability management and runtime protection
    of workloads, we can start by implementing the Defender for Container plan of
    MDC.</st> <st c="45684">This plan combines agentless and agent-based approaches
    to detect vulnerabilities and threats for container workloads.</st> <st c="45803">However,
    these capabilities are currently limited to workloads deployed on AKS.</st> <st
    c="45883">For threat detection in Kubernetes workloads, Defender for Containers
    collects and analyzes the following data (</st>*<st c="45995">Figure 8</st>**<st
    c="46004">.12</st>*<st c="46007">):</st>
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="45548">对于</st> <st c="45553">工作负载的漏洞管理和运行时保护，我们可以从实施 MDC 的容器防护计划开始。</st>
    <st c="45684">该计划结合了无代理和基于代理的方法，以检测容器工作负载的漏洞和威胁。</st> <st c="45803">然而，这些功能目前仅限于部署在
    AKS 上的工作负载。</st> <st c="45883">对于 Kubernetes 工作负载中的威胁检测，容器防护会收集并分析以下数据（</st>*<st
    c="45995">图 8</st>**<st c="46004">.12</st>*<st c="46007">）：</st>
- en: <st c="46010">Audit logs and security events from the</st> <st c="46051">API
    server</st>
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="46010">来自</st> <st c="46051">API 服务器的审计日志和安全事件</st>
- en: <st c="46061">Security signals and events from</st> <st c="46095">worker nodes</st>
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="46061">来自</st> <st c="46095">工作节点的安全信号和事件</st>
- en: <st c="46107">Cluster configuration information from the</st> <st c="46151">control
    plane</st>
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="46107">来自</st> <st c="46151">控制平面的集群配置信息</st>
- en: <st c="46164">Workload configuration from Azure Policy (we discussed this earlier
    in</st> <st c="46236">this chapter)</st>
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="46164">来自 Azure 策略的工作负载配置（我们在</st> <st c="46236">本章中已讨论过这一点）</st>
- en: '![Figure 8.12 – The Defender for Containers architecture](img/B19710_08_12.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.12 – 容器防护架构](img/B19710_08_12.jpg)'
- en: <st c="46575">Figure 8.12 – The Defender for Containers architecture</st>
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="46575">图 8.12 – 容器防护架构</st>
- en: '*<st c="46629">Table 8.2</st>* <st c="46639">describes</st> <st c="46650">the
    capabilities of the plan in</st> <st c="46682">more detail:</st>'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="46629">表 8.2</st>* <st c="46639">详细描述了该计划的功能</st> <st c="46650">：</st>'
- en: '| **<st c="46694">Capability</st>** | **<st c="46705">Description</st>** |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="46694">功能</st>** | **<st c="46705">描述</st>** |'
- en: '| --- | --- |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **<st c="46717">Vulnerability assessment</st>** | <st c="46742">Vulnerability</st>
    <st c="46757">assessment for images stored in</st> **<st c="46789">Azure Container
    Registry</st>** <st c="46814">(</st>**<st c="46815">ACR</st>**<st c="46818">)
    and for running images in</st> <st c="46847">AKS clusters.</st><st c="46860">For
    ACR, the assessment can be done using an agentless approach.</st> <st c="46926">For
    running images in AKS, we can also implement this in an agentless mode by configuring
    the agentless discovery for Kubernetes, or we</st> <st c="47062">can also install
    the</st> **<st c="47083">Defender</st>** **<st c="47092">Sensor</st>** <st c="47098">agent.</st><st
    c="47105">This capability is powered by the Microsoft Defender Vulnerability Management
    solution.</st> <st c="47194">It supports both Linux and Windows containers (which
    is rare), and it supports the scanning of language-specific packages for Python,
    Node.js, .NET, Java,</st> <st c="47349">and Go.</st><st c="47356">The vulnerability
    scan runs at least once a day for images that were pushed in the last 90 days
    or pulled in the last</st> <st c="47475">30 days.</st><st c="47483">Defender for
    Containers also supports the protection of container workloads on AWS and GCP,
    but this is beyond the scope of</st> <st c="47608">this topic.</st> |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="46717">漏洞评估</st>** | <st c="46742">对存储在</st> **<st c="46789">Azure
    容器注册表</st>** <st c="46814">(</st>**<st c="46815">ACR</st>**<st c="46818">) 中的镜像进行漏洞评估，</st>
    <st c="46847">以及对 AKS 集群中运行的镜像进行评估。</st><st c="46860">对于 ACR，评估可以通过无代理的方式进行。</st>
    <st c="46926">对于 AKS 中运行的镜像，我们也可以通过配置 Kubernetes 的无代理发现来实现此功能，或者我们</st> <st c="47062">也可以安装</st>
    **<st c="47083">Defender</st>** **<st c="47092">传感器</st>** <st c="47098">代理。</st><st
    c="47105">此功能由 Microsoft Defender 漏洞管理解决方案提供支持。</st> <st c="47194">它支持 Linux 和
    Windows 容器（这很少见），并支持扫描特定语言的包，包括 Python、Node.js、.NET、Java、</st> <st c="47349">和
    Go。</st><st c="47356">漏洞扫描每天至少运行一次，适用于过去 90 天内推送或过去</st> <st c="47475">30 天内拉取的镜像。</st><st
    c="47483">Defender for Containers 还支持保护 AWS 和 GCP 上的容器工作负载，但这超出了</st> <st c="47608">本主题的范围。</st>
    |'
- en: '| **<st c="47619">Runtime</st>** **<st c="47628">protection (Kubernetes control
    plane</st>** **<st c="47665">threat detection)</st>** | <st c="47682">Detection
    of suspicious activity for Kubernetes, based on Kubernetes audit</st> <st c="47758">log
    analysis</st><st c="47770">.</st> |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="47619">运行时</st>** **<st c="47628">保护（Kubernetes 控制平面</st>** **<st
    c="47665">威胁检测）</st>** | <st c="47682">基于 Kubernetes 审计</st> <st c="47758">日志分析，检测
    Kubernetes 中的可疑活动</st><st c="47770">。</st> |'
- en: '| **<st c="47771">Runtime protection (Kubernetes workload</st>** **<st c="47812">threat
    detection)</st>** | <st c="47829">Detection of suspicious activities at the cluster,
    node, and</st> <st c="47891">workload levels.</st><st c="47907">This requires
    the Defender Sensor agent to be deployed.</st> <st c="47964">This can be enabled
    at the subscription level OR for</st> <st c="48017">individual clusters.</st>
    |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="47771">运行时保护（Kubernetes 工作负载</st>** **<st c="47812">威胁检测）</st>**
    | <st c="47829">在集群、节点和</st> <st c="47891">工作负载级别检测可疑活动。</st><st c="47907">这需要部署
    Defender 传感器代理。</st> <st c="47964">这可以在订阅级别或单个集群级别启用。</st> |'
- en: <st c="48037">Table 8.2 – The Defender for Containers capabilities</st>
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="48037">表 8.2 – Defender for Containers 功能</st>
- en: <st c="48090">As highlighted in</st> *<st c="48109">Table 8.2</st>*<st c="48118">,
    some features of the plan require the Defender Sensor agent to be installed on
    Kubernetes clusters, while others do not (which are referred to as agentless).</st>
    <st c="48278">For example, the vulnerability assessment of images stored in ACR
    does not need the sensor.</st> <st c="48370">However, to map vulnerability assessments
    for containers running in AKS clusters, we</st> <st c="48455">need to either deploy
    the sensors or enable agentless discovery</st> <st c="48519">of Kubernetes.</st>
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="48090">如在</st> *<st c="48109">表 8.2</st>*<st c="48118">中强调的那样，计划中的某些功能需要在
    Kubernetes 集群上安装 Defender 传感器代理，而其他功能则不需要（这些称为无代理模式）。</st> <st c="48278">例如，存储在
    ACR 中的镜像的漏洞评估不需要传感器。</st> <st c="48370">然而，要映射 AKS 集群中运行的容器的漏洞评估，我们</st> <st c="48455">需要部署传感器或启用
    Kubernetes 的无代理发现</st> <st c="48519">功能。</st>
- en: <st c="48533">Note</st>
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="48533">备注</st>
- en: <st c="48538">For a vulnerability assessment of running containers in AKS, sensors
    do not scan the running containers directly.</st> <st c="48653">Instead, they
    collect an inventory of container workloads in the Kubernetes clusters.</st> <st
    c="48739">Defender for Containers then matches this inventory against the vulnerability
    assessment reports of images in ACR.</st> <st c="48854">Therefore, the report
    will only show vulnerabilities for running containers if their images were pulled
    from a scanned ACR.</st> <st c="48978">If the running images were pulled from
    an unscanned registry, Defender for Containers cannot show their vulnerabilities,
    potentially creating a security gap that you need</st> <st c="49149">to consider.</st>
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="48538">在AKS中对运行中的容器进行漏洞评估时传感器不会直接扫描运行中的容器。</st> <st c="48653">相反，它们会收集Kubernetes集群中容器工作负载的清单。</st>
    <st c="48739">然后，Defender for Containers会将此清单与ACR中镜像的漏洞评估报告进行匹配。</st> <st c="48854">因此，报告只会显示来自已扫描ACR的运行容器的漏洞。</st>
    <st c="48978">如果运行的镜像来自未扫描的注册表，Defender for Containers将无法显示其漏洞，从而可能产生一个安全漏洞，您需要</st>
    <st c="49149">考虑此问题。</st>
- en: <st c="49161">Understanding the Kubernetes control plane threat detection capabilities
    of Defender for Containers</st>
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="49161">了解Defender for Containers的Kubernetes控制平面威胁检测能力</st>
- en: <st c="49261">Defender for</st> <st c="49275">Containers offers runtime threat
    detection</st> <st c="49318">for two main areas – the</st> `<st c="49747">K8S_</st>`
    <st c="49751">prefix in the alerts and are detailed in</st> *<st c="49793">Table
    8.3</st>*<st c="49802">.</st>
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="49261">Defender for</st> <st c="49275">Containers提供运行时威胁检测</st> <st c="49318">覆盖两个主要领域
    – 在警报中带有`<st c="49747">K8S_</st>`前缀，并详细列出在</st> *<st c="49793">表8.3</st>*<st c="49802">。</st>
- en: '| **<st c="49803">Threat detection category –</st>** **<st c="49832">Exposed
    services</st>** |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="49803">威胁检测类别 –</st>** **<st c="49832">暴露服务</st>** |'
- en: '| <st c="49848">An exposed Postgres service with trust authentication configuration
    in Kubernetes</st> <st c="49931">detected (</st>`<st c="49941">K8S_ExposedPostgresTrustAuth</st>`<st
    c="49970">)</st> |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| <st c="49848">在Kubernetes中暴露的带信任身份验证配置的Postgres服务</st> <st c="49931">检测到（</st>`<st
    c="49941">K8S_ExposedPostgresTrustAuth</st>`<st c="49970">）</st> |'
- en: '| <st c="49972">An exposed Postgres service with risky configuration in Kubernetes</st>
    <st c="50039">detected (</st>`<st c="50049">K8S_ExposedPostgresBroadIPRange</st>`<st
    c="50081">)</st> |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| <st c="49972">Kubernetes中暴露的Postgres服务，配置存在风险</st> <st c="50039">检测到（</st>`<st
    c="50049">K8S_ExposedPostgresBroadIPRange</st>`<st c="50081">）</st> |'
- en: '| <st c="50083">An exposed Kubeflow dashboard</st> <st c="50113">detected (</st>`<st
    c="50123">K8S_ExposedKubeflow</st>`<st c="50143">)</st> |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| <st c="50083">暴露的Kubeflow仪表盘</st> <st c="50113">检测到（</st>`<st c="50123">K8S_ExposedKubeflow</st>`<st
    c="50143">）</st> |'
- en: '| <st c="50145">An exposed Kubernetes dashboard</st> <st c="50177">detected
    (</st>`<st c="50187">K8S_ExposedDashboard</st>`<st c="50208">)</st> |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| <st c="50145">暴露的Kubernetes仪表盘</st> <st c="50177">检测到（</st>`<st c="50187">K8S_ExposedDashboard</st>`<st
    c="50208">）</st> |'
- en: '| <st c="50210">An exposed Kubernetes service</st> <st c="50240">detected (</st>`<st
    c="50250">K8S_ExposedService</st>`<st c="50269">)</st> |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| <st c="50210">暴露的Kubernetes服务</st> <st c="50240">检测到（</st>`<st c="50250">K8S_ExposedService</st>`<st
    c="50269">）</st> |'
- en: '| <st c="50271">An exposed Redis service in AKS</st> <st c="50303">detected
    (</st>`<st c="50313">K8S_ExposedRedis</st>`<st c="50330">)</st> |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| <st c="50271">在AKS中暴露的Redis服务</st> <st c="50303">检测到（</st>`<st c="50313">K8S_ExposedRedis</st>`<st
    c="50330">）</st> |'
- en: '| **<st c="50332">Threat detection category –</st>** **<st c="50360">Abnormal
    activities</st>** |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="50332">威胁检测类别 –</st>** **<st c="50360">异常活动</st>** |'
- en: '| <st c="50379">An</st> <st c="50383">abnormal activity of a managed identity
    associated with Kubernetes (</st><st c="50451">preview) (</st>`<st c="50462">K8S_AbnormalMiActivity</st>`<st
    c="50485">)</st> |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| <st c="50379">与Kubernetes关联的托管身份的</st> <st c="50383">异常活动（</st><st c="50451">预览）（</st>`<st
    c="50462">K8S_AbnormalMiActivity</st>`<st c="50485">）</st> |'
- en: '| <st c="50487">An abnormal Kubernetes service account operation</st> <st c="50536">detected
    (</st>`<st c="50546">K8S_ServiceAccountRareOperation</st>`<st c="50578">)</st>
    |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| <st c="50487">异常的Kubernetes服务账户操作</st> <st c="50536">检测到（</st>`<st c="50546">K8S_ServiceAccountRareOperation</st>`<st
    c="50578">）</st> |'
- en: '| <st c="50580">K8S API requests from proxy IP address</st> <st c="50619">detected
    (</st>`<st c="50629">K8S_TI_Proxy</st>`<st c="50642">)</st> |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| <st c="50580">来自代理IP地址的K8S API请求</st> <st c="50619">检测到（</st>`<st c="50629">K8S_TI_Proxy</st>`<st
    c="50642">）</st> |'
- en: '| <st c="50644">A suspicious request to the Kubernetes</st> <st c="50683">API
    (</st>`<st c="50688">K8S.NODE_KubernetesAPI</st>`<st c="50711">)</st> |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| <st c="50644">向Kubernetes</st> <st c="50683">API发出的可疑请求（</st>`<st c="50688">K8S.NODE_KubernetesAPI</st>`<st
    c="50711">）</st> |'
- en: '| <st c="50713">A suspicious request to the Kubernetes</st> <st c="50752">Dashboard
    (</st>`<st c="50763">K8S.NODE_KubernetesDashboard</st>`<st c="50792">)</st> |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| <st c="50713">对Kubernetes</st> <st c="50752">仪表盘的可疑请求（</st>`<st c="50763">K8S.NODE_KubernetesDashboard</st>`<st
    c="50792">）</st> |'
- en: '| <st c="50794">A Kubernetes penetration testing tool</st> <st c="50832">detected
    (</st>`<st c="50842">K8S_PenTestToolsKubeHunter</st>`<st c="50869">)</st> |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| <st c="50794">检测到Kubernetes渗透测试工具（</st>`<st c="50842">K8S_PenTestToolsKubeHunter</st>`<st
    c="50869">）</st> |'
- en: '| **<st c="50871">Threat detection category – Privilege escalation</st>** **<st
    c="50920">and access</st>** |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="50871">威胁检测类别 – 特权提升</st>** **<st c="50920">和访问</st>** |'
- en: '| <st c="50930">A container with a sensitive volume mount</st> <st c="50973">detected
    (</st>`<st c="50983">K8S_SensitiveMount</st>`<st c="51002">)</st> |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| <st c="50930">检测到带有敏感卷挂载的容器（</st>`<st c="50983">K8S_SensitiveMount</st>`<st
    c="51002">）</st> |'
- en: '| <st c="51004">New high</st> <st c="51013">privileges role</st> <st c="51029">detected
    (</st>`<st c="51039">K8S_HighPrivilegesRole</st>`<st c="51062">)</st> |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| <st c="51004">检测到新高</st> <st c="51013">特权角色</st> <st c="51029">（</st>`<st
    c="51039">K8S_HighPrivilegesRole</st>`<st c="51062">）</st> |'
- en: '| <st c="51064">A privileged container</st> <st c="51087">detected (</st>`<st
    c="51097">K8S_PrivilegedContainer</st>`<st c="51121">)</st> |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| <st c="51064">检测到特权容器（</st>`<st c="51097">K8S_PrivilegedContainer</st>`<st
    c="51121">）</st> |'
- en: '| <st c="51123">Role binding to the</st> `<st c="51143">cluster-admin</st>`
    <st c="51156">role</st> <st c="51162">detected (</st>`<st c="51172">K8S_ClusterAdminBinding</st>`<st
    c="51196">)</st> |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| <st c="51123">检测到对</st> `<st c="51143">cluster-admin</st>` <st c="51156">角色的角色绑定（</st>`<st
    c="51172">K8S_ClusterAdminBinding</st>`<st c="51196">）</st> |'
- en: '| <st c="51198">Creation</st> <st c="51207">of an admission Webhooks configuration</st>
    <st c="51246">detected (</st>`<st c="51256">K8S_AdmissionController</st>`<st c="51280">)</st>
    |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| <st c="51198">检测到</st> <st c="51207">创建了一个Admission Webhooks配置（</st>`<st
    c="51256">K8S_AdmissionController</st>`<st c="51280">）</st> |'
- en: '| **<st c="51282">Threat detection category – Configuration and</st>** **<st
    c="51328">resource modifications</st>** |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="51282">威胁检测类别 – 配置和</st>** **<st c="51328">资源修改</st>** |'
- en: '| <st c="51350">CoreDNS modification in Kubernetes</st> <st c="51386">detected
    (</st>`<st c="51396">K8S_CoreDnsModification</st>`<st c="51420">)</st> |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| <st c="51350">Kubernetes中的CoreDNS修改</st> <st c="51386">检测到（</st>`<st c="51396">K8S_CoreDnsModification</st>`<st
    c="51420">）</st> |'
- en: '| <st c="51422">Kubernetes events</st> <st c="51440">deleted (</st>`<st c="51449">K8S_DeleteEvents</st>`<st
    c="51466">)</st> |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| <st c="51422">删除了Kubernetes事件（</st>`<st c="51449">K8S_DeleteEvents</st>`<st
    c="51466">）</st> |'
- en: '| <st c="51468">A new container in the</st> `<st c="51491">kube-system</st>`
    <st c="51502">namespace</st> <st c="51513">detected (</st>`<st c="51523">K8S_KubeSystemContainer</st>`<st
    c="51547">)</st> |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| <st c="51468">在</st> `<st c="51491">kube-system</st>` <st c="51502">命名空间</st>
    <st c="51513">检测到新容器（</st>`<st c="51523">K8S_KubeSystemContainer</st>`<st c="51547">）</st>
    |'
- en: '| **<st c="51549">Threat detection category –</st>** **<st c="51577">Malicious
    activities</st>** |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="51549">威胁检测类别 –</st>** **<st c="51577">恶意活动</st>** |'
- en: '| <st c="51597">Digital currency mining container</st> <st c="51632">detected
    (</st>`<st c="51642">K8S_MaliciousContainerImage</st>`<st c="51670">)</st> |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| <st c="51597">检测到数字货币挖掘容器（</st>`<st c="51642">K8S_MaliciousContainerImage</st>`<st
    c="51670">）</st> |'
- en: <st c="51672">Table 8.3 – Defender for Containers (Kubernetes control plane
    threat detections)</st>
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="51672">表8.3 – 容器防护（Kubernetes 控制平面威胁检测）</st>
- en: <st c="51752">Understanding the Kubernetes workload threat detection capabilities
    of Defender for Containers</st>
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="51752">理解Defender for Containers的Kubernetes工作负载威胁检测能力</st>
- en: <st c="51847">Workload threat detection uses the Defender Sensor agent on worker
    nodes to collect security</st> <st c="51941">events for analysis.</st> <st c="51962">At
    the time of writing, it can detect 34 threats, ranging from access to sensitive
    data and suspicious tool detections.</st> <st c="52082">These detections have
    a prefix of</st> `<st c="52116">K8S.NODE_</st>` <st c="52125">in the alerts and
    are listed in</st> *<st c="52158">Table 8.4</st>*<st c="52167">.</st>
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="51847">工作负载威胁检测使用在工作节点上的Defender Sensor代理收集安全</st> <st c="51941">事件进行分析。</st>
    <st c="51962">在撰写时，它可以检测34种威胁，范围包括对敏感数据的访问和可疑工具检测。</st> <st c="52082">这些检测的警报前缀为</st>
    `<st c="52116">K8S.NODE_</st>` <st c="52125">，并列在</st> *<st c="52158">表8.4</st>*<st
    c="52167">中。</st>
- en: '| **<st c="52168">Threat detection category – Privilege escalation and</st>**
    **<st c="52222">high privileges</st>** |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="52168">威胁检测类别 – 特权提升和</st>** **<st c="52222">高特权</st>** |'
- en: '| <st c="52237">An attempt to create a new Linux namespace from a container</st>
    <st c="52298">detected (</st>`<st c="52308">K8S.NODE_NamespaceCreation</st>`<st
    c="52335">)</st> |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| 从容器中尝试创建新的Linux命名空间</st> <st c="52298">检测到（</st>`<st c="52308">K8S.NODE_NamespaceCreation</st>`<st
    c="52335">）</st> |'
- en: '| <st c="52337">A command within a container running with high</st> <st c="52384">privileges
    (</st>`<st c="52396">K8S.NODE_PrivilegedExecutionInContainer</st>`<st c="52436">)</st>
    |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| 容器内部运行具有高</st> <st c="52384">特权的命令（</st>`<st c="52396">K8S.NODE_PrivilegedExecutionInContainer</st>`<st
    c="52436">）</st> |'
- en: '| <st c="52438">A container running in privileged</st> <st c="52472">mode (</st>`<st
    c="52478">K8S.NODE_PrivilegedContainerArtifacts</st>`<st c="52516">)</st> |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| 在特权容器中运行</st> `<st c="52472">模式（</st>`<st c="52478">K8S.NODE_PrivilegedContainerArtifacts</st>`<st
    c="52516">）</st> |'
- en: '| **<st c="52518">Threat detection category – Anomalous behavior and</st>**
    **<st c="52569">suspicious activity</st>** |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| **威胁检测类别 - 异常行为和</st>** **可疑活动</st>** |'
- en: '| <st c="52588">A history file has been</st> <st c="52613">cleared (</st>`<st
    c="52622">K8S.NODE_HistoryFileCleared</st>`<st c="52650">)</st> |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| 清除了历史文件</st> <st c="52613">（</st>`<st c="52622">K8S.NODE_HistoryFileCleared</st>`<st
    c="52650">）</st> |'
- en: '| <st c="52652">An uncommon connection attempt</st> <st c="52683">detected
    (</st>`<st c="52693">K8S.NODE_SuspectConnection</st>`<st c="52720">)</st> |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| 检测到不常见的连接尝试</st> <st c="52683">（</st>`<st c="52693">K8S.NODE_SuspectConnection</st>`<st
    c="52720">）</st> |'
- en: '| <st c="52722">An attempt to stop the</st> `<st c="52745">apt-daily-upgrade.timer</st>`
    <st c="52768">service</st> <st c="52777">detected (</st>`<st c="52787">K8S.NODE_TimerServiceDisabled</st>`<st
    c="52817">)</st> |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| 尝试停止</st> `<st c="52745">apt-daily-upgrade.timer</st>` <st c="52768">服务</st>
    <st c="52777">检测到（</st>`<st c="52787">K8S.NODE_TimerServiceDisabled</st>`<st c="52817">）</st>
    |'
- en: '| <st c="52819">Detected suspicious use of the</st> `<st c="52850">nohup</st>`
    <st c="52855">command (</st>`<st c="52865">K8S.NODE_SuspectNohup</st>`<st c="52887">)</st>
    |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| 检测到可疑使用</st> `<st c="52850">nohup</st>` <st c="52855">命令（</st>`<st c="52865">K8S.NODE_SuspectNohup</st>`<st
    c="52887">）</st> |'
- en: '| <st c="52889">Detected suspicious use of the</st> `<st c="52920">useradd</st>`
    <st c="52927">command (</st>`<st c="52937">K8S.NODE_SuspectUserAddition</st>`<st
    c="52966">)</st> |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| 检测到可疑使用</st> `<st c="52920">useradd</st>` <st c="52927">命令（</st>`<st c="52937">K8S.NODE_SuspectUserAddition</st>`<st
    c="52966">）</st> |'
- en: '| <st c="52968">Detected a suspicious file</st> <st c="52995">download (</st>`<st
    c="53005">K8S.NODE_SuspectDownloadArtifacts</st>`<st c="53039">)</st> |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| 检测到可疑文件下载</st> <st c="52995">（</st>`<st c="53005">K8S.NODE_SuspectDownloadArtifacts</st>`<st
    c="53039">）</st> |'
- en: '| <st c="53041">Detected a file download from a known malicious</st> <st c="53089">source
    (</st>`<st c="53097">K8S.NODE_SuspectDownload</st>`<st c="53122">)</st> |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| 从已知恶意来源下载文件</st> <st c="53089">（</st>`<st c="53097">K8S.NODE_SuspectDownload</st>`<st
    c="53122">）</st> |'
- en: '| <st c="53124">A suspicious file timestamp</st> <st c="53152">modification
    (</st>`<st c="53166">K8S.NODE_TimestampTampering</st>`<st c="53194">)</st> |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| 检测到可疑文件时间戳</st> <st c="53152">修改（</st>`<st c="53166">K8S.NODE_TimestampTampering</st>`<st
    c="53194">）</st> |'
- en: '| <st c="53196">A suspicious Download Then Run</st> <st c="53227">activity
    (</st>`<st c="53237">K8S.NODE_DownloadAndRunCombo</st>`<st c="53266">)</st> |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| 检测到可疑下载后运行</st> <st c="53227">活动（</st>`<st c="53237">K8S.NODE_DownloadAndRunCombo</st>`<st
    c="53266">）</st> |'
- en: '| <st c="53268">A</st> <st c="53270">possible password change using</st> `<st
    c="53301">crypt-method</st>` <st c="53313">detected (</st>`<st c="53324">K8S.NODE_SuspectPasswordChange</st>`<st
    c="53355">)</st> |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| 使用</st> `<st c="53301">crypt-method</st>` <st c="53313">可能的密码更改检测到（</st>`<st
    c="53324">K8S.NODE_SuspectPasswordChange</st>`<st c="53355">）</st> |'
- en: '| <st c="53357">Potential port forwarding to an external IP</st> <st c="53401">address
    (</st>`<st c="53410">K8S.NODE_SuspectPortForwarding</st>`<st c="53441">)</st>
    |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| 潜在的端口转发到外部IP</st> <st c="53401">地址（</st>`<st c="53410">K8S.NODE_SuspectPortForwarding</st>`<st
    c="53441">）</st> |'
- en: '| <st c="53443">A potential reverse shell</st> <st c="53469">detected (</st>`<st
    c="53479">K8S.NODE_ReverseShell</st>`<st c="53501">)</st> |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| 检测到潜在的反向Shell</st> <st c="53469">（</st>`<st c="53479">K8S.NODE_ReverseShell</st>`<st
    c="53501">）</st> |'
- en: '| <st c="53503">A security-related process termination</st> <st c="53542">detected
    (</st>`<st c="53552">K8S.NODE_SuspectProcessTermination</st>`<st c="53587">)</st>
    |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| 检测到与安全相关的进程终止</st> <st c="53542">（</st>`<st c="53552">K8S.NODE_SuspectProcessTermination</st>`<st
    c="53587">）</st> |'
- en: '| <st c="53589">A suspicious request to the Kubernetes</st> <st c="53628">API
    (</st>`<st c="53633">K8S.NODE_KubernetesAPI</st>`<st c="53656">)</st> |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| 向Kubernetes API发出可疑请求</st> <st c="53628">（</st>`<st c="53633">K8S.NODE_KubernetesAPI</st>`<st
    c="53656">）</st> |'
- en: '| <st c="53658">A suspicious request to Kubernetes</st> <st c="53693">Dashboard
    (</st>`<st c="53704">K8S.NODE_KubernetesDashboard</st>`<st c="53733">)</st> |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| <st c="53658">检测到对 Kubernetes 仪表盘的可疑请求</st> <st c="53693">（</st>`<st c="53704">K8S.NODE_KubernetesDashboard</st>`<st
    c="53733">）</st> |'
- en: '| <st c="53735">A Docker build operation detected on a Kubernetes</st> <st
    c="53785">node (</st>`<st c="53791">K8S.NODE_ImageBuildOnNode</st>`<st c="53817">)</st>
    |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| <st c="53735">在 Kubernetes 节点上检测到 Docker 构建操作</st> <st c="53785">（</st>`<st
    c="53791">K8S.NODE_ImageBuildOnNode</st>`<st c="53817">）</st> |'
- en: '| **<st c="53819">Threat detection category – Malicious activity and</st>**
    **<st c="53870">known threats</st>** |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="53819">威胁检测类别 – 恶意活动和</st>** **<st c="53870">已知威胁</st>** |'
- en: '| <st c="53883">Behavior similar to common Linux bots detected (</st><st c="53932">preview)
    (</st>`<st c="53943">K8S.NODE_CommonBot</st>`<st c="53962">)</st> |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| <st c="53883">检测到类似常见 Linux 机器人行为（</st><st c="53932">预览）</st>（`<st c="53943">K8S.NODE_CommonBot</st>`<st
    c="53962">）</st> |'
- en: '| <st c="53964">Digital</st> <st c="53972">currency mining-related behavior</st>
    <st c="54005">detected (</st>`<st c="54015">K8S.NODE_DigitalCurrencyMining</st>`<st
    c="54046">)</st> |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| <st c="53964">检测到与数字货币挖掘相关的行为</st> <st c="53972">（</st>`<st c="54015">K8S.NODE_DigitalCurrencyMining</st>`<st
    c="54046">）</st> |'
- en: '| <st c="54048">A process associated with digital currency mining</st> <st
    c="54098">detected (</st>`<st c="54108">K8S.NODE_CryptoCoinMinerArtifacts</st>`<st
    c="54142">)</st> |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| <st c="54048">检测到与数字货币挖掘相关的进程</st> <st c="54098">（</st>`<st c="54108">K8S.NODE_CryptoCoinMinerArtifacts</st>`<st
    c="54142">）</st> |'
- en: '| <st c="54144">A possible Cryptocoinminer download</st> <st c="54180">detected
    (</st>`<st c="54190">K8S.NODE_CryptoCoinMinerDownload</st>`<st c="54223">)</st>
    |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| <st c="54144">检测到可能的加密货币矿工下载</st> <st c="54180">（</st>`<st c="54190">K8S.NODE_CryptoCoinMinerDownload</st>`<st
    c="54223">）</st> |'
- en: '| <st c="54225">A possible backdoor</st> <st c="54245">detected (</st>`<st
    c="54255">K8S.NODE_LinuxBackdoorArtifact</st>`<st c="54286">)</st> |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| <st c="54225">检测到可能的后门</st> <st c="54245">（</st>`<st c="54255">K8S.NODE_LinuxBackdoorArtifact</st>`<st
    c="54286">）</st> |'
- en: '| <st c="54288">A possible command line exploitation</st> <st c="54325">attempt
    (</st>`<st c="54334">K8S.NODE_ExploitAttempt</st>`<st c="54358">)</st> |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| <st c="54288">检测到可能的命令行利用尝试</st> <st c="54325">（</st>`<st c="54334">K8S.NODE_ExploitAttempt</st>`<st
    c="54358">）</st> |'
- en: '| <st c="54360">A process that accessed the SSH authorized keys file in an
    unusual</st> <st c="54427">way (</st>`<st c="54432">K8S.NODE_SshKeyAccess</st>`<st
    c="54454">)</st> |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| <st c="54360">检测到以异常方式访问 SSH 授权密钥文件的进程</st> <st c="54427">（</st>`<st c="54432">K8S.NODE_SshKeyAccess</st>`<st
    c="54454">）</st> |'
- en: '| <st c="54456">A possible log tampering activity</st> <st c="54490">detected
    (</st>`<st c="54500">K8S.NODE_SystemLogRemoval</st>`<st c="54526">)</st> |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| <st c="54456">检测到可能的日志篡改活动</st> <st c="54490">（</st>`<st c="54500">K8S.NODE_SystemLogRemoval</st>`<st
    c="54526">）</st> |'
- en: '| **<st c="54528">Threat detection category – Suspicious</st>** **<st c="54567">tool
    detections</st>** |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="54528">威胁检测类别 – 可疑</st>** **<st c="54567">工具检测</st>** |'
- en: '| <st c="54582">A possible malicious web shell</st> <st c="54614">detected
    (</st>`<st c="54624">K8S.NODE_Webshell</st>`<st c="54642">)</st> |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| <st c="54582">检测到一个可能的恶意 Web Shell</st> <st c="54614">（</st>`<st c="54624">K8S.NODE_Webshell</st>`<st
    c="54642">）</st> |'
- en: '| <st c="54644">A possible attack tool</st> <st c="54667">detected (</st>`<st
    c="54677">K8S.NODE_KnownLinuxAttackTool</st>`<st c="54707">)</st> |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| <st c="54644">检测到可能的攻击工具</st> <st c="54667">（</st>`<st c="54677">K8S.NODE_KnownLinuxAttackTool</st>`<st
    c="54707">）</st> |'
- en: '| <st c="54709">Indicators associated with a DDOS toolkit</st> <st c="54751">detected
    (</st>`<st c="54761">K8S.NODE_KnownLinuxDDoSToolkit</st>`<st c="54792">)</st>
    |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| <st c="54709">检测到与 DDOS 工具包相关的指标</st> <st c="54751">（</st>`<st c="54761">K8S.NODE_KnownLinuxDDoSToolkit</st>`<st
    c="54792">）</st> |'
- en: '| <st c="54794">A MITRE Caldera agent</st> <st c="54816">detected (</st>`<st
    c="54826">K8S.NODE_MitreCalderaTools</st>`<st c="54853">)</st> |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| <st c="54794">检测到一个 MITRE Caldera 代理</st> <st c="54816">（</st>`<st c="54826">K8S.NODE_MitreCalderaTools</st>`<st
    c="54853">）</st> |'
- en: '| <st c="54855">A</st> <st c="54857">possible credential access tool</st> <st
    c="54889">detected (</st>`<st c="54899">K8S.NODE_KnownLinuxCredentialAccessTool</st>`<st
    c="54939">)</st> |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| <st c="54855">检测到一个</st> <st c="54857">可能的凭证访问工具</st> <st c="54889">（</st>`<st
    c="54899">K8S.NODE_KnownLinuxCredentialAccessTool</st>`<st c="54939">）</st> |'
- en: '| **<st c="54941">Threat detection category – Access to</st>** **<st c="54979">sensitive
    data</st>** |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="54941">威胁检测类别 – 访问</st>** **<st c="54979">敏感数据</st>** |'
- en: '| <st c="54993">Access to the</st> `<st c="55008">kubelet kubeconfig</st>`
    <st c="55026">file</st> <st c="55032">detected (</st>`<st c="55042">K8S.NODE_KubeConfigAccess</st>`<st
    c="55068">)</st> |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| <st c="54993">检测到对</st> `<st c="55008">kubelet kubeconfig</st>` <st c="55026">文件的访问</st>
    <st c="55032">（</st>`<st c="55042">K8S.NODE_KubeConfigAccess</st>`<st c="55068">）</st>
    |'
- en: '| <st c="55070">Access to the cloud metadata service</st> <st c="55107">detected
    (</st>`<st c="55117">K8S.NODE_ImdsCall</st>`<st c="55135">)</st> |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| 访问云元数据服务已检测到（`K8S.NODE_ImdsCall`） |'
- en: <st c="55137">Table 8.4 – Defender for Containers (Kubernetes workload threat
    detections)</st>
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 表8.4 – Defender for Containers（Kubernetes工作负载威胁检测）
- en: <st c="55212">Implementing the Defender for Containers plan at scale</st>
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在大规模实施Defender for Containers计划
- en: <st c="55267">Implementing</st> <st c="55281">Defender for Containers is a</st>
    <st c="55310">two-step process.</st>
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 实施Defender for Containers是一个两步过程。
- en: <st c="55327">First, we need to enable the plan in MDC environment settings
    by going to</st> **<st c="55402">Microsoft Defender for Cloud</st>** <st c="55430">→</st>
    **<st c="55433">Management</st>** <st c="55443">→</st> **<st c="55446">Environment
    settings</st>** <st c="55466">→ selecting your management group or subscription
    →</st> **<st c="55519">Settings</st>** <st c="55527">→</st> **<st c="55530">Defender
    plans</st>** <st c="55544">→</st> **<st c="55547">Cloud Workload Protection (CWP)</st>**<st
    c="55578">, and toggling</st> **<st c="55593">Containers</st>** <st c="55603">to</st>
    **<st c="55607">On</st>** <st c="55609">(</st>*<st c="55611">Figure 8</st>**<st
    c="55619">.13</st>*<st c="55622">).</st>
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在MDC环境设置中启用计划，方法是转到**Microsoft Defender for Cloud** → **管理** → **环境设置**
    → 选择您的管理组或订阅 → **设置** → **Defender计划** → **云工作负载保护（CWP）**，然后切换**容器**为**开启**（*图8.13*）。
- en: '![Figure 8.13 – Enabling the Defender for Containers plan](img/B19710_08_13.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![图8.13 – 启用Defender for Containers计划](img/B19710_08_13.jpg)'
- en: <st c="56263">Figure 8.13 – Enabling the Defender for Containers plan</st>
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.13 – 启用Defender for Containers计划
- en: <st c="56318">After enabling the plan, we need to enable vulnerability management
    and deploy the Defender Sensor agent to our Kubernetes clusters.</st> <st c="56452">This
    can be done either at the subscription or management group level, using the auto-provisioning
    option, or for individual clusters.</st> <st c="56587">Enabling it at the subscription
    level allows us to enforce protection at scale – once enabled, all existing and
    new AKS clusters will automatically</st> <st c="56735">be protected.</st>
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 启用计划后，我们需要启用漏洞管理并将Defender Sensor代理部署到我们的Kubernetes集群中。可以在订阅或管理组级别启用，使用自动配置选项，或者为单个集群启用。
    在订阅级别启用它可以让我们大规模强制实施保护——启用后，所有现有的和新的AKS集群将自动**受到保护**。
- en: <st c="56748">To</st> <st c="56752">configure agentless vulnerability assessment
    and auto-provisioning, follow</st> <st c="56827">these steps:</st>
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置无代理漏洞评估和自动配置，请按照以下步骤操作：
- en: <st c="56839">Go to</st> **<st c="56846">Microsoft Defender</st>** **<st c="56865">for
    Cloud</st>**<st c="56874">.</st>
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**Microsoft Defender for Cloud**。
- en: <st c="56875">Navigate to</st> **<st c="56888">Management</st>** <st c="56898">→</st>
    **<st c="56901">Environment settings</st>**<st c="56921">.</st>
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**管理** → **环境设置**。
- en: <st c="56922">Select your management group</st> <st c="56952">or subscription.</st>
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的管理组或订阅。
- en: <st c="56968">Go to</st> **<st c="56975">Settings</st>** <st c="56983">→</st>
    **<st c="56986">Defender plans</st>** <st c="57000">→</st> **<st c="57003">Cloud
    Workload Protection (CWP)</st>** <st c="57035">→</st> **<st c="57037">Containers</st>**<st
    c="57047">.</st>
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**设置** → **Defender计划** → **云工作负载保护（CWP）** → **容器**。
- en: <st c="57048">Select</st> **<st c="57056">Settings</st>** <st c="57064">under
    the</st> **<st c="57075">Monitoring</st>** **<st c="57086">coverage</st>** <st
    c="57094">column.</st>
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**监控****覆盖**栏目下选择**设置**。
- en: <st c="57102">Set</st> **<st c="57107">Defender sensor in Azure</st>** <st c="57131">to</st>
    **<st c="57135">On</st>** <st c="57137">(</st>*<st c="57139">Figure 8</st>**<st
    c="57147">.14</st>*<st c="57150">).</st>
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置**Azure中的Defender传感器**为**开启**（*图8.14*）。
- en: <st c="57153">Set</st> **<st c="57158">Agentless container vulnerability assessment</st>**
    <st c="57202">to</st> **<st c="57206">On</st>** <st c="57208">(</st>*<st c="57210">Figure
    8</st>**<st c="57218">.14</st>*<st c="57221">).</st>
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="57153">设置</st> **<st c="57158">无代理容器漏洞评估</st>** <st c="57202">为</st>
    **<st c="57206">开启</st>** <st c="57208">(</st>*<st c="57210">图 8</st>**<st c="57218">.14</st>*<st
    c="57221">)。</st>
- en: '![Figure 8.14 – Enabling agentless vulnerability management and Defender sensor
    auto-provisioning](img/B19710_08_14.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.14 – 启用无代理漏洞管理和 Defender 传感器自动配置](img/B19710_08_14.jpg)'
- en: <st c="58414">Figure 8.14 – Enabling agentless vulnerability management and
    Defender sensor auto-provisioning</st>
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="58414">图 8.14 – 启用无代理漏洞管理和 Defender 传感器自动配置</st>
- en: <st c="58509">Enabling</st> <st c="58519">this will assign the Azure Policy</st>
    **<st c="58553">Azure Kubernetes Service clusters should have Defender profile
    enabled</st>** <st c="58623">recommendation at the</st> <st c="58646">selected
    scope.</st>
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="58509">启用</st> <st c="58519">此功能将为 Azure 策略分配</st> **<st c="58553">应启用
    Azure Kubernetes Service 集群的 Defender 配置文件</st>** <st c="58623">建议，并应用于</st> <st
    c="58646">所选范围。</st>
- en: <st c="58661">As mentioned previously, implementing this plan is a great starting
    point, but keep its limitations in mind.</st> <st c="58771">For example, the plan
    does not cover vulnerability management or runtime security for containers running
    in other Azure services, such as App Service, Container Instances, Container Apps,
    or Function Apps.</st> <st c="58977">Also, the vulnerability assessment for AKS
    clusters does not perform a separate scan for container images detected at runtime.</st>
    <st c="59104">Instead, it matches the identified runtime container images with
    vulnerability reports from scanned Azure Container Registries.</st> <st c="59232">If
    your teams deploy images from public or other unscanned registries, you will need
    to address these using</st> <st c="59340">other methods.</st>
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="58661">如前所述，实施此计划是一个很好的起点，但请牢记其局限性。</st> <st c="58771">例如，该计划不涵盖其他 Azure
    服务（如应用服务、容器实例、容器应用或函数应用）中运行的容器的漏洞管理或运行时安全性。</st> <st c="58977">此外，针对 AKS 集群的漏洞评估不会针对运行时检测到的容器映像执行单独的扫描。</st>
    <st c="59104">相反，它将已识别的运行时容器映像与从扫描的 Azure 容器注册表中获取的漏洞报告进行匹配。</st> <st c="59232">如果您的团队从公共或其他未经扫描的注册表部署映像，则需要使用</st>
    <st c="59340">其他方法解决这些问题。</st>
- en: <st c="59354">Defender for Containers’ Kubernetes workload threat detection
    capabilities are focused on detecting rather than blocking threats.</st> <st c="59485">It
    mainly relies on behavior-based techniques that focus on monitoring system activities
    and comparing them to known attack patterns.</st> <st c="59619">This approach
    is effective at identifying recognized exploit indicators, but it may be ineffective
    when faced with new and previously unseen attack patterns, as it relies heavily
    on predefined behaviors.</st> <st c="59823">Behavior-based techniques can also
    trigger false positives if the baseline does not accurately reflect</st> <st c="59926">legitimate
    behaviors.</st>
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="59354">容器的 Defender 的 Kubernetes 工作负载威胁检测能力主要集中于检测而不是阻止威胁。</st> <st c="59485">它主要依赖于基于行为的技术，专注于监视系统活动并将其与已知攻击模式进行比较。</st>
    <st c="59619">这种方法在识别已知的攻击指标方面非常有效，但面对新的和以前未见的攻击模式时可能无效，因为它严重依赖预定义的行为。</st> <st
    c="59823">基于行为的技术如果基线不能准确反映</st> <st c="59926">合法行为，也可能触发误报。</st>
- en: <st c="59947">Other third-party security solution providers support workload-level
    AI-based detections that have a better chance of detecting new and evolving threats
    not matching any known pattern, offering a level of adaptability that behavior-based
    systems lack.</st> <st c="60200">For example, Palo Alto Network’s Prisma Cloud
    uses this technique to learn the expected behavior of deployed containers and
    automatically alerts or blocks anything outside the</st> <st c="60376">expected
    actions.</st>
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="59947">其他第三方安全解决方案提供商支持基于工作负载的基于 AI 的检测，有更好的机会检测不匹配任何已知模式的新和不断发展的威胁，提供了行为基础系统所缺乏的适应性水平。</st>
    <st c="60200">例如，Palo Alto Network 的 Prisma Cloud 使用此技术来学习部署容器的预期行为，并自动警报或阻止任何超出</st>
    <st c="60376">预期操作的行为。</st>
- en: <st c="60393">Another</st> <st c="60402">limitation to consider is Windows container
    workloads.</st> <st c="60457">Out of the 34 workload threat detections, only three
    are supported for Windows nodes.</st> <st c="60543">If your organization has a
    significant number of Windows containers, you will need to address runtime security
    using</st> <st c="60660">other methods.</st>
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="60393">另一个</st> <st c="60402">需要考虑的限制是 Windows 容器工作负载。</st> <st c="60457">在
    34 项工作负载威胁检测中，仅有三项支持 Windows 节点。</st> <st c="60543">如果您的组织有大量 Windows 容器，您需要使用</st>
    <st c="60660">其他方法来解决运行时安全问题。</st>
- en: <st c="60674">With the theory out of the way, let’s head over to the Azure portal
    for</st> <st c="60747">some implementation.</st>
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="60674">理论部分完成后，让我们进入 Azure 门户进行</st> <st c="60747">一些实现。</st>
- en: <st c="60767">Hands-on exercise – Continuous security monitoring on Azure</st>
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="60767">动手练习 – 在 Azure 上进行持续安全监控</st>
- en: <st c="60827">In this</st> <st c="60836">exercise, we will complete the</st>
    <st c="60867">following tasks:</st>
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="60827">在本</st> <st c="60836">练习中，我们将完成以下任务：</st>
- en: '**<st c="60883">Task 1</st>** <st c="60890">– Implementing and</st> <st c="60910">operationalizing
    CSPM</st>'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="60883">任务 1</st>** <st c="60890">– 实现和</st> <st c="60910">操作化 CSPM</st>'
- en: '**<st c="60931">Task 2</st>** <st c="60938">– Implementing and operationalizing
    continuous container</st> <st c="60996">workload protection</st>'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="60931">任务 2</st>** <st c="60938">– 实现和操作化持续容器</st> <st c="60996">工作负载保护</st>'
- en: <st c="61015">Task 1 – Implementing and operationalizing CSPM</st>
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="61015">任务 1 – 实现和操作化 CSPM</st>
- en: <st c="61063">In this</st> <st c="61072">task, we will cover MDC, where one
    of the main pillars is CSPM.</st> <st c="61136">MDC</st> <st c="61140">is a</st>
    **<st c="61145">cloud-native application protection platform</st>** <st c="61189">(</st>**<st
    c="61191">CNAPP</st>**<st c="61196">) that</st> <st c="61204">protects your cloud
    applications</st> <st c="61237">end to end</st> <st c="61248">using the</st> <st
    c="61258">following capabilities:</st>
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="61063">在本</st> <st c="61072">任务中，我们将涵盖 MDC，其中一个主要支柱是 CSPM。</st> <st c="61136">MDC</st>
    <st c="61140">是一个</st> **<st c="61145">云原生应用保护平台</st>** <st c="61189">(</st>**<st
    c="61191">CNAPP</st>**<st c="61196">)，它通过以下功能</st> <st c="61204">从端到端保护您的云应用</st>
    <st c="61237">：</st> <st c="61248">使用</st> <st c="61258">以下能力：</st>
- en: '**<st c="61281">DevSecOps</st>**<st c="61291">: Unifies security management
    across multi-cloud and multi-pipeline environments at the</st> <st c="61380">code
    level</st><st c="61390">.</st>'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="61281">DevSecOps</st>**<st c="61291">：在代码层面统一多云和多管道环境中的安全管理</st><st
    c="61380">。</st>'
- en: '**<st c="61391">CSPM</st>**<st c="61396">: Identifies and shares remediation
    of risks in</st> <st c="61445">cloud infrastructure</st><st c="61465">.</st>'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="61391">CSPM</st>**<st c="61396">：识别并共享云基础设施中的风险修复</st><st c="61445">。</st>'
- en: '**<st c="61466">Cloud Workload Posture Platform (CWPP)</st>**<st c="61505">:
    Protection capabilities for servers, containers, storage, and</st> <st c="61570">other
    workloads</st><st c="61585">.</st>'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="61466">云工作负载姿态平台 (CWPP)</st>**<st c="61505">：为服务器、容器、存储及</st> <st
    c="61570">其他工作负载提供保护功能</st><st c="61585">。</st>'
- en: <st c="61586">Defender for Cloud provides the following</st> <st c="61629">CSPM
    offerings:</st>
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="61586">Defender for Cloud 提供以下</st> <st c="61629">CSPM 服务：</st>
- en: '**<st c="61644">Foundational CSPM</st>**<st c="61662">: This is enabled by
    default for subscriptions and accounts</st> <st c="61723">that are already onboarded
    to Defender for Cloud.</st> <st c="61773">This CSPM capability is free.</st> <st
    c="61803">This includes features such as security recommendations, asset inventory,
    secure score, data visualization and reporting with Azure Workbooks, data exporting,
    workflow automation, tools for remediation, and the Microsoft cloud</st> <st c="62030">security
    benchmark.</st>'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="61644">基础 CSPM</st>**<st c="61662">：对于已加入 Defender for Cloud 的订阅和帐户，默认启用此功能。</st>
    <st c="61723">此 CSPM 功能是免费的。</st> <st c="61773">包括安全建议、资产清单、安全评分、使用 Azure 工作簿的数据可视化和报告、数据导出、工作流自动化、修复工具以及
    Microsoft 云</st> <st c="62030">安全基准等功能。</st>'
- en: '**<st c="62049">Defender CSPM</st>**<st c="62063">: This</st> <st c="62071">provides
    more advanced security posture features on top of the existing features available
    on foundational CSPM.</st> <st c="62184">This plan requires payment and</st> <st
    c="62215">is optional.</st>'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="62049">Defender CSPM</st>**<st c="62063">：在现有的基础 CSPM 功能之上提供更先进的安全姿态功能。</st>
    <st c="62184">此计划需要付费，并且</st> <st c="62215">是可选的。</st>'
- en: <st c="62227">Let’s</st> <st c="62234">enable the CSPM features on</st> <st
    c="62262">Microsoft Azure:</st>
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="62227">让我们</st> <st c="62234">在 Microsoft Azure 上启用 CSPM 功能：</st>
- en: <st c="62278">First, sign</st> <st c="62291">in to the</st> <st c="62301">Azure
    portal.</st>
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="62278">首先，登录</st> <st c="62291">到 Azure 门户。</st>
- en: <st c="62314">Confirm</st> <st c="62323">that you</st> <st c="62332">have at
    least one of these roles on your subscription – Owner, Contributor,</st> <st c="62408">or
    Reader.</st>
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="62314">确认</st> <st c="62323">你的订阅至少有以下其中一个角色 – 所有者、贡献者，</st> <st c="62408">或阅读者。</st>
- en: <st c="62418">Search for</st> **<st c="62430">Microsoft Defender for Cloud</st>**
    <st c="62458">on the Microsoft Azure search bar, and then</st> <st c="62503">select
    it.</st>
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="62418">在 Microsoft Azure 搜索栏上搜索</st> **<st c="62430">Microsoft Defender
    for Cloud</st>** <st c="62458">然后</st> <st c="62503">选择它。</st>
- en: <st c="62513">The</st> **<st c="62518">Defender for Cloud</st>** <st c="62536">overview
    page will open, and it is enabled on your subscription with the basic features,
    which include foundational CSPM, recommendations, an asset inventory, Workbooks,
    the secure score, and regulatory compliance with the Microsoft cloud</st> <st
    c="62776">security benchmark.</st>
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="62513">Defender for Cloud</st> **<st c="62518">概述页面将会打开，并且已经启用在你的订阅中具备基础功能，包括基础
    CSPM、建议、资产清单、Workbooks、安全评分以及符合微软云安全基准的法规合规性。</st>**
- en: <st c="62795">Go through the various features, highlighting the risks and recommendations</st>
    <st c="62872">per asset.</st>
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="62795">浏览各种功能，强调风险和建议</st> <st c="62872">每个资产。</st>
- en: <st c="62882">To enable Defender CSPM, navigate to</st> **<st c="62920">Environment
    settings</st>** <st c="62940">under</st> **<st c="62947">Management</st>** <st
    c="62957">on</st> <st c="62961">the left.</st>
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="62882">要启用 Defender CSPM，请导航到</st> **<st c="62920">管理下的环境设置</st>** <st
    c="62940">左侧。</st>
- en: '![Figure 8.15 – Selecting Environment settings on MDC](img/B19710_08_15.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.15 – 在 MDC 上选择环境设置](img/B19710_08_15.jpg)'
- en: <st c="63131">Figure 8.15 – Selecting Environment settings on MDC</st>
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="63131">图 8.15 – 在 MDC 上选择环境设置</st>
- en: <st c="63182">Select</st> <st c="63190">the subscription</st> <st c="63207">you
    want</st> <st c="63216">to protect.</st> <st c="63228">This will take you to the</st>
    <st c="63254">Defender</st> <st c="63263">plans.</st>
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="63182">选择</st> <st c="63190">你想要保护的订阅。</st> <st c="63207">这将带你进入</st>
    <st c="63254">Defender</st> <st c="63263">计划。</st>
- en: <st c="63269">Under</st> **<st c="63276">Cloud Security Posture Management (CSPM)</st>**<st
    c="63316">, toggle the</st> **<st c="63329">Defender CSPM</st>** <st c="63342">status</st>
    <st c="63350">to</st> **<st c="63353">On</st>**<st c="63355">.</st>
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="63269">在</st> **<st c="63276">云安全姿势管理 (CSPM)</st>**<st c="63316">下，切换</st>
    **<st c="63329">Defender CSPM</st>** <st c="63342">状态到</st> **<st c="63353">开启</st>**<st
    c="63355">。</st>
- en: '![Figure 8.16 – Enabling Defender CSPM](img/B19710_08_16.jpg)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.16 – 启用 Defender CSPM](img/B19710_08_16.jpg)'
- en: <st c="64135">Figure 8.16 – Enabling Defender CSPM</st>
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="64135">图 8.16 – 启用 Defender CSPM</st>
- en: <st c="64171">Click on</st> **<st c="64181">Settings</st>** <st c="64189">under</st>
    **<st c="64196">Defender CSPM Monitoring coverage</st>** <st c="64229">and enable
    all the extensions, as shown in the following screenshot.</st> <st c="64299">Take
    some time to go through all the components, descriptions, and</st> <st c="64366">Defender
    plans.</st>
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="64171">点击</st> **<st c="64181">设置</st>** <st c="64189">在</st> **<st c="64196">Defender
    CSPM 监控覆盖下</st>** <st c="64229">并启用所有的扩展，如下面的屏幕截图所示。</st> <st c="64299">花些时间去浏览所有组件、描述和</st>
    <st c="64366">Defender 计划。</st>
- en: '![Figure 8.17 – Enabling the Defender CSPM extensions](img/B19710_08_17.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.17 – 启用 Defender CSPM 扩展](img/B19710_08_17.jpg)'
- en: <st c="66172">Figure 8.17 – Enabling the Defender CSPM extensions</st>
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="66172">图 8.17 – 启用 Defender CSPM 扩展</st>
- en: <st c="66223">Select</st> **<st c="66231">Save</st>**<st c="66235">.</st>
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="66223">选择</st> **<st c="66231">保存</st>**<st c="66235">。</st>
- en: <st c="66236">We have</st> <st c="66245">seen how</st> <st c="66254">to enable
    the CSPM.</st> <st c="66274">Take some time to examine the additional</st> <st
    c="66315">findings</st> <st c="66324">after enabling</st> <st c="66339">Defender
    CSPM.</st>
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="66236">我们已经</st> <st c="66245">看到如何</st> <st c="66254">启用 CSPM。</st>
    <st c="66274">花些时间去检查启用后的额外</st> <st c="66315">发现</st> <st c="66324">Defender
    CSPM。</st>
- en: <st c="66353">Task 2 – Implementing and operationalizing continuous container
    workload protection</st>
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="66353">任务 2 – 实施和运营持续的容器工作负载保护</st>
- en: <st c="66437">In this</st> <st c="66446">task, we want to</st> <st c="66463">leverage
    Defender CSPM</st> <st c="66486">to enable</st> <st c="66496">agentless container
    security, and to identify risks across container registries and Kubernetes.</st>
    <st c="66592">In the previous task, we enabled the</st> **<st c="66629">Agentless
    discovery for Kubernetes</st>** <st c="66663">and</st> **<st c="66668">Agentless
    container vulnerability assessment</st>** <st c="66712">extensions.</st> <st c="66725">That
    is all it takes to enable agentless container security in</st> <st c="66788">Defender
    CSPM.</st>
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="66437">在这个</st> <st c="66446">任务中，我们希望</st> <st c="66463">利用 Defender
    CSPM</st> <st c="66486">来启用</st> <st c="66496">无代理容器安全，并识别容器注册表和 Kubernetes 中的风险。</st>
    <st c="66592">在上一个任务中，我们启用了</st> **<st c="66629">Kubernetes 的无代理发现</st>** <st
    c="66663">和</st> **<st c="66668">无代理容器漏洞评估</st>** <st c="66712">扩展。</st> <st c="66725">这就是启用
    Defender CSPM 中的无代理容器安全所需要的全部步骤。</st>
- en: <st c="66802">Let’s enable the CSPM features on</st> <st c="66837">Microsoft
    Azure:</st>
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="66802">让我们在</st> <st c="66837">Microsoft Azure 上启用 CSPM 功能：</st>
- en: <st c="66853">First, let’s integrate our Azure Container Registry to an AKS
    cluster by using the cloud shell</st> <st c="66949">command line:</st>
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="66853">首先，让我们通过使用云命令行在 AKS 集群中集成我们的 Azure 容器注册表</st> <st c="66949">命令：</st>
- en: '[PRE4]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <st c="67040">Navigate</st> <st c="67050">to Kubernetes</st> <st c="67064">services
    on Azure portal, and confirm under</st> **<st c="67108">Kubernetes resources</st>**
    <st c="67128">|</st> **<st c="67131">Namespaces</st>** <st c="67141">that the
    namespace</st> <st c="67161">is present.</st>
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="67040">导航</st> <st c="67050">到 Azure 门户中的 Kubernetes 服务，并在</st> **<st
    c="67108">Kubernetes 资源</st>** <st c="67128">|</st> **<st c="67131">命名空间</st>**
    <st c="67141">下确认命名空间是否存在。</st>
- en: <st c="67172">Go back</st> <st c="67181">to MDC, explore all the security findings
    under</st> **<st c="67229">Recommendations</st>**<st c="67244">, and then explore
    the queries available on</st> **<st c="67288">Cloud</st>** **<st c="67294">Security
    Explorer</st>**<st c="67311">.</st>
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="67172">返回</st> <st c="67181">到 MDC，查看所有安全发现，位于</st> **<st c="67229">推荐</st>**<st
    c="67244">下，然后查看在</st> **<st c="67288">Cloud</st>** **<st c="67294">Security Explorer</st>**<st
    c="67311">中的查询。</st>
- en: <st c="67312">Lastly, let’s</st> <st c="67327">click on</st> **<st c="67336">Workload
    protections</st>** <st c="67356">under</st> **<st c="67363">Cloud Security</st>**<st
    c="67377">; we can then see all the coverage for Defender</st> <st c="67426">for
    Cloud.</st>
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="67312">最后，让我们</st> <st c="67327">点击</st> **<st c="67336">工作负载保护</st>**
    <st c="67356">在</st> **<st c="67363">Cloud Security</st>**<st c="67377">下；然后我们可以看到
    Defender</st> <st c="67426">for Cloud 的所有覆盖范围。</st>
- en: '![Figure 8.18 – Reviewing Defender for Cloud coverage](img/B19710_08_18.jpg)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.18 – 审查 Defender for Cloud 覆盖范围](img/B19710_08_18.jpg)'
- en: <st c="67797">Figure 8.18 – Reviewing Defender for Cloud coverage</st>
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="67797">图 8.18 – 审查 Defender for Cloud 覆盖范围</st>
- en: <st c="67848">Under</st> **<st c="67855">Advanced protection</st>**<st c="67874">,
    click on</st> **<st c="67885">Container image scanning</st>**<st c="67909">. A
    container</st> <st c="67923">image vulnerability assessment</st> <st c="67954">scans
    your registry for</st> **<st c="67978">commonly known vulnerabilities</st>** <st
    c="68008">(</st>**<st c="68010">CVEs</st>**<st c="68014">) and provides a detailed
    vulnerability report for</st> <st c="68066">each image.</st>
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="67848">在</st> **<st c="67855">高级保护</st>**<st c="67874">下，点击</st> **<st
    c="67885">容器镜像扫描</st>**<st c="67909">。容器</st> <st c="67923">镜像漏洞评估</st> <st c="67954">会扫描你的注册表，查找</st>
    **<st c="67978">常见已知漏洞</st>** <st c="68008">（</st>**<st c="68010">CVE</st>**<st
    c="68014">）并为</st> <st c="68066">每个镜像提供详细的漏洞报告。</st>
- en: '![Figure 8.19 – Reviewing container image scanning](img/B19710_08_19.jpg)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.19 – 审查容器镜像扫描](img/B19710_08_19.jpg)'
- en: <st c="68428">Figure 8.19 – Reviewing container image scanning</st>
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="68428">图 8.19 – 审查容器镜像扫描</st>
- en: <st c="68476">Scroll</st> <st c="68484">down to the affected resources and explore
    the</st> <st c="68531">vulnerabilities found.</st>
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="68476">向下滚动，查看受影响的资源并探索</st> <st c="68531">发现的漏洞。</st>
- en: <st c="68553">In the</st> <st c="68561">exercises, we have</st> <st c="68580">seen
    how to leverage the various Defender for Cloud capabilities to secure our resources,
    using</st> <st c="68676">Defender CSPM.</st>
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="68553">在</st> <st c="68561">练习中，我们已经</st> <st c="68580">学习了如何利用 Defender
    for Cloud 的各种功能来保护我们的资源，使用</st> <st c="68676">Defender CSPM。</st>
- en: <st c="68690">Summary</st>
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="68690">总结</st>
- en: <st c="68698">Congratulations!</st> <st c="68716">You have successfully reached
    the end of this book.</st> <st c="68768">In this chapter, we covered how to implement
    runtime security gates using Azure Policy, as well as Azure Policy integrated
    with the Kubernetes admission controller.</st> <st c="68933">We also discussed
    the challenges of protecting modern cloud applications and some of the native
    capabilities that Azure has</st> <st c="69057">to offer.</st>
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="68698">恭喜！</st> <st c="68716">你已经成功地完成了本书的学习。</st> <st c="68768">在本章中，我们讨论了如何使用Azure策略实现运行时安全门控，并介绍了与Kubernetes准入控制器集成的Azure策略。</st>
    <st c="68933">我们还讨论了保护现代云应用的挑战，以及Azure所提供的一些本地能力。</st>
- en: <st c="69066">As we look ahead, here are some trends that we think will shape
    the future</st> <st c="69142">of DevSecOps:</st>
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="69066">展望未来，以下是我们认为将塑造DevSecOps未来的一些趋势：</st>
- en: '**<st c="69155">Automation</st>**<st c="69166">: Automation, coupled with AI,
    will drive operational efficiency.</st> <st c="69233">Security teams will focus
    on strategic initiatives while automated systems handle operational functions.</st>
    <st c="69338">The concept of “secure by design” will gain momentum, ensuring security
    is integral from</st> <st c="69427">the outset.</st>'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="69155">自动化</st>**<st c="69166">：自动化结合AI将推动操作效率。</st> <st c="69233">安全团队将专注于战略性任务，而自动化系统将处理操作性职能。</st>
    <st c="69338">“从设计开始就确保安全”这一概念将会得到广泛推行，确保安全从</st> <st c="69427">一开始就被纳入设计。</st>'
- en: '**<st c="69438">Tool consolidation</st>**<st c="69457">: Organizations will
    consolidate security tools to streamline processes and reduce costs.</st> <st
    c="69548">Merging observability and monitoring into a single platform will provide
    a comprehensive view of the</st> <st c="69649">security landscape.</st>'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="69438">工具整合</st>**<st c="69457">：组织将整合安全工具，以简化流程并降低成本。</st> <st c="69548">将可观察性和监控功能合并到一个平台中，将提供一个全面的安全态势视图。</st>
    <st c="69649">'
- en: '**<st c="69668">IaC</st>**<st c="69672">: IaC will play a crucial role, with
    traditional manual IT infrastructure management giving way to more efficient,
    code-driven approaches, especially with the growth of</st> <st c="69842">cloud
    computing.</st>'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="69668">基础设施即代码（IaC）</st>**<st c="69672">：IaC将在其中扮演至关重要的角色，传统的手动IT基础设施管理将让位于更高效、基于代码的方式，尤其是随着</st>
    <st c="69842">云计算的增长。</st>'
- en: '**<st c="69858">Remediation</st>**<st c="69870">: Swiftly addressing vulnerabilities
    and security issues will become a priority, preventing risks before</st> <st c="69976">they
    escalate.</st>'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="69858">修复</st>**<st c="69870">：迅速解决漏洞和安全问题将成为重点，防止风险在</st> <st c="69976">升级之前蔓延。</st>'
- en: '**<st c="69990">Software Bill of Materials (SBOMs)</st>**<st c="70025">: The
    evolution of SBOMs will enhance transparency by providing detailed information
    about software components</st> <st c="70137">and dependencies.</st>'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="69990">软件材料清单（SBOMs）</st>**<st c="70025">：SBOM的演进将通过提供关于软件组件</st>
    <st c="70137">和依赖关系的详细信息，增强透明度。</st>'
- en: <st c="70154">Some of these trends are already being adopted by a few cutting-edge
    organizations, but we think they will be more widely adopted.</st> <st c="70286">Staying
    ahead of these trends will help organizations equip themselves to handle the constantly
    changing cybersecurity challenges</st> <st c="70416">in DevOps.</st>
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="70154">这些趋势已经被一些前沿组织采纳，但我们认为它们将会被更广泛地应用。</st> <st c="70286">保持领先于这些趋势将帮助组织为应对不断变化的网络安全挑战做好准备。</st>
    <st c="70416">特别是在DevOps领域。</st>
- en: <st c="70426">Further reading</st>
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="70426">进一步阅读</st>
- en: <st c="70442">To learn more about the topics that were covered in this chapter,
    take a look at</st> <st c="70524">the following:</st>
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="70442">想了解更多关于本章讨论的主题，请查看以下内容：</st> '
- en: <st c="70538">MDC</st> <st c="70543">documentation:</st> [<st c="70558">https://learn.microsoft.com/en-us/azure/defender-for-cloud/</st>](https://learn.microsoft.com/en-us/azure/defender-for-cloud/)<st
    c="70617">.</st>
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="70538">MDC</st> <st c="70543">文档：</st> [<st c="70558">https://learn.microsoft.com/en-us/azure/defender-for-cloud/</st>](https://learn.microsoft.com/en-us/azure/defender-for-cloud/)<st
    c="70617">。</st>
