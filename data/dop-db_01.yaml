- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Data at Scale with DevOps
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 DevOps 进行大规模数据处理
- en: Welcome to the first chapter! In this book, you will learn the fundamentals
    of DevOps, its impact on the industry, and how to apply it to modern data persistence
    technologies.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到第一章！在本书中，你将学习 DevOps 的基础知识，它对行业的影响，以及如何将其应用于现代数据持久性技术。
- en: When I first encountered the term **DevOps** years ago, I initially saw it as
    a way to grant development teams unrestricted access to production environments.
    This made me nervous, especially because there seemed to be a lack of clear accountability
    at that time, making the move toward DevOps appear risky.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当我第一次遇到**DevOps**这个术语时，我最初将其视为一种为开发团队提供不受限制的生产环境访问权限的方式。这让我感到很紧张，尤其是因为当时似乎缺乏明确的责任划分，这使得转向
    DevOps 显得有些冒险。
- en: At the time (around 2010), the roles of developers and operations were divided
    by a very strict line. Developers could gain read-only privileges, but that’s
    about it. What I did not see back then was that this was the first step in blurring
    the lines between development and operation teams. We already had many siloed
    teams pointing fingers at one another. This made the work slow, segmented, and
    frustrating. I was worried this would just increase complexity and cause an even
    greater challenge. Luckily, today’s world of DevOps is very different, and we
    can all improve it together even further!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当时（大约是2010年），开发人员和运维人员的角色被严格划分开来。开发人员只能获得只读权限，仅此而已。我当时没有意识到的是，这实际上是模糊开发和运维团队界限的第一步。我们当时已经有了很多彼此指责的孤立团队，这使得工作变得缓慢、分散且令人沮丧。我当时担心这只会增加复杂性，并带来更大的挑战。幸运的是，今天的
    DevOps 世界截然不同，我们可以一起进一步改进它！
- en: There are no more dividing lines between the development and operations teams
    – they are one team with a common objective. This improves quality, speed, and
    agility! This also means that traditional roles such as database admin are changing
    as well. We now have **site reliability engineers** (**SREs**) or DevOps engineers
    who are experts at using databases and able to perform operational and development
    tasks alike. Blurring the line means you increase the responsibilities, and in
    a high-performing DevOps team, this means you are responsible for everything from
    end to end. Modern tooling and orchestration frameworks can help you do way more
    than ever before, but it’s a very different landscape than it was many years ago.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 开发和运维团队之间不再有明确的界限——它们是一个拥有共同目标的团队。这提高了质量、速度和敏捷性！这也意味着传统角色，比如数据库管理员，正在发生变化。我们现在有**站点可靠性工程师**（**SREs**）或
    DevOps 工程师，他们不仅精通数据库的使用，还能执行运维和开发任务。模糊界限意味着你需要承担更多责任，而在一个高效能的 DevOps 团队中，这意味着你要负责从头到尾的所有工作。现代工具和编排框架可以帮助你完成比以往更多的工作，但它的环境与多年前完全不同。
- en: This book will introduce you to this amazing new world, walk you through the
    journey that leads us to this ever-changing world of DevOps today, and give some
    indications as to where we might go next.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将带你进入这个令人惊叹的新世界，带你走过通向今天这个不断变化的 DevOps 世界的旅程，并为我们可能的下一步提供一些指引。
- en: By the end of this book, you will be able to not only demonstrate your theoretical
    knowledge but also design, build, and operate complex systems with a heavy focus
    on data persistence technologies.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书结束时，你不仅能够展示你的理论知识，还能够设计、构建和运营复杂的系统，重点关注数据持久性技术。
- en: DevOps and data persistence technologies have a love-hate relationship, which
    makes this topic even more interesting.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 和数据持久性技术有着一种既爱又恨的关系，这使得这个话题更加有趣。
- en: 'In this chapter, we will take a deep dive into the following topics:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将深入探讨以下主题：
- en: The modern data landscape
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现代数据格局
- en: Why speed matters
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么速度很重要
- en: Data management strategies
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据管理策略
- en: The early days of DevOps
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 的早期
- en: SRE versus DevOps
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SRE 与 DevOps
- en: Engineering principles
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工程原则
- en: Objectives – SLOs/SLIs
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标——SLOs/SLIs
- en: The modern data landscape
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代数据格局
- en: Have you ever wondered how much data we generate every single day? Or the effort
    required to store and access your data on demand? What about the infrastructure
    or the services required to make all of this happen? Not to mention the engineering
    effort put in to make all of this happen. If you have, you are in the right place.
    These questions inspired me to dive deep into the realms of DevOps and SRE and
    inspired the creation of this book.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您是否曾想过我们每天生成多少数据？或者需要多少工作来存储并按需访问您的数据？再说说需要让这一切发生的基础设施或服务？更不用说为了让这一切发生而付出的工程努力。如果您曾经想过，那么您来对地方了。这些问题启发了我深入探索DevOps和SRE的领域，并启发了本书的创作。
- en: Technology impacts almost every aspect of our lives. We are more connected than
    ever, with access to more information and services than we even realize. It’s
    not just our computers, phones, or tablets that are connected to the internet,
    but our cars, cameras, watches, televisions, speakers, and more. The more digital
    native we become, the bigger our digital footprint grows.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 技术几乎影响我们生活的每个方面。我们比以往任何时候都更加连接，可以访问比我们意识到的更多的信息和服务。我们连接到互联网的不仅仅是计算机、手机或平板电脑，还有我们的汽车、相机、手表、电视、扬声器等等。我们变得越来越数字化，我们的数字足迹也越来越大。
- en: A digital footprint, also known as a digital shadow, is a collection of data
    that represents an individual’s interactions and activities across digital platforms
    and the internet. This data can be categorized as either **passive**, where it’s
    generated without direct interaction – such as browsing history – or **active**,
    resulting from deliberate online actions such as social media posts or emails.
    Your digital footprint serves as an online record of your digital presence, and
    it can have lasting implications for your privacy and reputation.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 数字足迹，也称为数字影子，是代表个人在数字平台和互联网上的互动和活动的数据集合。这些数据可以分为**被动**生成的数据，如浏览历史，或**主动**生成的数据，如社交媒体帖子或电子邮件。您的数字足迹作为您数字存在的在线记录，对您的隐私和声誉可能产生持久的影响。
- en: 'As of 2022, researchers estimate that out of 8 billion people (the world’s
    population as of 2022), approximately 5 billion utilize the internet daily. Compared
    to the 2 billion that was measured in 2012, this is a 250% increase over 10 years.
    This is an incredible increase. See the following figure for reference:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2022年，研究人员估计，在全球80亿人口（2022年的世界人口）中，约有50亿人每天使用互联网。与2012年测得的20亿相比，这是十年内增长了250%。这是一个令人难以置信的增长。有关参考，请参见下图：
- en: '![Figure 1.1 – Daily internet users (in billions)](img/B19315_01_1.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – 每日互联网用户（以十亿为单位）](img/B19315_01_1.jpg)'
- en: Figure 1.1 – Daily internet users (in billions)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 每日互联网用户（以十亿为单位）
- en: Each person who has a digital presence generates digital footprints in two ways.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 每个拥有数字存在的人以两种方式生成数字足迹。
- en: 'The first is actively. When you browse a website, upload a picture, send an
    email, or make a video call, you generate data that will be utilized and stored
    for some time. The other, less obvious way is passive data generation. If you,
    like me, utilize digital services with push notifications on or have GPS enabled
    on your phone with a timeline, for example, you are generating data every minute
    of the day – even if you do not use these services actively. Prime examples can
    be any **Internet of Things** (**IoT**) devices, something such as an internet-enabled
    security camera – even if you are not actively using it, it’s still generating
    data and constantly uploading it to your service provider for safekeeping. IoT
    devices are the secondary source of data generators right after us active internet
    surfers. Researchers estimate that approximately 13 billion IoT devices are being
    connected and in daily use as of 2022, with the expectation that this figure will
    become close to 30 billion by the end of 2030\. See the following figure for reference:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是主动的。当您浏览网站、上传图片、发送电子邮件或进行视频通话时，您生成的数据将被利用并存储一段时间。另一种不那么明显的方式是被动数据生成。例如，如果您像我一样使用带有推送通知或在手机上启用了GPS并具有时间线的数字服务，即使您不主动使用这些服务，您每天每分钟都在生成数据。典型的例子可以是任何**物联网**（**IoT**）设备，比如连接到互联网的安全摄像头
    - 即使您不活跃使用它，它仍在生成数据并不断上传到服务提供商以供保管。物联网设备是我们这些积极上网者之后的第二大数据生成源。研究人员估计，截至2022年，全球约有130亿个物联网设备正在连接并日常使用，预计到2030年底，这一数字将接近300亿。有关参考，请参见下图：
- en: '![Figure 1.2 – Connected IoT devices (in the billions)](img/B19315_01_2.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – 连接的物联网设备（以十亿计）](img/B19315_01_2.jpg)'
- en: Figure 1.2 – Connected IoT devices (in the billions)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – 连接的物联网设备（以十亿计）
- en: Combining the 5 billion active internet users with the 13 billion connected
    IoT devices, it is easy to guess that our combined digital footprint must be ginormous.
    Yet trying to guess the exact number is much harder than you might think. Give
    it a try.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 将50亿活跃的互联网用户与130亿个连接的物联网设备相结合，可以很容易地推测出，我们的数字足迹一定是巨大的。然而，尝试猜测准确的数字比你想象的要困难得多。试试看吧。
- en: As of 2023, it is estimated that we generate approximately 3.5 exabytes of data
    every single day. This is about 1 exabyte more than what was estimated in 2021\.
    To help visualize how much data we are talking about, let me try to put this into
    perspective. Let’s say you have a notebook (or one of the latest phones) with
    1 TB of storage capacity. If you were to use this 1 TB storage to store all this
    information, it would be full in less than 0.025 seconds. An alternative way to
    think about it is that we can fill 3,670,016 devices with 1 TB storage within
    24 hours.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2023年，预计我们每天生成大约3.5艾字节的数据。这比2021年估计的多出约1艾字节。为了帮助你理解我们在谈论的数据量，我试着将其具象化。假设你有一本笔记本（或一部最新款的手机），它的存储容量是1TB。如果你用这个1TB的存储来存储所有这些信息，它将在不到0.025秒的时间内被填满。另一种思考方式是，我们可以在24小时内填满3,670,016个拥有1TB存储容量的设备。
- en: How do we generate data today?
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们今天是如何生成数据的？
- en: Well, for starters, we collectively send approximately 333.2 billion emails
    per day. This means that more than 3.5 million emails are sent per second. We
    also make over 0.5 billion hours of video calls, stream more than 200 million
    hours of media content, and share more than 5 billion videos and photos every
    single day.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们每天总共发送大约3332亿封电子邮件。这意味着每秒钟就会发送超过350万封电子邮件。我们还进行超过5亿小时的视频通话，播放超过2亿小时的媒体内容，并每天分享超过50亿个视频和照片。
- en: So, yes, that’s a lot of us armed with many devices (on average, one active
    internet user had about 2.6 IoT devices in 2022) generating an unbelievable amount
    of data every single day. But the challenge does not stop at the amount of data
    alone. The speed and reliability of interacting with it are just as important
    as, if not more important than, the storage itself. Have you ever searched for
    one of your photos to show someone, but it was slow and took forever to find,
    so you gave up? We have all been there, but can you remember just how much time
    after doing this that you decided to abandon your search?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，是的，正是这样的一大群人，配备了众多设备（2022年，平均每个活跃互联网用户大约拥有2.6个物联网设备），每天生成了惊人的数据量。但是，挑战并不仅仅在于数据的数量。与这些数据的互动速度和可靠性与存储本身一样重要，甚至比存储本身更为重要。你是否曾经找过某张照片想展示给别人看，但因为搜索速度太慢、找了很久而放弃？我们都曾经历过这种情况，但你还记得你放弃搜索之后过了多少时间吗？
- en: 'As technology advances, we gain quicker access to information and multitask
    more efficiently, which may be contributing to a gradual decline in our attention
    spans. Research shows that in 2000, the average attention span was 12 seconds.
    Since then, significant technological milestones have occurred: the advent of
    the iPhone, YouTube, various generations of mobile networks, Wikipedia, and Spotify,
    to name a few. Internet speed has also soared, moving from an average of 127 kilobits
    per second in 2000 to 4.4 Mbps by 2010, and hitting an average of 50.8 Mbps by
    2020 – with some areas experiencing speeds well over 200 Mbps today.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 随着技术的进步，我们能够更快速地获取信息并更高效地进行多任务处理，这可能是导致我们注意力持续时间逐渐下降的原因之一。研究表明，2000年时，平均注意力时间为12秒。自那时以来，科技取得了重要的里程碑：iPhone的问世、YouTube的诞生、各代移动网络的发展、维基百科和Spotify等的出现，仅举几例。互联网速度也飞速提升，从2000年时的127千比特每秒提升到2010年的4.4兆比特每秒，到2020年平均达到了50.8兆比特每秒——如今，一些地区的速度已经超过了200兆比特每秒。
- en: As the digital landscape accelerates, so do our expectations, resulting in further
    erosion of our attention spans. By 2015, that 12-second average had fallen to
    just 8.25 seconds and dropped slightly below 8 seconds by 2022.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 随着数字化领域的加速发展，我们的期望值也在不断提高，这导致了注意力持续时间的进一步缩短。到2015年，原本12秒的平均注意力时间已经下降至8.25秒，并在2022年略微低于8秒。
- en: Why speed matters
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么速度很重要
- en: If you consider your attention span the full amount of time you would consider
    spending to complete a simple task, such as showing photos or videos to a friend,
    this means searching for it is just a small percentage of your total time. Let’s
    say you are using a type of cloud service to search for your photo or video. What
    would you consider to be an acceptable amount of time between you hitting *search*
    and receiving your content?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你把注意力集中在完成一个简单任务的全部时间上，比如向朋友展示照片或视频，那么搜索这个任务所花费的时间只是你总时间的一小部分。假设你正在使用某种云服务来搜索你的照片或视频。那么，你认为从你点击*搜索*到收到内容之间，多久的时间是可以接受的？
- en: I still remember the time when “buffering” was a given thing, but if you see
    something similar today, you would find it unacceptable. According to multiple
    studies, the ideal load time for “average content,” such as photos or videos,
    is somewhere between 1 and 2 seconds. 53% of mobile site visits are abandoned
    if pages take longer than three seconds to load. A further two-second delay in
    load time results in abandonment rates of up to 87%.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我仍然记得当“缓冲”是常态的日子，但如果今天你看到类似的现象，你会觉得这是无法接受的。根据多项研究，理想的“普通内容”加载时间（例如照片或视频）应为1到2秒之间。如果页面加载时间超过三秒，53%的移动站点访问会被放弃。如果再多延迟两秒，放弃率高达87%。
- en: This shows us that storing our data is not enough – making it accessible reliably
    and with blazing speed is not only nice to have but an absolute necessity in today’s
    world.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们，仅仅存储数据是不够的——让数据能够可靠、快速地访问，不仅是“好有”的需求，而是今天这个世界的**绝对必要**。
- en: Data management strategies
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据管理策略
- en: 'There are many strategies out there, and we will need to use most of them to
    meet and hopefully exceed our customers’ expectations. Reading this book, you
    will learn about some of the key data management strategies at length. For now,
    however, I would like to bring six of these techniques to your attention. We will
    take a much closer look at each of these in the upcoming chapters:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多策略可以使用，我们需要运用大多数策略来满足并且希望超越客户的期望。阅读本书，你将详细了解一些关键的数据管理策略。至于现在，我想先向你介绍其中的六种技巧。我们将在接下来的章节中仔细探讨这些方法：
- en: '**Bring your data closer**: The closer the data is to users, the faster they
    can access it. Yes, it may sound obvious, but users can be anywhere in the world,
    and they might even be traveling while trying to access their data. For them,
    these details do not matter, but the expectation will remain the same.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将你的数据带得更近**：数据离用户越近，用户访问它的速度就越快。是的，这听起来很明显，但用户可能身处世界的任何角落，甚至可能在旅行时尝试访问他们的数据。对他们来说，这些细节可能无关紧要，但他们的期望仍然不变。'
- en: There are many different ways to keep data physically close. One of the most
    successful strategies is called **edge computing**, which is a distributed computing
    paradigm that brings computation and data storage closer to the sources of data.
    This is expected to improve response times and save bandwidth. Edge computing
    is an architecture rather than a specific technology (and a topology), and is
    a location-sensitive form of distributed computing.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有许多不同的方式来让数据保持物理上的接近。其中最成功的策略之一叫做**边缘计算**，这是一种分布式计算范式，将计算和数据存储更靠近数据源。预计这将改善响应时间并节省带宽。边缘计算是一种架构，而不是具体的技术（或者说拓扑结构），它是一种位置敏感的分布式计算形式。
- en: The other very obvious strategy is to utilize the closest data center possible
    when utilizing a cloud provider. AWS, for example, spans 96 Availability Zones
    within 30 geographic Regions around the world as of 2022\. Google Cloud offers
    a very similar 106 zones and 35 regions as of 2023.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常明显的策略是利用尽可能靠近的**数据中心**，特别是在使用云服务提供商时。例如，AWS在2022年在全球范围内覆盖了96个可用区，分布在30个地理区域内。Google
    Cloud在2023年提供了非常相似的106个区域和35个地区。
- en: Leveraging the nearest physical location can greatly decrease your latency and
    therefore your customer experience.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 利用最近的物理位置可以大大降低延迟，从而提升客户体验。
- en: '**Reduce the length of your data journey**: Again, this is a very obvious one.
    Try to avoid any unnecessary steps to create the shortest journey between the
    end user and their data. Usually, the shortest will be the fastest (obviously
    it’s not that simple, but as a best practice, it can be applied). The greater
    the number of actions you do to retrieve the required information, the greater
    computational power you utilize, which directly increases the cost associated
    with the operation. It also linearly increases the complexity and most of the
    time increases latency and cost as well.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩短数据旅程的长度**：这一点非常明显。尽量避免任何不必要的步骤，尽量缩短最终用户与数据之间的路径。通常，最短的路径就是最快的（显然，这并不简单，但作为最佳实践，适用）。你为了获取所需信息所做的操作越多，所使用的计算能力就越大，这直接增加了与操作相关的成本。它还会线性增加复杂性，并且大多数情况下会增加延迟和成本。'
- en: '**Choose the right database solutions**: There are many database solutions
    out there that you can categorize based on type, such as relational to non-relational
    (or NoSQL), the distribution being centralized or distributed, and so on. Each
    category has a high number of sub-categories and each can offer a unique set of
    solutions to your particular use case. It’s really hard to find the right tool
    for the job, considering that requirements are always changing. We will dive deeper
    into each type of system and their pros and cons a bit later in this book.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择合适的数据库解决方案**：目前有许多数据库解决方案，你可以根据类型进行分类，例如关系型与非关系型（或NoSQL）、集中式与分布式等。每种分类下有大量子类别，每个子类别都可以为你的特定使用场景提供独特的解决方案。考虑到需求总是不断变化，找到合适的工具非常困难。稍后我们将深入探讨每种系统类型及其优缺点。'
- en: '**Apply clever analytics**: Analytical systems, if applied correctly, can be
    a real game changer in terms of optimization, speed, and security. Analytics tools
    are there to help develop insights and understand trends and can be the basis
    of many business and operational decisions. Analytical services are well placed
    to provide the best performance and cost for each analytics job. They also automate
    many of the manual and time-consuming tasks involved in running analytics, all
    with high performance, so that customers can quickly gain insights.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用巧妙的分析**：如果正确应用，分析系统在优化、速度和安全性方面可以带来真正的变革。分析工具帮助开发洞察、理解趋势，并为许多业务和操作决策提供基础。分析服务能够为每项分析任务提供最佳的性能和成本。它们还自动化了运行分析时许多繁琐且耗时的任务，且性能高效，使客户能够快速获得洞察。'
- en: '**Leverage machine learning** (**ML**) **and artificial intelligence** (**AI**)
    **to try to predict the future**: ML and AI are critical for a modern data strategy
    to help businesses and customers predict what will happen *in the future* and
    build intelligence into their systems and applications. With the right security
    and governance control combined with AI and ML capabilities, you can make automated
    actions regarding where data is physically located, who has access to it, and
    what can be done with it at every step of the data journey. This will enable you
    to stick with the highest standards and greatest performance when it comes to
    data management.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用机器学习**（**ML**）**和人工智能**（**AI**）**尝试预测未来**：机器学习和人工智能对现代数据战略至关重要，它们帮助企业和客户预测未来将会发生什么，并将智能融入系统和应用程序中。在合适的安全性和治理控制的结合下，配合AI和ML的能力，你可以在数据旅程的每个步骤中自动执行关于数据物理位置、谁可以访问以及可以对数据做什么的操作。这将使你在数据管理方面始终遵循最高标准，并获得最佳性能。'
- en: '**Scale on demand**: The aforementioned strategies are underpinned by the method
    you choose to operate your systems. This is where DevOps (and SRE) plays a crucial
    part and can be the deciding factor between success and failure. All major cloud
    providers provide you with literally hundreds of platform choices for virtually
    every workload (AWS offered 475 instance types at the end of 2022). Most major
    businesses have a very “curvy” utilization trend, which is why they find the on-demand
    offering of the cloud very attractive from a financial point of view.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按需扩展**：上述策略的实现依赖于你选择的系统运行方式。在这一点上，DevOps（以及SRE）起着至关重要的作用，可能是决定成功与失败的关键因素。所有主要的云服务提供商几乎都为每个工作负载提供数百种平台选择（截至2022年底，AWS提供了475种实例类型）。大多数大型企业的资源利用趋势非常“弯曲”，因此它们从财务角度来看，发现云服务的按需提供非常具有吸引力。'
- en: You should only pay for resources when you need them and pay nothing when you
    don’t. This is one of the big benefits of using cloud services. However, this
    model only works in practice if the correct design and operational practices and
    the right automation and compatible tooling are utilized.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该只在需要资源时付费，而在不需要时不付费。这是使用云服务的一个重要优势。然而，这种模式只有在使用正确的设计和运营实践、合适的自动化以及兼容的工具时，才能在实践中生效。
- en: A real-life example
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一个真实的例子
- en: A leading telecommunications company was set to unveil their most anticipated
    device of the year at precisely 2 P.M., a detail well publicized to all customers.
    As noon approached, their online store saw typical levels of traffic. By 1 P.M.,
    it was slightly above average. However, a surge of customers flooded the site
    just 10 minutes before the launch, aiming to be among the first to secure the
    new phone. By the time the clock struck 2 P.M., the website had shattered previous
    records for unique visitors. In the 20 minutes from 1:50 P.M. to 2:10 P.M., the
    visitor count skyrocketed, increasing twelvefold.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一家领先的电信公司计划在下午2点准时发布他们今年最受期待的设备，这个细节已广泛宣传给所有顾客。中午接近时，他们的在线商店流量维持在典型水平。到了下午1点，流量略高于平均水平。然而，在发布前10分钟，涌入了大量顾客，大家都想成为首批抢到新手机的人。等到下午2点钟时，网站的独立访客数打破了以往的记录。在1:50到2:10的20分钟内，访客数量激增了十二倍。
- en: This influx triggered an automated scaling event that expanded the company’s
    infrastructure from its baseline (designated as 1x) to an unprecedented 32x. Remarkably,
    this massive scaling was needed only for the initial half-hour. After that, it
    scaled down to 12x by 2:30 P.M., further reduced to 4x by 3 P.M., and returned
    to its baseline of 1x by 10 P.M.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这一波流量激增触发了一个自动扩展事件，将公司的基础设施从基线（设定为1x）扩展到前所未有的32x。值得注意的是，这种大规模扩展仅在最初的半小时内是必要的。之后，到下午2:30时，它缩减到12x，3点时进一步减少到4x，直到晚上10点恢复到1x的基线。
- en: This seamless adaptability was made possible through a strategic blend of declarative
    orchestration frameworks, **infrastructure as code** (**IaC**) methodologies,
    and fully automated CI/CD pipelines. To summarize, the challenge is big. To be
    able to operate reliably yet cost-effectively, with consistent speed and security,
    all the while automatically scaling these services up and down on demand without
    human interaction in a matter of minutes, you need a set of best practices on
    how to design, build, test, and operate these systems. This sounds like DevOps.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这种无缝适应能力的实现得益于声明式编排框架、**基础设施即代码**（**IaC**）方法以及完全自动化的CI/CD管道的战略性结合。总之，挑战非常大。为了能够可靠且具成本效益地运营，同时保持一致的速度和安全性，并在几分钟内根据需求自动扩展和缩减这些服务而无需人工干预，你需要一套最佳实践，来指导如何设计、构建、测试和运营这些系统。这听起来像是DevOps。
- en: The early days of DevOps
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps的早期发展
- en: I first came across DevOps around 2014 or so, just after the first annual *State
    of DevOps* report was published. At the time, the idea sounded great, but I had
    no idea how it worked. It felt like – at least to me – it was still in its infancy
    or I was not knowledgeable and experienced enough to see the big picture just
    yet. Probably the latter. Anyway, a lot has happened since then, and the industry
    picked up the pace. Agile, CI/CD, DevSecOps, GitOps, and other approaches emerged
    on the back of the original idea, which was to bring software developers and operations
    together.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我大约在2014年左右第一次接触到DevOps，就在第一份年度*DevOps状态报告*发布之后。那时，这个概念听起来很棒，但我完全不知道它是如何运作的。至少对我来说，它还像是处于初期阶段，或者我当时还不够有经验和知识，无法看到全局。可能是后者。无论如何，自那时以来发生了很多变化，行业也加快了步伐。敏捷开发、CI/CD、DevSecOps、GitOps等方法应运而生，源自最初的一个想法——将软件开发者和运维人员结合起来。
- en: DevOps emerged as a response to longstanding frictions between **developers**
    (**Devs**) and **operations** (**Ops**) within the IT industry. The term *obvious*
    seems apt here because, for anyone involved in IT during that period, the tension
    was palpable and constant. Devs traditionally focused solely on creating or fixing
    features, handing them off to Ops for deployment and ongoing management. Conversely,
    Ops prioritized maintaining a stable production environment, often without the
    expertise to fully comprehend the code they were implementing.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 是对 IT 行业中 **开发人员**（**Devs**）和 **运维人员**（**Ops**）之间长期摩擦的回应。在这里，*显而易见* 这个词恰如其分，因为对于任何在那个时期参与
    IT 的人来说，这种紧张氛围是显而易见且不断存在的。开发人员传统上只专注于创建或修复功能，然后将其交给运维部门进行部署和持续管理。相反，运维团队则优先维护一个稳定的生产环境，往往缺乏完全理解他们所实施的代码的专业知识。
- en: 'This set up an inherent conflict: introducing new elements into a production
    environment is risky, so operational stability usually involves minimizing changes.
    This gave rise to a “Devs versus Ops” culture, a divide that DevOps sought to
    bridge. However, achieving this required both sides to evolve and adapt.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这就导致了一个内在的冲突：将新元素引入生产环境是有风险的，因此，运维的稳定性通常涉及最小化变更。这催生了“开发与运维对立”的文化，这种分歧是 DevOps
    试图弥合的。然而，要实现这一点，双方都需要发展和适应。
- en: In the past, traditional operational roles such as system administrators, network
    engineers, and monitoring teams largely relied on manual processes. I can recall
    my initial stint at IBM, where the pinnacle of automation was a Bash script. Much
    of the work in those days – such as setting up physical infrastructure, configuring
    routing and firewalls, or manually handling failovers – was done by hand.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，传统的运维角色，如系统管理员、网络工程师和监控团队，主要依赖手动过程。我记得我在 IBM 的初次经历，那时自动化的巅峰是一个 Bash 脚本。在那时，许多工作——比如搭建物理基础设施、配置路由和防火墙，或手动处理故障转移——都是靠人工完成的。
- en: While SysAdmin and networking roles remain essential, even in the cloud era,
    the trend is clearly toward automation. This shift enhances system reliability
    as automated configurations are both traceable and reproducible. If systems fail,
    they can be swiftly and accurately rebuilt.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管系统管理员和网络岗位在云时代依然至关重要，但趋势显然是向自动化发展。这一转变提高了系统的可靠性，因为自动化配置既可追踪又可重现。如果系统发生故障，可以迅速而准确地重建。
- en: Though foundational knowledge of network and systems engineering is irreplaceable,
    the push toward automation necessitates software skills – a proficiency often
    lacking among traditional operational engineers. What began with simple Bash scripts
    has evolved to include more complex programming languages such as Perl and Python,
    and specialized automation languages such as Puppet, Ansible, and Terraform.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管网络和系统工程的基础知识不可替代，但向自动化的推动要求软件技能——这一点往往是传统运维工程师所欠缺的。从简单的 Bash 脚本开始，发展到包括更复杂的编程语言，如
    Perl 和 Python，以及像 Puppet、Ansible 和 Terraform 这样的专门自动化语言。
- en: In terms of the development side, the development team worked with very long
    development life cycles. They performed risky and infrequent “big-bang” releases
    that almost every time caused massive headaches for the Ops teams and posed a
    reliability/stability risk to the business. Slowly but steadily, Dev teams moved
    to a more frequent, gradual approach that tolerated failures better. Today, we
    call this Agile development.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发方面，开发团队有着非常长的开发周期。他们进行的是风险高且不频繁的“大爆炸”发布，这几乎每次都会给运维团队带来巨大的麻烦，并对业务的可靠性/稳定性构成威胁。慢慢地，开发团队转向了一种更加频繁、逐步推进的方式，这种方式更能容忍失败。如今，我们称之为敏捷开发。
- en: If you look at it from this point of view, you can say that a set of common
    practices designed to reduce friction between Dev and Ops teams is the basis of
    DevOps. However, simple common practices could not solve the Dev versus Ops mentality
    that the industry possessed at the time. Shared responsibility between Devs and
    Ops was necessary to drive this movement to success. Automation that enables the
    promotion of new features into production rapidly and safely in a repeatable manner
    could only be achieved if the two teams worked together, shared a common objective,
    and were accountable (and responsible) for the outcome together. This is where
    SRE came into the picture.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从这个角度来看，你可以说一套旨在减少开发和运维团队之间摩擦的通用实践是DevOps的基础。然而，简单的通用实践无法解决当时行业中存在的开发与运维之间的心态差异。开发和运维之间的共享责任是推动这一运动成功的关键。只有当两个团队共同合作、共享共同目标并共同对结果负责时，才能实现能够快速、安全地将新功能推向生产环境的自动化。这就是SRE的诞生背景。
- en: SRE versus DevOps
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SRE与DevOps
- en: SRE originated at Google. In the words of Ben Treynor (VP of engineering at
    Google), “*SRE is what happens when you ask a software engineer to design an*
    *operations function*.”
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: SRE起源于谷歌。用谷歌工程副总裁本·特雷诺尔的话来说，“*SRE就是你请求软件工程师设计一个* *运维职能*时发生的事情。”
- en: If you want to put it simply (again, I am quoting Google here), “*Class SRE*
    *implements DevOps*.”
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想简单地理解（再次引用谷歌的话），“*SRE类* *实现了DevOps*。”
- en: SRE is the (software) engineering discipline that aims to bridge the gap between
    Devs and Ops by treating all aspects of operations (infrastructure, monitoring,
    testing, and so on) as software, therefore implementing DevOps in its ultimate
    form. This is fully automated, with zero manual interaction, treating every single
    change to any of its components (again referring to any changes to infrastructure,
    monitoring, testing, and so on) as a release. Every change is done via a pipeline,
    in a version-controlled and tested manner. If a release fails, or a production
    issue is observed and traced back to a change, you can simply roll back your changes
    to the previously known, healthy state.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: SRE是旨在通过将所有操作方面（基础设施、监控、测试等）视为软件，来弥合开发与运维之间差距的软件工程学科，从而以其最终形式实现DevOps。这是完全自动化的，零人工干预，将每一个对其组件的更改（再次指任何基础设施、监控、测试等的更改）视为一次发布。每次更改都通过管道进行，采用版本控制并经过测试的方式。如果发布失败，或出现生产问题并追溯到某个更改，你可以简单地将更改回滚到先前已知的健康状态。
- en: The fact that it is treated as any other software release allows the Dev teams
    to take on more responsibility and take part in Ops, almost fully blurring the
    line between the Dev and Ops functions. Ultimately, this creates a *You build
    it, you run it* culture – which makes “end-to-end” ownership possible.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它被视为与其他软件发布相同，这使得开发团队能够承担更多责任并参与运维工作，几乎完全模糊了开发和运维职能之间的界限。最终，这创造了*你构建，你运行*的文化——这使得“端到端”所有权成为可能。
- en: So, are SRE and DevOps the same thing? No, they are not. SRE is an engineering
    function that can also be described as a specific implementation of DevOps that
    focuses specifically on building and running reliable systems, whereas DevOps
    is a set of practices that is more broadly focused on bringing the traditional
    Dev and Ops functions closer together.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，SRE和DevOps是一样的吗？不，它们不是。SRE是一种工程职能，也可以看作是DevOps的一个特定实现，专注于构建和运行可靠的系统，而DevOps是一组实践，更广泛地关注将传统的开发和运维职能更加紧密地结合在一起。
- en: Regardless of which way you go, you want to ensure that you set an objective,
    engineering principles, and a tooling strategy that can help you make consistent
    decisions as you embark on your journey as a DevOps/SRE professional.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择哪条路径，都应该确保设定目标、工程原则和工具策略，帮助你在成为DevOps/SRE专业人员的过程中做出一致的决策。
- en: Engineering principles
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工程原则
- en: 'I offer the following engineering principles to start with:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我提供以下工程原则作为起点：
- en: Zero-touch automation for everything (if it’s manual – and you have to do it
    multiple times a month – it should be automated)
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对一切进行零接触自动化（如果是手动的——并且你必须每月做多次——它应该被自动化）
- en: Project-agnostic solutions (defined in the configuration to avoid re-development
    for new projects, any tool/module should be reusable)
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与项目无关的解决方案（在配置中定义，以避免为新项目重新开发，任何工具/模块都应具有可重用性）
- en: IaC (infrastructure should be immutable where possible and defined as code;
    provisioning tools should be reusable)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IaC（基础设施应该尽可能不可变并且定义为代码；配置工具应该是可重用的）
- en: '**Continuous delivery** (**CD**) with **continuous integration** (**CI**) (common
    approaches and environments across your delivery cycle; any service should be
    deployable immediately)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续交付** (**CD**) 与 **持续集成** (**CI**)（在交付周期中的常见方法和环境；任何服务应能立即部署）'
- en: Reliability and security validated at every release (penetration testing, chaos
    testing, and more should be added to the CI/CD pipeline; always identify the point
    of flavors at your earliest)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每个发布版本中验证可靠性和安全性（渗透测试、混沌测试等应添加到CI/CD流水线中；始终尽早识别不同的环境配置）
- en: Be data-driven (real-time data should be utilized to make decisions)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据驱动（应利用实时数据来做决策）
- en: To fully realize your engineering goals and adhere to your principles without
    compromise, you should make “immutable IaC” a priority objective.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完全实现您的工程目标并遵守原则而不妥协，您应该将“不可变IaC”作为优先目标。
- en: 'To enable this, I would recommend the following IaC principles:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我推荐以下IaC原则：
- en: Systems can be easily reproduced
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统可以轻松复现
- en: Systems are immutable
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统是不可变的
- en: Systems are disposable
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统是可丢弃的
- en: Systems are consistent
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统是一致的
- en: Processes are repeatable
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过程是可重复的
- en: Code/config are version-controlled
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码/配置受版本控制
- en: 'Once you have defined your goals, it’s time for you to choose the right tools
    for the job. To do that, you must ensure these tools are allowed to utilize the
    following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了目标，就该选择合适的工具来完成工作。为此，您必须确保这些工具被允许利用以下内容：
- en: '`main.tf`):'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.tf`）：'
- en: '[PRE0]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`deployment-and-service.yaml`) for Kubernetes:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deployment-and-service.yaml`）用于Kubernetes：'
- en: '[PRE1]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Idempotency**:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**幂等性**：'
- en: This allows you to create and deploy an entire infrastructure declaratively.
    For example, you can deploy not only agents (or sidecars) but also the network
    infrastructure, storage systems, and any other resources you may need. Idempotency
    is the property that an operation may be applied multiple times with the result
    not differing from the first application. Restated, this means multiple identical
    requests should have the same effect as a single request.
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这使得您可以声明性地创建和部署整个基础设施。例如，您不仅可以部署代理（或边车），还可以部署网络基础设施、存储系统以及您可能需要的任何其他资源。幂等性是指一个操作可以多次应用，且结果与第一次应用时相同。换句话说，这意味着多个相同的请求应该与单个请求产生相同的效果。
- en: Idempotency enables the same request to be sent multiple times but the result
    given is always the same (same as declared, never different).
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 幂等性使得相同的请求可以多次发送，但给出的结果始终相同（与声明一致，永远不变）。
- en: '**No secrets and environment config** **in code**:'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码中** **不包含机密和环境配置**：'
- en: The main cloud providers all have a secure way to manage secrets. These solutions
    provide a good way to store secrets or environment config values for the application
    you host on their services.
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有主要的云提供商都有一种安全的方式来管理机密。这些解决方案为您托管在其服务上的应用程序提供了一种存储机密或环境配置值的良好方式。
- en: Everything should be self-served and manageable in a standardized manner and
    therefore secrets and configs must be declarative and well defined to work with
    the aforementioned requirements.
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一切都应该以标准化的方式自助服务和可管理，因此机密和配置必须是声明式的，并且定义明确，以便与上述要求兼容。
- en: '**Convention** **over configuration**:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**约定** **优于配置**：'
- en: Also known as environment tag-based convention over configuration, convention
    over configuration is a simple concept that is primarily used in programming.
    It means that the environment in which you work (systems, libraries, languages,
    and so on) assumes many logical situations by default, so if you adapt to them
    rather than creating your own rules each time, programming becomes an easier and
    more productive task.
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也称为基于环境标签的约定优于配置，约定优于配置是一个简单的概念，主要用于编程中。它意味着您工作所在的环境（系统、库、语言等）默认假设许多逻辑情境，因此如果您适应它们而不是每次都创建自己的规则，编程将变得更容易且更高效。
- en: This means that developers have to make fewer decisions when they’re developing
    and there are always logical default options. These logical default options have
    been created out of convention, not configuration.
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这意味着开发人员在开发时需要做更少的决策，并且总会有逻辑上的默认选项。这些逻辑默认选项是通过约定而非配置创建的。
- en: '**Automation scripts packaged into** **an image**:'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化脚本打包成** **镜像**：'
- en: This enables immutability and encourages sharing. No longer is a script located
    on a server and then has to be copied to others – instead, it can be shipped just
    like the rest of our code, enabling scripts to be available in a registry rather
    than dependent on others.
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这使得不可变性得以实现并鼓励共享。脚本不再位于服务器上，之后必须复制到其他地方——相反，它可以像我们的其他代码一样进行发布，使得脚本可以在注册表中使用，而不是依赖于其他服务。
- en: Thanks to the amazing progress in this field in the past 10+ years, customer
    expectations are sky-high when it comes to modern solutions. As we established
    earlier, if content does not load in under two seconds, it is considered to be
    slow. If you have to wait longer than 3 to 5 seconds, you are likely to abandon
    it. This is very similar to availability and customer happiness. When we talk
    about customer happiness (which evolved from customer experience), a concept you
    cannot measure and therefore cannot be data-driven, setting the right goals/objectives
    can be crucial to how you design your solutions.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 得益于过去10多年在这一领域的惊人进展，客户对现代解决方案的期望值已经非常高。如前所述，如果内容加载时间超过两秒钟，就会被认为是慢的。如果你需要等待超过3到5秒，用户很可能会放弃。这与可用性和客户满意度非常相似。当我们谈论客户满意度（这一概念是从客户体验演变而来）时，这是一个无法量化的概念，因此无法进行数据驱动，设定正确的目标/目标对于如何设计你的解决方案至关重要。
- en: Objectives – SLOs/SLIs
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目标 – SLOs/SLIs
- en: '**Service-level objectives** (**SLOs**), which is a concept that’s referenced
    many times in Google’s SRE handbook, can be a great help to set your direction
    from the start. Choosing the right objective, however, can be trickier than you
    might think.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务水平目标**（**SLOs**），这一概念在谷歌的SRE手册中被多次提及，对于从一开始就确定方向非常有帮助。然而，选择正确的目标比你想象的要复杂。'
- en: My personal experience aligns with Google’s recommendation, which suggests that
    an SLO – which sets the target for the reliability of a service’s customers –
    should be under 100%.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我的个人经验与谷歌的建议一致，谷歌建议SLO（设定服务客户可靠性目标）应该低于100%。
- en: This is due to multiple reasons. Achieving 100% is not just very hard and extremely
    expensive, but almost impossible given that almost all services have soft/hard
    dependencies on other services. If just one of your dependencies offers less than
    100% availability, your SLO cannot be met. Also, even with every precaution you
    can make, and every redundancy in place, there is a non-zero probability that
    something (or many things) will fail, resulting in less than 100% availability.
    More importantly, even if you could achieve 100% reliability of your services,
    the customers would very likely not experience that. The path your customers must
    take (the systems they have to use) to access your services is likely to have
    less than 100% SLO.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由多个原因造成的。实现100%可用性不仅非常困难且极其昂贵，几乎是不可能的，因为几乎所有服务都对其他服务有软/硬依赖。如果你的某个依赖服务的可用性低于100%，那么你的SLO就无法达成。此外，即使你采取了所有的预防措施，并且实现了每一项冗余，依然存在非零概率，某些东西（或许是很多东西）会失败，导致可用性低于100%。更重要的是，即使你能够实现服务的100%可靠性，客户也很可能无法体验到这一点。客户必须经过的路径（他们需要使用的系统）访问你的服务时，很可能会有低于100%的SLO。
- en: Most commercial internet providers, for example, offer 99% availability. This
    also means that as you go higher and higher, let’s say from 99% to 99.9% or IBM’s
    extreme five nines (99.999%), the cost of achieving and maintaining this availability
    will be significantly more expensive the more “nines” you add, but your customers
    will experience less and less of your efforts, which makes the objective questionable.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数商业互联网服务提供商，例如，提供99%的可用性。这也意味着，当你越来越接近100%的可用性时，假设从99%到99.9%或IBM的极限五个9（99.999%），实现和维持这种可用性的成本将随着“九”数的增加而显著增加，但你的客户几乎感受不到你的努力，这使得这一目标变得值得质疑。
- en: Above the selected SLO threshold, almost all users should be “happy,” and below
    this threshold, users are likely to be unhappy, raise concerns, or just stop using
    the service.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在选定的SLO阈值以上，几乎所有用户都应该“满意”，而低于该阈值时，用户很可能不满，提出疑虑，或者直接停止使用该服务。
- en: Once you’ve agreed that you should look for an SLO less than 100%, but likely
    somewhere above or around 99%, how do you define the right baseline?
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你同意应该寻找一个低于100%的SLO，但可能在99%左右，如何定义合适的基准？
- en: This is where **service-level indicators** (**SLIs**), **service-level agreements**
    (**SLAs**), and error budgets come into play. I will not detail all of these here,
    but if you are interested, please refer to Google’s SRE book ([https://sre.google/books/](https://sre.google/books/))
    for more details on the subject.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是**服务级别指标**（**SLIs**）、**服务级别协议**（**SLAs**）和错误预算发挥作用的地方。我在这里不会详细说明所有这些内容，但如果你有兴趣，请参考谷歌的
    SRE 书籍（[https://sre.google/books/](https://sre.google/books/)）了解更多细节。
- en: Let’s say you picked an SLO of 99.9% – which is, based on my personal experience,
    the most common go-to for businesses these days. You now have to consider your
    core operational metrics. **DevOps Research and Assessment** (**DORA**) suggests
    four key metrics that indicate the performance of a DevOps team, ranking them
    from “low” to “elite,” where “elite” teams are more likely to meet or even exceed
    their goals and delight their customers compared to “low” ranking teams.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你选择了 99.9% 的服务级别目标（SLO）——根据我的个人经验，这是目前大多数企业的常见选择。接下来，你需要考虑你的核心运营指标。**DevOps
    研究与评估**（**DORA**）提出了四个关键指标来衡量 DevOps 团队的绩效，并根据这些指标将团队分为“低绩效”到“卓越绩效”四个等级，其中“卓越绩效”团队更有可能达成甚至超越其目标，令客户满意，相较于“低绩效”团队。
- en: 'These four metrics are as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这四个指标如下：
- en: '**Lead time for change**, a metric that quantifies the duration from code commit
    to production deployment, is in my view one of the most crucial indicators. It
    serves as a measure of your team’s agility and responsiveness. How swiftly can
    you resolve a bug? Think about it this way:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变更交付时间**，一个衡量从代码提交到生产部署所需时间的指标，在我看来，这是最重要的指标之一。它作为衡量团队敏捷性和响应能力的标准。你能多迅速地解决一个bug？可以这样考虑：'
- en: '**Low-performing**: 1 month to 6 months of lead time'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低绩效**：1 个月至 6 个月的交付时间'
- en: '**Medium-performing**: 1 week to 1 month of lead time'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中等绩效**：1 周至 1 个月的交付时间'
- en: '**High-performing**: 1 day to 1 week of lead time'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高绩效**：1 天至 1 周的交付时间'
- en: '**Elite-performing**: Less than 1 day of lead time'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卓越绩效**：不到 1 天的交付时间'
- en: '**Deployment frequency**, which measures the successful release count to production.
    The key word here is *successful*, as a Dev team that constantly pushes broken
    code through the pipeline is not great:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署频率**，即衡量成功发布到生产环境的次数。这里的关键字是*成功*，因为一个不断将有问题的代码推送到流水线的开发团队并不优秀：'
- en: '**Low-performing**: 1 month to 6 months between deployments'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低绩效**：1 个月至 6 个月的部署间隔'
- en: '**Medium-performing**: 1 week to 1 month between deployments'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中等绩效**：1 周至 1 个月的部署间隔'
- en: '**High-performing**: 1 day to 1 week between deployments'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高绩效**：1 天至 1 周的部署间隔'
- en: '**Elite-performing**: Multiple deployments per day/less than 1 day between
    deployments'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卓越绩效**：每天多次部署/部署间隔不到 1 天'
- en: '**Change failure rate**, which measures the percentage of deployments that
    result in a failure in production that requires a bug fix or rollback. The goal
    is to release as frequently as possible, but what is the point if your team is
    constantly rolling back those changes, or causing an incident by releasing a bad
    update? By tracking it, you can see how often your team is fixing something that
    could have been avoided:'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变更失败率**，即衡量生产环境中部署失败需要修复或回滚的部署百分比。目标是尽可能频繁地发布，但如果你的团队不断回滚这些变更，或通过发布一个坏更新引发故障，那么这样发布的意义何在？通过跟踪它，你可以看到你的团队多频繁地在修复本可以避免的问题：'
- en: '**Low-performing**: 45% to 60% CFR'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低绩效**：45% 至 60% 的变更失败率（CFR）'
- en: '**Medium-performing**: 15% to 45% CFR'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中等绩效**：15% 至 45% 的变更失败率（CFR）'
- en: '**High-performing**: 0% to 15% CFR'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高绩效**：0% 至 15% 的变更失败率（CFR）'
- en: '**Elite-performing**: 0% to 15% CFR'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卓越绩效**：0% 至 15% 的变更失败率（CFR）'
- en: '**Mean time to restore** (**MTTR**) measures how long it takes an organization
    to recover from a failure. This is measured from the initial moment of an outage
    until the incident team has recovered all services and operations. Another key
    and related metric is **mean time to acknowledge** (**MTTA**), which measures
    the time it takes to be aware of and confirm an issue in production:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平均恢复时间**（**MTTR**）衡量一个组织从故障中恢复的时间。这是从发生故障的初始时刻开始，直到事故团队恢复所有服务和操作的时间。另一个关键相关指标是**平均确认时间**（**MTTA**），即衡量意识到并确认生产环境中问题的时间：'
- en: '**Low-performing**: 1 week to 1 month of downtime'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低绩效**：1 周至 1 个月的停机时间'
- en: '**Medium- and high-performing**: Less than 24 hours of downtime'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中高绩效**：不到 24 小时的停机时间'
- en: '**Elite-performing**: Less than 1 hour of downtime'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卓越绩效**：不到 1 小时的停机时间'
- en: In conclusion, SLOs are crucial in setting reliability targets for a service,
    with a recommendation for these to be under 100% to account for dependencies and
    potential service failures. Utilizing tools such as SLIs, SLAs, and error budgets
    is essential in defining the appropriate SLO baseline, usually around or above
    99%. We have also highlighted the importance of core operational metrics, as suggested
    by DORA, in assessing the performance of a DevOps team. These metrics, including
    lead time for change, deployment frequency, change failure rate, and MTTR, provide
    tangible criteria to measure and improve a team’s efficiency and effectiveness
    in service delivery and incident response.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，SLO（服务水平目标）在设定服务的可靠性目标中至关重要，建议这些目标设定在100%以下，以考虑到依赖关系和潜在的服务故障。利用SLI（服务水平指标）、SLA（服务水平协议）和错误预算等工具对于定义合适的SLO基准至关重要，通常设定在99%以上。我们还强调了DORA（DevOps
    Research and Assessment）所建议的核心运营指标在评估DevOps团队表现中的重要性。这些指标包括变更交付时间、部署频率、变更失败率和MTTR（平均修复时间），为衡量和改进团队在服务交付和事件响应中的效率和效果提供了切实可行的标准。
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: DevOps presents challenges; introduce data and those challenges intensify. This
    book aims to explore that intricate landscape.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps面临挑战；当引入数据时，这些挑战变得更加严峻。本书旨在探索这一复杂的领域。
- en: 'Consider this: immutable objects and IaC with declarative orchestration frameworks
    often yield secure, dependable, and repeatable results. But what happens when
    you must manage entities that resist immutability? Think about databases or message
    queues that house data that can’t be replicated easily. These technologies are
    integral to production but demand unique attention.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这一点：不可变对象和基础设施即代码（IaC）与声明式编排框架通常能带来安全、可靠和可重复的结果。但当你必须管理那些抗拒不可变性的实体时会怎样？想想数据库或消息队列，这些技术承载了不易复制的数据。它们是生产环境中不可或缺的技术，但需要特别关注。
- en: 'Picture this: a Formula 1 car swaps out an entire tire assembly in mere seconds
    during a pit stop. Similarly, with immutable objects such as load balancers, a
    quick destroy-and-recreate action often solves issues. It’s convenient and rapid,
    but try applying this quick-swap approach to databases and you risk data corruption.
    You must exercise caution when dealing with mutable, data-persistent technologies.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下：一辆一级方程式赛车在进站时仅用几秒钟就换掉了整个轮胎组件。同样，对于不可变对象，如负载均衡器，快速销毁并重建的操作通常能解决问题。这既方便又快捷，但如果将这种快速交换的方法应用于数据库，就有可能导致数据损坏。在处理可变且持久存储数据的技术时，必须谨慎。
- en: Fast forward to recent years, and you’ll find attempts to facilitate database
    automation via **custom resource definitions** (**CRDs**) or operators. However,
    such methods have proven costly and complex, shifting the trend toward managed
    services. Yet, for many, outsourcing data operations isn’t the ideal solution,
    given the priority of data security.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 快进到最近几年，你会发现通过**自定义资源定义**（**CRDs**）或操作符来促进数据库自动化的尝试。然而，这些方法已经证明成本高昂且复杂，因此趋势转向了托管服务。然而，对于许多人来说，外包数据操作并非理想解决方案，考虑到数据安全的重要性。
- en: Navigating DevOps and SRE best practices reveals the looming complexities in
    managing data-centric technologies. Despite the valuable automation tools at our
    disposal, maintaining the highest DevOps standards while capitalizing on this
    automation is anything but straightforward. We’ll delve into these challenges
    and potential solutions in the chapters to come.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨DevOps和SRE最佳实践时，我们会发现管理以数据为中心的技术的复杂性日益加剧。尽管我们拥有宝贵的自动化工具，但在保持最高DevOps标准的同时，充分利用这些自动化工具并非易事。我们将在接下来的章节中深入探讨这些挑战及潜在的解决方案。
