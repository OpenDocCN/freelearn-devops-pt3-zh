- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Keeping the Development Life Cycle from Going Off Track
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防止开发生命周期脱轨
- en: In this chapter, we will examine how modern DevOps practices, particularly **continuous
    integration and continuous deployment** ( **CI/CD** ), relate to various anti-patterns
    in software development. We will begin by identifying significant process-level
    anti-patterns, and then discuss how CI/CD influences software packaging. Finally,
    we will examine a common anti-pattern associated with testing. At the end of the
    chapter, we will summarize the key takeaways for real-life applications and the
    CTA Review Board exam.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨现代 DevOps 实践，特别是**持续集成和持续部署**（**CI/CD**），如何与软件开发中的各种反模式相关。我们将首先识别显著的过程级反模式，然后讨论
    CI/CD 如何影响软件打包。最后，我们将探讨与测试相关的常见反模式。在本章末尾，我们将总结与现实应用和 CTA 复习委员会考试相关的关键要点。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主要内容：
- en: How you can avoid big-picture mistakes in the delivery of your project, such
    as how you structure releases and deal with key trade-offs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何避免在项目交付中犯大方向性错误，例如如何结构化发布和处理关键权衡问题
- en: How to avoid structuring your packages in a way that may be organizationally
    convenient but architecturally problematic
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何避免以可能对组织有利但在架构上存在问题的方式来构建您的包
- en: How you can avoid falling into the trap of compromising on code and deployment
    quality when under pressure to deliver
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何避免在面临交付压力时妥协代码和部署质量的陷阱
- en: After completing this chapter, you will have understood the ways in which common
    mistakes affect the development life cycle and related activities and mastered
    some tools to help you keep that from happening.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，您将理解常见错误如何影响开发生命周期和相关活动，并掌握一些工具，帮助您避免这些问题。
- en: Misaligning the process
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过程对齐错误
- en: In this section, we will look at two anti-patterns that in different ways make
    the development life cycle go off the rails. First, we will look at how big-bang
    releases can lead to disastrous outcomes in many cases. Second, we will look at
    project pieism—the disastrous belief that you can avoid making important trade-offs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论两种反模式，它们以不同方式使开发生命周期脱轨。首先，我们将探讨大爆炸发布如何在许多情况下导致灾难性结果。其次，我们将讨论项目分配主义——这种错误的信念认为可以避免做出重要的权衡。
- en: Big-Bang Release
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大爆炸发布
- en: '*The Big-Bang Release anti-pattern places the release of all functionalities
    in a single event at the end of a* *long-running project.*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*大爆炸发布反模式将所有功能的发布集中在项目的最终单一事件中。*'
- en: Example
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: RollerCo, a major manufacturer of roller skates and skateboards, is going through
    a major business transformation centered on creating a digitally enabled business
    that better meets the needs of today’s buyers. While not the be-all and end-all
    of the transformation, several system replacement projects are planned as part
    of the journey to provide more agility on the IT side.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: RollerCo 是一家主要生产滑轮鞋和滑板的制造商，正在经历一场以创建一个数字化驱动的业务为中心的重大业务转型，以更好地满足当今买家的需求。尽管这场转型并非最终目标，但作为过程中一部分，计划了几个系统替换项目，旨在提供更大的
    IT 灵活性。
- en: Anandh is leading the project that aims to replace the legacy, home-grown CRM
    that RollerCo has been using for the past 15 years. The system will be replaced
    with a combination of Salesforce Sales Cloud and Service Cloud, but due to the
    high level of customization in the legacy system, it has proven impossible to
    keep the Salesforce design close to standard.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Anandh 正在领导一个项目，该项目旨在替换 RollerCo 使用了 15 年的老旧自主开发 CRM 系统。该系统将被 Salesforce Sales
    Cloud 和 Service Cloud 的组合所替代，但由于老旧系统的高度定制化，已经证明无法使 Salesforce 设计保持接近标准。
- en: Another consequence of the high-level customization required is that the entire
    system will need to go live as a single unit. It won’t be possible to release
    smaller **minimum viable product** ( **MVP** ) increments prior to full go-live
    as that would make life too complex for the customer support staff.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 高度定制化的另一个后果是，整个系统将需要作为一个整体上线。在全面上线之前，无法发布更小的**最小可行产品**（**MVP**）增量，因为那样会使客户支持人员的工作过于复杂。
- en: Shortly after the project kicks off, Anandh is informed that the board of directors
    has OKed an **enterprise resource planning** ( **ERP** ) upgrade to SAP S/4HANA.
    As the CRM and ERP are closely coupled for several processes, that means that
    not only will Anandh have to contend with an increased integration backlog, but
    the rollout plans for the two systems will also need to be coordinated so that
    both can go live at the same time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目启动后不久，Anandh 被告知董事会已批准升级**企业资源规划**（**ERP**）到 SAP S/4HANA。由于 CRM 和 ERP 在多个流程中紧密耦合，这意味着
    Anandh 不仅需要应对增加的集成积压，而且两个系统的上线计划也需要协调，以确保它们能同时上线。
- en: It quickly turns out that the added complexity from the ERP upgrade means the
    original Salesforce implementation plans will have to slip. In particular, the
    integrations are proving to be more complex than anyone anticipated.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 很快就发现，ERP 升级带来的额外复杂性意味着原始的 Salesforce 实施计划必须推迟。特别是，集成的复杂性超出了任何人的预期。
- en: The CIO, after meeting a trusted vendor representative, announces that to address
    the issues regarding the CRM/ERP integration, RollerCo will invest in a new strategic
    middleware platform. This will replace the legacy middleware and go-live with
    the overall CRM/ERP timeline.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首席信息官（CIO）在与一位可信的供应商代表会面后宣布，为了解决 CRM/ERP 集成问题，RollerCo 将投资建设一个新的战略中间件平台。这将替代现有的中间件，并与整体的
    CRM/ERP 上线时间表同步上线。
- en: While Anandh and his team are busy redesigning all the integrations to fit with
    the new middleware platform, yet another discovery is made. The team responsible
    for RollerCo’s web shop determines that it will be next to impossible to get it
    to work with the new CRM/ERP setup.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Anandh 和他的团队忙于重新设计所有集成以适应新的中间件平台时，又有一个新发现。负责 RollerCo 网络商店的团队发现，让它与新的 CRM/ERP
    设置兼容几乎是不可能的。
- en: 'It would require changing the fundamental architecture of the application’s
    data layer, and the developer who built that years ago is no longer with the company.
    No one else is able to figure out how to do it, so a new e-commerce application
    is also added to the overall program backlog. For convenience, the timeline is
    aligned with the overall CRM/ERP rollout:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要更改应用程序数据层的基本架构，而当初构建该架构的开发人员已经不在公司。其他人无法弄明白如何操作，因此一个新的电子商务应用程序也被加入到整体项目积压中。为了方便起见，时间表与整体
    CRM/ERP 上线时间表对齐：
- en: '![Figure 7.1 – RollerCo’s new platform](img/B30991_07_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – RollerCo 的新平台](img/B30991_07_01.jpg)'
- en: Figure 7.1 – RollerCo’s new platform
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – RollerCo 的新平台
- en: The program suffers never-ending delays. While some areas suffer more than others,
    none of the major platforms come out of the implementation phase looking good.
    Three years go by, and finally, an initial release is nearing completion.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目遭遇了不断的延迟。尽管有些领域比其他领域受影响更大，但没有一个主要平台在实施阶段表现得很好。三年过去了，初步版本终于接近完成。
- en: RollerCo has built an elaborate deployment pipeline and cutover plan to be able
    to handle the multi-system go-live, all slated to happen during a weekend in the
    company’s low season. The testing prior to go-live takes more than three months
    to complete and requires a number of scope reductions and hotfixes.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: RollerCo 已建立了一个复杂的部署流水线和切换计划，以处理多系统的同时上线，所有这些都计划在公司淡季的一个周末进行。上线前的测试花费了超过三个月的时间，并且需要进行一些范围缩减和紧急修复。
- en: Even after that, no one working on the project dares say unequivocally that
    the system will work as expected. The number of moving parts is simply too large.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 即便如此，参与该项目的人员也不敢明确说出系统会按预期运行。各种可变因素实在是太多了。
- en: The go-live weekend starts promisingly, with the successful completion of required
    data migration activities. However, as soon as real business users are brought
    into the systems, issues start cropping up.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 上线周末一开始表现不错，所有必要的数据迁移活动顺利完成。然而，一旦真实的业务用户进入系统，各种问题开始浮现。
- en: By Sunday night, the number of issues has reached a volume that makes going
    forward seem excessively risky. While no individual issue has so far been a showstopper,
    the total disruption caused by small issues is significant. On a late-night call,
    the steering committee makes the decision to roll back and postpone going live.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 到了周日晚，问题的数量已经达到一种让继续推进显得过于冒险的程度。虽然到目前为止没有任何单一问题是致命的，但由于小问题引起的整体干扰已经相当严重。在一个深夜电话会议中，指导委员会决定回滚并推迟上线。
- en: The fallout is significant. After all, the program has already had three years
    to complete its work. However, it quickly becomes clear that the issues cannot
    be fixed in a matter of weeks. There is still much to be done.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 后果是显著的。毕竟，项目已经有三年的时间来完成工作。然而，很快就变得清楚，问题无法在几周内解决。仍然有很多工作需要完成。
- en: The teams come together to find a solution over the next six months. Throughout
    this period, they focus on reducing the scope and simplifying features to make
    the rollout process easier to manage.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 团队们将在接下来的六个月里共同寻找解决方案。在这段时间里，他们专注于缩小范围并简化功能，以便让推出过程更容易管理。
- en: Eventually, the combined platform with CRM, ERP, middleware, and e-commerce
    goes live. However, it does so with a large list of known issues and workarounds
    and a much-reduced scope from the one originally designed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，包含CRM、ERP、中间件和电子商务的综合平台上线。然而，它上线时带着一大堆已知问题和解决方法，而且其范围大大缩小，远低于最初的设计。
- en: Problem
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题
- en: Big-Bang Release is an anti-pattern that usually tries to solve the problem
    of how to handle complex dependencies in the release process. That can be dependencies
    between systems or inside them. It most frequently occurs where there isn’t strong
    leadership of a digital transformation, and the leadership that there is is highly
    risk-averse.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 大爆炸发布是一种反模式，通常尝试解决在发布过程中如何处理复杂依赖关系的问题。这些依赖关系可能存在于系统之间或系统内部。它最常出现在没有强有力的数字化转型领导的地方，而且现有的领导层往往高度规避风险。
- en: Dependencies are usually linked to certain business processes that have a legacy
    of being carried out in a certain way, which means that a large amount of functionality
    has to be deployed as a unit. Sometimes, as in our example, this can lead to massive
    dependencies even at the system level.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖关系通常与某些业务流程相关，这些流程有着长期以来以某种方式进行的惯例，这意味着大量的功能必须作为一个整体进行部署。有时候，像我们在这个例子中所见的那样，这甚至可能导致系统级别的巨大依赖关系。
- en: Disaggregating existing business processes and coming up with transition architectures
    (that accommodate the need to get work done while a partial solution is in place)
    can be quite difficult, as can MVP subsets of functionality that will deliver
    value on their own. Big-Bang Release avoids those issues by simply pushing everything
    to one big event in the future.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 解构现有的业务流程并提出过渡架构（在部分解决方案存在的情况下，满足完成工作的需求）可能相当困难，像功能的最小可行产品（MVP）子集那样可以独立提供价值也同样困难。大爆炸发布通过简单地将一切推迟到未来的一个大事件来避免这些问题。
- en: Proposed solution
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提议的解决方案
- en: The Big-Bang Release anti-pattern proposes to just do one big release for all
    linked functionality at the end of a long delivery process. That can mean several
    years of work go live at the same time without any intermediate feedback.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 大爆炸发布反模式建议在漫长的交付过程中，最后进行一次大的发布，涵盖所有相关功能。这可能意味着几年积累的工作同时上线，而没有任何中间的反馈。
- en: 'This solution can be highly attractive to both the delivery team and the customer
    for a variety of reasons:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这种解决方案对于交付团队和客户来说，因各种原因可能非常有吸引力：
- en: It reduces the entire system to a single deployment quantum that can be managed
    as a unit.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将整个系统简化为一个单一的部署单位，可以作为一个整体进行管理。
- en: It simplifies the planning process as you don’t have to plan for multiple releases,
    partial data migrations, and co-existence scenarios. That means the overall architecture
    is also simplified as there is no need to come up with transition architectures
    for the scope of the project.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它简化了规划过程，因为你不需要为多个发布、部分数据迁移和共存场景做规划。这意味着整体架构也被简化，因为不需要为项目的范围设计过渡架构。
- en: You also avoid tough decisions about what to include when and which business
    needs you can accommodate, and at what times.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还避免了在什么时候包含哪些内容、可以满足哪些业务需求以及何时满足的艰难决策。
- en: It’s easy to understand both for the delivery team and the customer.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于交付团队和客户来说，这很容易理解。
- en: You successfully push the problem down the line, making it something to deal
    with later. In some cases, there may even be other people doing it by then.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你成功地将问题推迟了，把它变成了以后再处理的事情。在某些情况下，到时候可能会有其他人来做这件事。
- en: You can, therefore, understand why—even at a time when small releases and DevOps
    thinking have become the leading paradigm—many projects still end up being deployed
    with a big bang. Unfortunately, it doesn’t tend to go well.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可以理解为什么——即使在小范围发布和DevOps思维已经成为主流范式的今天——许多项目仍然最终以大爆炸的方式进行部署。不幸的是，这通常不会顺利进行。
- en: Results
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结果
- en: The fundamental problem with the Big-Bang Release anti-pattern is that you—often
    inadvertently—take on a massive amount of risk. Technical risk doesn’t grow linearly
    with the number of components to deploy. Rather, it grows much faster due to the
    superlinear growth of interconnections and dependencies that come with a larger
    number of components.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Big-Bang 发布反模式的根本问题在于，你往往无意间承担了大量的风险。技术风险不会随着部署组件数量的增加而线性增长。相反，由于组件间连接和依赖关系的超线性增长，风险会以更快的速度增加。
- en: 'Put simply, if you deploy one component, you only have the risk of that component
    failing to deal with. If you have just two interconnected components, you now
    have up to four failure modes to contend with:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，如果你只部署一个组件，你需要处理的风险仅限于该组件的故障。如果你部署了两个互联的组件，那么你就需要应对最多四种故障模式：
- en: Component 1 failing independently
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件 1 独立故障
- en: Component 2 failing independently
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件 2 独立故障
- en: Component 1 failing and triggering a subsidiary failure in component 2
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件 1 故障并触发组件 2 的次级故障
- en: Component 2 failing and triggering a subsidiary failure in component 1
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件 2 故障并触发组件 1 的次级故障
- en: All four may present unique symptoms and the root cause may not be obvious.
    Consider how many potential failure modes you’d have if you deployed 20 components
    together with a large number of interconnections between them.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这四种故障模式可能会表现出独特的症状，根本原因可能并不明显。试想一下，如果你同时部署 20 个组件，并且它们之间有大量的相互连接，你将面临多少潜在的故障模式。
- en: A pipeline in software development is like a factory assembly line for code,
    where each step automatically flows into the next. Just as a car moves through
    different stations for assembly, testing, and quality control, code moves through
    various stages of building, testing, and deployment. DevOps, which combines “development”
    and “operations,” is a set of practices that brings together software development
    and IT operations teams to enable faster, more reliable software delivery. Think
    of it as breaking down the traditional walls between the people who write code
    and those who maintain the systems where that code runs.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，流水线就像是代码的工厂装配线，每个步骤会自动流向下一个。就像汽车在不同的工位进行组装、测试和质量控制一样，代码也会经历构建、测试和部署的各个阶段。DevOps（开发和运维结合）是一套将软件开发和
    IT 运维团队结合起来的实践，旨在加速、更可靠地交付软件。可以把它看作是打破了编写代码的人员与维护这些代码运行的系统之间的传统壁垒。
- en: Modern DevOps practices heavily emphasize automated testing and deployment pipelines,
    which act as safeguards against the risks of “big-bang” deployments (releasing
    many changes at once). When developers make changes to the code, these changes
    automatically trigger a series of tests—unit tests check individual components,
    integration tests verify different parts work together, and system tests ensure
    the entire application functions correctly. This automation, known as continuous
    integration, helps teams catch and fix problems early, before they can affect
    the entire system. Continuous delivery then takes these verified changes and automatically
    prepares them for release, ensuring every change is deployment-ready.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现代 DevOps 实践高度强调自动化测试和部署流水线，它们充当着防范“爆炸式”发布（一次性发布多个更改）风险的安全网。当开发人员修改代码时，这些更改会自动触发一系列的测试——单元测试检查单个组件，集成测试验证不同部分的协作，系统测试确保整个应用程序功能正常。这种被称为持续集成的自动化流程，帮助团队及早发现和修复问题，避免问题影响整个系统。持续交付会将这些经过验证的更改自动准备好发布，确保每次更改都能随时部署。
- en: The implementation of CI/CD frameworks transforms the traditional approach of
    infrequent, large releases into a stream of smaller, more manageable updates.
    Instead of saving up dozens of changes for a major release (which can be risky,
    like trying to change multiple parts of an engine at once), teams can deploy individual
    updates as soon as they’re ready and verified. This incremental approach makes
    it easier to identify and fix problems—if something goes wrong, teams can quickly
    pinpoint which specific change caused the issue and either fix it or roll back
    that single change, rather than having to undo multiple updates at once. The result
    is more stable software systems, as teams can monitor each small change’s impact
    and address any issues before they become major problems.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 框架的实施将传统的、少量大规模发布的方法转变为一系列更小、更易于管理的更新。团队不再将数十个更改积累到一个重大发布中（这可能很冒险，就像试图同时更改发动机的多个部件一样），而是可以在每个更新准备好并经过验证后立即部署。这个增量方法使得识别和修复问题变得更加容易——如果出现问题，团队可以迅速定位到是哪个具体的更改导致了问题，并修复它或回滚这个更改，而不是一次性撤销多个更新。结果是更稳定的软件系统，因为团队可以监控每个小更改的影响，并在问题成为大问题之前解决它们。
- en: Because the number of failure modes on a large deployment is so large, that
    means that testing becomes an enormous task, and often, you can test for weeks
    and still not be sure whether you have really tested all the important cases.
    Debugging errors is also much harder because tracing the potential knock-on effects
    between components is much harder than simply finding an error in a single component.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大规模部署的故障模式非常多，这意味着测试变成了一个巨大的任务，通常你可能测试数周，仍然无法确定是否已经测试了所有重要的案例。调试错误也变得更加困难，因为追踪各个组件之间可能的连锁反应比仅仅找出单个组件中的错误要困难得多。
- en: The same difficulties also apply to rolling out and rolling back any other cutover
    tasks that need to be done. Even training and change management become harder
    in a big-bang scenario.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的困难也适用于推出和回滚任何需要完成的切换任务。在“大爆炸”场景下，甚至培训和变更管理也变得更加困难。
- en: Overall, the bigger the release, the more risk there is of it becoming a serious
    failure. Unless you are a gambler, you shouldn’t go down that route.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，发布越大，失败的风险越大。如果你不是赌徒，应该避免走这条路。
- en: Better solutions
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好的解决方案
- en: If big releases are the problem, it stands to reason that small releases are
    the solution. From a risk management perspective, the ideal amount of functionality
    to release at a time is a single feature or a single user story. That is the premise
    of **continuous delivery** ( **CD** ), as practiced by leading DevOps-focused
    organizations.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果大规模发布是问题，那么小规模发布显然是解决方案。从风险管理的角度来看，每次发布的理想功能量是一个单独的特性或一个单独的用户故事。这正是**持续交付**（**CD**）的前提，正如许多领先的
    DevOps 导向的组织所实践的那样。
- en: However, we must acknowledge that not all organizations have the scale or technological
    sophistication to adopt the pure DevOps setup that would allow CD of a single
    feature at a time. However, if you aspire to the ideal of small releases, at least
    you will start to mitigate the problems.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们必须承认，并非所有组织都具备规模或技术成熟度来采用允许每次只交付一个功能的纯 DevOps 配置。然而，如果你追求小规模发布的理想，至少你将开始减轻这些问题。
- en: 'Smaller releases have the following attributes:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 小规模发布具有以下特点：
- en: Less risky
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 风险更小
- en: Easier to test
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更容易测试
- en: Easier to debug
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更容易调试
- en: Easier to fix errors once found
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更容易在发现错误后进行修复
- en: Easier to roll out and roll back
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更容易推出和回滚
- en: Deliver value quicker to business users
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快地向业务用户交付价值
- en: Facilitate and increase system adoption
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 促进并增加系统的采纳
- en: Make change management easier to control
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使变更管理更容易控制
- en: Overall, once you do the necessary technical and business process work to enable
    smaller releases, there are few—if any—downsides.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，一旦完成了必要的技术和业务流程工作以启用小规模发布，那么几乎没有——如果有的话——缺点。
- en: 'In general, aiming for a greater degree of resilience will be helpful in avoiding
    the problems sketched in this chapter. A good place to start is with the well-architected
    framework: [https://architect.salesforce.com/well-architected/adaptable/resilient](https://architect.salesforce.com/well-architected/adaptable/resilient)
    .'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，旨在提高韧性将有助于避免本章中提到的问题。一个好的起点是使用完善架构框架：[https://architect.salesforce.com/well-architected/adaptable/resilient](https://architect.salesforce.com/well-architected/adaptable/resilient)。
- en: Project Pieism
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目派系主义
- en: '*Project Pieism fails to contend with key architectural trade-offs, insisting
    instead that you can have your pie and eat* *it too.*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*Project Pieism未能处理关键架构权衡，而是坚称你可以既享有它又能够使用它。*'
- en: Example
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: ConglomoCo is a large, diversified conglomerate that counts many **business
    units** ( **BUs** )—some related to business lines, others to geography. Most
    BUs operate quite independently both operationally and with respect to IT infrastructure.
    In addition, BU heads have a lot of power relative to **headquarters** ( **HQ**
    ) staff as they are effectively the masters of their own businesses.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: ConglomoCo是一家大型多元化企业集团，拥有许多**业务单元**（**BU**），有些与业务领域相关，有些与地理位置相关。大多数业务单元在运营和信息技术基础设施方面相当独立。此外，业务单元负责人相对于**总部**（**HQ**）员工拥有更多权力，因为他们实际上是自己业务的主宰。
- en: When ConglomoCo’s CIO decides to push for a global rollout of Salesforce, they
    are therefore met by staunch resistance on the part of several division heads
    who have their own CRM strategies and don’t want HQ to get involved. However,
    as part of a new initiative, the CEO and CFO have requested a consolidated view
    of the global pipeline, which the CIO is leveraging for their Salesforce strategy.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当ConglomoCo的CIO决定推动Salesforce的全球推广时，他们因此遇到了多个业务部门负责人强烈的抵制，这些部门有自己的CRM策略，并不希望总部插手。然而，作为新倡议的一部分，首席执行官（CEO）和首席财务官（CFO）要求提供全球销售漏斗的汇总视图，而CIO正是借此来推动他们的Salesforce战略。
- en: Kim, a senior IT project manager with ConglomoCo’s HQ staff, is therefore given
    the responsibility to drive the global rollout of Salesforce Sales Cloud and CPQ.
    The CIO wants to use this as an opportunity to standardize the core sales process
    across BUs and simplify the reporting of sales data.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 金，作为ConglomoCo总部的高级IT项目经理，因此被赋予了推动Salesforce Sales Cloud和CPQ全球推广的责任。首席信息官（CIO）希望借此机会在各个业务单元之间标准化核心销售流程，并简化销售数据的报告。
- en: After corresponding with his architects, Kim, therefore, proposes a plan based
    on a single org with a standard process. There will be local variations within
    the BUs, but these are to be kept limited in scope.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在与他的架构师进行沟通后，金提出了基于单一组织和标准流程的计划。业务单元内部将有一些本地化的变化，但这些变化的范围将被限制在一定程度上。
- en: As Kim starts presenting this plan to stakeholders, he finds that it is clearly
    not what they were expecting. The BUs have separate processes, UX expectations,
    local integrations, and reporting needs that they are expecting a new system to
    cater to.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当金开始向利益相关者展示这个计划时，他发现这显然不是他们所期望的。各个业务单元（BU）有各自独立的流程、用户体验（UX）期望、本地集成以及他们希望新系统能满足的报告需求。
- en: 'At a senior leaders workshop, many of these issues come to light, and a compromise
    is reached at the highest level. The new system must be able to cater to separate
    sales processes, automations, and local integrations and accommodate some level
    of customization of the UX for each BU:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在一场高级领导研讨会上，许多问题浮出水面，并在最高层达成了妥协。新系统必须能够满足独立的销售流程、自动化、本地集成，并且能够为每个业务单元（BU）提供一定程度的用户体验（UX）定制：
- en: '![Figure 7.2 – ConglomoCo org](img/B30991_07_02.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – ConglomoCo 组织](img/B30991_07_02.jpg)'
- en: Figure 7.2 – ConglomoCo org
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – ConglomoCo 组织
- en: However, all of this must still reside within the same Salesforce org and leverage
    the same data model to make reporting across BUs simpler. It is understood that
    this will lead to a more customized implementation and have a cost implication,
    but the CIO would still like the implementation to be as close to standard as
    possible.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，所有这些仍然必须在同一个Salesforce组织内进行，并利用相同的数据模型，以简化跨业务单元（BU）的报告。可以理解，这将导致更加定制化的实施，并带来成本上的影响，但首席信息官（CIO）仍然希望实施尽可能接近标准化。
- en: The implementation is long and slow. By necessity, it includes many separate
    streams related to the different BUs. Every stream seems to have its own complexities,
    and coordinating between streams is an ongoing and uphill battle. It is fair to
    say that as the implementation goes on, a level of attrition sets in, and everybody
    lowers their expectations for the future system, seeing it more as a necessary
    evil than a driver of positive change.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 实施过程漫长且缓慢。必然地，它包含了许多与不同业务单元相关的独立工作流。每个工作流似乎都有其复杂性，工作流之间的协调是一个持续且艰难的挑战。可以说，随着实施的推进，人员的疲劳感逐渐增加，大家对未来系统的期望也有所下降，更加看待它为一种必要的“恶”而非推动积极变革的工具。
- en: Kim negotiates with the business and manages to get two of the smaller areas
    to go live in a pilot fashion. They go live without much fanfare and with a lot
    of bugs. Worse than the bugs, however, is the low adoption. The salespeople in
    the BUs seem to do everything possible to avoid putting data in the system, and
    when they do, it is of low quality.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 金与业务部门进行谈判，并成功使两个较小的领域以试点方式上线。这些领域上线时并没有太大宣传，且存在许多漏洞。然而，比这些漏洞更糟糕的是，低采纳率。各业务单元的销售人员似乎尽一切可能避免将数据录入系统，而即使录入，数据质量也很低。
- en: Given the unpromising early results, the rest of the rollout is put on hold.
    Instead, a management consultancy is brought in to investigate why adoption is
    so poor and what could be done better going forward.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于初期结果不理想，后续的推广被暂停。相反，一家管理咨询公司被请来调查为何采用情况如此差劲，并探讨如何改进。
- en: Problem
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题
- en: Project Pieism is an anti-pattern that has its root cause in an aspiration to
    avoid having to make difficult trade-offs when implementing a system. That may
    be because of political difficulties or weak project leadership, but it always
    involves a failure to acknowledge a key trade-off that needs a decision.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 项目派系主义是一种反模式，其根本原因在于避免在实施系统时做出艰难的权衡。这可能是因为政治上的困难或项目领导力不足，但始终涉及未能承认一个需要决策的关键权衡。
- en: In a sense, most engineering problems in software architecture and in general
    are about balancing a set of trade-offs. However, those trade-offs are often uncomfortable
    and will involve not pleasing all stakeholders.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从某种意义上来说，大多数软件架构中的工程问题，乃至一般问题，都涉及在一系列权衡之间找到平衡。然而，这些权衡往往令人不舒服，且往往无法取悦所有利益相关方。
- en: Therefore, it’s perfectly understandable that many projects proceed without
    making the necessary trade-offs in the hope that a solution may be found later
    or simply by closing their eyes to the facts. In any case, it is an anti-pattern.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，很多项目在没有做出必要的权衡的情况下继续进行，抱有后来可能找到解决方案的希望，或干脆闭眼不看事实。在任何情况下，这都是一种反模式。
- en: Proposed solution
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提议的解决方案
- en: Project Pieism suggests as a solution to one or more important trade-offs in
    your solution that the trade-off is not real, that you don’t really have to compromise,
    and that you can in fact have your pie and eat it too. Sometimes this is done
    by ignoring the trade-off or sweeping it under the rug; sometimes it is acknowledged
    but special pleading is deployed to suggest that this case is somehow special
    and therefore the trade-off does not apply.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 项目派系主义建议，将一个或多个重要的权衡视为解决方案的一部分，认为这个权衡并不存在，你实际上不需要做出妥协，甚至可以既得到自己的“蛋糕”又能“吃掉”它。有时，这种做法通过忽视权衡或把它扫到地毯下完成；有时则是承认了权衡，但通过特殊请求来暗示这个情况是特殊的，因此这个权衡不适用。
- en: This position is attractive for obvious reasons. When there are key trade-offs
    to be made in an implementation project, you will probably have to disappoint
    one or more groups of stakeholders. If those groups are powerful within your organization,
    that may not be an easy or pleasant thing to do. You can even find yourself in
    situations where you are forced into Project Pieism because of corporate politics.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个位置显然很有吸引力。当在实施项目中需要做出关键权衡时，你可能不得不让一个或多个利益相关方失望。如果这些利益相关方在你的组织中很有权力，这可能并不是一件容易或愉快的事。你甚至可能发现自己由于公司政治被迫陷入项目派系主义（Project
    Pieism）的困境。
- en: However, not even the most powerful executive in your organization can change
    the basic facts of software architecture. There are always trade-offs. Whenever
    you have a situation on a technical project where there doesn’t seem to be a trade-off
    in the decision you are making, you should be worried.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使是你组织中最有权力的高管，也无法改变软件架构的基本事实。总是存在权衡。每当在技术项目中出现你认为不需要做出权衡的情况时，你应该感到担忧。
- en: Results
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结果
- en: The result of Project Pieism is the return of the trade-off you’ve tried to
    ignore. Murphy’s law being what it is, that will probably happen at the most inconvenient
    point in your project life cycle and cause major damage to your project.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 项目派系主义的结果是，你试图忽视的权衡最终会回归。根据墨菲定律，这通常会发生在项目生命周期中最不方便的时候，并对项目造成重大损害。
- en: Of course, the specific damage will depend on the trade-off you have been ignoring.
    In our preceding example, we ignored trade-offs between the priority of global
    and local processes and the level of standard functionality versus customization.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，具体的损害将取决于你忽视的权衡。在我们之前的例子中，我们忽视了全球与本地流程的优先级之间的权衡，以及标准功能与定制化之间的权衡。
- en: ConglomoCo attempted to have a standard system with a global process that also
    accommodated all relevant local variations. That led to a system that no one wanted
    to use because it met no one’s needs well enough.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: ConglomoCo曾试图建立一个具有全球流程的标准化系统，同时兼顾所有相关的本地变更。这导致了一个没人愿意使用的系统，因为它无法很好地满足任何人的需求。
- en: Other trade-offs will have different consequences, but you can count on adverse
    consequences if you fail to make important decisions about the key trade-offs
    that drive your architecture.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 其他权衡会产生不同的后果，但如果你未能做出关于推动架构的关键权衡的重要决策，你可以预见到不利的后果。
- en: Better solutions
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好的解决方案
- en: The way to a less pieist future lies in openly acknowledging the trade-offs
    to be made and engaging constructively with stakeholders about the options. Often,
    there are ways of giving stakeholders more of what they all want, but it may come
    at an additional cost or a longer timeline.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 朝着更少的妥协未来迈进的方式，就是公开承认需要做出的权衡，并与利益相关者建设性地讨论选项。通常，确实有办法让利益相关者获得更多他们都想要的东西，但可能会以额外的成本或更长的时间线为代价。
- en: One way to formalize this engagement is to set up good architectural governance
    early in a project and discuss the key architectural trade-offs in both architecture
    forums and business forums to ensure that all perspectives are taken into account.
    In our example, a competent architecture board might well have pointed out that
    there was no way of making a single org strategy work well in the ConglomoCo scenario.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让这个参与过程正式化的一种方式是，在项目早期建立良好的架构治理，并在架构论坛和业务论坛上讨论关键的架构权衡，以确保考虑到所有的视角。在我们的例子中，一个称职的架构委员会可能会指出，在ConglomoCo的情境中，根本无法让单一的组织策略有效运作。
- en: As architects, we need to be honest with the business about what is and isn’t
    possible. We are the people who know the art of the possible on the technical
    side, and we shouldn’t pretend that our favorite technologies somehow transcend
    the need to make hard choices. Stand firm, be constructive, give options, and
    don’t ignore important trade-offs.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 作为架构师，我们需要对业务保持诚实，明确什么是可行的，什么是不可能的。我们是那些在技术方面了解可能性的专业人士，我们不应该假装我们最喜欢的技术能够超越必须做出艰难选择的现实。坚定立场，保持建设性，提供选项，且不忽视重要的权衡。
- en: Infrequent Check-In
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不频繁的检查
- en: '*Infrequent Check-In is an anti-pattern where developers work in isolation
    for extended periods without integrating their changes into the main code base,
    leading to significant integration challenges, reduced visibility, and potential*
    *project delays.*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*不频繁的检查是一个反模式，指的是开发者长时间在隔离的环境下工作，而没有将他们的更改集成到主代码库中，这会导致显著的集成挑战、减少可视性，并可能导致*
    *项目延误*。'
- en: Example
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: CloudTech, a rapidly growing technology company, has been developing a custom
    Salesforce solution to manage their complex partner ecosystem. The project involves
    multiple teams working on different aspects of the solution, including partner
    onboarding, certification management, and revenue-sharing calculations.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: CloudTech，一家快速增长的科技公司，一直在开发定制的Salesforce解决方案，以管理其复杂的合作伙伴生态系统。该项目涉及多个团队，分别负责解决方案的不同方面，包括合作伙伴入驻、认证管理和收入分成计算。
- en: Sarah, a senior developer, is assigned to build the revenue-sharing calculation
    engine, a critical component that needs to interface with multiple parts of the
    system. Given the complexity of the calculations and the numerous business rules
    involved, she decides to work on the complete feature before integrating it with
    the main code base.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 高级开发者莎拉被指派构建收入分成计算引擎，这是一个关键组件，需要与系统的多个部分进行接口。鉴于计算的复杂性和涉及的众多业务规则，她决定在与主代码库集成之前，先完成整个功能。
- en: The project manager, Tom, is comfortable with this approach as he believes it
    will allow Sarah to focus entirely on getting the complex calculations right without
    being distracted by integration issues. The team’s technical lead, Marcus, expresses
    some concerns about the lengthy isolation period but ultimately agrees, given
    Sarah’s experience and the critical nature of the component.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 项目经理汤姆对这种方法感到满意，因为他相信这能让莎拉完全专注于正确完成复杂的计算，而不会被集成问题分心。团队的技术负责人马库斯对长时间的隔离期表示了一些担忧，但最终同意了，考虑到莎拉的经验以及该组件的重要性。
- en: Sarah spends six weeks working on the calculation engine. During this time,
    she makes significant progress and regularly updates the team during stand-ups
    about her work. However, she keeps all changes in her local development environment,
    believing this is the safest approach until the feature is complete and thoroughly
    tested.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Sarah花了六周时间工作在计算引擎上。在此期间，她取得了显著进展，并在站会期间定期向团队更新她的工作。然而，她将所有更改保留在本地开发环境中，认为这是最安全的做法，直到功能完成并经过彻底测试。
- en: Meanwhile, other team members continue their work. The partner onboarding team
    implements several changes to the data model. The certification team adds new
    validation rules that affect partner status. The integration team modifies several
    APIs that the calculation engine needs to interact with.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，其他团队成员继续他们的工作。合作伙伴入驻团队对数据模型进行了一些更改。认证团队添加了新的验证规则，这些规则影响合作伙伴状态。集成团队修改了计算引擎需要交互的几个
    API。
- en: When Sarah finally completes the calculation engine and prepares to integrate
    it with the main code base, several issues emerge. The data model changes made
    by the partner onboarding team conflict with Sarah’s assumptions about the schema
    structure. The new validation rules affect how partner status is determined, which
    is a key input for the calculation engine. The modified APIs require different
    parameters and return structures than what Sarah’s code expects.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当Sarah最终完成计算引擎并准备将其与主代码库集成时，出现了几个问题。合作伙伴入驻团队对数据模型所做的更改与Sarah对架构结构的假设发生了冲突。新的验证规则影响了合作伙伴状态的确定，而这正是计算引擎的关键输入。修改后的API需要不同的参数和返回结构，而这与Sarah代码的预期不符。
- en: The team now faces a crisis. The sprint deadline is approaching, but integrating
    Sarah’s code will require significant refactoring. The code review process becomes
    overwhelming as team members struggle to understand and validate the massive changeset.
    Several critical bugs are discovered during testing, but fixing them is complicated
    by the interconnected nature of the changes.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 团队现在面临危机。冲刺截止日期临近，但集成Sarah的代码将需要大量重构。代码审查过程变得令人不堪重负，因为团队成员难以理解和验证庞大的变更集。在测试过程中发现了几个关键的bug，但由于变更之间的相互关联，修复变得复杂。
- en: After three additional weeks of intensive effort to resolve the integration
    issues, the feature is finally merged into the main code base. However, the delay
    has impacted other dependent features, and the project timeline needs to be adjusted.
    The team also discovers that some of Sarah’s work duplicated solutions already
    implemented by other team members during her isolation period.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在额外的三周密集工作后，解决了集成问题，功能最终合并到了主代码库。然而，延迟影响了其他依赖的功能，项目时间表需要调整。团队还发现，Sarah的一些工作在她孤立工作期间与其他团队成员已经实现的解决方案重复。
- en: Problem
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题
- en: The Infrequent Check-In anti-pattern emerges when developers work in isolation
    for extended periods without integrating their changes into the main code base.
    This pattern often appears tempting in scenarios involving complex features or
    critical components, where teams believe isolation will lead to better focus and
    fewer disruptions.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 不频繁检查的反模式出现在开发人员长时间独立工作且不将更改合并到主代码库的情况下。这种模式通常出现在涉及复杂功能或关键组件的场景中，团队认为隔离可以带来更好的集中和更少的干扰。
- en: The anti-pattern manifests itself through developers working for weeks or months
    without merging code, resulting in large, monolithic changesets that are difficult
    to review and test. It creates limited visibility into development progress and
    isolation from evolving code base changes and team decisions.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 反模式通过开发人员在数周或数月内没有合并代码而表现出来，导致大规模、单一的变更集，难以审查和测试。这种做法限制了开发进度的可见性，并与不断变化的代码库和团队决策之间隔离开来。
- en: While this approach might seem logical for complex features, it fundamentally
    misunderstands the collaborative nature of software development and the importance
    of CI.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种做法对复杂功能来说似乎是合乎逻辑的，但它从根本上误解了软件开发的协作性质以及持续集成（CI）的重要性。
- en: Proposed solution
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提议的解决方案
- en: The Infrequent Check-In approach suggests that complex features are best developed
    in isolation. Proponents argue that developers can focus entirely on their tasks
    without worrying about integration issues, keeping their code “clean” and unaffected
    by ongoing changes until it’s ready. They believe testing can be more thorough
    when the feature is complete, and code reviews will be more meaningful when examining
    the complete feature. Project management appears simpler by treating the feature
    as a single unit of work.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**不频繁检查合并**方法认为，复杂的特性最好独立开发。支持者认为，开发者可以完全专注于他们的任务，而不必担心集成问题，保持代码“干净”，并在特性准备好之前不受持续变化的影响。他们相信，在特性完成后，测试会更为彻底，代码审查也会在检查完整功能时更有意义。通过将功能视为单一工作单元，项目管理看起来会更简单。'
- en: This solution appears attractive because it promises to reduce complexity by
    avoiding the overhead of CI and dealing with ongoing changes in the code base.
    It suggests that quality will be higher because developers can focus solely on
    their specific features without external distractions.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案看起来很有吸引力，因为它承诺通过避免持续集成（CI）的开销并处理代码库中持续的变化，来减少复杂性。它建议开发者能够完全专注于特定功能，避免外部干扰，从而提高质量。
- en: Result
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结果
- en: The Infrequent Check-In anti-pattern leads to several significant problems.
    Integration becomes a major challenge, with massive merge conflicts when finally
    integrating with the main code base. Significant refactoring is often required
    to accommodate changes made during the isolation period, and there’s an increased
    risk of integration errors and bugs.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**不频繁检查合并**反模式会导致几个显著的问题。集成成为一个重大挑战，最终与主代码库集成时会出现大量的合并冲突。通常需要进行显著的重构，以适应在隔离期间所做的更改，并且集成错误和bug的风险也会增加。'
- en: Visibility suffers throughout the development process. Teams have limited insight
    into actual development progress, making it difficult to identify potential issues
    early and reducing the ability to make informed project decisions.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个开发过程中，可见性受损。团队对实际开发进展的了解有限，难以及早识别潜在问题，降低了做出明智项目决策的能力。
- en: Collaboration issues arise as team members work in isolation. Knowledge sharing
    and peer learning become limited, and feedback on design decisions and implementation
    approaches is delayed. This often results in the duplication of effort as different
    team members solve similar problems without awareness of each other’s work.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 随着团队成员独立工作，合作问题随之而来。知识共享和同行学习受限，关于设计决策和实现方法的反馈也会延迟。这通常会导致重复劳动，因为不同的团队成员在解决类似问题时，彼此并不了解对方的工作。
- en: Quality impact becomes evident through overwhelming code reviews that may miss
    critical issues. Comprehensive testing becomes difficult due to large changesets,
    and there’s an increased likelihood of bugs slipping through due to complex integration
    scenarios.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 质量影响变得明显，代码审查可能会错过关键问题。由于大型变更集，全面测试变得困难，并且由于复杂的集成场景，bug更有可能漏网。
- en: Project delays are common, with extended integration periods not accounted for
    in initial timelines. This creates cascading delays affecting dependent features
    and additional time needed for resolving conflicts and issues.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 项目延期是常见的，因为初步时间表中没有考虑到延长的集成周期。这会导致一系列的延迟，影响相关特性，并增加了解决冲突和问题所需的时间。
- en: Technical debt accumulates through architectural misalignments due to divergent
    development. Teams often find duplicated solutions and inconsistent approaches,
    along with difficulty in maintaining code history and understanding change rationale.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 技术债务通过架构不一致的原因积累，因为开发过程中的分歧导致团队发现重复的解决方案和不一致的方法，同时很难维持代码历史记录并理解更改的理由。
- en: Better solutions
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好的解决方案
- en: To avoid the Infrequent Check-In anti-pattern, teams should implement true CI.
    This means establishing automated build and test processes, requiring developers
    to integrate changes at least daily, setting up monitoring and alerts for integration
    issues, and using feature toggles to manage incomplete features in the main code
    base.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免**不频繁检查合并**反模式，团队应当实施真正的持续集成（CI）。这意味着要建立自动化的构建和测试流程，要求开发者每天至少集成一次更改，设置集成问题的监控和警报，并使用功能开关在主代码库中管理不完整的功能。
- en: Complex features need to be broken down into smaller, more manageable chunks.
    Teams should plan incremental development with clear integration points, identify
    dependencies early, and manage them proactively. Clear acceptance criteria for
    each component help maintain focus while allowing for regular integration.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂的功能需要拆解成更小、更易管理的部分。团队应计划增量开发，明确集成点，尽早识别依赖关系，并主动管理它们。每个组件的明确验收标准有助于保持关注，同时允许定期集成。
- en: Clear integration policies are essential. Teams should define the maximum acceptable
    time between integrations and guidelines for changeset sizes. Code review processes
    should encourage frequent, smaller reviews, and standards should exist for feature
    toggle usage.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 明确的集成政策至关重要。团队应定义集成之间的最大可接受时间，以及变更集大小的指南。代码评审流程应鼓励频繁的小规模评审，并应制定功能切换使用的标准。
- en: Communication and visibility must be prioritized through regular design reviews
    during development and pair programming for complex features. Teams should maintain
    up-to-date documentation of architectural decisions and hold frequent team sync-ups
    to discuss technical challenges.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，必须优先考虑沟通与可视化，定期进行设计评审，并在复杂功能上进行结对编程。团队应保持最新的架构决策文档，并定期进行团队同步会议，讨论技术挑战。
- en: Modern development practices play a crucial role in preventing this anti-pattern.
    Trunk-based development minimizes long-lived branches, while comprehensive automated
    testing helps catch issues early. Feature flags manage incomplete features effectively,
    and proper monitoring and observability ensure teams can quickly identify and
    resolve issues.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现代开发实践在防止这种反模式中起着至关重要的作用。基于主干的开发最小化了长期存在的分支，而全面的自动化测试有助于及早发现问题。功能标志有效地管理不完整的功能，适当的监控和可观察性确保团队能够快速识别和解决问题。
- en: Team culture is fundamental to success. Organizations should encourage knowledge-sharing
    and collaboration while promoting collective code ownership. Continuous learning
    and improvement should be supported, and teams should create a safe environment
    for early feedback.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 团队文化是成功的基础。组织应鼓励知识共享与协作，同时促进集体代码所有权。应支持持续学习和改进，团队应为早期反馈创造一个安全的环境。
- en: The key to avoiding this anti-pattern is recognizing that software development
    is inherently collaborative and iterative. Success comes not from avoiding integration
    challenges but from making them small enough to manage effectively through frequent
    integration and clear communication. By implementing these solutions, teams can
    maintain high quality while avoiding the pitfalls of isolated development.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 避免这种反模式的关键是认识到软件开发本质上是协作性和迭代性的。成功的关键不在于避免集成挑战，而在于通过频繁集成和清晰沟通，使这些挑战足够小，能够有效管理。通过实施这些解决方案，团队可以保持高质量，同时避免孤立开发的陷阱。
- en: Unpacking the pipeline
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解开流水线
- en: This section will introduce a key DevOps anti-pattern related to how you should
    structure your packages for package-based development.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将介绍与如何为基于包的开发构建包结构相关的一个关键DevOps反模式。
- en: Using Packages to Create Silos
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用包创建孤岛
- en: '*Using Packages to Create Silos divides up the packages for your Salesforce
    project based on team structure without considering* *architectural concerns.*'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用包创建孤岛*是根据团队结构将Salesforce项目的包划分，而不考虑*架构问题*。'
- en: Example
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: MillCo, a producer of CNC milling machines with subsidiaries across Europe and
    North America, is implementing Salesforce for its B2B sales. This includes Sales
    Cloud, CPQ, and B2B Commerce.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: MillCo是一家生产CNC铣床的公司，拥有遍布欧洲和北美的子公司，正在为其B2B销售实施Salesforce。这包括Sales Cloud、CPQ和B2B
    Commerce。
- en: Abigail is the CRM tech lead from MillCo, a role she has recently taken up after
    leading a CRM implementation project in another B2B manufacturing company. Her
    principal job is to ensure that the technical delivery from the three different
    vendors that are implementing the different elements of the new system is consistent
    and of high quality.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Abigail是MillCo的CRM技术负责人，在加入MillCo之前，她曾在另一家B2B制造公司领导过一个CRM实施项目。她的主要职责是确保来自三个不同供应商的技术交付在实现新系统的不同元素时具有一致性和高质量。
- en: At project kick-off, Abigail invites all three vendor teams along with internal
    stakeholders and emphasizes many times that while people are working for different
    companies, everyone should think of themselves as being on the same team. MillCo
    wants everyone on the same page and working together toward a common goal.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目启动时，Abigail邀请了三个供应商团队以及内部相关方，并多次强调，虽然每个人都为不同的公司工作，但大家应当把自己看作是一个团队的一部分。MillCo希望大家在同一页面上，共同朝着一个共同目标努力。
- en: That turns out to have been all for naught. Once work commences for real, the
    three suppliers are quickly at each other’s throats. Abigail finds it impossible
    to get them to agree to any common approach and standard.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，这一切都是徒劳的。一旦工作正式开始，三家供应商很快就互相对立。Abigail发现很难让他们达成任何共同的方法和标准。
- en: While she can mandate certain things, she has no team behind her, and there
    is only so much she can do if the vendors don’t cooperate. She escalates the issue
    but is told to find a solution that allows work to continue as planned.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管她可以强制执行某些规定，但她没有团队支持，如果供应商不配合，她所能做的也有限。她将问题上报，但被要求找到一个能够让工作按计划继续进行的解决方案。
- en: 'The solution she decides to go with is to isolate each vendor in a separate
    package. That way, they can build in isolation, except for cases where their work
    directly clashes with one another on key elements of the platform. Abigail takes
    it upon herself to monitor and mediate these disputes:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 她决定的解决方案是将每个供应商隔离在独立的软件包中。这样，供应商可以独立开发，除了他们的工作在平台的关键元素上直接冲突的情况。Abigail决定亲自监控并调解这些争端：
- en: '![Figure 7.3 – Package structure](img/B30991_07_03.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – 软件包结构](img/B30991_07_03.jpg)'
- en: Figure 7.3 – Package structure
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 软件包结构
- en: She ends up spending most of her time on the project mediating these kinds of
    inter-vendor conflicts. That also means she has very little time to investigate
    the general approaches used by the vendors in areas that aren’t subject to acrimony.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 她最终将大部分时间都花在了调解这些跨供应商冲突上。这也意味着她几乎没有时间去调查供应商在那些不涉及争议领域中使用的通用方法。
- en: However, in the end, the system is built. As each vendor has been working in
    their own environment with only occasional deploys to a thinly tested integration
    environment, the first step to prepare for **user acceptance testing** ( **UAT**
    ) is to deploy all the packages to a common environment and test the basic processes.
    Each package has been thoroughly tested in its own environment, but no systematic
    testing has been done across packages.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最终，系统被构建完成。由于每个供应商都只在自己的环境中工作，偶尔才将代码部署到经过薄弱测试的集成环境中，因此准备进行**用户验收测试**（**UAT**）的第一步是将所有软件包部署到一个共享环境中，并测试基本流程。每个软件包都在自己的环境中经过了彻底测试，但尚未对跨软件包进行系统性测试。
- en: Even before the test results start coming in, the situation starts to deteriorate.
    It turns out that there are incompatible system and package settings between the
    vendors—for instance, on the CPQ-managed package. This means the deployment stalls
    until a workaround can be found.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在测试结果开始出来之前，情况也开始恶化。事实证明，供应商之间存在不兼容的系统和软件包设置——例如，CPQ管理的软件包上就存在这种情况。这意味着部署被迫停滞，直到找到解决方法。
- en: When the testers actually get started, things go from bad to worse. There are
    many subtle incompatibilities between the packages. For instance, there are different
    interpretations and uses of common fields, duplicate fields used by different
    packages for the same purpose, and custom objects that have a partially overlapping
    scope and the creation of redundant data. There is also a wide range of different
    automation patterns in use between the three vendors, despite this being an area
    where Abigail specified the standard upfront.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试人员真正开始工作时，情况变得更加糟糕。软件包之间存在许多细微的不兼容问题。例如，对于公共字段的解释和使用存在差异，不同的软件包使用相同目的的重复字段，以及部分重叠范围的自定义对象和冗余数据的创建。此外，三个供应商之间在自动化模式上也存在很大差异，尽管这是Abigail在项目初期已经指定了标准的领域。
- en: All in all, the differences are too large to reconcile quickly, and the project
    has to back off. Abigail’s boss negotiates an extension to the timeline in order
    to refactor the packages and bring them in line. While she is happy about the
    extension, Abigail does not relish the wrangling it will take to get the vendors
    to actually do this.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，差异太大，无法迅速协调一致，项目不得不后退。Abigail的上司谈判延长了时间表，以便重构软件包并使其统一。虽然她对延期感到高兴，但Abigail并不喜欢为了让供应商真正完成这项工作而进行的拉锯战。
- en: Problem
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题
- en: Sometimes, you want to allow teams to work independently without having to depend
    on or coordinate with other teams. In a Salesforce context, that may be because
    the teams are working on different clouds, come from different vendors, or represent
    different departments or BUs within your organization.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你可能希望让团队独立工作，而不必依赖或协调其他团队。在Salesforce的上下文中，这可能是因为各个团队在不同的云环境中工作，来自不同的供应商，或代表着你组织内不同的部门或业务单元（BU）。
- en: This is very understandable as coordination problems can be hard to resolve.
    However, when that becomes the basis for dividing up your Salesforce platform
    into packages, it becomes a DevOps anti-pattern.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这完全可以理解，因为协调问题确实很难解决。然而，当这种情况成为将Salesforce平台划分为包的基础时，它就变成了一种DevOps反模式。
- en: Proposed solution
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提议的解决方案
- en: The proposed solution of Using Packages to Create Silos is to give each team
    its own package to work in, reflecting what it is going to be working on. That
    avoids coordination issues but creates a host of other problems.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 使用包来创建孤岛的提议解决方案是，给每个团队分配自己的包来工作，反映出它们将要处理的内容。这避免了协调问题，但也带来了一系列其他问题。
- en: That means you structure the package setup for your project based on organizational
    needs rather than architecture. That can seem like a good idea at the outset and
    obviously works for the teams in the short term, but unfortunately means that
    hidden conflicts are likely and can remain hidden for a long time.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你根据组织需求而非架构来结构化你的项目包设置。一开始看起来这可能是个不错的主意，显然也能短期内满足各个团队的需求，但不幸的是，这也意味着潜在的隐藏冲突很可能会存在，并且可能会保持隐蔽很长时间。
- en: Results
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结果
- en: The likely result of Using Packages to Create Silos is that you will have hidden
    conflicts that only become apparent on the integration of the packages.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 使用包来创建孤岛的可能结果是，你将会遇到隐藏的冲突，直到包集成时才会显现出来。
- en: 'These conflicts include cases such as the following:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这些冲突包括以下情况：
- en: Different use of data models—for instance, fields and objects
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据模型的不同使用——例如，字段和对象
- en: Issues in the security model where conflicting configurations are used
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全模型中的问题，当使用了冲突的配置时
- en: Conflicting flows, validation rules, or other business logic
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 冲突的流程、验证规则或其他业务逻辑
- en: Deviation from best practice, for instance, multiple triggers on the same object
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 偏离最佳实践，例如，在同一对象上有多个触发器
- en: Different automation patterns used on the same object
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在同一对象上使用不同的自动化模式
- en: Conflicting assumptions about system settings
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于系统设置的冲突假设
- en: Replicated functionality in different packages that is often only partially
    overlapping
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同的包中复制的功能，经常只是部分重叠
- en: This can lead to serious issues and can be a real mess to refactor, which is
    both costly and time-consuming.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会导致严重问题，而且重构起来会非常麻烦，既昂贵又耗时。
- en: Better solutions
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好的解决方案
- en: In general, package design should be taken quite seriously. Package-based development
    is the way to go for most large-scale Salesforce projects, not least because it
    scales better than the alternatives.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，包设计应当被非常重视。基于包的开发是大多数大规模Salesforce项目的正确选择，部分原因是它比其他替代方案更具可扩展性。
- en: 'To avoid falling into the Using Packages to Create Silos anti-pattern, follow
    these guidelines:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免陷入使用包创建孤岛的反模式，请遵循以下准则：
- en: Design your package structure with your architecture in mind. For instance,
    in a typical architecture that’s split by service lines, you could place common
    functionality in a “Common” package that all other packages depend on and then
    have separate packages for each service line containing relevant components. You
    might also have higher-level packages cutting across service lines for things
    such as common integrations and you could have separate packages split out for
    cross-cutting functionality, although that can be a bit tricky to manage. The
    point is that you should ensure that you manage dependencies cleanly and don’t
    have potentially conflicting overlaps.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设计包结构时要考虑架构。例如，在典型的按服务线拆分的架构中，你可以将公共功能放在一个“Common”包中，所有其他包都依赖于该包，然后为每个服务线创建包含相关组件的单独包。你还可以有跨服务线的高层次包，处理诸如常见集成之类的内容，并且可以将交叉功能拆分到单独的包中，尽管这可能有些难以管理。重点是，你应该确保干净地管理依赖关系，并避免潜在的冲突重叠。
- en: Be careful with dependencies; a layered approach can work well to only have
    dependencies go in one direction.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小心处理依赖关系；分层方法可以有效地确保依赖关系仅朝一个方向流动。
- en: Have teams work across packages when needed.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在需要时，让团队跨包工作。
- en: Consider having certain teams own certain packages and others request work from
    them if they need anything.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑让特定团队拥有特定的包，而其他团队如果需要任何东西，则向它们请求工作。
- en: Coordinate via technical governance forums—for example, an architecture board.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过技术治理论坛进行协调——例如，架构委员会。
- en: In modern DevOps workflows, leveraging tools such as the Salesforce CLI is essential
    for effective source tracking and version control. The Salesforce CLI streamlines
    the integration process, allowing developers to easily manage and deploy changes
    across environments. By utilizing source-tracking capabilities, teams can ensure
    consistency and accuracy in their development processes, enhancing collaboration
    and reducing errors. This approach enables the efficient management of metadata
    and code changes, aligning with best practices in agile development.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代 DevOps 工作流中，利用如 Salesforce CLI 这样的工具对于有效的源代码跟踪和版本控制至关重要。Salesforce CLI 简化了集成过程，使开发人员能够轻松管理和部署跨环境的变更。通过利用源跟踪功能，团队可以确保开发过程中的一致性和准确性，增强协作并减少错误。这种方法使得元数据和代码变更的高效管理成为可能，与敏捷开发的最佳实践保持一致。
- en: Salesforce DX unlocked packages are a crucial component of modern development
    workflows in the Salesforce ecosystem. They enable developers to create modular
    and reusable components, facilitating code organization and improving team collaboration.
    With the ability to manage package versions and dependencies effectively, teams
    can streamline their CI/CD processes. Unlocked packages also support a more granular
    approach to source tracking, allowing teams to work on different features without
    affecting the entire code base. By utilizing unlocked packages, organizations
    can enhance their development practices, making them more agile and responsive
    to changes in business requirements.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce DX 解锁包是 Salesforce 生态系统中现代开发工作流的关键组成部分。它们使开发人员能够创建模块化和可重用的组件，促进代码组织并改善团队协作。通过有效管理包版本和依赖关系，团队可以简化其
    CI/CD 流程。解锁包还支持更细粒度的源代码跟踪方法，允许团队在不影响整个代码库的情况下，专注于不同的功能。通过使用解锁包，组织可以提升其开发实践，使其更加灵活，能够快速响应业务需求的变化。
- en: In general, you don’t want to mistake package design for something else. Build
    your package structure so that it makes sense for your architecture and is workable
    for your developers.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，你不想把包设计误认为其他东西。构建你的包结构时，确保它适合你的架构并且对开发人员可行。
- en: Testing without testing
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无测试的测试
- en: Testing is a critical activity within any large software project. In this section,
    we will see how trying to avoid writing the necessary unit tests can cause major
    issues in the mid-to-long term.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是任何大型软件项目中的关键活动。在本节中，我们将看到，试图避免编写必要的单元测试可能会在中长期内引发重大问题。
- en: Dummy Unit Tests
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚拟单元测试
- en: '*The Dummy Unit Tests anti-pattern gets around the built-in requirement for
    unit testing in Salesforce by writing dummy tests that optimize for coverage but*
    *do nothing* .'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '*虚拟单元测试反模式通过编写虚拟测试绕过 Salesforce 内置的单元测试要求，这些虚拟测试优化了覆盖率，但* *什么都不做*。'
- en: Example
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: TruckCo is a start-up automotive company that focuses on building next-generation
    EV trucks. It sees itself as more of a technology company than a manufacturing
    company and therefore invests heavily in top-range solutions to keep its technological
    edge.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: TruckCo 是一家初创的汽车公司，专注于构建下一代电动卡车。它更看重自己是科技公司而非制造公司，因此在顶级解决方案上的投资相当重，以保持技术领先。
- en: Generally, TruckCo tends toward heavy customization and intense agile projects
    with long hours and short timelines. The supply chain application TruckCo is currently
    building on Salesforce is no exception to this rule.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，TruckCo 倾向于进行重度定制和高强度的敏捷项目，工作时间长且时间紧迫。TruckCo 目前在 Salesforce 上构建的供应链应用程序也不例外。
- en: The application will integrate their B2B commerce portal with order management
    and their supply chain backend systems. It will enable **just-in-time** ( **JIT**
    ) ordering from spare parts vendors and in general significantly reduce the **quote-to-cash**
    ( **QTC** ) process for spare part orders.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序将把他们的 B2B 商务门户与订单管理和供应链后端系统集成。它将实现来自备件供应商的 **准时**（**JIT**）订购，并且通常会显著缩短
    **报价到收款**（**QTC**）过程，特别是在备件订单方面。
- en: In order to achieve these aims, TruckCo plans to integrate half a dozen key
    backend systems with Salesforce, build a custom **user interface** ( **UI** )
    optimized for their special processes, and build a set of cross-platform, AI-enabled
    automations that drive efficiencies in the ordering process.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这些目标，TruckCo计划将六个关键的后台系统与Salesforce集成，构建一个为其特殊流程优化的定制**用户界面**（**UI**），并构建一套跨平台的、支持AI的自动化系统，以提高订购过程的效率。
- en: Because the application is expected to be code-heavy and development-focused,
    TruckCo repurposes a team of Java developers from its permanent staff to work
    on it, figuring that Apex is close enough for them to pick it up as they go along.
    Yana is the only traditional Salesforce person on the project, and her role is
    to guide the rest of the team in the ways of Salesforce.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个应用程序预计将是一个以代码为主、开发驱动的项目，TruckCo决定将一支Java开发团队从固定员工中调过来参与，认为Apex与他们的背景足够接近，能够边做边学。Yana是项目中唯一的传统Salesforce专家，她的角色是引导其他团队成员了解Salesforce的工作方式。
- en: Matt, the team lead, is a bit of a maverick, and the same is true of the rest
    of the team. While they use unit tests, they do not do so consistently, often
    preferring to have bugs reported by users and then fix them afterward. Inside
    TruckCo, there is an unstated but strong preference for releasing products on
    time, even if that means releasing something buggy and incomplete.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 团队负责人Matt有点特立独行，其他团队成员也是如此。虽然他们使用单元测试，但并不总是坚持使用，通常更倾向于让用户报告错误，然后再修复它们。在TruckCo内部，虽然没有明确说明，但存在着强烈的偏好：即使这意味着发布一个有缺陷且不完整的产品，也要按时发布。
- en: Coming from the Java world, the developers quickly start to get annoyed with
    the mandated 75% unit test coverage enforced by Salesforce and built into the
    deployment tooling for the platform. Yana accidentally mentions some ways to fool
    the Salesforce unit test calculation by creating dummy tests while having lunch
    with the rest of the team.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Java背景的开发人员很快开始对Salesforce强制要求的75%单元测试覆盖率感到不满，而这一规定已被Salesforce部署工具所内置。Yana在和团队其他成员共进午餐时，偶然提到了一些通过创建虚拟测试来欺骗Salesforce单元测试计算的方法。
- en: Although she mentioned it jokingly, much to her chagrin, she finds that a few
    days after, dummy unit tests are starting to appear in the code base. When she
    calls out Matt on this, he simply shrugs and says that they’re behind schedule,
    so they don’t have time to spend all their time coding tests.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管她开玩笑提到过此事，但令她懊恼的是，几天后，她发现虚拟单元测试开始出现在代码库中。当她向Matt提出这个问题时，他只是耸耸肩，表示他们已经落后于进度，因此没有时间全力编写测试代码。
- en: Yana, however, is not deterred, and at the next project board, she raises the
    issue formally. She refers to the guidance provided by Salesforce and supported
    by the company’s own Salesforce architect.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Yana并没有气馁，在下次项目会议上，她正式提出了这个问题。她引用了Salesforce的指导方针，并得到了公司内部Salesforce架构师的支持。
- en: The project sponsor promises to have someone investigate the issue. Unfortunately,
    that’s the last Yana hears of it. It seems that Matt had indicated that major
    delays would happen to the project if they had to retroactively write a complete
    set of unit tests. In keeping with TruckCo’s normal way of operating, this is
    seen as unacceptable, and the dummy unit test issue is ignored.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 项目赞助人承诺会派人调查这个问题。不幸的是，Yana之后再也没有听到任何相关信息。似乎Matt曾表示，如果需要追溯性地编写完整的单元测试，将会导致项目出现重大延迟。按照TruckCo一贯的运营方式，这被视为不可接受，因此虚拟单元测试的问题被忽略了。
- en: Therefore, the practice keeps accelerating as the project falls more behind,
    and toward go-live, almost every new unit test written is a dummy. While the automated
    scanner lists an impressive 90% coverage, Yana doubts whether the real number
    is any higher than 10%.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，随着项目进度的进一步落后，实践的加速也在持续。接近上线时，几乎每一个新的单元测试都是虚拟的。虽然自动扫描工具显示出令人印象深刻的90%覆盖率，Yana怀疑实际覆盖率是否高于10%。
- en: A few weeks before go-live, a list of last-minute changes comes in from business
    stakeholders. Yana can’t see any way that they can be incorporated, but Matt agrees
    to deliver them.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在上线前几周，来自业务利益相关者的一系列最后时刻的变更被提出。Yana看不出有任何办法将这些变更纳入项目中，但Matt同意按时交付这些变更。
- en: The last period is a flurry of changes back and forth with lots of bugs discovered
    by testers, followed by fixes that often lead to further regression issues. This
    continues unabated into the actual UAT period, which finds another large number
    of issues. However, no one makes the decision to halt the go-live, and on the
    appointed day, the supply chain application goes live.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一段是来回变更的繁忙时期，测试人员发现了许多错误，接着是修复，这通常导致更多的回归问题。这种情况一直持续到实际的用户验收测试期间，又发现了大量问题。然而，没有人决定停止上线，并且在指定的日期，供应链应用程序正式上线。
- en: As users start onboarding on the application, several breaking bugs are discovered
    in the main flows. These occur in areas that had been tested and found working
    just weeks before go-live and had also been part of user training.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户开始在应用程序上进行登记时，在主要流程中发现了几个严重的错误。这些错误出现在距离上线仅几周之前已经测试并且正常工作的区域，并且也是用户培训的一部分。
- en: The application must be taken down, and an escalation meeting is called. Here,
    the fundamental soundness and quality of the application are put into serious
    question and a new initiative is agreed upon to look into the quality issues and
    devise a way of fixing them before the application can be brought back online.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序必须下线，并且召开了一次升级会议。在这里，应用程序的基本健全性和质量受到了严重质疑，并且达成了一个新的计划来研究质量问题并设计一种修复它们的方式，以便应用程序可以重新上线。
- en: Problem
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题
- en: 'Dummy unit tests seek to address a very simple question: how do you get around
    the hard 75% unit test limit for production deployment in Salesforce? It’s common
    for long-running Salesforce projects to find that they are under the limit either
    for a specific deployment or in general.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟单元测试旨在解决一个非常简单的问题：如何绕过Salesforce生产部署中严格的75%单元测试限制？长期运行的Salesforce项目通常发现，无论是特定部署还是总体而言，它们都处于这一限制之下。
- en: Many teams find this limit annoying. This is especially true when developers
    are coming to the platform from other technologies where no such limit existed,
    when under pressure, or when they are doing something “simple.”
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 许多团队发现这种限制很烦人。特别是在开发人员从其他技术平台转移到Salesforce时，这一点尤为明显，在压力之下，或者在做一些“简单”的事情时。
- en: Proposed solution
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提议的解决方案
- en: 'The solution proposed is to create dummy unit tests that just optimize for
    code coverage and don’t really test anything. This is another of the few anti-patterns
    that edge close to just being bad practice. You can see an example of a dummy
    test in the following code snippet:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 提议的解决方案是创建虚拟单元测试，仅仅优化代码覆盖率，而不真正测试任何东西。这是少数几个接近糟糕实践的反模式之一。你可以在以下代码片段中看到一个虚拟测试的示例：
- en: '[PRE0]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: However, it is something that can be tempting and that otherwise serious Salesforce
    practitioners sometimes may engage in. When you are under pressure to meet a sprint
    goal or deployment deadline, it can seem like a waste of time to write a bunch
    of unit tests just to get the coverage up.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这是一种可能会引诱到否认严肃Salesforce从业者有时可能会参与的行为。当你在压力下要达到冲刺目标或部署期限时，写一堆单元测试只是为了提高覆盖率，看起来可能是在浪费时间。
- en: 'But obviously, this attitude fails to acknowledge the real value provided by
    unit tests and the reason why the coverage is mandatory: code without good unit
    tests is much more brittle and prone to regression errors than code that has them.
    Therefore, skipping them, even when you are under pressure, is a genuinely bad
    idea.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 但显然，这种态度未能认识到单元测试提供的真正价值以及覆盖率强制执行的原因：没有良好单元测试的代码比有这些测试的代码更加脆弱且容易回归。因此，即使在压力之下，跳过它们也是一个真正糟糕的主意。
- en: Results
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结果
- en: This pattern tends to lead to a death by a thousand cuts. While you probably
    won’t experience ill effects in the short term, after a while, you won’t have
    any real unit tests to rely on.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式往往导致千刀万剐。虽然你可能短期内不会感受到不良影响，但是过段时间后，你将没有任何真正可靠的单元测试可以依赖。
- en: Even worse, you may still psychologically project a false sense of security,
    if you still think you’ve only cut the corners in a few places and generally can
    rely on your testing. Basically, you are cheating the system and probably releasing
    poor-quality code. Also, you are creating a major amount of technical debt that
    the organization will at some point have to pay off.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是，如果你仍然认为你只是在几个地方偷了懒，并且通常可以依赖你的测试，你可能会在心理上产生一种错误的安全感。基本上，你正在欺骗系统，很可能会发布质量低劣的代码。此外，你正在创造大量的技术债务，组织在某个时候必须支付它们。
- en: Better solutions
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好的解决方案
- en: 'The solution to this anti-pattern is simple: build good unit tests and always
    meet the minimum thresholds. You should never compromise on the minimum bar as
    it will lead to deteriorating code quality and hence delivery quality over time.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这种反模式的方法很简单：构建良好的单元测试，并始终满足最低标准。你绝不能妥协最低要求，否则会导致代码质量和交付质量随时间恶化。
- en: 'There is a lot of guidance available on building good unit tests, so let us
    just repeat a few basic points:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 关于构建良好的单元测试，有很多指导意见，所以我们只重复几个基本要点：
- en: A unit test should test a single functionality in the code
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试应该测试代码中的单一功能
- en: The test should be written before the code it is testing
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试应该在代码之前编写
- en: The test should be written in such a way that it can be easily repeated
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试应该以便于重复执行的方式编写
- en: The test should be independent of other tests
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试应该独立于其他测试
- en: The test should not rely on org data but should create its own test data, ideally
    using a test data factory
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试不应依赖于组织数据，而应创建自己的测试数据，理想情况下使用测试数据工厂
- en: The test should be concise
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试应该简洁
- en: Assertions should be used to check that the expected results are obtained
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应使用断言来检查是否得到了预期的结果
- en: The test should test both positive and negative cases
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试应该同时测试正面和负面情况
- en: The test should be run often, preferably automatically
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试应该经常运行，最好是自动运行
- en: The test should be easy to understand and maintain
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试应该易于理解和维护
- en: In addition to traditional testing methods, consider incorporating modern testing
    frameworks such as ApexMocks, Jest, and Mocha. These frameworks offer powerful
    features for unit testing and mocking in various programming environments, facilitating
    more efficient and effective testing processes. Familiarizing yourself with these
    tools can significantly enhance your testing strategy and improve code quality.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 除了传统的测试方法外，考虑加入现代测试框架，如 ApexMocks、Jest 和 Mocha。这些框架提供了强大的功能，用于单元测试和在各种编程环境中的模拟，促进了更高效、更有效的测试过程。熟悉这些工具可以显著提升你的测试策略，并提高代码质量。
- en: It is a rare anti-pattern that can be avoided just by following good practice,
    so be sure to avoid this one.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个罕见的反模式，通过遵循良好的实践就可以避免，因此一定要避免这种情况。
- en: The challenge of DevOps integration
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 集成的挑战
- en: As Salesforce platforms grow more complex and organizations push for faster
    delivery cycles, many teams find themselves grappling with the integration of
    modern DevOps practices into their architectural approach. While the promise of
    DevOps is compelling—faster releases, higher quality, and more reliable deployments—the
    reality often falls short of these aspirations, particularly in the Salesforce
    ecosystem where traditional development patterns can clash with DevOps principles.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Salesforce 平台的日益复杂化，组织推动更快的交付周期，许多团队发现自己在将现代 DevOps 实践融入其架构方法中时遇到困难。虽然 DevOps
    的承诺非常吸引人——更快的发布、更高的质量和更可靠的部署——但现实往往未能达到这些期望，尤其是在 Salesforce 生态系统中，传统的开发模式可能与 DevOps
    原则发生冲突。
- en: Consider FinTechCo, a rapidly growing financial technology company implementing
    Salesforce as their new customer engagement platform. Like many organizations,
    they begin their DevOps journey with great enthusiasm, implementing all the right
    tools—Git repositories, CI/CD pipelines, automated deployments, and Salesforce
    DX for development. Their lead architect, Sarah, meticulously sets up the technical
    infrastructure, confident that this will transform their delivery process.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下 FinTechCo，一家快速增长的金融科技公司，正在将 Salesforce 作为他们新的客户互动平台。像许多组织一样，他们以极大的热情开始了
    DevOps 之旅，实施了所有正确的工具——Git 仓库、CI/CD 管道、自动化部署和用于开发的 Salesforce DX。它们的首席架构师 Sarah
    精心设置了技术基础设施，相信这将改变他们的交付过程。
- en: However, as the project progresses, the team discovers that having DevOps tools
    in place isn’t enough. Developers continue making changes directly in sandboxes,
    only committing to Git when reminded. The automated test suite remains sparse,
    with most testing still performed manually. The CI/CD pipeline frequently breaks
    because different team members follow different processes. Integration between
    environments becomes increasingly problematic—what works in one developer’s scratch
    org fails in another’s, and changes that pass all automated tests in the pipeline
    sometimes break functionality in integration environments.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着项目的推进，团队发现，单单拥有DevOps工具还远远不够。开发人员仍然直接在沙盒中进行更改，只有在被提醒时才会提交到Git。自动化测试套件依然稀缺，大多数测试仍然是手动执行的。由于不同团队成员遵循不同的流程，CI/CD流水线经常中断。环境间的集成问题也日益严重——一个开发人员的临时组织中能正常工作的功能，在另一个开发人员的组织中就会失败，而那些通过所有自动化测试的变更，有时会在集成环境中导致功能故障。
- en: This scenario plays out frequently across the Salesforce ecosystem, where organizations
    implement DevOps tooling without fully embracing the cultural and architectural
    changes required. The challenge lies not in the tools themselves but in the fundamental
    shifts needed in how teams approach development and deployment. Teams often find
    themselves caught between the immediate pressure to deliver features and the longer-term
    need to build sustainable delivery practices.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况在Salesforce生态系统中频繁发生，许多组织在实施DevOps工具时并没有充分接受所需的文化和架构变化。挑战不在于工具本身，而在于团队在开发和部署方式上所需的根本转变。团队常常发现自己处于短期内需要交付功能与长期内需要建立可持续交付实践之间的矛盾之中。
- en: The situation typically deteriorates gradually. Teams start bypassing DevOps
    processes for emergency fixes, making direct changes in higher environments. Environment
    states become inconsistent, and tracking changes becomes increasingly difficult.
    What starts as the occasional deviation from the process becomes common practice,
    undermining the very benefits DevOps was meant to deliver.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况通常是逐渐恶化的。团队开始为紧急修复绕过DevOps流程，直接在更高级的环境中进行更改。环境状态变得不一致，跟踪变更也变得越来越困难。最初偶尔偏离流程的情况变成了常态，破坏了DevOps本应带来的好处。
- en: At FinTechCo, this comes to a head during a critical deployment that fails repeatedly
    during a planned release window. The team discovers various components have different
    versions across environments, and nobody can confidently say which version should
    be considered correct. The release has to be postponed while the team manually
    reconciles the differences—exactly the sort of situation DevOps is supposed to
    prevent.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在FinTechCo公司，这个问题在一次关键的部署过程中达到了高潮，该部署在计划的发布窗口期间反复失败。团队发现，各个环境中的不同组件有不同的版本，而且没有人能自信地说出哪个版本应该被视为正确的。发布不得不推迟，团队需要手动协调这些差异——这正是DevOps应该避免的情况。
- en: The root cause often lies in approaching DevOps as a technical transformation
    rather than an architectural and organizational one. Teams implement tools without
    redesigning their development processes and solution architecture to support modern
    delivery practices. This creates a disconnect between the ideal process and the
    practical reality teams face daily.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 根本原因通常在于将DevOps视为一种技术转型，而非架构和组织层面的转型。团队实施工具时，并未重新设计其开发流程和解决方案架构，以支持现代交付实践。这在理想流程与团队日常面临的实际现实之间制造了脱节。
- en: Success with DevOps in Salesforce requires rethinking architectural approaches
    from the ground up. This means considering how your metadata will be packaged
    and deployed, how environments will be managed, how testing will be automated,
    and how changes will be tracked and versioned. It means making architectural decisions
    that support continuous delivery—for instance, designing features to be independently
    deployable and building automated testing into the development process from the
    start.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在Salesforce中成功实现DevOps需要从根本上重新思考架构方法。这意味着要考虑如何打包和部署元数据，如何管理环境，如何自动化测试，以及如何跟踪和版本化变更。这意味着要做出支持持续交付的架构决策——例如，设计可独立部署的功能，并从一开始就在开发过程中构建自动化测试。
- en: Organizations need to recognize that DevOps isn’t just about faster deployments—it’s
    about building quality and reliability into the development process itself. This
    might mean making architectural trade-offs, such as sacrificing some flexibility
    in how changes can be made in exchange for more reliable deployments. It might
    mean redesigning features to support partial deployments rather than requiring
    all-or-nothing releases.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 组织需要认识到，DevOps 不仅仅是加快部署——它还意味着在开发过程中构建质量和可靠性。这可能意味着做出架构上的权衡，例如在如何进行更改的灵活性上做出牺牲，以换取更可靠的部署。这也可能意味着重新设计功能，以支持部分部署，而不是要求全部或无部署。
- en: The path forward typically involves starting small and scaling gradually. Rather
    than attempting a complete transformation overnight, successful organizations
    often begin with a single team or project, allowing practices to mature before
    expanding. This approach allows teams to learn and adapt while managing risk appropriately.
    It also provides opportunities to demonstrate success, building organizational
    support for broader adoption.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 前进的路径通常是从小做起，逐步扩展。成功的组织通常不会试图一夜之间完成全面转型，而是从一个团队或项目开始，允许实践逐渐成熟后再扩展。这种方法可以让团队在适当管理风险的同时学习和适应，也为展示成功提供了机会，从而为更广泛的采纳争取组织支持。
- en: Most importantly, organizations need to recognize that DevOps transformation
    is a journey rather than a destination. It requires ongoing commitment to improvement,
    willingness to learn from failures, and patience as teams develop new skills and
    habits. The goal isn’t perfect DevOps implementation, but rather building a sustainable
    approach to delivery that balances speed and reliability.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，组织需要认识到，DevOps 转型是一段旅程，而非一个终点。它需要持续的改进承诺、从失败中学习的意愿，以及在团队发展新技能和习惯时的耐心。目标不是完美的
    DevOps 实施，而是构建一种可持续的交付方法，平衡速度与可靠性。
- en: Success comes from aligning architectural decisions with delivery practices,
    building robust automated testing approaches, establishing clear governance around
    development processes, and investing in team training and cultural change. This
    means making hard choices about standardization versus flexibility, where to enforce
    processes and where to allow deviation, and how to balance immediate delivery
    needs with long-term sustainability.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 成功来自于将架构决策与交付实践对齐，构建强大的自动化测试方法，围绕开发过程建立明确的治理框架，并投资于团队培训和文化变革。这意味着在标准化与灵活性之间做出艰难的选择，决定在哪些方面强制执行流程，在哪些方面允许偏差，以及如何平衡短期交付需求与长期可持续性。
- en: By approaching DevOps as an architectural challenge rather than just a tooling
    one, organizations can avoid the common pitfalls of superficial adoption and build
    delivery practices that truly support their business needs. This requires careful
    thought about how architectural decisions impact delivery capabilities and how
    delivery practices influence architectural choices. Only by addressing both aspects
    together can organizations achieve the true benefits of modern DevOps practices
    in their Salesforce implementations.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 DevOps 视为一种架构挑战，而不仅仅是工具挑战，组织可以避免表面化采用的常见陷阱，并建立真正支持其业务需求的交付实践。这需要仔细思考架构决策如何影响交付能力，以及交付实践如何影响架构选择。只有同时处理这两个方面，组织才能在其
    Salesforce 实施中实现现代 DevOps 实践的真正好处。
- en: Knowing the takeaways
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解要点
- en: In this section, we will abstract a bit from the specific patterns and instead
    try to pull out the wider learning points you can use in your day-to-day work
    as a Salesforce architect or in preparing for the CTA Review Board exam.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将从具体的模式中提取一些更广泛的学习要点，帮助您在日常工作中作为 Salesforce 架构师使用，或者为准备 CTA 审查委员会考试做好准备。
- en: 'When architecting Salesforce solutions, you should be mindful of the following:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计 Salesforce 解决方案时，您应该注意以下几点：
- en: Don’t put all your eggs in one basket. Plan smaller releases wherever possible
    to de-risk and get feedback.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要把所有的鸡蛋放在一个篮子里。在可能的情况下计划较小的发布，以降低风险并获得反馈。
- en: Confront the tough decisions that can come from having to break down functionality
    into smaller buckets. Don’t just accept a statement that everything must be there
    from day one.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面对将功能拆分成更小模块时可能出现的艰难决定。不要仅仅接受“从第一天开始必须包含所有内容”的说法。
- en: Always confront the key architectural trade-offs early on in your project timeline.
    They usually don’t get easier to manage as time goes by.
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是在项目时间线的早期阶段就面对关键的架构权衡。这些问题通常不会随着时间推移变得更容易处理。
- en: Communicate clearly and openly about the trade-offs that need to be made and
    the options for doing so. Trying to please everybody and sweep things under the
    rug is a recipe for disaster.
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清楚和公开地沟通需要做出的权衡和各种选择的选项。试图取悦每个人并掩盖问题是灾难的开始。
- en: Don’t allow team rivalries or organizational silos to dictate your development
    model, whether for package-based development or otherwise.
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要让团队竞争或组织内部的信息孤岛来决定你的开发模型，无论是基于包的开发还是其他方式。
- en: Instead, ensure that your development model is consistent with the architecture
    you are pursuing and that components and packages are structured accordingly.
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 相反，确保你的开发模型与你追求的架构一致，并相应地组织组件和包。
- en: Integrate modern DevOps practices including CI/CD pipelines, automated testing,
    and version control to improve delivery quality.
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成现代化的DevOps实践，包括CI/CD流水线、自动化测试和版本控制，以提升交付质量。
- en: Unit testing is a requirement in Salesforce for a reason. Don’t compromise just
    because you are under pressure.
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Salesforce中，单元测试是一个必须。不要因为压力而妥协。
- en: Writing good-quality unit tests will ensure that you have higher code quality
    and fewer regression issues.
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写高质量的单元测试将确保你拥有更高的代码质量和更少的回归问题。
- en: 'In preparing for the CTA Review Board exam, you should be mindful of the following:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备CTA审查委员会考试时，你应该注意以下事项：
- en: Prefer an agile, multi-release process when faced with a big, complex scenario,
    rather than a single big-bang release.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面对复杂的大型场景时，更倾向于敏捷的、多版本发布的流程，而不是单一的大爆炸式发布。
- en: Some scenarios, however, do seem written more for a waterfall/big-bang approach.
    This may be an area where best practices for the board and reality can diverge.
    In today’s rapidly evolving tech landscape, it is increasingly crucial for CTAs
    to understand DevOps and modern development practices. This knowledge not only
    enhances collaboration between development and operations teams but also enables
    CTAs to better support organizations in implementing agile methodologies, CI,
    and continuous delivery, ultimately driving innovation and efficiency.
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，有些情况似乎更适合瀑布/大爆炸式的方法。这可能是理事会最佳实践和现实之间差异的一个领域。在当今快速发展的技术景观中，对于CTAs来说，理解DevOps和现代开发实践日益关键。这种知识不仅增强了开发与运维团队之间的协作，还使CTAs能够更好地支持组织实施敏捷方法、CI和持续交付，从而推动创新和效率。
- en: You should be very clear about the trade-offs you are making and include them
    in your justification.
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应该非常清楚你所做出的权衡，并将其包含在你的理由中。
- en: If you fail to make an appropriate choice, it will with near certainty make
    your solution unravel during the Q&A.
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你不能做出合适的选择，几乎可以肯定会在问答环节中使你的解决方案崩溃。
- en: Package-based development is the up-and-coming development model for Salesforce
    projects, but that doesn’t mean it will be right for your scenario. If it is,
    having some words to say about a good package structure will potentially give
    you some extra kudos.
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于包的开发是Salesforce项目的新兴开发模型，但这并不意味着它适合你的场景。如果适合，对一个良好的包结构有所了解将可能给你带来额外的赞誉。
- en: Know the minimum limits for unit testing and when they are applied so that you
    can answer if asked.
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 知晓单元测试的最低限度以及它们何时适用，以便在被问及时能够作答。
- en: Also, be prepared to answer general questions about what makes good unit tests
    and how to use them to improve code quality.
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时，准备好回答关于什么是好的单元测试以及如何利用它们提升代码质量的一般性问题。
- en: We have now covered the material for this chapter and are ready to proceed to
    the next one. First, however, we will summarize our learning.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了本章的内容，并准备进入下一章。但首先，我们将总结我们的学习。
- en: Summary
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen examples of how the development life cycle can
    be impacted by anti-patterns at different levels of abstraction. At the highest
    level, how you deal with key trade-offs and how you structure your releases have
    a huge impact on the potential success of your project.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了开发生命周期如何受到不同抽象层次的反模式影响的示例。在最高层次上，你如何处理关键的权衡以及如何结构化你的发布对项目的潜在成功有着巨大影响。
- en: However, we also saw that technical elements such as how you structure your
    packages and whether you write good unit tests can be major contributors to project
    success or failure. That means you must master all of these levels to be a successful
    architect in this domain.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们也看到技术元素，比如你如何组织你的包和是否编写了良好的单元测试，可以成为项目成功或失败的重要因素。这意味着你必须掌握所有这些层次，才能在这个领域成为成功的架构师。
- en: For many architects, this domain can be a bit of a lower priority relative to
    solution architecture or the hardcore technical domains. However, paying insufficient
    attention to these issues can lead to serious project failures just as easily
    as a badly designed solution.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多架构师来说，相较于解决方案架构或硬核技术领域，这个领域可能被视为优先级较低。然而，对这些问题的忽视，可能会导致严重的项目失败，就像一个设计糟糕的解决方案一样容易。
- en: With that being said, we will now continue to our last domain—namely, communication—and
    see how we can mess up our Salesforce projects by communicating in the wrong way.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我们现在将继续讨论最后一个领域——即沟通——并看看我们如何通过错误的沟通方式弄乱我们的 Salesforce 项目。
