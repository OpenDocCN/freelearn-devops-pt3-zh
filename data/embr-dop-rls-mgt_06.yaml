- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Understanding the Basics of CI/CD
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 CI/CD 基础
- en: '**Continuous integration and continuous delivery** (**CI/CD**) is a key strategy
    of DevOps release management. It automates the majority of manual human intervention
    that would traditionally be needed in order to produce a new software release
    or get new code into production. CI/CD comprises the integration tests, unit tests,
    regression tests, and the build and deploy phases. Infrastructure as code can
    be integrated into the CI/CD process too, automating the provisioning of cloud
    infrastructure, but can also include provisioning on-premises virtual infrastructure.
    With CI/CD pipelines, software development teams can make changes to code that
    are then automatically tested, pushed out for delivery, and deployed in any environment.
    As you can infer, CI/CD dramatically reduces downtime, ensuring that releases
    happen far quicker, are consistent from release to release, and occur much more
    frequently as well. Radical!'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成和持续交付**（**CI/CD**）是 DevOps 发布管理的关键策略。它自动化了大多数传统上需要人工干预的步骤，这些步骤通常用于生成新的软件发布或将新代码推向生产环境。CI/CD
    包括集成测试、单元测试、回归测试以及构建和部署阶段。基础设施即代码也可以集成到 CI/CD 流程中，自动化云基础设施的供应，也可以包括本地虚拟基础设施的供应。通过
    CI/CD 流水线，软件开发团队可以对代码进行更改，随后自动进行测试、推送以进行交付，并在任何环境中部署。如你所见，CI/CD 大幅减少了停机时间，确保发布速度更快，版本之间一致性更高，且发布频率更高。真是革命性的！'
- en: You can tailor pipelines to accomplish all kinds of tasks, even if they have
    nothing to do with releasing software. This could include generating reports for
    the business unit, turning off unused infrastructure during off-peak hours and
    starting them again before the next workday, refreshing development databases
    with data from production, performing automated penetration tests against network
    infrastructure, automatically rotating IAM keys, SSL certificates, and more! There’s
    a lot of great information about CI/CD out there, but for the subject of this
    book, mentioning it is obligatory.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以根据需要定制流水线来完成各种任务，即使这些任务与发布软件无关。这可能包括为业务部门生成报告，在非高峰时段关闭未使用的基础设施并在下一个工作日前重新启动它们，使用生产数据刷新开发数据库，对网络基础设施执行自动化渗透测试，自动旋转
    IAM 密钥、SSL 证书等！关于 CI/CD 有很多很棒的信息，但对于本书的主题，提到它是必须的。
- en: 'In this sixth chapter, you will learn the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在第六章中，你将学到以下内容：
- en: The ABCs of CI/CD
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI/CD 的基础
- en: What **continuous integration** (**CI**) is
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）是什么'
- en: What **continuous delivery** (**CD**) is
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续交付**（**CD**）是什么'
- en: What continuous testing is
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续测试是什么
- en: The DevOps transformation of Capital One
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Capital One 的 DevOps 转型
- en: By the end of this chapter, you will have learned the core tenets of CI/CD,
    the philosophy that gave birth to it, and the basic strategies to implement it.
    While this chapter does not delve too deeply into the technical implementation
    of CI/CD, you will be shown the tactical strategies that will help you achieve
    success, along with some of the tools that will aid you in getting there.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学习到 CI/CD 的核心原则、赋予它生命的理念，以及实现它的基本策略。虽然本章不会深入探讨 CI/CD 的技术实现，但你将了解到一些战术策略，帮助你成功实现
    CI/CD，并介绍一些工具，帮助你达成目标。
- en: The ABCs of CI/CD
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI/CD 的基础
- en: CI/CD is the lifeblood of today’s software industry, powering the rapid creation
    and distribution of new programs. Tools that eliminate bottlenecks in integration
    and delivery are essential for the smooth operation of any CI/CD pipeline. Teams
    need a unified set of technologies to use in order to work collaboratively and
    efficiently on projects. Source control, testing tools, infrastructure modification,
    and monitoring tools are just some of the SDLC elements that can be unified with
    this framework.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 是当今软件行业的生命线，推动着新程序的快速创建和分发。消除集成和交付瓶颈的工具对于任何 CI/CD 流水线的顺利运行至关重要。团队需要统一的一套技术来协作高效地完成项目。源代码控制、测试工具、基础设施修改和监控工具只是可以与这个框架统一的
    SDLC 元素中的一部分。
- en: With a well-architected CI/CD pipeline, businesses can quickly pivot to new
    trends in consumer demand and technological advancements. In contrast, it takes
    a long time for teams with traditional development strategies to implement customer-requested
    changes or to incorporate new technologies. In addition, by the time the company
    realizes it needs to pivot, consumer demand may have already shifted. This problem
    is addressed by DevOps release management because it employs continuous integration
    and continuous deployment, a slightly more advanced version of continuous delivery,
    which we will cover in more detail.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通过架构良好的 CI/CD 流水线，企业可以迅速应对消费者需求和技术进步的新趋势。相比之下，采用传统开发策略的团队通常需要较长时间才能实施客户请求的变更或融入新技术。此外，当公司意识到需要转型时，消费者需求可能已经发生变化。这个问题通过
    DevOps 发布管理得到解决，因为它使用持续集成和持续部署，这是一种比持续交付略为高级的版本，我们将在后面更详细地讨论。
- en: What is a CI/CD pipeline?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 CI/CD 流水线？
- en: A CI/CD pipeline streamlines the process of automating software or infrastructure
    as code delivery, ensuring a smooth transition from source code to production
    deployment. Think of it as a sequence of necessary steps for code to be released.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 流水线简化了将软件或基础设施作为代码进行交付的过程，确保从源代码到生产部署的顺利过渡。可以将其视为代码发布的必要步骤序列。
- en: CI is an acronym for continuous integration, while CD is an acronym for continuous
    delivery or deployment. The concept of a pipeline involves automating the various
    stages of the delivery workflow, including build, test, delivery, and deployment.
    By automating and controlling each phase of the delivery process, all the advantages
    of using CI/CD pipelines are unlocked. This helps minimize human error and ensures
    consistency across each release.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: CI 是持续集成（Continuous Integration）的缩写，而 CD 是持续交付（Continuous Delivery）或持续部署（Continuous
    Deployment）的缩写。流水线的概念涉及自动化交付工作流的各个阶段，包括构建、测试、交付和部署。通过自动化和控制交付过程的每个阶段，CI/CD 流水线的所有优点得以释放。这有助于最小化人为错误，并确保每次发布的一致性。
- en: CI/CD pipelines are often configured as code, and as such are widely recognized
    by the term *pipeline as code*. In order to facilitate pipeline runs, it is common
    to use a CI server and its corresponding build agents. Depending on the product
    you are using, a build agent might be called a *runner*. Usually, build agents
    appear in the form of virtual machines and can be self-hosted and fully customized
    and require regular maintenance. Alternatively, if you are using a commercial
    SaaS product, you can use CI servers and build agents provided by the SaaS provider,
    but they may have limitations when it comes to customization and adding software
    or plugins.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 流水线通常作为代码进行配置，因此广泛被称为*流水线即代码*。为了方便流水线的运行，通常会使用 CI 服务器及其相应的构建代理。根据所使用的产品，构建代理可能被称为*runner*。通常，构建代理以虚拟机的形式出现，可以自托管、完全定制，并且需要定期维护。另一方面，如果你使用的是商业
    SaaS 产品，你可以使用 SaaS 提供商提供的 CI 服务器和构建代理，但在定制化以及添加软件或插件时可能会有一些限制。
- en: Containers can also be used to facilitate the creation of consistent build environments,
    reducing the need for maintaining static build agents. In this scenario, every
    stage of the CI/CD pipeline can run independently within a container tailored
    to its specific needs. Additionally, pipelines can take advantage of the various
    benefits provided by container orchestration, including immutability and scaling,
    as needed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 容器也可以用于促进创建一致的构建环境，减少维护静态构建代理的需求。在这种情况下，CI/CD 流水线的每个阶段都可以在针对其特定需求量身定制的容器中独立运行。此外，流水线还可以利用容器编排提供的各种优势，包括不可变性和按需扩展。
- en: Well-architected CI/CD pipeline infrastructure should be designed to accept
    parameters that produce repeatable outcomes in any number of environments. They
    are also adaptable, considering a scenario in which a consumer need exists but
    is not being met by existing DevOps solutions. In this scenario, it is possible
    to quickly identify the solution, conduct an analysis of it, develop it, and deploy
    it to the application environment in a relatively short time – all without interrupting
    the normal development flow of the application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 架构良好的 CI/CD 流水线基础设施应该设计为接受参数，能够在任意环境中产生可重复的结果。它们也具有适应性，考虑到存在消费者需求但现有的 DevOps
    解决方案未能满足的场景。在这种情况下，可以快速识别解决方案，进行分析、开发，并在相对较短的时间内将其部署到应用环境中——所有这些都不会中断应用的正常开发流程。
- en: Additionally, CI/CD allows the rapid deployment of even minor changes to the
    final product, in turn allowing faster response times to user requests. It not
    only addresses user concerns but also gives them insight into the design and creation
    process. Users will notice the product improving over time as updates are rolled
    out to address bugs and add new functionality. In contrast to more conventional
    methods, such as the waterfall model, where users aren’t involved until the very
    end of the development process, DevOps release management facilitates continuous
    feedback and refinement throughout a product’s life cycle.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，CI/CD 还允许即便是微小的变更也能迅速部署到最终产品中，从而加快了对用户请求的响应时间。它不仅解决了用户的关切，还让他们了解设计和创建过程。用户会注意到随着更新的推出，产品在不断改进，解决了
    bug 并添加了新功能。与更传统的方法（如瀑布模型）相比，后者直到开发过程的最后阶段才会让用户参与，DevOps 发布管理促进了整个产品生命周期中的持续反馈和完善。
- en: Different projects call for different levels of complexity and numbers of steps
    in the CI/CD pipeline. One potential pipeline might utilize a multi-stage deployment
    approach, wherein software is distributed as containers to a Kubernetes cluster
    spanning multiple cloud environments. In contrast, another pipeline may adopt
    a more straightforward approach, involving the construction, testing, and deployment
    of an app built as a `.jar` file running on a virtual machine and behind a proxy
    server. In this example, both of these pipelines share the same goal of automating
    the software delivery process.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的项目在 CI/CD 管道中需要不同的复杂度和步骤数。一个潜在的管道可能采用多阶段部署方法，其中软件作为容器分发到一个跨多个云环境的 Kubernetes
    集群中。相反，另一个管道可能采用更直接的方法，涉及构建、测试和部署一个作为 `.jar` 文件运行在虚拟机上的应用，并通过代理服务器进行访问。在这个示例中，这两个管道的目标都是自动化软件交付过程。
- en: In essence, the establishment of well-architected CI/CD pipeline infrastructure
    is essential to fully leverage all the benefits that come with choosing DevOps
    release management. In the next section, we’ll dive deeper into the subject of
    continuous integration. Topics will include the meaning of CI, selecting the right
    CI tool for your organization, example pipeline syntax, and feature comparisons.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，建立一个架构良好的 CI/CD 管道基础设施对于充分发挥 DevOps 发布管理所带来的所有好处至关重要。在下一部分中，我们将深入探讨持续集成的话题。内容将包括
    CI 的含义、如何为你的组织选择合适的 CI 工具、示例管道语法以及功能比较。
- en: What is continuous integration (CI)?
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是持续集成（CI）？
- en: Modern software development would not be possible without **continuous integration**
    (**CI**). The creation of modern software typically involves the collaboration
    of numerous developers who are geographically diverse, each of whom focuses on
    a particular component, feature, or aspect of a product. In order for you to bring
    a single, comprehensive product to release, it is necessary to merge all of these
    code changes. However, manually merging all of these changes is extremely impractical,
    and a painful chore, and when developers are working on many updates concurrently,
    there will inevitably be code changes that conflict with one another. However,
    continuous integration incentivizes developers to continuously push their code
    to the same **version control system** (**VCS**), providing a brilliant synergy
    that solves this problem. With the use of CI, you can continuously commit, build,
    and test your team’s code, a vital strategy as a DevOps release manager. If your
    team tests new code often, they will catch and fix defects before they get deeply
    ingrained in the software.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现代软件开发如果没有**持续集成**（**CI**）是无法实现的。现代软件的创建通常涉及来自不同地区的众多开发人员的协作，每个开发者专注于产品的某个特定组件、功能或方面。为了将一个完整的产品发布出来，必须将所有这些代码更改合并起来。然而，手动合并所有这些更改极其不实际，而且是一项痛苦的工作，当多个开发人员并行工作时，代码更改之间不可避免地会发生冲突。然而，持续集成鼓励开发人员持续将代码推送到同一个**版本控制系统**（**VCS**），提供了一种解决这一问题的绝妙协同效应。通过使用
    CI，你可以持续提交、构建和测试团队的代码，这对于 DevOps 发布经理来说是一项至关重要的策略。如果你的团队经常测试新代码，他们将在缺陷深入软件之前就能够捕获并修复这些缺陷。
- en: While there are no hard requirements for what tools can be used in CI, many
    teams prefer using continuous integration servers such as Jenkins, GitLab CI,
    or GitHub Actions. As fresh code changes get submitted, a continuous integration
    server oversees everything and acts as the arbitrator. Each time a developer commits
    their work in the repository, the CI server will automatically run a suite of
    tests and record the outcomes. The developer who made the change to the repository
    will typically get an email with the results shortly after making the change.
    This is crucial as it allows the developer to resolve potential issues in the
    shortest amount of time.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然对于CI可以使用哪些工具没有硬性要求，但许多团队倾向于使用如Jenkins、GitLab CI或GitHub Actions等持续集成服务器。随着新代码更改的提交，持续集成服务器会监督一切，并充当裁判。每当开发者在代码库中提交工作时，CI服务器会自动运行一系列测试并记录结果。做出更改的开发者通常会在提交后不久收到一封包含测试结果的电子邮件。这非常关键，因为它使得开发者能够在最短时间内解决潜在问题。
- en: After changes have been subjected to automated testing, the updated code can
    receive approval for new builds to be created along with additional testing in
    QA and pre-production environments. If all quality checks pass, the code can then
    be merged into the main branch and a new release is published. Unit tests and
    integration tests are usually performed as part of the continuous integration
    process in order to guarantee that code changes won’t end up resulting in stability
    issues. Additionally, CI is a great place to integrate **static application security
    testing** (**SAST**), moving application security near the beginning of the development
    cycle. All of this test automation makes sure that any changes made to the code
    are adequately vetted before being promoted to production.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在经过自动化测试后，更新的代码可以获得批准，创建新的构建并在质量保证（QA）和预生产环境中进行额外测试。如果所有质量检查都通过，代码可以合并到主分支，并发布新的版本。单元测试和集成测试通常作为持续集成过程的一部分进行，以确保代码更改不会导致稳定性问题。此外，持续集成是集成**静态应用安全测试**（**SAST**）的理想场所，将应用程序安全性提前到开发周期的开始阶段。所有这些测试自动化确保了对代码所做的任何更改在推广到生产之前都经过充分验证。
- en: Another benefit to increasing the commit frequency is that individual contributors
    can proactively detect and address merge conflicts at an earlier stage, either
    minimizing their occurrence or preventing them entirely. Furthermore, integrating
    smaller increments of work is an effective way to avoid committing a substantial
    number of changes all at once and encountering mysterious errors; instead, developers
    will have produced far smaller amounts of code, totaling fewer lines. This makes
    the task of identifying and resolving bugs and defects in your code significantly
    more efficient, reducing the time required from many hours to just a few minutes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 增加提交频率的另一个好处是，个别贡献者可以在早期阶段主动发现并解决合并冲突，减少其发生的频率，甚至完全避免它们。此外，集成更小的工作增量是避免一次性提交大量更改并遇到神秘错误的有效方式；开发者将会产出更少的代码，合并的行数也更少。这使得识别和解决代码中的bug和缺陷变得更加高效，将所需时间从几个小时减少到几分钟。
- en: Selecting the right CI tool for your operations
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为你的操作选择合适的CI工具
- en: There are numerous choices available to you when selecting an appropriate CI/CD
    tool for your team’s operations. It is pivotal to assess your own unique requirements
    and preferences because every tool has its own set of advantages and disadvantages
    that could impact your success. Whether you prefer open source options, artificial
    intelligence capabilities, on-premises solutions, peak scalability, or extensive
    customization features, you can find the right tool for your needs.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在为团队的操作选择合适的CI/CD工具时，你有很多选择。评估你独特的需求和偏好至关重要，因为每个工具都有其优缺点，这可能会影响你的成功。无论你偏好开源选项、人工智能功能、本地解决方案、峰值可扩展性，还是广泛的定制功能，你都可以找到适合你需求的工具。
- en: 'While evaluating various CI/CD tools for your team, you should consider the
    following core factors before making your final decision on which one to select:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在为你的团队评估各种CI/CD工具时，你应该考虑以下核心因素，以便做出最终选择：
- en: '**On-premises versus cloud-based**: It’s important to evaluate whether the
    tool provides cloud-based and/or on-premises (hosted) solutions and select the
    option that best suits your project requirements.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地部署与云部署**：评估工具是否提供基于云的和/或本地（托管）解决方案，并选择最适合你项目需求的选项。'
- en: '**Open source versus closed source**: Consider the compatibility of the CI/CD
    tool with open source projects and how well it aligns with your project’s objectives.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开源与闭源**：考虑CI/CD工具与开源项目的兼容性，并评估它与项目目标的契合度。'
- en: '**Testing integration**: It is advisable to select a CI/CD tool that has a
    user-friendly interface and a configuration that is easy to comprehend, so as
    to minimize the difficulties associated with setup.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试集成**：建议选择一个具有用户友好界面并且配置容易理解的CI/CD工具，以减少与设置相关的困难。'
- en: '**Ease of setup and configuration**: You should opt for a CI/CD tool with a
    user-friendly interface and easy-to-understand configuration, reducing setup complexities.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置和配置的简易性**：你应该选择一个具有用户友好界面且配置易于理解的CI/CD工具，以减少设置过程中的复杂性。'
- en: '**Build environment compatibility**: It’s important to consider the compatibility
    of the tool with your project’s environment and programming languages to streamline
    integration.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建环境兼容性**：考虑工具与项目环境和编程语言的兼容性，以简化集成过程。'
- en: '**Learning curve**: It is advisable to consider the learning curve that developers
    may face to facilitate the setup and configuration of their build and deployment
    workflows.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习曲线**：建议考虑开发人员在设置和配置构建及部署工作流时可能面临的学习曲线，以便更好地支持他们。'
- en: '**Paid plan features**: To cope with project growth, it is advisable to examine
    both existing and new features offered in paid plans (if any), including allocated
    daily builds, runtime minutes, quantity of users, and number of private repositories,
    just to name a few.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**付费计划功能**：为了应对项目的增长，建议检查付费计划（如果有）中现有和新提供的功能，包括分配的每日构建次数、运行时分钟数、用户数量以及私有仓库数量等。'
- en: '**Version control system compatibility**: Make sure that you verify whether
    the CI/CD tool can comfortably integrate with your preferred version control system
    or source control platform for efficient source code management and delivery.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本控制系统兼容性**：确保你验证CI/CD工具是否能够与您首选的版本控制系统或源代码管理平台顺利集成，从而实现高效的源代码管理和交付。'
- en: Let’s dive deeper into the top three industry-leading CI/CD tools and help you
    assess which one is right for your enterprise. To start with, Jenkins is a well-known
    CI server that has been around for a very long time and offers many plugins with
    features that newer competitors don’t. Another robust tool that integrates with
    GitHub repositories elegantly is GitLab CI. Don’t overlook GitHub Actions, which
    provides a straightforward and easy-to-understand workflow.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解三款行业领先的CI/CD工具，帮助你评估哪一款最适合你的企业。首先，Jenkins是一个非常著名的CI服务器，已经存在了很长时间，提供了许多插件，具有一些新竞争者所没有的功能。另一个与GitHub仓库优雅集成的强大工具是GitLab
    CI。别忘了GitHub Actions，它提供了一个简单易懂的工作流程。
- en: Jenkins
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Jenkins
- en: Jenkins is a well-known and highly customizable open source CI/CD tool capable
    of automating almost anything. Jenkins was developed using the Java programming
    language and is open source, released under the MIT license. The software offers
    a comprehensive range of features that streamline various tasks, including building,
    testing, deploying, integrating, and releasing software. The Jenkins Server (Master)
    software is compatible with Linux, macOS, Windows, and Unix. In addition to being
    installed through native installation packages, Jenkins can be run as a standalone
    Docker container or on any machine that has **Java Runtime Environment** (**JRE**)
    installed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins是一个知名且高度可定制的开源CI/CD工具，几乎可以自动化所有工作。Jenkins使用Java编程语言开发，并且是开源的，采用MIT许可证发布。该软件提供了一个全面的功能范围，可以简化多个任务，包括构建、测试、部署、集成和发布软件。Jenkins
    Server（主服务器）软件兼容Linux、macOS、Windows和Unix操作系统。除了通过本地安装包安装外，Jenkins还可以作为独立的Docker容器运行，或者在任何安装了**Java运行时环境**（**JRE**）的机器上运行。
- en: The Jenkins Master supervises and coordinates the entire build process, acting
    as an arbiter. It serves as the hub for configuration settings, job definitions,
    and metadata, giving it complete control. This is where any of a diverse range
    of plugins can be installed, expanding Jenkins’ features and capabilities, such
    as integrating with *Atlassian JIRA* or *SonarSource SonarQube*. In addition,
    the Jenkins Master provides a web-based interface that is easy to use, allowing
    users to interact with Jenkins, set up jobs, and keep track of build progress.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins Master负责监督和协调整个构建过程，充当仲裁者。它作为配置设置、作业定义和元数据的中心，拥有完全的控制权。在这里可以安装各种插件，扩展Jenkins的功能和能力，例如集成*Atlassian
    JIRA*或*SonarSource SonarQube*。此外，Jenkins Master提供了一个易于使用的基于Web的界面，用户可以与Jenkins互动，设置作业并跟踪构建进度。
- en: However, any number of Slave nodes serve as the diligent workers in the system.
    They carry out assigned tasks under the direct supervision of the Master. By distributing
    tasks to multiple Slaves, the build pipeline can be completed much faster through
    parallel processing. Furthermore, Slaves can be configured on different machines,
    including various Operating Systems and environments. Thanks to this versatility,
    Jenkins can meet a diverse range of build and testing needs.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，多个Slave节点充当系统中勤奋的工作者。在Master的直接监督下，它们执行分配的任务。通过将任务分配给多个Slave，可以通过并行处理更快地完成构建管道。此外，Slave可以在不同的机器上进行配置，包括各种操作系统和环境。得益于这种灵活性，Jenkins能够满足各种构建和测试需求。
- en: Additionally, the Jenkins team has developed a sub-project called Jenkins X,
    which focuses on effortlessly running a pipeline in Kubernetes with little to
    no extra work. Jenkins X seamlessly combines Helm, Jenkins CI/CD server, Kubernetes,
    and various other tools to provide a streamlined CI/CD pipeline with pre-established
    best practices, such as employing GitOps to manage environments.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Jenkins团队还开发了一个名为Jenkins X的子项目，它专注于在Kubernetes中轻松运行管道，几乎不需要额外的工作。Jenkins
    X无缝结合了Helm、Jenkins CI/CD服务器、Kubernetes以及其他多个工具，提供一个简化的CI/CD管道，采用了预设的最佳实践，例如使用GitOps来管理环境。
- en: Jenkins syntax example
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Jenkins语法示例
- en: 'Now, let’s examine an example of a Jenkins pipeline to get a practical understanding
    of its syntax and how it can be configured! In the `Jenkinsfile` file, a Docker
    container image is being built and the resulting artifact gets published to a
    designated Docker Registry:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过一个Jenkins管道的示例来实际理解它的语法以及如何配置！在`Jenkinsfile`文件中，正在构建一个Docker容器镜像，并将生成的工件发布到指定的Docker注册表：
- en: '![Figure 6.1: Example Jenkinsfile – pipeline configured to build a Docker image](img/B21803_06_01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1：示例Jenkinsfile – 配置构建Docker镜像的管道](img/B21803_06_01.jpg)'
- en: 'Figure 6.1: Example Jenkinsfile – pipeline configured to build a Docker image'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1：示例Jenkinsfile – 配置构建Docker镜像的管道
- en: GitLab CI
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GitLab CI
- en: Out of all the CI/CD tools available, GitLab CI/CD stands out as the latest
    and most highly regarded option. This product is a self-hosted continuous integration
    tool, and the community edition is completely free to use.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有可用的CI/CD工具中，GitLab CI/CD脱颖而出，成为最新且最受高度评价的选项。该产品是一个自托管的持续集成工具，社区版完全免费使用。
- en: It includes a range of features such as git repository management, issue tracking,
    code reviews, wikis, and activity feeds. Companies often choose to install GitLab
    CI/CD on-premises and connect it with their organization’s Active Directory and
    LDAP servers to ensure secure authorization and authentication. An obvious drawback
    of utilizing GitLab Community Edition is the absence of any form of customer support.
    If you encounter challenges or require assistance with a project, you are unable
    to submit tickets and request help in the same manner as you would with the other
    two versions, which are Premium and Ultimate.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 它包括一系列功能，如git仓库管理、问题追踪、代码评审、维基和活动流。公司通常选择将GitLab CI/CD安装在本地，并将其与组织的Active Directory和LDAP服务器连接，以确保安全的授权和认证。使用GitLab社区版的一个明显缺点是没有任何形式的客户支持。如果遇到问题或需要项目帮助，无法像Premium版和Ultimate版那样提交工单并请求帮助。
- en: Upgrading from the Community edition to either the Ultimate or Premium versions
    grants you access to customer support, along with numerous advantageous security
    features, such as two-factor authentication, advanced security scanning, and compliance
    auditing tools for your code. In addition, you will have access to various auxiliary
    tools including push rules, DORA metrics tracking, burndown charts, Security Scanning
    IDE integration, and **dynamic application security testing** (**DAST**) features.
    Moreover, you can guarantee that your projects consistently operate without incurring
    additional risk by utilizing sophisticated monitoring features, such as performance
    metrics and system health checks.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从社区版升级到 Ultimate 或 Premium 版本后，你将能够访问客户支持服务，并且可以使用许多有利的安全功能，例如双因素认证、先进的安全扫描以及代码合规性审计工具。此外，你还可以使用各种辅助工具，包括推送规则、DORA
    指标跟踪、燃尽图、安全扫描 IDE 集成和**动态应用安全测试**（**DAST**）功能。通过利用高级监控功能（如性能指标和系统健康检查），你还可以确保你的项目始终稳定运行，并避免额外的风险。
- en: The GitLab server is responsible for detecting trigger events that initiate
    one or more pipelines. When a new pipeline begins, the GitLab server determines
    which jobs (defined in your `.gitlab-ci.yml` file) should run, skipping some and
    queuing others, if necessary. These jobs are then assigned to available runners
    in the correct sequence.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 服务器负责检测触发事件，这些事件会启动一个或多个管道。当一个新的管道开始时，GitLab 服务器会决定哪些任务（在你的 `.gitlab-ci.yml`
    文件中定义）需要执行，并根据需要跳过某些任务或将它们排队。然后，这些任务将按正确的顺序分配给可用的 Runner。
- en: 'The GitLab architecture illustrated in the preceding figure is comprised of
    the following components:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 前述图中所示的 GitLab 架构包括以下组件：
- en: '**Commit**: A commit is a record of a change made in the files or code, like
    what you would find in a GitHub repository.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交（Commit）**：提交是对文件或代码所做更改的记录，就像你在 GitHub 仓库中看到的那样。'
- en: '**Jobs**: A job is an individual task that the GitLab pipeline needs to execute,
    such as deploying an application. Every task is assigned a name and includes a
    script. Every script is executed in sequential order, ensuring that each job is
    completed before moving on to the next one.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务（Jobs）**：任务是 GitLab 管道需要执行的单独任务，例如部署应用程序。每个任务都有一个名称，并包含一个脚本。每个脚本按顺序执行，确保每个任务在进行下一个任务之前都已经完成。'
- en: '**Stages**: A stage serves as a clear distinction between different tasks,
    signifying the progression of a pipeline through each step. This clarifies the
    order in which tasks should be executed. As an illustration, the stages could
    include test, build, and deploy.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阶段（Stages）**：阶段用于清晰地区分不同的任务，标志着管道在每个步骤中的进展。这有助于明确任务的执行顺序。例如，阶段可以包括测试、构建和部署。'
- en: '**Pipeline**: A pipeline is a comprehensive set of stages, with each stage
    consisting of one or more tasks. GitLab offers a variety of pipeline options,
    such as basic, merge, parent-child, and multi-project pipelines.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管道（Pipeline）**：管道是一组完整的阶段，每个阶段由一个或多个任务组成。GitLab 提供了多种管道选项，如基础管道、合并管道、父子管道和多项目管道。'
- en: '**Runners**: A runner is the active component responsible for executing the
    CI/CD pipeline. You have the option to set up self-hosted GitLab runners on-premises
    or utilize the runners provided by GitLab as part of their SaaS product on GitLab.com.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Runner**：Runner 是负责执行 CI/CD 管道的活动组件。你可以选择在本地设置自托管的 GitLab Runner，或者使用 GitLab
    提供的运行器，作为其 SaaS 产品的一部分，托管在 GitLab.com 上。'
- en: '**GitLab server**: The GitLab server handles the hosting and management of
    your pipeline configurations. You can set up your own GitLab server instance on-premises
    or use the SaaS version which is hosted on GitLab.com.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitLab 服务器**：GitLab 服务器负责托管和管理你的管道配置。你可以在本地设置自己的 GitLab 服务器实例，也可以使用托管在 GitLab.com
    上的 SaaS 版本。'
- en: GitLab CI syntax example
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: GitLab CI 语法示例
- en: 'Let’s view an example of a GitLab CI/CD pipeline to get a practical understanding
    of its syntax and how it can be configured! In the `.gitlab-ci.yml` file, a Docker
    container image is built and the resulting artifact gets published to a designated
    Docker Registry:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个 GitLab CI/CD 管道的示例，来实际了解它的语法以及如何进行配置！在 `.gitlab-ci.yml` 文件中，构建一个 Docker
    容器镜像，并将生成的工件发布到指定的 Docker Registry：
- en: '![Figure 6.2: Example GitLab gitlab-ci.yml file – pipeline configured to build
    a Docker image](img/B21803_06_02.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2：GitLab gitlab-ci.yml 文件示例 – 配置为构建 Docker 镜像的管道](img/B21803_06_02.jpg)'
- en: 'Figure 6.2: Example GitLab gitlab-ci.yml file – pipeline configured to build
    a Docker image'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2：示例 GitLab gitlab-ci.yml 文件 – 配置用于构建 Docker 镜像的流水线
- en: GitHub Actions
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GitHub Actions
- en: GitHub Actions is a tool used for continuous integration and continuous deployment
    as part of the GitHub flow. It can be utilized for integrating and deploying code
    changes to a third-party cloud application platform as well as testing, tracking,
    and managing code changes. GitHub Actions is compatible with various third-party
    CI/CD tools, the Docker container ecosystem, and other automation technologies.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 是一个用于持续集成和持续部署的工具，作为 GitHub 流程的一部分。它可以用于将代码更改集成并部署到第三方云应用平台，也可以用于测试、跟踪和管理代码更改。GitHub
    Actions 兼容各种第三方 CI/CD 工具、Docker 容器生态系统以及其他自动化技术。
- en: GitHub Actions seamlessly integrates automation into the software development
    life cycle on GitHub through event-driven triggers. These triggers are events
    that can be specified, ranging from creating a pull request to building a new
    branch in a repository and much more. GitHub Actions automations are managed through
    workflows that are `YAML` files located in the `.github/workflows` directory of
    a repository. These workflows define automated processes and are analogues in
    concept to a `Jenkinsfile` file in Jenkins or a `.gitlab-ci.yml` in GitLab CI/CD.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 通过事件驱动触发器无缝地将自动化集成到 GitHub 的软件开发生命周期中。这些触发器是可以指定的事件，范围从创建拉取请求到在代码库中构建新分支等多种操作。GitHub
    Actions 的自动化通过位于代码库 `.github/workflows` 目录中的 `YAML` 文件进行管理。这些工作流定义了自动化过程，其概念类似于
    Jenkins 中的 `Jenkinsfile` 文件或 GitLab CI/CD 中的 `.gitlab-ci.yml` 文件。
- en: 'Every workflow consists of several core concepts:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 每个工作流由几个核心概念组成：
- en: '**Events**: An event is a defined trigger that initiates a workflow. Developers
    can configure them to search for one or multiple triggers and then adjust them
    accordingly. Additionally, they can be configured to execute on specified code
    branches within a designated repository on GitHub.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件**：事件是启动工作流的定义触发器。开发者可以配置它们以搜索一个或多个触发器，然后根据需要进行调整。此外，事件还可以配置为在 GitHub 上指定代码库中的指定代码分支上执行。'
- en: '**Jobs**: A job consists of a series of sequential tasks executed on a single
    runner. Each task operates within its own virtual machine (VM) and runs concurrently
    with other tasks, unless declared otherwise.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**作业**：作业由一系列在单个运行器上执行的顺序任务组成。每个任务在自己的虚拟机（VM）中运行，并与其他任务并发执行，除非另有声明。'
- en: '**Steps**: A step is an independent operation that executes commands within
    a job. These can serve as either an action or a shell command. Every step in a
    job is executed on the same runner.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤**：步骤是一个独立的操作，用于在作业中执行命令。这些步骤可以是动作或 shell 命令。作业中的每个步骤都在同一个运行器上执行。'
- en: '**Actions**: An action refers to a command that is executed on a runner and
    serves as the fundamental component of GitHub Actions, from which it derives its
    name.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动作**：动作指的是在运行器上执行的命令，它是 GitHub Actions 的基本组成部分，GitHub Actions 也因此得名。'
- en: '**Runners**: A runner functions as a server for GitHub Actions. The program
    actively monitors available tasks, executes them concurrently, and provides updates
    on the progress, logs, and outcomes. Runners can be hosted either on GitHub or
    on a localized server that is self-hosted. GitHub Hosted runners utilize Ubuntu,
    Linux, Windows, and macOS as their underlying operating systems.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行器**：运行器作为 GitHub Actions 的服务器。程序积极监控可用任务，按并发方式执行它们，并提供关于进度、日志和结果的更新。运行器可以托管在
    GitHub 上，也可以托管在本地自建的服务器上。GitHub 托管的运行器使用 Ubuntu、Linux、Windows 和 macOS 作为底层操作系统。'
- en: The primary advantage of having a GitHub-native CI/CD tool is its simplicity.
    If you are already hosting a project on GitHub, you can utilize the built-in CI/CD
    tool because it fully integrates with your code repositories. CI/CD pipelines
    can be quite intricate, involving a wide array of tools for testing applications,
    integration tests, container platforms, and application platforms, among other
    components. GitHub Actions streamlines the whole process by offering frictionless
    integration with NodeJS and Docker. Notably, it enables you to quickly choose
    the desired dependency version and effortlessly connect your code to a desired
    environment and deployment platform of choice. Unlike other automation tools and
    features, GitHub Actions goes beyond the typical applications of testing, building,
    and deploying. Instead, it offers the flexibility to automate any webhook.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GitHub原生的CI/CD工具的主要优势在于其简单性。如果你已经在GitHub上托管项目，你可以利用内置的CI/CD工具，因为它与代码仓库完全集成。CI/CD管道可能相当复杂，涉及用于测试应用程序、集成测试、容器平台和应用平台等组件的多种工具。GitHub
    Actions通过提供与NodeJS和Docker的无缝集成，简化了整个过程。特别地，它使你能够快速选择所需的依赖版本，并轻松地将代码连接到所需的环境和部署平台。与其他自动化工具和功能不同，GitHub
    Actions不仅限于测试、构建和部署的典型应用。相反，它提供了自动化任何webhook的灵活性。
- en: GitHub Actions workflow syntax example
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: GitHub Actions工作流语法示例
- en: 'Now, let’s examine an example of a GitHub Actions pipeline to get a practical
    understanding of its syntax and how it can be configured! In the GitHub Actions
    `Workflow` file, a Docker container image is being built and the resulting artifact
    gets published to a designated Docker registry:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过一个GitHub Actions管道的示例来深入理解它的语法以及如何配置它！在GitHub Actions的`Workflow`文件中，正在构建一个Docker容器镜像，并将生成的工件发布到指定的Docker注册表：
- en: '![Figure 6.3: Example GitHub Actions workflow – pipeline configured to build
    a Docker image](img/B21803_06_03.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图6.3：GitHub Actions工作流示例——配置为构建Docker镜像的管道](img/B21803_06_03.jpg)'
- en: 'Figure 6.3: Example GitHub Actions workflow – pipeline configured to build
    a Docker image'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3：GitHub Actions工作流示例——配置为构建Docker镜像的管道
- en: Now that we have established a basic understanding of the differences in syntax
    between these three tools, let’s compare the features of all three CI tools.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对这三种工具的语法差异有了基本的了解，接下来让我们对这三种CI工具的功能进行比较。
- en: A side-by-side feature comparison of all three CI tools
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 三种CI工具的并排功能对比
- en: 'The following table provides a side-by-side comparison of the features and
    benefits offered by each of these three industry-leading CI tools: Jenkins, GitLab
    CI/CD, and GitHub Actions. The information presented is intended to help you evaluate
    which tool is the best choice for your operations based on your own unique requirements
    and preferences.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格提供了Jenkins、GitLab CI/CD和GitHub Actions这三种行业领先CI工具的功能和优点的并排对比。所提供的信息旨在帮助你根据自己的独特需求和偏好评估哪种工具最适合你的操作。
- en: '| **Feature** | **Jenkins** | **GitLab CI/CD** | **GitHub Actions** |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| **特性** | **Jenkins** | **GitLab CI/CD** | **GitHub Actions** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| On-premises (self-hosted) | Yes | Yes | Runners only |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 本地部署（自托管） | 是 | 是 | 仅限Runner |'
- en: '| Cloud-based | No | Yes | Yes |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 基于云 | 否 | 是 | 是 |'
- en: '| Open source | Yes | Yes | No |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 开源 | 是 | 是 | 否 |'
- en: '| Closed source | No | Yes | Yes |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| 闭源 | 否 | 是 | 是 |'
- en: '| Testing integration | Yes | Yes | Yes |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 测试集成 | 是 | 是 | 是 |'
- en: '| Ease of setup and configuration | Difficult | Moderate | Easy |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 安装和配置简易性 | 困难 | 中等 | 容易 |'
- en: '| Build environment compatibility | Linux, Windows, macOS, Unix | Linux, Windows,
    macOS | Cloud SaaS |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 构建环境兼容性 | Linux, Windows, macOS, Unix | Linux, Windows, macOS | Cloud SaaS
    |'
- en: '| Language support | Any contemporary language | C, C++, C#, Go, Java, JavaScript,
    PHP, Python, Ruby, Scala, TypeScript, and others | C, C++, C#, Java, JavaScript,
    PHP,Python, Ruby, Scala, and TypeScript |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 语言支持 | 任何现代语言 | C, C++, C#, Go, Java, JavaScript, PHP, Python, Ruby, Scala,
    TypeScript等 | C, C++, C#, Java, JavaScript, PHP, Python, Ruby, Scala, TypeScript
    |'
- en: '| Learning curve | Difficult | Moderate | Easy |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 学习曲线 | 困难 | 中等 | 容易 |'
- en: '| Paid plan features | No | Yes | Yes |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 付费计划功能 | 否 | 是 | 是 |'
- en: '| VCS compatibility | GitMercurial (hg)Subversion (svn)Perforce (p4)ClearCaseMicrosoft
    TFS | Git | Git |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| VCS兼容性 | GitMercurial (hg)Subversion (svn)Perforce (p4)ClearCaseMicrosoft
    TFS | Git | Git |'
- en: 'Table 6.1: Feature comparison of Jenkins, GitLab, and GitHub Actions'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 表6.1：Jenkins、GitLab和GitHub Actions的功能对比
- en: Code Integration, automated builds, and integration testing are the three pillars
    of continuous integration. The ultimate objective of the continuous integration
    process is to generate a deployable artifact. This concludes our examination of
    continuous integration and CI tools. In the next section, we’ll discuss the counterpart
    to continuous integration, continuous delivery.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 代码集成、自动化构建和集成测试是持续集成的三大支柱。持续集成过程的最终目标是生成一个可部署的工件。这标志着我们对持续集成及其工具的探讨结束。在下一部分，我们将讨论持续集成的对立面——持续交付。
- en: What is continuous delivery (CD)?
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是持续交付（CD）？
- en: '**Continuous delivery** (**CD**) refers to the process of automatically preparing
    code changes for release and deployment into a production environment. Continuous
    delivery is an essential component of DevOps release management and is often used
    in concert with continuous integration (CI).'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续交付**（**CD**）指的是自动准备代码变更以发布并部署到生产环境中的过程。持续交付是DevOps发布管理的重要组成部分，通常与持续集成（CI）一起使用。'
- en: Even at the tail end of the **software development life cycle** (**SDLC**),
    developers can successfully deploy most product code versions with the help of
    CI/CD pipelines, along with a **version control system** (**VCS**). Continuous
    delivery enables programmers to automatically test code changes using multiple
    lenses (not just unit testing) before releasing them to customers. In this way,
    developers can have faith in the quality of the build artifacts they’re deploying,
    as they will have been subjected to rigorous testing and found to be in compliance
    with industry standards. API testing, load testing, functional and UI testing,
    integration testing, compliance testing, and others are all examples of appropriate
    types of testing that you would normally run in this phase.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在**软件开发生命周期**（**SDLC**）的最后阶段，开发人员也能借助CI/CD流水线和**版本控制系统**（**VCS**）成功地部署大多数产品代码版本。持续交付使程序员能够在将代码发布给客户之前，使用多种视角（不仅仅是单元测试）自动测试代码变更。通过这种方式，开发人员可以对他们正在部署的构建工件的质量有信心，因为这些工件已接受严格的测试，并符合行业标准。API测试、负载测试、功能和UI测试、集成测试、合规性测试等，都是你通常会在此阶段执行的合适测试类型。
- en: As a result, software developers are empowered to rapidly evaluate for the existence
    of bugs and defects before a new software release can be permitted access to production
    environments. It is notable to mention that continuous delivery often includes
    the execution of multi-stage deployments, whereby artifacts undergo transitions
    across different stages, including QA, staging, pre-production, and ultimately
    production. Additional testing and verification steps are usually performed at
    each stage to ensure the reliability and legitimacy of the delivered artifacts.
    Post-release validation procedures and deployment monitoring can (and should)
    be implemented to further bolster the software release’s dependability and resilience.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，软件开发人员能够在新软件发布之前快速评估是否存在漏洞和缺陷，以便允许其访问生产环境。值得注意的是，持续交付通常包括多阶段部署的执行，其中工件会经历不同阶段的过渡，包括QA、预发布、预生产，最终到生产。通常在每个阶段都会进行额外的测试和验证步骤，以确保交付工件的可靠性和合法性。发布后的验证程序和部署监控可以（并且应该）被实施，以进一步增强软件发布的可靠性和弹性。
- en: Continuous delivery not only assumes the responsibilities of deploying applications,
    but also in making configuration modifications, monitoring application performance,
    and ensuring its ongoing maintenance. This is where building **disaster recovery**
    (**DR**) into the pipeline design becomes key. That is because continuous delivery
    has the potential to expand its functional scope by including operational duties
    that may involve tasks such as infrastructure management. These tasks can be achieved
    using the **infrastructure as code** (**IaC**) and **configuration as code** (**CaC**)
    tools that were made especially for this purpose.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付不仅承担了部署应用程序的责任，还包括进行配置修改、监控应用程序性能，并确保其持续维护。这就是为什么在流水线设计中构建**灾难恢复**（**DR**）变得至关重要。因为持续交付有潜力通过包含如基础设施管理等运营职责，扩展其功能范围。这些任务可以通过专为此目的设计的**基础设施即代码**（**IaC**）和**配置即代码**（**CaC**）工具来实现。
- en: What is infrastructure as code (IaC)?
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是基础设施即代码（IaC）？
- en: In the field of technology, the term infrastructure has typically been associated
    with physical components such as rackmount servers, networking systems, and data
    centers. However, due to the proliferation of the cloud, this infrastructure has
    evolved beyond its physical constraints, transforming into virtual services and
    environments that can be rapidly created, modified, and decommissioned. Managing
    and provisioning these dynamic resources efficiently and reliably has become a
    significant challenge in this new era. This is where the notion of IaC becomes
    relevant. IaC tools have become crucial in tackling these challenges by enabling
    the management of infrastructure through code rather than manual processes. This
    method simplifies the act of building and maintaining virtual IT infrastructure,
    improves consistency, minimizes the risk of mistakes, and enables effortless automation
    and scalability.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在技术领域，基础设施一词通常与物理组件相关，如机架服务器、网络系统和数据中心。然而，随着云计算的普及，基础设施已经超越了其物理限制，转变为可以快速创建、修改和废弃的虚拟服务和环境。在这个新时代，如何高效、可靠地管理和提供这些动态资源，已经成为一个重大挑战。这时，基础设施即代码（IaC）概念变得尤为重要。IaC工具已成为解决这些挑战的关键，通过允许通过代码管理基础设施，而不是依赖手动过程。这种方法简化了构建和维护虚拟IT基础设施的过程，提高了一致性，最小化了错误风险，并实现了轻松的自动化和可扩展性。
- en: 'It is for this reason that understanding the concept of idempotence is crucial
    in the context of IaC. When an IaC deployment is executed, it ensures that the
    target environment is consistently configured, regardless of its initial state.
    This is to say, idempotency can be achieved through two methods: automatically
    configuring the current target or discarding it and creating a new target environment
    from scratch.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 正因为如此，理解幂等性概念在IaC中的重要性。在执行IaC部署时，它确保目标环境的配置始终一致，无论其初始状态如何。也就是说，幂等性可以通过两种方法实现：自动配置当前目标，或者丢弃它并从头开始创建一个新的目标环境。
- en: Idempotency
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 幂等性
- en: Idempotency in data pipelines refers to the ability to execute the same operation
    multiple times without changing the result beyond the initial application. This
    property ensures consistency and reliability, especially in distributed systems.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 数据管道中的幂等性指的是能够多次执行相同操作，而结果不会超出初始应用的变化。这个特性确保了在分布式系统中的一致性和可靠性。
- en: Notably, IaC has emerged as the preeminent solution to address the issue of
    configuration drift, both in release pipelines and virtualized deployment environments.
    Crucially, in the absence of IaC, teams would be required to manually manage environment
    and deployment configurations individually. When operating this way, over time,
    every environment inevitably develops its own distinct configuration that cannot
    be replicated automatically. Consequently, deployment issues can arise due to
    inconsistencies in different environments, such as dev, QA, staging, and production.
    Due to the reliance on manual processes, infrastructure administration and maintenance
    can be challenging, prone to errors, and difficult to monitor.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，基础设施即代码（IaC）已成为解决配置漂移问题的主要解决方案，无论是在发布流水线还是虚拟化部署环境中。至关重要的是，如果没有IaC，团队将需要手动分别管理环境和部署配置。以这种方式操作时，随着时间的推移，每个环境不可避免地会发展出自己独特的配置，而这些配置无法自动复制。因此，由于不同环境（如开发、质量保证、预发布和生产环境）之间的不一致，可能会导致部署问题。由于依赖手动过程，基础设施管理和维护可能会变得具有挑战性，容易出错，并且难以监控。
- en: Configuration drift
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 配置漂移
- en: The gradual alteration of an IT system’s configurations over time is known as
    configuration drift. Drift most often happens unintentionally when modifications
    are made to software, hardware, or operating systems without proper documentation
    or approval. It can affect the safety and efficiency of a part or the whole of
    a system. Application failure, downtime, extended development life cycles, spikes
    in IT tickets, security vulnerabilities, audit fines, compliance failures, and
    more are all direct results of configuration drift.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 信息技术系统配置随时间逐渐变化的现象被称为配置漂移。漂移通常是在没有适当文档或批准的情况下对软件、硬件或操作系统进行修改时无意发生的。它可能会影响系统某一部分或整个系统的安全性和效率。应用程序故障、停机时间、开发周期延长、IT服务请求激增、安全漏洞、审计罚款、合规性失败等，都是配置漂移的直接后果。
- en: Conversely, infrastructure as code leverages the advantages of the DevOps methodology
    and versioning to efficiently define and deploy various components of infrastructure.
    This includes networks, virtual machines, load balancers, DNS, serverless deployments,
    identity access management, and much more. You can think of IaC as software-defined
    infrastructure. Similarly to how the same source code consistently produces binaries
    with identical capabilities, an IaC model consistently generates the same environment
    with each deployment. IaC plays a crucial role in contemporary DevOps practices
    and is an integral part of continuous delivery. By utilizing IaC, DevOps teams
    can collaborate seamlessly using a standardized set of methods and resources to
    efficiently deploy applications and their corresponding infrastructure on a large
    scale, ensuring speed and reliability. Perhaps best of all, IaC files can be stored
    in Git and are easily auditable.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，基础设施即代码（IaC）利用了 DevOps 方法论和版本控制的优势，能够高效地定义和部署各种基础设施组件。这包括网络、虚拟机、负载均衡器、DNS、无服务器部署、身份访问管理等。你可以将
    IaC 理解为软件定义的基础设施。类似于相同的源代码始终生成具有相同功能的二进制文件，IaC 模型也始终生成相同的环境进行每次部署。IaC 在当代 DevOps
    实践中起着至关重要的作用，并且是持续交付的重要组成部分。通过使用 IaC，DevOps 团队能够通过标准化的方式和资源无缝协作，高效地在大规模上部署应用程序及其相关基础设施，确保速度和可靠性。也许最好的地方是，IaC
    文件可以存储在 Git 中，且易于审计。
- en: To accomplish this, IaC streamlines the configuration process and ensures uniformity
    by using declarative code in formats like YAML, JSON, and **HashiCorp configuration
    language** (**HCL**) to represent desired environment states. Release pipelines
    consume IaC files and apply the environment descriptions and versioned configuration
    models to set up target environments that are highly reliable and eliminate the
    runtime problems that arise from configuration inconsistencies or missing dependencies.
    Crucially, this allows the team to make edits to the source code rather than the
    target directly.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一目标，IaC 精简了配置过程，并通过使用声明性代码（如 YAML、JSON 和 **HashiCorp 配置语言**（**HCL**））表示期望的环境状态，确保了一致性。发布流水线消耗
    IaC 文件，并应用环境描述和版本化配置模型，设置高度可靠的目标环境，从而消除了由配置不一致或缺少依赖关系引发的运行时问题。关键在于，这使得团队可以对源代码进行编辑，而不是直接对目标进行修改。
- en: 'There are several popular tools that have been developed to automate these
    kinds of tasks. In the following subsections, we’ll take a detailed look at four
    of the most common ones: Terraform, Pulumi, Ansible, and Puppet.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个流行的工具已经被开发出来，用于自动化这些任务。在接下来的子章节中，我们将详细介绍四个最常见的工具：Terraform、Pulumi、Ansible
    和 Puppet。
- en: Terraform
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Terraform
- en: '**Terraform** is a powerful infrastructure-as-code tool that allows you to
    define cloud and on-prem resources using easily comprehended configuration files
    written in HCL. These files can be versioned, reused, and shared, making it a
    convenient choice for managing your infrastructure. You can apply a streamlined
    workflow to accurately establish and control your infrastructure at every stage
    of its life cycle.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**Terraform** 是一个强大的基础设施即代码工具，允许你使用易于理解的 HCL 配置文件定义云端和本地资源。这些文件可以进行版本控制、重用和共享，使其成为管理基础设施的便捷选择。你可以应用精简的工作流程，准确地建立并控制基础设施在其生命周期的每个阶段。'
- en: Terraform has been designed to manage a wide range of components, from low-level
    ones such as computer, storage, and networking resources, to higher-level ones
    such as DNS entries, Kubernetes clusters, and SaaS features. Terraform seamlessly
    integrates with popular continuous integration and deployment systems like GitLab,
    GitHub Actions, and Jenkins. With this solution, you can optimize the entire process
    of deploying and managing your infrastructure, rapidly advancing from code to
    production.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 被设计用于管理各种组件，从低级别的计算、存储和网络资源，到高级别的 DNS 条目、Kubernetes 集群和 SaaS 特性。Terraform
    无缝集成了流行的持续集成和持续部署系统，如 GitLab、GitHub Actions 和 Jenkins。借助这个解决方案，你可以优化部署和管理基础设施的整个过程，快速从代码推向生产环境。
- en: Terraform utilizes a plugin-based architecture to seamlessly interface with
    various cloud providers, including AWS, Google Cloud, and Azure. Every provider
    comes with a unique collection of plugins that enable Terraform to effectively
    handle its resources. Terraform processes the configuration files written in HCL
    and generates a dependency graph of the resources that require creation or modification.
    It then proceeds to execute a plan to create or modify the necessary resources
    to achieve the intended state. Terraform includes a state file that maintains
    the current state of your infrastructure.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 采用基于插件的架构，与各种云提供商（包括 AWS、Google Cloud 和 Azure）无缝对接。每个提供商都包含一组独特的插件，使
    Terraform 能够有效地处理其资源。Terraform 处理用 HCL 编写的配置文件，并生成一个资源的依赖关系图，标识需要创建或修改的资源。然后，它会执行一个计划来创建或修改必要的资源，以实现预期的状态。Terraform
    包括一个状态文件，用于保持当前基础设施的状态。
- en: 'The Terraform workflow is incredibly straightforward, with just three simple
    steps to effectively manage any kind of infrastructure: write, plan, apply. One
    of the simplest workflows for managing any kind of infrastructure is Terraform’s
    three-step process. It allows users to customize the workflow according to their
    specific requirements and implementation style. To illustrate how Terraform works,
    let’s examine a sample Terraform plan that can be used to create an EC2 instance
    in AWS:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 的工作流极其简单，只有三个步骤就能有效管理任何类型的基础设施：写、计划、应用。Terraform 的三步流程是管理任何类型基础设施的最简单工作流之一。它允许用户根据自己的具体需求和实施风格定制工作流。为了说明
    Terraform 的工作原理，让我们看看一个示例 Terraform 计划，该计划可用于在 AWS 中创建一个 EC2 实例：
- en: '![Figure 6.4: Example Terraform plan – configured to provision an AWS EC2 instance](img/B21803_06_04.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4: 示例 Terraform 计划 - 配置以提供 AWS EC2 实例](img/B21803_06_04.jpg)'
- en: 'Figure 6.4: Example Terraform plan – configured to provision an AWS EC2 instance'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '图 6.4: 示例 Terraform 计划 - 配置以提供 AWS EC2 实例'
- en: Pulumi
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pulumi
- en: '**Pulumi** is a cutting-edge IaC platform. It utilizes popular programming
    languages such as TypeScript, JavaScript, Python, Go, .NET, Java, and markup languages
    like YAML, along with their respective ecosystems, to seamlessly interact with
    cloud resources. Pulumi’s comprehensive platform seamlessly integrates a downloadable
    CLI, runtime, libraries, and a hosted service to deploy virtual infrastructure.
    This flexible combination allows for efficient provisioning, updating, and management
    of cloud infrastructure.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pulumi** 是一个前沿的基础设施即代码（IaC）平台。它利用流行的编程语言，如 TypeScript、JavaScript、Python、Go、.NET、Java，以及标记语言如
    YAML，并结合它们各自的生态系统，与云资源无缝互动。Pulumi 的综合平台无缝集成了可下载的 CLI、运行时、库和托管服务，以便部署虚拟基础设施。这种灵活的组合可以有效地进行云基础设施的配置、更新和管理。'
- en: Pulumi programs, written in popular programming languages, outline the composition
    of your cloud infrastructure. When adding new infrastructure to your program,
    you simply assign resource objects with properties that match the desired state
    of your infrastructure. These properties can be utilized to manage dependencies
    between resources and can be exported beyond the stack, if required.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 用流行编程语言编写的 Pulumi 程序概述了云基础设施的组成。添加新基础设施时，您只需将资源对象分配为符合基础设施所需状态的属性。这些属性可以用来管理资源之间的依赖关系，并且如果需要，能够导出到堆栈之外。
- en: 'The Pulumi platform is made up of various components:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Pulumi 平台由多个组件组成：
- en: '**Pulumi software development kit** (**SDK**): This offers bindings for every
    resource type that can be managed by the provider. This resource equips users
    with the essential tools and libraries to effectively define and oversee cloud
    resources across various providers and platforms.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pulumi 软件开发工具包**（**SDK**）：它为每种资源类型提供绑定，可以由提供商管理。该资源为用户提供了必要的工具和库，以便有效地定义和管理跨不同提供商和平台的云资源。'
- en: '**Command-line interface** (**CLI**): This allows you to deploy updates to
    cloud applications and infrastructure. It maintains a record of team updates,
    including the contributors and timestamps.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令行界面**（**CLI**）：它允许您部署云应用程序和基础设施的更新。它还记录了团队的更新，包括贡献者和时间戳。'
- en: '**Deployment engine**: The deployment engine calculates the necessary operations
    to align your infrastructure’s current state with the desired state specified
    by your program.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署引擎**：部署引擎计算出将您的基础设施当前状态与程序指定的目标状态对齐所需的操作。'
- en: Programs are stored in a project, which is a directory that holds the program’s
    source code and instructions on how to execute it. Once your program is complete,
    you can execute the `Pulumi up` command using the Pulumi CLI from your project
    directory. This command allows you to create a separate and customizable instance
    of your program, referred to as a stack. Stacks function as various deployment
    environments utilized for testing and implementing application updates. As an
    example, you can create and test separate development, staging, and production
    stacks.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 程序存储在项目中，项目是一个包含程序源代码及执行指令的目录。完成程序后，你可以从项目目录使用Pulumi CLI执行`Pulumi up`命令。该命令允许你创建一个独立且可定制的程序实例，称为堆栈。堆栈作为用于测试和实现应用程序更新的各种部署环境。例如，你可以创建并测试独立的开发、暂存和生产堆栈。
- en: Here’s an example program that demonstrates the concepts. It creates an AWS
    EC2 security group called `web-sg` with one ingress rule and a `t2.micro-sized`
    EC2 instance that uses that security group. The EC2 resource needs the ID of the
    security group to utilize it. Pulumi facilitates this by utilizing the output
    property name on the security group resource. Pulumi has a deep understanding
    of resource dependencies, allowing it to optimize parallelism and maintain the
    correct order when a stack is created.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个演示概念的示例程序。它创建了一个名为`web-sg`的AWS EC2安全组，包含一个入口规则，并创建一个使用该安全组的`t2.micro`大小的EC2实例。EC2资源需要安全组的ID来使用它。Pulumi通过使用安全组资源上的输出属性名称来实现这一点。Pulumi深入理解资源依赖关系，能够优化并行处理，并在创建堆栈时保持正确的顺序。
- en: Finally, the IP address and DNS name of the server are exported as stack outputs
    for easy access through a CLI command or by another stack.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，服务器的IP地址和DNS名称作为堆栈输出导出，便于通过CLI命令或其他堆栈轻松访问。
- en: '![Figure 6.5: Example Pulumi code – configured to provision an AWS EC2 instance](img/B21803_06_05.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5：示例Pulumi代码 – 配置为提供AWS EC2实例](img/B21803_06_05.jpg)'
- en: 'Figure 6.5: Example Pulumi code – configured to provision an AWS EC2 instance'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5：示例Pulumi代码 – 配置为提供AWS EC2实例
- en: Ansible
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ansible
- en: '**Ansible** is an open source configuration management tool that offers a streamlined
    server automation framework using YAML definitions. Ansible has gained immense
    popularity as a configuration management tool due to its simplified infrastructure
    requirements and user-friendly syntax.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ansible**是一个开源配置管理工具，提供了一个简化的服务器自动化框架，使用YAML定义。由于其简化的基础设施需求和用户友好的语法，Ansible作为一个配置管理工具获得了极大的普及。'
- en: Unlike other tools in its category, such as Chef or Puppet, Ansible does not
    need any specialized software (agents) to be installed on remote nodes. A control
    machine is configured with the Ansible software, enabling it to communicate with
    the nodes through standard SSH protocols, and Python is enlisted to execute the
    remote instructions.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 与其类别中的其他工具（如Chef或Puppet）不同，Ansible不需要在远程节点上安装任何专用软件（代理）。控制机器配置了Ansible软件，使其能够通过标准SSH协议与节点通信，Python被用于执行远程指令。
- en: A task is the smallest unit of action you can automate using an Ansible playbook.
    Playbooks typically contain a series of tasks that serve a goal, such as setting
    up a web server or deploying an application to remote environments. Ansible executes
    tasks in the same order they are defined inside a playbook. Before automating
    a procedure, such as setting up a LAMP server (Linux, Apache, MySQL, PHP), you’ll
    need to assess which manual steps are necessary and the order in which they must
    be completed to get everything done. You’ll then be able to determine which tasks
    you’ll need and which modules you can use to reach your goals in fewer steps.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 任务是你可以使用Ansible剧本自动化的最小操作单元。剧本通常包含一系列任务，服务于一个目标，例如设置Web服务器或将应用程序部署到远程环境中。Ansible按剧本中定义的顺序执行任务。在自动化某个过程之前，例如设置LAMP服务器（Linux、Apache、MySQL、PHP），你需要评估哪些手动步骤是必要的，以及它们完成的顺序。然后，你可以确定需要哪些任务以及可以使用哪些模块在更少的步骤中实现目标。
- en: Furthermore, Ansible offers a comprehensive range of pre-built modules that
    streamline the process of automating routine server operations. These modules
    cover a wide array of tasks, including package installation, user management,
    file manipulation, permission handling, and service management.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Ansible提供了一系列预构建的模块，简化了自动化常规服务器操作的过程。这些模块涵盖了广泛的任务，包括包安装、用户管理、文件操作、权限处理和服务管理。
- en: 'To illustrate how Ansible works, let’s examine a sample Ansible play that can
    be used to create an EC2 instance in AWS:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明 Ansible 如何工作，让我们看一个示例 Ansible 剧本，它可以用于在 AWS 中创建一个 EC2 实例：
- en: '![Figure 6.6: Example Ansible play – configured to provision an AWS EC2 instance](img/B21803_06_06.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图6.6：示例 Ansible 剧本 – 配置为提供 AWS EC2 实例](img/B21803_06_06.jpg)'
- en: 'Figure 6.6: Example Ansible play – configured to provision an AWS EC2 instance'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6：示例 Ansible 剧本 – 配置为提供 AWS EC2 实例
- en: Puppet
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Puppet
- en: '**Puppet** is a configuration management tool that utilizes its own declarative
    language for describing infrastructure state. Puppet’s language is designed to
    efficiently handle every life cycle stage of IT infrastructure. This includes
    tasks such as provisioning, patching, configuration, and management of operating
    systems and application components in both data centers and cloud infrastructures.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**Puppet** 是一个配置管理工具，利用其自身的声明性语言来描述基础设施的状态。Puppet 的语言旨在高效地处理 IT 基础设施的每个生命周期阶段，包括任务如供应、修补、配置和操作系统与应用组件的管理，适用于数据中心和云基础设施。'
- en: Puppet is specifically designed to handle the configuration of Unix-like and
    Microsoft Windows systems. To accomplish this, a user assigns system resources
    and their state, utilizing either Puppet’s declarative language or a Ruby **domain-specific
    language** (**DSL**). In doing so, the infrastructure configurations get stored
    in configuration files referred to as Puppet manifests. When executed, the Puppet
    utility will compile the Puppet manifests into a system-specific catalog that
    includes resources and their dependencies. This catalog can then be applied to
    the target systems, and the response from Puppet’s actions is reported to the
    user.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 专门设计用于处理类 Unix 系统和 Microsoft Windows 系统的配置。为此，用户分配系统资源及其状态，使用 Puppet
    的声明性语言或 Ruby **领域特定语言** (**DSL**)。通过这种方式，基础设施配置存储在被称为 Puppet 清单的配置文件中。执行时，Puppet
    工具会将 Puppet 清单编译成一个特定于系统的目录，其中包含资源及其依赖项。然后可以将该目录应用到目标系统，并将 Puppet 执行的结果报告给用户。
- en: Puppet typically adheres to a client-server architecture. In this case, the
    client is referred to as an agent, while the server is commonly referred to as
    the master. Additionally, it can function as a standalone application that can
    be executed from the command line, making it convenient for testing and basic
    configuration purposes. Puppet Server is usually installed on multiple servers,
    while Puppet Agent gets installed on all of the machines that need to be managed.
    In this way, Puppet agents communicate with the server to retrieve configuration
    instructions so that they can be deployed. The agent proceeds to implement the
    configuration on the targeted systems and promptly sends a comprehensive status
    report to the server. Notably, machines have the capability to run the Puppet
    agent as a daemon, which can be scheduled to run periodically as a Cron job or
    can be manually executed as required.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 通常遵循客户端-服务器架构。在这种情况下，客户端被称为代理（agent），而服务器通常被称为主控（master）。此外，它也可以作为一个独立的应用程序，从命令行执行，方便进行测试和基本配置。Puppet
    Server 通常安装在多台服务器上，而 Puppet Agent 则安装在所有需要管理的机器上。通过这种方式，Puppet 代理与服务器通信以获取配置指令，然后进行部署。代理会在目标系统上实现配置，并及时向服务器发送详细的状态报告。值得注意的是，机器能够作为守护进程（daemon）运行
    Puppet 代理，这可以定期安排为 Cron 作业运行，或者根据需要手动执行。
- en: 'To illustrate how Puppet works, let’s examine a sample Puppet manifest that
    can be used to create an EC2 instance in AWS:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明 Puppet 如何工作，让我们看一个示例 Puppet 清单，它可以用于在 AWS 中创建一个 EC2 实例：
- en: '![Figure 6.7: Example Ansible play – configured to provision an AWS EC2 instance](img/B21803_06_07.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图6.7：示例 Ansible 剧本 – 配置为提供 AWS EC2 实例](img/B21803_06_07.jpg)'
- en: 'Figure 6.7: Example Ansible play – configured to provision an AWS EC2 instance'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7：示例 Ansible 剧本 – 配置为提供 AWS EC2 实例
- en: What is the difference between infrastructure as code (IaC) and configuration
    as code (CaC)?
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基础设施即代码（IaC）与配置即代码（CaC）之间有什么区别？
- en: Although there are similarities between IaC and CaC, they also have notable
    differences. As asserted previously, IaC is predominantly used for deploying virtual
    infrastructure, including server instances, storage devices, and networking components,
    as well as any additional resources and permissions needed. In contrast, configuration
    as code tools follow up on this by configuring and customizing operating systems,
    application configurations, and monitoring devices after the infrastructure has
    been generated using IaC tooling. This activity is used to automate the creation
    of computing systems precisely tailored to meet the specific requirements and
    objectives of a client or business. These two types of automation tools have unique
    strengths that make them suitable for specific use cases or when used together.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管IaC和CaC之间存在相似之处，但它们也有显著的差异。如前所述，IaC主要用于部署虚拟基础设施，包括服务器实例、存储设备和网络组件，以及任何额外的资源和权限。相比之下，作为代码的配置工具则在此基础上跟进，配置和定制操作系统、应用程序配置以及在使用IaC工具生成基础设施后监控设备。这项活动用于自动创建精确符合客户或业务特定需求和目标的计算系统。这两种自动化工具各具独特优势，适合在特定用例中使用，或者一起使用。
- en: To help you understand the difference, here is an analogy. Infrastructure as
    code can be thought of as using tools to construct an office building, while configuration
    as code is a set of tools used to furnish the office building with the equipment
    and resources that a business needs to actually get work done.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助你理解其差异，这里有一个类比。基础设施即代码可以看作是使用工具来建造一座办公大楼，而配置即代码则是一套用于为办公大楼配备设备和资源的工具，这些设备和资源是企业完成实际工作的必需品。
- en: Notably, when integrating cloud-based deployments, software developers have
    the ability to easily and affordably create multiple testing environments and
    iterate them. Historically, when working in on-premises environments, it was much
    more difficult to dynamically create test environments, but this is no longer
    the case. Cleverly, computer hardware manufacturers, such as HP, Dell, and SuperMircro,
    have made many improvements to their product designs that modernize the on-prem
    experience. These days, most rack-mount servers have APIs embedded into their
    firmware with native integrations for the commonly used IaC and CaC tools on the
    market. This gives on-premises hardware similar functionality to their cloud-based
    competitors, enabling them to remain relevant in a competitive landscape.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在集成基于云的部署时，软件开发人员可以轻松且经济实惠地创建多个测试环境并对其进行迭代。历史上，在本地部署环境中工作时，动态创建测试环境要困难得多，但现在这种情况已经不复存在。巧妙的是，计算机硬件制造商，如HP、Dell和SuperMicro，已经在其产品设计上做出了许多改进，使本地体验现代化。如今，大多数机架式服务器的固件中嵌入了API，并与市场上常用的IaC和CaC工具进行了本地集成。这使得本地硬件具备了类似于其云竞争对手的功能，使其能够在竞争激烈的市场中保持相关性。
- en: The continuous delivery pipeline
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续交付管道
- en: The primary characteristic of a legitimate CD pipeline is its ability to facilitate
    software deployment at any stage of its life cycle. Put another way, well-architected
    CI/CD pipeline infrastructure should ensure that any application version can be
    easily deployed to the designated testing, staging, or production environments
    with only a few mouse clicks and with absolute idempotence. Furthermore, development
    teams should be able to receive prompt feedback from automated tests being conducted
    in any environment, and this feedback should be leveraged to facilitate product
    improvements and greater operational efficiency.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 合法的CD管道的主要特点是它能够在软件生命周期的任何阶段促进软件部署。换句话说，设计良好的CI/CD管道基础设施应确保任何版本的应用程序都可以轻松部署到指定的测试、预发布或生产环境中，只需几次点击鼠标，并具有绝对的幂等性。此外，开发团队应能够及时获得来自任何环境中自动化测试的反馈，并应利用这些反馈来促进产品改进和提高运营效率。
- en: 'The continuous delivery pipeline has five primary phases:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付管道有五个主要阶段：
- en: '![Figure 6.8: The five common phases of continuous delivery](img/B21803_06_08.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图6.8：持续交付的五个常见阶段](img/B21803_06_08.jpg)'
- en: 'Figure 6.8: The five common phases of continuous delivery'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8：持续交付的五个常见阶段
- en: 'This figure represents the five most common phases in a continuous delivery
    strategy: commit, test, build, stage, and deploy. As you can see, the cycle is
    designed to be short, promoting the shortest possible interval from when a new
    code change is committed, to version control, to the time it takes to see it deployed
    in production. Beyond that, there are several validation steps in between to ensure
    the highest quality possible. This includes the ability to build the code, which
    can be seen as a form of testing in its own right.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 该图展示了持续交付策略中最常见的五个阶段：提交、测试、构建、预发布和部署。正如你所看到的，这个周期被设计得尽可能短，从新的代码更改提交到版本控制，再到它在生产环境中部署的时间间隔最短。除此之外，还包含了多个验证步骤，以确保最高的质量。这包括构建代码的能力，这本身就可以视为一种测试形式。
- en: Notably, it is far easier to achieve continuous deployment workflows in a product-centric
    company rather than a services-focused company. The reason for this is that service
    companies must tailor their solutions to each individual client, whereas a product
    company is aligned with a narrow scope of value streams.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在以产品为中心的公司中，比在以服务为主的公司中更容易实现持续部署工作流。原因在于服务公司需要为每个客户量身定制解决方案，而产品公司则专注于狭窄的价值流范围。
- en: The difference between continuous delivery and continuous deployment
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续交付与持续部署的区别
- en: In the context of DevOps release management, the terms continuous delivery and
    continuous deployment denote two tiers of automation.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 发布管理的背景下，持续交付和持续部署这两个术语表示了自动化的两个层级。
- en: With continuous delivery, the need for the manual deployment of new code is
    reduced, saving both time and resources. First, the code is written, then automatically
    tested, then approved, and finally pushed to a repository where other engineers
    can access it. When the code is complete, the operations team can quickly fetch
    it and effortlessly deploy it to live application environments using kiosk-like,
    self-serve functionality.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 通过持续交付，减少了手动部署新代码的需求，从而节省了时间和资源。首先，编写代码，然后自动测试，接着批准，最后推送到一个仓库，其他工程师可以访问。当代码完成后，运维团队可以迅速获取并轻松地通过自助功能将其部署到生产环境。
- en: 'This diagram depicts the differences between the continuous delivery and continuous
    deployment sequences:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 该图展示了持续交付与持续部署流程的区别：
- en: '![Figure 6.9: Continuous delivery versus continuous deployment](img/B21803_06_09.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.9：持续交付与持续部署](img/B21803_06_09.jpg)'
- en: 'Figure 6.9: Continuous delivery versus continuous deployment'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9：持续交付与持续部署
- en: 'As you can see, there is one defining feature that distinguishes the two: deploying
    to production. With continuous delivery, there is a manual approval step that
    is enforced before new code changes are permitted to be deployed into production
    environments. With continuous deployment, automated testing fulfills this role
    so that no manual human intervention is necessary.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，有一个决定性特征区分了这两者：部署到生产环境。在持续交付中，必须在允许新的代码更改部署到生产环境之前执行人工批准步骤。而在持续部署中，自动化测试承担了这个角色，因此不需要人工干预。
- en: By expanding the automation of continuous delivery to the next stage of the
    **software development life cycle** (**SDLC**), continuous deployment can help
    reduce the workload of operations teams and speed up the delivery of applications.
    Any auxiliary software release procedures will often get automated too, reducing
    or eliminating the extent of manual human interaction. For instance, a continuous
    deployment pipeline might be set up to deploy new releases after being committed
    into a Git repository and deployed into the production environment so that customers
    can take advantage of it as early as possible.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将持续交付的自动化扩展到**软件开发生命周期**（**SDLC**）的下一阶段，持续部署可以帮助减少运维团队的工作量，加快应用程序的交付。任何辅助的软件发布流程通常也会被自动化，从而减少或消除人工干预的程度。例如，可能会设置一个持续部署管道，在将新版本提交到
    Git 仓库并部署到生产环境后，自动进行部署，以便客户能够尽早使用。
- en: Continuous deployment is substantially harder to implement than continuous delivery
    since it eliminates the need for any kind of human intervention throughout the
    process of deploying authorized software products into production environments.
    This means that in order to achieve true continuous deployment, your automated
    testing regimen must be prolific, interoperable, and extensible.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 连续部署比持续交付更难实施，因为它在将授权的软件产品部署到生产环境时完全消除了任何人工干预的需求。这意味着，为了实现真正的连续部署，您的自动化测试必须丰富、可互操作和可扩展。
- en: How GitOps fits in with continuous delivery
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitOps 如何与持续交付结合
- en: Some notable distinctions exist between GitOps and DevOps. Perhaps the most
    significant aspect is that GitOps places even greater emphasis on the use of automation
    and tooling in order to effectively manage and distribute code modifications.
    Conversely, DevOps places greater emphasis on fostering effective communication
    and collaboration among team members. Another distinction is that GitOps is widely
    used in tandem with containerization technologies such as Kubernetes, whereas
    DevOps can be applied to a variety of other types of application deployments.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 与 DevOps 之间存在一些显著区别。也许最重要的方面是，GitOps 更加强调使用自动化和工具来有效管理和分发代码修改。相反，DevOps
    更加强调促进团队成员之间的有效沟通和协作。另一个区别是，GitOps 广泛与诸如 Kubernetes 等容器化技术同时使用，而 DevOps 可应用于多种其他类型的应用部署。
- en: It is important to recognize that GitOps is a specialized domain within the
    broader field of DevOps that centers around the use of Git repositories for the
    purpose of effectively managing infrastructure state and application deployments.
    A vital distinction between GitOps and DevOps is that with GitOps, the Git repository
    serves as the single authoritative source of truth for the deployment state of
    applications and infrastructure. In this way, the Git repository acts as a ledger
    or is similar in concept to a blockchain.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 是 DevOps 更广泛领域内的一个专业领域，其核心是利用 Git 仓库来有效管理基础设施状态和应用部署。GitOps 与 DevOps
    的一个重要区别在于，Git 仓库在应用和基础设施部署状态的管理中充当单一权威数据源。因此，Git 仓库类似于账本或者说类似于区块链的概念。
- en: Another key thing to grasp is that GitOps relies heavily on pull-based deployment
    as its primary method of implementation. With conventional DevOps approaches,
    continuous integration and continuous delivery pipelines are triggered by an external
    event, such as when new code is pushed to the application repository. With GitOps,
    instead of pushing out new code every time there’s a change in the environment,
    the pull-based strategy keeps the application current by actively comparing the
    currently deployed application state with the ideal application deployment state
    as declared in the version control repository. If any discrepancy is detected
    between the two, the GitOps operator updates the live infrastructure to match
    the configurations declared in the designated repository.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个关键要理解的事情是，GitOps 在其主要实施方法中严重依赖拉取式部署。在传统的 DevOps 方法中，连续集成和连续交付流水线是由外部事件触发的，例如当新代码推送到应用程序仓库时。与此不同，GitOps
    通过拉取式策略保持应用程序的实时性，通过将当前部署的应用程序状态与版本控制仓库中声明的理想应用程序部署状态进行比较。如果检测到两者之间的任何差异，GitOps
    操作者将更新实时基础设施，使其与指定仓库中声明的配置相匹配。
- en: Cleverly, pull-based deployments make it easy to roll back unstable software
    deployments to the last known stable version in the event of an issue. Additionally,
    pull-based techniques are declarative, making advanced deployment strategies,
    such as blue/green and canary deployments, effortless to implement.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 聪明地，拉取式部署使得在出现问题时轻松将不稳定的软件部署回滚到已知的最后稳定版本成为可能。此外，拉取式技术是声明性的，使得实施蓝/绿和金丝雀部署等高级部署策略变得轻松。
- en: Blue/green deployments
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝/绿部署
- en: Blue/green deployments produce two identical environments. One environment (blue)
    runs the existing program version and one (green) runs the new one. After testing
    passes on the green environment, live application traffic is directed there, and
    the blue environment is deprecated. By simplifying rollbacks if deployments fail,
    blue/green deployment strategies boost application availability and reduce deployment
    risk.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝/绿部署生成两个相同的环境。一个环境（蓝色）运行现有的程序版本，另一个环境（绿色）运行新版本。在绿色环境上通过测试后，实时应用流量被定向到那里，并且蓝色环境被弃用。通过简化部署失败的回滚，蓝/绿部署策略提升了应用程序的可用性并降低了部署风险。
- en: Since GitOps deployments are immutable, it is easy to reset any arbitrary or
    undocumented modifications to the live infrastructure. It enforces a complete
    audit trail of all changes in the Git log and helps avoid direct cluster changes
    that could result in inconsistencies in the system’s state.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 由于GitOps部署是不可变的，因此可以轻松地重置到任意或未记录的修改到实时基础架构上。它强制执行Git日志中所有更改的完整审计轨迹，并帮助避免可能导致系统状态不一致的直接集群更改。
- en: Canary deployments
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 金丝雀部署
- en: A canary deployment refers to a gradual and controlled release strategy for
    an application, wherein traffic is divided between an existing version and a new
    version. This approach involves initially introducing the new version to a subset
    of users before expanding its deployment to the entire user base. By following
    this approach, one can determine the reliability of the updated version of the
    application prior to its widespread distribution to consumers.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 金丝雀部署指的是一种逐步和受控的应用发布策略，其中流量被分配给现有版本和新版本。该方法首先将新版本引入到一小部分用户中，然后再将其部署到整个用户群体中。通过采用这种方法，可以在广泛分发给消费者之前确定更新版本应用程序的可靠性。
- en: What is continuous testing?
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是持续测试？
- en: By now, you should have a firm grasp on the importance of automated testing,
    at least based on the number of times the subject has been mentioned. The emphasis
    on how important automated testing is to DevOps release management cannot be overstated.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该已经牢牢掌握了自动化测试的重要性，至少基于对该主题的多次提及。强调自动化测试对DevOps发布管理的重要性是不容忽视的。
- en: '**Continuous testing** is a practice within the broader context of CI/CD that
    contributes to software quality throughout the development life cycle. Using carefully
    curated automated testing strategies, continuous testing ensures that software
    development teams get real-time feedback, allowing them to rapidly eliminate as
    many potential risks and flaws as possible and as soon as possible, spanning the
    entire software development life cycle. Furthermore, teammates will be properly
    equipped to continuously gain new insights into their products and ways that they
    can be improved.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续测试**是CI/CD更广泛背景下的一种实践，有助于贯穿整个开发生命周期提高软件质量。通过精心策划的自动化测试策略，持续测试确保软件开发团队获得实时反馈，使他们能够尽早消除尽可能多的潜在风险和缺陷，涵盖整个软件开发生命周期。此外，团队成员将得到充分装备，持续获取有关其产品及其改进方式的新见解。'
- en: However, implementing continuous testing in your organization is not a straightforward
    process because you must come up with a testing strategy that ensures a change
    will move forward without triggering any false positives. Like continuous deployment,
    it is far more difficult to implement continuous testing than it might sound,
    as they are part and parcel with one another. Traditionally, testing software
    was carried out for the very first time after the code had been written and then
    forwarded to the Quality Assurance team to be tested independently. When errors
    were discovered in the code, it got handed back to the developers so that they
    could correct it. This testing model is practical to a reasonable extent in an
    era when slower development cycles were acceptable. However, it is challenging,
    tedious, and fraught with potential for disruption and human error. Instead, contemporary
    organizations require prompt delivery of products that are of superior quality
    because this is what customers have grown to expect in today’s competitive digital
    marketplace. If the resources exist to implement it properly, there is no better
    way to test in a DevOps-centric organization than continuously.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在组织中实施持续测试并不是一项简单的任务，因为你必须制定一个测试策略，以确保变更能够顺利推进，而不会触发任何误报。就像持续部署一样，实施持续测试比听起来要复杂得多，因为它们是相辅相成的。传统上，软件测试是在代码编写完成后首次进行，然后交给质量保证团队独立测试。当在代码中发现错误时，错误会被返还给开发人员以进行修正。在开发周期较慢时，这种测试模型在一定程度上是可行的。然而，在如今快速发展的环境中，这种模式不仅充满挑战、繁琐，而且容易导致中断和人为错误。相反，当今的组织要求快速交付高质量的产品，因为这是客户在竞争激烈的数字市场中所期待的。如果资源允许妥善实施，那么在以DevOps为中心的组织中，没有比持续测试更好的方式了。
- en: Therein lies the value of conducting testing on an ongoing basis. Bugs can be
    found and fixed before more work is done if code is tested immediately after being
    added to the repository. It would then be unnecessary to make future code modifications
    addressing a bug fix because their existence would be avoided in the first place.
    In our modern age, developers even benefit from automated testing plugins that
    install directly into a developer’s local **integrated development environment**
    (**IDE**), such as Eclipse, Microsoft Visual Studio, and PyCharm. This gives developers
    the opportunity to detect and fix issues as they write and before code ever gets
    committed to source control in the first place.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 持续进行测试的价值就在于此。如果在将代码添加到仓库后立即进行测试，错误可以在更多工作进行之前被发现并修复。这样就不需要在未来做出针对bug修复的代码修改，因为这些错误的存在本可以在一开始就避免。在我们这个现代化时代，开发者甚至可以从直接安装到本地**集成开发环境**（**IDE**）中的自动化测试插件中受益，例如Eclipse、Microsoft
    Visual Studio和PyCharm。这使得开发者能够在编写代码时，及早发现和修复问题，而不需要等到代码被提交到版本控制之前。
- en: Quality assurance of customer-facing software requires thorough end-to-end testing
    that exercises the entire system, this will help you verify that your app is performing
    as expected. End-to-end testing necessitates that real data and environments be
    used for the most reliable results. You will be better positioned to find and
    fix problems with the code when using mock data that is representative of real-world
    production data. Leveraging this information, you can learn more about the app’s
    real-world performance by simulating it in real-world testing conditions. As a
    side note, this philosophy is core to the ethos of implementing canary deployments,
    exposing a small percentage of users to vetted pre-release versions in production.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 面向客户的软件质量保证需要彻底的端到端测试，以确保整个系统都能被有效地测试，这将帮助你验证你的应用程序是否按预期表现。端到端测试要求使用真实的数据和环境，以获得最可靠的结果。使用模拟数据（这些数据代表了真实生产环境中的数据）时，你将更有能力发现并修复代码中的问题。利用这些信息，你可以通过在现实测试环境中进行模拟，了解应用程序在真实世界中的表现。顺便提一句，这一理念是实现金丝雀部署的核心思想，即在生产环境中将一小部分用户暴露于经过验证的预发布版本。
- en: Effective continuous testing requires both continuous integration and continuous
    delivery. Many steps in the testing process, such as code construction, deployment,
    and analysis, can be automated with the help of CI/CD tools. New features and
    bug fixes can be released more quickly while still meeting high standards of quality
    when using CI/CD and DevOps release management. Keep an eye on test results and
    user feedback to ensure your software is continually getting better. This data
    will help you spot problems in your process and make the necessary adjustments
    to improve them. Maintaining high-quality software requires maintaining high-quality
    awareness of test results over time.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的持续测试需要同时进行持续集成和持续交付。在测试过程中，许多步骤，如代码构建、部署和分析，都可以借助 CI/CD 工具来自动化。使用 CI/CD 和
    DevOps 发布管理时，新特性和错误修复可以更快发布，同时仍能保持高质量标准。密切关注测试结果和用户反馈，确保你的软件不断改进。这些数据将帮助你发现流程中的问题，并做出必要的调整来改进它们。保持高质量的软件需要在时间的推移中维持对测试结果的高质量意识。
- en: In the following section, we’ll examine the case study of how the financial
    institution Capital One made the most of CI/CD while conducting its own DevOps
    transformation.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将通过案例研究来探讨金融机构 Capital One 如何在进行 DevOps 转型时充分利用 CI/CD。
- en: The DevOps transformation of Capital One
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Capital One 的 DevOps 转型
- en: In 2010, Capital One acknowledged their customers’ preferences for online and
    mobile banking. In light of this, executive leadership decided to enhance the
    business’s technological capabilities and establish a culture that would attract
    and grow a workforce of highly skilled technologists with a knack for collaborative
    development. Prudently, Capital One prioritized the recruitment of these hearty
    souls and made sure they were working closely with relevant decision-makers who
    consummately understood the business requirements. Shortly after, the company
    embraced agile software development techniques that eventually became the basis
    for implementing DevOps release management at the company.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 2010 年，Capital One 认识到客户偏好在线和移动银行。鉴于此，执行领导层决定增强公司的技术能力，并建立一种能够吸引并培养具有协作开发能力的高技能技术人才的文化。谨慎起见，Capital
    One 优先招聘了这些优秀人才，并确保他们与深刻理解业务需求的相关决策者密切合作。不久之后，公司便开始采用敏捷软件开发技术，这最终成为实施 DevOps 发布管理的基础。
- en: 'Promptly addressing customer feedback has always been the top concern at Capital
    One. Therefore, DevOps emerged as the logical option for development teams to
    attain accelerated development and deployment cycles. Between 2012 and 2020, Capital
    One experienced a series of transformations:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 迅速响应客户反馈一直是 Capital One 的首要关注点。因此，DevOps 成为了开发团队实现加速开发和部署周期的合乎逻辑的选择。在 2012 到
    2020 年间，Capital One 经历了一系列转型：
- en: Embracing agile practices
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用敏捷实践
- en: Creating automated test cases
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自动化测试用例
- en: Automating deployments and tests using CI/CD
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CI/CD 自动化部署和测试
- en: Migrating operations to public cloud providers
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将运营迁移到公共云服务提供商
- en: Through these modifications, the bank transformed into an organization that
    embraced open source solutions and rapid delivery cycles. In 2020, Capital made
    history by becoming the first US bank to transfer the entirety of its legacy on-premises
    data centers to public cloud providers.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些改进，银行转型为一个拥抱开源解决方案和快速交付周期的组织。2020 年，Capital One 创下历史，成为首家将其所有传统本地数据中心迁移至公共云服务提供商的美国银行。
- en: Capital One’s DevOps transformation strategy
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Capital One 的 DevOps 转型策略
- en: Despite starting with a handful of employees, Capital One aimed to establish
    a company-wide DevOps approach. Over time, the corporation implemented its DevOps
    initiatives architected with a three-phased approach.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管最初只有少数员工，Capital One 的目标是建立一种公司范围的 DevOps 方法。随着时间的推移，该公司实施了以三阶段方法为架构的 DevOps
    计划。
- en: '![Figure 6.10: Capitol One’s three-phase DevOps transformation](img/B21803_06_10.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.10：Capital One 的三阶段 DevOps 转型](img/B21803_06_10.jpg)'
- en: 'Figure 6.10: Capitol One’s three-phase DevOps transformation'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10：Capital One 的三阶段 DevOps 转型
- en: Creating cross-functional teams
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建跨职能团队
- en: Capital One began implementing DevOps by assigning specialized and versatile
    SWATteams to two of its older applications within the company. These cross-functional
    teams magnanimously implemented configuration management and automation of essential
    functions and optimized the workflow of these two applications. Following that,
    each team continued to assert ownership of the delivery process for their designated
    application. This strategy was repeated for four additional applications at Capitol
    One before management encouraged the rest of the company’s development teams to
    implement these newly discovered best practices.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Capital One 开始通过为公司内两个旧有应用程序分配专门且多才多艺的 SWAT 团队来实施 DevOps。这些跨职能团队慷慨地实施了配置管理和关键功能的自动化，并优化了这两个应用程序的工作流。随后，每个团队继续负责其指定应用程序的交付过程。这个策略在
    Capital One 的另外四个应用程序中得到了重复实施，之后管理层鼓励公司其他开发团队也采纳这些新发现的最佳实践。
- en: Notably, Capital One’s ability to establish common objectives was greatly enhanced
    by the presence of a cross-functional team and excellent leadership during the
    earliest stages of their DevOps Journey. It was also beneficial for developers
    and operation teams to acquire essential DevOps skills needed to influence others
    and proliferate the culture across the organization.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，Capital One 能够建立共同目标，得益于跨职能团队的存在以及在 DevOps 旅程初期卓越的领导力。同时，对于开发人员和运维团队来说，掌握必要的
    DevOps 技能，以影响他人并在整个组织中传播文化，也是非常有益的。
- en: Leveraging microservices architecture
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用微服务架构
- en: Like other businesses that existed during the dot com era, Capital One used
    a monolithic design while architecting its technology stack. Over time, their
    projects began to expand, making it necessary to consider future requirements.
    As a result, the bank dedicated additional resources to thoroughly examine the
    microservices architecture and its applicability to their organization.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他在互联网泡沫时代存在的公司一样，Capital One 在架构技术栈时使用了单体设计。随着时间的推移，他们的项目开始扩展，因此必须考虑未来的需求。结果，该银行投入了更多资源，深入研究了微服务架构及其在公司中的适用性。
- en: At Capital One, the primary objective was to enhance delivery speed while maintaining
    high-quality standards. The development team chose to use automated deployments
    that align with their established quality standards. They established strict and
    clear rules for software deployment and modifications to production.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Capital One，主要目标是提高交付速度，同时保持高质量标准。开发团队选择使用自动化部署，以符合他们已建立的质量标准。他们为软件部署和生产环境的修改制定了严格且明确的规则。
- en: 'The team at Capital One has implemented immutable stages in their pipeline
    delivery:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Capital One 的团队在其管道交付中实现了不可变的阶段：
- en: Implementing effective source control management
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施有效的源代码控制管理
- en: Implementing a safe place to store application and binary data
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施安全的应用程序和二进制数据存储地点
- en: Implementing robust privileged access management and authorization
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施强健的特权访问管理和授权
- en: Ensuring that quality and safety checks are regularly performed
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保定期执行质量和安全检查
- en: 'Each application team was obligated to fulfill these requirements prior to
    releasing their code to the production environment. In the end, the benefits that
    Capital One received because of implementing microservice architectures were as
    follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序团队必须在将其代码发布到生产环境之前，满足这些要求。最终，Capital One 因为实施微服务架构而获得的好处如下：
- en: Asymmetric service deployments
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非对称的服务部署
- en: Infinitely scalable applications
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无限可扩展的应用程序
- en: High availability
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高可用性
- en: Logical separation of duties and responsibilities
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 职责和责任的逻辑分离
- en: Improved error handling
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进的错误处理
- en: Building an on-demand infrastructure on AWS
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 AWS 上构建按需基础设施
- en: After receiving feedback from customers, product managers at Capital One focused
    their efforts on enhancing the quality of the banking and financial services to
    provide customers with an exceptional experience. Exactly for this reason, the
    organization adopted a cloud-first policy, and its architects moved the newly
    developed applications to the cloud.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在收到了客户反馈后，Capital One 的产品经理将精力集中在提升银行和金融服务的质量上，以为客户提供卓越的体验。正是由于这个原因，该公司采纳了云优先策略，且其架构师将新开发的应用程序迁移到云端。
- en: 'The development team at Capital One was able to obtain valuable user insights
    and respond more quickly thanks to the following Amazon Web Services tools:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Capital One 的开发团队通过以下亚马逊网络服务工具获得了宝贵的用户洞察，并能够更快地做出响应：
- en: '**Virtual private** **cloud** (**VPC**)'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟私有** **云**（**VPC**）'
- en: '**Simple storage** **service** (**S3**)'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单存储** **服务**（**S3**）'
- en: '**Elastic compute** **cloud** (**EC2**)'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性计算** **云**（**EC2**）'
- en: '**Relational database** **service** (**RDS**)'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关系型数据库** **服务**（**RDS**）'
- en: Automating delivery pipelines using Jenkins
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Jenkins 自动化交付管道
- en: Capital One employs a range of pipelines to thoroughly scan and test its code,
    ensuring high-quality standards across the company. In addition, a similar procedure
    is carried out to ensure expedited delivery. The code updates go through a thorough
    process of automated testing, which includes integration tests, unit tests, security
    scanning, and quality checks. The release is deployed automatically by the pipeline
    after the code successfully passes all the tests. By ensuring uninterrupted service,
    users can enjoy a seamless experience while teams can effortlessly deploy updates.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Capital One 采用了一系列管道来彻底扫描和测试其代码，确保公司内部的高质量标准。此外，还进行了类似的程序以确保快速交付。代码更新经过自动化测试的全面流程，包括集成测试、单元测试、安全扫描和质量检查。在代码成功通过所有测试后，发布会通过管道自动部署。通过确保服务不中断，用户可以享受无缝体验，而团队则可以轻松部署更新。
- en: The development team utilized Jenkins, a widely used tool for creating continuous
    integration and delivery pipelines. In taking this approach, Capital One was able
    to avoid the need to create its own integration process from scratch. The Jenkins-based
    pipeline efficiently breaks down the entire development process into stages and
    further divides them into additional steps, such as application build, integration
    testing, and deployment. Notably, Capitol One employs boilerplate tools that are
    used to accelerate the creation of `Jenkinsfiles` for expediting the development
    of various applications.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 开发团队使用了 Jenkins，一个广泛使用的工具，用于创建持续集成和交付管道。通过这种方法，Capital One 避免了从头开始创建自己的集成过程。基于
    Jenkins 的管道高效地将整个开发过程分解为多个阶段，并进一步将它们分为其他步骤，如应用程序构建、集成测试和部署。值得注意的是，Capital One
    使用了加速创建 `Jenkinsfiles` 的模板工具，以加速各种应用程序的开发。
- en: Jenkins has allowed Capital One to streamline software delivery, enhance operational
    stability, and provide a better experience for developers overall.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 使 Capital One 精简了软件交付流程，提高了运营稳定性，并为开发人员提供了更好的整体体验。
- en: Governance within Capitol One’s CI/CD pipelines
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Capitol One 的 CI/CD 管道治理
- en: Capital One aimed to achieve a culture of fearless releases to promote creative
    thinking. However, this also necessitated the adoption of a mindset where individuals
    take responsibility for the decisions they make and their roles in software delivery.
    Tapabrata “Topo” Pal, a well-known strategist and DevOps evangelist, and his team
    implemented the concept of **clean room** development at Capital One. They modified
    the concept for the software development life cycle to embrace a culture of courageousness
    and accountability.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: Capital One 旨在实现一种无畏发布的文化，以促进创造性思维。然而，这也需要采取一种思维方式，要求个人对他们所做的决策和在软件交付中的角色负责。著名战略家和
    DevOps 传播者 Tapabrata “Topo” Pal 及其团队在 Capital One 实施了**清洁室**开发的概念。他们将这一概念修改为适用于软件开发生命周期，以拥抱一种勇气和责任感的文化。
- en: Clean room
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 清洁室
- en: The term “clean room” refers to an engineered space that keeps the concentration
    of airborne particulates very low. It has active cleansing, good isolation, and
    good contamination control. These types of rooms are usually required for industrial
    production for all nanoscale processes, including semiconductor manufacturing,
    as well as for scientific research. Dust and other airborne organisms, such as
    vaporized particles, are to be kept away from a cleanroom in order to protect
    the materials being handled inside it.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: “清洁室”一词指的是一个经过设计的空间，它能将空气中的颗粒物浓度保持在极低水平。它具有活跃的净化功能、良好的隔离性和优秀的污染控制。这类房间通常是所有纳米级过程（包括半导体制造）和科学研究所必需的。为了保护室内处理的材料，灰尘和其他空气中的有机物，如蒸发的颗粒，必须远离清洁室。
- en: A set of clear guidelines to guarantee code quality before release can be considered
    the company’s virtual development clean room. These policies cover procedures
    such as locating and registering each product pipeline, vetting and inspecting
    each version of the code, restricting access to production servers, and so forth.
    To put it simply, the clean room approach emphasizes preventing defects rather
    than eliminating them. In the end, Capital One utilized a clean room model to
    detect and address issues across different product pipelines, guaranteeing quality
    right from the beginning. After all, an ounce of prevention is worth a pound of
    cure.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 一套明确的指南，用于在发布前保证代码质量，可以视为公司虚拟开发清洁室的标准。这些政策涵盖了诸如定位和注册每个产品管道、审核和检查每个版本的代码、限制对生产服务器的访问等程序。简单来说，清洁室方法强调的是预防缺陷，而不是消除缺陷。最终，Capital
    One利用清洁室模型来检测和解决不同产品管道中的问题，从一开始就确保了质量。毕竟，一分预防胜过一磅治疗。
- en: The following illustration describes Capital One’s “Clean Room” DevOps release
    management methodology in its entirety. This process begins with the development
    phase, where application code is kept in version control management. Then, a series
    of security measures are enforced, such as restricting access to binaries and
    including static code analysis. The focus of this section is to ensure that the
    code being written is stored with integrity, confidentiality, and availability.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 以下插图完整描述了Capital One的“清洁室”DevOps发布管理方法。这个过程从开发阶段开始，在该阶段，应用程序代码保存在版本控制管理中。接着，采取一系列安全措施，如限制对二进制文件的访问，并包括静态代码分析。本节的重点是确保编写的代码在完整性、机密性和可用性方面得到妥善存储。
- en: Further along in the clean room process is the testing phase. This step ensures
    end-to-end traceability of the quality assurance procedures, starting with tying
    functional test activity to their respective user stories. From there, the product
    owner works hand-in-hand with the development team to ensure that all critical
    testing is performed and properly documented.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 清洁室过程的下一阶段是测试阶段。此步骤确保质量保证程序的端到端可追溯性，从将功能测试活动与各自的用户故事关联开始。接下来，产品负责人与开发团队紧密合作，确保所有关键测试都得到执行并妥善记录。
- en: 'The final two phases in the clean room process include implementation and monitoring.
    In these steps, the production process is for peak performance, including testing
    the deployment scripts, approving changes, vetting rollback procedures, freezing
    source code, and restricting access controls to automated processes. Finally,
    a release is cut and deployed to the production environment and proper application
    monitoring is conducted. Have a look at the diagram of the entire process:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 清洁室过程的最后两个阶段包括实施和监控。在这些步骤中，生产过程旨在达到最佳性能，包括测试部署脚本、批准更改、审核回滚程序、冻结源代码以及限制对自动化过程的访问控制。最后，发布版本被切割并部署到生产环境，并进行适当的应用程序监控。请看一下整个过程的图示：
- en: '![Figure 6.11: Capital One’s clean room release methodology](img/B21803_06_11.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![图6.11：Capital One的清洁室发布方法](img/B21803_06_11.jpg)'
- en: 'Figure 6.11: Capital One’s clean room release methodology'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11：Capital One的清洁室发布方法
- en: Implementing chaos engineering
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施混沌工程
- en: Even with multiple access controls and safeguards, software deployment can sometimes
    become chaotic. Cloud failures can be unpredictable and unavoidable, and they
    can pose risks in certain situations, such as availability zone blackouts. One
    could argue that continuous delivery also brings about the possibility of continuous
    chaos. Capital One has a dedicated team focused on addressing that specific issue.
    No one wants to accidentally automate their own destruction.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有多个访问控制和保护措施，软件部署有时仍会变得混乱。云故障可能是不可预测且无法避免的，在某些情况下，如可用区停机，可能会带来风险。有人可能会说，持续交付也带来了持续混乱的可能性。Capital
    One有一支专门的团队，致力于解决这个具体问题。没有人希望不小心自动化自己的毁灭。
- en: Conventional methods struggle to anticipate every possible failure scenario
    caused by intricate request patterns, unpredictable data conditions, and more.
    In 2017, Capital One took inspiration from Netflix and introduced its own form
    of chaos engineering.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 传统方法往往难以预见由复杂请求模式、不可预测的数据条件等引发的每一种可能的故障情景。在2017年，Capital One从Netflix获得灵感，推出了自己版本的混沌工程。
- en: The company implemented a disruption-causing tool called “Cloud Detour” to assess
    the resiliency of the applications that they build. At this stage, the development
    team intentionally subjects mission-critical applications to various failure scenarios
    for testing purposes. This aids in developing solutions that guarantee sufficient
    resiliency and function as a powerful disaster recovery exercise.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 公司实施了一种名为“Cloud Detour”的工具，用以评估他们构建的应用程序的弹性。在这一阶段，开发团队故意将关键任务应用程序暴露于各种故障场景进行测试。这有助于开发出能够保证足够弹性并作为强大灾难恢复演练的解决方案。
- en: Embedding security principles in DevOps workflows
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将安全原则嵌入到DevOps工作流程中
- en: At first, Capital One adhered to a labor-intensive and time-consuming security
    certification process. Nevertheless, the company quickly recognized the significance
    of fortifying container environments to enhance its encryption and overall security
    posture across all systems services within the business.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，Capital One遵循了一种劳动密集型且耗时的安全认证流程。然而，公司很快意识到加强容器环境的安全性对于增强加密以及提升企业内所有系统服务的整体安全性至关重要。
- en: Consequently, Capital One integrated automated security checks into its DevOps
    pipeline. It facilitated the accelerated evaluation of misconfigurations and vulnerabilities
    in their containers and virtual machine images. The DevOps team quickly obtained
    API privileges for vulnerability management and policy compliance tools that could
    be implemented into the CI/CD process. This allowed them to conduct essential
    tests, acquire reports, and initiate corrective measures without requiring the
    involvement of the security team.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Capital One将自动化安全检查集成到其DevOps流水线中。这加速了对容器和虚拟机镜像中配置错误和漏洞的评估。DevOps团队迅速获得了漏洞管理和政策合规工具的API权限，这些工具可以被集成到CI/CD流程中。这使得他们能够进行必要的测试，获取报告，并在无需安全团队介入的情况下启动纠正措施。
- en: What can we learn from Capital One’s DevOps transformation?
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们可以从Capital One的DevOps转型中学到什么？
- en: 'As you can see, there are a lot of great insights that we might gain from studying
    how Capitol One achieved its DevOps Transformation. Among the numerous improvements
    that were made, some stand out:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，从研究Capital One如何实现其DevOps转型中，我们可以获得很多宝贵的见解。在诸多改进中，有些尤为突出：
- en: A DevOps transformation can take a long time. In the case of Capitol One, they
    started in 2010 and didn’t reach a state of maturity until 2020\. That is an entire
    decade. Be prepared to commit to such long time horizons before reaping the rewards.
    They do call it a journey for a reason.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps转型可能需要较长时间。以Capital One为例，他们从2010年开始，直到2020年才达到了成熟阶段。那整整十年。准备好在收获成果之前投入如此长的时间周期。毕竟，他们称其为“旅程”是有原因的。
- en: Speed is crucial in meeting the ever-shifting requirements of users. That is
    exactly what you can accomplish with the help of internal team collaboration and
    process automation.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 速度在满足用户不断变化的需求中至关重要。通过内部团队协作和流程自动化，你正是可以实现这一目标。
- en: Embracing DevOps practices and fostering team collaborations can inspire a culture
    of innovation and continuous experimentation. Adopting a fail-fast mindset will
    lead you to a practical solution in no time.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用DevOps实践并促进团队合作可以激发创新文化和持续实验的氛围。采取“快速失败”的心态将帮助你迅速找到切实可行的解决方案。
- en: Implementing continuous monitoring practices can help your organization accomplish
    superior outcomes together with scalability, even if your processes initially
    had a sluggish start.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施持续监控实践可以帮助你的组织在实现卓越成果的同时，还能具备可扩展性，即使你的流程最初进展缓慢。
- en: Centralizing delivery tooling streamlines the development and management of
    each team’s tech stack, eliminating the need for individual silos. Minimizing
    redundant work and promoting resource sharing maximizes efficiency.
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集中化的交付工具简化了每个团队技术栈的开发和管理，消除了各自为政的需求。最小化冗余工作并促进资源共享，从而最大化效率。
- en: Cloud infrastructure allows for the flexible utilization of resources. As a
    result, you can easily expand and adapt to changing needs without limitations.
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云基础设施允许灵活利用资源。因此，你可以轻松地扩展并适应不断变化的需求，无需受到限制。
- en: Thoroughly examine all current development processes and establish a standard
    of quality to attain optimal outcomes. Then, streamline quality control processes
    to reduce human error and facilitate DevOps compliance.
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 彻底检查所有当前的开发流程，并建立一个质量标准以实现最佳结果。然后，简化质量控制流程，以减少人为错误并促进DevOps合规性。
- en: Summary
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This concludes [*Chapter 6*](B21803_06.xhtml#_idTextAnchor095). In our discussion,
    you’ve learned the basics of CI/CD from a release manager’s perspective. You now
    grasp how continuous integration incentivizes developers to continuously push
    their code to source control repositories, unifying their work into a single release.
    From there, we’ve reviewed why continuous delivery is such a powerful companion
    to continuous integration. Then, we examined all of the appropriate stages of
    a continuous delivery pipeline, and how it differs from a continuous deployment
    pipeline. Furthermore, you have become familiar with GitOps, a contemporary DevOps
    strategy that amplifies the concept of continuous deployment by introducing pull-based
    deployment tactics. Finally, we’ve examined continuous testing, the premier quality
    assurance strategy for any DevOps-centric software organization.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束了 [*第 6 章*](B21803_06.xhtml#_idTextAnchor095)。在我们的讨论中，你已经从发布经理的角度了解了 CI/CD
    的基本知识。你现在掌握了持续集成如何激励开发人员不断将代码推送到源代码控制库，将他们的工作统一为一个发布版本。接下来，我们回顾了为什么持续交付是持续集成的强大伴侣。然后，我们研究了持续交付管道的所有适当阶段，并讨论了它与持续部署管道的区别。此外，你已经了解了
    GitOps，这是一个现代 DevOps 策略，通过引入基于拉取的部署策略，增强了持续部署的概念。最后，我们探讨了持续测试，这是任何以 DevOps 为中心的软件组织的首要质量保证策略。
- en: In the next chapter, you will be shown how to build a docker image containing
    a simple web application that deploys to AWS EC2, using GitHub Actions.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何构建一个包含简单 web 应用程序的 Docker 镜像，该应用程序部署到 AWS EC2，使用 GitHub Actions。
- en: Questions
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题，以测试你对本章的知识掌握情况：
- en: Can CI/CD pipelines be used to automate more than just the activities required
    for releasing and deploying software?
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CI/CD 管道是否可以用于自动化除了发布和部署软件所需活动以外的其他任务？
- en: Why do software development teams need a unified set of technologies to work
    with in order to attain peak productivity?
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么软件开发团队需要一套统一的技术工具，以达到最高生产力？
- en: What is the benefit of increasing commit frequency?
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 增加提交频率的好处是什么？
- en: What is a continuous integration server and what does it do?
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是持续集成服务器，它的功能是什么？
- en: What is the primary difference between continuous delivery and continuous deployment?
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续交付与持续部署的主要区别是什么？
- en: What are the five primary phases of a continuous delivery pipeline?
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续交付管道的五个主要阶段是什么？
- en: What is GitOps and how is it different from DevOps?
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 GitOps，它与 DevOps 有何不同？
- en: What is the distinction between automated testing and continuous testing?
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动化测试和持续测试有什么区别？
- en: What is the best way for software developers to detect and fix bugs or defects
    in their code before it ever gets committed in the first place?
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件开发人员在代码提交之前，检测和修复代码中的 bug 或缺陷的最佳方法是什么？
- en: What do canary deployments have in common with continuous testing?
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 金丝雀部署与持续测试有什么共同点？
