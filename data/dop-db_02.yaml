- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Large-Scale Data-Persistent Systems
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大规模数据持久化系统
- en: In our contemporary digital landscape, data stands as the cornerstone for organizations
    in diverse sectors. The facility to efficiently store, retrieve, and manage this
    data is vital for making educated choices, refining business workflows, and establishing
    a market advantage. This introduces the importance of data persistence technologies.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们当代的数字化环境中，数据是各行各业组织的基石。有效存储、检索和管理这些数据的能力对做出明智决策、优化业务流程以及建立市场优势至关重要。这引出了数据持久化技术的重要性。
- en: Data persistence is the quality of sustaining data beyond the operational life
    of a particular software or hardware system. It safeguards data so that it stays
    both available and retrievable, even after events such as system reboots or power
    failures. Technologies that enable data persistence ensure reliable storage and
    access to invaluable data over extended periods.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 数据持久化是指在特定软件或硬件系统的操作生命周期之外维持数据的特性。它保护数据，使其在系统重启或断电等事件发生后仍然可以访问和恢复。支持数据持久化的技术确保了在长时间内可靠地存储和访问宝贵数据。
- en: Originally, the goal of data persistence was met through filesystems that housed
    data on disk drives. However, as data has expanded both in volume and intricacy,
    more innovative and capable methods of data persistence have come to the fore.
    Organizations now have a plethora of choices, each with its unique merits and
    ideal use cases.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，数据持久化通过将数据存储在磁盘驱动器上的文件系统来实现。然而，随着数据在量和复杂性上的增长，更具创新性和能力的数据持久化方法应运而生。如今，组织们拥有众多选择，每种选择都有其独特的优点和理想的使用场景。
- en: One dominant form of data persistence is the relational database. These databases
    categorize data into schema-defined tables, enabling easy query execution, indexing,
    and data integrity enforcement. Relational databases primarily use **Structured
    Query Language** (**SQL**) for data manipulation, making them a sturdy choice
    for structured data storage.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一种主流的数据持久化形式是关系数据库。这些数据库将数据分类到具有架构定义的表格中，便于执行查询、索引以及强制执行数据完整性。关系数据库主要使用**结构化查询语言**（**SQL**）进行数据操作，是存储结构化数据的坚实选择。
- en: Another significant category encompasses NoSQL databases. These databases are
    crafted to manage unstructured or semi-structured data that changes swiftly. With
    their flexible schema design, horizontal scaling, and **high availability** (**HA**),
    NoSQL databases are particularly apt for big data scenarios, real-time applications,
    and distributed computing environments.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要类别是NoSQL数据库。这些数据库旨在处理快速变化的非结构化或半结构化数据。凭借灵活的架构设计、水平扩展能力和**高可用性**（**HA**），NoSQL数据库特别适用于大数据场景、实时应用程序和分布式计算环境。
- en: More recently, in-memory databases and key-value stores have come into vogue.
    In-memory databases keep data in the main memory of a system, which allows for
    rapid data access and transactions. These are particularly beneficial for applications
    demanding real-time analytics and low-latency operations.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，内存数据库和键值存储已成为流行趋势。内存数据库将数据存储在系统的主内存中，从而实现快速的数据访问和事务处理。这些数据库尤其适用于需要实时分析和低延迟操作的应用程序。
- en: Key-value stores, conversely, store data in uncomplicated key-value relationships,
    providing swift and scalable storage solutions. They are often used for caching
    mechanisms, session handling, and saving user settings.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，键值存储以简单的键值关系存储数据，提供快速且可扩展的存储解决方案。它们通常用于缓存机制、会话处理和保存用户设置。
- en: Besides databases, the realm of data persistence also includes various types
    of filesystems, object storage solutions, cloud-based storage options, and distributed
    filesystems. Each of these comes with specific features and capacities tailored
    to address different data storage needs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 除了数据库，数据持久化领域还包括各种类型的文件系统、对象存储解决方案、基于云的存储选项和分布式文件系统。每种技术都有其特定的功能和能力，旨在解决不同的数据存储需求。
- en: In summary, data persistence technologies serve as key pillars in modern strategies
    for data management and storage. They allow organizations to securely store, access,
    and manage data, thus assuring its long-term availability and reliability. Whether
    dealing with structured data in relational databases, unstructured data in NoSQL
    databases, or data residing in memory or in cloud storage, choosing the appropriate
    data persistence technology is crucial for any organization aspiring to fully
    leverage its data assets.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，数据持久性技术是现代数据管理和存储战略中的关键支柱。它们使组织能够安全地存储、访问和管理数据，从而确保数据的长期可用性和可靠性。无论是处理关系数据库中的结构化数据，还是处理NoSQL数据库中的非结构化数据，或是存储在内存或云存储中的数据，选择合适的数据持久性技术对于任何希望充分利用数据资产的组织来说都至关重要。
- en: In this chapter, we’ll explore the historical progression of these technologies,
    as well as their shared and unique characteristics. We hope you find the journey
    enlightening!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨这些技术的历史发展过程，以及它们的共同特征和独特之处。希望您能从这段旅程中获得启发！
- en: 'The following are the main topics in this chapter:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要内容包括：
- en: A brief history of data
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据的简短历史
- en: Database evolution
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库的演变
- en: Data warehouses
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据仓库
- en: Data lakes
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据湖
- en: A brief history of data
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据的简短历史
- en: The evolution of computers and databases has been a fascinating journey that
    has transformed the world we live in. From the first mechanical calculators to
    modern-day supercomputers, computers have come a long way in terms of their processing
    power, storage capacity, and speed. Similarly, databases have evolved from simple
    filesystems to highly sophisticated systems capable of managing massive amounts
    of data. This essay examines the history of computer and database evolution and
    their relationships.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机和数据库的演变是一段引人入胜的历程，彻底改变了我们所生活的世界。从第一台机械计算器到现代超级计算机，计算机在处理能力、存储容量和速度等方面取得了长足的进步。同样，数据库也从简单的文件系统发展到如今能够管理海量数据的高度复杂系统。本文将探讨计算机和数据库演变的历史及它们之间的关系。
- en: The early days of computing
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算的早期历史
- en: The history of computing dates back to the early 1800s, when the first mechanical
    calculators were built to aid in mathematical computations. Charles Babbage, an
    English mathematician, is credited with designing the first programmable mechanical
    computer, the Analytical Engine, in the 1830s. However, the machine was never
    built due to lack of funding.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机的历史可以追溯到19世纪初，当时第一台机械计算器被制造出来以帮助数学运算。英国数学家查尔斯·巴贝奇被认为是第一台可编程机械计算机“分析机”的设计者，该计算机的设计始于1830年代。然而，由于资金不足，这台机器始终未能建造出来。
- en: In the late 1800s, Herman Hollerith, an American inventor, developed a machine
    that could read punched cards and tabulate statistical data. This machine was
    used to process US census data, reducing the time taken to tabulate the data from
    several years to a few months. This marked the beginning of the use of computers
    in data processing.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在19世纪末，美国发明家赫尔曼·霍勒里思开发了一台能够读取穿孔卡片并统计数据的机器。这台机器被用来处理美国人口普查数据，将数据统计所需的时间从数年缩短到几个月。这标志着计算机在数据处理中的应用开始。
- en: The first electronic computers were developed in the 1940s, during World War
    II. The need for faster calculations to aid in the war effort led to the development
    of the first electronic computers. The first electronic computer, the **Electronic
    Numerical Integrator and Computer** (**ENIAC**), was developed by John Mauchly
    and J. Presper Eckert in 1945\. The machine was massive, occupying an entire room,
    and had limited processing power. It was used to calculate ballistic trajectories
    for the US military.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第一台电子计算机是在1940年代二战期间开发的。为了加速战时计算需求，第一台电子计算机应运而生。**电子数值积分计算机**（**ENIAC**）是由约翰·毛克利和J·普雷斯珀·埃克特于1945年开发的。这台机器庞大，占据了整个房间，且处理能力有限。它主要用于计算美国军方的弹道轨迹。
- en: The development of electronic computers continued in the 1950s, with the introduction
    of the first commercially available computer, the **Universal Automatic Computer**
    (**UNIVAC**). This machine was developed by Mauchly and Eckert and was used for
    scientific and business applications.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 电子计算机的发展在1950年代持续进行，第一台商业化计算机——**通用自动计算机**（**UNIVAC**）问世。这台机器由毛克利和埃克特开发，主要用于科学和商业应用。
- en: The 1960s and 1970s saw the development of mainframe computers, which were large,
    powerful computers used by large organizations for data processing. These machines
    were expensive and required specialized skills to operate. However, they were
    reliable and could handle massive amounts of data.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 1960年代和1970年代见证了大型机的发展，这些大型、强大的计算机被大型组织用于数据处理。这些机器价格昂贵，需要专业技能来操作。然而，它们可靠，并且能处理大量数据。
- en: The 1980s saw the introduction of personal computers, which were small, affordable
    computers designed for individual use. The first personal computer, the IBM PC,
    was introduced in 1981\. These machines were popular among individuals and small
    businesses due to their affordability and ease of use. The introduction of **graphical
    user interfaces** (**GUIs**) in the 1980s also made personal computers more accessible
    to non-technical users.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 1980年代见证了个人计算机的引入，这些小型、价格合理的计算机设计用于个人使用。第一台个人计算机IBM PC于1981年推出。这些机器因其价格合理和易用性而受到个人和小型企业的欢迎。1980年代引入的图形用户界面（GUIs）也使得个人计算机对非技术用户更加友好。
- en: The 1990s saw the rise of the internet and the development of the World Wide
    Web. This led to the development of new applications and technologies, such as
    web browsers and e-commerce. The proliferation of personal computers and the internet
    also led to the development of client-server architectures, where applications
    were split between the client (the user’s computer) and the server (the remote
    computer).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 1990年代见证了互联网的崛起和万维网的发展。这导致了新应用和技术的发展，如网络浏览器和电子商务。个人计算机和互联网的普及还导致了客户端-服务器架构的发展，其中应用程序被分割在客户端（用户的计算机）和服务器（远程计算机）之间。
- en: The rise of relational databases
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关系数据库的兴起
- en: In the early days of computing, data was stored in flat files, which made it
    difficult to manage and retrieve data. In the 1960s, IBM developed the first relational
    database, which allowed data to be stored in tables with relationships between
    them. This made it easier to manage and retrieve data.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机早期，数据存储在平面文件中，这使得数据管理和检索变得困难。在1960年代，IBM开发了第一个关系数据库，允许数据存储在具有彼此关系的表中。这使得数据的管理和检索变得更加容易。
- en: The development of relational databases led to the creation of SQL, a standard
    language for managing relational databases. SQL allows users to query and manipulate
    data using a simple syntax, making it easier for non-technical users to access
    data.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 关系数据库的发展导致了SQL语言的创建，这是一种管理关系数据库的标准语言。SQL允许用户使用简单的语法查询和操作数据，使非技术用户更容易访问数据。
- en: The 1970s saw the development of the first commercial relational database, Oracle,
    which was developed by Larry Ellison, Bob Miner, and Ed Oates. Oracle quickly
    became the dominant relational database on the market, and it is still widely
    used today.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 1970年代见证了第一个商业关系数据库Oracle的发展，由Larry Ellison、Bob Miner和Ed Oates开发。Oracle迅速成为市场上主导的关系数据库，并且今天仍被广泛使用。
- en: The 1980s saw the development of **object-oriented** (**OO**) databases, which
    allowed data to be stored in objects with properties and methods. This made it
    easier to manage complex data structures, such as those used in software applications.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 1980年代见证了面向对象（OO）数据库的发展，允许数据存储在具有属性和方法的对象中。这使得管理软件应用程序中使用的复杂数据结构变得更加容易。
- en: The 1990s saw the rise of distributed databases, which allowed data to be stored
    and managed across multiple servers. This made it easier to manage large amounts
    of data and provided better scalability and reliability.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 1990年代见证了分布式数据库的兴起，允许数据存储和管理在多个服务器上。这使得管理大量数据变得更加容易，并提供了更好的可伸缩性和可靠性。
- en: In the 2000s, NoSQL databases were developed, which used non-relational data
    models. These databases were designed to handle large amounts of unstructured
    data, such as social media data and sensor data. NoSQL databases provide better
    scalability and performance than relational databases for certain types of applications.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 2000年代开发了NoSQL数据库，使用非关系数据模型。这些数据库设计用于处理大量非结构化数据，如社交媒体数据和传感器数据。对于某些类型的应用程序，NoSQL数据库在可扩展性和性能方面比关系数据库表现更好。
- en: Computers and databases are closely related, as databases are used to store
    and manage data that is processed by computers. The development of faster and
    more powerful computers has led to the development of more sophisticated databases
    that can handle larger amounts of data and provide better performance.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机与数据库密切相关，因为数据库用于存储和管理计算机处理的数据。更快速、更强大的计算机的出现促使了能够处理更多数据并提供更好性能的复杂数据库的开发。
- en: The evolution of database technologies has also influenced the development of
    computer applications. For example, the rise of OO databases in the 1980s led
    to the development of **OO programming** (**OOP**) languages, such as Java and
    C++. These languages allowed developers to build applications that could interact
    with OO databases more easily.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库技术的发展也影响了计算机应用程序的进展。例如，1980年代面向对象数据库（OO数据库）的兴起促使了**面向对象编程**（**OOP**）语言的发展，如Java和C++。这些语言使开发者能够更轻松地构建可以与OO数据库交互的应用程序。
- en: Similarly, the rise of distributed databases in the 1990s led to the development
    of distributed computing technologies, such as Hadoop and MapReduce. These technologies
    allow large amounts of data to be processed across multiple servers, making it
    possible to handle massive amounts of data.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，1990年代分布式数据库的兴起推动了分布式计算技术的发展，如Hadoop和MapReduce。这些技术使得大量数据可以分布在多个服务器之间处理，从而能够处理海量数据。
- en: In recent years, the use of cloud computing has become increasingly popular,
    providing on-demand access to computing resources and databases. Cloud databases,
    such as **Amazon Web Services** (**AWS**) and Microsoft Azure, provide scalable
    and flexible solutions for storing and managing data.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，云计算的使用日益普及，提供了按需访问计算资源和数据库的服务。云数据库，如**Amazon Web Services**（**AWS**）和Microsoft
    Azure，提供了可扩展且灵活的解决方案来存储和管理数据。
- en: Conclusion
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: The evolution of computers and databases has transformed the world we live in,
    making it possible to store, manage, and process massive amounts of data. From
    the first mechanical calculators to modern-day supercomputers, computers have
    come a long way in terms of their processing power, storage capacity, and speed.
    Similarly, databases have evolved from simple filesystems to highly sophisticated
    systems capable of managing massive amounts of data.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机和数据库的演变改变了我们生活的世界，使得存储、管理和处理海量数据成为可能。从最初的机械计算机到现代的超级计算机，计算机在处理能力、存储容量和速度上已经取得了长足的进步。同样，数据库也从简单的文件系统发展到能够管理大量数据的高度复杂的系统。
- en: The relationship between computers and databases is a close one, with the development
    of one influencing the development of the other. The evolution of database technologies
    has influenced the development of computer applications, and the development of
    faster and more powerful computers has led to the development of more sophisticated
    databases.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机与数据库之间有着密切的关系，一方的发展会影响另一方的发展。数据库技术的演变影响了计算机应用程序的发展，而更快、更强大的计算机的出现促使了更复杂的数据库的开发。
- en: As we move forward, the use of **artificial intelligence** (**AI**) and **machine
    learning** (**ML**) is set to drive further innovation in the field of computing
    and databases. These technologies will enable us to process and analyze data in
    ways that were previously not possible, leading to new insights and discoveries.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 随着技术的进步，**人工智能**（**AI**）和**机器学习**（**ML**）的应用预计将进一步推动计算和数据库领域的创新。这些技术将使我们能够以前无法做到的方式处理和分析数据，从而带来新的洞察和发现。
- en: Database evolution
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库演变
- en: In this section, we will briefly discuss how databases have evolved over time.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将简要讨论数据库如何随着时间的推移而发展。
- en: Hierarchical database models
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 层次型数据库模型
- en: Hierarchical databases are a type of **database management system** (**DBMS**)
    that follows a hierarchical structure for organizing data. This structure is similar
    to a tree, with the root node at the top and child nodes branching out from it.
    Each child node can have multiple child nodes of its own, and so on, creating
    a hierarchical structure of data.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 层次型数据库是一种**数据库管理系统**（**DBMS**），它采用层次结构来组织数据。该结构类似于树形结构，根节点位于顶部，子节点从根节点分支出来。每个子节点可以有多个子节点，依此类推，形成数据的层次结构。
- en: In this model, data is organized into records, which are stored in a hierarchy
    of parent-child relationships. Each record is linked to one or more child records,
    forming a tree-like structure. The parent record is called the **owner** record,
    and the child records are called **member** records. The owner record can have
    one or more member records, but each member record can only have one owner record.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种模型中，数据被组织成记录，并存储在父子关系的层次结构中。每条记录都与一个或多个子记录相链接，形成树状结构。父记录称为**拥有者**记录，子记录称为**成员**记录。拥有者记录可以有一个或多个成员记录，但每个成员记录只能有一个拥有者记录。
- en: One of the key features of hierarchical databases is the use of pointers or
    links to connect records. These links define parent-child relationships between
    records and allow for efficient retrieval of data. The use of pointers is also
    what makes hierarchical databases fast and efficient, as they can quickly navigate
    through the database to find the desired records.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 层次化数据库的一个关键特点是使用指针或链接来连接记录。这些链接定义了记录之间的父子关系，并允许高效地检索数据。指针的使用也是层次化数据库快速高效的原因，因为它们可以迅速浏览数据库以查找所需的记录。
- en: Hierarchical databases were first introduced in the 1960s as a way to organize
    large amounts of data in mainframe computers. IBM’s **Information Management System**
    (**IMS**) is one of the most well-known hierarchical databases, and it is still
    used today in many large enterprises.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 层次化数据库首次出现在1960年代，作为一种在大型机上组织大量数据的方式。IBM的**信息管理系统**（**IMS**）是最著名的层次化数据库之一，至今仍在许多大型企业中使用。
- en: Advantages of hierarchical databases
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 层次化数据库的优点
- en: One of the main advantages of hierarchical databases is their speed and efficiency.
    Because data is organized in a tree-like structure and linked using pointers,
    hierarchical databases can quickly retrieve data by following these links. This
    makes them ideal for applications that require fast access to large amounts of
    data, such as banking and finance systems.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 层次化数据库的主要优点之一是其速度和效率。由于数据以树状结构组织，并通过指针进行链接，层次化数据库可以通过跟随这些链接迅速检索数据。这使得它们非常适用于需要快速访问大量数据的应用程序，如银行和金融系统。
- en: Another advantage of hierarchical databases is their simplicity. The hierarchical
    structure is easy to understand and implement, making it a popular choice for
    small-to-medium-sized applications. This simplicity also makes it easier to maintain
    and update the database, as changes can be made quickly and efficiently.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 层次化数据库的另一个优点是其简便性。层次化结构易于理解和实现，因此它是中小型应用程序的热门选择。这种简便性也使得数据库的维护和更新更加容易，因为可以迅速高效地进行更改。
- en: Disadvantages of hierarchical databases
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 层次化数据库的缺点
- en: One major disadvantage of hierarchical databases is their inflexibility. Because
    data is organized in a strict hierarchy, it can be difficult to add or modify
    data without disrupting the structure of the database. This can make it challenging
    to adapt to changing business needs or to integrate with other systems.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 层次化数据库的一个主要缺点是其缺乏灵活性。由于数据以严格的层次结构组织，添加或修改数据可能会破坏数据库的结构。这使得它在适应不断变化的业务需求或与其他系统集成时变得具有挑战性。
- en: Another disadvantage of hierarchical databases is their lack of support for
    complex relationships between data. For example, if you wanted to represent a
    many-to-many relationship between two sets of data, it would be difficult to do
    so using a hierarchical structure. This can limit the types of applications that
    can be built using hierarchical databases, especially those that require more
    complex data relationships.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 层次化数据库的另一个缺点是缺乏对复杂数据关系的支持。例如，如果你想表示两个数据集之间的多对多关系，那么使用层次化结构会非常困难。这限制了使用层次化数据库构建的应用程序类型，特别是那些需要更复杂数据关系的应用程序。
- en: Furthermore, hierarchical databases can also suffer from data redundancy issues.
    Since each record can only have one owner record, duplicate data may need to be
    stored in multiple locations in the database. This can cause data inconsistencies
    and increase the storage requirements of the database.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，层次化数据库还可能面临数据冗余问题。由于每条记录只能有一个拥有者记录，因此可能需要在数据库的多个位置存储重复的数据。这可能导致数据不一致，并增加数据库的存储需求。
- en: Hierarchical databases are also limited in terms of their scalability. As the
    size of the database grows, the hierarchical structure can become more complex
    and difficult to manage. This can lead to performance issues and make it challenging
    to scale the database to meet the needs of larger applications.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 层级数据库在可扩展性方面也存在限制。随着数据库大小的增长，层级结构可能变得更加复杂，难以管理。这可能导致性能问题，并使得数据库扩展以满足大型应用需求变得具有挑战性。
- en: Despite these limitations, hierarchical databases continue to be used in many
    industries today. They are particularly well suited for applications that require
    fast and efficient retrieval of data, such as banking and finance systems. They
    can also be useful for smaller applications where simplicity is a priority and
    the data relationships are relatively straightforward.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在这些局限性，层级数据库今天仍在许多行业中得到应用。它们尤其适合需要快速高效数据检索的应用场景，比如银行和金融系统。对于较小的应用程序，简单性是优先考虑的因素，且数据关系相对简单，层级数据库也会是一个有用的选择。
- en: Examples of hierarchical databases
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 层级数据库示例
- en: As mentioned earlier, IBM’s IMS is one of the most well-known hierarchical databases.
    IMS was originally developed in the 1960s for IBM’s mainframe computers and is
    still widely used today in large enterprises. IMS is used in a variety of industries,
    including banking, insurance, and telecommunications, and is known for its speed
    and reliability.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，IBM的IMS是最著名的层级数据库之一。IMS最初在1960年代为IBM的主机计算机开发，至今仍在大型企业中广泛使用。IMS被应用于银行、保险和电信等多个行业，因其速度和可靠性而著称。
- en: Another example of a hierarchical database is the Windows Registry, which is
    used to store system settings and configuration data on Windows operating systems.
    The registry is organized in a hierarchical structure, with keys representing
    the parent-child relationships between data. This makes it easy to navigate and
    retrieve system settings quickly.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个层级数据库的例子是Windows注册表，它用于存储Windows操作系统的系统设置和配置数据。注册表以层级结构组织，键表示数据之间的父子关系。这使得导航和快速检索系统设置变得更加容易。
- en: In conclusion, hierarchical databases are a type of DBMS that organizes data
    in a tree-like structure with parent-child relationships. They are known for their
    speed and efficiency, as well as their simplicity and ease of maintenance. However,
    they can be inflexible and limited in terms of their ability to represent complex
    data relationships. Despite these limitations, hierarchical databases continue
    to be used in many industries today, particularly in applications that require
    fast and efficient retrieval of data.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，层级数据库是一种以树形结构组织数据并具备父子关系的DBMS。它们因其速度和效率、简便性及易于维护而著称。然而，它们在表示复杂数据关系方面可能较为僵化和有限。尽管存在这些局限性，层级数据库今天仍在许多行业中得到应用，特别是在需要快速高效数据检索的场景中。
- en: 'Here’s an example structure of a hierarchical database model represented in
    JSON:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个表示层级数据库模型的JSON结构示例：
- en: '[PRE0]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This JSON file illustrates a tree-like structure, which is characteristic of
    hierarchical databases. Here, `Alice` is the grandparent and has two children,
    `Bob` and `Diana`, each with their own children (`Charlie` and `Eva`, respectively).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个JSON文件展示了一个树状结构，这是层级数据库的典型特征。在此示例中，`Alice`是祖父母，有两个子女，`Bob`和`Diana`，每个子女都有自己的孩子（分别是`Charlie`和`Eva`）。
- en: This hierarchical database model is useful for representing organizational structures,
    family trees, or any other data that has a tree-like structure. However, it can
    be limiting if the data needs to be queried in more complex ways, such as retrieving
    all employees who have a certain job title regardless of their position in the
    hierarchy. In those cases, a different database model, such as a relational database,
    may be more appropriate.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这种层级数据库模型适用于表示组织结构、家谱或任何其他具有树状结构的数据。然而，如果数据需要以更复杂的方式进行查询，比如检索所有具有特定职位名称的员工，不管他们在层级中的位置如何，那么在这些情况下，可能需要使用其他数据库模型，如关系数据库。
- en: Network database model
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络数据库模型
- en: The network database model is a type of DBMS that is designed to store and query
    data in a hierarchical structure. It was first introduced in the late 1960s as
    an improvement over the earlier hierarchical database model, and it was widely
    used throughout the 1970s and 1980s.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 网络数据库模型是一种DBMS，旨在以层级结构存储和查询数据。它最早在1960年代末期被引入，作为对早期层级数据库模型的改进，并在1970年代和1980年代广泛使用。
- en: The network database model is based on the concept of a network, where data
    is organized into a series of interconnected nodes or records. These records are
    linked together through a series of relationships, which form a network of interconnected
    data.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 网络数据库模型基于网络的概念，在这种模型中，数据被组织成一系列相互连接的节点或记录。这些记录通过一系列关系相互连接，形成一个互联的数据网络。
- en: In the network database model, each record or node in the network is called
    an entity, and each relationship between entities is called a set. A set can be
    thought of as a pointer or link that connects one entity to another. Sets can
    also have attributes, which are properties that describe the relationship between
    entities.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络数据库模型中，网络中的每个记录或节点称为实体，实体之间的每个关系称为集合。集合可以被视为指针或链接，将一个实体连接到另一个实体。集合还可以具有属性，属性是描述实体之间关系的特性。
- en: One of the key features of the network database model is the ability to represent
    complex relationships between entities. For example, an entity in the network
    can have multiple parents or children, and relationships can be defined between
    entities that are not directly connected.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 网络数据库模型的一个关键特点是能够表示实体之间复杂的关系。例如，网络中的一个实体可以有多个父实体或子实体，且可以定义那些没有直接连接的实体之间的关系。
- en: To illustrate this, consider a simple example of a network database for a library.
    The database might have entities for books, authors, publishers, and borrowers.
    Each book entity might have sets that link it to an author, a publisher, and one
    or more borrower entities. Each borrower entity might have a set that links it
    to one or more book entities.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，考虑一个简单的图书馆网络数据库示例。数据库可能包含图书、作者、出版社和借阅者等实体。每个图书实体可能会有一些集合，将它与作者、出版社以及一个或多个借阅者实体链接起来。每个借阅者实体可能会有一个集合，将其与一个或多个图书实体链接起来。
- en: The network database model can be implemented using a variety of different data
    structures, including linked lists, trees, and graphs. These data structures are
    used to represent the relationships between entities and to facilitate efficient
    queries of the data.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 网络数据库模型可以使用多种不同的数据结构来实现，包括链表、树和图。这些数据结构用于表示实体之间的关系，并促进高效的数据查询。
- en: One of the primary advantages of the network database model is its flexibility.
    Because it allows for complex relationships between entities, it can be used to
    model a wide variety of data structures and relationships.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 网络数据库模型的主要优势之一是其灵活性。由于它允许实体之间的复杂关系，因此可以用于建模各种不同的数据结构和关系。
- en: However, the network database model also has some limitations. One of the main
    challenges with this model is that it can be difficult to maintain consistency
    and integrity when there are multiple relationships between entities. For example,
    if a book entity is linked to multiple borrower entities, it can be difficult
    to ensure that the borrower records are updated correctly when the book is checked
    out or returned.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，网络数据库模型也有一些局限性。该模型面临的主要挑战之一是，当实体之间存在多重关系时，保持一致性和完整性可能会变得困难。例如，如果一个图书实体与多个借阅者实体链接，那么在图书被借出或归还时，确保借阅者记录被正确更新可能会变得困难。
- en: Another limitation of the network database model is that it can be less intuitive
    than other database models, such as the relational database model. Because the
    network model relies heavily on sets and relationships, it can be more difficult
    to understand and work with than a table-based model.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 网络数据库模型的另一个局限性是，它可能比其他数据库模型（如关系数据库模型）更难理解。因为网络模型严重依赖于集合和关系，所以它可能比基于表格的模型更难理解和使用。
- en: Despite these limitations, the network database model still has some important
    use cases and advantages. One of the primary advantages of the network database
    model is its ability to handle complex data structures and relationships. This
    makes it particularly well suited for applications that require hierarchical or
    recursive data structures, such as product structures, **bills of materials**
    (**BOMs**), and organization charts.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在这些局限性，网络数据库模型仍然具有一些重要的应用场景和优势。网络数据库模型的主要优势之一是它能够处理复杂的数据结构和关系。这使得它特别适用于需要层次结构或递归数据结构的应用场景，如产品结构、**物料清单**（**BOMs**）和组织结构图。
- en: Another advantage of the network database model is its ability to handle large
    volumes of data. Because the data is organized hierarchically, it can be efficiently
    accessed and queried even when dealing with large datasets.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 网络数据库模型的另一个优点是它能够处理大量数据。由于数据是按层次结构组织的，即使在处理大规模数据集时，也能高效地进行访问和查询。
- en: In addition, the network database model can be more performant than other database
    models in certain situations. For example, when dealing with complex relationships
    between entities, the network model can be faster than the relational model, which
    requires multiple joins to retrieve the same data.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，网络数据库模型在某些情况下可能比其他数据库模型更具性能。例如，在处理实体之间复杂关系时，网络模型可能比关系模型更快，因为关系模型需要多次连接才能检索相同的数据。
- en: Another advantage of the network database model is its ability to support multiple
    access paths to the data. Because the data is organized hierarchically, it can
    be accessed through multiple paths, allowing for greater flexibility in querying
    and reporting.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 网络数据库模型的另一个优点是它能够支持多条数据访问路径。由于数据是按层次结构组织的，因此可以通过多条路径访问数据，从而在查询和报告中提供更大的灵活性。
- en: Despite these advantages, the network database model has largely been superseded
    by the relational database model, which has become the dominant database model
    in use today. This is largely due to the fact that the relational model is more
    intuitive and easier to use than the network model, particularly for non-technical
    users.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有这些优点，网络数据库模型在很大程度上已被关系数据库模型取代，后者已成为当前广泛使用的主流数据库模型。这主要是因为关系模型比网络模型更直观且更易于使用，尤其是对于非技术用户。
- en: In addition, the relational model offers better support for data integrity and
    consistency, making it a better choice for applications where data accuracy and
    reliability are critical.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，关系模型在数据完整性和一致性方面提供了更好的支持，使其成为数据准确性和可靠性至关重要的应用的更好选择。
- en: That being said, the network database model still has some important use cases,
    particularly in niche applications where its strengths in handling hierarchical
    and recursive data structures are particularly valuable.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，网络数据库模型仍然有一些重要的应用场景，特别是在一些特定的应用中，其在处理层次化和递归数据结构方面的优势仍然非常有价值。
- en: In terms of implementation, the network database model can be implemented using
    a variety of different data structures, including linked lists, trees, and graphs.
    These data structures are used to represent the relationships between entities
    and to facilitate efficient queries of the data.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现方面，网络数据库模型可以通过多种不同的数据结构来实现，包括链表、树和图。这些数据结构用于表示实体之间的关系，并促进高效的数据查询。
- en: In summary, the network database model is a hierarchical DBMS that allows for
    complex relationships between entities. While it has some limitations compared
    to other database models, it remains a valuable tool for applications that require
    hierarchical or recursive data structures, such as product structures, BOMs, and
    organization charts.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，网络数据库模型是一个层次化的数据库管理系统，允许实体之间存在复杂的关系。尽管与其他数据库模型相比它有一些局限性，但对于需要层次化或递归数据结构的应用（如产品结构、物料清单和组织结构图）来说，它仍然是一个有价值的工具。
- en: 'Here is an example of a network database structure in JSON format:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 JSON 格式的网络数据库结构示例：
- en: '[PRE1]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, the `Courses` array contains courses and their enrolled students.
    The `Students` array contains students and the courses they are enrolled in. Notice
    how `Bob` is a child node for both `Math101` and `History202`, demonstrating the
    multiple parent-child relationships that are typical in a network database model.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`Courses` 数组包含课程及其注册的学生，`Students` 数组包含学生及其注册的课程。注意，`Bob` 是 `Math101`
    和 `History202` 的子节点，展示了网络数据库模型中典型的多重父子关系。
- en: This JSON structure represents a simple example of a network database model,
    where data is organized hierarchically into a series of interconnected nodes or
    records.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 JSON 结构展示了一个简单的网络数据库模型示例，其中数据按层次结构组织成一系列相互连接的节点或记录。
- en: Relational databases
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关系数据库
- en: The relational database model is a widely used method for organizing and managing
    data in computer systems. It was first introduced by Edgar F. Codd in 1970 and
    has since become the foundation for many modern DBMSs. In this technical deep
    dive, we will explore the key concepts and components that make up the relational
    database model.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 关系数据库模型是一种广泛使用的组织和管理计算机系统中数据的方法。它由埃德加·F·科德（Edgar F. Codd）于1970年首次提出，并且自那时以来，已成为许多现代数据库管理系统（DBMS）的基础。在本技术深入探讨中，我们将探讨构成关系数据库模型的关键概念和组成部分。
- en: Concepts of the relational database model
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关系数据库模型的概念
- en: 'The relational database model is based on several key concepts, including entities,
    attributes, relationships, and constraints:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 关系数据库模型基于几个关键概念，包括实体、属性、关系和约束：
- en: '**Entities**: An entity is a real-world object or concept that can be identified
    and described. In a relational database, an entity is typically represented as
    a table or relation. Each row in the table represents an instance of the entity,
    and each column represents an attribute or property of the entity. For example,
    in a database for a retail store, the entities might include customers, products,
    and orders.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实体**：实体是可以被识别和描述的现实世界中的对象或概念。在关系数据库中，实体通常表示为表或关系。表中的每一行代表实体的一个实例，每一列代表实体的一个属性或特征。例如，在零售商店的数据库中，实体可能包括客户、产品和订单。'
- en: '**Attributes**: An attribute is a characteristic or property of an entity.
    In a relational database, attributes correspond to columns in a table or relation.
    For example, a customer entity might have attributes such as name, address, and
    phone number.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性**：属性是实体的特征或性质。在关系数据库中，属性对应表或关系中的列。例如，客户实体可能具有名称、地址和电话号码等属性。'
- en: '`orders` table might have a foreign key column that refers to the `customer`
    table’s primary key, indicating which customer placed the order.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orders` 表可能有一个外键列，引用 `customer` 表的主键，指示哪个客户下了订单。'
- en: '**Constraints**: Constraints are rules that limit the values that can be stored
    in a database. There are several types of constraints in a relational database,
    including primary keys, foreign keys, unique constraints, and check constraints.
    These constraints help ensure data integrity and consistency. For example, a primary
    key constraint ensures that each row in a table is unique, while a foreign key
    constraint ensures that the values in a column refer to valid primary key values
    in another table.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**约束**：约束是限制可以存储在数据库中的值的规则。在关系数据库中，有几种类型的约束，包括主键、外键、唯一约束和检查约束。这些约束有助于确保数据的完整性和一致性。例如，主键约束确保表中的每一行都是唯一的，而外键约束确保列中的值引用另一个表中有效的主键值。'
- en: Components of the relational database model
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关系数据库模型的组成部分
- en: 'The relational database model is made up of several key components, including
    tables, columns, rows, and keys:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 关系数据库模型由几个关键组成部分构成，包括表、列、行和键：
- en: '**Tables**: In the relational database model, data is organized into tables
    or relations. Each table represents an entity, and each row in the table represents
    an instance of the entity. For example, a customer table might contain rows for
    each individual customer.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表**：在关系数据库模型中，数据被组织成表或关系。每个表代表一个实体，表中的每一行代表该实体的一个实例。例如，客户表可能包含每个个别客户的行。'
- en: '**Columns**: Columns in a table represent attributes or properties of the entity
    represented by the table. Each column has a name and a data type, which specifies
    the type of data that can be stored in the column. Common data types include integers,
    strings, dates, and Booleans. Columns also have a set of constraints that can
    be applied to restrict values that can be stored in the column.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列**：表中的列代表实体的属性或特征。每一列都有一个名称和数据类型，数据类型指定了可以存储在该列中的数据类型。常见的数据类型包括整数、字符串、日期和布尔值。列也可以应用一组约束，以限制可以存储在该列中的值。'
- en: '**Rows**: Rows in a table represent individual instances of the entity represented
    by the table. Each row contains values for each of the table’s columns, representing
    the specific values for each attribute of the entity. For example, a row in a
    customer table might contain values for the customer’s name, address, and phone
    number.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行**：表中的行代表表所表示的实体的各个实例。每一行包含该表每一列的值，表示该实体每个属性的具体值。例如，客户表中的一行可能包含客户的姓名、地址和电话号码等值。'
- en: '**Keys**: Keys are used to uniquely identify rows in a table and establish
    relationships between tables. There are several types of keys in the relational
    database model, including primary keys, foreign keys, and composite keys.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**键**：键用于唯一标识表中的行并建立表之间的关系。关系数据库模型中有多种类型的键，包括主键、外键和复合键。'
- en: '**Primary keys**: A primary key is a column or set of columns in a table that
    uniquely identifies each row in the table. This key is used to enforce data integrity
    and ensure that each row in the table is unique. For example, a customer table
    might use the customer ID as its primary key.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主键**：主键是表中的一列或多列，唯一标识表中的每一行。此键用于强制执行数据完整性，确保表中的每一行都是唯一的。例如，一个客户表可能使用客户ID作为主键。'
- en: '**Foreign keys**: A foreign key is a column or set of columns in a table that
    refers to the primary key of another table. This key is used to establish relationships
    between tables and enforce referential integrity. For example, an orders table
    might have a foreign key column that refers to the primary key of the customer
    table.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外键**：外键是表中的一列或多列，指向另一个表的主键。此键用于建立表之间的关系，并强制执行参照完整性。例如，订单表可能有一个外键列，指向客户表的主键。'
- en: '**Composite keys**: A composite key is a key that consists of multiple columns
    in a table. This key is used when no single column can uniquely identify a row
    in the table. For example, a table that stores customer orders might use a composite
    key consisting of the order ID and the customer ID.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复合键**：复合键是由表中多个列组成的键。当没有单一列能够唯一标识表中的一行时，就会使用复合键。例如，存储客户订单的表可能使用由订单ID和客户ID组成的复合键。'
- en: Advantages of the relational database model
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关系数据库模型的优点
- en: 'The relational database model offers several advantages over other data storage
    methods, including the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 关系数据库模型相对于其他数据存储方法提供了几个优点，包括以下几点：
- en: '**Data consistency and integrity**: The use of constraints and keys helps ensure
    that data is consistent and accurate across tables'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据一致性和完整性**：使用约束和键有助于确保数据在表之间的一致性和准确性。'
- en: '**Scalability**: The relational database model can scale to handle large amounts
    of data and complex relationships between entities'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：关系数据库模型可以扩展以处理大量数据和复杂的实体关系。'
- en: '**Flexibility**: The use of tables and relationships allows data to be organized
    and accessed in a flexible and efficient manner'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性**：使用表和关系可以以灵活高效的方式组织和访问数据。'
- en: '**Data security**: The use of access controls and permissions helps ensure
    that sensitive data is protected from unauthorized access'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据安全性**：使用访问控制和权限有助于确保敏感数据不被未经授权的访问。'
- en: Limitations of the relational database model
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关系数据库模型的局限性
- en: 'While the relational database model offers many advantages, it also has some
    limitations, including the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管关系数据库模型有许多优点，但也存在一些局限性，包括以下几点：
- en: '**Performance**: The use of joins and relationships can sometimes result in
    slower query performance, particularly for large datasets'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：使用联接和关系有时可能导致查询性能较慢，尤其是在处理大型数据集时。'
- en: '**Complexity**: The relational database model can be complex to design and
    manage, particularly for large or complex databases'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂性**：关系数据库模型的设计和管理可能很复杂，尤其是对于大型或复杂的数据库。'
- en: '**Lack of flexibility**: The rigid structure of the relational database model
    can make it difficult to make changes to the data schema or add new functionality
    to the database'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性不足**：关系数据库模型的严格结构可能使得在数据架构或数据库功能上做出更改变得困难。'
- en: '**Data duplication**: In some cases, the relational database model can result
    in data duplication across tables, which can lead to inconsistencies and inefficiencies'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据重复**：在某些情况下，关系数据库模型可能导致表之间的数据重复，从而引发不一致性和低效率。'
- en: '**Limited support for unstructured data**: The relational database model is
    designed primarily for structured data, and may not be well suited for storing
    and querying unstructured data such as images or text documents'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对非结构化数据的支持有限**：关系数据库模型主要为结构化数据设计，可能不适合存储和查询非结构化数据，如图像或文本文件。'
- en: Alternatives to the relational database model
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关系数据库模型的替代方案
- en: 'While the relational database model is widely used and well established, there
    are several alternative data storage methods that address some of its limitations,
    including the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然关系型数据库模型被广泛使用并且非常成熟，但也存在一些替代的数据存储方法，能够解决其部分局限性，包括以下几种：
- en: '**NoSQL databases**: NoSQL databases use a more flexible data model that is
    not based on tables and relationships. This can offer improved scalability and
    performance for certain types of data.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NoSQL 数据库**：NoSQL 数据库采用一种更灵活的数据模型，非基于表格和关系。这能为某些类型的数据提供更好的可扩展性和性能。'
- en: '**Graph databases**: Graph databases are designed specifically for storing
    and querying relationships between entities. They can be particularly useful for
    analyzing complex networks or social graphs.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图数据库**：图数据库专门用于存储和查询实体之间的关系，尤其适用于分析复杂的网络或社交图。'
- en: '**OO databases**: OO databases store data as objects, which can offer improved
    support for complex data structures and relationships.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OO 数据库**：OO 数据库以对象的形式存储数据，能够更好地支持复杂的数据结构和关系。'
- en: In conclusion, the relational database model is a widely used and well-established
    method for organizing and managing data in computer systems. It is based on the
    concepts of entities, attributes, relationships, and constraints, and is made
    up of tables, columns, rows, and keys. While the relational database model offers
    many advantages, it also has some limitations, including performance, complexity,
    and lack of flexibility. Several alternative data storage methods address some
    of these limitations, including NoSQL databases, graph databases, and OO databases.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，关系型数据库模型是一种广泛使用且成熟的数据组织和管理方法，基于实体、属性、关系和约束的概念，组成部分包括表格、列、行和键。尽管关系型数据库模型具有许多优点，但也存在一些局限性，包括性能、复杂性和缺乏灵活性。几种替代数据存储方法可以解决这些局限性，包括
    NoSQL 数据库、图数据库和 OO 数据库。
- en: Example
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: Relational databases are typically represented in a tabular format, whereas
    JSON is a hierarchical data format. However, it is possible to represent relational
    data in JSON format by using nested objects and arrays.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 关系型数据库通常以表格格式表示，而 JSON 是一种层次化的数据格式。然而，可以通过使用嵌套对象和数组，在 JSON 格式中表示关系型数据。
- en: 'Here’s an example of a simple relational database represented in JSON:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个简单的关系型数据库的 JSON 表示：
- en: '[PRE2]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '{'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"customers": ['
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '"customers": ['
- en: '{'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"id": 1,'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '"id": 1,'
- en: '"name": "John",'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '"name": "John",'
- en: '"email": "john@example.com"'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '"email": "john@example.com"'
- en: '},'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"id": 2,'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '"id": 2,'
- en: '"name": "Jane",'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '"name": "Jane",'
- en: '"email": "jane@example.com"'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '"email": "jane@example.com"'
- en: '}'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '],'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '"orders": ['
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '"orders": ['
- en: '{'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"id": 1,'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '"id": 1,'
- en: '"customer_id": 1,'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '"customer_id": 1,'
- en: '"order_date": "2022-03-15",'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '"order_date": "2022-03-15",'
- en: '"total_amount": 100.00'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '"total_amount": 100.00'
- en: '},'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"id": 2,'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '"id": 2,'
- en: '"customer_id": 2,'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '"customer_id": 2,'
- en: '"order_date": "2022-03-16",'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '"order_date": "2022-03-16",'
- en: '"total_amount": 200.00'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '"total_amount": 200.00'
- en: '}'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: ']'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '}'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE3]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this example, we have two tables: `customers` and `orders`. The `customers`
    table has three columns: `id`, `name`, and `email`, and the `orders` table has
    four columns: `id`, `customer_id`, `order_date`, and `total_amount`. The `customer_id`
    column in the `orders` table is a foreign key that references the `id` column
    in the `customers` table.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们有两个表格：`customers` 和 `orders`。`customers` 表格有三列：`id`、`name` 和 `email`，`orders`
    表格有四列：`id`、`customer_id`、`order_date` 和 `total_amount`。`orders` 表格中的 `customer_id`
    列是一个外键，引用了 `customers` 表格中的 `id` 列。
- en: Using this JSON representation, we can easily retrieve all orders associated
    with a particular customer by searching for the customer’s ID in the `customer_id`
    column of the `orders` table.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种 JSON 表示法，我们可以通过在 `orders` 表格的 `customer_id` 列中查找客户的 ID，轻松检索与特定客户相关的所有订单。
- en: 'Here’s the same example in a tabular format:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是相同的示例，以表格格式展示：
- en: '[PRE4]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the tabular format, each table is represented as a set of rows and columns.
    The `customers` table has three columns: `id`, `name`, and `email`, and two rows
    representing two customers. The `orders` table has four columns: `id`, `customer_id`,
    `order_date`, and `total_amount`, and two rows representing two orders. The `customer_id`
    column in the `orders` table serves as a foreign key that references the `id`
    column in the `customers` table, linking the two tables together.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在表格格式中，每个表格由一组行和列表示。`customers` 表格有三列：`id`、`name` 和 `email`，以及两行代表两位客户。`orders`
    表格有四列：`id`、`customer_id`、`order_date` 和 `total_amount`，并且有两行代表两笔订单。`orders` 表格中的
    `customer_id` 列作为外键，引用了 `customers` 表格中的 `id` 列，将两个表格连接起来。
- en: OO databases
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OO 数据库
- en: The OO database model is a type of DBMS that uses an OOP language to create,
    store, and retrieve data. It is based on the principles of OOP, which means it
    treats data as objects. In this model, data is represented as objects that have
    attributes and methods, just as in OOP.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: OO数据库模型是一种使用面向对象编程语言（OOP语言）来创建、存储和检索数据的数据库管理系统（DBMS）。它基于OOP的原理，意味着它将数据视为对象。在这种模型中，数据被表示为具有属性和方法的对象，就像在OOP中一样。
- en: In the OO database model, data is stored in an OO database, which is a collection
    of objects that are organized into classes. A class is a blueprint for creating
    objects that have the same attributes and methods. Objects are instances of a
    class, and each object has its own unique set of values for its attributes.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在OO数据库模型中，数据存储在OO数据库中，OO数据库是由按类组织的一组对象组成的。类是创建具有相同属性和方法的对象的蓝图。对象是类的实例，每个对象都有自己唯一的属性值集合。
- en: One of the main advantages of the OO database model is that it allows for complex
    data structures to be created and stored in the database. This is because objects
    can be nested inside other objects, allowing for more complex relationships between
    data.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: OO数据库模型的主要优点之一是它允许创建和存储复杂的数据结构。因为对象可以嵌套在其他对象内部，从而允许数据之间建立更复杂的关系。
- en: Another advantage of the OO database model is that it is highly flexible. Because
    data is stored as objects, it is easy to add new attributes and methods to objects
    as needed. This makes it easy to modify the database schema as requirements change,
    without having to make significant changes to the underlying database structure.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: OO数据库模型的另一个优点是它具有高度的灵活性。由于数据以对象的形式存储，因此可以根据需要轻松地为对象添加新的属性和方法。这使得在需求变化时，修改数据库模式变得非常容易，而无需对底层数据库结构进行重大更改。
- en: One of the challenges of the OO database model is that it can be difficult to
    map it onto a traditional **relational DBMS** (**RDBMS**). This is because the
    OO model uses a different structure and different operations than a traditional
    RDBMS. Some OO databases have attempted to bridge this gap by providing a relational
    view of the OO data, but this can come at the cost of some of the flexibility
    and performance advantages of the OO model.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: OO数据库模型的一个挑战是，它可能很难映射到传统的**关系型数据库管理系统**（**RDBMS**）上。这是因为OO模型使用的结构和操作与传统的RDBMS不同。一些OO数据库试图通过提供OO数据的关系视图来弥补这一差距，但这可能会牺牲一些OO模型的灵活性和性能优势。
- en: To address this challenge, some OO databases have been developed that are specifically
    designed to support the OO model. These databases typically provide a range of
    features that are not available in traditional RDBMSs, such as support for complex
    data structures, support for inheritance and polymorphism, and support for object
    versioning and transactions.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这一挑战，一些OO数据库已被开发出来，专门设计用于支持OO模型。这些数据库通常提供传统RDBMS所没有的一些特性，如对复杂数据结构的支持、对继承和多态的支持，以及对对象版本控制和事务的支持。
- en: One of the key features of the OO database model is support for inheritance
    and polymorphism. Inheritance allows objects to inherit attributes and methods
    from their parent classes, making it easy to create new objects that are similar
    to existing ones. Polymorphism allows objects to be treated as instances of their
    parent classes, which can simplify code and make it more flexible.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: OO数据库模型的一个关键特性是支持继承和多态。继承允许对象从其父类继承属性和方法，从而使得创建与现有对象相似的新对象变得容易。多态允许将对象视为其父类的实例，这可以简化代码并使其更加灵活。
- en: Another important feature of the OO database model is support for transactions.
    Transactions allow multiple operations to be grouped together into a single unit
    of work, which ensures that either all of the operations are completed successfully
    or none of them are completed at all. This helps to ensure the integrity of the
    data in the database and can be particularly important in applications where data
    consistency is critical.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: OO数据库模型的另一个重要特性是支持事务。事务允许将多个操作组合成一个单一的工作单元，从而确保所有操作要么都成功完成，要么都没有完成。这有助于确保数据库中数据的完整性，并且在数据一致性至关重要的应用中尤其重要。
- en: OO databases can store a wide variety of data types, including text, images,
    audio, and video. This makes them well suited for applications that deal with
    multimedia data, such as video editing software or digital asset management systems.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象数据库可以存储多种类型的数据，包括文本、图像、音频和视频。这使得它们非常适合处理多媒体数据的应用程序，例如视频编辑软件或数字资产管理系统。
- en: One potential disadvantage of the OO database model is that it can be less efficient
    than a traditional RDBMS when it comes to queries that involve complex joins or
    aggregations. This is because the OO model is optimized for accessing individual
    objects, rather than for performing complex queries across multiple objects.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象数据库模型的一个潜在缺点是，当涉及复杂的连接或聚合查询时，它可能不如传统的关系型数据库管理系统（RDBMS）高效。这是因为面向对象模型优化的是访问单个对象，而不是跨多个对象执行复杂查询。
- en: To address this challenge, some OO databases have included support for SQL,
    which allows developers to perform complex queries using a familiar syntax. However,
    this can come at the cost of some of the flexibility and performance advantages
    of the OO model.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对这一挑战，一些面向对象（OO）数据库已经包含对 SQL 的支持，这使得开发人员能够使用熟悉的语法执行复杂的查询。然而，这可能会牺牲一些面向对象模型的灵活性和性能优势。
- en: Another potential disadvantage of the OO database model is that it can be more
    difficult to learn and use than a traditional RDBMS. This is because it requires
    developers to learn a new programming paradigm and to become familiar with the
    specific features and syntax of the OO database system they are using.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象数据库模型的另一个潜在缺点是，它可能比传统的关系型数据库管理系统更难学习和使用。这是因为它要求开发人员学习新的编程范式，并熟悉他们所使用的面向对象数据库系统的特定功能和语法。
- en: Overall, the OO database model is a powerful and flexible approach to database
    management that is well suited for applications that deal with complex data structures
    and multimedia data. While it can be more challenging to learn and use than a
    traditional RDBMS, it offers significant advantages in terms of flexibility, performance,
    and data integrity. As such, it is an important option for developers and organizations
    that need to manage complex data in a flexible and efficient way.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，面向对象数据库模型是一个强大而灵活的数据库管理方法，非常适合处理复杂数据结构和多媒体数据的应用程序。虽然它比传统的关系型数据库管理系统更具挑战性，但在灵活性、性能和数据完整性方面提供了显著优势。因此，它是需要以灵活和高效的方式管理复杂数据的开发人员和组织的重要选择。
- en: Example
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: 'JSON is often used to represent OO data structures in web applications. Here
    is an example of an OO data structure represented in JSON:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 通常用于在 Web 应用程序中表示面向对象数据结构。以下是一个以 JSON 表示的面向对象数据结构示例：
- en: '[PRE5]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '{'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"person": {'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '"person": {'
- en: '"name": "John Smith",'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '"name": "John Smith",'
- en: '"age": 35,'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '"age": 35,'
- en: '"address": {'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '"address": {'
- en: '"street": "123 Main St",'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '"street": "123 Main St",'
- en: '"city": "Anytown",'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '"city": "Anytown",'
- en: '"state": "CA",'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '"state": "CA",'
- en: '"zip": "12345"'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '"zip": "12345"'
- en: '},'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '"phoneNumbers": ['
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '"phoneNumbers": ['
- en: '{'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "home",'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "home",'
- en: '"number": "555-555-1234"'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '"number": "555-555-1234"'
- en: '},'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "work",'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "work",'
- en: '"number": "555-555-5678"'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '"number": "555-555-5678"'
- en: '}'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: ']'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '}'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE6]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this example, there is a top-level object called `person` that represents
    a person with a name, age, address, and phone numbers. The name and age are represented
    as simple attributes of the `person` object. The address is represented as a nested
    object with its own set of attributes, including the street, city, state, and
    zip code.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，有一个顶层对象叫做 `person`，表示一个包含姓名、年龄、地址和电话号码的个人。姓名和年龄作为 `person` 对象的简单属性表示。地址则表示为一个嵌套对象，具有自己的一组属性，包括街道、城市、州和邮政编码。
- en: The phone numbers are represented as an array of objects, where each object
    represents a phone number with a type (for example, `home` or `work`) and a number.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 电话号码被表示为一个对象数组，其中每个对象表示一个带有类型（例如，`home` 或 `work`）和号码的电话号码。
- en: NoSQL database paradigms
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NoSQL 数据库范式
- en: NoSQL databases are a class of non-relational databases that are designed to
    handle large volumes of unstructured or semi-structured data. Unlike traditional
    relational databases, which store data in tables with strict schema definitions,
    NoSQL databases allow for more flexible and dynamic data models.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL 数据库是一类非关系型数据库，旨在处理大量非结构化或半结构化的数据。与传统的关系型数据库不同，后者将数据存储在具有严格模式定义的表格中，NoSQL
    数据库则允许使用更加灵活和动态的数据模型。
- en: They are often used in big data and web applications, where scalability and
    performance are critical. They can handle high volumes of data and support distributed
    architectures, making them ideal for applications that require HA and **fault**
    **tolerance** (**FT**).
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 它们常常用于大数据和Web应用程序中，这些应用程序对可扩展性和性能有很高的要求。它们能够处理大量数据并支持分布式架构，特别适合那些需要高可用性（HA）和**容错**（**FT**）的应用程序。
- en: NoSQL databases have paradigms because they are designed to handle different
    types of data and workloads than traditional relational databases. These paradigms
    are essentially different models for organizing and storing data, and they offer
    different trade-offs in terms of scalability, performance, consistency, and ease
    of use.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL数据库有不同的范式，因为它们设计用来处理与传统关系型数据库不同类型的数据和工作负载。这些范式本质上是组织和存储数据的不同模型，它们在可扩展性、性能、一致性和易用性方面提供了不同的权衡。
- en: For example, document-oriented databases such as MongoDB and Couchbase store
    data as flexible, JSON-like documents that can be easily nested and denormalized.
    This makes them well suited for storing complex, unstructured data, such as social
    media posts or product catalogs, and for supporting agile development workflows.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，像MongoDB和Couchbase这样的面向文档的数据库将数据存储为灵活的、类似JSON的文档，可以轻松嵌套和去规范化。这使它们非常适合存储复杂的无结构数据，如社交媒体帖子或产品目录，并且支持敏捷开发工作流。
- en: Key-value stores such as **REmote DIctionary Server** (**Redis**) and Riak,
    on the other hand, store data as simple, unstructured key-value pairs that can
    be quickly accessed and updated. This makes them ideal for high-speed data caching
    and session management, as well as for supporting real-time applications such
    as chat and gaming.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 像**远程字典服务器**（**Redis**）和Riak这样的键值存储，则将数据存储为简单的、无结构的键值对，能够快速访问和更新。这使它们非常适合高速数据缓存和会话管理，以及支持实时应用程序，如聊天和游戏。
- en: Column-family stores such as Apache Cassandra and HBase store data as columns
    rather than rows, which allows them to support very large datasets and high write
    throughput. This makes them well suited for big data analytics and other applications
    that require massive scalability.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 列族存储，如Apache Cassandra和HBase，将数据存储为列而非行，这使得它们能够支持非常大的数据集和高写入吞吐量。这使它们非常适合大数据分析和其他需要大规模扩展的应用程序。
- en: Each of these paradigms offers different benefits and trade-offs, and choosing
    the right one depends on the specific requirements of the application.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这些范式各自提供不同的优势和权衡，选择合适的范式取决于应用程序的具体需求。
- en: Let’s dive deeper into them.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨这些缺点。
- en: Document-oriented databases
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 面向文档的数据库
- en: Document-oriented databases are designed to store data in a document format,
    such as JSON, BSON, or XML. Each document can have a different structure, which
    makes them flexible and easy to scale horizontally. Document databases are often
    used for web applications, **content management systems** (**CMSs**), and e-commerce
    sites.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 面向文档的数据库设计用于以文档格式（如JSON、BSON或XML）存储数据。每个文档可以有不同的结构，这使它们灵活且易于水平扩展。文档数据库通常用于Web应用程序、**内容管理系统**（**CMSs**）和电子商务网站。
- en: '*Examples*: MongoDB, Couchbase, Amazon DocumentDB, Azure Cosmos DB.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例*：MongoDB、Couchbase、Amazon DocumentDB、Azure Cosmos DB。'
- en: 'The pros are as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 优点如下：
- en: '**Flexible schema**: Document-oriented databases allow for flexible and dynamic
    schema design, which makes it easier to handle unstructured or semi-structured
    data'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活的架构**：面向文档的数据库允许灵活和动态的架构设计，使得处理无结构或半结构化数据变得更容易。'
- en: '**High performance**: Document databases can provide high performance and low
    latency because they can store all related data in a single document, which reduces
    the need for joins and other complex queries'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高性能**：文档数据库能够提供高性能和低延迟，因为它们可以将所有相关数据存储在一个文档中，从而减少对连接和其他复杂查询的需求。'
- en: '**Horizontal scalability**: Document-oriented databases can easily scale horizontally
    by adding more nodes to the cluster, which makes them well suited for high-traffic
    applications'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平扩展性**：面向文档的数据库可以通过向集群中添加更多节点来轻松实现水平扩展，这使它们非常适合高流量应用程序。'
- en: 'The cons are as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点如下：
- en: '**Limited transaction support**: Some document-oriented databases do not support
    ACID transactions, which can make it challenging to maintain data consistency
    in high-concurrency environments'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有限的事务支持**：一些面向文档的数据库不支持ACID事务，这可能使得在高并发环境中维持数据一致性变得困难。'
- en: '**Data duplication**: Because each document can have a different structure,
    there can be data duplication across documents, which can increase storage requirements'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据重复**：由于每个文档可以有不同的结构，文档之间可能会出现数据重复，这可能增加存储需求'
- en: '**Limited query flexibility**: Document-oriented databases are optimized for
    querying within a single document, which can make it challenging to perform complex
    queries across multiple documents'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有限的查询灵活性**：文档导向数据库优化了单个文档内部的查询，这使得在多个文档之间执行复杂查询变得具有挑战性'
- en: Fun fact
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 趣味事实
- en: One example of a document-oriented database is MongoDB. In MongoDB, data is
    stored in documents, which are JSON-like data structures that can have nested
    fields and arrays. Each document can have a unique identifier, called an **ObjectId**,
    which is automatically generated by MongoDB.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 一个文档导向数据库的例子是 MongoDB。在 MongoDB 中，数据以文档形式存储，文档是类似 JSON 的数据结构，能够包含嵌套字段和数组。每个文档都有一个唯一的标识符，称为**ObjectId**，该标识符由
    MongoDB 自动生成。
- en: 'For example, suppose you are building a blog application, and you want to store
    blog posts in a database. In MongoDB, you could represent each blog post as a
    document, like this:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你正在构建一个博客应用程序，并且想要将博客文章存储在数据库中。在 MongoDB 中，你可以将每篇博客文章表示为一个文档，如下所示：
- en: '[PRE7]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`{`'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`"``_id": ObjectId("6151a3a3bce2f46f5d2b2e8a"),`'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`"``_id": ObjectId("6151a3a3bce2f46f5d2b2e8a"),`'
- en: '`"title": "My First` `Blog Post",`'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`"title": "我的第一篇` `博客文章",`'
- en: '`"body": "Lorem ipsum dolor sit amet, consectetur` `adipiscing elit...",`'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`"body": "Lorem ipsum dolor sit amet, consectetur` `adipiscing elit...",`'
- en: '`"author": "``John Doe",`'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`"author": "``John Doe",`'
- en: '`"tags": ["mongodb", "``database", "blogging"],`'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`"tags": ["mongodb", "``database", "blogging"],`'
- en: '`"``created_at": ISODate("2022-10-01T12:30:00Z"),`'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`"``created_at": ISODate("2022-10-01T12:30:00Z"),`'
- en: '`"``updated_at": ISODate("2022-10-02T15:45:00Z")`'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`"``updated_at": ISODate("2022-10-02T15:45:00Z")`'
- en: '`}`'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '[PRE8]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this example, each blog post is represented as a document with a unique `_id`
    field, a `title` field, a `body` field, an `author` field, a `tags` field (which
    is an array of strings), and `created_at` and `updated_at` fields (which are `ISODate`
    objects representing when the post was created and last updated, respectively).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，每篇博客文章都表示为一个文档，包含一个唯一的 `_id` 字段、一个 `title` 字段、一个 `body` 字段、一个 `author`
    字段、一个 `tags` 字段（它是一个字符串数组）以及 `created_at` 和 `updated_at` 字段（它们是 `ISODate` 对象，分别表示文章的创建时间和最后更新时间）。
- en: You can then use MongoDB’s query language to retrieve or manipulate these documents
    based on their fields and values.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以使用 MongoDB 的查询语言根据文档的字段和值来检索或操作这些文档。
- en: Key-value databases
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 键值数据库
- en: Key-value databases store data as a collection of key-value pairs, where each
    key is unique and maps to a value. Key-value databases are simple and fast, making
    them suitable for caching and session management. They are often used for real-time
    applications and distributed systems.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 键值数据库以键值对集合的形式存储数据，其中每个键都是唯一的，并映射到一个值。键值数据库简单且快速，适合用于缓存和会话管理。它们常用于实时应用程序和分布式系统中。
- en: '*Examples*: Redis, Riak, Amazon DynamoDB, Azure Cache for Redis.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '*例子*：Redis, Riak, Amazon DynamoDB, Azure Cache for Redis。'
- en: 'The pros are as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 优点如下：
- en: '**High performance**: Key-value databases are designed for high-performance
    and low-latency access to data, making them ideal for real-time applications'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高性能**：键值数据库专为高性能和低延迟数据访问设计，使其成为实时应用程序的理想选择'
- en: '**Scalability**: Key-value databases can easily scale horizontally by adding
    more nodes to the cluster, which makes them well suited for high-traffic applications'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：键值数据库可以通过向集群中添加更多节点来水平扩展，这使得它们非常适合高流量应用程序'
- en: '**Low overhead**: Key-value databases have minimal overhead and can be used
    for caching and session management without adding significant overhead to the
    application'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低开销**：键值数据库具有最小的开销，可以用于缓存和会话管理，而不会给应用程序带来显著的开销'
- en: 'The cons are as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点如下：
- en: '**Limited query support**: Key-value databases are optimized for key-value
    lookups and do not support complex queries or aggregations'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有限的查询支持**：键值数据库优化了键值查找，不支持复杂的查询或聚合'
- en: '**Limited data modeling**: Key-value databases do not support relationships
    between data, which can make it challenging to model complex data structures'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有限的数据建模**：键值数据库不支持数据之间的关系，这使得建模复杂的数据结构变得具有挑战性'
- en: '**Limited support for secondary indexes**: Some key-value databases do not
    support secondary indexes, which can make it challenging to perform efficient
    queries on non-primary keys'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对二级索引的支持有限**：一些键值数据库不支持二级索引，这可能使得在非主键上执行高效查询变得困难'
- en: Fun fact
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 趣味事实
- en: One example of a key-value database is Redis. In Redis, data is stored as key-value
    pairs, where keys are unique identifiers that map to values. Redis supports various
    data types for values, such as strings, hashes, lists, sets, and sorted sets.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 一个键值数据库的例子是 Redis。在 Redis 中，数据以键值对的形式存储，其中键是唯一标识符，映射到值。Redis 支持多种数据类型作为值，例如字符串、哈希、列表、集合和有序集合。
- en: 'For example, suppose you are building an e-commerce application, and you want
    to store shopping cart information for each user. In Redis, you could represent
    each user’s shopping cart as a key-value pair, where the key is the user’s ID
    and the value is a hash containing the items in the cart and their quantities,
    like this:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你正在构建一个电子商务应用程序，且你想存储每个用户的购物车信息。在 Redis 中，你可以将每个用户的购物车表示为一个键值对，其中键是用户的
    ID，值是一个包含购物车中商品及其数量的哈希，像这样：
- en: '[PRE9]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`> HSET cart:1234` `item:apple 2`'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`> HSET cart:1234` `item:apple 2`'
- en: '`(``integer) 1`'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`(``integer) 1`'
- en: '`> HSET cart:1234` `item:banana 1`'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`> HSET cart:1234` `item:banana 1`'
- en: '`(``integer) 1`'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`(``integer) 1`'
- en: '`> HSET cart:1234` `item:orange 3`'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`> HSET cart:1234` `item:orange 3`'
- en: '`(``integer) 1`'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`(``integer) 1`'
- en: '[PRE10]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In this example, the `cart:1234` key maps to a hash with three fields: `item:apple`,
    `item:banana`, and `item:orange`. The values of these fields represent the quantities
    of the corresponding items in the user’s shopping cart.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`cart:1234`键映射到一个包含三个字段的哈希：`item:apple`、`item:banana` 和 `item:orange`。这些字段的值表示用户购物车中对应商品的数量。
- en: You can then use Redis commands to retrieve or manipulate these key-value pairs
    based on their keys and values. For example, you can use the `HGETALL` command
    to retrieve all the fields and values of a hash, or the `HINCRBY` command to increment
    the quantity of a specific item in a hash.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以使用 Redis 命令根据键和值来检索或操作这些键值对。例如，你可以使用`HGETALL`命令来检索哈希的所有字段和值，或者使用`HINCRBY`命令来增加哈希中特定项目的数量。
- en: Column-family databases
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列族数据库
- en: Column-family databases are designed to store data in column families, which
    are groups of columns that are stored together. Each column family can have a
    different schema, allowing for flexible and efficient data storage. Column-family
    databases are often used for large-scale data processing and analytics.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 列族数据库被设计用来存储在列族中，列族是存储在一起的列的集合。每个列族可以有不同的模式，允许灵活且高效的数据存储。列族数据库通常用于大规模数据处理和分析。
- en: '*Examples*: Apache Cassandra, Apache HBase, Amazon Keyspaces, Azure Cosmos
    DB.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例*：Apache Cassandra、Apache HBase、Amazon Keyspaces、Azure Cosmos DB。'
- en: 'The pros are as follows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 优点如下：
- en: '**Scalability**: Column-family databases can easily scale horizontally by adding
    more nodes to the cluster, making them well suited for large-scale distributed
    systems.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：列族数据库可以通过向集群中添加更多节点来轻松水平扩展，使其非常适合大规模分布式系统。'
- en: '**High performance**: Column-family databases can provide high performance
    and low latency because they store related data in a single-column family, which
    reduces the need for joins and other complex queries'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高性能**：列族数据库可以提供高性能和低延迟，因为它们将相关数据存储在单一列族中，从而减少了对联接和其他复杂查询的需求。'
- en: '**Flexible schema**: Column-family databases allow for flexible and dynamic
    schema design, which makes it easier to handle unstructured or semi-structured
    data'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活的模式**：列族数据库允许灵活和动态的模式设计，这使得处理非结构化或半结构化数据变得更加容易。'
- en: 'The cons are as follows:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点如下：
- en: '**Limited transaction support**: Some column-family databases do not support
    ACID transactions, which can make it challenging to maintain data consistency
    in high-concurrency environments'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有限的事务支持**：一些列族数据库不支持 ACID 事务，这可能使得在高并发环境中保持数据一致性变得具有挑战性。'
- en: '**Complex data modeling**: Column-family databases require careful consideration
    of the data model, which can make them challenging to use for applications with
    complex relationships between data points'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂的数据建模**：列族数据库需要仔细考虑数据模型，这使得它们在处理数据点之间关系复杂的应用时变得具有挑战性。'
- en: '**Limited query support**: Column-family databases are optimized for querying
    within a single-column family, which can make it challenging to perform complex
    queries across multiple-column families'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有限的查询支持**：列族数据库针对单一列族内的查询进行了优化，这可能使得在多个列族之间进行复杂查询变得具有挑战性。'
- en: Fun fact
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 趣味事实
- en: One example of a column-oriented database is Apache Cassandra. In a column-oriented
    database, data is stored in columns rather than rows, which allows for more efficient
    querying and aggregation of large amounts of data.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 一个列式数据库的例子是 Apache Cassandra。在列式数据库中，数据以列而非行的形式存储，这使得大规模数据查询和聚合更加高效。
- en: In Cassandra, the data model is based on a keyspace, which is a namespace that
    contains one or more column families. Each column family is a collection of rows,
    where each row is identified by a unique key. Each row in a column family can
    have multiple columns, where each column has a name, a value, and a timestamp.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在Cassandra中，数据模型基于一个键空间（keyspace），这是一个包含一个或多个列族（column families）的命名空间。每个列族是若干行的集合，每行由唯一的键标识。列族中的每一行可以有多个列，每列有一个名称、一个值和一个时间戳。
- en: 'For example, suppose you are building a social media application, and you want
    to store user posts in a database. In Cassandra, you could represent each post
    as a row in a column family, where each column represents a different attribute
    of the post, like this:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你正在构建一个社交媒体应用程序，并且希望将用户的帖子存储在数据库中。在Cassandra中，你可以将每个帖子表示为列族中的一行，每列表示帖子的不同属性，像这样：
- en: '[PRE11]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`CREATE TABLE` `posts (`'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`CREATE TABLE` `posts (`'
- en: '`user_id uuid,`'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`user_id uuid,`'
- en: '`post_id timeuuid,`'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`post_id timeuuid,`'
- en: '`title text,`'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`title text,`'
- en: '`body text,`'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`body text,`'
- en: '`tags set<text>,`'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`tags set<text>,`'
- en: '`created_at timestamp,`'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`created_at timestamp,`'
- en: '`PRIMARY KEY ((user_id),` `created_at, post_id)`'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`PRIMARY KEY ((user_id),` `created_at, post_id)`'
- en: '`);`'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`);`'
- en: '[PRE12]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this example, the `posts` table has a composite primary key consisting of
    the `user_id`, `created_at`, and `post_id` columns. The `user_id` column is used
    as the partition key, which determines the node on which the data is stored. The
    `created_at` and `post_id` columns are used as clustering keys, which determine
    the order of the rows within each partition.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`posts` 表有一个复合主键，由 `user_id`、`created_at` 和 `post_id` 列组成。`user_id` 列用作分区键，决定数据存储的节点。`created_at`
    和 `post_id` 列用作聚簇键，决定每个分区内行的顺序。
- en: You can then use `SELECT` statement to retrieve all posts by a specific user,
    or the `UPDATE` statement to update the title or body of a specific post.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `SELECT` 语句来检索特定用户的所有帖子，或者使用 `UPDATE` 语句来更新特定帖子的标题或内容。
- en: Graph databases
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图数据库
- en: Graph databases store data in a graph structure, with nodes representing entities
    and edges representing relationships between them. Graph databases are highly
    efficient for querying complex relationships between data points, making them
    popular for use cases such as social networks and recommendation engines.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 图数据库以图形结构存储数据，其中节点表示实体，边表示它们之间的关系。图数据库在查询数据点之间的复杂关系时具有高效率，因此在社交网络和推荐引擎等应用场景中非常受欢迎。
- en: '*Examples*: Neo4j, ArangoDB, Amazon Neptune, Azure Cosmos DB.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例*：Neo4j，ArangoDB，Amazon Neptune，Azure Cosmos DB。'
- en: 'The pros are as follows:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 优点如下：
- en: '**Efficient relationship queries**: Graph databases are optimized for querying
    complex relationships between data points, which makes them well suited for applications
    that require efficient relationship queries'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高效的关系查询**：图数据库在查询数据点之间的复杂关系时进行了优化，使其非常适合需要高效关系查询的应用程序。'
- en: '**Flexible schema**: Graph databases allow for flexible and dynamic schema
    design, which makes it easier to handle unstructured or semi-structured data'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活的架构**：图数据库允许灵活和动态的架构设计，使得处理非结构化或半结构化数据更加容易。'
- en: '**High performance**: Graph databases can provide high performance and low
    latency because they store related data in a single graph structure, which reduces
    the need for joins and other complex queries'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高性能**：图数据库能够提供高性能和低延迟，因为它们将相关数据存储在单一的图形结构中，从而减少了联接和其他复杂查询的需求。'
- en: 'The cons are as follows:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点如下：
- en: '**Limited scalability**: Graph databases can be challenging to scale horizontally
    because they require complex data partitioning and replication strategies to maintain
    data consistency'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有限的可扩展性**：图数据库可能在水平扩展上遇到挑战，因为它们需要复杂的数据分区和复制策略以维持数据一致性。'
- en: '**Limited query flexibility**: Graph databases are optimized for querying relationships
    between data points, which can make it challenging to perform complex queries
    that involve multiple types of entities or relationships'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有限的查询灵活性**：图数据库优化了数据点之间关系的查询，这可能使得执行涉及多种实体或关系的复杂查询变得具有挑战性。'
- en: '**Limited data modeling**: Graph databases require careful consideration of
    the data model, which can make them challenging to use for applications with complex
    relationships between data points'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有限的数据建模**：图数据库需要仔细考虑数据模型，这可能使它们在处理具有复杂关系的应用程序时变得具有挑战性。'
- en: Fun fact
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的事实
- en: One example of a graph database is Neo4j. In a graph database, data is stored
    as nodes and edges, where nodes represent entities and edges represent the relationships
    between them. Graph databases are particularly useful for modeling complex relationships
    and performing graph-based queries, such as pathfinding and recommendation algorithms.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 一个图数据库的例子是 Neo4j。在图数据库中，数据以节点和边的形式存储，其中节点表示实体，边表示它们之间的关系。图数据库特别适合于建模复杂的关系并执行基于图的查询，例如路径查找和推荐算法。
- en: 'For example, suppose you are building a social network application, and you
    want to store information about users and their relationships. In Neo4j, you could
    represent each user as a node, and each relationship between users as an edge,
    like this:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你正在构建一个社交网络应用程序，并且你想要存储关于用户及其关系的信息。在 Neo4j 中，你可以将每个用户表示为一个节点，将用户之间的每种关系表示为一条边，如下所示：
- en: '[PRE13]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`(:User {id: "1234", name: "Alice"})-[:FRIENDS_WITH]->(:User {id: "5678",`
    `name: "Bob"})`'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`(:User {id: "1234", name: "Alice"})-[:FRIENDS_WITH]->(:User {id: "5678",`
    `name: "Bob"})`'
- en: '`(:User {id: "1234", name: "Alice"})-[:FRIENDS_WITH]->(:User {id: "9012",`
    `name: "Charlie"})`'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`(:User {id: "1234", name: "Alice"})-[:FRIENDS_WITH]->(:User {id: "9012",`
    `name: "Charlie"})`'
- en: '`(:User {id: "5678", name: "Bob"})-[:FRIENDS_WITH]->(:User {id: "9012",` `name:
    "Charlie"})`'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '`(:User {id: "5678", name: "Bob"})-[:FRIENDS_WITH]->(:User {id: "9012",` `name:
    "Charlie"})`'
- en: '[PRE14]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this example, each node represents a user with a unique `id` and `name` value.
    Each relationship between users is represented as an edge with a type of `FRIENDS_WITH`.
    The direction of the edge indicates the direction of the relationship (for example,
    `Alice` is friends with `Bob`, but `Bob` is also friends with `Alice`).
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，每个节点表示一个具有唯一 `id` 和 `name` 值的用户。每个用户之间的关系通过一条类型为 `FRIENDS_WITH` 的边来表示。边的方向表示关系的方向（例如，`Alice`
    是 `Bob` 的朋友，但 `Bob` 也同样是 `Alice` 的朋友）。
- en: You can then use Neo4j’s query language, Cypher, to retrieve or manipulate these
    nodes and edges based on their properties and relationships. For example, you
    can use the `MATCH` statement to find all the friends of a specific user, or the
    `CREATE` statement to add a new user or relationship to the graph.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以使用 Neo4j 的查询语言 Cypher，根据节点和边的属性及其关系来检索或操作这些节点和边。例如，你可以使用 `MATCH` 语句查找特定用户的所有朋友，或者使用
    `CREATE` 语句向图中添加新用户或关系。
- en: In summary, NoSQL databases come in different paradigms, each with its own strengths
    and weaknesses. Document-oriented databases are flexible and highly scalable but
    may have limited query flexibility and transaction support. Key-value databases
    are simple and fast but may have limited query support and data modeling capabilities.
    Column-family databases are optimized for large-scale data processing but may
    have limited query support and complex data modeling requirements. Graph databases
    are highly efficient for querying complex relationships between data points but
    may have limited scalability and query flexibility. It’s important to consider
    the specific requirements of your application when choosing a NoSQL database paradigm.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，NoSQL 数据库有不同的范式，每种范式都有其独特的优缺点。面向文档的数据库灵活且具有高度的可扩展性，但可能在查询灵活性和事务支持方面有限。键值数据库简单且快速，但可能在查询支持和数据建模能力方面有限。列族数据库针对大规模数据处理进行了优化，但可能在查询支持和复杂的数据建模要求方面有限。图数据库对于查询数据点之间复杂关系非常高效，但在可扩展性和查询灵活性方面可能有所限制。在选择
    NoSQL 数据库范式时，考虑应用程序的具体需求非常重要。
- en: Data warehouses
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据仓库
- en: A data warehouse is a large, centralized repository of data that is used for
    storing and analyzing data from multiple sources. It is designed to support **business
    intelligence** (**BI**) activities, such as reporting, data mining, and **online
    analytical processing** (**OLAP**). In this overview, we will discuss the technical
    aspects of data warehouses, including their architecture, data modeling, and integration.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 数据仓库是一个大型的集中式数据存储库，用于存储和分析来自多个来源的数据。它旨在支持**商业智能**（**BI**）活动，如报告、数据挖掘和**在线分析处理**（**OLAP**）。在本概述中，我们将讨论数据仓库的技术方面，包括其架构、数据建模和集成。
- en: Architecture
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 架构
- en: 'The architecture of a data warehouse can be divided into three layers: the
    data source layer, the data storage layer, and the data access layer.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 数据仓库的架构可以分为三个层次：数据源层、数据存储层和数据访问层。
- en: The data source layer consists of all the systems that provide data to the data
    warehouse. These systems can include transactional databases, operational data
    stores, and external data sources. Data from these sources is **extracted, transformed,
    and loaded** (**ETL**) into the data warehouse.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 数据源层包含所有向数据仓库提供数据的系统。这些系统可以包括事务数据库、操作数据存储和外部数据源。来自这些来源的数据被**提取、转换和加载**（**ETL**）到数据仓库中。
- en: The data storage layer is where data is stored in a way that is optimized for
    reporting and analysis. The data in a data warehouse is organized into a dimensional
    model, which is designed to support OLAP queries. The dimensional model consists
    of fact tables and dimension tables, which are organized into a star schema or
    a snowflake schema.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 数据存储层是数据以优化的方式存储的地方，旨在支持报告和分析。数据仓库中的数据按照维度模型组织，维度模型设计用于支持OLAP查询。维度模型由事实表和维度表组成，这些表可以组织成星型模式或雪花模式。
- en: The data access layer is where the end user interacts with the data warehouse.
    This layer consists of reporting tools, OLAP tools, and other applications that
    allow users to query and analyze the data in the data warehouse.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 数据访问层是最终用户与数据仓库交互的地方。此层包含报告工具、OLAP工具和其他允许用户查询和分析数据仓库中数据的应用程序。
- en: Data modeling
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据建模
- en: Data modeling is the process of designing the structure of the data in a data
    warehouse. The goal of data modeling is to create a model that is optimized for
    reporting and analysis.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 数据建模是设计数据仓库中数据结构的过程。数据建模的目标是创建一个优化报告和分析的模型。
- en: The dimensional model is the most common data modeling technique used in data
    warehouses. It consists of fact tables and dimension tables, which are organized
    into a star schema or a snowflake schema.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 维度模型是数据仓库中最常用的数据建模技术。它由事实表和维度表组成，这些表可以组织成星型模式或雪花模式。
- en: A fact table contains the measures or metrics that are being analyzed, such
    as sales revenue or customer count. Each row in the fact table represents a specific
    event, such as a sale or a customer interaction. The fact table also contains
    foreign keys that link to dimension tables.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 事实表包含正在分析的度量或指标，例如销售收入或客户数量。事实表中的每一行代表一个特定事件，例如一次销售或客户互动。事实表还包含与维度表连接的外键。
- en: Dimension tables contain the attributes that describe the data in the fact table.
    For example, a customer dimension table might contain attributes such as customer
    name, address, and phone number. The dimension tables are linked to the fact table
    through foreign keys.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 维度表包含描述事实表中数据的属性。例如，一个客户维度表可能包含客户姓名、地址和电话号码等属性。维度表通过外键与事实表相连接。
- en: The star schema is a simple and intuitive data model that is easy to understand
    and use. In a star schema, the fact table is at the center of the model, with
    the dimension tables radiating out from it like the points of a star. This makes
    it easy to query the data and perform OLAP analysis.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 星型模式是一种简单直观的数据模型，易于理解和使用。在星型模式中，事实表位于模型的中心，维度表从事实表辐射出去，像星星的各个点。这使得查询数据和执行OLAP分析变得容易。
- en: The snowflake schema is a more complex version of the star schema, where the
    dimension tables are normalized into multiple tables. This can make the schema
    more flexible and easier to maintain, but it can also make queries more complex
    and slower to execute.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 雪花模式是星型模式的一个更复杂版本，其中维度表被规范化为多个表。这可以使模式更加灵活，易于维护，但也可能使查询变得更加复杂，执行速度较慢。
- en: Integration
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成
- en: Integrating data from multiple sources is a key function of a data warehouse.
    The ETL process is used to extract data from the source systems, transform it
    into a format that is suitable for analysis, and load it into the data warehouse.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 从多个来源集成数据是数据仓库的一个关键功能。ETL过程用于从源系统提取数据，将其转化为适合分析的格式，并加载到数据仓库中。
- en: There are several challenges involved in integrating data from multiple sources.
    One challenge is dealing with differences in data structure and format. For example,
    different systems may use different data types or have different naming conventions
    for the same data.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 从多个来源集成数据面临几个挑战。一个挑战是处理数据结构和格式的差异。例如，不同的系统可能使用不同的数据类型，或者对相同的数据有不同的命名规范。
- en: Another challenge is dealing with data quality issues. The data in the source
    systems may contain errors, duplicates, or missing values, which can affect the
    accuracy of the analysis.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个挑战是处理数据质量问题。源系统中的数据可能包含错误、重复项或缺失值，这可能会影响分析的准确性。
- en: To address these challenges, the ETL process may include data cleansing, data
    transformation, and data enrichment steps. Data cleansing involves identifying
    and correcting errors in the data, such as removing duplicates or fixing formatting
    issues. Data transformation involves converting the data into a format that is
    suitable for analysis, such as aggregating data at a higher level or creating
    new variables based on existing data. Data enrichment involves adding new data
    to the existing data, such as demographic data or geographic data.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些挑战，ETL过程可能包括数据清洗、数据转换和数据丰富的步骤。数据清洗涉及识别和纠正数据中的错误，如去除重复项或修正格式问题。数据转换涉及将数据转换为适合分析的格式，如在更高层次上汇总数据或根据现有数据创建新变量。数据丰富涉及向现有数据中添加新数据，如人口统计数据或地理数据。
- en: 'In summary, a data warehouse is a large, centralized repository of data that
    is used for storing and analyzing data from multiple sources. The architecture
    of a data warehouse consists of three layers: the data source layer, the data
    storage layer, and the data access layer. Data modeling is the process of designing
    the structure of the data in the data warehouse, and the most common data modeling
    technique used in data warehouses is the dimensional model. Integrating data from
    multiple sources is a key function of a data warehouse, and the ETL process is
    used to extract, transform, and load the data into the data warehouse.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，数据仓库是一个用于存储和分析来自多个来源的数据的大型集中式数据存储库。数据仓库的架构包括三个层次：数据源层、数据存储层和数据访问层。数据建模是设计数据仓库中数据结构的过程，而数据仓库中最常用的数据建模技术是维度模型。从多个来源集成数据是数据仓库的一个关键功能，ETL过程用于提取、转换和加载数据到数据仓库中。
- en: 'Data warehouses are suitable for businesses of all sizes and industries that
    need to store and analyze large amounts of data from multiple sources. Here are
    some specific scenarios where a data warehouse can be particularly beneficial:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 数据仓库适用于所有需要存储和分析来自多个来源的大量数据的各类企业和行业。以下是一些数据仓库特别有益的具体场景：
- en: '**Large enterprises**: Large enterprises often have massive amounts of data
    generated from various sources, such as customer interactions, sales transactions,
    and operational systems. A data warehouse can help these enterprises store and
    analyze this data efficiently, enabling them to make well-informed business decisions.'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大型企业**：大型企业通常会从各种来源生成大量数据，如客户互动、销售交易和运营系统。数据仓库可以帮助这些企业高效地存储和分析这些数据，使他们能够做出更明智的商业决策。'
- en: '**Data-driven organizations**: Organizations that rely heavily on data to make
    decisions can benefit from a data warehouse. By centralizing data from multiple
    sources, a data warehouse can provide a **single source of truth** (**SSOT**)
    for data analysis, which can help organizations avoid inconsistencies and inaccuracies
    in their data.'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据驱动的组织**：依赖数据做决策的组织可以从数据仓库中受益。通过将来自多个来源的数据集中存储，数据仓库可以为数据分析提供**单一的真实数据源**（**SSOT**），帮助组织避免数据中的不一致性和不准确性。'
- en: '**Businesses with complex data structures**: Businesses with complex data structures,
    such as those with multiple **business units** (**BUs**) or locations, can benefit
    from a data warehouse. By organizing data into a dimensional model, a data warehouse
    can simplify the process of querying and analyzing data, enabling businesses to
    gain insights into their operations more easily.'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**具有复杂数据结构的企业**：具有复杂数据结构的企业，如拥有多个**业务单元**（**BUs**）或多个地点的企业，可以从数据仓库中受益。通过将数据组织成维度模型，数据仓库可以简化查询和分析数据的过程，使企业能够更轻松地获得有关其运营的洞察。'
- en: '**Businesses with a need for real-time data**: While data warehouses are not
    designed for real-time data processing, they can be useful for businesses that
    need to store and analyze large amounts of data in near real time. By using technologies
    such as **change data capture** (**CDC**), businesses can continuously update
    their data warehouse with new data, enabling them to analyze data more quickly.'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**需要实时数据的企业**：虽然数据仓库不是为实时数据处理而设计的，但对于需要近乎实时存储和分析大量数据的企业来说，它们仍然有用。通过使用**变更数据捕获**（**CDC**）等技术，企业可以持续更新其数据仓库的新数据，从而更快地分析数据。'
- en: '**Businesses with regulatory requirements**: Businesses that are subject to
    regulatory requirements, such as financial institutions, can benefit from a data
    warehouse. By storing data in a centralized location, a data warehouse can help
    these businesses comply with regulations that require them to maintain historical
    data for a certain period.'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有监管要求的企业**：像金融机构这样受监管要求的企业可以从数据仓库中受益。通过将数据存储在集中位置，数据仓库可以帮助这些企业遵守需要保留历史数据一定期限的法规要求。'
- en: Any business that needs to store and analyze large amounts of data from multiple
    sources can benefit from a data warehouse. By centralizing data, organizing it
    into a dimensional model, and enabling efficient querying and analysis, a data
    warehouse can help businesses make well-informed decisions and gain a competitive
    edge.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 任何需要从多个来源存储和分析大量数据的企业都可以从数据仓库中受益。通过集中数据、将其组织成维度模型并实现高效查询和分析，数据仓库可以帮助企业做出明智决策并获得竞争优势。
- en: Data lakes
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据湖
- en: Data lakes have become an increasingly popular way for organizations to store
    and manage large amounts of structured, semi-structured, and unstructured data.
    In this overview, we’ll dive deep into the technical aspects of data lakes, including
    their architecture, data ingestion and processing, storage and retrieval, and
    security considerations.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 数据湖已成为组织存储和管理大量结构化、半结构化和非结构化数据的日益流行方式。在这个概述中，我们将深入探讨数据湖的技术方面，包括其架构、数据摄取和处理、存储与检索以及安全考虑。
- en: Architecture
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 架构
- en: At its core, a data lake is an architectural approach to storing data that allows
    for the aggregation of large volumes of disparate datasets in their original formats.
    This means that data can be ingested from a wide range of sources, including databases,
    data warehouses, streaming data sources, and even unstructured data such as social
    media posts or log files. The data is typically stored in a centralized repository
    that spans multiple servers or nodes and is accessed using a distributed filesystem
    such as **Hadoop Distributed File System** (**HDFS**), **Amazon Simple Storage
    Service** (**Amazon S3**), or Microsoft Azure Data Lake Storage.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 数据湖的核心在于一种存储数据的架构方法，允许聚合大量不同格式的数据集。这意味着数据可以从各种来源摄取，包括数据库、数据仓库、流数据源，甚至是非结构化数据，比如社交媒体帖子或日志文件。数据通常存储在跨多台服务器或节点的集中存储库中，并使用分布式文件系统（如**Hadoop分布式文件系统**（**HDFS**）、**Amazon简单存储服务**（**Amazon
    S3**）或Microsoft Azure数据湖存储）进行访问。
- en: Data ingestion and processing
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据摄取与处理
- en: Data ingestion is the process of bringing data into the data lake from various
    sources. This process can be automated using tools such as Apache NiFi, StreamSets,
    or Apache Kafka, which allow for the creation of pipelines that can ingest data
    from a wide range of sources, transform it as needed, and load it into the data
    lake. Once the data is ingested, it can be processed and analyzed using a variety
    of tools and frameworks, such as Apache Spark, Apache Hive, or Apache Flink.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 数据摄取是从各种来源将数据引入数据湖的过程。可以使用Apache NiFi、StreamSets或Apache Kafka等工具自动化此过程，这些工具允许创建可以从多种来源摄取数据、根据需要进行转换并加载到数据湖的流水线。一旦数据摄取完成，可以使用多种工具和框架（如Apache
    Spark、Apache Hive或Apache Flink）对其进行处理和分析。
- en: One of the key benefits of data lakes is the ability to process data at scale
    using distributed computing frameworks such as Apache Spark. These frameworks
    allow for the parallel processing of large datasets across multiple nodes, which
    can significantly reduce processing times and enable real-time analysis of streaming
    data. Additionally, data can be processed using ML algorithms to uncover patterns
    and insights that may not be immediately apparent.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 数据湖的一个关键优势是能够利用分布式计算框架（如 Apache Spark）按规模处理数据。这些框架允许在多个节点上并行处理大型数据集，显著减少处理时间，并使得实时分析流数据成为可能。此外，还可以使用机器学习算法对数据进行处理，以发现那些可能不容易察觉的模式和洞察。
- en: Storage and retrieval
  id: totrans-349
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储与检索
- en: Data lakes use a variety of storage technologies, including HDFS, Amazon S3,
    and Azure Data Lake Storage, to store data in a distributed, fault-tolerant manner.
    The data is typically stored in its original format, or a lightly structured format
    such as Parquet or ORC, which allows for efficient querying and analysis. Additionally,
    data can be partitioned and bucketed to further optimize query performance.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 数据湖使用多种存储技术，包括 HDFS、Amazon S3 和 Azure Data Lake Storage，以分布式、容错的方式存储数据。数据通常以原始格式或轻度结构化格式（如
    Parquet 或 ORC）存储，这样可以提高查询和分析的效率。此外，数据还可以进行分区和分桶处理，以进一步优化查询性能。
- en: Data retrieval from a data lake can be performed using a variety of tools and
    frameworks, including Apache Hive, Apache Spark SQL, or Presto. These tools allow
    for the creation of SQL-like queries that can be executed across large volumes
    of data in a distributed manner. Additionally, data can be accessed using APIs,
    which can be used to retrieve specific datasets or perform more complex operations
    using programming languages such as Python or Java.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据湖中检索数据可以使用多种工具和框架，包括 Apache Hive、Apache Spark SQL 或 Presto。这些工具允许创建类似 SQL
    的查询，并可以在分布式环境中对大量数据进行执行。此外，还可以使用 API 访问数据，这些 API 可以用来检索特定数据集或使用 Python 或 Java
    等编程语言执行更复杂的操作。
- en: Security considerations
  id: totrans-352
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全性考虑
- en: As data lakes often contain sensitive and valuable information, security is
    a critical consideration. Access to the data should be tightly controlled, and
    authentication and authorization mechanisms should be put in place to ensure that
    only authorized users and applications can access the data. Additionally, encryption
    should be used to protect the data at rest and in transit.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据湖通常包含敏感和有价值的信息，安全性是一个至关重要的考虑因素。应严格控制对数据的访问，并且应建立身份验证和授权机制，以确保只有授权的用户和应用程序才能访问数据。此外，应使用加密技术保护数据的静态存储和传输过程中的安全。
- en: Data governance is another important aspect of data lake security. Organizations
    should establish policies and procedures for data classification, access controls,
    data retention, and data lineage. They should also monitor user activity and audit
    logs to detect and prevent unauthorized access or data breaches.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 数据治理是数据湖安全性另一个重要方面。组织应制定数据分类、访问控制、数据保留和数据血统等方面的政策和程序。同时，应监控用户活动和审计日志，以便检测和防止未授权访问或数据泄露。
- en: Conclusion
  id: totrans-355
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In summary, data lakes provide an architectural approach for storing and processing
    large volumes of data from diverse sources. They use distributed computing frameworks
    and storage technologies to enable scalable data processing and analysis. While
    data lakes offer many benefits, including flexibility, scalability, and cost-effectiveness,
    they also come with security and governance challenges that must be carefully
    managed to ensure the integrity and confidentiality of the data. As organizations
    continue to generate and collect ever-increasing amounts of data, data lakes are
    likely to remain a critical component of modern data architectures.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，数据湖提供了一种存储和处理来自不同来源的大量数据的架构方法。它们使用分布式计算框架和存储技术来实现可扩展的数据处理和分析。尽管数据湖提供了许多好处，包括灵活性、可扩展性和成本效益，但它们也伴随有安全性和治理方面的挑战，必须谨慎管理，以确保数据的完整性和机密性。随着组织不断生成和收集越来越多的数据，数据湖可能会继续成为现代数据架构中的关键组成部分。
- en: 'Data lakes can benefit a wide range of organizations and industries that need
    to store, manage, and analyze large volumes of data. Specifically, data lakes
    can be useful for the following:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 数据湖可以为需要存储、管理和分析大量数据的广泛组织和行业带来好处。具体来说，数据湖对以下方面尤为有用：
- en: '**Enterprises with large and complex data environments**: Data lakes can help
    enterprises consolidate and manage their data from multiple sources, including
    structured, semi-structured, and unstructured data. This can help improve data
    accessibility and enable more efficient and effective data processing and analysis.'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拥有大型复杂数据环境的企业**：数据湖可以帮助企业整合并管理来自多个来源的数据，包括结构化、半结构化和非结构化数据。这有助于提高数据的可访问性，并使数据处理和分析更加高效有效。'
- en: '**Data-driven organizations**: Organizations that rely heavily on data to drive
    their business decisions and operations can benefit from data lakes. With a data
    lake, organizations can store and process large volumes of data, enabling them
    to quickly and easily access the data they need to make informed decisions.'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据驱动型组织**：那些在业务决策和运营中高度依赖数据的组织，可以从数据湖中受益。通过数据湖，组织可以存储和处理大量数据，使他们能够快速轻松地访问所需的数据，从而做出明智的决策。'
- en: '**Data scientists and analysts**: Data lakes can provide data scientists and
    analysts with a centralized repository of data that they can use to perform data
    exploration, analysis, and modeling. This can help them uncover insights and patterns
    that can inform business decisions and drive innovation.'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据科学家和分析师**：数据湖可以为数据科学家和分析师提供一个集中的数据仓库，他们可以利用这个仓库进行数据探索、分析和建模。这有助于他们发现能够为商业决策提供依据并推动创新的洞察和模式。'
- en: '**Marketing and advertising companies**: Marketing and advertising companies
    can use data lakes to store and analyze vast amounts of customer data, including
    social media data, web analytics data, and advertising data. This can help them
    gain a better understanding of their target audiences, optimize their advertising
    campaigns, and improve customer engagement.'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**营销和广告公司**：营销和广告公司可以使用数据湖来存储和分析大量的客户数据，包括社交媒体数据、网站分析数据和广告数据。这有助于他们更好地理解目标受众，优化广告活动，并提高客户参与度。'
- en: In short, any organization that needs to store, manage, and analyze large volumes
    of data from multiple sources can benefit from a data lake.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，任何需要存储、管理和分析来自多个来源的大量数据的组织，都可以从数据湖中受益。
- en: A realistic scenario
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 一个现实的场景
- en: Imagine a nationwide retail giant that has been efficiently utilizing a data
    warehouse to consolidate and examine various types of data, such as sales figures,
    stock levels, and customer profiles. This data warehouse has been instrumental
    in enabling the company to make informed choices regarding inventory control,
    store design, and promotional strategies.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下一个全国性的零售巨头，该公司一直高效地利用数据仓库来整合和检查各种类型的数据，如销售数据、库存水平和客户档案。这个数据仓库在帮助公司做出关于库存控制、店面设计和促销策略的明智决策方面发挥了重要作用。
- en: However, the organization recognizes that it’s missing out on potential insights
    from unstructured data, such as social media interactions and customer feedback.
    To address this gap, it opts to introduce a data lake into its data strategy.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，组织意识到它错失了来自非结构化数据（如社交媒体互动和客户反馈）的潜在洞察。为了解决这一问题，它决定将数据湖引入其数据战略。
- en: The data lake enables the organization to house both structured and unstructured
    data in one central repository. This unified storage makes it easier to conduct
    comprehensive analyses that include insights from diverse data streams such as
    social media sentiment and customer comments. By applying ML models, the company
    can even forecast future sales patterns based on past data.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 数据湖使组织能够将结构化和非结构化数据存储在一个中央仓库中。这种统一的存储方式使得进行全面的分析变得更加容易，包括来自不同数据流的洞察，例如社交媒体情感和客户评论。通过应用机器学习模型，公司甚至可以根据过去的数据预测未来的销售模式。
- en: By integrating the data warehouse with the data lake, the retail company achieves
    a more holistic understanding of its data landscape. This enriched view equips
    it to make better decisions, thereby gaining a competitive edge in the retail
    sector.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将数据仓库与数据湖进行整合，零售公司对其数据环境有了更加全面的理解。这种增强的视角使公司能够做出更好的决策，从而在零售行业中获得竞争优势。
- en: Summary
  id: totrans-368
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we’ve dived deep into the fascinating realm of large-scale
    data-persistent systems, covering everything from their historical origins to
    their modern-day complexities. We kicked things off with a stroll down memory
    lane, providing a brief history of how data persistence has evolved from rudimentary
    filesystems to sophisticated databases. We pondered the ever-changing needs of
    businesses and organizations that catalyzed this progression, establishing a solid
    foundation for understanding the subject.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们深入探讨了大规模数据持久化系统的迷人领域，涵盖了从它们的历史起源到现代的复杂性。我们从回顾历史开始，简要介绍了数据持久化如何从简单的文件系统演变为复杂的数据库。我们思考了推动这一进程的企业和组织不断变化的需求，为理解这一主题奠定了坚实的基础。
- en: Then, we shifted our focus to database evolution, focusing on the technical
    intricacies and the multifaceted growth databases have undergone over the years.
    From the days of hierarchical and network databases to the era of relational databases
    and their SQL foundations, we saw how the need to manage structured data led to
    the development of advanced systems capable of complex queries, indexing, and
    data integrity.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将焦点转向数据库的发展，关注技术的细节以及数据库在这些年里经历的多方面增长。从层次化数据库和网络数据库时代，到关系型数据库及其SQL基础的时代，我们看到了如何管理结构化数据的需求促使了能够进行复杂查询、索引和数据完整性的高级系统的开发。
- en: The chapter then took a significant turn to explore data warehouses, which act
    as centralized repositories where businesses store their cleaned, transformed,
    and cataloged data. Data warehouses have been instrumental for companies that
    rely on comprehensive data analytics and reporting. They have shaped inventory
    management, marketing strategies, and much more by enabling data-driven decision-making
    processes.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 本章接着重点探讨了数据仓库，数据仓库作为集中存储企业已清洗、转换并分类的数据的存储库。数据仓库对依赖全面数据分析和报告的公司来说具有重要作用。它们通过促进数据驱动的决策过程，塑造了库存管理、营销策略等众多方面。
- en: Finally, we delved into the realm of data lakes. Unlike their data warehouse
    counterparts, data lakes provide storage for raw, unstructured data. This is the
    arena where ML algorithms and advanced analytics are unleashed to dig deeper for
    insights that are not readily apparent in structured data. Data lakes have made
    it easier to make sense of disparate data types—ranging from customer reviews
    and social media sentiment to intricate sensor data—by housing them under a single,
    centralized platform.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们深入探讨了数据湖的领域。与数据仓库不同，数据湖为原始、非结构化的数据提供存储。这是机器学习算法和高级分析发挥作用的领域，用来深入挖掘在结构化数据中不易显现的洞察。数据湖使得从零散的数据类型中找到有意义的信息变得更加容易——这些数据可以是客户评论、社交媒体情感分析，甚至复杂的传感器数据——所有这些都被集中存储在一个平台下。
- en: So, what have we learned? We’ve learned that data persistence is not merely
    about storing data; it’s about evolving to meet the multifaceted demands of modern
    enterprises. From traditional databases to data warehouses, and now to data lakes,
    each system has its unique strengths and applications. In a world increasingly
    driven by data, understanding these systems isn’t just useful—it’s essential.
    Knowing how and when to use these technologies can mean the difference between
    simply storing data and turning it into actionable insights that can drive real-world
    changes. Thus concludes our exploration for this chapter; I hope it’s left you
    not just informed but also inspired.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们学到了什么呢？我们学到的是，数据持久化不仅仅是存储数据；它是关于不断发展以满足现代企业多方面需求的过程。从传统的数据库到数据仓库，再到如今的数据湖，每种系统都有其独特的优势和应用。在这个日益由数据驱动的世界里，理解这些系统不仅仅是有用的——它是必不可少的。知道如何以及何时使用这些技术，可能意味着从单纯存储数据到将其转化为可操作的洞察力，进而推动现实世界的变革。因此，本章的探讨到此结束；我希望这不仅让你得到了信息，也带给了你启发。
- en: In the next chapter, we will learn about the evolving role of **database administrators**
    (**DBAs**) in the changing landscape of technology and data management.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将了解**数据库管理员**（**DBA**）在技术和数据管理不断变化的格局中的演变角色。
