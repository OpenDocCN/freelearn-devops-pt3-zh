- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Major Changes, Useful Tools, and References
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重大变化、有用工具与参考资料
- en: This chapter will set out the major changes that have taken place since Puppet
    5 up to the current versions, Puppet 6.28 and 7.21\. This is viewed as the modern
    era of Puppet, where in the previous chapter, the change of focus was highlighted
    in the history of Puppet. This summary of changes will also cover some redundant
    patterns and approaches that might still be seen from earlier versions of Puppet,
    as these can still be visible in code and various sources. The chapter will then
    go on to discuss tooling to create a productive developer environment for Puppet,
    which will be used for the lab environment throughout this book. The aim will
    be to give an opinionated view of how to develop Puppet code and tooling that
    can assist with this. These tools can be installed in an environment of the readers’
    choice. The lab environment itself will then be demonstrated by standing up a
    simple setup and logging in. The chapter will finish by looking at what resources
    are available for you to keep up to date with Puppet and research further topics
    of interest.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将概述自Puppet 5以来到当前版本Puppet 6.28和7.21之间的主要变化。这被视为Puppet的现代时代，上一章回顾了Puppet历史中的焦点变化。本节中的变化总结还将涵盖一些早期版本Puppet中可能仍然可见的冗余模式和方法，因为它们在代码和各种来源中仍然可见。接着，本章将讨论工具链的建设，以创建一个高效的开发者环境，这个环境将贯穿整本书的实验室部分。目标是给出一种有见地的观点，如何开发Puppet代码和相应工具，以便辅助开发。用户可以在自己选择的环境中安装这些工具。实验环境将通过搭建一个简单的设置并登录来展示。最后，本章将展示如何利用现有资源保持Puppet更新，并深入研究感兴趣的其他主题。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Major changes since Puppet 5
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自Puppet 5以来的重大变化
- en: Legacy patterns before Puppet 5
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet 5之前的遗留模式
- en: IDEs and tooling to assist in Puppet development
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于Puppet开发的IDE和工具
- en: How to deploy your Puppet lab and development tools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何部署你的Puppet实验室和开发工具
- en: References and further research
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考资料与进一步研究
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The development environment will require an OS with access to the internet,
    which can be any of the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 开发环境需要具备访问互联网的操作系统，以下系统均可：
- en: macOS using Homebrew to install the software
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Homebrew在macOS上安装软件
- en: Windows 10/11 or Windows Server using Chocolatey to install the software
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Chocolatey在Windows 10/11或Windows Server上安装软件
- en: A Linux environment using package managers such as apt for Ubuntu or RHEL-based
    using Yum
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用包管理工具的Linux环境，如Ubuntu的apt或基于RHEL的使用Yum
- en: 'The following software is required for the development environment:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 开发环境所需的软件：
- en: Puppet agent ([https://www.puppet.com/docs/puppet/8/install_agents.html](https://www.puppet.com/docs/puppet/8/install_agents.html))
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet agent ([https://www.puppet.com/docs/puppet/8/install_agents.html](https://www.puppet.com/docs/puppet/8/install_agents.html))
- en: Bolt ([https://puppet.com/docs/bolt/latest/bolt.html](https://puppet.com/docs/bolt/latest/bolt.html))
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bolt ([https://puppet.com/docs/bolt/latest/bolt.html](https://puppet.com/docs/bolt/latest/bolt.html))
- en: 'Visual Studio Code ([https://code.visualstudio.com/](https://code.visualstudio.com/))
    with the following extensions:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code ([https://code.visualstudio.com/](https://code.visualstudio.com/))
    和以下扩展：
- en: JSON for Visual Studio Code
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code的JSON支持
- en: Puppet
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet
- en: rest client
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rest client
- en: Ruby
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ruby
- en: ShellCheck
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ShellCheck
- en: Thunder client
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Thunder client
- en: VSCode Ruby
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: VSCode Ruby
- en: YAML
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: YAML
- en: PowerShell
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: PowerShell
- en: The Puppet module PECDM (https://github.com/puppetlabs/puppetlabs-pecdm)
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet模块PECDM ([https://github.com/puppetlabs/puppetlabs-pecdm](https://github.com/puppetlabs/puppetlabs-pecdm))
- en: The GitHub CLI ([https://github.com/cli/cli](https://github.com/cli/cli))
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub CLI ([https://github.com/cli/cli](https://github.com/cli/cli))
- en: The Puppet development toolkit ([https://puppet.com/try-puppet/puppet-development-kit/](https://puppet.com/try-puppet/puppet-development-kit/))
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet开发工具包 ([https://puppet.com/try-puppet/puppet-development-kit/](https://puppet.com/try-puppet/puppet-development-kit/))
- en: The Azure CLI ([https://docs.microsoft.com/en-us/cli/azure/install-azure-cli](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli))
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure CLI ([https://docs.microsoft.com/en-us/cli/azure/install-azure-cli](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli))
- en: An Azure account
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Azure账户
- en: A GitHub account (free account)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个GitHub账户（免费账户）
- en: The SSH keys created to communicate with GitHub
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于与GitHub通信的SSH密钥
- en: The PECDM module ([https://github.com/puppetlabs/puppetlabs-pecdm](https://github.com/puppetlabs/puppetlabs-pecdm))
    will create resources as specified via the `bolt` command. The cost of running
    the labs in Azure should be carefully watched via the Azure cost analysis tools
    to avoid unexpected bills. Labs not in use should be destroyed or at least deallocated
    to reduce charges.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: PECDM 模块 ([https://github.com/puppetlabs/puppetlabs-pecdm](https://github.com/puppetlabs/puppetlabs-pecdm))
    将通过 `bolt` 命令创建指定的资源。应通过 Azure 成本分析工具仔细监控在 Azure 上运行实验室的费用，以避免意外账单。未使用的实验室应被销毁或至少释放，以减少费用。
- en: All of these components have equivalents that you might use in your organization.
    However, the purpose of this development and lab setup is to make it as simple
    and automated a setup as possible. It might well be an exercise you wish to do
    as the book progresses to test out your own components. PECDM itself supports
    AWS, Azure, and GCP with instructions on the module to configure the necessary
    CLI.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些组件都有你可能在自己组织中使用的等效项。然而，本开发和实验室设置的目的是尽可能简单和自动化的设置。随着书籍的进展，这可能是你想要做的一个练习，用来测试你自己的组件。PECDM
    本身支持 AWS、Azure 和 GCP，并提供关于配置必要 CLI 的模块说明。
- en: The code for this section can be found at [https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/tree/main/ch02](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/tree/main/ch02).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 该部分的代码可以在 [https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/tree/main/ch02](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/tree/main/ch02)
    找到。
- en: Major changes since Puppet 5
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自 Puppet 5 以来的重大变化
- en: Puppet 5 reflects the change in direction of Puppet as an organization, which
    was highlighted in the previous chapter. Its focus is on performance and scaling
    for infrastructure and stability in the language. This section will cover the
    changes that have taken place between Puppet 5 and 7; these versions reflect the
    versions of Puppet in use, which you are likely to see in code bases you are working
    with and in modules you would take from the Puppet forge. It will also cover some
    old patterns and issues you might see in code that reflect how Puppet was before
    version 5.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 5 反映了 Puppet 作为一个组织方向的变化，这一点在前一章中有所强调。它的重点是基础设施的性能和扩展性以及语言的稳定性。本节将涵盖
    Puppet 5 和 7 之间的变化；这些版本反映了你在工作中可能遇到的代码库和从 Puppet forge 获取的模块中使用的 Puppet 版本。它还将涵盖一些旧的模式和你在代码中可能遇到的问题，这些问题反映了
    Puppet 在版本 5 之前的状态。
- en: Puppet 5
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Puppet 5
- en: Puppet 4 had a large number of deprecated features, which were almost all removed
    in Puppet 5\. It is not worth listing all of these features, but just to set the
    context of the release, it was more about finishing what had been started in Puppet
    4 by introducing more new features. It standardized package numbering, with all
    the Puppet packages starting at 5.0.0 instead of the mismatches of various packages,
    such as Puppet 4 requiring Puppet Server 2.x and Puppet agent 1.x.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 4 有大量被弃用的特性，这些特性几乎在 Puppet 5 中全部被移除。虽然不值得列出所有这些特性，但为了设定发布的背景，Puppet 5
    更多的是通过引入新特性来完成 Puppet 4 中已开始的工作。它统一了包的编号，所有 Puppet 包的版本都从 5.0.0 开始，而不是之前不同版本包之间的不匹配，比如
    Puppet 4 需要 Puppet Server 2.x 和 Puppet agent 1.x。
- en: 'Puppet 5 as a server platform delivered big boosts in performance: agent runtimes
    were 30 percent lower, CPU utilization was at least 20 percent lower, the catalog
    compile times reported by Puppet Server were 7 to 10 percent lower, and Puppet
    5 was able to scale to 40 percent more agents. Puppet Server metrics were introduced
    to give greater observability of the Puppet platform. In addition to this greater
    performance and scalability, Puppet Enterprise 2017.4 onward had capabilities
    to allow for disaster recovery along with package inspection, which stored information
    about software installed across the estate regardless of whether Puppet managed
    it or not. Full technical details of the Puppet Enterprise features will be discussed
    in [*Chapter 14*](B18492_14.xhtml#_idTextAnchor340).'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 5 作为服务器平台在性能上有了大幅提升：代理运行时间减少了 30%，CPU 利用率至少降低了 20%，Puppet Server 报告的目录编译时间减少了
    7 到 10%，而且 Puppet 5 能够扩展至更多的代理，最多可扩展 40%。引入了 Puppet Server 指标，以便更好地观察 Puppet 平台。除了更高的性能和可扩展性之外，Puppet
    Enterprise 2017.4 及之后的版本还具备了灾难恢复能力以及软件包检查功能，无论 Puppet 是否管理这些软件，都会存储关于安装在整个环境中的软件的信息。Puppet
    Enterprise 功能的完整技术细节将在 [*第 14 章*](B18492_14.xhtml#_idTextAnchor340) 中讨论。
- en: Although not affiliated directly with Puppet 5, the **Puppet Development Kit**
    (**PDK**) was released around the same time, which automated a lot of tool installation,
    testing, linting, and the creation of module directories (this will be covered
    in detail in [*Chapter 8*](B18492_08.xhtml#_idTextAnchor212)). Previously, this
    had to be done by hand or by individual developer automation. Additionally, Hiera
    5 integrated with EYAML (a mechanism of encrypted data covered in [*Chapter 9*](B18492_09.xhtml#_idTextAnchor233)),
    which was introduced and massively simplified how data could be secured and still
    used.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管**Puppet开发工具包**（**PDK**）与Puppet 5并无直接关联，但它在同一时间发布，自动化了许多工具的安装、测试、代码检查和模块目录的创建（这一部分将在[*第8章*](B18492_08.xhtml#_idTextAnchor212)中详细讲解）。以前，这些工作需要手动完成或由单个开发者的自动化脚本来完成。此外，Hiera
    5与EYAML（在[*第9章*](B18492_09.xhtml#_idTextAnchor233)中介绍的加密数据机制）集成，这大大简化了数据的加密处理，并且仍然能够被使用。
- en: Puppet 6
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Puppet 6
- en: Puppet 6 came with a substantial change when a lot of types that had been included
    with the core Puppet install were removed and put into modules, which users could
    choose to download from the Puppet forge. This was to narrow down the installation,
    as the number of core types had grown over time, and it was far more efficient
    for users to choose what they wanted. A review of what functions were being consistently
    used took place, and a number of string and math functions were moved from the
    `stdlib` module into core Puppet to reflect their core use. The trusted external
    command was also introduced; this allowed for external data sources to be queried
    and brought in like facts, so an API on a Satellite server or a database server
    could be called and brought in for use in Puppet code. This will be covered in
    detail in [*Chapter 13*](B18492_13.xhtml#_idTextAnchor321). Additionally, the
    deferred data type was introduced, which allowed variables to run deferred functions
    locally on machines at deployment time. This is particularly useful for use cases
    such as secret management, for example, a vault, where a traditional function
    would make its call from the Puppet primary server and send the secret to the
    agent over the Puppet infrastructure. Parametrized execs were introduced in 6.24,
    which allow for the separation of commands from parameters when using the `exec`
    resource type – a powerful security measure to prevent commands from being passed
    instead of parameters.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 6带来了显著的变化，许多原本包含在Puppet核心安装中的类型被移除，并放入模块中，用户可以选择从Puppet Forge下载这些模块。这样做是为了缩小安装范围，因为核心类型的数量随着时间的推移不断增加，而让用户选择他们需要的类型更加高效。对于哪些功能被持续使用进行了评估，许多字符串和数学函数从`stdlib`模块移到了Puppet核心模块，以反映它们的核心用途。同时，引入了受信外部命令功能，这使得可以像查询事实一样查询外部数据源，从而可以调用并引入卫星服务器或数据库服务器的API供Puppet代码使用。这将在[*第13章*](B18492_13.xhtml#_idTextAnchor321)中详细讲解。此外，引入了延迟数据类型，使得变量能够在部署时本地执行延迟函数。这对于像秘密管理这样的用例尤为有用，例如一个金库，其中传统函数会从Puppet主服务器发起调用，并通过Puppet基础设施将秘密发送给代理。6.24版本中引入了参数化`exec`，这使得在使用`exec`资源类型时，可以将命令与参数分开——这是一种强大的安全措施，防止命令被传递而不是参数。
- en: On the platform side, the Puppet certificate commands were changed from `puppet
    cert` commands to `puppet server ca`, which were more complete and more powerful
    commands. Also, PuppetDB was included on Puppet compiler servers to better manage
    the load of requests on PuppetDB. The full details of the platform are covered
    in [*Chapter 10*](B18492_10.xhtml#_idTextAnchor252).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在平台方面，Puppet证书命令从`puppet cert`命令更改为`puppet server ca`命令，这些命令更加完整且功能更强大。此外，PuppetDB被包含在Puppet编译服务器上，以更好地管理PuppetDB的请求负载。平台的详细内容将在[*第10章*](B18492_10.xhtml#_idTextAnchor252)中详细讨论。
- en: Puppet 7
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Puppet 7
- en: One of the most noticeable changes in Puppet 7 was the removal of harmful terminology
    following a review and work beginning in 2014\. This focused on phrases such as
    master/slave and blacklists/whitelists. For Puppet, this means that master servers
    became primary servers, master services became server services, and in modules,
    the master branch became the main branch. It also means blacklist/whitelist terminology
    was replaced with allow list/block list.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 7中的一个显著变化是删除了有害的术语，这是2014年开始进行审查和改进的结果。这一变化的焦点是“主从”和“黑名单/白名单”这样的短语。对于Puppet来说，这意味着主服务器变成了主控服务器，主服务变成了服务器服务，而在模块中，主分支变成了主分支。它还意味着“黑名单/白名单”术语被“允许列表/阻止列表”替代。
- en: The parameterized execs mentioned in the Puppet 6 updates were available with
    the 7.9 Puppet language. Factor was upgraded to version 4, a re-write in Ruby,
    which provides features such as benchmarking, timeouts, and user caching, which
    will be discussed in [*Chapter 5*](B18492_05.xhtml#_idTextAnchor123). The option
    to not include legacy facts via the `include_legacy_facts` option was included
    as of 7.21.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在Puppet 6更新中提到的参数化执行命令可在7.9版的Puppet语言中使用。Factor被升级到版本4，这是用Ruby重写的，提供了诸如基准测试、超时和用户缓存等功能，这些将在[*第5章*](B18492_05.xhtml#_idTextAnchor123)中讨论。自7.21版起，`include_legacy_facts`选项被加入，用于排除旧版事实。
- en: The platform upgraded to Postgres 11 and Ruby 2.7, which further increased performance.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 该平台升级到了Postgres 11和Ruby 2.7，进一步提升了性能。
- en: The reporting mechanism also had the option to not include unchanged resources
    in its reports via the `exclude_unchanged_resources` option.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 报告机制还可以通过`exclude_unchanged_resources`选项选择不将未更改的资源包含在报告中。
- en: Again, although not affiliated with Puppet releases directly, PDK 2.0 was released
    close to Puppet 7, dropping support for Puppet 4.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，虽然PDK 2.0并不直接与Puppet发布相关，但它是在Puppet 7发布时推出的，并且不再支持Puppet 4。
- en: Legacy Puppet patterns
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 旧版Puppet模式
- en: This section will highlight some old patterns and their reason for use in old
    versions of Puppet. This will help you to understand code that can be commonly
    found in older, unmaintained modules or code that simply has never been refactored
    over time. Puppet 4 introduced data types, but before this, all variables were
    strings, and a lot of comparisons and other functions could have quite strange
    and inconsistent results. To understand the full extent of this, you can view
    [www.youtube.com/watch?v=aU7vjKYqMUo](https://www.youtube.com/watch?v=aU7vjKYqMUo).
    Therefore, you might see in historic code the odd handling of variables and checks
    for undefined variables. Originally, **facter** facts were also just called **top-level
    variables**, which could be very confusing with normal variables and created the
    opportunity for accidental overrides. This changed to the **facts hash**, which
    we will show in more detail in [*Chapter 5*](B18492_05.xhtml#_idTextAnchor123).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将重点介绍一些旧的模式及其在旧版本Puppet中使用的原因。这将帮助你理解在较旧的、不再维护的模块中，或者是没有经过重构的代码中，常见的代码。Puppet
    4引入了数据类型，但在此之前，所有变量都是字符串，许多比较和其他函数的结果可能非常奇怪且不一致。要理解这一点的全面性，可以观看[www.youtube.com/watch?v=aU7vjKYqMUo](https://www.youtube.com/watch?v=aU7vjKYqMUo)。因此，在历史代码中，你可能会看到对变量的奇怪处理和未定义变量的检查。最初，**facter**事实也只是称为**顶级变量**，这可能会与普通变量混淆，并且容易发生意外覆盖。后来改为**事实哈希**，我们将在[*第5章*](B18492_05.xhtml#_idTextAnchor123)中详细介绍。
- en: The platform infrastructure was more complicated and varied with the options
    of using Rack or WEBrick configurations. In very early versions of Puppet code,
    which predate the `file_line` function of the Puppet `stdlib` module, there was
    no way to manage single lines of a file. This resulted in the overuse of Augeas
    (a tool that can parse files to allow for manipulation) and templates (which allow
    for the creation of file using conditional logic and variables). Augeuas is very
    advanced but often over-complicated and a drain on performance, while the overuse
    of templates resulted in whole files being enforced instead of just the individual
    line or setting required. Therefore, when working with Puppet code that was developed
    in earlier versions, it is worth reviewing to make sure any code you inherit really
    does need to control a whole file and does not overuse Augeas when simpler solutions
    now exist. The `params.pp` pattern was heavily used in modules before Hiera offered
    the ability for class parameters to be overwritten. The sensitive data type was
    not introduced until 4.6, which made it hard to handle any secret data securely
    in code. Finally, the original Puppet versions had no concept of loops, as provided
    by lambda functions, which were introduced in Puppet 4\. So, you might find, in
    old code examples, obscure patterns being used to achieve a similar effect.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 平台基础设施变得更加复杂，并且可以选择使用Rack或WEBrick配置。在非常早期的Puppet代码版本中，`file_line`功能尚未引入，且Puppet的`stdlib`模块也没有提供管理单行文件的功能。这导致了Augeas（一个可以解析文件并允许操作的工具）和模板（允许通过条件逻辑和变量创建文件）被过度使用。Augeas功能非常强大，但往往过于复杂且对性能产生负担，而模板的过度使用导致了整个文件被强制执行，而不仅仅是需要的单个行或设置。因此，在处理早期版本的Puppet代码时，值得回顾代码，确保你继承的代码真的需要控制整个文件，并且在现有更简单的解决方案下，避免过度使用Augeas。`params.pp`模式在Hiera提供类参数覆盖功能之前，在模块中被广泛使用。直到4.6版本，才引入了敏感数据类型，这使得在代码中安全处理任何机密数据变得困难。最后，原始的Puppet版本没有提供循环的概念，直到Puppet
    4引入了lambda函数。所以，你可能会在旧代码示例中发现一些晦涩的模式，用来实现类似的效果。
- en: IDEs and tools to assist in Puppet development
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于辅助Puppet开发的IDE和工具
- en: One of the greatest issues with early Puppet development was the lack of a consensus
    around how to develop and a lack of integration. As discussed in [*Chapter 1*](B18492_01.xhtml#_idTextAnchor018)
    this changed greatly around the time Puppet 5 was released. This section highlights
    some tools as opinionated recommendations based on usage and experience in Puppet,
    and most of them will be used in the labs and demonstrations. This is certainly
    not the only way to develop Puppet code, and your organization might require the
    usage of different tools depending on the environment.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 早期Puppet开发中最大的一个问题是缺乏关于如何开发的共识，并且缺乏集成。如在[*第1章*](B18492_01.xhtml#_idTextAnchor018)中讨论的那样，这一局面在Puppet
    5发布时发生了巨大变化。本节突出了一些工具，作为基于Puppet使用和经验的意见性推荐，且它们大多数将在实验和演示中使用。当然，这并不是开发Puppet代码的唯一方法，你的组织可能会根据环境要求使用不同的工具。
- en: The `pdk` command. Previously, Puppet developers had to gather the tools, install
    dependencies, and then run each of the various commands that `pdk` is made up
    of.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`pdk`命令。此前，Puppet开发人员需要收集工具，安装依赖项，然后运行`pdk`所包含的各种命令。'
- en: Visual Studio Code has become an incredibly powerful and popular source code
    editor. It is free and multiplatform, with a vast selection of extensions including
    the Puppet extension ([https://marketplace.visualstudio.com/items?itemName=puppet.puppet-vscode](https://marketplace.visualstudio.com/items?itemName=puppet.puppet-vscode)).
    It creates powerful shortcuts that allow all your work to take place in the IDE,
    which will be demonstrated throughout this book.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code已经成为一个非常强大且流行的源代码编辑器。它是免费的、跨平台的，并且拥有丰富的扩展库，包括Puppet扩展（[https://marketplace.visualstudio.com/items?itemName=puppet.puppet-vscode](https://marketplace.visualstudio.com/items?itemName=puppet.puppet-vscode)）。它创建了强大的快捷方式，允许你在IDE中完成所有工作，整个过程中将在本书中进行演示。
- en: I will not be using it as part of the lab directly, but since many prefer a
    command-line editor as opposed to Visual Studio Code, it should be noted there
    are Vim modules ([https://github.com/rodjek/vim-puppet](https://github.com/rodjek/vim-puppet))
    that can provide linting and syntax checking within VIM.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会直接在实验中使用它，但因为许多人更喜欢命令行编辑器而不是Visual Studio Code，所以值得注意的是，有一些Vim模块（[https://github.com/rodjek/vim-puppet](https://github.com/rodjek/vim-puppet)）可以在VIM中提供语法检查和linting功能。
- en: A particularly useful web page for development is the [https://validate.puppet.com/](https://validate.puppet.com/)
    site, which can be used to quickly paste in Puppet code to validate and parse
    it and create relationship graphs.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一个特别有用的开发网页是[https://validate.puppet.com/](https://validate.puppet.com/)网站，可以快速粘贴Puppet代码进行验证和解析，并创建关系图。
- en: At an even more advanced level is the Puppet debugger ([https://github.com/nwops/puppet-debugger](https://github.com/nwops/puppet-debugger)),
    which allows for running Puppet code and taking breaks in the code, which allows
    you to see the state of variables. This will become useful as more advanced code
    is authored.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 更高级的工具是Puppet调试器([https://github.com/nwops/puppet-debugger](https://github.com/nwops/puppet-debugger))，它允许运行Puppet代码并在代码中设置断点，从而查看变量的状态。随着更复杂代码的编写，这将变得非常有用。
- en: How to deploy your Puppet lab and development tools
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何部署你的Puppet实验室和开发工具
- en: This section will run through how to install and configure your desktop environment
    and then use that environment to stand up the Puppet infrastructure in Azure,
    configure it with a control repo, deploy some modules to an environment, and test
    logins to the web console. This will confirm the lab environment functions as
    expected and should give you the confidence to start up and shut down the labs
    as required to avoid paying for unecessary virtual machine running time costs
    on Azure.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将演示如何安装和配置桌面环境，然后使用该环境在Azure中搭建Puppet基础设施，用控制库配置它，将一些模块部署到环境中，并测试登录网页控制台。这将确认实验室环境按预期工作，并且应该让你有信心根据需要启动和关闭实验室，避免在Azure上为不必要的虚拟机运行时间支付费用。
- en: 'In *Figure 2**.1*, the final result of this exercise is shown. The device you
    use as a development environment will have Visual Studio Code installed to edit
    the code that has been cloned from GitHub. A PowerShell or shell session, depending
    on the OS, will use Bolt with Terraform to stand up the infrastructure in Azure
    and then apply the configuration to that infrastructure, configuring a Puppet
    Enterprise server and an attached instance to that server. The web console of
    the Puppet Enterprise server will be accessible via HTTPS to a web browser:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 2.1*中，展示了本练习的最终结果。你用作开发环境的设备将安装Visual Studio Code，用于编辑从GitHub克隆的代码。根据操作系统的不同，PowerShell或Shell会话将使用Bolt与Terraform在Azure上构建基础设施，并将配置应用于该基础设施，配置一个Puppet
    Enterprise服务器及附加到该服务器的实例。Puppet Enterprise服务器的网页控制台将可以通过HTTPS在浏览器中访问：
- en: "![Figure 2.1 – The \uFEFFlab setup](img/Figure_02.01.jpg)"
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1 – 实验室设置](img/Figure_02.01.jpg)'
- en: Figure 2.1 – The lab setup
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – 实验室设置
- en: Mac desktop
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mac桌面
- en: 'The Mac installation will rely on Homebrew to automate the installation process,
    for which Puppet has created its own repos ([https://github.com/puppetlabs/homebrew-puppet](https://github.com/puppetlabs/homebrew-puppet)).
    Run the following commands to install the desktop tooling that was highlighted
    in the *Technical* *requirements* section:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Mac安装将依赖Homebrew自动化安装过程，Puppet为此创建了自己的仓库([https://github.com/puppetlabs/homebrew-puppet](https://github.com/puppetlabs/homebrew-puppet))。运行以下命令安装*技术*
    *要求*部分中提到的桌面工具：
- en: '[PRE0]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Windows desktop
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows桌面
- en: 'The Windows installation relies on Chocolatey for installation. Run the following
    code in a PowerShell session; note that administrative rights are only required
    for the first command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Windows安装依赖Chocolatey进行安装。在PowerShell会话中运行以下代码；注意，只有第一个命令需要管理员权限：
- en: '[PRE1]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Linux desktop – RPM-based
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux桌面 – 基于RPM
- en: 'This RPM-based Linux desktop installation was tested with Rocky Linux 8\. So,
    some localized adjustments need to be made depending on your specific OS version
    and the difference in flavor. However, running the following code will add necessary
    the Yum repositories from the vendors and install the packages:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个基于RPM的Linux桌面安装已在Rocky Linux 8上测试过。因此，根据你的操作系统版本和不同的发行版，可能需要进行一些本地化调整。然而，运行以下代码将从供应商那里添加必要的Yum仓库并安装相应的包：
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The client tools are at a specific version and should be adjusted to match your
    installation. Check out [https://puppet.com/try-puppet/puppet-enterprise-client-tools/](https://puppet.com/try-puppet/puppet-enterprise-client-tools/)
    to find the `curl` command.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端工具有特定版本，应该根据你的安装版本进行调整。请访问[https://puppet.com/try-puppet/puppet-enterprise-client-tools/](https://puppet.com/try-puppet/puppet-enterprise-client-tools/)查找`curl`命令。
- en: Linux desktop – APT-based
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux桌面 – 基于APT
- en: 'The APT-based Linux desktop was tested with Ubuntu 20.04, so some localized
    adjustments need to be made depending on your specific OS version and the difference
    in flavor. However, running the following code should add the necessary APT repositories
    and install the desktop development software required:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 基于APT的Linux桌面在Ubuntu 20.04上进行了测试，因此需要根据您的特定操作系统版本和不同的发行版本进行一些本地化调整。不过，运行以下代码应该可以添加所需的APT仓库并安装所需的桌面开发软件：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The client tools are at a specific version and should be adjusted to match your
    installation. Check out [https://puppet.com/try-puppet/puppet-enterprise-client-tools/](https://puppet.com/try-puppet/puppet-enterprise-client-tools/)
    to find the `curl` command.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端工具是特定版本的，应根据您的安装进行调整。请访问[https://puppet.com/try-puppet/puppet-enterprise-client-tools/](https://puppet.com/try-puppet/puppet-enterprise-client-tools/)
    查找`curl`命令。
- en: Configuring tools
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置工具
- en: Now that you have the core tools installed on whichever desktop environment
    you are using, the core steps will be the same for running and managing the applications.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经在所使用的桌面环境中安装了核心工具，运行和管理应用程序的核心步骤是相同的。
- en: 'First of all, we need to register with GitHub ([https://github.com/join](https://github.com/join))
    and register with Azure ([https://azure.microsoft.com/en-gb/free/](https://azure.microsoft.com/en-gb/free/)).
    Once these registrations are complete, log in to the CLIs for both. Run the following
    and log in to the web page that will appear:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在GitHub上注册账号([https://github.com/join](https://github.com/join))并在Azure上注册([https://azure.microsoft.com/en-gb/free/](https://azure.microsoft.com/en-gb/free/))。完成这些注册后，登录到两个CLI工具中。运行以下命令并登录将出现的网页：
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The next step is to generate keys that will allow for communication with GitHub.
    You can do this by running the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是生成允许与GitHub通信的密钥。您可以通过运行以下命令来完成：
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, we upload the key we have created using the GitHub CLI. For Mac or Linux,
    run the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过GitHub CLI上传我们创建的密钥。对于Mac或Linux，请运行以下命令：
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For the equivalent location of the SSH key in Windows, run the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows中SSH密钥的相应位置，请运行以下命令：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Then, extensions for Visual Studio Code can be added by downloading the `extensions.list`
    file from the Packt GitHub repo at [https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch02/extensions.list](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch02/extensions.list)
    and looping through the lines to install.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以通过从Packt的GitHub仓库下载`extensions.list`文件，地址为[https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch02/extensions.list](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch02/extensions.list)，并通过循环读取每一行来安装Visual
    Studio Code的扩展。
- en: 'For Mac or Linux, you can achieve this by running the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Mac或Linux，您可以通过运行以下命令来实现：
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For Windows, you can run the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows，您可以运行以下命令：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The next step will be to create an area for you to have a code workspace and
    then download the `pecdm` module into it. For Linux and Mac, in your home directory,
    we will create a workspace and then clone `pecdm` into this directory by running
    the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是为您的代码工作区创建一个区域，然后将`pecdm`模块下载到该区域。对于Linux和Mac，我们将在主目录中创建一个工作区，并通过运行以下命令将`pecdm`克隆到该目录中：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For Windows, we will assume the equivalent directory in the user profile, creating
    a `workspace` directory there, and then cloning it by running the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows，我们假设用户目录中有相应的文件夹，首先在其中创建一个`workspace`目录，然后通过运行以下命令进行克隆：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now that we have everything installed and have a work area with the cloned
    module, we can configure the module and run the following Bolt plan to create
    the Puppet infrastructure in Azure. This will stand up a Puppet 2021.7.0 primary
    server and create a single client registered to it. The SSH user allows you to
    use the SSH keys created earlier to connect to the hosts. For this example, the
    `params.json` file should be downloaded to the pecdm directory from [https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch02/params.json](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch02/params.json),
    I have used the UK south region and allowed an open-to-anything firewall, but
    you will want to choose the cloud region closest to you and set a firewall with
    rules to allow only your desktop environment and Azure region to access it. The
    following links can help you to work out this choice:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经完成了安装并且拥有了带有克隆模块的工作区，我们可以配置该模块并运行以下Bolt计划来在Azure中创建Puppet基础设施。这将启动一个Puppet
    2021.7.0主服务器，并注册一个单独的客户端。SSH用户允许你使用之前创建的SSH密钥连接到主机。对于这个示例，`params.json`文件应该从[https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch02/params.json](https://github.com/PacktPublishing/Puppet-8-for-DevOps-Engineers/blob/main/ch02/params.json)下载到pecdm目录。我使用的是英国南部区域，并允许开放任何连接的防火墙，但你应该选择离你最近的云区域，并设置一个仅允许你的桌面环境和Azure区域访问的防火墙规则。以下链接可以帮助你做出选择：
- en: '[https://azure.microsoft.com/en-gb/global-infrastructure/geographies/#geographies](https://azure.microsoft.com/en-gb/global-infrastructure/geographies/#geographies)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://azure.microsoft.com/en-gb/global-infrastructure/geographies/#geographies](https://azure.microsoft.com/en-gb/global-infrastructure/geographies/#geographies)'
- en: '[https://www.azurespeed.com/Azure/Latency](https://www.azurespeed.com/Azure/Latency)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.azurespeed.com/Azure/Latency](https://www.azurespeed.com/Azure/Latency)'
- en: 'The code is as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE12]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This should take around 20 to 30 minutes to complete.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作大约需要20到30分钟。
- en: 'You can then run the following Azure CLI command to return the list of hostnames
    and public IPs:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以运行以下Azure CLI命令来返回主机名和公共IP地址列表：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output will look similar to this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Copy the IP address listed for the entry that starts with `pe-server` into a
    web browser to reach the Puppet Enterprise console screen. Then, you can use the
    login details with the username of `admin` and the password as `puppetlabs`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 将列出的以`pe-server`开头的IP地址复制到网页浏览器中，以访问Puppet Enterprise控制台页面。然后，你可以使用用户名`admin`和密码`puppetlabs`进行登录。
- en: 'To destroy this infrastructure and ensure no unnecessary costs are incurred,
    run the following command:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了销毁这些基础设施并确保不会产生不必要的费用，可以运行以下命令：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Alternatively, if labs are to be kept for periods of time, it is possible to
    stop and deallocate each virtual machine to minimize the charge and then restart
    them later using the following commands:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，如果实验需要长时间保持，可以通过停止并取消分配每个虚拟机来最小化费用，然后稍后使用以下命令重新启动它们：
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This section has fully run through the creation of your developer desktop and
    then standing up and destroying Puppet infrastructure. It ensures you are ready
    for the labs in future chapters. In this lab, the `pecdm` and `peadm` modules
    are used to configure a standard architecture, which is one of Puppet’s supported
    architectures: [https://puppet.com/docs/pe/latest/supported_architectures.html](https://puppet.com/docs/pe/latest/supported_architectures.html).
    In [*Chapter 14*](B18492_14.xhtml#_idTextAnchor340)*,* we will discuss, in more
    detail, the different architecture options. But for now, it is important to understand
    that the standard is the base level providing a single Puppet Server. In this
    scenario, `pecdm` configures the necessary infrastructure using Terraform, while
    `peadm` installs the Puppet Enterprise components. Both modules will be used as
    examples of using Bolt projects, tasks, and plans and will be reviewed in [*Chapter
    12*](B18492_12.xhtml#_idTextAnchor293)*.*'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 本节已经完整介绍了开发者桌面的创建，以及启动和销毁Puppet基础设施的过程。这确保你为后续章节中的实验做好准备。在本实验中，`pecdm`和`peadm`模块用于配置标准架构，这是Puppet支持的架构之一：[https://puppet.com/docs/pe/latest/supported_architectures.html](https://puppet.com/docs/pe/latest/supported_architectures.html)。在[*第14章*](B18492_14.xhtml#_idTextAnchor340)*中*，我们将更详细地讨论不同的架构选项。但目前，理解标准架构作为提供单个Puppet服务器的基础层级非常重要。在这个场景下，`pecdm`使用Terraform配置必要的基础设施，而`peadm`则安装Puppet
    Enterprise组件。这两个模块将作为使用Bolt项目、任务和计划的示例，并将在[*第12章*](B18492_12.xhtml#_idTextAnchor293)*中*进行回顾。
- en: References and further research
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料和进一步研究
- en: This section will cover further resources and references that can be used alongside
    this book. They go into further depth and enable you to learn about Puppet from
    both Puppet and the community.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将介绍可与本书一起使用的进一步资源和参考资料。这些内容深入探讨了 Puppet，并使您能够从 Puppet 和社区两个方面学习 Puppet。
- en: The general page ([https://puppet.com/docs/](https://puppet.com/docs/)) is the
    core doc page, where you can find all the products of Puppet and sections such
    as patterns and tactics. We will highlight different sections of the docs to refer
    to as we progress through the book.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一般页面 ([https://puppet.com/docs/](https://puppet.com/docs/)) 是核心文档页面，您可以在此找到
    Puppet 的所有产品以及模式和策略等部分。在我们通过本书时，我们将重点介绍文档中的不同部分。
- en: 'Puppet runs through various media forms where a variety of articles are published
    covering new product releases, security updates, and guides for implementations.
    Their handles are listed as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 通过各种媒体形式发布文章，涵盖了新产品发布、安全更新和实施指南等内容。它们的社交媒体账号如下所示：
- en: 'Blog: [https://puppet.com/blog](https://puppet.com/blog)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '博客: [https://puppet.com/blog](https://puppet.com/blog)'
- en: 'Podcast: [https://pulling-the-strings.simplecast.com/](https://pulling-the-strings.simplecast.com/)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '播客: [https://pulling-the-strings.simplecast.com/](https://pulling-the-strings.simplecast.com/)'
- en: 'Dev.to articles: [https://dev.to/puppetecosystem](https://dev.to/puppetecosystem)
    and [https://dev.to/puppet](https://dev.to/puppet)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Dev.to 文章: [https://dev.to/puppetecosystem](https://dev.to/puppetecosystem)
    和 [https://dev.to/puppet](https://dev.to/puppet)'
- en: 'Twitter: [https://twitter.com/puppetize](https://twitter.com/puppetize) and
    [https://twitter.com/PuppetEcosystem](https://twitter.com/PuppetEcosystem)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Twitter: [https://twitter.com/puppetize](https://twitter.com/puppetize) 和 [https://twitter.com/PuppetEcosystem](https://twitter.com/PuppetEcosystem)'
- en: 'YouTube: [https://www.youtube.com/channel/UCPfMWIY-qNbLhIrbZm2BFMQ](https://www.youtube.com/channel/UCPfMWIY-qNbLhIrbZm2BFMQ)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'YouTube: [https://www.youtube.com/channel/UCPfMWIY-qNbLhIrbZm2BFMQ](https://www.youtube.com/channel/UCPfMWIY-qNbLhIrbZm2BFMQ)'
- en: Puppet has its own learning site ([https://training.puppet.com/learn](https://training.puppet.com/learn)),this
    site includes various elements such as the Puppet practice labs, which are online
    labs you can run entirely from a web browser and tackle boxes, which are guides
    on achieving small focused tasks. Puppet’s support knowledge base was made public
    in April 2022, allowing anyone to search and view the troubleshooting guides,
    best practices, and FAQs, which are available at [https://support.puppet.com](https://support.puppet.com),
    without the need for a login. Archived articles for the older version of Puppet
    can be found at [https://github.com/puppetlabs/docs-archive/tree/main/supportkb#readme](https://github.com/puppetlabs/docs-archive/tree/main/supportkb#readme).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 拥有自己的学习网站 ([https://training.puppet.com/learn](https://training.puppet.com/learn))，该网站包括多个元素，如
    Puppet 实践实验室，这些在线实验室可以完全通过 Web 浏览器运行，以及任务箱，它们是关于完成小型专注任务的指南。Puppet 的支持知识库于 2022
    年 4 月公开，允许任何人无需登录即可搜索并查看故障排除指南、最佳实践和常见问题解答，网址为 [https://support.puppet.com](https://support.puppet.com)。旧版本
    Puppet 的档案文章可以在 [https://github.com/puppetlabs/docs-archive/tree/main/supportkb#readme](https://github.com/puppetlabs/docs-archive/tree/main/supportkb#readme)
    找到。
- en: Puppet previously run two, instructor-led training courses, which had to be
    paid for and lasted 3 days (*Getting started with Puppet* and *Puppet Practioner*).
    During 2022 the *Fundamental Core Training* modules replaced *Getting started
    with Puppet*, and the *Advanced Core Training* modules replaced *Puppet Practioner*.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 之前提供了两门由讲师主导的培训课程，这些课程需要付费并持续 3 天（*Puppet 入门* 和 *Puppet 实践者*）。在 2022
    年，*基础核心培训* 模块取代了 *Puppet 入门*，而 *高级核心培训* 模块取代了 *Puppet 实践者*。
- en: The key difference is that the `Fundamental Core Training` modules are free
    to register for, and both training sets are broken up into three module sets that
    are each a day long. More details can be found on the Puppet Compass site.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 关键的区别在于 `基础核心培训` 模块是免费的注册课程，且两个培训集都被拆分成三个模块集，每个模块持续一天。更多详细信息请访问 Puppet Compass
    网站。
- en: '*Fundamental* *Core Training*:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '*基础* *核心培训*：'
- en: 'PE101: Deploy and Discover'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'PE101: 部署与发现'
- en: 'PE201: Design and Manage'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'PE201: 设计与管理'
- en: 'PE301: Develop and Maintain'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'PE301: 开发与维护'
- en: '*Advanced* *Core Training*:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '*高级* *核心培训*：'
- en: 'PE401: Extend Capability'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'PE401: 扩展能力'
- en: 'PE501: Continuously Deliver'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'PE501: 持续交付'
- en: 'PE601: Automate at Scale'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'PE601: 规模化自动化'
- en: Enterprise modules that produce commercially licensed Puppet modules on the
    Puppet forge have a blog discussing various Puppet topics at [https://www.enterprisemodules.com/blog/](https://www.enterprisemodules.com/blog/)
    and a Twitter account at [https://twitter.com/enterprisemodul](https://twitter.com/enterprisemodul).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 提供商业许可 Puppet 模块的企业模块（Enterprise Modules）在 Puppet forge 上有一个博客，讨论各种 Puppet 话题，网址是
    [https://www.enterprisemodules.com/blog/](https://www.enterprisemodules.com/blog/)，同时也有一个
    Twitter 账户 [https://twitter.com/enterprisemodul](https://twitter.com/enterprisemodul)。
- en: Two other noted Puppet consultancy and development groups were formed after
    the split of Example42 GmbH into Example42, which is now a brand of Lab42 with
    a blog at [https://blog.example42.com/blog/](https://blog.example42.com/blog/)
    and a Twitter account at [https://twitter.com/example42](https://twitter.com/example42),
    and Betabots, which has a blog at [https://dev.to/betadots](https://dev.to/betadots)
    and a Twitter account at [https://twitter.com/betadots](https://twitter.com/betadots).
    Both provide insights into their Puppet development work and approaches.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 另两个著名的 Puppet 咨询和开发团队是在 Example42 GmbH 分拆后成立的，一个是 Example42，现在是 Lab42 的品牌，拥有一个博客
    [https://blog.example42.com/blog/](https://blog.example42.com/blog/) 和一个 Twitter
    账户 [https://twitter.com/example42](https://twitter.com/example42)；另一个是 Betabots，拥有一个博客
    [https://dev.to/betadots](https://dev.to/betadots) 和一个 Twitter 账户 [https://twitter.com/betadots](https://twitter.com/betadots)。这两个团队都提供了关于他们在
    Puppet 开发工作和方法的见解。
- en: To ask questions about Puppet or talk with people in the community, you can
    join [https://slack.puppet.com/](https://slack.puppet.com/) and [https://www.reddit.com/r/Puppet/](https://www.reddit.com/r/Puppet/)
    to ask questions about Puppet and the community.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要提问关于 Puppet 或与社区中的人交流，可以加入 [https://slack.puppet.com/](https://slack.puppet.com/)
    和 [https://www.reddit.com/r/Puppet/](https://www.reddit.com/r/Puppet/) 来提问有关 Puppet
    的问题以及与社区互动。
- en: This section is not supposed to be an exhaustive list of references. It is to
    give a view of some of the better-known and long-lasting sources of information
    and communities to view and follow to get to know Puppet better.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 本节并不打算列出所有参考资料，而是提供一些更为知名和持久的信息源和社区，供读者参考和关注，以便更好地了解 Puppet。
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小结
- en: In this chapter, we discussed the changes in the modern versions of Puppet 5
    to 7 and some antipatterns to look out for that could be left over from legacy
    Puppet code. It might be more practical to come back to this section if you aren’t
    familiar with Puppet and read through the changes again once completing the book.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们讨论了从 Puppet 5 到 7 的现代版本变化，并介绍了一些反模式，警惕可能仍然存在于遗留 Puppet 代码中的问题。如果你不熟悉 Puppet，可能在完成本书后回到这一部分，重新阅读这些变化会更实际。
- en: We covered the available tooling to use in a developer environment and the IDE
    to automate and quicken your Puppet development environment, and we have installed
    these tools to introduce the lab. We have learned how to stand up both the reader’s
    development environment and the Puppet infrastructure in Azure.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了在开发环境中使用的工具和 IDE，来自动化和加速 Puppet 开发环境，并已安装这些工具来介绍实验室内容。我们学会了如何在 Azure 上搭建读者的开发环境和
    Puppet 基础设施。
- en: At the end of this chapter, we covered the various sources and communities that
    can be used to further learn about Puppet, keep up to date with ongoing developments,
    and signpost where to ask questions and discuss Puppet with the community.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们覆盖了可以用来进一步学习 Puppet 的各种资源和社区，帮助读者跟上最新的发展动态，并指引如何提问和与社区讨论 Puppet。
- en: In the next chapter, we will begin to look at the Puppet language, covering
    the fundamental building blocks of resources, types, and providers. We will look
    at the basic syntax and style of coding in Puppet and how to use various references
    and commands to make it easier to generate code and find documentation. We will
    look at the core types to start coding in Puppet and how to use them well. Then,
    we will look at how to use defined types for repeatable patterns of resources,
    use classes to contain and include resources in catalogs, and finally, finish
    by looking at the more advanced feature of exporting and collecting resources
    to share resource declarations across multiple clients.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始学习 Puppet 语言，涵盖资源、类型和提供者的基本构建模块。我们将了解 Puppet 编程的基本语法和风格，以及如何使用各种引用和命令来简化代码生成和查找文档的过程。我们将首先学习
    Puppet 中的核心类型，了解如何高效使用它们。接下来，我们将介绍如何使用定义类型来实现资源的可重复模式，如何使用类来包含和引用目录中的资源，最后，介绍如何使用更高级的功能——导出和收集资源，以便在多个客户端之间共享资源声明。
