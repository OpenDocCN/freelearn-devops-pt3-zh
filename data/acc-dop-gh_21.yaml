- en: '*Chapter 17*: Empower Your Teams'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第17章*：赋能你的团队'
- en: If my customers are not content with their architecture, I let them explain
    the organizational structure of their product and draw a diagram of it. If you
    compare this organizational chart with their architecture diagram, you always
    can find a lot of similarities. This correlation between the organizational structure
    and software architecture is called **Conway's law**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我的客户对他们的架构不满意，我会让他们解释他们产品的组织结构，并画出它的图示。如果你将这个组织结构图与他们的架构图进行比较，你总是能发现许多相似之处。组织结构与软件架构之间的这种关联被称为**康威定律**。
- en: In this chapter, you'll learn how you can leverage this correlation to improve
    your architecture, organization structure, and software delivery performance.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何利用这种关联来改善你的架构、组织结构和软件交付性能。
- en: 'The following are the core topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的核心主题：
- en: Conway's law
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 康威定律
- en: The two-pizza team
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个披萨团队
- en: Inverse Conway Maneuver
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反向康威操作
- en: Delivery cadence
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交付节奏
- en: A mono- or multi-repo strategy
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单库或多库策略
- en: Conway's law
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 康威定律
- en: 'Conway''s law goes back to an essay from 1968 (*Conway, Melvin, 1968*, p31):'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 康威定律追溯到1968年的一篇文章（*康威，梅尔文，1968*，第31页）：
- en: '"Organizations which design systems (…) are constrained to produce designs
    which are copies of the communication structure of the organizations."'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '"设计系统的组织（……）被迫产生与组织通信结构相匹配的设计。"'
- en: – Melvin E. Conway
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: – 梅尔文·E·康威
- en: The law is not specific to software or system architecture but to the design
    of any system. Note that it is not referring to an organization's management structure
    but its communication structure. These might be the same thing – but in some cases,
    it's not. Normally, if the organizational chart does not match the software design,
    you can look for the communication flow, and it is different from the organizational
    chart.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 该法则不仅适用于软件或系统架构，也适用于任何系统的设计。请注意，它并不是指一个组织的管理结构，而是指其通信结构。这两者可能是相同的——但在某些情况下，它们并不相同。通常，如果组织结构图与软件设计不匹配，你可以寻找其通信流，它与组织结构图是不同的。
- en: 'If, for example, you have many small teams or individual developers that receive
    requirements from different customers or consultants, they will probably talk
    to each other without any organizational boundaries. The system they are working
    on will reflect that and consist of many modules with a high cohesion that reference
    each other – a so-called *spaghetti architecture*. Whereas teams that work together
    and receive their input through one communication channel – for example, a product
    owner – will build a system with a high cohesion in the modules that the team
    works on. But the parts of the system the other teams work on will have fewer
    references. To put it in the words of *Eric S. Raymond*, "*if three teams are
    working on a compiler, you''ll get a three-pass compiler*" (see *Raymond, Eric
    S. 1996*, p124). *Figure 17.1* visualizes these two examples:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你有许多小团队或独立开发者，他们从不同的客户或顾问那里接收需求，他们可能会在没有任何组织边界的情况下相互沟通。他们正在开发的系统将反映这一点，包含许多具有高度内聚性的模块，这些模块相互引用——这就是所谓的*意大利面架构*。而那些共同工作并通过一个通信渠道接收输入的团队——例如一个产品负责人——将构建一个模块内聚性较高的系统，而其他团队所开发的系统部分将引用较少。用*埃里克·S·雷蒙德*的话来说，"*如果三个团队在做一个编译器，你会得到一个三遍编译器*"（见*雷蒙德，埃里克
    S. 1996*，第124页）。*图17.1* 直观地展示了这两个示例：
- en: '![Figure 17.1 – Examples of the different software designs based on a communication
    structure'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.1 – 基于通信结构的不同软件设计示例'
- en: '](img/B17827_17_001.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_17_001.jpg)'
- en: Figure 17.1 – Examples of the different software designs based on a communication
    structure
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.1 – 基于通信结构的不同软件设计示例
- en: But what is the desired communication structure that will lead to a system design
    that helps teams to accelerate their engineering velocity?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但是什么样的通信结构能够导致有助于加速团队工程速度的系统设计呢？
- en: The two-pizza team
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 两个披萨团队
- en: 'One of the most discussed microservice-based architectures that allows thousands
    of deployments per day at a large scale is the architecture of **Amazon**. They
    use the **two-pizza rule** for their team setup (*Amazon, 2020*):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个最受讨论的基于微服务的架构，可以在大规模下实现每天成千上万次的部署，就是**亚马逊**的架构。他们为团队设置使用**两个披萨法则**（*亚马逊，2020*）：
- en: '"We try to create teams that are no larger than can be fed by two pizzas."'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们试图创建的团队不应超过两个披萨能够喂饱的规模。"'
- en: – Jeff Bezos
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: – 杰夫·贝佐斯
- en: 'But how many people exactly can you feed with two pizzas? In our user groups,
    we always calculate one party pizza for three to four people. That would make
    a team size of six to eight people. At Giordano''s in the US, they use the 3/8
    rule – the number of pizzas you order should be three times the number of people
    to feed divided by eight:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，究竟能用两块披萨喂多少人呢？在我们的用户小组中，我们通常按照每三到四个人一块披萨来计算。这意味着团队的规模应为6到8人。在美国的Giordano's餐厅，他们采用了3/8规则——你订购的披萨数量应为喂食人数的三倍再除以8：
- en: This would result in a maximum of 5 to 6 people in each team. So, the size of
    a two-pizza team is not very well defined – and I think it has nothing to do with
    the hunger of the team members. The rule just means that the team should be small.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致每个团队最多由5到6人组成。所以，所谓的“两披萨团队”规模并没有明确的定义——我认为这与团队成员的饥饿感无关。这个规则仅仅意味着团队应该保持小规模。
- en: 'The problem with big teams is that the number of links in the team grows rapidly
    with every team member added. You can calculate the number of links using the
    following formula:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 大型团队的问题在于，随着每个新增成员，团队中成员之间的链接数量迅速增长。你可以使用以下公式计算链接数量：
- en: 'Here, *n* is the number of people in the team. This means that a team with
    6 members has 15 links between the members – whereas a team of 12 already has
    66 links (see *Figure 17.2*):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，*n*表示团队中的人数。这意味着一个6人的团队有15个成员之间的链接——而一个12人的团队则已经有66个链接（见*图17.2*）：
- en: '![Figure 17.2 – The number of links between the members of a team'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.2 – 团队成员之间的链接数量'
- en: '](img/B17827_17_002.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_17_002.jpg)'
- en: Figure 17.2 – The number of links between the members of a team
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.2 – 团队成员之间的链接数量
- en: 'If people work in teams, they experience a positive synergy. The diversity
    and communication help to increase quality as well as the outcome. But if you
    add more people to the team, communication overhead and slower decision-making
    lead to a negative synergy (see *Figure 17.3*):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果人们在团队中工作，他们会体验到积极的协同效应。多样性和沟通有助于提高质量和成果。但是，如果你在团队中增加更多人，沟通成本和决策速度减慢会导致负协同效应（见*图17.3*）：
- en: '![Figure 17.3 – Effectiveness of collaboration and team size'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.3 – 协作效果与团队规模'
- en: '](img/B17827_17_003.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_17_003.jpg)'
- en: Figure 17.3 – Effectiveness of collaboration and team size
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.3 – 协作效果与团队规模
- en: But what is the magic number – the optimum number of people for a team?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是神奇的数字——团队的最佳人数是多少？
- en: The US Navy Seals state that four is the optimal size for a combat team (*Willink,
    J. and Leif Babin, L., 2017*). They also rely on high-frequency communication
    in a complex environment. But the skills of a combat team are probably more linear
    than those of a cross-functional development team. So, there is no evidence that
    the number is also optimum for development teams.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 美国海军海豹突击队认为，四人是作战团队的最佳规模（*Willink, J. 和 Leif Babin, L., 2017*）。他们还依赖于在复杂环境中的高频率沟通。但是，作战团队的技能可能比跨职能开发团队的技能更为线性。因此，并没有证据表明这个数字对于开发团队也是最优的。
- en: In Scrum, **Miller's law** states that the magical number seven, plus or minus
    two (*Miller, G.A., 1956*), is used to define the recommended team size. Miller's
    law is an essay from 1956 on the limitations of our short memory that was associated
    with communication capabilities. But Miller's law was scientifically refuted,
    and the reason that Scrum still uses the numbers is that five to nine is simply
    a good team size in many circumstances – but without any scientific substantiation.
    There are also high-performance scrum teams with only 3 members – and others with
    14 members.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scrum中，**米勒定律**认为神奇的七这个数字，±2（*Miller, G.A., 1956*），用来定义推荐的团队规模。米勒定律是1956年关于我们短期记忆限制的文章，旨在探讨与沟通能力相关的问题。但米勒定律已经被科学证伪，Scrum之所以仍使用这个数字，是因为五到九人的团队在许多情况下确实是一个不错的规模——但这没有任何科学依据。也有只有3名成员的高效Scrum团队——还有一些团队有14名成员。
- en: 'There is a study from QSM analyzing 491 development projects. The study concludes
    that smaller teams have higher productivity, less development effort, and a better
    development schedule (*QSM, 2011*). The clusters of a team with 1.5 to 3 people,
    3 to 5 people, and 5 to 7 people were close together. More than seven people led
    to a dramatic increase in development effort (see *Figure 17.4*):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有一项来自QSM的研究分析了491个开发项目。研究得出结论，小型团队具有更高的生产力、更少的开发努力和更好的开发进度表（*QSM, 2011*）。团队规模在1.5到3人、3到5人和5到7人之间的聚类结果非常接近。超过七人则会导致开发努力的急剧增加（见*图17.4*）：
- en: '![Figure 17.4 – A summary of the results of the QSM study'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.4 – QSM研究结果的总结'
- en: '](img/B17827_17_004.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_17_004.jpg)'
- en: Figure 17.4 – A summary of the results of the QSM study
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.4 – QSM研究结果的总结
- en: 'There are several reasons why smaller teams perform better than larger teams
    (see *Cohn M., 2009*, pp177–180):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个原因解释了为什么较小的团队表现优于较大的团队（见*Cohn M., 2009*，第177–180页）：
- en: '**Social loafing**: Social loafing is a phenomenon where persons tend to exert
    less effort to achieve a goal when they work in a group where individual performance
    cannot be measured (*Karau, S.J., and Williams, K.D., 1993*). Smaller groups tend
    to be less affected by social loafing.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社会懒散**：社会懒散是一种现象，指的是当人在一个团队中工作时，由于个人表现无法被衡量，他们往往会减少为达成目标所投入的努力（*Karau, S.J.,
    和 Williams, K.D., 1993*）。较小的团队通常较不受社会懒散的影响。'
- en: '**Cohesion and ownership**: Smaller teams have more constructive interactions,
    and it is easier for the members to build feelings of trust, mutual ownership,
    and cohesiveness (*Robbins S., 2005*).'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**凝聚力和主人翁精神**：较小的团队更容易进行建设性的互动，成员们更容易建立信任、共同拥有感和凝聚力（*Robbins S., 2005*）。'
- en: '**Coordination effort**: In a smaller team, there is less time spent on coordination.
    Simple things – such as coordinating a meeting – tend to be much more complex
    in larger teams.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协调工作**：在较小的团队中，协调所花费的时间较少。简单的事情——例如协调会议——在更大的团队中往往会变得更加复杂。'
- en: '**More rewarding**: The contributions of an individual are more visible in
    smaller teams. This, and the better social cohesiveness, lead to a more rewarding
    environment if the team size is smaller (*Steiner, I.D., 1972*).'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更有回报**：在较小的团队中，个人的贡献更容易被看到。这一点，加上更好的社会凝聚力，导致如果团队规模较小，环境会更具回报性（*Steiner, I.D.,
    1972*）。'
- en: Of course, smaller teams have also some disadvantages. The biggest is the risk
    of **losing one or more team members**, which is much harder to be compensated
    for in smaller teams. Another disadvantage is **the lack of certain expert skills**.
    If you need deep expertise in five areas, it is nearly impossible to deliver it
    with a three-member team.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，较小的团队也有一些缺点。最大的缺点是**失去一个或多个团队成员**的风险，这在小团队中更难以弥补。另一个缺点是**缺乏某些专家技能**。如果你需要在五个领域拥有深厚的专业知识，三人团队几乎不可能提供这种能力。
- en: Looking at this data, the optimal size for a two-pizza team is somewhere between
    three and seven – balancing the advantages and disadvantages, depending on your
    environment.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些数据来看，两块披萨团队的最佳规模大约是在三人到七人之间——根据环境的不同，平衡优缺点。
- en: Inverse Conway Maneuver
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反向Conway法则
- en: Now that we know the optimal size for our teams, we can perform something that
    is called the **Inverse Conway Maneuver** (*Forsgren N., Humble, J., and Kim,
    G., 2018*, page 102). If you evolve your organization structure to autonomous
    two-pizza teams, your architecture evolves into a more loosely coupled one.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了团队的最佳规模，我们可以进行一种叫做**反向Conway法则**的操作（*Forsgren N., Humble, J., 和 Kim,
    G., 2018*，第102页）。如果你将组织结构发展为自主的两块披萨团队，你的架构将演变为一个更加松耦合的结构。
- en: 'But it''s not just the team size! If you create your teams around functionalities,
    it will result in a layered or multi-tier architecture. If you put frontend developers
    and database specialists in teams, your architecture will decouple at these communication
    points (see *Figure 17.5*):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 但不仅仅是团队的规模！如果你围绕功能创建团队，这将导致分层或多层架构。如果你将前端开发人员和数据库专家放在同一个团队中，你的架构将在这些沟通点解耦（见*图17.5*）：
- en: '![Figure 17.5 – Functional teams lead to a layered architecture'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.5 – 功能性团队导致分层架构'
- en: '](img/B17827_17_005.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_17_005.jpg)'
- en: Figure 17.5 – Functional teams lead to a layered architecture
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.5 – 功能性团队导致分层架构
- en: 'To achieve a deployable and testable architecture that empowers the teams,
    you must create cross-functional teams responsible for business outcomes. This
    will lead to the desired architecture that helps you to move fast (see *Figure
    17.6*):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现可部署和可测试的架构，赋能团队，你必须创建对业务成果负责的跨职能团队。这将导致理想的架构，帮助你快速行动（见*图17.6*）：
- en: '![Figure 17.6 – Cross-functional teams aligned around business capabilities
    for fast value delivery'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.6 – 围绕业务能力对齐的跨职能团队，实现快速价值交付'
- en: '](img/B17827_17_006.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_17_006.jpg)'
- en: Figure 17.6 – Cross-functional teams aligned around business capabilities for
    fast value delivery
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.6 – 围绕业务能力对齐的跨职能团队，实现快速价值交付
- en: 'There are four types of team topologies that have a positive impact on system
    architecture and, therefore, software delivery performance (*Skelton M., and Pais
    M., 2019*):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有四种团队拓扑结构对系统架构产生积极影响，因此也能提升软件交付绩效（*Skelton M. 和 Pais M., 2019*）：
- en: '**Value stream-aligned**: This is the most important team topology – cross-functional
    teams that can deliver significant value to their customers without relying on
    other teams to do so. These teams need all required skills to deliver value –
    for example, UX, QA, DBA, and operational skills.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**价值流对齐团队**：这是最重要的团队拓扑——跨职能团队，能够独立交付显著的客户价值，而不依赖其他团队的帮助。这些团队需要具备所有交付价值所需的技能——例如，用户体验（UX）、质量保证（QA）、数据库管理员（DBA）和运营技能。'
- en: '**Platform teams**: Teams that build the platform that enables the value stream-aligned
    teams to deliver value by reducing complexity and simplifying the software delivery
    process.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台团队**：负责构建平台的团队，通过减少复杂性和简化软件交付流程，使得与价值流对齐的团队能够交付价值。'
- en: '**Enabling teams**: Teams that enable other teams to take responsibility as
    part of an onboarding, transitional, or training phase.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持团队**：帮助其他团队承担责任的团队，通常出现在入职、过渡或培训阶段。'
- en: '**Subsystem team**: This team type should only be created if absolutely necessary!
    If a subsystem is too complicated to be handled by stream-aligned teams or platform
    teams, it might be preferable to have a functional team that handles this subsystem.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子系统团队**：只有在绝对必要的情况下才应创建这种团队！如果某个子系统过于复杂，无法由价值流对齐团队或平台团队处理，可能更适合设置一个专门处理该子系统的职能团队。'
- en: It is important that each team has a clear responsibility and can deliver value
    without relying on other teams to finish certain tasks.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 每个团队必须有明确的责任，能够独立交付价值，而无需依赖其他团队完成某些任务，这一点非常重要。
- en: 'But to achieve the desired effect on performance, you have to limit how the
    teams interact to one of the following three **modes of interaction**:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现对绩效的预期效果，必须限制团队之间的互动方式，确保互动方式仅限于以下三种**互动模式**之一：
- en: '**Collaboration**: Two or more teams work closely together for a certain time
    and share the responsibility.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协作**：两个或更多团队在一定时间内密切合作，共同承担责任。'
- en: '**Self-service**: A team provides its value to another team as a service. The
    responsibilities are clearly separated, and the service can be consumed as easily
    and automated as possible.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自助服务**：一个团队将其价值作为服务提供给另一个团队。职责明确分离，服务尽可能容易且自动化地提供。'
- en: '**Facilitating**: One team enables another team and helps them for a certain
    time to learn new things or develop new habits.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**促进**：一个团队帮助另一个团队，协助其在一定时间内学习新知识或培养新习惯。'
- en: Building an effective team topology with good, well-defined communication and
    interaction has a huge influence – not only on the system architecture but also
    on the engineering velocity.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个有效的团队拓扑，拥有良好且明确的沟通和互动，对系统架构和工程速度都有巨大的影响。
- en: Delivery cadence
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交付节奏
- en: Even with cross-functional, autonomous teams, you'll still have some interdependencies
    and communication flow occurring between the teams. In the first chapters of this
    book, when I explained the flow of work and metrics, I focused on efficiency,
    flow, batch size, and a continuous delivery value. But you still need some cadence
    to control your flow. In Scrum, this is called **empirical process control**.
    After a certain time, you pause to **inspect** and **adopt** – not only what you
    deliver but also your process and team dynamics. This time span is called a **sprint**
    in Scrum. I don't like that term because it implies a fast pace, and development
    should have a constant, steady pace. You don't sprint if you want to run a marathon
    – and product development is a marathon and not a series of sprints (but a marathon
    does not match with the analogy of rugby, of course). But no matter what you call
    these intervals, they are important for continuous learning and adoption and team
    building. These intervals are also important to communicate – to stakeholders
    and other teams.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是跨职能的自主团队，你们之间仍然会有一些相互依赖和沟通流动。在本书的前几章中，当我解释工作流和度量标准时，我重点讲解了效率、流动、批量大小和持续交付的价值。但你仍然需要一些节奏来控制你的工作流。在Scrum中，这叫做**经验过程控制**。经过一段时间后，你需要暂停来**检查**和**采纳**——不仅是你交付的内容，还有你的过程和团队动态。这个时间跨度在Scrum中被称为**冲刺**。我不喜欢这个词，因为它暗示了快速的节奏，而开发应该有一个持续稳定的节奏。如果你想跑马拉松，你不会进行短跑——产品开发是马拉松，而不是一系列短跑（但显然，马拉松这个比喻并不适用于橄榄球）。但无论你怎么称呼这些间隔，它们对持续学习、采纳和团队建设都很重要。这些间隔同样重要，用来进行沟通——与利益相关者和其他团队沟通。
- en: That's why these intervals should be aligned across all teams. They should determine
    the steady cadence and act as the heartbeat of the engineering organization.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么这些间隔应该在所有团队之间对齐。它们应该确定稳定的节奏，并作为工程组织的心跳。
- en: 'The intervals should not be too long and not too short. A month would be the
    maximum and a minimum of 2 weeks for most companies. That does not mean that teams
    can''t do smaller iterations or sprints. They can still do 1-week sprints; they
    just would align them with the global cadence. You can have a faster pace and
    align it to a slower cadence – but not vice versa (see *Figure 17.7*):'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这些间隔不应太长，也不应太短。大多数公司最大为一个月，最小为2周。这并不意味着团队不能做更小的迭代或冲刺。它们仍然可以做1周的冲刺，只是需要与全局节奏对齐。你可以有更快的节奏，并与较慢的节奏对齐——但反之则不行（见*图17.7*）：
- en: '![Figure 17.7 – Aligning faster iterations with the delivery cadence'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.7 – 将更快的迭代与交付节奏对齐'
- en: '](img/B17827_17_007.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_17_007.jpg)'
- en: Figure 17.7 – Aligning faster iterations with the delivery cadence
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.7 – 将更快的迭代与交付节奏对齐
- en: 'In this case, *x* does not necessarily have to be measured in weeks. When defining
    the cadence, think about the **pulse of the entire organization**. If everything
    in your organization runs on a monthly basis, then a 3-week cadence would not
    be in sync with the rest of your company. In this case, defining a monthly cadence
    – or a fraction of it – is the better choice and causes less friction. If your
    company is publicly traded and uses the 4-4-5 calendar, a fiscal quarter might
    be your pulse. Have a look at the organization pulse and sync your sprint cadence
    with it so that the intervals are in harmony with the organization pulse (see
    *Figure 17.8*):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，*x*不一定需要以周为单位来衡量。当定义节奏时，要考虑到**整个组织的脉搏**。如果你们组织中的一切都按月运行，那么3周的节奏就无法与公司其他部分同步。在这种情况下，定义一个月的节奏——或者它的一部分——是更好的选择，且能减少摩擦。如果你的公司是上市公司并采用4-4-5日历制度，那么财务季度可能就是你的脉搏。观察组织的脉搏，并使你的冲刺节奏与其同步，这样这些间隔就能与组织脉搏保持和谐（见*图17.8*）：
- en: '![Figure 17.8 – Align your cadence to be in sync with the organization pulse'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.8 – 将你的节奏与组织的脉搏同步'
- en: '](img/B17827_17_008.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_17_008.jpg)'
- en: Figure 17.8 – Align your cadence to be in sync with the organization pulse
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.8 – 将你的节奏与组织的脉搏同步
- en: If your cadence is not in sync with your organization, it will generate friction.
    Meetings will conflict, and feedback and numbers might not be available when you
    need them. A consistent cadence in sync with your organizational pulse will help
    to smooth out flow and improve communication (*Reinertsen D., 2009*, pp176–78).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的节奏没有与组织同步，就会产生摩擦。会议将会冲突，反馈和数字可能在你需要时无法获得。与组织脉搏同步的一致节奏将有助于平滑工作流并改善沟通（*Reinertsen
    D., 2009*, 第176–178页）。
- en: A mono- or multi-repo strategy
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单一仓库或多仓库策略
- en: 'Besides team size and cadence, the way you structure your code has also an
    impact on your architecture if you want to perform the Inverse Conway Maneuver.
    There are two strategies:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 除了团队规模和节奏外，如果你想执行逆康威操作，代码结构的方式也会影响你的架构。有两种策略：
- en: '**A mono-repo strategy**: There is only one repository that contains all modules
    (or microservices) that are needed by an application.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单一仓库策略**：只有一个仓库，包含应用程序所需的所有模块（或微服务）。'
- en: '**A multi-repo strategy**: Each module or microservice lives in its own repository,
    and you must deploy multiple repositories to get a complete working application.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多仓库策略**：每个模块或微服务都有自己的仓库，你必须部署多个仓库才能获得一个完整的工作应用程序。'
- en: Both strategies have advantages and disadvantages. The biggest advantage of
    the mono-repo strategy is that it is easy to deploy and debug the entire application.
    But mono repos tend to get very large very fast, and that reduces the performance
    of Git. Also, deploying and testing different parts of the application independently
    becomes difficult with a growing repository. This leads to a tighter coupling
    of the architecture.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 两种策略各有优缺点。单一仓库策略的最大优点是可以轻松地部署和调试整个应用程序。但单一仓库往往会迅速变得非常庞大，这会降低 Git 的性能。此外，随着仓库的增长，独立部署和测试应用程序的不同部分变得困难，这导致了架构的耦合度更紧密。
- en: Working with large mono repositories
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用大型单一仓库
- en: 'What does big repo mean in the context of Git? The repo of the Linux kernel
    is about 3 GB. It takes quite some time to clone, and the individual Git commands
    are slow – but still in an acceptable range. The Windows repository has about
    300 GB – 100 times the Linux kernel. Performing certain Git actions on the Windows
    repository takes some time:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Git 的上下文中，大型仓库意味着什么？Linux 内核的仓库大约是 3 GB。克隆这个仓库需要一些时间，单个 Git 命令也比较慢——但仍在可以接受的范围内。而
    Windows 仓库大约是 300 GB——是 Linux 内核的 100 倍。在 Windows 仓库上执行某些 Git 操作需要一些时间：
- en: '`git clone`: About 12 hours'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git clone`：大约 12 小时'
- en: '`git checkout`: About 3 hours'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git checkout`：大约 3 小时'
- en: '`git status`: About 8 minutes'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git status`：大约 8 分钟'
- en: '`git add and git commit`: About 3 minutes'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git add 和 git commit`：大约 3 分钟'
- en: 'That''s why Microsoft maintains its own fork of the Git client ([https://github.com/microsoft/git](https://github.com/microsoft/git)).
    This fork contains a lot of optimizations for large repositories. It includes
    the **scalar CLI** ([https://github.com/microsoft/git/blob/HEAD/contrib/scalar/docs/index.md](https://github.com/microsoft/git/blob/HEAD/contrib/scalar/docs/index.md))
    that can be used to set advanced Git config settings, maintain the repository
    in the background, and help to reduce data sent across the network. These improvements
    reduce the time for the Git actions in the Windows repository enormously:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么微软维护自己分叉的 Git 客户端 ([https://github.com/microsoft/git](https://github.com/microsoft/git))。这个分叉包含了许多针对大型仓库的优化。它包括
    **scalar CLI** ([https://github.com/microsoft/git/blob/HEAD/contrib/scalar/docs/index.md](https://github.com/microsoft/git/blob/HEAD/contrib/scalar/docs/index.md))，可以用来设置高级
    Git 配置、在后台维护仓库，并帮助减少网络传输的数据。这些改进大大减少了 Git 操作在 Windows 仓库中的时间：
- en: '`git clone`: 12 hours to 90 seconds'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git clone`：从 12 小时到 90 秒'
- en: '`git checkout`: 3 hours to 30 seconds'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git checkout`：从 3 小时到 30 秒'
- en: '`git status`: 8 minutes to 3 seconds'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git status`：从 8 分钟到 3 秒'
- en: Many of these optimizations are already part of the Git client now. You can
    use, for example, `git sparse-checkout` ([https://git-scm.com/docs/git-sparse-checkout](https://git-scm.com/docs/git-sparse-checkout)),
    which allows you to only download the parts of your repository that you need.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 许多这些优化现在已经是 Git 客户端的一部分。你可以使用例如 `git sparse-checkout` ([https://git-scm.com/docs/git-sparse-checkout](https://git-scm.com/docs/git-sparse-checkout))，它允许你只下载仓库中需要的部分。
- en: You only need the Microsoft fork if your repository is really huge; otherwise,
    you can probably optimize using the normal Git features.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当你的仓库真的非常庞大时，你才需要使用微软的分叉版本；否则，你可能可以通过正常的 Git 功能进行优化。
- en: Organizing your repos with topics and star lists
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过主题和星标列表组织你的仓库
- en: The biggest advantage of the multi-repo strategy is that you reduce the complexity
    of the individual repositories. Each repository can be maintained and deployed
    autonomously. The biggest disadvantage is that it is hard to build and test the
    entire application. But to get feedback from real users or to debug complex bugs,
    it is normally not enough to deploy an individual service or module – you need
    to update the entire application. This means coordinating multiple deployments
    across your repo boundaries.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 多仓库策略的最大优点是降低了各个仓库的复杂性。每个仓库可以独立维护和部署。最大缺点是很难构建和测试整个应用程序。但是，要从真实用户那里获取反馈或调试复杂的错误，通常仅部署单一服务或模块是不够的——你需要更新整个应用程序。这意味着需要在多个仓库边界之间协调多个部署。
- en: If you choose the multi-repo strategy, you'll end up with many small repositories.
    A good naming convention can help to structure them. You can also use **topics**
    to organize your repos. Topics can be set at the top-right corner of your repo
    (see *Figure 17.9*).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择多仓库策略，你将会拥有许多小型仓库。一个好的命名规范有助于结构化它们。你也可以使用**话题**来组织你的仓库。话题可以在仓库的右上角设置（见*图17.9*）。
- en: '![Figure 17.9 – You can set topics for your repositories for better discoverability'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.9 – 你可以为仓库设置话题，以提高可发现性'
- en: '](img/B17827_17_009.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_17_009.jpg)'
- en: Figure 17.9 – You can set topics for your repositories for better discoverability
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.9 – 你可以为仓库设置话题，以提高可发现性
- en: 'You can filter your repositories using the `topic`: keyword (see *Figure 17.10*):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `topic`：关键词来过滤你的仓库（见*图17.10*）：
- en: '![Figure 17.10 – Filter repositories based on topics'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.10 – 根据话题过滤仓库'
- en: '](img/B17827_17_010.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_17_010.jpg)'
- en: Figure 17.10 – Filter repositories based on topics
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.10 – 根据话题过滤仓库
- en: 'Another feature that you can use to organize large numbers of repositories
    is **star lists**. This is a personal feature and cannot be shared. In your GitHub
    profile, you can create lists and organize your starred repositories (see *Figure
    17.11*):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可以帮助你组织大量仓库的功能是**星标列表**。这是一个个人功能，不能共享。在你的 GitHub 个人主页中，你可以创建列表并组织你收藏的仓库（见*图17.11*）：
- en: '![Figure 17.11 – Organize your starred repositories in lists'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.11 – 将你收藏的仓库按列表进行组织'
- en: '](img/B17827_17_011.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_17_011.jpg)'
- en: Figure 17.11 – Organize your starred repositories in lists
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.11 – 将你收藏的仓库按列表进行组织
- en: You can use these features like favorites in your browser, but they do not solve
    the problem of deploying, debugging, or testing your entire application.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像浏览器中的收藏夹一样使用这些功能，但它们并不能解决部署、调试或测试整个应用程序的问题。
- en: If you are using Kubernetes for your microservices, you can use the **Bridge
    to Kubernetes** plugin ([https://marketplace.visualstudio.com/items?itemName=mindaro.mindaro](https://marketplace.visualstudio.com/items?itemName=mindaro.mindaro))
    in Visual Studio Code to debug a local service in the context of a production
    or test cluster (see *Medina A. M., 2021*). But if you rely on building and deploying
    all services at once, the best solution is to have a meta-repository that references
    all services as a submodule.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 Kubernetes 来管理微服务，你可以在 Visual Studio Code 中使用**Bridge to Kubernetes**
    插件（[https://marketplace.visualstudio.com/items?itemName=mindaro.mindaro](https://marketplace.visualstudio.com/items?itemName=mindaro.mindaro)）在生产或测试集群的上下文中调试本地服务（见*Medina
    A. M., 2021*）。但是，如果你依赖一次性构建和部署所有服务，那么最好的解决方案是拥有一个引用所有服务作为子模块的元仓库。
- en: Using Git submodules to structure your code
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Git 子模块来构建你的代码结构
- en: 'You can use a meta-repository that contains all other repositories as submodules.
    This allows you to clone all repositories with one command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用一个包含所有其他仓库作为子模块的元仓库。这样，你可以通过一条命令克隆所有仓库：
- en: '[PRE0]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Alternatively, to update the meta-repository if you already have it cloned,
    use this command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你已经克隆了元仓库，可以使用以下命令来更新它：
- en: '[PRE1]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The repository can contain the scripts or workflows to deploy the application
    as a whole.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 该仓库可以包含部署整个应用程序的脚本或工作流。
- en: 'You can use this meta-repository to do the release management and bundle the
    stable versions together. If you use branches for releases, then you can set your
    submodule to a certain branch and update it before you release the latest version:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这个元仓库来进行发布管理，并将稳定版本打包在一起。如果你使用分支进行发布，那么你可以将子模块设置为某个分支，并在发布最新版本之前更新它：
- en: '[PRE2]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you use tags for releases, then you can set each submodule to a specific
    version and commit this to your meta-repository:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用标签来管理版本，那么你可以将每个子模块设置为特定版本，并将其提交到你的元仓库中：
- en: '[PRE3]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Other people can then pull the changes and update the submodules to the version
    corresponding to the tag:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 其他人员可以拉取更改并更新子模块到与标签对应的版本：
- en: '[PRE4]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Git submodules are a nice way to work in multi-repos and deploy independently
    while still being able to manage an application as a whole. But be aware that
    the more interdependencies you have, the more complex the maintenance of the meta-repos
    and keeping them in a deployable state will be.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Git 子模块是处理多仓库并独立部署的一个不错方式，同时仍能管理整个应用程序。但要注意，你的相互依赖关系越多，元仓库的维护和保持其可部署状态的复杂性就越大。
- en: What's the right strategy?
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是正确的策略？
- en: If the mono-repo strategy or the multi-repo strategy are better suited for your
    teams it tightly couples to [*Chapter 16*](B17827_16_Epub.xhtml#_idTextAnchor335),
    *Loosely C**oupled Architecture and Microservices*, when we talked about **evolutionary
    design**. Mono-repos are good for small products and greenfield projects. With
    growing size and complexity, it's best to split microservices or modules up and
    move them to their own repos. But always have testability and deployability in
    mind – for the individual service/module and for the application as a whole.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单一仓库策略或多仓库策略更适合你的团队，它紧密联系到[*第16章*](B17827_16_Epub.xhtml#_idTextAnchor335)，*松耦合架构和微服务*，我们在其中讨论了**进化设计**。单一仓库适用于小型产品和全新项目。随着规模和复杂性的增长，最好将微服务或模块拆分并将其移到独立的仓库中。但始终要牢记可测试性和可部署性——既要考虑单个服务/模块，也要考虑整个应用程序。
- en: Case study
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究
- en: 'After the first three successful sprints, more teams at **Tailwind Gears**
    are moved to a new platform. The first teams have been selected to own a product
    that is already independently testable and deployable. With the scrum master,
    product owner, and QA member, they are a little big for the two-pizza rule, but
    this will be addressed later. The teams to follow are way too big, and they work
    on big monolith applications with a lot of interdependencies. To perform the Inverse
    Conway Maneuver, all the teams come together and self-organize the next teams
    to be moved to the new platform. The constraints are as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在前三个成功的冲刺后，更多的团队在**Tailwind Gears**被迁移到新平台。首批团队已经被选中，负责一个已经可以独立测试和部署的产品。尽管包含了
    Scrum Master、产品负责人和 QA 成员，团队的规模稍大，超出了两披萨团队的规则，但这个问题稍后会解决。接下来的团队则大得多，他们正在处理有很多相互依赖关系的大型单体应用。为了执行“逆康威”操作，所有团队汇聚在一起，进行自我组织，决定哪些团队将被迁移到新平台。约束条件如下：
- en: No bigger than a two-pizza team
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不大于一个两披萨团队
- en: Responsible for a business capability (a `StranglerFigApplication` pattern and
    be tested and deployed autonomously
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负责业务能力（`StranglerFigApplication` 模式，并能独立进行测试和部署）。
- en: This helps to evolve the design of the applications. The new microservices are
    cloud-native and have their own cloud-native data store. They get integrated into
    the existing applications using an API and event-driven architecture. The microservices
    are moved to their own repositories on the new platform because they get deployed
    independently most of the time. Synchronization with the other teams is done using
    feature flags.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于推动应用程序设计的演变。新的微服务是云原生的，并拥有自己的云原生数据存储。它们通过 API 和事件驱动架构集成到现有应用中。微服务被移到新平台上的独立仓库中，因为它们大多数时候是独立部署的。与其他团队的同步是通过功能标志来完成的。
- en: For embedded software, this does not work. The teams need a way to build and
    deploy the application as a whole. But they also want to deploy and test individual
    modules. That's why the teams decide to split the application into different repositories
    and have one meta-repository that includes the other repos as submodules. This
    allows the individual teams to deploy their module to test hardware at any time
    to test new features in real-world scenarios – but it keeps the product in state,
    where it can be released at any time.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于嵌入式软件，这种方法不可行。团队需要一种方式来构建和部署整个应用程序。但他们也希望能够独立部署和测试单个模块。这就是为什么团队决定将应用程序拆分成不同的仓库，并拥有一个包含其他仓库作为子模块的元仓库。这允许各个团队随时将其模块部署到测试硬件上，以在现实场景中测试新功能——但它仍然保持产品在一个可以随时发布的状态。
- en: When the first teams were moved to the new platform, they kept their existing
    **sprint cadence** of 3 weeks. Since the teams could work more or less autonomously,
    this was not a problem. With more teams coming to the new platform, the cadence
    gets aligned with the other teams. Tailwind Gears is a public traded company and
    used to do all its business reporting on a quarterly basis. They also report on
    a weekly basis and have a normalized 4-4-5 calendar. There are a lot of meetings
    at the end and beginning of each quarter that often collide with sprint meetings.
    The teams decide to adjust their cadence to this rhythm. The quarter consists
    of 13 weeks – but one week has the quarterly meeting, so this week is stripped
    from the sprint calendar. This week is also used for the quarterly big-room planning.
    The remaining 12 weeks are divided into 6 two-week sprints.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当第一个团队迁移到新平台时，他们保持了原有的**冲刺节奏**，每个周期为3周。由于团队可以或多或少地自主工作，这并不成问题。随着越来越多的团队加入新平台，节奏逐渐与其他团队同步。Tailwind
    Gears是一家上市公司，过去所有的业务报告都是按季度进行的。公司也会每周进行报告，并采用标准化的4-4-5日历。每个季度的开始和结束时有很多会议，这些会议经常与冲刺会议发生冲突。团队决定调整他们的节奏以适应这种节奏。一个季度由13周组成——但其中一周会有季度会议，因此这一周会从冲刺日历中去除。这一周也用于季度的“大房间规划”。剩下的12周被分为6个两周的冲刺。
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you've learned how to use the influence of your team structure
    and communication flow on your software and system architecture to perform the
    Inverse Conway Maneuver. This helps you to achieve a loosely coupled architecture
    of autonomously testable and deployable units that have a positive impact on your
    software delivery performance.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学习了如何利用团队结构和沟通流对软件和系统架构的影响，执行逆向Conway操作。这有助于你实现松耦合的架构，使得单元能够自主测试和部署，并对软件交付表现产生积极影响。
- en: In the next chapters, we'll focus more on what to build and less on how to build
    it. You'll learn about lean product development and how to incorporate customer
    feedback in your work.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将更多关注构建什么，而不是如何构建它。你将学习精益产品开发，以及如何将客户反馈融入到你的工作中。
- en: Further reading
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'These are the references from this chapter that you can also use to get more
    information on the topics:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是本章的参考资料，你还可以通过它们了解更多相关话题：
- en: 'Conway, Melvin (1968). *How do committees invent*: [http://www.melconway.com/Home/pdf/committees.pdf](http://www.melconway.com/Home/pdf/committees.pdf)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Conway, Melvin (1968). *《委员会是如何发明的》*：[http://www.melconway.com/Home/pdf/committees.pdf](http://www.melconway.com/Home/pdf/committees.pdf)
- en: Raymond, Eric S. (1996). *The New Hacker's Dictionary* [3rd ed.]. MIT Press
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raymond, Eric S. (1996). *《新黑客词典》第3版*，MIT出版社
- en: 'Amazon (2020): *Introduction to DevOps on AWS* - *Two-Pizza Teams*: [https://docs.aws.amazon.com/whitepapers/latest/introduction-devops-aws/two-pizza-teams.html](https://docs.aws.amazon.com/whitepapers/latest/introduction-devops-aws/two-pizza-teams.html)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Amazon (2020): *《AWS上的DevOps简介》* - *双披萨团队*：[https://docs.aws.amazon.com/whitepapers/latest/introduction-devops-aws/two-pizza-teams.html](https://docs.aws.amazon.com/whitepapers/latest/introduction-devops-aws/two-pizza-teams.html)'
- en: 'Willink, J. and Leif Babin, L. (2017). *Extreme Ownership: How U.S. Navy SEALs
    Lead and Win*. Macmillan'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Willink, J. 和 Leif Babin, L. (2017). *《极端责任：美国海军海豹突击队如何领导并赢得胜利》*，Macmillan
- en: 'Miller, G.A. (1956). *The magical number seven, plus or minus two: Some limits
    on our capacity for processing information*: [http://psychclassics.yorku.ca/Miller/](http://psychclassics.yorku.ca/Miller/)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Miller, G.A. (1956). *《神奇的七个数字，加减二：我们处理信息能力的限制》*：[http://psychclassics.yorku.ca/Miller/](http://psychclassics.yorku.ca/Miller/)
- en: 'Cohn M. (2009). *Succeeding with Agile: Software Development Using Scrum*.
    Addison-Wesley'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cohn M. (2009). *《敏捷成功之道：使用Scrum进行软件开发》*，Addison-Wesley
- en: 'QSM (2011). *Team Size Can Be the Key to a Successful Software Project*: [https://www.qsm.com/process_improvement_01.html](https://www.qsm.com/process_improvement_01.html)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QSM (2011). *《团队规模可能是成功软件项目的关键》*：[https://www.qsm.com/process_improvement_01.html](https://www.qsm.com/process_improvement_01.html)
- en: 'Karau, S. J. and Williams, K. D. (1993). *Social loafing: A meta-analytic review
    and theoretical integration*. *Journal of Personality and Social Psychology*,
    65(4), 681–706\. [https://doi.org/10.1037/0022-3514.65.4.681](https://doi.org/10.1037/0022-3514.65.4.681)'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Karau, S. J. 和 Williams, K. D. (1993). *《社会懒散：一项元分析回顾与理论整合》*，*《人格与社会心理学杂志》*，65(4)，681–706。
    [https://doi.org/10.1037/0022-3514.65.4.681](https://doi.org/10.1037/0022-3514.65.4.681)
- en: Robbins S. (2005). *Essentials of organizational behavior*. Prentice Hall
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Robbins S. (2005). *《组织行为学精要》*，Prentice Hall
- en: Steiner, I.D. (1972). *Group process and productivity*. Academic Press Inc.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Steiner, I.D. (1972). *小组过程与生产力*。Academic Press Inc.
- en: 'Forsgren N., Humble, J., and Kim, G. (2018). *Accelerate: The Science of Lean
    Software and DevOps: Building and Scaling High Performing Technology Organizations*
    (1st ed.) [E-book]. IT Revolution Press'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Forsgren N., Humble, J. 和 Kim, G. (2018). *加速：精益软件与DevOps的科学：构建和扩展高效能技术组织*（第1版）[电子书]。IT
    Revolution Press
- en: 'Skelton M. and Pais M. (2019). *Team Topologies: Organizing Business and Technology
    Teams for Fast Flow*. IT Revolution'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Skelton M. 和 Pais M. (2019). *团队拓扑：为快速流动组织业务和技术团队*。IT Revolution
- en: 'Reinertsen D. (2009). *The Principles of Product Development Flow: Second Generation
    Lean Product Development*. Celeritas Publishing'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Reinertsen D. (2009). *产品开发流程的原则：第二代精益产品开发*。Celeritas Publishing
- en: 'Medina A. M. (2021). *Remote debugging on Kubernetes using VS Code*: [https://developers.redhat.com/articles/2021/12/13/remote-debugging-kubernetes-using-vs-code](https://developers.redhat.com/articles/2021/12/13/remote-debugging-kubernetes-using-vs-code)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Medina A. M. (2021). *使用 VS Code 进行 Kubernetes 的远程调试*：[https://developers.redhat.com/articles/2021/12/13/remote-debugging-kubernetes-using-vs-code](https://developers.redhat.com/articles/2021/12/13/remote-debugging-kubernetes-using-vs-code)
