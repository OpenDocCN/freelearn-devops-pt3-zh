- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5  '
- en: Day-to-Day Delivery with SFDX
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '使用 SFDX 进行日常交付  '
- en: In this chapter, we’ll see how we can apply what we’ve learned so far, using
    the SFDX suite of tools together with Visual Studio Code and Git, to manage our
    change delivery. It will by no means be the definitive way to do Salesforce DevOps
    and assumes starting a brand-new project from scratch, but it will show some common
    tasks and principles.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '在本章中，我们将看到如何应用到目前为止学到的知识，使用 SFDX 工具套件结合 Visual Studio Code 和 Git 来管理变更交付。这并不是进行
    Salesforce DevOps 的唯一方法，假设是从头开始启动一个全新的项目，但它将展示一些常见的任务和原则。  '
- en: 'We will be covering the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将涵盖以下主要主题：  '
- en: Setting up the tools and your project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '设置工具和项目  '
- en: The change lifecycle with Git and SFDX
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '使用 Git 和 SFDX 的变更生命周期  '
- en: Sandboxes versus scratch orgs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '沙箱与临时组织  '
- en: By the end of the chapter, you should be able to replicate a simple workflow
    in your own Salesforce orgs for picking up an item of work from a ticketing system
    such as Jira or Asana, creating a new feature branch for it, using SFDX and VS
    Code to make your changes, and checking the code back in again. This is the most
    straightforward approach to DevOps and will give you the solid practical foundations
    you need.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '在本章结束时，你应该能够在自己的 Salesforce 组织中复制一个简单的工作流，该工作流用于从 Jira 或 Asana 等票务系统中提取工作项，创建一个新的功能分支，使用
    SFDX 和 VS Code 进行修改，并再次将代码提交。这是 DevOps 最直接的方法，将为你提供坚实的实践基础。  '
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '技术要求  '
- en: 'If you want to follow along with the examples in this chapter, as a minimum,
    you will need to have the following installed:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你想跟随本章的示例，至少需要安装以下内容：  '
- en: The Salesforce CLI
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Salesforce CLI  '
- en: VS Code
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'VS Code  '
- en: The Salesforce extensions for VS Code
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'VS Code 的 Salesforce 扩展  '
- en: You will also need a GitHub account ([https://github.com/](https://github.com/))
    in which to create a new Git repository and Git installed on your local machine
    ([https://git-scm.com/](https://git-scm.com/)).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '你还需要一个 GitHub 账户（[https://github.com/](https://github.com/)），用来创建新的 Git 仓库，以及在本地计算机上安装
    Git（[https://git-scm.com/](https://git-scm.com/)）。  '
- en: Setting up the tools and your project
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '设置工具和项目  '
- en: While in most real-world scenarios, it’s highly likely that both your tools
    and your project would already be set up and ready for development on an existing
    implementation, we’re going to cover setting up everything from scratch so that
    if you want to follow along with the example workflow, you could potentially do
    so from a fresh Developer Edition Salesforce org.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '在大多数实际场景中，你的工具和项目可能已经准备好用于现有实现的开发，但我们将从零开始设置所有内容，这样如果你想按照示例工作流操作，甚至可以从全新的开发者版
    Salesforce 组织开始。  '
- en: The Salesforce CLI
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 'Salesforce CLI  '
- en: The Salesforce CLI is the primary tool for interacting with your Salesforce
    org from your development tools and is fundamental to automating processes for
    CI/CD as well.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 'Salesforce CLI 是与 Salesforce 组织互动的主要工具，也是 CI/CD 过程自动化的基础。  '
- en: '![Figure 5.1 – Overview of the Salesforce CLI download page](img/Figure_5.1_B19436.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – Salesforce CLI 下载页面概览](img/Figure_5.1_B19436.jpg)  '
- en: Figure 5.1 – Overview of the Salesforce CLI download page
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '图 5.1 – Salesforce CLI 下载页面概览  '
- en: To install the Salesforce CLI on Windows, macOS, or Linux, follow the instructions
    for the required operating system.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '要在 Windows、macOS 或 Linux 上安装 Salesforce CLI，请按照所需操作系统的说明进行操作。  '
- en: Windows
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'Windows  '
- en: 'Go to the Salesforce CLI download page: [https://developer.salesforce.com/tools/sfdxcli](https://developer.salesforce.com/tools/sfdxcli).'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '访问 Salesforce CLI 下载页面：[https://developer.salesforce.com/tools/sfdxcli](https://developer.salesforce.com/tools/sfdxcli)。  '
- en: Click on the **Windows Installer** link to download the installer for Windows.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '点击**Windows 安装程序**链接下载 Windows 安装程序。  '
- en: Run the downloaded executable file (`.exe`) to start the installation process.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '运行下载的可执行文件（`.exe`）以启动安装过程。  '
- en: Follow the installation wizard, accept the license agreement, and choose the
    desired settings. The default settings are usually sufficient for most users.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '跟随安装向导，接受许可协议，并选择所需的设置。默认设置通常对大多数用户来说足够了。  '
- en: Complete the installation process by clicking **Install** and then **Finish**.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '通过点击**安装**，然后点击**完成**来完成安装过程。  '
- en: Open Command Prompt or PowerShell and type `sfdx --version` to verify the installation.
    If the installation was successful, you should see the installed Salesforce CLI
    version.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符或 PowerShell，输入 `sfdx --version` 来验证安装。如果安装成功，你应该能看到已安装的 Salesforce CLI
    版本。
- en: '![Figure 5.2 – Checking the installation of the Salesforce CLI on Windows](img/Figure_5.2_B19436.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – 检查 Windows 上 Salesforce CLI 的安装](img/Figure_5.2_B19436.jpg)'
- en: Figure 5.2 – Checking the installation of the Salesforce CLI on Windows
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – 检查 Windows 上 Salesforce CLI 的安装
- en: macOS
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: macOS
- en: 'Go to the Salesforce CLI download page: [https://developer.salesforce.com/tools/sfdxcli](https://developer.salesforce.com/tools/sfdxcli).'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 Salesforce CLI 下载页面：[https://developer.salesforce.com/tools/sfdxcli](https://developer.salesforce.com/tools/sfdxcli)。
- en: Click on the **MacOS Installer** link to download the installer for macOS that’s
    appropriate for the type of Mac you have.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **MacOS 安装程序** 链接，下载适用于你 Mac 类型的 macOS 安装程序。
- en: Open the downloaded `.pkg` file to start the installation process.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开下载的 `.pkg` 文件以开始安装过程。
- en: Follow the installation wizard, accept the license agreement, and choose the
    desired settings. The default settings are usually sufficient for most users.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跟随安装向导，接受许可协议，并选择所需的设置。默认设置通常对于大多数用户来说是足够的。
- en: Complete the installation process by clicking **Install** and then **Close**.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击 **安装** 然后点击 **关闭** 来完成安装过程。
- en: Open Terminal and type `sfdx --version` to verify the installation. If the installation
    was successful, you should see the installed Salesforce CLI version.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并输入 `sfdx --version` 来验证安装。如果安装成功，你应该能看到已安装的 Salesforce CLI 版本。
- en: '![Figure 5.3 – Checking the successful installation of the Salesforce CLI on
    macOS](img/Figure_5.3_B19436.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – 检查 macOS 上 Salesforce CLI 的安装是否成功](img/Figure_5.3_B19436.jpg)'
- en: Figure 5.3 – Checking the successful installation of the Salesforce CLI on macOS
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 检查 macOS 上 Salesforce CLI 的安装是否成功
- en: Linux
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux
- en: The Salesforce CLI for Linux is available as a tarball. You can find the download
    URL for the tarball that matches your system architecture here.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce CLI 的 Linux 版本提供为 tarball 格式。你可以在这里找到适合你系统架构的 tarball 下载 URL。
- en: '| **Architecture** | **Manifest file** |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| **架构** | **清单文件** |'
- en: '| --- | --- |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| x64 | [https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz](https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz)
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| x64 | [https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz](https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz)
    |'
- en: '| Arm | [https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-arm.tar.xz](https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-arm.tar.xz)
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| Arm | [https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-arm.tar.xz](https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-arm.tar.xz)
    |'
- en: Table 5.1 – Manifest files for the Linux installation packages
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 表 5.1 – Linux 安装包的清单文件
- en: 'To download one of these tarballs, use the `wget` command. For example, for
    the x64 platform, use this:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要下载这些 tarballs 之一，可以使用 `wget` 命令。例如，对于 x64 平台，使用以下命令：
- en: '[PRE0]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: mkdir ~/sfdx
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mkdir ~/sfdx
- en: '[PRE1]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Extract the contents of the tarball version you downloaded:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压你下载的 tarball 版本内容：
- en: '`tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --``strip-components 1`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --``strip-components 1`'
- en: The `-C` flag extracts the contents into the `sfdx` directory, while `--strip-components
    1` removes the root path component.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`-C` 标志将内容提取到 `sfdx` 目录中，而 `--strip-components 1` 会移除根路径组件。'
- en: 'Modify your PATH environment variable to incorporate the Salesforce CLI `bin`
    directory. For instance, to configure it for your ongoing Terminal session, use
    the following command:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改你的 PATH 环境变量以加入 Salesforce CLI 的 `bin` 目录。例如，要配置当前终端会话，使用以下命令：
- en: '[PRE2]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: sfdx --version to verify the installation. If the installation was successful,
    you should see the installed Salesforce CLI version.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `sfdx --version` 来验证安装。如果安装成功，你应该能看到已安装的 Salesforce CLI 版本。
- en: '[PRE3]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Figure 5.4 – Verifying the installation of the CLI](img/Figure_5.4_B19436.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – 验证 CLI 安装](img/Figure_5.4_B19436.jpg)'
- en: Figure 5.4 – Verifying the installation of the CLI
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – 验证 CLI 安装
- en: Git
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git
- en: To install Git on Windows, macOS, or Ubuntu Linux, follow the instructions here
    for the appropriate operating system. For other Linux distributions, you may need
    to search for the appropriate documentation for your package management system.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Windows、macOS 或 Ubuntu Linux 上安装 Git，请根据相应操作系统的说明进行操作。对于其他 Linux 发行版，你可能需要搜索与你的包管理系统相匹配的文档。
- en: '![Figure 5.5 – The Git client download page](img/Figure_5.5_B19436.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.5 – Git 客户端下载页面](img/Figure_5.5_B19436.jpg)'
- en: Figure 5.5 – The Git client download page
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – Git 客户端下载页面
- en: Windows
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows
- en: 'Download the Git for Windows installer from the official website:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从官方网站下载Git for Windows安装程序：
- en: '[https://git-scm.com/download/win](https://git-scm.com/download/win)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://git-scm.com/download/win](https://git-scm.com/download/win)'
- en: Run the downloaded executable file (`.exe`) to start the installation process.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行下载的可执行文件（`.exe`）以启动安装过程。
- en: Follow the installation wizard, choosing the desired settings. The default settings
    are usually sufficient for most users.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照安装向导进行操作，选择所需的设置。默认设置通常对大多数用户来说足够。
- en: Complete the installation process by clicking **Install** and then **Finish**.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**安装**然后点击**完成**来完成安装过程。
- en: To verify the installation, open the Git Bash terminal by searching for it in
    the **Start** menu or using the context menu in a folder by right-clicking and
    selecting **Git** **Bash Here**.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要验证安装，请通过在**开始**菜单中搜索或通过右键单击文件夹中的上下文菜单选择**Git** **Bash Here**打开Git Bash终端。
- en: In the Git Bash terminal, type `git --version` and press *Enter*. If the installation
    was successful, you should see the installed Git version.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Git Bash终端中输入`git --version`并按*Enter*键。如果安装成功，你应该能看到已安装的Git版本。
- en: '![Figure 5.6 – Confirming the successful installation of Git for Windows](img/Figure_5.6_B19436.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.6 – 确认在Windows上成功安装Git](img/Figure_5.6_B19436.jpg)'
- en: Figure 5.6 – Confirming the successful installation of Git for Windows
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 – 确认在Windows上成功安装Git
- en: macOS
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: macOS
- en: Check whether Git is already installed by opening the Terminal app and typing
    `git --version`. If Git is installed, you’ll see the version number. If not, proceed
    to the next step.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过打开终端应用并输入`git --version`来检查Git是否已安装。如果Git已安装，你将看到版本号。如果没有，继续进行下一步。
- en: 'Install **Homebrew**, a package manager for macOS, by following the instructions
    on the official website: [https://brew.sh/](https://brew.sh/).'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照官方网站上的说明安装**Homebrew**，这是macOS的一个包管理器：[https://brew.sh/](https://brew.sh/)。
- en: Once Homebrew is installed, open Terminal and type `brew` `install git`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Homebrew后，打开终端并输入`brew install git`。
- en: Wait for the installation process to complete.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待安装过程完成。
- en: Verify the installation by typing `git --version` in Terminal. If the installation
    was successful, you should see the installed Git version.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中输入`git --version`来验证安装。如果安装成功，你应该能看到已安装的Git版本。
- en: '![Figure 5.7 – Confirming the successful installation of Git on macOS](img/Figure_5.7_B19436.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.7 – 确认在macOS上成功安装Git](img/Figure_5.7_B19436.jpg)'
- en: Figure 5.7 – Confirming the successful installation of Git on macOS
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – 确认在macOS上成功安装Git
- en: Ubuntu Linux
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ubuntu Linux
- en: Open Terminal (*Ctrl + Alt +* *T*).
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端（*Ctrl + Alt + T*）。
- en: Update the package list by typing `sudo apt update` and pressing *Enter*.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`sudo apt update`并按*Enter*键更新包列表。
- en: Install Git by typing `sudo apt install git` and pressing *Enter*.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`sudo apt install git`并按*Enter*键来安装Git。
- en: Confirm the installation by typing `Y` when prompted and pressing *Enter*.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示时输入`Y`并按*Enter*键来确认安装。
- en: Wait for the installation process to complete.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待安装过程完成。
- en: Verify the installation by typing `git --version` in the Terminal. If the installation
    was successful, you should see the installed Git version.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中输入`git --version`来验证安装。如果安装成功，你应该能看到已安装的Git版本。
- en: '![Figure 5.8 – Confirming the successful installation of Git on Linux](img/Figure_5.8_B19436.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8 – 确认在Linux上成功安装Git](img/Figure_5.8_B19436.jpg)'
- en: Figure 5.8 – Confirming the successful installation of Git on Linux
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – 确认在Linux上成功安装Git
- en: VS Code and extensions
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VS Code和扩展
- en: Microsoft VS Code is available for Windows, macOS, and Linux systems. The installer
    can be obtained from [https://code.visualstudio.com/download](https://code.visualstudio.com/download)
    – simply follow the instructions for your operating system.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft VS Code适用于Windows、macOS和Linux系统。安装程序可以从[https://code.visualstudio.com/download](https://code.visualstudio.com/download)获取—只需按照你的操作系统的说明进行操作。
- en: 'More important to Salesforce development using VS Code are the extensions that
    allow integration with both Git and SFDX right from within the IDE:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用VS Code进行Salesforce开发，最重要的是一些允许直接在IDE内与Git和SFDX集成的扩展：
- en: Open VS Code.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开VS Code。
- en: Click the extensions view icon on the sidebar or press *Ctrl + Shift + X* (Windows/Linux)
    or *Cmd + Shift + X* (Mac) to open the **Extensions** panel.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击侧边栏上的扩展视图图标，或按*Ctrl + Shift + X*（Windows/Linux）或*Cmd + Shift + X*（Mac）打开**扩展**面板。
- en: Search for `Salesforce Extension Pack` in the search bar.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索栏中搜索`Salesforce Extension Pack`。
- en: Click the **Install** button on **Salesforce Extension Pack** by Salesforce.
    This will install a collection of extensions, including Salesforce CLI Integration,
    Apex, Aura Components, Lightning Web Components, and more.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Salesforce Extension Pack** 上的 **Install** 按钮，这个扩展包由 Salesforce 提供。它将安装一系列扩展，包括
    Salesforce CLI 集成、Apex、Aura 组件、Lightning Web 组件等。
- en: Creating a new SFDX project and connecting it to your Salesforce org
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个新的 SFDX 项目并将其连接到你的 Salesforce 组织
- en: 'Now that we have all the required tools installed, we can start getting a project
    together on which to work. We will create a new SFDX project from within VS Code
    and connect it to our Salesforce environment. We’ll also connect it to our Git
    source control so that we can truly work in a source-driven way. Let’s look at
    the steps needed to connect everything together:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了所有必需的工具，接下来可以开始构建一个可以工作的项目。我们将在 VS Code 中创建一个新的 SFDX 项目，并将其连接到我们的 Salesforce
    环境。我们还会将它连接到我们的 Git 源代码控制，这样我们就能真正以源驱动的方式工作。让我们来看看将一切连接起来所需的步骤：
- en: 'Set up an SFDX project using the Command Palette:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用命令面板设置 SFDX 项目：
- en: Open the Command Palette with *Ctrl + Shift + P* (Windows/Linux) or *Cmd + Shift
    +* *P* (Mac).
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 *Ctrl + Shift + P*（Windows/Linux）或 *Cmd + Shift + P*（Mac）打开命令面板。
- en: 'Type `SFDX: Create Project` and press *Enter*.'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '输入 `SFDX: Create Project` 并按下 *Enter* 键。'
- en: Choose **Standard** as the project template and press *Enter*.
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Standard** 作为项目模板，并按下 *Enter* 键。
- en: Enter a desired name for your project and press *Enter*.
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入你希望为项目命名的名称，并按下 *Enter* 键。
- en: Choose a folder to store your SFDX project and press *Enter*. This will generate
    a new SFDX project structure in the specified folder.
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个文件夹来存储你的 SFDX 项目，并按下 *Enter* 键。这将在指定的文件夹中生成一个新的 SFDX 项目结构。
- en: 'Set the default org for your project using the Command Palette:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用命令面板设置项目的默认组织：
- en: Open the Command Palette with *Ctrl + Shift + P* (Windows/Linux) or *Cmd + Shift
    +* *P* (Mac).
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 *Ctrl + Shift + P*（Windows/Linux）或 *Cmd + Shift + P*（Mac）打开命令面板。
- en: Type `SFDX`, then set a default org and press *Enter*.
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `SFDX`，然后设置一个默认的组织并按下 *Enter* 键。
- en: Choose an alias to use when authenticating with your Salesforce org.
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个别名，用于在认证你的 Salesforce 组织时使用。
- en: Now you have installed and set up the VS Code extensions for Salesforce using
    the Command Palette and are ready to start developing Salesforce applications.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经使用命令面板安装并设置了 Salesforce 的 VS Code 扩展，并且准备开始开发 Salesforce 应用程序。
- en: The change lifecycle with Git and SFDX
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git 和 SFDX 的变更生命周期
- en: In many organizations, teams make use of workflow management systems such as
    Jira or Asana to capture, refine, and assign work items for development teams.
    In this example, we’re going to assume that Jira is in use, but this is purely
    for illustrative purposes to replicate a reasonably typical real-world scenario.
    It is definitely not essential to use Jira, or any equivalent system, to follow
    these examples. We will be looking at ticketing systems in more detail in [*Chapter
    8*](B19436_08.xhtml#_idTextAnchor177).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多组织中，团队使用工作流管理系统，如 Jira 或 Asana，来捕捉、完善和分配开发团队的工作项。在这个示例中，我们假设使用的是 Jira，但这纯粹是为了说明目的，以复制一个相对典型的现实场景。要跟随这些示例，完全不必使用
    Jira 或任何等效系统。我们将在 [*第 8 章*](B19436_08.xhtml#_idTextAnchor177) 中更详细地探讨票务系统。
- en: Getting a Git repository to work with
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取一个可以使用的 Git 仓库
- en: 'In [*Chapter 3*](B19436_03.xhtml#_idTextAnchor046), we looked at some of the
    most common Git operations and their corresponding commands. In most real-world
    scenarios, you are likely to have a pre-existing repository to work with. However,
    there may be scenarios where you are starting a project with Git for the first
    time, so let’s look at the main ways to prepare Git for work:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 3 章*](B19436_03.xhtml#_idTextAnchor046) 中，我们查看了最常见的 Git 操作及其对应的命令。在大多数现实场景中，你可能已经有一个现成的仓库可以使用。然而，也可能有一些场景，你是第一次使用
    Git 开始一个项目，那么我们来看看准备 Git 进行工作的主要方法：
- en: '`git init` will create a brand-new local repository on your machine to work
    with. At this point, there is no equivalent remote repository. You can refer back
    to [*Chapter 3*](B19436_03.xhtml#_idTextAnchor046) if you need a reminder of how
    to connect one, for example, on GitHub.'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`git init` 会在你的机器上创建一个全新的本地仓库以供使用。此时，还没有对应的远程仓库。如果你需要提醒如何连接一个远程仓库，可以参考 [*第
    3 章*](B19436_03.xhtml#_idTextAnchor046)，例如在 GitHub 上的操作。'
- en: '`git clone` will create a copy of a remote repository on your local machine
    – including the version history and all the branches and commits it contains.
    It will create the correct directory structure for you, ready to work with.'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`git clone` 将在您的本地计算机上创建一个远程仓库的副本——包括版本历史、所有分支和提交。它会为您创建正确的目录结构，准备好进行工作。'
- en: '`git checkout` is used to switch branches within an existing repository. When
    you use this command, your local working folder will be updated to reflect the
    contents of that branch.'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`git checkout` 用于在现有仓库中切换分支。当您使用此命令时，您的本地工作文件夹将更新为该分支的内容。'
- en: Getting the latest changes from the main branch
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取主分支的最新更改
- en: 'Obtaining the latest main branch changes before development ensures a current
    code base, minimizes merge conflicts, and streamlines the integration of new features
    or fixes:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发前获取最新的主分支更改，可以确保代码库的最新性，最小化合并冲突，并简化新功能或修复的集成：
- en: In VS Code, click the **Source Control** icon in the left sidebar.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS Code 中，点击左侧边栏的 **源代码管理** 图标。
- en: Click the **...** (ellipsis) button at the top and choose **Pull** to fetch
    and merge the latest changes from the main branch.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击顶部的 **...**（省略号）按钮，并选择 **Pull** 以获取并合并主分支的最新更改。
- en: Creating a new feature branch
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个新的功能分支
- en: The feature branch model is a simple Git-based development approach, ideal for
    beginners. It maintains up-to-date metadata on the main branch, which should always
    be release-ready. Definitions of what constitutes “release-ready” or “production-ready”
    can vary wildly and largely depend on the level of testing applied, both of individual
    changes and the overall holistic view of your production system and any integrations
    it may have. For the purposes of demonstrating a workflow here, we shall significantly
    simplify our definition to mean that changes have had functional testing in your
    development org, any code reviews (both automated and manual) have been carried
    out, and a pull request has been approved.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 功能分支模型是一种简单的基于 Git 的开发方法，非常适合初学者。它在主分支上维护最新的元数据，主分支应始终处于发布就绪状态。什么是“发布就绪”或“生产就绪”的定义可能会有很大差异，主要取决于所应用的测试级别，既包括单个更改的测试，也包括生产系统及其可能集成的整体测试。为了演示工作流，我们将极大地简化我们的定义，表示更改已在开发组织中进行了功能测试，所有代码审查（包括自动和手动）已完成，并且拉取请求已被批准。
- en: 'Developers create new branches from the main for features or fixes, merging
    them back upon completion. Short-lived feature branches minimize merge conflicts
    and promote tidiness. Smaller deliverables reduce feedback cycle length. To create
    the feature branch from within VS Code, complete the following steps:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员从主分支创建新分支来实现功能或修复，完成后将其合并回主分支。短期存在的功能分支可以最小化合并冲突，并促进整洁性。较小的交付物减少了反馈周期的长度。要在
    VS Code 中创建功能分支，请按照以下步骤操作：
- en: In the **Source Control** panel, click the branch icon at the bottom-left corner
    of the window.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **源代码管理** 面板中，点击窗口左下角的分支图标。
- en: Type in the name of the new feature branch (e.g., `feature/JIRA-1234`) and press
    *Enter* to create and switch to the new branch.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入新功能分支的名称（例如，`feature/JIRA-1234`），然后按 *Enter* 键创建并切换到新分支。
- en: Working on your changes
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正在处理您的更改
- en: You should now be able to start your development work against your feature branch.
    This can be a combination of configuration work in the connected Salesforce org
    or code-based development in the Salesforce IDE.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该能够开始在功能分支上进行开发工作。这可以是在连接的 Salesforce 组织中的配置工作，或是在 Salesforce IDE 中进行的基于代码的开发。
- en: The Salesforce extensions for VS Code simplify moving your metadata changes
    back and forth between your local machine and your development org. Many of the
    underlying Salesforce CLI commands are available in either the Org Browser, the
    Command Palette, or as context-sensitive menu options when right-clicking on files.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce 的 VS Code 扩展简化了在本地计算机和开发组织之间来回移动元数据更改的过程。许多底层的 Salesforce CLI 命令可以通过组织浏览器、命令面板，或右键点击文件时作为上下文敏感菜单选项使用。
- en: Retrieving metadata
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取元数据
- en: Open the Org Browser in the side panel in VS Code (you can find it with an icon
    that resembles a cloud).
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS Code 的侧边面板中打开组织浏览器（您可以通过一个类似云的图标找到它）。
- en: If it’s your first time using the Org Browser, or if the metadata for your org
    has changed, click the refresh icon to retrieve the metadata from your org.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果这是您第一次使用组织浏览器，或者如果您的组织的元数据发生了变化，点击刷新图标以从您的组织中获取元数据。
- en: The Org Browser displays a list of metadata types. You can click the arrow next
    to a metadata type to expand it and see the individual components of that type.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Org 浏览器显示元数据类型的列表。您可以点击元数据类型旁边的箭头展开它，并查看该类型的各个组件。
- en: To retrieve a metadata component, click the cloud download icon next to the
    component’s name. This retrieves the component and adds it to your local project.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检索元数据组件，请点击组件名称旁边的云下载图标。这会将组件检索并添加到您的本地项目中。
- en: Deploying metadata
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署元数据
- en: Navigate to the files or folders you want to deploy in your local project structure.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您在本地项目结构中要部署的文件或文件夹。
- en: Right-click on the selected items.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击选中的项目。
- en: 'From the context menu, choose the **SFDX: Deploy Source to Org** command. This
    deploys the metadata to your org.'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '从上下文菜单中选择**SFDX: 部署源代码到组织**命令。这会将元数据部署到您的组织中。'
- en: Note that the Org Browser does not directly facilitate deployment, but the standard
    deployment commands in the Salesforce extensions for VS Code are used instead.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，Org 浏览器并不直接支持部署，但会使用 VS Code 中 Salesforce 扩展的标准部署命令。
- en: Once your development is complete, test your changes in Salesforce using scratch
    orgs or sandboxes, as appropriate. We will be looking at the differences between
    the two types of Salesforce development environments later in this chapter.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦开发完成，请在 Salesforce 中使用 Scratch Org 或沙盒测试您的更改，具体使用哪一种取决于情况。我们将在本章后续部分对这两种 Salesforce
    开发环境的差异进行详细讨论。
- en: Committing your changes
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提交您的更改
- en: 'The two-step process of committing changes involves first staging the alterations
    and then executing the commit. Staging selects modifications for a commit while
    committing records the staged changes as a new snapshot in the local repository,
    maintaining development history. You can complete the staging and committing of
    your changes like so:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 提交更改的两步过程包括首先暂存更改，然后执行提交。暂存是选择更改进行提交，而提交则是将已暂存的更改记录为本地仓库中的新快照，从而保持开发历史。您可以这样完成暂存和提交您的更改：
- en: In the **Source Control** panel, review the changes you have made.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**源代码管理**面板中，检查您所做的更改。
- en: Stage the changes by clicking the **+** icon next to each changed file or by
    clicking the **+** icon next to **CHANGES** to stage all changes.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击每个已更改文件旁边的**+**图标，或点击**CHANGES**旁边的**+**图标以暂存所有更改。
- en: 'Enter a meaningful commit message describing the changes related to the Jira
    ticket (e.g., “`JIRA-1234: Implemented` `new feature`”).'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '输入一个有意义的提交信息，描述与 Jira 票据相关的更改（例如，“`JIRA-1234: 实现了` `新特性`”）。'
- en: Click the checkmark icon at the top to commit the changes to your feature branch.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击顶部的对勾图标，将更改提交到您的功能分支。
- en: Pushing your feature branch to the remote repository
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将您的功能分支推送到远程仓库
- en: 'Once our changes are added to Git locally, we can then move those changes up
    to the remote repository as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的更改添加到本地 Git 中，我们可以按如下方式将这些更改推送到远程仓库：
- en: In the **Source Control** panel, click the **...** (ellipsis) button at the
    top and choose **Push**.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**源代码管理**面板中，点击顶部的**...**（省略号）按钮，并选择**推送**。
- en: If prompted, select your feature branch (e.g., “`feature/JIRA-1234`”) to push
    it to the remote repository.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果提示，请选择您的功能分支（例如，“`feature/JIRA-1234`”）并将其推送到远程仓库。
- en: Creating a pull request
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建拉取请求
- en: Creating a pull request in Git is a collaborative process where a developer
    proposes merging their changes from one branch into another, often from a feature
    branch into the main branch. This allows for code review, discussion, and potential
    modifications before integrating the changes. This is also the stage in which
    automated checks are carried out, such as running tests and static analysis, and
    this makes pull requests a useful tool for solo developers, not just multi-person
    teams.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Git 中创建拉取请求是一个协作过程，开发者提出将其更改从一个分支合并到另一个分支，通常是从功能分支合并到主分支。这允许代码审查、讨论以及在合并更改之前进行潜在的修改。这也是进行自动化检查的阶段，例如运行测试和静态分析，这使得拉取请求不仅是多人团队的有用工具，也对独立开发者有帮助。
- en: 'To create the pull request via GitHub, follow these steps:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过 GitHub 创建拉取请求，请按照以下步骤操作：
- en: Open your browser and navigate to your repository on GitHub.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并导航到您的 GitHub 仓库。
- en: Click the **Compare & pull request** button next to your recently pushed branch.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击您刚刚推送的分支旁边的**比较与拉取请求**按钮。
- en: Review the changes, and add any additional information or context related to
    the Jira ticket.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查更改，并添加与 Jira 票据相关的任何额外信息或上下文。
- en: Assign the appropriate reviewers and click **Create** **pull request**.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定适当的审阅者并点击**创建拉取请求**。
- en: 'Alternatively, if you have the `GitHub Pull Requests and Issues` extension
    installed in VS Code, you can create your new pull request from within the VS
    Code IDE as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你已经在 VS Code 中安装了 `GitHub Pull Requests and Issues` 扩展，你可以按以下方式在 VS Code
    IDE 中创建新的拉取请求：
- en: Open the VS Code Command Palette by pressing *Ctrl + Shift + P* (Windows or
    Linux) or *Cmd + Shift +* *P* (macOS).
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Ctrl + Shift + P*（Windows 或 Linux）或*Cmd + Shift + P*（macOS）打开 VS Code 命令面板。
- en: 'Type `Github: Create Pull Request` and select the option from the list that
    appears.'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '输入 `Github: Create Pull Request` 并从出现的列表中选择该选项。'
- en: Select the base and compare branches for your pull request.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为拉取请求选择基础分支和比较分支。
- en: Enter a title and description for your pull request.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入拉取请求的标题和描述。
- en: Review your changes and make any necessary adjustments.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查你的更改并进行必要的调整。
- en: Click the **Create Pull Request** button to submit your pull request.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建拉取请求**按钮提交你的拉取请求。
- en: Addressing feedback and updating the pull request
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理反馈并更新拉取请求
- en: 'Quite often, there can be feedback and changes required to your pull request
    during the review process. This is a normal part of the review process and helps
    to deliver quality releases to production by capturing changes early. Thankfully,
    addressing these changes is as easy as your original commits to Git were – let’s
    look at the steps required:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查过程中，通常会有反馈并要求对你的拉取请求进行更改。这是审查过程的正常部分，有助于通过尽早捕获更改来交付高质量的生产版本。幸运的是，处理这些更改与最初的
    Git 提交一样简单——让我们看看需要的步骤：
- en: If changes are requested during the review process, make the necessary updates
    in VS Code.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在审查过程中要求更改，请在 VS Code 中进行必要的更新。
- en: Commit and push the changes to the feature branch in the same way as you did
    for the original commit of your changes.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像最初提交更改时一样，提交并推送更改到功能分支。
- en: The pull request will automatically update with your new changes.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拉取请求会自动更新你的新更改。
- en: Merging the pull request
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合并拉取请求
- en: 'Once we reach the stage where our pull request has been approved and any required
    changes are complete, we can safely merge it into our upstream branch, like so:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们达到了拉取请求被批准并且所有要求的更改都已完成的阶段，我们可以安全地将其合并到上游分支中，操作如下：
- en: Once the pull request has been approved, click the **Merge pull request** button
    in GitHub.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦拉取请求被批准，点击 GitHub 中的**合并拉取请求**按钮。
- en: Delete the feature branch if it is no longer needed, either on GitHub or in
    VS Code.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果功能分支不再需要，请在 GitHub 或 VS Code 中删除它。
- en: Updating your local main branch
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新本地的主分支
- en: 'All that remains for us to do now is to refresh our local copy of the main
    branch to ensure we have all the latest changes and everything is correctly in
    sync. The following steps will achieve this:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要做的就是刷新本地的主分支副本，确保我们有所有最新的更改，并且一切都已正确同步。以下步骤将帮助我们实现这一点：
- en: In VS Code, switch back to the main branch by clicking the branch icon at the
    bottom-left corner and selecting **main**.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS Code 中，点击左下角的分支图标并选择**main**，切换回主分支。
- en: Pull the latest changes exactly as you did at the start of the process.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像开始时一样拉取最新的更改。
- en: We have now completed a typical lifecycle of developing a Salesforce feature
    using SFDX and Git. This represents the most basic DevOps workflow – and in many
    teams, it can remain as simple as that.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了使用 SFDX 和 Git 开发 Salesforce 功能的典型生命周期。这代表了最基础的 DevOps 工作流——在许多团队中，这样的工作流可以保持简单。
- en: In the next section, we’re going to look at some subtle differences between
    the most common Salesforce development environments – sandboxes and scratch orgs
    – and see the use cases for each.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将查看 Salesforce 最常见的开发环境——沙盒和 Scratch org 之间的一些微妙差异，并了解每种环境的使用场景。
- en: Sandboxes versus scratch orgs
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 沙盒与 Scratch org
- en: Scratch orgs and Salesforce developer sandboxes serve similar purposes in providing
    environments for development and testing; however, they differ in several key
    aspects, which we will discuss here.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Scratch org 和 Salesforce 开发沙盒在提供开发和测试环境方面具有类似的目的；然而，它们在几个关键方面有所不同，我们将在这里讨论这些差异。
- en: Sandboxes
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 沙盒
- en: Salesforce sandboxes are a copy of your Salesforce environment, including metadata
    and customizations. Sandboxes are typically used for testing and development purposes
    such as creating and testing new features, integrating with other systems, or
    replicating production issues. Developers can use sandboxes to test new features
    or customizations without affecting the production environment. Sandboxes can
    also be used for training and **user acceptance testing** (**UAT**) to ensure
    that changes are thoroughly tested before deployment. Additionally, sandboxes
    can be used for integration testing, disaster recovery, and as a backup in case
    of data loss or system failure.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce沙盒是你Salesforce环境的副本，包括元数据和自定义内容。沙盒通常用于测试和开发目的，如创建和测试新功能、与其他系统集成或复制生产环境中的问题。开发人员可以使用沙盒测试新功能或自定义内容，而不会影响生产环境。沙盒也可以用于培训和**用户验收测试（UAT）**，确保在部署前充分测试更改。此外，沙盒还可以用于集成测试、灾难恢复，并作为数据丢失或系统故障的备份。
- en: 'Salesforce sandboxes are used for development and testing, and four different
    types are available, each with different features, purposes, refresh cycles, and
    storage limits:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce沙盒用于开发和测试，提供四种不同类型的沙盒，每种沙盒具有不同的功能、目的、刷新周期和存储限制：
- en: The Full Copy sandbox is a complete copy of your production environment, including
    all metadata and data. It is typically used for testing and development purposes
    that require a full replica of the production environment, such as performance
    testing, **UAT**, and training. However, you should be aware that these sandboxes
    can only be refreshed from production every 29 days. Full Copy sandboxes also
    don’t support source tracking, so they are not suited for being your primary development
    environment for SFDX.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整副本沙盒是你生产环境的完整复制，包括所有元数据和数据。它通常用于需要完整复制生产环境的测试和开发目的，如性能测试、**用户验收测试（UAT）**和培训。然而，你需要注意，这些沙盒每29天只能从生产环境刷新一次。完整副本沙盒也不支持源跟踪，因此不适合作为你的主要开发环境来使用SFDX。
- en: The Partial Copy sandbox includes a subset of your production environment data,
    as well as all metadata. It is typically used for testing and development purposes
    that require a smaller dataset than a Full Copy, such as feature development or
    regression testing. This type of sandbox is not provided as standard and is an
    additional license cost from Salesforce. Unlike the Full Copy sandbox, Partial
    Copy sandboxes can be refreshed every five days, but like the Full Copy sandboxes,
    they don’t support source tracking.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部分副本沙盒包括生产环境数据的子集，以及所有元数据。它通常用于需要比完整副本更小数据集的测试和开发目的，如功能开发或回归测试。此类型沙盒并非标准提供，而是Salesforce额外授权的付费项目。与完整副本沙盒不同，部分副本沙盒每五天就可以刷新一次，但像完整副本沙盒一样，它们不支持源跟踪。
- en: The Developer sandbox is a dedicated environment for individual developers or
    small teams. It includes all metadata but no data. It is typically used for individual
    feature development or testing. Most orgs will have far more Developer sandboxes
    available than the Full Copy or Partial Copy ones (usually limited to one of each
    unless you purchase additional ones). They can be refreshed daily but don’t bring
    across any data, and have a much smaller data capacity.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者沙盒是专门为个人开发者或小团队提供的环境。它包括所有元数据，但没有数据。通常用于单个功能的开发或测试。大多数组织将拥有比完整副本或部分副本更多的开发者沙盒（通常每种沙盒限制为一个，除非你购买额外的沙盒）。它们可以每天刷新，但不会带来任何数据，并且具有更小的数据容量。
- en: The Developer Pro sandbox is similar to a Developer sandbox but has a larger
    storage capacity. It is typically used for more complex development and testing
    tasks, such as integrations or app development.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者专业版沙盒类似于开发者沙盒，但具有更大的存储容量。它通常用于更复杂的开发和测试任务，如集成或应用开发。
- en: Scratch orgs
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Scratch orgs（临时开发环境）
- en: Scratch orgs are disposable, temporary environments that can be quickly created
    and deleted. They are primarily used for agile development, such as building and
    testing new features in a short amount of time.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Scratch orgs是一次性、临时的环境，可以快速创建和删除。它们主要用于敏捷开发，如在短时间内构建和测试新功能。
- en: The lifespan of a scratch org is inherently temporary, with a maximum duration
    of 30 days. This ephemeral nature encourages developers to follow a source-driven
    development approach, where the version control system serves as the single source
    of truth. In contrast, Developer sandboxes are more persistent environments that
    may exist for extended periods, making it easier for developers to unintentionally
    accumulate outdated or unused code and configurations.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Scratch org 的生命周期本质上是临时的，最长为 30 天。这种短暂的特性鼓励开发者采用源驱动的开发方法，其中版本控制系统作为唯一的真实来源。相比之下，开发者沙箱是更持久的环境，可能存在较长时间，这使得开发者更容易无意中积累过时或未使用的代码和配置。
- en: Scratch orgs are designed to be lightweight and rapidly configurable. They can
    be created and customized with specific features, settings, and data needed for
    a particular project by adjusting the scratch org definition file. This makes
    it easy for developers to create multiple scratch orgs tailored to different projects
    or tasks. On the other hand, Developer sandboxes are created as a copy of the
    production environment, including all customizations and a subset of the data,
    which can make them less cumbersome and time-consuming to set up and configure.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Scratch org 设计为轻量且可快速配置。通过调整 Scratch org 定义文件，它们可以根据特定项目的需求创建并定制所需的功能、设置和数据。这使得开发者可以轻松创建多个针对不同项目或任务定制的
    Scratch org。另一方面，开发者沙箱是作为生产环境的副本创建的，包括所有自定义和部分数据，这使得它们的设置和配置较为繁琐且耗时。
- en: By default, when a scratch org is created, it doesn’t have any connection to
    the features or metadata enabled in your production org. It’s created according
    to a generic template with a base set of features. This means that the newly created
    scratch org won’t reflect your production org’s specific characteristics or customization,
    which can be challenging if you’re developing and testing features tied to those
    specific settings or metadata.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当创建 Scratch org 时，它不会与生产 org 中启用的功能或元数据建立任何连接。它是根据一个通用模板创建的，包含一组基础功能。这意味着新创建的
    Scratch org 不会反映生产 org 的特定特性或自定义设置，如果你正在开发和测试与这些特定设置或元数据相关的功能，可能会面临挑战。
- en: To overcome this, Salesforce introduced the concept of a definition file. A
    definition file is a JSON file that specifies the shape of the scratch org or
    the characteristics that you want the scratch org to have. It can define preferences
    for features, settings, and editions. For example, the definition file might include
    instructions to enable certain Salesforce features, such as Einstein Analytics
    or person accounts.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服这个问题，Salesforce 引入了定义文件的概念。定义文件是一个 JSON 文件，指定了 Scratch org 的形状或你希望 Scratch
    org 拥有的特性。它可以定义功能、设置和版本的偏好。例如，定义文件可能包含启用某些 Salesforce 功能的指令，如 Einstein Analytics
    或个人账户。
- en: Creating a definition file manually allows you to tailor your scratch org to
    match your production environment. However, manually creating a definition file
    that exactly matches a complex production org can be time-consuming and potentially
    error-prone.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 手动创建定义文件使你可以根据生产环境定制 Scratch org。然而，手动创建一个与复杂的生产 org 完全匹配的定义文件可能会非常耗时，并且可能容易出错。
- en: To help with this, Salesforce has introduced the concept of an org shape. An
    org shape is essentially a snapshot of your production org’s features and settings,
    which you can use as a template when creating scratch orgs. By using an org shape,
    you can quickly and accurately recreate the environment of your production org
    in a scratch org without having to manually specify all the settings in a definition
    file.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助解决这个问题，Salesforce 引入了 org 形状的概念。org 形状本质上是你生产 org 功能和设置的快照，你可以在创建 Scratch
    org 时将其用作模板。通过使用 org 形状，你可以快速而准确地在 Scratch org 中重建生产 org 的环境，而无需手动在定义文件中指定所有设置。
- en: The preceding combination of being short-lived, lightweight, and configurable
    means that scratch orgs are more conducive to supporting **continuous integration
    and continuous delivery** (**CI/CD**) processes. The disposable nature of scratch
    orgs allows developers to rapidly create, test, and destroy environments as needed,
    enabling seamless integration into CI/CD pipelines. Developer sandboxes, with
    their longer lifespan and more complex setup, may not be as well suited for such
    automated workflows.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到的短暂性、轻量化和可配置性的组合意味着，scratch org 更有利于支持**持续集成和持续交付**（**CI/CD**）流程。scratch
    org 的可丢弃性质使得开发者可以根据需要快速创建、测试和销毁环境，从而实现与 CI/CD 流水线的无缝集成。由于开发者沙箱的生命周期较长且设置更为复杂，它们可能不太适合这种自动化工作流。
- en: Summary
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered an end-to-end lifecycle of using the standard stack
    of Salesforce and source control tools. Let’s recap what that process entailed.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了使用 Salesforce 的标准堆栈和源代码控制工具的端到端生命周期。让我们回顾一下这个过程包括了哪些内容。
- en: We looked at how to initialize or clone a Git repository to the local machine,
    ensuring we had the latest version of the code base. Using VS Code, we were able
    to easily access and manage the source code, as well as run SFDX commands within
    the integrated terminal or from the built-in Command Palette within VS Code and
    the Salesforce extensions pack.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们查看了如何将 Git 仓库初始化或克隆到本地机器，确保我们拥有最新的代码库版本。通过 VS Code，我们能够轻松访问和管理源代码，并在集成终端或
    VS Code 内置的命令面板以及 Salesforce 扩展包中运行 SFDX 命令。
- en: Before starting the development process, we created a new branch in the Git
    repository to represent the specific feature or task we were working on. This
    branch is typically named according to the associated Jira ticket to maintain
    traceability and organization. Once the feature branch was created, we switched
    to the new branch and started implementing the required changes.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始开发过程之前，我们在 Git 仓库中创建了一个新的分支，以表示我们正在开发的特定功能或任务。这个分支通常根据关联的 Jira 工单命名，以保持可追溯性和组织性。一旦创建了特性分支，我们切换到该新分支，并开始实施所需的更改。
- en: As part of the development process, we made use of SFDX tools to create, retrieve,
    and deploy metadata components. Although we used a sandbox environment in our
    example, we could also have leveraged scratch orgs – temporary Salesforce environments
    – to test and iterate on our changes before finalizing the code. Throughout this
    process, we committed our changes to the feature branch, providing clear and concise
    commit messages to maintain a comprehensive history.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发过程的一部分，我们利用 SFDX 工具来创建、检索和部署元数据组件。尽管我们在示例中使用了沙箱环境，但我们也可以利用 scratch org——临时的
    Salesforce 环境——在最终确定代码之前对更改进行测试和迭代。在这个过程中，我们将更改提交到特性分支，并提供清晰简洁的提交信息，以维护全面的历史记录。
- en: Once the development was complete and the changes were thoroughly tested, we
    pushed the feature branch to the remote Git repository. At this point, we were
    then ready to create a pull request to merge the feature branch into the main
    branch. The pull request serves as an opportunity for team members to review the
    changes, provide feedback, and suggest improvements. It also acts as a quality
    assurance measure to ensure that the code base remains stable and maintains the
    desired level of quality.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 开发完成且更改经过充分测试后，我们将特性分支推送到远程 Git 仓库。这时，我们就可以创建拉取请求，将特性分支合并到主分支。拉取请求为团队成员提供了一个机会，审查更改、提供反馈并建议改进。它还作为一种质量保证措施，确保代码库保持稳定并维持所需的质量水平。
- en: Upon receiving approval from the team, we could then merge the feature branch
    into the main branch using the pull request. The main branch was then ready to
    be deployed to a staging or production environment for further testing and validation.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在获得团队批准后，我们可以通过拉取请求将特性分支合并到主分支。然后，主分支准备好进行部署到暂存环境或生产环境，以进行进一步的测试和验证。
- en: Once the deployment was successful, the feature branch could be deleted, both
    locally and on the remote repository, to maintain a clean and organized code base.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦部署成功，特性分支可以在本地和远程仓库中删除，以保持干净和有序的代码库。
- en: The use of pull requests, Jira ticket-based feature branches, and the collaborative
    review process ensures a high-quality, traceable, and maintainable code base throughout
    the Salesforce development lifecycle.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 使用拉取请求、基于 Jira 工单的特性分支和协作评审过程，确保了在整个 Salesforce 开发生命周期中代码库的高质量、可追溯性和可维护性。
- en: This entire workflow was achieved with freely available tools and provided the
    simplest entry point to a Salesforce DevOps process. As your needs grow, it will
    become more important to look at the power of automation, especially in the context
    of CI/CD.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 整个工作流程是通过免费工具实现的，并为Salesforce DevOps过程提供了最简单的入门点。随着需求的增长，自动化的力量变得更加重要，特别是在CI/CD的背景下。
- en: We will look at CI/CD in more detail in [*Chapter 7*](B19436_07.xhtml#_idTextAnchor159).
    Ahead of that, though, in the next chapter, we’ll take another approach to Salesforce
    change management by looking at packaging.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第七章*](B19436_07.xhtml#_idTextAnchor159)中更详细地讨论CI/CD。在此之前，在下一章中，我们将通过探讨打包来采用另一种Salesforce变更管理的方法。
