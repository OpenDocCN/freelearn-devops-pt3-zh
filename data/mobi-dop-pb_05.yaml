- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Implementing a Robust Mobile App Testing Strategy
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施强大的移动应用测试策略
- en: As discussed in the previous chapters, mobile applications have become integral
    to our daily lives. With the proliferation of smartphones and tablets, developing
    and delivering mobile apps that provide a seamless user experience across different
    devices and platforms has become essential. Mobile app testing involves testing
    different aspects of the application, including its functionality, performance,
    security, usability, and compatibility. In addition, testing should be done on
    various devices, operating systems, and network configurations to ensure the app
    works seamlessly across all possible scenarios.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几章所讨论的，移动应用已成为我们日常生活的一部分。随着智能手机和平板电脑的普及，开发和交付跨不同设备和平台提供无缝用户体验的移动应用变得至关重要。移动应用测试涉及测试应用的不同方面，包括其功能、性能、安全性、可用性和兼容性。此外，还应在各种设备、操作系统和网络配置下进行测试，以确保应用能够在所有可能的场景中无缝运行。
- en: It cannot be argued that mobile app testing plays a critical role in ensuring
    the application performs well, booms, and has a positive user experience. By investing
    time and resources into testing, developers are more likely to develop responsive
    applications and deliver exceptional user experiences.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，移动应用测试在确保应用表现良好、蓬勃发展并具有积极用户体验方面起着至关重要的作用。通过投入时间和资源进行测试，开发者更有可能开发出响应迅速的应用并提供卓越的用户体验。
- en: Test automation for mobile apps in Mobile DevOps is like the wheels on a car
    – it provides the necessary traction for driving the project forward efficiently
    and with minimal risk. With it, you will find yourself able to reach your destination.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用在移动DevOps中的测试自动化就像汽车的轮子——它为项目提供必要的牵引力，使项目能够高效推进并最小化风险。有了它，你将能够顺利到达目的地。
- en: 'However, developing and testing mobile apps can be challenging due to the diverse
    range of devices, operating systems, and network configurations. In this chapter,
    we will discuss how to implement a robust mobile app testing strategy that can
    help you deliver high-quality mobile apps, including the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于设备、操作系统和网络配置的多样性，开发和测试移动应用可能具有挑战性。在本章中，我们将讨论如何实施一个强大的移动应用测试策略，帮助你交付高质量的移动应用，内容包括以下主题：
- en: Understanding mobile app testing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解移动应用测试
- en: The importance of test automation for mobile apps
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动应用测试自动化的重要性
- en: Mobile app testing challenges and pitfalls
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动应用测试的挑战和陷阱
- en: What is a mobile app testing strategy?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是移动应用测试策略？
- en: Testing tools, frameworks, and services for mobile apps
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动应用的测试工具、框架和服务
- en: Mobile app UI and functionality testing
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动应用的UI和功能测试
- en: Testing on cloud devices
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在云设备上的测试
- en: How AI and ML are changing mobile testing
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人工智能（AI）和机器学习（ML）如何改变移动测试
- en: Test case management
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试用例管理
- en: Achieving successful mobile test coverage
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现成功的移动测试覆盖
- en: Let’s begin by understanding more about mobile app testing.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从理解移动应用测试开始。
- en: Understanding mobile app testing
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解移动应用测试
- en: Mobile app testing involves testing different aspects of the application, including
    functionality, performance, security, usability, and compatibility. In addition,
    testing should be done on various devices, operating systems, and network configurations
    to ensure the app works seamlessly across all possible scenarios. Mobile apps
    should be tested before and after they have been launched to identify and fix
    any bugs and new features that might improve the user experience.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用测试涉及测试应用的不同方面，包括功能、性能、安全性、可用性和兼容性。此外，还应在各种设备、操作系统和网络配置下进行测试，以确保应用能够在所有可能的场景中无缝运行。移动应用应在发布前后进行测试，以便识别和修复任何可能影响用户体验的漏洞和新特性。
- en: First, let’s discuss the different testing levels in software development and
    mobile development specifically.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们讨论一下软件开发和移动开发中的不同测试层级。
- en: Testing levels
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试层级
- en: The field of software development is constantly evolving, particularly in the
    realm of mobile development. This is because we are always striving to introduce
    new and improved features and technologies that can better assist our customers
    in their daily tasks. Therefore, all mobile developers need to adopt testing as
    a necessary practice to ensure that all functionalities are performing as intended.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发领域正在不断发展，特别是在移动开发领域。这是因为我们始终在努力引入新的改进功能和技术，以更好地帮助我们的客户完成日常任务。因此，所有移动开发者都需要将测试作为必要的实践，以确保所有功能按预期运行。
- en: There are various types of testing, each with its own scope. Typically, we categorize
    these types using the test pyramid as a reference.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 测试有多种类型，每种类型都有其独特的范围。通常，我们使用测试金字塔作为参考来对这些类型进行分类。
- en: Unit testing
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单元测试
- en: These are tests that focus on individual components that have a single responsibility.
    Essentially, this is the lowest level of testing. In this level of testing, the
    developer asserts a set of conditions that must be true, along with some that
    need to be false.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些测试专注于具有单一责任的独立组件。实际上，这是测试的最低级别。在这个测试级别中，开发者会验证一组必须为真的条件，以及一些需要为假的条件。
- en: Imagine we are developing a calculator app – the developer will assert what
    will happen when we click on the plus (+) button, and the expected results will
    be narrowly defined.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在开发一个计算器应用——开发者会验证点击加号（+）按钮时会发生什么，且预期结果会被精确地定义。
- en: As a unit of code, unit testing cannot detect integration errors or system-level
    errors, which are covered in integration and **end to end** (**E2E**) testing.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 作为代码单元，单元测试无法检测集成错误或系统级错误，这些会在集成测试和**端到端**（**E2E**）测试中覆盖。
- en: 'When it comes to verifying different aspects of a program, unit testing can
    be used in various ways to find the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在验证程序的不同方面时，单元测试可以用来查找以下内容：
- en: The expected cases or “happy paths”
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预期情况或“理想路径”
- en: The edge cases
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边界情况
- en: The boundary conditions
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边界条件
- en: The program’s logic
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序逻辑
- en: In iOS, we can use the **XCTest** framework to write unit tests for our Xcode
    projects that integrate seamlessly with Xcode’s testing workflow.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 iOS 中，我们可以使用 **XCTest** 框架来为我们的 Xcode 项目编写单元测试，它与 Xcode 的测试工作流程无缝集成。
- en: In Android, unit tests are compiled to execute on the **Java Virtual Machine**
    (**JVM**) to reduce the amount of time it takes. If your tests rely on objects
    within the Android framework, you can use the **Robolectric** ([https://robolectric.org/](https://robolectric.org/))
    tool. In cases where your tests depend on your dependencies, mock objects can
    be utilized to emulate the expected behavior of those dependencies.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 中，单元测试会被编译以在 **Java 虚拟机**（**JVM**）上执行，从而减少执行时间。如果你的测试依赖于 Android 框架中的对象，可以使用
    **Robolectric** ([https://robolectric.org/](https://robolectric.org/)) 工具。在测试依赖项时，可以利用模拟对象来模拟这些依赖项的预期行为。
- en: In Flutter, a unit test can be written using the `test` package, and a widget
    can be tested using the `flutter_test` package.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Flutter 中，可以使用 `test` 包编写单元测试，使用 `flutter_test` 包测试组件。
- en: In React Native, developers use testing frameworks such as **Jest** ([https://jestjs.io/](https://jestjs.io/))
    and testing utilities such as **React Testing Library** ([https://testing-library.com/docs/react-testing-library/intro/](https://testing-library.com/docs/react-testing-library/intro/))
    to facilitate unit testing.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React Native 中，开发者使用像 **Jest** ([https://jestjs.io/](https://jestjs.io/))
    这样的测试框架以及像 **React Testing Library** ([https://testing-library.com/docs/react-testing-library/intro/](https://testing-library.com/docs/react-testing-library/intro/))
    这样的测试工具来便于单元测试。
- en: 'When it comes to writing efficient unit tests, there are certain criteria to
    keep in mind:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写高效的单元测试时，有一些标准需要记住：
- en: Tests should be fast and efficient.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试应当快速高效。
- en: Tests must be fully automated and should only indicate “pass” or “fail” outcomes.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试必须完全自动化，并且只应显示“通过”或“失败”结果。
- en: Tests should be independent and isolated from one another, meaning they should
    not share states.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试应当是独立的，彼此隔离，意味着它们不应共享状态。
- en: It is advisable to write tests before writing the production code. This is known
    as **test-driven** **development** (**TDD**).
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议在编写生产代码之前先编写测试。这就是所谓的**测试驱动** **开发**（**TDD**）。
- en: Unit testing and code coverage
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单元测试和代码覆盖率
- en: 'The purpose of code coverage testing is to determine how much code is being
    tested. The following formula can be used to calculate it:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 代码覆盖率测试的目的是确定有多少代码被测试。可以使用以下公式来计算它：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here are the different techniques for code coverage that are utilized in unit
    testing:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是单元测试中使用的不同代码覆盖技术：
- en: Statement coverage
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语句覆盖率
- en: Decision coverage
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决策覆盖率
- en: Branch coverage
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分支覆盖率
- en: Condition coverage
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件覆盖率
- en: 'There are also different code coverage tools, such as the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他不同的代码覆盖率工具，例如以下几种：
- en: '**JaCoCo** ([https://docs.gradle.org/current/userguide/jacoco_plugin.html](https://docs.gradle.org/current/userguide/jacoco_plugin.html))
    can generate an HTML report for your Android unit tests and integrate it with
    your continuous integration server.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JaCoCo** ([https://docs.gradle.org/current/userguide/jacoco_plugin.html](https://docs.gradle.org/current/userguide/jacoco_plugin.html))
    可以为 Android 单元测试生成 HTML 报告，并与持续集成服务器集成。'
- en: '**Flutter Console Coverage Test** ([https://pub.dev/packages/test_cov_console](https://pub.dev/packages/test_cov_console))
    is a Dart tool that’s used to generate a Flutter Coverage Test report.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Flutter Console Coverage Test** ([https://pub.dev/packages/test_cov_console](https://pub.dev/packages/test_cov_console))
    是一个 Dart 工具，用于生成 Flutter 覆盖测试报告。'
- en: '**dlcov** ([https://pub.dev/packages/dlcov](https://pub.dev/packages/dlcov))
    is a CLI that’s used to verify the code coverage threshold.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dlcov** ([https://pub.dev/packages/dlcov](https://pub.dev/packages/dlcov))
    是一个命令行工具，用于验证代码覆盖率的阈值。'
- en: '**SonarQube** ([https://www.sonarsource.com/products/sonarqube/](https://www.sonarsource.com/products/sonarqube/))
    integrates with various build systems and supports Android projects. It provides
    a comprehensive quality analysis platform that includes code coverage metrics.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SonarQube** ([https://www.sonarsource.com/products/sonarqube/](https://www.sonarsource.com/products/sonarqube/))
    与多种构建系统集成，并支持 Android 项目。它提供一个全面的质量分析平台，包括代码覆盖率指标。'
- en: '**Codecov** ([https://about.codecov.io/](https://about.codecov.io/)) is a service
    that provides code coverage solutions for various programming languages, including
    mobile app development platforms. It can integrate with your CI/CD pipeline to
    gather and display coverage reports.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Codecov** ([https://about.codecov.io/](https://about.codecov.io/)) 是一个提供各种编程语言代码覆盖解决方案的服务，包括移动应用开发平台。它可以与
    CI/CD 管道集成，收集并展示覆盖率报告。'
- en: 'Another technique can be used alongside unit testing to improve the quality
    of a code base: **TDD**. Let’s explore the concept and its benefits.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可以与单元测试一起使用的技术，以提高代码库质量的是 **TDD**。让我们来探索一下这个概念及其优势。
- en: Test-driven development
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试驱动开发
- en: 'TDD is an approach to testing that differs from traditional methods. Instead
    of waiting until the code or feature is fully developed to test it, TDD involves
    creating tests based on the feature requirements and then writing code to ensure
    the tests pass, as shown in the following figure:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: TDD 是一种与传统方法不同的测试方法。TDD 不是等到代码或功能完全开发完成再进行测试，而是根据功能需求创建测试，然后编写代码以确保测试通过，具体过程如图所示：
- en: '![Figure 5.1 – How TDD works](img/Figure_05.01_B18113.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – TDD 如何工作](img/Figure_05.01_B18113.jpg)'
- en: Figure 5.1 – How TDD works
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – TDD 如何工作
- en: Using TDD is an incredibly valuable technique for improving the internal quality
    of your code base. It also serves as a great tool for training yourself and your
    team to design better software in a disciplined manner.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TDD是一种极为宝贵的技术，它可以提高代码库的内部质量。它还是训练你和你的团队以有纪律的方式设计更好软件的一个重要工具。
- en: 'Here is an overview of the TDD process and how it works:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 TDD 过程的概述及其工作方式：
- en: Write a test. In this stage, the developers create tests for each functionality
    they want to add. These tests serve as requirements that the new code must meet
    and writing them first ensures that developers consider potential issues before
    writing any code.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写测试。在这个阶段，开发者为他们想要添加的每个功能编写测试。这些测试作为新代码必须满足的要求，首先编写它们可以确保开发者在编写代码之前就考虑到潜在的问题。
- en: Run the test and intentionally cause it to fail. This step confirms that the
    test is valid and that new code is necessary.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行测试并故意使其失败。此步骤确认测试有效，并且需要新代码。
- en: Write code that passes the failed test. While the code may not be perfect, it
    must meet the test requirements. If it fails, the code must be revised until it
    passes and ensures that the new code does not break any existing features.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写通过失败测试的代码。虽然代码可能并不完美，但它必须满足测试要求。如果失败，代码必须被修正，直到它通过测试，并确保新代码不会破坏任何现有功能。
- en: Refactor the code for better readability and maintainability. Running tests
    at this stage ensures that the functionality is preserved.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重构代码，以提高可读性和可维护性。在这个阶段运行测试，确保功能得以保持。
- en: Repeat the process from *Step 1* for each piece of functionality.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对每个功能模块重复*步骤 1*的过程。
- en: What are the benefits of TDD?
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TDD的好处是什么？
- en: By writing tests before writing code, TDD challenges us to think more clearly
    and critically about the problem we are trying to solve.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在编写代码之前编写测试，TDD挑战我们更清晰、批判性地思考我们试图解决的问题。
- en: Breaking down the problem into smaller parts leads to the creation of more modular
    code, which ultimately results in higher-quality code and lower maintenance costs.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 将问题分解为更小的部分会导致更模块化的代码，从而最终产生更高质量的代码，并降低维护成本。
- en: 'To summarize, the benefits of TDD are as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，TDD的好处如下：
- en: Improves code quality
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高代码质量
- en: Gives developers the confidence to make changes
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给开发者信心去做出更改
- en: What are the cons of TDD?
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TDD的缺点是什么？
- en: While TDD can improve software quality, it also has drawbacks. Some developers
    have expressed concerns about the approach and argue that it may not always be
    the best option.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然TDD可以提高软件质量，但它也有缺点。一些开发者对这种方法表示担忧，并认为它并不总是最佳选择。
- en: The main criticisms are that TDD can slow down development and create additional
    code maintenance work.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的批评意见是TDD可能会减慢开发进度，并增加额外的代码维护工作。
- en: When should you avoid using TDD?
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么时候应该避免使用TDD？
- en: While TDD helps teams prioritize their code base’s internal quality early on,
    it’s not the only way to do so. Whether you adopt TDD should depend on the reality
    of your project and the surrounding situation.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然TDD帮助团队在早期优先关注代码库的内部质量，但它并不是唯一的方式。是否采用TDD应该取决于项目的实际情况和周围环境。
- en: 'Here are some scenarios or situations where it may not make sense to use TDD:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些可能不适合使用TDD的场景或情况：
- en: When experimenting or creating a proof of concept
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在进行实验或创建概念验证时
- en: When dealing with language/framework methods
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在处理语言/框架方法时
- en: When dealing with GUI development
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在进行GUI开发时
- en: To TDD or not to TDD
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 是选择TDD还是不选择TDD
- en: Implementing TDD involves a fundamental shift in culture and testing practices,
    requiring the support of both the engineering team and management.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 实施TDD涉及到文化和测试实践的根本转变，需要工程团队和管理层的支持。
- en: If you work in an organization that utilizes extensive legacy code, you may
    be curious about how TDD can benefit you. While it may not affect the existing
    code base, you can gradually integrate TDD for new features and bug fixes, resulting
    in an improved code base over time.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个使用大量遗留代码的组织中工作，你可能会好奇TDD如何能为你带来好处。虽然它可能不会影响现有的代码库，但你可以逐步将TDD整合到新的功能和bug修复中，随着时间的推移，代码库会得到改善。
- en: Integration testing
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集成测试
- en: These tests are meant to check the integration of individual components. This
    process ensures that all the different layers of the app, such as the UI, business
    logic, data storage, and external services, work together seamlessly. Integration
    testing helps uncover any issues that may arise due to the interactions between
    these different parts of the app.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这些测试旨在检查各个组件的集成。这个过程确保应用程序的不同层次，如UI、业务逻辑、数据存储和外部服务，能够无缝地协同工作。集成测试有助于发现由于这些不同部分之间的交互而可能出现的问题。
- en: Acceptance/E2E testing
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验收/E2E测试
- en: Acceptance testing focuses on verifying whether a mobile app meets the specified
    requirements and is ready for release. It aims to ensure that the app aligns with
    the intended functionality, user expectations, and business requirements.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 验收测试侧重于验证移动应用是否满足规定的需求并准备好发布。其目标是确保应用与预期功能、用户期望和业务需求保持一致。
- en: '**E2E** testing focuses on testing the complete flow of an application, often
    spanning multiple components and systems. In the context of mobile apps, E2E testing
    ensures that all the different parts of the app work seamlessly together, from
    the UIs to the backend systems.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**E2E**测试侧重于测试应用程序的完整流程，通常跨越多个组件和系统。在移动应用的背景下，E2E测试确保应用的所有不同部分能够无缝地协同工作，从UI到后端系统。'
- en: The difference between TDD and unit testing
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TDD与单元测试的区别
- en: Unit testing involves writing many small tests that each test one very simple
    function’s or object’s behavior. TDD is a thinking process that results in unit
    tests, and “thinking in tests” tends to result in more fine-grained and comprehensive
    testing and an easier-to-extend software design.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试包括编写许多小的测试，每个测试针对一个非常简单的函数或对象的行为。TDD是一种思维过程，它通过单元测试的方式得以实现，“以测试为思维”通常会导致更加细粒度、全面的测试，并使软件设计更易于扩展。
- en: Let’s move on and learn more about the different types of mobile app testing.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续了解更多关于移动应用测试的类型。
- en: Types of mobile app testing
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动应用测试的类型
- en: 'When it comes to mobile app testing, there are several types of testing that
    you can perform to ensure that your app is robust and reliable and provides an
    excellent user experience. Here are some of the most common types of mobile app
    testing:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动应用测试中，有多种测试类型可以确保你的应用程序健壮、可靠并提供卓越的用户体验。以下是一些最常见的移动应用测试类型：
- en: '**Functional testing**: This aims to determine whether the app’s functionality
    meets the requirements and works as expected. It involves testing a variety of
    aspects of the app, such as the UI, navigation, data processing, and business
    logic.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能测试**：此项测试旨在确定应用程序的功能是否符合要求并按预期工作。它涉及测试应用程序的各个方面，例如 UI、导航、数据处理和业务逻辑。'
- en: '**Regression testing**: This ensures that new features or changes do not affect
    the app’s functionality. A regression test checks whether the app’s existing features
    work correctly after introducing new features or changes.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回归测试**：此项测试确保新功能或更改不会影响应用程序的功能性。回归测试检查在引入新功能或更改后，应用程序现有的功能是否正常工作。'
- en: '**Usability testing**: This focuses on the user experience and checks whether
    the app is easy to use, navigate, and understand. It involves testing the app’s
    design, layout, colors, font sizes, and other elements that affect the user experience.
    Some of the popular testing activities here are **snapshot** and **visual testing**;
    we will discuss both in this chapter.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用性测试**：此项测试专注于用户体验，检查应用程序是否易于使用、导航和理解。它涉及测试应用程序的设计、布局、颜色、字体大小及其他影响用户体验的元素。这里一些流行的测试活动包括**快照**和**视觉测试**；我们将在本章讨论这两种测试。'
- en: '**Compatibility testing**: This checks the app’s compatibility with different
    devices, operating systems, and screen sizes. Testing the app’s compatibility
    with hardware, network, and software configurations is necessary. Using cloud
    device testing such as Sauce Labs or Firebase Test Lab helps you run your test
    suites on different devices and configurations to ensure that the app works as
    expected.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**兼容性测试**：此项测试检查应用程序与不同设备、操作系统和屏幕尺寸的兼容性。测试应用程序与硬件、网络和软件配置的兼容性是必要的。使用云设备测试工具，如
    Sauce Labs 或 Firebase Test Lab，帮助你在不同设备和配置上运行测试套件，确保应用程序按预期工作。'
- en: '**Localization testing**: This checks whether the app is compatible with different
    languages, regions, and cultures by testing the language support, the date and
    time formats, the currency format, and other cultural elements, especially if
    the app supports languages such as Arabic since it changes the UI to **Right to**
    **Left** (**RTL**).'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地化测试**：此项测试检查应用程序是否支持不同的语言、地区和文化，测试语言支持、日期和时间格式、货币格式及其他文化元素，尤其是当应用程序支持如阿拉伯语等语言时，因为这会将
    UI 转换为**从右到左**（**RTL**）显示。'
- en: '**Performance testing**: This checks the app’s performance and responsiveness
    under different scenarios, such as low battery, weak network connectivity, or
    high usage. It tests the app’s load, response, memory usage, and battery consumption.
    In [*Chapter 7*](B18113_07.xhtml#_idTextAnchor265), *Establishing Mobile App Monitoring,
    Observability, and Analytics*, we will discuss how to monitor the performance
    of mobile apps using different tools and services.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能测试**：此项测试检查应用程序在不同场景下的性能和响应性，例如低电量、弱网络连接或高使用量。它测试应用程序的负载、响应、内存使用和电池消耗。在[*第7章*](B18113_07.xhtml#_idTextAnchor265)《建立移动应用监控、可观测性和分析》中，我们将讨论如何使用不同的工具和服务来监控移动应用的性能。'
- en: '**Accessibility testing**: This tests the application’s UI for accessibility
    to people with disabilities, such as those with visual impairments. Testing for
    accessibility can identify issues with an application’s layout, design, and UI
    that may prevent users with disabilities from using it.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可访问性测试**：此项测试检查应用程序的 UI 是否对残障人士友好，例如视觉障碍者。可访问性测试可以识别应用程序布局、设计和 UI 中可能会阻碍残障用户使用的潜在问题。'
- en: '**Security testing**: This checks the app’s security features and identifies
    vulnerabilities that can compromise user data. It includes testing the app’s authentication,
    authorization, encryption, and data storage mechanisms. In [*Chapter 8*](B18113_08.xhtml#_idTextAnchor306),
    *Keeping Mobile Apps and DevOps Secure*, we will discuss security testing and
    how to inject security into Mobile DevOps processes.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性测试**：此项测试检查应用程序的安全功能，并识别可能会危及用户数据的漏洞。它包括测试应用程序的身份验证、授权、加密和数据存储机制。在[*第8章*](B18113_08.xhtml#_idTextAnchor306)《保持移动应用和
    DevOps 安全》中，我们将讨论安全性测试及如何将安全性融入到移动 DevOps 流程中。'
- en: By performing these types of mobile app testing, you can ensure that your app
    is high quality, meets user expectations, and provides an excellent user experience.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行这些类型的移动应用测试，您可以确保您的应用具有高质量，满足用户期望，并提供出色的用户体验。
- en: Test automation is essential for mobile apps as it enhances efficiency, reduces
    costs, improves app quality, and ensures a positive user experience across a variety
    of devices and operating systems. By investing in test automation, mobile app
    developers can create and maintain high-quality apps that meet users’ expectations
    and stand out in a competitive market.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 测试自动化对移动应用至关重要，因为它提高了效率，降低了成本，改善了应用质量，并确保了在各种设备和操作系统上的良好用户体验。通过投资测试自动化，移动应用开发者可以创建和维护符合用户期望的高质量应用，并在竞争激烈的市场中脱颖而出。
- en: Now, let’s discuss the importance of test automation for mobile apps.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们讨论测试自动化对移动应用的重要性。
- en: The importance of test automation for mobile apps
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试自动化对移动应用的重要性
- en: In mobile DevOps, test automation is essential as it makes the mobile development
    life cycle faster and more reliable.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动DevOps中，测试自动化至关重要，因为它使移动开发生命周期更快、更可靠。
- en: 'Mobile DevOps cannot exist without test automation for the following reasons:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 移动DevOps无法在没有测试自动化的情况下存在，原因如下：
- en: '**Faster release cycles**: Mobile DevOps aims to deliver mobile apps rapidly
    and consistently. Test automation helps achieve this by allowing teams to execute
    tests quickly and repeatedly, reducing the time it takes to identify and fix issues
    before deployment.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更快的发布周期**：移动DevOps旨在快速且一致地交付移动应用。测试自动化通过允许团队快速而反复地执行测试，帮助实现这一目标，缩短了识别和修复问题的时间，从而加速了部署前的修复过程。'
- en: '*Test scripts can be reused, making it easy to retest the app after updates*
    *or modifications.*'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '*测试脚本可以重复使用，便于在更新* *或修改后重新测试应用。*'
- en: '**Continuous integration and deployment/delivery (CI/CD)**: Mobile DevOps relies
    on **CI/CD** to streamline the mobile release process. Test automation is crucial
    to these processes. As part of the development cycle, automated tests are run
    every time code is committed or changes are made, ensuring the mobile app remains
    stable and functional. For example, the CI workflows and pipelines we implemented
    in the previous chapter can use different test automation tools such as **Espresso**,
    **XCUITest**, and **Appium** to ensure app quality.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成与部署/交付（CI/CD）**：移动DevOps依赖**CI/CD**来简化移动发布过程。测试自动化对这些过程至关重要。作为开发周期的一部分，自动化测试会在每次提交代码或进行更改时运行，确保移动应用保持稳定和功能正常。例如，我们在上一章中实现的CI工作流和管道可以使用不同的测试自动化工具，如**Espresso**、**XCUITest**和**Appium**来确保应用质量。'
- en: '**Increased test coverage**: In this way, more tests can be run quickly, resulting
    in better test coverage. Continuous testing identifies issues earlier in the development
    process and reduces the possibility of final production defects. We will discuss
    how to achieve successful mobile test coverage, continuous testing, and shift-left
    testing later in this chapter.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增加测试覆盖率**：通过这种方式，可以快速运行更多的测试，从而获得更好的测试覆盖率。持续测试可以在开发过程中更早发现问题，减少最终生产缺陷的可能性。在本章后面，我们将讨论如何实现成功的移动测试覆盖率、持续测试和左移测试。'
- en: '**Improved collaboration**: Automated mobile tests enable developers and testers
    to collaborate more efficiently by providing immediate feedback on how code changes
    impact the application. They prevent errors from entering the production environment
    and enhance communication among team members.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改善协作**：自动化移动测试使开发人员和测试人员能够更高效地合作，提供有关代码更改如何影响应用程序的即时反馈。它们可以防止错误进入生产环境，并增强团队成员之间的沟通。'
- en: '**Cost-efficiency**: Manual testing can result in reduced test automation,
    saving time and money. By automating repetitive tasks, teams can focus on more
    complex tasks and increase productivity and the **Return** **On Investment**(**ROI**).'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本效益**：手动测试可能导致测试自动化减少，从而节省时间和金钱。通过自动化重复性任务，团队可以专注于更复杂的任务，提高生产力并增加**投资回报率**(**ROI**)。'
- en: Now, let’s discuss the challenges we come across in mobile development before
    we discuss the need for a robust mobile testing strategy.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们先讨论在移动开发中遇到的挑战，然后再讨论为何需要一个强有力的移动测试策略。
- en: Mobile app testing challenges and pitfalls
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动应用测试挑战与陷阱
- en: 'Mobile technology is rapidly evolving, presenting unique challenges to mobile
    testing teams. Let’s examine the most common challenges teams face when testing
    mobile apps so that we can overcome them:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 移动技术正在迅速发展，这给移动测试团队带来了独特的挑战。让我们来看看团队在测试移动应用时最常面临的挑战，以便我们能够克服它们：
- en: Finding suitable automation tools and frameworks can be challenging as mobile
    application testing becomes increasingly essential.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着移动应用测试变得越来越重要，找到合适的自动化工具和框架变得具有挑战性。
- en: With the growing number of devices and operating systems, testing mobile device
    compatibility and cross-platform compatibility can be challenging.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着设备和操作系统数量的增加，测试移动设备兼容性和跨平台兼容性变得具有挑战性。
- en: To determine how an app will perform on different networks, such as 2G, 3G,
    4G, and 5G, it is necessary to test the app on each network.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要确定应用在不同网络（如 2G、3G、4G 和 5G）上的表现，有必要在每个网络上对应用进行测试。
- en: To guarantee the app’s compatibility with an **Internet Protocol version 6**
    (**IPv6**) setup, various checks need to be conducted. This includes assessing
    address compatibility, network configuration, and the firewall and NAT, and determining
    how to mitigate any issues that arise.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了确保应用与**互联网协议第六版**（**IPv6**）设置的兼容性，需要进行多项检查。这包括评估地址兼容性、网络配置、防火墙和 NAT，并确定如何解决可能出现的问题。
- en: Mobile applications should be tested for performance under various conditions
    to ensure an optimal user experience. Teams should ensure that the applications
    are tested for speed, responsiveness, and stability.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应对移动应用在各种条件下的性能进行测试，以确保最佳的用户体验。团队应确保应用在速度、响应性和稳定性方面经过测试。
- en: Security and privacy are increasingly important in mobile testing. Teams must
    ensure that all applications are tested for vulnerabilities and that user data
    is protected.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性和隐私在移动测试中变得越来越重要。团队必须确保所有应用都经过漏洞测试，并且用户数据得到保护。
- en: These challenges require teams to have a comprehensive testing strategy that
    covers all mobile application testing aspects. Teams should focus on developing
    a strategy to manage complexity, automate testing, optimize performance, improve
    security and privacy, and ensure cross-platform compatibility.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这些挑战要求团队拥有一个全面的测试策略，涵盖所有移动应用测试的各个方面。团队应专注于制定策略以应对复杂性，自动化测试，优化性能，提升安全性和隐私，并确保跨平台兼容性。
- en: Additionally, teams should seek out tools and services that can help them simplify
    the mobile testing process. By planning and preparing strategically, teams can
    effectively face mobile testing challenges.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，团队应寻找可以帮助他们简化移动测试过程的工具和服务。通过战略性地规划和准备，团队可以有效应对移动测试的挑战。
- en: For their testing strategies to remain relevant and up to date, teams should
    regularly review their processes, evaluate new tools, and adapt their approaches
    as necessary.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保测试策略保持相关性和时效性，团队应定期审查他们的流程，评估新工具，并根据需要调整他们的方法。
- en: '*Mobile testing strategies should be developed and* *maintained continuously.*'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*移动测试策略应该不断地* *制定和维护。*'
- en: This should include defining your testing efforts’ scope, objectives, and priorities.
    Identify the types of testing required for your app and allocate resources accordingly.
    Review your testing processes, evaluate new tools and technologies, and adjust
    your approaches as needed.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该包括定义测试工作的范围、目标和优先级。确定应用所需的测试类型，并相应分配资源。审查测试流程，评估新工具和技术，并根据需要调整方法。
- en: Teams can ensure their mobile applications succeed by taking the right direction
    and leveraging suitable tools. Teams need to review their testing processes regularly
    and evaluate emerging technologies that can help simplify their mobile testing
    process.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 团队通过采取正确的方向并利用合适的工具，可以确保他们的移动应用成功。团队需要定期审查他们的测试流程，并评估新兴技术，以帮助简化移动测试过程。
- en: The need for a robust testing strategy
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需要一个强大的测试策略。
- en: As discussed in [*Chapter 1*](B18113_01.xhtml#_idTextAnchor014), *Resolving
    Challenges in Mobile DevOps*, it is essential for Fintech companies or any other
    companies to implement mobile DevOps and follow a testing strategy. Failure to
    do so can lead to numerous issues with manual testing, such as consuming significant
    time and effort, which can ultimately affect the release process and delay the
    rollout of new features. To ensure optimal functionality and user experience in
    a mobile app, a mobile testing strategy encompasses various testing types, tools,
    and techniques, all of which are addressed meticulously to cover every possible
    scenario. This includes **unit**, **integration**, **system**, **performance**,
    **compatibility**, and **usability** testing.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如在[*第一章*](B18113_01.xhtml#_idTextAnchor014)中讨论的，*解决移动DevOps中的挑战*，金融科技公司或其他公司实施移动DevOps并遵循测试策略至关重要。未能做到这一点可能会导致手动测试的众多问题，例如消耗大量时间和精力，最终影响发布过程并延迟新功能的推出。为了确保移动应用的最佳功能和用户体验，移动测试策略涵盖了各种测试类型、工具和技术，所有这些都经过细致处理，以覆盖每个可能的场景。这包括**单元**、**集成**、**系统**、**性能**、**兼容性**和**可用性**测试。
- en: In my opinion, *Don’t follow the test pyramid. It is a model*. There is no silver
    bullet or magic wand; each team or company should create its own testing strategy.
    Some businesses focus more on functional tests, others on performance tests, and
    others on security tests.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，*不要遵循测试金字塔。它只是一个模型*。没有万能的解决方案或魔法棒；每个团队或公司应根据自身情况制定测试策略。有些企业更注重功能测试，有些注重性能测试，还有一些注重安全性测试。
- en: Note
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The **Mobile Native Foundation** has an interesting discussion ([https://github.com/MobileNativeFoundation/discussions/discussions/6](https://github.com/MobileNativeFoundation/discussions/discussions/6))
    about how companies such as Lyft, Spotify, Uber, and more conduct testing and
    implement testing strategies.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**Mobile Native Foundation**有一篇有趣的讨论([https://github.com/MobileNativeFoundation/discussions/discussions/6](https://github.com/MobileNativeFoundation/discussions/discussions/6))，讨论了像Lyft、Spotify、Uber等公司如何进行测试并实施测试策略。'
- en: What is a mobile app testing strategy?
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是移动应用测试策略？
- en: A mobile app testing strategy is a comprehensive plan that outlines the testing
    process for a mobile app. It includes various testing techniques and tools that
    help ensure the quality and reliability of the app.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用测试策略是一个全面的计划，概述了移动应用的测试过程。它包括各种测试技术和工具，帮助确保应用的质量和可靠性。
- en: 'Here are some essential elements to consider when creating a mobile app testing
    strategy:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在制定移动应用测试策略时，需要考虑以下一些关键要素：
- en: '**Clearly define your testing goals and objectives** by considering what you
    want to achieve through testing, such as ensuring the app works correctly on all
    devices and platforms, identifying and fixing bugs before releasing the app, or
    improving the app’s overall user experience.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**明确定义你的测试目标和目的**，考虑你希望通过测试实现的目标，例如确保应用在所有设备和平台上正常工作、在发布前识别并修复漏洞，或提升应用的整体用户体验。'
- en: '**Identify the target devices and platforms** on which you want to test your
    app. To ensure compatibility, consider testing your app on various devices with
    different operating systems, screen sizes, and hardware configurations.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定目标设备和平台**，你希望在其上测试应用。为了确保兼容性，考虑在不同操作系统、屏幕大小和硬件配置的多种设备上进行测试。'
- en: '**Choose testing techniques** that best suit your app’s needs and objectives.
    Consider techniques such as functional testing, usability testing, performance
    testing, security testing, compatibility testing, and localization testing.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择最适合你应用需求和目标的测试技术**。考虑使用功能测试、可用性测试、性能测试、安全性测试、兼容性测试和本地化测试等技术。'
- en: '**Use tools that can help you automate your testing** and provide comprehensive
    coverage. Consider tools such as Appium, XCUITest, Espresso, and Detox.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用可以帮助你自动化测试的工具**，并提供全面的覆盖。考虑使用像Appium、XCUITest、Espresso和Detox这样的工具。'
- en: '**Define test cases and scenarios** that cover all app features, functionalities,
    and user scenarios. Test cases and scenarios should be designed to cover both
    positive and negative test scenarios.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定义涵盖所有应用功能、特性和用户场景的测试用例和场景**。测试用例和场景应设计为涵盖正向和负向测试场景。'
- en: '**Establish a test execution plan** that outlines the testing process, test
    schedules, and resources required to execute the tests. This plan should also
    outline the roles and responsibilities of the testing team.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**制定测试执行计划**，概述测试过程、测试时间表以及执行测试所需的资源。该计划还应明确测试团队的角色和责任。'
- en: '**Implement test automation** to save time and ensure consistent testing results.
    Automate repetitive tests that can be executed quickly, such as regression testing.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施测试自动化**以节省时间并确保一致的测试结果。自动化执行那些可以快速执行的重复性测试，例如回归测试。'
- en: '**Involve end users in user acceptance testing** (**UAT**) to get feedback
    (beta testing) on the app’s usability and functionality. This feedback can help
    you identify any issues and improve the overall user experience. In [*Chapter
    6*](B18113_06.xhtml#_idTextAnchor210), *Mobile App Release Management*, we will
    discuss the concept of beta testing for mobile apps.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**让最终用户参与用户验收测试**（**UAT**），获取关于应用程序可用性和功能的反馈（beta 测试）。这些反馈可以帮助你发现任何问题并改善整体用户体验。在[*第六章*](B18113_06.xhtml#_idTextAnchor210)《移动应用发布管理》中，我们将讨论移动应用的beta测试概念。'
- en: 'However, sometimes, people confuse a testing strategy with a test plan. Let’s
    take a look at the differences between them:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时人们会将测试策略与测试计划混淆。让我们来看一下它们之间的区别：
- en: '| **Test Plan** | **Test Strategy** |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| **测试计划** | **测试策略** |'
- en: '| A document that outlines the scope, approach, resources, and schedule of
    the intended testing activities | A high-level document that defines the overall
    approach for testing a system or product, including the testing methodologies,
    tools, and processes to be used |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 描述计划测试活动的范围、方法、资源和时间表的文档 | 定义系统或产品整体测试方法的高层文档，包括所使用的测试方法、工具和过程 |'
- en: '| Defines the specific test objectives and acceptance criteria | Determines
    the overall testing goals and objectives |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 定义具体的测试目标和验收标准 | 确定整体测试目标和目的 |'
- en: '| Provides detailed information on how testing will be conducted | Provides
    a general overview of the testing approach |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| 提供关于如何进行测试的详细信息 | 提供关于测试方法的一般概述 |'
- en: '| Outlines the roles and responsibilities of the testing team | Outlines the
    testing process and the roles and responsibilities of the testing team |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 描述测试团队的角色和责任 | 描述测试过程以及测试团队的角色和责任 |'
- en: '| Provides a detailed schedule of testing activities | Provides a high-level
    plan of testing activities |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| 提供详细的测试活动时间表 | 提供测试活动的高层计划 |'
- en: '| Includes a test schedule, test cases, scripts, and data | Includes testing
    methodology, testing tools, and testing process |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 包含测试计划、测试用例、脚本和数据 | 包含测试方法、测试工具和测试过程 |'
- en: '| Focuses on the testing process and the execution of test cases | Focuses
    on the overall testing approach and the testing goals and objectives |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| 侧重于测试过程和测试用例的执行 | 侧重于整体测试方法和测试目标 |'
- en: Table 5.1 – Test plan versus test strategy
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 表5.1 – 测试计划与测试策略的区别
- en: As we mentioned earlier in this chapter, test automation helps us increase our
    test coverage, and more tests can be run quickly and continuously in the development
    process, resulting in better test coverage. From this, we got the concept of continuous
    testing and shift-left testing. Let’s explore these concepts in more detail.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章之前提到的，测试自动化帮助我们增加测试覆盖率，更多的测试可以在开发过程中快速且持续地执行，从而获得更好的测试覆盖率。由此，我们得出了持续测试和左移测试的概念。接下来，让我们更详细地探讨这些概念。
- en: Continuous testing
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续测试
- en: Continuous testing encourages testing throughout the software development process
    rather than simply at the end. Through early and ongoing input on the software’s
    quality, continuous testing seeks to help teams find and address problems as quickly
    as feasible.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 持续测试鼓励在整个软件开发过程中进行测试，而不仅仅是在最后阶段。通过对软件质量的早期和持续反馈，持续测试旨在帮助团队尽早发现和解决问题，以尽可能快的速度进行改进。
- en: Modern software development methodologies, such as Agile and mobile DevOps,
    where frequent releases and updates are the norms, depend heavily on continuous
    testing. Teams can ensure that every release is high quality and satisfies the
    end user’s needs by incorporating testing into the development process.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现代软件开发方法论，如敏捷开发和移动DevOps，强调频繁发布和更新，这些方法严重依赖持续测试。团队可以通过将测试融入开发过程中，确保每个版本都具有高质量并满足最终用户的需求。
- en: 'The practice of continuous testing entails testing software while it is still
    being developed, as opposed to waiting until the end of the development cycle
    or releasing the mobile app, as we covered in [*Chapter 3*](B18113_03.xhtml#_idTextAnchor083),
    *Mobile DevOps Fundamentals*. A high-quality app is crucial for mobile applications,
    which are frequently used by many users and consume a lot of data:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 持续测试的做法是指在软件开发过程中进行测试，而不是等到开发周期结束或移动应用发布后才进行测试，正如我们在[*第3章*](B18113_03.xhtml#_idTextAnchor083)《移动
    DevOps 基础》中所讲的那样。高质量的应用程序对于移动应用至关重要，因为它们通常被许多用户使用，且消耗大量数据：
- en: "![Figure 5.2 – Continuous testing with \uFEFFCI](img/Figure_05.02_B18113.jpg)"
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – 与 CI 的持续测试](img/Figure_05.02_B18113.jpg)'
- en: Figure 5.2 – Continuous testing with CI
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – 与 CI 的持续测试
- en: As a result of the continuous testing process, shift-left testing is becoming
    more and more popular.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 由于持续测试过程的实施，左移测试变得越来越流行。
- en: You can measure your team’s maturity level and receive expert advice from domain
    experts with Katalon’s Continuous Testing Maturity Assessment ([https://katalon.com/continuous-testing-self-assessment](https://katalon.com/continuous-testing-self-assessment)).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 Katalon 的持续测试成熟度评估（[https://katalon.com/continuous-testing-self-assessment](https://katalon.com/continuous-testing-self-assessment)）来衡量你团队的成熟度，并获得领域专家的建议。
- en: Traditionally, testing is performed toward the end of the development process,
    once the code has been written. However, with the shift-left testing approach,
    testing is integrated into the development process from the very beginning.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，测试是在开发过程的末尾进行的，即代码编写完成后。然而，通过左移测试方法，测试从一开始就融入到开发过程中。
- en: Let’s explain the concept and advantages of shift-left testing.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解释一下左移测试的概念和优势。
- en: What is shift-left testing?
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是左移测试？
- en: Shift-left testing is a methodology for software testing that focuses on the
    early phases of the software development life cycle. In conventional software
    development, testing is usually carried out after the majority of the code has
    been produced, toward the conclusion of the development phase.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 左移测试是一种软件测试方法，侧重于软件开发生命周期的早期阶段。在传统的软件开发中，测试通常在大部分代码完成后进行，接近开发阶段的结束时。
- en: 'In contrast, shift-left testing entails incorporating testing tasks into the
    early stages of development, such as requirement collection, design, and implementation,
    as shown in the following figure:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，左移测试是指将测试任务融入到开发的早期阶段，如需求收集、设计和实现，以下图所示：
- en: "![Figure 5.3 – Shif\uFEFFt left in testing](img/Figure_05.03_B18113.jpg)"
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – 测试中的左移](img/Figure_05.03_B18113.jpg)'
- en: Figure 5.3 – Shift left in testing
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 测试中的左移
- en: 'There are several advantages to continuous testing as well as shift-left testing,
    such as the following:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 持续测试和左移测试有若干优点，诸如以下几点：
- en: '**Early detection of defects (test early and often)**: By testing early in
    the development process, defects can be identified and fixed before they propagate
    and become more expensive and difficult to resolve.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺陷的早期发现（及早测试，频繁测试）**：通过在开发过程的早期进行测试，可以在缺陷传播并变得更加昂贵和难以解决之前，及时发现并修复缺陷。'
- en: '**Improved collaboration and communication**: Shift-left testing encourages
    cooperation and communication between developers and testers, which can help identify
    and address potential issues early on and improve the overall quality of the software.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进的协作和沟通**：左移测试鼓励开发人员和测试人员之间的合作与沟通，有助于及早发现和解决潜在问题，从而提高软件的整体质量。'
- en: '**Faster delivery and deployment**: By shifting testing to the left, teams
    can deliver and deploy software faster. They can start testing earlier and avoid
    delays and bottlenecks at the end of the development process.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更快速的交付和部署**：通过将测试提前，团队可以更快地交付和部署软件。他们可以更早开始测试，避免在开发过程结束时出现延迟和瓶颈。'
- en: Organizations need to adopt a continuous testing approach to implement shift-left
    testing, where testing is integrated into the development process and performed
    throughout the life cycle. This may require a shift in culture and mindset and
    adopting the appropriate tools and technologies to support continuous testing.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 组织需要采用持续测试方法来实施左移测试，在这种方法中，测试被集成到开发过程中并贯穿整个生命周期。这可能需要文化和思维方式的转变，并采用合适的工具和技术来支持持续测试。
- en: Now, let’s take a closer look at some of the testing tools, frameworks, and
    cloud services available in the market today for mobile apps to help you decide
    which is most suitable for your company.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更详细地了解一下目前市场上可用的用于移动应用的测试工具、框架和云服务，帮助您决定最适合您公司的工具。
- en: Testing tools, frameworks, and services for mobile apps
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动应用的测试工具、框架和服务
- en: There are numerous testing tools, frameworks, and services available for developers
    and testers to assist them in testing their mobile apps rapidly.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员和测试人员可以使用众多的测试工具、框架和服务来帮助他们快速测试移动应用程序。
- en: But first, let’s begin by discussing the factors to consider when choosing a
    test automation framework or tool for mobile applications.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，让我们从选择适合移动应用的测试自动化框架或工具时需要考虑的因素开始讨论。
- en: 'When selecting a mobile test automation tool, there are several factors to
    consider:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择移动测试自动化工具时，有几个因素需要考虑：
- en: The tool should integrate with other tools in your test automation ecosystem,
    such as CI and test management tools, so that you can use it in CI/CD pipelines
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具应与您测试自动化生态系统中的其他工具（如CI和测试管理工具）集成，以便您可以在CI/CD流水线中使用它
- en: The tool should be compatible with the different mobile devices and operating
    systems you plan to test
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具应与您计划测试的不同移动设备和操作系统兼容
- en: The tool should be easy to set up, configure, and use
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具应易于设置、配置和使用
- en: The tool should provide clear, detailed reports on test results
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具应提供清晰、详细的测试结果报告
- en: The tool should have a robust support system and a large community of users
    who can provide help and guidance
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具应拥有强大的支持系统和庞大的用户社区，能够提供帮助和指导
- en: The tool should be able to handle large-scale testing as your mobile app and
    user base grow
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着移动应用和用户基础的增长，工具应能够处理大规模的测试
- en: It’s always a good idea to evaluate a few different tools and conduct a pilot
    test or a **proof of concept** project with a small set of tests before you decide
    that a tool or framework is suitable for your business, app, and team.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在决定某个工具或框架是否适合您的业务、应用和团队之前，评估几种不同的工具，并进行小范围的试点测试或**概念验证**项目，总是一个不错的选择。
- en: Mobile app UI and functionality testing
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动应用的UI和功能测试
- en: An excellent user experience requires testing the UI of a mobile application.
    Testers can identify and address issues with the application’s functionalities
    and UI by performing automated testing in the testing process, resulting in a
    positive customer experience.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 优秀的用户体验需要对移动应用的UI进行测试。测试人员通过在测试过程中执行自动化测试，可以识别并解决应用程序功能和UI的问题，从而带来良好的客户体验。
- en: 'Here are some native and cross-platform mobile testing frameworks to consider
    when testing an app’s functionality:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些本地和跨平台的移动测试框架，供您在测试应用功能时参考：
- en: 'iOS:'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS：
- en: XCUITest
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: XCUITest
- en: EarlGrey
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: EarlGrey
- en: 'Android:'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android：
- en: Espresso
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Espresso
- en: Jetpack Compose
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jetpack Compose
- en: 'Cross-platform:'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨平台：
- en: Appium
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Appium
- en: Detox
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Detox
- en: Flutter Driver and Flutter integration tests
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flutter Driver和Flutter集成测试
- en: Maestro
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maestro
- en: Let’s start with the native frameworks for iOS apps.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从iOS应用的本地框架开始。
- en: XCUITest
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XCUITest
- en: '**XCUITest** ([https://developer.apple.com/documentation/xctest](https://developer.apple.com/documentation/xctest))
    is a mobile testing framework created by Apple specifically for iOS, macOS, tvOS,
    and watchOS app testing. Designed to help developers and QA teams automate their
    testing processes, it supports Swift and Objective-C languages, offering flexibility
    in choosing the preferred language.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**XCUITest**（[https://developer.apple.com/documentation/xctest](https://developer.apple.com/documentation/xctest)）是由苹果公司专为iOS、macOS、tvOS和watchOS应用测试创建的移动测试框架。旨在帮助开发人员和质量保证团队自动化测试过程，它支持Swift和Objective-C语言，提供选择偏好语言的灵活性。'
- en: '*Built on Apple’s XCTest framework, XCUITest enables unit and UI testing within
    a single framework, streamlining* *the process.*'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '*基于苹果的XCTest框架，XCUITest使得单一框架内进行单元测试和UI测试成为可能，从而简化了* *过程。*'
- en: XCUITest advocates for accessibility by mandating proper **accessibility identifiers**
    in apps, ensuring universal usability.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: XCUITest通过要求应用程序中使用正确的**可访问性标识符**来倡导可访问性，确保普遍的可用性。
- en: Additionally, test engineers unfamiliar with Swift or Objective-C may also experience
    a steeper learning curve.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对于不熟悉Swift或Objective-C的测试工程师来说，可能会面临更陡峭的学习曲线。
- en: 'To use XCUITest, developers must import the XCTest framework and create a subclass
    of XCTestCase. They can then define test methods and interact with the app’s UI
    using XCUITest’s API:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 XCUITest，开发人员必须导入 XCTest 框架并创建 XCTestCase 的子类。然后，他们可以定义测试方法，并使用 XCUITest
    的 API 与应用的 UI 进行交互：
- en: '![Figure 5.4 – The XCUITest directory in the iOS app](img/Figure_05.04_B18113.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – iOS 应用中的 XCUITest 目录](img/Figure_05.04_B18113.jpg)'
- en: Figure 5.4 – The XCUITest directory in the iOS app
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – iOS 应用中的 XCUITest 目录
- en: The framework also offers additional capabilities, such as taking screenshots,
    performing gestures such as swipes and pinches, and various other element interactions.
    Further information can be found in Apple’s official documentation and API reference.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架还提供了额外的功能，例如截图、执行滑动和捏合等手势，以及其他各种元素交互。更多信息可以参考苹果官方文档和 API 参考。
- en: Example
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: 'Here is some simple XCUITest code to test the login functionality: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/XCUITest/simpleTest.swift](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/XCUITest/simpleTest.swift).'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一些简单的 XCUITest 代码，用于测试登录功能：[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/XCUITest/simpleTest.swift](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/XCUITest/simpleTest.swift)。
- en: You can also use the Page Object pattern with XCUITest, which involves creating
    separate classes for each screen in your app. These classes will contain the UI
    elements and actions specific to that screen. This promotes better code organization
    and maintainability.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在 XCUITest 中使用 Page Object 模式，该模式涉及为应用中的每个屏幕创建单独的类。这些类将包含特定屏幕的 UI 元素和操作。这样可以促进更好的代码组织和可维护性。
- en: 'For the given SwiftUI app, we can create two page objects: `LoginPage` and
    `WelcomePage`. Here are some examples of how to use the Page Object pattern with
    XCUITest:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 对于给定的 SwiftUI 应用，我们可以创建两个页面对象：`LoginPage` 和 `WelcomePage`。以下是如何在 XCUITest 中使用
    Page Object 模式的一些示例：
- en: Create the `LoginPage.swift` file ([https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/XCUITest/PageObjects/LoginPage.swift](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/XCUITest/PageObjects/LoginPage.swift))
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 `LoginPage.swift` 文件 ([https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/XCUITest/PageObjects/LoginPage.swift](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/XCUITest/PageObjects/LoginPage.swift))
- en: Create the `WelcomePage.swift` file ([https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/XCUITest/PageObjects/WelcomePage.swift](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/XCUITest/PageObjects/WelcomePage.swift))
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 `WelcomePage.swift` 文件 ([https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/XCUITest/PageObjects/WelcomePage.swift](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/XCUITest/PageObjects/WelcomePage.swift))
- en: Update your test class to use these page objects ([https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/XCUITest/TestClassWithPO.swift](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/XCUITest/TestClassWithPO.swift))
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新你的测试类以使用这些页面对象 ([https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/XCUITest/TestClassWithPO.swift](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/XCUITest/TestClassWithPO.swift))
- en: 'XCUITest integrates easily with most CI providers, such as Xcode Cloud, Bitrise,
    GitHub Actions, and Codemagic, but to be able to run UI tests, it must have macOS
    machines with target iOS SDK and iOS simulators. The scheme should also be shared:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: XCUITest 可以轻松集成到大多数 CI 提供商中，如 Xcode Cloud、Bitrise、GitHub Actions 和 Codemagic，但要能够运行
    UI 测试，必须拥有带目标 iOS SDK 和 iOS 模拟器的 macOS 机器。该方案还应该是共享的：
- en: '![Figure 5.5 – Shared scheme in an iOS app](img/Figure_05.05_B18113.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.5 – iOS 应用中的共享方案](img/Figure_05.05_B18113.jpg)'
- en: Figure 5.5 – Shared scheme in an iOS app
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – iOS 应用中的共享方案
- en: Then, you can run the tests on your preferred CI provider if you have the prerequisites.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果你具备前提条件，可以在你喜欢的 CI 提供商上运行这些测试。
- en: 'For example, on Codemagic, you can use the code at the following link in your
    `codemagic.yml` file: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/XCUITest/codemagic.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/XCUITest/codemagic.yml).'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 Codemagic 上，你可以在 `codemagic.yml` 文件中使用以下链接的代码：[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/XCUITest/codemagic.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/XCUITest/codemagic.yml)。
- en: 'On Bitrise, you can add an Xcode test for the iOS integration step to build
    the app for testing and running the UI tests:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在Bitrise上，您可以为iOS集成步骤添加Xcode测试，以构建应用进行测试并运行UI测试：
- en: "![Figure 5.6 – Bitri\uFEFFse iOS workflow](img/Figure_05.06_B18113.jpg)"
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图5.6 – Bitrise iOS工作流](img/Figure_05.06_B18113.jpg)'
- en: Figure 5.6 – Bitrise iOS workflow
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6 – Bitrise iOS工作流
- en: EarlGrey
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EarlGrey
- en: '**EarlGrey** ([https://github.com/google/EarlGrey](https://github.com/google/EarlGrey)),
    developed by Google, is a specialized iOS testing framework tailored to support
    native iOS app testing. It allows developers and QA teams to automate UI testing
    for their iOS apps using either Objective-C or Swift, according to their preference.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '**EarlGrey** ([https://github.com/google/EarlGrey](https://github.com/google/EarlGrey))，由谷歌开发，是一个专门的iOS测试框架，旨在支持原生iOS应用测试。它允许开发人员和QA团队根据需要使用Objective-C或Swift自动化他们的iOS应用UI测试。'
- en: EarlGrey ensures smooth and reliable test execution by automatically synchronizing
    with the application’s UI. It also offers a wide range of assertions and matchers,
    enabling developers to create thorough and expressive tests.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: EarlGrey通过自动与应用程序的UI同步，确保平稳且可靠的测试执行。它还提供了广泛的断言和匹配器，使开发人员能够创建彻底且富有表现力的测试。
- en: 'To create a UI test for the given SwiftUI app using EarlGrey, you’ll need to
    set up EarlGrey in your project. After that, you can write your test cases. Here’s
    a UI test for the given SwiftUI app using EarlGrey: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/EarlGrey/EarlGreyTest.swift](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/EarlGrey/EarlGreyTest.swift).'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用EarlGrey为给定的SwiftUI应用创建UI测试，您需要在项目中设置EarlGrey。之后，您可以编写测试用例。以下是使用EarlGrey为给定的SwiftUI应用编写的UI测试：[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/EarlGrey/EarlGreyTest.swift](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/iOS/EarlGrey/EarlGreyTest.swift)。
- en: The same page objects concept can be applied to EarlGrey as well as when you’re
    running the necessary tests in CI/CD workflows.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的页面对象概念也适用于EarlGrey，就像在CI/CD工作流中运行必要的测试时一样。
- en: Now, let’s discuss the native testing frameworks for Android apps.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们讨论一下适用于Android应用的原生测试框架。
- en: Espresso
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Espresso
- en: '**Espresso** ([https://developer.android.com/training/testing/espresso](https://developer.android.com/training/testing/espresso)),
    created by Google, is a dedicated Android testing framework designed to support
    native Android app testing. It allows developers and QA teams to automate UI testing
    for their Android apps using either Java or Kotlin, according to their preferences.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '**Espresso** ([https://developer.android.com/training/testing/espresso](https://developer.android.com/training/testing/espresso))，由谷歌创建，是一个专门的Android测试框架，旨在支持原生Android应用测试。它允许开发人员和QA团队根据需要使用Java或Kotlin自动化他们的Android应用UI测试。'
- en: It ensures smooth and reliable test execution by automatically synchronizing
    with the application’s UI, which results in faster and more accurate testing.
    Espresso also provides various assertions and matchers, allowing developers to
    create comprehensive and expressive tests.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过自动与应用程序的UI同步，确保平稳且可靠的测试执行，从而实现更快和更准确的测试。Espresso还提供了各种断言和匹配器，允许开发人员创建全面且富有表现力的测试。
- en: Easily integrated with AndroidJUnit4, Espresso allows developers to perform
    both unit and UI testing within a single framework. As an officially supported
    Google product, developers can rely on up-to-date documentation, resources, and
    compatibility with new Android versions. Additionally, those unfamiliar with Java
    and Kotlin may experience a steeper learning curve when starting.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: Espresso轻松集成AndroidJUnit4，允许开发人员在单一框架内执行单元测试和UI测试。作为谷歌官方支持的产品，开发人员可以依赖最新的文档、资源以及与新Android版本的兼容性。此外，对于不熟悉Java和Kotlin的开发者来说，入门时可能会面临较陡的学习曲线。
- en: Example
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: 'Here is some simple Espresso code to test the login functionality: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Android/LoginTest.kt](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Android/LoginTest.kt).'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些简单的Espresso代码，用于测试登录功能：[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Android/LoginTest.kt](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Android/LoginTest.kt)。
- en: You can use the Page Object pattern to make your Espresso tests more maintainable
    and easier to read ([https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Android/PageObjects/LoginPage.kt](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Android/PageObjects/LoginPage.kt)).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用页面对象模式使您的Espresso测试更易于维护和阅读（[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Android/PageObjects/LoginPage.kt](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Android/PageObjects/LoginPage.kt)）。
- en: 'Here’s an example of how you can implement the Page Object pattern in your
    Espresso test for a login screen using Kotlin: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Android/LoginScreenTest.kt](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Android/LoginScreenTest.kt).'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例，展示了如何在Kotlin中为登录屏幕的Espresso测试中实现页面对象模式：[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Android/LoginScreenTest.kt](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Android/LoginScreenTest.kt)。
- en: Additionally, you can use **UI Automator** ([https://developer.android.com/training/testing/other-components/ui-automator](https://developer.android.com/training/testing/other-components/ui-automator))
    with Espresso for cross-app functional UI testing across the system and installed
    apps.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以与Espresso一起使用**UI Automator**（[https://developer.android.com/training/testing/other-components/ui-automator](https://developer.android.com/training/testing/other-components/ui-automator)），进行跨系统和已安装应用的功能UI测试。
- en: Espresso integrates easily with most CI providers, such as Bitrise, GitHub Actions,
    and Codemagic, but to be able to run the UI tests, you must have Ubuntu or Windows
    machines with Gradle installed and the target Android SDK with Android Emulator.
    Then, you need to run the Gradle command `./gradlew connectedDebugAndroidTest`.
    This command combines the building and installation of the main app and the test
    app in a single step using the connectedDebugAndroidTest Gradle task. This task
    builds both the main app and its associated Android test app, installs them on
    the connected device, and then runs the tests defined in the test app.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Espresso与大多数CI提供商（如Bitrise、GitHub Actions和Codemagic）轻松集成，但要能够运行UI测试，您必须拥有安装有Gradle和目标Android
    SDK的Ubuntu或Windows机器，并具有Android模拟器。然后，您需要运行Gradle命令`./gradlew connectedDebugAndroidTest`。此命令使用connectedDebugAndroidTest
    Gradle任务在单个步骤中构建和安装主应用和测试应用。此任务构建主应用及其相关的Android测试应用，将它们安装在连接的设备上，然后运行测试应用中定义的测试。
- en: Once you’ve done this, you can run the tests on your preferred CI provider if
    you have the prerequisites.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成这些步骤，如果您符合先决条件，可以在首选的CI提供商上运行测试。
- en: 'For example, on Codemagic, you can use the code at the following link in your
    `codemagic.yml` file: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Android/codemagic.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Android/codemagic.yml).'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在Codemagic上，您可以在`codemagic.yml`文件中使用以下链接中的代码：[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Android/codemagic.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Android/codemagic.yml)。
- en: 'On Bitrise, you can add the **Android Build for UI Testing** and **Virtual
    Device Testing for Android** integration steps to build the app for testing and
    run the UI tests on Firebase Test Lab, which is integrated internally with this
    Bitrise step:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在Bitrise上，您可以添加**Android Build for UI Testing**和**Virtual Device Testing for
    Android**集成步骤，以构建应用程序进行测试，并在Firebase Test Lab上运行UI测试，该步骤已与Bitrise集成：
- en: '![Figure 5.7 – Bitrise Android workflow](img/Figure_05.07_B18113.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![图5.7 - Bitrise Android工作流程](img/Figure_05.07_B18113.jpg)'
- en: Figure 5.7 – Bitrise Android workflow
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7 - Bitrise Android工作流程
- en: 'Finally, with GitHub Actions, you can use the following YAML file: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/.github/android.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/.github/android.yml).'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用GitHub Actions，您可以使用以下YAML文件：[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/.github/android.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/.github/android.yml)。
- en: Open source project based on Espresso
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于Espresso的开源项目
- en: There are many open source UI testing libraries built on top of Espresso for
    Android applications to simplify and streamline the process of writing UI tests,
    enabling developers to create robust and maintainable tests with ease. These include
    Kaspresso ([https://github.com/KasperskyLab/Kaspresso](https://github.com/KasperskyLab/Kaspresso)),
    Barista ([https://github.com/AdevintaSpain/Barista](https://github.com/AdevintaSpain/Barista)),
    and Kakao ([https://github.com/KakaoCup/Kakao](https://github.com/KakaoCup/Kakao)).
    Their fluent interfaces, advanced test interceptors, automatic screenshots, and
    enhanced logging capabilities make them a strong choice for Android developers
    looking to improve their UI testing experience.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多开源 UI 测试库是基于 Espresso 为 Android 应用程序构建的，它们简化并优化了编写 UI 测试的过程，使开发者能够轻松创建强大且易于维护的测试。包括
    Kaspresso（[https://github.com/KasperskyLab/Kaspresso](https://github.com/KasperskyLab/Kaspresso)）、Barista（[https://github.com/AdevintaSpain/Barista](https://github.com/AdevintaSpain/Barista)）和
    Kakao（[https://github.com/KakaoCup/Kakao](https://github.com/KakaoCup/Kakao)）。它们流畅的接口、高级测试拦截器、自动截图和增强的日志功能，使它们成为
    Android 开发者提升 UI 测试体验的强大选择。
- en: Jetpack Compose
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jetpack Compose
- en: '**Jetpack Compose** ([https://developer.android.com/jetpack/compose](https://developer.android.com/jetpack/compose))
    is Google’s modern UI toolkit for Android applications. The Jetpack Compose Testing
    library ([https://developer.android.com/jetpack/compose/testing](https://developer.android.com/jetpack/compose/testing))
    aims to simplify the process of writing and maintaining UI tests for applications
    built using Jetpack Compose.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jetpack Compose**（[https://developer.android.com/jetpack/compose](https://developer.android.com/jetpack/compose)）是
    Google 为 Android 应用程序提供的现代 UI 工具包。Jetpack Compose 测试库（[https://developer.android.com/jetpack/compose/testing](https://developer.android.com/jetpack/compose/testing)）旨在简化为使用
    Jetpack Compose 构建的应用程序编写和维护 UI 测试的过程。'
- en: Jetpack Compose Testing provides a Compose Test Rule, which sets up the necessary
    environment for testing Compose UIs and makes it easy to create and manipulate
    composable UIs within tests.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: Jetpack Compose 测试提供了 Compose 测试规则，它设置了测试 Compose UI 所需的环境，并使在测试中创建和操作可组合的 UI
    变得容易。
- en: Jetpack Compose Testing supports screenshot testing, allowing developers to
    compare the visual appearance of UI elements against a reference image during
    test execution.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: Jetpack Compose 测试支持截图测试，允许开发者在测试执行期间将 UI 元素的视觉外观与参考图像进行比较。
- en: It is possible to use Espresso as a test framework since Jetpack Compose is
    an instrumentation test, but Compose already includes testing APIs to find, verify,
    and perform user actions on elements. Time manipulation and other advanced features
    are included.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Jetpack Compose 是一个工具化测试，因此可以使用 Espresso 作为测试框架，但 Compose 已经包含了测试 API，用于查找、验证和对元素执行用户操作。时间操作和其他高级功能也包含其中。
- en: In general, if you have a particular type of UI element or component, you should
    have specific APIs or methods to test them in their various scenarios.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，如果你有特定类型的 UI 元素或组件，你应该有特定的 API 或方法来测试它们在不同场景中的表现。
- en: To learn more about Compose testing, there is a cheat sheet ([https://developer.android.com/jetpack/compose/testing-cheatsheet](https://developer.android.com/jetpack/compose/testing-cheatsheet))
    that acts as a quick reference to some of the most useful Compose test APIs.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多 Compose 测试的信息，可以查看备忘单（[https://developer.android.com/jetpack/compose/testing-cheatsheet](https://developer.android.com/jetpack/compose/testing-cheatsheet)），该备忘单作为一些最常用
    Compose 测试 API 的快速参考。
- en: The same Page Object concept can be applied to Jetpack Compose and running the
    tests in the necessary CI/CD workflows ([https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Android/JetpackCompose/CounterTest.kt](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Android/JetpackCompose/CounterTest.kt)).
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的页面对象概念可以应用于 Jetpack Compose，并在必要的 CI/CD 工作流中运行测试（[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Android/JetpackCompose/CounterTest.kt](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Android/JetpackCompose/CounterTest.kt)）。
- en: 'Here is an example from Reddit about their E2E UI automation framework for
    Android apps and how they use page objects and Fluent design patterns: [https://shorturl.at/ajH78](https://shorturl.at/ajH78).'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自 Reddit 的一个示例，展示了他们的 Android 应用程序端到端 UI 自动化框架，以及他们如何使用页面对象和 Fluent 设计模式：[https://shorturl.at/ajH78](https://shorturl.at/ajH78)。
- en: Appium
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Appium
- en: '**Appium** ([https://appium.io](https://appium.io)) is an open source, cross-platform
    mobile testing framework that enables developers and QA teams to automate testing
    for their mobile applications on Android, iOS, and Windows platforms.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '**Appium** ([https://appium.io](https://appium.io)) 是一个开源的跨平台移动测试框架，使开发人员和
    QA 团队能够在 Android、iOS 和 Windows 平台上自动化测试他们的移动应用。'
- en: Appium supports multiple programming languages, including Java, Ruby, Python,
    C#, and JavaScript, allowing developers to choose their preferred language.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: Appium 支持多种编程语言，包括 Java、Ruby、Python、C# 和 JavaScript，允许开发人员选择他们喜欢的语言。
- en: Appium integrates with popular testing frameworks such as JUnit and TestNG,
    allowing developers to utilize their preferred testing tools.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: Appium 与流行的测试框架如 JUnit 和 TestNG 集成，允许开发人员使用他们喜欢的测试工具。
- en: Appium can easily be integrated with CI tools, such as Bitrise, GitHub Actions,
    and CircleCI, streamlining the testing process within the development workflow.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: Appium 可轻松集成于 Bitrise、GitHub Actions 和 CircleCI 等 CI 工具中，简化开发工作流中的测试过程。
- en: Appium’s large, active community offers extensive documentation, resources,
    and regular updates. But usually, the initial setup and configuration of Appium
    can be time-consuming and requires significant effort to ensure proper functioning
    ([https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Appium/AppiumDemo.java](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Appium/AppiumDemo.java)).
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: Appium 的大型活跃社区提供广泛的文档、资源和定期更新。但通常，Appium 的初始设置和配置可能会耗费大量时间，并需要大量努力来确保其正常运行 ([https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Appium/AppiumDemo.java](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Appium/AppiumDemo.java))。
- en: You can use also the Page Object pattern to make your Appium tests more maintainable
    and easier to read.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用页面对象模式使您的 Appium 测试更易于维护和阅读。
- en: 'To run Appium tests in your CI workflow, you need to install and run the Appium
    Server, along with Android Emulator or the iOS simulator. You can use the following
    shell script to do this: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Appium/emulator.sh](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Appium/emulator.sh).'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 CI 工作流中运行 Appium 测试，您需要安装并运行 Appium 服务器，以及 Android 模拟器或 iOS 模拟器。您可以使用以下 Shell
    脚本来完成这些操作：[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Appium/emulator.sh](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Appium/emulator.sh)。
- en: Then, you can run the tests using the command line with Gradle or Maven.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用 Gradle 或 Maven 的命令行来运行测试。
- en: Detox
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Detox
- en: '**Detox** ([https://github.com/wix/Detox](https://github.com/wix/Detox)) is
    an E2E mobile testing framework designed specifically for React Native applications.
    It enables developers and QA teams to automate testing for their React Native
    apps on both Android and iOS platforms.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '**Detox** ([https://github.com/wix/Detox](https://github.com/wix/Detox)) 是专为
    React Native 应用设计的端到端移动测试框架。它使开发人员和 QA 团队能够在 Android 和 iOS 平台上自动化测试他们的 React Native
    应用。'
- en: Detox operates as a gray box testing framework, balancing the speed and reliability
    of white box testing and the realism of black box testing. Detox integrates seamlessly
    with Jest, a popular JavaScript testing framework, allowing developers to utilize
    their preferred testing tools and methodologies.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: Detox 作为灰盒测试框架运作，平衡了白盒测试的速度和可靠性以及黑盒测试的真实性。Detox 与 Jest 完美集成，这是一个流行的 JavaScript
    测试框架，允许开发人员使用他们喜欢的测试工具和方法。
- en: Detox automatically synchronizes test execution with the application’s UI, ensuring
    that tests run smoothly and reliably.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: Detox 自动将测试执行与应用程序的 UI 同步，确保测试顺利可靠运行。
- en: Detox can easily be integrated with CI tools, such as Jenkins, Travis CI, and
    CircleCI, streamlining the testing process within the development workflow.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: Detox 可轻松集成于 Jenkins、Travis CI 和 CircleCI 等 CI 工具中，简化开发工作流中的测试过程。
- en: Detox has an active community of developers and users who provide resources,
    support, and regular updates.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Detox 拥有一个活跃的开发者和用户社区，提供资源、支持和定期更新。
- en: Example
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: 'Here’s an example of a Detox test for a simple React Native login app: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Detox/LoginTest.js](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Detox/LoginTest.js).'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的 React Native 登录应用的 Detox 测试示例：[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Detox/LoginTest.js](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Detox/LoginTest.js)。
- en: 'Detox also requires you to have a configuration JSON file, such as the following:
    [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Detox/config.json](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Detox/config.json).'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: Detox 还要求你拥有一个配置 JSON 文件，类似于以下内容：[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Detox/config.json](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Detox/config.json)。
- en: 'To run Detox tests in a CI/CD workflow or a pipeline such as GitHub Actions,
    you need Android Emulator or the iOS simulator. Also, install Node.js and NPM
    and build the app using the preceding configuration file. You can use the following
    YAML file for this: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Detox/.github/detox.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Detox/.github/detox.yml).'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 CI/CD 工作流或像 GitHub Actions 这样的管道中运行 Detox 测试，你需要 Android 模拟器或 iOS 模拟器。此外，还需要安装
    Node.js 和 NPM，并使用上述配置文件构建应用。你可以使用以下 YAML 文件：[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Detox/.github/detox.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Detox/.github/detox.yml)。
- en: Similar to the approaches for Bitrise, Codemagic, and the rest of the CI providers
    we have mentioned, you need to use a script step to install the prerequisites
    and then run your Detox tests.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于我们提到的 Bitrise、Codemagic 和其他 CI 提供商的方式，你需要使用脚本步骤来安装必要的依赖项，然后运行 Detox 测试。
- en: Flutter Driver
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Flutter Driver
- en: '**Flutter Driver** ([https://api.flutter.dev/flutter/flutter_driver_extension/flutter_driver_extension-library.html](https://api.flutter.dev/flutter/flutter_driver_extension/flutter_driver_extension-library.html))
    is a testing framework for Flutter applications, enabling developers and QA teams
    to automate integration and UI testing for their Flutter apps.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '**Flutter Driver** ([https://api.flutter.dev/flutter/flutter_driver_extension/flutter_driver_extension-library.html](https://api.flutter.dev/flutter/flutter_driver_extension/flutter_driver_extension-library.html))
    是一个用于 Flutter 应用程序的测试框架，使开发者和 QA 团队能够自动化 Flutter 应用的集成测试和 UI 测试。'
- en: It supports testing on Android and iOS platforms, allowing developers to test
    their Flutter apps on various devices and operating systems.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 它支持在 Android 和 iOS 平台上进行测试，允许开发者在各种设备和操作系统上测试他们的 Flutter 应用。
- en: Flutter Driver is designed for integration testing, enabling developers to test
    how different components of their application work together.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: Flutter Driver 设计用于集成测试，使开发者能够测试他们应用的不同组件如何协同工作。
- en: It uses Dart, the same programming language for developing Flutter applications,
    making it easier for developers to write tests in a familiar language.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用 Dart 语言，这是开发 Flutter 应用程序所使用的编程语言，使开发者更容易用熟悉的语言编写测试。
- en: Flutter Driver automatically synchronizes test execution with the application’s
    UI, ensuring that tests run smoothly and reliably – Flutter Driver’s automatic
    synchronization with the application’s UI results in stable and reliable test
    execution.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: Flutter Driver 会自动同步测试执行和应用的 UI，确保测试顺利且可靠地运行——Flutter Driver 与应用 UI 的自动同步确保了稳定和可靠的测试执行。
- en: In addition, testers unfamiliar with Dart or the Flutter framework may face
    a steeper learning curve when they start using Flutter Driver.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对于不熟悉 Dart 或 Flutter 框架的测试人员，在开始使用 Flutter Driver 时可能会面临较陡的学习曲线。
- en: Example
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: 'Here’s an example of a Flutter Driver test for a simple Flutter login app:
    https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Flutter/Flutter%20Driver/LoginTest.dart.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 Flutter Driver 测试的示例，用于一个简单的 Flutter 登录应用： https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Flutter/Flutter%20Driver/LoginTest.dart。
- en: 'There is also an integration test (https://docs.flutter.dev/testing#integration-tests)
    that can be used to test the Flutter app. Here’s an example for a simple Flutter
    login app: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Flutter/Integration%20Test/LoginTest.dart](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Flutter/Integration%20Test/LoginTest.dart).'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 也有一个集成测试（https://docs.flutter.dev/testing#integration-tests），可以用来测试 Flutter
    应用。以下是一个简单的 Flutter 登录应用示例：[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Flutter/Integration%20Test/LoginTest.dart](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Flutter/Integration%20Test/LoginTest.dart)。
- en: 'To run Flutter tests in a CI/CD workflow or pipeline such as GitHub Actions,
    you need Android Emulator or iOS simulator and the Dart SDK. Yowu can use the
    following YAML file to aid with this: [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Flutter/.github/FlutterIntegration.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Flutter/.github/FlutterIntegration.yml).'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 CI/CD 工作流或管道（如 GitHub Actions）中运行 Flutter 测试，你需要 Android 仿真器或 iOS 模拟器以及 Dart
    SDK。你可以使用以下 YAML 文件来帮助实现这一点：[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Flutter/.github/FlutterIntegration.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Flutter/.github/FlutterIntegration.yml)。
- en: 'Here’s an example of a YAML file that runs a Flutter Driver test on both Android
    Emulator and the iOS simulator via GitHub Actions: [https://github.com/PacwktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Flutter/.github/FlutterDriver.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Flutter/.github/FlutterDriver.yml).'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 YAML 文件示例，它通过 GitHub Actions 在 Android 仿真器和 iOS 模拟器上运行 Flutter Driver 测试：[https://github.com/PacwktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Flutter/.github/FlutterDriver.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Flutter/.github/FlutterDriver.yml)。
- en: 'On Bitrise, there are integration steps for building and testing Flutter apps:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Bitrise 上，有用于构建和测试 Flutter 应用的集成步骤：
- en: '![Figure 5.8 – Bitrise Flutter workflow](img/Figure_05.08_B18113.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8 – Bitrise Flutter 工作流](img/Figure_05.08_B18113.jpg)'
- en: Figure 5.8 – Bitrise Flutter workflow
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – Bitrise Flutter 工作流
- en: 'Similarly, on Codemagic, there are steps that support Flutter Driver and Flutter
    tests:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在 Codemagic 上，也有支持 Flutter Driver 和 Flutter 测试的步骤：
- en: "![Figure\uFEFF 5.9 – Codemagic Flutter workflow](img/Figure_05.09_B18113.jpg)"
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.9 – Codemagic Flutter 工作流](img/Figure_05.09_B18113.jpg)'
- en: Figure 5.9 – Codemagic Flutter workflow
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – Codemagic Flutter 工作流
- en: Maestro
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Maestro
- en: '**Maestro** ([https://maestro.mobile.dev/](https://maestro.mobile.dev/)) is
    the simplest and most effective open source mobile UI testing framework and is
    developed by mobile.dev. It allows you to easily define and test your flows (the
    user journey in the app – in other words, the E2E scenarios).'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '**Maestro** ([https://maestro.mobile.dev/](https://maestro.mobile.dev/)) 是最简单且最有效的开源移动
    UI 测试框架，由 mobile.dev 开发。它允许你轻松定义和测试你的流程（即应用中的用户旅程——换句话说，就是 E2E 场景）。'
- en: Maestro is YAML-based, meaning you define the test flows inside a `flow.yml`
    file ([https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Maestro/flow.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Maestro/flow.yml))
    and run them on your devices.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: Maestro 基于 YAML，这意味着你需要在 `flow.yml` 文件中定义测试流程（[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Maestro/flow.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Maestro/flow.yml)），然后在设备上运行它们。
- en: 'Maestro has different features, such as the following:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: Maestro 具有多种功能，例如：
- en: With Maestro, flakiness is tolerated. Apps and devices are built to be unstable,
    and UI elements are designed to counteract this.
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Maestro，可以容忍不稳定性。应用和设备设计时考虑到不稳定性，UI 元素也专门设计来应对这一点。
- en: It is not necessary to call `sleep()` repeatedly in your tests. Maestro waits
    for the content to load automatically (but not too long) when this process takes
    a long time (for example, over a network).
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在测试中无需反复调用 `sleep()`。当某个过程（例如通过网络）需要较长时间时，Maestro 会自动等待内容加载（但不会等待太久）。
- en: Maestro automatically reruns your tests when your test files change, so there’s
    no need to compile anything.
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当测试文件发生变化时，Maestro 会自动重新运行测试，因此无需重新编译任何内容。
- en: Maestro supports all of the major mobile development platforms, including Android,
    iOS, Flutter, React Native, and Web Views.
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maestro 支持所有主要的移动开发平台，包括 Android、iOS、Flutter、React Native 和 Web Views。
- en: Additionally, there is Maestro Studio, Maestro’s personal assistant that will
    assist you in writing your Maestro flows.
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，还有 Maestro Studio，Maestro 的个人助手，它将帮助你编写 Maestro 流程。
- en: You can easily test your flows on Maestro Cloud since they run in the cloud,
    so you don’t have to configure any simulators or emulators.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以轻松在 Maestro Cloud 上测试你的流程，因为它们在云端运行，这样你就不需要配置任何模拟器或仿真器。
- en: Flows can also be run via the Maestro CLI on Android devices/emulators that
    support ADB connections and iOS devices/simulators that support Facebook’s IDB.
    You can manually orchestrate your flow execution against any provider that supports
    these protocols. You can run your flows as you would locally with the Maestro
    CLI.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 流程也可以通过 Maestro CLI 在支持 ADB 连接的 Android 设备/仿真器和支持 Facebook 的 IDB 的 iOS 设备/模拟器上运行。你可以手动协调你的流程执行，针对任何支持这些协议的提供者进行操作。你可以像在本地一样使用
    Maestro CLI 运行你的流程。
- en: 'Bitrise has an integration step to help you run your Maestro tests on the cloud.
    If you are using another CI provider, you can use the Maestro CLI:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: Bitrise 提供了一个集成步骤，帮助你在云端运行 Maestro 测试。如果你使用其他 CI 提供商，可以使用 Maestro CLI：
- en: '![Figure 5.10 – Bitrise and Maestro workflow](img/Figure_05.10_B18113.jpg)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.10 – Bitrise 和 Maestro 工作流](img/Figure_05.10_B18113.jpg)'
- en: Figure 5.10 – Bitrise and Maestro workflow
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10 – Bitrise 和 Maestro 工作流
- en: 'By exploring the testing frameworks that we have on the market today and how
    to run them in a CI workflow, we have noticed that we have a new challenge: running
    tests on different devices with different operating system versions simultaneously.
    Let’s talk about how to run our tests on cloud devices using different services
    to maximize coverage.'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 通过探索当前市场上可用的测试框架以及如何在 CI 工作流中运行它们，我们发现了一个新的挑战：在不同的设备和操作系统版本上同时运行测试。让我们来谈谈如何使用不同的服务在云设备上运行测试，以最大化覆盖面。
- en: Testing on cloud devices
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在云设备上测试
- en: Developers and QA teams can test their applications on a wide range of devices
    and platforms without using physical devices via cloud device testing, a modern
    approach to mobile application testing.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者和 QA 团队可以通过云设备测试在广泛的设备和平台上测试他们的应用，而无需使用物理设备，这是一种现代的移动应用测试方法。
- en: 'A cloud-based infrastructure hosts several emulators or real devices remotely.
    Here is a list of the most popular cloud device testing for mobile apps:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基于云的基础设施远程托管多个模拟器或真实设备。以下是目前最受欢迎的移动应用云设备测试服务：
- en: Sauce Labs
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sauce Labs
- en: BrowserStack
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BrowserStack
- en: AWS Device Farm
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Device Farm
- en: Firebase Test Lab
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase Test Lab
- en: LambdaTest
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LambdaTest
- en: Let’s take a look at these in greater detail.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地了解一下这些内容。
- en: Sauce Labs
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Sauce Labs
- en: '**Sauce Labs** ([https://saucelabs.com/products/mobile-testing](https://saucelabs.com/products/mobile-testing))
    streamlines the testing process by removing the need to buy and manage a large
    inventory of devices, enabling users to test their apps on actual devices in the
    cloud. Thanks to the platform’s comprehensive device coverage, users can identify
    problems before they are published by testing apps on the most recent devices.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sauce Labs** ([https://saucelabs.com/products/mobile-testing](https://saucelabs.com/products/mobile-testing))
    通过消除购买和管理大量设备库存的需求，简化了测试过程，使用户能够在云端的真实设备上测试应用。得益于该平台的全面设备覆盖，用户可以通过在最新设备上测试应用，提前发现问题。'
- en: Sauce Labs supports Android and iOS platforms, enabling developers to test their
    apps across multiple devices and operating systems. It offers access to a vast
    range of real devices to test mobile apps, ensuring accurate results and minimizing
    the chances of encountering issues on real-world devices. In addition to real
    devices, Sauce Labs offers emulators and simulators for faster and more cost-effective
    testing.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: Sauce Labs 支持 Android 和 iOS 平台，使开发者能够在多个设备和操作系统上测试他们的应用。它提供访问大量真实设备的权限，确保测试结果准确，并减少在真实设备上遇到问题的可能性。除了真实设备，Sauce
    Labs 还提供模拟器和仿真器，用于更快速、更具成本效益的测试。
- en: This feature allows multiple tests to be executed simultaneously, significantly
    reducing the overall testing time.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能允许同时执行多个测试，显著减少整体测试时间。
- en: Sauce Labs integrates seamlessly with popular CI tools such as Bitrise, GitHub
    Actions, and Codemagic, allowing for automated testing in the development workflow.
    It supports popular test automation frameworks such as Appium, Espresso, and XCUITest,
    providing flexibility in choosing the proper framework for a project.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: Sauce Labs 与流行的 CI 工具（如 Bitrise、GitHub Actions 和 Codemagic）无缝集成，允许在开发工作流中进行自动化测试。它支持流行的测试自动化框架，如
    Appium、Espresso 和 XCUITest，为项目选择合适的框架提供灵活性。
- en: Additionally, Sauce Labs provides detailed test reports, logs, and video recordings
    of test sessions, facilitating efficient debugging and issue resolution.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Sauce Labs 提供了详细的测试报告、日志和测试会话的视频记录，便于高效的调试和问题解决。
- en: You can use the `saucectl` CLI with any CI provider to configure your account
    and run the tests from the relevant `config.yml` file ([https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/SauceLabs/config.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/SauceLabs/config.yml)).
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `saucectl` CLI 配合任何 CI 提供商来配置你的账户，并从相关的 `config.yml` 文件运行测试 ([https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/SauceLabs/config.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/SauceLabs/config.yml))。
- en: You can change the configuration to increase concurrency as you need to run
    the tests in parallel on different devices.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以更改配置，以增加并发性，从而在不同设备上并行运行测试。
- en: BrowserStack
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BrowserStack
- en: '**BrowserStack** ([https://www.browserstack.com/app-automate](https://www.browserstack.com/app-automate))
    is a cloud-based testing platform that enables developers to test their mobile
    applications across various devices and operating systems. With a wide range of
    features and a user-friendly interface, BrowserStack aims to provide a comprehensive
    testing solution for developers and QA teams.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '**BrowserStack** ([https://www.browserstack.com/app-automate](https://www.browserstack.com/app-automate))
    是一个基于云的测试平台，允许开发者在各种设备和操作系统上测试他们的移动应用。通过广泛的功能和用户友好的界面，BrowserStack 旨在为开发者和 QA
    团队提供全面的测试解决方案。'
- en: BrowserStack provides access to an extensive collection of real devices for
    the accurate testing of mobile apps, ensuring that they perform well on actual
    devices consumers use. In addition to real devices, BrowserStack offers emulators
    and simulators for quick and cost-effective testing.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: BrowserStack 提供访问大量真实设备的权限，用于准确测试移动应用，确保它们在消费者使用的真实设备上表现良好。除了真实设备外，BrowserStack
    还提供模拟器和仿真器，便于快速且具有成本效益的测试。
- en: This feature enables multiple tests to be executed simultaneously, reducing
    overall testing time and increasing productivity.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能支持同时执行多个测试，减少整体测试时间，提高工作效率。
- en: BrowserStack integrates with widespread CI tools such as Jenkins, TeamCity,
    Bamboo, CircleCI, Travis CI, Azure, Bitrise, and GitLab CI/CD, streamlining the
    testing process within the development workflow.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: BrowserStack 与广泛的 CI 工具集成，如 Jenkins、TeamCity、Bamboo、CircleCI、Travis CI、Azure、Bitrise
    和 GitLab CI/CD，简化了开发工作流程中的测试过程。
- en: 'For example, Bitrise has integration steps for BrowserStack to upload and run
    Espresso and XCUITest tests:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Bitrise 有与 BrowserStack 集成的步骤，可以上传并运行 Espresso 和 XCUITest 测试：
- en: '![Figure 5.11 – Bitrise and BrowserStack integration steps](img/Figure_05.11_B18113.jpg)'
  id: totrans-337
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.11 – Bitrise 和 BrowserStack 集成步骤](img/Figure_05.11_B18113.jpg)'
- en: Figure 5.11 – Bitrise and BrowserStack integration steps
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.11 – Bitrise 和 BrowserStack 集成步骤
- en: '![Figure 5.12 – Bitrise and BrowserStack workflow](img/Figure_05.12_B18113.jpg)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.12 – Bitrise 和 BrowserStack 工作流程](img/Figure_05.12_B18113.jpg)'
- en: Figure 5.12 – Bitrise and BrowserStack workflow
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.12 – Bitrise 和 BrowserStack 工作流程
- en: 'If you have another CI provider or server, you can use the `curl` command to
    upload your tests to BrowserStack from the command line:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有其他 CI 提供商或服务器，可以使用 `curl` 命令从命令行将测试上传到 BrowserStack：
- en: '[PRE1]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: BrowserStack supports various test automation frameworks, including Appium,
    Espresso, and XCUITest, providing flexibility in selecting the most suitable framework
    for a project.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: BrowserStack 支持多种测试自动化框架，包括 Appium、Espresso 和 XCUITest，为项目选择最合适的框架提供了灵活性。
- en: You can test native and hybrid mobile apps with BrowserStack App Automate using
    the Appium automation framework on a wide range of real Android and iOS devices.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 BrowserStack App Automate 和 Appium 自动化框架，在各种真实的 Android 和 iOS 设备上测试本地和混合型移动应用。
- en: LambdaTest
  id: totrans-345
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LambdaTest
- en: '**LambdaTest** ([https://www.lambdatest.com/mobile-app-testing](https://www.lambdatest.com/mobile-app-testing))
    is a cloud-based testing platform that provides developers and QA teams with access
    to a wide range of devices and operating systems for web and mobile app testing.'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '**LambdaTest** ([https://www.lambdatest.com/mobile-app-testing](https://www.lambdatest.com/mobile-app-testing))
    是一个基于云的测试平台，提供给开发者和 QA 团队访问多种设备和操作系统，用于 Web 和移动应用测试。'
- en: LambdaTest supports Android and iOS mobile app testing, allowing developers
    to test their applications on various devices and operating systems.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: LambdaTest 支持 Android 和 iOS 移动应用测试，允许开发者在各种设备和操作系统上测试他们的应用。
- en: LambdaTest also offers real mobile device testing, ensuring accurate results
    and a more realistic testing environment.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: LambdaTest 还提供真实的移动设备测试，确保测试结果的准确性，并提供更真实的测试环境。
- en: LambdaTest integrates with many popular testing frameworks, such as Appium,
    XCUITest, and Espresso, making it easy to incorporate into existing test suites.
    It also enables parallel testing, allowing multiple tests to run simultaneously
    and speeding up the overall testing process.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: LambdaTest 与许多流行的测试框架集成，如 Appium、XCUITest 和 Espresso，使其可以轻松地集成到现有的测试套件中。它还支持并行测试，可以同时运行多个测试，加速整体测试过程。
- en: LambdaTest’s cloud-based infrastructure provides scalability and collaboration
    features, making it suitable for small and large teams.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: LambdaTest 的云基础设施提供可扩展性和协作功能，适用于小型和大型团队。
- en: Finally, LambdaTest integrates with widespread CI tools such as AWS CodePipeline,
    Jenkins, CircleCI, Travis CI, GitLab CI, Azure Pipelines, and Bitrise.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，LambdaTest 与广泛使用的 CI 工具集成，如 AWS CodePipeline、Jenkins、CircleCI、Travis CI、GitLab
    CI、Azure Pipelines 和 Bitrise。
- en: Using the `curl` command from the command line, you can upload and run your
    tests on LambdaTest Cloud, just like you can with Sauce Labs and BrowserStack.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令行中的 `curl` 命令，您可以像在 Sauce Labs 和 BrowserStack 上一样，在 LambdaTest Cloud 上上传并运行测试。
- en: 'Here is an example of uploading the iOS app and then running the XCUITest test:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个上传 iOS 应用并运行 XCUITest 测试的示例：
- en: '[PRE2]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is an example of uploading the Android and test app:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个上传 Android 和测试应用的示例：
- en: '[PRE3]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If your CI provider supports integration steps, such as Bitrise, you can use
    it directly instead of the command line:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的 CI 提供商支持集成步骤，如 Bitrise，您可以直接使用它，而不必使用命令行：
- en: "![Figure 5.13 – Bitrise and LambdaTest integration steps\uFEFF](img/Figure_05.13_B18113.jpg)"
  id: totrans-358
  prefs: []
  type: TYPE_IMG
  zh: "![图 5.13 – Bitrise 和 LambdaTest 集成步骤\uFEFF](img/Figure_05.13_B18113.jpg)"
- en: Figure 5.13 – Bitrise and LambdaTest integration steps
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13 – Bitrise 和 LambdaTest 集成步骤
- en: '![Figure 5.14 – Bitrise and LambdaTest workflow](img/Figure_05.14_B18113.jpg)'
  id: totrans-360
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.14 – Bitrise 和 LambdaTest 工作流](img/Figure_05.14_B18113.jpg)'
- en: Figure 5.14 – Bitrise and LambdaTest workflow
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.14 – Bitrise 和 LambdaTest 工作流
- en: AWS Device Farm
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS Device Farm
- en: '**AWS Device Farm** ([https://aws.amazon.com/device-farm/](https://aws.amazon.com/device-farm/))
    is a mobile application testing service provided by **AWS**. It supports testing
    on Android and iOS platforms, allowing developers to test their apps on various
    real mobile devices.'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS Device Farm** ([https://aws.amazon.com/device-farm/](https://aws.amazon.com/device-farm/))
    是由 **AWS** 提供的移动应用测试服务。它支持在 Android 和 iOS 平台上进行测试，允许开发人员在各种真实移动设备上测试他们的应用。'
- en: AWS Device Farm provides access to a selection of real devices for the more
    accurate testing of mobile apps, ensuring better compatibility with real-world
    devices consumers use.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Device Farm 提供对一系列真实设备的访问，以便更准确地测试移动应用，确保更好的与消费者使用的真实设备的兼容性。
- en: Developers can remotely access devices for manual testing, allowing interactive
    debugging and troubleshooting.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可以远程访问设备进行手动测试，支持交互式调试和故障排除。
- en: AWS Device Farm supports popular test automation frameworks such as Appium,
    Espresso, and XCUITest, enabling developers to automate their testing processes.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Device Farm 支持流行的测试自动化框架，如 Appium、Espresso 和 XCUITest，使开发人员能够自动化他们的测试过程。
- en: AWS Device Farm integrates with popular CI tools, such as AWS CodePipeline,
    GitHub Actions, Codemagic, and Bitrise, streamlining the testing process within
    the development workflow.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Device Farm 与流行的 CI 工具集成，如 AWS CodePipeline、GitHub Actions、Codemagic 和 Bitrise，简化了开发工作流中的测试过程。
- en: 'With AWS Device Farm, you can upload the mobile app and test file manually
    to run your tests, as shown in the following screenshot. You can also upload the
    app with the CI build:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 AWS Device Farm，您可以手动上传移动应用和测试文件来运行测试，如以下截图所示。您还可以通过 CI 构建上传应用：
- en: '![Figure 5.15 – AWS Device Farm – Choose application](img/Figure_05.15_B18113.jpg)'
  id: totrans-369
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.15 – AWS Device Farm – 选择应用程序](img/Figure_05.15_B18113.jpg)'
- en: Figure 5.15 – AWS Device Farm – Choose application
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.15 – AWS Device Farm – 选择应用程序
- en: 'Next, you can configure the test type and set up the test framework, such as
    **Instrumentation**, as shown here:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可以配置测试类型并设置测试框架，如 **Instrumentation**，如图所示：
- en: '![Figure 5.16 – AWS Device Farm – setting up the test framework](img/Figure_05.16_B18113.jpg)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.16 – AWS Device Farm – 设置测试框架](img/Figure_05.16_B18113.jpg)'
- en: Figure 5.16 – AWS Device Farm – setting up the test framework
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.16 – AWS Device Farm – 设置测试框架
- en: 'Once you’ve done this, you can select an APK and choose your execution environment:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，您可以选择一个 APK 并选择您的执行环境：
- en: '![Figure 5.17 – AWS Device Farm – uploading the test app](img/Figure_05.17_B18113.jpg)'
  id: totrans-375
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.17 – AWS Device Farm – 上传测试应用](img/Figure_05.17_B18113.jpg)'
- en: Figure 5.17 – AWS Device Farm – uploading the test app
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.17 – AWS Device Farm – 上传测试应用
- en: 'Next, you can select the devices you wish to use. You can combine different
    device manufacturers, such as Google and Samsung, as shown in the following screenshot:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可以选择要使用的设备。您可以组合不同设备制造商，如 Google 和 Samsung，如下所示：
- en: '![Figure 5.18 – AWS Device Farm – selecting devices](img/Figure_05.18_B18113.jpg)'
  id: totrans-378
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.18 – AWS Device Farm – 选择设备](img/Figure_05.18_B18113.jpg)'
- en: Figure 5.18 – AWS Device Farm – selecting devices
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.18 – AWS Device Farm – 选择设备
- en: 'Once you’ve run the tests, you will see the test results, including videos,
    logs, and screenshots, as shown here:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行了测试，您将看到测试结果，包括视频、日志和截图，如下所示：
- en: '![Figure 5.19 – AWS Device Farm – the test results](img/Figure_05.19_B18113.jpg)'
  id: totrans-381
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.19 – AWS Device Farm – 测试结果](img/Figure_05.19_B18113.jpg)'
- en: Figure 5.19 – AWS Device Farm – the test results
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.19 – AWS Device Farm – 测试结果
- en: AWS Device Farm offers a flexible pay-as-you-go pricing model, allowing developers
    to pay only for the testing resources they use, making it a cost-effective option
    for some teams.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Device Farm 提供灵活的按需计费定价模型，允许开发人员仅为他们使用的测试资源付费，这对某些团队来说是一种成本效益高的选择。
- en: Firebase Test Lab
  id: totrans-384
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Firebase Test Lab
- en: '**Firebase Test Lab** ([https://firebase.google.com/products/test-lab](https://firebase.google.com/products/test-lab)),
    a part of Google’s Firebase suite of development tools, is a cloud-based testing
    service that allows developers to test their mobile applications on a variety
    of real devices and virtual devices (emulators and simulators):'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '**Firebase Test Lab** ([https://firebase.google.com/products/test-lab](https://firebase.google.com/products/test-lab))，作为
    Google Firebase 开发工具套件的一部分，是一个基于云的测试服务，允许开发人员在各种真实设备和虚拟设备（模拟器和仿真器）上测试他们的移动应用：'
- en: '![Figure 5.20 – Firebase Test Lab matrix](img/Figure_05.20_B18113.jpg)'
  id: totrans-386
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.20 – Firebase Test Lab 矩阵](img/Figure_05.20_B18113.jpg)'
- en: Figure 5.20 – Firebase Test Lab matrix
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.20 – Firebase Test Lab 矩阵
- en: Firebase Test Lab supports testing on Android and iOS platforms, enabling developers
    to test their apps on various devices and operating systems.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase Test Lab 支持在 Android 和 iOS 平台上进行测试，使开发人员能够在各种设备和操作系统上测试他们的应用。
- en: 'Firebase Test Lab supports popular test automation frameworks such as Espresso
    and XCTest but not Appium and Detox:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase Test Lab 支持流行的自动化测试框架，如 Espresso 和 XCTest，但不支持 Appium 和 Detox：
- en: '![Figure 5.21 – Firebase Test Lab results](img/Figure_05.21_B18113.jpg)'
  id: totrans-390
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.21 – Firebase Test Lab 结果](img/Figure_05.21_B18113.jpg)'
- en: Figure 5.21 – Firebase Test Lab results
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.21 – Firebase Test Lab 结果
- en: Firebase Test Lab integrates with popular CI tools, such as Jenkins, GitLab
    CI, and Bitrise, streamlining the testing process within the development workflow.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase Test Lab 与流行的 CI 工具（如 Jenkins、GitLab CI 和 Bitrise）集成，在开发工作流程中简化了测试过程。
- en: Firebase Test Lab automatically generates a pre-launch report with detailed
    test results, performance metrics, and screenshots, helping developers identify
    and resolve issues before they launch their app.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase Test Lab 会自动生成一个发布前报告，包含详细的测试结果、性能指标和截图，帮助开发人员在发布应用之前识别和解决问题。
- en: As part of the Firebase suite of tools, Firebase Test Lab seamlessly integrates
    with other Firebase services, such as Cloud Functions, simplifying the overall
    testing and development process.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 Firebase 工具套件的一部分，Firebase Test Lab 与其他 Firebase 服务（如 Cloud Functions）无缝集成，简化了整体测试和开发流程。
- en: You can run tests in parallel with **Flank** ([https://github.com/Flank/flank/](https://github.com/Flank/flank/)),
    a massively parallel Android and iOS test runner for Firebase Test Lab.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 **Flank** ([https://github.com/Flank/flank/](https://github.com/Flank/flank/))，这是一个用于
    Firebase Test Lab 的大规模并行 Android 和 iOS 测试工具。
- en: Flank is YAML-compatible with the `gcloud` CLI. It provides extra features to
    accelerate velocity and increase quality.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: Flank 与 `gcloud` CLI 兼容。它提供了额外的功能来加速速度并提高质量。
- en: 'You can use Flank by performing the following steps:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下步骤使用 Flank：
- en: Create a Google Cloud project and account.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Google Cloud 项目和账户。
- en: Create a Firebase account.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 Firebase 账户。
- en: Add your project to Firebase.
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的项目添加到 Firebase。
- en: Create a service account to get access to the API.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建服务账户以获取 API 访问权限。
- en: Download the service account JSON file. This will contain a private key that
    can be added directly to your CI server and used for authentication.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载服务账户的 JSON 文件。该文件包含一个私钥，可直接添加到你的 CI 服务器并用于身份验证。
- en: Once you’ve done this, you can create a configuration file for your app, similar
    to the one at [https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Flank/flank.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Flank/flank.yml).
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，你可以为你的应用创建一个配置文件，类似于[https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Flank/flank.yml](https://github.com/PacktPublishing/Mobile-DevOps-Playbook/blob/main/Chapter-5/Flank/flank.yml)中的文件。
- en: 'Then, you can run the following script:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以运行以下脚本：
- en: '[PRE4]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As a final point, you need to monitor the usage of Flank since you are running
    parallel devices, which will incur costs.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要监控 Flank 的使用情况，因为你正在运行并行设备，这会产生费用。
- en: Other services provide us with cloud devices, such as **Genymotion** ([https://www.genymotion.com/](https://www.genymotion.com/)),
    a popular Android emulator and mobile testing platform that enables developers
    and QA teams to test their mobile applications on various virtual devices. Additionally,
    **emulator.wtf** ([https://emulator.wtf/](https://emulator.wtf/)) is an Android
    cloud emulator that’s laser-focused on performance to deliver quick feedback to
    your PRs.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 其他服务提供云设备，例如**Genymotion**（[https://www.genymotion.com/](https://www.genymotion.com/)），这是一款流行的安卓模拟器和移动测试平台，使开发人员和质量保证（QA）团队能够在各种虚拟设备上测试他们的移动应用程序。此外，**emulator.wtf**（[https://emulator.wtf/](https://emulator.wtf/)）是一个专注于性能的安卓云模拟器，旨在为您的拉取请求（PRs）提供快速反馈。
- en: '**Kobiton** ([https://kobiton.com/](https://kobiton.com/)) is a cloud-based
    mobile testing platform that enables developers and QA teams to test their mobile
    applications on various real devices and simulators. It provides extensive features
    to ensure comprehensive app testing across different platforms and devices.'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kobiton**（[https://kobiton.com/](https://kobiton.com/)）是一个基于云的移动测试平台，使开发人员和QA团队能够在各种真实设备和模拟器上测试他们的移动应用程序。它提供了丰富的功能，确保在不同平台和设备上进行全面的应用测试。'
- en: Also, **Perfecto** ([https://www.perfecto.io/](https://www.perfecto.io/)), the
    mobile testing platform by Perforce, enables developers and QA teams to test their
    mobile applications on various real devices and simulators in a secure cloud environment.
    It provides extensive features to ensure comprehensive app testing across different
    platforms and devices.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，**Perfecto**（[https://www.perfecto.io/](https://www.perfecto.io/)）是Perforce推出的移动测试平台，使开发人员和QA团队能够在安全的云环境中，在各种真实设备和模拟器上测试他们的移动应用程序。它提供了丰富的功能，确保在不同平台和设备上进行全面的应用测试。
- en: How AI and ML are changing mobile testing
  id: totrans-410
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 人工智能（AI）和机器学习（ML）如何改变移动测试
- en: Mobile testing has been revolutionized by AI and ML. Developers can test applications
    more swiftly and precisely because they automate testing. With the help of predictive
    analytics, bugs can be fixed more quickly. Intelligent test case generation develops
    test cases based on user behavior and utilization trends, exposing potential problems.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 移动测试已经被人工智能（AI）和机器学习（ML）彻底革新。开发人员可以更快速、准确地测试应用程序，因为他们实现了测试的自动化。在预测分析的帮助下，错误可以更快地修复。智能化的测试用例生成根据用户行为和使用趋势生成测试用例，从而暴露潜在问题。
- en: Additionally, the expense of mobile testing can be decreased with the assistance
    of AI and ML in addition to the advantages already stated. Companies can reduce
    the expenses associated with manual labor and simplify their testing processes
    by automating them.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，借助AI和机器学习，移动测试的费用可以减少，除了前面提到的优势之外。公司通过自动化测试，能够减少与人工劳动相关的费用，并简化测试流程。
- en: Codeless and AI-based testing tools
  id: totrans-413
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无代码和基于AI的测试工具
- en: AI can be a game-changer in automation testing. AI-powered testing tools can
    help improve test coverage, reduce the time and effort required for testing, and
    provide more accurate test results.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 人工智能（AI）可以在自动化测试中成为游戏规则的改变者。AI驱动的测试工具有助于提高测试覆盖率，减少测试所需的时间和精力，并提供更准确的测试结果。
- en: 'Here are some tools that can help software testers unleash the power of AI
    in automation testing:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些可以帮助软件测试人员在自动化测试中释放人工智能（AI）威力的工具：
- en: Applitools
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Applitools
- en: Katalon
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Katalon
- en: Waldo
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Waldo
- en: Let’s take a closer look.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看。
- en: Applitools
  id: totrans-420
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Applitools
- en: '**Applitools** ([https://applitools.com/solutions/mobile-testing](https://applitools.com/solutions/mobile-testing))
    is a visual testing platform designed to help developers and QA teams automatically
    validate the appearance of their mobile applications across different devices
    and screen resolutions. It aims to streamline testing and reduce manual effort
    by leveraging AI-powered visual comparison and validation.'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '**Applitools**（[https://applitools.com/solutions/mobile-testing](https://applitools.com/solutions/mobile-testing)）是一个视觉测试平台，旨在帮助开发人员和QA团队自动验证他们的移动应用程序在不同设备和屏幕分辨率上的外观。它通过利用AI驱动的视觉比较和验证，旨在简化测试流程，减少人工工作量。'
- en: It uses AI to visually compare application UIs, detecting differences with high
    accuracy and reducing false positives, which can be beneficial in usability testing
    and snapshot testing.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 它利用AI对应用程序的UI进行视觉比较，以高准确度检测差异，减少误报，这在可用性测试和快照测试中非常有益。
- en: Applitools integrates with many popular testing frameworks, such as XCUITest,
    Appium, and Espresso, making incorporating visual validation into existing test
    suites easy.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: Applitools与许多流行的测试框架（如XCUITest、Appium和Espresso）集成，使得将视觉验证纳入现有测试套件变得简单。
- en: It offers extensive coverage of different browsers, devices, and screen resolutions,
    ensuring that applications are visually tested on diverse configurations.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供对不同浏览器、设备和屏幕分辨率的广泛覆盖，确保应用程序在各种配置上得到视觉测试。
- en: Katalon AI Visual Testing
  id: totrans-425
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Katalon AI视觉测试
- en: In addition to the Katalon ecosystem, Katalon Visual Testing helps you optimize
    your testing performance and save time by integrating seamlessly without any setup
    effort. On top of functional testing, it identifies unexpected visual changes
    to the UI.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Katalon生态系统，Katalon视觉测试通过无缝集成，帮助您优化测试性能并节省时间，无需任何设置工作。除了功能性测试外，它还能识别UI中的意外视觉变化。
- en: Using AI, Katalon identifies and matches various zones between the baseline
    image and the checkpoint image, then highlights changes in the layout. In addition,
    ML models are used to extract and compare texts from the two images, which can
    help users identify texts that have been modified from the original version regardless
    of font family, font size, or color.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 使用AI，Katalon识别并匹配基准图像与检查点图像之间的各个区域，然后突出显示布局中的变化。此外，机器学习模型用于提取并比较两幅图像中的文本，帮助用户识别出无论字体、字体大小或颜色如何变化的已修改文本。
- en: You can also run it in parallel with functional tests to cover E2E scenarios
    and visual regressions.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将其与功能性测试并行运行，以涵盖E2E场景和视觉回归。
- en: Waldo
  id: totrans-429
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Waldo
- en: Other services provide us with AI testing tools and platforms, such as **Waldo**
    ([https://www.waldo.com/](https://www.waldo.com/)) from Tricentis. This is a codeless
    mobile app testing platform that’s designed to help developers and QA teams automate
    and simplify the testing process for iOS and Android applications. Its codeless
    approach minimizes the learning curve and reduces the time spent on test script
    creation and maintenance.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 其他服务为我们提供了AI测试工具和平台，例如Tricentis的**Waldo** ([https://www.waldo.com/](https://www.waldo.com/))。这是一个无代码的移动应用测试平台，旨在帮助开发人员和QA团队自动化并简化iOS和Android应用程序的测试过程。其无代码方法最大程度地减少了学习曲线，并减少了测试脚本创建和维护所花费的时间。
- en: Waldo enables users to create test scripts without writing code, using a visual
    interface to define and record test scenarios. Waldo automatically runs tests
    on every build, streamlining the process and ensuring that applications are constantly
    tested.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: Waldo使用户无需编写代码即可创建测试脚本，通过可视化界面定义和记录测试场景。Waldo会在每次构建时自动运行测试，简化了流程并确保应用程序始终得到测试。
- en: Waldo offers real mobile device testing in the cloud, providing accurate results
    and a realistic testing environment. Waldo’s codeless approach simplifies the
    test script creation process, making it accessible to testers with varying programming
    skills.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: Waldo提供云端真实移动设备测试，提供准确的结果和逼真的测试环境。Waldo的无代码方法简化了测试脚本创建过程，使不同编程技能的测试人员都能轻松使用。
- en: Two other tools worth mentioning are Testsigma and Sofy.ai.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两个值得提及的工具是Testsigma和Sofy.ai。
- en: '**Testsigma** ([https://testsigma.com/ai-driven-test-automation](https://testsigma.com/ai-driven-test-automation))
    integrates seamlessly with mobile CI/CD tools, making it easy to incorporate into
    existing development workflows.'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '**Testsigma** ([https://testsigma.com/ai-driven-test-automation](https://testsigma.com/ai-driven-test-automation))与移动CI/CD工具无缝集成，便于将其纳入现有的开发工作流程中。'
- en: '**Sofy.ai** ([https://sofy.ai/](https://sofy.ai/)) is an AI-powered mobile
    app testing platform designed to help developers and QA teams automate and simplify
    the testing process for Android and iOS applications. Its AI-driven approach aims
    to reduce the time spent on test script creation and maintenance while enhancing
    overall testing efficiency. In this review, we will focus on Sofy.ai’s mobile
    testing capabilities, discuss its key features, pros, and cons, and compare it
    with other technologies on the market. Sofy.ai integrates seamlessly with mobile
    CI/CD tools, making it easy to incorporate into existing development workflows.'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sofy.ai** ([https://sofy.ai/](https://sofy.ai/)) 是一个AI驱动的移动应用测试平台，旨在帮助开发人员和QA团队自动化并简化Android和iOS应用程序的测试过程。其AI驱动的方法旨在减少测试脚本创建和维护所花费的时间，同时提高整体测试效率。在本评测中，我们将重点关注Sofy.ai的移动测试能力，讨论其主要特点、优缺点，并与市场上其他技术进行比较。Sofy.ai与移动CI/CD工具无缝集成，便于将其纳入现有的开发工作流程中。'
- en: By effectively managing test cases, testing teams can ensure comprehensive coverage
    of software functionality, identify and fix defects, and ultimately deliver high-quality
    software to end users.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 通过有效管理测试用例，测试团队可以确保全面覆盖软件功能，识别和修复缺陷，最终交付高质量的软件给终端用户。
- en: Test case management tools play a vital role in streamlining this process and
    enhancing the efficiency of the testing effort. Let’s discuss the concept of test
    case management and cover some popular test case management tools.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 测试用例管理工具在简化这个过程和提高测试效率方面发挥着至关重要的作用。让我们讨论一下测试用例管理的概念，并介绍一些流行的测试用例管理工具。
- en: Test case management
  id: totrans-438
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试用例管理
- en: To ensure high-quality mobile applications are delivered to customers, test
    case management must be integrated with test automation and mobile DevOps. Integration
    involves using a test case management system that integrates seamlessly with automation
    tools and offers real-time reporting.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保高质量的移动应用交付给客户，测试用例管理必须与测试自动化和移动 DevOps 集成。集成意味着使用一个与自动化工具无缝对接并提供实时报告的测试用例管理系统。
- en: This integration allows developers to automate tests for different scenarios
    and execute them across multiple devices in a controlled environment.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 这种集成使开发人员能够自动化不同场景的测试，并在多个设备上以受控的环境执行测试。
- en: In addition, integrating testing into the DevOps pipeline facilitates automated
    testing, early defect identification, and rapid feedback.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，将测试集成到 DevOps 管道中有助于自动化测试、早期缺陷识别和快速反馈。
- en: Test case management integrated with test automation and mobile DevOps can improve
    the quality of mobile apps, reduce development time, and increase efficiency.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 与测试自动化和移动 DevOps 集成的测试用例管理可以提高移动应用的质量，减少开发时间并提高效率。
- en: A popular test case management tool that integrates well with test automation
    and mobile DevOps is **TestRail**. It is a web-based test case management tool
    that allows teams to create, manage, and organize test cases. TestRail can be
    embedded into CI/CD pipelines such as Jenkins, GitLab, GitHub Actions, and more,
    as well as mobile testing frameworks such as Appium, Espresso, and XCUITest.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 一个与测试自动化和移动 DevOps 集成良好的流行测试用例管理工具是**TestRail**。它是一个基于 Web 的测试用例管理工具，允许团队创建、管理和组织测试用例。TestRail
    可以嵌入到 CI/CD 管道中，如 Jenkins、GitLab、GitHub Actions 等，也可以与 Appium、Espresso 和 XCUITest
    等移动测试框架集成。
- en: With TestRail’s extensive API, webhooks, or CLI, you can easily customize your
    QA processes so that they fit your specific testing workflows and integrate with
    your tech stack.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 利用 TestRail 强大的 API、webhooks 或 CLI，你可以轻松自定义你的 QA 流程，使其适应特定的测试工作流程，并与技术栈集成。
- en: Some other test case management tools are **Zephyr** ([https://smartbear.com/test-management/zephyr/](https://smartbear.com/test-management/zephyr/))
    and **Testmo** ([https://www.testmo.com/](https://www.testmo.com/)).
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 其他一些测试用例管理工具包括**Zephyr** ([https://smartbear.com/test-management/zephyr/](https://smartbear.com/test-management/zephyr/))
    和**Testmo** ([https://www.testmo.com/](https://www.testmo.com/))。
- en: Test reports, insights, and analytics are critical components of a successful
    testing process and strategy. When you’re measuring the success of your test automation
    progress, test reports, insights, and analytics help stakeholders understand the
    root causes of defects and make data-driven decisions.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 测试报告、洞察和分析是成功的测试过程和策略中的关键组成部分。当你在衡量测试自动化进展的成功时，测试报告、洞察和分析帮助利益相关者理解缺陷的根本原因，并做出数据驱动的决策。
- en: 'Let’s look at the difference between test reports, test insights, and test
    analytics:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看测试报告、测试洞察和测试分析之间的区别：
- en: '**Test reports**: With reports, you can summarize the testing results, including
    the number of tests executed, the number of tests that are passed and failed,
    and the overall test coverage. Test reports should be easy to understand and provide
    insights into the quality of the software.'
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试报告**：通过报告，你可以总结测试结果，包括执行的测试数量、通过和失败的测试数量，以及整体的测试覆盖率。测试报告应易于理解，并为软件的质量提供洞察。'
- en: '**Test insights**: Test insights provide deeper insights into the testing process
    by analyzing the root causes of defects and identifying areas for improvement.
    Test insights can help stakeholders understand the reasons behind test failures
    and take corrective actions to improve the quality of the software.'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试洞察**：测试洞察通过分析缺陷的根本原因并识别需要改进的领域，提供对测试过程的更深入理解。测试洞察有助于利益相关者理解测试失败背后的原因，并采取纠正措施以提高软件质量。'
- en: '**Test analytics**: Test analytics involves analyzing test data over time to
    identify trends and patterns. Test analytics can help stakeholders identify application
    areas that are prone to defects and make data-driven decisions on improving the
    software’s quality.'
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试分析**：测试分析涉及分析测试数据，以识别趋势和模式。测试分析可以帮助利益相关者识别应用程序中容易出现缺陷的区域，并根据数据做出提高软件质量的决策。'
- en: 'Here are some examples of testing insights and analytics:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些测试洞察和分析的示例：
- en: Test coverage metrics show how much of the application has been tested and remains
    untested
  id: totrans-452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试覆盖率指标显示了应用程序已测试和未测试的部分。
- en: Failure rates and defect density provide information on the number of defects
    found and the rate at which they are discovered
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 失败率和缺陷密度提供了有关发现的缺陷数量以及它们被发现的速度的信息。
- en: Test execution time and efficiency can help identify bottlenecks and areas for
    improvement in the testing process
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试执行时间和效率有助于识别测试过程中的瓶颈和改进领域。
- en: Test results and pass/fail rates summarize the overall quality of the application
    and the effectiveness of the tests
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试结果和通过/失败率总结了应用程序的整体质量和测试的有效性。
- en: Many tools and techniques can be used to gather testing insights and analytics,
    such as **Buildkite Test Analytics** ([https://buildkite.com/test-analytics](https://buildkite.com/test-analytics)),
    **Bitrise Insights** ([https://bitrise.io/bitrise-insights](https://bitrise.io/bitrise-insights)),
    and **Sauce Labs** **Insights** ([https://saucelabs.com/products/sauce-insights](https://saucelabs.com/products/sauce-insights)).
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用许多工具和技术来收集测试洞察和分析，例如**Buildkite Test Analytics**（[https://buildkite.com/test-analytics](https://buildkite.com/test-analytics)）、**Bitrise
    Insights**（[https://bitrise.io/bitrise-insights](https://bitrise.io/bitrise-insights)）和**Sauce
    Labs** **Insights**（[https://saucelabs.com/products/sauce-insights](https://saucelabs.com/products/sauce-insights)）。
- en: When it comes to software testing, test automation tools and test case management
    are crucial for creating, organizing, and managing test cases. This helps ensure
    that software applications are thoroughly tested. However, achieving mobile test
    coverage is also important. Let’s learn how to do this.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件测试中，测试自动化工具和测试用例管理对创建、组织和管理测试用例至关重要。这有助于确保软件应用程序经过彻底测试。然而，实现移动测试覆盖率同样重要。让我们学习如何做到这一点。
- en: Achieving successful mobile test coverage
  id: totrans-458
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现成功的移动测试覆盖率
- en: 'When ensuring mobile app quality and functionality, it can be challenging to
    test mobile apps and even more difficult to get successful mobile test coverage.
    The following guidelines can be helpful:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 在确保移动应用的质量和功能时，测试移动应用可能具有挑战性，甚至更难以实现成功的移动测试覆盖率。以下准则可能会有所帮助：
- en: '**Understand the app’s goals and requirements**: It is essential to thoroughly
    understand the needs and goals of the mobile app before you start the testing
    process. The purpose and functionality of the app should be understood, as well
    as their specific features and capabilities.'
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**了解应用的目标和需求**：在开始测试过程之前，彻底理解移动应用的需求和目标至关重要。应该理解应用的目的和功能，以及它们的特定特性和能力。'
- en: '**Determine the most essential features and functions**: Prioritize test cases
    based on impact and risk. A mobile app’s most critical features and functions
    should be prioritized since not all features and functions are equally important.
    It may be necessary to identify which features and functions are most commonly
    used by users or which are most likely to affect the app’s performance or stability.'
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定最重要的特性和功能**：根据影响和风险优先考虑测试用例。移动应用最关键的特性和功能应该优先考虑，因为并非所有特性和功能都同等重要。可能需要识别哪些特性和功能是用户最常使用的，或者哪些最有可能影响应用的性能或稳定性。'
- en: '**A comprehensive test plan should be developed**: After identifying the key
    features and functions of the mobile app, you can develop a comprehensive test
    plan that covers all of these features and functions. This test plan includes
    various test cases and scenarios to identify and address potential app defects
    and issues.'
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应制定全面的测试计划**：在识别移动应用的关键特性和功能后，您可以制定一个全面的测试计划，涵盖所有这些特性和功能。该测试计划包括各种测试用例和场景，以识别并解决潜在的应用缺陷和问题。'
- en: '**Combine manual and automated testing**: Manual and automated testing are
    essential. The use of manual testing can be effective for identifying defects
    and issues that are hard to automate, while automated testing can quickly and
    efficiently run large numbers of tests. Incorporate continuous testing into the
    development process and use appropriate testing tools and frameworks.'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结合手动和自动化测试**：手动测试和自动化测试都是至关重要的。手动测试可以有效地识别那些难以自动化的缺陷和问题，而自动化测试可以快速高效地运行大量测试。在开发过程中加入持续测试，并使用合适的测试工具和框架。'
- en: '**Collaborate with developers and other stakeholders**: To achieve successful
    mobile test coverage, it’s crucial to collaborate with developers and other stakeholders
    throughout the testing process. Working together to identify and fix potential
    app issues and defects can involve sharing test results and feedback.'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与开发人员和其他相关方合作**：为了实现成功的移动测试覆盖，整个测试过程中与开发人员和其他相关方的合作至关重要。共同识别和修复潜在的应用问题和缺陷，可能需要共享测试结果和反馈。'
- en: These guidelines will help you ensure your mobile app is thoroughly tested,
    ready for release, and effective.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指南将帮助你确保你的移动应用经过彻底测试，准备发布并有效。
- en: Tips for successful CI/CD pipelines and test automation
  id: totrans-466
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成功的CI/CD管道和测试自动化的建议
- en: Any successful software development project needs to have a CI/CD pipeline and
    test automation.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 任何成功的软件开发项目都需要有CI/CD管道和测试自动化。
- en: 'Here are some tips for ensuring success in these areas:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是确保这些领域成功的一些建议：
- en: Building a solid foundation for your CI pipeline and test automation strategy
    involves identifying your requirements, selecting the right tools and technologies,
    and developing a clear implementation plan.
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为你的CI管道和测试自动化策略奠定坚实基础，涉及识别需求、选择合适的工具和技术，以及制定明确的实施计划。
- en: It is important to choose the right testing tools and frameworks for the testing
    you’ll be doing. There are many tools available for manual, automated, and performance
    testing.
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择合适的测试工具和框架对于你所做的测试非常重要。目前有许多工具可以用于手动测试、自动化测试和性能测试。
- en: Provide the necessary devices, emulators, simulators, and network conditions
    to set up the required environment.
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供必要的设备、模拟器、仿真器和网络条件，以设置所需的环境。
- en: Select the target devices and platforms for your testing based on your market
    analysis. Use both real devices and emulators/simulators. To ensure wide coverage,
    ensure a mix of popular devices, operating system versions, screen resolutions,
    and form factors are included.
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据市场分析选择你的测试目标设备和平台。使用真实设备和模拟器/仿真器相结合。为了确保广泛覆盖，确保包含流行设备、操作系统版本、屏幕分辨率和外形尺寸的混合。
- en: Analyzing the results of your CI pipeline and test automation can help you identify
    trends, areas for improvement, and potential issues. Using these insights, you
    can continuously refine and improve your processes.
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析CI管道和测试自动化的结果可以帮助你识别趋势、改进的领域和潜在问题。利用这些洞察，你可以不断完善和改进你的流程。
- en: Investing in training for your team can help them develop the necessary skills
    and knowledge to implement and maintain your CI pipeline and test automation strategy
    successfully.
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 投资于团队培训可以帮助他们发展实施和维护CI管道及测试自动化策略所需的技能和知识。
- en: Ensure the highest level of quality for your mobile application by continuously
    improving your testing strategy based on results and feedback. Update your test
    cases, scripts, and tools as needed.
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过不断根据结果和反馈改进测试策略，确保你的移动应用达到最高质量。根据需要更新测试用例、脚本和工具。
- en: Skills for mobile testers
  id: totrans-476
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动测试人员的技能
- en: 'Mobile testers play a critical role in ensuring the quality and reliability
    of mobile applications. Here are some essential skills that mobile testers should
    have:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 移动测试人员在确保移动应用质量和可靠性方面发挥着至关重要的作用。以下是移动测试人员应具备的一些基本技能：
- en: A mobile tester should be able to communicate and collaborate effectively with
    other stakeholders, including developers, product owners, and business analysts.
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动测试人员应该能够与其他相关方有效沟通和合作，包括开发人员、产品负责人和业务分析师。
- en: A mobile tester must be able to identify, analyze, and troubleshoot issues and
    defects in mobile applications.
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动测试人员必须能够识别、分析和解决移动应用中的问题和缺陷。
- en: Mobile testers need to understand the operating system, device types, and screen
    sizes of the mobile platforms they are testing on.
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动测试人员需要了解他们所测试的移动平台的操作系统、设备类型和屏幕尺寸。
- en: To identify potential issues and defects, mobile testers should be familiar
    with the mobile app architecture, including how the frontend and backend interact.
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了识别潜在的问题和缺陷，移动测试人员应该熟悉移动应用的架构，包括前端和后端如何交互。
- en: To automate repetitive tests and increase test coverage, mobile testers should
    be familiar with test automation tools and techniques, including frameworks such
    as Appium, Espresso, and XCUITest.
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了自动化重复性测试并提高测试覆盖率，移动测试人员应该熟悉测试自动化工具和技术，包括 Appium、Espresso 和 XCUITest 等框架。
- en: Mobile testers need to be able to test the performance of mobile applications,
    including checking for issues such as app crashes and slow loading times.
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动测试人员需要能够测试移动应用的性能，包括检查应用崩溃和加载缓慢等问题。
- en: To be a successful mobile tester, testers should have a strong understanding
    of app security and be able to test for potential security issues such as malware
    and unauthorized access.
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成为一名成功的移动测试人员，测试人员应该具备扎实的应用安全知识，并能够测试潜在的安全问题，如恶意软件和未经授权的访问。
- en: Mobile testers must be proficient in using bug tracking and reporting tools
    so that they can log, track, and report bugs to the development teams effectively.
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动测试人员必须熟练使用缺陷跟踪和报告工具，以便有效地记录、跟踪和报告问题给开发团队。
- en: How to improve your mobile testing skills
  id: totrans-486
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何提升你的移动测试技能
- en: Now that we’ve discussed the skills that mobile testers require, let’s discuss
    how to improve our mobile testing skills.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了移动测试人员需要的技能，接下来我们来探讨如何提升我们的移动测试技能。
- en: 'Keeping up with the ever-evolving world of mobile applications requires improving
    your mobile testing skills. You can do this in various ways:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 跟上移动应用快速发展的步伐，需要不断提升自己的移动测试技能。你可以通过多种方式实现这一点：
- en: Understanding the various mobile platforms and operating systems available,
    such as Android and iOS, is a great place to start.
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解各种可用的移动平台和操作系统，如 Android 和 iOS，是一个很好的起点。
- en: Participate in real-world projects to experience mobile testing in the real
    world.
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参与真实项目，体验真实世界中的移动测试。
- en: Keeping up with the latest trends in mobile technology, such as 5G or IoT, will
    enable you to anticipate challenges and opportunities in the future.
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟上最新的移动技术趋势，如 5G 或物联网，将帮助你预见未来的挑战和机遇。
- en: Become familiar with different mobile devices, operating systems, and browsers.
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉不同的移动设备、操作系统和浏览器。
- en: Learn about Appium, XCUITest, Espresso, Detox, and Maestro, some of the most
    popular mobile testing tools and frameworks available today.
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Appium、XCUITest、Espresso、Detox 和 Maestro 等一些当今最流行的移动测试工具和框架。
- en: To exchange knowledge and best practices, join a community of mobile testers,
    such as an online forum or a local meetup.
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了交流知识和最佳实践，加入一个移动测试人员的社区，如在线论坛或本地聚会。
- en: Continue your education by taking online courses, reading blogs, joining webinars,
    and attending industry events. Keeping up with these resources will help you stay
    informed and adaptable in the rapidly changing mobile testing world.
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过参加在线课程、阅读博客、参加网络研讨会和行业活动，持续学习。跟上这些资源将帮助你在快速变化的移动测试领域保持信息灵通并具备适应能力。
- en: Testers should be able to combine technical skills, such as knowledge of mobile
    platforms and test automation, with soft skills, such as communication and problem-solving.
    Mobile testers must have a diverse skill set to assist with ensuring the quality
    and reliability of mobile applications, ultimately ensuring the best possible
    customer experience.
  id: totrans-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试人员应能够将技术技能（如移动平台和测试自动化的知识）与软技能（如沟通和解决问题的能力）结合起来。移动测试人员必须具备多样化的技能组合，以帮助确保移动应用的质量和可靠性，最终确保最佳的客户体验。
- en: Summary
  id: totrans-497
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we examined the numerous aspects of mobile app testing. We
    learned how vital it is to test mobile applications to provide users with high-quality
    experiences. We also explored the advantages of test automation, such as quicker
    testing cycles and consistent results across platforms and devices. This helped
    us understand the significance of a well-planned testing strategy to overcome
    the challenges and obstacles in mobile app testing.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们讨论了移动应用测试的众多方面。我们了解到，测试移动应用对于提供高质量的用户体验至关重要。我们还探讨了测试自动化的优势，如更快的测试周期和跨平台与设备的一致结果。这帮助我们理解了制定良好测试策略的重要性，以克服移动应用测试中的挑战和障碍。
- en: In addition, we gained valuable insights into the various testing tools, frameworks,
    and services available for mobile apps. We understood the importance of testing
    the mobile app UI and functionality to ensure seamless user experiences. Our exploration
    of testing on cloud devices and the impact of AI and ML on mobile testing deepened
    our understanding, leading us to recognize the necessity of comprehensive test
    case management.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们获得了关于各种移动应用测试工具、框架和服务的宝贵见解。我们理解了测试移动应用UI和功能的重要性，以确保无缝的用户体验。我们对云端设备上进行测试以及AI和ML对移动测试的影响的探索，加深了我们的理解，使我们认识到全面的测试用例管理的必要性。
- en: This streamlines the testing process, resulting in successful mobile test coverage
    across various devices, operating system versions, and network conditions. By
    incorporating these concepts, developers can implement effective mobile app testing
    strategies to create robust and reliable applications that meet user expectations.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 这简化了测试过程，确保在各种设备、操作系统版本和网络条件下都能成功覆盖移动测试。通过引入这些概念，开发者可以实施有效的移动应用测试策略，创建满足用户期望的强大且可靠的应用程序。
- en: The next chapter will cover mobile app release management. It’s important to
    release mobile apps efficiently due to fast-paced technology and user experience
    needs. We’ll also discuss the top practices and challenges.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将涵盖移动应用发布管理。由于技术发展迅速和用户体验需求的不断变化，高效发布移动应用至关重要。我们还将讨论最佳实践和面临的挑战。
