- en: '*Chapter 9*: Deploying to Any Platform'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 9 章*：部署到任何平台'
- en: Now that you have learned how to use GitHub Actions as an automation engine
    and GitHub Packages to easily share code and containers, we can complete our **Continuous
    Integration/Continuous Delivery** (**CI/CD**) capabilities by automating deployments.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学会了如何使用 GitHub Actions 作为自动化引擎，并使用 GitHub Packages 轻松分享代码和容器，我们可以通过自动化部署来完成我们的**持续集成/持续交付**（**CI/CD**）能力。
- en: In this chapter, I'll show you how to easily deploy to any cloud or platform
    in a secure and compliant way.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将向你展示如何以安全且合规的方式轻松部署到任何云或平台。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Staged deployments
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分阶段部署
- en: Automating your deployments
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化你的部署
- en: Infrastructure as Code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施即代码
- en: How to deploy to Azure App Service
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何部署到 Azure 应用服务
- en: How to deploy to AWS **Elastic Container Service** (**ECS**)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何部署到 AWS **弹性容器服务**（**ECS**）
- en: How to deploy to **Google Kubernetes Engine** (**GKE**)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何部署到 **Google Kubernetes 引擎**（**GKE**）
- en: Measuring success
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测量成功
- en: CI/CD
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CI/CD
- en: CI means that every time you push code changes to your repository, the code
    is built and tested, and the output is packaged as a build artifact. In CD, you
    automatically deploy your build artifacts to your environments whenever a new
    build artifact is created.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CI 意味着每次将代码更改推送到你的仓库时，代码都会被构建和测试，并且输出将打包为构建工件。在 CD 中，每当创建新的构建工件时，你将自动将构建工件部署到环境中。
- en: When practicing CI/CD, the development and delivery phases are completely automated.
    The code is ready to be deployed to production at any time.
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在实践 CI/CD 时，开发和交付阶段是完全自动化的。代码随时可以部署到生产环境。
- en: There are various definitions that distinguish between **continuous delivery**
    and **continuous deployment** (both **CD**) – but these definitions are not consistent
    in the literature and only add little to no value to the topic.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有多种定义区分**持续交付**和**持续部署**（两者都是**CD**）——但这些定义在文献中并不一致，并且对主题的贡献微乎其微。
- en: Staged deployments
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分阶段部署
- en: A `Development`, `Test`, `Staging` (or `Pre-Production`), and `Production`.
    Typically, the `Staging`, or `Pre-Production`, stage is a complete mirror of the
    production environment, and sometimes, it is used for zero-downtime deployments
    by switching the two environments using load balancing. Typically, stages that
    are closer to production require manual approval before deployment.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `Development`、`Test`、`Staging`（或 `Pre-Production`）和 `Production`。通常，`Staging`
    或 `Pre-Production` 阶段是生产环境的完整镜像，有时，使用负载均衡切换这两个环境来实现零停机时间部署。通常，越接近生产环境的阶段需要手动批准才能部署。
- en: If a company works with feature flags (please refer to [*Chapter 10*](B17827_10_Epub.xhtml#_idTextAnchor239),
    *Feature Flags and the Feature Lifecycle*) and CD, normally, the number of stages
    decreases. Instead of stages, we can talk about **ring-based deployments** or
    **scaling units**. The idea of ring-based deployments is that you have customers
    in different productions rings. You deploy your update to one ring and automatically
    monitor the system for unexpected exceptions or unusual metrics such as CPU or
    memory usage. Additionally, you can run automated tests in the production environment.
    If there are no errors, the release process is continuous and deploys to the next
    ring. When discussing ring-based deployments, often, we imply that no manual approval
    is involved. However, there can also be manual approval between the rings.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果公司使用功能标志（请参见 [*第 10 章*](B17827_10_Epub.xhtml#_idTextAnchor239)，*功能标志与功能生命周期*）和
    CD，通常阶段的数量会减少。我们可以讨论**基于环的部署**或**扩展单元**，而不是使用阶段。基于环的部署的想法是，你有客户处于不同的生产环中。你将更新部署到一个环，并自动监控系统是否出现意外异常或异常指标，如
    CPU 或内存使用情况。此外，你可以在生产环境中运行自动化测试。如果没有错误，发布过程将持续进行并部署到下一个环。在讨论基于环的部署时，通常意味着没有手动批准。然而，环之间也可以进行手动批准。
- en: In GitHub, you can perform staged and ring-based deployments using **Environments**.
    You can view, configure, or create new ones in your repository under **Settings**
    | **Environments**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 中，你可以使用**环境**进行分阶段和基于环的部署。你可以在你的仓库的**设置** | **环境**中查看、配置或创建新的环境。
- en: 'For each environment, you can define the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个环境，你可以定义以下内容：
- en: '**Required reviewers**: These include up to five users or teams as manual approvers.
    One of these approvers must approve the deployment before it is executed.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**必需的审查员**：这些审查员包括最多五个用户或团队作为手动批准者。在执行部署之前，必须由其中一位批准者批准部署。'
- en: '**Wait timer**: This refers to a grace period that the deployment will wait
    before executing. The maximum time is 43,200 minutes or 30 days. Additionally,
    you can use an API to cancel the deployment if you find any errors at a previous
    stage.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**等待计时器**：指的是部署执行前的宽限期。最大时间为 43,200 分钟或 30 天。此外，如果你在之前的阶段发现任何错误，可以使用 API 来取消部署。'
- en: '`Protected branches` or define your own pattern. The pattern can include wildcards
    (such as `release/*`).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`受保护的分支` 或者定义你自己的模式。该模式可以包含通配符（例如 `release/*`）。'
- en: '**Environment secrets**: Secrets in an environment override secrets from the
    repository or organization scope. The secrets are only loaded after the required
    reviewers have approved the deployment.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境密钥**：环境中的密钥会覆盖仓库或组织范围内的密钥。密钥只有在必需审核员批准部署后才会加载。'
- en: 'The configuration looks similar to *Figure 9.1*:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 配置看起来类似于 *图 9.1*：
- en: '![Figure 9.1 – Configuring an environment in GitHub'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.1 – 在 GitHub 中配置环境'
- en: '](img/B17827_09_001.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_09_001.jpg)'
- en: Figure 9.1 – Configuring an environment in GitHub
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1 – 在 GitHub 中配置环境
- en: 'In the workflow file, you specify the environment at the job level:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作流文件中，你需要在作业级别指定环境：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Additionally, you can specify a URL that is then displayed on the overview
    page:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还可以指定一个 URL，该 URL 将显示在概览页面上：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'With the `needs` keyword, you can define dependencies between jobs and, therefore,
    environments (see *Figure 9.2*):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `needs` 关键字，你可以定义作业之间的依赖关系，因此也定义了环境之间的依赖（见 *图 9.2*）：
- en: '![Figure 9.2 – The overview page for staged deployments'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.2 – 阶段性部署的概览页面'
- en: '](img/B17827_09_002.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_09_002.jpg)'
- en: Figure 9.2 – The overview page for staged deployments
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2 – 阶段性部署的概览页面
- en: 'The status of the environments is also displayed on the home page of the repository
    (see *Figure 9.3*):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 环境的状态也会显示在仓库的主页上（见 *图 9.3*）：
- en: '![Figure 9.3 – Environments on the home page'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.3 – 主页上的环境'
- en: '](img/B17827_09_003.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_09_003.jpg)'
- en: Figure 9.3 – Environments on the home page
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3 – 主页上的环境
- en: If you want to play around with the environments, you can run the **Staged Deployment**
    workflow in the fork of [https://github.com/wulfland/AccelerateDevOps/](https://github.com/wulfland/AccelerateDevOps/)
    and add yourself as a required reviewer for some stages.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在不同环境中进行实验，你可以在 [https://github.com/wulfland/AccelerateDevOps/](https://github.com/wulfland/AccelerateDevOps/)
    的分支上运行 **阶段性部署** 工作流，并将自己添加为某些阶段的必需审核员。
- en: Automating your deployments
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化你的部署
- en: If I ask my customers whether they have automated their deployments, normally,
    the answer is *yes*. However, on closer look, automation means *we have a script*,
    or *we have an answer file for an installer*. That is only partial automation.
    As long as someone has to log in to a server, create accounts or DNS records,
    or manually configure a firewall, your deployment is not automated!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我问我的客户是否自动化了他们的部署，通常的回答是 *是*。然而，仔细一看，自动化意味着 *我们有一个脚本*，或者 *我们有一个安装程序的回答文件*。这只是部分自动化。只要有人需要登录服务器、创建账户或
    DNS 记录，或手动配置防火墙，那么你的部署就没有完全自动化！
- en: Humans make mistakes – machines do not! Make sure you automate all the steps
    of your deployment and not just the last steps. Since GitHub Actions is the perfect
    automation engine, it is a good practice to have a workflow execute all of your
    automated deployments.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 人类会犯错——机器不会！确保你自动化了部署的所有步骤，而不仅仅是最后几个步骤。由于 GitHub Actions 是完美的自动化引擎，执行所有自动化部署的工作流是一个很好的做法。
- en: How to deploy to Azure App Service
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何部署到 Azure App Service
- en: 'To get you started with automated deployments with GitHub Actions, I created
    three hands-on labs:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助你快速入门使用 GitHub Actions 进行自动化部署，我创建了三个实操实验：
- en: Deploying to Azure App Service
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到 Azure App Service
- en: Deploying to AWS ECS
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到 AWS ECS
- en: Deploying to GKE
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到 GKE
- en: All hands-on labs assume that you have an account set up in the specified cloud.
    If you have a single-cloud strategy, you can simply jump to the hands-on step
    that's relevant for you and skip the others.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所有实操实验假设你已经在指定的云平台上设置了帐户。如果你采用单云策略，你可以直接跳到与你相关的实操步骤，跳过其他部分。
- en: The step-by-step instructions for the hands-on lab are located in GitHub at
    [https://github.com/wulfland/AccelerateDevOps/blob/main/ch9_release/Deploy_to_Azure_App_Service.md](https://github.com/wulfland/AccelerateDevOps/blob/main/ch9_release/Deploy_to_Azure_App_Service.md).
    It is recommended that you follow the steps there, as it provides links that are
    easy to copy and paste. Here, I will explain the background as a step-by-step
    guide with a focus on how to deploy the application.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 实操实验的逐步指导位于 GitHub，链接为 [https://github.com/wulfland/AccelerateDevOps/blob/main/ch9_release/Deploy_to_Azure_App_Service.md](https://github.com/wulfland/AccelerateDevOps/blob/main/ch9_release/Deploy_to_Azure_App_Service.md)。建议按照那里提供的步骤进行操作，因为它提供了易于复制和粘贴的链接。这里，我将以逐步指南的形式，重点介绍如何部署应用程序。
- en: Deployment of Azure resources
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署 Azure 资源
- en: 'The deployment of the Azure resources takes place in the `setup-azure.sh` script.
    It creates a resource group, an app service plan, and an app service. You could
    easily execute the script in a workflow. After the deployment, we get the `publish`
    profile from the web app and store it inside a secret in GitHub. You can either
    get the publish profile in the Azure portal or from the Azure CLI:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 资源的部署发生在 `setup-azure.sh` 脚本中。该脚本创建资源组、应用服务计划和应用服务。你可以轻松地在工作流中执行该脚本。部署完成后，我们从
    Web 应用中获取 `publish` 配置文件并将其存储在 GitHub 的密钥中。你可以通过 Azure 门户或 Azure CLI 获取发布配置文件：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Deploying the application with GitHub Actions
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 部署应用程序
- en: 'The workflow consists of two jobs: `Build` and `Deploy`. The build job configures
    the runner for the correct `dotnet publish` to publish the website to a folder
    named `publish`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流由两个任务组成：`Build` 和 `Deploy`。构建任务为正确的 `dotnet publish` 配置运行器，将网站发布到名为 `publish`
    的文件夹中：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The next step uploads the artifact to GitHub so that it can be used in subsequent
    jobs. This allows you to publish the same package to multiple environments:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步将工件上传到 GitHub，以便在后续任务中使用。这允许你将相同的包发布到多个环境：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Additionally, you can see and inspect the artifact after the workflow has been
    completed (see *Figure 9.4*):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还可以在工作流完成后查看并检查工件（见 *图 9.4*）：
- en: '![Figure 9.4 – Workflow artifacts'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.4 – 工作流工件'
- en: '](img/B17827_09_004.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_09_004.jpg)'
- en: Figure 9.4 – Workflow artifacts
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4 – 工作流工件
- en: 'The `Deploy` job depends on `Build` and deploys to the `prod` environment.
    Within the environment, you set the secret and add a required reviewer:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`Deploy` 任务依赖于 `Build`，并将应用程序部署到 `prod` 环境。在环境内，你设置了密钥并添加了一个必要的审阅者：'
- en: '[PRE21]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The workflow downloads the artifact, named `website`, into a folder called
    `website`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流将工件名为 `website` 的文件下载到一个名为 `website` 的文件夹中：
- en: '[PRE25]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, it uses the `azure/webapps-deploy` action to deploy the website using
    the publish profile:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它使用 `azure/webapps-deploy` 操作，使用发布配置文件部署网站：
- en: '[PRE29]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The last step is just an example of how you could validate a deployment. Of
    course, you would have to `curl` a URL to a site that also targets the database:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步仅是一个示例，展示如何验证部署。当然，你需要使用 `curl` 请求一个同时也指向数据库的站点 URL：
- en: '[PRE36]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: If you complete the step-by-step guide in the hands-on lab, you will have a
    playground where you can add additional environments and deploy to different App
    Service deployment slots (for more information, please visit [https://docs.microsoft.com/en-us/azure/app-service/deploy-staging-slots](https://docs.microsoft.com/en-us/azure/app-service/deploy-staging-slots)).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你完成了实操实验中的逐步指南，你将拥有一个可以添加额外环境并部署到不同应用服务部署槽的游乐场（更多信息，请访问 [https://docs.microsoft.com/en-us/azure/app-service/deploy-staging-slots](https://docs.microsoft.com/en-us/azure/app-service/deploy-staging-slots)）。
- en: How to deploy to AWS ECS
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何部署到 AWS ECS
- en: We will deploy the same code to **AWS** – but this time, we will do so from
    a **Docker** container to **ECS**. ECS is a highly scalable container management
    service that allows you to run, stop, and manage containers on a cluster. You
    can find the step-by-step guide at [https://github.com/wulfland/AccelerateDevOps/blob/main/ch9_release/Deploy_to_AWS_ECS.md](https://github.com/wulfland/AccelerateDevOps/blob/main/ch9_release/Deploy_to_AWS_ECS.md).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将部署相同的代码到 **AWS**，但这次，我们将通过 **Docker** 容器部署到 **ECS**。ECS 是一种高度可扩展的容器管理服务，允许你在集群中运行、停止和管理容器。你可以在
    [https://github.com/wulfland/AccelerateDevOps/blob/main/ch9_release/Deploy_to_AWS_ECS.md](https://github.com/wulfland/AccelerateDevOps/blob/main/ch9_release/Deploy_to_AWS_ECS.md)
    上找到逐步指导。
- en: Here are some additional notes and background information.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些附加说明和背景信息。
- en: Deployment of AWS resources
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS 资源的部署
- en: I could not find an easy script in which I could deploy everything to AWS that
    did not also include some complex JSON. That's why I'm using the manual steps
    in the hands-on lab. First, you create an `Access Key ID` and `Secret Access Key`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我找不到一个简单的脚本，可以将所有内容部署到 AWS，而且不包含一些复杂的 JSON。这就是为什么我使用实验中的手动步骤。首先，你需要创建一个 `Access
    Key ID` 和 `Secret Access Key`。
- en: After the first deployment, the container is in the registry, and you can use
    it together with the wizard to set up your ECS resources.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次部署之后，容器已经在注册表中，你可以通过向导与它一起设置你的 ECS 资源。
- en: You have to extract your task definition and save it to the `aws-task-definition.json`
    file. The second time the workflow runs, it successfully deploys the container
    to ECS.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要提取任务定义并将其保存到 `aws-task-definition.json` 文件中。工作流第二次运行时，它会成功地将容器部署到 ECS。
- en: Deploying the container with GitHub Actions
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 部署容器
- en: 'I also split up the workflow into a `Build` stage and a `Deploy` stage. This
    enables you to easily add environments and more stages later. For this to work,
    you must pass the image name from the `Build` job to the `Deploy` job. To do this,
    you can use `job outputs`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我还将工作流分为 `Build` 阶段和 `Deploy` 阶段。这样可以让你轻松地在之后添加环境和更多的阶段。为了使其生效，你必须将镜像名称从 `Build`
    作业传递给 `Deploy` 作业。为此，你可以使用 `job outputs`：
- en: '[PRE43]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: To configure the authentication, we use the `configure-aws-credentials` action
    with the `Access Key ID` and `Secret Access Key` values.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置认证，我们使用 `configure-aws-credentials` 操作，传入 `Access Key ID` 和 `Secret Access
    Key` 值。
- en: 'Note that GitHub masks part of the image name and does not pass it to the next
    job. To avoid this, you must prevent the `configure-aws-credentials` action from
    masking your account ID:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，GitHub 会隐藏部分镜像名称，并不会将其传递到下一个作业。为了避免这种情况，你必须防止 `configure-aws-credentials`
    操作隐藏你的账户 ID：
- en: '[PRE48]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The login to ECR returns the name of the registry that you use in the subsequent
    action:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 登录 ECR 返回你在后续操作中使用的注册表名称：
- en: '[PRE55]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'In the next step, you build the image and push it to ECR. Additionally, you
    set the output for the next job:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，你构建镜像并将其推送到 ECR。此外，你设置了下一个作业的输出：
- en: '[PRE58]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'The next job depends on `Build` and runs on the `prod` environment:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个作业依赖于 `Build`，并在 `prod` 环境中运行：
- en: '[PRE70]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Additionally, it has to configure the AWS credentials and then configure the
    `aws-task-definition.json` file using the image name that has been passed to the
    job access through the `needs` context:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它需要配置 AWS 凭证，然后使用通过 `needs` 上下文传递给作业访问的镜像名称配置 `aws-task-definition.json`
    文件：
- en: '[PRE74]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The last step is to deploy the container with the output of the previous task:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是使用前一步任务的输出部署容器：
- en: '[PRE81]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: If you perform the step-by-step guide, you have a staged working workflow that
    deploys to ECS. You can add more stages and run different versions of the container
    in different services.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你按照逐步指南操作，你将拥有一个分阶段的工作流，能够部署到 ECS。你可以添加更多阶段，并在不同的服务中运行不同版本的容器。
- en: How to deploy to GKE
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何部署到 GKE
- en: We also deploy the same code to GKE. You can find the hands-on steps at [https://github.com/wulfland/AccelerateDevOps/blob/main/ch9_release/Deploy_to_GKE.md](https://github.com/wulfland/AccelerateDevOps/blob/main/ch9_release/Deploy_to_GKE.md).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也将相同的代码部署到 GKE。你可以在 [https://github.com/wulfland/AccelerateDevOps/blob/main/ch9_release/Deploy_to_GKE.md](https://github.com/wulfland/AccelerateDevOps/blob/main/ch9_release/Deploy_to_GKE.md)
    找到操作步骤。
- en: Before you perform these hands-on steps, here are some details regarding what
    is happening.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行这些操作步骤之前，这里有一些关于发生的事情的详细信息。
- en: Deployment of Google resources
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Google 资源的部署
- en: 'The complete deployment happens in the `setup-gke.sh` script that you execute
    in Cloud Shell. The script creates a GKE cluster with one node. For testing purposes,
    this is enough:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的部署过程发生在你在 Cloud Shell 中执行的 `setup-gke.sh` 脚本中。该脚本会创建一个包含一个节点的 GKE 集群。为了测试目的，这足够了：
- en: '[PRE88]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Additionally, the script creates an artifact repository for Docker containers
    and a service account to perform the deployments.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，脚本还创建了一个用于 Docker 容器的制品库和一个用于执行部署的服务账户。
- en: 'In Kubernetes, there is the concept of `Deployment.yaml`. The deployment defines
    the container and binds it to an image:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，有一个名为 `Deployment.yaml` 的概念。部署定义了容器并将其绑定到镜像：
- en: '[PRE89]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'I use environment variables in the file and replace them with `envsubst` before
    passing them to the `kubectl apply` command:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我在文件中使用环境变量，并在将它们传递给 `kubectl apply` 命令之前，使用 `envsubst` 进行替换：
- en: '[PRE98]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'A service exposes the pods – in this case, to the internet. The service is
    deployed, in the same way, using the `Service.yml` file:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 一个服务暴露了 Pods —— 在这个例子中，暴露到互联网。该服务使用 `Service.yml` 文件以相同的方式进行部署：
- en: '[PRE99]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'The deployment of the service takes some time. You might have to execute the
    following command multiple times:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 服务的部署需要一些时间。你可能需要多次执行以下命令：
- en: '[PRE106]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'If you get an external IP address, you can use it to test your deployment (see
    *Figure 9.5*):'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你获得了外部 IP 地址，可以使用它来测试你的部署（见 *图 9.5*）：
- en: '![Figure 9.5 – Getting the external IP of the GKE LoadBalancer'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.5 – 获取 GKE 负载均衡器的外部 IP](img/B17827_09_005.jpg)'
- en: '](img/B17827_09_005.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_09_005.jpg)'
- en: Figure 9.5 – Getting the external IP of the GKE LoadBalancer
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5 – 获取 GKE 负载均衡器的外部 IP
- en: 'The credentials of the service account are in the `key.json` file. You have
    to encode them and save them inside an encrypted secret in GitHub, named `GKE_SA_KEY`:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 服务帐户的凭证保存在`key.json`文件中。你必须对它们进行编码，并将它们保存为 GitHub 中的加密密钥，名为`GKE_SA_KEY`：
- en: '[PRE107]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: The script has already done this. So, you can just copy the output and paste
    it to the secret.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本已经完成了这个步骤。所以，你只需要复制输出并将其粘贴到密钥中。
- en: Deploying the container with GitHub Actions
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 部署容器
- en: 'The deployment in the GitHub Actions workflow is straightforward. The authentication
    and setup of the `gcloud` CLI take place in the `setup-gcloud` action:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 工作流中的部署非常直接。`gcloud` CLI 的身份验证和设置发生在`setup-gcloud`操作中：
- en: '[PRE108]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'The workflow then builds and pushes the container to the registry. It uses
    `gcloud` to authenticate to the Docker registry:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，工作流会构建并将容器推送到注册表。它使用`gcloud`进行 Docker 注册表的身份验证：
- en: '[PRE113]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'To deploy the new image to GKE, we authenticate using the `get-gke-credentials`
    action:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 要将新镜像部署到 GKE，我们使用`get-gke-credentials`操作进行身份验证：
- en: '[PRE116]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'Following this, we just replace the variables in the deployment files and pass
    them to `kubectl apply`:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们只需替换部署文件中的变量，并将它们传递给`kubectl apply`：
- en: '[PRE121]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: That's it. Following the hands-on steps, you should have a working copy of a
    deployment to GKE!
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。按照这些操作步骤，你应该能成功部署到 GKE！
- en: Deployments to Kubernetes
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 部署到 Kubernetes
- en: 'Deployments to Kubernetes can be very complex; however, this is beyond the
    scope of this book. There are different strategies that you can use: **recreate**,
    **rolling updates** (also known as **ramped updates**), **blue/green deployments**,
    **canary deployments**, and **A/B testing**. A good starting point is the official
    documentation, which can be found at [https://kubernetes.io/docs/concepts/workloads/controllers/](https://kubernetes.io/docs/concepts/workloads/controllers/).
    Additionally, a useful visualization of the strategies along with practical examples
    of how to perform the deployments can be found at [https://github.com/ContainerSolutions/k8s-deployment-strategies](https://github.com/ContainerSolutions/k8s-deployment-strategies).'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 部署到 Kubernetes 可能非常复杂；不过，这超出了本书的范围。你可以使用不同的策略：**重建**、**滚动更新**（也称为**渐进更新**）、**蓝绿部署**、**金丝雀部署**和**A/B
    测试**。一个很好的起点是官方文档，可以在[https://kubernetes.io/docs/concepts/workloads/controllers/](https://kubernetes.io/docs/concepts/workloads/controllers/)找到。此外，关于这些策略的实用可视化以及如何执行部署的实际示例，可以在[https://github.com/ContainerSolutions/k8s-deployment-strategies](https://github.com/ContainerSolutions/k8s-deployment-strategies)找到。
- en: There are also many other tools that you can leverage when working with Kubernetes.
    For instance, **Helm** ([https://helm.sh/](https://helm.sh/)) is a package manager
    for Kubernetes, and **Kustomize** ([https://kustomize.io/](https://kustomize.io/))
    is a tool that can help you manage multiple configurations.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在与 Kubernetes 配合使用时，还有许多其他工具可供利用。例如，**Helm**（[https://helm.sh/](https://helm.sh/)）是
    Kubernetes 的包管理器，而 **Kustomize**（[https://kustomize.io/](https://kustomize.io/)）是一个帮助你管理多个配置的工具。
- en: Infrastructure as code
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础设施即代码
- en: '**Infrastructure as code** (**IaC**) is the process of managing and provisioning
    all your infrastructure resources through machine-readable files. Often, these
    files are versioned and managed in Git-like code. In this case, it is often referred
    to as **GitOps**.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '**基础设施即代码**（**IaC**）是通过机器可读文件来管理和提供所有基础设施资源的过程。通常，这些文件会进行版本控制，并像代码一样在 Git 中管理。在这种情况下，通常称为
    **GitOps**。'
- en: '*IaC* can be imperative, declarative, or a mix of both. Imperative means the
    files are procedural, such as scripts, whereas declarative refers to a functional
    approach that describes the desired state in a markup language such as YAML or
    JSON. To get the full power of *IaC*, you should manage it in a way where you
    can also apply changes, not just complete provisioning and deprovisioning. This
    is often referred to as **Continuous Configuration Automation** (**CCA**).'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '*IaC* 可以是命令式的、声明式的，或者两者的结合。命令式意味着文件是过程性的，例如脚本，而声明式则是指使用 YAML 或 JSON 等标记语言描述期望状态的功能性方法。为了充分发挥*IaC*的能力，你应该以一种可以应用更改而不仅仅是完成配置和撤销配置的方式来管理它。这通常被称为**持续配置自动化**（**CCA**）。'
- en: Tools
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具
- en: 'There are many tools that you can use for *IaC* and *CCA*. For instance, there
    are cloud-specific tools such as **Azure ARM**, **Bicep**, or **AWS CloudFormation**.
    However, there are also many independent tools that you can use for on-premises
    infrastructure. Some of the most popular are listed as follows:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多工具可以用于*IaC*和*CCA*。例如，有些是云特定工具，如**Azure ARM**、**Bicep**或**AWS CloudFormation**。然而，也有许多独立的工具可以用于本地基础设施。以下是一些最受欢迎的工具：
- en: '**Puppet**: This was released by Puppet in 2005 ([https://puppet.com](https://puppet.com)).'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Puppet**：这是由 Puppet 于 2005 年发布的 ([https://puppet.com](https://puppet.com))。'
- en: '**Chef**: This was released by Chef in 2009 ([https://www.chef.io](https://www.chef.io)).'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chef**：这是由 Chef 于 2009 年发布的 ([https://www.chef.io](https://www.chef.io))。'
- en: '**Ansible**: This was released by RedHat in 2021 ([https://www.ansible.com](https://www.ansible.com)).'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ansible**：这是由 RedHat 于 2021 年发布的 ([https://www.ansible.com](https://www.ansible.com))。'
- en: '**Terraform**: This was released by HashiCorp in 2014 ([https://www.terraform.io](https://www.terraform.io)).'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Terraform**：这是由 HashiCorp 于 2014 年发布的 ([https://www.terraform.io](https://www.terraform.io))。'
- en: '**Pulumi**: This was released 2017 by Pulumi ([https://www.pulumi.com](https://www.pulumi.com)).'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pulumi**：这是由 Pulumi 于 2017 年发布的 ([https://www.pulumi.com](https://www.pulumi.com))。'
- en: IaC and Multi-Cloud Deployments
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IaC 和多云部署
- en: Note that an *IaC* tool supporting multiple cloud providers does not mean it
    can deploy the same resources to multiple clouds! This is a common misconception.
    You still have to write cloud-specific automations. But you can use the same syntax
    and tooling.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，支持多个云提供商的*IaC* 工具并不意味着它可以将相同的资源部署到多个云！这是一个常见的误解。你仍然需要编写特定于云的自动化脚本。但你可以使用相同的语法和工具。
- en: This is just the tip of the iceberg. There are many tools on the market. The
    process of finding the best combination can be very complex and is beyond the
    scope of this book. If you have a single-cloud strategy, it's probably best if
    you just start with the cloud-native tools. If you have a complex environment
    with multiple clouds and on-premises resources and you want to manage them all
    with the same tooling, you must invest in doing a detailed analysis.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是冰山一角。市场上有许多工具。找到最佳组合的过程可能非常复杂，超出了本书的范围。如果你采用单云策略，可能最好从云原生工具开始。如果你有一个复杂的环境，涉及多个云和本地资源，并希望用相同的工具进行管理，你必须投入时间做详细分析。
- en: Best practices
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最佳实践
- en: 'Independent of the tool you are using, there are some things you should consider
    when implementing *IaC*:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你使用什么工具，在实现*IaC*时，有一些事情需要考虑：
- en: Store the configuration in Git and treat it like code using protected branches,
    pull requests, and code owners. Code owners are a great way to ensure compliance,
    particularly if you store it close to the application code.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将配置存储在 Git 中，并像管理代码一样使用受保护的分支、拉取请求和代码所有者。代码所有者是确保合规性的好方法，特别是当你将其存储在接近应用程序代码的位置时。
- en: Execute the deployment using GitHub Actions. It's okay to publish the resources
    interactively while *writing* and debugging your IaC. However, once you are finished,
    you should have complete automated publishing that is done via a workflow. IaC
    is code, and, as with application code, deploying it from a developer machine
    comes with the risk of not being reproducible.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 执行部署。虽然在*编写*和调试 IaC 时可以交互式发布资源，但一旦完成，你应该通过工作流实现完全自动化的发布。IaC
    就是代码，和应用程序代码一样，从开发者机器上部署它存在无法复现的风险。
- en: Secrets and key management are the most critical parts of IaC. Make sure that
    you do not save them in the code but keep them in a secure place (such as GitHub
    Secrets). A vault such as **Hashicorp Vault** or **Azure KeyVault** allows for
    easy key rotation if one of your secrets is compromised. Additionally, it decouples
    your secure management from the provisioning of resources.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 秘密和密钥管理是IaC中最关键的部分。确保不要将它们保存在代码中，而是将它们存储在安全的地方（例如GitHub Secrets）。像**Hashicorp
    Vault**或**Azure KeyVault**这样的金库可以在其中一个秘密泄露时轻松进行密钥轮换。此外，它还将你的安全管理与资源配置解耦。
- en: When possible, use **OpenID Connect** (**OIDC**). This is to avoid using credentials
    to access cloud resources but short-lived tokens instead, which can also be rotated
    (for more information, please refer to [https://docs.github.com/en/actions/deployment/security-hardening-your-deployments](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments)).
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可能，使用**OpenID Connect**（**OIDC**）。这是为了避免使用凭证来访问云资源，而是使用短期的令牌，这些令牌也可以轮换（更多信息请参考[https://docs.github.com/en/actions/deployment/security-hardening-your-deployments](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments)）。
- en: I use the cloud-native tools in this book. It is easier to transition from them
    to an *IaC* or *CCA* tool than vice versa.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我在本书中使用了云原生工具。从这些工具过渡到*IaC*或*CCA*工具比反过来要容易。
- en: Strategies
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 策略
- en: 'There are different strategies regarding how to organize your infrastructure
    code in a manageable, scalable, and compliant way. Essentially, it depends on
    your organizational structure and which one is the best for you. They are as follows:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何以可管理、可扩展和符合要求的方式组织你的基础设施代码，有不同的策略。本质上，这取决于你的组织结构以及哪种方式最适合你。以下是一些常见策略：
- en: '**Central**: The infrastructure resources live in central repositories, and
    feature teams can provision from there using a self-service (that is, triggering
    a workflow). This approach has the benefit of having all resources in one place,
    and the responsible unit will have strong control over it. The disadvantage is
    that it is not very flexible for developers and that the *distance* from the code
    to the infrastructure will impact the way the engineers treat the infrastructure.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中式**：基础设施资源存放在中央仓库中，功能团队可以通过自服务（即触发工作流）从中配置。这种方法的优点是所有资源都集中在一个地方，责任单位可以对其进行强有力的控制。缺点是对开发人员来说灵活性较差，而且从代码到基础设施的*距离*会影响工程师对基础设施的处理方式。'
- en: '**Decentral**: The infrastructure resources live alongside the code. You can
    use templates (please refer to the *Workflow templates* section) to help engineering
    teams set up the infrastructure. Additionally, you can use **CODEOWNERS** and
    protected branches to require approval from a shared, responsible team. This approach
    is very flexible, but the control of costs and governance are more difficult.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分散式**：基础设施资源与代码一起存放。你可以使用模板（请参考*工作流模板*部分）帮助工程团队设置基础设施。此外，你还可以使用**CODEOWNERS**和受保护分支来要求由共享责任团队进行审批。这种方法非常灵活，但成本控制和治理更加困难。'
- en: You could deploy – or ensure the correct state of – the infrastructure with
    every build. But this would slow down build times and cost valuable build minutes.
    In most cases, it is preferable to deploy the resources in a separate workflow
    on demand.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在每次构建时部署——或者确保基础设施处于正确的状态。但这样会减慢构建速度并消耗宝贵的构建时间。在大多数情况下，最好在需要时通过单独的工作流部署资源。
- en: '**Templated**: The team that is responsible for the shared infrastructure provides
    fixed templates that can be used by the feature teams. The templates could be
    **Actions**, that is, composite actions with preconfigured native actions or completely
    customized ones in Docker or JavaScript. Alternatively, you can use a reusable
    workflow (refer to the *Reusable workflows* section). In any case, the ownership
    of the reused workflow or action stays with the central team. This approach works
    well if you limit the number of allowed actions within your enterprise.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板化**：负责共享基础设施的团队提供固定的模板，功能团队可以使用这些模板。这些模板可以是**Actions**，即预配置的本地动作的复合动作，或者是完全自定义的Docker或JavaScript动作。或者，你可以使用可复用的工作流（请参考*可复用工作流*部分）。无论哪种方式，被复用的工作流或动作的所有权仍然属于中央团队。如果你限制企业中允许的动作数量，这种方法效果很好。'
- en: '**Mixed**: This is a mix of the preceding three strategies. For example, the
    test and development infrastructures could be decentralized, and production environments
    could be templated.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混合**：这是前三种策略的结合。例如，测试和开发基础设施可以是去中心化的，而生产环境则可以是模板化的。'
- en: No matter which strategy you use, be intentional about it. The solution will
    greatly impact how your teams work together and how infrastructure is used in
    value delivery!
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您使用哪种策略，都要有意识地去选择。解决方案将大大影响您的团队协作方式以及基础设施在价值交付中的使用！
- en: Workflow templates
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作流模板
- en: '`workflow-templates` folder in the `.github` repository of an organization
    alongside a metadata file and an icon file (see *Figure 9.6*):'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`.github` 仓库中的 `workflow-templates` 文件夹，包含元数据文件和图标文件（见*图 9.6*）：'
- en: '![Figure 9.6 – Workflow templates for an organization'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.6 – 组织的工作流模板'
- en: '](img/B17827_09_006.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_09_006.jpg)'
- en: Figure 9.6 – Workflow templates for an organization
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6 – 组织的工作流模板
- en: The template itself is a normal workflow file. You can use the `$default-branch`
    variable for triggers to filter by the default branch.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 模板本身是一个普通的工作流文件。您可以使用 `$default-branch` 变量在触发器中按默认分支进行过滤。
- en: 'Along with the template, you need to save an icon in `.svg` format and a properties
    file. The properties file looks like this:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 除模板外，您还需要保存一个 `.svg` 格式的图标和一个属性文件。属性文件如下所示：
- en: '[PRE123]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'Here, the `name`, `description`, and `iconName` values are required. Note that
    the `iconName` value is without the extension. In the `categories` array, you
    can specify the coding languages that this workflow template is relevant for.
    The same is true for file patterns: you can specify patterns for certain files
    in the user''s repository. The template will be displayed more prominently if
    the repository contains files that match a pattern.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在此，`name`、`description` 和 `iconName` 是必需的。请注意，`iconName` 值不包含扩展名。在 `categories`
    数组中，您可以指定该工作流模板相关的编程语言。对于文件模式也是一样的：您可以为用户的仓库中的特定文件指定模式。如果仓库中包含与某个模式匹配的文件，则模板会被更加显著地展示。
- en: 'Now if a user of the organization creates a new workflow, they are presented
    with the templates of the organization (see *Figure 9.7*):'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果组织的用户创建了一个新的工作流，他们将看到该组织的模板（见*图 9.7*）：
- en: '![Figure 9.7 – Creating a workflow from a template'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.7 – 从模板创建工作流'
- en: '](img/B17827_09_007.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_09_007.jpg)'
- en: Figure 9.7 – Creating a workflow from a template
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.7 – 从模板创建工作流
- en: The template has been copied and *can be modified*! That's why workflow templates
    are not suitable for the templated strategy.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 模板已被复制并*可以修改*！这就是为什么工作流模板不适合用于模板化策略的原因。
- en: To learn more about workflow templates, please visit [https://docs.github.com/en/actions/learn-github-actions/creating-workflow-templates](https://docs.github.com/en/actions/learn-github-actions/creating-workflow-templates).
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于工作流模板的信息，请访问 [https://docs.github.com/en/actions/learn-github-actions/creating-workflow-templates](https://docs.github.com/en/actions/learn-github-actions/creating-workflow-templates)。
- en: Reusable workflows
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可重用工作流
- en: 'A `workflow_call` trigger to be reusable:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`workflow_call` 触发器是可重用的：'
- en: '[PRE136]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'You can define inputs that can be passed to the workflow. Inputs can be `boolean`,
    `number`, `string`, or a **secret**:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以定义可以传递给工作流的输入。输入可以是 `boolean`、`number`、`string` 或 **secret**：
- en: '[PRE138]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: You can access the inputs in the reusable workflow using the `inputs` context
    (`${{ inputs.my_environment }}`) and the secrets using the `secrets` context (`${{
    secrets.my_token }}`).
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过 `inputs` 上下文（`${{ inputs.my_environment }}`）访问可重用工作流中的输入，通过 `secrets`
    上下文（`${{ secrets.my_token }}`）访问机密。
- en: 'To use a reusable workflow, you have to reference the file in the following
    format:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用可重用工作流，您必须按以下格式引用该文件：
- en: '[PRE150]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'The workflow is called in a job, and you specify the inputs and secrets as
    follows:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流在作业中被调用，您可以按如下方式指定输入和机密：
- en: '[PRE151]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: Reusable workflows are perfect to avoid duplication. Together with semantic
    versioning and tags, this is a great way to release reusable workflows to the
    teams in your organization.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 可重用工作流非常适合避免重复。结合语义版本控制和标签，这是将可重用工作流发布到您组织中团队的绝佳方式。
- en: To learn more about reusable workflows, please visit [https://docs.github.com/en/actions/learn-github-actions/reusing-workflows](https://docs.github.com/en/actions/learn-github-actions/reusing-workflows).
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于可重用工作流的信息，请访问 [https://docs.github.com/en/actions/learn-github-actions/reusing-workflows](https://docs.github.com/en/actions/learn-github-actions/reusing-workflows)。
- en: Measuring success
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 衡量成功
- en: In [*Chapter 1*](B17827_01_Epub.xhtml#_idTextAnchor016), *Metrics that Matter*,
    I introduced you to the **Four Keys dashboard**. This is a dashboard that displays
    the DORA metrics. If you deploy automatically to production, it's time to shift
    from surveys to real metrics. The dashboard is one way to do this.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 1 章*](B17827_01_Epub.xhtml#_idTextAnchor016)，*重要的指标* 中，我向你介绍了 **四个关键指标仪表盘**。这是一个显示
    DORA 指标的仪表盘。如果你自动将代码部署到生产环境，现在是从调查数据转向真实的指标了。仪表盘是实现这一目标的一种方式。
- en: To install the dashboard, follow the instructions at [https://github.com/GoogleCloudPlatform/fourkeys/blob/main/setup/README.md](https://github.com/GoogleCloudPlatform/fourkeys/blob/main/setup/README.md).
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装仪表盘，请按照 [https://github.com/GoogleCloudPlatform/fourkeys/blob/main/setup/README.md](https://github.com/GoogleCloudPlatform/fourkeys/blob/main/setup/README.md)
    中的说明操作。
- en: 'First, create a project in Google Cloud with billing enabled and note the project
    ID (not the name!). Then, open **Google Cloud Shell** (located at [https://cloud.google.com/shell](https://cloud.google.com/shell)),
    clone the repository, and execute the deployment script:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 Google Cloud 中创建一个启用计费的项目，并记下项目 ID（不是名称！）。然后，打开 **Google Cloud Shell**（位于
    [https://cloud.google.com/shell](https://cloud.google.com/shell)），克隆仓库并执行部署脚本：
- en: '[PRE158]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'The script asks you some questions that you can use to tailor your deployment.
    If everything went well, you should see a nice dashboard in Grafana. To configure
    GitHub to send data to the event handlers in Google, you have to get the event
    handler endpoint and secret. Just execute the following two commands in Cloud
    Shell and copy the output:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本会问你一些问题，你可以根据这些问题来定制你的部署。如果一切顺利，你应该能在 Grafana 中看到一个漂亮的仪表盘。要配置 GitHub 将数据发送到
    Google 的事件处理程序，你需要获取事件处理程序的端点和密钥。只需在 Cloud Shell 中执行以下两个命令并复制输出：
- en: '[PRE159]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: 'Now, head over to the repository in GitHub where you want to send data to the
    dashboard and create a webhook under **Setting** | **Webhooks** | **Add webhook**.
    Paste the URL of the event handler and the secret into the fields and select **Send
    me everything**. Click on **Add webhook** to start sending all the events to the
    event handler (see *Figure 9.8*):'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，前往你希望将数据发送到仪表盘的 GitHub 仓库，在 **设置** | **Webhooks** | **添加 webhook** 下创建一个
    webhook。将事件处理程序的 URL 和密钥粘贴到相应字段中，并选择 **发送所有事件**。点击 **添加 webhook** 以开始将所有事件发送到事件处理程序（见
    *图 9.8*）：
- en: '![Figure 9.8 – Adding a webhook to send data to the four keys dashboard'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.8 – 添加 webhook 以将数据发送到四个关键指标仪表盘'
- en: '](img/B17827_09_008_new.jpg)'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_09_008_new.jpg)'
- en: Figure 9.8 – Adding a webhook to send data to the four keys dashboard
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.8 – 添加 webhook 以将数据发送到四个关键指标仪表盘
- en: Unfortunately, you can currently only send the deployment data to the dashboard.
    In previous versions, you were able to send individual events to the workflows.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，目前你只能将部署数据发送到仪表盘。在之前的版本中，你可以将单独的事件发送到工作流。
- en: To indicate a live-site issue, you must add a tag named `Incident` to an open
    issue. In the body, you add `root cause:` followed by `SHA` of the commit that
    caused the event.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 要表示现场问题，你必须将名为 `Incident` 的标签添加到一个打开的 issue 中。在正文中，添加 `root cause:` 后跟导致事件的提交的
    `SHA`。
- en: 'The **Four Keys** dashboard is a nice way to view your DevOps metrics (see
    *Figure 9.9*):'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '**四个关键指标**仪表盘是查看你 DevOps 指标的一个好方法（见 *图 9.9*）：'
- en: '![Figure 9.9 – The Four Keys dashboard'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.9 – 四个关键指标仪表盘'
- en: '](img/B17827_09_009.jpg)'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17827_09_009.jpg)'
- en: Figure 9.9 – The Four Keys dashboard
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.9 – 四个关键指标仪表盘
- en: However, don't forget that these are not metrics to compare teams with each
    other. Don't let the metrics be the goal!
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，别忘了这些指标不是用来比较团队之间的表现的。不要让指标成为最终目标！
- en: Case study
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究
- en: With CI set up, the next thing our two pilot teams at **Tailwind Gears** need
    to do is automate the deployment and release processes of the software.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 CI 后，我们 **Tailwind Gears** 的两个试点团队接下来要做的事情是自动化软件的部署和发布流程。
- en: The first team runs some web applications that are still hosted on-premises.
    Instead of automating the on-premises deployment, the team moves the applications
    to a hosted **Kubernetes** service in the **cloud**. The cluster instances, network,
    and other cloud resources have already been set up by the IT department during
    the last sprints. Therefore, the team can easily transition the deployment to
    a staged deployment process. They deploy to a test instance and run all of the
    automated tests they have. They also add a test using **curl**, which calls a
    website that checks the database and backend accessibility to ensure everything
    is working as expected. If all tests pass, the deployment automatically deploys
    to production using a rolling update to ensure zero downtime for users.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个团队运行一些仍托管在本地的Web应用。团队决定将这些应用从本地部署迁移到云端的**Kubernetes**托管服务。集群实例、网络和其他云资源已由IT部门在过去的冲刺中设置好。因此，团队可以轻松地将部署转移到分阶段的部署流程中。他们将应用部署到测试实例，并运行所有自动化测试。同时，他们还添加了一个使用**curl**的测试，该测试调用一个网站，检查数据库和后端的可访问性，以确保一切正常。如果所有测试通过，部署将自动进行滚动更新，确保用户零停机时间地部署到生产环境。
- en: Some of the code of the web applications, which contains shared concerns, needs
    to be adjusted to work in the cloud. This code is also contained in web applications
    from other teams. The team decides to move the code to **GitHub Packages** (**NPM**
    for the JavaScript and **NuGet** for .NET) with its own release cycle and **semantic
    versioning** to allow other teams, in the future, to reuse the code easily when
    they move to the cloud.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 某些包含共享关注点的Web应用代码需要调整以便在云端工作。这些代码也包含在其他团队的Web应用中。团队决定将这些代码迁移到**GitHub Packages**（JavaScript使用**NPM**，.NET使用**NuGet**），并拥有自己的发布周期和**语义版本控制**，以便将来其他团队在迁移到云端时能更方便地重用这些代码。
- en: The second team produces software for hardware products that are used in machines
    for safety-critical functions. This means the development process is highly regulated.
    They are required to have end-to-end traceability for all changes they do. Since
    all the requirements were imported into GitHub issues and are linked using nested
    issues, this is not an issue. They just have to reference the lowest-level issue
    in the commit message. In addition to end-to-end traceability, there are some
    test documentations for different levels of requirements that are not yet automated.
    Plus there are some documents for risk management. To ensure all these criteria
    are met before releasing the product, **required reviewers** manually approve
    a release before deploying to production to ensure that all requirements are in
    place to be compliant. Together with **protected branches** and **codeowners**
    (the required documents were already converted into markdown), this reduces the
    effort of releasing a lot at once.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个团队为硬件产品开发软件，这些硬件产品用于机器中的安全关键功能。这意味着开发过程受到严格监管。他们需要对所有更改进行端到端的可追溯性。由于所有需求已导入GitHub问题，并通过嵌套问题进行链接，因此这不成问题。他们只需在提交信息中引用最低级别的问题。除了端到端的可追溯性外，还有一些不同级别需求的测试文档尚未实现自动化。另外，还有一些风险管理文档。为了确保在发布产品之前满足所有这些标准，**必需的审阅者**在部署到生产环境之前手动批准发布，以确保所有要求已到位并符合规范。结合**受保护的分支**和**代码所有者**（必需的文档已经转换为markdown），这减少了一次性发布大量内容的工作量。
- en: The installation of the binaries onto the hardware is performed by a custom
    tool that is owned by the company and runs on a machine in production. This tool
    is used to pick the binaries up from a file share. This was not optimal for end-to-end
    traceability and relied on log files. The deployment to test environments was
    performed manually, which means the way the binaries were distributed was not
    consistent. To address this, the team puts the binaries together with the tool
    in a **Docker container** and publishes the image to the **container registry**
    of GitHub Packages. The Docker image can then be used to transfer versions to
    test machines and during the assembly process in the same way.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制文件安装到硬件上是通过一款由公司拥有并在生产机器上运行的定制工具来执行的。该工具用于从文件共享中提取二进制文件。这对于端到端可追溯性并不理想，因为它依赖于日志文件。部署到测试环境是手动执行的，这意味着二进制文件的分发方式不一致。为了解决这个问题，团队将二进制文件和工具一起放入**Docker容器**，并将镜像发布到GitHub
    Packages的**容器注册表**。然后，可以使用Docker镜像将版本传输到测试机器，并在组装过程中以相同方式进行操作。
- en: Summary
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to use **GitHub environments** to stage and
    protect your deployments and how to use GitHub Actions to deploy to any cloud
    or platform in a secure manner. I demonstrated how to use workflow templates and
    reusable workflows to help you collaborate on your **IaC**.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，您学习了如何使用**GitHub 环境**来阶段性部署并保护您的部署，如何使用 GitHub Actions 安全地部署到任何云平台。我展示了如何使用工作流模板和可重用工作流来帮助您在**IaC**上进行协作。
- en: In the next chapter, you will learn how to optimize the rolling out of your
    features and the entire feature life cycle using **FeatureFlags**/**FeatureToggles**.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用**FeatureFlags**/**FeatureToggles**优化您的功能发布以及整个功能生命周期。
- en: Further reading
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'Here is a list of references from this chapter that you can also use to gain
    more information about the topics we discussed:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是本章中提到的参考资料列表，您也可以使用这些资料来获取更多关于我们讨论的主题的信息：
- en: 'CI/CD: [https://azure.microsoft.com/en-us/overview/continuous-delivery-vs-continuous-deployment](https://azure.microsoft.com/en-us/overview/continuous-delivery-vs-continuous-deployment)/'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CI/CD: [https://azure.microsoft.com/en-us/overview/continuous-delivery-vs-continuous-deployment](https://azure.microsoft.com/en-us/overview/continuous-delivery-vs-continuous-deployment)/'
- en: 'Deployment rings: [https://docs.microsoft.com/en-us/azure/devops/migrate/phase-rollout-with-rings](https://docs.microsoft.com/en-us/azure/devops/migrate/phase-rollout-with-rings)'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '部署环: [https://docs.microsoft.com/en-us/azure/devops/migrate/phase-rollout-with-rings](https://docs.microsoft.com/en-us/azure/devops/migrate/phase-rollout-with-rings)'
- en: '*Deploying to Azure App Service*: [https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-azure-app-service](https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-azure-app-service)'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*部署到 Azure 应用服务*: [https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-azure-app-service](https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-azure-app-service)'
- en: '*Deploying to Google Kubernetes Engine*: [https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-google-kubernetes-engine](https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-google-kubernetes-engine)'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*部署到 Google Kubernetes Engine*: [https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-google-kubernetes-engine](https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-google-kubernetes-engine)'
- en: '*Deploy to Amazon Elastic Container Service*: [https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-amazon-elastic-container-service](https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-amazon-elastic-container-service)'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*部署到 Amazon Elastic Container Service*: [https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-amazon-elastic-container-service](https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-amazon-elastic-container-service)'
- en: '*Security hardening your deployments*: [https://docs.github.com/en/actions/deployment/security-hardening-your-deployments](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments)'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*加强部署安全性*: [https://docs.github.com/en/actions/deployment/security-hardening-your-deployments](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments)'
- en: 'Kubernetes deployments: [https://kubernetes.io/docs/concepts/workloads/controllers/](https://kubernetes.io/docs/concepts/workloads/controllers/)'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Kubernetes 部署: [https://kubernetes.io/docs/concepts/workloads/controllers/](https://kubernetes.io/docs/concepts/workloads/controllers/)'
- en: 'Kubernetes deployment strategies: [https://github.com/ContainerSolutions/k8s-deployment-strategies](https://github.com/ContainerSolutions/k8s-deployment-strategies)'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Kubernetes 部署策略: [https://github.com/ContainerSolutions/k8s-deployment-strategies](https://github.com/ContainerSolutions/k8s-deployment-strategies)'
- en: '*Helm*: [https://helm.sh/](https://helm.sh/)'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Helm*: [https://helm.sh/](https://helm.sh/)'
- en: '*Kustomize*: [https://kustomize.io/](https://kustomize.io/)'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Kustomize*: [https://kustomize.io/](https://kustomize.io/)'
- en: '*Infrastructure as code*: [https://en.wikipedia.org/wiki/Infrastructure_as_code](https://en.wikipedia.org/wiki/Infrastructure_as_code)'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*基础设施即代码*: [https://en.wikipedia.org/wiki/Infrastructure_as_code](https://en.wikipedia.org/wiki/Infrastructure_as_code)'
- en: 'IaC and environment or configuration drift: [https://docs.microsoft.com/en-us/devops/deliver/what-is-infrastructure-as-code](https://docs.microsoft.com/en-us/devops/deliver/what-is-infrastructure-as-code)'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'IaC 和环境或配置漂移: [https://docs.microsoft.com/en-us/devops/deliver/what-is-infrastructure-as-code](https://docs.microsoft.com/en-us/devops/deliver/what-is-infrastructure-as-code)'
- en: '*Creating workflow templates*: [https://docs.github.com/en/actions/learn-github-actions/creating-workflow-templates](https://docs.github.com/en/actions/learn-github-actions/creating-workflow-templates)'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建工作流模板*: [https://docs.github.com/en/actions/learn-github-actions/creating-workflow-templates](https://docs.github.com/en/actions/learn-github-actions/creating-workflow-templates)'
- en: 'Reusable workflows: [https://docs.github.com/en/actions/learn-github-actions/reusing-workflows](https://docs.github.com/en/actions/learn-github-actions/reusing-workflows)'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '可重用工作流: [https://docs.github.com/en/actions/learn-github-actions/reusing-workflows](https://docs.github.com/en/actions/learn-github-actions/reusing-workflows)'
- en: 'The four keys project: [https://github.com/GoogleCloudPlatform/fourkeys/](https://github.com/GoogleCloudPlatform/fourkeys/)'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '四大关键项目: [https://github.com/GoogleCloudPlatform/fourkeys/](https://github.com/GoogleCloudPlatform/fourkeys/)'
