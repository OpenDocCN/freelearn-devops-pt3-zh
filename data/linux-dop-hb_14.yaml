- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Avoiding Pitfalls in DevOps
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免 DevOps 中的陷阱
- en: This final chapter focuses on DevOps pitfalls and antipatterns that can hinder
    the successful implementation of DevOps practices. We will highlight the importance
    of adopting a collaborative culture and prioritizing continuous improvement and
    discuss various common pitfalls, such as neglecting testing and **quality assurance**
    (**QA**), over-reliance on automation, poor monitoring and feedback loops, inadequate
    security and compliance measures, and lack of scalability and flexibility.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的重点是 DevOps 中的陷阱和反模式，这些问题可能会妨碍 DevOps 实践的成功实施。我们将强调采用协作文化的重要性，优先考虑持续改进，并讨论各种常见的陷阱，如忽视测试和**质量保证**（**QA**）、过度依赖自动化、监控和反馈环节不足、安全和合规措施不充分、以及缺乏可扩展性和灵活性。
- en: We will also emphasize the importance of proper documentation and knowledge
    sharing and discuss strategies to overcome resistance to change. By highlighting
    these common pitfalls and antipatterns, the chapter aims to provide guidance to
    organizations on how to successfully implement DevOps practices and avoid common
    mistakes. These are also probably things organizations struggle the most with,
    apart from the technical parts.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将强调适当的文档和知识共享的重要性，并讨论克服变革抵抗的策略。通过突出这些常见的陷阱和反模式，本章旨在为组织提供指导，帮助它们成功实施 DevOps
    实践并避免常见的错误。这些也是组织在技术部分之外最常遇到的挑战。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Too much or not enough automation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化过多或过少
- en: Not understanding the technology
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不理解技术
- en: Failure to adopt a collaborative culture
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有采用协作文化
- en: Neglecting testing and QA
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 忽视测试和 QA
- en: Poor monitoring and feedback loops
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控和反馈环节不足
- en: Inadequate security and compliance measures
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全和合规措施不充分
- en: Lack of scalability and flexibility
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺乏可扩展性和灵活性
- en: Lack of proper documentation and knowledge sharing
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺乏适当的文档和知识共享
- en: Overcoming resistance to change
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克服对变革的抵触
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: There are no technical requirements for this chapter. It is more of a discussion
    and does not provide any instructions to be followed on a system.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章没有技术要求。它更像是一种讨论，并没有提供需要在系统上执行的具体指令。
- en: Too much or not enough automation
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化过多或过少
- en: Automation is a core tenet of DevOps. Let’s face it—automation is the greatest
    way of making our work easier, more efficient, and fun.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化是 DevOps 的核心原则。说实话，自动化是使我们的工作更轻松、更高效和更有趣的最佳方式。
- en: But organizations can sometimes become too reliant on it, leading to a lack
    of human oversight and accountability. If you automate too many things, you will
    fail to catch any errors that could have been spotted by a human if you’d embedded
    them into the process. That’s why we have peer review processes in place to ensure
    we don’t miss something that tests or any integration testing tool didn’t catch.
    That’s also why many organizations prefer to manually sign off the `terraform
    apply` process before it actually gets deployed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，组织有时可能会过度依赖自动化，从而导致缺乏人类的监督和责任。如果你自动化了太多的内容，你就会错过一些可以通过人工审核发现的错误，尤其是在流程中没有嵌入这些检查时。这也是为什么我们有同行评审流程来确保我们不会错过任何测试或任何集成测试工具没能发现的问题。这也是为什么许多组织更愿意在`terraform
    apply`过程真正部署之前手动签署它。
- en: 'On the other hand, if you don’t automate anything, you expose yourself to accidental
    errors, as we humans are not very good with boring repeatable tasks. And that’s
    the point here: *identify repeatable tasks* *for automation*.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果你什么都不自动化，你就会暴露于意外错误中，因为我们人类在处理枯燥且可重复的任务时并不擅长。而这正是重点：*识别可重复的任务* *以进行自动化*。
- en: To identify what can be automated, we’d suggest focusing on low-hanging fruits
    first. With that in mind, let’s identify which tasks are easiest to automate to
    ensure a successful automation strategy.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了识别可以自动化的任务，我们建议先关注那些易于实现的低挂果任务。考虑到这一点，让我们识别出最容易自动化的任务，以确保成功的自动化策略。
- en: 'Consider the following checklist ordered from the easiest to most difficult
    strategies for how to get around automation:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑以下清单，它按从最简单到最困难的策略排列，帮助你绕过自动化问题：
- en: Repetitive tasks
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重复性任务
- en: Time-consuming tasks
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 耗时的任务
- en: Manual and error-prone tasks
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动且容易出错的任务
- en: Tasks with version control integration
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成版本控制的任务
- en: Tasks with repeatable patterns
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有可重复模式的任务
- en: Tasks with well-defined APIs or interfaces
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有明确定义 API 或接口的任务
- en: Tasks with clear and well-defined requirements
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有明确且定义清晰需求的任务
- en: Let us now look at the strategies.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看这些策略。
- en: Repetitive tasks
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重复性任务
- en: Look for tasks that are repetitive and can be executed with a consistent set
    of steps. These tasks are prime candidates for automation, as they can save time
    and reduce the risk of human error. These tasks include provisioning and managing
    AWS resources using Terraform, backup jobs, creating and managing GitHub repositories,
    or setting up build and deployment pipelines with **GitHub Actions** that can
    be automated to streamline the DevOps workflow.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找那些重复性强并且可以通过一组一致步骤执行的任务。这些任务是自动化的理想候选，因为它们可以节省时间并减少人为错误的风险。这些任务包括使用Terraform配置和管理AWS资源、备份作业、创建和管理GitHub仓库，或者通过**GitHub
    Actions**设置构建和部署流水线，这些任务都可以自动化，从而简化DevOps工作流程。
- en: Time-consuming tasks
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 耗时的任务
- en: Look for tasks that are time-consuming and can benefit from automation. These
    include long-running tasks such as data synchronization, compilation, building
    Docker images, and security audits that can be done by one of many tools, both
    commercial in a SaaS model or open source (**Prowler** is one example).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找那些耗时且能从自动化中受益的任务。这些任务包括长时间运行的任务，如数据同步、编译、构建Docker镜像以及安全审计，这些都可以通过许多工具完成，包括商业的SaaS模式工具或开源工具（例如，**Prowler**就是一个例子）。
- en: Manual and error-prone tasks
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动且容易出错的任务
- en: Identify tasks that are error-prone when performed manually. These tasks often
    involve multiple steps or configurations, which can be tedious and prone to mistakes.
    Automating these tasks using Python scripts or **Infrastructure as Code** (**IaC**)
    tools such as Terraform can help minimize human errors and ensure consistency
    across environments. Automating those tasks with clear code will also have the
    benefit of documenting them. You’ve heard so many times that your code is your
    documentation, and especially in this case it is true.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 确定在手动执行时容易出错的任务。这些任务通常涉及多个步骤或配置，可能既繁琐又容易出错。使用Python脚本或**基础设施即代码**（**IaC**）工具，如Terraform，来自动化这些任务可以帮助减少人为错误，并确保环境之间的一致性。用清晰的代码自动化这些任务还具有文档化的好处。你常常听说代码即文档，尤其在这种情况下，这句话是真的。
- en: Tasks with version control integration
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与版本控制系统集成的任务
- en: Identify tasks that can be integrated with version control systems such as GitHub.
    GitHub Actions, for example, provides a powerful automation framework that can
    be used to trigger workflows automatically based on events in GitHub repositories,
    such as code pushes, pull requests, or issue updates. This allows you to automate
    tasks such as building and deploying applications, running tests, or creating
    documentation as part of your DevOps workflow.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 确定那些可以与版本控制系统（如GitHub）集成的任务。例如，GitHub Actions提供了一个强大的自动化框架，可以根据GitHub仓库中的事件（如代码推送、拉取请求或问题更新）自动触发工作流。这使得你能够自动化诸如构建和部署应用程序、运行测试或创建文档等任务，作为DevOps工作流程的一部分。
- en: Tasks with repeatable patterns
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 具有重复模式的任务
- en: Identify tasks that follow a repeatable pattern or can be templated. These tasks
    can be automated using Python scripts, Terraform modules, or GitHub Actions templates.
    For example, tasks such as creating similar AWS resources for multiple environments
    (for example, dev, test, prod), managing multiple GitHub repositories with similar
    settings, or deploying the same application to multiple AWS accounts can be automated
    using templates or scripts to reduce duplication and increase efficiency.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 确定那些遵循可重复模式或可以模板化的任务。这些任务可以通过Python脚本、Terraform模块或GitHub Actions模板来自动化。例如，创建多个环境（如开发、测试、生产）中的相似AWS资源、管理具有相似设置的多个GitHub仓库，或者将相同的应用部署到多个AWS账户等任务，可以通过模板或脚本进行自动化，从而减少重复性工作并提高效率。
- en: Tasks with well-defined APIs or interfaces
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拥有明确API或接口的任务
- en: Identify tasks that have well-documented APIs or interfaces. These tasks can
    be easily automated using Python libraries, Terraform providers, AWS SDKs, or
    GitHub APIs. For example, AWS provides comprehensive SDKs for various programming
    languages, including Python, which makes it easy to automate tasks such as managing
    AWS resources, configuring AWS services, or monitoring AWS resources.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 确定那些有良好文档的API或接口的任务。这些任务可以通过Python库、Terraform提供程序、AWS SDK或GitHub API轻松自动化。例如，AWS为多种编程语言提供了全面的SDK，包括Python，这使得自动化诸如管理AWS资源、配置AWS服务或监控AWS资源等任务变得容易。
- en: Tasks with clear and well-defined requirements
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 具有明确且明确定义要求的任务
- en: Look for tasks that have clear and well-defined requirements, inputs, and expected
    outputs. These tasks are easier to automate as they can be precisely defined in
    scripts, templates, or configurations. For example, tasks such as provisioning
    AWS resources using Terraform, setting up AWS CloudFormation stacks, or configuring
    GitHub repository settings can be automated using declarative IaC templates or
    configuration files.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找那些有明确且定义良好的需求、输入和预期输出的任务。这些任务更容易自动化，因为它们可以在脚本、模板或配置中被精确定义。例如，使用 Terraform
    配置 AWS 资源、设置 AWS CloudFormation 堆栈或配置 GitHub 仓库设置等任务，可以通过声明性 IaC 模板或配置文件来实现自动化。
- en: By considering these criteria, you can identify which tasks are easiest to automate
    in your organization. Keep in mind that this is usually a process and can take
    months or even years. As a rule of thumb, try to create solutions that involve
    a lot of small (*atomic*) steps to build a more complex system, instead of building
    complex solutions from the start. For example, the deployment process could be
    broken down into smaller steps, such as setting up the environment, building,
    testing, uploading artifacts, and creating a manifest that will update the version
    of the application, ultimately leading to deployment on the server side.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通过考虑这些标准，你可以识别出在组织中哪些任务最容易实现自动化。请记住，这通常是一个过程，可能需要几个月甚至几年时间。作为经验法则，尽量创建涉及许多小的（*原子化*）步骤的解决方案，以便构建一个更复杂的系统，而不是一开始就构建复杂的解决方案。例如，部署过程可以拆分为更小的步骤，如设置环境、构建、测试、上传工件以及创建更新应用程序版本的清单，最终实现服务器端的部署。
- en: Automating common tasks is something that will make your work easier and more
    satisfying, yet not understanding what’s behind the scenes and how the technology
    you’re working with is functioning can lead to some unforeseen problems.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化常见任务将使你的工作更轻松、更令人满意，但如果不了解背后的技术以及你正在使用的技术如何运作，可能会导致一些无法预见的问题。
- en: Not understanding the technology
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不理解技术
- en: You don’t have to know how your TV works to use it. But it’s necessary to understand
    the principles behind it, what’s the input interface, what are the outputs, and
    so on. Similarly, with any other technology, you don’t need to 100% understand
    what makes it tick, but you need to know what the core use case is and what its
    purpose is.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要知道电视如何工作就能使用它。但了解其背后的原理、输入接口、输出是什么等内容是必要的。同样，面对任何其他技术，你不需要 100% 理解它是如何运作的，但你需要了解其核心用例是什么，它的目的是什么。
- en: As a DevOps professional, it’s crucial to have a deep enough understanding of
    the underlying technologies that power modern software development and operations.
    From databases to message queues, notifications to block and object storage, each
    of these technologies plays a critical role in building and maintaining reliable
    and scalable software systems. Yet one of the most common pitfalls in DevOps is
    not fully grasping the technology behind these common tasks.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名 DevOps 专业人士，深入理解支持现代软件开发和运维的底层技术至关重要。从数据库到消息队列，从通知到块存储和对象存储，每一项技术都在构建和维护可靠、可扩展的软件系统中发挥着至关重要的作用。然而，DevOps
    中最常见的陷阱之一就是没有完全掌握这些常见任务背后的技术。
- en: '*Why is it so important to understand technology?* The answer is simple—DevOps
    is not just about using tools and automation to streamline the software development
    and deployment process. It’s about understanding how these tools work, what they
    do, and how they interact with each other. Without this understanding, DevOps
    practices can become superficial and ineffective, resulting in suboptimal outcomes
    and increased risks of failures and downtime. Remember: *DevOps is a way of working*.
    Tools are just that—tools to help you in your everyday work. Understanding your
    tools will let you use them efficiently and effectively, shaping them up to your
    needs.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*为什么理解技术如此重要？* 答案很简单——DevOps 不仅仅是通过工具和自动化来简化软件开发和部署过程。它是关于理解这些工具如何工作，它们做了什么，以及它们如何相互作用。没有这种理解，DevOps
    实践可能变得肤浅和低效，导致次优结果和更高的故障和停机风险。记住：*DevOps 是一种工作方式*。工具只是工具——帮助你日常工作的工具。理解你的工具将使你能够高效、有效地使用它们，并根据你的需求进行调整。'
- en: For example, consider a scenario where you are tasked with setting up a highly
    available and performant database for a new application. Without a solid understanding
    of database technologies, the team might rely solely on default configurations
    or follow outdated practices, leading to poor performance, data loss, or even
    system failures. On the other hand, a team with a strong grasp of database principles
    would be able to make informed decisions about data modeling, indexing, caching,
    replication, and other critical aspects, resulting in a robust and scalable database
    architecture.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设你被指派为一个新应用程序设置一个高可用和高性能的数据库。如果没有对数据库技术的深入理解，团队可能仅依赖默认配置或沿用过时的做法，导致性能差、数据丢失，甚至系统崩溃。另一方面，一个对数据库原理有深入理解的团队则能做出明智的决策，关于数据建模、索引、缓存、复制等关键方面，进而实现一个强大且可扩展的数据库架构。
- en: Similarly, understanding messaging queues, notifications, block and object storage,
    and other technologies is essential for designing and implementing reliable and
    efficient communication patterns, data processing pipelines, and storage strategies.
    It allows you to optimize system performance, ensure data integrity, and plan
    for future growth.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，理解消息队列、通知、块存储和对象存储等技术，对于设计和实现可靠高效的通信模式、数据处理管道和存储策略至关重要。这让你能够优化系统性能、确保数据完整性，并为未来的增长做好规划。
- en: On the other hand, you don’t necessarily need to know the details of the implementation.
    For the database, you should not worry about its source code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，你不一定需要了解实现的细节。对于数据库，你不必担心其源代码。
- en: 'So, how can you quickly learn new and unknown concepts? Here are some tips
    you could follow:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如何能快速学习新的和未知的概念呢？以下是一些你可以遵循的建议：
- en: Stay curious and proactive
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持好奇心和积极性
- en: Start with the basics
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从基础开始
- en: Learn hands-on
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动手学习
- en: Collaborate and share knowledge
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协作与分享知识
- en: Stay updated
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持更新
- en: Let us look at these tips in detail.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看这些建议。
- en: Stay curious and proactive
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持好奇心和积极性
- en: Embrace a growth mindset and actively seek out opportunities to learn. Don’t
    wait for a problem to arise before diving into a new technology. Stay curious,
    explore documentation, tutorials, and online resources, and proactively experiment
    with different tools and technologies in a safe and controlled environment. We
    cannot stress it enough - experimentation is very important. *“It has always been
    done that way”* is one of the worst things you can say as a DevOps. Without a
    sandbox and testing new set ups, new workflows, new tools, you won’t be able to
    improve your infrastructure and pipelines.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 拥抱成长型思维，并主动寻找学习的机会。不要等到问题出现才去深入了解新技术。保持好奇心，探索文档、教程和在线资源，主动在安全可控的环境中尝试不同的工具和技术。我们无法强调这一点——实验是非常重要的。作为
    DevOps，说“总是这么做”的说法是最糟糕的。没有沙箱环境和测试新配置、新工作流、新工具，你无法改进基础设施和管道。
- en: Start with the basics
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从基础开始
- en: Don’t be intimidated by complex concepts. Start with the fundamentals and build
    your understanding from there. Familiarize yourself with the basic principles,
    terminologies, and concepts of the technology you want to learn. Once you have
    a solid foundation, you can gradually delve into more advanced topics.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 不要被复杂的概念吓倒。从基础开始，并逐步建立你的理解。熟悉你想学习的技术的基本原理、术语和概念。一旦你有了扎实的基础，你就可以逐渐深入了解更高级的话题。
- en: Hands-on learning
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动手学习
- en: Theory is important, but hands-on experience is invaluable. Set up a sandbox
    environment, experiment with different configurations, and try building small
    projects or prototypes to apply what you’ve learned. Learning by doing will help
    you gain practical skills and reinforce your understanding of the technology.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 理论很重要，但动手实践是无价的。建立一个沙箱环境，尝试不同的配置，构建小项目或原型，将所学应用到实践中。通过实践学习将帮助你获得实际技能，并加深对技术的理解。
- en: Collaborate and share knowledge
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 协作与分享知识
- en: DevOps is a collaborative field, and learning from your peers can be incredibly
    valuable. Engage with your team, participate in online communities, attend meetups
    or conferences, and share your knowledge with others. Teaching others is a powerful
    way to reinforce your own understanding and learn from different perspectives.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 是一个协作领域，从同事那里学习是非常宝贵的。与团队互动，参与在线社区，参加聚会或会议，并与他人分享你的知识。教授他人是加深自己理解和从不同角度学习的有效方法。
- en: Stay updated
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持更新
- en: Technology is constantly evolving, and it’s essential to stay updated with the
    latest trends, best practices, and updates in the field. Follow industry blogs,
    subscribe to newsletters, and participate in relevant forums or communities to
    stay informed about the latest developments. Core technologies usually stay the
    same, but use cases, the way of using them, and interacting with the technology
    are always changing. Did you know that you can make a PostgreSQL database to be
    available using a RESTful API ([https://postgrest.org/en/stable/](https://postgrest.org/en/stable/))?
    Or that with the use of the Multicorn extension ([https://multicorn.org/](https://multicorn.org/)),
    you could query (and join tables) from multiple sources (even Twitter) using one
    endpoint?
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 技术不断发展，保持对最新趋势、最佳实践和领域更新的了解至关重要。你可以关注行业博客，订阅时事通讯，参与相关论坛或社区，及时掌握最新动态。核心技术通常保持不变，但使用案例、使用方式以及与技术的互动始终在变化。你知道吗，你可以使用
    RESTful API ([https://postgrest.org/en/stable/](https://postgrest.org/en/stable/))
    使 PostgreSQL 数据库可用？或者，使用 Multicorn 扩展（[https://multicorn.org/](https://multicorn.org/)），你可以通过一个端点查询（甚至连接多个数据源，如
    Twitter）？
- en: We like to think about technology as the ultimate playground for innovation
    and increasing the productivity of teams. If it ain’t fun, why do it? On that
    note, consider working with a siloed team that is only dealing with its own *piece
    of the puzzle*; it’s definitely not fun. Collaboration in DevOps is one of the
    fundamental principles, and collaboration is a part of the culture in your organization.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们喜欢把技术看作是创新和提高团队生产力的最终游乐场。如果它不有趣，为什么要做呢？说到这一点，想想与一个只处理自己*任务碎片*的孤岛团队合作的情景，这肯定不会有趣。在
    DevOps 中，协作是基本原则之一，协作也是你组织文化的一部分。
- en: Failure to adopt a collaborative culture
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未能采纳协作文化
- en: DevOps is all about collaboration and breaking down silos between teams. However,
    many organizations struggle to adopt a culture of collaboration, leading to miscommunications,
    delays, and, ultimately, project failures. The importance of collaboration in
    DevOps with examples of how a lack of collaboration can derail projects would
    certainly be a good idea for a separate chapter.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 完全是关于协作并打破团队之间的孤岛。然而，许多组织在采纳协作文化方面存在困难，导致沟通不畅、延误，最终项目失败。讨论 DevOps 中协作的重要性，以及缺乏协作如何导致项目偏离轨道，显然是另一个章节的好主题。
- en: 'Silos refer to isolated teams or departments that do not communicate or collaborate
    effectively with each other, leading to poor coordination and hindering overall
    productivity and efficiency. Several possible reasons why organizations fail to
    adopt a collaborative culture in DevOps include the following: lack of leadership,
    siloed structure from the get-go, lack of trust, and lack of communication. Let’s
    take a look at each of these and try to find a good way out.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**孤岛效应**指的是各个团队或部门之间缺乏有效沟通与合作，导致协调不畅，从而影响整体的生产力和效率。组织未能在 DevOps 中建立协作文化的几个可能原因包括：缺乏领导力、从一开始就存在的孤岛结构、缺乏信任以及沟通不足。我们来逐一看看这些原因，并尝试找到一个好的解决方案。'
- en: Lack of leadership
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺乏领导力
- en: A common challenge is when leadership does not prioritize or actively promote
    a collaborative culture. This can result in teams focusing solely on their individual
    tasks without considering the broader organizational goals. To address this, it
    is crucial to have leadership buy-in and support for DevOps practices, including
    fostering a collaborative culture. Leaders should set the tone by actively promoting
    collaboration, establishing shared goals, and providing the necessary resources
    and support for cross-team collaboration.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的挑战是领导层没有优先考虑或积极推动协作文化。这可能导致团队只专注于各自的任务，而忽略更广泛的组织目标。为了解决这一问题，必须确保领导层支持 DevOps
    实践，包括促进协作文化的建立。领导者应该通过积极推动协作、确立共同目标，并为跨团队合作提供必要的资源和支持来定下基调。
- en: Good leaders are scarce, so it’s also a good idea to identify potential leaders
    within your organization and promote them by supporting their growth and development
    as a person and a leader. Simply promoting a person who was only a contributor
    up to now will set them up for failure as they don’t yet have the needed tools
    for the job.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 优秀的领导者稀缺，因此在组织内识别潜在领导者并支持他们的成长与发展作为个人及领导者是一个好主意。仅仅提拔一个之前只是贡献者的人，会导致他们失败，因为他们还没有获得执行这项工作的必要工具。
- en: Siloed organizational structure
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 孤岛式组织结构
- en: Organizations with a hierarchical and siloed structure can impede collaboration.
    Teams may operate in isolated silos with their own goals, processes, and tools,
    leading to a lack of visibility and coordination across teams. To overcome this,
    organizations should restructure to foster cross-functional teams that have end-to-end
    ownership of their applications or services. Creating multidisciplinary teams
    with representatives from different departments, such as development, operations,
    and QA, can promote collaboration and enable better communication and coordination.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有层级化和信息孤岛结构的组织可能会阻碍协作。团队可能会在孤立的信息孤岛中运作，拥有自己的目标、流程和工具，导致跨团队的可见性和协调性不足。为了克服这一点，组织应重新结构，以促进拥有端到端应用或服务的跨功能团队。创建由不同部门（如开发、运营和质量保证）代表组成的多学科团队可以促进协作，实现更好的沟通和协调。
- en: Another very effective strategy is building a culture of collaboration. This
    involves promoting a mindset that values open communication, transparency, and
    teamwork. Encourage cross-functional teams to work together, share information,
    and collaborate on projects. Recognize and reward collaboration, and create forums
    for knowledge sharing and learning across different teams and departments.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常有效的策略是建立协作文化。这涉及促进重视开放沟通、透明度和团队合作的思维方式。鼓励跨功能团队共同工作、分享信息并在项目上进行协作。认可和奖励协作，并为跨不同团队和部门的知识分享和学习创建论坛。
- en: You can also create shared goals and metrics. Let the team define shared goals
    and metrics that align with the overall business objectives and require collaboration
    across different teams. This will encourage them to work together toward common
    outcomes and helps them see the bigger picture beyond their individual silos.
    Regularly review progress toward these shared goals and metrics in cross-functional
    meetings to foster accountability and alignment.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以创建共享的目标和度量标准。让团队定义与整体业务目标一致，并要求跨团队协作的共享目标和度量标准。这将鼓励他们共同努力实现共同的结果，并帮助他们看到超越个人信息孤岛的更大图景。定期在跨功能会议上审查向这些共享目标和度量标准的进展，以促进责任和对齐。
- en: Also, leadership plays a crucial role in breaking down silos. Leaders should
    model the behavior they expect from their teams by actively promoting collaboration,
    communication, and alignment across different teams and departments. This includes
    setting clear expectations for collaboration, recognizing and rewarding collaborative
    behaviors, and providing support and resources to enable cross-functional collaboration.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，领导在打破信息孤岛中扮演着至关重要的角色。领导者应该以身作则，积极促进团队之间和部门之间的协作、沟通和对齐。这包括为协作设定明确的期望，认可和奖励协作行为，以及提供支持和资源以促进跨功能的协作。
- en: Lack of trust and communication
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺乏信任和沟通
- en: Without trust and effective communication, collaboration can suffer. Teams may
    be hesitant to share information or ideas due to fear of criticism or competition,
    leading to silos. Building a culture of trust and open communication is essential.
    This can be achieved through regular team meetings, cross-team workshops, and
    fostering an environment where team members feel comfortable sharing their perspectives
    and ideas without fear of judgment. Encouraging open and transparent communication
    channels, such as chat platforms or collaborative documentation tools, can also
    facilitate communication and collaboration.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 缺乏信任和有效沟通，协作可能会受到影响。团队可能因为害怕批评或竞争而不愿分享信息或想法，从而导致信息孤岛的产生。建立信任和开放沟通文化至关重要。这可以通过定期团队会议、跨团队研讨会以及促进团队成员在不受评判恐惧的环境中分享其观点和想法来实现。鼓励开放和透明的沟通渠道，如聊天平台或协作文档工具，也可以促进沟通和协作。
- en: 'Building trust between teams and team members is critical for effective collaboration
    and communication. Trust is the foundation upon which healthy relationships and
    successful teamwork are built. Among the different strategies you can learn in
    other books, the most effective are: establishing clear expectations, fostering
    open communication, promoting transparency, knowledge sharing, and building personal
    connections.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在团队和团队成员之间建立信任对于有效的协作和沟通至关重要。信任是建立健康关系和成功团队工作的基础。在其他书籍中学习的不同策略中，最有效的是：建立明确的期望、促进开放式沟通、提升透明度、分享知识和建立个人联系。
- en: 'Let’s break this down:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来详细分析一下：
- en: '**Clearly define roles, responsibilities, and expectations for each team and
    team member**: This helps to avoid misunderstandings and promotes accountability.
    Ensure that expectations are realistic, achievable, and aligned with the overall
    goals of the organization. Regularly review and update expectations as needed.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**明确定义每个团队和团队成员的角色、责任和期望**：这有助于避免误解，促进责任感。确保期望是现实的、可实现的，并与组织的整体目标一致。根据需要定期审查和更新期望。'
- en: '**Open and inclusive communication**: To create a safe and inclusive environment
    where team members feel comfortable expressing their thoughts, opinions, and concerns
    openly without fear of judgment or reprisal. Encourage active listening and respect
    for diverse perspectives. Avoid blame or finger-pointing when issues arise and
    focus on collaborative problem-solving.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开放和包容的沟通**：创造一个安全和包容的环境，让团队成员能够舒适地表达他们的想法、意见和担忧，而不必担心被评判或报复。鼓励积极倾听并尊重多样化的观点。避免在问题出现时归咎或指责，专注于协作解决问题。'
- en: '**Fostering a culture of transparency**: Information is shared openly and consistently
    across teams and team members, including sharing relevant updates, progress, and
    challenges related to projects, processes, and goals. Transparent communication
    builds trust by ensuring that everyone has access to the same information and
    is on the same page.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**培养透明文化**：在团队和团队成员之间公开、一致地共享信息，包括与项目、流程和目标相关的更新、进展和挑战。透明的沟通通过确保每个人都能访问相同的信息并保持一致，从而建立信任。'
- en: '**Collaborative mindset**: To encourage collaboration and knowledge sharing,
    you will need to foster a collaborative mindset where teams and team members actively
    collaborate and share knowledge with each other. Encourage cross-functional collaboration,
    pair programming, and cross-training opportunities. Create a space outside of
    work, sponsor events, and encourage team members to share their knowledge and
    experiences. Recognize and reward collaborative behaviors to reinforce their importance.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协作思维**：为了鼓励协作和知识共享，你需要培养一种协作思维，促使团队及其成员积极协作并相互分享知识。鼓励跨职能协作、结对编程和跨培训机会。创造工作之外的空间，赞助活动，并鼓励团队成员分享他们的知识和经验。认可并奖励协作行为，以强化其重要性。'
- en: '**Address conflicts proactively**: Conflicts are inevitable in any team or
    organization, but they can erode trust if not addressed promptly. Encourage team
    members to address conflicts in a constructive and timely manner. Provide tools
    and resources for conflict resolution, such as mediation or facilitated discussions,
    to help teams resolve conflicts and rebuild trust.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主动解决冲突**：冲突在任何团队或组织中都是不可避免的，但如果不及时处理，冲突会削弱信任。鼓励团队成员以建设性和及时的方式解决冲突。提供冲突解决工具和资源，例如调解或主持讨论，帮助团队解决冲突并重建信任。'
- en: '**Role of leaders**: Leaders play a critical role in building trust. Leaders
    should model open and unbiased communication, actively listen to team members,
    and demonstrate trustworthiness through their actions and decisions. Leaders should
    also promote trust-building behaviors and hold themselves accountable for building
    trust within their teams and across teams.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**领导者的角色**：领导者在建立信任方面发挥着至关重要的作用。领导者应以身作则，展示开放和公正的沟通方式，积极倾听团队成员的意见，并通过自己的行动和决策展现可信度。领导者还应鼓励建立信任的行为，并对在团队内部及跨团队之间建立信任负责。'
- en: '**Provide feedback and recognition regularly**: Acknowledge others’ efforts,
    celebrate their successes in public, and provide constructive feedback to help
    them improve privately. This fosters a positive feedback loop, promotes trust,
    and encourages open communication.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定期提供反馈和认可**：公开表扬他人的努力和成功，并在私下给予建设性反馈以帮助他们改进。这有助于建立积极的反馈循环，促进信任，并鼓励开放的沟通。'
- en: There are many more strategies you can use to develop trust between team members
    and that in turn will result in better communication.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多策略可以用来促进团队成员之间的信任，从而改善沟通。
- en: There’s also another pitfall that ultimately will create silos in your organization.
    It happens when you neglect the cultural aspects of the organization and focus
    solely on tools.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个常见的陷阱，最终会在你的组织中形成壁垒。它发生在你忽视组织的文化方面，单纯专注于工具时。
- en: Tool-centric approach
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以工具为中心的方式
- en: Organizations may focus too heavily on implementing DevOps tools without addressing
    the underlying cultural aspects. While tools are important, they are not a substitute
    for a collaborative culture. Adopting a tool-centric approach can lead to teams
    working in isolation and relying solely on automated processes, which can hinder
    effective collaboration. To overcome this, organizations should prioritize building
    a collaborative culture first and then select tools that align with their culture
    and facilitate collaboration. It is essential to provide training and support
    to ensure teams are proficient in using the selected tools to foster collaboration.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 组织可能过于侧重于实施DevOps工具，而忽视了其背后的文化因素。虽然工具很重要，但它们不能替代协作文化。采用以工具为中心的方法可能导致团队孤立工作，仅依赖自动化流程，这会妨碍有效的协作。为了克服这一点，组织应首先优先构建协作文化，然后选择与其文化契合并促进协作的工具。提供培训和支持，确保团队能够熟练使用所选工具来促进协作，是至关重要的。
- en: To remediate that, you can use strategies you’ve already talked about and additionally
    provide shared communication channels, encourage—and even organize yourself—cross-team
    meetings and events, and provide training and resources (especially time).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了纠正这一点，你可以使用已经讨论过的策略，并额外提供共享的沟通渠道，鼓励并且自己组织跨团队的会议和活动，提供培训和资源（特别是时间）。
- en: A final great remediation method is to foster cross-team roles and responsibilities.
    Define and encourage cross-team roles and responsibilities that promote collaboration.
    This can include roles such as liaisons or ambassadors who facilitate communication
    and coordination between teams. These roles can help bridge the gap between teams
    and promote collaboration by acting as a conduit for information sharing.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一个最终的优秀纠正方法是促进跨团队的角色和责任。定义并鼓励那些促进协作的跨团队角色和责任。这可以包括像联络员或大使这样的角色，帮助促进团队之间的沟通和协调。这些角色可以帮助弥合团队之间的差距，通过作为信息共享的渠道来推动协作。
- en: Software QA is also quite often neglected. As with the culture, quality needs
    to be consciously developed and encouraged at the organizational level and at
    the team level.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 软件质量保证（QA）也常常被忽视。与文化一样，质量需要在组织层面和团队层面有意识地发展和鼓励。
- en: 'It’s best to explain the preceding method with an example, and there’s a perfect
    one in the Linux world: the **Linux** **kernel project**.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最好通过一个例子来解释前述方法，而在Linux世界中有一个完美的例子：**Linux** **内核项目**。
- en: 'It started famously on August 25, 1991, with the following post to a newsgroup:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 它在1991年8月25日以一篇帖子在新闻组中开始，帖子内容如下：
- en: “I’m doing a (free) operating system (just a hobby, won’t be big and professional
    like gnu) for 386(486) AT clones. This has been brewing since April, and is starting
    to get ready. I’d like any feedback on things people like/dislike in minix, as
    my OS resembles it somewhat (same physical layout of the file-system (due to practical
    reasons) among other things). I’ve currently ported bash(1.08) and gcc(1.40),
    and things seem to work. This implies that I’ll get something practical within
    a few months [...] Yes – it’s free of any minix code, and it has a multi-threaded
    fs. It is NOT protable [sic] (uses 386 task switching etc), and it probably never
    will support anything other than AT-harddisks, as that’s all I have :-(.”
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: “我正在为386(486) AT克隆机做一个（免费的）操作系统（只是一个爱好，不会像GNU那样大规模和专业）。这个项目自四月以来一直在酝酿，现在开始准备好了。我希望能收到关于人们在minix中喜欢/不喜欢的反馈，因为我的操作系统在某些方面与它相似（例如文件系统的物理布局（出于实际原因）等）。目前我已经移植了bash(1.08)和gcc(1.40)，目前看起来一切正常。这意味着我将在几个月内做出一些实际的成果[...]
    是的——它完全没有使用任何minix代码，并且拥有一个多线程文件系统。它并不是可移植的[原文如此]（使用386任务切换等），而且它可能永远只支持AT硬盘，因为我只有这一种硬盘
    :-(。”
- en: As you can see, from the very beginning, Linus Torvalds, the creator of Linux,
    asked other enthusiasts to join his small hobby project and help develop it. This
    spirit of collaboration was visible from the very first day. Everyone can join
    the project, and their contributions are evaluated on a technical basis. The medium
    of communication is an open and public mailing list named—aptly—the **Linux kernel
    mailing list** (**LKML**), where roadmaps, patches, new ideas, and all things
    related to the project are discussed. Everyone can read the list’s archives and
    join the list and the discussion.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，从一开始，Linux的创始人**林纳斯·托瓦兹**就邀请其他爱好者加入他的这个小项目，并帮助开发它。这种合作精神从第一天就展现出来。每个人都可以加入该项目，他们的贡献会在技术层面上进行评估。沟通的方式是一个开放的公共邮件列表，名字非常贴切——**Linux内核邮件列表**（**LKML**），在这里讨论着项目相关的路线图、补丁、新点子以及所有内容。每个人都可以阅读列表的档案，加入邮件列表和讨论。
- en: While the discussion is pretty much open to everyone and patches (or pull requests)
    can be submitted by anyone (although the acceptance is another thing, as the project
    has to adhere to code quality and legal and licensing requirements, which we will
    not be covering here), there is a hierarchy of leadership, although it’s pretty
    flat. Kernel subsystems have maintainers, which are people who decide if the new
    code is going to be accepted or rejected. The final code merge into the kernel
    is done by Linus Torvalds, who has the final word in the code acceptance process,
    although he most often relies on the subsystem maintainers to make the decision.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然讨论几乎对所有人开放，补丁（或拉取请求）可以由任何人提交（尽管是否接受是另外一回事，因为项目必须遵循代码质量、法律和许可要求，我们将在此不做讨论），但仍然存在一种领导层等级，尽管它相当扁平。内核子系统有维护者，这些人负责决定新代码是否会被接受或拒绝。最终的代码合并到内核是由林纳斯·托瓦兹完成的，他在代码接受过程中拥有最终发言权，尽管他通常依赖子系统的维护者来做出决定。
- en: The preceding structure inherently saves the Linux kernel project from a siloed
    structure, as there are not many levels of management. All knowledge is open and
    freely accessible; every person in the project management chain can be easily
    contacted.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 上述结构本质上使Linux内核项目免于孤立的管理结构，因为管理层级不多。所有的知识都是公开和自由获取的；项目管理链中的每个人都可以轻松联系。
- en: The source code of the Linux kernel is publicly available in a Git repository.
    Everyone can clone and modify the kernel, as long as they don’t break the letter
    of the license under which the Linux kernel is being published.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Linux内核的源代码公开存放在一个Git仓库中。任何人都可以克隆和修改内核，只要他们不违反Linux内核发布所使用的许可协议。
- en: Communication and trust are direct results of the open communication model and
    the open source code repository adopted by the project. There is no “*behind closed
    door*” communication; decisions are made on a technical basis, and thus one can
    trust the developers and leaders.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 沟通和信任是项目采用开放沟通模型和开源代码库的直接结果。没有“*幕后交易*”的沟通；决策是基于技术的，因此可以信任开发人员和领导。
- en: Neglecting testing and QA
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 忽视测试和质量保证
- en: 'Testing and QA are critical components of any DevOps workflow, yet many organizations
    fail to prioritize them, leading to buggy software, user dissatisfaction, and
    lost revenue. In the world of DevOps, where software development and operations
    are closely integrated, testing and QA are critical components of the development
    process. Neglecting these aspects can lead to various issues that can have serious
    consequences for software development projects. Let’s explore some potential pitfalls
    of neglecting testing and QA in DevOps, and propose solutions to address them:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 测试和质量保证是任何DevOps工作流程中的关键组成部分，然而许多组织未能优先考虑这些因素，导致了软件的缺陷、用户的不满以及收入的损失。在DevOps的世界里，软件开发与运维紧密结合，测试和质量保证是开发过程中的关键组成部分。忽视这些方面可能会导致各种问题，这些问题会对软件开发项目产生严重后果。让我们探索忽视测试和质量保证可能带来的一些陷阱，并提出解决方案：
- en: Increased software defects
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加了软件缺陷
- en: Deployment failures
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署失败
- en: Security vulnerabilities
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全漏洞
- en: Lack of documentation
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺乏文档
- en: Inadequate test coverage
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试覆盖不足
- en: Lack of continuous improvement
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺乏持续改进
- en: Let us check these pitfalls in detail.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细检查这些陷阱。
- en: Increased software defects
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增加了软件缺陷
- en: Without proper testing and QA, software defects may—and usually do—go unnoticed,
    leading to the release of poor-quality software into production. This can result
    in increased customer complaints, decreased user satisfaction, and loss of revenue.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 没有适当的测试和质量保证，软件缺陷可能——而且通常会——被忽视，导致质量较差的软件进入生产环境。这可能导致客户投诉增多、用户满意度下降以及收入损失。
- en: It’s essential to implement comprehensive testing processes, including unit
    testing, integration testing, and **end-to-end** (**E2E**) testing, to identify
    and fix defects at different stages of the development life cycle. Start with
    basics (**linting**, **static code analysis**) and gradually add more testing
    into your workflow. It’s essential to collaborate with developers on that unless
    you’re willing to write all tests for your application yourself.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 实施全面的测试过程至关重要，包括单元测试、集成测试和**端到端**（**E2E**）测试，以在开发生命周期的不同阶段识别和修复缺陷。从基本的**代码格式检查**（**linting**）、**静态代码分析**开始，逐步在工作流中添加更多测试。除非你愿意为你的应用程序编写所有测试，否则与开发人员合作是非常必要的。
- en: Deployment failures
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署失败
- en: Without thorough testing and QA, software deployments can fail, causing system
    downtime and disrupting business operations. This can result in financial losses,
    reputational damage, and increased customer churn. To avoid deployment failures,
    it’s crucial to have automated testing and deployment pipelines in place that
    include rigorous testing and QA checks before releasing code to production. This
    helps catch issues early and ensures that only stable and reliable software is
    deployed.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有彻底的测试和质量保证，软件部署可能会失败，导致系统停机并干扰业务运营。这可能导致财务损失、声誉损害和客户流失。为了避免部署失败，至关重要的是建立自动化测试和部署管道，在将代码发布到生产环境之前进行严格的测试和质量保证检查。这有助于及早发现问题，并确保只有稳定可靠的软件被部署。
- en: Security vulnerabilities
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全漏洞
- en: Neglecting QA and testing can leave software vulnerable to security threats,
    such as code injections, **cross-site scripting** (**XSS**), and other types of
    attacks. This can result in data breaches, compliance violations, and legal liabilities.
    To address this, security testing should be an integral part of the testing and
    QA processes. This includes vulnerability assessments, penetration testing, and
    other security testing techniques to identify and fix security flaws in the software.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 忽视质量保证和测试可能使软件面临安全威胁，例如代码注入、**跨站脚本攻击**（**XSS**）以及其他类型的攻击。这可能导致数据泄露、合规性违规和法律责任。为了解决这个问题，安全测试应作为测试和质量保证过程的一个核心部分。包括漏洞评估、渗透测试和其他安全测试技术，以识别和修复软件中的安全缺陷。
- en: Lack of documentation
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺乏文档
- en: Proper documentation is essential for maintaining software quality and facilitating
    troubleshooting, maintenance, and future development. Neglecting QA and testing
    can lead to incomplete or outdated documentation, making it challenging to understand
    and maintain the software. To mitigate this, documentation should be considered
    an essential deliverable of the testing and QA process.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 适当的文档对于维护软件质量、促进故障排除、维护以及未来开发至关重要。忽视质量保证（QA）和测试可能导致文档不完整或过时，从而使理解和维护软件变得困难。为了缓解这一问题，文档应该被视为测试和质量保证过程中的一个重要交付物。
- en: Documentation should be regularly updated to reflect the changes made during
    development and testing and should be easily accessible to the development and
    operations teams. To achieve that, documentation will need to be as close to the
    code as possible to make it easy to update while updating the code. Technical
    documentation (for example, classes, code interfaces, and so on) should be automated
    and available for everyone interested.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 文档应定期更新，以反映开发和测试过程中所做的更改，并且应易于开发和运维团队访问。为了实现这一点，文档应尽可能靠近代码，以便在更新代码时能够轻松更新文档。技术文档（例如类、代码接口等）应当实现自动化，并且对所有相关人员开放。
- en: Inadequate test coverage
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试覆盖不充分
- en: Without proper testing and QA, there may be gaps in the test coverage, resulting
    in untested or poorly tested code. This can lead to unanticipated issues and defects
    slipping through to production. To address this, it’s essential to establish clear
    testing objectives, define test coverage criteria, and use tools for code coverage
    analysis to ensure that all critical code paths are thoroughly tested.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有适当的测试和QA，可能会出现测试覆盖范围的空白，导致未经过测试或测试不充分的代码。这可能导致预料之外的问题和缺陷进入生产环境。为了解决这个问题，必须建立明确的测试目标，定义测试覆盖标准，并使用代码覆盖率分析工具，确保所有关键代码路径都得到彻底测试。
- en: Lack of continuous improvement
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺乏持续改进
- en: Neglecting testing and QA can lead to a complacent culture where quality is
    not prioritized. This can result in a lack of **continuous improvement** in the
    software development process, leading to a decline in software quality over time.
    To overcome this, it’s essential to establish a culture of continuous improvement
    where feedback from testing and QA is used to identify and address process gaps,
    improve testing practices, and enhance overall software quality.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 忽视测试和质量保证（QA）可能导致一种自满的文化，其中质量未被优先考虑。这可能导致软件开发过程中缺乏**持续改进**，从而随着时间的推移，软件质量下降。为了解决这个问题，必须建立一种持续改进的文化，其中测试和QA的反馈被用来识别和解决过程中的空白，改进测试实践，并提升整体软件质量。
- en: To mitigate these pitfalls, it’s crucial to implement comprehensive and automated
    testing processes, prioritize security testing, maintain up-to-date documentation,
    ensure adequate test coverage, and foster a culture of continuous improvement.
    By addressing these challenges, organizations can ensure the delivery of high-quality
    software that meets customer expectations, drives business success, and results
    in a happy team—let’s not forget that.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这些陷阱，必须实施全面和自动化的测试流程，优先进行安全测试，保持文档的最新性，确保充足的测试覆盖率，并培养持续改进的文化。通过解决这些挑战，组织可以确保交付符合客户期望的高质量软件，推动业务成功，并带来愉快的团队——我们可不能忘了这一点。
- en: While QA will do its best to catch any errors and defects going into the production
    system, nothing beats good monitoring and alerting.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然质量保证（QA）会尽力捕捉进入生产系统的任何错误和缺陷，但没有什么能比得上良好的监控和告警。
- en: Poor monitoring and feedback loops
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 差的监控和反馈回路
- en: Monitoring and feedback loops are essential for identifying issues and making
    improvements in DevOps workflows, yet many organizations fail to implement effective
    monitoring and feedback mechanisms.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 监控和反馈回路对于识别问题并改进DevOps工作流程至关重要，但许多组织未能实施有效的监控和反馈机制。
- en: In the context of DevOps, a **feedback loop** refers to the continuous exchange
    of information between different stages of the software development and operations
    life cycle. It involves collecting data, analyzing it, and providing insights
    that drive improvements in the development and operations processes.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevOps环境中，**反馈回路**是指软件开发和运维生命周期中不同阶段之间信息的持续交换。它涉及数据收集、分析，并提供推动开发和运维过程改进的见解。
- en: Feedback loops play a critical role in enabling teams to identify and rectify
    issues early in the software delivery life cycle, leading to faster development
    cycles, improved quality, and increased on-call staff satisfaction as they won’t
    be woken up at night.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 反馈回路在帮助团队早期识别和纠正软件交付生命周期中的问题方面发挥着至关重要的作用，这将导致更快的开发周期、提高的质量以及增加的值班人员满意度，因为他们不会在夜间被叫醒。
- en: 'A characteristic of good monitoring is its ability to provide timely, accurate,
    and relevant information about the health, performance, and behavior of the system.
    The key characteristics of good monitoring include many different aspects, such
    as the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 良好监控的特点是能够提供及时、准确且相关的信息，关于系统的健康状况、性能和行为。良好监控的关键特点包括多个方面，如下所示：
- en: Real-time
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时
- en: Comprehensive
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全面
- en: Scalable
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展
- en: Actionable
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可操作
- en: Continuously improving
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续改进
- en: Let’s break this down.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来拆解一下。
- en: Real-time
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实时
- en: Good monitoring provides real-time visibility into the system’s state, allowing
    teams to quickly detect and address issues before they escalate into critical
    problems. Real-time monitoring helps to identify anomalies, trends, and patterns
    that may indicate potential issues or bottlenecks, enabling proactive troubleshooting
    and resolution.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的监控提供了对系统状态的实时可见性，使团队能够在问题升级为关键问题之前快速检测和解决问题。实时监控有助于识别异常、趋势和模式，这些可能表明潜在的问题或瓶颈，从而使得主动排查和解决问题成为可能。
- en: Comprehensive
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 综合性
- en: Good monitoring covers all critical components of the system, including infrastructure,
    applications, services, and dependencies. It provides a holistic view of the entire
    system, helping teams to understand the relationships and dependencies between
    different components and their impact on system performance and availability.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的监控涵盖系统的所有关键组件，包括基础设施、应用程序、服务和依赖关系。它提供了整个系统的全面视图，帮助团队理解不同组件之间的关系和依赖性，以及它们对系统性能和可用性的影响。
- en: Additionally, monitoring needs to be able to deliver only relevant information,
    not only dry alerting data. For instance, if a server is down, good monitoring
    will not deliver alerts about missing data on CPU or RAM usage, a service being
    down, and so on. The core issue is that the server is not responsive—flooding
    your on-call team with irrelevant information will lead to slower response times.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，监控需要能够仅提供相关信息，而不仅仅是枯燥的警报数据。例如，如果服务器宕机，良好的监控不会发送关于CPU或RAM使用率、服务宕机等的警报。核心问题是服务器无法响应——将不相关的信息发送给值班团队会导致响应时间变慢。
- en: Scalable
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可扩展的
- en: Good monitoring can handle large volumes of data and can scale horizontally
    to accommodate the growing needs of the system. It can collect and process data
    from multiple sources and integrate it with different tools and technologies,
    providing a unified and consolidated view of the system’s health.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的监控能够处理大量数据，并且能够横向扩展以适应系统不断增长的需求。它可以从多个来源收集和处理数据，并将其与不同的工具和技术进行集成，提供系统健康状况的统一和综合视图。
- en: Actionable
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可操作的
- en: Good monitoring provides actionable insights that enable teams to make informed
    decisions and take timely actions. It includes rich visualization, reporting,
    and analytics capabilities that help teams to identify trends, correlations, and
    anomalies, and take appropriate actions to optimize system performance and availability.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的监控提供可操作的见解，使团队能够做出明智的决策并采取及时的行动。它包括丰富的可视化、报告和分析功能，帮助团队识别趋势、关联和异常，并采取适当的措施来优化系统性能和可用性。
- en: Continuously improving
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续改进
- en: On top of what we’ve discussed in this section, we need to also add that going
    from good to great monitoring will involve continuous reviews of the current state
    and implementation of improvements.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们在本节中讨论的内容，还需要补充的是，从良好监控到卓越监控的转变需要持续审查当前状态并实施改进。
- en: 'This review should be done every month if your organization is changing rapidly,
    or quarterly if you already have well-established monitoring that is doing its
    job properly. This review involves the following:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的组织变化迅速，应每月进行此审查；如果您已经建立了良好的监控系统并且它正常运作，则每季度进行一次。此审查包括以下内容：
- en: Review of the most frequently triggered alerts in the last period and comparing
    alerts with previous periods
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查上一个周期内最常触发的警报，并将警报与之前的周期进行比较
- en: Review of newly added monitoring metrics to check if they’re relevant
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查新增的监控指标，以检查其相关性
- en: Review of alerts that didn’t trigger over a long period of time (3-4 review
    periods)
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查长时间没有触发的警报（3-4个审查周期）
- en: With this data, you can decide which alerts are adding more noise, ensure that
    new metrics are actually what you expect to be monitored, and review alerts that
    didn’t trigger, which will make you aware of metrics you probably don’t need to
    monitor at all.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些数据，你可以决定哪些警报增加了噪音，确保新的指标确实是你期望被监控的内容，并审查那些没有触发的警报，这将让你意识到可能根本不需要监控的指标。
- en: Even though when talking about monitoring we’re thinking about things such as
    response times or memory consumption, it goes even further than that. You can
    trace the interaction between classes inside software code, latency between your
    system and a database system, or you can measure security. What happens if you
    don’t monitor your security posture? You get vulnerabilities in your systems without
    even knowing about them. Let’s look into security and compliance measures.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在讨论监控时，我们通常关注响应时间或内存消耗等方面，但它不仅仅是这些。你可以追踪软件代码中类之间的交互、系统和数据库之间的延迟，或者可以衡量安全性。如果你不监控你的安全态势，会发生什么？系统中会出现漏洞，而你甚至不知道它们的存在。让我们来看看安全和合规性措施。
- en: Inadequate security and compliance measures
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全性和合规性措施不足
- en: Security and compliance are critical concerns for any team, yet many organizations
    fail to adequately address these issues. In the world of DevOps, security is a
    critical aspect that must be integrated into every step of the software development
    life cycle. However, many organizations still struggle with inadequate security
    and compliance measures, which can lead to serious consequences such as data breaches,
    regulatory fines, and reputational damage. In this chapter, we will explore common
    misconceptions and pitfalls related to security measures in DevOps, and discuss
    the characteristics of good security measures that organizations should strive
    for.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性和合规性是任何团队的重要关注点，但许多组织未能充分解决这些问题。在DevOps的世界中，安全性是一个至关重要的方面，必须将其集成到软件开发生命周期的每一个环节。然而，许多组织仍在安全性和合规性措施上存在不足，这可能导致严重后果，如数据泄露、监管罚款和声誉损害。本章将探讨DevOps中关于安全措施的常见误解和陷阱，并讨论组织应努力实现的良好安全措施的特征。
- en: 'We will talk here about the following aspects:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论以下方面：
- en: What are security measures?
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是安全措施？
- en: Characteristics of good security measures
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 良好安全措施的特征
- en: What are security measures?
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是安全措施？
- en: '**Security measures** refer to the practices, processes, and tools used to
    protect software systems, applications, and data from unauthorized access, breaches,
    or other security threats. In the context of DevOps, security measures are implemented
    throughout the entire software development pipeline, from code creation and testing
    to deployment and operations.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全措施**指的是用于保护软件系统、应用程序和数据免受未经授权访问、泄露或其他安全威胁的实践、流程和工具。在DevOps的背景下，安全措施贯穿整个软件开发流程，从代码创建和测试到部署和操作。'
- en: 'Common security measures in DevOps include the following:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps中的常见安全措施包括以下内容：
- en: Authentication and authorization to ensure that only authorized users have access
    to the system and that they have appropriate permissions to perform their tasks
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份验证和授权确保只有授权用户可以访问系统，并且他们拥有执行任务所需的适当权限。
- en: Encrypting sensitive data to protect it from being intercepted or accessed by
    unauthorized users
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密敏感数据，防止未经授权的用户拦截或访问
- en: Regularly scanning for vulnerabilities in software components and applying patches
    or updates to fix them
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期扫描软件组件中的漏洞，并应用补丁或更新以修复它们
- en: Monitoring and recording activities within the system to detect and investigate
    security incidents
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控和记录系统内的活动，以便发现和调查安全事件
- en: Network security that includes implementing firewalls, **intrusion detection
    systems** (**IDS**) and/or **intrusion prevention systems** (**IPS**), and **virtual
    private networks** (**VPNs**) to protect the network from external threats
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络安全，包括实施防火墙、**入侵检测系统**（**IDS**）和/或**入侵防御系统**（**IPS**），以及**虚拟私人网络**（**VPN**）以保护网络免受外部威胁
- en: Reviewing code for security vulnerabilities and using static analysis tools
    to identify potential weaknesses and prevent leaking secrets such as passwords
    and access tokens
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查代码中的安全漏洞，并使用静态分析工具识别潜在的弱点，防止泄露密码和访问令牌等敏感信息
- en: Having implemented some measures of security, we will need to make sure the
    quality of those measures is as high as we can make them and, at the same time,
    hit the compliance our organization needs to meet legally. Let’s look into the
    characteristics of security measures.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施了一些安全措施后，我们需要确保这些措施的质量尽可能高，同时满足组织需要遵守的法律合规性要求。让我们来看一下安全措施的特征。
- en: Characteristics of good security measures
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 良好安全措施的特征
- en: Effective security measures in DevOps should possess certain characteristics
    to ensure that they provide adequate protection to the software systems and data.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps中有效的安全措施应具备某些特征，以确保它们能为软件系统和数据提供足够的保护。
- en: Good security measures are *proactive* rather than *reactive*, meaning they
    are designed to prevent security breaches rather than just detecting and mitigating
    them after the fact. Proactive security measures may include regular vulnerability
    assessments, code reviews, and automated testing to identify and fix security
    issues before they become critical.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的安全措施是*主动的*而非*被动的*，这意味着它们的设计目的是防止安全漏洞，而不仅仅是在事后发现并减轻这些漏洞。主动的安全措施可能包括定期的漏洞评估、代码审查和自动化测试，以在漏洞成为关键问题之前发现并修复安全问题。
- en: Security measures should also cover all aspects of the software development
    life cycle, from code creation and testing to deployment and operations. This
    includes securing the development environment, the code repository, the build
    and deployment process, and the production environment where the software is deployed
    and operated.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 安全措施还应涵盖软件开发生命周期的各个方面，从代码创建和测试到部署和操作。这包括保护开发环境、代码库、构建和部署过程，以及部署和操作软件的生产环境。
- en: Scalability is another characteristic of good security measures, meaning they
    can be applied to different types of software applications, environments, and
    technologies. They should be flexible enough to adapt to the changing needs of
    the organization and the evolving threat landscape.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性是良好安全措施的另一个特征，意味着它们可以应用于不同类型的软件应用程序、环境和技术。它们应该足够灵活，以适应组织不断变化的需求和不断发展的威胁格局。
- en: Leveraging automation to enable quick and consistent security checks and responses
    is a theme that always repeats itself when talking about DevOps practices. Automation
    can help identify security vulnerabilities, apply patches, and enforce security
    policies in a timely and efficient manner, reducing the risk of human error.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 利用自动化实现快速且一致的安全检查和响应是谈论DevOps实践时始终重复的主题。自动化可以帮助及时高效地识别安全漏洞、应用补丁并强制执行安全策略，从而减少人为错误的风险。
- en: Many organizations need to comply with industry regulations, standards, and
    best practices. Compliance with relevant regulations, such as the **General Data
    Protection Regulation** (**GDPR**), the **Health Insurance Portability and Accountability
    Act** (**HIPAA**), or the **Payment Card Industry Data Security Standard** (**PCI
    DSS**), is crucial to avoid legal and financial risks associated with non-compliance.
    Even if your organization is not regulated by these standards, it’s still a good
    idea to choose the most appropriate and follow it whenever it makes sense. It
    will bring your security level higher than it would be if you didn’t follow anything
    in particular.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 许多组织需要遵守行业法规、标准和最佳实践。遵守相关法规，如**通用数据保护条例**（**GDPR**）、**健康保险流通与责任法案**（**HIPAA**）或**支付卡行业数据安全标准**（**PCI
    DSS**），对于避免与不合规相关的法律和财务风险至关重要。即使你的组织未受这些标准的监管，选择最合适的标准并在合适时遵循它，仍然是一个好主意。这将使你的安全级别高于不遵循任何标准的情况。
- en: Finally, all security measures need to be continuously updated and improved
    to address emerging security threats and technologies. The threat landscape is
    constantly changing, and security measures must be agile and adaptive to effectively
    protect against new vulnerabilities and attacks.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，所有安全措施都需要不断更新和改进，以应对新出现的安全威胁和技术。威胁格局在不断变化，安全措施必须具有敏捷性和适应性，才能有效防范新的漏洞和攻击。
- en: As always, choose the lowest hanging fruit and start there to establish good
    security measures in your team. Revisit it early and often and improve over time.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，选择最简单的任务开始，建立团队中的良好安全措施。要经常回顾并逐步改进。
- en: Lack of scalability and flexibility
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缺乏可扩展性和灵活性
- en: 'Many organizations fail to design their DevOps workflows to be scalable and
    flexible, leading to issues when projects grow in size or complexity, even though
    those two things are crucial aspects of DevOps as they enable organizations to
    respond to changing business requirements and handle increasing workloads efficiently.
    However, you can fall into the trap of overlooking these factors, which can lead
    to serious misconceptions and pitfalls. Let’s delve into the importance of scalability
    and flexibility in DevOps and explore some common misconceptions and pitfalls,
    such as the following:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 许多组织未能设计出可扩展和灵活的DevOps工作流，导致项目在规模或复杂性增长时出现问题，尽管这两者是DevOps至关重要的方面，因为它们使组织能够响应不断变化的业务需求并高效处理日益增加的工作负载。然而，你可能会忽视这些因素，从而导致严重的误解和陷阱。让我们深入探讨DevOps中可扩展性和灵活性的重要性，并探讨一些常见的误解和陷阱，例如以下几点：
- en: DevOps is only for small teams or projects
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps只适用于小型团队或项目
- en: Inability to scale infrastructure
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法扩展基础设施
- en: Flexibility compromises stability
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 灵活性妥协了稳定性
- en: Lack of flexibility in release management
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布管理中缺乏灵活性
- en: Let us look at these misconceptions and pitfalls in detail.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看这些误解和陷阱。
- en: DevOps is only for small teams or projects
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps只适用于小型团队或项目
- en: One common misconception is that DevOps is only relevant for small teams or
    projects. Some organizations believe that DevOps practices are not necessary for
    larger teams or projects, as they assume that traditional development and operations
    practices can handle the scale.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的误解是DevOps只适用于小团队或小项目。一些组织认为，大团队或大项目不需要DevOps实践，因为他们认为传统的开发和运维方式可以处理规模问题。
- en: In reality, DevOps is not limited to the size of the team or project. It is
    a set of principles and practices that can be applied to organizations of all
    sizes. In fact, as teams and projects grow, the need for DevOps becomes even more
    critical to ensure smooth collaboration, faster delivery, and efficient operations.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，DevOps不仅限于团队或项目的规模。它是一套可以应用于各种规模组织的原则和实践。事实上，随着团队和项目的发展，DevOps的需求变得更加关键，以确保顺畅的协作、更快速的交付和高效的运营。
- en: Inability to scale infrastructure
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无法扩展基础设施
- en: It’s easy to overlook the scalability of the infrastructure, resulting in system
    failures, performance issues, and unplanned downtime.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易忽视基础设施的可扩展性，这可能导致系统故障、性能问题和未计划的停机时间。
- en: Underestimating the infrastructure requirements for the DevOps process will
    lead to many problems in the future, from poor user experience to losing opportunities
    for organizations to earn money. For example, deploying applications in an environment
    with limited resources or inadequate capacity can lead to performance issues and
    system failures when the workload increases. Similarly, not planning for future
    growth or changes in business requirements can result in the need for costly and
    time-consuming infrastructure upgrades or migrations. This is true for both an
    on-premise setup and cloud infrastructure. Furthermore, a shortage of electronic
    devices due to the global pandemic has shown that AWS and other cloud providers
    may sometimes be missing hardware resources. This may impact your organization
    when you try to add more resources to your infrastructure. For an on-prem setup,
    you can control hardware resources more closely.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 低估DevOps过程对基础设施的需求将导致未来出现许多问题，从糟糕的用户体验到错失组织盈利机会。例如，在资源有限或容量不足的环境中部署应用程序，当工作负载增加时，可能会导致性能问题和系统故障。同样，未规划未来的增长或业务需求变化可能会导致需要进行昂贵且耗时的基础设施升级或迁移。这对本地部署和云基础设施都适用。此外，由于全球大流行导致的电子设备短缺，AWS和其他云服务商有时可能缺少硬件资源。当你尝试为基础设施添加更多资源时，这可能会影响你的组织。对于本地部署，你可以更紧密地控制硬件资源。
- en: To avoid this pitfall, teams should carefully assess the scalability needs of
    their applications and infrastructure, plan for future growth, and ensure that
    the infrastructure is designed and provisioned to handle increased workloads efficiently.
    This may involve adopting practices such as IaC, automated provisioning, and horizontal
    scaling, which can enable teams to scale their infrastructure quickly and easily
    to meet changing demands. For a cloud setup, you may want to pay upfront for some
    capacity to reserve resources.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这个陷阱，团队应该仔细评估其应用程序和基础设施的可扩展性需求，规划未来的增长，并确保基础设施被设计和配置为有效应对增加的工作负载。这可能涉及采用IaC、自动化配置和水平扩展等实践，这些可以使团队迅速且轻松地扩展其基础设施，以应对变化的需求。对于云部署，你可能需要预先支付一些容量来保留资源。
- en: Flexibility compromises stability
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 灵活性妥协稳定性
- en: Another misconception about DevOps is that flexibility compromises stability.
    Some organizations fear that introducing flexibility in the development and operations
    process may result in an unstable environment, leading to increased risks and
    vulnerabilities. As a result, they may adopt a rigid approach to DevOps, emphasizing
    stability over flexibility.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个关于DevOps的误解是灵活性妥协稳定性。一些组织担心，在开发和运维过程中引入灵活性可能导致不稳定的环境，从而增加风险和漏洞。因此，他们可能会采取僵化的DevOps方法，强调稳定性而非灵活性。
- en: However, this misconception can hinder the agility and innovation that DevOps
    aims to achieve. Flexibility is essential in DevOps, as it enables teams to respond
    quickly to changing business requirements, experiment with new ideas, and iterate
    on applications and infrastructure. In fact, DevOps practices such as **continuous
    integration and** **continuous deployment** (**CI/CD**) and automated testing
    are designed to ensure that changes are thoroughly tested and validated before
    being deployed to production, thereby maintaining stability while enabling flexibility.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种误解可能会妨碍DevOps旨在实现的敏捷性和创新性。灵活性在DevOps中至关重要，因为它使团队能够快速响应不断变化的业务需求，尝试新想法，并对应用程序和基础设施进行迭代。事实上，DevOps实践如**持续集成**和**持续部署**（**CI/CD**）以及自动化测试，旨在确保在部署到生产环境之前，所有的变更都经过充分的测试和验证，从而在确保稳定性的同时，能够实现灵活性。
- en: Lack of flexibility in release management
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布管理缺乏灵活性
- en: A common pitfall is also the lack of flexibility in release management. **Release
    management** involves the process of deploying changes to production, and you
    may adopt a rigid approach to this, resulting in delays, complexity, and increased
    risks.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的陷阱是发布管理中的灵活性不足。**发布管理**涉及将变更部署到生产环境的过程，如果你采用一种僵化的方式来处理发布，可能会导致延迟、复杂性增加以及风险增加。
- en: For example, following a fixed release schedule or inflexible change management
    process may hinder the ability to respond quickly to business requirements or
    customer feedback, resulting in missed opportunities or increased customer dissatisfaction.
    Similarly, not allowing for experimentation or fast rollback options can limit
    the ability to iterate on changes and quickly address issues that may arise in
    production.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，遵循固定的发布计划或僵化的变更管理流程可能会妨碍快速响应业务需求或客户反馈的能力，导致错失机会或客户满意度下降。同样，不允许进行实验或快速回滚选项会限制对变更进行迭代的能力，并且无法迅速解决生产环境中可能出现的问题。
- en: To avoid this, you should focus on establishing a flexible and agile release
    management process. This may involve implementing practices such as feature toggles,
    dark launches, canary deployments, and blue-green deployments, which allow for
    gradual and controlled rollouts of changes and provide options for rollback or
    rollback options in case of issues. Additionally, adopting automated release pipelines,
    version control, and monitoring can help teams gain visibility and control over
    the release process.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，你应该专注于建立灵活且敏捷的发布管理流程。这可能涉及实施一些实践，如功能开关、暗启动、金丝雀部署和蓝绿部署，它们可以实现渐进式和可控的变更推出，并在出现问题时提供回滚选项。此外，采用自动化发布管道、版本控制和监控可以帮助团队获得发布过程的可见性和控制。
- en: Building flexible and scalable systems is not a trivial thing to do. On top
    of that, you need to count on changes from the business perspective that will
    affect your current processes. If your process is hard to change or you can’t
    make it scale your systems in response to high traffic, you will experience delays
    and unstable systems respectively.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 构建灵活且可扩展的系统并非易事。更重要的是，你还需要考虑来自业务角度的变更，这些变更会影响你当前的流程。如果你的流程难以变更，或者你无法根据高流量对系统进行扩展，你将分别遇到延迟和系统不稳定的问题。
- en: To understand and identify the current weak points of your processes, you will
    need proper documentation and visualizations, such as network or workflow graphs.
    In the next section, we’re going to talk about this part of the processes you’ve
    established.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解并识别当前流程中的薄弱环节，你需要合适的文档和可视化工具，如网络图或工作流图。在下一节中，我们将讨论你所建立的这些流程部分。
- en: Lack of proper documentation and knowledge sharing
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缺乏适当的文档和知识共享
- en: Documentation and knowledge sharing are critical for maintaining consistency
    and avoiding errors in DevOps workflows, yet many organizations fail to prioritize
    these activities.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 文档和知识共享对于维护一致性并避免DevOps工作流中的错误至关重要，然而许多组织未能优先考虑这些活动。
- en: 'In any software development project, documentation plays a crucial role in
    ensuring its success. It serves as a reference guide, provides insights into the
    project’s architecture, design, and implementation details, and aids in maintaining
    and troubleshooting the software. One of the common pitfalls in DevOps is the
    lack of proper and up-to-date documentation, which can lead to confusion, delays,
    and mistakes. To address this issue, it’s essential to understand the different
    types of documentation in software projects and their intended audiences. These
    are set out here:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何软件开发项目中，文档都起着至关重要的作用，确保项目的成功。它作为参考指南，提供关于项目架构、设计和实现细节的见解，并帮助维护和故障排除软件。DevOps中的一个常见问题是缺乏适当且最新的文档，这可能导致混乱、延误和错误。为了解决这个问题，必须理解软件项目中不同类型的文档以及它们的目标受众。这里列出了这些文档：
- en: Technical documentation
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术文档
- en: API documentation
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API文档
- en: User documentation
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户文档
- en: Process documentation
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流程文档
- en: Operational documentation
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运维文档
- en: Release notes and changelogs
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布说明和变更日志
- en: Let us delve into them in detail.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细探讨一下它们。
- en: Technical documentation
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术文档
- en: Technical documentation is targeted toward developers, operations teams, and
    other technical stakeholders involved in the software development and deployment
    process. It includes documentation related to system architecture, the code base,
    APIs, database schemas, deployment scripts, configuration files, and other technical
    details. Technical documentation helps in understanding the software’s internal
    workings, making it easier to maintain, troubleshoot, and enhance the system.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 技术文档是面向开发人员、运维团队和其他参与软件开发与部署过程的技术相关人员的。它包括与系统架构、代码库、API、数据库模式、部署脚本、配置文件以及其他技术细节相关的文档。技术文档有助于理解软件的内部运作，从而更容易进行维护、故障排除和系统增强。
- en: Some of this documentation, such as for the code base and APIs, can be automated
    with specialized software. You can ensure your development teams can write self-documenting
    code and, additionally, automate documentation of the code with software such
    as **Doxygen** ([https://www.doxygen.nl/](https://www.doxygen.nl/)), **Swimm**
    ([https://swimm.io/](https://swimm.io/)), or **Redoc** ([https://github.com/Redocly/redoc](https://github.com/Redocly/redoc)).
    To document your API, you can use a project based on OpenAPI, such as **Swagger**
    ([https://github.com/swagger-api/swagger-ui](https://github.com/swagger-api/swagger-ui)).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 一些文档内容，如代码库和API的文档，可以通过专业软件实现自动化。你可以确保你的开发团队能够编写自文档代码，并且还可以使用**Doxygen** ([https://www.doxygen.nl/](https://www.doxygen.nl/))、**Swimm**
    ([https://swimm.io/](https://swimm.io/)) 或 **Redoc** ([https://github.com/Redocly/redoc](https://github.com/Redocly/redoc))等软件自动化生成代码文档。要记录你的API文档，你可以使用基于OpenAPI的项目，比如**Swagger**
    ([https://github.com/swagger-api/swagger-ui](https://github.com/swagger-api/swagger-ui))。
- en: API documentation
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API文档
- en: API documentation is focused on documenting the APIs exposed by the software,
    which are used for integration with other systems or for building extensions or
    plugins. It includes documentation related to API endpoints, request and response
    formats, authentication and authorization mechanisms, error handling, and other
    API-related details. API documentation helps developers understand how to interact
    with the software programmatically, enabling seamless integration with other systems.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: API文档专注于记录软件暴露的API，这些API用于与其他系统集成或构建扩展或插件。它包括与API端点、请求和响应格式、身份验证和授权机制、错误处理及其他与API相关的细节的文档。API文档帮助开发者理解如何通过编程方式与软件交互，从而实现与其他系统的无缝集成。
- en: User documentation
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户文档
- en: User documentation is aimed at end users of the software, including customers,
    clients, and other stakeholders who interact with the software. It includes user
    manuals, guides, tutorials, and other resources that explain how to install, configure,
    and use the software effectively. User documentation should be written in a clear
    and concise manner using non-technical language and should cover all the necessary
    functionality and features of the software.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 用户文档面向软件的最终用户，包括客户、客户以及其他与软件互动的相关人员。它包括用户手册、指南、教程以及其他解释如何有效安装、配置和使用软件的资源。用户文档应使用简明清晰的语言编写，避免技术性语言，涵盖软件的所有必要功能和特点。
- en: Ensure that end users have the ability to reach out easily to your support teams
    right from the documentation.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 确保最终用户能够轻松地通过文档联系到你的支持团队。
- en: Process documentation
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流程文档
- en: Process documentation focuses on documenting the workflows, processes, and procedures
    followed in the software development and deployment life cycle. It includes documentation
    related to coding standards, version control, build and deployment processes,
    testing methodologies, release management, and other development practices. Process
    documentation helps maintain consistency, repeatability, and efficiency in the
    software development process, ensuring that best practices are followed consistently
    across the team.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 流程文档侧重于记录软件开发和部署生命周期中遵循的工作流程、过程和程序。它包括与编码标准、版本控制、构建和部署过程、测试方法、发布管理以及其他开发实践相关的文档。流程文档有助于保持一致性、可重复性和效率，确保团队始终如一地遵循最佳实践。
- en: Operational documentation
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运维文档
- en: Operational documentation is intended for operations teams responsible for deploying,
    configuring, and managing the software in production environments. It includes
    documentation related to installation instructions, configuration guides, monitoring
    and troubleshooting procedures, **disaster recovery** (**DR**) plans, and other
    operational tasks. Operational documentation helps operations teams in effectively
    managing and maintaining the software in production, ensuring its availability,
    performance, and reliability.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 运维文档是为负责在生产环境中部署、配置和管理软件的运维团队准备的。它包括与安装说明、配置指南、监控和故障排除程序、**灾难恢复**（**DR**）计划以及其他运维任务相关的文档。运维文档帮助运维团队有效地管理和维护生产环境中的软件，确保其可用性、性能和可靠性。
- en: Release notes and changelogs
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布说明和更新日志
- en: Release notes and changelogs document the changes and updates made to the software
    in each release. They provide a summary of new features, bug fixes, and other
    changes, along with instructions on how to upgrade or migrate to the latest version.
    Release notes and changelogs help keep stakeholders informed about the software’s
    progress, and they serve as a historical record of changes made to the software
    over time.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 发布说明和更新日志记录了每个版本发布中对软件所做的更改和更新。它们提供了新功能、修复的漏洞以及其他更改的摘要，并提供如何升级或迁移到最新版本的说明。发布说明和更新日志有助于让利益相关者了解软件的进展，并作为对软件随时间变化的历史记录。
- en: As you can see, documentation can be tricky to organize as you first need to
    know your intended audience and purpose. With the information we’ve been talking
    about in this section, you should be able to identify that very quickly. Also,
    it’s worth adding that documentation is never set in stone and needs to be updated
    regularly to reflect what’s the current situation of your application.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，文档的组织可能会很棘手，因为你首先需要了解你的目标受众和目的。结合我们在这一部分讨论的信息，你应该能很快识别出这些内容。此外，值得补充的是，文档永远不是一成不变的，需要定期更新，以反映你应用程序当前的状况。
- en: In the next section, we’ll be talking about resistance to change. The bigger
    the organization, the bigger it gets because of inertia. Let’s look into it from
    the DevOps point of view.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将讨论抵制变化的问题。组织越大，惯性越强，变化就越困难。让我们从DevOps的角度来探讨这个问题。
- en: Overcoming resistance to change
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 克服对变化的抵制
- en: DevOps requires a significant cultural shift in many organizations, and resistance
    to change can be a significant obstacle to successful implementation. Resistance
    to change is a known element playing a major role in the implementation of new
    processes, new tools, and other cultural changes in any organization. This is
    why just a few pages ago we said that *“It has always been done that way”* is
    one of the worst things to say. Improvement requires changes, and changes require
    an open mind and a readiness to destroy the status quo.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps要求许多组织进行重大文化转型，抵制变化可能是成功实施的一个重要障碍。抵制变化是实施新流程、新工具和其他文化变革时的一个常见因素，在任何组织中都起着重要作用。这就是为什么我们在几页前说过
    *“一直都是这么做的”* 是最糟糕的说法之一。改进需要改变，而改变需要开放的心态和准备好摧毁现状的勇气。
- en: 'There are several sources of change resistance. One of them is the fear of
    change. Changing the organization will introduce difficulties: a new process increases
    the probability of failure. It also requires learning new things and dropping
    already well-known and tested solutions. For most people, this is an area beyond
    their comfort zone.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 改变的抵制有多个来源。其中之一是对变化的恐惧。改变组织会带来困难：一个新流程增加了失败的可能性。它还需要学习新事物，放弃已经熟悉并经过验证的解决方案。对大多数人来说，这是超出舒适区的领域。
- en: The other change resistance factor is organizational inertia. Quite often, the
    way that any change is introduced in an organization requires a lot of paperwork
    and acknowledgment from upper management. Read the previous paragraph about the
    fear of change. In companies, one of the metrics of performance is the amount
    of work pushed out. Anyone who accepts a change that leads to delays will be in
    a hot seat.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个变革抗拒因素是组织惯性。通常，任何变革的引入都需要大量的文书工作和高层管理的认可。阅读前一段关于变革恐惧的内容。在公司中，绩效的一个指标是完成的工作量。任何接受会导致延误的变革的人都会处于压力之下。
- en: There are some strategies to overcome this resistance. The basis for all of
    them is transparent communication that goes both ways. Anyone introducing the
    change must communicate it in a clear way with heads-up time provided. People
    whose work will be influenced by the change must have time to consider what is
    going to happen and how they fit into it. They must be able to give their opinion
    and feel that they are being heard.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些策略可以克服这种抗拒情绪。所有策略的基础是双向透明的沟通。任何引入变革的人都必须以清晰的方式进行沟通，并提前提供通知。那些将受到变革影响的人必须有时间考虑将要发生的事情以及他们在其中的角色。他们必须能够表达自己的意见，并感受到自己被听见。
- en: The biggest chance of a change implementation failing comes if it feels forced
    and makes people feel like they don’t matter at all throughout the whole process.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 变革实施失败的最大原因是如果变革看起来被强加，且让人们在整个过程中觉得自己毫无意义。
- en: Summary
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The final chapter of this book delved into potential pitfalls and misconceptions
    that can impede the successful implementation of DevOps practices. We’ve emphasized
    the significance of fostering a collaborative culture and prioritizing continuous
    improvement to achieve desired outcomes.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的最后一章探讨了可能妨碍 DevOps 实践成功实施的潜在陷阱和误解。我们强调了培养协作文化和优先考虑持续改进以实现预期结果的重要性。
- en: We’ve gone through various common pitfalls, including neglecting testing and
    QA, relying excessively on automation, overlooking proper monitoring and feedback
    loops, inadequately addressing security and compliance measures, failing to achieve
    scalability and flexibility, and not aligning with business objectives.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了各种常见的陷阱，包括忽视测试和质量保证、过度依赖自动化、忽略适当的监控和反馈循环、未能妥善处理安全和合规措施、未能实现可扩展性和灵活性，以及未与业务目标对齐等问题。
- en: One of the key areas of focus in this chapter was the importance of documentation
    and knowledge sharing, as well as strategies to overcome resistance to change.
    Many organizations struggle with these non-technical aspects of DevOps implementation,
    and the chapter provided practical guidance on how to address them effectively.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的一个重点是文档和知识共享的重要性，以及如何克服变革抗拒的策略。许多组织在实施 DevOps 时，在这些非技术性方面面临困难，本章提供了如何有效应对这些问题的实用指导。
- en: Another crucial aspect highlighted in this chapter was the need for robust monitoring
    and feedback loops to provide timely insights into the performance and stability
    of the DevOps pipeline. Without proper monitoring, it can be challenging to identify
    and rectify issues promptly, leading to prolonged downtimes and decreased productivity.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中强调的另一个关键方面是需要建立强大的监控和反馈循环，以便及时了解 DevOps 流水线的性能和稳定性。如果没有适当的监控，及时识别和修复问题将变得十分困难，可能导致长时间的停机和生产力下降。
- en: We hope that you will be able to have an influence on some aspects of issues
    you might encounter during your DevOps journey and will successfully straighten
    the path for others to join the organization after you. With the knowledge embedded
    in this publication, you’re well equipped to take the challenge and have well-grounded
    knowledge to build upon.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望你能够在 DevOps 旅程中，对你可能遇到的一些问题产生影响，并在你之后成功地为其他人开辟加入组织的道路。通过本出版物中所包含的知识，你将具备充足的准备，迎接挑战，并拥有扎实的知识基础。
- en: Good luck!
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 祝你好运！
