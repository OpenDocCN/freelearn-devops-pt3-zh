- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Security Reality Check
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全现实检查
- en: Security in general, and especially in Kubernetes, is an ironic thing. Everyone
    knows it’s important, yet it’s not held to the same necessity as, for example,
    developers. In fact, if you look at the ratio, there’s probably 1 security engineer
    to 100 developers. Environments aren’t secure out of the box, especially when
    it comes to access control, yet security is arguably one of the most overlooked
    pieces of Kubernetes. Because of the lack of security awareness around Kubernetes,
    this chapter is going to focus on a little bit of everything that you should be
    thinking about when securing a Kubernetes environment.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性，尤其是在Kubernetes中的安全性，是一个具有讽刺意味的问题。每个人都知道它很重要，但它并没有像开发人员那样被视为同等必要的事物。事实上，如果你看一下比例，可能是1个安全工程师对100个开发人员。环境本身并不安全，尤其是在访问控制方面，然而安全性无疑是Kubernetes中最被忽视的部分之一。由于缺乏关于Kubernetes的安全意识，本章将重点讨论在保护Kubernetes环境时你应该考虑的各个方面。
- en: From a theoretical perspective, you’ll be learning how to think about security
    in Kubernetes. From a hands-on perspective, you’ll be learning not only how to
    implement security practices, but which tools and platforms to use.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 从理论角度来看，你将学习如何思考Kubernetes中的安全性。从实践角度来看，你不仅将学习如何实施安全实践，还将学习使用哪些工具和平台。
- en: When thinking about production, this chapter may very well be the most important
    one in this entire book. You must walk before you run, and therefore, you must
    learn how to use Kubernetes in production before you can secure it. The focus
    of *Chapters 1-7* was to get you to that point. This chapter, however, is all
    about taking things to the next level, and as with most areas of **Information
    Technology** (**IT**), that *next level* is security.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑生产环境时，本章可能是整本书中最重要的一章。你必须先学会走路，然后才能跑步，因此，在你能够保护它之前，必须先学会如何在生产中使用Kubernetes。本书*第1至第7章*的重点是帮助你达到这个阶段。然而，本章的重点是将事情提升到一个新的层次，就像**信息技术**（**IT**）的许多领域一样，*下一个层次*就是安全性。
- en: By the end of this chapter, you’ll know which practices to utilize when securing
    a Kubernetes environment from the cluster itself to the containerized applications
    running inside of the cluster. You’ll also know which tools and platforms to use
    to get the job done.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时，你将知道在保护Kubernetes环境时应采用哪些实践，从集群本身到运行在集群内的容器化应用程序。你还将知道使用哪些工具和平台来完成任务。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主要内容：
- en: Out-of-the-box Kubernetes security
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认Kubernetes安全性
- en: Investigating cluster security
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查集群安全性
- en: Understanding **role-based access** **control** (**RBAC**)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解**基于角色的访问** **控制**（**RBAC**）
- en: Kubernetes resource (object) security
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes资源（对象）安全性
- en: Kubernetes Secrets
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes Secrets
- en: Important note
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Much as with all other engineering-related books and research analyst analyses,
    the figures/percentages used within this chapter are based on various experiences
    in the field. In this book, if there are figures that do not have specific associated
    data sources, the data is collated from the production experiences of the author,
    Michael Levan.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 就像所有与工程相关的书籍和研究分析师的分析一样，本章中使用的数字/百分比基于不同领域的经验。在本书中，如果有一些数字没有具体的关联数据源，这些数据是从作者Michael
    Levan的生产经验中汇总的。
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, as with most of the chapters in this book, you will need a
    Kubernetes cluster running. Although you can run these tests on something such
    as Minikube, it’s highly recommended to create a Kubeadm cluster or a Kubernetes
    managed service cluster in the cloud with something such as **Azure Kubernetes
    Service** (**AKS**), **Amazon Elastic Kubernetes Service** (**Amazon EKS**), or
    **Google Kubernetes Engine** (**GKE**). The reason why is that you should see
    what it’s truly like from a production perspective to run Kubernetes security
    tests, which will open your eyes to see how secure (or insecure) it is out of
    the box and what you can do to mitigate those risks.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章与本书中的大多数章节一样，你需要运行一个Kubernetes集群。虽然你可以在Minikube等环境中进行测试，但强烈建议你在云中创建一个Kubeadm集群或一个托管的Kubernetes服务集群，例如**Azure
    Kubernetes Service**（**AKS**）、**Amazon Elastic Kubernetes Service**（**Amazon EKS**）或**Google
    Kubernetes Engine**（**GKE**）。原因是你应该从生产环境的角度了解运行Kubernetes安全测试的真正情况，这将让你看到它默认情况下是多么不安全，或者你可以做些什么来降低这些风险。
- en: 'If you want to deploy a Kubeadm cluster, check out this Git repo for help:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想部署一个Kubeadm集群，可以查看这个Git仓库获取帮助：
- en: '[https://github.com/AdminTurnedDevOps/Kubernetes-Quickstart-Environments/tree/main/Bare-Metal/kubeadm](https://github.com/AdminTurnedDevOps/Kubernetes-Quickstart-Environments/tree/main/Bare-Metal/kubeadm%0D)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/AdminTurnedDevOps/Kubernetes-Quickstart-Environments/tree/main/Bare-Metal/kubeadm](https://github.com/AdminTurnedDevOps/Kubernetes-Quickstart-Environments/tree/main/Bare-Metal/kubeadm%0D)'
- en: 'For the overall code used in this chapter, you can find it here:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章所用的整体代码可以在这里找到：
- en: '[https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch8](https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch8)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch8](https://github.com/PacktPublishing/50-Kubernetes-Concepts-Every-DevOps-Engineer-Should-Know/tree/main/Ch8)'
- en: Out-of-the-box Kubernetes security
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开箱即用的 Kubernetes 安全性
- en: At this point in time, there are two typical groups of people—those who are
    so incredibly new to Kubernetes and those who are as close to an *expert* as possible.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，通常有两类人群——那些完全新接触 Kubernetes 的人和那些几乎可以称为*专家*的人。
- en: With the group that’s new to Kubernetes, they’re just trying to understand the
    breakdown of the environment. They aren’t even at the stage of thinking about
    security yet.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些刚接触 Kubernetes 的群体，他们只是想了解环境的构成。他们甚至还没有到思考安全性的阶段。
- en: With the group that’s advanced—yes, they’re implementing security practices.
    The problem is that the advanced group is extremely small compared to the group
    that’s new to Kubernetes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些高级的群体——是的，他们正在实施安全实践。问题在于，相对于那些刚接触 Kubernetes 的群体，先进的群体是非常小的。
- en: Then, there are the engineers that are somewhat in between. They aren’t super
    new, but they aren’t ridiculously advanced either. This is the group that a lot
    of engineers fall into, and quite frankly, the group that’s somewhat in between
    is just starting to think about security.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，还有一些工程师介于两者之间。他们不是完全新手，但也没有达到非常高级的水平。这是很多工程师所处的群体，坦白说，这个群体正是开始思考安全性问题的群体。
- en: As with most platforms, nothing is 100% secure out of the box. In fact, regardless
    of how much time you spend to secure an environment, it will never be 100%. The
    whole goal of security is to mitigate as much risk as possible, but you’ll never
    be able to mitigate 100% of the risk.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数平台一样，没有任何系统可以开箱即用就做到100%的安全。事实上，无论你花多长时间来保护一个环境，它永远也不可能是100%安全的。安全的整体目标是尽可能降低风险，但你永远无法消除100%的风险。
- en: From a theoretical perspective, let’s talk about a few things around overall
    security and Kubernetes security.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从理论角度来看，我们来讨论一下整体安全性和 Kubernetes 安全性的一些问题。
- en: Security breakdown
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全漏洞
- en: Cybersecurity by definition is the protection of systems and networks from system
    disclosure. This means the protection of anything from the physical server/computer
    itself to the operating system to any data and metadata on the server/computer
    or network. If you think about it, that’s a lot of information. How many emails
    do you think get sent through Gmail per day? The specific number for Gmail isn’t
    certain, but for all email providers, the number is collectively 319.6 billion
    (with a B). Thinking about it from a theoretical but most likely accurate perspective,
    it’s safe to guess that at least 25% of that is Gmail.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 网络安全从定义上来说是保护系统和网络免受系统泄露。这意味着保护从物理服务器/计算机本身到操作系统，再到服务器/计算机或网络上的任何数据和元数据。如果你仔细想一想，这涉及的信息量非常大。你认为每天有多少邮件通过
    Gmail 发送？Gmail 的具体数字不确定，但所有电子邮件提供商的总数是3196亿（B）。从理论上讲，但也很可能准确地猜测，至少有25%的邮件是通过 Gmail
    发送的。
- en: The point?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 重点是什么？
- en: 'Emails alone contain a massive amount of information, but what about everything
    else? Information getting sent through networks from one country to another; data
    on hard drives: there’s a lot that falls into the *protection of systems* *and
    networks*.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅是邮件就包含了大量的信息，那么其他的一切呢？从一个国家到另一个国家通过网络传输的信息；硬盘上的数据：这些都属于*系统保护* *和网络保护*的一部分。
- en: Norton states in a recent blog ([https://us.norton.com/blog/emerging-threats/cybersecurity-statistics#](https://us.norton.com/blog/emerging-threats/cybersecurity-statistics#))
    that there are roughly 2,200 cybersecurity attacks per day. To be honest, that
    seems a bit low. However, even if that number is accurate, that’s 800,000 cyberattacks
    per year. It’s certainly no small number.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Norton 在最近的一篇博客中提到（[https://us.norton.com/blog/emerging-threats/cybersecurity-statistics#](https://us.norton.com/blog/emerging-threats/cybersecurity-statistics#)），每天大约有
    2200 起网络安全攻击。老实说，这个数字似乎有点低。然而，即使这个数字准确，也意味着每年有 80 万次网络攻击。这个数字可不小。
- en: With that knowledge, as engineers, we must prepare our systems and networks
    for such types of behavior. As the cloud continues to grow and Kubernetes becomes
    more mainstream, there will be more attacks directly related to Kubernetes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这些知识，作为工程师，我们必须为这种类型的行为准备好我们的系统和网络。随着云计算的持续发展以及 Kubernetes 的日益普及，未来会有更多直接与
    Kubernetes 相关的攻击。
- en: As discussed in the opening of this section, the idea of security isn’t to stop
    all risks. The truth is, you’ll never be able to stop everything. The security
    tools, platforms, and engineers that focus on security implementations have one
    goal in mind—to stop as many security threats as possible. If a system is secure,
    the operating system may not be. If the operating system is secure, the network
    may not be. If the network is secure, the applications may not be… and around
    and around we go. Security is something that can never be 100%, but engineers
    can take precautions to get as close to 100% as possible.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本节开头所讨论的那样，安全的理念并不是阻止所有风险。事实上，你永远无法阻止一切。专注于安全实施的安全工具、平台和工程师有一个共同的目标——尽可能多地阻止安全威胁。如果一个系统是安全的，操作系统可能不安全；如果操作系统是安全的，网络可能不安全；如果网络是安全的，应用程序可能不安全……如此循环往复。安全是永远无法做到
    100% 的，但工程师可以采取预防措施，使安全性尽可能接近 100%。
- en: 'Thinking about everything in this section, the question comes back to this:
    *What is security?* In short, it’s a method of protecting data.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到本节中的所有内容，问题回到这里：*什么是安全？* 简而言之，它是一种保护数据的方法。
- en: Kubernetes security
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes 安全
- en: 'The *State Of Kubernetes* security report from Red Hat ([https://www.redhat.com/en/resources/state-kubernetes-security-report](https://www.redhat.com/en/resources/state-kubernetes-security-report))
    highlights security issues directly related to the Kubernetes security landscape:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 Red Hat 的 *Kubernetes 状态* 安全报告（[https://www.redhat.com/en/resources/state-kubernetes-security-report](https://www.redhat.com/en/resources/state-kubernetes-security-report)）突出了与
    Kubernetes 安全领域直接相关的安全问题：
- en: 93% of respondents experienced at least 1 security incident in their Kubernetes
    environments in the last 12 months.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 93% 的受访者在过去 12 个月里在其 Kubernetes 环境中经历过至少一次安全事件。
- en: More than half of the respondents (55%) have had to delay an application rollout
    because of security concerns.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超过一半的受访者（55%）因为安全问题而不得不推迟应用程序的发布。
- en: Around 70% of security issues in Kubernetes are due to misconfigurations (according
    to Gartner, it’s 99%).
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 中约有 70% 的安全问题源于配置错误（根据 Gartner 的数据，实际比例是 99%）。
- en: When you look at these statistics from a security report coming right from Red
    Hat, there’s a trend that everyone can easily see—security is a huge issue in
    the Kubernetes space.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当你查看来自 Red Hat 的安全报告中的这些统计数据时，有一个趋势是每个人都能轻易看出的——安全在 Kubernetes 领域是一个巨大的问题。
- en: The truth is, as many engineers and executives will attest, security is an absolute
    mess in the Kubernetes space right now. There’s no specific reason why, but there’s
    an educated guess as to why. If you look at the preceding statistics from Red
    Hat stating that 70% of security issues are due to misconfigurations, that means
    the primary reason is that engineers are still trying to figure out Kubernetes.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，正如许多工程师和高管所言，Kubernetes 领域的安全问题现在确实很乱。没有特别明确的原因，但有一个合理的猜测。如果你看一下 Red Hat
    之前提到的统计数据，70% 的安全问题源于配置错误，那意味着主要原因是工程师们仍在摸索如何使用 Kubernetes。
- en: As you’ve learned about in this book, and as I’m sure you’ve seen online, almost
    everyone is still trying to figure out Kubernetes. There’s no expert in Kubernetes
    because the landscape changes every day. There’s no end goal to all things Kubernetes
    because it constantly changes. It’s not like a math equation where once you solve
    it, it’s complete. Once you *solve* Kubernetes, 10 more things around Kubernetes
    would emerge. Because of that, how could a configuration not be misconfigured
    most of the time? This goes especially for engineers that aren’t just focused
    on Kubernetes, but focused on many areas as well. How can engineers be as close
    to *experts* as possible within Kubernetes if it’s always changing? Misconfigurations
    are constantly bound to occur.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在本书中学到的内容，正如我相信你在网上看到的，几乎每个人仍然在尝试弄清楚 Kubernetes。没有 Kubernetes 专家，因为它的格局每天都在变化。没有
    Kubernetes 的终极目标，因为它不断变化。这不像数学方程式，解开它就完成了。一旦你*解决*了 Kubernetes，围绕 Kubernetes 的
    10 个问题就会浮现出来。因此，如何可能不经常发生配置错误呢？特别是对于那些不仅仅专注于 Kubernetes，而是关注多个领域的工程师而言。如果 Kubernetes
    总是在变化，工程师如何才能尽可能接近 Kubernetes 的*专家*？配置错误总是不可避免的。
- en: Because of that, the landscape of Kubernetes security is a mess. In fact, it
    most likely will be for a long time. It’s tough to secure something that’s constantly
    changing.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Kubernetes 安全的现状非常混乱。事实上，可能会持续很长时间。要确保一个持续变化的东西是非常困难的。
- en: 'There’s some light at the end of the tunnel, though. As with all platforms
    and environments, there are best practices that you can follow. Again, thinking
    about security, what’s the goal? To not fix all problems, but to mitigate as many
    as possible. The purpose of this chapter is to do exactly that: to mitigate as
    many security risks inside of your Kubernetes environment as possible.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，隧道的尽头还是有一些曙光的。像所有平台和环境一样，确实有一些最佳实践可以遵循。再说一次，考虑安全性，目标是什么？不是修复所有问题，而是尽可能地减轻更多的风险。本章的目的是做到这一点：尽可能减轻
    Kubernetes 环境中的安全风险。
- en: Let’s jump in!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Investigating cluster security
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调查集群安全性
- en: Taking Kubernetes out of the equation, let’s think about overall infrastructure
    and/or cloud security. At a high level, you have the network, the servers, the
    connections to the servers, user access, and ensuring that the applications installed
    on the servers are secure. In the world of cloud computing, you don’t have to
    worry about the physical security aspect. But if your clusters are in a data center,
    you do have to think about physical security. Locks on the data center rack cages
    ensure that no one can plug in any old USB key and that no one can literally take
    a server out of the rack and walk away with it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 摒除 Kubernetes 来看，让我们思考整体基础设施和/或云安全。在高层次上，你需要考虑网络、服务器、连接到服务器的方式、用户访问权限以及确保服务器上安装的应用程序是安全的。在云计算的世界里，你不必担心物理安全方面的问题。但如果你的集群在数据中心，你就必须考虑物理安全。数据中心机架上的锁可以确保没有人能插入任何
    USB 密钥，也没有人能够直接把服务器从机架上取下来并带走。
- en: Server security is a combination of what’s running inside and on the server—the
    applications running, programs that are being executed, and the overall operating
    system itself. Let’s say, for example, you’re running an older version of Ubuntu.
    Chances are you should absolutely check and confirm that there are no security
    holes. That’s still very important for any Kubernetes cluster running on Ubuntu.
    However, Kubernetes has its own set of standards.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器安全是由运行在服务器内外的内容组成的——运行的应用程序、执行的程序以及整个操作系统本身。例如，假设你运行的是一个较旧版本的 Ubuntu。那么你应该绝对检查并确认没有安全漏洞。这对任何运行在
    Ubuntu 上的 Kubernetes 集群来说依然非常重要。然而，Kubernetes 自己有一套标准。
- en: From a networking perspective, security still holds true in Kubernetes as well
    as in any other environment. If you have a frontend or backend Kubernetes service
    that’s accepting traffic from anywhere, that essentially means you have a blanket
    open firewall. If you’re not encrypting Pod-to-Pod and/or service-to-service communication
    with something such as a service mesh or a security-centric **Container Network
    Interface** (**CNI**), you could open yourself up to more risks.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从网络的角度来看，安全性在 Kubernetes 中同样适用，就像在任何其他环境中一样。如果你有一个前端或后端的 Kubernetes 服务，接受来自任何地方的流量，这基本上意味着你有一个完全开放的防火墙。如果你没有用像服务网格或以安全为中心的**容器网络接口**（**CNI**）这样的方式加密
    Pod 到 Pod 和/或服务到服务的通信，你可能会面临更多的风险。
- en: For example, Kubernetes by definition is an API. As with all APIs, there can
    be security risks. That means one of the biggest security focus points is to ensure
    that the Kubernetes API version that you’re currently on doesn’t have a major
    security risk as that could literally take down your entire environment.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Kubernetes 本质上是一个 API。像所有 API 一样，它可能存在安全风险。这意味着，最大的安全重点之一就是确保您当前使用的 Kubernetes
    API 版本没有重大安全风险，因为这可能会让您的整个环境陷入瘫痪。
- en: A big portion of Kubernetes security is benchmarks and other automated testing,
    which you’ll learn about in this section.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 安全的一个重要部分是基准和其他自动化测试，您将在本节中学习到这些内容。
- en: Cluster hardening and benchmarks
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集群加固与基准
- en: The **Center for Internet Security** (**CIS**) has been the de facto standard
    of hardening systems for years. CIS benchmarks are a set of globally identified
    standards and best practices when it comes to helping engineers set up their security
    defenses. Whether it’s in the cloud, on-prem, or a specific application/tool,
    there’s a best practice for it, and that’s exactly what CIS helps you figure out.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**互联网安全中心**（**CIS**）多年来一直是系统加固的事实标准。CIS 基准是一组全球公认的标准和最佳实践，旨在帮助工程师设置他们的安全防御措施。无论是在云端、本地环境，还是特定的应用/工具，都有相应的最佳实践，CIS
    正是帮助您确定这些最佳实践的工具。'
- en: Because CIS is essentially a list of best practices, you have to imagine that
    there are thousands of different best practices spread across platforms and environments.
    If you think about a Linux distro, such as Ubuntu, there are specific best practices
    for that distro alone. If you think about across an entire platform such as **Amazon
    Web Services** (**AWS**), there are even more best practices.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 CIS 本质上是一个最佳实践的清单，您必须想象它覆盖了数千种不同的最佳实践，分布在各种平台和环境中。如果您考虑到像 Ubuntu 这样的 Linux
    发行版，它就有专门针对该发行版的最佳实践。如果考虑到像 **亚马逊 Web 服务**（**AWS**）这样的整个平台，那最佳实践就更多了。
- en: 'As you look at CIS in general, you’ll see that there are a ton of prepopulated
    CIS environments. For example, in AWS, there are CIS-hardened **Amazon Machine**
    **Images** (**AMIs**):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当您了解 CIS 时，您会发现有大量预先配置的 CIS 环境。例如，在 AWS 中，有 CIS 加固的 **亚马逊机器镜像**（**AMIs**）：
- en: '![Figure 8.1 – Hardened AMI'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.1 – 加固的 AMI'
- en: '](img/B19116_08_01.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_01.jpg)'
- en: Figure 8.1 – Hardened AMI
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – 加固的 AMI
- en: 'In other clouds, such as **Google Cloud Platform** (**GCP**) or Azure, there’s
    the same thing. Even on phones such as an iPhone, there are CIS benchmarks:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他云平台，如 **谷歌云平台**（**GCP**）或 Azure 中，也有类似的内容。即使在像 iPhone 这样的手机上，也有 CIS 基准：
- en: '![Figure 8.2 – iOS hardening'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.2 – iOS 加固'
- en: '](img/B19116_08_02.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_02.jpg)'
- en: Figure 8.2 – iOS hardening
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – iOS 加固
- en: CIS can literally be an entire book in itself, so here’s the takeaway—CIS benchmarks
    are a list of best practices and standards to follow from a security perspective
    across systems, platforms, apps, and environments.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: CIS 实际上可以成为一本完整的书籍，所以这里是要点——CIS 基准是一个最佳实践和标准的清单，旨在从安全角度为各种系统、平台、应用和环境提供指导。
- en: 'Because of the popularity of Kubernetes, in 2017, CIS worked with the community
    to create a benchmark specifically for Kubernetes:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Kubernetes 的普及，CIS 在 2017 年与社区合作，创建了专门针对 Kubernetes 的基准：
- en: '![Figure 8.3 – Securing Kubernetes'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.3 – 安全化 Kubernetes'
- en: '](img/B19116_08_03.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_03.jpg)'
- en: Figure 8.3 – Securing Kubernetes
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 安全化 Kubernetes
- en: There are even CIS benchmarks for specific Kubernetes environments, such as
    GKE.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至有针对特定 Kubernetes 环境的 CIS 基准，例如 GKE。
- en: As you go through this chapter, and as you go through your Kubernetes security
    journey in general, a lot of tools and platforms you’ll see that do things such
    as container image scanning and cluster scanning use CIS benchmarks. Platforms
    such as Checkov, `kube-bench`, Kubescape, and a few of the other popular tools
    in the security space all scan against CIS and the **National Vulnerability**
    **Database** (**NVD**).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当您浏览本章内容时，以及在您的 Kubernetes 安全之旅中，您会看到许多工具和平台使用 CIS 基准进行容器镜像扫描和集群扫描。像 Checkov、`kube-bench`、Kubescape
    以及其他一些流行的安全工具，都是基于 CIS 和**国家漏洞数据库**（**NVD**）进行扫描的。
- en: You can download the latest Kubernetes CIS benchmark for free. You just need
    to put in your name and email at https://www.cisecurity.org/benchmark/kubernetes.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以免费下载最新的 Kubernetes CIS 基准，只需在 https://www.cisecurity.org/benchmark/kubernetes
    上填写您的姓名和电子邮件。
- en: Going over the Kubernetes CIS benchmark
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 浏览 Kubernetes CIS 基准
- en: The CIS benchmarks in Kubernetes is a huge PDF that you can download and go
    through to ensure that how you’re implementing a Kubernetes environment is up
    to the best standards and best practices possible for the Kubernetes API version
    that you’re running.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 中的 CIS 基准是一个庞大的 PDF，您可以下载并浏览，确保您实现的 Kubernetes 环境符合您所运行的 Kubernetes
    API 版本的最佳标准和最佳实践。
- en: 'Let’s learn how to download the PDF for the Kubernetes CIS benchmark. Follow
    these steps:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何下载 Kubernetes CIS 基准的 PDF。请按照以下步骤操作：
- en: 'Go to this link and fill in your information: [https://www.cisecurity.org/benchmark/kubernetes](https://www.cisecurity.org/benchmark/kubernetes).'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问此链接并填写您的信息：[https://www.cisecurity.org/benchmark/kubernetes](https://www.cisecurity.org/benchmark/kubernetes)。
- en: After the information is filled in, you should get an email to download the
    PDFs. There are going to be a lot, so search for `Kubernetes`. You should then
    see all the Kubernetes benchmarks.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写完信息后，您应该会收到一封电子邮件，下载 PDF 文件。文件将会很多，所以请搜索 `Kubernetes`。然后您应该会看到所有的 Kubernetes
    基准。
- en: 'Choose the first one, which at the time of writing this, is for Kubernetes
    API version 1.23, and click the orange **Download** **PDF** button:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择第一个选项，目前为 Kubernetes API 版本 1.23，并点击橙色的**下载** **PDF**按钮：
- en: '![Figure 8.4 – Kubernetes CIS information'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.4 – Kubernetes CIS 信息'
- en: '](img/B19116_08_04.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_04.jpg)'
- en: Figure 8.4 – Kubernetes CIS information
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – Kubernetes CIS 信息
- en: There are 302 pages, so the reality is you probably don’t want to read through
    it all, especially after reading this chapter (or maybe you do!). Skim through
    it and search for things that you find interesting. I like the part about Kubernetes
    Secrets where it explicitly says that you should think about an external Secrets
    store.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 该文档有 302 页，因此实际情况是，您可能不希望通篇阅读，尤其是在阅读完本章之后（或者您可能想要读！）。您可以浏览并搜索感兴趣的内容。我个人喜欢 Kubernetes
    Secrets 部分，它明确指出您应该考虑使用外部 Secrets 存储。
- en: A note about general server hardening
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于一般服务器加固的说明
- en: Server hardening should be an absolute priority across any environment. Whether
    you’re running Windows servers, Linux servers, or a mixture of both, hardening
    your systems is the key to mitigating as much security vulnerability at the system
    level as possible.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器加固应该是任何环境中的首要任务。无论您是运行 Windows 服务器、Linux 服务器，还是两者的混合，系统加固是减少系统层面安全漏洞的关键。
- en: 'Because CIS has been around for such a long time, there’s a benchmark for almost
    everything. For example, here is a screenshot that showcases just a few benchmarks
    available:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 CIS 已经存在了很长时间，因此几乎所有的内容都有相应的基准。例如，这里有一张截图展示了可用的一些基准：
- en: '![Figure 8.5 – Benchmark options'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.5 – 基准选项'
- en: '](img/B19116_08_05.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_05.jpg)'
- en: Figure 8.5 – Benchmark options
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – 基准选项
- en: 'Even from a desktop perspective, you can run CIS benchmarks against certain
    applications and tools such as Google Chrome or Microsoft Office:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 即便是从桌面的角度来看，您也可以对某些应用程序和工具（如 Google Chrome 或 Microsoft Office）运行 CIS 基准：
- en: '![Figure 8.6 – Desktop benchmark options'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.6 – 桌面基准选项'
- en: '](img/B19116_08_06.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_06.jpg)'
- en: Figure 8.6 – Desktop benchmark options
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6 – 桌面基准选项
- en: To see a full list, check out [https://www.cisecurity.org/cis-benchmarks/](https://www.cisecurity.org/cis-benchmarks/).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看完整列表，请访问 [https://www.cisecurity.org/cis-benchmarks/](https://www.cisecurity.org/cis-benchmarks/)。
- en: System scanning
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统扫描
- en: 'Although not Kubernetes-specific, or Kubernetes-scanning-specific, the truth
    is that if you’re running any type of system that is in your Kubernetes environment
    as a Control Plane, worker node, or both, you should run a system scan to ensure
    that the environment is properly configured. To do this, follow these steps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这不是专门针对 Kubernetes 或 Kubernetes 扫描的工具，但事实上，如果您正在运行任何类型的系统，且该系统位于 Kubernetes
    环境中的控制平面、工作节点或两者兼有，您应该运行系统扫描，确保环境配置正确。操作步骤如下：
- en: Download the CIS-CAT® Lite tool (it’s the free one) from [https://learn.cisecurity.org/cis-cat-lite](https://learn.cisecurity.org/cis-cat-lite).
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://learn.cisecurity.org/cis-cat-lite](https://learn.cisecurity.org/cis-cat-lite)
    下载 CIS-CAT® Lite 工具（它是免费的）。
- en: 'Next, extract it and open up the `Assessor-GUI` binary:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，解压并打开 `Assessor-GUI` 二进制文件：
- en: '![Figure 8.7 – GUI binary'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.7 – GUI 二进制文件'
- en: '](img/B19116_08_07.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_07.jpg)'
- en: Figure 8.7 – GUI binary
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 – GUI 二进制文件
- en: 'Within the GUI tool, choose the **Advanced** option so that you can specify
    a remote host:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GUI 工具中，选择**高级**选项，以便您可以指定远程主机：
- en: '![Figure 8.8 – Advanced option'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.8 – 高级选项'
- en: '](img/B19116_08_08.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_08.jpg)'
- en: Figure 8.8 – Advanced option
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – 高级选项
- en: 'Choose an option that gives you the ability to add a remote system:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个能够让你添加远程系统的选项：
- en: '![Figure 8.9 – Adding target system'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.9 – 添加目标系统'
- en: '](img/B19116_08_09.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_09.jpg)'
- en: Figure 8.9 – Adding target system
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9 – 添加目标系统
- en: 'Type in the information of the host that you wish to scan, such as the IP address,
    name, system type, and username/password (or SSH key):'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入你希望扫描的主机信息，如 IP 地址、名称、系统类型和用户名/密码（或 SSH 密钥）：
- en: '![Figure 8.10 – Target system information'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.10 – 目标系统信息'
- en: '](img/B19116_08_10.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_10.jpg)'
- en: Figure 8.10 – Target system information
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10 – 目标系统信息
- en: 'As you can see in the next screenshot, there’s no specific scan for Kubernetes.
    Hopefully, this will be something that’s added in the future, although you’ll
    see later in this chapter that there are tools that specifically scan Kubernetes
    against CIS. In this case, you can choose the Ubuntu Linux option:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如你在下一个截图中看到的那样，并没有专门的 Kubernetes 扫描功能。希望未来会添加这个功能，尽管你稍后会看到本章中有专门用于扫描 Kubernetes
    是否符合 CIS 的工具。在这种情况下，你可以选择 Ubuntu Linux 选项：
- en: '![Figure 8.11 – Available benchmarks'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.11 – 可用基准'
- en: '](img/B19116_08_11.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_11.jpg)'
- en: Figure 8.11 – Available benchmarks
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.11 – 可用基准
- en: 'Click the **Save** button:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**按钮：
- en: '![Figure 8.12 – Adding target system'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.12 – 添加目标系统'
- en: '](img/B19116_08_12.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_12.jpg)'
- en: Figure 8.12 – Adding target system
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.12 – 添加目标系统
- en: 'To ensure that you can properly scan the server, test the connection:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为确保你能正确扫描服务器，测试连接：
- en: '![Figure 8.13 – Specifying the Control Plane'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.13 – 指定控制平面'
- en: '](img/B19116_08_13.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_13.jpg)'
- en: Figure 8.13 – Specifying the Control Plane
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.13 – 指定控制平面
- en: 'Click **Next**, and the testing should begin:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**，测试应该开始：
- en: '![Figure 8.14 – Running the installation'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.14 – 运行安装'
- en: '](img/B19116_08_14.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_14.jpg)'
- en: Figure 8.14 – Running the installation
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.14 – 运行安装
- en: 'You’ll then see a screen that asks you to pick a location to save the report.
    Leave this at its default settings and then start the assessment:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你将看到一个界面，要求你选择一个位置来保存报告。保留默认设置，然后开始评估：
- en: '![Figure 8.15 – Assessment results'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.15 – 评估结果'
- en: '](img/B19116_08_15.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_15.jpg)'
- en: Figure 8.15 – Assessment results
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.15 – 评估结果
- en: 'Once the assessment is complete, you’ll see the report output in the default
    report location that you saw in the prior step:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦评估完成，你将看到报告输出在先前步骤中看到的默认报告位置：
- en: '![Figure 8.16 – Benchmark report'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.16 – 基准报告'
- en: '](img/B19116_08_16.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_16.jpg)'
- en: Figure 8.16 – Benchmark report
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.16 – 基准报告
- en: Cluster network security
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集群网络安全
- en: In Kubernetes, there are going to be two different types of network security—internal
    security and host security. Host security, of course, can be anything from your
    cloud VPC and security groups to on-prem firewalls running in your environment.
    Internal security is Pod security, service security, and, overall, how Kubernetes
    resources communicate with each other.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，将有两种不同类型的网络安全——内部安全和主机安全。主机安全当然可以包括你的云 VPC 和安全组，或者在本地环境中运行的防火墙。内部安全则包括
    Pod 安全、服务安全，以及总体上 Kubernetes 资源如何相互通信。
- en: To keep things Kubernetes-centric, you’ll be learning about internal security
    and not host security. If you’d like to learn about host security, it’s highly
    recommended to take a look at how networking works as a whole and different security-related
    topics such as firewalls, firewall rules, port mappings, and how network routes
    are configured.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持 Kubernetes 相关性，你将学习内部安全而非主机安全。如果你想了解主机安全，强烈建议你查看整个网络如何运作以及防火墙、端口映射、网络路由等安全相关主题。
- en: 'For the rest of this section, you’ll be learning about:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的其余部分，你将学习以下内容：
- en: CNI security methods
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CNI 安全方法
- en: '**extended Berkeley Packet** **Filter** (**eBPF**)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展的 Berkeley 数据包** **过滤器** (**eBPF**)'
- en: CNI security
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CNI 安全
- en: Throughout this book, you’ve learned about service mesh, and in the next section,
    you’ll be learning about eBPF. There is, however, one other security approach
    you can take from a CNI perspective. As you look through different CNIs, you’ll
    see multiple different types of plugins. Some, such as Flannel, are for the beginner-level
    engineer that just needs to get something up and running. It doesn’t have any
    fancy features. It’s watered down and pretty basic, and that’s the purpose of
    it.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的内容中，你已经学习了服务网格，在接下来的章节中，你将学习 eBPF。然而，从 CNI 角度来看，你还可以采取另一种安全方法。在你查看不同的 CNI
    时，你会看到多种不同类型的插件。一些插件，如 Flannel，适用于只需启动并运行的初级工程师。它没有任何复杂的功能，功能简化且非常基础，这正是它的目的。
- en: Then, you see other plugins, such as Calico, which is more of an advanced-level
    CNI and has a strong emphasis on security. In fact, you can actually encrypt Pod-to-Pod
    communication using Calico and WireGuard without even having to implement a service
    mesh, and that’s one of the main reasons that engineers implement a service mesh.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你会看到其他插件，如 Calico，它是一个更高级的 CNI，并且非常注重安全性。实际上，你可以使用 Calico 和 WireGuard 加密
    Pod-to-Pod 通信，而无需实现服务网格，这也是工程师实现服务网格的主要原因之一。
- en: When you’re starting down your internal network security journey, one of the
    primary questions you should ask yourself concerns how you want to implement a
    CNI and why you want to implement it. Do you want a CNI that’s simply *ready to
    go* out of the box? Or do you want a CNI that may require a bit more configuration
    and time, but has the proper security components in place to make your life easier
    in the long run?
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始探索内部网络安全时，你应该问自己一个主要问题，那就是你希望如何实现 CNI，以及为什么要实现它。你是希望一个“开箱即用”的 CNI，还是希望一个可能需要更多配置和时间的
    CNI，但它具备正确的安全组件，从而在长远来看让你的工作更轻松？
- en: You can learn more about Calico and WireGuard at [https://projectcalico.docs.tigera.io/security/encrypt-cluster-pod-traffic](https://projectcalico.docs.tigera.io/security/encrypt-cluster-pod-traffic).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://projectcalico.docs.tigera.io/security/encrypt-cluster-pod-traffic](https://projectcalico.docs.tigera.io/security/encrypt-cluster-pod-traffic)
    了解更多关于 Calico 和 WireGuard 的信息。
- en: eBPF
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: eBPF
- en: eBPF can be an entire book in itself, but in short, it’s a way to remove the
    need to update Linux kernel code for certain programs to run. From a Kubernetes
    perspective, it can also remove the need for `kube-proxy`’s responsibilities.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: eBPF 本身可以写成一本书，但简而言之，它是一种不需要更新 Linux 内核代码就能运行某些程序的方法。从 Kubernetes 的角度来看，它还可以去除
    `kube-proxy` 的职责。
- en: 'Let’s focus on a few key parts when it comes to Kubernetes and eBPF:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到 Kubernetes 和 eBPF 时，让我们关注几个关键部分：
- en: Removal of `kube-proxy`
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除 `kube-proxy`
- en: Easier scaling
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更简便的扩展
- en: Security
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性
- en: '`kube-proxy` has helped make Kubernetes usable. Without it, Kubernetes wouldn’t
    have worked. However, there’s a concern. `kube-proxy` uses iptables. Although
    iptables have been in Linux for a long time, it doesn’t scale very well. iptables
    rules are stored in a list, and when Pods establish a new connection to a Kubernetes
    Service, they go through every single iptable rule until the specific rule that’s
    being looked for is reached. Although that may not seem like a lot for a few rules,
    if you have thousands (which you most likely will), it’s a performance concern.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`kube-proxy` 有助于使 Kubernetes 可用。如果没有它，Kubernetes 就无法正常工作。然而，也存在一个问题。`kube-proxy`
    使用 iptables。尽管 iptables 已经在 Linux 中存在很长时间，但它的扩展性并不好。iptables 规则以列表的形式存储，当 Pods
    建立与 Kubernetes 服务的连接时，它们会逐条检查每个 iptable 规则，直到找到特定的规则。虽然这对少量规则来说可能不算什么，但如果有成千上万条规则（你很可能会有），那么这将是一个性能问题。'
- en: From a scalability perspective, as the number of Kubernetes Services (any type
    of Kubernetes Service) grows inside your cluster, the connection performance degrades.
    One of the reasons is that iptable rules are not incremental when you create them,
    which means that `kube-proxy` writes the whole table for every single update.
    It’s a huge performance impact.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 从可扩展性的角度来看，随着 Kubernetes 服务（任何类型的 Kubernetes 服务）在集群中的数量增加，连接性能会下降。原因之一是，当你创建
    iptable 规则时，它们并不是增量式的，这意味着每次更新时，`kube-proxy` 都会重写整个表格。这会造成巨大的性能影响。
- en: 'Now that you know some theory behind why eBPF matters, which again, can be
    an entire book in itself, let’s dive into the hands-on implementation of eBPF:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了一些 eBPF 重要性的理论，尽管这些内容本身可以写成一本书，让我们深入探讨 eBPF 的实践实现：
- en: First, it all depends on the cluster you’re using. As with every other Kubernetes
    environment, if you’re using a managed Kubernetes Service in the cloud, using
    eBPF will vary based on the CNI you specify for the Kubernetes Managed Service
    deployment.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，这一切取决于你使用的集群。和其他所有 Kubernetes 环境一样，如果你使用的是云中的托管 Kubernetes 服务，使用 eBPF 将根据你为
    Kubernetes 托管服务部署指定的 CNI 来变化。
- en: 'If you’re planning to run Kubeadm, for example, the following command is what
    you should use to remove `kube-proxy`. Even if you don’t use all the flags, ensure
    that you use the `--skip-phases=addon/kube-proxy` flag as this is needed so that
    `kube-proxy` doesn’t get installed:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算运行 Kubeadm，例如，以下命令是你应该使用的来移除`kube-proxy`。即使你不使用所有标志，也请确保使用`--skip-phases=addon/kube-proxy`标志，因为这是防止安装`kube-proxy`所必需的：
- en: '[PRE0]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, install Helm if you don’t already have it:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，如果你还没有安装 Helm，请安装 Helm：
- en: '[PRE1]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the Cilium Helm repo:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 Cilium Helm 仓库：
- en: '[PRE4]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once the repo is added, you can install Cilium with Helm. Notice the flag to
    set the `kube-proxy` replacement:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加仓库后，你可以使用 Helm 安装 Cilium。注意设置`kube-proxy`替代项的标志：
- en: '[PRE5]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After a few minutes, check to see that the Cilium Pods are running successfully
    by running the following command:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几分钟后，运行以下命令检查 Cilium Pods 是否成功运行：
- en: '[PRE10]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output should look similar to the following screenshot:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应类似于以下截图：
- en: '![Figure 8.17 – Cilium Pods'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.17 – Cilium Pods'
- en: '](img/B19116_08_17.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_17.jpg)'
- en: Figure 8.17 – Cilium Pods
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.17 – Cilium Pods
- en: Utilizing eBPF is still an extremely new topic and you may not see it through
    all environments. However, I can assure you that you’ll begin to see it more and
    more as eBPF becomes more popular and the benefits are seen more.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 eBPF 仍然是一个非常新的话题，你可能在所有环境中都看不到它。然而，我可以向你保证，随着 eBPF 的日益普及以及它带来的好处，你将会看到它越来越多的应用。
- en: Upgrading the Kubernetes API
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 升级 Kubernetes API
- en: In every Kubernetes environment, you must keep track of the Kubernetes API.
    The last thing you want to do is have an insanely out-of-date API for any software/platform,
    but definitely for Kubernetes as well. All APIs, even Kubernetes, can eventually
    have a security hole that needs to be patched. You must ensure that your environment
    is ready for it.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个 Kubernetes 环境中，你必须跟踪 Kubernetes API。你最不想做的事情就是让任何软件或平台的 API 过时，尤其是 Kubernetes。所有的
    API，甚至是 Kubernetes，都可能最终存在需要修补的安全漏洞。你必须确保你的环境做好准备。
- en: 'When you keep track of a Kubernetes API, the inevitable will happen: you’ll
    have to upgrade the API. This isn’t just for features and to keep the system up
    to date, but from a security perspective, you don’t want to be too far behind
    as every old version of every piece of software stops getting patched and security
    holes open.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 当你跟踪 Kubernetes API 时，不可避免地会发生一件事：你将不得不升级 API。这不仅仅是为了功能和保持系统的最新，更从安全的角度来说，你不希望落后太远，因为每个软件的旧版本都会停止修补，安全漏洞会被暴露出来。
- en: For the rest of this section, you’ll learn how to do a Kubernetes upgrade on
    a cluster running Kubeadm. If you don’t have Kubeadm, that’s fine—still follow
    along. Eventually, you’ll have to do an upgrade on a raw Kubernetes cluster, so
    it’s still good to know.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的其余部分，你将学习如何在运行 Kubeadm 的集群上执行 Kubernetes 升级。如果你没有 Kubeadm，也没关系——仍然可以跟着做。最终，你将不得不对一个原始的
    Kubernetes 集群进行升级，所以了解这些还是很有用的。
- en: Important note
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: For any type of upgrade, especially in production, you should not only vigorously
    test the upgrade path, but you should back up your environment components.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何类型的升级，特别是在生产环境中，你不仅需要积极地测试升级路径，还应备份你的环境组件。
- en: Upgrading Control Planes
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 升级控制平面
- en: 'Let’s begin by upgrading a Kubeadm Control Plane. Follow along with these steps:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从升级 Kubeadm 控制平面开始。请按照以下步骤操作：
- en: 'Run the `upgrade` command, which will show which upgrade path is available:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`upgrade`命令，查看可用的升级路径：
- en: '[PRE11]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Figure 8.18 – Kubernetes upgrade'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.18 – Kubernetes 升级'
- en: '](img/B19116_08_18.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_18.jpg)'
- en: Figure 8.18 – Kubernetes upgrade
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.18 – Kubernetes 升级
- en: 'In the following output, you’ll see the target versions for every upgrade available,
    along with the command to run. The output will also show what the current Kubernetes
    API version is and which Control Plane components will be upgraded:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下输出中，你将看到每个可用升级的目标版本，以及需要运行的命令。输出还会显示当前的 Kubernetes API 版本，以及哪些控制平面组件将会被升级：
- en: '![Figure 8.19 – Upgrade path'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.19 – 升级路径'
- en: '](img/B19116_08_19.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_19.jpg)'
- en: Figure 8.19 – Upgrade path
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.19 – 升级路径
- en: 'Before running the upgrade, you’ll want to download the latest version of the
    API and confirm that Kubeadm gets put on hold to not upgrade all Control Plane
    components at once. Note that running the following command may result in you
    having to restart the server:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行升级之前，你需要下载最新版本的API，并确认将Kubeadm保持在暂停状态，以避免一次性升级所有控制平面组件。注意，运行以下命令可能会导致你需要重启服务器：
- en: '[PRE12]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once complete, run the upgrade, like so:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，运行升级命令，如下所示：
- en: '[PRE13]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You’ll see an output similar to the following screenshot:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到类似以下截图的输出：
- en: '![Figure 8.20 – Upgrade output'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.20 – 升级输出'
- en: '](img/B19116_08_20.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_20.jpg)'
- en: Figure 8.20 – Upgrade output
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.20 – 升级输出
- en: 'Here is the second part of the output from the preceding screenshot:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面截图中的第二部分输出：
- en: '![Figure 8.21 – Upgrade output continued'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.21 – 升级输出继续'
- en: '](img/B19116_08_21.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_21.jpg)'
- en: Figure 8.21 – Upgrade output continued
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.21 – 升级输出继续
- en: Now that you’ve upgraded the Control Plane, let’s learn how to upgrade worker
    nodes.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经升级了控制平面，让我们学习如何升级工作节点。
- en: Upgrading worker nodes
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 升级工作节点
- en: 'Before running the upgrade, you’ll want to download the latest version and
    confirm that Kubeadm gets put on hold to not upgrade all Control Plane components
    at once. Note that running the following command may result in you having to restart
    the server:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行升级之前，你需要下载最新版本的API，并确认将Kubeadm保持在暂停状态，以避免一次性升级所有控制平面组件。注意，运行以下命令可能会导致你需要重启服务器：
- en: '[PRE14]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, upgrade the worker node, like so:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，升级工作节点，如下所示：
- en: '[PRE15]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![Figure 8.22 – Node upgrade'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.22 – 节点升级'
- en: '](img/B19116_08_22.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_22.jpg)'
- en: Figure 8.22 – Node upgrade
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.22 – 节点升级
- en: That’s it! This process is a bit more straightforward compared to the Control
    Plane.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！与控制平面相比，这个过程相对更简单直接。
- en: Upgrading the kubelet
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 升级kubelet
- en: 'The last step is to upgrade the kubelet on both the Control Planes and worker
    nodes. Follow along:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是升级控制平面和工作节点上的kubelet。请按照以下步骤操作：
- en: 'Run the following for the kubelet upgrade:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来升级kubelet：
- en: '[PRE16]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, reload the kubelet, like so:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，重新加载kubelet，如下所示：
- en: '[PRE17]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run the following command, and you should now see that the Kubernetes cluster
    is upgraded:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令后，你应该看到Kubernetes集群已成功升级：
- en: '[PRE19]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Although this may not seem like something purely security related, and maybe
    it’s not, it’s still extremely important for security. You can’t have old versions
    of software lying around, just as you can’t have old versions of APIs lying around.
    For platform engineering teams, it’s no different.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这看起来不像是纯粹与安全相关的内容，也许它确实不是，但它对安全来说依然至关重要。你不能让旧版本的软件闲置不管，就像你不能让旧版本的API闲置不管一样。对平台工程团队而言，这没有什么不同。
- en: Audit logging and troubleshooting
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审计日志记录和故障排除
- en: Kubernetes generates several logs. In fact, most Kubernetes resources have the
    metrics endpoint enabled. That means, everything and anything that’s generated
    with that Kubernetes resource—such as authentication, access, Pods going down,
    containers coming up, end users accessing it, and everything in between—is recorded.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes生成了多个日志。事实上，大多数Kubernetes资源都启用了度量端点。这意味着，任何由该Kubernetes资源生成的内容——如身份验证、访问、Pod崩溃、容器启动、最终用户访问等——都会被记录下来。
- en: The problem is that audit logging—and, sometimes, even the metrics server—isn’t
    enabled or even installed by default. You have the ability to install and configure
    audit logging in Kubernetes, but it’s not prepared out of the box.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于审计日志记录——有时甚至是度量服务器——默认情况下并未启用或安装。你有能力在Kubernetes中安装和配置审计日志记录，但它不是开箱即用的。
- en: What’s meant by that is the Kubernetes API for audit logging is available and
    *turned on* out of the box. It just won’t start to generate any logs that you
    can see because you first need to set up a policy via the `audit.k8s.io/v1` API,
    but policies don’t exist by default—it’s up to the engineer to create those policies.
    The policy can be anything from *show me everything* to *show me particular read
    actions on these particular Kubernetes resources*. It can be as high-level or
    as granular as you’d like.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着Kubernetes的审计日志API是可用的并且*开箱即用*。它只是不会开始生成任何你能看到的日志，因为你首先需要通过`audit.k8s.io/v1`
    API设置一个策略，但策略默认是不存在的——需要工程师自己创建这些策略。这个策略可以是从*展示所有内容*到*展示特定Kubernetes资源的读取操作*，可以是高层次的，也可以是非常细致的，取决于你的需求。
- en: 'There are a lot of policies, including audit logging, that can be turned on.
    In fact, it could most likely be a topic that spans an entire cluster itself.
    Because of that, we’ll stick with audit logging in this section. However, the
    following screenshot showcases the **Open Web Application Security Project** (**OWASP**)
    Top 10 for Kubernetes, and one of the top 10 is proper logging:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多策略，包括审计日志，可以被启用。事实上，这可能是一个涉及整个集群的主题。由于这个原因，本节我们将重点讨论审计日志。然而，以下截图展示了 **开放
    Web 应用安全项目**（**OWASP**）为 Kubernetes 提出的前 10 大问题，其中之一就是适当的日志记录：
- en: '![Figure 8.23 – OWASP Top 10'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.23 – OWASP 前 10 名'
- en: '](img/B19116_08_23.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_23.jpg)'
- en: Figure 8.23 – OWASP Top 10
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.23 – OWASP 前 10 名
- en: 'You can see more information about it here: [https://github.com/OWASP/www-project-kubernetes-top-ten/blob/main/2022/en/src/K05-inadequate-logging.md](https://github.com/OWASP/www-project-kubernetes-top-ten/blob/main/2022/en/src/K05-inadequate-logging.md).'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处查看更多相关信息：[https://github.com/OWASP/www-project-kubernetes-top-ten/blob/main/2022/en/src/K05-inadequate-logging.md](https://github.com/OWASP/www-project-kubernetes-top-ten/blob/main/2022/en/src/K05-inadequate-logging.md)。
- en: Before jumping into the hands-on part, let’s talk about what audit logging is.
    Audit logging is recorded by the Kubernetes API server. With those *recordings*,
    which are just logs, it documents a chronological set in an order that shows the
    sequence of actions on a Kubernetes cluster.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入实际操作部分之前，让我们先谈谈审计日志是什么。审计日志由 Kubernetes API 服务器记录。通过这些*记录*（就是日志），它按时间顺序记录了
    Kubernetes 集群上操作的顺序。
- en: 'It generates:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 它生成：
- en: Actions taken by users
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户执行的操作
- en: Actions taken by Kubernetes resources
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 资源执行的操作
- en: The Control Plane itself
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制平面本身
- en: 'Essentially, audit logs allow you to ask yourself questions such as the following:
    1) *What happened?* 2) *When did it happen?* 3) *How did it happen?* No question
    should be left unanswered as you can retrieve everything and anything about a
    Kubernetes cluster via the audit logs.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，审计日志让你可以提出以下问题：1）*发生了什么？* 2）*什么时候发生的？* 3）*怎么发生的？* 任何问题都不应该留下未解答的，因为您可以通过审计日志获取
    Kubernetes 集群中的任何信息。
- en: 'With that, let’s learn how to set them up. Follow these steps:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，让我们学习如何设置它们。按照以下步骤操作：
- en: 'Create a network policy such as the one shown next. For the purposes of this
    section, you can store it under `/etc/kubernetes/simple-policy.yaml`:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个网络策略，如下所示。为了本节的目的，您可以将其存储在 `/etc/kubernetes/simple-policy.yaml` 下：
- en: '[PRE20]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Important note
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you’re on a managed Kubernetes Service, such as AKS or EKS, you’ll have to
    turn on audit logging in a different way, and it all depends on the server you’re
    using. However, you should still read through this section as you’ll end up coming
    across audit logs on bare-metal/VM environments (especially during this time when
    hybrid cloud is becoming far more popular) at some point on your Kubernetes journey.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是托管 Kubernetes 服务，如 AKS 或 EKS，您需要以不同的方式启用审计日志，具体方式取决于您使用的服务器。然而，您仍然应该阅读这一部分，因为在
    Kubernetes 使用过程中，您最终会接触到裸金属/虚拟机环境中的审计日志（尤其是在混合云越来越流行的今天）。
- en: 'Next, open up the following location via Vim or an editor of your choosing:
    `/etc/kubernetes/manifests/kube-apiserver.yaml`.'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过 Vim 或您选择的编辑器打开以下位置：`/etc/kubernetes/manifests/kube-apiserver.yaml`。
- en: 'Add in the following code, as shown in *Figure 8**.24*. This will give you
    the ability to set audit log consumption and set how long the logs are kept, which
    path the output of the audit logs should go to, and where your audit policy exists:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照*图 8.24*所示，添加以下代码。这将使您能够设置审计日志的消费方式，并设置日志保留的时间、审计日志输出的路径以及审计策略的位置：
- en: '[PRE24]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![Figure 8.24 – Audit policy path'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.24 – 审计策略路径'
- en: '](img/B19116_08_24.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_24.jpg)'
- en: Figure 8.24 – Audit policy path
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.24 – 审计策略路径
- en: 'Under `volumeMounts`, add the following code, as shown in *Figure 8**.25*.
    For Kubernetes, the policy and the path for the audit logs need to be mounted
    in the cluster:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `volumeMounts` 下，添加以下代码，如*图 8.25*所示。对于 Kubernetes，审计日志的策略和路径需要在集群中挂载：
- en: '[PRE29]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '![Figure 8.25 – Policy mount'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.25 – 策略挂载'
- en: '](img/B19116_08_25.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_25.jpg)'
- en: Figure 8.25 – Policy mount
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.25 – 策略挂载
- en: 'Under `hostPath`, add the following:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `hostPath` 下，添加以下内容：
- en: '[PRE35]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '![Figure 8.26 – Policy host path'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.26 – 策略主机路径'
- en: '](img/B19116_08_26.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_26.jpg)'
- en: Figure 8.26 – Policy host path
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.26 – 策略主机路径
- en: 'Restart the kubelet by running the following command:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令重新启动 kubelet：
- en: '[PRE43]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Confirm that the kubelet is still running, like so:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认 kubelet 仍在运行，如下所示：
- en: '[PRE44]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You can now view the audit logs on the Control Plane at the path/location where
    you stored the `audit.log` file by executing the following command:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过执行以下命令查看控制平面上的审核日志，路径/位置是你存储 `audit.log` 文件的地方：
- en: '[PRE45]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: You should see a bunch of log output. For security purposes, I haven’t included
    a screenshot showcasing the output.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到一大堆日志输出。出于安全考虑，我没有包含展示输出的截图。
- en: As mentioned earlier, this type of configuration would be for a Kubeadm cluster
    or something on-prem. For the cloud, it’s going to be a bit different. However,
    it’s still important to understand this process. Remember—the cloud abstracts
    a lot away from engineers, but engineers must still understand the underlying
    components of a system to properly work with it.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这种配置类型适用于 Kubeadm 集群或本地部署的集群。对于云环境，将会有所不同。不过，了解这个过程仍然非常重要。记住——云平台将很多东西抽象化，但工程师仍然需要理解系统的底层组件，以便正确地与之协作。
- en: Understanding RBAC
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 RBAC
- en: 'When it comes to users, groups, and service accounts, there are two questions
    you must ask yourself. The first is: *Who can access your cluster?* Which users,
    service accounts, and groups have the ability to run `kubectl` commands on the
    clusters in development, staging, and production? Which of those users have a
    Kubeconfig that gives them access to particular clusters? Which environments can
    they connect to?'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到用户、组和服务账户时，你必须问自己两个问题。第一个是：*谁可以访问你的集群？* 哪些用户、服务账户和组有能力在开发、预发布和生产环境中的集群上运行
    `kubectl` 命令？这些用户中，哪些有一个 Kubeconfig 配置文件，赋予他们访问特定集群的权限？他们可以连接到哪些环境？
- en: 'The second question is: *What can they do once they’re inside the cluster?*
    Can they list Pods? Create Pods? See Ingress Controllers? Create Ingress Controllers?
    What types of Kubernetes resources can they interact with throughout each environment?'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个问题是：*他们进入集群后能做什么？* 他们能列出 Pods 吗？创建 Pods 吗？查看 Ingress 控制器吗？创建 Ingress 控制器吗？他们在每个环境中可以与哪些
    Kubernetes 资源进行交互？
- en: When you’re setting up a Kubernetes environment, you must also think about authentication
    and authorization. Who can access your cluster and what can they do? Further,
    you must think about what the users can do throughout each environment. For example,
    thinking about the single tenancy model that you learned about in a previous chapter,
    one engineer may have full admin access on one cluster and read-only access on
    another. With that, you must also think about multiple authorization methods in
    terms of which permissions you’re giving people.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置 Kubernetes 环境时，你还必须考虑身份验证和授权。谁可以访问你的集群，他们能做些什么？此外，你还需要思考用户在每个环境中可以执行的操作。例如，考虑你在前一章学到的单租户模型，一个工程师可能在一个集群上拥有完全的管理员权限，而在另一个集群上仅有只读访问权限。基于此，你还需要考虑在授权方法方面，应该授予用户哪些权限。
- en: In this section, you’re going to learn how to manage from a permissions perspective
    users, groups, and teams in Kubernetes using RBAC.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习如何从权限角度管理 Kubernetes 中的用户、组和团队，使用 RBAC。
- en: Please note that although this section is not huge, it should point you in the
    right direction in terms of how to think about RBAC and how to start implementing
    it.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，虽然本节内容不多，但它应该能为你指引正确的方向，帮助你思考 RBAC 并开始实施它。
- en: What is RBAC?
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 RBAC？
- en: RBAC, as with many other topics in this book (I’m a broken record at this point),
    can be an entire book in itself. Because of that, let’s do a brief theoretical
    explanation and then dive into the hands-on piece.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: RBAC，和本书中的许多其他主题一样（此时我像个老唱片一样重复），本身可以成为一本完整的书。因此，我们先进行简短的理论解释，然后再深入实践部分。
- en: RBAC, by definition, is a way to ensure that users, groups, and service accounts
    only have the permissions that they need from an authorization perspective. RBAC
    does not do authentication—it does authorization. The authentication piece comes
    before RBAC. Once there’s a user, group, or service account created, then RBAC
    can jump into action and start creating permissions.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: RBAC 的定义是，确保用户、组和服务账户只拥有它们所需权限的授权方式。RBAC 不进行身份验证——它进行的是授权。身份验证是在 RBAC 之前完成的。一旦用户、组或服务账户被创建，RBAC
    就可以启动并开始创建权限。
- en: 'Within RBAC for Kubernetes, you have four primary resources that you want to
    utilize:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 的 RBAC 中，你有四个主要资源需要使用：
- en: '`Roles`'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Roles`'
- en: '`ClusterRoles`'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClusterRoles`'
- en: '`RoleBindings`'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RoleBindings`'
- en: '`ClusterRoleBindings`'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClusterRoleBindings`'
- en: You’ll learn more about them in the upcoming sections.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在接下来的章节中了解更多关于它们的内容。
- en: 'When you’re thinking about RBAC, think: *What am I allowing this person to
    do* *inside Kubernetes?*'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在考虑 RBAC 时，思考一下：*我允许这个人在 Kubernetes 内部做什么？*
- en: One thing to keep in mind is that RBAC is typically the bane of every security
    engineer’s existence. It’s one of those topics in Kubernetes that makes everyone
    bang their head against a wall because it can start to become insanely complex,
    and there’s no central way to manage hundreds of RBAC roles and permissions. There
    are tools and platforms out there that are trying to mitigate this, such as Kubescape’s
    RBAC Visualizer.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的一点是，RBAC 通常是每个安全工程师的噩梦。它是 Kubernetes 中让每个人都想撞墙的话题之一，因为它可能变得非常复杂，而且没有中央方式来管理成百上千的
    RBAC 角色和权限。市场上有一些工具和平台在尝试缓解这一问题，例如 Kubescape 的 RBAC 可视化工具。
- en: To continue along with this chapter, you’ll need a user, group, or service account.
    Because Kubernetes doesn’t have an out-of-the-box method for creating users and
    groups, let’s use a service account.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 要继续本章内容，你需要一个用户、组或服务账户。因为 Kubernetes 没有现成的创建用户和组的方法，所以我们使用一个服务账户。
- en: 'Run the following command to create a new service account called `miketest`:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令创建一个名为 `miketest` 的新服务账户：
- en: '[PRE46]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Once the service account is created, it can be used for the following sections.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 服务账户创建完成后，可以在接下来的部分中使用它。
- en: Roles and ClusterRoles
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Roles 和 ClusterRoles
- en: '`Roles` are permissions that you can give users, groups, and service accounts,
    and they are namespace scoped. Meaning, let’s say you create a role called `readpods`.
    That role would be tied to a namespace—for example, a namespace called `ingress`.
    That means the `readpods` role only works on the `ingress` namespace, and it’s
    not tied to any other namespace.'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`Roles` 是你可以赋予用户、组和服务账户的权限，并且它们是命名空间范围的。这意味着，假设你创建了一个名为 `readpods` 的角色。该角色将绑定到一个命名空间——例如，名为
    `ingress` 的命名空间。这意味着 `readpods` 角色只在 `ingress` 命名空间中有效，而不与其他命名空间绑定。'
- en: How about if you want a role/permissions for a user/group/service account that’s
    used across all namespaces through the cluster? That’s where `ClusterRoles` come
    into play. A `ClusterRole` is the same thing as a `Role`. The only difference
    is that it’s not namespace scoped.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想为一个在集群中所有命名空间中使用的用户/组/服务账户设置角色/权限呢？这时 `ClusterRoles` 就派上用场了。`ClusterRole`
    与 `Role` 相同，唯一的区别是它没有命名空间范围。
- en: Let’s dive in to learn how you can create `Roles` and `ClusterRoles`.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入学习如何创建 `Roles` 和 `ClusterRoles`。
- en: Roles
  id: totrans-314
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Roles
- en: 'The following code snippet is an example of a `Role` that you can create. It’s
    scoped to the `ingress` namespace and sets read-only permissions for the Pod Kubernetes
    resource. Notice in the verbs that it’s all read permissions—`get`, `watch`, and
    `list`:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段是一个 `Role` 的示例，你可以创建它。它的作用范围是 `ingress` 命名空间，并为 Pod Kubernetes 资源设置只读权限。注意在动词中，它全是读取权限——`get`、`watch`
    和 `list`：
- en: '[PRE47]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Implementing the preceding `Role` will ensure that you have a proper role created
    to give a user/group/service account read-only permissions for Pods in the `ingress`
    namespace.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 实现前面的 `Role` 将确保你创建了一个适当的角色，以便为用户/组/服务账户在 `ingress` 命名空间中提供只读权限。
- en: ClusterRoles
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ClusterRoles
- en: 'As with the preceding `Role`, the following `ClusterRole` creates a `ClusterRole`
    called `reader` for read-only permissions on Pods. The key difference is that
    it’s not scoped to a particular namespace:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的 `Role` 一样，以下 `ClusterRole` 创建了一个名为 `reader` 的 `ClusterRole`，用于对 Pods 进行只读权限。关键区别在于，它并不限制于某个特定的命名空间：
- en: '[PRE48]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Implementing the preceding `ClusterRole` will ensure that you have a proper
    role created to give a user/group/service account read-only permissions for Pods
    across all namespaces in the cluster.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 实现前面的 `ClusterRole` 将确保你创建了一个适当的角色，以便为用户/组/服务账户在集群的所有命名空间中提供只读权限。
- en: Next, let’s learn how to bind `Roles` to a particular service account.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们学习如何将 `Roles` 绑定到特定的服务账户。
- en: RoleBindings and ClusterRoleBindings
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RoleBindings 和 ClusterRoleBindings
- en: A `RoleBinding` is a way that you tie/attach a `Role` to a user/group/service
    account. For example, let’s say you have a `Role` called `podreaders` and you
    want to tie/attach that role to the `miketest` service account. You would use
    a `RoleBinding` to perform that action.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`RoleBinding` 是将 `Role` 绑定/附加到用户/组/服务账户的一种方式。例如，假设你有一个名为 `podreaders` 的 `Role`，并且你想将该角色绑定/附加到
    `miketest` 服务账户。你可以使用 `RoleBinding` 来执行这个操作。'
- en: Just as with `Roles` and `ClusterRoles`, the only difference is that `RoleBindings`
    are namespace scoped and `ClusterRoleBindings` are not and can be used throughout
    the cluster.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 `Roles` 和 `ClusterRoles` 一样，唯一的区别是 `RoleBindings` 是命名空间范围的，而 `ClusterRoleBindings`
    则没有，它们可以在整个集群中使用。
- en: Let’s learn how to implement `RoleBindings` and `ClusterRoleBindings`.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何实现 `RoleBindings` 和 `ClusterRoleBindings`。
- en: RoleBinding
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RoleBinding
- en: 'The following `RoleBinding` takes the `Role` that you created in the previous
    section and attaches it to the `miketest` service account. See how there’s a `kind`
    and the service account kind is specified? This is where you can specify a `group`
    or a `user`. It’s also scoped to the `ingress` namespace as this is not a `ClusterRoleBinding`:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 `RoleBinding` 将您在上一节中创建的 `Role` 附加到 `miketest` 服务账户。看到这里有一个 `kind` 并且指定了服务账户的种类了吗？在这里，您可以指定一个
    `group` 或 `user`。由于这不是一个 `ClusterRoleBinding`，它的作用范围也仅限于 `ingress` 命名空间：
- en: '[PRE49]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: ClusterRoleBinding
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ClusterRoleBinding
- en: 'Much as with the preceding `RoleBinding`, the following `ClusterRoleBinding`
    will attach the `miketest` service account to the `ClusterRole` and reference
    the following `ClusterRole`:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的 `RoleBinding` 类似，以下的 `ClusterRoleBinding` 会将 `miketest` 服务账户附加到 `ClusterRole`
    并引用以下的 `ClusterRole`：
- en: '[PRE50]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Now that you know about overall authentication and authorization permissions,
    it’s time to learn about overall Kubernetes resource security and the approaches
    that you can take out of the gate to ensure a successful security-centric deployment.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了整体的身份验证和授权权限，是时候了解 Kubernetes 资源的整体安全性，以及您可以采取的初步措施，以确保成功的安全部署。
- en: Kubernetes resource (object) security
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 资源（对象）安全性
- en: Throughout this chapter, you learned a little bit about Kubernetes resource
    security. Remember, Kubernetes resources can be anything from Pods to Ingress
    Controllers to Services. Essentially, anything running inside of the Kubernetes
    cluster that you’re reaching via the API is a Kubernetes resource.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了一些 Kubernetes 资源安全性的知识。请记住，Kubernetes 资源可以是从 Pods 到 Ingress 控制器到服务等任何东西。实质上，任何您通过
    API 访问的运行在 Kubernetes 集群中的东西都是 Kubernetes 资源。
- en: In this section, you’re going to learn the top methods of today to secure Kubernetes
    resources within Kubernetes and by using third-party tools.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习当前保障 Kubernetes 资源安全的最佳方法，这些方法适用于 Kubernetes 内部和使用第三方工具。
- en: Pod security
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pod 安全性
- en: When it comes to network security in a Kubernetes environment, there are two
    parts—the host network and the internal network. For the purposes of this section,
    we can’t go into host networking because every environment is going to be different.
    Whether it’s different physical hardware or virtual hardware setups, there’s no
    *one-size-fits-all* network environment.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到 Kubernetes 环境中的网络安全时，分为两部分——主机网络和内部网络。由于每个环境都不同，本节不讨论主机网络。无论是不同的物理硬件还是虚拟硬件设置，都没有
    *一刀切* 的网络环境。
- en: 'However, there are a few helpful tips that work across every environment:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一些适用于所有环境的有用建议：
- en: Ensure that you have proper firewall rules.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您有适当的防火墙规则。
- en: Ensure that you’re implementing proper routing protocols and not just opening
    up the entire network.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您正在实施正确的路由协议，而不仅仅是开放整个网络。
- en: Ensure that you have the proper port setup in place.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已正确设置端口。
- en: Ensure that you’re logging and observing network traffic.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您正在记录并观察网络流量。
- en: For Kubernetes network security, there are network policies.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Kubernetes 网络安全，有网络策略。
- en: Network Policies are built into Kubernetes via the `networking.k8s.io/v1` API.
    Network Policies act like firewall rules for both Ingress and Egress traffic.
    However, network policies aren’t just about whitelisting or blacklisting IP addresses
    and ports. You can do much more with a policy. For example, you can block traffic
    from a specific network to a specific namespace, from a specific namespace, or
    to/from a specific application. Because of the vast number of options that come
    with Network Policies, you have plenty of options, but you’ll want to ensure that
    you’re setting up the right policies. One wrong accidental `162.x.x.x` instead
    of `172.x.x.x` can completely throw off the entire network workflow in a network
    policy and completely halt application workloads.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes通过`networking.k8s.io/v1` API内置了网络策略（Network Policies）。网络策略就像是针对入口和出口流量的防火墙规则。不过，网络策略不仅仅是关于允许或禁止特定IP地址和端口的问题。你可以通过策略做更多的事情。例如，你可以阻止从特定网络到特定命名空间、从特定命名空间或者到/从特定应用程序的流量。由于网络策略提供了大量选项，你可以有很多选择，但你需要确保设置了正确的策略。一不小心写错了`162.x.x.x`而不是`172.x.x.x`，可能会完全打乱网络策略中的整个工作流程，并且完全停止应用程序的工作负载。
- en: Let’s dive into what a network policy looks like.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解一下网络策略是什么样子。
- en: 'To test this out, run the following Pods in your Kubernetes environment:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试这一点，在你的Kubernetes环境中运行以下Pods：
- en: '[PRE51]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The preceding new Pods will run a container image called `busybox`, which is
    a small form factor that’s usually used for testing.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 上述新的Pods将运行一个名为`busybox`的容器镜像，这是一个通常用于测试的小型尺寸。
- en: 'Next, obtain the IP address of the Pods, like so:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，获取Pods的IP地址，像这样：
- en: '[PRE52]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '![Figure 8.27 – Pod output'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.27 – Pod 输出'
- en: '](img/B19116_08_27.jpg)'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_27.jpg)'
- en: Figure 8.27 – Pod output
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.27 – Pod 输出
- en: 'Run a ping against the `busybox1` Pod:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 对`busybox1` Pod运行ping命令：
- en: '[PRE53]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '![Figure 8.28 – Ping output'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.28 – Ping 输出'
- en: '](img/B19116_08_28.jpg)'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19116_08_28.jpg)'
- en: Figure 8.28 – Ping output
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.28 – Ping 输出
- en: 'Now that you know there’s proper `busybox1` Pod:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道了有一个正确的`busybox1` Pod：
- en: '[PRE54]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Run the ping against `busybox1` again:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 再次对`busybox1`运行ping命令：
- en: '[PRE55]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: There should now be 100% packet loss.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该有100%的数据包丢失。
- en: If you’re in an environment where this didn’t work, such as a standard Minikube
    environment, the reason why it’s most likely not working is that you’re using
    a CNI that doesn’t have network policies enabled or doesn’t support network policies.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个类似标准Minikube环境中这样做失败了，原因很可能是你使用的CNI不支持或未启用网络策略。
- en: To find out how to enable network policies, you’ll need to do a quick search
    on how to implement network policies for your specific CNI.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何启用网络策略，你需要快速搜索如何为你的特定CNI实现网络策略。
- en: Policy enforcement
  id: totrans-367
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 策略执行
- en: In the previous section, you learned about security at the network layer, which
    is of course needed. After (or before) the network layer is the application layer,
    which is where policy enforcement around Pods and containers comes into play.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，你了解了在网络层面上的安全性，这当然是必需的。在网络层之后（或之前）是应用层，在这里围绕Pods和容器的策略执行变得至关重要。
- en: The whole idea behind policy enforcement is to give you the ability to protect
    your Pods, ensure best security practices, and set standards for your organization.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 策略执行的整个理念是为你提供保护你的Pods、确保最佳安全实践并为你的组织设置标准的能力。
- en: For example, one of the biggest best practices in production is to ensure that
    you’re not using the latest container image version in production. Instead, you
    always want to use a container image version that’s properly versioned and battle-tested
    for protection. With policy enforcement in Kubernetes, you can accomplish that.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在生产环境中的一个最佳实践是确保你不在生产环境中使用最新的容器镜像版本。相反，你总是要使用一个经过适当版本化和经过实战测试的容器镜像版本来保护你的应用程序。通过Kubernetes中的策略执行，你可以实现这一点。
- en: Right now, the two biggest ways to implement policy enforcement are using **Open
    Policy Agent** (**OPA**) and Kyverno. They’re both the same from a policy enforcement
    perspective, but the biggest difference is that Kyverno only works inside of Kubernetes.
    Because of that, a lot of engineers are going toward using OPA so that they can
    use it throughout their environment and not just in Kubernetes.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，实施策略执行的两个最重要的方法是使用**开放策略代理**（**OPA**）和Kyverno。从策略执行的角度来看，它们都是相同的，但最大的区别在于Kyverno只能在Kubernetes内部工作。因此，许多工程师倾向于使用OPA，这样他们可以在整个环境中使用它，而不仅仅是在Kubernetes中。
- en: Because of that, the hands-on section will be using OPA.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在实际操作部分将使用OPA。
- en: What about Pod Security Policies?
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，Pod 安全策略（Pod Security Policies）怎么办？
- en: If you’ve heard of Pod Security Policies, they’re essentially the same thing
    as OPA. However, they were deprecated in v1.21 of Kubernetes and completely removed
    in v1.25.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你听说过 Pod 安全策略（Pod Security Policies），它们本质上与 OPA 相同。然而，它们在 Kubernetes 的 v1.21
    版本中已被弃用，并在 v1.25 版本中被完全移除。
- en: OPA
  id: totrans-375
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OPA
- en: When you want to configure a specific policy, you can use a policy agent such
    as OPA. OPA allows you to write policies in an OPA-specific language called Rego
    (which you’ll see later in this section). When you write a policy, any request
    or event that comes in from another Kubernetes resource or an outside entity will
    be queried. OPA’s decision agent will give it a *pass* or *fail*.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想配置一个特定的策略时，可以使用像 OPA 这样的策略代理。OPA 允许你使用一种名为 Rego 的 OPA 专用语言编写策略（你将在本节中看到）。当你编写策略时，来自其他
    Kubernetes 资源或外部实体的任何请求或事件都会被查询。OPA 的决策代理会给出 *通过* 或 *失败* 的结果。
- en: But how does OPA know how to implement policies?
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，OPA 如何知道如何实现策略呢？
- en: That’s where OPA Gatekeeper comes into play. Gatekeeper is a *middle ground*
    of sorts that allows Kubernetes to interact with OPA. Gatekeeper is installed
    on Kubernetes and enables the use of OPA policies.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 OPA Gatekeeper 的作用所在。Gatekeeper 是一个 *中间层*，它允许 Kubernetes 与 OPA 交互。Gatekeeper
    安装在 Kubernetes 上，并启用 OPA 策略的使用。
- en: 'Let’s dive in from a hands-on perspective to set up OPA. The first part will
    be deploying OPA Gatekeeper and the second part will be implementing a policy.
    Proceed as follows:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从动手实践的角度来深入了解 OPA 的设置。第一部分将是部署 OPA Gatekeeper，第二部分将是实现策略。按如下步骤进行：
- en: 'Add Helm chart for Gatekeeper, like so:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 Gatekeeper 的 Helm chart，如下所示：
- en: '[PRE56]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Install the Helm chart by running the following command:'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令安装 Helm chart：
- en: '[PRE57]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Confirm that all Kubernetes resources for Gatekeeper were deployed:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认 Gatekeeper 的所有 Kubernetes 资源是否已部署：
- en: '[PRE58]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Now that Gatekeeper is installed, let’s start implementing the OPA policies.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 Gatekeeper 已安装，接下来我们开始实施 OPA 策略。
- en: 'The configuration is the definition/output of what OPA Gatekeeper is allowed
    to create policies for. In the following `config.yaml` file, because of the way
    that it’s written, Gatekeeper knows that it can only specify policies for Pods
    and no other Kubernetes resources. Run the following code:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 配置是 OPA Gatekeeper 被允许创建策略的定义/输出。在下面的 `config.yaml` 文件中，由于其编写方式，Gatekeeper 知道它只能为
    Pods 指定策略，而不能为其他 Kubernetes 资源指定策略。运行以下代码：
- en: '[PRE59]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: A constraint template is a policy that you configure for an environment. It’s
    a template, so you can use it across multiple places.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 约束模板是你为环境配置的策略。它是一个模板，因此你可以在多个地方使用它。
- en: 'The Rego code/policy in the following constraint template ensures no one can
    utilize the latest tag of a container image. Run the following code:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 以下约束模板中的 Rego 代码/策略确保没有人能使用容器镜像的最新标签。运行以下代码：
- en: '[PRE60]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Next, you have the constraint. The constraint takes the template that you created
    earlier and allows you to use the template to create a policy inside of a Kubernetes
    cluster:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要创建约束。约束使用你之前创建的模板，允许你在 Kubernetes 集群内使用该模板创建策略：
- en: '[PRE61]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The OPA policy is now created.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: OPA 策略现在已经创建。
- en: 'To confirm that the policy is working as expected, you can test it out with
    the two following Kubernetes manifests:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认策略是否按预期工作，你可以使用以下两个 Kubernetes 清单来测试：
- en: The following manifest with the container image’s latest tag shouldn’t work
    because of the policy that you created earlier. The deployment itself will deploy,
    but the Pods won’t be scheduled and won’t come online.
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下带有容器镜像最新标签的清单不应该工作，因为你之前创建的策略。部署本身会部署，但 Pods 不会被调度，也不会上线。
- en: 'Try running the following code:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试运行以下代码：
- en: '[PRE62]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Wait a few minutes and when you see that it doesn’t come online, delete it,
    as follows:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 等待几分钟，当你看到它没有上线时，删除它，方法如下：
- en: '[PRE63]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Next, try the following manifest. It will work, and the Pods will come online
    because the container image version is specified:'
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，尝试以下清单。它会成功，Pods 会上线，因为指定了容器镜像版本：
- en: '[PRE64]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: OPA is a huge topic in itself. I highly recommend diving into it more. We only
    had a few pages together in this book to dive into it, but it goes far more in-depth.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: OPA 本身是一个庞大的话题。我强烈建议深入了解它。我们在本书中只有几页的篇幅来探讨它，但它的内容远比这深入。
- en: Scanning container images
  id: totrans-424
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扫描容器镜像
- en: One popular security-style *entry point* for many engineers to start their security
    journey is by scanning container images. Scanning a container image means that
    you’re using a tool/platform to look inside the container image and see if there
    are any vulnerabilities. The vulnerability list typically comes from the NVD and
    the CIS benchmarks for Kubernetes. Both are a curated list of best practices from
    a security perspective and also contain known vulnerabilities.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 许多工程师开始他们安全之旅的一个流行安全类型的*切入点*是通过扫描容器镜像。扫描容器镜像意味着你使用工具或平台查看容器镜像内部，看看是否存在任何漏洞。漏洞列表通常来自
    NVD 和 Kubernetes 的 CIS 基准。两者都是从安全角度整理出的最佳实践清单，并且包含已知的漏洞。
- en: 'There are a lot of tools in this space. In this section, let’s stick to one
    that’s as *built in* as possible: Snyk.'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个领域有很多工具。在这一节中，我们将坚持使用一个尽可能*内建的*工具：Snyk。
- en: Snyk is used to scan containers for vulnerabilities from a list that’s pre-defined
    (as stated earlier) of best practices. A while back, Docker and Snyk partnered
    to ensure that security is embedded natively into any containerized workload.
    With that partnership, when you run the `docker scan` command, it’s actually using
    Snyk on the backend.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: Snyk 用于从预定义的最佳实践列表（如前所述）扫描容器中的漏洞。此前，Docker 和 Snyk 合作，确保安全功能本地集成到任何容器化工作负载中。通过这种合作，当你运行
    `docker scan` 命令时，实际上是在后台使用 Snyk。
- en: 'To use Snyk, ensure that you have the Docker CLI installed and run the following
    command:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Snyk，确保你已安装 Docker CLI 并运行以下命令：
- en: '[PRE85]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'For example, let’s say you want to scan the `ubuntu:latest` container image,
    as shown here:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你想扫描 `ubuntu:latest` 容器镜像，如下所示：
- en: '[PRE86]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Once you run the `docker scan` command, you can scroll through all of the vulnerabilities.
    You’ll see a summary of the vulnerabilities that were found, what was tested,
    and which platform was used.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你运行 `docker scan` 命令，你可以浏览所有漏洞。你将看到发现的漏洞的摘要，测试了什么内容，以及使用了哪个平台。
- en: Vulnerabilities can range from being super basic, in that it just ends up being
    a best practice to fix, or something that’s incredibly crucial and leaves your
    environment open for attack.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞的严重程度从非常基础，最终只是一个需要修复的最佳实践，到非常关键，可能会使你的环境暴露于攻击之中。
- en: Kubernetes Secrets
  id: totrans-434
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes Secrets
- en: Wrapping up this chapter, and the overall book, you’ll learn about Kubernetes
    Secrets.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 本章及整本书的总结，你将学习 Kubernetes Secrets。
- en: Secrets, in short, are anything that you don’t want to be in plain text. Typically,
    they are things such as passwords and API keys. However, they could even be usernames.
    Any type of data that you don’t want to be in plain text, at rest, or in transit
    can be considered a Secret.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Secrets 是任何你不希望以明文形式存在的内容。通常，它们是像密码和 API 密钥这样的东西。然而，它们也可以是用户名。任何你不希望以明文形式存在、静态存储或传输的数据都可以被视为
    Secret。
- en: At this point in your engineering journey, it’s assumed that you don’t need
    to be taught about Secrets, so we’re going to skip that part and dive right into
    the hands-on part.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的工程旅程中，此时假设你不需要学习关于 Secrets 的内容，因此我们将跳过这部分，直接进入实践操作。
- en: Creating Kubernetes Secrets
  id: totrans-438
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Kubernetes Secrets
- en: To create a Kubernetes Secret, you’ll use the `secret` resource from the `v1`
    core API group.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 Kubernetes Secret，你将使用 `v1` 核心 API 组中的 `secret` 资源。
- en: 'For example, the following is a Secret called `testsecret` with a username
    and password:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是一个名为 `testsecret` 的 Secret，包含用户名和密码：
- en: '[PRE87]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Confirm that the Secret was created by running the following command:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令确认 Secret 是否已创建：
- en: '[PRE88]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Next, use the `secret` by putting it inside a Pod, like so:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过将 `secret` 放入 Pod 中来使用它，如下所示：
- en: '[PRE89]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Don’t use Kubernetes Secrets
  id: totrans-446
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不要使用 Kubernetes Secrets
- en: Although you literally just created a new Kubernetes Secrets a few seconds ago,
    here’s the thing—it’s not a recommended practice.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你刚刚在几秒钟前创建了一个新的 Kubernetes Secrets，但事实是——这并不是一个推荐的做法。
- en: The biggest reason is that the default opaque standard for Kubernetes Secrets
    stores secrets in plain text. Yes—that’s right. The secrets will be stored in
    plain text in the `etcd` database. Thinking about it from another perspective,
    think about Kubernetes Manifests. Even if the secret wasn’t in plain text in Etcd,
    it would still be in plain text in the Kubernetes Manifest that’s creating the
    secret, and if it’s in plain text, where would you store it? You can’t push the
    manifest up to GitHub because then your secret would be compromised. Because of
    this, many engineers—and, quite frankly, even the Kubernetes documentation—highly
    recommend using a third-party secret provider. The most popular at this time for
    Kubernetes is HashiCorp Vault.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 最大的原因是 Kubernetes Secrets 的默认不透明标准会以明文形式存储机密信息。没错——就是这样。机密信息将以明文形式存储在 `etcd`
    数据库中。从另一个角度来看，考虑一下 Kubernetes Manifests。即使机密信息在 Etcd 中不是明文存储，它仍然会以明文形式出现在创建机密信息的
    Kubernetes Manifest 中，如果它是明文的，你会把它存在哪里？你不能把 Manifest 推送到 GitHub 上，因为那样你的机密信息就会泄露。因此，许多工程师——坦率地说，甚至
    Kubernetes 的官方文档——都强烈推荐使用第三方密钥提供者。目前，Kubernetes 最受欢迎的密钥提供者是 HashiCorp Vault。
- en: Summary
  id: totrans-449
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: As you went through this chapter, there may have been some thoughts in your
    head of pure confusion. That’s okay—we’re all trying to *get it* when it comes
    to security in general, especially in Kubernetes.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本章时，你的脑海中可能会有一些纯粹的困惑。这没关系——我们在面对安全性问题时，尤其是在 Kubernetes 中，大家都会试图去*理解*。
- en: Kubernetes security is an advanced topic, which is why the goal was to leave
    this topic for the last chapter of the book. Without Kubernetes security, environments
    will continue to be targets for attackers. However, before understanding Kubernetes
    security, you must fully understand how to utilize Kubernetes in production. The
    goal of *Chapters 1-7* was to help with understanding Kubernetes in production.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 安全性是一个高级主题，这也是为什么我们将其放在本书的最后一章来讨论的原因。没有 Kubernetes 安全性，环境将继续成为攻击者的目标。然而，在理解
    Kubernetes 安全性之前，你必须充分理解如何在生产中使用 Kubernetes。《第 1 至第 7 章》的目标是帮助你理解 Kubernetes 在生产中的应用。
- en: The next goal, once you close this book, is to take what you’ve learned in this
    chapter along with the various methodologies highlighted and implement them in
    your production environment for optimal results.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步目标，一旦你读完本书，就是将你在本章学到的内容以及书中提到的各种方法论，在生产环境中应用，以获得最佳效果。
- en: Further reading
  id: totrans-453
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Learn Kubernetes Security* by *Kaizhe Huang* and *Pranjal* *Jumde*: [https://www.packtpub.com/product/learn-kubernetes-security/9781839216503](https://www.packtpub.com/product/learn-kubernetes-security/9781839216503)'
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习 Kubernetes 安全性*，作者 *Kaizhe Huang* 和 *Pranjal* *Jumde*：[https://www.packtpub.com/product/learn-kubernetes-security/9781839216503](https://www.packtpub.com/product/learn-kubernetes-security/9781839216503)'
