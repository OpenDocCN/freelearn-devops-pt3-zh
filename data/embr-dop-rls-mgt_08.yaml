- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: How CI/CD Pipelines Enforce Good DevOps Release Management
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI/CD 流水线如何执行良好的 DevOps 发布管理
- en: So far, you’ve learned that CI/CD is a key aspect of DevOps. Reusable, purpose-built
    CI/CD platforms maximize the value of each developer’s time. CI/CD improves an
    organization’s productivity by increasing efficiency and streamlining workflows
    by becoming a confluence of automation, testing, and collaboration. Additional
    DevOps enhancements, such as shifting left and creating tighter feedback loops,
    help enterprises dissolve silos, scale efficiently, and realize business value
    quicker than other release management methods.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经了解到 CI/CD 是 DevOps 的一个关键方面。可重用的、专为目的而建的 CI/CD 平台通过提高效率、简化工作流程来最大化每个开发者的时间价值。CI/CD
    通过成为自动化、测试和协作的汇聚点，提高了组织的生产力。额外的 DevOps 增强功能，如左移和创建更紧密的反馈循环，帮助企业消除隔阂、有效扩展，并比其他发布管理方法更快地实现业务价值。
- en: Today’s release managers must be fluent in CI/CD procedures, DevOps, and automated
    deployment technologies. They need to be able to recognize problems at an early
    stage and have an understanding of how the CI/CD pipeline operates, which is essential
    to DevOps release management. In this chapter, we’ll discuss how CI/CD pipelines
    enforce good DevOps release management. The topics we’ll cover include managing
    speed-to-market and CI/CD governance, developing your team’s branching strategy,
    constructing release pipelines, implementing a change approval process that is
    appropriate for DevOps release management, and more!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如今的发布管理人员必须精通 CI/CD 程序、DevOps 和自动化部署技术。他们需要能够在早期识别问题，并理解 CI/CD 流水线的运作方式，这对于
    DevOps 发布管理至关重要。在本章中，我们将讨论 CI/CD 流水线如何执行良好的 DevOps 发布管理。我们将涵盖的主题包括管理市场速度和 CI/CD
    治理，开发团队的分支策略，构建发布流水线，实施适合 DevOps 发布管理的变更批准流程等等！
- en: 'In this chapter, you will learn about the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解以下主题：
- en: Understanding CI/CD governance
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 CI/CD 治理
- en: Branching strategies
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分支策略
- en: Release pipelines
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布流水线
- en: Change management
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更管理
- en: Understanding CI/CD governance
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 CI/CD 治理
- en: Implementing governance in DevOps release management requires establishing an
    assortment of procedures aimed at creating oversight mechanisms within CI/CD infrastructure.
    This paradigm frequently incorporates a blend of access control management, compliance
    policies, automated testing, and manual review checkpoints. The principal focus
    of DevOps governance necessitates advancing the objectives of operational security
    and establishing a comprehensive framework for monitoring, approving, and documenting
    all modifications to ensure traceability.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 发布管理中实施治理需要建立一系列旨在在 CI/CD 基础设施内创建监督机制的程序。这种范例通常包括访问控制管理、合规政策、自动化测试和手动审查检查点的混合。DevOps
    治理的主要焦点是推进运行安全目标，并建立全面的框架，监控、批准和记录所有修改，以确保可追溯性。
- en: To be comfortable with **CI/CD governance**, you must have a comprehensive understanding
    of how CI/CD pipelines function. As you learned in the previous chapter, CI/CD
    pipelines encompass a sequence of automated workflows, systems, and methods that
    are specifically devised to facilitate the swift and dependable delivery of new
    code, starting from a developer’s workstation to the production environment. This
    makes it simpler for developers to receive and act on input from end users. It
    is unambiguous that many risks that are typically associated with software delivery
    can be avoided when utilizing well-architected CI/CD pipeline infrastructure.
    Notably, CI/CD incentivizes development teams to commit software updates in lighter,
    tinier batches, compared to working on them all at once in one magnanimous effort.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要熟悉**CI/CD 治理**，您必须全面了解 CI/CD 流水线的运行方式。正如您在前一章学到的那样，CI/CD 流水线涵盖了一系列自动化工作流、系统和方法，专门设计用于从开发者工作站开始，将新代码快速、可靠地交付到生产环境。这使开发人员更容易接收并响应来自最终用户的输入。显然，利用设计良好的
    CI/CD 流水线基础设施，可以避免许多通常与软件交付相关的风险。值得注意的是，与一次性进行大规模努力相比，CI/CD 鼓励开发团队以更小、更轻的批次提交软件更新。
- en: Hence, the rapid pace of development that is associated with DevOps release
    management may give rise to difficulties in effectively managing governance and
    mitigating security risks. As just one example, the use of open source software
    in production processes is a frequent source of concern for development teams.
    You won’t be able to predict if and when a vulnerability will affect a critical
    dependency in the source code without proper audits, analysis, and automated tests.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，与DevOps发布管理相关的快速开发节奏可能会导致在有效管理治理和降低安全风险方面的困难。仅以一个例子来说，在生产过程中使用开源软件是开发团队常见的关注点。如果没有适当的审计、分析和自动化测试，你将无法预测何时及是否会有漏洞影响到源代码中的关键依赖项。
- en: The OWASP Top 10 CI/CD Security Risks
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OWASP Top 10 CI/CD安全风险
- en: CI/CD has emerged as a crucial element of contemporary software engineering
    practices. Unfortunately, the utilization of CI/CD also presents certain security
    vulnerabilities that necessitate careful consideration. In this section, we’ll
    introduce *The OWASP Top 10 CI/CD Security Risks* ([https://owasp.org/www-project-top-10-ci-cd-security-risks/](https://owasp.org/www-project-top-10-ci-cd-security-risks/)),
    a comprehensive study of the most prevalent security risks that threaten the CI/CD
    pipeline infrastructure in any organization.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD已成为现代软件工程实践的关键组成部分。不幸的是，CI/CD的使用也带来了一些安全漏洞，这些漏洞需要谨慎考虑。在本节中，我们将介绍*OWASP
    Top 10 CI/CD安全风险*（[https://owasp.org/www-project-top-10-ci-cd-security-risks/](https://owasp.org/www-project-top-10-ci-cd-security-risks/)），这是对威胁任何组织CI/CD管道基础设施的最常见安全风险的全面研究。
- en: The **Open Web Application Security Project** (**OWASP**) is a globally recognized
    non-profit organization that focuses on enhancing web application security. One
    of the fundamental principles upheld by OWASP is provisioning freely accessible
    and readily available resources on their official website. The assortment of resources
    provided encompasses various forms of support, such as written documentation,
    specialized tools, instructional videos, and interactive forums.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**开放Web应用安全项目**（**OWASP**）是一个全球公认的非营利组织，致力于提升Web应用的安全性。OWASP坚持的一个基本原则是，提供自由可获取且易于访问的资源，所有这些资源都可以通过其官方网站获得。提供的资源种类繁多，包括书面文档、专业工具、教学视频和互动论坛等。'
- en: 'The OWASP Top 10 CI/CD Security Risks are as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP Top 10 CI/CD安全风险如下：
- en: Insufficient Flow Control Mechanisms (CICD-SEC-1)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流程控制机制不足（CICD-SEC-1）
- en: Inadequate Identity and Access Management (CICD-SEC-2)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份和访问管理不足（CICD-SEC-2）
- en: Dependency Chain Abuse (CICD-SEC-3)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖链滥用（CICD-SEC-3）
- en: Poisoned Pipeline Execution (CICD-SEC-4)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被污染的管道执行（CICD-SEC-4）
- en: Insufficient Pipeline-Based Access Controls (CICD-SEC-5)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于管道的访问控制不足（CICD-SEC-5）
- en: Insufficient Credential Hygiene (CICD-SEC-6)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 凭证管理不足（CICD-SEC-6）
- en: Insecure System Configuration (CICD-SEC-7)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不安全的系统配置（CICD-SEC-7）
- en: Ungoverned Usage of 3rd Party Services (CICD-SEC-8)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三方服务的无监管使用（CICD-SEC-8）
- en: Improper Artifact Integrity Validation (CICD-SEC-9)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不当的构件完整性验证（CICD-SEC-9）
- en: Insufficient Logging and Visibility (CICD-SEC-10)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志记录和可视化不足（CICD-SEC-10）
- en: You can find this list at *OWASP Top 10 CI/CD Security Risks* | *OWASP Foundation.
    (**n.d.)* ([https://owasp.org/www-project-top-10-ci-cd-security-risks/](https://owasp.org/www-project-top-10-ci-cd-security-risks/)).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在*OWASP Top 10 CI/CD Security Risks* | *OWASP Foundation. (**n.d.)*（[https://owasp.org/www-project-top-10-ci-cd-security-risks/](https://owasp.org/www-project-top-10-ci-cd-security-risks/)）找到这个列表。
- en: The details of The OWASP Top 10 CI/CD Security Risks are too extensive to include
    in this chapter. Instead, please reference the [*Appendix*](B21803_Appendix.xhtml#_idTextAnchor223)
    at the back of this book for a detailed examination of these top 10 security risks
    and how you can implement safeguards that protect against them. By familiarizing
    yourself with these risks and implementing the suggested countermeasures, you
    will be emboldened to enhance the security of the CI/CD pipeline infrastructure
    in your organization.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 《OWASP Top 10 CI/CD安全风险》的详细内容过于广泛，无法在本章中完全涵盖。请参考本书后面的[*附录*](B21803_Appendix.xhtml#_idTextAnchor223)，了解这些十大安全风险的详细分析，并学习如何实施保护措施防范这些风险。通过熟悉这些风险并实施建议的对策，你将更有信心提升你所在组织的CI/CD管道基础设施的安全性。
- en: Speed-to-market versus governance
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 市场速度与治理之间的权衡
- en: CI/CD makes rapid development and release cycles possible, but comprehensive
    security checks, manual reviews, and approval procedures can drastically slow
    things down. In an ideal world, security checks and compliance evaluations should
    be incorporated into the software delivery life cycle in a way that is both purposeful
    and unobtrusive. The task of reconciling CI/CD governance with efficiency can
    present avoidable difficulties as an excessively lenient approach to governance
    may result in compromised code quality and heightened security risks, while an
    excessively stringent approach can impede the deployment process and stifle innovation.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD使得快速开发和发布周期成为可能，但全面的安全检查、手动审查和批准程序可能会极大地拖慢进度。在理想的情况下，安全检查和合规性评估应该以既有目的又不显突兀的方式融入软件交付生命周期中。调和CI/CD治理与效率之间的任务可能会带来一些不必要的困难，因为过于宽松的治理方式可能会导致代码质量下降和安全风险增加，而过于严格的治理则可能阻碍部署过程并抑制创新。
- en: To optimize productivity and safeguard against potential risks, it is invaluable
    that you establish clearly stated policies and procedures, and diligently enforce
    their adherence. Effective software development strategies should incorporate
    protocols that ensure excellent code quality and minimize security vulnerabilities.
    Some of these practices may include code reviews, automated testing, and push-button
    deployment approvals. By implementing these measures, you can establish quality
    gates to assess code changes and prevent the introduction of unauthorized code,
    which is a major security risk. Regularly reviewing and updating governance standards
    is vital to ensure that the team continues to stay aligned with the goals of the
    organization.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了优化生产力并防范潜在风险，制定明确的政策和程序，并严格执行其遵守，具有不可估量的价值。有效的软件开发策略应当包含确保优秀代码质量和最小化安全漏洞的协议。其中一些实践可能包括代码审查、自动化测试和一键部署批准。通过实施这些措施，你可以建立质量门槛来评估代码变更，并防止未经授权的代码引入，这是一项主要的安全风险。定期审查和更新治理标准对于确保团队始终与组织目标保持一致至关重要。
- en: Three common paths to CI/CD governance
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 三种常见的CI/CD治理路径
- en: 'Three prominent governance models are employed by experienced DevOps teams
    to manage their application deployments and CI infrastructure. These models exhibit
    variations in the aspects that they govern, namely the infrastructure code, deployment
    toolchain, and supplied cloud resources:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 经验丰富的DevOps团队采用三种显著的治理模型来管理其应用程序部署和CI基础设施。这些模型在它们治理的方面上有所不同，具体包括基础设施代码、部署工具链和提供的云资源：
- en: '**The central pattern library governance model** is a valuable resource that
    provides a curated collection of deployment templates. These templates are designed
    to be reused by application teams during their deployment processes. By utilizing
    the central pattern library, teams can benefit from pre-developed templates that
    have been carefully selected and organized for easy access and implementation.
    This allows for greater efficiency and consistency in the deployment of applications.
    Another way to think about this governance model is that it decentralizes the
    authority to make decisions by giving that authority back to the independent development
    teams, unified around a pre-approved set of processes.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中央模式库治理模型**是一个有价值的资源，提供了一个经过精心策划的部署模板集合。这些模板旨在供应用团队在部署过程中重用。通过使用中央模式库，团队可以受益于经过精心选择和组织的预开发模板，便于访问和实施。这使得应用程序的部署更加高效和一致。另一种理解该治理模型的方式是，它通过将决策权归还给独立的开发团队，从而去中心化了决策权，这些团队围绕一个经过预批准的流程集统一行动。'
- en: '**The CI/CD-as-a-Service governance model** is a software development practice
    that provides a standardized toolchain for application teams to consume. This
    service allows for the seamless integration and delivery of code changes, ensuring
    a smooth and efficient development process. By offering a reusable toolchain,
    CI/CD-as-a-Service enables application teams to streamline their workflows and
    enhance collaboration within the development environment. Another term that is
    appropriate to describe this governance model is *service catalog*.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CI/CD即服务治理模型**是一种软件开发实践，提供了一个标准化的工具链供应用团队使用。此服务使代码变更的无缝集成和交付成为可能，确保开发过程的顺利和高效。通过提供可重用的工具链，CI/CD即服务使应用团队能够简化工作流程并增强开发环境中的协作。另一个适合描述该治理模型的术语是*服务目录*。'
- en: '**The centrally managed infrastructure governance model** refers to a system
    where application teams can deploy cloud resources that are managed by central
    operations teams. This arrangement enables a streamlined approach to resource
    deployment and management as the responsibility for overseeing and maintaining
    these resources is centralized. By implementing this approach, organizations can
    ensure efficient utilization of cloud resources while maintaining a cohesive and
    standardized infrastructure across various application teams. Another term that
    is appropriate to associate with this governance model is *DevOps center* *of
    excellence*.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中管理的基础设施治理模型**指的是一种系统，在该系统中，应用团队可以部署由中央运维团队管理的云资源。这种安排使得资源部署和管理的过程更加简化，因为监督和维护这些资源的责任是集中的。通过实施这种方法，组织可以确保高效利用云资源，同时在各个应用团队之间保持一致且标准化的基础设施。另一个适合与这一治理模型相关联的术语是*DevOps卓越中心*。'
- en: Common CI/CD governance obstacles
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见的CI/CD治理障碍
- en: When it comes to CI/CD governance, it can be challenging to find the right blend
    between speed, stability, and reliability. These are just a few of the common
    issues that you might face. Another challenge is the ability of teams to manage
    CI/CD processes and systems on larger scales. The reason for this is that enterprise
    firms have large numbers of employees, complex organizational structures, and
    extensive code bases. These factors result in specific needs and requirements
    that are unique to these types of companies.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在CI/CD治理方面，找到速度、稳定性和可靠性之间的正确平衡可能是一个挑战。这些只是你可能会遇到的一些常见问题。另一个挑战是团队在更大规模上管理CI/CD流程和系统的能力。其原因在于企业公司拥有大量员工、复杂的组织结构和庞大的代码库。这些因素导致了特定的需求和要求，这些需求和要求在这些类型的公司中是独特的。
- en: The ideal governance architecture optimizes the alignment of infrastructure
    capabilities with business requirements while also providing the highest possible
    value to the final customer. IT organizations can utilize the governance model
    as an efficient tool to implement enterprise standards, introduce new technologies,
    and enforce default regulatory requirements. Notably, it is the responsibility
    of the enterprise architect to ensure that the governance model is aligned with
    the business architecture.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 理想的治理架构优化了基础设施能力与业务需求的对齐，同时为最终客户提供尽可能高的价值。IT组织可以利用治理模型作为实施企业标准、引入新技术和执行默认监管要求的有效工具。值得注意的是，确保治理模型与业务架构对齐是企业架构师的责任。
- en: The best practices for creating a governance model include scalability and repeatability.
    When a governance model is built for an organization, the process could be taken
    and repeated for multiple products and services. Items presided over by a governance
    model must be quantifiable if they are to be scrutinized for compliance, monitored
    for availability, and optimized for performance. A governance model should also
    encompass all the possible combinations of infrastructure capabilities, as well
    as different deployment requirements. As a result, the goal of creating a cloud
    governance model is scalability, meaning that the governance model can grow or
    shrink in response to demand in the market or among the targeted audience. It
    should facilitate transparent integration of horizontal and vertical scaling of
    the services offered. A governance model should also be adaptable and take into
    account the ever-evolving needs of end users and the effects on the IT infrastructure.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 创建治理模型的最佳实践包括可扩展性和可重复性。当一个治理模型为一个组织建立时，这个过程可以被复制并应用到多个产品和服务上。治理模型所管理的项目必须是可量化的，以便能够进行合规性检查、可用性监控和性能优化。治理模型还应涵盖所有可能的基础设施能力组合，以及不同的部署要求。因此，创建云治理模型的目标是可扩展性，意味着治理模型可以根据市场需求或目标受众的需求进行扩展或缩小。它应该促进服务的水平和垂直扩展的透明集成。治理模型还应具有适应性，考虑到最终用户不断变化的需求以及对IT基础设施的影响。
- en: It is essential to keep in mind that creating an optimized cloud governance
    model is impossible unless both the business perspective and the IT perspective
    are considered simultaneously. While developing a CI/CD governance architecture,
    organizations typically face at least one of these four common challenges. These,
    in turn, reflect a wide range of distinct considerations.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 必须牢记，除非同时考虑商业视角和 IT 视角，否则创建优化的云治理模型是不可能的。在开发 CI/CD 治理架构时，组织通常会面临以下四个常见挑战中的至少一个。这些挑战反映了各种不同的考虑因素。
- en: The proliferation of tooling
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工具的泛滥
- en: 'The implementation of CI/CD governance models is frequently hindered by the
    complicated architecture of an organization’s technology stack. In the majority
    of settings, development teams tend to utilize a diverse range of programming
    languages, frameworks, productivity tools, and structural systems. However, this
    proliferation of tools poses a challenge in terms of implementing uniform governance
    practices and processes:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 治理模型的实施常常受到组织技术架构复杂性的阻碍。在大多数情况下，开发团队倾向于使用各种不同的编程语言、框架、生产力工具和结构系统。然而，工具的泛滥给实施统一的治理实践和流程带来了挑战：
- en: '![Figure 8.1: An infographic showing the enormous selection of CI/CD tools
    available](img/B21803_08_1.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1：展示可用的庞大 CI/CD 工具选择的图示](img/B21803_08_1.jpg)'
- en: 'Figure 8.1: An infographic showing the enormous selection of CI/CD tools available'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1：展示可用的庞大 CI/CD 工具选择的图示
- en: This predicament often leads to a state of tooling paralysis, wherein software
    engineers express dissatisfaction with the existing technological infrastructure
    while also harboring concerns about the investment of time, effort, and potential
    challenges associated with transitioning to alternative solutions. Product owners
    will end up expressing dissatisfaction with inflated estimates and might end up
    questioning the rationale behind needing multiple sprints to develop a particular
    feature.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这种困境常常导致工具瘫痪的状态，软件工程师在不满现有技术基础设施的同时，还担心转向其他解决方案可能带来的时间、精力投入以及潜在挑战。产品负责人最终可能会对高估的时间预估表示不满，并质疑为何需要多个冲刺来开发某个特定功能的合理性。
- en: User access control and authorization
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户访问控制和授权
- en: Access and authorization management is a major obstacle for many businesses.
    It is crucial to have the appropriate set of tools that can automate much of that
    process so that the correct individuals have access to the appropriate information
    when it’s needed. There are tools to help govern and manage user access control,
    but not all of them provide the fine-grained authorization management features
    that are necessary.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 访问和授权管理是许多企业面临的主要障碍。必须拥有一套合适的工具来自动化这一过程，以便确保正确的人员在需要时能够访问相关信息。有一些工具可以帮助治理和管理用户访问控制，但并非所有工具都能提供必需的细粒度授权管理功能。
- en: Automation has eliminated the need for many manual security analysis inspections.
    Now, pipeline integrity is used to streamline the requirements for the separation
    of duties. There needs to be a distinct separation between the teams maintaining
    the pipeline infrastructure and the teams making use of it. You can set the source
    control tool up so that only the engineers working on the CI/CD pipeline infrastructure
    can make changes to the infrastructure components and/or configurations and patterns,
    effectively separating the responsibilities of each group. Exceptions should be
    infrequent, authorized, recorded, and closely supervised during their occurrence.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化已消除了许多手动安全分析检查的需求。现在，管道完整性用于简化职责分离的要求。需要明确区分维护管道基础设施的团队和使用该基础设施的团队。你可以设置源代码控制工具，使得只有负责
    CI/CD 管道基础设施的工程师才能对基础设施组件和/或配置和模式进行更改，从而有效地分离每个小组的责任。例外情况应尽量少见，且必须获得授权、记录并在发生时进行严格监督。
- en: Systems access management
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 系统访问管理
- en: A typical challenge for many companies is ensuring the safety of network connections
    between the various systems used in CI/CD workflows. The usage of personal access
    tokens as an alternative to passwords and ephemeral, single-use tokens are two
    of the most important tactics for ensuring security. There’s also supplementary
    software and services that are capable of rotating secrets and refreshing credentials
    programmatically.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对许多公司来说，确保 CI/CD 工作流中使用的各个系统之间网络连接的安全性是一个典型挑战。使用个人访问令牌作为密码的替代方案和一次性的临时令牌是确保安全性的两个重要策略。还有补充软件和服务，能够程序化地轮换秘密和刷新凭证。
- en: Attackers take advantage of poor credential management practices by finding
    exposed credentials and using them to gain unauthorized access to systems. Once
    the extraction is complete, the attacker proceeds to verify the validity of the
    credential. This is typically done from a breached or disposable machine to evade
    detection. Once the attacker has obtained the necessary credentials, they can
    gain unauthorized access to the computer system or service. The attacker’s ability
    to access sensitive information, issue commands, or carry out other malicious
    acts is dependent on the permissions and authorization levels affiliated with
    the compromised credentials.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者利用糟糕的凭证管理实践，找到暴露的凭证并使用它们来未经授权地访问系统。一旦提取完成，攻击者会继续验证凭证的有效性。通常这是从被入侵或一次性机器进行，以避免检测。一旦攻击者获得必要的凭证，他们就可以未经授权地访问计算机系统或服务。攻击者访问敏感信息、发出命令或执行其他恶意行为的能力取决于与被损害凭证相关联的权限和授权级别。
- en: Traceability
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可追溯性
- en: Traceability and auditability tend to be mandatory in heavily regulated industries.
    However, traceability is essential irrespective of your regulatory standing. The
    objective is to be able to identify whether or not the features you expect to
    see in the final product are, in fact, present in the software. In the event of
    a security breach, this is critically important.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 可追溯性和审计性在受严格监管的行业通常是强制性的。然而，无论您的监管地位如何，追溯性都是必不可少的。其目的是能够确定预期在最终产品中看到的特性是否确实存在于软件中。在安全漏洞事件中，这一点至关重要。
- en: To achieve the ideal pipeline, the CI/CD ecosystem and its various components
    must work seamlessly without any interruptions of any kind. It is also important
    to have a comprehensive record of all elements (such as code, scripts, tests,
    and development and testing criteria) in existence. Each element’s purpose, creator,
    dependencies, and affiliations must be documented and regularly updated. You must
    ensure that this record is stored and managed under source control.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现理想的流水线，CI/CD 生态系统及其各个组成部分必须无缝地工作，不得有任何中断。同时，有必要全面记录所有元素（如代码、脚本、测试以及开发和测试标准）的存在情况。必须记录和定期更新每个元素的目的、创建者、依赖关系和关联性。您必须确保此记录存储和管理在源代码控制下。
- en: Creating an enterprise CI/CD governance model
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建企业级 CI/CD 治理模型
- en: There isn’t a single standard format for CI/CD governance. This is because each
    model is tailored to meet the specific requirements of the company or organization
    that it supports in terms of requirements, legislation, compliance standards,
    and industry norms. However, there are approaches that large enterprises can implement
    to create and sustain a powerful end-to-end CI/CD governance strategy. When formulating
    or conducting an audit of your CI/CD governance standards, think about the techniques
    highlighted in this section.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 治理没有单一的标准格式。这是因为每种模型都是根据支持的公司或组织的具体要求、法规、合规标准和行业规范进行定制的。然而，大型企业可以实施一些方法来创建和维持强大的端到端
    CI/CD 治理战略。在制定或执行您的 CI/CD 治理标准审计时，考虑本节中突出的技术。
- en: Map CI/CD systems and processes
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 映射 CI/CD 系统和流程
- en: 'The practice of creating visual representations of your CI/CD processes and
    systems offers a comprehensive understanding of your complete CI/CD pipeline.
    This helps with identifying the specific stages where your security is most vulnerable
    to threats. Additionally, this has the potential to unveil additional options
    that improve your procedures, infrastructure, and security posture. An effective
    method to accomplish this task is by generating what’s known as a *value stream
    map*. Value stream mapping should include the CI/CD processes, infrastructure,
    and tooling so that you can fully understand the points of transition and establish
    connections between the business’s controls, compliance requirements, and industry
    regulations. Doing so enables you to optimize current procedures, establish a
    governance model, and prepare your company to undergo audits. Increasing the visibility
    of your process is one of the quickest ways to observe how to improve it:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 CI/CD 流程和系统的可视化表示有助于全面了解完整的 CI/CD 管道。这有助于识别安全最容易受到威胁的具体阶段。此外，这也有可能揭示出额外的选项，以改善你的流程、基础设施和安全态势。完成这项任务的有效方法是生成被称为*价值流图*的内容。价值流映射应包括
    CI/CD 流程、基础设施和工具，以便你能够充分理解转换的关键点，并在业务的控制、合规要求和行业法规之间建立联系。这样做使你能够优化当前的流程，建立治理模型，并为公司准备接受审计。增加流程的可见性是观察如何改进它的最快方法之一：
- en: '![Figure 8.2: A generic example of a value stream map](img/B21803_08_2.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2：一个通用的价值流图示例](img/B21803_08_2.jpg)'
- en: 'Figure 8.2: A generic example of a value stream map'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2：一个通用的价值流图示例
- en: The preceding figure represents a generic example of a value stream map in the
    context of lean manufacturing. Even though value stream mapping is frequently
    associated with the manufacturing industry, it is also utilized in the fields
    of logistics and supply chain management, service-oriented verticles, software
    development, product development, project management, and many others.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图形代表了在精益生产背景下的一个通用价值流图示例。尽管价值流映射通常与制造业相关联，但它也被广泛应用于物流和供应链管理、服务导向行业、软件开发、产品开发、项目管理等多个领域。
- en: The goal of value stream mapping is to discover and eliminate or minimize wasteful
    activity occurring in a business’ processes, which will ultimately increase the
    overall efficiency of that specific value stream. The goal of waste reduction
    is to boost output by streamlining processes and making it simpler to spot instances
    of poor quality or excessive waste within them.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 价值流映射的目标是发现并消除或最小化在业务流程中发生的浪费活动，最终提高特定价值流的整体效率。减少浪费的目标是通过简化流程并使其更容易发现质量差或过度浪费的情况，从而提高产出。
- en: For more information about value stream mapping, please reference the [*Appendix*](B21803_Appendix.xhtml#_idTextAnchor223)
    at the back of this book.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于价值流映射的信息，请参考本书后面的[*附录*](B21803_Appendix.xhtml#_idTextAnchor223)。
- en: Express CI/CD pipelines declaratively
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 声明式地表达 CI/CD 管道
- en: The technique commonly known as *pipeline-as-code* involves defining a CI/CD
    pipeline through the use of code. This process originates by employing a declarative
    technique, which incorporates the use of configuration files and is used most
    effectively with a version control system. One advantage of expressing the CI/CD
    pipeline declaratively *as code* is the ability to incorporate controls, gates,
    and processes, such as governance practices and procedures, and apply them consistently
    across many environments. Furthermore, it facilitates establishing an audit trail
    that enables you to verify compliance with governance standards. Lastly, by expressing
    CI/CD pipelines declaratively *as code*, you will be far better prepared for **disaster
    recovery** (**DR**) scenarios.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通常称为*管道即代码（pipeline-as-code）*的技术涉及通过代码定义 CI/CD 管道。这个过程始于采用声明式技术，其中包含配置文件的使用，并且与版本控制系统一起使用效果最佳。将
    CI/CD 管道声明式地*作为代码*表达的一个优势是能够整合控制、门控和流程，例如治理实践和程序，并在多个环境中一致地应用它们。此外，这还可以帮助建立审计追踪，使你能够验证是否符合治理标准。最后，通过声明式地*作为代码*表达
    CI/CD 管道，你将能够更好地为**灾难恢复**（**DR**）场景做好准备。
- en: Define clear roles and responsibilities
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义明确的角色和职责
- en: Examine the steps of your value stream map from earlier and determine the roles
    and duties of each team and individual that interacts with it. This is the most
    effective method to approach the job of designing a governance model for CI/CD.
    Please note that your developers are responsible for the development of code,
    and it is highly undesirable for them to also be the ones to construct and maintain
    a CI/CD pipeline. This will undoubtedly be helpful when you decide what amount
    of authorization you need to provide each team member who requires access to the
    underlying systems, as well as what protocols you need to adopt to ensure good
    governance of your organization.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 检查你早些时候绘制的价值流图的步骤，确定每个团队和与之交互的个人的角色和职责。这是设计 CI/CD 治理模型的最有效方法。请注意，开发人员负责代码的开发，最好不要让他们同时负责构建和维护
    CI/CD 管道。这将在你决定为每个需要访问底层系统的团队成员提供多少授权，以及你需要采用哪些协议来确保组织治理的良好性时，提供巨大的帮助。
- en: Regularly audit access and authorization controls
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定期审计访问和授权控制
- en: It’s not easy to manage permissions and access, but you must. Using an **identity
    provider** (**IDP**) such as Azure Active Directory, you can establish a single
    authoritative source for managing user identities and permissions. You should
    identify your most valuable resources and make them the primary focus of your
    infrastructure, regardless of the technology stack you employ.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 管理权限和访问并不容易，但你必须这样做。使用**身份提供者**（**IDP**），如 Azure Active Directory，你可以建立一个统一的权威来源来管理用户身份和权限。你应该识别出最有价值的资源，并将它们作为基础设施的重点，无论你使用的是哪种技术栈。
- en: Give teams flexibility
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 给予团队灵活性
- en: No matter how many precautions you take, people will still create their own
    tools, scripts, and automations. Implementing safeguards to avoid this, or making
    it such that people can build up their own tools and instances in a transparent
    and sanctioned fashion, is an important aspect of good CI/CD governance. The most
    effective method for accomplishing this is to provide workers with the freedom
    they require to carry out their duties, as well as to conduct routine process
    reviews to identify areas in which either extra freedom or, on the flip side,
    increased formality is required. Creative liberty is the best way to build a workforce
    that is invested in a company.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你采取多少预防措施，人们仍然会创建自己的工具、脚本和自动化系统。实施保护措施以避免这种情况，或者使人们能够以透明且合规的方式构建自己的工具和实例，是良好的
    CI/CD 治理的重要方面。实现这一点的最有效方法是为员工提供执行其职责所需的自由，并定期进行流程审查，以识别在哪些方面需要额外的自由，或者相反，增加形式化管理。创造性的自由是打造一个真正投入的员工队伍的最佳方式。
- en: Generously invest in your automated testing
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 大力投资自动化测试
- en: An essential element of efficient CI/CD governance models includes incorporating
    suitable testing suites, in particular automated tests that assist teams in *shifting
    left* or prioritizing security and functionality as early as possible in the **software
    development life cycle** (**SDLC**). We strongly advise that, right from the start
    of the SDLC, rapid and cost-effective tests be given top priority. These kinds
    of tests must be finished within a very short amount of time – short enough that
    engineers are not incentivized to switch gears and multitask on another project.
    If the test fails, the development team should be made fully aware of it immediately
    so that the issue can’t be ignored or overlooked by accident. As your SDLC becomes
    more mature, your testing requirements should grow more specific. Traceability
    is another crucial factor to consider regarding automated testing practices. If
    you can identify the failure point, you will be in a much better position to quickly
    diagnose the issue and find a solution.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 高效的 CI/CD 治理模型的一个关键要素是包括合适的测试套件，特别是能够帮助团队进行*左移*的自动化测试，或者尽早优先考虑安全性和功能性，尽早在**软件开发生命周期**（**SDLC**）中进行优先处理。我们强烈建议，从
    SDLC 开始的第一天起，快速且具成本效益的测试应当被优先考虑。这类测试必须在非常短的时间内完成——足够短，以至于工程师不会被激励去切换任务并在其他项目上进行多任务处理。如果测试失败，开发团队应该立即意识到，以确保问题不会被忽视或遗漏。随着
    SDLC 的逐渐成熟，测试要求应该变得更加具体。可追溯性是考虑自动化测试实践时的另一个重要因素。如果你能识别出故障点，你将能更快地诊断问题并找到解决方案。
- en: Standardize code reviews
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标准化代码评审
- en: The implementation of robust CI/CD governance necessitates the creation of a
    system wherein an individual is unable to arbitrarily author code, commence a
    build process, and deploy this code without undergoing extra validation measures.
    This implies that each modification must have approval from a minimum of two individuals.
    It is important to note that obtaining a second person’s approval for all modifications
    is not always necessary. In certain cases, relying on an automated test can offer
    a satisfactory level of assurance to proceed. Regardless of the strategy that’s
    chosen, it is imperative to establish and articulate rules at the organizational
    level to guarantee that teams adhere to a uniform set of practices and processes.
    The objective is to increase the success of developers in identifying and resolving
    code issues, mitigating the introduction of defects, and guaranteeing compliance
    with the core project specifications. As a result, this can enhance the overall
    productivity and efficiency of the development effort, enabling teams to accelerate
    the delivery of outstanding software to their customers.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 实施强有力的CI/CD治理需要创建一个系统，使得个人无法随意编写代码、启动构建过程，并在未经额外验证措施的情况下部署代码。这意味着每个修改必须至少获得两个人的批准。需要注意的是，并非所有修改都必须获得第二个人的批准。在某些情况下，依赖自动化测试可以提供足够的保证以继续进行。不管选择何种策略，必须在组织层面建立并明确规则，以确保团队遵循统一的实践和流程。目标是提高开发人员发现并解决代码问题的成功率，减少缺陷的引入，并确保符合核心项目规范。因此，这可以提高开发工作的整体生产力和效率，帮助团队加速向客户交付卓越的软件。
- en: Set environment rules in deployment strategies
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在部署策略中设置环境规则
- en: A central principle that should be followed is establishing environmental consistency
    and the ability to track progress seamlessly throughout the various stages encompassing
    the build, testing, and delivery layers of your SDLC. You must be mindful of the
    potential consequences when introducing conditionality in one environment while
    neglecting to do so in other environments as this is a bad idea. Maintaining environmental
    consistency will expedite the process of software testing in each environment,
    even if production contains unique conditions that are absent in other environments.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一个需要遵循的核心原则是建立环境一致性，并且能够在涵盖构建、测试和交付层的各个阶段无缝跟踪进展。引入某一环境的条件性而忽略其他环境时，必须考虑潜在的后果，因为这是一个不好的做法。保持环境一致性将加速每个环境中软件测试的过程，即使生产环境包含其他环境中没有的独特条件。
- en: It is advisable to use a configuration file’s declarative syntax to treat environments
    as *input parameters*. When it comes to CI/CD pipelines, this is a winning approach.
    Parameterizing your environment as code helps guarantee that all prerequisites
    are standardized from development to release. Additionally, your CI/CD system
    will be easier to maintain as a result of parameterization, which will prevent
    an excessive number of pipelines from being created.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 建议使用配置文件的声明式语法将环境视为*输入参数*。在CI/CD流水线中，这是一个成功的做法。将环境参数化为代码有助于确保从开发到发布的所有前提条件都是标准化的。此外，参数化还将使你的CI/CD系统更容易维护，从而避免创建过多的流水线。
- en: Protect against unauthorized access to CI/CD pipeline infrastructure
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 防止未经授权访问CI/CD流水线基础设施
- en: To prevent unwanted access to your systems and code, all the systems involved
    in your CI/CD pipeline must be securely integrated.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止未经授权访问你的系统和代码，CI/CD流水线中涉及的所有系统必须安全集成。
- en: In all situations, the principle of least privilege should be applied. Access
    and permissions granted to users, tools, and services should be kept at a bare
    minimum. By doing so, you may be assured that your organization’s most private
    information and systems are safe from prying eyes. Additionally, you must encrypt
    any private information. If it is pragmatic to do so, utilize ephemeral tokens
    that can only be used once and are automatically rotated after each job is completed.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，应应用最小权限原则。授予用户、工具和服务的访问权限应保持在最低限度。通过这样做，你可以确保组织的最隐私信息和系统不受窥探。此外，必须对任何私人信息进行加密。如果可行，使用一次性令牌，它们只能使用一次，并且在每个任务完成后自动轮换。
- en: You should always be doing regular security tests on all of your dependencies
    using a **static application security testing** (**SAST**) tool. These tests should
    cover everything from your CI/CD processes to your code base to your underlying
    systems, such as containers. Some tools can be integrated into a CI/CD pipeline
    to conduct automated scans of your code base for any known security flaws and
    to notify the appropriate teams if any flaws are detected. Some examples include
    *SonarQube*, *Fortify*, *CheckMarx*, and *Veracode*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您应始终使用**静态应用安全测试**（**SAST**）工具对所有依赖项进行定期安全测试。这些测试应覆盖从您的 CI/CD 过程到代码库以及容器等基础系统的所有内容。一些工具可以集成到
    CI/CD 流水线中，对代码库进行自动扫描，检测到任何已知的安全漏洞，并在检测到漏洞时通知相关团队。一些例子包括*SonarQube*、*Fortify*、*CheckMarx*和*Veracode*。
- en: Finally, carry out security inspections regularly. The purpose of these audits
    is to offer recommendations for strengthening your organization’s overall security
    posture, as well as to document any findings, which may include any problems or
    vulnerabilities. By staying on top of your security testing and being organized,
    you will be well-positioned to respond to a security incident at your organization.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，定期进行安全检查。这些审核的目的是提供建议，加强您组织的整体安全姿态，并记录任何发现，可能包括任何问题或漏洞。通过保持安全测试和组织有序，您将能够很好地应对组织中的安全事件。
- en: Monitor CI/CD pipeline performance
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 监控 CI/CD 流水线的性能
- en: Key metrics for evaluating the performance of CI/CD processes typically include
    deployment frequency, lead time for changes, time to restore service, and change
    failure rate. The measurement of these indicators can assist organizations in
    identifying potential bottlenecks or inefficiencies within their broader CI/CD
    workflow. Additionally, they can be utilized to monitor the effects of governance
    policies and procedures on the deployment of new code to customers.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 评估 CI/CD 流程性能的关键指标通常包括部署频率、变更的引导时间、恢复服务时间和变更失败率。测量这些指标可以帮助组织识别其更广泛的 CI/CD 工作流中潜在的瓶颈或低效。此外，它们可以用来监控治理政策和流程对向客户部署新代码的影响。
- en: Utilizing specialized monitoring tools, such as *SigNoz*, *Datadog*, or *New
    Relic*, is one method for keeping tabs on the efficacy of your CI/CD pipelines.
    Although these tools reveal patterns in your pipeline’s overall performance, they
    alone aren’t enough. DORA metrics, as mentioned previously, should be established
    to monitor the efficacy of your pipeline, governance policies, and procedures.
    These metrics give observable signals that, taken together, paint a more complete
    picture of the health of a pipeline and the system as a whole.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用专业监控工具，如*SigNoz*、*Datadog*或*New Relic*，是跟踪您的 CI/CD 流水线效果的一种方法。尽管这些工具揭示了流水线整体性能的模式，但它们单独并不足够。如前所述，应建立
    DORA 指标来监控您的流水线、治理政策和程序的效果。这些指标提供可观察的信号，综合考量可以更全面地展示流水线和整个系统的健康状况。
- en: Review and update CI/CD governance procedures regularly
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 审查和定期更新 CI/CD 治理流程
- en: To establish an effective review board, it is recommended to assemble the board
    with individuals from many functional areas, including development, security,
    operations, and IT teams. Begin by conducting a thorough analysis of the current
    policies and processes to identify any deficiencies or areas that can be improved.
    Then, assemble the review panel to solicit input on the current policies and procedures
    based on their respective areas of expertise. Next, revise the current policies
    and procedures to incorporate the input provided by the review panel. It is recommended
    to thoroughly evaluate the modifications made to guarantee their alignment with
    the specific requirements of your firm. Finally, execute the implementation process
    by effectively communicating the details to the teams that will be affected. It
    is imperative to systematically monitor and evaluate the effectiveness of newly
    implemented policies, while also being prepared to make necessary revisions as
    required.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了建立有效的评审委员会，建议从多个职能领域的人员组成委员会，包括开发、安全、运营和 IT 团队。首先，进行全面分析当前的政策和流程，以识别任何缺陷或可以改进的地方。然后，召集评审小组，基于各自领域的专业知识，征求对现有政策和流程的意见。接下来，修改现有政策和流程，纳入评审小组提供的意见。建议彻底评估所做的修改，以确保它们与公司特定需求的一致性。最后，通过有效地将详细信息传达给受影响的团队来执行实施过程。必须系统地监控和评估新实施政策的效果，同时为必要时进行修订做好准备。
- en: Since the governance of CI/CD and the priorities that are most important to
    your company will shift over time, conducting regular reviews should be one of
    the most important functions your company performs to support its success. Effective
    CI/CD governance guarantees that all of the code that is shipped is of high quality,
    that it is safe, and that it can be traced back to its source.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 CI/CD 的治理以及对公司最重要的优先事项会随着时间的推移发生变化，定期评审应成为公司支持成功的最重要职能之一。有效的 CI/CD 治理保证了所有发布的代码都具有高质量、安全性，并且可以追溯到源头。
- en: 'The purpose of DevOps release management governance is to set policies and
    procedures that will help ensure that your organization’s CI/CD pipeline infrastructure
    is efficient, secure, and consistent with industry standards and regulations.
    At the organizational level, companies frequently have trouble implementing the
    appropriate tooling, processes, and procedures to successfully control their CI/CD
    workflows. This is especially the case when the companies are just getting started
    in the process of developing a governance model. It all boils down to scale: at
    the enterprise level, there are far more people, tools, systems, and users, which
    makes effective governance more difficult.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 发布管理治理的目的是设定政策和程序，确保你们组织的 CI/CD 管道基础设施高效、安全，并符合行业标准和法规。在组织层面，企业通常在实施合适的工具、流程和程序来有效控制
    CI/CD 工作流时遇到困难。尤其是在公司刚开始制定治理模型时，这种情况尤为明显。归根结底，这一切都归结于规模：在企业层面，涉及的人、工具、系统和用户更多，这使得有效的治理更加困难。
- en: However, when teams adhere to established processes and effectively implement
    CI/CD methods, there is a higher level of assurance that all released products
    meet the necessary criteria and quality standards. Additionally, these products
    are equipped with the required tags that enable future traceability if required.
    The importance of the initial investment becomes more significant as a result.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当团队遵循既定流程并有效实施 CI/CD 方法时，就能更有保障地确保所有发布的产品都符合必要的标准和质量要求。此外，这些产品还会附带必要的标签，以便将来在需要时进行追溯。因此，初期投资的重要性也随之增加。
- en: This concludes our discussion about DevOps release management governance. You
    now have familiarity with the *OWASP Top 10 CI/CD Security Risks*, speed-to-market
    versus governance, common paths to CI/CD governance, common CI/CD governance obstacles,
    and creating a governance model.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们关于 DevOps 发布管理治理的讨论总结。现在你已经熟悉了*OWASP Top 10 CI/CD 安全风险*、市场速度与治理的权衡、CI/CD
    治理的常见路径、常见的 CI/CD 治理障碍，以及如何创建治理模型。
- en: 'In the next section, we will be discussing a hotly debated and equally important
    aspect of DevOps release management: branching strategies! Often overlooked, we’ll
    discuss the importance of the four most common software development branching
    strategies and learn when and how to apply them.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将讨论 DevOps 发布管理中的一个备受争议且同样重要的方面：分支策略！这一点经常被忽视，我们将讨论四种最常见的软件开发分支策略的重要性，并学习何时以及如何应用它们。
- en: Understanding branching strategies
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解分支策略
- en: The majority of contemporary version control systems offer support for branches,
    which are autonomous streams of work that originate from a core code base. The
    nomenclature for the *primary* branch in a version control system may vary, with
    possible designations including master, mainline, default, and trunk, depending
    on the specific system in use. Developers can generate branches derived from the
    source, therefore enabling them to function autonomously in conjunction with it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现代版本控制系统大多数都支持分支，分支是从核心代码库衍生出来的独立工作流。版本控制系统中*主分支*的命名可能有所不同，可能有 master、mainline、default
    或 trunk 等称谓，具体取决于所使用的系统。开发人员可以从源代码创建分支，从而使其能够与源代码独立运作。
- en: The practice of branching facilitates seamless collaboration across teams of
    developers within a unified code repository. When a software developer starts
    creating a branch inside a version control system, a duplicate of the code base
    is generated, capturing the state of the code at that specific moment in time.
    Modifications made to the branch do not have an impact on the other developers
    within the team, but this pattern is undoubtedly advantageous. However, it is
    not strictly necessary for branches to exist in isolation. With branching, developers
    can seamlessly integrate changes made by fellow programmers to engage in collaborative
    development efforts that could relate to a variety of features, all while simultaneously
    ensuring that their branches remain closely aligned with the main branch.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 分支的实践促进了开发团队之间在统一代码库内的无缝协作。当软件开发人员开始在版本控制系统内创建一个分支时，会生成代码库的副本，捕捉到代码在特定时刻的状态。对分支所做的修改不会影响团队内其他开发人员，但这种模式无疑具有优势。然而，分支不一定要独立存在。通过分支，开发人员可以无缝地整合其他程序员所做的更改，进行协作开发，涉及多种特性，同时确保他们的分支与主分支紧密对接。
- en: The successful implementation of a branching strategy will play a critical part
    in building effective DevOps workflows. Many of the key objectives of DevOps release
    management is to provide a rapid, optimized, and effective workflow while ensuring
    the integrity and excellence of the final deliverable(s). The branching strategy
    that a software development team operates with and how they handle each new feature,
    upgrade, or bug fix should be managed by a well-planned branching strategy. Doing
    this will simplify the release process by letting software engineers work on individual
    features at a time without affecting other parts of the product or interfering
    with another team’s work.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 分支策略的成功实施将在构建有效的 DevOps 工作流中发挥关键作用。DevOps 发布管理的许多关键目标是提供快速、优化和高效的工作流程，同时确保最终交付物的完整性和卓越性。软件开发团队所采用的分支策略以及他们如何处理每个新特性、升级或修复应由精心规划的分支策略进行管理。这样做将通过让软件工程师一次专注于处理单一特性，避免影响其他部分或干扰其他团队的工作，从而简化发布过程。
- en: Choosing a branching strategy
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择分支策略
- en: The needs of the users and the requirements of the project should be taken into
    full consideration during the selection process for a branching strategy. This
    selection is heavily influenced by a variety of factors, including the process
    of creation, the scale, and the tastes of the developers. Which branching strategies
    that you use in your DevOps pipeline are influenced by different factors, such
    as the availability of CI/CD integrations. It’s not a good idea to use branching
    strategies in a DevOps-centric organization if they are incompatible with CI/CD
    or make it harder to establish.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择分支策略的过程中，应该充分考虑用户需求和项目要求。这个选择受多种因素的影响，包括创建过程、规模以及开发人员的偏好。你在 DevOps 流水线中使用的分支策略会受到不同因素的影响，例如
    CI/CD 集成的可用性。如果某些分支策略与 CI/CD 不兼容或使其实施更加困难，那么在以 DevOps 为中心的组织中使用这些分支策略就不是一个好主意。
- en: Defining an effective branching strategy offers you a well-understood trajectory
    for the progression of the development process, originating with prototype revisions
    and culminating with the final production deployment. This approach empowers developers
    to generate workflows that facilitate well-organized releases. As eluded to earlier,
    a key advantage of having a well-defined branching strategy is to enable parallel
    development, a tactic that enhances the efficiency of each developer’s workflow
    without introducing any significant headwinds. Branching strategies also offer
    seamless integrations with many DevOps technologies and workflows in an efficient
    manner. For advanced teams, branching strategies also open the door to deploying
    with GitOps workflows. Perhaps the best-understood advantage of using a branching
    strategy is its ability to facilitate rapid release cycles. The bottom line is
    that there are no one-size-fits-all techniques available when considering which
    branching strategy is right for you.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个有效的分支策略能为开发过程提供一条清晰的进展轨迹，从原型修订开始，一直到最终的生产部署。这种方法使开发人员能够生成有序的工作流，从而促进良好的发布管理。如前所述，拥有明确的分支策略的一个关键优势是支持并行开发，这种策略可以提高每个开发人员工作流的效率，而不会引入太大的障碍。分支策略还可以与许多
    DevOps 技术和工作流进行无缝集成，以高效的方式进行操作。对于高级团队来说，分支策略还为使用 GitOps 工作流进行部署提供了可能。使用分支策略最为人熟知的优势之一是它能加速发布周期。总之，在考虑选择哪种分支策略时，并没有适用于所有人的“一刀切”方法。
- en: Common DevOps branching strategies
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见的 DevOps 分支策略
- en: 'Now that you have a better understanding of what a branching strategy is and
    what a team tries to achieve from using one, let’s look at some popular branching
    strategies that are currently in use by software engineering teams. In this section,
    we will focus on the four most common branching strategies used in DevOps release
    management today: Gitflow, GitHub flow, trunk-based development, and GitLab Flow.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你对分支策略有了更深入的了解，并且明白了团队使用分支策略的目的，我们来看看当前软件工程团队常用的几种分支策略。本节将重点介绍当今 DevOps 发布管理中最常见的四种分支策略：Gitflow、GitHub
    Flow、基于主干的开发和 GitLab Flow。
- en: Gitflow
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Gitflow
- en: '`master` and `development`, both of which are maintained throughout the entirety
    of the development life cycle. The development branch is also known as a `long-lived`
    branch:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`master` 和 `development` 两个分支在整个开发生命周期中都会被维护。`development` 分支也被称为 `长生命周期` 分支：'
- en: '`master`: This is the primary branch where all of the code for production is
    kept. The modifications that are made in the `develop` branch are merged into
    the `master` branch and used during the deployment process, once the code is ready
    to be distributed.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`master`：这是主要分支，所有生产环境的代码都存放在此分支中。`develop` 分支中所做的修改会合并到 `master` 分支，并在代码准备好发布时用于部署过程。'
- en: '`development`: Change, grow, and evolve. Progress is made in the `develop`
    branch. This branch houses all of the pre-production source code, and all completed
    work from the other branches gets merged into `develop` immediately:'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`development`：变化、成长、演化。`develop` 分支是进展的地方。这个分支包含了所有的预生产源代码，其他分支完成的工作会立即合并到
    `develop` 分支。'
- en: '![Figure 8.3: Graphical depiction of the Gitflow branching strategy](img/B21803_08_3.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3：Gitflow 分支策略的图示](img/B21803_08_3.jpg)'
- en: 'Figure 8.3: Graphical depiction of the Gitflow branching strategy'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3：Gitflow 分支策略的图示
- en: Software developers create many different branches during their development
    process to satisfy various application requirements. The `develop` branch functions
    as the initial starting point – the basis for generating the software product.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发人员在开发过程中会创建许多不同的分支，以满足各种应用需求。`develop` 分支作为初始起点——它是生成软件产品的基础。
- en: Additional branches emerge similarly. For example, when developing software,
    it is common practice to make use of `feature` branches to make creating new features
    easier. These branches are a direct offshoot of the `develop` branch and nothing
    else.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 其他分支也是类似产生的。例如，在软件开发过程中，通常使用 `feature` 分支来简化新功能的开发。这些分支直接从 `develop` 分支分出，不涉及其他任何内容。
- en: If there are pressing production issues that require quick resolution, a hotfix
    will be developed as a reaction. The ability to `fork` from the `master` branch,
    also known as the `main` branch, is possessed by each of the branches. These forks
    must be merged with both the `master` and `develop` branches so that the changes
    are consistently integrated, and no conflicts arise. To streamline the process
    of releasing to production, the `release` branch collects all of the latest bug
    fixes and features. The new branch will be a child of the `develop` branch that
    will eventually be merged into the `master` branch.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有紧急的生产问题需要快速解决，将开发一个热修复分支进行响应。每个分支都有从 `master` 分支（也叫 `main` 分支）`fork` 的能力。这些分支必须与
    `master` 和 `develop` 分支进行合并，以确保更改的一致集成，并避免冲突。为了简化生产发布过程，`release` 分支收集所有最新的 bug
    修复和功能。新分支将是 `develop` 分支的子分支，最终将合并回 `master` 分支。
- en: The advantages of Gitflow include the ease of implementing distinct and specialized
    branches, each of which serves specific functions and is facilitated by a well-defined
    naming system. This approach is particularly advantageous for managing several
    iterations of the production code.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Gitflow 的优点包括易于实施的、各自具有特定功能的分支，每个分支都通过明确的命名系统进行管理。这种方法对于管理多个生产代码迭代特别有利。
- en: One of the disadvantages of Gitflow is that you can’t read the Git history anymore.
    Additionally, the *master*/*develop* split isn’t always needed in development,
    and doing so might be challenging when attempting to integrate with some CI/CD
    tools. Further, it’s not suggested for people who need to keep only one working
    version up to date. Finally, depending on the size of the project, this approach
    may make source control too hard to use.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Gitflow 的一个缺点是，你再也无法阅读 Git 历史。此外，*master*/*develop* 的分割在开发中并非总是必需的，且在与某些 CI/CD
    工具集成时可能会遇到挑战。此外，它不建议用于需要保持最新的单一工作版本的情况。最后，根据项目的规模，这种方法可能使源代码管理变得过于复杂。
- en: 'Here’s a summary of Gitflow:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 Gitflow 的总结：
- en: '`master` contains your distributed production code with tagging.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`master` 包含你的分布式生产代码，并带有标签。'
- en: Merge only the `hotfix` and `release` branches into master (preferably `release`).
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只将 `hotfix` 和 `release` 分支合并到主分支（最好是 `release`）。
- en: Feature branches are merged into `develop`.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能分支将被合并到 `develop` 分支。
- en: Release branches only include bug fixes, not new features. If a new feature
    needs to be developed, merge it into `develop`, not `release`.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布分支仅包括 bug 修复，不包括新功能。如果需要开发新功能，应将其合并到 `develop` 分支，而不是 `release` 分支。
- en: GitHub flow
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GitHub 流程
- en: 'GitHub is responsible for the inception of this strategy, which aims to provide
    a straightforward and unobtrusive method to manage the development process. When
    maintaining the source code for a single primary branch, **GitHub flow** manages
    the process as per the following rules:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 负责这一策略的起源，旨在提供一种简单且不干扰的方式来管理开发过程。当只维护一个主分支的源代码时，**GitHub 流程**按以下规则管理该过程：
- en: '`master` is the primary branch that other branches get split off of and into
    which new code gets merged. Everything that is in the `master` branch, sometimes
    called the `main` branch, should be ready to be deployed at all times.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`master` 是主分支，其他分支都从它分出来，并将新代码合并回该分支。`master` 分支中的所有内容，有时也叫 `main` 分支，应该随时准备部署。'
- en: 'Any modification (be it a feature or a bug) needs to be implemented in a new
    branch that is inherited from the `master` branch, and that branch should have
    a name that is descriptive of the development process. You should commit your
    code changes to a `feature` and/or `bug` branch locally, and push those new changes
    regularly:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何修改（无论是功能还是 bug）都需要在从 `master` 分支继承的一个新分支中实现，并且该分支的名称应该能够描述开发过程。你应当将代码更改提交到
    `feature` 和/或 `bug` 分支，并定期推送这些更改：
- en: '![Figure 8.4: Graphical depiction of the GitHub flow branching strategy](img/B21803_08_4.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4：GitHub 流程分支策略的图示](img/B21803_08_4.jpg)'
- en: 'Figure 8.4: Graphical depiction of the GitHub flow branching strategy'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4：GitHub 流程分支策略的图示
- en: Once the development of the `feature` or `bugfix` branch is complete, you will
    need to create a pull request so that the code can be evaluated. After the code
    has been inspected and validated, it needs to be tested in that same branch before
    it can be merged back into the `master` branch. Users should now be able to directly
    deploy the `master` branch with the latest updates after reaching this point.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`feature`或`bugfix`分支的开发完成，你需要创建一个拉取请求（pull request），以便对代码进行评估。在代码经过检查和验证后，它需要在同一分支中进行测试，然后才能合并回`master`分支。用户现在应该能够在达到这一点后，直接部署包含最新更新的`master`分支。
- en: The advantages of GitHub flow include that it is relatively easy to understand
    and has a straightforward workflow. Also, this method results in having a Git
    history that is spotless and simple to read. You can also incorporate it into
    CI/CD pipelines with ease. Furthermore, GitHub flow is perfect in situations where
    you only want to keep a single production version.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub flow的优点包括它相对容易理解，且具有直观的工作流。此外，这种方法能保持一份干净、易读的Git历史记录。你还可以轻松地将其集成到CI/CD流水线中。此外，GitHub
    flow非常适合仅需要保留单一生产版本的情况。
- en: Some disadvantages of GitHub flow include that it is overly simplistic, and
    it is not compatible with software development that is based on releases. Also,
    GitHub flow is unsuitable for use in situations where several different software
    versions must be maintained simultaneously. Furthermore, if the branches are not
    thoroughly tested before being merged with the `master` branch, this could result
    in an unreliable production code.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub flow的一些缺点包括它过于简化，且与基于发布的软件开发不兼容。此外，GitHub flow不适用于需要同时维护多个不同软件版本的情况。如果分支在合并到`master`分支之前没有经过彻底的测试，这可能导致生产环境的代码不可靠。
- en: Trunk-based development
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主干驱动开发
- en: 'With trunk-based development, developers are required to integrate their code
    modifications directly into a shared trunk (`master`) at least once each day.
    The shared trunk is maintained in a deployable state that is always ready for
    release, at any time. The code that developers write can be pushed from their
    local repository to the shared trunk after first being pulled from this trunk
    branch:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在主干驱动开发中，开发者需要每天至少一次将自己的代码修改直接集成到共享主干（`master`）中。共享主干保持在一个始终准备好发布的可部署状态。开发者编写的代码可以在从该主干分支拉取代码后，推送到本地仓库，并最终推送到共享主干：
- en: '![Figure 8.5: Graphical depiction of the trunk-based branching strategy](img/B21803_08_5.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5：主干驱动分支策略的图形表示](img/B21803_08_5.jpg)'
- en: 'Figure 8.5: Graphical depiction of the trunk-based branching strategy'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5：主干驱动分支策略的图形表示
- en: The `release` branches are considered to be *snapshots* of the source code,
    taken from the point in time when they were created and ready for release. This
    means that, in trunk-based development, `release` branches would never be maintained.
    Because this integration takes place frequently, developers can instantly monitor
    one another’s code changes and respond immediately if any problems are detected.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`release`分支被视为源代码的*快照*，它们是从创建时并准备发布的那个时间点拍摄的。这意味着，在主干驱动开发中，`release`分支永远不会被维护。由于这种集成发生得非常频繁，开发者可以立即监控彼此的代码变化，并在发现问题时立即做出响应。'
- en: Scaled trunk development
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 规模化主干开发
- en: A derivative of trunk-based development, **scaled trunk development** follows
    a similar pattern but is designed for ease of use with large enterprise-sized
    development teams.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 主干驱动开发的衍生版本，**规模化主干开发**，遵循类似的模式，但它为大型企业级开发团队提供了更易于使用的设计。
- en: 'The difference with trunk-based development is that after completing a build
    and ensuring its functional tests are successful, smaller teams may commit their
    changes straight to the shared trunk. On the other hand, the development process
    for scaled trunk development can be partitioned into short-lived `feature` and
    `bugfix` branches for organizations with larger workforces. After a `feature`
    or `bugfix` branch gets created, developers will continuously submit code to these
    specific branches, and that code can be validated through the use of pull requests
    and automated testing before being merged back into the shared trunk. Scaled trunk
    development allows development teams to do two things at the same time:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 与主干开发的区别在于，在完成构建并确保功能测试成功后，较小的团队可以直接将他们的变更提交到共享主干。而对于规模化主干开发，开发过程可以划分为短生命周期的`feature`和`bugfix`分支，适用于员工较多的组织。在创建`feature`或`bugfix`分支后，开发人员将持续提交代码到这些特定的分支，并且可以通过拉取请求和自动化测试验证这些代码，然后再将其合并回共享主干。规模化主干开发使开发团队可以同时做到两件事：
- en: Scale up without putting too much strain on the main branch
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不对主分支造成太大压力的情况下进行扩展
- en: 'Achieve a higher level of regulation and oversight over every change:'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现对每个变更更高水平的监管和监督：
- en: '![Figure 8.6: Graphical depiction of the scaled trunk development branching
    strategy](img/B21803_08_6.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6：规模化主干开发分支策略的图示](img/B21803_08_6.jpg)'
- en: 'Figure 8.6: Graphical depiction of the scaled trunk development branching strategy'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6：规模化主干开发分支策略的图示
- en: Notably, scaled trunk development makes use of feature flags to control the
    development activity occurring in the shared trunk, whenever the time comes for
    a release. With the help of these feature flags, development teams can selectively
    activate or deactivate sections of code during the building process and send just
    the essential code to production environments. With this method, teams can release
    straight from the trunk and tag a release number to each commit. Notably, if a
    bug makes its way into a release, then a `release` branch can be generated from
    a past commit and fixes can be cherry-picked into it. This style of branching
    is best suited to expert development teams that are experienced with source control
    management.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，规模化主干开发使用特性标志来控制在共享主干中发生的开发活动，每当准备发布时，通过这些特性标志，开发团队可以在构建过程中选择性地启用或停用代码的某些部分，并将仅必要的代码发送到生产环境中。通过这种方法，团队可以直接从主干发布，并为每个提交打上版本号标签。值得一提的是，如果发布中出现了bug，则可以从以前的提交中生成一个`release`分支，并将修复代码合并进去。这种分支方式最适合那些熟练掌握源代码管理的开发团队。
- en: Some advantages of trunk-based development include using CI in its purest form,
    with developers continually keeping the trunk up to date. Trunk-based development
    is an excellent option for CI/CD pipelines that include workflows that are more
    straightforward for ease of automated testing. Also, trunk-based development produces
    reduced cycle times and quicker developer feedback. As a result, modifications
    to the code are more readily apparent. With regards to iterations that are less
    frequent, they make it easier for your team to monitor all of the changes while
    also lowering the risk of code conflicts and increasing the overall code quality.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 主干开发的一些优势包括以最纯粹的形式使用持续集成（CI），开发人员不断保持主干的最新状态。主干开发是一个非常适合CI/CD流水线的选项，这些流水线的工作流更简单，有利于自动化测试的实施。此外，主干开发能够减少周期时间并加快开发人员的反馈。因此，代码的修改更容易被察觉。对于那些较少频繁的迭代，它们让你的团队更容易监控所有的变更，同时也降低了代码冲突的风险，提高了整体代码质量。
- en: Some of the disadvantages of trunk-based development are due to developers directly
    working with the shared trunk (`master`). Inexperienced developers may discover
    that this technique is intimidating. Furthermore, challenges may arise as a result
    of improper management of feature flags. Another disadvantage is that it increases
    the risk of bug creation since regression testing doesn’t happen on every merge.
    Also bad, this branching strategy requires development teams to wait for changes
    to go through test processes and automated builds before merging. Notably, it
    can be challenging to make the transition from more traditional approaches such
    as GitHub flow.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 基于主干的开发的一些缺点是由于开发者直接在共享主干（`master`）上工作。缺乏经验的开发者可能会发现这种技术令人畏惧。此外，由于功能标志管理不当，可能会出现一些挑战。另一个缺点是它增加了错误创建的风险，因为回归测试并不是每次合并时都会进行。此外，采用这种分支策略需要开发团队等待更改通过测试流程和自动化构建后才能进行合并。值得注意的是，从更传统的方法（如
    GitHub flow）过渡过来可能会比较困难。
- en: Overall, trunk-based development promotes collaboration, agility, and faster
    delivery of high-quality software. You can easily implement a solid CI culture
    and use feature toggles to your advantage. Furthermore, by adhering to this methodology,
    you will be able to respond to customer requests more effectively and have source
    code that is simpler to manage and improve over time. Regardless of the size of
    your team or the complexity of your project, using trunk-based development can
    enhance teamwork, speed up time-to-market, and improve your coding practices.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，基于主干的开发促进了协作、敏捷性和更快速地交付高质量的软件。你可以轻松实现一个稳固的CI文化，并利用功能开关为自己带来优势。此外，通过遵循这一方法论，你将能够更有效地响应客户需求，并拥有更易于管理和改进的源代码。无论团队规模或项目复杂度如何，使用基于主干的开发能够提升团队协作，加快上市时间，并改进编码实践。
- en: GitLab Flow
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GitLab Flow
- en: 'GitLab Flow fuses the principles of feature-driven development and feature
    branches with the utilization of issue tracking. This approach bears similarities
    to the GitHub flow methodology, but in contrast to the other workflows, this particular
    flow incorporates a distinct production branch that fulfills the role of managing
    the code that’s deployed to the production servers. Additionally, it is advisable
    to establish a `pre-production`, `staging`, or `release` branch to serve as a
    representation of your *staging* environment, where you can push your code for
    final testing before deployment. In other words, you need at least three main
    lines:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab Flow 将面向特性的开发原则和功能分支与问题跟踪结合起来。这一方法与 GitHub flow 方法论相似，但与其他工作流不同的是，它包括了一个独特的生产分支，用于管理部署到生产服务器的代码。此外，建议建立一个`pre-production`、`staging`或`release`分支，作为*staging*环境的代表，在这里你可以推送代码进行最终测试后再部署。换句话说，你需要至少三条主线：
- en: '`master`: This is the line for the local development environment that everyone
    uses.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`master`：这是每个人使用的本地开发环境的主线。'
- en: '`staging`: This is the final testing environment before production, where the
    `master` branch is integrated.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`staging`：这是生产环境之前的最终测试环境，`master`分支会在这里进行集成。'
- en: '`production`: Code in staging gets merged into the production branch via tagging.
    If staging is not being used, then this is where you would merge from `master`:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`production`：在生产环境分支上，`staging`中的代码会通过标签进行合并。如果没有使用staging分支，那么就是从`master`分支进行合并：'
- en: '![Figure 8.7: Graphical depiction of the GitLab Flow branching strategy](img/B21803_08_7.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7：GitLab Flow 分支策略的图示](img/B21803_08_7.jpg)'
- en: 'Figure 8.7: Graphical depiction of the GitLab Flow branching strategy'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7：GitLab Flow 分支策略的图示
- en: As described previously, within the context of GitLab Flow, the process of software
    development takes place within three distinct environmental branches. These branches
    serve as designated spaces for verifying and testing code. Once the code has undergone
    the necessary scrutiny and has been deemed suitable, it is merged into the other
    branches, starting with the `master` branch. This iterative merging process continues
    until the code eventually reaches the production branch, which signifies its readiness
    for deployment. Let’s consider the details of the three aforementioned branches
    in the environment.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在 GitLab Flow 的背景下，软件开发过程发生在三个不同的环境分支中。这些分支作为验证和测试代码的指定空间。一旦代码经过必要的审查并被认为适合，它就会合并到其他分支，从`master`分支开始。这个迭代合并过程会持续，直到代码最终合并到生产分支，标志着它准备好部署。让我们详细看看上述三个环境分支的细节。
- en: The master environment serves as the primary site for all developmental activities.
    The developers establish distinct branches for the specific feature or bug fixes
    they are currently working on and subsequently integrate these branches into the
    `master` (main) branch. Subsequently, the new code changes will undergo an additional
    level of evaluation and automated testing. Once new features and bug fixes are
    deemed ready for release, the source code will get merged from the `master` branch
    into a `pre-production` (`staging`) branch, which is the initial phase of production.
    Then, the aforementioned code will undergo further testing and finally get merged
    into the `production` branch for deployment.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 主环境作为所有开发活动的主要场所。开发人员为他们当前正在处理的特性或修复创建不同的分支，然后将这些分支集成到`master`（主）分支中。接着，新的代码变更将进行额外的评估和自动化测试。一旦新特性和修复被认为准备好发布，源代码将从`master`分支合并到`pre-production`（`staging`）分支，这是生产的初始阶段。然后，上述代码将进一步测试，并最终合并到`production`分支以进行部署。
- en: The term *production* refers to the process of creating goods or services. Upon
    integrating production-ready code, it becomes acceptable to deploy this branch
    directly into the production environment. This is the branch that’s dedicated
    to this specific environment and will consist exclusively of code that has been
    thoroughly tested and is deemed suitable for deployment to production.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '*生产*指的是创造商品或服务的过程。在集成了生产就绪的代码后，便可以将此分支直接部署到生产环境中。这个分支专门为该特定环境而设，且只包含经过充分测试并认为适合部署到生产环境的代码。'
- en: One advantage of GitLab Flow is that implementing GitLab ensures effective separation
    between different development contexts, guaranteeing a pristine state within each
    branch. Also, the software seamlessly fits into CI/CD pipelines. In short, GitLab
    Flow enhances the GitHub flow methodology by optimizing the workflow inside a
    DevOps ecosystem. Another benefit of GitLab Flow is that the Git history is more
    easily accessible and visually organized.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab Flow 的一个优点是，通过实施 GitLab，能够有效地分离不同的开发环境，确保每个分支的状态保持干净。此外，该软件无缝地融入了 CI/CD
    流水线。简而言之，GitLab Flow 通过优化 DevOps 生态系统中的工作流，增强了 GitHub Flow 方法。GitLab Flow 的另一个好处是，Git
    历史更加容易访问且可视化组织。
- en: One disadvantage of GitLab Flow is the added work of coordinating many environmental
    branches, which can make implementation difficult. If not managed well, development
    forks can become tangled and confusing. Because of its flexibility, you must carefully
    consider how you will utilize it, making it less straightforward to use than it
    could be. Ensure that everyone on your team is aware of the optional branches
    you want to use.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab Flow 的一个缺点是需要协调多个环境分支，这会增加工作量，并且可能导致实现困难。如果管理不当，开发分支可能会变得纠结和混乱。由于其灵活性，你必须仔细考虑如何使用它，这使得它比想象中更不易使用。确保你的团队成员都了解你打算使用的可选分支。
- en: GitLab is an excellent, mature compromise between Gitflow and GitHub flow since
    it is less complicated than Gitflow but more comprehensive than GitHub flow. It
    is flexible enough to meet your unique requirements thanks to its optional branches
    and performs well in CI circumstances. In its documentation for GitLab Flow, GitLab
    offers a comprehensive set of instructions that cover everything from rebasing
    your repository to crafting effective commit messages. Regardless of the approach
    your team decides on, it is a good idea to read through it.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab是Gitflow和GitHub flow之间的一个优秀且成熟的折衷方案，因为它比Gitflow简单，但比GitHub flow更全面。得益于其可选的分支，它足够灵活，能够满足你独特的需求，并在CI环境下表现出色。在GitLab
    Flow的文档中，GitLab提供了一套全面的指导，涵盖了从重置你的仓库到编写有效提交信息的所有内容。无论你的团队决定采用哪种方法，通读一遍文档都是个不错的主意。
- en: How to choose your branching strategy
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何选择分支策略
- en: All of the branching strategies that have been mentioned up to this point have
    been tested and proven, making them a good choice for managing your source code.
    However, each approach possesses a unique set of advantages and disadvantages,
    and you shouldn’t blindly accept one over another without doing an evaluation.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止提到的所有分支策略都经过了测试并且得到验证，是管理源代码的不错选择。然而，每种方法都有独特的优缺点，你不应盲目选择其中一个，而是应该做出评估。
- en: For example, in contexts where DevOps processes are constantly evolving, the
    standard Gitflow will not be the best option. All of the other solutions that
    have been presented here make an effort to enhance Gitflow and modernize it so
    that it is compatible with an agile DevOps process. Therefore, as usual, you will
    need to decide on an ideal strategy that fits all of your requirements and works
    for the operations of your unique business. When making this decision, it is important
    to consider the customer, the company, and your team.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在DevOps流程不断发展的背景下，标准的Gitflow可能不是最佳选择。这里提到的其他解决方案都在努力增强Gitflow并使其现代化，以便与敏捷的DevOps流程兼容。因此，像往常一样，你需要决定一个理想的策略，既符合你所有的需求，又适用于你独特的业务运作。在做出这个决策时，考虑客户、公司和你的团队非常重要。
- en: The ultimate goal of a branching strategy is to regulate and organize the changes
    that each team member makes to a code base into a single release. However, orchestrating
    all these changes involves more than just writing code. For example, a new release
    must be deployed somehow, and that’s where a release pipeline comes in.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 分支策略的最终目标是将每个团队成员对代码库所做的更改，组织并整合成一个统一的发布。然而，协调所有这些更改不仅仅是编写代码。比如，一个新的发布必须以某种方式进行部署，这时发布流水线就派上用场了。
- en: Exploring release pipelines
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索发布流水线
- en: A **release pipeline** is a workflow or a collection of steps that are undertaken
    to guarantee the swift implementation of recently delivered code. Fundamentally,
    a well-built release pipeline makes delivery to production quick, easy, and reliable.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**发布流水线**是一个工作流程或一系列步骤，旨在确保最近交付的代码能够迅速实施。从根本上说，一个构建良好的发布流水线使得生产环境交付变得快速、简便且可靠。'
- en: The exact stages of a release pipeline are different for each organization and
    product, but they often follow one another linearly. Notably, a more complex pipeline
    design may include steps that can be executed in parallel. This trend has become
    more popular in recent years due to the strategic advantages that parallel processing
    provides, but also because contemporary tooling has advanced well enough to make
    this functionality easier to implement without extensive scripting.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 发布流水线的具体阶段因组织和产品而异，但它们通常是线性顺序执行的。值得注意的是，较复杂的流水线设计可能包括可以并行执行的步骤。近年来，这种趋势变得更加流行，原因不仅是并行处理所带来的战略优势，而且因为当代的工具已足够先进，可以使这一功能更容易实现，而无需大量编写脚本。
- en: Typically, releases are triggered by an event, such as a code commit, although
    there are instances where the release might be explicitly initiated or scheduled
    in advance. You may also wish to automate the execution of your pipeline until
    a specific milestone, such as the conclusion of pre-production testing, followed
    by manual authorization for the actual deployment into production. For example,
    in heavily regulated industries, it may be desirable to incorporate manual triggers
    as conditions for completion, even though the pipeline process is initiated automatically.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，发布由某个事件触发，例如代码提交，尽管也有一些情况下，发布可能会明确启动或提前安排。你也可能希望将流水线的执行自动化，直到某个特定里程碑，例如预生产测试的结束，然后再进行人工授权，部署到生产环境中。例如，在受监管严格的行业中，可能希望将手动触发作为完成条件，尽管流水线过程是自动启动的。
- en: In most cases, having a proper release pipeline in your team’s portfolio of
    delivery strategies will mean the difference between deploying once a week and
    deploying multiple times a day. But critically, where does a release pipeline
    fit into the spectrum between CI, CD, and continuous deployment? Before we can
    answer that question, we must understand all the components of a release pipeline,
    including the related infrastructure supporting it. The following sections outline
    each element of a release pipeline in detail.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，拥有一个合适的发布流水线将是你团队的交付策略组合中，决定每周部署一次和每天多次部署之间差异的关键。但关键问题是，发布流水线在持续集成（CI）、持续交付（CD）和持续部署之间的关系是什么？在我们回答这个问题之前，必须理解发布流水线的所有组成部分，包括支持它的相关基础设施。接下来的各部分将详细概述发布流水线的每个元素。
- en: Tasks
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任务
- en: Tasks refer to specific activities that are accomplished at a detailed level.
    In the context of a release pipeline, the sequence of tasks within a stage should
    have little to no significance regarding the successful completion of the overall
    process. When it comes to controlling flow, use stages as the gates and tasks
    as the activities that get performed within them.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 任务指的是在详细层次上完成的特定活动。在发布流水线的上下文中，一个阶段内任务的顺序对于整个过程的成功完成几乎没有影响。在控制流程时，应将阶段作为关卡，将任务作为在其中执行的活动。
- en: 'At a bare minimum, your release pipelines must include the following tasks:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 至少，你的发布流水线必须包括以下任务：
- en: '**Provisioning infrastructure**: This refers to allocating and configuring
    the necessary resources to establish and operate various applications and services.
    This may require creating new virtual environments for testing purposes, or it
    may involve verifying the proper configuration of a test environment and even
    installing and activating the necessary services, such as a web server.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提供基础设施**：指的是分配和配置必要的资源，以建立和运营各种应用程序和服务。这可能需要为测试目的创建新的虚拟环境，或涉及验证测试环境的正确配置，甚至安装和激活必要的服务，例如
    web 服务器。'
- en: '**Application deployment**: This is the release process that requires the acquisition
    of packaged software and subsequent deployment into the designated server infrastructure,
    accompanied by the implementation of environment-specific configuration adjustments
    as deemed necessary.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用部署**：这是需要获取打包好的软件并将其部署到指定服务器基础设施中的发布过程，伴随必要的环境特定配置调整。'
- en: '**Software testing**: This refers to the process of conducting automated tests
    and disseminating the corresponding outcomes. In addition, it is a necessity that
    you provide the capability to designate a particular stage as unsuccessful should
    the test execution yield unfavorable results.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件测试**：指的是进行自动化测试并传播相应结果的过程。此外，你还必须提供在测试执行结果不理想时，将某个阶段标记为失败的能力。'
- en: '**Decommissioning infrastructure**: You should do this upon completing the
    pipeline phases, regardless of the outcome. It has become commonplace that teams
    leverage Kubernetes clusters to operate ephemeral pipeline phases in immutable
    container instances. The key advantage of this tactic is that container instances
    gracefully terminate all unpreserved resources upon the completion of their assigned
    duties.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**淘汰基础设施**：无论结果如何，在完成流水线各阶段后，应该进行此操作。现在，团队普遍采用 Kubernetes 集群来操作不可变容器实例中的短暂流水线阶段。这种策略的关键优势在于，容器实例能够在完成分配任务后优雅地终止所有未保留的资源。'
- en: Certain tasks within the release pipeline may necessitate an asynchronous approach,
    requiring the pipeline to be capable of accommodating a variety of related situations,
    such as the ones mentioned here. As an example, consider an application release
    pipeline that requires server instances to be created in the cloud. During the
    elapsed time between the beginning of infrastructure provisioning and the following
    deployment or testing of the application, it is necessary to allow for an interim
    period of approximately 1 minute. This window of time is needed to adequately
    prepare the environment for the forthcoming tasks of the release pipeline, avoiding
    a race-time condition.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 发布管道中的某些任务可能需要异步处理，这要求管道能够适应多种相关情况，例如这里提到的情况。举个例子，考虑一个需要在云端创建服务器实例的应用发布管道。在基础设施配置开始和随后的应用部署或测试之间的时间段内，需要大约1分钟的过渡时间。这段时间窗口用于充分准备环境，以支持发布管道接下来的任务，避免竞争条件。
- en: Artifact store
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工件存储
- en: A code change typically initiates the release process, which culminates in supplied
    infrastructure and delivered **software artifacts**. In this process, it may be
    necessary to tailor the packaged software to each environment by making it compatible
    with the relevant requirements and then deploying it. Hence, a repository for
    artifacts is the foundation of the release process, such as jFrog Artifactory
    or Sonatype Nexus Repository Manager.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 代码更改通常会启动发布过程，最终提供所需的基础设施和交付的**软件工件**。在这个过程中，可能需要根据每个环境的相关要求定制软件包，使其与环境兼容，然后进行部署。因此，工件的仓库是发布过程的基础，例如jFrog
    Artifactory或Sonatype Nexus Repository Manager。
- en: The requirement for the artifact store is to facilitate the management of discrete
    artifact versions. The key is to ensure that the artifacts that are collected
    concerning a singular build and subsequent release are both indivisible and separate
    from any other release, devoid of any form of intermingling or collateral interference.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 工件存储的需求是促进离散工件版本的管理。关键在于确保与单个构建和随后的发布相关联的工件是不可分割的，并且与其他任何发布完全分开，避免任何形式的混杂或相互干扰。
- en: In previous years, the realization of this goal was accomplished through the
    establishment of a network share designated for the sole purpose of facilitating
    the build and release process. Within this share, each build was allocated a distinct
    folder to ensure organizational coherence. When it comes to release management,
    the persistence of artifacts is of utmost importance, regardless of the approach
    chosen, be it utilizing a database, employing a specific methodology, or even
    opting to store all data in object storage, such as an S3 bucket or Azure Blob
    Storage.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几年，实现这一目标是通过建立一个网络共享来完成的，这个共享专门用于促进构建和发布过程。在这个共享中，每个构建都会分配一个独特的文件夹，以确保组织的一致性。在发布管理方面，工件的持久性至关重要，无论选择哪种方法——使用数据库、采用特定方法论，甚至选择将所有数据存储在对象存储中，比如S3桶或Azure
    Blob存储。
- en: Configuration store
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置存储
- en: On the other hand, a configuration store is a repository that houses various
    values that provide consistency across a variety of build/release configurations.
    For example, your CI/CD process and application’s build configuration data will
    likely be kept in a configuration store as a set of key/value pairs. Commonly,
    these pairings are injected as environment variables or as input parameters, in
    the build environment, though information on job completion can also be included.
    Commonly, these values include critical elements such as connection strings, API
    URLs, environment-specific users, permissions, and others.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，配置存储是一个存放各种值的仓库，这些值在不同的构建/发布配置中提供一致性。例如，你的CI/CD流程和应用的构建配置数据可能会作为一组键/值对存储在配置存储中。通常，这些配对会作为环境变量或输入参数注入到构建环境中，虽然作业完成的信息也可以包含在内。常见的值包括连接字符串、API
    URL、特定环境用户、权限等关键信息。
- en: A release pipeline also needs to be able to extract the necessary configurations
    specific to a given environment during each corresponding stage of the pipeline.
    Once extracted, the configuration should be used to facilitate provisioning and
    deployment processes. Notably, pipeline code can be made reusable by referring
    to the same parameters using appropriate values, depending on the environment.
    It is worth highlighting that the configuration store will ultimately include
    a portion of your production configuration, even if it is solely limited to infrastructure
    details. As a result, your configuration store must be fortified with robust security
    measures and encryption protocols.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 发布管道还需要能够在管道的每个对应阶段提取特定于给定环境的必要配置。一旦提取，配置应被用来促进配置和部署过程。值得注意的是，通过使用适当的值来引用相同的参数，管道代码可以实现复用，具体取决于环境。值得强调的是，配置存储最终将包含一部分生产环境配置，即使它仅限于基础设施的细节。因此，您的配置存储必须加强安全措施和加密协议。
- en: Logging
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志记录
- en: With DevOps, it is innately understood that, in the event of issues emerging
    during the execution of your pipeline, it is paramount that you scrutinize your
    logs to determine exactly where to look for problems and identify the root cause
    of the obstacles. There are several popular log aggregation tools on the market,
    a few of which are Splunk, ELK Stack, and Loggly, just to name a few. In a complex
    system characterized by numerous dynamic components, it is strongly recommended
    to establish a mechanism for aggregating the logs in an effective way that facilitates
    awareness and swift analysis.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 中，内建的理解是，在执行管道时如果出现问题，至关重要的是要仔细检查日志，确定准确的问题所在，并找出障碍的根本原因。市场上有几款流行的日志聚合工具，其中包括
    Splunk、ELK Stack 和 Loggly，仅举几例。在一个由多个动态组件构成的复杂系统中，强烈建议建立一种有效的日志聚合机制，以便提高意识并迅速进行分析。
- en: To ensure proper documentation, it is invaluable that all log entries be accompanied
    by, at the very least, the application name, pipeline stage, build number, and
    timestamp. After these requirements have been satisfied, any additional method
    you use to represent your log entries is entirely subjective. The most fundamental
    system might simply compile them all together and make them searchable, but more
    advanced build pipeline systems will provide you with a graphical representation
    of the execution of your pipeline, along with the ability to drill down into the
    logs that they produce.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 为确保适当的文档记录，所有日志条目至少应包含应用程序名称、管道阶段、构建编号和时间戳。满足这些要求后，您使用的任何额外方法来表示日志条目完全是主观的。最基本的系统可能只是将它们全部汇总并使其可搜索，但更先进的构建管道系统会提供一个图形化的管道执行展示，同时允许深入查看它们生成的日志。
- en: Workflow execution
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作流执行
- en: A workflow engine facilitates transforming manual workflows, typically driven
    by IT, into processes that are managed by both humans and software. This enables
    the routing and directing of information streams, allocation of tasks, and the
    establishment of collaboration channels to optimize resource utilization. The
    underlying mechanisms of this process vary depending on the specific implementation,
    but the execution of processes is essential. Whether this pertains to a sophisticated
    bash script or a hosted workflow engine such as Jenkins, the tasks must be executed
    in a logical, organized way.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流引擎有助于将通常由 IT 驱动的手动工作流转变为由人类和软件共同管理的过程。这使得信息流的路由和导向、任务分配以及协作渠道的建立成为可能，从而优化资源利用。这个过程的底层机制因具体实现而异，但过程的执行是必不可少的。无论是复杂的
    bash 脚本还是托管的工作流引擎（如 Jenkins），任务必须以逻辑和有序的方式执行。
- en: The difference between deployment and release
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署与发布的区别
- en: By now, you may be wondering what the difference is between a **deployment pipeline**
    and a **release pipeline** since these two terms are often used interchangeably.
    However, deployments and releases are indeed unique! Deployment is a transition
    of software from one controlled environment to another. On the other hand, releases
    are a curated collection of software changes that are intended for end users to
    experience.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，您可能会想知道**部署管道**和**发布管道**之间的区别，因为这两个术语通常是互换使用的。然而，部署和发布确实是不同的！部署是将软件从一个受控环境迁移到另一个环境。另一方面，发布是一个精心策划的软件更改集合，旨在让最终用户体验。
- en: 'Here are some critical differences between deployment and release:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是部署和发布之间的一些关键区别：
- en: A software release is a set of changes to be delivered in the production environment,
    while a deployment is a transition of code built from one controlled environment
    into another.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件发布是一组将在生产环境中交付的更改，而部署则是将从一个受控环境构建的代码迁移到另一个环境的过程。
- en: It is typical for a release to get updated in production environments frequently.
    In contrast, deployment is the last phase of the SDLC and it is executed across
    all environments.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常情况下，发布会频繁地在生产环境中更新。相反，部署是软件开发生命周期（SDLC）的最后阶段，并且在所有环境中执行。
- en: Statistically speaking, releases have a higher risk of exposing end users to
    buggy versions, errors, and issues in the software. Conversely, deployments occur
    in both the production environment and the development environments, which users
    will never see.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从统计学角度来看，发布版本更容易将有缺陷的版本、错误和软件问题暴露给最终用户。相反，部署发生在生产环境和开发环境中，用户永远不会看到这些环境。
- en: Release code may not be production-ready, while deployment code is production-ready.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布代码可能还没有准备好进入生产环境，而部署代码则是生产就绪的。
- en: Software releases are visible to users, while deployments can run in any target
    environment inside the infrastructure.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件发布对用户可见，而部署可以在基础设施中的任何目标环境中运行。
- en: Stated differently, the business justification is the defining feature that
    differentiates a deployment from a release. Commonly, release management leans
    toward being a business-oriented activity rather than a purely technical one.
    Often, the rationale behind the decision to schedule releases is influenced by
    the business strategy, particularly in terms of revenue generation and portfolio
    management.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，业务合理性是区分部署和发布的决定性特征。通常，发布管理更倾向于作为一种面向业务的活动，而非纯粹的技术活动。发布安排的决策背后的理由往往受到业务战略的影响，特别是在收入生成和投资组合管理方面。
- en: With the various environments that are involved, it is evident that deployment
    does not necessarily indicate that users will have access to the features that
    have been implemented. Certain organizations may schedule their releases concurrently
    with their deployment phases to production, while others will opt to hold off
    until the company makes a final decision. This means that the new features could
    be approved for release in production but unavailable to users until they have
    been deployed at a future point in time.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到涉及的不同环境，可以明显看出，部署并不一定意味着用户能够访问已经实现的功能。某些组织可能会将发布与生产环境的部署阶段同时安排，而其他组织则选择推迟，直到公司做出最终决定。这意味着新功能可能已经批准在生产环境中发布，但直到未来某个时间点部署后，用户才能访问这些功能。
- en: At this point, you are familiar with the importance of having a sound branching
    strategy. A good branching strategy that is appropriate for your team’s workflow
    allows you to logically organize the myriad of software changes so that cutting
    a new release becomes a straightforward process. You’ve also explored what a release
    pipeline is and how to implement one. However, with all these changes happening
    at once, how can they be managed in a sane way? What is the best way to show value
    for the hard work your team has put in? The answer is having sound change management
    practices.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你已经了解了拥有一个合理的分支策略的重要性。一个适合团队工作流的良好分支策略，能够帮助你逻辑性地组织各种软件更改，使得发布新版本变得更加直接。你也已经了解了什么是发布管道以及如何实现它。然而，在这些变化同时发生的情况下，如何以理智的方式进行管理呢？展示你团队辛勤工作的最佳方法是什么？答案就是拥有合理的变更管理实践。
- en: Understanding change management
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解变更管理
- en: Digital services follow a life cycle that must be managed, and most organizations
    accomplish this through a set of dedicated change management processes. These
    actions commonly serve as the first line of defense toward mitigating the potential
    negative effects a change might have on operations and security.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 数字服务遵循一个必须管理的生命周期，大多数组织通过一套专门的变更管理流程来完成这项工作。这些行动通常作为缓解变更可能对运营和安全产生负面影响的第一道防线。
- en: To facilitate the implementation of changes throughout the system, change management
    methods typically involve obtaining clearance from external reviewers or **change
    control boards** (**CCBs**). To validate compliance requirements, compliance managers
    and security managers rely heavily on change management processes to certify an
    entity’s compliance. This is why you must maintain an aggregate log of all changes
    based on detailed records to unambiguously certify your build and release process,
    along with any other compliance requirements. Most notably, many industry regulatory
    requirements often demand evidence that any modifications made are duly authorized
    and include a timestamp of when they occurred.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 为了促进整个系统的变更实施，变更管理方法通常涉及从外部评审者或**变更控制委员会**（**CCBs**）获得批准。为了验证合规性要求，合规经理和安全经理在很大程度上依赖变更管理流程来认证实体的合规性。因此，必须根据详细记录维护所有变更的汇总日志，以明确认证构建和发布过程以及其他任何合规要求。最值得注意的是，许多行业监管要求通常要求提供证据，证明所做的任何修改都已得到适当授权，并包含发生时间的时间戳。
- en: According to findings that were published in the 2019 *State of DevOps Report*,
    the most effective method for implementing change approvals is to do so via peer
    review during the development process. This method should be reinforced with automation
    to detect, avoid, and fix undesirable changes early in the SDLC. Continuous testing,
    CI, careful oversight, robust observability, and complimentary tactics offer early
    and automatic detection, increased visibility, and rapid feedback. In addition
    to this, companies can boost their performance by doing a better job at communicating
    the processes that are currently established and by assisting teams to easily
    navigate those processes. Senior executives should go see the actual work being
    performed, comprehend the process, understand the work, ask questions, and learn.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 根据2019年发布的*DevOps现状报告*中的研究结果，实施变更审批的最有效方法是在开发过程中通过同行评审进行。这种方法应通过自动化来强化，早期检测、避免和修复不良变更，确保在软件开发生命周期（SDLC）中尽早解决问题。持续测试、CI、谨慎监管、强大的可观察性以及补充策略提供了早期和自动化的检测、更高的可见性以及快速的反馈。此外，公司还可以通过更好地沟通当前已建立的流程，并帮助团队轻松地导航这些流程来提升绩效。高层管理人员应亲自去现场查看实际的工作执行情况，理解流程，了解工作内容，提问并学习。
- en: Higher performance is the result when all team members have full operational
    awareness of the change approval process. Next, we’ll discuss how to pragmatically
    implement a DevOps-centric change approval process.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有团队成员都对变更审批流程有全面的操作认知时，绩效会得到提升。接下来，我们将讨论如何务实地实施以DevOps为中心的变更审批流程。
- en: Implementing a change approval process
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施变更审批流程
- en: Reducing risk associated with implementing changes and meeting the requirements
    set forth by regulators are two of the most significant reasons for adhering to
    the change approval process. Separation of duties is a common multi-industry regulatory
    requirement stipulating that any changes to a process must be approved by an individual
    who is not the original creator of the process. This ensures that no single person
    has complete control over the entirety of a process.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 降低与实施变更相关的风险并满足监管机构设定的要求是遵守变更审批流程的两个最重要原因。职务分离是一个常见的跨行业监管要求，规定任何对流程的变更必须由非流程原始创建者的人员审批。这确保了没有单个个人对整个流程拥有完全控制权。
- en: The conventional approach to achieving these results has been to submit a proposed
    change to an external group for approval, such as a **change control board** (**CCB**)
    or a **change advisory board** (**CAB**). However, the DevOps Research and Assessment
    group has released studies revealing that these methods adversely impact the velocity
    of software deployments. Moreover, the belief that formal, external review procedures
    lead to lower change-fail rates was unsupported by the data. These cumbersome
    methods increase the production system’s exposure to risk and hence increase the
    failure rates of changes because they slow down the delivery process and cause
    the developers to release larger batches of work less frequently. The DevOps Research
    and Assessment group’s analysis of the data confirmed the validity of this theory.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这些结果的传统方法是将提议的变更提交给外部小组进行审批，如**变更控制委员会**（**CCB**）或**变更咨询委员会**（**CAB**）。然而，DevOps研究与评估小组发布的研究表明，这些方法对软件部署的速度产生了负面影响。此外，关于正式的外部审查程序能导致较低变更失败率的观点并没有得到数据的支持。这些繁琐的方法增加了生产系统暴露于风险的可能性，从而增加了变更失败率，因为它们减缓了交付过程，导致开发人员更不频繁地发布更大批量的工作。DevOps研究与评估小组对数据的分析证实了这一理论的有效性。
- en: Instead, teams should concentrate on the segregation of roles, which can be
    achieved through the use of a peer review. Furthermore, the platform that manages
    software development should be used to record reviews, comments, and approvals.
    Additionally, you should make use of automation, continuous testing, CI, monitoring,
    and observability so that you can quickly discover, avoid, and remedy any undesirable
    changes. Finally, consider your development platform to be a product that, when
    used properly, makes it simple for developers to obtain quick feedback on the
    impact that their changes will have on various axes, such as security, performance,
    and stability, in addition to defects.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，团队应该专注于角色的分离，这可以通过同行评审来实现。此外，管理软件开发的平台应被用来记录审查、评论和批准过程。此外，你应该利用自动化、持续测试、CI、监控和可观察性，快速发现、避免和纠正任何不良变更。最后，考虑将你的开发平台视为一种产品，当正确使用时，它能够使开发人员快速获得关于其变更对多个方面（如安全性、性能和稳定性）以及缺陷的影响的反馈。
- en: Your objective should be to make your standard procedure for managing changes
    quick and dependable enough to be used in times of urgency. In this new light,
    a CCB or CAB still plays an important part in the continuous delivery paradigm,
    which comprises streamlining the process of team communication and collaboration.
    Also, the CCB should facilitate the teams’ efforts to enhance software delivery
    performance through process improvement activities, such as hosting internal *hackathons*.
    Finally, leadership should offer input on strategic business choices that necessitate
    a balance between competing priorities, such as the choice between speed to market
    and business risk, or gaining buy-in from higher-ups in the organization.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你的目标应该是使管理变更的标准程序既快速又可靠，足够在紧急情况下使用。在这种新视角下，CCB或CAB仍然在持续交付范式中扮演着重要角色，涵盖了简化团队沟通和协作过程的内容。此外，CCB应该促进团队通过流程改进活动来提升软件交付表现，例如举办内部的*黑客马拉松*。最后，领导层应该对需要在竞争优先事项之间取得平衡的战略商业决策提供意见，例如在市场速度和商业风险之间做出选择，或获得公司高层的支持。
- en: The CCB’s new position is strategic. The delegation of meticulous code reviews
    to practitioners and the implementation of automated processes enable individuals
    in leadership and management roles to allocate their time and attention toward
    more strategic endeavors. The strategies of leading-edge software delivery organizations
    mirror this shift from gatekeeper to process architect and information lighthouse.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: CCB的新角色是战略性的。将细致的代码审查委派给实践者，并实施自动化流程，使领导和管理人员能够将时间和精力集中于更具战略性的工作。领先的软件下载组织的策略体现了从守门人到流程架构师和信息灯塔的这一转变。
- en: Obstacles to implementing change approval
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施变更审批的障碍
- en: Having too much dependence on a CCB to correct defects and approve changes is
    one of the most common mistakes found today. Choosing to conduct oversight using
    a CCB typically leads to extra waiting and unfortunate communication issues that
    crop up. While it is true that CCBs are effective at disseminating information
    about changes, many teams that operate across diverse time zones could be unintentionally
    misinformed regarding the significance of a new change or policy. Whitewashing
    approval processes is another common mistake that businesses make. This implies
    that the inefficiencies of change reviews arise when all changes are subjected
    to a uniform approval process, preventing individuals from allocating sufficient
    time and individual attention to those changes that require focused consideration
    due to variations in risk profiles or deadlines.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 对变更控制委员会（CCB）过度依赖，以纠正缺陷和批准变更，是当今最常见的错误之一。选择通过CCB进行监督通常会导致额外的等待和不幸的沟通问题。虽然CCB在传播变更信息方面是有效的，但许多跨时区工作的团队可能会无意中对新变更或政策的意义产生误解。掩盖审批流程的低效是企业常犯的另一个错误。这意味着，当所有变更都经过统一的审批流程时，变更审查的低效就会显现，无法让个人为那些由于风险或截止日期差异而需要特别关注的变更分配足够的时间和精力。
- en: 'Another common mistake that companies make is a lack of investment in continuous
    improvement initiatives. To enhance the performance of the change management process,
    it is imperative to focus on key performance indicators such as lead time and
    change fail rate. This necessitates providing teams with the appropriate tools
    and training to facilitate their effective navigation through the process:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个企业常犯的错误是缺乏对持续改进计划的投资。为了提升变更管理流程的绩效，必须关注关键绩效指标，如交付时间和变更失败率。这就要求为团队提供合适的工具和培训，以帮助他们有效地通过流程：
- en: '![Figure 8.8: Overcoming obstacles in DevOps change management](img/B21803_08_8.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![图8.8：克服DevOps变更管理中的障碍](img/B21803_08_8.jpg)'
- en: 'Figure 8.8: Overcoming obstacles in DevOps change management'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8：克服DevOps变更管理中的障碍
- en: Finally, adding unnecessary processes is a common error that many companies
    repeat. It is frequently the case that businesses implement extra procedures and
    more rigorous authorization protocols in response to stability issues that are
    encountered during the software manufacturing phases. Real-world analysis indicates
    that adopting this technique will most likely exacerbate the situation due to
    its impact on lead times and batch sizes, consequently producing a negative feedback
    loop. Rather than committing to this, allocate resources toward gradually building
    up the efficiency and security of the change-making process over time, but think
    of them as going hand-in-hand.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，增加不必要的流程是许多公司反复犯的常见错误。通常，企业会在软件制造阶段遇到稳定性问题时，实施额外的程序和更严格的授权协议。实际分析表明，采用这种方法很可能会由于对交付时间和批量大小的影响，进一步加剧问题，从而产生负面反馈循环。与其这样做，不如将资源投入到逐步提升变更管理流程的效率和安全性，并视其为并行进行的两项工作。
- en: Methods to enhance the change approval process
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改善变更审批流程的方法
- en: To improve your change approval processes, focus on implementing automated tests
    and the use of peer review processes to evaluate all modifications before they
    are committed. Another way to improve the change approval process includes developing
    methods that automate the detection of issues, including regressions, performance
    issues, and security vulnerabilities, as soon as possible once code changes are
    committed. Also, conduct regular analysis to identify and highlight high-risk
    changes and promptly conduct further investigations if any are found.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改善变更审批流程，重点实施自动化测试并使用同行评审流程，在提交前评估所有变更。另一种改善变更审批流程的方法是开发自动化工具，尽早检测出问题，包括回归问题、性能问题和安全漏洞，一旦代码变更提交后立即发现。此外，定期进行分析，以识别并突出显示高风险变更，并在发现时迅速进行进一步调查。
- en: Additionally, it is good practice to implement methods that move validation
    steps into the development platform. This helps your team study the entire change
    process, look for bottlenecks, and identify potential solutions. Instead of manually
    checking security rules as part of the software delivery process, they are implemented
    at the platform and infrastructure layer and in the development toolchain.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，将验证步骤移入开发平台是一个良好的实践。这有助于你的团队研究整个变更过程，寻找瓶颈，并确定潜在的解决方案。与其在软件交付过程中手动检查安全规则，不如在平台和基础设施层以及开发工具链中实施这些规则。
- en: According to findings presented in the 2019 *State of DevOps Report*, improving
    software delivery performance can be as simple as doing a better job of communicating
    the existing process and assisting teams in navigating it efficiently. This can
    have a positive impact on software delivery performance, even though the ultimate
    goal is to move away from traditional, formal change management processes. Outstanding
    performance is accomplished by everyone on the team having a crystal clear awareness
    of the procedures that must be followed to get changes approved for implementation.
    This indicates that they are secure in their ability to get changes through the
    approval process in the shortest time possible and that they are aware of the
    processes required for all of the different types of changes that they generally
    submit.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 2019 年的 *DevOps 状态报告* 中提出的研究结果，改善软件交付性能可能只是通过更好地沟通现有流程，并帮助团队高效地导航它。这对软件交付性能有积极影响，即使最终目标是摆脱传统的、正式的变更管理流程。出色的表现源于团队中的每个人对必须遵循的程序有清晰的意识，以便批准实施变更。这表明他们对通过审批流程以最短时间完成变更充满信心，并且他们知道所有常见变更类型所需的流程。
- en: Summary
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This marks the conclusion of [*Chapter 8*](B21803_08.xhtml#_idTextAnchor141).
    After reading and comprehending the contents of this chapter, you should now have
    a reliable blueprint in your mind to draw from as you begin conducting your initiatives
    regarding the development and implementation of governance, a branching strategy,
    release pipelines, and change management.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着 [*第 8 章*](B21803_08.xhtml#_idTextAnchor141) 的结束。阅读并理解本章内容后，你应该已经在脑海中有了一个可靠的蓝图，可以在开始进行治理、分支策略、发布管道和变更管理的开发与实施工作时加以参考。
- en: As you’ve seen, by architecting your CI/CD infrastructure to automatically enforce
    these tenets, you minimize the risk of human error and burnout. The implications
    for this should not be taken lightly as we are not replacing or watering down
    governance, branching strategies, release pipelines, and change management in
    our organizations. Rather, we are *baking them into the cake*. This means that
    these duties must still be thoroughly implemented and enforced as before, but
    through the various oversight mechanisms that can be implemented in the configurations
    of your CI/CD pipelines.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，通过设计你的 CI/CD 基础设施来自动执行这些原则，你最小化了人为错误和过度劳累的风险。这一点不容忽视，因为我们并不是在替代或淡化组织中的治理、分支策略、发布管道和变更管理。相反，我们是将这些内容
    *融入其中*。这意味着这些职责仍然需要像以前一样彻底实施和执行，但通过可以在 CI/CD 管道配置中实施的各种监督机制。
- en: In the next chapter, we’ll discuss effective strategies that you can use to
    develop a culture of DevOps in your organization’s release management strategy.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论可以帮助你在组织的发布管理策略中培养 DevOps 文化的有效策略。
- en: Questions
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题，以测试你对本章内容的掌握：
- en: What are each of the *OWASP Top 10 CI/CD* *Security Risks*?
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每一种 *OWASP Top 10 CI/CD* *安全风险* 是什么？
- en: What are the three common paths to CI/CD governance?
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CI/CD 治理的三种常见路径是什么？
- en: What is the significance of mapping CI/CD systems and processes? What term described
    this process?
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 映射 CI/CD 系统和流程的意义是什么？这个过程用什么术语来描述？
- en: What are the four most common branching strategies used by development teams
    today?
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前开发团队使用的四种最常见的分支策略是什么？
- en: What is the difference between *trunk-based development* and *scaled* *trunk
    development*?
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*基于主干的开发* 和 *扩展主干开发* 之间有什么区别？'
- en: Which of the four branching strategies described in this chapter promote *feature-driven*
    development?
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本章中描述的四种分支策略中，哪一种促进了 *功能驱动* 开发？
- en: What is the difference between a release pipeline and a deployment pipeline?
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布管道和部署管道有什么区别？
- en: What is the difference between an artifact store and a configuration store?
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工件存储和配置存储有什么区别？
- en: Why are external CCBs and CABs frequently cited as an anti-pattern in the context
    of DevOps release management?
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么外部CCB和CAB在DevOps发布管理中经常被视为反模式？
- en: Why is it considered good practice to implement methods that move validation
    steps into the development platform?
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么将验证步骤移入开发平台被认为是良好的实践？
- en: 'Part 3: Develop a Culture of DevOps in Your Organization’s Release Management
    Strategy'
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三部分：在您的组织发布管理战略中培养DevOps文化
- en: In this final section of the book, we’ll begin with understanding what DevOps
    culture is and how you can successfully develop one in your organization. Next,
    we’ll take a look at the crucial aspect of what receiving support from leadership
    and stakeholders looks like. Finally, we’ll explore how to overcome common pitfalls
    in DevOps Release Management by investigating some of the ways that you can hedge
    against these growing pains, leading your organization to become the next success
    story.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的最后一部分，我们将从理解什么是DevOps文化以及如何在您的组织中成功地发展DevOps文化开始。接下来，我们将重点讨论从领导层和利益相关者那里获得支持的关键方面。最后，我们将探讨如何通过调查一些可以应对这些成长痛点的方法，克服DevOps发布管理中的常见陷阱，帮助您的组织成为下一个成功案例。
- en: 'This section contains the following chapters:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含以下章节：
- en: '[*Chapter 9*](B21803_09.xhtml#_idTextAnchor168), *Embracing DevOps Culture
    in Your Release Management Strategy*'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B21803_09.xhtml#_idTextAnchor168)，*在您的发布管理战略中拥抱DevOps文化*'
- en: '[*Chapter 10*](B21803_10.xhtml#_idTextAnchor185), *What Does Receiving Support
    from Leadership and Stakeholders Look Like*'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B21803_10.xhtml#_idTextAnchor185)，*从领导层和利益相关者获得支持的表现是什么样的*'
- en: '[*Chapter 11*](B21803_11.xhtml#_idTextAnchor199), *Overcoming Common Pitfalls
    in DevOps Release Management*'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B21803_11.xhtml#_idTextAnchor199)，*克服DevOps发布管理中的常见陷阱*'
